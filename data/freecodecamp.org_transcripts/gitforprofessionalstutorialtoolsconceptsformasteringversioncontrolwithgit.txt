00:00 - This is an intermediate Git 
course taught by Tobias Günther.  
00:03 - He'll help you move beyond Git 
basics and improve your Git workflow.  
00:08 - Hello, Free Code Camp friends, my name is Tobias. 
And I'm going to improve your Git knowledge today.  
00:14 - There are a lot of beginner tutorials 
out there about version control with Git.  
00:19 - But I will help you understand the 
concepts behind many things in git,  
00:23 - how to craft the perfect commit, how to 
choose a branching strategy, or how merge  
00:28 - conflicts really work. So my goal is to give 
you more confidence when you work with git,  
00:34 - and to get you a little bit closer 
to becoming an advanced Git user.  
00:39 - Before we start a huge shout out to the Free 
Code Camp team, thank you so much for being on  
00:44 - this mission of teaching people how to code. And 
thanks for letting me contribute a little bit.  
00:50 - A couple of words about my own background, I'm 
part of the team behind tower, and tower is a  
00:56 - git desktop GUI. for Mac and Windows, we've been 
around for more than 10 years now, and helped over  
01:03 - 100,000 developers and designers well work more 
easily with git, become more productive with git,  
01:10 - and make fewer mistakes. For today's session, 
you don't need to have tower installed,  
01:17 - you can follow along on the command line, 
no problem. Alright, let's get started.  
01:29 - So let's talk a bit about how to create the 
perfect commit. So the first part is to add the  
01:35 - right changes, right. And the second part is to 
compose a good commit message. So let's start by,  
01:48 - let's start by adding changes to the 
commit. So our goal here is to create  
01:52 - a commit that makes sense one that only 
includes changes from a single topic.  
01:58 - And in contrast to the easy way when we 
sometimes just cram all of our current  
02:02 - local changes into the next commit. So this 
is the bad thing we should not do. But being  
02:09 - selective and carefully deciding what should 
go into the next commit is really important.  
02:16 - This is a better way of how a better commit could 
look like because it separates different topics.  
02:25 - On the other hand, the bigger a commit gets. And 
the more topics that are mixed into the commit,  
02:30 - the harder it gets to understand both for your 
colleagues and for yourself in the future. So  
02:38 - Git staging area concept is really helpful in this 
context, it allows you to select specific files,  
02:44 - or even parts of those files for the next commit. 
So this is what the staging area can do for you,  
02:51 - you can really select individual files for one, 
commit, and even parts of files for one commit  
02:58 - and leave others for future commit. So let's take 
a look at a practical example. And over the last  
03:06 - few hours, or maybe even days, we've created 
a bunch of changes, let's say git status here.  
03:14 - But let's say that not all of those are 
about the same topic. So let's stick to  
03:20 - that golden rule of version control to 
only combine changes from the same topic  
03:25 - in a single commit. And you probably already know 
that to include a specific file, we can simply  
03:33 - type, git add and the name of the file. So let's 
add that CSS file here. And voila, and let's take  
03:43 - a closer look at another file index HTML and see 
what changes it currently contains. So we can  
03:50 - use git diff for that. And we can see that there 
are two parts or chunks of changes at the moment.  
04:00 - And let's say that the first one belongs to the 
next commits topic, but not the second one. So  
04:05 - let's just add the first part to the staging 
area, we can do that. Let me just exit the  
04:12 - output here. We can do that with the git add git 
add dash p flag. P brings us down to the patch  
04:23 - level, we want to decide on the patch level what 
to include and what not. And we want to do that  
04:28 - with index HTML. So now Git steps through every 
every single chunk of changes with us. And it  
04:37 - asks us a simple question. Do we want to add 
this chunk or hunk to the staging area or not?  
04:43 - Don't worry about all the other possible answers 
you can give in that situation. I don't know them.  
04:49 - And I want to sleep at night for us. A simple 
why for Yes, or n for no is sufficient. So let's  
04:56 - say this one is actually the topic that we want to 
commit. So let's say yes, we want to include that.  
05:04 - And, and for the second one, this is not the 
same topic. So let's leave that out of the  
05:09 - staging area for the moment. So if we now take 
another look at git status, we can see that  
05:19 - parts of index HTML will be included in the next 
commit changes to be committed, and other parts  
05:26 - will be left for a future commit. Again, so index 
HTML is listed twice, awesome. crafting a commit  
05:35 - like this in a very granular way, will help you 
create a very valuable commit history, one that  
05:40 - is easy to read and to understand. And this is 
crucial if you want to stay on top of things.  
05:47 - Now let's talk about the second part of creating 
that perfect commit. And that is providing great  
05:54 - commit message. We'll start with the subject line. 
So of course, conventions are different between  
06:02 - teams. But generally, the advice is to write 
something very concise, less than 80 characters if  
06:08 - possible. And the subject should be a very brief 
summary of what happened. And here's a little  
06:15 - hint, if you have trouble writing something short 
and concise, then this might be an indication that  
06:20 - you've put too many different topics into that 
commit, right. So let's go to the command line.  
06:30 - And if I now type, so I have a couple of 
changes against stage for the next commit.  
06:36 - If I type git commit, I will get an editor 
window where I can enter a commit message.  
06:46 - And we'll write something simple 
ad capture for email signup.  
06:54 - If we add an empty line after the subject, get 
knows we are writing the body of the message and  
07:01 - has room for a much more detailed explanation. So 
here are a couple of questions you might want to  
07:07 - answer with your commit message body this 
year, what's now different than before,  
07:13 - what's the reason for the change? And is there 
anything to watch out for or anything particularly  
07:19 - remarkable about that commit. So I'll write my 
version of that in the text editor here. And  
07:36 - voila, so let's save and close 
this. And the commit is done.  
07:42 - Let's take a quick look at git log, and we can 
see Okay, so this is the last commit we just did.  
07:50 - This is the subject, and this is the 
body of the message. So by answering  
07:55 - these questions you're doing your colleagues 
and your future self a huge favor, because  
08:00 - it helps to understand what exactly happened 
in this revision, and what to watch out for.  
08:09 - Let's talk a bit about branching strategies. 
This is an important topic because Git leaves it  
08:15 - completely up to you how you want to work with 
branches. It only provides the tool, but you  
08:21 - and your team are responsible for using it in the 
optimal way. And this brings us to our first topic  
08:28 - conventions. If you work in a team, you need to 
come up with a clear convention on how to how  
08:33 - you want to work with branches. And you need to 
write this down somewhere where it's accessible to  
08:38 - everyone. Why your team needs a written convention 
you ask because Git allows you to create branches,  
08:44 - but it doesn't tell you how to use, you need 
a written best practice of how to work or how  
08:50 - work is ideally structured in your team to avoid 
mistakes and collisions. And this highly depends  
08:57 - on your team and team size on your project, and 
how you handle releases of your software. last not  
09:04 - least it helps to onboard new team members. When 
new people join your team, you can point them to  
09:09 - your documented will convention and will quickly 
understand how branches are handled in your team.  
09:16 - When you think about how you want to work 
with branches, you automatically think  
09:20 - about how you integrate changes and structure 
releases. These topics are tightly connected.  
09:29 - To help you better understand your 
options. Let's simplify a little bit.  
09:32 - I'll show you how to extreme versions 
of how you could design your branching  
09:36 - workflows. And the motto of the first one is 
always be integrating mainline development.  
09:44 - Always integrate your own work with the 
work of the team. That's the motto here.  
09:49 - And this is how it could look. In this 
example we only have a single branch  
09:55 - where everyone contributes their commits. So 
this is a really simple For example, I doubt  
10:01 - that any team in the real world would have such 
simple branching structure. But for illustration,  
10:07 - this extreme simplified example helps us 
understand the advantages and disadvantages  
10:12 - of this model. So in an always be integrating 
model, you have very few branches. And this makes  
10:17 - it easier to keep track of things in your project. 
Of course, also commits in this model must be  
10:23 - relatively small. This is a natural requirement 
because you cannot risk big bloated commits  
10:29 - in such an environment where things are 
constantly integrated into production code.  
10:34 - And this also means that you must have a high 
quality testing environment setup. Again,  
10:41 - the premise in this model is that code is 
integrated very quickly into your main line  
10:45 - your production code. And this means that testing 
and QA standards in your team must be top notch.  
10:52 - If you don't have this, this model will not 
work for you. The other end of the spectrum  
10:58 - is when multiple different types of branches 
enter the stage. So here branches are used  
11:05 - to fill to fulfill different jobs. New features 
and experiments are kept in their own branches.  
11:11 - releases can be planned and managed it managed 
in their own branches. And even different states  
11:16 - in your development flow, like production 
develop, can be represented by branches.  
11:24 - Remember that this all depends on the needs 
and requirements of your team and project,  
11:28 - it's hard to say that one approach is better 
than the other. And although a model like  
11:33 - this one seems complicated, it's mostly a 
matter of practice and getting used to it.  
11:39 - And as I already said, in reality, most teams 
are working somewhere in between these extremes.  
11:45 - Now let's look closer at two main types 
of branches and how they are used.  
11:51 - These two types of branches are long 
running and short lived branches.  
11:55 - So the distinction between a long 
running and a short lived branch  
11:59 - is one of the broadest you can make and a 
very helpful one. So let's start about talking  
12:05 - about the long running branches first. Every 
Git repository contains at least one long  
12:13 - running branch typically something called main or 
master. But there might be also other long running  
12:19 - branches in your project something like develop 
or production or staging. For example, these  
12:24 - branches all have something in common they exist 
throughout the complete lifecycle of the project.  
12:32 - I've already mentioned one typical example of 
such a long running branch. Every project has a  
12:37 - mainline branch like master or main. And another 
type of long running branches are so called  
12:44 - integration branches, often named develop or 
staging. Typically, these branches represent  
12:50 - states in a project release or deployment process. 
If your code moves through different states,  
12:56 - for example, from development to staging to 
production, it makes a lot of sense to mirror the  
13:01 - structure in your branches to. And finally, many 
teams have a convention connected to long running  
13:10 - branches. Typically commits are never directly 
added to these branches. commits should only make  
13:17 - it to the long running branch through integration. 
In other words, through a merge or rebase.  
13:23 - There are a couple of reasons for such a rule. 
One has to do with quality. You don't want to  
13:28 - add untested and reviewed code to your production 
environment as an example. And that's why code  
13:35 - should go through different states tests and 
reviews before finally arrives on production.  
13:42 - Another reason might be release bundling and 
scheduling, you might want to release new code  
13:48 - in batches maybe even thoroughly scheduled. 
And without such a rule. When code is directly  
13:54 - committed to long running branches like main, 
keeping an eye on what's released becomes pretty  
14:00 - difficult. Now the other type of branches are 
short lived branches. And in contrast to long  
14:08 - running branches, they are created for certain 
purposes, and then deleted after they have been  
14:14 - integrated. There are many different reasons 
to create short live branches. For example,  
14:19 - when you start working on a new feature, a bug 
fix or refactor refactoring or an experiment. And  
14:25 - typically a short lived branch will be based on a 
long running branch. For example, when you start  
14:30 - a new feature, you might base that new feature 
on your long running main branch for example,  
14:36 - and after making some commits and finishing 
your work, you probably want to re integrate it  
14:42 - back into main. And after you've safely merged or 
rebased it your feature branch can be deleted. And  
14:51 - I've already said that branching strategies 
will be different for each team and project.  
14:56 - It highly depends on your preferences 
or team size or type of project.  
15:01 - But I'd like to give you a glimpse into two 
pretty popular branching strategies, and take both  
15:07 - of them as inspiration for your own individual 
branching strategy. Let's start with GitHub flow.  
15:15 - GitHub advocates a workflow that's extremely 
lean and simple. It only has a single long  
15:22 - running branch, the default main branch, and 
anything you're actively working on is done in  
15:27 - a separate branch, a short left branch, no matter 
if that's a feature a bug fix, or a factoring.  
15:33 - So this is a very simple, very lean setup. Another 
very popular model is called Git flow. And this  
15:42 - offers a bit more structure but also more rules to 
follow. So the main branch is a reflection of the  
15:48 - current production state. The other long running 
branch is typically typically called develop  
15:54 - in any feature branches start from 
this one, and will be merged back  
15:58 - into it. Develop is also the starting point 
for any new releases, you would open a new  
16:03 - release branch, do your testing commit 
any bug fixes to that release branch.  
16:09 - And once you're confident that it's ready 
for production, you merge it back into  
16:14 - main, you would then add a tag for that release, 
commit on Main, and close the release branch.  
16:22 - As you can see, good flow defines quite a 
couple of tasks and steps in the process.  
16:29 - In tower, the good desktop GUI that we make, 
we support users by offering these tasks as  
16:34 - shortcuts in the app. And that way I can show 
you here, so you have all of the most important  
16:41 - actions that Git flow brings to you. So you 
don't have to remember all of the bits and  
16:46 - pieces and what you have to do and what comes 
next, that makeup, these different steps.  
16:56 - So if you ask different teams, how they are using 
branches, you will get many different answers.  
17:02 - There is no perfect branching model that everyone 
should adopt. It's more about understanding your  
17:07 - project, your release workflow and your team, 
and then modeling a branching workflow that  
17:12 - supports you in the best way possible. Let's talk 
about pull requests. First of all, you need to  
17:21 - understand that pull requests are not a core good 
feature. There are provided by your Git hosting  
17:27 - platform, which means they work and look a little 
bit differently on GitHub, git lab, Bitbucket,  
17:33 - Azure DevOps, or whatever you're using. But the 
basic principles and ideas are always the same.  
17:41 - Let's start by talking about why you would 
want to use pull requests at all. In essence,  
17:47 - they are a way to communicate about code and 
review it. The Perfect example is when you've  
17:54 - finished working on a feature, without a pull 
request, you'd simply merge your code into main  
18:00 - master or some other branch. And in some cases, 
this might be totally fine. But especially when  
18:07 - your changes are a bit more complex or a bit 
more important, you might want to have a second  
18:13 - pair of eyes look over your code. And this 
is exactly what pull requests were made for.  
18:19 - With pull requests, you can invite other people 
to review your work and give you feedback.  
18:26 - And after some conversation about the code, 
your reviewer might approve the pull request and  
18:31 - merge it into another branch. Apart from this, 
there's another important use case for pull  
18:39 - requests. It's a way to contribute to code to 
repositories, which you don't have right access  
18:46 - to think of a popular open source repository, you 
might have an idea for improving something, but  
18:52 - you're not one of the main contributors and you're 
not allowed to push commits to their repository.  
18:59 - This is another use case for pull requests. And we 
also have to talk about forks in this connection  
19:06 - of fork is your personal copy of a git repository. 
And going back to our open source example,  
19:15 - you can fork the original repository. 
make changes in your forked version and  
19:22 - open a pull request to include those 
changes into the original repository.  
19:28 - And one of the main contributors can then review 
your changes and decide to include them or not.  
19:37 - I already mentioned it. Every good platform has 
its own design and understanding of how pull  
19:43 - requests should work. And they look a little 
bit different on GitHub, git lab Bitbucket or  
19:48 - Azure DevOps, or whatever you're using. So here 
is an example we'll use the GitHub interface.  
19:54 - For this test case, let's use the Ruby on 
Rails open source repository and Let's see.  
20:01 - Alright, so here we are on GitHub on the Ruby 
on Rails main repository. And in the top right,  
20:08 - I can fork this repository, so I can create 
my own personal version of the repository.  
20:20 - And it's code base. And again, a reminder 
about why we're doing this, I don't have  
20:25 - access to push code into Ruby on Rails, into the 
Ruby on Rails repository. And for good reasons,  
20:32 - of course, because I'm not a Ruby on Rails Pro. 
But in my own fork repository, I can make changes,  
20:39 - I can make whatever changes I want. So I just 
did that I forked the repository. And I can now  
20:47 - simply clone that I'll get the clone URL, and then 
on the command line, git clone and remote URL.  
21:07 - And we will, in a second, when 
this has finished cloning,  
21:11 - we will create a branch and make some changes. So 
this is also important to understand pull requests  
21:18 - are always based on branches, 
not on individual commits.  
21:23 - So we're creating a new branch which we later 
request to be included. And let's ogburn  
21:31 - let's go into rails, and open this in my editor. 
And I'll just create a brief branch git branch  
21:51 - test and git checkout test. Alright, 
so I now am on a new branch and can  
21:59 - make a silly little change, let's change 
something in the readme file. This is a,  
22:08 - an awesome web application framework, close 
this. Alright, let's take a look at our changes.  
22:16 - git add README and git commit dash m silly  
22:23 - little change. So we now have made some small 
changes on a separate branch, and we can push that  
22:31 - branch to our own remote repository, our fork, 
so git push set upstream origin tests test. And  
22:51 - once this is available, okay, so this has worked. 
So we have now created the changes that we can  
22:58 - request to be included. Once I've pushed 
them to my remote repository on GitHub,  
23:06 - I can take another look at the repository 
in the browser and see what happened.  
23:12 - And voila, GitHub has noticed that I just pushed 
something here. And since it's a fork of forked  
23:20 - repository, GitHub detected my changes, and 
automatically asks me if I want to create a pull  
23:26 - request with those changes. Because in a forked 
environment, this is mostly what you want to do.  
23:32 - And if I do, I can propose which branch they 
should be integrated in. So I'll start the  
23:39 - pull request process here. So at the moment, I'm 
proposing to integrate my changes from my little  
23:46 - branch here in the fork back into the main branch 
in Rails, and let's say that is okay. And I can  
23:52 - add some comment. And I could then create the 
pull request and the maintainer of the original  
23:58 - repository would then be notified, and they can 
review my changes, and possibly integrate them.  
24:08 - Merge conflicts, nobody likes them, 
but they are a fact of life when you're  
24:13 - working with Git. And in most cases, they 
are not as tragic as we often think. Oh,  
24:19 - we'll talk about when they happen, what 
they actually are and how to solve them.  
24:25 - Alright, so the name already says it. Merge. 
Conflicts can occur when you integrate when your  
24:33 - merge changes from a different source. But keep 
in mind that integration is not limited to only  
24:38 - merging branches. Conflicts can also happen when 
rebasing interactive rebasing when performing a  
24:44 - cherry pick or a pull, or even when reapplying 
a stash, and all of these actions performed  
24:51 - some kind of integration and that's when merge, 
conflicts can happen. Of course, these actions  
24:57 - don't result in a merge conflict every time 
Thank God. But when exactly do conflicts occur,  
25:06 - actually gets merging capabilities are one of its 
greatest features and advantages. Merging branches  
25:12 - works effortlessly most of the time, because Git 
is usually able to figure things out on its own.  
25:20 - But there are situations where contradictory 
changes were made. And that's when technology  
25:26 - simply cannot decide what's right or wrong. 
These situations require a decision from a human.  
25:32 - The true classic is when the exact 
same line of code was changed into  
25:36 - commits on two different branches. Git has 
no way of knowing which change you prefer.  
25:43 - There are some other similar situations 
that are a little bit less common,  
25:47 - for example, when a file was modified 
in one branch and deleted in another.  
25:53 - But the same, but the problem is always the 
same changes contradict when you're working  
26:00 - with a desktop GUI, like tower forget, that 
can make things easier, especially because it's  
26:06 - just more visual, I can select things here. And 
this helps me understand what actually happens,  
26:13 - I can see these two changes conflict and I 
can select one or both or just this year and  
26:20 - solve the conflict pretty easily. How do 
you know when a conflict has occurred?  
26:28 - Don't worry about that get will tell you very 
clearly, when a conflict has happened. First,  
26:34 - it will let you know immediately in the 
situation, for example, when a merge or rebase  
26:39 - fails with a conflict. So let's try this 
out. Actually, we have something here, let's  
26:46 - provoke a merge conflict. And I'll just try 
to merge in developer to my main branch.  
26:54 - And voila, automatically I can see something is 
wrong here. Conflict conflict conflict, automatic  
27:01 - merge failed. So you can see that when I tried 
to perform the merge, I ran into conflict and get  
27:07 - tells me instantaneously about the problem. But 
even while even if I had overlooked these warning  
27:17 - messages, I would find out about the conflict 
the next time I run git status. So let's do that.  
27:24 - And pretty quickly, you have this unmerged path 
category in the status here. So in other words,  
27:33 - don't worry about not noticing, merge conflicts 
get makes sure you can't overlook them.  
27:40 - All right, um, though you 
can't ignore a merge conflict,  
27:46 - you really have to deal with it 
before you can continue your work.  
27:51 - Dealing with a merge conflict doesn't necessarily 
mean you have to resolve it, you can also undo  
27:57 - it. And this is sometimes very helpful. So keep 
this in mind always, you can always undo a merge  
28:02 - conflict and return to the state before. And 
this is true even when you've already started  
28:07 - resolving some of the conflicted files and you 
notice Oh god, I'm, I'm on the wrong track here.  
28:14 - Even then, when you find yourself in a 
dead end, you can still undo the merge.  
28:19 - And some commands come with an abort option that 
lets you do exactly that. So the most prominent  
28:24 - examples are Git merge, Uber abort, and Git rebase 
abort. So in our example, here, when I find why  
28:32 - I don't have the time to deal with this right 
now, or I've resolved something the wrong way,  
28:38 - I can always type Git merge dash dash abort here, 
and get status shows me I'm back to normal again.  
28:48 - So this should give you the confidence that you 
really cannot mess up, you can always aboard,  
28:53 - return to clean state and try again start 
over. So let's see what a conflict really  
29:03 - looks like under the hood, we will 
demystify those little buggers. And,  
29:07 - at the same time, help you lose respect for 
them and gain a little bit of confidence.  
29:13 - So as an example, let's look at the contents 
of one of the conflict files. I'll provoke that  
29:23 - merge conflict once again, and I can see that 
in my index HTML file, I have a conflict. So  
29:30 - let's take a look at that. And 
Nope, not this one. But this one.  
29:42 - So get was kind enough to mark the problematic 
areas in the file. So they're surrounded by these  
29:50 - symbols here. This is the start and this is the 
end of the problem area. So the content that  
29:56 - came that comes after the first marker, originally 
originates from our current working branch, then  
30:03 - aligned with some equal lines equal signs, 
separates the two conflicting changes. And  
30:10 - finally, this year came from the other branch 
that's displayed as well. So in this case,  
30:18 - it's pretty simple. In the develop branch 
where I made some changes, I deleted this  
30:22 - list item, these list items, and in my head 
branch, I changed them. So Git is unsure,  
30:29 - did you want to change them? Like Like 
this? Or did you want to delete them?  
30:33 - Like here? And I have to tell git, 
what's correct and what's not.  
30:40 - Okay, so how can you solve a conflict, solving 
the conflict is actually pretty simple, we need  
30:46 - to clean up these lines. And after we finish, the 
file should look exactly as we want it to look.  
30:53 - So it might be necessary to talk to the teammate 
who wrote the other changes and decide which code  
30:59 - is actually correct, maybe it's ours, maybe it's 
theirs, maybe it's a mixture between the two.  
31:04 - And this process of cleaning up the file, making 
sure it contains the what we actually want. This  
31:11 - doesn't have to involve any magic, you can do this 
simply by opening your text editor or ID and make  
31:16 - some changes. Sometimes, though, you'll find that 
this is not the most efficient way, that's when  
31:22 - dedicated tools can save you a little bit time and 
effort. So on the one hand, there are good desktop  
31:28 - gooeys. Some of the graphical user interfaces for 
good can be helpful when solving conflicts, you've  
31:34 - already seen one. So this is tower where you could 
where you can see what happened in the conflict.  
31:40 - And this visualizes the problem. And on the 
other hand, there are dedicated merge tools.  
31:46 - For more complicated conflicts can be great to 
have a dedicated different merge tool at hand,  
31:52 - you can configure a tool of choice using the Git 
config command. And then in case of a conflict,  
31:57 - you can simply type Git merge tool and have it 
open the conflict, I have a kaleidoscope app  
32:07 - installed on my Mac. So let's just try this Git 
merge tool. I configured that. So the first one,  
32:15 - as you can see is a pretty easy one or the 
second one here, error HTML was deleted. So  
32:21 - I don't need to see that I just need to decide, 
do I want to keep it or do I want to delete it.  
32:25 - So I'll stick with the deletion. And for the 
second one, there's really content in the file,  
32:32 - where it makes sense to open that merge tool 
that I configured, I can see, well, this is  
32:37 - the the change that I made. And this is the change 
that came from another person or from a different  
32:44 - branch. And what do I want to look like and what 
I wanted to look like I can choose these changes,  
32:50 - or these year or I can make my own changes here. 
So after cleaning up the file, either manually  
32:59 - or in a desktop, do your GUI or merge tool, we 
have to commit this like any other change. So I  
33:06 - can save it here and say this is resolved. And 
if I type git status, I can see these changes  
33:15 - would be committed, I've made some changes here 
in index HTML, this here is just a safety copy,  
33:22 - you can configure that also to happen. So you 
can always return to the to the original file.  
33:30 - But I would actually just commit this 
here. And simply by committing the resolved  
33:39 - files, I signal to get that conflict is 
completed. And I can go on with my work.  
33:50 - Most developers understand that it's 
important to use branches in git,  
33:55 - because having separate containers 
for your work is incredibly helpful.  
33:59 - Let's talk a bit about integrating branches 
about getting your new code back into an existing  
34:05 - branch. There are different ways to do this, and 
the two most common ones are merge and rebase.  
34:12 - Let's start by talking about 
merge and how it actually works.  
34:17 - When Git performs a merge, it looks for three 
commits. First the common ancestor commit.  
34:24 - If you follow the history of two branches in a 
project, they always have at least one commit in  
34:29 - common. At this point, both branches had the same 
content. And after that they evolve differently.  
34:36 - The other interesting commits are 
the end points of each branch.  
34:41 - Remember that the goal of an integration is 
to combine the current states of two branches.  
34:46 - So the latest revisions are of course 
important. Combining these three commits,  
34:52 - will perform the integration that we're aiming 
for. I've chosen a very simple example case  
34:58 - here because one of the two branches are 
a branch a here, it didn't receive any new  
35:03 - commits after the branching happened. So its 
latest commit is also the common ancestor.  
35:11 - In this case, the integration is dead simple 
good can just add all the new commits from  
35:16 - branch B on top of the common ancestor 
commit. And and get the simplest form  
35:21 - of integration is called a fast forward merge. 
Both branches then share the exact same history.  
35:28 - In most most cases, however, both branches 
move forward differently, of course.  
35:34 - And to make an integration, good, 
we'll have to create a new commit  
35:39 - that contains the differences between them. 
And this is what we call a merge commit.  
35:46 - Normally, a commit is carefully created by a 
human being at some meaningful unit that wraps  
35:52 - only related changes in the commit message 
provides context and notes. Now, a merge  
35:59 - commit is a bit different. It's not created by a 
developer, it gets created automatically by Git.  
36:05 - And it also does not wrap a set of related 
changes. Its purpose is to connect two  
36:10 - branches just like a knot. If you want to 
understand a merge operation after the fact,  
36:16 - you need to take a look at the history of 
both branches and their commit history.  
36:24 - Now let's talk about rebase. But before we 
start, let me emphasize something rebase is  
36:29 - not better or worse than merge. Most importantly, 
it's different. You can live a happy, good life  
36:35 - just using merge. But rebase has its pros and 
cons. So knowing what it does, and when it could  
36:40 - be helpful is nice. Alright, remember that we 
just talked about the automatic merge commit,  
36:47 - some people would prefer to go without these, 
they want the project history to look like a  
36:53 - straight line, without any science that it had 
been split into multiple branches at some point,  
36:58 - even after branches have been integrated. And 
this is what happens with rebase. Let's walk  
37:05 - through a rebase operations step by step. The 
scenario is the same as in the previous example,  
37:11 - we want to integrate changes from branch 
B into branch a. But now by using rebase.  
37:20 - The actual Git command to start this is 
really simple. It's just Git rebase and  
37:25 - the branch. Similar to Git merge, we just 
tell git, which branch we want to integrate.  
37:31 - But let's take a look behind the scenes. 
First, git will remove all commits on branch  
37:38 - a that happened after the common ancestor commit. 
But don't worry, will not throw them away,  
37:44 - you can think of those commits as being 
parked as saved somewhere temporarily.  
37:52 - Then get applies to new commits from branch B. 
And at this point temporarily, both branches  
38:00 - look exactly the same. But in the final step, 
those parked commits need to be included,  
38:07 - the new commits from branch a, they're positioned 
on top of the integrated commits from branch B,  
38:13 - they are rebased, as you can see, and the result 
looks like development had happened in a straight  
38:20 - line, there is no merge commit that contains all 
the combined changes, we preserve the original  
38:26 - commit structure. There's one more thing an 
important thing to understand about rebase  
38:32 - it rewrites commit history. So take a close look 
at this last diagram here. Commit c three has an  
38:39 - asterisk symbol, it has the same contents as C 
three, but it's effectively a different commit.  
38:46 - Because it now has a new parent before the rebase. 
See, one was its parent. And after the rebase,  
38:53 - it's C for which it was rebased onto a 
commit has only a handful of important  
39:00 - properties like the author date change set and 
who its parent commit is. and changing anything  
39:06 - any of this information, if effectively creates a 
completely new commit and with a new commit hash.  
39:13 - So we writing history, like that is not 
a problem for commits that haven't been  
39:17 - published or pushed yet. But if you're rewriting 
commits that have already been pushed to a remote  
39:23 - repository, you might be in trouble. Because 
another developer might have based their work  
39:29 - on the original c three commit, which is not here 
anymore. So let's close this topic with a simple  
39:37 - rule. Do not rewrite commits, that you've already 
pushed to a shared repository. tools like rebase,  
39:45 - you should only use them for cleaning up your 
local commit history. For example, for a feature  
39:51 - branch that you've been working on for some time, 
and before you integrate that back into a team  
39:57 - branch, then you're using re Based on that, that's 
what these tools like in rebase were made for.  
40:06 - Alright, so much for today. Be sure to check out 
my little advanced Git kit. It's completely free  
40:13 - of charge. It's a little collection of short 
videos about a lot of advanced Git topics from  
40:19 - things like interactive rebase, all 
the way to branching strategies,  
40:22 - merge conflicts, sub modules, what 
have you. It's really helpful if you  
40:27 - want to become more productive with 
Git and version control. And again,  
40:30 - it's free. More right? Have fun and see you 
soon. Here on the Free Code Camp YouTube channel.