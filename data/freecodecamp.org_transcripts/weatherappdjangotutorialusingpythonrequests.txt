00:00 - hey everyone it's anthony from pretty
00:02 - brittany here in today's video i'm going
00:04 - to make what you see on the screen here
00:06 - come alive so basically this app is
00:08 - going to allow you to see
00:10 - the current weather in various cities
00:12 - that you add to the database using this
00:14 - little form up here so i'll be creating
00:16 - this app in django and this is the
00:18 - template that i'm going to be modifying
00:21 - to be dynamic through jenga so before i
00:24 - get started i just want to let you know
00:26 - that i have a free course on my website
00:28 - django database essentials where you can
00:30 - learn how to use various parts of the
00:32 - model system in django you can check
00:34 - that out after you watch this video on
00:36 - my website at prettyprinter.com and if
00:38 - you don't remember that address you can
00:40 - click on the link in the description
00:41 - below
00:42 - so i'll have all the code for this video
00:45 - in the description below as well
00:46 - including this starting file
00:49 - and one other thing you should know is
00:51 - we're going to use the open weather map
00:53 - api so you'll have to sign up for that
00:55 - if you want to
00:57 - work along with me so i have an
00:59 - environment set up already and i have
01:01 - django installed so what i'll do is i'll
01:03 - start a project so django
01:06 - let's see where's my oh django admin
01:09 - start project and i'll call this
01:12 - the weather
01:14 - not the most creative name but that's
01:16 - what i have so i'll change into that
01:19 - directory and then i'll start by
01:21 - creating an app as well so
01:24 - python manage.pi start app and i'll call
01:28 - the app weather because whoops
01:31 - that's not what i want it so start app
01:34 - weather
01:36 - and i'll just delete
01:38 - the directory where i messed up
01:42 - okay so the app is going to be called
01:44 - weather because this app's only going to
01:46 - do one thing which is get the weather
01:49 - so the first thing i'll do is i will
01:53 - open up the files
01:55 - so i'll drag this into vs code
01:59 - and what i'll do here is i will add
02:02 - the app to the project so
02:05 - settings
02:07 - and i'll go over to
02:09 - install apps and add weather just like
02:12 - that
02:13 - and i'll be keeping all of the
02:15 - other
02:16 - settings as the default
02:19 - and then what i'll do is i'll create a
02:21 - super user well i need to migrate first
02:24 - so python manage.pi migrate
02:28 - and then python manage.pi create super
02:31 - user
02:34 - anthony will be the
02:37 - username prettyprinted.com it's the
02:40 - email
02:43 - i'll enter a password
02:46 - okay so i have my super user so what
02:48 - i'll do is i'll start up the app just to
02:49 - make sure everything is working
02:51 - correctly
02:52 - so i'll run the server
02:55 - go to the page and go to
02:58 - the admin dashboard and make sure i can
03:00 - log in so username anthony and then
03:02 - password is going to be password11 with
03:04 - a capital p
03:06 - login okay so everything there is fine
03:09 - so the next thing i want to do is i want
03:11 - to get that template into
03:13 - the project so what i'm going to do is
03:15 - i'm going to cut this and then paste it
03:17 - inside of the app i need to create a
03:20 - directory called templates
03:22 - and then inside of that directory i'll
03:23 - call create a directory called
03:26 - weather which matches the name of the
03:28 - app and here i'll paste
03:30 - the weather template in there so now
03:34 - i'll be able to look at it
03:36 - here and we see that's exactly what i
03:39 - want so the next thing i want to do is i
03:41 - want to actually view this page when i
03:43 - go to the index so for right now when i
03:45 - go to the index i get the
03:47 - congratulations page telling me that
03:49 - django has been
03:51 - or the
03:52 - project has installed correctly so what
03:55 - i'll do is i will
03:57 - first update the urls here i'll add
04:00 - another path
04:01 - for the index so i won't put anything in
04:03 - there because i don't want an additional
04:06 - endpoint and then i'll use include which
04:08 - i have to import from
04:10 - django.urls so include
04:12 - and then i'm going to include
04:15 - weather.urls which is a file that i'm
04:18 - going to create
04:19 - in just a second here
04:21 - so
04:22 - actually i'll
04:23 - use this as a base
04:26 - and then inside of my weather app
04:29 - i'll create urls.pi
04:32 - and then i'll paste that there and
04:34 - remove the things that aren't necessary
04:38 - okay so now
04:40 - i'm going to import all my views so from
04:43 - period import views
04:46 - and i'm going to create a view called
04:47 - index in a moment it doesn't actually
04:49 - exist yet
04:50 - but it will in just a second so
04:52 - views.index now i'll go to that views
04:54 - file and create that index view so it
04:57 - takes in request of course
05:00 - and then i'm going to return that
05:02 - template so i need to pass requests to
05:05 - render and i also need to pass the name
05:06 - of the template so in this case the name
05:09 - is weather slash
05:13 - weather.html so that should be enough
05:16 - so if i go back here and is my app
05:19 - running
05:20 - it failed because i saved before i
05:22 - created that urls file so let's try that
05:25 - again
05:26 - and now i can see the template being
05:28 - rendered through my app instead of just
05:31 - as a plain html file so now what i want
05:34 - to do is i want to make this kind of
05:36 - come alive so to do that i'm going to
05:40 - call the api
05:42 - and let me drag in the
05:44 - url for this
05:49 - so
05:50 - looking at the documentation
05:52 - here is an example of the call so
05:54 - basically it's their url data slash the
05:58 - version then i'm looking for the weather
06:00 - and then the query takes in the name of
06:02 - a city so this example has london or you
06:06 - can pass in the country as well so
06:07 - london comma uk
06:10 - and also i want to use fahrenheit as the
06:12 - units but you can use kelvin which is
06:14 - the default or you can use celsius
06:17 - if you choose to do so but i'll be using
06:19 - fahrenheit for this tutorial
06:21 - so here inside of the index i'll just
06:23 - put a url here as
06:29 - url so this is just the api
06:33 - url so once you sign up for open weather
06:37 - open weather map you'll get an api key
06:39 - so you just pass that app id into your
06:42 - url and you'll be able to access their
06:44 - api if you don't pass on the api key
06:47 - then you won't be able to access it here
06:48 - you see i have units as imperial meaning
06:51 - i will get fahrenheit as the temperature
06:54 - and then the queue here is actually a
06:56 - placeholder because that is the city
06:58 - that i'm going to query for
07:01 - so i'm going to just set the city
07:03 - variable equal to las vegas for now
07:05 - that's where i live
07:06 - and later i'll make it pull from the
07:09 - database but just to test things out
07:11 - i'll set the city to be equal to las
07:14 - vegas and now what i need to do is i
07:16 - need to install requests so i can
07:18 - actually send a request to this
07:20 - url so i'm going to run pip in
07:23 - install and then request that should
07:26 - only take a moment
07:27 - and here
07:28 - i'll import it
07:31 - so
07:32 - import requests
07:34 - and while that runs i'll just type in
07:37 - requests
07:38 - get
07:39 - url formats
07:42 - pass in the city
07:44 - and then i'll
07:48 - assign this to be r
07:50 - r short for response and what i'll do is
07:52 - i'll print out r dot text meaning the
07:55 - output of
07:56 - that response
08:00 - so if i run my server again
08:02 - and if i go to my index again
08:06 - it should
08:07 - run but i get an error tells me that
08:10 - the request does not have an attribute
08:12 - called gets
08:14 - and that's because i didn't use the s on
08:15 - the end that should be request
08:17 - not request
08:19 - so
08:20 - let me run that again
08:24 - and it works so if i go to my
08:27 - console i see the data here that i'm
08:30 - looking for so i just printed it out
08:32 - that's why we can see it here
08:34 - so the next thing i want to do is i want
08:36 - to pass this data to the template well i
08:38 - want to pass the relevant data because a
08:41 - lot of this data i won't be using but
08:42 - there is some data that is pretty
08:44 - important so basically looking at this i
08:46 - need the name of the city i need the
08:48 - temperature in fahrenheit i need a
08:50 - description of the weather and i need
08:52 - the icon so the icon the temperature and
08:57 - the description come from the api and
08:59 - then the city of course comes from my
09:01 - app
09:03 - so
09:04 - i will create a dictionary that
09:05 - represents all of that information
09:08 - i'll call this city weather
09:11 - it's going to be a dictionary and for
09:14 - my
09:17 - request i'm going to
09:18 - call
09:19 - jason on this so it converts the result
09:22 - of the request into a json object
09:26 - or i should say it will interpret the
09:29 - responses a json object and convert it
09:31 - into
09:32 - a combination of python dictionaries and
09:34 - python lists so json objects can be
09:36 - easily represented by dictionaries and
09:38 - lists in python so that's what dot json
09:40 - is doing
09:41 - so there are four things that i said i
09:43 - want i want the city
09:46 - i want the temperature
09:50 - i want the description of the weather
09:52 - there
09:54 - and finally i want the icon so the icon
09:57 - is actually something that's hosted
09:59 - on their site so as long as you supply
10:02 - the right icon code then
10:05 - you will get the correct icon so these
10:07 - shouldn't be strings i'll remove that
10:09 - and since i have this r here that is
10:12 - what i want i'll take away that print
10:14 - statement so r is now a python
10:17 - dictionary
10:19 - and the city is actually coming from the
10:21 - city variable the temperature is going
10:23 - to come from r
10:25 - and then it's going to be main i believe
10:27 - so let me look here
10:29 - i'm looking for main yeah and then
10:31 - inside of main i'm looking for temp
10:33 - so main
10:35 - and then
10:36 - temp
10:39 - and then for the description
10:42 - this is a list i believe so weather
10:45 - and then it's going to be a list with
10:47 - one item in it so if i go to weather
10:50 - where is weather here we go so list with
10:52 - one item we see here the description in
10:56 - clear sky
10:57 - so whether first item in the list and
11:00 - then description
11:02 - and that will give me
11:04 - the description of
11:06 - the current weather and then i want the
11:08 - icon which is going to be pretty much
11:10 - the same thing except for instead of
11:12 - description i'm going to have
11:14 - the word icon
11:16 - so now let me just print this out to
11:18 - make sure everything looks okay
11:23 - and refresh the page
11:27 - and my app doesn't want to restart
11:29 - correctly so let me try that again
11:32 - and run this
11:34 - and we see the description has updated
11:37 - to broken clouds the temperature is
11:39 - 88.38
11:41 - the city is las vegas and the icon is 0
11:45 - 4 d so now let's pass all of that
11:47 - information over to the template so i'll
11:50 - remove the print statement
11:52 - i'll create
11:54 - a contacts variable and i'll just call
11:57 - this
11:58 - city weather
12:00 - and then i'll pass in the actual
12:02 - dictionary there
12:03 - and then i'll pass context to
12:07 - the template
12:08 - open up the template
12:11 - and then i need to replace the things
12:13 - that need to be updated so in this
12:14 - particular case
12:16 - this is going to be
12:21 - see
12:22 - a city weather
12:24 - dot
12:26 - city
12:27 - so this is just using
12:30 - everything i created in that dictionary
12:32 - say the weather so city weather
12:35 - dot
12:36 - temperature
12:41 - city
12:42 - underscore weather dots description
12:48 - and then finally the icon here i have
12:50 - the url so basically you modify this
12:53 - part in the url
12:54 - to use the icon code so city
12:58 - weather dot
13:00 - icon
13:01 - there we go
13:02 - so now if i refresh the page this should
13:05 - be a little different because it is not
13:06 - 29 degrees there are no thunderstorms
13:09 - right now and it's not raining so if i
13:11 - refresh this
13:13 - we see now we have the picture of the
13:15 - sun which means clear sky usually we get
13:18 - the actual temperature 89.56
13:21 - and then we have clear sky as
13:23 - the description and of course the city
13:25 - is the same because
13:28 - i'm using a different city if i change
13:30 - this
13:32 - all i need to change is one thing so
13:33 - instead of las vegas is this as a city
13:36 - if i said london
13:38 - and then i ran it it should give me the
13:40 - weather for london so i get london is
13:42 - the word here it's 47.39 degrees
13:45 - fahrenheit in london
13:47 - it's hazy and then it has this picture
13:49 - of what i assume to be haze i've never
13:51 - seen that kind of picture before for
13:52 - weather but then again we've never had
13:55 - haze in las vegas as a description as
13:57 - far as i can remember so
14:00 - you can see that just by changing the
14:01 - name of the city everything else works
14:03 - because you know you're calling the api
14:05 - with that new city and then it's just
14:07 - simply supplying that return data
14:10 - in this
14:11 - dictionary and passing it to the
14:13 - template
14:15 - so this is nice
14:16 - but this only works for one city at a
14:18 - time if i want to display multiple
14:20 - cities then i need a way to one
14:23 - represent multiple cities and two kind
14:25 - of loop over all those cities and
14:26 - perform a request for each one to get
14:29 - the weather for each city so to do that
14:31 - i'm going to create a table in the
14:33 - database
14:35 - and that table
14:37 - is going to be very simple so let's go
14:39 - to models
14:40 - and
14:42 - we'll call this city
14:44 - and the whole point of this table is to
14:46 - allow me to store a bunch of city names
14:49 - in the table
14:50 - so
14:51 - it's going to have a single useful
14:53 - column so name
14:54 - and then it's going to be
14:56 - a char field and we'll give the max
14:58 - length
15:00 - as 25
15:01 - and then i'll define a stir method on it
15:08 - and we'll just return self.name and then
15:10 - finally i need to define a meta class
15:12 - and this is just so the plural of city
15:15 - will be cities with i e s instead of s
15:19 - so it's just a little visual thing when
15:21 - you're using the admin dashboard so
15:23 - that's just verbose underscore name
15:26 - underscore plural
15:29 - just like that and then i want this to
15:30 - be cities because by default it's cities
15:32 - like that but i want it to be correct so
15:35 - i'll make the cities like that
15:37 - so now what i need to do is i need to
15:39 - make migrations
15:43 - and then i'm going to migrate
15:49 - okay and now what i want to do is i want
15:51 - to add this to the admin dashboard so
15:54 - admins
15:57 - dot site register and then the name of
15:59 - the model which i'll import from models
16:06 - just like that
16:09 - and
16:10 - i'm going to
16:12 - run the server so i can look at the
16:16 - admin dashboard so python manage pi run
16:18 - server
16:21 - and then i'll go to the admin dashboard
16:24 - and i see cities here so what i'll do
16:27 - now is i'll add a few cities
16:29 - los angeles
16:33 - tokyo
16:36 - and one more let's say
16:40 - melbourne
16:42 - if i can spell it correctly
16:45 - there we go
16:47 - okay so three cities and now what i want
16:51 - to do is i want to actually query for
16:53 - those cities so if i go back to the
16:56 - home page what i expect to see is the
16:58 - weather for each of those three cities
17:00 - that i have
17:01 - so to do that i need to first
17:05 - query the database for all the cities
17:06 - that i have so inside of
17:08 - views here what i'll do is
17:12 - i'll just add the query here so cities
17:14 - is going to be equal to city
17:16 - objects all and of course i need to
17:19 - import
17:20 - city from models so from models import
17:22 - city
17:23 - and with the cities
17:26 - now what i'm going to do is i'm going to
17:27 - loop over it and do something for each
17:29 - city so
17:30 - for four city in cities
17:34 - i'm going to do something and that's
17:35 - something is actually
17:37 - the same thing that i'm doing here so
17:39 - i'll just indent everything so it goes
17:41 - inside of the loop
17:42 - and what i want to do is i want to get
17:45 - the weather for each city and append it
17:47 - to a list
17:48 - so
17:49 - i'll call this list
17:51 - weather data
17:54 - and here at the bottom i'm going to
17:57 - append this city weather dictionary that
18:00 - i
18:01 - create for each city
18:04 - just like that so what it's doing is
18:06 - it's going to loop over all the cities
18:08 - that i have in the database and for each
18:10 - one it's going to query the api
18:13 - the data that gets returned is going to
18:14 - be put into this
18:16 - dictionary called city weather and that
18:18 - city weather dictionary is going to be
18:20 - appended to my weather data list and
18:22 - then it starts over and it kind of
18:24 - starts from scratch with the next city
18:26 - and it's going to append that city to
18:28 - the list so if i have three cities in
18:30 - the database then this list that i have
18:32 - will end up being
18:34 - a list of three elements
18:36 - so once i have that
18:38 - uh let me try printing this out
18:42 - so print
18:44 - weather data
18:46 - so this won't work correctly the first
18:49 - time
18:50 - but
18:51 - you see it's just one city melbourne but
18:53 - if i look at the prints i see
18:57 - three things
18:58 - inside of the
19:01 - list and i see a minor problem here it
19:03 - says the city
19:06 - is actually an object instead of the
19:08 - name of the city so that's an easy
19:10 - change if i go here instead of city is
19:13 - going to be city dot name because i
19:15 - don't want to pass the object i want to
19:17 - pass the name inside of the object that
19:20 - represents each city just a minor
19:22 - difference there the object is something
19:23 - that you work with in python the name is
19:26 - something that you're actually
19:27 - displaying to the user
19:30 - so now instead of passing city weather
19:32 - i'm going to pass weather data
19:35 - to the template and then i'll go into my
19:37 - template again
19:39 - and when i'm looping over something like
19:41 - this i want to find out where the html
19:44 - repeats because i want to have that html
19:47 - be inside of my loop so in this case
19:50 - it's the box that i need to create
19:52 - multiple times so each city gets its own
19:54 - box
19:55 - so for
19:56 - city
19:59 - in
20:01 - weather data
20:03 - and you know just for consistency
20:05 - purposes so i don't have to change
20:06 - anything here i use the same variable so
20:09 - for city weather in weather data
20:12 - and then i need to find the end of this
20:14 - box which is right here
20:16 - in four
20:18 - and now if i run this it should work
20:20 - correctly
20:23 - so now we see i have the three cities
20:24 - that i'm interested in i can't verify
20:26 - the weather in any of those cities
20:28 - because i'm not there but you see that
20:30 - is different for each one so in la it's
20:32 - 75 degrees tokyo 65 degrees in melbourne
20:35 - it is 70. and you see they all have
20:38 - clear skies which is nice it's good that
20:41 - there's nice weather all around the
20:43 - world right now
20:45 - so the last major thing that i want to
20:47 - do is i want to allow the user to
20:48 - actually type in a city here
20:51 - and add it
20:53 - that way i don't have to go into the
20:54 - admin dashboard and
20:57 - add the cities myself
20:59 - so what i'm going to do is i'm going to
21:04 - go into
21:06 - my app and create a new file called
21:08 - forms dot pi
21:10 - and inside of forms i'm going to say
21:12 - from django.forms
21:14 - import i want to import model form
21:17 - because my form is basically the same as
21:20 - the model so i'm only concerned with the
21:22 - name of the city so i don't need to
21:24 - create a custom form i can just create a
21:26 - form based off that model
21:28 - and then i know i need to import text
21:30 - input because i need to do something
21:31 - with it
21:32 - and then i'm going to say from models
21:35 - import city and i'll go ahead and create
21:38 - the form so class is going to be city
21:40 - form it's going to be a model form and
21:44 - then i need to define the meta class so
21:46 - i can assign the
21:47 - model to be city
21:49 - and then the fields that i'm interested
21:51 - in are only name so just one field and
21:55 - then i'll use text input in a second
21:57 - when i show you what goes wrong
21:59 - so now what i want to do
22:02 - is i'll go back to views
22:04 - and now i have to start thinking of the
22:06 - two cases that i'll have when i'm doing
22:08 - this i'm going to have a case where they
22:10 - are just viewing the page and i'm going
22:12 - to have a case where they are saving a
22:14 - new city to the database so they're
22:16 - actually hitting the submit button so
22:19 - in the case where they hit the submit
22:20 - button what i want to do is i want to
22:22 - save whatever they enter into the
22:24 - database and then return the same screen
22:26 - with basically the same information
22:29 - so to do that all i need to do is think
22:31 - about you know where to place this
22:33 - logically so
22:35 - really the main case that i'm concerned
22:36 - with is when it's a post request
22:38 - everything else is going to be the same
22:40 - after i save the data so method
22:43 - or request.method
22:44 - post
22:46 - and then i'm going to do something here
22:48 - and i can take away this city by the way
22:50 - because i'm no longer using that
22:52 - directly so i'll input or import from
22:56 - forms
22:57 - import city form
22:59 - and what i want to do is i'm going to
23:01 - instantiate this form so form equals
23:04 - city form and i'm putting this under the
23:08 - if request.method equals post because
23:12 - i want this form to be blank even after
23:15 - they submit it so if i set this to be
23:18 - in its own block where you know it's a
23:20 - git request then anytime they submit a
23:22 - city it will leave that city in the form
23:24 - when the page reloads and that's not
23:26 - something i want i want the form to kind
23:28 - of
23:29 - restart every time they submit so that's
23:31 - why i'm doing that here it may be a
23:33 - little confusing when i explain it but
23:34 - if you actually tried it in the code
23:36 - you'll discover what i mean by this
23:38 - you'll see that
23:39 - it doesn't reset the city so
23:42 - this is what it looks like
23:44 - when i pass the form
23:46 - so a form is form and then in the
23:48 - template i'll find the form that i have
23:52 - so basically it's just one single input
23:57 - and this a should be a button so let me
23:59 - update that
24:02 - and it's going to be type submit
24:05 - so type
24:07 - submit
24:08 - just like that
24:10 - and then
24:12 - i'm going to
24:14 - pass in the
24:15 - input from django forms so form
24:19 - dot
24:20 - name
24:22 - so let's take a look at that
24:26 - and i get the input under my original
24:28 - one but it doesn't look like my original
24:30 - one because it's missing
24:32 - the class input and the
24:35 - placeholder as well so that's why i use
24:37 - the text widget
24:39 - here
24:40 - so i'll define widgets here and by doing
24:44 - this i'll get access to the widget for
24:47 - the name so it's going to be a text
24:48 - input and really all i want to do is add
24:52 - a couple of attributes so one is the
24:55 - class so the class is input
24:58 - and then one is the placeholder
25:01 - the placeholder is going to be let me
25:04 - copy uh city name just like that
25:08 - so i'll paste that there
25:09 - and then i'll refresh take a look at it
25:12 - and we see it now matches the style of
25:14 - the original input
25:16 - so i'll remove the original input
25:18 - because i won't be using that one so let
25:20 - me just take that one away
25:22 - and now i should be able to submit my
25:25 - form
25:27 - and it tells me that crs
25:31 - csrf verification failed so what i need
25:34 - to do is i need to add the crs
25:38 - c
25:39 - r
25:39 - s f token just like that
25:42 - and then when i try this again
25:48 - and
25:50 - i'm missing something really obvious let
25:53 - me think about it for just a second
25:56 - should have the token there
26:00 - oh
26:00 - i misspelled it
26:02 - it's hard pronouncing
26:04 - acronyms like that okay so yeah it's
26:07 - csrf not crsf
26:10 - minor mistake
26:11 - okay
26:13 - so we see uh the weather is changing a
26:15 - little bit in these cities i'm guessing
26:17 - clouds are just moving over the cities
26:18 - that's why you see
26:20 - now there's broken clouds and over class
26:22 - scouts in those cities
26:25 - and if i submit the form
26:27 - nothing happens but
26:30 - if i want to see that data
26:33 - let's see
26:35 - views
26:36 - i'm going to
26:38 - print
26:39 - requests.post
26:42 - so now i'll just type in some gibberish
26:46 - hit add city and now i see
26:49 - that gibberish here that i typed in
26:52 - so now the last thing i want to do to
26:54 - get that working is i can use the
26:56 - functionality that model form gives me
26:58 - so first i need to instantiate the form
27:01 - using the request data so city form
27:04 - and then request requests.posts and then
27:07 - form.save will both validate it and save
27:09 - it to the database at the same time so
27:11 - form.save
27:14 - so now this should be it so if i add
27:16 - another city in here i'll use my
27:17 - original city las vegas then what i
27:20 - expect to happen is after i click this
27:21 - button the page will refresh and i will
27:24 - see four cities in here with las vegas
27:26 - being one of the four so add city
27:30 - and that's exactly what i see i see las
27:32 - vegas has been added to the end of the
27:35 - list if i add one more city
27:38 - toronto
27:42 - we see toronto is now there
27:45 - so that's all i wanted to do in this app
27:48 - of course there's so much more you can
27:50 - do you can make it to where you can
27:51 - delete cities if you want you can add in
27:53 - more weather information or anything
27:55 - that you can think of for this app there
27:57 - are so many different ways that you can
27:58 - modify it and like i said i'll include
28:00 - the code for this in the description
28:02 - below as well so you can try it out
28:04 - yourself