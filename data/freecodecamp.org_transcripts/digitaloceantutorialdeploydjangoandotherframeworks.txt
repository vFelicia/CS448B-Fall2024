00:00 - learn how to deploy projects at digital
00:02 - ocean from code with signin while it
00:04 - shows how to deploy Jango projects you
00:06 - can follow the steps with other types of
00:08 - projects along the way you'll learn
00:10 - about engine X supervisor git G unicorn
00:14 - postresql and more hey guys in this
00:17 - video I will teach you how to deploy one
00:19 - or multiple Jango projects to a server
00:22 - on digital ocean much of this can also
00:25 - be used for other Frameworks as well I'm
00:27 - going to use a server with ubun 22 04
00:31 - which is their latest stable version
00:33 - with long-term support and I'm going to
00:35 - use Technologies like engine x g unicorn
00:38 - post SQL supervisor let's encrypt GitHub
00:42 - and probably some more I've created two
00:45 - very basic jangle project on machine
00:47 - they don't do anything more than show a
00:49 - few pages and some images so it's easy
00:51 - to separate them from each other since
00:54 - we're going to deploy more than one
00:55 - project I created a little to-do list
00:58 - that we're going to go through in this
01:00 - video so first we have the introduction
01:03 - which is now then we're going to create
01:05 - a new account create the server install
01:08 - software and similar set up requirements
01:11 - file from the local environment send
01:15 - code to get uh set up the database on
01:18 - the server engine X get SSL certificate
01:22 - and
01:22 - similar so now the introduction is done
01:27 - then we can continue to create an
01:29 - account on digital
01:31 - ocean so if you just go to digital
01:34 - ocean.com you can sign up there which is
01:37 - free I have a link in the description
01:39 - below and if you click that one you will
01:42 - get $200 you can test this servers for
01:44 - 60 days so I have already created my
01:49 - account and logged in so when you have
01:51 - done the same thing you will be
01:52 - presented with with a screen similar to
01:55 - this one if this is your first
01:57 - experience with deployment all of this
01:59 - can be a bit intimidating but don't
02:01 - worry you would quickly get used to
02:03 - using digital lotion because everything
02:06 - here is well documented and easy to
02:08 - understand great so let's go back here
02:11 - so I can set this task to done next up
02:14 - done is to create a droplet so you have
02:17 - a create button up here where you can
02:19 - create things like droplets kubernetes
02:22 - app platform functions databases and
02:25 - similar so a droplet is like a virtual
02:29 - private server or VPS some places call
02:33 - it nodes and there are different terms
02:36 - for this but this is just a simple Cloud
02:39 - platform where we can have ubun to
02:41 - install and it's then possible to
02:44 - install software there for us so we can
02:48 - click this
02:49 - one and then first we need to select
02:52 - which region we want to have this it's
02:55 - practical to have this as close to where
02:58 - most of your users are
03:00 - since I'm located in Norway it's best
03:03 - for me to have it in Frankfurt or
03:06 - Amsterdam so I'm going to select
03:08 - Frankfort for this one and I only have
03:11 - one data center so it has to be this one
03:14 - so if I keep scrolling down then I can
03:18 - see here that I have OS you can also
03:20 - install Marketplace images that's
03:23 - typically comes with uh ready installed
03:26 - WordPress lamp larel or other Stacks but
03:31 - I'm just going to go for OS here select
03:33 - yuntu and version
03:37 - 2204 so you can see here this is LTS
03:40 - which stands for long-term support which
03:42 - means that they're going to support this
03:43 - for at least 5 years I think next step
03:47 - is the
03:48 - size so if you're going to do something
03:51 - that requires a lot of CPU you it could
03:54 - go here it's a little bit more expensive
03:56 - or if you need more memory need more
03:59 - storage Etc but I usually just go for
04:03 - the
04:04 - basic here you can also select what sort
04:06 - of SSD you want to use these are
04:09 - typically a little bit faster and you
04:11 - get AMD or uh CPUs or Intel but for this
04:16 - tutorial we can just select regular
04:18 - which is more than
04:20 - enough um since we're going to have
04:22 - multiple project This Server might not
04:26 - be big enough not sure but I'll just go
04:29 - for this this for
04:32 - now so then I have selected this this
04:34 - costs $12 per month and you only pay for
04:38 - each hour this is up and running so if
04:42 - you delete it after one day you will
04:44 - only pay for one
04:46 - day but even if it's off you are still
04:49 - paying so you need to delete it if
04:50 - you're not going to use
04:52 - it here you can connect to multiple diss
04:56 - if you need more volume because you get
04:58 - 50 GB
05:00 - but this volumes are typically a little
05:02 - bit
05:04 - cheaper uh you can also have weekly
05:07 - backups that's based on the price of the
05:11 - server I'm not going to use that now and
05:15 - then you can select how you're going to
05:16 - connect to the server you can either use
05:19 - SSH Keys which is the most secure or you
05:23 - can go here and type in a strong
05:27 - password so I'm just going to do that
05:29 - now
05:32 - like
05:33 - that um then if you want to have metric
05:37 - on the server you can have that this way
05:39 - you can get email warnings if you use
05:41 - too much uh CPUs or if uh you have a
05:45 - full dis or similar then you'll get the
05:47 - free an email
05:50 - warning um then if you want more than
05:53 - one servers you can do that here we just
05:56 - going to do one now because I want to
05:58 - show you how to have multiple project
05:59 - just on one server and then the host
06:03 - name this could either be something cool
06:05 - or it can just be something unique or
06:08 - something like this where you see that
06:09 - we are using ubun we have one virtual
06:12 - CPU we have 2 gab of ram it's in
06:15 - Frankfurt and I just put it uh without
06:18 - any tags I don't need to do that and it
06:20 - can just be in my project code with
06:23 - Stein so if I now click create droplet
06:27 - then that should be it and now you can
06:29 - see here that it
06:31 - is being cre in the background so this
06:35 - typically just takes a few minutes and
06:37 - when that's done everything is ready and
06:39 - we are ready to connect it and start
06:42 - updating
06:44 - stuff and now you can see that this is
06:46 - done so if I click this I will get a
06:49 - little bit more information about this
06:52 - um here's the IP address we're going to
06:54 - use to
06:55 - connect so click copy to get the IP
06:59 - address and go to a
07:01 - terminal um on Mac you have a built-in
07:06 - terminal or you can download iterm 2 on
07:08 - Windows I think you can download puty or
07:12 - maybe you even have it installed all
07:15 - already okay so now we can connect to
07:18 - the server by saying SSH root which is
07:22 - the main or root user for this server
07:25 - and hit
07:27 - enter yes I want to add that to the list
07:30 - and then the password I used to create
07:33 - the
07:34 - server um sometimes it can take a few
07:37 - minutes after this initialization is
07:40 - finished before you can connect so if
07:41 - you get the wrong password just close
07:44 - and try again in or three minutes and
07:46 - you should be able to get
07:48 - in great so now it's installed and we
07:51 - can access it perfect so then we can set
07:55 - this to done and we can continue to this
07:58 - task which is to update and install
08:00 - software so even though this is just
08:03 - created there are a few updates that
08:06 - usually can be updated when you're
08:10 - ready so to um make sure that all of the
08:15 - references and similar to the packages
08:17 - and software are up to date we need to
08:19 - run a command called sudu
08:22 - AP
08:24 - update so this is sort of just checks if
08:27 - there are anything to update
08:31 - like that and to run the actual upgrade
08:35 - we run sudo apt
08:40 - upgrade so you can see here there are a
08:42 - lot of things that needs to be installed
08:44 - now so just type capital Y and hit enter
08:47 - and wait a few minutes okay uh suddenly
08:50 - we're getting prompt with a little thing
08:53 - here what do you want to do about the
08:54 - modified configuration um you can just
08:57 - keep the local version in
09:00 - hit
09:01 - enter yes there's one more thing here
09:03 - saying that if you want to upgrade
09:05 - curent all for you to you need to reboot
09:08 - the server I'm not going to bother about
09:11 - doing that now so I just hit enter and
09:15 - hit enter again if you want to reboot
09:18 - you just need to type reboot hit enter
09:21 - and wait a few minutes okay so now
09:24 - everything is updated and upgraded so
09:26 - now we can install uh more most of the
09:29 - software that we are going to use here
09:31 - on server so to do that we run sudu AP
09:36 - install and we're going to install a
09:38 - package called python 3- pip and Python
09:42 - 3 pip is a package that installs pip and
09:45 - pip is a tool that we going to use to
09:47 - install additional python
09:50 - packages space we going to also install
09:53 - python
09:55 - 3-D and this is a set of tools and
09:57 - librar Sy
10:00 - and this is a set of tools and libraries
10:02 - for Python and I think it's required for
10:05 - packages that that are connected to
10:07 - language C for example we're going to
10:09 - use post SQL which requires this and I
10:14 - want inst lib
10:17 - p
10:19 - q-d uh this is also a set of tools and
10:22 - libraries more for postgressql and not
10:25 - necessarily Python and I won't install
10:28 - postgress ql and I want to install
10:32 - postgress ql oops postgressql D contrib
10:38 - and this is a package that contains some
10:40 - additional modules for postgress
10:44 - ql and I want to install ngex which is a
10:47 - web server we are going to use I want to
10:50 - install Search bot which is uh script or
10:55 - package that we going to use to get SSL
10:58 - certificates
11:01 - and we should install
11:03 - python python
11:05 - 3- SE bot D engine X this is a Sor
11:10 - engine X this is some helper things for
11:13 - engine X to get certificates using
11:16 - Python and
11:18 - supervisor which is a program that we're
11:20 - going to use to run in the background to
11:22 - make sure that Chango is always running
11:24 - on the
11:26 - server I will come back to a few of
11:28 - these later so you don't have to worry
11:30 - too much about this yet but now we can
11:33 - hit
11:35 - enter and yes I want to install all of
11:38 - this so just type capital Y and hit
11:41 - enter and wait so same warning as before
11:45 - just hit enter hit enter and we should
11:48 - be ready great so I can go back to my
11:51 - Todo list as at this TK to done next
11:55 - step is to configure post SQL or setup
11:59 - post post SQL so let's go back here we
12:02 - are still connected to the server and to
12:05 - log in to post SQL we are onun
12:08 - pseudo- to select the user which is
12:12 - postgress that is a user that postl
12:15 - comes with and we want to run a command
12:17 - called psql which is sort of a command
12:21 - line for uh post
12:24 - SQL um then I want to create a new
12:27 - database for one of the project so
12:31 - create
12:33 - database Space Project one and with
12:37 - semicolon and hit enter so now we have
12:40 - created the database next I want to
12:44 - separate user just for this database so
12:48 - create user and I'm going to call this
12:51 - project one user feel free to be a
12:55 - little bit more creative if you want it
12:58 - with pass
13:00 - word and I'm just going to use password
13:03 - project one
13:05 - password um this is just educational so
13:09 - I don't mind if this is very not
13:13 - secure um but of course you need to
13:16 - select a more secure password for your
13:19 - project hit
13:21 - enter next I need to do some um changes
13:26 - to this user so alter
13:30 - role and the role we're going to change
13:32 - is Project one user we're going to set
13:35 - the client and
13:37 - coding to
13:41 - utf8 so this just make sure that the
13:44 - data that are stored in the database is
13:47 - uh following utf8 standards and one more
13:51 - alter rooll project one user set
13:58 - default underscore transaction
14:01 - underscore
14:03 - isolation to read space
14:08 - committed wait that's not
14:11 - correct alter Ro project one user
14:15 - set was supposed to be two Ms there like
14:21 - that and this is that each query within
14:24 - a transactions sees only data committed
14:27 - before the query begin so other
14:30 - transactions can modify the data being
14:32 - read but those modifications are not
14:34 - visible to the current transaction until
14:37 - they are committed so that means that we
14:39 - can write to the database and read at
14:42 - the same time without there being
14:45 - anything bad
14:47 - happening you want to set the default
14:50 - time zone so alter
14:52 - roll same user set time zone to UTC
15:00 - hit
15:02 - enter um so now we have a database and
15:05 - we have a user but they are not
15:07 - connected so that's the last thing we
15:09 - need to do here Grant all
15:13 - piles
15:15 - privileges that's not the correct way to
15:17 - write this prival legus like
15:21 - that on
15:24 - database select database which is
15:27 - Project one the one we created here
15:30 - to the user we want to Grant all of the
15:33 - Privileges to and hit enter so now this
15:36 - user can insert data read data delete
15:39 - data
15:41 - Etc then I can just write back slq to
15:45 - quit this command line for post SQL so
15:49 - now the database should be set up it's
15:51 - still empty but we're going to come back
15:53 - to that later in this
15:55 - tutorial now I can set this task to done
15:59 - so the next step then is to create a
16:01 - virtual environment or at least the
16:04 - place where the users are going to
16:08 - be so I kind of want to have these in
16:11 - the same task because there are more or
16:14 - less
16:15 - similar so let's go back to the command
16:18 - line and then we can begin by installing
16:20 - or upgrading pip so uh
16:24 - sudu pip
16:26 - 3 install Das d
16:29 - upgrade pip just to make sure that we
16:31 - have the newest
16:35 - version yes y y y so we already have
16:41 - this okay so successfully install pip 24
16:46 - perfect and then we can create the
16:51 - folder where all of the project are
16:53 - going to be located so MK there/ web
16:57 - apps this could be projects or whatever
17:00 - you want but I'm used to putting all of
17:02 - my Jango projects in a folder or a root
17:06 - folder called Web apps next I want to
17:08 - create one folder for the project one so
17:12 - I'm get there project
17:16 - one go into
17:19 - this and then here I can create a new
17:24 - environment for this project so python
17:30 - 3-m
17:33 - van and then the name of the project
17:35 - which is just
17:36 - EnV you can call this whatever you want
17:39 - but EnV is easy to understand what
17:42 - do okay forgot to install this so just
17:46 - copy this line paste it hit enter and
17:50 - yes I want to install
17:53 - this okay
17:56 - okay if I just used the arrow post to
17:59 - click up two times I get the command
18:01 - here again I can hit enter and now my
18:05 - environment should be
18:08 - created great so then this is the
18:10 - environment for project
18:13 - one um I want to create a group or sort
18:17 - of a user group for all of the web apps
18:20 - so sudo group add space test system
18:24 - because I want to add this to the system
18:26 - web apps and then I want toate the ubun
18:30 - user so not a post user but a Ubuntu
18:33 - user for this project so sudu user add
18:38 - space D- system d-g which stands for a
18:43 - group ID and the group ID is web apps
18:48 - and then which shell to use so shell
18:51 - should be slash bin
18:53 - oops shell like that SL pin slash Bash
18:59 - then I can set a home folder for this
19:01 - user and the home folder is/ web
19:06 - apps SL project one so this is where you
19:10 - will be sent if you try to log in with
19:12 - this
19:13 - user and then I just specify the
19:16 - username here which can also be project
19:19 - one
19:21 - user
19:23 - okay so now we have the environment and
19:27 - we have the users here great so now I
19:30 - can go to the to-do list and set this
19:33 - here to
19:35 - done next St then is to set up the
19:38 - requirements Fields so if I go to the
19:42 - editor you can see that I have a project
19:44 - here with an environment file
19:47 - environment folder and I have the Jango
19:49 - project here with a core app and a few
19:52 - things the project looks like this it's
19:55 - very similar uh simple just have a front
19:57 - page with the title and image and a
20:01 - simple about
20:03 - page so it doesn't do very much but
20:07 - still I want to create an requirements
20:10 - field for this so if I now go to this
20:15 - tab I have the project running here and
20:18 - I can just stop it if I run LS you can
20:21 - see that I'm in the same folder as
20:22 - manage.py and this is also where I want
20:25 - my uh
20:27 - requirements
20:29 - requirements file to be so to create
20:33 - that I can say pip phe and you see that
20:37 - the packages I have installed here are
20:39 - asgf Jango 503 and SQL
20:43 - pars um to create a file just run this
20:46 - command and use this uh bracket here and
20:50 - pipe it into a file call
20:52 - requirements.txt
20:54 - if I go back to visual studio code you
20:57 - can see that I have bit here and I want
21:00 - to add a few more things here that we're
21:02 - going to need on the server first it's
21:05 - psycho
21:08 - pg2 Das
21:10 - binary equals
21:14 - 29.9 um this is a binary file or
21:18 - something that we need it's sort of an
21:19 - adapter between Python and post
21:24 - SQL um we're going to use something
21:26 - called EnV equal
21:29 - 005 this is a a package that are used to
21:34 - read environmental files from the server
21:38 - so you don't have to store things in the
21:40 - settings
21:41 - file and G
21:44 - unicorn equals equals 21 to Z gunicorn
21:49 - is another web server that we are going
21:51 - to use on the server so we're going to
21:54 - use both engine X and gunicorn and later
21:58 - I will explain how these are connected
22:00 - to each
22:01 - other so we can save this now and that
22:04 - should be it for
22:06 - the uh for the requirements file so I
22:10 - can set this to done so then we can
22:13 - create a separate settings file for the
22:18 - production so if I find Project one
22:21 - project one settings Pi I can copy
22:24 - everything here into a new file and save
22:26 - it as settings prod do
22:30 - PI um in production we do not want to
22:33 - have the secret key stored in here so we
22:37 - can read this from an environmental file
22:40 - instead I going to do that soon um debug
22:44 - needs to be set to false so in the
22:47 - production file you do not want this
22:49 - secret key to be here so you can just
22:52 - remove this and instead here we can say
22:56 - os. Environ . getet and we want to get
23:01 - the key called
23:02 - secretor key and default this to be
23:06 - empty so you can see here we get the
23:08 - warning because we have not imported OS
23:11 - yet so we do that here import
23:15 - OS and we also need to import the EnV
23:19 - that we just installed so below here we
23:23 - can say from
23:25 - EnV EnV import
23:29 - load.
23:31 - EnV and I just initialize this by saying
23:34 - load. EnV like that you can see I get a
23:38 - warning because I have not imported this
23:41 - uh sorry installed it we're going to do
23:43 - that when we
23:45 - deploy so this can just be like it is
23:48 - but copy this scroll down until you find
23:52 - where we set up the
23:54 - database um we want to use a password
23:57 - field here password word and then we can
24:00 - say DB pass word so this environmental
24:03 - file is something that I want to set up
24:05 - on the
24:07 - server um the engine cannot be sqa 3
24:10 - anymore it needs to be
24:12 - postgressql
24:13 - uncore Psycho pg2 which is the adapter
24:17 - that we installed the name is not this
24:21 - one but it can be project one which is
24:24 - the database name um not sure if you can
24:29 - see it anymore but yes it was here
24:31 - create database and then the
24:36 - user uh
24:38 - user pass in that one you could add
24:41 - these two in the environmental file if
24:42 - you want to do that but for me it's
24:45 - enough with just the
24:46 - password uh we need to set up the host
24:49 - which is Local Host and the port which
24:54 - can just be
24:55 - empty so now we have configured this to
24:58 - use um the post SQL database that we
25:02 - have created so we can save this
25:05 - now and if I now go to the to-do list I
25:09 - can set this hair task to
25:12 - done so now comes the question how do we
25:15 - send code to the
25:18 - server um you could zip the file send it
25:22 - and zip it and just have it there you
25:24 - could use R sync or SCP or similar but
25:29 - uh most cases we like to use GitHub so
25:31 - it's easy to send code and deploy
25:34 - whenever you
25:36 - want so I can go to github.com
25:40 - if you don't have an account it's free
25:43 - to sign
25:46 - up and when you are in here you can just
25:49 - click your profile up here and your
25:53 - repositories and then you have a plus
25:56 - button there and I want to create
26:00 - one called project one I don't need the
26:05 - description and this can just be public
26:07 - since I'm just sharing everything with
26:09 - you but if you choose private no one
26:10 - else can see that you have this
26:13 - repository not going to use this um this
26:17 - is something I want to do manually and
26:19 - no license so just create
26:22 - repository and I want
26:26 - to create a new rep repository I do not
26:29 - want to push an existing so if I go
26:33 - there now I can copy this go to command
26:37 - line and not on the server sorry here
26:42 - locally I can say this one to create a
26:44 - read me file so that I have that go here
26:49 - again get initialize like that so now I
26:53 - can say get status and you can see here
26:55 - that these files are going to be
26:57 - committed and before I do anything more
27:01 - of this here I want to do one thing and
27:04 - at is to create an get ignore file so in
27:09 - this folder not this one but this
27:12 - project one I say dog
27:16 - ignore and I want to ignore all files
27:20 - that just ends with PC in the root
27:24 - folder and in this folder p see and in
27:29 - the same sub folder there
27:33 - again so now we just ignore all of these
27:37 - because we don't want to have these in
27:39 - the
27:40 - repository I want to ignore files that
27:43 - is called
27:47 - EnV um and I also want to ignore this
27:50 - database file so db.
27:55 - sqlite3
27:56 - save um
27:59 - yes I think that should be it so now
28:01 - these files here will not be added to
28:03 - the repository not here and not on the
28:05 - server so now we can continue with this
28:08 - one but I want to run get add Dash
28:12 - because I want to um oops get status I
28:15 - want to add all of the field files that
28:18 - we have here so now you can see that all
28:20 - of these are going to be pushed to the
28:24 - repository next step is to commit this
28:28 - message so now get status now it looks
28:32 - like everything is done on Branch main
28:35 - nothing to commit because I have
28:37 - committed it but they are not pushed to
28:39 - the server yet or to
28:42 - giab first I need to set which branch to
28:45 - use and then I need to set up the origin
28:49 - which is the URL to the repository on
28:51 - get and then I can just get push you
28:54 - origin
28:56 - main so now we can see that I need to
28:59 - set up a username here my username is T
29:03 - hset and the password is not actually my
29:07 - password because now I get information
29:10 - that support for password authentication
29:12 - was removed AUST 13th
29:16 - 2021 okay so even if this is a public uh
29:20 - repository you need to specify which
29:23 - users can contribute and only the users
29:26 - which are added can cont tribute but
29:28 - they need to log in with a password so
29:32 - if I find um my
29:35 - profile sorry not my profile my settings
29:39 - page so when you have got into settings
29:41 - you can scroll down and click developer
29:44 - settings and in here we have something
29:46 - called personal access tokens can just
29:49 - use tokens classic and create a new one
29:52 - here so generate new
29:55 - token uh
29:57 - classic
29:59 - note code with Stein
30:02 - tutorial expiration this can just have
30:05 - no
30:06 - expiration and I want to have full
30:08 - control over this I don't think that I'm
30:11 - going to need any of
30:15 - these so
30:18 - yes generate token so then I get this
30:22 - token here I can copy that one and if I
30:26 - then go back here click up again to push
30:29 - this sign in with my username and paste
30:32 - the password or token I just created so
30:35 - now this was pushed and if I find here
30:38 - now and refresh then you can see here
30:41 - all of these are pushed here you can see
30:43 - the requirements file we have created
30:45 - and
30:46 - similar okay so now I can go to the
30:51 - to-do list that this to done next up
30:54 - then is to get the code from GitHub to
30:58 - do that I just click code here and copy
31:01 - this
31:03 - address go to the command line find the
31:06 - server make sure that you are in web
31:08 - apps SL project one where we have this
31:13 - folder oops I should not have marked it
31:17 - and then just get clone and paste in the
31:21 - URL so this is a public project so we
31:24 - don't need a password or token to get
31:27 - this data
31:29 - so now I have it here
31:32 - nice so if I go back here now I can this
31:35 - done then I need to set up the
31:37 - environmental
31:39 - file and before I go to the
31:43 - initialization of the database then we
31:45 - can install um
31:50 - software from in
31:53 - requirements forgot to add that as a
31:56 - task but now we can set up the EnV
31:59 - file so if you go back here go into
32:02 - project one which is the root folder for
32:04 - the jangle project vi.
32:08 - EnV to open up an editor you can see
32:11 - here now and to type things here you
32:13 - need to click I then you can see down in
32:15 - the corner it says
32:17 - insert here we can specify the secret
32:21 - uncore key so this should be something
32:25 - very long and secure
32:28 - and do not share this with anyone and
32:31 - then dbor
32:34 - password and paste in the password that
32:36 - I created earlier which was Project one
32:41 - password then I can click Escape now I
32:45 - can't insert anything more here and to
32:47 - save and quit I type colon WQ as you can
32:51 - see down here and hit enter so that is
32:54 - right and quit so if I a cat EnV now you
32:59 - can see that the contents of this file
33:01 - is this one and these are the things
33:04 - that I want to read in the settings file
33:07 - okay so now we can in
33:11 - um okay so let me just see here now I
33:14 - can set this to done now next up done is
33:17 - to install a software from the
33:19 - requirements file for example jungo to
33:22 - do that we need to activate the
33:23 - environment by say Source Envy bin
33:26 - activate see the name down here now and
33:30 - to install everything we need we is a
33:32 - pip install
33:33 - dasr and I need to specify the
33:36 - requirements file which is located in
33:38 - project one/ requirements.txt
33:41 - so I can see that everything almost at
33:45 - least was being
33:48 - installed okay it couldn't find EnV
33:53 - 005 okay so let's try to use
33:56 - this EnV instead so if you just copy
33:59 - this name go to your Visual Studio code
34:03 - and find the requirements file you can
34:07 - replace this equals equals and save I
34:11 - need to send this code to get again so
34:14 - if you go to the Local Host here then I
34:16 - can say get status you'll see that this
34:19 - file has changed so get add requirements
34:22 - at txt get commit DM change requirement
34:28 - get
34:31 - push and go on the server again going to
34:34 - project one say get pull to pull the
34:38 - latest
34:39 - changes okay I did a change in that one
34:43 - so let me just fix that and write pull
34:46 - again so if I now say cat requirements
34:50 - you can see that this is now there
34:52 - instead of the other
34:54 - EnV so let us try to run the p install d
34:58 - r requirements command
35:05 - again so now all of the packages was
35:08 - installed
35:10 - perfect so now we have G unicorn we have
35:13 - the postl adapter we have EnV we have
35:17 - Jango and everything we need in order to
35:20 - continue so now I can go to the to-do
35:23 - list and set this to done then we can
35:27 - initialize the database by running the
35:29 - migrate
35:31 - command so if I not try
35:33 - to let me just show the contents of
35:36 - manage.py this will try to use the
35:40 - project one. settings file so we need to
35:42 - change this to use we need to specify
35:46 - which settings file we're going to use
35:49 - so to do that we can say python manage
35:51 - Pi
35:53 - migrate D- settings equals
35:58 - um project 1. settings prod to point to
36:02 - that file
36:04 - instead so now we can see here that it
36:07 - actually run the
36:08 - migrations um we still don't have the
36:11 - db. SQ light because that doesn't exist
36:14 - this talked to the postgressql database
36:19 - so now we have a poql database running
36:21 - and we are connected to it using Jango
36:26 - nice
36:28 - okay next step then is G unicorn and G
36:31 - unicorn is sort of the web server we're
36:34 - going to use for Jango this is perfect
36:38 - for D Jango because it's fast and it's
36:40 - there just for Jango the engine X part
36:43 - of this tutorial goes more for the media
36:47 - files and settings files that are in
36:52 - Jango so we have installed this and now
36:56 - I want to create a
36:58 - script that are going to run D Jango
37:01 - make sure that D Jango is there which uh
37:05 - settings file to use which users to use
37:08 - Etc and to do that I can say
37:11 - touch um EnV bin
37:17 - gunicorn
37:18 - start and then I added this file Bing VI
37:22 - Envy Ben gunicorn
37:25 - Start first I just want to insert here
37:28 - and specify that this is a shell script
37:31 - so slash bin slsh so it's a shell script
37:37 - um set the name of this to be project
37:40 - one then I can specify the directory or
37:45 - the part to Jango project which is/ web
37:48 - apps SL project one/ project one next I
37:52 - want to specify something called sock
37:54 - file which is a file that gunicorn will
37:57 - create automatically when it's started
37:59 - so we don't do this manually but this
38:01 - should be located in web apps project
38:03 - one run g unicorn.
38:06 - sock um which user should do this user
38:11 - equals that is Project one user and this
38:14 - is the Ubuntu user that you added with
38:17 - the user add
38:19 - command the group that should be allowed
38:21 - to be here is web
38:23 - apps uh num workers equals 3 and if you
38:30 - remembered when we created the server we
38:32 - had one virtual uh CPU on the on the
38:37 - droplet so you multiply that by two and
38:40 - add one if we had two CPUs this would be
38:43 - five so you multiply two by two and add
38:48 - one and then which settings file to use
38:51 - so Jango underscore settings
38:55 - underscore module equals project 1.
38:59 - settings prod so that just points to
39:02 - that
39:03 - file and then we have a file in this one
39:07 - file called wsgi which just um sort of
39:11 - sets up the project and it's entry
39:14 - points before you are sent to the
39:16 - settings file which points you to the
39:17 - URLs file
39:19 - Etc so
39:22 - changoor wsgi uncore module equals
39:27 - project
39:29 - 1.
39:33 - wsgi uh time out equals 120 so this is
39:37 - just how long time before everything
39:39 - just shuts
39:41 - down so now we need to instruct uh this
39:44 - script to do a few things so we do that
39:47 - by saying
39:48 - CD dollar sign Jango there so you tell
39:52 - it to go into that folder so now we sort
39:56 - of are in this folder and when we are
39:59 - there we want to activate the
40:01 - environment by saying Source do/ EnV bin
40:05 - activate because this EnV folder is
40:08 - actually in this
40:11 - folder and now we want to uh export or
40:15 - set a few uh temporarily environmental
40:19 - variables by saying export Jango uncore
40:23 - settings underscore module equals dollar
40:27 - sign and then we can use this variable
40:30 - up here export python po so we need to
40:34 - alter this a little bit by passing in
40:38 - Jango there colon python
40:44 - part uh next we specify run there and
40:48 - where that is located so run there
40:51 - equals dollar sign pass in their
40:55 - name like that their name and sock file
41:01 - so we just specify that you should uh
41:04 - sort of start inside there the Run
41:08 - folder and the socket file um then we
41:13 - can a test- d to see if that folder is
41:17 - created run there and if it is not then
41:22 - we MK there- P run there so what this
41:27 - does is that it checks if this folder is
41:29 - created if not we create it and when
41:33 - that is done we start unicorn so
41:37 - exec um/ EnV because we are still in
41:42 - this folder EnV bin
41:46 - gunicorn and in here we pass in the wsgi
41:50 - module that we specified up there colon
41:54 - application back slash then here here we
41:57 - can specify a few names that are going
41:59 - to be handy in the log files and simar
42:02 - so D- name Plus in name which will be
42:06 - project
42:07 - one we add this backslash because then
42:10 - we can go to the next line and continue
42:12 - this so it don't belong a very long
42:14 - command but this is much easier to read
42:18 - workers can be set to num
42:24 - workers a timeout should be set to time
42:31 - out user equals here we use the equal
42:34 - sign and not just a parameter this is
42:37 - user which is this
42:39 - one and the group which is group back
42:45 - slash
42:47 - again then we bind Unix
42:51 - to stock
42:54 - file and then we specify which log level
42:57 - we're going to send to the log files so
43:01 - log-level equals
43:04 - debug another back sign back slash I
43:08 - mean log file
43:11 - equals like
43:14 - that so um hope you understand
43:18 - everything here if something here is
43:19 - unclear feel free to leave a comment
43:21 - below and I will try to answer as you as
43:24 - soon as
43:25 - possible now we can save quit save and
43:31 - quit and then uh the to-do list we are
43:35 - still on this one uh this one so we can
43:38 - try to run this here now by saying do/
43:41 - EnV then oops Envy
43:47 - then Ed
43:50 - unicorn
43:52 - start so permission denied okay we need
43:56 - to make this executable and we do that
43:58 - by saying CH mod plus X and then just
44:02 - paste this
44:04 - in try to do this one more time um it
44:10 - actually looks like this was started now
44:12 - and that's okay and it was okay now
44:15 - because the user I am is root but G
44:19 - unicorn is instructed to use the project
44:22 - one user and this will not have access
44:25 - to do that there and to get this access
44:28 - if I now run LS L you can see that this
44:31 - is owned everything here by root so we
44:34 - need to change the and the ownership of
44:38 - these folders by saying CH
44:41 - own- R because this should be recursive
44:44 - so it's in this folder this folder and
44:46 - this and also all of the sub folders
44:49 - specifi user by saying project one user
44:52 - colon web apps because it's in this
44:55 - group and Dot
44:57 - so then it to be in this folder and all
44:59 - of the sub
45:00 - folders if I run LS L again you can see
45:03 - that project one user now owns this and
45:06 - the web apps is the group it's
45:09 - in so if I now run the script again
45:13 - everything seems to be in order
45:17 - perfect just quit
45:20 - this and go here set this to done next
45:25 - step done is to set up something called
45:26 - super
45:27 - supervisor and supervisor is sort of
45:30 - like a it's not like a bot but it's a
45:33 - program that will run in the background
45:36 - and if for example um G unicorn stops it
45:40 - will try to start it again and it will
45:42 - make sure that it's being automatically
45:45 - started if you reboot the server and
45:48 - similar so we install this at the
45:51 - beginning so we just need to create a
45:53 - settings file for this I do that by
45:55 - saying vi/ Etc supervisor SLC and then
46:01 - the name which can be project
46:05 - 1.on here we specify in uh sort of uh
46:09 - brackets program column project
46:14 - one and then we need to instruct this to
46:18 - what command this should run so command
46:21 - equals SL web apps SL project one/ EnV
46:26 - then
46:28 - unicorn uncore start so we just want to
46:32 - make sure that it runs this command we
46:35 - need to specify which user it should use
46:38 - and that is Project one
46:40 - user and then we can specifi the log
46:43 - file for this which is Project one EnV
46:46 - logs actually I want this to be not
46:50 - there I want this to be in Project one/
46:53 - log so not inside environment but in
46:55 - this root folder and then a file called
46:58 - supervisor. log then we add redirect STD
47:03 - a equals true and this takes the output
47:07 - from the manage programs
47:09 - subprocesses to the standard output
47:12 - stream so we just for uple things that
47:15 - are outputed in Jango so you can get
47:17 - that in the supervisor log and then we
47:20 - specify at the environment the language
47:22 - is default in English us uh f8 and the
47:28 - same here so we can save now and quit
47:32 - and then we need to tell supervisor to
47:34 - use this or to activate it and we do
47:37 - that by saying supervisor CTL uh re read
47:41 - to check
47:44 - um okay you can see now it actually get
47:46 - the error because we don't have this
47:48 - logs folder we need to create that M
47:51 - okay there logs because you see that I'm
47:54 - here now which is the one that is best
47:57 - specified but if I run LS Lord now you
47:59 - can see that this is owned by root so if
48:02 - I just click up a few times until I find
48:05 - this command then I can make sure that
48:07 - project one user owns this folder as
48:10 - well great so let's run the reread
48:14 - command again there here project one
48:18 - available and then we say supervisor GTL
48:21 - update to initialize and start this if
48:25 - you now run supervisor GTL
48:28 - status then you can see here that this
48:30 - is running so now supervisor has start
48:33 - the G unicorn and G unicorn is running
48:36 - in the back end or the background we
48:39 - can't access this because uh gunicorn
48:42 - doesn't have a face out of this server
48:44 - and that is what engine X is going to
48:46 - help us with so I just want to go back
48:49 - here now set this to done before I
48:51 - continue by setting up NG
48:55 - X and to setup engine X we can create uh
48:59 - a new file but let's go to the settings
49:02 - uh sorry the
49:05 - command and to create the config files
49:08 - for engine X we can go to the folder
49:11 - slash engine
49:14 - X and to create the config files for
49:16 - enginex we go to the settings file there
49:19 - so
49:20 - cd/ Etc engin X sites
49:25 - available right LS here and you can see
49:28 - that we have the default one we can just
49:29 - delete this by saying rm- F
49:33 - default and then we can create our own
49:36 - by saying touch project one.
49:41 - conon and to edit this now we say VI pro
49:47 - project
49:49 - one. so first here we initialize
49:52 - something called an upstream
49:55 - Upstream project
49:57 - onecore appcore
50:00 - server at Cur Braes and in here I
50:03 - specify a server which we bound to Unix
50:07 - and the URL to that one is VB apps /
50:10 - project one run and then the gunicorn
50:13 - socket that was created so this can be
50:16 - closed and then we specify the server
50:20 - here so server another curly brace and
50:25 - we want to listen to Port A 0 listen 80
50:29 - and 80 is the port for
50:32 - HTTP and we can set up the server name
50:36 - and uh I have set up two domains to
50:39 - point to This Server now project 1. code
50:44 - with stein.com
50:46 - add the semicolon at the end there and
50:50 - in here I want to specify where we have
50:53 - the logs log files so access log equals
50:58 - web apps sorry no equals sign there just
51:01 - web apps SL project one/ logs SL
51:06 - access.log now we do the same thing with
51:09 - the error log web apps SL project1 SL
51:15 - logs error.log
51:17 - and we are going to have a static files
51:22 - uh for the admin interface and similar
51:24 - so we need to set up a location for
51:27 - static files so now uh uh engine X will
51:31 - handle this for us location SL static uh
51:36 - previously we have just used the python
51:38 - managed by run server to handle this but
51:40 - we can't do that in
51:42 - production in here we set up an alas to
51:47 - web apps SL project
51:49 - one/ project one which is the D Jango
51:53 - project this is just the root folder and
51:56 - then there if you have a folder called
51:58 - Static we can read from there so all
52:00 - urls that begins with static will go in
52:03 - here and find the
52:05 - files now we can do the same thing for
52:08 - media media
52:10 - slash set up an Al to the media folder
52:18 - media then that can be closed and then
52:21 - location so for everything else we go
52:25 - into this location
52:27 - and here I want to set up something
52:29 - called a proxy set
52:31 - header and what this says is that it's
52:34 - the standard HTTP header used to
52:36 - indicate the client's original IP
52:39 - address so everything will be uh pointed
52:42 - to wordss the log files and further down
52:47 - in this
52:48 - system and then one more proxy set
52:51 - header host HTTP Host this is almost the
52:55 - same thing just ensures that all of the
52:58 - requests similar from the original
53:00 - request is being sent forward to Jango
53:02 - so we can handle everything
53:05 - there then we say proxy redirect off and
53:10 - this is disabling URL redirection for
53:12 - responses from the Upstream server that
53:15 - we have up here and that means that
53:17 - engine X will not modify the location
53:19 - header in HTTP redirection responses
53:22 - received from the back end so that means
53:24 - that we have full control from and go
53:28 - and if the request is not a file name
53:31 - then we can say
53:33 - proxy
53:34 - pass HTTP call SL slash then we just
53:38 - pass in the project One apps server from
53:42 - the top there which means that um all
53:46 - other requests than these which are
53:48 - files will be sent in here and handled
53:50 - by the gunicorn server so now we can
53:54 - save and quit go up one folder and into
53:57 - a folder called sites enabled here you
54:00 - can see that we still have default so
54:02 - let's delete that one as
54:04 - well and run LS so now this is empty so
54:07 - now we just need to set up a symbolic
54:09 - link back to this one that we created so
54:13 - Ln s do
54:17 - sites available SL project onec dot so
54:24 - if I run this command now you can see
54:25 - that we have this file here and it just
54:27 - points back to this one so this is just
54:29 - sort of the best practice way to do
54:33 - this now we can start engine X by saying
54:36 - service engine X
54:40 - start so there were no errors which
54:42 - means that hopefully it was working and
54:46 - I can now go to Project 1. code with
54:49 - stein.com
54:51 - yeah I get welcome to engine X that is
54:55 - not Cor
54:57 - correct um let me try to restart
55:01 - this took a little
55:04 - while um refresh again and I will get
55:07 - the bad request 400 okay at least I'm
55:09 - not going to the default page for engine
55:12 - X
55:13 - anymore so if I now go to back to web
55:16 - apps project one
55:18 - logs then I can see in here I can cat
55:21 - the error file and see if there are
55:23 - anything no cat supervisor
55:27 - everything there seems to be running
55:31 - okay so why is there a problem
55:35 - now um this can be a Jango error so
55:39 - let's find out I think it is actually
55:42 - when I think about it if I just go back
55:44 - here we have something called allowed
55:47 - hosts and here I need to pass in project
55:51 - 1. uh code with stein.com say
55:57 - and then go here again get add dot get
56:02 - status let's see what I'm committing to
56:04 - server get commit changed hosts get push
56:10 - so now I sent the code back to get again
56:13 - made a
56:15 - change then I can go into the Jango
56:17 - folder as I get pull to get there
56:22 - again okay see I get the dubious
56:24 - ownership now that's because I am root
56:27 - user but if I say sudo
56:30 - Dash
56:32 - u d u uh project one
56:39 - user that did not
56:42 - work
56:46 - sudu Dash yes now you can see I change
56:49 - user to project one and if I go into
56:53 - project one folder and you can see that
56:55 - I'm in the jungle folder get
56:59 - pull then I can jump out of this user
57:02 - Again by run hitting command contrl D
57:07 - and now we need to restart supervisor in
57:10 - order for these changes to take effect
57:12 - so
57:15 - supervisor CTL restart project
57:19 - one so now that stops starts and we are
57:23 - ready to test again so now now I have
57:27 - the project 1. code.com running nice you
57:31 - also see that this media file is coming
57:33 - from there
57:35 - perfect last thing now is the you can
57:37 - see up here that this is not secure we
57:39 - are coming from uh HTTP but we want
57:44 - https I think I can just say
57:47 - sech sear bot now- d project 1. cod with
57:53 - stein.com
57:56 - and then I need to pass in an email
57:59 - address code with Stein
58:04 - gmail.com yes I
58:09 - agree no I don't want emails already get
58:13 - them so now you can see that it's
58:16 - requesting to get the certificate see if
58:18 - this domain actually points to this
58:23 - server great so now
58:26 - successfully deploys there so now we
58:29 - have the
58:30 - certificate you can see here the
58:32 - location for this so then we just need
58:35 - to instruct engine X to use this
58:38 - certificate so we need to change the
58:41 - config file a little bit VI Etc and your
58:44 - next sites
58:47 - enabled sorry sites enabled SL project
58:51 - one um okay searp actually did this Auto
58:56 - atically so we can see here that it did
58:58 - some changes it now listens to Port 443
59:01 - instead of 80 and down here where it
59:04 - listens to Port 80 it will just redirect
59:08 - us directly to
59:10 - https we can try to restart engine X
59:15 - now refresh here now and then we can see
59:18 - that we get this here because we are now
59:20 - on
59:21 - HTTP
59:23 - great so now we can set this task here
59:26 - to done and we can set this to done
59:29 - because now we have the certificate for
59:33 - this so next St then is
59:36 - to configure the project sorry the post
59:39 - SQL for project
59:42 - 2 so we can go back here again just
59:45 - deactivate this environment
59:48 - deactivate then we can find the command
59:51 - by hitting contrl R here reverse I
59:55 - search search for
59:57 - postgress and just hit enter so now we
60:00 - have we are in there then we can create
60:03 - a new
60:04 - database create database project 2 we
60:08 - can create a new user project two
60:12 - password and project to user is the one
60:17 - that we want to pass in there and we
60:20 - need to alter the roles for
60:24 - this so just replace with two again
60:29 - there we need to alter the default
60:32 - transaction isolation as
60:37 - well two and we need to set the time
60:44 - zone
60:49 - there and we need to Grant the correct
60:53 - privileges was uh this one
60:58 - is to this database to this user
61:03 - to and then we can just quit there
61:07 - because now we have a new database empty
61:10 - for project 2
61:12 - done next is to create a virtual
61:16 - environment so let's go to web apps and
61:20 - we can make a new folder here MK there
61:23 - project 2 Go into that
61:27 - one sorry project two then we can create
61:32 - the environment by running this Python 3
61:36 - command van
61:38 - EnV great and then we can create the
61:41 - user so user ad if I just search for
61:44 - this one then we have the sudo user ad
61:46 - system group ID should still be web apps
61:50 - but the home folder for this user should
61:53 - be project two and the username should
61:56 - be project to
61:59 - user okay so now we have the user and
62:02 - the groups we don't have to think about
62:04 - because that was already created for us
62:07 - so we have the environment and we have
62:09 - this one
62:11 - great so now we need to do the same
62:13 - thing with the requirements file since I
62:16 - already have it here I can just make a
62:18 - copy of this and then I can add s find
62:23 - project to here create a new file
62:27 - requirements.txt this can vary a little
62:30 - bit from Jango project to Jango project
62:32 - but these project are identical so I can
62:35 - just make this copy instead of running
62:37 - the running the PIP free Command and
62:43 - similar um great so then I have there
62:47 - that one then I can create a new
62:50 - separate settings file so in Project two
62:54 - I create this file
62:57 - F project sorry settings prod.
63:02 - Pi copy everything and paste it and then
63:06 - I find the settings Pro from part one
63:10 - and I can copy this database
63:14 - configuration find a database
63:16 - configuration here paste it just need to
63:20 - rewrite this to
63:21 - two this should be
63:24 - two like that
63:26 - and since I know that here I need this
63:29 - allowed Host this can be project 2. code
63:33 - with stein.com and then I just need to
63:36 - import OS import
63:39 - OS and uh from. Envy import
63:44 - load. envy and then we just run it at
63:48 - the top Air so then it's just a matter
63:51 - of getting this as well so
63:54 - os. v. getet
63:58 - secretor key default is to be
64:02 - empty save so now we should have this
64:06 - ready and I can set this to
64:10 - done so uh then I can send the code to
64:14 - GitHub so we need to create a new
64:16 - project here so just find the plus
64:19 - button new
64:22 - repository project to no description
64:26 - public this can just be like it is
64:29 - create
64:30 - repository then we can create the read
64:33 - me file just that we have it not on the
64:36 - server sorry need to find this
64:40 - folder on the local here so CD project 2
64:46 - CD project 2 and then here I can create
64:51 - this
64:52 - one then I can initialize get
64:56 - and I say get add sorry do not add it
64:59 - yet I want to fix the EnV
65:02 - file not the EMV or the git ignore so I
65:05 - can copy this ignore file from Project
65:08 - one and then in
65:11 - here we say do get
65:15 - ignore paste and
65:19 - save so then I can say get add Dot and
65:24 - get status just to see that everything
65:26 - is being added
65:30 - perfect um then we say get
65:34 - commit and set up the branch this one
65:38 - and push so I can just copy all of these
65:40 - three lines hit enter and then
65:43 - everything should be running there now
65:46 - so if I refresh now here you can see
65:48 - that all of the data is sent here to
65:50 - project to
65:54 - perfect so I can set this to done now we
65:57 - need to get the code from
66:00 - GitHub copy this URL go to the
66:04 - server here in the project 2 folder get
66:08 - clone so we just clone this
66:12 - repository
66:14 - LS go into this one then we have it
66:17 - there nice that was quick so now we can
66:21 - set up the EnV file so we need we can
66:25 - just copy the other one so CP SL web
66:30 - apps project one project one so project
66:35 - 1. EnV dot so it will be pasted
66:39 - here that was one too many project
66:43 - one there so then we should have it here
66:48 - EnV so I can addit this
66:51 - EnV so this then needs to be project two
66:55 - pass
66:56 - word and we can also have a little bit
66:58 - different secret key here than on the
67:01 - other project save and quit and then we
67:04 - have the environmental
67:06 - file now we can initialize the
67:09 - database actually here are something
67:11 - wrong we have not installed software
67:14 - from the requirements file we need to do
67:18 - that
67:20 - first so we can activate environment
67:23 - bying Source slash in n
67:26 - v then
67:28 - activate pip D pip install dasr
67:32 - requirements.txt
67:34 - then this will actually use the cached
67:37 - version from the other project nice we
67:39 - didn't have to download anything and now
67:42 - the environment is ready and we can
67:44 - initialize the database just search for
67:47 - the uh the migrate command python
67:51 - manage. P
67:54 - migrate need to change this because this
67:57 - needs to be project 2. settings
68:01 - prod um module OS has no attribute
68:06 - EnV okay I guess I wrote it a little bit
68:12 - wrong os.
68:17 - Environ was it supposed to be and I
68:22 - miss there Environ and Environ is what
68:26 - we have down there so we just need to
68:29 - send the code to get again get add oops
68:32 - get add get commit changed config get
68:40 - push and then we can say get pull again
68:43 - to get the new
68:45 - data then we can try to initialize the
68:48 - database again yes there it worked
68:54 - perfect done and done so then we can do
68:59 - the same thing with the G unicorn script
69:01 - that we did previously so we can make a
69:04 - copy of that so CP SL web apps project
69:09 - one EnV bin G unicorn start and we can
69:14 - place this into the folder web apps
69:17 - project to EnV
69:21 - B there so now it's in that folder we
69:24 - just need to modify it a little bit VI
69:27 - EnV bin unicorn
69:31 - start because this needs the name
69:34 - project two of course set this to be two
69:40 - here set it to be to there and use the
69:43 - project two user and the project two
69:46 - settings
69:48 - prod project to
69:52 - wsgi that's everything we need to do
69:54 - there um so then we can try to run this/
69:58 - Envy bin unicorn
70:02 - start uh that did not work looks like I
70:06 - forgot to
70:08 - change one
70:11 - thing there it should be project two
70:14 - which is the URL for the Jango
70:17 - project execute again and now it is
70:21 - running um before we do anything more
70:24 - here now I just want to run the CH own
70:28 - command-r
70:30 - project to user
70:34 - colon web apps dot LS large just to make
70:40 - sure that it worked yes great so now G
70:46 - unicorn is done next step supervisor we
70:50 - can make a copy here as well so
70:53 - CP um CP Etc
70:57 - supervisor conf there we should have a
71:00 - file call Project
71:03 - one paste this in again and just oops
71:08 - say project
71:10 - 2.com so now we can edit this file
71:14 - here and say project
71:18 - two this command should run the project
71:21 - two and use the project two user
71:27 - like that
71:29 - and there project
71:33 - two and we can save and quit before we
71:36 - do anything more I want to create the
71:38 - logs folder we can run the CH own
71:42 - command again to change
71:44 - ownership and then we can try to tell
71:47 - supervisor to reread supervisor Cil
71:52 - rad and then update
71:56 - so if I now run supervisor GTL status
71:59 - you would see that we have two projects
72:01 - and both of them are running and how
72:04 - long they have been
72:05 - running
72:07 - great so done next up andin X so it's
72:13 - sort of the same here if we just go into
72:16 - CD Etc and Gen X
72:19 - sites uh
72:22 - available and we can make a copy of
72:24 - project two and call this project
72:28 - 2.c if you now addit
72:32 - this then we can uh remove everything
72:36 - that has to do with SSL so just delete
72:40 - this by double clicking
72:44 - D and all of this at the bottom here is
72:48 - not needed right now we want just to
72:50 - make sure that search but is setting
72:52 - this up for
72:54 - us so we just need to instruct this to
72:57 - listen to Port 80 now we need to do some
73:02 - renaming
73:06 - here and down here project
73:12 - two project two project
73:17 - two project
73:20 - two project two and last but not least
73:24 - this This Server here so now we can save
73:28 - and quit almost just save I saw it I
73:32 - forgot to rename this part
73:39 - here project two so now all of the
73:42 - references to project one should be gone
73:45 - I can save and quit this and say that
73:49 - engine X should restart service engine X
73:54 - restart no errors so that means that we
73:57 - can try to go to Project 2. code
74:01 - with stein.com
74:04 - got a 404 error um
74:11 - why okay sorry uh go up one folder and
74:14 - need to SES enabled and then we need to
74:17 - set up this symbolic link again so
74:21 - lnss do/ sites enabled so sites
74:26 - available project 2
74:31 - dot LS Lord you see there now then we
74:35 - can restart engine X
74:38 - again that looked better and took a
74:41 - little bit more time
74:43 - now so if I go back now refresh you can
74:46 - see here project two project one both of
74:49 - them are not connected but they are on
74:52 - the same server so you could also set
74:55 - cbot again cbot DD project 2. cod with
75:02 - stein.com hit
75:05 - enter and now this should go more or
75:08 - less
75:12 - automatically successfully now we just
75:15 - restarted so if I do a hard refresh you
75:18 - can see that I got the padlock there
75:20 - again
75:22 - nice so then I can set this to done I
75:26 - can set this to done and this to
75:30 - done and that was it hopefully now you
75:33 - understand a little bit more on how you
75:35 - can uh run your own server how to deploy
75:38 - multiple Chango projects to one server
75:40 - and similar if you have any questions
75:42 - feel free to leave a comment below and I
75:44 - will answer as soon as I can