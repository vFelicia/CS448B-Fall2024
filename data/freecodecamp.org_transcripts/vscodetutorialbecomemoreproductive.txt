00:00 - have you ever watched a tutorial that
00:01 - uses vs code and thought how do they do
00:03 - it so effortlessly the answer often lies
00:06 - in mastering the tools not just the code
00:09 - vs code is more than a text editor it's
00:12 - packed with features like intellisense
00:14 - built-in git and terminal but harnessing
00:17 - its full potential can feel daunting
00:20 - this course demystifies that process
00:22 - learn to enhance its Aesthetics navigate
00:25 - with lightning fast shortcuts integrate
00:28 - top extensions and employ over 100 tips
00:31 - and tricks Chris EV developed this
00:34 - course he's a developer Advocate at
00:36 - digitalocean and founder of scotch.io
00:39 - hey there this is Chris Sev with better
00:41 - Dev here and have you ever looked at
00:43 - somebody using vs code and said oh my
00:45 - gosh how in the world are they doing
00:47 - that and they're moving things around
00:48 - and everything's flying around really
00:50 - really fast
00:51 - those are 10x developers and every 10x
00:54 - developer knows how to use the vs code
00:57 - to the absolute maximum capability
01:00 - and that's what I love about vs code is
01:02 - that there are so many ways to make it
01:04 - your tool to be a 10x developer there's
01:07 - settings there's fonts there's themes
01:09 - there's workflows extensions and all of
01:11 - the built-in amazing features like the
01:13 - terminal so I've been through it all
01:15 - I've been through Sublime Text Vim all
01:17 - those editors webstorm and I've landed
01:19 - on vs code as being the awesomest
01:22 - coolest most productive editor and
01:25 - that's what this course is about is how
01:27 - to make vs code AS productive as
01:29 - possible how to make ourselves as
01:31 - productive as possible using vs code and
01:34 - creating our own workflows and that's
01:36 - what this course will do it'll teach you
01:38 - how to make vs code work for you
01:40 - specifically so let's get into it we're
01:43 - going to learn a lot about all the
01:44 - built-in features all the things that we
01:46 - can add to vs code and we're going to
01:47 - make ourselves a little bit more
01:48 - productive
01:50 - so this course is called productive vs
01:53 - code so I thought you know what let's
01:54 - show off a productive workflow before we
01:57 - get into the larger part of the course
01:59 - this is kind of just a preview to see
02:02 - the kind of tool set and super powers
02:04 - and skills you'll get by the end of this
02:06 - course
02:07 - so here I have vs code let's say we
02:09 - wanted to clone a repo down from GitHub
02:11 - we can do command shift p open up our
02:14 - Command palette and say clone
02:17 - and we can clone
02:19 - clone from GitHub and I'm going to get
02:21 - the productive vs code
02:24 - site which is the website for the
02:27 - productive vs code course
02:31 - and I'll save this to my Batcave folder
02:34 - this is where I put all of my working
02:36 - stuff select repo
02:39 - once it clones I can open it in this vs
02:42 - code instance and here we have our next
02:44 - JS project which is the code for this
02:46 - website
02:47 - and if I close the sidebar open up
02:50 - package Json you can see down here
02:54 - that there are dependencies
02:56 - so we need to install them I'm going to
02:58 - install them a quicker way I'm going to
03:00 - do command shift p install right here
03:04 - and throughout this course you'll see
03:05 - how much I use the command palette and
03:07 - try to keep everything going from the
03:09 - command palette so it's all keyboard
03:11 - shortcuts okay so that installed now we
03:14 - can
03:16 - npm run script and we're going to run
03:19 - the dev script because next.js uses the
03:21 - dev script to start up so I'll run that
03:24 - and you'll see localhost 3000 is where
03:26 - our app starts
03:28 - cool so we've been able to install we've
03:30 - been able to clone we've been able to
03:32 - run a script let's go and actually do
03:34 - some changes here site hero let's say we
03:37 - wanted to bring in use state
03:39 - we'll use a snippet there message is
03:42 - there and we'll go here so that's cool
03:46 - we have that let's have site header
03:48 - let's make some more changes and we'll
03:49 - say console.log hi everybody
03:54 - okay that's cool but now let's say we
03:57 - wanted to commit this code up to GitHub
03:59 - we've made some changes across two files
04:02 - let's go see how to do this
04:04 - we can open up our git panel right here
04:05 - and you can see that the package.lock
04:08 - has changed the site header and the site
04:10 - Hero has changed I can click here and
04:12 - say okay what happened here let's see I
04:15 - added this console log okay that's fine
04:17 - what happened to site hero right here I
04:20 - added this use State okay cool
04:23 - so let's say I don't want this use State
04:25 - I can just say undo here
04:27 - discard that change I can add these two
04:29 - files right here and say super cool
04:32 - stuff
04:34 - because that's how all our commit
04:36 - messages go right
04:37 - and I can commit that and now I can push
04:42 - that to GitHub all from my command
04:44 - palette git push right here and we'll
04:46 - push that up to GitHub
04:50 - now what did we change the site header I
04:52 - think cool so I can also say you know
04:55 - what let's go see this in Chrome in
04:58 - GitHub so I can right click right here
04:59 - go to online Link and we can go see our
05:02 - changes right from within GitHub
05:05 - and it gets right to that line in the
05:07 - productive vs code site repo
05:11 - so all of that was done from vs code we
05:13 - really didn't leave it right we were
05:14 - able to clone install run make changes
05:17 - commit all that good stuff use Snippets
05:20 - all within vs code
05:23 - so that's kind of the workflows I'm
05:25 - talking about in this course I really
05:27 - want everything to be as streamlined as
05:29 - possible and I've spent a lot of time
05:31 - figuring out the best ways to use vs
05:33 - code to be an efficient tool
05:39 - I hope that was helpful let's get into
05:40 - the course
05:43 - let's get to it so to get us started we
05:46 - are going to go to code.visualstudio.com
05:49 - just to download vs code and get it
05:52 - installed so that we can start running
05:54 - it
05:54 - it is available on Mac it's available on
05:57 - Windows Linux I'm going to be working on
06:00 - Mac so whenever you hear me say command
06:02 - you're probably going to want control on
06:04 - Windows if I say option you'll probably
06:07 - want alt so once we have vs code
06:10 - installed and we have it here this is
06:12 - the screen that you'll see when you
06:14 - start it up it'll look just like this
06:17 - and what we'll have here is the welcome
06:19 - screen so you can actually turn this off
06:20 - down here show welcome page on Startup
06:23 - and we'll have it set on for now
06:25 - and here the getting started section is
06:28 - actually really good to go through
06:29 - customize your setup they have you go
06:32 - through themes coding in any language
06:35 - switching from other editors opening a
06:38 - project folder very very cool guide and
06:41 - getting started
06:43 - is a really fun thing to go through when
06:45 - you're starting with vs code in this
06:47 - course we're going to go through
06:48 - everything that these three cover so you
06:50 - don't have to but it's really fun to go
06:53 - through and one that I recommend you go
06:55 - to is boost your productivity
06:58 - over here under redefine your editing
07:01 - skills open interactive playground and
07:04 - that will open the interactive
07:05 - playground to the side you can close out
07:07 - getting started here and just scroll
07:09 - through this and kind of get a lay of
07:11 - the land because it's cool you can
07:13 - actually type into these sections right
07:15 - here and see what's going on
07:18 - it's a really fun interactive on
07:20 - boarding again not totally necessary if
07:23 - you are feeling like you have the four
07:25 - or five minutes to go through this go
07:27 - ahead if not let's push through and
07:29 - we'll learn about all of this stuff in
07:31 - this course
07:32 - first up let's talk about the UI of vs
07:36 - code so I just want to get us both on
07:38 - the same vocabulary so when I start
07:40 - calling things out and moving things
07:42 - around we both know what we're talking
07:43 - about
07:44 - so to start us off this is the vs code
07:47 - interface
07:48 - down at the bottom here we have the
07:50 - status bar this purple thing
07:53 - right in the middle we have the editor
07:56 - and we'll get more to that in a second
07:59 - over on the left we have the activity
08:01 - bar and this is where a lot of your
08:03 - clicking is going to happen
08:05 - so the activity bar has a bunch of
08:07 - different things in it so let's go
08:09 - through them one is the Explorer and as
08:12 - soon as you click that icon this opens
08:14 - up your sidebar
08:15 - and the sidebar is now filled with the
08:17 - Explorer here
08:19 - I can click the find right here or
08:22 - search and that'll open up search into
08:25 - the sidebar
08:27 - I can click this get icon and we can
08:29 - open up git into the side Part Source
08:32 - control right here
08:34 - the debug is right here with a little
08:36 - bug cute little icon and we have it
08:39 - right in our sidebar and we have
08:41 - extensions in our sidebar as well and we
08:43 - can search through those and if you
08:45 - expand the sidebar out a little longer
08:46 - you can get these nice icons
08:49 - so overall this is going to be your
08:51 - activity bar and your sidebar there
08:53 - you'll do a lot of the work you have in
08:55 - and we'll go through each of these in
08:57 - depth throughout this course if we open
09:00 - a folder right here let's talk about the
09:03 - main part where you'll be typing the
09:04 - most let's open up this productive vs
09:07 - code site and I'll open up the whole
09:09 - folder
09:14 - now if I go ahead and click on
09:16 - package.json right here
09:20 - you can see that this is our editor
09:23 - so this is where you're going to be
09:24 - doing all of your typing you have your
09:26 - sidebar over here that can hide and show
09:28 - whenever you need it just keep on
09:30 - clicking those icons
09:31 - here you have all of your text
09:34 - here is the tabs so we have one open
09:36 - let's say I wanted to keep that open and
09:39 - I'll open up the readme right here
09:42 - that is the tabs right here
09:45 - right here we have what are called
09:46 - breadcrumbs so you can actually let's go
09:49 - into an actual file let's go into this
09:51 - index.js
09:54 - right here the breadcrumbs actually show
09:56 - you what's going on in the file so
09:58 - you're in the pages folder right here
09:59 - you're in index.js the file and here you
10:03 - can actually see all of the different
10:04 - things that you're in so you're in the
10:06 - home function there's not really many
10:08 - functions in here but once there are you
10:11 - can actually click this and see all the
10:13 - different things in a file so
10:15 - breadcrumbs is really useful
10:18 - and let me shrink this over here and
10:20 - over on the right here we have the mini
10:21 - map which you can click and drag just to
10:23 - see how long your code is and if there
10:25 - are any errors you can see like a little
10:27 - red line in there really helpful and I
10:30 - personally really like to have it
10:35 - so overall we have the status bar we
10:38 - have the activity bar we have the
10:40 - sidebar
10:41 - we have tabs and our editor
10:44 - and the last thing here and let me close
10:46 - these out is the panels and they don't
10:49 - really show right now I'm going to open
10:50 - up the terminal with Ctrl tilde
10:54 - and the panels are what show on the
10:56 - bottom right here so we have the
10:57 - terminal
10:58 - we have problems tab
11:00 - output tab ug console but I imagine
11:03 - you'll spend most of your time in vs
11:05 - code in the terminal and in the debug
11:07 - console for this area down here and
11:10 - we'll talk about those more in this
11:11 - course
11:12 - so there's a lot of really fun little
11:15 - hidden things around vs code and the
11:17 - biggest one we haven't even talked about
11:19 - yet which is going to be the star of
11:21 - next video is the command palette so
11:24 - overall I hope that was a good
11:25 - introduction to vs code's UI there's a
11:27 - lot going on but don't worry we'll be
11:29 - going through all of it and making sure
11:31 - we understand and know how to use every
11:33 - bit of it
11:36 - in this video I want to talk about the
11:38 - number one essential tool to using vs
11:41 - code and that would be the command
11:44 - palette
11:45 - now this is so essential that this is
11:47 - going to be encompassing the entire
11:49 - course you really need it for the entire
11:52 - course to follow along with everything
11:53 - that we're going to do
11:54 - and it is also essential to productivity
11:57 - and this being productive vs code the
11:59 - command palette is front and center
12:02 - so you might be asking okay well what is
12:04 - the command palette Chris where is it so
12:06 - it doesn't show up at first but to show
12:08 - the command palette it actually shows
12:10 - you right here show all commands shift
12:13 - command p and if you're on Windows
12:15 - that'll be Ctrl shift p or command shift
12:18 - p which I'll say a lot in this course
12:22 - so command shift p and I'll just do it a
12:25 - couple times just to get in the habit
12:26 - command shift p Escape command shift p
12:30 - that will open up the command palette
12:32 - and the command palette is pretty much
12:34 - your command center for vs code it's
12:36 - going to show up right at the top here
12:39 - and anything that you can do in vs code
12:41 - is going to show up here so like let's
12:43 - say I wanted to open up Explorer
12:47 - focus on folders view that would open up
12:49 - the sidebar here I could even hide the
12:52 - status bar
12:55 - toggle status bar visibility I could
12:57 - hide the activity bar
12:58 - and that's why it's so important that we
13:00 - know what all the things are called
13:01 - because I'm going to go through and hide
13:03 - and show a lot of things based on how
13:05 - we're working for that video
13:08 - so the cool thing about the command
13:09 - palette is that anything that you can
13:11 - find in the commands up here like let's
13:12 - say file open recent open folder edit
13:16 - find in files replace in files and you
13:20 - can see the keyboard shortcuts right
13:22 - there
13:23 - you can do from the command palette so
13:25 - all the all these things here here here
13:27 - here here all of it can be done in the
13:29 - command palette and that makes a super
13:30 - efficient because we don't leave the
13:32 - keyboard
13:33 - so I could even open up the terminal and
13:36 - that'll be toggle terminal
13:38 - anytime you want to hide or show
13:40 - something it's usually under the toggle
13:42 - command
13:43 - and let's see we did git clone already
13:46 - in one of these videos we did get push
13:49 - and if you wanted to check you could
13:50 - just type in git and then move your
13:52 - mouse up here and scroll through all of
13:54 - the commands that you can do thanks to
13:56 - the command palette we could even open
13:59 - up a new file
14:00 - file new file right here
14:04 - and we'll name it hello.js and then here
14:08 - I can say command shift p snippet and I
14:11 - can insert a snippet we can go down here
14:14 - we'll save this for each Loop right here
14:17 - and now we can say my array is called
14:20 - items item
14:23 - and console.log item
14:26 - so that's really cool that we can use
14:27 - the command palette to do Snippets we
14:30 - can move things around we can say toggle
14:32 - breadcrumbs right there and that hides
14:34 - the breadcrumbs you could even toggle
14:36 - the tabs
14:40 - toggle tab visibility there
14:43 - and now it only shows the single file
14:45 - that's open
14:46 - you won't see anything else but one file
14:49 - you can do the minimap pretty much
14:51 - everything here and there's going to be
14:53 - a lot more work to be done thanks to the
14:55 - command palette so in this course you'll
14:57 - see me say command shift p or open your
14:59 - command palette and that's a prompt to
15:01 - open up your command palette and type in
15:04 - something there so we'll open up
15:05 - activity bar back we'll bring the status
15:07 - bar back we'll bring the breadcrumbs
15:09 - back
15:10 - and finally we'll bring back the tabs
15:13 - toggle tab visibility there we go so
15:15 - we're back to normal
15:19 - keyboard shortcuts are going to be a big
15:21 - part of this course and the command
15:22 - palette is a big part of that so stay
15:25 - tuned you're going to hear that a lot
15:26 - let's get used to it because it's going
15:28 - to help you on your coding Journey a ton
15:32 - the first thing that we're going to do
15:33 - to make vs code look good is to install
15:36 - themes
15:37 - now themes are really cool that's the
15:40 - first thing I reach for to understanding
15:42 - how an editor works
15:44 - and themes is a great segue into seeing
15:47 - how vs code does extensions
15:50 - so if I go to docs here and I go down to
15:52 - user guide
15:54 - the extension Marketplace
15:56 - extensions are a way that you can extend
15:59 - vs code's functionality through a
16:02 - Marketplace of extensions and we are
16:04 - going to do a lot with extensions we're
16:05 - going to be adding on a theme in this
16:08 - video we'll also be adding on icon
16:10 - themes in this video
16:11 - and there's going to be so many
16:13 - extensions that we're going to install
16:15 - to vs code
16:16 - what we can do here is in the extensions
16:19 - link right here this is the extensions
16:21 - Marketplace
16:23 - and you can actually type in theme
16:26 - and see all of the themes that are
16:28 - popular you can sort by relevance you
16:30 - can sort by downloads all that good
16:32 - stuff here
16:33 - so you might be wondering okay how do I
16:36 - install one of these themes let's click
16:39 - on the winters coming Theme by John Papa
16:43 - we can scroll down we can see a preview
16:44 - of it that looks cool just blue color
16:48 - we can go up here and click install
16:51 - and we'll give this prompt and says hey
16:53 - do you want to open vs code from this
16:55 - website we can say yep open vs code
16:59 - and now you'll see the extension here
17:00 - where you can actually click install
17:03 - but I want to show you a different way I
17:05 - don't usually go to the website go to
17:07 - the extension Marketplace from inside of
17:09 - there I don't do that because we can do
17:11 - all of that from the convenience of vs
17:13 - code itself
17:15 - down here on the side we have the
17:17 - extensions
17:18 - sidebar right here
17:21 - so once I've clicked extensions we get a
17:23 - list of all the popular extensions 26
17:26 - 934 ton
17:28 - of extensions really strong and robust
17:31 - Marketplace and community
17:33 - so these are the popular ones I can type
17:35 - in theme Here
17:38 - and you can see the download 7.7 million
17:40 - for the material icon theme atom1 dark
17:43 - theme
17:44 - and we can click these and the website
17:46 - actually pops up right in here we can
17:47 - see previews of them here here's winter
17:49 - is coming that we just saw
17:51 - so let's go ahead and install one of
17:53 - these we'll click install for winter is
17:55 - coming
17:56 - and then we'll enable it
18:00 - so that actually enabled it changes our
18:02 - entire theme for vs code and it shows
18:05 - right there in the command palette
18:07 - so let's say we installed another one
18:09 - GitHub theme right here one million
18:12 - downloads let's install right there
18:15 - cool there's a couple different ones
18:17 - that we can choose from and if you
18:19 - actually click down here you can see a
18:21 - preview
18:22 - of all these that dimmed one is really
18:24 - nice light if you're feeling like a
18:26 - light theme I personally have tried and
18:28 - haven't been successful at switching
18:30 - over
18:31 - but what I want to talk about is these
18:34 - are all the themes right
18:36 - so the goal of this video is here's how
18:39 - you install themes and let's talk about
18:41 - how we can enable them and then we can
18:43 - talk about finding really fun themes in
18:46 - the future so let's go to our Explorer
18:48 - and let's open up if you don't already
18:50 - have a folder open or you haven't cloned
18:53 - anything down from GitHub go ahead and
18:54 - do that and then you can go up here to
18:56 - file
18:57 - open
18:58 - or you can go into the command palette
19:00 - command shift p open and I think it'll
19:03 - be down here under file open and you can
19:06 - see that command o right there so you
19:08 - can do command o so there's a lot of
19:10 - different ways we could open up a folder
19:11 - so go ahead grab a folder get it open
19:14 - here's index.js and here's what it looks
19:16 - like with this theme
19:18 - what we'll do is see how we can change
19:20 - themes next and to do that handy dandy
19:23 - command palette so I'll say command
19:25 - shift p
19:26 - and say theme
19:27 - and you can change the preferences color
19:29 - theme here so I'll click this and now
19:31 - you get a whole list of all the built-in
19:33 - ones and the ones we just installed
19:35 - through our two extensions
19:37 - and what's cool is we can actually
19:38 - preview them just by pressing down
19:41 - or up
19:42 - and just click through all of these
19:43 - there's tomorrow night blue super blue
19:46 - solarize dark there's just red
19:49 - monokai which I'm always a big fan of
19:53 - and here are the GitHub themes we just
19:55 - installed so feel free to look through
19:58 - the extensions in the marketplace here
20:00 - feel free to install them and then when
20:02 - you want to install and change one and
20:04 - enable one command shift p color theme
20:07 - and press enter and then you can just
20:09 - click through these and let's say you
20:11 - wanted red and I'll press enter right
20:13 - there let's actually stick to one that
20:15 - I'll probably use on a day-to-day basis
20:17 - currently I am using monokai Pro and
20:20 - that's at https monica.pro but that is a
20:24 - paid theme so I don't really want to
20:25 - recommend it here just check it out
20:26 - you're for yourself but a good one is
20:28 - these GitHub dark ones the dimmed one I
20:31 - like a lot so I'll keep that
20:34 - next up what I want to do is icon themes
20:37 - so we can change the overall theme for
20:39 - this whole thing but we can also go into
20:40 - extensions and type in icon theme
20:45 - and here are all the icon themes I can
20:47 - click here and this actually is going to
20:49 - change out what we see in our Explorer
20:51 - for the icons and if I go here that'll
20:54 - replace these arrows they're kind of
20:55 - boring but there are some js icons here
20:58 - the little brackets here so I'll go back
21:01 - into extensions
21:02 - install
21:05 - so we can click here enable
21:07 - material icon theme
21:10 - right there
21:11 - and now if I go back to explore you see
21:13 - the folders actually have icons now
21:15 - instead of those arrows
21:18 - and to do this you can also do this from
21:20 - command palette command shift p icon
21:22 - theme
21:23 - enter and then you can click through and
21:25 - see the preview over there as well and
21:27 - we'll stick with material icon theme
21:29 - that's actually what I use on a day to
21:30 - day
21:33 - all right so there's a lot in this video
21:34 - but it sets the foundation for
21:36 - everything we're gonna do we are able to
21:38 - install extensions through the
21:40 - extensions panel and we'll do a lot of
21:42 - this we are able to change our theme
21:44 - which is step one on having a good
21:47 - looking vs code and we were able to
21:49 - change out the icon theme so already we
21:52 - look better than the default vs code
21:54 - setup
21:55 - so moving forward I didn't want this to
21:57 - be about like hey here's the top 10
21:59 - themes that I recommend this is more
22:00 - about hey this is how you install themes
22:02 - which are extensions this is how you
22:05 - install icon themes and this is how you
22:07 - switch them out
22:08 - but from here the world is open to you
22:11 - you can go over to Google and say best
22:13 - vs code themes 2021
22:17 - and all of these links are going to show
22:19 - you some fantastic themes you can
22:22 - install them you can try them out and
22:24 - you can find one that fits perfectly for
22:26 - what you like hey everybody this is
22:29 - Chris Sev here today in this video I
22:31 - have 20 vs code themes for you 10 which
22:34 - are more of the popular themes you've
22:36 - probably seen around and there are 10
22:38 - lesser known themes which maybe you
22:40 - haven't seen so let's get straight to it
22:42 - we are in vs code we have the default
22:45 - theme enabled right now really decent
22:48 - theme it's got
22:49 - dark
22:51 - it's okay so let's start moving through
22:53 - the best themes and we'll sort them by
22:56 - number of installs or I guess you could
22:58 - call that popularity the first one that
23:00 - we're gonna have is if we go into our
23:02 - Command palette with command shift p we
23:04 - search for color theme we can search for
23:07 - one dark Pro
23:09 - and I believe this is probably the most
23:11 - popular vs code theme most installed and
23:14 - for good reason it the good looks it has
23:17 - great colors everything kind of Pops a
23:19 - little bit better if I scroll down you
23:21 - can go to one dark flat where it's a
23:23 - little bit less
23:25 - prominent colors and there's darker
23:27 - which gives it a bit of a darker
23:29 - background it's a great theme but again
23:32 - one of the most installed so if you want
23:34 - something else maybe something a little
23:35 - bit more unique
23:36 - let's keep moving number two is Dracula
23:40 - so I'll go to color theme Dracula
23:43 - it has a purple tint to it very nice
23:45 - theme very popular
23:47 - um really unique in it actually exudes
23:50 - Dracula and nighttime
23:52 - the number three theme is let's go to
23:55 - color theme atom one dark
23:58 - very similar to one dark Pro I think
24:01 - does great with the symbols and colors
24:04 - of the symbols
24:05 - scroll down does great with just markup
24:08 - in general so very good theme again it
24:12 - does look like one dark Pro and probably
24:14 - a pretty common theme
24:17 - so let's go to the next one we are going
24:19 - to look at GitHub theme
24:22 - these are GitHub inspired there's GitHub
24:24 - dark but if GitHub pretty well you
24:27 - probably are expecting the light version
24:29 - and this look at that so bright it is
24:32 - probably the light theme that I would
24:34 - jump for if I wanted to go for a light
24:35 - theme
24:37 - very nice there's dark dimmed as well
24:39 - and light default so definitely check
24:43 - those out
24:44 - good themes
24:46 - the next one is by John Papa it is
24:49 - winter is coming
24:52 - this is a cool one because it gives a
24:54 - blue tint and it's just fun overall if
24:56 - we go to dark blue you can see that
24:58 - there's a blue tint in the background
25:00 - blue all over here my problem with this
25:02 - is that some of the symbols aren't as
25:04 - legible as the other themes we've seen
25:07 - so far they don't pop like this export
25:09 - default function next video it's all the
25:12 - same color
25:16 - so great theme if you want that blue hue
25:18 - to it
25:19 - next up is by Sarah drosner the theme is
25:23 - called night owl
25:25 - again very night inspired theme as its
25:29 - name suggests it's
25:31 - I think it inspired the
25:33 - John Papa theme winter is coming that
25:35 - came before it with that blue background
25:36 - so there's not now light
25:39 - a very good theme
25:41 - really cool especially for night time
25:43 - next up monokai Pro
25:48 - this is one that I have been using for a
25:50 - while let's install it I didn't have
25:52 - that installed we'll enable it
25:54 - monokai Pro
25:56 - and the cool thing about monokai Pro is
25:58 - that if I go to color theme monokai Pro
26:01 - there are different filters as they all
26:04 - had but there's a blue one octagon is
26:07 - purple-ish spectrum is darker and
26:10 - ristretto is a little bit of a brown
26:12 - tint hard to tell but monokai Pro is a
26:15 - paid font so just keep that in mind if
26:18 - you are interested in it it is one of my
26:20 - favorite fonts
26:22 - next up is by Ahmad awais shades of
26:25 - purple you've probably seen this around
26:26 - very iconic very purple uh really fun
26:31 - theme a little bit much on the purple
26:33 - for me and again not too many
26:35 - differentiators for most of the symbols
26:37 - since they all are using this light blue
26:39 - or the orange
26:41 - so we'll move on from there we'll go to
26:43 - West boss's theme Cobalt 2.
26:47 - Cobalt 2 is very yellow blue themey I
26:51 - like it again not the biggest difference
26:53 - here is of the symbols so for me not my
26:57 - go-to but fantastic theme definitely
27:00 - check it out
27:01 - and then 10th of the most popular vs
27:05 - code themes is going to be material
27:07 - theme
27:09 - and I think I did that wrong color theme
27:11 - let's go for material theme and there
27:14 - are all sorts of different color styles
27:16 - there's ocean darker lighter
27:19 - pale night
27:20 - so definitely check all those out I
27:22 - think a lot of those are pretty similar
27:24 - in my book aside from the background the
27:26 - symbols which all the words they blend
27:29 - in together so not my favorite there
27:32 - alright so that is the 10 most popular
27:35 - ones that you've probably seen around
27:37 - the web but the next 10 maybe you
27:40 - haven't seen and I'm actually my daily
27:42 - driver is in this list of 10 for 10
27:45 - lesser known vs code themes
27:48 - so in this batch number one or number 11
27:51 - overall is going to be pale night
27:55 - very similar to the night themes in the
27:57 - first 10
27:59 - you get that purple you get that blue
28:01 - cool here's synthwave which is number
28:03 - 12. I really like this one it's a little
28:07 - bit too much of a pop on the blues for
28:10 - me
28:11 - the contrast is a little strong but
28:15 - really fun with the colors the orange
28:16 - the purple the red and the light blue
28:22 - number 13 on this list is Nord
28:25 - Nord
28:28 - very nice muted theme if you want a
28:31 - muted theme that's just
28:33 - gets out of the way and gets you to
28:35 - coding but for me again not too much
28:37 - differentiation on these symbols so
28:40 - let's keep moving
28:41 - number 13 number 14 is color theme panda
28:48 - so this one with that pink theme Panda
28:51 - really cool colors here I dig it a
28:54 - little bit strong on these symbols right
28:56 - here with that light teal-ish but
28:59 - overall I like the pop of color a little
29:02 - bit more than the previous Nord so very
29:05 - nice
29:06 - next up number 15 is Tokyo night
29:11 - again another night theme there's
29:14 - actually a lot of night themes on this
29:15 - list
29:17 - so cool night theme again purple and
29:20 - blue dark inspired
29:24 - number 16 here is rain glow
29:28 - a lot of different colors in Rain glow
29:30 - let's see
29:31 - a lot of different colors in Rain glow
29:34 - so definitely click through the cool
29:35 - thing about vs code is you get this live
29:37 - check
29:39 - theme
29:40 - preview
29:42 - overall pretty good colors I think a lot
29:46 - of them don't really have the contrast
29:48 - of the symbols again so let's keep
29:51 - moving
29:53 - all right this next one is my daily
29:55 - driver so far and I really like it I've
29:58 - been using it for about two weeks now
30:00 - color theme is moonlight
30:02 - and if you look at Moonlight 2 it's
30:05 - muted it has that nighttime theme but I
30:07 - do get a little bit of differentiation
30:08 - on the symbols so you can see there's a
30:11 - purple here instead of having all that
30:12 - be the same color you get the orange the
30:14 - green there's just enough
30:16 - differentiation for me that I think it's
30:19 - really easy to read the different values
30:23 - so Moonlight too very nice the next one
30:25 - is number 17 Horizon
30:30 - so here's Horizon you get a different
30:33 - color scheme than we've seen before
30:35 - Less on the blue side more on this red
30:37 - kind of maroon color
30:39 - really nice with the purples good theme
30:42 - next up is bearded theme
30:45 - there's a few of these bearded void
30:48 - Earth love the naming here altica
30:50 - Oceanic
30:52 - solarize so really good colors there
30:55 - I like how they're a little bit more
30:57 - muted except for this Vivid one
30:59 - Arc eggplant that one's really nice
31:01 - actually
31:03 - AOL storm also really nice black and
31:05 - gold
31:06 - yeah Storm's not bad
31:09 - I like that one maybe I'll move that one
31:12 - and then the last one we have on the
31:14 - list is a fun one it is going to be
31:16 - called cyberpunk
31:19 - and you definitely get that cyberpunk
31:21 - feel you got that neon green you got
31:23 - those purples and a little bit of that
31:26 - pink in there and if you go to the
31:28 - extension page they do a great job of
31:30 - showing it off
31:31 - especially with the borders you get on
31:33 - that command palette with that green
31:34 - let's try it out command palette oh we
31:37 - don't get those oh that's intellisense
31:39 - let's go see
31:40 - there we go really nice
31:43 - colors and borders there super fun
31:46 - so there you have it there's 10 of the
31:49 - most popular that you've seen before
31:50 - probably and 10 of the Lesser known
31:52 - themes and all together 20 fantastic vs
31:55 - code themes I think I may switch to that
31:58 - bearded theme eolstorm
32:01 - Maybe
32:02 - see you in the next one
32:04 - while themes was the first extension
32:06 - that we installed
32:08 - fonts is the first setting that we're
32:11 - gonna change so there's two big ways to
32:13 - adjust vs code the first would be
32:16 - extensions here in the extension sidebar
32:18 - the next will be settings
32:20 - so we're going to go into our fonts
32:22 - settings and change out the font so
32:25 - let's go here to our Explorer let's open
32:27 - up a file so that we can get a nice file
32:29 - to preview our font changes
32:32 - so fonts is something I'm pretty
32:34 - opinionated about I've gone through many
32:37 - fonts and try to pick the best to my
32:39 - liking so I have a couple of
32:41 - recommendations and then I can show you
32:43 - a list that I'm going to drop in the
32:45 - description below where you can actually
32:46 - click through pick the one that's best
32:48 - for you and install it and I'll show you
32:50 - how to do all of that in this video
32:53 - so the two that I always like to
32:55 - recommend if I go into Chrome here is
32:57 - Cascadia code which is a free font by
33:00 - Microsoft I'm personally a big fan of
33:02 - kind of the shorter stouter sort of
33:05 - coding fonts and these are all going to
33:07 - be mono spaced fonts which means each
33:09 - character takes up the same width as the
33:12 - other characters and monospace fonts are
33:14 - traditionally the best fonts for coding
33:17 - so Cascadia code is one of my favorites
33:20 - it's currently my daily driver
33:23 - code is also another great free font if
33:26 - you go down here they have a really cool
33:29 - preview here and what they also show you
33:32 - is what are called ligatures and some
33:34 - people love these some people hate these
33:36 - I personally really like them in my code
33:39 - and I'll show you how to turn these on
33:41 - in this video but ligatures is
33:43 - essentially when you say like not equals
33:45 - it creates a brand new icon based on
33:47 - what you just typed and I'll show you
33:49 - how that works
33:51 - if you want the links are down below you
33:54 - can download these from these GitHub
33:56 - repos you can install them on your
33:58 - computer and then you can go over to vs
34:01 - code
34:02 - and you might think okay so if we want
34:04 - to change our font settings we would
34:06 - probably just go into the command
34:07 - palette just like Chris has said this
34:09 - whole time
34:11 - I'm sorry to say this is one of the few
34:14 - times that you're not going to go into
34:15 - extensions you're actually going to go
34:17 - into settings so I'm going to do command
34:19 - shift p type in settings and you can
34:22 - open up the settings in a Json format or
34:25 - the UI format and we'll do the UI format
34:27 - and we can talk about how the Json Works
34:29 - in a second
34:32 - so here are our settings and this is the
34:34 - UI version of it so what that means is
34:36 - there's a really nice like little tab
34:38 - sections over here where you can click
34:40 - through and figure out which setting to
34:42 - change
34:43 - but also we can go up here to search
34:44 - settings and we'll type in font
34:47 - and family
34:49 - so if I scroll up here font family
34:51 - editor font family this is what's going
34:53 - to change our font
34:55 - so I can go in here and say Cascadia
34:59 - code and the reason I put a quote around
35:01 - it is because there's a space here so if
35:03 - there's a space I like to just put the
35:05 - quote around it just like vs code did
35:07 - right here for Courier new
35:09 - so as soon as you type that in you don't
35:11 - even have to do anything like save or
35:12 - click a button it just automatically
35:14 - takes place you go back to index.js and
35:17 - see the change here
35:19 - so automatically you see the difference
35:21 - here we can actually take this and drag
35:23 - it out to the side and if you drag this
35:26 - to the side you can see the Dual column
35:27 - right here so I'll put that over there
35:29 - and if I remove Cascadia code right
35:32 - there I'll just cut that out
35:34 - it immediately changes you can see the
35:36 - change on the left and I know this isn't
35:38 - as clean as the previewing themes was
35:41 - but this is what we have in vs code for
35:43 - changing fonts and settings so I'll
35:45 - paste in Cascadia code again
35:48 - and what I can do here is actually type
35:50 - in fire code
35:52 - I have that installed as well fire code
35:55 - and see that change happen over there so
35:57 - fire code and Cascadia code are pretty
35:59 - similar Cascadia code I think is a
36:01 - little bit chunkier
36:04 - and then if we talk about my favorite
36:06 - paid font that would be operator mono
36:09 - and that is a paid font so I don't like
36:11 - recommending it too much in these
36:13 - courses
36:15 - there is operator mono
36:17 - so a little different definitely play
36:19 - around with these you could even if you
36:21 - wanted to here's Comic Sans
36:24 - not the best for sure for coding but you
36:27 - can do it
36:28 - so definitely go through your list of
36:31 - fonts and settings and see what you like
36:33 - the best and here is a website that I
36:36 - like to show off if you are looking for
36:38 - the perfect coding font for yourself and
36:41 - who isn't right this is a great website
36:44 - by CSS tricks called coding fonts and
36:47 - you can find it I'll put a link down
36:49 - below coding Dash
36:51 - fonts.css-tricks.com and you can click
36:54 - through all of these great fonts
36:55 - Cascadia code my favorite here's cost
36:58 - ligatures italics variable and all of
37:01 - these you can click through see which
37:03 - one you like
37:06 - and once you find one you like there's a
37:07 - link here to download it find out how to
37:10 - get it this one is paid let's see a
37:13 - couple other favorites jetbrains mono I
37:15 - see a lot of people liking lately
37:17 - Mono Lisa is good where is that goofy
37:21 - one comic code I think you like this one
37:25 - comic code is Comic Sans in monospaced
37:29 - format so it is technically good for
37:31 - coding since it's monospaced if you like
37:34 - that comic new great resource to click
37:37 - around and find out which coding font
37:39 - you like the best and then go get it
37:41 - install it then you come back to vs code
37:43 - and you can change your setting out here
37:45 - under editor font family
37:48 - I'll just put Cascadia code here
37:51 - so I switch between Cascadia code and
37:53 - operator mono a lot depending on the day
37:57 - so those are fonts and that's how you
37:58 - change them in the settings and just to
38:01 - reiterate how you get to settings
38:02 - command shift p settings and we'll click
38:05 - the UI one
38:07 - and then you search for font family and
38:08 - I'll put these instructions down in the
38:10 - description below
38:12 - so there we go there's Cascadia code
38:14 - right there but there's some other font
38:16 - settings that I want to change and I'm
38:18 - going to split this out to the right
38:19 - again cool thing about vs code is you
38:21 - can do panels side by side like this
38:24 - so a couple things I want to talk about
38:26 - for settings while we're already here in
38:28 - fonts this is the next step to making
38:30 - our vs code look really good is font
38:33 - size line height and font ligatures so
38:37 - these three things put together will
38:38 - make this look way better
38:39 - so font size I like to go to 16 for
38:42 - myself
38:43 - play around with what you feel is best
38:46 - and then next up let's go to line height
38:49 - so I'm just going to search for line
38:50 - height
38:53 - and the thing about line height isn't
38:55 - really calculated off of the font size
38:58 - so you can't do 1.5 times the font size
39:01 - because look at that you actually have
39:03 - to enter in a number so I personally
39:06 - like my font size to be about 1.6 times
39:09 - the font size sorry my line height to be
39:12 - 1.6 times the line height so we're going
39:15 - to go 16 times 1.6 that'll be around 26
39:19 - so let's say 26 right there
39:22 - and it gives it some nice spacing right
39:24 - there
39:25 - so compare that to the zero that it was
39:27 - by default everything gets crunched a
39:29 - little bit more you can even bump that
39:31 - up to 28 if you like so play around with
39:33 - what you like right there
39:35 - the next one I'd like to talk about is
39:39 - ligatures now this is a make or break
39:41 - thing if you don't like it don't turn
39:42 - these on if you do like it give them a
39:44 - try and use them in your code
39:47 - so if I search for ligatures right here
39:49 - the search in the settings is very
39:51 - powerful so get used to it ligatures
39:55 - editor font ligatures the way to turn
39:58 - these on is you go to edit in
39:59 - settings.json and this is the Json
40:02 - version that I talked about earlier
40:06 - so if I click editing settings.json all
40:09 - of our settings actually is here in this
40:11 - Json file so everything that happened
40:14 - here in this UI version actually
40:16 - translates to this Json object right
40:19 - here
40:19 - and I'm going to say true right here and
40:22 - you get this nice autocomplete and we'll
40:23 - talk about vs codes autocomplete
40:26 - intellisense in a future video
40:29 - so I'll turn that to true we have turned
40:31 - font ligatures on so let's give it a try
40:33 - const is equal let's say is equal to
40:36 - hello is equal to hello
40:41 - so it doesn't look like that really
40:42 - changed anything right there
40:44 - so actually I didn't save this file so
40:46 - let's save that and immediately you saw
40:49 - the equals change there so if I change
40:51 - this to false and press save
40:53 - you notice the change right there and if
40:55 - I did not equal to
40:56 - and I did true right here
40:59 - there we go we get ligatures so if you
41:02 - like them use them if you don't no
41:04 - worries
41:05 - the last setting we have for fonts that
41:08 - is really important I think is right now
41:11 - we have a font size right here
41:13 - but if we wanted to change this we would
41:15 - have to go over here and say font size
41:16 - in our settings and change this right
41:19 - here
41:20 - but what we can do and this is something
41:22 - that most people
41:24 - don't really have turned on because it's
41:25 - by default off I personally like to have
41:28 - it is mouse Zoom
41:31 - so Mass wheel Zoom right here you click
41:33 - this on and then you can hold Ctrl and
41:37 - zoom in and out with your mouse so you
41:39 - can change the font size on the Fly
41:42 - so Mouse wheel Zoom is a very helpful
41:44 - setting to also have
41:47 - so that was a lot in this video we have
41:49 - covered fonts we have covered turning
41:52 - fonts on using the settings and font
41:54 - family we have covered going into
41:56 - codepen and trying out a couple
41:58 - different fonts for yourself
42:00 - and we have covered a few of the font
42:02 - settings like line height font size font
42:04 - ligatures and mouse Zoom
42:07 - so we are on our way to having a good
42:10 - looking vs code and then soon we'll get
42:11 - into the productive part of it where we
42:13 - can get into our workflows
42:17 - these are my favorite coding fonts and
42:20 - to help us out here I have a coding Dash
42:23 - fonts.css-tricks.com website which is a
42:28 - microsite that CSS tricks created and I
42:30 - think it does a fantastic job of
42:31 - showcasing all of the coding fonts we
42:34 - have access to
42:36 - so if I go here you can see all of the
42:39 - different fonts that are coding fonts
42:41 - which are mono spaced fonts which means
42:43 - every character is going to take up the
42:45 - same amount of width so that it is
42:48 - uniform lines
42:50 - so let's get to it what are my favorite
42:52 - coding fonts I've tried really all of
42:54 - them and given them a shot but these are
42:57 - my favorites so number one on my list
42:59 - that I think is the best coding font out
43:02 - there the downside is it is paid is
43:05 - operator mono
43:07 - so operator mono I love the funness of
43:11 - it and for me I personally lean to the
43:14 - shorter fonts not the kind of taller
43:17 - fonts and a good medium size on the
43:20 - width so they don't take up too much
43:21 - space on their lines and I think
43:23 - operator mono strikes that balance
43:25 - perfectly and it also brings in a little
43:28 - bit of Personality with characters like
43:30 - the f I think looks really cool the T
43:33 - has a good character and just overall
43:36 - nice personality in this font
43:39 - now there are a lot of fonts on this
43:42 - list that are good middle of the road
43:44 - fonts but these are my favorites that
43:46 - I'm pointing out because they have
43:47 - personality
43:49 - so number two of my favorite coding
43:51 - fonts which is a great alternative a
43:54 - free alternative to cat operator mono is
43:57 - Cascadia code
43:59 - Cascadia code also takes that shorter
44:02 - approach about the same on the widths a
44:05 - little bit bolder
44:06 - but a very fantastic coding font
44:11 - number three on my list is the first
44:13 - font that introduced me to ligatures and
44:16 - ligatures are where you type in like
44:18 - equals equals equals and it combines it
44:19 - into one character you can see it right
44:21 - here current theme equals dark
44:23 - personally I like them not all people
44:26 - like them so it depends on your workflow
44:28 - but I like them so I can turn them on
44:30 - and you can see over here on the right
44:31 - side it says ligatures check italics
44:34 - none
44:35 - variable none so keep that in mind when
44:38 - you're picking your coding font if you
44:39 - want ligatures
44:42 - and fire code is down here
44:44 - a little bit taller than I'd like a
44:47 - little bit taller than Cascadia code and
44:48 - operator mono but it does come with
44:50 - ligatures and fire a flot look at that
44:52 - cursive on the comment really cool right
44:55 - there it may not be your style but I
44:57 - think it's really fun to look at and
44:59 - just make sure we're aware of it if you
45:01 - want to have a fun font
45:04 - all right number four on this list is
45:09 - inconsolata and I hope I said that right
45:12 - it's a little bit thinner than the other
45:14 - fonts and a lot older I believe and this
45:17 - is my pretty much first coding font so
45:19 - it has a special place in my heart and I
45:21 - still think it looks fantastic compared
45:23 - to operator mono Cascadia code a little
45:26 - bit thinner which I like and about the
45:28 - same Heights and widths
45:32 - it was kind of hard to pick number five
45:34 - on this list because the other fonts are
45:37 - very similar to this and now looking at
45:39 - it while I'm recording this video I'm
45:41 - not sure it's my number fifth choice but
45:44 - it does have good personality a little
45:45 - bit thinner a little bit of like a serif
45:48 - feel to it
45:49 - but it is a cool font so if you like
45:53 - this style of font definitely check it
45:55 - out
45:57 - number six seven and eight are kind of
46:00 - the gimmick approach fonts here's Comet
46:03 - code which is Comic Sans in code form
46:06 - and here's comic new a little bit
46:08 - thinner a little bit less tall and
46:11 - here's comic Shands which actually looks
46:13 - decent I think of all the three so if
46:15 - you want to pick a Comic Sans type font
46:18 - maybe you're using it for presentations
46:20 - just a fun gimmick or if you want to try
46:23 - as your daily driver comic Shands is a
46:26 - good one
46:28 - and honorable mentions these are the
46:30 - ones that I think do really well but
46:33 - they didn't make the top five because I
46:35 - don't think they have enough personality
46:37 - I think they are great fonts but
46:40 - just didn't get into the top five so
46:42 - these are going to be
46:45 - consolas let me see consolas
46:48 - another good font similar to Cascadia
46:51 - code that I like PT mono
46:55 - right here
46:56 - a little bit bigger wider source code
47:00 - Pro right here
47:03 - San Francisco mono
47:06 - and Roboto mono
47:10 - those are my honorable mentions I think
47:12 - those are great fonts if you want to
47:14 - check them out and you might be
47:15 - wondering okay well Chris they're
47:17 - starting to kind of blend all in
47:18 - together
47:19 - I would definitely say give them a try
47:21 - on your machine on a daily workflow try
47:24 - to give it a day or so and see if you do
47:26 - like it and switch between them on the
47:28 - Fly
47:29 - you'll notice that you'll start to get
47:31 - your style like for me I have a shorter
47:34 - and not as wide medium width type
47:36 - characters that I like if you go and
47:39 - start looking at the other ones like
47:40 - lotion you'll see the big differences
47:43 - in fonts and you're like okay well this
47:46 - looks nothing like the other ones that
47:47 - Chris pointed out that's because it's
47:49 - not really my style or preference
47:52 - there's Mona Lisa which I know a lot of
47:54 - people like a little bit too wide for me
47:56 - monoid which is way too tall and a
47:59 - little bit too weird for myself
48:02 - recursive also a great font but
48:04 - definitely check out the site click
48:06 - through see what you like Ubuntu Mano
48:09 - Victor mono I know that
48:12 - a lot of people just have different
48:14 - preferences for different languages as
48:15 - well so if you want to check these out
48:18 - I'll put a link to this down below while
48:20 - we're still here in the make vs code
48:22 - look good section I want to pass on five
48:25 - different vs code settings that I use to
48:27 - make my vs code look a little bit
48:29 - different than the default now these are
48:32 - starting to get into a little bit of an
48:33 - opinionated sort because of these are
48:36 - the defaults that I like to use so
48:39 - just check these out maybe you like them
48:41 - maybe you don't it's all good if you
48:43 - don't
48:44 - let's get into it
48:46 - the first one here is editor tab size
48:49 - and you can see it right here or you can
48:52 - start searching for it right here so tab
48:54 - size I primarily work in JavaScript
48:57 - these days so I default this to myself
49:00 - but what's really cool about vs code is
49:02 - that if you are in a project vs code can
49:06 - actually detect the indentation so if
49:08 - you're in a project that has spaces at
49:10 - four for a tab size then it actually
49:13 - just says okay I'll just keep using
49:14 - before
49:15 - so if you actually click editor detect
49:17 - indentation that is by default on
49:21 - and that goes to the setting we just
49:22 - changed which is tab size and this also
49:25 - goes to insert spaces
49:27 - so should pressing tab actually insert
49:30 - spaces right now vs code defaults to
49:33 - true and I think that's a good default
49:35 - to keep
49:36 - detect indentation so if we go all the
49:39 - way back to tab size right here
49:42 - two is a good default for JavaScript and
49:45 - that's pulling off of the JavaScript
49:47 - style guides that you can follow Airbnb
49:50 - is probably the most popular one the
49:53 - Airbnb style guide I'll actually link to
49:55 - down below if you want to check that out
49:56 - but do whatever is best for your code
49:58 - and for your language
50:01 - another thing that's really cool about
50:03 - how vs code handles settings in this UI
50:05 - version if you change anything from the
50:08 - default it actually highlights it so
50:09 - that you always know what has been
50:11 - changed from yours to the defaults
50:17 - all right next up let's go to setting
50:19 - number two that I want to talk about
50:21 - that is going to be rulers so let's go
50:23 - to rulers and this is something that you
50:26 - have to edit in the Json file so I'll
50:28 - click that
50:29 - and it actually creates this array right
50:31 - here
50:32 - and I'm going to say 80.
50:37 - so there we go I have 80 as a ruler and
50:39 - let me show you what that is you can
50:41 - actually see this is using the four
50:42 - spaces indent and you can see it down
50:45 - here spaces is four
50:47 - and that's because it said oh the Json
50:49 - file has four I'll just use the four so
50:52 - that's good to see
50:53 - so I'll put a ruler at 80 and let me
50:55 - show you what that does I'm going to
50:56 - bring settings back here and I'll go
50:59 - back into my file now we have this line
51:01 - right here at 80 characters
51:03 - so if I start typing out and get to 80
51:06 - characters right there
51:09 - then it actually doesn't do anything
51:11 - really it's just a visual guide that
51:13 - says hey this line is past 80 characters
51:15 - maybe it's getting a little long maybe
51:18 - you want to see if you could break this
51:19 - apart and that's just me personal style
51:21 - guide I like having things less than 80
51:24 - characters it makes code far more
51:25 - readable look at that one a little bit
51:27 - too long but overall if you keep code to
51:30 - less than that 80 it'll be nice and
51:33 - readable so I like to leave the ruler
51:35 - maybe you can do a ruler at something
51:37 - less I've seen people do rulers at 120.
51:40 - anything's valid it's all up to you
51:43 - another trick is if you are on a line
51:46 - you can go down here you're on line 12
51:47 - column 86 so you can actually see how
51:50 - many characters you're at and if you
51:52 - highlight some stuff you can see how
51:54 - many characters you've selected down in
51:56 - the status bar
51:57 - fun little tip right there
52:00 - okay so let's go back into our settings
52:01 - that was setting number two setting
52:04 - number three is render indent guides
52:09 - and this one is on by default so just
52:12 - make sure it's on what it does
52:13 - essentially is that it every indent has
52:17 - this line right here so if you think
52:18 - that's a little bit too busy you just go
52:20 - over here turn that off render indent
52:22 - guides and go here and now look how
52:24 - clean your code has gotten
52:26 - so personally I think it's helpful
52:28 - especially for longer files where
52:30 - everything is spaced a little bit far
52:33 - away like you don't know where this main
52:35 - goes to
52:37 - but if you have the Indian guide on by
52:39 - default you go here you can click it and
52:41 - you can notice where this is aligned to
52:44 - so that's again all preference
52:45 - appearance wise turning it off
52:47 - definitely makes it look a little bit
52:48 - cleaner
52:51 - the next one I'm going to bring settings
52:52 - back to the side right there is word
52:56 - wrap so this is setting number four word
52:58 - wrap is not diff editor we're going down
53:00 - to editor word wrap we can turn this on
53:04 - and notice how it actually brought this
53:07 - down into one line so that it doesn't
53:09 - expand beyond the column right there
53:12 - and this is again personal preference by
53:15 - default it's off so your you can scroll
53:17 - to the side like this or you can have it
53:20 - on just depends on what you like I
53:23 - personally just leave it on
53:25 - and on top of this you can actually say
53:28 - word wrap at column right here and this
53:31 - is going to take this setting which is
53:32 - set to 80 so word wrap column is 80. so
53:35 - if you go here it actually breaks on the
53:37 - 80 ruler
53:39 - so another really fun one to have
53:42 - and speaking of fun I am actually going
53:45 - to set this back to on speaking of fun I
53:47 - want to show you one of the maybe most
53:50 - useless but most fun of the visual
53:52 - settings here's our cursor I just made
53:54 - it giant let's go to cursor blinking
53:59 - so this is setting number five cursor
54:02 - blinking is blank by default and if you
54:04 - click here you can see it just blinking
54:05 - I can go to smooth and click back over
54:08 - and you see how it changes just a little
54:10 - bit how the cursor blinks
54:13 - and phase is pretty similar to smooth
54:16 - actually
54:17 - but this is the fun one and maybe if
54:20 - you're doing a conference talk or a
54:21 - tutorial or something like that and you
54:23 - want to show off hit it expand and you
54:25 - give this fun cursor maybe a little
54:27 - annoying but super fun either way and
54:31 - solid just doesn't blink at all
54:34 - so me personally I do smooth or phase
54:37 - I'll keep smooth
54:39 - there we go so it has a fade I think
54:41 - phase has more of a fade in actually
54:43 - there we go so we'll keep phase for that
54:47 - all right so that wraps up the five
54:49 - settings I think you should take a look
54:50 - at for appearances
54:52 - let's keep moving along in the course
54:56 - so this section is called get to know vs
54:58 - code if you already know the vs code UI
55:01 - then feel free to skip this section but
55:03 - there are a lot of little hidden things
55:06 - around the vs code UI because there are
55:08 - so many features packed in that you have
55:10 - seen a button before a million times but
55:12 - maybe you don't know exactly what all
55:14 - the little things do the side panels
55:16 - terminal the problems panel all these
55:19 - little things are fantastic when you add
55:22 - them together to make vs code these are
55:24 - all of the base features the
55:26 - foundational features that make vs code
55:28 - workflows and everything that we're
55:29 - going to do fantastic so I highly
55:32 - recommend checking these videos out
55:34 - check up outline on the sidebar there if
55:36 - you do think you know most of the vs
55:38 - code UI you can feel free to jump ahead
55:40 - to my favorite section the keyboard
55:42 - shortcut section but this is also a
55:45 - fantastic refresher or a fantastic
55:47 - introduction into getting to know vs
55:49 - code's UI and starting to learn all the
55:51 - features that we can put together to
55:53 - make ourselves more productive
55:56 - in vs code there are probably two really
55:59 - big places where we're going to spend
56:01 - most of our time the first is the editor
56:04 - which is this big area right here where
56:06 - you'll be writing all of your amazing
56:07 - code bug free of course and over here on
56:10 - the sidebar is the Explorer
56:12 - so if I open up the Explorer into our
56:14 - sidebar
56:15 - you'll see I'm starting off with zero
56:17 - folders zero files in here we can start
56:19 - off by showing how we can get a folder
56:21 - into vs code and then working with that
56:25 - we already talked about cloning a repo
56:27 - you can click here and clone a repo that
56:28 - you have you may need to log in with
56:30 - GitHub which we will talk about later in
56:32 - this course there is also an open folder
56:35 - if you want to just bring in a local
56:36 - folder
56:37 - I'm going to start us off from scratch
56:39 - I'm going to go over to our other course
56:42 - beginnerwebdev.com this is our free
56:44 - course for getting started with
56:46 - JavaScript
56:47 - here's the GitHub repo and I'll put this
56:49 - down in the description below the link
56:51 - to this so you can go code right here
56:53 - and click download zip and we're going
56:56 - to use this for this video
56:59 - so now that I've downloaded that zip
57:01 - file it's going to be on my desktop
57:03 - that's where I put all my downloads I'm
57:05 - going to open it up and now here we are
57:07 - this folder right here
57:09 - so there are a couple different ways to
57:12 - open this in vs code one you can just
57:14 - take the folder drag it in and that
57:16 - would open it in vs code
57:18 - another way is there's a couple prompts
57:20 - right here one is open folder here one
57:23 - is open right here another is up here
57:25 - file open
57:27 - another is command o and another is the
57:31 - command palette of course command shift
57:32 - p file open
57:35 - and that's down here
57:37 - so any number of ways you can open
57:40 - a folder let's go ahead and click this
57:42 - one
57:43 - and it is probably going to change based
57:45 - on what scenario you're in sometimes I
57:47 - do file open sometimes I do command o
57:49 - but either way they're all good so let's
57:52 - go into our desktop right here and I'll
57:54 - open up this folder
57:55 - and click open
57:57 - and for that course there's just a bunch
58:00 - of HTML files with some JavaScript in
58:02 - them and from here we will talk about
58:05 - using the Explorer on the side here
58:09 - so let's close out getting started the
58:11 - first thing of the Explorer that I want
58:13 - to talk about is just creating new files
58:16 - and new folders so here you can create a
58:18 - new file right there and say hello.html
58:23 - you can also create a new folder where
58:26 - we can say
58:27 - components
58:31 - the cool thing about vs code is you can
58:32 - actually just take this grab click drag
58:36 - it all the way up into the components
58:37 - folder and it'll say hey are you sure
58:39 - you want to move hello HTML into
58:41 - components you can say move and if you
58:44 - want to remove this prompt you can say
58:46 - do not ask me again I personally leave
58:48 - it on because I've accidentally dragged
58:51 - and dropped some folders and files and
58:53 - forgot where they went so I'll leave it
58:55 - on
58:58 - there is this refresh in case you change
59:00 - something outside of vs code and you
59:02 - want the file to change here it's
59:04 - especially helpful for images let's say
59:06 - you drag an image into the folder and
59:08 - you say well where are you just click
59:10 - refresh and that'll work
59:13 - this button is really helpful as well I
59:15 - use it quite often actually so whenever
59:17 - there's like a lot of folders a lot of
59:19 - things open in your larger projects and
59:21 - you want to just compress and get back
59:23 - to zero you just click this it'll
59:25 - collapse everything and just get you
59:27 - back to a clean State that's it for
59:30 - those buttons up there next up I want to
59:33 - talk about right clicking and going into
59:34 - the context menu here you can do new
59:37 - file new folder reveal in finder which
59:39 - is a good way to kind of just get the
59:41 - folder in finder or in Windows Explorer
59:45 - and that'll find it there you can also
59:48 - open an integrated terminal so this will
59:50 - start the terminal in this folder right
59:52 - here and then from here you can do LS
59:54 - you can do any of your stuff that you
59:56 - need from the terminal
59:58 - and we'll talk more on that in the
60:00 - terminal workflow video there's so much
60:02 - functionality here you can write open
60:04 - folder settings remove folder from
60:05 - workspace add folder to workspace so
60:07 - these are workspace settings that we'll
60:09 - talk about in the workspace workflow
60:11 - video
60:12 - find in folder is really helpful if you
60:14 - wanted to say like I just want to search
60:16 - in components you could say find in
60:18 - folder and we'll talk about that in the
60:20 - find and search feature video
60:22 - a lot of features that we will break
60:24 - down in multiple videos
60:27 - so now that we've talked about what I
60:28 - think are the visual settings in
60:30 - Explorer let's talk about the things
60:32 - that are kind of hidden that are cool
60:33 - features there's this dot dot right here
60:36 - where you can click you can see open
60:37 - editors
60:39 - and you can click that and there we get
60:41 - this little section called open editor
60:43 - so if I called in hello world and opened
60:45 - that up you would see Hello World here
60:47 - and you would also see it under open
60:48 - editors and I can go here to built-in
60:51 - objects I can go here to pricing
60:54 - calculator and it would show and I would
60:56 - double click to keep them open right
60:59 - there and right there
61:00 - okay so let's close out some of these
61:02 - files and the next thing I want to do is
61:04 - go here and say outline so outline is a
61:08 - really really cool feature in Explorer
61:10 - so let's say I open up this file
61:12 - built-in objects
61:14 - and we have here our outline here's the
61:17 - HTML and you can click it and it
61:19 - navigates directly to that in your file
61:22 - you can click the title right here it
61:24 - goes there and if you go down you can
61:26 - see there's a script tag I can click
61:28 - first and it actually shows the
61:30 - JavaScript variables that are right here
61:32 - what's cool about this too is the
61:34 - outline right here is kind of the
61:35 - breadcrumbs and outline and it also
61:38 - shows up here in your editor there's
61:40 - script right here and you can click
61:41 - there you can go to the head of the
61:43 - document and click here go to the body
61:45 - and you can open up the body so there's
61:47 - a lot of different ways to navigate vs
61:50 - code and it's up to you to find your
61:52 - favorite way to navigate
61:54 - another good setting here in the outline
61:56 - section is to click this Dot and say
61:59 - follow cursor so now wherever I go up
62:01 - here it'll actually highlight the title
62:03 - highlight the head highlight the style
62:06 - tag right here in the body and all that
62:08 - good stuff with the Explorer there is
62:11 - the outline and there's the files I want
62:13 - to talk about one extension for the
62:14 - Explorer we'll go into extensions
62:18 - and it's called Advanced new file
62:22 - so it won't be this first one that has
62:24 - 50k downloads it'll be the second one
62:25 - that has 163k downloads I'll click
62:28 - install there
62:32 - and once that's installed you can scroll
62:34 - down here read up on how it's used I'm
62:36 - going to close this actually go back
62:38 - into Explorer
62:41 - and let's say I wanted a new file in
62:43 - components normally I'll have to click
62:45 - components click this new file right
62:47 - here and then I would get a new file
62:48 - Advanced view file is cool because we
62:50 - can do everything from the command
62:52 - palette we don't have to leave our
62:54 - keyboard
62:55 - I can say command shift p to open up the
62:58 - command palette you can say Advanced new
63:00 - file
63:02 - and I'll click enter there and now we
63:04 - can say okay what folder do you want to
63:06 - create a new file in let's do components
63:09 - and it'll do this fuzzy search so if you
63:11 - start typing it'll
63:13 - filter down the results I'll press enter
63:16 - and then it says okay well what file
63:18 - name do you want in that folder I'll say
63:20 - goodbye dot HTML
63:23 - and it'll open it up for you so you can
63:25 - start typing right away
63:28 - events you file very helpful extension
63:30 - for the Explorer so that you can get up
63:33 - and running with new files as quickly as
63:34 - possible
63:36 - I encourage you to click this drop down
63:38 - figure out which settings you like open
63:40 - editors outline whatever you like over
63:43 - there or if you just like to turn things
63:44 - off and turn that off and turn that off
63:46 - and keep it just to your files
63:49 - that's also totally valid figure out
63:51 - what's best for you just know that these
63:53 - are all the options available to you
63:57 - we just talked about the Explorer over
64:00 - in the sidebar which is probably the
64:02 - second most important part of vs code
64:04 - the number one most important part is
64:06 - right here right in the middle the
64:08 - editor and we are going to talk about a
64:12 - couple settings and a couple features of
64:14 - the editor and we'll definitely be
64:15 - working with this way more throughout
64:17 - this course but these are ones I want
64:19 - you to be aware of for moving forward
64:23 - to start off I am going to open the
64:25 - sidebar and there's a whole section of
64:27 - this course based on keyboard shortcuts
64:30 - but I'm going to sprinkle them in here
64:32 - and there because I think they're so
64:33 - important to productivity I'm going to
64:35 - open the sidebar with command B
64:37 - and let's open up maybe this operator's
64:40 - one right here
64:42 - I'm going to close the sidebar command B
64:45 - I want to start off with feature number
64:47 - one is breadcrumbs which we talked about
64:49 - in the previous video you can click here
64:51 - click this drop down see everything
64:53 - that's going on inside of this file all
64:56 - the way down to script even see the
64:58 - variables inside of there
65:00 - so that's breadcrumbs really helpful to
65:03 - have right there here is the mini map
65:05 - which is good to click and drag around I
65:08 - actually use this a lot
65:10 - and what is fun productivity tip is
65:13 - let's say I have a really big file which
65:15 - I try not to but sometimes it happens
65:17 - what you can do here is and I know this
65:21 - isn't the prettiest thing but you can
65:22 - actually maybe do some stuff like this
65:25 - and what I'll do here is I'll just
65:27 - replace all of these with like equal
65:29 - signs
65:30 - and I will take this line right here and
65:34 - put it above and below some HTML
65:36 - comments or JavaScript comments whatever
65:38 - they be
65:39 - so right here now you can see in the
65:42 - minimap that there's a section right
65:43 - there where it's big and a giant HTML
65:46 - comment and really what that is for me
65:49 - is a way to say hey in the minimap oh
65:52 - that's where a new section starts that's
65:54 - where a new section starts so it's all
65:56 - preference I know this is a jarring
65:59 - tactic but for me it works definitely
66:02 - check with the people you're working
66:03 - with on your team if they like this sort
66:05 - of thing but the minimap helps us do
66:07 - that
66:10 - all right the next thing I want to talk
66:11 - about which is a really fun tactic is
66:14 - side by side editing and I use this very
66:16 - often so if I go back into Explorer
66:18 - right here I can actually click this
66:21 - open it up
66:22 - and the easiest way to get side-by-side
66:24 - editing is two different ways one you
66:26 - can click the tab drag it over and you
66:30 - can see the Highlight here you can
66:31 - highlight to the right and drop it and
66:34 - it'll split the vs code side by side
66:37 - another thing you can do is drag it back
66:39 - over
66:40 - I can save this little button right here
66:42 - we'll click it and go side by side and
66:45 - it actually opens up both so if I
66:47 - actually edit one getting started with
66:49 - JavaScript exclamation exclamation
66:51 - exclamation notice how it edits both
66:53 - left and right so it's still the same
66:55 - file even though it's technically open
66:57 - in both spots but what you can do here
66:59 - is scroll down so you can like reference
67:02 - something down here while you're typing
67:03 - up at the top of the file
67:07 - okay so I'll drop that
67:11 - another way to open up side by side
67:13 - editing is to option click any of these
67:16 - files so I'll option click there and it
67:18 - goes side or I can double click and then
67:20 - drag or I can double click and then
67:23 - click this button right here
67:26 - but we're not only limited to side by
67:28 - side editing you can actually take this
67:30 - and drag it to the bottom
67:32 - right there so now you have top and
67:34 - bottom which can be helpful
67:37 - what I can do also is this button right
67:40 - here if I hold the option button and
67:42 - hover it now it splits up and down
67:45 - vertically so you can do that vs code is
67:49 - so great at giving us so many options so
67:51 - I'm trying to surface as many of the
67:52 - options as possible to you and feel free
67:55 - to not use all of them feel free to use
67:57 - some of them it all depends on how you
67:59 - think your workflow would work best
68:01 - how you can be most productive
68:05 - so that's all the ways to get different
68:07 - splits really cool here is you can
68:10 - actually split this out to the side and
68:12 - then now we have editor groups so I can
68:14 - have this group open I can have this
68:16 - group open and if I go open up another
68:18 - file notice how it adds to this group I
68:21 - can just drag that over into this group
68:22 - and vice versa
68:25 - very helpful there
68:26 - another helpful tip is editor groups you
68:29 - can actually do a structured layout here
68:31 - if you go to view editor layout you can
68:34 - even do a two by two grid right here and
68:37 - then start dragging things up and down I
68:39 - don't know I don't use this myself very
68:41 - much but it could be helpful
68:44 - so let's close all these out
68:46 - and of course all of these things can be
68:48 - done with the command palette so you can
68:51 - do command shift p to open up the
68:53 - command palette and you can say split
68:55 - editor and you can do down right left so
68:58 - I'll do right right there
69:01 - and you can even do split two by two
69:04 - let's see if I can find it two by two
69:06 - there we go grid editor layout two by
69:08 - two
69:09 - and there we go
69:12 - all right so that's how we can get split
69:14 - editors editor groups the one setting I
69:17 - want to talk about for the editor and I
69:19 - just closed everything is
69:21 - this enable preview setting and I'll
69:24 - talk about this in a second but when you
69:27 - open a file in vs code it doesn't
69:28 - actually open the file it opens a
69:31 - preview of the file
69:33 - now some of you may like this I did not
69:35 - like it when I got in the vs code I
69:37 - still don't like it so I disable it and
69:39 - I'll show you how so if you click a file
69:41 - notice how here it's italicized the file
69:44 - name which means it's a preview it's not
69:46 - open yet
69:48 - so for me I click it I want it open but
69:50 - by default vs code says well you opened
69:52 - it but it's just a preview so if you
69:54 - click to another file it opens up the
69:56 - other file in the same tab so it's not
69:58 - like you're opening two tabs you're just
70:00 - opening previews of multiple files so
70:03 - there's really no tabs open
70:06 - so to actually keep this and open the
70:08 - file you double click right here or you
70:10 - start editing the file so I can click
70:12 - here and notice italicize as soon as I
70:15 - say down here something like hi then it
70:18 - turns non-italicized and I'm actually
70:20 - editing the file
70:23 - if you like the preview way where you
70:25 - actually opens up a file and then if you
70:28 - click away it closes a file
70:30 - then by all means keep that setting for
70:33 - me I don't really like it so I'm going
70:34 - to go into our settings command comma
70:38 - I'm going to go enable preview
70:43 - and this will be workbench editor enable
70:45 - preview I turn mine off
70:47 - so now whenever I let's close all of
70:50 - these command W let's open up our
70:52 - sidebar with command B I can click and
70:55 - notice how it's not italicized it's open
70:57 - and I can just open as many as I want
71:01 - so that's personal preference
71:03 - the last thing that I want to talk about
71:04 - in this video is talking about our
71:07 - startup state
71:08 - when we open up vs code we get this
71:10 - brand new getting started link right
71:12 - here and we don't usually need this and
71:15 - I I don't actually really use this page
71:17 - the welcome page so to check off this
71:21 - welcome page so that you don't see it
71:22 - again on Startup you can click this
71:24 - button right here show welcome page on
71:26 - Startup that removes it what do we
71:28 - actually see when we open up vs code now
71:31 - let's close vs code and reopen it
71:35 - we should see not the welcome page we
71:37 - just see a blank state so there's
71:39 - nothing new there
71:41 - we can customize this let's go into our
71:43 - settings command comma
71:45 - and we'll say startup editor
71:50 - and the startup editor is none because
71:52 - we unchecked that welcome page box if
71:54 - you click here you can see that welcome
71:56 - page is the default you can do readme
71:58 - new Untitled file welcome page in empty
72:02 - workbench I like doing new Untitled file
72:06 - and the other thing to this so let's
72:08 - close out vs code let's reopen it
72:12 - now when we have a new Untitled file it
72:14 - says select language to get started
72:16 - start typing to dismiss or don't show
72:18 - this again so you can actually click
72:20 - this which is really cool it's like a
72:22 - button inside of your text
72:25 - or you can select the language which
72:26 - actually opens up this button down here
72:28 - plain text you can choose the language
72:30 - that this file is based on that little
72:32 - drop down there and you can also change
72:34 - it by command shift p and saying
72:37 - language mode and you can change this to
72:40 - markdown
72:41 - so I usually like markdown for my new
72:43 - files I use it a lot when I'm writing
72:45 - notes and I'll do any sort of notes
72:47 - outlines that I need to do maybe my
72:49 - to-do list for the day
72:52 - we can also change the setting by going
72:53 - to command comma and doing default
72:56 - language
72:59 - and then down here default language you
73:01 - just type in markdown and now markdown
73:04 - will always be the file type that is
73:06 - opened when you do a new file so if I do
73:08 - new file right there I just double
73:09 - tapped it right there it opens up a
73:12 - markdown file or if I open up a brand
73:14 - new vs code that will be a markdown file
73:16 - as well and for me I like this it works
73:19 - well for my workflow I do a lot of
73:20 - markdown writing when I'm taking notes
73:22 - or writing a new article for you if you
73:25 - want to do JavaScript or whatever else
73:26 - you do that would be files default
73:28 - language but now when we open up vs code
73:31 - from scratch we get a new file we don't
73:34 - see that welcome page anymore and we get
73:36 - a markdown file that we can work in
73:40 - all right so I hope that was a helpful
73:41 - video there's a lot to do with the
73:43 - editor and split editing is very helpful
73:46 - we'll be working a lot more with the
73:48 - editor in the rest of this course
73:52 - this video is about a feature called
73:54 - intellisense and before we get into it I
73:57 - kind of want to start with a question
73:59 - what is the difference between a text
74:02 - editor and an IDE or in other words an
74:06 - integrated
74:07 - integrated development
74:10 - environment
74:12 - versus a text editor and let me zoom in
74:15 - here
74:16 - and I will actually use the zoom scroll
74:18 - that we learned about
74:20 - so a text editor is going to be a text
74:23 - editor but what is the difference
74:25 - between editing text and having an IDE
74:28 - or an integrated development environment
74:32 - so to me the difference is having all of
74:35 - the features on top of a text editor
74:37 - because right now we just used vs code
74:39 - as a text editor
74:42 - but now we get all of these fun things
74:44 - like a file explorer like search and
74:46 - replace like git and Source control in
74:49 - here debugging extensions all of these
74:52 - things you wouldn't find in a normal
74:54 - text editor this is more stuff that you
74:56 - would find in an IDE
74:58 - so as far as things go text editor is
75:01 - something like text edit that you would
75:03 - find on Mac and let's just like create a
75:05 - new document this would be a text editor
75:08 - not the fanciest thing ever right
75:13 - and this would kind of be the equivalent
75:14 - of maybe notepad in the windows side of
75:17 - things
75:19 - so let me close that
75:22 - and IDE is really cool because as coders
75:25 - we get some special features like
75:27 - intellisense out of vs code and
75:30 - intellisense isn't a vs code specific
75:32 - thing there are other Ides like the
75:36 - tools from jetbrains like webstorm but
75:39 - intellisense is really a feature that is
75:42 - giving what is called code completion
75:44 - it's saying when I start typing can my
75:47 - IDE help me out to know what I need to
75:50 - type next
75:51 - and the cool thing about vs code is that
75:53 - it totally does so intellisense is a
75:55 - feature that gives a couple things like
75:57 - code completion and we'll see that in a
75:59 - second and you kind of already see it
76:00 - happening parameter info
76:03 - Quick Info
76:06 - member lists and a lot more features but
76:09 - I will put a link down to the vs code
76:12 - intellisense docs definitely check those
76:14 - out but instead of just reading through
76:16 - the docs let's actually build something
76:18 - on our own
76:19 - I'm going to delete this file don't save
76:21 - that go into my file explorer right here
76:24 - command B to open up the sidebar here
76:27 - and I'm going to go new file
76:29 - and let's go for just test.js so now we
76:33 - have a Javascript file and out of the
76:35 - box vs code has intellisense for
76:37 - JavaScript files typescript files Json
76:40 - HTML CSS SAS and less and also there are
76:45 - extensions that can give vs code some
76:47 - more power to do other languages like
76:50 - PHP like Ruby like python
76:54 - and I'll drop links down below for all
76:55 - that stuff
76:57 - so let's give this a try let's say we
76:58 - start typing out some JavaScript const
77:00 - person is equal to and let's make it an
77:03 - object name is Chris
77:05 - and let's say age is 32 and I'm 32 at
77:09 - this time of writing
77:11 - so let's go down here and let's see
77:13 - intellisense in action immediately if I
77:15 - say person
77:16 - notice how it says oh hey you probably
77:19 - are wanting person so cons person press
77:22 - that little button there and now we'll
77:23 - see this I I am pretty zoomed in because
77:26 - of this video and recording so you
77:28 - probably will be able to see the whole
77:29 - thing on your computer
77:31 - so now I can say person
77:33 - and I'll press Dot
77:35 - and notice how we get age name and it
77:37 - says age is a number and if I go down
77:39 - here and press down name is a string so
77:42 - you can actually see both of the
77:44 - properties on this object and that's
77:45 - intellisense for you so I'll say age
77:48 - right there
77:50 - so that's really cool we get vs code to
77:53 - tell us a little bit more about this
77:55 - object
77:57 - and if I actually let's say we had to
77:59 - find this object way up there and we
78:01 - were down in our file and we were like
78:02 - okay well I need the person Dot and you
78:06 - say oh I forgot about what was in that
78:07 - object you can say oh name I need
78:10 - person.name
78:12 - so that's really cool as well
78:15 - that is the way that intellisense can
78:18 - kind of Auto hint at what is going on
78:20 - let's say I even had a function function
78:22 - say message
78:24 - and let's say alert a message here
78:29 - and then I went down all the way into
78:31 - the bottom of my file or I wanted to use
78:33 - this somewhere else I could say and
78:35 - that's a function so it says hey I'm a
78:36 - function and you'll see that little like
78:38 - purple Cube thingy
78:40 - and it says message is any
78:43 - okay so that's pretty helpful I can say
78:45 - saily and then it says message is any so
78:47 - now you know the parameters that are
78:49 - part of this function so that's
78:50 - intellisense
78:52 - intellisense Triggers on these trigger
78:55 - keys so if I did this and I opened up
78:58 - these parentheses right here it would
79:00 - trigger and show what's going on but if
79:02 - I clicked out of it and clicked into it
79:04 - it would not trigger so the way to
79:07 - trigger intellisense is to do control
79:08 - spacebar
79:10 - and now wherever you are intellisense
79:12 - will try to come in and say oh well did
79:14 - you want this message is any so that
79:17 - works out that's how we activate
79:18 - intellisense
79:22 - the next thing I want to show about
79:24 - intellisense is that we can add a little
79:26 - bit more info so let's say the save
79:27 - function had a message that it wants
79:30 - right say message I can right click here
79:33 - and I can go to definition and it kind
79:36 - of Scrolls to the top there
79:38 - that's also a really cool feature of vs
79:40 - code that it can know where the function
79:42 - is that you're calling and go to the
79:45 - definition of it and I did that by going
79:47 - down here and saying right click go to
79:50 - definition and you can also
79:52 - command see that highlight and click and
79:56 - it'll go to the definition as well so
79:57 - command click will get you all the way
79:59 - up to wherever it is even if it's in
80:01 - another file
80:05 - let's say I wanted to add a little bit
80:08 - more to this and say okay let's add a JS
80:10 - doc let's go like this JS dot comment
80:12 - press enter that was intellisense also
80:15 - and it knows hey we already had a
80:17 - message in this function so we're going
80:20 - to say hey what do you want that to be
80:21 - I'll say that's a string
80:24 - so now if I go down here to where we
80:26 - defined it or started using it I can say
80:29 - right here
80:30 - open that up and it says message is now
80:32 - a string so
80:34 - intellisense is actually telling us what
80:36 - type it is
80:39 - and there's a lot more ways that
80:41 - intellisense can help us out this is
80:43 - only scratching the surface and we're
80:44 - going to get a lot into it
80:46 - during this whole course
80:48 - the best way to be productive is to let
80:50 - vs code help us out like why are we
80:52 - typing all of this code if vs code can
80:55 - just say hey this is what it is let me
80:57 - autofill it for you you don't need to do
80:59 - all of the typing
81:02 - intellisense is also smart enough to
81:04 - know the types of our variables so let's
81:06 - say I had person.name which is a string
81:09 - I can do a DOT on here and it knows all
81:12 - of these string Methods that are on
81:14 - javascript's string object and I can go
81:17 - like let's say two
81:19 - uppercase
81:22 - and I can do that
81:23 - and that would go and change that all to
81:25 - uppercase intellisense does a lot for us
81:27 - and we just need to learn how to make
81:29 - sure that we look for it so that we can
81:31 - help intellisense help us
81:34 - moving forward in this course we are
81:37 - going to be adding extensions that can
81:39 - enhance and extend intellisense itself
81:41 - and we just need to know that we are
81:44 - going to be working with a lot of
81:45 - intellisense and you should on a daily
81:47 - basis look to intellisense to help you
81:50 - speed up and be more productive
81:54 - the next essential feature that I want
81:57 - to talk about in vs code is find and
81:59 - replace
82:00 - now this sounds like the most boring
82:02 - feature I'm sure but it actually is
82:05 - extremely powerful
82:07 - to start us off I have the same file
82:09 - that we had in the last video and it's
82:12 - just test.js I have a function here I
82:15 - added this JS doc comment and we have
82:18 - this param string is message and our
82:21 - function here
82:23 - so let's say I said say hi there
82:26 - let's copy this line down a couple times
82:29 - and I'll show you how we do that in
82:31 - keyboard shortcuts in the keyboard
82:33 - shortcuts section of this course which
82:35 - is going to be fantastic in my probably
82:38 - favored section
82:39 - so there are three ways to search in vs
82:42 - code so this first one I'll show you is
82:45 - inline and I'll just do command f and
82:47 - that'll pop it up right here also you
82:50 - can do command shift p to open up your
82:52 - command palette and do find right here
82:55 - and scroll down to find right there
82:58 - now I can type in say
83:00 - and if you press enter a bunch of times
83:02 - it'll cycle through all of them so
83:04 - notice how this one is highlighted down
83:06 - here if I press enter it'll go to the
83:08 - top and if I keep pressing enter it'll
83:11 - go and cycle through them all
83:13 - so that's how we can find in vs code you
83:16 - can see there's six of six there are
83:18 - some options here for match case so you
83:21 - can say only uppercase or the case has
83:23 - to be the exact same there's match whole
83:25 - word and there's regular expression if
83:28 - you know how to use those I personally
83:30 - still don't
83:32 - but this arrow down here
83:34 - is going to let us toggle replace mode
83:36 - and what I can do here is
83:39 - say instead of say I'll say speak and
83:42 - I'll press enter
83:43 - and notice I can go and cycle through
83:46 - and say okay replace this one right here
83:47 - so this button says replace and this
83:50 - plugin on the right says replace all
83:52 - so I can press this right here and it'll
83:54 - say speak a message now and I can just
83:57 - keep pressing enter enter enter so I'll
84:00 - undo these command z z z z z
84:04 - and if I just press replace all right
84:06 - here check that out it replaced all of
84:08 - them all the way down
84:10 - so that's really helpful of a feature
84:13 - we can command F right here go through
84:15 - the list all in there or if we wanted a
84:17 - little bit more power we could open up
84:19 - our sidebar and click this search icon
84:22 - right here and I can say search let's
84:26 - search for say and the power of this
84:29 - over here versus the one that's in line
84:31 - is the inline one is only searching the
84:33 - current file and this one will actually
84:35 - search across all the files in your
84:38 - project
84:39 - so by default this files to include will
84:42 - pretty much be everything in your
84:44 - project
84:45 - files to exclude you can say don't
84:46 - search certain folders so let's say you
84:49 - didn't want to search for a components
84:51 - folder you would say components
84:55 - don't search anywhere underneath that
84:57 - components folder and you can use these
84:58 - Globs to say what you want to vs code
85:03 - the other cool thing to note about files
85:05 - to exclude is that the node modules
85:07 - folder if you're in a JavaScript project
85:09 - some git folders are already excluded
85:11 - you don't have to actually explicitly
85:13 - write them in and you can see that by
85:15 - going into your settings by going to
85:17 - command comma
85:19 - and do search exclude
85:23 - and down here search exclude it
85:25 - automatically removes node modules power
85:27 - components these git files are excluded
85:31 - as well
85:32 - so that's really helpful
85:37 - the other thing you can do is go into
85:39 - your Explorer right here and say I
85:41 - wanted to search inside of this image
85:43 - folder you could right click in here and
85:45 - say find in folder
85:47 - so really I just want to get you all the
85:49 - different ways that you can open up find
85:51 - and replace so that you can use each one
85:53 - when your situation needs it so I'll do
85:56 - find in folder and it opens up the
85:58 - search panel right here and it
86:00 - automatically fills the files to include
86:02 - right there
86:04 - so that's essentially what find in
86:06 - folder does
86:07 - so we can actually click this right here
86:10 - files to include we won't do that
86:11 - anymore we can click this down and say
86:13 - speak and notice how it'll go down here
86:16 - and kind of show you what will be
86:18 - replaced for all the way down and you
86:20 - can do this replace all button and it'll
86:22 - do it across all the files that you have
86:39 - the third way that we can do a search is
86:42 - this plus right here to this little
86:43 - Document Plus adding new search editor
86:46 - from view I can click that it opens up
86:49 - this big thing and I can do say
86:51 - just like we did earlier but it gives
86:53 - you a little bit more context about the
86:55 - file that it's in
87:03 - so that's the third way I personally
87:05 - don't really use this way I usually use
87:07 - the sidebar right here a lot and I'll
87:10 - use the inside here in line one with
87:13 - command f as well
87:15 - a fun trick which I will show you in the
87:18 - keyboard shortcuts section is let's say
87:20 - I did command f and I typed in say so
87:24 - now there's one two three four five six
87:27 - I can actually press option enter now
87:30 - and it highlights them all with the
87:33 - multi-cursor editing thanks to vs code
87:35 - and I can say something right there so I
87:38 - can type in multiple places thanks to
87:40 - find and replace in vs code and the
87:43 - multi-cursor editing so that's a really
87:46 - fun trick we're gonna do a whole video
87:48 - on multi-cursor editing next up I want
87:50 - to show you a really cool feature of vs
87:52 - code vs code is an IDE it's smarter than
87:55 - a text editor and because it can do a
87:58 - little bit smarter stuff we can go down
88:00 - here and let's say we use this way down
88:02 - in a file and we can right click on say
88:05 - and we have a list of things here go to
88:08 - definition is one and we've used this
88:10 - before we click it and it goes to the
88:13 - file where we actually defined the
88:15 - function
88:15 - let's go down let's do this again let's
88:17 - go right click if you didn't want to go
88:20 - to the actual definition of it you could
88:23 - go down here and say find all references
88:27 - so now it opens up this references panel
88:29 - on the sidebar and you can see all the
88:32 - places you can click through and go to
88:33 - each section
88:36 - we have all of these references and we
88:38 - see where the save function has been
88:40 - used
88:40 - what we can do also is right click here
88:43 - and say rename symbol
88:46 - and we can write in here say message
88:49 - and now check this out vs code knows all
88:51 - the times that we've actually used this
88:52 - function and if I press enter here it
88:55 - will go ahead and replace all of them
88:56 - all the way down so this will work
88:58 - across multiple files as well
89:02 - another cool thing here we can do in the
89:04 - context menu is right click say message
89:07 - and here is go to definition references
89:10 - rename symbol there's also this peak
89:13 - thing right here that is really cool we
89:15 - can click Peak go to Peak definition and
89:18 - check this out we now see the definition
89:22 - of it inline down below the actual place
89:25 - that we were so we didn't jump around
89:27 - files or up different lines we just said
89:30 - hey can I peek at what the definition
89:32 - looks like
89:33 - and you can even edit in here and you
89:36 - can say Okay alert message I don't want
89:37 - to do that let's just console.log the
89:40 - message here alerts a little invasive
89:44 - so now that looks good you can close
89:47 - this right here and if I go up here it
89:50 - changed so when you peek at something
89:52 - you can actually even edit that file in
89:55 - that Peak
89:59 - there is some really really powerful
90:01 - stuff with how vs code can find and
90:04 - replace and refactor our code so
90:06 - something as boring as find and replace
90:08 - is actually refactoring code all the way
90:11 - across our entire project
90:13 - I just want you to be aware of all the
90:15 - different ways we can find and replace
90:16 - things with rename symbol go to
90:19 - definition find all references find
90:21 - implementation and then classic find and
90:24 - search a lot of really powerful stuff
90:26 - even though it may seem a little simple
90:30 - we touched on something in the previous
90:33 - episode which I think is really cool but
90:35 - I didn't really get to talk about it
90:37 - enough and I've been using it a lot more
90:39 - lately so I definitely want to touch on
90:41 - refactoring a little bit more
90:44 - let's say I have here the repo for the
90:47 - website the better Dev website and I
90:50 - have a file called get airtable posts
90:52 - air table posts right here
90:54 - and this is how we get all of the
90:56 - content for this website from airtable
90:59 - which is our database CMS
91:02 - so here I have export async function get
91:05 - airtable posts and this is a typescript
91:07 - file but what I really want to talk
91:09 - about is the ability to say okay well
91:12 - get airtable posts there's only one
91:14 - place we're getting posts from so maybe
91:17 - I want to rename this to get posts
91:20 - instead of get airtable posts
91:23 - so you may think okay well let's go here
91:25 - I'll highlight this
91:26 - and I'm going to do a find all so I'll
91:28 - do command shift f
91:31 - and that finds all of the uses of this
91:34 - and here is let's see here is where we
91:37 - do the import here's where we actually
91:39 - use it cons post is equal to await get
91:41 - airtable posts
91:43 - and then over here so it's used in a
91:45 - bunch of different places so I would
91:46 - have to click one by one to go do the
91:48 - updates
91:50 - the cool thing about this is that I
91:53 - could go here right click
91:55 - find all references
91:57 - and now we get all the files where it's
91:59 - actually used
92:00 - which is very similar to the find all
92:03 - but find all finds all of the times that
92:07 - you use the word which also includes get
92:10 - airtable hosts
92:12 - so notice that this is a comment it's
92:15 - not an actual reference it's not usable
92:17 - code
92:19 - command shift F will find it where are
92:21 - we slug index posts right there so it
92:24 - finds it in the comments
92:27 - and then down here if I do find all
92:30 - references
92:32 - it won't find that comment so that's why
92:34 - that is a big difference that's why it's
92:36 - an important difference
92:38 - the other thing we have here is right
92:40 - click we can do
92:42 - find all implementations
92:45 - so the only time that we ever actually
92:46 - implement it where we Define the
92:48 - function itself is this one spot in
92:50 - airtable posts
92:51 - so if you were in the other file you
92:53 - could do find implementation and then
92:55 - you could find where that file was
92:56 - created
92:59 - another thing we can do is right click
93:00 - and do change all occurrences
93:03 - where it immediately highlights it all I
93:06 - don't think it does multiple files
93:07 - though
93:08 - all right so now the big one that I
93:11 - wanted to talk about is rename symbol so
93:14 - refactoring in vs code has a lot of
93:16 - different features this is probably the
93:18 - easiest one because I think it helps the
93:21 - most when you need to rename functions
93:22 - or variables whatever you got to do
93:24 - rename symbol here and right here it
93:27 - just pops up and I can say get posts is
93:30 - now what I want to call this thing press
93:32 - enter and it changes across the entire
93:34 - file system
93:36 - so now if I go into my git panel right
93:38 - here
93:38 - see all the changes I see that it is
93:41 - updated here
93:42 - I see that down here see this little
93:45 - green area on the sidebar I can go down
93:47 - here and it's updated there as well get
93:49 - Airy table posts to get posts
93:52 - in the other files it's also updated
93:55 - so I actually use this rename symbol a
93:58 - lot I'll go here rename symbol shortcut
94:01 - for that is F2
94:03 - error table posts we'll bring it back
94:06 - and there we go
94:08 - rename simple and the refactoring tools
94:11 - in vs code are very powerful that's what
94:13 - changes from just a text editor over to
94:15 - a stronger IDE an IDE has features like
94:18 - this
94:20 - keep it in mind when you need to do a
94:22 - big rename instead of just doing find
94:24 - all and replace all go ahead and use
94:26 - rename symbol
94:29 - one of the big reasons why vs code has
94:32 - grown in such popularity so quickly is
94:35 - its extension Marketplace
94:37 - the extension Marketplace allows us to
94:39 - customize vs code to however we as
94:42 - individuals code and it helps us become
94:44 - more productive for our specific use
94:47 - cases
94:48 - I want to talk quickly about a little
94:50 - bit of how the extensions work and a
94:52 - little bit of what we can do with the
94:54 - extensions I know we touched on this a
94:56 - little bit in the videos earlier vs code
94:58 - has done a great job at making
95:00 - extensions easy to use
95:02 - here we have the extension Marketplace
95:04 - we can scroll down see what's trending
95:06 - we can see the most popular extensions
95:09 - here python C eslint prettier which
95:12 - we'll talk about later live server which
95:14 - we'll talk about later in the course
95:16 - all of these great extensions we can add
95:18 - to our own vs code
95:20 - we can add them through the website
95:22 - right here
95:23 - marketplace.visualstudio.com and we can
95:25 - click install which actually just opens
95:28 - up vs code you can say open vs code
95:30 - right there
95:32 - I'll click cancel I usually don't really
95:34 - search in the marketplace myself I go
95:36 - straight to vs code itself
95:38 - to the extensions tab right here in the
95:41 - sidebar and that is command shift X to
95:43 - open that up
95:45 - so far we have these one two three four
95:47 - extensions installed here are some
95:50 - recommended extensions that we can also
95:52 - install we'll talk a lot more about
95:53 - extensions later in this course
95:55 - but really what I want to do is just
95:57 - show off that you can search for things
95:58 - like prettier
96:00 - once we click install right here you can
96:03 - see the extension install you can see it
96:05 - over here it'll open up the docs and all
96:07 - that good stuff that you can read
96:08 - through down here
96:12 - definitely read through each of the docs
96:13 - for each extension that you're looking
96:15 - to install
96:17 - I can close that go into my extensions
96:19 - if I needed to uninstall this
96:22 - let's say I didn't have that typed in
96:24 - and we had all of our installed
96:26 - extensions right here you can see this
96:27 - drop down right here we have five
96:28 - installed I can go down to prettier
96:31 - click the settings thing right here and
96:34 - click uninstall
96:36 - that'll say reload required so we'll go
96:38 - ahead and reload it
96:41 - so that's installing and uninstalling
96:44 - extensions
96:45 - another thing we can do is say we have a
96:48 - project here this is getting started
96:49 - with JavaScript so if we had a python
96:52 - extension installed
96:54 - and let's go ahead and install this one
96:56 - always be sure to read the number of
96:58 - downloads it has it's important to know
97:00 - if it's the popular one you're looking
97:02 - for or if it's
97:04 - name the same but not the popular one
97:06 - I'll click install there
97:12 - installing go ahead do your thing and
97:14 - then once that installs I can go and
97:16 - close this out
97:18 - so let's say we are in this JavaScript
97:20 - project and we have this python
97:22 - extension installed in this pylance one
97:23 - also we don't want these python
97:26 - extensions working in this JavaScript
97:28 - project
97:29 - rule of thumb the more extensions that
97:31 - we have the slower vs code is going to
97:33 - get
97:34 - now vs code is very good at staying
97:37 - performant but it's always good to say
97:39 - let's not install any extensions that we
97:42 - don't need for a project
97:44 - instead of uninstalling these we can
97:46 - actually just go to this settings right
97:48 - here and say disable for the workspace
97:50 - or disable across all of our projects
97:53 - for this workspace this instance of vs
97:56 - code will say this is a JavaScript we
97:58 - don't need python so we'll disable that
98:00 - and notice it disabled one and two
98:02 - does Jupiter one I don't know where that
98:04 - came from it seems like the python one
98:06 - installed it let's disable that one as
98:08 - well
98:10 - and now this vs code workspace for this
98:13 - JavaScript project does not have any
98:15 - python extensions enabled
98:21 - the next thing I want to talk about is
98:22 - something really fun if I go into my
98:25 - Explorer right here let's say I am
98:27 - working on this project and I have a
98:30 - couple other people working on this
98:31 - project as well
98:33 - to get it synced up I want everybody to
98:36 - have the certain extensions that I'm
98:38 - using maybe I want them to have prettier
98:40 - so they can Auto format their code so we
98:42 - are all on the same page
98:44 - you can actually tell vs code to
98:46 - recommend extensions to anybody working
98:48 - in the same project now this is a really
98:51 - cool feature you can do command shift p
98:54 - to open up the command palette right
98:56 - there and say recommended extensions
99:00 - so this will configure the recommended
99:02 - extensions I'll click that
99:05 - and now vs code has opened up a DOT vs
99:08 - code folder with a new extensions.json
99:11 - file
99:12 - and let me see if I can zoom in a little
99:14 - bit it's a little small there
99:18 - and to add to this we have to go over
99:20 - here to this recommendations array and
99:22 - start adding here
99:25 - so the way to do that is if I go into
99:27 - extensions and let's say I wanted
99:28 - prettier
99:31 - you would click on prettier itself
99:35 - and I'm going to close the sidebar with
99:36 - command B and this is what you want
99:39 - right here espnp dot prettier Dash vs
99:42 - code so I'll copy that
99:45 - go into
99:46 - extensions.json and recommended right
99:49 - there
99:52 - now that this is in the recommendations
99:55 - in this
99:56 - extensions.json file I can close this
99:59 - whole project and let's say we give this
100:01 - project to somebody else let's say they
100:03 - git clone it they download it whatever
100:05 - they do and they bring it into their vs
100:08 - code so I'll reopen vs code
100:10 - and let's make sure this folder is
100:12 - opened I might have to reopen it
100:15 - so I can click open folder here or I can
100:17 - just drag and drop it in
100:20 - and now once it's open on another
100:22 - person's computer and vs code says oh
100:24 - there's this recommendations it'll do
100:26 - this pop-up down here and says do you
100:28 - want to install the recommended
100:29 - extensions for this repo so this is
100:32 - really great for when you're working on
100:34 - projects with a big team or even just a
100:36 - small team right you can show
100:38 - recommendations or you can click install
100:41 - I'll click install there and it
100:43 - automatically goes ahead and installs it
100:45 - and you'll see that it went to the
100:46 - extension sidebar panel here and it did
100:49 - the at recommended
100:51 - so workspace recommendations are right
100:54 - there other recommendations uh we don't
100:57 - need those but it's really good to see
100:59 - that just with this one file we can say
101:02 - that all the people on our team are
101:04 - going to be on the same vs code page
101:08 - that's it for extensions we've installed
101:10 - uninstalled checked out the extension
101:12 - Marketplace we have been able to disable
101:16 - per workspace and we're able to
101:19 - recommend our friends and other coders
101:21 - the extensions that we want them to use
101:24 - the next feature I want to talk about
101:26 - which is essential to using vs code
101:28 - especially when you have multiple
101:30 - computers is settings sync we've already
101:34 - changed a few settings we've already
101:36 - changed a few extensions here in our vs
101:39 - code setup
101:40 - we don't really want to redo this when
101:42 - we go over to another computer that we
101:44 - own right maybe we have a work computer
101:46 - and we also have a personal computer
101:49 - vs codes solve this problem for us we
101:52 - just go into this little icon down here
101:53 - with this person face we click here and
101:56 - go sign in to sync settings
101:59 - you have the option of Microsoft or
102:01 - GitHub will go sign in with GitHub
102:04 - that'll open us up here all you have to
102:06 - do is Click continue after you've logged
102:08 - in with GitHub now it'll say hey vs code
102:11 - wants to open this link can we do that
102:14 - yep we'll say allow this extension to
102:16 - open this URI yes go ahead and with that
102:19 - anytime we sign into vs code across any
102:22 - different computer we are going to have
102:24 - our settings and extensions synced all
102:26 - the way across in this video we'll be
102:29 - talking about one of the most often used
102:32 - features of vs code but sometimes I see
102:35 - people that just don't take advantage of
102:37 - them so I want you to be aware that
102:39 - Snippets are a big part of vs code's
102:42 - workflows
102:43 - here I'll open up a new file and you can
102:46 - do this by clicking command n
102:49 - or you can also if I close that with
102:52 - command W just double click right here
102:54 - and it'll open up a new file
102:56 - Snippets are really useful because it
102:58 - basically just takes a ton of code that
103:00 - you have to write often and shortens it
103:03 - down to a couple characters so that it
103:05 - expands whatever you're typing for
103:07 - instance if we were in a Javascript file
103:09 - and I went down here and to the status
103:12 - bar and clicked select language mode you
103:15 - can click JavaScript right here
103:18 - and I type in a for Loop and I can type
103:20 - 4 you can see that intellisense came in
103:22 - and said hey maybe you want these things
103:24 - and you can click this four right here
103:26 - for the for Loop and look at this it
103:28 - made a giant for Loop of stuff that I
103:31 - usually had to write by hand but now it
103:33 - just does it for me and I can actually
103:34 - type and say let index that makes sense
103:38 - and I'll press tab
103:40 - and now that goes over to the next thing
103:42 - and I can say items and that will be
103:45 - enough to take that over and I can
103:47 - change this to item
103:49 - so all in all a snippet was able to help
103:52 - us write all of this code just by typing
103:54 - in four
103:55 - fo clicking down a couple times and then
103:59 - pressing enter
104:01 - another way that you can activate a
104:03 - snippet using intellisense is fo and
104:05 - just press Tab and that will auto
104:07 - complete whatever is highlighted and
104:10 - again fo click down a couple times and
104:13 - then do Tab and now we have a different
104:15 - sort of for Loop
104:17 - so Snippets are very powerful and
104:20 - especially when they are shown To Us by
104:21 - intellisense
104:23 - so let me delete all of this the other
104:25 - ways we can activate a snippet is if I
104:27 - did command shift p with the command
104:30 - palette and did snippet I can do insert
104:32 - snippet click that and now you can do
104:35 - your search in here so there's the for
104:37 - Loop there are some other things like
104:39 - this do while we can scroll down and see
104:41 - all the other things let's do a
104:45 - set interval
104:48 - so I did the set interval and let's say
104:50 - we want it at 1000 milliseconds I can
104:53 - press tab which are called tab stops in
104:55 - Snippets
104:56 - and now I can write all of my code here
105:00 - the cool thing about Snippets is that
105:03 - they have those tab stops where it says
105:05 - hey here's some code that you may want
105:06 - to write but also if you press tab here
105:09 - are the relevant places you probably
105:11 - want to customize for yourself
105:15 - I highly recommend command shift p to
105:17 - open up the command palette insert
105:19 - snippet right there
105:22 - click enter and just scroll down and see
105:24 - what is built into vs code there's a lot
105:26 - in there
105:28 - but what also is cool is that extensions
105:31 - are able to extend how many Snippets we
105:34 - have
105:35 - so if I go into my extensions panel
105:37 - right here and I do at category and let
105:40 - me actually just type this in from
105:41 - scratch at
105:43 - and if you just type in at Snippets
105:46 - you'll see this autocomplete bin
105:47 - category Snippets and I can click that
105:50 - and you'll notice there are some
105:52 - extensions that have Snippets so these
105:55 - are just larger language style packages
105:58 - that also have Snippets there are some
106:00 - packages sorry extensions that do have
106:03 - just Snippets so here's the es6 code
106:06 - Snippets one I can click that
106:08 - it'll open it up and if I scroll down
106:10 - you should be able to see these Snippets
106:12 - that are in this package it tells you
106:14 - what languages it will open Snippets in
106:17 - I can scroll down imp does this nice
106:20 - import which is really helpful IMD does
106:23 - it when it's destructured of an import
106:25 - so we're going to talk about this more
106:28 - in the JavaScript workflows video but
106:31 - here I'm just going to go ahead and
106:32 - install it and enable it
106:36 - that's great so there's our QR for
106:39 - require and all of these good Snippets
106:42 - to add to ourselves
106:44 - now the thing about this is that it can
106:46 - be really hard to remember which snippet
106:48 - that you want
106:49 - so I would say read through the docs get
106:52 - familiar with the ones that you think
106:53 - you'll use the most for me imp for sure
106:56 - Takes the Cake for imports
106:58 - we have IMD
107:00 - for import destructoring and I can type
107:02 - that into say react and I can do like
107:04 - use State like that
107:06 - and I press tab to jump between the two
107:08 - areas from this right side to this left
107:10 - side
107:12 - and if you don't know what snippet you
107:14 - need you can do command shift p insert
107:17 - snippet and just do import
107:20 - and notice how this autocomplete stuff
107:22 - is going to help you out with the ones
107:23 - that you want I didn't even know IMA
107:25 - exists what is that oh import as Alias
107:28 - gotcha
107:29 - so I can say react use State I probably
107:32 - wouldn't use it in this case but
107:34 - go state
107:38 - command palette is a really good friend
107:40 - to this for Snippets so that's how we
107:43 - can do that
107:45 - the last part of this video is I want to
107:47 - teach you how to build your own custom
107:48 - Snippets this is really helpful there's
107:51 - a couple different things that you could
107:52 - need for yourself that maybe are not in
107:55 - certain specific snippet packages
108:00 - so for us to start a new snippet I'll do
108:03 - command shift p and do Snippets
108:07 - and you can see here preferences
108:09 - configure user Snippets so we'll press
108:12 - that right there
108:13 - and now this can be a new Global
108:15 - Snippets file you can say a file
108:18 - specific to a language like JavaScript
108:21 - typescript or typescript react whatever
108:23 - you need I'm going to go and say Global
108:25 - Snippets file so this will activate in
108:27 - pretty much all of the files we have
108:31 - and I'll just name this Chris Snippets I
108:34 - guess
108:37 - all right so place your Global Snippets
108:39 - here
108:41 - each snippet is defined under a snippet
108:43 - name and has a scope prefix body so this
108:45 - is a good example for the snippet that
108:48 - you can use so I'll actually copy this
108:50 - right here
108:51 - and actually I'll uncomment this out
108:53 - because it's already in this big object
108:55 - that we need so command forward slash
108:57 - will uncomment
108:59 - and I'll delete that right there
109:02 - so this is print to console scope is
109:04 - Javascript or typescript prefix prefix
109:07 - is the trigger word that you're going to
109:09 - use so here is log
109:11 - you're going to write out the word log
109:13 - and then the body is going to be
109:16 - console.log and then dollar sign 2 is
109:19 - where you're going to tab stop over to
109:21 - and you get a description so let's run
109:23 - through what this means prefix is what
109:25 - we're going to type body is what's going
109:27 - to get inserted and then the tab stops
109:29 - where we're going to fill in information
109:31 - is this dollar sign one and dollar sign
109:33 - 2. and the way you can do multiple lines
109:36 - is you do an array like that so let's go
109:38 - check this out in our application we
109:41 - have a Javascript file here if I go here
109:43 - and type in log you can see print to
109:46 - console and that's the one we just
109:48 - created so I'll click that you see hi
109:50 - there I am typing at first position
109:55 - and then if I press tab here it'll jump
109:57 - over to dollar sign two and I can keep
110:01 - on my Merry way and command forward
110:04 - slash to comment that out
110:06 - so if I go back over here printer
110:08 - console is what's going to show in the
110:10 - description
110:13 - scope is here prefix is here body is
110:15 - what gets inserted and description if I
110:17 - go over here command shift p insert
110:20 - snippet log
110:22 - log output to console so this is the
110:25 - description that shows but when you're
110:27 - in the file itself it shows the actual
110:29 - name of the snippet
110:36 - we can also add a default value for this
110:39 - if I remove these strings right here
110:42 - and I did a bracket around the one like
110:45 - this and I did my object and I can do
110:48 - the same for this too
110:51 - and say
110:53 - right
110:54 - more
110:56 - so now anything inside of this brackets
110:58 - on the right side of this colon will be
111:01 - the default value so let's say I go over
111:03 - here to our Javascript file I type in
111:05 - log
111:06 - print to console now my object I can say
111:09 - whatever my object is that I'm console
111:12 - logging maybe it's data press Tab and
111:14 - then I can keep on my Merry way
111:17 - so that's how we can add default values
111:19 - to Snippets
111:21 - Snippets are really really powerful
111:23 - writing your own is very helpful you
111:26 - might not need to though because of the
111:28 - great extensions in the extension
111:30 - Marketplace
111:31 - I guess the hardest part about using
111:32 - Snippets is knowing which Snippets exist
111:35 - so that does take a little bit of work
111:37 - up front to go read out the docs and
111:40 - make sure you do command shift p insert
111:42 - snippet and kind of read through
111:44 - everything in there
111:47 - this next feature I want to talk about
111:49 - is something I love absolutely love
111:52 - working with and I use it on a daily
111:54 - basis it's called Emmett now that might
111:57 - sound like a weird name for a tool but
111:59 - Emmett is a very cool tool to let us
112:02 - write better HTML and CSS even faster
112:05 - than we ever thought possible
112:07 - so Emmett I'm on Emmett's website the
112:10 - cool thing about Emmett is that it's
112:11 - available in many editors so it's in vs
112:14 - code you can even use it inside of a
112:17 - code pen so here I am inside of a code
112:20 - pen and if I look at the emit cheat
112:23 - sheet so if you want to get good at
112:24 - Emmett definitely check out the cheat
112:26 - sheet it helps us do all of the fancy
112:29 - emit things
112:30 - let me go here into codepen and I'll
112:33 - demonstrate here and then we'll go into
112:34 - vs code and we'll demonstrate there
112:37 - if I wanted to write some HTML I would
112:40 - say div Let's do an H2 and say hi there
112:44 - H2 there P tag and say let's get started
112:50 - a button Maybe
112:53 - go now
112:56 - and we'll close that div
112:58 - so that's the hero image or a hero
113:01 - section to a website let's talk about
113:03 - how we can do the same thing with Emmett
113:07 - and this follows closely along with the
113:09 - Snippets video that came before this
113:11 - it's basically writing a ton of Code by
113:14 - writing less
113:16 - to do that I'm going to say div
113:18 - and then do this Arrow so that's saying
113:20 - inside of this div there's going to be
113:22 - an H2 and the text in the H2 is going to
113:25 - say hi there
113:27 - and then next to the H2 I'm going to
113:28 - have a P tag and it's going to say let's
113:30 - get started
113:32 - and then next to that I'll have a button
113:33 - and it's going to say go now
113:36 - and all I have to do now is press Tab
113:38 - and that will auto complete all of that
113:40 - thanks to Emmett and you got that nice
113:42 - kind of preview inside of codepen
113:46 - and that's Emmett the other cool things
113:48 - we can do with Emit and I know I'm
113:49 - working in vs code but this is a code
113:52 - pin the syntax is the exact same from
113:55 - code bin to vs code
113:58 - so you can actually type all of this
113:59 - that I'm typing in vs code
114:01 - I can do like a UL inside of that An Li
114:04 - we can say times five of those and now
114:07 - there's five list items inside of those
114:09 - in a tag
114:10 - and inside of those say text
114:15 - there we go right there in addition to
114:18 - that we can do classes and IDs you can
114:20 - say div and say hero and then inside of
114:24 - that hero I'm going to have a list of P
114:28 - tags so let's say p
114:29 - and say item
114:32 - and inside of that I am a
114:36 - paragraph
114:38 - but what's cool about Emmett is we can
114:40 - actually do a little bit more we can say
114:41 - I am paragraph number and put a dollar
114:43 - sign there and then we'll say times 10
114:46 - and notice how you have 10 paragraphs
114:48 - one two three four five all the way down
114:50 - and you can even put the dollar sign on
114:52 - the class name itself
114:55 - and press Tab and that will autocomplete
114:57 - all of that there
114:59 - so Emmett is a fantastic tool you can
115:01 - use this to write react code HTML view
115:04 - code whatever you're doing and there's a
115:07 - handy dandy cheat sheet that I'm going
115:09 - to put a link to down in the description
115:10 - below
115:12 - and I don't want to spend too much time
115:13 - on Emmett here in this course because
115:16 - it's such a big topic I actually love
115:18 - Emmett so much that I went ahead and
115:20 - made a free Emmett course called faster
115:23 - with Emmett and you can find that at
115:25 - faster with emmett.com
115:27 - completely free teaches you all the
115:29 - fancy things about Emmett and you can
115:31 - see how to use Emmett with HTML react
115:33 - View and even CSS
115:45 - so if we go back into vs code we open up
115:48 - a new file it won't really work in a
115:50 - markdown file we can say div
115:52 - hello doesn't really work right we would
115:55 - have to say click this right here and
115:57 - let's go into an HTML file
116:00 - and I can delete that now and I can say
116:02 - div
116:03 - dot HTML and see this abbreviation is
116:06 - already started if I click this drop
116:08 - down it'll show the abbreviation right
116:10 - there
116:11 - and that will actually be like an H2
116:15 - header
116:16 - and the text is going to be whoa
116:19 - and then plus a P tag and we'll call
116:23 - that
116:25 - content
116:27 - and inside of that I'll say imv content
116:30 - so a little bit different of a UI than
116:33 - codepen had but we get the preview here
116:36 - just the same we are able to press Tab
116:38 - and see all of our code get written out
116:40 - thanks to Emmett inside of vs code
116:47 - definitely keep in mind Emmett and
116:50 - Snippets but really all all of these
116:52 - features are going to hook into the vs
116:55 - code's intellisense features all of that
116:57 - was intellisense
116:59 - and notice how intellisense is able to
117:01 - hint at all of these things for us so
117:03 - intellisense is just showing its value
117:06 - over and over again in this course
117:10 - this essential feature is a small one
117:13 - and you might not need it so maybe I
117:16 - shouldn't have called it an essential
117:17 - feature but I use it often so I think
117:20 - it's worth knowing that vs code actually
117:23 - has a command line interface it has a
117:26 - CLI
117:27 - so this is actually really useful when
117:29 - you're moving around a couple different
117:31 - projects and you use your terminal a lot
117:33 - and I'm not talking about the terminal
117:35 - that's built into vs code just yet but
117:37 - we will talk about that later in the
117:39 - workflows videos
117:41 - the one built into vs code lives right
117:43 - here with control tilde and it's in the
117:46 - panels down here I can close that but if
117:49 - you're working in something like item or
117:51 - terminal or Powershell whatever you have
117:55 - there is a way to add some vs code
117:57 - functionality to your terminal
118:01 - so let's say I have a couple different
118:04 - projects here I have the spacebar app I
118:06 - have the better Dev site I have the
118:08 - getting started with JavaScript folder I
118:10 - have all of these different folders in
118:12 - here how do I go ahead and open them up
118:14 - in vs code
118:15 - well as we've seen there are a couple
118:17 - different ways we could go down here
118:19 - open vs code do command o and open
118:22 - different folders
118:24 - another cool way is we can skip a step
118:27 - or we go open vs code and then open a
118:29 - folder in there we can go in here and
118:31 - say code spacebar
118:34 - so this code CLI tool right here this
118:37 - command
118:38 - will let us open whatever folder we
118:40 - wanted to open which in this case is
118:42 - spacebar I'll click enter
118:44 - and now vs code opens up with that
118:47 - folder
118:48 - and everything in the Explorer right
118:50 - there and you can see the install it
118:52 - recommended extensions that we've seen
118:54 - before but all of that stuff is there
118:57 - so how do we get this cool tool for the
119:00 - code and then we can open up whatever
119:01 - project we have if we go into vs code
119:04 - command shift p this is how we install
119:07 - the code CLI tools
119:09 - we're going to type install code command
119:13 - in path
119:14 - and what this does is it actually
119:15 - installs the CLI tools
119:19 - code successfully installed in path and
119:21 - definitely look through the docs I'm
119:23 - going to add a link to the docs down
119:24 - below just to make sure that you get
119:26 - your installation correct
119:28 - and if you go back to your terminal here
119:30 - and you may have to close and reopen if
119:33 - you added a new tool to your path I
119:35 - already have it installed so I'll go
119:37 - here and say code dash dash help
119:41 - and I'm a little zoomed in for this
119:42 - video but you can see the different
119:43 - options that we have but now you can use
119:46 - the word code
119:48 - to open up whatever folder you wanted
119:50 - the better Dev website and I'll press
119:52 - tab to auto complete that press enter
119:55 - and that opens it up in vs code
119:58 - so not an essential tool but very
120:00 - helpful especially if you work in the
120:02 - command line a lot
120:08 - definitely give it an install by going
120:11 - into your command palette and doing
120:12 - install command to path
120:17 - we are going to start the HTML and CSS
120:20 - workflow with a couple features and a
120:22 - couple settings
120:23 - let's talk about the built-in features
120:25 - of vs code
120:27 - there are the emit feature that we're
120:31 - going to talk about which we have talked
120:33 - about I just think it's so important
120:34 - when working with HTML in vs code that I
120:37 - want to talk on some of my favorite
120:39 - features here
120:40 - we're going to talk about code folding
120:42 - which is very helpful when you have
120:44 - really large files and when you need
120:45 - organization help
120:47 - we're going to talk about the built-in
120:48 - Color Picker which is a nice convenience
120:52 - and we'll talk about CSS class
120:53 - definition hovers
120:55 - those are the four features that are
120:57 - built into vs code that I really like to
120:59 - point out
121:00 - and the settings that I like to change
121:02 - out for vs code HTML and CSS are Auto
121:05 - closing tags these are an interesting
121:08 - thing that some people have specific
121:11 - preferences for so I want to point them
121:13 - out
121:14 - linked editing
121:16 - wrap attributes as well
121:20 - those are the things we're going to do
121:22 - in this video as far as features and
121:23 - settings goes and the next video we will
121:26 - handle extensions
121:27 - let's get right into it
121:29 - we have vs code right here I'm going to
121:32 - open up a brand new file with command n
121:35 - and as we said it before our default
121:38 - language is markdown but I want to work
121:40 - with some HTML so down here in the
121:42 - status bar I can click that and type in
121:44 - HTML
121:46 - or I can do command shift p language
121:48 - mode and I'll change language mode to
121:51 - HTML
121:54 - and now that we're in HTML Emmett can
121:56 - take over and say okay now it is my turn
121:58 - to give you Auto completion for whatever
122:01 - you want to type in here
122:03 - for Emmett to start a brand new document
122:05 - you can do HTML colon 5 which is the
122:08 - emit abbreviation you see here that
122:10 - gives you a whole doctype HTML head body
122:13 - and then we start typing here
122:16 - if I press tab here it'll go ahead and
122:19 - auto complete all that stuff or a really
122:21 - fun one if you're starting a new HTML
122:24 - file with Emmett is just press
122:25 - exclamation mark and that's the same
122:27 - exact thing gives you the brand new HTML
122:29 - file
122:32 - I'll go down here and let's do a div
122:34 - inside of that let's do an H2 plus a P
122:37 - tag
122:38 - and I'll press tab there
122:41 - and we'll say title goes here
122:44 - actually we can be smarter about this
122:46 - let's actually write something out via's
122:48 - code is awesome
122:51 - and then down here in the P tag this is
122:55 - really cool stuff to make us productive
122:59 - one of the first features I like to
123:01 - point out about Emmett is that if you
123:03 - have a large HTML file if I click into
123:05 - one of these divs
123:07 - maybe the opening div or the closing div
123:09 - you can do command shift p to open up
123:11 - the command palette you can say matching
123:13 - pair
123:15 - and it'll actually go to the ending div
123:17 - right there and this works for the H2 as
123:19 - well let's go to this end of H2 I'll do
123:21 - the same thing go to matching pair
123:26 - and it goes to the start of it so if you
123:28 - are having trouble finding where all of
123:30 - your opening and closing tags are use
123:33 - that matching pair
123:35 - another really good one is let's say I
123:38 - wanted to wrap all this in a header tag
123:40 - so if I did this I would have to go
123:42 - header right here go down a couple times
123:44 - and add in a header right there
123:48 - but vs code and Emmett give us a
123:51 - stronger way to do this if I highlight
123:53 - all of this right here you can do
123:55 - command shift p wrap with abbreviation
123:59 - I can type in header I can even add a
124:02 - class called site Dash header
124:04 - and I'll press enter and that will add
124:06 - it and wrap everything I just
124:08 - highlighted with that
124:12 - what's even cooler about this is I had
124:15 - to manually highlight right there if I
124:18 - didn't want to do that there is a
124:19 - feature called balance outward with
124:22 - Emmett where I could do command shift p
124:24 - if I'm inside of this we can say outward
124:28 - and that will emit balance outward and
124:30 - it will highlight everything and if I
124:32 - did it again command shift p and notice
124:34 - recently used is at the very top I can
124:37 - press enter again it just keeps
124:38 - highlighting up and up the chain
124:42 - this is cool if I start even in this P
124:44 - tag I try balance outward it'll do that
124:46 - one more time it'll get the P tags one
124:49 - more time it'll get everything inside
124:50 - the divs
124:52 - divs header header
124:56 - and then we can even do the wrap with
124:58 - abbreviation there and maybe wrap this
125:01 - in a main tag or another div and give it
125:04 - like a container class
125:08 - there we go
125:10 - so those are really fun and useful emit
125:13 - features right there
125:15 - next up let's talk about code folding
125:18 - code folding is built right into vs code
125:20 - really helpful when you have large HTML
125:22 - files over here on the left you can see
125:25 - these arrows if you click them it will
125:27 - fold that specific div if you click that
125:30 - it'll fold that
125:32 - so a really fun visual feature to help
125:34 - you organize and maybe work on certain
125:37 - sections of your code
125:39 - another way to activate this is if I'm
125:42 - on this div I can do option command
125:45 - and the opening bracket
125:47 - to collapse it and the closing bracket
125:50 - to open it back up and if I keep doing
125:52 - this it'll just keep going up the chain
125:56 - and if I go down here and expand that
125:58 - out
125:59 - I could do that with the arrows as well
126:02 - so a feature to keep in mind with vs
126:03 - code is code folding
126:07 - next up really fun feature of vs code
126:10 - really helpful for when you're working
126:12 - with CSS is if I had a style here and
126:16 - let's give it a background color and
126:18 - notice intellisense is working thanks to
126:20 - vs code here I'll do background color
126:23 - we get even more intellisense and color
126:26 - choices right here but I'm going to go
126:27 - with hashtag cuckoo it's my default go
126:30 - to uh random hex color
126:34 - so we get a Color Picker here we can see
126:35 - the color and if you hover it you can
126:38 - actually go through and pick a new color
126:40 - and it'll insert the hex value
126:42 - right there
126:44 - so that works in inline Styles if you go
126:46 - up to the head of your document create a
126:48 - style right here and I'll use emit to
126:50 - create the style tag I can do container
126:53 - background
126:55 - color
126:56 - and let's do that right there
126:59 - it also works within style tags it also
127:01 - works within CSS files you can hover and
127:04 - get your nice Color Picker
127:06 - the next feature I want to talk about is
127:09 - the CSS class definition hovers if I
127:11 - hover over this right here it shows you
127:14 - the specificity it says element is class
127:16 - is container right there
127:18 - this is helpful if you have a couple
127:20 - nested CSS classes maybe you're using
127:23 - SAS or less if I had this Main and
127:26 - container and now I hover this the rule
127:29 - is actually saying oh you're going to
127:30 - have a main element here and then down
127:33 - below inside of that nested under main
127:36 - you're going to have this class of
127:37 - container
127:38 - so this works
127:40 - for many
127:43 - classes and I know you probably wouldn't
127:45 - want to have this spinning nested
127:46 - classes
127:48 - but it does it anyway and it shows you
127:50 - what that hierarchy looks like
127:54 - a little helpful feature when you're
127:55 - working with CSS
127:59 - next up let's talk about the three
128:01 - settings that we had that we lined up
128:03 - earlier
128:04 - we are going to talk about Auto closing
128:06 - tags
128:07 - let's say over here if I go ahead and
128:09 - type in the div here and I close that
128:12 - div
128:12 - vs code will say okay you wanted the
128:14 - closing div right there I'll close it
128:16 - for you
128:19 - this isn't my personal preferred
128:21 - Behavior I know a lot of people like
128:22 - this I personally don't I personally
128:25 - prefer to
128:26 - type in the closing bracket and then it
128:30 - auto completes it if I do the Open
128:32 - Bracket and then forward slash then it
128:34 - auto closes it that kind of signifies to
128:35 - me that I am asking for the closing tag
128:39 - so if you don't like Auto closing tags
128:41 - that are built into vs code go into
128:43 - settings Auto closing tags right there
128:47 - and you can disable it for HTML and
128:49 - JavaScript and typescript
128:53 - again personal preference I don't really
128:56 - like it I
128:58 - I personally prefer when it does the
129:01 - autocomplete intellisense kind of helper
129:03 - right there and it says hey is this what
129:05 - you wanted and then you can go in here
129:06 - and press enter and it'll do it for you
129:12 - the next setting to talk about is auto
129:14 - updating tags
129:16 - if I go up here to this header tag and I
129:18 - said oh I actually just want that to be
129:19 - a normal div I would have to go find the
129:22 - closing tag that corresponds to it and
129:24 - say div
129:26 - vs code has a setting where both of
129:28 - these can link so if you change one the
129:30 - other changes
129:32 - I'll go into settings and say linked
129:33 - editing
129:35 - we'll turn that on
129:37 - and now if I go into my HTML file notice
129:41 - how it's highlighted I can do command D
129:43 - to select it and say header
129:46 - and it updates both this and the closing
129:49 - tag
129:52 - the final setting we are going to talk
129:54 - about is wrapping attributes
129:56 - so if I go here and I say command shift
129:59 - p and I format this document
130:01 - you'll notice that a lot of it gets
130:04 - formatted but I want to talk about
130:06 - elements where they have a lot of
130:08 - properties on them so if I go here I
130:11 - create an a tag
130:13 - let's have href let's have a class is
130:15 - going to be a couple different things
130:16 - High I am looking forward to
130:21 - learning more vs code and I'm just
130:24 - trying to get a super long class here
130:27 - let's go ahead here and add a title as
130:30 - well
130:31 - here we go title is my link and then
130:35 - down here go
130:37 - and
130:39 - learn more
130:42 - so I'll go ahead and format this format
130:45 - document
130:46 - and notice how it keeps everything on
130:47 - one line
130:49 - I personally prefer my formatting to
130:52 - break these properties onto multiple
130:54 - different lines we can go into settings
130:56 - and say wrap attributes
131:01 - HTML format wrap attributes is set to
131:04 - auto you can go ahead and change that to
131:06 - force
131:08 - so I go over here and I'll do format
131:10 - again command shift p format
131:13 - and notice how it brought href class and
131:15 - title down to their own lines
131:18 - all right that's a little bit better but
131:19 - we can do maybe better than this on our
131:22 - formatting
131:23 - we'll be talking a lot more on auto
131:25 - formatting Auto saving and how we can
131:27 - get formatting to be a really big part
131:30 - of our productive workflow in the auto
131:32 - format workflow videos
131:36 - all right that's going to wrap it up for
131:38 - HTML CSS features and settings next up
131:41 - is extensions
131:44 - we have talked about workflow and
131:46 - features and settings let's start
131:48 - talking about extensions for HTML and
131:50 - CSS
131:54 - the extensions we are going to talk
131:56 - about in this video are color highlight
131:59 - CSS Peak HTML and tag labels
132:03 - code spell check and HTML CSS support so
132:07 - these are the ones I think are pretty
132:09 - close to essential for HTML and CSS
132:11 - development they all make HTML and CSS
132:14 - development pretty quick
132:16 - the first one here is we get this nice
132:18 - little icon for the color right there
132:20 - and we get this Color Picker we can
132:22 - extend this a little bit further I'm
132:24 - going to open up extensions with command
132:25 - shift X
132:28 - let's search for color highlight
132:32 - and what this does is it highlights web
132:34 - colors in your editor so I can install
132:36 - this
132:38 - and enable it right there
132:41 - let's go back to our HTML file and now
132:43 - we get even more of a color show on this
132:46 - file if I scroll down you should see
132:47 - that cuckoo one is down there as well
132:49 - well not cuckoo anymore
132:52 - there we go
132:54 - so color highlight is a nice one to have
132:56 - let's make this section A little bit
132:58 - more robust let's say we have an
133:01 - external style sheet because usually we
133:03 - will have an external style sheet when
133:05 - we're working with CSS right we're not
133:07 - going to do inline Styles or have a
133:09 - style tag in our file
133:11 - so let's take this call out I'm going to
133:13 - cut that out right here and I'm going to
133:15 - delete that and I'm going to put all of
133:18 - this into a brand new file I'm going to
133:20 - go into command shift p new file
133:24 - I'm going to do it from the workspace
133:26 - root which is just the forward slash
133:28 - there and we're going to say style.css
133:32 - and we'll paste that in there
133:34 - save that with command s
133:37 - now notice this created a brand new file
133:39 - if I wanted to check I could do command
133:40 - shift e to open up the Explorer
133:45 - and I'll do command B to close the
133:47 - sidebar again
133:48 - if we go back to index.html let's make
133:51 - sure that we link this so I'm going to
133:52 - press link which is an abbreviation and
133:56 - we'll do colon CSS
133:58 - and you can see what Emmett is going to
133:59 - give us Rel style sheet hrefstyle.css
134:02 - perfect
134:03 - I'll press enter
134:05 - and that is exactly what we needed
134:08 - vs code even knows how to link it so if
134:10 - you did option click you could follow
134:12 - this to open up that file
134:15 - I'll go back into our HTML file
134:18 - if we scroll down here there's something
134:20 - that's bothering me though if I right
134:21 - click this and say go to definition it
134:24 - says no definition found for this call
134:26 - out function class and you might be
134:29 - thinking well vs code should be smart
134:30 - enough to know that right
134:33 - what we can do is add an extension to
134:36 - add in this feature and this one we're
134:38 - going to add is called CSS Peak to open
134:41 - up our extensions I'll do CSS Peak
134:45 - you can install this and what it does is
134:47 - it allows peaking and go to definition
134:49 - for IDs and class strings
134:54 - so if I go back here it should know if I
134:57 - right click this and say go to
134:58 - definition it'll open up the style.css
135:01 - file it knows where it's defined and it
135:03 - can take us there
135:05 - if we go back to the HTML file if I
135:07 - hover over it and say right click Peak
135:10 - Peak definition
135:12 - it now shows right underneath this
135:15 - callout so we haven't left the HTML file
135:17 - it shows hey this is the definition of
135:20 - this call out and I can actually change
135:22 - this to 20 and press save in there and
135:25 - it saves over here
135:27 - so if I close that go back to style.css
135:30 - check it out 20 pixels is right there
135:34 - so CSS Peak is really helpful at knowing
135:36 - the classes that are in your project
135:41 - the next extension is going to be a HTML
135:45 - extension so if I go to my index.html if
135:49 - I had a large HTML file there can be a
135:52 - lot of divs inside of a large HTML file
135:54 - so let's say div times 10 and I'll press
135:56 - tab to auto complete that let's say we
135:59 - have a bunch of divs and we weren't
136:00 - really sure where everything ended there
136:03 - could be a lot of content in all of
136:05 - these there's a really handy extension
136:07 - that we can use that actually tells us
136:09 - which div ends where so if I did command
136:12 - shift X to open up our extensions panel
136:15 - right there I'll say HTML and tag labels
136:21 - now if we install this right here
136:24 - and we go back to our HTML file
136:28 - nothing really shows just yet because
136:30 - everything is pretty easy to read so
136:33 - once we actually click here let's say we
136:35 - enter into this call out I'll command
136:37 - click to get multi-cursor and I'll press
136:39 - enter a bunch of times once we get off
136:41 - screen and you can know that the parent
136:43 - to this isn't anywhere close to it that
136:46 - extension actually says hey this ends
136:48 - the call out class div right here
136:52 - really helpful when you get really large
136:54 - files for HTML you just want to know
136:56 - what each div ends
136:59 - the next one we'll talk about is one
137:01 - that can help us solve things like this
137:03 - if you have HTML you usually have a lot
137:06 - of content inside of your HTML
137:08 - let's say it's copy it's giant
137:10 - paragraphs it's marketing text if I open
137:13 - up our extensions panel with command
137:15 - shift X
137:16 - let's search for code spell checker
137:21 - code spell checker this one that has 2.7
137:24 - million let's install it
137:27 - it will go ahead and highlight any text
137:29 - that it deems not spelled correctly so
137:32 - that is one of them that is not a common
137:35 - word and let's say I spelled common
137:37 - wrong then it would highlight there so
137:40 - very helpful when you're typing a lot of
137:42 - text and just an easy one to help you
137:44 - find your typos the final extension is
137:48 - the big HTML and CSS one if I go into
137:50 - our extensions panel in the sidebar I
137:53 - will search for HTML CSS support
137:57 - and this is the big HTML CSS extension
138:01 - to use install right here and what this
138:03 - does is it actually gives us nice
138:05 - intellisense features to know about IDs
138:08 - classes embedded style sheets and even
138:11 - external style sheets so what that means
138:14 - is if I go into our HTML right here
138:16 - scroll up let's delete this if I
138:20 - activated intellisense with control
138:21 - spacebar it says hey you have a class
138:24 - called call out maybe you want to use
138:26 - that
138:27 - so if I go over here click that
138:29 - that was an easy way to know the classes
138:31 - that were in my project you can imagine
138:34 - this can be very helpful when you have a
138:36 - giant list of classes
138:39 - the other really cool thing about this
138:40 - extension is that it can handle external
138:43 - style sheets
138:44 - so if I right click this and I say close
138:46 - to the right I'll just close all of
138:48 - those windows tabs we don't need them
138:50 - Save Right There
138:52 - let's go ahead and go into our settings
138:54 - command comma
138:57 - if I did CSS style sheets
139:01 - right here it has to be done in
139:03 - settings.json and I'll show you why in a
139:05 - second if you click here it builds out
139:08 - an array for us
139:09 - CSS style sheets I'm going to paste in
139:12 - the CDN version of Tailwind
139:15 - so there is a style sheet right there
139:17 - and now if we go back over here that
139:20 - extension will go and look at that file
139:22 - and say okay I know all of the classes
139:24 - inside of Tailwind now so I can press
139:27 - spacebar here and I can do control
139:28 - spacebar to activate intellisense I
139:31 - could do background red 500 and notice
139:35 - how it gave me autocomplete for all of
139:37 - the things inside of the Tailwind CSS
139:39 - style sheet
139:42 - you can do this for any CSS framework if
139:45 - you have a bootstrap project if you have
139:47 - a Bulma project Foundation all that good
139:49 - stuff you just say in your settings
139:52 - these are the style sheets I want to
139:54 - look at and you can do multiple with
139:55 - comma and all of those
139:58 - so multiple like that because it's an
140:00 - array in there
140:02 - but HTML CSS will go ahead find them all
140:05 - and look through and give you this nice
140:07 - intellisense autocomplete here
140:10 - all right that's going to wrap it up for
140:11 - the HTML CSS workflow there's a lot to
140:14 - unpack in this video I hope that was
140:16 - helpful and we're going to be doing the
140:18 - same setup for all the other workflows
140:21 - in this video we will be talking about
140:23 - the node and npm workflow and this is a
140:27 - really important workflow because it
140:28 - spans any JavaScript that you're going
140:31 - to do inside of vs code if it has a
140:34 - package.json you're going to be using
140:36 - npm and therefore this is going to span
140:39 - JavaScript react node nextjs all of that
140:42 - stuff is this video
140:46 - so let's talk about the extensions we
140:48 - were going to use in this video we're
140:50 - going to use npm which is an amazing
140:52 - extension all on its own we're going to
140:54 - use the git ignore extension
140:56 - npm intellisense extension
140:59 - version lens
141:01 - and import cost
141:03 - all of these I think are fantastic
141:05 - extensions to use when you're working
141:07 - with node and npm so let's get started
141:11 - here we go let's go into extensions and
141:13 - the first one we'll go into is npm
141:17 - and this is the 3.9 mil one that we want
141:20 - we'll install
141:21 - and let me show you what this does for
141:23 - us normally if you have a brand new file
141:26 - project right here I would go into my
141:29 - terminal control utility and say npm
141:32 - init and say yes and that would create a
141:36 - brand new package.json and I can start
141:38 - working with a node project
141:40 - but here
141:41 - I think a really great workflow to have
141:44 - here is to try to use the command
141:45 - palette as much as possible if we can
141:48 - move things into the command palette all
141:50 - the better we save more time because we
141:52 - don't have to open up the terminal type
141:53 - into there we can just do command shift
141:56 - p
141:57 - npm and you can see all of the tools
142:00 - that are part of this package right here
142:02 - and we can run init
142:06 - so it actually opens up the terminal
142:07 - still but we got to initialize it from
142:10 - the command palette so we'll say yeah
142:12 - yep enter entry point is index.js enter
142:17 - and we'll just keep pressing enter all
142:19 - the way across is this okay yes and then
142:21 - I can close the terminal Ctrl tilde
142:24 - and we have our package.json
142:27 - so that one wasn't the best example of
142:29 - it because we still had to go into our
142:31 - terminal to do stuff
142:33 - what I can do next though is Let's do an
142:36 - install
142:38 - what I can do next is let's say we
142:40 - wanted to install a package here I would
142:43 - open up my terminal command K to clear
142:45 - that out and I could say npm install
142:48 - let's say Express
142:51 - so now we have node modules and a
142:53 - package lock.json what you can do here
142:56 - is just delete this right here
142:59 - move to trash delete this one as well
143:02 - move to trash is we can do command shift
143:05 - p
143:06 - npm
143:07 - install and now we can install
143:09 - dependencies from there I use this a lot
143:12 - when I open up a brand new project I get
143:14 - clone a project from GitHub first thing
143:16 - I'll do is npm install
143:19 - next up let's say we had a package
143:23 - script let's say there's a test script
143:25 - right here let's have start and we'll
143:28 - just say node server.js
143:32 - and let's create a server.js right here
143:35 - we don't really do anything here but
143:38 - once we save that we can command shift p
143:42 - npm run
143:44 - and you can run init audit build script
143:47 - is what we want
143:50 - so let's run script and we can run these
143:52 - scripts so it automatically pulls the
143:54 - scripts out of our package.json and you
143:57 - can see it will run the start right here
143:58 - and it goes ahead and runs nodeserver.js
144:03 - so a lot of the time I will get clone
144:05 - with Git clone right here and then I'll
144:08 - go ahead and npm install dependencies
144:11 - and then I'll go ahead and npm run a
144:14 - script
144:16 - and just like that I have my entire
144:17 - project running with three command
144:20 - palette commands
144:23 - the second extension we have is git
144:25 - ignore command shift X to open up our
144:28 - extensions I'll say git ignore right
144:31 - here
144:33 - we'll install this for 1 million
144:35 - installs
144:37 - one million and one now
144:39 - and from here
144:41 - if we open up our Explorer node modules
144:44 - is going to be committed to our GitHub
144:46 - repo we definitely do not want that
144:48 - since it's a giant folder
144:50 - we want to add a git ignore so normally
144:52 - you would do got dot get ignore file but
144:55 - here I can do git ignore
144:57 - and just add a git ignore
145:00 - and then it will pull from GitHub the
145:02 - defaults and we can type in node right
145:04 - here and that will go ahead and create a
145:06 - DOT get ignore based on node projects
145:08 - and it will go ahead and node modules
145:11 - will be somewhere down here there we go
145:16 - thanks to that we can add a gig ignore
145:18 - with the git ignore package
145:22 - the third extension we'll talk about is
145:24 - npm intellisense
145:29 - now this is a small one but it gives you
145:31 - some good functionality especially when
145:33 - you're doing requires
145:36 - you can do require and it will auto
145:38 - complete the packages that are in your
145:40 - project so I'll go back to my server.js
145:44 - command P to open up files server.js
145:48 - while I could type out the entire
145:50 - require statement right here a cool
145:52 - thing you can do with the npm
145:53 - intellisense package is command shift p
145:56 - type in intellisense and we can import a
145:59 - module right from here
146:01 - and it pulls the ones in from our
146:03 - package.json we'll say Express is the
146:05 - one we want
146:08 - and we can say Express right here it
146:10 - gives you the destructured version so
146:12 - you can pull out like anything you want
146:14 - to destructure but we'll leave that
146:16 - there
146:18 - the next thing we can do is extension
146:20 - number four is version lens
146:25 - with version lens
146:27 - it's not the most popular package that
146:29 - is a lot of installs but not the most
146:31 - popular we can go into our package.json
146:36 - and we have our dependencies here so
146:39 - let's say there's Express let me add a
146:40 - couple more let me just add random ones
146:43 - npm install react react Dom let's type
146:46 - in next
146:48 - let's go for low Dash
146:51 - and now that we have these packages
146:53 - installed right here
146:55 - version lens is a package that gives us
146:57 - a nice little V button on the top right
146:59 - of our package.json we can click that
147:02 - and it starts initializing and it goes
147:04 - and grabs the latest version of each of
147:07 - our packages
147:08 - so if I change the react over to let's
147:11 - say 16.9.0
147:16 - it'll say okay that's fine 16.14 is what
147:19 - comes in but latest is 1702 so I can
147:22 - actually click this and it updates those
147:24 - so you can quickly look at your entire
147:27 - package.json and see what's outdated and
147:29 - click a couple buttons and update
147:31 - everything
147:32 - again you would have to npm install
147:34 - after you updated the numbers but then
147:36 - you'd be good to go
147:39 - and when you're done using it just press
147:41 - the V again so you turn that off and
147:43 - you're back to a normal package.json
147:47 - the last extension of this video is
147:49 - going to be import cost
147:52 - and I'll go ahead and install that and
147:55 - we'll go ahead and enable it now the
147:58 - cool thing about import cost if I open
148:00 - up a brand new file let's go into create
148:02 - a new file we'll just call it app.js
148:06 - I can import react from react
148:10 - it will automatically calculate the size
148:12 - of this dependency
148:14 - so when you start using third-party
148:16 - packages you can see the size of what
148:18 - you're going to ship to your user
148:20 - gzipped this is only three kilobytes
148:22 - import react Dom from react Dom
148:27 - but should be a little bit larger if it
148:29 - calculates that there we go 39.4
148:32 - kilobytes gzipped
148:34 - import cost is a really good extension
148:37 - just to have that knowledge of what
148:39 - you're shipping to your users smaller
148:41 - bundle sizes equals faster apps
148:46 - all right those are some great node and
148:48 - npm extensions moving forward we're
148:50 - going to do a lot more JavaScript and
148:52 - we'll see more JavaScript extensions and
148:54 - workflows let's keep moving forward
148:57 - this video is all about the JavaScript
149:00 - workflow now I think this might be the
149:02 - biggest video in the course along with
149:04 - the accompanying video right after this
149:07 - JavaScript extensions
149:09 - JavaScript is such a big part of vs code
149:11 - that a lot of the features are built
149:14 - around a lot of JavaScript things so
149:17 - this is going to be a really fun one
149:18 - let's talk about the built-in features
149:21 - of vs code that are going to be in this
149:23 - video
149:24 - we'll do a little bit more intellisense
149:26 - intellisense is just so important we
149:28 - can't ignore it jsdoc very important
149:32 - also helps us out with intellisense
149:34 - Auto Imports
149:36 - a byproduct of intellisense code
149:40 - navigation and renaming also
149:41 - intellisense
149:43 - code actions on Save and update Imports
149:46 - on move
149:48 - all of these features once you start
149:49 - working them into your workflows will
149:51 - make you a more productive JavaScript
149:54 - developer
149:56 - all right here I have a new folder with
149:58 - just a blank app.js let's start seeing
150:02 - how some things work out
150:04 - we've already seen how intellisense
150:06 - Works a little bit if we did cons to
150:08 - button is equal to document Dot
150:11 - I can start typing in something like
150:13 - query selector and you'll notice that if
150:16 - I close that out we have query selector
150:21 - and we have options for what we can do
150:23 - as far as parameters that are passed
150:25 - into query selector all or query
150:28 - selector all that good stuff right there
150:31 - so intellisense is always present always
150:34 - helping us out and there are a lot of
150:35 - extensions that hook into intellisense
150:37 - that you've seen so far
150:39 - something I want to do is show off a
150:42 - little bit more of how our code uses
150:44 - intellisense
150:46 - let's write out a function called add
150:48 - and we'll say a b here it will return a
150:51 - plus b
150:53 - foreign
150:54 - what we can do here is go down and use
150:56 - add
150:57 - and if we expand this right here it says
151:00 - function add a is any B is any and it
151:03 - returns any so you might not be using a
151:07 - lot of these type features but they are
151:10 - very helpful and I'll show you how to
151:11 - use them
151:14 - by adding in a JS Dock which is a
151:17 - comment above a JavaScript function that
151:20 - shows a little bit about what that
151:22 - function does you type in forward slash
151:24 - star star and we get the snippet right
151:26 - here of adding in a JS doc comment
151:30 - you can press enter or tab to
151:32 - autocomplete
151:33 - and now it read our function said hey
151:36 - there's two params in here and it's
151:37 - going to return something
151:39 - so let's fill this out the first one is
151:41 - going to be a number
151:42 - I'll press Tab and we'll say the first
151:45 - number to add
151:47 - I'll press tab again and this will also
151:49 - be a number
151:51 - Within These brackets we're going to add
151:52 - the type of what the parameter is it
151:55 - could be string number Boolean here it's
151:57 - number the second number to add
152:01 - we are going to return a number
152:04 - and I'm going to type in add
152:06 - two numbers together as the title
152:11 - so with this JS doc comment vs code can
152:14 - read all through this read the function
152:16 - itself and give us even more
152:18 - intellisense when I say add
152:20 - and check that out all of the stuff that
152:22 - we just wrote out is now in the
152:23 - intellisense so it's add two numbers
152:25 - together first number to add second
152:27 - number returns a number
152:29 - and all of that is right there really
152:31 - nice so we say let's do like hi
152:35 - like that
152:37 - and it won't really show an error yet
152:39 - we're going to install an extension in
152:41 - the next video that will help out and
152:43 - show errors here so that we can be even
152:45 - more productive
152:47 - moving forward a lot of the things we're
152:49 - going to do is catch errors early which
152:51 - is really nice so that we don't have to
152:53 - go to our browser find the error come
152:56 - back try to debug it's all helped out
152:58 - right inside of vs code
153:02 - let's make our example a little bit more
153:04 - robust let's add a new file we'll call
153:06 - this add.js that'll be our helper
153:09 - function and I'll move this whole thing
153:11 - from here
153:13 - into here and I'll say export default
153:18 - let's go ahead and add a new one let's
153:20 - say this is called people.js and I'll
153:23 - say cons people and I'll just make it an
153:25 - array of one person
153:29 - export default people
153:33 - the cool thing about this now is we have
153:36 - a feature called Auto Import so if I
153:37 - wanted to come in here and say add
153:41 - the cool thing about intellisense is
153:43 - that it knows all of the files that we
153:45 - have in our workspace it knows all these
153:48 - symbols or functions variables
153:49 - everything inside of those files so I
153:52 - can go in here and say add
153:54 - and you'll notice it brought in all the
153:56 - intellisense and it says Auto Import
153:58 - from dot add so that's the file right
154:00 - next to us I'll click enter right there
154:02 - and it brought in the Auto Import really
154:05 - nice
154:06 - so I'll say one two right there
154:09 - we can even bring in people
154:11 - and it knows to bring in the const
154:13 - people is the array of objects
154:18 - it can Auto Import that as well I'll
154:20 - click that and it auto imported
154:24 - thanks to intellisense knowing the
154:26 - symbols around our files we can do a
154:29 - couple things like command T which is
154:31 - going to search symbols across all files
154:33 - and I can say add
154:35 - and that'll open up the ad.js file right
154:37 - there or people
154:40 - I've been using command T to open
154:42 - symbols a lot more often recently
154:44 - another thing is if you're already in a
154:47 - file you could do command shift o which
154:49 - will search for symbols in this file
154:51 - only so command T is symbols across your
154:54 - workspace command shift o is symbols in
154:57 - your current file
154:59 - so if I come back to app.js command
155:01 - shift o no symbols in there because
155:04 - we're just using a function we haven't
155:06 - declared any variables or functions
155:10 - one other thing that we can do is right
155:13 - click Source action and we can say
155:16 - organize Imports
155:18 - and if you have a lot of imports it will
155:20 - organize them and it will remove any
155:22 - unused Imports
155:26 - more on that we could go into our
155:28 - settings code actions on Save
155:32 - we can force vs code to organize our
155:34 - Imports on save so we don't have to
155:37 - manually do that this goes hand in hand
155:39 - with that auto format video that we just
155:41 - did edit settings this is going to be an
155:44 - object and I definitely recommend using
155:46 - the docs because it's hard to tell what
155:48 - to write here
155:49 - but I did control spacebar and
155:52 - intellisense showed what we could write
155:54 - organize Imports is what we want and we
155:56 - want that to be true
155:58 - so that will happen on Save and we never
156:00 - have to look at it again it will remove
156:03 - any unused Imports as well
156:07 - the last cool thing about vs code's
156:09 - JavaScript features that I want to point
156:11 - out is updating Imports on move
156:14 - so let's say right here I have dot add
156:16 - and I have dot people the files that are
156:19 - pulled from right here I can add a new
156:21 - folder and we can say helpers
156:24 - and let's drag add.js into the helpers
156:27 - folder and it says hey are you sure you
156:30 - want to move ad.js into helpers
156:32 - yes move that over there
156:34 - and then here's the fun part do we
156:36 - update the Imports for ad.js yes or you
156:41 - can always automatically update Imports
156:43 - which is what I have set to because
156:44 - whenever I move my files I would love my
156:47 - imports to be updated as well
156:50 - and notice how it changed that to slash
156:52 - helper slash ad we'll do it with people
156:54 - also
156:55 - and we'll move that there the reason I
156:57 - don't have don't ask me again is because
156:59 - I just want to be sure if I'm moving
157:02 - files sometimes I've accidentally moved
157:04 - files and I didn't know that I did so
157:07 - this is a good way for me to know hey
157:08 - you're moving a file
157:10 - and there we go update on the import
157:14 - all of those are children of the
157:16 - intellisense features having vs code
157:18 - know all of the symbols all the
157:20 - functions variables in our workspace
157:22 - lets it do all of these really fun
157:25 - features
157:26 - definitely take a look into more of the
157:28 - intellisense features I have a link down
157:30 - to the JavaScript docs down below
157:33 - and as you work you're going to get a
157:35 - lot more nice prompts from vs code to
157:37 - help you out with your JavaScript
157:39 - let's start talking about JavaScript
157:41 - extensions we've seen all of the
157:44 - Fantastic built-in features of
157:46 - JavaScript in vs code
157:48 - but there are ways that we can extend vs
157:50 - code's functionality through extensions
157:53 - the first extension we'll talk about is
157:55 - one that I think is important enough to
157:57 - get its own video and that'll be eslint
158:00 - now eslint is a tool that will help us
158:03 - find and see problems or confusions with
158:06 - our own code so it doesn't just catch
158:09 - errors it catches things that could be
158:11 - confusing when we write our code
158:13 - to demonstrate this if I go over to vs
158:17 - code and I create const message is equal
158:20 - to hi there
158:22 - and I try to reassign this variable I
158:25 - shouldn't be able to because it's a
158:26 - const and const means there is no
158:29 - reassignment for this thing I say
158:31 - message is equal to new message
158:35 - vs code doesn't catch this error it
158:38 - doesn't say hey this is a problem we're
158:41 - actually only going to see this problem
158:42 - when we go run our code in Chrome
158:45 - a tool that we can use to catch problems
158:48 - or confusions early is eslint
158:53 - eslint is a linter that will go ahead
158:56 - and find problems with our code and tell
158:58 - us about them so I'll go ahead and
159:00 - install that
159:01 - but there are a couple extra things that
159:03 - we need to do for setup here one we need
159:06 - to have the eslint package installed
159:07 - either in the workspace we're in or
159:10 - globally
159:12 - since we want a brand new package
159:14 - installed the eslint package I'm going
159:17 - to go ahead and open up my Explorer we
159:19 - want a package.json and we want some
159:21 - node modules
159:22 - to do this I can do npm in knit
159:25 - dash dash yes to create a brand new
159:27 - package.json and then I am going to
159:30 - install npm install for development
159:33 - eslint
159:37 - now I'm installing this locally for this
159:39 - workspace you may want to install it
159:41 - globally that's one other option for me
159:44 - I personally prefer to have it in the
159:46 - workspace so that when somebody else
159:47 - downloads this project they can npm
159:49 - install and eslint will be added because
159:52 - it'll be right here underneath Dev
159:54 - dependencies
159:56 - if I installed it globally and it wasn't
159:58 - in this list then other people wouldn't
160:00 - really know that I was using eslint
160:04 - all right so that's step one is getting
160:06 - the eslint package step two is creating
160:08 - an eslint RC configuration file
160:11 - to do that we can use the package itself
160:14 - command shift p and say eslint
160:18 - and we can say create eslint
160:20 - configuration
160:23 - and now down here we get some nice
160:25 - prompts we say hey do you want eslint to
160:27 - check syntax check syntax and find
160:29 - problems or check syntax find problems
160:32 - and enforce code Style
160:34 - for me enforcing code style is a job
160:37 - before prettier I like how prettier does
160:39 - that job so I'm going to tell eslint
160:41 - just check syntax and find problems
160:45 - we'll be using JavaScript modules here
160:48 - for this project we won't have react or
160:51 - view so I'll just say none of these
160:54 - for this project we won't be using
160:55 - typescript either eslint can lint and
160:58 - check typescript code for errors
161:02 - and our code is going to run in the
161:04 - browser
161:06 - we'll format this as a JavaScript file
161:08 - it's all good for all three versions and
161:10 - now we get a brand new eslin rc.js what
161:14 - happens here is eslint brings in what's
161:16 - called eslint recommended and it brings
161:18 - in all of these rules of how our code
161:21 - should be formatted and notice I already
161:23 - installed eslint and I brought in eslint
161:25 - RC and now there's an error over here
161:29 - there's problems over here on app.js
161:31 - there's two errors
161:33 - so I can actually click over there and
161:35 - it says a highlighted squiggly line
161:37 - underneath the message if I hover it
161:38 - says Hey message is a constant message
161:41 - is assigned a value but never used so
161:43 - that's problem number one so let's try
161:46 - to use it console.log message
161:50 - but there's still a problem here and
161:52 - notice how the error went down from two
161:54 - to one there's still another problem
161:56 - hover that message is a constant I
161:59 - shouldn't be able to reassign it so
162:01 - let's change this to a let
162:03 - and therefore there are no problems
162:05 - anymore
162:07 - so if I go back to this eslintrc.js I'm
162:10 - not sure what that error is
162:13 - maybe converted that's all good this is
162:15 - what eslint did by default so we'll
162:17 - leave it eslint recommended let me show
162:19 - you the rules that this brings along for
162:21 - enforcing code Styles if I go to the
162:25 - eslint.org website find and fix problems
162:27 - in your JavaScript code you can go to
162:29 - user guide and down here under rules we
162:33 - can click rules
162:36 - check mark right here says if extends
162:38 - eslint recommended is added then
162:40 - everything with a check mark is the
162:42 - rules that eslint will check for in our
162:44 - project
162:45 - so you can scroll through and find all
162:47 - of these things there's a ton of other
162:49 - rules and it's fun to go read through
162:51 - these and see what is not recommended
162:53 - JavaScript
162:55 - we can scroll down no import assign all
162:57 - this good stuff right here but now that
162:59 - we have this eslint RC eslint we'll
163:02 - check for all of these things and not
163:04 - just for us it'll be for anyone else
163:06 - that comes into this project and tries
163:08 - to use this as well
163:11 - another thing that eslint does for us is
163:14 - if I said function say hello and I said
163:17 - message or person
163:21 - what it would do here is return
163:23 - let's say hi person
163:28 - and right here we have a defined but
163:30 - never used that's a good error to show
163:32 - off that hey you're defining code that
163:34 - you're not even using but check this out
163:36 - I can console.log right here
163:39 - and say hi
163:41 - it will actually also error out this
163:44 - code and say unreachable code because
163:46 - you already did a return and you're not
163:48 - even going to get to this part of the
163:50 - code so let's go ahead and see This
163:53 - little light bulb right here we can
163:54 - click that it says remove unreachable
163:57 - code
163:58 - and you can just remove it you can fix
164:00 - those problems
164:02 - once you get to a larger project there
164:04 - is going to be a lot of errors in your
164:06 - code potentially so one way we can look
164:09 - at all of the problems is we can open up
164:11 - command shift M which is the problems
164:14 - tab underneath next to our terminal and
164:17 - see all of the problems across our
164:19 - project
164:21 - you can even go through each one click
164:23 - the light bulb and see if there's a fix
164:25 - for them
164:26 - so to show that off let me go back here
164:29 - and return that unreachable code
164:31 - console.log
164:33 - hi unreachable code right here
164:37 - I can click that and remove unreachable
164:39 - code
164:42 - eslan does a great job at showing fixes
164:44 - for everything that we could do but I
164:46 - want to show you something else which
164:47 - may be a little extreme I don't do it
164:49 - myself but it's good to know if you do
164:51 - command comma go into your settings we
164:54 - saw this setting in the last video just
164:56 - do code actions on Save we can edit in
165:00 - settings.json and see how there's this
165:03 - already intellisense giving a source.fix
165:05 - all
165:06 - you can set that to true
165:08 - so source.fix all is going to say
165:10 - anytime you save I'm going to go ahead
165:12 - and run these es lint fixes and just do
165:14 - it for you
165:16 - now I don't use it myself
165:18 - I like seeing the eslint stuff and
165:20 - fixing it so that I can see that the
165:22 - problems I created but if you like the
165:24 - idea of just having your problems go
165:26 - away then go ahead and do that I click
165:29 - save right there and that unreachable
165:31 - code was just removed
165:34 - eslint is a great tool all you had to do
165:37 - is one install the package to install
165:40 - the npm install eslint and step three
165:45 - was create your eslint
165:48 - RC and with those three steps you are
165:51 - good to find the errors in your code
165:53 - look at that there's already five here
165:54 - because of this
165:57 - let's start moving forward and looking
165:59 - at other extensions we can use for
166:00 - JavaScript
166:02 - let's talk about some more JavaScript
166:04 - extensions
166:06 - we have a few more here we have
166:09 - JavaScript es6 code Snippets which is
166:12 - really helpful it has a lot of great
166:13 - Snippets that we can use for our
166:15 - JavaScript
166:16 - path intellisense very helpful in
166:19 - grabbing and importing different files
166:21 - across our entire project
166:24 - turbo console log which is a really
166:26 - quick way to get console logs which I do
166:29 - a lot actually JavaScript booster which
166:32 - is some fun JavaScript helpers
166:34 - and those are the ones that we're going
166:35 - to talk about in this video
166:38 - let's jump right into it
166:40 - first off let's install JavaScript es6
166:43 - code Snippets
166:44 - es6 code Snippets
166:48 - now you may see a lot of JavaScript
166:50 - snippet packages definitely look through
166:52 - them and see which one you like best but
166:55 - this is a popular one for a reason if I
166:57 - click into it
167:00 - and I scroll down here you can see all
167:02 - of the files that are
167:04 - supported.js.ts jsx TSX
167:08 - htmln.view
167:09 - if we scroll down these are all the
167:11 - Snippets that we can use so imp I use a
167:14 - lot IMD I also use a lot there are some
167:18 - really great ones for console logs for
167:20 - eaches definitely look through and see
167:23 - which ones you think you can add to your
167:24 - workflow
167:26 - I'll go ahead and install this
167:28 - and we'll go into our app.js
167:31 - to see everything that we can do you can
167:33 - do command shift p
167:36 - snip it
167:38 - insert snippet here
167:40 - and we can just scroll through and let's
167:42 - say we need an import right here
167:45 - you can imp Imports entire module
167:47 - statement there's IMD which is import a
167:50 - portion we'll do imp which is the full
167:53 - import I can say react from react like
167:56 - that
167:58 - and to show off that again I'm going to
168:00 - do imp
168:01 - and you can press enter or tab to
168:04 - autocomplete and the first thing you get
168:06 - is the right side so the package name
168:08 - that you import from that'll be react
168:10 - you press Tab and you get the module
168:13 - name and you can fill that out there and
168:15 - then press Tab and you're back at the
168:16 - end of the line here's IMD a really
168:19 - popular one that I use as well and
168:21 - that's import destructure you can see
168:23 - the preview of it over on the left here
168:25 - I'll press enter
168:27 - and we can say react and we would get
168:29 - use State from here and that would be
168:31 - destructured like that
168:34 - look through that package and see what
168:36 - you find is best CLG is the last one
168:39 - that I want to point out I use this one
168:41 - a lot for console.log
168:43 - the next extension we're going to
168:45 - install is path intellisense
168:48 - path intellisense
168:51 - is a great tool 5.1 million installs if
168:54 - we scroll down here we get some nice
168:56 - autocomplete for
168:58 - looking through our file system as soon
169:00 - as we go and create a path
169:03 - install here
169:04 - enable
169:06 - if I go to my app.js we have helpers add
169:09 - and people let's say I wanted to do an
169:12 - import so I would do IM p
169:16 - and as soon as I do dot forward it
169:19 - notices that I want a path and it says
169:22 - Hey here are all the folders in your
169:24 - path so I can print helpers
169:26 - and then I pick slash and then it goes
169:29 - ahead and says hey here are all the
169:31 - other files that you want and I'll just
169:33 - click add we don't need that dot JS here
169:36 - and we'll do add from there
169:39 - so another helpful path intellisense
169:42 - extension
169:44 - next up is Turbo console log
169:48 - and go for the one that has the most
169:51 - 285k right there I'll install
169:56 - you can activate turbo console log by
169:58 - doing control alt and L and what that
170:00 - does is a really quick console log
170:03 - before I showed you you could do CLG and
170:06 - that would create a console log and then
170:08 - you would have to type in what you
170:09 - wanted a console.log here you highlight
170:12 - the word and then you do Ctrl alt L on
170:15 - Mac it'll be Ctrl option l
170:19 - and it gets you a console log but it
170:21 - doesn't just do a console log it
170:23 - actually gives you a nice Emoji it tells
170:26 - you what file you're in it tells you
170:28 - line and it gives you context into what
170:30 - your console.logging so this is really
170:32 - helpful if you have a few all across
170:34 - your project you can actually see what
170:36 - you're logging pretty nicely
170:40 - the last extension here is Javascript
170:42 - booster
170:45 - 190k I'll install that
170:48 - JavaScript booster is a great way to
170:50 - refactor a lot of our code vs code has
170:53 - refactoring built in but I found
170:55 - JavaScript booster to be very helpful
170:57 - for these really tiny tasks like you see
170:59 - here it was able to change to an arrow
171:02 - function forward ref just random things
171:04 - so let's see if I had a function hello
171:06 - and I said return hello like that
171:10 - you could click on this and now you get
171:12 - this little light bulb in the top left
171:14 - you click that and you say convert to
171:16 - Arrow function so JavaScript booster
171:19 - will put nice helpers in this light bulb
171:22 - drop down convert to Arrow function and
171:24 - there we go
171:25 - unless I said VAR message
171:28 - is equal to this is cool
171:32 - I'm on this line I get this nice light
171:34 - bulb convert to const and that one works
171:37 - just nicely
171:39 - let's say I had const well I already
171:42 - have message so let's go ahead and use
171:43 - message here I can click here and you
171:46 - can see convert to let split into
171:48 - declaration and initialization I don't
171:51 - want either of those click into the
171:53 - string and now the light bulb actually
171:55 - changes and says hey do you want a
171:57 - template string here and I can say yes
171:59 - and that changes that to a template
172:01 - string
172:03 - I recommend looking through JavaScript
172:05 - boosters docs there's a lot that it can
172:07 - do for us for instance here's an if
172:09 - statement if true then let's say return
172:13 - hi
172:15 - else return Buy
172:20 - I can click This little light bulb see
172:21 - what it does and I can replace this
172:23 - entire thing with a ternary
172:26 - and return true question mark high or
172:29 - buy
172:30 - really helpful small thing but it does
172:33 - help with productivity because it cuts
172:35 - out a little bit of manual editing
172:38 - all right those are the JavaScript
172:40 - extensions I wanted to point out there
172:42 - aren't many because there are so many
172:44 - great JavaScript features already built
172:46 - into vs code so these are the ones that
172:48 - I think are really helpful the rest are
172:51 - really good but JavaScript by itself in
172:53 - vs code is already really fantastic
172:57 - moving forward from JavaScript let's
172:59 - talk about using react in vs code now a
173:04 - lot of the JavaScript stuff we've talked
173:05 - about as far as workflows extensions
173:07 - settings a lot of that is going to apply
173:10 - to the react workflow but in addition to
173:13 - that we have two extensions one is going
173:15 - to be simple react Snippets which adds
173:18 - even more Snippets that are really react
173:20 - specific
173:21 - and again we're going to talk about
173:23 - JavaScript booster because it adds such
173:26 - functionality to react and we also have
173:29 - a couple workflow things to talk through
173:32 - to start us off I am going to start with
173:34 - a brand new react project so what I'm
173:36 - going to do is open up my terminal with
173:38 - controlled npx create react app
173:43 - I'm going to say sample react app
173:48 - we'll let that run create a brand new
173:50 - create react App application
173:54 - we have our new react app I'm going to
173:57 - open this up in the same vs code window
173:59 - with code sample react app
174:03 - and I'm going to say Dash R to reuse the
174:05 - current vs code window
174:08 - that went ahead opened it back up in vs
174:11 - code I'll go into my source folder we
174:13 - have app.js and this is going to be the
174:16 - start to our entire react application
174:20 - I'm going to click right here and I'm
174:22 - going to say balance outward
174:25 - and that's an emit shorthand to expand
174:28 - and select everything and I'm going to
174:30 - say balance outward again to select even
174:32 - more and let's remove all that hi
174:36 - so the first thing that happened here is
174:39 - when I typed in the div it automatically
174:41 - closed the div
174:43 - now we talked about this in one of the
174:45 - previous videos I'm personally not a fan
174:47 - of this I like closing my syntaxes
174:49 - myself
174:51 - so to turn this off we're going to go
174:53 - into settings
174:55 - and we'll say Auto closing
174:58 - tags
175:01 - we can turn this off for HTML JavaScript
175:03 - and typescript so I'll turn that off
175:04 - there and I'll turn them off all the way
175:07 - across actually
175:10 - and now when we type in div
175:12 - we can close it ourselves and notice
175:15 - intellisense still says hey you probably
175:17 - want to close that div that you just
175:19 - opened and I can press enter or tab to
175:21 - finish that
175:24 - the other cool thing about this is let's
175:26 - say I had a component we'll say new file
175:28 - right here I'll say components slash
175:31 - hello world dot Js
175:36 - I'll do export default function hello
175:39 - world
175:41 - return
175:43 - div hi world
175:47 - if I go into my app.js the cool thing
175:50 - about vs code is that it already has all
175:52 - that intellisense it knows all about our
175:54 - files that are in our project if I start
175:56 - typing in hello world
175:58 - notice it'll say Auto Import from this
176:02 - components slash hello world I can press
176:04 - enter and it will automatically go ahead
176:06 - and import that for me
176:10 - let's talk a little bit about props and
176:13 - types and intellisense here in a react
176:15 - app
176:16 - let's delete all this and now I have our
176:18 - hello world right here
176:19 - let's go ahead and give ourselves a prop
176:22 - of message
176:24 - and this is going to be a string let's
176:26 - say we wanted this to be a string and
176:28 - right here I'm just going to write in
176:30 - message so we actually use it
176:33 - over in app.js if I go here and say
176:36 - message it says message can be any
176:39 - so that doesn't really help me if I'm
176:41 - using a component where I don't know
176:43 - what the props are message could be any
176:45 - or I don't know if it's a string a
176:47 - Boolean a number
176:49 - there's a way we can add some
176:50 - intellisense to this
176:52 - we can go ahead and install a package
176:54 - called prop types
176:56 - so I'll go into my terminal npm I prop
176:59 - Dash types
177:02 - and this prop types package is going to
177:05 - give us a way to add the types to our
177:07 - props exactly what it sounds like so if
177:10 - I go here and I go to and say Hello
177:13 - World dot prop types
177:16 - is equal to
177:18 - message is going to be prop types
177:23 - dot string
177:26 - and we need to import this prop types
177:28 - project right here I'm going to say
177:31 - import prop types from prop types
177:35 - and this is the recommended package from
177:37 - the react docs to add in typings to your
177:40 - react projects if you are using
177:42 - JavaScript if you're using typescript
177:44 - you can just go ahead and say message is
177:47 - string right here which is one way to do
177:49 - it but we aren't using typescript right
177:52 - now so we have to do this ourselves with
177:54 - the prop types package
177:56 - and then here you can't export default
177:59 - right there you have to export default
178:00 - down below export default hello world
178:06 - now with a setup like this for our react
178:09 - components we should be able to go into
178:11 - app.js and say message
178:14 - and check that out it is a string
178:17 - and also there's a question mark because
178:19 - it's not required the prop types package
178:21 - is a great way to add extra intellisense
178:23 - to our react components
178:27 - something else I want to talk about when
178:29 - using react is Emmett is a really big
178:31 - tool when I'm working with my templating
178:33 - languages
178:35 - so let me delete this whole thing right
178:36 - here I don't need that anymore let's say
178:38 - I wanted a div Dot
178:41 - hello.world and that's going to be two
178:43 - classes or I could say is blue
178:46 - notice that M doesn't work here normally
178:48 - in an HTML file I would get my auto
178:51 - intellisense and then I could tab over
178:53 - and build out my template Emmett here
178:55 - doesn't understand this Javascript file
178:57 - as a templating language it usually
179:00 - works in HTML
179:02 - to get Emma to work in a Javascript file
179:04 - we have to say hey Emmett please go work
179:06 - in JavaScript and react I can go into my
179:09 - settings and say include languages
179:14 - and notice this is already recommended
179:16 - it says Hey JavaScript JavaScript react
179:18 - is the thing we want to do and if you're
179:20 - in a view file view HTML set to HTML
179:23 - so I'm going to go here and say
179:25 - JavaScript
179:27 - JavaScript react
179:29 - and I'll click ok
179:33 - now we can go into our app.js let's try
179:35 - the scan div dot is blue
179:38 - we get our emit abbreviation here I can
179:41 - click here press enter or I can press
179:43 - Tab and we get our syntax Auto completed
179:47 - thanks to Emmett
179:48 - foreign
179:50 - let's talk about the two extensions we
179:53 - had we had simple react Snippets
179:57 - this one for one million installs I
180:00 - actually prefer simpler react Snippets
180:01 - to this es7 react Redux graphql react
180:05 - native Snippets one I know it's more
180:07 - popular but click through each one
180:10 - scroll down and read through the
180:12 - Snippets that are added
180:15 - and see which ones you like see all of
180:17 - these I think these the reason I don't
180:19 - like them is they overlap a lot with the
180:22 - JavaScript es6 code Snippets package
180:24 - which I also have installed
180:27 - but it looks like a lot of the overlap
180:29 - happens so maybe you just want to
180:31 - install this not the JavaScript es61
180:34 - I think the JavaScript es61 plus the
180:37 - simple react Snippets one go hand in
180:39 - hand really well
180:41 - and these are more react specific so IMR
180:44 - right here is import react imrc import
180:47 - reactant component down here there are
180:50 - use effect and set State type stuff
180:53 - let's scroll down even further class
180:55 - components
180:57 - let's see use effect Hook is right there
180:59 - so all of these really helpful to have
181:03 - I'm going to head install
181:06 - back to our hello world and let's say I
181:09 - wanted to use effect
181:10 - uef
181:12 - use effect I can press enter and there
181:14 - we go I could go up here and when in
181:16 - doubt with what the snippet shorthand is
181:18 - remember you can always do command shift
181:21 - p
181:22 - insert snippet
181:24 - and I can type in state and this is the
181:26 - one we want USF declare a new state
181:28 - variable using the state hook
181:31 - I can click here
181:34 - and we can say set let's say count
181:38 - and as soon as I press tab the cool
181:39 - thing about this extension is it will
181:41 - auto capitalize that c right there press
181:44 - tab there we go set count and count and
181:47 - then I can set a default right there
181:48 - press Tab and we are off to the races
181:53 - really helpful there another cool thing
181:55 - to do is with our Auto Import we can
181:58 - Auto Import this use state
182:00 - right now this would break because we
182:02 - had to go in here and import use state
182:05 - from react
182:08 - we can skip that by going here and the
182:11 - way that we can get vs code to auto
182:13 - complete something is we just delete
182:14 - this last character press e and it says
182:17 - oh hey you want use State let me Auto
182:19 - Import that from react for you so I can
182:22 - click that and we get that line
182:24 - anytime you need to do an Auto Import
182:27 - you can do two things one you can delete
182:29 - the last character press it and see if
182:32 - vs code gives you that answer or you can
182:34 - go to it and do control spacebar to
182:36 - activate intellisense and you get that
182:39 - Auto Import from react you can click
182:40 - that right there
182:43 - next up I want to talk about JavaScript
182:46 - booster
182:47 - this is an extension that we talked
182:49 - about in the previous videos JavaScript
182:51 - booster
182:52 - but I think there are some really cool
182:55 - features when you talk about react and
182:57 - JavaScript booster we just talked about
182:59 - it as far as JavaScript but here we'll
183:01 - talk about it with react
183:03 - there's some cool stuff you can do here
183:05 - but if you scroll down
183:08 - to code actions down here under
183:10 - functions
183:11 - here we go jsx TSX and react
183:14 - there are some really nice helpers here
183:16 - especially these three that I use a lot
183:18 - wrap value with the brackets for jsx
183:22 - remove the jsx brackets
183:24 - collapse expand and empty tag
183:27 - wrap function into use callback I don't
183:29 - use it as much but it is helpful
183:31 - and especially these up here for
183:34 - converting
183:36 - strings to template strings
183:39 - so I wanted to show off a little bit of
183:41 - this workflow let's go to app.js
183:45 - let's say I had a function called alert
183:47 - and in here you would have the message
183:50 - that you would pass through we will
183:53 - return a div with the message
183:57 - now let's say I had a class name here
183:59 - class name is equal to and then I could
184:02 - just style it as I want is alert or
184:05 - something like that
184:07 - let's say I wanted to pass in a color
184:10 - through this so I said color is right
184:12 - here well over here I would have to pass
184:14 - this color in through the class name so
184:16 - I would have to do some fancy stuff I
184:18 - would click down here and I would go
184:20 - over here change this out like that
184:22 - change this to a template string and
184:24 - then I would finally pass in the color
184:25 - as an es6 template variable
184:29 - JavaScript booster lets us do a little
184:31 - bit quicker on that task it gives us
184:34 - this nice little light bulb which is vs
184:36 - code's refactoring
184:38 - I can click this wrap value with the
184:40 - brackets all right let's go ahead and do
184:42 - that and that wraps it still keeps it as
184:44 - a string
184:46 - I can click it again and it says replace
184:48 - with template string there we go
184:50 - and just like that we're able to change
184:53 - out a couple things just by pressing the
184:56 - light bulb there for a couple times
185:01 - some other fun things that I can do is
185:03 - let's say we had a function handle
185:05 - change and that'll be an e
185:08 - if you are clicking into this function
185:10 - you can see the light bulb pop up we can
185:12 - click this removed unused declaration
185:14 - which is vs code trying to fix this
185:16 - because we have eslint installed we have
185:19 - convert to Arrow function which is a
185:20 - nice helper one that comes from
185:22 - JavaScript booster is we can wrap into
185:24 - use callback hook
185:26 - so I don't use that too often but when I
185:28 - do need it it is a pain to have to write
185:30 - that and then you can click here control
185:32 - spacebar to get your Auto Import for the
185:35 - use callback import click that and check
185:37 - it out all the way at the top
185:41 - so JavaScript booster is a nice way to
185:42 - get a little bit more productivity out
185:45 - of vs code
185:46 - there's a lot of small things like that
185:48 - that add up like that Auto Import we
185:50 - just did like everything else we've seen
185:52 - in this course you could even click over
185:54 - here click this and if you ever need to
185:57 - you can wrap component in react.memo
186:00 - and then we don't want this right here
186:02 - right we want to import react.memo from
186:05 - react there we go
186:08 - and now we have Memo from react
186:11 - so JavaScript booster a small thing to
186:13 - add on but overall all of the JavaScript
186:15 - stuff we've talked about in the previous
186:17 - videos plus a few more react Snippets
186:19 - and extensions are really helpful for
186:21 - building out a great react workflow
186:25 - this video is all about view workflow
186:28 - and the interesting thing about this is
186:31 - that so much of it is already installed
186:33 - in one extension so we'll talk about
186:36 - that we have extensions we're going to
186:38 - use the PowerHouse called Vitor and it's
186:42 - such a Powerhouse in the view world that
186:44 - if you use the view CLI to create a
186:46 - brand new view project Vita is the
186:49 - recommended extension
186:51 - next up we'll do view vs code Snippets
186:54 - which is by Sarah drazner some really
186:56 - nice Snippets in there and we'll look at
186:59 - the vs code extension pack which is also
187:01 - by Sarah drasner it just has a bunch of
187:03 - extensions that you should look at
187:07 - all right so here we are we will create
187:10 - a brand new view project we'll say view
187:13 - create
187:14 - sample view app
187:17 - I'll press enter we need to make sure we
187:18 - have a preset we'll go ahead and go with
187:21 - view three
187:22 - foreign let that run
187:25 - and while that's running I want to take
187:27 - a detour and go and look at the vs code
187:29 - extension pack
187:32 - the vs code extension pack is an
187:35 - extension pack that has one two a bunch
187:37 - of vs code extensions and the ones to
187:40 - look out for especially for view
187:42 - specific ones is veter view Snippets the
187:47 - rest aren't really view specific and
187:49 - we've talked about them in some of our
187:50 - other videos there's prettier formatting
187:52 - toggle is really nice bracket pair
187:54 - colorizer
187:56 - and the other ones but these two are the
187:59 - view specific ones so let's take a look
188:00 - Vita and view Snippets
188:04 - I'll look at vtor itself
188:06 - a lot of great functionality built into
188:09 - viter and I hope I'm saying that right
188:13 - we have syntax highlighting semantic
188:15 - highlighting Snippets Emmett all of the
188:18 - things that in react we had to install
188:20 - maybe a couple different extensions here
188:22 - in the view world there's just a single
188:24 - extension to rule them all
188:27 - Vita even has its own website if you go
188:30 - to the repository here and you click on
188:33 - the website here it has a full website
188:35 - for what it can get you it has a quick
188:37 - start it has a guide that can go through
188:40 - all of the different features syntax
188:43 - highlighting semantic highlighting
188:46 - snippet
188:47 - and this isn't really to add extra
188:49 - Snippets this is to say that vs code
188:52 - will look at what the language is if
188:55 - you're using a single file view
188:56 - component and it'll say oh if you're in
188:59 - the template tag we probably want HTML
189:01 - Snippets if you are in the script tag
189:03 - you probably want typescript or
189:05 - JavaScript Snippets
189:07 - so it's just a way that vs code can
189:09 - inject certain Snippets into a certain
189:11 - area
189:12 - there's formatting there's intellisense
189:15 - all this great stuff just from one
189:17 - single extension
189:19 - and then if we go look at the view vs
189:21 - code Snippets we scroll down we can see
189:23 - all of the Snippets that are added here
189:25 - really helpful stuff
189:27 - especially when you talk about your
189:29 - templating for V4 v-model all that good
189:32 - stuff there
189:34 - script tags are down here
189:37 - all very helpful when you're working
189:39 - with Vue
189:41 - let's jump back into our app right here
189:43 - let's make sure we open this up code
189:45 - sample view app
189:47 - and we'll say Dash R to use the window
189:51 - and I'll go here source
189:53 - app.view
189:55 - notice that without veter there is no
189:58 - syntax highlighting nothing is fancy
190:00 - about this setup right here and if you
190:03 - look down here a brand new View
190:04 - application will say hey the recommended
190:07 - extension do you want to install them we
190:10 - can say show recommendations and it's
190:12 - veter that's the single recommendation
190:15 - here
190:16 - we'll go ahead and install
190:20 - come back over to our app.view
190:24 - and already we have functionality here
190:26 - for our application
190:28 - Vita is looking for a tsconfig or JS
190:30 - config that's all good we don't really
190:32 - need that because Vitor works right out
190:34 - of the box
190:37 - notice that hello world is right here
190:39 - and if I open up this hello world
190:40 - component and if I option click it it
190:44 - will open up this right here
190:46 - props message is a string
190:49 - so this by saying props is a message
190:52 - string we can already get that
190:53 - intellisense thanks to veter so if I go
190:56 - over here and I type in hello world
191:00 - vs code will show me the component
191:03 - itself it'll give me the dash delimited
191:06 - version of it but I actually like using
191:08 - the
191:09 - Capital case what do you call that
191:11 - Pascal case
191:12 - and you see a message it'll say message
191:15 - is a string
191:17 - the interesting thing here is it tries
191:19 - to bind it
191:21 - hi there
191:22 - but we don't run it bound we would just
191:25 - add it as a string
191:28 - so that's one thing to keep an eye out
191:30 - for
191:31 - a couple other things that Vitor gives
191:33 - us is we can use our emit stuff inside
191:35 - of here so we can say div
191:37 - dot hello and I can tab that over I get
191:41 - my Emin
191:44 - we can go down here and we can say
191:46 - methods
191:49 - and I can do an object we can say do
191:52 - something
191:54 - and then in here I can do an if
191:55 - statement
191:58 - and we get the normal Snippets that we
192:00 - would expect if we were in a JavaScript
192:02 - file but since this is a single file
192:04 - view component and we are in the script
192:06 - section that if statement will work it
192:09 - won't work however in the template
192:11 - section
192:12 - check that out if we're in the template
192:14 - section it gives us a different set of
192:16 - Snippets which is an iframe in this case
192:21 - Vita is really cool because you just
192:23 - have to install the single extension and
192:25 - it gives you a ton out of the box next
192:27 - up let's go look at view Snippets
192:32 - syntax highlighting for view we don't
192:33 - need this one because vitar already has
192:35 - it view three Snippets and view vs code
192:38 - Snippets I'm going to install this one
192:40 - although we could look at that view
192:42 - three one and see which one you like
192:43 - better
192:46 - and if we scroll down actually let's go
192:48 - into our app.view let's go down here
192:51 - we'll delete a couple things
192:53 - let's go over here
192:56 - and say V methods
193:00 - and check that out we can automatically
193:02 - get methods and the first method in
193:05 - there I'll click that we can do a couple
193:07 - other things let's type in insert
193:09 - snippet
193:12 - let's see View
193:14 - and we have a bunch of stuff v-ref view
193:16 - watch maybe we wanted a lifecycle method
193:19 - like mounted
193:21 - we can say V3 on mounted like that I
193:24 - think that would be the different style
193:26 - though if you were using view 3
193:29 - but that's not the one we want so let's
193:31 - say
193:32 - snippet mounted
193:34 - on before Mount V3 V before Mount
193:37 - v-mounted this is the one we want so
193:39 - this is the view 2 version there is the
193:41 - V3 version if you were using the V3
193:44 - functional way of doing things for this
193:47 - we'll just use the mounted method right
193:49 - on the export default object
193:53 - so with viter and the view Snippets
193:55 - package I think those two together are
193:58 - already such a great starter for any
194:01 - view workflow
194:02 - definitely give both a try and just look
194:05 - through the docs and see which parts are
194:07 - going to work for your workflow
194:10 - this video is all about a Tailwind
194:13 - workflow and settings and extensions and
194:16 - I am a really big fan of Tailwind I even
194:18 - have a full-size course at
194:20 - beginnertailwind.com
194:22 - let's get started and see how great vs
194:25 - code and Tailwind can work together
194:29 - the extensions we'll talk about are
194:31 - Tailwind CSS intellisense which is the
194:33 - big one the absolute important one that
194:36 - you need to have installed Tailwind docs
194:38 - I also think this is really important to
194:40 - have
194:41 - and headwind we'll talk about if you
194:44 - need this or if you maybe might like it
194:47 - to start us off I have a brand new
194:50 - next.js application nothing happened to
194:53 - it except for npx create next app
194:57 - so I'm gonna go out of order here and
194:59 - we're going to talk about Tailwind Docs
195:02 - the first extension will install this
195:04 - one
195:06 - and all this extension does is extend
195:09 - the command palette so that while we're
195:11 - here we can do command shift p
195:13 - Tailwind docs and notice you can go to
195:17 - any part of the docs from within vs code
195:19 - and you can click things like let's say
195:21 - we need the installation
195:24 - I could press enter right here and it
195:26 - would open up the Tailwind docs right
195:29 - inside of my Chrome browser and I didn't
195:31 - have to go searching for it Googling for
195:33 - it it all just happened from the command
195:34 - palette
195:35 - I'll go ahead and click next.js and
195:38 - let's just walk through installing
195:40 - Tailwind into a next JS application
195:43 - I'll go down here we'll copy this whole
195:45 - line right here for the npm install
195:49 - I'll open up my terminal control tilde
195:52 - paste that in press enter
195:55 - I'll come down here and PX Tailwind CSS
195:58 - init Dash p which that Dash P gives you
196:01 - our post css.config paste that in there
196:06 - go down here we want this purge right
196:10 - here so we'll copy that switch over
196:14 - close our terminal with control
196:15 - tildility command P to open up our
196:18 - tailwind config.js
196:21 - and let's go ahead and replace this
196:24 - purge line right here
196:27 - we'll save that switch back over I think
196:30 - we're pretty close to done we have to
196:32 - open up app.js and include the import
196:35 - so we'll copy that switch over command p
196:39 - app.js
196:43 - delete that paste that in
196:46 - switch back over include Tailwind in
196:49 - your CSS we have that done already and
196:51 - we're done
196:55 - all right so let's open up index.js now
196:58 - and this is our home page let's go over
197:01 - here let's expand outward and delete
197:02 - everything so we'll say emit balance
197:05 - outward
197:07 - and that highlights everything in there
197:08 - I can do it again to highlight
197:09 - everything there and we'll say div hi
197:12 - there
197:14 - we'll delete all of those lines
197:16 - and here we go we have a brand new
197:18 - next.js Tailwind app and we can start
197:20 - using Tailwind from within here
197:24 - this gets into extension number two if I
197:27 - wanted to use some Tailwind classes
197:28 - let's say class name is equal to let's
197:31 - say Min height is screen
197:33 - we can do Flex item Center justify
197:36 - Center
197:37 - and let's go for background and I'm kind
197:40 - of forgetting what the colors are in
197:43 - Tailwind wouldn't it be nice if vs
197:45 - code's intellisense helped us out and
197:47 - said hey these are all the colors you
197:49 - can use these are the shades from 100
197:51 - 200 300 all the way up you can use
197:55 - well the extension Tailwind CSS
197:57 - Intel sense
197:59 - can help us out with that
198:01 - we can click install here
198:04 - enable it
198:06 - and the requirements for enabling this
198:08 - is that in our Explorer command shift e
198:11 - we have to have a tailwind.config.js
198:15 - and I highly recommend scrolling down
198:18 - here going through some recommended
198:20 - settings down here recommended vs code
198:23 - settings I have heard that there are
198:25 - cases where you should look through the
198:26 - settings just in case things don't work
198:29 - for you
198:30 - but hopefully they do on first try let's
198:33 - go back here
198:34 - and let's see if intellisense can help
198:36 - us out now sometimes you may need to
198:39 - reload your vs codes let's give it a
198:41 - shot control spacebar to bring up
198:43 - intellisense and here we are we have all
198:46 - of the colors that we can use for
198:48 - Tailwind inside of vs code
198:51 - let's say I wanted the green
198:53 - and check it out now it goes and narrows
198:56 - down our search to the greens and I can
198:58 - say four
198:59 - and check this out I don't even need to
199:01 - write out Dash 400 I did Green four and
199:03 - you can press enter right there
199:06 - the other cool thing is we get this nice
199:09 - color icon right here and we can hover
199:11 - over this and see what CSS properties
199:13 - are going to take place here
199:15 - let's say I wanted opacity we could say
199:18 - maybe five
199:20 - and drop that down to 75 press enter
199:23 - and if I hover it we get opacity 0.75
199:28 - this is really helpful the hover feature
199:30 - especially when you get to text large or
199:32 - text extra large
199:34 - I'm not entirely sure what those
199:36 - translate to sometimes so I hover over
199:37 - it and it says that's around 20 pixels
199:41 - and line height around 28 pixels and
199:44 - same for text large 18 pixels and 28
199:46 - pixels so that helps out really nicely
199:48 - you don't have to go to the docs or
199:50 - anything like that to see what the
199:51 - numbers are
199:54 - the intellisense extension is even good
199:56 - at doing responsive and those prefixes
199:59 - so if I did Excel
200:00 - it tells you hey the medium query will
200:03 - be for minimum width 1280 pixels and
200:05 - then you can do colon and then you can
200:07 - auto fill in whatever else you need
200:09 - let's do text to excel the last
200:11 - extension we'll talk about today is
200:13 - called headwind and this is a very
200:16 - opinionated thing you may want to use it
200:18 - you may not want to use it what it does
200:20 - is it will sort your classes in your
200:23 - class name right here so if I install
200:25 - this
200:28 - close that out go back over here if I
200:31 - did command shift p to open up our
200:33 - Command palette and I typed in headwind
200:36 - you can see sort Tailwind CSS classes I
200:39 - can press enter there and notice how it
200:41 - moved everything around
200:43 - it's an opinionated thing it looks like
200:45 - it does positioning first and then it
200:48 - does background stuff and then it gets
200:50 - into the inside box stuff so like font
200:53 - opacity so it looks like it works from
200:55 - the outside in which is kind of how I
200:57 - like to work as well
201:01 - give it a shot and see if you like it if
201:03 - you are pretty opinionated on how you
201:06 - like your Styles organized then stick
201:08 - with what you know but I did say in the
201:11 - previous video that I am a big fan of
201:12 - Auto formatting with prettier and maybe
201:15 - I should give this a bigger shot because
201:17 - when I start working with a couple other
201:19 - people on a Tailwind project it is nice
201:22 - to have a standardized way to sort our
201:24 - Tailwind classes
201:26 - another thing we can do with headwind is
201:28 - go into our settings type in headwind
201:32 - and down here we can set up our sort
201:35 - order
201:36 - we can also run on Save
201:40 - by default this is turned on you can
201:41 - turn that off and you can do it manually
201:43 - if you want with command shift p and the
201:46 - command palette
201:49 - but all in all Tailwind CSS intellisense
201:51 - tailwindocks and headwind are three
201:54 - great Tailwind extensions to improve
201:57 - your Tailwind workflow inside of vs code
201:59 - in this video we'll be talking about the
202:02 - markdown flow now markdown is something
202:04 - that I write often our entirebetter.dev
202:07 - blog is written in markdown in the MDX
202:10 - flavor
202:11 - and vs code has a lot of great built-in
202:14 - markdown features
202:17 - in addition to the features we're going
202:19 - to talk about some extensions which are
202:21 - marked down preview GitHub styling which
202:23 - gets you GitHub styling in the previews
202:26 - markdown all-in-one which is the big
202:28 - extension to know about and then
202:30 - markdown lint to help catch any errors
202:33 - in your markdown
202:36 - to start us off I have a brand new
202:38 - next.js application the next JS part
202:41 - isn't the important part what is is I
202:43 - wanted a readme right here
202:46 - so here is our readme file that you can
202:48 - browse through read as if you normally
202:51 - would and then if you wanted to view
202:52 - this you would probably have to go to
202:54 - the GitHub repo to see what it looked
202:57 - like in the readme
202:59 - one way we can use a preview in vs code
203:02 - is this nice little button up here
203:03 - there's like this little icon right here
203:07 - you can click that and you get a preview
203:09 - on the right side
203:11 - and if I scroll it also scrolls with me
203:14 - so if I start deleting things like this
203:16 - entire line right here I can delete that
203:18 - and immediately it drops from the
203:21 - preview
203:24 - that's a really nice feature to have
203:25 - another really cool feature to have if I
203:28 - open up the sidebar right here
203:30 - right now I only have the file explorer
203:33 - I can right click up here up next to
203:35 - where it says Explorer and now we get
203:37 - some options for panels I can click
203:39 - outline and here you can see getting
203:42 - started learn more Deploy on versel you
203:45 - can click to each one in your readme
203:49 - and this works if you have other things
203:52 - like an H3 let's go here H3 doing
203:55 - something cool
203:57 - and you can build out a whole outline so
204:00 - you can quickly navigate through your
204:01 - entire markdown readme just like that
204:05 - some settings that we talked about
204:07 - earlier is that number one we want our
204:10 - startup editor
204:13 - to be a new Untitled file so that's when
204:15 - we start vs code up we'll have a brand
204:18 - new file that looks like this
204:20 - and the other thing that we can do is
204:23 - files default language
204:26 - and that will be markdown
204:29 - we talked about that in one of the
204:31 - earlier videos and the reason for this
204:33 - is a lot of times if I open up vs code I
204:36 - want to just write some notes so I'll
204:38 - just write some notes
204:41 - some notes maybe I'll create a to-do
204:44 - list right here to do this
204:48 - and then a bunch of things to do two to
204:50 - do three
204:52 - and when I'm done I can X those out just
204:55 - like you would in markdown
204:58 - so those are the built-in features that
204:59 - I like a lot let's start talking about
205:01 - extensions
205:03 - if I open this up as a preview I can do
205:05 - command shift p to preview
205:09 - you can open preview you can open
205:11 - preview to the side which is what we
205:13 - just did and there's also open locked
205:15 - preview to the side
205:17 - and what locked preview does is if you
205:18 - click around the different markdown
205:20 - files the locked file the locked preview
205:23 - on the right will always stay I'll just
205:25 - click open preview to the side
205:27 - and now we get this let's go look at our
205:29 - first extension which is markdown
205:31 - preview GitHub styling
205:35 - let's go for this one that has 428k
205:38 - right here
205:41 - or 21k and what this does is it turns
205:45 - the markdown into a GitHub style
205:46 - markdown so you can see this is like the
205:48 - default mark down here
205:50 - I can go back to my file explorer open
205:52 - up that readme again
205:54 - and then let's open up this preview with
205:56 - the command palette this time command
205:57 - shift p open preview to the side
206:01 - and this I know it doesn't have that
206:03 - white background I think that's because
206:04 - of the theme that we're using but it
206:06 - does change to be GitHub styled markdown
206:10 - and I can prove this let's go into our
206:12 - extensions we can mark down preview
206:14 - GitHub style you can click this and
206:16 - disable it for a second
206:18 - and notice that things change a little
206:19 - bit over here here's our code block
206:21 - let's go back and enable this
206:24 - and our code block changes a little bit
206:26 - so the extension is working although we
206:28 - don't get that nice white background
206:30 - maybe it depends on the theme
206:34 - the second extension we'll talk about is
206:36 - the big one markdown all in one
206:40 - I can install this
206:44 - and we get some great features like
206:46 - keyboard shortcuts table of contents
206:48 - list editing and a couple other ones but
206:51 - let's start looking at it from here
206:54 - so let's say I wanted a list item number
206:58 - one
206:59 - I can press enter here and it
207:01 - automatically creates the next list item
207:05 - press enter Tab and it even gets to a
207:08 - nested list item
207:12 - so that's really nice there
207:14 - we can have a couple other things like
207:16 - if I had a link copied I can command see
207:21 - that normally if I wanted to create a
207:23 - link like right here I would have to do
207:25 - that do this right here and then paste
207:29 - in the link right there
207:31 - what I can do instead is just highlight
207:33 - it with markdown all in one and just
207:35 - paste and it automatically creates the
207:37 - link which is really really helpful
207:39 - there
207:42 - something else to note is
207:44 - you get some nice path intellisense
207:46 - inside of your markdown files with
207:47 - markdown all in one
207:51 - another thing to note is if I have a
207:54 - to-do list right here to do item one and
207:57 - we'll create a bunch more if I press
207:59 - enter it creates another to do item two
208:02 - what you can do here is option C and
208:05 - automatically complete these
208:07 - so that's a nice keyboard shortcut to
208:10 - have not the most important thing but
208:12 - nice to have
208:15 - another feature that this extension
208:17 - provides us is if I go over here and set
208:19 - table of contents
208:21 - I could do command shift p to open up
208:24 - the command palette table of contents
208:26 - you can create a table of contents here
208:30 - and there we go it automatically created
208:33 - the links to each of the sections inside
208:35 - of this markdown file it will also auto
208:37 - update whenever you save the file
208:40 - so let's say I deleted getting started
208:42 - and I
208:44 - saved it there we go getting started is
208:46 - removed
208:49 - and the last extension we're going to
208:51 - talk about here is markdown lint
208:52 - markdown lint this is a great extension
208:55 - to lint our markdown to find any errors
208:58 - or recommendations of how we can write
209:01 - markdown better
209:03 - if you scroll down here there are some
209:05 - great rules on what is going to be
209:08 - applied through markdown lint there's a
209:10 - lot like unordered list indentation
209:12 - there's a couple for like not having
209:14 - many single H1 so multiple top level
209:18 - headings in the same document is
209:19 - something you don't want to have
209:21 - let's go here and check that out this is
209:25 - already highlighted let's see what the
209:27 - problem is with this one
209:28 - first line
209:30 - in a file should be a top level heading
209:32 - okay let's go over here we'll create
209:34 - this H1 and say welcome
209:39 - there's a problem here no empty links
209:41 - that's an empty link let's just delete
209:43 - that right there let's actually delete
209:45 - this whole table of contents
209:48 - let's see what else if there was no
209:50 - spacing between these two highlight that
209:53 - and it would say there should be a
209:55 - surrounding blank lines around the
209:57 - headings you can actually fix that
209:58 - yourself or click the little refactor
210:00 - button and fix this violation
210:03 - and it would give you the space
210:06 - what else is in here it looks like our
210:08 - markdown file is good now not bad
210:12 - so with previews on the side here the
210:15 - GitHub style extension the markdown
210:17 - all-in-one extension and markdown lint
210:19 - vs code turns out to be a great markdown
210:22 - editor
210:24 - in this video we'll talk about laravel
210:27 - workflow and extensions
210:28 - and mostly we'll be talking about
210:30 - extensions
210:32 - laravel is such a great ecosystem and it
210:35 - shows in the number of extensions that
210:37 - vs code has
210:40 - the first ones we have are in PHP
210:43 - intellifents
210:44 - now vs code out of the box doesn't have
210:46 - the greatest PHP intellisense most of
210:49 - its intellisense works really great for
210:52 - JavaScript but not the best for PHP
210:55 - so we'll look at this package that adds
210:58 - a little bit stronger intellisense
211:00 - we'll look at PHP fmt which is PHP
211:03 - formatting
211:05 - laravel extra intellisense which is even
211:07 - more Intel sense for laravel specific
211:10 - things like views routes
211:13 - laravel blade Snippets which are just
211:16 - some nice Snippets to have and laravel
211:18 - blade spacer which is a convenience
211:20 - extension I have a laravel project here
211:24 - and notice that if I'm in this file this
211:27 - is just app http
211:29 - a controllers controller.php
211:32 - if I'm in here and I wanted to look at
211:34 - the symbols normally if I was in a
211:37 - JavaScript file I could go to the
211:39 - outline right here and see symbols I
211:41 - don't have any right here I could do
211:43 - command shift o to look at symbols as
211:46 - well I don't have any there
211:48 - let's go ahead and install PHP
211:50 - intellifents
211:53 - now there is another extension for PHP
211:55 - intellisense I think that the
211:58 - intellifins one works probably the best
212:00 - out of all of them it gives code
212:02 - completion and intellisense it can find
212:05 - definitions and symbols it adds
212:07 - everything that we'd expect from an
212:10 - intellisense in vs code
212:12 - I'll hit enable here
212:13 - and if we go to our controller now
212:16 - one thing to note is we have to make
212:18 - sure that we have PHP installed
212:20 - PHP Dash V right here I'm on 802.
212:24 - what I can do now is command shift o and
212:28 - notice that I have my symbols starting
212:30 - to show so I can click controller go
212:32 - there I can hover over these it shows
212:34 - where it's coming from and I can option
212:37 - click and go open that file
212:40 - so already we're able to link a couple
212:42 - different PHP features all around our
212:44 - app start syncing things up if I go to
212:46 - web.php I can do route right here and
212:51 - notice I'm getting all of the things
212:52 - that are in my project that I can do I
212:55 - can click route right here
212:57 - colon colon and I can get all of my
212:59 - really nice intellisense that is
213:01 - expected if I type in get right here you
213:04 - can see it says hey you want the URI and
213:06 - then the action which could be an array
213:08 - string callable or null
213:13 - so just by installing PHP intellifents
213:16 - we get exactly what we'd expect out of
213:18 - PHP and vs code
213:22 - next up let's talk about formatting
213:24 - let's say I press enter a couple times
213:27 - here and I did command shift p
213:29 - format document
213:32 - we would get this sort of formatting
213:33 - maybe you don't like how PHP
213:35 - intellifents formats things we can go
213:38 - ahead and install PHP fmt which is a
213:40 - popular PHP formatter
213:44 - install that
213:47 - I can go back to this file
213:51 - format document
213:53 - we'll see hey there are multiple PHP
213:56 - formatters which one do you want to use
213:57 - I'll click configure and we'll use PHP
214:00 - fmt
214:01 - so it didn't look like it changed much
214:04 - there if I did this a couple times
214:06 - format document again it would change as
214:09 - well so it looks like formatting for
214:11 - that route was pretty much the same but
214:14 - when you get into these files right here
214:16 - you may notice a difference so just
214:18 - choose what you like best as far as
214:20 - formatter goes
214:23 - the third extension we'll look at is
214:25 - laravel extra intellisense
214:31 - I'll click install here and let's go
214:32 - look at what this does
214:34 - if I go down we get route names and
214:37 - Route parameters for auto completion we
214:39 - get configs and they have a pretty nice
214:42 - GIF here
214:43 - foreign
214:45 - so let's say that we went into our
214:47 - routes again web.php we could have this
214:51 - route view here and let's call it name
214:54 - and we'll say welcome
214:58 - we can go into a blade file now if I go
215:01 - here and I go into resources views and
215:05 - let's just do with welcome.blade
215:08 - I can go over here and say
215:11 - route
215:13 - and notice how it brought up all of the
215:15 - routes from our project
215:18 - so PHP intellifents gives us PHP
215:21 - intellisense but this laravel extra
215:24 - intellisense package gives us stuff
215:26 - about our specific laravel project as
215:29 - far as names there's that welcome route
215:31 - we just created I can click that and
215:33 - We're Off to the Races
215:36 - now the problem here is we have a blade
215:39 - file but check it out there's no syntax
215:41 - highlighting here so let's go here and
215:44 - let's type in laravel Blade
215:47 - there is laravel blade and laravel blade
215:50 - Snippets
215:52 - I'm going to go ahead and install the
215:53 - Snippets package even though it doesn't
215:55 - sound like it has syntax highlighting it
215:57 - does have syntax highlighting support so
216:00 - we're going to install one package to do
216:02 - syntax highlight and Snippets instead of
216:04 - just installing this single package that
216:06 - does just syntax highlighting and
216:08 - formatting
216:09 - and this one also has 1.3 million
216:12 - installs so we'll do this one
216:16 - we'll go back to our file and already we
216:18 - see some nice syntax highlighting there
216:21 - we also get some nice Snippets so I can
216:24 - do insert snip it
216:27 - and you can look at all of the blade
216:29 - features it is prefixed with that b
216:31 - colon so if you did B colon you could
216:33 - search through all of the blade things
216:35 - that come with this let's do csrf right
216:38 - there that's a nice one to have let's
216:40 - see what else you could do at four
216:43 - there's at four for each let's do a four
216:46 - each
216:47 - and then you could say product
216:50 - as product sorry I did that wrong it
216:54 - should be products as product and you
216:57 - could tab through and do all that stuff
216:58 - there
216:59 - really nice extension to have and the
217:02 - last one we'll talk about is laravel
217:04 - blade spacer which is a convenience
217:06 - feature where you install this and as
217:09 - soon as you start typing it'll just add
217:11 - spaces in between your brackets just a
217:15 - small thing that I like personally it
217:17 - kind of drives me crazy when there's no
217:19 - spaces between these
217:21 - let's say we also had a problem with a
217:24 - product and let's remove these
217:27 - laravel blade spacer only works when you
217:29 - first create the thing so let's say we
217:32 - wanted to format this I could do command
217:33 - shift p format document
217:36 - but there is no blade files formatter so
217:39 - I'll go here and we can install laravel
217:41 - blade formatter
217:44 - and we'll come back to our blade file
217:46 - let's do a format here
217:49 - and there we go so we get a lot of
217:51 - changes but we get our spacing back so
217:53 - we can have this Auto format for the
217:55 - project and it makes it really nice
217:56 - across different team members
218:00 - and laravel's eco
218:05 - laravel's ecosystem is fantastic so
218:07 - there's even more projects around it
218:09 - like Alpine like Livewire and there are
218:12 - tools like Alpine
218:14 - there's alpine.js intellisense here
218:17 - there's Live Wire
218:19 - language support that you can install
218:21 - that does great for Livewire projects
218:24 - there's Tailwind CSS intellisense which
218:27 - I believe came out of the
218:30 - molaravelle ecosystem
218:32 - so there is no shortage of great laravel
218:35 - extensions laravel ecosystem again is so
218:38 - fantastic really love to see it
218:42 - all right we have made it to the
218:43 - workflows section of this course and
218:46 - this is going to be the really fun part
218:48 - because this is where we get to be very
218:50 - productive we get to be very real world
218:53 - so the way we're going to run this is we
218:55 - are going to go through separate
218:57 - workflows for each specific task that
218:59 - you'll be doing in vs code
219:02 - so what I mean by that is we'll have a
219:04 - workflow for let's say JavaScript we'll
219:06 - have a workflow videos for react or
219:08 - we'll have workflow videos from markdown
219:10 - maybe if you have git and GitHub if you
219:13 - are using npm there's all sorts of
219:15 - workflows that we can make productive in
219:18 - vs code
219:19 - but before we jump into that I want to
219:21 - talk about some visual upgrades to vs
219:23 - code and I want to make our vs code look
219:26 - a little bit better we're here so why
219:28 - not make a really really good looking
219:30 - setup
219:42 - thank you
219:44 - all right so the way this is going to
219:45 - work is I will have three settings to
219:48 - talk about for you in this video we're
219:50 - gonna do render indent guides we're
219:52 - going to do line height and we'll also
219:54 - do breadcrumbs
219:57 - and as we get further into this course
219:58 - I'm going to get a little bit more
220:00 - opinionated on my personal setup and how
220:02 - I think productivity works best in vs
220:05 - code but as always I'll give you the
220:07 - options and show you my workflow and
220:09 - process to see if you like these certain
220:11 - settings if not please feel free to use
220:14 - your own discretion and whatever you
220:16 - think is best for your setup
220:18 - and after settings we're going to talk
220:20 - about one extension in this video and
220:22 - that'll be adding on a theme called one
220:24 - dark Pro which I think is really nice
220:26 - and really clean
220:37 - so let's go into our vs code here we
220:40 - have a pretty decent looking vs code but
220:42 - I think we can do a little bit better
220:44 - if we opened up a file here if we did
220:46 - Dom events right here
220:49 - we have vs code it looks pretty decent
220:51 - but I want to talk about cleaning this
220:53 - up a little bit because I personally
220:55 - don't use all of the things in the UI
220:58 - so let's start with indent guides indent
221:01 - guides can be very helpful but I try not
221:03 - to indent more than maybe three or four
221:05 - levels deep so I don't think indent
221:07 - guides are too useful let's go ahead and
221:09 - disable that we're going to open our
221:11 - settings with command comma
221:13 - we'll search for indent guides
221:16 - and we'll just turn that off right there
221:19 - now if we go back to vs code a little
221:21 - bit cleaner
221:23 - and you don't get the indent guides and
221:25 - you can still kind of see what's going
221:26 - on here and if you hover over one and
221:28 - click into any of your elements you'll
221:30 - see the ending element anyway
221:32 - so it's good to see
221:34 - that connection there so for me indent
221:37 - guides are something you can forgo if
221:39 - you have a project that doesn't indent
221:41 - too many times
221:43 - the next setting we'll talk about is
221:45 - line height so I'll open up and go to
221:47 - line height
221:48 - this is personal preference I increase
221:50 - this to about 38 maybe more sometimes
221:54 - but what that does is increase the line
221:56 - height in between all of these so if you
221:58 - look there's this big section right here
222:01 - a little bit more spacing than when I
222:03 - had it at lower settings so if I move
222:05 - this over to the right and I'll drag
222:07 - this to the right panel
222:09 - and let's actually increase vs code
222:13 - I'll search for line height again
222:15 - let's set this to 32 right there
222:18 - and notice how it gets a little bit
222:20 - shrunk it gets a little bit tighter 28
222:22 - right there
222:24 - let's go for zero
222:27 - so there you go I personally like to put
222:29 - it at 38.
222:32 - good spacing not too much spacing
222:37 - the third setting to talk about is
222:38 - breadcrumbs and I'll go here
222:41 - and we can do this change right inside
222:43 - of vs code
222:45 - here are the breadcrumbs if you find
222:47 - these useful please go ahead and keep
222:48 - these I personally use the keyboard
222:50 - shortcuts to move around my files so I
222:53 - don't really like the breadcrumbs I'm
222:55 - going to go command shift p
222:56 - red crumbs and we want toggle
222:59 - breadcrumbs
223:03 - and one that I didn't talk about in the
223:05 - slides that we had earlier is that I
223:07 - will always go in and toggle the
223:10 - activity bar the status bar the mini map
223:13 - and the tab bar on the fly so throughout
223:17 - the workflows you're going to see me
223:18 - doing that change command shift p
223:20 - activity bar and it'll be toggle
223:22 - mini map
223:24 - status bar
223:26 - and tab bar I don't do this one as much
223:29 - it just limits it down to one tab only
223:32 - but
223:33 - that's something to keep in mind
223:36 - but usually I'll try to code really
223:38 - clean and we have a minimalist workflow
223:40 - video that we're going to talk about a
223:42 - lot of this stuff but notice that I will
223:44 - just keep toggling things on and off
223:46 - throughout this course command shift p
223:48 - let's bring the activity bar the status
223:50 - bar and the mini map back
223:57 - all right and the last part to this is
223:58 - let's add in one more theme I think this
224:00 - is a good theme but I'm not really sure
224:02 - I like the lines let's open up the
224:05 - extension panel command shift X right
224:07 - there
224:08 - I'm going to search for one dark Pro
224:11 - and I think this is a really clean theme
224:14 - we'll go for the one with 3.8 million
224:16 - installs I'll click install here
224:19 - and we'll set it notice how to open the
224:21 - command palette I'll just click it right
224:23 - there and it's turned on
224:25 - so if I hide the sidebar hide that
224:27 - notice that here we are it looks a
224:29 - little bit cleaner than it did with the
224:31 - other theme there's not any like lines
224:33 - or Borders or anything so this is a
224:35 - really really nice theme to get a clean
224:37 - coding environment
224:39 - all right that's going to wrap it up for
224:42 - our visual upgrades and let's get
224:44 - started and move into our workflows
224:47 - let's start moving into the workflows
224:50 - section of this video there's going to
224:52 - be workflows that are essential there's
224:54 - going to be productive workflows and
224:56 - there's going to be
224:59 - let's start moving towards the workflows
225:01 - section of this video
225:03 - to get us started I want to talk about
225:05 - the setup for these sections so we have
225:09 - up till now installed a couple
225:10 - extensions we've done a few different
225:12 - settings at the beginning of every
225:14 - workflow video I'm going to reset back
225:16 - to this state
225:19 - and the reason for this is that if there
225:22 - are no new extensions that carry over
225:23 - from video to video each workflow is its
225:26 - own compartmentalized video so you can
225:29 - go into each workflow knowing that all
225:31 - of these settings and extensions in that
225:33 - video will be valid for that workflow
225:38 - and this is really helpful too because
225:39 - in the future let's say uh we find some
225:42 - new settings or new extensions I can
225:44 - always re-record that specific workflow
225:47 - and not have to mess around with any of
225:49 - the other workflows so I'm trying to
225:50 - make this as extensible and long living
225:53 - as possible
225:55 - to start us off what extensions are we
225:57 - going to have installed at the beginning
225:59 - of every video command shift X will have
226:02 - advanced new file GitHub theme material
226:05 - icon theme and one dark Pro and really
226:08 - we don't even need GitHub theme since
226:09 - we're using one dark Pro right here so
226:11 - I'm actually going to go ahead and
226:13 - uninstall that
226:16 - so now we have one two three extensions
226:20 - let's talk about the settings we can go
226:22 - into our settings with command comma
226:26 - and over here under this dot dot you can
226:29 - say show modified settings and that will
226:31 - show you only the settings that we have
226:32 - modified ourselves
226:34 - so these are the ones that we've done in
226:36 - all of the videos up until now an easier
226:38 - way I think to see the modified settings
226:41 - is command shift p and we'll say
226:43 - settings Json
226:46 - and this is going to be all of the
226:48 - settings that we have set ourselves I'm
226:50 - going to put all of this in the
226:52 - description down below so you can always
226:54 - just copy it paste it in here and vs
226:56 - code will take all of these settings as
226:58 - the default
227:00 - so you can see that we have our theme
227:02 - Here we have font size here where is
227:05 - line height it should be here as well
227:06 - there's line height
227:08 - breadcrumbs is false
227:12 - multi-cursor modifier I've changed zoom
227:15 - level we have default language for new
227:17 - files startup editor is a new Untitled
227:19 - file word wrap rulers tab size all that
227:22 - good stuff and what's cool too is if you
227:25 - go into the settings Json and not the
227:27 - settings like UI version if you click on
227:30 - any one of these let's say breadcrumbs
227:33 - enabled there's little settings button
227:35 - right here where you can edit and you
227:36 - can actually say true or false and vs
227:38 - code knows what the valid answers for
227:42 - that question are right there true or
227:44 - false
227:46 - there we go
227:47 - so these are the settings I'll paste
227:49 - them down below but that's it that's the
227:51 - start to every video that we're going to
227:53 - make in these workflows is these
227:55 - settings three extensions and every
227:57 - single time I'm going to reset for each
227:59 - workflow
228:02 - alright super exciting stuff let's get
228:04 - into the workflows
228:07 - in this video I'll be talking about a
228:09 - minimalist workflow
228:11 - and I know in the past videos we've
228:13 - talked about hiding the activity bar at
228:15 - the status bar the minimap but I want to
228:18 - take this a step further I want to take
228:20 - this to a more minimalist approach and I
228:22 - want to talk about the benefits of it
228:25 - so if you're coming from the world of
228:27 - Vim or editors like that
228:30 - they excel at hiding everything away
228:32 - from you so that you focus on exactly
228:34 - what you need to focus on
228:36 - editor like vs code comes with all the
228:39 - bells and whistles but with that it
228:41 - comes with distractions
228:43 - so the minimalist workflow that means if
228:46 - I want to get to a file I'm not going to
228:48 - use my mouse to click around I'm going
228:49 - to deliberately say oh I want to go to
228:52 - my package.json I'm going to do command
228:55 - p
228:56 - type in package.json and go straight to
228:58 - it and check this out very minimalist no
229:01 - activity bar no status bar minimap not
229:03 - even line numbers which we can talk
229:06 - about I'll show you the setting but you
229:07 - can keep it for yourself if you don't
229:09 - like it or you do like it
229:11 - and here we are so we are moving like we
229:13 - would in a Vim style editor where
229:16 - everything we want to do is very
229:18 - deliberate
229:19 - we're not just clicking around a UI
229:21 - because there's lots of buttons there
229:23 - are no buttons If I wanted to open the
229:25 - readme now I would open up the readme
229:27 - and check that out even the top there
229:29 - are no extra tabs so you are focused on
229:33 - one specific task and nothing else
229:36 - so I want to show you some settings I
229:39 - think I have 11 for you here that you
229:41 - can mix and match to create your own
229:43 - specific minimalist workflow you don't
229:45 - have to take all of them you don't have
229:47 - to take any of them really but I just
229:49 - want to show you them so that you're
229:50 - aware of them
229:52 - and then after we talk about the
229:54 - settings I want to talk about two
229:55 - features that I think are really cool
229:58 - so let's go into our vs code here and we
230:01 - have our activity bar we have our status
230:02 - bar let's open up package.json let's go
230:06 - here there's package.json we have our
230:09 - line numbers we have our code folding we
230:12 - have our mini map we have all the things
230:14 - that vs code comes with
230:15 - but I want to talk about hiding some of
230:17 - these things so that we can get to that
230:19 - minimalist workflow we just saw
230:22 - so to start us off I'm going to go into
230:24 - settings command comma
230:26 - and we can do all of this in settings
230:28 - I'm going to do render indent guides
230:29 - which we already removed in the previous
230:31 - video so I'll remove them here
230:35 - and now we go back and the indent guides
230:37 - are gone
230:39 - I have a lot of settings to show you
230:41 - though so I don't really want to go one
230:42 - by one in the UI I want to go command
230:45 - shift p let's go for the settings Json
230:47 - settings Json
230:50 - and I am going to increase the size of
230:53 - my vs code and this is an easy way to
230:55 - change out settings and see what's going
230:56 - on so I'll split this right over here
230:59 - and I'll drag this over
231:01 - so now here are our settings
231:03 - and here is the package Json I'll leave
231:06 - this up so we can see and I'll actually
231:08 - zoom out it's getting a little cramped
231:10 - here
231:12 - so the cool thing about this is that as
231:15 - we change this settings.json file and
231:18 - I'll put all of these settings down
231:19 - below so you can copy and paste them
231:21 - into your own setup we are going to see
231:23 - the changes take place as soon as we
231:25 - save the file so let's go here I'm going
231:28 - to copy this one from my cook for my
231:30 - notes here and I'm going to paste this
231:32 - in
231:33 - activitybar.visible is false I'm going
231:35 - to click save and you'll see the
231:36 - activity bar hide
231:38 - there we go
231:40 - so that's activity bar visible and I'm
231:42 - just going to keep pasting these in and
231:44 - talk through them and then you can go
231:46 - down below until the notes of this video
231:48 - copy them and paste them into your own
231:50 - settings file you can also use the
231:53 - visual UI settings and kind of Click
231:55 - through there
231:56 - let's hide the status bar as well I'm
231:59 - going to paste that in and you know that
232:01 - we can also do this through the command
232:03 - line with command shift p and say status
232:06 - bar
232:07 - but not all of these are found in the
232:09 - command palette so that's why I'm doing
232:10 - this this way
232:12 - minimap enabled let's remove the minimap
232:14 - and these are all the basic UI main UI
232:18 - stuff
232:21 - and the last one here is open editor so
232:23 - if I open up my settings right here and
232:26 - I open up a couple more files there we
232:28 - go you can see that over here we have
232:30 - open editors it shows you group one has
232:32 - package.json which is this left side
232:35 - here you see group 2 has these four
232:37 - files which is this right side right
232:39 - here I personally don't like open
232:41 - editors myself I don't really use it so
232:44 - you can right click here Hide open
232:46 - editors or you can be more explicit and
232:49 - in your settings you can just set it to
232:51 - zero right here and I'll go back to my
232:55 - settings
232:56 - I'm going to right click close to the
232:58 - right and this will close all those
233:00 - and I'll paste that in right there
233:05 - perfect so now onto tabs which is all of
233:08 - this right here and this is the
233:09 - package.json let's go open a couple more
233:12 - so we can see I'll open git ignore open
233:14 - the readme
233:16 - each of them is up there so let's do
233:19 - tabs
233:21 - stuff here
233:22 - and I have three settings for this let's
233:24 - go for show icons
233:27 - and this will remove the icon that you
233:29 - see right there and I'll paste that in
233:31 - click save
233:33 - and there we go a little more minimalist
233:35 - this I'm on the fence about I like the
233:37 - icons myself if you don't and you want
233:39 - to go more minimalist go ahead and
233:41 - remove them
233:42 - and if you hover each tab has a close
233:45 - button this little X right here
233:47 - if you don't like that if you sometimes
233:48 - accidentally hit it you can turn that
233:50 - off as well and that is tab close button
233:53 - and I'll paste that right here
233:57 - and the ultimate minimalist tab setting
233:59 - is just turning off tabs so you only see
234:02 - the current tab that you're on you see
234:04 - here there's package Json get ignore
234:06 - readme I'll just turn off show tabs to
234:09 - false I'll click save and now there's
234:11 - only one per side so I can still see
234:14 - them open
234:15 - I can click here I can go to each one
234:18 - but if I close one with command W it'll
234:20 - open up the one behind it so they're
234:22 - still there you just don't see the tabs
234:26 - next section is gutter stuff
234:29 - and the gutter is this left section
234:31 - right here with all of our stuff
234:35 - and if I was in a JavaScript file let's
234:38 - go for index.js
234:40 - if I was here you could see the debugger
234:42 - buttons right here you can set
234:43 - breakpoints and the code folding and the
234:46 - line numbers are here we can disable all
234:48 - three of those things with this section
234:50 - right here so I can turn off line
234:52 - numbers
234:53 - with line numbers is set to off
234:56 - and this is personal preference if you
234:58 - like it if you don't
235:00 - choose your own idea there but even with
235:04 - line numbers off and you leave this
235:05 - gutter it gives a nice clean effect
235:10 - glyph margin gets rid of that debugger
235:12 - section right there with the Red Dot so
235:14 - I'll turn off glyph margin
235:16 - and it brings it all the way to the left
235:18 - and the last part here is there is code
235:20 - folding with that section right there
235:22 - you can just turn off code folding for
235:25 - the entire editor
235:27 - if you have never used it
235:29 - and now that bumps it all the way to the
235:31 - left I personally like it when there's a
235:33 - little bit more margin
235:35 - those are the settings to go for the
235:37 - minimalist approach the main UI stuff
235:39 - the tab stuff the gutter stuff and now
235:41 - we've hidden so much stuff in our UI and
235:44 - we can command W there and now if I want
235:47 - to get to a certain file I need to know
235:49 - exactly what file I want to go to I'm
235:51 - not just clicking around the UI I just
235:53 - go to okay I need the index.js
235:56 - and if I'm here I say oh I don't really
235:59 - need that anymore I'm going to go to the
236:02 - app.js right there
236:07 - and we can even use more keyboard
236:09 - shortcuts where we say go to
236:12 - and we can go to a symbol
236:15 - in editor and that's command shift o and
236:18 - now we can see oh there's default right
236:19 - there so I'll go to let's go to this URL
236:23 - and I'll press enter and that jumps all
236:24 - the way down there so by using command p
236:27 - and saying oh let's go to index
236:29 - I want this a better Dev footer right
236:32 - there
236:33 - and then I'm going to command shift o
236:34 - I'll find all the symbols in there and I
236:36 - can navigate to anything I need and look
236:38 - how quick that was I didn't have to
236:40 - click around I just knew that I wanted
236:42 - this file and then I'm going to open up
236:44 - the symbols I'll look through those and
236:47 - type in there
236:49 - so this is an approach you'd probably
236:50 - see closer to the Vim side of things
236:52 - where everything is hidden and you are
236:54 - very deliberate about where you're going
236:57 - if you are not a fan of this I'm going
237:00 - to hide all of this go back into my
237:01 - settings Json and let's just delete all
237:04 - of these settings right here
237:07 - I'll delete press save
237:09 - and we're back to normal
237:12 - if you aren't a fan of that but you do
237:13 - want the minimalist approach every once
237:15 - in a while you can do command shift p
237:18 - there is centered mode
237:20 - toggle centered layout and now we get
237:23 - centered layout where the left and the
237:24 - right are margin over there and padding
237:28 - and we can type in piece up and down the
237:30 - middle here
237:32 - but what we can also do is let's turn
237:35 - off centered layout and I'm doing this
237:37 - all through the command palette
237:38 - let's open up the readme again
237:41 - is Zen mode
237:43 - so if you turn on Zen mode all of the
237:45 - stuff that we just did in settings
237:47 - pretty much happens there's no line
237:48 - numbers there's no status bar activity
237:50 - bar and you get this nice Zen mode
237:53 - really focused writing
237:55 - and you can still go ahead and open
237:57 - files like you would index better Dev
238:00 - footer
238:02 - and type as you need to
238:05 - if you do it through settings or if you
238:06 - do it through Zen mode in centered mode
238:08 - just know there are tons of options to
238:10 - get whatever UI that you like for your
238:12 - vs code
238:16 - this video is about the terminal and the
238:20 - terminal built into vs code specifically
238:23 - this is something that I thought I would
238:25 - never use I was a big fan of using this
238:27 - is iterm
238:29 - and I was a big fan of using iterm or an
238:32 - external terminal and I never thought I
238:34 - would start using the built-in vs code
238:36 - terminal but that is exactly what
238:39 - happened
238:40 - and to get to the terminal you can do
238:42 - control tilde and that will open up the
238:46 - terminal right here down at the bottom
238:47 - for you
238:49 - and you can do whatever you need to from
238:51 - here you can npm install
238:54 - anything you think you could do from the
238:56 - normal terminal outside you could do in
238:58 - here
239:00 - so I wanted to talk about the workflow
239:03 - here how we can start using it and from
239:06 - here we can learn the control utility
239:08 - keyboard shortcut and never have to
239:10 - leave vs code and go back over to
239:13 - another terminal
239:15 - so let's close this out we don't need
239:16 - this anymore from here we can open it
239:19 - with control tilty again and let's see
239:21 - some quick ones that we can do we can go
239:23 - over here right now I'm using zsh
239:25 - you can split the terminal
239:29 - and now you can see two zsh is right
239:31 - here
239:32 - and by default they're going to open up
239:34 - in the folder for where you are already
239:37 - in your vs code project
239:39 - so my project I'm currently in the
239:40 - productive vs code site which is the
239:42 - GitHub repo for the site that sells this
239:46 - course and you can check out that GitHub
239:48 - repo it's totally open you can see how I
239:49 - built the main website but here you can
239:52 - go ahead over here and close
239:56 - and you can also split editors to the
239:59 - right so you can have that another way
240:01 - to do that
240:02 - you could press add Right Here and Now
240:04 - check this out we have groups so if I
240:07 - had this group which was split and this
240:09 - one right here this one is a whole other
240:11 - group
240:12 - and you might be wondering well Chris
240:14 - what's the benefit of doing something
240:16 - like this over here I could have npm run
240:20 - Dev this is a next JS website so I could
240:22 - have this running it'll start on
240:24 - localhost 3000
240:26 - and then I can do all of the stuff I
240:28 - need to over here let's say I need to do
240:30 - npm installs let's say I needed to run
240:32 - other commands
240:34 - we can do that all in another group
240:37 - another cool thing we can do with the vs
240:40 - code terminal is you can press this
240:42 - little button right here and it will
240:43 - increase the size so you can have your
240:45 - terminal full screen in case you need to
240:47 - see the entire list maybe you need to
240:49 - list out some routes if you're using
240:51 - laravel maybe you need to do some tests
240:54 - in here
240:55 - close that another button we can press
240:58 - here is you can move into editor area
241:01 - and I just right clicked that there
241:03 - and that brings it into its own little
241:05 - tab where you can keep that open up
241:07 - other tabs and this will always be
241:09 - running right there
241:12 - so that's beneficial if you need the
241:14 - extra real estate space
241:17 - on top of just moving around adding tabs
241:20 - and all that good stuff let's delete a
241:21 - couple of these
241:23 - let's go into our settings and let me
241:26 - show you type in terminal
241:28 - there's a couple cool things we can do
241:29 - here
241:30 - so one I think the terminal default font
241:33 - size is a little too small so just go
241:34 - terminal font
241:36 - and we can increase to let's say 16.
241:41 - and the terminal font line height
241:45 - a terminal line height I think can also
241:46 - get increased to maybe about 1.5
241:50 - let's go check it out now a little bit
241:52 - larger
241:53 - LS right here and there's a little bit
241:55 - more spacing between the lines
241:58 - a little bit easier to read That's all
242:00 - preference please play around with that
242:01 - to see what you like
242:10 - foreign
242:13 - the next small trick I want to show you
242:15 - is if you are in your terminal you can
242:17 - LS we can go ahead and clear this by
242:20 - typing in clear and pressing enter
242:23 - or a quick shortcut to clear everything
242:26 - out is command K and I believe that
242:28 - works on Mac I'm not entirely sure on
242:30 - the Windows side so it may or may not
242:31 - work over there
242:34 - the next trick I want to show you is if
242:36 - you have a long running process that you
242:38 - need to keep checking let's say you're
242:40 - running some logs and you want to keep
242:42 - opening and closing to check the logs
242:44 - you don't have to do that you can just
242:46 - right click here and move panel to the
242:48 - right
242:49 - and now if you have something long
242:50 - running npm run Dev
242:52 - well it's broken here but if you have it
242:55 - running you can just leave it here and
242:57 - code over here
242:59 - let's say I was in my pages index.js we
243:04 - could do all of our work in here and as
243:06 - we're working this would continually run
243:08 - and you can see everything over there
243:11 - and when you're done right click over
243:12 - here move panel to bottom and you're
243:15 - back in business
243:18 - the last setting I want to show you is
243:20 - if you are on Windows or if you have
243:22 - some special setup for your terminal is
243:25 - go over here just type in terminal
243:27 - and scroll down you have OS X exec or
243:31 - Windows exec so here on OS X I'm using
243:34 - terminal.app on Windows it's using
243:37 - command so if you wanted to use let's
243:38 - say WSL you could just type in WSL and
243:41 - that would work for Windows subsystem
243:43 - for Linux
243:45 - but just be aware that you can change
243:46 - out whatever you need here
243:51 - all right so just get used to that
243:52 - control tilde and start using the
243:54 - built-in terminal I think you'll find
243:56 - that once you don't have to leave vs
243:58 - code and you see the benefits of vs code
244:01 - that's staying inside of it provide I
244:03 - think you'll start to use it a little
244:04 - bit more just like I have
244:08 - this video is all about using git and
244:11 - GitHub from within vs code
244:14 - and Microsoft owns vs code Microsoft
244:16 - owns GitHub it makes sense that they
244:18 - would be intertwined really well
244:21 - we even have a git panel over here on
244:23 - the side in the sidebar
244:25 - so Source control we can open a folder
244:27 - clone a repo but right now I just have
244:30 - this folder over here and I'll just drag
244:31 - it into vs code
244:34 - do I trust the authors of these files
244:36 - yes I do I made them so here we are
244:39 - brand new file let's go ahead and say
244:41 - index.html
244:43 - foreign
244:45 - we have a brand new pretty much website
244:47 - right here
244:49 - I can go over here close this out and
244:51 - let's start working with the get
244:53 - workflow
244:55 - Step One is we should be able to create
244:57 - a repo from within here
244:59 - now normally you might open up the
245:01 - terminal and say git init
245:04 - and start there and then you would add
245:06 - your git remote for your remote origin
245:09 - or over here you can just open up the
245:11 - git panel and we see initialize repo or
245:15 - publish to GitHub
245:16 - and publish to GitHub actually
245:17 - initializes the repo for us
245:21 - so let's initialize the repo first
245:24 - and now we can see that if we make any
245:27 - changes we can have it in our source
245:28 - control panel
245:30 - so that's really nice to have over here
245:32 - we don't really see it but if I open up
245:34 - the terminal and did an lsal you can see
245:38 - a new DOT get folder right here which is
245:40 - what holds all of the get information we
245:42 - have
245:45 - next up now that we have a repo
245:48 - we should probably be able to git add
245:50 - and get commit to it so we can stage
245:53 - changes and also commit changes
245:55 - so if I go over here the normal way we
245:58 - would do this is git add Dash a or git
246:01 - add period to add our files
246:03 - that way we can stage them and once
246:06 - they're staged we can get commit with a
246:08 - message my first files
246:11 - now I'm not going to do either of those
246:13 - you can do these in the terminal but I
246:15 - want to show you a cooler way which is
246:17 - the way that I use exclusively these
246:19 - days and I use it all from the git panel
246:23 - step one here is I can stage these
246:26 - changes so I can press this plus right
246:28 - here
246:28 - and it goes up there
246:31 - next up I can commit so I can say my
246:34 - first file
246:38 - and then over here I can say this check
246:40 - mark right here which is going to commit
246:43 - and now we have a commit done
246:46 - let's go ahead and change that file
246:48 - again let's go into the index.html let's
246:50 - do exclamation mark for the Emmett
246:53 - shorthand for a full HTML page
246:56 - and I will go see in this icon right
246:58 - here says hey there's some more changes
247:00 - here there's actually one change
247:02 - so I can click that
247:04 - and this is what I really like about the
247:05 - git panel this is a way that I can view
247:08 - the changes that have been made and keep
247:10 - them or change them or delete them if I
247:12 - need to
247:13 - I can click each file here and you can
247:16 - see oh on the left this is what it used
247:18 - to be and on the right these are the
247:19 - things that got added
247:22 - so if I do like these changes I can go
247:24 - ahead and Stage it by pressing plus you
247:26 - can see it under staged changes now
247:29 - or if I don't like it I can just go over
247:31 - here and unstage it using the little
247:34 - minus button and say no I don't really
247:36 - want to keep that I'm going to undo this
247:38 - specific change so I can undo a single
247:41 - file or you can undo multiple files with
247:43 - this button right here but I'll do the
247:45 - single
247:47 - do you want to discard changes
247:48 - index.html yes I do
247:52 - this is really helpful when you have
247:54 - multiple files let's go ahead and create
247:56 - a couple more files let's say style.css
248:00 - let's say magic.js
248:05 - and let's go over here we have two
248:07 - changes I'm going to add this one and
248:09 - add this one and say adding JS and CSS
248:14 - I can press the little check mark here
248:16 - or a shortcut here for a keyboard
248:17 - shortcut is to do command enter and that
248:20 - will stage and commit
248:24 - let's say we have some changes we want
248:26 - to make here so I have magic.js let's
248:28 - add in some stuff console.log hi
248:31 - everyone
248:32 - and let's add some Styles over here for
248:35 - body let's say background is cuckoo
248:39 - and I'll save that
248:40 - so now we have two changes but let's say
248:43 - for your team you only want to be able
248:45 - to commit certain things and you want to
248:47 - be very specific about your commits I
248:49 - can do a plus right here for just the
248:52 - Styles I can say adding some base styles
248:57 - I'll press command enter to commit just
249:00 - that change and now I can change and go
249:03 - ahead and Stage the JavaScript and
249:05 - Commit This and saying adding starting
249:08 - Js
249:10 - and the cool thing about that is you are
249:11 - able to
249:12 - cherry pick
249:15 - and the cool thing about doing it this
249:18 - way is that you'll be able to revert
249:19 - each specific commit by itself so you're
249:22 - not lumping a bunch of features into one
249:24 - commit
249:25 - I think the source control panel makes
249:26 - it really easy to pick
249:28 - the changes that you want per commit
249:32 - once we're ready to go we can command
249:34 - shift p push
249:36 - and we can get push
249:38 - and it says no remotes configured yet I
249:41 - can add a remote
249:43 - and we can add a remote from GitHub
249:47 - and this is where it gets fun you get to
249:48 - sign in with GitHub so that all the
249:51 - things that are happening in your vs
249:52 - code can get pushed up to your GitHub
249:54 - account
249:55 - I'll go ahead and allow and what I see
249:58 - here is a login button right here
250:01 - authorize Visual Studio code to access
250:03 - GitHub I will continue here
250:06 - continue here
250:08 - open Visual Studio code
250:12 - allow an extension to open this URI look
250:14 - at all this authentication stuff
250:18 - and once I press OK it starts searching
250:20 - for all of my GitHub repos up there and
250:22 - you can pick the specific one that you
250:24 - want to push to
250:27 - if you don't want any of those and you
250:29 - want to say Okay I want a brand new
250:30 - folder you can go to github.com create a
250:33 - brand new repo and then use that as your
250:35 - remote
250:37 - what I'll do here is I'm just going to
250:38 - go here
250:39 - RM rf.dit get folder
250:43 - and so we don't have a git folder now
250:45 - if we go back here and click refresh
250:49 - cancel that we can initialize repo or
250:51 - publish date to GitHub so if I publish
250:53 - to GitHub
250:55 - you can pick private or public repo and
250:58 - it'll just use the name of the folder
251:00 - that you're currently in
251:02 - you can go ahead and do that but what
251:03 - I'll do next is show you what it looks
251:05 - like to clone repos that are already
251:07 - existing from GitHub
251:10 - while we have vs code open I'll do
251:11 - command shift p clone
251:14 - and we have git clone right here
251:16 - clone from GitHub and since we're
251:18 - already authenticated it'll know to go
251:20 - grab our repos
251:22 - we can go down here and say HTML CSS
251:24 - website course I'll click this one right
251:27 - here
251:28 - and you can pick where you want this to
251:29 - go I'll put this in my Batcave folder
251:32 - select repo
251:35 - it will clone it and you can open it in
251:37 - the current window open in a new window
251:39 - or add to your workspace I'm going to
251:41 - open it in the current window
251:45 - do I trust authors of these files yes I
251:47 - do I can just trust everything in this
251:49 - Batcave folder since I already know that
251:51 - this is my folder
251:54 - and now we have a repo we have our
251:57 - source control working and it's pointed
251:58 - directly to that GitHub repo
252:01 - so let's go make some changes right here
252:02 - I'm going to say let's change out this
252:04 - HTML
252:06 - my awesome website let's change this to
252:08 - my super awesome website
252:12 - and once it's saved we can go over here
252:15 - see this index.html and here's a
252:18 - shortcut too instead of staging it and
252:20 - then committing it
252:21 - if you go here and just say changing
252:25 - something small and you did command
252:28 - enter here it would stage and commit so
252:31 - you don't have to actually press the
252:32 - plus if anything under changes you press
252:35 - command enter it will automatically go
252:36 - ahead stage and commit
252:39 - there are no stage changes to commit
252:41 - would you like to stage and commit and I
252:44 - always say always for this one
252:47 - you can do it specifically one by one or
252:50 - I just say always because I know that
252:51 - when I'm doing that command enter all of
252:53 - those changes want to take place
252:57 - all right so if you don't want to do the
252:59 - push to GitHub through the command
253:00 - palette I want to show you another way
253:02 - command shift p get push is right here
253:05 - what you can also do is down in the
253:07 - status bar there's this little button
253:09 - right here where it shows you all of the
253:11 - commits that have to go up and all the
253:13 - commits that you have to pull down so we
253:15 - have one locally that needs to go up to
253:17 - GitHub
253:19 - if I click this
253:20 - and we'll say this action will push and
253:22 - pull commits to and from the origin
253:24 - Master Branch I'll say okay
253:27 - you could click OK don't show again if
253:29 - you want to go that route
253:31 - and that will push all that up to GitHub
253:36 - next up let's talk about branches
253:38 - branches are easy to do from within vs
253:41 - code command shift p branch
253:44 - and you can create Branch delete merge
253:46 - publish all that good stuff I'm going to
253:49 - create branch
253:51 - and this will automatically create a
253:53 - branch from your current Branch if you
253:55 - can also do create Branch from if you
253:57 - wanted to Branch off of some other
253:58 - Branch but right here I'll do create
254:00 - branch and we'll call this test
254:05 - and now check this out in the bottom we
254:07 - are in the test Branch so I can command
254:09 - shift p check out
254:11 - two
254:12 - and you can see the list of branches you
254:14 - have master and test locally here you
254:17 - have origin head origin Master as well
254:20 - it's cool because we can use the command
254:21 - palette to do all of our git commands we
254:24 - can clone we can push we can pull we can
254:27 - commit we can stage
254:29 - and we can check out branches we don't
254:31 - need to do all of it from the command
254:33 - line git Branch or anything like that we
254:36 - don't have to do that here
254:38 - and I want to show you another shortcut
254:39 - down in the status bar you can click on
254:41 - the branch name right here and you get
254:43 - that same command palette prompt where
254:46 - you can actually click over to the
254:48 - branch that you want
254:51 - all right so that looks good there let
254:52 - me show you a couple settings that I
254:54 - think you should change out I'll go
254:55 - command comma if we did git right here
255:00 - and we scroll down custom data all this
255:02 - stuff the one I want actually is default
255:06 - directory
255:08 - and right here edit in settings.json
255:13 - we can enter in the default directory
255:15 - where we want all of the cloning to
255:17 - happen
255:20 - so if I actually went here I don't want
255:22 - this folder I'm going to go up one this
255:24 - is my Batcave folder here I'll say PWD
255:27 - which is path for the working directory
255:30 - and this is my folder right here slash
255:31 - users slash Chris slash documents slash
255:35 - Batcave
255:36 - so now whenever you do a git clone it
255:39 - will automatically go into that folder
255:40 - it won't have to ask you the prompt for
255:43 - which folder do you want it'll just go
255:44 - right there
255:47 - another setting to check out is get
255:49 - fetch
255:52 - autofetch when set to True commits will
255:54 - automatically be fetched from the
255:55 - default remote
255:57 - and we can set this to true and what
255:59 - happens is it'll periodically go check
256:01 - the remote and say oh are there commits
256:04 - I need to pull down are there any new
256:05 - branches I need to be aware of and then
256:07 - you'll see that down here you'll see oh
256:09 - you need one to pull down or one to push
256:12 - up
256:12 - and I'll just set that to true
256:15 - all right there's a lot of really cool
256:17 - git features in here and we've barely
256:19 - scratched the surface if you go into the
256:21 - get panel you press the dot dot dot
256:23 - right here you can see all of the pretty
256:25 - much features that we can do with get
256:27 - inside of vs code
256:30 - there is a lot more that we can do
256:31 - though and the next video will cover
256:33 - even more of git and GitHub because
256:36 - there are some fantastic extensions that
256:38 - we can use to enhance even further the
256:40 - experience of using Source control
256:41 - inside of vs code
256:45 - next up let's talk about git extensions
256:48 - for get extensions we will be talking
256:51 - about five different ones
256:54 - we are going to work with Git history
256:57 - get blame
256:59 - get link
257:01 - get indicators which is one of my
257:03 - favorites
257:04 - and the big git extension for vs code
257:08 - git lens
257:09 - so to start us off let's go down the
257:12 - list we'll go and start with Git history
257:15 - if I search for git history in my
257:17 - extensions panel
257:19 - we see git history here
257:22 - we can scroll down we can see the
257:25 - history of a file we can search the
257:27 - history view previous copy it's pretty
257:30 - much what you'd expect when it's called
257:31 - git history I'll go ahead and install
257:33 - this
257:35 - and now if I go into my Explorer go to
257:37 - this index.html file
257:40 - and I open up git history with the
257:42 - command palette command shift p
257:44 - history
257:45 - we can view file history even view line
257:48 - history
257:49 - but I'll go ahead and do this right here
257:52 - and now in here we can see if I zoom out
257:55 - all of the different commits and what
257:58 - happened for each commit
258:00 - so that one right there we can view
258:04 - we can go back to this one right here we
258:07 - can view all of these that happened
258:10 - and we can also go and dig deeper into
258:12 - that
258:14 - a useful extension if you need to view
258:17 - your history often
258:19 - next up let's go for git blame
258:23 - and this is a fun one especially if
258:25 - you're working in a team if you click
258:27 - install here
258:30 - on index.html you can see the blame
258:33 - right here blame Chris EV three days ago
258:35 - is when this change was made
258:38 - so that just adds a nice little status
258:40 - bar thing where you can see what's going
258:42 - on and you can see the extension there
258:45 - and the commit
258:47 - next up is git link
258:50 - for get link if you search for get link
258:52 - no space in there you click install
258:56 - it's a small one that I use pretty often
258:58 - actually you'll click enable here
259:01 - if you are in a file that corresponds to
259:05 - a GitHub repo or any git repo you can
259:08 - right click and now your context menu
259:11 - will have a little button right here go
259:12 - to online Link or copy online Link
259:16 - so if I click go to online Link from
259:18 - there what we'll see is it goes directly
259:20 - to the GitHub repo and the file and the
259:23 - line that you wanted
259:26 - this is very helpful when you're in a
259:27 - file and you just need to get to the
259:29 - GitHub repo this is one really quick way
259:32 - to do it
259:33 - next up we are going to be using git
259:35 - indicators and this is a really good one
259:37 - I think very small feature but very
259:41 - helpful so what I like to do is let's
259:43 - say we
259:45 - let's go into our body have made changes
259:48 - here and I'll click save
259:50 - now notice there's a little icon here
259:53 - under the get panel the get icon that
259:55 - shows you that something has changed
259:58 - but oftentimes we talk about it a lot in
260:01 - this course I like hiding pretty much
260:02 - everything in vs code so if I wanted to
260:04 - command shift p hide the activity bar
260:09 - there's no real way to see that a file
260:13 - has changed and that's how I see whether
260:15 - or not I should go to my git panel look
260:17 - at what files have changed
260:20 - so the cool thing about this git
260:22 - indicators extension is that it can show
260:25 - you all of those status counters in your
260:27 - status bar so I'll click install here
260:32 - and I go ahead and enable it
260:35 - if I go to a file that is part of the
260:37 - GitHub repo you can see down below that
260:40 - there is one file changed with four
260:42 - insertions
260:43 - so now I just have to look at my status
260:45 - bar to know whether or not to go into
260:47 - the git panel with command shift G right
260:49 - here and now I can completely hide the
260:51 - activity bar I no longer need it
260:55 - so that's a small one for me just for
260:57 - the ability to hide the activity bar
261:00 - we'll bring the activity bar back
261:02 - and the next one is the big extension
261:05 - for vs code and git
261:07 - let's go into our extensions panel
261:09 - command shift X
261:11 - get lens and it's so big it's already
261:13 - showing up even if I search for git
261:15 - indicators
261:16 - so I'll go ahead and click into it let's
261:19 - go look at what it does it is a ton of
261:21 - features built into one vs code
261:23 - extension
261:26 - here are some of the features we have
261:28 - revision navigation current line blame
261:30 - which is an interesting one that I'll
261:32 - show off authorship code lens status bar
261:34 - blame so that little status bar icon
261:36 - that we had for that other feature right
261:39 - here is also included in git lens and
261:42 - really get lens is a feature that brings
261:45 - in two of these extensions so we no
261:47 - longer need get blame I can uninstall
261:50 - this one
261:52 - and get history we can uninstall this
261:54 - one
261:57 - and get indicators in gitlink can stay
262:00 - I'll go ahead and reload to make sure
262:02 - that those are uninstalled and we have
262:04 - git lens
262:07 - let's search for git lens again
262:11 - and I'll click into it I'll go ahead and
262:13 - install here
262:16 - and with that let's close out that and
262:19 - we are here check this out you can see
262:21 - who committed each specific line and
262:24 - every time you click into a line it has
262:25 - this little annotation on the right
262:27 - there
262:28 - a little excessive I think especially if
262:31 - you aren't on a really big team but you
262:34 - can hover it you can see the commit you
262:36 - can see when it happened you can click
262:38 - on this to get the commit ID all that
262:41 - good stuff
262:43 - we also have get blame in the status bar
262:45 - just like the other extension but we get
262:47 - a little bit more the reason I showed
262:49 - off get blame is because maybe you just
262:52 - want that one feature that's a great
262:54 - extension to get the one feature you
262:55 - don't need the full git lens extension
262:58 - for all of these things
263:01 - another feature from git lens is now we
263:03 - have these little icons in the top right
263:05 - here you can click this back button and
263:08 - start to see the revisions from the
263:10 - previous commits so these are the things
263:11 - we changed in this new commit
263:14 - press back this was the previous change
263:17 - and you can go forward all the way as
263:19 - well
263:20 - so git lens gives you a lot of
263:22 - flexibility for moving around your files
263:24 - and seeing what's going on
263:26 - another benefit to git lens is if I go
263:28 - to my git Source control panel we now
263:30 - have all these new little tabs there's
263:33 - file history
263:34 - where you can see the commits from this
263:36 - view there's branches
263:38 - there's remotes
263:41 - let's scroll down a little further there
263:43 - are stashes this is a good one
263:45 - especially if you use the get stash
263:47 - feature a lot
263:48 - tags search and compare but we get some
263:51 - even more functionality out of our
263:53 - source control panel thanks to git lens
263:57 - you can also view your previous git
263:58 - commits
264:01 - all right those are some good extensions
264:02 - to add extra functionality to vs code
264:05 - let's keep moving forward
264:09 - this video is all about working in
264:11 - multiple projects
264:13 - if we have multiple projects and what I
264:15 - really mean by that is multiple folders
264:18 - or multiple GitHub repos
264:20 - so here I am in vs code I already have a
264:23 - folder in here for my site
264:26 - but let's say we wanted to expand this
264:28 - site a little bit more we have our front
264:30 - end which is under my site but let's say
264:32 - we have a new folder we'll call it my
264:34 - API
264:37 - now vs code has a cool feature built in
264:40 - called workspaces where I can go up here
264:42 - file
264:44 - and there is add folder to workspace we
264:46 - can open a workspace or we can save a
264:49 - workspace
264:51 - or really I can just take this my API
264:54 - drag it in here
264:55 - and it says do you want to copy my API
264:57 - or add my API as a folder to the
264:59 - workspace I'll add it to this workspace
265:04 - do you trust authors of the files in
265:06 - this folder yes I do
265:08 - and now we can see two folders one right
265:10 - here for HTML CSS website course and one
265:13 - for my API
265:15 - and if I wanted to I could add my site
265:18 - as well I think I got the wrong folder
265:20 - there but let's go ahead and add it
265:22 - add folder to workspace there we go
265:25 - so now we have three different folders
265:27 - in this workspace and a workspace is
265:30 - really just vs code's way of saying
265:31 - multiple folders in a project
265:35 - so I can open up index.html here
265:37 - I can open up this index.html and notice
265:40 - how it has the folder or project name
265:43 - right next to the file name so I don't
265:45 - get confused at which one is which and I
265:48 - can close my open editors there
265:50 - now the cool thing about this is if you
265:53 - have two git repos let's say I went into
265:55 - here and this has already been changed
265:57 - you can see these get indicators right
265:59 - here
266:00 - and if I go into this other index.html
266:02 - file and say exclamation mark enter
266:05 - there and I'll save
266:08 - so I have saved this file but it doesn't
266:10 - look like there have been any changes in
266:12 - the git panel and I think that's because
266:14 - this my site doesn't have a git folder
266:17 - so it's not really get Source controlled
266:21 - to do this I could open up my terminal
266:23 - right click right here go to open in
266:26 - integrated terminal so that opens up
266:28 - this specific folder for my site and I
266:31 - can do ls-al
266:33 - and I don't see a git folder right here
266:35 - so I'll say git init
266:38 - and now that I've initialized a new git
266:40 - repo we can see there are four changes
266:43 - over here
266:44 - and you can see which ones are changed
266:47 - these are green because they're brand
266:48 - new files this is yellow because it's
266:51 - been changed
266:53 - so if I go over here now check this out
266:55 - we can see changes and we can see my
266:57 - site so we can see the separation
266:59 - between the two projects in the source
267:02 - control panel
267:04 - and you can start working with each one
267:05 - separately so if you have an API in the
267:07 - back end and a front-end folder and you
267:09 - have it all in one workspace that is
267:11 - very helpful to have
267:14 - by default vs code will keep this as an
267:17 - Untitled workspace or you could go up
267:19 - here a file and save workspace as so
267:22 - that you can keep opening the workspace
267:25 - right here under open workspace
267:30 - so that's helpful especially if you're
267:32 - using multiple projects if you don't
267:33 - want to jump into a mono repo setup you
267:36 - can use the workspace feature here
267:38 - I'll go ahead and remove everything let
267:40 - me remove this one remove folder from
267:42 - workspace
267:44 - and I'll remove my API remove folder
267:46 - from workspace
267:48 - so all we're left with is one folder and
267:51 - the git panel only shows that folder
267:55 - to close out this workspace all I have
267:58 - to do is close the vs code window and it
267:59 - says do you want to save your workspace
268:01 - configuration I'll click don't save
268:05 - let's go ahead and open vs code again
268:07 - and let's start talking about extensions
268:09 - for working with multiple projects
268:12 - the first extension I want to talk about
268:14 - is called project manager
268:16 - if I go over here let's install it
268:18 - project manager
268:20 - this is a great way to switch between
268:22 - different projects
268:24 - if you remember me opening up my Batcave
268:26 - folder you notice there's probably 10
268:28 - different projects in there let's go
268:30 - over to vs code and I'll do command o to
268:32 - open a folder and I'll go into my back
268:34 - here folder I'll do productive vs code
268:36 - site and I'll click open
268:39 - now this vs code is this folder right
268:42 - here so it's all the things for the
268:44 - website for this course
268:46 - but let's say I wanted to switch
268:48 - projects
268:51 - so the cool thing we can do with the
268:52 - project manager extensions I can do
268:54 - command shift p
268:55 - save project
268:57 - and now project manager will save this
268:59 - project and we can name it and we'll
269:01 - name it productive vs code site which is
269:03 - just the folder name I'll press enter
269:07 - now let's say we opened up a different
269:09 - project let's go back one
269:11 - to the Batcave folder let's say we
269:13 - wanted to open up the HTML CSS website
269:15 - course
269:16 - I'll click open
269:20 - now we've opened up this folder in vs
269:23 - code I'll do command shift p save
269:24 - project and I'll save it as the folder
269:27 - name
269:29 - all right so now that we have two
269:31 - projects saved there are a couple
269:33 - different ways to activate project
269:35 - manager the first way is I can click the
269:38 - folder icon right here in the status bar
269:40 - I can click that and it'll open up the
269:42 - list of projects that I can switch to
269:45 - so if I click on productive vs code site
269:47 - it'll switch to that project
269:49 - that makes it really quick since I don't
269:51 - have to do command o and then find the
269:53 - folder in finder I can just do it right
269:55 - from this button right here
269:57 - and we can use the command shift p
269:59 - command palette to list projects
270:03 - and that's project manager list projects
270:05 - to open I'll click that and now we get
270:07 - the list of projects
270:09 - the other way we can open projects is
270:11 - the folder icon in our sidebar now we
270:14 - have favorites right here which are the
270:16 - two that we just created or there's this
270:18 - handy dandy git panel right here
270:22 - so if you have a bunch of folders that
270:24 - are git Source controlled which every
270:27 - single project in my Batcave folder is
270:29 - you can just say hey project manager go
270:32 - look in that folder and always look in
270:34 - that folder for any git repos that I can
270:36 - pull in so I'll go to open settings
270:38 - right here
270:39 - foreign
270:41 - actually went so let's go for base
270:44 - folders
270:46 - for project manager
270:49 - [Music]
270:50 - and let's see any base folders nope we
270:52 - want git base folder so let's add an
270:54 - item right here
270:55 - I'm going to paste in my folder
270:57 - structure which is going to be users
270:59 - slash Chris slash documents slash
271:02 - Batcave
271:03 - so any git repos in this folder
271:05 - please go ahead and open for us and look
271:08 - at that immediately it went ahead and
271:09 - said oh there are 11 projects that are
271:11 - get Source controlled in this folder
271:14 - so now instead of manually saving it as
271:17 - a favorite up here I can just go ahead
271:18 - and say oh here's the better Dev website
271:20 - let's click that
271:24 - and also there's this right here which
271:28 - still pulls up the git repos and our
271:29 - favorite ones we created manually
271:33 - so that's a great extension to have
271:35 - especially when you work with multiple
271:37 - git repos which I'm sure we all do
271:41 - the second extension that I want to talk
271:43 - about when working with multiple
271:44 - projects is called peacock and we
271:47 - already have it working here I have it
271:49 - on this site you can see the green
271:51 - around on the title bar the activity bar
271:54 - and the status bar
271:56 - and the way we do that is with an
271:58 - extension called Peacock let me go and
272:00 - search for peacock
272:02 - this is the one by John Papa I'll click
272:04 - install right here
272:06 - and we'll click enable
272:08 - to work with peacock you have to do
272:11 - command shift p
272:14 - search for peacock and you have to add
272:16 - the recommended favorites so once you
272:18 - click that it'll go ahead and add them
272:20 - to your settings
272:21 - and now if I'm in this project I can
272:24 - command shift p and say peacock
272:27 - change to a favorite color
272:30 - if I change to a favorite color I can go
272:32 - down the list and change this project to
272:34 - any of these colors
272:36 - let's go for react blue or maybe
272:39 - something different
272:42 - alright so now we have something
272:44 - different there's actually a button down
272:45 - here in the status bar
272:47 - where we can copy the hex value and the
272:49 - way that peacock works is it saves it
272:51 - into a DOT vs code folder under
272:54 - settings.json
272:56 - under color customizations
272:59 - so peacock is a tool that helps you
273:01 - create this object
273:03 - but vs code can read this object without
273:05 - needing the peacock extension itself
273:10 - with these two extensions we have
273:13 - the project manager extension where we
273:15 - can switch this out let's go over to the
273:17 - productive vs code site again
273:21 - and since this is a vs code site
273:24 - let's change out the color for purple so
273:26 - obviously peacock
273:28 - change to a favorite color let's go for
273:31 - I believe something different was pretty
273:32 - on the purple side
273:35 - my orange is fun let's just do orange
273:39 - so now when we switch projects or when
273:41 - we have multiple projects open for
273:43 - instance let me do command shift n I'll
273:45 - open up another vs code instance
273:47 - and I'll do
273:49 - option command p
273:51 - to switch projects I'll do better Dev
273:53 - site
273:55 - so now when you have multiple projects
273:57 - open you can really see the difference
273:59 - when you have one being orange one being
274:01 - purple and if you were using Mac you
274:03 - could quickly switch between the two
274:05 - like this
274:08 - all right those are two great extensions
274:10 - to work with multiple projects
274:11 - definitely work with workspaces as well
274:15 - but vs code makes it really nice to work
274:16 - with multiple projects and be able to
274:18 - differentiate between the two
274:22 - in this video we're going to talk about
274:24 - the autosave and auto format workflow
274:28 - now I have to preface this with before I
274:31 - use these two settings for about a week
274:33 - I absolutely hated both of these
274:35 - settings so there may be a learning
274:37 - curve or a time of adjustment for when
274:40 - you try these out
274:42 - and feel free to not try these out if
274:43 - they don't feel like you're a cup of tea
274:46 - so let's go and see why you would do an
274:49 - auto save and auto format workflow
274:53 - one you're removing time to format and
274:55 - you might be wondering I like formatting
274:57 - it my way and I agree that's how I used
274:59 - to think but now with the style guides
275:03 - that tools like prettier which is the
275:05 - tool that we're going to use in this
275:06 - video
275:07 - with the style guides out there it
275:09 - enforces a set of styles across your
275:12 - entire team across yourself and all your
275:14 - projects
275:15 - it removes milliseconds of thought every
275:18 - single time you need to save or you need
275:20 - to format and that all adds up
275:23 - one of my favorite books on web design
275:24 - is don't make me think by Steve Krug and
275:27 - the big process of it is saying if I
275:30 - don't have to think about it then why
275:32 - make a user think about it like put the
275:34 - login button in the top right not in the
275:36 - top left
275:40 - it's just easier for a user to
275:42 - automatically do something instead of
275:44 - having to manually think about it
275:47 - you get to focus on code don't focus on
275:49 - saving formatting all that stuff and you
275:52 - enforce Styles across your entire Team
275:54 - without even thinking about it everybody
275:55 - just automatically has the same styles
276:00 - so here to demonstrate both of these I
276:03 - have a brand new react application and
276:05 - if you don't know react don't worry it's
276:07 - not what this video is about
276:10 - but here I have a react app and normally
276:12 - I would have to update this entire app
276:14 - let's delete all of that and let's say
276:16 - hi everyone
276:17 - and now I have to command s to save this
276:20 - file and then we see this updated in the
276:22 - right
276:24 - let's go to our settings and turn auto
276:26 - save on
276:28 - files auto save we'll set that to after
276:31 - a delay
276:32 - so that doesn't save every character
276:34 - change it actually saves after you stop
276:36 - typing and I think 1000 is a little too
276:38 - short so I changed mine to 1500
276:41 - that'll be 15 milliseconds 1500
276:44 - milliseconds after you stop typing will
276:46 - it auto save
276:48 - so now if I'm over here I don't have to
276:49 - think about it this is really cool and I
276:53 - just wait and all of a sudden everything
276:54 - on the right is updated
276:58 - and then I can keep typing
276:59 - a sign that I have found that I like
277:02 - this setting is that when I go to my
277:04 - other computer or somebody else's
277:05 - computer that doesn't have auto save on
277:08 - I find it frustrating and that means
277:10 - that I really like autosave because it's
277:12 - simplified and made my workflow a little
277:14 - bit faster
277:16 - again I encourage you to try it out just
277:19 - for maybe a week you might hate it at
277:21 - first I know I did but it is fantastic
277:26 - next up let's talk about formatting and
277:28 - auto formatting when we talk about
277:31 - formatting let's say I had this on this
277:33 - line right here and I did command shift
277:35 - p format
277:38 - nothing would work because we don't have
277:39 - a formatter that knows how to format
277:41 - this react component if I open up a new
277:44 - file change the language mode to
277:46 - JavaScript
277:48 - and let's say const people is equal to
277:50 - let's say an object his name is Chris
277:52 - now let's format this weirdly
277:55 - we'll say name is cap
277:59 - we'll say name is Auto
278:04 - now let's format this we'll say format
278:06 - document from the command palette
278:09 - and there we go it all formats it a
278:12 - little weird still so I have to go in
278:13 - here and format it myself
278:16 - but there is a built-in vs code
278:18 - formatter
278:20 - and there's an even better one we can
278:21 - install as an extension so I'm going to
278:23 - go to extensions
278:25 - prettier is the tool that we're going to
278:27 - use and this is pretty standard I would
278:29 - say across the industry a lot of people
278:31 - are using prettier you can see there's
278:33 - 14.1 million installs on this already
278:37 - we'll install that
278:39 - and let's go back over here and let's
278:42 - undo let's make sure everything's all
278:44 - weird again I'll say command shift p
278:46 - format document
278:49 - and it says hey there's multiple
278:50 - formatters there's the built-in vs code
278:52 - one and there's the prettier one that
278:55 - you just installed which one do you want
278:57 - to use I'll configure
278:58 - and say let's use prettier this one
279:01 - right here
279:03 - and now it formats it like that
279:06 - which is probably not what we wanted
279:08 - it's a little weird but let's see what
279:10 - happens if I add in maybe a couple more
279:12 - people
279:14 - and let's command shift p format
279:16 - document right here
279:17 - and there we go so I think what happened
279:19 - I'm super zoomed in is it said hey these
279:22 - objects don't really pass along 80
279:25 - characters it's not 80 characters long
279:27 - so let's put it all on one line but as
279:29 - soon as you get to multiple we'll give
279:31 - you multiple lines
279:34 - the cool thing about this though is that
279:35 - we don't have to think about it so if I
279:37 - go to app.js and I just did format right
279:39 - here
279:40 - it did everything on one line if I said
279:43 - let's put a P tag around this thing
279:44 - let's go over here and close this P tag
279:49 - and I did format
279:50 - there we go
279:52 - now the problem here is that I have to
279:55 - press format manually every single time
279:57 - what happens if I push this code up to
279:59 - my teammates up to my GitHub repo and I
280:03 - didn't remember to format
280:05 - the cool thing here is let's go here and
280:07 - say format on Save
280:10 - and we can format on Save
280:13 - you can also change it to the entire
280:14 - file or only modifications of the file
280:17 - definitely pick which one works best I
280:20 - usually just do file
280:22 - we have format on Save and then the
280:23 - other one I want to talk about is
280:25 - default formatter
280:28 - I'm just going to set this to prettier
280:30 - it's all the way down here
280:32 - for default formatter
280:36 - and now that that's ready to go we can
280:38 - start typing in let's say we wanted a
280:40 - span tag and said Hi and then behind
280:43 - that we went to the span tag and said
280:45 - goodbye
280:47 - and then over here let's do that
280:49 - it's going to save which didn't force
280:52 - the format and I'm going to command s to
280:55 - force the format so that's one way to
280:57 - force the save and force the format
281:01 - because on autosave it doesn't
281:03 - automatically format which is
281:04 - interesting but I like it because let's
281:06 - say we're just doing some updates like
281:09 - this and we save and it works but when
281:12 - we want to format and just do command s
281:13 - so you still have that workflow where
281:16 - you're doing command s to format it and
281:19 - you still have that auto save for the
281:21 - quick hot reload over here on the react
281:24 - app
281:26 - all right I definitely recommend giving
281:28 - both of those a shot I know you're
281:30 - probably thinking Chris I don't need
281:31 - those and you might be right but
281:34 - just give them a shot see what happens
281:36 - and of the two I would recommend that
281:40 - auto format is the more important one
281:42 - because you still have to do command s
281:44 - to get the formatting done but it
281:47 - definitely helps when you're working on
281:49 - multiple projects multiple teams you
281:51 - just have to not format things which is
281:53 - really nice
281:56 - this workflow is called the preview your
281:58 - work workflow
282:00 - in this one we're going to talk about
282:01 - two different extensions the first one
282:04 - being live server
282:06 - and the second being browser preview
282:09 - both super helpful extensions and it's
282:11 - good to know when to use each one
282:14 - let's go over here I'm going to open up
282:17 - my terminal
282:18 - let's make a brand new file new folder
282:21 - actually let's go make directory
282:23 - let's call it working
282:27 - and I'm going to open this working
282:29 - folder in this vs code window that I
282:31 - have open I'm going to say code working
282:33 - and I'm going to say Dash R to reuse the
282:36 - current window that I'm in
282:39 - so there we go we open up the brand new
282:42 - folder right inside of vs code I'm going
282:44 - to open up a new file called index.html
282:48 - now this first one is live server so
282:52 - we'll type in Live server
282:55 - I'll click install here
282:59 - it launches a development local server
283:01 - with live reload features for static and
283:03 - dynamic pages I find it really helpful
283:05 - when I'm working with projects where
283:07 - it's just HTML and CSS where usually I
283:11 - use these to prototype
283:13 - if you have a react app or a view app or
283:15 - anything that has its own built-in live
283:17 - reload you don't really need this tool
283:19 - so it's more for the tools that don't
283:21 - already have your servers built in
283:25 - so the way this works is if you have an
283:27 - HTML file it'll load up your file and
283:30 - folder over here
283:33 - and if I go here shortcuts to stop
283:36 - everything is in the status bar so you
283:37 - can see in the status bar here we have
283:39 - go live
283:42 - and you can also right click on an HTML
283:44 - file over here and say open with live
283:46 - server
283:49 - there we go so let's go back to our
283:51 - index.html let's make sure we have some
283:53 - code I'll do exclamation mark which is
283:55 - the emit expansion abbreviation for a
283:58 - full HTML Dock and I'll just say hey
284:00 - there
284:03 - now let's click on go live
284:06 - it'll start and here we are we are in
284:08 - 127 localhost 5500 slash index.html and
284:13 - now now if I change things here
284:18 - it automatically changes over here
284:21 - so thanks to live server it's already
284:24 - built up a way to automatically update
284:26 - our server when our files changes really
284:29 - nice especially with just HTML or maybe
284:32 - a PHP server
284:35 - the next extension to talk about is
284:37 - browser preview
284:39 - [Music]
284:41 - I'll go ahead and install this
284:44 - right now you see the setup is a Chrome
284:47 - browser off to the right here and we
284:49 - have vs code right here well this
284:51 - extension puts vs code a browser right
284:54 - on the right side super super cool right
284:56 - there
284:58 - so to get started we go browser view
285:01 - open preview and that will be from the
285:03 - command palette so I'm going to go back
285:05 - to our index.html Command shift p
285:08 - browser preview
285:11 - and let's say show browser preview
285:16 - here we go and now we have browser
285:18 - preview over here we don't even need
285:19 - that Chrome browser that we had open and
285:22 - let's make sure we go to the right place
285:23 - let's go
285:25 - 127.0.0.1 5500 index.html
285:31 - and now we have live server running we
285:34 - have our browser previewing here
285:36 - will
285:37 - things still change
285:41 - and there we are everything is working
285:43 - all inside of vs code we can expand this
285:45 - and check this out everything is inside
285:47 - of vs code now we don't need to jump
285:49 - between vs code and chrome everything's
285:53 - in here
285:55 - the last setting I want to talk about is
285:58 - when we opened up browser preview it
286:00 - went to the visual studio code website
286:02 - we don't really want that we usually
286:04 - want it to go to localhost 3300 or
286:07 - localhost 3000 wherever we're developing
286:10 - I'll open up our settings type in
286:12 - browser preview
286:16 - and down here under Start URL you can
286:18 - change this out for whatever you need it
286:20 - to be
286:22 - alright that wraps it up with our two
286:24 - extensions check it out we have
286:26 - everything in vs code we have our live
286:28 - server running we have our preview right
286:30 - in here very cool setup
286:32 - now this next section of the course the
286:35 - keyboard shortcuts section or the key
286:37 - bindings section is my absolute favorite
286:40 - part of this course
286:42 - keyboard shortcuts are kind of the badge
286:45 - of honor when you're working with a text
286:47 - editor or an IDE
286:49 - and keyboard shortcuts is really where
286:51 - when you're starting to type or you're
286:53 - having people look over your shoulder
286:55 - and you're using keyboard shortcuts
286:56 - that's when people really say wow
286:59 - they're pretty fast and that's all done
287:02 - with keyboard shortcuts
287:04 - if we talk about productivity
287:07 - the way that we save time is by keeping
287:10 - our hands on the home row which is the
287:12 - middle of our keyboard anytime we move
287:14 - our hands off of the keyboard go touch
287:16 - our Mouse trackpad whatever we're using
287:18 - we're taking away precious seconds
287:21 - milliseconds that add up over time and I
287:24 - know that sounds pretty ridiculous
287:25 - you're like Chris it's just grabbing my
287:27 - mouse it's fine and it is totally fine
287:30 - but if you want to be a faster developer
287:33 - touching your mouse less will make you
287:36 - faster and more efficient more
287:37 - productive
287:38 - so this entire section is about learning
287:41 - about these keyboard shortcuts and
287:42 - seeing how we can integrate them and
287:44 - learn how to integrate them into our
287:47 - workflows
287:48 - a big thing I want to stress about this
287:50 - section of the course though is that
287:52 - you're not going to learn all of the
287:54 - keyboard shortcuts overnight or in these
287:56 - videos I definitely still don't even
287:58 - know all of the keyboard shortcuts but I
288:01 - want to put forth a path where you can
288:03 - say well I think that should have a
288:04 - keyboard shortcut maybe I can find it so
288:07 - by giving us the tools on how to find
288:09 - and learn these keyboard shortcuts I
288:11 - feel like we can be better developers in
288:13 - the long run it's like that saying where
288:15 - they say it's not about Googling it's
288:18 - about knowing what to Google
288:20 - so really here it's not just knowing the
288:22 - keyboard shortcuts it's knowing how to
288:24 - find and learn the keyboard shortcuts
288:27 - so to start us off here are the docs I'm
288:30 - actually just going to skip the docs and
288:31 - go into vs code and I want to show you a
288:34 - trick that you should memorize command
288:36 - shift p command palette I'm going to
288:39 - type in keyboard shortcuts
288:42 - this one right here help keyboard
288:44 - shortcuts reference
288:46 - and you can do this by command K and
288:48 - command R so I want you to note already
288:50 - that the command palette will always try
288:53 - to give you the keyboard shortcut
288:54 - possible if it exists so here we want
288:58 - the keyboard shortcuts reference that's
288:59 - keyboard command R so that's keyboard
289:02 - shortcuts reference that's pretty easy
289:04 - way to remember it click that and it'll
289:06 - actually open up a browser with the
289:09 - keyboard shortcuts cheat sheet that vs
289:12 - code has provided for us and if you're
289:14 - on Windows it'll open the windows one if
289:16 - you're on Linux it'll open the Linux one
289:19 - if you want you can even print this out
289:21 - hold it next to your desk and kind of
289:24 - commit these to memory we're going to go
289:26 - through a couple of my favorites and
289:27 - show you how these can help us be more
289:29 - productive
289:31 - the reference sheet right there which we
289:33 - can always access from command palette
289:35 - command K command r
289:38 - that's always easy to access right there
289:40 - or again command shift p
289:44 - keyboard shortcuts reference
289:47 - so if I go back to the docs here if you
289:50 - are coming to vs code from another
289:52 - editor which many of you probably are I
289:55 - came from Sublime Text myself there is
289:57 - down here in the section called key maps
290:00 - extensions this is the second section so
290:03 - if you scroll down key map extensions
290:06 - vs code does a great job at helping us
290:08 - migrate away from other editors into vs
290:12 - code
290:13 - so if you want you can download the
290:14 - Sublime Text keymap install that
290:16 - extension and now all of the keyboard
290:18 - shortcuts that you're used to in Sublime
290:20 - Text are carried over into vs code
290:24 - the other thing about this is that we
290:26 - can go into vs code and say command
290:29 - shift p keyboard shortcuts we can open
290:33 - keyboard shortcuts right here and by
290:35 - doing this command K command s we can
290:37 - see all of the keyboard shortcuts that
290:39 - vs code has available to us
290:42 - so this reference plus the keyboard
290:44 - shortcuts cheat sheet are good enough to
290:46 - look through and make sure that we can
290:48 - commit these to memory and if you ever
290:50 - don't know what the keyboard shortcut is
290:52 - try opening this up and typing it in
290:54 - like let's say an easy one copy
290:56 - command c as per usual for all computers
291:00 - out there and I know I'm starting to get
291:02 - a little repetitive with this keyboard
291:04 - shortcuts are going to make us faster
291:06 - developers but could you imagine if we
291:07 - opened up a file right here and I wanted
291:09 - a copy this if I had to do this and go
291:12 - right click and say copy down here could
291:16 - you imagine having to do that every
291:17 - single time we needed to copy and paste
291:19 - something that would be tedious
291:21 - so just think how much faster we are
291:23 - with command C right here and command V
291:27 - right there
291:28 - imagine what we could do if everything
291:30 - we did was keyboard shortcuts
291:33 - and I know I'm trying to drive that
291:34 - point home a little bit too hard sorry
291:36 - for saying it so many times I just
291:37 - believe in it so strongly I want to talk
291:40 - about a setting which will help us out
291:42 - I'm going to open up settings command
291:43 - comma
291:45 - and I'm going to search for cursor
291:46 - smooth
291:49 - now cursor smooth carat animation is a
291:52 - fun little visual thing not necessary at
291:55 - all it's more of a visual
291:57 - feature if I click this
291:59 - and I go over here and I click through
292:03 - there's actually this really small nice
292:05 - subtle feature where the carrot is
292:07 - animated from point A to point B so you
292:10 - can see it kind of really quickly
292:12 - animate over
292:13 - and if I turn that off we go over here
292:15 - it'll just jump if you can really tell
292:19 - it's really subtle but for me I think
292:21 - this is a really fun feature that vs
292:23 - code offers
292:24 - and we'll be moving around a lot with
292:26 - our keyboard throughout the rest of this
292:28 - course so I thought you know what let's
292:29 - turn this on let's get a nice visual
292:31 - feature in here
292:33 - so to recap if I close everything out
292:36 - the one things that we need to remember
292:37 - is
292:40 - keyboard shortcuts reference keyboard
292:42 - shortcuts reference
292:44 - we can enter that and always open up the
292:47 - keyboard shortcuts reference and read
292:48 - through these
292:50 - we can always command shift p to open
292:52 - the command palette type in like copy
292:54 - and you'll see the keyboard shortcut
292:56 - right there
292:58 - and part three to that is we can always
293:00 - open keyboard shortcuts right here and
293:03 - I'll click that to open it and you can
293:05 - kind of search down here and see all the
293:08 - keyboard shortcuts oh my gosh look how
293:10 - many
293:12 - so those three techniques are really
293:14 - good to keep in mind we can use them
293:16 - while we learn and grow our keyboard
293:18 - shortcuts that we memorize let's start
293:20 - our keyboard shortcut section by going
293:22 - over the basic editing keyboard
293:25 - shortcuts
293:26 - to start I'm going to open up a new file
293:28 - with command n
293:30 - and you can do this as many times as you
293:32 - need
293:34 - command W closes the tabs
293:38 - we can also do command n to open up a
293:41 - new file and if we wanted we could split
293:43 - this out into a split editor and do
293:45 - command backslash
293:47 - so now the same file is in two different
293:50 - editor tabs if I wanted to jump between
293:53 - these two editor tabs I would do command
293:55 - 1 for this section this group Command 2
293:59 - for this group
294:01 - I can do command W to close that command
294:04 - W to close another one
294:07 - let's go over to our Explorer right here
294:11 - let's open up some files there's
294:13 - comparisons conditionals functions
294:15 - command B closes the sidebar there
294:17 - and I will actually close this one as
294:19 - well
294:21 - if we make any changes to our files we
294:23 - have the ones that we're probably used
294:24 - to already that we've used in other
294:26 - editors say hi we can command s to save
294:31 - we can command C to copy let's highlight
294:35 - something command C
294:38 - paste
294:39 - with command V
294:42 - so those are the ones we're used to
294:43 - right there
294:44 - undo with command Z
294:46 - save command s
294:48 - and I'll close all these tabs out
294:50 - command W command W command w
294:52 - to reopen a closed tab we have command
294:55 - shift t
294:56 - just like you would see in Chrome
295:00 - let's open up a new file command W to
295:03 - close that tab command n
295:05 - and I'm going to write out some stuff so
295:08 - this is my new file hello everyone let's
295:13 - learn
295:15 - keyboard shortcuts
295:18 - all right so this is where we get to
295:20 - working inside of a file let's work with
295:23 - line keyboard shortcuts so that's
295:25 - anything to manipulate lines let's say I
295:28 - wanted to cut this line I could command
295:30 - X and cut that whole line and then I
295:32 - could go over here use my arrow keys and
295:34 - then paste it up there
295:36 - that's cool right there I can move lines
295:39 - up and down with option and the down
295:41 - arrow
295:44 - and I can move it back up with the
295:46 - option up Arrow
295:48 - we can copy lines down shift option down
295:53 - and I don't know why my keyboard
295:54 - shortcuts aren't showing in the bottom
295:55 - there I'm not entirely sure but let's
295:58 - see
296:00 - shift option and the arrow keys will
296:03 - copy lines up and down and this is
296:04 - really useful let's say if you had some
296:06 - Li's close those lies right there and
296:09 - then you did shift option down and you
296:12 - copied all those
296:14 - some more stuff we can do with lines is
296:16 - that we can add lines above and below
296:19 - add new lines so if I wanted to add a
296:21 - line below this I would do command enter
296:24 - if I wanted to add a line above this
296:25 - command shift enter and now I can start
296:28 - typing there
296:30 - so all of these line keyboard shortcuts
296:32 - are very helpful when we're trying to
296:33 - manipulate all of our lines
296:37 - those are the main ones that I use but
296:38 - the two more that I want to show in the
296:40 - editing of lines is you can actually go
296:43 - here and do command this Open Bracket or
296:46 - I guess that's the closing bracket and
296:48 - that can indent
296:49 - and you can do all the way back to the
296:51 - other way with command and then the
296:54 - square bracket that way
296:57 - moving beyond lines I want to talk about
296:59 - comments
297:01 - what you'll see me do often in this
297:03 - course is command forward slash to
297:05 - create comments and if you highlight
297:07 - multiple lines if I hold shift and press
297:09 - down a bunch of times and you do command
297:11 - forward slash that creates a comment
297:14 - across all of the lines that you're
297:16 - already on all in all as far as editing
297:19 - a single file those are my favorite
297:20 - keyboard shortcuts to use you've seen
297:23 - opening and creating new tabs and editor
297:25 - groups you've seen editing inside of a
297:28 - file using the line helpers and you've
297:32 - also seen a little bit about comments so
297:35 - with those three put together there's a
297:37 - lot that you can do there but there is
297:39 - more and always command shift p
297:42 - ELP keyboard shortcuts reference right
297:44 - there
297:45 - and if we open that up and bring this
297:47 - over here
297:48 - we can see basic editing this is where
297:50 - we pulled most of these ones in this
297:52 - video the editor management section also
297:55 - has a lot of this from this video file
297:57 - management is from this video as well we
297:59 - are going to get into the other ones in
298:01 - the next videos but overall definitely
298:04 - keep referencing this file and you'll be
298:07 - on your way
298:10 - the next set of keyboard shortcuts we're
298:13 - going to do here is the section for
298:16 - navigation
298:17 - now this navigation workflow video is
298:19 - going to be a very important one it
298:21 - actually ties together a lot of what
298:23 - we've already learned but it gives us
298:26 - one of our first workflows we're going
298:28 - to see in this course and what I mean by
298:31 - workflow which we'll talk about more in
298:34 - the workflows section of this course is
298:36 - that we're going to try to do a little
298:38 - bit more real world scenario things here
298:40 - so I'm going to actually go into our
298:42 - project and use these keyboard
298:44 - navigation shortcuts and let's see if we
298:46 - can do all of this without ever opening
298:48 - the sidebar or the Explorer
298:52 - and that's what I mean by workflow
298:54 - you're going to see what it kind of
298:55 - looks like for a day-to-day workflow
298:56 - that I would do in my coding Journey so
298:59 - if I go here
299:01 - for myself I usually don't have the
299:04 - Explorer open I just code just like this
299:07 - and even sometimes I'll actually hide
299:09 - the activity bar command shift p
299:11 - activity bar you can toggle activity bar
299:14 - visibility I'll actually code like this
299:17 - a lot of the time
299:18 - I'll even hide the status bar but we'll
299:20 - talk about that in the minimalist
299:22 - workflow
299:24 - so let's bring those two back status bar
299:26 - and activity bar and let's see how we
299:28 - can do this without our sidebar
299:32 - to start I want to open up a file to
299:34 - open up a file we have command p
299:37 - and there's go to file so now you can
299:39 - see all of the files here let's say we
299:41 - wanted to open up this functions file
299:44 - I can type in functions and we'll see
299:47 - that fuzzy search has shown functions
299:49 - file right here I'll press enter that
299:52 - will open up a file here
299:54 - now to navigate around this file let's
299:57 - use some more shortcuts we have command
299:59 - P so far to go to a file
300:01 - let's go to the bottom of this file I'm
300:03 - going to press command down
300:05 - so we're at line 63 right here let me
300:09 - try to zoom in so if we are at line 63
300:12 - let's say we wanted to go up here to
300:14 - line 50.
300:15 - to do that we can do Control G
300:19 - and we can type in a line we can say 50
300:21 - and that jumps right to line 50 and I
300:24 - press enter right there to complete that
300:25 - command
300:28 - so we have the ability to open a file we
300:30 - now have the ability to go to a line
300:33 - next up let's go to a symbol in this
300:36 - file and we've already seen this a
300:38 - little bit by using the breadcrumbs so
300:40 - if I click here you can see there's the
300:42 - script tag and inside of that there's
300:44 - the say something function which we can
300:46 - see right here there is squared which is
300:49 - a const right here other squared and
300:52 - this punch function right there
300:54 - so I'll click this and you can see all
300:56 - of the symbols in this file
300:59 - another shortcut for that is command
301:01 - shift o
301:03 - and that shows the symbols in this file
301:05 - if I type in punch it would go down to
301:08 - that file right there something we've
301:11 - also seen before is if I use a function
301:13 - right here and let's say this is used
301:15 - way way way far away from where it's
301:18 - actually defined you can right click
301:20 - here and go to definition
301:22 - but you can see that F12 is the keyboard
301:25 - shortcut there so I can actually
301:27 - hit F12 on that and go to the definition
301:32 - where it's defined
301:34 - another way to do that it's kind of a
301:36 - keyboard shortcut plus a mouse click is
301:38 - you hold Ctrl you hover over it and now
301:41 - you see that underline so it's kind of a
301:43 - link you can click that and it'll jump
301:45 - to the definition
301:47 - we are able to navigate the
301:50 - symbols in this file just like you would
301:52 - with these breadcrumbs command shift o
301:54 - gets you all the symbols another fun
301:56 - thing we can do is bracket matching so
301:58 - if I'm here and I'm on this bracket
302:00 - right here I can hit command shift
302:02 - backslash and it'll go to the matching
302:05 - bracket right there so if there's a ton
302:07 - of code in here and even if there was an
302:09 - if statement like a snippet and let's
302:12 - say there's some more stuff a for Loop
302:14 - in here
302:16 - and some more stuff maybe a four
302:20 - each Loop oh I already did a for each
302:22 - Loop let's do a four in Loop
302:26 - if we are in one of these we can just
302:28 - say command shift backslash and it'll go
302:30 - to the matching bracket and notice vs
302:31 - code is nice enough to highlight the
302:34 - brackets that it is matching
302:36 - just a fun trick to kind of jump between
302:39 - the top and bottom of brackets
302:43 - so all in all command P to open things
302:47 - up we can say conditionals
302:50 - press enter there to open that file
302:53 - we can go to align with Control G
302:56 - we can open a symbol with command shift
302:58 - o
302:59 - we can go to a definition with F12
303:05 - and we're able to bracket match with
303:06 - command shift backslash
303:09 - the other thing about this is those go
303:11 - to shortcuts we can command shift p open
303:14 - the command palette and notice how the
303:16 - arrow right here this carrot is going to
303:19 - show us the commands that vs code has
303:22 - if we delete that we can actually say at
303:26 - is going to find symbols colon is going
303:29 - to find line number and the arrow is
303:32 - going to go back to finding commands so
303:35 - all of that can be done from here inside
303:37 - of the command palette
303:39 - all in all command p is what I really
303:42 - use a ton of the time command shift o I
303:44 - use as well to go through our
303:46 - breadcrumbs or symbols
303:49 - go to line number I don't use as much
303:52 - these days but it is very helpful
303:53 - especially if you can see the line
303:55 - number in your editor and you want to
303:57 - jump to it
303:59 - all right that's our navigation workflow
304:01 - a lot of fun stuff that you can
304:02 - integrate into your daily
304:05 - coding
304:06 - this video is going to talk about my
304:08 - absolute favorite feature of Visual
304:11 - Studio code but it's not even a feature
304:14 - that is specific to vs code it's a
304:16 - feature that is found in many editors
304:18 - and can even be found in online editors
304:20 - like codepen and code sandbox
304:24 - here we have our basic editing docs
304:27 - here's keyboard shortcuts which we have
304:28 - talked about a little bit and here is
304:30 - multi-selections or multi-cursor as it's
304:33 - named and this is my favorite feature of
304:36 - any text editor because this is what I
304:38 - feel like is going to make us very very
304:40 - productive and make us have fun editing
304:43 - if I go back to vs code I am going to
304:45 - open up a brand new file with command n
304:48 - I'm going to change the language of this
304:51 - file command shift p type in language
304:53 - mode
304:54 - I'll change this to HTML so we can start
304:57 - using emit
304:58 - I'll do exclamation mark which in Emmett
305:01 - is going to bring us a whole new HTML
305:03 - document
305:04 - and then down here let's zoom in a
305:07 - little bit
305:09 - I am going to create a UL instead of
305:11 - that Li times 5 and then let's say the
305:15 - text is whoa
305:19 - perfect so we have a UL with five lies
305:22 - and this is kind of a common thing
305:23 - you'll do maybe you have a bunch of list
305:25 - items or maybe these are a tags whatever
305:27 - you need
305:29 - multi-cursor helps with editing multiple
305:31 - things in a row
305:33 - so let's say I have all of these the
305:36 - quickest way to start up with
305:37 - multi-cursor is I'm going to click right
305:39 - here and then I'll hold the option key
305:41 - and click down click
305:44 - click click and now if I just press
305:48 - arrows over I can delete right here and
305:50 - say whoa this is really cool
305:54 - and the cool thing about this is this
305:56 - can even be done with Emin so I can say
306:00 - a
306:01 - dot link
306:04 - and do tab right there and now I can
306:07 - type
306:08 - and type over here
306:12 - so let me tap that over just get my
306:14 - indentation again one of the things that
306:16 - I like to do also is to not just option
306:19 - click my way through these right here
306:21 - right here right here right here another
306:23 - easier way to do this is to highlight
306:25 - the text that you want
306:27 - and I can double click that so now I'm
306:29 - holding over this type area
306:32 - I can do command D and that will
306:34 - duplicate the next instance of that same
306:36 - exact text so I can do command D command
306:39 - D command D and keep going and now I can
306:43 - say hi here
306:48 - so that is an easier way to activate
306:50 - multi-cursor is just to highlight
306:52 - something and do command d
306:55 - in this instance let's say I wanted this
306:57 - href to actually be a hashtag for a
307:00 - placeholder
307:01 - if I did command D here notice it would
307:03 - highlight everything right there
307:05 - so we have to find a way to
307:06 - differentiate this side over here
307:12 - one way we can do that is we can
307:14 - highlight with the quotes because that's
307:16 - going to only highlight these down here
307:17 - command d d d and I'll press right
307:20 - left and then delete all this and do a
307:23 - hashtag
307:25 - another cool way to highlight a section
307:27 - of code normally you would have to
307:29 - highlight all of this right here if you
307:31 - wanted to use your mouse
307:32 - if I want to highlight just this href
307:35 - section I can click where I want to
307:37 - start highlighting a section I can do
307:39 - shift option and I can drag down like
307:42 - this and now I am creating multiple
307:43 - cursors on each line
307:48 - like that
307:51 - so that's another way to highlight based
307:53 - on a column which is really helpful
307:54 - let's say I wanted just the text over
307:55 - here I could do this shift option and
307:59 - highlight straight down like that and
308:01 - now I can type here
308:04 - so that's a really cool way to activate
308:07 - multicursor as well
308:10 - let me show you another way to activate
308:12 - multiple cursors
308:14 - I can click here and instead of
308:16 - highlighting with my mouse I can
308:17 - actually hold option command and press
308:20 - down
308:21 - and that will highlight down or up
308:24 - depending on if I press down or the up
308:25 - arrow and now I can type in here hi
308:29 - or https
308:31 - example.com like that
308:37 - that is another way to create multiple
308:39 - cursors so you're seeing that there's a
308:41 - couple different ways we can do this a
308:43 - lot of options start to find the ones
308:45 - that are best for you I personally
308:47 - really lean towards the command D
308:48 - version
308:50 - I think that's the easiest to remember
308:52 - option click also helps when you need to
308:54 - highlight different areas and maybe
308:56 - things don't always match up
308:58 - another way we can even activate
309:01 - multicursor is using the find or search
309:04 - inside of this editor so if I did
309:06 - command F opened up search right here it
309:09 - actually highlighted class because I was
309:11 - already highlighted on it like that so
309:13 - whatever you're highlighted on you can
309:15 - press command F and it will auto
309:17 - populate in here
309:20 - so here's how we activate multiple
309:23 - cursors once we have find working we
309:25 - press option enter
309:27 - and now that gets us to all of the areas
309:30 - where we can type in here and let's
309:33 - change the link to like nav item or
309:35 - something like that
309:37 - so again I can even Search Command F
309:39 - delete that and say I can type here so I
309:43 - searched up here and then I do option
309:45 - enter to highlight them all
309:47 - whoa
309:52 - if you are coming from a different
309:54 - editor I want to show you how you can
309:56 - update this so let's say I had right
309:59 - here command comma to open up our
310:02 - settings you can do multi cursor
310:05 - modifier
310:06 - if you are coming from Sublime Text or
310:09 - some other editor that has command or
310:11 - control as the
310:13 - multi-cursor click holder you can click
310:16 - that and that'll work or alt is kind of
310:19 - the default in vs code you can use that
310:21 - as well I personally lean to control
310:22 - command because I am coming from Sublime
310:25 - Text and I know that world so well
310:28 - but everything will work the same except
310:30 - I just hold command and now I can click
310:32 - into a bunch of places command D still
310:34 - works
310:37 - there's also one more I want to show you
310:38 - about multi-cursor if I click here
310:42 - and I double click a bunch of times
310:43 - command D and I say red and I'll
310:46 - actually do blue and if you want to exit
310:49 - out of multi-cursor I just pressed
310:50 - Escape there
310:52 - yellow
310:54 - let's say green and let's go for purple
310:58 - whoa purple
311:00 - let's say I wanted to highlight all of
311:02 - these I could do option command down
311:03 - down down down I could highlight the
311:06 - back ending tag of a command D D D D and
311:10 - I can click left and type that in or you
311:13 - could do like this right here command d
311:16 - d d press right a cool thing we can do
311:19 - here is let's say we wanted to maybe
311:21 - style out the class based on this we can
311:23 - shift option highlight that word
311:26 - copy
311:28 - come over here press left a couple times
311:30 - and paste right there and we can say
311:31 - like nav yellow green blue so that's
311:34 - another way to use multi-cursor there's
311:36 - a lot of different options and
311:38 - possibilities for using multi-cursor
311:40 - here that helps us save time writing
311:45 - all right to recap there's a lot of ways
311:47 - that multi-cursor can activate and help
311:50 - us we have alt clicking or command
311:53 - clicking we have duplicating with
311:54 - command D we have the ability to go
311:57 - straight down with option command down
311:59 - down down
312:00 - we have the ability to find by doing
312:03 - command F and then alt option enter
312:08 - and we also have the ability to
312:09 - highlight straight through with shift
312:11 - option right here shift option and I can
312:13 - highlight like that
312:15 - a lot of cool ways definitely work them
312:17 - into your tool set and try to look for
312:20 - ways of when you are able to use them or
312:23 - when you could benefit from them these
312:25 - have worked into my workflow pretty
312:27 - often nowadays and I can't imagine
312:30 - having an editor that doesn't have this
312:33 - multi-cursor feature
312:38 - the next part of this keyboard shortcuts
312:41 - reference that I want to work with is
312:42 - over here on the right side under
312:44 - display
312:45 - so if we go over here all of these are
312:48 - going to be used on a day-to-day basis I
312:50 - actually use these so much for my
312:52 - workflow so I just wanted to show you
312:54 - these
312:55 - and really what all of these are is to
312:58 - get around the UI of vs code
313:01 - so if I'm in here and I close this out
313:03 - and I click don't save
313:05 - so I did command W to close that if I
313:08 - wanted to open up the Explorer right
313:09 - here you can see that it gives us the
313:11 - keyboard shortcut up there command shift
313:13 - e
313:15 - so if I click that or I did command
313:17 - shift e it would open up the Explorer
313:20 - and then command B closes the sidebar
313:23 - so command B will open up what was
313:25 - previously in the sidebar in this case
313:28 - the Explorer so I'll actually close and
313:31 - open the sidebar a ton and you'll see me
313:32 - use this keyboard shortcut a lot when
313:35 - I'm working so that I can focus on the
313:37 - code and not have to worry about any
313:39 - sidebars open
313:41 - so let's go down the line let's open up
313:43 - the Explorer which is command shift e
313:47 - let's open up search which is command
313:49 - shift F and I'm not sure why it didn't
313:51 - pop up right there
313:54 - let's open up the source control and
313:56 - this one's a little weird because it's
313:57 - Ctrl shift G so it's not exactly the
314:00 - command shift G but you would expect but
314:03 - it is Ctrl shift G and this one I go to
314:05 - a ton so it's inconvenient that it is
314:08 - Ctrl shift G
314:11 - the cool thing about this though is that
314:13 - we can go and close the sidebar open up
314:16 - command palette keyboard shortcuts
314:19 - we can type in command shift G
314:23 - and see what is in our editor for that
314:26 - keyboard shortcut so I actually don't
314:27 - use command shift G to find previous or
314:30 - terminal find previous so I'm just going
314:32 - to go ahead and remove those
314:34 - I'm going to click here remove key
314:36 - binding and remove key binding
314:40 - now I'm going to make sure that this
314:42 - Source control panel I can use with
314:44 - command shift G so I'll type in control
314:46 - shift G to find it
314:48 - view Source control I'm going to click
314:50 - edit right here
314:52 - command shift G is what I want and I'll
314:54 - press enter
314:56 - alright so now if I go over here command
314:58 - shift G shows up and I can do that
315:00 - command shift e is Explorer command
315:03 - shift f is search
315:06 - command shift G is get Source control
315:08 - now
315:10 - and that's a personal preference I like
315:12 - them to be uniform you don't really have
315:13 - to do that for yourself but I dig it and
315:16 - over here let's do debug command shift d
315:20 - and extensions is command shift X
315:24 - and I'll close the sidebar
315:26 - reopen the sidebar
315:29 - so navigating the UI like this is really
315:32 - important because when we need to go and
315:34 - find the search panel command shift F if
315:37 - we need to go into git control command
315:39 - shift G if we need to go into the
315:42 - Explorer command shift e
315:44 - so really get into a habit of knowing
315:46 - these one two three four five keyboard
315:48 - shortcuts
315:50 - in addition to the things in the sidebar
315:52 - there we have one that we've already
315:54 - used a bunch of times in this course we
315:56 - have command comma to find our settings
316:00 - we also have the ability to open up the
316:03 - panels at the bottom with control tilde
316:05 - and that'll open up the terminal which I
316:07 - use pretty much on a daily basis
316:10 - you can also hover problem C command
316:12 - shift m
316:13 - output and debug console which we won't
316:16 - use too much in this course but we will
316:17 - use them a little bit
316:20 - so control tilty will reclose the
316:22 - terminal and open the terminal
316:25 - get into a good habit of learning these
316:27 - sidebar shortcuts they'll definitely
316:29 - help you be more productive on a daily
316:31 - basis
316:33 - we have been able to do a lot in this
316:36 - keyboard shortcut section there's a lot
316:38 - of great things and I want to note that
316:40 - there's a lot of cool things that we've
316:41 - done here but it doesn't really help us
316:43 - unless we practice it every single day
316:46 - we try to internalize it so that it is
316:48 - second nature remember the less that we
316:51 - touch the mouse or the trackpad the
316:54 - faster as developers we will become
316:56 - so here I am on Visual Studio code I
316:59 - want to point out a resource that's
317:00 - really helpful if you go to Docs under
317:04 - get started
317:05 - under key bindings
317:07 - and over here under keyboard shortcuts
317:10 - reference here are the cheat sheets for
317:12 - each operating system
317:14 - I'll click into the Mac OS one and maybe
317:17 - you want to print this out and keep it
317:19 - on your desk while you're learning the
317:20 - keyboard shortcuts maybe you want to
317:22 - just have the link handy in your
317:24 - bookmarks but I use this a lot when I
317:26 - was learning the keyboard shortcuts very
317:29 - helpful to just reference and look
317:31 - through and also remember that you can
317:33 - always go into your command palette and
317:36 - search for the words for each of these
317:38 - like let's say I wanted to go to file I
317:41 - could go to my command palette search
317:42 - for go to file and it would usually pop
317:45 - up the keyboard shortcut on the right
317:48 - and that's a good way to keep practicing
317:49 - your keyboard shortcuts keep getting
317:51 - better at them and keep getting faster
317:54 - here I have our better.dev website and
317:58 - the cool thing about the betterdev
317:59 - website is the GitHub repo is right here
318:02 - and all of the posts and content here
318:05 - are in this underscore posts folder and
318:08 - that's how we're writing everything is
318:10 - in markdown
318:11 - and when I say we it's me cap and my
318:15 - cousin Lynn codes who's working with me
318:17 - on this project
318:19 - if I go to pull requests we'll see that
318:21 - the pull request that she has in for
318:23 - these articles are the new articles that
318:26 - are coming down the pipe and these are
318:27 - the ones that are assigned to me and I
318:29 - need to review them
318:31 - so I can go in here and I can look
318:34 - through the files that are changed over
318:36 - here I can add comments down below
318:40 - I can request changes all that stuff
318:42 - that you'd expect from github's UI and
318:45 - being able to handle PR's inside of here
318:50 - but being that vs code and GitHub are
318:53 - owned by Microsoft it makes sense that
318:55 - they would have a fantastic integration
318:57 - so I want to show you something really
318:59 - cool that we can use and that's called
319:01 - the GitHub PRS
319:05 - and that'll be the GitHub puller request
319:07 - and issues extension right here
319:10 - and what this does is it takes a lot of
319:13 - the stuff that we just saw in github.com
319:15 - and it moves it directly into vs code
319:19 - I'm going to install this extension
319:22 - and you can read through all these great
319:24 - features that we have but I want to do a
319:25 - quick walkthrough of a couple of them
319:27 - I'm going to close that I'm going to
319:29 - open up our activity bar I'm going to
319:32 - bring the activity bar back
319:34 - let's bring the status bar back
319:39 - I've gone ahead and switched over to the
319:40 - better Dev site GitHub repo in vs code
319:43 - and if you look here this is the entire
319:46 - next.js site all right here
319:50 - here we have a brand new icon with the
319:53 - GitHub pull requests and I have to sign
319:55 - in to make sure that this works let's go
319:57 - ahead click sign in
319:59 - and it says Hey GitHub pull request and
320:01 - the issues wants to sign in using GitHub
320:02 - I'll allow it
320:04 - we go here and then we say open Visual
320:07 - Studio code
320:09 - allow an extension to open this URI yes
320:11 - all the security features let's get it
320:13 - going
320:14 - and now it will go ahead and in our
320:17 - panel our sidebar panel for GitHub it
320:19 - actually pulls in the pull requests and
320:22 - the issues
320:23 - and it says all the ones that are open
320:24 - here I can go and look for waiting for
320:26 - my review
320:28 - I have this one that I created for
320:30 - myself
320:32 - mostly for this demo
320:34 - what you can do is you can click into a
320:37 - PR
320:39 - and you can click into the description
320:41 - here and you can see exactly what's
320:43 - going on in this PR
320:45 - we can see over on the left there is one
320:48 - file that has been changed there's a
320:49 - comment on that file
320:51 - if I go over here you can actually add
320:54 - reviewers assignees Milestones all that
320:56 - good stuff
320:57 - and if I scroll down you can see the
320:59 - changes so it looks like I removed that
321:02 - word absolute right there
321:05 - and there's also a comment right here
321:09 - and I can manage this pull request by
321:11 - merging the pull request and leaving a
321:14 - comment all that good stuff
321:16 - so that's really cool to see let's go
321:18 - take a look at one of lens that's
321:19 - waiting for my review I'll click this
321:21 - right here
321:24 - I'll click on description
321:28 - and it looks like Lynn just did one
321:30 - single file here making testimonials
321:31 - with Tailwind CSS that's a new article
321:33 - coming I can
321:35 - try to read through here but what I can
321:38 - do also is Click checkout right here
321:40 - so I'll click checkout
321:42 - and this actually switches to the branch
321:45 - for the pr
321:47 - and now here I am you get some changes
321:49 - on the sidebar we have this is the file
321:52 - that we're working in down here I can
321:54 - add comments to the entire PR
321:58 - and I can go over here open this file
322:02 - and I can scroll down and start editing
322:04 - and reading through this article
322:08 - what's cool about this is we can say in
322:10 - this article we'll create four
322:12 - testimonial designs quote testimonial
322:14 - let's say I wanted to change these out I
322:18 - could say hey Lynn check this out turn
322:20 - that into capitalize the T on
322:25 - testimonials so I can add a comment
322:27 - right here and start a review
322:30 - Lynn might be confused by this because
322:32 - I'm fine with the lower case so I'll
322:34 - start a review
322:36 - we'll have a pending comment here
322:39 - we'll go down
322:41 - and let's say we wanted some other
322:43 - changes let's go over here
322:45 - text color additional classes are used
322:48 - to style the text here enter the name
322:50 - and title over here we can just say
322:53 - this is looking great
322:58 - I can add comment there
323:00 - and once I'm ready to exit the review I
323:03 - can go to review which goes back to the
323:05 - top level here I have a request here I
323:08 - have a comment there and you can say
323:10 - request changes right there
323:13 - so we have requested changes and I think
323:16 - we're good to go so I am just going to
323:18 - wait on changes from Lynn for that I can
323:21 - now go up here and click exit review
323:23 - mode
323:24 - or you can click down here on the get in
323:27 - the status bar and you can switch over
323:29 - to the master branch
323:31 - or you can open up the terminal and do
323:33 - git check out the master branch
323:37 - these are all great ways to do the same
323:39 - git actions
323:42 - so let's say I'm good with that let's go
323:44 - over to the code now
323:45 - that's all fine let's go make sure
323:47 - that's showing up in GitHub
323:50 - let's go to this PR let's go to
323:52 - testimonials
323:54 - and I scroll down all the way let's see
323:58 - there's the comment I made there's the
324:00 - other comment I made and down here
324:02 - changes requested so we'll just wait on
324:05 - Lynn to do that work
324:08 - let's go to our Explorer the next thing
324:10 - we can do with this extension is
324:12 - actually create pull requests so let's
324:14 - say I clicked on this and I did create
324:16 - new branch
324:19 - let's say I clicked on this and I said
324:21 - create new Branch from
324:23 - and also provide a new Branch name we'll
324:25 - call it tester
324:27 - and where to pull from let's pull from
324:29 - the master branch
324:32 - so we're now in this tester folder right
324:34 - here this git Branch let's go to Pages
324:37 - let's go to app.tsx and I don't know
324:41 - let's do something dumb in here and just
324:43 - say hi everyone I know I say that a lot
324:46 - in this course
324:48 - we'll click save there we'll go over
324:50 - here and we'll commit this dumb thing
324:54 - there are no stage commits would you
324:56 - like to Stage all your changes and
324:58 - commit them directly I'll say always
324:59 - that's because I use the keyboard
325:01 - shortcut for command enter which stages
325:04 - and commits
325:07 - and now over here
325:10 - in our GitHub side panel we can click
325:13 - this button up here that says create
325:15 - pull request and as always a lot of the
325:18 - stuff is in the command palette we can
325:20 - say create pull a request
325:22 - I'll press enter
325:24 - and you can say merge changes from this
325:26 - tester Branch into the master Branch
325:28 - dumb thing right here
325:31 - and I'll go ahead and click create
325:34 - there is no Upstream Branch for tester
325:36 - do you want to publish it and then
325:38 - create the pull request so we're going
325:39 - to push this local branch up to GitHub
325:42 - and then create the pull request and
325:44 - I'll click publish Branch there
325:47 - so it's going ahead doing all the things
325:49 - and now if I go and back to the sidebar
325:53 - panel for the GitHub repos thing there
325:56 - we go dumb thing is the brand new PR
325:58 - that I just made
326:01 - now this extension does a lot with PR's
326:04 - commenting reviewing great stuff what it
326:07 - also does is issues it is called the
326:10 - GitHub pull requests and issues
326:12 - extension so I want to show you
326:15 - something cool I don't have any issues
326:16 - right now but let's go ahead and create
326:18 - one
326:20 - we can add the issue title right here
326:22 - assignees labels and then just write all
326:25 - this stuff right here
326:26 - and then up in the top you just click
326:28 - this check mark and it creates the issue
326:32 - I want to show you another cool way to
326:34 - create an issue if I'm in a folder right
326:36 - here and I go over here let's say I
326:38 - create a comment and say to do delete
326:42 - this line because it's useless
326:47 - I should probably make that comment a
326:49 - little bit more
326:51 - informative delete because it is
326:55 - not required
326:59 - delete hello
327:01 - and you probably see this light bulb
327:03 - right here we can click and we can
327:06 - create a GitHub issue so this extension
327:08 - will read through find our to do words
327:11 - and create an issue from there so I can
327:13 - click that
327:15 - and we create the issue right from the
327:17 - command palette I'll press enter right
327:18 - there
327:21 - and if we go back to this GitHub issues
327:24 - and pull requests extension over here my
327:27 - issues created issues I can refresh this
327:29 - button right here and there we go
327:34 - and the options we have here are two
327:36 - start working on issue and check out
327:38 - topic Branch or we can just open the
327:41 - issue directly on GitHub and see what's
327:42 - going on in there
327:45 - it also pulls in the line for where that
327:47 - comment was created which is really nice
327:52 - all right very helpful extension the
327:54 - GitHub pull requests and issues a lot of
327:57 - your GitHub workflow can go directly
327:59 - into vs code making us that much more
328:01 - productive
328:03 - in this video we will be talking about
328:06 - GitHub a little bit more and we will be
328:08 - talking about the remote repositories
328:10 - extension in vs code
328:13 - this is a really convenient extension if
328:15 - you just want to edit a little bit of
328:17 - your repos or if you want to send in a
328:19 - pull request on somebody else's repo but
328:22 - you don't want to have to pull down the
328:24 - whole repo do that whole setup you can
328:27 - just remotely edit it
328:30 - let's go into vs code I have the remote
328:32 - repositories extension right here I'll
328:35 - click install
328:37 - we get this nice icon on the bottom left
328:39 - I can click that
328:41 - and it says open remote Repository
328:44 - I'll click that
328:46 - we can open remote repo or a pull
328:48 - request from GitHub I'll go ahead and
328:51 - open a repo
328:53 - it wants us to sign in just like we did
328:55 - with the GitHub puller requests and
328:57 - issues extension
328:58 - we'll do that here
329:00 - and I'll go ahead and open vs code I'll
329:03 - say OK open
329:05 - and then we can choose a repo I'll click
329:07 - this productive vs code site one
329:09 - and you can search for it as you would
329:11 - in the command palette
329:14 - and it opens these up in a virtual file
329:17 - system
329:18 - so it's not exactly downloading these
329:21 - files to your computer or anything it's
329:23 - just putting them in a virtual file
329:25 - system so that we can view them edit
329:26 - them and work with them
329:29 - let's say I wanted to go into my
329:31 - tailwind.config.js right here
329:35 - let's say I wanted to change the mode of
329:37 - this to mode is jit
329:42 - I'll save that now if we click on the
329:44 - remote repos extension right here
329:47 - we can see the previously opened remote
329:50 - repos we can see the previously changed
329:53 - files and what changed in them
329:55 - and now if we want to commit this change
329:57 - back up to the GitHub repo I can click
330:00 - on the GitHub Source control section
330:02 - right here
330:03 - we can commit this and Commit This to
330:05 - the curse of productive vs code site
330:07 - repo
330:08 - so I can commit a jit change right here
330:12 - and then I can press command enter or go
330:15 - up here use this little check mark to
330:17 - stage and commit
330:19 - what I can also do is go up here and
330:22 - click create pull request
330:25 - so I can say jit change I'll press enter
330:27 - right there
330:29 - name a new Branch we can call this maybe
330:32 - Chris jit
330:36 - and that goes ahead and creates pull
330:37 - requests number one on that GitHub repo
330:39 - if you want to switch to the new Branch
330:41 - to continue to make changes no I'm all
330:44 - good but that should be up and running
330:47 - on our GitHub repo right now under pull
330:49 - requests there it is jit change
330:54 - and once we're done with this in vs code
330:56 - we just close everything we don't need
330:57 - to have to go into our file system
330:59 - delete everything it's just working and
331:03 - we're working and editing remotely
331:07 - it's just a nice way to edit and update
331:09 - our repos maybe send in pull requests
331:11 - and not have to download the entire repo
331:15 - in this video we'll be talking about
331:17 - using apis and consuming apis
331:22 - now let's use the Pokey API here and I
331:25 - use this for every demo I do and I
331:27 - probably should find a better API now
331:29 - but we are using the Pokemon API for
331:32 - this
331:32 - if you go here you go https Pokey API
331:36 - this whole URL right here
331:38 - slash Pokemon slash ditto you can paste
331:41 - that in here and say slash Pokemon slash
331:43 - ditto
331:46 - now that was an easy one because it is a
331:48 - just a get request to go get information
331:51 - but sometimes you may have to do a post
331:53 - request sometimes you need to pass along
331:55 - authentication like a bearer token or
331:58 - any body parameters
332:01 - to do stuff like that a little bit more
332:03 - advanced is to use Postman
332:06 - now in Postman you can do something like
332:08 - the Poke API Pokemon slash Pikachu and
332:13 - maybe you want to create a move you
332:16 - would do Post request and then you would
332:18 - go into your body and you would add
332:19 - informed data or Json data right here
332:25 - but then you'd have to go into your
332:27 - headers and make sure that content type
332:28 - was application Json
332:34 - so there's a lot to using apis rather
332:36 - than just going to your browser and
332:38 - using it
332:39 - and Postman is fantastic you're going to
332:42 - use Postman or a tool like insomnia to
332:44 - go work with apis then you go back into
332:46 - your code then you go back to the docs
332:48 - so there's a lot of process here
332:51 - something that makes us more productive
332:53 - in vs code is moving everything into vs
332:56 - code so we never have to leave this area
332:58 - right here
333:00 - there are two extensions that do this
333:02 - really well one is rest client
333:05 - I can install this one right here
333:09 - I don't use this one as much as the
333:11 - option number two but I want to show it
333:13 - to you just in case you find it useful
333:14 - I'll create a new file
333:16 - and the one thing that is requirement
333:18 - for rest client is this needs to be a
333:20 - language mode of either HTTP or plain
333:24 - text
333:27 - I'll go with HTTP here
333:29 - and then I can just paste in the URL I
333:31 - had Pokemon slash Pikachu
333:35 - we get this nice button here that says
333:37 - send request I can click Send request
333:39 - and it opens over here on the right side
333:41 - and should give us the request and if we
333:43 - scroll down it should give us the object
333:46 - the Json response
333:48 - or abilities ability of static let's
333:51 - hide that one forms Pikachu where's the
333:55 - bigger version was it Raichu
333:58 - or maybe it's not in there maybe it's
334:00 - under evolutions
334:02 - but my Pikachu nerdness is showing so
334:06 - let's keep going let's move forward
334:09 - there's a couple other things you can do
334:11 - here you can turn that into a post
334:13 - request you can add parameters here you
334:15 - can do URL params right here
334:18 - but that's a lot of work and knowing
334:20 - that format is very specific
334:23 - so we'll do something closer to what we
334:25 - have for Postman where we can actually
334:28 - use a GUI or a graphical user interface
334:31 - to design our API requests
334:34 - the one we want here is thunderclient
334:36 - I'll install that
334:38 - came out not too long ago but now it
334:41 - gives us a nice little button on our
334:43 - sidebar we click Thunder client
334:46 - let me close that and close that you can
334:49 - click new request
334:51 - and we get what looks very similar to
334:54 - postman we have a get with a drop down
334:56 - here we're gonna do the Pokemon right
334:58 - here Pokemon and let's go for Charizard
335:03 - you can change out your auth for a
335:05 - bearer token if needed or none you can
335:08 - change out your body all that good stuff
335:10 - but I'll just click Send here
335:13 - and we get our response down here
335:17 - so rest client and thunderclient are
335:20 - great ways to work with API requests
335:22 - especially not having to leave vs code
335:24 - thunderclient is fantastic just go in
335:27 - here work over here and then when you
335:29 - need to test out API calls you can click
335:31 - here and do a new request
335:33 - you can see all your previous requests
335:35 - right here as well and if you're working
335:37 - locally let let's say you have a next JS
335:40 - application with serverless routes you
335:42 - can just do HTTP localhost 3000 slash
335:46 - API slash hello
335:48 - so you can also use your local API
335:51 - routes
335:54 - another helpful tool in bringing a lot
335:56 - of our workflows back into vs code so we
335:58 - can stay productive and stay in one spot
336:01 - this video is all about Vim editing with
336:05 - Vim is probably my number one most
336:08 - effective productivity tip is to learn
336:11 - Vim I think it's such a fantastic text
336:14 - editor and a way to edit code
336:19 - the problem with Vim is that it has such
336:22 - a high learning curve
336:25 - so for me I jumped into Vim which is an
336:27 - editor that you can download over here
336:29 - install it and it is different than vs
336:33 - code so it opens up as its own editor
336:35 - not vs code and you can learn to work
336:37 - with it but it takes configuration it
336:39 - takes learning how it works
336:41 - so for me that setup I did all of that
336:44 - it took a little bit too long
336:47 - the cool thing about this is that there
336:49 - are Vim extensions for vs code so if I
336:53 - go into vs code and I go into my
336:55 - extensions type in Vim
336:57 - there's two that I want to call out
336:59 - there's Vim which is the big one
337:01 - and the one that I use is amvim
337:06 - now amvim has far fewer installs now am
337:09 - Vim has far fewer installs so I'll tell
337:12 - you right now the reason that I use am
337:13 - Vim instead of Vim
337:16 - is that amvim is a little bit simpler it
337:18 - doesn't have all of the features of the
337:20 - Vim editor
337:22 - but it has just enough for me to feel
337:24 - happy about the medium between I'm using
337:27 - vs code and Vim whereas this extension
337:30 - Vim pretty much takes over a lot of the
337:33 - editing capabilities of vs code and it
337:35 - throws you into the world of Vim
337:39 - if you don't know Vim I definitely
337:41 - recommend trying to learn it there is a
337:44 - website here Vim Dash Adventures which
337:47 - is really nice to figure out how to use
337:49 - Vim
337:51 - so I've talked a lot about Vim so far
337:53 - but I haven't really shown what it can
337:55 - do so let's go ahead and take a peek if
337:58 - I go to my extensions and I type in
338:00 - amvim
338:02 - I'll click install here
338:06 - and let's go open up a file let's go to
338:08 - this package.json
338:11 - let's say I wanted to go down a bunch of
338:13 - lines so normally I would go over to my
338:16 - mouse click down here
338:18 - and that would be the end of it but I
338:20 - have moved my hands off of my keyboard
338:24 - what Vim tries to do is keep your hands
338:26 - on your keyboard and on the home row
338:28 - which is the middle keyboard section
338:31 - to make that task even quicker I can
338:33 - press the down arrow a bunch of times
338:34 - and go down and up
338:37 - but that even gets me off of the home
338:40 - row
338:42 - so what Vim does is it has two modes for
338:45 - text editors there's one which is the
338:48 - movement mode and that's what I'm in
338:50 - right now you can see the block right
338:51 - here the block cursor if I press J it
338:54 - goes down if I press K it goes up
338:57 - if I press h it goes left
339:00 - and if I press L it goes right so all of
339:02 - those are on the home row I didn't have
339:04 - to leave the home row to move
339:07 - now you might be wondering okay now that
339:10 - I'm in navigation mode how do I get to
339:13 - my text editor mode
339:15 - to do that I can press I to insert and
339:18 - now I can type like normal
339:24 - and then I can delete all of this by
339:26 - going here to my mouse highlighting all
339:28 - of this stuff right here and then
339:30 - deleting it
339:33 - once I want to exit insert mode I press
339:35 - the Escape
339:37 - and now I'm back to navigation mode
339:40 - so that's the two big things to know
339:42 - about Vim is there's movement mode or
339:43 - navigation mode and then there's also
339:45 - the insert where you're actually typing
339:48 - mode
339:49 - now you might be wondering okay I get to
339:52 - stay on the home row but what benefits
339:54 - does it get me
339:55 - let's say I wanted to go up maybe five
339:58 - lines I would normally have to press up
340:00 - one two three four five
340:04 - with the navigation mode in Vim you can
340:07 - actually type in a number and repeat a
340:09 - command so let's say I wanted to go down
340:11 - five lines I could press five J and that
340:15 - goes five down
340:17 - let's say I wanted to go to five words
340:20 - before this that's what the letter B is
340:22 - for it goes B beginning of the word
340:24 - beginning of the previous word beginning
340:27 - beginning or I can go to the next word
340:29 - with w w w
340:32 - or the end of the next word with e
340:34 - there's a lot of really cool smart
340:36 - keyboard shortcuts like that in Vim
340:39 - and once you start learning Vim even
340:41 - more there's some really great ones like
340:43 - pressing V and then I can highlight all
340:46 - from the home row
340:48 - but let's say I wanted to highlight
340:49 - everything from this L all the way over
340:52 - to This n so I want to delete all of
340:54 - this text right here I could press V
340:57 - right here
340:59 - and I can press
341:00 - BB
341:02 - or I could do that differently I could
341:04 - say
341:06 - 6 B and go all the way over there
341:10 - or I can do what's called a find in Vim
341:13 - where I can press F and then I can type
341:15 - in the character of what I want to find
341:17 - I can type in the quotes and it goes to
341:20 - the first quotes on that line
341:22 - let me open up the status bar because it
341:25 - shows you a little bit of what we're
341:26 - doing in our Command so if I press f you
341:29 - can see down here in the status bar it
341:31 - says F and what I can press comma and it
341:34 - finds the comma
341:37 - let's say I wanted to search for the
341:40 - quote that is in the previous character
341:42 - so I can do capital F and the quote so
341:45 - that goes all the way over to the quote
341:47 - there's a lot of really cool navigation
341:49 - tricks just like this that Vim comes
341:51 - with and once you learn them all you can
341:54 - move all around your editor without
341:55 - having to ever touch your mouse
342:00 - like here I can say V and then I can do
342:04 - find n find n
342:07 - press left one and then I can press X to
342:09 - delete all that
342:12 - Vim comes with even more I I want to
342:14 - keep going but maybe I'll put this into
342:16 - a larger course if you're interested
342:17 - let's say I wanted to change everything
342:19 - inside of these quotes right here
342:23 - normally you would go to your mouse and
342:25 - highlight all of this and change all of
342:28 - that out but here what I can do is
342:31 - change inside the quotes
342:34 - and now I can change everything inside
342:36 - of those quotes
342:37 - let's undo that
342:39 - I'll press escape to go back to
342:42 - navigation mode I'll press down a couple
342:44 - times change inside quote there and I'll
342:46 - say next export
342:49 - and then I'll click escape to get back
342:51 - to movement mode
342:54 - this isn't even just to do these quotes
342:55 - I could do change inside and the bracket
342:58 - right here the curly bracket and that
343:00 - would be that entire object so I can say
343:02 - the bracket right there
343:03 - and check that out we're in this brand
343:06 - new scripts object
343:09 - if you do want to learn Vim a little bit
343:11 - more I am using the am Vim package
343:14 - there is a really cool package called
343:16 - learnvim
343:19 - click install here and it's a really fun
343:21 - tool to learn Vim inside of vs code
343:26 - and there's some steps right here and
343:28 - then it opens up an editor and shows you
343:31 - a little bit of a tutorial
343:34 - let's go ahead and do that command shift
343:36 - p learn Vim
343:39 - I'll press enter right there and here we
343:42 - go we are able to open up the game
343:45 - we can read through this thing right
343:47 - here and then over here on the right we
343:49 - can play around with our Vim skills
343:52 - over here we can say install them let's
343:54 - go to baby steps
343:56 - and under baby steps we scroll down
344:00 - what is normal mode
344:03 - editing mode
344:06 - and we saw insert mode type w normal
344:09 - mode type w I highly encourage you to
344:12 - try out this learn Vim extension and
344:14 - learn Vim from right inside of vs code
344:16 - really great tool
344:19 - but overall
344:21 - also recommended to learn Vim if you are
344:23 - interested maybe I'll put together a
344:25 - course about vim and go more in depth
344:30 - but I truly believe that learning Vim
344:32 - will make you a far more productive
344:34 - coder and also it's really cool looking
344:37 - when people see you flying around your
344:39 - cursors and your editors without ever
344:41 - moving to go grab your mouse
344:45 - in this video we'll be talking about
344:47 - smart helpers that help us write code
344:50 - better using AI
344:52 - now I know that sounds a little scary
344:54 - will AI take our jobs will it just do so
344:58 - well that we aren't needed anymore
345:00 - from what I've seen especially so far is
345:04 - that AI coding is here to help us
345:06 - think about it this way if we are
345:08 - getting stuck on a problem we usually
345:11 - have to go over to stack overflow
345:13 - we'll see what everyone else is writing
345:15 - we'll copy something we'll come back to
345:17 - our code and we'll try it out
345:20 - what these AI coding tools do is they
345:23 - distill all of that public information
345:24 - on stack overflow on GitHub repos and it
345:27 - brings it directly into your editor so
345:30 - you can get some nice helpful Snippets
345:32 - without having to go out and Google
345:34 - search for them
345:36 - so with that in mind it is a nice Helper
345:39 - but it's not a replacer
345:42 - I'm going to install one right now tab 9
345:44 - is probably one of the most popular ones
345:48 - there's tab 9 in kite I would think are
345:50 - the two most popular Microsoft has their
345:52 - own called intellicode
345:54 - but I like how tab 9 works I like their
345:57 - extension and their Snippets that they
346:00 - give us the intellisense and the
346:02 - recommendations are pretty spot on I
346:04 - would say
346:05 - so once we are here we have installed
346:08 - tab 9 down here you can see tab 9 is
346:10 - working
346:11 - now we have a brand new Javascript file
346:14 - here let's start typing let's say
346:15 - function add
346:18 - anything with this hexagon icon will be
346:21 - a tab 9 feature it says add event ADD
346:24 - child we don't want those I'm just going
346:26 - to say a oh there we go there's a nice
346:28 - one from tab 9 A and B and I'll click
346:31 - enter there
346:33 - I'll press enter
346:34 - and let's say return and check that out
346:37 - tab 9 already knows hey you probably
346:38 - want to return a plus
346:41 - so I'll click that
346:43 - press space and tab 9 says oh let's
346:45 - probably complete the rest of that a
346:47 - plus b
346:49 - tab 9 gives us a little bit extra
346:51 - intellisense for what we think we should
346:53 - be writing let's say we have const
346:56 - button is equal to
346:57 - document
346:59 - it says create element I don't want that
347:01 - let's go for
347:03 - query selector
347:06 - there it is tab 9 coming in finally and
347:09 - we can say oh it probably wants that
347:11 - button one
347:12 - because we named it button over here so
347:15 - this is where you start to see the AI
347:16 - kick in it says hey your variable is
347:18 - called button maybe you want a ID of
347:21 - button
347:23 - and then let's go over here and say
347:24 - button dot add event listener
347:28 - and look it already started Auto
347:30 - completing that click right here because
347:32 - it knows it was a button so I'll click
347:34 - that and let's space
347:37 - it can either do an on click Handler or
347:39 - click function
347:42 - there we go I'll press enter e dot
347:45 - prevent default
347:48 - so it doesn't really write the code for
347:50 - us it just helps us out to write a
347:52 - little bit better and the cool thing
347:54 - about this AI code helper is that the
347:57 - more we write and that the more we work
347:59 - with it the more it'll understand how we
348:01 - code and how our code works and then it
348:04 - can start recommending us for our own
348:06 - style
348:08 - for instance I already have query
348:09 - selector here I already have this add
348:11 - event listener here let's go down and
348:13 - say const form
348:15 - check it out it already inferred from
348:17 - the previous example it says hey you
348:19 - probably want query selector
348:21 - I'll open this up it says hey you
348:23 - probably want form
348:25 - and then we'll say form Dot
348:28 - add
348:29 - event listener it gave us a click even
348:31 - though I wanted submit but it did do the
348:34 - full function already
348:35 - e dot pre
348:38 - and then we have prevent default
348:42 - there we go
348:44 - and I can change this out for submit
348:48 - so give it a try install tab 9 or kite
348:51 - and if you look at tab 9 they do have
348:54 - some premium features if you have the
348:55 - free version it apparently works
348:57 - decently but there's deep completions
349:00 - there's a pro version
349:03 - but also if you sign up I believe you
349:05 - get these deep completions in the cloud
349:08 - whereas right now everything is
349:10 - completed locally
349:12 - give it a shot see what works best for
349:14 - you I think their Pro Plan is like 12 a
349:16 - month which may be too much for a code
349:19 - completion for a vs code extension but
349:22 - give it a try see if you like the free
349:24 - version I think the login where you sign
349:26 - up is a free version still you just need
349:28 - to sign up
349:30 - yeah give it a try see what happens
349:32 - Beyond tab 9 there is a really cool one
349:36 - that just came out from Microsoft and
349:38 - GitHub called GitHub Copilot
349:41 - and if you go down here you play this
349:43 - little GIF that they have
349:46 - as soon as you write the comment
349:48 - GitHub copilot gives you the full code
349:50 - and this is the most I've ever seen an
349:52 - AI code helper do
349:55 - more than tab 9 and I haven't really
349:57 - tried the tab 9 pro version but copilot
350:00 - does fantastic and I want to show this
350:02 - off it is in private beta right now so
350:04 - sign up and hopefully you'll get access
350:06 - pretty soon hopefully everybody will
350:10 - I will go into my vs code and let's go
350:13 - install copilot I got access to it
350:17 - so here is the GitHub extension for it
350:19 - you can install it but if you don't have
350:21 - access it won't really work
350:23 - I'm going to install it
350:25 - and it says sign in to access the GitHub
350:28 - copilot technical preview I'll go ahead
350:30 - and sign in and this is really exciting
350:32 - I love showing off Copilot
350:36 - once I am logged in with copilot let's
350:38 - go ahead and create a brand new file I'm
350:41 - going to change this out to language
350:42 - JavaScript
350:45 - down here you see the GitHub copilot
350:48 - icon
350:49 - and I want to show you a quick thing
350:51 - let's say I wanted to create a function
350:53 - that added just like I did in tab 9.
350:56 - here you can say function add
351:00 - and here's copilot coming in and giving
351:03 - you a whole bunch of code that you may
351:05 - or may not want so I'm going to keep
351:07 - writing here I'm going to say a
351:09 - oh and it says oh you probably wanted
351:10 - this so now I can press Tab and see all
351:12 - of that happen
351:14 - let's go even further let's say I wanted
351:16 - to function pick random from array and I
351:22 - could pass in an array here
351:26 - it can give us all of that code so I
351:28 - didn't have to go to stack Overflow to
351:30 - look up how to randomly pick from an
351:32 - array
351:33 - let's go a little bit further copilot is
351:36 - cool because it reads from your comments
351:38 - so if I said go over here and create a
351:42 - random array between 0 and 100. let's
351:48 - say random array of
351:51 - 30 items between 0 and 100
351:55 - VAR random array and I'll press tab
351:57 - there
351:59 - and it just writes all of this random
352:01 - code for us
352:03 - there we go
352:06 - we can even use copilot to go fetch data
352:10 - from the GitHub API for a specific
352:16 - user and I spelled GitHub wrong
352:22 - function
352:24 - fetch user data and it does get Json
352:27 - let's see if we can get this to use
352:29 - fetch I can click next here and check
352:31 - out all of the other recommendations
352:33 - that it has
352:35 - there we go now it's using fetch dot
352:38 - then response I'll press tab there and
352:40 - all of that code is coming in it even
352:42 - knew what the GitHub API URL was
352:47 - so co-pilot is the newest launched AI
352:50 - code Helper and I think it's really
352:52 - fantastic it's already helped me a ton
352:54 - in my code and mostly it just saves me
352:58 - time from going to see stack overflow
353:02 - I recommend you installing tab 9 or kite
353:04 - and seeing how that works for you
353:06 - letting it learn your writing style and
353:09 - your coding style and then once you get
353:10 - access to copilot definitely try out
353:12 - copilot because it's so cool
353:16 - really promising as far as tools for the
353:19 - future
353:20 - in this video I want to talk about a
353:22 - setting that
353:24 - is maybe controversial a lot of people
353:26 - don't use it and I did not like it at
353:28 - first but the more I use it the more I
353:32 - think I like it
353:33 - let me talk about the problem here right
353:35 - now if we are in vs code and we use the
353:37 - sidebar on the left
353:39 - notice how my eyes are right here along
353:41 - the left side of my code
353:43 - it'll push my code over and then I have
353:46 - to shift my eyes
353:48 - so a trick to this is moving the entire
353:50 - sidebar over to the right move sidebar
353:54 - right
353:55 - and now look how weird this is already
353:58 - the code is on the left the sidebar is
354:01 - on the right
354:02 - but as I press B there is no shift in my
354:06 - code so I can do command B command B and
354:09 - it moves the sidebar over on the right
354:11 - side
354:12 - I can use the Explorer I can use the
354:14 - find panel I can use the get panel I can
354:17 - use extensions all over there
354:19 - and nothing ever changes on the left
354:21 - side
354:23 - so that's a small setting give it a shot
354:25 - it took me about a week to start liking
354:27 - it and before that I just did not like
354:29 - it it was too weird but I am enjoying it
354:32 - and I think I may use it into the future
354:35 - right click on your activity bar and
354:38 - click move sidebar left or move sidebar
354:40 - right if you want to try it out
354:42 - give it a shot let me know if you like
354:43 - it
354:44 - and that wraps up productive vs code I
354:47 - hope you learned a lot I hope you
354:49 - learned maybe little bits and tips and
354:50 - tricks and extensions all over the place
354:53 - that you can add together to make your
354:55 - customized workflow for vs code
354:58 - and hopefully we get closer to being 10x
355:00 - Developers
355:01 - but with all things it's gonna take
355:05 - practice we don't just become 10x
355:06 - developers overnight we don't just learn
355:08 - all of these keyboard shortcuts
355:10 - overnight it's going to take practice
355:12 - and repetition to commit all of these
355:14 - things to memory so that we can use them
355:16 - in our daily workflows
355:18 - so maybe you won't jump to 10x overnight
355:21 - but you will jump to 2x 3x 4X gradually
355:24 - and that's the goal here we're trying to
355:26 - do gradual progression so next steps
355:29 - this course the cool thing about it is
355:31 - that we're not going to stop here we
355:33 - will update this course whenever we find
355:35 - new settings new workflows new
355:37 - extensions I'll keep this course updated
355:39 - with all of the latest and greatest I'll
355:40 - make sure you get those updates and
355:42 - we'll keep going forward and we'll keep
355:44 - making vs code workflows better and
355:46 - better and more customized to who we are
355:49 - thanks for watching