00:00 - in this nine hour course you will learn
00:01 - how to use flutter and upright to
00:04 - develop your own Twitter clone complete
00:06 - with authentication tweet creation
00:09 - real-time updates and more Revan is your
00:12 - instructor for this course are you ready
00:14 - to build the ultimate Twitter clone in
00:16 - this video I'll be taking you through
00:18 - the step-by-step process of creating an
00:20 - app that has all the features you love
00:21 - on Twitter and more I'll start by
00:24 - showing you how to install apprite and
00:26 - set up the flutter project with apprite
00:28 - in the next section we will add user
00:30 - registration and login with email and
00:33 - password along with the logic of keeping
00:35 - logged in users logged in
00:37 - then we'll move on to the fun stuff like
00:39 - tweeting text images and links and even
00:42 - identifying and storing hashtags next
00:45 - you'll learn how to display tweets like
00:48 - the Tweet with the exact Twitter like
00:49 - animation retweet it and even reply to
00:53 - the tweets just like keyword on Twitter
00:55 - after this we will move to the explore
00:58 - tab where you will learn how to search
00:59 - for other users follow them and even
01:02 - display their followers following and
01:04 - recent tweets
01:05 - with the notifications tab we will add
01:08 - the feature to allow our users to be
01:10 - able to stay up to date on all the
01:12 - latest activity including replies
01:14 - follows and likes by others on their
01:17 - tweets I'll also show you how to edit
01:19 - your own user profile by editing name
01:22 - bio or changing profile and Mana picture
01:25 - we will also add the feature of listing
01:27 - all the tweets that have a specific
01:29 - hashtag and finally we can also allow
01:32 - the user get the ultimate status symbol
01:34 - Twitter Blue by simply clicking a button
01:37 - with the help of this tutorial you learn
01:40 - all about apprise features like
01:41 - authentication database storage real
01:44 - time queries and indexes for State
01:47 - Management we will be using riverpod
01:50 - even if you are a beginner with no prior
01:52 - experience with upright or riverpod
01:54 - you'll be able to follow along and
01:56 - create a stunning project before
01:58 - starting this tutorial I'd like to
02:00 - request you all to subscribe to the
02:01 - channel now let's start with the video
02:04 - so the first step is to install apprite
02:06 - locally in our system to do that let's
02:08 - take a look at the dogs
02:10 - and click on installation aware
02:13 - if we scroll down you'll find that the
02:15 - easiest way to start running the upright
02:18 - server is by running a Docker installer
02:20 - that means we need to install Docker to
02:22 - install Docker we can just go to
02:23 - docker.com website we can select the
02:26 - appropriate system and download Docker
02:28 - desktop I'm going to select the Apple
02:30 - chip
02:31 - and while Docker is being downloaded
02:33 - I'll tell you what Docker is Docker is
02:36 - just a way to package software such that
02:38 - it can run on any hardware in our case
02:40 - suppose we have apprite with some
02:42 - version so flutter with app right
02:44 - project works on my PC but when you try
02:47 - to run the same flutter project with a
02:49 - different version of apprite installed
02:50 - on your PC it doesn't work or works but
02:53 - with a different Behavior than expected
02:55 - that's where Docker helps and solves the
02:57 - problem now that we have understood what
03:00 - Docker is and our download for Docker is
03:03 - complete let's click over here I'll drag
03:05 - this Docker to Applications folder after
03:08 - the process has been completed I'll
03:09 - click on command Q to exit this I'll go
03:12 - to the finder click on applications and
03:15 - then run Docker from here so this is how
03:17 - the docker desktop screen looks
03:19 - we don't have to do anything in here we
03:22 - can just go back to the installation
03:23 - website and see what are the next steps
03:25 - the next step is to copy this command
03:27 - and put it in the terminal so if you're
03:29 - on Linux or Mac you can use this command
03:31 - or if you're on Windows you can use this
03:33 - command depending on if you're using CMD
03:36 - or Powershell you can run the following
03:38 - commands since I am on Mac I'll just
03:40 - copy this open Terminal and paste the
03:44 - command over here then I'll click on
03:46 - enter
03:48 - after it downloads everything it will
03:50 - ask you for the prompts so on what port
03:52 - should this upright server run I'm just
03:55 - going to go ahead with the default
03:56 - option so I'll click on enter enter
03:58 - enter
04:01 - so after apprite has successfully
04:03 - installed you can close the terminal and
04:05 - in the docker desktop you'll see apprite
04:07 - is now running with lots of things
04:09 - happening inside you might see some
04:11 - familiar names like influx GB
04:15 - all of this is used
04:17 - with an app right internally if you want
04:21 - to know more it's written in the app
04:23 - right documentation you can go ahead and
04:25 - take a look at it after this we can go
04:27 - to Chrome open localhost
04:30 - I already have an account with app right
04:33 - but so that we are on the same page
04:35 - I'm going to create a new account and
04:38 - name myself everyone
04:40 - enter an email and a password click on
04:42 - sign up
04:43 - and here we are on the project screen so
04:46 - we need to type in our first project
04:48 - name
04:49 - so we'll type in Twitter clone
04:52 - and then click on create project
04:54 - so our upright project has now been
04:56 - created the next step is to start a
04:59 - flutter project so we login go to the
05:01 - terminal go to the desktop create a new
05:05 - project called flutter create
05:08 - and call this Twitter clone
05:11 - and then click on enter
05:12 - then we'll migrate to Twitter clone
05:15 - folder and open a 10 vs code
05:18 - now we can go to the lib folder and in
05:20 - the main.dot file let's just try to run
05:23 - an application so I'm going to open an
05:25 - iOS simulator
05:26 - click on run and run without debugging
05:30 - and while this is running I just want to
05:32 - mention two important commands related
05:34 - to app right so we'll again open the
05:36 - terminal
05:37 - and if you're on Mac if you just do CD
05:41 - which is chain directory and go to app
05:43 - right we can go to the upright folder
05:45 - which is basically the root folder and
05:48 - inside of the root folder we have the
05:50 - upright folder and there you can run
05:53 - multiple commands two important commands
05:55 - are for stopping upright container and
05:59 - another one is starting upright
06:01 - container to stop upright container you
06:03 - can just do Docker compose stop and
06:06 - after hitting enter
06:08 - upright container in the docker will
06:10 - stop running so this has 20 on 20
06:14 - running it will change to 0 out of 20
06:16 - and it will stop running so after you
06:19 - click over here
06:21 - and restart localhost this will also go
06:24 - away
06:25 - because localhost is only there as long
06:28 - as a Docker container of app right is
06:30 - running over here and after stopping the
06:33 - docker container if you again want to
06:34 - restart the docker container you don't
06:37 - have to run the command that we run
06:38 - earlier again you don't have to run this
06:41 - command again
06:42 - this is for the installation to again
06:45 - run this upright container you need to
06:49 - run Docker compose up dash dash dash
06:53 - remove dash orphans and after you run
06:56 - this your Docker container of app right
06:58 - will again start running but you need to
07:00 - make sure that you are in the upright
07:02 - folder if you're on Mac you can just do
07:05 - CD app right from the root and you'll
07:06 - get into there and if you're on Windows
07:09 - you can just go to the users folder and
07:11 - check for the upright folder our app is
07:14 - also running fine now so let's go ahead
07:16 - and set up app right for our flutter
07:19 - project
07:20 - so we want to add a flutter platform so
07:23 - we'll just click over here and then we
07:25 - need to pass in the name of the Android
07:27 - app
07:28 - I'll just do Twitter Android and then we
07:31 - need the package name so I'm just going
07:33 - to go to the build.gradle in the Android
07:36 - folder in the app subdirectory copy this
07:39 - application ID
07:40 - and paste it over here if you are going
07:43 - to build this application for production
07:45 - or if you want to deploy it
07:48 - on Play Store you'll have to change this
07:51 - com.example to com dot suppose everyone
07:54 - if that's your name but since I just
07:57 - want to demo this I'm just going to have
08:00 - com.example here
08:01 - then click on next
08:03 - then you need to install this app right
08:05 - dependency so you can just copy this
08:08 - click on command shift p
08:10 - click on dot add dependency
08:13 - paste in upright and install it it will
08:15 - install the latest version of app right
08:17 - directly in pubspect.aml file then we'll
08:20 - click on next and these are all the
08:22 - steps that are later required but for
08:24 - now we can just click on next
08:26 - and we are done now we need to add
08:29 - another platform which is flutter app
08:31 - only but for iOS so for iOS I'm just
08:34 - going to have Twitter iOS and now we
08:37 - need bundle ID to get bundle ID you can
08:40 - go to iOS right click and open a 10x
08:44 - code if you're on Windows you probably
08:47 - won't get the open index code button
08:49 - because you cannot build iOS
08:50 - applications with
08:52 - Windows platform
08:54 - so you can skip all the iOS related
08:57 - steps that we are doing here just follow
08:59 - along for Android now to get the bundle
09:01 - ID you can click on Runner
09:03 - go to signing and capabilities copy this
09:06 - close xcode paste it over here click on
09:10 - next we have already added upright
09:12 - dependency we can click on next next and
09:15 - we are done
09:16 - so we have configured for Android and
09:19 - iOS now if you want to add for web you
09:21 - can click on flutter app again
09:23 - you can click on web and go ahead with
09:26 - this but we are only building app for
09:28 - Android and iOS so I won't take you
09:30 - through it now that upright
09:32 - configuration is done let's close all of
09:34 - this create a new folder here called
09:37 - constants
09:39 - this constants folder is going to
09:40 - contain all the constants that are in
09:43 - our application so it can be apprite
09:46 - constants which is the file we are going
09:48 - to create now other constants include UI
09:50 - constants so all the
09:52 - UI related constants that we have and
09:56 - asset constants so we have SVG files in
09:59 - our app so we need to mention that path
10:01 - just putting them in a widget will not
10:05 - look good because if you want to update
10:07 - the SVG file sometime it will take us a
10:09 - lot of time to go through every single
10:11 - file and change it over there just
10:13 - having one single file containing all
10:15 - the constants is always a good thing so
10:17 - here in the upright constants file we
10:19 - are going to create a new file we are
10:21 - going to create a class called upright
10:23 - constants
10:24 - and we are going to have a static
10:26 - constant property of database ID
10:29 - database ID is necessary for making
10:32 - connection from our flutter app to this
10:34 - upright console we can get the database
10:37 - ID by going over your databases create a
10:40 - new database let's call this
10:43 - Twitter test database
10:46 - so and then click on create
10:48 - now we have the database ID we can copy
10:51 - this
10:53 - and paste it over here another thing
10:55 - that we need is Project ID so we'll have
10:58 - the project
11:00 - ID
11:03 - and project ID can be found in the
11:05 - Twitter clone if you click on copy of
11:07 - project ID
11:11 - and third thing that we need is an end
11:15 - point so we'll have static constant
11:17 - string endpoint which is equal to http
11:20 - colon slash slash localhost
11:24 - colon 80
11:26 - is whatever Port you put in the terminal
11:29 - if you just click on enter like me with
11:32 - the default options it's 80 otherwise it
11:35 - is what you've mentioned there slash V1
11:39 - if you want to verify you can click on
11:40 - command Full Stop open it in the browser
11:43 - and it is the same thing so we are good
11:45 - to go these are the upright constants we
11:48 - need for now there will be other
11:49 - constants that will be required but
11:50 - we'll get to it as we move forward in
11:53 - the application
11:54 - another thing we need is the svgs file
11:57 - so for svgs we are just going to go to
12:00 - the root folder create a new folder
12:02 - called assets and in assets you are
12:04 - going to have svgs
12:07 - now to get the svgs you can just go to
12:09 - this website github.com
12:11 - flutter Twitter clone
12:14 - go to asset slash svgs
12:17 - and your install all the svgs these are
12:20 - all the svgs that will be required in
12:22 - our flutter app go ahead and install
12:24 - them after you've installed them just
12:26 - click on copy and paste it in the svgs
12:30 - folder now we need to register all of
12:32 - these svgs so we'll go to pubspec.yaml
12:34 - file
12:35 - scroll down here in the assets we'll
12:38 - just have assets slash
12:42 - svgs slash so this will register all the
12:46 - files inside of this svgs folder it can
12:50 - only do this because we have put slash
12:51 - away or if you remove this it will not
12:54 - register any of the files present over
12:56 - here
12:57 - now in the constants file we need to
12:59 - create another file called constants
13:01 - asset constants dot dot then you need to
13:05 - come to this website linked to it will
13:06 - be mentioned in the description below
13:08 - and then copy all of this this is all
13:12 - the parts of the constants file so it
13:15 - contains like the Twitter logo home
13:17 - field icon home outlined icon all of
13:19 - those stuff I don't want to write this
13:21 - and waste your time
13:23 - just writing this mean
13:25 - thing is to focus on the UI of the
13:28 - application as well as the backend of
13:30 - the application not all of this
13:32 - boilerplate code that we need to write
13:33 - so this is all the asset constants with
13:36 - us
13:37 - now in the constraints folder we just
13:40 - need to create another file called
13:41 - constants dot dot and this will export
13:44 - all of these files so we have it will
13:46 - export upright constants and it will
13:49 - export assets constants
13:52 - why is it exporting and why do we need
13:54 - this file because
13:56 - this constants will be used in almost
13:59 - every single UI file of ours and even in
14:02 - the repository files that means the
14:05 - files that will talk to the server we
14:08 - don't want multiple import lines to show
14:10 - up over there so we don't want import
14:15 - dot dot
14:18 - upright constant sorry and we don't want
14:21 - import assets constants dot dot to show
14:24 - up every single time instead of doing
14:26 - this too we can just have import
14:30 - constants dot dot
14:33 - so we have lesser import lines with this
14:35 - and if you want to add more constants
14:37 - later on while we are building this
14:38 - application
14:39 - as the import lines increase over your
14:43 - suppose we have these many import lines
14:44 - now we still have to import this
14:47 - constants.dot file itself we don't have
14:49 - to continuously import this and increase
14:51 - the file length you know any is not to
14:55 - get confused let's move ahead and add
14:57 - theme to our application again we are
15:00 - just completing all of the boilerplate
15:02 - stuff
15:03 - so that we can directly dive into the
15:06 - logic of the application this part might
15:08 - be boring but but later on it will be
15:11 - very good for our application so in the
15:13 - theme first thing we need is palette dot
15:16 - dot file so we'll go ahead to this link
15:18 - will be mentioned in the description
15:20 - below copy this paste it and we have all
15:24 - the colors that are required in our
15:25 - application the background color is pure
15:27 - black blue color is a bit different from
15:30 - the
15:31 - real blue color like zero zero two fifty
15:34 - five instead of that we have this color
15:35 - extracted from the Twitter website
15:38 - we have white gray and red color
15:41 - all of this is saved over here because
15:43 - in case we want to change the color of
15:46 - our app the theming of our app even a
15:48 - little bit you can just control all of
15:50 - that from one single file file and one
15:53 - single class which is palette other
15:55 - thing that we need is app
15:58 - underscore theme dot dot we are going to
16:01 - copy this from here so we can copy and
16:03 - paste this over here
16:05 - we have to resolve this error of palette
16:07 - so we'll just click on command full stop
16:09 - import this palette dot dot and this is
16:12 - it this contains the theming of our
16:14 - application so like
16:16 - what theme is there so we have team data
16:18 - dot doc so it has
16:21 - all the properties of dog which is given
16:23 - to us by flutter itself and we're going
16:25 - to copy that and make certain changes
16:27 - for example scaffold background color
16:29 - will be pure black instead of grayish
16:32 - which is the original
16:34 - background color that flutter gives us
16:36 - so if you want to see a demo we can go
16:38 - to the main dot dot file
16:40 - we'll remove the theme from your and add
16:43 - our own theme
16:44 - which is present in app Theme dot theme
16:48 - now if you restart the application you
16:51 - can see this is pure black
16:53 - but if I again go to app Theme
16:55 - comment this line out which is careful
16:57 - background color and restart the
16:59 - application
17:01 - you'll see this is how
17:03 - flutters background color in dark mode
17:05 - looks like but we want this since you
17:08 - are copying Twitter
17:09 - this also contains app bar theme so
17:11 - every time the app bar is going to be of
17:13 - the black color with no elevation at all
17:15 - and The Floating Action button is going
17:18 - to be of blue color now that all of this
17:20 - is complete we'll go to the theme folder
17:22 - and add theme dot dot so that we can
17:24 - export these two files so the these two
17:27 - file are DOT slash app Theme Dot
17:29 - and export dot slash palette dot dot
17:34 - now we can save this close it and in the
17:37 - input here we can just import theme dot
17:40 - dot so all the boilerplate code for now
17:42 - is done
17:44 - I don't think we'll be needing any more
17:45 - things now is the time to start
17:48 - designing our application and the first
17:49 - thing that we need to do is design the
17:52 - login screen but even before doing that
17:54 - let's understand the architecture plan
17:57 - for this project so for the folder
17:59 - structure we are going to be using a
18:01 - feature first approach that means in the
18:03 - folder lib folder we are going to create
18:05 - another folder called features in this
18:08 - features we are going to have multiple
18:09 - features of our app for example
18:11 - Authentication
18:13 - home screen so the home feature the
18:16 - notifications featured the Tweet feature
18:18 - the user profile feature all of those so
18:21 - I can just create an auth feature for
18:23 - now and this auth folder is now going to
18:26 - have three separate folders called View
18:31 - controller
18:33 - and widgets
18:35 - view is basically the login view the
18:38 - sign up view all the UI related screens
18:41 - controller is basically the connection
18:43 - between View and the database files what
18:46 - are the database files well we create
18:49 - them outside of the features folder in
18:51 - the lib folder we are going to create a
18:53 - new folder called as apis this API
18:56 - folder is going to contain all the
18:58 - backend related code it's not going to
19:00 - have anything else so since we are using
19:03 - Riverport we are not going to have any
19:04 - riverpod package in apis we are just
19:07 - going to have the backend related code
19:10 - nothing else
19:11 - even the model conversion so basically
19:13 - we'll get our data in a map format we
19:16 - need to convert it in a model or a class
19:19 - based format
19:21 - even then we are going to do that in the
19:23 - controller folder not in the apis I'll
19:26 - give you a diagrammatic representation
19:28 - so that
19:29 - you understand what we are talking about
19:32 - but for now I'll just create a new file
19:35 - called login view dot dot and we are
19:37 - going to import material dot we are
19:39 - going to create a stateless widget
19:41 - actually we need a state full widget
19:43 - because we are going to have text
19:44 - editing controllers whenever there's a
19:46 - text editing controller in the field
19:48 - it's better to make it stateful widget
19:50 - because it provides us with a dispose
19:52 - method so we need to dispose of the
19:55 - controllers or the text editing
19:56 - controllers that we have right
19:59 - so for now we'll just create a login
20:01 - View and this will return a scaffold
20:04 - and just so that we can see what we are
20:06 - developing I'll copy this go to the
20:08 - main.dart file and remove all of this
20:11 - boilerplate code we don't need this
20:13 - counter application
20:14 - and instead of this we are just going to
20:17 - have
20:18 - constant logins View I'll save it and we
20:21 - should see a blank screen and here we
20:24 - are after having login view in place let
20:27 - me show you a diagrammatic
20:28 - representation so suppose this is our UI
20:32 - file
20:36 - this UI file is directly going to talk
20:39 - to the controller
20:40 - and this controller is directly going to
20:43 - talk to the repository files this
20:45 - repository file is basically the files
20:47 - that we are going to create in apis so
20:49 - it's going to be the Tweet API there's
20:52 - going to be user API
20:53 - and authentication API so these are the
20:56 - repository files all the backend related
20:58 - code but with this architecture this
21:01 - might seem very simple UI is talking to
21:03 - controller controller talks to
21:04 - repository but here's a catch UI cannot
21:07 - directly talk to repository and
21:09 - repository directly cannot talk to UI
21:13 - so in our login view for example we
21:15 - cannot have any API file being imported
21:19 - that's the best way to understand this
21:21 - if you're going to have auth API you're
21:23 - not going to have the import of auth API
21:26 - over here because you're never going to
21:28 - use auth API in our login View
21:31 - we are going to use all of that in
21:33 - controller and controller will directly
21:36 - talk to the login view so you can have
21:37 - import of
21:39 - auth controller but not auth API so UI
21:42 - cannot directly talk to repository and
21:44 - repository will never talk to UI and
21:46 - make changes in it but yes UI can talk
21:49 - to controller controller can talk to
21:51 - Repository so let's put a crossover
21:54 - because it's not allowed now you might
21:56 - ask what is the point of this controller
21:58 - why can't we directly have UI talking to
22:01 - repository as I said repository is going
22:03 - to contain all the backend related code
22:05 - and it's going to have nothing extra so
22:08 - it's just going to contain app right
22:10 - server calls upright might give
22:12 - something to us we need to send it
22:14 - across to controller
22:16 - controller will do all the processes
22:19 - that are required like model conversion
22:21 - talking with other apis so that we can
22:23 - create one function for example
22:26 - if you want to edit the user profile
22:29 - you'll send a user model that needs to
22:32 - be updated to apprite which means we are
22:34 - going to send a user model to repository
22:36 - for files the repository files will make
22:39 - some changes and send it back to
22:41 - controller but controller doesn't have
22:42 - to stop there because edit profile also
22:45 - includes editing the user image and the
22:47 - banner picture the so the controller
22:50 - will also talk to the storage API which
22:53 - is a different API than user API and
22:56 - then the controller will make changes to
22:57 - UI maybe pop off the screen so this is
23:00 - the point of controller it is going to
23:03 - make some important changes to our
23:05 - function
23:06 - and another question you might have is
23:08 - why is API not in features folder right
23:12 - why is
23:14 - controller inside of authentication
23:16 - feature but why is API not in the auth
23:19 - feature like it should be there right
23:21 - and I partly agree with you but
23:24 - the problem is suppose we have tweet API
23:28 - and user API they're both very
23:29 - interconnected so some function or some
23:34 - functionality in our app might require
23:36 - user API and tweet API both in the
23:39 - controller and the logic of feature
23:42 - first approach is that if you don't want
23:44 - any feature you just have to
23:46 - delete that for feature and the app
23:49 - should still work fine for you that's
23:51 - the logic of feature first approach if
23:54 - you don't like anything if you don't
23:56 - like a certain feature so suppose you
23:59 - don't want tweet related features you
24:01 - can just delete that feature entirely by
24:04 - just deleting the folder so if we delete
24:06 - this folder and suppose user API or
24:09 - tweet API is required in some other
24:10 - feature
24:12 - that will be a problem
24:14 - because you have deleted the API folder
24:16 - along with it right that's why apis
24:19 - folder is created in the lib folder if
24:22 - you don't understand it till now don't
24:24 - worry when we get into the real code
24:26 - you'll understand this is all
24:27 - theoretical practical approach will give
24:30 - you a better insight
24:32 - so let's go ahead and design the login
24:34 - view now
24:36 - so this is what we are trying to develop
24:37 - now let's break it down and see what all
24:40 - components are needed first is this
24:43 - component which seems like an app bar
24:45 - with
24:47 - or Twitter icon over it okay we have the
24:50 - Twitter icon already installed
24:52 - or downloaded you can see that in assets
24:54 - svgs we just had the Twitter logo SVG
24:57 - over here so we don't need to worry
24:59 - about the logo part the next thing is a
25:02 - lot of space over here so we need to put
25:04 - some spacing and then we have two text
25:07 - fields that look identical that's the
25:09 - main thing they both look identical so
25:11 - we need to create One widget for them
25:13 - because they're identical
25:17 - if they're identical we don't have to
25:20 - write the same code again and again
25:22 - so we can just create One widget for it
25:24 - and keep reusing it right because this
25:26 - is just for the login screen even in the
25:28 - sign up screen we are going to require
25:29 - the same auth fields
25:31 - then we have a done button which is kind
25:35 - of circular in shape and then we have a
25:38 - text with some part in white color and
25:41 - some part in blue color okay now let's
25:44 - start developing it
25:45 - so in the app bar we're going to have
25:47 - the app bar but again app bar is going
25:50 - to be reusable because the login view
25:52 - has it the signup view has it even the
25:54 - home screen has it so let's create a
25:57 - separate widget for it so if we try to
25:59 - create another widget for an app bar
26:00 - let's see what we get so we are just
26:02 - going to have a stateless widget and
26:05 - we're going to call this reusable app
26:08 - bar and then we are going to return an
26:11 - app bar so in the lib folder we are
26:14 - going to create another folder called
26:15 - common and in this common folder we are
26:18 - going to have all the common widgets
26:19 - that are required in the app so the
26:21 - first one is the reusable app bar
26:25 - now we'll import material Dot then we
26:29 - are going to create a stateless widget
26:30 - and call this reusable Abba
26:34 - then we are going to return a scaff not
26:36 - a scaffold sorry an app bar and in the
26:39 - app bar we are going to have a title via
26:41 - title because the Twitter icon logo is
26:43 - right in the center and now we want to
26:45 - display an SVG
26:46 - to display an SVG we can't do image dot
26:49 - asset or something we'll have to use a
26:51 - new plugin for it and that is called SVG
26:54 - flutter SVG
26:57 - and now to you that we'll do SVG picture
27:00 - dot asset and now we'll mention the
27:02 - asset name we won't directly mention
27:04 - like this assets slash svgs slash
27:10 - Twitter logo dot PNG no we are not going
27:13 - to do that because we have already
27:14 - created an assets constants file here we
27:18 - have it
27:19 - so we can just do
27:22 - assets constants Dot
27:27 - Twitter logo all right this is another
27:30 - benefit of having a constraint file if
27:32 - you have to use it everywhere you can
27:34 - just type this without the scope of
27:35 - making any error because we know
27:37 - whatever we have put there is correct
27:39 - and if you want to change of course you
27:42 - can add another logo change the path
27:44 - over here and it will change everywhere
27:45 - you've used it you've just used it right
27:47 - now in your reusable but if you have a
27:49 - splash screen or something you can use
27:51 - it there as well now we can just take
27:54 - this R Bar put it in the login View
27:57 - and now you can see we are getting this
27:59 - error because app bar
28:01 - cannot be of the type reusable app bar
28:04 - which is a widget it needs something
28:06 - known as a preferred size widget that's
28:08 - why we cannot put app bar in a stateless
28:12 - widget what we need to do for it is
28:15 - go to the constants have UI underscore
28:18 - constants dot dot file created we are
28:21 - going to have class of UI constants
28:25 - and we are going to return a static app
28:27 - bar
28:28 - and now we can return the app bar from
28:30 - this function because it is of the type
28:32 - app bar so we can call this function and
28:35 - it will still work because it's of the
28:37 - type app bar and app bar implements the
28:39 - preferred size widget that's needed in
28:42 - this app bar type right
28:45 - so we can copy content from this app bar
28:49 - delete this file
28:51 - go to the UI constants
28:53 - and return the app barrier
28:56 - now we can import SVG picture
28:59 - import assets constants so make sure you
29:01 - uh
29:03 - import constants dot dot and done now we
29:07 - can do this so we can just call
29:09 - UI constants
29:14 - dot app bar we are not creating an
29:17 - object of UI constants instead we are
29:19 - just doing UI constants dot app bar
29:21 - because it is a static property if you
29:23 - want you can make this a non-static
29:25 - property and create an object of UI
29:27 - constants and then call app bar but I
29:29 - just think
29:30 - this way is better we can remove this
29:33 - URL it doesn't exist and restart the app
29:36 - and nothing shows up so let's see why
29:39 - one reason is that AB bar is of the
29:41 - black color because you have mentioned
29:43 - that in the app Theme
29:44 - right here the app bar theme background
29:46 - color is black and elevation is zero
29:50 - so if we go to the main.dot file app
29:52 - Theme is this theme that is present over
29:55 - here so the app bar is black in color so
29:58 - we cannot see anything Plus
30:01 - the logo here is black
30:03 - we need to change it to Blue so we can
30:06 - just do color
30:07 - palette dot blue color save it and now
30:11 - the Twitter icon shows up but it's quite
30:13 - small so we need to increase its height
30:15 - so we can just do height 30. save it and
30:18 - hear the Twitter icon shows up
30:20 - it looks exactly like this but there's
30:23 - one problem if you open this on an
30:25 - Android emulator
30:26 - this title will go to the left
30:29 - we need to keep it centered every time
30:32 - on any platform so we need to
30:34 - pass in a property of Center title true
30:37 - aware
30:38 - it should be outside of the title
30:40 - property
30:41 - Center title true now there's no changes
30:44 - but we are sure that this will work on
30:47 - Android as well we'll open the Android
30:49 - emulator when we are working on the
30:52 - Tweet feature but for now let's just
30:54 - develop on Android
30:56 - on iOS 30. another thing that I have
30:58 - problem with is anytime the login view
31:01 - is calling set state or when we are
31:04 - using riverpod you'll see
31:06 - that whenever the loading indicators are
31:09 - showing up app bar will keep running
31:12 - and that's not what we want we want it
31:14 - to not rebuild even during
31:17 - the loading indicator so what can we do
31:20 - well we could have created widget for it
31:22 - but we tried and it didn't work for an
31:24 - app bar that's why we are just going to
31:26 - have final Abba
31:28 - which is equal to UI constants dot Abba
31:32 - we are going to create an instant
31:34 - surveyor so that every time there is a
31:36 - rebuild
31:38 - it doesn't call this function again
31:40 - because we are just having the instance
31:43 - of app bar with us which we have called
31:45 - right here so every time the build
31:47 - function is
31:49 - recalled R Bar is not built now
31:53 - and if you save it it works the same
31:55 - thing but it's just a little bit of
31:57 - optimization
31:59 - now we need a body and in the body we
32:02 - are going to have a single child scroll
32:04 - view because
32:07 - we have two text Fields then we click on
32:09 - either of the text field we can get a
32:11 - render flow error by the keyboard
32:13 - so whenever you click on this text field
32:15 - a keyboard appears and it might minimize
32:18 - the screen
32:19 - and give you a render flow error we want
32:22 - to avoid that so we are having a single
32:23 - child scroll View and then we are going
32:26 - to have a child
32:27 - add a little bit of padding because
32:29 - padding is needed for all of these
32:31 - fields you can see the done button has a
32:34 - bit of padding both the text Fields have
32:36 - padding
32:37 - so we need the padding and padding is
32:40 - going to be Edge insets
32:44 - dot symmetric by symmetric because we
32:46 - want it from the left and the right side
32:49 - so horizontal 20.
32:53 - and now we need child and the child is
32:56 - going to be column because we need
32:58 - four different type of widgets two text
33:01 - Fields so we are going to have text
33:03 - field
33:04 - one
33:07 - text field 2
33:09 - button text pan
33:12 - you'll understand why we are having text
33:14 - spanner well just to say it simply
33:16 - because you have two different type of
33:17 - colors used and we want them in a same
33:19 - line you can of course use a row widget
33:21 - for it along with two text Fields but a
33:23 - text pan widget is better because
33:26 - we have to write lesser code for that so
33:29 - for the text field one we are going to
33:30 - create a separate widget because it's
33:32 - going to be reused and we are going to
33:33 - call this auth underscore field or dot
33:36 - we're not creating this inside the
33:38 - common widget or common folder why
33:40 - because auth field is only used in login
33:42 - View and sign up view nothing outside of
33:44 - the auth feature
33:46 - we need different type of fields later
33:48 - on for example in edit profile we are
33:50 - going to have a different kind of field
33:51 - but not this kind of text field
33:53 - so let's import material dot we are
33:56 - going to add
33:58 - a stateless widget and call this auth
34:00 - field
34:01 - now we need to return something known as
34:03 - a text form field
34:05 - you can even use text field doesn't
34:07 - matter in this case and then we are
34:09 - going to have a controller so we'll get
34:12 - the controller from this Constructor
34:15 - why are we getting it from The
34:16 - Constructor because if you use auth
34:18 - field like this area
34:22 - we need to reuse it right so we can
34:24 - again call auth field
34:26 - and if we use one single text field both
34:29 - of these will have the same text passed
34:31 - in so if I write something over here
34:34 - in this text field it will automatically
34:36 - type it in this field because they both
34:39 - have the same controller we don't want
34:41 - this to happen so we are asking them to
34:44 - provide us with the text editing
34:46 - controller themselves so that we don't
34:48 - have this problem so we'll import this
34:50 - controller
34:52 - and pass it in
34:55 - now we need to add a little bit of
34:57 - decoration so what is the decoration we
34:59 - need well
35:01 - there should be a border and whenever
35:03 - the text field is clicked on it should
35:06 - have a blue Highlight
35:07 - and of course some padding in between
35:09 - the hint text like email address and the
35:13 - increase in font size because the
35:15 - initial or the default one is quite less
35:18 - so we can do all of that by having
35:20 - decoration input decoration Focus border
35:25 - Focus border with outline input bottom
35:28 - the focus border is basically whenever
35:31 - you click on this text field what color
35:33 - should show up so whenever you click on
35:35 - the text field you want the blue color
35:36 - to show up and it should be an outline
35:39 - so we are having an outline input border
35:42 - then we want the Border radius to be not
35:45 - exactly a rectangle but there should be
35:48 - a little bit of curve so we can have
35:50 - border radius of Border radius dot
35:52 - circular
35:53 - 5.
35:57 - then we are going to have a border side
35:59 - of constant Border Side
36:02 - with color AS Palette dot blue color so
36:06 - let's save this
36:07 - pass in and create controller first of
36:10 - all so we are going to have final
36:11 - email controller is equal to text
36:15 - editing controller
36:18 - and then we are going to have final
36:19 - password controller is equal to text
36:21 - editing controller now we just need to
36:23 - dispose this off
36:25 - and then we're going to have email
36:26 - controller.dispose
36:27 - passwordcontroller.dispose
36:30 - pass all of this to the auth field so
36:33 - we'll have controller
36:34 - email controller
36:37 - controller password controller and if
36:40 - you want to see what I said if we have
36:42 - both as the same controller they'll have
36:44 - the same text let's try it out
36:46 - so I'll just say
36:49 - AAA and you can see both have the same
36:52 - text and if I change this to password
36:54 - controller both will have different text
36:56 - now but you can see our Focus border is
36:59 - now perfectly working
37:04 - whenever we put a focus it has a blue
37:06 - line
37:07 - but it's not thick enough so we need to
37:09 - make it thick and of course there's a
37:11 - little bit of less padding here so we
37:12 - need to add the padding as well so the
37:15 - width is going to be 3 over here
37:17 - save it and you can see this is much
37:19 - thicker now this might not look exactly
37:21 - like this one but when we increase the
37:24 - padding so let's do that so here we are
37:27 - going to have content padding which
37:29 - should be constant Edge insets dot all
37:33 - 22.
37:35 - this is a tried and tested value I kept
37:37 - on increasing the value and saw what fit
37:39 - the best so if you have anything else
37:41 - you can try it on your own
37:43 - and this has a little bit of more
37:45 - padding
37:48 - now I just need a hint text so the hint
37:51 - text is going to be whatever the login
37:53 - view provides I cannot just say this is
37:55 - email or this is password because it
37:58 - will show up for both the text Fields I
38:00 - don't want that
38:01 - so I'm just going to import that from
38:03 - here so we have hint text
38:07 - required this Dot hintex
38:10 - take the syntax and pass it in we'll
38:14 - pass in the hint text aware which is
38:16 - email
38:17 - and this is password
38:20 - of course this is a named argument so
38:22 - we'll pass that in
38:24 - save it Let's ignore let's put the
38:26 - warning aside by putting a const
38:30 - and here we have the password and email
38:33 - showing up now we just need a focused
38:35 - border now that we have focused border
38:37 - we want the border that shows up even
38:40 - when we are not focused so
38:43 - we can add that by having enabled border
38:46 - so we can just copy this paste it
38:48 - replace this with enabled border
38:51 - so this will show up even when we are
38:53 - not focusing on the text field
38:56 - and this should be of the gray color
38:59 - we can save it and see there's too much
39:03 - width so we can remove the width part
39:06 - and now we can see this looks cool but
39:10 - it's not quite there
39:12 - we need to put it in the center so we
39:14 - can go to the login View
39:16 - wrap the single child scroll view with
39:19 - something known as the center widget and
39:21 - if you're wondering how I got this
39:22 - option I just clicked over here command
39:24 - shift R which is a refactoring tool if
39:27 - you don't have this you can just do
39:28 - right click
39:30 - refactor and then click on the center
39:33 - widget now you can save this and here it
39:36 - is right in the center
39:38 - now both of them are very attached to
39:41 - each other so we want to give it a
39:43 - bit of height so we can just have
39:46 - constant
39:48 - size box of height
39:51 - 25
39:54 - so now both of them have some space in
39:56 - between now you might think that yeah
39:58 - the text fields are very down below but
40:01 - as we add more widgets this will keep
40:03 - going up
40:04 - so for example if I just take this text
40:07 - field or sorry size box and add a height
40:10 - of 40
40:11 - here we are
40:14 - even when we click over here
40:16 - this works well
40:17 - but you can see
40:19 - the text field still feels small the
40:22 - reason for that
40:23 - is because of the font size you can see
40:25 - the font size is quite small not as
40:28 - quite big as this so you can just go to
40:30 - the auth field
40:31 - and what do we want to do we want to
40:33 - increase the font size of this hint text
40:36 - so we can find something like hand style
40:39 - and then we can use textile on it
40:42 - pass in the font size which is 18
40:46 - and put a constant over
40:52 - and here it is now this looks proper
40:56 - now we can go to the login view again
40:58 - and the next thing we need is this
41:00 - button the done button so we can create
41:02 - that in the common folder this is
41:04 - because we are going to need this
41:07 - rounded button later on in some other
41:10 - part of the application
41:12 - so I'm just going to create it and I'm
41:14 - going to call this rounded small button
41:17 - dot dot of course you can name it in a
41:20 - better way but this is what I'm naming
41:22 - it I'm going to import material dot I'm
41:24 - going to create a stateless widget and
41:26 - call this rounded
41:28 - small button
41:31 - and here we're going to have a final
41:33 - void callback of on tap
41:40 - and
41:41 - this is needed because we want to
41:44 - require this dot on tap from the
41:48 - widget we are going to use this widget
41:50 - in similar to what we had done in the
41:53 - auth field we imported all of this we
41:55 - are going to require all of this as well
41:57 - and we are sure since this is a button
41:59 - this is going to have different on tap
42:00 - now there are different ways of creating
42:02 - this more rounded small button but the
42:05 - way I'm going to use is I'm just going
42:07 - to have a chip widget I'm not going to
42:09 - really have any button we're going to
42:11 - have a chip widget widget label
42:14 - and this text is again going to come
42:16 - from the Constructor so we can have
42:18 - final string label
42:21 - require this dot label
42:25 - and pass it in
42:26 - now I can save this use this rounded
42:29 - small button in login View
42:32 - so I can replace this
42:34 - I'm going to pass in the ontap as empty
42:36 - function for now and the label is done
42:40 - save it and let's see what we get this
42:43 - is the button looks quite similar but
42:45 - there are a few few things that have to
42:48 - be changed the background color for
42:50 - example should be white and the font
42:53 - color in there should be black
42:56 - so for the label
42:57 - or more like first we'll configure the
43:00 - background color the background color
43:01 - should be the color here and we're going
43:03 - to take this from The Constructor as
43:05 - well if you're wondering why
43:08 - this is because
43:09 - if you're wondering why why can I not
43:12 - directly use palette dot black color
43:15 - this is because this rounded small
43:16 - button is going to be used in some other
43:18 - widget and they might need some other
43:20 - background color some other font color
43:22 - so we cannot directly mention it over
43:24 - here so we can have final color
43:28 - background color
43:30 - and since we are here we can create
43:32 - another one which is font color
43:34 - or the text color
43:37 - now we can copy this have required this
43:41 - dot background color required this dot
43:44 - text color
43:46 - now we can pass in the background color
43:48 - here
43:49 - and the label or the text color is Style
43:54 - textile
43:56 - color is text color
43:59 - and this should be it so we can go to
44:02 - the login View
44:03 - pass in the background color AS Palette
44:05 - dot background color and font color or
44:10 - the text color sorry that is going to be
44:13 - palette dot white color right as we have
44:16 - decided we are just putting it here so
44:18 - that we when we have to use this rounded
44:21 - small button somewhere else
44:24 - that won't be a problem and if you want
44:26 - to minimize the code what you can do
44:28 - instead is just remove both of this
44:31 - go to the rounded small button and say
44:34 - this is not a required field
44:37 - whenever the user wants to change this
44:39 - background color they can just do that
44:41 - by having it mentioned explicitly
44:44 - otherwise it will just be palette dot
44:46 - background color
44:47 - or palette dot white color
44:52 - fifth diff is used in some other widget
44:54 - and this widget needs some other color
44:59 - then they can explicitly mention that
45:02 - yeah the background color should be
45:03 - palette dot blue suppose
45:06 - and the font color should be white only
45:09 - so we have minimized the code that we
45:11 - need to write over here
45:13 - so let's restart it and see
45:16 - here is a button and it's quite the
45:18 - opposite of what we wanted so let's just
45:21 - replace them we want the text color to
45:24 - be black and background color to be
45:27 - white
45:28 - sorry about that
45:30 - so this is what we wanted
45:32 - now we have this button
45:34 - now we just need to increase the font
45:36 - size and there's a bit of less padding
45:38 - so we need to increase that so the font
45:40 - size should be increased so I'll just
45:42 - put it 16 again this is a tried and
45:44 - tested value
45:46 - and there should be label padding
45:50 - so we can just have label padding
45:53 - constant Edge in such dot symmetric
45:58 - from the horizontal Direction I need 20.
46:01 - I'll save it now this looks very absurd
46:04 - I want an increase in the vertical
46:06 - padding as well so I can just do
46:08 - vertical five
46:10 - save it and here you can see both of
46:13 - them look similar but this button is in
46:15 - the center I want it in the right hand
46:17 - side
46:19 - so for that I can go to the login view
46:21 - again wrap this rounded small button and
46:24 - a widget known as align this align
46:27 - widget will help us align the surrounded
46:29 - small button so it will help its child
46:32 - widget
46:33 - to get aligned and we want to align it
46:35 - to alignment
46:37 - dot top right
46:39 - save it and here we have it
46:43 - looks good
46:45 - now we need to leave some space and add
46:47 - our text pans
46:49 - so I can copy the size box
46:52 - remove this command
46:53 - and now we are going to have Rich text
46:56 - while we having Rich text because text
46:59 - span is not really a widget it is a spam
47:02 - and in this Rich Text we can add
47:04 - multiple spans for example if you look
47:07 - at this this requires inline span this
47:10 - is where our text pan is going to be
47:11 - there so we can just have text span
47:14 - and in the text Pan the text is going to
47:16 - be don't have an account
47:20 - so let's see what we get with just this
47:23 - much
47:25 - yup we have this we had been referring
47:28 - to the sign up screen all that
47:30 - time but
47:33 - this is going to have don't have an
47:34 - account because we are on the login
47:36 - screen if you are on the login screen
47:38 - and if you want to go to the sign up
47:39 - screen we don't have an account so don't
47:42 - have an account then we are going to
47:44 - have in the children
47:49 - a text span
47:51 - and in the text pan we're going to have
47:53 - a text called
47:55 - sign up with a space aware the space
47:58 - should be mentioned over here because
48:00 - there is a bit of spacing here if you
48:02 - don't add space both of these texts will
48:04 - be stuck together
48:07 - so we have sign up
48:09 - let's save this much
48:11 - here we have it we just need to change
48:13 - the color of this text fan so we can
48:16 - just have Style
48:18 - textile
48:19 - and textile should have a color of
48:22 - palette dot blue color and font size
48:26 - should be increased to 16.
48:29 - and the same thing should happen above
48:31 - as well the font size for this text man
48:33 - should also increase so you can just put
48:36 - it over here that the color is the
48:38 - normal color what you're showing but the
48:40 - font size should be 16 and both of these
48:42 - font sizes should match because they're
48:45 - on the same
48:47 - line one having a bigger text and
48:50 - another having a smaller text would look
48:52 - very absurd
48:54 - and here we have it
48:57 - looks word now we are getting all of
49:00 - this warning so we can just add a const
49:02 - but we cannot add a const because
49:06 - this requires a recognizer so whenever
49:09 - the sign up over here is clicked we need
49:11 - to navigate to the sign up screen that's
49:14 - why we are going to have a recognizer
49:16 - and this is going to be
49:19 - tab gesture recognizer
49:22 - dot dot on tap this is the syntax tab
49:26 - just a recognizer dot dot on tap and
49:29 - whenever the on tap is made we need to
49:32 - call this function this function will be
49:35 - called and whatever you want to do we
49:37 - want to navigate from the screen to the
49:39 - sign up screen so we can add that when
49:41 - we create the sign up view
49:43 - now we can just put constant over here
49:47 - and save it so the login view looks
49:51 - correct
49:52 - similar thing will be needed for the
49:54 - sign up view so let's quickly do that so
49:56 - we'll have sign up underscore view dot
49:59 - dot import material dot create a
50:02 - stateless widget actually stateful
50:05 - widget of
50:06 - sign up
50:09 - View
50:12 - save it now we'll copy all of this
50:19 - we're going to import the constant so we
50:22 - can just import constants dot dot
50:25 - and I think constants doesn't export the
50:28 - I constant so we can do that so we can
50:30 - export dot slash UI constants dot dot
50:34 - and we can fix this in the login view as
50:36 - well we want to
50:37 - import constants dot dot
50:41 - again coming back to the sign up view
50:45 - we need to return stuff
50:47 - so we can just return this scaffold
50:50 - import the palette so we are going to
50:53 - import theme dot dot we are going to
50:54 - import flutter gestures package so that
50:57 - we have tab gesture recognizer we're
50:59 - going to import the rounded small button
51:01 - and actually instead of directly
51:04 - importing it we are going to create a
51:05 - common dot dot file over here as well
51:08 - so we are going to export dot slash
51:11 - rounded small button for now
51:13 - so we can come over here import this and
51:16 - import common dot dot so that you know
51:18 - we'll import lists of
51:21 - other features
51:23 - so if anything else is needed in this
51:26 - screen
51:27 - we just have to import
51:30 - them there because
51:32 - the common dot dot is already present it
51:35 - will import all of the things that have
51:36 - been exported from here
51:38 - now we'll also import auth field so
51:40 - let's import it
51:42 - and this looks good now just to see this
51:45 - on main.dot let's change this to sign up
51:47 - view
51:49 - and let's go to the sign up View and see
51:52 - what changes need to be made well email
51:54 - and password are the both the fields
51:55 - that are needed done is also there
51:58 - now we just have to change this to
52:00 - already have an account
52:05 - so we have already have an account and
52:07 - we want it to be login
52:10 - so we can just pass and log in
52:14 - and here we have it
52:16 - now whenever the user comes first time
52:18 - to this application we either want to
52:20 - show the home screen if the user is
52:22 - logged in or the sign up screen because
52:24 - it's the first time they're entering the
52:26 - application
52:27 - so this sign up view
52:29 - is going to be the screen that will show
52:31 - up in the main dot dot for now when we
52:33 - have the home screen we'll put the logic
52:35 - of adding the home screen over there now
52:38 - what we want to do is whenever we click
52:39 - on this button we want to go to the
52:42 - login View
52:45 - so we can create that right now so here
52:48 - in the sign up view whenever this is
52:51 - clicked the on Tab you're just going to
52:53 - have Navigator dot push and we'll pass
52:56 - in the context then material route
53:00 - material page route then we are going to
53:03 - have context and then we are going to
53:05 - return the login View
53:07 - and this is going to be a constant
53:10 - now this is a lot of code to write the
53:12 - material page route so what we are going
53:14 - to do is just copy this or cut this go
53:17 - to the login view create something like
53:19 - static route
53:22 - for this and return a material page
53:25 - route
53:26 - right
53:28 - so now what we have to do is just login
53:31 - View
53:32 - dot route so we don't have to use
53:35 - this long boilerplate code every time we
53:38 - need to navigate from sign up to login
53:40 - or suppose we are logging out so we
53:43 - don't have to do
53:44 - this in the home screen or the other
53:47 - screen as well wherever the log out
53:48 - operation takes place
53:50 - we just have to do login view dot route
53:52 - and it works fine
53:54 - now the same thing is needed for the
53:56 - sign up view when we move from login to
53:59 - sign up view
54:01 - so in the on Tab we are just going to
54:03 - have this and then we are going to go to
54:06 - the sign up view actually let me just
54:08 - copy this route
54:09 - put this in the sign up view
54:12 - and just return a sign up view over
54:16 - now we can go down and pass in sign up
54:20 - view dot route
54:22 - now when I click over here nothing
54:24 - happens so let's restart the app
54:27 - if I click over here I go to the login
54:29 - view how do I know that because your
54:31 - signup shows up and if I go where the
54:33 - sign up button shows up that's pretty
54:35 - cool
54:37 - now that both of these things work the
54:40 - next part is making the authentication
54:42 - part work so whenever we enter the email
54:44 - address and password and then click on
54:47 - done we need to create a user and then
54:50 - send them to the login screen and then
54:52 - the user should be able to log in with
54:55 - the same credential and if it's a
54:56 - different credential we should show them
54:59 - an error but before doing all of that we
55:01 - need to install the main package
55:04 - that will drive our entire app which is
55:07 - the flutter riverpod package because all
55:10 - of the connections everything is going
55:12 - to be made through real pod and it's
55:14 - going to be very easy and I'll explain
55:15 - every step that needs to be taken and
55:18 - why we are doing what we are doing so
55:20 - let's get started with it right now so
55:22 - let's install the flood arrival pod
55:23 - package so I'll just add flutter
55:26 - River pod make sure you have flutter
55:29 - underscore report not just report
55:31 - riverpod packages for Dart packages and
55:34 - Dot code but flutter report is mainly
55:37 - for flutter SDK
55:39 - so make sure you install that and now in
55:41 - the apis you are going to create our
55:43 - first API which is the auth API dot dot
55:47 - and first of all we are going to create
55:49 - an abstract class and this abstract
55:51 - class is going to be called I API
55:56 - I auth API sorry and
55:59 - what is this abstract class for well
56:01 - this abstract class is going to contain
56:02 - all the functions that are going to be
56:04 - present in our main class which is the
56:07 - auth API class which we are going to
56:10 - implement
56:11 - so we are going to have this so whatever
56:13 - function we pass in here the class is
56:15 - going to have its implementation present
56:18 - over here
56:20 - why is abstract class needed because
56:22 - this is because for many reasons two
56:25 - main reasons I create an abstract class
56:28 - because abstract class contains all the
56:31 - functions related to a particular
56:33 - API so example the auth API will contain
56:36 - all the function signatures of that are
56:40 - required so for example if I want to
56:43 - sign in I'll have suppose avoid sign up
56:47 - function
56:48 - right now I get an error over here I can
56:51 - just do command full stop create the
56:53 - missing override that's needed because
56:54 - I'm implementing iot API and then I can
56:57 - do my signup process here
56:59 - this is required so that
57:01 - in case I want to change my backend from
57:04 - app right to suppose Firebase or node.js
57:06 - I can just delete this auth API class
57:10 - entirely so that there's no Firebase
57:12 - implementation and I can just have class
57:14 - auth API again ex implementing I auth
57:19 - API right now I will get all the missing
57:22 - signatures or the missing
57:23 - implementations I will create them and
57:26 - write my code from scratch I still have
57:29 - all the functions that are required for
57:31 - my application but the implementation
57:33 - will be different so I can easily change
57:35 - my backend from app right to some other
57:37 - database this is very useful another
57:40 - place where it's mainly used is in
57:44 - testing so if you want to test a bunch
57:47 - of
57:48 - functions and you don't want to forget
57:50 - which function to test out you can use
57:52 - this abstract class and implement it and
57:54 - if you're wondering why this is prefixed
57:56 - with ie this is basically interface this
57:59 - is an interface for the auth API class
58:02 - so this is why we have the abstract
58:04 - class it's very handy and you
58:08 - understand its main purpose when you
58:10 - shift the backend if you want to
58:12 - anyways let's just delete all of that we
58:14 - are not going to have this function
58:16 - signature we are going to have it a bit
58:17 - differently what is the difference well
58:20 - this auth API is just containing upright
58:24 - code there's nothing else going to be
58:25 - present so we don't know if it's going
58:27 - to be a success or a failure
58:30 - and even if we know that we want to send
58:33 - it to the controller that yeah this is
58:34 - the
58:35 - success so if it's a success this is the
58:38 - data and if it's a failure what is the
58:39 - error message
58:41 - so for that we need to return two data
58:43 - types as of now
58:45 - that doesn't support returning to data
58:48 - types
58:49 - it's a work in progress I'll mention a
58:53 - medium article where it shows that it
58:54 - should be out in the mid of 2023
58:58 - but as of now it's not possible
59:01 - so what can we do
59:03 - well we can install a package known as
59:06 - FP Dot and if we install that
59:10 - FP dot package will be able to return
59:13 - two types of
59:15 - data types
59:17 - so if it's a success we are going to
59:18 - send that if it's a failure we are going
59:20 - to send another thing and that will help
59:22 - us a lot
59:23 - and it also provides us a bunch of
59:25 - functions to handle those
59:28 - success and error messages so if it's a
59:30 - success it will give us a very useful
59:31 - API that we can use
59:34 - and bypass the
59:37 - boilerplate code that we need to write
59:39 - again and again if you don't understand
59:41 - don't worry
59:43 - I'll explain it to you right now so
59:45 - suppose
59:46 - we want to return a success and a
59:49 - failure right so if it's a success I
59:51 - want to return
59:53 - the account of the user so whatever data
59:55 - is present like the current account of
59:57 - the user this is something apprite gives
59:59 - us and if it's a failure I just want to
60:01 - return a string so I can do that by
60:03 - having either this is something given by
60:05 - FP Dot and then if it's
60:09 - success I want to return account
60:12 - and if it's a failure then I want to
60:15 - return string
60:17 - so in case
60:19 - so it will either return account or it
60:21 - will return string that's the main
60:23 - purpose and then we can have the sign up
60:27 - process so we will have sign up and
60:30 - obviously we need to require the email
60:32 - and the password of the user so that we
60:34 - can sign up the user so we'll have
60:36 - required string email required string
60:40 - password
60:43 - and Avia
60:45 - but this is obviously not going to be
60:46 - either this is going to be future either
60:48 - because app right
60:51 - is going to connect with our backend so
60:53 - upright client that we have the package
60:56 - it will connect us with the
60:59 - app right server
61:01 - so it will take some time
61:03 - that's why it's a future so we will have
61:05 - future either account string because we
61:08 - are going to use async in there right
61:09 - this is a pretty big thing to write and
61:12 - this will be happening even in login
61:15 - function and several other functions we
61:18 - don't want to continuously write such a
61:19 - big type definition it's a time and
61:22 - resource waste so what we can do instead
61:25 - is create a new folder in lib called
61:28 - core and this core folder is going to
61:30 - contain all the essential things for
61:33 - example we are going to have something
61:35 - known as type definitions over here type
61:37 - def dot dot and this is going to contain
61:40 - all the type definitions
61:42 - for our app
61:44 - so the first type definition we can
61:46 - create type definition like this type
61:48 - definition is basically
61:51 - creating our own type
61:54 - like future either like them
61:57 - so we have future
62:00 - either which is equal to Future
62:03 - and we'll pass in either just like we
62:07 - did before but this time I made a
62:10 - mistake previously
62:11 - when it's a failure we'll return string
62:14 - and if it's a success we are going to
62:16 - return account
62:17 - this is for the failure and this is for
62:19 - the success not the other way around
62:21 - then we'll import the FP dot package
62:24 - and then we are going to return failure
62:26 - and in case of success
62:30 - we want success but what are these
62:32 - failure and success classes so we are
62:34 - going to create failure class first of
62:36 - all so we have failure dot dot so we
62:39 - left class failure
62:41 - final string message
62:44 - and final
62:46 - string not strings stack Trace factories
62:50 - so that you know the failure contains
62:52 - the message what message needs to be
62:54 - displayed and the stack trace and even
62:56 - you you can even have the hash codes and
62:58 - whatever but you're just going to have
63:00 - two of them and we don't need the named
63:02 - Constructor we are just going to have
63:03 - positional Constructors over here
63:06 - and we can mark this as a constant great
63:10 - so we can go to the type definition
63:11 - import failure package from core but
63:14 - again in the core
63:16 - we are going to have something known as
63:18 - core dot dot
63:20 - we are going to export failure dot dot
63:22 - video in the export type definitions dot
63:25 - dot
63:26 - that's it
63:27 - and now we'll import failure so let's
63:31 - import
63:33 - failure we are not importing code over
63:35 - here because we are in the same folder
63:37 - as of now
63:39 - and for the success it really depends if
63:42 - it's a success here you can see we have
63:45 - to return an account but somewhere else
63:47 - we'll have to return suppose a map or
63:50 - some other data be
63:52 - or some other data type app right has to
63:55 - offer
63:56 - so this really depends on where we are
63:59 - using it so we can just do this
64:02 - we can pass in a generic type T over
64:06 - and then we can pass T over here
64:09 - now if you don't understand this no
64:10 - problem
64:11 - I'll show it to you over here
64:14 - now if we use future
64:17 - either you can see we have this now the
64:20 - sign up function has a type of future
64:22 - either failure Dynamic this is exactly
64:25 - what we had written away a future either
64:27 - failure but this is now Dynamic why
64:31 - because we have not mentioned anything
64:32 - over here now if I mention string over
64:35 - here the success type over here is now
64:38 - string
64:40 - since it continuously varies I have
64:42 - mentioned the success type over here so
64:44 - somewhere it can return account
64:46 - somewhere it can return Maps somewhere
64:48 - it can return string
64:50 - and this function will have the
64:52 - appropriate data type return correct now
64:56 - let's create a few more type definitions
64:58 - another type definition is Future
65:02 - either void
65:04 - which is equal to future either y
65:09 - what does this mean
65:11 - the success data type is void basically
65:13 - if it's a success we don't want to
65:15 - return anything we just want to let the
65:17 - controller know that yeah it's a success
65:20 - you can move forward
65:22 - and another data type that we can have
65:24 - is type definition future void not
65:27 - future either void just future void
65:29 - which is equal to Future
65:32 - void this is basically eliminating the
65:34 - usage of
65:36 - future
65:37 - generate
65:39 - generic type but if you want you can
65:42 - keep this otherwise you can just remove
65:43 - this doesn't matter
65:45 - so we can remove FP Dot from here we
65:48 - don't need that because we are importing
65:49 - type definition and we can even import
65:51 - code or dot now since we have exported
65:54 - type definition from code.package
65:57 - cool
66:00 - if you didn't understand
66:01 - I'll again brief you through it
66:03 - basically we have code. we have exported
66:05 - type definition and failure Dot
66:07 - now failure has this class which has a
66:10 - string message and a stack Trace so that
66:12 - you know if you want to debug we can
66:15 - just do failure dot stack trees and it
66:17 - will give us the correct structures and
66:19 - then we have the type definition
66:22 - where we have mentioned two types
66:25 - and in case of success we have taken it
66:28 - basically from wherever we are calling
66:31 - it
66:31 - now we have returned for success as
66:34 - account aware but there's one thing to
66:37 - note in app right there are two accounts
66:39 - over here one is the account from
66:42 - models so if we just
66:45 - remove this and go to the account model
66:48 - this is the account model and this is
66:51 - basically a simple model the user uh
66:53 - account class which requires have from
66:56 - map two map functions just like we're
66:58 - going to create our models
67:02 - and it implements a model right
67:05 - another one
67:08 - is from the
67:11 - service class
67:12 - this allows us to authenticate and
67:15 - manage a user account
67:17 - so this is a service and this service
67:19 - will help us to call sign up login
67:23 - functions so we have get function over
67:25 - here which will help us get the user
67:27 - account it will get us the create method
67:30 - which will help us to create an account
67:32 - and update email and all of those so
67:35 - this is related to service
67:37 - but the other one was basically a model
67:40 - that was returned to us
67:42 - in case we want to get the username the
67:45 - user email and all of those stuff you
67:48 - can see that in the get function it is
67:50 - returning to us models.account
67:52 - models.account
67:54 - is basically this model
67:57 - right
67:58 - so this was a difference and this is
68:00 - very important to note because sometimes
68:03 - you'll by mistake import the models and
68:06 - the service both and you'll be confused
68:08 - as to why we are not getting any
68:11 - autocomplete features or error so if you
68:14 - just import models you can see it gives
68:17 - you an error because it is defined in
68:19 - both of those places it's the same
68:21 - account but one is from service and
68:24 - other is a model what do we need in this
68:27 - case when we sign up we should be
68:29 - getting the model of the user right
68:31 - when we want to sign up the user we'll
68:34 - be using the account service let me just
68:38 - simplify it when you want to sign up
68:42 - or you want to
68:44 - get the user account you'll be using
68:47 - model dot account
68:50 - and when you want to
68:52 - you'll be using account which is coming
68:54 - from apprite.dot or service account you
68:58 - can just call it that and when
69:01 - you want to access the user data then
69:05 - you will be using model dot account
69:08 - so we can prefix this as model so that
69:11 - there's no confusion
69:14 - and now we can have model dot account
69:16 - aware because we are signing up the user
69:18 - after signing up
69:21 - after we creating
69:24 - after signing up the user that means
69:26 - after creating the user account
69:29 - it will give us
69:30 - a model account and we can return that
69:33 - to the controller but when we want to
69:35 - get but when we want to sign up or
69:38 - create the user then we'll be using
69:40 - account if it's not clear don't worry
69:43 - we'll see the sun code right now
69:45 - so I'll again have class auth API which
69:49 - will Implement I auth API and we are
69:52 - going to create one missing override it
69:55 - has everything in it we'll call this
69:57 - asynchronous
70:00 - and now let me demonstrate the
70:02 - difference to you exactly in terms of
70:04 - code so we are going to have final
70:06 - account over here which is a private
70:08 - variable because whenever we do auth
70:12 - API we should not be able to access
70:14 - account like this right that's why we
70:17 - are having a private variable
70:19 - now we'll create a Constructor for this
70:22 - which will be required
70:24 - account
70:27 - and we'll set this account variable to
70:30 - account that's received from The
70:31 - Constructor basically this is a private
70:33 - variable we are requiring this account
70:36 - which is a new variable which is not
70:38 - private
70:40 - because it named Constructor you cannot
70:42 - have required this dot underscore
70:45 - account it will give you an error so you
70:48 - have this and you're finally assigning
70:50 - the private account variable to the
70:53 - account
70:54 - variable that's coming from the
70:56 - Constructor I hope that makes sense
70:59 - the whole point of all of this is just
71:01 - so that your class
71:06 - has this as a private variable and its
71:08 - instance is not available outside of the
71:11 - class now to demonstrate the difference
71:13 - to you between account model and account
71:15 - service we can just have underscore
71:18 - account which is the service one dot and
71:21 - it will give you a bunch of options
71:22 - create create Anonymous session this
71:25 - means
71:27 - account service is related to creating
71:29 - and managing the
71:31 - data in the server side in the app right
71:34 - dashboard
71:36 - but on the other hand if we have model
71:39 - dot account
71:42 - let me have model
71:44 - dot account
71:47 - you can see if we create an instance of
71:49 - this we get email email verification
71:51 - these are all the user related data
71:54 - and that's what I'd said above if you
71:56 - want to sign up or want to get user
71:58 - account you can use
72:00 - simply account which is service account
72:02 - and if you want to access user related
72:04 - data there's model.account I hope it's
72:08 - clear now if you're not just play around
72:10 - with it a little bit and you'll get a
72:12 - great understanding of it
72:14 - now we are just gonna after I catch
72:16 - because there's a scope of error we
72:18 - don't know it's not really an error it's
72:20 - an exception
72:24 - so we are putting this in a try catch
72:25 - block and now we'll catch account Dot
72:30 - create
72:32 - and then we have three fields to pass an
72:34 - email password which has already been
72:36 - passed in and the user ID do we have the
72:38 - user ID well no the user ID is a
72:42 - randomly generated unique ID so we
72:45 - cannot have that
72:46 - so for apprite to create it uniquely
72:50 - what I can do is
72:52 - put a string and have unique type 10
72:55 - over here
72:57 - if I do this much
72:59 - apprite will generate
73:01 - a unique ID for this account
73:04 - if there's another Syntax for it called
73:07 - ID dot unique and this does the same
73:11 - thing if you just click command full
73:12 - stop you can see it just Returns the
73:15 - same string we entered over here before
73:20 - so you can use either of these
73:23 - I'll just go ahead with this because
73:25 - there's less scope of error even if
73:27 - there is a little bit of error scope and
73:29 - if you see a wire it's returning to us
73:31 - an account and this account is
73:33 - model.account we need to return this to
73:36 - the controller so we can just have final
73:38 - account which is equal to await
73:41 - account.create
73:44 - now we have account in our hand
73:47 - we can just do return account right
73:50 - no
73:52 - this is because the data type
73:55 - this is because the return data type of
73:57 - this function is future either failure
74:00 - or account
74:01 - in case of success we have to do
74:04 - something like this we have to return
74:05 - right
74:06 - and then pass in an account variable
74:09 - inside of it this is something given by
74:11 - FP dot itself so if it's success we let
74:15 - them know that they are this is the
74:16 - success variable and this is the data
74:17 - you're getting when it's success if you
74:19 - try to pass in something like a string
74:21 - it will give you an error because
74:23 - argument type string cannot be the
74:25 - assigned to the parameter type account
74:28 - so you need to pass in an account
74:30 - variable over here
74:32 - now in case of failure we'll just do
74:35 - return left because it's a failure we'll
74:39 - return left
74:41 - and then we can pass in
74:44 - e right no because in case of failure we
74:48 - have to return failure class and then
74:50 - we'll pass a message as e.2 string and
74:54 - stack Trace
74:55 - which we get from catch function here
74:59 - we'll pass in the stack Trace as well
75:02 - so this is it this is the function to
75:05 - create
75:06 - a user account in app right dashboard
75:09 - but there's one other thing you can do
75:11 - to improve the
75:13 - exception handling over here which is
75:16 - catching on upright exception
75:20 - so we have on app right catch e stack
75:23 - Trace
75:24 - and then we are going to return left
75:26 - over here as well but this time since
75:29 - it's an upright exception this is of the
75:31 - type upright exception not object
75:35 - so we can access some methods given to
75:38 - us like e Dot message and return that
75:43 - but it's giving us an error because e
75:45 - Dot message gives us a string and
75:47 - failure
75:49 - has
75:50 - an acceptance of just string so we can
75:53 - just have
75:55 - something like this done
75:57 - where we say some unexpected
76:01 - error occurred
76:05 - and the stack Trace is as it is
76:08 - so if it is null we are going to return
76:10 - some unexpected or error occurred
76:12 - otherwise we are just going to have e
76:13 - Dot message passed in
76:16 - so this is the entire function I hope
76:19 - you understood the difference between
76:20 - account and model dot account if you
76:22 - didn't you can rewind it I've spent a
76:24 - lot of time on it already
76:26 - I wouldn't like to spend more on it
76:29 - anyways we are done with this
76:32 - now let's use the provider package to
76:34 - provide this class
76:36 - now let's use the Riverport package to
76:39 - provide this class so we can just have
76:41 - final auth API
76:44 - provider which is equal to provider
76:49 - this provider class is given to us by
76:52 - rebapod itself
76:53 - and realpod gives us access to ref
76:58 - so what is this thing provider lets us
77:01 - provide a single instance which is
77:04 - immutable so if you try to change the
77:06 - value of this auth API provider later on
77:09 - in the future
77:10 - it will give you an error there are
77:13 - multiple types of providers in riverpod
77:15 - like provider this one future provider
77:18 - stream provider
77:21 - State provider and state Notifier
77:23 - provider there are two other types as
77:25 - well Notifier and async Notifier but we
77:28 - are not going to use that in those in
77:30 - this tutorial
77:31 - so what is the difference between
77:33 - provider State provider and all of them
77:35 - provider basically provides a read-only
77:38 - value you won't be able to change its
77:40 - state anytime so if you return
77:43 - this auth API class from your
77:47 - and pass in the account which we will do
77:50 - you cannot change the value to return
77:52 - something else later on in the app
77:55 - it will just be a read-only value
77:58 - State provider and state Notifier
78:00 - provider help us to change the value
78:03 - later on in the
78:05 - app we are going to take a look at them
78:07 - but for now
78:09 - let's concentrate at provider another
78:12 - two types that I mentioned future
78:14 - provider and stream provider we are
78:15 - going to use them extensively in this
78:17 - application because apprite is all about
78:20 - Futures and streams
78:22 - other question that you might have is
78:24 - why are we using provider here why can't
78:27 - we just use auth API class
78:29 - like this
78:31 - everywhere right now I will agree with
78:34 - you you can use that but with provider
78:36 - it becomes better in bigger application
78:38 - because you don't have to create an
78:41 - instance so suppose you have to instance
78:43 - auth API class over here
78:45 - so if you use this in some place you'll
78:47 - have to also import account
78:49 - provider
78:51 - and now if you have to create account
78:54 - like this
78:58 - then you'll have to also pass in the
79:00 - client and for the client you'll again
79:02 - have to pass in client like this
79:04 - there's a lot of things to do and even
79:06 - in the client you'll have to pass in
79:09 - suppose like the end point if you want a
79:12 - different tree or sell sign if you want
79:13 - it differently
79:15 - there's a lot of work to do so
79:19 - instead of doing all of that we are
79:21 - going to create separate providers for
79:23 - each one of them including auth API
79:24 - provider you don't want to include this
79:26 - auth API class every single time you use
79:29 - it right it is a lot of code to write
79:31 - provider will minimize that differently
79:33 - also provider caches all of this so it
79:36 - won't create a new instance of this auth
79:39 - API everyone else every single time it
79:41 - will just cache it and give it to us so
79:43 - that helps in memory
79:46 - efficiency as well so now that you have
79:49 - understood this we can go in the core
79:51 - and create something known as providers.
79:54 - this is going to contain all the upright
79:56 - related providers or any other provider
79:58 - in our application
80:00 - that is not related to a class for
80:02 - example this auth API provider is
80:04 - related to this auth API class so if you
80:07 - want to delete auth API at a certain
80:08 - point we can just delete this file and
80:11 - everything related to auth API goes away
80:14 - so we are not going to have auth API
80:16 - provider in providers. we are going to
80:18 - have common kind of providers which is
80:21 - final app right client provider
80:25 - which is equal to
80:27 - provide a
80:31 - ref ref should be small
80:33 - this ref is basically provider f it will
80:36 - help us to interact with other providers
80:39 - you'll see an example of it in just a
80:42 - minute let me just first complete this
80:44 - now we are going to create client
80:46 - variable so we have client client equal
80:49 - to client this upright client provider
80:52 - will be used in suppose account provider
80:55 - and database provider in a real-time
80:57 - provider all of the functionalities that
80:59 - apprite has to offer
81:02 - so it's important for it to be created
81:04 - as a provider then we can just return
81:06 - client Dot set endpoint and we already
81:11 - have the endpoint with us don't forget
81:13 - we have apprite constants so we can just
81:15 - return its endpoint so we have app right
81:20 - constants
81:21 - dot endpoint
81:24 - dot set project
81:27 - and we need to pass in the project ID
81:30 - over here so that it can make the
81:31 - connection with upright
81:34 - dashboard
81:35 - so what is the project ID we have stored
81:38 - that so we have upright constants dot
81:40 - project ID
81:41 - dot set self signed
81:44 - status
81:46 - of which should be true this is for the
81:49 - self sign certificate and will be used
81:51 - only for development this code
81:54 - can be found on their
81:56 - documentation or when you complete the
81:59 - platform part we had this all of this
82:02 - written so you can copy it from there I
82:05 - just wanted to demonstrate what every
82:06 - function means so I just rewrote it
82:10 - now we will create final
82:15 - app right account provider
82:18 - so we have account
82:21 - provider which is equal to provider ref
82:25 - and now we will return
82:29 - account right and this account should be
82:32 - from upright.not the model one remember
82:35 - that
82:37 - I've explained to you why
82:41 - now we need to pass in the client so we
82:43 - need this
82:44 - so what we can do now
82:46 - is final client
82:49 - is equal to ref dot watch
82:53 - app right client provider
82:56 - so this is where ref helps us I said it
82:59 - can help you to interact with
83:02 - other provider
83:04 - so this ref is helping me to interact
83:06 - with other provider in the app right
83:09 - account provider
83:11 - I'll repeat that this ref will help me
83:14 - to interact with other providers using
83:16 - ref dot watch or ref dot read the
83:19 - difference between ref dot watch is that
83:21 - it continuously watches for any changes
83:23 - in provider
83:25 - and ref dot read is just a single time
83:28 - thing so it will just read it once the
83:30 - first time and then it will stop
83:33 - keeping track on it
83:35 - I'm keeping watch because in case I want
83:38 - to change any of the dependencies here
83:39 - and if I click on save it will
83:42 - automatically show that on the screen
83:45 - with the ref dot read that's not
83:46 - possible we'll have to restart the
83:48 - entire app from here
83:51 - but you can use any of them it really
83:53 - doesn't matter
83:55 - unless you don't want the hot reload
83:58 - feature or the hot restart feature
84:01 - so this is the app right account
84:03 - provider we'll go back here now
84:07 - we need to get account so we can just do
84:09 - ref again and again dot read or dot
84:13 - watch I'm going to do watch and I'm
84:15 - going to watch the app right
84:17 - account provider
84:20 - if you do app right client provider it
84:22 - will throw an error
84:24 - because it gives the type of client
84:27 - we don't want client we want app right
84:30 - account provider
84:32 - so just to minimize the complexity if I
84:35 - just cut this paste it over here so we
84:38 - have final account is equal to ref.watch
84:40 - and check this this has the type of
84:43 - account
84:43 - so watching this will give us the type
84:46 - of account now we can take this account
84:48 - and paste it over here
84:51 - so we have the auth API ready with us
84:54 - and that is why we are using providers
84:56 - it minimizes the work to be done by a
84:59 - lot so anyways let's get started with
85:03 - the controller part we have created the
85:06 - API we are just having upright calls
85:08 - over here
85:09 - now in the auth controller dot I'll call
85:12 - this function
85:13 - and print the name and the email of the
85:15 - user so that we know that yeah whatever
85:17 - was done was correct and then later on
85:20 - we'll check in the app right dashboard
85:21 - as well
85:22 - and after that we can test this on
85:25 - Android emulator as well because there
85:27 - is a certain problem in Android which
85:30 - you'll face so the auth controller over
85:32 - here is going to be called auth
85:34 - controller
85:35 - but this is not all it this upright
85:39 - controller is going to extend something
85:41 - known as a state node F5 as I already
85:44 - mentioned riverpod has multiple
85:46 - providers the second one is State
85:48 - Notifier provider provider was used when
85:51 - you wanted to provide an instance of the
85:53 - class or you wanted to provide a
85:55 - read-only value a value which cannot be
85:58 - updated but with auth cont this state
86:01 - node a fire we will expose a value which
86:04 - can be updated
86:07 - and which can also be read
86:10 - so this is an upgrade over the normal
86:12 - provider and here we are getting an
86:15 - error because we have extended state
86:16 - notifiers are press command full stop
86:18 - create a Constructor to call Super I'll
86:21 - remove this
86:22 - because super should be called over here
86:27 - and what is all of the super and stuff
86:29 - so here in the state Notifier you might
86:31 - see that we need to mention a type a
86:33 - generic type what is the value that will
86:37 - be changed and for us it is a Boolean
86:39 - value why because we want to add
86:42 - something known as is loading so if our
86:47 - app is loading so suppose we click on
86:49 - the sign up button and the data is being
86:52 - stored to apprite server the loading
86:54 - indicator should show up in that time
86:57 - and that's why we have the Boolean value
86:59 - of its loading
87:01 - so initially the is loading part is
87:03 - going to be false this Boolean value
87:05 - indicates is loading variable for us
87:08 - initially it should be false
87:11 - now whenever the user creates an account
87:15 - so we'll avoid sign up
87:17 - and this controller
87:19 - is going to require string
87:23 - name String email
87:26 - not name sorry it will require a
87:29 - password so we can have email
87:33 - password
87:36 - and also build context
87:39 - why build context because in case of
87:42 - error we want to show a snack bar and
87:44 - the Syntax for snack bar is
87:46 - scaffoldmessenger dot of context it uses
87:49 - build context
87:51 - so we need the build context but note
87:53 - that we can use build context and
87:55 - everything inside of a controller
87:57 - because we don't want to test it but we
87:59 - cannot use this inside auth API because
88:03 - this class is what we want to test of
88:06 - course I'm not including that in this
88:08 - tutorial but
88:10 - controllers
88:12 - are not tested in this application only
88:15 - auth apis are or anything related to
88:18 - apis are so that's why I can use build
88:20 - context here however if you want to test
88:23 - the controller as well you'll have to
88:25 - require you'll have to remove the build
88:26 - context call
88:29 - anyways since I'm not testing this I can
88:32 - have build context over here
88:34 - and now what I'll do is State equal to
88:37 - true what is State equal to true well
88:40 - state is basically of the type Boolean
88:43 - and it is Boolean because I mentioned
88:45 - over here Boolean
88:47 - state is basically is loading value you
88:51 - can consider
88:52 - state
88:54 - as is loading
88:56 - it's just named a state because this is
88:59 - what a riverpod has to offer
89:02 - but this is basically our is loading
89:04 - variable so right now when the user
89:06 - clicks on sign up button this function
89:08 - will get triggered and when this
89:10 - function gets triggered is loading
89:12 - becomes true so we start to show the
89:16 - loading indicator and then we start a
89:18 - process what is the process well we just
89:21 - call final response is equal to a weight
89:25 - so we need a thing why are we awaiting
89:28 - it because we have something known as
89:30 - auth API
89:32 - this thing exactly we need to call this
89:36 - so that we can
89:39 - create a user account
89:41 - so here I'm just going to have an
89:43 - instance of auth API and it's going to
89:46 - be similar a private variable just like
89:49 - this one
89:50 - and we are going to require this as a
89:53 - named argument so we have required auth
89:56 - API auth API
89:58 - and underscore all the API will be equal
90:01 - to auth API
90:03 - we have known this already
90:06 - now we can just use underscore auth API
90:09 - DOT sign up after we do sign up we have
90:12 - to pass an email and password we have
90:14 - already passed that because you're
90:16 - getting this from the function
90:19 - parameters
90:21 - now if you hover over this res
90:24 - it is of the type either failure account
90:26 - now how do we get
90:29 - if it's
90:30 - failure value how do we get the value if
90:33 - it's success value how do we get the
90:34 - success value well for that
90:37 - we can call response dot fold this is
90:41 - one good method FP dot provides us so
90:43 - that we can efficiently handle
90:46 - a failure and a success L is basically
90:49 - the left value and R is the right value
90:52 - so our left value is a failure class and
90:55 - right value is the account variable or
90:57 - the account model
91:00 - so in case of success in Failure we want
91:03 - to display a snack bar in case of
91:04 - success right now I just want to print r
91:07 - dot name r dot email whatever
91:10 - and in case of failure
91:12 - um what do we have to do well I want to
91:14 - have a snack bar so I can just have
91:16 - scaffoldmessenger dot of snack bar and
91:19 - all of those stuff but it's a lot of
91:21 - code to write so I'm just going to
91:22 - create one function for it so that I can
91:24 - reuse it every single time
91:26 - so you can go to the core folder create
91:29 - a file called useless dot dot and here
91:32 - have your first function which is Chino
91:34 - snack bar it is going to have multiple
91:36 - utility functions as well like other
91:39 - functions
91:40 - pick images pick image all of those
91:44 - functions but we'll create them as and
91:46 - when we need them so for the snow show
91:49 - snack bar we are going to require two
91:50 - things one is the build context and
91:53 - another is the content
91:55 - and here we are going to have scaffold
91:57 - messenger dot of context dot show snack
92:01 - bar
92:03 - and here we'll pass in the snack bar all
92:05 - the code that's required to create a
92:07 - snack bar
92:08 - this is all that we need now I can take
92:10 - this I've not created a class for this
92:12 - because it's a normal utility file I
92:15 - just want to call this function
92:17 - without calling the class
92:22 - that's why I have created this as a
92:25 - global function
92:26 - now I can just call show snack Barrow
92:29 - here pass in the build context right
92:31 - here and the content which is the text
92:34 - and the text is l dot message since it's
92:38 - a failure class I can access the message
92:40 - property on it but of course if there's
92:42 - some problem we can also print
92:46 - l dot stack trace and it will give us
92:48 - the entire trace of where the error is
92:50 - happening and all of those stuff
92:52 - now I'll create a provider for this auth
92:54 - controller class
92:56 - but just creating a provider is useless
92:59 - because we are extending it from a state
93:02 - Notifier so we have something known as a
93:05 - state Notifier provider let's create
93:07 - that but before creating that you might
93:09 - think that it's a lot of boilerplate
93:11 - code to write even with riverpot
93:13 - to minimize that you can go to the
93:15 - extensions tab in vs code and search for
93:18 - riverpod Snippets
93:24 - and you can go over here and install the
93:26 - one by Robert Browning
93:29 - after you install that
93:33 - you can go to the auth controller
93:35 - just type State Notifier provider and it
93:39 - will give you
93:40 - the snippet for the code now you can
93:42 - type the name so the name of the
93:44 - provider is auth controller provider
93:47 - now you have to mention the type of
93:49 - error because
93:50 - earlier it could Auto detect the type
93:55 - Auto auto detected that this is of the
93:57 - type auth API with State notify provider
94:00 - it cannot do that
94:03 - it can detect one type but we have to
94:05 - pass in two things first is the type of
94:07 - the class that we are returning from the
94:09 - state Notifier provider we are going to
94:11 - return the auth controller class from
94:14 - the state notify provider
94:16 - and another is the type that we have
94:18 - mentioned over here
94:20 - which is Boolean so we have Boolean
94:24 - and now we can return auth controller
94:29 - and that's it
94:31 - now we need to get instance of the auth
94:33 - API class and I hope you know how to do
94:36 - that you can just do ref dot watch or
94:40 - API provider and
94:44 - we are done we have created a system of
94:47 - efficient technique so that we can just
94:50 - do some simple lines
94:52 - and it will work for us so we created a
94:54 - state Notifier provider because we had
94:56 - extended it from State nodifier we typed
94:59 - in the class the auth controller class
95:03 - and then we passed in the Boolean data
95:05 - type because that's what we had passed
95:07 - in over here
95:09 - if you remove this Boolean
95:12 - it gives you an error over here because
95:14 - you'll have to remove that and you'll
95:17 - have to pass in Dynamic over here
95:18 - because if you don't mention anything
95:20 - it's dynamic
95:23 - but we want it to be Boolean so that we
95:26 - get nice autocomplete features later on
95:29 - what is this later on well it's in the
95:32 - login view itself so if I go to the sign
95:35 - up view sorry
95:37 - and call a function
95:40 - so we'll have void on sign up
95:45 - and we'll have ref
95:47 - but we cannot use ref aware why because
95:50 - there's nothing like ref variable or
95:53 - anything layer so what we have to do is
95:56 - come over here press command
95:59 - press command over here
96:01 - come over here press option if you're on
96:05 - Mac
96:06 - and select all of these three things
96:08 - stateful widget State and State and pass
96:12 - consumer to it
96:14 - now
96:15 - click on command full stop and import
96:17 - the flutter evapod Library we have
96:20 - converted the stateful widget to a
96:22 - consumer stateful widget
96:24 - this consumer stateful widget will give
96:26 - us access to widgetress what is widget
96:29 - ref well we saw provider ref provider
96:31 - ref helps us to interact provider with
96:34 - the provider but widget ref helps us
96:37 - from widget to a provider so now I have
96:41 - again access to ref why do I have access
96:43 - to ref over here because consumer State
96:46 - gives us access to something known as
96:48 - ref
96:49 - if you just come over here you can see
96:51 - it has something known as widget ref
96:55 - so I can use that and call read method
96:58 - on it whenever we want to call a
97:00 - function from a provider we'll always
97:02 - use read
97:04 - you can get a more description over here
97:06 - reads a provider without listening to it
97:09 - avoid calling read inside build if the
97:11 - value is only used for events event is
97:14 - what I said when you read it you only
97:17 - have to call functions on it if you use
97:20 - this instead if you use ref inside of
97:23 - build function not in any functions if
97:25 - you use this inside of build function
97:27 - you need to use ref.watch if you're
97:30 - using it in any of the functions like
97:32 - over here you have to use
97:35 - ref.read now what do I want to read I
97:38 - want to read auth controller provider
97:40 - don't do auth API provider because I
97:42 - said you cannot have auth API files
97:44 - inside of
97:46 - a UI file so we have auth controller
97:49 - provider dot Notifier when you use
97:53 - nodifier you get access to the class
97:55 - instance
97:57 - and then you can use the sign up
97:59 - function however if you don't use
98:01 - Notifier
98:03 - you won't get access to any of the
98:05 - methods why let's see the difference if
98:08 - we use final risks is equal to this and
98:11 - however this this is of the type Boolean
98:13 - why
98:14 - when we did this with provider it gave
98:16 - us the instance of auth controller
98:18 - provider or the auth controller class
98:20 - right but when using res it gives us
98:23 - Boolean well that's because of the
98:25 - difference between
98:27 - provider and state Notifier provider a
98:31 - North controller we have used State
98:32 - Notifier provider
98:34 - when we just do ref dot read or
98:36 - ref.watch auth controller provider it
98:39 - gives us a Boolean value which is the is
98:41 - loading value
98:42 - but when you want to get instance of the
98:44 - class we have to use ref Dot
98:47 - read auth controller provider dot
98:50 - Notifier I know it's a bit overwhelming
98:52 - but as and when we build more functions
98:55 - and use more of these Riverport
98:57 - techniques you'll understand why we are
98:59 - doing what we are doing
99:02 - and you'll get an intuition of when to
99:04 - use what
99:07 - so as of now we'll just use dot Notifier
99:09 - because we want to get instance of the
99:11 - class if you hover over this this is of
99:13 - the type auth controller now and now I
99:16 - can call sign up on this method
99:21 - now we have to pass an email so I'll
99:23 - pass an email controller.txt password
99:26 - will be passwordcontroller dot text
99:31 - and the build context
99:33 - build context is Prov provided in the
99:36 - consumer State itself it's like the
99:38 - state property but it has context as
99:41 - well as widget ref with it
99:44 - now I can take this on sign up function
99:47 - go down and put it in the on done button
99:51 - so whenever the done button is clicked I
99:53 - want this to run and it should create
99:55 - something for us
99:58 - now before running the app there's one
100:01 - last thing we need to do go to the
100:03 - main.file and wrap my app widget with
100:07 - provide a scope provider scope is
100:10 - another widget provided by flutter
100:12 - riverpod package
100:13 - this provider scope keeps track of all
100:16 - the providers that are declared because
100:18 - these providers are declared globally in
100:20 - our applications
100:22 - you can see that it's declared outside
100:24 - of the class
100:27 - this provider scope will keep track of
100:29 - each one of them and if you are afraid
100:31 - of global variables
100:33 - like
100:35 - they can be updated from anywhere in our
100:38 - app and there are a lot of concerns with
100:40 - global variables don't worry about it
100:43 - because these providers are immutable
100:46 - so now I can take this constant put it
100:48 - beside provide a scope
100:51 - and remove the unused import of login
100:54 - View
100:56 - if you don't put this provider scope it
100:58 - will give you an error in the debug
101:00 - console now let's restart the app and
101:03 - see what we are getting so I'll just
101:05 - sign up the user so I'll pass in the
101:08 - test one two three at the rate gmail.com
101:11 - pass in the password as test one two
101:13 - three click on done and it doesn't work
101:17 - the reason for that is in the rounded
101:19 - small button we have taken the void
101:22 - callback on tap but we have not added
101:24 - that anywhere so we need to wrap this
101:27 - chip with a widget known as Inkwell you
101:30 - can also use gesture detector instead
101:32 - but Inkwell will give the nice flash
101:35 - effect that I need
101:36 - and then I have on Tab
101:39 - and in the on Tab instead of passing an
101:42 - empty function I'll just pass in ontap
101:44 - which is from The Constructor now I'll
101:46 - restart the entire application
101:50 - come over here and start so test at the
101:53 - read gmail.com pass in test123 click on
101:57 - done
101:58 - and still nothing happens here you can
102:00 - see it's giving us an error missing
102:02 - plugin exception no implementation found
102:05 - for all of this
102:06 - whenever you get this error this is
102:08 - probably because you've added a new
102:10 - package a new dependency to perspect.aml
102:13 - file but you have not restarted the
102:15 - entire app so you need to restart it
102:17 - without debugging and now after this is
102:20 - done let's try it again
102:22 - alright so our app is now complete let's
102:25 - come over here pass in the email which
102:27 - is test
102:29 - at the gmail.com password test123
102:34 - click on done
102:36 - and you can see invalid password
102:38 - password must at least be eight
102:40 - characters so I'll just pass in four
102:42 - which makes it eight characters and then
102:45 - click on done
102:46 - no error
102:48 - and here you can see it's giving us
102:51 - nothing well that's because
102:54 - if we go to the auth controller
102:58 - we have printed the name but there is no
103:01 - username
103:02 - there's user email so you have to print
103:05 - in the email and now let's see if I try
103:07 - to do it again it should give me an
103:09 - error because the user already has been
103:11 - created so if I click on done a user
103:14 - with the same email already exists in
103:16 - your project so I'll just have a
103:18 - different email and then click on done
103:21 - and here you can see we get the correct
103:23 - email
103:26 - now if we go to the app right dashboard
103:28 - as well
103:30 - then click over here go to
103:32 - authentication tab
103:34 - we have two users created testavery
103:37 - gmail.com and test one at the gmail.com
103:40 - if you
103:43 - maximize the screen you can see the
103:46 - status the email is not verified
103:49 - there's no name there's email there's no
103:52 - phone number you can enter the new
103:54 - password from the dashboard
103:56 - the user preferences the key and the
103:58 - value you can have
104:01 - the objective for this is written over
104:03 - here you can read it and you can delete
104:05 - the user as well
104:07 - the user ID is also over here and this
104:09 - is a uniquely generated user ID I told
104:12 - you it will generate
104:15 - uniquely if I just mention unique
104:19 - in the auth API
104:22 - right here
104:24 - and if you just paste it you can see
104:26 - this is a different user ID a randomly
104:29 - generated one and this will differ from
104:31 - the test at the rate gmail.com so we can
104:34 - be sure about it all right now that the
104:37 - user has been created and everything
104:39 - works the next step is to log in the
104:41 - user with the same email and password if
104:44 - the user exists so we have to create a
104:47 - function for login but even before that
104:51 - there's one thing if I click on done
104:53 - there's no indication of loading
104:55 - indicators even though in the auth API
104:58 - we have set in the auth controller sorry
105:00 - just said state is equal to True is
105:03 - loading is true
105:04 - so why is it not showing well because we
105:06 - have not watched it so in the sign up
105:09 - view we have to go here get the is
105:12 - loading value how are we going to get
105:13 - this we've already seen that we have ref
105:16 - dot watch
105:18 - auth controller provider
105:21 - now if you hover over this this is of
105:23 - the type Boolean because it's the is
105:25 - loading value so if the
105:29 - data is being loaded what do we want to
105:32 - do we want to show a loading indicator
105:35 - to do that we are going to create
105:39 - a new widget in common called as
105:43 - loading underscore page dot dot
105:46 - we're going to import material Dot we're
105:49 - going to have a stateless widget called
105:53 - loader
105:55 - which is going to return a center child
105:58 - circular progress indicator
106:02 - and this is going to be a constant
106:05 - and this is the loader widget we are
106:07 - going to use but why have I named this
106:08 - loading page this is because we are
106:11 - going to create another stateless widget
106:12 - called loading page
106:15 - we're going to extend the stateless
106:16 - widget but this time we are going to
106:18 - wrap it with a scaffold and in the body
106:21 - we are going to have a loader
106:24 - and this is going to be a const scaffold
106:27 - this loading page will be required
106:31 - in main.dot file when we want to show
106:33 - the loading page this is just a loader
106:36 - which can be used in some other pages
106:38 - but we want our own page of loading to
106:41 - show up we'll use this
106:44 - so here we can just have loader
106:48 - like this so if it is loading we'll get
106:51 - a constant load up otherwise we have all
106:54 - of this
106:56 - and now you can see we are getting the
106:57 - loading indicator continuously why are
107:00 - we getting this loading indicator well
107:02 - that's because we had clicked the button
107:04 - the
107:05 - is loading state has started so in the
107:08 - controller we have state is equal to
107:11 - true but we have not put state is equal
107:13 - to false anywhere
107:14 - that's why it continuously keeps on
107:16 - loading so here we have to have state is
107:20 - equal to false
107:22 - now if we restart the app pass and test
107:25 - at the rate gmail.com
107:27 - test123 4 click on done it gives a
107:30 - loading indicator but as soon as there's
107:32 - no error or there is an error
107:35 - it will stop the loading indicator
107:39 - so I hope you have understood the entire
107:41 - process we have state Notifier provider
107:43 - we have state Notifier we create an
107:45 - account using auth API
107:47 - we start the state so is loading is set
107:50 - to true
107:51 - if a set if is loading is set to true
107:54 - and we are on the sign up view
107:58 - we are constantly listening to it using
108:01 - ref.watch if you just do ref dot read it
108:04 - will not work for you you have to do
108:06 - ref.watch ref.read is strictly
108:09 - prohibited by using
108:11 - riverpod in the build context
108:14 - or the build function
108:17 - now whenever is loading values changes
108:19 - we'll check is loading if the variable
108:22 - is loading then show a loader otherwise
108:24 - the entire widget tree
108:28 - I hope this process was understood if
108:30 - it's not I would recommend you to watch
108:32 - this entire thing or Analyze This code
108:34 - because this is the very foundations
108:36 - that we are going to use in literally
108:38 - every single file
108:40 - if you're overwhelmed by all of this
108:42 - don't worry when we create more files
108:45 - when we create more functions
108:47 - you'll get a hang of when to use what
108:52 - and I'll be sharing my thoughts on the
108:54 - same every single time
108:55 - so anyways now that this loading part is
108:58 - also done we are going to create the
109:01 - login function which is very similar to
109:04 - the
109:05 - sign up function so in the iot API we
109:08 - are going to create a login function now
109:10 - so similar to the sign up function we
109:12 - are going to create the login function
109:14 - here but yeah it's not going to return
109:16 - account it's going to return something
109:18 - known as session
109:20 - whenever you log in you get a session
109:22 - and whenever you sign up you get the
109:23 - user account
109:25 - that's how apprite works
109:28 - so here let's create the missing
109:31 - implementation and actually I'm just
109:34 - going to copy something from the
109:38 - sign up function here so I'm just going
109:40 - to copy this entire thing because
109:41 - everything is very similar I would
109:43 - recommend you to write this so that you
109:44 - get a practice I've already written it
109:46 - before so I don't find the need to
109:48 - practice more
109:49 - but anyways we have the Creator
109:53 - but this is for sign up to sign in you
109:55 - have to do create session
109:58 - and create email session you have to
110:00 - pass in the email and the password
110:01 - that's all
110:03 - here you could have passed in the name
110:06 - attribute as well so that when you do r
110:09 - dot name in the auth controller here you
110:11 - don't get blank space but we just having
110:15 - email and password name is going to be
110:17 - saved in the database this is the
110:19 - authentication console nothing is
110:21 - getting saved in the database
110:24 - if you just come to the app right
110:26 - console this is the database part and
110:28 - nothing is being stored over here
110:31 - everything is being stored in the
110:33 - authentication tab as of now
110:37 - so here we have created the email
110:38 - session this gives us a session so let's
110:41 - call this session and we will return
110:44 - that session
110:45 - so when we do create
110:47 - it will sign up for us
110:49 - it will just create an account in the
110:51 - upright console but it will not log you
110:53 - in to log you in you have to do create
110:55 - email session
110:58 - and that's all that's needed for login
111:01 - function pretty similar now we can go to
111:03 - the auth controller and declare this
111:07 - so I'll just avoid login and it's going
111:10 - to be very similar to this so let's just
111:12 - copy this
111:14 - paste it in here
111:16 - this is going to be async then we are
111:19 - going to have all of this stuff as well
111:22 - so let's just paste it right up but this
111:24 - is going to be called login
111:27 - the state will be true but we are going
111:29 - to call auth api.login
111:31 - will pass in the email we'll pass in the
111:33 - password set state to false show snack
111:36 - bar in case of error but here you can
111:38 - see we are getting a session so we can't
111:40 - use r dot email let's see what
111:42 - properties it has to give us if we do
111:44 - this you can see there are lots of
111:46 - things but none of that will be useful
111:49 - for us except the user ID so let's see
111:51 - if user ID is correct or not so I'm just
111:55 - going to go ahead restart the app
111:58 - oh actually before doing that we have to
112:00 - go to the login view create something
112:02 - similar to what we had done for the sign
112:04 - up view right we can just copy all of
112:07 - this function stuff
112:09 - go to the login View
112:11 - paste it in and then we have on login
112:15 - yeah that's pretty much it now we also
112:17 - need to convert all of this to a
112:19 - stateful widget or a consumer stateful
112:21 - widget sorry so we can paste that in
112:24 - import flood riverpod Library
112:28 - import auth controller provider and then
112:31 - call Dot Login
112:34 - now I'll copy this function
112:36 - go down below and add it to ontap and
112:39 - also have the is loading variable just
112:41 - like we had before so if it's loading
112:44 - then we'll have ref dot watch
112:47 - controller provider and that's reaching
112:50 - pretty much it if we do Notifier
112:52 - remember we get the instance of the
112:55 - class we don't want instance of the
112:56 - class we want the Boolean value which is
112:58 - the state value but if you want to do
113:00 - dot Notifier you can do dot Notifier dot
113:03 - state which will give you the exact same
113:06 - thing
113:07 - now I'll copy this as loading
113:10 - put it in the body
113:12 - and if it's loading then I can have
113:14 - constant loader otherwise my widget tree
113:17 - is just fine
113:19 - now I'll restart it
113:21 - and see if it's working so I'll go to
113:23 - the login view I'll first try an email
113:25 - that I haven't registered gmail.com
113:28 - test123 and click on done
113:31 - invalid password password must be at
113:33 - least for eight whatever that is then
113:35 - we'll click on done invalid credentials
113:38 - please check email and password that
113:39 - means it's okay now we can have test at
113:41 - the gmail.com click on done here we have
113:45 - the user ID let's see if it matches by
113:47 - opening the app right console going to
113:50 - test at the rate gmail.com
113:52 - copying the user ID
113:55 - and seeing it over here
113:58 - 5B is there that means it's the same
114:00 - thing
114:03 - that means our login is also working
114:05 - so we completed login very quickly we
114:08 - just have to understand how signup works
114:09 - and login is very simple
114:11 - so the now the next thing is whenever
114:13 - the user logs in
114:15 - we have to navigate them to the home
114:17 - screen
114:19 - so we can close all the folders
114:22 - in the features create another feature
114:24 - called home
114:26 - create a new folder called View and
114:28 - create the first view which is the home
114:30 - view dot dot file we'll import material.
114:33 - import a stateless consumer widget
114:37 - called home View
114:39 - import flutter everpod Library put in a
114:42 - scaffold and see what we get so we can
114:45 - go to the auth control layer so whenever
114:48 - we log in
114:50 - actually let's come here whenever the
114:52 - user signs up we cannot directly send
114:54 - them to the home screen because if we do
114:57 - that
114:58 - and
114:59 - when we try to purchase the state the
115:01 - state won't be persisted because State
115:03 - persistence will be done by
115:05 - something like this account dot get is
115:10 - not equal to null so whatever we do this
115:13 - account dot get
115:15 - if it's not equal to null
115:17 - then we'll show the sign up screen
115:19 - otherwise the login screen uh the home
115:22 - screen
115:23 - so here we'll have home screen otherwise
115:26 - the login screen but account.get will
115:29 - only have the account when the user
115:32 - creates an email session so we have
115:34 - created an email session over here only
115:36 - then the account dot get has some value
115:39 - in it if we just do dot create account
115:42 - doesn't have any value in it it's just
115:44 - created it in the app right dashboard
115:46 - but account variable doesn't hold any
115:48 - value
115:50 - only after doing email session create
115:53 - the account value
115:55 - account has some value in it
115:58 - so what can we do
116:00 - well after signing up the user what I
116:03 - want to do
116:04 - if it's a success then I'll just push
116:07 - them
116:08 - to login screen dot route so we have
116:10 - login View
116:13 - dot route but in case of failure
116:17 - we are going to show the snack bar and
116:19 - also over here we are going to show a
116:20 - snack bar that account has been created
116:26 - please login
116:27 - the same thing will happen in login view
116:30 - as well whenever the user creates an
116:33 - email session now we have
116:35 - account has some value in it so I'll
116:37 - just say navigator dot push home view
116:40 - dot route so here I'm just going to
116:42 - create static route
116:44 - and just copy all of the material page
116:46 - thing from sign up view so we can copy
116:50 - all of this from here now we can have
116:53 - home view passed in and we're done here
116:56 - we'll just pass in home view as well
116:58 - now this looks cool so whenever you log
117:01 - in we go back to the home screen
117:04 - so let's try
117:06 - right now
117:07 - we are in the login screen
117:09 - I'll pass in the email
117:11 - and password then click on done
117:15 - and I shift to the home screen
117:19 - but here's the catch but here's the
117:21 - catch if I try to restart the
117:23 - application
117:25 - we are back to the sign up screen that's
117:26 - because in the main.dot file we have
117:28 - decided that the first screen that
117:30 - should show up is the sign up for you
117:32 - but what I want to do is if the account
117:34 - is not null then I want to show up the
117:37 - login screen
117:39 - and how can I do that
117:41 - well as I said
117:43 - in the auth API we are going to create
117:45 - current user accounts account dot get so
117:48 - we can just have future
117:50 - model dot account which can be null
117:53 - current user account
117:56 - I'll create a missing implementation for
117:59 - it I'll take this and put it at the top
118:04 - now if you're wondering why I haven't
118:05 - used future either I've used future
118:07 - directly that's because we are going to
118:10 - put this in a future provider and future
118:13 - provider can handle the errors for us
118:15 - you'll see that later on but the point
118:17 - is since we are using future provider we
118:19 - have not used future either
118:21 - just keep that in mind for now later on
118:24 - when we add future provider you'll get
118:26 - to know more
118:27 - and for now we are also going to have
118:29 - all of this try and catch block
118:34 - but we'll remove all of this this is not
118:36 - needed the point over here is just
118:40 - having a try and catch block so
118:43 - we want to return
118:47 - await
118:49 - account dot get
118:51 - and we'll also put asynchronous function
118:54 - here so basically we'll do account.get
118:57 - it will give us the future account which
118:59 - is the model dot account we'll await it
119:02 - and return it if you don't want to await
119:04 - it it's still fine it will still work
119:07 - so you can do this as well because we
119:09 - are returning future account at the end
119:10 - of the day
119:12 - but in case of error we are not going to
119:14 - have any stack Trace so let's remove
119:16 - that
119:17 - in case of any error we are going to
119:19 - return null so we can return null over
119:22 - here and return null here as well
119:25 - that's right this is
119:27 - nullable basically if account.get does
119:29 - not have any value that means that the
119:31 - user is not logged in maybe they've just
119:33 - signed up
119:36 - even then
119:38 - it will have no value but this doesn't
119:40 - return a nullable return data type so it
119:43 - will throw an upright exception that the
119:45 - user has not logged in and that's when
119:47 - we will send out null and later on we
119:49 - can just check if current user account
119:51 - is not null
119:53 - if it is not null that means account.get
119:55 - has some value if it has some value we
119:58 - can show them the home view otherwise we
120:00 - can just show them signup View
120:02 - so now we can go to the auth controller
120:05 - I can go at the top remove everything
120:07 - from here and have Future model dot
120:11 - account obviously we need to import that
120:13 - account model
120:14 - so I can have upright models.dot and
120:17 - import them as model
120:20 - and then we have more Future model dot
120:22 - account current
120:23 - user and will return
120:26 - auth API dot current user account
120:30 - not current user current user account
120:34 - and this has to be nullable don't forget
120:37 - that
120:38 - and now we will create future provider
120:41 - with the help of the snippet code that I
120:44 - made you install in the extensions tabs
120:46 - Riverport Snippets we can just do future
120:49 - provider
120:51 - and then have current
120:54 - user account provider
120:58 - we don't have to mention the type and
120:59 - future provider as well
121:03 - we can remove the async and just have
121:06 - final
121:07 - auth controller since we want to call
121:09 - the auth controller so we'll have auth
121:11 - controller and you know what will be a
121:13 - ref dot watch auth controller provider
121:17 - dot Notifier don't forget the Notifier
121:19 - otherwise it will give you the is
121:21 - loading value
121:22 - right and now you can just do return
121:25 - auth controller Dot
121:28 - current user and since this is of The
121:31 - Future model future account type it will
121:33 - work fine now if you hover over this
121:35 - this is of the type future provider
121:38 - account which is nullable now that we
121:41 - have this done we can go to the main.dot
121:44 - file
121:45 - and in the home
121:47 - we want to use ref now how do I convert
121:49 - stateless widget
121:51 - to something that can give me widget ref
121:53 - we did that for the stateful widget we
121:56 - just added consumer before it right
121:57 - consume a stateful widget but here we
122:00 - have to use consumer widget not consumer
122:02 - stateless widget so we can have consumer
122:05 - widget
122:06 - we have already imported riverpod
122:08 - because of Provider scope and here we
122:10 - will have widget ref
122:14 - it's not
122:16 - there in the state here because there is
122:19 - no State class here and stateful widget
122:22 - we had State present we had consumer
122:24 - State present
122:26 - but here we have nothing like that so
122:28 - widget ref is provided to us in the
122:30 - build functions
122:32 - parameters now I can just do ref dot
122:35 - watch
122:37 - current user account provider dot when
122:43 - and when there's a data
122:45 - there will be user so we'll do something
122:47 - we'll return based on that then we'll
122:50 - have error and stack Trace so I'll just
122:53 - prefix this with an st
122:56 - and we have to return suppose an error
122:59 - page so we'll have to create an error
123:00 - page and we already have loading so I
123:03 - can use loader but if we use loader in
123:06 - material app it will be a problem why
123:09 - because we don't have scaffold yet
123:12 - it will give you a very ugly solution of
123:15 - loading bar what I want to use instead
123:17 - is a const loading page because we have
123:20 - already added a scaffold to it
123:23 - so it will show up the loader in a nice
123:25 - page we'll also remove the sign up View
123:28 - and let's see what we have to work on we
123:30 - have to create an error page so I can go
123:33 - to the common have error underscore page
123:35 - dot dot also
123:38 - you have to make sure that in common we
123:40 - export
123:41 - loading page we export
123:46 - error page
123:47 - yep and in the error page now I'll
123:50 - import material dot I'll create a
123:52 - stateless widget
123:54 - called error text
123:59 - return a center child text and we need
124:04 - error for that so we can just have final
124:07 - string error
124:09 - and we'll require this through the
124:11 - Constructor this is all basic concept
124:13 - that we have seen earlier since error
124:15 - texture is going to be reusable we need
124:17 - this to have a Constructor value and
124:20 - then we can just pass that in error
124:23 - now we also need to create another
124:26 - stateless widget called error page
124:30 - similar to the Loading page we are going
124:32 - to have scaffold body and then pass in
124:35 - the error text over here this is
124:37 - basically
124:38 - a wrapper around erotic so that it can
124:40 - be scaffolded now we also need error
124:43 - again so we'll pass that in have
124:45 - required this dot error
124:48 - take this error password in and it's
124:50 - done great now we can come to the main
124:53 - dot dot
124:54 - return the error page over here
124:58 - pass in the error
125:00 - but it's giving us an error that's quite
125:03 - a thing because we want to use two
125:06 - string over here this requires a value
125:08 - of string and this is of the type object
125:11 - now in the data will be our main logic
125:13 - so we want to check if the user account
125:16 - is null
125:17 - or not so if user is not null if the
125:22 - user is not null that means that the
125:24 - user has logged in if the user has
125:26 - logged in we just want to show the home
125:28 - View
125:30 - but if the user has not logged in so we
125:32 - can put else but since we are using
125:34 - return
125:36 - we can just do this return constant sign
125:40 - up view that means that the user has not
125:44 - logged in now if I restart the app we
125:47 - should be landing in on the home View
125:50 - and that's because
125:52 - we had logged in once right upright
125:55 - remembers that and the user account has
125:57 - some value in it if you try to print the
125:59 - user value you'll see that so we can
126:01 - just do print user instance of account
126:04 - is there so we can just pass in the
126:06 - email
126:07 - and we have test other gmail.com so we
126:10 - can remove this now restart the app and
126:13 - state persistence is also completed but
126:15 - we are not done with authentication part
126:17 - yet because whenever the user signs up
126:20 - we just don't want to create a user in
126:23 - the authentication tab we also want to
126:25 - do that in the databases tab in the
126:27 - users collection that we have to now
126:29 - create
126:30 - so basically we want to save the user
126:32 - data to app right database so let's get
126:34 - started with it right now so we are
126:37 - going to start off by creating a new API
126:39 - here which is the user API dot dot file
126:42 - and here similar to the auth API we are
126:44 - going to create an abstract class so we
126:46 - will have abstract class I user API now
126:51 - why is this different because this will
126:52 - contain all the user API related calls
126:55 - for example we're going to have save
126:58 - user data get user data update user data
127:01 - getting the latest user profile data all
127:04 - of those stuff those are very different
127:06 - from auth API because even if there is
127:09 - no authentication and somehow we need to
127:11 - store the user data this will be handy
127:14 - it is independent from the auth API
127:18 - that's the whole concept if you don't
127:19 - want anything just delete it and it
127:21 - shouldn't cause problems in any files or
127:24 - it should be less work to do in some
127:26 - other file now in this case we are going
127:29 - to have this so our first thing is
127:31 - future either void
127:34 - save user data
127:37 - and we are going to have this
127:40 - then we are going to create the user
127:43 - API
127:45 - which is going to implement
127:47 - I user API
127:50 - and now we can create its implementation
127:52 - but before creating the implementation
127:54 - we have the save user data but what user
127:57 - data do I have to save I'm not getting
127:59 - that so I want to get it from the
128:01 - parameters here but manually getting
128:04 - required string email password all of
128:07 - that stuff what I can do instead is
128:09 - create a model for this so I can just go
128:13 - to the lib folder create a new folder
128:15 - now called models and have the first
128:17 - model which is a user model creator
128:20 - now this user model is going to have a
128:22 - bunch of properties and this user model
128:25 - is exactly what we are going to store in
128:27 - app right as well so let's note down all
128:31 - of the properties that might be required
128:33 - in this user model first is the email
128:36 - then is the name
128:39 - we are not going to store the user's
128:41 - password in this database because it's
128:43 - not going to be encrypted over here we
128:45 - want the user's password to be encrypted
128:47 - all the time
128:49 - so I'm not saving password here then we
128:53 - need other things and let's write down
128:55 - all the things that we require we'll
128:56 - require a list of string of followers
128:59 - why is it a list of string of followers
129:02 - because we are going to store
129:05 - the followers in the form of their uids
129:08 - uids is the user's unique ID that we
129:12 - saved earlier and we saw earlier in the
129:14 - upright console as well
129:16 - so we're going to store that as the
129:18 - followers so we'll be able to get the
129:19 - list length and all of those stuff with
129:22 - this and another thing we need is
129:25 - following similar to the followers one
129:27 - it's going to contain a list of uids of
129:30 - the user
129:32 - following then we are going to have a
129:35 - final string of profile picture so what
129:37 - is the profile picture going to look
129:39 - like then we also have the banner
129:41 - picture right
129:43 - that will show up in the user profile
129:45 - just above the profile picture
129:47 - then
129:50 - we need to store the uid of the user
129:52 - then we have the bio of the user
129:56 - bio is the description
129:58 - and finally we have a Boolean of is
130:01 - Twitter blue so if they've subscribed to
130:03 - Twitter blue or not so this will decide
130:06 - if they should have a blue tick mark Or
130:08 - Not beside the name
130:10 - and now
130:12 - I want to create a Constructor a two map
130:15 - from map functions for this so I can
130:17 - just click over here and create a data
130:20 - class generate data class how am I
130:22 - getting this option if you go to the
130:24 - extensions Tab and type dot data class
130:27 - generator
130:28 - you'll get the extension on this so
130:31 - install them or install one of them and
130:35 - just click over here and generate a data
130:37 - class and it will generate it correctly
130:39 - for you
130:41 - now we can remove dot convert let's
130:43 - remove this go down remove the from Json
130:46 - to Json function we don't need that
130:48 - because we are not making API calls we
130:50 - already have apparite API we are going
130:54 - to use that app right client
130:56 - to save data to database
130:59 - so we don't need to encode and decode
131:01 - and all of the do all of that stuff
131:04 - in the two map
131:06 - now let's go through the functions that
131:07 - it creates first is the Constructor and
131:11 - since all of the fields are final I can
131:12 - put this as a constant and mark the
131:14 - class as immutable
131:18 - so it creates a Constructor where every
131:20 - field is required that's good now we
131:23 - want to copy with
131:24 - now we have the copy with function this
131:27 - copy with function will be used
131:29 - whenever we want to copy
131:32 - the class Fields with another field so
131:34 - example we have some user model and that
131:37 - user model is something like this so
131:40 - user model user
131:43 - is equal to user model and there are a
131:48 - bunch of fields like name is present
131:49 - like Revan and all of those stuff
131:52 - right now I want to update the name of
131:55 - the user so I can just do user dot copy
131:58 - with ignore the
132:00 - case sensitivity and then I can just do
132:03 - name as a new name so I can just have
132:07 - ravan like this
132:08 - so what's happening over here
132:12 - is basically all the other fields remain
132:14 - the same but but the name we are trying
132:17 - to change can be changed to this
132:18 - function
132:19 - we need copy with function because all
132:22 - of the fields over here are final if
132:24 - they're final that means they are
132:25 - immutable the values cannot be changed
132:28 - once they are made so I cannot do user
132:31 - dot name is equal to ravan like this
132:36 - it will give an error and that's why we
132:39 - need this copy with function
132:42 - then we have two map function basically
132:46 - whenever we have user model created and
132:48 - we call user.2 map it will convert all
132:52 - the fields into a map format we have a
132:55 - map over here and we just do result dot
132:58 - add all and it will add email email name
133:01 - name like this
133:04 - then we have from map now in two map
133:07 - there's one change to be made we have to
133:09 - remove this field because we don't have
133:12 - to
133:13 - store the uid of the user on app right
133:16 - because app right automatically creates
133:19 - a unique ID for us so we don't have to
133:22 - create another one we can just have
133:26 - it present in from map and in from map
133:28 - we are basically getting the map and
133:30 - we're converting it into a model
133:33 - and over here you see we have map at uid
133:35 - but we don't have any field like map at
133:38 - uid over here right we have removed the
133:40 - call because app right automatically
133:43 - creates the ID so to fix that I can just
133:46 - have slash
133:47 - dollar ID why
133:51 - because when apprite automatically
133:53 - creates the ID
133:55 - it is stored with the name as dollar ID
133:59 - and if we just do dollar ID you can see
134:02 - it gives us an error it thinks this is a
134:04 - variable which is trying to get stored
134:06 - and there is no variable named ID
134:09 - but if we put slash it will get to know
134:12 - that we need to ignore this string
134:13 - interpolation
134:15 - and
134:17 - just use dollar ID over here basically
134:21 - this will retrieve the automatically
134:22 - generated ID app right gives us and
134:26 - we're going to do this for literally
134:27 - every user model that we create
134:30 - and then we have the two string function
134:32 - so while debugging if you want to check
134:33 - the user model if we put user model.2
134:36 - string it will give us in the print
134:39 - command in the terminal something like
134:42 - instance of user model but I want to get
134:45 - to see what user model is there What
134:48 - fields are there so I can just overwrite
134:50 - the tostring method so that I can show
134:52 - everything else and then we have the
134:54 - identity property so basically we won't
134:57 - be using this at all in our application
134:59 - so you can remove this but basically
135:01 - what it does is check if two user models
135:04 - are the same thing or not
135:06 - and it does this by checking each and
135:08 - every field
135:10 - and seeing if their properties are equal
135:12 - or not
135:14 - so this was a user model now in save
135:17 - user data function
135:19 - I'm going to have this user model
135:21 - created
135:22 - now I can create one missing override
135:24 - for this and now to create
135:27 - something in database we always have to
135:30 - have a try and on app right exception
135:33 - catch block
135:35 - with E and F T
135:37 - catch e s t we have already looked at
135:40 - all of this before
135:43 - and now how do I create apprites now how
135:47 - do I create a new document
135:50 - in apprise database so to do that I have
135:53 - to import something known as databases
135:56 - which is a private variable DB now I'm
135:59 - just going to have user API required
136:03 - databases
136:05 - DB
136:06 - and set underscore DB equal to DB right
136:10 - now I can take this underscore DB put it
136:12 - in the try block and have DB Dot create
136:16 - document you can see it's very intuitive
136:18 - we want to create a document it gives us
136:19 - a create document function now we need
136:22 - to pass in the database ID do we have
136:24 - the database ID stored in upright
136:26 - constants yep we do so we can just have
136:30 - app right
136:31 - constants dot database ID now collection
136:35 - ID
136:37 - collection ID can be users right no this
136:40 - is not how apprite works it shouldn't
136:43 - have collection ID as the name of the
136:45 - collection there is a collection ID
136:47 - given to it so for that we have to go to
136:50 - the database we are in click on create a
136:53 - collection and pass in users now I can
136:56 - click on create copy The Collection ID
136:59 - go to Upright constants
137:02 - and create static constant string users
137:05 - collection
137:08 - equal to this thing right here
137:11 - so I can come to the user API just pass
137:14 - in
137:16 - upright constants
137:19 - Dot
137:20 - users collection then we want to pass in
137:23 - the document ID which can be ID dot uni
137:26 - right we don't know the document ID
137:29 - and this document ID is also going to be
137:32 - the ID of the user now finally we need
137:36 - to pass in data and data is user model
137:38 - dot to map
137:43 - we had created two map function in the
137:45 - user model and that's what we are using
137:47 - now we can await this
137:49 - store it so we have final document is
137:52 - equal to this
137:54 - we can also put async over here
137:56 - and then return write null so everything
137:59 - goes fine
138:01 - yep we don't have to return anything so
138:04 - we can also remove this final document
138:06 - equal to because we don't have to store
138:08 - it
138:10 - in case of failure though we have to
138:12 - return left
138:13 - failure will pass an e Dot message
138:16 - otherwise some unexpected error
138:21 - occurred
138:24 - and stack Trace will be St
138:28 - we can put the same thing for the catch
138:30 - block as well
138:32 - but your e.2 string and this part is not
138:36 - required
138:37 - great now save user data function is
138:40 - also created let's create a provider for
138:42 - this I'll let you try this on your own
138:44 - pause the video and try it on your own
138:46 - so that you start developing the
138:48 - confidence to do it on your own
138:51 - if you are able to do it great we just
138:53 - have to create a provider like user
138:56 - API provider
138:59 - then we can have provider and we'll
139:01 - return this user API class now we need
139:04 - to pass in the database to get the
139:06 - database of course
139:08 - we'll have to create a new provider in
139:11 - providers.dot which is final app right
139:15 - database provider
139:17 - we created one for account we created
139:19 - one for client now it's the time for
139:21 - database so if you get confused on when
139:25 - to create provider if I have to create a
139:27 - provider or not you just have to ask
139:30 - yourself is this a dependency if it's a
139:32 - dependency you have to create a provider
139:35 - as it will help you in testing
139:37 - so yeah upright databases is a new
139:40 - dependency
139:42 - and that's why it's being stored over
139:43 - your we are not creating an instance for
139:45 - this we're directly injecting this in
139:48 - our class
139:49 - so here we can just have return
139:51 - databases
139:53 - now we need to pass in the client so we
139:56 - can get the client like this pass in the
139:59 - client and we are done
140:02 - and in the DB we'll pass in ref.watch
140:04 - app right database provider
140:08 - that's it
140:10 - user API is now created
140:14 - now I have to go to the auth controller
140:17 - import the user API here so we have user
140:19 - API underscore user API
140:22 - we'll require this so we'll have
140:24 - required user API user API
140:29 - and then we'll have underscore user API
140:31 - equal to
140:33 - user API
140:35 - just what you have done before here it
140:37 - gives us an error because user API is
140:39 - required what do you think will come
140:41 - here exactly where F dot watch user API
140:46 - provider
140:48 - now we can scroll down
140:50 - and let's think what we want to do
140:52 - whenever the user signs up we want to
140:55 - store that data in the database but when
140:57 - the user logs in do we want to store the
140:59 - data no because the user just has to log
141:02 - in he has no data that we have to store
141:05 - we have already stored that in the sign
141:07 - up process so we just have to do it over
141:10 - here so what we'll do is
141:12 - create a user model here I said user
141:15 - model is not going to be created in user
141:18 - API or any of the conversions are not
141:20 - going to take place it's purely for app
141:22 - right
141:23 - so that's why
141:26 - we are creating the user model here
141:29 - so user model user model is equal to
141:32 - user model now we'll pass in the email
141:36 - now we have to get the name the name in
141:39 - the sign up process is going to be
141:41 - extracted from the email only so we can
141:44 - go to the utilities dot dot
141:47 - create a function that will return to us
141:49 - a string
141:51 - of get
141:54 - name from email we'll pass in the name
141:59 - and now we'll just do return
142:01 - actually we'll get an email here right
142:03 - we'll get email and we'll just do email
142:07 - dot split
142:09 - by at the rate and take the first
142:13 - element of the list basically what we
142:15 - are trying to do is if I get Revan
142:19 - ranawat the rate gmail.com
142:22 - I'm just going to split this email
142:26 - by at the rate so we'll get a list which
142:30 - which is something like this it will
142:33 - have rivandranavat at first
142:35 - and at the read gmail.com
142:39 - as the second element
142:42 - so after we get this list by doing split
142:45 - by at the rate
142:47 - we'll take the first element which is
142:49 - because that's the name of the user
142:52 - right
142:53 - so we get the first element and we
142:55 - return that so we get a string
142:59 - now I can just put your get name from
143:01 - email pass in the email followers in the
143:04 - initial part are going to be empty list
143:07 - even following is going to be empty less
143:09 - profile picture is going to be empty
143:15 - Banner pick is going to be empty
143:17 - uid
143:19 - is going to be empty because it doesn't
143:20 - really matter because you're not doing
143:23 - Dot 2 map uid we have removed two map
143:27 - uid property bio is also going to be
143:30 - empty and is Twitter blue false
143:32 - obviously when the user signs up why
143:33 - will we give them Twitter blue
143:36 - and of course we'll put both of them as
143:39 - constants
143:40 - now I can take this user model and pass
143:42 - it to user API dot save user data
143:47 - pass in the user model now let's see
143:49 - what we get we get future either and all
143:51 - of those stuff so I can just have final
143:53 - res is equal to await save user data but
143:58 - we're getting this error because this
143:59 - function is not asynchronous so make
144:02 - this function asynchronous
144:04 - we get result now we can again do
144:07 - result.fold but not to get confused with
144:10 - the previous result we can name this
144:12 - final result 2 and we can do result 2.4
144:18 - if it's a failure then we want to show a
144:21 - snack bar
144:22 - with l dot message and if it's a success
144:28 - we can copy this
144:31 - go to the right value and paste this end
144:35 - R doesn't return to us anything so we
144:37 - can mark this as underscore but
144:39 - basically what we did was created a user
144:41 - model
144:42 - so that we could store all of this data
144:44 - in the database then we can have user
144:48 - API dot save user data which saves it to
144:50 - upright and then we check if it's a
144:53 - failure if any error occurred if any
144:55 - error occurred show that in a snack bar
144:56 - otherwise we can just go to the login
145:00 - view and say that the account has been
145:01 - created try to log in
145:04 - easy now we can restart the entire app
145:07 - and it will work now this is the beauty
145:09 - of separating your code into separate
145:11 - layers
145:12 - you see we don't have to go to the view
145:15 - file at all we had all the work related
145:18 - to the database and user creation user
145:21 - model creation all of that was done
145:23 - between controller and repository we
145:25 - didn't even have to touch the UI file
145:28 - this is what makes the code more robust
145:31 - if you have a work in certain file you
145:34 - only do that in one file it doesn't
145:36 - affect other files at all now
145:39 - understanding this let's try to restart
145:42 - we are still on the home screen because
145:44 - you have put the logic like that and we
145:46 - don't have a sign out button as of now
145:48 - so
145:50 - let's try to ignore this logic as of now
145:52 - we'll put this back in but just so that
145:55 - we need signup view so that we can see
145:57 - the
145:58 - data is being stored or not we can
146:01 - create a user so I can just have test
146:03 - one two three at the rate gmail.com test
146:06 - one two three four click on done and you
146:09 - can see the current user is not
146:10 - authorized to perform the action now
146:13 - that's because we have to make some
146:14 - configurations in upright console as
146:17 - well
146:17 - in settings you have to go down and you
146:20 - see update permissions you have to add a
146:22 - role so that someone
146:24 - can create a user update a user or
146:27 - anything so I'll click on add a role any
146:29 - and anyone can create a user and I'll
146:33 - update that I'm not giving them read
146:34 - update or delete properties why is that
146:37 - because when the user is not a user you
146:40 - can see the role has all users all
146:43 - guests select users
146:45 - when the user is not really a user that
146:47 - means that the user has not logged in or
146:49 - signed up or anything
146:51 - they can just create a user so that you
146:54 - know we can put that in the document
146:57 - right now the user is a guest right now
147:01 - the user is anyone it's not really a
147:05 - user
147:07 - so he can create
147:10 - the user document but he cannot read
147:13 - update or delete that would be a wastage
147:15 - of calls they can just create
147:18 - so this allows us to restrict certain
147:21 - people from using certain features of
147:23 - our application
147:25 - now if I try to do done
147:27 - a user with same email already exists
147:32 - so we can have one two three four click
147:34 - on done and you can see invalid document
147:36 - structure a known attribute that means
147:39 - the role part is now completed we are
147:41 - getting a different error message and
147:42 - that's because in the attributes we need
147:45 - to add all the attributes a user can
147:47 - have that means all the properties a
147:50 - user document has so in the create
147:53 - attribute we have to pass in basically
147:55 - everything that's mentioned in the user
147:58 - model except uid
148:00 - so basically everything that's mentioned
148:03 - in Tuma
148:05 - so let's pass in and create those
148:06 - attributes so the first attribute is
148:08 - email which is of the type string the
148:11 - size you can mention which is the
148:12 - required field I'll just pass in 255 and
148:16 - put it as required
148:18 - so this is the email attribute now we
148:21 - need
148:23 - the name attribute so I'll pass in the
148:25 - name String 255 is the size I'll click
148:29 - on Create and I'll do that for all of
148:31 - the fields for example for followers I
148:33 - can pass in followers which will be an
148:36 - attribute type of string size will be
148:38 - 255 or you can just extend this because
148:41 - a user can have more than 255 followers
148:43 - let's just put thousand ten thousand
148:46 - anything I'll put thousand and I'll say
148:49 - that this is not required this is an
148:51 - array
148:53 - then click on create
148:56 - I create another attribute for following
148:58 - so I'll copy this
149:00 - paste it here
149:02 - click on string array create
149:06 - the next attribute is profile picture
149:08 - which is a string so I'll have string
149:11 - but this is not an array this is a
149:13 - required field so the size can be 255 or
149:16 - 1000 again because the URL can be long
149:21 - but since we are going to store the
149:23 - profile pic in apprite storage itself
149:25 - the link value will not exceed 255 so we
149:29 - can just put that
149:31 - then we need the banner picture as well
149:34 - so I'll pass it in string and require
149:38 - that's it
149:41 - then I have bio I'll pass in the bio
149:45 - which will be a string but the size can
149:47 - be a longer than 255. so we can put 1000
149:51 - as the value
149:53 - and last thing we have is Twitter blue
149:55 - so if it's Twitter blue the value is
149:58 - Boolean
149:59 - the default value
150:01 - it is a required value so we don't have
150:03 - to pass in a default value and then we
150:05 - can click on Create and now all the
150:07 - attributes are there all of the
150:09 - attributes need to be mentioned
150:11 - before you make the call to the database
150:15 - for the user's collection later on we'll
150:18 - have tweets and notifications collection
150:22 - even that time you'll have to manually
150:24 - add all of these attributes now this
150:26 - attribute feature is quite good because
150:29 - in case you roll out your app to certain
150:31 - users and later on you decide that you
150:34 - want to have more attributes in your
150:35 - application for example you are try to
150:38 - add one more field like a link attribute
150:40 - to the user so you can add link
150:42 - select string and just click on create
150:47 - and it will add it to the attributes now
150:49 - this is helpful because it will also add
150:52 - the link attribute to the already
150:53 - existing user documents this is an
150:56 - improvement over Firebase Firebase
150:58 - doesn't allow all of this
151:00 - Firebase gives us a merge property but
151:02 - it's very hidden in the docs many people
151:04 - don't know about it with this attributes
151:07 - feature it's quite good because it will
151:09 - add it to all the documents all the
151:11 - users present in your application
151:15 - so there's less possibility of your app
151:17 - breaking
151:19 - anyways now that we have done this done
151:21 - let's minimize this
151:23 - and click on done
151:26 - user with email exists so we can have
151:28 - one two three four five click on done
151:31 - account created so I'll just try to
151:33 - refresh and here it is test12345 and
151:37 - name is test12345
151:39 - this function which is
151:42 - present in the utils.dot get name from
151:44 - email works fine for us because it's
151:47 - given us the correct name
151:50 - so we have followers following profile
151:52 - pic Banner bio and if it's Twitter blue
151:55 - it gives us a check mark so we can set
151:56 - it to true or false
151:58 - pretty neat now I'll try to login from
152:01 - the same users account so we have test
152:03 - one two
152:04 - three four five at the rate gmail.com
152:07 - test12345 click on done
152:10 - Actually the password is just test one
152:12 - two three four
152:13 - and now I'll add this logic again
152:19 - restart the app and we are still on the
152:22 - home screen now our entire
152:24 - authentication process is completed
152:26 - of course let's just change this to
152:28 - Twitter clone now too late for this but
152:31 - let's change it and now what I want to
152:33 - do is run the same app on Android
152:35 - emulator I know many of you
152:38 - might be coming to this timestamp right
152:40 - now I'm just going to run Android
152:41 - emulator and show how to fix the problem
152:45 - you'll face while using Android emulator
152:48 - sorry to not do this before it just
152:50 - skipped out of my mind so let's do this
152:53 - I'll close this iOS emulator for now run
152:57 - the Android emulator
152:59 - and I'll see you when the app loads so
153:03 - our app has started on the Android
153:04 - emulator if you see here it tells you to
153:07 - upgrade the compile SDK version which is
153:09 - just a warning but might not work later
153:12 - on so you can go to build.gradle Android
153:14 - app
153:15 - in the compile SDK version you just have
153:18 - to change this to 33 and the error will
153:20 - go away
153:21 - now another thing is if we restart the
153:23 - app you can see upright exception null
153:27 - config connection refused and this error
153:30 - occurs because Android emulator doesn't
153:32 - know what localhost is so if you just go
153:35 - to Upright constants you can see it
153:38 - doesn't know that localhost is there and
153:40 - is unable to get resources from there
153:43 - so to fix that you can
153:45 - come here and change it to your IP
153:47 - address so you have to pass in your IP
153:49 - address like this so if your IP address
153:50 - is like
153:53 - 191.2.3.4 you know anything like that
153:55 - just put it here and it should work
153:58 - another solution is just to type in the
154:01 - command ADB reverse TCP colon 80 TCP
154:05 - colon 80 and after you press enter it
154:08 - should fix the error for you
154:10 - I'm more comfortable putting my IP
154:12 - address so I'm just going to put it here
154:14 - and see you
154:16 - after I put it and restart the app after
154:19 - you followed either of those steps let's
154:21 - restart the application
154:24 - and you can see apprite exception
154:26 - General unauthorized scope user rule
154:28 - guess missing scope account and now we
154:31 - are getting this error the reason for
154:32 - this error is basically if we go to the
154:36 - auth underscore API and see this
154:41 - here actually we don't need the catch so
154:43 - let's remove that and another thing that
154:45 - you might notice is when we do current
154:48 - user account we do need to put a weight
154:51 - earlier I said that you cannot put a
154:53 - weight and if it's it's fine if you
154:55 - don't put away but it's actually needed
154:57 - because you need to avoid it so that you
154:59 - get the account and then you want to
155:01 - return that account doing this and this
155:04 - is not the same thing so after you do
155:06 - this restart the app and here you can
155:09 - see this works fine now so if you got
155:11 - this error that was my mistake I said
155:13 - you cannot put this but you should put
155:15 - this anyways now that our app is working
155:18 - you know let's try and
155:21 - create a user so I'm just going to call
155:23 - this user number one at the rate
155:25 - gmail.com
155:27 - test1234 click on done account has been
155:30 - created so let's
155:32 - login so we have test one two three four
155:34 - again and click on done
155:37 - and now we are signed in everything
155:40 - seems to be working if I restart the app
155:42 - this works now so there were two changes
155:44 - to be made one is this one return a
155:47 - weight account dot get not just return
155:50 - account.get and other thing was app
155:52 - right constants either using the
155:54 - terminal ADB command I'll mention it in
155:57 - the description below or you can just
156:00 - use your IP address and put that in now
156:03 - that you have both of these things done
156:04 - and
156:06 - our app is working on Android and iOS
156:08 - I've expected the next thing we can do
156:11 - is design the home screen with bottom
156:14 - navigation bar down below a feed screen
156:17 - a search screen and the notification
156:20 - screen so let's get started with the
156:22 - bottom app bar
156:24 - and see what other things that are
156:25 - needed there so for this we will go to
156:28 - the lib folder and again in the home
156:31 - view we are going to create our
156:33 - scaffold now what all things are
156:35 - required we need an app bar and the app
156:38 - bar is going to be the same app bar that
156:40 - we have in UI constants so we are just
156:42 - going to use this and even before doing
156:45 - all of this there's one thing we have to
156:47 - convert all of this into a stateful
156:49 - widget so we have home view here
156:52 - now we need to return a scaffold here
156:56 - as well as take the route from home view
156:58 - consumer widget and put it in home view
157:00 - stateful widget
157:02 - now we can remove this we have done this
157:05 - because we need access to set State
157:07 - because we are going to have a bottom
157:10 - navigation barrier and whenever a icon
157:13 - on bottom navigation bar is clicked on
157:15 - we need to change the page that is being
157:18 - displayed
157:20 - so now again we are going to have final
157:22 - app bar is equal to
157:26 - UI constants dot app bar
157:30 - now we can take this app bar and put it
157:33 - right here
157:35 - next thing is a body but we'll figure
157:37 - out body later on but before that we
157:40 - need bottom navigation bar and bottom
157:42 - navigation bar is Cupertino bar
157:45 - now we have that you can also use
157:47 - Cupertino you can also use bottom
157:49 - navigation bar not just Cupertino tab
157:51 - bar
157:52 - I just prefer this style of Cupertino
157:55 - tab bar
157:56 - now I need items an item will be a list
158:00 - of bottom navigation bar item
158:03 - so I can just have bottom navigation bar
158:05 - item pass in the icon and icon is going
158:09 - to be SVG picture dot asset and pass in
158:13 - assets constants dot home fill icon
158:19 - correct now if I want to see this on the
158:22 - screen
158:23 - we are getting this error so let's
158:25 - restart the application
158:27 - and we are getting another error the
158:29 - reason for that is there are not two
158:31 - bottom navigation bar items which is the
158:33 - bare minimum so I can just put another
158:36 - one
158:37 - and this one is going to be search icon
158:39 - now I can save it and here we have it
158:42 - this looks good but there are many
158:44 - changes to be made for example
158:48 - the color of this bottom navigation bar
158:50 - item should change we can do that over
158:52 - here by having active color and active
158:55 - color but since these icons are a 3G
158:57 - picture asset we can pass that color
159:00 - here
159:00 - so we can have palette dot white color
159:04 - and the same thing can be passed in a
159:06 - way up
159:08 - now this looks good the third bottom
159:10 - navigation bar item that we need is
159:14 - notification icon so we have
159:16 - notification filled icon and we can pass
159:18 - that in
159:19 - okay
159:21 - now we also need to change the color of
159:23 - this so that it matches with our
159:24 - scaffold color so we can have background
159:27 - color AS Palette dot background color
159:30 - you can also change this in the theme of
159:32 - the application
159:34 - so you can go to the app Theme and add
159:36 - this
159:38 - it works either way and now this looks
159:40 - good
159:42 - now we want this toggle to happen and
159:44 - based on the toggle we want to show the
159:46 - icon so if we are on the search icon
159:49 - we don't want to show the home filled
159:52 - icon and notification field icon we want
159:54 - to show their outline the icon so to
159:57 - make that happen we are going to have
159:59 - int underscore page equal to 0 and this
160:03 - is going to contain the page index we
160:06 - are going to be on so I can copy this
160:08 - and pass this as the current index of
160:12 - the Cupertino tab bar
160:14 - and on tap I can have
160:17 - a function created which is void on
160:20 - tap on pay change let's call it that
160:25 - this will give us some index which will
160:27 - be the index the user clicked on and
160:30 - then we can set States so that the build
160:32 - function rebuilt and have underscore
160:34 - page equal to index
160:37 - now I'll take this and pass it in I can
160:40 - directly pass this in because
160:42 - the function signature that ontap
160:44 - requires function integer and parameters
160:47 - is exactly what void on page change is
160:50 - and now based on this page I want to
160:53 - show the item so if we are on page 0
160:57 - then I want to show filled icon
160:59 - otherwise I want to show assets
161:01 - constants dot home IO line icon the
161:05 - similar logic will go over here so if
161:07 - you are on page one then we want search
161:10 - icon otherwise it's normal search icon
161:13 - because search icon is not bolded but
161:16 - this logic will come over here as well
161:18 - fifth page is two
161:21 - we want notification field icon
161:22 - otherwise assets constant dot
161:25 - notification outline icon now we can
161:28 - paste this in and this works you see
161:31 - this this is an outline now if I click
161:33 - over here this is not this is outline
161:36 - not filled and this is also outline if I
161:39 - click over here this is filled and both
161:42 - of them are outlined so that means this
161:44 - is working now we want to display the
161:46 - appropriate
161:47 - body so in to display the appropriate
161:51 - body we are just going to have body
161:53 - and password index stack why are we
161:57 - using index stack instead of a page view
161:59 - or another widget like that that's
162:01 - because index stack helps us maintain
162:04 - the state so example if some tweets are
162:07 - shown here and we scroll down and then
162:09 - we decide to go to the search screen so
162:10 - that we can search something and come
162:13 - back this will not rebuild the entire
162:15 - widget this will keep its state
162:16 - maintained and will be
162:18 - on the same screen
162:21 - or the same tweet we were earlier
162:23 - watching so it maintains the state
162:26 - you'll see that in action when we get to
162:28 - that part I'll highlight it to you but
162:31 - for now this is what it does
162:35 - so now the index is the page and
162:37 - children we have to pass in a list of
162:41 - bottom top bar pages so I can go to the
162:43 - UI constant so that I can create this
162:45 - constant
162:47 - and create static
162:49 - widget actually list of widget
162:54 - and call this bottom
162:56 - tab bar pages and this will be equal to
163:01 - let's say the first one is a text widget
163:04 - and the text widget is going to say feed
163:07 - screen because we should see feed screen
163:09 - over here
163:11 - feed screen is basically a screen that
163:13 - shows us the latest tweets
163:15 - then the next screen is the search
163:17 - screen
163:20 - and the third one
163:23 - is the notification screen
163:27 - now I can come here and have UI
163:29 - constants dot bottom tab bar Pages
163:31 - restart the entire app and here we have
163:34 - it feed screen is showing up if I go
163:36 - here search and notification screen now
163:39 - the last thing we need on home View
163:41 - widget is a board
163:44 - a floating action button so we can have
163:46 - floating action button
163:50 - and in the on press right now we are
163:53 - having nothing but basically it will
163:55 - navigate us to the create wheat screen
163:57 - and in the child I'm going to have
163:59 - constant I can ikins dot add
164:04 - now if I do this much you can see we're
164:06 - getting this this blue color is because
164:09 - in the app Theme we have specified The
164:11 - Floating Action button theme to be
164:13 - palette dot blue color exactly like
164:15 - Twitter
164:16 - but we want the color to be changed so I
164:19 - can just pass in here the color AS
164:21 - Palette dot white color
164:24 - this looks good another thing that I
164:26 - need is its font size to be increased so
164:29 - I can increase its size by let's say 28
164:35 - and this looks good
164:37 - now what I want is whenever I click over
164:39 - here it should open a create tweet
164:42 - screen
164:43 - so I'm going to close the home feature
164:45 - as well
164:47 - create a new feature here called tweet
164:49 - and this is going to contain all the
164:51 - Tweet related features like create tweet
164:54 - screen
164:55 - tweet list which is basically the feed
164:58 - screen
164:58 - all the repository for all the
165:00 - controller files related to it and of
165:03 - course the repository or the API files
165:05 - are going to be mentioned here so coming
165:07 - back to the Tweet we want
165:09 - views and in the views we are going to
165:11 - have create
165:13 - tweet
165:14 - view dot dot
165:17 - so I'll import material Dot
165:20 - and then we are also going to import
165:21 - flutter riverpod package
165:27 - and after that we are going to use the
165:29 - stateful consumer widget and call create
165:32 - to eat screen
165:34 - this consumer stateful widget snippet is
165:37 - provided to us by Florida Riverport
165:39 - Snippets
165:40 - extension on vs code this is a stateful
165:43 - widget because
165:45 - we are going to have a text editing
165:47 - controller we are going to have the
165:49 - ability to share images so we need all
165:51 - of this
165:53 - so now let's start by designing this
165:55 - screen so we have scaffold and let's see
165:58 - how we want the create tweet view to
166:00 - look like
166:01 - so this is what we are trying to build
166:03 - we have a close button here
166:05 - we have our small rounded button here
166:09 - then we have this long text field and a
166:13 - bottom bar beneath also here we have
166:16 - some space for our profile picture which
166:18 - is right now empty but if there is no
166:21 - picture then you want to show some
166:23 - default picture
166:24 - so let's start designing it the first
166:26 - thing we need is an app bar and in the
166:28 - app bar
166:29 - the leading icon is icon button
166:33 - where onpressed is required
166:37 - and icon is required and icon is icons
166:40 - Dot
166:43 - close and the size should be bigger than
166:45 - normal so we'll pass in the size as 30.
166:48 - we're not really getting anything
166:49 - because we have to click on this and to
166:52 - go to the create tweet screen so first
166:54 - of all let's create a route for this so
166:56 - we can go to the home View
166:59 - copy this route line
167:02 - paste it over your
167:04 - and pass in create tweet screen you can
167:06 - also name this create tweet view
167:08 - whatever you like
167:11 - then in the home view you should have on
167:14 - create tweet
167:18 - so whenever the oncreate Tweet button is
167:20 - clicked so we just want to do Navigator
167:22 - dot push and we need to go to the create
167:26 - tweet screen dot route
167:29 - now we can copy this and paste it in the
167:32 - on press offloading action button
167:35 - let's restart the application and if we
167:37 - click over here we have the button
167:39 - showing up that's good now I need the
167:42 - Tweet button to show up so I'll just
167:44 - pass in the actions property to the app
167:46 - bar and I've rounded small button
167:50 - where on tap is going to be empty and
167:53 - label is going to be tweet
167:56 - I'll save it and you can see this button
167:58 - shows up but I want the color to be blue
168:01 - and the font to be white so to do that
168:04 - I'm going to have background color
168:06 - property which is not a required field
168:08 - remember
168:10 - and then we can pass in palette dot blue
168:12 - color if we save this much it looks good
168:15 - now we just need to change the font
168:17 - color so the font color or the text
168:20 - color is palette dot white color
168:25 - and there we have it looks good
168:27 - now in the body let's get out of the app
168:30 - bar and in the body we are going to have
168:32 - safe area widget
168:34 - and then pass in a child the child is
168:36 - going to be single child scroll View
168:39 - and in that we'll pass in a child of
168:42 - column path in children and the first
168:45 - child that I want is
168:48 - a row
168:51 - to make you understand why we need
168:52 - column is basically we add this
168:59 - entire thing
169:00 - so this is in a row format the profile
169:03 - picture and the text field but this line
169:06 - is also included right this line is
169:09 - below this row that's why we need a
169:11 - column so that we can paste this divider
169:14 - in but even before that we need a row
169:17 - so we'll pass in a row as
169:19 - children
169:22 - and the first child is circle Avatar
169:25 - we'll pass in the background image and
169:27 - background image will be Network image
169:30 - and network image the image that we want
169:32 - to show here is basically the user's own
169:34 - profile picture
169:35 - so to get that we have already created a
169:38 - provider for that which is final user
169:41 - which is equal to ref.watch now to get
169:44 - the user data we'll have to go to the
169:46 - user API and create a new function for
169:49 - it so we'll go to the user API and
169:52 - create
169:53 - a function called future document now we
169:56 - have called this future document not
169:59 - future either document is because we are
170:01 - going to use this in the future provider
170:03 - so that it becomes easier for us to get
170:05 - and
170:08 - display the data so we can have get user
170:11 - data
170:13 - and then pass in the uid so we need the
170:16 - uid of the user and based on that we can
170:19 - get the user data this get user data
170:21 - data is basically the data that's stored
170:25 - over here in the database it's not the
170:27 - authentication data we have already
170:30 - created a provider for that which is get
170:32 - user account data
170:35 - provider or something like that now we
170:38 - need to get the database data
170:40 - right so now let's import
170:44 - document so for document
170:47 - we are going to have model dot document
170:51 - and we'll import
170:53 - app right with models.dot
170:59 - and obviously import this as model
171:02 - so we have modeled our document now I
171:04 - can create one missing override I can
171:06 - copy this function for the try and catch
171:08 - block
171:09 - actually we don't need the try and catch
171:11 - block future provider will do that for
171:13 - us
171:15 - in case of any error it will give that
171:17 - to us so now I just want to return DB
171:21 - dot get document
171:23 - we need to get one particular document
171:25 - right to get one particular document we
171:29 - have to pass in the document ID
171:32 - and we are very sure that this user is
171:34 - only going to have one document because
171:35 - they have a particular uid and this uid
171:39 - is automatically generated and is only
171:41 - present once in the upright dashboard so
171:44 - I can just pass that in as the document
171:46 - ID confidently and for the database ID
171:49 - we have upright constants dot database
171:51 - ID and collection IDs upright constants
171:54 - Dot
171:56 - users collection
171:59 - so it will give us the document
172:02 - you can see that document
172:04 - and it has the correct collection ID and
172:07 - the document ID which is the uid of the
172:09 - user now I can go to the
172:12 - auth controller because that's where we
172:14 - are going to need it later on
172:17 - and we are going to create a function
172:19 - called future user model
172:22 - so whatever data we get here
172:25 - the get user data function it's going to
172:28 - return a document now we need to convert
172:30 - this document in the form of a user
172:33 - model I said all the model conversions
172:35 - should take place in the controller not
172:37 - in the user API
172:38 - so that's why we are creating this
172:40 - function over here and we have get user
172:43 - data
172:45 - string uid async
172:49 - and your final document is equal to
172:52 - await underscore user API dot get user
172:55 - data and we'll pass in the uid we are
172:57 - basically calling this get user data
172:59 - function that was defined in the user
173:01 - API class
173:02 - now we can just have final updated user
173:06 - is equal to user model
173:08 - Dot from map
173:11 - and pass in document but this is
173:13 - document I want it in the form of a map
173:15 - right so I can just see if it has
173:17 - anything and yep there's data
173:20 - so you can just have dot data passed in
173:24 - which is in the map format and it will
173:26 - give you the output now I can just
173:29 - return this updated user
173:33 - again we've not put try catch here
173:35 - because now we are going to use this in
173:37 - the future provider so we are going to
173:39 - have future provider
173:41 - user details provider
173:47 - it's not going to be asynchronous it's
173:49 - just going to have auth controller
173:54 - and then we are going to return auth
173:55 - controller Dot
173:58 - get user data now
174:01 - to get data
174:04 - we don't know what is the uid of the
174:06 - user right now
174:08 - because this is just user details
174:10 - provider not current user data is
174:12 - provider basically this future provider
174:14 - will be used even in future when we want
174:17 - to view the user's profile suppose that
174:20 - some other user I'm user number a
174:23 - there's user number B showing up when we
174:25 - search up the user or we click on the
174:27 - profile of a user when the Tweet is
174:29 - shown we want to be able to see their
174:31 - profile right this is when getuser data
174:34 - is going to help us this is a reusable
174:36 - provider so I want the uid to come from
174:40 - the UI file
174:42 - so to do that I'm just going to have dot
174:45 - family after this future provider and
174:48 - now I can have string uid taken from
174:51 - here
174:52 - now whenever I call this user details
174:54 - provider I need to pass in this uid like
174:58 - a function I'll show you a demo right
175:00 - now we are going to create another
175:01 - future provider called current
175:05 - user details provider this is for the
175:08 - current user this is the provider we are
175:10 - looking for in the create tweet view
175:12 - this
175:14 - provider is going to be used inside of
175:17 - this provider
175:18 - so now I can I'll not have family over
175:21 - here I'll just remove the async call
175:23 - I'll have
175:25 - final user details
175:29 - which is equal to ref dot watch
175:32 - current user details provider I'll pass
175:35 - in the uid and to get the uid of the
175:37 - user not current user sorry we want user
175:40 - details provider don't get confused
175:43 - and here you can see it looks for a
175:46 - uid
175:48 - and we need to treat this as a function
175:51 - when we use family
175:52 - now I want to get the current user's uid
175:54 - to get that
175:56 - we can do final current user ID is equal
176:00 - to ref.watch current user account
176:04 - provider which is
176:07 - this account as I said this account only
176:10 - exposes one useful API for us which is
176:12 - the uid so we can access that by doing
176:16 - Dot as data now we have to do all of
176:19 - this because this is of the type future
176:21 - provider when we hover over this this is
176:24 - giving us async value of account
176:26 - so to remove async value from us and get
176:29 - the value of account
176:31 - we need to do dot value
176:34 - and this cannot be null because it's a
176:36 - current user ID it cannot be null
176:39 - Dot
176:40 - ID which is dollar ID and that's why in
176:44 - our user model if you see we had passed
176:46 - in this because dollar ID is basically
176:50 - what the value of this account is dollar
176:52 - ID now I can pass this current user ID
176:55 - over here and return
176:58 - user details dot value
177:01 - now we'll go to the create tweet View
177:03 - and in the build function we are going
177:05 - to have current user which is equal to
177:08 - ref dot watch
177:11 - current user details provider
177:14 - dot value
177:17 - again we cannot do just this much
177:19 - because current user is again async
177:21 - value because current user details
177:23 - provider is also a future provider and
177:25 - we just now saw how to handle the value
177:27 - of a future provider which was the
177:30 - current user account provider
177:32 - this might get a bit tricky so try to
177:34 - understand the code and move forward
177:37 - or you can just
177:39 - rewind the video and watch it again
177:41 - so now that we have current user with us
177:44 - we can get its value and then check if
177:48 - the current user is null or not so if
177:51 - the current user is null
177:53 - then we want to show a loader so we'll
177:55 - have constant loader otherwise the safe
177:58 - area widget
177:59 - and your background image is going to be
178:02 - current user Dot
178:06 - profile pack and now we're getting this
178:09 - loading indicator the reason for this
178:11 - loading indicator is because we have
178:12 - made a big bug in our application that's
178:15 - because if we go back to our
178:18 - auth controller you'll see that the uid
178:22 - is empty I told you that uid is not
178:24 - being used in two map but when we try to
178:27 - save the user data the ID should not be
178:29 - unique it should be the same as the
178:32 - account ID
178:33 - so right now if you see I tried to print
178:36 - the current uid of the user account and
178:39 - the same account
178:41 - in the database is having a different ID
178:44 - they both shouldn't have the different
178:46 - ID the reason for that quite simple
178:49 - because when we try to retrieve the user
178:52 - ID we are passing in the account ID
178:55 - that's the only account
178:56 - ID that we have access to we have
178:58 - nothing else to get data and that's why
179:01 - both of them should not be different so
179:04 - to correct the changes what I'm going to
179:07 - do is in the uid I'm going to pass R
179:11 - which is account dot ID
179:14 - and then in the save user data function
179:17 - the document ID is not going to be
179:19 - anything unique it's going to be user
179:21 - model Dot uid
179:24 - so that was a mistake I made
179:26 - now I'm going to erase everything all
179:29 - the data from the database and even the
179:33 - auth console so that we can have a fresh
179:35 - start and see if you're not making any
179:37 - other errors or not I'll see you when I
179:40 - stop finishing the delete process
179:43 - so I've deleted everything now let's try
179:45 - to sign up the user so we have test at
179:47 - the rate gmail.com I can reuse this
179:49 - because we don't have any user now and
179:52 - then test one two three four the user
179:54 - has been created test one two three four
179:56 - at the gmail.com test one two three four
180:02 - done
180:03 - I put in the valid invalid I just have
180:06 - to get done and here we are now I'll
180:09 - just restart the app
180:10 - go to the screen
180:12 - and there is no error
180:16 - except this so that means everything
180:18 - else is working fine now I'll explain
180:21 - this error to you but before that let me
180:24 - just remove the print statement that I
180:26 - had put for my own debugging if you want
180:28 - to make sure you can check that the
180:32 - ID in the users collection right now and
180:35 - the ID in the app right auth console is
180:38 - the exact same thing
180:40 - please do not forget that and now
180:43 - talking about this error we got this
180:45 - error because
180:46 - our Banner pick is empty and still we
180:49 - are trying to show that so it's not able
180:51 - to show an empty URL image right
180:55 - so to fix that what I'm going to do is
180:57 - temporarily just add a profile pic over
181:00 - here by searching for one over here so
181:02 - I've copied an image address I pasted it
181:04 - away or clicked on update and now if I
181:07 - try to refresh the application go back
181:10 - to the create tweet screen our image now
181:12 - shows up that's pretty good now after
181:15 - resolving all of these bugs which I
181:17 - apologize for if it's not clear why we
181:20 - did what we did please let me know in
181:22 - the comment section it's an important
181:24 - concept now in the circle Avatar I'm
181:26 - just going to put a radius and the
181:28 - radius is going to be 30.
181:31 - so here we have this image now I'm going
181:34 - to leave some space
181:36 - so size box but this time a width of
181:39 - let's say
181:40 - 15.
181:42 - and then we are going to have a text
181:44 - field and in that text field I want to
181:47 - pass in a controller which is going to
181:49 - be tweet controller so we have final
181:52 - tweet text controller we are naming this
181:57 - tweet text controller not tweet
181:58 - controller because tweet controller is
182:01 - going to be the name of the controller
182:03 - we create for Twitter tweet text
182:05 - controller is the text editing
182:08 - controller now I can take this dispose
182:12 - It Off
182:14 - and pass that tweet text controller over
182:17 - here
182:19 - now I want the style so we have constant
182:22 - textile
182:24 - of font size
182:26 - 22
182:31 - and decoration of constant
182:34 - input decoration
182:37 - where we mentioned hint text which is
182:40 - Watts
182:42 - happening
182:46 - right
182:48 - now we are not able to see the text so
182:50 - what I'm going to do is pass in a hint
182:52 - style and the hint style is going to be
182:55 - textile with a color of palette dot gray
183:00 - color
183:01 - and we weren't able to see it in fact
183:04 - because the text field and circle Avatar
183:07 - are in a row and text field has a
183:09 - tendency of occupying all the maximum
183:12 - width it can get but since it's in a row
183:14 - and circle Avatar is also there it's not
183:17 - getting the maximum space therefore we
183:19 - are getting this error so to resolve
183:22 - this I can just wrap this widget with an
183:25 - expanded widget
183:27 - after I do this you can see we are
183:29 - getting this
183:30 - expanded gives us the maximum available
183:33 - space in the screen
183:36 - so expanded get gets all the remaining
183:39 - space
183:41 - now I also want to increase the font
183:44 - size to let's say 22
183:46 - and the font weight so that it looks a
183:48 - bit bolded as font weight dot w
183:51 - 600
183:54 - and this is looking good now the last
183:56 - thing I want to do is basically give it
184:00 - n number of lines
184:02 - and also remove this border so to remove
184:06 - the Border this is going to be quite
184:07 - simple border is input border dot none
184:12 - we don't want any border
184:14 - and then we want Max lines to be null
184:18 - because if we don't do this you can see
184:20 - I'll try to type I'll try to type and it
184:23 - keeps on moving in the horizontal
184:25 - Direction when I overflow this line
184:29 - basically I want to go to the next line
184:30 - so to do that I'm going to pass Max
184:33 - lines
184:34 - which is outside this decoration Max
184:36 - lines as null once we pass in null it
184:40 - gets unlimited lines so if I try to do
184:42 - anything you can see I have n number of
184:45 - lines
184:46 - so this is it now at last what I want is
184:49 - a divider to be there
184:51 - so that I can start showing my bottom
184:54 - navigation bar which contains a list of
184:56 - icons so if you want to add image you
184:58 - can add image Emoji Emoji gifgf so in
185:01 - the bottom navigation bar we are going
185:04 - to have bottom navigation bar and this
185:06 - is not necessarily going to be a bottom
185:08 - navigation bar in fact it's going to be
185:11 - a row where we'll pass in the children
185:14 - the first child
185:16 - is
185:17 - SVG picture Dot
185:20 - asset and I'll pass in assets constants
185:25 - dot gallery icon and now if you see over
185:28 - here there is an icon
185:30 - we can see that but there is one problem
185:33 - and that's
185:35 - because we haven't added any padding so
185:38 - to add a padding we are going to wrap
185:39 - this with a padding widget
185:42 - so that it has eight now this looks good
185:45 - but other thing that I want is this to
185:49 - be padded from the left and right
185:51 - direction so I want it to be
185:54 - having
185:55 - padding of eight from all the sides and
185:58 - copy with I want left
186:00 - padding 15 and right padding 50.
186:05 - so from all the sides it's 8 except left
186:07 - and right left and right is 15. so we
186:10 - have the icon showing up here and we
186:12 - want left and right because we are going
186:15 - to have other two icons which are also
186:17 - going to be left and right 15.
186:19 - so that's going to be GIF icon
186:22 - and there's going to be emoji icon all
186:25 - of this mentioned in assets constant and
186:27 - here there is
186:28 - look great but now what I want is a line
186:32 - to be present over here so to put a line
186:34 - I can do two things I can pass in the
186:36 - column a divider right here but other
186:40 - thing I can do is wrap this row with a
186:43 - widget known as container and this
186:45 - container will give us
186:49 - decoration of constant box decoration
186:55 - border and Border should be border from
186:59 - the top as Border Side and pass in the
187:02 - color which is palette dot gray color
187:07 - and now if we see here is the Border but
187:09 - it's quite thick so I want it to reduce
187:11 - the width so it will be 0.3
187:14 - and this looks decent enough
187:17 - last thing I want is it to have a margin
187:21 - from below so what I can do is add a
187:24 - padding property of constant Edge in
187:26 - such Dot
187:28 - only from bottom 10. now save it and
187:33 - here we have it the icons are raised
187:35 - from the Bottom by 10. now all of them
187:38 - are visible
187:39 - the next thing is now whenever I click
187:42 - on this this should pop off the screen
187:44 - should pop off and whenever I click over
187:46 - here I should get the ability to add
187:48 - images so now what I can do is just have
187:53 - navigator.pop so that it pops off the
187:56 - screen and goes to the
187:57 - home screen so if I click over here I'm
188:00 - back to the home screen if I come back
188:02 - you're back over here now whenever I
188:05 - click over here I want to pick images so
188:07 - to do that we are going to add a plugin
188:08 - known as image picker and then it will
188:12 - give us a list of images we can select
188:14 - from and we will get the images over
188:16 - here
188:17 - displaying in the form of Carousel and
188:20 - then we should be able to tweet that so
188:23 - this is the plugin we'll be using for
188:24 - image picking image picker plugins I'll
188:27 - just add that dependency and another
188:30 - dependency that we need is Carousel
188:32 - slider I'll install both of them
188:34 - together
188:35 - basically Carousel slider will help us
188:38 - with displaying the images in a carousel
188:40 - format
188:42 - and image picker as the name suggests is
188:44 - in image picking
188:46 - now there are certain installation steps
188:49 - to be required for iOS if you're on
188:51 - Android you can skip through this part
188:53 - for iOS what we need to do is add this
188:57 - key to n4.pls files so let's go to iOS
188:59 - slash Runner and add the info dot PLS
189:03 - and add this key sorry
189:05 - so there are two keys NS photo library
189:07 - usage description
189:10 - and NS camera usage description
189:13 - you can also add the third key which is
189:16 - the NS microphone but you won't be
189:18 - needing this because this isn't related
189:21 - to camera
189:23 - this is for video recording
189:26 - and you also need to mention the
189:28 - description of this but since I'm not
189:30 - uploading this to App Store I don't want
189:32 - to waste time writing something and
189:34 - making something up but if you're
189:35 - deploying on place app store it's very
189:38 - important otherwise your app will get
189:40 - rejected anyways coming back to this I
189:43 - think the whole process of installation
189:44 - is done I can restart it on Android
189:48 - nothing else is required the compile SDK
189:51 - version should be 33 and we've already
189:52 - changed that to version 33. and while
189:55 - that is happening let's go to utils.dot
189:57 - we'll close all the other files and here
190:00 - we are going to create a function for
190:03 - future list file so that we can pick an
190:06 - image so we have pick images function we
190:10 - are also going to create a separate
190:11 - function for picking one single image
190:13 - and this will be required when we'll be
190:16 - using
190:17 - profile picture and banner image we just
190:20 - want one image that time but right now
190:22 - we can pick multiple images
190:24 - so you'll get a knowledge of having both
190:26 - you can either pick one single image or
190:28 - multiple images
190:31 - now here to pick multiple images what we
190:33 - need is a list of file we'll call this
190:36 - images and will be an empty list for now
190:39 - and then we'll instantiate the image
190:41 - picker plugin
190:44 - which is equal to image pickup
190:49 - now I'll take this picker
190:51 - pick images and you can see we have
190:54 - option to pick image and pick Multi
190:55 - Image we're going to go ahead with pick
190:57 - Multi Image and save this to a final
191:01 - variable called image files
191:06 - and now we'll check if image files is
191:09 - not equal to null and it's never equal
191:12 - to null so you want to check if image
191:14 - files
191:15 - dot is not
191:18 - and actually we need to await this
191:20 - before we can do anything else and now
191:22 - we want to check if image files is not
191:24 - empty then what we need to do is for
191:28 - final image in image files
191:33 - so we are running a foreign Loop
191:35 - basically we'll go through the image
191:37 - files and we'll get
191:40 - an element from this list called image
191:44 - and we'll add that to our images list
191:48 - that we created over here so we can have
191:50 - images dot add
191:52 - file
191:55 - image dot path
191:58 - so this is in an X-File format we
192:00 - basically get its path convert it into a
192:03 - file and add it to the images and now we
192:06 - can just return this images
192:08 - so this is the entire pick images
192:10 - function now I'm going to go ahead and
192:13 - bind this to our create tweet screen
192:16 - so I'll scroll down and find a bottom
192:19 - navigation bar item the gallery icon I'm
192:22 - just going to wrap the SVG picture with
192:24 - a gesture detector so we have gesture
192:28 - detector and we'll pass in the on Tab
192:32 - and just to mention this gesture
192:34 - detector is wrapped over here instead of
192:36 - the padding because if we wrap it over
192:39 - the padding
192:41 - whenever we
192:43 - click over here not on the icon over
192:46 - here it will still get selected I don't
192:48 - want that I only want it to get selected
192:50 - when I click on this
192:52 - icon
192:53 - that's why I've wrapped it around SVG
192:56 - picture not the padding
192:58 - and now on the top I'm just going to
192:59 - create an image of function for it so we
193:03 - have void
193:05 - on pick images
193:09 - and here we are going to call our pick
193:11 - images function from util.dot file
193:15 - this is going to be asynchronous we'll
193:17 - await this and then we are going to have
193:21 - a global variable basically we want to
193:25 - be able to show these images live on the
193:27 - screen to show them on the screen we are
193:29 - going to have list of file
193:31 - images which is equal to an empty list
193:34 - and now I want to import dot IO and now
193:39 - what I want to do is set images equal to
193:42 - await this and set state
193:45 - I'm not doing such State you know like
193:48 - this because I'll have to make such
193:50 - State asynchronous function instead of
193:52 - doing that I'm just
193:54 - doing this above such State and then
193:57 - calling such state so that the build
193:58 - function rebuilds
194:00 - and then I'll be able to show an image
194:03 - so to show an image actually let's just
194:05 - link this on pick images function right
194:09 - here
194:11 - and see if we are able to
194:14 - select images so if I click over here
194:16 - select photos
194:19 - I'll select this image this image and
194:21 - this image click on done
194:25 - and I think it should show up so
194:29 - now what I want to do is if the image
194:31 - list is not empty initially it's empty
194:34 - if the user doesn't select anything it's
194:36 - empty if it's not empty then I want to
194:38 - display the carousel over here that's
194:41 - why we have added the carousel as well
194:43 - so now what I want to do is in the
194:45 - column we are going to have if images
194:51 - dot is not empty so the image is not
194:54 - empty I want Carousel slider to be
194:56 - present
194:57 - and what are the items of this Corrado
194:59 - carousel
195:01 - images
195:02 - right but this items requires a list of
195:05 - widgets so we need to map this
195:08 - why do we have a mapping image because
195:10 - the items are based on images and we
195:14 - will map each image so that we can
195:16 - return a network image
195:19 - not really a network image image dot
195:22 - file
195:25 - the reason for that is
195:29 - here we have selected images from our
195:31 - memory
195:33 - created that in the file format and now
195:36 - we want to display them in the file
195:37 - format so now instead of e we can name
195:40 - this file and pass in file to this over
195:43 - here
195:44 - and so that the error goes away we can
195:47 - convert this to a list
195:49 - next thing I need is options and option
195:51 - is going to be carousel options
195:56 - height 400
196:00 - and enable infinite scroll false so you
196:03 - cannot continuously keep scrolling and
196:06 - finitely like even if the last image
196:08 - gets over the first image will show up
196:10 - after that we don't want that if this is
196:12 - the last image we won't be able to
196:14 - scroll further
196:15 - so we have image.file returned but there
196:18 - are some modifications to be made so
196:20 - let's convert this in a block
196:24 - and we'll return image.file from here
196:27 - and have this now let's just see what we
196:30 - have till now so I'll just select an
196:31 - image
196:33 - here we have a list of images they look
196:36 - good but there are certain modifications
196:37 - to be made for example
196:40 - we want them to occupy the entire screen
196:42 - with we want them to have a margin from
196:45 - the side so we can wrap this with a
196:49 - container Widget the width will be
196:53 - media query dot of context dot size dot
196:57 - with media query
197:00 - width is basically the entire screen
197:02 - width and then we need the margin and
197:05 - the margin is constant Edge insets dot
197:08 - symmetric
197:10 - horizontal 5.
197:14 - so we are having a margin of 5 from left
197:17 - and the right side so that the images
197:19 - don't stick together and this looks
197:21 - pretty neat so we have the Carousel and
197:24 - this looks good
197:26 - we are not going to add any more thing
197:28 - over here this can be more beautified
197:31 - later on but you can do that by yourself
197:33 - the main point now is whenever we click
197:36 - on the Tweet option we should be able to
197:37 - tweet
197:38 - depending on if the image is present not
197:43 - present if the text is present not
197:45 - present anything so to do that we'll
197:48 - have to do multiple things let's close
197:50 - all of the features here in the Tweet
197:52 - we'll need a controller which will be
197:55 - tweet controller.dot
197:59 - and even here we'll need something like
198:01 - a tweet API but first let's figure out
198:03 - how the Tweet controller will work
198:06 - I'll explain it to you how the Tweet
198:08 - controller will work we'll write the
198:09 - boilerplate code for tweet controller
198:11 - and then we'll get to the Tweet API
198:13 - which is a very simple function but we
198:15 - have to write all the boilerplate code
198:17 - over there as well so let's get into it
198:20 - so let's create the basic state Notifier
198:23 - and state Notifier provider so we have
198:25 - state Notifier so this creates the whole
198:28 - code for us now we can just type tweet
198:31 - controller remove the nodifier from here
198:34 - so let's remove this and we have state
198:37 - node file now what is the type going to
198:40 - be well it's going to be Boolean again
198:42 - nothing different
198:43 - and this is going to be false we have a
198:45 - lot to import over here but we'll import
198:47 - that later
198:49 - now what I want to show over here is
198:51 - basically what are the functions that we
198:54 - are going to have over here
198:55 - now the first function we are going to
198:57 - have is share tweet function pretty
199:00 - simple and you might think that this is
199:02 - the only function that's required but no
199:04 - controller is doing the heavy lifting
199:06 - here
199:07 - tweet API is also going to have just one
199:10 - function the shared tweet function it's
199:12 - just going to receive a tweet model that
199:14 - we are going to create in function
199:18 - and based on that it will be able to
199:20 - convert it to map and upload it to
199:23 - Upright that's all uh tweet API will do
199:27 - but in our case the Tweet controller is
199:30 - going to do a lot of tasks first it has
199:32 - to determine whether the Tweet has an
199:35 - image
199:37 - or it's just text and it will also
199:39 - determine other things like hashtags
199:41 - link so that we can display them
199:44 - appropriately
199:45 - so this is a share tweet function it's
199:47 - going to require many things so let's
199:50 - require them first thing that's required
199:52 - is a list of file of images
199:54 - we will check here if the images are
199:57 - empty if the image is empty that means
199:59 - we are sharing only a text based tweet
200:02 - otherwise it's an image based to it so
200:05 - we are also going to require text
200:07 - is always needed
200:10 - we also require build context so that if
200:13 - K is of any error we can just display
200:15 - them we also need I think for now this
200:19 - is all that's needed when we come to the
200:21 - reply section we are going to need much
200:24 - more than this
200:25 - now inside of this as I said we are
200:27 - going to have some functions for example
200:30 - first we have to check if text is empty
200:33 - so if text is empty we'll not be able to
200:35 - move forward we can just say show snack
200:38 - bar
200:39 - please enter text so the user should be
200:42 - able to enter text
200:43 - and then we'll return from the function
200:45 - then we'll check if images
200:49 - dot is not empty so the images file or
200:54 - the images list is not empty then we
200:57 - want to share a function
200:59 - or we want to create a function called
201:01 - share image tweet
201:06 - and here we are again going to require
201:07 - many things so let's just copy these two
201:12 - paste it in your
201:14 - and when we come to the reply section
201:15 - again we need many stuff I also forgot
201:18 - the build context so let's put build
201:20 - context here
201:22 - and then we can call share image tweet
201:26 - and we'll pass in images text and build
201:28 - context now if the image is not empty or
201:32 - the images dot is not empty is false
201:35 - that means that the image is empty then
201:38 - we want to share a text based tweet so
201:41 - we can just create another function
201:42 - called share
201:44 - text tweet
201:48 - and we can paste that in similar to the
201:51 - share image to it so we have shared text
201:54 - to it but this time we will not have
201:56 - images here because it's a text waste
201:59 - tweet why do we need images
202:00 - now notice that we have made both of
202:03 - these functions private this is because
202:04 - they shouldn't be used outside of the
202:07 - controller
202:08 - only share tweet should be pushed
202:11 - outside of the controller that's because
202:13 - we want to do heavy lifting and
202:15 - controller we don't want to expose all
202:17 - of this logic like share image to it is
202:19 - if images is not empty if image is empty
202:22 - all of that we don't want in the UI file
202:24 - let the UI file be clean we want the
202:27 - controller to be present and controller
202:29 - can do all the weird tasks that are
202:32 - there right now either it is
202:37 - image tweet or text-based tweet we want
202:40 - two things to happen we want to get
202:42 - hashtags from a text and we want to get
202:44 - links from a text
202:46 - so we'll create the functions right now
202:48 - so we have the first function which is
202:50 - string
202:52 - get link from
202:55 - text
202:58 - so we have a text over here and we want
203:00 - to get link based on it so now first of
203:04 - all we are going to get
203:06 - the words in the sentences so we have
203:08 - list of string words in sentence
203:13 - which is equal to text Dot split
203:17 - so we are finding the words and putting
203:20 - them in a list format so suppose
203:23 - the sentence is
203:27 - YouTube
203:28 - okay
203:31 - so it will convert this in a list format
203:33 - like this Revan
203:35 - of course with a string like a
203:38 - inverted comma like this but just for
203:40 - demonstration rewind on our YouTube
203:44 - okay so we have this inverse in
203:47 - sentences now what I want to do is check
203:50 - that if each word
203:54 - starts with https or www dot so I'll
203:59 - just do four
204:01 - just like we did earlier string word in
204:04 - words and sentences
204:06 - and then check if word
204:09 - dot starts with https colon slash slash
204:13 - or word dot starts with
204:17 - www dot then it's a link
204:22 - right so none of these are links but if
204:26 - I add h w w
204:29 - www.youtube.com
204:37 - it identifies it because we got this
204:40 - word
204:41 - in the list
204:42 - it looped through it and checked yeah it
204:45 - starts with www dot correct
204:48 - so now we can just say link is equal to
204:51 - word and where is the link well I can
204:54 - just create a link variable right yeah
204:58 - and then we can return the link
205:02 - so this is the get link from text and
205:04 - this is also private because they
205:05 - shouldn't be outside the Tweet
205:07 - controller
205:08 - we'll use this function inside share
205:10 - image tweet and share text to it now
205:12 - other thing that we need is getting
205:14 - hashtag and this is going to have a
205:16 - similar logic like get link so we can
205:18 - just have get hashtags from text then we
205:22 - are going to have a string text and then
205:25 - we are going to have similar logic so
205:27 - I'll just copy paste this but instead of
205:29 - string this is going to be list of
205:31 - strings hashtags which is equal to an
205:35 - empty list as of now
205:37 - now we get the words in sentences and
205:40 - then we just check if the word starts
205:43 - with a hashtag so if the word starts
205:45 - with hashtag we are just going to have
205:47 - hashtags dot add
205:51 - word
205:53 - and then we are going to return hashtags
205:56 - so let me give you an example so if I
205:59 - have
206:00 - something like this but this time we
206:02 - have rewind
206:05 - as well now this is in our list format
206:08 - okay now we Loop through it and then
206:10 - check does the word start with hashtag
206:13 - yes
206:13 - we'll add it to hashtags
206:16 - have yup it has let's add it YouTube has
206:20 - nope www dot has nope so we are just
206:24 - going to have two hashtag words so they
206:26 - are in the list right now and we will
206:27 - return the list
206:29 - and this is also a private function
206:30 - shouldn't be outside the controller
206:33 - great now after having both of these
206:35 - things done let's create a tweet model
206:37 - so we have tweet underscore model
206:42 - dot dot and now we are going to create
206:45 - this tweet model
206:46 - and then we can jump into this function
206:49 - and call all of this and interact with
206:51 - the Tweet API so now we can have class
206:54 - tweet
206:55 - and let's decide what all properties
206:57 - should be there final string text final
207:01 - list of string hashtags
207:06 - final string link
207:09 - final list of string
207:13 - image IDs this image IDs are not image
207:17 - IDs they are image links sorry these
207:19 - image links will basically be the links
207:21 - that we receive after storing our images
207:24 - in the storage facility of app right
207:28 - basically in this section storage
207:31 - so we get a file over here we take all
207:34 - of these files uploaded to storage get
207:36 - their URL and then we upload it in our
207:40 - tweet model and based on this tweet we
207:43 - can check if it's empty if it's not
207:44 - empty then we can display them on the
207:46 - feed screen when we have to display the
207:48 - Tweet then we have final string user ID
207:51 - so the person who created the tweet and
207:54 - then we also need the Tweet type so we
207:57 - can go in the core
207:58 - create a new folder called enums
208:03 - and in your create a first enum which is
208:07 - tweet
208:08 - type
208:09 - enum dot dot this enum will basically
208:12 - help us decide which tweet to be used
208:15 - right I mean which tweet type it is so
208:18 - that we can
208:19 - easily display the Tweet onto the screen
208:22 - so it can either be text so we have text
208:28 - or we have image so we have image here
208:33 - and then we are going to have final
208:35 - string type constant tweet type
208:39 - this Dot
208:41 - type so here we basically have tweet
208:44 - type
208:49 - tweet type
208:51 - right
208:52 - so it can either be text image and if
208:54 - you later on decide to add some more
208:57 - options like GIF sharing and just emojis
209:01 - or whatever you can add them then we
209:04 - also need final
209:07 - date Time created at
209:10 - so what time the Tweet was created
209:14 - or we can just name this tweeted at
209:17 - then we need a final list of string of
209:21 - likes
209:22 - then we need a final list of string of
209:24 - comment IDs so whoever comments on this
209:27 - tweet their IDs a final string
209:31 - ID so this is the ID of the Tweet not
209:35 - the ID of the user the user ID is this
209:38 - so the basically the user who tweets
209:41 - this will have this uid and ID is
209:44 - basically the Tweet ID
209:46 - and this is final and reshare count we
209:49 - don't want to keep track of who we
209:50 - shared it and stuff we just want to keep
209:52 - a track of number of how many people
209:55 - have re-shared it
209:58 - then we have other things needed when we
210:01 - get to the replying part but let's just
210:03 - ignore it for now now we can generate a
210:06 - data class we can remove dot convert
210:09 - we can pass in at the rate immutable
210:13 - and pass in constant aware now we can
210:16 - scroll down
210:18 - and here you can see when we want to
210:19 - convert tweet type to a map format like
210:22 - we want to upload it to database we have
210:24 - two map but it's giving us an error
210:26 - because there is no two map so you want
210:28 - to do tweet type
210:30 - DOT type
210:32 - and this will give the correct type
210:34 - because that's what we have mentioned in
210:35 - the enum text and image this is the type
210:39 - of this enum then we have tweet type Dot
210:42 - from map kind of message so for that
210:45 - we'll have to create an extension on
210:47 - this enum
210:48 - this was using enhanced genomes and now
210:50 - we are just going to create an extension
210:52 - on this enum called this convert
210:55 - to eat and this is an extension on
210:58 - string this will return a tweet type to
211:01 - enum and we are just going to switch
211:03 - this so when we are having this so
211:06 - whenever two enum is called on a string
211:10 - that string
211:12 - is
211:14 - text
211:17 - then we want to return
211:19 - tweet type dot text
211:24 - if it's image so if it's case of an
211:28 - image we want to return
211:30 - tweet type
211:32 - dot image and if it's none of these
211:35 - there's default and then we want to
211:38 - return
211:40 - tweet type
211:42 - dot text
211:43 - so it's either a typo mistake or
211:46 - anything then we just want to return a
211:48 - text type
211:50 - so basically
211:52 - if we have something like
211:57 - text mentioned in a string format and
212:00 - then we call two enum function on it
212:03 - this will return to us a tweet type
212:06 - dot text
212:07 - easy
212:09 - so now we can go to the Tweet model
212:11 - remove all of this it's not needed we'll
212:14 - take map of tweet type as string because
212:17 - it should be a string and convert it to
212:20 - an enum
212:22 - or you can specify it more
212:26 - efficiently by saying
212:28 - to tweet type enum because in case you
212:33 - have other enums on the string format
212:35 - later on an app you don't want to mess
212:37 - things up
212:39 - and then obviously we'll remove the two
212:41 - Json and from Json
212:43 - similar to our user model
212:45 - now we can come to the Tweet controller
212:48 - and first thing we are going to have a
212:50 - look at share text View
212:53 - so here we'll set State equal to true
212:55 - that means is loading as started then I
212:58 - want to get a list of hashtags a final
213:01 - hashtag equal to get hashtags from text
213:04 - and we'll pass in the text that we get
213:06 - from here then we also want to get the
213:09 - link so link is equal to get link from
213:11 - text and we'll pass in the text then we
213:14 - are going to create a tweet model so we
213:16 - have tweet tweet equal to
213:19 - to eat
213:20 - and now we'll pass in text hashtags
213:23 - links now we need to pass image links
213:25 - image links is going to be
213:29 - empty for your
213:31 - then we need uid the uid of the user so
213:34 - we need to get the current user's ID
213:38 - so we'll have to do that tweet type here
213:40 - is going to be tweet type dot text
213:43 - because we are in a
213:45 - share text tweet functions obviously
213:46 - it's a text
213:48 - tweeted ad is going to be datetime dot
213:52 - now you can either use date time dot now
213:54 - or you can use the one that's given by
213:56 - apprite itself then we have likes like
213:59 - says initially going to be empty comment
214:01 - IDs comment IDs is going to be initially
214:03 - empty ID
214:06 - so the ID is going to be empty for now
214:11 - because we are not adding that to two
214:13 - map and of course we need to remove that
214:16 - before we forget so in our tweet model
214:19 - we'll go and remove map of ID we don't
214:22 - need that
214:24 - actually in two map not from map
214:27 - so we'll remove from here
214:29 - we don't want this line
214:31 - and over here we are just going to have
214:33 - map slash dollar ID this is the same
214:36 - thing that we did with user model we
214:38 - don't want the from map to have just ID
214:42 - it's going to be slash dollar ID
214:45 - and this is not going to have a map
214:48 - returning ID
214:50 - okay
214:52 - so we can go to the Tweet controller
214:54 - again now the ID is empty and the
214:57 - reshare count should be zero
214:59 - one thing that's needed is the uid so to
215:02 - get the uid we are just going to have
215:04 - final user is equal to now we need
215:06 - access to refs how am I going to get ref
215:09 - inside of this state notify so to do
215:12 - that I'm just going to ask it from here
215:15 - I'm just going to ask it from The
215:16 - Constructor that yeah please give me ref
215:18 - I don't mind it being
215:20 - a widget ref a provider ref or just ref
215:24 - so I'll just ask it so we have required
215:27 - ref ref
215:28 - and then we have underscore ref equal to
215:31 - ref
215:32 - now I can take this underscore ref
215:35 - put it away or another ref dot read
215:39 - current user
215:41 - details provider
215:43 - dot value
215:47 - and then we'll pass in user dot uid so
215:50 - we get the user's ID and we pass that as
215:53 - a uid because only the current user can
215:55 - tweet from your account I hope that
215:57 - makes sense now we have the Tweet model
216:00 - ready and everything good to go only
216:03 - thing that's required is to create the
216:05 - Tweet API so that we can send it
216:09 - to the database so again let's come to
216:13 - our apis and create tweet underscore API
216:16 - dot dot we're going to create an
216:19 - abstract class for I
216:21 - tweet API
216:23 - and this is going to be future either
216:26 - document
216:30 - share tweet and we are just going to get
216:33 - tweet model
216:35 - and based on that tweet model we are
216:37 - just going to convert it to map and send
216:39 - it across pretty simple this is actually
216:42 - very similar to the user API we did that
216:45 - for the save user data we got the user
216:47 - model we created a document
216:50 - the data was usermodel.2map and we
216:53 - returned right that's it and that's
216:56 - exactly what we are going to do here
216:57 - we're just going to have class
217:00 - tweet API
217:01 - implements I tweet API
217:06 - create one missing override this is the
217:09 - share tweet function
217:10 - so I'll have async and now I need a try
217:14 - and a catch block we have added future
217:17 - either here because this is not going to
217:19 - be enough future provider obviously we
217:21 - are just sharing a tweet which is a
217:23 - normal future return data type we
217:26 - obviously don't want to encapsulate
217:29 - everything that has a future with future
217:31 - provider it really depends on the use
217:33 - case if you want to get some data and
217:35 - display it on the screen only then would
217:37 - I use a future provider
217:41 - otherwise State Notifier provider is
217:43 - always good so here what I want to do is
217:45 - a try and catch block so I'm just going
217:47 - to go ahead copy all of this
217:50 - I would recommend you type so that you
217:52 - have a good practice but I've already
217:53 - had a lot of practice with this before
217:55 - creating this video
217:57 - now I'll just have final databases
218:01 - underscore DB
218:03 - so that you know I can inject it through
218:05 - my provider we've already talked about
218:07 - it we're just repeating the logic I hope
218:10 - you're getting the hang of it
218:13 - so we're requiring this and then we are
218:15 - going to have underscore DB equal to DB
218:19 - I'm going a bit fast way here because
218:21 - this is already the logic we have
218:23 - covered
218:25 - anyways after creating the document
218:28 - let's import this app right constants
218:31 - but this time it's not user's collection
218:33 - we need tweets collection so we name
218:36 - this
218:39 - tweets collection and then pass in the
218:42 - appropriate tweet collection ID so let's
218:44 - go ahead create a new collection called
218:47 - tweets
218:49 - copy The Collection ID don't forget it
218:52 - and paste it over here and now I want to
218:55 - get started with creating the attribute
218:58 - surveyor so that we don't get the error
219:00 - so the attribute here is going to be
219:03 - everything that's mentioned over here so
219:05 - I can just take text pass it in
219:09 - select the attribute type as string 255
219:12 - required and go ahead and create now you
219:15 - can do this for everything I'll just
219:17 - fasten this process really quick
219:19 - while creating the attribute one thing
219:21 - is the Tweet type the Tweet type here
219:23 - should be of the string format because
219:26 - when we are converting it to map you can
219:29 - see over here
219:31 - we are having tweet type DOT type and
219:34 - this is a string this tweet type is
219:36 - basically what we had mentioned over
219:38 - here okay and another thing is the
219:41 - attribute key of tweeted ad this tweeted
219:43 - AD should be an integer why
219:47 - because if you see over here in the two
219:49 - map function we have tweeted at dot
219:52 - millisecond since Epoch and this returns
219:54 - an integer so you want an integer to be
219:56 - present over here
219:58 - we unmarked this as required and click
220:00 - on create
220:01 - and make sure to not add ID property to
220:04 - this tweet
220:07 - model or this attributes don't add the
220:10 - ID property you can add uid but don't
220:13 - add ID because this is a tweet ID that
220:15 - is being automatically generated and
220:17 - this tweet uid is basically what we are
220:20 - passing it the current user's ID when
220:22 - they tweet
220:24 - now in the Tweet API
220:27 - what I want is database ID correct
220:30 - collection ID should be tweets
220:31 - collection and the document ID should be
220:35 - tweet Dot
220:38 - ID right no why because if you come to
220:42 - the Tweet controller you'll see that the
220:45 - ID over here is empty we don't want an
220:47 - empty document ID so this is not going
220:50 - to be tweet.id just like we had for
220:52 - user.id for our user model where we made
220:55 - a mistake this should actually be ID dot
220:58 - uni because every tweet should have a
221:01 - different ID
221:02 - so that they don't merge with each other
221:04 - right
221:06 - and finally tweet.2 Maps should be the
221:08 - data now of course we'll return right so
221:12 - import fp.library and here we have to
221:14 - return a document so we can just save
221:16 - this so you have final document is equal
221:19 - to this
221:20 - and we can return this document so this
221:23 - is our function
221:24 - that's all that was needed now I'll just
221:26 - create a provider out of this so we have
221:28 - final tweet API provider
221:32 - we don't have to mention the type
221:34 - the real part is very smart to identify
221:36 - that and then we can return tweet API
221:39 - and pass in the database which is
221:41 - ref.watch app right database provider
221:46 - I hope you are understanding what we are
221:48 - doing
221:48 - we are continuously repeating the same
221:50 - things and that's what the whole
221:52 - tutorial will consist just many
221:54 - repetition of things one or two unique
221:58 - concepts are left about real time and
222:00 - storage otherwise it's just about
222:03 - creating reading updating and deleting
222:06 - every single place you just need to have
222:08 - the correct logic and understand what to
222:10 - do when
222:12 - now we can go to the Tweet controller
222:14 - except from The Constructor a tweet API
222:17 - so we have final
222:19 - tweet API underscore tweet API
222:23 - required tweet
222:27 - API tweet API
222:30 - and underscore tweet API should be equal
222:33 - to tweet API
222:35 - now I can take this underscore tweet API
222:38 - and use it here so we have underscore
222:40 - tweet API dot share tweet we'll pass in
222:43 - the Tweet model
222:45 - it will give us some response of your
222:46 - final response is equal to await this
222:48 - and you also need async so we'll async
222:51 - this now we have a response now you know
222:54 - how to handle failures and success right
222:56 - we've done this in the past in the user
222:59 - in the auth controller we just have to
223:01 - do
223:02 - res dot fold
223:06 - we'll either have left or right in case
223:08 - it's left we'll show a snack bar with l
223:11 - dot message and if it's right
223:14 - nothing as of now later on when we add
223:16 - reply part
223:17 - things will change
223:21 - also to ignore the warnings let's put a
223:24 - const at the places it's required so
223:27 - this is the text based tweet let's see
223:28 - if it's working just based on text tweet
223:31 - so I'm not going to enter any image here
223:32 - I'll just say hey
223:35 - and actually I have to bind this
223:36 - function I forgot it so we need State
223:39 - Notifier provider
223:42 - tweet controller provider will pass in
223:46 - tweet controller and a Boolean value
223:50 - so tweet controller is a class name
223:52 - Boolean is what we are returning over
223:54 - here and now we need to return to it
223:58 - controller we'll pass in ref and then we
224:01 - need tweet API to eat API is ref.watch
224:05 - tweet API provider
224:09 - and that's it there's no dot notifier on
224:12 - provider that dot notifier on state
224:15 - notify provider and state provider State
224:18 - provider is a simplified version of
224:20 - State Notifier provider but you're not
224:22 - going to use that because
224:25 - it's hardly ever needed because it's so
224:27 - simple
224:30 - like the value it consists and its use
224:32 - cases are so simple that it's not needed
224:34 - ours is a more complex topic
224:37 - I know I've been rushing through so if
224:39 - you're feeling under confident I would
224:41 - recommend you to watch it again or code
224:42 - it on your own don't just watch it
224:44 - because this is a bit complex now what I
224:48 - want to do is just go to the create
224:50 - tweet view we'll create a function for
224:53 - share tweet so we have void share tweet
224:57 - and then we are going to have ref dot
224:59 - read tweet controller provider because
225:02 - we want to get access to this tweet
225:04 - controller right once we get access to
225:06 - this
225:08 - instance of the class we can call the
225:10 - share tweet function which will later on
225:12 - check if it's image or text we are just
225:15 - going to text for now and then it will
225:17 - upload it to the database
225:20 - so we have tweet controller provider dot
225:23 - Notifier dot share Tweet now we need to
225:28 - pass in images we have passed that in
225:29 - text text is basically tweet
225:32 - textcontroller dot text
225:34 - and the build context and we are done
225:37 - now we'll also check if it's loading or
225:40 - not so we have final is loading is equal
225:42 - to ref dot watch
225:46 - tweet controller provider
225:50 - now if it's loading
225:53 - so I want to show a loader so if it's
225:55 - loading or the current user is null then
225:58 - I want to show a loader otherwise the
226:00 - widget tree
226:02 - and now if I click on tweet nothing
226:04 - happens so I'll just restart
226:08 - also I'll bind the share tweet function
226:10 - to the done button right in the app bar
226:14 - since the function signatures match you
226:17 - can see I can put that in correctly
226:19 - so I'll come over here I'll say hello
226:23 - and then click on tweet the current user
226:26 - is not authorized to perform the
226:28 - requested action and there's continuous
226:30 - loading there are two things to be fixed
226:32 - so I'll go to the settings of the tweets
226:34 - collection I'll scroll down and add a
226:37 - role where all the users can create read
226:41 - update not update
226:44 - and not delete because Twitter doesn't
226:46 - allow deleting I hope
226:48 - as far as I've seen I don't get the
226:49 - option to delete so we can either create
226:52 - or read there's no updating the Tweet or
226:54 - reading the tweet and also we have to
226:57 - set state is equal to false I can remove
227:00 - the comments these are basically useless
227:02 - comments now I'll search state is equal
227:05 - to false now
227:07 - and then
227:10 - restart the application
227:12 - come back here I'll say
227:16 - hello and click on tweet
227:18 - you can see invalue document structure
227:20 - unknown attribute hashtags so I think I
227:23 - forgot to put the hashtags list I'll put
227:26 - that in
227:27 - and the size of the hashtag list is
227:29 - going to be 100 or 50 or whatever you
227:31 - want we'll click on create
227:34 - now we'll click on tweet and the Tweet
227:37 - has been uploaded so if we go to the
227:39 - documents refresh there's one document
227:42 - with a text of tweet the correct uid of
227:45 - the user tweet type as text that's right
227:48 - Twitter ad is also correct there's likes
227:51 - comment IDs and image links reshare
227:53 - count and there's no hashtag now I'll
227:56 - try to add hashtag hashtag
227:58 - rivonawat and also a link so I'll just
228:01 - write www.youtube.com
228:07 - and now I'll click on tweet
228:10 - so it got updated now I'll come back
228:13 - here we have it here's the text here's
228:17 - the hashtags correct
228:19 - and the link is also correct that means
228:22 - everything is working fine in the Tweet
228:25 - type text format now I want the same
228:28 - thing to happen in image but things
228:30 - might change a bit differently in
228:34 - share image to it why because we have a
228:37 - list of file images to be uploaded to
228:39 - storage we'll have to create a separate
228:40 - API for that
228:42 - so I'm just going to go ahead copy
228:45 - everything from here paste it in and
228:48 - definitely make some changes
228:50 - first make this asynchronous share tweet
228:52 - is going to remain same tweet type is
228:55 - now image we have a list of image links
228:58 - to be put in I'll do that and nothing
229:00 - else is needed so now I need to go to
229:03 - the storage API API folder and create a
229:06 - new API called storage API
229:09 - we cannot do that with the Tweet API
229:12 - because it might
229:14 - congest
229:16 - a lot and also this storage API is not
229:19 - just going to be used in tweet right
229:21 - it's also be going to be used in user
229:23 - profiles when the user wants to update
229:25 - their bio profile picture and all of
229:28 - that stuff
229:29 - they will be able to access storage API
229:31 - again
229:32 - so let's create storage API I'm not even
229:35 - going to create an abstract class for it
229:37 - there's just one function
229:38 - so yeah final storage underscore storage
229:42 - and we have storage API required storage
229:50 - and underscore storage should be equal
229:52 - to storage simple now we want to upload
229:56 - future list of strings while list of
230:00 - string because
230:02 - we are going to get a list of files we
230:04 - are going to upload that to storage it
230:06 - will give us a download URL not really
230:08 - give us a download URL it will give us
230:10 - image IDs of that URL we can convert
230:13 - them in the form of links I'll show you
230:15 - how
230:16 - and send them out so that's why it's
230:19 - going to be a list of string and then we
230:21 - want to upload images and we have list
230:24 - of files right
230:28 - so we have list of files
230:31 - this is going to be asynchronous
230:34 - I'll get file import the dot IO Library
230:38 - and now I'm just going to have list of
230:41 - string of file IDs or file image links
230:46 - let's just call it image links which is
230:48 - equal to nmt list
230:50 - then we'll run a foreign loop again
230:53 - so we have for final file in files
230:58 - then we want to upload it to the storage
231:01 - so we have final uploaded image
231:05 - equal to await underscores storage dot
231:09 - create file this is the API of apprite
231:12 - it gives us a method known as create
231:14 - file get file all of those stuff we just
231:17 - need create file
231:20 - so if the user creates a file then we
231:22 - need their bucket ID file ID file
231:26 - so we know file ID is going to be unique
231:28 - so we can have unique like this or we
231:31 - can just have
231:33 - ID dot uni then we need the file the
231:37 - file is going to be of the type input
231:40 - file so how do I get input file well you
231:43 - can just do input file
231:47 - and pass in the path path is going to be
231:51 - file dot path simple
231:54 - basically we are looping through all the
231:57 - files in this list we get this file we
231:59 - are converting it into an input file
232:01 - using its path and now we just add file
232:06 - to the image links so we have image
232:09 - links dot add uploaded image which is a
232:12 - file but this is not the file from dot
232:16 - IO you see this this is not a file from
232:19 - dot IO that we are using
232:21 - over here this is a file model that's
232:24 - created by apprite itself so if you do
232:28 - dot on this you'll see a list of
232:31 - different properties because this is a
232:33 - different class altogether this is not
232:35 - the file coming from dot IO it's coming
232:37 - from app right slash models.dot the same
232:40 - place we got account and session
232:43 - classes
232:46 - so here we have dot dollar ID we can add
232:48 - that and then we just want to return the
232:51 - image links from this function easy now
232:55 - to get the bucket ID what we need to do
232:57 - is go to the upright console
233:00 - go to the storage create a new bucket
233:03 - let's call this images
233:06 - copy this bucket ID go to Upright
233:08 - constants and register it
233:11 - so we are just going to call the static
233:13 - constant string images bucket
233:17 - which is equal to this
233:20 - and now we can pass an upright constants
233:24 - Dot
233:25 - images bucket
233:27 - easy enough now we will just create a
233:30 - provider for this and call this
233:33 - storage
233:35 - API provider
233:41 - and we'll return storage API but we need
233:44 - to pass in the storage and for that
233:46 - we'll have to create another provider
233:47 - because we don't have anything for
233:49 - Storage storage yet so we can go to the
233:52 - providers.
233:53 - create
233:55 - another
233:56 - provider and call this app right storage
233:59 - provider
234:01 - will pass in storage over here and it
234:04 - will also require a client that's it
234:08 - all the upright
234:11 - dependencies are similar to each other
234:13 - that's a plus point
234:15 - and now in the storage we can just pass
234:17 - in
234:18 - ref.watch
234:20 - app Right Storage provider now you might
234:24 - ask one thing if we are returning the
234:26 - file ID
234:28 - how is this a link and you're totally
234:30 - right this is not a link so we need to
234:32 - convert this in the form of a link
234:35 - so basically if you try to upload any
234:37 - file I'll just select a file
234:39 - I just uploaded a file from here
234:42 - and you can copy this
234:44 - you'll get a file URL right now you can
234:47 - see this but the point is the URL is not
234:51 - exposed over here so if you try to do
234:54 - dot URL or something try to find
234:56 - something it's not really there
234:58 - so what I'm going to do is just examine
235:01 - this URL I'll copy this
235:03 - go to the upright constants and create a
235:06 - static function for this so we have
235:07 - static string image URL it will return
235:11 - this function will return a string of
235:14 - image URL by taking image ID as a
235:16 - parameter and return this
235:20 - if I want to make it work on Android
235:23 - I'll have to pass in my IP address over
235:26 - here so I'm replacing all of this
235:30 - with dollar
235:35 - endpoint
235:37 - slash storage
235:40 - because my endpoint doesn't have a slash
235:43 - at the end so we have dollar endpoint
235:45 - slash storage slash buckets then there's
235:50 - the bucket ID so I can just have dollar
235:53 - images bucket which is this one
235:57 - slash files slash dollar image ID
236:02 - view question mark project and then
236:05 - we'll pass in the project ID
236:08 - and mode is equal to admin
236:11 - so this is how we are able to retrieve
236:14 - and see the image URLs pretty cool
236:17 - now I can go to the storage API
236:19 - I can add this so I can just do image
236:22 - links dot add
236:25 - app right constants
236:27 - dot image URL pass in the image ID which
236:32 - is uploaded image dot dollar ID
236:35 - and with this we have image links added
236:39 - a proper valid image URL is there great
236:44 - now I can go to the Tweet controller go
236:46 - to the share image tweet
236:48 - and here just a final image length is
236:51 - equal to
236:53 - underscore storage API so I want to get
236:56 - access to storage API
236:58 - so I can just have
237:00 - similar to tweet apis storage API
237:04 - underscore storage API
237:07 - and now I can again have this past tense
237:10 - so required storage API storage API
237:14 - underscore storage API equal to storage
237:16 - API
237:18 - now that app storage API I can just have
237:21 - underscore storage API dot upload image
237:24 - then I'll pass in a list of files and
237:27 - the files are images I'll await this
237:30 - I'll take the image links which is a
237:32 - list of string and add it over here
237:35 - now I think this is all about image
237:39 - Tweet now I can go up in the storage API
237:42 - I'll just pass in ref dot watch storage
237:44 - API provider
237:46 - and we are done now let's try to run the
237:48 - application we have already configured
237:50 - the UI file everything over there now
237:52 - I'll select some images
237:57 - I think these three work well now I can
238:00 - just say hashtag Revan this is so cool
238:06 - and I can tweet it out
238:08 - we are getting this error because
238:10 - the current user is not authorized to
238:12 - perform the requested action and that
238:14 - might be because we are not allowing
238:16 - the user to upload images
238:19 - so to upload the images we can go to the
238:21 - settings add a role all users can create
238:26 - or read I don't think reading is also
238:28 - allowed so let's just allow creating
238:31 - the users cannot read update or delete
238:33 - anything that's for
238:35 - our admins
238:37 - so I can just restart
238:39 - let's just select images again
238:47 - this is beautiful
238:51 - and then click on tweet
238:54 - now it says that the attribute has
238:56 - invalid type
238:57 - valid worst valid string must be more
239:00 - than 10 characters so basically
239:05 - in the databases I had earlier said
239:08 - that the Tweet attribute of
239:11 - hashtag
239:14 - should be 10 but that's not the IRA
239:17 - value it is the number of characters in
239:20 - the string
239:22 - so your hashtags
239:24 - should have a string they should be a
239:27 - list but the size of this list can be
239:30 - you know
239:31 - 50 60. this is not the size of the list
239:35 - this is the size of the characters
239:38 - present in a string
239:40 - so my hashtag rivan should not be like
239:43 - 10 characters it should be like 60 70
239:45 - whatever should be the maximum size of
239:48 - the hashtag okay now I can just click on
239:51 - create
239:52 - now I'll try to post
239:56 - this error is basically
239:58 - if I scroll down we have to delete this
240:00 - image links attribute
240:03 - they cannot be 10 why I'll tell you
240:05 - because
240:08 - image links should have
240:11 - a string attribute there should be an
240:14 - array but their size over here is not
240:16 - the size of the list it's the size of
240:19 - the characters so how long is the link a
240:22 - link cannot be just 10 characters right
240:24 - so here they should have suppose
240:29 - 255 characters or something like that
240:32 - you can calculate it whatever is the
240:35 - size of the link and put that in
240:37 - if it's something else then perhaps
240:40 - something is wrong in your project or
240:42 - apprite SDK has changed I'll just pass
240:44 - in 255 and see what happens this is the
240:47 - character size of the string of the
240:49 - image links not the size of the array
240:51 - okay now I'll click on create then I'll
240:54 - click on tweet and I think the Tweet has
240:57 - been made so I'll just go to the
241:00 - documents and we have hashtag everyone
241:02 - this is beautiful
241:04 - we also have three image links but they
241:07 - contain my IPS I'm not showing it to you
241:09 - so this is working well
241:11 - now the next part is after two eating
241:13 - you know image links correctly
241:15 - identifying all of them
241:17 - and uploading them to database we have
241:19 - covered a lot of tasks in this section
241:22 - now the next part is to
241:26 - display those tweets
241:28 - over here on the screen and we already
241:32 - have the foundations for it we have the
241:34 - Tweet model which is going to help us a
241:35 - lot but we still have to make more
241:37 - functions like getting the tweets and
241:39 - creating a UI card for that tweet so
241:42 - that you know it looks good just like
241:44 - the Twitter
241:45 - so let's get started with it and we have
241:47 - to start off by creating a new view not
241:50 - a new view it should be a new widget and
241:53 - that is going to be a tweet list widget
241:55 - so let's create a folder here named
241:58 - widgets and now we want to create tweet
242:02 - list
242:03 - this is a widget name so we'll have
242:05 - tweet underscore
242:07 - list dot dot and now I'll import
242:10 - material dot I'll create a stateless
242:13 - consumer widget
242:15 - and I'll call this tweet list
242:19 - also I'll import the flutter evapot
242:21 - library and now I'll create
242:24 - I'll tweets provider so basically I want
242:27 - to create a future provider that will
242:29 - get me all the tweets from the apprite
242:31 - database so I can go to the Tweet API
242:33 - and now I'll Define another abstract
242:36 - class function which is going to be
242:39 - future either
242:41 - not future either since we want it in
242:44 - the form of a flood River pod from
242:47 - provider the future provider we are
242:50 - going to have future list of document
242:52 - get tweets
242:56 - now I'll just do command full stop
242:59 - create one missing override and now I'll
243:02 - do asynchronous and now I want to get
243:04 - all the tweets now how do I get a list
243:06 - of documents so for that I'll just use
243:09 - underscore DB Dot and see the function
243:11 - for it create documents create the
243:13 - documents delete get list
243:17 - list documents will give us a list of
243:20 - documents as their name suggests
243:23 - so I want the database ID the database
243:25 - ID is upright constants
243:27 - dot database ID collection ID is upright
243:31 - constants dot tweets collection
243:34 - and now I'll just save this in a
243:37 - variable so the final documents is equal
243:39 - to await DB dot list documents now I can
243:43 - just do return
243:45 - documents but this is document list not
243:48 - doc list of documents so what I can do
243:51 - is documents dot documents and it will
243:53 - return to us a list of documents correct
243:56 - now I can go to my tweet controller so
243:59 - let's go over there
244:02 - and here I'll create a separate function
244:05 - called
244:06 - future
244:09 - list of tweets correct because I want to
244:12 - get a list of tweet here we are
244:14 - returning the documents in a list format
244:17 - here I'll convert all of those documents
244:19 - in a list format so I'll call this get
244:22 - tweets
244:26 - this will be asynchronous and then I'll
244:29 - get final tweet list is equal to await
244:32 - underscore tweet API dot get tweets
244:36 - now this tweet left in the list of
244:39 - document so I'm just going to map
244:41 - through it and convert every single one
244:43 - of them into a tweet so we can do that
244:46 - by doing tweetlist Dot map
244:49 - and this will give us a tweet
244:52 - now I'll convert this to a map so we'll
244:55 - have tweet Dot from map sorry I'll
244:57 - convert it to a model from a map so I
245:00 - can do tweet Dot from map this will
245:02 - convert it from map to a tweet model
245:05 - and then I can pass into it dot data
245:08 - like we've done before for
245:12 - user model but this time we are just
245:15 - mapping through it and converting
245:16 - everything to a list so basically we
245:19 - went through all the documents mapped
245:21 - through each one of them we got a single
245:23 - document
245:24 - and we convert it to a model
245:26 - now I can return this thing because it's
245:28 - now a list of tweets
245:31 - and since there's asynchronous it
245:33 - becomes future list of tweets and now I
245:36 - just need to create a future provider
245:37 - out of this so I'll just have future
245:39 - provider name this get tweets provider
245:43 - then remove this and then I'll have
245:46 - final tweet controller is equal to
245:50 - ref.watch tweet controller provider dot
245:54 - Notifier now I can return
245:57 - tweetcontroller Dot
246:00 - get tweets and now this is of the type
246:03 - future provider list of tweet
246:06 - why I was insisting on future provider
246:09 - now you'll get to know because future
246:11 - provider gives us a very good thing so
246:13 - if we come to the Tweet list and do
246:16 - return ref dot watch
246:19 - and then we do get tweets provider
246:24 - you can see we have earlier used dot
246:27 - value to get the value of the list and
246:29 - then we could use this value we did this
246:32 - for the user provider so if we come back
246:35 - to our
246:36 - create tweet View
246:38 - we can see here we did this since this
246:41 - was a future provider we had dot value
246:43 - but now what we are going to do is not
246:45 - value but dot when I said you can
246:51 - easily transition between the data error
246:53 - or the loading state
246:57 - that's why we never had
247:00 - future either in there because if
247:02 - there's an error we'll get to know it
247:04 - over here
247:05 - so now if there is data we have to do
247:07 - something if there is an error we'll
247:09 - also get a stack Trace you have to do
247:12 - something about it and in case of loader
247:15 - we have to do something about it so
247:17 - first two are very straightforward we
247:18 - have already created something for them
247:20 - there's load up for loading there's
247:23 - error text for error so we have error
247:26 - text and we'll pass in error.tostring
247:31 - and for data we are getting tweets
247:34 - and this is in a list format so if there
247:36 - is a list of tweets and we don't know
247:38 - its numbers so how many tweets there are
247:40 - going to be we don't know that so for in
247:43 - that case we can use list view Builder
247:47 - and now we can mention the item count
247:49 - which is tweets dot length
247:52 - and now we'll extract each tweet so this
247:56 - item count is the number of items that
247:58 - are there so there are tweets dot length
248:01 - number of items
248:04 - now I want to get a
248:07 - access to a single tweet so I can have
248:09 - tweets at Index this index is provided
248:13 - over here so I'm getting one single
248:15 - tweet by doing tweets index in the item
248:18 - Builder property
248:19 - and now if I just want to test I can
248:22 - just have tweet dot let's say text pass
248:25 - to it and see if I'm getting the right
248:27 - thing or not now I can take this tweet
248:30 - list go to my UI constants file where
248:32 - I've already created text feed screen
248:34 - now I'll just replace this with a normal
248:37 - tweet list
248:39 - and obviously this has to be constant
248:40 - now I can restart and here you can see
248:44 - there are three tweets and there are
248:45 - three tweets over here as well that
248:47 - means our tweets are being retrieved
248:50 - successfully now I want to create
248:52 - another widget which is the Tweet card
248:54 - so let's create that so I want to design
248:56 - how my tweet card is going to look like
248:59 - so I can do that in a separate way
249:00 - separate class because it has a lot of
249:03 - stuff going in it and this is also going
249:05 - to be a stateless consumer so we have to
249:08 - eat card and we'll import the flutter
249:11 - riverpod library now I can return this
249:13 - tweet list
249:15 - from the Tweet list I can return this
249:17 - tweet card but obviously we'll have to
249:19 - pass in the Tweet over here
249:21 - I'll accept it through the Constructor
249:24 - over there so I have final
249:27 - tweet tweet and I'll require this
249:31 - through the Constructor
249:34 - so we have required this dot Twee so the
249:37 - error goes away now let's get to the
249:39 - main thing what do we want to return
249:42 - well first of all we want to return a
249:44 - column
249:45 - and in that column we are going to have
249:47 - children and in that children the first
249:49 - thing is a row why a row because we want
249:52 - to have a circle Avatar to demonstrate
249:55 - to you I'll show you one year is a
249:58 - circle Avatar the profile pic of the
249:59 - user then we have the name of the user
250:02 - here we are going to have reply so if
250:04 - there is any reply we will have that if
250:07 - there's a retweet there it is going to
250:09 - be above the username and then we are
250:11 - going to have the text of the user if
250:13 - there are any images the image of the
250:15 - user
250:16 - at the last we are going to have a
250:18 - divider
250:19 - so that there's a great division between
250:21 - the next tweet as well
250:24 - so we need a column so that we can
250:26 - accommodate the divider and then we need
250:29 - a row so that we can have the user
250:31 - avatarp or use a profile picture along
250:34 - with their name
250:35 - so now I'm just going to return a row so
250:38 - that I can have
250:40 - a circle Avatar and this circle Avatar
250:42 - is the users
250:44 - image
250:46 - and we'll pass in the background image
250:48 - but now we need the image of the user
250:50 - who has tweeted this we cannot do final
250:52 - current user is equal to ref dot watch
250:55 - current user details provider dot value
250:58 - we cannot get their value by doing this
251:01 - this is not
251:02 - the image of the person who's tweeted it
251:05 - it's the image of the person
251:08 - who's handling the app right now so it
251:10 - will vary for every person we want to
251:12 - get the details of the person who's
251:15 - uploaded the tweet
251:17 - so to do that we'll have to create a new
251:20 - provider and actually we don't have to
251:23 - create it we have already created it and
251:26 - that is ref.watch
251:28 - user details provider here we just have
251:31 - to mention the uid of the user and that
251:34 - is tweet.uid dot when
251:38 - it will give us data error and all of
251:40 - those stuff in case of data we'll do
251:42 - something in case of error and loading
251:45 - we can just go over here copy both of
251:48 - these things
251:49 - come to the Tweet card and
251:52 - paste it
252:00 - now I can copy the column
252:06 - and here return
252:08 - column
252:12 - now to get the background image it's
252:14 - just going to be Network image
252:18 - and let's call this user so there will
252:21 - be
252:22 - user Dot
252:25 - profile picture
252:27 - now if I save this much you can see we
252:29 - are getting these profile pictures now
252:32 - they're the same ones as this user
252:34 - because it's the same user
252:37 - we created the tweet from here and we
252:39 - are viewing it over here
252:41 - but if you try it on a different device
252:43 - with a different login you'll see
252:45 - different images
252:47 - but if you used current user details
252:49 - provider it would have given you
252:50 - something else on a different device it
252:53 - would give you the same thing over here
252:54 - but it would be different on a different
252:56 - device because it would use their
252:59 - profile picture it wouldn't be the
253:01 - person who tweeted that their profile
253:04 - picture won't be available so you have
253:06 - to do this it's very important and don't
253:08 - mess it up because I've messed it up
253:09 - while I was developing this application
253:12 - now I just want to increase the radius
253:14 - so I'll just have radius 35
253:16 - save it and this and this looks much
253:19 - bigger that's great
253:21 - now I'll just put a margin here so I can
253:23 - just have a container
253:27 - and put a margin of constant agencies
253:30 - dot all
253:31 - 10.
253:33 - so there's a margin of 10 everywhere and
253:35 - this looks super cool
253:37 - the next thing we need is a column we
253:39 - had a column first so that we could put
253:41 - in a divider then we add a row and
253:45 - inside of that row itself
253:47 - I want to put a column
253:50 - why because here we are going to have a
253:53 - list of things there is going to be
253:54 - username the text of the user if they
253:57 - are replying to anyone their reply tag
254:00 - if they're retweeting to anyone the
254:02 - retweeting tag and that
254:05 - images so it's all going to be in this
254:08 - column and then we are going to have
254:09 - children and then there's going to be
254:12 - retweeted thing but we are not going to
254:14 - focus on retweeted thing right now we'll
254:16 - focus on that when we add the retweet
254:18 - feature
254:20 - so you can just put a comment for now
254:22 - that we want retweet it to be there next
254:24 - thing is the row
254:26 - and this row is going to contain the
254:29 - username the user name with other rate
254:32 - and the number of hours it has been
254:35 - since they posted so it's going to be
254:37 - again row this is a bit complex design
254:40 - then we need a container because we need
254:42 - to put in a margin so we have margin
254:45 - engine search dot only
254:48 - from right side we want 5.
254:52 - and this will be constant
254:55 - and the child will be text user dot name
255:00 - because we want to display the name of
255:02 - the user who has posted it
255:04 - and now if we see this is test this is
255:07 - good as well now I just want to style it
255:09 - up a bit so we have constant
255:13 - textile and then I'll pass in font
255:16 - weight as font weight dot bold
255:22 - and font size as 19.
255:25 - if we save this much and come over here
255:27 - this looks good
255:29 - we have put a margin of 5 here because
255:32 - the next thing that we are going to have
255:33 - is the user name with at the rate as
255:37 - well as the time ago it was posted
255:42 - so here we are going to have
255:44 - a string and there is going to be at the
255:48 - rate but this is going to be
255:52 - interpolated
255:54 - like this so at the rate is there then
255:57 - the user name that's a variable and thus
256:00 - we have this but now we have to change
256:02 - this a little bit
256:04 - so here the font size should be 17 and
256:08 - color should be
256:10 - palette dot gray color
256:13 - if you save that much this looks good
256:15 - the font weight should go away
256:18 - and now this looks nice
256:20 - now we want to put the time ago it was
256:23 - posted and to do that we are going to
256:24 - use a package known as time ago this
256:27 - will calculate the time ago it was
256:30 - posted so we have tweeted at property
256:33 - which will give us the time it was
256:34 - posted and time ago will calculate the
256:38 - time from right now to when it was
256:41 - posted and give us give it us in a
256:43 - format like four hours ago five hours
256:45 - ago something like that then I have the
256:47 - dot with me and then I can use
256:51 - dollar
256:52 - time ago dot format now I want to import
256:57 - time ago so I can just do import time a
257:01 - go dot dot as
257:04 - time ago
257:07 - now I can go over here and have time ago
257:10 - dot format tweet dot Twitter Dot
257:14 - and if I do this much
257:16 - and see a wire you can see test user was
257:19 - three hours ago
257:21 - now I just want to reduce this to 3 H so
257:24 - that there's not much space taken so how
257:27 - I can do that is just by adding which is
257:32 - en underscore short
257:35 - so this will shorten it and now we just
257:37 - have three h over here not three hours
257:39 - ago that's a very big thing now the next
257:42 - thing in the column so we'll get out of
257:45 - this this column as well
257:51 - this row sorry we'll get out of this row
257:54 - and then we'll have another thing
257:58 - which is replied to
258:00 - so if there is any reply to we want to
258:03 - add that tag but we will do that later
258:05 - on when we add a reply feature
258:09 - then we need
258:10 - a text so we can just have
258:14 - a simple text right but we also want to
258:16 - identify hashtags or links in that case
258:19 - so how can we do that well for that we
258:21 - are going to create a separate widget
258:23 - called hashtag underscore text dot dot
258:26 - we're going to import material lot we
258:28 - are going to create a stateless widget
258:29 - called hashtag
258:31 - text
258:33 - we are going to have final string text
258:37 - and require it through the Constructor
258:39 - so you have required this dot text
258:41 - and here since we want some parts
258:44 - colored in white which is a normal text
258:47 - and we want some part to be colored in
258:49 - blue so for that we'll have to use text
258:52 - man so we'll have a list of text span
258:54 - over here
258:56 - so we have text spans which is equal to
258:59 - an empty list
259:02 - and then we can do text Dot split so
259:04 - that we split all the words in the
259:07 - sentence
259:09 - we've already looked at this logic and
259:11 - we'll run a for loop on it we can also
259:13 - run a map for each whatever you prefer
259:16 - I'll run a for each Loop and here I'll
259:18 - just check if the value
259:21 - or the element so if element dot starts
259:24 - with
259:25 - so if it starts with hashtag I want to
259:29 - add a text pan to this text spans list
259:31 - second I have text pans dot add text
259:34 - span the text will be there which will
259:37 - be dollar element
259:39 - and in a string format and we leave a
259:41 - space here why have we left space we
259:44 - have left space because you have left we
259:46 - have split the sentences by spaces so we
259:51 - have a list of words so if we add ribbon
259:55 - awat
259:57 - as a sentence
259:59 - and then now we have Revan
260:03 - in a list format with ranavat now we are
260:06 - just adding them so we have driven added
260:09 - together so we have everyone and then
260:11 - run over there's no space between them
260:14 - right so we have to leave a space then
260:16 - we can have style which will be constant
260:20 - textile
260:23 - color will be palette dot blue color and
260:28 - font size will be 18. bigger than the
260:31 - normal and let's also bold it so that
260:34 - you know it looks a bit different so we
260:36 - have font weight dot bold
260:38 - now as if the value Dot
260:42 - not value element dot starts with let's
260:46 - say www dot or http
260:52 - so we have https
260:57 - colon slash slash then we will have
261:00 - something similar so we'll have text
261:01 - pans dot add this this is also going to
261:04 - be blue color and bold and all of that
261:06 - stuff
261:08 - let's just remove both so that there's
261:09 - some distinguishing Factor
261:12 - and else will be the normal text so we
261:15 - have text pans dot add
261:18 - we add the value but this is just going
261:21 - to have a font size of 18. it's not
261:23 - going to be blue color
261:24 - it's just going to be the same size as
261:27 - these two three or these two
261:30 - and now what I want to return is a rich
261:33 - text because it requires a widget to be
261:35 - returned and here
261:38 - I'll pass in
261:39 - the text as text pan
261:42 - and it will have children as text spans
261:48 - so you have returned a rich text widget
261:50 - with a text pan having its children as
261:53 - it expands that we just created over
261:55 - here
261:58 - and now I can just have hashtag text
262:01 - pass in the text which is tweet Dot
262:04 - text and now if we come over here you
262:07 - can see the UI is totally dismantled but
262:10 - we are getting our hashtags and links
262:12 - colored this is great now to fix this
262:15 - what we can do is wrap the column widget
262:18 - over here with expanded widget
262:23 - since we are in a row container takes
262:25 - this much and then we have text that's
262:27 - overflowing so we want text to get all
262:29 - the maximum space and if there's no
262:31 - maximum space it can just go down
262:33 - so we'll just wrap this and if we come
262:36 - back yep it looks fine now
262:38 - but you can see this text is not in the
262:41 - center is in the center we want it to
262:42 - start from here so we can go up here
262:45 - again wrap the column widget with cross
262:48 - access alignment as cross access
262:50 - alignment dot start
262:52 - paste it and everything starts from the
262:55 - left side now the next thing that I need
262:58 - is images to show up so if tweet dot
263:02 - tweet type is equal equal to
263:06 - tweet type dot images
263:10 - so if we are having an image as the
263:13 - tweet type then we want to do something
263:15 - braces are not allowed while rendering
263:17 - this this is an if collection so to have
263:20 - that we are going to create a separate
263:21 - widget on its own and that is going to
263:23 - be called Carousel image dot dot we can
263:27 - import material Dot
263:29 - we can create a stateful widget because
263:31 - there's a lot of stuff going on here
263:33 - basically we have an options button so
263:35 - if the user wants to
263:37 - know which
263:39 - image we are on or if it wants to click
263:40 - over there and go to a certain image
263:42 - they can definitely do that
263:45 - and this is going to be final list of
263:48 - string image links
263:52 - will require this through the
263:54 - Constructor
263:58 - and now where we are going to create a
264:01 - variable called in current is equal to
264:03 - zero this means the current index of the
264:07 - a match to be displayed is zero
264:11 - and now we are going to return a stack
264:14 - and there is going to be children why is
264:16 - it a stack
264:18 - you'll get to know
264:20 - our first child is now column
264:23 - the column is now having children and
264:26 - the first child
264:28 - is the carousel slider
264:30 - the carousel slider is the same thing as
264:33 - what we had in create tweet view so we
264:36 - can go there
264:37 - copy the carousel slider mentioned there
264:42 - and paste it in the children now I can
264:46 - import Carousel slider I can map through
264:50 - the image links
264:52 - or widget dot image links
264:55 - then do image.network
264:57 - where we'll get
264:59 - a link
265:01 - and based on that link we have to do
265:02 - image.network
265:04 - and this will have a fit of box fit dot
265:07 - contain and here the margin is going to
265:10 - be in all the sites so we are going to
265:11 - have margin dot all 10.
265:14 - now just to see if it's working we'll
265:16 - have Carousel image we'll paste it over
265:18 - here pass in the image links which is
265:20 - tweet dot image links and save it and
265:25 - when we try to see the surveyor we are
265:27 - getting this error this is because we it
265:28 - is not able to fetch the images and for
265:31 - that we have to give them a proper
265:33 - permission so in the storage we'll have
265:35 - to go to the images tab go to settings
265:38 - and here add a role for
265:42 - any user that they can create grid
265:45 - update delete and then click on update
265:49 - now if you restart the application
265:51 - you can see all of the images showing up
265:54 - so the error is now gone
265:57 - now let's beautify this further how can
266:00 - we do that first of all
266:02 - in the carousel slider
266:05 - we want the viewport fraction to be one
266:08 - we want to disable the infinite scroll
266:12 - and this looks much bigger already that
266:15 - is nice and in the stack we want
266:18 - alignment as alignment Dot Center
266:22 - so it's right in the center also the
266:25 - width will be removed here and the
266:27 - decoration of box decoration
266:29 - border radius
266:31 - border radius dot circular
266:36 - 25 will be added let's see if this much
266:39 - and here we are going to have one more
266:41 - thing on page changed we will get index
266:44 - and reason and then in the search state
266:46 - we are going to set current variable
266:48 - that is global equal to index so
266:50 - whatever Index this Carousel options
266:52 - give us we'll set that to the global
266:55 - variable current
266:56 - now the next thing after this is row
266:59 - widget because we want to display a
267:01 - bunch of circles so that we know how
267:03 - many images are there and stuff
267:06 - so when the children
267:08 - we are not going to return a list wire
267:10 - we are instead going to have widget dot
267:13 - image links Dot as map
267:16 - dot entries so we're going to treat them
267:19 - as map and get the entries and map
267:21 - through each entry
267:25 - and return a gesture detector
267:28 - we also convert it to a list so that we
267:31 - don't get any error
267:33 - right now we are getting entered because
267:34 - we're not returning anything so we have
267:36 - to return
267:38 - a container
267:40 - which has the width as 12 the height as
267:44 - 12
267:45 - and margin will be Edge insets
267:48 - dot symmetric in the horizontal
267:51 - Direction we'll have 4.
267:55 - and this will also be constant
268:00 - and now we want to create a circular
268:02 - shape so we are going to have box
268:03 - decoration
268:05 - shape as box shape dot Circle
268:10 - and color will be
268:12 - colors dot White
268:15 - dot with opacity and the opacity will
268:18 - differ because if it's current
268:20 - so basically if current is equal equal
268:23 - to e dot key
268:26 - e is basically this one so if the
268:28 - current matches the current index we are
268:31 - on then we want the opacity to be more
268:33 - right so it will be 0.9 otherwise it
268:36 - will be less
268:38 - opaque
268:40 - so we'll have 0.4 and here you can see
268:42 - we are getting this thing looks good and
268:45 - this was the entire Carousel image we
268:47 - had Carousel slider and then we had a
268:50 - row depending on where we were so now if
268:53 - I just try to you know go back and forth
268:56 - you can see we are getting the correct
268:58 - highlight on this
269:00 - now in the Tweet card we have to make
269:02 - certain changes again so we'll go at the
269:05 - top in the row you can see we have cross
269:07 - access alignment we have to pass in
269:09 - Cross access alignment dot start so that
269:12 - you know our Circle Avatar moves at the
269:14 - top not in the center then we will have
269:17 - another thing which is if you want to
269:19 - display the link so if tweet dot link
269:24 - not likes link dot is not empty so if
269:27 - tweet.link is not empty that means we
269:30 - can display a link
269:32 - and it has identified a link for us to
269:34 - display then we will leave some space
269:37 - from the top so if we have constant size
269:39 - box height 4
269:41 - and then we will install a package
269:43 - called any link preview this will open
269:47 - up a preview of any link as the name
269:50 - suggests of the package and to use this
269:52 - we just have to do any link preview
269:57 - we will get a link so we have to pass in
269:59 - the link which will be https colon slash
270:02 - slash
270:03 - dollar
270:06 - tweet dot link
270:09 - let's import the any link preview
270:12 - package save it and here it is and it's
270:16 - not displaying as of now because we have
270:18 - to restart the application
270:20 - so let's restart it and while that is
270:22 - happening let's get on to the next step
270:24 - which is the icon buttons to show up
270:28 - below the
270:29 - tweet so basically like comment all of
270:32 - those things so here we are going to
270:34 - have another feature or another widget
270:37 - called tweet icon button
270:41 - dot dot we will import material dot for
270:44 - it we are going to create a stateless
270:45 - widget called it tweet icon button
270:50 - then we are going to have final string
270:53 - path name the path name is the name of
270:57 - the part to the flutter SVG icon that we
271:00 - are going to use
271:01 - then we are going to have final string
271:03 - text so what is the counter how many
271:05 - tweets have happened so how many
271:07 - retweets have happened how many likes
271:09 - have happened all of those stuff
271:11 - and avoid call back tab so we avoid
271:14 - callback on tap
271:18 - now we just need to
271:21 - generate a Constructor for all of this
271:23 - and now we are going to return a gesture
271:26 - detector so any of this is Click what
271:28 - should happen
271:29 - and in the on Tab we'll pass in the on
271:32 - Tab and in the child we are going to
271:34 - have a row and in that row we are going
271:36 - to have children of SVG
271:37 - picture.asset.first
271:40 - and what is the path name well that will
271:42 - be decided from The Constructor whatever
271:44 - value is passed through the Constructor
271:46 - then we need a color and color will be
271:49 - palette dot gray color
271:53 - then we need text
271:56 - and the text will be text that's from
271:58 - The Constructor again and style will be
272:00 - constant textile
272:03 - font size 16. so it should be smaller
272:07 - than the
272:08 - tweet text that is showed up
272:12 - and obviously we need some margin so we
272:14 - can have a container
272:16 - and have margin constant Edge and such
272:19 - dot all
272:21 - six
272:24 - save this much
272:25 - you can see our links are also showing
272:28 - up but I don't want my link to show up
272:30 - like this I want it in another format
272:33 - which is
272:35 - which can be changed through display
272:37 - Direction which is UI Direction dot UI
272:41 - Direction horizontal
272:43 - and now
272:44 - it's in a different format I like it in
272:47 - this format so after this link we need
272:50 - to pass in our tweet icon button that we
272:52 - just created and before that we want a
272:55 - margin from top and right so we are
272:57 - going to wrap it with a container so
272:58 - that everything doesn't stick together
273:00 - right so we have container
273:03 - then we have margin and then we are
273:06 - going to have constant Edge inside dot
273:08 - only from the top I want 10 and from the
273:12 - right I want 20. and the child will be a
273:15 - row and the row will have children and
273:18 - the first child in this is going to be
273:20 - tweet
273:21 - I can button there's going to be path
273:23 - name so the path name is going to be
273:25 - assets constants Dot View icon
273:30 - the text is going to be 0 as of now
273:34 - and the on tap is going to do nothing
273:39 - let's see how this looks here it is
273:41 - looking good
273:42 - also I can have main access alignment as
273:45 - main access alignment dot space between
273:46 - so that when you have more icons it will
273:49 - look better not congested
273:53 - now also in the text I just realized the
273:56 - views can be counted like tweet dot
273:59 - comment IDs Plus
274:02 - not plus comment ids.length Plus
274:06 - tweet.reshare count dot length
274:09 - this doesn't require link because it's
274:11 - just integer and then tweet dot likes
274:14 - dot length
274:15 - and convert all of them to a string and
274:18 - display it out so this has zero right
274:20 - now
274:21 - now the next tweet icon button is
274:26 - of comment so we have comment icon
274:29 - and this is just going to have
274:32 - tweet dot comment IDs dot length Dot
274:37 - tostring
274:39 - so let's remove this and this looks good
274:41 - now the third icon we need is a retweet
274:44 - icon so we can have retweet icon and
274:47 - this will be
274:49 - reshare count
274:51 - dot to string
274:54 - great now the third fourth button that
274:58 - we need is a like button for now we are
275:00 - going to have this but like button it's
275:04 - going to be a little bit different
275:06 - because of the animation we are going to
275:08 - add to it and the text is going to be
275:10 - likes dot length dot to string
275:14 - and the final button we are going to
275:15 - have here is not going to be a tweet
275:17 - icon button it's actually going to be
275:18 - just an icon button because I didn't
275:21 - find the need to find
275:23 - an icon for it and it's going to be
275:26 - constant I can ikins Dot share
275:30 - underscore outline now if you see a wire
275:33 - this looks good you can change its size
275:36 - by having size as 25 and color AS
275:39 - Palette dot gray color now let's just
275:42 - leave a space after this container so we
275:46 - have constant size box of height
275:49 - 1 and at the end of this column you see
275:52 - this was a big row I told you that we
275:54 - added the parent column so that we could
275:56 - add a divider at the end so I'm just
275:58 - going to have a constant divider over
276:01 - here and this divider is going to have a
276:04 - color of palette dot gray color
276:08 - sweet and now we have this this looks
276:10 - superb if you put this divider over here
276:14 - instead this will only cover this part
276:17 - of the row
276:18 - that's why we didn't add it over here we
276:20 - added it right below the last column and
276:24 - this looks much more better
276:28 - and this also concludes the entire UI
276:31 - right
276:31 - now other things like the like animation
276:35 - replying part the retweeting part we'll
276:38 - add them as and when we get to it right
276:41 - we just don't want to mess everything up
276:43 - and put everything together
276:45 - the next focus of this app is going to
276:48 - be making
276:49 - stuff real time so basically if I try to
276:52 - you know tweet here like hello
276:55 - and tweet it out
276:57 - come over here you can see Hello is not
277:00 - shown
277:01 - this hello is the previous hello three
277:04 - hours ago not the current one only when
277:06 - I restart my app
277:08 - can I see the hello here
277:11 - so I want this
277:13 - hello to show up real time so we'll have
277:15 - to use real Time That's provided by app
277:18 - right over here and it's going to be
277:20 - very fun so let's get into it but before
277:22 - that let's see why our UI looks so off
277:25 - with this part right here we have three
277:28 - buttons over here we have an image but
277:30 - this looks very weird because it takes a
277:33 - lot more space than expected one problem
277:36 - is the high touch taking so if we come
277:39 - back over here we remove this height and
277:42 - come back you can see it takes only that
277:44 - much height that it's needed it doesn't
277:46 - require
277:48 - all the height correct
277:51 - and these buttons over here they are not
277:53 - centered we want them to be centered so
277:55 - we can have main access alignment as
277:57 - main access alignment Dot Center and now
277:59 - they're right in the center and this
278:01 - looks more Compact and better
278:03 - now let's get started with real time so
278:07 - to get started with it we are going to
278:08 - go to the Tweet API create our abstract
278:11 - class which is to get latest tweet so in
278:13 - the abstract class here we are going to
278:15 - create a stream this real time gives us
278:19 - a stream and it will give us a stream of
278:22 - something known as a real-time message
278:24 - and it is going to give us one latest
278:27 - tweet so let me just type it out get
278:29 - latest tweet it's not going to give us
278:32 - you know a list of tweets that are new
278:34 - or anything like that it will give us
278:36 - one single tweet that just came in real
278:39 - time works like socket so it is just
278:42 - going to give you the latest event that
278:44 - it has and just present it to you so
278:46 - that you can display or do whatever you
278:48 - want to do with that so now I'm just
278:50 - going to create one missing override
278:51 - Come Away up and now
278:55 - we have to use real time now to use real
278:58 - time of course we'll have to import it
278:59 - from The Constructor so let's have final
279:02 - real time underscore real time here
279:06 - then we are going to require this so we
279:08 - have required real time
279:10 - real time
279:11 - and then underscore real time should be
279:14 - equal to real time that we are getting
279:16 - from the parameter here
279:19 - easy now we can go down also let's see
279:21 - why we are getting this error we have to
279:23 - provide real time now real time is
279:26 - provided by app right and for every
279:30 - single app right
279:32 - dependency we have created a provider so
279:35 - let's just go over there and create a
279:37 - last provider which is the app right
279:40 - real-time provider you can see how our
279:43 - work is getting reused every single time
279:45 - we use a provider we don't have to
279:47 - continuously create instances
279:51 - only one time we have to create this and
279:53 - it works well for us in the entire
279:55 - application
279:57 - here let's just provide real time which
279:59 - is ref.watch real time
280:02 - app right real-time provider
280:06 - now we can come down here and return
280:08 - something so we need to return whatever
280:11 - will be returned so let's just call real
280:12 - time and see what it does so if we do
280:15 - real time and if we do subscribe you can
280:18 - see we can subscribe to a list of string
280:20 - of channels so let's just first have a
280:23 - string and then just see what subscribe
280:27 - method gives us it gives us a real-time
280:29 - subscription but here we want to return
280:31 - a stream of real-time message
280:34 - so over here we have something known as
280:36 - dot stream it will convert this into
280:39 - this format
280:41 - now we need to subscribe to a particular
280:43 - Channel now what are these particular
280:45 - channels you can find a list of them on
280:48 - the app right documentation it's present
280:50 - over there
280:51 - or otherwise if you want to understand
280:52 - it logically from
280:54 - the point of view of database so let's
280:57 - just go over there
280:58 - we are going to use real time for
281:00 - databases so if there is any changes
281:03 - made in the database in a particular
281:05 - collection or in a particular document
281:06 - we're going to track it through this
281:09 - subscribe method of real time but if you
281:12 - want to do the same for storage so for a
281:15 - particular file or a bucket you can do
281:18 - that and
281:20 - the channel name for it is present in
281:23 - the description below
281:24 - basically you'll find the app right
281:26 - documentation where you can find
281:28 - literally everything well written
281:30 - so let's just go to the database now
281:32 - let's understand what we need to track
281:34 - we need to track the tweets collection
281:36 - and see if any tweet is being created
281:38 - right
281:40 - so for that what are we going to do to
281:43 - understand that let's go to the main app
281:45 - right dashboard
281:46 - the first thing we need to do
281:48 - when we are in our project is go to the
281:51 - databases so we need to enter a database
281:53 - ID right so here we can just have
281:56 - databases Dot
281:59 - so it will go to the databases and then
282:02 - we want to go to the particular database
282:04 - ID so now when we go to the particular
282:06 - database ID we need to enter that as
282:08 - well and a database ID is present in app
282:11 - right constants dot database ID now
282:15 - after databases where do we want to go
282:17 - to a collection and that is the tweets
282:19 - collection so we can just write dot
282:21 - collections over here
282:23 - and after that dot dollar app right
282:27 - constants
282:29 - dot which collection the tweets
282:31 - collection because we want to see if any
282:33 - tweet is being created
282:34 - and then
282:36 - we just want to keep track of the
282:38 - documents we don't want to track any
282:40 - particular document because we want to
282:42 - track if a new tweet is being created or
282:45 - not so here we are just going to have
282:47 - dot documents and that's our entire
282:51 - Channel we go to a database by and then
282:54 - pass in the database ID then we want to
282:56 - go to the collections pass in the
282:58 - collection ID and then we keep track of
283:01 - the overall documents not just one
283:03 - particular document if you want to do
283:05 - that you can do document dot dollar app
283:07 - right constants with a particular
283:10 - document ID but not that for my case
283:13 - right sweet so our get latest tweet is
283:17 - now done it will give us the latest
283:19 - tweet that it gets if it doesn't give
283:21 - any latest tweet there will be a loading
283:23 - indicator
283:24 - you'll understand that when we write the
283:28 - code for it in the UI file but before
283:30 - that we need to convert
283:33 - we don't even need to convert it
283:34 - actually
283:36 - I was going to say that we need to
283:37 - convert this real-time message that it
283:39 - gets
283:40 - in the form of
283:43 - a tweet but we don't need to do that
283:45 - because in the UI file we need to check
283:48 - some things we need to check that
283:52 - if the Tweet is being created or it is
283:54 - being updated or it is being deleted
283:56 - whatever
283:57 - here we have just told we need to keep
283:59 - track of the documents don't forget to
284:01 - put the S over here
284:03 - we need to keep track of the documents
284:05 - but we don't know what event is
284:07 - happening on it it can either be
284:09 - creation deletion whatever
284:11 - so for that we are going to create a
284:13 - stream provider
284:16 - and let's just call this get latest
284:18 - tweet provider
284:22 - will remove the async star we are going
284:26 - to get an instance of the Tweet API
284:28 - directly we're not going to get an
284:30 - instance of tweet controller what we
284:32 - have been doing till now because we are
284:34 - not going to register this function in
284:36 - the Tweet controller because we don't
284:38 - have any job for it
284:41 - so now we can just have final tweet API
284:44 - is equal to ref dot watch tweet API
284:48 - provider and now we can return tweet API
284:51 - dot get latest tweet of course you can
284:54 - put this function
284:56 - get latest tweet in the Tweet controller
284:58 - as well and just call underscore tweet
285:01 - API Dot
285:02 - get latest tweet and then use the
285:05 - controller over here but why do we have
285:07 - to do so much when there's literally
285:09 - nothing happening in the controller for
285:11 - it
285:13 - so we just have this now of course if
285:15 - you want you can add Auto dispose Auto
285:17 - dispose
285:19 - will Auto dispose your provider and it's
285:22 - always a good thing to add beside every
285:24 - provider I forgotten to do that so go
285:27 - ahead add Auto dispose everywhere it
285:30 - will be mentioned in my GitHub
285:31 - repository so if you are referring to
285:33 - that I'm sure you'll find
285:36 - Auto dispose over there it's similar to
285:39 - dot family so these are two modifiers on
285:42 - providers
285:43 - you'll get them on stream future
285:45 - providers you'll also get it on the
285:48 - normal provider anyways now let's go to
285:51 - our
285:52 - create tweet View
285:54 - not create tweet view sorry the Tweet
285:56 - list and here we are also going to watch
285:59 - for getting the latest tweet so right
286:03 - now we are just watching the get tweets
286:04 - provider which is a future provider now
286:07 - we want to do it real time and if there
286:09 - is any changes in real time
286:11 - we are going to display it in the UI if
286:13 - you don't understand this I'll explain
286:15 - it to you through a diagram so we have
286:18 - our device over here
286:20 - a very slim device
286:22 - and we have a list of tweets that are
286:24 - showing up okay now these tweets are
286:26 - powered by Future provider as of now
286:30 - they are not real time they basically
286:32 - build only once when the app is loaded
286:35 - and since we are using stack even if we
286:38 - go here and come back it's not going to
286:41 - change what I mean by this is since we
286:43 - have used index stack and if we scroll
286:45 - down it will process the state and it
286:47 - will come back
286:49 - to where we had scrolled basically it's
286:52 - not rebuilt in this entire project
286:55 - so the future provider is not going to
286:57 - get rebuilt anytime
286:59 - but now what we want is our app
287:02 - look real time now to make it look real
287:05 - time you had added real time which is
287:07 - something provided by app right and no
287:10 - external configurations are required for
287:11 - it
287:12 - so after we get those latest tweets we
287:14 - are just checking if another tweet is
287:16 - being created or not if it is being
287:18 - created we can get it from the real time
287:22 - so here instead of returning list view
287:25 - Builder directly
287:26 - what we are going to say is have
287:29 - basically another real-time provider
287:31 - here it constantly listens to any
287:32 - changes in our mentioned channel the
287:35 - channel what was what we had mentioned
287:37 - over here
287:40 - so it continuously listens
287:42 - and if there is any change so if there
287:44 - is create update
287:46 - it will directly affect in our
287:48 - application that's how we are going to
287:49 - create it
287:50 - so the data from future provider shows
287:52 - up but the data real-time provider gives
287:55 - us will be added to our data to be
287:58 - rendered on the screen if you don't
288:00 - understand this let's write the code and
288:02 - I hope you'll understand after that
288:05 - so right now what I want to return here
288:07 - is not a list view Builder I'll just
288:09 - comment it out I want to return
288:13 - ref dot watch get latest tweet provider
288:17 - dot when
288:19 - and when we have data when we have error
288:23 - along with stack Trace
288:26 - and when we have loading we have to
288:29 - handle all of these states
288:35 - so this is what we want to return now in
288:37 - case of error and loading we add this
288:40 - but in case of data what do we want to
288:42 - show well that's the point we are
288:45 - getting a real-time message here so
288:46 - let's see what real-time message gives
288:48 - us it gives us channels so the channels
288:51 - we subscribe to
288:53 - events so what events are happening
288:56 - payload so what data is there inside of
289:00 - the real-time message so basically what
289:04 - exactly is the data that got modified
289:08 - that will be mentioned the timestamp so
289:10 - what time was it updated or created
289:12 - whatever
289:13 - so we have all of this now what matters
289:16 - to us is first we want to check if the
289:18 - data was created or it was updated so if
289:21 - it was created then we want to insert it
289:24 - into our array and our array is
289:27 - tweets.link we want to insert it into it
289:30 - but if it was being modified then we
289:32 - want to send the modified data inside of
289:35 - this tweets array
289:37 - so let's write the code for this we are
289:39 - just going to check if data dot events
289:42 - so what was the event was it being
289:45 - created or updated
289:47 - so
289:48 - this gives us a list so you want to
289:50 - check if data.events contains some event
289:55 - so what is the event we are looking for
289:57 - well it's very similar to this let's go
289:59 - to our tweet API
290:02 - so we have this and then we pass that in
290:05 - so we have if database dot
290:08 - events.contains databases and here we
290:10 - are going to have dots tar that means
290:13 - anything any database and the collection
290:16 - should be apprite.tweets collection so
290:19 - let's have that
290:20 - dot documents
290:22 - Dot
290:24 - any document dot create now I'll explain
290:27 - this code to you but let me just
290:31 - format this a little bit so what just
290:34 - happened here so if data events contains
290:37 - this part so the data that we got right
290:40 - now
290:41 - if it was being created
290:45 - then what do we want to do so to check
290:47 - if it was being created we went to
290:49 - databases dot star so it can be any
290:52 - database I've done this any because
290:54 - right now we just have a testing
290:56 - database that means a debugging database
290:58 - if you release this app on production
291:00 - you'll create a new database how will
291:02 - you do that if you go to the app right
291:04 - console go to your Twitter clone
291:06 - application
291:09 - in the databases tab you can create a
291:11 - new database you can see that so I did
291:13 - dot star so that it works everywhere dot
291:16 - collections
291:18 - and then the upright tweet collection
291:21 - dot documents.star so we want to check
291:24 - for any document not just one document
291:26 - any document and if create
291:29 - is there then what do you want to do we
291:31 - want to update the tweets because that
291:34 - is being returned in the list view
291:36 - Builder correct
291:37 - so let's just take this and put it right
291:41 - here outside of the if condition inside
291:44 - this get latest tweet provider
291:47 - so if it is being created what do I want
291:49 - to do I just want to show it up in the
291:52 - list so we have tweets that is being
291:54 - used
291:55 - to display
291:58 - the tweets over here right
292:00 - so I can just have tweet dot insert now
292:04 - we can do tweets dot add or we can do
292:07 - tweets dot insert we are using tweets
292:10 - dot insert not tweets Dot
292:13 - add because tweets.ad will add the
292:17 - tweet at the last of the list we don't
292:20 - want to add it in the last of the list
292:22 - we want to add it at the top
292:24 - so here we are just going to have twitch
292:26 - dot insert 0 so if we do it at 0 it will
292:29 - come right at the top of the list and
292:32 - then we want to specify the element
292:33 - right
292:36 - don't worry using insert will not
292:38 - replace any element all the other
292:40 - elements will shift and insert will just
292:43 - add
292:44 - the latest tweet
292:46 - to the start
292:49 - and now we can just have tweet
292:51 - Dot from map and then we'll pass in data
292:54 - dot payload I told you payload contains
292:57 - the data
292:59 - the actual data so we can just use
293:01 - payload so every time this happens
293:04 - we are going to insert 0 comma
293:09 - data dot payload and this is cool so
293:11 - let's restart our application
293:14 - and here you can see we're continuously
293:16 - getting the loading indicator now if you
293:18 - want to check which loading indicator is
293:20 - this this one or this one
293:23 - you can go ahead and print it but I know
293:26 - that this is coming from this loading
293:28 - because earlier this works fine now why
293:30 - are we getting this loading now how
293:33 - Real Time with upright works is
293:36 - it keeps on loading until we get a
293:39 - trigger so basically until an event gets
293:43 - created so until this create or update
293:47 - or anything happens
293:48 - we keep on getting the loading indicator
293:53 - and if you don't use riverpod you won't
293:56 - even get to know that it is being loaded
293:57 - you won't get anything in the terminal
294:00 - you won't see anything on the screen
294:03 - but inside of it it's not actually
294:05 - loading it's just saying that it doesn't
294:07 - really have any data right now
294:10 - so it just keeps on loading over here
294:14 - because data loading is the state where
294:17 - there is no error and there's no data
294:19 - right so how can we fix this problem
294:23 - well my solution to this was just
294:25 - returning a list view Builder away up so
294:28 - the exact same listview Builder that we
294:30 - are having over here can be passed in
294:32 - the loading indicator and now if we
294:34 - restart
294:36 - we get the Tweet showing up
294:40 - correct
294:42 - and now if you want to test our logic
294:44 - over here
294:45 - we can go ahead create a tweet so I'll
294:48 - just say hello what's
294:51 - up
294:52 - and I can click on Tweet now if I go
294:55 - back you can see in real time hello
294:57 - WhatsApp shows up
294:59 - if I remove this line these two Logics
295:02 - and try to
295:04 - rerun the application you'll see that
295:06 - real time doesn't work we'll have to
295:07 - reload the entire application but with
295:09 - real time everything works well real
295:11 - time
295:12 - now if you're still not clear about the
295:14 - loading indicator and how this entire
295:16 - process work let me brief you through it
295:18 - if you have understood make sure to skip
295:20 - forward
295:22 - to the next part
295:24 - so basically what we're trying to do
295:26 - here is just
295:27 - getting the tweets provider first so we
295:30 - have a list of tweets with us
295:32 - after we get the list of tweets with us
295:34 - we are continuously checking if you are
295:36 - getting any latest tweet provider or we
295:39 - are not getting any latest tweet
295:42 - so once we get the latest tweet
295:45 - we are going to get a data and you have
295:47 - your checking if the create
295:49 - is being triggered on a document if the
295:51 - create is triggered on a document we
295:54 - just convert it to a tweet model using
295:56 - the data.payload which consists of the
295:58 - tweets data
296:00 - and insert it to the top of the list
296:04 - and since this has changed our list view
296:06 - Builder will also change and it will
296:08 - rerun this part
296:10 - but what about the loading part what did
296:12 - I mention there well you saw
296:14 - continuously the loading indicator was
296:16 - being run
296:17 - that was because there was neither any
296:19 - data nor was there any error because
296:22 - real time gives us
296:25 - data
296:27 - only when a certain event is triggered
296:30 - so if a create function is triggered
296:32 - update
296:33 - delete
296:35 - any of this is called only then will
296:37 - data have some value otherwise it will
296:40 - have no value it will
296:42 - no have no error it will just keep on
296:45 - loading
296:46 - so to fix that what I did was add a list
296:48 - view Builder here
296:50 - so as long as it's loading just show a
296:52 - list view Builder
296:54 - but anytime we get some data over here
296:56 - which is a stream provider right so it
296:58 - can continuously listen so as soon as we
297:01 - get some data this will get triggered
297:04 - and this entire function will run so
297:06 - we'll come over here now if you still
297:07 - don't understand I would recommend you
297:09 - to print
297:10 - the loading over here
297:12 - and print data aware and see how it's
297:14 - working by restarting the application
297:17 - that will give you a sense of what's
297:18 - Happening
297:19 - okay so now the next thing that we need
297:22 - to work on is if you see when we restart
297:24 - the application our hello WhatsApp goes
297:26 - down I want my latest tweets to show up
297:29 - right at the top
297:30 - so what I can do is go to my tweet API
297:34 - in my get tweets function I'll add
297:37 - something known as queries queries will
297:40 - allow me to add like queries to my
297:43 - application through which I can make
297:45 - many changes to add queries you can just
297:47 - do query Dot and you can see a ton of
297:50 - options it gives you closer after
297:53 - because of before these two are used for
297:56 - pagination and they are very efficient
297:58 - there's limit also used with apagenation
298:01 - offset also used for pagination their
298:05 - uses can be seen in the
298:08 - upright documentation or if you want I
298:11 - can create a separate tutorial on it I'm
298:13 - not going to cover pagination in this
298:14 - tutorial
298:16 - then we have order ascending or order
298:18 - descending so basically in what order do
298:20 - we want to arrange our tweets well for
298:23 - us order descending order ascending is
298:26 - what is showing up here the
298:31 - last weeks
298:33 - or the older tweets show up first
298:36 - but we want it in an opposite order
298:38 - order descending and what is the
298:41 - attribute so what is the property
298:43 - According to which we should
298:46 - put it in the descending order well it's
298:49 - because of the time so we'll just have
298:51 - tweet it at So based on tweeting ad I
298:54 - want my documents to be listed other
298:56 - queries here are equal to greater than
299:00 - search we are going to use some of them
299:02 - later on in the application when we go
299:04 - to the searching users part
299:07 - but for now let's restart our
299:09 - application and here you can see we are
299:11 - getting this error we're getting this
299:13 - error because whenever we create an
299:15 - attribute
299:16 - or a query we need to register it in our
299:19 - database so here you can see whenever we
299:21 - have a new property to add we can add it
299:24 - over here but whenever we have some
299:26 - index to be added this is all index
299:30 - so whenever we add indexes to add we
299:33 - need to click away our create index so
299:35 - what is this index
299:36 - going to be called
299:38 - tweet defending
299:41 - then the type of this index is key
299:45 - the attribute here is
299:48 - tweeted at and the order should be
299:50 - descending now I'll click on Create and
299:53 - our index is now created now if I try to
299:56 - run my application you can see this
299:58 - works six minutes First shows up then 17
300:01 - hours 20 hours 21 hours
300:06 - now if I again try to create a tweet
300:08 - let's say hello
300:10 - with many exclamation marks but other
300:13 - thing is whenever I click on tweet I
300:15 - don't pop off the screen so to pop off
300:17 - the screen I have to go back
300:19 - to the create tweet view where we have
300:22 - created on
300:24 - sharing tweet we just have to call
300:26 - Navigator Dot
300:28 - pop
300:30 - we are not adding pop in the share tweet
300:33 - over here right after here we are not
300:35 - adding it over here the reason for that
300:37 - is
300:39 - this shared tweet will be reused in
300:42 - another
300:43 - feature which is replying to tweets
300:45 - anyways now let's try to tweet it out
300:48 - and our screen is popped off and if we
300:51 - just go up you can see Hello with many
300:54 - exclamation marks showing up our app is
300:57 - now real time now the next thing we need
300:59 - is this like button we want this light
301:02 - to work so the first thing we are going
301:04 - to do is animate the like button to
301:07 - animate the like button we have to go to
301:09 - the Tweet card and here first of all
301:12 - I'll just add a dependency of like
301:13 - underscore button this button gives us
301:16 - the nice
301:17 - animation of Twitter
301:21 - and here we want to scroll down and we
301:24 - want to replace the like outlined icon
301:27 - with this like button so we have like
301:29 - button over here let's have that
301:32 - and now we'll give it a size of 25 so
301:35 - that it matches with every other icon
301:38 - then you have to have a like build up so
301:41 - basically if it is liked what do we have
301:43 - to build
301:45 - I'm based on this like so I'll have is
301:47 - liked so if it is like let me just have
301:50 - this so if it is like then I want to
301:53 - return so I'll just have return is like
301:56 - and if it is like then I want to return
301:58 - SVG picture
302:01 - dot asset and I want like filled icon so
302:05 - I can just copy this
302:06 - and just have like filled icon
302:10 - and obviously if it is not then I'll
302:14 - have
302:16 - this thing but with like outlined icon
302:21 - okay now I just need to mention the
302:24 - color and stuff
302:25 - so if it is filled we are obviously
302:27 - going to get the red color
302:29 - so I'll have color palette dot red color
302:32 - mind if it is not then I want color to
302:36 - be palette Dot
302:37 - gray color
302:40 - all right now let's see if I try to
302:43 - click over here nothing really happens
302:46 - let me just remove this
302:50 - and now if I try to do this you can see
302:52 - we are getting the nice
302:54 - effect
302:55 - now after this we also want to show the
302:57 - like count so we'll have like count and
302:59 - like count is basically tweet dot likes
303:02 - dot link
303:04 - we'll save it and here we see the
303:07 - counter but now I also want to change
303:09 - the color of this counter so now how can
303:11 - I do that I can just have count Builder
303:14 - passed in
303:15 - it will give me these three properties
303:17 - like count is light and text so here I
303:20 - can just pass in
303:24 - a text I'll return text and pass in the
303:28 - text
303:31 - with a style and the style is going to
303:34 - be textile
303:37 - and really depends
303:39 - what should be the color so the color
303:42 - can be
303:43 - red if the
303:45 - to eat as light and if it's
303:48 - not like then it should be white so we
303:51 - can have
303:52 - if it is liked so is like so if it is
303:57 - like then I want to have
304:00 - palette dot red color otherwise palette
304:04 - Dot gray color and obviously mention
304:08 - your color
304:12 - I also need the font size so we can have
304:14 - font size and person 16 over there
304:16 - because right now it feels very small
304:18 - now I can save this much go away
304:21 - it still looks out of place because this
304:24 - should be white color now after having
304:26 - this it matches with the rest of the
304:29 - things
304:30 - but still let's just add a little bit of
304:33 - padding from left so I can just have a
304:36 - padding widget
304:38 - and from the left I want two to be
304:42 - present I'll save it and this matches
304:45 - with other things now
304:47 - so if I click over here
304:48 - the counter increases and if it's not
304:51 - then it doesn't
304:52 - now we want to get into the actual
304:54 - liking part so I'll go to the Tweet API
304:57 - and here we are going to create our next
305:00 - function in our abstract class which is
305:03 - going to be
305:04 - liking the Tweet so we're going to have
305:07 - future either document we are having
305:09 - future either not future because as I
305:13 - said not everything that our future
305:15 - needs to be in the future provider and
305:17 - we'll get like tweet over here and we'll
305:19 - just accept tweet from the model aware
305:22 - now we'll create a missing override for
305:24 - this go down
305:26 - pass in async then we need a try catch
305:29 - block all of those stuff I would
305:32 - recommend you to type it I'll just copy
305:34 - it and paste it down here
305:38 - okay great now after having this now
305:41 - let's understand how this liking feature
305:43 - works well basically I want to go to my
305:46 - particular document the particular tweet
305:48 - that has been clicked on and liked I
305:50 - want to go there I just want to increase
305:52 - the likes over here so basically I want
305:54 - to add likes to this array
305:58 - and this should work I like tweet is now
306:02 - complete this is exactly what's needed
306:04 - so I want to update this document
306:08 - so let's find if DB has anything like
306:11 - that and
306:13 - it does have an option of update
306:15 - document so we are going to use this
306:17 - we'll pass in the database ID The
306:19 - Collection ID the document ID the
306:22 - document ID is not going to be ID dot
306:24 - unique anymore because we want to update
306:26 - a certain document the document that was
306:28 - clicked on and we are getting the
306:30 - document ID from this tweet that we are
306:32 - accepting from the parameter so we can
306:34 - just tab tweet.id
306:37 - for the data we can pass in a map
306:41 - and here just say that you want to
306:43 - update one certain
306:46 - attribute over here which is the likes
306:48 - field and here I just want to pass and
306:50 - tweet dot likes okay
306:53 - if you're wondering why are we having
306:55 - tweet dot likes won't the likes be the
306:58 - same as before then well no because when
307:02 - we use this like tweet in our controller
307:04 - we're going to update this tweet model
307:07 - so when we are on this tweet we are
307:09 - going to update the user model to have
307:11 - the users like
307:13 - so the user's ID in it
307:16 - and then only we are going to send it to
307:18 - the API so basically we'll just go to
307:21 - the Tweet controller
307:23 - we will have a new function created
307:24 - which is like tweet and here we are
307:27 - going to get the Tweet model so
307:30 - basically whatever tweet we are going to
307:31 - have over here this is going to be the
307:33 - old tweet before the updating what does
307:37 - the Tweet look like
307:40 - and the user model of the current user
307:43 - we can get that from ref.watch as well
307:46 - but if we use it right now over here
307:47 - when the user clicks we will get an
307:50 - error because
307:52 - it will think
307:53 - that the uid is null you can try it on
307:56 - your own by using ref dot read current
307:58 - user provider
308:01 - dot value but you will get
308:04 - the error so we are directly getting it
308:06 - from the tweet
308:08 - card itself
308:10 - now we are going to have list of string
308:13 - of likes so what is the likes well it's
308:16 - just tweet dot likes right why are we
308:19 - storing this in the likes variable
308:21 - independently well because there's a lot
308:23 - of logic to put in here so if the Tweet
308:26 - is already liked suppose it's this way
308:28 - and the user again clicks on the like
308:30 - button we want to remove the like and if
308:32 - the
308:33 - like is not already there and we click
308:36 - on it we want to add it to the likes
308:39 - array so here we are going to check if
308:41 - tweet dot likes dot contains
308:47 - user.uid so if the Tweet like array
308:51 - contains the user's ID
308:54 - that means that the user has already
308:55 - liked it and it he has already clicked
308:58 - on the button so the case is right now
309:00 - like this the user has liked the tweet
309:03 - and we want to click on it so basically
309:05 - we want to remove the tweet to remove
309:07 - the Tweet what can we do we can just do
309:09 - likes dot remove and what should the
309:12 - value be well the user.uid
309:16 - so you want to remove the current user's
309:17 - ID else the Tweet dot likes does not
309:21 - contain the user ID and we want to add
309:23 - that user ID so we can have like likes
309:25 - dot add user dot uid simple
309:32 - now we will set tweet equal to
309:36 - tweet.copy with
309:38 - remember that copy with function that we
309:40 - created
309:41 - since the likes field is immutable so
309:44 - basically tweet dot likes as immutable I
309:47 - cannot update its value
309:50 - actually for an array I can do that
309:52 - but
309:54 - this cannot be done for
309:56 - another field so example tweet Dot
310:00 - ID
310:02 - you cannot set it
310:04 - to something else you know it will give
310:06 - you an error ID cannot be used as a
310:07 - setup because it's final
310:09 - so you cannot do this
310:12 - but you can do this for an array
310:15 - because we have not returned an
310:17 - unmodifiable array or mod unmodifiable
310:20 - list
310:22 - anyways
310:23 - we are going to have copy with so
310:25 - basically what we are doing is setting
310:27 - tweet equal to tweet.copy with so we
310:31 - want to update a field and the field as
310:33 - likes
310:34 - because we have updated the likes field
310:36 - according to our logic here
310:38 - and we are updating the Tweet
310:40 - accordingly so now the tweet
310:42 - has updated like number or the updated
310:45 - like array
310:48 - now I can just do final result is equal
310:50 - to await so let's put async over here
310:53 - and have a weight underscore tweet API
310:57 - dot like tweet and then we'll pass in
311:00 - the street and that's why we have
311:03 - directly put in like
311:05 - likes is tweet dot likes we do not have
311:08 - to do
311:09 - tweet dot likes dot add or remove all of
311:12 - the logic has been put in the controller
311:14 - over here
311:16 - and then we can just do res dot fold in
311:18 - case of a failure we don't want to show
311:21 - anything in case of a success we don't
311:23 - want to do anything
311:26 - why do we want to show nothing in case
311:28 - of failure because it's a like button
311:29 - that's clicked on have you ever seen a
311:31 - message that when you click on a like
311:35 - button you get any error so you don't
311:37 - want to show any error even if it is
311:39 - there and also you might notice that we
311:41 - have not
311:42 - set status equal to true and state is
311:45 - equal to false because whenever we like
311:46 - a tweet we don't see a loading indicator
311:49 - right
311:50 - that's why now we just need to bind this
311:52 - to our like button over here so we'll
311:55 - have an ontap function
311:58 - is like and now we are going to have ref
312:01 - dot read
312:02 - tweet control of Provider dot Notifier
312:06 - dot like tweet we know all of this now
312:09 - we have access to tweet as well which is
312:11 - the user tweet we are getting from the
312:13 - Constructor and we also have access to
312:18 - the user model
312:20 - which is
312:22 - the user who has created the Tweet but
312:26 - we don't want the user who has created
312:27 - the Tweet we want to
312:29 - have our own current user right we don't
312:33 - want to check with this logic that
312:37 - if the Tweet dot likes contains the
312:40 - person who has created the tweets their
312:42 - ID we don't want to check that we want
312:44 - to check if the tweet. likes contains
312:46 - our own uid
312:49 - so that's why this user won't work we
312:52 - have to get final current user which is
312:55 - equal to ref.watch
312:57 - current user details provider
313:01 - dot value and now we are going to check
313:06 - over here so if current user is null so
313:10 - if current user is equal equal to null
313:13 - then I want a loader to show up
313:17 - otherwise this or even if not a loader
313:21 - we want a size box to show up
313:23 - anything works now we can just come over
313:26 - here
313:27 - I have this and see why are we getting
313:29 - this error we're getting this error
313:31 - because it requires a future Boolean so
313:33 - to make a future we love ad async and
313:36 - now we want to return a Boolean
313:38 - so on tap should the like change so yeah
313:41 - it should change so vlab is like this is
313:45 - like variable gives us whether the Tweet
313:47 - was liked or disliked here we are just
313:50 - saying if it was like then we want to
313:52 - return opposite of Light which is not
313:54 - liked and if it was not like now it is
313:57 - liked right now we can restart the
314:00 - application
314:02 - and let's find this particular tweet the
314:05 - hello tweet
314:07 - it's this one only
314:09 - so now I'll click on
314:11 - like button over here
314:13 - I'll click on restart
314:15 - and we're not getting anything in our
314:18 - likes array the reason for that it's
314:20 - very simple if we go back to the
314:22 - settings
314:23 - the current user is only allowed to
314:25 - create or read it's not allowed to
314:27 - update or delete so you want to allow
314:29 - the updation as well now after updating
314:31 - let's go to back to our documents
314:33 - restart the app
314:36 - now if you click on hello
314:38 - you can see it was updated and if we go
314:41 - to our hello document
314:42 - the likes is present over there and if I
314:45 - again click over here the likes was
314:47 - removed if I reached fresh the light
314:50 - source remove this works fine but there
314:53 - is a problem if you see we're not
314:55 - getting the circled over here why
314:58 - and also if you see the view counter
315:01 - increased in real time
315:03 - no other tweet increased its view only
315:06 - this particular did so to make this
315:09 - animation work let's
315:11 - go to the like button and see
315:14 - there seems to be some problem with the
315:16 - is liked part so here we'll just add an
315:18 - is like the option so when is the like
315:22 - is light
315:23 - it requires a Boolean field so when it's
315:26 - like it is liked initially only when it
315:30 - is when tweets dot likes so let me have
315:34 - tweet
315:35 - dot likes dot contains my user ID so we
315:39 - have current user dot uid so if the
315:41 - Tweet dot likes contains the user ID
315:43 - then is light will be true otherwise it
315:46 - will be false and right now it contains
315:48 - it so if I remove it it doesn't contain
315:51 - it now if I put it back it contains if I
315:54 - remove it it doesn't if I put it back
315:56 - you can see it contains otherwise it
315:59 - doesn't now to give you the second
316:01 - answer that is
316:03 - why does this work why does this real
316:06 - time work well this is because of how
316:09 - the Tweet like button works this is not
316:12 - really happening real time because of
316:14 - our real time tweet list call over here
316:18 - the thing we've put here it's not
316:20 - happening because of that this is
316:22 - happening because this is how the like
316:23 - button package works it automatically
316:25 - updates it listening a task
316:28 - and since this update this will also
316:30 - update because tweet dot likes dot
316:32 - length increases now that we have this
316:35 - the like button also seems to be working
316:37 - the next part is now clicking on the
316:40 - retweet so whenever we click on the
316:41 - retweet this counter should update
316:44 - and a new tweet should be added with the
316:47 - same user's ID so this should be there
316:50 - the same tweet but above should be
316:52 - written that test retweeted or some
316:56 - other like Revan tweeted retweet it
316:59 - sorry so you want that tag to be
317:01 - appearing so first of all we'll start
317:03 - off by closing all the save files
317:06 - we'll again come to the Tweet API and
317:09 - here we're going to create a new
317:11 - function in our abstract class and this
317:14 - is called
317:15 - update reshare count because we only
317:17 - want to update the reshare account
317:21 - so this will be the exact same thing
317:23 - future either document but this time
317:25 - update reshare count
317:28 - we'll get a tweet
317:30 - this is exactly similar to the like
317:33 - feature but instead of adding a new
317:35 - likes array we are going to update the
317:39 - reshare count
317:41 - and this should be asynchronous and
317:44 - after updating the document we don't
317:46 - want to update the likes array we want
317:48 - to update the reshare
317:51 - count so if we go to the Tweet model and
317:54 - see what the name was it was a reshare
317:56 - count
317:58 - and this should be tweet.tree share
318:00 - count
318:01 - easy now similar to the like feature we
318:03 - are going to update this reshare count
318:05 - counter in our tweet controller so we
318:09 - can go over there
318:11 - we can copy this void like tweet and
318:14 - avoid
318:15 - re-share tweet
318:17 - so we get the current user so let's just
318:20 - type in that we want a current user and
318:22 - we also need a build context because if
318:25 - there is a problem while re-sharing
318:26 - because it is a big process
318:28 - we basically want to create a new tweet
318:31 - and save it to our database
318:33 - we will display an error in case of any
318:36 - error
318:37 - so what do we want to do here well let's
318:39 - just remove everything
318:41 - we will call reshare update reshare
318:44 - count and pass in the Tweet but now we
318:46 - have to perform the updating logic and
318:49 - after updating we also want to share the
318:51 - Tweet again right
318:52 - so that this retweet appears
318:56 - now here there's also another thing to
318:59 - be done which is updating the Tweet
319:01 - model
319:02 - here we want to add two important fields
319:05 - we want to add a field called final
319:07 - string
319:09 - retweeted by
319:11 - so who whom was this tweet retweeted by
319:14 - so we'll have required this dot
319:16 - retweeted by
319:17 - then we'll have string
319:20 - retweeted by sorry but it tweeted by
319:24 - let's copy this field so that we don't
319:26 - make any error
319:28 - then we'll pass it over here so it will
319:30 - be retweeted by retweeted bias not null
319:33 - then we want this dot retweeted by
319:35 - then we add it over here as well result
319:38 - dot add all
319:40 - retweeted by in a string should be equal
319:43 - to retweeted by
319:47 - then we'll have retweeted by map
319:50 - retweeted by
319:52 - otherwise an empty string
319:55 - we'll also add it to the tostring
319:57 - function retweeted by is Dollar
319:59 - retweeted by
320:01 - we'll add it to r equal equal to
320:04 - operator retweeted other dot retweeted
320:07 - by is equal equal to retweeted by
320:10 - and finally over here tweeted by dot
320:14 - hash code
320:15 - to be added now if you click over here
320:17 - and again try to generate the data class
320:20 - it will work for you no doubt about that
320:23 - but again you will get the idea
320:26 - over here like a normal ID we want it to
320:30 - be slash dollar ID so make sure you have
320:32 - that
320:34 - okay now coming back to this tweet is
320:37 - equal to
320:38 - Tweet now what we want to do is update
320:41 - the field over here not the likes part
320:43 - but the retweeted part so now initially
320:47 - the Tweet wasn't retweeted by anyone now
320:50 - it is retweeted by
320:52 - current user dot name so this is a guy
320:55 - who retweeted
320:57 - also way up in our share image tweet
321:00 - under share text tweet we get this error
321:03 - because we made it a compulsory field to
321:06 - be added so of course we'll have to add
321:07 - it over here as well but when there is
321:09 - no retweeted by so basically it is our
321:11 - own original tweet it is going to be
321:14 - empty and later on in our uiv will check
321:16 - if retweeted by a DOT is empty so if it
321:19 - is empty we don't want to display
321:21 - anything but if it is not empty there's
321:23 - some username then we will show that
321:26 - this was a retweeter tweet
321:29 - now we'll again put it here now we can
321:32 - go right at the top where our research
321:33 - tweeters
321:35 - and here what we want to do is set likes
321:37 - to an empty field
321:39 - so since this tweet is getting reshared
321:41 - we want to set the likes to an empty
321:43 - field the comment ID should be empty
321:45 - field because we don't want any comments
321:47 - or likes to be present now
321:50 - and the reshare count should be
321:53 - tweet dot reshare count plus one so the
321:57 - new reshare count is going to be the old
321:59 - reshare count plus one
322:02 - now we'll update the reshare count and
322:04 - send it across then we'll have rest dot
322:06 - fold in case of any error we want to
322:09 - show snack bar saying l dot message and
322:12 - in case of any success which is r
322:15 - we have to do one more task so we'll
322:17 - pass this as async right now we just
322:20 - updated the original tweets
322:23 - reshare count correct
322:26 - so we have updated its
322:30 - reshare count now we want to create a
322:33 - new tweet saying that this tweet was
322:35 - created and retweeted by so earlier when
322:38 - we added retweeted by likes and comment
322:40 - IDs they were not required when we were
322:42 - doing this part I just added them so
322:44 - that I don't have to do it over here
322:46 - here what I want to do is
322:49 - just have final rest 2 equal to await
322:54 - underscore tweet API dot share tweet
322:59 - so I want to share the tweet
323:02 - with this but of course I have to make
323:05 - one more chain your Tweet
323:08 - should be equal to tweet.copy with and I
323:12 - want to update the ID of the Tweet
323:14 - correct
323:15 - so the ID is going to be ID dot uni
323:21 - we are going to take this from upright
323:23 - only and the reshare count should be
323:25 - zero here we have updated the reshare
323:28 - count now we are again putting it back
323:30 - to zero after this updated reshare count
323:32 - function has been called
323:34 - and we are setting ID to a unique ID
323:36 - because earlier what we did was use the
323:39 - idea where we use the reshare account so
323:42 - this was original tweets ID and
323:44 - reshare.com now since we are creating a
323:46 - new tweet and a new ID on its own we
323:49 - need to update these fields
323:51 - so basically all of these three Fields
323:53 - weren't even needed here they can be put
323:55 - here but I just wanted to show that you
323:59 - can also put it over here it doesn't
324:01 - matter because the only things that are
324:03 - being called in update reshare count are
324:05 - the reshare count and the tweet.id so we
324:09 - cannot update the ID over here as ID
324:12 - dot unique
324:14 - okay you have to do it right below after
324:17 - this function is called
324:20 - great now after all of this is done we
324:22 - can just average 2 dot fold in case of
324:24 - any error so show the snack bar
324:28 - with l dot message and in case of right
324:31 - we don't have to do anything as of now
324:35 - now reset read functionality has been
324:38 - created I'll go to the postcard or the
324:41 - Tweet card and here where I have my
324:44 - retweet button
324:46 - I'm just going to call ref dot read
324:50 - tweet controller provider dot Notifier
324:53 - dot reshare tweet I'll pass in the Tweet
324:56 - the current user the build context and
324:59 - then get done don't use user aware
325:01 - otherwise it won't work for you it will
325:04 - actually give a very weird thing and you
325:07 - won't understand why
325:09 - I would recommend you to always use
325:13 - good names over here not just user and
325:15 - current user
325:16 - something more appropriate but it serves
325:20 - my understanding
325:21 - anyways now that you have this done
325:23 - let's restart
325:25 - now here I'll try to reshare a tweet
325:27 - actually once the reshare has been done
325:30 - here let's just say show snack bar
325:33 - it
325:35 - tweeter
325:36 - so what we have done over here is
325:38 - updated the reshare count on the
325:40 - original tweet and we have shared the
325:42 - Tweet again so that it appears on Opera
325:45 - file now if I click on one of this I'll
325:49 - click on hello
325:50 - you can see we are getting invalid
325:52 - document structure because we have added
325:55 - a new tweet I always forget to do this
325:57 - thanks to the error messages they always
325:59 - tell you the right thing so now I just
326:02 - want to add a new attribute called
326:04 - retweeted by which is going to be a
326:07 - string
326:09 - with size let's say 255 required
326:14 - create
326:16 - now I can restart
326:18 - and since we're getting this error I
326:21 - can't seem to resolve it to be honest so
326:23 - I can just delete all the fields let's
326:26 - just delete every single thing
326:29 - so I can have my database empty now I'll
326:32 - restart my app
326:34 - this is all empty I can just type hey
326:37 - over here I click on tweet I have this I
326:41 - can click on like so like is there
326:43 - I can click on retweet and the retweet
326:46 - has taken place
326:48 - and if I like it and then retweet you
326:51 - can see there is retweet happening the
326:54 - original likes are maintained new tweets
326:56 - are being created and they show up real
326:58 - time because of our app right real time
327:01 - configuration and logic
327:03 - but the counter is not updated on the
327:06 - tweets you are retweeting
327:08 - but if we restart
327:10 - the counter is being updated
327:13 - you can see one is over there one is
327:15 - over here that means it is updating in
327:18 - app writing we want to update it your
327:20 - real time and another problem that I
327:22 - have is retweeted by not showing up so I
327:25 - want these two things to happen first
327:27 - we'll work on the Tweet card where
327:30 - we will add the retweet part so you can
327:32 - see there we have added a comment of
327:34 - retweeted we will replace this with our
327:37 - own retweeted by and here again we are
327:40 - going to have a row
327:42 - and in this row we are going to have
327:43 - children and the first child in this is
327:46 - SVG picture dot asset
327:49 - where we show the retweet icon so we
327:52 - have asset constants dot retweet icon
327:57 - color will be palette dot gray color and
328:01 - the height will be 20. we'll increase it
328:03 - from the normal height
328:06 - after this we will leave some width so
328:08 - we have constant
328:10 - sized box of width
328:13 - let's say 2
328:17 - and then we are going to have a text
328:19 - saying that this guy retweeted
328:23 - so here we love dollar
328:27 - tweet Dot
328:29 - tweeted by and we have to put all of
328:32 - this in a string because you want to
328:34 - type this username guy has retweeted
328:39 - and now you can see we are getting all
328:42 - of this but
328:43 - there are some problems
328:45 - this retweeted shows up even for the
328:48 - people who have not retweeted so here
328:50 - we'll just add if tweet dot is retweeted
328:53 - or the retweeted by sorry
328:56 - is not empty so if this is not empty
328:59 - only then we want to show this otherwise
329:01 - just remove this
329:03 - and this doesn't show up for this time
329:05 - now the next issue I have is the font
329:07 - size so let's increase it so we'll have
329:09 - style constant textile
329:13 - where the color will be colors or
329:16 - palette dot gray color
329:19 - font size will be improved to 16 and
329:22 - font weight will be font weight dot w500
329:25 - a little bit bolded so that you know it
329:28 - differentiates from the username below
329:31 - and this looks good so whenever we
329:34 - retweet it shows up
329:36 - now if I try to retweet something you
329:38 - can see retweeted
329:40 - he shows up test retweeted is also there
329:43 - but now we want to update the counter
329:45 - over here in real time
329:47 - why is it not being updated
329:49 - even though we have something present in
329:52 - the Tweet list right we have added the
329:54 - create trigger but that's the problem we
329:56 - have added the create trigger it doesn't
329:58 - listen for the update trigger we have
330:00 - updated the like count we have updated
330:02 - the retweet count correct
330:05 - so here we'll just have an else block
330:07 - so else or else if
330:11 - else as if the data dot events so let me
330:15 - just copy this correctly
330:17 - else if data dot events dot contains
330:20 - databases dot star all of this but this
330:23 - should be update
330:24 - so if this is updating then what do we
330:27 - want to do
330:28 - so to update what do we want to do in
330:30 - case of create we directly insert it but
330:32 - in case of updating we basically want to
330:35 - get the ID of the Tweet we want to
330:38 - remove that tweet
330:40 - and then we want to replace it with the
330:42 - updated tweet so for that we need the
330:44 - Tweet ID we need the index of the tweet
330:47 - in this tweets array and then we want to
330:50 - update it okay so this should be fairly
330:52 - straightforward first we want to get ID
330:54 - of tweet so to get ID of the Tweet we
330:57 - can just have final tweet let's call
331:00 - this variable tweet equal to
331:03 - and we can just have tweet Dot from map
331:07 - and then we'll pass in data dot payload
331:11 - and now
331:13 - tweet ID will be final tweet ID which is
331:16 - equal to tweet dot ID
331:19 - this is final because its value is never
331:21 - going to change after this but this is
331:23 - variable because later on we're going to
331:25 - replace this this is the old tweet
331:27 - correct
331:28 - this is a new tweet sorry this is a new
331:30 - tweet so we're going to update it so
331:33 - anyways now that we have tweet ID with
331:35 - us what we need to do is find the index
331:38 - of the tweet in this tweets array so now
331:42 - what we are going to do is find the
331:44 - Tweet so we have tweet equal to and
331:46 - that's why we have put variable we are
331:49 - going to change this value right now
331:50 - this is the updated value again we are
331:52 - going to set it to update value but
331:54 - right now we are not creating another
331:56 - variable you can create another variable
331:58 - to not cause confusion
332:00 - but here I'm just using this variable so
332:03 - now Tweed is going to be equal to tweets
332:05 - dot where
332:08 - and where do we want to
332:11 - get like which where do we want to get
332:14 - which tweet do we want to get so we just
332:16 - want a tweet where element.id should be
332:19 - equal to tweet ID
332:22 - okay so you want to get a tweet in this
332:24 - tweet list where the element.id we are
332:28 - looping through it essentially so we
332:30 - want to get element.id equal to tweet ID
332:33 - which is this ID
332:35 - so in the tweets list we'll get
332:38 - the tweet and then we'll just call First
332:41 - on it because we know there's only going
332:43 - to be one tweet with this particular
332:45 - tweet ID correct now that we've got this
332:48 - tweet we just want to
332:50 - remove this tweet but even before
332:52 - removing we need the Tweet index so that
332:55 - we can insert our updated tweet into
332:57 - that tweets position so we have final
333:00 - tweet index is equal to
333:04 - tweets dot index off and then we pass in
333:09 - the tree so this is a tweet
333:12 - now that we have stored the Tweet index
333:14 - we have this tweet ID now we can just do
333:17 - tweet dot remove where
333:20 - element
333:22 - dot ID is equal equal to tweet ID so we
333:25 - have removed the old Tweet now
333:29 - so let's remove the old Tweet now we
333:31 - just want to insert the updated Tweet
333:33 - now to get the updated tweet and insert
333:35 - it it's going to be very simple for us
333:37 - we just want to do tweets dot insert
333:40 - our tweet index and that's why we add
333:43 - store tweet index earlier because after
333:45 - we remove the tweet and then find tweet
333:47 - index like this so if we do this much
333:50 - right if we do this much we won't
333:53 - get the Tweet index because we have
333:55 - already removed it if we have removed a
333:58 - tweet and then find the index of that
334:00 - tweet will we get any index no that's
334:03 - why we want this logic to be above this
334:06 - and we have got the Tweet ID over here
334:10 - so that we could get that particular
334:12 - tweet we are getting the Tweet by ID
334:14 - essentially over here
334:16 - and now we are inserting a tweet index
334:19 - the element which is tweet but this
334:22 - tweet is the old tweet itself right
334:26 - so now we want to update the Tweet Again
334:28 - by doing this tweet is equal to tweet
334:30 - Dot from map
334:32 - now I know this is a lot of logic so I
334:35 - would recommend you to pause it
334:38 - go through it on your own I'll do
334:42 - one dry run after this after we get to
334:45 - know that it's working if it's working
334:47 - then I'll do a dry run so if you want to
334:49 - follow along you can follow along but I
334:51 - would highly recommend you to
334:53 - use your own logic to understand this
334:55 - now we'll restart the app and after
334:58 - restarting it let's try to retweet and I
335:01 - just realized the error in our
335:03 - application even if you try to retreat
335:05 - the retweet count won't upgrade and
335:07 - that's because the tweet.id that you're
335:10 - getting here is the updated tweets ID
335:12 - and the updated tweets ID and the old
335:14 - tweets ID on the same thing right we had
335:17 - added that logic on our own and we
335:19 - forgot about it
335:21 - so now how do I get the ID of the tweet
335:25 - so now if you try to print
335:28 - latest
335:30 - let's just call it data dot events at
335:34 - zero so now if you restart your
335:37 - application click on retweet over here
335:40 - you'll see over here this is the event
335:42 - now this is the document ID to get the
335:45 - document ID what we need to do is get
335:48 - this thing
335:49 - so to get this thing we can just find
335:51 - this full stop at the last so you want
335:54 - to get index of this full stop
335:56 - so let's just get it this is not the
335:59 - Tweet ID we had made a mistake so let's
336:01 - just get rid of it to remove the error
336:03 - we can just do final tweet as equal to
336:05 - this
336:06 - to get the Tweet ID now we are just
336:08 - going to have first of all the starting
336:09 - point or the starting index and this is
336:13 - going to be latest
336:15 - data dot events at 0 dot last index off
336:22 - and we want to get last index of this
336:25 - documents Dot
336:26 - so let's have
336:28 - documents Dot
336:31 - so we'll get the starting point now to
336:33 - get the ending point we want to get last
336:35 - index of dot update right so now we can
336:39 - just repeat this and have final end
336:43 - Point equal to
336:46 - dot update
336:49 - okay now we want to get the Tweet ID so
336:52 - we'll have final
336:54 - tweet ID is equal to latest data dot
336:59 - events at 0 Dot substring
337:06 - so we have the starting point we have
337:08 - the ending point so you want to get a
337:10 - string from the starting point to the
337:13 - ending point done but this is not it
337:17 - because starting point
337:19 - is last index of
337:22 - this will also consist documents dot we
337:26 - don't want it to consist of documents
337:28 - dot right we want to remove that
337:31 - so how can we do that well we can just
337:33 - calculate the number of characters in
337:34 - documents dot which is 10 and we can add
337:37 - it over here so starting point doesn't
337:40 - start from documents dot it will ignore
337:43 - them it will do starting point plus 10
337:45 - ignoring documents dot which is 10
337:47 - characters long
337:49 - till the end point dot update won't be
337:52 - used in the
337:54 - end point this is because it doesn't
337:56 - contain dot update our index of is still
338:00 - here only
338:02 - so now we'll get this ID and now based
338:05 - on this
338:06 - everything will get updated and of
338:08 - course we are getting this error so you
338:09 - want to convert it to a tweet variable
338:12 - sorry if we convert it to a variable we
338:14 - can use it later on to reassign
338:16 - so now what we have done is get idea of
338:19 - the original tweet see we got the ID of
338:22 - the original tweet we are finding that
338:24 - element
338:25 - by using element.id is equal to tweet ID
338:28 - then we are getting the Tweet index
338:30 - before removing the Tweet then we
338:33 - finally remove the tweet
338:35 - get the new data so get the new latest
338:38 - data and insert it at the particular
338:40 - tweet index
338:42 - and at a particular Tweet now we'll
338:45 - restart the entire thing
338:48 - I've retweeted many times here just to
338:50 - test
338:51 - so just to reduce complexity what I've
338:53 - done is just deleted all the tweets now
338:55 - I'm going to come here I'm just going to
338:57 - type a new tweet new tweet and then
339:01 - click on Tweet now another problem that
339:04 - I face right now while retweeting is
339:06 - that whenever I tweet both the dates are
339:09 - the same thing we don't want both the
339:11 - dates to be the same thing whenever we
339:13 - retweet we want to update the date as
339:16 - well so here we can also update the date
339:19 - by just having tweeted at
339:22 - with the date time as date time dot now
339:26 - so the tweeted had
339:28 - is now updated now we can just go and
339:32 - restart the app now if I try to retweet
339:35 - it's over here there is an update
339:40 - if I retweet again it's now 2 and it
339:44 - shows up right at the top now if I
339:46 - restart the application this
339:48 - configuration doesn't change so now
339:51 - finally our retweet is also working the
339:54 - earlier logic did not work because of
339:57 - the
339:58 - new tweet ID that we were getting we
340:00 - need to get the ID of original tweet I
340:04 - hope that is clear if it's not I would
340:06 - recommend you to go through this
340:09 - I'll
340:10 - I've already gone through gone through
340:12 - the dry run we've got the starting point
340:14 - we have gone got the ending point by
340:16 - index of now we are substring them so
340:20 - that we can get a particular section of
340:22 - the string
340:25 - then we are getting the tweet
340:27 - the original tweet we are getting its
340:30 - index before removing it and then we
340:32 - later on remove it
340:34 - and then we are just having tweet.form
340:37 - map and inserting it easy so the
340:41 - retweeting part is also done
340:43 - and it is working real time
340:47 - if I also try to like or dislike it also
340:51 - works
340:52 - the next feature we want to work on is
340:54 - whenever I click away I want to go to
340:56 - the new screen which is the replying
340:58 - screen or the comment screen whatever
341:00 - you want to call it and the specialty of
341:02 - this
341:04 - replying feature is that whenever we
341:07 - reply this is going to be there in the
341:12 - comment section of this tweet but it's
341:15 - also going to be there on our feed
341:18 - because we are replying to some person
341:19 - so it is basically our tweet that is
341:22 - present in other persons
341:26 - tweet
341:28 - so this is a really cool thing to work
341:29 - on so let's get started so we'll start
341:32 - off by creating a reply screen so we are
341:35 - going to go in the Tweet folder in the
341:37 - views we are going to create uh Twitter
341:42 - reply screen or review whatever you want
341:46 - to call it dot dot and here we will go
341:48 - into import material dot we are going to
341:50 - create a stateless consumer widget
341:53 - and we are going to call this not
341:54 - stateful we are going to get stateless
341:57 - consumer
341:58 - and we are going to call this Twitter
342:00 - reply screen this is nothing else but
342:04 - just a simple reply screen and now you
342:07 - might think that yeah if this is a reply
342:09 - screen this is going to have text
342:10 - editing controller and I said if you
342:12 - have text editing controller we need to
342:14 - use stateful consumer and you're right
342:16 - but we are not going to have text
342:17 - editing controller we are simply going
342:20 - to use the on submitted property in the
342:22 - text field
342:24 - anyways here in the app bar we want a
342:27 - very simple thing to show up which is a
342:29 - title saying text
342:31 - that this is a tweet
342:34 - and this is how the original one looks
342:36 - as well
342:38 - now in the body we are going to have a
342:40 - column widget and in that column we are
342:42 - going to have children and the children
342:46 - the first child we want is a tweet card
342:49 - so for the Tweet we are going to have a
342:51 - final tweet tweet over here
342:55 - and then we are going to require this
342:56 - through the Constructor
342:58 - so we're going to have required this dot
343:00 - tweet
343:01 - so first we want the original tweeted B
343:04 - displayed and then in the list view we
343:06 - want a list of reply tweets to show up
343:09 - okay so now let's see how this is
343:12 - looking so we are just going to create a
343:14 - static material route function so let's
343:16 - go over to the create tweet view grab
343:20 - the route thing over here and paste it
343:23 - away up now we need to import not import
343:27 - we just want Twitter reply screen to
343:30 - show up over here but this requires a
343:32 - tweet property so we need to pass in a
343:34 - tweet property and this tweet property
343:37 - will get it from here so we have to it
343:40 - tweet and then we'll pass it over here
343:42 - sweet now just to see this I'm just
343:45 - going to go to the create tweet view I'm
343:47 - going to wrap
343:48 - not create video sorry we are going to
343:51 - go to the Tweet card and what I'm going
343:53 - to do here is just wrap the entire
343:55 - column widget with a gesture detector
343:58 - widget so whenever we click over here
344:01 - we want to
344:03 - go to the Twitter reply view screen so
344:05 - we have Navigator dot push and then we
344:08 - are going to the Twitter reply screen
344:11 - dot route and then we pass in the
344:13 - particular tweet and we get this tweet
344:15 - from here through the Constructor
344:18 - great now we can restart the entire app
344:21 - now if I go here click over this tweet
344:23 - we are in another screen and I can see
344:26 - the Tweet over here
344:28 - now the next thing I want is first of
344:31 - all I want to be able to write a tweet
344:33 - reply right so now to get a tweet reply
344:36 - I'm just going to use the bottom
344:37 - navigation bar property on this scaffold
344:40 - and then I'm going to use the text Field
344:44 - property and this text Field property
344:46 - just needs to add a decoration of
344:50 - input decoration and there should only
344:53 - be a hint text which is tweet your reply
344:59 - that's easy
345:01 - and here it is it shows up pretty cool
345:07 - that's the only decoration we need and
345:09 - now we need the on submitted property so
345:11 - we get a value this is going to be const
345:13 - obviously
345:15 - and whenever it is submitted that means
345:17 - whenever we type something over here and
345:19 - click on enter what do we want to do
345:20 - well we just want to submit this tweet
345:22 - like a normal tweet right so we can just
345:26 - use ref dot read tweet controller
345:29 - provider dot Notifier Dot
345:32 - and let's see what tweet we use what
345:34 - function we use to share a tweet and it
345:37 - was called share tweet so we can just
345:39 - add that what are the images no images
345:42 - what are the text well the text is the
345:45 - value that you are getting from here
345:47 - from the on sub method
345:49 - then we pass in the build context and
345:52 - that's all we are not adding images
345:54 - property over here so you can add a
345:56 - bunch of options down below the text
345:58 - field
346:00 - but I'm not going to do any of those the
346:02 - reason for that is
346:04 - I've already covered this so I don't
346:06 - want to make this video any longer I've
346:08 - already covered this in the create tweet
346:10 - view part so you can just copy the logic
346:11 - and if you've understood it I would
346:13 - recommend you to retype it and try it on
346:15 - your own
346:16 - and now what do we want to show now I
346:18 - want to show all the replies but wait is
346:22 - that all that we need in the share tweet
346:23 - logic because we are saying that we want
346:25 - to share a tweet but nowhere are we
346:27 - specifying that this is in response to
346:31 - this tweet
346:32 - so how can we list them over here
346:34 - correct
346:35 - it just knows that it is a tweet sent by
346:37 - the current user that means us with no
346:40 - images text is there and if case of
346:42 - error it's going to show us a scaffold
346:47 - or a snack box
346:50 - but nowhere does it know that it isn't
346:53 - reply to this tweet
346:55 - so what we need to do is in the share
346:57 - tweet we need to add some logic and we
347:01 - have to go down into every function the
347:03 - share tweet all of those function and
347:05 - here we have to require one field which
347:07 - is required string replied to so whom
347:11 - are we replying to we'll copy this and
347:13 - put this in the share image tweet as
347:15 - well
347:16 - so if you are replying to anyone we need
347:19 - their
347:20 - tweet ID this is not the user ID this is
347:22 - a tweet ID because we are replying to
347:25 - this tweet yes we are replying to this
347:27 - user but user can have many tweets we
347:30 - are replying to this tweet ID of the
347:32 - user so you want to store the reply to
347:35 - will be the Tweet ID of the
347:39 - user basically whatever tweet the user
347:42 - posts that ID
347:44 - so in the Tweet model we'll have to add
347:46 - another one which is final string
347:49 - reply to ID
347:52 - or applied to now I'll get this through
347:55 - the Constructor so we have required this
347:56 - dot replied to and now I can generate
348:01 - the entire data class I'll remove the
348:08 - two Json from Json functions
348:10 - I'll remove dot convert
348:13 - I'll fix all of these issues like this
348:16 - tweet type shouldn't be a map it should
348:18 - be two
348:21 - tweet type DOT type and this should be
348:24 - tweet type
348:26 - removed
348:27 - we'll treat this as a very simple string
348:34 - and convert this to
348:37 - a tweet typing
348:38 - also here the ID should be slash dollar
348:41 - ID don't forget that okay
348:45 - so now we are getting a bunch of Errors
348:47 - so let's go there in the Tweet
348:49 - controller we need to add the reply to
348:51 - property we will add that because we
348:53 - have just now got it from the parameter
348:55 - we'll do the same in the share text
348:57 - tweet we're going to add reply to
348:59 - replied to and I think we've not added
349:03 - that over here so let's quickly grab it
349:05 - and paste it
349:08 - we also need to mention replied to over
349:11 - here so we'll pass that in
349:13 - and also here
349:15 - also here we have to pass in the reply
349:18 - to so everywhere we need to pass and
349:19 - reply to and take it from the parameter
349:22 - now we're getting this error in Twitter
349:24 - reply view so we need to go there and we
349:26 - need to tell it that this share tweet
349:30 - has a reply to correct we are in the
349:32 - Twitter reply view so definitely it has
349:34 - a reply to and what is it reply to well
349:37 - I said it is going to be the Tweet ID so
349:39 - we'll just use tweet dot ID don't use
349:43 - tweet.uid used tweet.id this is a tweets
349:46 - ID tweet.uid is the person
349:50 - ID who posted this tweet
349:53 - in the create wheat view also we have to
349:55 - go here we have to add reply to property
349:58 - but this is going to be empty because
350:00 - you're not replying to anyone this is a
350:02 - create tweet View and we are going to
350:04 - reply
350:05 - to no one
350:07 - this is our original tweet
350:11 - just like that
350:13 - so this looks good now I can just tweet
350:16 - my reply I'll just say
350:19 - how are you doing
350:22 - and I'll click on enter you can see
350:24 - invalid document structure unknown
350:27 - attribute ID
350:29 - there is one problem here in the tweets
350:31 - we need to add a new attribute called
350:33 - reply to don't forget that
350:35 - string
350:37 - 255 required create
350:40 - and just so that there is no confusion
350:43 - I'll just delete every document that's
350:45 - present
350:46 - now everything is gone I'll just type
350:49 - hey guys and let me just beautify this
350:53 - further
350:55 - and I'll click on tweet here you can see
350:57 - invalid document structure unknown
350:59 - attribute ID
351:01 - so this is a problem with our
351:04 - tweet model
351:05 - we have sent to map but we don't want to
351:08 - map to be there the ID of two map so
351:11 - remove that that's a mistake I made now
351:13 - let's restart the application and see so
351:16 - I'll just say hey guys again and it
351:19 - should work this time so we'll go on
351:21 - tweet and here it is now I'll go over
351:23 - here I want to reply so I can just type
351:27 - doing
351:28 - good and then click on enter
351:31 - now just to verify if this is working
351:33 - I'll do Ctrl R and we are having doing
351:36 - good aware but let's see if it replied
351:38 - to it's working and yep it does work now
351:41 - let's just compare the IDS of these two
351:43 - tweets
351:44 - so this was the ID and let's see the ID
351:48 - of this one
351:49 - it's the exact same thing so we have
351:51 - successfully achieved what we wanted to
351:53 - achieve
351:55 - now the next part is displaying all of
351:58 - those tweets that are in reply to this
352:00 - particular tweet
352:01 - so we'll go back to the Tweet API
352:08 - and here we are going to add a new
352:13 - future and we are going to call this
352:15 - future
352:18 - list of document and since we have used
352:21 - future you know what's coming future
352:23 - provider and we want to get replies to a
352:26 - certain tweet so we'll just have get
352:28 - replies to tweet
352:30 - and here we are also going to ask for
352:32 - the Tweet information because you want
352:34 - the tweets ID
352:39 - so what tweets replies do we want to get
352:42 - that's what we are asking here
352:44 - we can do that by doing final document
352:47 - is equal to await so we need this to be
352:50 - asynchronous
352:53 - and then underscore DB dot less
352:56 - documents we have already seen if you
352:57 - want to get a bunch of documents
353:02 - we can just list them and then we'll
353:04 - mention the database ID so we have
353:06 - upright constants dot database ID app
353:09 - right constants
353:12 - dot tweet collection because you want to
353:15 - go in the Tweet collection now
353:18 - and now
353:20 - it will just list all the tweets that
353:22 - are present in the database correct but
353:25 - we don't want that we want all the
353:28 - tweets
353:29 - which are in reply to this particular
353:31 - tweet and if you go to some other tweet
353:33 - we want all the tweets and reply to that
353:36 - tweet
353:37 - so if we have to think about it in
353:39 - programming terms
353:42 - if this is a tweet we want to get reply
353:45 - to
353:45 - tweets which have their reply to
353:48 - property as this
353:50 - because earlier if you saw if we go to
353:53 - the
353:56 - tweet controller you can see the reply
353:58 - to property year was the tweets ID so we
354:01 - want to get all the
354:04 - tweets which have the ID
354:08 - the same as the replied to property so
354:11 - here how can we do that well let's see
354:14 - if there is anything there's nothing
354:15 - except queries so your queries is going
354:18 - to help us
354:20 - queries will may help us select certain
354:22 - documents from here here we use queries
354:25 - because we wanted our data to be
354:28 - behaving differently we wanted certain
354:31 - data but we did not have access to them
354:34 - based on this we had certain
354:36 - limitations through which we had to do
354:38 - this or you can think about it like
354:40 - filters we had certain filters According
354:42 - to which we wanted to have our data
354:45 - presented to us
354:47 - so here we are going to use queries and
354:49 - here our query is going to be query dot
354:52 - equal
354:53 - so we want to get
354:55 - all the queries or all the documents
354:58 - where the reply to property is equal to
355:02 - the Tweet dot ID simple
355:07 - so here we are just saying list all the
355:09 - documents where query is equal to the
355:13 - replied to property and the reply to
355:15 - property is equal to tweet.id
355:18 - I hope that's simple enough to digest
355:22 - I'll repeat it once more we want to list
355:25 - all the documents in the tweets
355:27 - collection
355:29 - where they replied to property is equal
355:32 - to the tweet.id property
355:35 - okay now we can just return this
355:37 - document so we have a return document
355:39 - dot documents
355:42 - so this will give us a list of documents
355:44 - now we can go in the Tweet controller we
355:47 - can create
355:49 - a future list of tweet document or
355:54 - return data type of the function and we
355:56 - are going to say get replies to tweet
355:59 - and here we just want to get tweet from
356:02 - the parameter
356:04 - and here the job is very simple we just
356:07 - want to convert let's just put this
356:09 - function up here
356:10 - so I'll put it right over here
356:12 - and now the task is very simple we just
356:15 - want to
356:16 - get something so we have final document
356:18 - is equal to await so this will be
356:21 - asynchronous
356:24 - underscore tweet API dot get replies to
356:27 - tweets okay now we have gotten replies
356:31 - and the documents
356:34 - now we just need to convert it in a
356:36 - format of tweet
356:39 - and we've covered this logic earlier we
356:41 - have done this before for
356:44 - get tweets function
356:46 - get tweets is basically like get replies
356:49 - to tweets only difference is that it
356:51 - gets all the tweets and get replies to
356:53 - tweet filters something and gets us the
356:56 - tweets
356:59 - so we can just put it here I can do
357:02 - documents.map tweet and convert it to a
357:05 - list all of this
357:06 - I hope this logic is clear to you if
357:08 - it's not let me know in the comment
357:10 - section I'll make sure to answer you now
357:12 - I can just go up right at the top and
357:15 - create another future provider which is
357:17 - very similar to get weeds provider
357:20 - so I'll just copy it and we have get
357:23 - replies
357:25 - to
357:27 - tweets provider then we have future
357:29 - provider dot family we need a tweet so
357:33 - we have tweet to eat
357:37 - and whenever we use family we want the
357:40 - data type to be present here as
357:41 - immutable so let's go right here this is
357:44 - immutable ready God
357:46 - and here we will watch the Tweet
357:49 - controller provider and we'll get get
357:51 - replies to tweets and then we'll pass on
357:54 - this tweet if you remember what family
357:56 - is we are going to accept this from our
357:59 - UI file
358:02 - so we can go to our Twitter reply View
358:06 - right here and let's just copy all of
358:09 - the logic that we had in the Tweet list
358:13 - let's just remove the print calls
358:18 - let's copy everything that's mentioned
358:21 - here
358:21 - it's the exact same thing we are going
358:23 - to need
358:27 - let's import the common dot dot file
358:30 - save it most of our errors are gone
358:33 - import apparite constants even more
358:36 - error are gone
358:39 - now let's make some modifications here
358:42 - we are doing ref.watch get tweets
358:44 - provider we don't want all the tweets
358:46 - over here right we want get replies to
358:49 - tweets provider and it's giving us an
358:51 - error because this is a future provider
358:53 - family whenever it's family we have to
358:55 - treat this like a function
358:57 - and then pass in what it's requiring a
359:01 - tweet so let's pass in the tweet and the
359:03 - Tweet is exactly this thing
359:07 - okay
359:09 - now we have got replied to tweet dot
359:11 - when data and whenever we get the tweets
359:13 - we have to show this in a format of
359:15 - tweet card in a list view Builder
359:17 - perfect exactly what we want and all of
359:19 - this is real time all of the logic to
359:22 - make it real time if you remove this it
359:24 - will still work but it will not be real
359:26 - time we want everything to be real time
359:29 - so all of this is now done let's restart
359:31 - the application
359:33 - I'll go over here
359:35 - not aware over here and it's giving us
359:38 - the exception index not formed whenever
359:42 - there's no index no found exception you
359:44 - have to go to the indexes you have to
359:46 - create a new index and what is this for
359:49 - well this is for getting replies so I
359:52 - can just type replies then I'll have key
359:57 - the attribute here is
360:01 - replied to let's just say ascending or
360:04 - descending order whatever you want
360:06 - I'll just type descending and click on
360:08 - create
360:09 - now I can restart the application go to
360:12 - hey guys and nothing shows up
360:17 - but our error now goes away
360:23 - and now if you open the terminal you see
360:25 - this is the error this is UI related
360:27 - error basically we have a list view
360:30 - Builder over here and we are also having
360:33 - a tweet card in a column list view
360:35 - Builder has a tendency of taking the
360:37 - entire screen it's not getting the
360:39 - entire screen so together the entire
360:41 - screen we have to wrap it with the
360:43 - expanded widget it doesn't give you the
360:45 - exactly you know the entire screen but
360:48 - it gives you all the available space
360:52 - and this should work so let's restart
360:54 - our application
360:57 - go to hey guys
360:58 - and if you open the terminal it's still
361:00 - giving us an error because we are at the
361:03 - loading part if we are at the loading
361:05 - part you have to wrap here also with
361:07 - expanded widget because basically this
361:10 - widget is now returning list view
361:12 - Builder
361:13 - from here it's not expanded so our UI
361:15 - doesn't know
361:17 - anyways let's restart the application go
361:19 - to hey guys and we are having doing good
361:22 - over here just to test the logic if it's
361:24 - correct or wrong let's tweet another
361:27 - thing publicly so we have high I'll just
361:30 - do this much click on tweet and we are
361:33 - having the surveyor but if I go to hey
361:35 - guys hi shows up here as well why is
361:38 - that so
361:40 - so if I refresh the upright console and
361:43 - go to documents you'll see hi is there
361:48 - replied to is still empty but even then
361:51 - it's showing up over here that's a weird
361:53 - Behavior right now if I go back go to
361:56 - doing good I have high showing up here
361:59 - as well and if I go to over here it's
362:01 - showing up here as well
362:04 - that's the thing this is how apprite
362:06 - works
362:08 - this data now has some value in it
362:12 - so if you try to print data it will
362:15 - print you the data every time you go to
362:18 - a new screen you can see right now it
362:20 - has two highs now if I refresh this it
362:23 - has three highs so it's continuously
362:25 - rebuilding and giving you new Highs but
362:28 - if you restart your entire app and then
362:31 - go to hey guys hi doesn't show up
362:34 - so we need to do something that we check
362:37 - that if the Tweet here is already
362:41 - mentioned in this part we don't have to
362:43 - add it and we also have to check if this
362:47 - replied to of this is equal to the ID of
362:52 - this tweet
362:54 - then we should only put it why am I
362:57 - saying these two conditions
362:58 - this is because every time we create a
363:00 - widget new tweet appears whenever we
363:02 - click over here the Tweet keeps on
363:03 - appearing here
363:05 - even though it's not replied a part of
363:08 - the reply to
363:09 - right
363:13 - so you want to check
363:15 - if the replied to of this tweet
363:18 - is equal to the ID of this tweet so if
363:22 - replied two of this tweet is equal to
363:24 - the ID of this tweet that means
363:27 - it belongs here
363:30 - and if it doesn't then it doesn't belong
363:32 - here
363:33 - right
363:35 - so let's add that logic your
363:38 - before the if condition over here we are
363:40 - just going to check okay first we need
363:42 - to convert it to a tweet model so we'll
363:44 - have latest tweet final latest tweet
363:46 - don't name a tweet otherwise you'll get
363:48 - confused with what's mentioned in the
363:50 - Constructor final latest tweet is equal
363:52 - to tweet
363:54 - Dot from map and we have to pass in
363:57 - data.payload if we do this we get the
363:59 - latest tweet in a tweet model format
364:03 - then I check if latest tweet dot reply
364:07 - to is equally equal to tweet
364:10 - dot ID that means the reply two of the
364:14 - latest tweet that means this ID
364:17 - this replied to of this tweet is equal
364:20 - to the ID of this main tweet
364:27 - only then do we have to run all of this
364:29 - logic so you can just put all of this
364:32 - logic inside this
364:35 - and if it doesn't equal then don't
364:37 - execute any of this logic don't have to
364:40 - insert anything don't have to do
364:41 - anything
364:42 - okay now if I restart my application and
364:45 - try to see if it's working I'll go to
364:48 - the hey guys I'll type this
364:50 - hello and click on done I'm getting
364:55 - that's good
364:56 - I'm getting hello over here as well now
364:59 - if I still try to do
365:01 - um and then click on tweet I'm getting
365:04 - hum um and if I go to Hello it doesn't
365:07 - show up
365:09 - Let's test it one more time if I do nice
365:11 - over here
365:12 - I get nice I'll go back come back over
365:16 - here I get nice two times if I go back
365:19 - come back
365:21 - I get nice one more time
365:23 - so basically this logic is working the
365:26 - reply to is equal to tweet ID so right
365:28 - now my data consists of
365:31 - nice and
365:35 - if it consists of nice tweet
365:38 - latest tweet dot reply to is equal to
365:41 - tweet.id so it's equal right so it's
365:43 - again re-running this entire thing so
365:46 - it's seeing that yeah if all of this is
365:48 - done then I can just you know have my
365:51 - nice tweet again here now to avoid this
365:54 - many nice coming over here what I can do
365:58 - is add one more condition I want to
366:00 - check if the nice tweet already exists
366:04 - over here or not if it already exists
366:06 - over here
366:08 - then I don't want to add it again but if
366:10 - it does not exist then I want to add it
366:13 - so here we are going to be running a
366:15 - very simple for Loop so we are going to
366:17 - have Boolean is tweet already present
366:22 - so if the Tweet is already present then
366:24 - we don't have to execute all of this
366:26 - initially it will be false and then we
366:29 - are going to run a for each Loop or a
366:31 - foreign Loop
366:32 - we are going to have four final tweet
366:36 - model in tweet
366:39 - tweets not tweet tweet model I've named
366:43 - it because tweet is already there latest
366:44 - tweet is over here so this is tweet
366:47 - model
366:49 - then I want to check if tweet model
366:54 - dot ID is equal to latest tweet model
367:00 - dot ID so I'm comparing both of their
367:03 - IDs I'm just seeing if the latest tweet
367:05 - has the
367:08 - Loops tweet model already present so if
367:12 - their ID is match that means it is
367:14 - already present so is tweet already
367:16 - present is equal to true and then I want
367:18 - to break it so that it doesn't Loop
367:20 - through more and more elements we've
367:22 - already found our answer
367:24 - okay so we are just checking
367:27 - through every tweet and tweets
367:30 - so it we are checking through every
367:32 - reply if the Tweet is already present
367:34 - and if the Tweet is present we are
367:37 - checking that by that ID
367:39 - we are just doing if tweet already
367:41 - present is equal to true and then break
367:44 - off
367:45 - because we have already found our answer
367:46 - that yeah it is present
367:49 - so why should we run more for Loops or
367:52 - more iterations
367:54 - and here we are checking
367:57 - if if tweet is already present
368:01 - and and latest V Dot reply to is equal
368:04 - to tweet ID right no
368:07 - if tweet is not already present
368:10 - then we want to execute all of this if
368:13 - tweet is already present why would we
368:15 - execute it
368:16 - it's the same thing as what we are
368:18 - seeing over here we don't want this so
368:20 - if tweet is not present and latest
368:23 - tweet.replied to is equal to tweet ID
368:25 - then we want to execute all of this now
368:28 - it should get rid of all of the errors
368:30 - so if I now type your nice
368:35 - go back
368:37 - and you know come back
368:39 - knife is there
368:41 - only one time
368:43 - this is good now if I come over here
368:45 - this has no comments this has no
368:47 - comments even this has no comments that
368:50 - means the applied to feature is also
368:52 - over
368:54 - but yeah there is one thing left
368:55 - whenever we are applying to someone we
368:57 - wanted to show in the Tweet so we can go
369:00 - to our tweet card
369:03 - and we'll scroll down
369:06 - right below the text result the replied
369:09 - to we have added a comment and here we
369:11 - are going to check if tweet.reply to dot
369:14 - is not empty so if it is not empty then
369:18 - we want to display
369:20 - that we are applying to this particular
369:23 - user
369:24 - so we are going to return a rich text
369:29 - and the text is going to contain a text
369:31 - pan because we want to show a white or a
369:35 - gray
369:36 - along with a blue one
369:38 - right the username of the user should be
369:41 - colored in blue now in the text pan we
369:43 - are going to have
369:46 - text which is going to say replying to
369:49 - then a style of constant textile you can
369:53 - select white or gray I think gray would
369:55 - be better because we don't want to focus
369:57 - on
370:00 - this text as much as the main text
370:04 - then the font size should be 16. then in
370:09 - the children we need another tech span
370:11 - so we have text pan
370:14 - and here we are going to add
370:18 - the rate
370:21 - and the name of the user now how do we
370:24 - get the name of the user we don't have
370:26 - access to it if you try to do it let's
370:29 - see if you get it you know tweet dot
370:31 - reply to this is the Tweet ID that we
370:34 - are applying to it this is not the name
370:35 - of the user so how do we get the name of
370:37 - the user for that we need the uid of the
370:40 - user that is also not mentioned where
370:43 - the reply to user ID is not there
370:48 - so what else can we do well we have to
370:50 - create a new provider which is basically
370:53 - getting tweet by ID so we get that
370:56 - particular tweet
370:58 - then we take its uid and then use the
371:01 - user details provider and then we can
371:04 - get the name of the user so let's do
371:07 - that we are going to go to the Tweet API
371:09 - now
371:11 - right at the top we are going to Define
371:13 - future
371:16 - document get tweet
371:20 - by ID and obviously since you are
371:23 - getting by ID we need a string ID
371:26 - now we can create one missing override
371:29 - we can have async over here
371:32 - and we want to return underscore DB dot
371:36 - get document we want a single document
371:38 - because getting a tweet by ID a tweet is
371:41 - only going to have one document or one
371:43 - ID so we will get one particular ID and
371:46 - we are going to use apprite constants
371:47 - dot database ID app right constants Dot
371:51 - ID
371:54 - or tweets collection
371:56 - and the document ID document ID is the
371:59 - ID that we are getting from the
372:00 - parameter
372:02 - okay now we can go to the Tweet
372:05 - controller
372:06 - here we are going to Define our get
372:08 - tweet by ID function
372:10 - so
372:13 - let's do that over here we're going to
372:16 - have future tweet
372:19 - get tweet by ID
372:22 - then we are going to get if sync over
372:25 - here then we are going to get ID from
372:28 - the UI file itself so we are going to
372:30 - have this then we are going to have
372:32 - final to eat is equal to
372:35 - underscore tweet API Dot
372:38 - get tweet by ID then pass in the ID then
372:41 - we are going to have return
372:43 - tweet Dot from map and this is going to
372:46 - be tweet Dot
372:49 - and there's nothing like it so you want
372:51 - to do await
372:53 - now we have document earlier it was
372:55 - future document
372:56 - and now we want to get tweet.data
372:59 - so we have converted it into a model and
373:02 - returned it and now finally we just need
373:05 - a simple future provider so we can just
373:08 - have future provider
373:10 - and we'll name this get
373:14 - tweet by ID provider we're not going to
373:17 - have anything else other than family
373:19 - because we want a string ID
373:23 - we also need the Tweet controller so
373:25 - we're just copy pasting stuff now we've
373:28 - covered a lot so just get a hang of this
373:31 - we are getting 3D controller we are
373:33 - converting it to a models we are sending
373:35 - data to app right we are getting data
373:37 - from upright all of the same stuff
373:41 - and now we want to get Tweed by ID and
373:43 - we'll pass in the particular ID
373:49 - now we can go to the Tweet card and here
373:52 - we are going to wrap everything by ref
373:54 - so we are going to have ref.watch
373:58 - get Tweed by ID provider we'll pass in
374:00 - the ID the ID is tweet dot reply to
374:05 - so we want to get the tweet ID or the
374:09 - Tweet by ID of tweet.reply to which is
374:12 - the ID of the tweet that we are replying
374:14 - to
374:15 - dot when and whenever we get the data we
374:19 - have to do something so when there's
374:21 - data you have to do something when you
374:24 - have to do error or St we have to do
374:28 - something and if you have loading we
374:30 - have to do something
374:32 - so in case of the loading we just want
374:35 - to show a size box
374:36 - so we can a sized box
374:39 - in case of error we want to show the
374:42 - error text so
374:44 - let's have error text and we'll have
374:48 - error.2 string
374:50 - now I'll take the rich text
374:55 - and here we are going to return that
374:57 - rich text
374:59 - and here we are getting this error we
375:01 - just need to add a parenthesis here
375:03 - before the
375:05 - bracket
375:06 - so yes now we have the data but what is
375:10 - this data this is the
375:12 - replied
375:14 - to data
375:16 - or applied to tweet this is not our
375:19 - original tweet this is a reply to Tweet
375:21 - now based on this we want to get the
375:24 - name of the user right now we get the
375:26 - uid of the user to whom we are replying
375:28 - by this so how do we get the name of the
375:31 - user
375:32 - so to get that what we are going to do
375:34 - is final replying
375:39 - to user which is equal to ref dot watch
375:46 - replied to tweet.uid
375:49 - or not this sorry
375:52 - what is the provider that we want to
375:54 - have we are going to have user details
375:56 - provider then we are going to have
375:58 - replied to tweet.uid
376:02 - so basically we have rev dot watch we
376:04 - pass in the user details provided the
376:06 - reusable provider we created remember
376:08 - right here
376:11 - you have used that in the current user
376:14 - account provider as well
376:16 - not aware sorry we have used it in
376:18 - current user details provider
376:21 - now that we have replying to user with
376:23 - us now we can get their name but before
376:25 - that we need to have value because right
376:28 - here this thing
376:30 - is a user model now earlier if we didn't
376:34 - use value it would be a future provider
376:37 - thing an async value
376:40 - okay so let's get replying to user put
376:43 - it right here replying to user dot name
376:47 - make sure to use question mark over here
376:49 - instead of exclamation mark because when
376:52 - you use exclamation mark you're saying
376:54 - that this value cannot be null but for
376:57 - some time for even a second this value
376:59 - can be null when it's trying to get the
377:01 - user details okay
377:04 - so save this restart your app come over
377:07 - here and you see replying to at the rate
377:09 - test this is good
377:12 - now here I want to change the color to
377:15 - blue color
377:16 - and I want to leave some space so that
377:18 - this sticking doesn't happen I'll save
377:20 - it and yeah we get it replying to at the
377:23 - rate test
377:25 - so you can see everything is replying to
377:27 - test over here
377:30 - this looks good
377:32 - now let's just try to retweet replying
377:35 - to and we get all of the features in one
377:37 - single tweet retweet replying to like
377:41 - and if we try to comment on this we can
377:43 - also comment okay
377:46 - great now I think all the features
377:49 - related to tweet are now completed now
377:52 - the next step is to go away or Implement
377:54 - a search screen basically we want a text
377:57 - field over here and whenever we search
377:59 - over here we want to get a list of user
378:01 - profiles so let's get started with it
378:04 - right now so what I'm going to do here
378:06 - is just close all the save files close
378:09 - the Tweet folder and create a new folder
378:11 - called explore
378:13 - and here I'm going to create a new view
378:15 - called exploreview.dot
378:21 - and after I've created it I'm just going
378:23 - to import material dot create a
378:26 - stateful consumer widget I've created
378:29 - State full consumer because my app bar
378:31 - is going to have a search field and
378:33 - we'll be requiring text field controller
378:35 - for it
378:38 - so let's have explore view right here
378:42 - import flutter riverpod
378:44 - we are going to return a scaffold and
378:47 - here I'm just going to exp take explore
378:49 - view go to UI constants pass it right
378:53 - here
378:55 - and I think this should show up yep it
378:58 - does now what I want to do is add an app
379:01 - bar over here but if I add an app bar it
379:04 - will be right below this so I want to
379:06 - eliminate this app bar which is present
379:09 - in the home screen so in the home view
379:12 - if you see
379:14 - we are adding an app bar over here what
379:17 - I want to do is if underscore page is
379:20 - equal equal to 0 then I want it to be
379:24 - app bar otherwise null so only for the
379:27 - page 0 will this app bar show up
379:29 - otherwise it will not be there so if you
379:31 - go there there's Abba but if you go over
379:34 - here there's no app bar easy
379:37 - now we can go to the explore page have
379:41 - app bar pass in the app bar
379:48 - which will have a title and the title is
379:51 - going to be sized box of height 50.
379:57 - then we need a child
379:59 - for text feed we have passed the size
380:01 - box of height 50 because text field
380:03 - might exceed this length
380:05 - so we are restraining or constraining it
380:09 - to just a particular height of 50.
380:12 - now in the text field I'm going to pass
380:14 - in my controller so I have to create my
380:16 - controller
380:18 - I'll create it right here final search
380:21 - controller is equal to
380:24 - text editing controller let's have text
380:28 - editing controller now I want to dispose
380:30 - the source so I'll have search
380:32 - controller dot dispose
380:37 - and I'll take the search controller and
380:39 - put it right here
380:42 - now if I see your way up here is my
380:44 - search field but I want to style this
380:46 - even more so I'm just going to pass in a
380:48 - decoration of input decoration
380:50 - and here I'm just going to have first of
380:53 - all a fill color and my fill color is
380:55 - going to be palette dot search bar color
380:58 - with field set to true so I'll just have
381:02 - filled true
381:03 - after I have this underneath I go here
381:05 - this is colored which is pretty good now
381:08 - I want to enable borders so that I can
381:10 - move this border and add my own border
381:15 - so here I'm going to have enabled border
381:18 - so in the enabled border I want outline
381:21 - input border
381:24 - with border radius and Border radius is
381:26 - going to be border radius dot circular
381:28 - 50.
381:30 - after that we need a Border Side
381:33 - and Border Side will be constant Border
381:36 - Side basically
381:39 - we want
381:40 - the normal text field to be a bit
381:43 - rounded should have no outline underline
381:46 - border
381:51 - so I'll just pass this as color palette
381:54 - dot search bar color and of course for
381:57 - the Border radius we have this now we
382:00 - won't be able to see over here because
382:01 - this is focused so I'll do the same for
382:03 - focused border
382:06 - and now it's going to be the exact same
382:09 - thing so I can just extract this out put
382:11 - it here and call this app bar text field
382:14 - border which is equal to this thing now
382:18 - I can copy it
382:20 - paste it right over here paste it for
382:23 - the focus border as well save it and
382:26 - here you can see this is curved exactly
382:28 - like the Twitter thing now I want hint
382:30 - text to show up so in the hand text wire
382:34 - I'm going to pass in search Twitter
382:39 - save it again here it is now I want
382:42 - content padding to be there because I
382:44 - want to shift my text from here to
382:46 - somewhere a little bit down
382:48 - and to a little bit more right
382:53 - so in the decoration I'm going to have
382:55 - content padding constant Edge in such
382:57 - dot all 10 dot copy web
383:01 - left 20. basically from the top I want
383:05 - 10 padding and from the left hand side I
383:07 - want 20 so that I can go to the right
383:09 - hand side and here it is looks great
383:15 - so this was about designing the search
383:17 - field now we want to be able to search
383:19 - for users
383:21 - so for that we are going to go to the
383:24 - explore explore folder create a
383:27 - controller
383:28 - and call this explore controller dot dot
383:31 - then I'll have a state Notifier and a
383:34 - state Notifier provider
383:37 - so the state Notifier is going to be
383:39 - explore controller let's remove Notifier
383:43 - from here then we will need a straight
383:45 - Notifier a Boolean value and false
383:49 - because this shows it's loading so it's
383:52 - loading as initially it falls and here
383:54 - we are just going to have a future list
383:57 - of user model to show up
384:01 - for search user of course we are going
384:03 - to create their API but right now I'm
384:05 - just giving you a clue of what's going
384:07 - to happen we're going to get the name of
384:08 - the user
384:09 - whatever the user types in here we get
384:12 - the name and based on that we search in
384:15 - app right and the list we get we have to
384:18 - display it in a future provider
384:20 - okay so now let's go ahead in the user
384:23 - API
384:25 - because this is related to user user
384:27 - searching so we're going to go to the
384:29 - user API and add our
384:32 - new function which is
384:34 - going to return a list of documents
384:39 - and we're going to call this
384:41 - search user
384:45 - by name
384:48 - and here we'll get access to the name of
384:50 - the user now I'll create one missing
384:52 - override
384:56 - I'm going to have async over here
384:59 - then I'm going to copy all of this
385:02 - paste it down and go into say list
385:04 - document
385:06 - actually I'm not going to return this
385:10 - I'm just going to save it in documents
385:13 - just like we have done before for other
385:15 - things so we are going to list the
385:17 - documents we are going to go to the user
385:19 - collection and here we are going to add
385:21 - our queries you remember the queries and
385:23 - here we are basically going to search
385:25 - and there is an inbuilt query search
385:27 - provided to us which is query dot search
385:31 - so if we use this we should be able to
385:33 - search for a specific value
385:35 - and was it what is it that we are trying
385:37 - to search which is name and we'll pass
385:39 - in the name through the parameter
385:43 - now we just need to be able to return it
385:45 - so we'll have return documents dot
385:47 - documents
385:49 - we don't have that option we are getting
385:51 - this because you're not awaited this so
385:53 - let's await it
385:57 - take these documents and return it
386:00 - documents dot documents
386:02 - now we can go to the explore controller
386:04 - again
386:05 - and here we have to import the user API
386:09 - so we have final user API underscore
386:12 - user API
386:13 - let's require this so we have required
386:15 - user API user API
386:18 - and then we have underscore user API is
386:20 - equal to user API
386:23 - now we can take this and have user API
386:25 - dot search user by name we'll pass in
386:28 - the name
386:29 - and this should be equal to final users
386:33 - is equal to await this
386:36 - so now that we have list of document
386:38 - with us we need to map through it and
386:40 - convert it into a user model so that we
386:43 - can return a list of user models so we
386:45 - have returned users dot map now we have
386:48 - e the
386:50 - help of this we are going to return user
386:52 - model
386:54 - Dot from map
386:56 - e.data dot to list
386:59 - we have already looked at this logic
387:00 - before in the Tweet controller we have
387:03 - done this for get tweets and get replies
387:06 - to tweets functions mapping through all
387:08 - the users returning one particular user
387:11 - model and converting it to a list and
387:13 - this happens for literally all the users
387:15 - that we find
387:18 - now we need to create
387:20 - two things a state notify a provider for
387:24 - our explore controller so we have
387:26 - explore controller provider
387:28 - and now we want to return explore
387:31 - controller and here we need to pass in
387:33 - the user API which is ref.watch user API
387:36 - provider
387:38 - and the next thing we want to create is
387:40 - future provider and the future provider
387:43 - is going to be called
387:45 - search user provider because you want to
387:48 - search the user
387:49 - dot family and here we are going to get
387:52 - the query from the UI file so basically
387:54 - whatever you don't find a way or you can
387:56 - just take it from family but in the
387:59 - family you can just import one thing you
388:01 - cannot have two or three things okay
388:04 - now we can return this but before that
388:06 - we need explore controller so we have
388:08 - explore controller final Explorer
388:10 - controller equal to
388:14 - ref.watch explore controller provider
388:17 - dot Notifier
388:20 - now we can use this explore controller
388:22 - and return it so we have returned
388:24 - explore controller Dot search user pass
388:28 - in the name from the parameter here
388:31 - and return it now to display the correct
388:34 - thing we can
388:37 - go in the scaffold in the outside the
388:39 - app bar in the body
388:43 - outside that but I said so body
388:46 - and here we are going to use the future
388:49 - provider now we know the syntax search
388:51 - user provider then we'll pass in since
388:55 - it's a family future provider we have to
388:57 - use this as a function and then we can
388:59 - do search controller dot text this is
389:02 - the search controller that we have as a
389:04 - text editing controller and is bound to
389:06 - the text field so we are getting text
389:08 - from it dot when and whenever we get the
389:12 - data we get users in case of error we
389:16 - know already what to do
389:18 - error St will return something in case
389:21 - of loading you have to load a loader so
389:24 - we have constant loaders showing up here
389:28 - next thing is error St
389:31 - so here I want to return an error text
389:33 - and then I'll have error.2 string
389:37 - so here I have users list of user model
389:39 - and then I want to return a list view
389:42 - Builder okay so I can just return list
389:44 - view Builder because this is a list I
389:46 - want to return it and then I can have
389:48 - users.link
389:51 - now finally I want final user equal to
389:55 - users at a particular index
389:58 - I can take this user return it in a
390:02 - search Style
390:03 - which I'll have to create basically this
390:05 - search style is going to consist of
390:07 - everything about the user like their
390:10 - Avatar their number of followers
390:13 - following all of that but we only want
390:15 - to return an avatar the username their
390:18 - bio their
390:19 - at the rate username okay so we can go
390:22 - here in the explore create a new folder
390:25 - for it called widgets and here we are
390:28 - going to have search
390:29 - I'll import material dot I'll create a
390:32 - stateless widget and call this search
390:34 - tile
390:37 - will be requiring the user model so we
390:39 - have final user model user model and
390:43 - then we're going to require this through
390:44 - the user model Constructor now we have
390:47 - to return a list tile
390:51 - so we can have return list file
390:54 - then we are going to have leading which
390:56 - is circle Avatar
390:58 - and then we need a background image
391:01 - which will be Network image
391:04 - and we'll pass in the user model dot
391:07 - profile picture okay
391:11 - then we need a radius of 30 so that it
391:15 - looks big now just to see how it's
391:17 - looking we can return it over here so we
391:19 - have searched tile we'll pass in the
391:21 - user model which is the user we have
391:23 - extracted all of this pretty similar to
391:25 - what we have done earlier
391:29 - now we can restart our entire
391:30 - application
391:31 - now we can restart the entire
391:33 - application go to the search bar here
391:36 - you can see we are getting error because
391:37 - we are not finding uh
391:41 - an index so let's create an index here
391:43 - in the tweets not in the tweets actually
391:46 - we have to go to the users collection
391:48 - because we are having a query on users
391:52 - collection not the tweets collection
391:54 - so we'll create index let's call this
391:57 - search user name
392:00 - then this is going to be of the type
392:02 - full text since we are searching the
392:05 - user it's going to be of the type full
392:07 - text
392:08 - even if you mess things up it will give
392:10 - you an upright exception over here
392:13 - that this cannot be of the type this you
392:16 - have to use full text or whatever and
392:18 - then you can change it accordingly or
392:19 - you can just read the docs to get a
392:21 - clearer idea
392:23 - so I'll pass a name I'll pass in
392:25 - descending I'll click on create
392:29 - so I've passed in an invalid key I want
392:31 - to pass in searching that's it nothing
392:34 - else
392:35 - and then I'll have full text I'll pass
392:37 - in
392:38 - name ascending or descending whatever
392:42 - then click on create index has been
392:44 - created restart the application
392:47 - go to the search no error
392:50 - now I'll just have hi click on enter
392:54 - nothing shows up if I do test click on
392:57 - enter nothing shows up that's weird
393:00 - because my email Steps either at
393:02 - gmail.com
393:03 - so now
393:04 - to make this work we need one last thing
393:07 - over here
393:08 - in the explore screen there is a
393:11 - possibility of many API calls going over
393:13 - here in the body so what I want to do is
393:15 - is show users should be false so as long
393:19 - as it is false we should not be able to
393:21 - show the users list only when
393:26 - it show users is true we should show
393:28 - this otherwise we should only show a
393:31 - constant size box okay
393:34 - and this issue size box will be true
393:36 - whenever on submitted is set to true so
393:40 - whenever on submitted is clicked on we
393:42 - can do such state
393:45 - is show users is equal to true
393:50 - great now we can restart the app
393:54 - we can search for a user with test click
393:57 - on done and here it is here shows up the
394:00 - user with their profile picture now
394:02 - let's add more things to this
394:05 - so we can go to the search tile and here
394:07 - after the leading we need a title where
394:10 - we want to show the user's name so we
394:12 - have user
394:13 - model dot name
394:18 - then we need a style so that you know
394:21 - this looks bigger and we have textile
394:24 - where the font size should be bigger
394:26 - than original font weight should be
394:29 - a bit Bolder not exactly bold so we love
394:33 - font weight dot w
394:36 - 600
394:38 - we'll save it and here it shows up
394:41 - in the subtitle we have a column and in
394:46 - the column we have children
394:48 - in the children we have a text so the
394:50 - text is going to be this we'll paste it
394:53 - right here
394:54 - it will be usermodel.name we'll put add
394:57 - the read before it
395:00 - and we have to interpolate this so
395:02 - basically adding add the rate
395:05 - dollar so that this is a variable name
395:07 - with other rate before it
395:11 - then the font size can be 16
395:14 - and we can remove the Bolding part
395:17 - and since it's a subtitle it's going to
395:19 - be of the gray color
395:21 - now we need another text just like this
395:24 - one
395:25 - so we'll paste it in and we'll have
395:27 - usermodel dot bio
395:33 - and here the color should be palette dot
395:36 - white color the bio should show up in
395:38 - the white column
395:40 - because the subtitle color is usually
395:43 - gray and here you can see we are getting
395:45 - at the rate test right here we don't
395:48 - want it here we want it to be here so in
395:51 - the column we can have cross access
395:52 - alignment as cross access alignment dot
395:55 - start
395:56 - and here it is now if there is any bio
395:58 - of the user it will show up here and if
396:00 - there is no bio it will not show up
396:02 - or like it is there but you cannot see
396:05 - it obviously because it's empty
396:09 - now
396:10 - the searching feature is also complete
396:13 - now the next feature here is going to be
396:15 - whenever we click on this
396:19 - user tile we should be able to go to the
396:22 - user's profile
396:25 - and there we get the option to see the
396:28 - user's Banner image their profile
396:30 - picture their followers following their
396:32 - recent tweets all of that cool stuff
396:35 - so let's close all of the save files
396:37 - close all of the features
396:40 - and gets
396:41 - and let's get ready for another feature
396:44 - which is the user underscore profile now
396:47 - we'll start off this user profile
396:50 - by
396:52 - creating a view of it like how it should
396:54 - look there are a lot of levels to use
396:56 - because
396:58 - in Twitter if you see there it is not
397:00 - just you know simple scrolling it has a
397:03 - weird scrolling effect so you want to
397:05 - give that effect
397:07 - so we are going to do exactly that so
397:10 - here we are going to create a views
397:11 - folder
397:12 - create user profile view
397:15 - import material Dot and now create a
397:19 - widget for it and now we are going to
397:21 - create a stateless widget for it and we
397:22 - are going to call this user profile view
397:25 - actually we need a consumer widget for
397:27 - it not stateless widgets so let's read
397:29 - rename it and here we are going to need
397:32 - a widget ref
397:34 - and we also need to return a scaffold
397:37 - and in the scaffold let me retype it we
397:40 - are going to have a body no app bar
397:42 - directly a body and in this body we are
397:45 - going to get
397:46 - the user data so directly we are going
397:48 - to return a user profile how are we
397:50 - going to return that because we are
397:52 - going to ask for that user model right
397:53 - over here so we're going to get the user
397:56 - model from here
398:00 - and display it accordingly so I can just
398:03 - have user model user model
398:06 - Now to create a route for this I'm just
398:08 - going to go to some view file let's say
398:10 - home view I'll copy this route I'll go
398:13 - to the user profile view and just post
398:15 - it over here and then I'm going to
398:17 - return a user profile view but it's not
398:19 - going to be constant we have to return a
398:21 - user model so pass in the user model
398:24 - user model and we're going to take this
398:26 - from the parameter
398:29 - simple
398:31 - now based on this we are going to return
398:33 - the body as User it's not going to be
398:37 - user profile view sorry it's going to be
398:39 - a new widget that we are going to create
398:41 - in this folder itself which is user
398:43 - profile just user profile it contains
398:46 - the main code for our user profile
398:48 - design so we are going to have import
398:50 - material Dot
398:52 - then we are going to have a stateless
398:53 - consumer widget called user profile
398:58 - then we are going to import consumer
399:00 - widget
399:01 - and then we are going to return a nested
399:03 - scroll View
399:05 - now we need a header sliver Builder we
399:07 - need a header
399:09 - body sorry not a header body just a
399:11 - header sliver bar Builder and a body
399:15 - so here we're going to get two things
399:16 - context and is in a box scrolled so
399:19 - after we get both of them
399:24 - we have to return something
399:26 - and in the case of body we also need to
399:29 - return something again
399:32 - so in case of heady header board self
399:35 - sliver Builder
399:37 - that you um you had you you would you
399:41 - could you do you would you want you you
399:44 - you could do so you you do you could you
399:47 - you want you want thank you if I've
399:49 - heard of liver Builder we are going to
399:51 - have sliver well we have to return first
399:54 - and this requires a list of widgets to
399:57 - be returned so you're going to have a
399:58 - list of your return and then we're going
400:00 - to have sliver app bar and here I want
400:04 - to have an expanded height of let's say
400:06 - 150
400:07 - floating should be true this means that
400:11 - the app bar is floating
400:15 - or the app bar should become visible as
400:17 - soon as the user Scrolls towards the app
400:19 - bar
400:21 - snap should be true this means that
400:26 - the floating app bar will snap into view
400:29 - and both of them should be true together
400:31 - or false together
400:34 - and then we need flexible Space by a
400:37 - flexible space because now this app bar
400:39 - is going to be used to show the banner
400:41 - picture of the user so we need a
400:43 - flexible spacebar
400:45 - and now we are going to have stack
400:47 - because
400:50 - I want the user's profile picture to
400:52 - also be shown right above right on the
400:56 - top of this banner picture so first of
400:59 - all let's have banner picture and we are
401:01 - going to have positioned
401:02 - dot fill that means it takes the entire
401:06 - space and then in the child we are going
401:08 - to check if user Dot not user
401:14 - so we want to get the user picture here
401:16 - as well so you want to get final user
401:19 - model user model
401:21 - require it through the Constructor
401:26 - here when we return user
401:28 - profile will pass in the user which is
401:31 - the user model
401:34 - so here we have child as the user dot
401:38 - banner picture and we want to check if
401:42 - user.banner picture is empty so if it is
401:45 - empty then I want a container of blue
401:47 - color to shop that's what Twitter does
401:49 - if the user hasn't selected any banner
401:51 - picture it will just give a color of
401:54 - blue so we have palette dot blue color
401:59 - but if the container is not empty then
402:02 - what do I want to do well in that case I
402:05 - want to use image
402:11 - dot Network and here I'm going to return
402:13 - the banner picture so it's going to be
402:16 - user dot banner picture
402:19 - okay now we are getting this error
402:21 - because we have not specified children
402:23 - in the stack
402:27 - so let's pass that in take position dot
402:30 - fill and paste it over here
402:34 - and for the time being the Border body
402:36 - is going to be a simple container now we
402:38 - want to see this in action so what can
402:40 - we do
402:42 - we can go back to our search tile
402:47 - in the on top of this search tile we can
402:51 - just say navigator
402:54 - dot push context and user profile view
402:59 - dot route and then we'll pass in the
403:02 - user model
403:05 - okay so we're getting this user model
403:07 - based on the search screen whatever the
403:10 - user searches if you're getting that you
403:11 - user model we are passing it through the
403:14 - list Style on the on tap now we are here
403:18 - from here we pass it to the user profile
403:20 - over here
403:22 - okay so now if I just click over here
403:25 - you can see this shows up very nice now
403:28 - what I want here is at the top over here
403:31 - I want the user Avatar to show up and
403:35 - here the profile picture not profile
403:37 - picture sorry
403:40 - your is the profile picture going to be
403:42 - here is a follow button this is going to
403:45 - have the name of the user at the rate
403:47 - name of the user followers following all
403:51 - of that stuff the bio of the user and
403:54 - then all the latest tweets done by the
403:56 - user
403:57 - so to do that well first of all I'll
404:00 - need your in the
404:02 - stack a circle Avatar I'll have a
404:04 - background image and the background
404:06 - image is going to be Network image
404:13 - and then I'll pass in user.profile
404:15 - picture
404:16 - I'll save it now I also need a radius
404:19 - and the radius is going to be let's say
404:20 - 45
404:21 - I'll save it and here it is looks very
404:25 - weird I know
404:26 - now I can wrap this circle Avatar with a
404:29 - position widget so that it goes right
404:31 - below so we have bottom
404:34 - 0
404:37 - and here it is
404:41 - so it has gone to the bottom of this
404:43 - flexible space right here that's exactly
404:46 - where we want it to be
404:49 - now next thing we need is a follow
404:51 - button which should show up right here
404:53 - so to do that we are going to have
404:56 - an outlined button because well we need
405:00 - an outline button
405:03 - and the child is going to be text which
405:05 - says follow now this text is going to
405:08 - depend if it's the user himself then
405:12 - it's going to be added profile but if
405:14 - it's other user is going to be follow
405:16 - and if it's not the same person
405:19 - and if we are following the user then
405:22 - it's going to be the unfollow button but
405:25 - one thing is going to remain constant
405:26 - the textile which is going to have a
405:29 - color and the color is going to be
405:30 - palette dot white color
405:32 - and now when I put this button you can
405:34 - see again we get the similar design now
405:36 - to avoid this what we can do is wrap the
405:38 - outline button with a widget called
405:41 - container
405:42 - and here we are going to specify the
405:44 - alignment so the alignment is going to
405:47 - be alignment dot bottom right so if we
405:49 - do bottom
405:51 - right it will shift right to the bottom
405:54 - and I also need some padding basically
405:56 - margin so we can imagine or padding both
405:59 - will work in this case and then we are
406:01 - going to have agencies.all 20. now if we
406:04 - do this you can see it went
406:09 - away from the edges of the mobile so
406:13 - it's not going to be constant now you
406:15 - need to check if we want to show edit uh
406:18 - you know if the user is
406:20 - themselves so edit profile or someone
406:24 - else so we are going to get current user
406:26 - which is equal to ref.watch
406:28 - current user details provider
406:32 - dot value
406:34 - now if current user is null so return
406:37 - current user is equal equal to null then
406:40 - we want a constant loader otherwise a
406:43 - nested scroll View
406:47 - and now we are going to take this
406:49 - current user put it over here and check
406:52 - if current user dot uid is equal to the
406:55 - user.uid current user is our user
406:58 - user.uid is what we have taken from the
407:01 - Constructor
407:02 - if both of them are equal then we want
407:04 - edit profile to be there otherwise the
407:08 - follow button
407:10 - okay so we get the edit profile because
407:11 - it's our own User it's us now to add a
407:15 - different border to this to our outline
407:17 - button we can have Style
407:20 - elevated button dot style from
407:23 - and the shape will be
407:26 - shape
407:27 - rounded rectangle border
407:30 - where the Border radius is going to be
407:32 - border radius dot circular 20 and the
407:36 - padding is going to be constant Edge in
407:39 - such dot symmetric
407:42 - let's say in the horizontal Direction 25
407:45 - basically
407:47 - we are going to add a little bit of
407:49 - padding from the sides and have a
407:51 - circular border radius and to change its
407:54 - color we can just do
407:56 - side Border Side
408:00 - color palette dot white color
408:07 - now if I go over here
408:09 - I have this button showing up which is
408:11 - pretty cool
408:12 - and it is rounded as well
408:14 - now to increase the width we can just go
408:17 - ahead and type with let's say 1.5
408:22 - 10 but I don't want any wet so I'll
408:25 - remove it
408:27 - so here is our edit profile button now
408:30 - we need to get out of this this is all
408:33 - that we needed in this app bar
408:36 - on the banner pick I needed to show this
408:38 - profile picture and the edit profile
408:41 - button now below this we need to show
408:44 - the username of the user and all of that
408:46 - stuff so I'll just go to the sliver
408:49 - padding
408:50 - in the custom scroll view so after the
408:53 - sliver app bar gets over I'm going to
408:56 - come here and have sliver padding
409:00 - basically I want to add a padding from
409:02 - all sides of eight
409:06 - and now the sliver is going to be sliver
409:09 - list
409:10 - and this list is going to have a
409:12 - delegate and the delegate is sliver
409:15 - child list delegate
409:20 - and what is it that we need over here
409:21 - the positional argument the children so
409:24 - the children is going to be a list
409:28 - and the first thing we need is a row
409:31 - so you're in the sliver childless
409:33 - delegate I want a simple text to show up
409:36 - which is user.mame
409:38 - and then I need a style of constant
409:40 - textile
409:42 - where the font size should be 25 a
409:45 - little bit bigger than usual and font
409:47 - weight should be font weight dot bold
409:50 - so here it shows up my name now after
409:53 - this is done the next thing that I need
409:55 - is down below the same thing but with
409:58 - other eight so I'm going to have text
410:02 - like this with
410:05 - dollar and other it so at the rate
410:07 - user.name the font size should be
410:10 - smaller 17 and it shouldn't be bold but
410:14 - the color should be palette dot gray
410:16 - color okay
410:18 - here it is
410:20 - now the next thing I need is the user's
410:23 - bio
410:24 - so we have text user dot bio I'll just
410:27 - remove all the string
410:29 - and here the gray color should be
410:32 - removed the font size should match this
410:34 - at the rate sign
410:35 - and here it is this looks good but bio
410:38 - is not showing up of course when we work
410:39 - on the edit profile feature you'll get
410:41 - to see it
410:42 - now later on we need a constant size box
410:46 - of height 10.
410:49 - because now I want to show in a row
410:52 - format the number of followers the user
410:54 - has the number of following the user has
410:58 - so to do that what am I going to do
411:01 - I'm going to create a separate widget
411:02 - here which is going to be follow
411:05 - underscore count dot dot
411:08 - I'm going to import material dot I'm
411:10 - going to create a stateless widget and
411:12 - call it follow count
411:14 - and here we are going to return a row
411:16 - because you want to show the number of
411:18 - followers the user has and with the tag
411:20 - that this is followers and this is
411:22 - following okay
411:23 - so now we'll have final string count so
411:28 - like the counter
411:32 - and final string text
411:36 - then I'll require this through the
411:37 - Constructor
411:39 - in the children now I'll have a text
411:41 - that basically says the count so we have
411:44 - zero followers or five followers like
411:46 - that
411:48 - and we are having dollar count because
411:50 - this will be in an end format not a
411:53 - string format sorry
411:55 - okay now in the style we are going to
411:58 - have not stretch style style and we'll
412:01 - have constant textile because we want to
412:04 - have a color and the color should be
412:06 - palette dot white color
412:08 - the font size should be 18
412:11 - and font weight should be font weight
412:13 - dot bull because I want to bold it right
412:15 - I mean this
412:17 - count should be bolded because there is
412:19 - more emphasis on this yeah this guy has
412:21 - 17 followers so like there should be an
412:24 - emphasis on this
412:27 - and we are going to copy this text paste
412:30 - it again with some width here so let's
412:32 - say a width of
412:35 - three you can also add you know a
412:37 - padding from the right side or from the
412:39 - left side depending on where you add the
412:41 - padding but I'm adding a size box
412:44 - and this will show the text so what is
412:47 - like it followers following what
412:50 - and this will have a gray color
412:53 - font size should be 18 the same size as
412:56 - this okay so you can create a separate
412:58 - variable for it here called and font
413:00 - size which is equal to 18 because both
413:03 - of them should maintain the same font
413:04 - size every single time
413:07 - so let's remove the constant
413:09 - and obviously this is a double so we can
413:11 - make this double font size okay
413:15 - now I can take this follow count and put
413:17 - it here but I want it again in a row
413:21 - over here we had a row because I wanted
413:23 - to show the counter alongside
413:27 - the tag that this is following
413:29 - but over here we want the followers
413:32 - entire row
413:35 - showing beside the following entire row
413:39 - so for that I'm going to create another
413:40 - row I have children and the first child
413:43 - is going to be follow count
413:45 - and here the count is going to be user
413:47 - dot followers dot link don't use current
413:51 - user here this is user.followers.link
413:54 - and this will be follow us
413:59 - now we are going to have something
414:01 - similar
414:02 - but above it which should be following
414:06 - and this should be users dot following
414:08 - dot link okay
414:11 - now let's see what we are getting we're
414:13 - getting one following one followers
414:15 - that shouldn't be the case
414:18 - but that's how apprite is functioning
414:20 - right now because we are directly
414:22 - getting the user's follower dot link so
414:24 - if you want to change this you can just
414:25 - have minus one because this happens for
414:28 - literally every user so you can just
414:30 - have minus one
414:32 - and there is 0 follow 0 following also
414:35 - to leave some gap between them we can
414:37 - have constant size works of width 15.
414:41 - let's have constant
414:43 - and yep
414:45 - this looks much better
414:48 - now I'll exit out of this row leave some
414:52 - space so I have height of let's say 2
414:55 - and then I want to have a divider
414:59 - after I have the divider
415:02 - which doesn't show up so I'll just have
415:04 - a color color with palette dot white
415:07 - color
415:09 - come over here we have the divider
415:10 - showing up
415:11 - now below all of this divider I want
415:16 - a list of the tweets made by the user
415:19 - himself so if you are on this user we
415:21 - want to see all the tweets the user has
415:23 - made
415:26 - so I can come to the body and here we
415:28 - need to do that but even before doing
415:30 - that we have another step
415:32 - because we have to go to the user API
415:34 - and create an API or a function so that
415:38 - we can use it but we are not going to do
415:40 - that in user API we'll go to the Tweet
415:42 - API because at the end of the day this
415:45 - is tweet related we want to get the
415:47 - tweets made by the user so you can have
415:49 - future list of document
415:53 - get user tweets and then we are going to
415:57 - supply to it the user's ID
416:00 - we'll add the missing override
416:02 - implementation for it
416:04 - let's create async over
416:07 - and now this is very similar
416:10 - to the get tweets functionality so we
416:13 - are just going to have that let's go up
416:17 - copy this
416:21 - paste it away up we want to list the
416:23 - documents in this database ID this
416:25 - tweets collection but the query is going
416:27 - to be different because here we want to
416:30 - check if the query is equal we want to
416:33 - get all the user streets correct so you
416:35 - want to check if the uid
416:38 - is equal to the uid simple the Tweet
416:42 - collection has a uid property there we
416:44 - are checking if it is equal to the uid
416:47 - supplied by the parameter
416:51 - and then we are returning this now we
416:54 - can go to the user profile view
416:59 - your create
417:00 - a controller and this will be user
417:03 - profile controller
417:07 - dot dot and I don't want to write all
417:10 - the boilerplate code again and again so
417:13 - what I'm going to do is copy this
417:14 - controller from here paste it here and
417:17 - I'm going to make changes over here only
417:18 - so I'm going to remove the search user
417:21 - provider
417:22 - here I'm going to press option and
417:25 - select everything that has explore in it
417:28 - except this one
417:30 - so lab explore
417:33 - remove all of this
417:35 - then I'm going to have user profile
417:37 - controller
417:39 - also over here we are going to have
417:41 - small user profile controller
417:45 - and we don't need user API we need tweet
417:49 - API underscore
417:52 - tweet API
417:54 - then underscore tweet API should be
417:57 - equal to
417:59 - 8 API so let's have tweet API
418:04 - okay
418:05 - and this function is going to be get
418:07 - user tweets we are going to supply it
418:10 - the uid of the user
418:12 - well
418:13 - this uid is not to be confused with the
418:16 - uid of the current user if we do the
418:18 - current user's uid we'll get the tweets
418:20 - of the current user we don't want
418:22 - current user we want the tweets of the
418:25 - user on Whose profile we are
418:27 - and here we'll just do underscore tweet
418:30 - API this will be tweets
418:32 - Dot
418:34 - get
418:36 - user tweets we'll pass in the correct
418:38 - uid then we'll map through the tweets
418:41 - we'll do we'll return tweet
418:44 - Dot from map and also the return data
418:47 - type over your should be tweet so we
418:49 - have fixed everything of course we need
418:52 - to pass and tweet API provider over here
418:54 - and
418:56 - I think we are almost done over here
418:59 - let's remove the unused Imports now we
419:02 - just need to create a future provider
419:04 - and then only displaying part is left
419:07 - so we have
419:10 - get user tweets provider
419:14 - dot family and we want to get the uid of
419:17 - the user which is string uid
419:19 - then we want to have final
419:22 - user profile controller which is equal
419:25 - to ref dot watch
419:27 - user profilecontroller provider.modifier
419:31 - and then finally we are going to return
419:35 - user profilecontroller dot get user
419:37 - tweets and then we are going to return
419:39 - with the uid of the user that we are
419:41 - going to get from the UI
419:43 - so we can go to the UI
419:46 - here we are going to have ref.watch get
419:50 - user tweets provider
419:52 - then we need the uid of the user which
419:55 - is user dot uid not the current user uid
419:58 - Make sure
420:00 - and then we need when now in case of
420:03 - data we have to do something error will
420:05 - give us s error and ST which we will
420:08 - return as error text
420:11 - where we have to convert it to a string
420:13 - and return and then a loading where I
420:16 - just have to show a normal loader and
420:19 - here we are getting tweets so I have
420:21 - tweets and what I want to do is return a
420:24 - list view Builder so that I can show
420:26 - that yeah this is all the you know
420:30 - things that I have
420:32 - and actually instead of writing all of
420:34 - this code why can I not just go to the
420:37 - Tweet list
420:38 - just copy everything from here
420:42 - not everything just this part and paste
420:46 - it over here of course if you want your
420:50 - user profile to be you know
420:53 - real time working for example if someone
420:56 - likes a tweet or something you want them
420:58 - to
420:59 - see that in real time of course you
421:02 - should
421:05 - copy all of this but first what I want
421:07 - to do is just display the tweets as it
421:09 - is and we're getting this error of
421:11 - course because of the index so we'll go
421:13 - to the tweets
421:15 - indexes and what is this index well this
421:18 - is the uid equal part so I'll just do
421:21 - uid equal and we have said that these
421:25 - should be equal so this should be a key
421:28 - uid
421:30 - defending create
421:33 - I'll restart the app
421:35 - go to the user so we have test
421:40 - go where and all the tweets from test
421:43 - show up over here and you can see we
421:45 - have a little bit of weird scrolling
421:47 - effect as well so if you just go over
421:49 - here and come back you can see there is
421:52 - not the normal scrolling you can see it
421:54 - in this part
421:58 - sorry this part
422:00 - okay
422:02 - so if you want to see it again you can
422:04 - see it if we come back yep here it is
422:07 - now whenever we click over here it's not
422:09 - going to be real time of course there's
422:11 - no real time logic in r
422:15 - user profile can
422:17 - use a profile over here
422:19 - so even if we try to retweet it happens
422:22 - it retweets but
422:25 - it's not real time it doesn't show the
422:27 - one upgraded counter so for that you can
422:31 - of course add all of this logic
422:36 - by adding all of this so I'll just copy
422:39 - all of this
422:42 - and paste it to the user profile but I'm
422:45 - not going to do that you can do it on
422:47 - your own and if you face the same bug
422:50 - that we had faced earlier you should
422:52 - copy everything from the
422:54 - reply view screen so this part you can
422:57 - copy everything from here
423:00 - or let me just do it so I'll just copy
423:03 - this
423:05 - entire thing
423:07 - I'll come over here to the user profile
423:11 - where is it yeah
423:13 - and I'm going to return this thing
423:17 - now I'm going to import the Tweet model
423:20 - I'm going to have upright constants
423:23 - we are going to have get latest tweet
423:25 - provider
423:27 - and we don't need to add this logic over
423:29 - here
423:30 - so we only add this logic okay
423:34 - so now if we try to do retweet it shows
423:37 - up real time
423:39 - but just to make this look very simple
423:42 - what I'm doing here is just returning
423:45 - listview Builder so if you want to check
423:46 - out my GitHub repository this will not
423:48 - be mentioned I've just showed it to you
423:52 - I can type a comment that make it real
423:56 - time
423:57 - or can make it real time
423:59 - byte
424:01 - copying code from
424:06 - Twitter reply view okay so you can do
424:10 - that if you want but I'm not going to do
424:12 - that
424:13 - so now tweets are showing up over here
424:16 - now what will be the next step so the
424:19 - next step is obviously to edit the
424:21 - previews or profile so if the user
424:22 - clicks on edit profile we go to the edit
424:25 - profile screen and there we get the
424:26 - option to
424:28 - select a profile picture select a banner
424:30 - picture
424:31 - select uh you know the name changing bio
424:34 - changing all of that so let's get into
424:37 - that so for the edit profile screen we
424:40 - are just going to go in the view and add
424:42 - edit profile view over here and after
424:45 - adding that we are going to import
424:46 - material dot we are going to create a
424:48 - state full widget
424:50 - and this will be stateful consumer and
424:53 - we are just going to have edit profiles
424:55 - View
424:56 - now I'm just going to import flutter
424:59 - overpod Library I'm going to return a
425:01 - scaffold and here let's decide what we
425:04 - want well first of all in the body
425:07 - I want a column and in that column I
425:10 - want children and the first child that's
425:12 - going to be there is going to be exactly
425:14 - what we are put in the user profile so
425:17 - we are just going to go up and copy this
425:21 - thing the stack portion and I'm just
425:25 - going to copy it till here
425:27 - paste it in then close the stack and now
425:31 - we need the current user so
425:34 - we can get the current user which is
425:36 - final
425:38 - user is equal to ref dot watch
425:42 - current user details provider dot value
425:46 - and while we are getting that if it is
425:50 - null then we just want to show loader
425:52 - otherwise we'll get null check operator
425:54 - used on a null value and after getting
425:57 - this obviously let's just import theming
426:00 - and this looks good
426:02 - now let's see how this is coming about
426:04 - so when we click on the edit profile we
426:07 - should see the screen
426:09 - so here let's just put in the route so
426:12 - to get the route we can just go to one
426:14 - view file let's say home view copy it
426:16 - paste it here and then we have edit
426:19 - profile view router
426:21 - okay so now the next thing that's needed
426:24 - is
426:25 - whenever the edit profile button is
426:27 - clicked we want to go there so
426:30 - we'll go to the user profile and on this
426:33 - outlined
426:35 - button we'll check if
426:38 - current user dot uid is equal to
426:41 - user.uid so if both of them are equal
426:46 - we want to edit the profile so we are
426:49 - just going to use Navigator dot push
426:52 - and we're going to go to the edit
426:54 - profile view dot route
426:58 - save it now whenever I click over here I
427:01 - go to the edit profile view but I don't
427:03 - see anything
427:05 - and I'm getting this error over here so
427:07 - let's try to resolve this error first of
427:09 - all we want to give our stack a specific
427:11 - height
427:13 - so that it doesn't exceed the given
427:15 - portion so here the stack can hide have
427:18 - a height of size box height let's say
427:22 - 200 it should not exceed that
427:24 - and here we have it our
427:28 - stack looks good over here
427:30 - next thing I want to do over here is not
427:33 - use position dot fill instead just wrap
427:36 - it with a container and in the container
427:39 - add width as double dot Infinity so the
427:42 - maximum amount of space height will be
427:45 - 150 so we'll save it
427:49 - the height is bit reduced so
427:52 - the profile picture shows up here
427:54 - but since the stacks height is this much
427:58 - you know 200
428:00 - the profile picture seems to be on top
428:04 - of two screens like this
428:07 - then we need a decoration and the
428:09 - decoration will be box decoration we'll
428:11 - pass in Border radius such as border
428:13 - radius dot circular and we'll pass in 10
428:16 - as a border radius cool
428:20 - so this is a bit rounded you won't be
428:22 - able to see it right now but yeah it is
428:24 - after this container let's position this
428:27 - we don't want it here we want it to go a
428:30 - little right
428:33 - and from bottom we wanted to go a little
428:36 - up so what we are going to do here is
428:38 - from bottom we want 20 and from the left
428:40 - because we want to go in right we want
428:42 - 20. so we'll save it and here it is this
428:45 - looks good now we'll reduce the radius
428:47 - so we'll keep at 40 and this looks
428:49 - better
428:50 - now the next thing
428:53 - is outside of this stack after the size
428:55 - box we need some text editing
428:57 - controllers because we want the name
429:00 - controller the bio controller so that we
429:02 - can change it so we have text editing
429:05 - controller final bio controller which is
429:08 - equal to text editing controller
429:12 - then we have dispose functions for it
429:15 - and then we are going to have name
429:17 - controller dot dispose
429:19 - biocontroller dot dispose
429:23 - so after this we can go down and here we
429:26 - are not going to have any styling for
429:27 - our text field actually because that's
429:30 - how Twitter looks it there is nothing no
429:33 - that doesn't feel to be any styling so
429:35 - we can just pass in the controller as
429:37 - name controller decoration can be
429:39 - constant input decoration
429:43 - the hint text let's put hint text as
429:47 - name
429:51 - save it and here you can see this looks
429:54 - better already but let's add a bit of
429:56 - padding so we have content padding of
429:59 - edge insets dot all
430:03 - 80.
430:06 - and this looks much better
430:08 - now we can copy this text field
430:11 - and paste it over here
430:14 - now you can see we have two text Fields
430:15 - let's put some height between these two
430:17 - text Fields so we have constant size box
430:20 - height 20. save it and here it is looks
430:24 - better
430:26 - now we'll put this as bio bio controller
430:29 - and save it
430:32 - also in the bio the bio can be longer so
430:35 - we want Max lines property to be let's
430:37 - say 4.
430:39 - and here it is the Bible is much bigger
430:43 - this looks good so we're going to keep
430:44 - it this way now the last thing that we
430:46 - need is the app bar so where you're
430:50 - right at the top you're going to have an
430:51 - app bar
430:53 - with a title and the title is going to
430:55 - be text edit profile now we can const it
431:00 - and save it here you see we have our
431:03 - edit profiles showing up
431:05 - we don't want the center title so we can
431:08 - remove that so it shifts to the left
431:10 - hand side similar to Twitter and now we
431:13 - finally need an actions button basically
431:16 - a button over here so we are going to
431:18 - use actions and have text button over
431:20 - there
431:22 - now on pressed is going to be an empty
431:24 - function the child is going to be
431:26 - constant text of save basically save all
431:30 - the details here
431:32 - we save it and here we see the save
431:34 - button showing up this is cool
431:37 - now what I want to do is whenever the
431:39 - user clicks on this profile picture
431:41 - banner picture sorry or this profile
431:44 - picture
431:46 - we should be able to see open the image
431:49 - picker we have already created a
431:51 - function for picking multi images we're
431:53 - going to create a similar function but
431:54 - to pick just one image
431:57 - and also this typo is there so let's
431:59 - edit that and actually edit that and go
432:04 - to
432:07 - utils.create our function which is
432:09 - similar to this but this time we are
432:11 - just going to return one file which is
432:13 - Future
432:17 - file
432:19 - and this can be nullable
432:21 - we'll remove the list of images we have
432:24 - a match picker we will remove all of
432:25 - this
432:31 - we get the image file over here because
432:33 - we are not going to pick multi match we
432:34 - are picking just one image and the
432:36 - source will be image source dot gallery
432:39 - so from the gallery we want to pick our
432:41 - image and now we can return a file
432:44 - saying
432:46 - MH file Dot
432:48 - path obviously we need to put a check if
432:51 - image file dot is not equal to null so
432:55 - if it is not equal to null then we want
432:57 - to return
432:59 - a file but if it is not null then we
433:03 - want to return null
433:06 - I think I said it already I think I said
433:09 - it differently
433:11 - so this should be pick image
433:14 - so if image file is not null that means
433:16 - the user actually picked some image
433:19 - we're going to return the file with the
433:21 - path similar logic to what we had here
433:25 - otherwise you're just going to return
433:26 - null that the user has not selected any
433:28 - picture
433:30 - so now we can go to the user edit
433:33 - profile picture and now create two
433:35 - functions one for selecting the banner
433:38 - image
433:40 - let's work on that first so this is
433:43 - going to be asynchronous and then we are
433:46 - going to get the banner so we have
433:47 - Banner equal to await pick image not
433:51 - pick images
433:53 - and now we are going to check if Banner
433:55 - is not equal to null so Banner is not
433:58 - null what do we want to do well we are
434:00 - going to create Global variables here
434:03 - which are nullable and make sure that
434:07 - this is not apprite models.dot
434:09 - I've already told you that file also
434:12 - exists in apprite models what we want is
434:15 - import dot IO
434:19 - so we are going to import that and then
434:21 - we are going to have let's say Banner
434:24 - fight
434:26 - so this is null basically the point of
434:28 - this variable is that we want to display
434:31 - the banner file if it's selected
434:33 - on the screen so if we have it globally
434:35 - we can display it and we've done similar
434:37 - things for the edit profile not edit
434:40 - profile sorry we have done it for the
434:43 - create tweet screen as well
434:47 - the similar thing we are going to do
434:49 - here we have file question mark we're
434:51 - just going to have
434:53 - globally created and if Banner your the
434:57 - image selected is not null then we want
434:59 - to set States so that the build function
435:01 - rebuilds and then we have Banner file
435:04 - equal to Banner so basically This Global
435:08 - variable is equal to the banner that we
435:10 - have selected
435:13 - okay now what we want to do is just bind
435:15 - this function
435:17 - to whenever we click here so we want to
435:19 - wrap our
435:20 - entire size box which contains a stack
435:25 - not the stack let's just contain this
435:27 - one so you're going to wrap it with a
435:30 - gesture detector and we're going to have
435:32 - an on tap and in the on Tab we are just
435:34 - going to mention
435:36 - select Banner image
435:38 - here let's also add the property that if
435:41 - Banner file is not equal to null so a
435:44 - banner file is not equal to null then we
435:46 - want image dot file and we'll pass in
435:49 - the banner file
435:51 - otherwise we'll just check that the unit
435:53 - binary is empty if it's empty then we
435:55 - want palette dot blue color otherwise
435:57 - image.network
435:59 - now let's try to see if it works I'll
436:01 - click over here
436:03 - I'm going to select a image
436:06 - keep current selection
436:09 - okay this feels good I can select this
436:11 - image also but I wanted to take the
436:14 - entire space possible so I'm going to
436:16 - have fit as box fit
436:19 - dot contain
436:24 - or cover
436:27 - fit with sorry
436:28 - so you're going to unbox fit dot fit
436:31 - with we do it for your and also for year
436:35 - so we have box fit dot Fitbit so that it
436:38 - fits the entire width
436:40 - great now you want to do the same thing
436:43 - for the profile picture as well so we'll
436:45 - copy this have void select
436:48 - put a file
436:51 - image then we want profile image if
436:54 - profile image is not equal to null then
436:57 - we want this so we'll have file
437:01 - profile file
437:05 - and then profile file should be equal to
437:08 - profile image great now we can copy this
437:12 - go down in the circle Avatar wrap it
437:16 - with the gesture detector we're not
437:18 - going to wrap the position widget we're
437:20 - going to add the circle Avatar and we
437:23 - have on tap
437:24 - and pass in the select profile image
437:27 - now when we click over here we can
437:29 - select another image so we have leaf
437:32 - it doesn't show up so to show it we can
437:35 - do it right here but when you do it over
437:38 - here it doesn't fit for example if I
437:41 - just show it to you we have profile file
437:44 - not equal to null then I want to show
437:46 - file image right our image is a file so
437:50 - you want to show file image profile file
437:53 - okay but this is giving us this error
437:55 - the argument type file cannot be
437:57 - assigned to the parameter type file
438:00 - so if I just do this it shows another
438:03 - the argument type object cannot be
438:05 - assigned to the parameter Type image
438:07 - provider object okay so we cannot do it
438:10 - this way
438:12 - we'll have to find another way another
438:14 - way is to wrap this
438:17 - so profile file is not equal to null
438:20 - then I'm going to have a circle Avatar
438:23 - widget
438:25 - that's right but here I'm going to have
438:27 - file image and I'm going to use the file
438:31 - as profile file
438:33 - so since we cannot do it in the
438:35 - background image we had to do it in the
438:38 - child property of gesture detector
438:40 - and now if we come over here you can see
438:42 - Leaf is showing up
438:43 - this is pretty cool now
438:46 - last thing is whenever we do all of
438:49 - these changes and click on Save we want
438:51 - to save all of this data in the users
438:55 - document so to do that we are going to
438:58 - close all the save files for now we're
439:00 - going to the user API and creating a
439:03 - function for it in the abstract class
439:05 - so we are going to create a function
439:07 - called future either void we are not
439:10 - going to return anything from this
439:12 - function we are just going to update the
439:15 - user data and that's it
439:18 - and while updating the user data we
439:20 - obviously need the user model because we
439:22 - don't know what has changed
439:24 - now I'm going to create one missing
439:26 - override
439:29 - and obviously I need all the try catch
439:31 - block so I'm just going to copy this
439:35 - paste all the boilerplate code have
439:37 - async over here
439:39 - and see what I want to change well over
439:42 - here I want to update the document
439:43 - that's first change database ID is
439:46 - correct collection ID is indeed users
439:49 - collection the document IDs
439:51 - usermodel.uid the data is usermodel.2map
439:55 - that means everything else is just fine
439:59 - so I can use this now I just want to go
440:02 - to the user profile controller and
440:05 - create my function
440:07 - what is my function well
440:09 - void update user model
440:12 - or user profile
440:17 - and here I'm going to get certain things
440:19 - so I'll just
440:21 - put required since there are many
440:22 - arguments to be taken from
440:26 - this function I am putting it in a named
440:28 - Constructor Whenever there are more than
440:30 - you know two or three just put it in the
440:33 - name Constructor so that it's much
440:35 - easier
440:36 - first thing I require is the user model
440:38 - so I've user model then I want the build
440:41 - context so that I can display errors
440:43 - because a lot of stuff is going to go
440:46 - into this I want to upload images right
440:50 - then I need file
440:53 - and this file should not be apprite file
440:55 - it should be dot IO
440:57 - make sure it's not even dot HTML okay
441:00 - and now we can have Banner file and
441:04 - similarly we are going to have profile
441:06 - file
441:07 - why are these variables null because
441:10 - these variables can be none
441:13 - when the user doesn't select anything
441:15 - these are null so we don't want to
441:17 - change them correct
441:20 - cool now we just want to check if Banner
441:23 - file is not equal to null so if Banner
441:26 - file is not null what do I want to do
441:27 - well I want to upload the data or the
441:30 - upload the file to the storage get the
441:33 - download URL and add it to my user model
441:36 - simple enough we already have a function
441:38 - for it already created so I'll just
441:40 - import storage API where I've already
441:42 - implemented this so that it can be
441:44 - reused
441:47 - I'm going to require this through the
441:49 - Constructor
441:50 - and have underscore storage API equal to
441:53 - storage API
441:55 - now what I'm going to do is final Banner
441:58 - URL is equal to a weight so we'll put
442:01 - async over here
442:04 - underscore storageapi Dot
442:08 - upload image and what is the image that
442:11 - we are trying to upload well it's going
442:13 - to be in a list format and it's the
442:15 - banner file
442:18 - and now once we get the banner URL
442:21 - it's going to be in a list format
442:23 - because we are uploading a list but it's
442:26 - just going to have one thing one element
442:29 - in its list
442:32 - because you have uploaded only one file
442:34 - right and according to our logic and
442:35 - upload image we run through every file
442:39 - and add it to image links we are going
442:40 - to run only one time so it will have
442:43 - only one image and now
442:45 - I can just do user model equal to
442:48 - usermodel dot copyright and I'm going to
442:51 - replace the banner URL so we have Banner
442:53 - pick as Banner URL
442:58 - add 0 because I want to grab the first
443:00 - element
443:01 - if you do first
443:03 - you know 0 add to 1
443:06 - then it will give us an error because it
443:08 - is index out of range the list length is
443:11 - only one how can you access one when the
443:14 - numbering starts from zero
443:16 - similar logic is going to go in the
443:19 - profile file as well so if profile file
443:22 - is not equal to null
443:23 - then we are going to upload the profile
443:25 - file and then we are going to have
443:27 - profile picture as
443:30 - let's rename this to profile URL and we
443:33 - have profile URL at zero
443:38 - and then we are going to have final
443:39 - result is equal to await underscore user
443:45 - so we don't have access to user API we
443:47 - also want to get user API
443:49 - because we are going to call the user
443:51 - API so that we can store the data
443:52 - correct now we have user API and we can
443:56 - do required
443:57 - user API user API
444:02 - and underscore user API should be user
444:05 - API
444:06 - now I'll take this underscore user API
444:09 - put it here and call
444:12 - update user data function on it don't
444:14 - use the save user data if you use Save
444:16 - user data it will again create a
444:18 - document and it will override the
444:20 - existing document so that means your
444:22 - followers and everything
444:23 - might just go away
444:28 - so we have this done now we just fold it
444:30 - so that we know if it's a success or a
444:32 - failure in case of failure we show
444:36 - l dot failure you know l dot message
444:39 - failure and in case of success what do
444:43 - we want to do well
444:45 - we just want to pop because I want to
444:48 - get out of the screen
444:50 - so I can pop it right here
444:52 - now I'll go up at the top I'll add
444:55 - storage API which is ref.watch storage
444:57 - API provider I'll add user API which is
444:59 - ref.watch to user API provider
445:03 - and save it
445:05 - now all of the update user profile work
445:08 - is done let's go to our edit profile
445:10 - view
445:13 - add everything to this save button so we
445:15 - have ref dot read
445:17 - user profilecontroller dot Notifier
445:21 - Dot and what do we want to do well we
445:24 - want to update the user profile so we
445:26 - can update user profile pass in the user
445:28 - model which is user
445:32 - and this cannot be null
445:35 - because the user will only click on the
445:37 - save button after this user is equal to
445:40 - null all of these validations have
445:41 - happened
445:43 - then we have context Banner file profile
445:45 - picture already passed in and everything
445:48 - is now done
445:50 - also one important thing that I want to
445:52 - add
445:53 - is state so if state is true I want to
445:56 - add this
445:58 - and
445:59 - state is false I want to add here
446:03 - so basically
446:04 - is loading so it's loading has started
446:06 - is loaded as ending so here now I just
446:09 - want to share if it's loading then I
446:11 - want to watch
446:12 - the user profile controller provider
446:16 - if I hover over this this is object so
446:19 - I'll go up at the top in place of State
446:22 - Notifier provider add the type so it's
446:25 - user profile controller and Boolean
446:27 - after you add this you'll notice
446:30 - this is now the type Boolean and that is
446:33 - five for every state Notifier provider
446:35 - we created I mentioned the type but not
446:37 - for future provider or state or your
446:40 - stream provider
446:42 - now I can take this as loading and put
446:44 - it here so if it's loading or the user
446:47 - is null then we are going to show the
446:49 - loader otherwise our widget tree now I'm
446:52 - just going to restart my application I'm
446:54 - going to go to the user profile so I'll
446:57 - just have test
446:59 - I'll click on edit user profile let's
447:01 - select an image this one looks nice
447:04 - saitama also looks good I'm just going
447:06 - to rename myself as Revan
447:09 - and my bio will be hello there
447:12 - how are you
447:14 - and then click on Save we saw loading
447:17 - indicator for some time but no problem
447:20 - and if you see this has not updated but
447:22 - if I just restart my application
447:26 - go to the test user again
447:30 - you can see I'm seeing the banner
447:33 - picture but this is not quite correct so
447:35 - I can go to my profile view
447:40 - the user profile
447:42 - and here in the image.network I can have
447:44 - fit as box fit dot fit with
447:48 - after I do this this looks much much
447:50 - better
447:51 - but other thing that did not change is
447:54 - the
447:55 - name of the user and the buyer of the
447:58 - user why was that well that's because if
448:01 - we go back to the user profile
448:04 - here we have passed in
448:08 - the save sorry the edit profile if we go
448:11 - there you see we have just passed in the
448:13 - user we have not updated the user anyway
448:17 - basically this is the same user that was
448:19 - there we have not updated that bio so we
448:22 - don't know if we want to update the bio
448:23 - of the user or not so here what I want
448:25 - to do is user.copy with and I'm going to
448:28 - update the bio as
448:31 - biocontroller dot text and
448:35 - the name of the user will be name
448:37 - controller dot text
448:40 - but what if I just come over here and
448:43 - click on Save after changing these
448:45 - profile pictures it's just going to take
448:47 - the biocontroller.txt right now it's an
448:49 - empty string it will just take that I
448:52 - don't want that to happen so what I'm
448:54 - going to do here is provide with a
448:55 - default name in the NH state
448:58 - so what I mean by that is I'm going to
449:00 - have text editing controller
449:02 - let's call this late text editing
449:04 - controller
449:07 - also this will be late
449:12 - text editing controller bio controller
449:15 - remove that
449:18 - and in the init State method
449:21 - I'm going to specify this so name
449:24 - controller is equal to
449:27 - text editing controller
449:31 - and here we want to provide the text
449:33 - what is the initial text that needs to
449:35 - be filled in so the initial text is ref
449:38 - dot read since we're using outside of
449:41 - the build function in some in its state
449:44 - or dispose like methods the widget life
449:47 - cycle methods
449:50 - we are going to use ref.read and we are
449:53 - just going to copy all of this
449:55 - so let's paste it in I want ref.trade
450:00 - and we want
450:02 - the name of the user to be there
450:07 - but you can see this value is empty uh
450:10 - null right so if it's null then I just
450:12 - want to do if it is null
450:15 - then I want there to be an empty string
450:17 - otherwise nothing
450:21 - the same thing will go for the
450:23 - biocontroller as well we are going to
450:24 - have bio controller
450:26 - ref dot read but this will be bio
450:29 - and none
450:31 - now if we come from edit profile over
450:33 - here you can see test is there bio let's
450:36 - write it again hello there how are you
450:41 - and my name right now is going to be
450:43 - let's say whatever I'll click on Save
450:46 - nothing gets changed but if I again
450:51 - try to restart my thing so if I just
450:55 - restart my application like this
450:58 - I can just have test
451:01 - there's no user with the name test let's
451:04 - find Revan here there is and here is the
451:07 - bio hello there how are you this looks
451:09 - great the edit profile feature is now
451:11 - complete
451:13 - the next feature is the follow feature
451:15 - so that we can increase account but even
451:17 - before that I want this to happen
451:20 - basically I want everything to happen in
451:22 - real time you saw when I edited the
451:24 - profile and came here it was not real
451:26 - time update I want that to happen so how
451:29 - can I do that with the help of
451:32 - real time so I'm going to do exactly
451:34 - that first and then go to the follow
451:36 - section because even while following
451:39 - when the user clicks on follow we want
451:41 - this numbers to update automatically so
451:45 - real time will help there as well so
451:47 - let's get started with real time first
451:49 - configure it for the profile screen and
451:52 - then we can
451:55 - go to the follow button so there are two
451:57 - approaches with real time you can take
451:59 - your first approach is not what I'm
452:02 - going to show you is the second approach
452:04 - basically we can go to the user API and
452:08 - here obviously the normal real time we
452:11 - are going to use so we are going to have
452:12 - final real time underscore real time
452:17 - and we are going to have required real
452:19 - time real time I'll show you the second
452:22 - approach
452:23 - but first let me just have underscore
452:25 - real time equal to real time
452:28 - when we get to the second part I'll let
452:30 - you know here let's just have real time
452:32 - as ref dot watch real time
452:36 - provider
452:39 - and here we are going to have stream of
452:42 - real-time message just like we had for
452:44 - our tweet we're going to have that and
452:46 - we are going to have get latest user
452:48 - profile data
452:51 - we have profile data and that's it
452:56 - now we are going to create one missing
452:57 - override we are going to have here and
453:00 - now we are going to return underscore
453:02 - realtime dot subscribe now we need to
453:05 - provide a list of channels to subscribe
453:06 - to dot stream
453:08 - and what is the channel well we are just
453:11 - going to copy from the Tweet API so we
453:14 - have underscore
453:15 - real time
453:17 - dot subscribe let me just find
453:22 - here it is I'm just going to copy this
453:26 - and paste it over here
453:29 - so you have databases dot app right
453:31 - constant database ID but the collection
453:34 - here should be users collection
453:37 - dot documents and
453:40 - what I was talking about this is the
453:41 - first approach this is the first channel
453:43 - you can subscribe to the second channel
453:45 - that you can subscribe to is
453:48 - getting the uid of the user from here
453:52 - updated accordingly in the abstract
453:54 - class and just use that uid over here so
453:57 - we have collections of user collections
454:00 - dot documents dot dollar uid
454:05 - but this is not the approach you are
454:06 - going to take you can take this also
454:08 - there's no doubt about it
454:10 - now we can just go to the
454:13 - profile
454:15 - controller
454:18 - and we're going to have it created over
454:21 - here right at the top stream provider
454:23 - remember we did this for the Tweet
454:26 - controller as well
454:28 - we are not going to create anything and
454:30 - use a profile controller we're going to
454:32 - go
454:34 - in the Stream provider directly so here
454:37 - we're going to have get latest user
454:40 - profile data provider
454:44 - so let me just copy this
454:47 - we don't need anything from stream
454:49 - provider let's just remove it and here
454:52 - we are going to have final user API is
454:55 - equal to ref.watch user API provider
454:59 - let me have user API provider and we are
455:02 - going to return user API Dot
455:08 - get latest user profile data okay now I
455:12 - can copy this go to my profile user
455:15 - profile view right here and now I can
455:19 - use my ref
455:22 - this is why we had used consumer widget
455:25 - right
455:27 - so in the body we are going to have ref
455:30 - dot watch
455:31 - get latest user profile data provider
455:36 - dot when and then we want to handle the
455:40 - error and the loading States first so we
455:43 - have error
455:44 - text and then we pass in error.2 string
455:49 - then we need loading loading is just
455:52 - going to be constant loader
455:55 - now I can copy this
456:01 - and
456:03 - in the data I can paste it right there
456:06 - so I have this
456:11 - so we're going to return the user
456:13 - profile
456:15 - now in the user profile we get the
456:17 - latest user profile data all of that now
456:20 - we are just going to check if
456:23 - latest
456:25 - or if data dot events dot contains just
456:29 - like we did for tweet
456:33 - we are just going to check if it
456:35 - contains the update property because we
456:38 - have updated the user profile right so
456:40 - if it contains this channel
456:42 - then we have to make some changes so
456:45 - what is it that we want to see well
456:47 - let's just copy everything from the user
456:50 - API first
456:51 - so we'll copy this thing
456:55 - and we're going to replace everything
456:57 - with upright constants with star so that
457:00 - you know it can be anything
457:03 - also remove this make sure this is
457:06 - correct
457:07 - and here you need to make sure that the
457:10 - documents after documents there is user
457:14 - ID so we'll just do dollar user
457:18 - model Dot uid
457:23 - dot update
457:25 - okay now even before that we have some
457:28 - other thing to do so databases dot star
457:32 - dot collections dot star so this
457:35 - collections.star is not going to be star
457:37 - because we don't want to see if tweets
457:39 - collection has an update no we just want
457:42 - to see if the user's collection has any
457:44 - update so we're just going to have
457:46 - upright
457:48 - constants
457:52 - dot users collection
457:56 - let's import upright constants
457:59 - then we have documents then we have uid
458:02 - and then we have update and now what I
458:04 - want to do is basically if there is any
458:07 - update I just want to take the user data
458:10 - convert it to user model and send it to
458:12 - user profile
458:14 - so we can send the same user model but
458:16 - only problem is we have used final over
458:19 - here
458:21 - if your views final we cannot reassign
458:23 - it so what can we do instead well we can
458:27 - just make another user model we can call
458:29 - this copy of user which will be equal to
458:33 - the user model that we get from The
458:35 - Constructor now we can take this copy of
458:38 - user pass it over here pass it to this
458:42 - as well copy of user.uid
458:44 - and even here because this is not final
458:46 - and then we can say copy of user is user
458:49 - model Dot from map data dot payload
458:54 - okay so if any changes happen so if
458:57 - update is create called copy of user is
459:00 - usermodel Dot from map so we give it an
459:03 - instance of another user model
459:05 - and return the user profile with copy of
459:08 - user so if this changes this will return
459:11 - again
459:12 - having understood this let's restart
459:15 - also
459:17 - I think the loader is constantly going
459:19 - to load but before that what I want to
459:22 - happen is whenever I click over here I
459:25 - want to go to the user's profile right
459:27 - so to go to the user's profile
459:31 - I can go to the Tweet card
459:35 - and go to the circle Avatar this part
459:39 - right here I can
459:41 - wrap this with a gesture detector and
459:45 - have on tap
459:47 - Navigator
459:48 - dot push context and the route is where
459:53 - do you want to go user profile view
460:00 - dot route and then we want to pass in
460:03 - the user model the user model is user
460:05 - not the current user don't pass that in
460:07 - even by mistake it should be the user
460:10 - that we're getting from here
460:14 - okay good now if I click over here you
460:18 - can see constant loading this is the
460:20 - real time problem that I discussed in
460:22 - the Tweet section as well basically we
460:25 - are not getting any error we are not
460:26 - getting any data so it's thinking that
460:28 - we are in the loading state so it's
460:29 - continuously loading so you basically
460:32 - want to return user profile here
460:34 - and it should fix a problem now if I try
460:38 - to change the bio let's say how are you
460:42 - how are you
460:44 - two more times and save it you can see
460:46 - it is real time updated that's pretty
460:49 - cool now if I want to change the banner
460:51 - image to say waterfalls I'll click on
460:54 - Save and it shows up real time this is
460:58 - pretty cool right now the next feature
461:00 - is the follow button so whenever the
461:02 - user clicks on follow
461:05 - we want to be able to show the users
461:09 - followers to increase but I cannot do it
461:12 - from here
461:14 - because I'm on this account only
461:17 - so what I'm going to do is open up pixel
461:19 - the Android emulator and run it over
461:22 - there
461:23 - I'll see you when it starts working I'll
461:25 - also log in and do all of the
461:27 - authentication processes and then see
461:29 - you so for the follow I'm just going to
461:31 - close all the save files I'm going to go
461:33 - to the user profile controller and here
461:35 - I'm going to create a function called
461:37 - void follow user and here we're going to
461:41 - require some things the user model
461:43 - I'll explain all of this so why do we
461:45 - need all of this then we need build
461:48 - context
461:49 - and then we need the current user
461:53 - so what is the difference between the
461:56 - user and the current user well the user
462:00 - user is the person we are trying to
462:02 - follow
462:04 - the current user is us so we need both
462:07 - of them why because we want to check
462:10 - certain things
462:12 - so we want to check if the current user
462:15 - contains the user's ID so if so Suppose
462:19 - there are two users this is Revan user
462:21 - the iOS simulator user and this is Naman
462:23 - the Android emulator user now when the
462:25 - user Revan tries to follow Naman what
462:29 - should happen well first of all there
462:31 - should be a check so does everyone
462:33 - already follow Naman so if driven
462:36 - already follows Naman then there should
462:38 - be an unfollow button here not a follow
462:40 - button
462:41 - but if the user Revan does not have
462:46 - Naman in this following list then you
462:49 - can click on follow but when follow if
462:51 - clicked what should happen so if follow
462:53 - is clicked the following of Revan should
462:56 - increase and the followers of Naman
463:00 - should increase
463:02 - but if the user clicks on unfollow
463:05 - button
463:06 - that means that the
463:08 - user already follows
463:11 - Naman
463:12 - then the following of Revan should
463:14 - decrease and the followers of Naman
463:16 - should increase this is similar to the
463:18 - like concept basically if the user is
463:20 - already like the post should we add it
463:22 - and if
463:24 - the user has not liked it then we should
463:27 - add it
463:28 - like that only so here what we are
463:31 - trying to do is getting both the user
463:34 - and the current user and then we will
463:35 - check if the current user dot following
463:40 - so if we are the current user we want
463:44 - is my following containing the uid of
463:47 - the
463:48 - user we are trying to follow so if we
463:51 - are trying to follow
463:53 - that means you have already followed
463:55 - this means
463:59 - already following so if we are already
464:02 - following what do we want to do well
464:04 - there's an unfollow the button that's
464:06 - showing up so you want to remove the
464:07 - user from the followers list so we have
464:10 - user.followers so you want to remove
464:12 - ourselves from the user's followers list
464:15 - so we can just have user.followers dot
464:18 - remove
464:21 - current user Dot uid
464:24 - and one more thing should happen the
464:26 - current user's following should also
464:28 - remove
464:30 - the user's uid
464:32 - so it should decrease both the places
464:34 - the user's followers
464:36 - and the current users following
464:39 - else we are not already following the
464:41 - user then what do we want to do well the
464:44 - exact process opposite process that's
464:46 - followed here we want to add the
464:49 - follower and we want to add the uid over
464:52 - here okay
464:53 - now what we want to do is user equal to
464:57 - user.copy with followers will be
465:00 - user.followers
465:04 - we have made that changes over here
465:08 - and then we want to do current user is
465:10 - equal to current user.copy with
465:13 - followers will be current users dot
465:16 - followers actually we need to do
465:18 - following because we are updating the
465:21 - current users following right
465:23 - and then we can have following
465:26 - if you didn't understand this process
465:28 - don't worry I'm going to give a dry run
465:29 - after this
465:30 - when we try to follow a user and
465:33 - everything works fine
465:34 - now we are going to have final result is
465:37 - equal to await underscore user API Dot
465:40 - what do we want to do well we want to
465:43 - follow our user
465:45 - so we have to create those functions in
465:47 - the user API so let's go over there
465:51 - so let's go to the user API here we are
465:54 - going to add certain things the first
465:56 - thing is
465:58 - follow user and it's going to be future
466:00 - either void
466:02 - follow user
466:06 - and we just want to get the user model
466:12 - okay
466:14 - this user model is going to be the user
466:16 - model of the
466:18 - user
466:20 - because we are trying to update their
466:22 - follow count right that's what we are
466:25 - trying to do over here
466:26 - of course you're going to have that
466:28 - normal try catch all of those blocks
466:30 - also put an async over here
466:33 - put try catch block after copying it and
466:35 - here we are just going to have user.uid
466:38 - the data here will be a bit different
466:40 - the data will be followers
466:45 - and it will be user dot follows so we
466:48 - are just updating the document
466:51 - of user.uid which is the user we are
466:54 - trying to follow
466:56 - and we are just updating the
466:58 - user.followers because we have done that
467:00 - over here right
467:05 - now another function that we need is add
467:08 - to following function basically similar
467:11 - to follow user we are going to have add
467:13 - to following but this time we are going
467:15 - to pass the current user because we want
467:18 - to increase their following right
467:22 - so we can create one missing override
467:24 - we're going to copy this exact same
467:26 - thing
467:27 - paste it over here
467:28 - put async
467:31 - but this time when we update the
467:33 - document it should be following and user
467:36 - Dot
467:37 - following
467:40 - that's it this is pretty much it this is
467:44 - the two functions that we need after
467:46 - creating these two functions we can just
467:48 - call follow user we'll pass in the user
467:51 - Make sure to pass in user because we are
467:53 - incrementing the user we are changing
467:54 - the user's followers over here
467:57 - and now we do res dot fold in case of
468:00 - error show snack bar
468:02 - l dot message in case of success we'll
468:05 - have to do one more thing
468:07 - what is another thing that we want to do
468:10 - well
468:11 - the same thing the same function that we
468:14 - created obviously this is going to be
468:15 - async but add to following but this time
468:19 - it's not going to be User it's going to
468:21 - be current user because we have updated
468:24 - the following of the current user you
468:27 - can see that over here
468:30 - now we are just going to have rest 2 dot
468:34 - fold in case of error again show snack
468:37 - bar l dot message and in case of success
468:40 - as of now nothing
468:42 - we are not going to have state is equal
468:44 - to true and all of that is loading part
468:46 - because whenever we click on the follow
468:49 - user button all of that doesn't show up
468:51 - right
468:52 - now I can go to the user profile view
468:54 - actually
468:58 - the user profile
469:00 - and here we can just call the method
469:03 - in the else of on pressed basically if
469:06 - current user.uid is user ID then this is
469:09 - the edit profile right
469:12 - but if that's not the case else we're
469:15 - going to have ref dot read
469:18 - user profilecontroller provider.nodifier
469:22 - Dot
469:24 - follow user so we're getting just one
469:26 - epi exposed but inside of this one
469:28 - function there's a lot of stuff
469:30 - happening you can see that that's the
469:32 - main point of this architecture
469:34 - abstraction
469:39 - now after having and passing all of
469:41 - these three things inside of it
469:44 - so I'll just restart both the
469:45 - applications
469:47 - also I just got to know that here I've
469:51 - just added a follow
469:52 - thing so what I want to show here is is
469:55 - if current user Dot
469:58 - not current user sorry
470:00 - we can just have current user Dot
470:05 - following dot contains the user.uid
470:11 - so that means the same logic that we
470:13 - have applied to the user profile
470:15 - controller then we want follow unfollow
470:19 - button to show otherwise the follow
470:21 - button
470:23 - okay
470:25 - now we'll just restart everything
470:28 - I'll just go to the naman's profile so
470:31 - let's go Naman
470:33 - and here if I click on follow button I
470:36 - get unfollow immediately I get one
470:38 - followers now if I go to my profile
470:41 - now there's two following and one
470:43 - follower over here because
470:45 - I've changed this back to
470:49 - users dot following dot length and
470:51 - user.followers.link because if we go to
470:54 - the noman's profile so if we just go
470:56 - over there Naman
470:58 - you'll see there's zero following and
471:00 - one follower because I just followed
471:03 - so this works fine on naman's following
471:06 - count but it doesn't work fine on drives
471:08 - following count that's why I haven't
471:10 - I've changed it back to normal okay
471:13 - so the follow also works now are
471:17 - here there are zero followers because I
471:19 - unfollowed
471:20 - now you see I'll just go
471:24 - through the dry run so now we are
471:27 - checking if current user dot following
471:28 - so this is the current user it does my
471:31 - following contain naman's uid no it
471:34 - doesn't so we get the following button
471:36 - now if I click on follow what should
471:39 - happen
471:40 - according to my logic
471:43 - user.followers.addcurrentuser.uid that
471:45 - means this guy should get one follower
471:48 - and my following should increase so if I
471:51 - click over here one follower
471:53 - I'll go where I'll go to Revan one
471:56 - follower and two following my following
471:59 - increased now if I unfollow
472:02 - you can see according to the logic if it
472:04 - contains then we should remove the user
472:07 - follower so this should become 0 and my
472:10 - following should decrease by one so if I
472:12 - unfollow and go back to my user profile
472:17 - one following and one follower that
472:20 - means this works well so the following
472:22 - logic now works well now the next thing
472:25 - that we need to work on is the
472:27 - notifications feature basically this tab
472:30 - over here whenever the user likes a
472:32 - photo retweets a photo replies to a
472:35 - photo or follows you we want all of them
472:38 - to show up in the notification screen so
472:41 - let's get into the notification part
472:46 - we are very close to closing on our app
472:48 - of complete Twitter clone so let's get
472:52 - to the next section so for notifications
472:54 - I'm just going to close all the save
472:56 - files I am going to the API and here I'm
472:59 - going to add notification underscore API
473:02 - dot dot and now I'm just going to create
473:05 - the abstract class just like we had
473:07 - before I notification
473:12 - API then I'm going to have
473:16 - future either void
473:19 - create notification and this create
473:22 - notification is going to be based on
473:24 - notification model so we'll have to go
473:27 - down
473:29 - create a notification model so we have
473:31 - notification underscore model dot dot
473:35 - and then we have notification
473:38 - and let's think of the properties we
473:40 - need to have first is the text so what
473:43 - is a text
473:44 - final string post ID
473:47 - final string ID
473:51 - the post ID is like suppose if the user
473:54 - likes to post a retweets a post you need
473:56 - the post ID so that when you click on it
473:58 - you can go to that certain post then you
474:00 - need the ID of that ID of the
474:03 - notification
474:06 - then the ID of the user who has
474:09 - who's who we need to send to so
474:11 - basically if I follow another person
474:13 - another person should get the
474:15 - notification
474:17 - and then we need the type of the
474:19 - notification so what was the type of the
474:21 - notification was it retweet user
474:24 - or the following user part or the liking
474:27 - user what was it so for that we'll have
474:30 - to create an enum so we'll go to the
474:32 - enums folder and here we're going to
474:34 - create notification
474:36 - type
474:39 - enum dot dot now this is going to be
474:42 - simple very straightforward we'll copy
474:45 - it paste it here and add our own Fields
474:48 - first one is notification type
474:52 - I'll replace this over here and over
474:54 - here
474:56 - then what are the notification enums
474:59 - that we are going to have well whenever
475:00 - the user likes so we have like
475:03 - whenever the user replies so we have
475:06 - reply
475:07 - whenever the user decides to follow so
475:10 - we have follow
475:13 - and whenever the user decides to retweet
475:16 - so we have retweet
475:19 - and now we want the same thing over here
475:21 - so we can copy this retweet have
475:24 - notification type dot retweet
475:30 - if the user decides to follow
475:32 - notification type dot follow
475:35 - if the user decides to reply then you
475:38 - have case reply
475:40 - and this will return notification type
475:43 - dot reply
475:45 - and
475:46 - if it's none of them then it's going to
475:49 - be like so we can just have notification
475:52 - type dot like
475:55 - okay now we can come to the notification
475:58 - model and have notification
476:01 - type
476:02 - notification type
476:04 - and generate a data class based on this
476:08 - now obviously we'll remove dot convert
476:10 - we'll have to make some changes in the
476:13 - to map from map but first let's remove
476:16 - these two
476:18 - now in the from map what we need
476:22 - well here basically we have added a
476:24 - extension on string so let's rename the
476:28 - extension also here
476:29 - this should be two tweet
476:33 - type so it should be two notification
476:36 - type enum then I can copy it and paste
476:40 - it here so we'll treat this as string
476:43 - dot notification type in this is very
476:48 - similar to what we did in the
476:51 - tweet model so make sure you understand
476:54 - this by going through that section again
476:56 - if you want to
476:58 - now we can have notification type DOT
477:00 - type let's remove this
477:04 - the ID here should be removed
477:08 - because we don't want that ID and here
477:10 - it should be map slash dollar ID
477:13 - okay now having all of this done we need
477:17 - to create a notification based on this
477:19 - notification model
477:20 - now I can have my class notification API
477:24 - implementing I notification API
477:30 - now I can create one missing override
477:32 - also
477:35 - here we might require some things first
477:37 - is databases so we have underscore DB
477:42 - then we have notification API then we'll
477:45 - require it so we have data basis DB
477:48 - with underscore DB equal to DB
477:54 - and now to create a notification we are
477:57 - going to have async and we are going to
478:00 - go to the user API to copy everything
478:02 - you know the try and catch block
478:04 - everything let's just copy it
478:09 - and paste it in the notification API
478:12 - now what do we have to do here we have
478:14 - to create a document correct so we'll
478:16 - just go here and call create
478:19 - document
478:20 - now we'll import app right constants
478:22 - then we will have database ID
478:25 - now we need collection ID also but it
478:27 - can't be users collection it has to be
478:29 - notifications collection
478:32 - right because we stored all the users in
478:34 - users collection we stored all the
478:36 - tweets and tweets collection so all the
478:38 - notifications should go in the
478:40 - notifications collection so let's open
478:42 - our app right database
478:44 - let's create a new collection here call
478:47 - it notifications
478:52 - copy The Collection ID go to Upright
478:55 - constants add that here so we have one
478:58 - more
478:59 - which is
479:02 - notifications collection
479:05 - copy The Collection ID of notifications
479:07 - and paste it over here
479:10 - now we can have notifications collection
479:12 - as a collection ID
479:13 - now what should be the document ID over
479:16 - here
479:17 - so the document ID should be ID dot uni
479:20 - right
479:24 - because every notification should have
479:26 - its own ID and data here should be
479:29 - notification
479:32 - dot to Mac
479:34 - now we will return write null and if
479:38 - there's any exception we'll just throw
479:39 - it across
479:41 - sweet now
479:43 - this notification the create
479:46 - notification is going to be used in
479:48 - several other controllers for example in
479:51 - the Tweet controller when we like a
479:53 - tweet
479:54 - we'll have to create a notification
479:57 - saying that this user has liked your
479:59 - Tweet
480:00 - so this should happen so for now we will
480:03 - just make sure that whenever the user
480:05 - clicks on like button they get the
480:07 - notification over here and then we will
480:09 - work on the displaying part and making
480:11 - it real time
480:13 - and then we can work on the retweet
480:16 - replying and follow part
480:19 - okay
480:20 - so now I'll just close all the save
480:23 - files I'll just go to the Tweet
480:25 - controller where I have my like
480:29 - tweet here after the like tweet has been
480:33 - completed and it's a success in the
480:35 - right what do we have to do we have to
480:37 - create a notification so we'll have
480:39 - final notification API underscore
480:44 - notification API
480:46 - we are going to require this through the
480:48 - Constructor so we have notification
480:51 - API
480:53 - and then underscore notification API is
480:55 - equal to notification API what we are
480:58 - doing is basically just storing data on
481:00 - the
481:02 - app right database and getting it that's
481:04 - all
481:08 - so right here after we like a tweet
481:11 - what happens is whenever the user likes
481:14 - a tweet
481:15 - the counter and all of that increases
481:17 - but we also send a notification to app
481:20 - right that yeah the user has liked your
481:21 - Tweet right now so it should show up in
481:24 - this tab as well
481:27 - okay
481:28 - so here I'm just going to have
481:30 - notification API
481:34 - dot create notification and
481:38 - here I'll have to pass in my
481:40 - notification API related notification
481:43 - model but instead of doing all of this
481:46 - can be simplified even further
481:48 - what we can do is just create a new
481:52 - feature here called notifications
481:57 - then we are going to have a controller
482:01 - and it's going to be called notification
482:03 - controller
482:05 - so this controller will basically modify
482:07 - everything
482:08 - it will create a notification model so
482:10 - that we don't have to create it again
482:11 - and again and will handle the error
482:13 - processes that we have to face
482:15 - so here we are just going to create a
482:17 - state Notifier
482:19 - called notification controller we'll
482:22 - remove the Notifier from here then we
482:25 - have state node file
482:27 - Boolean
482:30 - false
482:36 - and then a state Notifier provider and
482:39 - then we are going to have notification
482:42 - controller provider
482:46 - then we are going to have notification
482:48 - controller Boolean
482:52 - and then we should have final
482:55 - notification controller is equal to ref
482:59 - dot watch
483:01 - okay not this sorry
483:04 - we'll have to return notification
483:05 - controller only my bad
483:08 - so here we are going to have final
483:09 - notification API underscore notification
483:13 - API
483:15 - we are going to require this through the
483:17 - Constructor notification API
483:20 - notification API underscore notification
483:22 - API is equal to notification API okay
483:25 - that's pretty cool now we'll pass a
483:28 - notification API as ref.watch
483:30 - notification API provider but we haven't
483:33 - created a provider for that API so let's
483:36 - just go right at the top and create a
483:38 - provider for it so we'll have
483:40 - notification API provider I'm running
483:43 - through this because we have already
483:45 - covered it many many times
483:49 - and we'll pass in notification API and
483:51 - for the DB it's ref.watch
483:55 - app right database provider
483:58 - easy enough now let's go to the
484:00 - controller and we have notification API
484:03 - provider
484:04 - now we are going to create a very simple
484:06 - function of void create
484:09 - notification where we are going to
484:11 - require
484:13 - the text we are going to require the
484:16 - post ID
484:18 - so what post was liked or what post was
484:22 - you know commented on
484:24 - then the notification type
484:26 - and then the uid so we have required
484:29 - string uid
484:31 - so what is the user Rider okay now we
484:34 - will just create a notification based on
484:36 - the notification model so we have
484:38 - notification
484:44 - we pass in the text post ID the ID is an
484:47 - empty string no uid notification type
484:50 - and that's it
484:51 - we're not passing anything in the ID
484:54 - because we don't have to save an ID
484:57 - upright will automatically generate it
485:01 - now we just need to call it so we have
485:05 - await underscore notification let's put
485:09 - async over
485:11 - await notification API dot create
485:14 - notification pass in the notification
485:16 - model and we are done
485:18 - now we'll go to the Tweet controller and
485:21 - here instead of having notification API
485:24 - we will have notification
485:28 - controller notification controller
485:31 - so here it will be notification
485:33 - controller
485:35 - just change it in all the places
485:41 - and after the change has been made aware
485:44 - let's just go down take this create a
485:47 - notification so we pass in Dot create
485:50 - notification pass in the text which is
485:53 - tweet dot text the post ID
485:58 - should be tweet.id
486:01 - the notification type should be
486:05 - notification type dot like
486:08 - and uid should be tweet.uid basically we
486:12 - the uid is going to be the user to whom
486:14 - we are sending the notification so if
486:17 - it's tweet.id then it's going to be the
486:20 - ID of the Tweet if it's tweet.uid to the
486:23 - uid of the person to whom the Tweet is
486:25 - being sent and if we use user.uid then
486:28 - it will be sent to us only and that
486:31 - makes no sense
486:34 - okay
486:35 - so after this notification has been made
486:38 - I think
486:40 - we should only display it so before
486:43 - going there we just need to pass a
486:45 - notification controller to get
486:46 - notification controller we need to
486:48 - create a state notify provider which
486:50 - we've already created
486:51 - so just copy it
486:53 - come over here and have ref.watch
486:56 - notification controller provider dot
486:59 - note F5
487:01 - now I think we can restart the app
487:06 - on both the devices also
487:09 - let's add some attributes here so we'll
487:12 - go to our notification model
487:15 - see what all fields are there text is
487:18 - there so we'll add text which is going
487:20 - to be a string and the size is going to
487:22 - be 255 required
487:25 - now the next attribute is going to be
487:27 - post ID
487:29 - which is also going to be a string
487:31 - required 255 then we need uid the uid of
487:35 - the user to whom this should be sent
487:37 - create
487:39 - the notification type
487:43 - string and create
487:46 - so now we have created the notification
487:48 - model now let's try to like some post
487:51 - after liking one post let's
487:55 - restart
487:57 - we're not seeing anything
487:58 - so let's try to print it out here why we
488:01 - are not seeing that so we'll go to like
488:02 - tweet
488:04 - and here we'll just try to print l dot
488:08 - message
488:09 - now if we try to like some post no error
488:12 - shows up but if we refresh nothing shows
488:15 - up over here as well
488:16 - so there's no error over here but we
488:18 - forgot to handle the error in this case
488:21 - so let's have a
488:23 - handle over here so basically whenever
488:26 - we have some this done so we have final
488:29 - result is equal to await this done and
488:32 - then we fold it and in case of failure
488:35 - we just want to do l dot message
488:38 - okay
488:41 - now let's try to like something
488:44 - here you can see the current user is not
488:46 - authorized obviously so we need to go to
488:49 - the settings
488:50 - we need to get to the role all the users
488:53 - can create or read the notifications but
488:56 - they cannot update and delete
488:58 - okay
488:59 - now let me try to like another post
489:03 - I'll refresh it and here we can see the
489:06 - document
489:07 - the text is showing up as hello but this
489:09 - is not the text we want the notification
489:12 - type uid and post ID seem correct
489:15 - so now let's give another message here
489:19 - the Tweet text should not be tweet.text
489:22 - it should actually be that
489:25 - the user dot name liked your Tweet so
489:28 - basically dollar user dot name like
489:33 - your
489:35 - Twee
489:37 - this should be the text now if I like
489:40 - some other post
489:42 - you see it should get added over here
489:44 - Revan liked your Tweet
489:47 - now if I try to cover and like some post
489:51 - you can see the liking feature is not
489:53 - really working
489:55 - it's not working because of some logic
489:58 - error that we have made
490:00 - so let's take a gap from notifications
490:02 - part and see why we are getting this
490:04 - error as of now
490:06 - and after a bit of debugging I found out
490:08 - that this problem occurred because here
490:11 - we have passed in the user it should not
490:13 - be user but the current user
490:16 - now we made this error I should have
490:19 - rectified it earlier and that's my fault
490:20 - I'm sorry but
490:22 - why do we have to pass in the current
490:24 - user because if you go to the like tweet
490:26 - if tweet dot likes dot contains user ID
490:29 - so it should contain the current user's
490:31 - ID right
490:33 - so if it contains the user ID then we
490:35 - don't have to like it and all of that
490:37 - stuff so you need to pass in the current
490:39 - user not the user okay
490:42 - now if you try to like any post you can
490:45 - see we get to like it
490:47 - and it works properly
490:49 - so this was the problem now after fixing
490:52 - this problem now the next thing we need
490:55 - to do is go to the Tweet controller we
490:58 - are also getting the notifications
490:59 - correctly now we just want to display
491:02 - them so to display them in the
491:04 - notifications
491:06 - folder
491:09 - we are going to have views and it's just
491:12 - going to be notification views so we
491:15 - have notification underscore view dot
491:18 - dot now we can import material dot we
491:20 - can create a stateless
491:22 - and it can be stateless consumer so we
491:24 - have notification View
491:29 - then we can have consumer widget
491:31 - and here we are going to return a
491:33 - scaffold with an app bar saying this is
491:36 - the notifications and
491:38 - section so we have title constant
491:44 - text notifications
491:48 - save it and
491:52 - to see it we can go over here
491:54 - we cannot see it so we'll copy this go
491:56 - to the UI constants
491:58 - paste it over here
492:02 - and we should be able to see
492:04 - notification stuff pretty cool
492:07 - now what we want to do is get all the
492:09 - notifications now this is similar to the
492:12 - Tweet functionality so in the tweet
492:16 - API will go we are going to go here and
492:19 - have get tweets so we're just going to
492:22 - copy this exact thing and paste it in
492:25 - the notification API
492:27 - so we can paste it over here but here
492:30 - the name is going to be a bit different
492:32 - so let's copy it
492:36 - paste it over here but it's not going to
492:38 - be called get tweets first of all let's
492:40 - also get document from upright models
492:45 - it's not going to be called get notif
492:47 - get tweets it's going to be called get
492:49 - notifications
492:52 - and we'll be needing the uid of the user
492:55 - so what users notifications do we have
492:58 - to get
493:00 - and exactly this is going to be the
493:02 - function name
493:04 - and this is going to be string uid final
493:07 - documents list documents database ID
493:09 - tweets collection is not going to be
493:11 - there notifications collector but what
493:15 - is the filter that we need to apply we
493:16 - don't need to get all the documents that
493:18 - are available in the notifications
493:20 - collection right we only want to get the
493:23 - notifications which match the uid so
493:26 - it's going to be query dot equal uid uid
493:31 - so you want to get
493:34 - all the notifications from a particular
493:36 - user ID
493:39 - and then we return it
493:42 - and since I'm feeling confident about
493:44 - this what I'm going to do is also copy
493:46 - get latest tweet
493:49 - so that we can make it real time and
493:51 - work it without you know jumping through
493:53 - each and everything and here it's going
493:56 - to be called get latest notification
493:59 - if you don't feel comfortable with it I
494:01 - would recommend you to try it on your
494:03 - own
494:03 - you know first implement the future
494:05 - provider with this get notifications and
494:09 - then add stream provider but for me it's
494:11 - a lot of copy paste code so I can just
494:14 - have real time passed in directly
494:18 - so we have required
494:19 - real time real time
494:23 - and this should be underscore
494:27 - real time is equal to real time
494:34 - also this needs to be get latest
494:36 - notification so I can just go right at
494:39 - the top and have stream
494:42 - real time message
494:45 - and get latest notification
494:49 - and your
494:51 - The Collection should be notifications
494:53 - collection dot documents okay
494:58 - now at the top we are having real time
495:00 - which will be ref.watch real upright
495:02 - real-time provider
495:05 - and we are done now we just need to go
495:08 - to the notifications controller
495:10 - right here
495:12 - and we'll be having stream provider over
495:15 - here
495:16 - and in the Stream provider what are we
495:18 - going to have well get latest
495:22 - notification provider we want to get the
495:24 - latest notification
495:26 - so we'll remove the async star
495:28 - then we have final notification
495:31 - controller or notification API in this
495:35 - case
495:36 - which is equal to ref dot watch
495:38 - notification API provider
495:41 - and then we are going to return
495:42 - notification API dot get latest
495:45 - notification
495:48 - after having this we are going to have
495:50 - future provider
495:52 - and this is going to be
495:54 - get notifications provider
495:58 - then we are going to have future
496:00 - provider
496:01 - dot family and then we are going to have
496:04 - the uid of the user that we'll be asking
496:07 - from the parameter now here let's remove
496:11 - the print call
496:12 - we are going to create a model
496:14 - conversion thing so as we have done it
496:17 - before multiple times we're going to
496:19 - have future notification model
496:23 - or just notification
496:26 - get notifications
496:29 - we'll take in a string uid async
496:33 - I know I'm rushing through this but if
496:35 - you don't understand let me know in the
496:37 - comment section and I'll help you out
496:38 - with it we're just going to have await
496:40 - notification API dot get notifications
496:43 - we'll pass in the particular uid and
496:46 - then map through all the notifications
496:49 - get one particular notification
496:52 - and then just have notification Dot from
496:55 - map e dot data and convert it to a list
497:01 - let's also import the notification model
497:07 - so let's import it we don't have to
497:09 - import it from dot HTML or anything
497:13 - it's from the notification model
497:16 - and now you can see we are getting this
497:17 - error because it's defined this
497:19 - notification is defined in two places so
497:22 - what we can do is prefix this or just
497:24 - rename notification model I'm just going
497:27 - to prefix this as model and have
497:31 - model dot notification model dot
497:35 - notification
497:37 - model.notification Dot from map
497:40 - and this will be future list of model
497:42 - dot notification
497:45 - okay
497:46 - now finally I'm just going to create
497:48 - final
497:51 - notification controller which is equal
497:55 - to
497:56 - ref.watch notification controller
497:59 - provider and then going to return
498:01 - notification controller Dot
498:04 - and I don't have access to anything so I
498:07 - can just use dot Notifier to get access
498:10 - to my method of get notification
498:13 - easy enough now I'll go to my
498:16 - notification view in the body I'm going
498:19 - to
498:21 - have ref.watch and all of that stuff but
498:24 - before I get into that part what I want
498:27 - to do
498:28 - is just get the current user so that I
498:31 - can get the uid so we have final current
498:33 - user equal to ref dot watch
498:37 - current user details provider dot value
498:42 - this cannot be null here we need to
498:44 - check if current user is equal to null
498:47 - then we want to show a loader otherwise
498:51 - no loader is required and we want to
498:54 - show the latest notifications now this
498:57 - is going to be very similar to what we
499:00 - have done earlier
499:01 - what earlier well just the user profile
499:05 - view
499:06 - so we can go over there
499:10 - not user profile view sorry to wait to
499:13 - eat
499:14 - View
499:15 - the Twitter reply View
499:17 - I can just copy all of this code from
499:20 - here
499:22 - including all the error loading all of
499:25 - those stuff
499:27 - and paste it over here now we have to
499:30 - resolve all of these errors so let's
499:32 - resolve first let's import the common
499:34 - dot dot so that we have error text and
499:36 - loader
499:39 - now in the loading we don't have to show
499:41 - anything like a tweet card in fact we
499:44 - need to show notification tile so for
499:46 - now let's just put a text of let's say
499:50 - tweet and this is not even a tweet this
499:53 - is notification
499:55 - and
499:58 - you're going to get notifications index
500:00 - so to resolve this let's go directly at
500:03 - the top and here it's not going to be
500:05 - get replaced on tweet it's going to be
500:07 - get notifications provider and then
500:11 - we'll pass in the user's ID so we have
500:13 - user
500:15 - the current user
500:17 - Dot uid
500:19 - then we keep track of get latest
500:21 - notification provider
500:24 - we get some data then
500:28 - we just check over here so we don't have
500:30 - to put the if condition so we'll go down
500:33 - remove the shift condition
500:37 - and here we are going to check for
500:39 - upright constants so we'll add that but
500:42 - not tweets collection the notifications
500:44 - collection
500:45 - and we are looking for a create Command
500:48 - right we are not looking for any update
500:50 - command because it's never going to
500:52 - update so let's remove all of those
500:54 - update logic
500:56 - and it's not going to be notification or
500:59 - tweets it's going to be notifications so
501:01 - I can insert that
501:04 - this can be notification
501:10 - Dot from map obviously we'll again have
501:13 - to
501:15 - import notification as model just like
501:18 - we did in our
501:23 - notification controller so if we go
501:26 - there just like this we'll have to copy
501:28 - it
501:29 - and paste it
501:31 - so we can go in the notification view
501:33 - paste it
501:35 - and now we'll have
501:37 - model dot notification not from map
501:43 - okay now this should be notifications
501:46 - dot length
501:47 - notifications at index and this is one
501:50 - notification
501:52 - and now we'll just return a text which
501:56 - just says notification
501:58 - dot to string
502:02 - even here it's going to be notifications
502:04 - dot link we'll get one particular
502:06 - notification and two string
502:09 - simple and good
502:13 - I'll remove the loading page from here
502:15 - I'll come back over here and you see
502:17 - apprite exception index not found we
502:20 - basically want to create a new index
502:22 - here saying uid
502:25 - equal
502:29 - so it's going to be a key and your ID
502:32 - should be in descending order created
502:36 - rerun the application
502:38 - go to the notification section and we
502:41 - get this error so we are getting this
502:44 - error here basically because we are not
502:47 - removed expanded there's no need of
502:48 - expanded because we are going to get the
502:51 - entire body there's no column or
502:53 - anything even in the loading part we'll
502:55 - just remove it and we'll restart the app
502:59 - go via and you can see the notifications
503:02 - showing up but do we want to show all
503:05 - the notifications that are present over
503:07 - here not really
503:09 - we only want to show the notification
503:11 - which matches the current user's uid so
503:14 - here what we want to do is get the
503:18 - latest notification right so you have
503:20 - latest notification in a model format so
503:24 - we'll cut and paste it over here and
503:27 - here I'll check if latest notification
503:30 - dot uid is equally equal to current
503:33 - user.uid
503:35 - then what do I want to do only then do I
503:38 - want to insert it
503:40 - right at the top so we have latest
503:42 - notification
503:44 - if it does not match then I don't want
503:47 - to add it why would I add other person's
503:49 - notification
503:50 - to my notifications tab you can see over
503:53 - here we are listening to all the
503:55 - documents being created right
503:58 - this was the second approach I was
504:00 - talking about
504:01 - you remember when we were doing tweets
504:03 - part a user profile part there were two
504:06 - here we could add the document ID or we
504:10 - could just do this if condition over
504:12 - here
504:13 - anyways now that it's done
504:17 - we can restart the app
504:19 - underwear let's see this a guy has some
504:22 - things and for our pixel let's rebuild
504:26 - and over here if we see there are some
504:28 - notifications here as well
504:31 - now we just need to display them in a
504:34 - good format
504:35 - so to display them we are going to
504:37 - create a new widget here
504:41 - call notification tile
504:45 - import material dot create a stateless
504:48 - widget called notification tile
504:52 - and then we are going to have final
504:53 - notification
504:56 - notification
504:57 - and require it through the Constructor
504:59 - but not the notification from
505:02 - material.dot no not that one we want it
505:05 - from this one
505:09 - right you can just name your
505:12 - notification and notification model
505:15 - so that you have to avoid this prefix
505:17 - every single time
505:19 - so now we'll have required this dot
505:22 - notification
505:24 - now here we are going to return a list
505:26 - Style and if you've seen Twitter you'll
505:29 - know that in the leading icon it really
505:32 - depends on the notification type so if
505:34 - notification type is follow it will give
505:36 - you some other icon if it's like it will
505:38 - give you a like icon like that so here
505:42 - in the leading part we are going to
505:43 - check that so if notification dot
505:45 - notification type is equal to
505:47 - notification
505:49 - type which is the enum
505:52 - is equal to follow if it's followed then
505:55 - I want constant I can as icons dot
505:59 - person
506:03 - and I want color to be palette dot blue
506:06 - color
506:10 - otherwise we are going to have
506:15 - another logic
506:16 - basically if notification dot
506:18 - notification type is equal to
506:20 - notification type dot like
506:23 - save the user has liked it what do you
506:26 - want to show well
506:29 - in that case I want to show SVG
506:32 - picture.asset via 3G picture.asset
506:35 - because I have an SVG file for it
506:39 - why not use it
506:42 - so it will be like filled icon
506:45 - the color will be palette dot red color
506:47 - and height will be
506:50 - 20.
506:54 - you know just so that it remains at the
506:56 - same size as that of a follow button or
506:59 - the person icon that's being shown when
507:02 - the user tries to follow someone
507:05 - otherwise
507:08 - the notification dot notification type
507:10 - is equal to notification type dot
507:13 - retweet and if it's retweet then what do
507:17 - you want to show
507:19 - well it's going to be an SVG picture dot
507:22 - asset again
507:23 - so we'll have that but it's not going to
507:25 - be like field icon it's going to be the
507:27 - normal retweet icon with white color in
507:30 - it
507:31 - and if it's none of these we just don't
507:33 - want to return anything
507:36 - so this is the big logic that we had
507:38 - let's go through it again if
507:40 - notification type is follow so if the
507:42 - user has followed we want a person icon
507:45 - like this to show up
507:47 - if it's like then we want a like filled
507:50 - icon
507:51 - and if the user has decided to retweet
507:54 - then we want a retweet icon
507:56 - and if it's none of them we don't want
507:58 - any icon to show up next is the title
508:01 - and the title is going to be the text
508:03 - which is notification dot text simple
508:07 - enough now I can take this notification
508:09 - tile and use it in the notification View
508:12 - and return it so we return notification
508:18 - tile
508:20 - and return notification
508:24 - now we'll copy this notification tile
508:27 - and paste it over here
508:29 - now we'll restart both of them
508:34 - and see what we get
508:35 - so here if I just see everything is
508:39 - related to like what I'm going to do now
508:42 - is you know just restart everything
508:45 - because I want to delete everything
508:50 - I'll delete everything
508:51 - and then I'll get back to you because I
508:54 - want to test it out fresh
508:56 - so I'm finally done deleting everything
508:59 - I'll just restart my applications
509:02 - and here when I try to like a post
509:05 - that's given by let's say
509:10 - Revan
509:12 - let's find a post given by Revan let's
509:15 - say hi hey guys one
509:17 - and click over here and you see no one
509:20 - liked your tweet this is good
509:24 - now if I try to like a post given by
509:26 - Naman so I'll just give hey
509:29 - and then click on tweet
509:31 - you can see hey showing up I'll just go
509:34 - at the top here it is
509:36 - I'll stay here to show you that it's
509:38 - real time I'll click on heart icon and
509:41 - you can see Revan liked your Tweet
509:45 - this is awesome that means the entire
509:47 - notification process is now working now
509:50 - let's just get it done working for
509:52 - literally all the features retweet
509:55 - comment icon
509:57 - when the user replies to someone so all
510:00 - we need to do is basically
510:02 - close all the save files go to tweet
510:05 - controller
510:07 - copy this and paste it everywhere so
510:10 - when you re-share a tweet and it's a
510:12 - success
510:15 - before you say retweeted what you need
510:18 - to push
510:19 - is this thing notification dot create
510:22 - notification
510:24 - is going to be current
510:26 - user dot name liked your Tweet so that
510:29 - means we have liked your Tweet
510:31 - and the uid should be tweet.uid tweet.id
510:36 - tweet.retweeted by is the user who
510:38 - retweeted tweet.uid is the user whom
510:42 - will send the notification to okay
510:48 - now let's try it for something so if I
510:51 - try to retweet naman's retweeted you
510:54 - know I'll just come over here and see
510:57 - and this should not be light your Tweet
511:00 - sorry this should be reshared your Tweet
511:01 - that's why we couldn't see the like part
511:04 - it should be retweeted now if I retweet
511:08 - naman's retweet you can see re-shared
511:10 - your tweet this shows up pretty cool
511:15 - now the next part is whenever the user
511:18 - decides to comment on other user so I
511:22 - can copy the same thing
511:24 - I'll go down where there's
511:29 - reply so I'll just go reply
511:34 - and there's no reply over here it's in
511:36 - the Twitter reply View
511:38 - and here down below we have the on
511:40 - submitted property we have passed in the
511:43 - reply to so here we also need to pass in
511:46 - another thing replied to user ID
511:52 - so basically we don't in the share tweet
511:55 - we don't have access to a field called
511:58 - reply to user ID so whom are we trying
512:01 - to reply to what is the
512:04 - user ID of the user to whom we are
512:08 - replying to
512:09 - right so we need that so we have replied
512:12 - to user ID and this should be tweet.uid
512:18 - okay so if we come back over here
512:21 - reply to user ID is exactly what we need
512:24 - to send out notification
512:26 - because it's at the end of the day
512:28 - tweet.uid and everywhere we have used
512:30 - tweet.uid to send to the notification to
512:33 - a person because we have replied to
512:36 - their tweet right we're going to get it
512:38 - through tweet.uid and we have accepted
512:41 - that over here
512:42 - so now what we need to do is just take
512:44 - reply to user ID share it literally
512:47 - everywhere share text to it
512:50 - and share image tweet both of them
512:53 - accept them in both of these functions
512:55 - so we'll just have required
512:58 - replied to user ID string
513:01 - and
513:04 - required string reply to user ID
513:09 - and here after the success we're just
513:12 - going to check
513:15 - also put a bracket here
513:18 - if replied to user ID dot is not empty
513:22 - so if it is not empty that means I
513:24 - replied to user's ID is not empty that
513:28 - means there is some ID and if there is
513:30 - some ID
513:31 - we want to send a notification so let's
513:33 - just copy this go down below and paste
513:37 - it over here and here we just want to
513:39 - say
513:41 - reply to your Tweet
513:45 - so the user.name the current user
513:47 - replied to your Tweet and this is reply
513:49 - the post ID will not be tweet.id don't
513:54 - make this mistake basically
513:57 - tweet.id is this tweet's ID
514:01 - right and here the ID is empty string so
514:05 - if you try to put post ID it will give
514:07 - you an empty string over here and your
514:09 - notification won't get sent what you
514:11 - need instead is this this
514:14 - RS ID because this R is basically the
514:19 - tweet that you get after uploading it to
514:22 - Upright when you upload it to app right
514:24 - you get a particular ID because we have
514:27 - used id.unique while sharing the Tweet
514:30 - so here we get R and we're going to use
514:33 - this R to get the ID and we get that
514:35 - using r dot dollar ID
514:38 - so the post ID should be r dot dollar ID
514:42 - and the uid should not be tweet.uid
514:45 - because tweet.uid is user.uid we do not
514:49 - want that the uid should be replied to
514:52 - user ID okay
514:55 - the same thing is going to be there in
514:58 - the share image tweet as well right here
515:01 - we're just going to have
515:03 - R and we're just going to have this
515:08 - simple and easy
515:11 - the state is equal to false will also
515:14 - come over here
515:16 - after all of this
515:19 - even for the share text tweet
515:24 - let's go over there the state is equal
515:27 - to false will be done only after the
515:30 - notification is sent
515:32 - now in the create wheat view let's see
515:34 - what's the error we need to provide the
515:36 - reply to user ID
515:38 - it's going to be empty over here and
515:41 - since it's empty we are not replying to
515:43 - anyone if you are not replying to anyone
515:45 - the notification does not get sent to
515:47 - anyone that makes sense
515:52 - now let's rerun it let's reply to
515:54 - someone so let's say I want to reply to
515:59 - Naman so I just say hey what's
516:04 - up
516:05 - and then click on done now if you come
516:08 - to the notification section you see
516:10 - Revan replied to your Tweet
516:13 - and for the reply we did not have any
516:16 - icon so I did not have any icon
516:18 - for 10 over here even according to our
516:21 - logic so if you have an icon do share it
516:23 - in the comment section or you can just
516:25 - have it in the leading icon widget okay
516:29 - now the last part is The Following part
516:32 - so whenever we try to follow a user
516:35 - it should show up in the notification
516:36 - section there as well so I'm just going
516:39 - to copy this go to the user
516:42 - profile controller
516:44 - and if it's a success at the end this
516:48 - always gets sent in the end basically
516:50 - after all the logic process has done we
516:53 - want notification to be sent
516:56 - and here we are going to require
516:58 - notification controller so we have
517:00 - notification
517:02 - controller underscore notification
517:05 - controller required notification
517:07 - controller notification controller
517:10 - underscore notification controller is
517:12 - equal to notification controller
517:14 - that has a lot of stuff
517:18 - but at the top we can resolve the error
517:20 - by passing a notification controller as
517:22 - ref.watch notification controller
517:25 - provider dot Notifier
517:28 - and over here what are things that we
517:31 - need well we are going to create a
517:33 - notification saying user.name
517:36 - followed you
517:40 - but is it going to be user.name no it's
517:43 - going to be current user.name right
517:45 - because it's us who has followed the
517:48 - other person what is the post ID going
517:51 - to be well we can find that
517:54 - but there's no finding it out because a
517:57 - follow cannot have a post ID because we
517:59 - are not
518:00 - doing anything related to tweet right so
518:04 - it's going to be empty
518:07 - what is the notification type going to
518:09 - be well it's just going to be follow
518:12 - and the uid is going to be user.uid not
518:16 - the current user.uid the user.uid so we
518:19 - have added this now let's try to follow
518:21 - one user so let's say I try to follow
518:25 - from here Revan
518:27 - so I can just see
518:29 - I'll click on follow
518:32 - it doesn't really get sent
518:34 - you can see Naman followed you shows up
518:39 - so that means the entire notification
518:42 - section now works you can retweet you
518:44 - can do anything and it will work
518:47 - now the left next section is basically
518:50 - listing out everything that
518:53 - one hashtag has basically if I have one
518:56 - tweet that has hashtag rivon this is
518:59 - nice and then I tweet it and then I have
519:03 - another tweet that has hashtag rivan
519:06 - not at the rate
519:08 - #rivan hashtag nice hashtag
519:12 - wow and you then click on tweet
519:17 - and even this person has hashtag rivan
519:20 - in some of their comments so they have a
519:22 - hashtag
519:23 - haha hashtag
519:28 - oof and then click on tweet you see
519:32 - there are three Hashtags with ravan and
519:34 - when one of this hashtag is clicked
519:38 - you know this hashtag should open up in
519:41 - a different screen the hashtag screen
519:42 - and it should show you all the posts
519:45 - from that particular hashtag
519:47 - okay so this is what we are trying to
519:49 - achieve so this is what we'll do we want
519:52 - to get all the posts from one particular
519:54 - hashtag and if you see our database
519:57 - structure it's well suited for that we
519:59 - had made this for this purpose only
520:02 - if you go to the tweets not
520:04 - notifications
520:07 - and see aware
520:09 - the hashtags have rivan haha and open it
520:13 - right
520:15 - so we just want to check if the array
520:18 - contains hashtag Raymond or not if it
520:20 - contains hashtag rivon
520:22 - or whatever you click on hashtag nice
520:24 - hashtag wow
520:26 - any of this is clicked
520:31 - you just want to check in the ira that
520:33 - it's there if it's there then
520:35 - we just display everything
520:38 - so this is what we are trying to achieve
520:40 - and this should be very simple this is
520:42 - can actually be a challenge for you you
520:44 - can try to do it on your own if you are
520:46 - able to do so then you've properly
520:49 - understood app right till now
520:51 - so try it on your own it should give you
520:53 - confidence but if you can't then we can
520:56 - do it together right now so let's start
520:58 - we'll go to the vs code so what we are
521:01 - going to do is close all the save files
521:03 - and we are directly going to go in the
521:05 - Tweet API and create a recent tweet so
521:08 - what is the last function of this tweet
521:10 - API it's going to be future list of
521:14 - document this exact same thing because
521:17 - we are going to get all the user tweets
521:19 - not the user tweets but get the tweets
521:23 - by hashtag and here we are going to get
521:28 - a hashtag
521:30 - right so the implementation
521:32 - is very similar to get user Tweets we're
521:35 - just going to copy this
521:38 - paste it away
521:40 - it's going to be asynchronous
521:42 - we are going to list all the documents
521:43 - in the tweets collection where
521:47 - the hashtags should be equal to not
521:51 - really because hashtags is a list we
521:53 - cannot equate it here we want to search
521:56 - so in the hashtags array we want to
521:59 - search that the hashtag is present and
522:03 - if the hashtag is found then we want to
522:05 - return all of those documents right
522:09 - so we will use query.search hashtags and
522:12 - then find a particular hashtag
522:14 - and then we'll return the document now
522:17 - all we need to do is go to the Tweet
522:19 - controller create
522:22 - a function very similar to get user
522:24 - tweets or get replies to tweets
522:26 - something like that we're going to get
522:29 - the documents but here the name will be
522:31 - get
522:31 - tweets by hashtag
522:36 - we'll mention the hashtag from the UI so
522:39 - the future provider is also going to be
522:41 - family and here we're going to have
522:43 - tweet API dot get
522:46 - tweets by hashtag we'll pass in the
522:49 - particular hashtag and all of those
522:51 - conversions will take place now we just
522:53 - need to go to the Future provider
522:56 - we'll have to create one and this will
522:58 - be very similar to rest of the things
523:00 - that we have get
523:04 - tweets by hashtag provider
523:08 - future provider and this time we are
523:10 - going to get a string of
523:12 - hashtag
523:15 - and then we are just going to pass that
523:17 - to the get tweet by hashtag function
523:20 - simple enough now we can just go to the
523:24 - view create one view which is hashtag
523:27 - view dot dot
523:29 - and here we need to import material dot
523:32 - we want to create a stateless consumer
523:33 - widget called hashtag View
523:36 - you're going to import flutter riverpod
523:38 - Library
523:39 - we are going to return a scaffold
523:42 - here we are also going to accept a
523:44 - string hashtag so basically this hashtag
523:46 - is whatever the user clicked on so if
523:48 - the user clicks on this hashtag we will
523:50 - navigate to a new screen where hashtag
523:53 - will be written in the title and all the
523:56 - posts from this particular hashtag will
523:57 - be seen so let's require it through the
523:59 - Constructor so we have required this Dot
524:02 - hashtag
524:05 - let's put this inside of
524:08 - the name Constructor
524:12 - now in the app bar we are going to have
524:13 - Abba and the title is going to be text
524:17 - hashtag
524:20 - okay
524:22 - and now we are also going to go to the
524:24 - home view copy this route
524:27 - put it in hashtag View and return
524:29 - hashtag view from here just like we've
524:31 - done multiple times before
524:34 - but this time we're going to take it
524:36 - from the parameter so we have a hashtag
524:39 - and we pass that in to the particular
524:42 - hashtag
524:45 - now what do we want to do well whenever
524:47 - the user clicks on this hashtag which is
524:50 - identified so how do we identify and
524:52 - where do we identify the hashtag we do
524:55 - that
524:55 - in the widget your hashtag text so what
524:59 - we can do is
525:01 - whenever we identify a hashtag over here
525:04 - we can just have something known as
525:09 - recognize the year and we can pass in
525:12 - tab gesture recognizer this is a Syntax
525:15 - for it we create an object of capture
525:17 - it's just a recognizer and we give it a
525:19 - property of ontap and the on tap
525:22 - property is equal to
525:24 - an anonymous function
525:27 - and here we can write whatever we want
525:30 - so we basically want to have Navigator
525:32 - dot push
525:34 - and we want to push to the hashtag view
525:37 - so we have hashtag
525:40 - View
525:41 - Dot
525:43 - route and we pass in the particular
525:45 - hashtag what is a particular hashtag
525:47 - element
525:49 - this is what we had right element dot
525:52 - starts with hashtag we just push it to
525:54 - hashtag view.rout after we've completed
525:57 - this we can go to the
526:01 - View
526:03 - restart our application on iPhone and
526:06 - Android
526:07 - click on driven let's say and we get
526:10 - hashtag Revan now the thing that's left
526:12 - is just to display everything now to
526:15 - display everything VR
526:17 - scholars in it now we can just go to the
526:20 - body
526:21 - and
526:22 - you know again instead of typing so much
526:24 - we can just go to the Tweet list
526:28 - copy everything from there
526:32 - and see what all stuff we need so I'm
526:34 - just going to copy it
526:36 - paste it here
526:39 - import the loader save common
526:42 - import tweet card survive tweet card
526:45 - and I don't think we need any of this
526:48 - I'm not making it real time of course if
526:50 - you want to make it to real time go
526:51 - ahead but I'm not making it so again
526:54 - I'll have to remove all of this
526:58 - all of this part
527:00 - I also have to remove this returning
527:03 - part
527:04 - all I need is get hashtag tweets by
527:07 - hashtag provider and pass in the
527:09 - particular hashtag and when there's data
527:11 - we'll get tweets and we can display that
527:15 - and now we can remove this bracket this
527:17 - is an extra bracket it seems
527:19 - even this one
527:21 - and now we don't have any error we're
527:23 - basically returning a list view Builder
527:25 - with all the tweets if you want to make
527:27 - it real time you can go ahead and make
527:28 - it there's no problem with it I just
527:30 - removed it so that that's complete no
527:32 - complexity you already know how to make
527:34 - it real time we just remove the real
527:37 - time code
527:38 - and now you can see we are getting this
527:40 - error index not found hashtags when we
527:43 - get this error we go to app right
527:47 - then we go to our tweets indexes create
527:51 - index and here let's just say search
527:56 - by hash tag and this is going to be
528:05 - let's say full text because it's search
528:07 - and then we are going to have the
528:10 - attribute
528:11 - so what is the attribute we are
528:13 - searching by hashtags order descending
528:16 - create
528:17 - refresh the app
528:20 - and then click on driven you see all the
528:23 - tweets which has driven in it
528:27 - that means this is working our app is
528:31 - now working even to show the latest
528:33 - hashtags this was very simple right
528:36 - you just need to understand the logic
528:38 - for one thing and you'll get everything
528:41 - else
528:42 - now the next thing is to close all the
528:44 - save files we have completed all the
528:46 - features except one which is Twitter
528:49 - blue
528:51 - so let's get into it to get into Twitter
528:53 - blue what we need to do is go to the
528:55 - home View and your basically whenever we
528:58 - click over here we want a drawer to
529:00 - appear and in that drawer we should get
529:03 - my profile so that when I click on it I
529:04 - can go to my profile and the option to
529:08 - convert to Twitter blue and the logout
529:11 - option so these three things are the
529:13 - things we need to work on and you're
529:14 - done with the application
529:16 - so you're in the home folder we are
529:18 - going to get widgets
529:20 - and the widget is going to be side draw
529:22 - dot dot
529:24 - so let's import material dot let's
529:26 - create a stateless widget called this
529:28 - side drawer
529:30 - and actually this will be a consumer
529:33 - widget so let's import that add in a
529:36 - widget ref
529:38 - and now let's have a safe area
529:42 - so that you know our drawer doesn't
529:44 - merge with the top no notches over here
529:47 - and then we have drawer
529:52 - then we have a child a column and in
529:54 - that column we have children and what
529:56 - are the children that we need well first
529:58 - of all is a list Style
530:01 - and in the list style we have a leading
530:03 - icon
530:05 - which is const icon icons dot person
530:11 - then a title which is constant text
530:14 - my profile
530:17 - and an on tap to it
530:21 - now what I'm going to do is just attach
530:23 - this drawer to the home view so here I'm
530:26 - just going to add a drawer property and
530:29 - pass side drawer to it
530:32 - let's have constant over here save it
530:35 - and whenever I click over here my
530:37 - profile shows up but this is not good
530:39 - because this is not black in color I
530:42 - just wanted pure black so I'll just pass
530:45 - in the background color property AS
530:46 - Palette dot background color if I save
530:50 - this much and go back you can see this
530:52 - is black but I want the font size to be
530:56 - increased now so I can just go ahead
530:59 - and have style as textile
531:03 - with font size as let's say 22
531:07 - much bigger and looks much better
531:10 - you can also increase the size of this
531:13 - icon so let's say size of the icon is
531:15 - now
531:16 - 25
531:19 - this looks good but maybe 30 might look
531:22 - better
531:22 - and yep it does
531:25 - now you can copy these list styles two
531:29 - more times
531:30 - another one is for Twitter blue
531:34 - and for Twitter blue
531:38 - the icon is going to be payment
531:41 - because well you're going to take money
531:44 - from them
531:45 - Twitter blue and if you don't want this
531:48 - to happen what you can do is just use
531:51 - SVG picture.asset and then you can use
531:54 - the Twitter blue verified icon that I've
531:56 - added in the svgs but since I just want
532:00 - to troll I'm just going to use the
532:02 - payment one
532:05 - and the last one is the logout option so
532:08 - you can just scroll down and have
532:12 - log out over here and this is going to
532:15 - be icons dot logout
532:19 - save it and here we have it
532:21 - now I just want to leave some space from
532:23 - the top so I can just have let's say a
532:27 - constant sized box of
532:33 - height 50 if I do this much and come
532:37 - this looks better
532:39 - all right now the next thing is whenever
532:42 - I click over here I want to navigate to
532:43 - my profile page so to do that what I'm
532:46 - going to do is Navigator dot push
532:50 - and I want to go to the profile page so
532:53 - I'll just say user
532:57 - profile
532:59 - View
533:01 - and then I have to pass in the user
533:02 - model to get the user model now I'll
533:04 - just do final current user is equal to
533:08 - ref.watch
533:10 - current user details provider dot value
533:14 - and then I'll check if current user is
533:17 - equal equal to null then I want to
533:21 - return
533:22 - a constant loader otherwise
533:25 - everything else is going to work
533:28 - now I can just pass in the current user
533:32 - not over here dot route and I'll pass in
533:35 - the current user over here
533:39 - great now if I just click over here I
533:42 - should be able to go to my profile and
533:44 - this works pretty good
533:47 - next thing is when I click on Twitter
533:49 - blue I should get a verified badge next
533:52 - to my name so to do this you'll have to
533:54 - go to the user API
533:57 - scroll up
533:58 - create and actually if you see over here
534:02 - in the user API we have something known
534:03 - as user update user data so I don't
534:07 - think we have to create a separate
534:08 - function for is Twitter blue to update
534:10 - the s3w of course
534:12 - so what I'm going to do is close all of
534:14 - them
534:15 - go to my site draw
534:17 - and here I'm directly going to say
534:20 - ref dot read
534:22 - user profile controller
534:25 - provider.modifier dot update user
534:28 - profile then I have to pass in the user
534:31 - model the user model is going to be
534:33 - current user Dot
534:37 - copy with
534:38 - and now I want to copy with what
534:42 - if Twitter blue should now be true this
534:45 - is the updated user data that should be
534:47 - there
534:49 - the banner file is not there null and
534:52 - the profile file is not there so it
534:54 - should be null
534:57 - so obviously if we go to the update user
534:59 - profile this is updated user model since
535:02 - both of them are null these two
535:04 - functions won't run or the if blocks
535:06 - won't run and then we call update user
535:09 - data it passes in the user model which
535:12 - is
535:12 - s2w is now true
535:16 - okay
535:17 - and now the last thing that I need to do
535:19 - is just go to my tweet card and here I
535:23 - just want to display my
535:25 - verified icon so what we are going to do
535:27 - is scroll up
535:29 - right here you can see we have container
535:33 - in the container where we have margin
535:34 - here we are going to check if tweet dot
535:38 - is not tweet sorry if the user dot is 20
535:42 - blue so if the user is Twitter blue then
535:46 - we want a margin of 1 otherwise a margin
535:48 - of 5 from the right hand side now we'll
535:51 - remove the constant as well
535:53 - why is this logic there because if the
535:56 - user is straight or blue then we will
535:58 - have a Twitter batch beside it right so
536:00 - we want a very less margin to be present
536:04 - but if there's if the user is not
536:06 - Twitter blue it's fine if the margin is
536:09 - little bit more to the right
536:12 - and now we are just going to have after
536:14 - the container if condition so if user is
536:17 - Twitter blue
536:21 - then we want to have an SVG picture dot
536:24 - asset of asset constants Dot
536:29 - verified icon now we'll save it nothing
536:33 - shows up because no user is to a w as of
536:36 - now
536:37 - so now let's try to convert one user so
536:39 - I'll click on Twitter blue here nothing
536:41 - happens but if I refresh my application
536:43 - on both the devices
536:46 - I see the Twitter blue icon
536:49 - great but this Twitter icon if you zoom
536:52 - it in it's very close to this username
536:55 - so I want there to be a margin from the
536:57 - right hand side so for that I can either
536:59 - wrap it with container or a padding and
537:02 - here have dot only and from the right
537:05 - hand side I want five so from the right
537:08 - hand side I have a padding of 5 and this
537:10 - looks much better and less congested you
537:13 - know
537:14 - so if the user is Twitter blue it shows
537:17 - up now we also want to show it on the
537:18 - user's profile right beside their name
537:20 - over here so now we can just have this
537:24 - user.s2w we'll go to use a profile view
537:29 - in the user profile just below where
537:32 - they mention their name right here we're
537:34 - going to wrap it with a
537:37 - row widget and have
537:40 - something like if user is Twitter blue
537:43 - then we want this thing where is it
537:46 - this padding to be present
537:48 - with the icon so I can import flutter
537:52 - SVG I can import asset constants
537:56 - and save it
537:57 - after I do that you can see I get my
538:00 - Twitter blue icon over here but I don't
538:03 - I don't want the padding to be from the
538:05 - right hand side I want it to be left
538:07 - hand side so I have it
538:09 - and this looks so good
538:12 - maybe we can do two
538:16 - whatever way you prefer three whatever
538:19 - so I'll just keep it three and we get
538:21 - the verified symbol over here and if the
538:24 - user is not Twitter blue we can see that
538:26 - over here that they are not Veda blue
538:29 - and of course Twitter blue is eight
538:31 - dollars so if you want to implement
538:33 - payment integration I'll create a
538:36 - separate tutorial for it
538:37 - you can check it out
538:39 - I'll mention it in the cards above when
538:42 - I created
538:44 - but if you already have an idea or if
538:47 - you want to use Google or Appleway which
538:49 - I've used in my other tutorials what you
538:51 - can do is
538:54 - you can implement it
538:57 - here before the side drawer when you
539:00 - click on tap over here you can create a
539:03 - method and
539:05 - create a separate controller so that you
539:07 - can add your own you know Twitter blue
539:09 - thing
539:11 - your payment integration so you can add
539:14 - it in the on tap over here and then only
539:16 - update the user profile so if the
539:18 - payment is Success you can update the
539:20 - user profile else you will not
539:22 - so now the last feature we are left with
539:25 - is the logout feature so for that we are
539:27 - going to go to the auth API we're just
539:30 - going to have future
539:33 - either
539:34 - void logout
539:38 - I'm just going to have create one
539:41 - missing override
539:42 - we are going to have async
539:45 - we're going to have our simple try and
539:47 - catch blocks
539:49 - and here we don't want anything we'll
539:52 - just have if await account dot delete
539:55 - session
539:57 - or if you want to delete multiple
539:59 - sessions so you want to delete sessions
540:01 - from all the
540:03 - phones so you can do delete sessions and
540:06 - just do this so it will log you out from
540:08 - all the devices but I only want to
540:11 - delete session from this part and I have
540:13 - to mention the session ID so what is the
540:16 - session ID
540:17 - well the session ID is basically the
540:20 - login session that it gives us that ID
540:23 - but since I don't have it what I can do
540:25 - is current
540:26 - when I use current aware it will delete
540:29 - this current session ID
540:31 - app right identifies it and does it for
540:34 - me now I'll just do return right null
540:38 - meaning that is a success
540:41 - and in case of failures yes all of this
540:44 - is done now we can go to the auth
540:46 - controller we can create avoid function
540:49 - for logout so we avoid logout and then
540:53 - we can have
540:55 - underscore auth API dot logout
540:59 - log out
541:03 - and we can await this final result is
541:06 - equal to this
541:09 - also async now result.fold if you want
541:12 - to handle it some way you can do it but
541:15 - in my case if it's a success what I want
541:18 - to do is just
541:20 - do Navigator dot push
541:23 - and remove until
541:25 - then pass in the build context the new
541:28 - route will be
541:30 - the sign up screen
541:34 - sign
541:36 - up view dot route
541:39 - false so basically this will pop off
541:42 - push and remove the screen until we get
541:46 - to the signup view dot route and then
541:48 - we'll pass in the build context
541:52 - now to use this what we want to do is
541:54 - just go to my side drawer
541:57 - just use your ref dot read auth
542:00 - controller provider dot Notifier Dot
542:03 - log out pass in the required build
542:06 - context and done so we'll restart the
542:09 - entire app
542:10 - and now if I try to log the user out
542:13 - let's log out we've logged out
542:15 - now if I try to restart and see if I'm
542:18 - on the login screen now yes I am on the
542:21 - login screen now because account is now
542:23 - null we have deleted the session so we
542:26 - have developed an entire application an
542:29 - entire Twitter clone where you are able
542:31 - to like retweet comment on a profile
542:34 - put hashtags identify links click on
542:37 - links to go on a new link
542:40 - you know in a browser
542:42 - search for users follow a particular
542:46 - user
542:47 - unfollow a particular user see the
542:50 - notifications here
542:52 - even if it's replied e-share like
542:54 - anything
542:57 - and also able to add Carousel images to
543:00 - your application
543:01 - and obviously the most important feature
543:04 - that is Twitter blue so I hope you
543:06 - learned enough from this application
543:08 - if you did make sure to leave a
543:10 - subscribe to this channel this was it
543:12 - for this tutorial thank you so much for
543:14 - watching and I'll see you in the next
543:16 - video