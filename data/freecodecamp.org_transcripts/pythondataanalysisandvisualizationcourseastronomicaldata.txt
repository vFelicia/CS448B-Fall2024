00:00 - learn how to use Python to analyze
00:01 - astronomical data this is a great real
00:04 - world use case to help you improve your
00:07 - data analysis skills the course offers a
00:10 - practical Hands-On approach to
00:11 - simplifying complex Concepts in data
00:14 - analysis making it great for beginners
00:17 - you'll journey through modules covering
00:19 - python Basics tabular and image data
00:21 - visualization and advanced image
00:24 - processing techniques all focused on
00:26 - real world astronomical applications
00:29 - yeah ash from spart official Innovations
00:32 - developed this
00:34 - course hi everyone I first of all like
00:37 - to welcome each and every one of you to
00:39 - this program on astronomy research data
00:41 - analysis where you are going to learn to
00:44 - create some amazing beautiful looking
00:46 - visualizations that you can create from
00:49 - a boring looking CSV data or a tabular
00:51 - data and even from the raw data from the
00:54 - astronomical surveys how you can take
00:56 - that images and extract some amazing
00:59 - features fees present in those images so
01:02 - all of this kind of work you are going
01:03 - to do in this particular program and
01:05 - then whatever kind of visualizations
01:07 - that you will be generating you can
01:09 - extract from python into your particular
01:12 - system and then later on use it for your
01:14 - research work thesis work or internship
01:17 - report right so that's the kind of thing
01:19 - that we are going to deal with in this
01:21 - program so this whole program is divided
01:24 - into four different modules to make
01:26 - these things very easier for you guys
01:28 - okay but before I go ahead explain any
01:30 - of this let me quickly introduce to you
01:32 - all myself so I am Rohan and I'm
01:35 - currently working at SP artificial as a
01:37 - machine learning engineer and I'll be
01:39 - the one who's going to guide you
01:40 - throughout this whole program and I'll
01:42 - promise you guys that you are just going
01:44 - to simply enjoy this program and you
01:46 - just need to code along with me that's
01:48 - one thing that is really important if
01:50 - you don't code along with me it's just
01:52 - going to be boring for you okay
01:53 - especially if you are new to python you
01:56 - need to code along with me because each
01:58 - and every code that I'll be writing in
02:00 - the uh upcoming uh modules I'll be
02:03 - writing from scratch so I'm 100% willing
02:06 - that you all are going to code along
02:08 - with me okay so now let's talk about
02:11 - each and every module that we are having
02:12 - over here so the first module we are
02:15 - going to start from extreme scratch even
02:17 - if you are very new to python it's
02:18 - completely fine in the first module I
02:21 - have covered each and every basics of
02:23 - python that you will require to create
02:25 - some amazing uh visualizations with the
02:28 - help of python okay so module one is
02:31 - compulsory for you guys just in case if
02:33 - you are new to python if you're already
02:35 - aware about the python then you are good
02:37 - to go ahead and move to module two in
02:40 - module two you are going to deal with a
02:42 - CSV tabular data that data will be based
02:45 - on some kind of real stars out there in
02:47 - Universe now from that tabular data you
02:50 - are going to create some beautiful
02:52 - visualizations including an HR diagram
02:55 - if you're not sure about what is HR
02:56 - diagram it's completely fine okay we are
02:58 - going to learn about that in module two
03:01 - then in module three we are going to go
03:03 - to the astronomical surveys where we are
03:06 - having this raw images taken from
03:08 - multiple different telescopes and from
03:10 - that surve we are just going to fetch an
03:12 - image of Andromeda galaxy and then do
03:15 - some of the uh pixel scaling and all
03:17 - this kind of basic visualizations with
03:19 - respect to an image data and finally in
03:22 - the fourth module the last Model you are
03:25 - going to take that Andromeda galaxy and
03:27 - do a bit advanced level of image
03:29 - processing and I going to teach you that
03:31 - if you want to implement any kind of
03:33 - filter if you want to extract any kind
03:35 - of features that how you can do it with
03:38 - the help of python so that's exactly
03:40 - what we are going to cover in all of
03:42 - this upcoming four modules for this
03:45 - particular program and I hope that you
03:47 - are just going to enjoy this okay so
03:49 - let's get started with the first
03:51 - particular module that is basics of
03:53 - python from the next
03:55 - video hey guys welcome to the second
03:58 - video of module one and here I'm going
04:00 - to introduce you to Google collaboratory
04:02 - notebooks or in short you can also call
04:04 - them as Google collab notebooks okay so
04:07 - for those who are not aware about it
04:08 - already we use them in order to code in
04:11 - Python without actually installing
04:14 - anything in our system isn't it just
04:16 - great so that's exactly what we'll be
04:18 - doing throughout this whole particular
04:20 - program so what exactly are this Google
04:22 - collab notebooks how it works all of
04:24 - this kind of information you'll be
04:26 - getting in this particular video so
04:28 - let's get into it right away
04:31 - so let's understand that how we can use
04:33 - this kind of python notebooks that are
04:35 - available online in order to code in
04:38 - Python the one that we are going to use
04:40 - is specifically called as Google collab
04:42 - notebooks okay so you go to Google and
04:44 - search for Google
04:46 - collab and now if you come on to the
04:48 - second link you just click on that it
04:50 - will redirect you to this page where you
04:52 - are getting this option of creating a
04:53 - new notebook so let's go ahead and click
04:56 - on that new notebook and now I don't
04:58 - need that first TP so I'll just close
05:00 - that up now the whole idea about this
05:03 - kind of notebooks which we also call as
05:05 - interactive python notebooks in short
05:07 - ipynb as you can see over here also
05:10 - right these files are basically used in
05:13 - order to have the mixtures of Tex cells
05:16 - along with the code cells so what you
05:18 - are seeing right now on my screen this
05:20 - particular cell which is getting blinked
05:22 - like that this is called the code cell I
05:26 - can create multiple code cells by
05:28 - clicking over here right and I can do my
05:31 - specific task I want to do over here
05:33 - here here and get my outputs done you
05:36 - will be using this a lot as we go ahead
05:38 - in this program but yeah this is a very
05:41 - very basic introduction with respect to
05:42 - this code let's say you writing some
05:44 - kind of a code in Python over here if
05:46 - you want to run it you simply come over
05:48 - here and click on this or else you can
05:49 - also see there is a shortcut that is
05:51 - control enter you click on control enter
05:54 - and this code is going to run okay and
05:57 - let's if you want to go to the next cell
05:59 - by running this cell you click on shift
06:02 - enter it automatically shifts your
06:04 - cursor to the next code cell or any kind
06:06 - of cell let's if I want to create a text
06:08 - Cell between both of this code cell i h
06:11 - my mouse in between two cells and over
06:13 - here I'm getting the option of text I
06:15 - click on that and I get this option of
06:17 - this Tex cell now the purpose of the Tex
06:20 - cell over here in this kind of ipy andb
06:22 - notebooks uh is to give you some kind of
06:25 - description of what will be done in this
06:27 - following code C that we are writing
06:30 - so in this kind of interactive python
06:32 - notebooks you are getting this kind of
06:33 - facilities to decorate your notebook the
06:36 - way you want so that if anyone who is
06:40 - going to look into this notebook or for
06:42 - that matter let's say even yourself who
06:44 - are going to look into this notebook
06:45 - after let's say some months you need to
06:48 - know that if your documentation is good
06:50 - and Visually appealing then it's very
06:52 - easy to find out a lot of stuff and it's
06:54 - going to be interesting to like you know
06:55 - scroll through this whole notebook and
06:57 - get to the exit point where you want
06:59 - want to find out some kind of
07:01 - information so it all depends on to like
07:03 - you know how much decorative notebooks
07:05 - you want to create how much kind of
07:07 - information in text you want to add and
07:09 - then how much kind of code things you
07:11 - want to code over here and get your job
07:13 - done now here that was a very quick
07:16 - introduction about the Google collab
07:17 - notebook and pretty much uh things that
07:20 - you need to know about Google collab is
07:22 - I guess enough over here some of the
07:24 - things that we can do to start over here
07:26 - before moving on to the second video
07:28 - would be let's say by naming this
07:30 - notebook I'll change this notebook name
07:33 - to Let's the basics of
07:35 - python okay any kind of name that is
07:38 - going to describe what kind of content
07:40 - is present within this notebook and then
07:42 - I can also create a text cell and give a
07:45 - heading with the help of this hash and
07:48 - let's say because this kind of uh whole
07:51 - program is dedicated for astronomy
07:53 - visualizations and Analysis from that
07:56 - visualizations what we can do is we can
07:58 - give a good name like
07:59 - python
08:02 - basics for
08:04 - astronomy something like this whatever
08:06 - you you the best right and then after
08:08 - this we can start coding ourself for the
08:11 - first thing in Python let's say just
08:13 - like everyone does in Python like or any
08:16 - kind of programming language here let's
08:18 - say we are going to print hello world
08:20 - right so if I'm writing hello world like
08:22 - this and then I'm just going to pass
08:25 - this kind of hello world within
08:28 - print
08:29 - this is going to be our first code that
08:31 - we have written in Python print hello
08:34 - world and that's exactly being printed
08:36 - over here so now in this video I've have
08:38 - shown you how you can create this kind
08:40 - of text cells give headings or not just
08:43 - headings you can give images over here
08:45 - you can add links to a specific word you
08:47 - want to add like you know you want your
08:49 - people to redirect to some stuff you can
08:52 - have bold ital like and all this kind of
08:53 - stuff after that I've also shown you how
08:56 - you can start using this kind of code
08:58 - cells in Python and obviously if you did
09:00 - not understand what have I written over
09:02 - here why did I specifically have this
09:04 - kind of uh quotation mark everything
09:06 - will be covered in the upcoming videos
09:09 - so stay
09:10 - tuned hello everyone welcome to the
09:13 - third video of module one and here we
09:15 - are going to talk about python commands
09:17 - so what exactly are these python
09:19 - commands why do we need them and what
09:21 - are some kind of different ways to
09:23 - actually create them all of these kind
09:25 - of things we are going to discuss in
09:26 - this video so let's get into it
09:30 - all right so now that we have written a
09:32 - specific code in Python now let's say I
09:35 - want some kind of a way through which I
09:38 - can describe what I have written over
09:39 - here or what is the purpose of writing
09:41 - this kind of code I can do this with the
09:44 - help of python comments okay for that
09:47 - again I'll have to use this kind of
09:48 - hashtag and then I just give any kind of
09:51 - description that describes what is the
09:53 - purpose of writing this code what does
09:54 - it explain so now because this was the
09:57 - my first code that I have shown you in
09:59 - python I can give this kind of a comment
10:01 - like my first code in Python you can
10:04 - also write this thing for yourself right
10:07 - so what is the main purpose of writing
10:09 - this kind of commments so whenever you
10:11 - are writing some kind of a logic of your
10:13 - code if you're are having this kind of
10:15 - comments that you are writing to
10:17 - describe your logic that how did you
10:18 - come up to this particular logic to
10:20 - solve a particular problem then what
10:23 - happens that even after let's say one
10:25 - year two years if you're coming onto
10:26 - this notebook and now because you having
10:29 - this kind of descriptions in Python that
10:32 - is describing what you have done it's
10:34 - giving you a hint a some kind of this
10:37 - kind of a click to your brain that okay
10:39 - now I remember why I had coded this
10:42 - specific thing in this way maybe because
10:44 - after two years of time if you're coming
10:46 - onto this concept which you haven't
10:47 - touched in a while let's say you're
10:49 - trying to apply for an interview you
10:51 - want to take a project that you have
10:52 - created over here and explain it to them
10:55 - so if you are trying to revise something
10:57 - which you haven't used in quite a while
10:59 - now so if you will be having this kind
11:01 - of comments in Python that will help you
11:03 - to revise this kind of things very
11:05 - quickly because this kind of comments is
11:08 - going to click your brain that okay now
11:11 - I remember what was the reason that I
11:13 - had done this kind of code in this
11:15 - specific way right so that's the whole
11:17 - idea with respect to python commands but
11:20 - now that's not the only one way through
11:22 - which you can have the comments in
11:23 - Python okay because over here we are
11:25 - having only one line of comment what if
11:27 - I want multiple lines of comment right
11:30 - for that what I'm going to do is I'm
11:31 - going to create one more text cell over
11:33 - here first of all and just introduce to
11:36 - that my the first thing that I'm
11:37 - teaching you guys is about
11:39 - comments okay and I can also give this
11:42 - into this way of heading okay three
11:45 - hashes and now you can clearly see that
11:47 - this kind of text is much more smaller
11:49 - in size as compared to this so this
11:51 - looks good right but yeah now what I'm
11:54 - going to do is I already explained the
11:56 - first thing about the comments over here
11:58 - now let's if you want want to have
11:59 - multiple line comments okay so what I
12:02 - can do is I can use three quotation
12:05 - marks I either I can use three single
12:08 - quotation marks or three double
12:09 - quotation marks both of them is going to
12:11 - work just the same okay so I am having
12:14 - my first three uh double quotations like
12:17 - this and three double quotations at the
12:19 - bottom now anything that I'm going to
12:21 - write within this quotation marks is
12:24 - going to be like a comment your python
12:26 - is not going to execute as in the format
12:28 - of you know some kind of a code it's
12:30 - going to do something it's just some
12:31 - kind of a description that you are going
12:33 - to mention over here let's say some kind
12:35 - of huge description you want to write
12:38 - have okay as compared to just a single
12:40 - line then obviously you can go ahead and
12:42 - use this kind of things let's say this
12:44 - is my first line of
12:47 - comment this is my second line of
12:51 - comment I'll be showing you this that
12:53 - I'll be using this when I'm going to
12:55 - teach you the concepts of functions at
12:57 - that times I'll be using this kind of
12:59 - multi-line comments now again let's say
13:01 - that you you are having bunch of lines
13:04 - that you you want to write let's again
13:06 - this is my first
13:08 - comment this is my second
13:11 - comment now let's if you want to comment
13:13 - all of this thing with the help of this
13:15 - hashtag only you don't want to use this
13:17 - kind of uh quotation marks then what you
13:19 - can do is let's say how many lines how
13:21 - however how many lines I am having it
13:23 - doesn't matter the important thing is
13:25 - that I'm going to select the whole text
13:28 - and then press control+ forward slash
13:32 - and automatically it's going to give me
13:34 - this kind of
13:35 - hashes by itself I didn't do anything I
13:37 - just press control and the forward slash
13:39 - what did I
13:42 - do I selected the text below and pressed
13:48 - what control plus this by doing this
13:53 - together you can either comment all of
13:56 - this kind of code or maybe DEC comment
13:58 - it by again pressing the same thing
14:01 - that's simple that it gets for the
14:03 - comments so for a quick revision what we
14:05 - have done over here is now you know how
14:08 - to create print statements in Python
14:10 - obviously not like you are not aware
14:12 - about this that what why did we use this
14:14 - kind of quotation marks what happens if
14:16 - we don't use it I'll be explaining all
14:18 - of that thing in the following videos
14:21 - but yeah for now you know how this kind
14:22 - of print statement Works in order to
14:24 - print something and then what are the
14:26 - kind of need of writing com for your
14:29 - code now in the next video I'm going to
14:32 - talk about what are variables and
14:34 - constants that we need in
14:38 - Python hey guys welcome to the fourth
14:41 - video of module one and here we are
14:43 - going to understand the concept of
14:45 - variables and constants in Python what
14:47 - is the difference between them and when
14:50 - and how should we use them all of these
14:52 - things you'll be getting in this
14:53 - particular video now one thing that I
14:55 - really want to make sure over here is
14:58 - that I hope that you all are coding
14:59 - along with me that's the whole fun about
15:01 - this particular program that you are
15:03 - going to code along with me and it's
15:05 - going to give you live experience
15:07 - instead of just watching the video all
15:09 - right so if you haven't begun it till
15:11 - now this is the right time to get
15:13 - started with it okay so let's get into
15:15 - the
15:16 - video so now what I'll be doing is I'll
15:18 - be just uh commenting this whole thing
15:21 - because like you know it's looking very
15:23 - ugly what is the reason behind that you
15:24 - will be understanding right now in this
15:26 - video so what you are studying right now
15:29 - is called as variables and constants
15:31 - okay so before I write any kind of code
15:34 - I'll be giving a text that describes
15:36 - that I'm going to explain about
15:39 - variables and
15:42 - constants okay now what I'm doing over
15:45 - here is just remember your classes of
15:48 - mathematics you know that we give this
15:50 - kind of things like X is equal to 3 Y is
15:53 - equal to 5 or any kind of number six
15:55 - whatever it is right you know that you
15:57 - do these kind of things so so what we
15:58 - are doing over here is essentially we
16:01 - are saying that X is a variable that is
16:05 - going to take the value of three it's
16:07 - just like that Y is a variable that is
16:11 - going to take the value of
16:12 - six now what is the whole purpose of
16:15 - having these kind of variables in your
16:17 - code for example let's say that I'm
16:19 - writing a lot of huge code and somewhere
16:22 - I want to use the idea of that data that
16:26 - I assigned to that letter x
16:29 - I want to use that again and again for
16:31 - example I'm giving you a very short
16:33 - example let's say I'm having uh value of
16:36 - three that I want to add to a value of
16:38 - three itself let's say 3 +
16:41 - 3 now if I want to write let's say 4 + 4
16:44 - what I'll have to do is I'll have to
16:45 - change this to 4 + 4
16:47 - manually now like this let's say I'm
16:49 - having a huge chain four five then again
16:52 - four then again five like this okay and
16:56 - now I saying that I want to change this
16:59 - values of all fours to threes I'll have
17:02 - to change this
17:03 - manually and fives to
17:06 - twos I'm doing all of this change
17:08 - manually and let's say that this kind of
17:10 - code is pretty much long and you are
17:12 - having multiple times you have to change
17:14 - these things so it does not make sense
17:16 - to write these things again and again in
17:18 - every kind of lines so what we do is we
17:21 - try to store this kind of data in a
17:23 - variable for example x equal 3 Y is
17:26 - equal 2 and now I just need to type x +
17:29 - x + y + x + y That's it now if I want to
17:35 - see so you can see that this is 3 + 3
17:37 - why because X is having the value of
17:40 - three now in place of two we know we are
17:43 - giving y because we know that Y is equal
17:45 - to 2 and similarly again x + y now let's
17:49 - if I again want to change this to 4 4
17:51 - 545 I just need to change x value to
17:54 - four y value to five as simple as that
17:58 - so that's the power of having variables
18:01 - in
18:02 - Python now just like that there's also a
18:04 - concept of constants okay what I'm going
18:08 - to do is I'm going to Simply go ahead
18:09 - and first of all print this to show you
18:11 - the outputs how it looks
18:14 - like so you are having this kind of 22
18:17 - over here directly it's the summation of
18:20 - this 4 + 4 + 5 + 4 + 5 so that's how
18:24 - this kind of thing is working now one
18:27 - difference between this variables and
18:29 - constants in Python is what you are
18:31 - having if you're trying to Define a
18:34 - variable you're always going to Define
18:36 - it with the help of lowercase letter you
18:39 - are always going to Define it in the
18:41 - lowercase letter and the moment if you
18:44 - want to convert this into a constant you
18:47 - define it into an uppercase letter now
18:50 - this uppercase letter is going to
18:52 - indicate anyone who is reading your code
18:54 - in Python that okay yeah now I know that
18:57 - this X is never going to change
19:00 - throughout your code whereas your
19:03 - variables can go ahead and change any
19:06 - kind of data that you want to store in
19:08 - the variable because the name variable
19:10 - itself means that it is varying right
19:12 - it's not constant right so that's the
19:15 - idea what I'm trying to say is that in
19:17 - my next code over here I can change the
19:19 - value of y to some other value for
19:21 - example
19:22 - one but because I have mentioned X in
19:25 - the upper
19:27 - case we are simply saying that okay yeah
19:30 - this x will always be four it will never
19:32 - be changed no matter how deep codes I'm
19:35 - writing X will always be
19:38 - four so that's a very common difference
19:41 - between variables and constants in
19:43 - variables you try to assign any kind of
19:45 - data in form of uh small or lowercase
19:49 - letters and if you want to store the
19:51 - value of
19:52 - constance what you do is you assign any
19:55 - kind of value and uh give a uppercase
19:59 - letter to that so now both of them are
20:02 - now stored in in the format of what
20:04 - constants all right as you can see there
20:07 - are this kind of lines that are
20:08 - appearing that are giving you this kind
20:10 - of yellow yellow lines what it indicates
20:12 - it's simply indicating that X is not
20:14 - defined Y is not defined why it's not
20:17 - defined because I have removed that part
20:19 - of code I have removed that part of code
20:23 - but at the same time it's also stored in
20:25 - the memory of this notebook it is also
20:28 - stored in the memory of this notebook
20:31 - what I'm trying to say is if I comment
20:33 - out this code and now I run this even
20:36 - though I haven't defined XX YX y anymore
20:39 - it's still giving me the output why
20:42 - because initially while explaining you
20:44 - the code over here I had started with
20:46 - small X and small y so now that small X
20:49 - and small Y is by default stored into
20:52 - the memory of this notebook so make sure
20:55 - these kind of things are not uh repeated
20:58 - in your notebook or else you're going to
20:59 - run into some kind of Errors okay but
21:02 - here was a very quick description with
21:04 - respect to what are variables and what
21:06 - are constants and when you should use
21:08 - what variables can change its data that
21:11 - it's trying to store and constant will
21:14 - try to have a very constant value it
21:16 - will never change throughout the whole
21:18 - code that's the whole idea now I'll see
21:20 - you next with respect to what is strings
21:24 - in
21:26 - Python hey guys so welcome to the fifth
21:28 - video of module 1 and here you are going
21:31 - to understand what are some basic data
21:33 - types available in Python we are not
21:35 - going to talk about all of the data
21:36 - types just some of them including string
21:39 - integer and Float okay and also when I'm
21:42 - going to start the video I'm also going
21:44 - to talk about the concept of runtime in
21:46 - Google collab it's really important guys
21:48 - that you understand this particular
21:50 - concept so I'm just going to start with
21:52 - this concept in this video so let's get
21:54 - into
21:56 - it so now now let's look into the
21:58 - strings so what I'm going to do is I'm
22:00 - going to create one text cell give a
22:03 - heading as strings
22:06 - okay and now if I press shift enter it
22:09 - automatically creates a code cell for me
22:12 - now one thing okay before I'm starting
22:14 - the explanation of the concepts of
22:15 - strings I really want to show you what
22:18 - really happens if you try to click on
22:20 - this runtime and let's say for example
22:22 - you want to restart your notebook okay
22:25 - so what you do is you click on restart
22:26 - runtime it saying that whatever kind of
22:29 - memory that was stored in this notebook
22:31 - everything will be reset and if I let's
22:34 - say click on yes and now if I try to run
22:37 - this code see what's going to happen
22:39 - it's going to throw an error this time
22:41 - because XX YX y this small X and small y
22:45 - variables are gone because I deleted all
22:48 - the memory by restarting my run time so
22:50 - that's one thing that you need to keep
22:51 - in mind okay if you want to uh Define
22:54 - this X and Y and if then removing it and
22:56 - changing it to some other thing then you
22:59 - should be cautious about that thing so
23:01 - now moving on to the strings and uh the
23:04 - concepts with respect to that so what is
23:07 - the whole idea behind the strings right
23:09 - so let's if you're having some kind of a
23:11 - numeric data you know how you can assign
23:13 - it to some kind of variable or constants
23:16 - that's fine but now what you if you're
23:18 - having some kind of a text data that you
23:20 - want to assign to a variable for example
23:22 - let's say I'm trying to create some sort
23:24 - of
23:26 - variables create
23:29 - variables to
23:32 - store the
23:35 - information about a planet in our solar
23:40 - system let's say the first thing that
23:42 - I'm trying to store is the name of the
23:45 - planet so I need to assign some kind of
23:47 - variable to that particular name of the
23:49 - planet that I'm going to use so for that
23:52 - again I'll have to create a variable
23:54 - right so let's say I'm going to call it
23:55 - as a
23:56 - planet
23:58 - name something like this you can also
23:59 - call it as a name underscore Planet
24:01 - anything that you like now over here if
24:04 - I want to give a name as Venus like this
24:08 - it's not going to work
24:10 - why because there is nothing like Venus
24:14 - that we have defined anywhere just like
24:17 - for this X and Y that we had seen in our
24:19 - previous video and even for that matter
24:21 - in the starting of this video we if we
24:23 - did not defend this small X small y it's
24:25 - going to give you this kind of uh yellow
24:27 - kind of of line below that thing that
24:29 - hey you haven't given me any kind of
24:32 - value that we need to give to
24:33 - Venus so it's going to run into an error
24:36 - that Venus is not defined if I go ahead
24:38 - and run
24:41 - this it's going to say that name Venus
24:43 - is not defined because we haven't given
24:45 - any value to this so if you want to
24:48 - assign a text data to some kind of a
24:51 - variable you always do it with the help
24:54 - of this kind of quotation marks now this
24:56 - quotation marks is going to ensure that
24:59 - okay now this is a string this is called
25:02 - as a string in Python and now if you run
25:06 - this it is storing this kind of Text
25:09 - data in the variable called planet name
25:13 - now if I want to go ahead and print this
25:15 - thing let's say I'm trying to print the
25:18 - name of this planet by calling the
25:20 - variable in which I have stored it and
25:23 - now you will be seeing that it's
25:24 - printing the Venus value what happens if
25:27 - I'm going to print like Venus without uh
25:30 - even defining what is Venus right like
25:32 - this it's again going to throw an error
25:35 - that Venus is not defined because in
25:37 - itself you have not defined Venus as a
25:39 - variable over here planet name was a
25:41 - variable which we have defined earlier
25:44 - before printing it and that's why this
25:46 - is running without any kind of Errors
25:47 - unlike this thing that you are seeing
25:49 - over here and the same kind of concept
25:51 - has been used over here in order to
25:54 - print hello world I need to pass it in
25:57 - the format of this kind of quotation
25:59 - marks so that it is converting this kind
26:02 - of data into string and now python
26:05 - understands automatically that go ahead
26:07 - and print this string data it's not a
26:11 - variable anymore if you don't give this
26:13 - kind of quotation marks it expects this
26:15 - hello to be a
26:18 - uh some kind of a variable you can again
26:22 - see there is some kind of automatic
26:23 - yellow line appearing right because we
26:25 - haven't defined this hello if I run this
26:27 - it's going to run into an error right so
26:29 - that was the reason why I was having
26:30 - even the quotation mark in in the first
26:33 - code that I had shown you guys to print
26:35 - hello world so that's how you can define
26:38 - a string uh in Python with the help of
26:41 - this quotation marks now it's not that
26:43 - you always use this kind of double
26:44 - quotation marks you can use single
26:46 - quotation mark I can do the same thing
26:49 - by giving this kind of single quotation
26:51 - mark this is also a string I can go
26:53 - ahead and print the same thing it's
26:54 - going to be Venus this time right I'm
26:57 - going to Del this code and now I can
27:00 - also use let's say three quotation marks
27:01 - either of single type or double type
27:03 - even that is fine again this is pretty
27:06 - much useful when you want to create a
27:07 - string which is of multiple lines so
27:10 - let's say I want to give a description
27:12 - line by line let's say this is Venus
27:14 - right and now I want to give this
27:16 - information that planet
27:19 - name is
27:22 - Venus okay now I want to give this kind
27:24 - of information this is the second
27:29 - planet in our solar system first is
27:32 - mercury second is Venus right so this
27:36 - kind of information if I'm giving over
27:38 - here if I want to store it in multiple
27:41 - lines for that I'll required to have
27:44 - this kind of three quotation marks
27:46 - either of single type or double type
27:48 - okay I can change this to double
27:51 - also three double quotations even that
27:53 - will be fine okay but before I run this
27:57 - code cell before I go ahead and run this
27:59 - code cell I'm going to print it see this
28:02 - is how you getting multiple lines of
28:05 - text right now if I run this code and
28:08 - again I run this you will see there is
28:09 - no change because essentially it's
28:10 - happening the same thing but now what
28:12 - happens if you trying to have this kind
28:14 - of multiple lines of code with either
28:17 - single uh quotation or double quotation
28:20 - like this it's not going to work it's
28:23 - only capable of taking this kind of
28:25 - multiple text by using using three
28:28 - quotation marks of either single or
28:30 - double type so yeah that's the idea with
28:32 - respect to Strings now you can store as
28:34 - many kind of information with respect to
28:37 - this kind of planet for example name of
28:39 - the planet is Venus I want to give Venus
28:41 - to it then let's say uh like you know if
28:44 - I want to store the age of the planet
28:46 - approximately Venus is about 4.6 billion
28:49 - years old so Planet age is um
28:56 - 4.6 B million years right I can write
28:59 - this kind of information over here can
29:01 - also write uh let's say what is the
29:04 - index of this planet planet index what
29:07 - do you mean by this planet index that on
29:10 - the first index we are having Mercury on
29:13 - the second index we are having Venus on
29:16 - the third index we are having earth
29:18 - right so Venus comes on the second index
29:22 - so you can store this value is equal to
29:25 - two right
29:27 - now let's say uh in Python if I talk
29:30 - about indexes if I be very specific with
29:32 - respect to indexes in Python we start
29:35 - from index zero we don't start with
29:37 - index one that's one thing you need to
29:40 - keep in mind I'll also give a comment
29:42 - over here indicating that in
29:47 - Python index starts from zero hence
29:52 - Venus is on index one after
29:58 - Mercury on index zero if I wanted to
30:03 - store the information with respect to
30:05 - Mercury I would have written the planet
30:07 - index equal to zero because it's the
30:09 - first planet we are having in our solar
30:11 - system right so that's the reason why uh
30:14 - we'll be indexing that as zero now Venus
30:17 - because it's the second planet we'll be
30:19 - calling it as an index one now one more
30:22 - interesting thing that you can do over
30:24 - here is for if if I'm just going to run
30:26 - this code and now if I print this
30:29 - information that is uh name of the
30:32 - planet and uh Planet
30:36 - age and also the planet
30:41 - index okay now if I going going ahead
30:44 - and running this
30:45 - code it's printing me all of this
30:47 - respective information now if I want to
30:50 - check the type of the data if it's a
30:52 - string type if it's a integer type or if
30:56 - it's a float type now what is the
30:57 - meaning of float if you're having a
30:59 - number in decimals okay if you're having
31:01 - any kind of numbers in either fractions
31:04 - or decimals then you simply call call it
31:07 - as a float number so if I'm trying to
31:09 - check the type in Python what I need to
31:12 - do is along with printing them variable
31:16 - I also want to check the type of the
31:18 - variable so what I do is along with
31:20 - printing this variable name I'm giving
31:23 - one more command in Python called type
31:26 - and now what is this type going to do
31:28 - it's simply going to reveal what is the
31:31 - data type that has been stored in the
31:33 - respective variables that's the thing
31:36 - that I'm trying to look
31:37 - after and now if I simply run this code
31:41 - you can see that the first two things
31:43 - are of class string it means that this
31:46 - planet age and the planet uh name both
31:49 - of them are storing a data that is in
31:51 - the format of strings when I talk about
31:54 - planet index now that is not a string
31:56 - that that is an integer okay now just
32:00 - because I also discussed about the float
32:02 - let's say I'm creating one more variable
32:04 - let's say any random variable for that
32:06 - matter Z and I'm giving some number to
32:10 - it 3.2 now I explained that any kind of
32:13 - decimal number or a number that you are
32:15 - able to express in fraction you can call
32:17 - them as a float type so if I go ahead
32:20 - and print the type of variable Zed see
32:24 - what happens you'll be seeing that it's
32:26 - coming out as a
32:28 - float so yeah this was a very quick
32:30 - introduction with respect to what are
32:32 - strings and not only strings we have
32:35 - also discussed about
32:36 - integers and
32:38 - floats so these are some basic data
32:41 - types that you must know in order to go
32:44 - ahead in this particular program now in
32:47 - the next particular video I'll be
32:50 - explaining you with respect to what are
32:53 - some kind of ways through which you can
32:56 - play around with this string strings and
32:57 - do some more beautiful stuff when it
32:59 - comes to
33:02 - Strings hey guys welcome to the sixth
33:05 - video of module one and here I'm going
33:08 - to discuss about one of my personal
33:09 - favorite Concept in Python known as F
33:12 - string so we're going to talk about what
33:14 - are these F strings how to use them and
33:17 - when should we use them and by the end
33:19 - of this video I'll also be talking about
33:21 - what is the concept of string
33:23 - concatenation and how you can achieve it
33:25 - with the help of F string as well
33:27 - so let's get into
33:30 - it let's try to do something really
33:33 - unique with the strings okay it's going
33:34 - to be some kind of a magic let's try to
33:36 - go ahead and explore what I'm uh talking
33:38 - about but before that I can also call
33:40 - this as like you know basic data types
33:42 - this is looking a very big I'll just
33:44 - change this to basic data types okay I'm
33:46 - going to change this to basic data types
33:50 - okay and this data types are what
33:53 - strings uh float and integers these are
33:56 - the data types that we have discussed
33:57 - about now uh I'm going to talk
34:02 - about F strings okay I'm going to talk
34:05 - about F
34:07 - strings okay now what does this
34:09 - mean for example let's say I want to
34:13 - print some kind of a statement uh which
34:16 - is saying that how many moons does a
34:19 - Jupiter have Okay so let's say I'm
34:21 - trying to print a statement now because
34:23 - I want to print a statement I'm going to
34:25 - give it within a quotation
34:27 - that planet
34:29 - Jupiter has or not Jupiter I should say
34:32 - Saturn because I'm looking forward for
34:34 - Saturn not Jupiter so planet Saturn has
34:38 - um 146 moons the reason I have choosen
34:41 - Saturn is because I just looked onto
34:43 - Google that yeah currently as of June
34:46 - 2023 there are 146 moons that have been
34:49 - confirmed for our planet Saturn right so
34:53 - I'm writing this detail as of now now as
34:56 - you might be knowing that as the
34:57 - astronomers are having much and much
34:59 - more information about this kind of
35:02 - gaseous Giants that we are having in our
35:04 - solar system they are keeping on
35:07 - updating the values of the moons once
35:09 - they are discovering new moons right so
35:11 - now what happens in future if uh we want
35:14 - to update this kind of values let's say
35:17 - we found out that Saturn is now not
35:18 - having 146 moons instead it's having 150
35:22 - moons right so I'll have to manually
35:25 - change this value to 150 to print this
35:27 - kind of thing right so now what I'm
35:30 - going to do is I'm going to create a
35:33 - variable called as Saturn
35:37 - moons okay and I'm also going to change
35:40 - the name of the planet I'm also going to
35:41 - store that what if I want to print the
35:44 - information for a different planet right
35:46 - so I'm also going to store this thing as
35:49 - a
35:51 - name of planet and I'll change this not
35:54 - certain and moons let's say moons of
35:58 - Planet something like this whatever
36:00 - makes sense to you give a very good name
36:02 - so that if anyone is reading it uh
36:04 - everyone is able to make a sense of
36:06 - what's going on so name planet Moon's
36:08 - Planet so I can give the name of this
36:11 - planet as Saturn as of now and I can
36:14 - give that currently it's having 146
36:16 - moons now what I want to do is I want to
36:19 - print the variable as it is if I'm
36:23 - changing this variable the print
36:25 - statement should Auto automatically
36:27 - change okay for example if I want to
36:30 - replace this set with this variable what
36:32 - I need to write is I need to write name
36:34 - planet similarly over here I will change
36:38 - this thing to Moon's
36:41 - Planet but now if you notice if I run
36:44 - this it's going to print the same thing
36:45 - as it is it's going to print the same
36:48 - thing as it is right it's going to print
36:51 - the name underscore planet and moons
36:52 - underscore Planet instead of the Saturn
36:54 - 146 what is the reason behind that it is
36:57 - because we are not giving any sort of an
37:00 - information to the string that hey you
37:02 - need to take the information from this
37:04 - uh variable and not print literally the
37:06 - string that we are giving over here so
37:08 - that's the purpose of f strings you are
37:10 - giving F over here and then writing this
37:13 - thing within this kind of curly
37:17 - braces okay I'm giving all the variables
37:20 - that might change into this curly braces
37:22 - and now if I run this you can see that
37:25 - planet Saturn has 146 moons now let's
37:28 - say in future if this changes to
37:30 - 150 you can see that planet Saturn has
37:33 - 150 moons you don't have to go to let's
37:35 - say I'm having multiple print statements
37:36 - with this planets uh Saturn with uh
37:40 - moons of planet Saturn basically when
37:42 - multiple print statements I don't need
37:45 - to manually go ahead and change this 150
37:47 - 150 150 okay I just need to make a
37:50 - change to this variable and everywhere
37:53 - else in the code it will automatically
37:55 - be updated to 150 because we are having
37:58 - the change in the variable that's
38:01 - something you need to keep in mind
38:02 - that's the power of f strings that's
38:04 - completely a magic okay it is also used
38:07 - like you know if you want to let's say
38:09 - uh concatenate two strings if you want
38:12 - to join two different strings even then
38:14 - you can use this kind of f strings there
38:15 - are multiple methods but let's stick to
38:18 - a very specific method because this is a
38:19 - universal method that always works so
38:21 - let's stick to this particular method I
38:23 - can also give a name over here uh
38:25 - describing the code
38:27 - I should say comment not name and I
38:29 - should describe it like uh understanding
38:33 - the
38:36 - power of f
38:38 - strings right over here also I could
38:40 - have given this kind of commment
38:41 - checking the type of
38:48 - variables obviously for me I already
38:50 - know what kind of this kind of things is
38:52 - but for someone who is a beginner who is
38:54 - going to look into this kind of
38:56 - notebooks for them to understand what
38:59 - are the things that we are doing over
39:00 - here right anytime let's say in future
39:03 - they're going to get referring to this
39:05 - particular notebook they want to know
39:07 - what they have done over here so for
39:08 - that we are giving comments that this is
39:10 - uh
39:12 - displaying
39:13 - the data values for H
39:19 - variables so this kind of comments are
39:21 - always recommended you can go ahead and
39:24 - give this kind of variables uh some of
39:26 - commments okay all right so now let's
39:30 - talk about string
39:33 - concatenation what is the spelling of
39:34 - concatination let me check it's um
39:37 - string concatination
39:39 - right I am very bad with spellings but
39:42 - yeah coming back to this thing now let's
39:44 - see if I'm having two strings okay that
39:47 - Earth is the only planet with life let's
39:50 - I'm going to store it in a string one
39:52 - variable and I'm going to have this kind
39:54 - of either double quotation or a single
39:55 - quotation and I'm going to store
39:58 - Earth is the only
40:03 - planet with live okay and after this I'm
40:08 - giving another statement string
40:11 - two or maybe not
40:14 - maybe
40:16 - not right something like
40:19 - this so if I want to print and attach
40:23 - the strings together I want to create a
40:25 - statement out this now there are again
40:28 - multiple ways that you can do a very
40:30 - straightforward way would be to join
40:32 - them with the help of plus operator I
40:35 - can have print of my string one plus
40:38 - string two and now if I run this it's
40:40 - going to create a error because if you
40:43 - can see I have written string to without
40:45 - the underscore now if I give underscore
40:47 - and run this now it's saying that Earth
40:51 - is the only planet with life with full
40:53 - stop but now there is no space in
40:55 - between so so for that you can create
40:57 - one more string in between string one
40:59 - and string two that
41:02 - is the space
41:04 - string this was a string this is also a
41:08 - string and this is also a string right
41:12 - and now you can see that thanks to that
41:14 - space we are having the space between
41:16 - this first sentence and the second
41:18 - sentence you could have also achieved
41:20 - this by having a manual space over here
41:23 - and then write string one plus string
41:24 - two even that is fine but now let's say
41:26 - if I want to do it with the help of f
41:28 - strings how can I do it very
41:31 - simple I'm calling my string one
41:33 - variable and then string two variable
41:36 - with a space in
41:38 - between again it's going to run into an
41:40 - error because of the
41:41 - underscore so yes see that's how it's
41:43 - going to work how we can do it with the
41:46 - help of F string right you will look
41:49 - into its power as we advance our program
41:52 - uh in order to go ahead and do
41:54 - astronomical visualization and Analysis
41:56 - but for now this is how you can play
41:58 - around with the F strings and now in the
42:00 - next uh particular video we'll be
42:03 - discussing about A New Concept Al
42:05 - together that is how you can get an
42:08 - input from the user in
42:12 - Python hey everyone welcome to the sth
42:15 - video of module one here you are going
42:18 - to understand this concept of how you
42:20 - can take user inputs in your code so
42:23 - let's you are writing a code and there
42:25 - is some kind of a problem
42:26 - where you need to take some kind of
42:28 - inputs from anyone who is running your
42:30 - code and save that data in some kind of
42:32 - variable so for that what is the command
42:35 - in Python through which you can achieve
42:37 - these kind of things and by default what
42:40 - is the data type of the output by using
42:43 - this kind of input command we are going
42:45 - to learn about these things in this
42:46 - video so let's get
42:48 - started now I'll just create one more
42:51 - code cell I mean sorry teex cell give a
42:54 - heading as uh user
42:58 - inputs okay so what we are trying to do
43:01 - over here we are going to run a command
43:04 - in Python that is going to allow users
43:07 - to give some kind of input okay so
43:10 - what's going to happen I'm going to use
43:11 - a command called input and now that
43:14 - input if I'm going to
43:17 - run see it's creating this kind of a
43:19 - text box where you can give any kind of
43:22 - input that you want and store it in a
43:24 - particular variable if you want okay
43:26 - okay for now I'm not storing it anywhere
43:28 - I just trying to get an input it's not
43:29 - going to do anything so I'm going to
43:32 - stop this run okay I just clicked on
43:34 - this it's saying keyboard interrupt
43:36 - because I manually stopped it by myself
43:39 - okay now what I'm going to do is I'm
43:40 - going to store it uh with some kind of a
43:43 - variable over here okay for example
43:44 - let's say I'm trying to ask name of the
43:47 - user so I can give a this kind of a
43:50 - variable name username
43:52 - okay now if I'm going to write this kind
43:55 - of input it's going to give an empty
43:57 - text box now if I want to give some kind
43:59 - of description so that users are able to
44:01 - understand what kind of data to give
44:04 - then you can have this kind of a string
44:06 - information that enter your name like
44:10 - this and now if I go ahead and run this
44:12 - code see how beautiful it's asking for
44:15 - the name now user can simply go ahead
44:18 - and give for example my name is ran I'm
44:20 - going to give R and press
44:23 - enter and now if I look into I'll just
44:26 - give a comment over
44:29 - here use input to take user inputs and
44:35 - just like this I could have also come
44:36 - over here and check the type of
44:38 - variables by
44:40 - using type Command right this kind of
44:43 - descriptive uh comments are always like
44:47 - you know recommended now user uh name
44:50 - has been given as Rohan if I want to
44:52 - check how it looks like if I'm trying to
44:55 - print this
44:57 - it's simply going to take this username
44:59 - equal to Rohan that's what we have done
45:01 - that's all about it right and now what
45:03 - if I check about the data type can you
45:05 - go ahead and guess what kind of type is
45:08 - this kind of username going to have
45:11 - because it's a text data we expect this
45:12 - to be a string it's as expected that we
45:16 - got a string now what
45:18 - happens if I'm going to code and ask
45:24 - user to input their favorite
45:28 - number okay I'm again going to give a
45:30 - comment to this code first of all that
45:32 - is
45:34 - displaying the variable and its
45:37 - type given by the
45:41 - user now asking user to input their
45:44 - favorite number so again let's say I'm
45:46 - creating some kind of a variable to
45:47 - store this information User fave number
45:50 - something like
45:54 - this and ask asking as an input I am
45:57 - asking let uh give or
46:02 - enter your
46:05 - favorite
46:07 - number okay I run
46:10 - this so again it's asking user to give
46:13 - their favorite number let's say they are
46:15 - giving seven because my favorite number
46:17 - is seven and I assume most of your lucky
46:19 - number might be seven as well right I
46:21 - don't know why seven is very lucky I'll
46:24 - just hit enter and now again go ahead
46:28 - and
46:29 - display the variable and its
46:34 - type given by the
46:37 - user and now if I'm printing first of
46:40 - all my user Fame number it should
46:42 - display
46:44 - seven and after this uh if I'm going to
46:47 - print the type of this user fave
46:52 - number look into uh the output
46:56 - it's still a
46:57 - string so what is happening over here
47:00 - the way that we are calling this input
47:03 - command that is inbuilt in Python it
47:06 - automatically converts any kind of data
47:08 - that is given by the user into a string
47:11 - format it automatically converts any
47:15 - kind of input given by the user in that
47:17 - text box into the string format even if
47:21 - it's a number we just looked into that
47:23 - so let's say if you want this number to
47:25 - be converted into some kind of a numeric
47:28 - format either let's say integer or a
47:30 - float what you do is you try to convert
47:34 - this kind of data type into integer
47:36 - format or a float format how we can do
47:38 - this I'll explain that in the next
47:42 - video hey guys welcome to the eth video
47:46 - of module one and here we are going to
47:48 - talk about that how you can take a
47:49 - particular data type and convert it to
47:51 - some other data type for example if I'm
47:54 - having a float how can can I convert
47:56 - that into string so all these kind of
47:58 - data type conversions you are going to
48:00 - understand in this particular video so
48:02 - let's get into
48:04 - it so now let's go ahead and understand
48:07 - that how we can take this particular
48:08 - data type that is in the format of
48:09 - string the seven how you can convert
48:12 - that into a numeric data type that is
48:14 - either integer or float or maybe let's
48:16 - say both of them so for that what I'm
48:18 - going to do is I'm going to create a
48:20 - heading which says that data type
48:23 - conversion you're going to learn about
48:25 - how you can convert any data type into
48:27 - some other data type if it's possible to
48:30 - convert or else you'll be getting an
48:31 - error so the commands that you need to
48:34 - know commands to
48:37 - convert if you want to convert any kind
48:40 - of thing into a string any kind of data
48:43 - it could be a integer it could be a
48:45 - float it could be any kind of data type
48:48 - okay we have cover only three of them
48:50 - but let's say it could be any kind of
48:51 - data type if you want to convert that
48:53 - into a string the command in Python is
48:55 - is the string any kind of input that you
48:58 - give to the string that input if it's
49:00 - possible to convert that into a string
49:02 - it's going to convert it into the string
49:05 - just like that in order to convert any
49:08 - kind of input into integers you are
49:10 - having this command of in integers so
49:14 - any kind of input that you pass to this
49:16 - int within this kind of parenthesis it's
49:19 - going to convert that input in the
49:20 - format of integers if it's possible to
49:23 - convert that input in that integer for
49:25 - example let's say if I'm having 3.5 if I
49:29 - try to convert that into an integer it's
49:31 - not going to it's not going to convert
49:33 - that 3.5 into an integer because 3.5 is
49:36 - the format of float however there is
49:38 - some interesting thing that's going to
49:39 - happen if I'm going to run this kind of
49:41 - code you will be understanding it in a
49:42 - while now just like that if you want to
49:44 - convert any kind of input into the float
49:47 - format you call the float that is
49:49 - available in Python itself and then you
49:52 - give some kind of input that's how it
49:54 - works okay
49:56 - and now I'm going to give one more
49:57 - comment after giving one empty line that
50:03 - convert a string data into integer and
50:09 - Float so uh we know that this seven is
50:13 - currently existing in the type of string
50:16 - I can again cross check it by simply
50:17 - typing this uh type and user fave number
50:23 - and this time I'm not writing any kind
50:24 - of print in top of that because in
50:26 - Google column what happens is if I'm
50:29 - going to run this the last line doesn't
50:31 - require print statement to print the
50:33 - output okay but if I giving let's say
50:35 - I'm just copying this thing and printing
50:38 - it again over here it should have been
50:40 - printing twice for me right if I run
50:42 - this code but it's going to print only
50:43 - once why because it's going to give me
50:45 - the print of the last statement
50:48 - automatically I don't need to give print
50:49 - command if I want to print both of them
50:51 - I need to give print print for both this
50:54 - lines okay that's something thing that
50:55 - we need to
50:57 - know okay but anyways coming back to our
51:00 - discussion that is we already know that
51:03 - now this user F number is in the format
51:05 - of string right so now I'm doing is
51:08 - converting a string to integer how I'm
51:11 - passing this int and then passing in
51:14 - this user fave
51:17 - number and uh simply running this code
51:19 - by pressing control enter and I'm also
51:22 - trying to print the type of this string
51:25 - to int and see if that thing has
51:27 - converted and at the same time I'm also
51:30 - going to print the string to int
51:31 - variable that we have created as you can
51:35 - see now the output is again seven see
51:37 - how the seven are looking just the same
51:39 - it's the change in this data type now
51:42 - from the string we have converted it
51:44 - officially into an integer now this
51:47 - string to integer variable is having the
51:51 - value of integer
51:53 - 7 right we how did we do it by just
51:56 - using this kind of inbuilt command in
51:58 - Python of integer I gave an input to it
52:00 - because we know that the seven can be
52:02 - written in the format of integers we are
52:04 - having this kind of an data now what if
52:07 - I let's say for example give a string
52:10 - like
52:12 - this string like this and ask to convert
52:15 - this string into an it's not a number
52:17 - how will this be converted into an
52:19 - integer it's not possible you're are
52:21 - getting this kind of a value error that
52:23 - hey I'm not able to convert this string
52:26 - into an integer invalid literal for this
52:29 - integer it's not possible to convert
52:31 - this into an integer so make sure that
52:33 - you are giving these inputs that are
52:35 - able to be converted into an integer now
52:38 - at the same time now what happens if I'm
52:39 - giving 3.5 now this time you might
52:42 - expect that it can give you an error
52:43 - because now it's in the format of
52:44 - decimals and even 3.5 in itself is not
52:47 - an integer right so what's going to
52:50 - happen over here it's not going to give
52:51 - you an error instead it's going to round
52:54 - it down to the nearest integer so if I'm
52:57 - having 3.5 it's converting to three if
52:59 - I'm having 3.9 it's still going to
53:01 - convert it to three so yeah that's how
53:03 - this kind of integer works so make sure
53:05 - if you want to have 3.9 let's say if
53:08 - this was in the format of
53:10 - string and now if I run this this time
53:13 - it's giving me an error because string
53:15 - cannot directly be converted into an
53:18 - integer that is having a float data with
53:21 - within itself so I need to convert that
53:24 - 3.9 first of all into
53:27 - float so so that this 3.9 that is
53:30 - existing in a string is first of all
53:32 - converted into a float and now that
53:34 - float will be converted into an integer
53:36 - and now it should work perfectly see how
53:39 - that 3.9 string got converted into a
53:42 - float that is 3.9 and now that 3.9 if
53:45 - I'm giving as an integer of this 3.9
53:47 - it's converting into three right so
53:49 - that's how it's basically uh working the
53:53 - in 3.9 the integer part is that's what
53:56 - essentially we are getting right so yeah
53:59 - coming back to like you know going uh
54:01 - breaking this whole thing into a
54:02 - stepbystep format uh this was user fa
54:07 - number okay and let's say I'm also
54:10 - having the string to integer or let's
54:15 - say yeah string to
54:19 - integer now in is already done right we
54:21 - about to change it to float so now we
54:23 - are having float of user fave number
54:27 - remember this user fave number is
54:28 - already defined over here we haven't
54:30 - done any kind of changes to it so it's
54:32 - still in the format of and string okay
54:35 - it's just that this variable is now
54:37 - given this value that is integer of that
54:39 - string data okay so again if I'm uh
54:42 - first of all
54:45 - printing what is the type of user fave
54:49 - number it won't change it will just be
54:51 - the same because I haven't done any kind
54:52 - of changes to
54:54 - that variable right that variable is
54:56 - still the same okay it's giving me some
54:58 - kind of an error it's giving me a name
54:59 - error that S type is not defined oh yeah
55:02 - because I done a type over
55:04 - here see now it's still you can see it's
55:07 - uh the last this is the last print
55:08 - statement it's saying that it's still a
55:10 - string right now let's say I'm trying to
55:13 - convert that string into a float how we
55:15 - can do
55:16 - it right I'm going to print this thing
55:19 - string to
55:20 - float and also print the type of it
55:26 - see that's how it's working it's
55:28 - converting that 7 into 7.0 and now that
55:31 - decimal indication is saying that it's
55:33 - uh basically float type again I've done
55:36 - some kind of a type over here I should
55:37 - have not written float I should have
55:39 - written string to float right string to
55:41 - float like this because float is a
55:44 - function right it's not some kind of a
55:48 - variable so yeah as you can see now it's
55:50 - giving you the output of float the type
55:52 - of the string to float variable that we
55:53 - have created is is a flute now let's say
55:57 - if I want
55:58 - to
56:00 - get user
56:04 - input of two different
56:09 - integers and add them
56:13 - together how can I do it so what I'll do
56:16 - is I'll take number one as an input I'll
56:20 - ask them to input their number give any
56:24 - integer
56:25 - number okay and then after that I'm
56:29 - going to give another variable that is
56:32 - input give one more
56:37 - integer all right and then if I'm going
56:40 - to add these numbers together and print
56:42 - it N1 plus N2 or else let's say we are
56:45 - having a very feny way to give this kind
56:47 - of a
56:48 - statement by using FST string I'm going
56:51 - to say that uh the sum
56:56 - of N1 variable and N2 variable is the
57:02 - summation of them that is N1 +
57:05 - N2 now remember I am not converting this
57:08 - into integers right because we know that
57:10 - by default this input is going to expect
57:13 - the numbers in the format of what
57:16 - strings so let's if I'm running this as
57:18 - of now and giving let's say seven and
57:21 - another integer is let's say my another
57:22 - favorite number is nine so so 7 + 9
57:25 - should be what 13 9 10 11 12 13 14 15 16
57:30 - okay my bad again my very basic
57:32 - mathematics is also very wrong but
57:34 - anyway 9 + 7 whatever is the value okay
57:37 - 9 plus 7 you can do it in KY it it won't
57:39 - be 79 right so now what's going to
57:42 - happen the reason we are getting this 79
57:44 - is because that this N1 and N2 is a
57:48 - string and we are concatenating them
57:51 - this kind of string with the help of
57:52 - this plus variable I mean plus operator
57:55 - and that's the reason why the seven and
57:56 - N are getting concatenated we are
57:58 - joining the strings together with the
58:00 - help of that plus like how we did over
58:03 - here while uh before this F statement I
58:07 - F string I had given you a way through
58:10 - which you can do it by simply converting
58:14 - this into this plus and there is also no
58:19 - uh quotation marks and if I print this
58:23 - it was giving this right how they were
58:24 - joined this two kind of strings and then
58:26 - we had given this kind of space and
58:28 - everything so yeah that's exactly the
58:30 - same thing that I'm showing you over
58:31 - here okay this is string to just
58:34 - converting it back to what it
58:36 - was and yeah that's uh typically uh what
58:39 - we are going to do over here that
58:42 - because it's in the format of string
58:43 - it's concatenating them now if I want to
58:45 - convert this into an integer I need to
58:47 - pass this int on top of this why because
58:50 - I'm converting the string into an
58:52 - integer and I know user is going to give
58:54 - me an input of an integer it's going to
58:57 - convert it automatically into the format
58:59 - of integers and let's say my mathematics
59:01 - is really very big I'm giving the value
59:04 - of seven and 9 and this value of 16 is
59:06 - now accurate right so yeah that's how
59:09 - it's going to work how you can take
59:11 - inputs from the user if it's a numeric
59:13 - data and if you are sure it's going to
59:15 - be an integer no other data you directly
59:17 - give this input of int on top of this
59:20 - input that you're getting from the user
59:22 - it will automatically convert it into
59:24 - the integers and then you can do any
59:25 - kind of sorts of things you want so yeah
59:28 - that was about how you can uh do the
59:31 - data type conversions convert one kind
59:33 - of data into some different
59:36 - type hey guys welcome back once again to
59:39 - the first module and here is the ninth
59:41 - video of it where I'm going to teach you
59:43 - the concept of control flow in Python
59:46 - now this is the heart of programming if
59:49 - you don't know this concept you are not
59:50 - a good programmer at all not that other
59:52 - concepts are not important they are
59:54 - equally important but as I mentioned
59:57 - this is the heart of this programming
59:58 - language so we're going to start with
60:00 - the looping part specifically we're
60:02 - going to look into the for Loop and
60:04 - while loop once you understand what are
60:06 - this kind of looping why do we use them
60:09 - how to use them we are going to move on
60:11 - towards the condition statements where
60:13 - we're going to understand about if
60:15 - statements if else statements and also
60:18 - if L if L statements and again there are
60:21 - a lot more things that we need to cover
60:23 - in this video so let's get
60:26 - started now let's go ahead and talk
60:28 - about what is control flow in Python
60:31 - okay let me Define this as control
60:36 - flow and the whole idea that you're
60:38 - going to learn over here is I'm just
60:39 - going to cross check if that's the seven
60:41 - yeah that's the seven okay the whole
60:43 - idea we going to learn over here is with
60:45 - respect
60:46 - to for
60:49 - Loop and
60:51 - while and then you're going to learn
60:53 - about some condition statement
60:57 - okay and the main idea over here is that
61:01 - if you are having some kind of a code
61:03 - which is repeating okay and you don't
61:05 - want to manually type all these kind of
61:07 - things for example if I'm writing print
61:08 - zero and then after that print Z I'm
61:11 - also writing print
61:12 - one and then print two then print
61:16 - three right I'm knowing that this kind
61:19 - of integers are giving like being
61:22 - printed starting from zero then 1 2 3
61:24 - like this let's if I want to do this for
61:27 - 100 times for some reason okay this is
61:29 - just for an example as we'll be going in
61:31 - the upcoming modules in this program you
61:34 - will see the power of all of these
61:35 - things okay right now I'm just trying to
61:37 - teach you that these kind of things
61:38 - exist okay so if I want to do this kind
61:42 - of things if I want to automate this
61:43 - kind of things how can I do it because I
61:45 - know that there is some kind of certain
61:47 - kind of things which are keep on
61:48 - repeating itself in a specific way I can
61:51 - transform this whole idea into for loops
61:54 - or maybe while Loops I'll be first
61:56 - talking about for Loop okay so what
61:59 - happens is if I'm trying to initiate my
62:02 - for loop I need to give the keyword
62:04 - called for then for what so for some
62:08 - kind of
62:09 - index that is present in some Itor now
62:13 - what is the meaning of it rator Itor is
62:16 - nothing but some kind of a storage where
62:19 - you are having multiple values that one
62:21 - can take okay that index can take okay
62:24 - so let's say if I'm having list of
62:26 - numbers so in Python you can create a
62:28 - list with the help of the square
62:30 - brackets okay again this is not
62:32 - important thing to discuss as of now but
62:33 - let's say that you know about this kind
62:35 - of list and I'm storing let's say 0 1 2
62:38 - 3 4 this kind of values in the list now
62:41 - what's going to happen automatically
62:43 - this index is going to be like acting
62:45 - like a temporary variable you can call
62:47 - that as a temporary variable that's
62:49 - going to take one by one values that is
62:52 - present inside this iterator list is an
62:54 - iterator where you are storing multiple
62:56 - different values and uh this index is
62:58 - going to take this values one by one
63:00 - starting from zero in the first loop
63:02 - after the first Loop is over it's
63:04 - starting the second loop it's going to
63:05 - take the value of one this index will
63:07 - keep on changing its value starting from
63:09 - zero then the next value that is one
63:12 - then next two 3 four like that until
63:14 - this kind of last value is been uh taken
63:17 - by this Index this kind of for Loop will
63:19 - keep on running okay so what I'm going
63:20 - to do is I'm simply going to print
63:23 - index
63:25 - as you can see the first time this code
63:28 - ran the index was taking the value of
63:30 - zero that's why it print the value of
63:33 - zero similarly now the first Loop is
63:35 - over it's entering the second Loop it
63:37 - took the value of index uh as one that's
63:40 - why is printing me the output of one so
63:43 - that's how you can uh it rate through
63:46 - this kind of it readers and list is just
63:48 - one of the example let's if you want to
63:51 - create a list of 100 numbers and then
63:54 - you want want to iterate you cannot
63:55 - manually go ahead and create this kind
63:56 - of a list of 0 to 100 or 0 to 99 for
63:59 - that matter right so the way through
64:01 - which you can do this is something by
64:03 - using
64:05 - range okay now what is range the way it
64:09 - works is it takes the start value it
64:12 - takes the ending
64:14 - value and then it takes the skip
64:17 - value if I show you let's if I'm giving
64:21 - first of all range of just any number
64:23 - 10 so it's going to give me integers
64:26 - that are present in between 0 to 10
64:28 - that's the purpose of range in order to
64:31 - prove you that what I'm going to do is
64:33 - I'm going to convert this into range of
64:36 - 10 and then run this so it's going to
64:38 - give me the values 10 values in between
64:40 - 0 to 10 so starting from zero it goes
64:43 - all the way up to 9 as you can see after
64:45 - 9 there is no output because this are
64:47 - first 10 numbers starting from zero and
64:51 - yeah we are ending at nine one value
64:53 - that is less than this okay now let's if
64:56 - I don't want to start from the index
64:59 - zero I want my first integer that is
65:02 - present in the range to be let's say
65:04 - minus5 so I can start with minus5
65:07 - because I know that I can give that kind
65:08 - of a syntax start and then end if I'm
65:11 - just giving one number it's just taking
65:13 - the value of end at where you want to
65:15 - end a value before that actually and now
65:18 - if I run
65:19 - this you can see that now it's starting
65:21 - from minus 5 not zero it's going till 10
65:24 - by default the value is set to zero for
65:27 - the start if you not giving any specific
65:29 - input to it now it's going to take the
65:32 - value of minus5 okay so if I change this
65:35 - 10 to minus5 and then if I run
65:38 - this okay I did a mistake I should have
65:40 - written - 5 comma 10 and now if I run
65:43 - this say starting from - 5 -4 -3 it's
65:47 - going to go all the way up to nine until
65:50 - that 10 until that 10 is achieved you
65:53 - keep on going to it rate okay so it's
65:56 - not like you are going to get only 10
65:58 - values no anything in between minus 5 to
66:00 - 10 you're going to get that as an output
66:02 - minus 5 is inclusive 10 is exclusive
66:06 - okay just keep that in mind but
66:08 - typically let's say uh we want some kind
66:10 - of numbers to start with one and then go
66:12 - all the way up to 10 in that case I need
66:15 - to go from 1 to
66:17 - 11 so I hope this kind of things are
66:19 - making now a good sense of how to play
66:21 - around with this range to get your
66:23 - things done right it's now going to
66:24 - start from 1 to 10 now 11 is exclusive
66:27 - remember that that's why it's getting
66:28 - printed to 10 right that's the whole
66:30 - idea one more thing that I can write
66:32 - over here is start is ex
66:36 - inclusive and end is
66:40 - exclusive it simply means that the value
66:43 - of end is the actual value one before
66:47 - that end that we are defining that's
66:48 - what range is going to take all right
66:51 - and now what is the meaning of the skip
66:53 - let's if I want to skip right now it's
66:54 - currently by default skipping one one
66:56 - numbers right after one it skipped one
66:58 - value it went to two 1+ 1 is two right
67:01 - then 2 + 1 is 3 if I want to have this
67:02 - plus two instead of plus one I can let's
67:05 - say have this comma two so now after
67:08 - printing one it's going to add two
67:10 - numbers to it it's going to go to three
67:11 - directly without getting this two as an
67:13 - output so it will be like 1 3 5 7 and N
67:18 - okay why stopped at 9 because 9 + 2 is
67:20 - 11 the moment I reach 11 it's not going
67:23 - to give that as an output right that's
67:25 - not not how it works so yeah that's how
67:27 - it's going to be after 9 because the
67:29 - next index value is 11 it's not going to
67:32 - run for that index so yeah that's about
67:35 - how you can uh use for Loop to do some
67:38 - kind of specific thing right now I given
67:40 - a very simple logic that if you want to
67:42 - print some numbers between let's say 1
67:43 - to 10 and if you want to skip uh two two
67:46 - values starting from one then skip two
67:48 - values you get to three skip two values
67:50 - from three you get to five that's how
67:52 - you do it so that's the concept of for
67:55 - Loop now if I want to do the same thing
67:57 - with the help of while
68:00 - loop how can I do
68:02 - it I can do this by giving while keyword
68:08 - and then a condition I need to provide
68:11 - some kind of a condition and this kind
68:14 - of column is again very important I did
68:16 - not explain you over here but this
68:19 - column is very important this column is
68:22 - going to indicate that whatever you're
68:23 - going to write within this kind of space
68:25 - okay this space is also important which
68:28 - we call as an indentation so if I'm
68:30 - going to delete that space and run this
68:33 - it's going to give me this indentation
68:35 - error why it's giving me this
68:37 - indentation error because the space is
68:39 - missing the for Loop expect this kind of
68:42 - space so that any kind of code that is
68:45 - written within that space that's going
68:47 - to be the part of the loop if I'm going
68:49 - to print some value over here let's say
68:51 - five and run this see it's at the end
68:54 - also printing the value of five but now
68:56 - that Pi is not printed for this many
68:58 - times if I have this kind of space in
69:01 - between so after every number five will
69:04 - be printed after every number five will
69:05 - be printed see after one five is printed
69:08 - after three five is printed so that's
69:09 - the power of this kind of indentation if
69:12 - you're going to give this indentation
69:14 - over here it's going to assume that
69:16 - print five is to be supposed to be there
69:18 - within the for Loop if you don't want to
69:20 - have that indentation then now it's fine
69:22 - it's not going to give an error because
69:23 - it's having at least one line to run
69:25 - within the for Loop and if I skip that
69:28 - thing now it's going to give an error
69:30 - because it needs at least something to
69:32 - run right but now let's if you don't
69:34 - want to get an error like that you can
69:35 - simply use pass keyword okay now this
69:38 - pass keyword what it does you can try to
69:40 - think and uh like you know you can think
69:42 - about the whole logic of the loop uh for
69:44 - that time you can use this pass keyword
69:46 - and if you try to run this if you're
69:49 - thinking about some kind of logic this
69:51 - pass keyword is a very good way to like
69:53 - you know just don't write anything with
69:55 - the for Loop right now just write
69:57 - initiate the for Loop go and do the
69:59 - second part of the code and then come
70:01 - back later on over here so for that you
70:03 - can use pass okay but anyways coming
70:05 - back to where we were okay I'm going to
70:07 - remove this thing and also remove the
70:09 - whole line and come onto the while loop
70:13 - okay so in while loop it expects some
70:16 - kind of a condition that you need to run
70:18 - this Loop until this happens until this
70:21 - condition occurs okay and then over here
70:24 - also automatically if I keep enter if I
70:27 - press enter after the column it gives me
70:29 - this kind of indentation
70:32 - automatically and now over here I can
70:34 - give any kind of way through which I can
70:36 - Loop into this Loop any kind of thing I
70:38 - want to do until a certain kind of
70:40 - condition is met it's simply going to
70:42 - run okay for example let's say I am
70:45 - asking a user I want to create this kind
70:47 - of loop where it's asking user to enter
70:52 - their favorite celestial object
70:54 - okay and every time they are giving the
70:57 - inputs I'm going to also keep a track of
70:59 - an like you know this index I I'll also
71:02 - be updating the index after every
71:04 - iteration so that I'm having like you
71:06 - know favorite celestial object one is
71:08 - this then favorite celestial object two
71:10 - is that so that's kind of stuff that I
71:12 - want to create and uh after that the
71:16 - condition to break this for Loop is
71:18 - again something that I'll be giving and
71:21 - that's how this while loop will be over
71:23 - for the for Loop what's happening in the
71:25 - for Loop we are automatically ending it
71:27 - once the iterators are over like once
71:29 - you're not having anything to itate for
71:31 - it will be over right so once you are
71:34 - hitting that value of 11 you are not
71:37 - going to have anything else to itate so
71:39 - that's about the for Loop but in the
71:40 - while loop it's going to run forever if
71:43 - the condition is not made so it's
71:44 - compulsory for us to write a condition
71:47 - in a way if you want to stop your Loop
71:50 - that condition should be satisfying a
71:53 - certain
71:54 - kind of thing through which you can stop
71:55 - the loop you can break the loop okay so
71:58 - what I can do is I can come up with this
72:01 - kind of a logic that always run this
72:03 - thing okay I'm not giving any kind of
72:05 - specific logic over here I'm just saying
72:09 - that go ahead run this Loop Forever at
72:11 - the same time I'm also having some kind
72:14 - of counter okay I'm having some kind of
72:17 - index that I'm going to track that how
72:19 - many times this kind of iterations are
72:21 - happening and now I'm also asking user
72:25 - to give some kind of input okay let's
72:29 - say enter their favorite Celestial body
72:31 - so let's say I'm going to store this in
72:33 - the variable called object that is obj
72:35 - asking for the input enter your
72:40 - favorite
72:42 - celestial object and then I want to ask
72:46 - them that this is the first thing that
72:47 - they are inputting right CT + 1 because
72:50 - CT by default is zero so I'm just going
72:52 - to write ct+ one over here and then have
72:55 - this F string and this is also typo so
72:58 - I'll convert that into input and now
73:00 - what's going to happen in the for Loop
73:02 - okay if I run this as of now see what's
73:05 - happening it's asking that enter your
73:07 - favorite celestial object one I'm going
73:09 - to say
73:10 - earth now again it's saying enter your
73:13 - favorite celestial object one why
73:15 - because we are not updating the value of
73:17 - the CT and it will keep on asking me
73:20 - because I'm not giving any kind of
73:21 - condition to stop this while loop right
73:23 - so for now I'm manually stopping this
73:25 - over here so let's talk about how we can
73:27 - update this counters I can once I'm done
73:30 - asking this kind of input from the user
73:33 - I'm going to update the value of CT and
73:35 - say that CT is equal to the previous
73:37 - value + one you could have also written
73:40 - this uh as like you know City Plus equal
73:42 - to 1 it's essentially doing the same
73:44 - thing it's taking the previous value of
73:45 - city and adding one to that okay so 0 +
73:50 - 1 is 1 okay and now uh 1 + 1 will be 2
73:55 - right so that's how this is going to
73:56 - become 1 + 1 2 right so it will ask
73:59 - enter your favorite celestial object
74:02 - when the CT value will be one this 1 +
74:04 - one will be two or by default you could
74:06 - have started this with one and like you
74:08 - know you could have remove this one over
74:10 - here because it will start with one and
74:12 - then automatically it will be two in the
74:14 - next iteration whatever it's up to you
74:16 - right how you code your specific logic
74:19 - so yeah that's what I have done and I'm
74:20 - also going to give the condition that if
74:24 - if user is going to input something that
74:28 - is asking to stop that yeah that's it I
74:31 - don't have any kind of favorite
74:32 - celestial bodies apart from what I have
74:34 - given as an input so if the object input
74:38 - that has been given by the user is equal
74:42 - to let's say something called
74:44 - quit okay then what I'm going to do is
74:48 - I'm going to break the for Lo there are
74:51 - multiple new things that you learning
74:52 - over here that is
74:53 - this if statement along with the break
74:56 - statement so what's
74:58 - happening so until the user is going to
75:01 - write quit it's going to run this F Loop
75:04 - and the moment they are going to type
75:06 - quit it's going to break the for Loop so
75:09 - this is called as condition statement
75:11 - that is if condition if this condition
75:14 - happens then you're going to terminate
75:16 - the for Loop by using this kind of break
75:18 - keyword and then let's say if this is
75:21 - not the quit you can continue the code
75:23 - so you don't need to do anything if this
75:25 - is the condition that is met then break
75:27 - the loop okay and I can also give this
75:29 - kind of a print statement over here that
75:34 - type uh
75:36 - quit type
75:38 - quit to
75:40 - exit right this kind of uh hint is
75:43 - something that I'm trying to write over
75:45 - here so that user knows how you can
75:47 - escape this kind of loop when to St okay
75:51 - right so now let's see what kind of
75:53 - things uh happen if I'm running this
75:55 - code so see how it's coming type quit to
75:58 - exit so now let's say that favorite
76:00 - Celestial body is for example Earth then
76:03 - let's say black hole this kind of inputs
76:06 - now I'm tired I want to give quit but
76:08 - now I give it like this it's not
76:10 - quitting why because I give this Q as
76:12 - capital right I give this Q as capital I
76:15 - need to write small q ID the lowercase Q
76:19 - it only then it will stop so now to
76:22 - tackle this kind of conditions what you
76:24 - can do is you can take the user input
76:27 - and convert it into this kind of lower
76:29 - case the way you can do it by passing
76:32 - this lower function that exist in Python
76:34 - for string so if I want to demonstrate
76:37 - that I'm going to write a
76:40 - commment convert any string into lower
76:44 - case how you can do it let's say I'm
76:48 - having a string demo is equal to
76:50 - uppercase or any kind of combination of
76:52 - letters is upper case just like this
76:56 - okay now if I print this string
77:00 - demo it's going to be as it is upper
77:03 - case now if I want to convert that into
77:05 - a lower case what I'm going to do is my
77:08 - string demo. lower is what I'm going to
77:10 - print
77:13 - now this lower is converting this any
77:17 - kind of upper cases anything to a
77:20 - smaller case if it's existing it will
77:21 - convert into a lower case if it's
77:23 - already a lower case it's not going to
77:25 - do any kind of changes to that so now by
77:28 - applying this even if it's writing
77:30 - capital Q UI even still that is fine
77:33 - okay so if I run
77:34 - this and uh now if I am writing
77:38 - Earth black
77:40 - hole right and then UI let's say capital
77:44 - T also for that matter see it's still
77:45 - quitting why because the power of this
77:48 - lower functionality that is implemented
77:51 - to the string there are again bunch of
77:53 - different methods that you can apply to
77:55 - a string but because we don't have to
77:57 - learn everything in Python only some
77:59 - specific things that you will require in
78:02 - order to do some kind of astronomical
78:04 - visualizations and Analysis then this
78:06 - much amount of information is quite okay
78:08 - for now okay as we'll be going ahead you
78:11 - will be learning a lot of different
78:12 - stuff in Python over here I'm just
78:14 - giving you a warmup so that you are
78:17 - understanding a lot of things in Python
78:18 - and you're not just getting confused of
78:20 - some basic stuffs right so yeah that's
78:23 - about like you know we have talked about
78:24 - how you can have this kind of for Loop
78:27 - you can have while loop then also talk
78:29 - about some kind of conditions like this
78:31 - let's say if uh if this is the condition
78:33 - then do this
78:35 - else if
78:38 - object lower equal to some different
78:41 - thing let's say um Capital quit then do
78:46 - what then let's say
78:49 - print
78:51 - type smaller
78:54 - quit smaller or lower C quit or else
78:58 - it's not going to make any sense as of
79:00 - now so what I'm going to do is I'm
79:01 - simply going to delete this okay I'm
79:03 - just going to keep it as of now over
79:04 - here I'm not going to complicate the
79:05 - things if there will be something where
79:07 - you will be requiring to understand the
79:09 - elsf condition also over that specific
79:12 - time I'll be understanding you like I'll
79:13 - be explaining you okay for now all of
79:15 - these things are again quite a lot of
79:18 - thing to understand in just video so
79:20 - yeah I'm going to end this video over
79:21 - here and in the next video what we are
79:23 - going to learn about is functions and
79:26 - I'll try to incorporate this kind of f
79:28 - else block over there uh with lsf
79:31 - condition also right so stay tuned for
79:34 - that hey guys welcome to the final video
79:38 - of module one and here I'm going to
79:40 - teach you the concept of function in
79:42 - programming so to start with we'll be
79:44 - talking about what is the need of the
79:46 - functions in programming and I'm sure by
79:48 - the end of this program you will be
79:50 - appreciating that you have learned this
79:51 - particular concept
79:53 - so we'll also learn about how you can
79:56 - create your own function in Python then
79:58 - in order to use it how you can call
80:01 - these functions and then at the end of
80:03 - this video you will also be creating a
80:05 - function that's going to work like a
80:07 - very simple basic calculated to perform
80:09 - some kind of addition multiplication
80:12 - subtraction and all that kind of stuff
80:14 - so let's get started with this
80:16 - video now let's understand the concept
80:19 - of function in Python I'm going to
80:21 - create a Texel give
80:24 - heading now the whole concept of the
80:26 - functions in Python is very similar to
80:28 - again what we do in
80:29 - mathematics if you are giving some sort
80:32 - of inputs to a function now that
80:34 - function can take any kind of formula
80:37 - right now if you're giving some kind of
80:39 - inputs to that formula let's say you're
80:41 - having f ofx is equal to 3x² +
80:46 - 2x + two something plus three something
80:49 - like this so now if you're going to give
80:50 - the value of x as two or automatically
80:53 - this x will be taking the value of two
80:54 - and whatever is the output of 3 into 2 s
80:57 - + 2 into 2 + 3 that will be the output
80:59 - of this function now the very similar
81:01 - idea is what we are following in Python
81:03 - also we create this kind of functions to
81:06 - repeat some kind of block in Python okay
81:09 - just like what we did for the for Loop
81:10 - or Y Loop but over there you are
81:13 - continuously iterating one by one but
81:15 - now what if you want to use same block
81:17 - of code in this code cell but then after
81:20 - let's say two three Cod cell again you
81:21 - want to use that again after one two
81:23 - code cells you want to use that so for
81:25 - that you create functions right now how
81:28 - do we create this functions in Python
81:31 - you use this kind of keyword called def
81:33 - for defining the function then you give
81:36 - name to the function now let's say that
81:38 - I'm trying to create a function to GRE
81:40 - everyone of you over here who are
81:42 - watching this video So Def greet I'm
81:45 - giving this random name that came to my
81:47 - mind and then you need to give some kind
81:49 - of input arguments to this function
81:51 - right now I'm not giving any kind of
81:53 - arguments and now again this kind of
81:56 - column is given so that python
81:58 - understands that yeah now anything that
82:01 - is given below this kind of colum with
82:04 - this indentation it's all going to be
82:07 - the part of the
82:08 - function let's say that I'm trying to
82:12 - print the value or not the value but the
82:15 - string called he estro
82:18 - files I'm assuming most of you over here
82:21 - who are watching this video are asro
82:23 - file so what I'm doing is I'm going to
82:24 - create this kind of function that's
82:26 - going to do this particular thing okay
82:30 - hey asro files I'm just trying to create
82:31 - every one of you now how to call this
82:34 - function once you have created a
82:36 - function how you going to call them
82:38 - you're creating a function to
82:43 - gr
82:46 - viewers of this video right and without
82:51 - any input argument
82:53 - uments or parameters you can call them
82:55 - as input arguments input parameters
82:58 - there are wonderful names given to the
82:59 - same thing over here okay now I'm going
83:02 - to call that function how to call that
83:05 - function you call the name of the
83:06 - function like GRE okay have this
83:09 - parenthesis and just run this
83:12 - code you're going to get an output of
83:14 - hey estoiles I don't need to write this
83:16 - kind of same thing again and again now
83:19 - anytime I want to call this function
83:21 - it's going to print a asiles for isn't
83:24 - it just interesting now I'm just going
83:27 - to go ahead and add one more magic to
83:29 - this function that I'm going to
83:31 - specifically greet some of you over here
83:33 - okay let's say that uh one of your name
83:36 - just for example is let's say let's just
83:39 - not give any kind of random name let's
83:41 - just take my name okay and let's say
83:43 - some of your name is also Rohan so yeah
83:45 - if Rohan if you're watching this
83:47 - particular video then I'm going to greet
83:49 - you specifically okay but yeah coming
83:50 - back to the concept what I'm trying to
83:52 - do over here here
83:53 - is uh
83:56 - Define a function to
84:01 - GRE a person whose name will be
84:05 - given whose name will be given as an
84:10 - input so now what I'm going to do over
84:12 - here is I'm going to first of all create
84:14 - a very similar kind of function but this
84:17 - time I'm going to have this kind of a
84:20 - name okay
84:21 - so let's say defining a function give a
84:24 - name let's say
84:26 - gr person something like this and now it
84:29 - takes one input argument that is name
84:32 - okay now this time what I'm going to
84:33 - print out is this a whatever is the name
84:39 - again because I'm using the F strings I
84:41 - need to use f over here hey whatever is
84:44 - the
84:45 - name I hope you are enjoying this
84:50 - session and learning
84:53 - a lot of things in
84:57 - Python something like this right and now
85:00 - if I'm going to uh run this code to
85:02 - create this function now again call that
85:06 - function okay now how it's going to work
85:08 - see that I'm going to call this great
85:13 - person and give a name of let's say
85:16 - Rohan okay so yeah hey Rohan I hope you
85:20 - are enjoying this session and learning a
85:23 - lot of things in Python yes I am okay
85:25 - thank you but yeah anyway moving moving
85:28 - on to the next part so yeah this is what
85:29 - I'm trying to show you that now I can
85:32 - just call this function with different
85:33 - different names okay call this function
85:35 - with different
85:38 - name okay now I'm going to again call
85:42 - this
85:44 - function
85:46 - person and let's say that I don't know
85:50 - this name came up into my mind out out
85:52 - of nowhere let's use
85:55 - Curren okay I'm lying he is my best
85:58 - friend so yeah anyway so hey current I
86:00 - hope you it's going to print the same
86:02 - thing just that wherever now there is a
86:04 - name variable it's going to replace it
86:06 - like this you are trying to create some
86:08 - bunch of different formulas for function
86:10 - not actually the formulas but specific
86:12 - code that will be repeated with some
86:15 - kind of different inputs that you give
86:16 - to a function so yeah this is how this
86:19 - kind of functions work in Python but now
86:21 - that's not all do this kind of things
86:24 - okay now I'm feeling a bit sad that I'm
86:26 - not wishing all of you over here so what
86:29 - I'm going to do is I'm going to call
86:30 - this function for one more time call
86:32 - this function to gr everyone
86:36 - to gr every one here watching the
86:41 - video I can simply call this great
86:44 - person but instead of just greeting one
86:47 - of you guys I'm going to greet everyone
86:49 - of you so what I'm going to do is let's
86:52 - just call this as everyone okay and now
86:55 - I'm going to run
86:57 - this it says hey everyone I hope you are
87:00 - enjoying this session and learning a lot
87:02 - of things in by now this is good right
87:05 - so yeah that's about this thing but yeah
87:07 - now moving on to some more advanced
87:09 - concepts of python that you must know
87:10 - because these are very essential you
87:12 - will be using a lot of inbuilt
87:14 - functionalities in Python and different
87:16 - libraries in python in the upcoming
87:18 - modules you need to know these things
87:20 - that I'm going to teach you right now so
87:21 - please pay attention mention very
87:22 - properly over here okay now what I'm
87:25 - going to do is I'm going to talk about
87:26 - two things that are keyword arguments uh
87:29 - and the default arguments and also the
87:31 - position of the arguments okay now this
87:34 - concept is really very
87:36 - important a default or I should say
87:39 - first of all I'm going to talk about
87:41 - position
87:42 - arguments and I'm going to talk about
87:44 - keyword
87:46 - arguments and also
87:51 - about let's just talk about uh these
87:53 - things right now so that I'm not
87:54 - confusing you guys with a lot of stuff
87:58 - so what happens over here is that if you
88:01 - are giving two inputs okay you're not
88:04 - giving only one input you're giving two
88:05 - inputs to the function for example one
88:08 - that is the name and then you can give
88:10 - some kind of a greeting message okay now
88:12 - you cannot just have I hope you are
88:14 - enjoying the session you can have some
88:15 - kind of different message also if you
88:17 - want okay so I'm going to give this kind
88:19 - of uh functionality to my users who is
88:21 - going to use the function that I'm
88:22 - creating in Python so that they can give
88:25 - any kind of message they want okay this
88:27 - is just some examples that comes into my
88:29 - mind right now so what I'm going to do
88:31 - is I'm going to again create a function
88:33 - I'm first of all going to talk about
88:34 - position arguments okay I'm also
88:37 - deleting the keyword arguments so if I'm
88:42 - greting and I'm passing let's say I'm
88:45 - creating a function called greting
88:46 - passing name and message and then I'm
88:49 - saying that
88:51 - print
88:53 - name okay I'm giving this FST
88:56 - string print name and then
89:00 - message something like this is what I
89:02 - want okay I want to print my name first
89:05 - and then I want to print some message or
89:07 - else I could literally play around with
89:10 - these things
89:11 - properly I can say hey
89:16 - name and then some kind of a message
89:19 - something like this right it up it's up
89:20 - to you how you create your function so
89:23 - let's say I'm creating it like this and
89:25 - this time if I'm trying to
89:27 - call this
89:29 - function by placing the input
89:35 - arguments in the same
89:39 - order while building
89:41 - it so I'm going to call my function that
89:44 - is greting I'm going to give a name
89:47 - again let's say I'm going to just play
89:48 - around with the names I'm going to play
89:49 - with let's say
89:50 - l and then I'm writing a message
89:54 - um are
89:56 - you an
89:58 - asile something like this right and now
90:00 - if I run this it's giving hey Lea are
90:04 - you an asile this kind of question has
90:06 - been asked right and if you can see this
90:09 - exclamation is also getting printed so
90:10 - if I don't want that if I'm just again
90:14 - calling this okay so yeah this time see
90:17 - what's happening I'm not getting that
90:18 - kind of exclamation mark now this time
90:21 - what I have done I place this l in place
90:24 - of name in place of message I put this
90:28 - now what happens if I'm going to shift
90:31 - call the
90:33 - function by Shifting the
90:36 - positions of the
90:38 - arguments of the function right so I'm
90:41 - going to call the same function again
90:44 - but now change this kind of message with
90:47 - name right and
90:50 - then
90:53 - like this and now if I enter this hey
90:56 - are you an estoile comma lus it does not
90:58 - make any kind of sense right so that's
91:01 - the thing that I'm talking about the
91:02 - position of the arguments whenever you
91:05 - are defining a function you always look
91:07 - into what kind of uh way what what is
91:10 - the position of each and every arguments
91:13 - if name argument is kept first you
91:16 - always go ahead and give your this kind
91:19 - of name is equal to uh something okay
91:21 - there is L yeah you don't give this kind
91:23 - of message over here whatever is the
91:25 - first input argument that respective
91:28 - input should what go over here okay
91:31 - because now it's thinking python is
91:33 - thinking that hey this is the first
91:34 - argument so this should go in the place
91:36 - of name so that's something that you are
91:38 - learning over here with respect to the
91:40 - position arguments but now what happens
91:43 - if I'm again having the same kind of uh
91:47 - thing but I'm specifically saying that
91:51 - this is my
91:52 - name argument and this is my message
91:56 - argument okay now call this
92:01 - function with keyword
92:05 - arguments so what I am doing over here
92:07 - is I'm giving some kind of argument
92:10 - keyword before passing just the
92:12 - arguments I'm also having its respective
92:14 - keyword that I have used to define that
92:17 - argument so this is called keyword
92:18 - arguments okay that now even though the
92:21 - position I have changed but now because
92:23 - I'm giving a specific keyword now python
92:27 - understands that this should go for the
92:30 - message argument and this should go for
92:33 - the name argument and therefore you are
92:35 - getting this as an output I hope these
92:38 - things are making sense to you okay now
92:41 - one more thing that you can study in
92:43 - functions that is very common is default
92:46 - arguments that is while creating this
92:50 - kind of a function okay while creating
92:52 - this kind of a
92:54 - function let's say
92:56 - greting with
92:59 - default argument something like this is
93:01 - what I'm defining the name of the
93:02 - function and now what I'm saying is if
93:04 - someone is not giving any kind of name
93:07 - or if they are not giving any kind of
93:09 - message by default what kind of message
93:11 - they should uh be seeing uh welcome to
93:15 - this program on astronomy visualization
93:19 - something like this right visualiz
93:22 - a something like this is what I want to
93:24 - uh give them a message and I want to
93:26 - print hey name and then the message Okay
93:28 - now what's going to happen always
93:31 - remember your keyword arguments that you
93:34 - will be giving will always come later on
93:37 - first the position arguments will come
93:39 - if you're having mixture of like you
93:41 - know keyword arguments with the position
93:43 - arguments always remember whenever you
93:45 - will be calling a function you first
93:48 - need to pass in the position arguments
93:50 - because the order matters over there and
93:52 - at the end you can change this kind of
93:54 - uh keyword arguments order that's fine
93:56 - at the end of the function what I'm
93:58 - trying to say over here is that first of
94:01 - all I'm going to call this
94:04 - function call this function uh without
94:08 - passing message argument and see what
94:11 - happens so greeting
94:15 - with default arguments and now I'm
94:18 - giving the name of let's say ran I'm
94:20 - coming back to because I'm not in the
94:22 - mood to think about new name you can say
94:24 - that and now if I'm running this see
94:26 - it's it's giving me an error the reason
94:28 - it's giving me an error is because I
94:30 - haven't run this code right it's giving
94:32 - me that this this thing is not defined
94:34 - only so how can you how are you running
94:36 - this and now if I'm running this you can
94:39 - say that hey Rohan welcome to this
94:41 - program on astronomic visualization
94:44 - right it by default took this argument
94:46 - whatever was written over here and it
94:48 - gave me over here now what would happen
94:52 - if I'm giving my message variable first
94:56 - uh and then giving my name okay I'm
94:58 - saying message equal to uh WhatsApp
95:01 - something like that
95:03 - okay and then now see what's going to
95:05 - happen in the first position that should
95:07 - be name okay but in place of that name
95:09 - you are already giving this message
95:11 - variable I mean message keyword now this
95:13 - keyword is already taking this kind of
95:16 - value now in the second position there
95:19 - should be a message now that is already
95:21 - exist over here that's why you're
95:23 - getting this kind of red line and
95:24 - obviously you're going to run into an
95:25 - error position for arguments follows
95:28 - keyword argument so always write your
95:30 - position arguments first and then the
95:32 - keyword arguments okay so over here I
95:34 - could have written this as like you
95:36 - know our name that is
95:40 - Rohan and then the message this is fine
95:43 - just write XL right even while defining
95:45 - the functions if you are having this
95:46 - message first and then the name like
95:50 - this
95:52 - see what happens it's going to throw an
95:54 - error non-default argument follows the
95:57 - default argument just like in the
95:59 - keyword and the position if you are not
96:01 - having any kind of default values you
96:03 - always keep them first okay that's
96:06 - something that you must know while
96:08 - creating your own functions okay now all
96:11 - of these things that you have learned
96:12 - over here is going to be pretty much
96:14 - very useful whenever you'll be
96:16 - implementing these ideas in the uh
96:19 - upcoming modules that you will be
96:21 - learning okay but now one last thing
96:23 - that I want to describe over here is I'm
96:25 - going to create a function create a
96:29 - function that will
96:31 - either add
96:35 - subtract
96:36 - multiply or
96:39 - divide two input
96:42 - numbers okay so I'm going to come up
96:44 - with a very basic calculator with the
96:46 - help of functions okay and I'm going to
96:48 - show you that how you can do all these
96:50 - kind of things create a function that
96:51 - will either add it's not wether it's
96:54 - either add subtract multiply or divide
96:57 - on any two numbers that has been given
96:59 - as an input okay so let's say I'm
97:02 - creating a function called basic
97:05 - calculator okay and now I'm giving some
97:08 - kind of inputs of two numbers that is
97:10 - number one number two and then what kind
97:13 - of operation I want to have for example
97:15 - let's just call that as an operation add
97:17 - multiply subtract or divide something
97:19 - like that okay I'm trying to demonstrate
97:21 - that if else if and else kind of
97:23 - statements okay so now let's say uh if
97:27 - if operation dot again I'm using this
97:31 - kind of lower functionality so that if
97:33 - if anyone is also giving capital A D
97:35 - even that's going to find in order to
97:37 - compare so if the user input is ADD I
97:41 - want to return something now this is
97:43 - again a new thing we are learning in
97:45 - functions it's not always about printing
97:47 - right if you want to give something as
97:49 - an output just like in the mathem iCal
97:51 - function if you're giving some input
97:52 - it's going to give you some kind of
97:54 - specific output it's going to return
97:55 - some outputs so you can get something
97:58 - out of this calculator or the function
98:00 - that you are creating by calling a
98:02 - keyword called written anything that you
98:04 - write after written will be the output
98:06 - of the function when you call this whole
98:08 - function with some input arguments okay
98:11 - you will understand this in a while so
98:13 - let's say I want to written what do I
98:14 - want to written I want to written N1 +
98:17 - N2 whatever is the output of this N1
98:19 - plus N2 is what I want to written now if
98:21 - I run this code and test this basic
98:25 - Keli giving my first number as two
98:28 - second number as three and then
98:30 - operation is ADD and then run this see
98:33 - the output is five how did I get this
98:35 - output five because I'm returning this
98:36 - value I can store this value in a
98:38 - variable now I can store this in say uh
98:42 - addition something like this and then
98:44 - also print this and I can use this kind
98:46 - of addition somewhere else in the code
98:48 - right
98:50 - addition
98:52 - so that's the first thing that we have
98:53 - done now the second thing that we are
98:56 - going to do is we going to say that if
98:59 - else if
99:01 - operation. lower is to
99:07 - subtract okay then return what return
99:10 - nerse minus N2 just like that else if
99:14 - operation.
99:17 - lower is to multiply multiply then what
99:21 - you do return N1 s symbol is used for
99:26 - multiplication and then else if
99:29 - operation.
99:30 - lower is to
99:34 - divide then you're going to return what
99:38 - N1 divide by N2 right else if anything
99:42 - else is given as an input apart from add
99:44 - subtract multiply or divide you're going
99:46 - to say that
99:48 - print I'm going to create my f state
99:51 - with F
99:52 - string you can
99:56 - either in your operation Operation
100:04 - input can either
100:07 - take either
100:09 - take add multiply
100:13 - subtract or
100:15 - divide you
100:18 - give what whatever was the like you know
100:21 - the operation that has been given by the
100:24 - user you give this try again this kind
100:27 - of message is what I'm trying to print
100:30 - okay and now if I run this code see how
100:34 - it's working if this is the condition
100:35 - then do this else if if this is
100:38 - condition then do this else if this is
100:40 - the condition do that else if this is
100:42 - the condition do this and if it's
100:44 - nothing like that then do this that's
100:46 - the proper if else if and else block
100:49 - that we have created over here okay so
100:51 - now if I run this it's giving me five as
100:53 - an output right now let's say if I want
100:55 - to do some kind of multiplication and
100:57 - I'm storing it in the multi multi
101:00 - multiply something like that right now
101:02 - I'm going to create this kind of basic
101:04 - Kelsey
101:06 - function and give this kind of uh thing
101:10 - that uh first number is three the second
101:12 - number is three and then
101:14 - multiply okay and uh print the value of
101:18 - multiply also print
101:21 - multiply 3 * 3 is 9 we expect the output
101:24 - of N9 right you can go Ahad and test for
101:26 - all these things okay what happens if
101:28 - I'm trying some random input and I'm not
101:31 - going to store it I'm just going to try
101:33 - to see what's the output that we are
101:35 - able to fetch 3 comma 3 and some
101:39 - random okay and then if I run this it's
101:42 - going to give operation uh input can
101:45 - either take add multiply subtract or
101:47 - divide you give this try again right so
101:50 - this is this is the thing that is giving
101:52 - output I can shift this to capital O and
101:55 - I can also give some kind of uh like you
101:57 - know uh information over
102:01 - here with the help of
102:03 - multiple strings over here I can say
102:07 - that parameters I can first of all give
102:09 - the kind of like you know an idea of
102:11 - what this kind of function is doing this
102:13 - is a really very good way of documenting
102:15 - your functions okay I'm describing what
102:17 - this kind of code is doing okay this
102:19 - function is doing
102:22 - um create creates a
102:25 - basic
102:28 - calculator that takes first that takes
102:31 - N1 and N2 in the same
102:34 - order and
102:37 - performs either
102:42 - of
102:44 - addition
102:46 - subtraction
102:49 - multiplication mul
102:51 - multiply and divide they can perform
102:55 - either of this right and then you can
102:57 - give
103:00 - parameters and then you can have this
103:02 - kind of
103:03 - parameters that uh N1 first
103:09 - number then N2 is your second number
103:13 - like this you can just give all the kind
103:15 - of proper information and then operation
103:18 - Operation is any of the
103:21 - operations mentioned above for our basic
103:28 - calculator that is add subtract multiply
103:30 - or divide and then it's going to also
103:33 - return
103:34 - what it's going to
103:39 - written uh what is it going to return
103:41 - it's going to WR let's check what is it
103:44 - written yeah either the output of the
103:47 - curency the output of the operation
103:53 - done N1 and N2 so you can also give an
103:57 - example over here if you want but yeah
103:58 - that's pretty much about how you can
104:00 - describe a function so that if someone
104:02 - else is going to use your function they
104:04 - already know how to like you know give
104:06 - some kind of inputs while uh calling
104:08 - your own function that you have created
104:10 - right so yeah that's about the functions
104:12 - that you should know and uh over here
104:14 - these are some kind of pretty much
104:16 - things that you should know if you know
104:17 - about all of these things you are now
104:19 - having enough idea just to advance
104:21 - yourself into Python and learn a lot of
104:24 - uh beautiful things in terms of how you
104:26 - can create different visualizations in
104:28 - astronomy by using some new things
104:30 - itself but at the same time now you're
104:32 - aware about a lot of things in Python
104:34 - that's for sure not going to make you
104:36 - think like a lot of overwhelming stuff
104:39 - going on okay so yeah make sure that you
104:41 - are going through all the kind of quiz
104:44 - questions that we have given just to
104:46 - ensure that you are now having a proper
104:47 - idea about all of these Concepts that we
104:49 - have taught uh before you advance to
104:52 - module
104:54 - two hi everyone welcome to the second
104:57 - module I hope that by now from the
105:00 - module one your concepts of basics of
105:03 - python are clear because all of those
105:05 - Concepts will be now implemented in
105:07 - module 2 that will be helping us to
105:10 - convert a tabular data of real stars out
105:12 - there in universe and create some
105:14 - amazing visualizations out of it and do
105:17 - some observations get some observations
105:19 - out of it do some kind of analysis and
105:21 - then whatever kind of visualizations we
105:23 - will be creating we'll also be saving it
105:25 - into our system so all of these kind of
105:27 - things we'll be doing in this particular
105:29 - module and specifically what type of
105:31 - graphs we are going to generate from
105:33 - this tular data of stars we are going to
105:35 - generate the bar graphs we're going to
105:37 - generate the box plot we're going to
105:39 - create the line plot also the pair plot
105:42 - and finally at the end of this
105:44 - particular module you will also be
105:46 - creating an HR diagram now this HR
105:48 - diagram if you're not aware about it
105:50 - it's completely fine because by the end
105:52 - of this video you will be knowing this
105:54 - everything and you will also be coding
105:56 - for the same thing okay it's one of the
105:58 - most amazing things that you will be
106:00 - seeing whenever you are dealing with the
106:01 - star data okay so let's get started with
106:04 - this particular module hey everyone
106:07 - welcome to the second video of module 2
106:10 - and here I'm going to give you a quick
106:12 - sneak peek on the data set that you will
106:14 - be using throughout this particular
106:15 - module so this is basically about some
106:17 - real stars out that in universe and yep
106:20 - without spoiling any of your excitement
106:23 - let's get into the
106:26 - video let's go ahead and try to
106:28 - understand what kind of astronomical
106:30 - data that we are using in order to
106:32 - create some of our first visualizations
106:34 - in this program with respect to that
106:36 - astronomical data and then not only that
106:39 - how you can take this kind of
106:40 - visualizations that you are going to
106:41 - create in Google collab and save it into
106:44 - your system so that later on whenever
106:46 - you are doing your research work in
106:47 - order to give support to whatever kind
106:50 - of work that you are writing in your
106:51 - research to support that work you can
106:53 - always add this kind of visualizations
106:55 - right so how you can extract this kind
106:57 - of visualizations from Google collab
106:59 - into your system and then obviously you
107:01 - can uh attach this kind of
107:02 - visualizations into your research paper
107:04 - or maybe report or whatever kind of
107:06 - research work that you might be doing so
107:08 - all of these things will be covered in
107:10 - this particular module and uh
107:12 - specifically the data that we're going
107:13 - to deal with is stored in in the format
107:15 - of the CSV file in this particular
107:18 - Google Drive Link so we're going to ly
107:20 - export this data from the Google drive
107:23 - into this Google collab and then we are
107:25 - going to explore this kind of data set
107:27 - step by step and then create this
107:29 - visualizations that's the whole idea the
107:32 - main goal is to create some kind of
107:34 - different visualizations from the data
107:35 - set and the data set is all about
107:38 - different stars that are existing out
107:40 - there in space and then all of the stars
107:43 - are given with its respective properties
107:44 - of absolute magnitude then surface uh
107:47 - temperature spectral type and also the
107:49 - luminosity
107:50 - and at the end we are also going to
107:52 - create this kind of a hers sprung russle
107:54 - diagram or in short you can also call it
107:55 - as a CHR diagram which helps astronomer
107:58 - classify any kind of a star based on its
108:01 - properties of this absolute magnitude
108:03 - spectral type surface temperature and
108:05 - the Luminosity so that's the whole kind
108:07 - of idea that we are going to deal with
108:09 - throughout this particular module and
108:11 - I'll see you next in the upcoming video
108:12 - where we are going to deal with
108:14 - exploring of this data
108:16 - set hello hello everyone welcome to the
108:19 - third video of module
108:20 - and here we are going to go ahead and
108:22 - import the libraries so what kind of
108:24 - libraries are we going to import or what
108:26 - kind of libraries are we going to use
108:27 - throughout this module two you're going
108:29 - to understand each one of them as in why
108:31 - are we importing them and then yes as
108:34 - you can see on the screen find out what
108:36 - are this kind of libraries and why are
108:37 - we going to use them so let's get into
108:40 - it now in order to explore this kind of
108:43 - data set that we are having in the
108:45 - format of Cs that is stored in the
108:46 - Google Drive and also create
108:47 - visualizations on top of that what we'll
108:49 - be doing doing is we won't be coding
108:51 - everything from scratch we going to use
108:53 - some of the existing libraries that's
108:55 - going to help us so that we can save our
108:58 - time and at the same time use this kind
109:00 - of libraries to create some kind of
109:02 - beautiful visualizations after exploring
109:04 - them so for that I'll have to import
109:06 - these libraries which will help us
109:07 - throughout in this particular module so
109:10 - what I'm going to do is I'm going to go
109:11 - ahead and import the libraries that are
109:13 - going to first of all help us explore
109:15 - the data set in a proper way so I can do
109:18 - this with two of the libraries that is
109:20 - Port OS okay how exit it will be helping
109:23 - you will get to know in the upcoming
109:24 - videos but yeah OS is one of the library
109:26 - that is going to help us to let's say
109:28 - for example create a directory where we
109:31 - are going to save all of our
109:32 - visualizations and also it's going to be
109:34 - useful for some other purposes that will
109:35 - be same apart from that if you want to
109:38 - open the CSV file and explore it step by
109:41 - step the main popular library that we
109:43 - are going to use is pendas so I'm going
109:46 - to import pendas as PD the reason I'm
109:48 - calling it as p PD over here so that
109:51 - because I don't want to write pandas
109:53 - again and again okay I just want to use
109:55 - PD in short so that I don't have to
109:57 - write pandas again and again
109:58 - continuously right it's up to you you
110:00 - can just simply import pendas and use
110:03 - all the functionality of pendas Library
110:05 - by calling it completely by calling it
110:07 - as pendas not PD it's your choice okay I
110:09 - can have also import pendas as let's say
110:12 - for example my name is Rohan so I can
110:13 - have also import this thing as import
110:15 - pendas as ran but now it does not make
110:18 - sense right it's almost pretty much same
110:19 - letters that are having so a short form
110:21 - that we use in the python Community for
110:23 - pandas is PD just like that you will
110:26 - also maybe needing some kind of a way
110:29 - through which you can create an array
110:32 - from this kind of a CSV file okay so
110:34 - from the CSV file you want to generate
110:35 - some sort of array for that he will
110:38 - require a library called as numpy so I'm
110:40 - going to import numpy Library as
110:43 - NP so now I have imported all of these
110:46 - libraries that are going to help us
110:48 - explore the data set now in order to
110:51 - visualize this kind of data you will
110:53 - require visualization libraries so for
110:55 - that what kind of things I'll importing
110:58 - I'll be importing the first thing that
110:59 - is c bond again because the there are a
111:02 - lot of characters in this particular
111:04 - word I'm going to import it as SNS again
111:06 - a short form that we use in Python
111:08 - Community for cbon and then we are also
111:11 - having one more one of the most popular
111:13 - libraries for visualization that is met
111:15 - plot Li so I'm going to import met plot
111:18 - lib and specifically P plot
111:21 - uh and I'm going to import it as PL
111:24 - again a short form to call all of these
111:26 - things together right so these are the
111:28 - libraries that we are going to use
111:30 - majorly to create some kind of different
111:32 - visualizations after exploring it with
111:35 - the help of os pendas and numai so
111:37 - that's the whole idea and now from the
111:40 - next video we are going to go ahead call
111:42 - the data from that link and finally
111:45 - start exploring
111:47 - it hey everyone welcome to the fourth
111:49 - video of of module 2 and now that you
111:51 - are already having a quick idea of what
111:53 - is the data set all about let us try to
111:56 - explore this data set with the help of
111:58 - python we going to convert the CSV data
112:00 - into Panda's data frame with the help of
112:02 - pendas library and then summarize this
112:05 - whole information that we are able to
112:06 - fetch from this particular data frame
112:08 - about the Stars so let's get
112:12 - started now what we are going to do is
112:14 - we are going to take that uh CSV data
112:16 - I'm going to Simply copy this link and
112:19 - use this particular link or part to the
112:21 - CSV file read that CSV file with the
112:24 - help of pendas library and create a
112:27 - pendas data frame so what does this mean
112:30 - so I'm going to use pendas functionality
112:31 - so I'm using PD and then dot to refer to
112:36 - any kind of functionality that is
112:37 - present in pendal and now because I want
112:39 - to read the CSV file I'm going to write
112:41 - this command rore CSV and then it
112:44 - expects this path in the format of
112:46 - string to that CSV file so I'm going to
112:48 - Simply give this kind of a quotation
112:50 - mark and paste that link now you don't
112:53 - have to download this particular data
112:55 - from this link and then upload it
112:56 - somewhere to basically read the CSU file
112:59 - this link is sharable for everyone so
113:02 - you simply go ahead copy that link paste
113:04 - it over here and simply press control
113:06 - enter to run this code and you will be
113:08 - seeing that the whole data of that CSV
113:10 - file is now expressed into this kind of
113:13 - a table that is your pendas data frame
113:16 - now how do I know that this is a pendas
113:17 - data frame so whatever code we have
113:20 - written and whatever it is generating
113:21 - for us I can always check its type by
113:24 - simply writing the type and whatever
113:27 - command that I'm getting over here if
113:30 - I'm running this and you can see that we
113:31 - are getting this pendas data frame right
113:34 - so what I'm going to do is I'm going to
113:35 - store this pendas data frame into some
113:37 - of the variable so that we don't have to
113:39 - again and again read the CSV file so I'm
113:42 - going to store it in a variable called
113:44 - let's say star DF what it means it's a
113:47 - data frame uh which is having the
113:49 - information of stars right so you can
113:51 - name it the way you want this is what I
113:53 - have choosen okay now let's say if you
113:55 - want to visualize top three rows of this
113:58 - data how you can do it you call that
114:01 - data frame that you have created and
114:03 - then on top of that what kind of
114:04 - functionality you can use you can use
114:06 - the functionality of head this head
114:09 - automatically gives you if you don't put
114:11 - any kind of input over here it gives you
114:13 - first five rows of data that is present
114:16 - in your CSV file now let's if I want to
114:18 - visualize top three I can just give this
114:20 - three and yeah you can get this kind of
114:22 - three first values that is present in
114:24 - our CSV file as you can see there are
114:27 - some different properties of the stars
114:29 - and there are some different respective
114:31 - stars that we are having over here so
114:33 - zero is a star that is present on our
114:35 - first particular row then the second
114:38 - star is present on index one so on and
114:40 - so forth right so that's the kind of
114:42 - idea that we are having now what if I
114:44 - want to visualize some 10 random samples
114:47 - of the stars that are present in this
114:49 - data so for that we use some different
114:51 - functionality of the data frame that is
114:53 - sample the sample allows you to get some
114:56 - random samples from this data frame by
114:58 - simply passing in the number for example
115:00 - let's say I want to visualize 10
115:02 - different samples from this data frame
115:04 - as you can see that now on the left side
115:06 - the index values are completely
115:07 - different it's not starting from 0 1 2 3
115:09 - like that it's some random index so it
115:12 - is indicating that we are trying to
115:14 - display some random 10 data points that
115:17 - are present in the CSV file right and
115:20 - each and every Star is having the
115:21 - properties with respect to its
115:23 - temperature Luminosity radius absolute
115:26 - magnitude of that star what is the star
115:28 - type if you can see the star type is
115:30 - given in the format of some numerical
115:31 - data there is some kind of a reason
115:33 - behind that I'll be explaining it to you
115:34 - in a while and then there's also a star
115:36 - color and a spectral class this is the
115:38 - kind of data that we are having right
115:40 - and all of this kind of stars are having
115:43 - this kind of properties and by using
115:45 - these properties we are going to create
115:46 - some of the visualizations that we'll be
115:48 - seeing throughout this module
115:50 - right now let's say this is the overall
115:52 - data that we have seen right now if you
115:54 - want to get let's say a generic
115:56 - information from this data frame then
115:58 - how you can do it you can do it with the
116:00 - help of you again call the data frame
116:03 - whose generic information you are trying
116:04 - to look for to get it some of its
116:07 - functionality you press this Dot and the
116:09 - functionality that we looking forward to
116:11 - is the information of that data frame
116:13 - and that command is do info you don't
116:16 - need to give any kind of inputs over
116:17 - here you simply run this and you're
116:19 - going to get an overall general
116:21 - information that is stored for this
116:23 - particular data frame it is giving you
116:25 - that there are total of 240 different
116:27 - stars that are present in your data
116:29 - frame whose index are starting from zero
116:32 - and goes all the way up to 239 okay and
116:35 - then there are some different seven
116:37 - columns for each and every row that is
116:39 - present in our data and what is the name
116:41 - of these columns we can also find that
116:43 - over here that my first column that is
116:45 - present on my index zero is temperature
116:48 - as you can see over here that's my first
116:50 - column on index zero this is index one
116:52 - index two index three four five and six
116:55 - in total there are total of seven
116:56 - different columns like that and
116:58 - respective uh name of the column has
117:00 - been given over here and then there are
117:03 - also information with respect to nonnull
117:05 - count what it means if there are any
117:08 - kind of data point in this whole data
117:11 - frame which is missing for example if
117:13 - this was missing then what would happen
117:15 - in a radius there is one missing value
117:18 - so over here in radius you would have
117:20 - got 239 nonnull out of 240 there are 239
117:25 - data points which are not missing which
117:27 - are not null but there is one point
117:29 - which is missing so this kind of nonnull
117:31 - count column is giving you an idea with
117:33 - respect to how many uh data points are
117:35 - missing as you can see that out of 240
117:38 - all of this 240 are nonnull it means
117:40 - every data is complete now the reason
117:43 - the data is complete like this in real
117:45 - life you don't get this kind of complete
117:47 - data you have to perform some of the
117:49 - techniques called as feature engineering
117:52 - handling the missing values and all
117:53 - these kind of things so that you can use
117:56 - this model for a proper analysis that's
117:59 - the whole idea and that's again one of
118:00 - the reason why we have converted the
118:02 - star type into numerical type because at
118:05 - the end this data was used to create
118:08 - some of the machine learning models but
118:10 - now because that's not part of this
118:11 - particular program we are not going to
118:13 - talk about that I'm simply going to tell
118:15 - you that let's say uh zero means let's
118:17 - say some kind of a dwarf star I mean
118:19 - some kind of a super giant star all this
118:21 - kind of information I'll be giving you
118:23 - at the end of this particular video but
118:25 - yeah just know that all of this file
118:27 - that you are seeing right now it wasn't
118:29 - like this from the beginning it was made
118:31 - perfect so that we can perform this kind
118:33 - of visualizations on top of this kind of
118:35 - given data right because our aim is not
118:38 - to uh handle this kind of missing values
118:40 - do some kind of feature engineering and
118:42 - create some kind of machine learning
118:43 - models our job is to take the data set
118:47 - which is complete and then create
118:48 - visualization on top of that that's the
118:50 - whole idea of this particular program
118:52 - right so let's focus on that particular
118:55 - part so now we are having 240 Nal
118:58 - contents for every columns that is
119:00 - existing along with that we are also
119:03 - having that for each and every column
119:05 - what is the data type in which this
119:07 - information has been stored so overall
119:10 - summary is present over here that out of
119:12 - seven columns three are of Flo type
119:14 - which means there are some kind of
119:16 - decimals involved over here then there
119:18 - are two columns with integer type and
119:20 - then there are two object type object
119:23 - type you can call it as like you know
119:24 - some kind of a text data that is present
119:26 - over there something like that is what
119:28 - you can assume as of now in a very like
119:30 - you know lay and language and the total
119:32 - memory consumption for this kind of data
119:35 - is 13.2 plus KB so yeah that's also
119:38 - giving you the kind of idea with respect
119:41 - to the memory that has been used to
119:42 - store this particular data so as you can
119:46 - notice for the temperature all of this
119:49 - values are in the format of integers but
119:51 - now if you talk about Luminosity it's
119:53 - having this kind of decimals which are
119:55 - involved right and now that's why it's
119:57 - also given this luminosity in the format
120:00 - of float don't worry about this kind of
120:01 - numbers okay this numbers are basically
120:03 - giving you the Precision of the way of
120:05 - writing that particular number let's not
120:07 - got let's not go into the this kind of
120:09 - technical details as of now right uh
120:11 - let's focus on this kind of this is a
120:12 - float type this is also a float type
120:14 - this is again a float type because again
120:16 - some kind of numbers with this decimals
120:18 - but then star type is integers and Then
120:21 - star color and spectral class are both
120:23 - having some kind of Text data so now
120:25 - again that are appearing over here in
120:28 - the format of the object data type of
120:30 - this pendas data so here that's an
120:33 - overall observation that we are able to
120:34 - make by importing this data from this uh
120:39 - particular Google drive to Google collab
120:41 - looking into some of its random samples
120:43 - and then also getting some kind of
120:45 - generic information on top of that if
120:47 - you want to look into its overall
120:48 - observation here is I have written in a
120:50 - complete detail okay there are 240 rows
120:53 - with six independent features and one
120:56 - dependent feature that is the target
120:58 - column again this is mentioned with
121:00 - respect to let's say a machine learning
121:01 - data set that you are trying to classify
121:05 - the star type based on other six
121:07 - properties okay so that's that's the
121:09 - kind of idea about this data set but
121:12 - again we are not going to do any kind of
121:14 - machine learning thing over here we are
121:15 - simply going to create
121:17 - visualizations okay and here are all the
121:19 - kind of information about The Columns
121:22 - right this is the target class the star
121:24 - type right but anyways you don't need to
121:26 - get into that particular information and
121:28 - what is the meaning of Lo and r o that
121:31 - is L and R not these are the average
121:33 - values of Luminosity of the Sun and
121:35 - radius of the Sun so all this
121:37 - information that you are seeing with
121:39 - respect to the luminosity and radius now
121:42 - that is with comparison to the Sun that
121:45 - compared to Sun what is the Luminosity
121:47 - of this star compared to the radius of
121:50 - sun what is the radius of this
121:52 - particular star so it gives you some
121:54 - kind of a comparison directly that okay
121:56 - yeah this star is less luminous as
121:59 - compared to our own sun and also its
122:02 - radius is small as compared to our own
122:03 - Sun so yeah that's the kind of idea that
122:06 - we are
122:07 - having apart from that yes there are
122:10 - star color and spectral class which are
122:12 - categorical features which means it's in
122:14 - the format of some kind of
122:16 - categories there are some kind of
122:18 - different categories of of colors there
122:19 - are some different categories of
122:21 - spectral class right so this is the kind
122:23 - of data that we are having over here and
122:26 - then this is what I was trying to look
122:27 - after right this is something that I was
122:29 - trying to look after that this
122:32 - information about the star type the
122:33 - integers that were mentioned right
122:35 - originally it was having some kind of a
122:37 - name to it zero stands for brown dwarf
122:40 - one stands for red dwar two stands for
122:42 - white DWF three is standing for the main
122:44 - sequence four is for super Giants and
122:46 - five is for hyper Giants now we are
122:49 - going to create some kind of
122:50 - visualization at the end of this module
122:52 - that is going to display this whole uh
122:55 - information of the Stars into an HR
122:57 - diagram and finally we'll be able to
123:00 - classify it like this hyper Giants Super
123:02 - Giants white dwarves right red bars this
123:05 - kind of things is what we are going to
123:07 - expect at the end of this module this is
123:09 - one final visualization that we are
123:10 - going to create so yeah that was the
123:12 - idea with respect to exploring this kind
123:14 - of data set uh uh so far after this what
123:17 - we are going to do is in AUD to create a
123:19 - visualization and then save it somewhere
123:21 - we going to create a directory uh in the
123:24 - next video so stay
123:26 - tuned hey everyone welcome back once
123:28 - again to the module 2 and in this video
123:31 - we are going to understand that where
123:33 - exactly are we going to save the
123:34 - visualizations that we'll be creating in
123:37 - the upcoming videos of module 2 so for
123:39 - that you're going to understand that how
123:41 - you can create a directory in Python and
123:44 - then how you can get the path of the
123:46 - directory so that we can use it in order
123:49 - to save all the kind of beautiful
123:51 - visualizations that we'll be creating in
123:53 - some of the upcoming videos so let's
123:55 - understand how we can create a directory
123:58 - and get a path of it in this particular
124:00 - video let's get into
124:03 - it now before we go ahead and create any
124:06 - kind of visualizations we need to save
124:08 - it somewhere so for that I'm going to
124:10 - create one directory or you can call it
124:12 - as a directory or a folder whatever you
124:14 - want so for that I'm going to first of
124:16 - all give the name to that folder so let
124:19 - me create a variable called as folder
124:20 - name that I might change maybe later on
124:23 - in future so yeah I'm just giving it as
124:25 - a folder name over here as star plots
124:28 - you can give whatever name you want over
124:30 - here and then I'm also going to create a
124:33 - folder now of this particular name right
124:36 - now I just created a variable I haven't
124:38 - created any kind of folder now how can I
124:41 - create that folder over here now if I
124:43 - show you over here this is what is
124:45 - called as the session storage space of
124:47 - the Google collab where by default this
124:50 - kind of sample data exists for every
124:52 - notebook okay so we haven't created
124:54 - anything from our side it is already
124:56 - existing if you will check it will be
124:57 - existing for you as well now my job is
125:00 - to create one more folder whose name is
125:03 - star plots and the way that I can do
125:05 - this is I just come to the next uh line
125:09 - and write OS because that's the library
125:11 - that we have imported in our previous
125:13 - one of the previous videos and I'm going
125:15 - to use a specific functionality of this
125:17 - OS that's going to help me create a
125:20 - directory and that is called as make
125:23 - directories make de is the command and
125:26 - now it expects two of this uh inputs the
125:29 - first input is the name of the folder so
125:32 - I'm going to give this as a folder name
125:34 - at the same time it expects uh us to
125:37 - give exist
125:39 - okay and we are going to set this to
125:41 - true what it means it means that if this
125:45 - kind of folder already exist in your
125:47 - space then it's not going to recreate
125:49 - the folder or something like that if
125:52 - it's existing it's not going to do any
125:53 - kind of changes if it's not existing as
125:55 - of now we don't have this kind of file
125:57 - then it's automatically going to create
125:59 - a directory for us now if I run this
126:03 - code now the code has ran successfully
126:05 - and if I refresh this part you can see
126:08 - this directory has been created for us
126:11 - now the main idea is to whatever kind of
126:13 - visualizations that you will be creating
126:15 - you need to create a path that will
126:17 - store it within this particular location
126:21 - so for that what I need to do is I need
126:23 - to Simply get the path of this folder I
126:26 - can do this by clicking on this three
126:28 - dots over here and click on copy path
126:31 - and I can create a base directory path
126:34 - over here which simply means that any
126:36 - kind of visualizations that you are
126:37 - creating you will be storing in this
126:39 - base directory and now I'm going to
126:42 - equate this to the string of this path
126:45 - and now I'll just make this path Dynamic
126:47 - just in case uh we are having some
126:49 - different folder name in future if I
126:51 - want to change I don't have to change
126:53 - this base directory path I'm going to
126:55 - use F string for that that's what we had
126:57 - learned in our first module right so uh
127:01 - I'm going to write folder name over here
127:03 - instead of star plots right so I just
127:06 - can change the name of the folder if I
127:08 - want and automatically this will be
127:10 - changing right so that's the whole idea
127:12 - and after this there is one more slash I
127:14 - need to give it means that if I'm
127:16 - concatenating my this particular path
127:19 - with any kind of files that we are
127:20 - generating of visualizations I'll be
127:23 - simply concatenating it on top of this
127:25 - base directory so in order to connect
127:27 - them we need a slash just like how you
127:29 - can see there is a slash over here right
127:31 - whatever session storage you are seeing
127:33 - of collab over here is referred to this
127:35 - kind of content that you are seeing then
127:37 - inside this space you are having this
127:39 - specific folder that you are trying to
127:41 - extract over here and that's why because
127:44 - this folder is existing in this space
127:46 - you are giving this slash over here and
127:48 - now then you are giving this kind of
127:49 - star plots and then to store any kind of
127:52 - data within this directory right then
127:55 - you are giving this kind of a slash
127:56 - again and now once you will concate it
127:58 - with let's say uh
128:00 - example.png some file that you have
128:02 - created so you just need to concatenate
128:05 - this name of the file that you have
128:07 - created and attach it with the base
128:10 - directory that's it and your path of
128:13 - that new visualizations that you will be
128:15 - creating uh will be stored over here and
128:17 - the image will be generated over here
128:19 - right so that's the whole idea that we
128:21 - are having uh as in why we are having
128:23 - this base directory over here okay if
128:25 - it's not making any kind of sense as of
128:27 - now don't worry as you'll be going ahead
128:29 - in this particular module you will be
128:31 - getting a lot of ideas with respect to
128:32 - what is the need of this particular base
128:35 - directory all right now in the next
128:37 - video we're going to go ahead and
128:39 - visualize the count of stars for each
128:41 - type of star like you know we are having
128:43 - varieties of star so we are going to
128:45 - visualize what are the different counts
128:48 - in in what quantity are this kind of
128:50 - stars present right so stay tuned for
128:52 - that I'll see you in the next
128:54 - video hey guys welcome to the sixth
128:57 - video of module 2 and here you're going
128:59 - to create your first visualization for
129:01 - this data on Stars so you're going to
129:04 - create your bar graph and it will be
129:06 - very basic visualization that we'll be
129:07 - having with the help of map. library and
129:10 - in the upcoming videos you are also
129:12 - going to customize it and look at just
129:15 - amazing okay so for now let's create at
129:18 - least basic version of the bar graph
129:20 - that's going to give us some of the
129:21 - information about the data set so let's
129:23 - get into
129:25 - it now let's go ahead and create our
129:28 - first visualization that is in order to
129:31 - see that out of 240 stars that are
129:33 - available in our data set how many of
129:35 - them belong to brown dwarf how many of
129:37 - them belongs to redw so on and so forth
129:40 - for all the kind of different categories
129:42 - that are present in our star type column
129:45 - okay so what you will have to do is
129:47 - first of all you will will have to fetch
129:49 - this kind of a account with the help of
129:51 - pendas data frame and then you can on
129:54 - top of that use this functionality of M
129:56 - plotti in order to visualize it so what
129:59 - we are doing first of all I'm just going
130:00 - to copy the name of this column so that
130:02 - we can extract all of this data that is
130:05 - present within this column of the data
130:07 - frame and how I can do it I can come
130:09 - back to that particular code cell over
130:12 - here and I can simply type stard DF to
130:15 - access the data frame and now to access
130:17 - any specific column of the data frame
130:19 - you need to pass in this square brackets
130:22 - and then I paste the name of that
130:24 - particular column but now in the format
130:26 - of strings okay and now if I just run
130:30 - this over here you can see that there
130:32 - are different star types of category
130:34 - zero all the way up to five right as you
130:36 - can see over here zero stands for br W
130:39 - five stands for hyper Giants and
130:40 - everything within that is going to be
130:42 - stored into this particular column now
130:45 - if I want to get this kind of a count
130:48 - that how many zeros are present how many
130:50 - ones are present so on and so forth I
130:52 - have a particular command for that that
130:54 - exists in the pandas data frame I need
130:59 - to go and type Valore counts with this
131:03 - parenthesis so what what's happening
131:06 - it's giving us all these kind of counts
131:08 - that there are 40 zeros that are present
131:10 - or I should say 40 Brown Wes present
131:14 - then 40 red veres present similarly like
131:17 - that all of this are as you can see is
131:19 - 40 40 40 so out of 2 40 stars in total
131:23 - 40 of them are for each and every
131:25 - category that you are seeing over here
131:27 - 40 main sequence stars super giant stars
131:29 - all of this are having 40 40 type of
131:33 - count of stars out of 240 so now if you
131:36 - want to visualize this kind of a data in
131:38 - let's say format of bar plot or bar
131:41 - chart whatever you want to call what you
131:42 - can do is you can simply come over here
131:45 - and use this functionality of plot over
131:47 - here on top of whatever you have got and
131:50 - then give this kind of input as what
131:52 - kind of plot you want do you want a bar
131:54 - plot so you give this kind of input as
131:56 - kind and set it to bar that hey go ahead
132:00 - take this kind of data that that's what
132:01 - you can see and create a bar plot out of
132:03 - it and now in order to visualize this I
132:06 - can simply have PLT Dosh show I'm using
132:09 - the M PL Li functionality to display the
132:11 - graph that I will be creating over here
132:14 - okay and now if I can run this code you
132:17 - can see that this is the output that we
132:18 - have got okay it's a very plain output
132:21 - we haven't customized it that is the
132:23 - goal of the next video that is like you
132:25 - know we're going to customize the above
132:26 - plot and then finally save it right now
132:29 - this is the very basic graph that I have
132:31 - created that is indicating that okay now
132:33 - for different categories here are the
132:35 - respective counts that you can see it's
132:37 - a perfectly balanced data for us and
132:40 - yeah now in the next video you will be
132:42 - seeing how we can customize this plot
132:44 - and make it look very very beautiful as
132:46 - compared to what you are seeing right
132:47 - now
132:48 - hi students welcome to the sth video of
132:51 - module 2 here we going to take the graph
132:54 - that we have created in our previous
132:55 - video we going to customize it we are
132:57 - going to make it look much more
132:59 - beautiful as compared to what it was in
133:01 - our previous video and then once we are
133:03 - satisfied with the output we are also
133:05 - going to save it in that directory that
133:07 - we had created earlier in the fifth
133:09 - video of this module so let's get
133:12 - started all right guys so get ready to
133:15 - see the whole different magic we are
133:17 - going to take this kind of basic default
133:19 - looking graph and beautify it by using
133:22 - this kind of customizations that I have
133:23 - written down I'm going to take this
133:26 - basic graph and convert it into
133:27 - something really very beautiful okay so
133:30 - let's go ahead and try to do it together
133:32 - so first of all I'll need this kind of
133:33 - basic graph on top of which we are going
133:36 - to build everything so I'm just going to
133:37 - copy paste this code and run
133:41 - this so yeah here we are having the same
133:43 - kind of graph the first thing that I'm
133:44 - going to do is I'm going to adjust the
133:47 - size of the figure according to my
133:48 - convenience okay so let's say some of
133:51 - you might like a bigger size of this
133:53 - figure I would personally go for a
133:54 - smaller size so how can I adjust the
133:57 - size of this figure I can do this with
133:59 - the help of a PLT command and what kind
134:02 - of command I need to use I need to use
134:03 - the command called Figure now this is
134:05 - going to give me the axis of this whole
134:08 - figure on which we are having this AIS
134:10 - on which we are having this graph okay
134:13 - so we are having one whole figure in
134:15 - that figure there is one AIS that this
134:17 - kind of square that you are seeing and
134:19 - now on that axis we are drawing this bar
134:21 - graph so what I'm doing is I'm trying to
134:23 - get the access to this figure and now
134:26 - inside this figure there is an option
134:28 - called as figure size that is fix size
134:30 - fig SI i z now over here you can give
134:34 - how much amount of uh width and height
134:36 - you want to give to this particular uh
134:39 - graph or plot whatever you want to call
134:41 - let's I'm changing this to 5 comma 5 and
134:44 - see how it looks
134:46 - like so yeah that's the the kind of
134:48 - output that I'm having I guess I would
134:49 - still like to decrease some of the size
134:51 - let's say I'm doing something like 4.3
134:56 - 4.3 hopefully this is fine this time
134:59 - yeah this is looking a much more better
135:01 - okay for some of you you might like uh
135:04 - very huge graph you might try to
135:05 - increase the figure size in that case
135:07 - but I guess for me uh it's convenient
135:10 - for me to use this particular figure
135:11 - size so we are done with the first
135:13 - customization we are trying to adjust
135:15 - the figure size that's SU able to right
135:18 - we are done with this part now the
135:20 - second part is to add the value of the
135:22 - counts on top of the bars it simply
135:25 - means that for each and every category
135:28 - okay at times what can happen that some
135:30 - of the bar the count is less let's say
135:32 - somewhere in between 20 to 25 now if I
135:35 - want my readers to exactly know the
135:37 - count for this particular bar so we can
135:40 - add the count on top of this kind of bar
135:43 - and that's exactly what I'm going to do
135:45 - in this particular case it could be like
135:47 - you know our users or our readers might
135:49 - be confused that like you know if this
135:50 - bar is exactly at 40 or 39 or 41 what
135:54 - whatever it is right so this kind of
135:56 - skills is necessary for you to have that
135:59 - whenever you're drawing a bar chart if
136:00 - you want to show this label on top of
136:03 - this bar you can what you can do is
136:05 - first of all see we were having this
136:06 - kind of figure inside figure we are
136:08 - having this AIS on which we are drawing
136:11 - this bar graph right so I'm going to
136:13 - label this AIS because I want to use
136:15 - some of the properties of this exis
136:18 - and that is I want to set bar labels I
136:21 - can do it with this command ax. bar
136:24 - label what I'm doing on this axis where
136:27 - I'm drawing this kind of bar
136:28 - gra I'm getting its property called bar
136:31 - label and now there is something which
136:35 - we give an input called
136:37 - containers
136:40 - containers con what is the spelling
136:42 - containers right and now I'm going to
136:46 - access the values of each and every bar
136:48 - by using this zero index and now if I
136:51 - run this
136:52 - code see now we are having this kind of
136:54 - 40 40 count right it will be really very
136:57 - useful the moment let's say any kind of
136:59 - bar count is like you know somewh
137:01 - somewhere it's at 40 somewhere it is
137:03 - 35ish 30ish somewhere in between it's
137:06 - going to be very much useful also you'll
137:08 - be seeing this in the second
137:09 - visualization that we'll be creating
137:11 - where the level of bar are not equal
137:13 - okay but yeah that's how you basically
137:15 - do this particular thing after this
137:17 - let's say I also want to change the
137:19 - color of this I'm not satisfied with
137:20 - this kind of black color I can simply
137:23 - change the color by giving the input
137:26 - argument of bar label as color and set
137:30 - it to let's say for example
137:33 - red see now it's much more better right
137:36 - we decreased the size of the figure then
137:39 - we took the AIS on which we were having
137:41 - the bar graph we took the labels of each
137:44 - and every bar with the help of ax.
137:46 - container Z Z and simply displayed it
137:49 - with the help of this functionality of
137:50 - this axis that is barcor
137:52 - lead so that's what we have done so far
137:56 - the next thing is to set the background
137:58 - to dark now it's again your choice okay
138:00 - if you think you like darker backgrounds
138:02 - then you go for the darker backgrounds
138:04 - or else you can stay with this kind of
138:06 - lighter versions also whatever is
138:08 - suiting you the best right I personally
138:11 - like the darker background so what I'm
138:12 - going to do is I'm going to use this PLT
138:16 - do style.
138:18 - okay this is the command through which
138:19 - you can set a particular background
138:22 - there are again multiple backgrounds
138:24 - that you can choose the one that I'm
138:25 - going to choose is called Dark
138:27 - underscore
138:28 - baground okay and now if I run this okay
138:32 - there is some kind of an error the error
138:34 - is saying that dark backgrounds is not
138:35 - available I guess I've done some kind of
138:37 - a typo it should be dark background and
138:40 - see now this is the output now it's
138:42 - looking something weird right I cannot
138:44 - say the x is Mark what I can do is I can
138:46 - simply run it again because that's the
138:49 - like you know this kind of issue is
138:50 - there with Google collab that if you are
138:51 - changing the style okay then you will
138:54 - have to run it twice so yeah that's how
138:56 - it's looking like right now
138:58 - automatically this color of this AIS has
139:00 - changed from black to white that's the
139:02 - property of darkcore background right
139:06 - now if I want to change this to default
139:07 - I can also use this kind of default
139:11 - style and maybe I'll have to run it
139:13 - twice to make it look better see I'll
139:14 - have to run it
139:16 - twice
139:18 - so hopefully we're getting back from
139:20 - where we started see yeah that's how
139:21 - it's looking like right so what I'm
139:23 - going to do is I I'm personally a fan of
139:25 - dark background so I'll be changing this
139:27 - to dark
139:28 - background now at the same time what
139:30 - I'll be doing is I'll also be changing
139:33 - the color of each and every bar so right
139:36 - now it's a plain Canan kind of looking
139:38 - bar right I'm going to change each and
139:40 - every color for this bar okay for this
139:44 - what I can do is I can simply come onto
139:47 - this particular graph and uh give one
139:50 - more input instead of uh just having
139:53 - just kind is equal to
139:55 - bar I give color property and now I just
139:58 - have don't have only one bar to change
140:01 - the color for example if I change this
140:02 - to let's say brown see what
140:05 - happens it's changing all of them to
140:08 - brown right I don't want this I want to
140:10 - create a list for each and every color
140:13 - that I'll be giving to this bars so
140:15 - let's say I'm choosing let's say brown
140:17 - red red white right all these kind of
140:18 - colors are coming into my mind what I'm
140:20 - going to do is I'm going to create a
140:23 - list okay I'm going to store all of this
140:25 - colors in the format of list let's say
140:27 - first is
140:29 - brown right then the second one is red
140:33 - then I'm giving white you can choose
140:35 - this colors the way you want then let's
140:37 - say uh
140:40 - yellow and some kind of different colors
140:42 - that's that's existing in the mat. li.
140:45 - PIP blot let's say there is light blue
140:50 - and maybe uh the last one I would choose
140:52 - as
140:55 - orange okay so I guess we are done 1 2 3
140:58 - 4 5 6 1 2 3 4 5 6 so I guess this should
141:03 - work let's see yeah see now we are
141:05 - having multiple colors in the bars right
141:09 - brown red white yellow light blue and
141:12 - orange so yeah that's how you can change
141:14 - the colors of each and every bar right I
141:17 - hope this is making sense to you now
141:20 - after this let's say I want to describe
141:22 - that what is this plot giving us like
141:24 - you know what kind of title we want to
141:26 - add to this plot so for this what I can
141:28 - do is I can give this command pl. title
141:31 - and set any kind of title that I want
141:34 - for example I can give let's say a
141:36 - visualize star count per star type right
141:41 - visualize star
141:43 - count per star type and also I can give
141:48 - a color to it for let's say by default
141:50 - what is the color that we
141:52 - get so this is the kind of output that
141:54 - we're getting we can also set this whole
141:57 - font to let's say bold okay I can also
141:59 - change the color of it let's try to do
142:02 - this kind of things you can also change
142:03 - the font size you can try to decrease
142:05 - the size increase the size whatever
142:07 - suits you the best let's say the first
142:09 - input that I'm giving is the color and
142:12 - I'm choosing the color as royal blue
142:15 - okay how do I know this kind of things
142:17 - exist how do I know this dark background
142:19 - exist how do I know this kind of colors
142:21 - exist right because I've gone through
142:23 - the documentation of each and every
142:24 - command you can simply go to its
142:27 - official documentation by searching on
142:28 - Google I can simply copy this command go
142:31 - to Google and search for it off official
142:33 - documentation and you can get all these
142:36 - kind of things or nowadays you're also
142:37 - having access to chat gpts right so you
142:39 - go to chat GPT and ask for what kind of
142:42 - different styles I can use in this pl.
142:44 - style. use it's going to give you
142:46 - multiple different suggestions right so
142:49 - I'm going to set this color to Royal
142:51 - Blue I'm also going to change the weight
142:54 - of this font to
142:57 - bold and I guess uh F phont size is
143:00 - looking good to
143:01 - me I'm going to run
143:04 - this I guess this is looking pretty much
143:07 - good right so we are done by setting a
143:10 - title now I'm also going to add a y
143:13 - label and also change the color of this
143:16 - y takes this kind of things are called y
143:18 - takes this is called as X takes so first
143:21 - of all what I'm going to do is I'm going
143:23 - to add my y
143:25 - label I'm going to do this with the help
143:27 - of PLT doy label and give some kind of
143:31 - name like you know whatever this is
143:32 - describing for example let's say number
143:34 - of stars count of stars right I can give
143:37 - a hashtag for that that is representing
143:39 - number of something so number of
143:42 - stars right and I'm also going to set a
143:45 - color to this let's say I am I am
143:47 - choosing a color called
143:52 - pink okay let's see how the output looks
143:55 - like see this is the kind of pink color
143:57 - that I've got but now the font size is
143:59 - pretty much small I want to increase the
144:01 - font size how I can do this I can give
144:04 - the input parameter called font size
144:05 - itself that's the name of the parameter
144:08 - and change this parameter size to let's
144:10 - say 13 let's see how it looks
144:13 - like I guess this is better but now it's
144:16 - like you know even much more as compared
144:18 - to this so maybe I would like to
144:20 - decrease to 11 and see how it looks
144:23 - like I guess yeah this is better this is
144:25 - much more better now how I can take this
144:29 - y Tak and change its color to let's say
144:31 - some different kind of pink let's say
144:33 - tab pink this is the color that I want
144:36 - okay so let's go ahead and try to do
144:38 - this I can get access to this y TI by
144:41 - again using PLT and use white white TI
144:45 - okay now I'm going to set color
144:48 - parameter to this as let's say tabular
144:51 - pink again T pink is one of the color
144:54 - that is available in M.L so I guess yeah
144:57 - this is looking much much more good
144:59 - right obviously you can play with this
145:01 - kind of colors the way you want I guess
145:03 - I am comfortable with what I'm having
145:05 - right now maybe I can try to change this
145:07 - um color to let's say white not
145:11 - pink obviously you take this thing
145:14 - change it the way you want yeah I guess
145:16 - yeah this is much more
145:17 - great now one more thing that I would
145:20 - like to do is I would like to replace
145:22 - all the X sticks from 0 1 2 3 4 five to
145:26 - its respective names that are shown over
145:29 - here so what I'm going to do is I'm
145:30 - going to Simply copy these
145:32 - things and come over here and paste
145:36 - it it over here and then this is in the
145:39 - same order that I want to right so I'm
145:41 - just going to delete this part I don't
145:44 - want this kind of
145:45 - part
145:48 - okay and I also want to uh arrange this
145:50 - into a proper kind of way through which
145:53 - I can change the X scks all the 0 1 2 3
145:57 - 4 5 uh that we are having over here
145:59 - right 0 1 2 3 4 5 I want this to be
146:02 - changed to the labels that I want in
146:05 - place of this 0 to 1 two 5 okay so what
146:07 - I can do is because I want to change
146:10 - this XT I can give this PLT do
146:14 - xti and now what kind of things I want
146:17 - to change so these are called the ticks
146:19 - that are present inside X ticks so I can
146:22 - give it as a part of list it is 0 to
146:24 - five right so 0 1 2 3 four and five now
146:30 - I want to get replace this t with the
146:34 - labels okay the first input is Tes the
146:37 - second input is labels right and now I'm
146:39 - going to give again a list of all of
146:41 - these things that we have written over
146:43 - here okay let's say brown dwarf is the
146:45 - first thing I'm going to give it in the
146:47 - format of
146:49 - string and then I'm going to do it for
146:52 - Red
146:54 - Bar r
146:58 - w after that we are having white
147:01 - barve and then main
147:05 - sequence main
147:08 - sequence after that we are having super
147:10 - Giants and Hyper joints super joints and
147:15 - Hyper joints
147:18 - okay so I guess this is good let me just
147:20 - try to run this and see okay I guess we
147:22 - have to dedit this we don't need that
147:24 - thing
147:25 - anymore and now if I run this hopefully
147:27 - it's
147:29 - changing yeah see now this is what I am
147:31 - getting Brown bar red bar but I don't
147:33 - want this kind of things okay I want to
147:35 - rotate this things let's say some some
147:38 - degrees and I also want Brown to be in
147:40 - the first line dwarf to be in the second
147:42 - line righted to be in the first line
147:44 - white I mean dwarf in the second like
147:47 - that right so what I can do is I can
147:50 - give a new line character between this
147:52 - brown and valve similarly for red and
147:55 - wve
147:57 - right similarly for this main sequence
148:00 - and then there is only one one word so I
148:02 - don't need to convert them but now what
148:04 - I can do is I can just bring this down
148:06 - so that it's visible to
148:08 - everyone and then I'm going to give one
148:10 - more parameter called rotation I can
148:13 - give let's say 10° of rotation let's see
148:15 - how it looks like
148:19 - it's it's a bit cluttered right so what
148:21 - I can do is I can maybe try to uh rotate
148:25 - it to let's say 45 deges or something
148:27 - let's see how it looks like right after
148:29 - changing this to 45 I guess 45 is going
148:32 - to look
148:37 - good yeah this is looking much better
148:40 - right I guess yeah this is much more
148:41 - better now let's say I want to change
148:44 - the color of this as well I can again
148:46 - give the property of color to this XT
148:49 - and change this color to let's say
148:51 - maybe
148:54 - line let's see how it looks like this is
148:57 - looking good
148:58 - right so yeah that's what we are having
149:01 - that's that's what we are going to get
149:04 - by replacing the ticks of x from 0 to 5
149:08 - and giving it its respective label that
149:10 - is brown dwarf red DF white dwarf so on
149:13 - and so forth so yeah that's what we have
149:15 - done over here and after this we are
149:18 - going to save this particular plot in
149:20 - the base directory that we had created I
149:23 - want to store it within this thing so
149:25 - now how can I do this right I guess the
149:28 - plot that we have created is far more
149:30 - beautiful as compared to what we had
149:32 - seen over here right I can maybe uh try
149:35 - to again change this to Super in the
149:37 - first line then Giants in the second
149:38 - line I could have done that but I guess
149:40 - this is fine now in order to save this
149:43 - thing what I can do is I can simply come
149:46 - over here here and give this command PLT
149:49 - do save fig now what is this thing going
149:51 - to do it's going to allow us to give the
149:54 - path where I want to save this figure so
149:57 - the first thing is I want to give the
149:59 - base directory right the base directory
150:02 - is the directory that we have created
150:04 - for this starcore plots now if you
150:07 - remember this base directory wherever we
150:09 - have created we have given the slash so
150:12 - I just need to concatenate the name that
150:14 - I want to give to this plot
150:17 - let's say uh we are giving this
150:19 - name in order to Conca it we can use the
150:22 - plus operator and then let's say give
150:24 - this as barplot star count something
150:27 - like that
150:29 - barplot star
150:31 - count. PNG you can also save it as JPEG
150:34 - if you want but yeah let me just go
150:35 - ahead and try to do
150:37 - this and hopefully we are getting this
150:40 - output over here if I yeah see that's
150:42 - there if I double click on this or here
150:46 - we can see that this is the kind of
150:47 - output that we have got right now I'm
150:50 - simply going to close it and uh close
150:53 - this
150:54 - also and yeah we are done with this
150:56 - first plot okay this is the first plot
150:58 - that we have saved after creating it
151:01 - after beautifying it that's what we have
151:03 - done now in the second upcoming video
151:06 - what I'll be doing is I'll be creating
151:08 - one more visualization it would be a bar
151:10 - graph only but with the help of cbor and
151:13 - now see that with the help of cbor how
151:15 - we can do the same kind of
151:17 - and that is much more convenient as
151:19 - compared to using mat plot L all of this
151:22 - reasoning will be getting clear once you
151:23 - look into the second video or the
151:25 - upcoming
151:27 - video hey everyone welcome to the eighth
151:30 - video of module 2 and here we are going
151:32 - to visualize some different part of the
151:34 - data set again in the format of a bar
151:36 - graph but we'll be creating it with the
151:38 - help of cbond library and you're going
151:41 - to see that how easier it is in order to
151:44 - create some amazing bar graph with the
151:46 - help of c bond as compared to met plot
151:48 - La so let's get
151:51 - started now what we're going to do is
151:53 - we're going to go to the top part to
151:55 - that uh data frame that we had created
151:58 - and take a look onto the star color we
152:01 - are again going to create a bar graph
152:03 - but now with the help of cbor you will
152:05 - see the power of cbor that with just one
152:07 - line of code you are able to achieve
152:10 - something like this color for different
152:12 - bars and all of these kind of things you
152:15 - will see that so so now what I'm doing
152:17 - is first of all I'm trying to visualize
152:20 - the star color count that is present for
152:23 - each and every color so for this what
152:25 - I'll have to do I'll have to go to Star
152:28 - DF inside that star DF there is a column
152:31 - called a star color I should give it
152:33 - with the help of strings and then I can
152:35 - check the value
152:36 - counts with
152:39 - this so as you can see that there are
152:41 - red stars the count is 116 for blue it's
152:44 - 56 for blue white it's 41 by default
152:47 - it's coming into the descending format
152:50 - starting from the highest and going to
152:52 - the lowest and now if I want to get
152:54 - access to this values this red blue and
152:57 - all these kind of things now this is
153:00 - present in the position of index so I
153:03 - can take this command on top of this
153:05 - command I want to grab its index so I'm
153:07 - going to give this command do
153:09 - index so here is the whole index red
153:12 - blue blue white and all of these things
153:15 - so now what I want to do is on the xaxis
153:17 - I want to plot this colors that are this
153:19 - index and on the y- axis I want to get
153:23 - this particular uh values okay if I grab
153:27 - the first value that is present over
153:29 - here it will be 116 see it's 116 now if
153:32 - I want to grab the value present on the
153:34 - first index it will be the second value
153:36 - 56 right so I want to plot this data on
153:38 - my y- Axis and I want to plot this
153:41 - colors on the x-axis so what I can do
153:44 - is I can use use uh SNS do barplot I'm
153:50 - trying to create a barplot with the help
153:51 - of cbond library on the x value on the x
153:56 - value I am giving this whole thing with
153:58 - index do index that's the color name and
154:02 - on Y what I want to see I want to see
154:04 - the value counts so I'm going to copy
154:07 - this
154:08 - part I'm going to copy this much part
154:12 - and save it in y and let's just try to
154:15 - run this and see how the out looks like
154:17 - see this is the kind of output if I
154:19 - don't want to have this kind of extra
154:21 - labeling that is there on top of the
154:23 - graph I'll have to use the command PLT
154:25 - do show I'm trying to use both met
154:27 - plotly and cbond to come up with one
154:30 - final
154:32 - output so by using this PLT do show this
154:34 - AIS will be going away so yeah this is
154:37 - the kind of graph that we are having see
154:39 - now again we can have any more
154:41 - customization see by default it's not
154:43 - coming out as a white background right
154:46 - now because we have already changed it
154:49 - once you change it it will be like this
154:50 - okay it will not going back to white
154:53 - color you will have to go and switch
154:55 - this style do Ed to default in order to
154:58 - have this kind of white background but I
154:59 - guess black black background is quite
155:02 - comfortable but now you can see that I
155:04 - don't even have to set this kind of
155:05 - colors manually it's coming
155:07 - automatically without myself doing
155:10 - anything over here now what I can do is
155:12 - I can just uh come over here and give
155:14 - one more thing that is called pallet I
155:17 - hope I have given the correct spelling
155:19 - again there are multiple pallets that
155:20 - are available this uh vies is my
155:23 - favorite one so this is looking much
155:25 - more beautiful right so yeah that's
155:27 - that's about it now I can again go ahead
155:29 - and customize it the way I want right I
155:31 - can change this uh color for this Y axis
155:34 - I can change this colors of the T and
155:36 - everything I can do this right so what
155:38 - I'll be doing is I'll simply be going
155:40 - ahead and doing this kind of
155:42 - visualizations okay I guess the figure
155:44 - size is looking pretty much good I'll be
155:46 - changing the tix of the x-axis pl. X
155:51 - TI give a rotation I guess of 15° or 10°
155:56 - 15 I guess let's try 15 and I'll give
155:58 - the color as
156:00 - orange and see how it's looking like
156:03 - this is good now what about star color
156:06 - I'm going
156:07 - to take the Y label see it's coming by
156:10 - default I didn't even give this thing
156:11 - it's coming by default it's all because
156:14 - c bond is is built on top of met plot by
156:17 - default within this bar plot they are
156:20 - giving this kind of Y label that is the
156:22 - title of the column that's what they're
156:24 - giving by default I didn't even set it
156:26 - and if I want to change its color I can
156:28 - use PLT do let's say y label and give
156:31 - some kind of color let's say white can
156:33 - also change the font size to let's say
156:36 - 13 let's see how it looks like it's
156:40 - giving me some kind of an error y y
156:42 - label okay y label is missing some kind
156:47 - of an
156:49 - argument okay maybe we are trying to oh
156:52 - yeah we are missing the Y label we need
156:53 - to give this kind of uh command that is
156:57 - star color okay we'll have to give this
157:00 - if you want to change this y label you
157:02 - will have to give this kind of name only
157:04 - then it will be working fine see yeah
157:06 - now it's working fine right so yeah I
157:09 - given this kind of things I can also
157:10 - change the colors of the whex if I want
157:13 - PLT do
157:14 - whex
157:16 - this uh color is equal to tab pink this
157:21 - is my favorite one for the y- axis
157:23 - that's what I use frequently so yeah I
157:25 - can also have the title of this plot
157:28 - that we have
157:30 - visualizing pl. title we try to
157:33 - basically give title on the top because
157:34 - we know like you know this is the kind
157:36 - of order first we give first we draw the
157:38 - plot after drawing the plot we give the
157:41 - title this kind of order is not
157:43 - something that you need to follow TI T
157:47 - right now
157:51 - visualizing the
157:54 - count of star
157:56 - colors something like this maybe color
157:59 - is equal to Royal
158:01 - Blue for title again I prefer this if
158:04 - I'm having the dark background and font
158:06 - size let's say I'm setting it to
158:10 - 15 two more than what I am having for
158:13 - this I can also set this to
158:18 - weight equal to bold I can also uh for
158:22 - the X uh T I can try to change the font
158:25 - size if I'm able to do this I can take
158:28 - this write font
158:30 - size change this to let's say 11
158:33 - hopefully it
158:34 - changes yeah it's changing right so I
158:36 - guess this is pretty much great now I
158:38 - can also add like you know this kind of
158:41 - containers to this bar and the same way
158:44 - I'll be doing I'll be changing this to
158:46 - a because I'm trying to get AIS of the
158:50 - AIS right and then I'll be doing ax. bar
158:54 - label and then ax.
158:58 - containers zero and then maybe I can
159:01 - give a color of red and I can also maybe
159:04 - change the weight of this thing to bold
159:08 - and see how it's looking
159:13 - like first of all the main thing I
159:15 - really wanted to show you is that by
159:17 - doing this just one line of code it's
159:20 - giving us the Y label it's giving us
159:22 - everything even different colors of the
159:24 - bar with the help of pallet right so all
159:27 - of these kind of things we are doing it
159:29 - in just one line so that's the power of
159:31 - like you know using C Bor it's built on
159:34 - top of matte BL Li so it's it's just
159:35 - easy to customize it the way you want as
159:38 - you can see that star color was already
159:40 - existing even before giving this y leg
159:43 - but now if I want to change some of its
159:44 - property I can do it it because cbon is
159:47 - built on top of
159:48 - Med so yeah that's that's about like you
159:51 - know how you can visualize a different
159:53 - kind of bar plots and now in the next
159:55 - video let's try to visualize something
159:59 - else hey everyone welcome to the ninth
160:02 - video of module 2 where you will be
160:04 - visualizing the outliers present in our
160:06 - data set and one of the ways through
160:09 - which we can do this is by creating the
160:11 - box plot on all of these kind of
160:13 - features that we are having in the data
160:14 - set and we are going to visualize them
160:17 - side by side with the help of a subplot
160:19 - so what is subplot and everything will
160:21 - be covered in this particular video so
160:23 - let's get into
160:25 - it now let's go ahead and try to create
160:28 - some different type of visualization
160:30 - apart from the bar plot now what we are
160:32 - going to do is called box plot now it's
160:34 - typically used to visualize the outliers
160:37 - that might be present in any of your
160:39 - numerical feature so the main idea
160:41 - behind box blots is that like you know
160:43 - you're are going to have this kind of
160:44 - variation of numeric feature in front of
160:47 - you it's going to give you the idea of
160:48 - the median it's going to give you the
160:50 - idea of the upper quartile lower
160:52 - quartile and also the outliers right and
160:55 - for the outliers visualization we
160:57 - typically use the box plots and finally
160:59 - just save it into this particular folder
161:01 - that we have created and I guess we did
161:04 - not save this particular code so let's
161:07 - go ahead and try to save this figure
161:09 - save fig and the name that I'm going to
161:12 - give you not give you but yeah give this
161:15 - particular graph is base directory plus
161:18 - let's say visualize or just start
161:22 - star colors star
161:26 - Colors
161:29 - v.png Let's go ahead and also try to
161:31 - cross check if it is
161:33 - done yeah it's done I'm going to see it
161:37 - so yeah that's the beautiful plot that
161:39 - we have created and saved right anyways
161:42 - yeah we are also going to save this kind
161:44 - of box plots that will be be generating
161:46 - all right so that's the whole idea that
161:47 - we're going to look into so now what I
161:49 - have done is I already created one this
161:52 - kind of get a gist of data by checking
161:54 - the first five rows of the data so over
161:58 - here we can see that temperature
162:00 - Luminosity radius and absolute magnitude
162:03 - are what are your numeric features all
162:05 - of the last three features are your
162:07 - categorical feature it's some kind of
162:09 - categories now we use box blots to
162:11 - visualize this kind of numeric features
162:13 - so now what I'm going to do is with
162:16 - respect to all the star typee that is 0
162:18 - to five for all the star types what is
162:21 - the variation of temperature what is the
162:23 - median what is the interqual range what
162:25 - is the outlier if at all they are
162:26 - present in any of the star type category
162:29 - with respect to the temperature I am
162:31 - also going to do this for Luminosity
162:33 - radius and absolute magnitude so I'm
162:36 - going to create multiple plots for all
162:39 - these numeric features with respect to
162:41 - Star type you can also do this for Star
162:43 - colors and also the spectral classes
162:45 - it's your choice right now I'm going to
162:47 - show you any one visualization and I'm
162:49 - going to do it with respect to the star
162:50 - type that if my let's say my star type
162:52 - is um white dwarf so for with respect to
162:56 - white dwarf what is the variation of
162:58 - data for radius what is the variation of
163:00 - data for Luminosity this is the kind of
163:02 - thing that I'm going to generate so what
163:05 - I'm going to do I'm going to come over
163:07 - here and uh get this boxplot with the
163:09 - help of SNS do
163:13 - boxplot it requires what want to display
163:16 - on xaxis what you want to display on y-
163:18 - axis and lastly I'll be also showing
163:20 - this pl. show and on X what I want to
163:24 - show is the star type right and on the
163:28 - y- axis let's say I'm giving for example
163:30 - only one thing as of now that is
163:32 - temperature so SNS dobox plot on X what
163:36 - am I giving star DF star
163:40 - type and on by what I want is start de
163:46 - uh it is temperature right I'm just
163:48 - going to copy the whole thing but a
163:50 - better way would be to not copy this
163:53 - instead use iog feature it's giving you
163:57 - the location on the basis of index now
164:01 - it takes two things in the input the
164:03 - rows and the column I want to plot all
164:06 - the rows and the First Column that is
164:09 - present in the stard D okay all the rows
164:12 - of the First Column now First Column is
164:14 - present on index zero right so I can get
164:18 - it use with the help of this zero okay
164:20 - remember this kind of column that we
164:22 - have given over here that column is
164:24 - giving you this idea that everything
164:26 - everything that is present in rows you
164:29 - grab that part but now only for index
164:32 - zero column so now if I go ahead and
164:34 - visualize
164:36 - this let's see what kind of output do we
164:41 - get see this is the kind of output that
164:43 - has been generated I have got 0 1 2 3 4
164:47 - 5 all the different star types which are
164:49 - corresponding to this kind of names and
164:51 - now if you see there are no much of
164:53 - outliers except this zero right this
164:56 - kind of diamond this diamond is
164:58 - basically highlighting the presence of
165:00 - outlier for the class zero and if we are
165:03 - talking with respect to only one numeric
165:05 - feature that is temperature now what I
165:08 - want to do is I want to generate the
165:09 - same thing now in place of zero I can
165:12 - change this to one and see the output
165:15 - the output this time is for Luminosity
165:17 - see I don't have to change the column
165:19 - Name by default for by manually I don't
165:21 - have to do this thing okay it's
165:23 - happening
165:24 - automatically but now instead of
165:26 - plotting this one by one I want to plot
165:28 - it all together in one figure and then
165:30 - save it and that's where this kind of
165:32 - concept of box plot comes into the
165:34 - picture right so what we are trying to
165:36 - do over here is this is one whole
165:40 - figure now from that one figure we are
165:42 - creating six different axes
165:45 - how we are creating the six different
165:47 - AES by giving the command of PLT do
165:49 - subplot providing the values of rows and
165:52 - columns I'm giving two different rows
165:55 - and three different
165:56 - columns and then the first axis over
165:59 - here is starting from position one the
166:01 - second axis is on position two the third
166:04 - axis is on position three so on and so
166:06 - forth so that's how you can create the
166:08 - subplot and try to visualize this thing
166:12 - over here so what I can do over here is
166:14 - I can do PLT do
166:16 - subplot and give one let's say I want to
166:20 - create four different graphs in one row
166:23 - so 1 comma 4 and I want to first of all
166:26 - look into my position one and then I
166:28 - want to see how the output looks like
166:30 - let's see how it's looking like see this
166:32 - is on the first position now if I'm uh
166:34 - just trying to change this to zero and
166:37 - copy this whole
166:38 - code come down over here and just change
166:41 - this to
166:42 - one and but at the same time I'll also
166:44 - have have to change the position of this
166:46 - to
166:49 - two see now I'm having this kind of prop
166:51 - but it's very much cluttered right so to
166:54 - I'll have to manage the figure size
166:56 - accordingly and I'll also do some kind
166:58 - of uh one more command that you will see
167:01 - of M plot lip to adjust the layout that
167:05 - we are seeing right now if it's getting
167:06 - cluttered like this then we know how to
167:08 - do this I'll be showing you that okay
167:10 - but the whole idea is I want to create
167:12 - this kind of subplots but now just
167:14 - imagine if there are multiple subplots
167:15 - that I want to create it's not a very
167:18 - good thing to like manually change this
167:20 - kind of indexes so what I'm going to do
167:23 - is I'm going to create a for Loop over
167:26 - here so what I'm going to
167:29 - do I'm going to create for Loop but how
167:32 - am I going to create the for Loop right
167:33 - that's something important that you want
167:35 - to understand so in this for loop I am
167:38 - going to create four different x's on
167:41 - index 1 2 3 and four or I should say on
167:44 - position 1 2 3 and four so for I in
167:48 - range of four so it's going to go from 0
167:51 - 1 2 and 3 right and now I want to also
167:55 - give indentation indentation over here
167:59 - okay I'll remove this PLT do show
168:01 - command as of now okay and now I want to
168:04 - change the position with respect to I
168:07 - because I is starting from index 0er
168:10 - I'll add one to it so that we get 0 + 1
168:14 - is 1 because we know that subplot always
168:16 - starts from position one not from
168:18 - position zero so that's the reason I've
168:21 - done this kind of thing and now at the
168:23 - same time I'll also change this to I
168:28 - it's going to take the zeroth column
168:31 - first then the First Column then the
168:33 - second index column and then the third
168:34 - index column so that's how I'm going to
168:37 - create my uh subplots let's see how it's
168:39 - going to look
168:41 - like see that's how it's going to look
168:43 - like as of now
168:45 - right I also like to change the
168:47 - background it's not black is not looking
168:49 - good for this one so what I'll do is
168:51 - I'll first of all change this
168:53 - style to default and you know you must
168:57 - do it twice to get a proper output okay
169:01 - this is for the first time that we have
169:02 - got
169:03 - this this is for the second time and I
169:06 - guess this will be this time it's good
169:07 - it's still cluttered because we did not
169:09 - change the figure size so PLT do figure
169:13 - what kind of command we give we give fig
169:15 - size right fig size and let's say I'm
169:18 - choosing 20 by 8 20 by 8 so I'm going to
169:23 - get 20 spread and eight in terms of
169:27 - height so I guess now this is better
169:29 - right this is much more better so we are
169:32 - getting this for temperature over here
169:34 - we getting for Luminosity but still
169:36 - there are some kind of cluttering that
169:37 - that's what I can see so to adjust this
169:40 - cluttering what I can do is I can maybe
169:43 - see first of all uh
169:45 - get rid of this y label completely and
169:48 - instead of that I can have a title for
169:51 - each and every plot okay I'll be
169:53 - removing this kind of things and have a
169:56 - title on top of that that's the kind of
169:58 - thing I want to do so what I will do is
170:00 - I'll say PLT doy label and convert it to
170:04 - nothing and at the same time I'm going
170:07 - to set
170:08 - title and what is the title title is the
170:11 - column name so how do I get access to
170:14 - the column name
170:15 - so for this there is one simple code
170:17 - that is stdf do
170:20 - columns that's
170:22 - it if I run this see I'm getting access
170:24 - to each and every columns right so now
170:26 - what I'm going to do is I'm going to go
170:28 - and call these columns one by one with
170:30 - the help of itation index I so PLT do
170:35 - title star DF do columns and then I'm
170:39 - going to give an index I'm also going to
170:41 - set a color to red and now see how it
170:45 - looks
170:48 - like see now it's it's better right I
170:51 - cannot see any kind of cluttering
170:53 - anymore if you want you can also expand
170:56 - this by let's say changing this 20 to 25
170:59 - right even that's fine but I guess this
171:01 - is much more better right but now what
171:03 - is this indicating if I want to give a
171:05 - title on top of this whole subplot that
171:08 - I have done I have created I can use
171:11 - something called as
171:13 - subtitle see Su I can again get its
171:16 - access with the help of PLT see this is
171:19 - what is called subtitle now what kind of
171:21 - title am I giving I'm going to say that
171:24 - visualizing outliers in numeric features
171:27 - of star
171:28 - data so
171:30 - visualizing the
171:32 - outliers that's what I'm doing in what
171:35 - in
171:36 - numeric features of star type now after
171:40 - this what I want to
171:42 - do um I want to give color to this I
171:45 - want to give weight to this and also
171:47 - font size to it so I'll be giving color
171:51 - equals to let's say a black color let's
171:54 - say a black color is going to work well
171:56 - if not I'll be changing this I'll also
171:58 - try to change the font
172:00 - size not the phont wa to
172:04 - bold and lastly I'll be uh
172:07 - also playing with the font size is 15
172:10 - hopefully it works perfectly
172:13 - fine
172:16 - yeah this is good right maybe I can
172:18 - change this to some different color but
172:19 - I guess this white and black combination
172:21 - looks good it's pretty much simple and
172:23 - straightforward I guess I'll be going
172:25 - with this right again if you want to add
172:28 - any kind of different kind of
172:30 - visualizations according to you you can
172:32 - surely go ahead and try to change
172:34 - anything you want okay but I guess this
172:36 - is fine for me so I'll be simply going
172:37 - ahead and save this figure pl. saave fig
172:41 - and say that this is boxplot dop PNG and
172:46 - also give this box plot with respect to
172:47 - start
172:49 - time and now run this and hopefully
172:53 - we'll be getting this saved over here
172:55 - I'll refresh this okay yeah I'll refresh
172:58 - this okay see it's coming out of this
173:00 - particular directory why because I did
173:03 - not give the base directory right it's
173:05 - going by default on the session storage
173:07 - I don't want to do that so I'll delete
173:09 - this
173:10 - file come back over here and give base
173:13 - directory
173:15 - and then concatenate it with this thing
173:16 - and I I guess now it will be working
173:20 - fine so this kind of things will happen
173:22 - with you also if you're coding it's just
173:24 - that you need to minimize any kind of
173:26 - error that you might be seeing and get
173:28 - the things done the way you want right
173:30 - and now let's go ahead and visualize the
173:33 - box plots that we have created just in
173:35 - order to check everything is fine see
173:37 - yeah that's the kind of output that we
173:39 - are getting
173:41 - right so that's what we have got for the
173:43 - box plots
173:45 - and uh yeah that's pretty much about
173:47 - this particular video now in the next
173:49 - video what we are going to do is we're
173:50 - going to look into one more type of
173:52 - graph called as line graph or line chart
173:55 - so I'll see you in that particular
173:57 - video so far we have seen how we can
173:59 - create a bar graph and also the box plot
174:03 - now let's look into some different type
174:04 - of visualization which is called as line
174:06 - plot so it basically takes some of the
174:08 - data points in your data and simply
174:10 - connects them with a line okay so it's
174:13 - going to be helpful for Us in order to
174:15 - visualize some of the patterns that are
174:17 - present in all the kind of numeric
174:18 - features that we are having in our data
174:20 - set so let's get into the video and
174:23 - understand how we can get these things
174:26 - done all right so now let's assume that
174:28 - we want to create the line plots for
174:30 - each and every numeric feature so what
174:32 - we are trying to do is uh in the outlier
174:35 - what we did with respect to Star type
174:37 - what's the distribution of the
174:38 - temperature Luminosity radius and
174:41 - absolute magnitude we got this kind of
174:43 - median values for each and every classes
174:46 - and also the interqual range and all of
174:48 - this kind of outliers that we wanted to
174:50 - spot right you can surely now go ahead
174:52 - and remove this kind of outliers if you
174:54 - want but our purpose is just to create
174:55 - some visualizations and find some
174:58 - observations on top of that so from this
174:59 - box blot we can say that in the
175:01 - Luminosity we are having most of the
175:03 - outliers so you need to uh try to like
175:05 - you know remove this outliers or try to
175:07 - do something through which you can
175:09 - minimize the effects of outliers right
175:11 - but now what I'm trying to do with the
175:13 - help of my line plot
175:14 - is to connect let's say for temperature
175:16 - only okay we are not talking about
175:18 - anything else let's just focus on
175:19 - temperature I want to connect my this
175:22 - point with this point then this point
175:24 - with this point with a line and then see
175:26 - try to observe if any kind of pattern is
175:29 - being formed or not that's the kind of
175:31 - logic that I want to build now again I
175:33 - want to do this for all the kind of uh
175:35 - data that we are having that is a
175:36 - numeric type so for this numeric
175:39 - features I want to create this line
175:41 - plots again I'll be using a for loop
175:43 - with the help of of subplot but now at
175:46 - the same time I'll also be showing you
175:48 - that how you can use function in order
175:51 - for anyone who is reading your code or
175:53 - even for that matter if you are reading
175:55 - your code after some time it's much more
175:58 - readable and more convenient to your
176:00 - eyes okay it's better that we use a
176:01 - function all of this you'll be
176:03 - understanding over
176:04 - here so let's get started with this so
176:08 - what I'm trying to do over here is I'm
176:10 - trying to create a simple line plot I
176:13 - can do this with respect to PLT do plot
176:16 - okay next thing is spare plot we are
176:17 - going to do that in the next video but
176:19 - right now let's focus on this PLT do
176:22 - plot now what do I want to plot let's
176:24 - say for example I want to plot the
176:26 - temperature so star
176:29 - DF and now I can give the dot iog I want
176:33 - all the rows that is present in the
176:34 - First Column that is my temperature
176:36 - column and simply plot it let's see what
176:38 - kind of output do we get also I can do
176:41 - pl. show so that we are not getting this
176:43 - kind of output
176:44 - I can hide those outputs by using pl.
176:49 - show all right so yeah let's just wait
176:52 - for a while this is the kind of output
176:54 - see this is the kind of pattern that
176:55 - we're getting okay now it depends on
176:57 - some kind of task our job is to create
176:59 - visualizations and give some
177:01 - observations then how let's say in data
177:03 - science in machine learning how can
177:05 - people use this kind of uh observations
177:08 - and create something out of it create
177:10 - some kind of automation stuff with
177:12 - respect to machine learning deep
177:13 - learning any kind of data science
177:14 - project for that matter right so this is
177:17 - the kind of pattern that we want to get
177:19 - for each and every numeric column
177:21 - temperature radius and all of those
177:23 - right so what I'm going to do is I'm
177:26 - again going to take the help of
177:30 - subplot and now this time what I'll be
177:33 - doing I'll be having four different rows
177:36 - and one column so four comma 1 and I'll
177:39 - also be changing the index with the help
177:41 - of I I'll be again having this kind of
177:45 - for Loop for I in range of four so it's
177:48 - going to go from 0 to three I'll also
177:51 - select this thing and press tab to give
177:53 - this kind of indentation over there and
177:56 - uh yeah we have given an indent we are
177:58 - having the space everything looks good I
178:00 - need to change this zero to
178:02 - I I guess everything is going to be fine
178:05 - I need to remove this BL do show I'll
178:07 - bring out of this for Loop and see how
178:09 - it looks
178:11 - like okay this is the kind of thing it's
178:13 - looking like as of now uh I can also
178:16 - change this kind of colors for every
178:18 - graph I can give a title to this and I
178:20 - can customize it the way I want but a
178:22 - very basic graph I have in front of me
178:24 - right so I can give this kind of PLT do
178:27 - title the same way that we had done in
178:29 - our previous code that is stard DF do
178:33 - columns and then uh
178:38 - I and I can also give a color to this
178:40 - kind of title let's say red
178:45 - and at the same time I can also adjust
178:47 - the figure size PLT do figure what kind
178:51 - of figure size do I want let's try fix
178:54 - size is equal
178:55 - to 15 comma 8 let's say what what
179:03 - happens so I guess this is good right in
179:06 - terms of visualization this is looking
179:07 - good but now if I want to do one more
179:10 - magic over here with the help of subplot
179:12 - what I can do is I want to adjust the
179:15 - layout that I'm having I can use PLT do
179:17 - tight
179:18 - layout and then if I try to look it
179:21 - hopefully it's going to give us a better
179:22 - layout as compared to what we are having
179:24 - currently okay it's automatically see
179:27 - going to adjust the spaces between this
179:29 - kind of AIS that we have drawn and
179:32 - that's how it's looking now at the same
179:33 - time I also want to change the colors of
179:36 - each and every plot that we are seeing
179:38 - so for that what I can do is I can
179:40 - create a list of colors over here okay
179:43 - let's say color
179:45 - equals to now let's say because I'm
179:46 - having four different plots to uh draw I
179:50 - want to understand that what kind of
179:52 - colors I can use now again you need to
179:54 - have this kind of idea with respect to
179:56 - what kind of colors that mat plot lab is
179:58 - giving you I'll be using again some of
180:00 - my favorite colors like royal blue gold
180:03 - San green something like that okay you
180:05 - can choose your own colors royal blue
180:08 - let's say
180:10 - gold then again green is not something
180:12 - that I like I like lme okay so lime
180:15 - andan is something that I'll be having
180:17 - lme
180:19 - andan I could have also drawn
180:22 - magenda
180:24 - Nan anything that you like I'm just
180:26 - trying to give you some different kind
180:27 - of colors that are available now in
180:30 - place of this plot I'm going to give
180:32 - this kind of parameter of color is equal
180:35 - to colors of I so what it's going to do
180:38 - in every time in every iteration the
180:40 - value of I is going to start from zero
180:41 - and all the way up to three so when
180:43 - there is a okay there is some kind of an
180:46 - error automatic saving fail don't worry
180:48 - click on this show diff and click on
180:51 - Save changes and it's going to
180:52 - automatically save everything for you
180:54 - the weight should be all right yeah
180:55 - great so now what this is doing it's
180:58 - trying to get access of the royal blue
181:00 - when the value of I is zero is going to
181:03 - get the excess of gold when the value of
181:04 - I is one similarly lime when I is 2 and
181:08 - three when uh sorry and magenta when the
181:10 - I is value three okay so that's the kind
181:13 - of thing that I want and now if I try to
181:15 - see how it works let's see hopefully
181:16 - everything is good okay it's giving me
181:19 - an error what's the error
181:22 - menta okay there is a wrong
181:28 - spelling hopefully this is the correct
181:30 - spelling yeah see now how beautiful this
181:33 - plot is looking like right I can also
181:34 - give a subtitle if I want I can give it
181:37 - anywhere okay it's not compulsory I give
181:39 - it on the top I could give it anywhere
181:41 - pl. subtitle
181:46 - visualizing the
181:50 - distribution of numeric
181:55 - features something like this let's say
181:57 - I'm giving a color of
181:59 - black the same thing that we did above
182:02 - okay I like this kind of black and white
182:03 - combination if I'm choosing that then
182:05 - font size is let's say
182:08 - 15 and uh let's see if I want to give
182:11 - anything else after running this code
182:18 - yeah I also change this to bold right
182:20 - the weight of this text to
182:22 - bold weight is equal to
182:26 - bold maybe I can also try to increase
182:28 - the font size if I want okay I guess
182:32 - this is looking pretty much cool maybe I
182:34 - can try to decrease this 15 to 12 maybe
182:38 - that can be giving us a better
182:42 - visualization so yeah this is this is
182:43 - much more better right so yeah this is
182:45 - the kind of output that we have received
182:47 - this is the kind of pattern that we are
182:49 - having line by line for the temperature
182:51 - Luminosity radius and absolute magnitude
182:54 - now it's job of machine learning
182:56 - engineers and data analysts that like
182:58 - you know they find something useful from
183:00 - this and get something done for any kind
183:03 - of application they're trying to build
183:04 - right now in this program we are trying
183:06 - to focus how to develop this kind of
183:08 - visualizations and yeah that's about
183:10 - this particular thing but now let's say
183:13 - I want to convert this whole thing into
183:16 - what I want to convert this thing into a
183:20 - function now how can I do this how can I
183:23 - convert this in the format of functions
183:26 - I can simply cut this
183:28 - thing come up over here let's say I'm
183:31 - defining a function called line
183:36 - subplot it's going to take some kind of
183:38 - inputs and I'm going to paste everything
183:40 - over
183:41 - there okay see first of all I am giving
183:45 - this I so I'm going to give I at the
183:49 - same time I'm also giving my star DF
183:50 - right so I'm going to give Star DF also
183:52 - to as an input I'm also giving uh colors
183:56 - as input so let's say that I'm giving
183:57 - colors over here as input I guess all of
184:00 - this is going to work fine so I've
184:03 - defined a function that's going to give
184:04 - me a subplot it's going to give me a
184:06 - plot for different values of I from the
184:09 - iog also give me a title and I guess
184:12 - everything is going to look good
184:14 - so over here I'm going to Simply call
184:16 - line
184:17 - subplot and give the input of star DF
184:20 - then what was it colors and I the value
184:24 - of I right and hopefully we are getting
184:26 - the same output I guess there is some
184:28 - kind of a yeah spelling mistake
184:31 - subplot yeah now if I'm running this I
184:34 - hope everything is working the way we
184:35 - had got in the previous step yes it's
184:39 - just the same right let's if you want to
184:42 - have some kind of a gap between this of
184:43 - things how you can do it you can do that
184:46 - with the help of let's say a new line
184:48 - character over
184:49 - here
184:52 - okay and yeah see now you're having a
184:54 - good amount of gap between that so this
184:56 - is the kind of thing that you have done
184:58 - in this video now I'll see you in the
185:00 - next video and we'll be creating some
185:02 - kind of pair
185:05 - plots hi guys welcome to this video of
185:07 - module 2 where I'm going to teach you
185:09 - the concept of pair plot and how you can
185:12 - easily create that with the help of
185:13 - cbond Library so let's get into
185:16 - it all right guys now what we are going
185:19 - to do is we are going to learn about one
185:20 - more visualization and understand what
185:22 - kind of information we can fetch out of
185:24 - that kind of visualization and again
185:27 - save it like what we have been doing for
185:28 - the above
185:30 - plots I guess I again forgotten to save
185:34 - this anyway I'll be doing it very
185:35 - quickly I'll be giving Bas directory and
185:39 - the name let's call it as line
185:42 - subplot
185:44 - PNG okay and it's always our duty guys
185:48 - that we go ahead and always cross check
185:50 - the output over
185:52 - here okay if I just open
185:55 - this at times it might be that like you
185:57 - know it's looking very good over here
185:59 - but it's not looking good over here so
186:00 - you need to cross check before uh
186:02 - extracting all this kind of information
186:04 - all right so this looks good and again
186:07 - once again if I'm just trying to open
186:09 - this see it
186:12 - properly
186:14 - actually this is looking just incredible
186:17 - okay to be very honest this is the kind
186:20 - of power of python by writing only this
186:22 - few lines of code okay this few lines of
186:25 - code you have created some beautiful
186:28 - things right with the help of this few
186:30 - lines of code and now one more thing
186:32 - that I want you guys to pay attention to
186:34 - is that I am not giving any kind of
186:36 - comments as of now because I am
186:38 - explaining you these things while coding
186:40 - along right so what I want you to do is
186:42 - different person will be able to comment
186:44 - a particular code in a different way so
186:47 - what I'm going to do is I'm going to
186:49 - provide a code that is this whole
186:50 - notebook with the proper comments but I
186:53 - want you to go ahead and comment it by
186:55 - yourself on the basis of your
186:57 - understanding what do you understand by
186:58 - this particular line what was the
187:00 - purpose of creating uh this kind of
187:02 - function one person can simply go ahead
187:04 - and write that it's improving the
187:05 - readability of the code so it's better
187:07 - that we convert this whole kind of step
187:09 - into a function like we did not do this
187:12 - for the previous step over here we did
187:13 - not change it like this right now you
187:16 - can also go ahead and try to convert
187:17 - this into a function right it's going to
187:19 - improve the readability of this code but
187:21 - all of that things is up to you and even
187:23 - for this function you can give a very
187:25 - good description with the help of
187:26 - multi-line comments give the information
187:28 - about what this kind of function is
187:30 - doing then give the information with
187:32 - respect to the input arguments and what
187:34 - is it going to return at the end so all
187:36 - these kind of things you can mention in
187:38 - this uh multiple line comments right so
187:42 - yeah that's how how we are using all the
187:44 - kind of things that we have learned in
187:45 - our first module and implementing it
187:47 - over here isn't it just
187:49 - amazing yeah anyway coming now back to
187:52 - pair plot let's try to understand what
187:54 - is it all about okay so what is the main
187:58 - purpose of creating a par plot or was it
188:01 - it what it's going to do let's say that
188:03 - I'm going to take temperature for
188:06 - example what it's going to do par plot
188:08 - it's going to take a temperature column
188:10 - and it's going to compare with all all
188:13 - the respective other AES that with
188:15 - respect to temperature how Luminosity is
188:17 - weing with respect to temperature how
188:19 - radius is weing and all the other
188:21 - columns that we are having okay for that
188:22 - matter how temperature is weing with
188:24 - temperature even that kind of data we'll
188:25 - be getting with the help of pair plot
188:28 - and by default you are going to get this
188:29 - kind of relation in the form of scatter
188:31 - plot you are just going to get dot dot
188:33 - dot dot dot if you want you can also
188:34 - create a line plot but by default pair
188:37 - plot is going to be in the format of
188:39 - scatter plot okay all of this
188:41 - information I have written over here and
188:43 - now because you are seeing that there
188:45 - are a lot of kind of combinations that
188:47 - we are creating right temperature with
188:49 - all the kind of other columns including
188:51 - itself the Luminosity with all the other
188:53 - columns itself so there are multiple
188:55 - subplot that we'll have to get right
188:57 - multiple axis in a subplot now a good
189:00 - thing about pair plot of c bond is that
189:03 - it's going to get you rid of all this
189:05 - kind of pain of creating subplot and all
189:07 - these kind of functions and these kind
189:09 - of things that's the power of using c
189:12 - bond it's going to do it by default for
189:15 - us and we are just going to enjoy the
189:17 - output that we are getting but at the
189:19 - same time it's also having some of the
189:20 - drawback and the drawback is that if
189:24 - there are a lot of columns just imagine
189:26 - the type of like you know combinations
189:28 - that you will be getting and then you
189:29 - will be creating it into a subplot right
189:31 - and then you'll be getting a plots it
189:33 - would be a really timec consuming task
189:36 - but thankfully for our data we are just
189:38 - having seven columns it's still going to
189:40 - take some significant amount of time but
189:42 - not as compared to like you know how it
189:44 - will take for let's say 30 columns 20
189:46 - columns right so that's one thing you
189:48 - need to keep in mind so now let's first
189:50 - of all go ahead and try to visualize the
189:51 - uh PA plot with the help of
189:53 - cbone uh PA plot is something I want now
189:56 - I just need to give the whole data frame
189:58 - because it's going to take each and
190:00 - every column and do everything by itself
190:03 - okay let's see the output that we're
190:04 - going to get and I'm also going to show
190:06 - this thing let's see what kind of thing
190:08 - do we get
190:10 - okay as you can see itself right now
190:12 - it's it's taking a lot of time to create
190:14 - this plot right because still there are
190:16 - seven different columns and it's taking
190:19 - all these kind of possible combinations
190:22 - okay so this is the kind of output that
190:24 - we are getting the temperature column is
190:27 - getting compared with its same
190:30 - temperature thing then temperature thing
190:32 - is also getting compared with Luminosity
190:35 - then just like that temperature is also
190:36 - getting compared with the radius
190:38 - absolute magnitude and star type okay
190:41 - all of this numeric column okay it won't
190:44 - be taking uh this kind of categorical
190:47 - column which is of the type object it's
190:49 - just going to take the numeric type of
190:52 - data that is either integer or float
190:53 - okay it's not going to take into account
190:55 - of this last two columns that we were
190:58 - having in the object type okay so yeah
191:01 - this is the kind of correlations that we
191:02 - are able to fetch that let's say with
191:04 - respect to temperature let's say what is
191:06 - this particular column this is absolute
191:08 - magnitude right so for this you can see
191:11 - that we can clearly see that as absolute
191:13 - magnitude will increase the temperature
191:15 - is going to fall this is some kind of
191:17 - observation that we are able to make
191:20 - right so yeah this is the kind of output
191:22 - that we get with the help of pair plot
191:24 - now one more thing that I can do is I
191:26 - can visualize this data point with
191:28 - respect to let's say some kind of U what
191:31 - it means this kind of parameter that I
191:34 - can give over here in subplot let's say
191:36 - I just need to give the name of column
191:38 - over here
191:39 - spectral class okay what it's going to
191:43 - do there are again multiple categories
191:46 - within the spectral class so where is
191:49 - each and every category going to belong
191:51 - to this kind of PA plot all of this kind
191:54 - of things you will be able to see you
191:55 - can go ahead and create this kind of PA
191:57 - plot with respect to different kind of
191:59 - use present in the data see now that's
192:00 - that's what I was talking about there is
192:02 - a Class M Class B Class A this kind of
192:05 - data and see all of these kind of points
192:07 - are being marked differently wherever
192:10 - there is purple it's with respect to
192:12 - class
192:13 - wherever that you can see the dark
192:14 - yellowish kind of thing that's Class B
192:18 - so that's the power of U you can change
192:19 - this kind of U with any kind of
192:21 - different categorical data that you are
192:23 - having uh okay and maybe star color is
192:26 - something that you would like to go
192:27 - ahead and look forward to so yeah that's
192:29 - what we are seeing right in the same
192:31 - data because we did not count let's say
192:33 - spectral class over here we are giving
192:35 - that kind of data with the help of U
192:37 - parameter That's The Power of cbor Now
192:40 - again what I'm trying to see over here
192:41 - is I'm trying to
192:43 - change I'm trying to change this whole
192:46 - background lt.
192:48 - style. use to
192:51 - dark dark
192:54 - background okay and then see how the
192:57 - output is looking like and maybe I would
193:00 - like to also see the previous graph if
193:02 - how this would look like in a dark uh
193:05 - output okay and I also change this color
193:07 - to let's say some different kind of
193:10 - thing but right now let's say how the
193:12 - out is going to look like okay that's
193:15 - the output that we are having I can
193:17 - maybe run this one for one more
193:19 - time because you know right while
193:21 - changing the style we need to run our
193:24 - code twice and what I'll do is I'll also
193:27 - go ahead and run this code I don't need
193:29 - to again set the background to dark
193:30 - because it's already set for me right
193:32 - now okay I don't need to change it again
193:33 - to dark
193:35 - background so yeah I guess this is the
193:37 - thing that we have saved I'll again uh
193:40 - cross check it by saving it okay I
193:42 - haven't saved saved it so PLT do saave
193:44 - fig what am I going to do I'm going to
193:47 - save it in base directory and the same
193:50 - thing you know right the name of this
193:52 - plot will
193:53 - be what it will be pairplot
193:56 - PNG
193:58 - right now there is a parameter over here
194:00 - in par plot again called kind okay this
194:03 - kind by default is set to scatter as you
194:05 - can see over here it's highlighted you
194:07 - can change this to the different kind of
194:10 - like you know plot that you would like
194:11 - to see okay scatter is fine for me so I
194:14 - guess I'll just keep it as it is I won't
194:16 - be changing but yeah that's something I
194:17 - wanted to show you guys but now let's
194:20 - just goe and save this figure and then
194:22 - also look into the output if it's done
194:24 - in a proper way or not all right
194:27 - guys so yeah these are this kind of
194:29 - beautiful visualizations that you are
194:31 - creating with the help of python that's
194:33 - literally something that you can go
194:35 - ahead patch it out from this Google
194:37 - collab and attach into your research
194:40 - papers or reports that you are creating
194:42 - you can mention about this kind of
194:44 - details your observations and give
194:46 - evidence to that with the help of this
194:48 - kind of visualizations that you have
194:49 - created
194:50 - right so yeah we are done with this
194:53 - let's look into this thing yeah P plot
194:56 - is
194:57 - created hopefully there are no errors
195:00 - it's looking good right it's looking
195:03 - beautiful yeah you can see this kind of
195:05 - plots right for the same columns like
195:08 - for example radius versus radius is
195:10 - giving this kind of thing right
195:12 - Luminosity versus Luminosity is giving
195:14 - this kind of thing similarly like over
195:16 - here star type and star type so yeah
195:18 - that for the middle part that's the type
195:20 - of output that you're getting and
195:22 - everywhere else you're getting the
195:24 - scatter plot this is really very
195:26 - beautiful to be
195:28 - honest so yeah that's that's about the
195:31 - pair plot and I'll also go ahead and try
195:32 - to run this once or I should say twice
195:36 - not sure let's go ahead and check I
195:39 - guess this is looking even more much
195:40 - more better right as compared to to
195:42 - previous white one and I also change the
195:47 - color of this to
195:49 - white or let's say t
195:53 - pink let's see how it's looking
195:57 - now hopefully better yes it's just
196:01 - amazing just
196:03 - amazing great so I'll also go ahead and
196:05 - cross check this one line plot line of
196:08 - plot and see if the changes have been
196:10 - saved yes this is much more better man
196:13 - this is just amazing so yeah now I'll be
196:15 - seeing you in the next video where we
196:16 - are going to create this kind of a plot
196:19 - called HR diagram okay something like
196:21 - this so yeah stay tuned for
196:24 - that hey everyone so welcome to one of
196:27 - the most lengthiest video you will see
196:29 - in this entire program so in this
196:32 - particular module this is the final
196:35 - ultimate visualization that you are
196:36 - creating with respect to this star data
196:39 - that we are dealing with so this is
196:41 - about creating an HR diagram what is HR
196:43 - diagram I'll be talking about that in
196:45 - this particular video but then how you
196:47 - can create this with the data set that
196:49 - you are having and compare it with the
196:51 - actual HR diagrams so that you are able
196:53 - to appreciate that what kind of skills
196:55 - that you have learned over here indeed
196:57 - the video is going to be super lengthy
196:59 - but it's going to worth each and every
197:01 - minute that you're going to spend on it
197:03 - so let's get into it
197:05 - guys all right so this is my
197:07 - particularly favorite part to create the
197:10 - HR diagram the reason behind that is I
197:13 - personally love this kind of diagram
197:15 - okay uh it's because like you know how
197:17 - amazingly we are able to categorize or
197:19 - like you know classify this kind of
197:21 - different Stars depending on its
197:24 - properties that is temperature absolute
197:26 - magnitude spectral class and also the
197:28 - Luminosity right now you need to
197:31 - understand one thing that all the kind
197:32 - of previous graphs that we have created
197:34 - or the visualizations that we have
197:36 - created all of them can be always
197:39 - created if you're having this kind of
197:40 - tabular data now we are able to create
197:43 - an HR diagram because we are having the
197:46 - data of star and its respective
197:48 - properties that is temperature and
197:49 - absolute magnitude right now we are
197:51 - going to use both of this to create this
197:53 - kind of a diagram so now because we are
197:56 - having access to this two data only then
197:58 - we are able to create the HR diagram you
198:00 - won't always be able to create this
198:02 - diagram unlike all the other graphs you
198:04 - will always be able to create this kind
198:06 - of
198:07 - graphs right so that's something that
198:09 - you need to know before we get started
198:12 - okay so yeah keeping this kind of things
198:14 - in mind that because over here we are
198:16 - dealing with the star type data set and
198:18 - that's the reason because it's
198:20 - properties that is temperature and
198:21 - absolute magnitude is available to us of
198:24 - real stars that's why we'll be able to
198:26 - create something like this okay so let's
198:29 - get into it now because I want to plot
198:32 - temperature on the x-axis and the
198:33 - absolute magnitude on the y- axis we be
198:36 - requiring its values from the data frame
198:38 - so how we can fetch this values from the
198:40 - data frame so what what I can do is I
198:42 - can create a variable called as
198:45 - temperature and from the start DF I can
198:49 - store all the values of temperature okay
198:53 - in this temperature variable how can I
198:55 - do it by calling dot values on top of
198:58 - this column okay so on on the left side
199:02 - of this dot what are we doing from the
199:04 - Star DF we are fetching this column of
199:08 - temperature and now all the values that
199:10 - are present in that column I'm using dot
199:14 - values so what it's doing let's go and
199:16 - try to
199:18 - print it's going to create an array of
199:22 - these values that are present in this
199:23 - column as you can see over here array
199:26 - what is array array is just one of the
199:28 - other data structure that we have in
199:30 - Python that's used to store this kind of
199:32 - data like this okay just like list as
199:34 - you can see right but now how do I know
199:37 - if this is a list or an array I can just
199:40 - go ahead
199:41 - and type this type functionality on this
199:45 - temperature and we can see that it's a
199:47 - numpy array n dimensional array right
199:50 - for now you just need to know that it's
199:52 - just a kind of a list you can think of
199:55 - but with more much more functionalities
199:57 - okay but anyway now we have uh extracted
200:01 - the values of temperature just like that
200:03 - I'm also going to do it for absolute
200:05 - magnitude and star
200:08 - DF
200:10 - absolute
200:12 - magnitude dot values okay now because
200:17 - I'm having access to both of these
200:19 - values I can simply go ahead and create
200:21 - a scatter plot now what is the reason of
200:23 - the scatter plot if I show you this in
200:26 - this HR diagram you are trying to plot a
200:29 - specific Star by giving its x coordinate
200:31 - and y coordinate for each and every Star
200:34 - you just need x coordinate and y
200:35 - coordinate and you simply plot it so for
200:38 - that what I am doing is the
200:40 - functionality is called scatter okay if
200:42 - you use PLT do plot it's going to give
200:44 - you a line plot okay just like what we
200:46 - did over
200:47 - here if you try to use this PLT dotplot
200:51 - okay what is it going to do it's going
200:53 - to create this kind of lines we don't
200:55 - want to connect the Stars we just want
200:57 - to plot the stars as it is and that's
200:59 - what we are using that is scatter plot
201:03 - on x-axis I'm giving
201:06 - temperature and then on y- axis I'm
201:08 - giving absolute
201:09 - magnitude and then I'm just using PL
201:12 - show to Simply get the output without
201:14 - any kind of text written on top of the
201:17 - figure so hopefully everything is
201:19 - working the way we want and see the
201:22 - output no it's not working right now
201:25 - there is a specific reason behind that
201:26 - okay we wanted some kind of parts to be
201:29 - there on the top part as because we can
201:31 - see over here the hyper Giants and the
201:34 - super Giants are existing over here
201:36 - right but there is nothing over here
201:38 - it's completely empty the reason behind
201:40 - that is look at the the temperature and
201:42 - the absolute magnitude
201:45 - axis this values of temperature are
201:47 - starting from a higher value and going
201:49 - all the way down to a lower value
201:52 - similarly like that we are also seeing
201:54 - in the absolute magnitude we are
201:56 - starting from a higher value and then
201:58 - going up by decreasing the value that's
202:02 - completely opposite to what we are
202:03 - seeing in our M lab output we are
202:06 - starting from a smaller value going all
202:08 - the way up to a higher value and just
202:11 - like that in our y- axis we are starting
202:13 - from a negative value going all the way
202:16 - up to positive value so in order to get
202:19 - this kind of nature of the graph I need
202:21 - to invert my Axis okay I need to invert
202:25 - my x-axis as well as the y axis and the
202:28 - way that we can do it with the help of
202:29 - met plot Li I can use
202:33 - PLT and then GCA what is GCA it's giving
202:37 - me get current AIS okay so whatever we
202:41 - are doing right now is on an axis right
202:44 - so we are getting this current axis and
202:47 - then there is a property called
202:49 - Inver and then
202:53 - x-axis and then I can also copy this
202:56 - line paste this for y- axis and let's
203:00 - see now how it looks
203:02 - like see this is what we expect this is
203:05 - where the main sequence stars are then
203:08 - on the bottom part we are having red wve
203:10 - Brown wve over here we are having wide
203:12 - barves then on the top we are having
203:14 - super Giants and the hyper Giants this
203:17 - is what we expect right now there is one
203:20 - thing that is really very different we
203:23 - are not adding any kind of colors we are
203:25 - not adding any kind of sizes but now to
203:29 - add this kind of functionalities in your
203:32 - graph what you will need for each and
203:35 - every Star there are some unique
203:36 - properties right some unique values of X
203:38 - some unique value of y and along with
203:42 - that it's going to have some respective
203:43 - color depending on what type of star it
203:46 - is it's also going to have a specific
203:49 - size and also a label given to that
203:52 - particular Star as for example white bar
203:55 - so what I'm going to do over here is I'm
203:57 - going to create a whole lot of a python
204:00 - Dictionary what is python dictionary
204:03 - it's another data structure that exist
204:06 - in Python just like list just like array
204:09 - there is one more thing that is called
204:11 - as python dictionary now what is the
204:14 - reason like you know what's the main
204:16 - reason we are using this python
204:17 - dictionary you will be understanding in
204:18 - a while it's going to take a lot of time
204:21 - for me to like you know show you the
204:23 - whole dictionary so what I'm doing is
204:24 - I'm simply uh pasting that part that I
204:28 - have copied and simply uh having it over
204:32 - here okay I'm also going to get rid of
204:34 - this values because Ive also pasted it
204:37 - over over here okay so on the top this
204:41 - this two lines basically temperature and
204:43 - absolute magnitud you already know how
204:45 - did we get this but now what is the star
204:47 - type right so there is a column called
204:50 - star type right in our data frame and
204:52 - I'm simply converting this into the
204:54 - values it means if I try to visualize
204:56 - star type okay if I go ahead and print
205:00 - this it's going to be the list of the
205:02 - Zer 1 0 1 4 4 all these kind of things
205:05 - right we know that zero stands for brown
205:07 - valve one stands for red valve five
205:09 - stands for hyper giant so on and so for
205:12 - so now I have
205:14 - also created this kind of an access to
205:17 - all of the specific data points that are
205:19 - present in our data frame so now our
205:23 - main motive is we are going to take each
205:26 - and every individual star that are from
205:30 - one from the first star all the way up
205:33 - to the 240th star we are going to itate
205:36 - 1 by one we going to get access to X and
205:39 - Y coordinates at the same same time what
205:42 - is the star type of that particular star
205:45 - Now by getting an exess of what kind of
205:48 - star it is is it of type zero type 1
205:51 - type two type three type four or type
205:53 - five I have created a whole python
205:55 - dictionary form that so let's say if the
205:59 - star type is
206:01 - zero then these are its respective
206:04 - properties if the star type is one then
206:07 - here are its respective properties this
206:09 - is what we create in Python in
206:12 - dictionaries actually it is python
206:17 - dictionaries are made
206:19 - of key value pairs what it means this is
206:24 - the key and this is the value of that
206:27 - keyy so in order to get exess of the
206:30 - value you need key so what I'm trying to
206:34 - say is that if I want to see Star types
206:39 - okay and now in this St R types if I'm
206:42 - giving zero so now zero is the key right
206:46 - if I run this it's going to give me its
206:49 - respective value right now again the
206:53 - value is in the format of dicture if you
206:55 - can see there is a curly brackets right
206:58 - and then there is a key and a value
207:01 - Associated to that there is a key and a
207:04 - value key and a value so I have created
207:07 - a dictionary within a dictionary right
207:10 - so the reason behind that is let's say
207:14 - that the first star is of class zero
207:18 - okay type zero now I'm going to call
207:21 - this as the property of star zero star
207:24 - type zero and now if I want to get an
207:28 - idea what is the label of the star I
207:31 - simply need to pass this key it's going
207:34 - to give me BR bar if I want to check
207:37 - what is the color that we are going to
207:40 - give to this particular star class that
207:44 - is brown what is the size that we are
207:46 - going to use to plot this kind of
207:50 - dwarves it's going to be size of 30 and
207:53 - then what is the marker that we're going
207:55 - to use to display on the graph what are
207:58 - this markers over here you are getting
208:01 - this kind of circles by default okay you
208:04 - could have changed this to cross you
208:06 - could have changed this to a DOT right
208:08 - you could have done a lot of different
208:10 - markers that are available
208:11 - in M plotly currently we are choosing
208:14 - only two types of markers if it's a
208:17 - dwarf star we are going to use marker as
208:19 - a DOT if it's a main sequence star or
208:23 - any kind of giant star then we are going
208:25 - to use a marker as o that's the kind of
208:28 - idea that we are having by default
208:30 - marker is O as you can see okay but now
208:34 - the whole idea that I want you to
208:36 - understand is that let's say in the it
208:39 - region out of all the 240 Stars we are
208:41 - on let's say index
208:44 - two so what are what is the star
208:47 - type on index 2 let's check that it's
208:52 - zero but now let's see if I'm on index
208:55 - 100 let's see over there the star type
208:59 - is four so now what I'm going to do is
209:01 - I'm going to change this zero to the
209:04 - star type of 100 that is 4 in short
209:06 - right and now if I take a look into its
209:09 - property of marker it's going to be o
209:12 - right and if I take a look into its
209:17 - label it's going to be super Giants see
209:21 - just like that if I want to get an exess
209:23 - of the color I can just do this by
209:25 - passing in the color and that's more
209:27 - than enough I guess you might have
209:29 - understood what I'm trying to say I'm
209:31 - trying to come up with a logic that if
209:34 - I'm trying to create a scatter plot and
209:36 - for each and every individual point that
209:39 - I'll be plotting I want to give this
209:42 - color label size and marker how can I do
209:46 - it with the help of this python
209:47 - dictionary that we have created for Star
209:49 - types that's exactly how we are going to
209:51 - do that okay
209:54 - so again if I want to show you what is
209:56 - the length of the star
209:59 - type it must be 240 right so in this
210:03 - star type there are 240 different values
210:06 - right starting from zero star type let's
210:09 - just visualize it for one more time see
210:11 - 0 0 0 1 1 1 so all of these things are
210:14 - for 240 times so I'm going to itate from
210:17 - the first index all the way up to last
210:19 - index and then whatever is the value of
210:21 - star type I'm going to get its
210:23 - respective properties with the help of
210:26 - this
210:27 - syntax so that's the idea that I'm going
210:29 - to implement with the help of a for Loop
210:32 - so what I'm going to do is I'm going to
210:34 - create a for Loop in the range
210:38 - of this 240 values okay so l of star
210:41 - type because we know that length of star
210:44 - type is what 40 right 240 I mean right
210:50 - so now let's say in future if someone is
210:52 - updating this CSV file if we are having
210:54 - a lot more data as compared to 240 Stars
210:57 - it will be very Dynamic for us to write
211:00 - this length of star type instead of 240
211:02 - right so that's the reason that I have
211:04 - written this length of star so now
211:06 - what's going to happen the value of I is
211:08 - going to start from zero and go all all
211:11 - the way up to 239 right and now I'm
211:14 - going to plot this scatter diagram for
211:17 - each and every Star so the temperature
211:20 - on the index zero and its respective
211:23 - value of absolute magnitude on index Z
211:25 - is the first St that I'm going to plot
211:28 - then when the value of I will change to
211:30 - one it will be temperature one comma
211:32 - absolute magnitude one so H and every
211:35 - Star that I'm going to extract from the
211:37 - temperature and the absolute magnitude I
211:39 - creating this XY coordinate and then I'm
211:41 - simply going to plot it in the scatter
211:43 - plot but now at the same time I'm also
211:46 - giving the properties of the
211:48 - size
211:49 - color
211:51 - marker and the
211:53 - label okay now I can extract this
211:57 - properties just like how I have
211:58 - explained over here so I'm going to copy
212:01 - this
212:02 - part and store it into a variable called
212:05 - as
212:06 - properties okay but now I need to change
212:10 - this to I because I don't want Star type
212:12 - that is present on index 100 I want to
212:16 - automatically change if the value of I
212:17 - is changing so when the value of I is
212:19 - zero it means on the first row what is
212:22 - the star type with respect to that give
212:25 - me the
212:26 - properties right and then when the value
212:28 - of I is 100 at that particular Point
212:30 - what is the star type get me its
212:32 - respective properties right so that's
212:34 - the kind of idea that we have done and
212:36 - after that if you want to call its
212:38 - respective properties of size color
212:40 - marker and label how you can do it I I'm
212:43 - going to give
212:45 - properties and I'm going to write size
212:48 - over
212:49 - here right size color marker label right
212:56 - I'm just going to copy this
212:58 - code paste it for color change this size
213:02 - to color and for marker again I'm going
213:04 - to paste this change this to marker and
213:07 - for the label again paste it and change
213:09 - this to label
213:12 - so our idea is done hopefully everything
213:15 - is going to work fine let's go ahead and
213:17 - try to test
213:18 - this okay I'm just going to get rid of
213:21 - this extra things because we don't
213:22 - require it anymore and if I go ahead and
213:26 - look into this output I don't need any
213:28 - kind of Extra
213:29 - Spaces I'll get rid of this right so see
213:32 - this is the kind of output that we're
213:33 - getting right all the hyper giant super
213:36 - Giants are getting colored then this are
213:38 - the kind of mean sequence Stars these
213:40 - are the red veres these are Brown dves
213:43 - These are white dves all of them are
213:46 - what we expect in the HR diagram it's in
213:49 - the same exact way right that's what we
213:52 - expect
213:54 - right but now there is one thing that we
213:56 - are not able to give any kind of label
213:59 - right we are not able to see any kind of
214:00 - label that this is a white bar this is a
214:03 - main sequence star right we are not able
214:04 - to see these kind of things the reason
214:06 - behind that is because we haven't given
214:09 - Legend in met. Li you give this Legend
214:13 - in order to display this label so if I
214:16 - run this
214:18 - code just stick around with me because
214:20 - there are quite some more things we are
214:22 - doing in this specific video because
214:24 - there is a problem associated with this
214:26 - command okay I'll be explaining that to
214:29 - you see that's the problem I was talking
214:32 - about now for each and every Star that
214:34 - is for 240 Stars whatever is the star
214:38 - type it's going to give a label to it
214:39 - and assign in the graph itself now
214:42 - that's not something that I'm looking
214:43 - forward to if my brown dwarf has
214:46 - appeared once I don't want to label it
214:49 - again because I know that this kind of
214:51 - stars are going to be brown W then this
214:54 - type of stars are my red valves right if
214:56 - it has appeared once I don't want to
214:59 - appear it for more than one time so now
215:02 - I am going to come up with a very good
215:04 - logic that's going to help me solve this
215:07 - issue okay now the reason that I'm able
215:10 - to explain all of these things very
215:12 - fluently it's not that because I'm a
215:13 - very good programmer everything comes to
215:15 - me in just a second it's not like that
215:18 - it's years of practice at the same time
215:20 - I have already done this kind of I have
215:22 - already solved this problem okay took me
215:24 - some time it's not that on the spot I
215:26 - got this things okay so it's completely
215:29 - fine it's not that everyone is going to
215:30 - get it on the spot if you are especially
215:32 - a beginner it will take some time right
215:35 - so try to digest the things that I'm
215:37 - going to explain right now okay so so
215:40 - see what I'm going to do is I'm trying
215:43 - to create two
215:44 - things this requires some kind of an
215:47 - idea of how Legend works okay so let me
215:50 - explain you that first Legends basically
215:53 - take one input called as
215:55 - handles what are these handles these
215:58 - handles are nothing but each and every
216:00 - plot that you're trying to give okay so
216:02 - let's just call this thing as X's okay
216:06 - and I'm just also going to press tabs to
216:09 - shift it to the right and I guess one
216:12 - space back should do right this is
216:14 - looking
216:16 - good uh yeah this is looking better yeah
216:19 - now what I'm going to do is in place of
216:21 - this
216:22 - handles I'm going to write labels now
216:25 - what is this labels I again not created
216:27 - any kind of labels so I'm going to
216:30 - create a set called labels labels is
216:34 - equal to set at the same time I'm going
216:36 - to create exess empty
216:39 - list so what what I have done I have
216:42 - created two empty data structures one
216:45 - that is a list and one that is a set the
216:48 - unique concept about the set is that if
216:51 - there are more than one thing that is
216:54 - repeated okay there is a one thing that
216:56 - is repeated for more than one time it's
216:58 - going to consider it for only one time
217:01 - so what I'm trying to say is let's say
217:02 - I'm having set of 1 comma 1 comma 1 see
217:05 - what is the output going to be okay it's
217:08 - going getting this kind of an error
217:09 - because we we have done a syntax problem
217:12 - I'm going to come out of this and then
217:14 - I'm going to give this see the output is
217:17 - only one output is only one no matter
217:20 - how many times one is repeated it will
217:23 - always give the output of one so that's
217:25 - the kind of logic that we are having
217:27 - over here okay we will be keeping on
217:29 - adding the labels over here and make
217:31 - sure that labels are appearing only once
217:36 - okay and then for which plot I want to
217:39 - give this AIS label okay for whichever
217:43 - plot I want to give this label I'll be
217:46 - adding that data point to this
217:48 - particular AIS and labels it might be
217:51 - getting a bit overwhelming so let me go
217:53 - ahead and show you what I'm trying to
217:54 - say okay what I have done till now I
217:59 - have created this kind of a scatter plot
218:00 - and that's what you are seeing but now
218:02 - this kind of Legends are looking very
218:04 - ugly right so we are trying to sort that
218:06 - problem okay by calling these two things
218:10 - now I'm going to give an if statement
218:13 - now what is this if statement all about
218:16 - if the label that we are getting for the
218:19 - star type okay so from this
218:24 - properties if the label value if the
218:27 - label
218:29 - value is not present in
218:34 - labels okay only then you are going to
218:37 - give this x ax is equal to this kind of
218:40 - graph and then after that what you are
218:43 - going to do is this is really important
218:45 - you are going to add this AIS to this
218:49 - AIS and then also add the label because
218:52 - it was not present in this particular
218:54 - set because it's not present you are
218:56 - going to add it okay so what I'm doing
218:59 - is I'm going to first of all add this ax
219:02 - to this AIS list how can I do it I can
219:05 - do it with this AIS command that get me
219:07 - that list which I'm trying to add some
219:09 - new Val values so in the list you can
219:12 - add some new data point with the help of
219:15 - this upend command okay the upend
219:17 - command that you can see okay for some
219:19 - reason I'm not able to click it yeah
219:20 - anyway I'm successful in clicking it
219:23 - anyway so now exist the in empty list I
219:28 - want to append what this ax this is the
219:31 - handle okay this is the not the handle
219:35 - actually but the x's and the handles are
219:38 - the labels labels that I want to display
219:41 - so what am I appending over here I am
219:43 - appending this ax okay so what's going
219:47 - to happen for every
219:49 - iteration if the label that is present
219:51 - for the respective star type is not
219:54 - already present over here then what you
219:56 - do you create this
219:58 - axis and that axis what you're going to
220:01 - do you're going to pass it onto this
220:03 - particular uh list that we have created
220:05 - that's an empty list and after that what
220:08 - you're going to do is you're going to
220:10 - add a label to this set how am I going
220:13 - to do this I'm going to achieve this
220:15 - with the help
220:16 - of
220:17 - labels dot not append anymore it's going
220:22 - to be add directly that's how this kind
220:23 - of functions are built okay foret it's
220:26 - add for L it's append and now I'm going
220:28 - to add the label that is
220:32 - properties and
220:35 - label I hope the idea is getting clear
220:38 - it will be clear once the output is in
220:40 - in front of you okay now let's say if
220:43 - this label already exists in label then
220:46 - I don't want to add label to this kind
220:48 - of set then I I don't want to add okay
220:50 - then I don't even want to create this
220:52 - kind of exis in that case what I want to
220:54 - do
220:55 - is I'm going to give this else block and
220:58 - simply create my scatter plot without
221:02 - adding any kind of x's or any kind of
221:04 - that stuff okay so yeah that's the kind
221:07 - of logic that we have created I'm going
221:09 - to press shift tab shift tab yeah this
221:12 - is looking good so now we are expecting
221:15 - the output to be very
221:18 - decent it's not going to be as ugly as
221:21 - what we had seen okay we we have got an
221:23 - error let's try to look into the error
221:25 - it's saying that string object has no
221:28 - attribute get underscore label let's see
221:30 - where did we got this error this error
221:34 - is over here right it's because the
221:38 - labels right it should be labels let me
221:41 - check this to AIS and see how it
221:46 - works if the x is going to work then
221:48 - yeah I would have done an error yeah I
221:50 - would have I had done an error actually
221:52 - we had to store the AIS okay what is
221:55 - happening so this axis is giving you
221:59 - this kind of an command that okay for
222:03 - this particular point that you have
222:04 - plotted you want to display this label
222:07 - right and that Legend is automatically
222:10 - having this kind of labels right that's
222:12 - the kind of mistake that I was making
222:14 - Legend is already having access to all
222:16 - the labels that's the reason why we were
222:18 - seeing Brown WF multiple times red WF
222:20 - multiple times right so that's not a
222:23 - problem the problem is that if the AIS
222:26 - is present over here if I show you the
222:29 - AIS list let's go ahead and see
222:33 - it see now all of this is a path
222:36 - collection for each and every point
222:38 - there might be six 1 2 3 3 4 5 six what
222:41 - is the reason of this six because we are
222:43 - having six different categories
222:46 - right so for each and every point we are
222:49 - having this kind of AIS now what I'm
222:52 - trying to do is I want to show the label
222:55 - of
222:56 - Legend only for those respective AES or
222:59 - else I don't want to show it so that's
223:01 - the kind of thing that we have done over
223:02 - here and hopefully now it's making sense
223:05 - and now obviously you can beautify this
223:07 - plot by customizing by like you know
223:09 - adding
223:10 - uh xais y axis and all that kind of
223:13 - stuff and uh I can simply go ahead and
223:16 - copy paste this thing because I've
223:17 - already done this for a lot of times I
223:20 - copied that data and I'm simply going to
223:22 - paste it over
223:24 - here okay and let's see now how the
223:28 - output looks
223:29 - like and now let's see if you're also
223:32 - interested to add the data of sun okay
223:35 - in this whole thing I guess the diagram
223:37 - is pretty much small I'll also increase
223:39 - the Fig figure size over
223:42 - here figure size how I can do this with
223:45 - the help of PLT right figure and then
223:48 - fix
223:49 - size I'm giving my figure size as let's
223:53 - say 10 comma 6 I guess this is going to
223:54 - be
223:56 - fine okay now I just want you to realize
224:00 - that even after having a lot of
224:01 - experience in Python this kind of
224:03 - problems happen okay you need to go to
224:06 - the documentation and make things fine
224:09 - as a python developer it's our duty to
224:11 - go Ahad and make things right depending
224:13 - because we having access to all the kind
224:15 - of documents okay but right now I was
224:18 - able to solve this error because of the
224:20 - like you know the output of the error
224:22 - that we had got anyway the important
224:24 - part that I want to convey is that you
224:26 - should not be ever be frightened if
224:29 - you're getting errors okay if you're
224:32 - getting errors it's okay you should know
224:34 - how to solve those errors that's it if
224:36 - you are good at that you are good to
224:39 - like you know encounter any kind of
224:41 - problems in your
224:42 - life specific to uh at least the Python
224:45 - Programming questions okay but anyway uh
224:48 - if we are talking about
224:50 - this I'll just ignore this thing it's
224:53 - quite yeah disturbing yeah anyway this
224:56 - is the kind of output that we have got
224:58 - right for the HR
225:00 - diagram now one last thing is let's try
225:02 - to add the data for the Sun and see that
225:05 - where exactly on this HR diagram that
225:08 - Sun is going to be looking like okay so
225:11 - for that what I'll be doing is I'll be
225:12 - copying this data that I'm having for
225:14 - the Sun and simply add it into our
225:19 - code so I'm coming back to our code I'm
225:23 - going to give this kind of a title I
225:24 - mean the comment
225:26 - adding data for
225:29 - sun now what is
225:31 - this I'm creating one more xes
225:34 - specifically for sun because I also want
225:36 - to append this kind of thing and
225:39 - visualize in my output this is the
225:41 - temperature value I've gone to Google
225:43 - and got this kind of values this is
225:45 - temperature this is uh absolute
225:48 - magnitude this is the size that I'm
225:49 - keeping color is yellow marker is O and
225:53 - label is sun right and I'm simply also
225:57 - adding this AIS that we have created for
225:59 - the Sun and I'm also appending this
226:01 - labels as Sun okay now that's the whole
226:05 - point you will be automatically seeing
226:07 - that somewhere over here in the main
226:08 - sequence we know that sun is a mean
226:10 - sequence star so somewhere along this
226:12 - part our sun should be added just like
226:15 - this whatever kind of star you are
226:17 - interested to know about right you go
226:19 - and find its property on Star and try to
226:21 - plot it and see where it's going to be
226:23 - in the graph for us sun is over here
226:26 - right that's where the sun is and even
226:29 - in the legend you are able to see that
226:30 - sun has been added separately apart from
226:33 - all of this we are also adding a data
226:35 - point of sun isn't it just amazing how
226:38 - we have created this kind of whole thing
226:41 - by getting ideas of python that we have
226:43 - learned in our first module and then
226:45 - again some few things that I have taught
226:48 - in this particular video about how you
226:50 - can create an empty list and empty set
226:53 - and then how you can add data to it the
226:56 - whole idea over here was this thing okay
227:00 - if you don't know how this kind of
227:01 - things work then you will need some kind
227:03 - of experience of how set and this kind
227:05 - of list works but the only thing that
227:08 - you need to know over here is that we
227:09 - have created this kind of empty list and
227:12 - empty set to store the exis that is with
227:15 - respect to the plot that we are making
227:17 - over here we are trying to store it over
227:19 - here so that with respect to that plot
227:21 - I'm able to show the label that is
227:23 - present in the legend command in this
227:26 - Legend Command right so yeah that's the
227:29 - end of this particular video I hope you
227:31 - have enjoyed creating your own uh HR
227:34 - diagram right for the 240 Stars if you
227:36 - can see I have also given this kind of a
227:38 - dynamic way of writing this so that in
227:41 - future if star type is uh changing its
227:43 - length let's say we are adding more data
227:45 - to this existing CSU file then you will
227:48 - be able to create for let's say 500
227:49 - Stars if there are more addition to the
227:51 - data right so yeah these are all the
227:54 - kind of plots that we have generated but
227:56 - I have not saved it right my common not
227:59 - common common so my common mistake is I
228:02 - always forget to save the figure size I
228:05 - mean the figure right that we have
228:06 - generated so save figure how am I saving
228:10 - it I'm giving my base
228:13 - directory and the name HR
228:18 - diagram yeah finally running this and
228:22 - I'll be also checking this before we end
228:25 - this video if this has been done fine or
228:28 - not coming over here looking into the
228:31 - star plots this is HR
228:35 - diagram close
228:37 - this see the beautiful plot right in
228:41 - front of you right the reason I haven't
228:43 - shown you how to do the title X label
228:47 - and Y label because you have been doing
228:48 - this for a couple of above plots right
228:51 - in the Y label I have added the absolute
228:52 - magnitude on the X label temperature
228:55 - given respective font size and the color
228:57 - as you know my favorite one is stab pink
228:59 - so that's the color that I given for
229:01 - them and for the title I'm giving the HR
229:04 - diagram title and a dynamic way of
229:06 - writing the title by giving the F string
229:09 - font size is 15 and the color is royal
229:11 - blue another my favorite color okay so
229:14 - yeah that's about this particular video
229:16 - guys I hope you have enjoyed this
229:19 - one hey guys so welcome to the last
229:22 - video of this particular module where
229:24 - you are going to understand that how you
229:25 - can download this visualizations that
229:27 - you have created in module 2 and saved
229:29 - it into a particular directory so now
229:31 - how you can save that directory into
229:33 - your system from Google collab notebook
229:35 - so all of these things we'll be learning
229:37 - in this particular video so let's get
229:38 - into it
229:40 - all right guys so now let's understand
229:42 - that how we can go ahead and download
229:44 - this star plots all the kind of
229:47 - visualizations that we have created over
229:48 - here from very Basics to very advanced
229:50 - level of visualizations you can do this
229:53 - with the help of because we are using
229:55 - see Google collab there are some
229:56 - specific ways in Google collab through
229:58 - which you can do this the one that we
230:00 - are going to do is I'm going to follow
230:02 - this method that you can see it right
230:03 - now on the screen okay the whole idea is
230:07 - that from this google. cab I I'm going
230:09 - to import files what are these files
230:11 - these are the same files that you can
230:13 - see over here everything that is over
230:16 - here we are going to get access to this
230:18 - with the help of this
230:20 - files right now what I'm doing over here
230:23 - the logic that has been implemented is
230:26 - that I'm going to create a zip file out
230:29 - of this folder okay if I just click on
230:31 - this option there is no option to
230:33 - directly download this folder right
230:36 - there is no option like that so what I'm
230:38 - going to do instead is to create a zip
230:41 - file off it because zip files are
230:42 - downloadable in Google collab so what
230:45 - I'm doing I'm creating this ZIP
230:49 - command and then I'm giving two
230:51 - things which folder I want to zip I'm
230:55 - just taking that particular folder
230:57 - pasting that same thing over here and
230:59 - just passing zip on top of that that
231:02 - hey in this particular path this is
231:05 - called content path in which the star
231:07 - plots exist so in this particular
231:10 - path I want to create a zip file that's
231:14 - it and once the zip file will be created
231:16 - it will automatically be downloaded by
231:19 - giving this kind of input to this
231:21 - download command Okay so this download
231:23 - functionality exists in this file okay
231:26 - so whatever is the file if you give the
231:28 - path to download that file it will be
231:30 - downloaded if I show it to you what's
231:32 - going to happen so if I run this code
231:34 - you will be able to see that a zip file
231:36 - will be generated and now you are giving
231:39 - this path in the download and
231:41 - automatically you are seeing that this
231:43 - kind of files have been zipped for us
231:45 - and also downloaded into my system I
231:48 - simply need to click on
231:50 - this and if I show this to you this is
231:53 - the content folder right inside which we
231:55 - are having the star plots folder and see
231:58 - here are everything that we need to know
232:00 - okay ignore this particular thing for
232:03 - example this is the star colors
232:05 - visualization that we had generated
232:07 - right if you want you can also obviously
232:09 - increase the size and everything right
232:11 - and then here is the HR diagram my
232:13 - favorite diagram right it took the most
232:15 - amount of time in the whole video
232:18 - program overall program not just one
232:20 - video right but yeah that's the that's
232:22 - the kind of output that we have
232:23 - generated so yeah now you can simply
232:25 - attach this kind of thing in any kind of
232:27 - research work that they're doing that
232:29 - was the whole point that with the help
232:31 - of a tabular data how you can create
232:33 - this kind of visualizations in Python
232:36 - with the help of Google colab and also
232:38 - extract it into into your
232:40 - system all right guys so it's time to
232:42 - buid a farewell to our module 2 so over
232:45 - here we used a tabular data set on Stars
232:48 - data and created some amazing
232:50 - visualizations with the help of mat lli
232:52 - and seone Library we looked into some of
232:55 - the different types of visualizations
232:56 - like bar graph box plot line plot pair
233:00 - plot and then eventually created a HR
233:03 - diagram with respect to the scatter plot
233:05 - and then how can we save this outputs
233:07 - that we are creating and download it
233:09 - into our particular system so all of
233:11 - these things we have done so far and I
233:13 - hope that you are enjoying each and
233:15 - every bit of this particular program now
233:18 - in the next module we going to jump into
233:20 - some image visualizations and do some
233:22 - amazing stuff over there so stay tuned
233:24 - for that I'll see you in that next
233:27 - module hey guys I welcome you all to the
233:30 - third module of this program here you're
233:33 - going to take one step forward where in
233:35 - the second module you had performed the
233:37 - visualizations on the tabular data
233:39 - now we going to create visualizations on
233:42 - the image data and therefore to start
233:44 - with in this module we are going to
233:46 - explain you what is the concept of an
233:47 - image then what is fits file because
233:50 - this is the file type through which you
233:51 - are going to access the astronomical
233:53 - images which you're going to perform
233:55 - some kind of visualizations on top of
233:57 - that then what is Sky View form how you
233:59 - can fetch the data of Andromeda Galaxy
234:01 - from astronomical surveys like sdss gmen
234:05 - and DSS2 blue then how you can Implement
234:07 - some of the pixel scaling methods on
234:09 - this anoma galaxy visualize the pixel
234:12 - distribution and lastly what is the
234:14 - concept of Z scale interval in a library
234:16 - called as astropy and why are we
234:19 - specifically using it for this
234:20 - particular program all of this is
234:22 - covered in this particular module guys
234:24 - so let's get into this module and I'll
234:26 - see you in the next video where we are
234:27 - going to talk about
234:29 - image hey guys welcome to the second
234:32 - video of module 3 where I'm going to
234:35 - explain you the concept of digital
234:37 - images in the format of pixels what are
234:40 - grayscale images colorful images and a
234:42 - lot more so let's get into
234:45 - it all right guys so let us go ahead and
234:48 - try to understand this concept about an
234:50 - image so what is an image I'll be first
234:53 - talking about how this kind of images
234:55 - are formed and then what are some kind
234:57 - of different things you need to
234:58 - understand about it so talking about how
235:01 - these kind of images are formed it's
235:04 - kind of a puzzle if you think about it
235:06 - okay let's say that you you are having
235:08 - different kind of pieces of puzzles
235:09 - which you are going to combine together
235:11 - to form this kind of an image that's the
235:14 - same kind of logic that we are going to
235:15 - use in order to understand how this kind
235:18 - of images are formed so this kind of
235:20 - puzzle pieces which are like you know
235:22 - coming together and forming this kind of
235:24 - one final image this puzzle pieces are
235:26 - nothing but the pixels this pixels are
235:30 - combined together to form what we see as
235:33 - an image over here so now what is this
235:36 - kind of pixels right we know about the
235:37 - puzzle pieces that there are some kind
235:39 - of pieces which are joining together to
235:41 - form this image but how do we know what
235:44 - is a pixel so for that what I have done
235:46 - is I just zoomed into this particular
235:48 - image as much as possible but not over
235:51 - here because Google cab is not allowing
235:52 - me to zoom any further than this okay so
235:55 - what I have done I have captured this
235:56 - image I have pasted it into the paint
235:59 - and on the paint I was able to zoom in
236:02 - much further as compared to what Google
236:04 - cab is allowing me so I got some kind of
236:07 - information like this okay so this
236:09 - particular part is being representing
236:12 - the top left part of the image okay so
236:15 - I'm zooming into it as much as possible
236:17 - and this kind of small small squares you
236:18 - are seeing right this is a small square
236:21 - this is a small square this is a small
236:22 - square so all of the small squares are
236:25 - nothing but the pixels and see how these
236:28 - kind of different pixels are there and
236:30 - all of these pixels which are coming
236:31 - together let's say you're just talking
236:33 - about the first row of the small squares
236:35 - all of these pixels are coming together
236:39 - to define the width of this image just
236:43 - like that there are also pixels over
236:45 - here which are stacked up together in
236:46 - this kind of a vertical line which is
236:48 - giving us the information about the
236:50 - height of this image at the same time
236:53 - they are having some kind of different
236:55 - shades of colors which are stored within
236:57 - it some kind of bluish color is over
236:59 - here some kind of very darker shade of
237:03 - blue as compared to what are there in
237:05 - the nearby pixels and similarly over
237:07 - here it's talking about the brownish
237:08 - colors over here it's talking about the
237:10 - dark green kind of color right so all of
237:13 - the small squares are hiding the
237:16 - information about what kind of shade of
237:19 - color is represented on that particular
237:23 - location of an image so I hope a very
237:26 - basic idea about how this kind of images
237:28 - are formed is clear this kind of images
237:31 - are the combination of this kind of
237:33 - pixels and each of these pixels are
237:35 - having some kind of information about
237:37 - what is the shade of color represented
237:40 - over here to show it into the output of
237:43 - the image right so let's say this is a
237:45 - piece of puzzle which is storing this
237:48 - kind of detail this is a piece of
237:50 - puzzles which is storing this kind of
237:51 - color of that particular detail all of
237:53 - these pieces of puzles are nothing but
237:55 - the square shape but now based on this
237:57 - kind of information of the shades of
237:59 - color you're are going to create an
238:00 - image that is something like
238:02 - this right now they can combine together
238:05 - to get the width and the height of the
238:07 - image at the same time how do we know
238:10 - about this kind of intensities of colors
238:13 - now for that we need to understand how
238:15 - these kind of images are form but I hope
238:18 - the part of the pixel is clear that how
238:20 - these kind of pixels come up together to
238:23 - like you know what we see right now in
238:24 - this particular image right now if we
238:27 - talk about how this kind of intensities
238:29 - of colors are coming into the picture
238:31 - how do we know that what kind of shade
238:33 - will be represented by what kind of part
238:35 - in the image so to understand that
238:37 - particular part
238:39 - we need to talk about the sensor that
238:42 - sensor is nothing but the camera that I
238:43 - was talking about when I started this
238:45 - particular video so let's say we are
238:47 - having this camera and in this camera we
238:50 - are having three different filters one
238:53 - to capture the red light coming from
238:55 - whatever is the source which sensor is
238:57 - trying to capture similarly whatever is
239:00 - the greenish kind of part that is being
239:02 - captured will be done with the help of
239:04 - green band filter and similarly for a
239:06 - blue color whatever is the bluish part
239:09 - over here you can see there's some kind
239:10 - of a blue part there is a blue part over
239:12 - here and also a blue part over here so
239:15 - all of the light hitting to the sensors
239:19 - coming from this kind of bluish part
239:21 - will be filtered out with the help of
239:23 - the green sorry the blue band filter
239:26 - right so now what's going to happen we
239:28 - know that typically all of these colors
239:30 - that we see different kind of shades of
239:32 - colors that we see are the formation of
239:35 - like you know different kind of mixes of
239:37 - red green and blue we know these things
239:39 - from our very primary classes in school
239:42 - right or in the art school art classes
239:44 - right so now this kind of different
239:47 - combinations of red green and blue will
239:50 - be captured from this particular image
239:52 - with the help of the S set that is
239:54 - camera and how with the help of this
239:56 - kind of green band filter Red Band
239:58 - filter and the blue band filter now the
240:01 - whole logic over here is the way that it
240:04 - is being captured is with the help of
240:06 - what kind of wavelength of light is
240:08 - contributing to the red part of the
240:10 - visible spectrum now I'm going into much
240:12 - more technical terms let's not go into
240:14 - that particular direction and talk about
240:16 - in a very simple terms whatever light
240:19 - that you are seeing over here is being
240:20 - coming to the Sor if it's falling into
240:23 - the red kind of region then that will be
240:25 - filtered out with the help of Red Band
240:27 - filter similarly for the green light and
240:29 - the blue light and the output of this is
240:31 - representated always into this kind of a
240:34 - grayscale image
240:36 - okay now if we talk about the image that
240:39 - we are going to deal with throughout
240:41 - this whole module is an 8bit integer
240:43 - image now different kind of bit of
240:46 - pixels uh stores different amount of
240:49 - information okay so let's say I'm having
240:52 - a comparison of an 8bit pixel to a 16bit
240:55 - pixel more this kind of 8 Bit And 16bit
240:58 - pixels more the combination of shades of
241:00 - colors it can represent that's a very
241:03 - simple idea about like you know 8bit
241:05 - image and a 16bit image in 16bit images
241:07 - you'll be able to represent a particular
241:09 - color with a more amount of Shades okay
241:12 - more amount of depth basically you'll be
241:13 - able to get from an image right so if I
241:16 - talk about the image that is an 8bit
241:18 - image that we are going to deal with in
241:19 - this whole module let's talk about that
241:22 - so in that 8bit image all these pixel
241:25 - values are going to range in between 0
241:27 - to 255 to represent any kind of
241:30 - information let's about the Redlight
241:33 - coming from this particular image I mean
241:35 - from this particular part and hitting on
241:37 - the C answer if it's coming from the red
241:41 - uh sources red light sources it's going
241:43 - to be representated into different 256
241:46 - sides and the values are going to be in
241:49 - between 0 to 255 that's the whole
241:51 - concept so 255 being the lighter part of
241:54 - the whole image and the part which is
241:57 - represented darker are closer towards
242:00 - the zero side so what does this kind of
242:02 - number 0 to 255 indicate so 8bit integer
242:06 - image is going to give you 256 different
242:10 - shades of a color maybe red green or
242:14 - blue right so now if you going to
242:16 - combine them red green and blue so 256
242:19 - into 256 into 256 these are the possible
242:23 - Shades you can get and form a whole
242:27 - colorful image that you can see over
242:29 - here okay if you increase this bits
242:33 - let's say 16 bits per pixel then you are
242:35 - having 2 to ^ of 16 multiplied by three
242:39 - times to basically get even more shades
242:41 - of colors as compared to an 8bit image
242:43 - okay so that's that's an idea with
242:45 - respect to this but now let's try to
242:48 - observe that if I talk about this kind
242:51 - of bluish part this is a blue part of an
242:53 - image this is another blue part of an
242:55 - image this is another blue part of an
242:56 - image and now if I talk about blue band
242:59 - filter it should be able to filter all
243:01 - of this things and give a very high
243:03 - value to it that is 255 the lighter part
243:07 - of the blue band filter should be
243:09 - representing the blue part so I'm having
243:11 - this kind of uh blue part that is like
243:14 - you know surrounded by potatoes over
243:16 - here then on top of this kind of apples
243:18 - we are having this right so if I try to
243:20 - show you the output of the blue band you
243:23 - can see that this part is light this
243:25 - part is light right this whole part is
243:27 - light as compared to the above images in
243:29 - green band this part is darker this part
243:32 - is darker in the Red Band see even this
243:34 - part is darker and this part is darker
243:36 - right so that's what I I was trying to
243:38 - show you that because with the help of
243:40 - blue band filter that is stored in the
243:42 - sensor that is
243:43 - camera it is able to get this kind of
243:47 - blue light and give a high value to it
243:50 - that is 255 closer to 255 similarly if I
243:53 - talk about let's say greenish part in
243:56 - this images which are this kind of
243:58 - grapes right this kind of melons right
244:01 - if I show you them over here you can see
244:03 - that they are again expressed in the
244:05 - lighter pixels that are values closer to
244:08 - 255 as compared to this one see how
244:11 - darker they are closer to the zero right
244:14 - the darker pixels are closer to zero so
244:16 - how these kind of things are
244:17 - representated by a darker
244:20 - color right similarly if you talk about
244:22 - this kind of red Parts in the images you
244:24 - can see these are kind of apples which
244:26 - are red these are tomatoes that are red
244:28 - right if I try to show them over here
244:30 - see how dark it is in the green band
244:32 - filter but if I talk about the Red Band
244:34 - filter see how lighter these kind of
244:36 - things are all of this information are
244:39 - represented by the pixels which are
244:41 - closer towards like you know 200 255
244:43 - kind of side right so that's the whole
244:46 - idea now you might be wondering that
244:48 - potatoes that are given over here are
244:49 - yellow in color right then why in the
244:51 - green band and the Red Band we are
244:53 - having the lighter pixels so if you
244:55 - think about a yellow color It's a
244:57 - combination of the red color and the
244:59 - green color now that's the reason by
245:02 - even in the green part and the red part
245:05 - you are able to see this lighter part in
245:07 - the image
245:08 - now what is the exact shade of red what
245:10 - is the exact shade of green out of the
245:12 - possible 256 combinations they're going
245:15 - to come together and finally form this
245:17 - kind of a yellowish image in the final
245:19 - output if I show you that potato in the
245:22 - blue part you will see it's a darker
245:24 - color as compared to the green and the
245:27 - red you are seeing that this part is
245:30 - darker right anyway there are again some
245:33 - kind of blue pixels that are also there
245:35 - some kind of shades of blue let it be a
245:37 - darker part right all these kind of
245:39 - things are coming up together and give
245:41 - you this exact color that you are seeing
245:44 - over here so to just summarize the whole
245:46 - concept of an image we first understood
245:49 - the idea about what are the pixels
245:51 - because with with the help of this kind
245:52 - of small small squares that you are able
245:54 - to see these small small squares are
245:57 - coming up together and giving you this
245:59 - kind of the like you know this kind of
246:01 - how what is the width of the image what
246:02 - is the height of the image and if we
246:04 - talk about the intensities of the colors
246:07 - that are represented by this kind of
246:08 - small small squares is dependent on how
246:11 - much amount of uh shade of red is
246:14 - present what is the shade of green is
246:16 - present what is the shade of blue is
246:18 - present at the time of capturing that
246:20 - particular image and depending on that
246:23 - based on this red band green band and
246:25 - blue band filter we are getting some
246:26 - kind of respective outputs and all of
246:28 - these values are stored in the range of
246:30 - 0 to 255 255 being the lighter part zero
246:34 - being the darker part of that specific
246:36 - output of the filter then you combine
246:38 - all of these three images with
246:40 - respective shades of green red blue and
246:44 - finally whatever are the shades that you
246:46 - can create is the final output of this
246:48 - image so wherever there was a bluish
246:51 - part right all of these pixels came
246:54 - together join are combined together
246:55 - stacked on top of each other
246:57 - and this part where the blue is present
247:00 - this kind of color will be there on this
247:02 - specific location what is the output of
247:04 - the blue filter what is the output of
247:06 - the green band filter what is the out of
247:07 - the Red Band filter combination of all
247:10 - of this three because the bluish part is
247:12 - higher in color that's why this kind of
247:15 - pixel is given some shade of blue by
247:18 - combining this RGB possible combination
247:20 - that we are getting from the sensor this
247:22 - is the color that we are able to fetch
247:25 - so I hope I'm able to convey the ideas
247:27 - with respect to like you know what are
247:29 - this images how are they formed because
247:31 - this are the building blocks that we are
247:33 - talking about about this module as we go
247:35 - ahead we are going to actually represent
247:38 - all of these images into the format of
247:40 - pixel how are you going to do do this
247:42 - you will you will be seeing this in the
247:44 - upcoming vide so stay tuned for
247:48 - that hey everyone welcome to the third
247:50 - video of module 3 and now that we are
247:53 - going to deal with the astronomical
247:55 - images they are typically saved in the
247:58 - format of fits file so it's essential
248:00 - for us that we understand what exactly
248:03 - is this fits file and what kind of
248:05 - things it typically contains so let's
248:08 - get into it and understand about all of
248:10 - this
248:12 - information so now let's try to have a
248:14 - very quick idea about what are Fitz
248:16 - files so in the Astronomical Society
248:19 - this is one of the very popular way in
248:22 - order to store the data that we are
248:24 - getting from these telescopes in order
248:26 - to load it into our system and let's say
248:29 - we are uh doing some kind of image
248:31 - processing on top of that and doing some
248:34 - amazing research analysis of what kind
248:37 - of information is stored in this kind of
248:39 - images captured by the telescopes now
248:42 - that's exactly what we'll be doing in
248:43 - the upcoming few videos and that's the
248:46 - reason why I am explaining you over here
248:48 - about the Fitz file because you are
248:50 - going to fetch the data from one of the
248:53 - astronomical surveys that is the
248:55 - Andromeda galaxy it's not going to look
248:57 - like this at all it's a very raw image
248:59 - that you'll be getting from the
249:01 - telescope and then how you able to get
249:03 - that image it's stored in the format of
249:06 - Fitz file so what are the components of
249:08 - the Fitz file let's try to understand
249:10 - that so Fitz file is having multiple
249:13 - different header units at the same time
249:16 - all of these header units are also
249:17 - coming up with some kind of a data now
249:20 - this data could be in the form of images
249:22 - it could be in the format of uh
249:24 - different tables Etc right so right now
249:27 - because we're going to focus on the
249:29 - image data let's just understand what
249:31 - are these kind of two main components
249:33 - you need to know about the Fitz file the
249:36 - first thing is the header unit and all
249:38 - of the Fitz file will come with the
249:40 - primary header unit for sure and then
249:42 - some kind of extension header units that
249:45 - are going to reveal about some more
249:47 - information about that specific image
249:49 - that we are trying to talk about so
249:51 - typically this kind of header units are
249:53 - storing some kind of metadata which is
249:56 - revealing the information about let's
249:57 - say for example what was the telescope
250:00 - used to capture that specific uh
250:02 - astronomical object what is the location
250:05 - of that astronomical object out there in
250:07 - space for example what is the uh right
250:09 - Ascension what is the declination these
250:12 - are nothing but the space Celestial
250:14 - coordinates that we are having to get an
250:17 - exact precise location of the
250:18 - astronomical body out there in space
250:21 - right so we are able to get all of this
250:22 - kind of information with respect to the
250:24 - header unit I'm going to show this kind
250:26 - of live demonstration for this kind of
250:29 - uh Andromeda galaxy by the way this is
250:31 - the closest galaxy to the Earth if you
250:33 - don't know right it's going to be really
250:35 - very amazing thing we are going to do in
250:37 - the few upcoming videos for this module
250:39 - right so we're going to study about this
250:41 - kind of header units and all of these
250:43 - header units might have some kind of
250:44 - data we're going to also extract this
250:47 - data and do some image processing on top
250:49 - of that to reveal some of the amazing
250:51 - Beauties about this androma galaxy right
250:54 - now obviously you are seeing a very
250:56 - highly detailed processed image we not
250:59 - going to get anything very close to this
251:01 - but yet do some kind of research work in
251:04 - terms of doing some kind of image
251:06 - processing and get some kind of of
251:07 - analysis as in like you know you can see
251:09 - there is some kind of a small Galaxy
251:10 - over here right on top of that huge
251:12 - Galaxy right we'll be able to get all of
251:16 - this information by doing some kind of
251:17 - image processing right so all of these
251:20 - things you'll be seeing in the upcoming
251:21 - few videos so stay tuned for
251:25 - that hey everyone welcome to the fourth
251:28 - video of module 3 so far we have just
251:31 - covered this kind of theoretical
251:32 - understanding of what is an image and
251:34 - because we are going to deal with the
251:36 - astronomic iCal data and typically it's
251:38 - going to be in the format of fits file
251:40 - so we have also covered that so far but
251:43 - now it's time to start the coding
251:45 - process and as usual you know we going
251:47 - to import the libraries and if it's not
251:49 - pre-installed in Google collab we are
251:51 - going to first install it and then
251:53 - import it so let's get into the video
251:56 - now as we are going to perform some of
251:58 - the image processing tasks throughout
252:00 - this module on this astronomical data
252:02 - called as anoma Galaxy uh so how we can
252:05 - collect this data from lot of
252:07 - astronomical surveys and call it into
252:10 - our Google collab notebook we can do
252:12 - this with the help of a library called
252:13 - as asro query so now like matplot Li
252:17 - this is not pre-installed in the Google
252:18 - collab environment so you will have to
252:21 - manually install it by using this
252:22 - command called as pip
252:24 - install and the name of the library that
252:26 - is Astro
252:28 - query and you simply run this code and
252:30 - it's going to take some seconds and
252:32 - simply install it for us in this Google
252:34 - collab environment now the moment this
252:36 - is done you will require one more
252:38 - Library through which you will be
252:40 - performing the visualizations and as you
252:42 - might have guessed it is M plot so I'm
252:45 - also going to import matplot lib along
252:48 - with that pip
252:50 - plot as
252:53 - PLT now it's not that we are just going
252:55 - to use m. Li okay as I also installed
252:57 - this kind of Astro query you're are also
253:00 - going to use some of the functionalities
253:01 - of this particular library in order to
253:04 - call that image as I mentioned about the
253:06 - androm Galaxy and along with that
253:09 - there's one more Library called as
253:10 - astropy even that is the one that you're
253:13 - going to use in upcoming videos but for
253:16 - now there were only two basic steps that
253:18 - I really wanted to show you that with
253:19 - the help of what library you will be
253:22 - calling this image of entoma Galaxy into
253:24 - your Google collab notebook and then
253:26 - obviously in order to visualize it what
253:28 - is the library that we are going to use
253:30 - that is met plot now in the next video
253:33 - you are going to see some of the amazing
253:35 - things uh through which you are just
253:37 - going to be completely shocked like you
253:38 - know these kind of things we can do in
253:40 - Python so stay tuned for
253:43 - that hey guys welcome to the fifth video
253:46 - of module 3 and here we are going to
253:48 - take a look onto the internet's virtual
253:51 - telescope with the help of Sky View form
253:54 - so what exactly is this form and how we
253:56 - can get the image of the anoma Galaxy
253:59 - out of this let's look into that in this
254:01 - particular
254:02 - video so let me introduce you all to
254:05 - this interesting form called as Sky View
254:07 - query form now with the help of this
254:10 - form you're going to get this access of
254:13 - this Andromeda galaxy so if I just click
254:16 - on this particular link it's going to
254:17 - redirect me to that particular site
254:20 - where I can access the sky view query
254:22 - form so what is this form all about as
254:25 - you can see it is the internet's virtual
254:28 - telescope so with the help of this
254:30 - particular query form you can query
254:33 - about any kind of image that you're
254:35 - looking forward to that is M3 31 in our
254:37 - case that is Andromeda galaxy so for the
254:41 - Andromeda Galaxy from all the possible
254:44 - available surveys over here we just need
254:46 - to give some of the selections that we
254:48 - want to visualize our M31 in so the
254:52 - telescope that we are going to use is
254:54 - the sdss and DSs and both of them are in
254:57 - the optical range and uh with the help
255:00 - of sdss I'm going to perform some of the
255:04 - uh image processing task and with the
255:06 - help of DSs I'm going to show you the
255:08 - whole output of how this kind of Galaxy
255:11 - looks like in Python okay we're going to
255:13 - do all these kind of things in the
255:15 - upcoming videos but for now let's see if
255:17 - I want to visualize this data in this
255:18 - form itself without using python how can
255:21 - I do it so for example if I'm clicking
255:23 - on this SD SSG and click on enter
255:26 - because I have already pre-selected this
255:28 - particular object as or source as M31
255:32 - that's the entoma Galaxy and I'm using
255:34 - this particular survey called sdss of
255:37 - gband is going to give us this
255:39 - particular output now what is this this
255:43 - is the extreme center of the Andromeda
255:46 - galaxy or I should say the core of the
255:49 - Andromeda galaxy so if I just have to
255:52 - show you over here the extreme core over
255:55 - here this kind of like you know this
255:56 - kind of bright part you are seeing this
255:58 - bright part so that bright part if you
256:02 - are trying to just dim that thing and
256:03 - look exactly into the center that Center
256:07 - is nothing but what is visualized over
256:10 - here just in case if I really want to
256:12 - show you what this means this is very
256:15 - zoomed in version of what's going on in
256:17 - the center of this particular core of
256:19 - Andromeda galaxy and we are going to
256:21 - perform our all the kind of image
256:24 - processing on top of this particular
256:27 - output but now what if I want to like
256:29 - you know just zoom zoom out a bit and
256:31 - show you with respect to some other uh
256:33 - survey that is the S DSS and let let let
256:36 - me select this DSS2
256:39 - blue and uh I'll just what I'll do one
256:42 - thing I'll clear every survey sections
256:44 - and then again select this blue and this
256:47 - time I'll just change the setting of
256:49 - image size pixels from 300 to 600 and
256:54 - now if I submit this
256:56 - request see this is the kind of output
256:58 - that we are seeing I have zoomed out
256:59 - only by a bit I have doubled the pixel
257:03 - size so I'm getting much more output as
257:05 - compared to what we were seeing for a
257:07 - much larger output but now it's still
257:10 - like you know if I just compare it with
257:11 - the original image over here it's this
257:14 - kind of part that you are able to
257:15 - visualize if I just zoom
257:17 - in say I'm not able to zoom in any
257:19 - further than this but now this is the
257:21 - power of the telescope images that we
257:23 - are having this is visualizing at the
257:25 - extreme center now over here in this
257:27 - specific image you are not able to look
257:29 - into that extreme core because we are we
257:31 - have zoomed out a bit however you are
257:34 - able to see some of this kind of bands
257:36 - or of this particular Galaxy and this
257:38 - bands are nothing but the bands that you
257:40 - are seeing over here so this is a very
257:42 - zoomed in image now what I'm going to
257:44 - perform over here for you guys in the
257:46 - upcoming videos is that with the help of
257:48 - this uh DSS2 blue we are going to try to
257:52 - visualize this whole Li uh not library
257:55 - but the image the whole image of this uh
257:58 - Andromeda galaxy I'm going to try to
258:00 - visualize this kind of thing for you uh
258:03 - with the help of a DSS2 blue and then
258:06 - with the help of sdss G that 300 by 300
258:10 - pixels that we had seen we are going to
258:12 - perform image processing over there and
258:14 - try to decode what all kind of
258:16 - structures we are able to find out of
258:18 - that simple looking thing that we had
258:20 - seen earlier this
258:22 - thing okay I guess oh I selected two
258:25 - surveys this is the first survey and
258:27 - this is the second survey right this was
258:29 - the first DSS2 blue and this is the
258:32 - second one that was the main reason why
258:34 - I primarily went away over here and
258:36 - clicked on uh clear survey selections
258:39 - because I could I don't want to see both
258:40 - the things I just wanted to see one but
258:43 - anyway these are both the surveys over
258:45 - here uh on with respect to DSS2 the
258:49 - zoomed out version 600 by 600 and over
258:52 - here this is
258:53 - 300x300 focusing extremely on the core
258:56 - of this particular Galaxy so now in the
258:59 - upcoming video we are going to call this
259:01 - data of Sky View query form with the
259:04 - help of Astro query Library into python
259:06 - so it will be really interesting to see
259:08 - how we can do this so stay tuned for
259:10 - that hey guys welcome to the sixth video
259:13 - of module 3 and here we are going to use
259:16 - the Astro query library in order to get
259:19 - the access of the sky view that we had
259:21 - seen in our previous video and from
259:23 - there we are going to fetch this data of
259:25 - Andromeda Galaxy from a particular
259:28 - survey that is sdss specifically gband
259:31 - okay all these things you will be
259:33 - understanding in this video but the
259:35 - output of this will be of Fitz file and
259:38 - now that you are also aware about the
259:39 - Fitz file it will have two types of
259:41 - information header and data so header
259:43 - will consist of metadata and data will
259:46 - have some kind of image present over
259:48 - there so we going to take that image
259:50 - data and visualize the output of the
259:52 - anoma Galaxy and just compare it with
259:55 - the actual view that we had for the
259:57 - anoma Galaxy using the sky view
260:00 - form so now that you are aware about
260:03 - what is this Sky View query form where
260:05 - you can give in the information about
260:07 - the source that you want to visualize
260:09 - with respect to any of this available
260:11 - survey options right now we have already
260:13 - visualized with respect to Optical sdss
260:16 - and DSs but now specifically if I let's
260:19 - say want to visualize this sdss G in my
260:23 - python so basically what I'm trying to
260:25 - do is I'm trying to I hope this is yeah
260:27 - this is sdss gband so I'm trying to
260:30 - visualize this particular information
260:32 - with respect to python so how we can do
260:35 - this with the help of Astro query
260:37 - Library let's try to look into that so
260:39 - for that what I have to do is first of
260:41 - all I need to get this Sky View
260:44 - functionality in Python and I can do
260:46 - this with the help of estro query
260:48 - library with this command EST from estro
260:53 - query. Sky
260:55 - View I need to import Sky View
260:59 - class so with the help of this Sky View
261:02 - class we are going to use one of the
261:04 - method of this Sky View class through
261:06 - which we can fetch this data of M31 of
261:10 - this particular server and I can do this
261:12 - with this command sky
261:15 - view the moment I press this dot it's
261:18 - going to give me all the possible
261:19 - methods associated with this Sky View
261:21 - class and now because we are interested
261:24 - to get this images I'm going to click on
261:26 - that and now let's see what kind of
261:28 - inputs we can give to this particular
261:30 - method so I'm just pressing the
261:32 - parenthesis and I'm just waiting for a
261:33 - while and now this is the kind of popup
261:36 - that I'm able to see automatically on
261:38 - Google collab and the first input is
261:40 - going to expect is the position which is
261:43 - nothing but the M31 in our case the
261:46 - second input that is expecting is the
261:48 - survey which is going to be SD SSG in
261:51 - our particular attempt that we are
261:53 - trying to visualize something all the
261:55 - kind of other information you can keep
261:57 - it as of whatever it is I'm not going to
261:59 - change anything and we are going to do a
262:01 - lot of different stuff on top of that
262:03 - that's why I'm not changing any kind of
262:05 - things as of now and uh so yeah let me
262:08 - give the input of M31 as the position
262:11 - and the survey as SD SSG and the moment
262:14 - I run
262:15 - this I am getting a list within a list
262:20 - right I'm getting this kind of square
262:21 - brackets which is called as a list and
262:24 - inside that I'm having one more list and
262:26 - inside that inner list I having this
262:28 - kind of a file now what is this file
262:32 - this is a file which is called as a fits
262:34 - file that we had talked about ear
262:36 - earlier in this particular module we had
262:38 - talked about how this kind of fits file
262:40 - is created it is having some information
262:42 - about a primary header for sure and some
262:45 - of the metadata associated with that now
262:48 - along with that it might or it might not
262:50 - have this kind of extension uh headers
262:54 - and the data associated with that so in
262:56 - our case as we are seeing only one
262:58 - primary header it's basically indicating
263:01 - that we are having information about the
263:02 - primary header and with respect to that
263:05 - what is the metadata with it and any
263:08 - kind of extension information is not
263:10 - given to us and that's the reason why we
263:12 - are having only one information within
263:15 - this kind of main
263:17 - list now that's exactly what we are
263:20 - going to fetch out of this list and get
263:22 - this hdu file from it how we can do this
263:25 - first of all I'm having this kind of the
263:27 - original list the main list inside which
263:30 - there is one list so let's get access to
263:32 - that inner list I can do this with the
263:34 - help of this index zero because I know
263:37 - that this particular list is present on
263:39 - the zeroth index now if I run this code
263:41 - and show you the output let's see what
263:44 - do we
263:45 - get so as expected we are now into the
263:47 - inner list now inside this inner list we
263:50 - also again see that this hdu file is
263:53 - present in the zeroth element on the
263:56 - first position basically so I again need
263:58 - to pass this zero and now we are
264:01 - successfully going to get this hdu file
264:03 - that we are looking forward to and now
264:06 - this is is nothing but the primary hdu
264:07 - so I'm just going to store it in a
264:08 - variable called as
264:11 - hdu now always remember HD is coming
264:14 - with two different type of information
264:16 - one is the metadata which is going to
264:18 - give us all the kind of details with
264:20 - respect to the Fitz file who has created
264:22 - it when was it created the information
264:25 - about the telescope and the survey that
264:27 - was used to fetch this particular data
264:29 - every kind of information will be stored
264:31 - as a metadata in the format called as
264:34 - header now along with header there is
264:36 - one more kind of thing we call as data
264:39 - now that data as I explained earlier
264:41 - could be in the format of an image could
264:43 - be a tabular data right all this kind of
264:45 - information could be there so now let's
264:48 - try to understand first of all the
264:50 - metadata that is associated with this
264:52 - primary hdu now I can do this with this
264:55 - function called as header of this hdu so
264:58 - hdu do header this is the only command
265:02 - that I'm typing to get all the metadata
265:05 - information associated with
265:07 - it now as you can see that this is the
265:10 - file written by the sky view Thursday
265:13 - December 14 uh with this particular uh
265:16 - time and everything the information when
265:19 - this particular file was written after
265:22 - that we are also having this particular
265:24 - idea that it is containing a twood
265:26 - dimensional image as well what is the
265:29 - width of the image 300 what is the
265:31 - height of the image 300 if you remember
265:34 - in the sky view form itself by default
265:36 - it was having 300 pixels if I don't
265:38 - write this if I just refresh this by
265:41 - default it was giving us this 300 and
265:43 - that's the exact reason why we are
265:45 - having this 300 by 300 I can surely go
265:48 - ahead and manually change this to 600 if
265:50 - I want but I'll be doing this for the
265:52 - other Optical survey that is the DSs
265:54 - survey right uh this particular survey
265:57 - DSS 2 I'll be showing that in the
265:59 - upcoming videos but let's now focus on
266:01 - this particular part see by default the
266:03 - pixel size is set to 300 so that's the
266:06 - reason why we are again saying this kind
266:07 - of 300 by 300 so all of this information
266:11 - with respect to this see again there's a
266:12 - comment with respect to Sky View survey
266:15 - metadata right then all the respective
266:18 - information the copyright information
266:20 - survey information uh projection
266:23 - information coordinates information uh
266:26 - Epoch information all of this particular
266:28 - thing is given over here in the sdss
266:32 - there are multiple data releases this is
266:34 - part of data release 9 dr9 again this
266:37 - kind of information is there so
266:39 - obviously it will take a lot of time for
266:41 - me to explain each and every part of
266:42 - this metadata you get used to it once
266:45 - you're having more and more practice
266:47 - with respect to like you know dealing
266:48 - with the fits file specifically the
266:50 - astronomical data but right now the key
266:54 - takeaway for you is that in this Header
266:56 - information of the hdu file you get this
266:59 - kind of basic information right you can
267:02 - just keep on scrolling and get any kind
267:04 - of respective useful information for for
267:06 - you so that was about with respect to
267:08 - metadata now what about because we know
267:11 - that it's also containing some kind of
267:12 - image how can I fetch that image out of
267:15 - this particular HDO file so for that
267:18 - I'll just scroll
267:19 - down and see here I also written the
267:22 - comment that get the pixel data that is
267:24 - present from this hdu now I simply need
267:27 - to do
267:28 - hdu do
267:30 - data how I did hd. header for the
267:33 - metadata just like that I need to to do
267:36 - hd. data in order to get this pixel
267:40 - information and as we had seen it's in
267:42 - the format of float 32 where we had seen
267:45 - this uh if I just scroll up this is
267:48 - where we had seen this now it's like you
267:51 - know it's also including some kind of
267:53 - negative numbers and it could have
267:54 - positive numbers and it's of a float 32
267:57 - type it's a floating Point numbers of
267:59 - array and is a float 32 type again in
268:03 - the beginning of this particular module
268:05 - i x explained about this images all of
268:08 - this kind of pixels so this pixels are
268:10 - in the range of 0 to 255 or a uh uint 8
268:14 - image but right now we are dealing with
268:16 - the float 32 Type image and it's a like
268:20 - you know the sign is also playing an
268:22 - important role it means it might have
268:25 - some kind of negative data some kind of
268:26 - positive data okay don't worry about all
268:28 - these kind of things I'm not going to go
268:30 - into any kind of uh further technical
268:33 - details but see now we are having this
268:34 - kind of a data and it's of a type float
268:37 - 32 even this kind of information was
268:40 - present in the metadata so over here
268:44 - this is nothing but the
268:46 - M31 pixels data I'm going to sh store
268:51 - this particular thing as the M31 pixels
268:54 - data because this is a format of an
268:57 - array so this array is nothing but in
268:59 - the format of an image and now check the
269:02 - type of uh this particular M31 pixels
269:07 - that we have created now I have already
269:09 - told you that it's a array now how do
269:11 - you know it's a nump array you can use
269:13 - this functionality of type and just pass
269:15 - in this
269:16 - M31
269:17 - pixels if I run
269:20 - this it is a numpy array numpy array and
269:24 - dimensional array basically okay now
269:26 - what is the shape it must be 300 by 300
269:29 - by 300 as we had checked in the metadata
269:31 - so let's even try to check that M31
269:34 - pixels dot shape it must be 300 by 300
269:38 - if not then we are doing some kind of
269:39 - mistake see it's 300 by
269:41 - 300 the exact same thing that we had
269:45 - seen in the metadata right now the next
269:49 - thing that we are going to do is to
269:51 - visualize this particular image now how
269:53 - we can do this I can do this with the
269:55 - help of pl. IMO in order to visualize
269:59 - any kind of numpy array any kind of
270:03 - array data associated with num Pi ARR if
270:06 - you want to visualize it you use this
270:08 - PLT and then I am sure now with respect
270:12 - to that you given the information of the
270:14 - array that you are trying to
270:16 - visualize and you just hit uh run this
270:19 - particular code cell and let's see what
270:22 - kind of output you
270:23 - get this is the kind of output you are
270:26 - getting currently right by default the
270:29 - color map that we are able to see this
270:32 - is VAR it is okay if I show you C map is
270:36 - equal to vus so by default mat plot lab
270:40 - is going to get this color map of vus
270:43 - see you can see there is no change
270:44 - because by default color map that was
270:46 - used for this 2D image 2D image means a
270:49 - gray scale image okay so I can also
270:51 - convert this into a gray color if I want
270:54 - even that is
270:56 - fine because this is the kind of some
270:58 - kind of similar output that we had seen
270:59 - over here now let me tell you that there
271:02 - is some kind of pixel scaling that has
271:04 - been done on top of this image that's
271:07 - why you are seeing much more information
271:08 - as compared to this raw data we are
271:10 - seeing over here and that's exactly what
271:13 - we are going to do in some of the
271:14 - upcoming videos so stay tuned for that
271:16 - but for now what I'm really uh
271:18 - interested to show you over here is that
271:21 - our data is starting from 0 to 300 but
271:25 - on the y axis it's going in the opposite
271:27 - way zero is on the top so we need to
271:30 - bring down this particular origin over
271:33 - here so how we can do that I can can
271:35 - simply pass in the command of origin is
271:38 - equal to lower inside this IM show
271:41 - itself so now if I run
271:44 - this you will be seeing that now the
271:47 - origin is uh over here and now this is
271:50 - the kind of the center that we are
271:52 - seeing over here and how we can reveal a
271:55 - lot more other information as you can
271:57 - see over here of course I can give some
271:59 - of the uh input parameters like you know
272:02 - I can just change some of the input
272:03 - parameters while calling this uh image
272:06 - get image but I'm not going to do all
272:08 - that kind of stuff I'm going to show you
272:10 - manually how you can try a lot of
272:12 - different ways of pixel scaling in some
272:15 - of the upcoming videos okay right now in
272:18 - this video I just wanted to show you
272:20 - that out of these two survey that we are
272:22 - going to use how I can show you at least
272:25 - one of the survey so that you are able
272:26 - to appreciate that yes with the help of
272:29 - this Astro query
272:31 - Library we have imported this class
272:33 - called sky view from this sky I there
272:35 - was an method called as get images now
272:39 - this is going to give us the fits file
272:41 - that is written with the help of estrop
272:44 - Library not estr query but estrop Pi
272:47 - okay again estrop is one of the library
272:49 - in Python which is associated with this
272:52 - estro query also so with the help of
272:54 - that estrop Pi we are writing that fits
272:57 - file so because it was in the format of
273:00 - a list we are extracting this kind of
273:03 - list data and getting h from that and
273:06 - once we got that hdu out of it we are
273:09 - looking into the metadata and any kind
273:11 - of data Associated along with that
273:14 - metadata and for us it was image uh in
273:17 - this particular case it's not always
273:18 - image just remember that over here we
273:20 - were having the image data we took we
273:23 - took a look onto the what type of that
273:25 - uh D array was it's a numpy array
273:28 - basically and we can check this kind of
273:30 - shape on top of that that is 300 by 300
273:33 - and also we have visualized this by
273:35 - Shifting the origin to the lower so that
273:39 - this kind of z0 is matched now in some
273:42 - of the upcoming videos you will be
273:44 - seeing that with the help of the pixel
273:46 - scaling techniques how we can convert
273:49 - this kind of raw data into something
273:51 - like this okay and along with that I'm
273:55 - also going to show you in some of the
273:56 - upcoming videos in this module that how
274:00 - you can visualize this kind of overview
274:02 - I'm not going to add any kind of color
274:03 - information okay I'm not going to do any
274:06 - kind of that kind of uh color processing
274:09 - I am just going to show you that with
274:11 - the help of this Sky View how you can
274:14 - look into this kind of bigger output
274:17 - also a zoomed out version also okay so
274:19 - I'm going to give you all of this
274:21 - information in the upcoming few videos
274:24 - so again just stay tuned for
274:26 - that hey guys welcome to the 7th video
274:29 - of module 3 and here I'm going to show
274:32 - you one another survey with respect to
274:35 - which again we are going to fetch the
274:36 - data of Andromeda galaxy but this time
274:39 - we are also going to tweak in some of
274:40 - the parameters so that we are able to
274:43 - not just see the core of the Andromeda
274:45 - galaxy rather the overall Galaxy that
274:48 - you must be seeing on the internet all
274:50 - over whenever you are searching for the
274:51 - Andromeda galaxy so that's the kind of
274:54 - output that I'm looking for not in terms
274:56 - of colors but at least the image which
274:59 - is clearly showing you that yes this is
275:01 - the Andromeda galaxy so that's something
275:04 - that we're going to do in this video so
275:05 - let's get
275:06 - started so now that we were able to
275:08 - fetch this information of the Andromeda
275:11 - Galaxy from the uh s dssg Optical survey
275:15 - that we were having now we are going to
275:17 - go ahead and call this DSS2 blue and
275:22 - visualize the output in a much more
275:24 - zoomed out fashion as compared to what
275:26 - you are seeing over here okay how can I
275:29 - do this with in Python let's try to
275:31 - understand that so again what I'm going
275:33 - to do is first of all I'm going to copy
275:35 - this this part of the
275:36 - code and come down over
275:40 - here and uh call this but now at the
275:43 - same time I'm going to change this to
275:45 - DSS to
275:47 - Blue right now along with that now
275:50 - because I want to see the zoomed out
275:52 - version of this I need to pass in
275:56 - further more arguments over here in the
275:58 - get images so one thing that I can give
276:02 - apart from the position and this survey
276:06 - is the
276:08 - pixels now inside this pixels
276:10 - information what all kind of things I
276:12 - can give I can give by default it is 300
276:15 - by 300 I can let's say give 600 but now
276:18 - at the same time I'm also going to
276:20 - increase the radius of it so that we are
276:23 - able to see much more wider view of what
276:26 - we are seeing over here okay over here
276:28 - also 600 by 600 is still giving us a
276:32 - little bit zoomed out version but I want
276:34 - to expand the radius of this particular
276:37 - image so that we are able to see a lot
276:39 - more information in this 600x 600 so for
276:43 - that I need to say let's say for example
276:45 - 150 now I need to convert this into arc
276:48 - minutes okay I need to convert this into
276:52 - arc minutes how can I do this I can do
276:55 - this with this Library called astropy
276:57 - that I talked about in the previous
276:58 - video so from
277:01 - astropy dot or I should say import
277:06 - estrop do units as U and this U that is
277:12 - the units will help us convert this 150
277:15 - into the arc minutes how I'm going to
277:17 - multiply
277:19 - this uh into U do AR mean that is Arc BS
277:25 - and now if I try to just run this
277:27 - particular
277:30 - cell okay it's giving me some kind of an
277:33 - error the spelling of pixels is
277:34 - incorrect no
277:37 - problem now if I run this I'm going to
277:40 - sort that
277:41 - out it's going to take a little bit more
277:44 - time as compared to what we had seen in
277:45 - our previous video to fetch the hdu file
277:49 - because it's taking a lot more pixels
277:51 - and also the radius is very uh like you
277:54 - know we have increased the radius and
277:56 - therefore now if I go ahead and try to
277:58 - get only the pixels data from this hdu
278:01 - data okay and this is nothing but the
278:04 - like you know
278:06 - M31 with respect to DSS2 blue
278:11 - pixels and now if I try to just run this
278:15 - code and look into the shape of this M31
278:19 - DSS 2 blue
278:22 - pixels do
278:25 - shape it's going to be 600 by 600 but
278:29 - now just look into the magic the moment
278:31 - I'm doing PLT do IMO of the same
278:37 - thing giving the color map as gray and
278:41 - at the same time I'm also uh doing
278:44 - origin is equal to
278:46 - lower I run this
278:51 - now see this is the kind of image that
278:54 - we are seeing the same image that we are
278:56 - having over here very similar to this we
278:59 - are able to see that there is one more
279:02 - Galaxy near the Andromeda galaxy this is
279:04 - the satellite galaxy of the Andromeda
279:07 - this messia 32 is one more satellite
279:09 - Galaxy to this Andromeda and this
279:11 - galaxies are going to like you know come
279:14 - and collide with the Earth right in some
279:17 - billion years ahead and form a
279:19 - combination of Andromeda and Milky Way
279:22 - We also call it like you know as
279:23 - milkomeda there is this kind of name
279:25 - that we have given to this like you know
279:27 - when this kind of collision will happen
279:29 - between the Andromeda galaxy and the
279:31 - Milky Way galaxy we will call it as mil
279:33 - omeda and milk droma something like that
279:37 - okay there are some weird names we have
279:38 - given that is the combination of both of
279:40 - these galaxies but anyway see now we
279:42 - have exactly got this data that we were
279:46 - looking into I'm not going to add any
279:47 - kind of color
279:48 - information just look into the moment I
279:51 - have changed this kind of uh
279:53 - particular survey we are able to get
279:56 - this kind of output the whole anoma
279:59 - galaxy you are able to see over here
280:01 - this is M Messier 110 this is year 32
280:06 - all of this information we are able to
280:08 - see even over here there is a star
280:10 - cluster even that information is
280:13 - visible so we have done all of this with
280:16 - just one line of code over
280:19 - here but now this is not what I really
280:22 - want to do obviously we've got all of
280:24 - this things this is really very cool
280:26 - right but now let's do some of the image
280:29 - processing with respect to this score of
280:32 - this Andromeda Galaxy now that's
280:35 - something that we'll be doing in some
280:37 - later part of the uh module before that
280:40 - let me show you because we are having a
280:42 - lot of information with respect to a
280:44 - Header information even this kind of
280:46 - image information if you want to create
280:49 - your own fits
280:50 - file just like how these guys are
280:53 - creating this fits file if you want to
280:55 - create your own fits file like this how
280:57 - you can create it after that we'll be
280:59 - jumping onto all the kind of image
281:01 - processing and interesting stuff before
281:03 - that this one part that I really want to
281:05 - show to the people who are really
281:07 - interested to know how this kind of fits
281:09 - file are made so for that just watch the
281:11 - upcoming video and you're going to get a
281:13 - good idea about how you can create your
281:15 - own particular fits
281:18 - file hey everyone I welcome you to this
281:21 - eighth video of module 3 where I'm going
281:24 - to teach you how you can create your own
281:26 - fits file so obviously we don't have our
281:29 - own telescope like you know that's going
281:30 - to capture all of these kind of things
281:32 - and get our metadata and also get the
281:34 - the image so what we are going to do is
281:36 - we are going to use the same header and
281:38 - the image that we have obtained in one
281:40 - of our previous videos of the Andromeda
281:42 - galexy use that as the dummy data and
281:45 - create our dummy fits file okay so how
281:48 - exactly we can create it is what I'm
281:49 - going to show you in this video and once
281:52 - it is created we are also going to test
281:54 - it and see if it's working just fine as
281:56 - we expect it to work right so let's get
281:58 - into
281:59 - it so let's try to understand that if
282:02 - you're having this kind of metadata
282:04 - information
282:05 - and this kind of image data information
282:07 - with you then how you can create your
282:09 - own fits file just like how we had seen
282:11 - Above So for that I'm going to use this
282:14 - Library called as astropy just like what
282:17 - I had shown you in the upcoming uh I
282:19 - mean in the previous videos that over
282:22 - here the hdu file is in the like you
282:24 - know format of astropy do. fits so to
282:28 - create your fits file you need to import
282:30 - this particular thing in Python first of
282:32 - all so that's exactly what I'm going to
282:34 - to do in the first step over here I'm
282:36 - going to say that from
282:40 - astropy
282:43 - import I should say from astropy
282:46 - doio import
282:49 - fits so now it's going to give me the
282:52 - liberty of creating the fits file and
282:55 - you had seen that it was in the format
282:56 - of a list right within a list there was
282:58 - the hdu file that we were having the
283:00 - primary hdu file so we are going to take
283:02 - the same exact metadata dat that we had
283:05 - seen over here right and I'm going to
283:07 - store this metadata over here as let's
283:09 - say M31 Header
283:12 - information okay and at the same time we
283:15 - are also having the information about
283:17 - the pixels so I'm going to add the same
283:20 - data into my separate hdu file that I'm
283:23 - creating because obviously I'm not
283:24 - having any kind of existing metadata or
283:27 - the image data so I'm going to use the
283:29 - same information to create uh complete
283:33 - fits file from scratch so for this what
283:35 - I have to do first of all I'm going to
283:37 - initiate this kind of empty list that
283:40 - I'll be creating with the help of fits
283:42 - and I can do this with this command
283:43 - fits. hdu
283:46 - list it's going to help us store
283:48 - different hdus within that list and I'm
283:51 - going to call this as the hdu list okay
283:53 - like this now the second thing is to
283:56 - create the primary hdu the moment you
283:59 - are creating this empty list you need to
284:01 - pass in some kind of hdu information so
284:04 - the one that I'm going to create is the
284:06 - primary hdu okay uh it's not dhu it's
284:10 - hdu and how we can do this again I'm
284:12 - going to use this fits but on top of
284:14 - that I'm going to use
284:18 - primary
284:22 - HD now what this is okay first of all
284:24 - let me show you what this is this will
284:27 - be an empty list and in this empty list
284:30 - I'm going to pass in this hdu file that
284:33 - I'm going to create
284:35 - I'm going to copy this also I'm going to
284:37 - paste that over
284:40 - here so see this is again an astropy i.
284:43 - fits file it's going to give us the
284:45 - primary hdu but now what if I'm trying
284:48 - to let's say give this uh as some kind
284:50 - of a name called HD1 for
284:53 - example okay and now if I'm trying to
284:56 - look into HD1 do data if I'm just doing
285:02 - this it's it's not having any kind of
285:05 - information as of now in the primary hdu
285:07 - it's completely empty even for the
285:09 - header it will have some of the basic
285:12 - information that like you know it's uh
285:14 - conforming uh to fit standard then it's
285:17 - a array data type it's not currently
285:20 - having anything number of Dimension is
285:22 - zero right so we are going to fill all
285:23 - of this kind of information over here
285:26 - with respect to M31 metadata that is the
285:28 - M31 header and in place of data we are
285:31 - going to pass in the pixel values that
285:33 - we were having so let's try to do that
285:35 - first of all we are going to add the
285:37 - pixel data how we can do this we can say
285:40 - that hdu one that we had
285:42 - created because now it's a primary hdu
285:46 - it's coming in uh with this
285:48 - functionality of data and what is this
285:50 - data this is the M31 pixels that we had
285:53 - created earlier similarly that like that
285:56 - I can also add HD1 do header what is
286:00 - this M31 header that we just created a
286:03 - few seconds back so now what I'm doing I
286:07 - had created a primary hdu in that
286:10 - primary hdu I adding some kind of data
286:13 - information I'm assigning this M31
286:16 - pixels to this HD1 data which was
286:18 - initially empty when I had showed you
286:19 - over here
286:21 - right and after that I'm also filling in
286:24 - the information about the header
286:25 - assigning this M31 header that we had
286:27 - gone above now once this uh hdu file is
286:32 - ready once this hdu one file is ready if
286:34 - I run this code now and I show this hdu
286:37 - one. data
286:40 - now now it will have this kind of
286:42 - information see even the Header
286:44 - information it will
286:46 - have because I assigned this kind of uh
286:49 - data to the HD1 that's why now it is
286:51 - having the data now our duty is to pass
286:55 - this uh primary hdu into the list that
286:57 - we had created that is going to finally
287:00 - create one fits file for us right it is
287:03 - having some list within this list we are
287:05 - having this hdu so how you can do this
287:07 - we know that we can add any kind of data
287:10 - to the list with the help of append
287:12 - function so what I'm going to do is I'm
287:14 - going to call hdu list. append and what
287:18 - kind of information I want to add it's
287:20 - the hdu one
287:21 - information which is nothing but the
287:23 - primary hdu that we had created over
287:25 - here that's it so our fits file is ready
287:30 - now in order to download this fits file
287:33 - or to write this write this fits file
287:36 - what I'm going to do there is a
287:38 - functionality called as right two right
287:41 - two is going to help us finally save
287:44 - this fits file so what I can say let's
287:46 - say
287:48 - hdu list that's the main fits file right
287:50 - a list within that list we are having
287:52 - the primary hdu so hdu list I want to
287:56 - write to this particular list as the
287:59 - fits file we can call it as a
288:02 - dummy dummy fits
288:06 - file Dain
288:08 - fits file and that is in the format of
288:11 - fits so do fits right so HD list. WR to
288:16 - and giving it a name this if I run this
288:19 - code and if I look into this file
288:23 - storage you can see that this fits file
288:24 - has been created for
288:26 - us the same fits file that we were
288:28 - importing from the sky view uh query you
288:32 - are now able to save the same
288:34 - information into the fits file and now
288:36 - you can like you know also do a lot of
288:38 - different things with this but right now
288:40 - that's something that I really wanted to
288:41 - show you that if you want to create your
288:43 - own fits file how you can do this with
288:44 - the help of astropy
288:46 - library now that we are uh creating this
288:50 - particular hdu file for the primary
288:52 - header I mean primary hdu like this you
288:54 - can create extend uh extension headers
288:57 - also if you're having the information
288:59 - you just do a fit. extension header and
289:02 - you give some kind of data to it give
289:04 - some header to it and append that
289:06 - particular hdus that you are creating in
289:08 - the HD list and then again do this right
289:11 - to for that list that you have created
289:13 - and you will be having even the
289:14 - extension headers if if you are having
289:17 - okay so yeah it's something that you
289:19 - really want to experiment by yourself uh
289:21 - if you're having multiple header and its
289:23 - respective data information so you can
289:25 - create multiple extension uh to the hdu
289:28 - file or the fits file okay so now let's
289:32 - try to open this fits file that we have
289:33 - have generated how we can do this I can
289:36 - do this with the help of
289:38 - fits. open if you are having access to
289:41 - the fits
289:42 - file you copy this path you give this
289:45 - path as an input to this where it went
289:48 - it's over here you give it in the format
289:50 - of a string let's say I'm calling this
289:52 - as some kind of like you know again
289:54 - let's say my bit something like that
289:57 - okay my bits is equal to this if I'm
290:00 - running
290:01 - this okay let's uh look at into this
290:04 - particular let's say what is my
290:07 - fits so it will be a list and within a
290:10 - list there is this kind of hdu primary
290:13 - hdu that we had created right so now
290:16 - what is present inside the first index
290:18 - of this bits obviously this thing so my
290:22 - fits of zero is having what it's having
290:25 - this kind
290:26 - of primary hdu file that you had created
290:29 - with the help of estrop py. i. fits now
290:32 - if you want to check this header
290:33 - information so you do my fits of zero.
290:37 - header you could have also saved it into
290:40 - some kind of a variable called uh dummy
290:42 - hdu and then you can take dumy hd.
290:45 - header even that is fine so you can see
290:47 - now there is a header you can also do uh
290:50 - this for the data part the pixels part
290:52 - my
290:53 - fits 0. data
290:57 - right again now you can store it as a
291:01 - variable let's say this is uh
291:04 - dummy data variable and I'm saving uh
291:09 - this data over here and then I'm taking
291:11 - checking the shape of
291:12 - this Dy data variable.
291:16 - shape so because M31 was the
291:20 - sdss from that particular sub we had got
291:23 - that data it's by default 300 by 300 so
291:26 - that's why we getting that particular
291:27 - shape and if you want to get the type of
291:30 - the variable you do type of the that
291:35 - dummy uh data
291:37 - variable check this it will be a numpy
291:41 - array right so as you can see I've also
291:44 - cross checked this particular thing the
291:46 - moment we were creating it and even
291:48 - after creating it once we are saving it
291:51 - I am also importing it back with the
291:52 - help of fits. open command and checking
291:55 - all of this if it's working in a proper
291:57 - way or not and yes that's how you can
291:59 - create your own fits file if you're
292:01 - having access to the Header information
292:04 - uh as well as the data information so
292:06 - that's what that was about how you can
292:08 - create your own fits file now in the
292:09 - upcoming video we are going to talk
292:11 - about the pixel scaling that we were
292:13 - mentioning about before this particular
292:15 - video and that's where the fun begins
292:19 - guys hey everyone I welcome you all to
292:22 - this ninth video of module 3 where I'm
292:24 - going to show you the distribution of
292:26 - pixels with the help of an histogram but
292:29 - before that I'll also be showing you the
292:31 - summary statistics of the pixels that we
292:33 - are having of the Andromeda galaxy and
292:35 - after that I'll be showing you the
292:36 - visualization so let's get into this
292:39 - video so first of all what I'm trying to
292:42 - do over here is to get the summary
292:44 - statistics of the numpy array that we
292:47 - had created for the M31 pixels what is
292:50 - this M31 pixels if I just give you a
292:52 - very quick summary of this so M31 pixels
292:55 - was the uh value of the image data that
292:58 - we had captured from the fits file that
293:01 - we had seen for the uh slow digit Sky
293:04 - survey gband so from this we had fetched
293:07 - this particular information of the numpy
293:09 - array which is nothing but the array of
293:11 - pixels which is eventually
293:14 - forming this kind of output I'm going to
293:17 - set the color map is equal to Gray and
293:19 - also set origin is equal to lower for
293:21 - the same reasons that you had seen in
293:23 - the previous
293:24 - videos and the output that you'll be
293:26 - seeing over here is like this a plane
293:29 - output which is just highlighting the
293:31 - center part of the Andro Roma Galaxy
293:34 - like this but everything else is just
293:36 - black as compared to what you are seeing
293:38 - over here this is a much more detailed
293:41 - output that we can see as compared to at
293:43 - least what we are having over here so
293:45 - how we can get this kind of outputs by
293:48 - doing what changes on the pixels we can
293:51 - get this kind of output that's something
293:52 - that we going to look ahead to but now
293:55 - for that we need to understand what's
293:57 - wrong with this particular image so for
294:00 - that we need to do some kind of basic
294:02 - study on the pixel values which is able
294:04 - to give us this kind of an output so for
294:07 - that we need to check the summary
294:09 - statistics of this particular pixels so
294:12 - how we can do this I'm going to Simply
294:14 - use numpy that's the reason I have
294:16 - imported the numpy over here which I
294:18 - haven't as of now so import nump as
294:21 - NP so yeah now let's go ahead and try to
294:25 - uh
294:26 - print summary
294:30 - statistics of M31 pixels and excuse me
294:33 - me if my uh spellings are incorrect
294:35 - because I'm not good with them but now
294:37 - the first thing that I'm trying to print
294:39 - over here with the help of F string is
294:41 - the minimum value that is present in
294:44 - this whole array of pixels out of all of
294:47 - this 300 by 300 image that we are having
294:51 - where we are having or I should not say
294:53 - where but what is the minimum value of
294:55 - the pixel that we are having so let's
294:58 - say minimum is uh NP do mean of the
295:02 - pixel that I'm trying to find I mean of
295:05 - the array that we are trying to find if
295:06 - I just run this
295:07 - code you can see that the minimum pixel
295:10 - value is 5.35 something right and just
295:13 - like this because I want to find the
295:15 - maximum value also what is the average
295:18 - value of the pixel what is the spread of
295:20 - the pixel I'll also be needing the
295:22 - maximum mean and the standard deviation
295:24 - values of this particular array so after
295:27 - minimum I'm going to look for maximum
295:29 - I'm going to look for average value that
295:31 - is the mean and the spread basically
295:33 - basically uh over here is referring to
295:35 - the standard deviation okay so don't
295:37 - worry if you're uh looking into this
295:39 - kind of uh terms for the first time it's
295:42 - completely
295:45 - fine
295:47 - STD now let's look into the overall
295:50 - summary Statistics over here the minimum
295:53 - value is 5359 of the pixel the maximum
295:57 - value of the pixel in this array of M31
295:59 - pixels is
296:00 - 178 now if you talk about on and a
296:04 - average on an average in this M31 pixels
296:07 - array what is that value of pixel it is
296:10 - 13. 329 something so on an average the
296:14 - pixel values that you will be seeing
296:15 - will be more towards the minimum side
296:18 - it's not exactly in the center it's very
296:21 - much skewed towards the left hand side
296:24 - uh of the pixels that is towards the
296:25 - minimum side so if you want to get more
296:29 - sense of this particular data we can
296:31 - also visualize this and look into the
296:33 - reason of like you know why we are
296:35 - having this kind of 178 because minimum
296:38 - is 5.35 and the average is about 13
296:42 - something then how come maximum is 178
296:45 - over here so it could be there is some
296:47 - kind of noise that is present uh over
296:50 - here in this image I can also prove you
296:52 - this with the help of what is the pixel
296:55 - value that is at the brightest spot that
296:57 - we can see over here that is exactly at
296:59 - the center because remember that this
297:01 - kind of uh images that we are having is
297:04 - directly from the telescope who is
297:07 - focusing or I should say which is
297:08 - focusing at the extreme Center of that
297:11 - Andromeda galaxy and with the help of uh
297:14 - the metadata I can literally show you
297:17 - what is that reference pixel okay so if
297:19 - I just scroll up so over here now we can
297:22 - see over here see X reference pixel is 1
297:25 - 15.5 and the Y reference pixel is again
297:28 - 1
297:29 - 15.5 so it basically means that this is
297:32 - the center
297:34 - which was focused by the telescope in
297:36 - order to generate this particular image
297:38 - so that's where we expect the maximum
297:40 - value of the pixel to be there so again
297:44 - if you want to just cross check that
297:45 - part you can do this with the help of um
297:49 - M31
297:51 - pixels located at 150 comma 150 because
297:55 - we cannot give any kind of uh float
297:57 - values over here to get the location of
298:00 - the pixel so it is 148.5 what what about
298:04 - 150 1 and
298:07 - 151 oops yeah let's check this value
298:11 - it's 126.5 so both of these values are
298:14 - again far away from
298:17 - 178 so it basically means there is some
298:19 - kind of noise that we are having in this
298:21 - particular data and again we can go
298:23 - ahead and visualize this I can also
298:25 - first of all give this particular thing
298:27 - as a comment as uh visual or
298:32 - printing the value of pixel at the
298:37 - center of androma
298:41 - Galaxy right so yeah that's something
298:43 - that we are having over here and now
298:45 - let's try to visualize the distribution
298:47 - of these pixels with the help of
298:49 - histogram now you can again create a
298:51 - histogram with the help of M plot Li so
298:54 - what I'm going to do is I'm going to say
298:55 - PLT do hist for histogram I'm going to
298:59 - give the M31 pixels to get the
299:01 - distribution of the pixels of this thing
299:03 - so for example let's say we are having
299:05 - 300 by 300 pixel values uh over there
299:09 - whatever is the pixel that is present
299:11 - how many times you were able to see this
299:13 - in the array so that kind of
299:15 - distribution you will be seeing with the
299:16 - help of this uh histogram okay now I
299:19 - guess there is some kind of an indent
299:21 - problem so I'm just going to delete that
299:23 - part yes and now after this I'm going to
299:26 - uh also give one information called as
299:29 - bins what is this bins you will
299:31 - understand it in a while okay I'm for
299:32 - I'm just giving a value as 50 but now if
299:35 - you remember this is a 2d array it's a
299:37 - 2D image now in order to quickly
299:40 - visualize this particular thing I'm just
299:42 - going to convert it into a 1D kind of
299:44 - format using this flat operation so this
299:48 - flat on top of this numpy array is going
299:50 - to convert this into a one it's going to
299:53 - treat it as an Itor as a one dimension
299:56 - so it's quickly going to help us
299:58 - visualize this histogram basically okay
300:01 - if I don't use this flat command it's
300:02 - going to take a lot of time to get us an
300:04 - output so that's why I'm using this flat
300:07 - and quickly we are having this kind of
300:08 - an output now if you look into this kind
300:11 - of steps that we are having right you
300:14 - can play around with the steps by
300:16 - increasing or decreasing this beans
300:18 - value let's so what happens if I'm just
300:19 - using
300:22 - one so this is the kind of output that
300:24 - we are having in between 5 to 178 we are
300:27 - having just this kind of one bar so if
300:30 - you want to have a lot of proper
300:32 - visualization just increase the value of
300:34 - Bin to let's say for example
300:36 - 100 it's going to give you much more
300:38 - better distribution as compared to what
300:40 - you were seeing and if you still want to
300:42 - get a refined version of this you can
300:43 - still increase the ban values let's say
300:45 - for example
300:48 - 300 and now look into the output see
300:50 - again output is pretty much similar so I
300:52 - guess we are fine with this one and now
300:54 - clearly we can see that this is that the
300:57 - pixel distribution is completely skewed
300:59 - to the left hand side so clearly we can
301:01 - see that there were some kind of pixel
301:03 - values in the array which is not
301:05 - appearing for a lot of time so it might
301:07 - it must be some kind of noise that's
301:09 - something that we are expecting right so
301:12 - this is the kind of observation that we
301:13 - were able to get over here now in the
301:16 - upcoming videos you will be seeing what
301:18 - are some kind of different pixel scaling
301:20 - techniques through which we can
301:22 - transform our this kind of pixels to
301:25 - some new type of pixels such that in a
301:27 - hope we get a lot more better
301:30 - information from this particular output
301:32 - as compared to what you are seeing
301:34 - currently so yes that's exactly what
301:36 - we'll be doing in the upcoming few
301:38 - videos hi everyone welcome to this video
301:41 - of module 3 where we're going to start
301:44 - our journey of pixel scaling with the
301:46 - first method that we have over here is
301:48 - minmax scaling so to start with this
301:51 - video I'm going to show you some of the
301:52 - helper functions that we'll be creating
301:55 - that will be eventually helping us to
301:57 - generate some visualizations for the
301:59 - comparison or just a normal image with
302:01 - some of the functionalities added to
302:03 - that particular function after that
302:06 - we're going to again create one more
302:07 - function that's actually going to
302:09 - implement the minmax scaling on the
302:12 - given input pixel array and once this
302:15 - kind of output we are able to generate
302:16 - from this function we are going to
302:18 - compare the visualization of the
302:20 - original image and the scaled image so
302:23 - that's the whole idea that we're going
302:24 - to cover in this video so let's get
302:27 - started so the first pixel scaling that
302:29 - we are going to look into is the
302:31 - intensity normal normalization or also
302:33 - called as minmax scaling or linear
302:36 - scaling the idea over here is that we
302:39 - take the whole array of pixels we do a
302:42 - subtraction with the minimum value that
302:44 - is present in that array the minimum
302:46 - pixel value in that array and then
302:49 - divide it with the range or you can also
302:51 - call it as the difference between the
302:53 - maximum pixel value and the minimum
302:55 - pixel value in that are and the output
302:58 - you get the output of the array will be
302:59 - same shape but now the values will be
303:02 - scaled
303:03 - that's the whole concept of this
303:05 - intensity normalization or whatever kind
303:07 - of thing you want to call it and let's
303:10 - see how we can achieve this so I'm going
303:13 - to create a function for that over here
303:16 - I'm going to Define it as uh let's say
303:18 - mean Max
303:20 - scaling and what input it takes it takes
303:23 - only one thing the main array of pixel
303:27 - let me just call it as pixel area
303:29 - something like
303:30 - this now it is divided into two parts
303:34 - numerator and the denominator so let me
303:36 - call it as over here uh numerator is
303:40 - equal to the pixel array pixel array
303:45 - minus the minimum value of this pixel
303:49 - array and then denominator let me just
303:52 - call this
303:53 - DN what is this it is the maximum
303:56 - value of this pixel
303:59 - array minus the minimum value np.
304:03 - minimum of the pixel array that's
304:06 - it now the output of this should be what
304:09 - again an array but how it's the division
304:13 - of this numerator and
304:15 - denominator simple as that so our
304:18 - function is ready if we are going to
304:20 - pass in the data of M31 pixels it's
304:23 - going to give us the output in the
304:25 - format of minmax scaling and we are
304:27 - going to hope to see some better
304:30 - information uh as compared to what we
304:32 - are are seeing over here we are not sure
304:35 - it will be better we are just hoping
304:36 - that we get a better output so coming
304:39 - back to this what I'm going to do is
304:41 - first of all I'm going to uh create Min
304:47 - minmax scaled array or I can just say
304:50 - minmax array right and I can do this
304:54 - with the help of minmax scaling that I
304:56 - have created on top of M31
305:01 - pixels and now before I go ahead and
305:04 - visualize this what I'm going to do is
305:06 - I'm going to create a common function
305:09 - that will help us visualize this kind of
305:12 - output because it's going to have some
305:13 - kind of common things the title of it
305:16 - then once we are showing this kind of
305:18 - array this kind of cmap equal to gray
305:20 - origin equal to lower all of this kind
305:22 - of code will be repetitive so for that
305:25 - what I'm doing is I'm just uh converting
305:27 - this into a function so that in just one
305:29 - line of code we can do all of this task
305:32 - so let's say I'm defining again one more
305:34 - function and calling it as let's say
305:36 - plot
305:37 - underscore pixels something like this
305:40 - right so the first thing that I'm going
305:42 - to give is the pixel data or pixel
305:45 - array after that what kind of title I
305:47 - want to give what kind of color I want
305:49 - to set for the title some kind of this
305:51 - information the first thing would be to
305:53 - display the array that is pixel
305:56 - array and keep the same color map that
305:59 - is gray
306:00 - always for now and uh after that I'm
306:03 - also going to set the origin to
306:07 - lower and then I'm also going to do PLT
306:10 - do um title going to set title to the
306:15 - title that is given as an input and also
306:17 - set a color to it color is equal to the
306:19 - color given by the user of this function
306:23 - and uh also I'm going to use PLT doxis
306:26 - and turn it off so that the output is
306:29 - not giving us this kind of exis okay we
306:31 - are just getting the output in the
306:33 - format of the image without the exis
306:35 - okay it's going to look much more better
306:37 - I guess so yeah that's something that
306:38 - I'm trying to do and also after this I'm
306:41 - trying to get PLT do
306:43 - Sho to avoid any kind of external text
306:46 - information that it may display on top
306:48 - of the image like this okay over here we
306:51 - did not use pl. Sho so it is showing me
306:53 - this kind of output I'm not really
306:55 - looking forward to this kind of things
306:57 - so that's why I have given this kind of
306:59 - pl. show and that's it our function is
307:01 - ready so not every time after converting
307:04 - uh I mean after scaling down our pixels
307:06 - to some values we don't have to plot
307:09 - this multiple lines of code I'm just
307:10 - going to use this plot pixels give the
307:13 - array of the pixel change the title
307:15 - change the color and get the output
307:17 - that's it again I can do some more
307:19 - interesting thing I can give the weight
307:21 - uh of this pixel as
307:25 - bold and uh yeah that's it I guess this
307:28 - is fine I'm just going to rerun this
307:30 - code and because we have have already
307:32 - created this kind of a minmax scaler
307:34 - right what I'm going to do I'm going to
307:36 - plot
307:38 - pixels for minmax
307:41 - areay now the title I'm going to set is
307:44 - um minmax
307:47 - scaling color that I want to give to
307:49 - this is royal
307:51 - blue and yeah that's it so let's see
307:54 - what kind of output do we get by just
307:56 - okay I guess we are having some kind of
307:58 - an error the error says that the text.
308:00 - set got an unexpected keyword called
308:02 - weight the spelling of weight is
308:05 - incorrect again don't mind my spelling
308:07 - guys I'm really poor at
308:11 - spellings run this going to run this
308:16 - again yeah it's giving us this kind of
308:18 - an
308:18 - output now um again what I'm trying to
308:21 - do is I'm trying to do I'm trying to
308:24 - compare this with the original uh image
308:26 - over here right so what I'll do is I'll
308:28 - also create a comparision over here okay
308:31 - I'll be Crea
308:33 - creating one more function to compare
308:35 - the scaling so
308:39 - compare
308:41 - pixels it's going to take two data
308:44 - original M31 data
308:47 - original array at the same time I'm
308:50 - going to give scaled
308:53 - array okay and I'm going to create a
308:55 - subplot over here PLT do
308:58 - subplot so the first uh subplot that I'm
309:01 - going to give is one two one one row two
309:04 - columns on the first position I'm going
309:06 - to plot the original array and I can do
309:09 - this with the help of the above function
309:11 - that we have created plot pixels I'm
309:13 - just going to remove this pl. show as of
309:16 - now I'm going to have uh plot
309:20 - pixels and I'm going to first of all
309:23 - pass in the original array right and
309:27 - after doing this I'm going
309:31 - to have multiple titles uh over here so
309:35 - the for the first one I'm going to give
309:37 - the title as TI as
309:42 - original
309:44 - image and I'm going to give color is
309:46 - equal to
309:47 - Black okay and after this I'm also going
309:50 - to use
309:52 - subplot at 1 comma 2 comma 2 plot pixels
309:57 - I'm just going to copy this whole thing
310:00 - and paste it over here
310:02 - and it will be the scaled array scaled
310:05 - array the title will be
310:09 - um let's
310:11 - say let's just skip it a title over here
310:14 - as title only okay I'll be passing the
310:16 - title whatever is the title that I'm
310:18 - trying to
310:20 - give and uh again the color will be just
310:22 - a
310:25 - color I'm just going to give this as a
310:28 - input and let me create this kind of
310:30 - thing and now let me try to compare
310:33 - these things so what I'm going to do is
310:35 - I'm going to scrap this part and instead
310:37 - I'm going to uh do I'm also going to do
310:40 - pl. show at the end pl. show okay now if
310:45 - I come over here and do compare what was
310:48 - the name of the function compare
310:51 - pixels the original data is nothing but
310:53 - the M31 pixels the output is minmax
310:57 - array then the title of this plot that I
311:01 - want to set on the second one is the Min
311:04 - minmax
311:06 - scaled and the color that I want to give
311:08 - to that is Royal let's
311:11 - say or I can also fix this color over
311:14 - here as Royal view because that's the
311:16 - only one that I want as an output so
311:18 - I'll also remove this part over here and
311:21 - uh now I can just give this as this
311:25 - only and hopefully it gives us the
311:27 - output the way we
311:29 - want yes so this is the kind of output
311:32 - put that we want in terms of comparision
311:34 - now because we are having some kind of
311:36 - gapping in between I can improve this
311:38 - kind of gaps I hope you know the command
311:40 - the command is nothing but PLT do tight
311:46 - layout and I can also adjust the figure
311:48 - size if you want to have a larger size
311:50 - of this image and any kind of that kind
311:53 - of thing but I guess I am satisfied with
311:55 - the output that I'm getting on the left
311:57 - we are having the original image on the
311:59 - right we are having the minmax scaled
312:01 - image right so over here I don't see
312:06 - that major difference over here it's
312:07 - pretty much similar so we didn't get any
312:10 - kind of useful information with the help
312:13 - of minmax scaled output now in the next
312:16 - video I'm going to show you one more
312:18 - type of scaling call is standardization
312:20 - or Zed scaling and it has been done with
312:23 - the help of this formula so I'll explain
312:25 - you this whole concept in the upcoming
312:28 - video hey guys I welcome you all to this
312:31 - video of module 3 where I am going to
312:33 - show you some other pixel scaling
312:35 - methods apart from the minmax scaling
312:37 - namely standard scaling log and square
312:40 - root
312:41 - normalization so once we are done
312:43 - getting the outputs of this scaled
312:45 - version of the M31 data we are going to
312:48 - visualize them by utilizing the
312:50 - functions that we had created in our
312:51 - previous video and then just compare out
312:54 - of all of the scaling methods which one
312:56 - is performing best in terms of visual
312:59 - appearance which is revealing most
313:01 - information about the core of the
313:03 - Andromeda galaxy and then we are simply
313:05 - going to take that output which is
313:07 - revealing the most information and get
313:09 - its pixel distribution with the help of
313:11 - the histogram just like how we did in
313:13 - one of our previous videos right so yes
313:15 - let's get started and look into all of
313:17 - this kind of things
313:19 - guys so let us understand this
313:21 - particular formula what is this about so
313:25 - this is the actual array we are
313:27 - subtracting it from the mean of the
313:29 - array and dividing it with the the
313:31 - standard deviation so now you already
313:34 - know how we can take this mean and
313:35 - standard deviation that's what we had
313:37 - seen in some part of codes earlier
313:39 - somewhere over here see so we're going
313:41 - to use this kind of numpy functionality
313:43 - in order to get a standardized output
313:46 - okay the kind of Technique we call to
313:49 - this particular formula that you are
313:50 - seeing is either standardization or Zed
313:53 - scaling whatever you want to call so if
313:55 - you have studied normal distribution you
313:56 - will be understanding the actual meaning
313:59 - of what this is but let me not go into
314:01 - the very technical concept and talk
314:03 - about Z
314:05 - skill Z
314:09 - skill array or Z
314:12 - scale only just Z scale let's just say
314:14 - that this is Z scale again I'm going to
314:16 - give pixel array as an
314:18 - input and uh the way that I'm going to
314:21 - code again I'm going to have a numerator
314:23 - that is the pixel array the whole array
314:26 - I'm going to subtract the mean of this
314:28 - pixel
314:30 - array and the denominator part is just
314:34 - the standard deviation so again I'm just
314:36 - going to have this kind of denominator
314:38 - as np. STD standard deviation of that
314:42 - pixel simple as that and written
314:46 - numerator by denominator as an
314:48 - output so our function is ready for the
314:51 - scaling and the output that we are going
314:53 - to visualize now will be straightforward
314:56 - so
314:57 - scaled array or I should also call this
315:01 - the Z scaled array Zed scaled
315:04 - array is equal to Z scale on top of M31
315:09 - pixels and now if I just go ahead and
315:12 - call compare pixels on M31
315:17 - pixels okay again now see because this
315:20 - M31 is common I don't want to give this
315:22 - input again and again so I'm just going
315:25 - to give in the scaled array only as an
315:28 - input I'm going to keep this as m 31
315:32 - pixels by
315:34 - default okay I'm not going to change
315:36 - this one it is always the same so I'm
315:38 - going to run this
315:40 - code and even in this image I'm just
315:43 - going to take this part
315:46 - out run this
315:49 - part yes and now I'm going to do the
315:52 - exactly same thing over here I don't
315:54 - need to pass M31 pixels over here now
315:56 - anymore I just need to pass in The Zed
315:59 - scaled array and the title
316:02 - title will be um let's say Zed scaled
316:08 - image let's see the kind of output that
316:10 - we get I guess we have created an error
316:13 - the error is uh num. Den okay yeah it's
316:16 - because of this particular thing no
316:18 - problem let's fix that up hopefully no
316:22 - errors this time
316:24 - yes again not a lot difference that we
316:28 - are expecting over here even with with
316:31 - the help of Z scale output it's pretty
316:33 - much similar to what we see in the
316:36 - original image don't worry it's not that
316:38 - we aren't doing anything perfectly or
316:41 - there is some kind of a problem with the
316:42 - Skilling techniques this is pretty much
316:44 - obvious okay at times you won't be able
316:46 - to see a lot of difference but now the
316:49 - next thing that we are looking into is
316:51 - the log normalization what is this uh
316:54 - whole concept of the log normalization
316:56 - you take the log of all the pixel values
316:58 - that you are having in your data simple
317:00 - as that so what I'm going to do is I'm
317:02 - going to create a function for that def
317:05 - log normalization or normal log scaling
317:08 - whatever you want to
317:10 - give input is a pixel array and it's
317:14 - going to Simply return the log np. log
317:18 - of this input pixel array simple as that
317:23 - so this is the array that we have
317:24 - created and if you want to visualize
317:26 - this so log Norm array is equal to log
317:33 - normalization of M31
317:37 - pixels and compare
317:40 - pixels of log Norm
317:43 - array title is equal to log
317:47 - normalized image now you will be able to
317:50 - see some of the visual difference as
317:53 - compared to what we were having in the
317:55 - initial image now see how we are getting
317:59 - this particular output they seeing a lot
318:02 - more details some kind of see uh some
318:05 - kind of part that we see in the around
318:07 - the core of the Andromeda galaxy all of
318:09 - these things are now visible this is the
318:11 - center part this is this is what we see
318:13 - which is not visible over here see
318:15 - that's the power of like you know
318:16 - scaling uh your particular pixel values
318:20 - to some different scale right right now
318:23 - we have implemented log on all the pixel
318:26 - values with the help of np. log now if I
318:29 - just compare this with this output
318:31 - see how how well it is able to give us
318:34 - this kind of outputs of all this kind of
318:38 - if I show you the Stars over here right
318:40 - all this kind of information see even
318:43 - over here I can see that the output is
318:45 - revealing much more information but yes
318:47 - we are having this kind of output so far
318:49 - that we have achieved now on top of this
318:52 - there are again some more uh
318:54 - normalization and scaling techniques
318:56 - that you can do for sure but now before
318:58 - that what I'm going to do is I'm because
319:00 - we got a slightly better output over
319:02 - here I'm going to create a histogram
319:05 - distribution of the pixels of this
319:08 - particular output okay how can I do this
319:11 - I'm going to do PLT
319:14 - doist of this log Norm array do flat
319:19 - going to let's say set bins to 300 and
319:22 - look at the output with the help of pl.
319:26 - show
319:28 - okay so see now this is the kind of
319:30 - output the spread in the data is much
319:33 - more as compared to what we were having
319:35 - initially and this is the kind of output
319:38 - that we have achieved so far okay and I
319:41 - can also show you the shape over
319:45 - here uh that is uh
319:48 - log Norm array. shape it must be the
319:52 - same okay that's something that I wanted
319:54 - to show you that the shape is just the
319:56 - same right so over here we got the
319:59 - uh I guess uh the log normalization was
320:03 - already done so I just got the image of
320:06 - the log distribution of the log
320:08 - normalization over here and that's what
320:10 - we had to do over here so I just scrap
320:12 - this part but at the same time I'm
320:14 - trying to show you one more type of um
320:19 - normalization let me just call this as
320:21 - the fifth
320:24 - part of this scaling technique square
320:28 - root okay so what I'm going to do over
320:31 - here is I'm going to create a code two
320:33 - code cells one to define the square root
320:36 - function again I can do it with the help
320:37 - of numpy So Def let's say square root
320:43 - scaling giving the pixel
320:46 - arrays and uh it's going to return
320:49 - return this thing NP do sqrt of pixel
320:53 - that's
320:53 - it going to run this uh I'm going to
320:57 - create uh square root
321:00 - scaled or square root are just like that
321:03 - and I'm going to call sqrt scaling on
321:07 - top of this M31
321:09 - pixels and uh compare
321:13 - pixels and I'm going to compare this
321:15 - with square root
321:17 - array title will be square
321:22 - root
321:24 - scaling let's see what kind of output do
321:26 - we
321:27 - get so this is the kind of output this
321:29 - is one more way you can see that there
321:31 - are some more information that has been
321:33 - revealed over here right as compared to
321:36 - what we see on the left so just like
321:38 - this there are a lot of different
321:39 - scaling techniques that you can use so
321:42 - far we had seen that a lot more
321:43 - information we were uh able to get with
321:46 - respect to the log normalization so we
321:49 - stick with that and said that like you
321:51 - know let's create a histogram out of it
321:53 - a histogram distribution of it and
321:55 - that's that's how we can see how the
321:57 - pixel values are distributed now right
322:00 - so yeah that's something that I really
322:01 - wanted to show you that with the help of
322:03 - this pixel scaling how you can reveal a
322:06 - lot more information like this now in
322:09 - the upcoming video what you will be
322:10 - seeing is one more technique which is
322:12 - called as a z skill interval okay now
322:16 - with the help of this again I'll be
322:17 - showing you some more information and
322:20 - then we are going to use any of the
322:21 - scaled output and perform some of the
322:24 - image processing techniques as we go
322:26 - ahead in this particular moduel so stay
322:28 - tuned for all of these kind of
322:29 - interesting things coming up for you
322:32 - guys so welcome to this last video of
322:34 - module 3 where I'm going to talk about
322:37 - the Z scale interval class that is
322:39 - present in the astropy library okay so
322:42 - what is it all about and why are we
322:44 - using it all of these things you'll be
322:46 - seeing in this particular video so let's
322:48 - get right into
322:49 - it so now let us discuss about the Z
322:52 - scale interval I'm not going to go into
322:54 - the logic behind like you know how this
322:56 - is coming up with I'm just going to tell
322:58 - you what it is going to do and how it
323:00 - can be useful for us okay so for the
323:03 - demonstration purpose let us try to
323:05 - create a demo array 1 2 3 4 5 6
323:09 - 7 8 9 and 10 okay now the whole idea of
323:14 - the Z scale interval is to give you an
323:17 - interval that means give one minimum
323:20 - value and one maximum value so let's say
323:22 - mean and
323:24 - Max now this mean and Max are not 1 and
323:26 - 10 there are some different values that
323:28 - you'll be getting for example let's say
323:30 - minimum we got as three and the maximum
323:33 - we got as let's say eight right now the
323:37 - whole idea over here is to take this
323:39 - original array and clip it according to
323:42 - this particular interval any values in
323:45 - this array that is less than three
323:47 - should be converted to three and any
323:49 - values that is greater than eight
323:52 - beyond8 should be converted to eight
323:54 - that's what we call it as a clipping of
323:56 - an array between a particular values so
323:59 - now because we know that the minimum
324:00 - value this array can take is three so
324:02 - wherever you see any value less than
324:04 - three convert that to three convert this
324:07 - to three similarly if you seeing a value
324:09 - greater than eight convert that to eight
324:11 - convert that to eight and that's it once
324:14 - we are done with this kind of conversion
324:16 - we are having a whole new way of
324:17 - visualizing the respective image that
324:20 - we'll be creating so we are going to
324:22 - follow the same exit process and the way
324:25 - through which we can do this in Python
324:27 - is with the help of estrop Library so
324:29 - what I'm going to do is from
324:32 - astropy there is a module called as
324:34 - visualization so I'm going to call
324:36 - visualization visualization yeah UT Zed
324:41 - scale
324:44 - interval going to run this code and now
324:47 - okay I guess there's a spelling oh no
324:49 - not a spelling mistake there is a
324:51 - problem with the space over
324:54 - here yes it's working fine so now we are
324:56 - going to create the object of this
325:00 - particular class CL Z scale
325:03 - interval and what is the whole idea of
325:06 - creating this object because this is the
325:08 - object through which you will be able to
325:10 - fetch out the limits on the any of the
325:15 - image that you want okay in our case you
325:17 - can choose let's say for example square
325:19 - root scaling original image for that
325:21 - matter I can also choose this kind of uh
325:25 - log normalized image because this was
325:27 - performing the best I'll be simply uh
325:30 - copying this part and go down and I'll
325:33 - be simply calling this kind of limits
325:36 - with the help of Z scale interval on top
325:39 - of this particular array right now how
325:42 - we can do do this particular thing you
325:44 - call this Zed you press that dot it's
325:47 - going to give you this particular method
325:49 - called as get limits so it is because of
325:52 - this object that you have created of Z
325:54 - scale interval you are getting access to
325:56 - this method now this method takes the
325:58 - array whose minimum and maximum value
326:01 - you want uh that you have got with the
326:03 - help of Z scale interval technique so if
326:05 - I'm having this over here and if I know
326:08 - that it's going to written two things
326:10 - minimum and maximum so let's call Z1 as
326:12 - minimum Z2 as
326:14 - maximum so we're going to get some kind
326:16 - of outputs and let's just check it with
326:17 - the help of print command F string let
326:20 - me just say that uh
326:22 - minimum is Z1 and like that
326:26 - print F maximum is equal to Z2
326:32 - I run this
326:34 - code so the output that we are having
326:36 - over here the minimum value after
326:40 - clipping uh we should have is 1.688 9
326:44 - okay we haven't clipped as of now but
326:46 - the minimum value after uh applying the
326:48 - clipping should have 1.6 8889 nothing
326:51 - less than this so if I show you in the
326:54 - original array of log Norm array what is
326:56 - the minimum value np. minimum of that
326:59 - array if I'm just uh running
327:02 - this okay it's saying that oh yeah
327:04 - because we haven't defined y not array
327:07 - it's
327:08 - array anyways so yeah the minimum value
327:11 - that we are having in the log Norm array
327:13 - is 1.
327:15 - 6788 and after implementing this G
327:17 - limits uh on the Z scale interval we got
327:20 - that the minimum value should be
327:23 - 1.688 so obviously we can see that there
327:25 - are some values which are less than this
327:28 - so all the values in this array that we
327:30 - we are having for the log Norm array all
327:32 - of these values including this will be
327:34 - converted to 1. 6889 any values less
327:38 - than this will be converted to that and
327:40 - just like that if I try to see the
327:41 - maximum value and if I run this
327:44 - code it is 5.18
327:47 - 17837 and over here after implementing
327:50 - the get limits of Zed interval on the
327:51 - log Norm array the maximum value that we
327:54 - are getting is 44 4.44 79 so any values
327:58 - Beyond this as we can see clearly that
328:00 - yes there is at least one value that is
328:02 - beyond this so any such values present
328:04 - in this log Norm array we want to
328:06 - convert it into all 1.5 5.18 17 all
328:11 - these kind of values that has been
328:12 - written right so yeah I was trying to
328:15 - print this to show you that this minimum
328:17 - and maximum is not equal to the minimum
328:19 - and maximum pixel of this particular
328:20 - array it's different right so now that
328:23 - we are having this kind of an idea let's
328:26 - try to visualize this data by clipping
328:28 - this array of log Norm array how we can
328:31 - do this I can use PLT do
328:33 - IMO and now over here I'm trying to call
328:36 - this log Norm array but now I'm going to
328:40 - use two different parameters which is
328:42 - going to help me clip the values between
328:43 - these values so V mean is the minimum
328:46 - value that is Z1 and Vmax is the maximum
328:50 - value which is Z2 and cmap as you know
328:53 - is our
328:54 - gray and the origin is equal to lower we
328:57 - know this kind of settings we have been
328:59 - using this since the start of this
329:01 - notebook and now I can simply do PLT do
329:03 - show hopefully the code Works without
329:06 - any kind of
329:07 - error and now the output that you will
329:09 - be seeing will be significantly
329:11 - different than what you have seen over
329:13 - here okay you can see this it's kind of
329:16 - a bit a blurry kind of thing B paint
329:19 - kind of thing the stars are not that
329:21 - highlighted even this kind of uh the
329:25 - center part of the androma Galaxy is
329:27 - like this now just look into the output
329:29 - that we get over here after applying the
329:31 - Z scale interval see it's a bit more
329:34 - highlighted right you are having a much
329:35 - more brightness in that part as compared
329:39 - to the smaller part so now this is the
329:41 - kind of output that we are having okay
329:44 - it's not that you need to specifically
329:46 - apply this method it's just that I'm
329:48 - trying to implement one more method so
329:50 - that you guys know that this kind of
329:52 - techniques also exist okay what have I
329:56 - done I just got two values the limits
330:00 - now from the help of this limits I have
330:02 - clipped my array I haven't done any kind
330:05 - of transformation as such just clipped
330:07 - the array such that any values less than
330:09 - that particular value and any value
330:12 - Beyond this value are converted to its
330:14 - respective values that's something that
330:16 - I have done and this is the kind of
330:17 - output that I have
330:18 - achieved now according to your research
330:21 - according to your whatever is the
330:24 - objective the problem statement that
330:26 - you're working with you come up with a
330:28 - specific technique and you carry for
330:30 - forward your any kind of image
330:31 - processing or any kind of information
330:33 - that you want to with respect to
330:35 - whatever you're comfortable with it
330:37 - could be the square root scaling image
330:38 - it could be original image it could be
330:41 - this log normalized image and not this
330:43 - one specifically right it's completely
330:45 - your choice according to the problem
330:47 - statement now because I want to
330:49 - demonstrate something in the uh upcoming
330:51 - videos so what I'm going to do is I'm
330:54 - going to take any one of this image
330:56 - let's say this particular image that we
330:58 - got over here but now is this an image
331:01 - yes it's an image but what is the pixel
331:03 - representation of this if I am trying to
331:07 - uh clip this particular values I haven't
331:09 - clipped log Norm array over here right
331:12 - I'm using this IM am show in order to
331:14 - clip this values with the help of this
331:16 - arguments so now how can I convert this
331:18 - into numpy array or any kind of array so
331:22 - for that I'll have to store this whole
331:24 - image as a variable first of
331:27 - all and now let's try to visualize what
331:29 - kind of output it is giving us
331:35 - okay it is the matplot libs image it's
331:38 - not a pixel representation it's an met
331:42 - plot Libs image so it's not giving us
331:44 - any kind of array over
331:46 - here so how we can convert this image
331:50 - into a its pixel
331:52 - representation I can do this with the
331:54 - help of a command called as make
331:57 - image okay now one input that it takes
332:01 - is called as renderer r n d e r e r now
332:06 - I am going to choose by default whatever
332:09 - they are having in the back end of M
332:11 - plot Li by simply giving the command of
332:13 - none okay now I'm going to run this it's
332:15 - going to give us the 8bit integer form
332:18 - of IM image so from this kind of float
332:21 - 32 we are converting this into uh
332:24 - unsigned integer 8bit image basically
332:27 - right so this is the kind of output that
332:28 - we have got but now along with this
332:31 - output it's throwing some other things
332:32 - also out but we are just carrying for
332:35 - the first part of the output that is the
332:37 - image array so I'm going to extract this
332:40 - first part that is present on zero index
332:43 - and now this is the array that I'm
332:45 - looking forward to and you can see that
332:47 - it's a d type equal to U in8 unsigned
332:50 - integer 8 right so that's something that
332:52 - we were looking forward to and now uh
332:55 - let me just store this into an array
332:58 - image array let's say
333:03 - and now let me go ahead and try to check
333:05 - the shape of this so image aray do
333:10 - shape it is 370 370 and 4 original shape
333:15 - was 300 300 that's it so we need to
333:20 - think about this we need to convert this
333:21 - into 300 by 300 not this shape so first
333:26 - of all how did we get this
333:28 - 370 so so over here I just need to pass
333:32 - in one more argument called as unsampled
333:35 - is equal to
333:37 - true now by using this particular
333:40 - command or argument unsampled is equal
333:43 - to true it's going to keep the
333:46 - dimensions as it is if I run this again
333:49 - and uh again run this particular code
333:51 - you will be seeing that 300 by 300 has
333:53 - been achieved right so we have decreased
333:56 - our shape back to 300 by 300 that's
333:58 - something that we wanted now what about
334:01 - this four channels what it means so four
334:04 - channels basically mean let me just
334:06 - write a note over
334:09 - here so the four Channel basically is
334:13 - indicating to us that it is uh having
334:18 - red green blue and Alpha
334:25 - channels uh makes up a four Channel
334:29 - image
334:31 - typically if it's in the format of RGB
334:34 - so the first three channels will be RGB
334:35 - and the last one will be Alpha Channel
334:37 - now what is Alpha Channel it is with
334:39 - respect to the opacity of the image okay
334:42 - the values again are in between 0 to 255
334:45 - 0 means completely opaque and 255 means
334:48 - the opposite of that so yeah that's the
334:50 - idea with respect to the four Channel
334:52 - output now how we can convert this four
334:54 - Channel output into only one channel
334:57 - that is gray scale now that's something
334:59 - that we going to look into into with the
335:00 - help of CV2 Library which is nothing but
335:02 - the open CV Library I can import it with
335:05 - the help of import CV2 command and by
335:08 - default it is already present in the
335:10 - Google collab so you don't need to pre I
335:12 - mean again install it over here so I'm
335:15 - simply using this command of UT CV2 and
335:19 - importing my open CV Library over here
335:22 - now how we can remove the fourth channel
335:24 - of the
335:25 - opacity and basically just convert this
335:27 - into and convert
335:30 - it
335:31 - into gray scale okay I should have
335:34 - written remove four channels or
335:39 - just
335:41 - um convert four scale uh four Channel
335:44 - image to gray
335:47 - scale image now how we can achieve this
335:50 - with the help of CV2 so in open CV
335:53 - Library there is some a method called as
335:57 - CVT color right now the input that is uh
336:02 - it's going to take is the image array
336:05 - whose uh channels are four so I'm going
336:08 - to pass it over here and along with that
336:10 - it's going to take a flag what is this
336:13 - flag the flag that is going to convert
336:16 - this four Channel image into a gray
336:18 - scale Now by default in CV2 that is open
336:21 - CV it's not going to read as uh the
336:24 - first channel as red second as green
336:26 - third as blue it's going to be the
336:28 - opposite of that on the first channel we
336:31 - will be having blue on the second it
336:33 - will be green and on the third it will
336:35 - be red and then on the fourth it will be
336:37 - Alpha so it's BG this four Channel if
336:41 - you're are using
336:42 - CV2 right so if you're using CV2 the
336:46 - four CH will be in the format of BG a
336:49 - and now that BG needs to be converted to
336:51 - gray I can do this with the help of CV2
336:54 - do color underscore BG a to Gray that's
337:00 - it and let me just St store it as gray
337:03 - image gray
337:06 - array and now let me just go ahead and
337:08 - cross check if the shape is
337:12 - correct hopefully it
337:14 - is yes it's correct and now just to
337:16 - visualize if we have lost some
337:18 - information or it's uh just like what we
337:21 - are seeing over here let me just again
337:24 - plot this thing so I'm going to plot it
337:26 - with the help of the uh plot pixels
337:30 - function that we had created above right
337:32 - it's going to take in the input of the
337:34 - array that is the gray array then I
337:37 - guess it was taking the title also title
337:40 - would be let's
337:42 - say Zed scale
337:47 - interval gray scale let's something like
337:50 - this and color let's say is royal
337:53 - blue hopefully this is not giving any
337:56 - errors I hope that the these are the
337:59 - parameters okay we got an error so error
338:01 - is TIY oh never mind t t l is the
338:08 - spelling yeah so this is the output that
338:10 - we have got and it's just the same image
338:14 - that we were having over here exactly
338:15 - the
338:17 - same right you can also try to like you
338:20 - know plot it side by side with the help
338:22 - of that comparison function that we had
338:24 - created but anyways I am happy that yes
338:27 - the output is just the same and we are
338:29 - going going to carry forward with this
338:30 - particular thing right uh the gray area
338:34 - right that's the kind of conclusion that
338:35 - we have made so far now let's also look
338:38 - into the histogram visualization of this
338:41 - so PLT doist going to pass in the gray
338:45 - array and flat use flat to convert it
338:49 - into an 1D Itor and then passing the
338:52 - bins is equal to usual as usual 300 and
338:55 - look into the
338:57 - output as you can see that we getting
338:59 - some kind of a display of array I'm just
339:01 - going to use pl. show and it's going to
339:04 - just uh show me the output of the image
339:07 - nothing
339:09 - else so now this is the kind of output
339:12 - that we are able to
339:14 - achieve and the pixels are ranging from
339:17 - somewhere from zero all the way up to
339:19 - 255 why what is the reason behind that
339:22 - the logic is that because we have
339:25 - converted our float image into 8bit
339:27 - image and in 8bit image as I I explained
339:30 - earlier the values are in between 0 to
339:32 - 255 so that's the reason why we are
339:34 - having this particular range right so
339:37 - yeah this is the histogram visualization
339:38 - that we are
339:40 - having and uh now in order to apply any
339:44 - kind of image processing on this
339:45 - particular image uh what I'm going to do
339:48 - is I'm also going to convert this gray
339:50 - scale uh array into some good name so
339:55 - that we can use it further let's say I'm
339:57 - giving some unique name to it as
340:00 - um gray
340:03 - scale or gray scale Z
340:07 - interval Z int array is equal to gray
340:13 - array so I'm just giving a meaningful
340:16 - name to this because we were just doing
340:18 - some kind of experimentation over here
340:20 - and because everything is working fine
340:22 - so I'm just saving it in a very good
340:24 - name so that we can use it in the uh
340:26 - upcoming videos right so the whole whole
340:29 - idea that we have seen over here is that
340:33 - with the help of Z scale interval we got
340:35 - two values for the interval and we use
340:39 - this IM show in order to clip the value
340:41 - between these two values that we had got
340:42 - Z1 and Z2 so from this we St we stored
340:46 - it into this image variable which was
340:48 - nothing but the M plot lip image type so
340:51 - from that we converted it into its pixel
340:53 - representation with using this
340:55 - particular function we give this to
340:58 - inputs we fetch the array part of it and
341:01 - the output will be 8bit integer image
341:04 - and but the output now was having four
341:06 - channels so whenever you're trying to
341:08 - perform the image processing and because
341:11 - see the output is just the same over
341:13 - here and over here so why take four
341:16 - different channels and perform image
341:18 - processing on that it's going to take
341:19 - much more time as compared to what it
341:21 - will take in only one channel output is
341:23 - just the same so that was the whole
341:26 - concept why we took this four channels
341:28 - and converted it into single Channel or
341:30 - gr Channel image right and we did it
341:33 - with the help of computer vision or I
341:35 - should say open CV Library CV2 library
341:38 - in the CV2 we are having this option of
341:40 - CV2 color CVT color which is helpful to
341:43 - take the image array and with the help
341:45 - of this flag BG a to gray we can convert
341:49 - it into gray scale image if you want to
341:51 - let's say convert it into three Channel
341:53 - image you you use BG to BGR even that is
341:57 - fine but now that will be three scaled
341:58 - image I mean three Channel image because
342:01 - eventually we wanted a gray scale image
342:03 - I directly converted that four scale
342:05 - into uh four channel into one channel
342:08 - and here is the proof of that it has
342:10 - been converted successfully and uh yeah
342:12 - here is the final output that we have
342:14 - got and here is the pixel distribution
342:17 - of this in between 0 to
342:19 - 255 right so yes with all this being
342:23 - said we are done with this uh whole idea
342:27 - of pixel scaling and looking into some
342:29 - different ways through which you can
342:30 - come up with an array and finalize
342:33 - something that we are going to use for
342:35 - the upcoming sessions on or I should say
342:37 - upcoming videos on image processing
342:41 - after doing some kind of pixel scaling
342:43 - on this right so stay tuned for that
342:45 - guys hey guys I welcome you all to this
342:48 - last module of this program where our
342:50 - Focus will be to understand how we can
342:53 - Implement some different type of filters
342:55 - on the existing image and get some kind
342:57 - of features extracted out from that
342:59 - particular image so starting with we'll
343:01 - be understanding the concept of the
343:03 - convolution operation then we going to
343:05 - take an image from our previous module
343:07 - and apply the Gan denoising technique
343:09 - with the help of Gan kernel to remove
343:12 - some of the noise in the data after that
343:14 - we are going to implement measuring and
343:16 - setof filter in order to enhance the
343:19 - features in the image and lastly we are
343:21 - going to use some of the features of the
343:23 - SK image Library where we are going to
343:26 - take corner fener and multi- basic
343:28 - featur features to extract this kind of
343:30 - features with respect to this algorithms
343:32 - how this kind of uh techniques are
343:34 - working everything will be covered in
343:36 - this particular module guys so yes
343:38 - without any further Ado let's get into
343:40 - this
343:41 - module hey everyone welcome to the
343:44 - second video of module 4 and here we're
343:46 - going to learn about the convolution
343:48 - operations so what exactly are these
343:50 - convolutions why do we need it over here
343:53 - and then what is some kind of practical
343:55 - demonstration in terms of visualizations
343:58 - so that you are able
343:59 - understand okay yeah that's exactly what
344:01 - is convolution so that's something that
344:03 - we're going to cover in this video so
344:05 - let's get right into so now that we are
344:07 - aware about that we are going to use
344:09 - this particular image in order to get
344:13 - some kind of features out of this image
344:15 - and uh do some cool stuff uh in the
344:17 - upcoming videos one thing that we need
344:20 - to do is to remove any kind of noises
344:23 - present in this image before we actually
344:24 - go ahead and get those kind of features
344:26 - out of this image so so we can do this
344:29 - with a technique called as Gan smoothing
344:33 - which is nothing but denoising the image
344:35 - with the help of gajan smoothing
344:37 - technique how it works it is simply
344:40 - working on the principle of
344:42 - convolution so how this convolution
344:44 - works so it will require one kernel you
344:48 - can also call it as a filter in our case
344:50 - it will be a Goan filter right now this
344:53 - is just a demo filter just to explain
344:55 - how the convolution works and it will
344:58 - also require one image now this image in
345:01 - our case will be this one image so on
345:04 - this image we are going to place our
345:05 - gajen kernel and do some convolution
345:09 - operation then slide that filter one
345:11 - unit to the right do convolution
345:13 - operation again slide it to the right do
345:15 - that convolution operation until you are
345:17 - sliding across every pixels uh step by
345:21 - step now that's the whole idea of the
345:23 - convolution that you are going to
345:24 - perform with the help of a gan kernel on
345:27 - the full image so let us try to
345:30 - understand with this uh GF that I'm
345:31 - having over here this light blue part
345:34 - that you are seeing is the image it's a
345:37 - 5x5 image as you can
345:40 - see now on top of which we are going to
345:42 - pass this kernel size
345:45 - 3x3 okay so now what is the
345:48 - convolution so wherever you are seeing
345:50 - Zero I'm going to pass this zero of this
345:53 - kernel on top of that now whatever this
345:55 - is a second zero I'm going to multiply
345:57 - that with minus one then this 0 will be
345:59 - multiplied with this zero then this 0
346:01 - will be multiplied with minus1 60 will
346:03 - be multiplied with 5 113 will be
346:06 - multiplied with ne1 0 will be multiplied
346:08 - with this zero 73 will be done uh
346:11 - multiplied with minus1 and 121 finally
346:13 - will be multiplied with the zero after
346:16 - multiplying all these numbers I'm going
346:18 - to sum them up together and that
346:20 - summation output is nothing but the
346:22 - thing that you are seeing over here as
346:23 - an output right so if you want to
346:26 - visualize what I'm trying to say I have
346:28 - already WR WR this particular thing for
346:30 - you that you do 0 into 0 then 0 into 0
346:33 - like 0 into minus one
346:35 - just map this values of the kernel on
346:38 - top of this first 3x3 part of the image
346:42 - multiply it respective uh Elements which
346:44 - are coming on top of each other and
346:46 - after multiplying simply add them up
346:48 - together you will be ending up with the
346:50 - value called as 144 for the first place
346:53 - just like that you slide your kernel by
346:56 - one unit to the right and now it will be
346:58 - on this 00 6113 56 73 121 154 again to
347:04 - the same process the output will be 328
347:07 - so one time if you're doing this that is
347:10 - one convolution like that you are going
347:12 - to do multiple convolutions with this
347:14 - kernel on top of this image and you're
347:17 - going to finally get the convoluted or
347:20 - convolved image with the help of Goen
347:22 - gel right now as I mentioned this is a
347:24 - dumy kernel to give you this explanation
347:26 - of how these things work but yeah that's
347:28 - that's the whole idea of convolution
347:30 - operation in our case this light blue
347:34 - kind of thing that you are seeing is
347:35 - nothing but the original image that we
347:37 - had uh stored over here this will be the
347:39 - image on top of which we are going to
347:41 - create a Goen kernel how we can create
347:44 - it what are some what are its properties
347:46 - we are going to discuss about that in
347:47 - the upcoming video but yeah that's the
347:50 - whole logic but now you might be
347:52 - wondering that what is this kind of z0
347:54 - on top of this right so whenever you
347:57 - will be implementing the convolution
347:59 - operation you will always decrease the
348:02 - size of the output now to keep the same
348:05 - size that is like you know 5x5 over here
348:07 - as an input uh we also want the output
348:10 - as 5x5 so for that specific reason I am
348:13 - adding a layer of padding and this
348:16 - padding is nothing but a zero layer
348:18 - padding it means all the values over
348:19 - here are 0 0 0 0 0 now there are other
348:23 - ways through which you can fill up this
348:24 - values you can also use this kind of a
348:26 - reflect kind of padding which which
348:28 - means that this 85 will be reflected
348:30 - over here 128 will be reflected over
348:32 - here let's say this 131 will be
348:34 - reflected over here so even that kind of
348:36 - thing is possible so in short there is
348:38 - one padding layer so if we are having a
348:41 - padding layer this image size will be
348:43 - what now it will be 1 2 3 4 5 6 7 so
348:47 - it's a 7 by S thing so from that 7 by S
348:50 - thing after the convolution is over you
348:53 - are getting this
348:54 - 5x5 however the original image was 5x5
348:57 - So eventually what we are getting is
348:59 - that input was a 5x5 image output is a
349:02 - 5x5 image so for that particular reason
349:05 - we are having a padding layer so I hope
349:08 - the concept of padding is clear at the
349:10 - same time what you are seeing over here
349:12 - that the sliding of this kind of Kernel
349:14 - on top of the image different different
349:16 - part this sliding is called as a stride
349:19 - this is called as a stride St r i d e so
349:23 - over here we are having the stride value
349:25 - of one that's why it is moving one one
349:27 - unit to the right and then one unit to
349:29 - the down if the stride value was two it
349:32 - will skip two columns and then start
349:33 - from this
349:35 - particular then again skip two columns
349:37 - and start from the next particular
349:39 - available part so that's how it's going
349:41 - to work all right so yeah that's the
349:42 - concept of padding and strides uh that
349:45 - is associated with the concept of
349:47 - convolution now in the next video you
349:49 - will be seeing that how we can create a
349:51 - kernel for Goan smoothning and apply it
349:54 - with respect to the image that we are
349:57 - having over here and then Denise this
349:59 - image and after that later on how we can
350:02 - Implement some of the filters or some of
350:04 - the feature extraction techniques to get
350:07 - something out of this particular image
350:09 - so stay tuned for that
350:11 - guys hey everyone welcome to this third
350:14 - video of fourth module and now we are
350:16 - going to discuss this concept of Goan
350:18 - denoising as in terms of implementation
350:21 - I'm going to take one of the image from
350:23 - the output of module 3 implement the Gan
350:26 - kernel on top of that and see how the
350:29 - output looks like after doing this kind
350:30 - of formulation operation so for this you
350:33 - will also need to understand what are
350:35 - the properties of this Gan kernel only
350:37 - then you'll be able to appreciate this
350:38 - whole idea so this is exactly what we'll
350:41 - be discussing in this video so let's get
350:43 - into
350:44 - it so basically this convolution
350:47 - operation with a gsen kernel applies a
350:50 - weighted average to the neighboring
350:51 - pixels with the higher values at the
350:54 - center which are gradually decreasing
350:57 - towards the edges of the filter so the
350:59 - filter that you are seeing over here
351:00 - won't be like this it's a very special
351:03 - type of filter where the values in the
351:05 - center are high and at the edges the
351:08 - values are going to be low okay so this
351:11 - process is effective in reducing the
351:13 - high frequency noise and preserving
351:15 - important image details so how we can
351:18 - create this kind of a filter and then
351:20 - how we can do this kind of convolution
351:22 - operation on that image that we are
351:24 - having over here so let's try to
351:27 - understand that part so we will require
351:29 - the convolution 2D filter from the CPI
351:32 - signal module how we can do this I'm
351:35 - going to say that from scipi scipi is
351:38 - again a library that is pre-installed
351:40 - over here in the Google collab so you
351:41 - don't need to uh install it so from
351:43 - scipi do
351:45 - signal I'm going to import conall
351:50 - 2D and uh after this I'm am going to
351:53 - generate my own filter that is not at
351:56 - all Associated to the cion filter and
351:59 - the way that I'm going to create this is
352:01 - with the help of np. ons now what is the
352:04 - whole purpose of the np. ons so let me
352:06 - first of all explain that to you so np.
352:09 - On's if I'm let's say doing it 5 by five
352:13 - okay I'm passing it in inside a
352:17 - tuple uh so what is this going to be so
352:20 - it's a 5x five of 1es now I am just
352:23 - going to divide all of these values by
352:26 - four okay
352:29 - or I should say 25 not
352:31 - four Why by 25 so that the summation of
352:35 - all of this values is equal to one now
352:38 - by doing this particular thing it's
352:40 - going to preserve the range of the
352:43 - pixels in a way that it's going to be a
352:45 - better output basically whenever you are
352:47 - having this kind of summation equal to
352:49 - one right so that's the reason why am I
352:51 - dividing this with 25 so because I'm
352:54 - having five five cross 5 of one ones so
352:57 - total in short the summation is 25 right
353:00 - there are 25 * 1 in the array so that's
353:04 - why I'm dividing this with 25 so that
353:05 - now if I take the summation of all of
353:07 - this the output will simply be one right
353:10 - so that's for that specific purpose I
353:12 - have done this thing and now let me just
353:14 - store it into Kel k r NL is equal to
353:19 - this okay now uh let's go ahead and uh
353:24 - actually we have already looked into
353:26 - that but still I'll just paste it over
353:29 - here so that yeah you are having the
353:30 - output now we are going to create a gan
353:33 - kernel so let me just give a name to it
353:35 - Gan
353:37 - Kern I'm going to create it with this
353:39 - np. array method now what I'm going to
353:43 - pass over here I'm going to pass this
353:44 - kind of values 1 by
353:46 - 16 1X 8 1X
353:49 - 16 then come to the second row and now
353:53 - in the second dra I'm having 1X 8 then
353:56 - 1x4 again by
353:59 - 8 try to look into the pattern that I'm
354:02 - trying to create over here okay and the
354:04 - last L again will be very similar to the
354:06 - first line or I should say exactly the
354:08 - same 1X 16 1X 8 and 1 by
354:12 - 16 now as you can see that in the center
354:15 - part we are having the maximum value
354:18 - present over there and as we are going
354:20 - to the edges you are seeing that the
354:22 - values are even smaller so now this is
354:25 - going to follow the property of the Gan
354:27 - kernel and even the summation will be
354:29 - equal to zero if you are going to go
354:30 - ahead and check it okay and even you can
354:33 - check it with respect to the graph that
354:34 - we are having over here that in the
354:36 - center we are having 1x4 and at the
354:39 - edges we are having the values of 1x 8
354:41 - and 1X 16 right as you can see so this
354:45 - is a 3X3 kernel that we have created
354:48 - over here I have created 5x5 again over
354:50 - here if you want to create a 3 by3
354:52 - kernel you can create it by simply doing
354:54 - this 3x3 over here also and uh now
354:58 - because 3x3 in total there are nine
355:00 - values so I need to divide this by nine
355:01 - in that case so even this is fine okay
355:05 - there is one kernel that we have created
355:07 - like this uh where it is 3x3 so the
355:10 - output of this will be a total of nine
355:12 - ones so the summation of that will be
355:14 - nine so I just divide that with nine so
355:17 - that overall summation of all of this
355:19 - values will simply be adding up to one
355:22 - so I have created two different kernels
355:24 - one that is a simple kernel and one that
355:26 - is the Gant kernel now I am going to
355:29 - show you how we can convolve this with
355:31 - the help of a con Tod uh thing that we
355:34 - have imported from ci. signal and show
355:38 - how the output looks like with respect
355:40 - to this kernel and the Gant kernel and
355:42 - again we are going to see it in two
355:44 - images one that is the M31 pixels by
355:46 - default and the second one is this
355:48 - particular image so let's try to go
355:51 - ahead and visualize
355:53 - it so get the convolution done with our
355:56 - normal kernel now how we can can do this
355:58 - we can simply call Con convolve 2D now
356:02 - what kind of input it takes it takes the
356:05 - original image on top of that it takes
356:07 - the filter and after filter it takes
356:10 - some kind of padding right so I'm going
356:12 - to say that uh M31 pixels is the first
356:15 - thing that I want to choose and then the
356:18 - normal kernel I want to give as an input
356:21 - and the padding I can give with the help
356:23 - of the command mode now this mode I'm
356:26 - going to keep same keep same padding
356:29 - means the shape of the output should be
356:32 - same as the input that's what this means
356:34 - okay and this will be the output of the
356:36 - convolution so let's we call it as
356:39 - convolved convolved
356:42 - image and we are storing in
356:45 - this right and we are running this now
356:48 - and the same thing we are also going to
356:49 - implement with respect to the Gan
356:52 - kernel so Gan
356:56 - G EX the same steps have been repeated
356:59 - there are no changes at all and now I'm
357:01 - simply going to visualize both of this
357:03 - output one with the convol image and one
357:05 - with the uh let's say because I have
357:07 - given the same name over here let me
357:09 - just call this as Goin conal image but I
357:13 - guess there is a problem okay let me
357:15 - check what is the Cal that I have
357:18 - selected over let me just run this code
357:20 - I'll copy this come over here paste it
357:23 - again just in case to check if the
357:25 - spelling is correct and now I'll run
357:27 - this
357:29 - so yeah we are having two images and now
357:30 - we are going to first of all visualize
357:32 - the first con uh convolution output so
357:35 - I'm going to do PLT do
357:37 - IMO of the same thing right so I'll be
357:40 - using
357:41 - the blot
357:44 - pixels and what kind of input I want to
357:46 - give this is the input title
357:49 - is
357:52 - normal colal
357:56 - convolution and color should be let's
357:59 - say
358:02 - maroon so this is the kind of output
358:04 - that we are able to see right now in the
358:07 - normal uh kernel convolution right now
358:11 - what I can do is I can also go ahead and
358:13 - visualize the Gan G I'm going to copy
358:16 - this
358:18 - code see how useful that kind of
358:20 - function is that we had created in only
358:22 - one line of code we are able to get all
358:24 - these things
358:26 - done
358:29 - and now this is
358:31 - Gan kernel
358:34 - convolution so now again as such we are
358:37 - not able to see that level of uh output
358:40 - you can see there's some kind of like
358:41 - you know some kind of circle circles you
358:43 - are able to see over here and similarly
358:46 - over here also you able to see a similar
358:47 - kind of output right over here because
358:50 - we are having some
358:51 - information uh maybe it's done in this
358:54 - particular way what about this image
358:57 - yeah over here it's done in that same
358:58 - fashion so as such we are not able to
359:00 - see any kind of uh such difference now
359:03 - what I'm going to do is I'm going to do
359:06 - the same thing on the gray scale uh
359:08 - output that we had created over
359:10 - here this one I'm just going to copy
359:15 - this come
359:18 - down using gray scale to convol and this
359:22 - gray scale Z int going to convol 2D
359:27 - going to pass Goan
359:31 - kernel keep the mode is equal to
359:35 - C and I'm going to store this into some
359:39 - kind of output what kind of output we
359:41 - can give just try to think about that
359:43 - let's just say uh
359:46 - convolved gray scale gray scale right
359:52 - let's this I hope the spelling is
359:54 - correct over here Co n v l v it seems
359:58 - correct let me just run
360:00 - this Con Tod never mind you know my
360:04 - spellings
360:06 - ah con 2D going to copy this going to
360:10 - paste it over
360:12 - here
360:14 - okay now let's see how it looks like um
360:18 - again I'm going to copy
360:20 - this paste
360:23 - it and now I'm going to copy this name
360:26 - paste it over here
360:28 - and give it as Gan kernel
360:32 - convolution gajan kernel on Zed
360:37 - scale
360:38 - interval let's see how the output looks
360:41 - like
360:42 - now so this is the kind of output that
360:44 - we are having as compared to the
360:45 - original
360:47 - image okay as compared to this image
360:50 - this is the kind of output that we are
360:51 - having so if it is having some kind of
360:53 - noises it has simply removed it by
360:56 - adding some kind of a blurring effect
360:59 - right so yeah this is what we have done
361:01 - so far now we are also going to fetch
361:03 - out the histogram before we go ahead and
361:05 - Implement any kind of image processing
361:07 - techniques uh in terms of fil applying
361:10 - filters and feature extraction
361:12 - techniques so PLT doist on this
361:16 - particular output that is the
361:19 - convol gray
361:21 - scale I'm going to pass. scale and uh
361:25 - bins is equal to uh not
361:28 - scale do flat and bins is equal to 300
361:32 - pl.
361:35 - show let's see now the distribution of
361:38 - the pixels that we are able to fetch
361:40 - after doing this kind of like you know
361:42 - convolution with the Gan
361:46 - K now this is the kind of output see
361:49 - this is the kind of output that we have
361:50 - got from
361:53 - this from this you can see there was
361:55 - some kind of gaps in between now we are
361:58 - having this kind
361:59 - of uh continuous kind of output that we
362:02 - are seeing over here right all the web
362:05 - to 255 so yes I guess this is a better
362:08 - output and now we are going to get all
362:11 - the kind of features apply different
362:14 - kind of filters in the upcoming videos
362:16 - with respect to this convol grayscale
362:21 - output hi guys I welcome you all to this
362:24 - fourth video of module 4 and here we are
362:27 - going to take the image output that we
362:28 - had got from our previous video that is
362:30 - the convol denoised image basically and
362:34 - enhance the features present in it by
362:36 - implementing two different type of
362:38 - filters measuring and Sato now both of
362:41 - this we are going to import it with the
362:43 - help of SK image so let's get into the
362:46 - video so now that we have decided that
362:48 - we are going to use this convol gray
362:51 - scale output that we have got by uh
362:54 - doing the gajan blurring uh we going to
362:57 - come over here and enhance the linear
363:00 - features on this M31 data and I'm going
363:04 - to visualize this in multiple different
363:06 - color maps and therefore I'm defining
363:08 - this particular list over here called as
363:11 - spectral list and all of these are
363:13 - nothing but the color map that in which
363:15 - we are going to see the output after
363:17 - implementing two different type of
363:19 - filters which is going to enhance this
363:21 - kind of linear features that is
363:23 - measuring and setof filter and I'm going
363:26 - to import them from SK image itself so
363:30 - from SK image.
363:32 - filters import I don't know the
363:34 - spellings properly to be honest I'm just
363:36 - going to copy
363:37 - this and paste it over here remove the
363:41 - end part and just give a
363:44 - comma that's it so this filters have
363:47 - been imported and now we simply have to
363:49 - go ahead and do the convolution I mean
363:52 - uh implement the measuring filter and
363:54 - the set set of filter on this grayscale
363:56 - output so what is this gray scale output
363:58 - I'm just going to copy
364:00 - that this
364:02 - one copy this array come
364:05 - back and let's say this is
364:08 - a
364:11 - majoring
364:13 - filter is equal to this oh not this
364:16 - actually it should be
364:19 - maing of
364:22 - this and for CTO filter CTO output I
364:25 - should say right measuring output in the
364:27 - the set output so let me change this to
364:29 - Output as
364:31 - well and set this to Seto and paste this
364:34 - part so after running this particular
364:36 - code what I should be getting is the
364:39 - array with the uh filter that we have
364:42 - implemented on this particular
364:44 - image now what we are going to do for
364:47 - every color map that we are seeing over
364:49 - here we are going to uh create the
364:51 - output for the measuring filter first
364:54 - and then for the Seto filter and try to
364:56 - see that which of this color map is
364:58 - combined with this measuring filter
365:00 - giving us the best result so that's the
365:03 - kind of thing that we are trying to do
365:04 - over here and now we can achieve this
365:06 - with the help of
365:09 - PLT do IM Sho of what I'm trying to show
365:14 - measuring output May I'm just going to
365:17 - copy
365:18 - this and paste it over
365:21 - here I want to show this with what color
365:24 - map I want to show the color map I'm
365:26 - going to create a for Loop over here so
365:29 - for color map in spectral list I'm again
365:33 - going to copy this you know the
365:36 - reason yeah so this I'm going to give an
365:40 - indentation over here so that we are not
365:42 - having any kind of errors and now
365:44 - instead of C map I'll be giving color
365:46 - map that I am fetching from the spectral
365:49 - list and after doing this I'm also going
365:51 - to do this kind of origin is equal to
365:56 - lower and give a title to this PLT title
365:59 - TI tle e and with the F string what I'm
366:03 - going to do is I'm going to give the
366:04 - name of the color
366:06 - map and I also tell that this is a
366:10 - majoring plus this particular thing
366:13 - right so this is something that I'm
366:14 - trying to give and let's say measuring
366:17 - M31 plus this color map I guess this is
366:21 - good and I'm also going to hide the
366:24 - exis
366:26 - okay and now after this I'm also going
366:29 - to do PLT do show and now I'm going to
366:32 - run this hopefully it is working the way
366:35 - I expect if not we'll be modifying this
366:38 - code okay again we got a name error
366:40 - spectral list is not defined oh because
366:43 - we haven't run this code no problem no
366:45 - problem no problem run this again
366:48 - hopefully no errors fingers
366:50 - crossed yes we are getting the outputs
366:53 - now see how we are getting this outputs
366:57 - over here we can clearly see this kind
367:00 - of objects are present over here 1 2 3
367:03 - here over here also some kind of dull
367:05 - objects we can we are able to see over
367:07 - here also some kind of object is being
367:09 - formed and here is the core of the
367:11 - androma right now I can just scroll down
367:15 - and try to see some kind of different
367:17 - features that we are able to extract
367:18 - over
367:20 - here if you're able to find something
367:22 - different over
367:24 - here and whatever kind of color map that
367:27 - you are liking that is giving you the
367:30 - lot of information you simply use it for
367:32 - any kind of further analysis Okay the
367:34 - reason I have printed a lot of uh color
367:36 - Maps over here is just for your
367:39 - understanding that we can do this kind
367:40 - of things now according to your problem
367:42 - statement whatever it is you choose the
367:44 - best image that you think According to
367:46 - which is giving the best result
367:48 - according to me it's the nip spectral
367:49 - color map which is giving most of the
367:51 - information about the
367:53 - image right now according to whatever is
367:56 - the hypothesis that you must create and
367:58 - to prove that hypothesis you can do this
368:00 - kind of image processing by implementing
368:02 - different kind of filters and get this
368:04 - kind of outputs and test your hypothesis
368:08 - right for example you might have said
368:10 - that there are some kind of stars at the
368:12 - uh edge of this kind of image uh near
368:15 - the galaxies there are this kind of uh
368:17 - formation of this kind of uh shapes that
368:21 - we can see near the core of the Galaxy
368:23 - by default we were not able to see this
368:25 - kind of information if I just show you
368:27 - over here we were not able to spot that
368:30 - well this information as well as this
368:32 - information but now after implementing
368:34 - this kind of filters we are clearly able
368:36 - to uh see this kind of things and trust
368:39 - me guys this kind of uh thing if you're
368:41 - able to create a subplot out of it you
368:43 - can literally extract the subplot
368:46 - download it and use it in your research
368:47 - paper the outputs like this how you are
368:50 - able to describe it it all depends on
368:52 - your skills of like you know explaining
368:54 - a visual appearance in front of you
368:57 - right so I hope you have now understood
368:59 - that how we are able to get this
369:00 - particular thing done for the measuring
369:03 - filter now I can simply go ahead
369:05 - and look into the Seto filter and look
369:09 - into the output over here with respect
369:11 - to that so this is my set output uh this
369:14 - is my Seto M31 plus color Maps again
369:17 - same color Maps I'm using and see the
369:19 - output over here
369:21 - now
369:24 - see this one is I guess much better
369:26 - compared to what we got with respect to
369:28 - measuring again we are able to highlight
369:31 - all this kind of information near the
369:33 - core of the Galaxy even this side part
369:36 - but this is much visually it's more
369:38 - appealing as compared to the previous
369:39 - output that we had got right so yes
369:42 - according to this kind of outputs
369:44 - according to your problem statement
369:46 - according to your understanding whatever
369:48 - kind of image you can describe the best
369:51 - you choose that and use it in your
369:53 - research work right so I hope this kind
369:56 - of idea with respect to how you can
369:58 - Implement different filters I have just
369:59 - shown two examples like this there are
370:02 - bunch of filters you can uh get with
370:05 - respect to SK image. filters I can show
370:07 - you the documentation over here SK
370:10 - image. filters
370:13 - documentation okay and I'm also going to
370:16 - add this part in
370:18 - your uh notebook also so that you can
370:21 - just uh take a look into different kind
370:23 - of filters that are
370:25 - available
370:27 - uh take a
370:29 - look take a look onto
370:32 - different
370:34 - available filters in SK image okay I'm
370:38 - giving this link over here
370:40 - guys all right so yeah you can explore
370:43 - any kind of filter that you want to see
370:45 - how it is working with respect to the
370:46 - astronomical data that you're dealing
370:48 - with you just need to know how this kind
370:50 - of for example this is the filter how it
370:52 - works what kind of input it's it's
370:54 - taking and based on this input you try
370:56 - to get some kind of outputs like this
370:58 - right so yes guys that's it for this
371:01 - particular video and now in the next
371:03 - video I'll be telling you that how you
371:04 - can extract some kind of features with
371:08 - uh SK image itself so stay tuned for
371:12 - that hi guys welcome to this fifth video
371:15 - of module 4 and here I'm going to show
371:18 - you that how you can take SK image and
371:21 - go to its any kind of feature available
371:23 - in their documentation and Implement to
371:25 - get some of the outputs on top of the
371:27 - input image so the one that I'm going to
371:29 - show you first is the corner fer so what
371:33 - exactly this is and how we can use it in
371:35 - Python with the help of the SK image
371:37 - documentation of the features that's
371:39 - exactly what I'm going to explain in
371:40 - this video so let's get into
371:43 - it so now let's take a look into the
371:45 - feature detection and extraction with
371:47 - the help of SK image feature so just
371:50 - like how we are having SK image. filters
371:53 - like this we can also have feature if I
371:55 - just look into that so here is the
371:57 - documentation again I'll copy this link
372:00 - and paste it into our particular file
372:03 - okay I'll also just create this SK image
372:06 - different
372:08 - features you can use any one of them by
372:11 - understanding how to implement that now
372:13 - that's exactly what I'm going to show
372:15 - you that how you can use one of the uh
372:17 - feature that is corner for how we can
372:22 - use it so what you do is you go to their
372:24 - official documentation and search for
372:26 - for that the one that I'm looking
372:28 - forward to is over here so if I click on
372:31 - this it's telling me that it's going to
372:33 - take one input of image and sigma and
372:36 - the output will be two things okay this
372:39 - is output will be two things image is an
372:42 - input shape of M comma n row comma
372:44 - column and sigma is nothing but the
372:46 - standard deviation used for the Gan C by
372:50 - default we'll keep it as one only for
372:51 - our case as of now but surely you can
372:53 - play around with this particular value
372:56 - but the output that we are going to get
372:57 - over here is w and Q the first output
373:01 - basically that we are going to get is
373:03 - the error ellip sizes and the second
373:06 - output that you're going to get is the
373:08 - roundness of error lips so if you're not
373:11 - understanding this kind of technical
373:12 - terms no problem let's try to go ahead
373:14 - and try to implement uh how this kind of
373:16 - uh SK image. feature of uh corner forner
373:20 - is working okay I'm just going to copy
373:22 - this
373:22 - name come over here and first of all UT
373:26 - this so import okay I should say from SK
373:29 - image. feature import this going to run
373:33 - this now you can pass this on any kind
373:36 - of image that we had created above I'm
373:38 - again going to use the same image that
373:40 - we had used over here right you can also
373:43 - use on top of this set output also if
373:45 - you want okay but for now I'm just going
373:47 - to implement it on that uh this
373:50 - one convolved gray scale okay so let's
373:54 - go over here
373:57 - and implement this corner forer on what
374:00 - gray
374:02 - scale oh I should say
374:05 - convolved gray SC right yeah now if I
374:09 - just run
374:10 - this and if I check the length of this I
374:13 - should get two different outputs right I
374:15 - should have two outputs let me
374:17 - check yes I am indeed having two
374:19 - different outputs so now what I'm going
374:22 - to do is let me just store it as only
374:24 - one output as of now let's say I'm
374:25 - calling this as
374:27 - a feature
374:29 - output and this feature output is
374:31 - actually having two different things so
374:34 - check the output of the feature image
374:36 - so
374:38 - feature
374:41 - output zero the first output that we are
374:44 - having over here is with respect to
374:47 - actually uh the error the error ellipse
374:49 - sizes and the second output is roundness
374:51 - of error elips okay so this is the first
374:55 - uh this is the second
374:58 - right now what exactly it's going to dip
375:00 - it we are only going to understand once
375:02 - we are going to visualize them right and
375:04 - if you want to check the type of this
375:06 - output that we are
375:07 - getting uh the type of this actually it
375:10 - will be in the format of a tle because
375:12 - it's throwing two different values right
375:14 - so type of this let's
375:16 - check and again length we have already
375:19 - checked that it will be
375:20 - two now we are going to Define two we
375:24 - are going to split this kind of thing
375:25 - into two parts Parts one is for the
375:27 - error ellipse and one is for the
375:28 - roundness of error ellipse so you can
375:31 - just give any kind of variable name that
375:33 - you are okay with right whatever kind of
375:35 - name you're okay with but what I'm going
375:37 - to do is I'm not really going to Define
375:40 - this as of now I'm just going to delete
375:42 - this part and color list we have also
375:45 - already defined as the spectral list
375:46 - just let me see
375:48 - spectral yeah let me see if it's still
375:50 - working yeah we are having all of this
375:52 - we are just going to use the same uh
375:54 - color maps and now we are going to
375:56 - create the visualization
375:58 - so what how I'm going to do I'm going to
376:01 - Simply say that
376:04 - for color map in
376:08 - spectral
376:12 - list now what I'm going to do U on the
376:15 - left hand side I want to visualize the
376:18 - first output of the feature output and
376:21 - on the right hand side I'm trying to
376:22 - visualize the output of the roundness of
376:26 - error okay one is error and one is
376:28 - roundness of error so how I can do this
376:30 - I can achieve this with the help of pl.
376:33 - subplot now I want to give 1 comma 2
376:36 - comma 1 now on the first what I want to
376:39 - show PLT do IM show of feature
376:43 - output of zero right now any kind of
376:47 - color map I can give but because I'm
376:49 - using a for Loop I'm going to give this
376:50 - color map and origin is equal to
376:54 - lower yes
376:56 - I guess this much is fine I can give a
376:58 - PLT do title as what what kind of title
377:02 - we can give we can say that this is
377:03 - error
377:04 - image plus the respective color
377:08 - map and I just need to pass this in the
377:12 - F string and also turn off the AIS PLT
377:15 - XIs off now I'm just going to copy this
377:18 - code over
377:19 - here and repeat the
377:22 - steps for 1 2 2 but now this will be
377:26 - feature output one this is roundness of
377:30 - error
377:33 - roundness right and I guess we are good
377:35 - to go and I'll just have PLT do tight
377:40 - layout because we are plotting the
377:42 - subplot and then PLT do show hopefully
377:44 - this is going to work in the way that we
377:46 - expect let's see how it's going to
377:51 - work yes first of all we are having the
377:54 - gray see on the left we are having
377:55 - nothing thing on the right we are able
377:57 - to see this kind of circular or ellipse
377:59 - kind of shapes that is it's being
378:01 - detecting so yeah this is the kind of
378:03 - features that you are extracting over
378:05 - here in the format of an array and this
378:08 - arrays is what you are visualizing over
378:10 - here right so you extracted this kind of
378:13 - features and now you are visualizing
378:15 - them in different color Maps
378:17 - right so error image plus prism
378:20 - roundness of error plus prism then error
378:24 - image with respect to nipp spectral and
378:26 - this is with respect to the roundness of
378:28 - error image with nippy Spectrum so yeah
378:31 - that's it with respect to what we are
378:34 - doing uh with Corner Foster I hope this
378:37 - is making sense that this is one of the
378:39 - example that we have fetched from this
378:41 - SK image. feature like this you can go
378:44 - and check any kind of different feature
378:46 - like this in the next video you will see
378:48 - that we are going to try one more
378:50 - feature extractor actually and that is
378:53 - multiscale basic features the local
378:55 - features so I'll talk about that in the
378:58 - next video and over here you can surely
379:00 - go ahead and try to check out some
379:02 - different feature by yourself try to
379:04 - implement it and just note that you need
379:06 - to know how it is working by looking
379:08 - into its documentation if you are able
379:11 - to look into that if you're able to do
379:12 - your research properly you can use any
379:15 - kind of feature for a specific task that
379:17 - you're looking forward
379:18 - to all right guys I'll see you in the
379:20 - next
379:21 - video hi everyone welcome to this last
379:25 - video of this particular particular
379:26 - module and here we are going to go ahead
379:28 - and understand how we can implement this
379:31 - skmh feature called as multiscale basic
379:34 - feature by following its documentation
379:37 - and just like what we did in our
379:38 - previous video the same stuff we'll be
379:40 - implementing over here and see what type
379:42 - of outputs we are able to achieve so
379:44 - let's get
379:45 - started so now let's try to look into
379:48 - one more feature that is present in the
379:50 - SK image that is uh known as multiscale
379:54 - basic features so I'm going to press
379:56 - contr F to search this multiscale I had
379:59 - already searched for that but I'm yeah
380:01 - that's where it is so over here it's
380:04 - going to take all of these kind of
380:05 - different parameters you can read its
380:07 - respective information for now I'm just
380:09 - going to pass the image and keep
380:10 - everything as default I'm not going to
380:12 - change anything obviously it's up to you
380:14 - how you want to change it and get the
380:16 - outputs the way you want and the output
380:19 - will be uh an array of the shape of
380:21 - whatever is the row and column plus some
380:24 - nend features so as you can clearly see
380:27 - that it's trying to detate multiscale
380:29 - basic features it's going to give us the
380:32 - uh local features for a single or multi-
380:34 - Channel end dimensional image right and
380:38 - it's going to be actually the intensity
380:40 - gradient intensity and local structure
380:43 - are computed at different scales thanks
380:45 - to gajan bluring so all of this kind of
380:48 - information is what we are having and
380:50 - what we are able to understand from this
380:52 - is that from a given image it it can
380:56 - give us multi Channel output and in each
380:59 - of the channel that we are going to get
381:02 - each channel will have one kind of
381:03 - feature that has been extracted so if
381:06 - I'm trying to implement
381:08 - this first of all I need to import this
381:11 - particular thing so I'm going to say
381:12 - that import this
381:15 - feature so from SK image do
381:21 - multiscale basic
381:23 - features oh I should say do feature
381:27 - import this name I'm just going to copy
381:29 - this very
381:31 - quickly and paste it over here and going
381:33 - to run
381:34 - this and now I'm going to create a
381:38 - featured let's say a
381:42 - feature
381:43 - image I'm going to call this with the
381:46 - help of
381:48 - this and I'm going to pass in the
381:53 - conval gray scale okay
381:56 - so this is the kind of input that I'm
381:57 - passing in and now I'm going to run this
382:00 - now let's say what is the type of this
382:02 - thing that we have got previously we had
382:04 - got tle right now let's see what do we
382:07 - get now it's a nump AR because that's
382:10 - what we expect over here as an output
382:12 - it's going to return an array so that's
382:14 - why we are seeing an array type in the
382:17 - return of this now let's look into the
382:19 - shape that's something important so this
382:22 - do shape is
382:24 - what so we got 300 by 300 and there are
382:28 - 24 local features that has been
382:31 - extracted and each of the channel is
382:33 - having some different types of
382:35 - extraction of this features and has been
382:37 - stored over with the respective channels
382:39 - over here now what we are going to do is
382:42 - we are going to extract each and every
382:45 - channel out of this and uh create a list
382:48 - out of it basically how we can do this
382:51 - I'm going to use CV2 functionality of
382:54 - split
382:56 - and I'm going to pass this featured
382:58 - image
382:59 - spit featured image I'll be creating a
383:03 - list of all the outputs that we get if
383:05 - I'm running this it's going to give us a
383:08 - total of uh if I check the length of
383:10 - this output it must be
383:12 - 24 the split means what it's going to
383:15 - split all the channels and it's going to
383:16 - give us as an output each and every
383:18 - channel and all the channels will be of
383:21 - the shape 300 by 300 so that's the kind
383:23 - of output that we are going to get so
383:25 - first of all I'm just going to like you
383:26 - know store it in P1 P2 P3 P4 and
383:29 - everything that's exactly what I'm going
383:31 - to do so I'm not going to write
383:33 - everything and make you guys bored what
383:35 - I'm going to do is I'm copy that part
383:37 - paste it over here say that this is
383:38 - equal to that if you notice because I
383:41 - was having 24 different outputs I'm
383:43 - having P1 all the way up to p24 if I
383:46 - want to check this
383:48 - P1 and also looking into the shape of
383:51 - that it must be 300 by 300 right just
383:55 - like that I can also check
383:57 - p24 do
384:00 - shape and yes because everything looks
384:03 - fine I'm going to go ahead and create a
384:05 - list out of
384:06 - this okay I'm simply going to go ahead
384:09 - and create a list out of this and call
384:11 - it as
384:13 - pixels different pixels that I have
384:15 - created right and my goal is to
384:18 - visualize all of this uh features that
384:21 - we have
384:22 - extracted uh in a particular color map
384:24 - any kind of of color map that you like
384:26 - I'll be choosing a color map called U I
384:30 - guess if I'm not wrong I'm going to
384:32 - choose pixel
384:34 - prism okay I hope it is present over
384:36 - here somewhere yeah this prism right so
384:41 - I'm just going to copy
384:43 - that where it is where it is where it is
384:45 - it's over here so I'm going to copy
384:49 - this come
384:51 - back where we
384:54 - were yeah and now finally visualize this
384:57 - kind of pixels in only one color map and
385:01 - uh there will be 24 different outputs so
385:03 - what I'm going to do is
385:06 - for
385:08 - feature in
385:11 - pixels what I want to do PLT do
385:14 - IMO of uh
385:16 - feature right I want to use color map
385:19 - only one color map that is this one
385:21 - prism color map and uh origin
385:26 - is equal to
385:27 - lower and PLT do
385:31 - title I can say that um this
385:35 - is feature one feature two like that I
385:37 - can give this kind of things I can also
385:39 - use enumerate over here
385:42 - enumerate so what is this enumerate
385:44 - going to do it's going to give me two
385:46 - things index
385:47 - values as well as the feature that is
385:50 - like what is present inside this pixels
385:52 - so with this I I'm going to so what is
385:55 - feature that is it feature one feature
385:57 - two right so it is Feature
386:01 - Feature then i+ one because index will
386:03 - start from zero so feature one all the
386:06 - way to feature 24 that's the kind of
386:08 - title that I'm giving and then PLT doxis
386:11 - I'm going to turn it off as usual and
386:15 - PLT do show so if I run this hopefully
386:18 - it's going to be running the way that I
386:21 - am expecting yes it is indeed feature
386:23 - four like this you will just see that
386:25 - the output we are getting over here we
386:27 - got feature 11 12 13 14 15 16 17 see how
386:33 - in all this image we are getting
386:35 - different kind of features that has been
386:36 - extracted right see all these kind of
386:39 - things all these kind of different
386:41 - features that are associated to this 24
386:43 - outputs that we have got all of this we
386:45 - are able to visualize that and now we
386:47 - are able to visualize that in one color
386:50 - map that is called as prism right you
386:52 - can also do this with the help of DP SP
386:55 - also gray scale whatever you are
386:57 - comfortable right so yes these are the
386:59 - kind of outputs that we have got we can
387:01 - see this kind of uh all these kind of
387:04 - different features right and currently
387:07 - because we haven't defined any specific
387:09 - hypothesis that what exactly we are
387:11 - trying to look forward to so that we
387:13 - cannot prove anything over here it's
387:15 - just that I'm trying to show you that
387:17 - how with the help of this kind of
387:19 - feature extraction techniques that is
387:21 - present in SK image you are able to
387:23 - fetch this kind of information
387:26 - now any image that you are seeing over
387:28 - here any
387:30 - output whichever you think is describing
387:34 - the thing that you're looking for you
387:36 - look for that specific image and then
387:38 - write about that particular part in your
387:41 - thesis research work internship report
387:44 - whatever it is whatever you are working
387:45 - on right so yes guys that's the whole
387:48 - process let me just try to visualize
387:49 - this in nippy
387:54 - spectral
387:55 - I'm assuming that is going to look much
387:58 - better yeah this is my personal favorite
388:01 - guys okay nipp
388:04 - spect yes indeed it's giving us a good
388:07 - result right wherever there are this
388:09 - kind of spots the Stars we can clearly
388:12 - see that here is the nucleus of our
388:14 - particular anoma Galaxy over here also
388:17 - we are able to see something right so
388:19 - all this kind of information over here
388:21 - we also able to spot this kind of stars
388:23 - in the background right even this kind
388:25 - of feature over here this feature over
388:27 - here all of them are
388:29 - highlighted so yeah that's the beauty
388:31 - about this kind of feature extractors
388:33 - and obviously I'm not going into the
388:35 - details of what all kind of things you
388:37 - can extract let's say if your image is
388:40 - having some kind of jets coming out from
388:42 - the center of the uh Galaxy it might be
388:46 - indicating that it's coming from some
388:48 - kind of a like you know x-ray sources
388:51 - and that x-ray sources are nothing but
388:53 - indicating a presence of black hole or
388:57 - something that is ejecting this kind of
389:00 - high energy uh x-ray beams right so with
389:04 - respect to that whatever kind of
389:05 - particles you can associate with you can
389:07 - create your hypothesis and uh work on
389:10 - that so yes guys that was about how you
389:13 - can use different image processing
389:16 - techniques once you are importing the
389:18 - image I have shown you how you can apply
389:21 - different type of image uh processing
389:23 - techniques by implementing two different
389:25 - filters and also two different feature
389:28 - extractors so yes guys that was about
389:30 - this particular
389:32 - video all right guys so with this being
389:34 - said over here we are finally done
389:36 - completing each and every module of this
389:38 - program now I'll be creating one more
389:41 - video after this to conclude everything
389:43 - in just one video from the start till
389:45 - the end and what are some kind of
389:47 - further steps that you can take in order
389:49 - to continue your journey in terms of
389:52 - astronomical image processing or some of
389:55 - the other stuff that can help you from
389:57 - the programs that we have uploaded on
389:58 - udm itself so stay tuned for that hi
390:02 - everyone I welcome you all for one final
390:04 - time in this program on astronomic
390:06 - research data analysis first of all I
390:09 - congratulate each and every one of you
390:12 - to successfully complete all the four
390:14 - modules of the program now let's go
390:16 - ahead and conclude this whole program
390:17 - that we had conducted so to start with
390:19 - in the module one we looked into the
390:21 - very basics of python that you need in
390:24 - order to create cre some amazing
390:25 - visualizations that you have created by
390:27 - the end of module 4 in each of these
390:29 - modules you were creating some kind of
390:31 - different types of visualization so yeah
390:33 - for those things we uh understood some
390:35 - basic uh of the Python after that we
390:38 - moved on to module two where we took the
390:40 - tabul boring kind of data of stars and
390:43 - converted some amazing visualizations on
390:45 - top of that we created the bar plot we
390:47 - created the line chart we created a lot
390:50 - of different visualizations including
390:52 - the HR diagram then we moved on on to
390:55 - module 3 over there we took the data
390:58 - from the astronomical surveys like sdss
391:01 - DSS and then did some pixel scaling on
391:05 - the image that we have got in order to
391:07 - find some interesting things that you
391:09 - can see in that particular image then in
391:11 - module 4 we use the output from module 3
391:14 - in order to enhance the features that
391:17 - were present in that image which we
391:19 - couldn't see till module 3 but in module
391:21 - 4 we saw a lot of things depending on
391:24 - some kind of feature extraction
391:25 - techniques that we had seen from the SK
391:27 - image so by now you must be having this
391:30 - kind of an idea that whatever type of
391:33 - visualization you want to create in
391:34 - Python you are now eligible to do that
391:37 - you can save this visualizations and use
391:39 - this in any kind of your research work
391:40 - that you are doing uh or maybe
391:42 - internship report or even the thesis
391:44 - work all of these kind of things you can
391:46 - surely go ahead and use this so with all
391:48 - these things being said I'll Bid
391:51 - Farewell to all of you guys and I hope
391:53 - to see you anytime soon in future thank
391:55 - you guys