00:00 - hey guys i want to go over some of the
00:02 - differences when doing typescript and
00:05 - react so to start off i like to use this
00:08 - boilerplate called create react app
00:11 - typescript it's very similar to create
00:13 - react app but it is using typescript so
00:16 - i'll link this in description below so
00:18 - i'm going to be using this as the
00:20 - starter for today and here is what the
00:22 - code looks like
00:24 - i haven't touched anything but by
00:26 - default they give you a nice ts config
00:29 - with some good defaults and then we can
00:31 - go in here and change any of these if we
00:33 - want to
00:34 - and then also they have a ts flint
00:37 - which is nice as well which just lens
00:39 - your
00:40 - typescript code so you have both of
00:41 - those by default you don't even have to
00:43 - worry about them
00:44 - so let's just dig into some of the
00:45 - things that are different so first off
00:47 - how you actually import react
00:50 - so look at the top up here i have import
00:53 - star as react from react
00:55 - and the reason you have to do that is
00:56 - because react does not export anything
00:58 - by default
01:00 - so now you'll import all
01:03 - react like that and also when you're
01:04 - installing other third-party libraries
01:07 - you might have to do the same thing
01:09 - as well
01:11 - it really it'll tell you when you're
01:12 - doing it what you need to do it'll have
01:14 - like little red
01:16 - lines like
01:18 - if i get rid of that it's going to be
01:20 - like hey this has no default export
01:23 - this is what the air looks like and
01:25 - that's how you know you need to switch
01:26 - it over to this
01:28 - all right the next thing is how do you
01:30 - add basically types to your react
01:33 - components
01:35 - so to demo this i'm going to create a
01:36 - new thing i'm going to call it form dot
01:39 - tx
01:40 - tsx and you'll notice uh your file names
01:44 - are different that's another thing so
01:46 - instead of jsx it's tsx
01:49 - um and i'm just gonna copy these
01:52 - to make this faster
01:54 - and don't need those so this is going to
01:56 - be a form component
01:59 - and we'll empty this out
02:05 - all right
02:06 - so first off this guy might have props
02:09 - so what i like to do is create an
02:11 - interface
02:12 - called props and then here specify all
02:14 - the things that you can pass to this
02:16 - um component so maybe this component has
02:19 - some text
02:20 - which is a string
02:23 - and then maybe it also has
02:25 - a
02:26 - age i don't know this is just a random
02:28 - value which is a number and maybe that
02:31 - is optional
02:33 - so the way you tell your component is
02:35 - you do angle brackets at the end here
02:37 - and then you pass in props like that
02:41 - and now
02:42 - and i'm not sure what it's mad at
02:44 - oh this is
02:46 - it likes to start with
02:48 - i at the beginning of the interface this
02:50 - is a tslent thing
02:52 - so we could do it like that if we wanted
02:53 - to i usually turn that rule off though
02:56 - okay so we have the props here so right
02:58 - off the bat we'll get some nice auto
03:00 - completion if we try like destructuring
03:02 - our props so
03:04 - if i want to get like text i can now
03:07 - render a div
03:09 - with text
03:13 - so now we know we're going to get this
03:14 - prop
03:16 - the other thing is state so
03:20 - i might have for example a name
03:23 - which
03:24 - we'll set as a default value just an
03:26 - empty string
03:27 - and we'll also have an email which is a
03:29 - string as well
03:31 - so you'll you'll notice it's already not
03:33 - liking stuff
03:34 - oh it's
03:36 - sorting it doesn't like this
03:38 - because
03:39 - looks like we haven't labeled it public
03:41 - private or protected i don't really
03:43 - usually
03:45 - mess with this stuff we can label it
03:46 - private i guess because we don't want
03:48 - anyone else to use our state usually
03:50 - that rule i'll turn off in tslint as
03:53 - well and then let me show you guys what
03:55 - i'm talking about so what i'll usually
03:57 - do is when i don't like some of these
03:59 - rules they're just kind of annoying and
04:00 - they don't really help me
04:03 - i'll copy them so member access this
04:05 - thing in parentheses come over here to
04:07 - tslint
04:09 - and rules
04:12 - you paste it and then you put a zero for
04:14 - you don't want to follow it
04:16 - and then it'll no longer bug you over
04:18 - here about it anymore
04:21 - and
04:23 - i think i just need to do false
04:26 - there we go so now we no longer are uh
04:29 - bugged about that and that's you can
04:31 - just turn them off like that
04:33 - okay so the state we also need to have a
04:35 - type four so again i like to create an
04:38 - interface called i state
04:40 - um so here we have an email which is a
04:42 - string and a name which is a string
04:45 - and then that is the second thing you
04:47 - add to the angle brackets so comma i
04:50 - state
04:51 - and if you don't have props
04:54 - what you can do is you can just put an
04:56 - empty object and then the state
04:59 - and then if you do not have a state
05:02 - you can just leave it like this and not
05:03 - worry about it
05:04 - and we can also set our state here like
05:07 - that
05:08 - so there we go i state and we
05:11 - specifically saying what it is
05:13 - and then we can again
05:15 - we have now some nice auto completion
05:17 - for our state
05:19 - um and it'll tell me the two properties
05:20 - so name and maybe i'm showing the name
05:24 - and the nice thing about
05:26 - specifying the props on your component
05:29 - is now if i'm over here i try importing
05:31 - that so
05:33 - get rid of this junk
05:36 - if i were to do um our form
05:40 - and it doesn't look like it it i wanted
05:43 - to just auto
05:45 - import this guy for me maybe it's
05:47 - because i didn't call it form
05:49 - no i did that's sad we'll just import it
05:52 - ourselves
05:56 - and we don't need those two okay
05:58 - so immediately we get red lines because
06:01 - we have specified that we need to have
06:03 - at least the prop text
06:06 - so that's how we know and we can say
06:08 - hello
06:09 - and then the red lines go away and if we
06:11 - try added adding any other type of
06:14 - property like maybe a is going to be 5
06:16 - it's not going to like it but i can't
06:18 - add for example age which is optional
06:21 - so that's the nice thing about
06:22 - specifying the props on your
06:25 - component
06:27 - the other thing here's just a common
06:29 - scenario is you'll have like an input
06:32 - element
06:33 - and let's say that's my name
06:37 - and value is going to be name
06:40 - and on change is equal to this dot
06:44 - handle change
06:46 - so this is if you want to do a form and
06:49 - react
06:50 - so here we're getting the uh
06:53 - this guy right here so this is an event
06:55 - so we have to specify what the heck is
06:57 - the type for this event right
06:59 - well it's going to be react dot form of
07:01 - it
07:02 - and then you have to specify uh the
07:04 - element so this is going to be an html
07:06 - input
07:07 - so this is a little bit weird but this
07:09 - kind of stuff you can just google
07:11 - whenever that comes up i'd use this one
07:13 - a lot so i haven't memorized
07:16 - but
07:18 - you expect this function here
07:20 - to give you and i guess it just pops up
07:22 - now because we added it here
07:25 - but it's going to give us a form event
07:28 - and this is coming from an input element
07:31 - and the reason why i put input element
07:33 - here is because this is called an input
07:35 - if this was like for example a text area
07:37 - i would put html text area
07:40 - element
07:41 - and then from that i can say const
07:45 - target and then what i usually like to
07:47 - do which is get the name and the value
07:51 - and then update the state
07:54 - with those um
07:59 - and uh with this one it doesn't pick up
08:01 - on the types for whatever reason and
08:03 - that's what it's complaining about here
08:05 - so what i usually do is i just say any
08:09 - so i don't have to worry about typing
08:11 - those if i wanted to i could say
08:13 - name is a string and value is a string
08:17 - either way works well i guess
08:20 - name so okay here's a little
08:23 - cute thing so now that we have set the
08:25 - interface
08:26 - of
08:27 - the state here it knows that we can only
08:30 - have the keys email a name
08:32 - so we can't just have a generic name
08:34 - value here
08:36 - and what i mean by that is it protects
08:38 - us so for example
08:43 - right
08:44 - and what is it not like here
08:47 - oh it's just not assignable
08:50 - uh we don't worry but we won't worry
08:52 - about that part for now so let's see how
08:54 - it say of set state here we have name as
08:57 - one of the keys and that's good but if i
08:59 - were to say name two
09:01 - it knows that name two is not in my
09:04 - interface
09:06 - or my state so i could not actually
09:08 - um add it so it protects you there and
09:11 - checks the type for that
09:13 - but anyway yeah that's why i just like
09:15 - to use any
09:16 - um because that uh really easily just
09:19 - like fixes all the types because i know
09:23 - i know what i'm using is correct
09:25 - the other way you can get around that is
09:27 - like
09:29 - um
09:30 - you can get like
09:31 - the key of this
09:34 - interface this is a trick i use
09:35 - sometimes so let's
09:37 - name and we're going to say it's a key
09:39 - of
09:40 - i state
09:43 - so and value is a string
09:46 - um okay it didn't like it
09:49 - but this is a little trick where kiev is
09:52 - now
09:53 - a
09:54 - one of these things it's either
09:57 - email or name
09:59 - but doesn't like it i'm just going to
10:00 - keep it back to any but that's a little
10:02 - trick you can use in other cases where
10:04 - you're working with objects
10:06 - anyway so that's how you do handle
10:07 - change if you're doing forms and
10:09 - typescript
10:11 - the other thing i wanted to talk about
10:12 - was importing libraries
10:15 - so a lot of times you'll be importing
10:17 - libraries
10:18 - that are not typescript libraries for
10:20 - example i might want to add blow dash
10:23 - so let's say i just do yarn add load ash
10:26 - here
10:27 - oh and
10:28 - i messed up my
10:30 - node installation so i need to just add
10:32 - this real quick
10:34 - um and we'll run this again
10:40 - so when that is done we can now import
10:43 - something from load ash right um low
10:46 - dash
10:48 - and maybe i want to use the omit
10:51 - uh guy the mid function
10:53 - um and first off it doesn't like that i
10:56 - have it ordered in the wrong way
10:58 - again this is another rule i like to
10:59 - just turn off let's come over here
11:04 - and say false
11:06 - all right so
11:07 - i'm just going to say
11:11 - omit
11:12 - from the props
11:14 - the name
11:16 - not name age
11:18 - so this is just me using omit just to be
11:20 - silly but the point i want to show you
11:22 - is look at this little error we could
11:24 - could not find declaration file
11:26 - so we don't have any types for this load
11:29 - ash right now
11:30 - and because it's written in javascript
11:32 - so we don't know what the types of any
11:34 - of that is
11:35 - so one way you can do is just say all of
11:38 - them are
11:40 - anything and the way you do that
11:42 - is by declaring the module so here is
11:45 - images.d.t.s so this is in
11:48 - this folder
11:49 - you can see they're already declaring a
11:51 - module for some of these things we could
11:53 - declare module lodash
11:58 - and now it doesn't have any problems so
12:00 - now this is going to be typescript
12:02 - thinks lowdash can be the type of
12:04 - anything you can also specify
12:06 - specifically what the types of all the
12:08 - low dash things are
12:10 - and by the way you can create other like
12:12 - i could create
12:14 - my types
12:15 - all that matters is you have the dot dot
12:18 - ts at the end of it
12:20 - and so i could move that over here as
12:22 - well
12:23 - and you could declare your type in there
12:27 - the other thing is
12:29 - what's nice is
12:30 - this it's not very nice to have
12:34 - note types for your libraries and other
12:37 - people need the types as well so there's
12:38 - something called definitely typed that
12:41 - adds types for all these things so you
12:43 - don't have to go and do this
12:45 - so we can just delete that
12:47 - so the way you do it is you say you are
12:49 - an ad and it's actually another package
12:51 - so at types slash low dash
12:55 - so this is
12:56 - a
12:58 - at the beginning at types slash and then
13:01 - the name of the library now they don't
13:02 - always have all the libraries
13:05 - but they have a lot of them in this case
13:07 - they have low dash so now we have the
13:09 - types for low dash
13:11 - and it'll actually and we can hover over
13:13 - and we can see actually what the type of
13:15 - this emit function is
13:17 - so that's super nice
13:20 - and i think that's about it when working
13:22 - with react and
13:25 - typescript now you'll probably run into
13:27 - some things where you're using like
13:29 - higher order components and it can be
13:30 - really hard to type them
13:32 - with that stuff i recommend just
13:34 - googling go to stack overflow for that
13:35 - stuff um it can get really complicated
13:37 - or just using the any type with that
13:40 - sort of thing um
13:43 - and then uh yeah that's pretty much it
13:45 - with libraries you might have to be
13:46 - importing like this like with react and
13:49 - then also remember to
13:50 - install your types so here's my package
13:53 - that json
13:54 - here are the types and you can see they
13:56 - already install some types for you like
13:58 - react
13:59 - and what these are is just type
14:02 - declarations for typescript that someone
14:05 - already just went through and added all
14:06 - the types for like lowdash
14:08 - but yeah that's it for this video guys
14:10 - thanks for watching