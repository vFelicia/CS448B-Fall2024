00:00 - In Javascript the thing called this is the object that owns the Javascript code
00:08 - the value of this
00:09 - When used in a function is the object that owns the function the value of this when used in an object is the object itself
00:18 - When used outside a function or object this refers to the global object
00:23 - So this that document is the same as document because it's in the global object and also
00:30 - This in the web browser is equal to window
00:34 - So if you do this, step a and set it to equal 37 and window dot a is going to equal 37
00:39 - Let's see that in the console
00:41 - So C. True true and in 37 any
00:47 - Function if the value of this is not set by the call this will default to the global object
00:53 - so for instance
00:55 - This function returns this and here the function is called it returns this and we find out this equal to window
01:02 - We can see in the console that
01:04 - The function returns this and it equals to the global object
01:08 - however in strict mode
01:12 - the value of this remains at whatever was set to when entering the execution context so if
01:20 - We run this code, and you can see at the end. We're gonna have false
01:24 - Now this is going to be undefined. It's not going to equal the global object
01:30 - Now I'm going to talk about the call and Apply methods
01:33 - When a function uses the this keyword in its body
01:37 - Its value can be bound to a particular object in the call using the call or Apply methods
01:42 - So let's see an example of that we have this function add
01:46 - Where we pass in C and d and it's going to return this a plus this dot B plus?
01:53 - C and d so we're passing in the C and D and then it's going to be drawing these from outside of the function?
02:00 - Here we have the variable o which is assigned an object where a is set to 1 and B
02:07 - Is set to 3 we're going to run the add?
02:10 - Function and where you're going to use the call method
02:13 - The first parameter of call is the object to use as this and the other parameters are passed?
02:21 - in as arguments in the function call so we are going to set this to oh and
02:26 - Remember O has a set to 1 and b. Set to 3 and then we're going to pass in
02:32 - 5 and 7 so C and D become 5 and 7 here and this becomes O
02:40 - so let's add a
02:41 - Console.log here
02:44 - If we run that we can see 16
02:46 - That's just 1 plus 3 plus 5 Plus 7
02:50 - Now apply is almost just like call the main difference is that call
02:55 - Accepts an argument list while apply just accepts a single array of arguments
03:02 - So we are passing in the arguments as 1 array instead of the list
03:08 - And you can see in the console we have 34 that's just a 1 plus the 3 plus the 10 plus the 20
03:15 - Now the bind method
03:17 - When you call the bind method on a function and pass in an object
03:20 - It creates a new function with the same body in scope as the original function
03:25 - But where this occurs in the original function in the new function it is permanently bound to the first argument of bind
03:32 - This will make more sense with an example. We created a function f and inside this function
03:37 - We're going to return this dot a we are going to use the bind method
03:41 - To figure out what this is going to refer to so here
03:45 - We're going to create a new variable G and set it equal to function f
03:51 - But we are going to bind the context of this
03:54 - And we're going to pass in this object here where a is going to equal?
03:59 - Unicycle, so if we console.log g
04:03 - It's just going to return this to a and we set this and g to equal this context here where a equals
04:11 - unicycle however, it's important to know if we create a new variable h and we try to do g dot bind and set a
04:18 - Serial it's not gonna work with g. We've already set the context to this with this spine. You can't call bind again
04:26 - Something that you've already treated with bind
04:28 - Let me show that in the console first
04:30 - I'm going to comment that out and
04:32 - You can see it's going to be unicycle once unicycle twice because it doesn't work the second time now
04:37 - Let me explain these last two lines here. So we're going to create a new variable oh and
04:41 - We are going to set a to eight f to the f function
04:46 - G to the g up here and eight, we're going to set to eight up here
04:51 - So look how this works concert that log on a console dot log oh f well?
04:56 - oh, well here's f and f is up here return this to a
05:01 - Well, this is now going to refer to this context right here, so a is going to equal 8
05:10 - Then we're going to console dog. Oh dot g
05:15 - G has bound this to something else
05:18 - G has bound a to unicycle, so instead of getting the a from here
05:24 - It's going to a log unicycle, and then we have oh dot h
05:29 - It's not gonna bind a second time so it's not going to bind Cereal to h
05:33 - so if we run that we
05:37 - Can see eight?
05:39 - unicyCle unicycle
05:40 - So that equals eight. This is unicycle, and this is unicycle, okay now
05:45 - We're going to see how this works in errol functions may paste in another example
05:49 - With erol functions. This is bound to the enclosing scope at creation time and cannot be changed
05:56 - So the new operator by and call and apply have no effect on this
06:01 - So let's see how it behaves differently in a traditional function versus an arrow function
06:07 - We have bo here. Here's the traditional function where we're going to consult that log
06:12 - Traditional function this equals equals oh question mark and then we're going to see does this equal equal equal oh
06:18 - and then with the aerial function
06:22 - We're going to consult log hero function this equals equals equals
06:26 - Oh, and then see if this is true with the arrow function, and then we're going to see if it equals
06:32 - the window here, so
06:34 - if I run this
06:36 - After calling the traditional function and calling the aral function and the traditional function this does equal
06:42 - Oh, and you see that oh is
06:45 - Where this traditional function is that inside? Oh?
06:48 - However in the arrow function this is not going to be equal to oh
06:54 - But this is going to be equal to window. That's true the arrow function attached to O
07:01 - was
07:02 - created in the scope of Window and
07:06 - Run in the scope of O so this arrow function is forever bound to the scope of window where it was created
07:14 - Okay, we're going to talk about one last thing with the this keyword
07:17 - When a function is called as a method of an object
07:20 - It's this is set to the object the method is called on so look at this example
07:26 - we have oh and
07:27 - Inside o we have a one property 37 and f is set to a function that's going to just return this that prop
07:34 - So when we call oh f and we log that you'll see it's going to log 37
07:41 - Let's run that to confirm here, and you can see at the bottom we have 37
07:45 - Because this is going to be bound to the o object because the function is called as a method of that object
07:53 - Now this behavior is not at all affected by how or where the function was defined?
07:57 - So we just add them this new additional code. We're gonna set. Oh to just have this prop
08:02 - that's gonna be set to 23 so here we had the prop and we had the function all with an o
08:07 - But now we have the just the prop here
08:10 - And then we're going to make the function independently so in this function independent
08:15 - We're going to return this dot prop
08:18 - Just like we did up here and we're going to set f to equal this function here
08:23 - But we're going to call the function. Just like we did before and
08:27 - Again, it's going to just get the number 23
08:30 - So this is just showing that it doesn't matter where the function was defined
08:35 - It just matters as being called from within the object so it's gonna refer to the property within the object
08:41 - Well, thanks for watching my name is Beau Carnes. Don't forget to subscribe and remember use your code for good