00:00 - hey guys welcome to this video in this
00:02 - tutorial we're going to be building six
00:04 - different python projects so these
00:07 - projects are going to be a little bit
00:08 - above the beginners level
00:10 - so you can consider them as intermediate
00:12 - python project so right here i have the
00:16 - list of projects which we're going to be
00:18 - building so as you can see there are six
00:20 - projects right here that we're going to
00:22 - be building in this tutorial
00:24 - so guys if you like more tutorial like
00:27 - this don't forget to check out my
00:28 - channel at code with tomi where i teach
00:31 - more on python
00:32 - so having that said let's dive straight
00:35 - into this video
00:42 - hey guys welcome to this tutorial
00:44 - so in this tutorial we're going to be
00:46 - using web scraping to get the image link
00:50 - of the profile image of a particular
00:52 - github
00:53 - account or let's say github user
00:56 - so what is our program is going to be
00:58 - doing is that it's going to ask a user
01:00 - to input the username of a particular
01:03 - github account and then it's going to
01:05 - return back to that same user the
01:08 - image link to the profile image of that
01:10 - account in which the user input so let's
01:13 - visualize this
01:15 - right here i have my own github account
01:19 - so this right here is my username where
01:22 - you see tomitoko or you can also come to
01:24 - the url yeah you can see that's my
01:26 - username so this is what we're expecting
01:29 - from a user so once a user inputs this
01:32 - username what it's going to get is a
01:34 - link to this profile image so as user
01:36 - clicks on that link it takes the user
01:38 - automatically to the profile image
01:41 - so let me show you an output of what
01:43 - we're going to be building
01:45 - right here you see it says
01:48 - impulse github user
01:50 - i'm just going to import tummy tucker
01:53 - now you can see it gives me this link
01:55 - now once i click on this link
01:58 - i need to open link
01:59 - you can see it takes me to the profile
02:02 - image of that github account now we can
02:04 - do this for various things we can let's
02:07 - say once a user gives us the username we
02:11 - can tell the user how many followers
02:12 - that particularizer have or we can
02:15 - tell the user the amount of repositories
02:18 - or
02:20 - the the twitter and anything anything
02:22 - actually we can do with web scraping
02:24 - so
02:25 - this is a little bit above the basics of
02:27 - python that's why i decided to teach
02:29 - this in this video
02:31 - so
02:33 - on web scripting
02:35 - before we start web scraping we need
02:39 - two things
02:40 - which are
02:41 - requests and ps4 now these things are
02:45 - python libraries these are the most
02:47 - popular python libraries used in web
02:49 - scraping they make web scripting a lot
02:51 - easier to
02:52 - implement in whatever you are building
02:55 - so as you as i said there are python
02:57 - libraries when we want to use a python
02:59 - library that is not built in with python
03:01 - we need to install it using pip or
03:04 - manually install it or however you
03:05 - install your libraries for this video
03:08 - i'm going to use pip to install requests
03:11 - and ps4
03:13 - now to do this i'm going to say peep
03:16 - install requests
03:19 - now this is going to return to my
03:21 - requirement already satisfied as you can
03:23 - see it says requirement already
03:24 - satisfied that's because i already have
03:27 - it installed and the next thing i want
03:29 - to install is peep
03:31 - install
03:33 - bs4
03:35 - now this command line is also gonna
03:38 - install this ps4 now this bs4 is uh
03:42 - let me say is a library
03:44 - but what we need mainly from this bs4 is
03:46 - beautiful soup for a beautiful soup only
03:50 - so now let me just close this terminal
03:52 - we have these two libraries installed
03:54 - now what do we want to do we want to
03:56 - start coding
03:57 - now we want to use these libraries in
03:59 - this code so the first thing we need to
04:01 - do is to import those libraries so i'm
04:04 - going to say import
04:06 - requests
04:07 - and then the next thing i'm going to do
04:09 - is to save
04:10 - from bs4 which we installed i want to
04:14 - import beautiful soup
04:16 - but as you can see this beautiful song
04:18 - is kind of long to type most of the
04:20 - times in our code i can just say sbs now
04:23 - what this sbs does is that once we
04:26 - import these beautiful soup function or
04:30 - class or whatever from this library
04:32 - whenever i want to use it in our code we
04:34 - can just simply type bs instead of
04:36 - typing beautiful soup so i'm going to
04:38 - show you how what i mean later in this
04:41 - session
04:43 - so now
04:44 - i've imported that
04:46 - what i just want to do now is to assign
04:48 - a new variable and this variable is what
04:50 - is going to collect the github user
04:53 - so i'm going to say git up
04:55 - underscore user
04:58 - should be equals to input
05:00 - [Music]
05:01 - i'm just going to tell the user to input
05:04 - github
05:07 - user
05:09 - [Music]
05:11 - now once the user input github user
05:14 - let's say my username which is tomitoko
05:16 - is going to be saved in this variable
05:18 - now that we have the github user that
05:20 - design wants to find
05:22 - now web scraping there are some steps
05:24 - you need to do whenever you want to
05:26 - perform web scraping the first thing you
05:28 - need to do is to send a request to that
05:30 - url and as we know the url is going to
05:33 - be this git up url with the username the
05:36 - um whatever user input
05:38 - so we're going to send a request to that
05:41 - page
05:42 - and then we're going to get a response
05:44 - of 200 which means the request was
05:46 - successful now when we send a request to
05:49 - that page what is going to happen is
05:51 - that we're going to get
05:54 - the old html code of that page
05:57 - now once we get the old html code of
05:59 - that page we can easily get any data we
06:01 - are looking for
06:02 - now let's just send a request to that
06:04 - page
06:05 - so let's specify url
06:08 - this url is the page you want to send
06:10 - the request to
06:11 - so as we know it is https
06:15 - [Music]
06:19 - dot com
06:21 - slash
06:22 - now i can just easily say slash tummy
06:24 - tucker but once i say slash tummy tuckle
06:27 - is gonna be giving me only my own
06:30 - profile image but that's not what i want
06:33 - what i want is that it should give me
06:34 - the profile image of whatever our user
06:37 - inputs so now i'm going to make it
06:39 - dynamic
06:40 - by inputting this variable using
06:43 - concatenation
06:44 - so i say https github.com
06:48 - github user which is this variable which
06:50 - is what user input so if the user input
06:52 - any other thing is going to get to that
06:55 - specific url and then get a response
06:58 - now let's send the request so say r
07:02 - equals requests
07:05 - dot get
07:07 - url
07:08 - so now this is gonna send a request
07:11 - to this url
07:13 - which is the url
07:15 - of the user
07:16 - the user input if that makes sense
07:19 - so after getting this
07:22 - the next thing we need to do is to say
07:23 - sub
07:25 - equals to bs
07:27 - now right here normally it was supposed
07:29 - to say equals to beautiful soup or
07:31 - something like that but because we've
07:33 - already imported beautiful soup as bs we
07:36 - can just easily say bs
07:39 - and then
07:40 - our dot content
07:45 - which is this request so we sent a
07:47 - request if we just say
07:49 - r instead of r dot content it's just
07:52 - going to give us the request let's say
07:53 - the response was 200 but the response
07:56 - was 200 means okay but the response was
07:58 - an error or something now if i click
08:01 - here it says r is a response but when i
08:04 - say dot content
08:07 - now this is basically the html source
08:09 - code everything on that page the content
08:12 - on that url
08:14 - so now and then i'm gonna say html dot
08:18 - parser pass it into an html code
08:22 - so now that we have
08:24 - everything all the html on this page we
08:28 - have it saved in this soup variable
08:31 - it's very easy right right what we just
08:33 - need to do is to just basically print
08:35 - or get that specific image
08:39 - and we know this image will be in a tag
08:41 - in an image tag if you're familiar with
08:43 - html you will understand what i mean
08:46 - now i'm just going to say profile
08:50 - underscore image
08:53 - should be equal to soup
08:55 - dot find
08:58 - now here i need to explain a little bit
09:00 - further now soup.find means from this
09:02 - html code we have find a specific tag
09:05 - with a specific class or with a
09:07 - specification or something
09:09 - now when i come back here
09:11 - i'm going to right click on this my
09:12 - image
09:13 - and then i'm going to scroll down to
09:15 - where i see inspect
09:17 - i hit inspect and what do i see i see an
09:21 - html code of this page but because i
09:24 - right click on this image it's going to
09:26 - take me to the html code of that
09:29 - specific image
09:31 - so now i have what i'm looking for i
09:33 - know that it is an um this the url to
09:36 - this my image as you can see this is the
09:38 - url
09:40 - it's in an image tag and the attribute
09:42 - is in
09:43 - an src so it's an image tag it has an
09:47 - out of avatar and then the
09:50 - src is where the image link is being
09:54 - hidden
09:55 - so
09:57 - it's very easy now i know
09:59 - that it's in an img tag right here
10:02 - that's all we know
10:04 - and then let's give it some more
10:06 - information so it knows exactly what
10:07 - we're looking for because this can also
10:10 - be an image tag as it can also be an
10:13 - image um this can also be an image this
10:16 - can be an image anything can be an image
10:18 - if we give it just only this image it's
10:21 - going to give us back all the images we
10:23 - have on that page but what are we
10:25 - looking for we're looking for this
10:27 - profile image so let's give our code
10:30 - some more information
10:33 - so now
10:34 - let's look for under information we can
10:36 - say the image tag which has an out of
10:39 - avatar we know avatar also means your
10:42 - profile image or your display picture or
10:45 - something like that so
10:47 - i'm just gonna say comma
10:49 - curly braces
10:51 - it has an alt
10:54 - that is equals to
10:57 - avatar
10:58 - [Music]
10:59 - now we know what we're looking for
11:01 - so now
11:03 - this particular tag is being placed in
11:06 - this profile image variable if i print
11:08 - this profile image variable i'm going to
11:10 - get the wall of this html tag but as you
11:13 - know that's not what we're looking for
11:15 - what i'm looking for is only this link
11:18 - so what i'm just gonna do give it a
11:20 - little bit of more information after the
11:23 - world code on that line i'm just gonna
11:25 - say get the src attribute
11:28 - which is where the link is src
11:32 - so from that tag gets the src attribute
11:35 - easy and after that i can just print
11:39 - profile
11:40 - image
11:42 - now this is all the code we need to
11:44 - write for this our python program i hope
11:46 - you understood everything we did so let
11:48 - me run it and just let's check it okay
11:51 - let's delete this timing now to make
11:54 - things easier
11:55 - and run again
11:57 - okay good now it tells us to input
12:00 - github user i'm just gonna input my
12:02 - username
12:04 - and then let's wait you can see now that
12:07 - it just prints the image link to this
12:10 - username so once i open this
12:13 - [Music]
12:15 - i open the link
12:16 - now you can see it gives me the link to
12:19 - my profile image which is very good
12:21 - which is what we want
12:22 - so we've accomplished with beauty to
12:25 - this program just let me just quickly
12:28 - have a
12:29 - quick recap of what we did so
12:32 - i said from the beginning we need two
12:33 - libraries for web scripting there also
12:36 - countless libraries we can use for this
12:38 - but this is the easiest to implement and
12:41 - to get started with as a beginner in web
12:44 - scripting
12:45 - so
12:46 - we say import requests which is the
12:48 - first library we need i'll say from bs4
12:52 - import beautiful soup as bs which i
12:55 - explained why we put as bs which is just
12:58 - to make it smaller to type instead of
13:00 - typing beautiful soup
13:02 - now we added a new variable which was
13:05 - github user
13:06 - and then this github user collected the
13:08 - username of the github profile we want
13:11 - to get the image link of
13:14 - and then we just send we specify the url
13:17 - which is github.com that user and then
13:20 - we sent a request to that url
13:22 - and then once we got the response we use
13:25 - beautiful soup to get the particular
13:27 - html source code
13:29 - after doing that
13:31 - we now go to the profile image so sub
13:34 - dot find
13:35 - image tag alt which is avatar give me
13:38 - the slc which is the source and then
13:41 - once we have that in this profile image
13:42 - we just print it to the user
13:44 - very good very understandable now i hope
13:47 - you
13:48 - got what we did in this tutorial
13:56 - hey guys welcome to this tutorial
13:58 - in this tutorial session we're going to
14:00 - be building a python program that is
14:04 - going to bulk rename
14:05 - all the files in a folder so what we're
14:08 - going to be building is like
14:09 - a bulk renamer python program so this
14:13 - program is going to go into a particular
14:16 - folder on our desktop and then it's
14:18 - going to rename all the files present in
14:21 - that folder to whatever we give it
14:24 - so
14:25 - let me i would have loved to show you
14:27 - the output before we start coding but
14:29 - there is no way to do that without
14:31 - having the code right there already so
14:33 - um let's just go ahead with the coding
14:36 - phase and we'll see the output when
14:37 - we're done so let me just uh go into
14:42 - the folder so right here in this folder
14:44 - i have three images with um different
14:47 - names
14:48 - so
14:49 - the python program is gonna come into
14:51 - this folder and then rename everything
14:53 - to let's say images
14:55 - zero images one this one might be img0
14:58 - img1 img2 accordingly that's how it's
15:01 - gonna rename so it's a bug renamer uh
15:04 - let me say program let's go ahead and do
15:07 - this
15:08 - so we're just gonna import our os just
15:10 - for python to know the operating system
15:12 - we are using
15:14 - so now that python
15:16 - we've imported os
15:18 - we're going to create a function that is
15:20 - going to rename multiple files because
15:23 - as i said this program is going to
15:25 - rename all the files present in that
15:28 - folder so it might be one it might be
15:29 - two some multiple
15:32 - now we're going to set i equals to zero
15:35 - now as a default it sees that the
15:38 - oh let me say the
15:40 - other files in that folder is zero
15:44 - so that's why it says i e to zero
15:46 - before we do this we first have to have
15:48 - our function so this i should be in our
15:50 - function
15:51 - so this is our function
15:53 - we can name it main that's the main
15:55 - function
15:56 - it doesn't have to take any parameter
16:00 - so now i is equals to zero
16:03 - and then we have to specify the path
16:05 - now this path is the
16:09 - directory in which the folder is so i'm
16:12 - gonna come to this folder
16:15 - right here just something like a bar
16:17 - like a directory bar we're gonna copy it
16:20 - we come back here and paste
16:22 - so right now this is the
16:25 - it's just like a url you know um
16:28 - www.something.com so this is just the
16:30 - local directory where python is going to
16:33 - go find our folder but as you can see
16:38 - um automatically or let me say
16:40 - in default when i copied the
16:44 - directory link or something like that it
16:46 - gives me in front slash so if i when i'm
16:50 - done and i run this
16:52 - while this is team front slash we're
16:54 - going to get a unicode error
16:56 - so
16:57 - we need to change all of these
17:01 - everything like this is in the backslash
17:03 - sorry for that mistake but we need to
17:04 - change all of this to a front slash so
17:06 - like this
17:09 - we need to change everything to a front
17:11 - slash
17:14 - and then the last one to a front slash
17:16 - now python knows where to go get all
17:19 - these
17:21 - files from now i'm just going to use a
17:23 - for loop to loop through the old file so
17:26 - c4
17:28 - file name
17:31 - in
17:32 - os
17:33 - dot list
17:36 - there
17:38 - of path
17:40 - so it's getting all the files
17:42 - in this part and storing it as a list so
17:46 - now
17:47 - i'm just going to say my
17:49 - underscore dest let's just name it as
17:52 - this variable
17:53 - should be equals to now what do we want
17:56 - to save it as let's just save everything
17:58 - as
17:59 - img something like img0 img1 img2
18:04 - so cimg
18:08 - plus
18:09 - string
18:11 - [Music]
18:12 - i
18:15 - then plus
18:18 - does jpg we want to save everything as a
18:20 - jpg file we can save it as a png we can
18:23 - save it as tif anything we want
18:26 - but yeah we want to save it as jpg so if
18:29 - you try to get what i just wrote here
18:31 - this is a variable yeah so in this
18:33 - variable
18:34 - well the name is going to be img plus
18:37 - string
18:39 - i so as i said this i
18:41 - it sees the default as zero but since we
18:43 - are looping through everything it's
18:45 - gonna get it from
18:47 - zero one two so it's gonna be img that i
18:51 - for this first one is gonna be zero so
18:52 - it's gonna be img zero dot
18:55 - does jpg so still going to remain the
18:57 - jpg so when we run this you're going to
19:00 - understand the concept i used right here
19:03 - so now
19:05 - we can just simply say my source
19:09 - [Music]
19:12 - should be equals to
19:15 - path
19:17 - plus file name
19:20 - and then let's now see my tests
19:25 - should now be equals to path
19:28 - [Music]
19:29 - close my desk again
19:32 - so right now
19:34 - let's just rename the function with
19:35 - everything we've done we just say os dot
19:38 - rename
19:39 - [Music]
19:43 - my source
19:46 - my dist
19:48 - so now this is just renaming it
19:51 - and then we increase it so we say
19:54 - this i we have to increase it as it's
19:56 - looping through each of it so say i
20:00 - plus
20:01 - equals one or we can just say i equals i
20:04 - plus one or something like that but this
20:06 - is okay
20:07 - so then after doing this
20:09 - you know we need to run this function
20:11 - immediately
20:12 - the python program is being run so say
20:15 - if
20:17 - on the scan name
20:19 - this underscore
20:21 - equals to
20:24 - underscore underscore main
20:26 - on this girl underscore
20:29 - then we put a column
20:31 - and right here we just got our main
20:33 - function
20:34 - now this is good
20:36 - now i'm just going to save this file
20:38 - if i come back here
20:40 - and let me just refresh this same
20:42 - your directory you can see that i still
20:45 - has this name
20:47 - but now when i come to my code
20:49 - and then i run my code
20:51 - now you can see here it gives me an
20:53 - error so what does it say it says file
20:56 - not found system cannot find the file
20:59 - specified
21:01 - so
21:01 - it can find this file exactly um what is
21:05 - it looking for now you can see it's
21:07 - looking for
21:09 - c slash tests
21:11 - img0 so there's a little problem with
21:15 - the link
21:16 - between the path
21:20 - is trying to find a file named path
21:22 - so
21:23 - what we need to do is to make sure that
21:26 - there is no problem right here
21:28 - so let's quickly scroll down a little
21:31 - bit
21:32 - and then right here
21:34 - what we can just do let's just make sure
21:37 - there's no problem
21:39 - [Music]
21:41 - so osd rename
21:44 - my source
21:45 - command my disk now this is just making
21:48 - sure there's no problem
21:50 - and then everything is a string here
21:53 - let's start from here using a for loop
21:55 - for file name in os does lists
21:59 - there
22:00 - so
22:01 - okay now where the problem is coming
22:04 - from is um this
22:06 - let's run it again you see it's going to
22:08 - give us that same error so right here
22:10 - whenever you're using um let me say a
22:12 - directory as i said first of all we need
22:15 - to change it to front slash and then we
22:18 - must make sure that the ending we also
22:19 - add another font slash
22:21 - now when we run this i'm not going to
22:23 - have any errors and everything right
22:25 - here is going to be renamed to img0 imd1
22:28 - img2
22:30 - uh no no no no no like that
22:32 - so now let's try to do this
22:35 - we run it
22:36 - it doesn't give us anything right here
22:38 - as you can see
22:39 - but when i come here you see everything
22:41 - has been renamed img0 img1 img2
22:45 - the jpeg
22:46 - now these is how to basically
22:49 - bulk rename all the files in a
22:52 - particular
22:53 - let me say any particular
22:55 - folder
22:56 - now i can change everything again you
22:58 - know let me just cancel that instead of
23:01 - img i can say image and i can just
23:05 - let me still leave it as jpeg so now i
23:07 - change everything to image i know what i
23:09 - want to do i want to make this more
23:13 - so i'm just going to make it a lot of
23:15 - files
23:16 - so now you can see we have all those
23:18 - files i think we have 13 right here now
23:21 - and then once i just run this first of
23:23 - all you see everything is img0 mg1 and
23:26 - you to copy
23:27 - now this is going to be renamed from
23:28 - this
23:30 - when i run it now
23:32 - just want to make sure that yeah so it's
23:34 - wrong without any error now you see img0
23:37 - i'm in image0 image 1 2 3 all the way to
23:41 - 12. now that is how to bulk rename using
23:45 - a python program so let's go through
23:47 - what we did in this tutorial so we
23:50 - imported os which is going to allow us
23:52 - to get our operating system if on the
23:54 - windows or on a mac if on the linux or
23:57 - whatever
23:58 - then we just used a function
24:00 - we gave it main and then we said i
24:03 - equals to zero
24:05 - now we said the path should be equals to
24:08 - the directory which we are looking for
24:11 - and then we use the for loop to loop
24:13 - through everything
24:14 - my my desk this my desk so like my
24:17 - destination or something like that the
24:19 - final name which you want to name it we
24:22 - gave it a particular format then we just
24:24 - use all these to make sure we pass it
24:27 - and then we use os.rename to rename it
24:30 - and then after doing for one we increase
24:33 - i by one we look through again all the
24:36 - all files and then we now use this if
24:39 - statement to make sure that immediately
24:41 - we run this program it automatically
24:44 - calls this function and that's what we
24:46 - did in this tutorial session i hope you
24:48 - understood it i hope you guessed the
24:50 - concept of renaming bug files in python
24:59 - hey guys what's up welcome to this
25:01 - tutorial um so in this session we're
25:05 - gonna be building a weather app so this
25:09 - weather program is gonna tell you the
25:13 - current weather situation in a
25:15 - particular city or a particular location
25:17 - or country or town so
25:20 - what we're going to be building is a
25:21 - program that is going to ask a user
25:24 - to input let's say a city or a town or
25:27 - any location and then it's going to
25:29 - return to that user
25:31 - details of the weather situation in that
25:33 - location so let's say for example a user
25:36 - inputs in london it's going to
25:38 - tell the user first of all where london
25:40 - is located and then the current weather
25:43 - situation right there
25:45 - so for us to do this we're going to be
25:48 - using the open maps weather api
25:53 - open weather maps appear so when i come
25:56 - here this is their website
25:57 - openweathermaps.org
26:00 - all you just need to do is to sign up
26:03 - so when you sign up you log in and it
26:05 - comes straight to api keys and you're
26:07 - gonna see that you have this default key
26:10 - so once you have the default key we're
26:12 - gonna copy it and then use it in our
26:14 - code later but for now let's start with
26:17 - the code just make sure you have the api
26:20 - key first of all then you can follow
26:22 - along
26:23 - so now
26:24 - what we just need to do is to import
26:26 - requests
26:28 - [Music]
26:29 - now on this request is a python
26:32 - libraries for sending requests to any
26:34 - website so you know we are using the api
26:36 - of this website you have to use requests
26:38 - to send a request to that website
26:42 - and if you don't have this just install
26:44 - it by saying pip install requests in
26:47 - your terminal
26:48 - so now we're also going to import
26:50 - something named pretty print
26:53 - from
26:54 - b print
26:56 - import
27:00 - b print
27:02 - so
27:02 - when we send a request to this page
27:06 - is going to give us a response in a json
27:08 - format
27:10 - so when we have that response in the
27:12 - json format is always not so easy to
27:14 - visualize or to read so this pretty
27:17 - print library is going to turn that json
27:20 - format into like a tree you know a what
27:23 - tree or dictionary tree in which you are
27:25 - going to be able to read normally
27:28 - so
27:29 - after that what we just need to do is to
27:31 - specify a new variable and name it api
27:35 - key
27:36 - so something like this let's leave it
27:38 - blank for now
27:40 - and then let's add a new variable
27:42 - and name is city
27:44 - so this will be an input from the user
27:47 - and then we're going to tell the user to
27:49 - enter
27:51 - a city
27:54 - so now once we have whatever the user
27:56 - inputs let's just say base url
28:00 - which is the url we're going to send the
28:02 - response to
28:04 - then we're going to do
28:06 - i'm going to paste this so this is the
28:08 - url which we're going to send the
28:10 - response to
28:11 - but whenever we're sending this response
28:13 - to this url we need to send it with our
28:15 - api key and we also need to send the
28:17 - response with the city we want to get a
28:21 - response from so i send a request to
28:23 - this url
28:25 - with our api key and the city then we're
28:27 - going to get a response
28:29 - so
28:31 - i'm just gonna say
28:33 - plus the api key
28:37 - so before plus api key this is the
28:39 - normal url then let's add a parameter by
28:41 - using
28:42 - these and i'll say app
28:46 - id
28:48 - is equals to
28:50 - api key like this so i just
28:53 - concatenating and making it
28:55 - a perfect url so now let's continue with
28:59 - the concatenation
29:01 - by saying plus
29:04 - and then let's say and
29:07 - q which is a query
29:09 - or search or something like that then
29:11 - it's now the city so whatever the user
29:14 - input
29:16 - now let's say
29:19 - whether i underscore data
29:22 - because requests dot get
29:27 - right here let's make sure we're using
29:29 - the right thing request dot get
29:33 - base url
29:36 - dot json
29:39 - so now request the get base url.json as
29:43 - i said we're going to get a response
29:45 - from that url and it's going to have to
29:47 - be in a json format so now we have
29:49 - everything we need about this current
29:52 - city in a json format
29:54 - but let's use pretty print
29:56 - to make sure that it is readable and it
29:58 - makes sense so say p print
30:03 - weather data so this is going to pretty
30:06 - print the weather data now let's run
30:08 - this program
30:12 - right here it says i should enter a city
30:14 - i enter london
30:17 - now you can see it says invalid api and
30:19 - why is that because right here in the
30:22 - code let me quit this i said we should
30:24 - leave the api blank for now so let me go
30:27 - there and copy my api
30:30 - this is my api key and paste it there so
30:33 - remember i said we need this api key so
30:36 - that's why you have to come here create
30:39 - an account log in
30:41 - come here to api keys and then get your
30:44 - api
30:46 - now when we run this we won't get any
30:48 - error
30:50 - and then
30:52 - let's say london
30:54 - now you can see that it gives me
30:57 - information about the weather situation
31:00 - in london
31:01 - so right here
31:02 - entire city london base
31:05 - station so cloud oh it's giving me all
31:08 - this the coordinates um
31:10 - latitude and the longitude is giving me
31:13 - all this so right yeah it feels like 273
31:16 - points it's 3d humidity the pressure the
31:19 - temperature the temperature marks are
31:21 - minimum the name
31:23 - the country the id the sunrise the
31:26 - sunset the type the time zone the
31:29 - weather um description the weather is
31:32 - missed and
31:33 - mainly missed
31:34 - so the wind is 60 and the speed is 4.12
31:39 - so it's giving me all this information
31:40 - which i need so this is how to use open
31:44 - weather maps api to get the current
31:47 - weather situation in any city in the
31:49 - world now we can try this for other
31:50 - cities
31:51 - now let me just run this program again
31:56 - so
31:58 - [Music]
31:59 - entire city let me enter a city like um
32:05 - delhi
32:06 - i entered delhi in india now i have this
32:10 - and it also gives me everything i need
32:11 - to know about delhi as you can see it
32:13 - says it's from india so this is
32:16 - basically how to use
32:18 - this open media webs api
32:20 - get it in a json format pretty print it
32:22 - and then you can implement it let's say
32:24 - you're building a web application a gui
32:27 - our mobile app anything you're doing you
32:29 - can use this python program to implement
32:32 - it in your application now let's go over
32:36 - what we did this is pretty simple we
32:39 - just imported requests
32:41 - we imported printer print
32:43 - we got our api key from here
32:46 - we use the city
32:49 - variable
32:50 - as an input
32:52 - we make sure we specify the url
32:54 - then whether data we sent a request to
32:56 - that url
32:57 - and then we got a response and stored
32:59 - our response in weather data
33:01 - and then we just pretty printed it that
33:03 - was simply all we did
33:05 - now that's going to be all for
33:08 - the weather with python
33:16 - hey guys in this tutorial we're going to
33:19 - be building a countdown timer program
33:22 - using python now this program is not to
33:26 - or this project is not too advanced is a
33:30 - little above the basics the reason why
33:32 - i'm just teaching this is just to show
33:34 - you how to use the
33:36 - while loop concept in some more advanced
33:38 - projects in python so uh we're going to
33:41 - use while loop to do this
33:43 - and then
33:45 - we're also going to use a
33:47 - python library called time
33:50 - so before we go into coding let me show
33:53 - you the output or the final product of
33:55 - what we are going to be building
33:57 - so you can see here it says enter the
34:00 - time in seconds so this our program is
34:02 - going to ask a user for
34:04 - the amount of seconds it wants to count
34:06 - down to if it's 10 seconds if it's just
34:08 - one second if it's five seconds it's
34:11 - gonna count from five four three to one
34:13 - a normal countdown and then after that
34:16 - it's gonna print a message let's say
34:18 - like countdown done or go for a run or
34:20 - something like that so
34:23 - let me show you how this works so now i
34:26 - say
34:28 - three seconds i hit enter it says three
34:31 - two
34:32 - one and it says go for a run now now i
34:35 - can print any message there i can say i
34:37 - can make let's just say countdown done
34:39 - or throw up the fireworks now or
34:42 - something like that
34:43 - so this is how to build a basic uh
34:47 - countdown timer is in python let's get
34:49 - straight into it so now i'm just gonna
34:51 - quit this terminal
34:53 - and the first thing i need to do as i
34:55 - said i'm gonna be importing time time is
34:58 - a python library used whenever we're
35:00 - dealing with
35:01 - time obviously so say import
35:04 - time
35:05 - now after importing time i'm going to
35:08 - create a new function and i'm going to
35:09 - name it countdown
35:11 - this function is going to be what's
35:12 - going to be handling everything
35:15 - concerning the countdown
35:17 - so i'm just gonna say def counts down
35:21 - and i want this function to take in a
35:22 - parameter called t
35:24 - now this t should be the amount of
35:26 - seconds
35:27 - in which a user wants to count down to
35:30 - so
35:32 - we'll put in our column and then we'll
35:34 - say while
35:37 - c
35:38 - [Music]
35:39 - and then we're just going to say minus
35:43 - comma section
35:45 - sscs
35:46 - should be equals to divm od
35:49 - now i usually call this div mode or i
35:51 - don't know i just say div mod
35:54 - and i put t
35:56 - in a matter of 60 seconds so this is the
35:58 - second is telling you why isn't the
35:59 - seconds to count down
36:01 - and now say timer
36:05 - should be equals to
36:08 - our code then we'll put curly braces
36:13 - and then
36:14 - 0 to d
36:17 - and then what i need to do now is to
36:19 - pull a column after this another color
36:21 - braces
36:22 - and then i'm just going to say 0 to d
36:24 - again
36:28 - and then after this i'm going to say dot
36:30 - format
36:32 - [Music]
36:33 - minutes
36:35 - comma seconds
36:38 - and then what i don't want to do is you
36:39 - just print timer
36:41 - [Music]
36:44 - and then
36:46 - end should be equals to
36:50 - [Music]
36:51 - backslash r
36:53 - now this is just the format of the
36:55 - syntax of the way we build this project
36:58 - now i can say time
37:00 - dot sleep
37:04 - and i can give it one so after one it
37:07 - should be done
37:10 - then
37:12 - t
37:13 - minus equals
37:15 - one
37:16 - then after
37:17 - this timer is
37:19 - done
37:20 - i can just say
37:24 - print
37:25 - [Music]
37:28 - timer completed
37:30 - or something else
37:32 - [Music]
37:33 - now after
37:34 - this what i just need to do now
37:37 - is to ask the user to input the amount
37:40 - of seconds say t
37:42 - should be equals to inputs
37:47 - and
37:49 - the time
37:50 - in seconds
37:52 - so i want to ask the user for the amount
37:54 - of time
37:55 - and then after i know that i'm just
37:58 - going to call that function our
37:59 - countdown function
38:01 - i'm going to give it the parameter
38:03 - in
38:05 - t i'm giving a parameter of t but making
38:07 - sure that t is first of all an integer
38:10 - before passing it into this function
38:12 - now this is all we need to build this
38:14 - simple program now let's quickly go
38:16 - through everything we just did
38:18 - first of all i imported time
38:21 - which i said is the library which deals
38:23 - with everything about time in python we
38:26 - are working with seconds minutes hours
38:28 - days months years time can do everything
38:31 - if you want to get the current time
38:34 - let's say um the current date and time
38:37 - that from that library can do everything
38:39 - you need
38:40 - well now we are working on accounts down
38:43 - so once we have that time we just
38:46 - defined a new function and named it
38:47 - countdown
38:49 - and we made it to taking a parameter
38:50 - which is t
38:52 - and then yeah it's saying t as a string
38:55 - but we are making sure that whenever we
38:56 - are calling that function we are making
38:59 - using it as an integer just to avoid any
39:02 - errors
39:03 - so now
39:05 - after
39:06 - assigning or defining that function
39:08 - we give it t t is the amount of seconds
39:11 - so say while t this means as long as t
39:15 - is still available then we just want to
39:17 - say means sex equals to div mode
39:21 - t60 which is an integer then timer then
39:25 - we just give it this format then we'll
39:27 - say dot format into minutes and seconds
39:31 - so then we just want to print this timer
39:34 - and end with a backslash r
39:37 - now these are just the parameters or
39:38 - attributes that this time library needs
39:41 - so it's not something you need to let me
39:43 - say put on your head if you just have a
39:44 - notebook or something you can just write
39:47 - it down and then keep using it whenever
39:49 - you need to
39:50 - so now we can say time does sleep once
39:53 - it's done and then time minus equals one
39:56 - so once everything we're done with
39:59 - configuring it counts down we can just
40:01 - simply print timer completed
40:05 - so
40:06 - the function is done we're done with the
40:08 - function then we just add a new variable
40:11 - named t
40:12 - and then we took these out to input the
40:14 - time in seconds so if these are input 60
40:16 - seconds it's gonna cost us a second is
40:18 - that input 50 it's gonna count 50. then
40:21 - we just call that function once we know
40:23 - what the user wants countdown integer t
40:26 - now we run this
40:29 - when we run these
40:30 - it should ask us for the amount of time
40:33 - we want to count down
40:34 - in seconds
40:36 - so let's wait for this to run
40:38 - this should be up and running within
40:41 - some seconds
40:43 - okay nice
40:45 - so down here okay let me yeah down here
40:48 - it says enter the time in seconds so let
40:51 - me enter eight seconds
40:52 - i hit enter so right here it says key
40:55 - error which is o zero
40:58 - to d
40:59 - now if we come back up here
41:02 - it says there's an error
41:05 - line
41:06 - 15 when calling that function and then
41:10 - on line six
41:12 - so the error is actually coming from
41:15 - here now the reason why there's an error
41:17 - is simply because we didn't add a column
41:19 - between 0 to d so this is the format of
41:22 - time when we're dealing with this time
41:24 - library we need to do everything in the
41:27 - right syntax so whenever you are using 0
41:30 - to d the first one represents the minute
41:33 - the second represent the seconds so you
41:35 - must make sure to also add this column
41:39 - now this was the reason we are getting
41:41 - this error let's quit this time you know
41:43 - and run it again
41:44 - now we shouldn't be having any errors
41:46 - this time around
41:48 - now
41:49 - you can see it says enter the time in
41:51 - seconds we say 8
41:53 - and then now it starts counting 6 5
41:57 - 4
41:58 - 3
41:59 - 2
42:00 - 1. it says time
42:02 - completed now this is how to build a
42:06 - countdown timer
42:08 - using while loop in python
42:15 - hey guys so in this tutorial session
42:18 - we're going to be building a password
42:20 - generator program
42:22 - so this um python program is just going
42:24 - to generate a very strong password for a
42:27 - user now let's say user comes to this
42:29 - our program and then he's gonna like put
42:31 - in the amount of password he wants to
42:33 - generate and then it's gonna generate
42:35 - let's say user puts in nine and then he
42:38 - wants to generate a password with nine
42:40 - characters it's gonna generate nine
42:42 - password with nine characters so let me
42:44 - visualize what we're gonna do
42:46 - so this is the end product of what we
42:49 - want to build now the output
42:51 - you see it says number of passwords now
42:53 - in here if i type seven
42:56 - so that means i want to get seven
42:58 - passwords seven different passwords and
43:00 - it says password length you know
43:02 - different sites let's say you want to
43:04 - create a password for you want to create
43:06 - a new account on a site and then you
43:08 - don't know what password to use so this
43:12 - our program can randomly create a very
43:15 - strong password for a user so now
43:17 - different site has different password
43:19 - characters they need so now let's say
43:21 - this
43:23 - our platform requires a character of
43:26 - seven or let me say eight at least so if
43:29 - i put eight it's gonna generate seven
43:32 - different random passwords with eight
43:34 - characters each when i click enter you
43:37 - see it says here are your passwords as
43:40 - you can see it gives me all these random
43:43 - passwords
43:44 - that are eight characters long
43:46 - now this is what we're going to be doing
43:49 - in this tutorial session
43:52 - now you can see that um this is not too
43:55 - advanced for
43:57 - a python project but it kind of teaches
44:00 - some things you need to know
44:02 - working with python
44:04 - so let's just get into that
44:06 - so let me close up this terminal
44:09 - right here
44:10 - now what i want to do we're going to
44:12 - import a python library called random
44:15 - now this python library we don't need to
44:18 - install it it's built in with python so
44:21 - all i just need to do is to say import
44:23 - random
44:24 - now once i have this imported what i
44:27 - need to do next now i can just print to
44:30 - the user
44:31 - i can do something like this
44:33 - print um
44:36 - password generator
44:38 - [Music]
44:40 - let's say welcome to
44:44 - [Music]
44:49 - to
44:52 - your password generator
44:54 - so now this is just telling the user
44:56 - that
44:57 - um this is a password generator
44:59 - and then the next thing we're going to
45:01 - do is to just simply assign a new
45:04 - variable so it's going to have something
45:07 - like charge
45:09 - now this charge is a string
45:12 - but what is in this string is random
45:14 - characters very very random characters
45:17 - so we're going to have this variable
45:18 - called chars what is going to be in here
45:21 - is letter a to z in small letter letter
45:24 - a to z in capital letters we're also
45:27 - going to have some random
45:29 - symbols and we're also going to have 0
45:32 - to 9
45:33 - so we're going to compile all this into
45:35 - one string and then our password
45:38 - generator is just going to randomly pick
45:40 - different characters and mix it up and
45:43 - provide our password so you're going to
45:45 - understand this in a bit let's just
45:47 - continue with what we're doing
45:49 - so this characters let me just paste in
45:51 - what we're going to put
45:53 - so now i pasted this in
45:56 - right here you see it says a b c d e f g
46:01 - h i j
46:04 - k l m n o p q r s t u v w x y z
46:09 - so right here
46:11 - is list from a to z in small letters
46:14 - the same thing it does here a b c all
46:16 - the way to z but now in capital letters
46:19 - and right here you see that we just have
46:21 - some symbols or to this place
46:25 - and from here we have 0 to nine so we
46:28 - just mixed up all these different
46:29 - characters together to so that our
46:32 - password generator program can randomly
46:36 - pick any amount from this long character
46:39 - and give us a strong password strong and
46:42 - unique password to be precise
46:44 - so now that we have that
46:46 - the next thing we need to do is to have
46:48 - a new variable and name it number
46:50 - [Music]
46:52 - now this number is going to be
46:54 - a variable which takes the amount of
46:56 - passwords a user wants to generate let's
46:58 - say a user needs 5 passwords or 6
47:01 - different passwords now this
47:04 - variable is going to be what is going to
47:07 - tell us how many
47:08 - passwords should we generate
47:11 - so now it's just going to be a simple
47:12 - input
47:14 - [Music]
47:18 - and then i can just simply say input
47:22 - amount of passwords
47:27 - to generate
47:32 - so now this is gonna
47:34 - as i explained earlier
47:36 - tell us the amount of password the user
47:37 - wants to generate
47:39 - and i want to make sure that i convert
47:41 - this to an integer
47:44 - because when i'm using it in my function
47:47 - my function we must see this as an
47:49 - integer so because we want to get the
47:51 - amount of something which is a number so
47:54 - it needs to be an integer if the string
47:56 - is going to trust a type error
47:58 - so let's say integer of number
48:01 - now we have to collect another variable
48:03 - and this one should be length
48:07 - and now this lens
48:08 - should be the length of the password
48:10 - let's say the user wants seven
48:12 - characters or eight characters this
48:14 - variable is going to collect it
48:18 - let me say your password length
48:22 - [Music]
48:26 - sorry about that
48:28 - [Music]
48:31 - so let me just write something like
48:32 - input
48:36 - so this is also another variable telling
48:38 - the user to input the password length
48:41 - and i also want to make sure
48:43 - to make this an integer because as i
48:45 - explained we're getting the amount of
48:47 - something the amount of a particular
48:50 - value
48:50 - so we want to make sure it's an integer
48:52 - so when we're using this in our function
48:54 - it gets it as an integer
48:57 - so now
48:59 - once we have everything we need from the
49:01 - user let's just print to the user
49:07 - here
49:09 - are your passwords
49:16 - so now this is just so in the user here
49:18 - are your passwords so after this we're
49:20 - going to use a for loop to now first of
49:23 - all get all the passwords user needs and
49:26 - then print it to the user so after here
49:29 - are your passwords what should be next
49:31 - is obviously the passwords
49:33 - so now is a very simple for loop very
49:36 - very easy one i'm just going to say for
49:40 - pwd
49:42 - it means password just shutting it to
49:44 - pwd
49:45 - in range and note this pwd can be
49:48 - anything it can be for p it can be for d
49:52 - it can be for passwords and full
49:54 - anything now i just um use that there
49:56 - just to denote password because it makes
49:59 - more sense but that is not a specific um
50:03 - let's say it's not a must that that must
50:05 - be pwd so that's just a basic concept of
50:09 - for loop
50:10 - so for pwd in range of number
50:14 - so we're getting the range of this
50:16 - number variable right here
50:18 - so what i want to do
50:20 - is to set a new variable and name it
50:22 - passwords
50:24 - [Music]
50:26 - so now these passwords we're going to
50:28 - leave it empty for now
50:31 - and then after passwords another for
50:33 - loop so it's like a nested loop
50:35 - we'll say 4
50:38 - c in range
50:39 - [Music]
50:42 - range
50:43 - of length
50:45 - [Music]
50:48 - now i want to do say password
50:56 - plus
50:57 - say passwords
50:59 - plus
51:01 - equals
51:03 - random
51:04 - dot
51:06 - choice and then we give it this
51:09 - character variable so what this is doing
51:11 - is we are adding
51:13 - random.choice to this password variable
51:16 - we set right here so random the choice
51:18 - is
51:19 - this we imported remember we imported
51:21 - random now this is just a python module
51:24 - or library which gets the random text
51:28 - from a particular string so i say random
51:31 - the choice from this character string
51:33 - which is this so just going to get
51:35 - random characters from this string
51:39 - and then once it has it it's just going
51:41 - to pass it into this variable which we
51:43 - assigned earlier so after doing this now
51:46 - you know what we just want to do just
51:48 - print
51:49 - passwords
51:50 - as easy as that now this is a very
51:54 - easy way to build a simple password
51:57 - generator program using python let's run
52:00 - it and see the output
52:02 - now we run it
52:04 - let me quickly kill this terminal
52:07 - we run this
52:10 - let me increase it
52:14 - so now it says welcome to your password
52:16 - generator it asks for the amount of
52:18 - password to generate let's just generate
52:20 - one
52:22 - and then input your password length we
52:24 - want the
52:25 - amount of characters in the password to
52:27 - be nine
52:28 - now when we hit enter it says here are
52:30 - your passwords now you see it gives me
52:33 - this password if i count it one
52:36 - two three four
52:38 - five six seven eight nine now it gives
52:42 - me this very random and strong password
52:46 - from
52:47 - our program so it's just automatically
52:50 - generating a password now i hope you
52:52 - understood what we did in this video
52:54 - because it's a very cool project which
52:57 - you can implement let's say into your
52:58 - gui application or your web application
53:01 - or anything you're doing so this is just
53:04 - how to generate a random password from
53:08 - or using python
53:16 - so guys in this tutorial session we're
53:18 - going to be talking about encoding and
53:20 - decoding qr code in python
53:23 - so let's first start with encoding qr
53:25 - code
53:26 - what i mean by a coding qr code is just
53:29 - creating a qr code using python
53:32 - that means creating a qr code and then
53:34 - filling in some data with that qr code
53:37 - so when we let that decode that qr code
53:39 - it's going to give us back that data so
53:42 - now
53:43 - whenever i want to create a qr code in
53:45 - python there are various python
53:47 - libraries you can use but for this video
53:50 - we're going to be using qr code library
53:53 - so we can first need to make sure we
53:54 - have qr code
53:56 - installed
53:57 - let's us open up a new terminal
54:01 - and then
54:02 - okay
54:04 - i have an existing terminal so i'm just
54:06 - going to say pip install
54:08 - qr code
54:10 - now this command line is going to
54:12 - install qr code but for me it says
54:14 - requirement already satisfied because i
54:16 - have it installed already
54:18 - so let's just go ahead and close that up
54:23 - right now
54:24 - what we just need to do is to import
54:27 - qr code
54:29 - like this
54:31 - now that we have qr code imported we're
54:33 - going to have a new variable and nami
54:34 - data
54:36 - so this data is gonna be
54:39 - uh let's say whatever that qr code is
54:41 - gonna mean like whatever that qr code
54:45 - what the data are going to encode into
54:47 - that qr code
54:48 - so let's just say the data of this qr
54:51 - code is um
54:52 - [Music]
54:57 - don't
54:59 - forget
55:01 - to subscribe
55:03 - [Music]
55:04 - also we're dealing with python so we can
55:06 - put um
55:07 - [Music]
55:09 - these
55:12 - python we see that we want to close it
55:14 - so we have to put this
55:16 - backslash
55:17 - and then we can now come here and then
55:19 - close it so that's the data we want to
55:21 - include don't forget to subscribe
55:24 - and now
55:25 - let's just encode the data into a new qr
55:28 - code so i'll say make
55:30 - i'll say img should be equals to
55:33 - qrcode.make
55:39 - and then
55:40 - encode it with data
55:44 - so it's going to encode it with this
55:45 - data variable and then once we have that
55:48 - we're just going to save it as an image
55:49 - file so say image dot save
55:53 - [Music]
55:55 - and then we're going to save it come
55:57 - here
55:59 - right here we want to save it in this
56:02 - folder
56:03 - so right here we're just going to copy
56:05 - this particular folder
56:08 - go back and paste it there so i want to
56:10 - save it in this folder
56:12 - and remember that
56:14 - anytime you are
56:16 - working with directories in python
56:19 - you need to change this
56:21 - to a font slash it's always in backslash
56:24 - automatically so we change it to a front
56:27 - slash
56:28 - same thing here we have to change it to
56:30 - a front slash everywhere
56:32 - so now that we have that done
56:34 - so i want to save it to this directory
56:37 - i will name it
56:39 - my
56:40 - qr code
56:42 - dot png
56:43 - so now this is gonna save it as my qr
56:46 - code.png if i come here and refresh here
56:50 - you see that it's empty it's an empty
56:52 - folder i come here and then run these
56:57 - now
56:58 - you see it doesn't give me anything
57:00 - right here but if i come here i now see
57:02 - a new
57:03 - picture named my qr code
57:06 - so
57:07 - yeah as you can see it is a qr code
57:10 - image so that is how to basically create
57:12 - a simple qr code
57:15 - but now let's dive deeper let's say i
57:16 - want to customize our qr code more like
57:19 - i want to give it
57:21 - let's say a red coloring or a particular
57:24 - border size or something like that so
57:27 - we're gonna come back to our code
57:30 - let's close this up
57:32 - and then we're gonna leave the data the
57:35 - same don't forget to subscribe
57:37 - and then what we're just gonna do
57:40 - right here
57:42 - let me just make sure i copy this so i
57:44 - don't need to you know write it again so
57:47 - from here i can delete
57:49 - so we're making our data the same so
57:51 - what we want to do we just want to
57:52 - basically change
57:54 - the color and then change like the size
57:57 - let's say the box size
57:59 - uh the version of the qr code the border
58:02 - and stuff like that
58:04 - so
58:04 - let's create an instance of the qr code
58:06 - class we'll say qr
58:10 - equals to qr code
58:14 - dot q
58:16 - our code
58:18 - and then let's give it a version
58:22 - of one let's say we want the version to
58:24 - be one
58:28 - and then
58:31 - box size
58:34 - let's say box size should be 10
58:37 - and then border
58:39 - should be like five
58:42 - so now we have that instance then we'll
58:44 - say qr dots
58:46 - add data
58:50 - of data so it's just adding this data to
58:53 - the qr code you want to create
58:55 - with all this information also
58:58 - and then
58:59 - let's say qr
59:00 - dot make
59:04 - feet
59:06 - equals true
59:09 - and then we'll say img should be equal
59:12 - to qr
59:15 - dot make
59:18 - on the skull image
59:22 - feel
59:26 - on the color
59:28 - [Music]
59:31 - should be equals to red
59:34 - and then
59:36 - i want the back
59:40 - color
59:42 - should be equals to white
59:46 - like this so now i've i have everything
59:48 - i want to configure and i'm just gonna
59:50 - say image.save
59:53 - and then we want to save it right here
59:55 - in this directory
59:57 - and let's name it my qr one dot png so
60:00 - we don't have two files colliding
60:03 - so we run this
60:04 - it doesn't do anything in the terminal
60:06 - but when we come here now you see we
60:08 - have a new qr code and if you can check
60:10 - it's a little bit smaller
60:12 - uh this is a little bit bigger i don't
60:14 - want to open the pictures now just to
60:16 - keep the video minimal so as you can see
60:20 - it is red and the other colors are white
60:24 - as we configured so that is um how
60:28 - to basically encode
60:30 - um some data into a qr code and design
60:33 - the qr code however we want it so now
60:35 - we've talked about encoding now let's
60:37 - talk about decoding the qr code
60:40 - now you know that we passing this data
60:42 - which is don't forget to subscribe
60:44 - into our qr code
60:46 - but what if we have this qr code already
60:49 - and then want to get whatever data is
60:51 - inside that qr code now how do we do
60:53 - this
60:54 - let's just delete all this
60:58 - now for us to decode a qr code that
61:00 - means get the data written inside our qr
61:03 - code we need a python library called
61:06 - pyz bar
61:07 - now there are a lot of libraries you can
61:09 - use for this but for this video and the
61:11 - one i use personally that i love is p y
61:14 - z bar
61:16 - so you just need to say pip install pyz
61:18 - bar to install that
61:20 - and then as you can see it tells me
61:22 - requirement already satisfied because i
61:24 - have it
61:26 - so right here i'm just going to say from
61:29 - p y z bar
61:32 - dot p y z bar
61:35 - import decode so i'm going to import the
61:38 - code
61:39 - function and then also want to import
61:42 - pillow so you also need one more python
61:45 - library called pillow so you just need
61:46 - to say pip install pillow so say from
61:50 - pill
61:53 - import
61:55 - image image
61:58 - so
61:58 - the pillow library to install it you say
62:01 - pip install
62:02 - p-i-l-l-o-w but when you are importing
62:05 - we say from pir import image
62:08 - so now
62:10 - what image do we want to get the data of
62:13 - say store it in a variable so we'll say
62:16 - image dot
62:18 - open now we wanted to open
62:22 - let's paste it my qr code.png which is
62:25 - this first one
62:27 - since we wanted to open that
62:31 - it has opened it already and stored it
62:32 - in this img variable so now we just say
62:35 - results
62:37 - there's a new variable named results now
62:39 - we just decode
62:41 - that img which we opened
62:45 - now that we have everything is just
62:46 - printed to the screen so results
62:49 - let's run this
62:52 - you can see
62:53 - decoded
62:54 - data don't forget to subscribe the type
62:57 - is qr code you can also do it for
62:59 - barcode you know
63:00 - different types of codes rx these are
63:03 - just telling us the way it's the
63:05 - position but there's no way i want we
63:07 - just want data don't forget to subscribe
63:10 - now that is how to basically decode a qr
63:12 - code now it's not a mods that is a qr
63:15 - code that you created you can just take
63:17 - a qr code online and use this to decode
63:19 - it you know just for practice purposes
63:22 - yeah so that is
63:24 - all
63:25 - about qr codes
63:27 - and coding and decoding qr code with
63:30 - python
63:31 - so guys that's going to be all for this
63:33 - video i hope you learned something i
63:35 - hope you enjoyed it
63:37 - uh if you have any questions just drop
63:39 - it now in the comments i'll make sure to
63:40 - answer a question
63:42 - having that said thank you so much for
63:44 - watching and bye for now