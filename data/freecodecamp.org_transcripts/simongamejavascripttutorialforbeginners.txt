00:00 - today i am going to show you how to make
00:03 - a simon game using mainly javascript but
00:07 - also html and css
00:10 - simon is a game it's it's based on a
00:13 - real game a physical game in real life
00:16 - and we're going to recreate it with
00:18 - javascript
00:20 - and there is a a four different lights
00:24 - or colors
00:25 - and they will light up in a certain
00:27 - order so the player has to remember the
00:30 - order
00:31 - each round an additional light is added
00:34 - and the player has to remember all the
00:37 - the order so far in the game
00:40 - until you get to 20 rounds and then you
00:44 - win the game
00:45 - so let's see what the final product is
00:47 - going to look like
00:49 - so here's how the simon game works
00:52 - there are the this power button the
00:54 - strict button the start button
00:56 - so this is supposed to simulate a
00:59 - physical simon toy game
01:02 - and the physical simon toy game has a
01:04 - power switch so that's what this this
01:07 - check box turns the game on you can see
01:10 - when i click the power button you can
01:13 - see right in this count square this red
01:16 - line appears to indicate that the game
01:18 - is on
01:19 - and then the strict mode
01:21 - means that if you get one wrong answer
01:25 - you lose the whole game so if strict
01:27 - mode is on you get one wrong answer and
01:30 - the whole game is lost
01:32 - with strict mode off
01:34 - if you get a wrong answer you can start
01:38 - from where you left off so let me show
01:40 - you an example how it works this is a
01:43 - memory matching game so
01:45 - you have to remember the order of the
01:48 - colors let's do this if i press start
01:56 - so i have to remember the order of these
02:04 - oh i got it wrong so since i got it
02:07 - wrong it starts from where i left off so
02:09 - let's do this again
02:13 - you will notice that for every round the
02:15 - count goes up by one
02:18 - and if i get something wrong the count
02:21 - flashes no
02:24 - so it starts from where i left off
02:26 - because i'm not in strict mode but if i
02:29 - turn on strict mode and i get it wrong
02:32 - you can see this count
02:35 - is gonna go down to one because i got it
02:37 - wrong
02:38 - and i have to start the game all over
02:40 - again
02:41 - so
02:42 - let's go into the code because this is
02:45 - what we're going to be building
02:46 - okay i have sublime text open on the
02:49 - left and then i just have my browser
02:51 - with the simon game open on the right
02:54 - and in this tutorial i'm mainly going to
02:56 - focus on the javascript
02:59 - so i already have the html and the css
03:03 - written you can see the html file here
03:05 - the css file here the javascript file is
03:09 - empty so i'm going to review the html
03:11 - and the css and show you how those work
03:14 - and then i'm actually going to write all
03:17 - the javascript
03:18 - and explain that as i go
03:20 - first let's see how the project is
03:22 - structured so my root folder just simon
03:25 - game and then i have my index.html file
03:29 - that's the file you see here and then i
03:31 - have a javascript folder and a css
03:34 - folder now inside these folders there's
03:36 - just one file
03:38 - so really we could have probably put all
03:41 - of this into the root folder
03:43 - but it's good to get into uh just
03:47 - the mindset of the best practices and
03:50 - generally you'll have all of your
03:52 - javascript in in one folder and all of
03:54 - your css in another folder
03:58 - so
03:58 - right now we're not going to need to see
04:00 - this file structure again so i'll just
04:02 - close that
04:04 - okay and let me just readjust this a
04:07 - little bit and i'm going to start going
04:09 - through this html here so you can see
04:12 - from here to here is the heading
04:14 - now this is stuff that's not going to
04:16 - really appear on the page but it's stuff
04:19 - important for the page
04:22 - the first thing i want to point out is
04:23 - this font here i'm bringing in a google
04:26 - font now google makes all these fonts
04:30 - that you can use on websites they're
04:32 - they're free to use and you can they
04:35 - have a lot of unique fonts that you can
04:37 - use so that's the word simon here uses
04:40 - the google font
04:42 - it's called original surfer
04:45 - so if you just look up google fonts it
04:48 - gives you instructions on how to include
04:50 - them
04:51 - in your in your web page
04:53 - and also there's google font effects
04:57 - so you can see right here it says effect
04:59 - equals emboss
05:01 - and that's why you can kind of see a
05:05 - border around around this it's embossed
05:09 - and google fonts have all sorts of
05:12 - effects you can use so i would highly
05:15 - recommend looking up google fonts and
05:18 - the effects
05:19 - if you're not already familiar with them
05:22 - and then here is where we link to our
05:24 - css file that's the one right here
05:27 - and then
05:29 - something else to look at is how we are
05:32 - basically importing these audio files to
05:36 - use
05:37 - so there's four different audio files
05:40 - we have the audio tag and there's the
05:43 - opening and closing tag
05:45 - in html most tags have opening and
05:48 - closing tags and we have these set to
05:51 - different ids which we will reference
05:54 - later in our javascript
05:56 - and the source is just this file right
05:58 - here
05:59 - if you're following along you can use
06:02 - these same files or you can use your own
06:05 - files
06:06 - so we have the four different audio
06:08 - files for the sounds that are going to
06:10 - play when each of the buttons are
06:13 - pressed before i go over the rest of the
06:15 - html
06:16 - so this html here is what actually makes
06:20 - up the actual page that you can see here
06:22 - but let's go over to the css
06:26 - i'm not going to go through everything
06:28 - on here
06:30 - i will link to both the html and the css
06:35 - in the description of the video so
06:37 - you're not going to have to type all
06:39 - this out if you're following along you
06:42 - can just download the html file and the
06:45 - css file
06:47 - in fact all these files will be on the
06:50 - the github repository that's linked to
06:53 - in the description
06:55 - so you can see
06:57 - for the body
06:59 - you can
07:00 - you can really use anything for the
07:01 - background but i just use this repeating
07:04 - pattern here
07:05 - that's why we have this texture we could
07:08 - have also used a solid color
07:11 - and then this is just a standard css
07:15 - you can see that i'm using the google
07:17 - font for some of these things
07:20 - and so for css
07:23 - just a quick refresher if you have a dot
07:26 - that's going to apply to a class and
07:30 - then if you have a hash mark like this
07:33 - it's going to apply to an id
07:36 - so
07:37 - i'll actually explain that a little more
07:40 - once we get back to our html here so in
07:43 - the body of our html
07:45 - we have this
07:47 - outer circle
07:48 - and this outer circle you can see this
07:50 - is the opening div tag and this is the
07:53 - closing in tag so everything is within
07:56 - the outer circle that's this
07:59 - dark black circle around here
08:02 - and then here
08:03 - we have the top left top right bottom
08:06 - left bottom right
08:07 - and those are just these colors here
08:10 - and the ids are important for two
08:13 - reasons
08:14 - the point of ids is that there
08:17 - there's only one of them
08:19 - so
08:20 - whereas classes you can have multiple
08:22 - things with the same class ids you can
08:25 - only have one element with the same id
08:29 - so we use the ids in our css that's one
08:32 - of the ways we use them
08:34 - for instance with this top left here if
08:36 - i go in here if i scroll down i will be
08:39 - able to see top left and this is the css
08:43 - to create
08:44 - this green section here you can even see
08:48 - background is dark green here
08:52 - the other purpose of the ids is that we
08:55 - can
08:56 - reference them in javascript
08:58 - and a lot of these we are going to
09:00 - reference in javascript because we are
09:03 - going to add click handlers and we are
09:06 - going to use javascript to show what's
09:08 - going to happen when you click the
09:10 - different elements on the page
09:13 - so we also have this inner circle
09:15 - that's this gray circle here and it has
09:18 - a bunch of stuff inside the inner circle
09:20 - you can see nested within the circle
09:23 - so
09:23 - we have the title
09:26 - and you can see there's a special class
09:29 - font infect emboss
09:31 - and that's how we get the effect on this
09:33 - from the google font
09:35 - and then we have these switches
09:38 - the switches are these
09:40 - check marks here
09:41 - now we could change these check marks to
09:45 - be toggle switches or buttons or
09:48 - something that would look more similar
09:50 - to the physical simon game toy
09:53 - but for now i just have them as check
09:56 - boxes
09:57 - uh like we have the power button the
09:59 - strict button
10:00 - and then we also have the start button
10:02 - so
10:04 - if you want to improve upon this project
10:07 - one idea would be to
10:10 - style these a little a little more to
10:12 - look like actual buttons or toggles or
10:14 - switches
10:16 - you could do that using css or maybe
10:18 - even use some javascript for that
10:21 - so we have these three buttons here
10:24 - and then
10:26 - we just have the labels power and strict
10:29 - now
10:30 - turn that's this box here that's going
10:32 - to tell what turn we're on when we're
10:34 - playing the game
10:36 - and that's pretty much everything here
10:39 - the last thing i want to show you in the
10:41 - html is this script tag that links to
10:45 - our javascript file
10:48 - and you'll see it's at the very end
10:51 - now the the css is up here at the top we
10:56 - link to the css file but we link to the
10:58 - javascript file at the end some people
11:01 - do link to javascript files at the
11:03 - beginning
11:04 - just like the css file
11:06 - but it's really best practice to link to
11:09 - the javascript at the end
11:11 - and that is because we want to make sure
11:14 - all of the html is loaded before we load
11:18 - the javascript because the javascript is
11:22 - going to reference some of the items in
11:24 - the html
11:26 - and so
11:27 - if the javascript loaded too quickly
11:29 - before the html was loaded it could
11:32 - create some problems
11:34 - okay it's time to get to the good stuff
11:37 - the javascript so hopefully you're
11:40 - following along and actually typing this
11:43 - all out yourself that's how you're
11:44 - really going to learn
11:46 - i mean you can just watch and just try
11:48 - to learn just from observing but if you
11:51 - actually type this out yourself and
11:52 - follow along
11:53 - it's going to help you understand the
11:55 - concepts a lot more and you can try out
11:58 - different things so like i said you can
12:01 - just download the css and the html from
12:04 - from the links in the description but
12:06 - the javascript will be nice if you typed
12:07 - it out with me so first we are going to
12:10 - just type out some of the variables
12:13 - we're going to use
12:14 - so i'm going to declare our first
12:16 - variable with let
12:18 - let order
12:20 - equal and then i'm going to put an empty
12:23 - array here these two brackets that's how
12:26 - we're going to set this variable
12:28 - named order to this array
12:31 - now javascript you're usually going to
12:33 - end all your lines with a semicolon
12:35 - let is a way to initialize a variable
12:38 - there's there's three different ways to
12:40 - initialize a variable we have let we
12:43 - have var
12:45 - and then there's const
12:47 - and avar i'm just going to do a brief
12:50 - overview of what the different things
12:51 - are
12:52 - var
12:54 - will apply to the entire the scope of
12:56 - your entire program
12:58 - let will be a little more of a limited
13:01 - scope
13:02 - and only apply to where it was defined
13:06 - and const stands for constant
13:10 - and constants cannot be changed so once
13:13 - you set a variable with const you can't
13:16 - set it to something else later so most
13:18 - people say you should only use let and
13:21 - const and you should never use var
13:24 - so we're just going to use let here
13:26 - so order this is a variable that's going
13:29 - to keep track of the order of the lights
13:32 - and how they're going to flash we're
13:34 - also going to have let player order
13:36 - now this
13:38 - is going to be the order that the player
13:40 - is
13:41 - pressing the lights in
13:43 - and let flash
13:45 - this is going to be a basically an
13:47 - integer
13:48 - now with javascript you don't set the
13:51 - types of the variables but
13:53 - generally you you do keep them
13:56 - at one type for the most part and this
13:58 - is just going to be a number the number
14:00 - of flashes that have appeared in the
14:02 - game
14:03 - we're also going to have let turn
14:06 - to keep track of what turn we're on
14:10 - let good
14:11 - and this is going to be a boolean true
14:13 - or false
14:15 - whether the player is doing
14:17 - well or not if if the player has
14:21 - hit all the right colors or if the
14:23 - player's not hit all the right colors
14:25 - and let cop turn
14:28 - also is going to be a boolean a true or
14:30 - false it's going to keep track of
14:32 - whether it's the computer's turn or the
14:34 - player's turn we're also going to have
14:36 - let interval id
14:39 - i'm going to explain that one a little
14:40 - later
14:41 - then let strict is going to keep track
14:45 - of if the strict button has been the
14:48 - check mark has been checked
14:50 - it's going to start at false because
14:52 - it's going to start unchecked
14:55 - let noise
14:57 - equals true if we're playing noise
15:00 - this will make more sense later in the
15:02 - program
15:04 - uh let on
15:06 - equals false
15:08 - and that's if the program has been
15:11 - turned on the power button here and it's
15:13 - going to start turned off
15:16 - and then let win
15:18 - this is just going to say if the player
15:20 - has won the game or not
15:24 - so
15:25 - now we're going to use some
15:28 - consts
15:29 - um we have to have a way
15:31 - to get some of our html elements to
15:35 - reference them in javascript so that's
15:38 - what we're going to do here we're going
15:40 - to try to
15:41 - we're going to reference some of our
15:43 - html elements in javascript i'm going to
15:45 - show you how to do that we're going to
15:46 - have the turn counter
15:48 - now the turn counter is this right here
15:51 - and we want to reference that in
15:52 - javascript so i'm going to use this
15:55 - document
15:56 - dot query selector
16:00 - and then i'm going to pass in
16:02 - whoops i'm going to pass in a
16:05 - css
16:06 - selector so i'm going to just type in
16:09 - turn here
16:12 - so when i do document.queryselector
16:15 - i can pass in any css selector and this
16:18 - uh
16:19 - term means that an element with the id
16:22 - of turn
16:24 - so if i go into my html you'll see it
16:27 - right here we have an id of turn
16:30 - so now we've actually taken that html
16:34 - element and put it into this variable
16:37 - turn counter
16:38 - and now we can use our javascript to
16:41 - manipulate that
16:43 - we're going to do that a few more times
16:46 - const
16:47 - top left
16:50 - equals document dot query
16:53 - selector and then this time
16:56 - it will just be
16:59 - top left
17:02 - and then we'll just kind of speed this
17:03 - up a little bit
17:06 - okay
17:07 - you can see now i have a variable for
17:10 - all the elements we're going to
17:12 - reference the top left top right bottom
17:16 - left bottom right the strict button the
17:19 - on button and the start button
17:22 - these are all the elements that you can
17:25 - interact with
17:26 - besides the turn counter you can't
17:28 - interact with the turn counter but all
17:30 - these other elements we can interact
17:33 - with
17:34 - and we're going to use javascript for
17:36 - the interaction
17:38 - so we just use the the css selectors for
17:41 - each of those elements like top left you
17:44 - can see here uh id of top left
17:48 - and then we got all these elements into
17:50 - variables and since they're always going
17:52 - to stay the same we were able to use
17:54 - const
17:56 - so now that we have the variables set up
17:59 - we can start
18:02 - writing the code that's going to allow
18:04 - us to interact with the game and play
18:06 - the game
18:07 - so how i'm going to organize this
18:10 - is
18:11 - i'm going to write the program
18:13 - in the order that you would play the
18:15 - game
18:16 - so first of all you're going to interact
18:19 - with these buttons here like like the
18:21 - power button the strict button and the
18:24 - start button
18:26 - so
18:27 - i'm just going to start um we'll just
18:30 - start with the strict button for now
18:32 - so
18:33 - i'm going to reference the strict button
18:36 - now this is the variable we just
18:39 - made up here
18:41 - and i'm going to
18:42 - add
18:44 - event
18:45 - listener
18:50 - and so if we add an event listener it's
18:53 - going to be listening for some event on
18:56 - that element
18:58 - and the event is going to be
19:00 - change
19:02 - and so i'm going to pass in a function
19:07 - now this is going to be a an arrow
19:10 - function here
19:11 - there's a couple ways to make functions
19:14 - in javascript
19:15 - and this is a common way for event
19:18 - listeners where
19:20 - this is what we're going to be passing
19:22 - into the function
19:24 - and you put the arrow the equal and then
19:26 - the
19:28 - the more than sign and we have these
19:30 - curly braces and this is what's going to
19:33 - happen
19:34 - when that
19:36 - that check bar box is changed
19:39 - so
19:40 - i'm going to put
19:42 - if
19:45 - strict
19:46 - well before i actually do this i want to
19:49 - actually show you it working so let's
19:52 - just do a console.log
19:55 - and i'm going to say
19:57 - checked
19:59 - so a console.log if we open up the
20:01 - javascript console we can see something
20:04 - happen with this so i'm going to save
20:06 - this
20:07 - i'm going to
20:09 - refresh here now i'm going to open up
20:11 - the javascript console on the side here
20:14 - now this if i click the strip button we
20:17 - should see something appear here
20:21 - okay you can see it now says checked
20:24 - because this changed
20:26 - now this would actually work you can see
20:28 - every time i click here it increases the
20:31 - number because it's saying that it has
20:33 - put that word that many times
20:36 - this could really be also
20:38 - at event listener click
20:41 - this could be click or change and it
20:43 - would do the same thing
20:45 - because we're just trying to keep track
20:47 - of when we clicked it or changed it
20:51 - because we are going to in the code the
20:54 - logic of the code it's going to check
20:57 - whether the that checkbox is checked or
20:59 - not
21:00 - so let me show you that now first of all
21:03 - i'll close the javascript console
21:06 - and we'll just move this back over
21:10 - so
21:11 - we can see the code a little better um
21:16 - so what i'm going to do here
21:18 - is say if
21:20 - strict
21:22 - button
21:23 - dot checked
21:25 - equals equals true
21:29 - so that that's a way that we can see
21:32 - if this is checked now dot checked
21:34 - is only going to be something we can
21:37 - use
21:38 - if we're dealing with a check box but
21:41 - since strict button is a check box we
21:43 - can see if it's checked as true or if
21:46 - it's not checked it will be false then
21:48 - we can do something so if it's check if
21:51 - it's true we're going to set strict
21:55 - to equal
21:56 - true
21:59 - else
22:01 - we are going to set strict
22:04 - to equal
22:05 - false so this is just a standard if else
22:08 - statement so if it's checked
22:11 - strict should be true
22:13 - else
22:14 - strict should be false
22:15 - so we've now just finished that whole
22:17 - button and we can go on to the next
22:20 - button
22:21 - which is going to be the on button
22:24 - so again i'm going to do an add event
22:27 - listener
22:28 - and again it's going to be a click event
22:33 - and so i'll pass in the event you'll see
22:36 - notice that above we pass in the event
22:39 - to this function
22:41 - and
22:42 - we never use that event here that's okay
22:45 - it's still that's still when you're
22:47 - creating an event listener you always
22:48 - pass in the event even when you're not
22:51 - going to use that event in the function
22:54 - so
22:55 - this time again we're going to check if
22:58 - the on button
23:00 - dot checked
23:02 - equals equals true
23:06 - and so if the on button is checked
23:09 - we'll do a few now we're going to do two
23:11 - things um we are going to set on to
23:14 - equal true
23:16 - um
23:17 - just like
23:18 - we said strict equal true and remember
23:20 - these variables come from up here on and
23:22 - strict
23:23 - but we're going to do one more thing
23:26 - if you remember in the example i showed
23:27 - you at the beginning when you turn the
23:29 - power on we want a line to appear right
23:32 - here to show that it's on
23:35 - so to do that i'm going to do turn
23:39 - counter
23:41 - dot inner
23:42 - html
23:44 - now enter html well let me just finish
23:47 - drawing this line so this is going to
23:49 - equal and just this dash
23:52 - inner html is something that you can
23:56 - use on any
23:58 - html element to
24:01 - set the html to something different so
24:05 - now
24:06 - the html within
24:08 - this turn counter is going to
24:11 - be this line
24:13 - so if we look in here right now here's
24:16 - the turn counter and within the turn
24:19 - counter
24:20 - is nothing
24:22 - between these two brackets here there's
24:24 - nothing there
24:26 - but when we do this
24:28 - turncounter.interhtml
24:30 - it's going to put a dash
24:33 - right in the turn counter
24:35 - so we'll do
24:38 - then else here
24:45 - we're going to do on equals false
24:49 - and then
24:51 - turn counter
24:53 - dot inner html
24:55 - equals and we're going to set it back to
24:58 - nothing
24:59 - so let's just see if this works and i'll
25:01 - save that
25:02 - refresh and if i turn the power on
25:05 - you'll now see this line appear
25:08 - when i click check in uncheck it
25:11 - so this is starting to have at least
25:14 - some functionality
25:16 - we're going to do a few more things in
25:18 - the else here
25:20 - i want to make sure it's it's higher so
25:21 - it's easier to see
25:26 - so we're going to do a few more things
25:28 - when you turn this off
25:30 - so we're going to clear the color
25:35 - so this is a function this is how you
25:37 - call a function in javascript i still
25:40 - need to define this function
25:43 - but let's say you're playing the game
25:45 - and one of the colors lit up um when you
25:48 - turn the power off all the colors should
25:51 - um
25:52 - all the lights should go off or these
25:55 - the colors there are a lighter color
25:57 - should go back to the darker color
26:00 - and then the other thing we're going to
26:02 - do is to clear an interval
26:05 - now i'm going to be talking more about
26:07 - what this is more later when i define
26:10 - the interval
26:12 - but
26:13 - i'll just put it here now we're going to
26:15 - come back to that
26:16 - you can see we we passed in this
26:18 - interval id
26:21 - so just keep this in mind we're going to
26:23 - come back to that later i'm going to
26:24 - explain that
26:26 - so we have the on button done
26:29 - the final thing
26:30 - is
26:31 - the start button
26:34 - so just like before we're going to do an
26:36 - ad event listener
26:38 - and it's going to be a click event
26:41 - listener
26:42 - and we're going to do a function an
26:45 - anonymous function in here
26:48 - it's an arrow function
26:54 - and here
26:57 - we're going to just do one thing if this
27:00 - is the start button and it should only
27:02 - do something
27:04 - if the game is on so if
27:07 - on
27:09 - or
27:11 - there's been a win
27:13 - we are going to
27:17 - play
27:19 - so let me go through this if on
27:22 - this is just a shorthand way of saying
27:25 - if on equals true
27:27 - or
27:28 - when equals true
27:30 - then call the play function which we're
27:33 - going to get to in a minute here it'll
27:35 - play the game so will you put click the
27:38 - start button and we're going to play the
27:40 - game
27:41 - so that's what we're going to do now is
27:43 - define the play function
27:45 - so this is how
27:47 - so this is one way to define a function
27:50 - this is called an arrow function that
27:51 - was introduced in es6
27:54 - there's another way to define a function
27:56 - a more common way is like this i'm going
27:58 - to use the function keyword
28:00 - function play
28:03 - and i'm going to
28:05 - um so this is the name of the function
28:08 - this is anything we're going to pass in
28:10 - to the function
28:11 - which is going to be nothing in this
28:13 - case and then the whole function is
28:15 - going to take place within these curly
28:17 - braces here
28:19 - so um first of all i'm going to go up
28:20 - and actually add some semicolons to
28:22 - these here
28:27 - and
28:29 - at the when we first try to play the
28:31 - game the first thing we want to do is
28:33 - reset variables now if it's the first
28:36 - time you've played the game the
28:38 - variables will already be reset but if
28:40 - you're playing again we just want to
28:42 - make sure that variables have been reset
28:45 - so let's see we're going to set when to
28:48 - equal false
28:49 - because you're starting the game you
28:50 - haven't won yet order is going to equal
28:54 - an empty
28:56 - empty array we're going to fill that in
28:58 - a second here
29:00 - the player order
29:02 - again is going to equal an empty array
29:06 - the flash
29:08 - is going to equal zero there's been zero
29:11 - flashes
29:13 - interval id
29:15 - equals zero
29:18 - let me scroll a little bit here
29:23 - turn
29:24 - equals one
29:28 - turn counter dot
29:30 - inner
29:31 - html
29:33 - equals one so that's this count is going
29:36 - to go to one as soon as you press start
29:39 - because we're on the first round of the
29:41 - game
29:44 - what else we're going to have
29:46 - good
29:48 - equals true
29:49 - that means the player hasn't hit
29:52 - anything incorrect yet
29:55 - and now we are going to use a for loop
29:59 - to fill up this order so we need to
30:02 - randomly fill up this order
30:04 - um of
30:06 - this array here so we have four
30:09 - different quadrants so we're going to
30:11 - fill up the this array
30:14 - with a random series of numbers
30:18 - to indicate the order that these are
30:21 - going to light up in the game
30:24 - so this is how we're going to do the for
30:25 - loop
30:26 - for
30:27 - var so when you have a for loop you pass
30:30 - in three different things you initialize
30:32 - a variable
30:33 - i i equals zero
30:40 - we're going to loop until i is or
30:44 - we're going to loop while i is less than
30:47 - 20
30:48 - and then at the end of the loop we're
30:50 - going to increment i so it's going to go
30:52 - through this loop 20 times
30:55 - because in this game you have to get 2
30:57 - you have to do 20 rounds before you win
31:00 - the game
31:02 - so this is how we're going to fill the
31:03 - array
31:05 - order dot push
31:08 - math.floor
31:11 - math.random
31:16 - times
31:17 - four
31:20 - and then plus
31:22 - one
31:25 - so this whole line
31:27 - basically gets a random numbers between
31:30 - one and four and fill this fills this
31:33 - array so this is the array we're going
31:35 - to push something onto the array and
31:38 - what we're going to push onto the array
31:40 - we have this a random number this gets a
31:42 - random decimal but when we multiply it
31:45 - by four
31:46 - and then add one here
31:49 - it gets the number between one and five
31:51 - but it could still be a decimal so
31:53 - math.floor is going to round it down so
31:56 - we can actually see what happens here by
31:59 - just doing another console.log so i'm
32:01 - going to console.log
32:04 - and i'm just going to log order
32:08 - so if we go into our page here
32:11 - and i'm going to open up the javascript
32:13 - console
32:15 - if you hit the power button and the
32:18 - start button
32:19 - you will see that we have this array
32:22 - this is an array right in the console
32:24 - and it's just 20 numbers 20 random
32:26 - numbers between 1 and 4.
32:30 - so that's how we've made this array
32:32 - that's going to show the order that
32:34 - those lights are going to flash in the
32:36 - game
32:37 - so let's go back over here
32:39 - and
32:40 - we'll set the comp turn to equal true it
32:44 - starts with the computer
32:46 - flashing lights and then the player has
32:49 - to match those lights
32:52 - and then we start the first turn
32:56 - so this
32:58 - i'm going to just type and then i'll
32:59 - explain what it means the interval id
33:02 - equals set interval
33:06 - game turn
33:08 - 800.
33:10 - so let me break this down
33:12 - um
33:13 - set interval means it's going to
33:16 - run a function
33:18 - after every certain amount of
33:20 - milliseconds
33:21 - so set interval it's going to run the
33:24 - game turn function
33:26 - every 800 milliseconds
33:30 - that's going to make it so the computer
33:32 - flashes a light
33:34 - on here
33:36 - every
33:37 - milliseconds and it's going to keep
33:39 - repeating until this interval is cleared
33:43 - now the interval's going to clear
33:45 - after all the lights have flashed but i
33:48 - haven't um i haven't
33:50 - done that yet but we need this interval
33:53 - id here
33:56 - that's what we set up here and we have
33:58 - it down here the reason why we have an
34:00 - interval id is so we can clear the
34:02 - interval so i told you we're going to
34:04 - come back up to here if you turn the
34:08 - power off
34:09 - clear interval
34:11 - that means it's going to stop simon from
34:14 - flashing the colors
34:16 - because it's going to stop
34:19 - running the game turn function every 800
34:23 - milliseconds and the game turn function
34:25 - is what flashes the colors
34:28 - so this starts the game
34:30 - so now that we've referenced the game
34:33 - turn function
34:34 - let's define the game turn function
34:38 - okay the game turn function so i define
34:40 - the function the same way function
34:43 - game turn
34:45 - and then
34:46 - we are going to say what's going to
34:48 - happen when this function is called so
34:50 - on is going to equal false
34:54 - now this is
34:55 - just a tricky thing where whenever on
34:58 - equals false
34:59 - the player cannot click any of these
35:02 - buttons so while the computer is
35:05 - flashing colors we don't want the the
35:08 - player to be able to click any of the
35:10 - buttons so that's why on is set to false
35:13 - here
35:14 - so now let's see if
35:18 - flash
35:20 - equals
35:22 - turn
35:24 - then we're going to do something
35:27 - so that means if the number of times
35:32 - the lights have flashed
35:35 - equals the turn that we're on the turn
35:38 - shows right here
35:40 - then
35:41 - that means the computer's turn is over
35:44 - so if the computer's turn is over
35:47 - we're going to
35:49 - clear the interval
35:51 - and a bit will will show what happens if
35:54 - the computer's turn is not over
35:56 - but if it's done flashing all the lights
35:58 - like that we're going to clear the
36:00 - interval this is what we talked about
36:02 - earlier with the interval id
36:04 - comp turn is going to equal false
36:10 - and then we're going to clear the color
36:12 - if any colors are are lit up and on is
36:16 - going to equal true
36:17 - now the on is equal to true that means
36:20 - the player can now start pressing
36:22 - buttons on there
36:24 - so
36:27 - down here
36:28 - if if it is the computer's turn then
36:32 - we'll do these things if the turn's not
36:34 - over if it's with the first thing we're
36:36 - going to do when i clear the color
36:38 - because we want to clear the color from
36:39 - the last time the computer lit up
36:42 - something oh and that reminds me i
36:44 - forgot to put the parentheses on the end
36:47 - whenever you're going to call a function
36:48 - you have to put parentheses on the end
36:50 - of the name there
36:52 - so clear the color and now i'm going to
36:55 - set a timeout
36:57 - set timeout is very similar to set
37:01 - interval
37:03 - so set interval is going to keep
37:05 - repeating this over and over
37:07 - set timeout is going to do something
37:11 - uh once
37:14 - after a certain number of milliseconds
37:18 - so
37:19 - again i'm going to use one of these
37:21 - arrow functions from es6
37:24 - and it's going to run this function
37:27 - after a certain number of milliseconds
37:29 - so i'll put the milliseconds at the end
37:31 - so
37:32 - i haven't defined what the function is
37:34 - but you can see
37:36 - here that
37:37 - um
37:38 - every two for it was going to wait 200
37:41 - milliseconds and then do what's what's
37:44 - in here
37:45 - so
37:46 - what's in here
37:48 - is it's going to flash
37:50 - a number or a color
37:53 - so we have to know what colors it's
37:55 - going to flash is it going to flash the
37:56 - green red yellow or blue
37:59 - so we're going to have an if statement
38:01 - here so if
38:03 - order
38:05 - flash
38:08 - equals
38:09 - one
38:15 - okay let me explain this line here
38:18 - so remember order is an array
38:21 - and so flash
38:24 - is
38:25 - the the number of times we've flashed a
38:28 - color and flash starts at zero
38:32 - and so zero is the first item in the
38:35 - array
38:36 - so
38:37 - if the first item in the array is one
38:41 - and remember this array is an array of
38:43 - random numbers one two three four so if
38:46 - the first item is one we're going to run
38:48 - the one function which we have to define
38:50 - later that's gonna flash the the green
38:54 - right here
38:55 - and i'm just gonna copy this line
38:58 - and we're going to do it uh
39:01 - three more times another thing is
39:04 - normally with an if statement here
39:06 - you're going to
39:07 - put in these parentheses what the
39:10 - condition is
39:12 - and then you're going to have a curly
39:13 - brackets and you're going to run the
39:15 - things in the curly brackets
39:18 - if the condition is true
39:20 - but you can also skip the curly brackets
39:24 - and just put the thing to run if the
39:26 - condition is true right after the
39:27 - parentheses
39:29 - so inside the parentheses is the
39:30 - condition
39:31 - and then right afterwards is the
39:34 - function you're going to run if this
39:36 - condition is true
39:38 - so
39:38 - this is going to be
39:40 - 2
39:41 - 3 4
39:43 - and these are going to be functions 2
39:46 - 3
39:49 - 4
39:50 - so it's going to run the function
39:52 - depending on what the number is
39:54 - and then the last thing that has to
39:56 - happen is the flash
39:58 - has to be incremented
40:01 - so it started at zero but it's going to
40:03 - go up one every time the computer
40:05 - flashes this happens after 200
40:09 - milliseconds
40:10 - because of this set interval up here
40:13 - a light is going to flash every 800
40:17 - milliseconds
40:19 - but since we have this 200 milliseconds
40:22 - here that means it's going to stop
40:25 - flashing for 200 milliseconds and it's
40:28 - going to flash again to the end of the
40:30 - 800 milliseconds
40:32 - well i can demonstrate it by just making
40:34 - these functions here the one two three
40:36 - four functions and we can actually run
40:38 - this and see what happens
40:41 - so i'm gonna make the function
40:45 - one
40:48 - and we're not gonna pass in things to
40:50 - any of these functions that's why this
40:52 - is always empty here
40:54 - and now we're going to say if
40:58 - noise
41:00 - and so if it's if it should make a noise
41:04 - then it will make a noise remember we
41:06 - had these
41:07 - sounds here in their html
41:10 - and now we're going to use them in our
41:12 - javascript
41:14 - so
41:14 - var
41:15 - audio
41:17 - equals document dot get
41:20 - element
41:22 - [Music]
41:24 - by id
41:26 - clip
41:28 - one
41:31 - so this get element by id
41:35 - is pretty much very similar to the query
41:38 - selector but query query selector you
41:41 - can use any css selector
41:44 - and
41:45 - get element by id you just put an id in
41:49 - here but since we already know it's an
41:51 - id we don't have to put a hash mark now
41:54 - i could have put query selector and then
41:56 - put hash mark clip 1 but i just wanted
41:59 - to show you a different way you could do
42:00 - this
42:01 - now
42:02 - this id clip one is right here if we go
42:05 - back to our html clip one here so we're
42:08 - now getting this sound effect
42:11 - and on the next line we're going to play
42:14 - it by doing audio dot play
42:19 - now
42:20 - we could have put this at the top
42:24 - but i decided to do it this way where it
42:26 - is right in here instead of up here with
42:28 - the rest um
42:30 - and actually i'm going to make one more
42:32 - change really quick instead of var this
42:34 - will be a let i already told you that
42:36 - that we don't really use var anymore
42:38 - it's going to play the sound
42:41 - i'm going to set the noise
42:45 - to equal true
42:47 - just in case it was set to false
42:50 - now you'll understand more of this noise
42:52 - thing later when i show you when the
42:54 - noise is set to false
42:57 - and then top
42:59 - top left
43:00 - dot style
43:02 - dot
43:03 - background
43:05 - color
43:08 - equals
43:10 - light
43:11 - green
43:14 - okay let me break this down for you so
43:16 - top left
43:18 - is this thing right here that we got
43:20 - with the query selector
43:22 - style means we're going to change the
43:25 - css style
43:26 - you can change css using javascript and
43:29 - we're going to you change the background
43:32 - color element
43:34 - right now background color is green but
43:37 - we're going to set it to light green if
43:39 - i go into my style and i find top left
43:43 - actually the background is dark green
43:47 - and then i set the background color to
43:50 - be
43:51 - light green
43:53 - so we have this thing here for what
43:56 - happens when you click the one
43:58 - now it's going to be pretty similar for
44:00 - two three and four
44:02 - so i'm just gonna copy this
44:06 - and that's gonna be two three four so
44:09 - i'm gonna change this to two
44:12 - and this is clip
44:14 - two
44:15 - and the color is gonna be
44:19 - tomato
44:20 - now just so you know i could be using
44:22 - hex codes
44:24 - or some other way to indicate a color
44:27 - but html has a set of keywords that you
44:30 - can use to
44:32 - specify certain colors
44:34 - so tomato is a keyword to signify a
44:38 - specific color in java in in html that
44:42 - you will see soon when i do the example
44:44 - so this is going to be 3
44:48 - and set that to 3
44:52 - 4
44:53 - set that to 4
44:55 - this color is going to be yellow
45:00 - and then
45:01 - this color is going to be light
45:04 - sky
45:05 - blue
45:08 - okay
45:09 - i think we have enough code here to do
45:12 - an example so let me save that i'll
45:14 - refresh here and if i press start
45:19 - okay it's not working let's check the
45:20 - console
45:23 - clear color is not defined
45:26 - oh yeah so
45:28 - i
45:30 - oh i just spelled this wrong so let's
45:32 - see clear
45:35 - color
45:36 - and then i'll refresh
45:38 - now let's try see if i get any
45:41 - clear okay it's still i spelled it wrong
45:44 - but then the pro another problem is that
45:45 - i actually never uh defined that
45:47 - function
45:48 - so let's do that right now i'm going to
45:50 - go down here clear
45:52 - color
45:53 - [Music]
45:55 - oh i put the word function
45:57 - so function clear color
46:01 - i'm going to use a line very similar to
46:03 - this where it says top left dot style
46:05 - dot background color equals light green
46:07 - so top left dot style that background
46:09 - color equals
46:12 - dark green because that's the initial
46:14 - color that we specified in the css
46:17 - and then same with this one
46:20 - top we got
46:22 - oh now i'm seeing another problem now
46:25 - that i'm actually copying and pasting we
46:26 - have top left here this is supposed to
46:29 - be
46:32 - okay we got top left here this is
46:34 - supposed to be top
46:36 - right
46:37 - this is supposed to be
46:39 - bottom left
46:41 - and this is supposed to be bottom right
46:45 - so now i can continue to copy and paste
46:47 - and i'll be getting the right code here
46:50 - so
46:51 - let's see
46:52 - this
46:53 - instead of tomato is going to be dark
46:55 - red
46:57 - and then
46:58 - the bottom left
47:03 - instead of yellow is going to be golden
47:06 - rod see these are all
47:08 - html color names
47:11 - and then
47:14 - the bottom right instead of light sky
47:16 - blue is going to be dark
47:19 - blue
47:21 - okay let's see if we're going to get any
47:22 - errors now i'll power this on press
47:25 - start
47:27 - and it seems to be working so
47:29 - let me
47:30 - close that for now
47:32 - so we could see it just went and but it
47:35 - never really went back
47:38 - hmm
47:39 - so let's see if we've done something
47:40 - wrong i was expecting the color to turn
47:43 - off at some point
47:47 - oh
47:48 - the problem was i put dark color here
47:51 - instead of dark
47:53 - green so it never turned back to dark
47:56 - green
47:57 - so let's try it again i'll save this
48:00 - refresh and start this
48:03 - okay
48:04 - so now it turned green but now i can't
48:08 - click it though so i'm trying to click
48:09 - here to show that i know that this just
48:12 - lit up
48:13 - but that's not working because we
48:15 - haven't programmed that yet so that's
48:17 - the next thing we're going to program so
48:19 - to make it so a player can click these
48:22 - colors we're going to have to have some
48:25 - more event listeners
48:27 - so let me move this code up a little bit
48:31 - and i'm going to add some more event
48:33 - listeners so top left
48:36 - dot eve dot add event listener
48:40 - and this is going to be another click
48:42 - event listener because we're just look
48:44 - listening for the user to click the top
48:47 - left
48:48 - and
48:49 - just like before event
48:57 - so now
48:58 - we're going to check if
49:01 - it's on
49:02 - we only want a user to be able to click
49:05 - there if the program is on
49:08 - um so if it is on
49:11 - we'll
49:12 - do a few things the player order
49:15 - dot push
49:17 - one
49:18 - remember player order is an array of the
49:21 - sections that the player has um clicked
49:25 - or pressed
49:26 - so if the player puts us here be we're
49:29 - going to push 1 onto the player order
49:32 - array
49:33 - then we're going to check
49:35 - if the player was correct this is going
49:38 - to be a function
49:39 - to check to see if the player was right
49:42 - now whether or not the player was right
49:45 - we are going to call the one function
49:47 - now this is the same function that the
49:49 - computer called that just lights up that
49:52 - color
49:53 - i and now
49:55 - if
49:56 - the player has not won if the player is
49:59 - not one yet
50:01 - then we're gonna set the timeout
50:08 - and we're going to clear the color
50:11 - so
50:12 - after
50:14 - 300 milliseconds
50:16 - we're going to make sure the color is
50:18 - clear that the the color that the user
50:21 - clicked is going to clear
50:23 - after 300 milliseconds
50:25 - let's actually test this out
50:28 - but i'm going to comment out this
50:31 - checking if if they've won
50:33 - because we haven't made that function
50:35 - yet
50:36 - so let me refresh here
50:43 - oh actually only works if i click up
50:45 - here yep
50:48 - that worked except the color didn't
50:50 - clear because i forgot to put
50:51 - parentheses here
50:54 - so let me just try again to make sure
50:56 - everything works
51:01 - okay we got that one to work
51:03 - and now
51:05 - uh well let me un comment this i'm just
51:08 - going to do some copying and pasting
51:10 - because we're going to do this for every
51:12 - corner
51:13 - so
51:17 - we got top left
51:19 - now i'm going to do top right
51:24 - and for top right we're going to push on
51:26 - the number two
51:28 - we're going to call the
51:30 - two function
51:32 - but
51:33 - everything else will be the same
51:35 - so now we have bottom left
51:38 - bottom
51:41 - push on a three
51:43 - this is gonna be three
51:45 - everything else is the same
51:48 - now we have bottom right
51:54 - push on a 4
51:58 - 4
51:59 - and everything is the same
52:02 - and now we just need our check function
52:05 - these are all calling a check function
52:08 - and this will be one of our more
52:10 - complicated functions
52:12 - so let's get to it
52:15 - function
52:16 - check
52:18 - [Music]
52:21 - and so
52:22 - we're going to check if if it's correct
52:24 - so if player order
52:27 - in these brackets i'll put player order
52:29 - dot length minus one
52:32 - that just means the last thing that the
52:34 - player clicked
52:36 - if the player order does not equal the
52:39 - real order at playerorder.link minus one
52:42 - the last thing that the player clicked
52:47 - then good equals false
52:49 - so if they're not the same good equals
52:52 - false remember good
52:54 - is true if the player is getting
52:55 - everything correct and good is false if
52:58 - the player has something incorrect
53:01 - we'll just put that onto the next line
53:03 - so it's easier to read
53:05 - and so now
53:07 - if
53:10 - pl playerorder.length
53:14 - equals equals 20
53:16 - that means they've gotten every single
53:18 - one right
53:20 - and
53:21 - good that means they haven't missed
53:23 - anything
53:25 - if good equals true
53:29 - now i could have just put and good i
53:31 - didn't have to put good equals true in
53:33 - fact i will just do that if we're on the
53:36 - 20th round
53:37 - and good we haven't got anything wrong
53:40 - then
53:42 - we'll call the win
53:43 - game function
53:46 - if
53:48 - good
53:49 - equals false
53:52 - that means the player got something
53:54 - wrong
53:55 - we're going to do something else so
53:58 - first i'm going to flash the color
54:02 - this is a function that we still have to
54:03 - write
54:05 - then the turn counter
54:08 - dot inner html
54:10 - is going to equal
54:12 - no
54:14 - that just means right in here it's going
54:17 - to say
54:18 - no
54:19 - and then the next thing that's going to
54:21 - happen
54:23 - is that we're gonna set a timeout
54:29 - and then the turn counter
54:32 - is going to be set back to the turn
54:35 - number
54:36 - so it was the the turn counter was set
54:40 - to no but after a certain amount of
54:41 - milliseconds is going to go back to the
54:43 - turn number
54:44 - and then also we're going to clear the
54:48 - color so we're flashing the color here
54:51 - and then we're going to clear the color
54:53 - here
54:54 - after a certain number of milliseconds
54:56 - and i'll just put those milliseconds
54:58 - which is going to be
54:59 - 800 milliseconds
55:05 - we're also going to do something special
55:08 - if
55:09 - we're in strict mode here
55:11 - so
55:12 - if
55:13 - strict
55:21 - if for a strict mode i'm going to call
55:22 - the play function and remember play
55:25 - function is just like repeating the
55:27 - whole game starting the game over with
55:30 - else if we're not in strict mode
55:34 - then we can repeat the round so let me
55:37 - set some things up here to repeat the
55:39 - round so if you get something wrong then
55:41 - the round is repeated if you're not in
55:43 - strict mode so comp turn is going to
55:46 - equal true
55:48 - and the flash is going to equal zero
55:52 - and the player order
55:54 - is going to be an empty array
55:57 - good equals
55:58 - true because we now we're back to having
56:00 - nothing wrong because the round has just
56:02 - started
56:03 - and
56:04 - and oops
56:06 - interval id
56:08 - equals set
56:09 - interval
56:11 - so we're setting we're starting this
56:13 - just like we did before
56:14 - in the play function is with a set
56:17 - interval by calling game turn
56:21 - with 800 every 800 milliseconds
56:25 - and then
56:26 - the final thing that's going to be in
56:28 - this function
56:29 - is
56:30 - noise
56:32 - equals
56:33 - false
56:34 - so
56:35 - so remember we're still in the good
56:37 - equals false if statement so if the
56:41 - player got something wrong we're not
56:42 - going to play a noise noise is going to
56:45 - equal false
56:46 - the
56:47 - you only play the noise if the player
56:49 - got the right it clicked on the right
56:51 - thing so now we can see up here
56:54 - why we check to see if noise is true we
56:58 - have a few conditions so far
57:00 - the condition if the player wins the
57:02 - game
57:03 - the condition if
57:05 - the player is wrong
57:08 - but now there's the condition if the
57:09 - player got it correct but has not won
57:13 - the game yet so that's the condition i'm
57:15 - gonna do now
57:16 - so
57:17 - if
57:19 - turn
57:20 - equals
57:22 - player order
57:24 - dot length
57:29 - and good
57:33 - and
57:34 - we haven't won yet
57:38 - then
57:40 - turn plus plus so we've now gone to the
57:43 - next turn
57:44 - and we're going to clear the player
57:46 - order
57:47 - for the next turn to begin
57:49 - comp turn is going to equal true
57:52 - [Music]
57:57 - flash is going to equal
58:00 - zero
58:02 - turn counter
58:05 - dot inner
58:06 - html equals turn
58:09 - now there's there is some uh code that's
58:12 - repeated from here to here so there
58:14 - could be some room for refactoring here
58:19 - an
58:20 - interval id equals set
58:24 - interval
58:27 - game turn
58:29 - yeah again this would be a
58:31 - prime place for some refactoring since
58:32 - we have some repeated code here
58:36 - and that's it for this check function
58:39 - but within the check function we
58:41 - reference two functions that haven't
58:43 - been created yet
58:45 - the win game function
58:47 - and the flash color function so let's do
58:50 - those now first the flash color function
58:53 - it's going to be very similar to the
58:54 - check color function so similar that i'm
58:57 - going to start by copying and pasting
58:59 - so the flash color
59:04 - do flash
59:05 - color
59:08 - we're going to just set these to the the
59:12 - other colors so
59:14 - light green
59:16 - and then instead of dark red is going to
59:18 - be tomato
59:21 - instead of goldenrod we'll have yellow
59:24 - and this is gonna be a light sky blue
59:29 - and then the other function is the win
59:32 - game function i'll put that at the end
59:34 - so function
59:37 - win
59:38 - game
59:41 - [Music]
59:42 - and so when the game if someone has won
59:45 - the game
59:47 - first we're going to do the flash color
59:49 - function that i just defined here whoops
59:54 - and then we're going to do turn
59:58 - counter
59:59 - dot inner html is going to be set to
60:03 - when
60:05 - and on is going to equal false
60:08 - so now a user can't click anything
60:11 - because on is equal false and then when
60:14 - is equal to true because the game has
60:17 - been won
60:19 - and that actually should be the full
60:21 - game so let's do some tests to see if
60:24 - anything goes wrong so just saved i'm
60:28 - going to
60:29 - refresh here so let's see we'll hit the
60:32 - power button start
60:34 - okay
60:41 - okay let's see what happens when you
60:42 - press the wrong thing
60:44 - it says no and then it goes back
60:47 - ooh
60:48 - it was supposed to play this again but
60:51 - it didn't
60:52 - so let's see what went wrong
60:57 - okay i have a spelling error right here
60:59 - so this says sticked it should say
61:02 - strict
61:03 - i'm sure some of the viewers probably
61:05 - saw that i spelled that wrong okay so
61:07 - that was supposed to be if strict so
61:09 - let's save that
61:11 - refresh
61:12 - let's see what happens here
61:22 - okay good it replayed from where i lost
61:29 - now if i should turn onto strict mode if
61:31 - i get something wrong it should replay
61:33 - from the beginning to start a new game
61:34 - if i get something wrong
61:37 - yep it went down to one it just started
61:40 - a new game
61:42 - now let's test what happens if we win
61:45 - now i'm not going to sit here and go
61:47 - through 20 rounds to see what happens
61:49 - when i win i'm going to just make some a
61:52 - change in the code here
61:54 - so instead of length
61:56 - equal 20 i'm gonna change this to length
61:58 - equal three so we can check what happens
62:02 - after three rounds for winning the game
62:13 - here it comes
62:15 - yep and see all of them light up and it
62:18 - says win right there and so we should be
62:21 - able to start again by just pressing the
62:24 - start button
62:26 - yeah
62:28 - and then if we turn we can turn it off
62:30 - any time see i click the power button
62:32 - and the light went out and then this
62:34 - went out
62:35 - so
62:36 - we have just created an entire
62:39 - simon game
62:41 - everything works i talked about some
62:44 - areas of refactoring that you may be
62:46 - able to work on on your own
62:48 - you can make this design a little better
62:51 - um some of this code that was repeated
62:54 - we can try to not have repeated code and
62:57 - i saw some other places like right here
63:00 - if comp turn this could really even be
63:02 - an else statement
63:04 - and you may be able to figure out a way
63:06 - to not even have the comp turn variable
63:09 - but that's something you can try to
63:11 - figure out on your own
63:13 - thanks for watching again my name is
63:15 - beau carnes
63:16 - don't forget to subscribe and remember
63:20 - use your code for good