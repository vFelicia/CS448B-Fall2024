00:00 - hi in this tutorial i'm going to show
00:02 - you how to develop a web application
00:04 - using node.js and the express.js web
00:07 - framework we will then deploy our
00:09 - application to aws using elastic
00:12 - pinstalk environment we will develop a
00:15 - landing page where we collect and manage
00:17 - sales leads you can freely use the
00:20 - resulting source code as a starting
00:22 - point to develop your product and we
00:24 - will cover all of the concepts that you
00:26 - need to know to build a fully fledged
00:28 - web application using node.js we assume
00:31 - intermediate programming knowledge but
00:33 - no background in web application
00:35 - development or not js okay let's get
00:38 - started so a little bit of background on
00:40 - node.js many years back developer ryan
00:43 - doll explored the idea of using
00:44 - javascript for server-side programming
00:46 - with the main motivation that existing
00:48 - http servers could not handle lots of
00:51 - simultaneous connections efficiently
00:53 - meanwhile also google's chrome browser
00:56 - team developed a new javascript engine
00:58 - from scratch called v8 and the unique
01:00 - property of v8 is that it was built to
01:01 - be much much faster in interpreting and
01:04 - running javascript compared to the other
01:06 - browsers and nodejs took google's
01:09 - optimize v8 javascript engine for
01:11 - server-side programming also creating a
01:13 - setup that allowed for much more
01:15 - scalable handling of requests and also a
01:18 - package manager for managing the open
01:21 - source javascript libraries was
01:23 - introduced called npm and node.js was
01:25 - worn now before we install node.js we're
01:27 - going to start by installing a script
01:29 - called nvm so go ahead and type nvm in
01:32 - your browser and click on this link and
01:35 - vm is short for node version manager
01:37 - it's a script to manage multiple active
01:40 - node.js versions on a single computer so
01:43 - let's go ahead and scroll down to copy
01:46 - and paste the install script for nvm and
01:50 - we'll paste it on our terminal
01:53 - now i already had nvm installed so this
01:55 - step may take a little longer in your
01:57 - case and what you need to do is close
01:59 - and reopen your terminal
02:01 - so that the nvm script can initialize
02:04 - while your terminal starts you can check
02:06 - that your installation was successful by
02:09 - typing nvm
02:11 - version we're now ready to install
02:13 - node.js so let's go back to nodejs.org
02:16 - we're interested in the long term
02:18 - support version of node.js and as of
02:20 - this video it is
02:22 - 10.15.0 is the version that we need so
02:25 - we go back to our terminal and type nvm
02:27 - install 10.15.0
02:31 - now this step may take you a little bit
02:33 - longer you should have now node.js
02:35 - installed and being actively used just
02:38 - for the sake of showing you how it works
02:40 - you can also install other node.js
02:42 - versions let's go for 8.11.3 for example
02:46 - and you can switch between node.js
02:48 - versions by typing nvm use so let's
02:51 - switch back to using node.js 10.15.0
02:56 - now for our application we're going to
02:58 - use express.js so let's go ahead and
03:01 - visit
03:02 - express.js
03:05 - express.js is a web framework and the
03:07 - power of it is in its simplicity you can
03:09 - develop very complex web applications
03:11 - yet it is a minimalist web framework
03:14 - that is very easy to grasp and this is
03:17 - the install command for express.js but
03:19 - we're going to use another tool called
03:21 - the express generator that will give us
03:23 - a good starting point and a directory
03:25 - structure so let's go ahead and copy and
03:28 - paste this command in our directory to
03:30 - install express generator now here in
03:33 - this command npm as i mentioned is the
03:35 - node package manager we will use this to
03:38 - install packages and here the dash g
03:41 - stands for a global install which means
03:43 - the installation is going to happen the
03:45 - computer-wide and not just one
03:47 - particular project so i'm going to press
03:49 - enter now
03:51 - and now we can go ahead and run express
03:54 - generator to generate our application
03:57 - and a useful directory structure so i'm
04:00 - going to copy paste this command here
04:02 - dash dash view equals pug means we're
04:04 - going to use pug as our html templating
04:08 - engine
04:08 - so i'm just going to press enter and we
04:11 - have now created a directory structure
04:13 - for our application now that we have
04:15 - generated a skeleton directory structure
04:17 - for our application i want to go over
04:19 - each folder we created so let's go ahead
04:22 - and start our text editor
04:26 - and let's take a look so under my app
04:28 - the public folder contains our assets
04:31 - assets are static files that your html
04:34 - files makes references to each html file
04:36 - will refer to certain images such as
04:39 - logos and some javascript files that
04:42 - need to be run on that webpage or style
04:44 - sheets that describe the style on a web
04:47 - page the rouse folder contains the
04:50 - router logic we will get to routers in a
04:52 - little bit and it's one of the key parts
04:54 - of our application and finally views
04:57 - contain the representation of each
04:59 - individual html page in our application
05:02 - notice that these are named pug files
05:04 - each of them get converted to separate
05:07 - html page the bin www file contains the
05:11 - initialization script for our web server
05:14 - and one of the notable files is app.js
05:18 - this is the main entry point for our
05:20 - entire web application and also we have
05:23 - the package.json file which is a recipe
05:26 - that contains the list of open source
05:28 - packages we need to install to run our
05:30 - application now let's go ahead and
05:32 - install these packages and run our
05:34 - application as it is so we go back to
05:36 - our terminal cd my app and we type npm
05:40 - install
05:42 - we're pulling and installing all those
05:44 - packages this file contains not just the
05:47 - packages that we need but also npm
05:50 - allows us to fetch all the dependencies
05:52 - that these packages have
05:54 - and now in order to run our application
05:56 - we need to type this command and once i
05:59 - press enter the web server is running on
06:01 - port 3000 and when i visit localhost
06:04 - 3000 on my browser i get to see this web
06:07 - page served if we go back to our source
06:09 - code app.js is the most important file
06:13 - that we care about app.js defines our
06:15 - web application and node.js express.js
06:18 - applications are monolithic meaning that
06:20 - every piece gets put together into a
06:24 - single application and let's see how
06:25 - that works we first import modules using
06:28 - the require statements and typically
06:31 - these modules are those ones that we
06:34 - find under the package.json file these
06:37 - modules here you will see that they have
06:39 - been imported and assigned to
06:41 - variable instances
06:43 - the one we're interested in is this
06:45 - express variable as you see the required
06:49 - statements includes the express package
06:51 - assigns it to a variable and then later
06:53 - on we call the constructor for express
06:56 - and assign
06:57 - the result to a
06:59 - variable called app an app is an
07:02 - instance of an express application
07:05 - typically this is a
07:07 - vanilla instance and then
07:09 - we
07:10 - make
07:11 - certain method calls to modify and
07:14 - configure our application and also use
07:17 - and include other modules here we first
07:20 - set that the views are included in a
07:23 - directory called views
07:26 - this is what this line does and we have
07:28 - as you can see a fuse directory here and
07:31 - next we set that we you are going to use
07:34 - pug as our view engine so the app
07:37 - instance that is unmodified and new gets
07:40 - modified by these set calls and then we
07:43 - have certain use method calls
07:46 - where we define further configuration
07:49 - and further components that we're going
07:50 - to use and one of the notable ones is
07:53 - the index router object that we have
07:56 - defined in this project if you go up
07:59 - here we use the require statement to
08:02 - include an index.js under the routes
08:05 - directory whatever that has been
08:07 - exported from this index.js file is
08:09 - assigned to an index router variable
08:12 - and this instance is then used for the
08:15 - path that is slash so this line means
08:19 - that our application is going to use
08:21 - index router for the slash route and
08:25 - that's how we also connect pieces of our
08:28 - application into one monolithic instance
08:31 - because index router was defined here
08:34 - under index.js and it has been included
08:37 - from app.js
08:39 - let's take a look at how the
08:41 - route object is defined if we go under
08:43 - routes and index.js again we are
08:46 - requiring the express package we have a
08:48 - variable called express and then
08:50 - we call a router to create an instance
08:53 - of an express router and just as we did
08:56 - here
08:57 - the router instance here is a vanilla
08:59 - instance it hasn't been modified and
09:01 - then we make some certain method calls
09:03 - to define it further in this particular
09:05 - case we're defining a get method and how
09:08 - to handle this slash path with a
09:11 - function and then we export
09:14 - the router instance that we have created
09:16 - to be included by another module and
09:19 - app.js includes that router here
09:22 - and that's how we connect it and
09:24 - the router object to recap is a vanilla
09:27 - instance then we make some modifications
09:30 - on it and then we export it and this
09:32 - pattern is used throughout the
09:34 - application this is how you
09:37 - divide your application into
09:39 - separate instances now let's take a look
09:42 - at what a route handler is and how it
09:44 - works here we have a router variable
09:47 - that is an instance of an express router
09:49 - and this router variable has several
09:52 - components that we care about the first
09:54 - one is that we're making a call to get
09:56 - and this defines that the route handler
09:59 - is associated with the get http method
10:02 - and then the second component we're
10:04 - interested in is the path so typically a
10:07 - router will match a particular path used
10:11 - in a url
10:13 - and then finally there is a handler that
10:15 - gets called if a path is matched to look
10:19 - at it more closely if this is our url
10:22 - the first section defines the protocol
10:24 - being used and the second one is the
10:26 - domain and then finally after the slash
10:28 - here we have a path component so
10:31 - a router
10:32 - object will look at this path and see if
10:36 - it is a match for the path that it has
10:38 - in its own definition finally the router
10:41 - will call the handler that's associated
10:43 - with it the last bit of detail here is
10:46 - that the get method here is defining the
10:49 - http method that this route handler is
10:52 - limited to it only responds to this get
10:55 - method if there are no routes that match
10:57 - for a given path or http method our
11:00 - application generates a 404 error which
11:03 - means not found so as a recap under
11:06 - routes index.js we're creating an
11:09 - express instance and then we're calling
11:11 - express.router to create a router
11:13 - instance and on this router we're
11:17 - defining that for the http get method
11:21 - if we are looking for the path slash and
11:24 - it gets matched we call this function as
11:27 - our handler for this route
11:30 - and under app.js
11:32 - we have an index router representing our
11:36 - exports from routes slash index file and
11:39 - then we have this statement here app.use
11:43 - and for the slash path we're using index
11:45 - router effectively meaning that when we
11:48 - type this root
11:50 - path with no slash or slash it means the
11:53 - same thing essentially and when we press
11:55 - enter we call the
11:58 - route handler that's defined here which
12:00 - renders our index page and that's how
12:04 - essentially our route handler works
12:06 - before we dive into source code and
12:08 - define routes and handlers let's cover
12:10 - what an http request is and how a
12:12 - request sequence works the http short
12:16 - for hypertext transfer protocol defines
12:19 - multiple methods for browsers to
12:21 - communicate with web servers and
12:24 - the http methods allow the browser to
12:27 - take different actions
12:30 - the get method simply fetches a resource
12:32 - from the web server such as a web page
12:35 - when we make an http get request
12:37 - the server typically responds with a
12:40 - resource such as a json object or an
12:42 - html file and in our current scenario we
12:45 - are interested in sending back an html
12:48 - web page and we use the express js
12:50 - specific method called res.render a
12:53 - restart render will generate an html
12:55 - page and our web server will respond
12:58 - back to the browser request with a web
13:02 - page and the other
13:03 - method we're interested in is called
13:05 - http post this is typically used for
13:08 - submitting data
13:09 - to a web server when you fill out a form
13:12 - on a web page and you press the submit
13:15 - button the data is sent to the web
13:17 - server and typically an http post
13:21 - method is used there are multiple http
13:24 - methods and what method is to be used is
13:27 - defined in the form definition on that
13:29 - particular html page but most of the
13:33 - time and almost always a post request is
13:35 - used and
13:37 - once the server receives the post
13:39 - request it does something with the sent
13:41 - data such as updating a database and
13:44 - then the server typically calls the
13:47 - res.redirect method again this is
13:49 - specific to express.js
13:51 - to redirect the browser to another url
13:56 - or path
13:57 - so the server responds with a redirect
14:00 - after processing the data back to the
14:02 - browser and finally the browser will do
14:05 - another http get request as a third step
14:09 - fetching the route that it has been
14:11 - redirected to now
14:13 - there are a few more http methods but
14:15 - this gives you the foundation for
14:17 - developing a rich web application now
14:20 - you know enough to develop routes route
14:23 - handlers and develop your application
14:26 - one of the issues with our route handler
14:28 - is that the logic that matches a url
14:32 - pattern is here but also the handler
14:35 - function the handler logic itself is
14:37 - defined as part of the root handler
14:40 - and what we want to do is separate these
14:42 - two so that we have a modular approach
14:44 - so we go to our terminal and i'm going
14:46 - to create a directory called controllers
14:50 - controllers essentially are a collection
14:52 - of root handlers i'm going to copy this
14:55 - function from here and place it under
14:58 - controllers in a new file
15:01 - save it here
15:02 - and
15:04 - give it a name called index and save it
15:06 - with the name index.js
15:09 - and if i go back to the routes
15:12 - and define index
15:15 - as an instance of what we have exported
15:17 - from our controllers index.js file i can
15:21 - now refer to
15:23 - the handler
15:25 - that i've defined
15:26 - from this route file so if i go back to
15:29 - controllers as a recap we have an
15:30 - index.js and we have a method called
15:34 - index that we're exporting as our
15:36 - handler and
15:38 - under our routes let's save this file
15:40 - again
15:41 - and under our routes we are importing it
15:44 - as a variable instance called index and
15:46 - we're assigning the index handler for
15:50 - this route let's now save our
15:52 - application restart it and see if it
15:54 - will work
15:57 - so i'm restarting the application and
15:59 - typing this url and it's working so
16:02 - controllers allow us to separate handler
16:06 - logic as you see in this example from
16:08 - the root handler logic and we're going
16:11 - to build many more of these controllers
16:13 - now let's take a closer look at what our
16:15 - controller function does so if we go
16:18 - under controllers index.js
16:20 - we named our function as index and the
16:23 - only
16:24 - call it has is to a call called
16:27 - res.render the resident render call
16:30 - renders an html page from a template the
16:34 - first argument is the name of the
16:36 - template file which is index if you see
16:38 - under views directory we have a file
16:40 - called index.pug and the second argument
16:43 - is a javascript object with a key value
16:46 - pair the key is title and the value is
16:48 - express now under app.js we did define
16:52 - our view engine as pug and we did define
16:55 - that the views are located under the
16:58 - views directory so express.js knows
17:00 - where to search as the starting point
17:02 - for view files so when we pass index as
17:06 - the first argument it will go and look
17:08 - at the views directory and find that
17:10 - there is an index.pug file here and then
17:12 - pug will convert this template into a
17:16 - real html if we look at this second
17:18 - parameter again title colon express we
17:21 - also pass this as a parameter to pug so
17:24 - if you look at index.pug it will use the
17:27 - variable and replace it with its value
17:30 - there are two cases where the value is
17:32 - being used here we'll get to this when
17:34 - we look at pug in more detail but
17:36 - essentially our controller function
17:38 - simply renders an html page it responds
17:41 - with a html page back to the requesting
17:44 - browser now is a good time to use
17:47 - version control and checking all the
17:49 - files that we have created so i'm
17:51 - assuming that you've installed git and
17:53 - i'm going to initialize a git repository
17:56 - here by typing git init db now we've
17:59 - initialized the repository and you can
18:01 - check that we have created a dot git
18:03 - file in the current directory that
18:05 - stores all the files by our git
18:08 - repository and now i'm going to check in
18:10 - all the files but before i do that
18:12 - i need to create a file called git
18:15 - ignore under my app let's create that
18:17 - file and type node modules in it because
18:21 - node modules
18:24 - are installed open source files they're
18:26 - not part of our project and git ignore
18:29 - file having node modules will exclude
18:32 - those files all of these files from our
18:34 - version control typically any file that
18:37 - gets auto generated or external to your
18:40 - repository you should exclude by using a
18:42 - git ignore file okay going back to the
18:44 - terminal i'm going to make my first
18:47 - comments by typing git add dot dots here
18:50 - representing the current directory so
18:52 - i'm going to add all the files in my
18:54 - current directory to the git index and
18:56 - commit them by typing git commits dash a
19:00 - meaning commit everything that is in the
19:02 - index to git
19:04 - so as you can see we have a bunch of
19:06 - files being committed and we're also
19:08 - including the get ignore file so let's
19:10 - type
19:12 - initial comment
19:14 - and save and exit and we have
19:17 - essentially committed our first change
19:20 - to our git repository to get the full
19:22 - source code for the tutorials if you go
19:23 - to this website and scroll below you
19:26 - will see posts with programming snippets
19:29 - as well as the link to the source code
19:31 - for those tutorials and if you have
19:33 - questions you can click on this button
19:35 - on the same page become a member it's
19:37 - free and then you'll be able to add
19:39 - comments to tutorials and get answers
19:41 - now one of the problems we have is that
19:43 - every time we make a modification in one
19:46 - of our source files we need to restart
19:49 - our web server
19:51 - because the changes made to source files
19:53 - are not being recognized and in order to
19:56 - remedy this problem there is a tool
19:58 - called node mount that we are going to
20:00 - install so i'm going to stop our web
20:03 - server and i'm going to install nodemon
20:06 - by typing
20:07 - npm install nodemon and then also typing
20:11 - save
20:12 - dash dev
20:14 - what this does is the save dev will save
20:18 - nodemon as a developer dependency
20:20 - meaning that we only need to install it
20:22 - when we are developing our application
20:25 - so if we go under
20:27 - package.json we now see that nodemon is
20:30 - a developer dependency
20:32 - and now we need to modify this line
20:35 - so that in the case of an environment
20:38 - where we're in production we're
20:41 - still using the standard node command
20:44 - but in case of development we're going
20:46 - to run nodemon instead that monitors for
20:50 - changes in source files and restarts our
20:52 - web server so for the start scripts i'm
20:55 - going to go ahead and type if the
20:58 - environment is production then we use
21:03 - node.bin www else we use nodemon bin www
21:09 - and then fi
21:11 - now this should work and we are going to
21:14 - use nodemon to monitor our web server so
21:17 - let's go ahead and try running this
21:20 - okay as you can see nodemon has started
21:23 - and when we make any source code changes
21:25 - it's going to automatically restart our
21:28 - web server now is a good time to make a
21:30 - git commits because we've installed node
21:32 - mode so i'm going to do git add
21:35 - package.json and then git commit dash m
21:39 - install nodemon
21:42 - now i'm going to cover the most common
21:44 - web application development pattern
21:46 - where we are going to build a landing
21:48 - page with various routes to collect
21:51 - sales leads manage them view them and
21:53 - delete them and edit them let's go ahead
21:55 - and rename the variable index as landing
21:58 - because we're going to build the landing
22:00 - page and our controller is going to be
22:02 - called landing and we're going to name
22:05 - our first method that gets our landing
22:08 - page as get landing so if we go we save
22:11 - this file and go to controllers index.js
22:14 - let's let's rename this file as
22:16 - landing.js
22:18 - and
22:19 - first function is going to be get
22:20 - landing and also let's rename the view
22:24 - now when we fetch this file we're going
22:26 - to display a form where if a visitor
22:30 - likes our service or our value
22:32 - proposition they will enter their email
22:34 - address and send us that information in
22:36 - a form so i go under views landing that
22:39 - pug and right below this paragraph i'm
22:42 - going to
22:43 - design a form
22:45 - the the form element takes one parameter
22:49 - called the action when we submit the
22:51 - form which path we're going to use is
22:54 - defined by action so i put a comma and
22:56 - for the second parameter i'm going to
22:58 - use the method called post when you
23:00 - submit a form the method that has been
23:03 - defined in the form is the one that the
23:05 - browser will use for making the request
23:08 - so we're interested in using the post
23:10 - method and i'm going to define an input
23:12 - element of type email
23:15 - and we're going to use a placeholder
23:17 - let's write here enter
23:19 - your email address notice how there is
23:23 - an indentation here pug nests html
23:25 - elements by using indentation so inside
23:28 - form we have nested an input and also
23:31 - typically we want to nest a button
23:34 - inside a form so that the button is
23:36 - associated with that form so i'm going
23:38 - to define a button elements of type
23:41 - submits when this is a submit button
23:43 - that indicates that we're going to
23:45 - submit the form that the button is
23:48 - nested in we're going to use a name for
23:50 - the button called submit and i'm going
23:52 - to now save this form
23:55 - let's make sure all of the files are
23:57 - saved and if i now restart my
24:00 - application
24:02 - i should see the form being served if i
24:05 - press enter here right so we have this
24:07 - enter your email address form with an
24:10 - input and then a submit button we're
24:12 - also going to commit our changes by
24:14 - typing git add because we renamed some
24:16 - files we need to explicitly add let's do
24:19 - git add views
24:21 - git add controllers
24:23 - let's see if we have captured all the
24:25 - files i do git commit dash a to commit
24:28 - all the changes landing.pog has been
24:30 - registered as a new file and so is
24:33 - controller landing.js but we missed
24:36 - views landing that box so i'm going to
24:38 - explicitly add that file landing.pug
24:41 - okay now if i commit
24:43 - we should be covered with all the files
24:47 - that we have renamed and added in git so
24:49 - i'm going to write a commit message
24:52 - landing page getting started
24:54 - and first form typically in git you
24:58 - first summarize your change in a single
25:01 - line and then you would leave an empty
25:04 - space and then include further
25:05 - information in the second paragraph but
25:07 - at this point we don't need to mention
25:09 - much i'm just going to leave it at the
25:11 - first line
25:13 - now that we have defined this form we're
25:14 - going to develop our first post route so
25:17 - i go to routes index.js
25:21 - and include a new router with the post
25:23 - http method and then i'm going to use a
25:26 - new handler called landing.submit lead
25:29 - because we're looking for sales leads it
25:31 - is called submit lead i'm going to save
25:33 - this file go to the controllers
25:36 - landing.js i'm just going to copy and
25:39 - paste this first handler that we had and
25:41 - i'm going to name the second one as
25:43 - submit lead when we submit our form from
25:47 - landing.pug there is this input element
25:49 - we forgot to name it so i'm going to
25:51 - define a name for it called lead email
25:55 - when the form is submitted from that
25:57 - browser we're going to be able to access
26:00 - the value inside this input element with
26:02 - the name lead email by going to our
26:05 - controller let's delete this statement
26:07 - here we're going to print out
26:11 - the input element that we have received
26:14 - lead email and the way we do that is by
26:17 - using the body parser library we are
26:21 - going to do rec dot body lead email to
26:25 - print out the value i believe i need to
26:28 - include the package called body parser
26:30 - in app.js for this to work but it turns
26:33 - out express.js already includes this
26:35 - functionality this allows us to retrieve
26:38 - the values for input elements when there
26:40 - is a handler for a post request if we
26:42 - simply do
26:44 - rec.body.lead email we're going to be
26:46 - able to access the value inside the
26:48 - input element now this handler is
26:50 - successfully reading this data but we
26:53 - can't leave it at that we need to
26:55 - conclude the request so we're going to
26:56 - do a res that's redirect
27:00 - and we're going to use the original path
27:02 - of slash so that we go back to the uh
27:04 - landing page for now so i'm going to
27:06 - save this and
27:08 - we're already running the application
27:10 - let's see what happens if we submit an
27:12 - email address here
27:14 - my email at
27:16 - domain.com so i'm going to press submit
27:19 - as you can see the browser was
27:20 - redirected to the same page but let's
27:23 - see what happened in our console we were
27:26 - able to receive the value and print it
27:30 - let's check in all the changes we made
27:31 - so let's go to our terminal and type git
27:34 - add controllers landing.js git add
27:38 - routes
27:39 - index.js and we also modified our view
27:42 - file so we're going to do git add views
27:45 - landing.pug and comment landing page
27:49 - post route to submit email
27:53 - so we're able to receive
27:55 - data in our application but we're not
27:57 - able to do much with it so we're going
27:59 - to install a database an sql database a
28:02 - particular postgres database for our
28:04 - application go ahead and open up your
28:06 - browser and type homebrew homebrew is a
28:08 - package manager for mac os and one of
28:10 - the packages maintained is the
28:13 - postgresql package so you can copy and
28:16 - paste this installation script on your
28:18 - terminal if you're on a mac os to
28:20 - install homebrew let's go ahead and just
28:23 - do that and it's going to install a
28:25 - command line tool called brew which will
28:27 - allow you to then install various
28:29 - packages including a postgresql now i
28:32 - have it already installed so i'm going
28:34 - to skip this step and assuming you have
28:36 - installed this we can then install
28:38 - postgres by typing brew install
28:41 - postgresql so after you've done that you
28:45 - can start your database by typing brew
28:49 - services start postgres ql this is going
28:53 - to start the postgres process in the
28:55 - background on your machine so that you
28:57 - can connect to it and create databases
28:59 - manipulate tables do things with it so
29:01 - i've already run this command so i
29:04 - already have my database running we're
29:05 - going to use a tool called psql to
29:08 - connect to our database and make some
29:10 - changes so i'm going to type psql
29:13 - postgres to connect and if everything
29:16 - goes well you should see the postgresql
29:18 - prompt and now we're ready to create our
29:21 - database first we create a user that can
29:24 - access that database by typing create
29:27 - role express mvp db user i'm assuming
29:31 - here that i'm going to use the name
29:33 - express mvp for our application so i'm
29:36 - just adding a
29:37 - db user for that and with login password
29:42 - let's make the password simple for now
29:45 - and press enter and now i'm going to
29:46 - create our database by typing create
29:49 - database express mvp db in case you want
29:54 - to delete these roles or databases and
29:56 - redo the same commands you can do that
29:59 - by typing a drop database or drop role
30:02 - so we're now ready with our database i'm
30:04 - going to quit psql by doing the control
30:07 - d we're done with our database setup now
30:10 - we're interested in using a library for
30:12 - accessing our database from javascript
30:15 - and manipulating data and for this we're
30:17 - going to use an object relational mapper
30:19 - library shortly called an orm we picked
30:23 - sqlize as our choice of orm
30:26 - if you go ahead and type sqlize in your
30:29 - browser you're going to find a website
30:31 - for it as sqlize is a stable and popular
30:34 - orm for node.js and it will work well
30:37 - for most of our needs and rm greatly
30:40 - simplifies the type of queries you have
30:41 - to write for manipulating database
30:44 - tables and rows instead of typing long
30:46 - error prone sql queries and rm lets you
30:48 - generate those queries by writing
30:50 - javascript okay so let's go ahead and
30:52 - open up our terminal again and type npm
30:55 - install
30:56 - sqlize this will install sqlize as a
31:00 - package i recommend doing dash dash save
31:02 - so that it's saved to our package.json
31:05 - file we're also interested in the
31:08 - database driver library in node.js for
31:11 - postgresql which is simply called pg so
31:15 - i'm going to go ahead and type npm
31:17 - install pg
31:20 - save as well
31:22 - sqlize will invoke pg in order to access
31:26 - the postgresql database this is a low
31:28 - level library for accessing postgresql
31:31 - databases the other tool that we need is
31:34 - a command line tool for sqlize called
31:37 - sqlize cli so i'm going to install that
31:39 - as well by typing npm install sqlize
31:43 - cli and i'm going to use dash g so that
31:46 - concludes our installation for postgres
31:49 - and sqlize now we're going to create
31:51 - some configuration files so that our
31:53 - application and sqlize can access our
31:56 - database and for that we're going to use
31:58 - the tool a sqlize cli
32:00 - but before we start we need to first
32:03 - create a configuration file for sqlize
32:06 - cli so that the default paths we use are
32:09 - going to be defined let's go ahead and
32:11 - create a file called dot sqlize rc in
32:15 - the root of our project typing a touch
32:17 - dot
32:18 - sqlize rc and let's open up our editor
32:22 - when we open a sqlize rc we see certain
32:25 - paths defined let's remove the db path
32:28 - and let's keep it empty for now we want
32:31 - to create these directories directly
32:33 - under our application root folder so
32:35 - that they're accessible easier with one
32:37 - less step so let's go ahead and save
32:39 - this file and now we're ready to
32:41 - generate
32:42 - some files so i'm going to by sqlize
32:45 - init and we have created several folders
32:48 - the config config.js is the one we're
32:51 - interested in this is defines the
32:52 - database details let's open up our
32:55 - editor again and go to config
32:57 - config.js we have three environments
32:59 - defined here one for development test
33:02 - and also one for production so i'm going
33:05 - to type here module that exports equals
33:09 - and for developments we defined the
33:11 - database username as express mvp dash db
33:15 - user as our password we defined 123.456
33:20 - and for our database these are the users
33:23 - and database we created using the psql
33:26 - command previously so
33:27 - we're going to type express mvp
33:30 - db and our host is
33:33 - 12701 this stands for the localhost the
33:36 - database we're using is postgres so
33:38 - we're going to use the dialect postgres
33:41 - here there's one more parameter missing
33:43 - here
33:44 - the port parameter typically
33:46 - for a postgres database that is a 5432
33:49 - i'm currently not going to touch the
33:51 - other environments and going to save
33:53 - this one here so we should be now
33:56 - ready to access our database from sqlize
33:59 - using our application now i'm going to
34:01 - go back to the terminal to commit some
34:04 - of the changes that we made so far we
34:06 - installed sqlize and the pg library so
34:08 - we've modified our package.json file
34:10 - let's go ahead and create a comment for
34:13 - that change
34:16 - we have added sqlize and pg packages and
34:20 - i'm going to save this comment we've
34:21 - also defined a sqlize.rc file so i'm
34:24 - going to add that one as well
34:26 - and commit this change
34:29 - configuration file for sqlize
34:33 - cli
34:35 - and i've also created a configuration
34:37 - file for our database connection so i'm
34:39 - going to commit this file with git add
34:43 - config config.js there's also one more
34:46 - file that i'd like to introduce to you
34:49 - briefly under
34:50 - models when we ran sqlize in it we
34:53 - defined the file called index.js this
34:55 - will initialize sqlize when we run our
34:59 - application it takes the environment
35:01 - that we defined under config.js and then
35:03 - creates a new sqlize instance using the
35:06 - database credentials that we have
35:08 - created so this is the initialization
35:10 - file that was auto generated when we
35:12 - typed sqlize init so i'm going to check
35:16 - this file in as well and the file name
35:19 - is always index.js under models and this
35:23 - is a specific file just for initializing
35:25 - sqlite so i'm going to
35:27 - commit these changes so we added
35:31 - configuration file for
35:33 - sqlize and the script
35:37 - as a recap for where we've left off we
35:39 - can visit our landing page and then
35:41 - submit an email address to our
35:43 - application
35:45 - and display the email address collected
35:48 - as a console log
35:50 - now that we have installed our database
35:52 - and installed sqlize orm and configured
35:55 - it we're ready to define our first model
35:58 - as well as the first migration so let's
36:00 - go ahead into our text editor and create
36:04 - a new folder called migrations and let's
36:07 - create a new file under the models
36:10 - directory named
36:11 - lead.js since we're collecting sales
36:14 - leads our table and model will be named
36:18 - leads migrations allow us to create
36:21 - recipes to take our database state the
36:24 - database definition from point a to
36:27 - point b for example right now we have no
36:30 - tables in our database even though it
36:32 - has been created and with a migration
36:34 - recipe we will be able to create our
36:36 - first table that represents our sales
36:39 - leads and we will run that migration to
36:42 - create our first table and start
36:45 - accessing it and the model definition is
36:47 - used by sqlize to
36:49 - create to generate the methods for
36:52 - accessing the table and to update the
36:54 - table to take database actions on the
36:57 - table such as creating rows deleting
36:59 - rows updating rows and fields and in
37:02 - contrast migrations are used for
37:04 - manipulating the database table
37:06 - definitions themselves such as creating
37:09 - a table adding a new column or changing
37:11 - the type of the column in that table the
37:14 - migration file that we're going to
37:15 - create is highly specific to sqlize
37:19 - sqlize has low level methods for
37:22 - accessing and manipulating a postgresql
37:24 - database but the migration itself is a
37:27 - file a recipe that's specific to sqlize
37:30 - and so is the model that we're going to
37:32 - define so let's go ahead and create a
37:34 - new migration file and let's define our
37:37 - first table i'm going to copy and paste
37:40 - this code that i have already prepared
37:41 - as our first migration let's first save
37:44 - this file migrations are a sequential in
37:47 - the sense that they need to be run in
37:49 - order they don't make sense if they are
37:52 - run without an order so we need to order
37:54 - them by the file name and we do that by
37:57 - including a date starting with the year
37:59 - a month and the hour and even the
38:01 - minutes when the migration is created so
38:04 - as of now we're in january 4th 2019 so
38:07 - i'm going to name my migration as
38:10 - 2019 0 1 0 4 and then the hour is 19 17
38:18 - and i'm going to include the action that
38:20 - this migration is going to take which is
38:23 - creating a table named lead so create
38:26 - lead table and then finally that's a js
38:29 - here is our first migration saved and
38:32 - the migrations are bi-directional so you
38:35 - can apply a migration represented by the
38:37 - up method and then you can roll back a
38:40 - migration by using a down method so in
38:42 - this case the up method stands for
38:44 - creating a new table called leads with
38:48 - so and so fields and then the down
38:50 - method or action represents dropping the
38:53 - table will effectively cause the table
38:56 - to be deleted from our database now if
38:58 - you look at the fields that are being
38:59 - generated we first obviously have an id
39:02 - field and id represents a unique column
39:06 - in our database and it's represented by
39:08 - universally unique id type and sqlize
39:10 - has that type built in for us and
39:12 - typically we need a created ad and
39:15 - update that field for each row when a
39:18 - new row is created this date will be
39:21 - relevant and each time a row is updated
39:24 - this second field updated at is going to
39:26 - be irrelevant and finally the actual
39:29 - field the data that we were collecting
39:31 - in our application is an email address
39:33 - so we're including a field called email
39:36 - of type sqlize string
39:38 - so we have saved this migration we can
39:41 - go ahead and run it by typing sqlize db
39:45 - migrate the command has succeeded which
39:48 - means we have created a table called
39:50 - leads in our database now we need to
39:53 - define the sqlize model definition for
39:55 - the table we just created so let's open
39:58 - our editor and create a new file under
40:01 - models called
40:03 - lead.js i'm going to copy and paste the
40:05 - definition that i created earlier for
40:08 - this this javascript model file is
40:11 - specific to sqlize sqlize will generate
40:14 - the methods it needs to access the
40:16 - database table by
40:18 - using this model definition we define an
40:20 - id field in the model which is a primary
40:24 - key and then we define an email field as
40:27 - well which is of type string notice how
40:29 - these fields match the migration we just
40:32 - ran for the leads table
40:35 - and we omitted the created that and
40:37 - updated that fields in the model because
40:39 - sqlize assumes they always exist when we
40:43 - run the application sqlize will run
40:46 - models index.js if you look at this for
40:49 - each section it will go over each model
40:52 - definition under the models directory to
40:55 - import and use for accessing the
40:59 - respective database tables under models
41:01 - directory for each database table we
41:03 - define a model such as the one we
41:06 - created for lead.js for the leads table
41:09 - and sqlize will go over each of those to
41:11 - generate the methods so that it can
41:14 - access those tables in order to achieve
41:16 - this we need to go to the initialization
41:19 - file bin slash www and here initialize
41:23 - sqlize for that we need to first create
41:27 - a variable called models and import the
41:31 - models directory
41:32 - and these three lines start our server
41:36 - listening on a particular report we're
41:38 - going to modify this code a little bit
41:40 - and we're going to type return
41:42 - models.sequalize
41:44 - sync and then
41:47 - result
41:49 - going to
41:50 - cut and paste this portion inside the
41:53 - body of this call
41:55 - okay we're now ready to further develop
41:57 - our application and run sqlize queries
42:00 - before we go any further let's check in
42:03 - the files that we have just created so
42:05 - i'm going to add the migration we
42:07 - created
42:09 - and commit this file
42:11 - create migration for
42:13 - leads table for creating
42:16 - leads table
42:18 - i'm going to check in the model as well
42:20 - it's add models
42:22 - lead.js
42:29 - we're also going to check in the changes
42:31 - we made on the initialization file
42:34 - bin slash www
42:38 - initialize sqlize in
42:41 - bmw
42:44 - now that we have a database set up we
42:46 - can implement the post route where we
42:48 - will save an email address to our
42:51 - database so let's go and open up our
42:53 - editor and go to controller slash
42:56 - landing.js
42:58 - we're going to modify the submit lead
43:00 - handler to save the email address
43:03 - collected to our database so let's go to
43:06 - the top and then type const models
43:09 - equals require
43:12 - dot dot slash models
43:15 - models gives us access to the sqlize
43:19 - methods for the models that we have
43:21 - defined
43:22 - and i'm going to type return
43:25 - models that lead that create
43:30 - note that create is a sqlize method
43:33 - and for the email field we're going to
43:36 - use the value we've obtained from reg
43:38 - body lead
43:40 - email
43:42 - then
43:44 - take the results
43:45 - and redirect
43:48 - back to
43:49 - the
43:50 - landing page
43:52 - and let's delete this last line and the
43:54 - first line
43:57 - save
43:58 - and rerun our application
44:02 - if i go back to the
44:05 - landing
44:06 - page and type an email address here
44:09 - username at email.com and submit notice
44:13 - that the browser reloaded the landing
44:17 - page and that's because
44:18 - of the res redirect here and i'm
44:22 - assuming that the create call has
44:24 - succeeded if you go back to our terminal
44:27 - we see this sql statement here generated
44:30 - by
44:31 - sqlize run by sqlize
44:34 - we're inserting a new row into the leads
44:36 - table particularly the id email created
44:39 - that and updated that fields new a
44:41 - unique id for the role and then the
44:43 - email
44:44 - address we just submitted
44:46 - and then the dates
44:49 - so we've successfully saved the email
44:51 - address in our database let's commit the
44:53 - changes we made so i'm going to type git
44:56 - add
44:57 - controllers landing js and then commit
45:00 - the change
45:02 - save leads collected on landing page
45:07 - we save
45:09 - email addresses collected back to the
45:13 - database
45:15 - we're going to implement the most common
45:18 - web development pattern shortly known as
45:20 - crud which stands for create update and
45:23 - delete
45:24 - we've already done the creation of leads
45:27 - with this route and now we're going to
45:30 - define new routes that allow us to do
45:32 - listing editing updating and deleting of
45:35 - leads so and the first one we will cover
45:37 - is for listing delete so let's define a
45:39 - new route
45:43 - with the path slash leads
45:47 - and
45:48 - the handler called as show
45:51 - leads and let's save this file
45:54 - and let's go to controllers landing.js
45:57 - to define our new handler let's copy and
46:00 - paste the first one we
46:02 - created
46:03 - let's name it as show leads
46:07 - now all we need to do is fetch the leads
46:11 - from the database and for that we're
46:13 - going to call
46:14 - models
46:15 - lead
46:16 - dot find all
46:19 - and then we will be returned an object
46:22 - let's name it as leads
46:26 - and let's cut this line with the res
46:29 - render and paste it inside the body here
46:35 - a few things to note this
46:39 - call here is a promise and we're going
46:42 - to cover promises in detail later but
46:44 - for now what you need to know is that
46:46 - this call is going to execute
46:48 - asynchronously and the then here
46:51 - ensures that the results within this
46:53 - body are available after the execution
46:57 - of this call has completed so there's a
47:00 - guarantee that
47:01 - this body is going to be available after
47:05 - this execution
47:06 - even though the call is asynchronous and
47:09 - we'll get to those later and
47:11 - the file all method is defined by sqlize
47:15 - and also the leads object here contains
47:18 - the rows returned from the database and
47:20 - also the methods to access those
47:23 - rows
47:24 - so as you can recall the render method
47:26 - the second parameter is
47:29 - an object passed to our view file we're
47:31 - going to define a new key here called
47:34 - leads and assign it the value of our
47:37 - object leads
47:39 - and save this file and one more thing to
47:41 - note is that this view file usually
47:44 - typically we use a different view file
47:46 - for each purpose but for the time being
47:48 - we're going to use the same landing view
47:50 - file to also show the collection of
47:53 - leads
47:54 - now let's go to
47:56 - viewslanding.pug
47:58 - we're going to type if
48:00 - leads pug will check that if the leads
48:04 - variable is non-zero it's going to
48:07 - include the rest of the html snippets
48:11 - let's type if leads and then let's
48:13 - define a header here called
48:15 - with the text leads plug also has the
48:18 - capability of iteration we're going to
48:20 - do for lead in leads
48:24 - note that leads is an array of objects
48:27 - of type elite we're going to create a
48:31 - paragraph
48:32 - and type lead.email
48:34 - now pug considers that anything of that
48:37 - comes after the p is text we don't want
48:40 - to display this as text and we want to
48:42 - use the pug way of syntax of
48:45 - dereferencing this variable which we
48:47 - used here
48:48 - by typing hash open curly brackets and
48:51 - then close curly brackets so let's save
48:54 - this landing file
48:55 - and go to
48:57 - our terminal
48:59 - our application is still running so
49:00 - let's go to our browser
49:03 - and type localhost 3000 there's one more
49:07 - thing we want to do
49:09 - let's go back to the landing.js
49:12 - controller now instead of redirecting to
49:15 - the slash route we actually want to
49:19 - go to the leads route when we submit a
49:22 - new lead so that's the change we make so
49:25 - that the
49:26 - this new route that we defined is going
49:28 - to be triggered which we'll call this
49:32 - show leads function
49:34 - okay so if we go back to our browser let
49:37 - me submit a new email address
49:41 - lead one email.com and when i submit
49:43 - this
49:44 - i see the list of leads on the same page
49:48 - and notice how the browser
49:50 - went to the slash leads routes
49:53 - because of the change we just made
49:55 - so let's check in the changes we made so
49:58 - i'm going to do git add controllers
50:00 - landing.js git add route
50:03 - index.js and
50:06 - add views
50:07 - landing.pug
50:12 - implement leads routes
50:15 - show a
50:16 - collection of leads
50:19 - upon submission
50:23 - now we want to take a look at the
50:25 - details of each individual lead so let's
50:28 - define a new route
50:30 - called
50:31 - slash lead slash
50:33 - colon
50:35 - lead underscore id and let's define a
50:37 - handler
50:38 - landing that show underscore lead
50:41 - now two interesting things here
50:44 - firstly we defined slash lead slash as a
50:48 - unique path component to match
50:49 - individual leads and notice how this
50:52 - path is unique and different than the
50:54 - other routes we defined we will handle
50:57 - all details of an individual lead under
51:01 - slash lead slash path component which
51:03 - gives us sort of a namespace to work on
51:05 - individual leads
51:07 - the colon here
51:09 - defines lead id as a parameter as a
51:13 - request parameter that means whatever
51:15 - that comes in the url you type in the
51:17 - browser after slash lead slash is going
51:20 - to be captured in a request parameter
51:23 - named lead underscore id
51:25 - and we can then access the value of this
51:28 - parameter in the root antler
51:30 - show lead
51:32 - now let's go to controllers landing.js
51:35 - and copy and paste one of the handlers
51:37 - we already have
51:39 - let's name it as show lead
51:42 - and what we need to do now is query the
51:44 - database for a lead with a given id so i
51:50 - need to do return models.lead.find1
51:55 - and then
51:57 - the where clause
51:59 - helps us
52:00 - query for a particular field and we're
52:03 - going to use the id field and we're
52:05 - going to pass the request parameter that
52:08 - we received
52:10 - named as lead id
52:13 - to find the particular the lead record
52:16 - in the database
52:17 - corresponding to our lead
52:19 - now
52:20 - this will return a lead value
52:24 - let's go ahead and delete this portion
52:27 - and here we're going to
52:30 - do res render
52:32 - we're going to define a new view file
52:35 - called lead and pass an object with key
52:38 - lead
52:39 - assigning it the database object that we
52:42 - received
52:43 - now let's save this file and go ahead
52:47 - and create
52:49 - a new file under reviews called
52:52 - lead
52:53 - let's copy the
52:56 - initial portion of
52:58 - landing that bug
53:01 - and let's define
53:03 - an h1
53:04 - lead header and let's simply define a
53:07 - paragraph with the lead information
53:10 - lead.email
53:12 - now let's go to landing.pug we want to
53:15 - give the user an opportunity to click on
53:18 - a link that takes us to the individual
53:21 - details page for that link and we don't
53:24 - have that link here so i'm going to add
53:26 - that to this paragraph
53:28 - but i would like to display both the
53:31 - lead email and also that link on a
53:34 - single line the same line so i'm going
53:36 - to
53:37 - nest the link and the email under the
53:40 - same paragraph as a reminder we
53:44 - nest html elements with indentation in
53:47 - pug so i'm going to first define
53:50 - under the paragraph a span elements
53:54 - that will display our email and also
53:57 - um this character that i'm typing is
54:00 - used for
54:01 - text and also to display spaces in park
54:04 - so i'm going to include one space
54:07 - character
54:08 - and
54:09 - define our link with the anchor tag
54:12 - with an href property of slash lead
54:16 - slash
54:18 - and now here we already have access to
54:21 - the lead object that has been obtained
54:24 - from the database so we can
54:28 - include the id of the lead here by
54:30 - typing lead.id
54:33 - and we are going to
54:35 - use the text details
54:37 - in the link
54:38 - so now
54:40 - this link is going to point at the path
54:43 - slash lead slash plus the database id of
54:46 - the lead so let's save this and run our
54:49 - application
54:52 - everything seems to work fine so let's
54:54 - open up our browser type localhost 3000
54:57 - let's submit a new lead
55:01 - new leads at
55:04 - domain.com and
55:07 - see that we're able to
55:08 - display
55:10 - both the leads and also the details link
55:13 - for those leads i'm going to click one
55:15 - of them we're now navigated to
55:18 - that path and we're able to display the
55:21 - lead information
55:23 - now let's check in all the changes we
55:25 - made
55:26 - it add views
55:27 - it adds controllers
55:30 - and routes
55:32 - and then if we commit now
55:35 - add a new route to display
55:38 - lead details
55:42 - let's go back to routes slash index.js
55:45 - and we're now going to define the routes
55:47 - for editing individual leads so let's
55:50 - type router that gets
55:53 - slash lead slash colon lead underscore
55:56 - id and we're going to define a new
55:59 - action for this particular lead id which
56:01 - is going to be slash edit
56:04 - and we're going to define a new handler
56:06 - with landing dot show
56:09 - edit
56:10 - lead
56:11 - now this is a gate route which means
56:13 - that we're going to fetch a new web page
56:17 - for the purpose of editing the lead id
56:19 - so we're going to deliver a form
56:22 - that contains information about this
56:24 - lead id by using the
56:27 - show edit lead handler
56:31 - and let's type router.post slash lead
56:34 - slash colon leads id slash edits
56:40 - and define a new handler called edit
56:42 - underscore lead here the first route we
56:45 - defined shows the form for editing the
56:47 - lead id and the second
56:50 - route we defined which is a
56:52 - post
56:53 - submits the form to edit the lead id now
56:57 - there's one key point here we are highly
57:00 - interested in defining the same path
57:03 - component for the get and the post
57:06 - routes
57:07 - and this is because on an error when we
57:10 - handle the post request if we re-render
57:13 - the same page we want the url in the
57:16 - browser to match the original get
57:18 - request
57:20 - we're going to go into more detail about
57:22 - this when we cover error handling
57:26 - now let's get started by creating the
57:28 - link that will take us to the edit route
57:30 - for the lead for that let's open up
57:33 - views
57:34 - lead.pug
57:36 - now we're going to modify this
57:38 - by creating a span under the paragraph
57:43 - and we're also going to create a link an
57:46 - anchor tag
57:47 - with an href of slash lead slash
57:52 - plus lead.id remember that we have the
57:56 - lead database object available to us so
57:59 - we can reference its id and also we're
58:02 - going to add the
58:04 - slash edit path for editing the
58:08 - lead
58:09 - now let's
58:10 - write
58:12 - edits
58:13 - for this link
58:14 - and save this file
58:18 - and notice how the value of this hf
58:21 - property corresponds to the get route we
58:24 - defined here
58:27 - now let's define the handler for this
58:29 - show edit lead route by going to
58:32 - controllers and landing.js and let's
58:34 - copy and paste one of the handlers here
58:39 - and call it show edit underscore lead
58:42 - now this handler also obtains one lead
58:45 - record from the database by using the
58:48 - lead id parameter and then we're going
58:50 - to instead of displaying the lead we're
58:53 - going to display a form
58:55 - where we can edit and submit the updates
58:58 - on a lead so i'm going to call this
59:01 - edit underscore lead
59:03 - and we're going to
59:05 - use a directory called lead
59:09 - for
59:10 - all the view files where we manipulate
59:12 - each lead so i'm
59:14 - going to finally call this lead slash
59:16 - edit.leads now let's save this
59:18 - controller and
59:20 - create a subfolder under views
59:23 - called lead and also create a new pug
59:27 - file
59:28 - called
59:30 - edits underscore lead dot pug
59:36 - now let's go to landing.pug and copy
59:40 - the beginning portion
59:42 - to edit lead
59:44 - and now we're going to create a form
59:47 - under edit lead where we will
59:49 - modify we will have the opportunity to
59:51 - modify the lead
59:53 - so we can copy some code from
59:55 - landing.pug we or where we already had a
59:58 - form i'm going to copy this form and
60:01 - input element and the button elements to
60:05 - edit lead
60:11 - now the action for our form needs to
60:14 - reflect the route that we defined here
60:17 - which is lead slash leads and then the
60:19 - lead id and edit so let's go ahead and
60:22 - add that here
60:25 - we're going to use plus lead.id and then
60:28 - plus
60:30 - slash edit
60:32 - and the method we're using is post
60:35 - method and we're still going to use the
60:37 - same name as lead email in our input it
60:40 - is of type email if we need we have a
60:42 - placeholder if the
60:44 - lead field is empty
60:47 - and then let's call this button
60:49 - save
60:52 - now rather than an empty form we want to
60:54 - show the existing value of the lead so
60:57 - we're going to add a new property in our
60:59 - input element called value and assign it
61:03 - with
61:04 - lead.email which we will receive from
61:07 - the database
61:10 - now let's save this file
61:13 - because this file is one subdirectory
61:15 - under views because we created this lead
61:18 - directory and we are referring to
61:20 - layout.pug at the beginning we need to
61:23 - update also our reference to go one
61:26 - directory level below now if we go back
61:29 - to our index.js file we haven't defined
61:32 - the root handler edit underscore lead
61:34 - for the
61:35 - post route so let's go to our
61:38 - controller's landing.js
61:40 - and define a new route called
61:44 - edit lead
61:46 - and let's delete the body
61:50 - now we have access to the leads
61:53 - id
61:54 - by using
61:56 - rec.params.lead underscore id because
61:59 - this was available to us in the route
62:01 - path
62:02 - we also have access to rec
62:05 - body
62:07 - lead underscore email the actual updated
62:10 - field
62:11 - and that comes from the edits lead form
62:15 - the name of the input element was lead
62:18 - underscore email so we're going to use
62:21 - these fields to first retrieve the
62:24 - object by using its id and then we're
62:26 - going to update its email field by using
62:30 - lead email let's go ahead and type
62:32 - return models dot lead
62:35 - that update
62:38 - email
62:40 - rec
62:41 - body dot
62:43 - lead underscore email
62:45 - and we're going to use a where clause
62:51 - we're going to
62:53 - ask for the id field using rec params
62:57 - lead underscore id
62:59 - and our query is complete
63:03 - then once this field has been updated
63:06 - we're going to receive the results as
63:09 - how many fields has been updated from
63:12 - sqlize
63:14 - we're going to
63:15 - redirect
63:17 - the user to
63:19 - view the lead so we're going to use
63:21 - slash lead slash
63:23 - plus
63:24 - rec
63:25 - params
63:27 - lead underscore id
63:29 - so this way after the post is successful
63:32 - and update is done we're going to be
63:34 - redirected to
63:36 - this route that shows the details of the
63:38 - lead
63:40 - now let's save our controller
63:43 - and
63:44 - run our application
63:46 - and see how it works so i'm going to
63:48 - open up the terminal the application
63:50 - seems to be running ok
63:53 - and i'm going to open up the browser
63:55 - and browse to localhost 3000
63:58 - let's create a new lead hello at
64:01 - getbuzz.io and submit that so we have a
64:04 - collection of leads displayed
64:06 - let's click on one of them
64:09 - and click edit we're now on the edit
64:13 - route and i'm going to
64:16 - shorten this
64:17 - to let's say a at b.com
64:21 - and save it
64:23 - and i'm redirected to the show lead
64:26 - route that shows the updated leads so
64:29 - this concludes our tutorial on editing
64:32 - and updating leads now is the time to go
64:35 - back to our terminal and check in the
64:37 - changes we made so i'm going to
64:39 - type git add
64:41 - views git add
64:44 - controllers git add routes these are the
64:47 - directories that we modified and then
64:48 - we're going to comment
64:50 - add
64:52 - lead edit and post routes
64:58 - the next route we're going to implement
65:00 - is the delete route let's go back to our
65:03 - editor routes slash index.js and create
65:07 - a new route
65:09 - router.post
65:11 - slash lead slash lead id
65:14 - slash we're going to use the delete path
65:18 - components and then let's define
65:20 - a new handler called delete underscore
65:23 - lead
65:24 - let's save this file and then go to
65:26 - controller
65:27 - landing.js and let's create a new
65:31 - handler for the delete action let's call
65:34 - this delete lead we're going to delete
65:37 - the row in the database representing
65:39 - this lead so we're going to type return
65:42 - models
65:43 - lead
65:45 - destroy
65:48 - where
65:50 - id is rec
65:53 - params.lead underscore id
65:56 - then
65:59 - redirect back to the
66:02 - landing page
66:03 - because we are going to delete the
66:05 - current lead and everything associated
66:08 - with it including
66:09 - the page that shows the lead so
66:12 - let's type rest.redirect
66:16 - slash leads
66:21 - now let's save this file so let's go to
66:24 - [Music]
66:25 - views
66:27 - lead
66:28 - lead.pug
66:29 - let's define a new action here we're
66:32 - going to use a button instead of a link
66:36 - because the default method for accessing
66:39 - a link is a get request but we're
66:41 - interested in doing a post request
66:44 - so i'm going to define a form here
66:47 - action
66:49 - will be slash
66:50 - lead
66:52 - slash
66:53 - lead.id slash
66:56 - delete
66:59 - and method will be
67:01 - post
67:03 - we're going to have a button
67:06 - of type equals
67:08 - submit and we're going to
67:11 - call the button
67:13 - delete let's also
67:15 - create some spacing
67:17 - and we're now ready to run our
67:19 - application let's go back to our
67:21 - terminal the application is running
67:24 - let's make sure we've saved all the
67:26 - files
67:28 - and try
67:30 - let's go to slash leads let's
67:33 - go to the details of the first one we do
67:35 - have a delete button
67:37 - now let's click on it
67:40 - the entry was deleted let's try it again
67:44 - okay this one was also deleted let's
67:46 - take a look at our database activity
67:49 - we're deleting from leads where id is
67:54 - this id
67:55 - this concludes our implementation of the
67:57 - delete routes as usual let's check in
68:00 - the changes we made i'm going to do git
68:02 - add controllers git add routes we hit
68:06 - add views we need comments
68:09 - implement
68:11 - delete route for leads
68:15 - in this tutorial we're going to learn
68:17 - how to implement ajax requests and get
68:19 - started with using javascript in the
68:21 - browser we're going to implement the
68:23 - delete lead functionality
68:25 - using client-side javascript so let's
68:28 - start by defining our routes with
68:31 - router.post
68:33 - slash lead slash
68:35 - lead id
68:37 - delete and we're going to name this as
68:40 - delete json
68:42 - and we're going to define a new handler
68:44 - delete lead json let's save this file
68:48 - and go to controllers landing.js
68:51 - we're going to copy
68:52 - the delete lead handler we created
68:55 - previously
68:56 - and we're going to name it as delete
68:58 - lead underscore json we're still going
69:01 - to destroy a lead using the request
69:03 - parameter lead id but then after that
69:05 - instead of redirecting to the slash
69:07 - leads route we're going to send back a
69:09 - json object and we will do that by
69:11 - typing res.send
69:14 - defining a key msg
69:16 - with the value success
69:19 - now let's save this file and go to view
69:21 - slash landing.pug
69:24 - we're going to implement a button that
69:26 - will invoke the ajax request that will
69:29 - delete the particular lead
69:31 - so let's
69:33 - define a button
69:36 - with the text delete and we're going to
69:38 - define the on click property of the
69:40 - button to call the javascript function
69:43 - delete lead
69:46 - onclick is an event that gets fired in
69:48 - the browser when this button is pressed
69:51 - and by assigning it that handler we make
69:53 - sure that when the button is clicked
69:55 - this javascript function will get called
69:58 - now when we insert inline javascript
70:00 - like this inside pug
70:03 - we surround it with this character
70:05 - called the grave accent which looks like
70:08 - this
70:08 - tilted single quotes
70:13 - we're also interested in passing this
70:15 - lead.id field to
70:17 - the delete lead function but also we
70:19 - want pug to evaluate the value of it and
70:22 - pass the value and in order to do that
70:25 - we type
70:26 - dollar and then curly braces
70:29 - id
70:30 - and we surround the result with
70:33 - single quote character
70:36 - now i know this syntax looks a little
70:38 - bit complicated but this is the best way
70:41 - to add inline javascript in pug also
70:44 - passing variables that need to be
70:46 - evaluated for those who are curious
70:49 - grave accent is this left tilted single
70:52 - quote
70:53 - now for the implementation of delete
70:54 - lead we're going to use the jquery
70:56 - javascript library so i'm going to
70:58 - include that at the bottom of the html
71:00 - page with this single line we're also
71:03 - going to add
71:05 - a javascript file that we are going to
71:07 - define
71:09 - as
71:10 - javascripts slash leads.js so let's save
71:14 - this file and go to javascript
71:17 - leads.js
71:19 - now let's define our delete lead method
71:21 - and go over the details this delete lead
71:24 - function is making an ajax call ajax
71:27 - allows us to make http requests to our
71:30 - web server using javascript also sending
71:33 - and receiving data in form of json
71:36 - objects
71:37 - the key point with ajax is that the
71:40 - requests the web requests happen in the
71:43 - background while you're on the same web
71:45 - page so if you go back to our browser
71:48 - let's assume that i clicked on this
71:50 - delete button and it invoked our
71:52 - function that makes the ajax call that
71:54 - means that we're still going to be on
71:56 - the same page and then this url here is
71:58 - not going to change and the request to
72:01 - our web server and the response will
72:03 - happen in the background now let's take
72:05 - a look at the parameters we passed to
72:07 - this function the url field defines the
72:10 - route that we're going to call
72:12 - and notice how this path matches the
72:15 - route that we've defined for this
72:17 - purpose
72:20 - we have a data type as
72:23 - json and then we typically pass the data
72:26 - payload in this data field and
72:29 - json.stringify function is
72:31 - called to pack the data into a form
72:33 - that's transmittable over the network
72:36 - and then it gets unpacked on the other
72:38 - side using another call that matches
72:40 - this which is json.parse
72:43 - the type of our request is a post
72:45 - request and then we define two functions
72:47 - one for the success case and one for the
72:50 - error case and these get called when we
72:52 - receive a response from the server
72:55 - when we delete the lead from our
72:57 - database using the ajax call we want to
72:59 - reflect that the lead is removed to our
73:01 - user on the browser window as well
73:03 - now recall that we did not navigate from
73:06 - the current url and the ajax call
73:07 - happened in the background
73:09 - for that reason we need to modify the
73:10 - currently served html page we're
73:12 - displaying in the browser
73:15 - we do this dynamically in javascript and
73:17 - delete the html that corresponds to the
73:20 - lead that we've deleted
73:22 - the currently served html document
73:25 - visible in the browser is shortly called
73:27 - as dom which stands for document object
73:29 - model
73:31 - now jquery has convenience functions
73:34 - that help us manipulate the dom such as
73:36 - this remove call
73:38 - in this first part here we're looking
73:39 - for an html element with the id of lead
73:42 - id and then we're making a call to
73:44 - remove to remove it from the currently
73:47 - shown html document
73:50 - now in order for this to work we need to
73:52 - assign the lead id to the particular
73:55 - html element we want to delete so for
73:57 - that let's go to views slash landing.pug
74:01 - to this paragraph element
74:04 - for each paragraph we create for an
74:06 - individual lead we're going to assign it
74:08 - the corresponding lead id
74:11 - now html documents are hierarchical and
74:14 - what that means is that this paragraph
74:16 - is a parent of all of these children
74:19 - that have been nested inside it so if we
74:22 - delete this paragraph element from the
74:24 - html document that effectively means
74:26 - that we're also deleting all the
74:27 - children which includes all the details
74:30 - for that individual lead so we're going
74:32 - to
74:33 - delete this whole thing by simply
74:36 - searching for the paragraph elements
74:38 - with the
74:39 - lead id and then remove it from the html
74:42 - document and that's effectively what
74:45 - this call is doing
74:47 - now a few useful details about jquery
74:51 - when you see a dollar sign like this
74:53 - it means that we're making a call to
74:55 - jquery it just means we're making a
74:56 - library call dollar.ajax means we're
74:59 - calling jquery ajax and this dollar and
75:02 - then the parentheses mean whatever
75:04 - that's inside is going to be handled by
75:07 - jquery the second detail i want to
75:09 - mention is this part here
75:11 - when you use this hash character it
75:14 - means that you're simply searching for
75:16 - an id
75:18 - in the
75:19 - current html document the dom
75:22 - when we do hash plus lead id it means
75:25 - we're searching for the elements with
75:28 - that particular lead id jquery will go
75:30 - and search for every element that has an
75:33 - id property defined
75:35 - which is a fast way of searching for
75:38 - elements in an html document
75:41 - now let's take a look at how our
75:42 - application works let's go to the slash
75:44 - leads route in our browser and click on
75:47 - the delete button on some of these leads
75:50 - as you can see the leads are being
75:52 - deleted from this current html page but
75:55 - let's see what happens in the background
75:57 - so i'm going to open up the javascript
75:59 - console
76:00 - to see if you're getting results
76:03 - so if i open up these result objects i
76:07 - see that the message success has been
76:09 - received from our server each time i
76:11 - delete an object let's try it once more
76:18 - and also let's take a look at what
76:20 - happened on our server side
76:23 - as we are seeing we're doing a post
76:25 - request to the delete json route and
76:28 - also we're able to delete leads from our
76:31 - database
76:33 - let's check in the changes we made i'm
76:35 - going to do git add controllers
76:38 - hit add routes
76:40 - git add views we'll also define a new
76:43 - javascript file so i'm going to do git
76:45 - add public javascripts
76:49 - let's commit this
76:51 - implement
76:53 - lead delete route using ajax
76:58 - in this tutorial we're going to update
77:00 - the looks of our application using the
77:02 - bootstrap css framework so let's open up
77:05 - our browser and search for bootstrap
77:08 - and click on this link and go to
77:11 - getbootstrap.com the easiest way to
77:13 - include bootstrap in our project is to
77:15 - include hosted cdn links of the library
77:18 - in our project files
77:20 - cdn shortly stands for content
77:22 - distribution network and there are
77:23 - third-party hosts for javascript
77:25 - libraries and we will copy and include
77:27 - the links for bootstrap library in our
77:29 - project for that let's go to this link
77:32 - and click on the latest version
77:34 - and click on download and if we scroll
77:37 - below
77:38 - we're going to be given the links to the
77:40 - bootstrap cdn let's copy and paste them
77:43 - in our projects
77:46 - there are also dependencies provided so
77:48 - let's copy and paste them as well
77:52 - now in this tutorial we're also going to
77:54 - learn how to separate our pug files into
77:57 - reusable components and we're going to
77:59 - create a header a navbar and a footer
78:02 - component that we can use across all of
78:05 - our files let's create a new folder
78:07 - under views called common
78:11 - and let's create new files head.pug
78:16 - footer.pug
78:18 - and navbar.pug
78:20 - let's go to head.pug and type mixin head
78:24 - title
78:25 - indent head
78:27 - meta
78:28 - char set equals utf-8 and
78:32 - title equals title pug mixins allow us
78:35 - to define common snippets and include
78:37 - them in multiple pug files we can also
78:39 - pass them parameters such as this title
78:42 - field that gets used as the title of the
78:44 - document let's go back to where we
78:46 - copied the bootstrap stylesheet link
78:49 - cut it and paste it on head.pug
78:53 - and change the syntax to pug which is
78:55 - link open parentheses some properties
78:58 - and then close parentheses
79:01 - we also need to add some standard meta
79:03 - tags in our head section so let's do
79:05 - that as well
79:09 - now let's save this file and go to
79:10 - footer.pug and type mixin footer footer
79:14 - for the time being we're just going to
79:16 - include the javascript files so let's go
79:19 - back to where we copied the bootstrap
79:20 - javascript files cut and paste them on
79:24 - this file
79:25 - we're going to change each script tag
79:28 - syntax to use the pug syntax which is
79:30 - script and then
79:32 - open parentheses some properties and
79:34 - close parentheses
79:37 - let's do this one as well
79:49 - now the order that these libraries are
79:51 - declared matter and bootstrap depends on
79:53 - these other libraries so they need to be
79:55 - declared before the bootstrap
79:58 - declaration so let's go ahead and fix
80:00 - that order
80:04 - we're now ready to include our header
80:06 - and footer in landing that box so let's
80:08 - go there and delete these first few
80:10 - lines and type
80:12 - doctype
80:13 - html
80:15 - html
80:17 - blank equals
80:19 - en
80:21 - and we're now going to include
80:24 - common head.pug and we're going to
80:26 - invoke the mixin by typing head
80:29 - and let's give it a title starter mvp we
80:32 - need to add a body tag
80:36 - and let's indent everything
80:38 - to nest in the body
80:41 - and then at the bottom
80:43 - just before leads.js which depends on
80:46 - jquery i'm going to add the footer
80:49 - include
80:50 - common
80:52 - footer.pug
80:54 - and invoke the footer mixing
80:57 - and we don't need this line anymore
80:58 - because we've declared jquery in
81:01 - footer.pug
81:02 - now let's save this file and reload our
81:05 - landing page
81:07 - we can see now that this is a bootstrap
81:09 - enabled page now the page elements look
81:12 - rather plain because we didn't add any
81:14 - styling yet let's conclude our tutorial
81:16 - by doing some maintenance work the other
81:18 - pug file that we used was lead.pug so
81:21 - let's do the same thing on that file as
81:23 - well we're going to
81:25 - copy and paste
81:27 - this header section
81:30 - we're going to add a body
81:32 - we're going to indent the body to nest
81:35 - it under the body elements
81:37 - and we're going to copy the footer
81:39 - section
81:46 - to be nested inside the body and save it
81:49 - we also are not going to make use of
81:51 - this layout.pug file anymore so we can
81:53 - delete that
81:54 - let's check in all the changes we made
81:56 - i'm going to type git add views common
82:00 - git add
82:01 - views
82:04 - and hit comment
82:06 - add a
82:07 - common
82:08 - header and footer section
82:12 - in all pug files
82:18 - in this tutorial we're going to focus on
82:20 - the user interface and update the looks
82:22 - of our landing page using bootstrap
82:24 - templates let's open up our editor and
82:27 - go to view slash landing.pug now under
82:30 - the body i'm going to copy and paste a
82:33 - bootstrap navbar example that i've
82:35 - prepared earlier this is our navigation
82:38 - bar typically for a functional component
82:40 - of a page like this such as a nav bar we
82:42 - can take a look at an example on the
82:44 - bootstrap website and copy
82:47 - now when we define components in pug the
82:49 - first element you define is the html
82:52 - element and then everything that comes
82:54 - after that separated by a dot are css
82:57 - classes css classes modify the
82:59 - appearance of your html elements so in
83:01 - this navigation bar we're first defining
83:04 - a link and then we're nesting an image
83:06 - in it which is going to serve as our
83:08 - logo and then we have two navigation
83:10 - links nested in an unordered list notice
83:13 - how each html elements has a different
83:16 - css class these are classes defined by
83:19 - the bootstrap framework and available to
83:22 - us one last point here notice how we
83:24 - define these html elements in pug but
83:27 - this line does not contain a beginning
83:31 - html element and that's because this is
83:33 - typically considered to be a div you can
83:35 - type it like this or you can omit it and
83:37 - it will be assumed that the first
83:39 - element is a div element we're also
83:41 - making use of an image asset file for
83:44 - that i copied the file under public
83:46 - slash images slash file name all your
83:49 - assets which are shortly static files
83:51 - that never change in your application
83:53 - are stored under public you can refer to
83:56 - an asset file in html by starting with a
83:59 - slash and then the folder name and then
84:01 - the file name so as the root of your
84:03 - asset path slash refers to your public
84:06 - directory
84:07 - let's try and run our application by
84:09 - reloading our home page
84:12 - now we see a navigation bar two links
84:15 - and a logo
84:16 - now as we did previously i'm going to
84:18 - cut this nav bar from here and place it
84:21 - in a common mixing file so let's go
84:24 - under views slash command slash
84:26 - navbar.pug we created earlier and paste
84:29 - this code we're going to define a new
84:31 - mixin called navbar and currently we're
84:34 - not needing any arguments and i need to
84:36 - indent this by one level under mixing
84:39 - and save the file now let's go back to
84:42 - landing.pug and include our mixin under
84:45 - body we first need to add a header tag
84:49 - include
84:50 - common slash
84:52 - navbar.pug and then plus navbar
84:57 - and let's update the rest of our page
84:59 - using bootstrap html elements i'm going
85:01 - to type container
85:05 - and we create a new row and then inside
85:08 - the row we create a new column
85:10 - and the size of that is six for a medium
85:14 - sized screen we're going to copy and
85:17 - paste a header and a paragraph or two
85:20 - for our value proposition and let's
85:22 - delete these two lines here
85:24 - there were a few css classes that
85:27 - were previously
85:29 - prepared i'm going to copy and paste
85:31 - those
85:32 - and we have a form snippet as well that
85:34 - matches the form we created before
85:40 - copy this portion
85:42 - the contents of the
85:44 - input element
85:49 - and let's delete this part
85:52 - now let's save this file and reload our
85:55 - page
85:58 - now we have a landing page that has an
86:00 - updated look let's go back to
86:02 - landing.pug and we're going to update
86:03 - the portion where we list the set of
86:06 - leads
86:07 - for that i'm going to create a new row
86:10 - and then a column with an md-6 type
86:13 - we're going to indent this portion
86:16 - and i'm going to replace this portion
86:19 - with a table let's go ahead and do that
86:27 - now if we reiterate on this source code
86:30 - if
86:31 - there is a variable called leads we're
86:33 - showing the title leads and then we
86:35 - start a table
86:37 - inside the table under this t-head
86:39 - elements
86:40 - we list the names of the columns for the
86:43 - table we're using the name email for the
86:45 - email field and then the actions under
86:47 - the t-body tag we're listing the rows
86:50 - for the leads so here for each lead in
86:53 - leads we're creating a new row and then
86:56 - we're listing the email for the lead and
86:58 - then a link to the details also the
87:00 - delete button for it
87:02 - notice how we move the lead id as the id
87:06 - property to the table row so that the
87:08 - delete lead call can find which row of
87:12 - the table to delete when it's deleting
87:14 - the lead
87:15 - so as a recap if you go under public
87:17 - javascript leads.js
87:20 - this line will find the right html
87:22 - element and then remove it
87:24 - and
87:26 - in the case of a table this is the table
87:28 - row
87:29 - you can check out the bootstrap
87:30 - documentation on how to build tables
87:33 - like this now i want to make a few fixes
87:35 - on the indentation under this h1 tag we
87:38 - are nesting this table and that's not
87:40 - correct so i'm just going to de-nest it
87:42 - by one level also we want to nest this
87:45 - row under the container tag so let's go
87:48 - ahead and do that
87:54 - that's done let's save this
87:56 - now a few more changes let's go to
87:58 - navbar.pug
88:00 - i want to update the link to the leads
88:02 - route
88:04 - and also let's go to footer.pug remember
88:07 - when adding a dependency for the
88:09 - bootstrap library we added this jquery
88:12 - 3.3.1 and then the slim version turns
88:15 - out the slim version does not have ajax
88:17 - calls so we won't be able to make the
88:19 - ajax call under this delete lead
88:22 - function so i'm going to go back to this
88:24 - and delete this slim portion so we're
88:26 - now referring to the full version of
88:28 - jquery that includes the ajax calls as
88:30 - well we need to delete this integrity
88:32 - hash as well since this was referring to
88:35 - the previous file let's save this
88:37 - and we should now be ready to run our
88:39 - application let's go to our browser and
88:42 - reload the home page and let's click on
88:44 - the leads link and if we go down below
88:47 - we see all the leads listed and let's
88:49 - click one of the delete buttons to
88:51 - delete them before we move on let's
88:53 - check in all the changes we made so i'm
88:55 - going to do git add
88:57 - views
88:58 - common
89:00 - git add views
89:02 - landing
89:03 - dot pug
89:05 - and let's try doing git comments
89:08 - and let's type install
89:11 - bootstrap
89:12 - and update the look of pages
89:18 - while we're at it i want to organize our
89:21 - pages under the lead directory and i
89:23 - want to remove the list of leads from
89:25 - the landing page and create a dedicated
89:27 - page for leads so let's go under lead
89:30 - and create a new file and save it as
89:33 - leads.pug we're going to copy the first
89:37 - portion of our landing page let's just
89:40 - copy
89:41 - this part
89:44 - and paste it here also
89:46 - let's copy the footer part
89:50 - and paste that as well
89:55 - and in this middle section we're going
89:57 - to
89:59 - create a new container and then a column
90:03 - let's copy and paste those these are
90:05 - nested under body and header
90:10 - and let's
90:11 - cut and paste
90:14 - the section for
90:16 - leads we're actually not going to use
90:18 - these
90:19 - two lines in the landing page either so
90:22 - let's delete those save it and under
90:24 - leads i'm going to paste the section we
90:27 - don't need this if leads check because
90:30 - we're already displaying a page
90:37 - and let's save this file now let's go to
90:40 - controllers landing.js once we submit a
90:43 - lead we're redirected to the
90:45 - leads route and once we show the leads
90:48 - instead of using the landing page we're
90:50 - going to use the new page we defined
90:53 - and that'll be under
90:54 - lead slash leads
90:57 - let's save this file and let's go ahead
91:00 - and run our application again
91:02 - if i reload this page i got an error
91:05 - because the
91:07 - head file is located under common and i
91:11 - am one directory level below with the
91:13 - leads.pug file so i need to type dot dot
91:17 - slash for all the common files
91:21 - let's save this file and reload
91:24 - our application again
91:26 - and here we are on the leads page we can
91:29 - now see the leads on a separate web page
91:32 - let's also update the title here to
91:35 - leads and i'm also going to move this
91:38 - lead.pug file under the lead directory
91:41 - so let's just do that
91:43 - move
91:44 - use lead.pug views
91:48 - lead need the pug
91:50 - and i'm also going to update the css
91:53 - classes here to match the ones we use
91:56 - under leads and to use bootstrap so
91:58 - let's copy and paste the code we have
92:01 - for leads.pug
92:03 - into lead.pug
92:10 - and let's take the section that lists
92:12 - the single lead
92:15 - and let's delete the rest
92:19 - assuming that we are going to use a
92:21 - table
92:22 - we can update the contents of the table
92:24 - to match a single lead
92:27 - so instead of having for lead in leads
92:30 - we're just going to access the lead we
92:33 - have let's
92:38 - do this the first field is the email
92:41 - field which is the same here we can
92:44 - change this as edit and then delete and
92:48 - here we're going to
92:50 - have
92:51 - edit
92:52 - plus slash edit and instead of the ajax
92:56 - call we were going to use this form
92:58 - let's copy and paste that
93:02 - and as you might know we're using the
93:05 - button
93:07 - using the
93:08 - bootstrap css classes so let's double
93:11 - check what we're doing the first entry
93:13 - is lead.email and the second entry is
93:16 - the link to slash lead slash lead id and
93:19 - then edit which matches the link we
93:22 - created here and then the last one is a
93:24 - http post when we submit with this
93:27 - button
93:28 - and the path is slashly lead id delete
93:31 - so let's delete this portion
93:34 - and the body let's save this file
93:37 - and let's go to
93:39 - controllers landing.js when we render
93:42 - the lead page that is now located under
93:45 - lead
93:46 - lead let's save this
93:48 - and run our application again so i'm
93:50 - going to go to the browser window if i
93:52 - click on the details
93:55 - now
93:56 - i am seeing the lead page it now has the
93:58 - bootstrap classes and a table we need to
94:01 - redo the same exercise with edit
94:03 - lead.pug although i'm going to copy and
94:05 - paste code i prepared earlier because
94:07 - it's repeating the same exercise so
94:09 - let's delete this html and
94:12 - paste
94:14 - this concludes this part of our tutorial
94:16 - we've migrated all of our pages to
94:18 - bootstrap and also creates the separate
94:20 - leads view file
94:22 - let's check in our changes
94:40 - in this tutorial we're going to develop
94:42 - sign up and login functionality and
94:44 - learn how it all works let's open up our
94:46 - editor and open route index.js we're
94:49 - going to get started by defining the
94:51 - routes for login and sign up so let's
94:54 - type router get slash login we're going
94:57 - to use a new controller called user and
95:00 - we're going to use a handler called show
95:03 - login to show the login page and then
95:05 - we're going to have a router.get for
95:08 - signup
95:09 - and again we're going to use the user
95:11 - controller and type show
95:13 - sign up now let's define our user
95:16 - controller here as well
95:18 - so i'm assuming we're going to define
95:21 - a controller called user under
95:23 - controllers and let's save this file and
95:26 - let's go to controllers create a new
95:28 - file called
95:30 - user.js
95:32 - i'm going to copy and paste code that i
95:34 - prepared earlier nothing much happening
95:36 - here we're simply showing the
95:38 - login page the view is located under
95:41 - user slash login and then we're showing
95:43 - the sign up page with a sign up view
95:46 - under user directory we're also passing
95:49 - two objects to the
95:51 - view file
95:52 - one is form data and the other one is
95:54 - errors we're going to get back to these
95:56 - later on for now let's know that we're
95:59 - simply passing empty objects because
96:01 - these views are located under the user
96:03 - directory let's go ahead under views and
96:05 - create a new folder called
96:08 - user and i'm going to create two new
96:11 - files called
96:14 - login.pug
96:15 - and
96:17 - signup.pug
96:21 - now let's define these pages i'm going
96:22 - to paste some code that i prepared
96:24 - earlier for this nothing much
96:26 - interesting happening here since we
96:28 - covered bootstrap a little bit before
96:30 - but the essence of this page is that we
96:32 - have a form that posts to the signup
96:35 - routes and we're placing two input
96:37 - elements here one is an email and the
96:39 - other is a password and we're submitting
96:41 - them with the submit button and then we
96:42 - have a link at the bottom for the option
96:45 - of going to the login route now let's go
96:47 - to
96:48 - login.pug also i'm going to paste code
96:51 - that i prepared for this it's
96:53 - essentially the same code except we're
96:56 - posting to the login route and we're
96:58 - passing an email and password field
97:01 - as well and the purpose of this page is
97:03 - to log in and then we have two optional
97:06 - links at the bottom one is to reset a
97:08 - password we haven't got a route for that
97:09 - yet and then we can go back to the
97:12 - signup route let's save these files
97:15 - and go to our browser to take a look at
97:18 - how they work so this is how our login
97:22 - page looks and if i click on the signup
97:25 - route this is going to serve as our
97:27 - signup page now is a good time to define
97:30 - our user model and migration of our
97:33 - database so let's go to models and
97:36 - create a new file called user.js
97:40 - since we covered one model definition in
97:42 - detail for lead js before i'm going to
97:45 - paste code that i prepared earlier for
97:47 - the user model definition and let's go
97:49 - over it quickly so we're defining a new
97:52 - user model
97:54 - we're defining an id and then we have
97:56 - several fields of type a string we have
97:58 - a username first name last name password
98:01 - and email now we're not going to make
98:04 - use of these first three fields so we're
98:06 - passing a property along null true so
98:08 - that we can create rows that have null
98:11 - values for these fields and we're
98:13 - essentially going to make use of the
98:14 - password field and the email field and
98:17 - we're also passing the property unique
98:19 - for email as a constraint so that each
98:22 - unique user is distinguished by his or
98:24 - her email address and email is a
98:27 - candidate key for this table now we need
98:29 - to create a database migration that
98:32 - matches this model so let's go to
98:33 - migrations and create a new file and i'm
98:36 - going to name this file
98:38 - with today's date
98:39 - so that it goes in the right order in
98:42 - terms of migrations and comes after the
98:45 - lead table migration let's save this
98:47 - file
98:48 - i'm also going to copy and paste codes
98:51 - to go
98:52 - faster since we've covered a migration
98:55 - example before
98:56 - so as we covered previously the
98:58 - migrations have two methods one is an up
99:01 - method to to
99:02 - move the table
99:04 - definitions into a new form and then a
99:07 - down method that rolls back the change
99:09 - that's being made in this migration
99:12 - we're creating a new table called users
99:14 - and the fields we're creating match the
99:17 - fields we defined in the model nothing
99:19 - surprising or interesting here let's
99:22 - save this file
99:24 - and go to our command line to run this
99:27 - migration i'm going to type
99:29 - sqlize
99:31 - db
99:32 - migrate
99:35 - our migration has succeeded so we have
99:38 - created this table in our database and
99:40 - before we move on let's check in the
99:42 - changes we made so i'm going to type git
99:44 - add views user git add controllers
99:49 - hit add routes and git commit
99:52 - implement get route for login and sign
99:57 - up
99:58 - we're also going to check in the
100:00 - migrations and models so for that let's
100:02 - do git add models
100:04 - and git add migrations
100:07 - and git commits
100:08 - create
100:09 - user model and migration
100:13 - now let's open up our editor and go to
100:16 - routes slash index.js and we're going to
100:19 - define the post routes for login and
100:21 - sign up so let's type router.post
100:24 - slash login user.login router.post
100:29 - signup
100:31 - user.signup
100:33 - now before we move on let's define these
100:36 - controller handlers as well so let's go
100:38 - to controllers users.js
100:40 - and create these two empty handlers sign
100:43 - up and login
100:45 - now we're going to implement the sign up
100:46 - and login routes using a node.js library
100:49 - called passport.js in particular
100:51 - passport.js helps us with implementing
100:54 - authentication as you might guess
100:56 - there are many ways to authenticate your
100:58 - users you could use social networks or
101:00 - other means multiple methods of
101:02 - authentication for us and if you're
101:04 - interested to find out more you can go
101:06 - to passportjs.org for more details
101:09 - now let's go back to our terminal to
101:11 - install the packages we need let's type
101:13 - npm install
101:14 - passport we're going to use an add-on to
101:17 - passport for local authentication to our
101:20 - database so for that let's type
101:23 - passport-local we're going to use a
101:25 - library called bcrypt for encrypting our
101:28 - password
101:30 - and we're going to use the package
101:32 - validator to validate the input we make
101:35 - on login and signup routes we're also
101:37 - going to need to create sessions for our
101:40 - users so let's
101:42 - type express session and finally we're
101:45 - going to display error messages if login
101:48 - or signup fails for any reason and for
101:50 - that we're going to use a package called
101:52 - connect dash flash so let's
101:55 - type dash save and press enter
101:58 - this might take a while because we're
101:59 - installing multiple packages
102:02 - and let's check in the changes we made
102:04 - so i'm going to type git add
102:07 - package.json git add
102:09 - package lock.json and comment
102:14 - express session and connect flash
102:19 - now let's go back to our editor we're
102:21 - going to go to app.js to create an
102:24 - instance of passport so let's type let
102:28 - passport equals require
102:31 - passport we're also going to define the
102:34 - session so let
102:36 - session object equals
102:38 - require express
102:40 - session
102:42 - and let's go down below right after this
102:45 - line we're going to declare app dot use
102:49 - session
102:51 - we need to define a secret parameter for
102:53 - this let's just type our new secret for
102:56 - now and in the second line we're going
102:58 - to type app.use passport.initialize
103:04 - and finally app.use
103:06 - passport.session
103:08 - now each of these calls must be in this
103:11 - given order otherwise your application
103:13 - may not work because when app.js is
103:16 - processed it goes line by line to
103:19 - configure the app instance in a
103:21 - sequential order so that's why we need
103:23 - these three lines in this order
103:26 - now we're interested in setting up
103:28 - passport in a separate file than app.js
103:31 - in order not to clutter app.js with
103:33 - details of passport.js setup so for that
103:37 - before we create the app instance we're
103:39 - going to add one more line here we're
103:41 - going to type require
103:44 - dot slash passport setup and we're going
103:47 - to pass the passport object now let's
103:50 - save this file and create a separate
103:52 - file in our root directory called
103:55 - passport underscore setup.js and save
103:59 - now in passport setup.js we're going to
104:01 - start by defining an empty function
104:04 - that we're exporting from this file
104:07 - and we're passing the passport object to
104:10 - it as you might see here we're also
104:12 - calling the same function with this
104:14 - require statement and we're passing the
104:16 - passport instance we created a few lines
104:18 - earlier so let's go back to
104:20 - passport.setup now passport.js requires
104:22 - us to define a few well-defined api
104:25 - calls to function properly
104:27 - the first function is called serialize
104:29 - user and the second one is called this
104:31 - serialize user this stackoverflow page
104:33 - explains it quite well serialize user is
104:36 - used by passport.js to save a handle to
104:38 - the user object
104:40 - in this case it's the database id for
104:42 - the user
104:43 - it stands saved to a session variable
104:46 - and later on the serialized user will
104:48 - use this handle to retrieve the actual
104:50 - database object for the user
104:53 - user object is then assigned to the user
104:56 - key of the request object so that we can
104:58 - use it in our controllers or routes so
105:00 - let's go back to passport setup.js and
105:02 - define these functions
105:07 - for serialized user we're going to
105:09 - simply use the
105:11 - database id
105:14 - and for the serialized user we're going
105:16 - to query our database
105:20 - we'll pass the id to our user and then
105:22 - we're going to type
105:24 - models user find one
105:27 - where
105:28 - id is the id parameter
105:32 - and then
105:35 - we get the user object back
105:38 - if user is null
105:41 - it means
105:42 - there's an error so we're going to throw
105:45 - on error object
105:47 - wrong user id
105:49 - and else we're going to call done null
105:52 - user with the user object
105:55 - so we're almost done as a recap
105:57 - serialize user function determines which
106:00 - handle to the user object is to be saved
106:02 - in the session and then the serialized
106:05 - user will retrieve the user object using
106:08 - that handle
106:09 - now we need to define a strategy for
106:11 - passport.js to use to authenticate our
106:14 - users when they log into the application
106:17 - because we're going to use email and
106:18 - password as the method for
106:20 - authentication we're going to define
106:22 - what is known as a local strategy for
106:25 - passport to authenticate our users via
106:27 - email and password now let's go ahead
106:30 - and type
106:32 - let
106:32 - local strategy
106:35 - equals require
106:37 - passport local this is where this
106:39 - package comes into play and then we're
106:42 - going to type strategy
106:44 - now we need to tell passport.js that we
106:46 - will be using the local strategy for
106:48 - authentication for that we add a
106:49 - statement passport.use
106:52 - new local strategy
106:55 - local strategy will call its
106:57 - authentication function when there is a
106:59 - login form submitted via a post request
107:02 - so local strategy needs to know which
107:03 - fields in the submission contain the
107:05 - username and password for that there are
107:07 - two optional fields to define these
107:10 - username fields in our case it is called
107:12 - email
107:14 - and password field
107:17 - and in our case it is called password
107:20 - now if you go to login.pug you will see
107:23 - that the first input field is named as
107:25 - email which we will use as the username
107:28 - and the second one is named as password
107:31 - so when the local strategy accesses
107:33 - request body email it will consider that
107:36 - as the username and then when it
107:38 - accesses
107:39 - request body password it will assume
107:42 - that to be the password field now we
107:45 - need to define an authentication
107:47 - function where we access the database
107:49 - and show that there is indeed a user
107:52 - with this email address and the password
107:54 - provided we type function
107:57 - email
107:59 - password and done
108:01 - now this function will authenticate the
108:03 - parameters however we also need the
108:05 - request object here and in order for
108:08 - passport to pass us the request object
108:10 - as the first parameter we need to give
108:12 - it another option called
108:15 - passwreck
108:17 - call back
108:18 - true we're going to use this for error
108:21 - handling later on
108:22 - now let's define our function
108:25 - let's open our curly braces and type
108:28 - return models user find one
108:32 - where
108:33 - the email field is the
108:35 - email parameter and
108:38 - then we will receive a result which
108:40 - let's call
108:42 - as user and if this user
108:45 - is null
108:46 - it means we couldn't find the user so
108:48 - we're going to return an error
108:52 - message
108:53 - incorrect
108:55 - credentials
108:56 - and we need to add
108:58 - return done null
109:01 - false
109:02 - and we're going to type else if
109:05 - user.password is null or
109:08 - user that password
109:10 - is
109:11 - undefined
109:13 - rec
109:14 - flash
109:15 - message
109:17 - you must reset your password
109:20 - these wreck flash messages will be shown
109:22 - in the subsequent re-render of the page
109:25 - and we're also going to type return done
109:28 - null false this is another error case
109:31 - finally else if we're going to define a
109:34 - function that validates the password
109:36 - provided is correct so let's call that
109:39 - valid password we're going to define it
109:41 - shortly
109:43 - we're going to pass the user object and
109:45 - then the password provided in the login
109:47 - form
109:48 - and let's type rec
109:50 - flash
109:52 - message
109:55 - incorrect
109:56 - credentials and this will be entered if
110:00 - the password isn't valid so i'm going to
110:02 - add a not and here we're going to type
110:06 - return
110:07 - done null
110:09 - false so we have handled all the error
110:11 - cases and if we have a valid user we're
110:14 - going to return done
110:17 - null
110:18 - user
110:19 - there may be further errors other than
110:22 - incorrect credentials being provided and
110:24 - we will handle them with this
110:26 - catch statement in the end for example
110:29 - if there was a database error when
110:31 - accessing the user model that will be
110:32 - caught by the statement so we're going
110:35 - to type catch
110:36 - error
110:37 - and done
110:39 - error false
110:41 - now let's save this and let's go ahead
110:44 - and define the valid password function
110:48 - for password validation we need bcrypt
110:50 - library so let's type require decrypt
110:54 - actually for accessing the models the
110:57 - database we also need to define the
111:01 - models variable
111:03 - by typing require dot slash models
111:07 - and we're going to compare the past
111:10 - password versus the one in the database
111:13 - so let's type
111:15 - valid password
111:17 - equals function user password and then
111:21 - return bcrypt
111:24 - compare sync is a decrypt function we
111:27 - will pass
111:29 - the password in the login form versus
111:31 - the user.password field
111:34 - now the passwords contained in our
111:36 - database is a hash of the provided
111:39 - password so that we don't keep them as
111:41 - clear text so this function will also
111:43 - convert the password to a hash and
111:46 - compare the hash value to the one that's
111:48 - being stored in the database this way if
111:50 - the database was compromised the
111:52 - adversaries cannot access the clear text
111:55 - passwords but they only get access to
111:57 - the encrypted versions we're done with
111:59 - the implementation of our first passport
112:02 - login and signup strategy using the
112:05 - local strategy and let's go over the api
112:07 - calls again so we're providing passport
112:10 - with a handle to the user object which
112:13 - is to be saved in this session and then
112:16 - passport.js will use this handle to get
112:19 - the actual user object from the database
112:22 - we also define a local strategy where we
112:25 - tell passport.js what fields to use for
112:28 - the email and password fields when
112:30 - authenticating the user post request
112:33 - during authentication there may be
112:35 - various errors once the database is
112:37 - queried given the email and password
112:40 - fields there may be multiple
112:42 - authentication error cases one of them
112:45 - is that the incorrect username is
112:46 - provided the password field is not
112:48 - present or the password is simply not
112:51 - valid in such cases we return an
112:53 - authentication failed message back to
112:55 - the user
112:56 - in the successful case we pass the user
112:58 - object to the done callback and we also
113:01 - catch database or other internal server
113:04 - errors with a catch statement
113:07 - we use a valid password function call to
113:10 - compare the past clear text password
113:12 - with the hash that's stored in the
113:14 - database we're now ready to check in our
113:16 - changes so let's go back to our terminal
113:18 - and type git add app.js
113:21 - git add
113:23 - passport setup js and git commit a
113:27 - implement
113:28 - passport local
113:30 - alt strategy
113:32 - using email and
113:34 - password fields
113:38 - now that we have set up passport.js we
113:40 - can go ahead and use it in our sign up
113:42 - and login route so let's go and open up
113:44 - controller slash user.js in the signup
113:47 - handler we're going to create a new user
113:50 - by using the user model and then save it
113:52 - to our database so let's type
113:54 - const new user equals
113:57 - models dot user.build
114:01 - email
114:02 - rec body email and password we're going
114:06 - to use a function to generate the hash
114:08 - of the password so let's call this
114:10 - function
114:11 - generate
114:13 - hash
114:14 - and we're going to pass rec body
114:16 - password
114:18 - once we build the user object
114:21 - we're going to save it by typing return
114:24 - new user dot save and this is a promise
114:27 - so we're going to do then results
114:31 - and inside the body of this promise
114:33 - we're going to make a call to
114:34 - passport.js to authenticate the user
114:36 - after signup so let's call passport
114:40 - authenticate local since we are using
114:43 - the local strategy and then we're going
114:45 - to define a redirect route after the
114:48 - authentication so let's type
114:50 - success redirect
114:52 - slash
114:54 - failure redirect which is used upon the
114:57 - passport authenticate call failing we
114:59 - will call slash sign up and we're going
115:02 - to define a flash message failure flash
115:06 - true we're also going to pass the
115:08 - request response and next objects
115:12 - now in order to use the models object we
115:15 - need to first define let's models equals
115:18 - require
115:20 - dot dot models
115:23 - and let's define the generate hash
115:26 - function
115:27 - const
115:28 - generate hash
115:29 - equals
115:31 - function
115:32 - password
115:35 - and in the body we're going to use the
115:37 - bcrypt method hash sync so
115:40 - return
115:41 - be crypt
115:43 - sync
115:48 - decrypt
115:50 - can salt
115:52 - sync
115:54 - 8
115:55 - and null
115:56 - so generate hash function will take the
115:59 - password and create a salted password
116:02 - what that means is we're going to create
116:04 - a hash of this password and save the
116:06 - hash in the database now let's also
116:08 - define the decrypt object let's be crypt
116:11 - equals require bcrypt
116:16 - let's also define passport
116:19 - equals require
116:22 - passport we also need to set up passport
116:24 - so let's type const
116:26 - my passport equals require dot dot
116:29 - passport setup
116:31 - and we're passing the passport instance
116:34 - we also will need flash so let's type
116:36 - let flash equals require
116:40 - connect flash you might be wondering
116:42 - what's flash stands for flash allows us
116:45 - to display an error message on the page
116:48 - that's going to be rendered so it's a
116:50 - one-time message that we can send to our
116:52 - clients
116:54 - now let's save this file and run our
116:56 - application and verify that
116:59 - the signup works i'm going to run the
117:00 - application go back to the browser and
117:02 - type slash sign up
117:05 - let's type user at email.com and then a
117:08 - password and press sign up
117:12 - now that we've been redirected to the
117:14 - slash route it seems to be working let's
117:16 - go and verify this by going to our
117:18 - terminal
117:19 - here we're inserting a new user to the
117:22 - database with the email that i have just
117:24 - typed we have also started a new session
117:27 - with our application
117:28 - now let's go back to our editor and
117:31 - implement the login route in login route
117:33 - we authenticate a user and initiate a
117:36 - session with our application
117:38 - for that we're going to do the identical
117:40 - action as we did in sign up with
117:42 - passport so i'm going to copy and paste
117:44 - that code
117:48 - the only difference being here is that
117:50 - upon failure we're going to be
117:51 - redirected to the login route
117:55 - let's check the result by going back to
117:56 - our browser
117:58 - and let's type slash login
118:01 - let's type
118:03 - user at email.com and then the password
118:06 - and i'm going to click on login
118:09 - and i'm redirected to the slash route
118:11 - which means the login was successful as
118:13 - well and i've initiated a session with
118:15 - my application
118:17 - now let's go back to our editor
118:19 - routes slash index.js and for
118:23 - completeness we're also going to define
118:25 - a logout route
118:27 - so let's type router.post
118:32 - slash logout
118:34 - user.logout
118:36 - and router.get
118:39 - logout
118:41 - user.logout
118:43 - for both requests we're going to use the
118:45 - same method
118:47 - now let's go back to controller's
118:48 - user.js and define a new method
118:51 - called logout
119:02 - we can destroy our session by making a
119:05 - call to rec
119:06 - logout
119:08 - and rec
119:10 - session dot destroy
119:13 - and we will then redirect the user with
119:15 - rest.redirect
119:17 - back to the root route
119:21 - now it will help us to display these
119:23 - routes as links in our navigation bar
119:25 - also we want to know whether we have a
119:27 - user session or not so let's go to views
119:30 - slash navbar.pug to implement this
119:34 - i'm going to paste the snippet that i
119:35 - prepared earlier
119:37 - here if we are passed a user variable
119:39 - that means we have an active session
119:41 - going on and we display that by showing
119:44 - hello user email on the navbar we also
119:47 - have links to logouts login and signup
119:49 - routes
119:50 - now for this user variable to be passed
119:53 - we need to define it as an input to the
119:55 - navbar mixin so let's type user and save
119:58 - this file
119:59 - and navbar is used from the landing page
120:01 - so let's go to view slash landing.pug
120:05 - and pass the user variable to the navbar
120:08 - mixin
120:09 - let's save this file and now let's go to
120:11 - controllers slash landing.js
120:14 - we're going to pass the user variable to
120:17 - the render function so let's type user
120:20 - rec dot user
120:22 - if you recall passport.js will populate
120:25 - this rec.user field with the user object
120:27 - if there is an active session going on
120:30 - let's go to our browser window to test
120:32 - the login and logout routes
120:34 - let's go to login and type
120:36 - user ads
120:38 - email.com password and login
120:43 - as you can see we have logged in and we
120:45 - can see the user information here
120:47 - and let's click on log out
120:50 - and now the user session is destroyed so
120:52 - we don't see the user email address here
120:55 - anymore
120:56 - now let's go back to our terminal and
120:58 - check in all the changes we made if we
120:59 - type git commit dash a it will include
121:02 - all the files that have been modified
121:04 - let's type implemented
121:07 - sign up login and logout routes
121:12 - using
121:13 - passport.js
121:17 - in this tutorial we're going to learn
121:19 - how to validate form input when a form
121:21 - is posted to our server and how to
121:23 - re-render the page with error messages
121:25 - when there are errors
121:28 - as a recap for how we handle form
121:30 - submissions let's open up our editor and
121:32 - go to routes
121:34 - index.js
121:36 - here we have defined a post request
121:39 - handler for sign up path using this
121:42 - user.signup handler so let's open up
121:44 - that handler by going to controller
121:46 - slash user.js
121:49 - if we look at the signup post handler we
121:51 - see that we create a new user object
121:53 - without validating the input we receive
121:55 - from the form reg body email and recbody
121:58 - password fields are used directly to
122:00 - create the user and save to the database
122:04 - we're going to change that and validate
122:06 - these input fields first before saving
122:08 - the data and for that we're going to
122:09 - define a validator function for our form
122:12 - input so let's get started by installing
122:14 - the validator package by typing npm
122:17 - install
122:19 - validator we are also going to use a
122:21 - package called low dash so let's add
122:23 - that as well and type dash dash save and
122:26 - press enter
122:28 - let's commit our package.json just in
122:30 - case we made any changes so i'm going to
122:32 - type git commit
122:33 - package.json and package log.json
122:37 - okay
122:39 - install validator and lodash
122:44 - now let's go back to our editor and in
122:46 - the root directory my app let's create a
122:48 - new folder called
122:50 - validators and save that
122:53 - and we're going to create a new file
122:55 - called
122:58 - signup.js here let's type let validator
123:02 - equals require
123:04 - validator
123:06 - save that
123:07 - and i'm going to create a local function
123:10 - called validate create user fields
123:14 - function this is going to receive an
123:17 - errors object that is empty and we will
123:19 - populate it as we find errors in each
123:21 - form input field
123:23 - and we're going to receive the form
123:24 - input fields with the rec parameter
123:27 - which is the request object so let's
123:29 - type if
123:30 - validator
123:31 - is email
123:33 - rec body
123:34 - email here this mark stands for not so
123:38 - if this input is not an email then
123:43 - we will populate the
123:44 - errors object with the key email with a
123:48 - message please use a valid email so
123:52 - we're going to go over each input field
123:55 - like this with an if statement so the
123:56 - next one for us is if
123:59 - not
124:00 - validator
124:01 - is ascii we're requiring that we want
124:05 - the password to be made out of ascii
124:07 - characters and we're going to pass the
124:09 - password with rec.body.password
124:12 - if this doesn't hold true then we're
124:14 - going to populate the errors object with
124:17 - the password key to be
124:20 - invalid characters in password
124:23 - please try another one
124:25 - we also want to enforce a password
124:28 - length so let's type if not
124:30 - validator is length track body password
124:35 - here we pass a length range object with
124:39 - minimum of 8 characters and maximum of
124:42 - 25 then again we're going to populate
124:44 - the errors for the password key
124:47 - please ensure that your password has a
124:51 - minimum of 8 characters
124:54 - now we're done with this function
124:56 - because the errors object was passed
124:58 - into this function it will be modified
125:00 - in place so we do not need to return the
125:03 - errors object
125:05 - now other than this basic string
125:06 - validation we need to make sure that
125:08 - there isn't an existing user but the
125:10 - same email as the address provided in
125:12 - this email form field for that we need
125:14 - to query the database so let's define a
125:17 - wrapper function export
125:18 - validate user
125:21 - function pairs rec
125:24 - let's type return
125:26 - models user find one
125:29 - where
125:31 - email is wreck body email
125:35 - and then
125:37 - we are going to get value u
125:40 - if
125:41 - u is not equal to
125:43 - null
125:46 - then
125:48 - we're going to populate the email key of
125:50 - the errors object email is already in
125:53 - use please login or reset your password
125:59 - now i need to introduce you a new
126:01 - concept on program execution
126:04 - when we define the body for validate
126:06 - user where we query the database this is
126:08 - an asynchronous piece of code so it will
126:11 - execute sometime in the future and we
126:13 - will get the results also sometime in
126:15 - the future
126:16 - and this first portion we defined the
126:18 - validate create user fields function is
126:21 - a synchronous piece of code which means
126:24 - each of these statements will execute
126:26 - sequentially
126:27 - now in order to validate the form fields
126:31 - we need both this function which is
126:34 - synchronous and this function which is
126:37 - asynchronous
126:38 - and we need to mix the two together
126:40 - for that we need to use a concept called
126:43 - promise and make the entire body
126:46 - asynchronous we're going to cover
126:48 - promises in the future in more detail
126:50 - but for the time being what you should
126:52 - know as a recap is that this piece of
126:54 - code is asynchronous and this piece is
126:57 - synchronous and in order to make use of
127:00 - both in a single function we need to
127:03 - define a promise which wraps the entire
127:06 - code in an asynchronous body so for that
127:09 - let's type
127:11 - return new
127:12 - promise
127:13 - function
127:14 - resolve
127:16 - reject
127:18 - and we're going to create the promise
127:20 - body let's cut this piece paste it here
127:23 - and indent it inside the promise and
127:25 - let's make a call to validate
127:28 - create user fields errors rec
127:32 - and we will return the errors variable
127:34 - in resolve
127:36 - errors
127:37 - and let's not forget to include the
127:39 - models variable so let's go to the top
127:41 - and type let models equals require dot
127:45 - dot slash models now let's save this
127:48 - file
127:48 - now let's go back to controller slash
127:51 - user.js and import validate user so
127:54 - let's type const
127:56 - validate user equals
127:59 - require
128:00 - dot dot validators slash signup
128:05 - now let's go down to the signup handler
128:08 - and declare a new variable let errors
128:11 - equals an empty object and we're going
128:14 - to call return
128:16 - validate user
128:18 - errors and we're going to pass the rec
128:20 - object that contains the input fields to
128:23 - be validated so let's move on and type
128:25 - then
128:26 - errors which is going to be the result
128:28 - we get from validate user
128:31 - and we're going to check whether the
128:32 - errors variable is populated with any
128:35 - values so let's type if
128:38 - not
128:38 - is empty errors which means
128:41 - the errors object has some values we're
128:43 - going to
128:44 - call a new method
128:47 - rerender sign up
128:49 - and we will re-render the form just as
128:52 - we will render the form for the first
128:54 - time using the show sign-up ender except
128:56 - we're going to display the error
128:58 - messages that we have populated during
129:00 - the validate user call
129:02 - so let's add the errors variable here
129:05 - errors and we're also going to pass the
129:08 - usual wreck res and next objects now
129:12 - this case covers the case where we have
129:14 - errors on the form and we will handle
129:16 - this successful case here as well so
129:18 - let's type else and inside the else body
129:21 - let's cut and paste rest of the code
129:24 - and let's indent it
129:26 - so this means if there is an error we're
129:28 - going to re-render the form and if not
129:30 - we're going to save the data to the
129:32 - database
129:33 - there's one more thing we forgot this is
129:35 - empty function is a call that's been
129:38 - provided by the law dash library we just
129:39 - installed so we need to type
129:42 - const is
129:44 - empty
129:45 - equals require
129:47 - low dash
129:49 - now is a good time to define our
129:51 - rerender signup function it's going to
129:53 - be identical to show sign up with a few
129:55 - differences so let's copy and paste show
129:58 - sign up and we're going to make this a
130:00 - local function so let's type const re
130:04 - render sign up
130:06 - now even though re-render sign up looks
130:08 - like a request handler such as show sign
130:11 - up it's actually just a function call so
130:13 - we're free to modify its function
130:15 - signature with the order of parameters
130:17 - being passed normally in express.js the
130:20 - request handlers have a particular order
130:21 - in their parameters in particular the
130:24 - request response and next objects are
130:26 - passed in that order
130:28 - so
130:29 - we render sign up is called from the
130:32 - sign up handler at this point
130:34 - and we can pass the errors object as its
130:37 - first parameter and we're then going to
130:40 - pass that to the errors key so that
130:42 - errors can be displayed on the form when
130:45 - the page is re-rendered
130:47 - we also have another field called form
130:49 - data and form data is a name that we
130:51 - made up in particular for
130:53 - when there are errors on a form when we
130:56 - re-render that page we use
130:59 - form data to pass back all the input
131:01 - fields that have been modified by the
131:03 - user
131:04 - so that let's say when there are errors
131:07 - the user does not have to re-enter the
131:10 - same information to the other form
131:12 - fields again and again on each time the
131:14 - form is re-rendered so we save the user
131:17 - a time by passing back
131:19 - the data that's been entered already in
131:21 - a previous submission so in order to
131:24 - pass that data back to form data key
131:27 - we are going to use rec dot body if you
131:31 - recall if we go down to the sign up
131:33 - handler
131:35 - when the form is submitted to us we have
131:38 - all the form input fields available to
131:40 - us in rec.body object with the keys
131:43 - corresponding to the input names such as
131:46 - email and password so by passing back
131:51 - rec.body after the submission
131:54 - we are effectively passing back all the
131:55 - input fields that have been
131:57 - submitted to us on the form submission
132:00 - so we're passing rec.body back in form
132:02 - of the key form data
132:04 - now if you recall show sign up is using
132:07 - user slash sign up view and we're using
132:10 - the same
132:11 - view in re-render sign up as well so
132:14 - we're going to modify the sign up view
132:16 - to cater for both cases of the showing
132:19 - the form for the first time and also
132:21 - re-rendering the form with errors and
132:23 - existing form information
132:26 - so let's go ahead and open up views
132:28 - slash
132:29 - user slash signup.pug to modify it and
132:33 - to use form data and errors fields
132:36 - now let's take a look at the first input
132:38 - field with the name email
132:40 - we can pass back existing values on an
132:42 - input field using the value property so
132:45 - here for the value property we're going
132:46 - to type form data dot email we could
132:50 - potentially populate the value property
132:52 - of the password field as well but we're
132:53 - not going to do that as password is a
132:55 - sensitive field so let's add error
132:58 - message information now and let's create
133:00 - a new line under the first input and
133:03 - let's type if errors
133:05 - and
133:06 - errors dot email which is the name for
133:09 - the input field
133:11 - we're going to type p dot small dot text
133:14 - danger these are classes from bootstrap
133:18 - and we're going to finally display the
133:19 - error message errors.email
133:22 - if you recall we create these messages
133:24 - in the validator function let's do the
133:27 - same for the password field so i'm going
133:29 - to create a new line under the password
133:31 - input field and let's type if errors and
133:34 - then
133:35 - errors dot password
133:37 - p dot small dot text danger
133:41 - errors.password
133:43 - now let's save our file and we should be
133:46 - ready to try what we've done so far now
133:49 - let's go back to our browser window and
133:51 - go to the slash signup routes
133:54 - and i'm going to type user at
133:56 - email.com we know that we have a user
133:59 - already with this email address so let's
134:01 - see what happens when we include that
134:03 - and for the password i'm going to type
134:05 - 4 character password which should also
134:07 - trigger an error so if i click on sign
134:10 - up i do get the form re-rendered with
134:12 - the right error messages notice how the
134:15 - validator has both detected that the
134:17 - email is already in use we've done this
134:19 - with the database query and the password
134:22 - length was also detected to be not valid
134:27 - let's check in all the changes we made
134:30 - it add
134:32 - validators we've added a new directory
134:34 - validators
134:36 - and we've implemented
134:39 - error handling and form validation for
134:43 - sign up routes
134:46 - in this tutorial we're going to learn
134:48 - how to implement access control in our
134:50 - application also we will learn the
134:52 - concept of a middleware and how to use
134:55 - it in express.js
134:57 - the problem with our application in its
134:59 - current form is that the leads link here
135:01 - is open to public anybody can click on
135:03 - this link view our links or edit them
135:06 - and we're going to fix that so let's
135:08 - open up our editor and go to routes
135:11 - slash index.js
135:14 - in express.js a significant property of
135:16 - route definitions is that we can
135:18 - introduce a sequence or a chain of
135:21 - function calls before we make a call to
135:23 - the final handler for that route
135:26 - let me show what i mean with an example
135:27 - i'm going to introduce a new call right
135:30 - after the path component called know
135:33 - and place a comma and let's define north
135:36 - with const no equals function
135:39 - rec res next and an empty body
135:43 - as you recall the handlers in express.js
135:45 - have this particular function signature
135:47 - where there is first a rec object and
135:49 - then a res object and the next object
135:51 - and we've never made use of this next
135:53 - object here so we're going to make a
135:55 - call to next
135:58 - and leave it at that
136:00 - what this does is that when the slash
136:02 - leads path is matched the first function
136:05 - to be called is going to be know
136:07 - and no op will transfer execution to the
136:10 - next one in line which is show leads and
136:12 - the way we do that is by making a call
136:15 - to next
136:16 - i could potentially add additional know
136:18 - up calls here
136:19 - and it will be all the same because no
136:21 - op does nothing but transfer the control
136:24 - of execution to the next one in line in
136:26 - a route definition we have the
136:28 - capability to add as many calls as we
136:31 - need to any
136:32 - separate handlers before we call the
136:35 - final handler and this gives us a lot of
136:37 - flexibility for adding additional
136:39 - functionality to each route and we're
136:41 - going to see one example shortly
136:44 - before we move on i want to demonstrate
136:45 - you that these no op calls indeed have
136:47 - no effect and we are able to call show
136:49 - leads as normal so let's go to our
136:51 - browser window and click on the leads
136:53 - link
136:54 - and we're still able to see the leads as
136:56 - usual
136:58 - now let's go back to our editor window
137:01 - if you notice these knob calls are in
137:04 - the middle when handling the request for
137:05 - this route
137:06 - that's why they're called middleware
137:08 - middleware may sound like a grand term
137:11 - that does something complex but a
137:12 - middleware can merely be
137:14 - a simple function call such as this knob
137:17 - function
137:18 - and let's remember that in a middleware
137:20 - function we always need to make a call
137:22 - to next in order to proceed the
137:24 - execution to the next one in line and
137:26 - make sure that the final handler gets
137:28 - called
137:30 - now we're going to define a really basic
137:32 - middleware first let's delete the snob
137:34 - call and delete these calls in the
137:36 - middle
137:38 - and let's create a new folder called
137:40 - middleware in our root directory
137:44 - and we're going to create a new file
137:47 - called
137:49 - has auth.js
137:51 - let's type let create error equals
137:55 - require
137:56 - http errors create error function allows
138:00 - us to create an error object with an
138:01 - error message and we've already made use
138:03 - of this in app.js and it comes as
138:06 - standard with the vodila express.js
138:09 - installation so let's go back
138:11 - so let's define a new method exports is
138:15 - logged in equals function rec
138:18 - res
138:20 - next
138:21 - if
138:22 - rec.user
138:24 - then we will call next
138:26 - the presence of rek.user means that
138:29 - passport.js has authenticated the user
138:32 - there's a session and there's a logged
138:34 - in user who is requesting the page so
138:36 - we're allowed to go to the next step of
138:38 - handling that page and else we're going
138:41 - to create the error
138:44 - create error 404 and we're going to give
138:47 - the message
138:48 - page does not
138:50 - exist now there's one thing i need to
138:53 - mention about how this next works in the
138:55 - successful case we're calling next to
138:57 - move on to the next handler but in the
138:59 - error case we're also calling next so
139:01 - how come we're showing an error message
139:03 - when we call next which should normally
139:05 - call the next
139:07 - handler for this route well the answer
139:09 - is in the express documentation if you
139:12 - pass anything to next function
139:15 - express regards the current request as
139:18 - being an error and it will skip any
139:20 - remaining non-error handling routing and
139:23 - middleware functions
139:25 - what that means is we're going to skip
139:27 - all the route handlers that are coming
139:29 - next and we will go straight to our
139:31 - error handler using the object we're
139:33 - passing here and that error handler is
139:36 - in app.js if you scroll down below you
139:38 - will see this
139:40 - error handler already defined for us
139:43 - when we pass an object then that means
139:45 - that this error variable will have that
139:48 - object being passed from next and we're
139:50 - going to display an error message and
139:53 - render the error page
139:56 - so that describes how next will work in
139:59 - both cases of a success and error let's
140:01 - save this file and go to index.js under
140:05 - routes folder and we're going to import
140:07 - this function we have just defined so
140:09 - let's type let is logged in
140:13 - equals require
140:15 - dot dot middleware slash has auth.js
140:20 - and we're going to use it's logged in in
140:22 - the leads route as our middleware so
140:25 - let's type is logged
140:27 - in and then a comma let's save this file
140:29 - and try our application again so i'm
140:32 - logged out so and i'm going to reload
140:34 - this page and i'm going to click on
140:36 - leads let's see what happens
140:39 - indeed our middleware has found that the
140:41 - page does not exist and generated a 404
140:44 - error
140:46 - while we are at it i want to beautify
140:48 - our error page as well so let's go back
140:50 - to our editor and open up views slash
140:53 - error.pug and i'm going to copy and
140:55 - paste code that i prepared earlier for
140:57 - this we're using a few bootstrap classes
141:00 - let's save and reload this page
141:04 - now this looks better
141:05 - just to note we're able to see exactly
141:07 - what happened in the application and
141:09 - that's because the application is
141:11 - running in debug mode if we were running
141:13 - in the production mode we wouldn't see
141:15 - this error stack
141:16 - now just to demonstrate you the other
141:18 - case let's go back to the landing page
141:21 - and log in i'm going to type user at
141:23 - email.com and sign in now if i click on
141:27 - leads i'm able to still see the leads
141:29 - now every user has access to our leads
141:32 - table so we're going to take our access
141:34 - control concept a little further and
141:36 - only allow a particular user to have
141:39 - access to these pages
141:41 - so let's go back to our editor and
141:43 - create a new migration under migrations
141:47 - let's create a new file
141:49 - with today's date
141:51 - we're going to add a new field called is
141:53 - admin to the users table i'm going to
141:56 - copy and paste code that i prepared for
141:59 - this earlier
142:00 - and let's go over it quickly so what
142:02 - we're doing here is creating an easy
142:04 - admin field which is a boolean and when
142:07 - it's true we will consider the user as
142:09 - an admin of our application and here we
142:12 - have the up method for the migration
142:14 - where we add the column to our table and
142:17 - the down method which will remove this
142:19 - column from our table called users let's
142:22 - save this file and go back to our
142:24 - terminal and type
142:26 - sqlize
142:28 - db
142:29 - migrate
142:30 - so we've successfully migrated our table
142:33 - and added an ease admin boolean field to
142:35 - our users table now let's go back to our
142:38 - editor i'm going to make a modification
142:40 - in the way we create new users
142:42 - let's go to controller slash user.js and
142:45 - the signup handler
142:47 - now if there are no users in our
142:50 - application with an admin flag as true
142:53 - we're going to create the next user as
142:55 - an admin and for that i'm going to
142:57 - modify the sign up handler
143:00 - let's type
143:04 - return
143:05 - models
143:07 - user
143:08 - find one
143:11 - where
143:18 - is admin
143:20 - is
143:20 - true
143:23 - then
143:25 - user
143:27 - and if
143:28 - user exists
143:30 - that means user not equal to null
143:37 - then we're going to craft the user row
143:40 - as normal so let's cut and paste
143:43 - the way we create the first user
143:47 - and else we're going to
143:49 - create the user
143:53 - with the field is admin equals true and
143:56 - for this to work we need to
143:58 - first declare
144:01 - new user outside
144:05 - use the new user variable and finally
144:08 - we're going to save the user back to our
144:10 - database so let's place this after the
144:12 - else statement
144:14 - let's save this file and
144:16 - check that our application is running
144:19 - correctly what we haven't done is update
144:21 - our model under models with the is admin
144:24 - field so let's create an is admin field
144:27 - under here at the bottom i'm going to
144:29 - copy and paste code that i prepared for
144:31 - this earlier so ease admin is a boolean
144:34 - and we allow it to be
144:36 - null
144:37 - because the existing users won't have
144:39 - this field set let's save our model file
144:42 - and go back to our browser and let's
144:45 - sign up as a new user
144:48 - and i'm going to type a password for
144:49 - that and press sign up now we have admin
144:52 - at email.com signed in and let's go back
144:55 - to our terminal to verify that this user
144:57 - was indeed created with is admin as true
145:02 - insert into users
145:04 - first second third and fourth field is
145:07 - is admin and i can confirm that admin at
145:10 - email.com is
145:12 - confirmed as an admin in our application
145:15 - now we're ready to implement the is
145:17 - admin check in our middleware so let's
145:19 - go back to our editor and go to
145:22 - middleware has alt dot js
145:25 - and i'm going to define a new function
145:27 - here exports dot has auth
145:30 - equals
145:31 - function
145:32 - request next
145:34 - and if rec user is not null and and
145:39 - rec user dot is admin
145:43 - is true then we're going to call next as
145:46 - usual and allow access and else we're
145:49 - going to create an error as before next
145:51 - create error 404
145:55 - page does not exist let's save this and
145:58 - let's go back to routes slash index.js
146:01 - to import this new method as auth
146:05 - and we're going to replace the is logged
146:07 - in middleware with this one so let's
146:09 - type as off and save this and open up
146:12 - our browser and let's reload this page
146:15 - and i have the leads link here if i
146:17 - click on this link i'm still able to see
146:19 - the leads and i'm going to log out now
146:21 - and log in as another user that i just
146:24 - signed up as which is no admin at
146:26 - email.com
146:29 - and login and if i now click on the
146:31 - leads link i'm redirected to the page
146:34 - does not exist error page so this
146:36 - effectively demonstrates our use of the
146:39 - has out middleware in order to control
146:42 - access to certain pages on our
146:44 - application we now want to extend this
146:46 - to other routes where the leads are
146:48 - edited and accessed so we're going to
146:50 - add the has out middleware to other
146:53 - routes as well so let's type has alt
146:56 - for show lead
146:58 - as out for the edit lead
147:01 - and the rest
147:05 - now all of our routes are protected by
147:07 - the has out middleware except the first
147:09 - one which is for visitors and the
147:12 - landing page now let's check in our
147:14 - changes let's type git add
147:17 - middleware git add migrations git commit
147:21 - a
147:21 - and implement
147:25 - has auth middleware
147:27 - and is admin flag
147:30 - lead routes are protected by as auth
147:35 - and only the admin user has access to
147:39 - them
147:42 - i hope you enjoyed these tutorials my
147:44 - name is bahadur i'm a systems software
147:46 - engineer my background is in low level
147:48 - software and operating systems if you
147:51 - enjoy these tutorials and want to be
147:52 - notified of similar content in the
147:54 - future you can go to this website and
147:57 - join our community here if you scroll
148:00 - down below you will see a button to join
148:02 - it's free thank you for watching these
148:05 - tutorials and i hope to see you in
148:07 - another tutorial in the future
148:12 - you