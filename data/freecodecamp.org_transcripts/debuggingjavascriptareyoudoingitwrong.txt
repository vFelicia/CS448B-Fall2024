00:00 - whenever your javascript doesn't work
00:02 - you probably resort to scattering
00:04 - console.logs around your code and
00:06 - checking the console but this can be a
00:08 - messy and frustrating way to debug your
00:11 - javascript in this video i'm going to
00:13 - teach you a better way
00:18 - so i have this web app here it's
00:21 - actually the main project from my learn
00:23 - react and redux from beginner to paid
00:26 - professional course so it's a react app
00:28 - but that's completely irrelevant
00:30 - what i'm going to show you will work for
00:32 - any frontend javascript whether you're
00:34 - using a framework or not
00:37 - anyway this app is broken if we do a
00:39 - search the thumbnails all come back
00:42 - broken
00:43 - so what do we do so most people will do
00:46 - this
00:47 - they'll go to the part of the code where
00:49 - we've got the function that processes
00:51 - the search results and do a console.log
00:53 - on the results
00:56 - then go back to the browser
00:58 - and reload it
01:02 - then you want to bring up the console
01:04 - and we want to check the results that
01:06 - we've outputted
01:17 - and yeah they all look fine to us so the
01:20 - next step is usually to add another
01:22 - console.log somewhere else
01:24 - now this way of debugging does work but
01:27 - it is a bit cumbersome constantly adding
01:29 - and removing console.logs all over the
01:31 - place
01:33 - i'm going to show you a slightly nicer
01:35 - way
01:37 - in the code we simply remove the
01:39 - console.log
01:41 - and in its place we put the word
01:43 - debugger
01:44 - now let's go back to the browser and see
01:46 - what that does
01:48 - so we reload in the browser and you're
01:51 - going to need to make sure the developer
01:53 - tools are open all this won't work at
01:55 - all
01:56 - we perform our search again
02:00 - now when the code hits the debugger
02:02 - statement the browser stops the
02:04 - javascript execution is paused at this
02:07 - point we call this a breakpoint we can
02:10 - now do some really cool things
02:13 - we can inspect the current state of the
02:15 - code
02:16 - we can see exactly where we are in the
02:18 - code we can mouse over variables and it
02:20 - shows their current values
02:24 - if you go down here we can see a call
02:26 - stack showing all of the functions that
02:28 - were called to get to this point
02:31 - over here we can see all of the variable
02:34 - scopes we've got available at the
02:35 - current point and see all of the
02:36 - variables in each scope and even their
02:39 - current values
02:42 - we can even add new breakpoints by
02:44 - clicking like this and a blue arrow
02:46 - comes up then we press the blue arrow
02:48 - down here and this moves on to the next
02:51 - break point or just to the end of the
02:53 - code if there isn't one and you can just
02:55 - remove the breakpoint by clicking it
02:57 - again
02:59 - you can press this down arrow here to
03:01 - skip into functions or this right facing
03:05 - arrow here to step through the code one
03:08 - line at a time
03:11 - so this goes into another function call
03:18 - and somewhere down here
03:20 - we've got the valley we want we thought
03:22 - it was a string and this is why we've
03:24 - got a problem but it's actually an
03:25 - object and we want the url property
03:28 - which is a string
03:32 - and the debugger gives us the exact line
03:34 - of code we need to go and fix it so we
03:37 - go back to our code we know the exact
03:39 - line number where we've got the problem
03:41 - because we saw it in the debugger and
03:43 - now we just fix it by adding dot url
03:47 - and of course we go down and we remove
03:49 - the debugger statement
03:52 - so in the browser again we reload
03:56 - perform another search
03:58 - and now we get all our thumbnails
04:00 - everything works as expected so there
04:03 - you have it
04:04 - breakpoints are a more professional
04:06 - faster and hassle-free way to debug your
04:09 - javascript code