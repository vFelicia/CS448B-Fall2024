00:00 - so i'm gonna be talking about logging
00:02 - obviously um
00:04 - so but first a couple of apologies
00:06 - um the first apology is to the guy with
00:08 - the camera i'm gonna be moving around a
00:10 - lot um and the second apology is to you
00:13 - guys
00:14 - because i was expecting to be
00:18 - i was expecting to be doing this talk
00:21 - preparing the talk over the last bank
00:23 - holiday weekend you know finishing it up
00:25 - i ended up going sailing instead on the
00:27 - norfolk broads so i spent the whole time
00:30 - in a boat
00:31 - in the ring
00:32 - which you'll hear about in a second
00:34 - so
00:35 - i'm going to switch the first slide so
00:36 - the camera can sync up
00:38 - and this is kind of an interactive first
00:40 - session
00:42 - put your hands up if you talk about
00:44 - logging in your code style guides
00:46 - at work
00:48 - okay inverse put your hand up if you do
00:52 - sorry if you don't if you don't okay
00:53 - fine yeah
00:55 - so
00:56 - people don't tend to talk about logging
00:58 - very much which is weird considering
01:00 - it's like one of the oldest things that
01:01 - we do in software back when we logged to
01:04 - pieces of paper before i was born
01:05 - probably
01:06 - so
01:08 - we don't talk about logging in our style
01:10 - guides
01:12 - has anybody ever been taught logging
01:14 - best practices
01:16 - okay put your hand up if you have not
01:18 - been taught logging best practices
01:20 - no
01:21 - put your hand up if you've ever thought
01:23 - about logging best practices okay cool
01:27 - this is awesome a few people
01:30 - has anybody ever tested their logs
01:34 - put your hand up tested your logs
01:37 - nice tested javascript blogs
01:41 - okay
01:43 - so my name's joseph roof
01:45 - i am at jreav00 on twitter
01:49 - at joe on the slack group for this
01:52 - for this kind of community um if you
01:54 - want my details you can go to
01:56 - joe.contactme.io
01:58 - and the slides should you want to find
02:00 - them are at that link
02:02 - take a picture now if you want this
02:04 - slide will also be at the end
02:06 - so
02:07 - log books this is kind of coming into
02:09 - the sailing thing log books are really
02:11 - really cool because we've been doing
02:12 - this for ages right
02:15 - people on boats have been sitting down
02:17 - every hour when they're out at sea they
02:19 - say this is our heading when i'm writing
02:22 - this log this is what the wind is like
02:24 - you know standard stuff about boats
02:28 - and that kind of gets locked in a box
02:29 - which hopefully should the ship sink
02:32 - somebody else can come along and find it
02:34 - the floating box that's kind of
02:35 - somewhere on the sea they know what the
02:37 - ship is
02:38 - they know where they were when it all
02:40 - went wrong they know what the conditions
02:42 - were and potentially you know they can
02:44 - actually diagnose the exact reason this
02:46 - ship sunk in the middle of the night
02:49 - somewhere you know and they also know
02:50 - what's on it so
02:52 - is it worth going and looking for it and
02:54 - finding all the hidden treasure on at
02:55 - the bottom of the sea
02:56 - um but also is it worth
02:59 - sending out a rescue party was it just
03:00 - one person and
03:02 - you know this log book is being found 20
03:04 - years later
03:07 - so
03:07 - when i went sailing
03:09 - the guys at the boatyard where i rented
03:10 - the boat they know me
03:12 - i've been there for a while
03:14 - they said since you've had last had this
03:16 - boat these are the things we've changed
03:18 - the bilge washers so the bilge is
03:21 - the
03:22 - bit of water kind of underneath the
03:23 - floor so there's a little kind of it's
03:25 - called the bilge a little bit of air
03:27 - that water can go into and
03:29 - if that gets too full water starts
03:31 - coming up through the floor and you
03:33 - start to sink basically um but generally
03:35 - boats are always slowly sinking and we
03:37 - have little pumps that take the water
03:39 - out of the boat
03:41 - they also change the countertops lovely
03:42 - we've got these nice granite looking
03:44 - countertops now which is brilliant they
03:46 - changed the water heater which is cool
03:48 - because now we get hot water
03:50 - and they changed the engine they also
03:52 - changed a bunch of batteries and stuff
03:55 - so they said to me
03:57 - seeing as we know you and seeing as all
03:59 - this stuff's new when you're the first
04:00 - hire of the year which at the time i
04:01 - thought was great now i know it's not
04:04 - um seeing as you're the first time of
04:05 - the year the first one to use all of
04:07 - this cool new stuff could you keep a log
04:09 - of the bilge pump how long do you hold
04:11 - the build pump for
04:13 - so
04:14 - the whole holiday went really really
04:16 - well i got back on
04:18 - monday evening
04:20 - except the countertop fell off and broke
04:22 - four bottles of beer
04:24 - the beer from the bottles then went into
04:26 - the pilg
04:27 - the water heater used up all of our
04:29 - water
04:30 - when it shouldn't have and put all the
04:32 - excess water into the bilge
04:34 - the engine died which was fun
04:36 - in the middle of nowhere
04:38 - and then it rained on stop
04:40 - and does anyone know where the rain goes
04:41 - in a boat
04:42 - say it out loud
04:45 - into the bilge exactly into the bilge
04:49 - so this was me
04:51 - in the rain with a cup of coffee it's
04:53 - kind of okay
04:55 - um so now let's talk about javascript
04:56 - logging because that's why we're all
04:57 - here right or that's why i'm here at
04:59 - least javascript logging is cool because
05:02 - it's kind of
05:04 - not done very much
05:06 - but there's loads of kind of prior art
05:08 - so
05:08 - us javascript developers and lots of
05:10 - developers have a really really nasty
05:13 - habit
05:14 - we tend to reinvent the wheel over and
05:16 - over again has anyone heard of web
05:18 - workers
05:19 - right that's threading accidentally
05:21 - reinvented badly
05:23 - or worklets which is
05:25 - reinventing the um the actor model but
05:29 - without having the name so you can't
05:30 - google what it is
05:32 - um
05:33 - but kind of
05:35 - the time when i had the red pill you
05:37 - know i you know matrix style i started
05:39 - to actually think about logging it was
05:41 - when i was talking to a friend of mine
05:42 - julian who's at the back on his phone um
05:46 - so he's
05:47 - doing a lot of work in analytics and
05:50 - logging software um a lot of android
05:52 - stuff and non-javascript stuff but i
05:54 - went over and i had a chat with them
05:56 - and we talked about
05:58 - logging for three four hours um and this
06:01 - is the first time i've actually talked
06:02 - to someone about logging because surely
06:03 - like console.log it worked you know
06:05 - console.log debug hello
06:08 - um
06:09 - so i talked to him about this and it
06:11 - wasn't boring which was the first thing
06:13 - that surprised me talking about logging
06:14 - wasn't boring
06:16 - and then i went to work the next morning
06:18 - and saw
06:19 - this log
06:20 - there's this statement this bit of code
06:22 - and i was like what get blamed launch
06:24 - missiles kill them you know who on earth
06:26 - did this which obviously if any of you
06:27 - have ever done a git blame on a piece of
06:29 - code that looks rubbish
06:31 - don't
06:32 - because it's always you that wrote it
06:36 - so i was looking at this code and i was
06:38 - thinking this is bad this console.log
06:40 - statement is bad and i have no idea why
06:43 - it's bad
06:45 - right just no idea i just i know because
06:47 - i've had this long conversation but i
06:49 - don't know why it's bad
06:51 - right so i started looking for other
06:52 - things um console.log error
06:55 - error.message right why is that bad come
06:58 - to it console.error
07:00 - fazzom that is has anyone here ever
07:03 - worked with the hungarian
07:06 - yeah a hungarian programmer
07:08 - yeah
07:10 - put that into google translate the
07:12 - polite translation is oh
07:16 - and then console.log finished at
07:18 - date.now does anyone know what date.now
07:20 - outputs
07:21 - a bunch of numbers right not human
07:23 - readable
07:25 - so
07:26 - i was like these are all bad all of
07:28 - these hundreds of log statements in this
07:29 - code base that i'm responsible for are
07:32 - bad you know i can't look at the the
07:34 - logs and know what's going on know if
07:36 - the system's even okay let alone if the
07:39 - users are okay
07:40 - and these are systems running you know
07:44 - that
07:45 - a couple of layers down people are
07:47 - trading half a million pounds on a day
07:49 - or
07:50 - are deciding whether or not to run
07:51 - trains like these are
07:53 - dangerous systems if things go wrong
07:55 - luckily this isn't directly it but this
07:57 - is kind of a couple of layers away
08:00 - so i kind of thought about it for a
08:02 - while and i thought there are four
08:03 - dimensions four things that you can kind
08:05 - of focus on you can think about
08:07 - specifically
08:08 - that make a log good or
08:10 - bad so
08:12 - you've got context
08:14 - what's going on in the app what's the
08:15 - data what's the time what's
08:17 - yeah we'll come back
08:19 - what's the purpose is it for debugging
08:21 - and i'm going to i think i'm going to
08:23 - delete it before i commit it
08:25 - is it for
08:26 - um auditing you know we did have this
08:29 - many users log in and the product owner
08:31 - knows it and they went to these sites
08:33 - and they did this and this and this
08:35 - is it important is someone about to die
08:37 - is someone about to lose half a million
08:39 - pounds or
08:41 - was there a garbage collection event
08:44 - and the format is it human readable is
08:46 - it greppable you know grep unix grep
08:48 - yeah can i just grab my logs and see
08:51 - every time this user logged in or can i
08:53 - grab my logs and see
08:55 - every time there was an error every time
08:57 - something went wrong the purpose so we
08:58 - might be doing analytics which is a kind
09:01 - of logging i promise you you can ask me
09:03 - about it later
09:05 - the purpose is it for debugging or is it
09:07 - for analytics improving the user
09:09 - experience
09:12 - did someone die did someone just log in
09:14 - was there a garbage collection event
09:16 - you know is it scannable is it possible
09:18 - which is really really important if
09:20 - you're using something like stash has
09:21 - anyone heard of logs
09:24 - it's a tool you know elastic search guys
09:28 - for dealing with logs
09:30 - so that's context purpose importance and
09:32 - format they're all things that are
09:34 - important when we're writing logs
09:38 - so
09:39 - none of this stuff is new
09:41 - you can see examples of all this stuff
09:43 - in log4j which is a java logging library
09:45 - which is kind of industry standard for
09:47 - java stuff the syslog standard which is
09:49 - kind of has bits of bits of stuff just
09:51 - look it up on online
09:53 - um
09:54 - count.lee which there are some stickers
09:56 - around somewhere they i had a chat with
09:58 - the ceo and he sent me some stickers
10:00 - which they open source rocks which is
10:02 - cool
10:02 - so they're over there somewhere
10:05 - and that's just a tool for
10:06 - you know logging events logging arrows
10:08 - logging different things to a remote
10:10 - location from the client or from other
10:12 - languages
10:13 - logs dash and
10:15 - good old console. you know we've got
10:18 - console.log error warn info different
10:20 - kind of levels importances
10:23 - and then we've got things like timing
10:24 - and profiler
10:26 - loads of really cool stuff just open dev
10:28 - tools type console. and look at the
10:29 - intellisense
10:30 - really cool stuff so this is an example
10:33 - of a bad format of logs has anybody seen
10:36 - this in their log files
10:37 - raise your hands if you've seen
10:38 - something like this in your log files
10:40 - yeah someone's just logged out some
10:42 - array and you've just got object object
10:44 - object object takes up hundreds of lines
10:46 - of logs and
10:48 - yeah you know you kind of lose the
10:50 - context so this is this breaks any
10:52 - context you've got
10:53 - a good format
10:54 - is showing the user that logged in
10:57 - wrapping things in square brackets makes
10:59 - things really possible they're
11:00 - surprising i mean i'm going to say
11:02 - regular expressions right but if you
11:04 - need to do something quickly regular
11:05 - expressions are really handy or grepping
11:07 - for things using regular expressions
11:11 - logging errors instead of doing
11:13 - console.log blah error.message just log
11:16 - the actual error
11:18 - not appended to a string and it'll
11:19 - actually display the whole stack trace
11:20 - which is lovely
11:23 - and this is this is an example of
11:25 - showing context this is ip addresses so
11:27 - we're showing context of where this
11:30 - stuff happened from which is important
11:32 - when we come to this kind of thing right
11:34 - user logged in use logged in use logged
11:35 - in
11:36 - error got data
11:38 - pretty rubbish because we don't know
11:39 - what's going on
11:40 - this means a lot different right
11:43 - so we've got the same user logged in
11:45 - five times within one second either
11:48 - we've got a bug
11:49 - or we've got a bot
11:51 - right
11:52 - both of these things are important and
11:53 - if you've got your ip address you can
11:54 - start looking at the ip address is it a
11:56 - real user is it some kind of bot scraper
11:58 - we've had that a lot stealing lots of
12:00 - valuable data
12:02 - they pay for one user and they're
12:03 - they've got their bots going off and
12:04 - downloading huge amounts of data
12:08 - so
12:10 - it all depends on the goal
12:12 - the logs that you actually use the
12:14 - logging statements the logging context
12:16 - the data i can't just come up here and
12:18 - say log the ip addresses or log the
12:20 - users or whatever you know i can't say
12:21 - log this log that because it depends so
12:24 - much on your individual context on your
12:25 - application on your users and on what
12:28 - you're expected to provide for your
12:29 - customers
12:31 - so it depends on the goal has anyone
12:33 - read the goal by eli goldwrap
12:36 - no one
12:37 - okay first thing you do when you get
12:38 - home
12:39 - go on amazon order the goal it's about
12:41 - kanban management or something but it's
12:44 - really really good at helping you
12:45 - understand where in an organization
12:47 - developers you know developers fit and
12:49 - how they can help the wider organization
12:52 - so
12:53 - there's this
12:55 - thing i made up this morning called the
12:57 - logging type table
12:58 - and basically this is talking about the
13:00 - different types of logging the different
13:02 - reasons you might use a log statement
13:04 - so we've got some things it's a bit
13:06 - small
13:07 - different different types of logging so
13:10 - there's there's something called tracing
13:12 - has anyone heard the term tracing before
13:15 - yeah okay so tracing is often used for
13:18 - debugging it's kind of logging you know
13:20 - function invocations or
13:23 - individual variables and just for really
13:25 - when when there's some bug that you're
13:27 - looking at
13:28 - so the question it answers is what
13:30 - happened you know how did we get here
13:32 - what happened what did the user do to
13:34 - get to this point or what data came in
13:36 - to get to this point
13:38 - and we usually log the state changes and
13:42 - function invocations and it's targeted
13:44 - at developers
13:46 - so there's anyone heard of event logging
13:49 - fairly common term event logging
13:51 - it's analytics it's understanding what's
13:53 - going on inside the app is that a user
13:55 - doing specific things or is it the
13:57 - application doing specific things so
13:59 - what's happening
14:01 - action actions and exceptions and it's
14:02 - useful for administrators
14:04 - um product owners and kind of us as
14:06 - developers we know which bits of code to
14:09 - specifically improve
14:12 - progress logging which is something that
14:14 - probably we don't think much about
14:16 - um this can actually feed back to
14:18 - users of um applications has anyone ever
14:21 - used uh dd the unix tool dd raise your
14:25 - hands
14:26 - no one's used dd
14:28 - what has anyone ever moved an image file
14:31 - not a img onto an sd card for like a
14:33 - raspberry pi or something
14:36 - no
14:37 - wow okay
14:38 - so dd is an example of bad logging
14:41 - because you press dd and it starts
14:44 - copying this
14:45 - three gigabyte file onto an sd card and
14:48 - it just
14:49 - sorry
14:51 - the command dd yeah the unix utility
14:53 - yeah
14:54 - um
14:55 - so
14:56 - dd you type dd this big file onto this
14:58 - sd card which i haven't used in three
15:00 - years maybe it'll work and it just sits
15:03 - there staring at you
15:05 - blank right no logging no explanation of
15:08 - what's going on it just kind of sits
15:09 - there and then come back in half an hour
15:12 - and hopefully it's worked right so
15:14 - that's that's kind of
15:16 - induces a lot of anxiety in its users
15:20 - so the question
15:21 - so
15:22 - progress logging is all about answering
15:24 - the question are you okay are you still
15:26 - working have you crashed
15:28 - is there anything i can do to help
15:30 - basically so we kind of log percentage
15:32 - of progress what errors have happened
15:33 - what's going on
15:35 - targeted at users because this can
15:37 - bubble up to some application if i click
15:40 - a button in on some website and it
15:43 - starts churning away chugging away
15:45 - and it doesn't load in five seconds i'm
15:46 - gonna hit refresh right but if some
15:49 - pop-up comes up and says this is gonna
15:50 - take a while we're loading the page for
15:52 - you we're aggregating the data then
15:55 - you're more likely to kind of wait for
15:57 - it right so then there's audit which is
15:59 - kind of something that we really really
16:00 - don't think think about much which is
16:02 - kind of
16:03 - verifying that the behavior of the
16:05 - application is
16:06 - correct you know did
16:08 - when my bank sent money do they log
16:11 - saying we transferred this much money
16:13 - from this account to this account and
16:15 - this accounts
16:16 - you know amount of money decreased by
16:18 - the same amount and this account
16:19 - increased right this is kind of double
16:21 - entry bookkeeping so what accountants do
16:23 - is they just look at the data from
16:25 - different angles and they just make sure
16:27 - everything lines up and this is
16:28 - something that your compliance
16:29 - departments might need the government
16:31 - might want like gdpr type stuff and the
16:34 - rest of the business might want because
16:35 - they want to know how many users of work
16:37 - you know are using the tool um
16:40 - is the number of subscribers going down
16:42 - every month which is obviously a bad
16:43 - thing um
16:45 - yeah
16:46 - so that's the the logging type table so
16:51 - purple slides again we're nearly at the
16:52 - end don't worry i'm just going to wrap
16:54 - up the sailing stuff
16:56 - so
16:56 - oh no i'm not i'm going to do this
16:58 - instead
16:59 - so the logging golden rules the three
17:01 - things to consider when you're writing
17:02 - logs and then i'm going to wrap up the
17:03 - same stuff
17:04 - remember the reader so this is who's
17:06 - reading the data is it going to be
17:08 - parsed are they going to be unable to
17:09 - understand what's going on
17:11 - do they know the context
17:13 - no personal data
17:14 - no passwords i've seen that a lot no
17:16 - passwords no usernames no email
17:17 - addresses um depends on the context
17:20 - obviously
17:22 - and then answer the question think about
17:23 - what question are you trying to answer
17:25 - with these locks are you trying to
17:27 - answer how do we get here are you trying
17:28 - to answer
17:30 - are you functioning correctly are you
17:32 - trying to answer
17:34 - um answer this this random question that
17:36 - the marketing guy said hey i'd really
17:38 - love to know how many users log in
17:42 - every three seconds or every three days
17:44 - right if there's some specific thing
17:47 - that's that's kind of the question and
17:48 - you need to make sure that that's
17:49 - understandable in the logs itself
17:52 - okay sailing now we're on sailing
17:55 - so
17:56 - this was my log that i kept in a book
17:58 - with paper and pen i mean hardcore stuff
18:01 - right
18:02 - so there are a few things that we can we
18:04 - can kind of keep take note of that we
18:06 - can actually learn so this is event
18:07 - logging this is me saying i did this and
18:10 - it happened for this long
18:12 - so
18:13 - this is when i picked the boat up yeah
18:15 - you can see the oh well the day i picked
18:16 - the boat up and the first time i ran the
18:18 - test and it ran for kind of three
18:20 - seconds
18:23 - then you can see something went wrong
18:24 - because suddenly my build pump the thing
18:26 - that's supposed to stop me from sinking
18:28 - takes 12 seconds to do its job
18:32 - and then
18:33 - some engineer came in the middle of the
18:35 - day
18:36 - you'll see by the rest of the logs that
18:38 - it's kind of a weird time in the middle
18:39 - of the day he came and he fixed
18:42 - something and then ran it for 10 seconds
18:44 - so this is an abnormal log right so
18:46 - something different happened
18:49 - and then you can see something went
18:50 - wrong it's not immediately obvious but
18:52 - if you're kind of displaying this in a
18:53 - graph it's quite helpful that i actually
18:56 - missed
18:57 - the morning
18:58 - here i missed the morning on the second
19:00 - of the fourth
19:01 - and that's because uh we had more issues
19:04 - with our water heater and suddenly
19:06 - worrying about actually being able to
19:07 - drink water was more important than uh
19:09 - than measuring how long our build pump
19:11 - ran for so that's something else went
19:13 - wrong
19:15 - and then that's when i ran that just
19:17 - before i dropped the boat off
19:19 - so another interesting thing is after
19:22 - the
19:23 - the tests after the guy fixed it these
19:26 - tests are all very similar even though
19:27 - the amount of rain changes right so the
19:29 - actual test runs change
19:31 - um so
19:33 - don't change much sorry which means
19:34 - there's probably a lot of overhead in in
19:36 - the pump from spinning up right but
19:38 - there's a lot of overhead and you can
19:40 - tell because the values are similar
19:42 - not because they're different so
19:44 - similarities in logs is still really
19:46 - really handy
19:48 - okay that's it you can drink more beer
19:50 - eat more pizza
19:52 - cool
19:53 - [Applause]