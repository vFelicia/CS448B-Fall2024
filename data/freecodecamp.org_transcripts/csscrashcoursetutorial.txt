00:00 - hello everybody in this video i'm going
00:02 - to teach you everything you need to know
00:03 - about css so you can turn your bland
00:06 - html into something beautiful i will not
00:08 - be covering every property or option
00:10 - that css has to offer because there are
00:12 - hundreds but i will be covering all of
00:14 - the concepts you need to know in order
00:15 - to get started with css
00:17 - let's first get started with what css is
00:20 - a common misconception is that css is a
00:23 - programming language but that is
00:24 - incorrect
00:25 - css is actually a styling language which
00:28 - is used for modifying the appearance of
00:30 - the content of web pages
00:32 - just as html is used for the content of
00:34 - web pages css is used for presentation
00:36 - of that content
00:38 - due to the fact that css is used for
00:40 - presentation and design there are many
00:41 - ways to do the same thing
00:43 - html on the other hand has set elements
00:46 - for most things which means that there
00:48 - is usually only one correct way to do
00:49 - things in html
00:51 - the ability to do things in many
00:52 - different ways is the reason most people
00:54 - either love or hate css
00:56 - i personally love it since it lets you
00:58 - express your creativity and gives you
01:00 - freedom to do things how you want
01:02 - now that we understand what css is let's
01:04 - dive into the details of how to use css
01:07 - first we need to discuss the syntax of
01:09 - css
01:10 - luckily the syntax is straightforward
01:12 - and easy to understand the first part of
01:14 - the syntax is the selector there are
01:16 - many different types and combinations of
01:18 - selectors which we'll talk about later
01:20 - but for now all you need to know is that
01:22 - a css style starts with a selector to
01:24 - apply the style to
01:26 - next comes an opening and closing curly
01:28 - bracket that are used to denote the
01:30 - start and end of the styles that apply
01:32 - to the selector
01:33 - everything in between these curly
01:34 - brackets will be styles that are applied
01:36 - to the html elements that match the
01:38 - selector lastly inside the curly
01:41 - brackets is one or more property value
01:43 - pairs
01:44 - each of these pairs defines a property
01:46 - such as color font size width etc and a
01:49 - value for that property
01:51 - a basic example of the css syntax we'll
01:54 - be setting the text color of all h1
01:55 - elements to blue
01:57 - now that we have the syntax out of the
01:58 - way let's focus on the various selectors
02:01 - css contains many different types of
02:03 - selectors but the main selectors are
02:05 - element class and id selectors
02:08 - we've already seen the element selector
02:10 - in the previous example of turning all
02:11 - h1's blue
02:13 - any html element can be used as a
02:15 - selector and this style is defined for
02:17 - that selector will apply to all html
02:19 - elements of that type
02:20 - by far the most common and useful
02:22 - selector is the class selector
02:24 - the class selector lets you select html
02:26 - elements based on their class attribute
02:28 - if you remember from my html series all
02:31 - html elements can have attributes
02:33 - assigned to them such as the href for an
02:34 - anchor tag a class is just an attribute
02:37 - that all html elements can have and is
02:39 - used with css to distinguish elements
02:41 - for specific styling
02:43 - the class attribute can also have
02:45 - multiple different classes in the same
02:47 - attribute as long as they're separated
02:48 - by a space in order to select an element
02:51 - by class we need to use a period before
02:53 - the class name as the css selector
02:56 - this period tells css that whatever
02:58 - follows is a class name and not an html
03:01 - element name
03:03 - classes are the most common selector
03:05 - used because they are amazing for
03:06 - creating reusable components
03:08 - for example if you have a site with
03:10 - three different types of buttons that
03:12 - all share the same basic styling but
03:13 - have a different color you can use one
03:15 - base class of button to define all the
03:18 - styles shared between all buttons
03:20 - you can then have three other classes
03:22 - that define the specific color for the
03:23 - button
03:25 - then all you need to do is add both the
03:27 - base button class and your color
03:28 - specific class to your html button
03:30 - element and i'll have all the styles
03:32 - defined in the base button class and the
03:34 - color specific class
03:36 - the last comment selector is the id
03:38 - selector
03:39 - the id selector is very similar to the
03:42 - class selector in that it is an html
03:44 - attribute but an element can only have
03:47 - one id while it can have multiple
03:49 - classes
03:50 - an id also should be unique across the
03:52 - entire web page but html does not
03:54 - actually enforce this
03:56 - to use an id as a selector you simply
03:58 - need to use a pound sign followed by the
04:00 - id name much like how classes use a
04:03 - period followed by the class name
04:05 - our previous example is impossible to do
04:07 - with ids since ids are supposed to be
04:10 - unique across the webpage and each
04:12 - element can only have one id
04:14 - because of this i very rarely use ids
04:17 - in 99 of all my css i use class
04:20 - selectors and avoid using html and id
04:22 - selectors as much as possible
04:24 - on top of having many different
04:26 - selectors css has multiple different
04:28 - ways to combine selectors together to
04:30 - make your selectors more specific
04:32 - the first way to combine selectors is to
04:34 - specify multiple selectors that an
04:36 - element must have in order to be styled
04:38 - to do this you need to write the various
04:40 - different selectors together with no
04:41 - spacing between them
04:43 - for example if you wanted to select all
04:45 - h1 elements with the class large heading
04:48 - then you would write the following
04:49 - selector
04:50 - if you wanted to select an element with
04:51 - the id big blue and both the class large
04:54 - and blue then you would use this
04:56 - selector
04:58 - all html selectors can be combined in
05:00 - this way as many times as you want to
05:02 - create specific or general rules
05:05 - another way to combine selectors is to
05:07 - use multiple selectors to specify an
05:09 - ancestor of an element
05:10 - to do this you will put a space between
05:12 - the ancestor and child selector for
05:15 - example to select all p tags inside a
05:17 - div you simply need to use the following
05:19 - selector
05:20 - this will select all p tags that have a
05:23 - div as their ancestor even if the div
05:25 - tag is not the direct parent of the p
05:27 - tag
05:28 - this combination of selectors can be
05:30 - combined with the previous combination
05:32 - of selectors to make even more specific
05:33 - selectors
05:34 - for example to select all h1 tags with
05:37 - the class of brown to have a header with
05:40 - the class main header as their ancestor
05:42 - you would do this
05:44 - the last common combination of selectors
05:46 - is when you want to share a set of style
05:48 - properties and values between multiple
05:50 - selectors
05:51 - if you have a class big and another
05:53 - class large that both have the same
05:55 - style properties and values then you can
05:57 - combine these selectors into one
05:59 - selector by using a comma between the
06:01 - selectors this allows you to avoid
06:03 - duplication
06:05 - it is important to note that all the css
06:07 - combination selectors can be used
06:08 - together to create even more complex
06:10 - combinations if needed there is also one
06:13 - other form of selector the everything
06:15 - selector that is used to select every
06:16 - element on the entire web page
06:18 - this selector is defined as the asterisk
06:20 - symbol and is only really used to set
06:23 - some defaults for your entire web page
06:24 - such as font family
06:26 - the last thing we need to discuss before
06:28 - writing some css is how to load the
06:30 - styles we write into our html page
06:33 - there are three main ways to do this
06:35 - the first and by far worst is to use
06:37 - inline styles an inline style is css
06:40 - that is written directly inside an html
06:42 - element and thus does not need a
06:43 - selector
06:45 - this is done through the use of the
06:46 - style attribute this is a terrible idea
06:48 - though since html is meant for the
06:50 - content only and mixing css styles into
06:53 - your html elements adds presentation to
06:56 - your html which is meant for css files
06:59 - it prevents us from reusing those styles
07:00 - anywhere else since they are written
07:02 - into the actual html element
07:04 - lastly depending on the styles you use
07:06 - inline your page may load slower
07:09 - the second option of using the style
07:11 - html element is slightly better but
07:14 - still a bad idea
07:15 - the style element is an html element
07:17 - defined in the head and formatted
07:20 - exactly like a css file
07:22 - the problem with using the style element
07:23 - though is that the presentation of the
07:25 - web page is defined in the html file and
07:28 - not a css file the styles you define in
07:30 - the style element are also only
07:32 - available on the page you define them
07:34 - and are thus not reusable across
07:35 - multiple pages
07:37 - the final and best way to define css
07:39 - styles is to use a separate css file and
07:42 - link to it from the html
07:44 - all the styles for the entire webpage
07:46 - can be defined in one or more css files
07:49 - and they can be added to any web page by
07:51 - using a simple link element inside the
07:52 - head
07:53 - the link element is a simple element
07:55 - that can be used to link files to the
07:57 - html and its main use is to link css
08:00 - files the link element is also an empty
08:02 - element that uses the rel attribute
08:04 - which stands for relationship to define
08:06 - the relationship between the linked file
08:08 - and the html document
08:10 - in the case of css the rel attribute
08:12 - will be stylesheet since css is a
08:14 - stylesheet for the html
08:16 - the only other attribute that we need to
08:18 - define is the href attribute
08:20 - the href attribute works exactly the
08:22 - same as the href attribute of an anchor
08:24 - tag and should point to either your css
08:26 - file or the url of another person's css
08:29 - file
08:30 - using external css files like this is
08:33 - the best way to use css since it
08:35 - separates the presentation and contents
08:37 - of websites and allows reusability of
08:39 - styles across the website
08:41 - now that we have an understanding of how
08:43 - to write css styles and select specific
08:45 - html elements let's jump into a live
08:47 - example of these concepts
08:50 - as you can see on the left i have a
08:52 - sample html page to open up inside of
08:54 - visual studio code and on the right i
08:56 - have this page opened up in google
08:58 - chrome using live server
09:00 - to get started let's use an inline style
09:02 - on this h1 element to turn the text a
09:04 - different color so we'd use the style
09:06 - attribute here and we would set the
09:08 - color value since the color property is
09:10 - used to change text color and we'll set
09:12 - it to a color of red for example
09:15 - if we save that as you can see our text
09:17 - will change to red but as we know using
09:19 - these style attributes is a bad idea
09:22 - instead let's use the style tag inside
09:24 - of the head
09:26 - and use the h1 selector
09:28 - to select the h1 element and we'll all
09:31 - set the color to blue this time
09:33 - save that and we can see the color is
09:35 - blue but again we know that this is not
09:37 - the most optimal way to do it instead
09:40 - let's create a new file called
09:41 - styles.css
09:44 - inside the styles.css file let's put our
09:47 - h1 selector and set the color to green
09:52 - now in order to get this style to load
09:54 - in our page we need to use a link tag
09:56 - here
09:57 - which the rel is going to be stylesheet
10:03 - and the href
10:05 - is going to point to that styles.css
10:07 - file
10:08 - now if we say that you can see that our
10:10 - text changes to green
10:12 - if we were to move this link tag above
10:14 - our style tag for example though you see
10:16 - that our text is still blue this is
10:18 - because css takes whatever the last
10:20 - defined style is for an element so in
10:23 - this case the h1 setting the color to
10:25 - blue is below the import of this link so
10:27 - our text is blue if we remove this style
10:30 - though
10:31 - you'll see that when we save it our text
10:33 - turns back to green because it's loading
10:35 - this style in here we can show that
10:37 - example again by putting the h1 here
10:39 - with a color of red this time and now
10:41 - when we save that this text will change
10:43 - to red because this selector is after
10:46 - this selector
10:50 - now that we've finished importing all of
10:51 - our styles let's dive a little bit more
10:53 - into how the styles are actually applied
10:55 - to do this let's add a class to this h1
10:58 - and we'll give it a class of blue
11:00 - and inside of our styles.css
11:03 - let's add that blue class selector in
11:06 - here and give it a property value for
11:08 - color to be blue
11:10 - now when we save it we see that our
11:12 - color changes to blue
11:13 - but you would think that the color would
11:15 - be green since this h1 selector comes
11:17 - after the blue class selector
11:19 - but css actually
11:21 - ports different values onto these
11:23 - different selectors
11:24 - element selectors are the lowest level
11:26 - selector which means that they're always
11:28 - overridden by other selectors such as
11:30 - the class selector
11:32 - the class selector is then the next in
11:34 - line
11:35 - and it is overridden only by the id
11:37 - selector so in order the id selector is
11:40 - the most important then the class
11:42 - selector and then the element selector
11:44 - so if we were to look at an example we
11:46 - have an id
11:48 - here
11:49 - class
11:50 - and another class
11:52 - this selector would have a higher
11:54 - specificity than this selector that had
11:59 - three classes
12:01 - that is because there's an id here so
12:04 - the id setting has a value of one and
12:06 - then we have two classes here so the
12:07 - class value would have two but this was
12:10 - three classes and no id so since there's
12:12 - one id on this one it would be a higher
12:14 - specificity so anything in here would
12:16 - override anything in here
12:19 - essentially the easiest way to look at
12:20 - this is to first count the number of ids
12:23 - in the selector
12:24 - if the number of ids is equal then go on
12:27 - to the number of classes in the selector
12:29 - if the number of classes is equal then
12:32 - finally go on to the number elements in
12:33 - the selector
12:34 - if that is also equal then whichever one
12:37 - is defined last is going to be the one
12:39 - that's applied
12:41 - in any case if the id number class
12:43 - number or element number is greater when
12:45 - you get to that step of adding that is
12:47 - the style that will be applied
12:51 - also
12:53 - if we have an inline style so for
12:54 - example in here if we put style
12:58 - and we set the color to be
13:00 - equal to
13:02 - black for example
13:05 - this will override everything
13:07 - anything defined in line like this
13:09 - overrides everything in your style sheet
13:11 - no matter what
13:17 - most html elements have a set of default
13:20 - css that is applied to them as you can
13:22 - see the h1 tag over here has margin on
13:25 - the top and bottom of it and this p tag
13:27 - has this black text that is because the
13:30 - text color is inherited from whatever
13:31 - the parent is
13:33 - this is apparent if we style the body
13:35 - tag in here
13:36 - and we set the color to be red
13:39 - this will change all the text in our
13:41 - entire application to be read that is
13:43 - underneath the body tag unless otherwise
13:45 - specified such as this blue selector
13:48 - here that is specifying the h1 should be
13:50 - blue this is because the default value
13:52 - for text color is inherit which means it
13:55 - inherits whatever its parent's value is
13:59 - since we've been talking about color so
14:01 - much let's dive into the different ways
14:03 - that you can define colors in html
14:05 - by default you can use these simple
14:08 - color selectors of red green blue pink
14:11 - and various other different colors but
14:13 - sometimes you want to get more specific
14:15 - than these very generic colors
14:17 - in order to do that
14:18 - we'll use hexadecimal colors in order to
14:21 - set these
14:22 - a hexadecimal number is similar to our
14:24 - decimal system that goes from 0 to 9 but
14:27 - hexadecimal goes from 0 to 15.
14:30 - in order to represent these numbers that
14:32 - are above 9 hexadecimal uses the letters
14:35 - a b c d e and f
14:37 - so if we wanted to write 15 in
14:39 - hexadecimal you would write the pound
14:42 - sign followed by an f which would be 15.
14:45 - so
14:46 - for using colors this hexadecimal is
14:49 - broken up into three distinct parts of
14:52 - two digits each so we have the first two
14:54 - digits
14:55 - the second two digits and the third two
14:57 - digits
14:59 - and each set of these digits
15:01 - represents a different color so the
15:02 - first two digits represent red
15:04 - the middle two right digits represent
15:07 - green
15:08 - and the last two digits represent blue
15:10 - and this is on a scale from 0 to double
15:12 - f where double f is equal to 255 in
15:16 - decimal
15:17 - so the smaller the number the less of
15:19 - that we have so if
15:21 - this was 0 0 then that means there is no
15:24 - red at all
15:25 - if this one
15:27 - was ff as it is that means that we have
15:29 - all the most amount of blue possible so
15:32 - if we wanted to get just blue we would
15:34 - use zero zero for red
15:36 - zero zero for green and then ff for blue
15:39 - and if we save that we get a blue color
15:42 - this is a little bit difficult to wrap
15:44 - your header around so there's other ways
15:45 - to define colors in css one of those
15:47 - ways is using rgb
15:50 - rgb is just like the hexadecimal version
15:52 - but it's broken out into three distinct
15:54 - sections so we have red which goes
15:56 - between 0 and 255 and this is in decimal
15:59 - so we can just write 255 if we want
16:01 - entirely red
16:02 - and the next value is going to be green
16:04 - again so we can just do 255
16:06 - and then the last one is going to be
16:08 - blue and let's just say that's zero so
16:10 - if we save that we get yellow
16:13 - and then another way if you wanted to
16:15 - have a partially transparent color is
16:17 - you could use rgba
16:20 - where then we have one more value that
16:21 - goes between zero and one which is going
16:24 - to be the transparency so if it's one it
16:27 - means that it is fully opaque and if it
16:29 - is zero then it is going to be entirely
16:31 - transparent and some combination in
16:33 - between there means that it is partially
16:35 - transparent
16:36 - this partial transparency can also be
16:38 - achieved by using the
16:41 - hexadecimal version of the color
16:43 - and we will just have an extra two
16:44 - digits at the end of the hexadecimal
16:46 - which represents the transparency so if
16:48 - we wanted to do black we would do zero
16:50 - zero zero zero zero zero since we have
16:53 - zero red zero green and zero blue and
16:55 - then the final value will be the alpha
16:57 - value which will be between zero and 255
17:00 - again so if we wanted to be entirely
17:02 - opaque we would do ff save that and we
17:05 - get entirely opaque black and if we
17:07 - wanted it to be
17:08 - entirely transparent just zero zero and
17:11 - that will make it entirely transparent
17:13 - the last way to define colors in html is
17:16 - using hsl which stands for huge
17:18 - saturation lightness
17:20 - the first value hue goes between 0 and
17:22 - 360 and determines which color you're
17:25 - going to be using we'll just use zero in
17:27 - this example
17:28 - saturation goes from zero to one hundred
17:31 - percent and determines how colorful this
17:33 - color is at one hundred percent
17:35 - saturation it's as bright as it can be
17:37 - and it's zero percent saturation there
17:38 - is no color in it is either going to be
17:40 - black white or somewhere in between
17:42 - there so let's just use one hundred
17:43 - percent in this example
17:45 - and then lastly lightness is going to
17:47 - determine how bright that color is so at
17:50 - 100 percent lightness which is the max
17:52 - you're going to have an entirely white
17:53 - color and at zero percent lightness
17:55 - you're going to have an entirely black
17:57 - color and anywhere between there is
17:58 - going to be a different shade of that
18:00 - color so let's just use 50 in this
18:02 - example
18:03 - if we say that we see that we get red
18:04 - from this
18:07 - also hsl has an hsl a version which lets
18:10 - you put the alpha value or the
18:12 - transparency the end where one is going
18:14 - to be entirely opaque and 0 is going to
18:16 - be entirely transparent just like rgba
18:19 - at the top
18:20 - next we're going to talk about the box
18:22 - model in order to demonstrate this i'm
18:24 - going to create a new div element
18:27 - and i'm going to give it a class of box
18:31 - there we go and then in the style
18:34 - we'll style that box element
18:37 - and we'll give it a height and a width
18:40 - of 100 pixels
18:45 - a padding
18:47 - of 20 pixels
18:49 - a margin of 50 pixels
18:52 - and a border
18:54 - that is going to be 10 pixels
18:56 - and that will be black
18:58 - don't worry about the syntax here this
18:59 - is really just to demonstrate how the
19:00 - box model works if we save that
19:04 - oh first let's give it a
19:06 - background
19:09 - background color
19:11 - of red
19:13 - and now as you can see over here we have
19:15 - this red background
19:16 - we have our black border but where is
19:19 - this margin and padding coming from
19:22 - in order to see this let's inspect this
19:23 - element in google chrome
19:25 - pull this over so that we can actually
19:27 - see
19:28 - and down here we have the box model
19:30 - so
19:31 - we have our 100 width by 100 height
19:34 - which is the actual content of our thing
19:37 - and then around that we have a padding
19:39 - of 20 and on the left here over here you
19:41 - can see that it is highlighted so in
19:43 - blue we have the actual content 100 by
19:45 - 100
19:46 - in orange we have the padding which is
19:48 - 20 pixels on each side
19:50 - next comes our black border which is 10
19:52 - pixels around the padding and then
19:54 - lastly are 50 pixels of margin that go
19:56 - around the content
19:58 - the box model works where the inside of
20:00 - the box model the very center is your
20:02 - actual content this is going to be your
20:04 - text image whatever it is that takes up
20:06 - that space is going to be there and then
20:08 - the very next thing is padding padding
20:11 - is essentially just spacing between your
20:13 - content and your border
20:16 - so on a button for example this is what
20:18 - allows you to create space between your
20:20 - letters of your button and the actual
20:22 - border around your button with the
20:23 - background
20:24 - background also goes on the padding
20:26 - because the background is inside of the
20:28 - border
20:29 - then we have the border which is
20:30 - self-explanatory whatever size you make
20:33 - the border is how wide the border is
20:34 - going to be
20:35 - and then lastly we have our margin which
20:38 - is going to be the space on the outside
20:39 - of the border which helps you space
20:41 - elements out from each other
20:43 - margin is meant to space elements around
20:46 - other elements and padding is meant to
20:49 - space elements around their own border
20:52 - or to add spacing between the element
20:54 - and their actual background
20:56 - now that we understand the box model
20:58 - let's discuss the various different
20:59 - units that we can use on this box model
21:01 - let's close out of this inspector
21:04 - widen up our view here
21:05 - and let's talk about first of all pixels
21:08 - pixels are fairly self-explanatory
21:10 - they're the unit that you use most the
21:12 - time when defining content sizes
21:15 - and is going to be a set fixed width on
21:17 - every size screen
21:19 - the next unit we have is percentage
21:21 - percentage is also fairly
21:23 - self-explanatory and will take up
21:25 - whatever percentage of the given width
21:27 - that the object has inside of its parent
21:29 - so if we make this width ten percent
21:32 - this box will be ten percent of the
21:34 - width of the screen since the entire
21:36 - width here
21:37 - is how much space we have to work with
21:39 - the next type of unit that we have is
21:41 - going to be em em is mostly used for
21:44 - fonts and font related situations like
21:47 - padding around fonts and it is going to
21:50 - be it scales off of the actual font size
21:53 - so if your font size is 16 pixels
21:56 - then one em equals 16 pixels
22:00 - 2em would be 32 pixels and so on
22:04 - there's also another type of font or
22:06 - scale called rem which is very similar
22:09 - to em in that it scales off of your font
22:12 - size
22:13 - but rem scales off the font size of the
22:16 - root of your document so
22:18 - the very very base level of our browser
22:20 - where if we went into the settings and
22:22 - scaled our font size it would scale off
22:24 - of that while em scales off of the
22:26 - parent so this box has a parent of body
22:29 - so if we change the font size on this
22:32 - body to be 20 pixels
22:34 - you'll see that our actual box gets
22:36 - wider
22:37 - but if we used rem here the size of the
22:40 - box stays the same even if we bump this
22:42 - up to 200 pixels for example
22:45 - let's do 30 actually
22:47 - as you can see pumped up to 40 still
22:49 - doesn't change the size
22:51 - and that right there is pretty much
22:53 - everything you need to know in order to
22:54 - get started with css
22:56 - i know we've covered a lot in this video
22:58 - and we're still missing a lot of what
23:00 - there is to do in css but with these
23:02 - simple rules you can get started and
23:04 - create any basic website that you want
23:06 - and style it using these css rules
23:10 - in my next few videos i'm going to go
23:12 - and cover all the css styling needed to
23:14 - create a modern looking banned website
23:16 - so if you're interested in learning more
23:18 - about css and the different properties
23:20 - that are available be sure to check out
23:22 - those videos when they come out
23:24 - also like this video if you enjoyed it
23:26 - and subscribe for more similar content
23:28 - and let me know down in the comments
23:30 - below why you decided you wanted to
23:32 - learn css and what you're going to
23:33 - create with it thanks for watching