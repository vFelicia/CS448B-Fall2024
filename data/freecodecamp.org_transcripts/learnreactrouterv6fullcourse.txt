00:00 - if you're building projects with react
00:02 - you should learn how to use react router
00:04 - this course covers everything about
00:06 - routing with react using react router
00:09 - you'll learn about setting up basic
00:11 - routes protecting authenticated routes
00:14 - custom route Transitions and more da
00:17 - Cola teaches this course he uses
00:19 - animated visuals and focuses on real
00:21 - world application building all work
00:23 - together to handle routing and render
00:25 - the appropriate components based on the
00:26 - URL we'll cover essential topics like
00:29 - handling common routing issues passing
00:31 - and accessing URL parameters redirecting
00:34 - users to specific routes and
00:35 - implementing nested routes for
00:37 - hierarchal navigation we'll also explore
00:40 - Advanced Techniques such as lazy loading
00:42 - route Transitions and Route guards
00:45 - throughout this course we work on
00:46 - practical examples and real world
00:49 - projects putting your new found
00:50 - knowledge into action by the end of this
00:53 - course you have confidence and expertise
00:55 - to implement robust routing in your own
00:57 - react applications you'll be able to
00:59 - handle complex routing scenarios
01:01 - optimize performance secure routes and
01:03 - provide a seamless user experience so
01:06 - get ready to embark on this react router
01:08 - adventure with me welcome to the
01:10 - introduction to react router section of
01:12 - our course in this module we will
01:15 - explore what react router is its purpose
01:18 - and the benefit it brings to our react
01:20 - applications we'll also discuss the
01:22 - different versions available so let's
01:23 - get started react router is a powerful
01:26 - routing Library specifically designed
01:28 - for react application
01:30 - it provides a declarative way to handle
01:32 - routing allowing us to create single
01:35 - page applications with multiple views or
01:38 - pages with react router we can Define
01:41 - different routes in our application and
01:43 - render appropriate components based on
01:45 - the current
01:48 - URL the main purpose of react router is
01:50 - to enable seamless navigation and
01:52 - provide a consistent user experience
01:54 - within our react
01:56 - applications it allows us to create
01:58 - links handle URL changes and update the
02:01 - rendered components based on the routes
02:03 - defined in our application let's explore
02:06 - some of the key benefits of using react
02:09 - router declarative routing react router
02:13 - offers a declarative approach to routing
02:16 - meaning we can Define our routes using a
02:18 - simple and intuitive
02:20 - syntax this makes it easier to
02:23 - understand and maintain our application
02:24 - routing
02:26 - logic nested routing reactor support
02:30 - nested routing allowing us to create
02:32 - complex application structures with
02:34 - multiple levels of nested
02:37 - routes this is particularly useful when
02:39 - building applications with different
02:41 - sections or
02:44 - subpages dynamic
02:46 - routing react router enables us to
02:48 - handle Dynamic routing by supporting
02:50 - parameters in our route we can Define
02:53 - route patterns that match specific URL
02:55 - patterns extract parameters from the URL
02:59 - and pass them as props to the rendered
03:02 - component this flexibility is invaluable
03:05 - when dealing with Dynamic content or
03:07 - user specific
03:08 - data programmatic
03:11 - navigation react router provides an API
03:13 - for programmatic navigation allowing us
03:16 - to navigate to different routes
03:19 - programmatically we can trigger route
03:20 - changes based on our user Actions
03:22 - application logic or even external
03:24 - events this gives us full control over
03:27 - the navigation flow of our application
03:31 - code splitting and lazy loading react
03:34 - router integrates seamlessly with code
03:35 - splitting and lazy loading techniques
03:38 - this means we can load components and
03:40 - routes on demand optimizing the initial
03:43 - load time of our
03:45 - application it's especially beneficial
03:47 - for larger applications with numerous
03:50 - routes and complex component
03:56 - hierarchies hello
03:58 - guys so this is the first project we're
04:01 - going to build to learn react router
04:04 - it's kind of like a GitHub Explorer site
04:06 - this is the homepage that shows random
04:09 - GitHub repos as you can see over here
04:12 - and then if you click on the repo we go
04:14 - to the repo detail page as you can see
04:17 - we have some information about the repo
04:19 - over
04:21 - here then if we head over to the users
04:23 - page from the Navar as you can see we
04:26 - have a list of random users just as we
04:29 - had a list of random
04:30 - repost and also if we click on a single
04:33 - user we also go to the user Details page
04:36 - where we can see more information about
04:38 - the
04:40 - user then we go to the user search page
04:44 - where we have a search functionality
04:46 - that searches for GitHub users so you
04:48 - can just type in your own username and
04:50 - you're going to see your
04:56 - details now if we click on the profile
04:58 - link from the search bar you can see
05:00 - that it takes us to the login
05:02 - page well that's because the profile
05:05 - page is a protected route and it
05:08 - requires authentication to be accessed
05:11 - so you are going to learn how to
05:12 - implement protected routes in this
05:15 - project however if we log into the
05:17 - application and go back to the profile
05:19 - page you can see that my GitHub profile
05:21 - is now popping up with a bit of
05:23 - information about
05:25 - me so with this you are going to learn
05:27 - how to implement protected routes in
05:29 - your applications using react
05:33 - router all right that's an overview of
05:35 - what we're going to be building for a
05:37 - start and with this you're are going to
05:39 - learn pretty much everything about
05:40 - routing using react
05:42 - router let's begin
05:45 - immediately welcome back guys in this
05:47 - lesson we are going to be creating our
05:49 - first react application and also
05:51 - installing react
05:52 - router I assume you already know how to
05:54 - create a react application if not just
05:57 - make sure you already have a recent not
05:59 - node version installed in your machine
06:02 - and the way you can do that is by simply
06:04 - going to your browser search install
06:07 - node and the first link you see here
06:09 - with download node.js click on it and
06:12 - then install the appropriate node for
06:14 - your machine all right now let's head
06:16 - back to our terminal and create our
06:18 - first react app so to do that all we
06:20 - need to do is type
06:23 - npx
06:26 - create-react-app and then the name of
06:29 - our app in this case the app we're going
06:32 - to be building is going to be called git
06:34 - Explorer so we are just going to say G
06:39 - Dash Explorer just like this now hit
06:43 - enter this is going to take a couple of
06:45 - minutes but just allow you to finish
06:47 - working and we can continue from
06:50 - there all right now that we have our
06:53 - project installed for us by npm let's
06:56 - open it in our code editor for me I'm
06:58 - using vs code as my code editor if you
07:01 - happen to be using a different code
07:02 - editor please feel free to continue
07:04 - using it so all I'm going to do is
07:07 - within my terminal I'm going to say CD
07:10 - git Das Explorer which is the name of
07:14 - the app we just created and then hit
07:16 - enter that is going to take us to our
07:19 - project directory I'm just going to
07:20 - clear my terminal here and then to open
07:23 - my project in vs code all I have to do
07:25 - within the terminal is run the command
07:28 - code do dot just like this hit enter and
07:32 - vs code is going to open our project for
07:35 - us
07:37 - cool all right now that we've built our
07:39 - project and opened it in our code editor
07:42 - let's launch our project first and see
07:44 - it in the browser and then we install
07:46 - react router
07:47 - afterwards now head back to the terminal
07:50 - again and type the command
07:53 - npm
07:55 - start hit
07:57 - enter as you might know already this is
07:59 - going to open our project for us in the
08:01 - browser let's just wait for that to
08:03 - happen all right as you can see we have
08:05 - the spinning react logo over here and
08:07 - our project is working
08:10 - properly all right now let's go back to
08:12 - our
08:13 - terminal we are just going to kill the
08:15 - process here with contrl C or command C
08:18 - and now let's install react router so to
08:20 - do that we're going to run the command
08:22 - npm
08:25 - install react Das router Dash Dom so
08:31 - just npm install react router Dom just
08:34 - like this and then we hit
08:39 - enter so yeah once that's done running
08:43 - let's head back to our code and see if
08:44 - we have our react router properly
08:46 - installed now back in our code editor
08:49 - open the packet. Json file in our
08:51 - project
08:54 - directory and in our project
08:56 - dependencies we should see react router
08:58 - Dom as one of our project dependencies
09:00 - over
09:03 - here if you see that it means your react
09:06 - router D has been properly
09:07 - installed all right now in the next
09:10 - lesson we are going to be going over a
09:12 - few Concepts you need to understand
09:14 - about react router for you to be able to
09:17 - properly use
09:19 - it hello guys welcome back to this
09:22 - lesson in this lesson we will set up our
09:25 - project to use react router to enable us
09:28 - to implement routing functionality
09:30 - within our
09:33 - application to do so we simply need to
09:35 - wrap our entire application inside of a
09:38 - react router component called the
09:40 - browser
09:42 - router what is a browser
09:44 - router the browser router component is a
09:47 - high level component that wraps our
09:49 - entire
09:50 - application it utilizes HTML 5 history
09:53 - API to keep your UI in sync with the URL
09:57 - it provides the routing functionality
09:59 - for your application by listening to
10:01 - changes in the URL and rendering the
10:03 - appropriate component based on the
10:05 - defined
10:06 - route so at the base of our routing
10:09 - functionality is the browser router
10:13 - component let's head over to our code
10:15 - and see how we can set up our
10:17 - application for routing using the
10:18 - browser
10:20 - router so if we go to our app.js over
10:23 - here first of all let's import the
10:25 - browser router from react router Dom so
10:27 - we see import
10:32 - browser
10:35 - router browser
10:38 - router from
10:43 - react from react router
10:46 - done just like this now we said our
10:49 - browser router needs to wrap our entire
10:51 - application right and our app.js is the
10:54 - entry point to our application and all
10:56 - other Pages we might have in it so let's
10:58 - wrap all the component inside of our
11:00 - appjs inside our browser
11:02 - router so in our return statement we're
11:05 - just going to call the router
11:09 - component copy the div over
11:12 - here and paste it
11:14 - inside if we head back to our browser
11:17 - let's refresh and see if that works
11:22 - perfectly oh we have an error here all
11:26 - right we have an input error here seems
11:27 - like I omitted the T of act so if we
11:30 - head back to our code I'm just going to
11:32 - add the T over here head
11:36 - back now if I refresh the page
11:38 - everything seems to be working fine so
11:40 - our router seems to be working perfectly
11:42 - however since the browser router is
11:44 - supposed to wrap our entire application
11:46 - it's completely fine to use it like this
11:49 - but it will certainly make more sense if
11:51 - we go to our index.js file and wrap our
11:53 - app component inside of it rather than
11:56 - wrapping all the component inside of our
11:58 - app.js
12:00 - I hope that makes sense so in our
12:02 - index.js file we are just going to
12:04 - import the browser router again so we
12:07 - say
12:08 - import browser
12:11 - router and inside of our react. strict
12:13 - mode we're just going to call the
12:18 - component and simply paste our app
12:21 - component inside of it this offers a
12:23 - more robust way of wrapping our
12:24 - component inside of our browser router
12:27 - to use the routing functionality
12:29 - all right so now we just have to go back
12:31 - to our app.js and remove the browser
12:33 - router component we called here since we
12:35 - are now using it in our index.js
12:41 - file now with this we have set up our
12:43 - application to use the routing
12:45 - functionality in the next lesson we will
12:48 - see this in action when we create
12:50 - different pages and switch between them
12:52 - in real time using other powerful react
12:54 - router
12:56 - components welcome back to this lesson
12:58 - guys
12:59 - now let's go over a few react router
13:02 - components before we head over to our
13:03 - code and start using
13:05 - them in the previous lesson we saw how
13:08 - we can set up our application to use
13:10 - router functionality by wrapping our app
13:13 - component in the browser router
13:15 - component now to actually Define a route
13:18 - to another page in our browser we use
13:21 - the route component of the react router
13:24 - Library the route component is used to
13:27 - define a route and specify ify the
13:29 - component to render when the URL matches
13:32 - that
13:33 - route it takes two main props it takes a
13:37 - path prop which specifies the URL
13:39 - pattern to match and an element prop
13:41 - which specifies the react component to
13:43 - render when the URL matches the
13:47 - path now let's head back over to our
13:49 - code and see how we can define a route
13:51 - to take us to another page in our
13:53 - browser and display the component we
13:55 - want to render in that
13:57 - page back in our code let's clear the
14:00 - jsx in our app component and change it
14:02 - to a homepage route component so I'm
14:05 - just going to cut the div over here
14:08 - everything inside the div from the
14:10 - header I'm going to cut that and then I
14:12 - will Define a home component right above
14:14 - the app
14:16 - component just like
14:24 - this and then the home component is
14:26 - simply going to return a H1
14:30 - that
14:31 - says
14:34 - homepage just like
14:37 - this right below it let's create an
14:40 - about us component which we will render
14:42 - in another page so
14:45 - const about
14:52 - us and this is going to return a H1 that
14:55 - says about us
14:58 - page
15:01 - just like
15:03 - this this should be this should be this
15:07 - should be small letter H
15:10 - right all right now let's use router
15:12 - components from react router Dom to show
15:15 - these individual components based on URL
15:18 - path specified first let's import it so
15:22 - over here at the top of our file we just
15:24 - have to say
15:27 - Import in inside craes
15:33 - route from
15:37 - react router
15:41 - Dom all right now that we've imported
15:43 - our route component from react router
15:45 - Dom so inside our app function let's
15:48 - define our route components and display
15:50 - our Pages
15:52 - individually so in here we just have to
15:54 - see
15:56 - route just like this
16:00 - like I said before the route component
16:02 - takes two props a path prop and an
16:04 - element prop so in here we have to
16:07 - specify the path in which we will follow
16:09 - to reach that page in our browser so
16:11 - path is going to be equal to for the
16:13 - homepage we want it to be the root of
16:15 - our URL so over here we're just going to
16:17 - put a for slash which signifies the root
16:20 - of our
16:21 - URL also if you want to render an app to
16:24 - be the root of your url apart from
16:26 - adding a four slash in your path we
16:28 - should also add an exact keyword this is
16:30 - going to make sure our route outputs the
16:32 - right component at the exact root of our
16:35 - project right so now we need to add the
16:37 - element
16:40 - prop and this is going to take the react
16:43 - component which is going to be rended
16:45 - when the user goes to the path so at the
16:48 - root URL of our project we want to
16:50 - display the homepage so in here just
16:52 - like we display components we are just
16:54 - going to display our home
16:56 - component now that we Define our new r
16:59 - Let's test it before we add the second
17:01 - route which is going to be our about
17:02 - page so let's head back to our browser
17:04 - and see if this actually
17:07 - works as you can see we have an error
17:09 - which says a route is only ever to be
17:11 - used as the child of rout element so
17:14 - what does this error mean react is
17:17 - telling us that we can only render a
17:19 - route inside of a route component not a
17:22 - div container as we have done back in
17:24 - our
17:26 - code the routes component apart from
17:29 - being the plural of Route it helps in
17:31 - rendering a single route exclusively by
17:34 - wrapping multiple route components
17:35 - within it if no match is found a default
17:39 - not found component can be
17:41 - rendered I know this might sound
17:43 - confusing at the beginning but let's
17:45 - actually see how this works and it
17:46 - should be really easy for you to
17:48 - grasp so instead of having our div over
17:51 - here we just have to turn this div into
17:53 - a route
17:55 - component just like this and again vs
17:58 - code automatically imported it for me
18:00 - but you can go up here you can go up
18:03 - here add a comma and add the route here
18:06 - so now we've imported our route and our
18:09 - route and that's what we have here so in
18:11 - order for you to have a route component
18:13 - you need to wrap it inside of a routes
18:16 - component that is the only way you can
18:18 - have rout that leads to other Pages now
18:21 - if I head back to our code in the
18:22 - browser you can see it works perfectly
18:24 - for us we have the homepage component
18:27 - displaying all right so let's head back
18:31 - to our code and actually create another
18:32 - route for the about us component we
18:34 - created earlier so inside of our route
18:37 - component let's copy and paste our home
18:39 - route and then change it to go to the
18:41 - about us page so since we said the exact
18:44 - keyword should only be used for the root
18:47 - URL over your project we need to remove
18:49 - it here since we want to add another
18:52 - path so over here after the four slash
18:55 - we just need to specify A New Path for
18:57 - our bter page which is going to be about
19:00 - and then we change the element to be
19:01 - rendered to our abouts element just like
19:05 - this I think this should be pretty
19:06 - intuitive now let's head back to our
19:08 - browser and see if this actually
19:10 - works over at the URL let's add a fourth
19:13 - slash about for the new route we created
19:16 - and if I hit enter you can see we have a
19:18 - new component being rendered for us
19:20 - about us
19:24 - page okay guys I need you guys to clone
19:26 - this repo as it has all the boiler plate
19:29 - code needed for this project so there's
19:31 - going to be a link in the description
19:33 - that leads to this repo right so all you
19:36 - have to do is click on this code copy
19:39 - this link open your
19:42 - terminal
19:44 - CMD and then you simply get clone and
19:49 - then you paste the link and then you hit
19:51 - enter now this is going to clone the
19:53 - entire repo into your computer and if
19:55 - you come to the source folder over here
19:57 - the component you see we have a list of
19:59 - components these are all the components
20:01 - we need with the boiler plate code to
20:04 - begin working with react router all
20:07 - right I'll see you in the further videos
20:10 - all right now that we've created our
20:11 - user.js file and we've pasted our boiler
20:13 - plate code let's head back to our app.js
20:17 - and add a new route so in our app.js
20:19 - just like we have our home and about us
20:21 - route I'm just going to copy one of them
20:24 - and I'm going to change the path to
20:26 - users and the component is going to to
20:28 - be our users component which we just
20:33 - created all right that's it let's head
20:35 - back to our browser and see if this
20:37 - actually works in the URL we are going
20:40 - to go to for/ users hit
20:43 - enter you can see that works perfectly
20:47 - fine in the next lesson we are going to
20:50 - learn how to navigate between Pages
20:52 - specifically from our users page to our
20:54 - home page that is going to be a fun one
20:56 - to
20:57 - learn
20:59 - welcome back guys now let's see how we
21:01 - can navigate from the homepage to the
21:03 - user's page in react router there are a
21:06 - couple of ways we can navigate between
21:08 - Pages the link component of the react
21:11 - router Library allows us to achieve this
21:13 - without reloading our application as a m
21:16 - HTML anchor tag might
21:19 - do let's see how we can achieve
21:22 - this back in our homepage let's import
21:25 - the link component from react router Dom
21:28 - so so above so here I'm just going to
21:31 - say import
21:34 - link from react router Dom just like
21:40 - this so if I scroll to the bottom of our
21:42 - map function over here after the H1
21:45 - loading let's make use of our link
21:47 - component and actually see how it
21:49 - navigates us from one page to another so
21:52 - I'm just going to create an opening and
21:53 - closing tag for our link component just
21:56 - like this and then we can put our
21:58 - placeholder to be go
22:03 - to
22:04 - users
22:06 - page just like this but before this link
22:10 - component can dynamically navigate us to
22:12 - another page we have to specify the
22:14 - route of the page we want it to take us
22:17 - to for that the link component has a
22:20 - prop that takes a URL path as its
22:23 - value let's see how that works inside
22:26 - opening tag of our link component we are
22:27 - going to type
22:29 - to as in to is equal to and then opening
22:33 - and closing codes and this is where we
22:35 - specify the URL path we want this link
22:38 - to take us to when we click on it for
22:41 - this case we simply put for/ users as
22:45 - that is the page we want it to navigate
22:47 - us
22:48 - to all right let's head back to our code
22:51 - and see if this works now in our
22:53 - homepage let's just give it a
22:55 - Reload somewhere at the end of our
22:57 - homepage you can see we have a button
22:59 - that says go to users's page although
23:02 - this button is not properly formatted we
23:05 - just need to test it and see how to
23:07 - navigate from one page to another in the
23:09 - upcoming lessons we are going to make
23:11 - this even better now if I click on this
23:13 - button you can see it takes us to the
23:15 - users's page and that works perfectly
23:17 - fine so we use the link component within
23:20 - our GSX to navigate from one page to
23:25 - another each time you use the HTML
23:27 - anchor tag to navigate get from one page
23:29 - to another it reloads your entire
23:31 - application and the state has to restart
23:34 - but when we use the react router link
23:36 - component it just kind of changes the
23:38 - component that is being rendered on the
23:39 - screen without altering the state of any
23:42 - other component within our application
23:44 - and this is really
23:47 - powerful all right welcome back to this
23:50 - lesson guys in this lesson we will set
23:53 - up our
23:54 - Navar here we learn how to deal with
23:56 - components that need to be in all our
23:58 - Pages like a naar and footer component
24:01 - using nested
24:03 - routing first of all let's handle
24:05 - showing our naar in all pages regardless
24:07 - of the route and then we will make
24:09 - changes to our Navar file to dynamically
24:11 - navigate us to different pages on bottom
24:15 - Clicks in order to be able to render our
24:18 - Navar component in all pages we need to
24:20 - Nest all needed components inside our
24:23 - nav bar
24:24 - route let's head back to our app.js file
24:28 - and then we Define our nafar route so
24:30 - inside of our rout we are just going to
24:32 - create another
24:34 - route and since we will Nest other
24:37 - component inside of it we will create it
24:39 - with opening and closing tags just like
24:42 - this then let's import our Navar
24:47 - component just like
24:50 - this and then we pass our Navar
24:52 - component as our element
24:55 - prop just like this
25:01 - and then for the path prop we just add a
25:03 - f
25:04 - slash the path has to be a for slash
25:07 - because we want it to appear in all
25:09 - other sub routes nested within it and
25:11 - that will not clash with our homepage
25:13 - path because the exact keyword we use
25:15 - there will simply make sure that is the
25:18 - exact component that shows on that
25:22 - path now let's cut all other routes and
25:25 - Nest them inside of our Navar
25:27 - route
25:32 - just like this with this our nav
25:34 - component will show up in every route
25:36 - nested inside of it let's head back to
25:38 - our browser and see if this actually
25:42 - works so if I refresh the
25:46 - page you can see that we clearly have a
25:48 - problem only the Navar component is
25:51 - being displayed let's try going to the
25:53 - user page to see if we have the same
25:55 - problem over there
25:57 - too for/ users I hit enter as you can
26:01 - see even at the users page we have only
26:03 - the Navar being
26:05 - displayed the problem here is that
26:08 - although we nested all other components
26:09 - inside of our nav and we said that
26:11 - should work we actually needed a way to
26:14 - tell our nafar component to render child
26:16 - components nested inside of
26:19 - it for that react router offers an
26:22 - outlet component that allows us to do
26:24 - this let's go to an na. JS file and make
26:27 - use of this comp component in real
26:31 - time first let's import the outlet
26:34 - component from react router D so over
26:37 - here I'm just going to
26:38 - import outlet from react router just
26:42 - like this then since we want to render
26:45 - all other child components right below
26:47 - our
26:47 - nav in between the nav HTML tag and the
26:51 - container tag we simply imput our Outlet
26:54 - tag so over here we say Outlet
27:02 - just like
27:03 - this now if we head back to our browser
27:06 - and refresh the page as you can see we
27:09 - have the nav bar and the home component
27:12 - showing let's go to the users page and
27:14 - see if that works
27:19 - too all right that works now that we've
27:22 - seen how we can Nest rout with our nav
27:25 - by example let's head over to our code
27:27 - and make sure our Navar links actually
27:30 - take us to the appropriate pages when we
27:32 - click on
27:34 - them back in our navb bar. JS file if we
27:38 - recall in previous lessons we said that
27:41 - using basic HTML anchor tax for
27:43 - navigation is usually a bad
27:46 - idea I mean we can easily specify the
27:48 - path we want within each anchor tag but
27:51 - the problem is that they reload our
27:54 - application this means that whenever we
27:56 - navigate to another route in our
27:57 - application
27:58 - using an anchor tag your app State
28:01 - resets and that is simply not
28:04 - ideal so the solution to this as you may
28:06 - have guessed is the react router link
28:09 - component this is the same component we
28:12 - used when we tested navigation between
28:16 - Pages now let's use that here as well so
28:19 - we first need to import link from react
28:21 - router doome over here where we imported
28:23 - our Outlet we just need to add a
28:26 - comma and also import the link
28:29 - component and then we can simply clear
28:31 - our anchor tag along with it HF and
28:33 - change it to our link tag so over here
28:36 - I'm just going to clear the HF plus the
28:38 - anchor tag and change this to a link
28:42 - tag all
28:44 - right so the link tag takes a prop for
28:48 - the URL path to take us to when it is
28:50 - clicked so over here the prop is two as
28:54 - in T is equal to and in here we can
28:57 - specify path we want it to take us to so
29:01 - in quotes we are just going to put a
29:02 - four slash since we want to go to the
29:04 - homepage when we click on the git
29:05 - explorer
29:07 - link all right let's also change the
29:10 - anchor tag here to a link
29:13 - tag and specify the path we want it to
29:15 - take us to to also be a for slash
29:18 - because the homepage is also the page
29:20 - that shows the repost right so this is
29:23 - going to take the same path as the git
29:25 - explorer link all right let's do this
29:28 - same for our users anchor tag we just
29:31 - going to clear anchor tag here put a
29:33 - link component and then the path to take
29:36 - us to is going to be for SL
29:39 - users all right let's head back to our
29:42 - browser and see if this actually
29:44 - works back in our browser since we're on
29:47 - the users page over here if I click on
29:49 - the git Explorer it should take us to
29:51 - the home page right now as you can see
29:54 - that works let's also click on the users
29:56 - link and see if it takes to the user's
29:59 - page all right that works and you can
30:01 - see how this works instantaneously that
30:03 - is because our application doesn't fully
30:05 - reload it only renders a new component
30:07 - when we click on the link since we use
30:09 - the react router link component to
30:11 - achieve this all right in the next
30:15 - lesson we are going to create a page not
30:17 - found Route that shows up when a user
30:19 - goes to a route that doesn't match any
30:21 - route we
30:23 - defined all right guys welcome back to
30:26 - this lesson in this lesson we are going
30:28 - to create a default route that renders
30:31 - whenever a user goes to an unmatched URL
30:33 - in our browser so let's create a not
30:36 - found. J file inside of our component
30:39 - folder not found.
30:44 - J let's create an export our GSX so we
30:48 - can see
30:50 - const not
30:53 - found equal to an arrow
30:56 - function and this is simply going to
31:00 - return and this is simply going to
31:02 - return a
31:05 - div this is simply going to return a div
31:08 - tag inside of our div we can define a H1
31:11 - tag that says page not
31:20 - found and below that we can use a link
31:24 - we can use a link
31:26 - tag
31:28 - that says go back to homepage go back
31:33 - to homepage and inside the link tag we
31:38 - can specify the path to take us to which
31:40 - is simply the four slash to take us back
31:42 - home we actually need to import our link
31:44 - component from react router so I'm just
31:46 - going to say
31:47 - import link and I have a suggestion here
31:50 - from react
31:51 - router and then right below we just need
31:54 - to export our component export default
31:59 - not found another
32:03 - typo
32:05 - okay now let's head over to our app.js
32:08 - and import our new not found
32:13 - component so over here we're just going
32:15 - to
32:16 - import not found from component not
32:20 - found all right since this route is
32:23 - meant to show up whenever a user goes to
32:25 - a page that doesn't exist it makesense
32:28 - for us to render it as a standalone
32:30 - route that means we don't have to Nest
32:33 - it inside of our nafar component so
32:36 - right below our Navar closing
32:39 - route we can create another
32:42 - route just like this and set our element
32:46 - prop and set our element
32:50 - prop to be our not found
32:54 - component not found just like this
32:59 - now comes the important
33:01 - thing again since we want the not found
33:03 - component to always show up in every
33:06 - route that doesn't exist in our
33:08 - application the value of our path prop
33:11 - which I'm going to create the value of
33:13 - our path prop is going to be the wild
33:16 - card
33:19 - symbol just like
33:23 - this with this whenever we go to an
33:25 - unmatched rout this will be the comp
33:27 - component that will pop up let's test
33:30 - that out so back in our browser let's go
33:32 - to a route we know we never created in
33:35 - this application so let's just try F SL
33:40 - product and hit
33:42 - enter as you can see we have our not
33:45 - found components being rendered for us
33:47 - let's try another random route so I'm
33:49 - just going to put a random word here hit
33:52 - enter and we still have our not found
33:54 - page and if we click go back to homepage
33:58 - this works perfectly fine as you can see
34:01 - if you also click on the users page this
34:03 - works perfectly fine but as soon as we
34:05 - go to a route that doesn't
34:08 - exist we should see our not found
34:10 - component being rendered to us over here
34:14 - all
34:17 - right hello guys welcome to this lesson
34:21 - in react router the route parameters
34:23 - allow you to Define dynamic segments in
34:25 - your routes these Dynamic segments can
34:28 - be extracted from the URL and used as
34:31 - variables in your
34:33 - component this feature is particularly
34:35 - useful when you have routes with Dynamic
34:37 - data such as user profiles product
34:40 - details or blog post Pages these are
34:43 - just
34:44 - examples now let's see how we can make
34:46 - use of Route parameters and dynamic
34:48 - routing in our
34:54 - application so we say
34:56 - import user
34:59 - profile all right after that we simply
35:02 - create a route for it we want the na bar
35:05 - to display inside this page so we will
35:07 - Nest it inside of our nav route so in
35:10 - here let's create another
35:16 - route and then we give it an element
35:22 - prop of our user profile
35:25 - component just like this
35:28 - and the path prop is going to be for/
35:32 - users for/
35:35 - user all
35:38 - right let's head over to our browser and
35:41 - actually see if this works so in our
35:43 - browser we simply need to change the url
35:45 - to to for/ users and for/ user just like
35:51 - this and as you can see that instantly
35:53 - works it shows my GitHub profile my
35:56 - username my name my location my location
36:00 - my bio and my profile image all right
36:03 - this works
36:05 - perfectly now we are going to implement
36:08 - a functionality for this page to show a
36:10 - profile for whichever user we click from
36:12 - the user's list
36:14 - page so whenever we click on this view
36:17 - user we want it to show we want to
36:19 - navigate to this page and show whichever
36:21 - user we clicked from that page right
36:25 - however since the profile page is route
36:27 - on it own we can't pass props to
36:31 - it so the solution to this problem is
36:34 - adding URL parameters to our route so
36:37 - that means we can add another parameter
36:39 - to this
36:41 - URL and then grab the value of that
36:43 - parameter within our code using react
36:46 - routers use params function now let's
36:49 - actually see how we can add parameters
36:51 - to our URL and grab that within our
36:54 - code in our app.js file we only need to
36:57 - add a column and then the name of the
36:58 - parameter we are looking for over here
37:01 - inside the path we first of all need to
37:03 - add a for Slash and then a column and
37:06 - then the name of the parameter we are
37:08 - looking for within our
37:10 - component so we are looking for the
37:12 - user's usern name so we simply add that
37:16 - here so we simply type
37:20 - username just like this
37:25 - cool then we can go to our user profile
37:28 - component and grab that parameter
37:33 - value so above I'm just going to
37:36 - import use params from react router
37:41 - Dom just like
37:44 - this then inside of our component
37:46 - function we can grab the parameter we
37:49 - want by destructuring it from the use
37:51 - params function so we are just going to
37:53 - say const then we D structure username
37:59 - is equal to use params and this is a
38:02 - function just like
38:05 - this this has to be the exact value we
38:07 - gave it in our route component back in
38:09 - our app.js file right now with this we
38:14 - have our parameter value and to actually
38:16 - test this out let's just create a H1 tag
38:19 - over here and call the username
38:20 - parameter to see if this
38:26 - works
38:37 - all right let's head over to our code
38:39 - refresh the page and see if this
38:41 - actually works so as you can see we have
38:43 - a page not found here because we no
38:46 - longer have a page that has this path
38:48 - rather the path we have has another
38:50 - parameter it's looking for which is the
38:52 - username parameter so here let's just
38:54 - add the random username value so I'm
38:57 - just going to to say for Slash
38:59 - adom and if I hit enter we have the Adam
39:03 - keyword over here which is the URL
39:05 - parameter we added let's use another
39:07 - value to actually see if this works so
39:09 - I'm just going to say John if I hit
39:11 - enter This Is Now
39:13 - John as you can see this is how we can
39:16 - add parameters and get it within our
39:18 - component using the use params function
39:20 - from react router D now we want to pass
39:24 - this parameter to our GitHub API URL
39:26 - inside of our effect
39:31 - function over here where we have my
39:33 - GitHub username we can just change this
39:36 - to a dynamic value just like this and
39:39 - then we can add the
39:41 - username instead of this being a static
39:43 - value of my username this is now going
39:46 - to be whatever parameter we inut in our
39:49 - browser let's actually head back over to
39:51 - our browser and see if this works Let's
39:54 - test the username
39:56 - John
39:58 - and as you can see we have John John
40:00 - appears to be a potato Let's test
40:03 - another username and let's say
40:07 - Angela Angela also works Angela appears
40:10 - to be a Wonder Woman cool as you can see
40:13 - this works let's remove this H1 tag it's
40:15 - actually messing things up so I'm going
40:17 - to remove it over here as you can see
40:20 - this clearly works if we give this
40:21 - parameter a username it's actually going
40:24 - to bring up that GitHub user's profile
40:27 - and displayed for us over here let's go
40:29 - back to the username we used before
40:30 - which is my username I'm just going to
40:32 - say
40:33 - colosa now you can also try this by
40:35 - imputing your GitHub username and see if
40:37 - it actually works but as you can see it
40:39 - clearly works for
40:40 - us finally let's head over to our
40:43 - users's component and see how we can
40:45 - navigate to the user's profile page when
40:47 - a button is
40:50 - clicked to do that we simply change this
40:52 - button over here to a link tag so I just
40:56 - going to change it to a link tag
40:57 - and we actually need to import that from
40:59 - react rout import
41:03 - link
41:05 - link from react ROM just like this the
41:09 - path we're going to specify should be to
41:11 - the user profile page so we need to grab
41:13 - the username and pass it to the path so
41:16 - instead of using codes we are going to
41:18 - use btics and then let's start with the
41:20 - path which is for SL users for SL user
41:24 - and then for Slash and now we are just
41:26 - going to use the user name value as our
41:28 - parameter so we say dollar call braces
41:32 - and that should be user. login just like
41:36 - this this is the value for our user
41:39 - username now if I head back to our code
41:42 - if we now click on this view user link
41:44 - it should take us to the user profile
41:45 - page and actually display this specific
41:48 - user's profile all right let's test that
41:50 - out let's start with this first user if
41:53 - I click on the link as you can see we
41:55 - have this user's profile this is their
41:57 - user user name their name their
41:59 - location and their follow account if we
42:02 - go back and select another random user
42:05 - such as this one you can see this also
42:07 - shows their profile if this lesson for
42:10 - some reason seems confusing to you don't
42:12 - worry too much you are going to get
42:14 - enough practice in this course to grasp
42:16 - all the concepts and become confident
42:18 - with
42:20 - them in this section we'll be learning
42:22 - about programmatic
42:24 - navigation but what is that programmatic
42:27 - navigation in react router refers to the
42:30 - ability to navigate between different
42:31 - routes in your application using
42:34 - JavaScript
42:35 - code instead of relying on user
42:37 - interactions like clicking on links or
42:39 - buttons programmatic navigation allows
42:41 - you to programmatically trigger out
42:43 - changes based on certain conditions or
42:46 - events in your
42:50 - application now let's head over to our
42:52 - code and see how that works after that
42:55 - let's head over to our app.js file and
42:57 - create a new route for it so in our
42:59 - app.js first of all let's import it
43:03 - import search
43:05 - user and then still inside of our
43:08 - navigation route since we want this to
43:10 - also have our Navar we're just going to
43:12 - create a new route inside of
43:14 - there so the element prop is going to be
43:18 - our search user
43:20 - component just like
43:23 - this and the path URL is simply going to
43:26 - be f / search just like this now let's
43:31 - go to our browser and see if this
43:35 - works refresh the page and there we go
43:38 - we have it it's a simple form with one
43:40 - with one input and a submit
43:43 - button all right we will make use of the
43:46 - use navigate hook of the react router to
43:49 - programmatically navigate between
43:51 - Pages the use navigate hook allows us to
43:54 - navigate between Pages without the need
43:56 - of components
43:58 - so far we've only been navigating using
44:00 - the link component now let's see how we
44:02 - can do the same thing programmatically
44:05 - using the use navigate hook if we head
44:07 - over to our users. JS file over
44:14 - here you see we have a link component
44:17 - that handles navigation for
44:22 - us let's change this to a Buton HTML tag
44:27 - just like
44:30 - this now we can navigate to any page we
44:33 - want without actually using a link
44:35 - component thanks to the use navigate
44:37 - hook let's import it and see for ourself
44:41 - so over
44:42 - here right beside the link component we
44:45 - can just say use
44:48 - navigate and then we initialize it into
44:50 - a variable so we say const
44:53 - navigate is equal to use
44:57 - navigate just like this now we've
45:00 - initialized it into a variable which we
45:02 - can now use anywhere in our
45:06 - code now let's head down to our button
45:09 - tag and let's make use of the hook
45:11 - inside of an unclick Handler so inside
45:13 - of our opening button tag we are just
45:15 - going to use an unclick Handler here and
45:18 - inside of the unclick Handler we can
45:19 - call our use navigate function all right
45:22 - now let's declare an arrow function and
45:25 - then here
45:27 - we can call our navigate
45:29 - function just like
45:31 - this so when we use the link component
45:34 - we navigated to the user's profile page
45:36 - and pass the username as the path
45:38 - parameter we're going to do exactly that
45:40 - over here so we're going to use back
45:42 - ticks and URL path is
45:44 - users and URL path is forward SL users
45:48 - for
45:50 - sluser and then the username so here
45:52 - we're just going to grabb our username
45:54 - variable dollar cbra and then we are
45:57 - just going to
45:59 - say user.
46:02 - login which is the value of our username
46:05 - just like
46:07 - this all right let's head back to our
46:09 - browser and see if this actually works
46:12 - I'm just going to go to the users page
46:14 - allow that to load and let's click on
46:16 - this and let's click on this view user
46:18 - button to see if that actually works we
46:20 - click on it yes as you can see we are
46:23 - still getting navigated to our user
46:25 - profile page and everything works
46:27 - perfectly
46:29 - fine and you can really see the
46:31 - convenience of this the Ed navigate hook
46:33 - has made it possible for us to trigger
46:35 - navigation from any HTML tag you can
46:38 - have an image with an onclick Handler
46:41 - using the use navigate hook to redirect
46:43 - users to another page when the image is
46:46 - clicked in this lesson we would learn
46:48 - how to redirect or navigate a user to a
46:51 - specific page based on application logic
46:54 - let's head over to our search user.js
46:56 - File
46:57 - over here and immediately import the use
46:59 - navigate Hook from react router Dom so
47:03 - above we're just going to say import use
47:06 - navigate from reactor just like
47:10 - this well as you can see we have a
47:13 - handle get user function over here that
47:15 - is triggered inside of our handle submit
47:18 - function don't worry too much about
47:20 - these inside the handle get user
47:22 - function we send the request to the
47:25 - GitHub API to get a specific user for us
47:28 - and then there's an if statement to
47:29 - check if that user actually
47:32 - exists so inside this if statement we
47:35 - want to navigate the user to the profile
47:37 - page if the user searched does exist and
47:40 - if the user doesn't exist we have a
47:42 - catch method over here that displays the
47:44 - message user does not exist and the
47:46 - number of attempts you have
47:48 - left
47:51 - right this is a typical use case for
47:53 - programmatic redirect think of this as
47:55 - an authentication function it where your
47:58 - users attempt to log to your website and
48:00 - then you redirect them to another page
48:02 - after successful
48:04 - authentication let's see how that works
48:06 - for this application first of all we
48:08 - import our use navigate Hook from react
48:10 - router Dom which I have already done
48:12 - over here and then down here let's
48:15 - initialize it into a variable like we
48:17 - did in our previous lesson so we say
48:20 - const navigate is equal to use
48:25 - navigate
48:27 - just like
48:29 - this then inside of our if statement
48:32 - when the user is found we call the
48:33 - navigate object which we just created
48:36 - and then in parenthesis we imput the
48:38 - page we want to navigate to just like we
48:40 - did in the previous lesson so we say
48:43 - navigate parenthesis and then the page
48:46 - we want to navigate the user to when
48:49 - this works in this case we want to
48:51 - navigate the user to the user's
48:53 - profile so we are going to use back
48:55 - ticks
48:57 - for SL users for SL user and then the
49:01 - user which was
49:03 - searched so we say dollar craes that
49:06 - should be dollar not four dollar craes
49:09 - and then the username
49:12 - uted all
49:14 - right now let's head over to our browser
49:17 - and see if this actually works so back
49:20 - in our browser we just have to go to
49:22 - for/
49:24 - search just like this
49:28 - and then let's try and search for a
49:29 - possible GitHub user let's try the name
49:33 - Jonathan I hit enter all right Jonathan
49:37 - does exist and then you see we have
49:38 - Jonathan's GitHub profile over here
49:41 - let's attempt a random name that might
49:43 - not exist so in here I'm just going to
49:45 - put random
49:46 - characters submit and as you can see we
49:48 - have our error message user does not
49:51 - exist two attempts remaining let's head
49:54 - back to our search user.js File we have
49:57 - a use effect hook inside of which we
49:59 - have an if statement that is meant to
50:01 - tell the user they out of attempts so
50:04 - inside of here we also want to redirect
50:06 - the user back to the homepage after a
50:08 - few
50:09 - seconds so when the user runs out of
50:12 - attempt instead of just saying too many
50:14 - attempts redirecting we want to actually
50:16 - redirect the user back to the homepage
50:19 - after a few
50:21 - seconds and for that we are going to use
50:23 - a timeout function so right below our
50:26 - set error over here we're just going to
50:28 - call a set
50:29 - timeout set timeout
50:33 - function and we're going to set this
50:35 - time out to 3 seconds so this is going
50:38 - to run after 3 seconds and inside here
50:41 - we can call our use navigate function to
50:43 - navigate the user back to the homepage
50:46 - when this is
50:47 - triggered again we we already initiate
50:49 - our use navigate hook over here so we
50:51 - can use that variable inside of our
50:53 - timeout
50:55 - function
50:57 - so here we simply say
50:59 - navigate and then we specify the URL we
51:02 - want to navigate the user to which is
51:04 - our homepage so we inut for slash over
51:07 - here let's also add the navigate
51:09 - variable as our user effect dependency
51:11 - so over here I'm just going to add it
51:14 - navigate just like this all right let's
51:17 - head over to our browser and see if this
51:19 - actually works so back in our browser
51:22 - I'm just going to refresh the page now
51:24 - let's attempt a random username we know
51:26 - can not be a username for a GitHub user
51:29 - all right I'm just going to inut random
51:31 - strings hit enter now as you can see
51:34 - user does not exist two attempts
51:36 - remaining submit the form again we now
51:38 - have one attempt remaining submit the
51:40 - form again too many attempts redirecting
51:43 - after 3 seconds as you can see we get
51:45 - redirected back to our
51:48 - homepage this is exactly what we wanted
51:50 - and that
51:52 - works now at the end of this course we
51:55 - will build a project that uses more
51:57 - complex navigation that is where you
51:59 - will solidify all of these Concepts and
52:01 - become a pro in react router so don't
52:03 - worry too much if you don't understand
52:05 - all of this concept at this time by the
52:07 - time we build more complex projects you
52:09 - will understand all of this concept
52:11 - pretty much
52:13 - easily in this lesson we are going to be
52:16 - talking about route guards route guards
52:19 - in the context of react router refers to
52:22 - a mechanism that allows us to control
52:24 - access to routes based on certain
52:26 - conditions or rules they are used to
52:29 - protect certain routes in your
52:31 - application and ensure that the user
52:33 - meets certain criteria before accessing
52:35 - those routes a typical use case of this
52:38 - are pages that hold sensitive data and
52:40 - requires a user to log in to access that
52:44 - page all right let's head back to our
52:46 - code and see how that works our o
52:49 - profile component is similar to the
52:50 - single user component but it has a bit
52:53 - more information and obviously shows the
52:55 - logged in users GitHub profile as we
52:58 - will see
52:59 - shortly whereas in the login.js
53:01 - component we have a login functionality
53:04 - with a Dy user object that redirect us
53:06 - to the Earth profile page when the user
53:08 - is successfully logged
53:10 - in so this is the dmy user object you
53:13 - can change it to whatever object you
53:15 - want and then this is what we're are
53:16 - going to be using to log in I just kind
53:18 - of used this to mimic a login scenario
53:21 - so we don't have to be playing around
53:22 - with any live
53:24 - apis all right if you want to change
53:26 - username just make sure it's actually a
53:28 - username that exists inside of GitHub so
53:31 - this doesn't return an error when we are
53:33 - working but you can just leave it at
53:35 - mine and we are going to work with that
53:36 - perfectly we'll see how we can protect
53:39 - the Earth profile component and make it
53:41 - only accessible when the user is
53:43 - authenticated now let's see how we can
53:45 - achieve that first of all let's head
53:47 - over to our app.js
53:50 - file and let's create individual routes
53:52 - for our login and Earth profile Pages
53:55 - again we will Nest it in inside of our
53:56 - Navar route and then here we can create
53:59 - another
54:02 - route just like
54:10 - this we set the first element to our
54:13 - login
54:17 - component and then we can set the path
54:21 - to Simply Be for slash login just like
54:24 - this I'm just going to copy and paste
54:26 - this and then we'll change the component
54:28 - to our o profile
54:29 - component obviously you have to import
54:32 - that above and then we can change the
54:35 - path to Earth profile just like
54:42 - this after that we need to define a few
54:44 - State values for our authentication to
54:46 - work we need a username State variable
54:49 - so still inside of our app.js we're just
54:52 - going to create a state variable say
54:55 - const
54:57 - username and then set
55:00 - username then we can set that to where
55:03 - you
55:05 - state just like this we also need an is
55:09 - loged State variable just like we have
55:11 - our username over here we just have to
55:13 - create another one and say
55:15 - const is
55:20 - logged set is
55:24 - logged and then we simply pleas set that
55:27 - to false this is going to be a Boolean
55:30 - that holds the state of the
55:31 - authentication all right so let's just
55:34 - put code over here all
55:37 - right now in our login route inside of
55:39 - our login component we need to pass a
55:41 - set is logged prop and a set username
55:44 - prop so let's just Define them here set
55:47 - is logged is equal to set is
55:51 - loged just like this and then we also
55:54 - pass set you username as the set
55:57 - username
56:00 - prop just like this now for our o
56:03 - profile we only need to add the username
56:05 - prop so in here we're just going to say
56:08 - username and then we put our username as
56:11 - the
56:13 - value all
56:15 - right now let's test this component and
56:18 - see if they actually work before we got
56:20 - the route if we head back to our browser
56:23 - and go to for/ login First
56:27 - and then in our login.js file you can
56:30 - see that the dmy user object we have is
56:32 - set to username colosa and then password
56:35 - 1 2 3 4 5 so make sure this is the exact
56:37 - username and password you inut if not
56:39 - this is not going to work all right so
56:43 - here I'm just going to
56:44 - say colao and then our password will be
56:48 - 1 2 3 4 5 if I hit submit as you can see
56:52 - it takes us to the Earth profile page
56:54 - over here and it says your profile and
56:56 - it has my GitHub profile information all
56:59 - right that works perfectly now let's
57:01 - Implement route guarding so whenever we
57:03 - come to this
57:05 - component actually let's refresh and see
57:07 - what happens you see we have nothing
57:09 - displaying here which means the user is
57:12 - not authenticated and we don't actually
57:14 - know which user to grab from GitHub
57:16 - because there's no authenticated user so
57:18 - we need to guide this route so whenever
57:20 - a user attempts to come to this route
57:22 - without being authenticated they get you
57:24 - directed back to the login page
57:26 - I hope that makes
57:28 - sense let's head back to our code and
57:30 - see how that works all right so react
57:33 - shter offers a component called navigate
57:37 - this is different from the used navigate
57:38 - hook the navigate component prevents a
57:41 - page from showing up and redirect to
57:43 - another page based on our application
57:45 - logic let's see how that
57:48 - works still inside of our app.js file
57:51 - let's import the navigate from react
57:52 - router
57:55 - d so up here just where we have the
57:58 - route and routes from react rout adom
58:00 - we're just going to add a
58:02 - comma and call the
58:05 - navigate just like this or this is
58:08 - supposed to
58:09 - be a comma not a full stop all right now
58:13 - as we've important the navigate
58:14 - components let's see how we can use that
58:16 - to protect our
58:17 - route so obviously the route you want to
58:20 - protect is the earth profile
58:22 - route and the way we do that inside of
58:24 - our element prop we are going to add a
58:27 - condition to check if the user is logged
58:30 - or not and if the user is logged we want
58:32 - to display this Earth profile component
58:35 - if not we'll use the navigate component
58:37 - to redirect the user back to the login
58:39 - page inside of our element prop of the
58:41 - earth profile route we are just going to
58:43 - add a condition here and say so we use a
58:45 - tary expression so we say it's
58:48 - logged and then a comma and this simply
58:51 - means if it's
58:53 - logged do this and then at the end we
58:57 - are going to add a column else we need
58:59 - to do something else and this is where
59:01 - we are going to use our navigate
59:02 - component so we call the
59:06 - navigate just like this so first of all
59:09 - what this logic basically does is it
59:11 - checks if the user is logged and if that
59:14 - is true it's going to show the Earth
59:15 - profile component if not this navigate
59:18 - component is going to trigger now inside
59:20 - this navigate component let's specify
59:22 - what pages to navigate back to if the
59:25 - user is not authenticated
59:26 - inside the navigate component let's pass
59:28 - a replace prop to it just like this and
59:31 - this basically means we want to replace
59:32 - this route with another route all right
59:35 - so after the replace and then we add a
59:37 - to prop and tell you what route to go to
59:41 - so we want to take the user to the login
59:43 - page if the user is not
59:45 - authenticated I think this is pretty
59:47 - intuitive so the navigate component
59:49 - replaces this route with the login route
59:53 - if the user is not logged that's
59:55 - basically what what this whole line of
59:56 - code does all right let's head back to
60:00 - our browser and see if this actually
60:02 - works so back in our browser Let's test
60:05 - that by simply trying to go to the off
60:08 - profile page from the URL if I hit enter
60:11 - you see we keep getting redirected back
60:13 - to the login page and if I try that
60:15 - again as you can see if I hit enter we
60:17 - keep getting navigated back to our login
60:19 - page and that works now let's actually
60:22 - log in and see if we get redirected to
60:24 - the Earth profile page properly
60:27 - so we've seen one side of the coin now
60:28 - let's log in and see if it works colao
60:31 - and then password 1 2 3 4 5 if I hit
60:35 - submit now you can see we have our off
60:38 - profile page rendering for us that's
60:40 - because we logged in and the user is now
60:43 - authenticated and that's why this works
60:45 - if I try to reload this page we should
60:47 - get redirected back to our login route
60:50 - since our application state is going to
60:52 - restart all right let's reload and see
60:55 - as you can see see we get redirected
60:57 - back to the login page and again let's
60:59 - try to go to the Earth profile page
61:00 - dynamically from the URL if I hit enter
61:03 - we still get redirected so this is how
61:05 - you protect routes in react router using
61:08 - the navigate
61:09 - component again I can understand if this
61:12 - is a bit overwhelming for a start but
61:14 - just as I assume you now know perfectly
61:17 - how to create a route and use the link
61:19 - component to navigate between Pages you
61:21 - will get enough practice to grasp every
61:23 - other concept regarding react router as
61:26 - we move into building project in the
61:28 - later sections of this
61:30 - course all right guys welcome to this
61:34 - lesson in this lesson we'll reconstruct
61:37 - our nav bar and add a few links to it so
61:40 - just code along with
61:43 - me so we are going to add two more links
61:46 - our search our search link so we just
61:49 - say link so we create a link
61:52 - [Music]
61:54 - component
61:56 - and we set the
61:58 - path for/
62:02 - search and you should have a closing tag
62:05 - actually and the value is going to be
62:08 - search just like this I'm just going to
62:11 - copy and paste this and then we'll
62:13 - create one for our o our o user
62:16 - profile so that should be o
62:20 - profile and then we are just going to
62:23 - see profile and last we need to add a
62:27 - link to the login
62:29 - page but what we want to do is we only
62:31 - want the login link to appear when the
62:34 - user is not logged in so to do that we
62:37 - are going to take an is logged prop so
62:39 - we say it's logged and then we'll use
62:41 - that to check if the user is logged and
62:43 - that is the only time we want to display
62:45 - our login button or link all right so we
62:48 - add the logic here and say if not it's
62:51 - logged so if it's logged is false that
62:54 - is the only time we want the login
62:56 - button to appear so in here we just copy
62:59 - and paste this oh we need to use the and
63:03 - Operator just like this so if the button
63:06 - is logged this will happen so we want to
63:09 - log
63:10 - in the path will be loging and the value
63:13 - will be loging all right so if I head
63:16 - back to the browser and refresh um now
63:19 - let's try and login we can see we have
63:21 - the buttons here we have the search
63:23 - profile and login so all of these should
63:26 - work we have the search button the
63:27 - profile button obviously we added the
63:29 - logic obviously we added the route guard
63:32 - that doesn't allow us to access the
63:33 - profile page unless we are logged in so
63:36 - that is why if we click on the profile
63:37 - link it brings us back to the login page
63:40 - all right now that we're in the login
63:41 - page let's actually login and see if the
63:43 - login link is going to disappear
63:45 - afterwards so the username is kosa and
63:48 - the password is 1 2 3 4 5 I hit
63:53 - submit or it takes us to the profile
63:55 - page but the login but the login link is
63:58 - still there that's because we forgot to
64:00 - pass the is logged prop back in our
64:02 - app.js file so over here um in the login
64:06 - in the Navar Ned route inside the Navar
64:09 - component we just add the prop is logged
64:12 - and then we'll grab this is logged value
64:14 - over
64:15 - here just like this now as you can see
64:19 - the login link has disappeared and if I
64:23 - refresh and if I refresh as you can see
64:25 - we now I have it if I log in
64:35 - again 1 2 3 4 5 I hit submit and login
64:40 - link disappears all right that's that's
64:42 - the only thing we wanted to do for this
64:44 - lesson and in the next section we'll
64:46 - move into more advanced topics on react
64:48 - router thank you so much for watching
64:50 - this lesson and I'll see you in the next
64:54 - one
64:56 - in this lesson we will explore using
64:57 - animations in react router for a better
65:00 - user
65:01 - experience all right we will use react
65:04 - transition group to achieve this you can
65:06 - use other libraries like frer motion or
65:08 - any other one you want as well I chose
65:11 - react transition group simply because
65:13 - it's easy and uses pcss for its
65:15 - animation so everyone should be able to
65:17 - follow along all right let's install
65:21 - react transition group in our project
65:23 - now let's head to our terminal and
65:24 - terminate the process
65:26 - and then we do npm install react
65:34 - transition
65:35 - group just like this we hit enter and
65:39 - allow that to
65:41 - install all right once that's done
65:44 - installing let's do npm start again so
65:47 - we have our project running throughout
65:50 - sorry for the noise in the background
65:51 - apparently my neighbor is having a
65:54 - construction all right we we have our
65:56 - project back up and running now let's
65:58 - head back to our app.js file and we need
66:00 - to import two components from react
66:02 - transition group we need the switch
66:04 - transition
66:05 - component so let's
66:08 - import switch transition
66:12 - component the switch transition
66:14 - components basically act as a wrapper
66:16 - for all elements or routes in this case
66:19 - that will inherits from the transition
66:20 - animation the other component we need
66:22 - from react transition is CSS transition
66:25 - so we say CSS transition as you can see
66:28 - we have a suggestion here so these are
66:30 - the two transition components we need
66:31 - from react transition to achieve our
66:33 - goal all
66:36 - right so in order for this to work we
66:39 - need to Nest our entire route component
66:42 - inside of our switch transition and CSS
66:45 - transition components so let's define
66:47 - them up here so we say switch
66:50 - transition and then inside of it we also
66:53 - create the CSS transition tag just like
66:56 - this then we cut our entire route
66:59 - component and everything inside of it
67:02 - and then we paste it inside our CSS
67:04 - transition component just like this so
67:07 - what we just did is we basically just
67:09 - wrapped our entire routes inside of
67:12 - switch transition and CSS transition
67:15 - components all
67:17 - right but before this can work we need
67:20 - to define the animation effect we want
67:22 - during the transition the time it should
67:24 - take and a value that tracks our
67:26 - navigation so the animation can always
67:28 - trigger when the route changes I hope
67:31 - that makes sense let's actually see how
67:33 - that works in code to give you a better
67:36 - understanding so back in our app. CSS
67:38 - file let's define the animation we want
67:40 - for our transition we are going to add a
67:42 - fade animation so just code along with
67:44 - me so we say dot fade so we say fade
67:50 - enter so this is the animation that will
67:52 - start so we want opacity to be
67:57 - zero and then we also want dot
68:00 - feed enter
68:05 - active this is the animation that happen
68:07 - during the transition so here we set the
68:10 - opacity not object F opacity back to
68:14 - one and let's define a
68:17 - transition let's define a transition
68:19 - group of
68:22 - opacity we want 300 seconds 300
68:26 - milliseconds and then we want the ease
68:29 - in effect all right so this is the
68:31 - animation that will happen during the
68:33 - transition and this is the one that will
68:35 - happen when the transition begins I hope
68:37 - that makes sense then next we also need
68:39 - a fade exit as the name implies the
68:42 - animation that will happen whenever the
68:44 - transition is about to exit so we still
68:47 - want the opacity here to be
68:49 - one and then lastly we want the fade
68:53 - exit active
68:56 - so this is the last effect that will
68:57 - happen in the transition and here we
69:00 - want the opacity back to
69:02 - zero then the
69:04 - transition transition group of
69:10 - opacity want 300 milliseconds again and
69:13 - then is
69:15 - out I think this is pretty
69:17 - straightforward this is the animation
69:19 - that will trigger when the transition
69:21 - starts this is the animation that will
69:24 - trigger during the transition and this
69:25 - is the animation that will trigger when
69:27 - that when the transition is exiting and
69:29 - then finally we have the animation that
69:31 - will trigger at the end of our
69:33 - transition I hope that makes sense now
69:36 - that we've defined our CSS transition
69:38 - let's head back to our app.js and make
69:40 - use of it inside of our transition
69:42 - component we are going to give it a
69:44 - class name of
69:48 - fade now the fade class name we've given
69:50 - to the CSS transition will be able to
69:52 - track all the animations we defined in
69:54 - our app CSS please don't also forget to
69:57 - import your app. CSS in your app.js file
70:00 - if not this will not work all right now
70:03 - that we've defined our animation there
70:04 - are also a few things we need to do in
70:06 - order for this to work now let's add the
70:08 - timeout prop so we say timeout we want
70:11 - this to run under 300 milliseconds just
70:13 - as we defined in our CSS over here we
70:16 - set our transition property to run under
70:19 - 300 milliseconds and I think that makes
70:21 - sense to also Define the same inside of
70:23 - our timeout prop so in here we're just
70:25 - going to say
70:28 - 300 and then also we want to unmount our
70:31 - animation when it's done so we just add
70:33 - an unmount prop over
70:35 - here
70:37 - unmount unmount on exit this basically
70:40 - is going to remove our animation when
70:42 - it's done running so that means whenever
70:45 - this class is activated and done running
70:48 - we are going to unmount the animation so
70:49 - the user can view the page all
70:53 - right now we've defined our animation
70:55 - and its timeout and what happens when
70:57 - it's done running but we also need a way
70:59 - for our CSS transition component to
71:01 - track our navigations so it actually
71:03 - triggers whenever a user actually
71:05 - navigates and react router offers a used
71:08 - location hook that does exactly that so
71:11 - let's import used location from react
71:12 - router
71:14 - Dom up here where we imported other
71:16 - react router components and hooks we can
71:19 - just add it over here say
71:21 - use location just like that now let's
71:25 - initiate it into a variable so we say
71:28 - const location is equal to use
71:33 - location just like
71:37 - this so still inside our CSS transition
71:41 - component let's add our location to its
71:43 - key prop so we say key is equal to
71:48 - location so we say key is equal to
71:50 - location so we want the path name from
71:52 - our location hook so we say location do
71:55 - path path
71:56 - name all right I hope that makes
71:59 - sense so the last thing we need to do is
72:02 - actually pass our location hook to our
72:04 - route so it changes the location
72:06 - variable whenever the user navigates and
72:09 - that is how the CSS transition is going
72:11 - to be able to track our location and
72:14 - actually Implement our transition so
72:16 - inside of our route component we are
72:18 - just going to add the location prop so
72:20 - we say location is equal to
72:23 - location as simple as this now whenever
72:26 - the route changes the route component is
72:29 - going to change our location value which
72:31 - is going to be detected by our CSS
72:33 - transition and then the animation is
72:35 - going to activate I hope that makes
72:37 - sense and then before we head over to
72:39 - our browser inside our switch transition
72:42 - component at the head level we give it a
72:45 - component
72:46 - prop and this usually takes a component
72:50 - in the case where you have like a rapper
72:51 - component that has custom CSS but since
72:54 - we don't have a wrapper
72:56 - component we are just going to give it a
72:58 - value of null all
73:01 - right now let's finally head back to our
73:03 - browser and test this out let's refresh
73:06 - the
73:07 - page and then let's click on one of the
73:10 - links from the Navar if I click on the
73:12 - users
73:14 - link you can see the nav bar animat but
73:17 - if you look at our main component it
73:18 - doesn't animate upon transition let's go
73:21 - back to the user page pay closer
73:23 - attention and see see the Navar animate
73:25 - and then the component changes abruptly
73:27 - that is not what we want we want the
73:29 - entire page to animate not just the
73:33 - nfar so what's the problem so this is a
73:37 - problem with nested routes as you can
73:39 - see we nested all of our routes inside
73:41 - of our nafar route here the easier
73:44 - solution to this is to unest our routes
73:46 - and find a better way to display our
73:49 - nafar now since we want the nafar in all
73:51 - of our Pages we can head to our index.js
73:54 - file where we have our browser router
73:56 - component wrapping our app component and
73:59 - we can simply add our nav component
74:01 - above it so in here we can have our
74:04 - Navar
74:05 - component just like this this will do
74:07 - the exact same thing we wanted when we
74:09 - nested the component inside of our nav
74:11 - component now with this we can unest our
74:14 - component so let's actually delete our
74:16 - nav
74:21 - route just like this and with this we
74:24 - have unnested our component all of our
74:27 - components now sit right inside of our
74:29 - route component and this na component
74:32 - will now be able to track all of our
74:34 - navigations since all other routes are
74:36 - directly under
74:38 - it as well as this might seem this is
74:41 - the
74:42 - convention and it really does offer a
74:44 - more robust way to display our Navar
74:47 - let's actually head back to our browser
74:49 - and see if this works now back in our
74:51 - browser if I refresh you see we still
74:53 - have our nav exactly the way it used to
74:55 - be before we unnested the component now
74:58 - let's click on one of these links from
75:00 - our Navar and see if everything animates
75:03 - if I click on users you see we have a
75:05 - smooth animation all over our page if I
75:08 - click on login we have animation let's
75:10 - actually test our
75:12 - login and if we log
75:15 - in we still have our animation being
75:17 - displayed for us if we head back to our
75:20 - homepage you see our animation works
75:22 - perfectly the way we want it to
75:25 - it's okay if this lesson was confusing
75:27 - or overwhelming for you we just need
75:30 - more practice to grasp these Concepts as
75:32 - with everything in this industry and
75:34 - that practice you are going to get
75:35 - enough of it as we build more projects
75:37 - in the later part of this
75:41 - course all right guys welcome to this
75:44 - lesson in this lesson we are going to
75:46 - learn how to implement lazy loading for
75:49 - improved
75:50 - performance but what is lazy
75:52 - loading in simple terms lazy loading is
75:55 - a design pattern it allows you to load
75:58 - parts of your application on demand to
76:00 - reduce the initial load time for example
76:04 - you can initially load the component and
76:06 - modules in the homepage then you can
76:08 - load the rest of the components based on
76:10 - user
76:11 - navigation now let's see how we can
76:13 - Implement lazy loading in react
76:16 - router first we identified the routes
76:19 - and components that we need to Lazy
76:22 - load these are typically components that
76:24 - are not required immediately when the
76:26 - application loads so for us those will
76:29 - be all other components apart from our
76:31 - homepage components so that means we can
76:34 - lazy load all other routes and
76:35 - components apart from our homepage
76:38 - route then we replace the input
76:40 - statement of those components with
76:42 - Dynamic input using react lazy
76:45 - function let's see how that works we are
76:47 - going to start with our users's
76:49 - component and see how we can import that
76:51 - using react lazy so down here we are
76:54 - just going to say
76:56 - const
76:59 - users and this is going to clash with
77:01 - this component but eventually we are
77:02 - going to have to delete this so let's
77:04 - just see how that works for now so con
77:06 - users then is equal to so we are going
77:09 - to grab the lazy Hook from react so that
77:11 - will be
77:13 - react
77:16 - La just like this and this takes a
77:19 - fallback function as you can see for the
77:21 - component we want to import so in here
77:24 - we are just going to declare an arrow
77:27 - function and then import the component
77:30 - we want to import since this is for the
77:32 - users component we are simply going to
77:34 - import it here so we are just going to
77:36 - copy the import path from the direct UT
77:38 - we did copy and then we'll paste it in
77:43 - here that's all so this is basically how
77:46 - we lazy load a component we simply
77:48 - import it using react. La just like this
77:51 - and we're having this error because the
77:53 - users is already defined op here now
77:55 - let's clear the direct UT since we've
77:57 - imported it using react
77:59 - lazy all right now let's do the same for
78:02 - all of our component except for our
78:03 - homepage component since we want to Lazy
78:05 - load all other components as you can see
78:08 - we don't have react imported
78:10 - here so I'm just going to import now
78:12 - let's actually the structure lazy from
78:14 - react rather than having react. La we
78:16 - can simply have lazy so where we have
78:19 - our react input next to our use State
78:21 - we're just going to say
78:23 - lazy
78:26 - and then we can remove the react just
78:28 - like this to do this for the rest of the
78:30 - component I'm just going to copy and
78:32 - paste this
78:33 - code and then we simply start changing
78:36 - them one by one next let's do the same
78:38 - for our user profile page so I'm just
78:40 - going to copy the name user
78:42 - profile and then the path to the
78:48 - component paste it in here next I'll do
78:52 - for our search user component chck CH
78:55 - this and then we copy the
78:58 - path and then we update this also next
79:02 - we'll do the same for login
79:04 - component change this and then we copy
79:07 - the
79:10 - path and then we update that
79:13 - also oh sorry I I mistaken click contr
79:17 - C and then we we replace that
79:20 - also we still have a few other
79:22 - components to do so let's just copy and
79:24 - paste all of these again so you have
79:27 - like three we have our o
79:31 - profile copy the
79:36 - path and then we paste it in here so
79:39 - we'll do the same for about
79:42 - component so over
79:44 - here and then we copy the
79:48 - path and then update
79:50 - it so we are not going to Lazy load our
79:53 - homepage component because because that
79:55 - is the component we want to load
79:56 - immediately a user enters the
79:58 - application so it doesn't make sense to
80:00 - Lazy load that component we have an
80:02 - extra input here which is not needed can
80:04 - clear that and then all the components
80:06 - we've lazy loaded we can simply remove
80:08 - all their direct input so I'm just going
80:10 - to copy from o profile down to our user
80:13 - down to our user profile oops we forgot
80:15 - our not found component which we want to
80:17 - Lazy load also so I'm just going to
80:19 - create another
80:21 - one add our not found component and then
80:24 - we copy the
80:28 - path just like this and then we can
80:31 - remove
80:33 - that we no longer have our naar in the
80:35 - app.js file so we can also remove
80:38 - that and then yes we also Las loaded our
80:41 - about us page so that can go now instead
80:44 - of directly importing all components
80:46 - we've Las loaded some of them and those
80:48 - are the ones we don't need when the
80:50 - application initially loads so the home
80:52 - component that is needed when the
80:53 - application loads immediately is going
80:55 - to load way faster than it used to
80:57 - because all other components have been
80:59 - delayed all right as much as this offers
81:02 - a better performance for application if
81:04 - the application is big enough it can
81:06 - still mean that a user has to wait for a
81:08 - lazy loaded component to load when they
81:10 - try to access that component and they
81:12 - will see a white or blank page for a few
81:14 - seconds that is really not ideal for
81:16 - user experience well react offers a
81:19 - component called suspense and this
81:21 - component provides a solution to that
81:23 - problem let's import the suspense
81:26 - component and then see what it does so
81:29 - import suspense so the suspense
81:31 - component allows you to show a fall back
81:33 - UI while the lazy loaded component is
81:35 - being loaded so we can create a simple
81:37 - H1 that shows loading or some other
81:39 - components of our choice before the L
81:41 - loaded component finish
81:43 - loading let's see how that works
81:46 - actually now all we need to do is we
81:48 - need to wrap our route inside of our
81:50 - suspense component so I'm just going to
81:53 - cut the route over here and everything
81:55 - inside of it and then we declare our
81:57 - suspense
81:59 - component and inside of here we can
82:01 - paste our routes all right and then we
82:04 - can Define our fallback prop say
82:06 - fallback and here we can put in a
82:08 - component we want to show before the
82:10 - lazy loaded components actually show up
82:13 - so for this one we just want to show
82:14 - loading we can easily use a H1 tag H1
82:19 - that shows
82:21 - loading just like
82:23 - this now now if we head back to our
82:25 - browser and test this we might not see
82:27 - the loading from the suspense component
82:29 - and that's because this application has
82:31 - relatively small component so they
82:33 - should be able to load up pretty quickly
82:35 - even when we are using lazy loading
82:37 - let's see for
82:39 - ourselves so let's go to the homepage so
82:42 - if we go to the homepage and refresh our
82:44 - application let's try navigating to
82:46 - another page and see if we will see our
82:48 - loading you see we don't see any loading
82:51 - this might be because of the animation
82:53 - we added or or this might also be the
82:55 - fact that our users page is a relatively
82:57 - small component so it doesn't need a lot
82:59 - of time to load
83:01 - up but by the time you have a complex
83:03 - and big application this is a real game
83:05 - Cher so if you don't get any errors as
83:08 - you are testing yours and everything
83:09 - seems to be working fine that's a great
83:11 - sign and you can just assume it works
83:14 - but by the time we build more complex
83:15 - applications you really see the power of
83:17 - lazy
83:21 - loading all right my friends welcome to
83:24 - this
83:25 - lesson in this lesson we'll learn about
83:28 - code splitting and Route
83:30 - configuration instead of defining routes
83:33 - in line you can create a separate
83:35 - configuration file to manage your route
83:37 - this approach allows for better
83:39 - organization and separation of code you
83:42 - can Define any array of Route objects
83:44 - that specify the path component and any
83:46 - other necessary properties for each
83:48 - route then you can map over this array
83:51 - to render the route dynamically let
83:54 - let's see how that
83:55 - works first back in our code let's
83:58 - create a route. JS file since this is
84:00 - not going to be a component we are not
84:02 - going to create this inside of our
84:03 - component folder so inside of our source
84:06 - folder rather we're going to create
84:09 - we're going to create the file routes.js
84:12 - and this is where we are going to
84:14 - dynamically Define our routes so this is
84:16 - going to be a list of objects containing
84:18 - all our routes so we say
84:21 - export const and then we are going to
84:24 - name it
84:26 - upout and this is going to be a
84:30 - list all right before we actually Define
84:33 - the object let's import all of our page
84:36 - components into this file so we can
84:38 - simply go back to our app.js file and
84:40 - copy all the lazy imported components
84:42 - over here first go back to our route. JS
84:47 - write above our routes then we paste
84:48 - that in just like this you can see we
84:51 - also need to import um lazy from react
84:54 - so we're just going to import
84:58 - lazy and that should be from react just
85:02 - like this so we're also going to import
85:04 - our home component as it's not part of
85:06 - these so home um we don't have a
85:09 - suggestion
85:11 - here import
85:14 - home
85:17 - from for SL component for slash home
85:21 - just like this now all of our components
85:23 - we need I imported over here now let's
85:26 - create the routes for them inside of our
85:29 - square bracket let's create object for
85:32 - them so each route needs a path and
85:35 - component property so let's define the
85:38 - path we're going to start with our hom
85:40 - page so the path for our homepage is
85:41 - obviously just a for slash because it's
85:43 - the
85:44 - index and then the
85:47 - component are going to define the
85:49 - component and we're going to set that to
85:51 - our home just like this now we can
85:54 - simply copy and paste this object and
85:56 - modify it for each route but before we
85:59 - actually do that I want to bring
86:00 - something to your attention there's one
86:02 - more property we need to add if we head
86:05 - back to our app.js
86:08 - file we have a guarded route over here
86:11 - which is our Earth profile route and
86:13 - this route is only going to be
86:15 - accessible to the user if the user is
86:17 - authenticated now if we Define our
86:19 - routes Mainely by having a path and
86:21 - component it's going to be difficult for
86:23 - us to render our guarded route so for
86:26 - that we are going to add another
86:27 - property which is
86:30 - requires which is requires o and we're
86:34 - going to Define this in all of our
86:35 - routes and set it to fals where it is
86:37 - not needed our homepage doesn't need the
86:39 - user to be authenticated to display so
86:41 - we are going to set that to false and
86:43 - when we get to our Earth profile we're
86:45 - obviously going to set that to true now
86:47 - let's copy and paste this object and
86:48 - modify it for each of our routes copy
86:51 - paste I'm just going to paste like five
86:53 - of it and then and change them one by
86:54 - one first now let's move to our login
86:58 - for/ login and that will take login
87:02 - component it doesn't require us now
87:05 - let's go to our users page for/ users
87:09 - and going to take the users component we
87:11 - not user profile now here is where we
87:14 - are going to add our o profile component
87:17 - o
87:20 - profile and this is the component that
87:23 - needs the user to be
87:25 - authenticated so the component is O
87:28 - profile and requires o is now going to
87:31 - be true this is what I was talking about
87:34 - all right what other Pages do we have um
87:36 - we have user profile and search user so
87:39 - we just going to say for/ search I think
87:41 - that's what we used that should be
87:44 - search user component it doesn't require
87:47 - off and then we need like three
87:51 - more um what else what else what else or
87:55 - profile user profile what did we what
87:58 - was the route for the user profile we
87:59 - defined let's check that um user profile
88:04 - is for SL user oh it's for SL user for
88:09 - SL okay this is our user profile path I
88:12 - just going to copy
88:15 - that
88:18 - um where is it okay I just space that in
88:22 - here all right so we just say user
88:26 - profile doesn't require authentication
88:29 - what other routes about us are not
88:32 - found so here we just want
88:37 - about about us doesn't require
88:39 - authentication and then for the last
88:41 - one so the last one is going to be our
88:43 - not found component and this is going to
88:45 - be the wild card symbol or Star I think
88:48 - we've explained this before so whenever
88:50 - the user goes to another page that is
88:52 - not defined within this
88:54 - um the not found component is going to
88:56 - display so let's actually change that
88:58 - not found it doesn't require
89:00 - authentication all right now we defined
89:03 - all of our routes inside of this route.
89:05 - JS file now let's head back to our
89:06 - app.js and implement this first of all
89:09 - let's import our rout so
89:14 - import up rout all right in the route
89:18 - wrapper over here we're going to clear
89:20 - all the route inside of
89:22 - it and then we are going to open col
89:25 - braces and use a map function to map
89:27 - through all of our U routes we defined
89:29 - in our routes.js file so that means
89:32 - we're just simply going to do app
89:34 - route
89:36 - map and then for each
89:38 - route we want to render and in here we
89:42 - are going to Define how each route is
89:44 - rendered all right if you recall we have
89:47 - a route that is guided which means the
89:49 - user can only access that route only if
89:51 - the user is authenticated I know I've
89:53 - said this a billion times before for so
89:54 - just bear with me so now we'll start by
89:57 - adding a condition that checks if a
89:58 - route needs authentication to render and
90:00 - then we'll put the logic there and if
90:02 - not we'll just display the route to the
90:04 - user so just code along with me so we
90:06 - say
90:07 - if
90:08 - route do
90:11 - requires if route does requires
90:14 - us and then not is logged so we want to
90:19 - check if the user is not authenticated
90:22 - for the route that requires authentic
90:24 - if that is the case we want to return
90:26 - the user to the login page just like we
90:29 - did before using the navigate component
90:31 - from react router all right so if this
90:33 - case is
90:34 - true we simply
90:38 - return so we are going to return a
90:42 - route and then in
90:45 - here we can simply pass the key property
90:48 - to it and this is going to be
90:52 - route do
90:55 - path and then we want this to be
90:59 - exact and then and then the path
91:03 - prop is going to
91:05 - be route.
91:09 - path just like
91:14 - this and this is where we Define the
91:16 - redirect component if you recall we use
91:19 - the navigate component to redirect the
91:21 - user back to the login page if the user
91:23 - is is not authenticated for pages that
91:25 - require authentication so this element
91:28 - prop is simply going to be our navigate
91:32 - navigate
91:34 - component is going to navigate it's
91:36 - going to replace this component and it's
91:39 - going to take the user
91:41 - to um for slash
91:44 - login should be for slash just like
91:49 - this so if this condition is false so we
91:51 - say else every other route will be
91:54 - accessible so simply we just render the
91:56 - rest of the route inside of our else
91:58 - statement so else want to
92:03 - return here we Define a
92:06 - route and inside the route we give it a
92:09 - key
92:10 - prop off
92:12 - Route do
92:16 - path we add the exact prop and then the
92:20 - pth
92:22 - prop is going to be
92:26 - route.
92:29 - path and then the
92:33 - element the element is going to be now
92:37 - the element over here obviously needs a
92:39 - react component so we can't just say
92:41 - route do component we have to declare
92:44 - that as an element by itself so here
92:47 - open angle bracket and you can see
92:49 - route do
92:52 - component
92:54 - just like this and this is how we add
92:57 - our rout in our element prop all right
93:00 - if we head back to our code you can see
93:02 - this works perfectly for our hom page
93:04 - but a problem might arise when we try to
93:06 - get to the authenticated user profile
93:10 - page you can see we have an error set
93:12 - username is not a function let's see
93:15 - what this is back in our components
93:17 - let's go to the login.js file you can
93:20 - see the login component takes props set
93:22 - is logged and set username and so does
93:24 - the Earth profile. JS file this
93:27 - component also takes a username prop and
93:30 - back in our route we didn't specify any
93:32 - prop for the route over here we can
93:34 - simply pass our props inside of our
93:36 - element property over here so inside
93:38 - react. component and if you also hover
93:41 - over it you are going to see the props
93:43 - some of the components need and that
93:45 - shows you that you can actually Define
93:46 - them inside of this place so where you
93:49 - have route. component we can simply pass
93:51 - our props set is logged come from set is
93:55 - logged which we already defined over
93:58 - here as you can see we also need the set
94:01 - username and
94:02 - username so we have set
94:05 - username set
94:09 - username and then
94:11 - username will be equal to
94:16 - username so when we Define the props
94:18 - like this whichever component needs one
94:20 - of them is just going to pick it up now
94:22 - let's head back to our code and see if
94:24 - this works
94:25 - now let's try and log in so the username
94:29 - is
94:30 - kosa and the password is 1 2 3 4 5 if I
94:34 - hit submit we have a page note found
94:37 - over here did we make a mistake in our
94:39 - routing let's go back to our rout and
94:44 - see oh the problem is that we set the
94:47 - path to app profile rather than off
94:50 - profile so let's change that going to
94:52 - change this
94:54 - to Earth profile just like this if I
94:56 - head back to our
94:58 - browser let's
95:01 - refresh let's try and login
95:05 - again 1 2 3 4 5
95:09 - submit as you can see everything works
95:12 - fine let's refresh our page to see if
95:14 - the Earth profile route is still
95:17 - protected so if I click the profile we
95:20 - get redirected to our login page because
95:22 - the user is not authenticated so that
95:24 - functionality still works and again if I
95:26 - log
95:28 - in 1 2 3 4 5 you see the page is now
95:32 - accessible all right everything seems to
95:34 - be working perfect so if we head back to
95:37 - our code and go to our app.js you see
95:39 - our code looks more robust and whenever
95:41 - we want to add a new route we can just
95:43 - go to our routes.js file and then we can
95:46 - handle implementing that routing over
95:48 - here that's a lot more convenient than
95:50 - having everything clustered in your
95:52 - app.js file
95:54 - all
95:56 - right hello guys so I've been mentioning
96:00 - that there's going to be another project
96:02 - where we will solidify our knowledge of
96:04 - react
96:05 - router but I know that there will be a
96:08 - majority of you who are okay with what
96:10 - you've learned already and you don't
96:12 - need more to understand these
96:14 - concepts for that reason the course will
96:16 - end after one more lesson but in order
96:19 - to keep my promise for those of you who
96:21 - will want to build another project with
96:23 - me to understand Rea better I have
96:26 - uploaded the last project over at my
96:28 - YouTube channel and you can go ahead and
96:31 - watch it over there I want to
96:34 - congratulate you and thank you at the
96:36 - same time for watching the course till
96:37 - the end I really really hope you have
96:40 - become better using react router last
96:43 - but not the least if you like my
96:45 - teaching style and would like to see
96:47 - more and related courses from me I ask
96:49 - that you subscribe to my YouTube channel
96:51 - and stay tuned
96:57 - all right guys welcome to the final
96:59 - lesson of this section before we head
97:01 - over to building a project from scratch
97:03 - by ourselves which is where you solidify
97:05 - your knowledge of react router all right
97:09 - in this lesson we just want to make sure
97:11 - if we click on this button over here it
97:13 - takes us to the user detail page and
97:16 - also if you click on this it takes us to
97:17 - a repo Details page right now if you
97:20 - click on it it does nothing and it's
97:22 - actually a button inside of a button so
97:24 - we're going to fix that um and just see
97:26 - how everything works I just need you to
97:28 - code along with me so if we go back to
97:30 - the home. we first of all we need to
97:32 - tackle um this user button here to take
97:35 - us to the user Details page all right
97:38 - that should be this so this button we
97:41 - simply need to turn it should we turn it
97:43 - into a link or we should just use um a
97:47 - navigate I use a navigate function here
97:50 - let's see let's try turning this to a
97:52 - link first and see how it looks like so
97:55 - we're just going to say two and I should
97:58 - go to for/
98:00 - users let me just check the UR let me
98:03 - just check the route name again user
98:06 - Details page user users user and then
98:09 - the username all right back to our
98:14 - homepage
98:16 - users
98:18 - user and then for
98:21 - slash oh we need to use back to um but
98:24 - that's okay I'm just going to remove
98:27 - this and
98:30 - this okay that should be user.
98:34 - login oh yeah this is it user. owner.
98:37 - login so we just copy that and paste in
98:40 - here just like that let's head over to
98:43 - our browser and test it okay it doesn't
98:46 - look like a button anymore we want it to
98:48 - look like that so I think it would be
98:50 - better we just use the button elements
98:52 - rather than the link elements
98:54 - um but if I click on it okay it works
98:56 - let's head back and try that again
98:58 - actually um now let's let's click on
99:02 - this guy over
99:03 - here all right it works but like we said
99:06 - we want we want it to be we want this to
99:08 - be button and not a link actually we can
99:11 - just leave this like this we don't
99:12 - really need to turn this to a button
99:14 - because if we turn into a button it
99:16 - would be quite the same as this I think
99:18 - it's better we just leave it at a as a
99:20 - link all right that one is done now we
99:22 - are just going to fix this can see it's
99:24 - kind of like we have um nested buttons
99:26 - in here we don't want that we want a
99:28 - single button that has an on click
99:30 - element or we can WRA we can wrap a link
99:32 - element inside of each rather so this is
99:35 - it here as you can see view repo it's a
99:38 - button inside of a button and we are
99:40 - simply just going to turn this into a
99:42 - link
99:43 - two so we won't be using any us navigate
99:46 - function over here so link that is going
99:50 - to link to um view repo okay the page we
99:54 - need to view the repo detail hasn't been
99:56 - created so we need to go ahead and
99:57 - create that let's head back to our route
99:59 - and add a path through it so we can just
100:01 - copy and paste this and then we can say
100:04 - repo
100:08 - detail repo detail and that's
100:11 - component and that should be
100:16 - repo detail just like
100:21 - that uh let's add it next to the repost
100:25 - okay that's the homepage let's just add
100:27 - it below before the not found Route so
100:31 - we'll copy the about
100:33 - route paste it in here and then we'll
100:37 - say this should be
100:39 - repo detail and this is supposed to take
100:43 - two parameters right so back back in our
100:46 - repo detail. JS file we have two
100:49 - parameters here we're expecting the name
100:51 - of the repo and the username of the repo
100:53 - owner so we are just going to copy that
100:55 - head back
100:57 - here put to for Slash and then column
100:59 - for the parameter you want we paste that
101:01 - in first we need the name parameter for
101:05 - slash column and then the next parameter
101:08 - this is how we do it so now um just need
101:12 - to use the repo detail does it need
101:15 - authentication no it doesn't all right
101:19 - let's refresh our code back in the
101:20 - browser see if we don't have any errors
101:23 - I refresh um yeah I think you see we
101:25 - don't have any errors now let's
101:27 - implement the functionality where if we
101:29 - click on this button it takes us to the
101:31 - new repo detail page we just created all
101:34 - right back to our
101:36 - homepage so this view repo link over
101:39 - here it should take us for SL repo
101:44 - detail that's just the um the new path
101:46 - we just created we can copy it
101:50 - also SL username and for Slash
101:53 - so back in our home we actually need to
101:56 - take turn this into a back tick since
101:57 - we're adding a variable to the path so
102:00 - we just copy that in here and then we
102:02 - can change them one by one so for the
102:04 - name dollar so this is the name of the
102:08 - repo um I think we use it up here all
102:11 - right so that should be repo
102:14 - name paste that and then the the
102:17 - username of the repo owner that should
102:19 - be repo owner. login you copy
102:25 - that our dollar craes and then we P that
102:29 - in there now I think that should be all
102:31 - let's head back to our browser and see
102:33 - if it works first I'm just going to give
102:34 - it a
102:36 - refresh all right now let's click on the
102:38 - first triple we should now see that it
102:41 - works now we actually added
102:43 - functionality to go to the user Details
102:46 - page when we click on this button so
102:47 - let's test that click on it right takes
102:51 - us to the user detail page everything
102:52 - simp to be working fine all right my
102:55 - friends um we've had to digest quite a
102:57 - lot for this course I know it's a lot
102:59 - for you guys but don't worry when we
103:01 - build the next project from
103:03 - scratch I think that is where you start
103:05 - to grasp this concept and when you also
103:08 - do your own projects afterwards that is
103:10 - when you solidify all the concept for
103:12 - react shter and always remember I'll be
103:15 - here to help you out whenever you need
103:16 - anything at all regarding this course
103:19 - thank you so much for watching this
103:20 - lesson and I'll see you in the next
103:22 - lesson