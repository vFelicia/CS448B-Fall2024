00:00 - in this ios development course you will
00:02 - learn how to create a netflix clone app
00:04 - using swift 5. omer who teaches this
00:07 - course is an ios developer and excellent
00:09 - instructor
00:11 - what is going on guys this is hamr and
00:14 - today we're going to be starting a new
00:15 - series here on youtube where we are
00:17 - going to be building netflix clone from
00:20 - scratch using swift 5.
00:22 - as you can see here
00:24 - the
00:25 - clone that we're going to be building is
00:27 - the exact same replica of the netflix
00:30 - application as you can see here there's
00:32 - a list a bunch of lists of trending
00:34 - movies trending tvs popular movies and
00:37 - upcoming movies and one of my favorites
00:39 - of all time that's operated where you
00:41 - can see here the shoshank redemption and
00:43 - godfather i really like these movies
00:46 - and in today's video we're going to be
00:48 - building this as a final product
00:50 - um as you can see here you can either
00:53 - play or download you can even long press
00:56 - any title where it gives you this cool
00:58 - animation and option to download
01:01 - basically when you click download it's
01:02 - going to be added to this list
01:05 - um also we have here
01:07 - a tab bar where we can actually
01:11 - navigate through a list for um
01:14 - tabs where we have here for example a
01:17 - coming soon tap where it gives you a
01:19 - list for the upcoming um movies and
01:23 - tv series and all that kind of stuff and
01:25 - one of my favorite features that we're
01:27 - going to be building is the top search
01:29 - where we are going to be able to search
01:32 - for
01:33 - our favorite movies like harry potter
01:36 - and whatever movies that you like we
01:38 - have a downloads list
01:41 - um also
01:42 - when you press
01:44 - when you press or tap on any title of
01:46 - those it's going to be
01:48 - taking you directly to the official
01:51 - trailer for the movie you're gonna be
01:54 - having um a controller view where it
01:56 - displays the trailer itself the title of
02:00 - the um the movie
02:02 - and also you're gonna have um you know
02:04 - like a brief about what is this is
02:07 - really about like you can read this
02:08 - after finding a host barry you know the
02:11 - rest um you can just go back in here
02:15 - and
02:16 - yes this is what we are going to be
02:17 - building as you can see here also the
02:19 - navigation bar scrolls with the table
02:22 - view and scrolls back but it sticks to
02:25 - the top when it reaches certain point
02:28 - so let's just start by creating a new
02:30 - xcode project
02:32 - we can select app
02:34 - let's call that netflix
02:38 - and make sure to take storyboard and
02:41 - swift because these are the things that
02:42 - we're going to be using building this
02:44 - application
02:46 - hit next and choose your download your
02:48 - installation folder
02:50 - so uh first of all i'm not going to be
02:52 - working with storyboards so let's just
02:54 - first go ahead and get rid of those
02:57 - you can click on main
02:59 - move to trash
03:00 - then click on the info plus file scene
03:03 - configuration
03:04 - and
03:06 - we can
03:07 - delete the storyboard name
03:09 - um one more thing here
03:12 - let's just
03:13 - hit the netflix clone
03:17 - app we'll just go ahead
03:20 - and
03:21 - hit shift command f let's type main
03:25 - uh let's just select the first one over
03:27 - here and one more time just search for
03:30 - main this is the fastest way you can do
03:32 - it actually so over here you can see ui
03:35 - kit main storyboard we can delete that
03:38 - as well and
03:40 - right now 100 we got rid of the
03:42 - storyboards
03:44 - so right now let's just go ahead to our
03:47 - scene delegate file let's just
03:49 - configure that so that we can work
03:52 - without these storyboards
03:55 - uh we're going to be name renaming this
03:57 - to
03:58 - a windows scene
04:01 - okay and then using this variable over
04:04 - here the window we're going to be
04:05 - assigning new window for our application
04:08 - to be running on so let's just go ahead
04:10 - and type window
04:13 - um
04:14 - is equals to ui
04:18 - window
04:20 - initialize that with the frame
04:22 - um
04:23 - we can see here we can say um
04:27 - window scene dot coordinate space no
04:30 - bounds
04:32 - um next thing you need to write is
04:35 - window
04:36 - dot window scenes window scene
04:40 - um third and um the third thing is
04:44 - window
04:45 - dot root view controller is going to be
04:49 - our view controller over here so let's
04:52 - just
04:53 - make a new instance of that
04:55 - and last but not least window don't make
04:58 - key invisible
04:59 - so what this
05:01 - basically means is that we're going to
05:03 - be assigning this view controller to um
05:07 - to be the root view controller for our
05:08 - application window
05:10 - so um
05:12 - okay so let's just go ahead and see what
05:13 - we're going to be building over here
05:15 - let's just go ahead and open that
05:17 - netflix app um i don't know why this is
05:20 - all about
05:22 - all right yeah okay
05:25 - okay
05:26 - so as you can see here uh we have our
05:29 - home
05:30 - um we have a tab bar here that we can
05:33 - use to you know navigate between the
05:34 - tabs
05:36 - and let's just start by building this at
05:38 - first
05:39 - so um
05:41 - let's go ahead and change that
05:45 - name to you know main tab
05:48 - bar view controller
05:51 - because i like each view controller name
05:54 - to be descriptive about what it does
05:58 - in
05:59 - you know
06:00 - so let's just maintain bar view
06:02 - controller let's just change that as
06:04 - well to ui tab bar controller
06:09 - and here we are going to be making this
06:12 - as a starting point for our application
06:14 - so let's just start
06:16 - um change that one more time
06:19 - let's just go ahead to our main tab bar
06:21 - let's just make a sure everything is
06:24 - working just fine
06:25 - um
06:26 - system yellow
06:28 - i just
06:29 - choose our simulator to be the latest
06:32 - iphone 13 pro max and hit command r for
06:36 - building run this
06:38 - um you know as for the first time it's
06:40 - going to be taking a little time until
06:42 - it's installed oh it actually worked it
06:45 - didn't take much time at all so as you
06:47 - can see here
06:48 - um
06:50 - we've changed the view
06:52 - background color of the main tab bar to
06:55 - system yellow and over here you can see
06:58 - it's a little bit dimmed because this is
07:00 - actually our tab bar that we're going to
07:01 - be using
07:02 - okay
07:04 - so
07:04 - um we have all this let's just create
07:07 - here a folder
07:10 - let's call that controllers oh no
07:13 - something's not right i'm
07:15 - okay controllers
07:18 - and let's
07:19 - um
07:20 - create a new
07:22 - file over here
07:24 - we're going to select the coco touch
07:26 - class
07:27 - um uiviewcontroller let's just call that
07:30 - home
07:33 - press create
07:35 - delete all of that we're not going to be
07:37 - needing that
07:39 - and
07:40 - let's just background color
07:43 - red
07:45 - let's create another one here
07:48 - goku touch the same thing
07:50 - search or i believe it's going to be
07:53 - upcoming
07:55 - up
07:56 - coming view controller
07:59 - okay
08:00 - hit create
08:02 - delete all of that um let's just select
08:05 - another color for it view background
08:07 - color is going to be
08:10 - green um
08:12 - i'll just create the
08:14 - the third one which we have here i
08:17 - believe it's search
08:19 - new controller
08:21 - okay let's
08:23 - do the same thing basically development
08:27 - is all about making
08:29 - um the same pattern over and over again
08:32 - so view the background color
08:35 - uh let's just give it um pink system
08:38 - pink okay and last but not least um
08:43 - one more coco touch glass which is going
08:45 - to be downloads
08:48 - um let's give it a new color as well so
08:52 - that we can identify it once we press on
08:54 - it
08:56 - so let's
08:58 - get that um i don't know what we
09:01 - blew
09:02 - okay
09:04 - so
09:05 - we have here our main tab bar that is
09:08 - going to be having four tabs to press on
09:12 - so let's just
09:13 - initialize that
09:15 - so let vc1 is equal to ui navigation
09:19 - controller root view controller is going
09:21 - to be home
09:23 - and
09:24 - okay pc2
09:26 - ui navigation controller road
09:30 - upcoming
09:32 - one more time
09:34 - p3 equals to ui navigation controller
09:38 - okay
09:39 - search
09:41 - select vc4 is equal to ui navigation
09:45 - controller you
09:47 - okay
09:48 - and if you ask me why the hell we
09:52 - uh added those controllers to a ui
09:54 - navigation controller okay basically
09:56 - um as you can see here let's just go
09:59 - ahead to the application that we're
10:01 - going to be building
10:03 - here's a navigation controller and once
10:06 - we click on any of those it's going to
10:08 - take you to another
10:12 - controller that's going to be pushed on
10:14 - the
10:15 - current one so basically this is why we
10:18 - are adding each one of those to its own
10:20 - navigation controller let's go back to
10:23 - here
10:24 - okay
10:26 - um
10:27 - we want first to change
10:29 - the image
10:31 - or let's just go ahead and set
10:34 - view controllers over here let's just
10:36 - create an array of our vcs so vc1
10:41 - vc2 pc3 and pc4 and maybe let's just set
10:45 - that to true
10:47 - okay let's just go ahead and build and
10:50 - run this and let's see what we've got
10:54 - all right i can see here that we've
10:57 - already uh showing our
10:59 - first vc
11:01 - um let's just
11:03 - press over here and as you can see
11:05 - immediately we can change
11:07 - between
11:08 - the uh tab bars over there so why don't
11:12 - we add um an image for each one of those
11:16 - so that we can easily identify those
11:19 - we're going to be using sf symbols
11:21 - um
11:23 - it's a tool available on the apple
11:26 - website
11:28 - as you can see here we can search for
11:30 - example for house
11:32 - um
11:33 - we're going to be using this
11:35 - as our home
11:36 - uh tab bar image so
11:39 - let's just go ahead and type the eco vc1
11:42 - the tab bar item.image is equals to ui
11:47 - image
11:49 - system name
11:51 - house
11:52 - we're going to be making the same thing
11:54 - over here templar item
11:57 - image
11:58 - ui image and i believe
12:01 - this one name was um
12:04 - [Music]
12:05 - what was this i
12:07 - really have no idea but let's just um
12:11 - play
12:12 - um yeah play circle i believe this is
12:14 - the one so we can copy the name over
12:17 - here
12:18 - we can paste the name over there
12:20 - and boom
12:22 - vc3
12:23 - tab or image
12:27 - okay
12:28 - ui image
12:30 - system name i believe this is called
12:32 - magnum
12:33 - um fine
12:35 - glass
12:37 - um yeah that stands for the search yes
12:39 - and vc4 tab or item dot image
12:43 - is equals to
12:45 - image system name i want to have
12:48 - something that um
12:54 - okay
12:54 - something for the downloads i believe it
12:56 - was called
12:58 - um
12:59 - arrow
13:01 - online something like this
13:03 - we can use that to search oh yeah arrow
13:06 - arrow down to line
13:08 - so let's just copy that name
13:12 - let's add that name over here
13:15 - and
13:16 - boom that's it let's just build and run
13:18 - this
13:19 - and
13:20 - it's easy
13:22 - as this
13:23 - like yes it's really really simple
13:27 - as you can see here
13:29 - um also we can um
13:32 - right pc one tab all right and content
13:36 - color i believe
13:38 - um i don't believe it's number one
13:42 - vc1 dot
13:44 - title
13:45 - home if you see two dot title
13:50 - um coming
13:52 - vc3 though title
13:55 - search
13:57 - um i believe it's stop search
14:00 - um let's just make sure that we're
14:03 - naming that correctly
14:05 - okay
14:06 - um home coming soon top searches and
14:09 - downloads okay home
14:12 - coming soon
14:24 - just write that correctly
14:29 - boom building one
14:31 - and yes we have all of this over here
14:35 - um i believe one last thing that we need
14:37 - to do is just um
14:40 - let's just
14:41 - set that to
14:43 - system
14:44 - background
14:46 - and i want to actually set the system
14:49 - background to all of the controllers
14:51 - over here because you know
14:52 - those colors are going to make me blind
14:54 - somewhere
14:56 - um
14:57 - okay let's just go ahead and build and
15:00 - run that one more time
15:02 - what do we have here okay
15:05 - we have our tab bars
15:07 - um successfully made i believe that we
15:10 - just need to change the thin color for
15:13 - each and every one of those let's just
15:15 - go ahead
15:16 - in the main
15:18 - okay tab bar
15:21 - dot
15:22 - then color dot label i believe that's
15:26 - that's the one i'm very sorry yes and
15:28 - let's just go ahead and try that
15:30 - um
15:32 - with the dark mode and the light mode
15:35 - and as you can see here it's all
15:37 - working
15:39 - so um that's it for today's video um
15:44 - in the next video we're going to be
15:46 - starting working in the home view
15:48 - controller we're going to be um setting
15:52 - our table view so that it can look
15:55 - something like this
15:57 - um as you can see here just let me give
15:59 - you a brief because this video is
16:01 - getting too long
16:02 - um
16:03 - here's a table view that's the header
16:06 - for the table view and each cell for the
16:08 - table view is going to be a collection
16:09 - view itself where we can use
16:12 - to horizon horizontally scroll
16:14 - through our movies and as you can see
16:17 - here uh it's really really efficient
16:19 - because it doesn't load
16:22 - um the whole list at once it or it only
16:25 - does that when you reach
16:28 - the end like this so yes
16:32 - and not all the table view cells load at
16:34 - once so yeah it's pretty much efficient
16:36 - so so let's just start the hem bite i'm
16:39 - a private let
16:41 - home feed table this is going to be a
16:43 - table view
16:45 - and i'm going to use the anonymous
16:47 - closure pattern
16:49 - let's initialize our table
16:51 - to be ui table view
16:55 - let's register um
16:57 - a normal cell for now
16:59 - of course we're going to customize
17:01 - ourselves
17:03 - so let's just type ui table view cell
17:06 - make sure to type dot cell because we
17:09 - want the type itself
17:11 - and let's register that with our
17:13 - reusable identifier as cell
17:16 - and we can return our table right now
17:21 - so that's done right there
17:23 - let's just add this table view to our
17:25 - view
17:29 - and also we just need to give that
17:32 - um
17:35 - a frame so that we can view that on our
17:37 - screen
17:38 - and also make sure to type super the
17:40 - view to lay out some views
17:43 - okay we just need to give that a frame
17:47 - and that frame is going to
17:49 - be equal to view bounce so it's just
17:52 - going to cover the whole bounds of our
17:54 - screen
17:56 - um
17:57 - and also we can um let's just make sure
18:00 - everything is
18:02 - done correctly and hit command r to
18:03 - build and run this and view that on our
18:06 - simulator right there
18:08 - so as you can see there there's nothing
18:12 - actually on the screen and this is what
18:14 - this that's because actually the table
18:16 - view is still empty it needs to have
18:18 - some data in order to be able to
18:21 - dequeue some cells and those cells
18:24 - should have all the data that you want
18:26 - um let's just go ahead and do this by
18:30 - typing home video table and set the data
18:32 - source and the delegate protocols
18:36 - for
18:36 - the table view
18:38 - home page table the data source and
18:40 - those are the two protocols that we need
18:42 - to confirm to in order for our table
18:44 - view to work properly
18:47 - okay so um
18:49 - let's just do that in an extension so
18:52 - that we can keep our file clean ui table
18:57 - view delegate and also i need the ui
19:00 - table view data source
19:03 - we just need to um
19:05 - implement those two methods which is the
19:08 - number
19:09 - of rows inside each section let's just
19:12 - say for example that we need 20 rows
19:15 - um and also
19:17 - the other
19:18 - method is going to be cell 4 row and
19:22 - this is a delegate method that tells
19:24 - that
19:25 - table view um
19:27 - actually which
19:29 - which um which cell that we're going to
19:32 - dequeue for each row
19:34 - so um let's just type let's cell is
19:37 - equals to table view
19:39 - dot dq with reusable identifier i really
19:43 - like
19:44 - how switch um sorry how swift language
19:47 - is actually architectured as you can see
19:49 - there like it it feels like you're
19:51 - reading just english hey table view dq
19:55 - reusable cell with the identifier cell
19:58 - for index path this is pure english guys
20:01 - and now let's return that cell and just
20:04 - for testing
20:06 - purposes let's just type um text label
20:10 - dot text and make be sure guys that this
20:12 - is going to be deprecated in the future
20:15 - um
20:17 - hello world
20:19 - okay
20:20 - this is going to uh work i believe let's
20:23 - just
20:24 - uh test that and type hit
20:27 - command r
20:29 - and let's hope yeah it works as you can
20:32 - see there
20:33 - we have our table view setup and
20:36 - we are going
20:38 - we're getting a little bit closer to
20:40 - what we want to do at the end time
20:42 - prompts here
20:44 - okay
20:44 - so um
20:47 - as you can see here let's just go ahead
20:49 - and view the real deal
20:51 - um
20:52 - that part is the uh the header for our
20:56 - table view and starting from there this
20:59 - is going to be a cell and that
21:01 - that's going to be a cell as well
21:04 - okay so what's this this is going to
21:07 - be a header for each section oh wait a
21:10 - minute so basically we have two kinds of
21:12 - headers yes that's correct basically we
21:15 - have a
21:16 - header for each section
21:18 - and also we have a header and that's um
21:23 - separated from the others and that's for
21:25 - the whole table
21:26 - that's the really cool part about table
21:29 - view that you can assign um a header for
21:32 - each section or the header for the table
21:34 - if you want and this is exactly what
21:36 - we're going to do and we're going to
21:38 - leverage the um the delegate methods for
21:41 - disable view to do
21:43 - exactly that
21:45 - so let's say here for example that i
21:47 - want my cell
21:50 - to be a height of
21:54 - 200
21:56 - and also um
21:59 - height for section
22:04 - yes and let's just return 40
22:08 - and let's hit command r and build and
22:10 - run and see what we get
22:13 - okay so as you can see here
22:16 - um there is the
22:18 - section header
22:20 - and also each cell is um
22:25 - is 200
22:26 - uh points
22:28 - in height
22:29 - uh let's just make that a little bit
22:31 - easier to see let's type cell dot
22:33 - background color let's just give that an
22:36 - arbitrary color for now let's say
22:38 - red
22:40 - and as you can see here this is our cell
22:43 - this is a cell this is a cell and
22:45 - there's a slightly change in the color
22:47 - here which is basically the separator
22:48 - between each cell
22:50 - okay so what do we need to do right now
22:54 - um
22:54 - basically
22:56 - we are going to create um
23:00 - a custom a custom cell that we're going
23:03 - to be using here in our table view cell
23:06 - and uh since this
23:09 - project is going to be based on the
23:11 - design pattern of the mvvm which is the
23:14 - model view view model
23:16 - um we have our controllers already so
23:18 - let's just go ahead and create a new
23:20 - folder um new group in here let's call
23:24 - that
23:25 - reviews
23:27 - um
23:29 - any other group is new models
23:34 - one more time here um
23:37 - what else do we have
23:38 - models
23:41 - okay
23:42 - and because i have an lcd maybe
23:45 - so
23:46 - yeah model view view models controllers
23:49 - this is the exact
23:51 - um
23:53 - way i'd like actually to
23:55 - you know organize my project
23:58 - um
23:59 - let's just go ahead and
24:01 - [Music]
24:02 - yeah let's leave that right there for a
24:04 - moment let's just go ahead and make
24:08 - resources
24:10 - folder
24:12 - and also one for our managers and i'll
24:15 - get to that
24:16 - later okay
24:19 - so for now let's just
24:21 - create a new view
24:23 - right here let's just go ahead and
24:25 - create new file
24:27 - um
24:29 - coco touch class and
24:32 - right there you can just type ui table
24:36 - review cell
24:38 - and in here i'm going to write um
24:43 - give that a name of collection
24:46 - view table view cell and i'll tell you
24:49 - exactly why i'm
24:50 - naming this um
24:53 - like that because i want each cell to
24:55 - have a collection view itself and by
24:58 - reading this only i can see that i have
25:00 - a collection view inside the table view
25:03 - cell and the table view cell actually is
25:05 - going to be the type
25:06 - of the um
25:08 - of this file
25:09 - so just hit next i'm going to create
25:12 - this in the view i'll just
25:15 - delete all of that because i'm not going
25:16 - to need that and
25:18 - i just type
25:20 - static
25:22 - light
25:22 - identifier
25:24 - and it's that is going to be
25:26 - collection view
25:28 - table view cell and basically the
25:30 - identifier is the same as the one that
25:32 - we used for registering the normal set
25:35 - that we registered at the beginning of
25:38 - this part uh it was we named that cell
25:41 - however this one is going to be called
25:44 - collection view table view cell
25:46 - and also let's just initialize that
25:51 - super dot in it
25:53 - style
25:54 - and reusable identifier and make sure
25:58 - to also
25:59 - um
26:00 - implement that angelizer as well
26:03 - fail error and leave that as it is
26:06 - okay
26:07 - so right now let's just
26:09 - um
26:10 - get that
26:12 - for its content view a background color
26:16 - so system pink for example
26:20 - yes i like that color a lot and let's
26:24 - just go here
26:26 - and
26:27 - type collection view table usl
26:30 - and also copy that one more time as well
26:32 - in here
26:34 - and
26:35 - dot identifier this is how we register
26:38 - our custom view cell
26:40 - let's go right there in the cell for
26:43 - row method
26:45 - and okay let's just delete that i'm
26:47 - going to teach you how to write that
26:49 - properly without going into errors but
26:52 - just type guard let cell is equals to
26:56 - table view dot dq with reusable
27:00 - identifier which in our case here is
27:02 - collection
27:03 - view table view cell dot identifier
27:07 - for index path as
27:11 - um collection view it will use cell
27:16 - else we just need to return a normal
27:18 - view
27:19 - a normal table view cell actually and
27:22 - right now let's just return that cell
27:25 - and let's just hit command r to building
27:28 - one and let's see what we have right
27:31 - there
27:33 - okay so basically this is
27:35 - our
27:36 - um
27:39 - this is our table and as you can see
27:41 - here each cell is a system pink and
27:44 - right now
27:46 - um you might ask
27:48 - okay so we have this each cell and it's
27:51 - 200 points in height
27:53 - why do we not see why don't we see the
27:56 - height for the um for the header as a
27:59 - matter of fact when we initialized that
28:02 - table view we did not specify that we're
28:04 - going to be having headers
28:07 - and we can easily do that
28:10 - using this so let's just give that
28:12 - a zero frame right now
28:15 - because we have already initialized the
28:17 - frame inside the view the layout some
28:19 - views method and the important part here
28:22 - is just to
28:24 - specify the slide of this ui table view
28:26 - to be grouped
28:28 - basically groups is going to give your
28:30 - table view the style the same as uh
28:34 - apple uses
28:36 - inside settings app
28:38 - so let's build around that one more time
28:41 - and let's see the difference in here
28:43 - okay
28:45 - a height
28:47 - of um
28:50 - 40 pixels
28:51 - and
28:52 - yeah you can also argue with me
28:54 - about okay
28:56 - i thought that you're going to have
28:58 - header for each section well as you can
29:01 - see here we're only having one section
29:03 - and inside each section
29:06 - there is 20 rows so we want to um
29:11 - to fix that
29:12 - so let's implement another method in
29:15 - here um that means this method is called
29:19 - um number of sections
29:22 - and instead we're going to return the 20
29:25 - right here and inside each section i
29:27 - just need one row let's
29:30 - hit command and r to build and run and
29:32 - let's see that
29:34 - so as you can see here we started to get
29:36 - a little bit closer to the final product
29:39 - that we want to design using ui kit
29:42 - which is our netflix
29:45 - um design
29:47 - okay
29:48 - one more thing that we need to do here
29:51 - is um giving each one of those a
29:54 - collection view cell so that we can
29:56 - actually have
29:59 - a placeholder where we can use to put
30:01 - our
30:02 - labels and movie titles and movie
30:05 - posters in it so let's just go ahead to
30:08 - our collection views cell table view
30:11 - cell hidden here
30:13 - and let's
30:15 - define a new connection view cell using
30:17 - the same anonymous closure pattern right
30:20 - there so private let
30:22 - collection view
30:24 - this is going to be
30:26 - a ui collection view
30:29 - and
30:30 - let's just
30:32 - go ahead and make that so the first
30:34 - thing that we need to do is
30:36 - um
30:38 - using the analysis closure pattern so
30:40 - that collection view is equal to ui
30:43 - collection view
30:45 - and
30:46 - for the frame right now it's going to be
30:48 - zero and let's just initialize that with
30:51 - a layout which is layout which is going
30:54 - to yellow us because layout hasn't been
30:57 - uh initialized yet or it has no idea
31:00 - what is layout
31:03 - but don't worry
31:05 - just return our collection view right
31:07 - there and over here let's just go ahead
31:10 - and define this layout
31:13 - and that is going to be
31:15 - ui collection
31:17 - view flow
31:19 - layout
31:21 - we can type layout dot
31:23 - um
31:24 - scroll directions going to be horizontal
31:27 - because as you can see in the main
31:30 - networks app it's um
31:33 - it's the direction that we use to you
31:35 - know navigate through each category so
31:38 - we have layout scroll directions going
31:40 - to be horizontal and this is going to
31:43 - be layout in here one more thing like
31:46 - the table view because table views and
31:48 - ui collection views is pretty much like
31:52 - we just need to register in a cell in
31:55 - here
31:57 - okay
31:59 - and for this i'm going to um type ui
32:03 - collection view cell
32:06 - dot cell because i see you know we would
32:08 - just need the type
32:10 - and we are going to um give that an
32:12 - arbitrary cell name right now which is
32:16 - going to be so
32:19 - okay we just need to add this to our
32:22 - content view
32:25 - collection view and let's also conform
32:28 - to those two protocols that allows us to
32:30 - display pictures and our data inside the
32:34 - collection view
32:36 - so just um
32:38 - type collection view
32:40 - don't delegate it's going to be self
32:42 - collection view the data source is going
32:44 - to be self as well
32:46 - and before xcode us because we haven't
32:49 - conformed to those
32:51 - protocols
32:52 - let's um
32:54 - let's do that right there ui collection
32:57 - view
32:59 - uh
32:59 - delegate
33:01 - ui collection view data source
33:04 - and
33:06 - the best part is that it's pretty much
33:08 - the same as the um
33:11 - the table the table view
33:15 - um
33:15 - i just
33:16 - um
33:17 - add the
33:18 - methods that we're going to use so
33:21 - basically sell for item and also number
33:24 - of um items inside the section let's
33:27 - just return
33:29 - that to b10
33:31 - and for that let's just let's sell it's
33:34 - gonna be a collection view on dq with a
33:37 - reusable identifier
33:39 - cell
33:41 - for index path
33:43 - return cell
33:47 - okay
33:48 - cell
33:49 - the
33:50 - background color um
33:54 - we should say green
33:57 - i don't know why but i like green
34:00 - so let's build and run this and see what
34:02 - we
34:04 - get okay
34:06 - nothing in here
34:08 - why
34:09 - okay
34:10 - um
34:12 - let's
34:14 - i oh my god this isn't gonna be green
34:19 - okay
34:22 - let's see what happened
34:24 - okay
34:25 - so
34:26 - we have our cells
34:28 - and inside each cell
34:31 - yeah we forgot to give that a frame
34:34 - okay
34:35 - so as you see guys i don't uh cut inside
34:39 - videos and pretend everything is going
34:41 - to be working as fine
34:43 - um i'm just coding this live so that you
34:46 - can see how we can debug our app so that
34:51 - we can identify the problem and fix it
34:53 - and you know the rest yeah so lay out
34:56 - some views
34:59 - super lay out some views and
35:02 - i want my collection view to be
35:06 - the entire body of the cell
35:08 - so i'll just give that
35:11 - a collection view about frame examples
35:14 - to content view the balance
35:17 - and let's build around that and test if
35:19 - that works
35:21 - okay as you can see here each cell
35:26 - is actually working
35:28 - um
35:29 - it's colored in
35:32 - yeah this is the system background color
35:35 - um we're gonna fix that later but as you
35:38 - can see here this is not the layout i
35:40 - want for each
35:42 - column i want the each item of this to
35:46 - take the entire height of the cell
35:49 - and
35:51 - okay you asked me how we can do that
35:53 - actually it's very easy we can specify
35:55 - that over here layout
35:58 - item size easy size
36:01 - and let's
36:03 - um give that um
36:06 - a width and a height
36:08 - so let's say for example i just need to
36:10 - give um 144 of the widths
36:15 - and um 200 for the height
36:18 - let's just run and see what we get
36:22 - and as you can see here we are getting
36:24 - closer and closer to
36:27 - the final product that we want and as
36:29 - you can see here also that each one of
36:33 - those uh cells um
36:36 - are independent of the each other and it
36:38 - has the horizontal scrolling
36:40 - functionality enabled by default
36:42 - why because we said that right there
36:46 - okay
36:47 - one more thing
36:49 - uh we just want to um you know add the
36:52 - header
36:53 - for our table view
36:55 - um okay so let's just go ahead in our um
36:59 - home view controller
37:02 - and
37:03 - yes
37:04 - let's go here in the view that load
37:07 - and let me just go ahead and type home
37:09 - feed table dot
37:11 - table
37:12 - header view and inside here we're going
37:15 - to define our
37:16 - ui view
37:18 - frame
37:19 - cgrect
37:21 - x00 and let's just give that the um
37:25 - the width
37:27 - of the um
37:29 - of the view and for height let's say for
37:31 - example i just need 450
37:34 - okay and let's just uh build and run
37:37 - this i'm just testing that it's going to
37:39 - work and yes as you can see here we're
37:42 - going to be using this
37:44 - for our hero view controller it's not
37:48 - going to be a view controller actually
37:49 - it's just going to be a ui view but i'm
37:52 - not going to create this with this
37:54 - method right here
37:55 - um
37:56 - we're going to make a separate view
37:59 - right there so we can separate the
38:01 - functionality for each view so that each
38:03 - view and it's gonna be working on its
38:05 - own okay
38:08 - what else do we need to do okay
38:11 - um
38:12 - i guess that's it for this video because
38:14 - i believe this video is getting too long
38:17 - in the next video i'm going to
38:20 - modify the header for each section
38:23 - basically we're going to have four
38:25 - sections one for
38:27 - the top recent movies top rated movies
38:31 - and all that kind of stuff
38:33 - and also um i think if if if we can make
38:37 - that happen
38:39 - uh in proper time we can you know
38:42 - start working on the hero
38:45 - as well
38:47 - so first things first we're going to go
38:50 - to our view folder
38:52 - and let's create a new file here just
38:54 - tap a new file
38:56 - goku touch class
39:00 - then we're going to create a new ui view
39:03 - and now let's call that um hero header
39:09 - ui view
39:13 - okay so let's tap create
39:15 - and now let's just delete all of that
39:17 - kind of stuff because we're not going to
39:19 - need that so
39:20 - um
39:21 - we want to um
39:24 - give that a frame
39:26 - and
39:27 - inside that frame we're going to assign
39:30 - um three things the first thing is the
39:33 - ui image view
39:35 - um and the other things is the two
39:37 - buttons where um
39:39 - one of them is going to be the download
39:40 - button and the other one is going to be
39:42 - the play button so let's just start by
39:44 - initializing this
39:46 - with a frame of course
39:48 - and just for you know the frame is going
39:50 - to be assigned when initializing this
39:52 - view so let's just go ahead and type
39:55 - super dot net
39:58 - frame
39:59 - and the most important thing just to um
40:02 - avoid any error just import the required
40:05 - initializer
40:06 - just type fail error and then we're
40:10 - ready to go here okay so as i told you
40:13 - the first thing that we need to
40:14 - implement here is going to be um
40:16 - an image view that's going to contain
40:19 - our header
40:21 - so
40:22 - just type
40:23 - hero
40:25 - image view
40:27 - this is going to be a ui image view
40:30 - let's use the anonymous closure
40:33 - let
40:34 - um
40:35 - image view is able to the ui image view
40:40 - and let's return that image view
40:42 - and before we return that um
40:46 - let's see here what we need to do um
40:48 - yeah
40:49 - so let's just type
40:51 - imageview.content mode it's going to be
40:54 - fill
40:55 - and scale aspect fill to be exact
40:58 - let's type also
41:00 - imageview.clipse 2 pounds
41:02 - and that's going to be true so we avoid
41:06 - um
41:07 - overflow
41:09 - and yeah that's it
41:11 - so basically um and also you know what
41:15 - okay so we don't need to be using uh
41:18 - constraints here because it's going to
41:20 - be very simple actually
41:22 - so um
41:24 - let's just add this sub view here
41:28 - and we can use the
41:30 - layout function
41:32 - layout view
41:34 - just to give that a frame
41:36 - um
41:37 - i just type hero image view the frame is
41:40 - gonna be equal to bounce
41:42 - and um
41:44 - one more things that we need to do
41:46 - is that i've downloaded this poster for
41:49 - this movie uh we're just going to use it
41:52 - as uh for testing purposes so let's just
41:55 - go ahead um and you know what you can
41:58 - just go and download any picture or any
42:01 - photo that you want from the internet
42:03 - you can use the unsplash website for
42:05 - downloading free pictures or even you
42:08 - can just go ahead and grab any movie
42:10 - poster you can add the to add this to
42:13 - the assets folder just
42:15 - right click here new image assets and
42:18 - just give it a name as
42:20 - you can see here i gave it the name hero
42:22 - image and i just place it right there um
42:25 - i'm not going to go exactly in details
42:28 - what are the difference between the 1x
42:30 - 2x and the 3x right now because this is
42:32 - not our focus right now let's just go
42:35 - back in here
42:36 - let me just type
42:38 - imageview.image and we're going to use
42:41 - that image
42:42 - as you can see here i'm typing ui image
42:45 - named
42:46 - and let me guess uh what did we call it
42:50 - yeah hero image we can actually copy
42:52 - that name so that we um we're not going
42:55 - to be prone to any errors
42:58 - and just paste that name and right here
43:01 - okay so basically
43:03 - this is our um
43:05 - header view and it's completed right now
43:08 - let's just go ahead to our home view
43:10 - controller
43:11 - and as you can see here we're assigning
43:14 - the table header view to um an arbitrary
43:18 - ui view let's just delete that
43:21 - and type header view
43:24 - let's initialize that right here
43:27 - um
43:28 - let
43:29 - header
43:30 - view
43:31 - it's gonna be equals to um
43:35 - hero
43:37 - header view and we're going to
43:39 - initialize that with a frame
43:42 - and our frame is going to be a c direct
43:45 - let's place that at 0 0 and as you might
43:49 - uh guess the width of the header is
43:52 - going to take the entire width of the
43:54 - application so let's just go ahead and
43:55 - type view the bounds dot width
43:58 - and the other one
44:00 - i might give that a height of maybe 450
44:03 - points for now
44:05 - and let me just go ahead and build and
44:08 - run this using command r and let's see
44:10 - what we got so far
44:14 - okay so basically we are set um we have
44:19 - our poster here and
44:23 - second thing i wanted to do is that um i
44:26 - wanted to give that um
44:29 - this effect of the um you know fading
44:33 - out so we're going to utilize the
44:36 - gradient
44:37 - and it's going to be um very tricky if
44:40 - you give it a thought for at first but
44:43 - trust me um i'm going to try to do my
44:46 - best here to um to explain it and to be
44:49 - honest it's really that simple it's not
44:51 - that hard to be honest so let's just go
44:53 - ahead here
44:55 - in our um
44:57 - initializer and say um add a gradient
45:02 - and we are going to create this function
45:04 - right now so
45:07 - let's just go here um i might go there
45:10 - private
45:11 - thunk
45:12 - add gradient
45:14 - and
45:16 - okay so here it goes so we just need uh
45:18 - to add um
45:21 - a cg
45:22 - uh or see i'm not from i don't remember
45:25 - exactly let me just go ahead and type
45:27 - let
45:28 - gradient
45:29 - layer
45:30 - it's to be c
45:32 - a
45:33 - gradient layer i guess that's the one
45:36 - um let me choose the gradient layer
45:39 - colors we're going to assign two colors
45:41 - in here okay so what what's the effect
45:44 - that we're seeking for so basically we
45:47 - wanna utilize two colors what are those
45:50 - colors okay whenever you see a fading
45:53 - out effect so basically the gradient
45:55 - effect or the gradient colors uh we'll
45:58 - be we're going to be using to apply this
46:00 - effect is the clear
46:03 - and whatever the system background is so
46:07 - let's say for example let me just grab
46:09 - the simulator over here so basically
46:12 - over here i want the color to be clear
46:15 - which is absence of colors or whatever
46:19 - color that you might choose however it's
46:21 - going to be alpha 0 so basically a
46:24 - transparent color here so that we can
46:27 - see the poster and as we go down i
46:31 - wanted this color to um
46:34 - become more black until it blends with
46:37 - this black as you can see here so um let
46:41 - me just go ahead and um and type that
46:44 - and i hope that's going to make sense so
46:46 - let me just go ahead and type ui color
46:49 - dot clear
46:50 - this is the color that we want and we
46:52 - just need the cg color value of it
46:55 - the other one
46:56 - is going to be ui color
46:58 - dot
46:59 - system background
47:02 - um cg color
47:04 - okay
47:06 - um
47:06 - the next thing that we need to do is
47:08 - just we need to add this sub layer
47:11 - um
47:12 - to our ui view which is going to be um
47:16 - by using um
47:18 - layer
47:21 - dot add sub layer
47:23 - and it's going to be gradient layer
47:26 - okay so let's build and run this and see
47:28 - what we get
47:32 - all right so basically it's not working
47:34 - yet
47:35 - and that's because we forgot to
47:38 - give the gradient layer a frame so
47:40 - basically we're going to give it a frame
47:42 - for the entire bounds over here um it's
47:45 - really simple
47:46 - to be honest gradient layer dot frame is
47:49 - going to be equal to bounce let me just
47:52 - um build and run this
47:55 - and yes as you can see here um we have
47:58 - our clear
48:00 - color here which is basically a color
48:03 - with an alpha which is going to be equal
48:05 - to zero so basically it's a transparent
48:07 - color
48:08 - that gives you ability to see through
48:12 - and the other thing here um the black
48:14 - color
48:15 - which is because our system right now is
48:18 - using the dark mode so it's gonna be a
48:22 - whole black color over here um i'm not
48:25 - sure if i just try to toggle the dark
48:28 - mode with the light mode it's gonna work
48:31 - um it's not working yet um
48:35 - okay so basically it's not working
48:38 - because um the system background color
48:40 - right now is not responsive so basically
48:43 - when we initialize this header view it
48:46 - just uh it just so that the color which
48:50 - has been used right now
48:52 - for the system background color is going
48:54 - to be black so it assigned the color
48:56 - black and when we change it back again
48:59 - to the light mode so basically it has no
49:03 - idea that the color of the system has
49:05 - been changed so we're going to
49:07 - look at that
49:08 - later on this is not our main focus
49:10 - right now so let's just go back to our
49:13 - um
49:13 - [Music]
49:14 - to our dark mode over here and let's
49:17 - just go ahead and add our two buttons
49:20 - that we're going to be using for either
49:22 - play or download this title okay so let
49:26 - me just go head over here let me just
49:28 - type private let
49:31 - um
49:32 - play button and that's going to be equal
49:34 - to a type of ui button
49:37 - let me just use the same
49:40 - uh pattern which is going to be the
49:42 - anonymous closure that button is going
49:43 - to be ui button
49:46 - dot text
49:48 - or set text i believe set title yeah
49:51 - um
49:52 - which is going to be play
49:55 - for normal
49:56 - return button and let me also um
50:02 - button
50:03 - dot border
50:05 - color
50:06 - is going to be
50:08 - system background i believe
50:11 - okay
50:14 - new eye color system background
50:18 - um not cg color
50:21 - okay
50:22 - um what else do we need to do yeah
50:24 - button dot um border width
50:30 - is going to be one for now
50:33 - and um
50:35 - yeah we are going to use constraints to
50:38 - lay out this button perfectly so just
50:41 - type button
50:42 - dot
50:44 - translate auto resizing masks into
50:47 - constraints this is going to need to be
50:49 - equal to false so that we can
50:52 - use the constraints in here
50:56 - so let me just go ahead
50:58 - and um let's just add this sub view play
51:02 - button right here
51:04 - and i just want to create another
51:06 - function here which is going to be named
51:08 - apply
51:09 - constraints
51:12 - and we can
51:14 - define this function over here private
51:17 - func apply constraints
51:19 - and let me just give that name let's
51:23 - play
51:24 - button constrains gonna be equal to an
51:27 - array and let's just start by giving
51:30 - that a constraint so that we can place
51:32 - that button on our screen
51:35 - so let's just type play button
51:37 - dot leading anchor i'm not going to use
51:40 - the left anchor because um some of you
51:43 - guys may be from an arabic speaking
51:45 - country um
51:48 - you know for
51:49 - arabic speaking countries and devices
51:51 - that have the arabic um language set by
51:54 - default um these languages
51:57 - um basically they are read from right to
51:59 - left it's not as english like you read
52:02 - english from english from left to right
52:04 - i'm sorry
52:05 - so basically we are saying that for
52:08 - english based um devices we're going to
52:12 - assign the play button on the leading
52:14 - anchor which is in our case gonna be on
52:16 - the left okay
52:18 - uh but for devices that have an arabic
52:21 - based language um
52:24 - the leading anchor is going to be on the
52:26 - right
52:27 - um it's really good practice if you want
52:29 - to make your app as much global as you
52:32 - wanna um
52:34 - as you want so it you know
52:36 - it uh behaves differently with each
52:39 - language so uh we're going to constrain
52:42 - that
52:43 - um
52:45 - to the leading anchor
52:46 - and i just wanted to give that like a
52:49 - margin of um 25 points from the left
52:53 - um and then i'm going to say another
52:57 - constraint which is going to be um
52:59 - bottom anchor and it's going to be
53:02 - constrained to the bottom
53:05 - anchor and i wanted to give that also a
53:08 - margin however um
53:10 - when we uh i want this margin to be uh
53:14 - by negative so that
53:16 - uh it doesn't count from the uh the
53:19 - point of the bottom constraints and move
53:21 - downward i wanted this play button to
53:24 - move upwards so i'm going to give that
53:28 - maybe negative 20.
53:31 - and
53:32 - let's just activate this constraint so
53:34 - nslayoutconstrain.activate
53:36 - playbutton constraints
53:39 - i guess um
53:41 - we're done over here let's just type
53:43 - command on ours let's build around this
53:45 - and see what we get
53:47 - yes as you can see here we have our play
53:50 - button
53:52 - as you can see here
53:55 - it's um it has
53:57 - if
53:58 - you look slightly you can see here
54:00 - the
54:02 - the border but let's just
54:04 - go here and let's change that color
54:06 - maybe to white so it's easier to see
54:11 - wait a minute
54:13 - ui colored y dot cg color
54:17 - i believe that would work
54:20 - okay so basically here's our play button
54:24 - uh it's 25 points from the left 25
54:28 - points
54:29 - from the uh bottom
54:31 - we're going to fix that
54:33 - but not now we just need to get things
54:35 - working
54:36 - um maybe we
54:39 - we can give that another constraint here
54:41 - play button dot width anchor
54:44 - constraint is going to be equal to
54:46 - constant and let me just give that maybe
54:48 - 100 points
54:50 - um so it gets wider yes um we're
54:53 - starting to
54:54 - getting something here
54:57 - um
54:58 - let me just go ahead and maybe increase
55:02 - this to be 125 maybe
55:07 - um too much let's just
55:11 - give that 90 and as you can see here we
55:14 - don't have like an exact file that we
55:17 - can get our
55:19 - margins and
55:21 - padding and all that kind of stuff with
55:23 - so basically we're just uh trying uh
55:26 - using the trial and error method so
55:28 - basically this is how we get things done
55:30 - working um in no time
55:33 - so let me just go ahead and give that
55:35 - maybe negative 50.
55:37 - um
55:39 - yes so um i want
55:43 - to um
55:45 - yes it's working fine for me to be
55:47 - honest like i couldn't ask for more
55:49 - um
55:50 - let me just go ahead right now and add
55:53 - the um
55:55 - the download button so private let's
55:57 - download
55:59 - um buttons gonna be a type of ui button
56:01 - basically we're just doing the same
56:04 - things here
56:05 - um i hope i can write correctly
56:09 - let's button
56:12 - it's gonna be ui button
56:14 - essentialize that have an instance
56:17 - button basically we're going to have the
56:19 - same
56:20 - things over here
56:22 - so let's just copy and paste that
56:25 - um
56:26 - and to be honest there's no room for
56:29 - error
56:30 - um yeah basically we're going to use the
56:32 - same stuff over here
56:34 - and let's just
56:36 - add this to our view add some view
56:39 - download button
56:41 - and then let's just um set new
56:43 - constraints for that button as well so
56:45 - let's download
56:49 - one constraint
56:51 - we're gonna be equal
56:53 - array
56:54 - um
56:55 - download button
56:57 - um leading anchor that constrains so
57:01 - basically we can just reverse that into
57:04 - the other direction so um maybe we can
57:07 - use the
57:09 - um trailing
57:10 - anchor
57:12 - and
57:12 - [Music]
57:13 - negative 90.
57:16 - okay download button the bottom
57:19 - anchor the constraints gonna be equals
57:22 - to the bottom anchor
57:24 - negative 50. um and also the same width
57:28 - is going to be used so download button
57:31 - over here with anchor that constrains um
57:36 - 100 points
57:38 - and let me just go ahead and activate
57:40 - this constraints as well
57:42 - download button constraints and let me
57:44 - just build and run this and see what we
57:47 - have
57:49 - um
57:50 - okay
57:51 - so
57:52 - clearly it's not right something is
57:55 - wrong over here
57:56 - um
57:57 - let me see what we have
58:00 - so um
58:02 - i believe there's something wrong over
58:04 - here
58:06 - um
58:08 - okay
58:12 - oh yeah let me just go ahead and
58:14 - trailing
58:15 - anchor over here i believe this will
58:17 - solve the issue
58:19 - and yes so i believe it's slightly
58:22 - um
58:23 - you know shifted towards the left but
58:26 - okay we just need to get things uh done
58:28 - really quickly
58:30 - um
58:31 - we can just give that
58:33 - something like um will
58:36 - look a little bit better upon the layer
58:39 - dot border
58:41 - um radius maybe
58:44 - corner radius
58:45 - it's gonna be five
58:48 - let's just see what we have here
58:52 - oh yeah it's going to be better
58:55 - if we used um
58:58 - a corner radius or something
59:01 - okay
59:02 - and maybe just give that a little bit
59:04 - more
59:06 - of
59:07 - points here to use as width
59:09 - okay
59:11 - so
59:12 - yeah
59:13 - that seems nice that looks nice okay
59:16 - so basically we have here our um button
59:20 - so um
59:21 - maybe we can also
59:23 - make that 70 and this is also 70. we
59:27 - just need to give them a little bit of
59:29 - margin between
59:30 - themselves um yeah i believe that looks
59:33 - okay and let me define a function over
59:36 - here
59:37 - okay so
59:39 - let's just call this function configure
59:43 - navbar
59:44 - okay
59:45 - we can copy that
59:47 - just declare a private function over
59:49 - here with the same name of course
59:52 - and
59:53 - okay so basically what we want we just
59:56 - need to add the netflix logo so we can
59:59 - just go ahead open google let's just
60:02 - type netflix
60:04 - logo png so basically we need that with
60:08 - a transparent uh
60:09 - background
60:11 - um yeah that's the one that's the one i
60:13 - downloaded so you can just go ahead into
60:16 - your assets over here
60:18 - right click new image set and then drag
60:21 - and drop it
60:23 - as
60:24 - as i did over here so basically i call
60:26 - this
60:27 - netflix logo and that's the name i'm
60:29 - going to use to
60:31 - initialize my image over here
60:34 - so let me just go back to my home view
60:36 - controller
60:37 - um let me just
60:39 - get the grab the image first so
60:41 - basically var
60:42 - image is going to be ui image
60:46 - named
60:48 - netflix
60:49 - logo and some of you might ask why did i
60:54 - initialize that in a variable not in a
60:56 - constant uh well
60:58 - bear with me for just a second i'll tell
61:00 - you exactly why we need to do that so
61:02 - basically um let's just go ahead and
61:05 - type navigation item dot left bar button
61:08 - item and this is going to be equal to a
61:10 - ui bar plan item
61:14 - and let me choose this one
61:16 - so basically i'm going to add my image
61:19 - over here the slide is going to be done
61:22 - target self and the action is nil for
61:25 - now
61:26 - okay so let's build and run this and see
61:28 - what we have
61:30 - okay so
61:32 - as you can see here i have the netflix
61:35 - logo over here but something seems to be
61:38 - incorrect over here
61:40 - um well basically we just need to modify
61:44 - or configure this image itself before
61:46 - adding it to the nav bar and that that's
61:49 - why actually i have initialized the
61:52 - image with a variable because we are
61:53 - going to further modify the image so let
61:56 - me just go ahead and type image
61:59 - it's going to be the image
62:02 - dot
62:03 - with render mode
62:04 - dot always original so this is how we
62:09 - force our um
62:11 - ios system just to use the image as it
62:14 - is so let's just build and run this one
62:16 - more time and let's see what we have
62:20 - okay easy busy so we have the netflix
62:23 - logo over here every single everything
62:26 - seems to be working just as fine um and
62:29 - as you can see here whenever you tap on
62:31 - it you know uh it dims a little bit
62:34 - darker so
62:36 - yeah that looks cool okay
62:38 - so the next thing is that um there's
62:41 - also as you can see here navigation item
62:43 - there is
62:44 - left bar button item and with some logic
62:47 - you can
62:48 - did use that um
62:50 - we have also right but right bar button
62:53 - item okay
62:55 - but this is not what we want actually we
62:57 - want items and
62:59 - fortunately enough
63:01 - uh basically apple just gave us
63:04 - it
63:05 - in a really simple way so basically we
63:07 - can type navigation item dot right
63:10 - button and as you can see here we have
63:12 - right bar button item if you want to add
63:15 - just a single
63:16 - button or a single image
63:19 - whatever you want and the other one here
63:20 - is a one with an s so basically it takes
63:23 - an array
63:24 - and let's add our
63:27 - um let's add our buttons inside this
63:29 - array so basically what we're going to
63:31 - do is just we're going to type ui part
63:33 - button item
63:35 - let's initialize that
63:37 - with an image
63:39 - okay
63:40 - so for this image i'm going to
63:42 - initialize that with a system image
63:45 - let me just go ahead and type that as a
63:47 - person and
63:49 - if you ask me from where i knew that
63:52 - there is an icon uh inside the system
63:55 - which is called person so basically
63:58 - there is a tool offered by apple you can
64:00 - just go ahead into apple website or just
64:02 - google uh sf symbol
64:06 - it's a dual provided by apple which
64:08 - gives you all of this
64:11 - pre-defined icons you can just search
64:13 - for the icon that you want and copy the
64:16 - name from here
64:17 - let's say for example i just need the
64:19 - person and as you can see here i have
64:21 - person person that failed personal
64:24 - circle you get the idea okay so let me
64:27 - just go back and type person
64:29 - my style is going to be done
64:31 - target self and the action is nil for
64:34 - now and let me add another button over
64:36 - here ui bar button item
64:40 - okay
64:42 - image
64:44 - i'm going to initialize that
64:46 - with um play dot
64:53 - all rectangle
64:54 - style
64:55 - it's gonna be done target self and the
64:58 - action is also nil for now
65:00 - and we can build and run and let's see
65:03 - what we get
65:04 - so basically um everything seems to be
65:07 - working fine i want to have this
65:10 - maybe whenever we tap on this button we
65:14 - should be um
65:16 - represented by the coming soon uh tab
65:19 - uh i haven't decided yet so um and yes
65:23 - that's the one we're going to be using
65:25 - for our profile
65:27 - i'm not sure actually i'm going to be
65:29 - working on the profile controller right
65:31 - now i guess i don't want to
65:33 - you know
65:34 - make this tutorial or this series too
65:36 - long but
65:38 - i'll just see what i decide
65:40 - okay so um one thing i also wanted to
65:44 - change um let's type navigation
65:46 - controller navigation bar the tin color
65:49 - and i want to set this to white
65:52 - and if i build and run this one more
65:53 - time and i can see here i get the
65:56 - buttons color to be
65:58 - changed to white actually
66:00 - okay
66:01 - so everything seems to be working fine
66:04 - except for one thing
66:06 - basically as you can see here the
66:08 - navigation bar
66:09 - um
66:10 - it always sticks to the top
66:12 - and it hides the content behind it well
66:16 - for some of you that might be a good
66:17 - design but i just wanted to stick with
66:19 - the design from the
66:22 - real netflix app
66:24 - so um here's the thing
66:26 - i'm going to implement an algorithm
66:29 - which allows me to
66:31 - push the navigation controller um
66:34 - as soon as i reach the very top of the
66:37 - screen here the
66:39 - the navigation controller is going to be
66:41 - pushed upwards until it gets disappeared
66:44 - and whenever i pull down
66:46 - uh i want to uh basically
66:50 - uh leave the navigation button or i'm
66:53 - sorry the navigation bar over here
66:55 - sticks to the top
66:57 - so let's just go ahead
66:59 - down here
67:00 - and let me implement this algorithm so
67:03 - basically
67:04 - a table view basically it's a scroll
67:07 - view so it inherits the all the methods
67:10 - that the scroll view have so basically
67:12 - let's type scroll view that's crawl
67:15 - and let me
67:17 - type over here this um
67:20 - maybe i'm not going to go into the
67:22 - details of how this algorithm work but
67:24 - i'm going to type it and as i'm typing
67:27 - i'm going to explain what we have over
67:29 - here
67:30 - so basically um let's just
67:33 - declare a new variable here let's call
67:35 - that default offset
67:38 - and let me get this from um
67:40 - view dot safe area insets dot top so
67:44 - basically this is going to be um the
67:48 - offset of the top
67:51 - uh safe inserts um of the screen okay so
67:56 - basically uh it's not going to uh
68:00 - to count as the notch is not there it's
68:02 - going to count for the notch
68:03 - um
68:04 - okay so the other thing i wanted to get
68:07 - is that um the offset that i wanted to
68:11 - uh assign for the navigation bar so let
68:14 - me just go ahead and um declare a new
68:16 - very
68:17 - constant over here basically it's on the
68:19 - it's not a variable
68:20 - um
68:21 - we can call it
68:22 - offset and this is going to be scroll
68:25 - view dot content offset dot y
68:29 - plus
68:30 - default
68:32 - offset
68:33 - okay the next thing that we need to do
68:36 - and it's very very easy if you don't
68:38 - want to get into the details or
68:41 - how this actually works behind the
68:42 - scenes you can just copy it so basically
68:45 - let's just type navigation
68:48 - controller navigation bar dot transform
68:52 - and
68:53 - net i want to use um
68:57 - this so basically we don't need to um
69:00 - translate the navigation
69:02 - uh bar uh in the x axis so basically
69:05 - this is going to be one
69:07 - and the behavior i just uh mentioned
69:10 - whenever i pull down i just wanted uh to
69:14 - have the navigation bar sticks uh to the
69:17 - top so basically we're going to
69:19 - implement this by typing minimum
69:22 - and it's either going to be zero or
69:26 - if the offset is negative so that means
69:29 - we are um pushing
69:32 - the navigation to top so basically let's
69:34 - type negative
69:36 - offset
69:37 - let's build and run this
69:39 - and let's see the result that we have
69:43 - okay so first of all let me just pull
69:45 - down
69:46 - and as you can see here the navigation
69:48 - bar sticks to the top but what happens
69:51 - if i uh pull to the top
69:54 - okay and as you can see here
69:57 - exactly that's the behavior i want to
70:00 - implement so basically let's pull down
70:02 - one more time
70:04 - let's pull in the other direction
70:06 - perfect everything seems to be working
70:08 - fine that's it
70:10 - okay so uh since we completed our work
70:14 - over here with the navigation
70:16 - bar let's just go ahead and set our
70:19 - um
70:21 - set our
70:23 - header titles over here so basically um
70:26 - let's say for example let me just go
70:28 - ahead and open the
70:30 - the one that we should have
70:32 - uh basically we have trending movies
70:34 - trending tvs
70:36 - popular upcoming movies top rated uh i
70:40 - don't think i'm going to um
70:43 - memorize all of that let me just
70:46 - give me just a minute here
70:48 - so basically um let's just go over here
70:51 - and let's declare an array that's going
70:53 - to hold our text or basically the string
70:56 - for our header sections titles maybe so
71:00 - let's just type let
71:03 - header or sorry
71:06 - section
71:07 - titles
71:11 - that's going to be um array of strings
71:15 - and let me just start by typing um
71:18 - trending movies
71:24 - trending tv
71:29 - all right let's just
71:31 - give me a moment over here i'm going to
71:33 - look at my second screen
71:35 - um yeah we have popular
71:38 - upcoming movies and top rated okay just
71:40 - a minute okay let's type top um rated
71:45 - and let's add one more
71:47 - um item over here um upcoming movies
71:54 - okay
71:56 - so let's go down there
71:58 - let's change the number of sections to
72:00 - be um
72:02 - titles section titles dot count
72:07 - and over here let me just go ahead and
72:10 - grab the um
72:12 - the simulator one more time just a
72:13 - second
72:16 - okay so um
72:18 - we have the popular oh yeah we forgot
72:21 - the popular i believe
72:23 - okay
72:26 - just a second
72:28 - popular
72:36 - okay so trending movies popular trending
72:39 - tvs upcoming movies and top rated and as
72:42 - you can see here we're going to
72:44 - initialize
72:45 - um account number so basically this is
72:49 - going to get the number of titles i've
72:51 - added over here
72:54 - and
72:55 - yeah it's going to be dynamically
72:56 - assigned
72:58 - all right so let's add the titles for
73:00 - each section
73:02 - and just go over here type title
73:05 - um title four header in section
73:08 - and let's just return
73:10 - um
73:11 - section titles
73:14 - index um i believe it's going to be yeah
73:17 - it's going to be section
73:21 - and this we're going to get this section
73:23 - from here so basically let's build and
73:26 - run this and see what we have
73:30 - okay we have the everything set up right
73:33 - now we have um
73:36 - yes the number of sections are correct
73:38 - is correct and as you can see here
73:40 - trending movies popular trending tv and
73:44 - the upcoming movies one thing that is
73:46 - bothering me actually is the font it's
73:49 - all uppercase over here
73:51 - and
73:52 - i don't believe the color is
73:55 - really subtle like you can just see it
73:59 - easily so let's just go ahead and
74:03 - fix that
74:05 - okay so basically what we need to do is
74:07 - um to implement another method
74:10 - so basically um it's just going to be um
74:14 - will display
74:17 - let me just go ahead and type that
74:19 - correctly table
74:20 - view
74:21 - will display
74:23 - header view
74:26 - um we're going to get the header itself
74:28 - for each section so let me just go ahead
74:30 - and type guard let
74:33 - header
74:34 - okay
74:36 - it's going to be
74:38 - view
74:40 - as
74:42 - ui table
74:44 - header
74:45 - view
74:47 - for review just a second else
74:51 - return
74:53 - and now we have an instance for our
74:56 - header
74:57 - so let me just go ahead and modify the
74:59 - things that i needed to change so
75:01 - basically let me type header
75:04 - dot text
75:05 - label
75:07 - and
75:08 - that means you know this warning means
75:10 - that is going to be deprecated in the
75:12 - future
75:13 - however we just need to get things um
75:16 - working right now
75:17 - so um
75:19 - since this is an optional let me just
75:21 - type a question mark over here
75:23 - dot
75:24 - font
75:26 - let me just go ahead and type system
75:28 - font
75:30 - of size 18
75:33 - and let me just go ahead and type
75:35 - semibolt
75:38 - we want to give that header uh or that
75:40 - text actually
75:42 - a frame
75:43 - so um
75:45 - header
75:46 - dot text label
75:49 - dot frame
75:50 - is going to be c direct
75:54 - okay so we want the header
75:57 - bounds
75:58 - dot origin
76:00 - dot x
76:01 - and let me just give that like a margin
76:04 - of 20 points from the left
76:06 - we wanted to have the same
76:09 - um y position so basically header pounds
76:13 - um origin
76:15 - dot y
76:17 - and for width let's say
76:20 - 100 points
76:23 - and the header is going to fill the
76:24 - entire section
76:26 - um so let's type header
76:29 - dot bounds
76:31 - dot height
76:33 - let's build and run and see what we get
76:35 - so far
76:38 - okay so much better
76:41 - um basically we have here um 20 points
76:44 - from the left 18 points for the font and
76:48 - the semi-bold so that we can see it much
76:50 - better and now we get i guess we need to
76:53 - change the color as well
76:56 - so um let me just go ahead and type
76:58 - header
76:59 - dot text label
77:01 - dot
77:02 - um
77:03 - text color
77:05 - yeah that's the one
77:07 - and assign that to white
77:12 - much better much better to be honest
77:14 - okay um
77:16 - one more thing over here let me just
77:19 - um
77:20 - yeah everything seems to be working fine
77:23 - um i believe i just need to um
77:26 - [Music]
77:27 - what do i need to do actually um okay
77:32 - so i'm going to go ahead and type text
77:35 - label
77:36 - dot um text
77:39 - and i just need to change that to a
77:43 - header the text label
77:48 - dot text
77:50 - dot lowercase
77:52 - and let me see what we have here
77:57 - okay
77:58 - um
77:59 - i think it looks good
78:02 - um
78:03 - i just wanted to um
78:06 - to capitalize the first letter uh maybe
78:09 - in another video like i'm going to talk
78:12 - a little bit more about extensions and
78:15 - how we can take advantage of the
78:17 - extensions to um to
78:20 - shorten our code make it easier uh to
78:23 - read and actually um yeah i wanted to
78:26 - change the first letter over here to be
78:29 - a capital letter instead of old small
78:32 - okay so um i believe that's it for this
78:35 - tutorial because it's getting too long
78:38 - so
78:39 - just to recap we worked on our
78:41 - navigation bar over here we implemented
78:44 - the scroll effect uh actually
78:47 - we worked as well here to assign
78:50 - a dynamic number of sections
78:54 - it matches the sections that we have
78:56 - over here we have set also the title for
78:59 - each section
79:01 - um yeah i guess that's it for this
79:02 - tutorial
79:04 - in the next one i believe we're going to
79:07 - uh to start working with networks so
79:09 - that we can fetch um some data over the
79:12 - internet and um
79:14 - you know have
79:16 - actually uh posters of movies over here
79:20 - let me just type in here in the search
79:22 - bar dmdb
79:24 - so basically that stands for the movie
79:26 - database and that's the website that
79:27 - we're going to be using for getting all
79:29 - of our um movies and all that kind of
79:32 - stuff that you can see here over the
79:33 - screen so if you haven't signed up
79:35 - already for this website it's really
79:37 - simple you can just create your account
79:39 - and once you're complete with that you
79:42 - can just press over here and
79:44 - go to the settings
79:46 - and over here you can just tap on api
79:48 - and as you can see here you get one of
79:50 - the api keys that we're going to be
79:53 - actually using for introducing ourselves
79:55 - to the website so it's just like hey
79:58 - website hey tmdb we're us so please
80:02 - give us all the information that we need
80:05 - so
80:06 - we just need to copy that
80:08 - and let's go back to xcode over here and
80:11 - in the managers folder we created
80:14 - earlier i'm going to create a new file
80:16 - here it's going to be normal swift files
80:19 - and i'm going to call that api color
80:24 - and over here let's just create a class
80:26 - let's just call that class api caller
80:29 - inside that class i'm going to create a
80:30 - shared instance i'm going to call this
80:32 - shirt
80:35 - and
80:36 - yes we're complete over here so
80:37 - basically we're going to use that shared
80:39 - instance so that we can call all of the
80:41 - methods that we're going to fill in here
80:43 - later but for the sake of simplicity in
80:46 - the future i'm going to create a new
80:48 - struct over here i'm going to call that
80:50 - constants
80:52 - inside that i'm going to um create a new
80:55 - console over here so let's just type
80:57 - static let
80:58 - api key
81:02 - and let me just paste that key that we
81:04 - got earlier from the tmddb website
81:07 - so
81:08 - um let's just go back over here and
81:11 - let's open the documentation for the
81:13 - website itself up to be honest it's well
81:16 - written and you can just go through it
81:19 - and see what you can get with this
81:21 - database so let me just go ahead and
81:24 - type trending movies i'm sorry trending
81:26 - and as you can see here we have a method
81:28 - it's also a get method
81:31 - and it helps us to get the all the
81:34 - trending movies tv and also persons if
81:37 - you want to have like a tab for showing
81:40 - the actors and the actresses and all
81:42 - that kind of stuff you can just
81:45 - tap on try out and as you can see here
81:47 - basically there's an example of how you
81:50 - might be using the website so let me
81:52 - just copy that
81:54 - let me just open a new tab and paste
81:57 - that over here and basically this is
81:59 - just a placeholder that we can delete
82:01 - and instead we're just going to provide
82:04 - the api key that we got earlier
82:07 - so let me just do that
82:09 - and as you can see here our request went
82:12 - successfully and you can see here page
82:15 - one results um
82:18 - maybe there are you're familiar with the
82:20 - spanish uh title which is la casa de
82:22 - papel it's one of my favorite shows if
82:25 - you want to watch it go ahead it's
82:27 - airing right now on netflix
82:29 - so um yes we have all the information
82:32 - that we have over here um for example we
82:34 - have the vote average 7.6 and all the
82:37 - information for the um
82:40 - for the titles that we're looking for so
82:43 - so far so good so let's just go back to
82:46 - xcode and start working here in our api
82:49 - caller
82:50 - i'm going to create a new function that
82:52 - we're going to be using for fetching all
82:54 - of this information so let me just go
82:55 - ahead and type get
82:58 - trending movies
83:06 - so basically this is going to be a
83:07 - function
83:08 - normal function actually and it's also
83:11 - going to have a completion callback
83:13 - function let me just go ahead and type
83:15 - that
83:16 - name completion and it's going to be an
83:18 - escaping function
83:21 - we're just going to return a string for
83:23 - now and that closure should be giving me
83:26 - nothing
83:28 - okay so um
83:30 - for the ease of usage in the future i'm
83:33 - also going to copy the base url from
83:36 - here
83:37 - so let me just go ahead and copy that
83:41 - let's go back to xcode and create a new
83:43 - constant over here
83:45 - static
83:47 - let base url going to paste in here
83:52 - what we've copied before
83:54 - and let's just go back to our
83:57 - method
83:58 - first of all i'm going to create the url
84:01 - itself so um let's just type let
84:05 - sorry guard let
84:08 - url is going to be a url with a string
84:12 - first thing that we need to paste in
84:14 - here
84:15 - um basically it's going to be our base
84:18 - url
84:21 - okay
84:22 - and i believe there's a forward slash
84:24 - over here let's just go back
84:26 - to the um
84:28 - to the developers dot the movie database
84:31 - or website over here and let me just
84:34 - copy
84:35 - all
84:36 - what we can see over here
84:38 - so um yeah i'm going to copy all of that
84:41 - and let me just paste that in here
84:44 - and after the api key which is going to
84:46 - be our first query for the database
84:48 - website i'm going to paste in
84:51 - my
84:52 - api key
84:54 - else return
84:57 - so basically we have our url setup over
84:59 - here so let's just do that and in this
85:02 - course i'm not going to be using any
85:04 - third uh parties for uh network layering
85:08 - as alarm of fire and all that kind of
85:10 - stuff we're going to be making all of
85:12 - the
85:13 - calls ourselves
85:15 - so um let me just create a new task over
85:17 - here
85:20 - so let me just type url session
85:23 - extras
85:25 - shared dot
85:27 - data task i'm
85:29 - going to choose the one with the url
85:31 - request over here
85:34 - let me just create a new
85:36 - url request with my url and for the
85:40 - completion handler i'm going to be using
85:42 - the data i don't need the response right
85:45 - now and of course i need the error in
85:47 - case we have any error calling the
85:49 - functions
85:51 - so
85:52 - over here let me just go ahead and type
85:54 - record let
85:56 - data is equals to data
85:59 - and also i'm going to make sure that the
86:01 - error is equals to nil
86:06 - i also should return of course
86:08 - we're going to refactor this and add
86:10 - more functionality but we just need to
86:12 - um to get everything set up
86:15 - i missed an else over here
86:18 - okay so right now we have our data
86:24 - okay so right now we just have our
86:27 - data so let's just convert our data into
86:30 - adjacent objects so that we can
86:32 - serialize it and actually be able to use
86:35 - it more easily so let me just go ahead
86:38 - and type let results
86:41 - equals to json serialization
86:44 - dot json object with data
86:47 - so i'm going to pass the data that we
86:49 - had in here and also i'm going to allow
86:52 - fragments
86:53 - okay so let's just see what error that
86:56 - we have basically this function throws
86:59 - an error so
87:01 - we must
87:02 - execute that function inside the do
87:04 - catch block
87:05 - so let me just go here print error the
87:08 - localized description and let me just
87:12 - cut that and paste it over here
87:14 - and since it throws an error let me just
87:17 - add here the word keyword try actually
87:20 - and over here i can
87:23 - print the results
87:25 - and before we end that we have created
87:29 - the task and that task is by default is
87:32 - created in the pause status so
87:35 - we just need to
87:37 - type task
87:39 - dot resume
87:41 - okay so our get trending movies function
87:44 - is complete
87:46 - now we are we just need to call that
87:49 - function from our home controller so
87:51 - that we can see the results over here
87:54 - so over here let me just create a new
87:57 - function
87:58 - private find get trending movies
88:02 - and basically this is where we're going
88:05 - to uh call the functions so let me just
88:08 - go ahead and
88:10 - type api color share get trendy movies
88:14 - and as you can see here
88:16 - i don't need the uh return value right
88:18 - now we just need to test
88:21 - if everything is working fine
88:24 - so uh yeah basically that's what we're
88:26 - going to need
88:28 - for now and
88:30 - let me just go ahead to our view the
88:33 - load method and let me just call that
88:35 - function build and run and let's see the
88:38 - results that we have
88:41 - okay so as you can see here
88:44 - our connection to the database has been
88:47 - established successfully and we get our
88:50 - results over here um as you can see here
88:54 - uh we get lots of json objects and we
88:58 - need to make uh start by making our
89:01 - models so that we can serialize all of
89:03 - these
89:06 - so right now we have all of our
89:08 - information over here in the console so
89:11 - let's just go ahead and look at what all
89:15 - of this information really are so as you
89:18 - can see here
89:20 - basically we have an array and that
89:23 - array holds
89:24 - a bunch of objects over here and each of
89:27 - one each one of
89:28 - these objects basically is just a title
89:31 - that we're looking for so as you can see
89:34 - here
89:34 - each title has an attribute for the id
89:38 - itself the media type as you can see
89:40 - here it's a tv show um the name is money
89:44 - heist and as you can see here the
89:45 - original name is la casa de papel
89:48 - we just need to uh to have an model so
89:52 - that we can have the um the movies like
89:55 - we have over here as you can see here we
89:57 - have a movie that has the attribute name
89:59 - of the id media type movie original
90:03 - language english and all that kind of
90:04 - stuff over here
90:06 - it happens to be
90:07 - venom so
90:09 - let me just go ahead to our models
90:11 - folder that we created earlier
90:14 - and let's just create a new file over
90:16 - here
90:18 - i'm going to create a normal swift file
90:21 - and let me type
90:23 - movie so
90:25 - in this file i'm going to create our
90:27 - model that we're going to be using over
90:29 - here so that we can um extract all of
90:32 - the information over here that we need
90:34 - so um basically we're going to create a
90:37 - struct
90:38 - and
90:39 - let me just
90:41 - call that um
90:43 - trending
90:44 - movies
90:45 - response
90:50 - so in this structure we're going to
90:52 - create here an array
90:55 - let's just call that results
90:58 - and
90:59 - be aware that these um it's a good
91:03 - practice actually to match the names of
91:05 - the attributes over here so the first
91:07 - thing that we need to do is just we're
91:09 - going to create this array so let's
91:12 - results is going to be an array of
91:15 - a single movie to be exact so that array
91:19 - is multiple of this single item
91:22 - and
91:24 - you might see here that xcode is
91:27 - complaining because it cannot find the
91:29 - type movie in this scope and basically
91:32 - this is what we're going to be doing
91:34 - right now let's just create a new struct
91:36 - let's call that movie
91:39 - and
91:40 - in here we're going to copy
91:42 - basically um
91:44 - all of the attributes that defines a
91:47 - movie
91:48 - so let's just go here as you can see
91:50 - here that's the start of our object
91:53 - basically that's the end so basically we
91:55 - just need to copy that
91:59 - to our um
92:01 - to our file over here so that we can
92:04 - create the model easily
92:06 - let me just
92:08 - facing here
92:10 - okay so basically what we need basically
92:12 - we need an id
92:14 - maybe we're going to need a media type
92:16 - original language original title so
92:19 - let's just go ahead and get the
92:21 - attributes that we need so um right here
92:24 - we need the id of course and that's
92:27 - going to be a type of hint
92:31 - okay
92:32 - let's media
92:34 - type
92:36 - it's going to be a string and i'm going
92:39 - to make that optional so that if the um
92:42 - if the movie database did not provide us
92:45 - with the media type
92:46 - we know for sure that
92:49 - our app is not going to crash
92:52 - let original
92:55 - name
92:57 - also going to be an optional string
93:00 - let original
93:02 - title
93:06 - string
93:08 - also going to be optional
93:11 - but poster path and as you can see here
93:14 - i'm getting all of these information
93:16 - from here i'm just extracting what i'm
93:19 - really um interested in so i can see
93:21 - here poster path
93:24 - poster
93:25 - path and that's going to be an optional
93:28 - string as well
93:31 - left over
93:32 - view
93:33 - an optional string let vote count
93:40 - and that is going to be an integer
93:46 - let release
93:48 - date also going to be an optional string
93:52 - um
93:53 - maybe i'm
93:54 - interested in the vote average as well
93:56 - so
93:57 - let vote underscore average
94:04 - and i believe that's going to be a
94:05 - double
94:07 - okay
94:07 - so basically we have
94:10 - created the um the model for the
94:14 - response that we're getting over here
94:16 - so um yeah so let's back go back to our
94:20 - api caller over here
94:22 - and we're going to delete this actually
94:26 - all right so we just need to type json
94:29 - decoder we just need an instance of that
94:32 - decode and we're going to be um
94:35 - providing the
94:37 - model that we've just made over here
94:39 - which is basically trending movies
94:41 - response
94:44 - so just pass in that
94:46 - with the data
94:48 - and um
94:49 - okay so basically as you can see here um
94:53 - there is an
94:55 - error we get over here and that's
94:57 - because we forgot basically to
95:00 - conform to the codable
95:05 - protocol and we just need to confirm in
95:08 - here as well so basically the codable
95:11 - protocol is just a type alias for the
95:14 - encoder protocol and the decoder
95:17 - protocol as well so um yeah we can just
95:20 - remove the codable and just
95:22 - since we're only using at the code
95:24 - method but it's just
95:26 - easier for us uh to um
95:29 - not going to be prone to every errors in
95:31 - the future so we just need to
95:33 - conform to the codable protocol let me
95:36 - just go back in here
95:38 - and for now i'm going to um print the
95:42 - results
95:44 - let's build and run this
95:45 - and let's see what do we have
95:48 - okay so yeah we forgot actually to add
95:51 - the try keyword over here let's build
95:54 - and run this one more time and as you
95:55 - can see here we've managed to
95:58 - successfully get
95:59 - the um the array of objects that we have
96:02 - over here
96:04 - okay so as you can see here we have the
96:06 - trending movies response over there and
96:08 - it's also a res uh it has the attribute
96:11 - of results and inside that results array
96:14 - we have all of our
96:16 - um basically
96:18 - um
96:18 - data that we have
96:20 - so um let's just access those there's
96:23 - also dot results and since the results
96:26 - is actually an array i'm going to
96:28 - actually also access the first one and
96:32 - as you can see here we have the id media
96:34 - type original name um yeah basically we
96:38 - have all the information that we need
96:40 - over here so let me just for example
96:42 - um print the um original name for the
96:46 - first element that we get in this
96:48 - and as you can see here yeah it's like
96:50 - casa or papel
96:53 - okay
96:54 - so
96:55 - so let's just go ahead and modify our
96:58 - function a little bit
97:00 - so basically we're just returning a
97:03 - string so let me just go ahead over here
97:05 - first
97:06 - and create an enum
97:11 - i'm going to call that api error
97:14 - and that's going to conform to error i'm
97:17 - going to create my own
97:20 - error which is going to be failed to
97:23 - get data
97:26 - and over here i'm just going to
97:28 - modify that
97:30 - so basically we need to return the
97:33 - results so basically like result
97:38 - and as you can see here uh we're going
97:40 - to be returning um
97:43 - an array of movies so let me just go
97:46 - ahead and type array movie and if not
97:49 - we're just going to return an error
97:54 - and over here i'm going to um add the
97:57 - com call the completion
98:01 - as you can see here um i'm just going to
98:04 - provide here a result so
98:07 - a success which is going to take an
98:09 - array of movies so results dot results
98:13 - let's just go back in here to our home
98:16 - view controller
98:19 - and as you can see here
98:21 - right now i'm going to call that one
98:23 - more time
98:24 - api caller.share.gettrendingmovies
98:28 - as you can see here actually i'm getting
98:30 - results
98:33 - so results
98:36 - i'm going to switch on that results so
98:38 - basically results
98:40 - okay so in case of success i'm going to
98:43 - get an array
98:45 - of movies
98:47 - different movies
98:52 - and in the case of failure
98:55 - i'm going to get an error over here
98:59 - and let me just print the error
99:02 - let's go back to our api caller as you
99:05 - can see here if there's something wrong
99:08 - that happened in the do block i can just
99:10 - before brand the localized description i
99:12 - can just delete that
99:15 - completion
99:16 - not failure and i can pass in my error
99:20 - and i believe
99:22 - um there's something wrong that needs to
99:25 - be done over here and um
99:28 - okay yeah that's the one we just need to
99:31 - wrap that inside the parentheses over
99:33 - here
99:36 - and let's build and run that one more
99:38 - time so that we make sure everything is
99:40 - working and yes
99:42 - we have everything is working right now
99:44 - so that's it for this tutorial just to
99:46 - recap really quick in this tutorial we
99:48 - just managed to
99:50 - establish our connection with the
99:52 - database we fetched all the information
99:54 - that we needed and also we serialized
99:56 - those information back to a json object
100:00 - and now we have the models uh the movie
100:03 - model right here and now we're ready to
100:06 - pass all of these information back to
100:08 - our view controller let me just go to
100:10 - our resources folder let me create a new
100:13 - file it's going to be a normal switch
100:15 - file i'm going to call that
100:17 - extensions
100:19 - and over here let me extend the um
100:23 - the string data type
100:25 - let me create a new function over here
100:26 - it's going to be called capitalize first
100:28 - letter
100:30 - and that function is going to return a
100:32 - string
100:33 - and inside that function i just need to
100:36 - type in for here return
100:39 - self dot prefix i'm going to choose the
100:43 - first letter
100:44 - and i'm going to change that to an upper
100:47 - case
100:48 - and then i'm going to um add the self
100:52 - dot lowercase
100:54 - dot drop first so as you can see here
100:58 - i'm only choosing the first letter
101:00 - converting that to an uppercase and the
101:02 - rest is going to be a lowercase and i'm
101:05 - going to drop the first letter so that
101:07 - we don't have multiple
101:09 - um multiple letter as you can see here
101:12 - so let me just go back to our home view
101:15 - controller
101:16 - and before i use that function i just
101:17 - need to rearrange my array over here um
101:21 - i noticed that in the real app um the
101:24 - trending tv comes after the trending
101:27 - movies so
101:28 - let's just do that
101:30 - and let me fix that by adding that comma
101:33 - okay so let me just go down over here
101:36 - uh where we set the text for each
101:39 - section header uh instead of typing the
101:42 - lower case i'm going to capitalize the
101:44 - first letter and over here let me just
101:47 - build and run this and let me see what
101:49 - we got so far
101:52 - okay so everything seems to be working
101:54 - as i expected as you can see here the
101:57 - first letter of each section is
101:59 - capitalized so we utilize the concept of
102:03 - extensions
102:04 - so that we avoid duplicating code over
102:06 - here and just adding
102:08 - code that is not relevant to the
102:10 - controller itself we just need to handle
102:12 - that in its own extensions we don't need
102:15 - to capitalize the first ladder over here
102:17 - in our home view controller we don't
102:19 - want to handle this over here in our
102:21 - home controller it's not relevant you
102:23 - know okay so in the last part we just
102:26 - need to fix something regarding the api
102:28 - that we've called to fetch the uh the
102:31 - movies over here basically these movies
102:33 - are going to be uh feed inside this
102:36 - controller view and as you can see here
102:38 - this i'm sorry this collection view and
102:39 - this collection of you guys you might
102:40 - guess it's all it should only um carry
102:44 - the movies but let me just go ahead uh
102:48 - for the api as you can see here we're
102:51 - calling or fetching the trendings for
102:54 - all kinds of data so instead of all i'm
102:57 - going to change that to movie let me
103:00 - just build and run that one more time
103:04 - as you can see here we get the same
103:06 - results
103:07 - plus it is filtered we're only
103:10 - retrieving the movies instead of having
103:13 - both movies and tv at the same call okay
103:17 - so we got the trending movies so right
103:19 - now let me just go ahead and get the
103:21 - trending tvs and basically it's going to
103:24 - be
103:24 - very similar to this so instead of using
103:27 - all or movie we're just going to limit
103:31 - that to use the tv itself
103:34 - okay so let me just go ahead
103:36 - and open the api caller yes we've
103:39 - already opened that and let me just go
103:41 - ahead let me just get more room over
103:43 - here
103:45 - let me create a new function
103:47 - get
103:48 - trending
103:51 - tvs
103:52 - okay we're going to have a completion
103:55 - handler
103:56 - and it's going to be escaping as well we
103:59 - can just you know we can copy that from
104:01 - over here
104:04 - okay let me paste that over here where
104:06 - instead of returning um
104:09 - an array of tvs i'm sorry movies i'm
104:11 - going to return an array of a tv
104:15 - okay and let me see
104:18 - the only error we get so far is that
104:20 - because we don't have tv model yet but
104:23 - just to get things started really
104:25 - quickly i'm going to return the string
104:28 - for now
104:30 - and as you can see here xcode is no
104:32 - longer complaining about this so let me
104:34 - just go ahead and
104:36 - initialize the url that we were going to
104:39 - be working with so guard left
104:41 - url is going to be url
104:44 - string
104:45 - i'm going to pass over here
104:48 - um the
104:50 - base url
104:52 - okay
104:53 - slash three slash trending
104:57 - slash tv
104:59 - slash
105:00 - day okay we're going to be passing the
105:04 - api key over here so basically it's the
105:07 - same thing
105:08 - um and you know what we can just copy
105:10 - that from here just not to be prone to
105:12 - area any errors
105:15 - um
105:16 - let me pass that
105:19 - and instead of moving over here i'm
105:21 - going to pass on tv
105:24 - and they'll
105:25 - return
105:27 - so i'll just create a new task
105:30 - url session
105:32 - dot
105:33 - shared
105:35 - data task i'm going to do that with a
105:38 - request url request
105:41 - okay that takes a url which is basically
105:43 - the url that we've just initialized up
105:46 - here
105:47 - and for the um the completion handler
105:49 - we're gonna need the data i don't need
105:52 - the url response i just need the error
105:55 - and basically it's the same thing over
105:57 - over here so guard let data is equals to
106:00 - data and also i'm going to check
106:04 - or make sure actually that the error
106:07 - is equal to nil
106:10 - and after
106:12 - that i'm gonna do
106:13 - do
106:15 - let results equals try
106:19 - um let me just go ahead and see jason
106:22 - serialization dot
106:24 - um let me just see here json object yes
106:29 - data allow f fragments allowed
106:33 - let me just go ahead and print the
106:35 - results over here
106:37 - and after that i'm gonna catch if
106:40 - there's any errors so let me just go
106:42 - ahead print error
106:44 - dot localize description
106:47 - what else do we need to do is just we're
106:50 - gonna resume our task so that we can
106:53 - see the result of that so let me just go
106:55 - ahead and copy that get trending tvs let
106:59 - me just go ahead to our home view
107:01 - controller
107:02 - and instead of calling the get trending
107:04 - movies function going to um
107:09 - let me see what we can do
107:11 - change that name for
107:13 - for a second
107:14 - get
107:15 - or fetch
107:17 - data because this is just gonna be a
107:19 - test function
107:21 - let me just go over here
107:23 - fetch
107:24 - data
107:25 - and we can um
107:27 - comment that away because it's already
107:31 - working we just need to
107:33 - test the other one so api caller dot
107:36 - share dot get trending tvs
107:38 - and for the results
107:42 - i'm not going to do anything right now
107:44 - actually because we're already printing
107:45 - that in the other api caller file so let
107:49 - me just go ahead um and build and run
107:52 - this and let me see if that is working
107:54 - so um we have an error
107:57 - let me see what do we have
108:00 - okay
108:02 - um
108:03 - can i call a non-function type oh okay
108:08 - just um an extra parentheses
108:11 - so let me just build and run that and
108:13 - let me see
108:15 - and as you can see here we have the
108:17 - response from the server and as you can
108:19 - see here each and every one of them has
108:22 - a media type of tv
108:24 - so that is done
108:26 - so we just need to create a new model
108:29 - over here to handle the tv response
108:33 - so um let me just do that so it's going
108:36 - to be a new file over here
108:39 - let me create a new swift file i'm gonna
108:41 - call that tv
108:45 - and let's have a look
108:47 - so um as you can see here we have a tv
108:52 - results which is basically an array that
108:55 - holds
108:56 - um
108:57 - basically each and every
109:00 - um object over here so let's just do
109:04 - that structure
109:06 - i'm going to make that with the same
109:10 - basically with the same format over here
109:13 - so instead of trending movie response
109:16 - i'm going to call that
109:18 - trending tv
109:20 - response
109:22 - and let's conform to the codable
109:25 - protocol as well
109:26 - and as you can see here that has a
109:28 - results
109:30 - um let me just
109:32 - yeah and make sure to get the um
109:35 - the spelling correctly that is going to
109:38 - be an array of tv
109:41 - and over here let me just create a new
109:43 - structure i'm gonna call that tv
109:47 - also i'm going to confirm the to the
109:49 - codable protocol and let me see what do
109:52 - i have for here
109:55 - okay so um
109:57 - i believe basically it's the same
110:01 - um yeah i believe it's the same as movie
110:03 - right here um i'm gonna copy that for
110:06 - now
110:07 - and to be honest it's not the best
110:09 - practice over here because there is a
110:11 - duplication of code
110:13 - but uh i'm not sure
110:15 - that
110:16 - the um the database or the server itself
110:20 - is going to have the same
110:22 - um the same thing for the tvs and the
110:26 - movies in the upcoming future so i'm
110:28 - just you know because i'm not i don't
110:30 - have any control over the server over
110:32 - here so i'm just going to
110:34 - um basically get that copied and i
110:38 - believe
110:40 - um that's okay let me just go ahead back
110:43 - to my api caller
110:46 - uh instead of that let me just type here
110:48 - tv
110:49 - and instead of using the normal json
110:51 - serialization let me just go ahead and
110:54 - convert that actually to
110:56 - um the model itself that we've returned
110:59 - so json
111:00 - decoder
111:02 - let me have an instance of that
111:04 - um
111:06 - what was it um i believe it's the same
111:09 - one over here so yeah it's the code
111:12 - and we're going to provide the um the
111:16 - response that we're going to get so tv
111:18 - or trending tv response dot self
111:23 - okay
111:25 - and the other one is going to be um
111:29 - using the data that we have returned
111:31 - here
111:32 - let me just print the results and
111:35 - crossing fingers i'm going to wish
111:37 - that's going to work on the first try
111:41 - and
111:42 - yes it's working actually so yeah
111:45 - basically this is going to be the
111:46 - trending tv
111:48 - uh we have the trending movies over here
111:51 - let me just open um
111:54 - here the simulator so let me just go
111:57 - ahead and see okay so we need the
111:59 - popular the upcoming movies and the top
112:02 - rated as well and this is where we're
112:05 - going to open tmdb
112:07 - one more time
112:09 - so let me just go ahead and we're going
112:12 - to go through the api or the
112:14 - documentation of the website itself so
112:17 - let me just go ahead settings
112:19 - api
112:21 - developers.moviedatabase.org
112:24 - and
112:25 - yeah we can search over here so let's
112:28 - say for example upcoming
112:31 - and yeah there's an already method over
112:34 - here
112:36 - so let's see um i'm going to say try out
112:41 - and basically this is the um the url
112:45 - that we're going to use
112:47 - so let me just go ahead and copy that
112:51 - go back to xcode
112:53 - api caller let me just paste that as a
112:56 - comment over here and let me
112:59 - make a new function
113:02 - get
113:03 - up
113:04 - coming
113:07 - and i'm going to call that upcoming
113:10 - or let me see here basically yeah it's
113:13 - going to be an upcoming movie so
113:15 - upcoming movies
113:17 - we're here we're going to use the same
113:20 - um
113:22 - signature of the function
113:25 - okay so let me just paste that over here
113:28 - we're going to return an array of movie
113:33 - okay so let me just go ahead and create
113:36 - the url for this as well so guard that
113:39 - url is gonna be equals to url
113:43 - and it's going to be from string
113:45 - and let me just um paste that over here
113:50 - so
113:51 - let's just cut that i'm not going to
113:53 - need that anymore
113:55 - okay so
113:57 - instead of having this
114:00 - okay i'm going to remove that
114:03 - let me just add the
114:05 - base url from the constants so base url
114:10 - movie upcoming api key we're just going
114:13 - to um
114:15 - substitute for that as well so constants
114:19 - api key and i believe that says so else
114:23 - return
114:26 - i'm sorry let me just put that in the
114:28 - curly braces return so we have our url
114:32 - and now let's have the data task as well
114:36 - so let
114:38 - task is going to be a url session
114:43 - dot shared
114:44 - data task url request is going to take a
114:48 - url which is basically done over here
114:51 - and for the compilation handler as well
114:54 - same stuff and as you can see here just
114:56 - a type of pattern it's not that hard to
114:59 - get um
115:00 - comfortable with that
115:02 - so um let's just guard let data is
115:07 - equals to data and over here we just
115:09 - want to make sure that the error as well
115:12 - is equals to nil
115:15 - okay
115:16 - let me just do i do catch block print
115:20 - error
115:21 - dot localize description and over here
115:25 - let me just select results
115:28 - it's going to be equal to try
115:30 - json um
115:33 - let's just go ahead for here and type
115:35 - json decoder decode and i'm going to
115:38 - return
115:39 - the um trending movies i believe
115:42 - so um
115:43 - [Music]
115:44 - let me just try if that works
115:47 - because i believe it's going to be the
115:49 - same model
115:50 - we're going to use that from data
115:53 - and over here let me just print
115:55 - results
115:57 - and let me just go ahead to my home view
116:00 - controller
116:01 - um this works as well so let me just
116:04 - comment that
116:06 - for now
116:08 - okay
116:10 - and over here let me just type api
116:12 - caller.share.
116:15 - get upcoming movies for the result right
116:18 - now i just don't need it
116:20 - and let me just build and run let me see
116:23 - here if there is any response for the
116:26 - upcoming movies
116:28 - okay
116:29 - i'm not seeing anything right now
116:32 - so yeah and that's because we've created
116:34 - the task and we forgot to
116:37 - change that to resume so
116:40 - task.resume let me just build and run
116:43 - c
116:45 - okay so yeah we actually can use the
116:47 - same model because it's not changed it's
116:49 - the same across all the um the movies
116:52 - that's being retrieved from the database
116:54 - as you can see here
116:56 - so we have the trending movies
116:58 - let me just open that one more time so
117:01 - we have the trending movies trending tvs
117:03 - upcoming movies top rated and popular so
117:06 - let me just go ahead and do the same
117:08 - thing over here so
117:11 - popular get popular
117:14 - um
117:15 - okay
117:16 - so it's going to be basically the same
117:18 - so we're just going to do that really
117:21 - quick
117:37 - and let's just go ahead one more time
117:40 - over here
117:41 - get upcoming movies is working fine let
117:44 - me just test
117:45 - the other one api caller share dot
117:48 - get popular
117:50 - and we don't need to return anything
117:53 - right now
117:55 - okay
117:56 - so let's build and run
117:58 - and let me see and before i do that i
118:01 - already again forgot to
118:04 - resume the task
118:07 - and let me just build and run and let me
118:09 - see
118:11 - okay so um yeah i'm sorry guard let's
118:16 - guard
118:17 - let yeah that's going to work
118:21 - and we forgot to add the try
118:23 - keyword over here
118:25 - and yeah everything is working fine
118:27 - right now so basically we just need to
118:30 - set up one last
118:32 - um
118:34 - one last api call which is basically the
118:37 - top rated so let me just go ahead and do
118:40 - that really quick
118:54 - and
118:56 - yeah as you can see everything is set up
118:59 - right now
119:00 - so basically that's it for this tutorial
119:02 - we've completed our api calls and in the
119:06 - next tutorial we're going to extract the
119:08 - um the information that we just need
119:10 - over here and start adding uh pictures
119:14 - and posters and have something really
119:17 - working on our app
119:19 - okay so before we move ahead and use the
119:23 - information that we got from the
119:24 - database um i just gave it a thought and
119:27 - i thought this is just the exact same
119:30 - model for both the tv and the movie so
119:33 - we don't need to um to have this
119:36 - duplicated over here so we can just go
119:38 - ahead and delete the tv model
119:41 - move to trash
119:43 - and that i'm going to rename that to
119:46 - maybe um trending title response
119:50 - and that's going to hold an array of
119:52 - titles
119:54 - and over here i just need to change that
119:56 - to title as well
119:59 - okay
120:00 - and we can rename the file if you want
120:03 - to
120:04 - um
120:04 - let me just go ahead
120:07 - and rename that so title
120:12 - all right and just to fix the error that
120:15 - xcode is going to throw at us in the api
120:17 - caller
120:18 - we're going to change all of this from
120:20 - movie to title
120:23 - and over here
120:25 - trending title response
120:28 - okay
120:29 - and the tv as well it's going to be a
120:31 - title
120:32 - basically um
120:34 - it's just removing the old
120:37 - name passing the new one it's really
120:40 - simple
120:42 - okay
120:45 - just a second please
120:49 - i believe that's the last one for the
120:51 - top rated
120:52 - and we can just build and run to see
120:55 - that if everything is working
120:58 - and indeed yes everything is
121:00 - working and um yeah one last thing that
121:03 - we need to do um we have uh made the um
121:08 - the enumerator or basically our enum for
121:11 - the api error over here and we haven't
121:14 - used that already so
121:16 - instead of passing a normal error i'm
121:18 - just going to pass my api error and fail
121:21 - to get data
121:22 - i'm going to copy that actually and
121:25 - instead of just printing the error i'm
121:28 - going to pass in a failure
121:31 - so that we can handle that from our home
121:33 - view controller
121:35 - so instead of each um print statement
121:38 - inside the
121:39 - catch block we can
121:41 - um just remove that and instead add the
121:44 - completion with failure api fill it to
121:46 - get the data
121:49 - okay
121:50 - so what we need to do now is just go
121:52 - ahead to the views
121:54 - folder and create a new file
121:57 - this is going to be a coco touch class
122:00 - we're going to um
122:02 - create a new collection view cell let me
122:05 - just call that title collection view
122:07 - cell and that is going to be the cell
122:09 - that is responsible for
122:11 - um handling everything inside the
122:14 - collection view instead of the default
122:16 - uh collection view set that we get with
122:18 - the collection view
122:20 - so let me just go ahead and press next
122:23 - create
122:24 - um
122:26 - yeah it's just an old
122:28 - um
122:29 - an old file you're not going to see that
122:31 - so right in here i'm just going to type
122:34 - static select identifier
122:38 - and let me just copy the name of the
122:40 - class over here
122:43 - and we're just going to need to
122:45 - initialize that with the
122:48 - normal
122:49 - um
122:51 - frame and over here let me pass also the
122:54 - required initializer so that we avoid
122:56 - um
122:58 - adding and errors
122:59 - and yes everything is set up regarding
123:01 - the cell right now the only thing that
123:03 - we need is that we just need an image
123:06 - view so that we can pass the poster in
123:09 - it so
123:10 - right over here let me just try private
123:12 - let's poster image view
123:17 - and that is going to be a type ui image
123:20 - view let me just use the anonymous
123:22 - closure pattern
123:24 - select image view is going to be ui
123:27 - image queue
123:29 - return image
123:31 - review and over here we just need to
123:34 - say image view dot content mode
123:37 - um scale aspect fill
123:41 - okay
123:42 - so regardless the size or the aspect
123:45 - ratio of the poster that we get we make
123:48 - sure that we fill the entire cell that
123:50 - we have here in the collection view and
123:52 - over here i just need to um add this so
123:56 - content view don't add some view poster
124:00 - image view and i'm not going to use
124:03 - actually the old layout for this it's
124:05 - just
124:06 - simple as
124:08 - laying the frame of the view as the
124:10 - whole or the entirety of the content
124:13 - view so let me just go ahead and say
124:15 - layout sub views
124:17 - super dot layout sub views make sure to
124:20 - include
124:21 - make sure to include that line
124:23 - and also add um poster image view the
124:27 - frames gonna be equal content you don't
124:30 - bounce
124:32 - okay
124:33 - and
124:34 - that's it regarding the um the
124:37 - collection
124:38 - view cell um
124:40 - yeah one more thing that we need to add
124:42 - actually
124:44 - a third-party library that is going to
124:46 - help us cache
124:48 - the retrieved poster or the image that
124:50 - we get from the internet so let me just
124:52 - go ahead and open safari and let me
124:54 - introduce you to another third-party um
124:57 - package that we're going to use in our
124:59 - project which is basically
125:02 - swift sd web image
125:06 - and you can go over here into the github
125:09 - page uh we're going to use the swift
125:12 - package manager so
125:14 - as you can see here the package.swift
125:16 - file is included so that means that we
125:18 - can use that without coco touch
125:22 - so let me just go ahead and
125:25 - copy
125:26 - the uh the link for this github
125:29 - repository let me just go ahead to xcode
125:33 - file
125:35 - add packages
125:36 - and as you can see here since i've added
125:38 - this package already it
125:40 - it is cached inside the swift package
125:42 - manager but for your case you're just
125:45 - going to need to paste that over here
125:47 - and as you can see here
125:50 - um it got you the sd web image already
125:53 - so you can tap add package
125:57 - and xcode is just going to fetch the
126:00 - required code from the github repository
126:03 - is just not going to take much time as
126:05 - you can see here
126:09 - all right so um
126:11 - xcode finished getting the uh the code
126:14 - from the github repositories so just one
126:17 - thing that we need to do before adding
126:19 - the package we just need to make sure
126:20 - that we check
126:21 - both the sd web image and the sd web
126:24 - image map kit
126:26 - and then add that package
126:29 - and as you can see here inside the
126:30 - targets you see the uh netflix clone um
126:34 - sd web image so that means that those
126:37 - packages are targeted for our uh project
126:40 - over here
126:42 - so let me just go back to my title
126:44 - collection view cell
126:47 - let me import
126:49 - the sd loop image
126:52 - and inside here
126:54 - um
126:54 - each time we dq a cell in our collection
126:58 - view so we just need to have an update
127:01 - function so that we can update the
127:03 - poster for each cell with the models
127:06 - that we have in the
127:08 - home view controller
127:10 - so let me just go ahead and define a
127:13 - public function
127:14 - this time so public function
127:17 - configure
127:21 - web
127:22 - model
127:23 - and
127:24 - for now we're just gonna pass a string
127:26 - for now
127:30 - all right so basically this model string
127:33 - this model of data type string for now
127:35 - is just going to hold
127:37 - the url for the poster that we're
127:40 - looking for so basically we're just
127:42 - gonna have to type poster
127:45 - dot
127:46 - sd
127:49 - set image
127:51 - and we're going to set that image with a
127:53 - url
127:55 - so let me just go ahead and find my url
127:57 - it's going to be equal to url
127:59 - from string
128:01 - let me for now pass the model
128:04 - okay i believe this is going to be a
128:07 - guard url
128:09 - else return
128:11 - because it's just going to
128:13 - give us an optional url and over here
128:15 - i'm going to pass the url and for the
128:17 - completion i just need to pass nil
128:20 - okay so we are set up over here
128:24 - so let me just go back to my home view
128:27 - controller
128:28 - and in this
128:30 - part of uh tutorial we're going to be
128:33 - viewing the view models right now
128:35 - because we don't actually need to pass
128:38 - the entirety of the um the title model
128:41 - we just need
128:42 - maybe the uh the poster path over here
128:45 - we don't need the id the media type or
128:48 - anything from here right now let me just
128:50 - go ahead back to my home view controller
128:55 - and let me see here the apis that we
128:57 - have
128:59 - so as you can see here we have five api
129:02 - calls the last one is the get upgraded
129:04 - in the upcoming movies and basically
129:06 - those are the api calls that we're going
129:07 - to be using to fetch the data from the
129:09 - database to feed the table view cells
129:12 - that we have
129:14 - okay so basically this is not how we're
129:15 - going to be fetching actually the data
129:18 - from the api we want every single
129:20 - section to handle its own calls so let
129:22 - me just go ahead and delete the fetch
129:25 - api data from here
129:28 - and also let me delete the call for the
129:29 - method and one last time i just want to
129:32 - go to the api caller and i want to make
129:34 - sure that i'm passing the results back
129:37 - uh instead of just printing them so let
129:39 - me just copy the completion handler over
129:42 - here and let me pass this in every
129:44 - single api call
129:47 - so we're done with the api caller right
129:48 - now so let me just go back to my home
129:50 - view controller let me just go on the
129:53 - top of the um the home view controller
129:56 - class and let me define a new in them
129:58 - i'm going to call that sections and that
130:00 - is going to have a real value type of
130:03 - int
130:04 - i'm going to define my cases over here
130:06 - so basically trending movies and that's
130:08 - going to be equal to 0
130:10 - case trending tv that's going to be
130:13 - equal to one
130:15 - basically
130:16 - um i believe it was the uh popular
130:21 - and that's going to be equal to
130:23 - case
130:24 - upcoming
130:27 - three and the last one is going to be
130:29 - top rated
130:31 - and that is going to be equal to four so
130:33 - basically those are the four
130:35 - cases or the four sections that we're
130:37 - going to have over here
130:40 - okay so um
130:43 - okay so since we've um created um a
130:47 - title collection over here that is our
130:50 - um
130:51 - cell let me just go back to the um
130:55 - to the collection view actually that is
130:57 - going to be handling each cell over here
130:59 - and instead of just registering a ui
131:03 - collectionview.self over here i just
131:05 - need to delete that
131:07 - and instead i'm going to pass in the
131:10 - title collection view cell that i i have
131:12 - created actually
131:13 - instead of the identifier i can just
131:16 - access this by the name
131:18 - of the class the identifier so right now
131:21 - i have the title collection view cell
131:23 - over here
131:25 - all right
131:26 - and instead of just dequeuing um a
131:29 - normal cell let me just delete that and
131:31 - make that from the beginning so guard
131:33 - let cell's going to be equal to
131:35 - collection view cell
131:37 - dot dq with reusable identifier which is
131:40 - basically title collection view cell dot
131:43 - identifier
131:45 - and over here i'm just going to pass the
131:47 - index pass
131:49 - as
131:50 - title collection view cell else we're
131:53 - just gonna return a normal collection
131:56 - view cell
131:57 - over here
131:59 - and basically i'm going to return the
132:00 - cell
132:02 - and as you can see here basically we
132:04 - have access to the configure method that
132:06 - we made earlier
132:08 - okay
132:10 - so
132:11 - um basically um
132:13 - something else that we need to do here
132:15 - we're just gonna have to um initialize a
132:19 - private
132:20 - var titles
132:22 - that is going to be an array that is
132:24 - going to hold our titles and i'm going
132:26 - to initialize that array actually to be
132:29 - an empty array for now
132:32 - all right
132:33 - okay so and then
132:35 - i'm going to make a new
132:37 - configure
132:38 - with function over here just to uh feed
132:41 - the titles that we get for each section
132:44 - in this array so let me just go here
132:46 - type configure
132:49 - web
132:50 - titles
132:52 - and that is going to be an array of
132:54 - title
132:57 - right and inside that we're just going
132:59 - to reference the titles array that we
133:01 - have and basically pass in the titles
133:04 - that we get for each section
133:07 - all right so
133:09 - let me just go back to my home view
133:11 - controller over here let me just scroll
133:13 - down
133:15 - um yes this is the one so basically
133:17 - right now we have an access to a new
133:20 - function
133:21 - which is basically the titles and we are
133:23 - going to pass in the um
133:26 - the titles that we get over here but
133:28 - we're just going to switch first
133:31 - on this section
133:34 - so let me just type switch
133:37 - index path
133:39 - dot section
133:41 - and right here we're going to handle the
133:43 - cases for each section so let me just
133:45 - type the cases that we have
133:47 - case
133:49 - sections
133:50 - dot
133:51 - trending movies
133:55 - case sections dot trending tv
134:00 - case sections
134:03 - popular
134:05 - case sections
134:09 - dot
134:10 - upcoming and the last one sec case
134:14 - sections
134:15 - dot top rated
134:17 - so basically those are the four cases
134:18 - that we're going to handle so in each
134:20 - case over here i just need to um
134:23 - oh basically it's not just trending
134:25 - movies so basically we need the role
134:27 - value which of which we have assigned
134:30 - when we uh actually um initialize our
134:32 - enumerator over there so
134:35 - row value
134:36 - dot row value
134:39 - value over here
134:41 - and here as well so basically let's just
134:43 - handle the first case that we have
134:46 - so for the first case that we have we
134:48 - just need to make the api call so api
134:51 - color shared get trending movies and i
134:54 - just need the result over here
134:56 - and on the result as well i'm going to
134:59 - switch one more time so switch
135:01 - result
135:03 - case
135:03 - success i'm just going to receive the
135:06 - titles
135:09 - and over here i just wanna
135:11 - pass the results that we have to myself
135:13 - so i configure cells and that configure
135:16 - method expects to receive an array of
135:19 - titles so basically
135:21 - array over here
135:23 - and over here i'm just going to handle
135:25 - the other case which is basically going
135:26 - to be the failure
135:28 - so let error
135:30 - and over here for now i'm just going to
135:33 - print the error localized description
135:38 - all right
135:39 - so basically we have uh handled the
135:41 - first one
135:43 - so let me handle the second one over
135:44 - here
135:47 - okay api caller.share.com
135:52 - result
135:55 - okay
135:56 - just a second
135:58 - i'm going to switch one more time on the
136:00 - result
136:02 - case success
136:04 - let titles
136:06 - i'm just going to pass it
136:08 - with the confederate method
136:12 - all right
136:13 - any other case is going to be failure
136:16 - same thing ever
136:19 - and for now i'm going to print the error
136:23 - right
136:25 - and the other one is going to be the
136:26 - same api color share dot
136:30 - popular
136:32 - and the result
136:34 - i'm going to switch on the result for
136:37 - the get popular
136:40 - case success
136:43 - i'm going to receive the titles
136:45 - i'm going to pass the titles over here
136:50 - any other case
136:51 - i believe you
136:53 - know
136:54 - right now what we're going to be doing
136:56 - let error
136:59 - okay print the error localized
137:02 - description
137:04 - we have two more to go
137:05 - so
137:08 - let's just api caller shared
137:12 - in the upcoming i'm going to get the
137:15 - result
137:16 - i'm going to switch on the result as you
137:18 - can see here
137:21 - okay so case
137:23 - success like titles
137:26 - i'm going to pass that to with the
137:28 - configure method as well
137:32 - case failure
137:34 - that error
137:36 - all right so just print the error
137:39 - and one last
137:41 - time we're going to do that for the top
137:43 - rated
137:44 - so let me just go ahead and
137:47 - okay api caller.share.operated
137:51 - i'm going to
137:52 - receive a result let me switch on the
137:55 - result one last time
137:58 - okay success
138:00 - select titles
138:02 - i'm going to pass the titles
138:04 - for the cell
138:07 - all
138:08 - right one more to go
138:11 - case failure that error
138:14 - and let me just print the error over
138:16 - here
138:18 - all right
138:19 - and we just need to um
138:21 - [Music]
138:23 - to see what we have here basically we
138:25 - have an error that xcode is throwing at
138:28 - us because the switch
138:29 - uh block must be an exhaustive so let me
138:32 - just go ahead and fix that real quick
138:36 - all right and let me see over here so
138:38 - basically it adds a default uh case um
138:42 - so let me just go ahead and just return
138:44 - what um i believe is going to be a table
138:46 - view cell
138:48 - so yeah so return
138:51 - ui table view cell
138:54 - and right now we can just build and let
138:56 - me see if we get any error build
138:58 - succeeded so as you can see here it's
139:01 - really really clean way look at that
139:04 - um each section is handling its own
139:06 - calls
139:08 - all right
139:09 - so um let me just go ahead
139:12 - and open the configure method over here
139:15 - which is basically for the collection
139:17 - table view uh cell and as you can see
139:20 - here uh we are going to um set the
139:24 - titles
139:26 - for the um for the collection view cell
139:29 - array over here let me just go back or
139:32 - scroll down to the collection view cell
139:34 - that's going to handle each poster for
139:36 - each movie and i'm going to return
139:38 - actually the titles.count
139:41 - all right
139:43 - so um instead of just passing the empty
139:46 - string over here i'm going to pass the
139:50 - titles
139:51 - i'm going to
139:53 - say index path the row as you can see
139:56 - here basically i have access to each and
139:59 - every single title over here so before
140:01 - now let me just add the poster path over
140:04 - here
140:06 - and let me just open the configure
140:07 - method over here one more time and
140:09 - instead of um
140:12 - passing the url over here i just need to
140:14 - see the url first so
140:17 - let me just print
140:19 - the model that we have over here
140:22 - so um let me just build and run this and
140:24 - let me see what we get
140:27 - okay we have an error
140:30 - and that is going to be um yeah that is
140:34 - an optional string for now
140:36 - so um let me just guard let
140:40 - right poster
140:42 - or let me just say um model
140:45 - is going to be equal to titles
140:47 - index
140:49 - path
140:50 - dot row
140:52 - the poster path which is basically the
140:55 - um the reason i'm having an error over
140:58 - here because the poster path if you
141:00 - remember is just an
141:02 - optional string
141:05 - all right so
141:06 - let me just type else
141:08 - and over here i'm going just to return
141:10 - ui collection view cell for now just to
141:14 - remove the error
141:16 - and over here instead of passing this
141:17 - i'm just going to pass in the model
141:20 - so before i build and run this i just
141:23 - need first to type this so dispatch q
141:26 - dot main
141:28 - dot async and i'm going to explain what
141:30 - i'm doing right now in just a second so
141:32 - let me just my first week self
141:34 - in and inside this function i'm going to
141:38 - reference my collection view
141:39 - self.collectionview.reloaddata
141:43 - so basically
141:44 - um we have retrieved the titles um in
141:48 - earlier uh within the uh the home view
141:51 - controller and then we updated the title
141:54 - array that we have over here but since
141:57 - that array has been updated in an async
141:59 - function we need to reload the data for
142:01 - the collection view inside the main
142:04 - thread and this is why i'm typing here
142:07 - dispatchqueue.main.async
142:09 - so let me just build and run this and
142:11 - let me see what we have
142:14 - all right so basically as you can see
142:16 - here since the trending movies is the
142:18 - only
142:19 - row on the screen right now so basically
142:22 - i have um
142:23 - i have gotten like one two maybe those
142:26 - are seven uh images from the data and as
142:30 - i scroll here as you can see i'm
142:33 - actually retrieving more images and when
142:36 - i'm scrolling over here for each section
142:38 - as well as you can see here basically we
142:41 - are getting the images for each section
142:44 - and each title inside each section as
142:47 - you can see over here
142:49 - so let me just go really quick to
142:52 - the movie database api
142:54 - let me just open the uh developers
142:57 - web page over here
143:00 - it's really easy so let me just type
143:02 - image
143:03 - let me say over here images and as you
143:05 - can see here there's a pattern so
143:06 - basically this
143:08 - is the result that we have retrieved
143:10 - from the uh data api so basically we
143:13 - just need to copy the entire thing over
143:16 - here and basically we are just going to
143:18 - feed the data that we've got instead of
143:21 - the um the hard coded value over here
143:24 - so i just go back to my title view
143:26 - controller
143:28 - and here let me just create a new url so
143:31 - guard let urls come to via url with a
143:35 - string and that url is basically going
143:38 - to be
143:39 - this and i'm going to pass in the model
143:42 - that i have
143:43 - over here
143:45 - and else i'm just going to return so
143:47 - basically once we have the api ready we
143:50 - can use that to set the um the image url
143:54 - that we have over here and for the
143:57 - completion let me just type nil and let
143:59 - me build and run this
144:01 - so as you can see here basically we have
144:03 - all the image for each title and i
144:06 - believe this is the moment that you guys
144:07 - have been waiting for since the
144:09 - beginning of this series as you can see
144:11 - here for each section i have the
144:12 - trending movies as you can see here it's
144:14 - actually updated and as you can see here
144:16 - spider-man uh basically this is the
144:19 - movie that has been trending for like a
144:21 - week over now um trending tvs as you can
144:24 - see here money highs the witcher and all
144:26 - that kind of stuff so
144:28 - let's go to the upcoming view controller
144:30 - over here and first thing that we need
144:32 - to do is just to set the title so let me
144:34 - just type title i'm going to send that
144:37 - to upcoming
144:38 - and over here i'm just going to
144:40 - um type navigation controller navigation
144:43 - bar prefers large titles and i'm going
144:46 - to send that to
144:48 - true
144:48 - navigation controller dot navigation
144:51 - item dot large title display mode and
144:53 - i'm going to set that to always as well
144:57 - so right now let me just create a new
144:59 - table i'm going to call that
145:01 - upcoming table so privately
145:04 - upcoming table let me just type that
145:06 - correctly
145:08 - that's going to be a ui table view i'm
145:11 - going to set that with the anonymous
145:13 - closure we use that so many times at
145:15 - this point in this year so let me just
145:17 - type table i'm going to say
145:20 - ui table view i'm going to register a
145:22 - normal cell for now
145:24 - so register
145:27 - ui table view cell
145:30 - itself i'm going to set the identifier
145:33 - to be um cell
145:36 - and don't forget to return that table
145:39 - i'm going to add that table to my view
145:42 - so
145:43 - you add some view
145:46 - upcoming table i'm going to set the
145:49 - delegate for the uh for the table view
145:51 - up here as well so upcoming table
145:54 - delegate is going to be equal to self
145:57 - upcoming data source is going to be
145:59 - called itself as well
146:00 - i'm going to extend
146:03 - the controller so extension
146:06 - upcoming view controller i'm going to
146:08 - set that ui table view delegate and the
146:11 - upcoming
146:13 - for the data source as well so ui table
146:16 - view data source
146:18 - i'm going to implement the two functions
146:20 - over here so basically return 10 for now
146:24 - and for this i'm going to return the
146:26 - delegate function which is the cell for
146:29 - row so
146:30 - let's just create a new cell so let's
146:32 - sell it's going to be able to table view
146:34 - i'm not that one so table view
146:37 - dot dq with identifier and four so let
146:41 - me just type here
146:42 - cell
146:43 - index
146:44 - for now i'm just
146:46 - going to
146:47 - say text label the text i'm going to
146:49 - send that
146:50 - for test um right now and let me just go
146:53 - ahead and return myself
146:56 - so that should be working so right now
146:58 - um i'm going to hit run and let me see
147:01 - what i guess so far
147:05 - okay so as you can see here we have the
147:07 - home view controller nothing have has
147:08 - changed let me just go to the coming
147:11 - soon and as you can see here i have my
147:13 - upcoming title and when i scroll um
147:16 - there's nothing to be scrolled at right
147:17 - now because we haven't played the table
147:20 - yet so let me just go ahead and
147:21 - implement the function so
147:24 - did lay some view i'm going to
147:27 - say super the view that layout some view
147:30 - upcoming table
147:32 - let me just
147:34 - say that
147:35 - upcoming table.frame that is going to be
147:39 - equals to view.bounce
147:43 - let me hit one one more time
147:47 - all right
147:48 - so as you can see here uh we have the
147:51 - title we have our tail
147:53 - cells ready so
147:55 - right now let me just reuse the function
147:57 - that we've used earlier in the upcoming
147:59 - or i'm sorry in the home view controller
148:02 - so let me just create a new function
148:03 - over here so private func
148:06 - fetch up coming
148:09 - and i'm going to implement that function
148:12 - so um i'm going to call the api caller
148:15 - the shared get upcoming movies and i'm
148:18 - going to switch on the results
148:20 - so switch result and i'm going to type
148:23 - in here
148:24 - case success
148:26 - let me just retrieve those titles
148:30 - okay
148:31 - and in here
148:32 - i'm going to assign that to a local
148:35 - variable that i'm going to
148:37 - call titles as well so let me just go up
148:40 - in here
148:41 - private
148:42 - var
148:43 - titles
148:44 - that is going to be an array of title
148:47 - i'm going to initialize that array
148:50 - so that is going to be empty for now
148:54 - all right and over here just to avoid
148:56 - any memory leaks so i'm just going to
148:58 - type weak self
149:00 - and over here i'm just going to
149:02 - reference that back so basically self
149:04 - dot
149:05 - titles that is going to be titles
149:09 - and over here as well i'm just going to
149:12 - reload the data so self dot upcoming
149:15 - table dot reload data and i'm just going
149:18 - to put that inside an async
149:20 - function so that we make sure that it's
149:23 - going to be executed on the main thread
149:24 - so let me just type this
149:27 - patchqueue.main.async and i'm going to
149:30 - add that
149:31 - line of code in here so that we don't
149:34 - get any errors let me just go back in
149:37 - here at the number of rows i'm going
149:41 - just to return titles.count
149:44 - and over here i'm just going to
149:47 - set that one more time over here let me
149:49 - just type
149:51 - titles
149:52 - um let me just see here yeah titles okay
149:58 - i'm going to
150:00 - access the index path of row and as you
150:03 - can see here
150:05 - um
150:06 - what do we have okay
150:08 - something's wrong
150:10 - oh i'm sorry this is um
150:13 - we just misspelled the word so
150:16 - we have it right now so titles
150:19 - let me just
150:20 - fix that that's well so
150:24 - titles
150:25 - and let me just go ahead one more time
150:27 - and as you can see here we have the
150:28 - original name and since this is an
150:30 - optional we can say
150:33 - default value
150:35 - which is basically going to be also
150:38 - titles index path row and i'm going just
150:42 - going to as access the original title
150:45 - and if neither of those available i'm
150:47 - just going so i'm going to assign that
150:49 - to unknown and let's hope that we don't
150:52 - actually reach to that point let me fix
150:55 - the error up here because i have a
150:57 - misspelled word
150:58 - so return titles dot count and i believe
151:02 - everything is done right here oh we have
151:04 - to
151:05 - uh basically
151:07 - um
151:08 - handle the other case which is going to
151:10 - be the failure let me just retrieve the
151:13 - error over here
151:15 - it's really easy tutorial
151:17 - to be honest i'm going to just print the
151:19 - error not localized description
151:23 - all right build and run and let me see
151:25 - what do i get so far
151:29 - and as you can see here i get nothing y
151:33 - because actually we have created the
151:35 - function but we forgot to call the
151:37 - function itself so let me just paste in
151:39 - that here let me call the function
151:43 - and let me hit build and run and let me
151:45 - see what do i get so far
151:47 - all right so basically i have a list
151:49 - over here um
151:51 - it has
151:52 - all the names for each title and
151:55 - basically the thing that we need to do
151:57 - right now is just we need to create a
151:59 - custom cell so that we preview the title
152:02 - we want to preview the play
152:05 - button and also we wanted to preview the
152:08 - poster for the cell
152:09 - so um let me just go back to my views
152:13 - let me just create a new file that is
152:15 - going to be a coco touch class
152:18 - um i'm going to create
152:20 - actually a ui table
152:22 - view cell
152:24 - um let me call that maybe title
152:30 - table view cell
152:31 - all right
152:32 - and for the language i'm just going to
152:35 - make sure that it's going to be created
152:36 - with swift
152:39 - all right so let me create this
152:42 - so right now i have an empty cell so let
152:45 - me just um type the static
152:48 - static let
152:49 - identifier and that is going to be the
152:52 - name of the class that we have so title
152:55 - table view cell let me just paste in
152:57 - that in here let me initialize that
153:00 - um with the normal
153:02 - instructor um constructor i'm sorry so
153:06 - i'm going to pass the style
153:09 - and the reusable identifier as well
153:12 - and over here i'm just going to um add
153:15 - the other
153:16 - required initializer i'm going to say
153:19 - fail error and over here i'm just going
153:22 - to implement the views that i going to
153:24 - create so the first thing i'm going to
153:27 - do is just going to
153:28 - have a ui image so that it holds the
153:31 - poster for the title that we retrieved
153:33 - from the server so let me just type
153:36 - private
153:37 - let
153:38 - title poster
153:40 - ui image view
153:42 - ui image view which is going to be the
153:44 - type i'm going
153:46 - to use the same anonymous closure so let
153:51 - image
153:52 - view there's going to be an image view
153:56 - all right so imageview.content
153:58 - mode i'm going to set that to
154:02 - um
154:04 - maybe um
154:05 - yeah scale aspect fit
154:08 - image view
154:10 - um
154:11 - yeah i'm going to return the image view
154:12 - for now
154:14 - okay um basically we need to add this
154:18 - for the cells so let me type content
154:22 - um
154:23 - view dot add some view i'm going to add
154:26 - the title poster
154:27 - ui image view all right
154:31 - next thing that we need is just a label
154:34 - that it's going to hold the title name
154:36 - so let me just type private let
154:39 - title label
154:41 - um not titles it's only title label
154:45 - and that is going to be a type of ui
154:50 - label
154:52 - all right so let label it's going to be
154:54 - equal to ui label i'm going to um
154:58 - return the label for now
155:01 - and if we need to do anything we're
155:03 - going to
155:04 - add that
155:06 - later so let me just
155:07 - um yeah i'm going to basically use the
155:11 - content auto layout so i'm going to
155:13 - activate that so label dot
155:16 - um translates auto resizing masking into
155:19 - constraints i'm going to set that to
155:21 - false
155:22 - i'm going to use that as well with the
155:25 - image view so instead of a label i'm
155:28 - going to type image view
155:31 - i'm going to add
155:34 - the label to my content view as well so
155:37 - content view dot add some view um type
155:40 - the label
155:42 - um what do i need um next um i believe
155:45 - is it's going to be a button
155:47 - so let me just type in here
155:50 - private let
155:51 - play title button
155:55 - this is going to be a ui button i'm
155:57 - going to initialize that so that button
156:00 - is going to be ui to ui button
156:04 - i'm going to return that button as well
156:06 - but i'm going to activate the auto
156:08 - layout attribute so basically button dot
156:12 - translate auto resizing mask
156:14 - it's false
156:16 - um i'm going to run that or call that to
156:20 - be exact and also i'm going to
156:22 - add that to my content view add some
156:25 - view i'm going to add my button over
156:27 - here
156:29 - um all right so basically make a new
156:31 - function over here i'm going to call
156:33 - that apply constraints
156:37 - all right
156:39 - so let me just go ahead and create the
156:42 - function so private fund create
156:44 - constraints
156:46 - and the first constraint that i'm going
156:47 - to have is basically um the poster
156:51 - uh and the title label and also the
156:55 - button so let me just type in here let's
156:58 - i'm going to copy the name of this
157:01 - variable over here
157:03 - i'm going to add constraints as well so
157:06 - constraints that's going to be an array
157:09 - let me copy that one paste that one more
157:11 - time so basically i'm going to
157:13 - constrain the leading anchor
157:15 - um to be constrained with the content
157:18 - view dot leading anchor as well
157:22 - i'm going to
157:23 - set the top
157:25 - anchor to be constrained with the
157:28 - um i believe it's going to be with the
157:31 - content view as well which is going to
157:33 - be the top anchor i'm just going to add
157:36 - some margin
157:37 - at top
157:38 - maybe it's going to be 15 points
157:42 - all right um
157:44 - titles um poster image view dot bottom
157:49 - anchor the constrain
157:52 - also to the content view dot bottom
157:54 - anchor i'm just going to
157:56 - reverse that to be negative 15.
158:00 - and for the width so let me just
158:04 - choose maybe 100 point
158:08 - and over here i'm just going to activate
158:11 - this
158:12 - constraints
158:13 - okay
158:15 - and also i'm going to create a create
158:19 - i'm sorry i forgot the separator over
158:21 - here i'm just going to create a
158:24 - public function
158:25 - i'm going to call that
158:28 - configure
158:29 - with
158:31 - model
158:32 - i'm just going to
158:35 - pass the view model over here that was
158:37 - going there's going actually to hold the
158:40 - poster the label
158:43 - and that's it i guess so basically let's
158:45 - type title
158:48 - i'm sorry title
158:50 - view model we don't have this yet
158:54 - um so basically um let's just
158:58 - choose the imageview that we have in sd
159:01 - set image with the url
159:04 - and over here i'm just going to add this
159:06 - url so let
159:08 - url i'm sorry guardlet
159:10 - or that url is going to be a url
159:15 - i'm going to call that with a string
159:17 - over here so basically i'm going to pass
159:19 - model
159:20 - dot poster
159:22 - url
159:24 - all right so else return
159:29 - okay and i'm going to pass the url over
159:31 - here for the completion i'm going to
159:34 - pass nil and what else do we need to do
159:36 - basically we just need to set the title
159:39 - as well so basically title label dot
159:41 - text that is going to be our from our
159:44 - model
159:45 - um dot um
159:48 - tile
159:50 - name okay
159:53 - um i'm just going to change the pascal
159:57 - this okay so title name
160:00 - let me just go to my view model over
160:02 - here
160:03 - let me create a new file this is going
160:06 - to be a swift file
160:08 - and let me just type title
160:12 - view model
160:14 - all right that is going to be a
160:16 - structure
160:17 - title
160:18 - view model
160:20 - let me just type let
160:23 - title name
160:24 - that's going to be a string
160:27 - and let
160:28 - poster
160:29 - url that's going to be a string as
160:32 - well all right so um i guess that's it
160:36 - for now so let me just
160:39 - make sure that we have everything set up
160:40 - over here the poster
160:43 - path is a string as well so we can
160:46 - go back to
160:48 - my title
160:50 - table view this
160:52 - that this error is going to go away
160:54 - right now so basically we have our um
160:57 - sales setup let's just complete adding
160:59 - the constraints
161:01 - so let um i'm going to copy that because
161:05 - it's
161:06 - um it's title label it's a good practice
161:08 - actually to name to have a consistent
161:11 - naming convention so title label
161:13 - um constrains
161:17 - all right
161:18 - that's going to be an equal to an array
161:20 - of constraints so basically title label
161:23 - dot leading anchor the constraints i'm
161:27 - going to add that next to the poster so
161:30 - basically
161:31 - poster
161:32 - title poster image view the trailing
161:35 - anchor
161:36 - um and that is going to be
161:38 - next to the poster by maybe 20
161:42 - points all right so title label
161:48 - dot um
161:49 - center y
161:51 - i'm going to constrain that with the
161:53 - cell itself
161:54 - so basically
161:56 - content view dot center y anchor
162:00 - i believe that's it for the um
162:02 - for the constraints for the labels so
162:04 - let me just activate this constraints as
162:06 - well so ns layout
162:09 - activate
162:11 - title label constraints
162:14 - and
162:16 - okay so let me just go back to my
162:18 - upcoming view controller instead of just
162:20 - registering a normal cell let me just
162:22 - type title
162:24 - table view cell i'm going to access the
162:27 - identifier so title table view
162:29 - cell.identifier
162:31 - and over here i'm just going to dequeue
162:33 - this cell
162:34 - so let me just type guard
162:37 - let's cell is going to be able to table
162:39 - view the tq
162:41 - for the identifier title table view
162:45 - cell.identifier for the index path
162:48 - as title table view cell else i'm going
162:51 - just to
162:53 - return a normal cell for now
162:56 - ui table view cell
162:58 - all right and over here i'm just going
163:00 - to access that so cell as you can see
163:04 - here we have the um
163:06 - the configure the configure
163:09 - expects to have a title view model so
163:11 - let me just give that to the um to the
163:14 - function so it expects the title name
163:17 - and the title poster and we can easily
163:19 - access that using the titles array that
163:21 - we have
163:24 - index path the row and over here you can
163:27 - see um basically we can actually define
163:30 - that over here so title is going to be
163:34 - um
163:35 - titles dot index path dot row
163:38 - and over here i'm just going to add the
163:39 - title
163:40 - dot
163:41 - um original title maybe if it's not
163:45 - there so title dot original name
163:48 - and for the poster url i'm just going to
163:51 - access the title as well and i believe
163:54 - it's here under the path
163:56 - dot
163:57 - i'm sorry the poster path
164:00 - and actually i'm going to return that
164:03 - cell
164:04 - and before i hit run i just discovered
164:07 - that we are only
164:09 - adding the um
164:11 - the path after the the url so i'm going
164:14 - to copy that from the view that we made
164:17 - earlier at the home view controller
164:19 - but that
164:21 - yeah that needs to be unwrapped first
164:24 - um but for now we can just um
164:28 - add or fix that with the normal over
164:31 - here so basically we just need to add
164:33 - the default value as well so unknown
164:36 - title name so let me just go back to my
164:39 - collection table view cell i believe
164:43 - um basically let me just yeah basically
164:46 - i'm going to copy
164:47 - that um line over here
164:52 - right and let me just go back to my
164:54 - title table let me just go
164:56 - to the um to the line that i'm going to
164:59 - set the url
165:01 - so um let me just paste that in here
165:05 - um copy this model the poster url
165:09 - instead i'm going to add this
165:11 - model.poster url let me just delete that
165:14 - i believe we have every everything set
165:16 - up over here let me just
165:18 - hit run and let me see what do i get
165:22 - i believe that there is an error let me
165:24 - just see
165:25 - what is the error over here uh yeah
165:28 - basically we just need to add a default
165:31 - value which is going to be an empty
165:33 - string
165:34 - let me type build and run
165:37 - coming soon
165:39 - and yeah there's something wrong with
165:42 - the
165:42 - with the cell
165:44 - but clearly we see here
165:46 - the um the title the poster and
165:49 - basically we just need to
165:52 - fix the height of the row um so let me
165:55 - just type in here um
165:58 - row height or
166:01 - height for row let's just return
166:04 - maybe um 90. let me just build and run
166:07 - one more time let me see what do i get
166:10 - coming soon
166:11 - all right so we're going we're getting
166:13 - somewhere so i believe i'm just going to
166:16 - modify or just play around with the
166:19 - numbers over here
166:20 - so um
166:21 - yeah i believe that is okay
166:25 - um
166:27 - all right so we can actually increase
166:30 - that maybe to 140.
166:32 - let me see what do i get at the end so
166:35 - let me just go back in here um yeah it's
166:38 - getting
166:40 - better and better you can just play
166:42 - around with this let me just add the
166:45 - button over here um i've made the button
166:48 - i believe so let me just
166:50 - make sure that i have the cell over here
166:53 - so title table
166:55 - view cell i have the button
166:57 - um
166:58 - let me just go and set the image
167:02 - and this is going to be a system image i
167:05 - believe it's going to be play the circle
167:08 - play the circle
167:11 - and this is going to be for normal right
167:13 - now
167:14 - adding this so let me just add the
167:17 - constraints for that as well so let me
167:20 - just copy the name
167:22 - let me just over here create new
167:24 - constraints for that button
167:28 - okay
167:30 - and i'm going to set the um
167:33 - the trailing anchor to be exact so the
167:35 - trailing anchor is going to be set from
167:37 - the constraint actually with the
167:40 - training anchor of the sale itself so
167:42 - i'm just content view dot railing anchor
167:45 - and i'm going to add a constant which is
167:47 - going to be
167:48 - minus
167:50 - 20.
167:51 - i'm going to add
167:53 - the constraints to fix it at the middle
167:56 - of the cell as well so
167:58 - center y anchor is going to be
168:00 - constrained with the content view the
168:02 - center y anchor as well i'm just going
168:05 - to activate this so activate play title
168:09 - button
168:11 - um constraints so let me just hit build
168:14 - and run and let me see
168:18 - um all right we are go we're getting
168:21 - much closer to the um to the finished
168:24 - product
168:25 - um let me just go back in here let me
168:28 - just button the tint color that is going
168:33 - to be white
168:35 - and
168:36 - actually i'm going to change the size of
168:38 - the image so let me just get the image
168:40 - over here so let me just copy that all
168:42 - right so i have the image
168:45 - and over here i'm just going to say
168:48 - um with configuration
168:51 - ui image
168:53 - okay dot symbol configuration i believe
169:00 - um yeah and over here i can just
169:03 - change the point size maybe um 40
169:08 - and let me pass the image over here
169:13 - let me build and run and let me see what
169:15 - do i get
169:18 - okay um yeah basically that's it so i'm
169:22 - just going to
169:24 - play around with the um with the size of
169:26 - the button as well over here so
169:29 - um
169:31 - yeah basically that's it just go to the
169:34 - poster and type image view dot clips to
169:37 - the bounds and set that to true and that
169:40 - will prevent each poster from
169:42 - overflowing the container and also we
169:45 - can just decrease the padding just a
169:47 - little bit maybe to 10 instead of 15
169:51 - and then let me test that to see if that
169:54 - is working
169:55 - and
169:56 - yes everything is fixed right now you
169:58 - can see here that each poster has like
170:01 - 10 points up and bottom so basically
170:04 - everything is fixed regarding the
170:06 - upcoming tab and now let's just go ahead
170:08 - and move to the top search so basically
170:11 - the top search is going to have the same
170:13 - functionality
170:15 - that the upcoming tab has so first of
170:18 - all let me just copy those three lines
170:20 - over here
170:23 - all right and let me paste that over
170:25 - here and we can just
170:28 - change that to search let me hit build
170:30 - and run to see if it's working
170:34 - and as you can see here
170:37 - all right so
170:38 - the next thing that we need to do right
170:39 - now is just we want to have a table view
170:43 - so that we can display
170:46 - maybe a discover tab for the user before
170:50 - um before the user enters a query to
170:53 - search for so maybe he want to discover
170:55 - what is trending right now uh or what he
170:58 - might be interested at so let me just go
171:00 - ahead and
171:02 - define my table um basically we can copy
171:06 - the same table over here i just wanted
171:08 - to make this really quick
171:10 - so let's just copy that
171:13 - go back in here
171:14 - and let's just paste that maybe i'm
171:17 - gonna call that this cover
171:20 - table
171:23 - all right and that is going to have the
171:26 - same
171:27 - title uh table view cell which is
171:30 - basically why i've made it like a
171:32 - generic one so that we can reuse it in
171:35 - so many places as you can see here once
171:37 - in the upcoming tab and the the other in
171:40 - the search review
171:41 - all right so over here
171:43 - um let me just clear that space um and
171:46 - let me add that as a sub view so
171:49 - discover table
171:52 - and
171:53 - over here i'm going to set the layout
171:56 - so
171:57 - lay out so view that layouts of views
172:01 - super view the layouts of views and i'm
172:04 - going to give that a frame
172:07 - with the bounce of the view itself so
172:09 - view the bounce
172:12 - right and also over here just make sure
172:16 - to you know set the delegate and the
172:18 - data source for the table view to be
172:21 - that controller so that we can implement
172:23 - all the functions that we're gonna use
172:25 - to
172:26 - pass the data and also pass the number
172:29 - of rows so
172:31 - discovertable.delegate
172:34 - is going to be equal to self
172:36 - discover table the data source also
172:39 - going to be equal to self
172:42 - all right let's just go down there
172:45 - extension
172:46 - search view controller and let me type
172:49 - ui
172:50 - table view
172:52 - um data source
172:54 - ui table view delegate
172:57 - all right just a second ui table
173:02 - right
173:03 - so first thing that we need to implement
173:05 - is the number of rows
173:07 - for now let me just return 10
173:10 - and sell for row also
173:14 - maybe i'm gonna be returning a cell
173:17 - right now so
173:19 - we have the sale so let's just do guard
173:22 - let's sell going to be equal to table
173:24 - view
173:25 - dq cell with identifier um i believe
173:29 - it's title
173:30 - table view cell dot identifier
173:32 - for index path
173:34 - as title table view cell and else we're
173:39 - going to return
173:40 - a normal ui to table view cell
173:45 - all right and over here let me just
173:47 - return the cell for now because actually
173:49 - we don't have data yet okay so let me
173:53 - just go really quick to um the movie
173:56 - database
173:58 - um
173:59 - maybe we can find
174:01 - the method that we're looking for
174:03 - i'm gonna maybe we can find the method
174:05 - that we're looking for i believe it's
174:07 - called discover
174:09 - um so let me just go to the website and
174:12 - type in here
174:13 - maybe discover yeah movie discover over
174:16 - here and we can just scroll down until
174:19 - we see
174:20 - um try it out you can just add
174:24 - the uh
174:25 - the attributes that you want
174:27 - to search the or to query the database
174:30 - with
174:31 - let's say for example
174:32 - that you're looking for specific region
174:35 - uh specific language and also you can
174:37 - just put your api key over here and test
174:40 - that out and it's gonna give you the
174:43 - results
174:45 - so basically let me just copy that out
174:48 - all right
174:49 - and let me go back to my api caller
174:52 - we're going to add a new function over
174:54 - here all right so let me just
174:57 - type func
174:58 - get
175:00 - this
175:01 - movies
175:04 - all right
175:06 - and let me just copy that
175:08 - signature
175:10 - over here
175:11 - just i'm gonna make that really quick
175:15 - and also basically we're gonna implement
175:17 - the same functionality over here so let
175:19 - me just
175:20 - do that
175:22 - let's just copy that
175:24 - um basically we just need to
175:27 - write so let me just go ahead and paste
175:30 - the url over here
175:34 - all right so um basically we're gonna
175:36 - have the same constant base url
175:40 - and we want to pass our api key instead
175:44 - of
175:45 - the top rated i'm just going to add the
175:48 - same stuff over here
175:51 - so let me just go ahead and delete that
175:54 - and make sure that i have the same
175:56 - constant base url all right so i'm going
175:59 - to copy all that and paste that in here
176:03 - just a second
176:05 - all right so let me just delete that i
176:07 - don't need it anymore
176:09 - and instead of the api key over here i
176:12 - can just
176:13 - pass the one i have
176:15 - so let me just do that constants dot
176:19 - api key
176:22 - and as you can see here
176:24 - everything's set up we can use the uh
176:27 - discover movies function
176:30 - all right
176:32 - it looks clean
176:33 - all right so let me just go back to my
176:36 - upcoming i'm sorry it's the the search
176:38 - view controller and let me just define a
176:41 - new variable over here so private
176:44 - var
176:45 - titles
176:47 - and we just
176:48 - cop we can just copy that
176:51 - from here
176:52 - all right
176:57 - and then we can um use the same function
177:01 - so
177:01 - fetch
177:04 - discover movies
177:07 - let's just
177:08 - define that function over here so
177:10 - private func
177:12 - i'm going to basically um
177:16 - call the api caller
177:20 - the shared dot get
177:22 - discover movies
177:26 - and for the result i'm going to switch
177:28 - on that
177:30 - switch result
177:32 - all right switch result
177:35 - case success
177:37 - let me get those titles
177:39 - and let me assign those titles over here
177:42 - to the titles array that we have
177:45 - so um
177:46 - titles
177:49 - um
177:50 - okay
177:53 - it's okay we're gonna do this
177:57 - we self
178:00 - so self the titles is gonna be able to
178:03 - titles
178:05 - and over here we just need to
178:08 - set that on the main thread as well so
178:11 - let me just do dispatch queue.main.async
178:15 - and over here i'm just going to
178:17 - reference my table
178:19 - so discover table dot reload data
178:24 - and over here i'm just going to handle
178:26 - the other case really quick so failure
178:29 - select error is going to be
178:32 - just simple
178:34 - print statement
178:38 - all right so now we have everything set
178:42 - up over here
178:43 - and let me just go ahead and use that
178:47 - um
178:49 - variable that we made and get the count
178:51 - for it
178:52 - so that we have the number of rows that
178:54 - we're going to be using
178:56 - we can also
178:58 - set the cell the configure i believe we
179:01 - have that
179:02 - the title um
179:04 - the title view model we're going to
179:06 - define that over here so let
179:09 - model
179:10 - is going to be equal to title view model
179:13 - and the title name
179:15 - is going to be um
179:18 - alright so
179:21 - we can pass that in here
179:24 - and here let me just get the title that
179:27 - title
179:28 - it's going to be equal to
179:30 - titles
179:35 - right
179:36 - index path
179:37 - the row
179:39 - and now we have the title so basically
179:41 - title
179:43 - dot
179:44 - maybe the title name
179:47 - if that is not available let me just
179:49 - pass in here the title dot the original
179:52 - name again no no
179:54 - um
179:55 - the title original title yes
179:58 - and if it's not available let me just
180:00 - pass
180:01 - unknown
180:03 - name
180:05 - and over here let me just pass in the
180:08 - poster path
180:10 - all right so everything's set up over
180:12 - here
180:13 - and
180:15 - yeah let me just add um
180:18 - and default
180:20 - empty string over here because that is
180:22 - going to be an optional and before we
180:24 - hit build and run um let me just fix
180:27 - something really quick before we get the
180:29 - same error that we had before with the
180:32 - um with this with the upcoming view
180:34 - controller basically which is the height
180:36 - for row
180:39 - and let's just return the same number
180:41 - that we returned at the upcoming view
180:44 - controller which is 140
180:46 - so let me just return 140 let me just
180:49 - hit build and run and let me see the
180:50 - results that we get so far
180:55 - all right so the home controller working
180:59 - fine
181:00 - the upcoming tab is also working fine
181:02 - and the search tab is also working fine
181:06 - and first of all i'm just going to
181:08 - create a new file this is going to be a
181:10 - new view controller of type coco touch
181:12 - class and let me call that search
181:14 - results and basically that is going to
181:17 - be the controller
181:18 - responsible for viewing the data that
181:20 - we're going to retrieve from the
181:22 - database server
181:23 - once we completed our query so let me
181:26 - just um
181:28 - delete all of that we're not going to
181:30 - need that and also i'm just going to
181:32 - give that a new background color so that
181:35 - we can provide that is working so let me
181:37 - just choose maybe system green and as
181:40 - you can see here basically uh we are
181:42 - having multiple files so i just wanted
181:45 - to rearrange my file hierarchy so let me
181:48 - just go ahead and create a new group i'm
181:51 - going to call that core and i'm just
181:54 - going to add the home view controller
181:56 - upcoming view controller the search view
181:58 - and the main tab bar as well as the
182:00 - downloads view controller inside that
182:03 - core all right i'm going to create also
182:05 - a new group
182:07 - so let me just call that maybe general
182:10 - and inside that i'm just going to add
182:12 - the new file that i've just created over
182:14 - here basically the search results view
182:16 - controller all right
182:19 - so um let me just go back to core
182:22 - search view controller and over here i'm
182:24 - just going to start working on my
182:28 - search bar so let me just type private
182:31 - let
182:33 - search
182:35 - controller that is going to be of a type
182:38 - ui search controller with the same
182:41 - method which is basically the anonymous
182:43 - closure i'm just going to create a new
182:46 - um controller over here so basically ui
182:49 - search controller
182:51 - and as you can see here we can specify
182:54 - the search result controller basically
182:57 - let's just type in here search
182:59 - results view controller and i'm just
183:01 - going to get that and give that actually
183:04 - a new instance
183:06 - let me just
183:07 - go ahead and type controller
183:09 - basically search bar
183:11 - dot placeholder and here we can specify
183:14 - any message that we want to prompt the
183:16 - user so let me just type something like
183:19 - search
183:20 - for a movie
183:22 - or a tv
183:24 - show
183:26 - all right um maybe we can change that to
183:29 - be a capital
183:30 - all right and also i'm just going to add
183:33 - this um line over here so controller the
183:37 - search bar
183:38 - search bar style and i'm just going to
183:40 - choose minimal and as you can see here
183:42 - basically you can just read what is the
183:44 - minimal so basically the search bar has
183:46 - no background whatsoever and the search
183:48 - field is translucent so i'm just going
183:51 - to choose that and i'm going to return
183:54 - the controller over here let me just go
183:57 - back to my view did load and i'm just
183:59 - going to add that to my view so
184:01 - basically let me just type navigation
184:04 - item
184:05 - dot search controller and i'm just going
184:07 - to pass that search controller that
184:10 - we've just made
184:11 - all right build and run and let me see
184:14 - what we get so far so um as you can see
184:16 - here we can go to the top search and
184:19 - basically you can see here the search
184:21 - bar is ready um search for a movie or a
184:24 - tv show basically this is the
184:25 - placeholder that we specified earlier
184:28 - and as you can see here once i begin my
184:31 - scrolling it basically fades out or as
184:35 - you can see here this effect is giving
184:37 - you by default by apple thanks apple uh
184:40 - basically apple is taking so much work
184:42 - out of our shoulders so basically once i
184:44 - start typing in here as you can see here
184:48 - the search controller is actually
184:50 - responsible for showing me the search
184:52 - results view controller that we have
184:54 - made in here and basically this is going
184:56 - to be uh where we add our table view and
185:01 - our collections view for basically
185:03 - viewing the results that were fetching
185:05 - from the database and once i hit
185:08 - backspace or delete and as you can see
185:10 - here it by default disappears so um
185:14 - basically we're going to start working
185:16 - with the search view or the search
185:18 - results you can show over here but first
185:21 - i just need to change that color
185:24 - so let me just go back in here and type
185:26 - navigation controller dot nav bar dot
185:29 - thing color and i'm just going to set
185:31 - that by default to white let me build
185:34 - and run this and let me see if that is
185:36 - working
185:37 - so um yes as you can see here the cancel
185:40 - button is just white right now so we
185:42 - have consistency around our application
185:45 - so let's go back to the search results
185:47 - view controller and over here i'm just
185:49 - going to initialize basically a new
185:51 - collection view so let me just type
185:53 - private let
185:54 - search
185:55 - results
185:58 - collection view
186:00 - that is going to be a ui collection view
186:03 - let me initialize that so basically let
186:06 - collection
186:07 - view
186:08 - is going to be equal to ui collection
186:11 - view
186:11 - and i'm just going to initialize that
186:13 - with the zero frame for now and
186:16 - regarding the layout let's just pass in
186:18 - here layout so let me just go up in here
186:21 - let me create that layout so private
186:23 - light or basically just let
186:26 - layout is going to be ui collection view
186:29 - flow layout
186:32 - all right so layout the item size
186:36 - maybe we can give that a size of cg size
186:40 - of um maybe like something like
186:44 - a hundred or um 200 maybe and now let me
186:48 - just register a new cell over here so
186:50 - basically let's just try to reuse the
186:53 - title collection view cell that we have
186:55 - in here so basically let me type the
186:58 - title
186:59 - um collection view cell dot cell all
187:01 - right for the identifier so basically
187:04 - let's just access that one more time and
187:06 - basically i can find my identifier here
187:08 - and over here let me just return back
187:10 - my
187:11 - collection view
187:13 - and over here i'm just going to pass
187:17 - basically uh that collection view one
187:19 - more time but first let me just type in
187:20 - here system
187:22 - background and over here let me just
187:25 - type view dot add sub view
187:27 - collection view or basically search
187:30 - results collection view
187:33 - over here i'm just going to
187:35 - lay out my functions so basically um
187:38 - collection view of the search results
187:41 - basically the frame that is going to be
187:43 - equals to
187:45 - um the view the bounce
187:47 - all right so basically one more thing
187:49 - that we need to do actually i'm just
187:52 - going to create over here so private var
187:56 - titles that is going to be an array of
187:58 - title
188:00 - and let me initialize that array to be
188:03 - empty for now
188:05 - all right
188:07 - and over here we just don't need to miss
188:10 - that one more time so basically search
188:13 - results collection view dot delegate
188:16 - and that is going to be self
188:18 - search results via controller
188:21 - um i'm sorry search results collection
188:23 - view the data source and that is going
188:25 - to be self as well
188:27 - over here let me just type in here
188:29 - extensions
188:30 - search results view controller let me
188:33 - just
188:34 - pass the delegates for here so
188:36 - collection view delegate as well as the
188:39 - collection view data source
188:43 - so basically
188:44 - number of
188:45 - um section items in section basically
188:48 - for now let me just type in here um
188:50 - basically like something like 10
188:54 - and here i'm just going to implement the
188:56 - other data source function which is
188:58 - basically sell for item
189:01 - and let me just go ahead and type guard
189:04 - let cell let me dequeue a new cell over
189:07 - here so
189:08 - dq with the reusable identifier let me
189:12 - just choose um collection
189:14 - view cell or basically what we have
189:17 - called so um
189:19 - yeah title collection view cell
189:21 - identifier for index path
189:25 - that is going to be as um title
189:28 - collection view
189:29 - and else we're just going to return the
189:32 - normal ui collection view so
189:35 - over here i can just specify something
189:37 - like a background color for it and let
189:40 - me just
189:41 - return that cell one more time and um i
189:45 - kept thinking about it basically we are
189:47 - just designing for one screen size so
189:49 - basically we can just
189:51 - make it just a little bit dynamic so
189:53 - that basically you can just try it on
189:55 - multiple screens and i found that this
189:58 - basically so basically ui
190:00 - screen.main.bounds
190:03 - the width
190:05 - let's divide that by three
190:07 - and maybe um we can subtract something
190:12 - around um
190:13 - five or ten
190:16 - okay
190:17 - and also i'm just going to um type in
190:20 - here
190:21 - um the minimum intermittent item spacing
190:25 - i just need to set that so um zero i
190:28 - guess that will work and let me just
190:31 - build and run and let me see what do i
190:32 - get so far
190:34 - okay um top search let me just start by
190:38 - typing anything over here so basically
190:40 - you can see here um these are the cells
190:43 - that are going to be responsible for
190:45 - getting back
190:46 - um the titles that we're going to be
190:48 - searching for
190:50 - all right
190:51 - um and over here um i believe we can
190:54 - test on another screen size so maybe um
190:58 - the iphone 13
190:59 - or um 13 pro i believe yeah i tested on
191:03 - that once let's just go to the search
191:06 - let me just try to type anything over
191:09 - here and yes we have basically the same
191:13 - uh dimensions across uh the
191:16 - normal and the pro max or basically the
191:18 - max
191:19 - device
191:21 - okay all right so let's go really quick
191:23 - to our api caller
191:25 - and over here we're just going to create
191:27 - a new function so basically we're going
191:29 - to type search
191:32 - with
191:33 - query
191:34 - and that is going to be a type of string
191:37 - and basically we're just going to return
191:39 - the same
191:40 - um signature over here so um let me just
191:44 - copy the whole thing over here
191:46 - so let me just paste in here so
191:50 - basically we have a search function that
191:52 - takes a query of type string
191:55 - and basically we are just going to
191:56 - change that url just right now just a
191:59 - second let me just delete the url
192:02 - because we are going to fetch a new url
192:04 - but basically the same things goes over
192:07 - here basically we are just going to pass
192:08 - the url make the request serialize the
192:11 - request using json object that we have
192:15 - over here and then pass in here on the
192:18 - completion and array of titles to the
192:20 - caller so let me just go in here
192:24 - and i have the developers website for
192:27 - the movie database
192:29 - dot org and i just clicked on search and
192:32 - query for details and basically this is
192:34 - going to be um an example for the the
192:37 - url that we're going to uh basically
192:39 - send our get a response or get request
192:42 - to so let me just copy that
192:44 - let me just go back in here and create a
192:46 - new url so guard let url is going to be
192:50 - url
192:52 - that's going to be made of a string
192:55 - and basically i'm just going to paste
192:58 - that in here um also we can um
193:00 - substitute that with the
193:03 - with the constant here
193:04 - that we have so basically let me just
193:06 - type constants dot base url
193:11 - and i believe yeah we need the forward
193:13 - slash over here
193:14 - and
193:15 - instead of api key we're just going to
193:18 - assign the constant that we have for
193:20 - that so
193:21 - constants.api key
193:23 - and in here basically we are just going
193:25 - to pass in the query that we have
193:30 - all right
193:31 - so basically our query is going to be
193:33 - here but before passing the query we
193:36 - just need to do something extra
193:38 - but before
193:40 - before this let me just go back in here
193:43 - all right so before we send our query to
193:45 - the url we just need to format that
193:48 - query so first of all we are going to
193:50 - type guard let
193:52 - query that is going to be query dot
193:56 - adding
193:57 - percent
193:59 - encoding and basically i'm just going to
194:01 - pass over here so basically um url host
194:05 - allowed all right
194:06 - else return
194:09 - and that basically takes care of
194:12 - formatting the url so that we can use it
194:14 - without any error all right so basically
194:17 - we have everything set up over here so
194:20 - um all right so let's just go back to my
194:22 - um search controller over here search
194:24 - review controller and then we just need
194:26 - to configure the updater
194:28 - to be this controller so basically let
194:30 - me just type search
194:32 - controller dot
194:34 - um
194:35 - i believe it's going to be yeah search
194:37 - results of data and that is going to be
194:40 - sell so basically xcode is just going to
194:42 - throw some errors over here so basically
194:44 - we just need to um import or conform to
194:48 - that protocol
194:49 - um
194:50 - so let me just copy that over here and
194:52 - basically let me just go down in here
194:55 - extension
194:56 - search view controller and i'm just
194:58 - going to conform to that and now i'm
195:00 - just going to implement one function
195:02 - over here which is basically update um
195:05 - search results all right so basically we
195:07 - just need to um get the query from the
195:10 - search bar so let me just type in here
195:12 - let
195:13 - search bar
195:15 - that's going to be
195:16 - equal to search controller dot search
195:19 - bar
195:21 - and over here i'm just going to write
195:23 - guard
195:25 - let
195:26 - query
195:27 - that is going to be
195:30 - search bar dot text
195:34 - and i just need to make sure that this
195:36 - text um
195:38 - is okay to be sent first so let me just
195:40 - type in here um
195:43 - query
195:44 - dot
195:45 - trimming characters
195:47 - in white space so basically each white
195:49 - space is going to be trimmed
195:51 - and i'm just going to make sure that it
195:54 - is not empty so i have to
195:56 - invert that
195:59 - all right any other thing i'm just going
196:01 - to type in here the same thing so
196:03 - basically query dot trimming in
196:06 - white space
196:07 - and i'm just going to get the count and
196:10 - i'm also going to make sure that the
196:12 - account is greater than or um or
196:15 - basically
196:16 - equals to three so basically we're just
196:18 - doing that to try to minimize the calls
196:22 - that we're going to make to the server
196:24 - as much as possible so i don't just need
196:26 - to call the server or basically send
196:28 - anything to server if the search bar has
196:32 - maybe like two characters or so
196:35 - all right so um
196:38 - also i just want to um set the
196:41 - result controller so basically let
196:44 - results
196:45 - controller
196:46 - that's going to be equal to search
196:48 - controller
196:50 - search results controller
196:53 - as
196:54 - search results view controller else i'm
196:58 - just going to return so basically i'm
197:00 - just setting the results controller to
197:03 - to be of type search results view
197:06 - controller and over here let me just go
197:09 - and write results controller dot
197:11 - delegate
197:14 - okay just a second
197:18 - and over here i'm just going to call the
197:20 - function so let me just type api
197:22 - caller.share.search
197:25 - and that is going to take the query that
197:27 - we have over here
197:29 - and for this i'm just going to pass in
197:31 - result and over here dispatch queue
197:35 - dot main
197:37 - dot async and over here we can switch on
197:39 - the results
197:40 - so result
197:43 - okay
197:44 - okay success
197:46 - we have the um reference two titles over
197:49 - here so basically
197:52 - i'm just going to get the results
197:55 - or basically let me just call that
197:57 - titles
198:00 - so results controller
198:02 - dot
198:03 - um i believe we have to um change that
198:07 - maybe to public
198:10 - because we want to access that from the
198:12 - search view controller
198:14 - so results controller dot titles that is
198:17 - going to be equals to titles okay and
198:20 - the results controller dot um also we
198:23 - need to have access to the um to
198:25 - collection view as well so let me just
198:27 - go back in here
198:29 - all right so change that to public as
198:31 - well so now we can access that so let me
198:34 - just go back to our search view
198:36 - controller and over here i'm just going
198:38 - to get the search results collection
198:41 - view i'm just going to reload the data
198:44 - over here
198:45 - and as you can see here um basically we
198:47 - didn't need to have like a weak self
198:50 - because actually we're not using self
198:51 - over here and now
198:53 - i just need to handle the failure
198:56 - and okay i'm just going to
198:59 - you know
199:00 - the usual which is basically printing a
199:02 - localized description for the um
199:04 - description uh which is basically
199:07 - forgotten before the error
199:09 - all right so let me just go back in here
199:12 - search results controller instead of
199:16 - having 10 elements by default i'm just
199:18 - going to return return
199:20 - the titles.count
199:22 - and over here i'm just going to delete
199:24 - that i have made sure that the cell is
199:27 - working right now i can just configure
199:31 - it to be working with the array that we
199:33 - have so um
199:35 - let me just get that over here so let
199:38 - title
199:39 - is going to be of um
199:42 - titles
199:44 - okay index path
199:46 - dot row
199:48 - and over here i have the information
199:50 - accessible for each title
199:53 - okay so basically cell
199:55 - dot configure
199:57 - and it just take a string over here
199:59 - really this is going to be um the the
200:02 - poster path
200:04 - so i can pass in here title dot poster
200:08 - path let me hit build and run and let me
200:10 - see what do we get so far
200:13 - okay
200:15 - and i believe that same error that we
200:17 - have basically it's just an optional so
200:20 - i'm just going to give a default
200:22 - of an empty string
200:25 - okay
200:26 - let me try to search for maybe harry
200:30 - potter so harry
200:32 - potter okay and as you can see here we
200:35 - have um the search functionality is
200:38 - working
200:39 - okay so as you can see here i'd search
200:41 - for google developer console and we're
200:43 - going to click on the first link and
200:46 - basically i've created a new account on
200:47 - google over here so that i walk you
200:50 - through how to enable this service on
200:52 - your app so basically we're going to
200:54 - click on credentials
200:57 - all right and then google is going to
200:59 - ask you first to create a project so
201:02 - that's exactly what we're going to do so
201:04 - basically let's just create project and
201:06 - let me call that for example
201:09 - netflix clone
201:10 - and let me just
201:12 - press create
201:13 - all right so once it's finished we're
201:14 - going to see this page so basically
201:16 - we're going to just press on create
201:18 - credentials and we'll just need to
201:20 - choose the api key and basically this is
201:23 - going to be the key that we're going to
201:25 - use actually to access the youtube api
201:28 - servers okay
201:30 - so just
201:31 - close that right now and as you can see
201:32 - here your api key is stored under the
201:35 - api key sections and basically you can
201:37 - just copy that from here
201:39 - all right so the next thing that we need
201:41 - to do is actually enable the youtube api
201:43 - service so let me just open the
201:45 - dashboard one more time over here and
201:47 - over here you're just gonna see the
201:49 - enable apis and service we're gonna
201:50 - click on that and over here we're just
201:52 - going to scroll down until we see the
201:56 - youtube data api basically we're just
201:58 - going to click on that
202:00 - and press enable
202:02 - and that's it once it's finished we're
202:04 - going to be able to use that to search
202:06 - the youtube right so as you can see here
202:09 - the youtube api services is already
202:11 - enabled and as you can see here we have
202:13 - the option to disable but we won't do
202:15 - that actually so let me just go back to
202:17 - my credentials and let me just get that
202:20 - api key and let me copy that api key
202:23 - let me fire up xcode and i'm gonna make
202:26 - sure that you're in the api caller and
202:28 - over here i'm just going to add this api
202:30 - key so basically static
202:34 - let
202:35 - youtube api key i'm just going to paste
202:38 - that in
202:40 - so right now we're going to be able to
202:42 - use that to search the youtube so let me
202:44 - just go back to safari and let me go
202:47 - over here and type youtube
202:49 - api
202:51 - and let me open the first link over here
202:53 - and we're going to click on search for
202:55 - content
202:56 - as you can see here we have the
202:58 - documentation on how to use the um the
203:01 - api for youtube to make a search and as
203:04 - you can see here we are searching with
203:05 - the google um apis
203:08 - slash youtube and the search so
203:10 - basically um i know a way which is
203:12 - basically very easy which is you can
203:15 - just scroll down on here on the right
203:17 - side of the screen and then click on
203:19 - show code
203:21 - and then click on the http and as you
203:23 - can see here basically this is the going
203:25 - to be the http link or the url that
203:28 - we're going to use to fetch data from
203:31 - the youtube
203:32 - so basically uh we can scroll down here
203:35 - um and you see this q basically this is
203:38 - going to be our string that we're going
203:40 - to pass or basically this is going to be
203:43 - the string that we're going to search
203:45 - for so let me just type in here for
203:47 - example harry potter
203:51 - and as you can see here uh it gets
203:54 - updated over here and the space between
203:57 - harry and potter is just um now percent
204:00 - 20 uh which we can do easily in xcode
204:03 - and we have done that in the last video
204:05 - as well so basically uh we're just going
204:07 - to pass
204:09 - our api key
204:10 - in here so let me just um you know
204:14 - make that easier to read so let me just
204:16 - copy that
204:19 - all right
204:20 - and let me just go back in here to api
204:22 - color i'm just going to create a new
204:26 - function over here so let me just go
204:28 - in
204:29 - this section over here so let me just
204:31 - type a new function which is going to be
204:33 - func
204:34 - get movie
204:36 - with
204:37 - query
204:39 - that is going to be a type of string and
204:41 - we're going to take care of the
204:43 - completion function but later i'm just
204:46 - going to right now create a url
204:49 - so let me just dive in here let
204:51 - url and that is going to be a url of a
204:55 - string and over here i'm just going to
204:57 - pass in the string that we have all
205:00 - right um basically i can see here this
205:02 - is going to be basically the same across
205:05 - the urls that we're going to make so let
205:07 - me just
205:08 - go in here
205:10 - and let me copy that
205:12 - or cut that actually
205:14 - and i'm just going to go over here i'm
205:16 - going to type static let
205:19 - youtube
205:20 - base url
205:22 - and that is going to be
205:24 - equals to this
205:27 - and instead i'm just going to pass that
205:29 - one more time in here so let me just
205:32 - type constants
205:34 - dot youtube base url and now we have our
205:38 - query over here i'm just going to take
205:40 - that
205:41 - from there from the search
205:43 - function because it's going to basically
205:46 - uh be the same
205:48 - all right so let me just type in here
205:51 - guard let query dot adding per set
205:54 - encoding with allow characters url
205:56 - allowed so basically that is going to
205:58 - take responsibility for replacing the
206:01 - white space with the percent 20 that you
206:03 - saw earlier okay and right now i'm just
206:05 - going to pass that in here
206:09 - all right so now i have my query
206:12 - and over here i'm just going to replace
206:14 - that with my api key that we got earlier
206:19 - so
206:20 - youtube api key and basically that is
206:23 - going to be the url so let me just guard
206:26 - that out so guard let and that is going
206:30 - to be um else
206:33 - return and now we have our api url ready
206:36 - to be used so right now i'm just going
206:38 - to make um a task so let task or you
206:43 - know what we can just copy that one more
206:45 - time over here so
206:47 - i'm just going to take that all
206:50 - and i'm just going to paste that one
206:52 - more time in here and as you can see
206:53 - here basically we're just doing the same
206:55 - things over and over again so i believe
206:57 - it's pretty easy so um we haven't yet
207:01 - decided the completion function uh what
207:03 - will it do so let me just
207:06 - instead of trying to decode that one
207:08 - more time in here let's just for now
207:11 - view the response that we're going to
207:13 - get back from the youtube api so for now
207:16 - i'm just going to print the error over
207:18 - here
207:19 - and here i'm just going to type json
207:22 - serialization
207:24 - dot
207:26 - json object and that is going to come
207:29 - from data and i'm going to
207:32 - say fragments allowed and over here i
207:35 - can just print that results
207:38 - and we just need to fire up this um
207:41 - function basically from outside so let
207:44 - me just go to my home view controller
207:47 - for now and we're going to change that
207:49 - basically however
207:51 - i just want to open the view load method
207:54 - over here and over here i'm just going
207:56 - to say api caller.shared.getmovie
208:00 - and over here since we don't have a
208:01 - completion function yet so i'm just
208:03 - going to pass in a normal string so
208:05 - basically harry potter
208:09 - and let me build and run this and let me
208:11 - see what do i get so far
208:17 - all right so basically as we can see
208:19 - here permission denied i believe
208:21 - something wrong with the api so let's
208:23 - just go back to the api caller and let
208:26 - me see here um and basically yes we
208:29 - forgot actually um i removed the key
208:32 - parameter as well so let's just make
208:34 - sure that you type that exactly like i
208:37 - do over here
208:39 - i just forgot to add the key
208:41 - keywords so let me just hit build and
208:43 - run one more time and let me see what do
208:45 - i get
208:46 - and as you can see here we managed to
208:48 - get the response successfully from the
208:50 - youtube server
208:52 - so let's have a quick look on the
208:53 - response that we get from the youtube
208:55 - server as you can see here basically
208:56 - there is an array of some sort of object
209:00 - and that object has as you can see here
209:02 - an attribute which is called id and
209:05 - inside that id we have the video id that
209:07 - we can use to search for the actual
209:10 - video on youtube
209:13 - so let me just copy that right here and
209:16 - let me just go up in the models over
209:19 - here and i'm just going to create a new
209:20 - file and i'm going to name that
209:23 - youtube
209:25 - search response
209:29 - all right and over here let me just
209:31 - create a new struct let me give that
209:33 - name of
209:34 - youtube search results
209:37 - and that is going to be
209:39 - conforming to the protocol which is
209:41 - codable
209:43 - over here i'm just going to create
209:45 - an item and we can just know
209:49 - what we're gonna have by this so
209:51 - basically we have an array of items
209:53 - so
209:54 - items
209:56 - and that is going to be an array
209:58 - of
209:59 - maybe um
210:01 - video element
210:03 - so i'm just going to create that over
210:05 - here so video
210:07 - element
210:10 - or yeah video element and that sounds
210:12 - good
210:14 - all right now xcode is going to complain
210:17 - because it doesn't know what is video
210:18 - element is and we just can
210:21 - give that
210:22 - a definition over here so structure of
210:25 - video element that is going to be a
210:26 - codable as well
210:29 - and over here it's going to have
210:32 - um maybe something like an id
210:36 - so um let id that is going to be an
210:39 - object as well
210:40 - maybe we can call that um maybe
210:44 - video element i'm sorry
210:49 - video
210:50 - element
210:52 - or we can just call it id video
210:56 - element
210:58 - all right so right now we just need to
211:00 - create that structure so struct
211:03 - id video
211:05 - or can just copy that name over here
211:07 - so struct id
211:09 - video element that is going to be
211:11 - conforming to the codable protocol as
211:13 - well and that should be having like two
211:16 - fields the kind field and that is going
211:18 - to be a string
211:20 - and basically the
211:22 - id
211:24 - or video id and make sure to have the
211:27 - same name over here world as well
211:29 - so string but for the sake of simplicity
211:31 - i'm not going to be using the kind but
211:34 - i'll just leave it here so right now we
211:36 - have the structure for or basically the
211:38 - model for the youtube response
211:41 - ready and also i can change that from
211:43 - results to response
211:46 - so it matches
211:48 - the um the name of the file over here
211:51 - all
211:52 - right and now let's just jump in in the
211:55 - api caller
211:57 - and let's just complete our function
211:59 - over here which is basically get movie
212:01 - so i can just copy the same
212:04 - um completion handler over here so let
212:07 - me just
212:09 - paste that over here so
212:11 - let me just have the completion function
212:13 - but instead of returning an array of
212:17 - title
212:18 - i'm just going to return a video element
212:21 - from here
212:22 - and you can just go back to the um
212:25 - youtube search response and basically
212:27 - the video element is going to have the
212:30 - id
212:31 - so let me just go back in here so i'm
212:33 - just going to return a video element not
212:35 - an array of video element make sure that
212:38 - you have this right
212:40 - and now instead of just realizing the
212:43 - data over here i'm just going to decode
212:46 - that so let me just have an instance of
212:47 - the json decoder and now press decode
212:51 - and over here i'm just going to use the
212:53 - youtube
212:54 - search response that i have
212:57 - from the data
212:59 - and over here i can just print the
213:00 - results
213:02 - and now let me hit build and run and let
213:04 - me see what do i get
213:07 - all right so we have an error over here
213:09 - so let me just go and fix that really
213:11 - quick
213:12 - and basically the api shared um
213:16 - get movie response that misses and uh
213:18 - like um completion over here so let me
213:20 - just
213:21 - api color
213:24 - shared dot get movie
213:28 - all right so let me just pass in here
213:30 - harry potter and over here i'm just
213:33 - going to get the results i'm not going
213:35 - to do anything with the results right
213:37 - now let me just hit build and run
213:39 - and let me see what do i get
213:41 - all right so basically i have here an
213:43 - array and that array as you can see here
213:45 - has the best matches for the searches
213:48 - that we have but more importantly um the
213:52 - decoding went successfully and as you
213:54 - can see here we can just access the
213:56 - first
213:57 - um the first object over here and it
214:00 - does have like an id which is going to
214:02 - be this that this is what we're going to
214:04 - be using for searching the youtube
214:07 - and now let me just go back to the api
214:09 - color one more time
214:10 - and instead of just um printing the
214:13 - results over here
214:15 - so just actually
214:17 - return the results so the completion
214:20 - that is going to take
214:23 - success and for the video element i'm
214:25 - just going to access the results
214:28 - items and basically that is going to be
214:30 - an array as you can see over here but
214:32 - basically i just need the best search
214:34 - option so i'm just going to access the
214:37 - first element over here and if it's all
214:39 - went wrong so let me just go and pass
214:42 - the
214:43 - failure over here so
214:45 - i can pass the error
214:48 - and that's it for the get movie function
214:50 - alright so let me just go back to my
214:52 - home view controller right now and
214:54 - basically i want to delete this
214:55 - basically i don't want the app to search
214:58 - for harry potter each time i open the
215:00 - app all right so let me just scroll down
215:02 - over here
215:03 - and as you can see here basically we are
215:05 - rendering each section which its own
215:07 - titles so basically we can just go back
215:10 - in here title table view controller and
215:13 - um i believe that's the one
215:16 - um
215:17 - okay
215:19 - so yeah basically that's it that's the
215:21 - one that we're looking for basically as
215:22 - you can see here we are
215:24 - rendering each cell which with the model
215:28 - so basically we can just implement that
215:30 - one more for over here so basically this
215:32 - select
215:34 - and make sure that you're in the
215:35 - collection table view cell and i'm just
215:38 - going to implement that function over
215:39 - here so basically whenever i tap on any
215:42 - title
215:43 - first of all i just need first
215:46 - to have a collection
215:49 - view
215:50 - dot deselect item and i'm just going to
215:54 - deselect that one in the index path and
215:56 - i'm just going to set the animated to
215:58 - true
215:59 - i'm just going to grab the title name so
216:01 - let me just guard let title
216:04 - name and that is going to be
216:09 - all right so let me just grab the title
216:11 - first so let title that is going to be
216:14 - titles
216:16 - all right
216:19 - index bath dot row
216:21 - and basically we have the title over
216:23 - here so guard that title name that is
216:26 - going to be title dot original title
216:28 - name or
216:30 - the title dot original
216:33 - title
216:34 - right and i can just
216:37 - return if it's not going if it's empty
216:40 - or basically if it's not
216:43 - so basic i have the title name and over
216:45 - here i can just say api
216:47 - caller.shared.getmovie
216:50 - and over here i can just pass in the
216:52 - title name and as a little hack i can
216:54 - just append the word trailer into it so
216:57 - basically i can search youtube with that
217:00 - exact same name plus adding the trailer
217:04 - word next to it
217:06 - and i can just get the result over here
217:10 - all right so i'm just going to switch on
217:11 - the result and in case of success let me
217:15 - get that video element
217:18 - all right and over here i can just print
217:21 - the video element dot id
217:24 - and if it all goes wrong maybe we can
217:28 - just have another
217:29 - um
217:30 - case for the error or basically it's not
217:33 - optional to be exact it's mandatory to
217:35 - do so for example let me just print the
217:39 - error over here and for now let me just
217:41 - test that
217:43 - so let me hit build and run
217:45 - and over here maybe i can
217:48 - have something like maybe
217:51 - we can choose something like um
217:55 - no time to die or do i'm just going to
217:58 - choose that
217:59 - and over here you can see that we have
218:02 - made the request for the youtube server
218:05 - and we have basically a returned object
218:08 - which we can actually copy that
218:10 - video id
218:12 - and over here let me just open youtube
218:15 - let me just open a new um
218:18 - video for example let me just open that
218:20 - one over here and as you can see here we
218:23 - can
218:24 - add this video id over there so let me
218:27 - just paste that over here and let me hit
218:29 - build and run and as you can see
218:31 - basically we have the official main
218:34 - trailer of the movie that we have
218:35 - clicked on
218:36 - and basically i'm just going to create a
218:38 - new file and that is going to be a new
218:40 - controller
218:41 - so let me just make sure that i'm
218:43 - choosing swift and for the name i'm just
218:45 - going to say like something like title
218:50 - preview
218:52 - view controller and let me just hit next
218:56 - all right so basically this is going to
218:58 - be the controller in which we are going
219:00 - to pass in the video and be able to view
219:02 - the video actually so basically i'm just
219:04 - going to import something over here so
219:06 - let me just type import
219:10 - webkit
219:11 - and over here i'm just going to
219:12 - initialize one more view so basically
219:16 - private let web view and that is going
219:19 - to be wk
219:21 - webview
219:23 - all right
219:24 - and
219:25 - let me just initialize that
219:28 - all right so basically this is going to
219:30 - be the view in which we are going to
219:32 - view the video for the trailer and right
219:34 - here let me just define a new label
219:36 - title so private
219:38 - let
219:39 - title label
219:43 - and that is going to be ui label
219:46 - let me initialize that with the
219:47 - anonymous closure pattern
219:49 - so let label that is going to be ui
219:52 - label
219:53 - i'm just going to return the label over
219:55 - here
219:56 - and i just need to
219:59 - enable the auto layout so basically
220:02 - translate autoresizing mask into
220:04 - constraints that is going to be equals
220:06 - to false
220:08 - all right and for the font i'm just
220:10 - going to say let label dot
220:14 - font and that it's going to be system
220:18 - font
220:18 - of size maybe 22
220:21 - and for the weight i'm just going to
220:23 - choose bold
220:25 - all right
220:26 - let me just initialize one more view
220:28 - okay so private let
220:31 - overview label and that is going to be
220:34 - labeled as well
220:37 - same pattern over here
220:39 - so let label that is going to be ui
220:41 - label
220:42 - and i'm just going to return the label
220:44 - one more time basically we're just doing
220:46 - the same stuff over here so let label
220:49 - font and that is going to be
220:51 - um maybe something like 18
220:55 - so system
220:57 - wait
220:58 - wait just a second so system
221:01 - font that is going to be 18
221:04 - and
221:04 - for the overview i'm just going to say
221:07 - regular
221:09 - and i'm going to enable the auto layout
221:12 - as well
221:13 - just a second over here and maybe
221:16 - since the label could take
221:18 - multiple lines i'm just going to say let
221:21 - label dot number of lines that is going
221:23 - to be equal to zero and basically when
221:25 - you set the number of lines in swift um
221:28 - to zero that means that it can actually
221:31 - take multiple lines that's not going to
221:33 - be constrained for just one or two lines
221:37 - all right
221:38 - so um maybe i can have like something
221:41 - like um a download button so
221:44 - private let download button and that is
221:48 - going to be ui button
221:49 - let me initialize that so that button
221:52 - that is going to be ui button
221:55 - button dot translate auto resizing
221:58 - constraints
221:59 - false let me just return that button
222:03 - and over here i can set the background
222:06 - for the um 3d button maybe for something
222:10 - like a red color
222:13 - all right
222:15 - and um
222:16 - button not set title
222:19 - that's going to say download
222:22 - for normal
222:24 - all right in
222:26 - button.title
222:28 - color
222:29 - and that is going to be white also for
222:32 - normal
222:33 - all right so basically we just need to
222:35 - add those views into our
222:37 - so you don't add some view i just need
222:41 - to add the web view
222:44 - view dot add some view
222:46 - maybe the title
222:49 - you don't add some view
222:51 - overview label
222:53 - and you'd add some view that is going to
222:55 - be the download button
222:57 - and over here i just need to um
222:59 - configure constraints
223:03 - all right and let me create that
223:04 - function down here
223:08 - and this is going to be a function
223:11 - all right so first of all i just need to
223:14 - set
223:15 - the um the web view
223:17 - so
223:18 - let me say something like um
223:20 - let
223:21 - web
223:22 - view constraints
223:25 - and that is going to be an array
223:27 - and that array is going to take um some
223:30 - constraints actually so webview
223:34 - dot
223:35 - top anchor and that is going to be
223:37 - constrained with the view
223:39 - top anchor
223:41 - all right so um
223:43 - webview
223:44 - dot
223:46 - leading anchor the constraints
223:49 - to the view not leading anchor as well
223:52 - web view
223:54 - right
223:57 - dot trailing anchor that is going to be
224:00 - also constrained with the view
224:02 - training anchor
224:05 - and for the height
224:08 - all right so high anchor that is going
224:11 - to be somewhere around
224:12 - [Music]
224:14 - maybe 250
224:17 - or
224:18 - maybe we can just set assume that the
224:21 - whip kit is just going to
224:23 - um
224:24 - calculate its height for now
224:27 - all right so let me just type ns layout
224:30 - constraints to activate and let me pass
224:33 - the webview constraint all right so over
224:36 - here let me just constrain the title as
224:38 - well so let
224:40 - title constraints or title label
224:43 - constraints
224:44 - and that is going to be an array as well
224:46 - so
224:47 - title label dot
224:50 - top anchor
224:52 - i'm just going to
224:53 - constrain that maybe to the web
224:57 - view the bottom anchor and that is going
225:00 - to be spaced by maybe 20 points
225:04 - all right
225:05 - so
225:06 - title label dot leading anchor
225:10 - constrains and that is going to be
225:12 - constrained with the view leading anchor
225:15 - and maybe 20 points from the left as
225:17 - well
225:18 - so uh i believe that is enough for
225:21 - displaying the title label so in this
225:24 - layout constraints
225:26 - activate title label constraints
225:31 - all right
225:32 - and also we need some title or subtitle
225:35 - constraints for the overview as well so
225:37 - um
225:38 - let over
225:41 - view
225:43 - label
225:45 - constraints and that's going to be an
225:47 - array
225:48 - so overview
225:50 - label dot top anchor and that is going
225:53 - to be constrained
225:55 - with the title label
225:57 - in the bottom anchor
225:59 - 20 points or maybe 15
226:02 - overview label dot leading anchor
226:05 - constraints and that is going to be
226:07 - equals to the view
226:09 - dot leading anchor and maybe add some
226:12 - margin on the left so constant that is
226:15 - going to be 20 as well so that we have
226:17 - them aligned
226:19 - and i believe that's it for the overview
226:22 - so same stuff over here same stuff over
226:25 - and over
226:27 - and i believe that's it
226:29 - so um let me just go and add some dummy
226:33 - text over here so for the label i'm just
226:37 - going to give that a text maybe
226:40 - harry potter
226:42 - and now so for the overview label
226:46 - maybe uh something like um label text
226:51 - and this is the best movie
226:54 - ever to watch as a kid
226:58 - and trust me that is true
227:01 - all right so basically we have a webview
227:03 - constraints we have title label we have
227:06 - overview and you can just play around
227:09 - with this maybe you can add the rating
227:12 - or the votes number of votes
227:15 - basically you can just utilize the
227:17 - information that we got earlier from the
227:19 - movie database over here but for the
227:21 - sake of simplicity i'm just going to
227:23 - create
227:25 - a new view model over here
227:28 - all right so let me just create a new
227:30 - swift file
227:33 - all right let me call that um title
227:36 - preview
227:38 - view model
227:39 - and inside that i'm just going to create
227:41 - a new construct let me just call that
227:44 - title
227:47 - right so title
227:48 - preview
227:50 - view model
227:52 - and inside of here i just need the title
227:55 - and that is going to be a string
227:58 - i need the youtube video
228:00 - so let
228:03 - youtube video and that is going to be
228:06 - maybe
228:08 - video element
228:11 - all right
228:12 - and
228:13 - for the title overview
228:17 - all right so
228:19 - that is going to be a string so
228:22 - what do i need to do right now so um let
228:25 - me just let me just see if everything is
228:27 - working for the title preview controller
228:31 - so over here inside the home view
228:33 - controller i can just
228:36 - navigate to this controller so um
228:39 - navigation controller the
228:42 - and inside that i'm just going to pass
228:45 - in the title preview controller
228:48 - and for the animation i'm just going to
228:50 - say true and let me build and run this
228:53 - and let me see what do i get so far
228:57 - all right and as you can see here harry
229:00 - potter is at the top
229:02 - maybe we forgot to add some constraints
229:05 - over here so let me just go back to the
229:08 - title preview controller and
229:10 - believe
229:11 - something is wrong over here which is
229:14 - basically
229:15 - the web view the web view doesn't have
229:18 - actually
229:19 - the auto layout enabled so um i believe
229:23 - i can do something about that so let me
229:25 - just
229:27 - define that with the enormous closure
229:29 - pattern over here
229:32 - and over here i'm just going to say let
229:35 - web view
229:36 - and that is going to be wk webview and
229:40 - inside of here i can just say
229:43 - webview.translate
229:44 - all the resizing masks and that is going
229:46 - to be equals to false and let me just
229:48 - return the webview over here one more
229:51 - time let me build and run and let me see
229:53 - if that is working
229:55 - and
229:56 - it's not working yet so i believe we
229:59 - have to add some sort of height
230:02 - so um let me just say webview.com
230:06 - anchor and that is going to be equals to
230:08 - maybe somewhere like 250.
230:12 - let me build on one
230:13 - as you can see here we have the um the
230:16 - webview
230:18 - and
230:18 - the title the um
230:21 - and everything is working over here
230:24 - maybe we can just add
230:26 - an um
230:28 - a constant over here for the top margin
230:30 - i can set that maybe somewhere around
230:33 - 50.
230:35 - let me build and run one more time
230:37 - and over here this is going to be
230:40 - the um
230:41 - the web view that we're going to pass in
230:44 - the video
230:45 - url we just need to set the download
230:48 - button we forgot that as well
230:51 - so let
230:53 - download button constraints
230:56 - and there's going to be an array over
230:58 - here so
230:59 - download button and that is going to be
231:01 - at the center of the controller
231:04 - so um
231:05 - center x
231:07 - and that is going to constrain with the
231:10 - view
231:11 - dot center x
231:13 - and for
231:14 - that i'm just going to
231:16 - add
231:17 - maybe a top
231:18 - margin between the button and the
231:21 - overview maybe around 15 points so
231:25 - let's just top anchor constraints and
231:27 - that is going to be constrained with the
231:29 - um overview label the bottom anchor and
231:33 - let me just add maybe somewhere like 20
231:35 - points
231:37 - let me see if that is working correctly
231:40 - um yeah we forgot to activate the
231:42 - constraints as well so any layout or
231:44 - constraints
231:46 - um
231:47 - all right so activate
231:49 - download button constraints and let me
231:51 - hit build and run and let me see what do
231:53 - i get
231:55 - and as you can see here basically the
231:57 - download button it's over here it's
231:59 - working fine
232:01 - all right so um what do we need to do
232:03 - right now basically i just need to set
232:05 - the background color of the view so
232:08 - background color and that is going to be
232:10 - system background
232:13 - let me hit build and run
232:15 - all right so we have everything is
232:17 - working over here i can just modify the
232:19 - download button to look at it a little
232:21 - bit nicer
232:22 - so um
232:23 - button
232:26 - right so i can do that over here
232:28 - basically so
232:29 - download button
232:30 - with an anchor and that is going to be
232:33 - equal somewhere
232:35 - around
232:36 - 120
232:38 - all right so um yeah basically we just
232:41 - need a separator over here so um yeah
232:44 - that is that looks so much better
232:47 - maybe um 140 that will look much nicer
232:50 - and for the height as well we can just
232:52 - send that
232:54 - all right so
232:57 - height anchor that is going to be
232:59 - somewhere around
233:01 - um
233:02 - 80
233:03 - all right let me see if that is looking
233:06 - good
233:07 - so too much we can just play around with
233:10 - the
233:10 - um with the values of the height over
233:13 - here until
233:14 - you're satisfied with some something
233:17 - okay um
233:19 - i actually realized something maybe the
233:21 - um the overview is just going to take
233:24 - multiple lines so that doesn't have to
233:26 - be
233:27 - um yeah that's working fine okay
233:30 - basically because we are just
233:31 - constraining the top anchor of the
233:33 - bottom to be below the overview level
233:35 - with 25 whatsoever
233:38 - and that is going to be only um
233:42 - centered
233:43 - horizontally
233:44 - so um over here maybe we can add some
233:48 - something to the download button so
233:50 - button
233:51 - dot layer dot um corner radius
233:55 - and that is going to be equal to 15
233:58 - one dot layer dot clips to bounce
234:03 - or mask to bounce yeah that is going to
234:05 - be true as well so let me just hit build
234:07 - in one
234:10 - right
234:11 - maybe we can change that to eight but
234:13 - you get the idea
234:15 - um we're gonna move into something else
234:18 - right now
234:19 - um basically uh i just need to
234:22 - [Music]
234:24 - pass in the information over here but
234:27 - basically we just need to configure the
234:29 - controller before we initialized it so
234:32 - let me just go back down in here
234:35 - and i can create a new function
234:38 - that is going to be
234:40 - called configure
234:42 - with
234:44 - model
234:45 - and that is going to take a title
234:48 - preview view model
234:51 - and over here i'm just going to set the
234:53 - title label
234:55 - dot text and that is going to be model
234:59 - title
235:01 - all right so the overview label dot text
235:04 - is going to be model dot
235:07 - title overview
235:09 - and over here i'm just going to create a
235:11 - new
235:13 - url so guard
235:15 - let
235:16 - url
235:17 - is going to be url
235:19 - with string
235:21 - and inside of here let me just type
235:23 - https
235:25 - colon forward slash
235:28 - www.youtube.com
235:33 - slash
235:34 - embed
235:36 - right
235:37 - and over here i'm just going to pass in
235:40 - um the url that we get
235:43 - so model
235:44 - dot
235:46 - youtube video
235:49 - all right so id
235:53 - dot video id
235:57 - and then else
235:59 - i'm just going to return
236:02 - so right now i have the url so i'm just
236:04 - going to use that to load
236:06 - inside the web view so webview.low
236:11 - and that is going to take a url request
236:17 - with the url that we have over here
236:20 - all right so basically that's it so
236:23 - let's just go to the collection table
236:25 - view cell
236:26 - and over here i'm just going to create a
236:28 - new protocol so protocol
236:31 - is going to name that
236:33 - collection view table view cell
236:35 - delegate
236:36 - that's going to be a type of any object
236:40 - inside that i'm just going to create a
236:42 - new function
236:43 - and basically that function is going to
236:45 - be called collection view table view
236:48 - cell
236:50 - did tab
236:52 - cell
236:54 - all right and that is going to take an
236:57 - um an object type
237:00 - basically of um
237:03 - all right so
237:04 - cell and that is going to be over time
237:07 - this
237:08 - and also a model or view model to be
237:12 - exact
237:13 - and that is going to be the title
237:15 - preview view model
237:18 - all right and over here i'm just going
237:20 - to create a private
237:22 - or sorry that is going to be a weak
237:25 - var
237:26 - of delegate
237:29 - and that is going to be of this type
237:32 - and also it's going to be optional
237:35 - all right so over here i'm just going to
237:38 - get down to this
237:40 - function over here did select item
237:44 - and once i have basically the video
237:47 - element over here
237:49 - basically i'm just going to say delegate
237:52 - dot
237:54 - or write self
237:56 - and inside here i'm just going to create
237:58 - that view model
238:00 - all right so let me just copy that over
238:03 - here let me just take that out maybe to
238:05 - be easier to see
238:08 - all right
238:09 - so let me just do that over here so let
238:13 - view model
238:15 - all right so
238:17 - that is going to be of types um here i'm
238:21 - just going to pass in the
238:23 - uh the string for the title
238:25 - so um that is going to be titles
238:30 - all right
238:32 - index path
238:33 - row
238:34 - and over here i'm just going to pass in
238:36 - the original title
238:38 - or
238:39 - basically the original row and for the
238:41 - simplicity i'm just going to get the
238:43 - title over here
238:45 - so
238:45 - titles
238:48 - index.path
238:50 - row
238:51 - and over here i'm just going to
238:55 - change that basically to title
238:58 - so title.original title or
239:00 - the title
239:02 - oh basically i have the title name
239:04 - actually so that is gonna be much easier
239:08 - all right
239:09 - and also over here i have i have to
239:12 - provide the video element
239:15 - all right so um
239:17 - let me just pass in the video element
239:18 - over here
239:20 - and also here i'm just going to get the
239:23 - title
239:24 - all right so title dot
239:27 - overview
239:29 - and i believe that is okay and just we
239:33 - need to reference that using self and
239:35 - since we're just going to use that
239:37 - inside and uh or basically a synchronous
239:40 - function i'm just going to say weak self
239:45 - and over here let me say self
239:48 - dot and don't forget the question mark
239:50 - over here
239:51 - so
239:52 - um let me just maybe
239:56 - guard that or force wrap that all right
239:59 - over here let me just pass in the
240:00 - overview but that needs to be unwrapped
240:03 - first
240:04 - so
240:05 - let's
240:08 - over
240:09 - view
240:10 - and that is going to be title
240:14 - all right so let me just guard that out
240:16 - so guard
240:18 - let title overview dot title
240:21 - dot overview
240:23 - else
240:24 - return
240:26 - all right so let me pass the
240:28 - title overview over here
240:33 - all right i believe that is correct so
240:35 - basically yeah that is correct from now
240:38 - and over here i'm just going to pass in
240:40 - the view model
240:42 - that we have created over here and here
240:45 - i'm just going to pass in self
240:48 - but i need to guard that first out so
240:50 - guard let
240:52 - strong self that is going to be equals
240:54 - to self
240:56 - else
240:57 - return
240:58 - and basically self is over here as an
241:01 - optional
241:02 - so let me just pass in the strong self
241:04 - over here
241:05 - and let me build and run and let me see
241:07 - what do i get so um
241:11 - all right so basically we just need to
241:13 - add
241:14 - an optional self over here and let me
241:16 - build and run this and let me see yeah
241:18 - basically we don't have any errors right
241:20 - now
241:20 - so let me just go to the home view
241:22 - controller i'm just going to create a
241:24 - new extension for that controller
241:27 - and that is going to confirm to our
241:29 - protocol that we've just created earlier
241:31 - which is collection view table view cell
241:33 - delegate
241:34 - and over here
241:36 - i'm just going to implement that
241:37 - function
241:39 - so uh basically we're going to have the
241:41 - title preview
241:42 - view model over here so let me just say
241:46 - let vc that is going to be a title
241:48 - preview view controller
241:51 - and over here i'm just going to
241:52 - configure
241:54 - that with the view model that we have
241:55 - from here
241:57 - so view model and now i'm just gonna
242:01 - say navigationcontroller.push
242:04 - and that is going to be equals to vc and
242:08 - i'm just going to set the animation for
242:10 - true let me just go up in here and let
242:14 - me just take that out which is basically
242:17 - um
242:18 - this line over here we don't need this
242:20 - anymore we have everything set up over
242:23 - it now so let me just build and run this
242:25 - and let me see what do i get so far
242:28 - so um i'm pretty sure that is going to
242:31 - work i'm i doubt it but let's just try
242:35 - so let's just click on the ghostbuster
242:37 - over here and let me see what do i get
242:40 - basically nothing and that is because we
242:42 - forgot to set our delegate
242:45 - to the be
242:46 - this
242:47 - controller so um
242:50 - basically i'm just going to get
242:52 - um down over here and before i
242:57 - do this so let me just say vc.delegate
243:03 - and that is going to be self
243:06 - and over here let me just go
243:08 - and make the um
243:10 - [Music]
243:11 - all right so the delegate is going to be
243:13 - in the collection view cell over here
243:16 - so i'm just going to need to access this
243:20 - all right so um let me just go to um
243:25 - yeah let's just go to the uh do the
243:27 - table view cell i believe
243:30 - so
243:31 - home view controller
243:33 - and let me just scroll up button here
243:36 - all right so table view cell all right
243:39 - so let me have this so sell for row okay
243:43 - so let me just sell
243:45 - delegate and that is going to be equals
243:47 - to self
243:49 - alright so let me just hit build and run
243:51 - one more time
243:53 - and i hope that is going to be working
243:56 - so uh yeah basically just delete this
243:58 - that doesn't make any sense
244:01 - so let me build a run
244:03 - and i believe that is going to work so
244:05 - ghostbusters
244:07 - and we have an error over here
244:11 - all right so basically this is the error
244:13 - that we have over here and it we can fix
244:16 - that really quick so let me just say
244:19 - um this patch
244:21 - q
244:21 - main dot async and over here i'm just
244:24 - going to
244:25 - have those lines cut and paste it over
244:29 - here i believe that's it and that is
244:31 - going to work
244:32 - so let's just cross our fingers
244:35 - and basically i just need to have um
244:38 - reference for this week's self
244:41 - and i'm just going to add
244:43 - this over here so self
244:45 - optional
244:46 - and
244:48 - yeah basically i just need to say in
244:52 - all right so let me just build and run
244:54 - let me see if that is working so
244:56 - ghostbusters and you can see here
244:59 - basically the uh the name of the movie
245:02 - uh the overview and we can just type
245:05 - press on that let me just see if that is
245:07 - working and indeed that is actually
245:09 - working so basically we just need to fix
245:12 - the overview title um constraints over
245:16 - here and actually it's pretty easy to
245:17 - fix so we just need to go to the title
245:19 - preview controller over here and
245:21 - basically there is one constraint that
245:23 - we forgot to add which is basically the
245:26 - trailing anchor for the uh overview text
245:29 - so overview
245:30 - label dot trailing anchor and that is
245:33 - going to be constrained with the view
245:35 - dot trailing anchor over here let me
245:38 - just hit build and run one more time and
245:40 - let me see if i have the
245:42 - title overview is constrained in its
245:45 - place so let me just hit ghostbusters
245:47 - and as you can see here basically
245:49 - everything seems to be working fine
245:51 - maybe you can just add
245:52 - a little bit extra height
245:54 - for this i believe it would look so much
245:57 - better so maybe
245:59 - 300 let me hit builder on one more time
246:02 - and let me see what do i get as a final
246:05 - results and yes indeed i am so satisfied
246:09 - with the results for now
246:11 - all right so let me just pump the phone
246:13 - just a little bit so that we can see
246:14 - more clearly and let me just close that
246:18 - and basically before actually starting
246:20 - implementing that event handler or
246:22 - basically tapping handler i just need to
246:24 - change something regarding the how the
246:27 - app works as you can see here basically
246:29 - we don't actually fetch any new movie or
246:32 - any new title and pass that to our
246:34 - header view over here basically we're
246:36 - just viewing the static image that we
246:38 - have passed earlier inside the assets
246:41 - folder so let me change that basically
246:43 - i'm just going to define a new variable
246:46 - here now it's going to a private
246:48 - variable and let me just call that
246:50 - random
246:51 - selected movie or basically a random
246:55 - trending movie and that is going to be
246:58 - type title
247:00 - all right
247:01 - and basically i just need to make that
247:03 - an optional for now so it can actually
247:06 - be nil for now and we're just going to
247:09 - change that later
247:10 - all right and the second thing that we
247:12 - need to do actually uh we're going to
247:14 - change the scope of this header view as
247:16 - you can see here basically it's only
247:18 - visible inside the view that load
247:19 - because it's just local variable so
247:22 - we're gonna make
247:23 - that change so let me just type in here
247:25 - private
247:26 - header
247:28 - view
247:29 - and that is going to be of type hero
247:32 - header view and that is going to be
247:33 - optional as well so it can actually be
247:35 - nil
247:36 - and right now uh i just need to say var
247:39 - yeah i forgot var actually and it's not
247:42 - constant because that is going to change
247:44 - just just over here so let me just
247:47 - delete this and now we have a reference
247:49 - to header view and outside the view load
247:52 - method and now i'm just going to create
247:55 - a new function and that function is
247:57 - going to be called configure hero header
248:00 - view
248:01 - and inside that function i just need to
248:04 - make a new
248:05 - get request from the server so that i
248:07 - can pull some trending movies and assign
248:10 - one randomly to that random trending
248:13 - movie variable
248:15 - so let me just do that so api caller
248:17 - though share don't get trending movies
248:20 - and over here i'm just going to get the
248:21 - result and as usual we're just going to
248:24 - switch on the result and basically we're
248:26 - just going to implement the success case
248:29 - and also the failure case so let me just
248:31 - do that so case success i'm just going
248:33 - to get an array of titles and basically
248:38 - i'm just going to set that to
248:41 - my random
248:43 - right so random trending movie and that
248:45 - is going to be to one of those titles
248:48 - and that is going to be get randomly and
248:51 - over here i just need to have a weak
248:53 - reference of self so that i can do that
248:56 - easily
248:57 - all right so basically let me just
248:58 - implement the failure
249:00 - case as well so let error and basically
249:03 - i'm just going to print the error
249:07 - all right so error the localized
249:10 - description yeah that is a dot not a
249:13 - comma so a localized description so
249:16 - basically i just made my api call for
249:19 - the server and i retrieved back some
249:22 - titles over here and i got one randomly
249:24 - and i set that to my random trending
249:27 - movie title of type title so right now i
249:30 - just need a function so that i can
249:32 - configure the header that is being
249:35 - displayed in the hero view so let me
249:37 - just do that so let me just open the
249:39 - hero header view over here and basically
249:42 - i just need to implement one more
249:44 - function so basically it's going to be
249:46 - public because i'm just going to access
249:48 - that from outside so
249:50 - configure
249:52 - with model
249:53 - and basically that is going to be
249:56 - uh i believe something like um the view
249:59 - model over here so yeah title
250:01 - view model
250:03 - all right and over here i just need to
250:05 - access this hero image view
250:09 - so um let me just copy that again i
250:11 - forgot the word font and let me just
250:13 - copy that from
250:15 - maybe the title um table view cell i'm
250:19 - just going to copy that url because i'm
250:22 - actually going to pass in the poster url
250:24 - as well and that is going to be a
250:26 - constant that's not going to change
250:27 - whatsoever so let me just go back to
250:30 - hero header view again i got my url from
250:33 - the title table view cell so hero header
250:36 - view and just going to you know add this
250:40 - url over here and now i'm just going to
250:43 - access this so hero image view
250:47 - dot
250:48 - sd set image and that is going to be set
250:51 - with a url and for this is that is going
250:55 - to be nil for the completion and
250:57 - basically that's it i believe that is
250:59 - going to work so let me just help
251:01 - billion run and let me see what do i get
251:03 - so far
251:04 - all right and nothing changed over here
251:07 - i guess i forgot actually to call this
251:10 - method
251:11 - so what do i have here so yeah we have
251:15 - just set that to a random um trending
251:18 - movie element and over here i'm just
251:21 - going to say
251:23 - optional self
251:25 - header view
251:27 - dot configure and that is going to be
251:28 - configured with the title view model
251:30 - over here
251:31 - basically we're just going to pass in
251:33 - the same um
251:35 - random element that we have chosen so
251:36 - let me just do that over here so let's
251:39 - select the title
251:41 - and that is going to be titles
251:44 - all right so titles
251:46 - dot random element and basically i'm
251:49 - just going to reuse that over here so i
251:51 - don't generate a new random element
251:54 - all right
251:55 - so basically let me grab this
251:58 - title so basically this selected title
252:00 - i'm just going to pass that in here so
252:03 - select the title
252:04 - dot
252:05 - um original title or just empty string
252:09 - for now
252:10 - and basically i'm just going to do the
252:12 - same here so selected title
252:15 - dot
252:16 - um poster path
252:18 - or an empty string for now so i believe
252:20 - that should be working yes we have no
252:23 - errors and actually i forgot to call
252:26 - this method from here so configure
252:29 - header view or hero header view and let
252:32 - me just tell build and run and let me
252:33 - see what do i get so far
252:35 - all right so basically uh we are now
252:38 - generating random element each time we
252:40 - open the app let me just confirm that
252:42 - let me
252:43 - close the app let me reopen it one more
252:45 - time and basically yes each time we open
252:48 - the app we have new random element
252:50 - generated so right now let's just start
252:52 - working on actually making each title
252:55 - can be tapped anywhere because as you
252:58 - know it's only tapped within the home
253:00 - view controller over here
253:03 - so now let's just get this thing to work
253:05 - so let me just go to the upcoming view
253:07 - controller and let me implement a new
253:08 - function over here so basically i'm just
253:10 - going to implement table deselect row at
253:13 - and basically i'm just going to
253:15 - reference that table one more time over
253:17 - here and say deselect row and index path
253:20 - and set the animation to true for now it
253:23 - doesn't really matter but basically i
253:24 - just need to have a reference to the
253:26 - title that i have just pressed on so
253:28 - titled that is going to be titles
253:32 - index path dot row and now i have the
253:35 - title already so let me just say
253:38 - guard
253:39 - let title name and that is going to be
253:42 - title dot original title or the title
253:47 - dot original name
253:49 - else
253:51 - i'm just going to return so basically i
253:53 - have the title name that i have just
253:55 - pressed on so what do i need to do right
253:57 - now basically i'm just going to say api
254:00 - color dot shared dot get movie and i'm
254:04 - just going to pass in the title name
254:06 - over here and for the result i'm just
254:09 - going to switch on the result as well so
254:13 - case success basically i have a video
254:16 - element so let's video element
254:20 - and the other one is going to be case
254:23 - failure and i'm just going to get an
254:25 - error which i'm going to be printing
254:28 - just normal
254:29 - so error dot localize description and
254:32 - over here i just need to
254:34 - make a new um
254:37 - a new instance basically for the preview
254:40 - controller which i'm going to actually
254:42 - be pushing um inside the navigation
254:46 - controller so i'm just going to say let
254:50 - vc and that is going to be
254:53 - um title preview view controller and
254:57 - over here i'm just going to configure
254:59 - that with the title view model that i
255:01 - have over here so basically for the
255:03 - title i can just pass in the title name
255:07 - and for the youtube video i'm just going
255:09 - to get the video element and for the
255:12 - title overview i have the title over
255:14 - here and i can say just here
255:17 - um overview and i believe that's it
255:21 - all right so basically i just need to
255:23 - push the view controller over here uh
255:26 - basically that is that needs to be
255:28 - unwrapped or you know i can just add
255:31 - like an empty string over here and that
255:33 - should take the error away all right so
255:36 - um let me just say here
255:38 - weak self
255:41 - all right and over here i'm just going
255:44 - to say self which is going to be an
255:46 - optional so i'm going to say navigation
255:49 - controller the push view controller and
255:52 - that is going to be my vc over here and
255:54 - i'm going to say true let me just hit
255:56 - build and run and let me see and just
255:59 - need to go to the coming soon
256:02 - and press on any
256:04 - movie over here let's just say sun
256:07 - and that is going to take me directly to
256:10 - one of those but i have an error over
256:13 - here which is basically yeah i know how
256:15 - to fix that so let me just go
256:17 - really quick over here and basically we
256:20 - just need to add that to a dispatchq dot
256:24 - main dot async i always forget that so
256:27 - basically let me just
256:29 - take that cut and paste that over here
256:32 - build and run one more time and i
256:35 - believe that is going to work definitely
256:38 - is going to work and
256:40 - yeah basically that is working fine so
256:43 - the upcoming is already done so let's
256:46 - just go to the top search really quick
256:48 - and i believe it's going to be really
256:50 - the same so i can actually copy that
256:54 - function over here so table view cell i
256:57 - believe that is going to be exactly the
256:58 - same so let me just go down in here and
257:03 - inside the delegate methods of the table
257:06 - let me just paste that one more time
257:08 - and i believe that is going to work yeah
257:11 - there's no error whatsoever so let me
257:13 - just hit build and run one more time
257:15 - and go to top search spider-man and yeah
257:19 - that is basically working
257:21 - fine
257:23 - all right so now we have the search
257:24 - results view controller remaining and
257:27 - that is going to be just a little bit
257:28 - tricky because we're not just accessing
257:31 - the title within the navigation
257:33 - controller tabs over here we're just
257:36 - navigating
257:37 - we're just accessing the title from
257:39 - another um place so we're just going to
257:42 - use protocols and delegates so let me
257:44 - just go to the search results view
257:46 - controller over here and over here i'm
257:48 - just going to create a new protocol so
257:50 - protocol and let me just call that uh
257:53 - maybe search
257:56 - results view controller delegate
257:58 - and that is going to be of type any
258:00 - object and inside of here i'm just going
258:03 - to create a new function
258:05 - so funk
258:06 - and that is going to be called search
258:08 - results view controller
258:10 - all right so let me just
258:13 - do this so
258:14 - search results view controller did tab
258:17 - item and that is going to take
258:20 - basically the view model
258:23 - all right so and that is going to be
258:24 - titled preview view model all right so
258:27 - basically over here i just need to
258:28 - create the public weak
258:31 - var and that is going to be delegate and
258:34 - that is going to be of the same type of
258:36 - the protocol over here and that's going
258:37 - to be optional because i will not be
258:39 - initializing that right away
258:42 - and basically i just need to go down
258:44 - here inside my collection view
258:46 - and i'm just going to say collection
258:48 - view that select item i just need to
258:50 - have the collection view instance over
258:52 - here and i'm going to say deselect item
258:55 - at index path and that is going to be
258:57 - true and inside of that i'm just going
259:00 - to reference my delegate and i'm going
259:01 - to say search results did tab item and
259:05 - basically i'm just going to pass in this
259:06 - item
259:08 - so basically i just need to have the
259:09 - title over here so um let title
259:13 - and that is going to be titles
259:15 - or write
259:16 - index path
259:18 - row basically i have my title over here
259:21 - um i can pass in the name as well so um
259:24 - alright or you know you can just say
259:26 - title dot original title and i can
259:30 - pretty much say that is going to be
259:31 - working without actually the need of um
259:34 - accessing the original name as well and
259:37 - for the youtube video i just need to
259:40 - have this video element so basically
259:42 - before actually saying the delegate
259:45 - search result tab item i just need to
259:48 - grab the video element first and
259:51 - basically i can just go to the upcoming
259:54 - and basically i can just copy this
259:58 - from here i believe
260:00 - yeah basically it's going to be the api
260:02 - color function so let me just grab that
260:05 - function over here because basically
260:07 - we're just going to be doing the same
260:08 - thing
260:09 - so
260:10 - um
260:11 - all right so api callershare.getmovie
260:14 - and basically i'm just going to get the
260:16 - name and that name is going to be from
260:19 - the title all right so
260:22 - original title or empty string for now
260:24 - and i'm pretty sure that is going to be
260:26 - working
260:27 - all right so let's see over here um
260:30 - dispatch q
260:31 - vc from the title preview view
260:33 - controller basically i just need to have
260:36 - the same thing over and over here so
260:38 - let's just
260:39 - say let title name and that is going to
260:42 - be equals to this
260:45 - all right
260:47 - and instead that you can just pass in
260:48 - the title name over here title name that
260:51 - is going to be working
260:53 - um i believe yeah same thing over and
260:55 - over
260:56 - and i can say well i can just copy this
260:59 - function over here
261:02 - all right so what do i have um
261:05 - basically in case of the success
261:08 - i have the video elements so basically i
261:10 - can just remove the dispatch queue over
261:13 - here because that is going to be done
261:15 - from the search view controller so
261:18 - instead i'm just going to say delegate
261:21 - all right so i just need the weak self
261:24 - as well so self
261:26 - all right so basically self dot delegate
261:29 - search results view controller that is
261:31 - going to say did tab item and i'm going
261:35 - to say the item that was just tapped is
261:37 - just going to be the title with that
261:39 - name and the video element i just got
261:41 - that video element over here and for the
261:44 - title overview same thing over and over
261:47 - so basically title dot overview and i
261:49 - can just pass an empty string from there
261:52 - basically
261:54 - this is completely done from the search
261:57 - results view controller now we just need
262:00 - to go to the search view controller over
262:02 - here and just swipe up until we see this
262:06 - um initialization for the search results
262:09 - view controller basically we're not
262:11 - making a global variable so that we can
262:13 - access that search results view
262:15 - controller anywhere else but there's
262:17 - another cool way that we can actually do
262:19 - this which is basically
262:22 - the search controller over here
262:24 - basically we have the results controller
262:26 - which is basically the same thing
262:29 - so
262:29 - um basically i just need to say results
262:33 - controller.delegate and that is going to
262:35 - be self and once i'm done with that i
262:39 - can actually um say that i'm going to
262:42 - conform to the search results
262:46 - view controller delegate over here and
262:50 - down in there i can just say
262:52 - search results did tab item and
262:56 - basically i have my view model over here
262:58 - so the thing i'm just going to be
263:01 - need to do is actually say
263:03 - navigationcontroller.push
263:06 - and i'm just going to access this which
263:08 - is going to be from here so let vc and
263:11 - that is going to be title preview view
263:14 - controller i'm just going to configure
263:16 - that with the view model that i have and
263:19 - then i'm just going to pass in the view
263:21 - controller and say true for the
263:24 - animation let me just hit build and run
263:27 - and let me confirm that this is working
263:30 - so let me just hit spiderman and i have
263:33 - spiderman over here let me say that it's
263:36 - going to be working yeah basically we
263:38 - just fell with the same error over and
263:40 - over again
263:42 - so let me just say dispatch q dot main
263:46 - dot async and inside of here i'm just
263:48 - going to add that
263:50 - right in here i believe that is going to
263:53 - be working so yeah we just need to
263:56 - mention that is going to be self so
263:59 - weak
264:01 - self
264:02 - in and inside of here i'm just going to
264:04 - say self optional dot build and run and
264:07 - pretty much that is going to be working
264:10 - i promise you so spider-man and
264:13 - yes that is working as well so as you
264:16 - can see here i'm in my home view
264:17 - controller and let me just build and run
264:19 - this project one more time so let me
264:21 - demonstrate something basically we can
264:24 - click on any title over here and it will
264:26 - take us directly to the detail preview
264:29 - controller where we can view some
264:32 - information about the title like the
264:34 - overview the title itself and we can
264:36 - also watch the trailer but actually we
264:38 - don't have any way of downloading the
264:41 - title so that it can get into this tab
264:44 - so basically this is what we're going to
264:45 - be doing so let me just go to the
264:48 - collection view table view cell and
264:50 - scroll down at the bottom over here so
264:52 - basically i'm just going to implement
264:54 - one more function and basically this
264:57 - function is going to be called
264:58 - collection
265:00 - view context menu configuration for item
265:03 - at yeah this is a very long name for a
265:06 - function but this is basically what
265:07 - we're going to be using for downloading
265:10 - the
265:10 - title so let me start by defining this
265:13 - so let
265:15 - config and that is going to be ui
265:18 - context menu configuration and we're
265:20 - going to be using the default
265:21 - constructor over here so let me just
265:23 - have those
265:25 - um parameters on just one line so that
265:27 - it can be easier to read so for the
265:30 - identifier i'm going to be passing nil
265:32 - for the preview provider might be
265:34 - passing nail as well and i'm gonna hit
265:36 - return or enter on this
265:39 - so basically let me just pass nothing in
265:41 - this function and over here i'm just
265:43 - going to
265:44 - um initialize my actions so basically
265:47 - let me have a download action
265:51 - and that is going to be ui
265:54 - action and that is going to be defined
265:56 - with this so basically for the title i'm
265:59 - just going to be passing download
266:03 - all right so for the subtitle now
266:06 - image nil
266:08 - identifier nil
266:10 - discover ability title and that also
266:13 - gonna be nil and here's the best part
266:15 - about it so the attributes we can just
266:17 - delete it we can just forget about it we
266:19 - don't need that
266:20 - and for the state i'm going to say off
266:23 - and for the handler let me just pass in
266:26 - here for now so basically
266:29 - download
266:30 - tapped
266:31 - all right so basically we just need to
266:33 - exit about this so let me just return a
266:36 - ui menu
266:38 - and i'm just going to
266:40 - be passing this so um
266:43 - for the title i'm going to be passing an
266:45 - empty string for the image nil
266:48 - identifier nil and for the options that
266:51 - is going to be a display in line and for
266:54 - the children i'm going to have an array
266:56 - in which we are going to be passing the
266:58 - download actions or basically if we have
267:00 - more than actions over here
267:03 - all right so let me just before i exit
267:06 - this um method i just need to return the
267:10 - configuration i believe uh
267:13 - i messed up in here so return
267:16 - config
267:17 - and basically that's it so let me just
267:19 - hit build and run i believe i don't have
267:21 - any errors yeah that is correct and now
267:24 - let me just try that so let me just long
267:27 - tap on spiderman over here and as you
267:29 - can see here this cool animation uh
267:31 - which blurs the background behind the
267:33 - title and if i clicked on or tapped
267:36 - actually on download you can see here
267:38 - it's on the console download tapped so
267:42 - basically right now we have a way so
267:44 - that we can actually tell the app that
267:47 - we want to download something
267:49 - all right so now let's just dive in
267:51 - inside um the basics of core data um
267:55 - before i do so actually i just need to
267:57 - um
267:58 - make this like a little bit better to
268:01 - read and
268:03 - okay so let me just follow me over here
268:05 - so basically i'm going to be defining a
268:06 - new function so basically that is going
268:08 - to be private func
268:10 - and i'm going to call that function down
268:13 - load title
268:17 - at
268:18 - and i'm going to say here index
268:21 - path and that is going to be of type
268:22 - index path
268:24 - all right and basically over here i'm
268:27 - just going to call that function from
268:29 - down there so let me just type in here
268:32 - um basically
268:34 - uh weak self so weak self
268:38 - and here i'm just gonna be typing self
268:40 - optional
268:41 - download title ad i'm gonna be passing
268:44 - the index path path over here
268:47 - so um right here i can just go to the
268:50 - download title at and i can say print
268:54 - downloading
268:56 - and i'm gonna be uh accessing the titles
268:58 - over here with the index path dot row
269:03 - and over here i can just say like the
269:06 - original title let me just hit build and
269:08 - run one more time so that i can make
269:10 - sure that everything seems to be working
269:12 - fine
269:13 - uh right so long press on the spider-man
269:17 - download and i can as you can see here
269:18 - downloading uh that is gonna be an
269:21 - optional string which is basically
269:22 - spider-man so basically we have now a
269:24 - clean way for downloading things so now
269:26 - let me just talk about a lot more about
269:30 - core data
269:31 - so
269:32 - um let me just hit uh file new
269:36 - um
269:36 - project and
269:38 - yeah don't worry about it we're not
269:40 - gonna be creating a whole new project
269:41 - from the start so let me just choose
269:44 - that swift as you can see here basically
269:46 - we have an option which is basically use
269:48 - core data some of you all might be
269:51 - thinking well when we started this
269:53 - project we haven't actually uh checked
269:55 - this uh use core data so basically we
269:58 - need this inside our project so how do
270:00 - we add core data to an existing project
270:03 - that was initialized without core data
270:05 - basically uh we're going to be making
270:07 - this as a test project
270:10 - all right and we're going to be
270:12 - clicking on that we're not going to be
270:13 - talking a bit uh in this video about
270:16 - cloud kit um maybe in the future
270:18 - tutorials but let's for now check use
270:21 - core data
270:22 - and i'm going to be tossing this project
270:24 - maybe on the desktop for now
270:27 - all right so yeah replace that because i
270:30 - already had one with the same name and
270:32 - as you can see here basically we have
270:34 - test project file which is basically a
270:36 - model for our database and also if you
270:40 - looked inside the app delegates
270:42 - basically you're going to see here code
270:43 - data is imported and if you scroll down
270:46 - basically you're going to be seeing two
270:48 - variables or two functions over here
270:50 - basically the persistent container and
270:54 - also the save context i'm going to be
270:56 - talk a little bit more about this but
270:59 - for now let me just copy the entire
271:01 - thing from here for so basically from
271:03 - the mark that says core data stack i'm
271:06 - going to be copying everything down to
271:08 - the bottom i'm going to be closing this
271:10 - project we're not going to be using that
271:12 - project ever again so let's just go back
271:15 - to our project which is going to be the
271:17 - app
271:18 - uh that we're being that we're going to
271:20 - be build
271:21 - here which is basically netflix loan um
271:23 - let me just go to appdelegate and move
271:26 - down here and let me just paste that
271:29 - so
271:30 - right now we just need to create a new
271:32 - um all right so what do i have here
271:36 - so uh yeah that was uh basically outside
271:39 - the class so
271:41 - yeah make sure that you know you don't
271:44 - get outside this class
271:46 - um
271:48 - all right so maybe i forgot one
271:51 - uh all right let me just hit build and
271:53 - run
271:54 - yeah everything seems to be working
271:57 - all right so i believe something is
272:00 - wrong in here yeah i actually got this
272:02 - error because i forgot to import
272:05 - core data and i'm not going to be
272:07 - cutting or
272:08 - editing this video because i want you
272:10 - guys to see the problems that i face um
272:13 - basically when i
272:15 - implement or add core data to a project
272:18 - that hasn't been initialized uh
272:20 - previously with core data so as you can
272:22 - see here basically we have imported core
272:24 - data and also we uh pasted the safe
272:28 - context method and also the persistent
272:30 - container and we're going to be talking
272:32 - a lot more about those but let me just
272:35 - continue you know configuring core data
272:38 - inside the app so let me just hit file
272:41 - new or basically i just need to make
272:43 - sure that i'm in my root directory let
272:46 - me just right click on here new file and
272:49 - scroll down until you see the core data
272:52 - section and i'm gonna be choosing data
272:54 - model
272:55 - all right so this data model i'm gonna
272:57 - be calling that maybe netflix clone
273:01 - model
273:03 - and very basic name and as you can see
273:05 - here let me just go back to the app
273:08 - delegate and i'm going to make sure that
273:10 - this name over here matches this one so
273:14 - netflix chloe model so i'm going to be
273:16 - calling this
273:18 - netflix clone
273:21 - and you know it's case sensitive
273:24 - all right so let me just talk a little
273:26 - bit more about the persistent container
273:28 - and the safe context um basically some
273:31 - of um some of people some some of the
273:34 - people actually in the community uh
273:36 - called this as a context
273:39 - manager and basically this is gonna be
273:42 - an
273:43 - variable which is going to be holding
273:45 - the persistent container
273:48 - or maybe you can say the database itself
273:51 - so basically this is the place where
273:54 - we store our data and basically this is
273:57 - the context manager or basically the
273:59 - manager um who's responsible for taking
274:03 - the data from us
274:05 - and committing those changes or actually
274:07 - inserting this data inside the
274:10 - database
274:12 - so here how it goes let me just go on to
274:15 - netflix clone model over here and
274:18 - basically i'm going to be creating a new
274:20 - entity right so um you can just
274:24 - press on add entity at the bottom right
274:26 - here and as you can see here basically
274:27 - we have an entity i'm going to be
274:29 - changing that name maybe to title
274:32 - item
274:35 - all right and basically we have
274:37 - attributes and data types and if that
274:40 - looks familiar basically it's something
274:43 - like the models that we have for the
274:45 - cycle over here so basically for the
274:47 - title we have some attributes and we
274:50 - have the data types um basically i'm
274:53 - gonna be copying these uh into this uh
274:57 - model that i have over here so let me
274:59 - just make like a new tab
275:03 - i believe i can open both of those like
275:05 - um side by side so let me just um yeah i
275:09 - did that by hitting command t
275:11 - so um yeah that's not possible i guess
275:15 - so all right so
275:16 - for now let me just hit um on the plus
275:20 - um symbol right here or the plus sign
275:24 - over here so let me just start by typing
275:26 - original
275:27 - underscore name and that is going to be
275:30 - string
275:32 - all right so also i have original
275:35 - title
275:36 - and that is going to be a string as well
275:38 - so basically i'm just copying the model
275:41 - over here so i'm going to be fast
275:43 - forwarding this part inside the video so
275:46 - i don't waste your time
275:50 - all right so as you can see here
275:51 - basically i have the id which was um
275:54 - integer inside my struct over here so
275:57 - basically i chose the type uh to be
276:00 - integer 64 and yeah please choose
276:03 - integer 64 because i believe if you
276:05 - chose something uh below this that might
276:08 - give you an error so this is basically
276:10 - that is going to be having like enough
276:13 - space to hold the uh the id which is
276:16 - been stored inside the structure over
276:19 - here media type that is going to be a
276:20 - string original name string original
276:23 - title overview poster path um release
276:26 - date vote average that is going to be a
276:27 - double because i believe that is going
276:29 - to be having like a decimal point and
276:32 - for the vote count i believe it's also
276:35 - an integer so basically we have that and
276:38 - also i just want to make sure that we
276:40 - have this um
276:42 - file or this model um available to
276:46 - access across xcode so let me just hit
276:49 - command b
276:50 - to build the um the application and i'm
276:54 - going to be um searching for the title
276:57 - that we have over here basically title
277:00 - item and i'm gonna see here if that is
277:03 - accessible from uh
277:05 - from the project itself so let me just
277:07 - go to maybe the collection table view
277:09 - cell
277:11 - and over here let me just make sure that
277:13 - that this is accessible so title item
277:17 - and as you can see here it's not so um
277:20 - sometimes xcode
277:22 - does this so it's normal so we can just
277:24 - close xcode over here yes stop tasks and
277:27 - just open xcode once again and i believe
277:31 - that is going to work um so let me just
277:34 - go back to the collection table view
277:36 - cell and let me just type in here title
277:38 - item and as you can see here basically
277:40 - now xcode sees the um the type that we
277:44 - have made inside the netflix clone model
277:47 - that we have over here
277:48 - all right so what we want to do right
277:51 - now basically before we start making
277:54 - anything to
277:56 - core data i'm going to be going to the
277:58 - managers over here because i just wanted
278:01 - you to learn the the clean way actually
278:04 - of implementing core data so let me just
278:07 - create a new swift file and i'm going to
278:10 - be calling that
278:12 - maybe um
278:13 - data
278:14 - persistence
278:16 - manager
278:18 - all right so basically that class is
278:20 - going to be responsible for
278:22 - downloading the data and also to uh to
278:26 - work and talk to core data api because
278:29 - we don't want actually to talk to core
278:31 - data api from within the class that
278:33 - we're using for viewing the collection
278:36 - view cell itself this is not solid
278:38 - principle so i'm going to be using this
278:41 - data persistent manager so let me just
278:44 - say class i'm going to be copying this
278:46 - name basically yeah i like that name
278:49 - actually so
278:50 - data persistence manager
278:53 - and here right here let me just type
278:55 - static let shared i'm going to be
278:58 - creating like a shared instance across
279:01 - the app
279:02 - so um yes that we have here and right
279:05 - now let me just define a new function
279:07 - i'm going to be called that function
279:10 - maybe download
279:12 - title
279:15 - with
279:17 - model and that model i believe is going
279:20 - to be a title
279:23 - all right so let me just type that right
279:26 - so basically this is what we're going to
279:28 - be doing so basically we're going to be
279:30 - downloading a title with model that is
279:32 - going to be passed
279:34 - from inside the collection table view
279:36 - cell and also i want to have like a
279:39 - completion handler over here
279:42 - so completion that is going to be
279:44 - escaping
279:46 - and basically we want to return a result
279:51 - and that result should have like a void
279:55 - all right um and also um error if an
279:59 - error happens
280:01 - and that closure should return like a
280:03 - void at the end so basically that's what
280:06 - this is what we're going to be
280:07 - implementing right here so right now we
280:09 - just need to have our context manager be
280:12 - able to insert the data that we want or
280:16 - basically the data that we get from the
280:18 - model here inside the database so
280:20 - basically it's just a two-step process
280:23 - first of all we tell the um the
280:27 - model or basically the context manager
280:29 - that we want to save something and we
280:32 - tell it exactly what we're going to be
280:33 - saving inside our database and then tell
280:37 - the context api or the context manager
280:39 - hey
280:40 - all right this is the data that we have
280:42 - been telling you please store that data
280:44 - inside our database so first of all we
280:47 - just need to have a reference to the api
280:51 - um persistent container over here and
280:54 - also
280:55 - the uh the save context manager
280:58 - so let me just go back to the data
281:01 - persistence all right so let me just
281:02 - type guard let because this is going to
281:04 - be an optional so let me just type app
281:07 - delegate
281:08 - and that is going to be ui application
281:16 - as
281:18 - app delegate
281:19 - else we're going to be returning
281:22 - all right so i forgot else
281:24 - so um yeah let me just type also over
281:27 - here and over here i'm going to be
281:29 - returning so right now i have like an
281:32 - instance or basically a reference to the
281:34 - app delegate and over here i just need
281:37 - to uh have the context as well so um let
281:41 - context and that is going to be um app
281:44 - delegate
281:45 - dot
281:46 - resistant container dot view context
281:49 - basically those are the two lines that
281:51 - we need to be able to talk to the
281:53 - context manager
281:56 - all right so basically we just need to
281:58 - import core data over here so that we're
282:01 - going to be able to use core data
282:03 - and over here i'm just going to create a
282:06 - new item so basically let's item and
282:09 - this item is what we're going to be
282:11 - storing inside our database so let's
282:13 - item and that is going to be
282:16 - a title item
282:18 - and we're just going to choose this one
282:20 - with the context and we're gonna pass
282:22 - the context over here so basically uh we
282:26 - are going to um to create a title item
282:30 - with the uh supervision of the context
282:32 - manager over here so if this is the most
282:35 - simple way that you can think about it
282:37 - so hey context manager we are creating a
282:41 - title item under your supervision so
282:43 - please note that so okay so we right now
282:46 - have an item
282:48 - and over here uh we can just say
282:51 - original title and that is going to be
282:54 - model dot original title and basically
282:57 - uh we're going to populate
282:59 - all of the um
283:01 - all of the attributes over here so item
283:04 - id that is going to be model dot id
283:07 - item dot uh what is uh also original
283:11 - name model dot original name item dot
283:15 - overview model dot
283:18 - overview i hope that is making sense to
283:20 - you guys because uh yeah
283:23 - core data is not that simple to wrap
283:25 - your head around um and basically yeah
283:28 - we can see here like an error because
283:31 - we're converting from an integer to
283:33 - integer 64. but that could be fixed
283:35 - easily so basically we're just going to
283:38 - make um n64 and pass the model id over
283:42 - here
283:43 - um
283:44 - let's just go
283:45 - and
283:46 - implement the other things so um what
283:49 - else so media type and now it's going to
283:51 - be model.media type item dot
283:55 - poster path all right so model the
283:58 - poster path um two three four five six i
284:03 - believe we have three left so item dot
284:06 - release date model dot release date
284:09 - item dot vote count here and
284:13 - average or the vote average here model
284:15 - dot
284:16 - uh vote count item dot um
284:20 - all right so average
284:23 - yeah both average that is going to be
284:25 - model vote average as well so basically
284:27 - as you can see here we have uh
284:29 - everything when it comes to the um
284:32 - saving the data so yeah let me just
284:35 - replace that as well so basically we uh
284:38 - we created like a title item that should
284:41 - be um
284:43 - saved inside the database and we created
284:46 - this with the supervision of the
284:48 - context manager now the context manager
284:52 - needs our basically he is just waiting
284:55 - for us to order uh that we want actually
284:59 - to save the
285:00 - title item inside the database so let me
285:02 - just do that so context
285:05 - and we're gonna say save
285:07 - and basically that is going to throw an
285:09 - error so basically we're just going to
285:11 - wrap this inside the do catch block so
285:14 - um yeah
285:15 - let me just say try
285:19 - right context dot save
285:22 - and for the catch block i'm going to say
285:24 - print
285:26 - error dot localized description i
285:29 - believe that is it
285:31 - um
285:32 - all right so let me just hit build and
285:34 - run yeah that is succeeded and basically
285:37 - if we managed to save the data over here
285:40 - let me just um say okay completion
285:46 - all right so basically we just need to
285:48 - pass something over here all right so
285:51 - basically we're just gonna pass the
285:52 - results so the result is success and as
285:56 - you can see here basically we are
285:58 - expecting void to be passed but how
286:01 - we're gonna be uh passing void this is
286:04 - gonna be tricky because we can't just
286:05 - type void this is a type name not not
286:08 - like a data itself
286:10 - well the best part about swift it's just
286:13 - really really simple we just need to
286:15 - pass an empty something so basically
286:17 - we're going to be passing like an empty
286:20 - parenthesis over here so as you can see
286:22 - here basically once we are done saving
286:25 - the data we are just going to pass the
286:27 - completion to the um
286:30 - or basically the success case to the
286:32 - completion and over here uh once we
286:35 - print the function i can just you know
286:37 - instead of printing the
286:38 - error over here i can just say
286:40 - completion
286:41 - well the failure and for the error
286:44 - actually i can just you know be smart
286:46 - about it so let me just go up here and
286:49 - make an enum
286:51 - and that is going to be like um a
286:54 - download or basically a database error
287:00 - and that is going to be getting from
287:01 - error as well and we have here a case
287:04 - let me just call that
287:06 - failed
287:07 - to save
287:10 - data
287:12 - and let me pass that word over here so
287:15 - um database error
287:18 - dot failed to save data and now uh
287:20 - everything looks clean
287:22 - and now we have one thing to do with
287:25 - which is basically uh fetching the data
287:28 - back from the server
287:30 - uh but we're going to be doing this
287:32 - later so let me just make sure that this
287:34 - is working so let me just go to
287:36 - collection table view cell
287:38 - and over here so since we are
287:41 - downloading a title so let me just
287:43 - say data persistent manager shared
287:47 - download title uh with model so
287:50 - basically the model itself is going to
287:52 - be titles
287:54 - all right at index path
287:57 - the row
287:58 - and for the completion and look how
288:01 - clean is that actually so basically we
288:03 - have result we're going to be switching
288:05 - on result
288:07 - all right so switch
288:09 - result and in case of
288:12 - success
288:14 - all right
288:16 - so we don't
288:18 - have anything over here so let me just
288:20 - say print
288:21 - downloaded
288:24 - to
288:25 - database
288:26 - and in case of the failure we can just
288:29 - print the error so
288:31 - case failure and we have an error over
288:34 - here passed from the data persistence
288:36 - manager so error and please write here
288:41 - like print
288:43 - failed or basically yeah we have an
288:45 - error information would be just
288:48 - like
288:49 - localized description for the error and
288:51 - that's it so basically let me build the
288:54 - um the project right here
288:57 - and let me say
288:59 - well we wanna like
289:01 - download spiderman uh long tap on
289:04 - spiderman
289:05 - press download and as you can see here
289:08 - download to database so that means
289:10 - actually that we have successfully um
289:13 - implemented everything correctly and now
289:16 - um our
289:17 - title is inside our database now it's
289:20 - just a matter of fetching those or
289:22 - fetching that title again
289:25 - so
289:26 - basically uh what do i want to do
289:28 - basically when i tap on the download i
289:30 - just need this to be reflected on in my
289:33 - downloads manager over here or the
289:36 - download step so before we do anything
289:40 - inside of here let me just go to the
289:42 - upcoming view controller i'm going to be
289:44 - scrolling up in here um
289:46 - yeah maybe i'm going to be
289:48 - copying this so um
289:51 - title and the yeah the title basically
289:54 - the configuration for the title so um
289:57 - let me just go in here
289:59 - say downloads
290:02 - all right let me hit build and run and
290:04 - let me go to the download
290:06 - tab and yes basically that is basically
290:08 - what we're going to be getting and also
290:10 - we need to implement like a simple table
290:13 - view and that is going to be really
290:15 - really simple because we're going to be
290:16 - copying everything from the upcoming
290:18 - through view controller
290:20 - so basically let me just
290:22 - um have that in here
290:25 - and
290:26 - yeah private
290:28 - yeah basically
290:30 - private let's instead of upcoming table
290:32 - maybe we can say download the table
290:36 - and over here i'm going to say download
290:38 - the table dot delegate it's going to be
290:41 - equal to self
290:42 - download table data source that is going
290:45 - to be equal to self as well and before
290:48 - um like waiting for xcode to throw any
290:51 - error inside of here so
290:53 - download view controller that is going
290:55 - to conform to ui table view
290:57 - delegate and also ui table view data
291:01 - source
291:02 - all right so
291:04 - number of table uh rows i believe we're
291:08 - gonna be actually copying everything
291:10 - from the upcoming view controller i'm
291:12 - not i'm not sure why i did that at the
291:14 - first place
291:15 - so
291:16 - we're gonna have this and that and that
291:20 - and also yeah basically those three
291:22 - functions
291:23 - so let me just
291:25 - um paste that in here and basically
291:28 - we're gonna have this uh yellow usb
291:31 - because we don't actually have titles
291:33 - and basically we're gonna be creating
291:35 - that over here so private let
291:38 - titles and that is going to be an array
291:40 - but instead of an array of title i'm
291:42 - just gonna be having like array of title
291:45 - item because that is going to be fetched
291:47 - directly from the database
291:50 - all right so um yeah let's just do
291:54 - this to be a var instead of title or
291:57 - instead of constant to be act to be
291:59 - exact and title item and i'm going to be
292:02 - initializing that away over here so we
292:05 - don't have any error inside the function
292:08 - or inside that class
292:10 - so what do we need to do right now
292:12 - basically we need to fetch the data from
292:14 - the database and basically we're going
292:16 - to be implementing that function inside
292:18 - of the data persistence as well
292:21 - so basically let me just go in here
292:25 - all right and i'm going to be calling a
292:28 - new function which is going to be
292:30 - fetching
292:32 - titles
292:33 - from database
292:36 - all right and that
292:38 - should like give me a completion
292:42 - so
292:42 - completion
292:44 - all right and that is going to be
292:46 - escaping as well and i'm just going to
292:49 - return like an array or basically a
292:52 - result
292:55 - and that result should have like
292:57 - something like an array of
292:59 - title item and also an error
293:03 - and that closure itself is going to be
293:05 - giving me like a void so basically when
293:08 - we call that function we are expecting
293:10 - to get an array of title item so what do
293:15 - we need to
293:16 - talk to the context manager again
293:19 - basically the same thing over and over
293:21 - here basically we just need to have this
293:23 - copied um some of y'all might be asking
293:26 - well you are just copying and pasting
293:28 - well maybe this is just two lines code
293:31 - uh it's not that big a deal actually
293:34 - so right now we just need to talk again
293:37 - with the context manager because
293:40 - this manager is the only one responsible
293:43 - or the only one authorized to access the
293:46 - database inside our app so we need to
293:49 - address the
293:50 - context manager politely and hence we're
293:53 - going to be making a request for that
293:57 - context manager so let me just type let
294:00 - request and that is going to be an
294:03 - nsfetch request and that is going to
294:05 - take the type of the data that we're
294:07 - going to be querying from the database
294:10 - so basically let me just type title item
294:14 - all right so basically this is going to
294:16 - be the type of the request that we're
294:18 - gonna be using and now let me just sign
294:21 - request dot
294:24 - title item dot fetch
294:27 - request so basically we now have our
294:30 - request ready to be executed or
294:33 - basically ready to be dispatched for the
294:36 - context manager
294:38 - so now we just need to dispatch the
294:40 - request
294:41 - for
294:42 - the database context manager so
294:45 - basically we're just gonna be doing that
294:47 - inside of a do catch block because
294:50 - accessing the database inside the app
294:52 - and you might be um not be able to
294:55 - actually find your request there that
294:57 - might throw an error so for now at least
294:59 - let me just print
295:02 - error.localized description but let me
295:04 - just go in here basically we are
295:07 - asking the context manager would you
295:10 - please ask the database with our request
295:13 - and what is my request basically i'm
295:15 - just going to fetch some title item so
295:19 - basically let's do let's do that so let
295:22 - me just try to convince the manager so
295:26 - that he can like access the database so
295:29 - we're going to be saying try like
295:31 - context
295:33 - dot fetch and please fetch the database
295:36 - with the request that we have over here
295:38 - and i believe that you're going to be
295:41 - getting us back like some titles
295:44 - and those titles are basically i'm just
295:46 - going to pass those back to you know
295:50 - um
295:51 - the result that i have over here so
295:54 - basically let me say let and if in case
295:58 - of success i'm just expecting to have
296:00 - like a title item which is basically
296:02 - what we have over here and for the catch
296:06 - that might be an error so basically
296:08 - we're just going to say completion dot
296:11 - failure
296:12 - and over here i'm just going to pass the
296:14 - same um operation or i'm sorry the same
296:17 - error that we initialized earlier so
296:19 - maybe um
296:21 - database error dot fail to save data or
296:23 - basically we can just have like another
296:26 - case so case failed
296:29 - all right so fail to
296:32 - fetch
296:33 - data and i can actually pass that over
296:36 - here so fail to fetch data
296:40 - so right now we have our um
296:43 - fetching request done so let me just go
296:46 - back to the download controller over
296:48 - here and basically i just need to like
296:52 - make a new function
296:53 - so yeah basically we are creating
296:55 - multiple functions in this tutorial so
296:58 - private
296:59 - func fetch
297:02 - local
297:03 - storage
297:04 - for downloads and that is a mouthful
297:08 - um name for a method but you know it's
297:11 - pretty much describing what it does so
297:14 - let me just say data persistence the
297:17 - shared download no no download actually
297:20 - i'm just going to fetch
297:22 - or basically fetching titles from
297:24 - database and when you
297:28 - get the result i'm going to be switching
297:30 - on the result one more time so basically
297:32 - in case of success i'm gonna be having
297:35 - like titles
297:37 - that is going to be um
297:39 - basically uh assigned to my
297:42 - you know titles over here so let me just
297:45 - have like a week reference so that we
297:47 - don't uh be prone to any memory leak so
297:50 - weak self and over here i'm going to be
297:53 - saying self dot titles that is going to
297:55 - be equal to titles and also i just need
297:59 - to reload my
298:01 - um
298:02 - table views so let me just say like um
298:05 - self dot table
298:07 - view
298:08 - or download
298:11 - yeah download the table and that is
298:13 - going to be
298:14 - reloaded
298:16 - i believe that's it for the success let
298:19 - me just go in here for the failure i'm
298:21 - going to have the error and i'm going to
298:24 - be printing the error
298:26 - just like normal in
298:29 - like what we've been doing since the
298:31 - beginning of the program
298:33 - um basically i'm just going to call that
298:35 - function over here so basically fetch
298:38 - local storage for download and before i
298:41 - run this app i might be
298:43 - uh like i don't want you guys to like
298:46 - run the app and don't see anything on
298:48 - screen because we haven't actually laid
298:50 - down the uh title uh or basically the
298:53 - download table so let me just say lay
298:56 - down yeah if you did layouts of views
298:59 - super view the layouts of views download
299:02 - the table frame that is going to be
299:04 - viewed about and i believe that is going
299:06 - to be working and remember in the last
299:09 - time that we've run our apps so
299:11 - basically we have downloaded spiderman
299:13 - so i believe when i click on downloads
299:16 - yeah basically there's nothing in here
299:20 - so um
299:22 - yeah let me see what did i miss so okay
299:26 - um
299:27 - yeah let's just do that again so replace
299:31 - so um let me just download spiderman
299:34 - download
299:36 - and since it's downloaded to the
299:38 - database so i can go to the downloads i
299:40 - don't see anything so let me just close
299:43 - the app open the app one more time and
299:46 - go to downloads i still don't see
299:49 - anything over here
299:50 - and let me see actually why do i have
299:53 - something like this so let me just debug
299:56 - this really really quick so let me just
299:59 - make sure that i'm here
300:02 - so
300:05 - all right so
300:07 - okay we are here we have everything over
300:09 - there so i believe that we need to
300:12 - dispatch
300:14 - you know uh this inside like
300:17 - a synchronous
300:18 - or on the main thread to be exact so
300:20 - dispatch q
300:24 - dot main dot async
300:26 - and we are just going to get that over
300:29 - here
300:31 - all right so let me just hit build
300:33 - around let me see
300:34 - if i do have it
300:36 - um i still don't have it i don't see any
300:39 - reasons why we shouldn't actually have
300:41 - it so let me just debug this really
300:43 - really quick
300:46 - oh how silly i am so basically we forgot
300:50 - actually to add the table view inside of
300:52 - here so view dot add sub view
300:55 - download table
300:57 - and
300:58 - i believe that is going to work so let
301:00 - me just go to downloads and as you can
301:02 - see here basically we have spiderman
301:04 - downloaded twice
301:06 - so um
301:08 - yeah so basically we just need actually
301:10 - to implement one more function inside
301:13 - the data persistence which is going to
301:15 - be a delete function let me just
301:17 - implement that function really quick so
301:19 - let me just type func delete
301:22 - title
301:23 - with
301:25 - model and that is going to be a title
301:27 - item this time and over here i'm just
301:30 - going to say i just need a completion as
301:33 - well that is going to be escaping
301:35 - and that is just going to give me like
301:38 - um the same result that i had
301:41 - all right so the result is going to be
301:45 - um
301:47 - void
301:49 - and error all right
301:51 - so basically this is going to be the
301:53 - function that i'm going to get a title
301:54 - item over here so i just need to have
301:57 - like the same reference for the app
301:59 - delegate and the
302:00 - um database manager
302:04 - so let me just have that
302:06 - so
302:06 - um i'm gonna be asking the data manager
302:10 - or basically the database manager hey
302:12 - context please delete object and that is
302:16 - going to be the model
302:17 - and over here i'm just going to do a
302:20 - catch block so that i can commit
302:22 - those uh changes inside my database so
302:25 - right here i'm just
302:26 - asking
302:27 - the database manager
302:31 - to delete
302:33 - certain
302:35 - object
302:36 - and over here i'm just saying okay
302:39 - confirm deletion so basically let me
302:41 - just type try context.save
302:45 - and over here the completion is just
302:47 - going to be success which is basically
302:50 - going to be avoid again and for the
302:52 - catch i'm just going to
302:54 - say completion dot failure and let me
302:57 - just pass a new error over here so
303:00 - case failed
303:03 - to
303:04 - delete data
303:06 - and let me pass that over here so
303:08 - basically database error dot failed to
303:12 - delete data basically that's it
303:15 - all right let me just delete that
303:16 - comment i don't need that you understand
303:18 - that
303:19 - so um let me just go to my collection
303:22 - table view cell over here and let me
303:24 - implement one more function
303:26 - and that function is going to allow us
303:28 - actually to delete something from a
303:30 - table and that function should be called
303:33 - like commit i believe so let me just say
303:38 - yeah that's not right so um yeah i
303:40 - believe it's in the download controller
303:42 - i'm really sorry about that so
303:44 - um that is going to be commit
303:47 - editing style so i'm just going to
303:49 - switch on the editing style and case
303:53 - delete so basically if the user is
303:56 - attempting to delete an item
303:58 - basically i just need first to remove
304:01 - that from the table so table view
304:05 - all right so remove or delete i believe
304:09 - so delete rows at uh index paths so this
304:13 - is going to be an array of index path
304:15 - and for the animation i'm just going to
304:18 - say like fade i believe that's the one
304:21 - and over here i just need to delete that
304:25 - from the um
304:26 - from the database itself so let me just
304:29 - say
304:29 - data persistence manager share dot
304:33 - delete title with the model of titles
304:38 - all right so that is going to be index
304:40 - path dot row and for the completion i'm
304:44 - just going to say switch
304:48 - on the result
304:49 - case success basically i don't get
304:52 - anything so print
304:55 - deleted
304:56 - from the
304:58 - database and over here for the failure
305:02 - so failure let me get the error
305:05 - and again print
305:07 - error dot localize description
305:10 - i believe that is going to be working so
305:12 - um
305:14 - all right so yeah we just need to have
305:16 - like another
305:18 - case uh after the delete over here so
305:21 - basically that is going to be default
305:25 - and for the default i just need to break
305:27 - i don't need to do anything else
305:29 - so um basically let me just replace and
305:33 - hit build and run let me see that myself
305:36 - so basically i have two instances of
305:38 - spider-man over here so let me just
305:41 - you know use that and i can see here
305:43 - that i'm getting an error
305:45 - all right so invalid number of rows so
305:48 - yeah i might be you know like um
305:51 - making something before something so let
305:53 - me just go back to the download
305:55 - controller and i'm just going to delete
305:57 - that row after
305:59 - actually i like um
306:02 - remove that from the database so let me
306:04 - just hit build and run one more time and
306:06 - i believe that is going to work so all
306:08 - right so right so right now i know the
306:11 - error basically we forgot actually to
306:14 - remove that as well from the titles
306:16 - array over here so let me just say um
306:21 - titles dot remove at and i'm just going
306:24 - to pass in the index path the row i
306:28 - believe that is going to work uh yeah we
306:30 - just need to have like a week reference
306:32 - for the title so we excel
306:36 - and over here i'm just going to say self
306:38 - which is going to be an optional self
306:40 - let me hit build and run one more time
306:42 - and i believe that is going to work uh
306:45 - basically yeah we just need to yeah
306:48 - basically this is just ridiculous
306:51 - so let me just go back to download view
306:53 - controller let me just
306:55 - try to do this first so um
306:59 - okay i'm just going to remove that from
307:01 - the array and then delete that from the
307:03 - table
307:04 - i don't have anything over here so let
307:06 - me just download that one more time it's
307:08 - not there yet i'm just going to fix that
307:11 - really quick
307:12 - and then let me just
307:14 - open the app one more time we have
307:16 - spiderman let me just delete that and
307:18 - yes this is working so basically this is
307:21 - the
307:22 - way that we are going to be deleting
307:25 - things so basically we're just deleting
307:27 - it from the database once and for all
307:29 - and first we're just going to remove the
307:32 - title from the array itself then from
307:34 - the table view itself so now we have a
307:37 - problem
307:38 - basically whenever we
307:41 - download something in here basically we
307:44 - just need to
307:45 - have something that notifies the
307:47 - download um controller to actually fetch
307:51 - or basically reload itself so that it
307:54 - you know when you tap download inside
307:57 - the home view controller it's already
307:59 - there in the download tab so basically
308:01 - this is what we're going to be doing
308:03 - right now using something called the
308:05 - notification center and that has nothing
308:07 - to do with the notification center on
308:09 - your device basically that is pure swift
308:12 - thing
308:13 - so basically um we're just you know or
308:16 - i'm just going to show you how that
308:18 - works so um let me just go back to my um
308:22 - all right so collection table view cell
308:25 - and over here once i'm done with
308:28 - downloading to database so let me just
308:30 - go in here in case of the success and
308:33 - over here i'm just going to say
308:35 - notification center dot
308:37 - i believe default
308:39 - and here i'm just going to post
308:41 - a notification so let me just do that so
308:44 - post
308:46 - all right so basically let me just put
308:48 - post a notification
308:51 - i'm really sorry so post a notification
308:54 - with a name so
308:56 - um ns notification name so i'm just
308:59 - going to pass in here something like
309:01 - down
309:02 - loaded so basically i'm just going to
309:04 - post uh a downloaded notification across
309:08 - the app and over here i'm just going to
309:10 - pass nil i don't need to pass anything
309:13 - else so whenever the
309:16 - title is downloaded i'm just going to
309:18 - notify
309:20 - everyone who is listening to that
309:22 - notification so i have completed my
309:25 - download or basically download it all
309:28 - right so over here inside the download
309:30 - view controller
309:32 - i just need um to do this so basically i
309:35 - just need to listen for the changes that
309:38 - happens so let me just say notification
309:41 - center dot default dot add observer and
309:45 - for the observer i'm just going to
309:48 - listen for the same
309:50 - name or of the notification that i
309:52 - posted which is basically downloaded
309:55 - all right and for the object i'm going
309:57 - to be passing nil
309:59 - cue
310:00 - nil
310:01 - and for the method that i'm going or
310:04 - basically the method that i'm going to
310:06 - trigger so basically that is going to be
310:09 - self
310:10 - dot
310:12 - all right and that is going to be
310:15 - um
310:16 - fetch local storage
310:18 - and basically that's it i believe we
310:20 - need to make a weak reference or yeah
310:23 - that is okay i believe
310:26 - so um yeah i believe that is okay so let
310:28 - me just hit build and run and let me see
310:30 - if i do actually have it so
310:32 - right now i don't have anything inside
310:34 - my downloads so let me just try to
310:37 - download spiderman one more time
310:39 - download over here and when i i and here
310:43 - we go boom whenever i go to downloads i
310:46 - have spiderman is waiting for me
310:49 - we can just try anything else so maybe
310:52 - the matrix
310:54 - so let me just download that and let me
310:56 - just go in here boom we have the matrix
310:59 - as well
311:00 - so basically
311:02 - i have everything set up i just need to
311:05 - have like a handler for that as well so
311:08 - let me just go back to my upcoming and
311:10 - for the did select at row i'm gonna be
311:13 - copying everything from here i'm gonna
311:16 - go to the download controller let me
311:19 - just paste that over here hit building
311:23 - right and i believe that is going to
311:24 - work so downloads we have spiderman let
311:27 - me just click on it and i believe that
311:29 - is going to take me directly to the um
311:33 - to the preview controller that we have
311:34 - over here so
311:37 - i guess this is going to be the last
311:40 - video of this series it's been too long
311:43 - and if you've been following the series
311:45 - up till now
311:46 - i can't thank you enough because you've
311:48 - been like a huge supporter for me so
311:52 - once again thank you so much guys i
311:54 - believe this is going to be the end of
311:56 - this series so again thank you so much
311:59 - for sticking around if you liked what
312:02 - you just saw please hit that like button
312:03 - and consider subscribing to my channel
312:05 - because that is going to be helping me
312:08 - big time and hit that like button you
312:11 - know that is going to help me as well
312:13 - with the youtube algorithm and let me
312:16 - just catch you in the next tutorials or
312:18 - maybe in the next series to be exact so
312:21 - once again that was armed please have a
312:23 - good day and stay safe