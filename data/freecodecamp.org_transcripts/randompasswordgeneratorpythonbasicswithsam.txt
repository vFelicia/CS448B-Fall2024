02:00 - oh hey everybody let me check my mic
02:02 - test test test test test got that turned
02:06 - down
02:07 - all right just thought of something else
02:10 - all right
02:13 - let's get that right
02:16 - all right mute this
02:19 - there we go
02:20 - all right hey everybody welcome back uh
02:24 - to another
02:26 - live stream i am
02:29 - sam from python basics and
02:32 - uh bo and
02:34 - uh quincy and everybody at free code
02:37 - camp allows me
02:39 - to come here
02:41 - every other week
02:42 - and do a stream and i'm super grateful
02:45 - for that and i'm always very excited and
02:48 - we have quite a few people here today so
02:52 - if you're new here thanks for joining us
02:54 - um
02:56 - we usually just do a stream
02:59 - from videos that i have done before
03:02 - on my channel and there is a link down
03:04 - below
03:05 - to that channel um
03:07 - so if any time there's anything you
03:09 - don't quite understand or if i've gone
03:11 - over their micro videos of everything we
03:13 - have done here and also this is
03:16 - beau does a very good job
03:19 - all of these are catalogued
03:22 - on a playlist on free code camp's
03:26 - youtube channel
03:28 - after this you can just click over there
03:30 - and check out this is this is live
03:33 - stream 12 i believe uh cardinal you may
03:36 - correct me or not and we do have this is
03:39 - the 12th there you go cardinal does an
03:41 - awesome job for us he is our
03:43 - moderator so he will keep us on task
03:46 - um and uh cardinal just fyi i've done a
03:50 - better job i got discord open so
03:53 - there's anything you need to let me know
03:55 - that i will see specifically just hit me
03:58 - up over there on our uh dm okay
04:01 - so there are a couple things um
04:05 - nope not the fourth or fifth uh
04:08 - yes there will be replayed all right i
04:11 - hope the background isn't too bad i had
04:13 - to move some stuff around but okay uh
04:16 - let's just go ahead and get started
04:18 - so there are a couple things that i do
04:20 - want to cover
04:21 - uh first that
04:24 - we
04:25 - may not be aware of so we're going to be
04:27 - doing a random password generator should
04:30 - put that right there
04:32 - random
04:33 - and um
04:35 - and
04:36 - if you are new you do not know yet that
04:39 - i cannot spell so you will see
04:42 - misspellings typos
04:44 - everything so that's
04:46 - don't
04:47 - don't uh don't be alarmed you will
04:49 - probably catch
04:50 - um
04:51 - you will catch many typos so all right
04:55 - so in this password generator what we're
04:57 - going to need
04:58 - from python
05:01 - is of course something with uh
05:04 - random and then so we're not having to
05:06 - type in all of our
05:08 - uh letters and characters we're going to
05:11 - use
05:12 - uh the string module so let's just go
05:15 - ahead and look at let's bring in
05:17 - random first
05:19 - and put that into memory
05:21 - and really learn learn about it so what
05:24 - in the world does random do
05:27 - all right der
05:29 - random
05:32 - all right
05:34 - all right cool
05:36 - all right
05:37 - so well let's look at everything about
05:39 - it
05:40 - so it is a module
05:42 - that the core developers have already
05:45 - created for of four of us to random
05:48 - variable generators now
05:50 - we're going to touch on towards the end
05:51 - and also stay tuned until the end
05:53 - because we're probably going to get
05:54 - through this
05:55 - uh
05:56 - in under an hour and i have some extra
05:58 - stuff that i wanted to talk to that i'm
06:00 - going to sneak in at the end
06:01 - so
06:04 - there if you haven't heard
06:07 - pseudo-random
06:09 - there is no real random
06:11 - there just isn't because a human being
06:15 - will begin to
06:17 - repeat digits
06:19 - there's actually that
06:20 - that is no noticed and
06:23 - then a computer
06:25 - is based on logic so these are actually
06:28 - called pseudo random and i have a
06:30 - thought and an idea to actually go over
06:32 - a little bit of how that is actually
06:34 - deduced how a random number is actually
06:37 - calculated so but we need uh randomity
06:42 - um i think i just made that word up uh
06:45 - randomness
06:46 - and um then the actual characters that
06:49 - we're going to be using
06:50 - so what we're going to
06:52 - what we're going to use
06:54 - in our example
06:56 - is let's get to the bottom
06:58 - we're going to use
07:01 - choice
07:02 - see
07:03 - so help
07:05 - random
07:07 - choice
07:09 - choose a random element from a non-empty
07:12 - sequence
07:13 - all right that's pretty
07:14 - self-explanatory then we're going to use
07:18 - shuffle so we need to look at this and
07:19 - how how we use it
07:24 - full
07:25 - all
07:28 - right uh i'm sorry just looking to see
07:31 - if there was any
07:33 - all right so shuffle this is super
07:35 - important
07:36 - uh and i like to really make a big deal
07:39 - about in place and
07:41 - um
07:43 - return so
07:44 - shuffle
07:46 - does in place it creates nothing it
07:48 - doesn't return anything so
07:50 - and you're going to pass it
07:53 - the sequence the list
07:55 - list
07:56 - there we go so now
07:59 - now let's look at string
08:01 - so string is another module that the
08:03 - core developers have have created for us
08:07 - and let's look at this
08:09 - before we get into it ah
08:12 - all right
08:14 - as key
08:15 - the characters that a computer knows
08:18 - how it tabulates and keeps up with all
08:22 - key strokes so every character is a
08:25 - signed
08:26 - and as key
08:28 - variable
08:30 - so
08:32 - we'll look at these momentarily but i
08:33 - want to go over them right now as key
08:35 - letters
08:36 - as key lowercase as key uppercase
08:41 - as key
08:42 - digits
08:44 - as key punctuation so let's just jump at
08:46 - it
08:47 - so string
08:50 - as this is another one that i always
08:54 - have a hard time with
08:56 - so if we look really close all right you
08:58 - got can you even use this in frame this
09:01 - is in frame all right we have
09:05 - lower case
09:08 - uppercase
09:10 - lowercase and capital excuse me or
09:12 - uppercase i don't know how all right so
09:14 - 52. so 26 letters and the
09:18 - english alphabet
09:20 - 26
09:21 - we have lowercase and uppercase so
09:23 - that's 52.
09:25 - now letters is
09:27 - both lowercase and uppercase so we can
09:30 - actually break this out
09:32 - string dot
09:34 - as
09:36 - as key
09:39 - lowercase
09:41 - and boom i just get lowercase
09:44 - and then
09:47 - uppercase
09:48 - boom capital
09:50 - all right
09:54 - okay anything anything notable oh jan's
09:57 - here awesome oh jan please after after
10:00 - this um
10:02 - uh hit me up on discord i want to make
10:05 - sure we get you to be a uh moderator too
10:10 - uh because you've been around a while i
10:12 - think you sent me some stuff but that
10:13 - was not well
10:15 - we'll talk about that later uh glad to
10:17 - have you here um
10:19 - and glad to have we got quite a few
10:21 - people here today so glad we have a
10:23 - pretty large group and start asking
10:25 - questions if i have gaps right now
10:27 - please
10:28 - please ask any questions because this is
10:33 - when you ask a question somebody else
10:35 - has that same question okay so oh i
10:37 - think i was shaking the camera
10:40 - string digits
10:42 - all right oops
10:44 - uh what'd i do wrong string dot
10:49 - digits
10:52 - there we go so i get zero zero one two
10:55 - three four five six seven eight nine
10:57 - uh string
10:59 - yes uh is that what i did sting thank
11:01 - you good catch look i i own what i can
11:05 - and what i cannot do uh
11:07 - typing i actually be i actually used to
11:09 - be a worse typer before um
11:13 - i began programming because you have to
11:15 - type these things right
11:20 - all right
11:23 - oops
11:24 - sorry i thought i heard discord
11:28 - all right
11:29 - all right
11:32 - okay
11:33 - so
11:35 - now that we have our base modules that
11:37 - we're going to be
11:39 - using
11:40 - now we need to begin to create our
11:43 - function
11:44 - so
11:46 - guess what we're going to call this
11:49 - function
11:50 - so we're going to call it password
11:53 - now
11:54 - now we need to deal with some things
11:56 - that we you may or may not be aware of
12:00 - so we're going to be creating this
12:02 - function
12:04 - with um
12:08 - with some variability
12:10 - so we're going to need to take in
12:13 - arguments
12:14 - now some of them are already going to be
12:16 - set that we're going to have a starting
12:18 - point
12:19 - so
12:20 - if you haven't heard the term default
12:22 - argument
12:24 - or optional argument
12:26 - comment right now because we're going to
12:28 - get into it so if we need to go further
12:31 - into it just let me know because let's
12:33 - just look at one of our
12:35 - highly
12:36 - used highly used uh functions right here
12:40 - print
12:42 - so like i've done before
12:44 - so these
12:46 - end perfect example end is optional
12:49 - and it is defaulted
12:51 - to
12:52 - newline
12:53 - that's what that means so when you have
12:56 - a
12:57 - so i have to pass
13:00 - so when i'm using uh
13:04 - some
13:06 - it is expecting an iterable
13:08 - it needs to have one argument
13:10 - so then if i pass
13:12 - so right here takes at least one
13:14 - positional argument zero is given
13:18 - so we're going to set it up where we're
13:19 - gonna have one
13:22 - one uh one positional and then two two
13:25 - optional all right
13:27 - so let's just look and see what that is
13:29 - going to look like
13:36 - uh yeah if we have time we can look at
13:39 - uh how to replace um
13:42 - uh
13:44 - methods with with lists okay
13:46 - all right so
13:48 - what we're gonna do is we're gonna we're
13:50 - gonna we're gonna layer this password
13:52 - generator to
13:54 - um let's see
13:57 - how did i want to do this
13:58 - we're gonna have this hat be able to
14:00 - take digits and we're going to control
14:03 - the strength we're going to have let me
14:05 - get it up
14:08 - we're going to take length
14:09 - is it going to have
14:10 - digits
14:12 - and the strength of it we're going to
14:13 - have three scenarios weak strong and
14:16 - very
14:17 - now we need to pass this information
14:20 - on
14:21 - to the user
14:24 - and
14:25 - and how do we pass information
14:28 - on to the user of our function
14:32 - we have to use a doc string
14:35 - strength
14:38 - strength
14:39 - and
14:41 - we're going to set this up to true right
14:43 - now
14:44 - all right so doc string anybody have any
14:47 - questions of what a doc string is
14:52 - okay so the doc string is literally just
14:57 - this right here
14:58 - this is the doc string documentation
15:01 - string
15:02 - and this is
15:06 - passed along
15:09 - with
15:10 - our three quotation marks and we're
15:13 - going to tell the user
15:16 - what information they need to know
15:18 - so length
15:21 - of
15:23 - password
15:26 - if you
15:30 - num
15:32 - if you
15:34 - want a number
15:38 - and then
15:41 - and strength
15:47 - we're going to pass in
15:49 - week
15:51 - and i moved my camera so if i i'm
15:53 - squinting more than or excuse me i moved
15:55 - my light so i would get rid of shadows
15:57 - so if i'm squinting a little bit more
15:59 - than normal
16:01 - that is why
16:02 - so all right length of password
16:05 - num
16:06 - if you want a number and strength weak
16:09 - strong and very
16:11 - so that is what is going to
16:14 - happen
16:15 - if we then call
16:17 - password
16:19 - so now i have my documentation string
16:22 - right there
16:23 - boom let's do this again i wanted to be
16:25 - able to see if this was installing frame
16:27 - shoot is it
16:29 - yeah sorry guys
16:31 - all right
16:32 - let's move this up just a touch because
16:34 - i had a
16:35 - multi multi-line
16:37 - there we go
16:39 - boom there we go so
16:41 - whatever you type in your documentation
16:43 - string is the information that's passed
16:45 - along when you begin so then the user
16:47 - understands and you can communicate even
16:50 - more in depth and then of course
16:53 - when you can even have even more but
16:55 - we'll deal with that at a later time all
16:57 - right
16:58 - so
17:01 - okay any
17:03 - anything before we move on to the actual
17:05 - structure
17:07 - of
17:08 - of the
17:10 - function
17:11 - anything good jan
17:13 - cardinal anything i need to know about
17:14 - before we move on that i might have
17:16 - missed
17:18 - okay
17:19 - is that light too bright do i look all
17:21 - washed out
17:24 - no okay
17:26 - all right so now we just need to jump at
17:28 - it
17:30 - all right where are the notes
17:34 - i need to get that ready
17:38 - all right
17:39 - so we don't need pass anymore so now we
17:42 - have
17:45 - excuse me
17:46 - so now we need to begin to account for
17:48 - our scenarios
17:50 - so we're going to have
17:52 - so we're going to take length
17:54 - then we're going to have weak
17:57 - strong and vary so we need to account
17:59 - for we'll deal with num in a minute
18:04 - but right now we need to have three
18:05 - scenarios
18:12 - thank
18:12 - you misspelled strength
18:17 - let's see did i do it right that time is
18:19 - it getting better is it getting closer
18:25 - okay
18:28 - awesome
18:32 - all right
18:36 - thank you cardinal i don't know exactly
18:37 - what you deleted but awesome
18:44 - okay all right so
18:46 - we're gonna need an if
18:50 - and then
18:51 - to do
18:54 - actually let's get our variables going
18:55 - first
18:56 - so we need to start separating these so
18:59 - we're gonna have string
19:02 - as key
19:04 - lower
19:07 - and we're gonna have upper
19:10 - because we want to we want to
19:11 - differentiate between these and we're
19:13 - going to have relative strength and move
19:15 - on from there
19:17 - as key
19:20 - as key
19:22 - upper
19:24 - now let's do digits
19:27 - and we know that's okay one two
19:32 - and then
19:34 - you might say why didn't you just do
19:36 - this well we i want to just have some
19:38 - consistency here so i'm going to do
19:41 - lower
19:42 - and it's less typing
19:44 - lower
19:45 - plus
19:46 - whoa
19:50 - i hit my
19:53 - i did page up yeah that's what i did
19:56 - upper
19:57 - then digits
19:59 - string dot
20:02 - digits
20:04 - and then punctuation
20:07 - punk'd
20:08 - string
20:10 - dot
20:12 - punk
20:13 - punkt i always i didn't know i
20:15 - misspelled this i don't think i'd
20:17 - actually ever punked tuation and then
20:20 - our password we're going to increment
20:22 - this so we're going to start out with a
20:24 - empty string
20:25 - all right any
20:32 - all right
20:38 - all right well everything that i do on
20:41 - this stream and also basically over on
20:43 - my channel
20:44 - is
20:45 - if somebody is beginning to watch this
20:49 - and has zero experience with programming
20:53 - and especially python
20:55 - that
20:57 - you can jump in follow along and it can
20:59 - make sense we keep this as basic as
21:02 - possible
21:03 - and try to move very slowly into
21:06 - advanced areas so i hope that answers a
21:09 - couple of the questions that i just kind
21:10 - of saw
21:11 - all right
21:12 - because they're because programming can
21:14 - get very overwhelming very very quickly
21:18 - if strength
21:22 - equals week so now i can change this to
21:24 - weak
21:26 - all right pass
21:29 - all right so now i have so i'm going to
21:31 - default this to weak
21:34 - boom all right
21:36 - so now
21:37 - so as you go through and as you change
21:39 - one thing change don't don't write this
21:41 - whole thing at one time
21:43 - and then try to run it because you're
21:45 - going to make a mistake i don't know if
21:47 - you if you've been over to my channel
21:48 - and seen the
21:50 - um
21:51 - seen the video on
21:53 - incremental development
21:55 - right right one functionality test it
21:58 - because you could have it fail you you
22:00 - could write uh you could write a whole
22:03 - section and it begins failing all over
22:06 - the place and you have no idea where to
22:07 - start so write one thing to change test
22:10 - it move on
22:11 - because when you go back and you start
22:13 - changing one or two and the whole thing
22:15 - just fails you just want to rip your
22:18 - eyeballs out so all right
22:20 - let's just incr incremental incremental
22:22 - incremental incremental improvement
22:24 - incremental change all right
22:26 - so there there's my little there's my
22:28 - little soapbox for today
22:31 - all right
22:32 - so
22:34 - we have this now this is how we're gonna
22:37 - handle
22:39 - uh
22:41 - any digits
22:42 - excuse me
22:44 - i've been a little congested recently
22:47 - all right
22:48 - so
22:50 - actually let's build on this
22:52 - so four we won't do the numbers yet
22:56 - so four
22:58 - i in
23:01 - range length
23:06 - then
23:10 - let's see where i am
23:16 - then i'm going to take my password and
23:18 - i'm going to increment
23:20 - it up
23:21 - with my random
23:24 - choice
23:26 - from lower
23:28 - and actually i just thought about it we
23:30 - didn't actually
23:31 - no we we did look at choice right yeah
23:33 - okay it's gonna randomly pick so i'm
23:36 - going to randomly pick
23:38 - from lower so right now weak is just
23:41 - dealing with the lower case letters
23:44 - and that's it so if i pass it
23:47 - and we already have it set on weak so if
23:49 - i do
23:50 - password
23:53 - and i pass it
23:54 - 5
23:56 - i don't have it printing out anything
24:00 - print
24:02 - pass
24:03 - word actually
24:06 - this needs to be return
24:08 - pwd
24:13 - there we go so i have a password
24:16 - that is
24:18 - then
24:21 - print
24:22 - password
24:25 - five
24:26 - to make it look a little bit prettier
24:28 - there we go
24:29 - so of course it's going to be random
24:32 - again
24:33 - so just just like so so now i have a
24:36 - five letter password but they're all
24:39 - lowercase
24:40 - so that scenario is again
24:43 - pretty weak
24:45 - so now let's add well what happens if we
24:48 - want some numbers
24:49 - so now let's add some functionality that
24:52 - if
24:53 - num
24:55 - so now
24:57 - why did i just do
25:00 - if num
25:02 - and length
25:05 - increment
25:06 - down 2
25:09 - then
25:11 - for i in range
25:14 - 2
25:19 - password
25:26 - random choice
25:30 - digits
25:34 - and
25:35 - move on so all right now let's go over
25:37 - this
25:42 - so now
25:44 - i just hardwired this
25:46 - so if
25:48 - false
25:50 - so it's defaults to false so it's not
25:52 - going to include a number unless you
25:54 - change it to true
25:56 - then if this is true because this is
26:00 - so now if i go
26:06 - known
26:09 - num
26:10 - equals
26:13 - true
26:14 - so now when this catches true
26:18 - this is going to reduce
26:20 - so we're we're defaulting and hardwiring
26:23 - this into
26:24 - i want at least two of my
26:27 - two of my
26:29 - characters to be digits so i'm removing
26:32 - this down making this shorter by two
26:36 - then
26:37 - i'm
26:39 - going through here two times grabbing
26:41 - two digits then continuing on so now
26:44 - let's run this
26:45 - so now let's run this again
26:49 - now if we look
26:50 - we will deal with this later with some
26:53 - randomity randomness
26:55 - should have probably looked that up
26:56 - before i started
26:58 - to be able to conjugate
27:00 - randomness
27:02 - so i'm going to have two random numbers
27:05 - at the beginning and then the remainder
27:09 - of them will be
27:11 - characters so now that is
27:14 - our week
27:16 - so now let's do something with
27:19 - strong and we'll deal with this
27:22 - in a minute so i had my if that's my
27:24 - first condition
27:26 - and then
27:27 - l if
27:31 - strength
27:33 - equals
27:36 - strong
27:41 - so now what i want to do
27:45 - is i want
27:47 - to then include
27:50 - both uppercase and lowercase
27:53 - and strong and then for
27:58 - with
28:00 - very we're gonna add punctuality too
28:04 - punctuation not punctuality i knew that
28:07 - sounded weird sorry we're gonna add
28:09 - punctuation to
28:11 - to our random
28:14 - password all right
28:17 - okay
28:18 - so now
28:20 - so now we saw what we did with numbers
28:21 - so we're gonna do num if
28:25 - and let's see what we
28:27 - did we're gonna go so now with
28:30 - strong we're going to keep this as two
28:33 - and then with very we're gonna add a
28:36 - little bit
28:37 - of
28:38 - uh
28:40 - flexibility and a little bit more
28:42 - randomness so that's why we're not over
28:45 - we're not blanketing our number choices
28:48 - and then we want them to be very they we
28:50 - want them to vary each
28:52 - each of these
28:54 - so all right
28:55 - let's see so we got let me get where i
28:58 - see where i am with my notes
29:00 - we're on strong
29:02 - so same thing we're going to lengthen
29:06 - by
29:09 - 2
29:11 - and then for
29:15 - for i in
29:17 - range
29:18 - 2
29:21 - then password
29:24 - increment
29:26 - if i can increment
29:28 - my typing is not that great today
29:29 - everybody so i apologize
29:32 - uh then our random choice
29:35 - random choice
29:40 - digits
29:43 - and then we'll come out here
29:45 - and still do our passwords but now this
29:49 - for i in range
29:52 - blanks
29:55 - now here's where it's going to change
29:57 - where we're giving a little bit
29:59 - more
30:02 - depth of character
30:04 - we're going to use
30:06 - choice dot letters
30:12 - and
30:14 - actually
30:17 - all right so since i already created
30:18 - this and you may have typed this so
30:19 - we'll leave letter and letter the same
30:21 - so now we have upper and lower case here
30:24 - let me check my indention something
30:26 - didn't feel right
30:29 - all right so now we'll leave that copy
30:32 - paste
30:34 - and then now we're going to have
30:40 - strength
30:44 - and this is going to be
30:47 - strong
30:48 - all right does everybody understand
30:51 - what i'm doing so far
30:55 - all right so
31:03 - let's see
31:09 - all right
31:16 - all right
31:17 - so now i have my strong and i have five
31:20 - here let's up this to ten
31:25 - so now i have up i have digits
31:30 - capital and lower case all in together
31:34 - but as you'll know we have a problem
31:36 - here
31:37 - where
31:40 - it's it's too consistent it's if
31:42 - somebody starts seeing this they're
31:44 - going to realize all right so
31:46 - i only have to pick
31:48 - there's only digits at the front so we
31:50 - need to we need to handle this right now
31:53 - so random
31:56 - dot shuffle
32:00 - and we're going to have a problem here
32:01 - in a minute
32:02 - so
32:04 - wait a second
32:06 - shuffle a list
32:09 - hmm
32:10 - so that's a problem
32:12 - so we need to come here
32:14 - and go password equals
32:17 - list
32:19 - password we need to turn this into a
32:21 - list
32:23 - then we pass this
32:27 - so now now let's look and see we're
32:28 - gonna have another problem
32:30 - aha
32:32 - what is our issue
32:33 - what to remind you because this is what
32:37 - so help
32:39 - what did random
32:40 - what did random shuffle do
32:44 - who remembers in the doc string
32:46 - random not shuffle
32:49 - it's a very big
32:52 - issue that you have to pay attention to
32:55 - when you're reading the documentation
32:57 - this is it right here
32:59 - in place
33:01 - return none so it doesn't create
33:03 - anything so when i pass this it returns
33:06 - none that's why i get
33:08 - none right here so i need to then
33:12 - put this back
33:14 - i need to
33:16 - so i run that
33:18 - then
33:20 - return
33:24 - password
33:25 - pwd
33:27 - ah one more problem
33:30 - this is still a list so now i have to go
33:33 - uh do do do do so this is a list we got
33:40 - dot
33:42 - join
33:43 - password
33:46 - bam
33:47 - so now
33:48 - i have shuffled
33:50 - rejoined
33:52 - i'm using my join method
33:55 - on on a list for a string and now i have
33:58 - these random passwords so we have weak
34:01 - we have strong
34:02 - now let's go ahead and knock out
34:15 - now we need to deal with very so we've
34:18 - we've handled a lot of this so now let's
34:20 - go
34:23 - all right
34:26 - strength
34:28 - i'm going to type that pretty good
34:29 - equals very
34:33 - if num so now
34:35 - very we want this to be
34:38 - very strong right so
34:40 - we need to add a little bit more
34:43 - of
34:45 - some
34:46 - some randomness to this
34:48 - so
34:50 - ran
34:51 - equals random
34:54 - dot
34:55 - rand int
34:57 - two to four
34:59 - so right now
35:02 - i don't even know
35:04 - how many digits it's gonna have it's
35:06 - gonna have two three or four
35:08 - so i wanted to make this a little bit
35:10 - even even even more more out of my hands
35:14 - okay
35:18 - okay
35:21 - all right
35:25 - all right so then we are
35:27 - now we need to do some a little bit of
35:29 - math
35:31 - uh here just like we did with our two
35:33 - but now we need to handle
35:35 - we need to handle this so we got let me
35:37 - see where i am with my notes
35:39 - all right so
35:41 - and also to let everybody know that i've
35:45 - gotten pretty good at not closing out
35:47 - the shell
35:49 - and after the stream going over to my
35:53 - github
35:54 - so you can get to my github
35:57 - on any video link link
35:59 - on my
36:01 - youtube channel and all of this is there
36:03 - i have one one full consistent
36:07 - free codecamp dot py
36:10 - file that i keep adding to and then the
36:12 - notes the shell all the notes all the
36:15 - output for the day that i have in a file
36:18 - dated
36:19 - uh today and that's in its own
36:21 - uh folder free codecamp folder over on
36:24 - my uh github
36:26 - server on my repository just to let
36:29 - everybody know i have not been voicing
36:32 - that as much as i've been meaning to
36:34 - so all right where are we so we're at
36:38 - we're at our if num
36:40 - then we need to
36:41 - adjust this a little bit
36:44 - so now
36:46 - all these others were just
36:48 - decrementing down by two well we need to
36:52 - set up some functionality
36:54 - we don't know how many digits it's going
36:56 - to have we know
36:58 - with an idea with a random number so now
37:00 - we need to increment down by that
37:03 - and then oops
37:06 - then for i
37:09 - in range of ran
37:13 - oops
37:14 - then password
37:17 - and increment
37:20 - up by random
37:23 - choice
37:26 - digit
37:28 - and then i come out so then i need to
37:30 - shorten the length
37:32 - by my
37:33 - rand
37:35 - incrementation
37:37 - then for i in range ran
37:44 - so then also we're going to have random
37:49 - punctuality too we're gonna use that
37:51 - same
37:52 - that same
37:53 - uh
37:54 - for this right here
38:00 - to really get some
38:02 - randomness password increment
38:06 - random
38:08 - random
38:10 - dot choice
38:12 - punkt
38:15 - and for then we're just going to do
38:18 - some letters
38:20 - for in range whatever is left over
38:25 - so if you want very you're going to have
38:27 - typically a very long password
38:30 - random dot and then you could set some
38:32 - function functionality up be like hey
38:35 - and letter
38:36 - letter
38:37 - letter
38:39 - all right
38:42 - and i'm missing a
38:44 - there
38:46 - boom boom boom
38:48 - boom
38:52 - all right
38:54 - let's clean that up some
38:56 - so now
38:59 - copy
39:00 - let's go 15
39:03 - and i we have very
39:05 - let's see how we did
39:07 - check the any good comments
39:10 - password equals password i love that do
39:13 - you know that people actually that's
39:15 - like the most used uh i think there's a
39:17 - list there was an old movie well i say
39:20 - old
39:21 - ancient to you guys old to me um it was
39:24 - called i think hackers back in like 90
39:26 - 1993 or 1994.
39:31 - had some uh
39:33 - pretty famous
39:34 - people in it that hadn't been seen yet
39:36 - before
39:37 - so all right
39:42 - all right so here we go whoa
39:44 - let's see where i got what i left out
39:50 - all right
39:53 - and ah whoa well that's not good
39:59 - let's see i left a whole bunch of
40:01 - stuff out
40:04 - length letter choice
40:08 - and then
40:10 - increment up
40:14 - random dot
40:17 - choice
40:20 - and this is supposed to be length my
40:22 - eyes are all over the place today
40:24 - everybody i apologize length
40:28 - choice
40:30 - dot
40:32 - parentheses letter
40:36 - there we go okay
40:44 - oh you have seen that
40:46 - you are you are right it had it did have
40:48 - angelina jolie and a couple
40:51 - a couple of others
40:54 - it was a very interesting movie okay now
40:57 - check this out
41:00 - oh good question all right so let's
41:03 - break let's break this out
41:05 - so what does what does this do right
41:07 - here
41:08 - it's all right help
41:10 - dot
41:14 - string dot join
41:17 - uh
41:22 - str
41:24 - all right
41:26 - help
41:27 - dot
41:30 - str dot
41:32 - join my fingers are not typing okay so
41:35 - this is a little odd and you might you
41:39 - might go okay this doesn't make any
41:41 - sense
41:42 - because you're passing it a list
41:44 - but
41:45 - you're getting a string
41:47 - most of the time you have a string
41:50 - and then you do something to it so let
41:52 - me let me see if i can
41:54 - do this right here
41:56 - so you're having a string that you're
41:57 - saying hey i don't want any spaces in it
42:00 - and this is the
42:03 - this is the list or the sequence that i
42:06 - want to put
42:08 - with this string that doesn't have
42:09 - anything in it so if i were to i know
42:11 - that sounds really weird so let's look
42:14 - at this right here so i have a list of
42:17 - a name
42:19 - that's sam
42:21 - then i take name and i throw it in a
42:23 - list
42:24 - name
42:26 - so now i have name and it's a list right
42:29 - so now i want you
42:30 - to make a string
42:33 - have zero spaces in it
42:36 - and i want that information for you to
42:39 - put in there with no
42:42 - with no space is the list with the
42:44 - contents
42:46 - of that the contents of name now and i
42:50 - can do i can put anything in there
42:52 - i want a space so then i do join
42:57 - name
42:58 - i get which happen to be the characters
43:01 - of my name with a space in between now
43:04 - this is where it gets really handy
43:08 - i want to put an asterisk
43:10 - between
43:12 - all of the characters
43:15 - which happen to be my name
43:17 - and again it's whatever string you want
43:20 - it's a it's a uh
43:22 - it's a reverse split think about that
43:27 - all right
43:31 - yes it it it joins and it takes the
43:34 - contents of a sequence
43:37 - and then whatever here's the glue that's
43:40 - what i want you to think about because i
43:41 - remember the first time i was like well
43:43 - why isn't join a
43:46 - list method well it's not
43:48 - because you're using this string
43:52 - then that's a string and then this is
43:53 - the method for this string with this
43:56 - sequence
43:57 - there we go all right
43:59 - really good question
44:03 - okay
44:04 - uh let's see let's see let's see all
44:06 - right cool
44:07 - i was hoping we would get done
44:10 - and um
44:13 - uh
44:14 - shoot i did not mute the tablet i hope
44:16 - that isn't too too disturbing so i
44:18 - actually wanted to go over we're going
44:20 - to do a little bit of bonus stuff
44:23 - um
44:24 - so let's go over some things
44:26 - that
44:28 - just are random that i've had on my
44:31 - channel
44:32 - that
44:34 - um
44:37 - actually let me make sure that this is
44:38 - everything that i wanted to
44:42 - cover
44:43 - all right
44:45 - yes let me check these notes right here
44:51 - yep all right
44:52 - so you guys have maybe seen
44:56 - um packing
44:58 - packing and unpacking well i want to
45:00 - show you
45:02 - this let's comment that out
45:06 - so i want to show you how to unpack with
45:09 - a splat and zip
45:11 - so
45:13 - let me just show you this
45:16 - this is a little bit of bonus
45:18 - so we have we have two lists
45:21 - we have student
45:24 - we have grade the grade that they're in
45:27 - and we want to put them together
45:31 - so i want to zip them together
45:37 - classes equals list equals zip
45:41 - so i'm going to zip just like a zipper
45:43 - you put one side to the other so i'm
45:46 - going to zip these together student
45:49 - and grade
45:54 - so now i put this into memory
45:58 - and i have a new list object
46:01 - with tuples
46:03 - with
46:05 - and it zips it one
46:06 - after another so that is a very handy
46:09 - tool
46:10 - but
46:13 - but now what happens if i wanted to
46:16 - unpack this how would i go through i
46:18 - could go in and i could go and really
46:23 - where how it's like i could i could chop
46:26 - this up well i remember when i first
46:30 - saw this
46:31 - this was the coolest thing
46:34 - so new
46:36 - student
46:39 - students and grades
46:43 - so now
46:45 - i can literally use the same tool but
46:47 - i'm going to use a splat character
46:54 - splat
46:56 - classes
46:58 - so i'm going to pass this back through
47:01 - and this is how you literally
47:03 - unzip
47:06 - so now i just unzipped
47:10 - everything
47:11 - so now i have new students
47:15 - and i have grades
47:18 - i remember that was so i have grade and
47:20 - grades so i just didn't type the same we
47:23 - got new students and students
47:25 - now
47:26 - all right
47:27 - so that's that's bonus one
47:30 - and i was looking through the other day
47:32 - and i haven't done a very good job of
47:35 - showing you guys because it's basically
47:37 - kind of like the question of hey what in
47:39 - the world does that join do because
47:43 - you've never talked about it so now
47:45 - let's let's kind of look at some string
47:47 - stuff right here
47:53 - all right that's not the one i wanted to
47:55 - see i wanted to see this
47:57 - all right
47:59 - okay
48:04 - x equals when i have it help
48:06 - help
48:08 - all right put that into memory
48:11 - x
48:13 - endur
48:14 - on x
48:17 - i have all of these methods right here
48:21 - check this one out i remember the first
48:23 - time i was sitting this trying to solve
48:25 - this problem it was a just a silly thing
48:27 - to make to to to make you think about it
48:30 - help nope center we're already pulling
48:33 - up help
48:34 - okay
48:35 - ah
48:36 - return a centered string of a length
48:39 - okay
48:40 - so if i pass in center
48:44 - and if i give
48:46 - what
48:51 - let's see i can't remember let's do this
48:54 - what does it do
48:56 - is it in place or does it return
48:58 - it returns
49:00 - so we got one of two ways so x dot
49:03 - center
49:05 - center
49:07 - equals
49:09 - 50.
49:10 - and then what do i want to have around
49:11 - it let's do
49:13 - let's do
49:15 - that so now check this out
49:17 - so this is 50 characters and help is in
49:20 - the center
49:22 - okay that was one of the cool ones that
49:25 - i liked
49:26 - um let's see
49:28 - and we'll go we'll go over more oh well
49:30 - that's not what i wanted to do oh yeah
49:33 - sorry
49:33 - i forgot i was in a different
49:35 - application over here all right so now
49:37 - here's another one
49:40 - that i like a lot
49:43 - okay
49:49 - oops
49:50 - okay
49:52 - comment this out
49:54 - so now i have a list
49:56 - of names
49:58 - and
49:59 - digits
50:01 - integers
50:05 - okay
50:08 - now
50:09 - let's look at
50:11 - help
50:12 - dot
50:14 - dir dot str
50:17 - uh
50:18 - a i is uh what am i looking for
50:23 - is upper is title
50:25 - is digit
50:27 - is
50:30 - uh is space
50:35 - i'm looking for
50:37 - which one am i looking for
50:40 - is numeric that's what i wanted is as
50:42 - key is numeric so i want to create a
50:46 - list
50:48 - of
50:50 - name
50:51 - equals we're going to do some list
50:53 - comprehension here false
50:56 - if
50:57 - str
51:01 - i
51:04 - is
51:05 - numeric
51:07 - merrick
51:10 - else
51:13 - true
51:15 - for
51:18 - for i and x
51:23 - let's run this
51:25 - name
51:28 - so boom
51:29 - so now
51:31 - i go through
51:33 - and what i just did is i took
51:36 - we increment we we go i'm doing for
51:40 - i n
51:42 - x
51:43 - print i right
51:47 - so then what i did is i wanted to look
51:49 - at
51:50 - because this was a string
51:53 - and it went through and i wanted to know
51:55 - the reason why i did it like this is
51:57 - because
51:59 - it knows if this is a
52:04 - here integer integer but still
52:07 - that is an integer just an as key
52:11 - integer or numeric so that was that
52:14 - now i cannot remember
52:17 - if we have looked at
52:19 - the help the help prompt
52:22 - on
52:23 - on any of these streams
52:25 - jan
52:27 - uh
52:28 - cardinal do you guys remember if we have
52:30 - done the help prompt because i'm sure
52:33 - with out of out of these 400 so
52:36 - there are some people
52:39 - that
52:44 - uh okay so when you
52:49 - when you
52:51 - don't pass in
52:53 - an argument for help
52:56 - you get the help prompt
52:58 - and this is where python becomes
53:01 - extremely powerful
53:04 - so you can literally
53:06 - because this was kind of like
53:09 - my journey
53:11 - okay
53:12 - so then
53:14 - okay so then you start bouncing around
53:16 - and then you have
53:20 - built-ins
53:22 - up
53:24 - functions
53:26 - and then uh what am i thinking about
53:30 - oh
53:32 - keywords
53:33 - words
53:34 - there we go
53:35 - oh
53:36 - okay so if you've noticed that there's
53:39 - no way for you
53:41 - to run
53:42 - help
53:43 - on some things
53:45 - because you can run help on a function
53:46 - and on a method right
53:50 - then let's see what does four do oh
53:54 - so there is a lot of documentation
53:58 - on four
53:59 - okay so it goes through and it so you
54:02 - don't have to this is don't try to
54:04 - memorize anything
54:06 - understand
54:08 - what you want to do sorry hint okay so
54:10 - then we're talking about
54:12 - range
54:14 - okay so so now now you're going down
54:16 - this rabbit hole so what is four okay
54:18 - and it has a scenario range well what
54:20 - what's range
54:22 - okay
54:23 - and then i got 83 lines of range okay
54:26 - that that is the function okay so that
54:29 - is
54:30 - that is the function that has the stop
54:32 - or the three arguments so
54:35 - here's the two here's the optionals and
54:37 - we just go from there and you end up
54:39 - going down
54:40 - this
54:42 - rabbit hole keywords
54:45 - okay so what is this
54:47 - what is this while
54:53 - so then okay so i have this
54:56 - and then uh what it what is within i'm
54:59 - just bouncing around none what is none
55:01 - and don't don't confuse
55:05 - don't confuse this
55:07 - because that's not anything
55:10 - ah-ha
55:11 - so it's a none none none type
55:15 - so
55:16 - there we go guys uh that is
55:19 - i was really hoping i'd get to all of
55:21 - these things but this is a super
55:24 - important feature in fact
55:27 - that if you have a question
55:29 - and you can't get it answered
55:33 - anywhere
55:35 - jump over to my channel
55:37 - drop it in one of the comments
55:39 - hit up
55:40 - any one of us on discord
55:42 - and you're not in this you're not in
55:44 - this alone all right i believe in
55:47 - everything that code camp is doing what
55:49 - quincy's trying to do with bo
55:51 - uh running the youtube channel
55:53 - uh we are all to help you here in your
55:56 - python journey and the reason why i make
56:00 - the micro videos is because i remember
56:02 - the journey that i was on trying to
56:05 - learn
56:06 - programming and i was all over the place
56:09 - i'd see a video i'd do a video
56:11 - i would try to remember where i saw it
56:14 - every single topic that i've covered
56:16 - here so far is in a micro video over on
56:19 - my channel you're not going through this
56:22 - alone all right so i just wanted to say
56:24 - that
56:25 - if you're spending time doing this
56:27 - you're doing a very good job all right
56:29 - and free code camp is here uh i'm here
56:33 - you're not you're not dealing with this
56:35 - by yourself and you'll be able
56:38 - just sit down type
56:42 - solve some code write some code do a
56:44 - little bit of the time
56:45 - don't try to solve the whole problem at
56:47 - one time
56:48 - so all right guys there we go another
56:50 - great stream
56:52 - uh you guys are doing awesome i want to
56:54 - appreciate free code camp make sure
56:56 - you're
56:57 - subscribing to their channel as well
56:59 - joining if you can br buying any merch
57:02 - great organization
57:04 - wholeheartedly believe in everything
57:05 - that they are trying to do
57:07 - so
57:08 - there we go guys another awesome stream
57:10 - today
57:12 - and we will see you guys in two weeks
57:16 - thanks everybody