00:00 - in this course you will learn how to use
00:01 - python to automate everyday tasks such
00:04 - as creating an excel report sending text
00:07 - messages extracting tables from websites
00:10 - interacting with websites and more you
00:12 - will learn how to use a few python
00:14 - automation libraries over a series of
00:17 - projects frank andrade created this
00:19 - course frank is a data scientist and an
00:22 - experienced teacher make sure to check
00:24 - the description for a link to the code
00:27 - and an automation cheat sheet frank
00:29 - created for this course
00:32 - okay now let's see how to extract tables
00:35 - from a website
00:36 - in python we can use the pandas library
00:38 - to extract tables from websites like
00:40 - wikipedia as you can see here so here i
00:44 - have a list of the simpsons episodes in
00:47 - wikipedia and we can extract all the
00:49 - tables that you can see here so we only
00:52 - need to use the pandas library and i'm
00:54 - going to show you how to do this right
00:56 - now so we go here and i'm using jupyter
00:59 - notebooks right now and to install
01:01 - pandas first you have to write pip
01:04 - install pandas so in jupyter notebooks
01:07 - you have to use this exclamation mark
01:10 - but if you're using pycharm or the
01:12 - terminal just write pip install pendants
01:14 - all right once you install pandas we
01:16 - have to import it so we write import
01:18 - pandas and we write spd so pd represents
01:23 - pandas so first we import this and then
01:26 - to extract tables from websites we only
01:28 - have to write pd
01:30 - dot read underscore html so inside these
01:35 - parentheses we have to write the link of
01:37 - the website so here i open quotes and
01:41 - paste the link of this website which i
01:44 - copied before and now this is going to
01:46 - return a list so this list is going to
01:48 - have multiple tables because here in the
01:52 - website there are not only one but like
01:55 - 20 tables so we're gonna get like 20
01:58 - tables in a list so i'm going to name
02:00 - this list simpsons
02:02 - so this is my simpsons list and now i
02:05 - run this and we get these
02:08 - tables inside this list so let's see
02:10 - first how many tables are in this
02:12 - website so here i write land simpsons
02:15 - and here i run this and we have 23
02:19 - tables so let's get only the first table
02:22 - or actually the second because i think
02:24 - the second is
02:26 - the one that corresponds to the first
02:28 - season and as you can see here we have
02:30 - the second table which corresponds to
02:33 - the first season of the simpsons so we
02:35 - have here episode one two three and so
02:37 - on and if we go here we can verify that
02:41 - this is the same data so i have here
02:44 - season one and you can see that is the
02:46 - same data so we successfully extracted
02:49 - all the information in this table
02:54 - now let's perform some basic web
02:55 - scraping with pandas
02:57 - web scraping consists in extracting data
03:01 - from websites so instead of doing it
03:04 - manually we can automate it with some
03:07 - web scraping techniques and in this
03:09 - video we're going to extract csv files
03:12 - from a url using only pandas so here is
03:16 - the target website we're going to scrape
03:19 - and it's this one so this website
03:22 - contains data about football matches of
03:25 - different links so here you can see a
03:28 - lot of links and now i'm going to choose
03:30 - the first one that says england football
03:32 - results
03:33 - and here we're gonna see
03:35 - some data about premier league and other
03:38 - leagues that england has and if i want
03:41 - to download one of these files i will
03:43 - have to click on any of those and as you
03:47 - can see here i downloaded that csv file
03:50 - of the first listed here so this one
03:52 - corresponds to the season 21 22 and is
03:56 - from the premier league so
03:58 - instead of manually downloading each
04:01 - file we can use a specific pandas method
04:04 - to read these files from the internet
04:07 - and also by using the for loop we can
04:10 - automate this and download all the files
04:14 - that you can see here so instead of
04:16 - clicking one by one we can download all
04:18 - the files listed here so there are a lot
04:21 - of them
04:22 - and we can download it just with pandas
04:25 - and a for loop in python so let's do it
04:28 - here and now i'm going to show you how
04:31 - to extract data from a single csv file
04:35 - from this website
04:36 - so to do that we have to use the
04:40 - read underscore csb method so we write
04:43 - pd
04:44 - dot read
04:46 - underscore csv open parenthesis
04:49 - and we've used this method before but
04:52 - when we use it we read some data that
04:56 - was in the folder where we were working
04:59 - so in the folder where this jupyter
05:01 - notebook file was located but in this
05:04 - case we're not going to read anything
05:06 - inside our computer but we're going to
05:09 - read data that is in a website so
05:12 - instead of writing the path of the file
05:14 - in your computer in this case we're
05:17 - going to write that link of the file
05:19 - so here i'm going to show you
05:22 - this file has a link so if we want to
05:26 - download we have to make a request to
05:28 - that link to get that file so i'm going
05:31 - to show you here i'm going to right
05:33 - click and now i'm going to copy the link
05:35 - address so i copy and now i'm going to
05:39 - paste it here and now i press enter and
05:42 - let's see what's going to happen so i
05:44 - press enter and as you can see here
05:46 - instead of going to the website it
05:49 - downloaded the file so this means that
05:51 - this link
05:52 - contains the data we want to struct so
05:55 - we're gonna use this link so i'm going
05:58 - to copy again here
06:00 - copy i'm gonna make sure this is the
06:03 - address so copy link address and now go
06:06 - back here open quotes paste that link
06:09 - and this is the
06:11 - link we want to struct because it
06:13 - contains here that that csv so this
06:16 - means that this is a csv file and as you
06:19 - might remember
06:20 - we read here
06:22 - csp because we're using the read
06:25 - underscore csv method
06:27 - so that's everything you have to do to
06:29 - read this csv file that is stored in
06:32 - this website so now i'm going to run
06:35 - this
06:35 - and let's see the results so here as you
06:38 - can see all the data was
06:41 - read here with a read underscore csv and
06:44 - it was successfully loaded here so now
06:47 - i'm going to set here a new variable and
06:50 - it's going to be called df underscore
06:53 - premiere
06:54 - 21 and as you can see here this belongs
06:57 - to that 2122 season because here in the
07:01 - date it says 2021
07:03 - and also this is premier league because
07:05 - the teams belong to the premier league
07:08 - you may know if you're familiar with
07:09 - this competition but if you're not it
07:12 - doesn't matter
07:13 - so now let's continue so here i'm going
07:16 - to set this data frame to this variable
07:19 - so i press ctrl enter
07:21 - and now i'm going to show here this data
07:25 - frame that we
07:26 - saw already
07:28 - and now i'm going to rename some columns
07:31 - because some column names aren't so
07:34 - obvious so maybe you will struggle to
07:37 - understand what this column means for
07:40 - example
07:42 - and i'm going to rename some of them so
07:45 - let's do it here fast and we also
07:47 - practice that rename
07:49 - method so here i'm going to copy here
07:52 - now i write the name of the data frame
07:55 - dot rename open parenthesis and now we
07:59 - want to change the columns so i write
08:01 - columns
08:02 - equal to then open the dictionary and
08:06 - here the key is going to be
08:08 - let's say we want to change
08:11 - only the
08:13 - these two columns so i'm going to tell
08:15 - you what they mean
08:16 - so here i can write
08:19 - the name of the
08:21 - column we want to change then column
08:23 - then
08:24 - the value and now comma and now the
08:27 - second
08:28 - key or the second key
08:31 - value pair
08:32 - so here
08:35 - is the second element and now i'm going
08:37 - to paste this one so here it's
08:40 - the second you know
08:42 - this first
08:44 - fthg stands for
08:46 - final time home goals so it means all
08:49 - the goals are scored by the home team so
08:52 - i'm going to replace this name
08:55 - with the home underscore
08:58 - goals
09:00 - name and here is
09:02 - final time away goals so i'm going to
09:05 - write only a way underscore goals
09:09 - and that's it those are my new names now
09:12 - to update the column names i'm going to
09:15 - write in place equal to true
09:18 - now i run this
09:20 - and now i'm gonna show this
09:23 - data frame updated so now this column is
09:25 - named home underscore goals and this one
09:28 - is away underscore goals and that's it
09:31 - in this video we extracted a single csv
09:34 - file for my url with pandas
09:39 - all right now i'm going to show you how
09:40 - to extract tables from pdfs so here i
09:43 - have a pdf and we're going to track this
09:45 - table that you can see here so we can
09:48 - get this in another format for example
09:50 - i'm going to export this table to a csv
09:53 - format so i'm going to leave this pdf in
09:55 - the description so you can also extract
09:57 - the table from this pdf okay to extract
09:59 - tables from pdfs we have to install a
10:03 - library called game load so we open up
10:05 - the terminal and here we write pip
10:07 - install game load hyphen pi so you have
10:10 - to install this but before you install
10:12 - this library you have to install two
10:15 - dependencies which are tk so you write
10:18 - pip install
10:19 - tk and the other is ghost script so you
10:22 - have to write pip install go script and
10:25 - install these two libraries these are
10:27 - the two requirements before you install
10:29 - camelot so once you have these libraries
10:32 - we import game load writing import
10:35 - came load so we write this and now we
10:39 - can start using this library so first to
10:43 - read a pdf we have to use camelot
10:46 - dot
10:46 - read underscore pdf and here i'm going
10:49 - to write the name of this pdf which is
10:51 - full dot pdf and then i'm going to
10:54 - specify which page i want in this case i
10:57 - want the first page and here you can add
10:59 - another parameter for example here there
11:01 - is the flavor parameter and this is the
11:04 - parsing method to use this is set to
11:07 - lattice by default but in case you
11:09 - failed to extract the table from your
11:12 - pdf you can set it to a stream so maybe
11:15 - with the stream it works much better so
11:17 - i'm going to leave it with a default
11:20 - value and now i'm going to set this to a
11:22 - variable name table so equal to tables
11:25 - and now let's see what's inside these
11:27 - tables variables so i print these tables
11:30 - and now let's see the content so here we
11:33 - see that we have a table list and we
11:36 - have n equal to one and this represents
11:38 - that there is only one table in this
11:42 - page number one and that's exactly what
11:45 - we have there is only one table in our
11:47 - pdf so great now let's export this table
11:51 - to a csv file so to do that we have to
11:54 - write tables that export and then
11:58 - write the name of the csv file we want
12:00 - to export to so right foo that's csv
12:04 - and this is just a name i'm writing
12:06 - right now and now i set the format to
12:10 - csv
12:11 - and then set compress equal to true okay
12:14 - now in case you have many tables you
12:17 - want to pick one table in particular in
12:20 - my case i only have one table so i'm
12:22 - going to pick the first table and i'm
12:24 - going to export the first table using
12:26 - tables with square brackets 0 which
12:29 - represents the first table so now to csv
12:32 - and now inside foo that's csv
12:36 - and with this we export the first table
12:38 - to a csv file so now we only have to run
12:41 - this and now in my working directory i
12:43 - have a new file named full.csv so now
12:47 - i'm going to check it out and as you can
12:48 - see here i have the data and here is in
12:51 - csv format and we can verify that this
12:55 - is the same data i have before in the
12:58 - pdf so it's exactly the same but now in
13:01 - csv format and that's how you struck a
13:03 - table from a pdf
13:06 - in this video we'll learn some html
13:09 - basics that will help us when scraping a
13:12 - website
13:13 - html stands for hypertext markup
13:17 - language and is one of the most basic
13:20 - tools used to build websites
13:23 - it defines the meaning and structure of
13:26 - web content although we're not going to
13:28 - build a website in this course it's
13:31 - important for us to get familiar with
13:33 - the basics of html
13:36 - this will help us understand the code
13:38 - behind a website as a result we will be
13:41 - able to find the best approach to scrape
13:44 - a website and get the data we want now
13:48 - let's review the html markup syntax
13:51 - the first element in purple we see on
13:54 - screen is a tag
13:55 - they are hidden keywords within a web
13:58 - page that define how a web browser must
14:02 - format and display the content most tags
14:06 - must have two parts an opening and a
14:09 - closing part for example
14:11 - the h1 tag is the opening tag
14:15 - and h1 with the slash is the closing tag
14:19 - note that the closing tag has the same
14:22 - text as the opening tag but has an
14:25 - additional forward slash character a few
14:28 - tags like the img tag that stands for
14:31 - image
14:32 - are an exception to this rule because
14:35 - they don't need a closing tag
14:37 - there are plenty of tag names and will
14:40 - review the essential tags for web
14:42 - scraping a bit later the second element
14:44 - we see is the tag attribute
14:47 - attributes allow us to customize attack
14:50 - and are defined within the opening tag
14:53 - for example the h1 tag contains
14:56 - an attribute named class attributes are
14:59 - often assigned a value using the equal
15:02 - sign the attribute value in this example
15:06 - is title finally we have the affected
15:09 - content which is what we usually see in
15:11 - a website
15:12 - it can be a text for example like a
15:15 - title of an article it's cool like that
15:19 - because it's affected by the tag and
15:22 - attributes defined so all of this is
15:25 - known as an html element or node great
15:29 - so far we've learned some of the basics
15:32 - of html now it's time to see some of the
15:35 - most important tag names for web
15:37 - scraping so let's start with some of the
15:39 - most common tag names
15:42 - the first is the head tag this
15:44 - represents the head section and it's
15:47 - used mostly for metadata then we have
15:50 - the body tag
15:52 - this establishes the body of an html
15:55 - document and the third html tag you see
15:58 - on the screen is the header tag
16:01 - not to be confused with the head tag the
16:03 - header tag typically contains
16:06 - introductory content and layout that
16:09 - goes above the body let's see these
16:12 - three tags in action in a website that
16:14 - we're going to scrape later in this
16:16 - course first let's inspect this website
16:19 - so right click and select the inspect
16:21 - button after this you should get the
16:24 - html code of the website so scroll app
16:28 - and go to the head tag as you can see on
16:31 - the screen so this is the head which
16:33 - doesn't represent anything at all but if
16:36 - you go to the body you'll see that all
16:38 - the website will be highlighted in blue
16:42 - and then if you select the header you'll
16:45 - see a section of the website highlighted
16:48 - in blue which is where the logo goes
16:52 - next we have the article tag this tag is
16:55 - new in html5
16:57 - and this tag can be used to contain
17:00 - block entries
17:01 - posts etc then we have the p tag which
17:05 - includes paragraph in an article and
17:08 - then we have the h1 h2 or h3 tag which
17:13 - are level headings so h1 is level one
17:17 - heading which is the headline or title
17:19 - of a page
17:21 - and h2 is the level two heading so the
17:24 - subtitle of a page and so on in this
17:27 - website we can see the article tag the
17:30 - h1 tag and the p tag so the first
17:33 - contains the whole article
17:36 - and h1 contains the title of that movie
17:40 - and finally the p tag contains the plot
17:43 - of the movie the following tags you're
17:46 - going to see really often when scraping
17:48 - websites and you should at least
17:50 - recognize them to find the best way to
17:52 - scrape a website first there is a div
17:55 - tag which is a divider or a kind of
17:58 - generic container then there is the nav
18:02 - tag which is used for specifying a
18:05 - navigational region within a document
18:08 - like the pagination bar then we have the
18:11 - li attack which represents a list item
18:15 - with an order list or an order list and
18:19 - then we have the a tag a for anchor
18:23 - also known as
18:25 - hyperlink or simply a link to make an
18:28 - actual link using the a tag we use the
18:32 - href attribute for example in this
18:34 - website we see many movies listed in a
18:37 - table
18:38 - we see that this is inside a ul tag
18:42 - which contains a a tag which is the
18:45 - anchor
18:46 - and inside it is the li tag which is the
18:50 - list item tag as we can see the a tag
18:53 - has the href attribute that contains the
18:57 - link that redirects to another page so
19:00 - now you can see how
19:01 - they relate to each other in this html
19:05 - document let's see the last six tags i
19:08 - listed here
19:09 - so first we have the button tag
19:12 - so this one specifies a button that can
19:15 - be clicked it's commonly used with forms
19:19 - then we have the table tag that is used
19:22 - for making tables in an html page
19:25 - then is that td tag which stands for
19:28 - table data this represents a data cell
19:31 - within a table then we have the tr tag
19:34 - which stands for table row element this
19:38 - tag defines a row of cells in a table
19:41 - and then we have the ul
19:44 - tag which is an ordered list this one is
19:47 - used with the li tag to make an order
19:50 - list to see this last text in action
19:54 - let's check this website that contains
19:57 - data inside rows in a table so as you
20:01 - can see here we have the tr tag which
20:04 - represents row and then we have the td
20:07 - tab which represents each element of
20:10 - data then i scroll up and i got the
20:14 - table tag which is the whole table that
20:17 - contains a group of data the last tag i
20:19 - want to show you is the iframe tag
20:22 - this one makes it possible to embed
20:25 - another page within a page in html5 this
20:29 - is known as nested browsing
20:31 - this iframe thing makes sometimes web
20:35 - scraping a little tricky so sometimes
20:38 - you have to switch between one frame to
20:41 - another frame but that's not in all the
20:44 - websites so you have to recognize
20:47 - whether the website you are scraping has
20:50 - multiple iframes or everything is
20:53 - contained in just one iframe
20:57 - before we start writing some code let's
21:00 - review some html basics first here's the
21:03 - website we're going to analyze
21:05 - i chose this website for its simplicity
21:08 - so you can successfully scrape your
21:10 - first website
21:12 - the website has three main
21:14 - sections the title
21:17 - the plot description and transcript
21:20 - now let's have a look at its html code
21:23 - here i wrote a short html code version
21:27 - of the website that contains transcripts
21:29 - of thousands of movies
21:32 - now if you've never seen html code
21:34 - before you will still recognize some
21:37 - text elements like the title description
21:40 - and transcript
21:42 - in this case we're looking at the
21:44 - transcript of the movie titanic so
21:47 - that's why the title is there
21:50 - besides that element something you will
21:53 - always see in html code are tags
21:57 - tags are those words surrounded by
22:00 - brackets
22:01 - there are
22:02 - opening and closing tags for example in
22:05 - this html code we have four texts
22:09 - article h1 p and div
22:13 - each of them represent a node and we'll
22:16 - see them in detail in the following tree
22:18 - structure
22:20 - the two structure will help us come up
22:23 - with effective ways to scrape a website
22:25 - and also will be the foundation for
22:28 - xpath that we'll use later in this
22:31 - course now let's start building this
22:33 - tree the first element of the tree is
22:36 - the root in this case the root is the
22:39 - article element
22:41 - as we've seen in the html code before
22:44 - this article tag has an attribute called
22:49 - main article this root element also
22:52 - contains that h1 tag
22:54 - that contains at the same time the text
22:57 - titanic which is the title of the movie
23:00 - another element inside the root is the p
23:03 - element in this case this has an
23:06 - attribute and a text
23:08 - the attribute is named plot and the text
23:12 - is the plot description
23:14 - finally we have the div element this
23:17 - element has also an attribute called
23:20 - full script and text with the transcript
23:23 - of the movie
23:25 - all the rectangles you see on this tree
23:27 - are called nodes
23:29 - every node has exactly one parent except
23:33 - the root
23:34 - the h1 node's parent is the article node
23:39 - siblings are nodes with the same parent
23:42 - an element node can have zero one or
23:46 - several children
23:48 - but attribute and text nodes
23:50 - have no children
23:52 - for example p and if have two child
23:55 - nodes but not type elements
23:59 - now something very important in this
24:01 - tree is the attribute element because
24:04 - they will determine the approach to take
24:07 - to scrape a website
24:09 - in this example you see only classes
24:12 - like main article plot
24:15 - and full script
24:17 - however you can also find ids and odors
24:23 - in this video we'll learn how xpath
24:26 - works
24:27 - xpath is key to easily learn web
24:30 - scraping with selenium and scraping so
24:34 - let's start
24:35 - xpath stands for xml path language
24:39 - xpath is a query language for selecting
24:42 - nodes from an xml document but we can
24:46 - also use it to select elements from html
24:49 - pages another way to select elements
24:51 - from websites is using css selectors
24:55 - css stands for cascadian style
25:00 - so it's a language that was mainly
25:02 - created to style html web pages css and
25:06 - xpath have some similarities in their
25:09 - syntax
25:10 - however in this course we'll mainly see
25:13 - how to select elements with xpath
25:16 - because of its simplicity now let's
25:18 - review the expat syntax
25:20 - with xpath we can select an element by
25:23 - using the double slash and then we write
25:26 - the element name this is the most basic
25:29 - way to locate an element or node for
25:32 - example if you want to select all the h1
25:34 - elements in an html page we do double
25:38 - slot
25:39 - h1
25:40 - this double slash is a special character
25:43 - in xpath that means
25:45 - pick a matching note that is located at
25:48 - any level within the xml document
25:51 - we're going to see the meaning of this
25:54 - in other special characters in detail in
25:57 - the next video
25:58 - now we can select an element based on
26:01 - its position by using the square
26:03 - brackets
26:04 - let's imagine that there are two h1 tags
26:06 - in the page
26:08 - you will pick the first writing the
26:10 - expat expression double slash h1 plus
26:15 - one inside square brackets
26:17 - and you will pick the second h1 tag with
26:21 - double slash h1 and the number two
26:24 - inside square brackets now we can also
26:27 - specify the attributes adding square
26:30 - brackets and writing inside the
26:33 - attribute name
26:34 - this is the standard version of an
26:37 - it starts with double slash followed by
26:40 - the tag name
26:41 - square brackets the add sign
26:44 - and the attribute name like class id and
26:48 - so on then we write that equal sign then
26:53 - quotation marks and inside the quotation
26:56 - marks that attribute value
26:58 - this is how we build an average expat
27:01 - expression we can also use some
27:04 - functions to find specific values for
27:07 - example the startswith function will
27:10 - search for text at the beginning while
27:13 - the contain function will search for
27:16 - text included inside an element in this
27:19 - example i included that contains
27:22 - function
27:23 - inside the xpath expression
27:25 - so as you can see we have to include
27:28 - parentheses to wrap the attribute name
27:31 - and attribute value we also have to use
27:35 - the comma to separate the attribute name
27:38 - and attribute value instead of the equal
27:42 - sign you can also use the end or logical
27:45 - operators with expat expressions
27:48 - they should be placed inside the square
27:51 - brackets and every time you use
27:53 - operators include a parenthesis for each
27:56 - xpath expression we'll see how functions
27:59 - and operators work in action using a
28:02 - small html code in the next video
28:07 - now it's time to test some expat
28:09 - expressions
28:11 - with this small html code we've been
28:13 - using so far
28:15 - i'm gonna leave the html code i'm using
28:18 - with the link of this website in the
28:20 - description so you can play with it and
28:23 - understand how xpath works
28:26 - so as you can see this is a small html
28:29 - code of the titanic transcript we've
28:32 - seen before
28:33 - so
28:34 - this
28:35 - html code is going to help us understand
28:38 - what we've learned of xpath so far
28:42 - so as you can see there is the title the
28:45 - plot description and the small
28:47 - transcript i wrote
28:49 - so you can test the expat expression in
28:52 - that bar for example i'm going to write
28:55 - double slash and then write the tag name
28:58 - h1
28:59 - so as you can see here the result it
29:02 - includes the h1 that is the title
29:06 - titanic
29:07 - 1997
29:09 - and if i want the text i can just write
29:13 - slash and then text with parentheses
29:16 - this is one way to get the text but
29:18 - there are many ways to get text with
29:21 - selenium or with scraping i'm going to
29:23 - show you how to do it later so now let's
29:27 - test some other expat expression so
29:30 - let's try the p which is the paragraph
29:33 - tag
29:34 - so now i write p and i got two results
29:38 - because i include two plot elements now
29:41 - let's try double slash div and now let's
29:44 - get the text inside it so we get the
29:48 - transcript of this movie which is just a
29:51 - small
29:52 - phrase of the movie
29:54 - and
29:55 - now let's try some other expression so i
29:59 - write double slash and p so i get two
30:02 - results because i have two plots so if i
30:06 - want to specify one element in
30:08 - particular i have to open square
30:10 - brackets and inside i have to write the
30:13 - number so
30:14 - for example if i write one it means the
30:17 - first element or the first p element
30:20 - which is the first plot that contains 84
30:24 - years later and if i write two it's the
30:27 - second plot that contains the text in
30:30 - the end and that's it
30:32 - so so now let's write div to test that
30:36 - average expat expression so now i write
30:39 - that add sign
30:40 - and then class
30:42 - and then
30:43 - open quotes and write full screen so
30:47 - this is going to be the expat expression
30:50 - of the transcript element so this
30:53 - represents the full script element and
30:56 - we just
30:57 - use the expat expression with the div
30:59 - tag the class attribute name and the
31:03 - full script attribute value as we've
31:05 - seen before
31:07 - so now if i want the text i just write
31:09 - slash and text with parenthesis and we
31:12 - just get the text now let's delete all
31:15 - the text values and just leave the
31:18 - the sign elements of the expat
31:21 - expression like the double slash the
31:24 - quotes square brackets and the add sign
31:27 - so this is the bones of the expat
31:30 - expression and now i'm going to write
31:31 - the p tag
31:33 - class and now the value plot
31:36 - so as you can see i get one element
31:38 - because i just have one expat with these
31:42 - conditions and now let's test some
31:44 - logical operators
31:46 - so to do so i'm going to include
31:49 - parentheses and then copy this
31:52 - write or and then paste this expression
31:55 - so i'm saying
31:56 - locate an
31:58 - element that contains the class plot or
32:01 - the class plot2 so either one or the
32:05 - other so as you can see in the result i
32:07 - get two results that tell us that both
32:11 - elements satisfy these conditions now if
32:14 - i write and instead of or
32:17 - i will get no result because there is no
32:20 - element that satisfies both conditions
32:23 - so let's now try the contains function
32:27 - so i delete one expat expression and now
32:31 - just one remains so i'm going to write
32:34 - inside the square brackets the word
32:37 - contains and instead of writing the
32:40 - equal sign i'm going to replace it with
32:43 - the comma as you can see it says that at
32:46 - least it should has two arguments so i'm
32:49 - going to replace that equal sign with
32:51 - the comma so as you can see i get two
32:54 - results because both elements contain
32:57 - the word plot
32:59 - inside the attribute name so that's why
33:02 - i get to results this contains function
33:06 - will still work if i change the expat
33:09 - expression so let's change the p tag for
33:12 - div
33:14 - and also let's change the plot
33:17 - attribute value for script so now i get
33:21 - that transcript element which is the
33:24 - full script and that's how you use the
33:27 - contains function with expat expressions
33:30 - and that's it now it's your turn to test
33:33 - any xpath you want with this html code
33:38 - now it's time to see some special
33:41 - characters that will come in handy when
33:43 - writing expat
33:45 - this lesson will be extremely useful to
33:48 - build robust expat expressions that will
33:51 - efficiently locate any element we want
33:55 - first we have the single slash character
33:58 - this one selects the children from the
34:01 - node set on the left side of this
34:03 - character
34:04 - in contrast the double slash specifies
34:08 - that the matching note set should be
34:10 - located at any level within the document
34:13 - for example if we write double slash
34:16 - article we'll get any descendant node in
34:19 - the html tree
34:21 - in this case the root is the only that
34:23 - matches
34:24 - now if i add slash h1 i get the
34:28 - immediate h1 element in this case the
34:31 - movie title
34:33 - if i add
34:35 - slash p
34:36 - i get the 2p elements and if i add slash
34:40 - div i get the transcript on the other
34:43 - hand if we want to get the text we
34:45 - should write text and parenthesis
34:50 - however if we add only a single slash we
34:53 - won't get the text we want because it's
34:55 - not the child node of article
34:58 - so what we have to do is to write first
35:01 - the element that contains the text
35:03 - for example if we write slash h1 before
35:07 - slash text parenthesis we should get the
35:10 - title
35:13 - also you can get the text using double
35:16 - slash text and parenthesis because
35:19 - double slash locates an element located
35:23 - at any level within the document
35:26 - then we have the dot character this
35:28 - specifies that the current context
35:31 - should be considered as a reference so
35:34 - it refers to the present node then we
35:37 - have the double dots which refers to
35:39 - apparent nodes sometimes it's difficult
35:42 - to find an element in a website but if
35:45 - you find its children you can use this
35:48 - special character to find the parent now
35:51 - i have a double slash h1 that matches
35:54 - the title let's see what happens if i
35:56 - add single slash and period
35:59 - as you can see i still get the same
36:02 - element because period returns the
36:04 - current node however if i write now
36:07 - period twice the parent node will be
36:09 - returned in this case the part note of
36:12 - h1 is article unfortunately in this
36:15 - xpath playground page you can see it
36:18 - clearly but if we go to the actual page
36:21 - and inspect it then press ctrl f to text
36:25 - path and write the same x path so first
36:27 - double slash h1 and then add that twice
36:31 - you will see that only the article
36:33 - element that is the parent node will be
36:36 - highlighted in green
36:38 - now we have the asterisk character which
36:41 - is a wild card character that selects
36:44 - all elements or attributes regardless of
36:47 - names as an exercise try to guess what
36:51 - these characters mean together you can
36:53 - pause the video to figure it out if you
36:56 - want so these
36:58 - characters together select all the
37:00 - children notes considering the current
37:02 - context this means that all the children
37:05 - elements will be matched so this is the
37:08 - opposite of that double dot character
37:10 - that gives you the parry node now let's
37:13 - test the asterisk character if i write
37:16 - double slash article and then slash
37:20 - asterisk i get all the notes inside
37:23 - articles so as you can see there is the
37:26 - h1 node the p node
37:28 - and the
37:29 - div node that contains that transcript
37:31 - now as you can see we obtain all the
37:34 - elements inside now if i add slash text
37:38 - parenthesis i get all the text inside
37:41 - these elements
37:43 - finally we have some characters we've
37:45 - already seen
37:47 - so first there is the add sign which
37:50 - selects an attribute then we have the
37:53 - parenthesis that it's used for grouping
37:57 - and expat expression
37:59 - and the last one is the square brackets
38:01 - with the number inside which indicates
38:04 - that the node with an index n should be
38:07 - selected and that's it you just learn
38:10 - many special characters use them wisely
38:13 - to build better expat expressions
38:18 - to scrape websites with selenium first
38:20 - you have to download chrome driver and
38:23 - install selenium to download chrome
38:25 - driver just go to
38:27 - chromedriver.chromium.org
38:30 - and in the download section you will
38:32 - find this page
38:34 - here you will find the current releases
38:36 - of chrome driver and you have to choose
38:39 - the one that corresponds to the version
38:41 - of the google chrome you're using to
38:44 - know which version is the right for you
38:47 - just go to this three dots button on the
38:50 - upper right corner and click on it and
38:53 - inside help click on about google chrome
38:57 - here you will see the version of google
39:00 - chrome that you have installed so in my
39:03 - case i have installed version 92 so i'm
39:06 - going back to the other tab and now i'm
39:09 - going to choose chromedriver92
39:12 - but in your case you have to choose the
39:14 - one that corresponds to your chrome
39:16 - driver so i click on chrome driver 92
39:20 - then you see options for different
39:22 - operating systems so you'll see linux
39:24 - mac and windows in my case i have a mac
39:28 - so i'm going to download mat64 so i
39:31 - click on it and then it's going to start
39:34 - downloading the file once the file is
39:36 - downloaded unzip the file and remember
39:39 - the path where you're leaving this file
39:41 - because we're going to use this path
39:43 - later now it's time to install selenium
39:46 - so you can install inside pycharm so
39:49 - just open python and then go to the
39:52 - terminal located on the bottom so click
39:55 - on it
39:56 - and after that just write pip
40:00 - install
40:01 - selenium
40:03 - and after this just press enter and
40:06 - after this you'll have selenium install
40:09 - another way to install selenium is just
40:11 - opening the terminal or the command
40:14 - prompt in my case i'm gonna open the
40:16 - terminal and once you have the terminal
40:19 - just activate your virtual environment
40:22 - and then write pip install
40:25 - selenium
40:27 - and
40:27 - press enter and then selenium will be
40:30 - installed on your machine and that's it
40:35 - in this video i'm going to show you how
40:37 - to automate this website so we can
40:39 - extract
40:40 - the titles and subtitles that you can
40:43 - see here in the news so we're going to
40:45 - struck these titles and subtitles of
40:48 - each card so we don't have to visit this
40:52 - website every time we want to read the
40:54 - news but we only check our txt file
40:58 - and see the titles and subtitles and we
41:01 - can see which is the most interesting
41:04 - news for us so let's go to pycharm and
41:07 - the first thing we're gonna do is to
41:09 - create a driver a driver allows us to
41:12 - interact with this website through
41:15 - selenium so
41:17 - let's do this so first we have to import
41:20 - what driver so we're right from selenium
41:24 - import
41:26 - web driver so that's the first thing we
41:28 - do and after that we have to make
41:32 - another import so we have to write from
41:36 - selenium.webdriver.chrome
41:41 - that service import
41:43 - service so
41:45 - in selenium 4 we have to make this extra
41:48 - import which is something we didn't need
41:51 - in selenium 3 but for selenium 4 which
41:54 - we're using right now we need this extra
41:56 - import so let's continue this
41:59 - and now let's define the website and the
42:03 - path that we're using so first the
42:05 - website
42:06 - that we're going to automate in this
42:09 - case is this website i chose
42:12 - which is all about football and
42:15 - i just copy and paste it so here's the
42:17 - website and now the path
42:20 - so the path is where you downloaded that
42:23 - chrome driver so in the previous video
42:26 - you downloaded a chrome driver and you
42:29 - have to copy and paste the path of that
42:32 - file so just copy and paste it so i'm
42:35 - just gonna paste the path of my chrome
42:38 - driver here and now let's define the
42:40 - driver so i write driver equal to
42:44 - webdriver
42:46 - dot chrome
42:48 - and open parenthesis
42:50 - in previous versions of selenium that
42:52 - was enough to create a driver but on
42:55 - selenium 4 we have to do an extra step
42:58 - which is
42:59 - creating a service so here i'm gonna
43:02 - write service
43:05 - equal to and here use this
43:08 - service that i imported here so i just
43:10 - copy and paste
43:12 - and
43:13 - now i have to
43:15 - write executable path equal to
43:18 - path so
43:20 - this
43:21 - executable underscore path argument is
43:23 - equal to the path that we defined here
43:27 - and after this we have to define the
43:29 - service parameter
43:31 - inside this chrome
43:33 - uh this scroll method and equal to
43:36 - service
43:37 - so basically
43:39 - it's first we define a service
43:42 - uh we say
43:44 - executable path equal to path
43:46 - and then we
43:48 - uh define here in the service parameter
43:51 - we set it this equal to surface which is
43:53 - this one that we defined before and now
43:56 - we can open a driver by writing
43:59 - driver.get
44:01 - and inside parentheses we write website
44:04 - so
44:04 - driver.get
44:06 - website and if we run this
44:09 - we're gonna open uh
44:11 - chrome driver or just
44:13 - the chrome browser as you can see here
44:15 - here it says that chrome is being
44:17 - controlled by automated test software
44:20 - and this is not the browser i had before
44:23 - the one i opened before that i showed
44:26 - you before is here so this is the one i
44:29 - open manually uh with chrome but this
44:32 - one is one that the one that selenium
44:35 - opened
44:36 - by itself so automatically so we're
44:39 - gonna
44:39 - automate this uh this website and we're
44:43 - gonna do that on the next video
44:47 - all right in this video i'm gonna show
44:49 - you how to extract the title and
44:51 - subtitle of this news
44:53 - so
44:54 - first to extract that title and the
44:56 - subtitle and all the data in any website
44:59 - that you visit you have to right click
45:02 - on any blog space and select that
45:05 - inspect option so i select on inspect
45:08 - and now we have these
45:10 - developer tools open so this tab that we
45:14 - just opened is developer tools and here
45:17 - it contains all the html elements that
45:20 - is behind this website so you can see
45:24 - here that we have many elements and they
45:26 - represent
45:27 - uh the elements in the website
45:30 - so now i'm gonna click on this option or
45:33 - this button on the left
45:35 - the one that is here and i'm gonna
45:37 - select a specific element that i want so
45:41 - here
45:42 - let's select this element that is here
45:44 - uh on the right that i'm
45:47 - i'm hovering on right now so i'm gonna
45:50 - right click i'm gonna click on this
45:52 - element that is here
45:54 - on the left and then i'm gonna drag to
45:56 - this element that is here so this is a
46:01 - card of add news and there are many so
46:04 - i'm going to choose this one in
46:06 - particular just to work with this so i
46:09 - click
46:10 - and now we have this
46:12 - element in blue so it's selected this in
46:15 - the developer tools and this indicates
46:17 - that this is the html element that is
46:20 - behind this card and as you can see
46:22 - every card contains a title and a
46:25 - subtitle
46:26 - and
46:27 - this one here too contains a title and a
46:30 - subtitle and this one the big one here
46:33 - also a title and a subtitle and now
46:35 - let's check out other elements here in
46:37 - the developer tools so
46:40 - we have now this element in blue but we
46:42 - can go up and see this div element so we
46:46 - have before this a element but here we
46:49 - have now the div element and this one
46:51 - represents i think the folder of this
46:53 - news
46:54 - and if we go up we can see
46:57 - let's say a small container that only
46:59 - contains the
47:00 - title and subtitle and if we go up we
47:03 - see
47:04 - the container that only contains that
47:07 - image of the news
47:09 - so basically that's how it works and
47:12 - also here this is the element let's say
47:14 - the parent element and this one contains
47:17 - the whole thing
47:18 - so i'm gonna use this one in particular
47:20 - to locate this card and not only this
47:24 - one but all these cards because they
47:27 - represent or they have the same pattern
47:29 - so i'm gonna build an expat that locates
47:33 - this element and to do that we have to
47:36 - press ctrl f here in developer tools
47:39 - and once we press this
47:42 - we have this option that allows us to
47:44 - find an element by its xpath so here we
47:48 - have to build the xpath which basically
47:50 - consists of a tag
47:54 - attribute and the attribute value and
47:57 - now let's create this x path so i'm
47:59 - going to copy the attribute volume
48:01 - because it's a bit long and i might
48:03 - forget and now to create this xpath i
48:06 - only have to write double slash
48:09 - then the name of the tag which is div
48:12 - then open square brackets and here i
48:15 - uh write this add sign and then the name
48:18 - of the attribute which is class then
48:22 - equal to
48:23 - double quotes or single quotes and now i
48:26 - paste that element that i had before and
48:28 - as you can see this element is now
48:30 - highlighted in green
48:32 - now this is great we have the whole card
48:34 - selected but on second thought i think
48:37 - it's much much better if we only select
48:40 - the text because here now we have not
48:42 - only the text but we have the image
48:45 - of the news but we only want the text
48:48 - because that's what we're going to
48:49 - extract so
48:51 - to do that i'm going down here and this
48:54 - one represents the the image as you can
48:56 - see here
48:57 - and i'm going down one more time and
49:00 - this element represents only the text so
49:04 - i'm going to replace the value
49:06 - of this attribute and i'm going to paste
49:09 - it here so we only obtain that element
49:12 - and not
49:13 - the whole thing so
49:15 - here i paste it and now i have this
49:18 - element which is well first we have this
49:21 - one because this is the first element on
49:23 - the on the website and then we have this
49:26 - one so this is the one we were working
49:29 - with and well we also have this one and
49:32 - this one and by the way here in this
49:34 - option we can navigate through all the
49:37 - elements that were found so as you can
49:39 - see not only this element represents
49:41 - this x path but also all the news that
49:44 - you can see in this website
49:46 - so let's go back to this one and as you
49:49 - can see here we only have the
49:51 - title and the subtitle so only the text
49:55 - great now let's copy this x path and
49:57 - let's go back to pirate charm and what
50:00 - i'm going to do is paste this xpath
50:03 - and now
50:04 - i'm going to
50:05 - write
50:06 - driver dot and here i'm going to use a
50:10 - method called find element so i choose
50:13 - this one and
50:15 - this has two parameters
50:17 - by
50:18 - and
50:19 - also volume
50:21 - which i just
50:23 - wrote here so buy and value the first
50:26 - one is the method that we're using to
50:28 - locate this element in this case it's an
50:31 - expat because we just build the xbox as
50:34 - you can see here
50:35 - and in the value is the value of the
50:38 - xpath so i'm just going to copy and
50:40 - paste
50:42 - and well it's here but as you can see
50:45 - there is a conflict because we use
50:47 - uh double quotes here for this expat and
50:50 - also here for the value so it's like
50:53 - conflict so i'm gonna press ctrl z
50:56 - and i'm gonna use single quotes to avoid
50:58 - that conflict so now i paste and we have
51:01 - this
51:02 - so this is great now we have uh this
51:06 - element and with this we are supposed to
51:08 - get the element that is here so the text
51:12 - title and subtitle here there are
51:14 - different methods that you can use you
51:16 - can also use the id or the class or any
51:20 - other attribute but we're going to use
51:23 - mostly xpath in this course great now
51:26 - before we move on here we have to modify
51:28 - this method so
51:31 - we shouldn't use find element because
51:34 - here if we just find element we're gonna
51:36 - get only the first element in this
51:38 - website so as you can see here
51:41 - on the bottom
51:42 - there are 50 elements that were found
51:44 - with this expat so
51:46 - we can navigate here with this uh these
51:50 - arrows we can navigate from the first
51:53 - element to the last element and if we
51:55 - use only find element in singular we're
51:58 - gonna get only the first element in this
52:01 - list so this one the one that you see
52:04 - right now so this one here that's the
52:06 - only element that we're gonna get and we
52:09 - don't want that we want all the elements
52:11 - in this
52:12 - uh website that all the elements that
52:14 - were found so to do that we have to use
52:18 - uh the find elements method so in plural
52:21 - with the s so
52:23 - now we're gonna get all the elements
52:26 - that are found with this expat so great
52:29 - now we have this and i'm going to set
52:31 - this
52:32 - equal to
52:33 - containers
52:35 - so this is my variable and now let's
52:38 - move on here and now that we have this
52:42 - expat i'm going to show you something
52:44 - else
52:45 - that we can do so
52:47 - let's go back to the element that we had
52:49 - before which is
52:51 - this one
52:52 - and great now we have this element which
52:54 - is in green
52:56 - and
52:56 - we have the whole
52:58 - let's say the whole container but we
53:01 - only want the title or we want the title
53:04 - and subtitle separately so we don't want
53:06 - to extract them together but in
53:08 - different variables so what we have to
53:11 - do is just to open this uh element here
53:14 - we can click here and open the elements
53:17 - that are inside this element so to see
53:19 - the children of this
53:21 - element so we open this one and we see
53:23 - that there is this a element
53:26 - and we still don't get the title and the
53:28 - subtitles separately so we click one
53:31 - more time here
53:33 - and now we have this h2 and this p
53:36 - and we can see that this h2 represents
53:38 - the title and the p represents the
53:40 - subtitle with this we can get the
53:42 - subtitle and the title separately so we
53:46 - only have to build the expat and to get
53:49 - to these elements and to get this xpath
53:52 - we only have to add this slash which
53:55 - says hey give me that immediate note and
53:59 - we only have to write that a because
54:02 - uh the a is that immediate node that
54:06 - follows this div so we have to write a
54:09 - and as you can see here we have this
54:12 - uh a
54:13 - followed by this div so it's like a
54:15 - sequence we have first the div and we
54:18 - have now the a
54:19 - now we write this slash again and now we
54:23 - have to get to this h2 because this one
54:26 - represents that title so we write slash
54:29 - and now one more time we write h2
54:32 - so
54:34 - this is basically the sequence first is
54:36 - div then is a and then is h2 and we use
54:40 - this single slash because we want to get
54:43 - only the
54:44 - the immediate node so everything is
54:47 - perfect so div a and h2 and if we
54:51 - navigate here with these arrows we can
54:53 - see that we get all the titles in this
54:55 - website so everything is perfect so
54:58 - let's just copy this xpath
55:01 - and now let's paste it here on pirate
55:04 - charm so i'm gonna paste it and i'm
55:06 - gonna comment this out okay now to get
55:09 - to this uh title element i'm gonna use
55:11 - driver and i'm gonna use find element so
55:15 - now again we're right by and we write
55:18 - value and now we write again expat
55:24 - and now we paste that export that we
55:26 - just built so it's here i paste it so
55:30 - now i write single quotes to avoid any
55:33 - conflict and we have this
55:35 - so as you can see this xpath and the
55:38 - previous one we built has something in
55:40 - common which is this one that i'm
55:42 - selecting right now so this is the same
55:44 - as this
55:46 - and there is nothing wrong if we leave
55:48 - this as it is because it's correct but
55:51 - we can improve the syntax of this
55:54 - code so what we can do here is to reduce
55:57 - this containers variable so what i'm
56:00 - going to do is i'm going to
56:02 - loop through this
56:04 - list by the way i'm not sure if i
56:06 - mentioned this before but the difference
56:08 - between find element
56:10 - and find elements is that find element
56:12 - returns a single element but find
56:15 - elements returns a list and a list is an
56:19 - iterable so we can iterate through a
56:21 - list so we're using find elements and
56:23 - this returns a list so containers is a
56:26 - list that we can iterate through so
56:30 - we write for container
56:33 - in
56:34 - containers
56:36 - colon and now we can put this inside
56:39 - that for loop so
56:41 - now we can use this container variable
56:44 - and we can replace this instead of
56:46 - driver so we can replace this with
56:48 - driver so we paste this one
56:51 - and now we have container that find
56:54 - element and basically this new let's say
56:57 - this new syntax
56:59 - is reducing this container
57:01 - variable
57:02 - so now
57:04 - instead of writing all of this xpath we
57:07 - can only use the dot sign and
57:10 - just replace all that export that we had
57:13 - before so this that represents this
57:15 - thing
57:16 - and we can use this dot because we're
57:18 - using here also the container reference
57:21 - so this container is used as a reference
57:24 - for this new xpath so this is like a new
57:27 - syntax that you can use to avoid writing
57:30 - a long expat as we had before
57:32 - great now let's find the expat for the
57:36 - subtitle so here we have the expat for
57:39 - the title
57:40 - which was here
57:42 - and now let's find the expat for the
57:44 - subtitle
57:45 - so as you can see here the expat for or
57:48 - the element for the subtitle is the one
57:51 - here that is inside the p tag so this p
57:54 - tag represents the subtitle and to get
57:57 - to this p
57:58 - element we only have to
58:00 - delete this h2
58:02 - and only write
58:04 - p so as you can see now we have all the
58:08 - subtitles so
58:09 - the subtitle of this news now the next
58:12 - one and the next one and this one and
58:14 - this one too so it's great now we have
58:17 - all the subtitles of all the news listed
58:20 - in this website
58:21 - so now we only have to copy
58:25 - and paste it here
58:27 - comment this out and i'm gonna
58:29 - uh duplicate this line of code with ctrl
58:32 - d
58:33 - and now we have this so instead of
58:36 - writing the whole thing
58:38 - we can only write just delete this
58:41 - and p
58:42 - and let's compare this so first we have
58:45 - this
58:46 - and this is represented by the dot which
58:49 - is by the way this one which is exactly
58:51 - the same
58:52 - so then we have a
58:54 - which is here slash a and then slash b
58:58 - so this is the equivalent of this
59:02 - so great now we can delete this and now
59:05 - we have the subtitle element so far so
59:08 - good now let's go back to the website
59:11 - and i want to show you something here we
59:14 - have right now the subtitle element as
59:17 - you can see here
59:19 - but what happens if we only want the
59:22 - text because right now we have all these
59:24 - elements selected in green as you can
59:26 - see it's all this element with the tag
59:29 - name with that
59:31 - attribute and also this thing but we
59:34 - only want the text which should be in in
59:37 - white
59:38 - like this one but it's in green right
59:40 - now because it's selected so what if we
59:42 - only want the text and not the whole
59:44 - element so if we only want to extract
59:47 - the text which is in white here and is
59:50 - in black in the website
59:52 - what we have to do is to use that text
59:54 - attribute so let's go back to python and
59:57 - to get to the text we only have to write
60:00 - that
60:01 - text and this
60:03 - returns only the text of this element so
60:06 - we have this whole element that is
60:08 - in green
60:10 - and with that text we only get the text
60:13 - inside this element so we copy this one
60:16 - and we use it also for the subtitle
60:18 - great now let's give a name to this
60:22 - expression so i'm gonna write title
60:24 - equal to this
60:26 - and now
60:27 - subtitle equal to this
60:30 - so with this we have the variable names
60:32 - and we can move on all right now the
60:34 - next element that we're gonna get is the
60:36 - links of each
60:37 - news so here
60:40 - we have each card and let's go here
60:43 - again to the card we solve we have this
60:46 - card for example and what we want to do
60:48 - is to get the link so we go directly to
60:51 - the website that contains this new and
60:53 - as you can see the link is here it's
60:55 - inside the href this is the link so i'm
60:58 - gonna just click on this link and now
61:01 - let's wait and as you can see here we
61:03 - have the
61:05 - news that corresponds to that card so is
61:08 - the
61:09 - all the details about this
61:11 - this news and now i go back here and
61:15 - well that's how we get to the link and
61:17 - now we verify that that's the right link
61:19 - that we want so now we have to build the
61:23 - xpath that gets that link so i'm gonna
61:26 - delete this slash a and slash p
61:30 - and now we have only this
61:32 - so to get to that
61:34 - this href or to this link we have to add
61:38 - the slash a that we had before
61:41 - and this is the element that represents
61:44 - this whole
61:46 - uh
61:47 - let's say this whole description
61:49 - and if we want to get to that link we
61:52 - only have to use the href attribute that
61:55 - that's a method that we can use in
61:58 - python so
62:00 - let's just copy this
62:03 - and let's go back to patreon so i'm
62:05 - going to
62:06 - use again that container
62:10 - as a reference and again find element
62:13 - and here i'm going to use buy
62:16 - and again we're going to use the xpath
62:18 - as a method and we're going to write
62:20 - value and here
62:22 - single quotes and the whole xpath so we
62:25 - don't need to use this part of the xpath
62:28 - because we already have the
62:31 - container as a context
62:33 - and
62:34 - okay now we can get only the href and to
62:38 - do that instead of writing that text for
62:41 - example as we did before we only have to
62:44 - use the get attribute method so we write
62:46 - get attribute and inside we write that
62:49 - name of the attribute which is
62:51 - href as you can see here the name of the
62:54 - attribute that contains the link is href
62:57 - so we write href and with this we get
62:59 - the link so we don't get that whole
63:01 - element
63:02 - but we get only the link of this element
63:06 - so now i'm going to define this as link
63:09 - equal to and
63:11 - that's it great now one little detail
63:14 - that i want to tell you here is that
63:16 - usually the links are inside href
63:19 - attribute this is like something that
63:21 - you're gonna see quite often
63:23 - and
63:24 - also the href is inside an atac so you
63:28 - will usually see that the link are
63:31 - inside href attribute and also inside
63:34 - and attack so that's a typical element
63:37 - that you will see often so the next time
63:39 - we want to get to a link just look for
63:42 - the href or look for the eight tag and
63:45 - you will get to the link fast so now
63:48 - back to pycharm and with this we have
63:50 - all the elements so
63:53 - another detail that i want to mention is
63:55 - that here we're using find element and
63:57 - not find elements because here in this
64:01 - for loop we're iterating through each
64:03 - element of the list so containers is a
64:06 - list but container is an element so
64:10 - here is only a single element per
64:13 - iteration so we only have to use find
64:16 - element because it's a single element
64:18 - great in this video we learned how to
64:21 - locate all the elements that we wanted
64:23 - in the website in the next video we're
64:25 - gonna see how to export all these
64:28 - elements in a csv file and we're gonna
64:31 - use pandas for that
64:34 - all right in this video we're gonna see
64:36 - how to export all the elements that we
64:38 - extracted to a csv file so first what we
64:42 - have to do is to create empty lists so
64:45 - i'm going to create three empty lists
64:47 - the first one is going to be titles
64:50 - and this one represents this title
64:53 - element
64:54 - and now i'm going to duplicate this and
64:56 - the second one is going to be subtitles
64:59 - in plural
65:00 - and the third one is going to be links
65:02 - so i write links
65:05 - and these are my three lists now what we
65:08 - have to do is append each element to a
65:11 - list in this for loop so in each
65:14 - iteration we're going to append an
65:16 - element to this list so we only have to
65:20 - write here titles and use the append
65:22 - method so this append method allows us
65:25 - to append each element to the list and
65:28 - we only have to write that variable that
65:30 - we want to append so
65:32 - is like this
65:34 - titles that append and inside
65:36 - parentheses that element
65:38 - now i duplicate this and i'm gonna use
65:42 - only subtitles and i'm gonna do the same
65:45 - logic so subtitles that append and
65:48 - subtitle so this one is the list and
65:50 - this one is the element and one more
65:52 - time now links the list
65:55 - append the element which is link
65:59 - so this is what we have and this is how
66:01 - we append each
66:02 - element uh to the list so in every
66:05 - iteration great at this point all the
66:08 - lists are filled with the elements in
66:11 - this iteration so what we have to do now
66:14 - is build a data frame with these lists
66:17 - and to create a data frame we have to
66:19 - use a library named pandas so i'm gonna
66:22 - write here
66:23 - import pandas
66:26 - as pd
66:28 - and
66:29 - probably you have to install this
66:30 - library so go ahead and click on
66:33 - terminal
66:34 - and here just
66:36 - write peep install
66:38 - pandas then press enter and you just
66:41 - have to wait some seconds to install
66:44 - this library i already have this library
66:46 - installed so i don't have to wait
66:48 - anything so once you have pandas
66:50 - installed you can write this import
66:52 - pandas spd
66:54 - and now we can use the library pandas
66:57 - with this
66:58 - pd so i write pd
67:01 - and now i can use the data frame method
67:05 - so now i can use the uh the data frame
67:08 - method and i can
67:10 - open these
67:12 - curly braces and inside i can use a
67:16 - dictionary so to show you this much
67:19 - better i'm gonna create a dictionary so
67:22 - you don't get confused
67:24 - so first i'm gonna write dictionary
67:27 - underscore
67:29 - or just my dictionary so my underscore
67:32 - dict
67:32 - and open here a dictionary so as you
67:35 - might know a dictionary consists of a
67:38 - key and a value
67:40 - so the key
67:41 - is the one that is here
67:43 - on the left and the value is the one
67:46 - that is on the right
67:48 - so the value i'm gonna set it here to my
67:52 - variable which is uh titles so our
67:55 - dictionary is going to have three keys
67:58 - and three values
68:00 - so
68:01 - the first value is titles and i'm going
68:04 - to name this
68:06 - as titles too there is nothing wrong if
68:08 - you set the name of the key as the name
68:11 - of the variable but if you want you can
68:14 - change it for example i can write only
68:16 - title
68:17 - you don't have to write it the same way
68:20 - you can change it a little bit or you
68:22 - can change it completely you can choose
68:24 - so now i'm gonna write the second
68:27 - element which is
68:29 - the subtitles list
68:31 - so here are subtitles and
68:33 - i'm gonna paste these subtitles and i'm
68:35 - gonna write just in singular subtitle
68:38 - that's the name of my key and now the
68:40 - third one is links so here links
68:45 - this is the name of the value by the way
68:47 - the name of the value obviously has to
68:49 - be the same as the
68:51 - the one we want here that is which is
68:53 - the list
68:54 - and here i'm gonna write the name of the
68:57 - key which is link which i can choose
69:00 - right now great now we can use this
69:02 - dictionary to create a data frame so
69:05 - here i copy the name of that dictionary
69:07 - and i put it inside parentheses and with
69:09 - this we can create a data frame using
69:11 - this dictionary
69:13 - so
69:14 - just a recap right now first we have
69:17 - these
69:17 - lists here
69:19 - empty lists we fill these empty lists
69:22 - with all the elements here in the in the
69:25 - loop
69:26 - and then now that we have all the
69:28 - elements inside these lists what we have
69:31 - to do is to create a dictionary so this
69:33 - dictionary has a key and a value and the
69:36 - name of the key we can choose it but the
69:38 - name of the value is the name of the
69:40 - list
69:41 - so with this we have the dictionary and
69:43 - we created this dictionary to create a
69:46 - data frame so we're going to write pd
69:48 - that data frame and inside we write my
69:50 - underscore ticked and with this we have
69:52 - this data frame so i'm going to name
69:54 - this data frame and i'm going to set it
69:56 - equal to df underscore headline
70:00 - so we have this data frame and now we
70:03 - can easily export this
70:05 - uh to a csv file using df underscore
70:08 - headlines
70:10 - that to underscore csv so we're
70:13 - exporting to a csv file but there are
70:15 - other options like json and also excel
70:19 - and html and different options but i'm
70:21 - going to choose csv
70:23 - as you can see here and now i'm going to
70:25 - give a name to this file and it's going
70:28 - to be headline
70:30 - dot csv and with this
70:33 - the file is going to be exported with
70:35 - this name
70:36 - so great now to end all of this we have
70:39 - to use driver that quit
70:42 - so after we
70:44 - we struck all this information and we
70:46 - export all of these to this csv file the
70:49 - driver is going to be closed with this
70:52 - that quit great now let's test this out
70:54 - so we right click and choose run so i
70:58 - run this script and let's see what
71:00 - happens so first python is going to open
71:03 - this driver
71:05 - uh through selenium and now it extracted
71:07 - the information and it closed the driver
71:10 - so the script was successfully executed
71:12 - and now let's check if we have these
71:15 - headlines.csv here
71:17 - on our working directory so here i open
71:20 - this and we can see that there is a file
71:23 - named
71:24 - headline.csv which is this one so we
71:27 - were working in this folder name
71:29 - tutorial and this one is the file we
71:32 - just generated so we double click on it
71:35 - and we can see that we have the title
71:36 - the subtitle and the links so now let's
71:39 - verify if this is correct the first
71:41 - title is best of the best and the
71:44 - subtitle says who makes our man cd
71:47 - versus real madrid combined 11 and all
71:50 - of this so let's check if that's the
71:52 - same here and yeah it says best of the
71:55 - best and who makes our man city versus
71:57 - real madrid and all of that so
72:00 - everything was successfully extracted
72:02 - and we also have the links so we can
72:04 - visit
72:06 - any
72:07 - uh any news that is interested for us we
72:10 - can go directly to the website and we
72:12 - can check all the news here without
72:14 - being distracted by all these images and
72:17 - all the ads on the website great that's
72:20 - it for this video on the next video i'm
72:22 - gonna show you how to do all of this on
72:25 - the background so you don't have to see
72:27 - that driver opened every time you run
72:30 - the script but all will be run in
72:32 - headless mode
72:35 - so far we automated this website and
72:38 - extracted the titles and subtitles that
72:41 - you see here
72:43 - and we did this with selenium so every
72:45 - time we run this code we open this
72:49 - browser automatically and extracted all
72:52 - the data that's great but in this video
72:55 - i'm going to show you how to do all of
72:56 - this without opening this browser with
73:00 - selenium but doing this in headless mode
73:03 - so we don't have to watch selenium
73:06 - open this browser and do all the
73:09 - automation but we can just do it in the
73:12 - background and we can let selenium do
73:15 - that in headless mode so let's go back
73:18 - to python and here we're going to add
73:20 - some lines of code to activate headless
73:23 - mode
73:24 - so to do that first we write here
73:27 - from
73:28 - selenium.webdriver.com
73:32 - that options import options this options
73:36 - is going to help us modify the default
73:38 - behavior of selenium so now we add here
73:42 - some lines of code and first i'm going
73:44 - to write here headless mode so we know
73:47 - that this is the part that is going to
73:49 - change so here first we initiate uh an
73:54 - instance of the options
73:56 - uh class here so i write options
73:59 - parentheses and here i write use equal
74:02 - to options
74:04 - so this is just a rule of thumb you have
74:07 - to initiate an instance and this is my
74:10 - options object as you can see i gave the
74:12 - same name to the name of this class this
74:15 - is just like a convention you use the
74:17 - same name but here in lowercase and this
74:21 - is my options object so now i write
74:24 - options and
74:27 - to
74:28 - turn on headless mode we have to use the
74:31 - headless parameter so i write headless
74:34 - and this by default is set to false so
74:38 - we don't use headthis mode when we
74:41 - run this
74:43 - this script because it's in false but if
74:45 - we want to turn on head this mode we
74:48 - have to set it equal to true
74:51 - so it's equal to true now and now we
74:53 - have to change this web webdriver.chrome
74:56 - so in addition to this service parameter
74:59 - we're going to add another parameter and
75:02 - this time is going to be options so this
75:05 - options
75:06 - has all the default parameters that
75:09 - selenium works with so selenium has some
75:12 - default behavior and we can change it
75:15 - here with the options parameter so i'm
75:17 - going to set options equal to options
75:21 - and
75:22 - there it is so as you can see i
75:25 - use these uh
75:27 - name variables just to make my life
75:30 - easier you can set any other name to
75:32 - this options variable you can set it
75:36 - like
75:36 - options one two three and you can write
75:40 - here options one two three it doesn't
75:42 - matter i just name my variables like
75:44 - this to make my life easier
75:47 - here too service equal to service you
75:50 - can use a different name for service
75:52 - here but i just name it service in lower
75:55 - case all right now something you need to
75:58 - know is that we can make different
76:00 - changes to
76:02 - that default behavior of selenium but
76:04 - one of the most
76:06 - popular is headless mode
76:08 - later in the course we'll see another
76:10 - things that we can add to this options
76:13 - object so we can modify the behavior of
76:16 - selenium even further so now let's
76:19 - continue with this uh with these changes
76:22 - everything is ready to run this script
76:24 - in headless mode but i'm gonna make a
76:27 - little change here in the end so instead
76:31 - of naming this csv file as headline i'm
76:34 - going to name it headline dot headless
76:38 - so we know that this
76:40 - comes from this script which is the one
76:43 - we're using with headless mode so
76:45 - headline uh
76:47 - this dash headless and now it's ready
76:51 - let's run this script and see the
76:53 - results
76:54 - so let's wait a couple of seconds
76:57 - and the difference with the previous
76:59 - script is that here we're not going to
77:01 - open
77:02 - a browser automatically with selenium as
77:05 - we did in the previous video but all is
77:08 - going to be done in headless mode so in
77:10 - the background here we got a message
77:13 - that everything was successfully and now
77:16 - i'm gonna close this one and see if we
77:19 - have this file headline
77:21 - headless so i go here and i check here
77:25 - it says headline
77:27 - hyphen headless and we have all this
77:30 - data so it's the title the subtitle and
77:33 - the link again
77:34 - but
77:35 - everything was done with headers mode so
77:37 - let's verify the first
77:40 - the first title subtitle and here it
77:43 - says pep idol watch word diola star
77:46 - reaction to ben simmons penalty so let's
77:50 - go here and this is the first section
77:53 - that we
77:54 - are working with and yeah we got the
77:56 - same pep idol virtuolas reaction 2 so
78:00 - great
78:01 - you can verify if all that news was
78:04 - properly extracted i did it myself and
78:07 - everything is working fine so that's it
78:10 - for this video in this video we'll learn
78:12 - how to automate this website and extract
78:15 - all this data in headless mode
78:19 - all right in this video i'm going to
78:21 - show you how to schedule this a script
78:24 - to run every day or every time of the
78:27 - day you want so for example this news we
78:30 - can schedule to run every morning so
78:33 - every time we turn on the computer
78:35 - you'll have the csv file with all the
78:38 - data automatically extract it so you
78:41 - don't have to do it yourself but you can
78:42 - schedule when that's going to be
78:45 - executed so to do that first we have to
78:48 - convert our pi file this is a pi file
78:52 - because this is python so the extension
78:55 - is that pi
78:57 - and we have to turn this
78:59 - pi file or convert this pi file to an
79:02 - executable so we have to do that first
79:06 - but before we do that we have to make
79:09 - some modifications to our script
79:13 - so we have to prepare our script to work
79:16 - properly
79:17 - before we turn our pi file into
79:20 - executable so to do that we're gonna do
79:23 - some importation so we write from
79:27 - date time
79:29 - import
79:30 - date time
79:31 - this is the first
79:33 - the second is import os this help has
79:37 - like interact with the operating system
79:40 - for example we can create folders and
79:42 - other things
79:43 - and the last one is
79:46 - sis
79:47 - i didn't explain you what date time is
79:49 - this helps us manipulate that date and
79:51 - time so for example we can extract the
79:54 - hour or the day when the script is
79:57 - executed so that's it that's all the
80:00 - modules or libraries we have to import
80:03 - and now
80:04 - let's do some changes so first we have
80:08 - to use the os module and get access to
80:10 - the path attribute and then write your
80:14 - name
80:15 - and use sys that executable what we're
80:18 - doing here is get the path of the
80:22 - executable that we're going to create so
80:24 - far we have a pi file but we're doing
80:27 - this for the executable that we're going
80:28 - to create in the next video so with this
80:31 - we're saying
80:33 - get the path of that executable that
80:36 - we're going to create
80:37 - and
80:38 - here we only get access to the path this
80:40 - is the attribute of the os module and
80:43 - well this is the directory name and
80:46 - let's give this a name
80:48 - i'm going to name this
80:50 - application
80:52 - underscore path so my application is my
80:56 - executable file that we're going to
80:58 - create and this is the path so we know
81:01 - what's the path of this executable we do
81:04 - all of this because
81:06 - when we work with executable files it's
81:09 - a bit messy to work with paths sometimes
81:13 - the path you don't know were
81:15 - goes the file that you have here so
81:19 - right now we
81:21 - export all this data in this csv file
81:24 - and this csv file is supported in our
81:26 - working directory this is fine because
81:28 - we're working with a pi file but when we
81:31 - work with an executable file things get
81:33 - a bit messy and we don't know sometimes
81:36 - where the file is actually exported and
81:39 - with this we're going to be able to
81:40 - export a file
81:42 - in the same folder where our executable
81:45 - file is going to be located so it's
81:47 - going to be in the same folder and
81:50 - we're not going to have any problem with
81:52 - the path so that's why we do this
81:55 - next we use the date time
81:57 - um
81:59 - this date time to
82:01 - customize the name of our
82:05 - file so right now is just headless or
82:08 - headline headless dot csv
82:11 - but
82:12 - if we run this every morning we're not
82:15 - gonna know which file corresponds to
82:17 - which day
82:19 - so for example if it's a saturday in the
82:22 - weekend and we didn't check the news
82:25 - from monday to friday we wouldn't know
82:29 - if this file is from monday or tuesday
82:31 - or wednesday and so on so just to
82:35 - customize the name of the file that is
82:37 - going to be exported
82:38 - we have to
82:40 - create a
82:41 - a variable that indicates which day is
82:44 - the day when this script or this
82:48 - executable is going to be executed so
82:51 - now
82:52 - to do that we write datetime
82:55 - that now
82:56 - parenthesis and this is equal to well
82:59 - i'm just going to name it now and with
83:01 - this we have the date
83:03 - right now
83:04 - according to my machine or my computer
83:07 - so now we have to use a method called
83:12 - strf time
83:14 - this stands for a string from time and
83:18 - basically what we're going to do is to
83:22 - get the time in a string format so here
83:26 - this null variable is in time format and
83:30 - we're going to convert this time data
83:32 - into a string so we can customize and
83:35 - format this
83:36 - this time
83:37 - so here inside you have to write the
83:42 - format that is used in this uh by this
83:45 - strf time method
83:48 - i didn't explain the syntax of this or
83:51 - the format of this but it's quite simple
83:54 - i'm going to this website which is right
83:58 - here which is named as the method
84:01 - str f time you can go visit this website
84:04 - and you can check the format that i was
84:07 - talking about so for example what i want
84:10 - to create here is a format that is
84:14 - let's say
84:15 - day
84:16 - or
84:17 - month
84:18 - day and year
84:21 - so
84:22 - i'm gonna extract use this
84:24 - uh percentage m
84:26 - i just copy and paste it
84:29 - then i said i want sorry this was month
84:32 - with the m then d
84:35 - so i'm going to struct this where is the
84:38 - d
84:39 - it's here so i just copy
84:41 - and paste percentage d and finally the
84:44 - year which is going to be percentage
84:49 - y so this is the year
84:52 - so with this we have month
84:54 - day and year as i showed you here so
84:58 - this is the
84:59 - the format that we have to use you only
85:02 - can copy here and paste it as i did it
85:06 - now i'm going to give this a name and
85:09 - i'm going to name it
85:11 - month well just as simple as this month
85:15 - day
85:16 - underscore year and i'm going to put
85:18 - this here on the right
85:21 - so with this we have this variable and
85:23 - this variable is going to help us
85:25 - customize
85:26 - our
85:27 - file name
85:29 - so
85:29 - now let's go
85:31 - here let's go uh to this section and
85:34 - i'm going to use a
85:36 - f string to customize this string so i
85:39 - only write f in front of this
85:42 - string and now to add a variable or to
85:46 - concatenate a variable i have to use
85:50 - the
85:51 - curly braces so with curly braces we can
85:54 - concatenate a variable so i'm going to
85:57 - copy that name of the variable and i'm
85:59 - going to paste it here so i paste it and
86:02 - actually i'm going to change this name i
86:04 - want it to be just headline
86:07 - so headline
86:08 - high fan and this
86:10 - so with this we're going to get
86:12 - something like like that something like
86:14 - headline high fan
86:16 - uh tuesday or well in this case numbers
86:19 - so
86:20 - 1
86:22 - or 0 1 0 4 2022
86:25 - something like that just following this
86:28 - format month day and year so with this
86:32 - we get this
86:33 - csv file with a date that we want
86:36 - and now what we have to do is to use
86:40 - this uh application path because i told
86:42 - you that
86:43 - the path is a bit messy when we work
86:45 - with executable
86:47 - so we're going to include this
86:49 - path here
86:50 - and an easy
86:52 - way to do this is just
86:54 - adding these curly braces for a variable
86:57 - and just pasting this and adding the
86:59 - slash and as you can see this is the
87:02 - typical format we use for a path right
87:05 - we use this slash and that's how we
87:08 - uh
87:09 - put two paths together so we put this
87:13 - path and this and we get the whole path
87:16 - but this is not a good uh a good
87:19 - practice
87:20 - because this slash is also a bit messy
87:23 - between operating systems sometimes uh
87:27 - different operating systems use like
87:29 - different slash so for example
87:33 - mac os i think uses this
87:35 - forward slash but windows i believe uses
87:39 - this
87:40 - backwards slash so it's like a bit messy
87:44 - you can
87:46 - find some problems if you use this slash
87:50 - so what we do
87:51 - is
87:52 - work with the os module to avoid this
87:56 - slash so we use um
87:59 - os
88:00 - and we use the join method to avoid
88:03 - writing this slash ourself so what we do
88:06 - is
88:07 - write os
88:09 - that path
88:10 - that join
88:12 - and here we have to add the path we want
88:14 - to concatenate so before i do this i'm
88:17 - going to create a name for this
88:20 - um
88:21 - first i'm going to delete this because
88:22 - i'm not going to do this you can do it
88:24 - it's going to work fine but you have to
88:26 - be careful with the slash
88:28 - so i'm not gonna do this just to follow
88:31 - a best practice and what i'm gonna do
88:34 - is i copy this
88:37 - and now i create a
88:40 - variable
88:41 - file
88:42 - underscore name just to be more
88:44 - organized you don't have to do this
88:46 - i just like to be organized so
88:48 - file name and now i copy file name and i
88:52 - put it here
88:54 - so this is the file name
88:57 - and now to concatenate this
89:00 - i'm gonna
89:01 - write this and concatenate it with
89:04 - application underscore path
89:07 - so basically this is the same
89:09 - we are concatenating this
89:11 - application path with this
89:13 - file name so we're not using this slash
89:17 - anymore or this backward slash anymore
89:19 - but we're letting this os path join
89:23 - taking care of it so we don't run into
89:26 - any issue
89:27 - so now this is ready and i'm gonna name
89:30 - this
89:31 - as
89:33 - final
89:34 - underscore path so this is my final path
89:37 - and this is what we're going to work
89:39 - with
89:40 - so
89:41 - i delete this by mistake but
89:43 - everything is fine now so now i add this
89:46 - final underscore path
89:48 - so i copy this and paste it so this csv
89:52 - is going to be sent to this path this
89:54 - path is where the executable is going to
89:56 - be located so we avoid any issue
89:59 - with the executable and paths and that's
90:02 - it with this everything is ready to
90:04 - convert our pi file to executable file
90:08 - and then run this executable file
90:11 - at any time we want
90:13 - and we're gonna do that in the next
90:15 - video
90:18 - okay in this video i'm going to show you
90:20 - how to schedule this script so you can
90:23 - run it every morning or every day you
90:26 - want at any time you want
90:28 - so the first thing we have to do is to
90:31 - open up the terminal i have the terminal
90:33 - here on python
90:35 - on the bottom so i just click here
90:37 - terminal and here what we're going to do
90:41 - is first install a library called pi
90:44 - installer so pi installer is going to
90:47 - help us convert a pi
90:50 - file supply file our python files to
90:53 - executable so the first step to
90:57 - to schedule this script is to convert it
91:01 - to an executable file and once we have
91:04 - the executable we can
91:06 - schedule this executable to be run
91:08 - anytime we want so to install this
91:12 - library we only write
91:15 - pip
91:16 - install
91:17 - by installer so you just have to write
91:20 - this press enter and wait a little bit
91:23 - so here i got a message that i have this
91:26 - library already installed but it's going
91:28 - to take you a couple of seconds to
91:30 - install this library okay once this is
91:32 - ready we just clean this app and now we
91:36 - write the following command so we write
91:39 - pi installer
91:40 - double uh dash and then we write one
91:44 - file so this is the command and then we
91:46 - have to write the name of this
91:50 - this
91:50 - pi file so this script in my case i name
91:54 - it news dash headlines so i just have to
91:58 - write this name
91:59 - and i'm gonna press tab and as you can
92:01 - see here i have this uh
92:04 - this script
92:06 - and
92:07 - i'm just gonna write news dash headline
92:09 - in one little detail i forget to mention
92:13 - is that you have to be located on this
92:16 - folder so on the folder where the
92:19 - the python file that this pi file is
92:22 - located so you have to do that on the
92:24 - terminal here we're right now on the
92:27 - terminal and to do that
92:29 - first i'm going to copy this so
92:31 - i don't lose this
92:33 - command
92:34 - and to do that you have to know how to
92:36 - navigate on the terminal and on the
92:38 - terminal we navigate with this command
92:40 - cd which stands for change directory so
92:44 - if you are not on the folder where is
92:47 - your pi file this is not going to work
92:49 - so you have to use cd and then for
92:52 - example i'm going to use cd to go to the
92:54 - previous folder and right now i'm on
92:58 - another folder you can see here this is
93:01 - the parent folder of tutorial which is
93:03 - the folder where is my pi file
93:06 - and i can verify it because if i do cd
93:10 - i can see
93:11 - the
93:12 - folders that are inside this one so i
93:15 - write cd and then press tab and you can
93:18 - see all the folders and one of them is
93:20 - the tutorial folder as you can see here
93:22 - so to go into this folder i only have to
93:26 - write cd and then write tutorial so i
93:30 - have this i press enter and as you can
93:32 - see i'm not anymore on the football
93:35 - headlines folder
93:36 - but i'm right now on the tutorial folder
93:39 - in this tutorial folder happen to have
93:41 - this uh
93:43 - this
93:44 - um
93:45 - script that i need so this is the
93:47 - the script which i need which i named
93:50 - news dash headlines so perfect so now
93:53 - i'm gonna clean this and now i'm gonna
93:57 - delete cd and i'm gonna use the previous
94:01 - uh the previous command i had which i
94:05 - copied yeah is this one and well it says
94:09 - pi installer double double dash one file
94:12 - and the name of my pi file so this is
94:15 - ready i'm gonna press enter to convert
94:18 - this pi file to executable so i press
94:20 - enter and now we have to wait some
94:22 - seconds great i get the message that
94:25 - building the executable was completed
94:27 - successfully so now to verify this was
94:31 - successful we have to go
94:34 - to the folder where this is located so
94:37 - i'm going here to the left and here this
94:40 - is my tutorial folder and
94:43 - in your folder you will see these two
94:46 - folders one is called build and the
94:48 - other is this and your executable is in
94:51 - the dist file so this is my test file
94:54 - and this is my
94:56 - python script but now it's an executable
94:59 - so
95:00 - on a mac what you can do to
95:02 - test this executable which i highly
95:05 - recommend you is to double click on it
95:08 - and just after you double click you'll
95:11 - see that the executable will be run but
95:14 - sometimes when is the first time you
95:16 - open this sometimes you won't see this
95:18 - option to open with the terminal because
95:21 - right now my operating system recognizes
95:24 - that this should be open with the
95:26 - terminal but sometimes it doesn't know
95:29 - so what you have to do is to help it so
95:31 - you have to right click
95:32 - and click on open with and sometimes you
95:35 - will see the option terminal but if you
95:37 - don't see it you just click on order
95:39 - and then you have to locate the terminal
95:42 - so you just click here all applications
95:45 - then scroll all the way down go to
95:47 - utilities and here it should be the
95:50 - terminal so here i'm going to open with
95:52 - the terminal
95:54 - i didn't have to do it but i just did it
95:57 - to
95:58 - show you how this works so
96:00 - now i have this uh executable i just run
96:04 - this executable by
96:06 - double clicking on it
96:07 - and here and well the executable
96:10 - apparently is running and we can verify
96:13 - if this is successful by going here to
96:16 - python or actually we can see right here
96:19 - so we can see here in the folder and we
96:22 - see that we have a new file
96:24 - and this file is named headline dash and
96:27 - here is today's date so 04 28 2022 and
96:31 - this is the format that we used here for
96:34 - the csv file
96:36 - month
96:36 - day and year so we verify that this file
96:41 - was successfully created so we have here
96:44 - the file and if we check the content
96:47 - we'll see that is the title
96:49 - and also the subtitle and also the link
96:53 - well we verify that everything is
96:55 - working fine and i highly recommend you
96:58 - to verify that the executable was
97:00 - successfully created because once we
97:03 - schedule this you'll have to wait until
97:06 - the
97:06 - moment that you schedule to verify
97:09 - if this is working fine so it's much
97:12 - better if you test it out right now as i
97:15 - did some seconds ago
97:19 - now we're going to schedule when this is
97:21 - going to be run so now i open up a new
97:24 - terminal so i click on new window and
97:27 - here to schedule this executable we have
97:30 - to
97:31 - open chrome tab so we write chrome tab
97:34 - then dash and then e we press enter and
97:39 - we're going to get this window and here
97:40 - we have to write a command to schedule
97:43 - this executable and the command has the
97:46 - following format to show you the format
97:48 - i'm going to this website which is
97:51 - called chrome tab guru and here you can
97:53 - build a part of the command so here you
97:57 - can
97:58 - know the syntax used by this chrome tab
98:01 - so here
98:02 - i previously tested that syntax so i'm
98:05 - just gonna
98:06 - leave it as
98:08 - the default parameter so here you see
98:10 - five asterisk and the first represents
98:13 - the minute the second the hour the third
98:16 - day
98:17 - the fourth the month and the fifth the
98:19 - day on the week and here let's say we
98:21 - want to schedule this executable to be
98:24 - run
98:25 - at nine in the morning every day so if
98:28 - we want that we only
98:30 - uh delete this and write here zero
98:33 - because it's zero
98:35 - uh in the morning i mean the minute it's
98:37 - zero and the hour is nine so at nine in
98:41 - the morning so this hour is uh from 0 to
98:46 - 24 or 23 i guess
98:48 - so we have to write 9 and this indicates
98:51 - is
98:52 - 9 in the morning so it's saying add 9
98:56 - and here we can also see
98:59 - when is the next time when this
99:01 - is supposed to run so it's 28th
99:05 - which is the date today
99:07 - then 29 then 30
99:10 - uh one the next month
99:12 - and the second of the next month so we
99:14 - have here we can verify which days this
99:18 - is supposed to
99:20 - to run so
99:22 - this is really good because you have to
99:24 - be very careful when you create uh this
99:27 - command because
99:29 - by mistake you can make it like to run
99:32 - every minute or run every hour and you
99:35 - might damage the performance of your
99:37 - computer so be very careful and check
99:40 - out that expression that you're creating
99:42 - here so i'm gonna copy this
99:44 - and now i'm gonna paste it here okay
99:47 - this is the first part of my command and
99:50 - the second is
99:52 - the
99:52 - path of that executable file so here we
99:56 - have to
99:58 - go here to my folder and we have to drag
100:01 - this
100:02 - file to the terminal to get that path so
100:06 - here first i'm gonna press the i key
100:10 - to
100:11 - go to insert mode so here i'm in short
100:14 - mode and i can type anything as you can
100:16 - see here so we're in insert mode and
100:19 - here i'm gonna paste this or i'm gonna
100:23 - drag this file so i drag just to get the
100:26 - path so that's how mac os works
100:29 - so here we have this path and this is
100:32 - the second part of this command so first
100:35 - we have to write the hour that we want
100:38 - or the time we want this to run
100:40 - and then we have to
100:43 - paste that path of this executable so
100:46 - everything is ready here
100:48 - and what i'm gonna do is i'm gonna save
100:51 - this command and to do that we have to
100:53 - press the escape key so i press escape
100:57 - and now we have to press this column
101:00 - that you see on the bottom and now w and
101:04 - q so w stands for right and q stands for
101:07 - quit so we want to write this and then
101:10 - quit this chrome tab
101:12 - now i press enter and
101:14 - we're going to get this window and we
101:16 - have to press ok to give permission so i
101:19 - press ok
101:21 - and now this was successfully created
101:23 - and to verify this we have to write the
101:26 - command chrome tab
101:28 - dash l so we're going to list all the
101:31 - commands that were created so i press
101:33 - enter and now you see that one of the
101:35 - commands created is the one we just
101:38 - created a second ago so this is the
101:41 - command we created and with this we're
101:43 - telling uh our operating system that we
101:46 - want to run
101:47 - this executable
101:49 - at nine in the morning every day so i'm
101:52 - not gonna wait until nine in the morning
101:55 - because it's gonna take too much and we
101:57 - already tested out this executable file
102:00 - manually so we know that this is working
102:02 - just fine so
102:04 - you can schedule this to be run earlier
102:07 - in your computer and verify it yourself
102:10 - or you can test this out manually as i
102:13 - showed you before and that's it for this
102:15 - video in this video we'll learn how to
102:17 - schedule an executable file to be run at
102:20 - any time you want
102:24 - okay in this video i'm going to show you
102:26 - how to create pivot tables using python
102:29 - so here we have the typical sales data
102:32 - that we have to work with in microsoft
102:34 - excel so we usually have to create pivot
102:36 - tables using excel but now we're going
102:39 - to create a pivot table using python in
102:42 - this case we're going to create a pivot
102:44 - table that tells us how much people
102:47 - spend in each product line so we're
102:49 - going to divide
102:50 - by gender male and female and we're
102:53 - going to see how much each gender expand
102:56 - in product line so we're gonna do this
102:59 - with python and first we have to read
103:01 - this excel file so i'm going here and we
103:04 - have to use pandas as usual so i import
103:07 - pandas as pd
103:08 - and then to read this excel file we have
103:11 - to use read underscore excel so this is
103:14 - an excel file because here we have the
103:18 - xlsx
103:19 - extension so that's why i'm using read
103:22 - excel and not read csv so now i just
103:25 - have to write super
103:27 - market underscore sales that xlx
103:31 - x
103:33 - and well this is
103:35 - the name of the file you
103:37 - i'm going to set a name to this so df
103:40 - equal to
103:41 - and with this we have the data frame so
103:44 - we read this excel file and we put this
103:46 - inside a data frame so with this we're
103:49 - reading this excel file so now if you
103:51 - want we can print this so
103:54 - i print this data frame and now we'll
103:56 - see the result and well here i didn't
103:59 - write the name correctly so i didn't
104:01 - write supermarket so i write
104:04 - i write supermarket now and we have here
104:06 - the data frame and as you can see we got
104:08 - here the same data that is on the left
104:10 - but now is here printed in python so
104:15 - now to make a pivot table
104:18 - what we have to do is use
104:20 - that pivot underscore table method
104:23 - so what we have to do is write df that
104:26 - pivot underscore table and then we have
104:29 - to indicate the index the columns and
104:32 - the values for this pivot table great
104:34 - and now i'm going to show you the
104:36 - columns that we're going to work with so
104:38 - these are the columns in yellow so the
104:41 - gender column the product line column
104:43 - and the total column so i'm going to
104:46 - select these columns so we only see
104:48 - these three columns in our data frame so
104:51 - to do that first we have to write df
104:53 - which is the name of our data frame and
104:55 - then write double square brackets to
104:58 - select multiple columns so to select one
105:00 - column we write
105:02 - just a pair of square brackets and if we
105:04 - want to select multiple columns we have
105:07 - to write double square brackets so
105:09 - now we indicate the columns that we want
105:12 - to select so in this case is the gender
105:14 - column
105:16 - then is the
105:17 - i think product line column so i just
105:20 - copy this one
105:22 - and finally is the total column so total
105:26 - so with this we have the three columns
105:28 - that we wanted so now
105:31 - i can set df equal to this and now my
105:34 - data frame will have only these three
105:36 - columns so if i print this you'll see
105:39 - that we only have three columns and
105:42 - these are the columns that we selected
105:44 - so this is a good practice when you only
105:46 - want to focus on some columns and you
105:49 - don't want to see all the columns that
105:51 - is in the file great now let's continue
105:54 - with our pivot table so i have here the
105:57 - pivot table and we have to define which
106:00 - are the index the columns and the values
106:03 - so first what we have to do is remember
106:05 - the goal of this pivot table so the goal
106:08 - is to see how much each gender is spent
106:12 - in each product line so if that's our
106:15 - goal
106:16 - probably we want the gender in the index
106:19 - and we want the product line in the
106:21 - columns and also we want to sum the
106:24 - amount of money spent on each product so
106:27 - now let's define the parameters first
106:30 - the index so index is going to be the
106:32 - gender
106:34 - then
106:35 - the column is going to be
106:37 - the product line so
106:40 - i said here product line
106:42 - then we have the
106:44 - values
106:45 - and as i said before this is going to be
106:49 - the amount of money so this is going to
106:51 - be total
106:55 - and finally we have the aggregates
106:58 - function that we want to apply so in
107:00 - this case we have to write agg
107:04 - func and this is the operation that we
107:06 - want to apply so in this case i want to
107:08 - sum okay with this our pivot table is
107:11 - ready and now i only have to set this
107:13 - equal to and i'm going to name this
107:16 - pivot underscore table
107:19 - so that's the name of my pivot table
107:21 - and well now i'm just going to
107:24 - put this here and well this is ready and
107:27 - now i'm going to print this pivot table
107:29 - so you can see its content so print
107:32 - pivot underscore table so now i run this
107:35 - and let's see the result so here we have
107:38 - our pivot table and as we can see we
107:40 - successfully built this pivot table so
107:43 - in the index we have the gender male and
107:45 - female then in the column we have the
107:48 - product line so there are different
107:49 - product line electronic accessories
107:52 - exports and travel and so on and finally
107:55 - in the values we have the numeric data
107:57 - that was in the total column so here we
108:00 - have this numeric data and well we use
108:02 - the sum as our aggregate function so we
108:05 - sum the values in each category and now
108:08 - to see the content of this pivot table
108:10 - much better
108:11 - i'm going to export this pivot table in
108:13 - an excel file so what i'm going to do is
108:16 - delete this and here i'm gonna export
108:19 - this pivot table using to underscore
108:22 - excel and then i'm gonna set a name for
108:24 - this excel file so i'm gonna set it
108:26 - equal to
108:28 - pivot underscore table dot x l s x and
108:32 - we can also set the name of the sheet in
108:34 - this case i'm gonna name the sheet as
108:37 - report
108:38 - so this is the name of my sheet and then
108:40 - we can also set in which row this data
108:42 - is supposed to be exported so we only
108:45 - have to add the start row parameter and
108:48 - in this case i'm going to export this in
108:49 - row number four and with this this pivot
108:52 - table is going to be exported in an xlx
108:55 - file and the first sheet is going to be
108:57 - named report and this is going to export
108:59 - it in row number four and by the way you
109:02 - can also round the numbers inside this
109:05 - pivot table so you only have to write
109:07 - here that round
109:09 - and zero so with this you round the
109:11 - numbers inside this pivot table so now i
109:14 - run this so now i should have this file
109:18 - in my working directory and since i
109:20 - don't have microsoft excel in my
109:22 - computer i'm going to open this in
109:24 - google sheets okay i just opened this
109:27 - file and well is named pivot underscore
109:29 - table it's an excel file and i just
109:31 - opened this in google sheets and well
109:33 - this pivot table was exported in the row
109:35 - that we specified and we see that the
109:38 - sheet is named report here on the bottom
109:40 - and that's it we successfully created
109:43 - this pivot table with python and we
109:45 - exported this into an excel file
109:50 - in the previous video we used this sales
109:52 - data to create this pivot table with
109:55 - python
109:56 - and now we're going to use this pivot
109:58 - table to create a bar chart and to do
110:02 - that we're going to use a library called
110:04 - open pi excel so first we go here and we
110:08 - open the terminal and we install open pi
110:11 - excel so we only have to
110:14 - write pip
110:16 - install open pi
110:18 - xl
110:20 - so now we press enter and with this
110:22 - we're going to install this library and
110:24 - this library is going to help us do
110:27 - things we will do in microsoft excel
110:29 - like creating charts or summing values
110:33 - in columns and more things so now let's
110:36 - import this library so i write from open
110:40 - pi excel
110:42 - import
110:43 - and the first thing we're going to
110:44 - import is
110:45 - load underscore workbook and we're going
110:48 - to use this load underscore workbook to
110:50 - read our excel file so the name of my
110:52 - excel file is pivot underscore table so
110:55 - now i use this
110:57 - load underscore workbook and here i
111:00 - write the name of the file so i write
111:02 - pivot underscore table dot x
111:04 - lsx and now i set this equal to
111:08 - wb which stands for workbook and now i'm
111:12 - going to select the sheet i'm going to
111:14 - work with so to do that i have to write
111:17 - wb
111:19 - and then open square brackets and then
111:21 - we have to write the name of the sheet
111:23 - in this case i'm going to use the sheet
111:25 - report which is here so the name is
111:27 - report and now i only have to write
111:30 - report and this is the name of my sheet
111:34 - so i set this equal to
111:36 - sheet
111:37 - all right with this we have the workbook
111:40 - and we also have the sheet and now we
111:42 - can use these two variables to
111:44 - manipulate our file okay now what we're
111:46 - going to do is select the active rows
111:49 - and columns that are in our
111:52 - sheet so here we have some active rows
111:55 - and columns and this is determined by
111:57 - the cells where our pivot table is
111:59 - located so here we see that our pill
112:02 - table is located
112:05 - between a5 and g7 so we have to locate
112:10 - the minimum row
112:11 - the minimum column the maximum row and
112:14 - the maximum column so let's do this so i
112:18 - go here and now we use wb and then we
112:22 - have to use the active attribute so i
112:24 - write active and first let's locate the
112:27 - minimum column so i write that mean
112:29 - underscore column
112:31 - so now i duplicate this
112:34 - and now i do the same but now with the
112:36 - maximum column so now maximum column
112:39 - then minimum row and then maximum row so
112:43 - now i set this equal to and i'm gonna
112:46 - set
112:47 - just names that are equal to this so
112:50 - first minimum column then maximum column
112:53 - and so on so
112:55 - now with the minimum row
112:57 - and finally with the maximum row
113:00 - so now we have these
113:02 - four variables and now i'm gonna print
113:04 - these four variables so you can
113:06 - understand much better
113:07 - what they mean so first the minimum
113:09 - column and well then maximum column
113:14 - then minimum row and maximum row these
113:18 - four variables are going to be useful
113:20 - when we
113:21 - make our bar chart so we get
113:24 - 1
113:25 - seven five and seven so
113:27 - for minimum column we get one and for
113:30 - maximum column seven so let's go and
113:32 - check here so minimum column one so
113:35 - that's correct because the minimum
113:37 - column is a which represents one and the
113:40 - maximum column where our pivot table is
113:43 - located is g so it's two four five six
113:47 - seven so yeah maximum column seven so
113:50 - minimum one and maximum seven so that's
113:52 - correct and then we have minimum row and
113:56 - maximum row so five and seven
113:59 - so now let's check here and the minimum
114:02 - row
114:03 - uh is five and the maximum is seven so
114:06 - this
114:07 - is based where our pivot table is
114:09 - located right now because this is the
114:11 - only element that is in our
114:14 - sheet so that's why this is our
114:16 - reference
114:18 - all right now that we have these minimum
114:20 - and maximum values we're going to use
114:23 - these values to create our bar chart so
114:26 - first i delete this and now i'm going to
114:28 - import a bar chart from open pi excel so
114:31 - i write from open pi excel that chart
114:35 - import
114:36 - bar chart and now i'm going to
114:38 - instantiate a bar chart object so i
114:40 - write bar chart and open parenthesis and
114:44 - this is equal to bar chart so now i have
114:47 - this bar chart object
114:49 - and now we have to do this
114:52 - first we have to
114:54 - import a reference and this reference is
114:58 - going to have the minimum and maximum
115:00 - value so
115:01 - i write here comma reference
115:04 - so i'm going to use this reference
115:06 - and then i'm going to
115:08 - put inside parentheses the minimum and
115:11 - maximum values
115:13 - okay so first
115:14 - let's indicate the sheet we're working
115:17 - in so first sheet
115:19 - and then we have to indicate the minimum
115:22 - and maximum values so here i write
115:25 - min
115:26 - column or mean underscore call and then
115:30 - i write
115:31 - mean column
115:33 - and i do the same for the order so i
115:35 - only have to duplicate and add comma so
115:38 - here i add cool mass but we have to
115:40 - change here to maximum column and then
115:42 - to minimum row
115:44 - and finally to maximum row and with this
115:47 - we have the four parameters and now i
115:49 - just have to change the values so
115:51 - minimum column then maximum column
115:54 - then minimum row and finally maximum row
115:58 - so
115:59 - okay
116:00 - now these
116:02 - are the reference but now we have to
116:04 - split the reference in two so first we
116:07 - have the data this is the data
116:10 - and then we have the categories this is
116:13 - the categories so we have to
116:16 - create two references so let's start
116:19 - with the data so first we have the data
116:21 - and i'm going to set this equal to data
116:24 - so i write equal to
116:26 - data and well now i'm just going to
116:29 - format this
116:31 - properly
116:32 - and then i'm going to explain you how
116:34 - this works so
116:35 - first i'm going to put this
116:37 - in one line so you can see it much
116:39 - better
116:40 - and okay now we have to make a little
116:43 - change to this reference and i'm going
116:45 - to explain you why so here we have
116:47 - minimum column maximum column minimum
116:50 - row and maximum row but these are the
116:53 - minimum and maximum values of the whole
116:56 - pivot table so here we have the whole
116:58 - pivot table
117:00 - and the minimum value as i told you
117:02 - before is a so one but for the data the
117:06 - minimum value is v
117:08 - so number two and the maximum value is
117:11 - still g so seven
117:13 - so the minimum column is two and the
117:16 - maximum is
117:17 - seven so here what we have to do is
117:20 - write
117:21 - minimum column plus one
117:23 - so here i have to add
117:26 - plus one
117:28 - and as i told you before the maximum
117:30 - column is going to be the same because
117:33 - it shares the same maximum column with
117:35 - the pivot table so it's the same maximum
117:38 - column
117:38 - and then in the rows the minimum and
117:41 - maximum row you can see that the
117:45 - data in yellow has the same minimum and
117:48 - maximum row
117:50 - compared with the pivot table so it's
117:52 - the same
117:53 - so right now we're analyzing
117:55 - the area in jello and it has the same
117:59 - minimum and maximum row compared to the
118:01 - whole pivot table okay so the only thing
118:04 - that changed was the
118:06 - minimum column because it starts in b
118:10 - so
118:11 - here we added minimum column plus one
118:14 - okay now let's do the same but now for
118:17 - the
118:18 - for the categories so now i write
118:20 - categories
118:23 - and here i'm going to delete this and
118:25 - let's analyze so the categories are in
118:28 - green so the minimum column is still a
118:31 - that's correct but the maximum column is
118:34 - not
118:35 - g anymore but is still a so here what we
118:39 - have to do is write in maximum column
118:43 - the value of minimum column so the
118:46 - minimum and the maximum column
118:48 - are going to be
118:50 - mean underscore column okay
118:53 - so now let's see that minimum and
118:55 - maximum row so the minimum row is not
118:58 - five anymore but it's six
119:01 - and the maximum row is seven
119:04 - so here what we have to do is add
119:07 - minimum row plus one
119:09 - because minimum row is the reference of
119:11 - the whole pivot table so five plus one
119:14 - six so here i go and add plus one
119:19 - and the maximum row is going to be
119:22 - still seven so it's going to be the same
119:25 - it shares the maximum row with the whole
119:28 - pivot table
119:29 - so it remains the same and here i will
119:32 - leave it as max underscore row and with
119:34 - this we have the references for our data
119:37 - and the category just one little detail
119:40 - you need to know here
119:42 - i highlighted these two areas in yellow
119:45 - and in green so you can know which are
119:47 - the data and which are the categories
119:49 - but this is the same concept that you
119:52 - will follow in any pivot table so the
119:54 - categories are gonna be always on the
119:57 - left here
119:58 - and this doesn't include the header so
120:01 - not this one
120:03 - and the data
120:04 - does include the header so in the data
120:07 - we
120:08 - include the numeric data which is right
120:10 - here and also we include the headers so
120:13 - you have to follow the same concept all
120:15 - right now let's create a bar chart so
120:17 - now that i have the references i'm gonna
120:20 - use this bar chart object so
120:23 - i just copy bar chart and now i'm gonna
120:26 - use a method called add
120:28 - underscore data and we already have the
120:30 - data so the data is here in my data
120:33 - variable so i only have to add data
120:36 - and then we have to indicate where we
120:39 - want to create this bar chart so i'm
120:41 - going to create this
120:42 - in the cell b12
120:45 - and well with this our bar chart is
120:47 - going to be created in b12 all right now
120:49 - let's add a title to this bar chart and
120:52 - then let's add a style
120:54 - so first let's add the title so i write
120:57 - bar chart that title
120:59 - and we set this equal to and we can
121:02 - write anything we want for our title in
121:04 - this case
121:05 - i'm gonna write sales by product line
121:08 - because this is what our bar chart is
121:10 - about so
121:12 - sales by product line and then i'm gonna
121:15 - change the style so i'm gonna write
121:17 - that style and this is basically the
121:20 - style that our bar chart is going to
121:22 - have so when we create
121:24 - charts in microsoft excel we have
121:26 - different
121:27 - styles so different colors and different
121:29 - shapes and we can select here only with
121:32 - numbers so for example we can use style
121:35 - number one style number three or style
121:38 - number five so for now we can only guess
121:40 - the number and then we can see the
121:42 - results when we export this bar chart
121:45 - all right now let's save the result so i
121:48 - write wb which stands for workbook and
121:51 - then save
121:53 - so that's save and
121:54 - i'm going to sport this as
121:57 - bar chart
121:59 - dot
122:00 - x lsx so with this we're gonna save all
122:03 - the results in this
122:05 - excel file so now what i'm gonna do is
122:09 - run all of this and see the results so i
122:12 - run this well we got a message of
122:15 - success but before i open the file here
122:17 - i made a little mistake here i forgot to
122:20 - add the categories so we created
122:22 - categories but we didn't add it to the
122:24 - bar chart so here i'm gonna write here
122:27 - bar chart that
122:30 - set underscore categories and inside i'm
122:33 - gonna put these categories that we
122:35 - created so i put this inside and here we
122:38 - also this shouldn't be here
122:41 - this b12 shouldn't be here sorry this
122:44 - should be in another method so first we
122:47 - add data and we add categories to our
122:51 - bar chart
122:52 - and then once this is done what we have
122:56 - to do is write sheet
122:59 - that add
123:01 - underscore chart
123:02 - and then we put our bar chart here so
123:05 - i'm gonna write bar chart
123:07 - and then
123:08 - i'm gonna set the
123:10 - cell where we want this bar chart to be
123:13 - added so i set this
123:15 - equal to b12 and this bar chart is going
123:18 - to be added in b12
123:21 - so
123:22 - just a recap first we add the data and
123:25 - the categories to our bar chart and then
123:28 - we use the add underscore chart method
123:31 - to indicate where we want to add this
123:33 - bar chart
123:35 - okay now i'm going to add just
123:37 - one more parameter here so i'm going to
123:39 - add title from data and here equal to
123:42 - true so we have the title
123:44 - from data in this uh
123:47 - in this bar chart so with this our bar
123:50 - chart is ready so now i can run this and
123:53 - see the results so i now run this
123:56 - and well we got this message of success
123:58 - and now i'm gonna open this excel file
124:00 - so we can see the results all right here
124:02 - i open the bar chart file that we
124:04 - created before and here we have the
124:07 - pivot table and also we have the bar
124:09 - chart so this bar chart corresponds to
124:12 - the data in our pivot table so we
124:15 - created this using the data here and
124:18 - also the categories here on the left and
124:21 - as you can see we got here the title
124:24 - that we set here so sales by product
124:26 - line
124:27 - we also got this style number five so
124:30 - these are the colors and the format we
124:32 - have and well we did all of this using
124:35 - open pi excel and one of the coolest
124:38 - things we did when we wrote this code is
124:40 - that no matter how many rows this pivot
124:43 - table has
124:45 - our code is gonna work because here we
124:48 - use minimum and maximum values here so
124:52 - if this pivot table has more rows
124:55 - and more columns this is still going to
124:58 - work because we use references and
125:01 - that's it for this video in this video
125:03 - we'll learn how to create bar charts
125:05 - using open pi excel
125:10 - okay in the previous video we learned
125:12 - how to create a bar chart so we use this
125:15 - pivot table to create this bar chart
125:18 - that you see here and now we're gonna
125:19 - see how to create formulas like this one
125:22 - so for example we're gonna see how to
125:24 - sum these two values but now we're gonna
125:26 - do this with python so instead of
125:28 - writing this formula manually we're
125:31 - gonna do this here with pythons all
125:34 - right first i'm going to show you the
125:35 - easiest way to create a formula in this
125:38 - spreadsheet using python so here
125:41 - i'm going to first write this formula so
125:44 - i write sum and well we have this
125:46 - formula and now i'm gonna copy this
125:49 - formula so the easiest way to create
125:50 - this formula is just writing this in
125:53 - python so first i'm gonna paste it here
125:56 - and i'm gonna put this in quotes
125:58 - and well
126:00 - i'm gonna here set this
126:03 - cell which is b8 equal to this
126:07 - formula so here i write sheet
126:11 - so first of course you have to read this
126:14 - excel file so we have this bar chart
126:16 - that x lsx which is the name of my file
126:20 - that we created before in the previous
126:21 - video and then we have to select the
126:25 - sheet so we have to select this report
126:27 - sheet
126:28 - this is the report sheet that we have
126:30 - here and well
126:32 - we named this as sheet so now we select
126:35 - sheet and we select the cell we want to
126:37 - work with so in this case b
126:40 - 8
126:41 - and then we write this so sheet b8 and
126:45 - this equal to
126:46 - this expression so this is basically
126:50 - the same as doing this so we have b8
126:53 - here and we
126:56 - write this equal to this formula so it's
126:58 - basically the same
127:00 - so we have this but now encode and now
127:02 - to complete this i'm going to set a
127:05 - style for this cell so i only have to
127:07 - write the name of this cell and then
127:10 - that style
127:12 - i'm going to set this equal to currency
127:14 - so the format is going to be currency
127:17 - and well we're going to have here uh a
127:19 - dollar sign i think
127:21 - and well
127:22 - we're going to have the sum and the sum
127:24 - is going to be in
127:26 - currency format so okay now let's run
127:30 - this and let's see the results so first
127:33 - i'm going to delete this because i don't
127:34 - want to do this manually
127:36 - so i delete this and now let's see the
127:39 - result we should have the same but now
127:41 - with
127:42 - python so
127:43 - i run this
127:45 - and well we see the result but actually
127:48 - we didn't save this file so i'm gonna
127:50 - write here wb
127:52 - just to make sure everything was saved
127:54 - and that's saved and
127:56 - i'm going to export this in another file
127:58 - so this is going to be called report
128:02 - that
128:03 - xlsx so now
128:05 - i run this and let's see the results so
128:08 - now we have this file
128:10 - and well let's open this file all right
128:12 - i have the file here opened and as you
128:15 - can see we have here the
128:17 - the sum that we did before so here is
128:19 - the formula and here's the value and we
128:22 - have here the dollar sign because we set
128:24 - this cell with the currency style so
128:27 - great so with this we
128:30 - could create this uh we could make this
128:33 - sum using python but we did this for
128:36 - only one cell and what if now we want to
128:39 - do this
128:40 - uh sum for all the cells that are here
128:44 - so probably we want to calculate the sum
128:47 - for all the cells that are here so now
128:49 - let's do that so the simplest thing that
128:52 - you can do is just copy
128:55 - and well you can duplicate this and for
128:57 - example for b9
128:59 - or actually for c8 you can just uh
129:02 - change here c and c and then you can
129:05 - write c six and then c seven so that's
129:09 - what you can do but now i'm gonna show
129:11 - you a better way to do this with a for
129:14 - loop so i'm gonna delete this
129:17 - and i'm going to comment this out so
129:19 - instead of doing this
129:21 - manually like for every column you have
129:24 - we can use a for loop so
129:27 - first we're going to use these
129:29 - references that we had before so we're
129:31 - gonna use the minimum and maximum
129:34 - columns and rows so here
129:37 - first i'm gonna look through the rows
129:39 - that we have here
129:40 - so let's see which rows or actually
129:43 - let's see which columns we're going to
129:45 - use because we're going to
129:46 - sum
129:47 - these
129:48 - columns between b and g so
129:52 - i'm going to use the columns that are in
129:54 - this range so from b
129:57 - to g
129:58 - and to do that we have to use the
130:02 - minimum column plus one so minimum
130:04 - column is a plus one b
130:07 - and the maximum column so okay let's do
130:10 - this so first minimum column plus one
130:15 - so basically this is the
130:17 - the range
130:19 - where our data is so as you might
130:21 - remember from previous videos this was
130:24 - in jello and this belong to our data so
130:27 - b to
130:29 - g
130:30 - okay so minimum column plus one and then
130:33 - the maximum column
130:35 - so these are our two references and we
130:37 - need to loop through this
130:39 - uh range so to do that i'm going to use
130:43 - the range method so i write here range
130:48 - open parenthesis and then we have to
130:50 - write the minimum value and the minimum
130:53 - value is min underscore column plus one
130:57 - and then we have to write the maximum
130:59 - value
131:00 - but when we use range we have to write
131:02 - always the maximum value plus one
131:05 - because range gets
131:08 - this value minus one so it's kind of
131:10 - tricky i'm gonna show you here but first
131:13 - i'm gonna use this for loop so for i
131:16 - in range
131:18 - and then let's print this
131:20 - so first i'm gonna print let's say from
131:23 - 1 to 10 so 1 to 10 so you can see what
131:26 - i'm talking about so then i print i
131:30 - and let's see here i'm not going to save
131:32 - this so i just want to show you how this
131:34 - works so when we print a range from one
131:38 - to ten you see that we got one two three
131:41 - until nine so we got the last element
131:44 - minus one so that's why i said before
131:46 - that we have to use here plus one so if
131:49 - we write here plus one we actually get
131:52 - the number 10
131:54 - so that's why here
131:56 - i'm gonna delete this i'm using max
131:58 - underscore column plus one because i
132:00 - want to get the maximum column here so
132:04 - now i'm gonna print i and we can see the
132:07 - results so here
132:09 - we got from two
132:10 - until seven and that's correct because
132:12 - here we want from b
132:15 - until g so b is number two and g is
132:18 - number seven so that's great we got the
132:21 - columns here so we got from two until
132:24 - seven great now i'm gonna import
132:26 - something called get underscore column
132:29 - underscore ladder and to do that we have
132:31 - to write from open pi xl that
132:35 - utilities or actually it's just utils
132:39 - and then we have to
132:40 - write import
132:42 - get underscore column underscore letter
132:45 - and this helps me get the letter from a
132:47 - column so i'm gonna show you here
132:49 - i'm gonna just
132:52 - right here get underscore column
132:54 - underscore letter and inside parentheses
132:56 - i write the i so here if i print i'm
133:01 - going to print i and then i'm going to
133:03 - print this
133:04 - so we can compare
133:06 - the values so here
133:09 - i run this
133:10 - and as you can see we get 2 for the
133:12 - column b we get 3 for column c and we
133:16 - get 7 for column g so as you can see
133:19 - this gets the letter based on the number
133:23 - so if we give 7 this returns g if we
133:27 - give 2
133:29 - this returns b so that's what get
133:32 - underscore column underscore letter does
133:34 - and we're going to use these letters to
133:36 - create this
133:38 - formula so here i'm going to copy and
133:41 - paste it so we can see much better what
133:44 - we're gonna do
133:45 - so here instead of writing b8 for
133:48 - example i'm gonna open an f string and
133:52 - i'm gonna open here
133:54 - curly braces to make this a variable so
133:56 - instead of writing b i'm going to use a
133:59 - letter so here
134:00 - i'm going to delete this
134:02 - and i'm going to set this equal to
134:04 - letter so this is my variable letter
134:07 - equal to and well this expression so
134:10 - here we got the letter for example
134:12 - letter b
134:13 - and then instead of writing here b i'm
134:15 - gonna write letter
134:17 - so
134:18 - we got here
134:20 - the letter and the number
134:22 - so now i'm gonna do the same here in the
134:24 - formula i'm going to open here this f
134:27 - string and then instead of writing b
134:30 - here i open square brackets twice
134:34 - and then i write letter
134:35 - [Music]
134:37 - here and here so we have letter
134:40 - and well with this we have the letter in
134:43 - our formula and actually we can do the
134:45 - same here so instead of b
134:48 - again one more time later and well this
134:51 - is done and finally we have to change
134:53 - the numbers so instead of writing 8 we
134:55 - have to use reference in this case i'm
134:58 - going to use the maximum and minimum
135:00 - rows so for example here we had
135:03 - b8 and this represents this cell b8 and
135:08 - this is the maximum row plus one so this
135:12 - sum formula is always going to be
135:14 - located one cell below
135:16 - our pivot table so we only have to sum
135:19 - the last row of our pivot table or the
135:22 - maximum row of our pivot table plus one
135:26 - and this guarantees that we're gonna get
135:28 - this uh cell that we have here v8 so for
135:30 - example
135:32 - row seven plus one is eight so we got
135:34 - this row eight
135:37 - so
135:38 - now let's write this here so instead of
135:40 - writing eight we have to write
135:43 - the maximum row
135:45 - plus one
135:47 - and well the same goes here
135:50 - maximum row plus one and as you might
135:53 - expect the formula is always going to be
135:55 - located in maximum row plus one so that
135:58 - always happens
136:00 - and well then we have to edit this
136:03 - number six and number seven
136:05 - so to do this we have to take a
136:09 - different approach so here let's see so
136:13 - we sum
136:14 - always the range where the data is so in
136:17 - this case
136:18 - b6 and b7
136:20 - so here we can say that the minimum
136:24 - value is always the minimum row plus one
136:28 - because in the minimum row we always
136:30 - have the headers and after the headers
136:33 - is the data so
136:35 - that always happens
136:36 - and the maximum row is going to be where
136:40 - the
136:41 - wrench ends
136:42 - so for example this one ends in b7 and
136:46 - this is exactly where our pivot table
136:49 - ends
136:50 - so
136:51 - we have minimum row plus one which is
136:53 - this and that we have maximum row so
136:56 - this is our range
136:58 - so now let's do this here so instead of
137:00 - writing
137:01 - six
137:02 - i write minimum row
137:04 - plus one
137:06 - and instead of writing seven i write
137:08 - maximum row and this is going to be true
137:10 - as long as you have a pivot table with
137:13 - this format which is actually the
137:15 - standard format for a pivot table yeah
137:18 - you always have this header and you
137:20 - always have these categories and always
137:23 - the data is here so basically this is
137:25 - going to work
137:27 - usually so now that we have this
137:30 - i'm gonna
137:31 - first
137:33 - comment this out because i'm not i don't
137:35 - wanna print this eye and what i'm gonna
137:37 - do here is print the values so i'm gonna
137:39 - comment this out and let's see if we did
137:41 - all of this correctly so i'm gonna i'm
137:44 - gonna print this
137:46 - and let's see the results so now i run
137:49 - this
137:50 - and well we get here some b6 b7 which is
137:55 - what we had here before
137:57 - but now we also have c6
138:00 - c7 d6 d7 until g6
138:04 - g7 so this is basically what's going to
138:07 - be here so
138:08 - we get all of these formulas
138:11 - and that's great because
138:13 - we did this with a for loop and we
138:15 - didn't do this with uh manually one by
138:18 - one so great
138:21 - now that we verify this is correct i'm
138:24 - gonna comment this out and i'm gonna
138:27 - uncomment this and actually i'm gonna
138:29 - delete this because i'm not gonna use it
138:31 - all right now that everything is ready
138:33 - i'm gonna uncomment this
138:35 - wb that save and i'm gonna create this
138:38 - report so i'm gonna run this
138:41 - and let's see what happens so i run this
138:45 - and now i have this file in my working
138:47 - directory so i'm gonna open this to see
138:50 - the results all right i just opened this
138:51 - file and as you can see we have all the
138:54 - formulas that we created before with the
138:56 - for loop in python
138:58 - and well as i mentioned before this is
139:00 - going to work the code that we wrote
139:02 - here is going to work as long as this
139:05 - pivot table has this format but anyway
139:07 - you can add more columns so you can add
139:10 - here more columns or you can add here
139:12 - more
139:13 - rows but well the format has to be
139:15 - something like this and that's it for
139:17 - this video in this video we learn how to
139:20 - create formulas in our spreadsheet using
139:23 - python
139:25 - alright so far we learned how to create
139:27 - our pivot table how to create formulas
139:31 - for multiple columns and also how to
139:34 - create this bar chart using python
139:36 - and now what we're going to do is
139:38 - complete this report by adding a title
139:41 - and subtitle and also
139:44 - changing the font so let's do this so
139:48 - i'm going here to the right and well
139:50 - first we have to import load underscore
139:53 - workbook from open pi excel
139:56 - so we read this excel file which i named
139:59 - report.xlsx
140:02 - and then well we have to select the
140:04 - first sheet which is the report sheet so
140:07 - once we have this
140:08 - we can
140:09 - have access to the cells so i write
140:12 - sheet and then we open square brackets
140:14 - so i want to put the title here in a1
140:18 - so what i have to do is write here
140:21 - a one
140:22 - and then we can write the title so i'm
140:25 - gonna
140:26 - put a title which is a sales report so
140:29 - this is my title and then
140:32 - i'm going to write a subtitle in a2
140:35 - and this is going to be named as the
140:37 - month so
140:38 - i'm going to write january so we have
140:41 - the title sales report and then we have
140:43 - the month
140:44 - in a2 okay now let's
140:47 - edit the font so
140:49 - i'm going to edit the font of the title
140:51 - so i write that font but first we have
140:54 - to import font from open pi excel so i
140:57 - write from open pi excel
141:00 - that styles
141:02 - import font
141:04 - so now i can use this uh font
141:08 - so i only have to write font
141:10 - and then
141:11 - we can choose the
141:12 - the font we want so in this case i'm
141:14 - going to choose arial
141:16 - so i write this
141:18 - and then we can select uh bold for
141:21 - example so i'm gonna
141:23 - set this equal to true so this title is
141:26 - going to be in bold and then we can set
141:28 - the size so i write size equal to and
141:32 - you can choose any size you want so i'm
141:33 - going to choose 20 for this
141:36 - and then we can do the same for the
141:37 - subtitle so i write sheet then a2
141:42 - that font so this is the font attribute
141:45 - and then we can change this using this
141:47 - font
141:48 - that we imported and well
141:51 - i'm going to set this equal to arial and
141:53 - here you can choose any font that you
141:55 - know from microsoft excel in my case i
141:57 - don't remember so many fonts so i'm just
141:59 - choosing arial
142:01 - so
142:02 - then i write bold equal to true and well
142:05 - size
142:06 - this one a bit smaller in this case 10.
142:10 - and well after this as usual we have to
142:13 - save the results so we write wb that
142:16 - save and i'm going to set the name as
142:18 - report
142:20 - underscore january
142:23 - so this is gonna be my file and now i
142:26 - only have to run this
142:28 - and well i'm gonna open this to see the
142:30 - results all right i just opened this
142:32 - file report underscore january and here
142:35 - we have the title sales report and this
142:38 - is in bold and well the size is 20 as
142:40 - you can see here
142:42 - and we also have the subtitle january
142:44 - and again it's in bold but now the size
142:46 - is 10.
142:47 - so we successfully created this title
142:51 - and subtitle and we could edit the font
142:53 - and that's it now feel free to go to our
142:56 - code and hover on the font class that we
142:59 - have here so you can see all the
143:02 - parameters that you can use so for
143:04 - example strike color scheme size bold
143:07 - italic and so on
143:11 - all right in this video we're going to
143:13 - put all the pieces together and we're
143:15 - going to convert the pivot table into an
143:18 - excel file so we're gonna use the three
143:20 - scripts that we created in the previous
143:22 - videos so this one added a chart and
143:25 - this one here
143:26 - added formulas and this one here added a
143:29 - title and a subtitle so i put these
143:31 - three scripts together in this script
143:34 - that i named pivot to report and well
143:37 - this is basically the same i just made a
143:40 - little change here i added a variable
143:43 - that i named month and well here we can
143:45 - set the month of the year and well this
143:48 - is going to be also the month of this
143:50 - report and since i added this here i
143:54 - changed the
143:56 - name of our
143:57 - file that is going to export it so here
143:59 - instead of writing report underscore
144:02 - january as we had before here we have
144:05 - report underscore january here what i
144:07 - did is uh introduce these uh current
144:11 - braces to put this month variable so we
144:14 - can change here for example
144:16 - march december and our excel file is
144:19 - going to have the same name report
144:21 - underscore march or report underscore
144:23 - december and also here in the subtitle i
144:27 - set that month so we have here
144:30 - in the
144:31 - report we have the name of the month so
144:34 - with that our script is done so this is
144:37 - basically the same
144:38 - that we have here in number two number
144:40 - three and number 4 but now with this
144:43 - month variable and well that input is
144:45 - going to be our pivot table that we have
144:47 - here and the output is going to be a
144:50 - report with the formulas and with the
144:53 - bar chart and well with the title and
144:55 - subtitle so now let's run this
144:58 - and well we got a message of success and
145:01 - now let's see the result and here we
145:04 - have the file so the file's name report
145:06 - underscore february and well we have the
145:08 - title we have the subtitle here we have
145:10 - the formulas for each column and well we
145:13 - also have the bar chart so we
145:16 - successfully convert this pivot table
145:19 - into this report and we could do all of
145:22 - this by putting together the scripts
145:25 - that we wrote in the previous videos and
145:27 - that's it for this video in the
145:29 - following video i'm going to show you
145:31 - how to convert this script into an
145:33 - executable file so you can automate all
145:36 - of this even more
145:40 - all right in this video i'm going to
145:41 - show you how to convert this pi file
145:44 - into an executable so right now we have
145:47 - our script which is
145:49 - a pi file and we're gonna convert this
145:52 - into an executable so we can automate
145:55 - all of this so first what we have to do
145:58 - before converting this pi file into an
146:00 - executable is importing two libraries so
146:04 - we're gonna import os and we're going to
146:06 - import also syst
146:08 - so i write os and then cis so now we
146:11 - have to create
146:13 - a path for our executable and to do that
146:17 - we're going to do this so we write os
146:20 - that path that dear name and then we
146:24 - write cis dot executable and this
146:26 - represents the path where our executable
146:29 - is going to be located so now i set this
146:31 - equal to
146:33 - application underscore path and we need
146:36 - to do this because when we convert a
146:39 - script into an executable the path
146:42 - becomes a bit messy so we need to make
146:44 - sure that we specify exactly where is
146:48 - the path where our executable is located
146:51 - so this is why we do this all right now
146:54 - instead of writing here uh the
146:58 - name of the file as we did before we
147:00 - have to join this name of the file with
147:03 - the path that we have here so here
147:06 - instead of only writing this i'm gonna
147:08 - do this so i'm gonna create an input
147:11 - path so i write input and score path and
147:15 - we set this equal to
147:16 - os
147:18 - that path
147:19 - that join and we're going to join the
147:22 - application path
147:24 - with
147:25 - the name of our file so the result is
147:28 - going to be
147:29 - the
147:30 - input path and this input path is what
147:33 - we're going to read here in load
147:35 - underscore workbook
147:36 - so here
147:38 - we need to make sure that this pivot
147:41 - table that x lsx is going to be located
147:44 - in the same folder where our executable
147:47 - is going to be located so i'm going to
147:49 - do this later when i create the
147:51 - executable file i'm going to put this
147:54 - excel file inside the same folder so you
147:56 - have to do the same okay now that we
147:59 - have the input path i'm going to create
148:01 - also an output path so i scroll all the
148:04 - way down and here instead of writing the
148:08 - name of the file i'm going to create
148:11 - an output path so i write output
148:14 - underscore path and we set this equal to
148:17 - os that path that join
148:20 - so we have to join path again and well
148:22 - again application path and we join this
148:26 - with the name of the file
148:28 - so here we write and with this we have
148:30 - the output path so i write output path
148:33 - and we
148:34 - put this inside that save and well with
148:37 - this we're going to export this report
148:40 - file inside the same folder where our
148:43 - executable file is going to be located
148:45 - so the input and the output are going to
148:48 - be in the same folder where the
148:50 - executable is going to be located and
148:52 - that's something that we should keep in
148:53 - mind all right now to customize our
148:56 - automation even more what i'm going to
148:58 - do is
148:59 - ask the name of the month so instead of
149:02 - just setting the name of the month what
149:04 - i'm going to do here is
149:06 - write month equal to and here use the
149:09 - input function so instead of just
149:12 - writing the name of the month every time
149:14 - we want to run this executable file
149:16 - we're gonna ask the name of the mod so
149:19 - i'm gonna write here introduce
149:23 - month
149:24 - so this is very cool because every time
149:27 - you run the executable file you can
149:29 - change the name of the month so it's not
149:32 - always going to be
149:33 - february but it can be march it can be
149:36 - december it can be july any month you
149:40 - want and all the changes are going to be
149:42 - seen here in the code so here when you
149:45 - set that month here
149:47 - it's going to be the same month that you
149:50 - right here so that's very cool and well
149:53 - i'm gonna delete this and with this this
149:56 - is done so now we can convert this pi
150:00 - file into executable because we already
150:03 - set the input and the output path so now
150:07 - we can open the terminal and well here
150:09 - we can run the command that converts the
150:12 - pi file into executable so to do that
150:15 - first
150:16 - we have to go to the folder where our
150:20 - script is located so in my case my
150:22 - script is named six dot
150:25 - py2exe and this script is located in the
150:29 - tutorial folder so you can see this here
150:32 - and well in the terminal i also have to
150:34 - be in the tutorial folder which is this
150:36 - one so once you are in the folder where
150:38 - your script is located you have to run
150:41 - the following command
150:42 - uh
150:43 - pi installer then hyphen hyphen one file
150:47 - and then you have to write the name of
150:49 - your script so in my case six dot pi
150:52 - hyphen two hyphen e x e that pi so this
150:56 - is the name of my script
150:58 - and well in case you don't have pi
151:00 - installer installed you can
151:02 - write pip install pi installer well in
151:05 - case you don't have it but probably you
151:07 - have this
151:08 - library installed because we already did
151:10 - this step many times in this course so
151:13 - okay
151:14 - once this is done you only have to press
151:17 - enter and after this an executable is
151:20 - going to be created into a folder named
151:23 - dist so we're going to create two
151:25 - folders a build folder and at this
151:28 - folder
151:29 - and the executable is going to be
151:31 - located inside that this folder so we
151:34 - got a message of success and now let's
151:36 - check this folder and now if we go here
151:39 - on the left panel we see that we have
151:41 - two folders the build folder and this
151:44 - folder and inside this folder we have
151:46 - this executable and now i'm going to
151:48 - open this folder so here i'm in the same
151:50 - folder but now in a different view but
151:52 - now you can see that well we have the
151:54 - executable so
151:56 - to run this first we need to put the
152:00 - pivot underscore table
152:02 - inside this folder so we put this file
152:04 - inside this folder because as i
152:06 - mentioned before we need this file in
152:09 - the same folder where the executable is
152:11 - located so now that we have this file we
152:14 - can run this executable and to do this
152:16 - on a mac i'm going to open with terminal
152:18 - so i open with the terminal and now i
152:21 - have the terminal and as you might
152:22 - remember i added an input in my code so
152:25 - here we have this input so as you can
152:28 - see is asking me for the month so it
152:30 - says introduce month so what i have to
152:33 - do here is just write the month so i'm
152:35 - going to write let's say march so this
152:37 - is the name of the month and well i
152:39 - press enter and as you can see this was
152:42 - executed so we have here a new file
152:45 - named report underscore merge dot x lsx
152:49 - and this has the report with the title
152:52 - the subtitle the formulas and the bar
152:55 - chart and well i can open this one here
152:57 - but i don't have microsoft excel so it's
152:59 - going to open with the numbers up in my
153:01 - mac and what i'm going to do is open
153:03 - this one here in google sheets so i have
153:05 - this report underscore merge and well
153:08 - you can see all this data
153:10 - was successfully created so we have the
153:12 - formulas we have the title we have the
153:15 - subtitle with the name of the month i
153:17 - set before which is march and well also
153:20 - we have this uh
153:22 - bar chart and well that's it we
153:24 - successfully automated our excel report
153:29 - in this video i'm going to show you how
153:31 - to send messages in whatsapp using
153:34 - python so you can send a message to
153:37 - anyone you want at any time you want so
153:40 - let's get started okay the first method
153:42 - to send messages in whatsapp using
153:45 - python is using a library named pi what
153:49 - kit
153:49 - this library allows us to easily send
153:52 - messages uh in whatsapp so first what
153:55 - i'm gonna do is open a terminal i'm here
153:58 - on pycharm and i'm gonna write pip
154:01 - install
154:03 - pi
154:04 - what
154:05 - k
154:05 - so this is the name of the library and
154:08 - keep in mind that i'm installing this in
154:10 - a virtual environment and i highly
154:13 - recommend you to install it in a virtual
154:15 - environment because this library has a
154:18 - lot of dependencies so you want to avoid
154:21 - some conflict so install it in a virtual
154:24 - environment so i'm gonna hit enter and
154:27 - now it's gonna install so in my case i
154:29 - have this library already installed so i
154:32 - have the message
154:34 - requirement already satisfied but
154:36 - probably it's gonna take some seconds or
154:39 - even a minute for you to install this
154:41 - library all right now that we have the
154:43 - library installed i'm going to close up
154:45 - the terminal and
154:47 - i'm going to import this library
154:50 - so i'm going to write import pi what kit
154:53 - and to send a message i write pi what
154:56 - kit that send
154:59 - what msg
155:02 - and inside i'm going to use this
155:04 - parameter so the first one is the phone
155:06 - number as you can see here the second
155:08 - one is the message the third one is the
155:11 - time in hours and the fourth one is the
155:13 - time in minutes so for the phone number
155:15 - i'm gonna write the phone number with
155:17 - the country code so we write plus
155:20 - the counter code for example in america
155:22 - i think it's plus one and then any
155:25 - number you want
155:26 - the second one is the
155:28 - message you want to send and i'm going
155:31 - to write just test
155:33 - then
155:34 - the time in hours so here i write the
155:37 - time uh i think here is
155:40 - 7 17 in the morning so i'm gonna write
155:44 - here seven
155:45 - in hours
155:47 - and then in minutes i'm gonna write 721
155:51 - now
155:52 - in the phone number i'm not gonna write
155:54 - the phone number i'm gonna hide it
155:56 - because i don't want to get any message
155:58 - so here i'm gonna define
156:00 - a variable just for the sake of this
156:03 - video which is named phone number now i
156:06 - write input and here i write
156:09 - enter phone number so every time i run
156:12 - this script it's gonna ask me for the
156:14 - phone number and i'm gonna write it so
156:16 - here i'm gonna delete this
156:19 - and i'm gonna just copy and paste it you
156:22 - don't need to define this variable you
156:24 - can write the phone number here all
156:27 - right before running this script keep in
156:29 - mind that in the browser that you use
156:32 - you need to log into whatsapp manually
156:35 - so go ahead and go to your browser
156:38 - google chrome or safari and log into
156:42 - whatsapp using the qr
156:45 - code before we run this code so i
156:47 - already did this and i'm just going to
156:49 - run this code and try it out so i'm
156:51 - going to check 7 19s now so i want to
156:55 - get the results faster so i'm going to
156:57 - put 720 so now i run this
157:00 - and i wait a couple of seconds but first
157:03 - i need to introduce that phone number
157:05 - and i paste the number and it says in
157:07 - four seconds whatsapp will open and
157:10 - after 15 seconds it will deliver your
157:12 - message so now whatsapp's opening
157:15 - now uh it wrote my message as you can
157:18 - see below on the bottom of the screen so
157:21 - now let's wait 15 seconds and it's gonna
157:24 - send the message so as you can see here
157:28 - it just sent the message which is test
157:30 - and it did it just without any problem
157:33 - now i'm going back to pi charm and i
157:36 - close this one and i'm going to show you
157:38 - different things you can do with this
157:39 - library okay you can add more parameters
157:42 - to this method and you can even close
157:45 - the window that was open so before we
157:48 - open this whatsapp window but as you can
157:51 - see the window is still there so we can
157:54 - add a parameter in the
157:56 - method to indicate that we want the
157:58 - window to close after we send the
158:00 - message so to do that we only
158:04 - i'm gonna copy and paste this one
158:06 - and we need to add two or three more
158:09 - parameters
158:10 - first is that wait time as you can see
158:13 - here the wait time is by default 15
158:16 - so i'm just gonna leave it 15 so this is
158:19 - our this is the seconds that
158:22 - you have to wait before the the message
158:24 - is delivered so i'm going to leave it as
158:26 - 15 seconds this is not so important but
158:29 - now we see this one tap underscore
158:32 - closed so this indicates whether we want
158:35 - to close the windows or note so this is
158:38 - by default set to false and we're going
158:41 - to set it equal to true so i write true
158:45 - and finally we have close time so these
158:48 - are the number of seconds that we're
158:51 - going to wait until the top is closed so
158:55 - i'm gonna set this to two seconds and
158:57 - basically what we're saying here is that
158:59 - we want the tab to close after the
159:01 - message is delivered and we're gonna
159:04 - wait only two seconds
159:06 - so
159:07 - let's run this code first
159:09 - i'm gonna just
159:11 - change the time because
159:13 - it's not 721 anymore but
159:16 - i'm going to set it to 725
159:19 - and now run so it pastes the number and
159:22 - it says in 18 seconds whatsapp will open
159:25 - and after 15 seconds the message will be
159:28 - delivered so 15 seconds here is the same
159:31 - what we said here this is the default
159:33 - but we could change it but that's not
159:35 - important for
159:36 - what we're doing right now so here
159:39 - another whatsapp window was opened
159:42 - and it says here again test as you can
159:45 - see here
159:46 - and now let's wait 15 seconds
159:49 - for the message to be delivered
159:51 - so
159:52 - just
159:53 - a couple seconds more and here it's test
159:56 - and that window or the tab was closed as
159:58 - you can see great so
160:00 - what i showed you so far is how to send
160:03 - messages to contacts so we can also send
160:07 - messages to groups so now let me show
160:10 - you how to do it so
160:11 - to send messages to a group that you're
160:14 - part of we only need to get the id so
160:18 - every group in whatsapp has an id and
160:20 - you can get the id by going to any group
160:24 - you want and
160:25 - choosing the group info section then you
160:28 - have to tap on the invite via link
160:31 - option and copy that link i already have
160:34 - the link of the group i'm gonna use for
160:36 - this video and if you didn't get it i'm
160:38 - gonna leave a guide that you can use to
160:41 - get the id of the group you want to test
160:44 - so here
160:46 - i'm gonna define first um a variable
160:49 - like we did before in phone number but
160:51 - in this case i'm gonna set this
160:54 - group underscore id so enter group id
160:58 - and this is not necessary it's just for
161:00 - the sake of this video but now
161:03 - we're gonna use pi
161:05 - what kit and here to send a messages to
161:09 - a group we have to use send
161:12 - i think it's this one send what
161:14 - msg underscore 2 underscore group
161:18 - so now the parameters are similar but
161:21 - instead of phone number
161:23 - we have to use the id of the group so
161:26 - here i'm going to set right id then the
161:30 - second is going to be the message so
161:33 - test
161:34 - group
161:36 - the third one is the time so in my case
161:39 - 7 because it's 7 in the morning and
161:42 - time in minutes i'm gonna set it to
161:45 - 31.
161:47 - so here it's basically the same
161:50 - just uh the only thing that changes is
161:53 - the id so now i copy group id and i
161:57 - paste it here
161:59 - so now we can test this out so i right
162:01 - click and run this one and now it's
162:03 - gonna ask my well my phone number
162:06 - because
162:06 - i didn't comment this out so just
162:10 - give me a second i comment this out
162:13 - and now i'm gonna run this again and
162:16 - it's asking my group id i just paste the
162:19 - group id
162:20 - i press enter and now it says in 49
162:23 - seconds that message
162:25 - whatsapp will open and then the message
162:27 - will be delivered now i'm gonna cut the
162:29 - video and i'm gonna come back when the
162:31 - automation starts so now it's working
162:34 - and it found the name
162:37 - of the group and now let's wait for the
162:39 - message to be typed below on the on the
162:42 - bottom and as you can see it says test
162:44 - group and the test group message was
162:46 - delivered to this group great we just
162:49 - learned how to send messages in whatsapp
162:51 - to contacts and to groups using pi what
162:54 - kit