00:00 - welcome to free code camp i'm commander
00:03 - candy of coding commanders and today
00:05 - we're going to learn all about set
00:07 - theory and how we can use it to write
00:08 - some really awesome code
00:11 - you're watching the second video in our
00:13 - intro to logic series if you haven't
00:15 - seen the first video yet intro to
00:18 - propositional logic you might want to
00:20 - check that out introduction to logic for
00:22 - programmers video 2
00:25 - set theory
00:26 - you'll find homework and documentation
00:29 - at codingcommanders.com
00:33 - logic.php
00:34 - as programmers and aspiring programmers
00:38 - the first question you probably have is
00:40 - how is that theory going to help me with
00:42 - programming generally speaking web
00:44 - applications tend to include a database
00:47 - server code and client-side code to
00:50 - illustrate the language relationship i
00:53 - will use an analogy for my video on
00:56 - front-end versus backend web development
00:58 - in the very front
01:00 - you'll find html and css displaying data
01:04 - to the client aka the user
01:07 - html is kind of like display shelves at
01:10 - a shop and css is kind of like the
01:13 - person who designs the shelves
01:16 - in the very back we have a database this
01:19 - is where we store data kind of like the
01:21 - shop's warehouse
01:23 - popular database management systems
01:25 - include mysql
01:27 - mongodb
01:28 - and postgres
01:30 - database design is arguably the most
01:32 - important part of your application's
01:35 - design oftentimes it's the root of your
01:37 - application
01:39 - and poor database management or
01:40 - implementation
01:42 - can slow down the entire development
01:44 - process and it can even slow down your
01:46 - entire application
01:49 - standing right in front of our database
01:52 - we have alligator server-side code woman
01:56 - she's kind of like the store manager she
01:58 - can communicate with the warehouse
02:00 - workers
02:01 - also known as the database management
02:03 - system
02:05 - she can also perform calculations
02:08 - manipulations and has security clearance
02:11 - to deal with sensitive information
02:13 - she's often in charge of the
02:15 - application's logic and infrastructure
02:18 - however
02:20 - she isn't the best at dealing with
02:21 - customers
02:23 - so at the front of the store we have our
02:25 - customer service manager
02:28 - javascript
02:29 - javascript works on the client side it
02:32 - can interact with the html and css
02:36 - it can go in the front of the house and
02:38 - talk to the designers and the clients to
02:41 - make sure our display shelves are
02:43 - displayed in a user-friendly manner she
02:46 - can also perform calculations and
02:48 - manipulations on non-secure data that is
02:51 - passed to her from alligator server-side
02:54 - code woman
02:55 - set theory is the foundation of database
02:58 - design
02:59 - a big part of server-side code and
03:02 - application design is interacting with
03:05 - the database
03:07 - so if you become a logic rockstar it's
03:10 - going to be a whole lot easier for you
03:11 - to design solid applications as a matter
03:14 - of fact in computer programming we have
03:17 - data types called arrays
03:19 - and objects
03:21 - these data types are used for storing
03:23 - sets of data these data sets are often
03:26 - directly defined by our database tables
03:30 - so next you might be wondering what is a
03:32 - set
03:34 - a set is a collection of objects or
03:37 - elements
03:38 - say you're designing a login page you'll
03:41 - deal with sets of user data each user
03:44 - object may be a set of data including
03:46 - username email and password
03:49 - users
03:50 - might be a set of user objects
03:54 - in mathematics we say
03:56 - x is an object and s is a set if the
04:00 - above statement's true
04:02 - then x can either belong to s
04:05 - or x cannot belong to s
04:08 - if you remember back to my intro to
04:10 - propositional logic video a proposition
04:13 - is a statement that can either be true
04:15 - or false
04:16 - the statement x is an element of s
04:19 - can be true
04:21 - x or false
04:23 - it could be true or it could be false
04:25 - but it can't be both in mathematics
04:28 - if it's true we say x is an element of s
04:32 - and it's denoted just like you see
04:34 - and if x is not a member of s we denote
04:38 - it like this
04:39 - let's say set s is equal to all possible
04:42 - even numbers
04:44 - you tell me are the following statements
04:46 - true or false
04:48 - 2 is an element of f
04:50 - yes that is true 2 is an even number
04:55 - 3 is an element of s
04:58 - nope 3 is odd it's not even
05:02 - 7 is not an element of s
05:05 - that's true 7 is not an element of s
05:08 - because 7 is odd
05:11 - how do you define a set there's two ways
05:13 - to define a set
05:15 - the first way is by extension
05:17 - and we do that like so by putting values
05:20 - into curly brackets
05:22 - we have s equals
05:24 - 2 4 6
05:26 - and then we have x equals an empty set
05:29 - there's no values in there
05:31 - and y equals
05:34 - basically all even numbers starting at
05:37 - two what that dot dot dot means is that
05:39 - the pattern's going to continue so y is
05:42 - going to equal 2 4 6 8 10 12 and so on
05:47 - the second way we can define a set is by
05:49 - intention that's definition by
05:52 - membership conditions
05:54 - so we could say
05:56 - x is a member if x is an even number or
06:00 - in the second example x is a member such
06:02 - that x is an even number
06:04 - and it's also greater than zero
06:09 - s is going to equal the set of all real
06:12 - counting numbers so tell me are these
06:13 - statements true or false
06:16 - one is an element of s
06:18 - true
06:20 - 1000 is an element of s 1000 is a real
06:24 - counting number that is true
06:28 - negative 1 000 is not an element of s
06:32 - that is true as well x such that x
06:35 - equals three
06:37 - x plus negative three equals zero
06:42 - true because three plus negative three
06:44 - equals zero
06:46 - x is less than zero
06:49 - er
06:50 - false
06:52 - if x equals three then x must be greater
06:55 - than zero so this is false
06:59 - x is greater than two true because three
07:03 - yes indeed is greater than two
07:07 - sets are equal if they contain the exact
07:09 - same elements
07:11 - and order doesn't matter
07:13 - so if s equals one two and three
07:16 - and t equals two three and one
07:19 - s and t are still equal sets
07:23 - and if sets are equal
07:25 - remember by conditionals from intro to
07:27 - propositional logic x is an element of s
07:32 - if and only if x is an element of t
07:36 - subsets
07:38 - if all of a's elements are contained in
07:41 - b
07:42 - then we say a is a subset of b
07:46 - if a is a subset of b
07:48 - and x is an element contained in a
07:52 - then x has to also be an element
07:55 - contained in b
07:57 - null set
07:59 - that means it's completely empty there's
08:01 - no values in it
08:03 - and we write it like that
08:05 - union okay
08:07 - look at that diagram with a and b
08:10 - a union b
08:13 - x such that x is an element of a
08:17 - or x is an element of b
08:20 - if you look in the diagram
08:22 - everything in a
08:24 - and everything in b
08:26 - is going to be included in a union b
08:30 - x belongs to a
08:32 - or it could belong to b
08:34 - either one
08:36 - intersection
08:38 - intersections going to be this area i
08:41 - tried to make it kind of purple
08:43 - combining the blue and the pink
08:47 - x such that x is an element of a
08:50 - and x is an element of b
08:53 - a minus b
08:55 - x such that x
08:57 - is an element of a
08:59 - and x is not an element of b
09:02 - okay
09:03 - so if you look here this white area
09:05 - that's not shaded
09:07 - that would be a minus b that's the
09:10 - elements contained in a that a and b
09:14 - cartesian products okay
09:18 - just relax for a second and sit back and
09:20 - just get the concept the cartesian
09:24 - product is the product of two sets
09:27 - say a is a set which contains the values
09:29 - a b and c
09:31 - and b is a set that contains the values
09:34 - x and y
09:37 - we would write the cartesian product as
09:40 - a times b and it's going to equal all
09:42 - possible ordered pairs
09:45 - ordered pairs are when we take
09:49 - an element in a
09:51 - and we match it with an element in b
09:54 - so all possible ordered pairs are going
09:56 - to be
09:57 - ax
09:59 - a y
10:01 - bx
10:03 - b y
10:04 - c x
10:06 - and c y
10:09 - most programming languages also have
10:11 - some predefined functions that are going
10:14 - to help us find values within a set
10:17 - because of that i'm going to spare you
10:19 - all the mathematical
10:21 - equations to calculate these things
10:24 - most of them i think we know what they
10:25 - mean
10:26 - like we might have a set of values and
10:28 - we want to find out what's the biggest
10:30 - value in there that would be finding the
10:34 - max value of the set
10:36 - most programming languages have a
10:38 - function for that if we want to find the
10:40 - smallest value in a set
10:42 - we'll look for the minimum most
10:44 - programming languages have a function
10:46 - for that for search we we could want to
10:48 - search for all kinds of things and
10:50 - programming languages do tend to have
10:52 - different predefined functions where you
10:55 - might be searching for a particular
10:57 - string
10:58 - um say you want to return any members of
11:00 - the set that contain
11:04 - img you're looking for image content
11:07 - or maybe you're looking for specific
11:09 - value
11:10 - maybe you are looking for the blog
11:12 - article that was posted on a specific
11:14 - date so you're searching through the
11:16 - dates for the one that matches
11:19 - most programming languages have
11:21 - predefined functions to handle all this
11:23 - kind of stuff
11:25 - so let's do an example okay
11:27 - you're making a game when the game ends
11:30 - the high score list is displayed there
11:32 - are 10 spots on the high score list
11:35 - write the code
11:37 - okay so first let's do our logic thing
11:41 - let's let t equal total score
11:44 - h equal high scores and s equals
11:47 - show high scores
11:52 - just in case the total score qualifies
11:54 - we're going to have a function written
11:56 - somewhere to add that score to the high
11:58 - score list
11:59 - we want the code add score to execute if
12:03 - and only if
12:05 - total score is an element
12:08 - on the high score list
12:11 - and total score is going to be included
12:14 - as a member on the high score list
12:17 - if and only if
12:19 - the total score is greater
12:22 - than the minimum score on the high score
12:25 - list the smallest value there
12:28 - and regardless
12:30 - we are going to display the high score
12:32 - list somewhere we're going to have a
12:34 - function with code to display the top 10
12:38 - scores and if your total score qualifies
12:42 - you will see your name and score there
12:45 - so let's write it in php
12:48 - we have dollar sign total score
12:51 - equal to a function that we have written
12:53 - out elsewhere which calculates the
12:55 - current player's total score
12:58 - dollar sign high scores is going to
13:00 - equal another function that we have
13:03 - someplace else which fetches i probably
13:05 - have a query there to go ahead go to the
13:09 - database get those 10 high scores
13:12 - and we'll store it in dollar sign high
13:15 - scores
13:18 - dollar sign min in php we do have a
13:20 - predefined function to find the minimum
13:22 - value in a set so dollar sign min is
13:26 - going to equal
13:27 - the minimum
13:29 - of dollar sign high scores
13:31 - if total score is greater than the
13:33 - minimum
13:35 - then we're going to execute the code to
13:36 - add the total score to the high score
13:38 - list
13:41 - and no matter what in any case
13:44 - we will display the high score list for
13:46 - everybody to see if you made it as a
13:49 - member on the high score list you will
13:51 - see your name there if you did not you
13:53 - will still see the chosen ones who did
13:57 - make it on the high score list
13:59 - now let's check it out in javascript
14:03 - we have var total score equaling that
14:06 - function to calculate the current total
14:09 - score
14:10 - we have our high scores equaling that
14:12 - function to go the database and get the
14:15 - high scores
14:16 - we have var min
14:18 - equaling in javascript we also have a
14:21 - predefined function to find the minimum
14:23 - value in a set
14:25 - and if total score is greater than that
14:27 - minimum we're going to execute the code
14:29 - to add that total score to our high
14:31 - score list and no matter what in any
14:35 - case we're gonna go ahead and we're
14:37 - gonna display the high score list for
14:40 - the player to see
14:42 - thank you for watching my video don't
14:44 - forget to go to
14:45 - codingcommanders.comlogic.php
14:51 - with logic programming math the only way
14:53 - you get better is by practice you watch
14:56 - the video you learn the concept then you
14:58 - have to apply it so please check out the
15:00 - homework
15:02 - the last video i had a little quiz
15:05 - for homework this time i have three word
15:07 - problems if you have any questions
15:10 - please feel free comment on this video i
15:13 - will be checking the comments if you
15:15 - complete the homework and you feel like
15:18 - you want me to look it over you can go
15:20 - ahead upload it to gitlab github
15:24 - wherever you want
15:25 - tweet the link make sure to mention me
15:27 - and free code camp i will try to get to
15:31 - everybody if you do reach out and it's
15:34 - been like a couple days you haven't
15:36 - heard from me
15:37 - feel free to give me a little nudge in
15:40 - the next video of the intro to logic for
15:42 - computer programmer free code camp
15:45 - series i am going to apply all the set
15:49 - theory we learned today test some actual
15:52 - sequel
15:53 - to learn how to make awesome databases
15:56 - using set theory thank you again for
15:59 - watching my video and until next time
16:01 - happy coding