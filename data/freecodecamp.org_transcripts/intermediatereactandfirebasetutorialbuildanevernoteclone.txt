00:00 - all right guys so in this tutorial
00:01 - series we're going to be creating an
00:03 - evernote clone and it's going to be
00:05 - almost a fully functional evernote clone
00:07 - there's going to be certain features
00:08 - that we're not going to be implementing
00:10 - in this tutorial such as users although
00:12 - i do have another video previous video
00:14 - that i created where we do go over that
00:16 - so if you'd like to learn more about
00:18 - that there is a link in the description
00:19 - below for that video series but in this
00:22 - video we're just going to focus on
00:23 - evernote we're going to be using
00:24 - firebase and we're going to be using a
00:26 - library called react quill
00:28 - so i
00:29 - think it's time for us to go ahead and
00:31 - demonstrate what it is we're going to be
00:32 - making in this app so i can come over
00:34 - here and click new note and enter a new
00:36 - title let's call it new note
00:38 - i submitted the note and as you can see
00:40 - it selects it automatically and over
00:42 - here on the right we have a text editor
00:44 - and we can edit the title i'll just call
00:46 - it like new note 2.
00:48 - and then i can come down here you can
00:50 - see it updated live and i can go heading
00:52 - 1 this is a header
00:56 - and again you can see it updates live
00:58 - over here and so i can you know just
01:01 - this is some more text you know just to
01:04 - show that we can have different size
01:06 - texts and everything
01:07 - create another note we'll just say test
01:10 - list
01:11 - and come in here and create a list you
01:14 - know
01:15 - one
01:18 - two
01:19 - three
01:20 - so you can see we can create lists we
01:22 - can make text bold
01:25 - and it updates live over here and i can
01:27 - go through and select each note i can
01:28 - also delete my notes and it says are you
01:31 - sure you want to delete note 2 i'll
01:32 - click yes and it goes ahead and selects
01:34 - the previous one automatically for me
01:35 - and i'll delete this one as well
01:37 - and that is what we're going to be
01:38 - making in this tutorial series
01:40 - so i'll come over to here to firebase
01:42 - you're going to want to go to
01:44 - console.firebase.google.com make sure
01:45 - you create a firebase account you can
01:46 - just go to firebase create an account
01:48 - and once you have the account go to
01:51 - console.firebase.google.com and you'll
01:52 - be presented with this go ahead and
01:54 - click add project and inside of here
01:56 - we'll just call it evernote clone
01:59 - and make sure you check this box and
02:01 - this box and click create project
02:04 - once that finishes go ahead and click
02:06 - continue and you'll see this dashboard
02:10 - screen over here on the left click
02:12 - database now firebase has two different
02:14 - types of databases they have cloud
02:16 - firestore and the real-time database
02:18 - real-time database is their older
02:20 - original database and firestore is their
02:22 - newer database so that's what we're
02:24 - going to be using
02:25 - when you click create database just make
02:27 - sure you click it under cloud firestore
02:29 - and not realtime database
02:31 - so let's go ahead and click create
02:33 - database go ahead and start it in the
02:35 - test mode click next
02:37 - go ahead and click the um select the
02:41 - location nearest you and then done and
02:43 - then wait for that to finish
02:45 - once that finishes you'll be brought to
02:47 - this screen right here this is going to
02:49 - be basically a data table that shows a
02:52 - visual representation of your data
02:53 - inside of the database now if i click
02:55 - this rules area here you can see that
02:58 - it's very similar to javascript it's a
03:00 - little different but it's got similar
03:02 - syntax and you can see here it says
03:04 - allow read write and what that's saying
03:06 - is you can both read and write from this
03:09 - no matter what if you're not
03:10 - authenticated it doesn't matter who you
03:12 - are or
03:14 - any of that you can read and write to
03:15 - this database so in a production
03:17 - environment you're not going to want to
03:19 - have this you're going to want to have
03:19 - very strict access rules and you're
03:21 - going to want to set up authentication
03:23 - for your app but we're not going to be
03:24 - doing any of this in this tutorial i do
03:27 - have a video where i do go over
03:29 - authentication creating login forms and
03:31 - sign up forms all through firebase i
03:33 - will include a link in the description
03:35 - for you to watch that tutorial series
03:37 - which includes those topics but we're
03:39 - not going to go over that in this
03:40 - particular video
03:42 - so
03:42 - just keep that in mind and so when we
03:45 - use and we set up our firebase within
03:47 - the app itself we're going to be
03:49 - exposing our api key so if anybody were
03:51 - to get a hold of that they could just
03:52 - use your um your firebase so what i do
03:56 - is i
03:58 - delete my key once i'm done with the
04:01 - tutorial series or just don't show
04:03 - anybody your api key either to
04:06 - either of those you'll be fine just make
04:08 - sure you don't give away your api key to
04:10 - anybody
04:12 - so
04:12 - now that that is now that that's been
04:14 - said we can go to project overview here
04:18 - and then you go ahead and uh click this
04:20 - this little uh icon right here that
04:23 - looks like two html brackets and when
04:25 - you click that
04:27 - just
04:28 - name this evernote tutorial
04:32 - leave this unchecked and click register
04:34 - app
04:36 - and then once that finishes go ahead and
04:39 - i want you to
04:40 - copy this object right here don't
04:42 - include the script tags just copy what's
04:45 - inside of here and actually you don't
04:47 - have to copy it right now we'll uh um
04:49 - just keep this in mind keep this window
04:51 - open keep this right here and we'll get
04:52 - back to this shortly let's go ahead and
04:54 - install all of our dependencies for the
04:56 - project first and then we'll paste this
04:58 - into our application
05:00 - so we will be using create react app in
05:02 - order to initialize the react
05:04 - application project
05:06 - so
05:07 - go ahead and go to this link i will
05:09 - include it in the description
05:10 - so once you get to this link you'll see
05:12 - instructions on how to install create
05:14 - rack react app it's extremely simple and
05:16 - it is a facebook tutorial on how to do
05:19 - it it's very very short very very simple
05:21 - go ahead and install that and once you
05:23 - do have that installed open up your
05:25 - terminal window i'm going to be using
05:27 - windows you can use any terminal window
05:28 - from either linux
05:30 - mac or windows to follow along but let
05:33 - me increase the font size of this really
05:35 - quick so you can see all of this
05:37 - okay that should be quite a bit better
05:38 - for you so go ahead and navigate to
05:41 - wherever you want your project to be so
05:43 - i'm going to be inside of my documents
05:45 - folder or actually dropbox so go ahead
05:47 - and just navigate to wherever you want
05:49 - your project to be and i'm going to say
05:50 - create
05:51 - react
05:52 - app just like that and then you're going
05:54 - to want to put the name of the app so
05:55 - i'm going to say evernote
05:57 - evernote tutorial
06:00 - and then when you click enter it's going
06:01 - to actually go ahead and install
06:04 - this uh this
06:06 - project directory tree
06:08 - um
06:09 - that's basically ready for you to get
06:11 - started on react so let's go ahead and
06:14 - wait for this to finish
06:15 - okay so once that finishes we're gonna
06:17 - want to go ahead and install our first
06:18 - dependency we're going to be using
06:20 - material ui for this which is going to
06:22 - be
06:23 - a library that allows us to make styling
06:26 - very easy it's going to handle a lot of
06:27 - things it just includes react components
06:30 - that we can use that makes things look
06:31 - pretty by default essentially so that we
06:34 - can focus solely on react and not have
06:36 - to worry about writing a ton of css
06:38 - so let's go ahead and start
06:41 - we're going to say npm install
06:44 - at material hyphen ui
06:47 - slash core so go ahead and install that
06:51 - and once that's done go ahead and do npm
06:54 - install
06:55 - at material
06:57 - hyphen ui icons and this is going to
06:59 - give us a ton of icons to be able to use
07:01 - which i think we're only going to be
07:02 - using two icons the trashcan for delete
07:05 - and the pencil and paper for edit so go
07:07 - ahead and wait for that to finish
07:09 - okay and for our text editor we'll be
07:12 - using react quill which is an open
07:13 - source library so we will say npm
07:16 - install react hyphen quill q
07:20 - uil go ahead and install that
07:24 - and finally we're going to go ahead and
07:25 - install firebase so npm
07:28 - npm install firebase
07:30 - so let that finish really quick
07:33 - all right so that's going to be all of
07:35 - our dependencies here so i'm going to go
07:36 - ahead and clear my console and actually
07:38 - just type in npm space start to go ahead
07:41 - and get react up and running just to
07:43 - make sure everything is running smoothly
07:45 - so once this pops up
07:48 - i'll also go ahead and open up my
07:49 - console just to see if we have any
07:50 - errors and we do not so it looks like
07:52 - everything installed
07:53 - properly
07:55 - so
07:56 - over here
07:57 - go ahead and let's make sure we have
07:59 - this uh this
08:01 - stuff copied here and now that we have
08:04 - our firebase config copied let's go
08:06 - ahead and put it inside of our app just
08:08 - to get that part knocked out so we don't
08:10 - have to worry about it in just a moment
08:12 - so i've got my directory opened up now
08:14 - and i'll go into my source folder here
08:15 - and you want to open your index.js file
08:18 - so we're going to want to do a quick
08:19 - require so we're going to say const
08:22 - firebase is equal to require
08:25 - and then inside of here we want to put
08:26 - inside of quotes firebase so we're
08:29 - requiring firebase and then underneath
08:31 - this we want to just go ahead and say
08:33 - require
08:35 - and then it quotes firebase
08:37 - slash firestore oops there we go
08:41 - cool so under this you remember we
08:43 - copied that stuff from firebase so
08:45 - make sure you have that copied and let's
08:47 - go ahead and paste that here
08:49 - now i'm going to change var to const
08:52 - and i'm going to get rid of these two
08:54 - comments right here
08:56 - all right and what i like to do just to
08:58 - make it
08:59 - it might not actually be cleaner but
09:01 - this is the way i like to do it i like
09:02 - to get rid of this variable here just
09:04 - get rid of the variable and then just
09:06 - take the actual object itself
09:10 - and paste it in between the
09:12 - parentheses there that's just how i like
09:13 - to do it but you can do it either way
09:16 - so now we have firebase initialized
09:18 - inside of our application i'm saving it
09:20 - right now and i'm coming over to the
09:23 - react app just to make sure i don't have
09:24 - any errors
09:26 - and it says here it looks like you're
09:28 - using the development build of firebase
09:30 - js sdk now this is perfectly fine this
09:33 - is saying we're using the development
09:34 - build which is fine because we are in
09:36 - development now we're going to be
09:38 - getting this message throughout the
09:39 - entire tutorial so we can safely ignore
09:42 - this particular message so as you see it
09:44 - here in the console as we work through
09:46 - the tutorial just ignore this it's fine
09:49 - all right moving on
09:51 - so the first thing i like to do is i
09:53 - like to come in here and delete all this
09:54 - default stuff that comes with
09:57 - the
09:57 - default react app so i go into app.js
10:00 - here and inside of this return
10:03 - i'm actually i'm going to get rid of
10:05 - this whole thing and make it a class so
10:07 - i'll come in here and say class
10:08 - app
10:10 - extends
10:12 - react.component
10:14 - and now we have a class instead of a
10:16 - function which the class needs to
10:19 - actually um
10:20 - needs to implement the render function
10:24 - and inside of the render function you
10:26 - have to return some html so for now i'll
10:28 - put in a div that just says hello world
10:33 - cool so i'll save that and let's see
10:35 - what we end up with really quick
10:37 - we have hello world here cool so as most
10:39 - of you probably know the way that this
10:41 - works is inside of the index.js file we
10:43 - have this app element which is
10:45 - represented by this app class here
10:47 - because we are imp uh we are importing
10:49 - it right here and what this is doing is
10:52 - react dom dot render takes whatever's
10:54 - inside of here does some react magic to
10:58 - uh turn it into actual code
11:01 - that um basically we write it in a react
11:04 - way and then it takes that react way and
11:07 - turns into actual code that the browser
11:09 - understands and then it pushes it into
11:12 - document.getelementbyid
11:14 - root
11:15 - and if i come in here you can see if i
11:17 - go to elements
11:20 - expand this get rid of this
11:22 - if i go inside a body here you can see
11:23 - there's this div here with an id of root
11:26 - and everything inside of the react
11:28 - application is going to get injected
11:30 - inside of this div called root
11:33 - so
11:34 - you don't actually have to you know i
11:36 - really want you guys to understand react
11:38 - so let's go into the
11:40 - public here and inside the
11:42 - index.html you can see
11:44 - that that div is actually right here
11:46 - with root so what i want to do just to
11:48 - kind of show you and get you really
11:50 - comfortable with this sort of idea is
11:52 - instead of call it root i'm going to
11:53 - call it
11:54 - evernote
11:56 - container
11:57 - so go ahead and call this evernote
11:59 - container and i want you to save it and
12:01 - then i want you to take that copy it
12:04 - and paste it inside of here
12:07 - so now we're injecting it inside of a
12:09 - div called evernote container instead of
12:11 - root and i want you to save both of
12:12 - those files and come back in here and
12:14 - notice that it works still and if you
12:16 - come back over here you can see that
12:17 - that div has an id of evernote container
12:20 - so that's just to kind of get you a
12:21 - little bit comfortable with how react is
12:24 - working in that it's not entirely magic
12:26 - you can actually come in here and change
12:28 - some of these things
12:30 - it's not mandatory you can actually
12:31 - extend it too this is all open source
12:33 - you don't have to
12:35 - be afraid of react
12:37 - all right there's actually one more
12:38 - thing we need to add so inside of the
12:39 - source folder create a new file call
12:41 - that
12:43 - helpers.js and inside of here we're
12:44 - going to paste some stuff
12:46 - go to the source code the source code is
12:48 - going to be linked in the description of
12:49 - this video go ahead and go to that
12:50 - source code find the helpers.js file and
12:53 - paste this in so what this is going to
12:56 - be
12:57 - we have a debounce function which is
12:59 - going to be helpful for us because what
13:01 - when we are typing inside of the text
13:04 - editor we're going to want to update the
13:06 - database live however we don't want to
13:08 - send um we don't want to send requests
13:11 - every
13:12 - every single time we type a a letter
13:15 - we're going to want to wait for the user
13:17 - to stop typing for
13:19 - about a second or so
13:21 - maybe two seconds before we update the
13:23 - database so that we're not just going
13:25 - crazy on the database with all these um
13:27 - calls these http calls so we're going to
13:30 - be using a debounce function right here
13:31 - and then we're also going to have this
13:32 - export function
13:34 - remove html tags that function is going
13:37 - to be
13:38 - for our preview on the left sidebar
13:42 - whenever we see the list of notes we're
13:44 - going to
13:46 - we're going to remove the html for the
13:48 - preview and basically react quill the
13:52 - text editor
13:54 - library that we're using actually stores
13:57 - it
13:58 - it displays it as actual html so we're
14:00 - going to be saving html as a string to
14:03 - the database
14:05 - so when we display the preview in the
14:08 - sidebar we don't want to show the html
14:10 - tags that would just look weird so we
14:12 - have this function here that's going to
14:14 - be removing the html from that so we can
14:18 - just see the plain text preview
14:20 - so for the majority of the
14:23 - application we're going to be using
14:25 - something called width styles which is
14:27 - actually going to be from material ui
14:30 - instead of writing plain css but there
14:33 - is going to be a little of plain css for
14:35 - the app level
14:37 - project so go ahead and open up your
14:38 - app.css and we want to go ahead and
14:40 - remove all this stuff this was just the
14:42 - default css that we saw when we first
14:44 - started up our react application with
14:46 - react create react app it had the big
14:49 - you know react logo and it was spinning
14:51 - around and doing cool stuff we don't
14:52 - need any of that so go ahead and remove
14:54 - all that
14:55 - go to the source code and in the source
14:58 - code you'll find app.css go ahead copy
15:00 - all of that and paste it in here we
15:02 - don't want to worry about css in this
15:03 - tutorial so we're going to be copying
15:06 - all of our styles from the source code
15:07 - and pasting that stuff in so go ahead
15:09 - and save your app.css file
15:12 - cool so we're ready to go ahead and get
15:14 - started so let's go ahead and remove
15:15 - this import logo from the svg here we're
15:19 - not going to be using that that's just
15:20 - the react logo that's included with the
15:21 - project so what we want to do is start
15:24 - with the constructor and inside of this
15:25 - constructor we have to go ahead and
15:27 - implement the super
15:29 - and
15:30 - then what we'll do is create some
15:32 - initial state so we'll say this.state is
15:34 - equal to and inside of this object we're
15:37 - going to have three slices of state one
15:39 - is going to be called selected note
15:41 - index and that will be set to null by
15:44 - default
15:45 - these will all be null by default so
15:47 - selected note as well that'll be
15:51 - null and then notes which will be the
15:53 - array of all of the notes that we have
15:55 - and that will also be null
15:57 - so now that we have our initial state
15:59 - what we want to do is underneath the
16:00 - render function we want to go ahead and
16:02 - implement the
16:04 - react hook called component did mount
16:06 - and what that is is whenever the
16:09 - this particular component the app
16:11 - component is loaded successfully inside
16:13 - of the dom this will get called
16:15 - automatically by reacted as a life cycle
16:17 - hook that is built into react so let's
16:20 - go ahead and implement component did
16:22 - mount
16:25 - and we want to go ahead and
16:28 - go into firebase grab all of the notes
16:30 - and then set our state with the notes
16:32 - this little slice right here but in
16:34 - order to do that we actually have to
16:35 - come up here and import firebase really
16:37 - quick so underneath all of these imports
16:39 - let's go ahead and say const firebase
16:43 - is equal to require
16:46 - and then firebase
16:49 - cool so now we have access to firebase
16:51 - so we want to save firebase and then
16:54 - that's going to be dot firestore
16:56 - and i'm actually going to put these on
16:58 - individual lines so it's easier for you
16:59 - guys to see
17:00 - so dot firestore dot
17:03 - collection
17:04 - and what collection is is it's basically
17:06 - very similar to a table in a database
17:09 - our collection we're going to name notes
17:12 - so we'll go ahead and name that notes
17:14 - and i'll show you in just a moment what
17:15 - that looks like in that little table
17:17 - visualizer on firebase but
17:19 - for now just follow along
17:21 - so dot collection notes dot on snapshot
17:24 - now what on snapshot is this is actually
17:26 - very interesting this is very powerful
17:29 - on snapshot
17:30 - is going to automatically get called
17:33 - whenever
17:34 - this notes collection is updated inside
17:37 - of firebase so whenever something gets
17:39 - updated inside of the notes collection
17:41 - at firebase the function that we pass
17:44 - into on snapshot will get called and
17:47 - that specific
17:48 - function is going to be passed a
17:51 - an argument automatically that we're
17:52 - going to be calling server update
17:55 - so that's going to be the argument for
17:57 - the function that we're passing into
17:58 - this and let's go ahead and create a
18:02 - const called notes
18:04 - which is going to be our array so we
18:06 - want to go ahead and set that equal to
18:07 - serverupdate.docs
18:09 - and docs is a property of the server
18:11 - update
18:12 - parameter i'm sorry docs is a
18:16 - property of the server update object
18:18 - that's getting passed into our function
18:20 - and we want to map it and so if you're
18:22 - not super familiar with the map function
18:24 - in javascript i've got a really good
18:26 - tutorial on that go ahead and look in
18:28 - the description and watch that tutorial
18:30 - it's very short but it's got a visual
18:32 - representation of how map works inside
18:34 - of javascript and if you're not very
18:36 - familiar familiar with it i highly
18:38 - recommend you
18:39 - watch that tutorial really quick because
18:41 - we're going to be using it a lot in this
18:42 - tutorial series so let's go ahead and
18:45 - say for each doc
18:47 - we want to create a const called data
18:50 - and set it equal to doc dot data which
18:52 - is a function
18:54 - which grabs the data from the doc
18:56 - and we want to cr
18:59 - add a
19:01 - a property to our data object that we're
19:02 - creating
19:04 - called id
19:08 - so data
19:09 - will literally just be equal to
19:11 - doc
19:13 - dot id and then we're going to return
19:15 - that so we'll return data
19:18 - so we successfully have an array of all
19:20 - of the notes and then we want to go
19:22 - ahead and update our state so this dot
19:23 - set state
19:26 - and inside of here we want to update the
19:28 - notes slice of our state with our notes
19:30 - that we just created right here so we're
19:32 - setting
19:33 - our notes state equal to this array that
19:35 - we
19:36 - we just mapped right here so we don't
19:38 - have anything inside of we don't have
19:40 - any notes so we can't really see what
19:42 - this looks like yet but what i want to
19:43 - do is go ahead and con create a
19:45 - console.log statement console.log
19:48 - notes
19:49 - and i want to save it because i want to
19:50 - show you guys what this looks like
19:53 - so as you can see we come here and when
19:55 - i go to the console we have an empty
19:56 - array and that's simply because we don't
19:58 - have any notes inside of firebase so
20:00 - let's go up here to firebase and i want
20:02 - you to go back to your database and you
20:04 - can see this table here so when we add a
20:07 - collection you remember we called that
20:08 - collection notes okay
20:10 - and we click next
20:12 - and then for each note that's going to
20:14 - be a document and it'll have this
20:16 - auto id
20:18 - and
20:19 - the doc the um the notes are going to
20:21 - have two well actually three properties
20:24 - the first property is going to be a
20:25 - title
20:26 - and we'll just call it test note from
20:29 - firebase
20:31 - it'll also have a
20:33 - a body so we'll call it body and then
20:35 - that's going to actually end up being a
20:37 - string of html so in here i'm just going
20:39 - to put an h1 tag hello
20:42 - world
20:44 - and a closing h1 tag
20:46 - and then it'll also have a time stamp
20:48 - but i'm not going to worry about the
20:49 - time stamp here in this particular case
20:51 - because we're going to automatically
20:53 - generate that timestamp
20:54 - so i'm going to click save
20:57 - and now you can see that we have a note
20:59 - here
21:00 - and if you remember when i said whenever
21:02 - the notes collection is updated
21:05 - it's going to automatically call that on
21:07 - snapshot function that we're
21:09 - passing a function into so let's go back
21:12 - over here and as you can see
21:14 - it went ahead and actually ran that
21:16 - function automatically simply because i
21:18 - updated the notes
21:22 - the notes collection
21:23 - so you can see here now that we have a
21:25 - title id and body
21:27 - of a single note that we just created
21:29 - inside of firebase
21:32 - so with that being said i'm going to go
21:34 - ahead and keep this console.log notes
21:36 - here just for reference and then
21:38 - let's move on so i'm going to actually
21:40 - remove all of these tabs up here so i
21:41 - can keep everything clean and inside of
21:43 - the source folder i want to create
21:45 - i actually want to create three other
21:47 - folders so we'll call the first folder
21:49 - editor
21:51 - the second folder we will call
21:54 - sidebar
21:56 - and then the third folder we'll call
21:58 - sidebar item
22:00 - now let's go ahead and get rid of uh
22:02 - let's go ahead and knock this
22:04 - boilerplate stuff out so inside of
22:06 - editor create a new file called
22:08 - editor.js
22:10 - and you're going to want another file
22:12 - called styles.js
22:14 - and you're going to want to do that for
22:16 - each of these so new file sidebar dot js
22:21 - and a styles.js
22:23 - and then finally sidebar
22:26 - item.js
22:28 - and a
22:29 - styles.js for that one as well so let's
22:32 - go inside of each of these and just
22:33 - create the classes and the imports that
22:35 - we're going to need
22:36 - for each of these so that we can start
22:38 - focusing on the functionality so start
22:41 - by going into your editor.js and i want
22:43 - you to find the editor.js file in the
22:45 - source code and i want you to copy and
22:47 - paste these imports here once you have
22:50 - those imports
22:51 - go ahead and come down here and type in
22:54 - class editor component that's what we're
22:55 - going to call this class
22:58 - it's going to extend react dot component
23:02 - and inside of here we'll have a
23:04 - constructor
23:05 - that calls super
23:08 - and then we have to go ahead and have
23:11 - the render function
23:14 - and whoops
23:16 - and the render function has to return
23:18 - some html so what i will do is inside of
23:21 - here i will just simply say hello
23:23 - from the editor
23:26 - and that's going to be our class our
23:28 - boilerplate code for our class and what
23:30 - we need to do at the very bottom here is
23:32 - actually export this but we're going to
23:34 - use with styles so i'm going to explain
23:36 - how that works just give me a second
23:37 - let's go ahead and say export default
23:41 - with styles which you can see we are
23:43 - importing right here from material
23:45 - hyphen ui
23:46 - core styles
23:48 - so export default with styles which
23:50 - takes
23:51 - a argument because it's a function and
23:53 - that is going to be styles now we're
23:56 - passing styles into with styles
24:00 - with styles is actually going to return
24:02 - yet another function so we'll go ahead
24:04 - and immediately invoke that function
24:05 - that it returns with our editor
24:07 - component
24:09 - okay
24:10 - so what styles is is it's actually going
24:12 - to end up being a function that we're
24:14 - going to put inside of the styles.js
24:17 - file here you don't have to worry about
24:18 - that i'm actually going to have you go
24:20 - ahead and copy that and paste it inside
24:23 - of here from the source code but i want
24:25 - you to understand how this is working so
24:26 - inside of here there's going to be a
24:28 - function
24:29 - that has a bunch of um a bunch of
24:32 - classes that are going to be they're
24:34 - going to represent css styles
24:37 - here
24:38 - it's taking those styles and then
24:40 - basically
24:41 - creating an object called classes or a
24:44 - property in react it's actually props so
24:46 - it's creating a prop called classes
24:49 - and we're going to be able to access
24:50 - those classes from the
24:52 - it'll look like this it'll be classes
24:55 - well
24:56 - this dot props dot
24:58 - oops this dot props
25:02 - name
25:03 - so that's going to be really helpful for
25:05 - us shortly so go ahead and save this
25:07 - let's knock out the boilerplate code for
25:09 - the other two components so
25:12 - go ahead and go to your sidebar.js
25:15 - file
25:17 - and inside of here go ahead go to the
25:18 - source code copy the imports paste the
25:21 - imports inside of here and then class
25:24 - side bar
25:26 - sidebar component
25:29 - extends
25:31 - react dot component
25:34 - and again we'll want a constructor here
25:36 - that calls super
25:39 - and then under here i'll just copy from
25:41 - my previous file here the render
25:42 - function
25:46 - and then instead of hello from editor
25:48 - we'll say hello from sidebar
25:53 - and then again we'll say export default
25:57 - with styles
26:00 - the first argument will be styles and
26:02 - the second one will be our sidebar
26:04 - component
26:05 - okay
26:07 - and let's knock out the final one so
26:10 - under sidebar item.js
26:12 - go ahead and go into the source code and
26:15 - copy the imports for it paste the
26:17 - imports inside of here and then go to go
26:20 - ahead and type in class sidebar
26:22 - item
26:23 - component
26:24 - extends
26:25 - react dot component
26:29 - and of course it's going to have a
26:30 - constructor here with super
26:33 - and then the render function which i
26:36 - will again copy from the previous one
26:40 - and instead of sidebar we'll say sidebar
26:43 - item
26:44 - so now we have the boilerplate code
26:45 - actually i need to do the
26:47 - the export so export default
26:51 - sidebar item component nope that's gonna
26:53 - be with styles
26:56 - styles is the first argument and then
26:58 - the
26:59 - sidebar item component all right
27:02 - so now we got all of that done so the
27:04 - second thing that we want to do is you
27:06 - want to go into the source code grab the
27:08 - styles.js file for each of these three
27:11 - components and paste them in so i'm
27:13 - going to go ahead and do that right now
27:15 - you go ahead and do it as well so i'm
27:17 - going to start with my styles.js file
27:19 - for my editor
27:21 - so under
27:23 - under editor here inside of styles.js i
27:25 - simply paste this
27:27 - and as you can see
27:29 - styles is a function with a
27:32 - argument called theme that's passed into
27:34 - it automatically by material ui
27:36 - which returns an object of basically css
27:39 - classes and styles
27:40 - so go ahead and save that
27:43 - and then move on to the sidebar
27:45 - styles.js file go ahead and copy it from
27:48 - the source code paste that in
27:50 - and then do the same thing for the
27:52 - styles.js inside of the
27:55 - sidebar item
27:56 - and once you have all of that we have
27:58 - all of our boilerplate code so we can
28:00 - actually go ahead and get started on the
28:01 - fun stuff
28:03 - so inside of our app.js file i'm
28:06 - actually going to get rid of all these
28:07 - tabs
28:09 - inside of our app.js file inside of
28:12 - render i want to actually render out our
28:16 - new components so in react we can only
28:19 - return one component but we can have
28:21 - components inside of other components or
28:23 - we can let me rephrase that we can only
28:25 - return
28:27 - one element but we can have other
28:29 - elements or components inside of that
28:30 - element so
28:32 - we'll create one parent element and
28:34 - it'll be a div here and i'll just go
28:36 - ahead and give this a class name
28:39 - of
28:40 - let's say app container
28:43 - and then inside of here let's go ahead
28:45 - and put in our sidebar component
28:51 - which we are going to need to import so
28:53 - let's go ahead and import sidebar
28:56 - component from
28:57 - and that will be
28:58 - dot forward slash sidebar
29:01 - slash sidebar we might as well go ahead
29:03 - and do the same thing for the editor so
29:05 - import
29:06 - editor component
29:10 - from dot forward slash editor
29:14 - forward slash editor
29:16 - okay so
29:17 - we don't need to import the sidebar item
29:19 - component because the sidebar component
29:21 - is going to use the sidebar item
29:24 - component so we don't have to use that
29:25 - inside of app.js so we have that and
29:28 - let's go ahead and also put our editor
29:29 - component inside of here
29:33 - cool
29:34 - so let's save this and see what we end
29:36 - up with
29:38 - all right cool so a whole bunch of
29:40 - nothing it's still compiling on my end
29:43 - let me uh there we go cool
29:45 - so as you can see here um we have hello
29:47 - from sidebar and hello from the editor
29:50 - we also have a few warning messages but
29:53 - we're not going to worry about that
29:54 - that's just saying hey you have imported
29:56 - some stuff but you're not using it it
29:57 - says no unused bars that's because we
29:59 - went ahead and knocked out all those
30:01 - imports before we wrote the code so just
30:03 - don't worry about these warnings right
30:05 - now but as you can see they are
30:07 - importing and displaying the components
30:09 - as expected
30:12 - all right so what i want to do now is i
30:13 - want to go ahead and demonstrate the
30:15 - react quill you know what it comes with
30:17 - the features of it and how we're going
30:18 - to be using it inside of this
30:19 - application but before we do that i need
30:21 - you to go to the source code so go to
30:22 - the description go to the source code go
30:25 - into the public folder and then the
30:27 - index.html file and then what you'll see
30:30 - in the source code at the top of um
30:33 - inside of the header tags at the very
30:35 - top you'll see a
30:37 - link
30:38 - a link tag with i'll show you exactly
30:40 - what it looks like here um so it'll be
30:43 - right here
30:45 - and this is what this is is it's the
30:47 - styles for react quill it's the style
30:50 - sheet
30:51 - so go ahead and paste that in exactly
30:52 - where you see it here
30:54 - save it and now we have access to the
30:56 - css that we're going to need for react
30:59 - quill
31:00 - so now that we have that i'm going to go
31:01 - ahead and move this window over here and
31:02 - actually bring it a little bit further
31:04 - over so you can see everything
31:06 - go ahead and have your editor.js file
31:08 - open
31:09 - and i'm going to start moving
31:12 - this html onto its own lines
31:15 - just to make it look clean
31:17 - and i'm going to get rid of hello from
31:19 - the editor
31:20 - okay so the first thing i want to do
31:22 - here is inside of this render function
31:24 - at the top i want to go ahead and
31:25 - destructure out the classes variable
31:28 - um so i will do that now so const
31:32 - classes
31:34 - equals this.props
31:37 - so now i have access to that classes
31:39 - variable from this.props
31:41 - and i want to go ahead and use that here
31:43 - so we're going to give this parent div
31:45 - here a class name and the class name is
31:47 - going to be equal to classes dot editor
31:50 - container
31:53 - and
31:54 - now
31:55 - i want to go ahead and throw in this
31:58 - react quill element
32:00 - oops
32:01 - and save and let's see what we end up
32:04 - with over here
32:05 - so as you can see we have a
32:08 - text editor inside of here
32:10 - now it looks kind of wonky at this at
32:13 - this moment and that's just due to the
32:14 - styles because we're going to have a
32:16 - little extra room for the sidebar but
32:17 - this sidebar will be over here
32:20 - and um
32:21 - right now we have uh hello from the
32:23 - sidebar above it so it looks a little
32:25 - weird right now but that's perfectly
32:26 - fine
32:27 - we'll get to that in just a second but i
32:30 - just wanted to come in here and kind of
32:31 - show you what uh react quill comes with
32:33 - right off the bat
32:35 - so
32:36 - as you can see here it comes with all of
32:38 - what you need in order to get started
32:39 - with a text editor now it also has some
32:42 - built-in functions
32:44 - um
32:45 - so i'm just going in here and just kind
32:47 - of showing you that it has all this
32:49 - stuff built in
32:50 - alright cool so um
32:53 - it comes with some functions that are
32:55 - going to be really helpful for us when
32:57 - trying to
32:59 - use this inside of our application
33:01 - so
33:02 - now that i've kind of demonstrated what
33:04 - that looks like i think it's time to go
33:05 - ahead and start implementing some of the
33:07 - functions
33:08 - now i want to go ahead and start
33:10 - implementing these functions while it
33:11 - does look kind of weird so we're going
33:13 - to be using the console to do a lot of
33:15 - logging here so just go ahead and have
33:17 - your console open
33:18 - and
33:20 - let's go ahead and get started
33:21 - implementing these functions
33:23 - all right so the first
33:25 - property we're going to utilize from
33:27 - react quill is value so the value we
33:30 - will set equal to
33:33 - this dot state dot text and you know
33:36 - we've got this state variable here so
33:38 - what we're going to do is whatever the
33:39 - state
33:40 - whatever the text state is it's going to
33:43 - be the value property of
33:45 - react quill so as we update this state
33:48 - it's going to update the react
33:50 - quill
33:50 - value property
33:52 - the second thing that we're going to
33:53 - throw in here is on change
33:57 - and we're going to have a function
33:58 - called this dot update body
34:02 - so i'm going to put this stuff on its
34:03 - own line really quick just make it look
34:06 - clean
34:12 - so we have value and on change now this
34:15 - dot update body is going to be a
34:17 - function
34:19 - that is going to be asynchronous that's
34:21 - going to set some state
34:23 - and once the state updates we're going
34:25 - to call an update function
34:27 - that is going to
34:29 - do some stuff i don't want to talk too
34:31 - far ahead so let's go ahead and
34:33 - implement update body
34:34 - so i'm going to put update body directly
34:36 - under my return
34:38 - sorry under my render so i'll go to my
34:41 - render function and create a variable
34:44 - called update body which i'll set to a
34:45 - function now this is going to be an
34:47 - asynchronous function so go ahead and
34:49 - add your async keyword and it's going to
34:51 - accept a value
34:53 - and we're going to do stuff with that
34:54 - value
34:55 - so like i said we're going to set some
34:57 - state but we're going to wait for that
34:59 - state to update
35:00 - so we're going to say await this.state
35:05 - and the chunk of state that we want to
35:07 - update is going to be text
35:09 - and we're going to update it with val
35:11 - and once that state is updated we're
35:14 - going to call this.update
35:17 - which
35:18 - we do not have yet so underneath update
35:21 - body we will create a function called
35:23 - update now this is where things get a
35:25 - little
35:27 - somewhat complicated so i'm going to do
35:29 - my best to explain it for you
35:31 - so we have
35:32 - a function called update
35:34 - and we're going to set it equal to
35:35 - debounce
35:38 - and we're going to pass a function into
35:40 - the bounce which is going to be the
35:41 - actual function so i'll explain
35:44 - this in just a second i just want to get
35:46 - this out of the way
35:47 - okay
35:48 - so the bounce is in our helpers so if i
35:51 - go to helpers.js we imported
35:54 - we imported that right here so d bounce
35:56 - bounces in our helpers here
35:58 - and
36:00 - what we don't want to do is every single
36:02 - time the value changes
36:05 - go to the database on firebase and
36:08 - update it because what that means is
36:11 - as the user is typing in their text
36:12 - every single time they type a letter or
36:14 - character or a backspace or anything at
36:16 - all it's going to make an http request
36:19 - to the database and that's going to get
36:20 - a little crazy so what we want to do is
36:23 - we want to wait for the user to stop
36:26 - typing for one and a half seconds before
36:28 - we call the database and what this
36:31 - allows us to do is be a lot more
36:32 - efficient
36:33 - with um with our resources
36:36 - so
36:37 - this
36:38 - is called debouncing and we
36:42 - are
36:42 - basically this helpers uh let's go back
36:45 - to it so i can show you
36:47 - this um helpers function debounce is
36:50 - going to take a function okay so that's
36:52 - why we're passing our update function to
36:55 - our debounce function and what's gonna
36:57 - happen is whenever we're typing each
37:00 - time it tries to
37:01 - call update again it's gonna
37:03 - basically in essence cancel
37:06 - the last one until the user stops typing
37:10 - for at least 1.5 seconds and when they
37:13 - stop typing for 1.5 seconds the function
37:15 - will actually go all the way through and
37:18 - update will complete
37:20 - so hopefully that makes sense so the
37:22 - second parameter that we want to pass to
37:23 - this to bounce is the amount of time and
37:25 - like i said 1.5 seconds which is going
37:28 - to be 1500 milliseconds
37:31 - so what is it we want to actually do
37:33 - with our
37:36 - update function well for now i just want
37:38 - to so we'll say come back later
37:42 - for now all i want to do is log log some
37:45 - stuff so i can demonstrate the
37:46 - debouncing effect so we'll just come in
37:49 - here and say console.log
37:52 - updating
37:53 - database
37:57 - and let's see if this works the first
37:58 - time through
38:00 - alright so i'm coming in here
38:02 - into my text editor and i'm just typing
38:04 - some stuff
38:05 - i'm typing some stuff
38:07 - typing typing typing and now i'm going
38:09 - to stop typing
38:10 - okay you saw that i stopped typing for
38:13 - one and a half seconds and then this
38:14 - function appeared it did not appear
38:16 - 20 times since i typed you know 20 times
38:19 - or whatever it only appeared once and it
38:22 - waited for me to stop typing so that's
38:25 - um that is something that i wanted to
38:27 - teach you guys is debouncing and it's
38:29 - very important for this tutorial
38:30 - especially because we're updating a
38:32 - database
38:33 - um
38:34 - through the use of a user typing so that
38:36 - could you know if we have hundreds and
38:38 - hundreds or thousands and thousands of
38:39 - users and we're updating the database
38:41 - every single time a user types a key
38:43 - that's gonna get out of hand so we're
38:45 - going to use debouncing in this tutorial
38:48 - okay so now what i want to do is start
38:50 - making this look a little better so i
38:53 - demonstrated you know what react quill
38:55 - does and you know a little bit about
38:57 - debouncing
38:58 - so what i want to do now is i want to
39:00 - start focusing on getting the sidebar
39:03 - component set up
39:04 - and we already went through
39:07 - getting items from the database on you
39:10 - know as soon as we load the app we get
39:12 - all of the notes from the database so
39:14 - since we already have access to the
39:16 - notes we might as well go ahead and
39:17 - start working on our sidebar to display
39:20 - those notes
39:22 - so go ahead and go to your sidebar
39:24 - component
39:26 - sidebar js
39:28 - and let's go ahead and get started
39:30 - working on this
39:32 - now the first thing that we want to do
39:34 - is go ahead and go under our super
39:36 - inside of the constructor and say
39:37 - this.state is
39:39 - equal
39:40 - to and we want to put in adding note and
39:44 - we'll set that equal to false
39:49 - and we will put a title which we will
39:52 - set to null by default
39:55 - cool
39:56 - so let's go ahead and destructure a
39:58 - couple of property variables so inside
40:02 - of here
40:03 - i'll go ahead and prepare this
40:06 - inside of these curly braces the
40:07 - variables that we wanted to structure
40:09 - out are going to be notes
40:11 - classes
40:13 - and
40:14 - selected note index now we're not
40:17 - passing these props yet so since we're
40:20 - not passing these properties yet
40:23 - it's we're probably going to get an
40:24 - error um if not then
40:27 - that's great but we'll go and we'll
40:29 - actually pass nulls
40:31 - right now so let's go to the
40:34 - let's go to the app.js
40:37 - and let's look we have notes classes is
40:39 - automatically passed in
40:41 - through with styles and we have selected
40:42 - note index so let's go ahead and pass
40:44 - those two in now we we have selected
40:46 - note index so we can just go ahead and
40:50 - go here inside of our sidebar component
40:52 - element we can say
40:54 - selected note index is equal to
40:57 - this dot state dot selected note index
41:01 - i'm going to put this on its own line
41:03 - and then the other one was
41:06 - notes which we also have so um
41:09 - notes is equal to
41:12 - this dot state dot notes
41:15 - and so now we won't get an error
41:18 - so
41:19 - now that we have these destructured
41:21 - inside of our sidebar.js file i want to
41:23 - go ahead and remove hello from the
41:24 - sidebar
41:25 - and i want to give our
41:28 - um our parent div here a class name so
41:32 - give it a class name and we'll use the
41:34 - classes object classes.sidebar
41:38 - container
41:41 - all right so inside of here i want to go
41:42 - ahead and add a button
41:45 - and
41:46 - it's going to be a button with a capital
41:49 - b and that's because it is a if we go up
41:51 - here i can show you a um it is a
41:54 - component from the material ui core
41:57 - and we're going to use that because it's
41:58 - going to just make it look a little
41:59 - better by default so we're going to add
42:02 - a few things here we're going to have it
42:03 - on click
42:06 - and the on click function that we're
42:08 - going to provide here we're going to
42:09 - write that function so for now we'll
42:11 - just call it new note
42:12 - btn click
42:14 - and that's a function we're going to
42:16 - write in just a moment so keep that in
42:17 - mind we'll get right back to that
42:19 - go ahead and add a class name
42:21 - and that class name will be classes
42:25 - dot new note btn
42:29 - and
42:31 - inside of here i'm just going to put the
42:33 - text to say new note we'll change this
42:35 - in just a second so let me go ahead and
42:37 - let's add this new note button click
42:40 - function underneath the render function
42:42 - so here we will say
42:44 - new note btn click is equal to a
42:47 - function
42:48 - and for now i'm just going to have it
42:50 - say console.log
42:52 - and i'm going to say new btn clicked
42:57 - cool
42:58 - so let's see what we ended up with so
43:00 - when we come back over here you can see
43:01 - that we have this sidebar here and
43:04 - that's because uh we already have the
43:06 - styles for it we just added the
43:07 - container class here which are all
43:09 - inside of the styles.js file
43:12 - so we we have the sidebar container and
43:15 - we have this
43:16 - new notes button here i'm going to clear
43:17 - this and i'm going to click it you can
43:18 - see now it says new btn click so we know
43:21 - the button is working
43:23 - so below the button
43:27 - still inside of the div container but
43:29 - below the button we're going to put two
43:31 - curly braces
43:32 - and
43:33 - what we want to do is we want to have
43:35 - the ability to add a new note
43:38 - and if we click on
43:41 - new note button we want
43:44 - the new note input to show up
43:47 - so
43:49 - let's go ahead and say if this dot state
43:52 - dot adding note
43:54 - put a question mark after we're going to
43:55 - use our ternary operator as you can see
43:57 - we have this adding note
43:59 - slice of state which is false by default
44:01 - so by default
44:04 - this is not going to show up
44:06 - so that's good because we don't want the
44:09 - user to suddenly see add a new note
44:11 - unless they go and
44:13 - explicitly click that button
44:15 - so
44:16 - if this.adding note we're going to do
44:19 - some stuff we're going to return a div
44:23 - you know
44:24 - let me go ahead and get that otherwise
44:27 - we're going to just go ahead and return
44:28 - null okay
44:30 - so let's go ahead go inside of this div
44:32 - and put in the stuff that we actually
44:33 - want to return if
44:34 - this dot adding state this does state
44:36 - that adding node is true so the div
44:39 - is going to have an input
44:42 - an input
44:44 - and the type of the input
44:46 - type is equal to
44:49 - text
44:50 - and the class name
44:52 - is going to be equal to classes
44:56 - dot new note input
44:59 - and we're going to have an on key up
45:01 - function but first let's add a
45:03 - placeholder
45:04 - placeholder
45:06 - and the placeholder is just the text
45:08 - that's going to be inside of the input
45:09 - before the user starts to
45:12 - enter text inside of it manually
45:14 - so we'll just say enter note title
45:17 - and again we will have an on key up
45:19 - function on key up
45:22 - and so
45:23 - whenever the user starts typing in there
45:25 - whenever they lift their finger off of a
45:27 - key a function will get fired
45:29 - and it gets past the event by default we
45:31 - want to pass that event to our own
45:33 - function which we'll call
45:34 - this.updatetitle
45:36 - and
45:38 - we will pass an e dot
45:40 - target.value which is going to be the
45:42 - target element of the event that got
45:44 - fired off that we're passing in from
45:46 - here and the value of that so we're
45:48 - going to pass that to our update title
45:50 - function which for now come down here
45:53 - update
45:54 - title is equal to a function that takes
45:56 - some text so just put text txt
46:00 - and for now just console.log
46:04 - and i'm going to say
46:06 - here it is
46:08 - and i'm going to display the text that
46:10 - we passed update title
46:12 - okay
46:13 - so
46:14 - let's see here go ahead and
46:17 - i think it's safe to save this let's
46:19 - find out
46:20 - clear this see what happens when i click
46:22 - this
46:23 - uh we got new btn clicked but it looks
46:25 - like
46:26 - oh yeah that's right we have to actually
46:28 - flip that variable so when we have new
46:30 - btn clicked we need to go ahead new note
46:34 - btn clicked we need to go ahead and flip
46:35 - that variable in the state
46:37 - the
46:38 - specifically the um
46:41 - this dot state dot adding note because
46:43 - otherwise if we don't flip that to true
46:45 - this will never display right here so we
46:47 - need to go ahead and do that
46:48 - all right this dot set state
46:53 - and then inside of here we want to go
46:55 - ahead and update adding note
46:57 - and what we want to set it to is not
47:00 - this dot state dot adding note so if
47:03 - that's false it'll flip it to true if
47:06 - it's true it'll flip it to false it's
47:07 - just saying whatever
47:09 - this.addingnode is we just want it to be
47:12 - the opposite
47:13 - and we also want to reset the title
47:18 - and the reason why we want to reset the
47:19 - title is because when we're adding a new
47:21 - note if we start typing in a title and
47:23 - then we want to stop adding a note
47:25 - when we go to add another note we don't
47:27 - want that previous title to still be in
47:29 - the input so we're just going to reset
47:30 - the title and save let's see if that
47:33 - works for us okay let's come over to new
47:35 - note and when i click it you can see now
47:37 - i have this input here and when i start
47:39 - to type inside of it it's saying
47:41 - it is actually logging it here as we
47:43 - expected
47:44 - and then when i click new note
47:46 - it makes it go away because we're
47:48 - flipping that variable when i click it
47:50 - again you can see it's empty that's
47:51 - because we're resetting that title
47:53 - that's exactly what we wanted to do but
47:55 - here's the problem when i click new note
47:57 - it still says new note i want it to say
47:59 - cancel
48:00 - so
48:01 - i want it to say new note here because
48:03 - it makes sense i want to click that i
48:04 - want to create a new note but now i
48:07 - don't want it to say new note anymore i
48:08 - want it to say cancel
48:10 - so
48:12 - what we want to do is we want to go
48:14 - inside where we put the text for that
48:15 - button where it says new note here
48:18 - let's put some javascript in there so
48:19 - two curly braces and we want to do a
48:21 - ternary operator
48:23 - [Applause]
48:24 - and we'll say this. adding note so if
48:27 - that's true we want to go ahead and say
48:30 - cancel
48:32 - otherwise we want to go ahead and say
48:34 - new note so let's save that
48:37 - and it says new note and when i click it
48:39 - now it says cancel
48:40 - okay
48:41 - that's that's exactly what we want it to
48:43 - do
48:44 - cool so
48:46 - let's go ahead and move on
48:51 - all right so now what we want to do is
48:53 - we have that input we have the enter
48:55 - note
48:56 - title input let's go ahead and go
48:59 - directly underneath that and let's
49:00 - create another button with a capital b
49:02 - and we want to
49:04 - create our submit button so let's give
49:05 - it a class name
49:07 - is that equal to classes dot new note
49:10 - submit
49:12 - btn
49:14 - all right i'm gonna put that on its own
49:15 - line make sure you guys can see
49:16 - everything
49:17 - um and then i want to add an on click
49:20 - function
49:24 - and we're gonna call this dot new note
49:26 - whenever we click this button and we
49:29 - have to create this function
49:30 - but for now we'll go ahead and put some
49:32 - text in here that says submit note cool
49:35 - so let's create a function called new
49:37 - note
49:41 - and
49:42 - for now just console.log
49:44 - let's just log the entire state okay
49:48 - so we'll save this we'll come back over
49:49 - here
49:52 - clear this console so it's clean
49:54 - new note
49:55 - now you can see the submit no button is
49:57 - here i'll start typing in a title and
50:00 - when i click submit note the state is
50:03 - adding note is true and the title is
50:06 - null the reason why the title is null is
50:08 - because inside of update title
50:10 - we are logging instead of setting the
50:12 - state
50:13 - so let's go ahead and set the state
50:23 - all right so the title
50:26 - title
50:27 - we will simply set that to text and then
50:29 - we will save okay so let's
50:32 - demo this one more time say this whoops
50:35 - this is a title
50:38 - and i'm going to click submit note and
50:40 - you can see now that the state
50:42 - is properly updated
50:44 - cool so
50:46 - there we go cool so um i want to come in
50:49 - here and
50:51 - i want to
50:52 - go ahead and start working on the list
50:54 - of all of the um the notes on the side
50:58 - so let's go ahead and do that so what
51:00 - where we want to be
51:02 - is outside of these curly braces right
51:04 - here we want to go beyond that
51:06 - and we want to
51:08 - add a list element with a capital l and
51:11 - then inside of the list element we want
51:13 - to put two curly braces because what
51:15 - we're going to do
51:17 - is we're going to
51:18 - map all of the notes that we get from
51:21 - the props so all of these notes here
51:23 - that we're passing in from the app.js
51:26 - we want to take all of those notes and
51:28 - map those to actual elements so
51:32 - again if you don't if you're not super
51:34 - comfortable with the map function in
51:36 - javascript i do have a tutorial for it
51:38 - that i think will really help you guys
51:40 - understand the map function in detail
51:43 - go ahead and look in the description for
51:44 - that video and then come back to this
51:48 - if you are familiar with the the map
51:50 - function then let's go ahead and move on
51:52 - so we're going to say notes
51:54 - dot map
51:57 - and we will have two parameters here we
51:59 - will have note so for each note and its
52:02 - index
52:04 - we're going to go ahead and return
52:08 - some
52:09 - html so i'm going to get rid of this
52:11 - curly brace i mean semicolon get rid of
52:14 - these semicolons here
52:17 - so i'm gonna have a div
52:19 - and in react
52:21 - whenever we
52:22 - map or whenever we're iterating through
52:24 - and creating a bunch of elements we need
52:25 - to
52:26 - give a key to the parent
52:29 - and i'm just gonna use our index as the
52:31 - key
52:33 - and what we want to do is for each and
52:36 - every single note we want to create a
52:37 - sidebar
52:38 - sidebar item component
52:42 - and sidebar item component is going to
52:44 - take several properties so
52:46 - let's go ahead and start working on
52:48 - those props so the first one is going to
52:50 - be note
52:52 - and that's going to be equal to
52:54 - the note we're on
52:56 - second one is going to be
52:58 - index and that's going to be equal to
53:01 - the index we're on
53:03 - and i put a comma here which i shouldn't
53:04 - have
53:07 - all right the
53:08 - then we're going to have selected note
53:10 - index which is going to equal
53:12 - selected note index
53:15 - which we're getting
53:17 - right here
53:19 - so we have direct access to that
53:22 - then we're going to say select note
53:24 - which is going to be a function
53:25 - property here and we're just going to
53:27 - say this dot select note
53:29 - which i believe we do not have
53:31 - implemented yet so
53:33 - let's go ahead and create select note
53:36 - it's just going to be a function that
53:38 - for now i'm just going to say
53:39 - console.log
53:43 - select note
53:44 - just to get that out of the way really
53:45 - quick and we'll come back to it
53:48 - then we're also going to have a delete
53:49 - note function which we'll do the exact
53:51 - same thing that we just did here
53:54 - this dot delete
53:56 - note
53:57 - and we'll go
53:58 - and i'm just going to copy this function
54:01 - and paste it and then replace
54:04 - with delete
54:07 - okay
54:09 - cool so now we have a sidebar item
54:11 - inside of a div but underneath the
54:13 - sidebar item we want to go ahead and put
54:15 - a divider
54:17 - and all the divider is is it's just
54:19 - going to be a small dividing line
54:21 - between each of these sidebar item
54:23 - components so that you can distinguish
54:27 - you can distinguish them basically so
54:28 - i'm going to save and let's just take a
54:30 - look and see what we've got so far
54:32 - we've got an error so it says cannot
54:34 - read property map of null and the reason
54:36 - why we are getting this is because
54:39 - let's see let's go back up here we're
54:40 - mapping through notes and
54:43 - map is a function of the array object
54:46 - okay so if notes is null then we're
54:48 - calling map on something that does not
54:51 - have a function called map and for now
54:54 - in editor
54:55 - notes uh sorry not an editor and app.js
54:58 - notes is null
54:59 - we
55:01 - as soon as we load um the sidebar
55:04 - component we're passing in a null
55:07 - now later on you can see that notes is
55:10 - being updated but this is asynchronous
55:12 - meaning that this isn't being so notes
55:15 - isn't being set until
55:18 - after we're calling map
55:22 - inside of the sidebar component and
55:23 - that's that's one of the frustrations
55:25 - that a lot of people have to deal with
55:27 - in javascript is the asynchronous aspect
55:30 - of it
55:31 - so let's go ahead and take care of this
55:33 - problem right now
55:35 - so in order to fix this little hiccup
55:38 - that
55:39 - we inevitably will have run into i want
55:42 - to go ahead and take this entire return
55:45 - statement and i want to cut it so i'm i
55:48 - cut it so that i can paste it
55:50 - and i want to put an if statement here
55:51 - where i say if notes
55:53 - so in other words if
55:55 - notes is not null
55:57 - then i want to paste that return
55:58 - statement into there else
56:02 - if
56:03 - it is null i want to go ahead and return
56:08 - a small div that's just going to say add
56:11 - a note exclamation point
56:13 - which you know
56:16 - this you'll probably never even see
56:18 - because even if the
56:19 - array itself is empty
56:23 - it's still going to go down this route
56:25 - so in reality we could just put an empty
56:28 - div here so i'm just going to actually
56:30 - just going to actually put an empty div
56:31 - here instead
56:33 - and so what we're doing is we're saying
56:35 - if notes is not null then let's go ahead
56:37 - and do all this stuff and if notes is
56:40 - null we're just going to return an empty
56:41 - div and so what's going to happen is
56:44 - inside of the
56:45 - apps.js.js file when it first renders
56:47 - the sidebar component notes is going to
56:49 - be null because notes is null inside of
56:51 - the state by default
56:53 - then when this component did mount goes
56:55 - through and successfully retrieves all
56:57 - of the notes and sets this does state
57:00 - notes equal to notes
57:02 - this is going to re-render
57:04 - with notes not being null and then it's
57:08 - going to come back into this render
57:09 - statement notes will then not be null
57:11 - anymore and it will go ahead and call
57:13 - all of this and so map can actually be
57:16 - called on an empty array that's
57:18 - perfectly fine it just means we're not
57:20 - going to have any sidebar item
57:21 - components that's the behavior we want
57:23 - if notes is null again
57:25 - map
57:26 - simply doesn't exist on null so that's
57:28 - why we went ahead and created this else
57:30 - hope that makes good sense for you guys
57:32 - so come back over here and refresh
57:36 - you see hello from the sidebar item and
57:38 - that's because we have one note inside
57:41 - of firebase so it's rendering out one
57:44 - sidebar item component and if we go to
57:46 - our sidebar item component you can see
57:48 - that all we're doing here is saying
57:50 - hello from the sidebar item so what we
57:52 - really need to do is go in and start
57:55 - working on our sidebar item component
57:57 - now
57:58 - okay so let's go ahead go to our sidebar
58:00 - item.js file go ahead and
58:03 - let's remove the constructor here
58:05 - because we're actually not going to be
58:06 - using any state inside of this sidebar
58:08 - item component only props
58:11 - so since we're only going to be using
58:12 - props we can pretty much call this a
58:14 - stateless component although it's not by
58:16 - definition because it is going to be
58:19 - using the props so in a sense it's kind
58:21 - of a functional component so we'll go
58:22 - ahead and just call it a functional
58:24 - component
58:25 - so this is going to be a functional
58:27 - component so the first thing that we
58:28 - want to do is
58:30 - inside of our render
58:32 - i'm going to get rid of this
58:34 - hello from the sidebar item
58:36 - and put everything on whoops
58:39 - put everything inside
58:40 - on its own line
58:44 - and
58:46 - indent it
58:47 - then at the top of the render function
58:48 - i'm going to go ahead and destructure
58:50 - out some stuff
58:53 - from this dot props
58:56 - so if you remember we had a bunch of
58:57 - different props that we were passing in
58:59 - from the sidebar component we had note
59:00 - index selected note index select note
59:02 - and delete note so let's go ahead and
59:04 - grab all of those so index
59:08 - note
59:10 - classes which is being passed in through
59:12 - with styles by default
59:14 - and selected note index
59:19 - cool so the
59:22 - um delete note and select note we're not
59:24 - going to actually utilize inside of the
59:26 - render function we're going to utilize
59:27 - that elsewhere so we don't need to
59:29 - destructure that here
59:32 - cool so let's return and let's go ahead
59:35 - and say
59:36 - the key here let's just add a key here
59:38 - and we'll set that equal to index
59:42 - then let's put a list item in here and
59:46 - so what we're going to say is for each
59:48 - sidebar item component that we have it's
59:49 - going to be a list item which is a
59:52 - material ui
59:54 - component
59:55 - so if we look back in here we have this
59:57 - list component which is also a
60:00 - material ui component and we're looping
60:02 - through and creating list items
60:05 - so
60:06 - let's give a class name whoops gotta go
60:08 - inside of the tag here
60:11 - let's give a class name and we're going
60:14 - to set it equal to classes.list
60:17 - item
60:19 - list item
60:21 - and then let's give it a selected which
60:24 - i'll explain that in just a second
60:28 - selected
60:29 - note index is equal to index okay so
60:32 - let's go ahead and explain this so
60:34 - selected is a property of the list item
60:37 - component which if this selected
60:41 - variable is true
60:43 - then it's going to be highlighted
60:45 - and that's basically it and so what
60:47 - we're going to say is we want it to be
60:48 - considered selected if selected note
60:51 - index
60:52 - is equal to our current index and this
60:55 - index is actually our loop index that we
60:58 - have right here
60:59 - so if the current selected note index is
61:02 - equal to the current item we're on
61:05 - then we can safely say that
61:08 - this is the one that is selected
61:10 - okay
61:11 - so let's go ahead and add align items
61:14 - and let's set that equal to flex
61:17 - start we can just use a normal string
61:19 - here celebrate
61:22 - all right so let's add a div
61:25 - okay so inside of this list item we'll
61:26 - have a div
61:27 - and inside of this div
61:29 - actually let's add some class name is
61:32 - that a class name here
61:34 - classes
61:36 - dot and we'll call this text section
61:40 - and let's add an on click
61:42 - on click
61:44 - let me just try to get everything on it
61:46 - on its own line so you can see
61:47 - everything clearly
61:49 - on click um
61:51 - and we're gonna pass a function so we're
61:52 - gonna say
61:54 - this dot select
61:56 - note
61:57 - select note
61:59 - and it'll take the note and the index
62:03 - okay so we have this class name and on
62:06 - click for the div here and let's go
62:08 - ahead and inside of this div
62:12 - use a list item text component and
62:15 - again this is just um this is just from
62:18 - material ui right here
62:20 - is these are just components that come
62:22 - from material ui that just make
62:26 - making things look good really easy
62:28 - so
62:30 - all of these things tend to just use
62:31 - properties
62:32 - so we're gonna go ahead and add them
62:36 - our primary
62:38 - is going to be our note.title
62:42 - and our secondary so it's going to have
62:44 - primary and secondary text
62:46 - our secondary text now this is where we
62:48 - get to use another one of our help
62:49 - helper functions so for now i'm not
62:51 - going to use it and i'll show you why we
62:53 - need it in just a second so note dot
62:55 - body note dot body dot sub string
62:59 - sub
63:00 - string
63:04 - 0
63:04 - 30
63:06 - plus
63:08 - dot dot dot okay so i'm going to go
63:09 - ahead and explain what i'm doing here
63:11 - so note dot body could be a massive
63:15 - string because it's the entire body of
63:17 - the note it's all of the text inside of
63:19 - the note so we don't want to display
63:20 - that
63:22 - on the sidebar it's just too much text
63:24 - so i'm taking the first 30 characters of
63:26 - that and then if it's more than 30
63:28 - characters i'm also adding dot dot dot
63:30 - at the end of that
63:31 - so let's go ahead and let's see what
63:34 - happens if i save now let's see if we
63:35 - can see
63:37 - perfect okay so test note from firebase
63:39 - is the title and the
63:42 - secondary text or so the test note from
63:45 - firebase is our primary you can see
63:47 - primary is note.title and our secondary
63:49 - is this substring here
63:50 - as you can see it's working as expected
63:52 - but as you can see
63:54 - this is html
63:56 - and the reason why it's html again is
63:57 - because in firebase we are storing this
64:01 - as html react quill actually stores the
64:04 - value of whatever you're typing inside
64:06 - of here as html
64:08 - so we have that helpers.js file and the
64:11 - second function here is called remove
64:13 - html tags and that is exactly what we're
64:16 - going to use here to get rid of that
64:18 - that html so let's go ahead and take
64:20 - this section here
64:23 - and cut and then we're going to say
64:24 - remove html tags and pass that
64:28 - as the parameter save it
64:30 - come back over here and now you can see
64:32 - it just says hello world dot dot dot
64:34 - instead of that html
64:36 - cool so
64:38 - what we want to do is
64:41 - under our list item text
64:44 - we have the closing div tag cool so
64:46 - underneath the closing div tag we want
64:48 - to create a delete icon
64:50 - that's the capital d delete icon
64:54 - and we want to add an on click function
64:57 - obviously
65:01 - and the on click function is going to be
65:04 - this dot delete note
65:08 - and
65:11 - we'll give it a class name as well
65:18 - so the class name is going to be
65:19 - classes.delete
65:21 - icon
65:22 - make sure you don't make sure it's
65:24 - spelled exactly like this because if it
65:26 - has a capital d
65:27 - as you're creating these class names
65:29 - just if you are wondering if you're
65:31 - spelling it correctly you can look at
65:33 - the video of course but you can also go
65:34 - to your styles.js file and just look and
65:38 - see
65:39 - exactly how it's spelled here so you can
65:41 - see which classes you have available and
65:43 - all of that inside of your styles.js
65:45 - file for each component
65:47 - so i'm going to save that go back over
65:49 - here and now you can see there is a
65:51 - delete icon which for now if i click it
65:54 - it's going to break us
65:56 - because we have not implemented this
65:58 - delete note so we have two functions
66:00 - that we need to implement we have to
66:01 - implement our delete note and select
66:03 - note functions so underneath our render
66:05 - function let's go ahead and create a
66:07 - select note function
66:11 - which
66:12 - will take an n and an i which is note
66:14 - and index and you can see we are already
66:16 - passing note in index to our select note
66:18 - function
66:19 - so n and i and we're just going to say
66:21 - this dot props dot select note
66:26 - and we're going to pass n
66:28 - and i to that and so this dot props dot
66:30 - select note if we go back we can see
66:33 - that we are in fact sending a property
66:35 - over called select note which is equal
66:37 - to
66:38 - this dot select note which is a function
66:40 - inside of the sidebar component which is
66:42 - just logging select note okay keep that
66:45 - in mind
66:46 - so i will actually
66:48 - save this and let's demonstrate that
66:52 - so if i click this note you can see now
66:53 - it says select note and that is in fact
66:55 - coming from the sidebar component so
66:57 - it's calling that parent function
67:01 - now we need to add delete note
67:04 - delete note which is going to take note
67:07 - whoops okay spell that
67:09 - note and you can see when we call
67:12 - delete note here this dot delete note we
67:15 - are passing the current note in so
67:18 - what we want to do is we don't want to
67:20 - just let the lead the the user
67:22 - accidentally delete notes so if they
67:24 - accidentally click the trash can icon
67:26 - and it deletes their entire you know
67:28 - poem that they've been writing for a
67:30 - month they'd be pretty mad so what we
67:32 - want to do is say if
67:34 - window.confirm
67:38 - and i'm going to put two backticks here
67:40 - and i've made a lot of tutorials in the
67:42 - past and people do get pretty confused
67:43 - about this so i want to take a second to
67:45 - really explain this
67:47 - the backticks tend to be
67:49 - underneath the escape button
67:53 - and above the tab button on a standard
67:54 - keyboard they are back ticks they are
67:56 - not apostrophes they are not quotation
67:58 - marks
67:59 - they are backticks and what the
68:00 - backticks allow you to do is they allow
68:03 - you to
68:05 - write in a string but also allow you to
68:06 - add javascript to that string and then
68:08 - it renders it out afterwards
68:10 - so
68:12 - please make sure if you if this part is
68:14 - confusing to you just make sure you're
68:15 - using the backticks before
68:18 - posting a comment so let's say are you
68:20 - sure
68:22 - you want to delete
68:25 - colon and then this is where we add our
68:26 - javascript and in order to do that we
68:28 - just put a dollar sign an opening open
68:31 - and closing curly brace and we'll say
68:33 - note.title
68:34 - and see it just takes this javascript
68:36 - and adds it to this string essentially
68:39 - so if
68:40 - that's true
68:41 - this dot props
68:43 - dot delete
68:44 - note
68:46 - note
68:48 - and i'll save and i'll show you what
68:50 - this does so i'm going to click delete
68:52 - note it says are you sure you want to
68:53 - delete test note from firebase i click
68:57 - yeah i do want to delete that and now
68:58 - you can see it logs delete note
69:01 - sense in the sidebar component
69:03 - we're just logging delete note all right
69:07 - so we got through the sidebar item
69:09 - component so we are getting pretty close
69:11 - here we're actually getting to almost a
69:14 - functional evernote clone
69:16 - so if we go back to our sidebar
69:18 - component
69:20 - we
69:21 - what we don't want to do is we don't
69:22 - want to just log stuff we want to
69:24 - actually select notes and delete notes
69:27 - so if we go to our app.js file in the
69:30 - sidebar component you can see we have a
69:31 - select selected note index and we have
69:34 - notes as props but what we really also
69:37 - need is we also need a couple of
69:40 - functions that we need to pass as props
69:42 - from the app.js file and those functions
69:44 - are going to be delete note
69:46 - new note and select note so let's go
69:49 - ahead and create those functions inside
69:52 - of the app.js file go ahead and create
69:54 - those functions we'll add the
69:56 - functionality for those functions inside
69:58 - of the app.js file and then we'll go
70:00 - back into the sidebar component and
70:02 - remove these console.log statements and
70:05 - actually implement the app.js functions
70:07 - okay let's go ahead and do that
70:10 - okay so let's go to our app.js file and
70:12 - you can see our sidebar component here
70:14 - let's go ahead and start adding in the
70:17 - props so delete note
70:21 - we'll save this dot delete note which
70:24 - doesn't exist yet
70:25 - select note nope not selected no we want
70:28 - to have make sure it's called select
70:29 - note
70:30 - because it's a function
70:32 - and we will
70:34 - go ahead and give it this dot select
70:35 - note which does not exist yet
70:37 - and then finally we will have new note
70:40 - new note
70:41 - which we will again set to this dot new
70:45 - note
70:46 - which
70:47 - does not exist yet cool
70:50 - so let's make them all exist now
70:52 - so
70:53 - let's see what do we want to start with
70:55 - i
70:55 - hmm
70:56 - [Music]
70:57 - i think select note let's do select note
71:00 - first
71:00 - and the reason why i want to do select
71:02 - note first is because that way we can
71:04 - select the note we can show that the
71:06 - selected property for the sidebar items
71:09 - list items is working correctly and also
71:12 - demonstrate the text we'll have to go
71:14 - into the editor component in order to do
71:17 - a few small things so that when we
71:18 - select this
71:20 - that text actually appears over here so
71:22 - i want to go ahead and knock that out so
71:23 - that we can focus on the other stuff
71:26 - so let's go ahead and go to our select
71:29 - note let's create that
71:31 - select note
71:35 - and we will expect select note to take a
71:38 - note and an index whoa
71:41 - and
71:43 - let's just say this dot set state
71:46 - and we'll update some state here and
71:48 - we'll update the selected note index
71:50 - which
71:51 - we have the index so
71:53 - index
71:54 - and then selected note
71:57 - selected note and we will set that equal
71:59 - to note
72:01 - so i think we already have select note
72:03 - implemented inside of the sidebar item
72:06 - so let's go to the sidebar item and just
72:07 - verify that select note we are calling
72:09 - that
72:10 - and then inside of the sidebar select
72:13 - note is just logging so what we want to
72:15 - do is actually call this.props this dot
72:18 - props dot select note
72:20 - and we want to pass in the note and the
72:23 - index
72:24 - now let's just make sure the order is
72:26 - correct it is note and index so it's in
72:29 - that order
72:31 - note and index
72:34 - and we need to actually for select note
72:36 - we actually need to accept n and i
72:39 - and inside of the sidebar item component
72:41 - you can see we are in fact passing the
72:42 - note and the index that's what n and i
72:44 - stand for we are passing that so we just
72:46 - need to make sure that we accept those
72:48 - as arguments here in this function
72:50 - inside the sidebar
72:52 - and once we save in theory this should
72:56 - this should work now oh wait it says
72:58 - note is not defined that's in the
73:00 - sidebar line 74. do do yes because it's
73:03 - n and i not note in index so
73:07 - save that that error should go away
73:09 - correct so what happens when i click
73:10 - this
73:11 - when i click that now you can see it's
73:13 - highlighted so we know that it is
73:16 - actually updating the state correctly
73:18 - because now we know that this is
73:19 - selected so it's it's working
73:22 - what's not working yet is we're not
73:24 - displaying that information over here
73:26 - so let's go ahead and go into our editor
73:29 - component
73:30 - and start um we need to do a few things
73:34 - to actually display the currently
73:35 - selected note so
73:38 - let's see let's start with the app.js
73:40 - file because we're going to have to pass
73:42 - in some properties to our editor
73:44 - component
73:45 - i know this is all over the place guys
73:47 - so just bear with me
73:48 - there's a lot going on in this tutorial
73:50 - it is kind of an intermediate level
73:52 - tutorial and there's a lot that needs to
73:54 - be covered so that's why i'm kind of
73:56 - moving quickly and sporadically but this
73:57 - is the kind of this is the way i
73:59 - actually work when i write code is i
74:02 - i'm always going over the place i'm not
74:05 - focused on one particular thing i'm
74:08 - focused on the task that i'm trying to
74:09 - complete which could be in six different
74:11 - files so it kind of can seem like i'm
74:13 - all over the place but in reality i'm
74:15 - just focused on one task at a time here
74:18 - so
74:19 - what we want to pass to the editor
74:21 - component
74:22 - is a selected note
74:26 - which
74:26 - not select note selected note
74:29 - and we want to make sure that we set
74:31 - that equal to this.selected
74:35 - note
74:36 - and then we want to pass a selected note
74:38 - index
74:41 - which will be this dot state dot
74:43 - selected note index
74:45 - and then finally we want to pass notes
74:47 - which is
74:48 - this dot state dot notes now
74:52 - if we don't have a selected note
74:54 - if we have not selected a note at all
74:57 - then we don't want to render this editor
74:59 - component whatsoever so let's cut that
75:01 - and then let's put some curly braces and
75:03 - say this dot state dot selected note
75:06 - question mark so a ternary operator go
75:08 - ahead and render that out colon in other
75:11 - words else
75:13 - we're just going to return null
75:15 - cool
75:16 - so i will save that
75:18 - and let's see what happens when i click
75:20 - this so i click it and now this appears
75:22 - so we know again that our
75:25 - this dot state dot selected note
75:27 - piece of state is updating correctly so
75:30 - i just want to demonstrate that one more
75:31 - time we do not have the editor here i
75:33 - click this
75:34 - now the editor is there cool
75:36 - so now we just need to go into our
75:38 - editor component and actually accept
75:41 - those
75:42 - properties and begin
75:46 - displaying them
75:48 - okay so where we want to start is you
75:51 - can see we have value and value is the
75:54 - value of the react quill so
75:56 - it's whatever's inside of here and it's
75:58 - html it's one big string of html that's
76:01 - what value is
76:02 - so it uses that value to render out all
76:05 - this stuff now
76:07 - right now this dot state dot text is
76:09 - always an empty string so
76:12 - what we have to do is we have to go in
76:14 - and
76:17 - take
76:18 - we have to update the this.state.txt
76:21 - state with whatever property we have
76:23 - passed in so let's go ahead and
76:26 - implement some lifecycle hooks to do
76:28 - that
76:29 - but we're going to have to implement two
76:31 - lifecycle hooks and i will explain that
76:34 - in just a second
76:35 - so let's just go ahead and implement it
76:36 - and then i'll explain why we're doing it
76:38 - this way so component did mount okay
76:43 - i explained lifecycle hooks a little
76:44 - earlier
76:46 - so we'll say this dot set state
76:50 - and we're going to go ahead and set all
76:51 - the state we're going to say this uh
76:53 - text is going to simply be
76:55 - this dot state dot i'm sorry this dot
76:57 - props
76:59 - this dot props dot selected note dot
77:01 - body
77:04 - then we also have a title
77:06 - which is going to be this dot props dot
77:08 - selected note dot title
77:12 - and then finally our id
77:15 - slice of state is going to be this.props
77:18 - dot selected note dot id
77:23 - cool
77:24 - so
77:26 - when we mount the component um when we
77:29 - first mount it
77:30 - it's going to set the state so i'm going
77:32 - to save it and i want to see what
77:34 - happens when we mount it i click it now
77:36 - you can see hello world
77:38 - is being rendered as an h1 tag or a
77:41 - heading 1 here it's being rendered
77:44 - properly that's great
77:46 - but see what's going to happen is if we
77:48 - have multiple notes here i want you to
77:50 - think about this for a second okay
77:53 - i'll i'll prove it in just a second but
77:54 - i want you to think about it first so
77:56 - let's say we have two notes and i select
77:58 - this note well component dead mount is
78:00 - called when it first
78:02 - gets when that component first gets uh
78:04 - pushed into the dom so
78:07 - when we click this it renders this um
78:10 - this react quill component and component
78:13 - did mount is called
78:15 - now if we come over here and select a
78:16 - different note
78:19 - this component is already mounted
78:21 - component didn't mount is not going to
78:22 - get called again so how can we possibly
78:24 - re-update
78:26 - our
78:28 - state with the new props well what we're
78:31 - going to have to do is we're going to
78:32 - have to use another lifecycle hook
78:34 - called this dot i mean component did
78:36 - update and use an if statement inside of
78:39 - it to tell whether or not it is time to
78:42 - update the state or not so i want to go
78:44 - ahead and just take a second and prove
78:46 - this
78:47 - and so that it's not just theory so
78:49 - let's go ahead and do that now
78:51 - alright so i'm over at my firebase
78:52 - console and i've got the database table
78:54 - here
78:55 - so i'm going to add a new note so i'm
78:56 - going to add a document auto id and then
78:59 - we'll have a title
79:00 - and you know i'll just be like yo yo
79:03 - what's up
79:04 - and then i'll put a body here
79:07 - and i'll just put nothing much
79:10 - and then give it an id
79:13 - which
79:14 - i actually i don't think the id is
79:16 - supposed to be in here so i'll just give
79:17 - it a title and a body and then save it
79:21 - and that was supposed to be html let me
79:22 - actually update that really quick the
79:24 - the body is supposed to be html let me
79:28 - we'll just give it a h h2 let's give it
79:30 - h2 give it some variance here
79:34 - okay
79:35 - so i'm adding this note really quick so
79:37 - when i come back over here you can see i
79:38 - have a second note because it updates
79:40 - automatically
79:41 - so what do you think is going to happen
79:42 - when i click this just as i explained
79:44 - right i'm going to click this it's not
79:46 - calling component did mount again you
79:47 - can see that this is now the selected
79:49 - note
79:50 - because it's highlighted so it's
79:52 - updating state properly
79:54 - the problem is it's not updating the
79:56 - react quill component at all and that's
79:58 - because we're calling component didn't
79:59 - mount instead of component did update
80:02 - but we have to do both okay so we have
80:03 - to do both
80:04 - so i just wanted to prove that really
80:06 - quick to show you that the problem
80:08 - exists and why we're doing it this way
80:09 - so component did update okay
80:13 - so this react
80:15 - hook gets called whenever the component
80:17 - properties are updated and so we are
80:20 - going to put an if statement in here
80:21 - that says if this dot props dot selected
80:24 - note dot id
80:27 - does not equal
80:29 - this dot state dot id so
80:33 - that means if i come over here and i
80:34 - click this one so say this is selected
80:36 - and then i come over here and try to
80:38 - select it again it's not going to call
80:39 - this function okay
80:42 - instead it's saying if
80:43 - the id of the one that you just selected
80:47 - is different from the one that it's
80:49 - displaying
80:50 - then we want to go ahead and call this
80:52 - again which is set state so i'm going to
80:54 - copy this
80:56 - and add some curly braces here and paste
80:57 - this in save it
81:01 - so now i'll select this note you can see
81:02 - it says hello world and then i'll come
81:04 - over here and select this note and you
81:05 - can see that it does in fact display
81:08 - the note as expected so now i can go
81:10 - back and forth between these two notes
81:14 - so this is great the only other thing we
81:16 - need to do inside of the editor
81:17 - component is implement our update
81:19 - function so
81:22 - instead of logging
81:24 - let's call
81:26 - this dot props
81:28 - dot
81:30 - note update
81:32 - this dot props dot note update
81:34 - is that what we called it let me go back
81:36 - to the um the app.js file
81:40 - do
81:42 - looks like we
81:44 - forgot to add that so i'm gonna inside
81:46 - of the app.js file inside of the editor
81:49 - component opening tag we need to add one
81:51 - more prop and we're gonna call it note
81:53 - update
81:54 - note update
81:55 - and
81:56 - we will set that equal to this.note
81:58 - update
82:00 - which does not exist so i'll come down
82:02 - here and just quickly say note update
82:06 - is a function
82:09 - and i want to say note update let's see
82:12 - node update takes an id
82:15 - and a note object okay
82:17 - and i just want to log those whenever
82:19 - this happens for now
82:24 - so
82:25 - back to the editor so now that we have
82:27 - this we can say this dot props dot note
82:29 - update and remember it takes an id and a
82:32 - note object
82:34 - so the id is clearly going to be this
82:37 - dot state
82:38 - dot id easy enough but this note object
82:42 - is going to be
82:43 - it's going to have two things it's going
82:44 - to have a title
82:45 - which will simply be this dot state dot
82:47 - title
82:48 - and it's also going to have a body which
82:51 - is going to be this state dot body
82:55 - okay
82:56 - we save that and so
83:00 - if i come over here
83:02 - and i start trying to update the note so
83:04 - i just be like yo i'm just typing some
83:06 - stuff in here and i stopped typing for
83:07 - 1.5 seconds
83:09 - you can see that it does
83:11 - console log the id and the note object
83:15 - and body is undefined here so let's see
83:17 - why is body undefined so this dot state
83:19 - dot body appears to be undefined
83:22 - let's see
83:26 - ah
83:26 - so it should be text instead of body so
83:29 - this dot state dot text
83:31 - caught myself on that just in time
83:34 - so let's go back over here and try to
83:36 - update this so i type type type type and
83:38 - then i let go
83:40 - and you can see that body is
83:43 - what we would hope it would be
83:44 - so perfect now of course it's not
83:47 - actually updating that in the database
83:48 - yet and that's because inside of the
83:50 - app.js file we are simply logging and
83:52 - we're not going to firebase
83:54 - but like i said i wanted to just knock
83:56 - out this editor stuff so we could get
83:58 - back to our app day app.js functions and
84:02 - we can start finishing up the apps
84:03 - functionality
84:05 - so with that being said let's go ahead
84:07 - and head over to our app.js file and
84:09 - start knocking out all those functions
84:11 - that we added to the sidebar component
84:14 - and also this note update function here
84:16 - okay
84:17 - so
84:19 - what do we want to start with let's
84:20 - actually start with our note update
84:22 - function since we already pretty much
84:23 - have it ready
84:25 - so what we want to do is we want to go
84:27 - ahead and update firebase
84:29 - so we're gonna say firebase
84:31 - dot firestore
84:34 - dot collection and the name of our
84:36 - collection was notes
84:39 - dot doc
84:41 - and we have the id already because we're
84:43 - passing it in right here
84:45 - so we have the id for the document
84:47 - very convenient and we're going to say
84:48 - update
84:51 - and all we have to do for update is pass
84:53 - in the object
84:55 - and it's going to be title so if you
84:57 - remember if we go to firebase which i'm
84:59 - not going to do but you can imagine
85:02 - you can look at it yourself if you want
85:03 - as well the
85:05 - object the object inside of the document
85:07 - is going to have a title and a body but
85:09 - we also want to add a timestamp to it
85:11 - and that's so that if you guys want to
85:12 - extend this application anyway you can
85:14 - actually utilize that time stamp to show
85:16 - when it was last updated
85:18 - so we'll say
85:20 - the title is equal to note obj
85:24 - dot
85:24 - title the body
85:30 - okay the body is equal to note obj
85:34 - body
85:36 - and then the time stamp
85:39 - is going to be equal to firebase
85:42 - dot firestore
85:44 - dot field value
85:48 - dot server timestamp
85:50 - and this what this is going to do is
85:52 - it's a firebase function that's going to
85:54 - generate a timestamp for us on the
85:56 - server so we don't have to worry about
85:57 - trying to create a datetime object and
86:00 - all of that it's going to handle it for
86:01 - us okay
86:02 - cool so i'm going to save this
86:05 - let's test this out let's go over to yo
86:07 - what's up
86:08 - and instead of nothing much i want to
86:10 - come over here and say
86:12 - hello
86:15 - and now you can see over here it
86:16 - actually did in fact update firebase
86:18 - because the the body has been updated to
86:21 - hello inside of the preview as well
86:23 - so let's go to firebase and just make
86:25 - sure that that updated inside of the
86:27 - table
86:28 - so i went to my firebase console i'm
86:30 - going to database and then i'm going to
86:32 - go to that note
86:34 - and you can see now it says hello
86:36 - instead of
86:37 - nothing much
86:40 - perfect
86:41 - cool so now that we have that working we
86:44 - have note update working let's go ahead
86:46 - and
86:47 - add the ability to create a new note
86:51 - okay so let's go
86:53 - underneath note update and create a
86:55 - function called new note
87:00 - now new note is going to be asynchronous
87:02 - and it's going to accept a title
87:04 - asynchronous and it's going to accept a
87:06 - title
87:07 - so by default the new notes body will be
87:10 - empty and it'll just have a title
87:12 - so we're going to say const note is
87:15 - equal to
87:16 - an object and inside of this object
87:18 - we'll have a title which will be equal
87:20 - to title which is coming from right here
87:24 - and
87:25 - we will also have a body which we will
87:27 - manually
87:28 - empty string that
87:30 - now below the note we're going to say
87:33 - const
87:35 - note uh i'm sorry new from
87:38 - d
87:39 - b is equal to await so we're going to
87:42 - await a firebase call
87:44 - dot firestore
87:48 - dot collection
87:51 - the collection is notes
87:54 - goodness
87:55 - dot add so we're adding we're using the
87:58 - add function which allows us to add an
88:00 - item to the collection
88:02 - and it's going to have a title which is
88:04 - going to be note dot title
88:06 - it's going to have a body which is going
88:09 - to be equal to note
88:11 - note dot body which is just that empty
88:13 - string and then timestamp
88:16 - which we can just we can actually just
88:18 - go over here and copy what we had here
88:20 - so we're going to create it with a
88:21 - timestamp here
88:23 - okay so now that's the new note from db
88:26 - so what we're doing is we're just
88:27 - setting we're we're creating this in in
88:30 - firebase and then we're waiting for that
88:32 - to
88:33 - respond from the server and then
88:35 - whatever the response is from the server
88:37 - we're setting that equal to a variable
88:39 - called new from db
88:41 - so below that we want to go ahead and
88:43 - create a const called new id
88:46 - and set that equal to new from db
88:50 - dot id so that we can have access to
88:52 - that
88:53 - that document id that's automatically
88:55 - generated by firebase we can have access
88:57 - to that because we're going to need
88:58 - access to that we're using that
89:00 - throughout the application as you've
89:01 - noticed
89:03 - so you know right here for instance
89:04 - we're using it right here you can see it
89:06 - all throughout the application
89:07 - right here as well so we need access to
89:10 - that so what we're doing is we're just
89:11 - grabbing that from the response that's
89:13 - why we're accessing that
89:15 - then we're going to wait again we're
89:16 - going to await this dot set state
89:18 - because set state is actually
89:20 - asynchronous inside of react and we're
89:22 - going to update some state here we're
89:23 - going to say notes
89:25 - we want to update the notes array
89:27 - and we want to use the spread operator
89:29 - to say it should be all of the notes we
89:31 - already have so this.state.notes
89:33 - along with the new note
89:36 - which note is this object right here
89:40 - okay
89:41 - and
89:42 - let's see
89:47 - looks like uh
89:54 - yeah okay sorry about that
89:56 - um so we're awaiting that and then
89:59 - we want to say const new note index so
90:03 - we want to go ahead and find the index
90:06 - of the new note inside of that notes
90:07 - variable
90:09 - so
90:10 - i'm going to say
90:11 - this.state.notes.index of
90:14 - whoa
90:15 - index of
90:17 - and i'm going to use so
90:21 - index of is a function of the array
90:23 - object that finds the index of a
90:25 - particular item inside of an array and
90:27 - so what we have to pass it is the actual
90:29 - item inside of the array
90:31 - now i'm going to go ahead and do it this
90:34 - way
90:35 - this dot state dot notes dot filter
90:41 - okay so i'm going to filter
90:42 - through that array and i'm going to find
90:44 - the one where the note
90:46 - is equal to the current note the note
90:49 - that we're on so we're iterating through
90:50 - for each note we want the one where note
90:52 - dot id is equal to
90:56 - new id
90:58 - now that's going to return an array
91:01 - because filter returns an array but we
91:03 - know for a fact it's only going to
91:04 - return one item
91:06 - because of this right here so since it's
91:08 - only going to return one item we can
91:09 - just go ahead and safely return the zero
91:12 - index and know that that will be the one
91:14 - that we were looking for
91:16 - okay so let's let's look at this line
91:17 - really quick const new note index
91:21 - this dot state.notes.index up so we're
91:23 - finding the index of
91:25 - this one
91:26 - and this one is
91:28 - this.state.node.filter so we're going
91:30 - through each and we're iterating through
91:31 - the
91:32 - the notes
91:34 - and we're looking for the one where it's
91:36 - equal to the id
91:38 - right here so we find the one with this
91:40 - id inside of notes and then we are
91:42 - selecting that automatically okay
91:45 - hope that makes sense
91:46 - this dot set state
91:48 - we're going to set the state now
91:52 - and we're going to say selected note
91:55 - is equal to this dot state
91:56 - this.state.notes
91:58 - and we're going to use that index that
92:00 - we just got that new
92:02 - note index
92:03 - gosh
92:04 - new note index
92:06 - vs code is not loving me today
92:10 - selected note index
92:13 - will simply be equal to new note
92:16 - index
92:18 - okay
92:20 - so
92:21 - why is it we did all this well
92:23 - when we create a new note we want to go
92:26 - to the firebase add the new node into
92:28 - firebase and then we want to update
92:32 - the currently selected note with the one
92:34 - we just created now let's demonstrate
92:36 - that to see why that's a good thing so
92:38 - hopefully this works um so i'm going to
92:41 - create a new note i'm going to say
92:43 - test
92:44 - note
92:45 - i'm just going to call it test note and
92:46 - i'm going to click submit note here
92:49 - and you can see
92:51 - that it did not successfully add the
92:54 - note so inside of sidebar js72
92:58 - it's logging something instead of
92:59 - calling a function so let's go ahead and
93:02 - um
93:03 - let's fix that so inside of sidebar
93:05 - component on line 72
93:08 - correct we are actually logging instead
93:11 - of calling the parent function so let's
93:12 - see
93:14 - the new note takes the title so all we
93:17 - have to do is say here we just have to
93:19 - say
93:21 - new this.props.newnote and pass it this
93:23 - dot props dot
93:25 - title
93:26 - uh this dot state dot title actually
93:28 - this dot state dot title so we want to
93:30 - pass in uh this dot state dot title to
93:33 - our app.js new note function
93:36 - and then once that happens we want to
93:37 - set some state really quick just to
93:40 - reset everything
93:42 - and we're going to say title is null
93:45 - and adding note is going to be false
93:50 - cool so let's see what happens now when
93:52 - i come over here and try to add a new
93:54 - note call it test
93:56 - note
93:57 - submit the note
93:58 - and it creates test note in firebase and
94:01 - then it automatically selects it for us
94:03 - and it automatically selects it here too
94:05 - so i'm just going to say
94:06 - is this working
94:09 - question mark wait for it to update and
94:12 - you can see it does in fact update it
94:13 - over here
94:14 - fantastic so this is actually coming
94:17 - along pretty well so let's move on
94:20 - i think the next thing that we're going
94:21 - to want to do is be able to delete notes
94:23 - so
94:24 - what i will do is come over to the
94:26 - app.js file
94:28 - and let's implement our delete note
94:30 - function so under new note create a
94:32 - function called delete note
94:35 - delete node is going to take the note
94:36 - object itself
94:39 - and
94:40 - we are going to say const note index
94:44 - note index is equal to
94:47 - this dot state
94:49 - dot
94:50 - notes dot index of
94:56 - note
94:58 - cool so now we have the node index
95:00 - and we're going to say if
95:02 - this does
95:05 - typing at an awkward angle
95:07 - okay this dot state
95:09 - dot
95:10 - selected note index if this dot state
95:14 - dot selected note index is equal to note
95:16 - index
95:20 - then we'll say this dot set state
95:24 - whoops let's not set state
95:27 - selected note index
95:30 - and we'll set that to null
95:32 - and i'll explain why we're doing this in
95:33 - just a second
95:35 - and selected note we will also set to
95:37 - null
95:39 - then we'll have an else statement here
95:41 - where
95:42 - we will actually do
95:43 - the stuff and then we'll say
95:46 - this dot state dot notes dot length if
95:50 - it's
95:51 - length
95:52 - if that's greater than one
95:54 - then we're gonna do this
95:56 - and this is this dot select note
96:02 - select note we'll call select no
96:06 - this dot select note which we have
96:09 - implemented here so it takes a note and
96:11 - an index so this dot select note we'll
96:13 - go ahead and call that with
96:15 - the note and the index now
96:18 - this is where things are going to get a
96:20 - little weird so just try to follow with
96:21 - me and i'll explain it as i go okay
96:25 - the
96:26 - note is going to be
96:29 - this dot state dot notes
96:32 - and then we're going to access it by a
96:35 - index which is going to be this state
96:38 - dot
96:39 - selected note index
96:41 - minus one and the reason why it's minus
96:43 - one is because now there's one less
96:46 - so when we delete a note
96:49 - we don't like if we're already if it's
96:51 - selected for instance if if we have the
96:54 - note selected
96:55 - um
96:57 - then what we're doing is we're
96:58 - deselecting the note that's why we have
97:00 - this if statement here so if we have
97:02 - this note selected right here already
97:04 - and then i delete the note that's
97:06 - already selected
97:08 - we want to
97:09 - deselect that note in state because we
97:11 - don't want that to still be appearing
97:13 - over here we're going to get server
97:14 - errors it's just not going to work out
97:16 - very well so what's going to happen is
97:17 - if you delete the note that you're
97:18 - already selected
97:21 - we want to just deselect everything and
97:24 - kind of reset the state there however if
97:26 - the
97:27 - note that you delete
97:30 - say i have let's just say i have this
97:31 - one selected right here let's say uh no
97:34 - better yet let's say i have this one
97:35 - selected okay this is the third note in
97:38 - the list
97:39 - if i delete the first note in the list
97:42 - now there's only two notes in the list
97:44 - and if there's only two notes in the
97:46 - list and i have the third one selected
97:47 - then the third index doesn't exist
97:49 - anymore
97:50 - so we're going to get errors so what
97:52 - we're doing here is we're trying to
97:53 - account for that specific problem
97:56 - so
97:58 - that's why this dot state does selected
98:00 - no index minus one okay that's why we're
98:02 - doing that
98:04 - so then we're gonna say the index is
98:06 - this dot state dot
98:08 - selected note index minus one so yeah so
98:10 - now we have the note which is
98:13 - um
98:14 - the current note minus one this dot
98:16 - state.notes this dot state dot
98:18 - selected note index minus one
98:21 - and then we also have to pass the index
98:22 - because that is the second argument to
98:24 - the select note function here
98:26 - and that is simply this dot state does
98:29 - selected no index minus one okay
98:32 - got through that so we'll put a colon
98:34 - here since we're still inside of the
98:35 - ternary operator
98:38 - and
98:39 - you know else if this.state.notes.length
98:44 - is not greater than one
98:46 - well
98:47 - what that means is we have no more notes
98:50 - so let's go ahead and
98:55 - basically just copy this just copy this
98:57 - line right here
98:58 - let's deselect everything
99:00 - so if we only have one note
99:03 - in this list and we delete it there's no
99:04 - more notes so we need to just deselect
99:06 - everything
99:07 - all right cool
99:10 - all right so now that we got all that
99:11 - taken care of we can go ahead go to
99:13 - firebase and delete our note so we'll
99:15 - say firebase
99:17 - dot firestore
99:19 - dot collection i think you guys are
99:21 - getting used to this part pretty quick
99:23 - uh notes is the name of the collection
99:25 - dot doc we have the
99:27 - uh the id i believe let me just
99:31 - quickly
99:32 - yeah note dot id
99:35 - no dot id
99:36 - and then we will do dot delete
99:39 - which makes it really easy for us to
99:41 - delete it it's built in to firebase so
99:44 - all right so i'll save that but i'm not
99:46 - going to click delete yet because we
99:48 - still have to go
99:49 - if we look at our sidebar item we are in
99:51 - fact
99:52 - calling the delete note and we're
99:54 - passing
99:55 - note as the parameter here but in
99:57 - sidebar we're only logging still so we
100:00 - need to say this.props
100:02 - dot delete note
100:04 - we need to pass the note
100:07 - so we'll accept note as the argument
100:09 - here and i think
100:12 - that's going to do it for us for
100:14 - deleting notes
100:15 - so let's test it out
100:17 - let's say i select this note and then
100:19 - let's say i delete the note that i have
100:20 - selected here let's see what happens
100:22 - when i when i do this
100:23 - cool so i had a note selected i deleted
100:26 - the one that i had selected and now
100:28 - nothing is selected that's perfect
100:29 - that's exactly what we wanted to happen
100:32 - now let's select this note
100:34 - and delete the one underneath it and see
100:36 - if this one stays selected let's see
100:38 - what happens
100:40 - it
100:41 - sort of worked but it also didn't
100:43 - because um
100:45 - this is selected here but our react
100:48 - quill component broke when that happened
100:50 - so it's our state is correct but we have
100:52 - to fix something in our react quill
100:54 - component for this to work properly
100:57 - okay so after a little experimenting i
100:59 - believe i found the problem that we had
101:01 - with where we were getting that error
101:03 - and the reason why we were getting that
101:05 - error i believe is because we are
101:08 - not removing the
101:11 - so let me get rid of this sorry
101:16 - so we were not removing the note that
101:19 - we're deleting from the notes state
101:24 - at all
101:26 - so we need to do that so what we need to
101:28 - say
101:29 - is underneath here
101:31 - we'll just go ahead and do that really
101:32 - quick actually i will make this
101:33 - asynchronous so i'll say async
101:36 - and then i will say here underneath the
101:38 - note index i will await
101:40 - this dot set state and i'm going to
101:43 - set the whoops set the notes state notes
101:48 - equal to notes dot filter and we just
101:50 - want to return all of the notes except
101:53 - for the note that we're passing in right
101:55 - here so we're just going to say notes
101:56 - dot filter and for each note we want
101:59 - every single note where note doesn't
102:02 - where note does not
102:04 - equal
102:05 - note
102:06 - and let's see if that fixes our problem
102:08 - here
102:08 - notes is not defined line 87
102:12 - and that's supposed to be this uh wait
102:14 - let's see
102:17 - this is supposed to be this dot state
102:19 - this dot state dot notes cool all right
102:22 - let's see if this fixes our problem so
102:24 - i'll select this note and then i'll
102:25 - delete the one before it
102:27 - and
102:28 - we do not get the error
102:30 - that's that's actually great so that
102:32 - makes some of this code um
102:35 - a little bit
102:37 - i guess pointless because what we were
102:38 - trying to do is if i come back in here
102:40 - and select this note what i was trying
102:42 - to be able to do is have this note
102:44 - selected
102:45 - and then if i were to delete this note i
102:47 - would want this note to stay selected
102:50 - um
102:50 - [Music]
102:52 - so if i come back up here delete it you
102:54 - can see that it's no longer selected
102:55 - anymore and that's perfectly fine the
102:57 - reason why that's happening is because
102:59 - uh we're changing the
103:01 - we're updating the state beforehand
103:03 - before this if statement
103:05 - but
103:07 - what i want you guys to do um since this
103:09 - is an intermediate level tutorial i want
103:12 - you guys to figure out how to fix that
103:14 - problem
103:15 - and you can clone the repository and
103:18 - figure out how to fix it and then you
103:19 - know if you want to post in the comments
103:21 - that you fixed it and share with others
103:23 - how you fixed it absolutely please do
103:25 - that but i'm not going to fix that in
103:26 - this tutorial i do i did want to leave
103:29 - you guys with a little bit of homework
103:30 - and i think this problem is going to be
103:33 - perfect for you guys so i'm going to
103:35 - leave you with that i'm also going to
103:36 - leave you with a little bit of extra
103:37 - homework afterwards as well so let's
103:40 - go ahead and move on to the next
103:42 - function
103:44 - this is actually going to be inside of
103:46 - our editor component
103:48 - which we do not have the ability yet to
103:51 - update our titles
103:53 - so we need to do that so what we will do
103:56 - is inside of the render let's go ahead
103:58 - and add a few more elements to our
104:00 - return
104:01 - inside of our editor.js file
104:04 - so let's quickly come up to the top of
104:06 - our editor container here
104:09 - and let's create a border color icon
104:14 - and
104:15 - inside of the opening tag we'll give it
104:18 - a class name that we will set equal to
104:20 - classes dot edit icon
104:24 - whoops
104:25 - alright so we have the edit icon and
104:28 - below this will create an input
104:31 - and inside of the opening tag we'll add
104:34 - some props here or not really props
104:36 - since this is a standard html
104:40 - element but
104:41 - you get what i'm saying so class name
104:44 - classes dot title input
104:48 - and then underneath that will have a
104:49 - placeholder
104:52 - which will be a plain string and we'll
104:53 - say note title
104:55 - dot
104:58 - value
105:02 - which will be this.state.title whoops
105:05 - this.state.title so if this.title exists
105:08 - we'll use the turn
105:10 - turnary operator
105:11 - then we'll go ahead and say
105:12 - this.state.title
105:15 - otherwise we'll just do an empty string
105:19 - and then we'll have an unchanged
105:20 - function on change
105:23 - and the on change will
105:26 - oops
105:26 - automatically get past the event which
105:28 - we will pass to our own function called
105:30 - this.updatetitle
105:32 - this dot update
105:34 - title
105:35 - and we will pass e.target.value
105:40 - to that
105:41 - and underneath body we'll go ahead and
105:43 - create our update title function so
105:45 - update title
105:47 - and you can see we're passing the text
105:48 - in so
105:50 - txt
105:53 - and for update title what we want to do
105:55 - is we basically want to do exactly what
105:57 - we did with update body so let's say
106:00 - await
106:02 - let's go ahead and add async here
106:05 - oops
106:07 - oh my gosh okay async
106:10 - we want to update we want to await this
106:12 - dot set state
106:15 - the chunk of state that we are updating
106:17 - is the
106:18 - title so it'll be title and we'll set
106:20 - that equal to txt and once that gets
106:22 - done we will call this.update
106:25 - so it will also have a debounce effect
106:28 - as well
106:29 - so let's see what happens if i come over
106:31 - here
106:32 - let me just make this a little smaller
106:35 - make this a little bigger okay you can
106:36 - see there's this input here now when i
106:38 - come in here i can highlight it and
106:41 - instead of two i'll put like two two two
106:45 - um and you can see it updates the title
106:47 - as we were expecting
106:48 - expecting it to
106:50 - so let's go through and test everything
106:53 - so let's create a new note i'm going to
106:54 - call this test
106:56 - note
106:57 - 1 just for the heck of it i submit the
107:00 - note it's automatically selected here
107:02 - you can see i have a typo so i'm going
107:03 - to fix that i go in here to edit my note
107:06 - title and it correctly edits the note
107:08 - title you can come in here add some text
107:10 - and say hello this is working
107:14 - and then you can see it updates here
107:16 - i'll click this note it now selects this
107:18 - note let's say i don't want all three
107:20 - twos here i just want to put this is a
107:22 - test
107:24 - it updates here i can come back over
107:26 - here and let's just say um
107:28 - you know replace this with text that
107:30 - makes sense testing the body
107:34 - cool so that updates and now i'm going
107:36 - to delete this note so i delete it it
107:38 - deselects everything i delete this note
107:41 - now we have no notes and the app appears
107:44 - to be working perfectly so
107:46 - final note test
107:52 - yep it's all working as expected so this
107:55 - is a fully functional evernote clone
107:57 - application where you can take your own
107:59 - notes and everything and as you remember
108:01 - there was a
108:03 - um a small thing that you guys could
108:06 - fix on your own if you'd like to which
108:07 - is the
108:09 - selecting so if i have multiple notes
108:11 - and i delete one of the notes keep the
108:12 - one that's selected selected instead of
108:14 - deselecting
108:16 - you know explicitly
108:18 - please try to fix that if you are
108:20 - interested in furthering your abilities
108:22 - within react that would be a great
108:25 - exercise for you
108:26 - another great exercise for you
108:29 - is to go watch the other tutorial that i
108:30 - have in the description which is for an
108:33 - instant messaging application which it
108:35 - goes over how to create user accounts so
108:38 - you'll be able to create user accounts
108:40 - and then
108:41 - what i think would be interesting is for
108:43 - you to take this evernote application
108:46 - and create
108:48 - user accounts so that a user can sign in
108:51 - and they can have their own notes and
108:52 - then another user can sign in and they
108:54 - won't have access to any other notes but
108:56 - their own so it's user based
108:59 - so i highly recommend you try watching
109:01 - that tutorial and then afterwards come
109:04 - back to this tutorial when you're done
109:05 - with it
109:07 - and try to
109:09 - combine what you learned in the previous
109:11 - tutorial and in this tutorial and see if
109:12 - you can add the ability to have users
109:15 - with this evernote clone
109:19 - all right guys i really hope you enjoyed
109:21 - this tutorial and i know that it went
109:23 - pretty quickly and i know that it was
109:25 - probably a little bit confusing but
109:27 - there are certain parts where it's good
109:29 - that it's confusing if that makes sense
109:30 - it's a little challenging and you can
109:32 - stop you can pause and you can think
109:34 - deeply about these topics and when you
109:36 - do get it it's you get a good sense of
109:38 - satisfaction that you learn something
109:40 - new so i really hope you did enjoy if
109:43 - you did please give me a like subscribe
109:45 - to my channel and i will see you guys in
109:47 - the next tutorial