00:00 - Learn how to use Django and the OpenAI API to create a chat GPT clone, complete with user
00:07 - authentication. Tommy Taco teaches this course. He has created many popular courses for our channel,
00:13 - and we even created a course together. So get ready to improve your Django skills and create a chat
00:19 - bot. Hey guys, welcome to this tutorial where we're going to be building an AI chat bot,
00:24 - just like chat GPT. So we're going to use Django and the OpenAI API to build this. So it's going
00:30 - to be a chat bot where you can ask it questions, and it's going to give you responses to that
00:34 - question. So we're also going to implement user authentication. So we're going to allow a user to
00:39 - register and log into our platform. And whenever a user logs out and logs back in, they're going
00:44 - to see the history of the messages that they've sent before. So I'm going to walk you through the
00:48 - OpenAI documentation. And I'm going to show you how to use GPT three and GPT four in your application
00:53 - by accessing the OpenAI API. So you want to get the full code of everything that we've done in
00:58 - this video, there'll be a link in the description below where you could get the full code to all
01:02 - the files we used and the old source code to the old project that we built. I'm Tommy, a creator at
01:08 - Free Code Camp, as well as on my own channel Code With Tommy. So if you like more tutorials like
01:12 - this, please don't forget to check out my channel at Code With Tommy, where I make more videos on
01:16 - web development and programming in general. So having that said, thank you for tuning in to this
01:21 - video. Let's get started with this video. So the first thing that we're going to do is to first
01:26 - create a Django project. So before you create a Django project, you need to make sure that you
01:30 - have Django installed. So I'm going to do pip three, install Django, right here on my terminal
01:37 - on my MacBook. If you're on a Windows, just open your command prompt and type the same command.
01:41 - But make sure not to type three, just type pip install Django, and it's going to do that for you.
01:46 - So I already have Django installed, and it's going to tell me that requirement already satisfied.
01:50 - That's because I have Django installed. But if you don't have it installed, you should go ahead
01:54 - and install that for you. So now with the second thing that we're going to do is to just create a
01:58 - new Django project. So I'm going to be assuming that you have a basic knowledge of Django. But
02:04 - if you don't have, you're still okay to follow this tutorial, as I'm going to be explaining
02:07 - everything I do step by step. So what I'm going to do is to go into the folder where I want to
02:13 - create my Django project. So I'm going to do CD documents slash projects. And I'm going to do
02:24 - CD chatbots. I created a folder named chatbot. And in there, I should have a template that says
02:34 - pre template. So this pre template is basically where I stored the HTML CSS template of this
02:39 - project. I'm going to show you that in a bit. And what I'm just going to do is to say,
02:45 - mkdir means I want to make a new folder. Well, actually, I could just create my Django project
02:50 - here, I could just say Django, I think admin, start project,
02:58 - chatbots. I could call it Django chatbot. Django underscore chatbot. And then I could CD into let
03:08 - me just copy this Django chatbot. And if I press LS, now I see that a new Django project has been
03:14 - created in that particular folder. And I'm just going to create a new Django app. So I'm going
03:19 - to say Python three manage.py. Start up chatbots. If I do LS, again, you can see that there's a new
03:29 - folder being created named chatbots. Now that everything is done, the next thing I want to do
03:33 - is to open this particular project on my VS code, or any editor, any ID that you're using. So if
03:41 - you're stuck with what I did, if you don't understand what I just did, so basically, when
03:45 - you want to create a new project in Django, you need to run a few commands. And this was what I
03:49 - did. I first make sure I have Django installed, because if I don't have Django installed, this is
03:53 - not going to work. And once I have Django installed, I just CD into the folder where I want to create
03:59 - that project. So that was in my document. And I had some folder in there. And then I CD into
04:04 - chatbots, which was the folder. And then I just created a new Django project using this command,
04:08 - Django admin start project. And this is the name of the project. And then I CD into that
04:14 - Django chatbot project. And after that, I just checked if a project has actually been created
04:19 - in a folder, and the way to check it is by doing LS. If you're on Windows and you're using command
04:24 - prompt, you just need to type the IR and click enter. That is going to do that for you. But it
04:30 - shows me an error because I'm on a MacBook. And once we know that a Django project has been created,
04:34 - what I did was to create a new Django app in there. And I also checked to make sure the Django app has
04:40 - been created, which is chatbots. And that is what I did to this point. So what I'm going to do now
04:45 - is to import this project I've created in my VS code, just going to swipe. So this is my VS code
04:50 - right here. And I'm just going to say file open folder. And I'm going to go into document,
04:58 - I'm going to go into projects, I'm going to go into chatbots. And this is the Django chatbot I
05:04 - created. So this is it here. Now whenever you're opening a new Django project, you need to make
05:09 - sure that you open your project on the root directory of that particular project. So the
05:14 - root directory of your project is a folder that contains the money.py file. If you see money.py
05:21 - in that folder, that is the right directory issue open. So this is open, and everything has been
05:27 - done. So I'm just going to cancel all of these to make sure everything is good. And yeah, so this
05:32 - is not my project folder. And this is my app folder. And the first thing you want to do to
05:37 - avoid any errors later is to go into settings in your project folder. And then inside installed
05:44 - apps, we want to add chatbot. I'm just gonna say chatbot. Now this is just to let Django know that
05:52 - we've created a new app named chatbots. And the app belongs to this particular project. So this
05:58 - is the chatbots app right here is an external folder. But Django doesn't really sees this as
06:04 - an app that is part of this project for now. But once we add it to installed apps, it knows that
06:09 - this chatbots folder is part of this whole project. So that's what that does. So whenever we try to
06:14 - call this chatbot folder, that app, or whenever I want to use any file from it, Django has access
06:20 - to it. So that's what that line does. Now that we've done that, the next thing that we're going
06:25 - to do is to just create our template folder, I want to take you have everything regarding
06:29 - our template first. So I'm going to create a new folder in the root directory, I'm going to name
06:34 - it templates. And in here, I'm going to put my HTML files. And what I'm going to do is to just
06:41 - come into my folder. So I'm just going to search finder. I'm just going to come into my projects.
06:50 - So I'm going to say projects, I'm going to come into chatbot. And then I have these two folders
06:57 - right here, these are the HTML files. And this, there'll be a link in the description below where
07:02 - you can download this and just use it and follow along with this project. So once you have that
07:07 - downloaded, just drag that into your HTML file. So for now, I'm just going to copy this and I'm
07:13 - going to go into this and then the template folder that we created right here is the same
07:19 - thing as this template folder on our finder. And I'm just going to paste that in there.
07:24 - So now that I've pasted it, if I come in here, those are right in here. So this is just the
07:29 - HTML template that I already built prior to making this tutorial. So I don't want us to
07:34 - spend a lot of time building out the UI. So I did this before. And you could just you know,
07:39 - continue from this UI that I already built. The main thing I want to show you in this video is
07:43 - how to build the back end or the functionality of how this actually works. So this is the UI,
07:48 - this is the HTML and everything is done. But the thing is, not I have that HTML, just the way I
07:53 - added to the way I told Django that this is where to access this chatbot app. I also need to tell
08:01 - Django where to access HTML files. Because right now this template file can this template folder
08:06 - can just be any folder is belong to anything it might never belong to this project. But once I
08:11 - tell Django that whenever we try to take an HTML file, go into this template folder, then Django is
08:16 - going to know that all our template files belong in this template folder. Now for you to do that,
08:21 - you just need to come into settings.py again. And you're going to come into where you see templates
08:27 - is a list. And you're going to look for dares. Now this dares stands for directory. And it just
08:32 - stands for the templates directory. So where do you want Django to look for your templates files?
08:38 - And I want you to look for it in this template folder. So I'm just going to say base there,
08:44 - comma templates. So what this is saying is that from the base directory, remember,
08:48 - I told you something about root directory does the same as the base directory. That is the folder
08:53 - the directory that contains the money.py file. So I'm saying from this particular directory,
08:58 - go into templates folder, which is this folder right here. So now it knows that whenever we're
09:02 - trying to call or render an HTML page is going to have to go into this template folder. So that is
09:08 - what that does. Now I don't really need this no mark or cancel out this settings.py. And the next
09:13 - thing I want to do is to just take care of the URLs. So I want to be able to go to my own page,
09:19 - and then have this my HTML show. For now, if I try to run my project, let's run the project,
09:24 - I make sure everything is working. If I say Python three manage the PI, run server. This is
09:32 - the command that we use to run a Django project, by the way. And if you're on a Windows once again,
09:37 - don't type Python three, just type Python, manage the PI run server. So once I hit enter, it says
09:44 - you have 18 on applied migrations, we don't really need to care about this, don't worry is not an
09:47 - error is just something we don't need to care about for this project. Now it says we are project
09:52 - is running on this particular port. Now let's just open it. So we could click on open command
10:01 - and click. So as you can see, everything is working. It says that the install works successfully.
10:06 - Congratulations. That means this project is good. There's nothing wrong with it.
10:10 - But the only thing wrong with it for us is that he's showing me this Django template.
10:15 - When I come into my own URL, or when I come into my website, I don't want to be seeing this,
10:19 - I want to see the HTML templates that I built. So we're going to take care of that now. And the
10:24 - first thing we need to do is to go into chatbots, we can just close this. And in chatbot, we're
10:31 - going to create a new file named URLs.py. So let's rename that as there was an error.
10:38 - So we're just going to say URLs. So what this does is that every single URL in our project,
10:44 - we're going to configure it in here. So for example, let's say this is my project, and I want
10:48 - to have something like slash login, I'm going to come into URLs and say there's a URL name slash
10:53 - login in my project. Or if I just want to have a normal homepage, which is just this normal homepage,
10:58 - I also have to configure it here. Now let's do that. The first thing that we need to do is to
11:03 - just say from Django, the URLs import path. So this part is something that Django gave us that
11:10 - allows us to basically specify each URL as a path. And I'm going to show you how to do that.
11:14 - So you're going to have to create a new list called URL patterns.
11:21 - It goes to list. And then we're going to use this part that we imported. So we're going to say
11:25 - part was specifying a new URL as a path. And then I'm just going to have this, yeah, I'm going to
11:31 - explain what this does. And I'm going to take from views dot chatbots. I'm also going to explain what
11:38 - all of this does. I'm going to say name equals chatbots. Okay, so now what this does is that
11:47 - when I say path, it takes three different argument like this. And the first argument is
11:52 - to specify what path I'm trying to create. So this stands for the own page. That means,
11:58 - whenever a user comes into my own page, let's say when I deploy this website to the web,
12:02 - and I host it on something like www.chatbot.com, right? So this is my own page. And that's what
12:09 - this specifies. If I do something like slash login, then this path means www.chatbot.com slash
12:17 - login, right? So I hope you understand what that means now. And since we know what that is,
12:24 - so this specifies the homepage, the next thing is that what is saying is whenever a user go to this
12:30 - homepage, we want to render this chatbot view from the views.py. Now there's a file named views.py,
12:37 - as you can see in here, and this file, so I'm just going to enlarge this a little bit. And this file,
12:42 - what it does is that it allows us to create functionalities for every single URL page. So
12:48 - what we're seeing is whenever a user come into this homepage, what do we want to do? Do we want
12:53 - to render an HTML page? Do we want to register something in the database? Everything is going
12:57 - to be done in this views.py. So now what we need to do is to create a new function named chatbot.
13:05 - It's going to take a request. And then for now, we're going to pass. We're going to come back to
13:09 - this. But what I just did here is to create a new function named chatbot. So that when we're trying
13:14 - to call views.chatbot, it doesn't give us an error. So as you can see, it gives us this error
13:18 - for now. That's because we don't have views imported. So we just need to do from dot import views.
13:26 - So that is done. So we've imported views.chatbot, no error, because it knows that there's a chatbot
13:32 - function in here, just going to collapse this. And once we have that, we're giving it name of
13:37 - chatbot. So we're just naming this URL chatbots. That's just what we're doing for that. Now I'm
13:41 - going to save this. And for now I'm passing. And since we know what we've done, we can basically
13:48 - come back here now and remove this pass. And what I want to do when a user comes into this chatbot
13:53 - is to render this chatbot dot HTML page. So instead of showing this, you know, default Django
13:59 - template, I just want to show my own HTML page. To do this, I'm going to say return render. And
14:08 - I'm going to say request, trying to request a chatbot dot HTML. Now because Django already knows
14:17 - where to get our template files whenever we're requesting for one, because we specify that in
14:21 - the settings, remember, now it knows that it's going to come into templates folder and it's going
14:26 - to look for chatbot dot HTML, which is this, and it's going to render that. Now, if I come in here
14:32 - and it refreshes, you should expect that to work, right? But no, it shows this. Now this is just
14:37 - because we did all of these for our Django app. But remember, this app is just a subset of the
14:43 - main project. So this is the main project folder, what we need to do is to come into the URLs of
14:47 - the project folder. And then we also need to tell these URLs that these Django this project URLs
14:53 - where to go whenever a user comes into the homepage, we told the app, but we didn't tell
14:58 - the URL. So for us to do this, we need to do something called include. So we are importing
15:05 - include. And what this does is that it's basically allows us to include a URL kind of copy a URL from
15:11 - an app. So this is what we're doing when I say path. And I'm going to do the same thing. I'm
15:18 - just going to say include chat bot dot URLs. So what this is doing is that whenever a user
15:25 - tried to go to the homepage is going to go into chat bot, which is this app is going to go into
15:30 - the URLs file, which is this URLs is going to look for a particular URL that match this. And this is
15:36 - this URL. And whatever has been done here is what is going to do right here. So that's basically what
15:42 - that does. Now we can save this, we can actually close this. Now when we come here and refresh,
15:48 - it works. So as you can see, it gives us this basic thing. I am your chat bot, you can ask
15:52 - me anything. Good. If I do I, nothing happens for now. But we're going to take care of that
15:59 - in a bit. So now that we know we have all of that done, the next thing that we want to do is like,
16:05 - when we create when we say something like, I, how are you doing? We type something in there,
16:10 - and we eat enter or eat send, we want that message to show year. And we obviously want to have a
16:16 - response also. So I'm going to tell you how to do that now. And to do this, we're going to use a
16:21 - little bit of JavaScript. So I'm going to walk you through all these steps. Don't worry. Now we're
16:26 - going to come into our templates, let me just explain what this template file does. So the first
16:31 - thing it does is to extend from this base dot HTML. If you know Django, you know, there's something
16:35 - named extend, and I'm going to go through it quickly. So this is a base dot HTML file. This
16:40 - is sounds like the backbone or the bedrock of our template file. So this has all these constructors,
16:45 - every single thing that HTML files need. And what it just does is allows other files to extend from
16:51 - it. So what it does is that wherever we have this thing called block content, any further extend
16:57 - from it could basically add your own code in this block content, right, and it's going to have the
17:00 - same code as all of these, but with unique code in this block content. So if I come into chatbots,
17:07 - you see it's extending from base dot HTML. That means if I remove all of this, every single thing
17:13 - from the old file, right, so let me say I remove this block content, every single thing right here,
17:19 - it basically let me move this also, it basically has the same file as based on HTML, the same thing,
17:25 - no difference. But now, if I add, just gonna add everything back, if I add this block content,
17:32 - which is this, right, it's going to be the same file as it's based on HTML. But any code I put
17:37 - into this block content is going to be inserted into this block content right here. So that means,
17:44 - so as you can see, this block content is in the body tag. That means this chatbots, all of this
17:49 - code is going to be in the body tag of this base dot HTML. I hope that makes sense. So now this is
17:55 - a new file that extends from the base dot HTML kind of copies and paste it. But what this allows us
18:00 - to do instead of having to write all of this code again for every single file, and that's going to
18:04 - be time consuming, it just allows us to extend from it, and only make changes to where we need
18:09 - to make changes, which is just the body of the page. And that is what we did here. So now that
18:14 - we have that, as you can see, this is the body of the page is just a basic form right here.
18:19 - It has a CSRF token. And in Django, this stands for cross site requests for G, and it's kind of
18:25 - like an attack that it prevents an attack. So cross site requests for just an attack. But in
18:30 - this token kind of verifies that anyone are trying to access the data is authorized to access that
18:35 - data. So that's what that does. And you have to put it there whenever you're submitting a form
18:40 - in Django, even though it's going to throw you an error. So this is just the basic this UI that you
18:45 - see right here, that is what that does. Nothing spectacular about that. And this is just styling
18:51 - it. This is just a basic CSS page to style it. Once again, there's a link in the description
18:54 - below where you can access this template file and follow me along. So now that we have this,
18:59 - we could close this based on HTML, because we don't need it. And right now, if I type I,
19:04 - it just put some random stuff in the URL, and it doesn't really show anything. And as you can see,
19:10 - when I type I the page style refreshing and reloading, we don't want that we want something
19:14 - generic like when I say I it automatically comes up here and gives me a response. That is what we
19:19 - want. So we're going to do that right now. To do this, we need JavaScript. So at the end of this
19:25 - div tag of the body, we're going to create script. And let's just end the script
19:35 - right here. So now that is what we need to do. And then the first thing that we need to do in here,
19:41 - we're going to first actually have three different constants. So I'm going to paste the code and
19:49 - explain what this does. So just to save time, I'm going to paste the code rather than typing
19:54 - everything line by line. So now what this does is that it selects a particular query. So what it
20:00 - does is it comes into message list. Cool. So I'm going to come in here. And we're going to look
20:05 - for where we see message lists. So in your days, we're just going to say messages, copy that,
20:13 - let's search for it. So as you can see, there's a list right here named message lists. And what
20:20 - this does this JavaScript does, it just selects that particular query or that particular tag.
20:25 - So now, all this old tag, this list tag, it has it stored in this constant the messages list,
20:33 - it does the same for message form. Now if we search message form, we don't need to search that
20:37 - because we have that right here, we can see form class message form, it basically has access to
20:42 - this old form and stores that access in this message form. So we can manipulate anything or
20:47 - do anything we want to do with that form, because we now have it stored as a variable as a constant.
20:52 - And the input does the same thing. So the input is basically this input bar right here. And as you
20:57 - can see input text, and does a class of message input, and it stores that also in a constant name
21:03 - message input. And now the next thing we want to do is to create a new event listener. So when a
21:10 - user clicks on submit or enter or send, we want to create an event list listener that does something.
21:16 - So when this submit button is clicked, we want to do some stuff. For us to do this, I'm just going
21:22 - to also copy and paste some code in here. I'm just going to paste this in here. So as you can see,
21:28 - we're creating a message form dot add event listener. So now that we have access to that
21:34 - message form, we are adding an event listener. So that means whenever something is done to this
21:41 - form, this message form, once again, this message form is this tag, and basically this form. So what
21:48 - we're saying is from this form, when the submit button is clicked, that means this button right
21:53 - here is clicked, then we want to do some stuff. First of all, we say events that prevent default,
21:59 - which means once the submit button is clicked, we don't want the page to refresh. That is what
22:03 - that does. And then what we're going to do is to then store the message that was inputted. So what
22:10 - we're saying is constant, we're creating a new message constant. And then we're sending message
22:17 - input, the value dot trim. So what the user puts in here, we just want to get it, but trim it down,
22:23 - right to only the words that you get. So let's say as a lot of spaces and all of that want to
22:28 - remove all of that, and just trim it down to the sentence. And what we're saying is even message
22:32 - length is zero, then we want to return nothing. So that means if a user doesn't type anything
22:36 - in here and just clicks on enter or send, we don't want to return anything because they didn't send
22:40 - an actual message. Now that is what that does. Right. And then the next thing we want to do is to
22:47 - kind of create a list. So when a user sends a message right here, so I'm just gonna paste this
22:56 - code right here. Now once a user sends a message, since we already know that once these submit
23:03 - button is clicked, all of this is being done. So after we check that and make sure that it's not
23:08 - zero, that means the message is not blank, then we want to create an input, want to create a new
23:15 - basically a new variable, right. And they were creating a new element called list. And I'm going
23:20 - to tell you what we're trying to do here. What we're trying to do is that once a user clicks on
23:25 - send, we want to basically show the user the message right here, like this is the message
23:31 - you sent, right? Kind of like in any chatbot or any chat system is going to show your message
23:36 - and the person you're chatting with. That's what we want to do. So once the user clicks on a,
23:40 - and he clicks enter, we want to pop the message up here saying you sent a, right? That is what we're
23:46 - doing right here. And what we're doing is we're creating a new message item, and we're creating
23:50 - a list. So we're basically trying to duplicate or replicate what is being done in here, right?
23:56 - We want to make something look like this. So that's what we're doing in JavaScript. So we're saying,
24:02 - if we come down here, we're saying, create a new list element. And then in that list element,
24:09 - we're going to add a class, add a message named sent. So what we're doing is basically what they
24:16 - did here. So in that list, right, we're saying add a class message and sent, this is message and
24:24 - received, but we're going to kind of create a new class. So what he's doing is that whenever
24:28 - user clicks on it, it basically replicating this and just creating a new list, adding a class that
24:33 - says message and sent, that is basically what it is doing right here. So we get new message item,
24:39 - which is a list. And then in that list, we add a class message and sent done. And now the next
24:47 - thing we want to do is inside that list, just the way you can see that inside this list, there is
24:52 - now a few code in there that says AI chatbots. So this is sent by the AI chatbots and the message
24:58 - that the AI chatbots sent. That is what we're doing here. Also, we're saying this is sent by you.
25:03 - And then we're getting the message that you sent and just kind of pasting it there. So what we're
25:08 - not doing is send message list dot append child message item. So when since we have message lists,
25:15 - which is basically this message list right here, this URL, what we're going to say is under this
25:22 - URL, we want to append a child. And that child should be message item. And that message item is
25:28 - a new list to create it, which has all of the information of the message you sent. So it's
25:32 - basically going to append a new child kind of like pasting a new list in here. That is what that does.
25:38 - And what it then does after appending that is making the value of this blank. So whenever I say
25:46 - I, and I hit enter, I don't want the I to still be I want this to be gone once I hit enter. So that
25:52 - is what that does that that says message dot value, right? Now the next thing I want to do,
25:58 - I'm going to pay another bulk bunch of code in here. I'm going to explain what this does line
26:04 - byline. I'm just going to paste this in here. And now, since we have the message that user sent,
26:12 - we're going to send a request to our back end. So in this views, we're going to kind of send a
26:19 - request in here. So what we're doing is we're going to send the message that user input and sent,
26:26 - we're going to send it to this back end. And from these views, we are going to now create a function
26:31 - that sends that message to open AI API, and then gives us a response. And then we're going to show
26:37 - that response right here. So let me explain what this does also, there's something in JavaScript
26:41 - called fetch. So we can kind of use this fetch to send a request to like an API or to like, you know,
26:46 - your back end, in this case, or Django back end. And that's what we're doing. So we're saying fetch
26:52 - and the method is post. So the method of this particular fetch is post or this particular
26:57 - request. And we're just giving it the address, which is what you need to do for this to work.
27:02 - And then we're giving it the kind of like the parameters we need to give it for it to, you know,
27:08 - give us a response. So we're giving it a body CSRF middleware token, remember, when we said
27:13 - we added this, which is kind of like preventing an attack. So we need to also send that token. So
27:20 - everything goes well. That's what we're doing right here. Once again, the code to the template
27:26 - is going to be in the description and the code to the whole everything we're going to do in this
27:30 - video, the full project is also going to be in the description below. So you can check that out. If
27:34 - you're stuck anywhere, if you need to copy and paste the code, you can check everything out in
27:37 - the description below. And then there's also a message that we sent into this particular backend.
27:45 - And that message is basically the message that the user input, right, which is this right here,
27:51 - if we come here, we created a new message right here, which is message inputs dot trim. Good.
27:59 - Now that we're sending all of these, where are we sending it to, we're sending it to this own page,
28:03 - where is this own page, if we come into URLs, this is where we're sending it to. And then
28:08 - it's going to go into views dot chatbots, which is this function. So that means in here, we're
28:12 - going to receive whatever we are sending all these parameters, which is the message, then we're going
28:17 - to send that message to opens AI API. So let's do that. Now that all of this is done, what we're
28:23 - going to do is we're going to get a response. So I'm going to show you I'm going to explain all of
28:30 - these how this gets the response in a bit. But before I come back to this, we're going to have
28:35 - to first create a response in here. And I'm going to show you how it works. Or because we'll just
28:39 - talk about it now. So what this does is just once we get a response, which is like when we say,
28:44 - when we get the message, and then we say return response, right return response or something. So
28:50 - I'm just typing rubbish now, but you get the point of what I'm saying. So when we say return response,
28:55 - that response is going to be stored in this response variable. And then we can get that data,
29:01 - right? So that is going to return that response as a JSON response. And if we're going to say
29:04 - response equals response, the JSON, convert it to a JSON type that JavaScript can understand,
29:10 - and then is going to say, you're going to create a new variable name, response, and it's going to
29:15 - say data the response, which is basically data that we sent back from this from our right here.
29:22 - And then what it does is that it basically does the same thing that we did in here, which is
29:28 - creating a new message so that I can pop up up here. And that is actually the same thing it did.
29:34 - And he also appended it to message item. Now enough talking, let's get straight to the coding.
29:39 - Now that I explained what all this JavaScript does, let's actually come in here and you know,
29:43 - undo it from this part. So now the first thing I want to do is I want to first get if the required
29:51 - the method being used to request for this page. So I'm going to say request a method, if the method
29:57 - is post, then I want to do something, I'm going to do something. Now let me explain something quickly.
30:05 - If let's say when we come to this URL, directly, I will just go to 127 right here, the method being
30:11 - used to request for this URL, this page is a get method originally or initially. But whenever we're
30:17 - trying to send a message just like we did here, you can now see that this page is being accessed
30:23 - if I come into fetch is being accessed with a method of posts. So that's how I can distinguish
30:30 - from when a message is being sent to this page. And when this page is just being loaded normally.
30:35 - So if a message is being sent, and we do something like this, and we hit enter,
30:39 - there is a post method. So that's when Django knows that, okay, I'm have to receive a message
30:44 - and provide a response. But if the method being used is just a get method, then he knows,
30:49 - I don't really need to give a response or get anything, I just need to render this HTML page,
30:54 - right? So I hope you understand that. And that's what that does. And we're just going to come
30:59 - into views.py. And so I think if request or method is post, now we want to do some stuff,
31:04 - I'm just going to say message. So I want to get the message that was being sent in here,
31:09 - I'm going to say request dot posts dot get. And what we need to get in here is in the body that
31:18 - was sent into this, our URL, we need to get the variable that was used to send, which is message,
31:24 - and they were going to come in here and paste message. Now we have the message that the user
31:28 - typed in here. And what we're going to do is not provide a response. Now the response for now,
31:34 - let's just say I this is my response. So I'm going the response we're going to use actually
31:42 - is the response from open AI. But for now, let's just say this just to make sure everything is
31:46 - working before we actually implement open AI API. So now we specify this response. And what I'm
31:52 - going to do is to return this response as a JSON response, I'm going to say return JSON
31:57 - response. So what I'm doing is to return this response as JSON response. But for me to be able
32:05 - to use JSON response, I need to import JSON response from Django. So I'm going to say Django,
32:10 - from Django dot HTTP import, to make sure we're importing it right, import JSON response. So now
32:18 - that's going to allow me to import JSON response, allow me to use JSON response. So now that I have
32:23 - that one, just going to do three import, return this, I'm going to have my normal brackets. And
32:30 - in there, I'm going to have the colubraces. And I want to report return the message. You don't
32:37 - really need to return the message. But let's just return you also to make sure we have this message
32:41 - in the HTML. And then the main thing to return is the response. So I want to return the response
32:48 - as a variable named response. Good. So now this works. Now everything should actually work perfectly
32:56 - now. Let's test it out. If I come in here, and it refresh, and I say, a, you can see that it shows
33:04 - me a, and then it gives me a response saying, I, this is my response, everything is working. Now,
33:10 - we're able to actually send a message from our HTML and send it to our back end using JavaScript
33:18 - fetch. And then we're able to get do some processing in the back end, send a response back and get that
33:24 - response. We've basically done most of the heavy work. Now, the only thing we just need to do is
33:29 - to get into open AI, and then get the API key. And from that API key, we need to paste, we need to
33:38 - use that API key to basically access opens AI, you know, machine learning API that allows us to use
33:46 - a chatbot. I'm going to show you how to do this now. Now, the first thing we need to do
33:53 - is to first make sure we have open AI installed. So I'm going to come open this up.
33:59 - And what I'm going to do is to open up a new or actually India in my terminal, I'm just going to
34:08 - say I'm going to clear this out to make sure everything is clean. I'm going to say p three
34:14 - install open AI is going to say requirement already satisfied for me because I have it
34:21 - installed. But for you, it should do it and install that. Now what this does, the basic
34:26 - thing that it does is just allows us to use open AI in Python. Now before you even use any of this,
34:31 - you need to make sure you have an open AI account created. So you need to go to open AI.com and
34:35 - create an account. And once you have an account created, you need to create an API key. So you
34:40 - need to go to your account and down here on the user, you're going to see API keys. Now you need
34:46 - to make sure you have an API key, I'm just going to create a new API key to show you how this is done.
34:50 - So I'm going to create a new secret key. And I could just say Django chatbots. And you're going
35:00 - to create a new key, I'm going to copy that key, and it's done. Now this will allow us to use this
35:06 - open AI API to be able to create a chatbot. Now I'm going to come back in my code. And what I'm
35:13 - going to do is just create a new variable that says open AI API key going to paste that in there.
35:24 - So now just to make sure I have that stored, I've pasted that in there. And the next thing I'm going
35:29 - to do is just to come into open AI actual API. And I'm going to show you how this works. I'm going
35:35 - to go into documentation to show you everything about your API and you know what it does. So for
35:41 - these, we're going to be using the chat completion model. And what this does is just allows us to be
35:48 - able to send a message and then kind of receive a response. But they call it chat completion, which
35:52 - is the name for this system. So that's what it does. You can read through this and understand
35:58 - how everything works. But I'm going to just explain to you how everything works in, you know,
36:04 - in the code. So this is kind of like a basic system, you could open go into the playground
36:10 - and play around with the API, and see everything you can do with it. And you know, there are a lot
36:16 - of other things you could do not just try to generate image, you know, there's a Codex API,
36:20 - which is kind of like an API just set for helping you to code. And there are various APIs that open
36:27 - AI offer. But for this one, as I said, we're going to be using the text completion. So I'm going to
36:32 - quit this. And since we have our API key, I'm just going to come back into my code. So now that we
36:38 - know we have that, the next thing we need to do is to kind of create a function that sends
36:44 - a request to open AI API, and sends it our message, and then want to get a response from that API.
36:51 - So I'm going to do dev, I'm going to say, ask open AI. And in here, I'm going to pass it a message.
37:03 - So we need the message as a parameter. So we could send that to open AI. And now we want to get a
37:10 - response from open AI. And to be able to get this response, we just create a new variable.
37:15 - And we're going to say open AI, the completion, the create. So automatically, we can see that
37:24 - we have this error. This is because we know we have open AI installed, but we didn't import it.
37:30 - So we need to import open AI to be able to use it in our code. So we've imported open AI, and that
37:35 - is gone. And after specifying the open AI API key, what we need to do is to say open AI dot API key
37:43 - is equals to open AI API key. So these kind of registers that that this is our API key,
37:50 - this just stores the API key as a variable, but this sends that API key to open AI.
37:56 - So now that we've done that, we can come back to our function. And what we can just do
38:01 - is to say the completion dot create. And I want to say the model I want to use. So the model I want
38:06 - to use. So we could just do this equals how many is it texts? Davichi. Oh, three. So there are
38:20 - various models, as I said, you could go into the API documentation and, and their playground and
38:26 - check around with various models and everything you want to use. And the prompt. The prompt is
38:33 - basically the message that the user sent. And the max tokens, we're just going to set a max
38:38 - tokens for it. Let's say something like 150. And n equals one, going to set that as a parameter.
38:47 - So you need all of this when you're sending a request, you can also go to the API documentation,
38:53 - and you could know how to like change all of this to whatever value you want, depending on you know,
38:57 - your the cost of the API that you're planning to use. So we can say stop, let's just say that as
39:03 - none, so it doesn't stop for any reason. And then temperature equals no point seven. So these are the
39:15 - parameters you need to specify to be able to send this or to be able to get a response. And now we
39:20 - can we're going to say answer, which is a response equals to response, the choice, these are we get
39:30 - the actual text response, I want to get the first one, right? And when I say dot text, dot strip,
39:39 - this, so now if I don't do all of these, I'm going to show you what this does.
39:43 - So I'm just before doing all of this, I'm going to print response. I'm going to save this,
39:51 - I'm just going to drag up my terminal. And now whenever, actually, what we need to first do
39:58 - is to use this as the response. So I'm going to say response, call, ask open AI and send it this
40:07 - message. So instead of just sending us blank response, saying, I, this is my response,
40:11 - I want to send this particular message to open, ask, open AI, which is going to get a response.
40:18 - And we're going to have to return answer. But before we return this answer, I want to just show
40:24 - you what this response is on its own. So let's just run that, I'm going to come in here, eat,
40:31 - refresh, I'll say, how are you doing? And when I say that, you can see, because I printed response,
40:41 - you can see the kind of response it gives us, it gives us choices, you know, it gives us all of
40:46 - these, it gives us all of these users, the text, this is the main response that we're looking for.
40:50 - So you can see we asked how it's doing, how are you doing? It gave us no for now, because we didn't
40:56 - actually return anything in that, if I come down, yeah, I'm just gonna come down. So in here, we
41:02 - didn't return anything. So that's why it gave us no, but we're gonna fix that in a second. So now,
41:07 - as you can see, what it does is that for choices, it gives us text, which is the actual response,
41:14 - we don't really need all of this to show to the user, this just gives us information about the
41:18 - usage, like the amount of tokens we used, and the model and all of that. But what we want to show to
41:24 - the user is this text. So this text is what we want to show to the user. And if you come in here,
41:28 - that is what we did, we say response dot choice. So the response, I went into choice. And from the
41:34 - choice, what we did, this should actually be choices, because that is choices right there.
41:39 - And then we got the first value. And that first value is basically this list right here. Right.
41:48 - And they were saying from this, sorry, this dictionary, and I say from this dictionary,
41:52 - we want to get text. So we say text. And then we did the strip. So what the strip does is that
41:56 - it removes all of these, you know, formatting and just gives us in a normal text. So that is what
42:02 - that does, I hope you understood that. And then we're just gonna quit this back. And instead of
42:06 - printing response, we're going to remove this, we're going to have our answer, and we're going
42:10 - to return our answer. So now, everything should work perfectly. So if I kind of just going to
42:18 - refresh this page, I'm going to say, I how are you doing today? Now, let's wait, you can see nice is
42:28 - I'm doing well, thank you. How about you? I could answer that. But what I'm just going to do is to
42:32 - test it out and see if this actually works fine. So I'm going to say, Who is Bill Gates?
42:39 - Now, let's see what he says. So let's give you a second. He says Bill Gates is an American
42:44 - businessman Gates software developer, inventor and philanthropist, basically gives us all of the
42:49 - details of the gate. So let's say what is free code camp? Let's see if he knows everything.
42:58 - Give me a second. So he says free code camp is an open source online platform designed to teach
43:03 - coding skills to everyone. So this is basically a fully functional chat bot that you know,
43:09 - you can ask a question and it will give you a response. This is very good. This was the point
43:13 - of this video. This is what we want to do in this video. Now, I hope you understood
43:18 - everything we've done out to this point. Because for now, we've been able to
43:22 - actually send a message and then get a response. So we could say something like Who are you?
43:29 - And let's see, he says I am a human being just like you kind of funny, because it's an AI, but
43:34 - that gave us an answer, which is what we want. So we've been able to do that in this video.
43:41 - Now that we've been able to build this chat bot, let's take it to the next level.
43:44 - So what we want to do now is to allow users to log in and sign up. And so we want to save
43:50 - chat to like a database, so that when I log in, and I ask a couple of questions, I want to be able
43:56 - to log out and when I log in another time or another on another device, I want to still have
44:01 - access to my chat history. So we're going to do this. So for us to do this, what we need to do
44:05 - is to allow users to log in and sign up. And then we need to create a chat database. So whenever
44:10 - we make a user send a message, and we make a request to open AI API, we want to save the
44:17 - message and the response into our chat database. So let's do that. Now, the first thing we need
44:23 - to do is to actually create login and register page. So once again, all this template file is
44:29 - going to be available in the description below. And you're going to be able to use that easily
44:33 - once you get them from the link in the description. And what we're just going to do is to come into
44:39 - templates right here, I'm going to create login, just HTML. And then also we have the HD login code.
44:52 - And we're just going to put it in here. And then that's just a basic login page with the styling
44:57 - and everything. And then we're going to do the same for register. So we're going to create a register
45:02 - that HTML. And then in here also, what we need to do just to paste the register code,
45:08 - but you're going to have this already. So you don't need to paste anything. So now this is
45:12 - just the basic code for the register page. Now we need to make sure that this as a URL. So what
45:17 - I'm going to do is to go into URLs, the pie. I'm going to set login, going to set register.
45:26 - And I'm going to do one more, I'm going to set the logout.
45:30 - I'm just going to copy this paste, paste all of this year.
45:44 - We need to make sure we have comma in here. So we don't get an error. You just put comma in
45:49 - everything. Now we save that. So we need to create this login register and logout function. So we're
45:54 - going to have to come into views.py. And we could close all of this for now. And then actually,
45:59 - before we close out, let's create a new one. So we could close these two. And then we could create
46:05 - a login. It could take a request. And for now, we can just say return render request,
46:18 - login.html. I'm going to do the same for logout for register. I mean,
46:30 - we're just going to say register.html. And then for logout, we're just going to do def logout.
46:37 - You're going to take a request. And now we just need to do what the logout
46:42 - request. So this just allows us to log out a user. But for us to use this art,
46:50 - we actually need to import art up here in our views.py file. And for us to import art,
46:57 - so art is kind of like an authentication library that Django provides for us as default.
47:02 - So for us to import art, we're just going to do from Django dot contrib import art.
47:14 - Now that is going to work. But we don't need to worry about that for now. Let's just make sure
47:18 - that the login and register page are even loading up. So I'm going to go back in here. I'm going to
47:23 - go to slash login. So as you can see, we have this login page, let's go to slash register.
47:28 - You can see we have this register page. So we want that whenever you are putting these details
47:33 - and click on register, we want to register them and log them in automatically. So let's do that.
47:38 - Now the first thing we need to do is come into views right here in our register page,
47:42 - let's actually close that bar. And then right here in our register view, we just need to do
47:47 - a couple of things. So first of all, if I come back in here in my register page, you can see
47:53 - that we have a basic form. I'll show you right here, we have this form with a method of post,
47:58 - and it has username, email, password and confirm password. And once they click on register,
48:03 - it submits that form to this page right here. So when they click on register, I want to get
48:11 - that all the details of everything they clicked on and submit it in my database.
48:14 - So for me to do this, just the way I used if request dot form in request or method is post in
48:19 - here, I'm going to do exactly the same thing. So I know when a form is being submitted to this page.
48:24 - So I'm going to say if request, the method is equals to post.
48:34 - And what I'm just going to do is to say username, we're going to get the username,
48:37 - generate that we need the username equals to request the post username. So let's just make
48:49 - sure that is username. We're going to have to do the same thing for the email request
48:57 - the post, we can just do email. Same thing for the passwords also. So password one is equals
49:08 - to request the post password one. And then for password two, just copy that and change one into
49:19 - two. So let me show you what this is doing is getting from this form, this register form is
49:26 - getting the values that user input using the name. So the name of username is username, that's why
49:31 - we're getting a username, we're starting it in a variable name username, email is email, the first
49:36 - password is password one, the second password is password two. And as you can see, that's exactly
49:40 - what we're doing right here. So now that we have that the first thing we want to do is to error
49:44 - check. So we want to first make sure that user inputted passwords that are similar, that are
49:50 - identical, that are the same, not just similar. So we want to make sure that password one if password
49:55 - one is equals to password two. So we want to make sure that password one is equals to password two.
50:04 - So only if that is true, then we will continue. So let's just say pass for now we'll do some stuff
50:10 - else if the passwords are not same. So we just send an error for now we just send error message.
50:18 - Let's just say error has come message. I will say error message is equals to something like
50:24 - password don't match. So that is our error message. And then when this happens, what we want to do is
50:34 - to render this page again, but this time around with an error message. So say return render
50:42 - request, register the HTML. But this time around, we are sending an error message to say error
50:51 - message. And then say error message. So that that should work. And what we can just do is we could
51:02 - try to test this out. So if we come in here and eat refresh, and let's say I do just do some random
51:09 - things. And if I do this, and this, they don't. So as you can see, it tells us that password don't
51:17 - match. So because the password does not match, it just brings us back to this page telling us that
51:22 - it doesn't match. And that is working successfully. But now what if the password match we want to
51:27 - then continue with creating this user. So the next thing we want to do is to just create this user.
51:33 - So say try going to be like a try except in here, let's say try let's pass for now. And then we'll
51:39 - say accept. And there's also pass for now. So in try want to try to create a new user. So we're
51:47 - going to say user equals now before we do anything, we want to make sure that we have the user model
51:52 - imported. So I'm just going to say from Django dot country dot earth dot models import user.
52:11 - So this basically allows me to access Django user model, which is like the model or the table that
52:16 - Django creates for us to be able to store or create users on our platform. So what I'm just
52:21 - going to do is to say user, and I want to create a new user. So for me to create a new user,
52:26 - I'm going to say user dot objects. So from the user module dot objects, dot create user.
52:34 - So this is what I used to create a new user. And I'm going to create a new user using the user name,
52:39 - the email and the password. So let's just pick one password anyone is fine, as long as they are
52:47 - the same. So once that is done, I'm just going to save that user by saying, user dot save.
52:53 - So user to save saves that user in our database. And once the user has been created and saved,
53:00 - I want to log the user in automatically. So I'm just going to say the login request user. So I'm
53:10 - trying to log this user in right here. And then I'm going to say return redirect. So after logging
53:18 - the user in, I want to take them back to the chat bot. So I'm going to say chat bot. This redirects
53:27 - me to the chat bot. Now for us to use this redirect, we need to import redirect right here.
53:32 - So I'm going to say redirect. And that allows us to use redirect in here. So now if none of this
53:38 - works, like if it doesn't create a user successfully, the next thing I want to do is to pass an error,
53:43 - say something like error creating on the account. So I'm going to say error message
53:48 - because to let's say error creating account. And again, just like I did here, I want to
54:00 - return this page with an error message. Good. So now that should work successfully. And everything
54:08 - should be fine right now. What we just need to do is to test this out. So I've saved it by coming
54:13 - back in here now. And I try to say refresh, refresh with this. And I say, Tommy, and I say
54:21 - tt g.co. And let me give it a password that match. And I say register, he says error creating an
54:30 - account, right? So that means there's an error somewhere. So what we need to do is to come up
54:36 - here and see if they give us any error here. Okay, they didn't give us any error here, but I
54:40 - just noticed something. So we haven't applied migrations in Django, what you need to do is to
54:45 - apply migration, this is kind of like saving all these models that they gave us the user models
54:50 - and everything we want to save it into our database. If we don't save it into our database,
54:54 - there's no way we can create like data in our save data in our database. So if I need to have
55:00 - a database before we can save data in our database, for us to do that, we just come here, cut out of
55:06 - the server. And we're just going to say Python three manage the pie run server, no money, the
55:14 - pie migrate. So once that is done, and we run the server again, everything should be working
55:21 - successfully. So now if I try to submit that form, and it enter, you can now see that it logs me in,
55:27 - it says AI chat, but I am I am your AI chat, but you can't ask me anything. So what I want to do
55:33 - is right, yeah, I want to be like I then I want to have the username. So I want you to be customized
55:38 - for this specific user, we're going to come back in my code, where I have chat bot, and right in
55:44 - here, I can say I, and then I could just put the user that is logged in by saying user user name.
55:49 - So it's going to get the currently logged in user and tell me the username. Now if I eat refresh in
55:55 - here, you can see now it says I told me I am your AI chat bot, you can ask me anything. So this is
56:01 - basically what I wanted to do. Now the next thing, once we know that this is working, is to now allow
56:06 - your user to log in from the login page. So we're going to come back to views, just the way we did
56:11 - for register, once allow a user to log into. So this is quite similar, but also very shorter.
56:18 - So the same thing we did by getting if the request was the request method was post, we're
56:23 - going to do it again. So I'm going to say if request dot method is equals to post,
56:34 - we're going to say user name equals to request dot post. So we want to get that user name
56:41 - and say user name. And then we also want to get the password because the request dot post
56:48 - password. So as you can see, username and password done. So if I come into your login,
56:56 - you can see that in this form that we created, we have a username, name, and then we have a password
57:02 - name for the username and password input fields. So that's how we are getting the value that user
57:07 - input. And once we have that, what we need to do is to try to authenticate that user. So we can say
57:14 - user equals author on 30k. And what this is doing is kind of checking if this user actually exists
57:21 - before we even try to like log the user in. So I'm going to say request
57:27 - username equals to the username that we collected.
57:34 - And then password is equals to the password that we collected.
57:38 - So this just checks. And then what we cannot do is to kind of say in here, we can just say,
57:46 - if user is not known. So we are making sure that the user is not an invalid user. So if
57:55 - this user is in my database, I want to say the login. So I'm kind of logging the user in.
58:03 - I'm going to say request and I want to log this user in. And then after logging the user in,
58:10 - I want to redirect them to the homepage. So return redirect chatbot. Else.
58:20 - So the else means that if this user does not exist, so that's what this else is for. So we're going to
58:27 - say else. Here we want to say an error message, something like invalid user. So we're going to
58:35 - say error underscore message invalid, we can say invalid username or password.
58:46 - And then we could just return render. So I want to return a render the normal HTML template.
58:53 - So we could say request and then we want to render the login dot HTML.
59:03 - And then we're just going to say error message.
59:11 - And error message. So this is what we want. And everything should be working perfectly.
59:18 - So what we're going to do is all of this should be working. But we can say else that means if the
59:23 - request or method is not post, then we could add an else statement saying we just want to render
59:29 - this normally. So what this is doing is if the request or method is posed, then we go ahead and
59:34 - log the user in. But if it's not posed, then we just want to show the user deform. Now once we've
59:39 - done this, we could go ahead and test to see and make sure that this is working successfully.
59:45 - So we could save this. And actually, what I'm going to do is to first go to slash logout.
59:54 - So it says views dot logout didn't return an HTTP response return none instead.
59:58 - So what we can do is under logouts, after logging the user out, which can just redirect them
60:05 - to the login page, so they can log in. So now if you try to log out again,
60:11 - it takes me to the login page. Now let me log in with what I created and say login. Good. Now it
60:17 - says I told me I am your chatbot. You can ask me anything. Another thing I want to do is to have
60:22 - login and register here. But if the user is logged in, I want to say logout instead. And then I could
60:28 - say something like welcome to me the username. So let's do that real quick. So in here in the chat
60:33 - bot, what we could just do we could basically even have so I could come here in the chat bot. So
60:41 - right here where we see chat, it is right here. I could basically have another one and I could say
60:47 - something like login. So first of all, I could have an a tag that says goes to login. And I could say
60:58 - login. And I could just copy that leave some space. Do the same thing for register. So I only want to
61:14 - do this if the user is not authenticated. So what I'm going to do is to say going to use like a
61:19 - ginger template style. And this allows me to use like conditional statements in HTML. So I'm going
61:25 - to say if user dots is underscore authenticated. So if user is authenticated, then I'm going to
61:34 - show them to just log out or else I want to show them to login and register or register. So I'm
61:43 - going to say this and I'm going to say and if so now if the user is logged in, it shouldn't show us
61:50 - nothing. It doesn't show us anything under. But if we log out, right, and then let's say we go to
62:03 - the homepage, so it should show us login and register as you can see here it does. We just
62:08 - can't see it because the background is blue and the text is blue. So we could come here and change
62:12 - that so we could say something like style, color, color, and I can say yellow. Let's see. So as you
62:30 - can see, it works. Let's do exactly the same thing here, we could just say style, color, yellow.
62:39 - And let's see if that works too. Good. So now it says login or register. Now I could come to login,
62:46 - login, and you see I don't see login or register again. Now what I can just do instead of seeing
62:52 - login or register, I want to see welcome to me. And then after that, I want to see log out. So
62:57 - what I'm just going to do is right here, instead of this, I'm going to copy this particular code,
63:03 - I'm going to paste it in here. And then instead of saying log in or log out, log in or register,
63:10 - I'm going to say I'm going to have like a B tag that says welcome. And I want to see the user's
63:18 - user. I'm going to say user dot username. So whoever is logged in is going to tell the user
63:23 - welcome. And yeah, I want to tell these out to log out if they want to. So I'm going to say log
63:29 - out. So this should work now. So as you can see, it says welcome to me. And it gives me the option
63:35 - to log out. And I could log in back again, it tells me welcome to me. This is perfect. And this
63:40 - is basically what I want. So now that all of this is done, we could now go straight to being able
63:45 - to save this user's database, I mean, this user's message into our database. So let's do that. Right
63:52 - now, I'm just going to come into my model.py file. And India, I'm going to create a new model for
63:59 - us. So what I'm going to create is a model named chat. So I'm going to say class chat,
64:04 - and it's going to take from models dot model. So now what I'm going to now do is to have four
64:13 - different fields. One is going to be the user. The other one is going to be the message. The
64:19 - other one is going to be the response that the AI gives us. And the last one is going to be the date
64:25 - and time it was created at so know how to arrange the particular data or messages. So now we can
64:32 - save models the foreign key, we can use a foreign key to link to the user on the user database. So
64:38 - we're going to say user, but we didn't import user here. So we're just going to say from Django dot
64:43 - contrib dot Earth dot models, then we can import the user model. So now that we can do that, we can
64:53 - now use the user as a foreign key. And when you use foreign key, we say on delete, and then we
64:59 - say models dot cascade. Now for the model, we're just going to for the message, we're just going
65:06 - to say models dot text field, because it's just a normal text field, we're going to say the same
65:10 - for the response or models dot text field. So because it could be a lot of texts, and then for
65:16 - the created at what we need to do is to just say models, does daytime field. And then we want to
65:23 - say auto now equals true. So that should work. And instead of it just having not having a name,
65:37 - we want every single data to have a specific name. So we can use a method. And we're just going to
65:44 - have the underscore is a string. Let's give yourself and then let's return for the name. Let's see,
65:53 - let's say self dot user dot user name. So we want to get the user name of the user that you know,
66:02 - send the message. And then let's say we want to say the message that the user sent to self dot
66:07 - message. So this should work. And now whenever we make any change to these models, or PY file,
66:14 - we need to migrate that change into our database. So I'm going to scroll this up. We're going to do
66:19 - Ctrl C. The first thing we need to do is to do Python three manage the pie, make migrations.
66:29 - So that kind of saved the changes. But then what we need to do is to now migrate that changes. So
66:35 - money dot pi migrate. If I migrate, you can see that I told me I created a new model named chat,
66:41 - which is what I did. Now let me migrate that change into my database. Good. So now in my database,
66:47 - I have a new data name, a new data table named chat. So now I just want to run my server again.
66:54 - And that should be working. But I want to see that I have created these models named chat,
67:01 - I want to verify it. So there are two ways I could basically come here, and then just open my DB
67:08 - SQLite, because that is my table. And if I drag this, you can see it says chat bot chat. So under
67:14 - the chat bot app, a table named chat has been created by click on that, you see it as everything
67:19 - we did the ID message response created at and the user name of the user ID of the user that created
67:26 - is what we don't want to do this, this is kind of like old old fashioned. So what we're going to do
67:30 - is to use the Django admin that it's provided for us. So if I come here, we come to want to slash
67:39 - admin, you're going to see that there is like this admin page that Django creates for us. And what I
67:45 - want to do is to create an admin user. So right here, you can see that I'm first of all logged in
67:51 - as Tommy, but right here, it tells me that the user I'm logged in as is not an admin. So it's not
67:56 - authorized to access this admin page. So for us to create an admin page, we need to run a particular
68:01 - command again. So we're going to do Python free manage the pie, create super user. So we can say
68:11 - admin, we can leave this blank and say admin, admin, yep. And then we've created a new admin user.
68:18 - And now let's run server. So now we could try to log in without admin user that we created.
68:25 - Let's say admin login. Good. So now this is kind of how we can see like our database or all the
68:31 - users we have in our in our platform. So you can see we have to use as one named admin and one name
68:37 - Tommy that we created earlier. So the other thing I want to do is to verify that I actually have this
68:43 - chat saved in my database to, as you can see, it doesn't show you by shows in the SQLite file that
68:49 - we checked earlier. So for us to make it show you we need to kind of register it on the admin page.
68:54 - To do this, we're going to use the admin.py file. So first of all, we need to save from the models
69:00 - import chat. So first one import chat, and then we're going to say admin dot site, the register
69:08 - one register chat. So now if you come back in here and eat refresh, you can see that we have
69:14 - chat as a database saved year. So that table works. So now that we know we have a database
69:20 - table named chat, what we can do is that we're going to come back into these views. And we don't
69:26 - really need all of these for now. But whenever a user sends a message, right, so in your whenever
69:32 - user types in a message, we want to save that message and the response of the AI in this chat
69:39 - database, so that whenever a user wants to check his history, they can easily check their history.
69:44 - So if I refresh this page, this should change to admin. And you can see change to admin because
69:48 - now I am logged in as the admin user on this platform. So that is also good. Now, the thing
69:55 - we need to do is to make sure we are saving and registering all the messages into our chat
70:02 - model or into our chat database. So let's do that right now. Now the first thing we need to do is
70:08 - to just go back into in here. So I'm just going to come back in. Yeah, this is actually quite easy.
70:15 - First of all, I need to make sure I'm importing chat. So I'm going to say from those models,
70:21 - import chat. Now that I know chat has been imported. So from chat, but what I'm just going
70:28 - to do is to say, after getting the message and the response before returning the response,
70:35 - I'm going to kind of like save that message and response in our chat database. So I'm going to
70:43 - say chat equals chat. And what we're going to do is to say user. So I want to see the user in here,
70:49 - right? They're sending this message. I want it to be the currently logged in user. So the user
70:54 - that is currently logged in. So it's a user equals request dot user. So these are you get the user
71:03 - that's currently logged in by using request or user and message equals. So we're saying this
71:08 - message, which is this message right here, we are saying is equals to the message that user
71:13 - sends. We're just going to copy that. And we're going to do exactly the same thing to for the
71:17 - response. So we're going to say this response right here, it's going to come in here and paste
71:24 - that want to say is equals to this response from the AI. And then the last thing in here is the
71:31 - created at so want to know the date that the date and time this was sent. So for us to do this,
71:37 - we need to use something named timezone. So first of all, we need to kind of import timezone.
71:42 - So we get the current time of whoever is in it. So if someone is in America is the local timezone
71:49 - that's going to be saved is someone is somewhere in Asia is a local timezone that is going to be
71:53 - saved. So we want to do from Django dot details import timezone. So now that we have that we can
72:06 - come into created at. So right here, and what we can just do is to use that timezone that we
72:12 - imported, and then save that. So what we just need to do is to say timezone dot now. So what
72:18 - this does is I guess the current time and saves it as the created time. So now that that works,
72:24 - what we can just do is to say chat, just the way we save the user by saying user dot save,
72:28 - we can also say chat dot save. Now this should work successfully. Let's try this out. So we're
72:34 - going to save this. And then we're going to come in here, we're going to eat refresh. And let's
72:40 - also just refresh this page to see that there's no chat in here right now. But let's say I say
72:45 - something like, Hi, how are you doing? And I eat enter. It gives me my response. Now I want to
72:53 - come in here I need to refresh and see boom, you can see now now in this chat table, we have a new
73:00 - data says admin sent a message saying I how are you doing? Now we click on you, we should see
73:05 - details about that, we should see that the user was admin, the message user sent was I how are you
73:10 - doing? And the response from the AI was I'm doing well. Thank you. How about you? So now now that we
73:16 - know that we've been able to submit this data every single chat into the database from any user,
73:23 - now we could just show the user the history of their data that they've been chatting. So basically
73:28 - the history of their messages. Now what we want to do is that we want to show every user the history
73:35 - of their chat. If I refresh this page, that chart is gone. Even though we see have the data saved
73:40 - in our database, it doesn't show the user the history. So we want to do that right now. Now
73:46 - for us to do this also very easy and straightforward, what we just need to do is to come here. And
73:52 - before getting the post, what we're going to do is to try and get all the charts of that specific
73:56 - user. So we're going to have a new variable name chats, I'm going to take from the chat model,
74:01 - I'm going to say dot objects, dot future. We want to say, get all the chats from the user of the
74:12 - currently logged in user. So let me explain what that does. So what he does is that he returns. So
74:18 - we're just going to say user equals that. So what we just want to what this does is that he returns
74:24 - all the charts in our database right here, everything that we have here, but he filters it.
74:30 - So he only returns the one that as a user, so that as the value of the user as the currently
74:37 - logged in user. So right now we have admin logged in, what he's going to do is I was only going to
74:42 - return the charts of admin. That is what that does right there. And then we've saved it in this
74:47 - variable name chat. Now what we want to do is to pass it, whatever space to make it look clean.
74:52 - So want to pass it in here. Just a chat. And then we could give it chats. So now our HTML year in
75:05 - our chatbot has access to all the chat history of this logged in user. So now what we just need to
75:10 - do is to now look for a good way to showcase it to the user or showcase all the history to the
75:16 - user. Now what we're just going to do in this case, is that in this URL right here, so first of all,
75:24 - let's just comment this out, going to come back to that. So let's see if everything is blank. Cool.
75:30 - So now what we just want to do is that we want to loop through for all the charts that we send. So
75:36 - remember, in our views, we sent a variable name chat. And this contains all the charts of this
75:42 - currently logged in user. So I'm going to loop through all those charts, it's kind of a list
75:47 - that it sent to this HTML page. And I'm going to say for chat in chat. So once again, this is
75:53 - Ninja templating is like a format that allows me to use all these programming terms or this
75:59 - programming concepts in a normal HTML file. So initially, remember when we use an if statement
76:05 - in here, that now we're using a for loop in here. So when we have a for loop, we also need to end
76:10 - that for loop. So before we do anything, let's make sure we end that for loop. And we're safe
76:14 - for chat in chat. Even though we know that in here, we only got the user that is currently logged in,
76:21 - we also just want to give it an extra security check right here also, to make sure that is the
76:27 - user that is currently logged in, that we are showing just to make sure that there's no data
76:31 - leak or there's no problems in showing the right message to the right user. So what we're going to
76:37 - do is after saying the for loop, we're going to check that is so we're going to say, if the chat
76:44 - dot user, that means this chat that we sent, right, if the user is same as the request or user, the
76:53 - currently logged in user, then we actually want to show that message. So we're going to do this,
76:59 - we're going to end the if statement there also. And then what we're just doing is now is to show
77:05 - the message to the user. So we're going to kind of do the same thing that we did here. So in here,
77:13 - we could actually copy this. And then all the way to here, we just copy everything to be honest,
77:21 - then we paste that in there. But we could comment it out. So we could make it normal. And instead
77:29 - of received one days to be sent. So this is the one that we sent, I will say by you. But the
77:39 - difference is that the content of the message should be chat, which is chat from this chat
77:48 - list. So we're going to say chat dot message. So now if I come in here, let's hit refresh and see.
77:58 - So now it shows me what I asked the what I asked the AI before, which was I how are you doing,
78:04 - but it doesn't show me the response that the AI gave me. So I want to have that too. Now what I'm
78:09 - just going to do in here, I'm going to copy that again. So from here, I'm just going to copy that.
78:15 - And I'm also going to paste that in here, going to remove the comments by pressing command slash.
78:20 - And this should be fine right here. But what I want to do instead of chat dot message in here,
78:27 - I want to say chat the response. So I'm going to say chat dot response. I'm going to save it,
78:36 - come back here and eat refresh. Good. So now you can see it says I how are you doing? And now it
78:43 - says I'm doing well. Thank you. How about you? Now I want to say who is Bill Gates. And then it
78:51 - should give me a response of will be gate ease. It tells me will be a gate ease. And I want to eat
78:56 - refresh. As you can see, I eat refresh, and it still has the chat history, you know, that I gave
79:02 - it. So I also want to log out if I log out, and let's say I log in back as an admin. You can see
79:10 - that my chat history is still intact and everything is working. Now what I want to do is to try to be
79:16 - like another user. So I'm going to log in as Tommy. You can see now that I have a blank chat history.
79:22 - So since I don't have any chat history, what can just be nice to say, a, tell me, tell me about the
79:31 - United Kingdom. And let's see what it says. So it should give us some details about the UK. And
79:41 - let's see says United Kingdom is sovereign state located of not is basically it gives us details
79:48 - about the United Kingdom. It refresh a sea of those data. If I log out, unless I log in back as an
79:55 - admin, let's make sure we're putting in the right thing. And that is good to tell us that it shows
80:04 - us when a user doesn't input valid data. So let's log in. You can see it shows me my own data about
80:13 - what I asked, which was how are you doing? And with bugates? And if I log in as to me, it shows me
80:19 - what I asked it about our, our United Kingdom. So tell me about United Kingdom. Now what we want to
80:26 - do is to use GPT for in this our application. So as we know, GPT for came out a while after charge
80:33 - EPT was released. And it's much, much smarter and very much more smarter than the older GPT three.
80:41 - So I want to be able to use that GPT for in his application. So any of the user of our application
80:46 - can get smarter response or better responses. So for us to use GPT for we actually need to change
80:52 - the model that we're using. So I'm going to walk you through the open AI documentation. So right
80:59 - here, this is the open AI documentation. And this just tells us about chat completion. So what we've
81:05 - been using was text completion. And we can also use chat completion. So the major difference is
81:11 - that we have access to GPT for and even the chat completion models are more cheaper. So that those
81:19 - are the main difference. So that's why I recommended to use this chat completion. I'm going to show
81:23 - you what you just need to do in the code. So this can basically do anything, right? You could draft
81:29 - an email, write Python code, answer questions about set of document, do a lot of things. This
81:34 - is an actual chat model. So I'm going to show you how it works. So as you can see, this is an
81:39 - introduction. So this is how we call the API, we import open AI. And then instead of saying open
81:45 - AI dot completion dot create, which is what we've been doing, we say open AI dot chat completion dot
81:51 - create, we give you the model, this is GPT 3.5. And then we tell it, we have to give you like a
81:58 - row in which what is meant to do or how is meant to be. So if I go into the playground in a bit,
82:05 - and I'm going to show you what I mean by a row. So as you can see, it says row, the system is
82:10 - we're telling you that you're an airport assistant. So basically, I can ask you anything. And you
82:14 - should reply me that's what we're telling the AI. And then as the user, the user says we won the
82:19 - World Cup in 2020. We're the World Series in 2020. And then the assistant says the Los Angeles
82:25 - Doja won the World Series in 2020. And then the user says where was it played. And then the AI
82:31 - should continue that chat and give us a response of when it was played. So that is how that should
82:36 - work. If we see the response of this, you can see the 2020 series was played in Arlington, Texas,
82:43 - and it gives us all of that. So this is how this is going to work. And I'm going to show you in
82:47 - detail how we can implement this. But before I show you the actual code, I'm going to come into
82:52 - this playground. And this is what it is. So this is a user. And this is kind of like chat completion
82:58 - model. And right now I'm on the model GPT for I could switch to GPT three or GPT for anyone I want.
83:05 - So what I'm just going to do is to say, who are you? So I could ask you that. And I could say
83:11 - submit. I say submit, you see says I'm an AI model created by open AI. I could I could even
83:18 - delete this, first of all, and just start the conversation and be like, who are you? And I can
83:22 - say I am a human. And I can say, Oh, really? And then let's see what it says. I apologize for my
83:32 - previous response. I am not human. But so you understand what I'm saying is kind of completing
83:36 - from the chart already created. So you can do various things with this. Now let's actually
83:40 - implement this in our application. Now for us to do these, we're just gonna have to come in here.
83:45 - Now, everything we've been doing has been correct, or the models or the chatbots, the URLs, login,
83:51 - everything is good. But we just need to change now is where we're accessing, or where we are
83:56 - sending a request to the open AI API. So as I said, the only thing we need to change is chat.
84:03 - So where is this chat, where is this open AI dot completion, we need to write open AI dot chat
84:09 - completion. So if we come in here, again, in the documentation, you can see that it says open AI
84:15 - dot chat completion, that is one of the major changes. And the way in which we write this is
84:21 - going to be different. We really do not need all of these that we wrote before. I'm going to show
84:27 - you why. So what we need to do is just to say the model that we want to use. So first of all,
84:32 - let's say we just want to use gpt three, 3.5 turbo. And then instead of having all of these,
84:41 - what we're just going to do is to set messages. And it's going to be like a list. So you see the
84:51 - way rows, you know, the first give it the role. And we see the way we have a list of like, mess
84:57 - of chats right here, that is how we're going to do this. But for this, we just want to have like
85:01 - two initial chats, or one initial chat, actually. So let's just say row. So this role is kind of
85:07 - telling the AI what it is, I could tell you that you are a, let's say like a tax expect, and you
85:13 - were going to help me with tax, or you're like a lawyer, you're going to help me to write out some
85:18 - documents, you could do anything you wanted to do. So let's just say row system. Let's say the
85:24 - content of that role. Or we can say something like you are an airport assistant. Good. Now want to
85:41 - have another one. And this one is for the user. So we're going to say row user. And this is the
85:52 - message that the user sends to the AI. And let's just say content. And the content is the message
85:58 - that the user sent, which is what we pass into this function, we're going to copy that are going
86:04 - to paste that in here, let's just add our comma to make sure everything is good. Now that we have
86:08 - that, let's actually kind of see how this works, you know. So what we need to do is to say print
86:15 - response. Because this is not going to work because it's kind of gives us in a different response. So
86:23 - if I come back into the documentation, and if I come in here, you see that the response format is
86:29 - different. So in choices, the actual text that we want is choices dot message dot content. But for
86:37 - the initial when we're using choices, the first index and then we're using the text, that is not
86:43 - what we want. So let's just comment this out for now. And then let's return this should actually be
86:50 - response. So let's return response. And don't let us return anything yet. And let's say print
87:01 - response. So what I'm going to do is to now try this out. And I'm going to say, so let's see if
87:09 - this works. So in here, let me show you what I did first, I made sure I printed response. So
87:15 - whenever a user sends a message to these GPT 3.5 table, the response that we get, I want to print
87:21 - it in my terminal right here, that's what this does. So let's just make sure and see if that works
87:26 - before we actually show the user the response. So I'm just going to refresh this page, I'll say,
87:30 - I will hire you. And then it should give me a response right here. So it gave me no from this,
87:40 - because there's no it's not returning this, this function is not returning anything, but that's
87:46 - not what we're focusing on. If we scroll up, we should see the response. So this is the response,
87:52 - and it says choices. And we get the first one, I can see the message dot content. So now this is
88:00 - the content we want, we said, I were you and he said, I am an AI language model designed,
88:05 - designed to assist and engage a conversation with users. So that is good. Let's refresh this,
88:12 - you can see that he didn't save that in the database, which is quite good, because we're
88:16 - not actually returning any response. That's why the database didn't get anything saved in it.
88:21 - So now we know that this is in choices message. So choices as a list. And in that list, it has a
88:29 - dictionary of message and that message as a dictionary of content. So let's use that now to
88:35 - get the actual response. So what we're going to do is to just say, so now we don't need to print
88:41 - response no more. And then we could uncomment this. So we could say response dot choices,
88:48 - the first one, since it's in a list, we say first one, but instead of saying dot text, we say the
88:53 - message dot content, the strip. So now this is what we want. And this should be response that
89:01 - was a typographic error. And now we want to return answer. So now let's see if this works. Let's try
89:08 - this with each refresh now. And we can see who is the owner of free code camp, let's say the founder
89:21 - of free code camp. Let's see what he says. So he says the founder of free code camp is Quincy
89:28 - Larson. Good, everything works successfully. And we are using the chat completion model,
89:34 - not the normal text completion model, which is good. So everything works. If I hit refresh,
89:40 - you can see that it saves and in here in the database. So it doesn't allow me to log in,
89:45 - because I'm logged in as Tommy, let me change my login back to admin, let me log in as admin. So
89:51 - now it shows me the message Tommy said, who is the founder of free code camp, and I can see the
89:57 - response, which is good. So now if I come back in, I'm logged in as admin, it changes all the message
90:02 - to the messages for admin. Good. Let me try and say, when was YouTube founded? And let's see what
90:13 - it says. It says it was founded in 2005 by the people that founded it. Good. If I hit refresh,
90:19 - everything works. If I come in here, that was saved successfully. Good. Now, the next thing
90:26 - I want to do is to actually use GPT for in this. So as I said, GPT for is most matter, much,
90:31 - most matter, and it gives more, it gives better responses. So let's actually implement GPT for
90:37 - in this application that we're building. And let's see the change that we'll make. So the only thing
90:43 - you need to do to change that from GPT 3.5 to four is just to remove this GPT 3.5 and write GPT 4.
90:51 - Now it should be using GPT 4. Let me show you how I knew that I come into the documentation,
90:56 - where we have chart completion. So right here, you can see the model is using GPT 3.5. But it
91:02 - says it that you can use GPT 3.5 and you can use GPT 4. So that's why all I know is you need to
91:09 - change this to GPT 4. And if you come into the playground, you can also see the name of the model
91:13 - GPT 4, GPT 3.5 turbo, but now we want to use GPT 4. So now let's try this out and let's see
91:20 - whatever changes we it makes. So now we know that we're using GPT 4. And then what we're just going
91:26 - to do is to come in here and just say, so let's refresh and say something. Let's tell it to solve
91:34 - a mathematical equation, right? So let's say what is actually let's say to write a Python code,
91:43 - write a Python code to check if a number is a prime number. So let's see what it writes. So we're
91:57 - going to give you like a second to come up with the code. And for now, GPT 4 is quite slower
92:03 - compared to GPT 3.5 and the other models. But we're going to give it a little bit of time to
92:09 - write that out, because it's much smarter, and it's quite new, it's quite slow. That's what
92:16 - the open AI said, the people are opening I said, and also if you use chat GPT, if you use GPT 4
92:21 - on chat GPT, it's quite slow for now. So as you can see, it writes the code for us, you can use
92:27 - the following Python code to check if a number is prime number. So it tells us the code and the
92:33 - format, we could copy this and add all the indentation we meant to add, and it's probably
92:40 - going to work. But as you can see, that is much, much smarter. It gave us the wrote Python code
92:44 - for us, we could take this to the next level. And you know, format or the Python code, whenever
92:48 - a code is being written, we could format it to make it look good. But for now, we've basically
92:52 - done what we want to do. As you can see, it wrote a Python function that checks if a number is prime.
92:58 - And it basically, you know, explained everything it did, even if it took a while for GPT 4 to do
93:03 - that, but it did it accurately. So that is the main thing. And that is the main goal.
93:08 - So everything we wanted to do in this video is done. And I hope you enjoyed this video.
93:14 - So that's going to be all for this tutorial. Thank you for watching to the end of this tutorial.
93:18 - And if you enjoyed everything we did, please don't forget to smash the like button and subscribe.
93:21 - And if you want the full code to everything we did in this video, the link is in the description
93:26 - below. Check that out if you need the full code. And once again, thank you for watching,
93:30 - and I'll see you in the next one.