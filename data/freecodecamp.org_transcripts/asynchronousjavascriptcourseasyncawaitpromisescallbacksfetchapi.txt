00:00 - Master asynchronous programming in
00:01 - JavaScript from the code lab you learn
00:04 - JavaScript promises a sync await and the
00:07 - fetch API then you'll use your new
00:10 - knowledge to build three projects hey
00:12 - there guys welcome to the codb channel
00:14 - and welcome to part one of this two part
00:15 - tutorial where we're going to be
00:16 - learning everything you need to know
00:17 - about asynchronous
00:19 - programming before we get started guys
00:21 - if you like the content don't forget to
00:23 - like And subscribe and make sure you hit
00:24 - the notification Bell so you never miss
00:26 - an
00:27 - update so as mentioned in the intro guys
00:30 - this tutorial is a two-part tutorial in
00:31 - this first video we're going to be
00:32 - learning everything there is to know
00:34 - about a secret programming so we're
00:35 - going to take a look at what secret
00:37 - programming is a syence programming
00:38 - taking a look at callbacks and then a
00:40 - thing called callback Hill JavaScript
00:42 - promises and then an even better way to
00:44 - write promises with a syn8 and then
00:46 - we'll use everything we learn in part
00:47 - one by creating some really cool
00:48 - projects in part two using apis so
00:51 - before we get started on that just a few
00:52 - prerequisites you're going to need a
00:53 - basic understanding of HTML a basic
00:56 - understanding of CSS and also a basic
00:58 - understanding of JavaScript so without
01:00 - wasting any more time let's get into the
01:01 - video so before we actually dive into
01:04 - what asynchronous programming is we'll
01:06 - first take a look at what synchronous
01:07 - programming is now synchronous
01:09 - programming as you can probably tell
01:10 - from this slide here is that it just
01:12 - follows a strict set of sequences so
01:14 - when the code runs in synchronous
01:15 - programming it will follow each step in
01:17 - order so it will do task one and then
01:19 - it'll do task two and then it'll do task
01:21 - three it will never do task three first
01:23 - or task two first it will always follow
01:26 - in a synchronous manner so it'll be
01:27 - sequential so let's go into vs code now
01:29 - and just take a look at some synchronous
01:30 - programming to really drill in this
01:32 - concept so we're in side this code here
01:34 - and as you can see when we take a look
01:35 - at the code here we've got a list of
01:37 - things to do to make a chocolate
01:39 - brownies now I'm logging all these tasks
01:40 - to the console so when I uncomment them
01:42 - we'll take a look at the console here
01:44 - and we'll see how this is working
01:45 - synchronously so we'll go ahead and do
01:47 - that now un comment these and as you can
01:49 - see from the console it's doing it
01:51 - sequentially so it's log in the first
01:53 - one then log in the second third fourth
01:55 - fifth sixth and then finally seventh and
01:58 - this is what I mean by synchronous
01:59 - program in the code will execute the
02:01 - tasks in the order that you see them and
02:03 - then it will just wait for um each task
02:05 - to be completed before moving on to the
02:07 - next one now the problem with this kind
02:09 - of programming or synchronous
02:10 - programming is that it can be
02:12 - problematic in certain situations and
02:14 - that's particularly evident when you're
02:16 - dealing with tasks that take a
02:17 - significant amount of time to complete
02:20 - so let's say for example that a
02:21 - synchronous program performs a task that
02:23 - requires um waiting for a response from
02:25 - a remote server or an API the program
02:28 - will actually be stuck waiting for the
02:30 - response and actually and won't be able
02:32 - to do anything else until the response
02:33 - is returned and this sometimes be known
02:36 - as blocking and it can lead to a lot of
02:38 - applications appearing as unresponsive
02:40 - or frozen which is what we want to avoid
02:43 - and the way we can avoid that is with
02:44 - asynchronous programming asynchronous
02:47 - programming is going to be the process
02:49 - that allows the application to run a
02:51 - second set of instructions while also
02:53 - focusing on its primary or basic process
02:55 - and several of the benefits of a syn
02:57 - programming is things like improv the
02:59 - application performance um wide
03:01 - application to different code languages
03:03 - and it's just better for overall user
03:05 - experience and a few used cases of a syn
03:08 - programming um includes reduced
03:10 - inefficiencies from an application as
03:12 - well as efficient data collection which
03:14 - we will focus on in part two of this
03:16 - tutorial and to really um drill this
03:18 - concept home in a real word example you
03:20 - can sort of think of asynchronous
03:21 - programming is essentially application
03:23 - multitasking where we're doing multiple
03:25 - things at the same time so as I just
03:27 - mentioned asynchronous programming is
03:28 - going to allow us to run a program and
03:31 - for that program to continue working on
03:33 - other tasks while we're waiting for
03:34 - external events such as uh Network
03:37 - requests to occur so let's go ahead and
03:38 - look at a basic example of asynchron
03:41 - programming using the set timeout method
03:43 - so we're going to be using the same
03:44 - console logs as we did for the chocolate
03:46 - brownies we're going to be building this
03:47 - basic app but of course with a set
03:49 - timeout function before do that let's
03:51 - just number these so we know which order
03:54 - they're in
04:03 - [Applause]
04:09 - and I'll speed this up just to save some
04:11 - time you can see now I've put these all
04:13 - in set time out function but if you take
04:15 - a look at the console now you can see
04:17 - they're not firing off sequentially
04:18 - anymore see it's actually firing off
04:20 - number eight first um and then number
04:22 - one and then three and then 7 2 4 6 so
04:26 - it's not running sequentially and it's
04:27 - not running in the order that we want it
04:28 - to this this list now doesn't really
04:30 - make sense and the reason why this is
04:32 - happening is obos is because in this
04:33 - example the set time out function method
04:36 - execute a function after a specific time
04:39 - so all of these numbers that you see
04:40 - here is represented in milliseconds so
04:43 - 1,000 milliseconds is equal to 1 second
04:46 - so first one is 1 second second one's 2
04:48 - seconds second and a half 3 seconds 4
04:51 - seconds 3 seconds and a half 1.8 seconds
04:54 - and then half a second so the function
04:56 - passed to the set time out functions
04:58 - will be executed and asynchronously
05:00 - which means that the program will
05:01 - continue to execute the next line of
05:03 - code without waiting for the other set
05:05 - timeout to complete so this is just a
05:07 - basic example of what asynchronous
05:08 - programming is using the set timeout
05:10 - function now so that we want to file
05:12 - these off in the correct order what we
05:14 - can do is use these set timeouts put
05:16 - them inside functions and then use
05:18 - callbacks to fire them off which I'll
05:20 - explain it just a moment what callbacks
05:21 - are but first let's just put these uh
05:23 - set timeouts into functions so we just
05:26 - go and start the first
05:28 - one and we'll say
05:33 - function task
05:38 - one and then set task one inside of
05:46 - there and then we'll do the same for the
05:49 - second
05:56 - one and I'll just speed this up because
05:58 - obviously you guys get the gist of what
05:59 - we're trying to do
06:30 - so we got our functions here and the way
06:32 - that we're going to fire this off in the
06:33 - order that we want it to we're going to
06:34 - insert a callback inside each of the
06:36 - tasks as an argument so essentially what
06:38 - call back is is just a function that's
06:40 - passed in as an argument to another
06:42 - function that will then execute the
06:43 - Callback based on the result so
06:46 - essentially they're just basically
06:47 - functions that are executed only after a
06:49 - result is produced and callbacks have
06:51 - been quite an important part of a Ayn
06:53 - programming so we got our functions here
06:55 - and the way that we're going to fire
06:56 - this off in the order that we want it to
06:57 - we're going to insert a callback in each
06:59 - of the tasks as an argument so
07:01 - essentially what callback is is just a
07:03 - function that's passed in as an argument
07:05 - to another function that will then
07:06 - execute the Callback based on the result
07:08 - essentially they're just basically
07:09 - functions that are executed only after a
07:11 - result is produced and callbacks have
07:13 - been quite an important part of a
07:14 - synchronous programing so what we'll do
07:16 - is of the task one we'll give it an
07:18 - argument of
07:20 - callback and then we need this to S
07:23 - inside of here so we'll say call
07:25 - back and then we'll do the same for task
07:27 - two and again I'll speed the this
07:46 - up so now we've included our callback as
07:48 - a parameter and then every time a
07:50 - section is complete we then execute the
07:52 - Callback to the next function and this
07:55 - is just going to give us the ability to
07:56 - now fire off this list in the correct
07:58 - order so the way we'll do that we'll go
07:59 - at the bottom here we'll grabb task one
08:03 - and
08:04 - then because task one takes a
08:07 - parameter taking that call back but
08:09 - we're just going to use an aror function
08:11 - here so when task one is complete we
08:14 - then want to grab task
08:17 - two task
08:21 - two Tas two also takes in a callback
08:29 - sorry task
08:31 - two and then after task two is completed
08:35 - want task
08:38 - three which also takes in a
08:45 - callback and then task
08:49 - four again taking a call
08:52 - back task five
09:01 - task
09:07 - six
09:09 - task
09:12 - seven and then finally
09:16 - task
09:20 - eight so if you take a look at the
09:22 - console now you can see is starting to
09:23 - load in the correct order so it's going
09:25 - to load task one once that's done task
09:27 - two then task three task four task five
09:32 - task six task seven and task eight you
09:36 - can see it was taken the amount of time
09:37 - that we've actually included in this
09:38 - callback the set timeout function so you
09:40 - can see task five there took the longest
09:42 - because it was 4 seconds long or 4,000
09:44 - milliseconds now you may have noticed
09:46 - that after all this nesting that it's
09:47 - starting to form like a pyramid format
09:49 - and this is what we will call callback
09:51 - Hill is where you run into the trouble
09:52 - of nesting loads of callbacks inside of
09:54 - other callbacks and if these functions
09:56 - weren't written so methodically it can
09:58 - actually be quite un manageable and
10:00 - really difficult to read so that's
10:02 - what's called callback hell let's take a
10:03 - look at a more practical example of
10:05 - callback hell just so we can really
10:06 - drill it in so say in this example we
10:08 - just want to write a simple message
10:09 - display in the console but we want to do
10:11 - it asynchronously using callbacks so
10:13 - what we'll do is we'll just create a uh
10:18 - function here which we'll call let's
10:20 - just call it
10:22 - show
10:27 - message and this is is going
10:30 - to be a arrow
10:34 - function and then this Arrow function is
10:36 - going to take a callback so we'll just
10:38 - put in here callback just like we did in
10:40 - the previous example and then what we
10:42 - want to do is just
10:44 - console.log that call back so we've got
10:47 - a message here that we want to display
10:50 - and then what we want is a function to
10:51 - First display the first part of the
10:54 - message so we'll say
10:56 - const let's say uh
11:01 - first message this is also going to be a
11:06 - callback and we'll give it an argument
11:10 - of
11:11 - callback and we'll say set time
11:17 - out it's going to equal an error
11:21 - function which is also a
11:24 - callback so inside of the set timeout
11:26 - function we want to trigger this show
11:28 - message and which is going to display
11:30 - that first message so we'll say so show
11:32 - message we want that to
11:35 - display hello and then after that we
11:38 - want to fire off our
11:40 - callback and we want this to be let's
11:43 - say 2,000 milliseconds long it's 2
11:45 - seconds long and then for the second
11:47 - part of the message we want to create
11:48 - another function so we say cons
11:51 - second
11:57 - message this is also going to an aror
11:59 - function and then we want to grab the
12:02 - show message function again then we want
12:04 - to write our
12:06 - second word which is going to be
12:10 - world and then to fire this off let's
12:13 - call that function so we'll call first
12:14 - message and inside the first message we
12:16 - want to give it a call back which is
12:18 - going to be that second message and if
12:22 - we take we wait 2 seconds you see it
12:24 - prints out hello world now it's quite a
12:26 - simple explanation of just using two
12:27 - words but you can see already that
12:29 - writing it this way using callbacks can
12:31 - quickly become unreadable and really
12:33 - hard to work with if we start adding
12:35 - more functions inside of this you can
12:36 - see it's going to become unmanageable so
12:39 - let's say we want to add more words like
12:40 - a third message using the show message
12:42 - function here we're going to have to
12:44 - insert it in our second message and then
12:46 - if we want to add another one we'll have
12:47 - to insert that inside the next function
12:49 - and again that's just going to create a
12:51 - massive headache for you and then lead
12:52 - to cool back hill so to combat this we
12:55 - now use a thing called promises so what
12:57 - exactly is a promise a promise is
12:59 - essentially just an assurance or a
13:00 - guarantee that something's going to
13:02 - happen in the future so in real world
13:04 - terms a person can promise another
13:06 - person a specific outcome or result
13:08 - programming terms A promise is an object
13:10 - that holds the future value of an async
13:12 - operation so for example requesting some
13:14 - data from a server the promise promises
13:17 - us to get that data which we can then
13:18 - use in the future now before we get into
13:20 - all the technical stuff let's actually
13:21 - just break down and understand the
13:23 - terminology of a promise in a
13:24 - programming sense now a promise in
13:26 - JavaScript just like a promise in the
13:28 - real world has three states so it can
13:30 - either be pending it can either be
13:32 - fulfilled or it can be rejected so when
13:34 - a promise is pending it essentially
13:36 - means that the result is not ready are.
13:38 - it's actually waiting for something to
13:40 - finish so for example an async operation
13:42 - will be stuck on pending if it's not
13:43 - ready now depending if the promise is
13:45 - fulfilled or rejected then if a promise
13:47 - is fulfilled it means that the promise
13:49 - has been resolved and the result is
13:50 - available whereas if the promise is
13:52 - rejected it essentially means in a
13:54 - programming term that an error has
13:56 - occurred which you would need to address
13:57 - so now that we know what A promise is
13:59 - and we also know the promise terminology
14:01 - let's go back into vs code and look at
14:02 - we has the promises now before we create
14:04 - a promise I just want to highlight that
14:05 - most of the time you'll actually be
14:06 - consuming promises rather than creating
14:09 - them but again it's still really
14:10 - important to know how to create promises
14:12 - just so you can really drill the concept
14:14 - and how it works in your head so the
14:16 - syntax of a promise looks something like
14:18 - this so first let's just create a const
14:21 - and we'll just call this
14:22 - promise and this is just going to equal
14:25 - a promise Constructor so we need the new
14:27 - keyword and then we'll use the
14:29 - promise now inside of the promise
14:31 - Constructor this takes a single argument
14:34 - which is essentially a callback this
14:35 - take two further callbacks the the
14:37 - resolve and the reject so we'll put in
14:40 - here
14:43 - resolve and
14:45 - reject and this is going to be an aror
14:48 - function and then we'll just close this
14:49 - off and that's the simple syntax we use
14:52 - to create a promise and then inside the
14:54 - Cod braces we of course just have code
14:55 - that we want to execute now in terms of
14:57 - the promise this Arrow function inside
14:59 - here that we just created that has the
15:00 - resolve and the reject callback is
15:01 - immediately executed when this promise
15:03 - is created and then once the promise is
15:05 - created it's either resolved by calling
15:07 - the resolve call back or it's rejected
15:09 - by calling the reject call back let's
15:11 - look at a really simple example so we'll
15:13 - just create variable and we'll call it
15:15 - uh let's say con uh let's create a
15:19 - Boolean this can actually accept
15:20 - anything so it can accept Boolean
15:23 - numbers strings arrays or even objects
15:25 - but we'll just keep it simple and use a
15:26 - Boolean so we'll say uh let's call this
15:30 - all went well so this equals true so
15:35 - we'll have our if statement in there so
15:39 - if all went well is equal to true then
15:43 - we want to grab the resolve call back
15:46 - and then we'll just log in here all
15:49 - things went
15:52 - well
15:54 - else we then have the reject which we
15:58 - can say
16:01 - oops
16:03 - something went
16:07 - wrong now let's log this into the
16:09 - console and see what we
16:12 - get you promise take a look the console
16:15 - now you can see now the promis is in the
16:17 - fulfilled State and then let's just
16:18 - showcase what would happen if it fails
16:21 - this so let's just set all wet well to
16:25 - false you can see now the promise is in
16:27 - the rejected state which probably oops
16:29 - so you can see from that example the two
16:31 - different states that are presented when
16:33 - we're creating promises now remember
16:35 - with promises that there's also a
16:37 - another state which we saw in the slide
16:39 - which is the pending State it's
16:41 - essentially just when the promise is
16:42 - pending if the if the result isn't ready
16:45 - the state of the promise is going to be
16:46 - set to pending so let's take a look at
16:48 - another example to fully understand
16:49 - three states of promises so we'll just
16:51 - take this off and we'll go inside here
16:54 - and we're just going to create a
16:56 - variable which is going to be a random
16:58 - number
17:01 - generate a random number we're just
17:03 - going to need the math. flo
17:07 - method and then math object again grab
17:11 - the
17:13 - random and then we want this to be
17:15 - between 0 and 9 say times 10 that's how
17:20 - we can generate a random number between
17:22 - uh 0 and n and then we'll use the set
17:25 - timeout function
17:32 - which is going to accept that resolve
17:33 - and reject so we're going to say if
17:36 - random number is less than
17:40 - four we want to grab the
17:44 - resolve and we want it to display let's
17:47 - say
17:49 - Well
17:53 - done
17:55 - you
17:57 - guessed right
18:06 - else we'll grab the reject and we'll
18:11 - say
18:15 - oops you
18:19 - guessed
18:23 - wrong and lucky
18:28 - and then we'll make this so it's 2
18:30 - seconds
18:33 - long now if I log this to the
18:37 - console so I log in the
18:42 - promise you can see that initially is
18:44 - set to pending and then after 2 seconds
18:47 - it then hits the reject so it's saying
18:49 - oops you guess wrong unlucky and that's
18:51 - how you can see when a promise changes
18:53 - its different states when the promise is
18:55 - first created it will be in the pending
18:57 - State and then after two seconds from
18:59 - the set timeout function the promise is
19:01 - then either going to be resolved or
19:02 - rejected randomly and you can see in
19:04 - this case it's been rejected and then
19:06 - again that's just a simple way we can
19:08 - demonstrate how a promise works so
19:10 - initially when you set a promise it's
19:11 - set to pending or it's in a pending
19:13 - State and then depending on the outcome
19:15 - it will either resolve or reject so
19:17 - those are the three different states of
19:18 - a promise so now we've grasped at the
19:20 - three different states of a promise we
19:22 - can't actually do anything with this
19:23 - data at the moment despite it being
19:25 - fulfilled or rejected we actually need
19:28 - to consume consum the promise to then
19:29 - access that data so using this example
19:32 - let's understand how to actually consume
19:34 - an already created promise so if I just
19:36 - get rid of this console log here the way
19:37 - we actually consume A promise is well
19:40 - there's actually a couple methods but
19:42 - let's learn the older methods first and
19:44 - then we can learn the newer ones in just
19:46 - a moment so the older methods of
19:48 - consuming a promise was was using
19:50 - methods such as then and catch now the
19:52 - syntax of then and catch just makes it a
19:55 - little bit more easier to read and
19:56 - consumer promise than it was previously
19:58 - before when we're using um nested
20:00 - callbacks or so let's just dive into
20:02 - this example and you guys will be able
20:03 - to see so again we're using this example
20:05 - if I grab the promise and then I apply a
20:08 - then method to
20:09 - this the then method itself actually
20:12 - takes a call back when the promise is
20:15 - resolved takes one argument now the
20:17 - argument is actually this content here
20:20 - so whatever's inside the resolve this is
20:22 - what's going to be outputed so let's
20:24 - just call this let's call this value so
20:27 - it makes a bit of sense and then all we
20:29 - can do then all we need to do here is
20:31 - just console. logus
20:35 - value and if you take a look at the
20:38 - console now you can see we're getting
20:39 - the content inside of the resolve and
20:41 - we're getting the actual content we're
20:43 - not just getting a fulfilled promise and
20:44 - it's quite important to distinguish this
20:46 - now as well as a then we've also got a
20:48 - catch so in case of a reject so under
20:50 - this then we can grab the catch method
20:53 - this also takes a callback and again
20:55 - this is just going to be the value that
20:56 - the reject outputs so let's just say
20:59 - let's call this
21:02 - error and then let's do the same thing
21:04 - in console.log the error and you can see
21:06 - now instead of getting that red error
21:08 - like we did before we're actually
21:09 - getting the output from the reject so
21:11 - we're actually getting the value from
21:12 - the reject call back of the promise so
21:15 - you can see how this is actually a lot
21:16 - cleaner than using the conventional way
21:18 - of callbacks or nested callbacks so
21:21 - let's just quickly go over all of these
21:22 - steps so how we got to this value so we
21:24 - create the promise and when the promise
21:26 - is initially created it's going to be in
21:28 - a pending State meaning that it's just
21:30 - waiting for a result now promise accepts
21:32 - two parameters the resolve and the
21:33 - reject and then when we set a condition
21:35 - we either want it to resolve or we want
21:37 - it to reject so depending on whether the
21:39 - random number is less than or greater
21:41 - than four it's going to resolve or
21:43 - reject and those are the three states of
21:45 - a promise down to its Bare Bones but
21:47 - we're not actually able to access the
21:48 - data yet whether it's resolved or
21:50 - rejected because we need to as I
21:51 - mentioned in majority of cases is
21:53 - actually consume that promise and the
21:54 - way we consume that promise in this
21:56 - example is just using the do then do
21:58 - catch which themselves accept the call
22:00 - back and the the values inserted inside
22:02 - of that parameter is going to be the
22:04 - values that are inside the resolve or
22:05 - the reject and that's how we get into
22:07 - our value here and again you can see how
22:09 - much cleaner it is to actually write
22:10 - this promise and then consume it now
22:12 - another good thing about then and do
22:14 - catch in relation to promises is that we
22:16 - can actually chain promises onto other
22:18 - promises so let's just create a few more
22:21 - promises from this so what we'll do is
22:24 - we'll just have a resolve in here and
22:27 - this is just going to say
22:29 - well
22:30 - done
22:32 - promise
22:35 - one is resolved and then let's just
22:40 - duplicate this a couple more couple more
22:43 - times say promise two promise three and
22:49 - then we'll say Well done promise two is
22:52 - resolved and then promise
22:55 - three let's actually reject promise 3 so
22:58 - it
23:01 - fails
23:04 - rejected
23:07 - unlucky so then again what we can do
23:09 - from here is actually chain onto these
23:11 - so we can fire off these
23:14 - promises so we'll leave the dot catch
23:17 - for
23:19 - now and we'll say what we can actually
23:22 - do because this is chaining on we can
23:25 - make this look a little bit neater so we
23:27 - can say dot then inside of this
23:29 - value we Conant log that value and then
23:33 - we'll just
23:36 - return promise
23:39 - to then after that dot then we'll create
23:43 - another dot then or we'll chain another
23:44 - dot
23:46 - then and then we can also
23:48 - log that
23:51 - value be this paste that here and then
23:55 - we'll fire
23:56 - off third promise prom but the third
23:59 - promise we want this to actually fail so
24:02 - let's comment the catch put that in
24:05 - there and
24:07 - obviously change that up there so we can
24:10 - see how now that's actually firing off
24:12 - of three different promises we have our
24:14 - first promise which we have a then
24:17 - method attached to it and that value is
24:19 - going to be the value that we have in
24:20 - the resolve so we log that to the
24:22 - console and then we return promise two
24:24 - after that which fires off the second
24:26 - promise using the dot then then we
24:28 - access that value of that resolve and
24:31 - then we return promise three promise 3
24:33 - is rejected we then use the catch method
24:36 - to log that value so that value of this
24:38 - reject to the console and you can see
24:40 - how now that's fir enough synchronously
24:43 - while using asynchronous programming and
24:45 - again you can see how much neater it is
24:47 - writing the do then and Dot catch
24:50 - methods when working with promises or
24:51 - when consuming promises compared to how
24:53 - asynchronous programming before used to
24:55 - work when we're using um coolback
24:57 - functions and then eventually run into
24:59 - callback hill now a common mistake from
25:00 - beginners is that they might make the
25:02 - mistake of nesting promises inside of
25:04 - other promises which is essentially
25:05 - similar to callback hell so if we take a
25:08 - look at example console.log just the do
25:11 - then for now then inside of here what
25:13 - we'll do is actually grab our second
25:15 - proom we'll grab promise two and we'll
25:17 - apply a then method on
25:20 - here to then display that
25:24 - data and then we just console.
25:27 - log the data and then L the third
25:30 - promise inside of here so L promise
25:37 - three and we'll just put in here data as
25:42 - well and we'll just put in here
25:48 - data cons. log data and then on this we
25:53 - can just attach the catch
26:05 - log
26:09 - error then you might even have a do
26:11 - catch after this so you can
26:18 - put another console log which just log
26:21 - us to the now although this actually
26:23 - works perfectly fine as you can see in
26:24 - the console it's considered to be quite
26:26 - a poor style and just really makes our
26:29 - code pretty difficult to read and if we
26:31 - have a sequences of promises to resolve
26:33 - it's actually better just to chain the
26:34 - promises one after the other just like
26:36 - we had before instead of nesting them
26:38 - like here because then this is extremely
26:40 - this is actually quite difficult to read
26:42 - we've got several catch methods and it
26:44 - just essentially defeats the point of
26:47 - chaining our promises and we're
26:49 - essentially just going back to callback
26:50 - Hill so it's much better to just keep it
26:53 - simplified if we revert it back to how
26:55 - it was where we're just chaining the
26:58 - promise prises one after the other so
27:00 - that's a common mistake you should
27:01 - definitely avoid before we move on to
27:02 - some of the other ways we can consume
27:04 - promises I just want to touch on a
27:05 - particular method that can sometimes be
27:08 - useful now this method is particularly
27:10 - useful when you've got a bunch of
27:12 - promises um that you want to fire off or
27:14 - that you want to check and that if one
27:17 - of them gets rejected then it all fails
27:20 - so you're essentially just checking if
27:21 - the promises are fulfilled one of them
27:23 - from that bunch of promises fails then
27:25 - the whole thing fails so that method is
27:27 - actually the DOT all method so let's
27:29 - just take an look at an example of what
27:31 - that looks
27:32 - like so what we'll do is just create two
27:36 - promises so
27:39 - promise one set that equal to new
27:45 - promise and of course have
27:48 - our
27:53 - resolve and we reject
27:59 - and then inside of here we'll just have
28:02 - a set time out
28:12 - function which is just going to resolve
28:15 - so we'll say promise one
28:20 - solved and we'll just make this 2
28:23 - seconds long so that's one promise and
28:26 - then let's just do duplicate this change
28:29 - it to PR
28:35 - two let's just make this say one and a
28:38 - half seconds long so what we can do now
28:40 - is group these promises together to fire
28:43 - off these resolves at the same time or
28:46 - if they're fulfilled so the way we do
28:48 - that is we'll just grab the
28:53 - promise dot all
28:56 - method and then we'll insert our two
28:58 - promises in here so in an array format
29:01 - so we'll insert promise One Promise
29:07 - 2 and then to consume this we just have
29:09 - the do then
29:11 - method this is going to accept a value
29:14 - we'll just call it
29:16 - data and then what we want is just to
29:18 - conso by
29:20 - log that data so for the first array
29:24 - it's index so it's going to be
29:26 - zero and then for the second
29:30 - one it's going to be index.
29:33 - one and then let's just apply a catch
29:35 - method to
29:37 - this because we'll need it in just a
29:40 - moment so we'll put the
29:43 - error console do
29:48 - log
29:54 - error
29:56 - oh it's console
29:59 - do
30:02 - log so as you can see now after the set
30:05 - time out function is fired off you can
30:07 - see we get both of our promises in one
30:09 - line because we fired it off here in the
30:10 - console so that's how we can consume
30:13 - several Promises at the same time using
30:15 - the promise. All now this is especially
30:16 - handy the second situation where just in
30:19 - case you have say you've got five
30:21 - promises and you want to check that all
30:22 - of them are fulfilled before shooting
30:25 - them off to the console if one of them
30:27 - fails then the whole thing fails so what
30:30 - we'll do is we'll just set a reject
30:33 - here and we'll say promise
30:38 - to rejected and you can see now instead
30:41 - of firing off both of the promises it's
30:43 - only fin off the rejected one because
30:45 - now essentially the whole thing has
30:46 - failed and that's what we can do with
30:48 - the promise. all method so again this
30:50 - method is particularly useful when
30:52 - you've got more than one promise and you
30:53 - just want to know when all of the
30:54 - promises have resolved so for example if
30:57 - you're requesting dat from a different
30:58 - API and you actually want to do some of
31:00 - the data but only when all the requests
31:02 - are successful if one of them fail then
31:04 - you want the whole thing to fail so
31:06 - that's just a method that you might find
31:07 - useful in the future when working with
31:09 - promises so now we've seen how promises
31:11 - work under the hood let's take a look at
31:13 - the final and current stage of how we
31:15 - can work with promises or how we can
31:17 - work and consume promises and that's
31:19 - using the asyn away now asyn way is
31:22 - essentially just syntactic sugar built
31:24 - on top of promises to make it easier to
31:26 - work with asynchronous code so
31:27 - essentially an async function will
31:29 - return a promise and then you can use
31:30 - the await keyword inside that function
31:32 - to await for the promise to resolve and
31:35 - the idea being essentially that the code
31:37 - looks more synchronous and easier to
31:39 - read so let's use that example like we
31:41 - did before where we created chocolate
31:42 - brownies so we'll create four functions
31:44 - that are going to return promises and
31:46 - then we're going to use the async away
31:47 - to consume those promises so we'll
31:49 - create our first function here we'll say
31:52 - con say
31:55 - preheat oven and then we're going to use
31:58 - an aror
31:59 - function and then what we'll do is just
32:02 - return a
32:09 - promise then we'll have our
32:13 - resolve and
32:17 - reject and then inside of this we'll
32:19 - just have a set timeout function which
32:22 - is just going to have a variable inside
32:24 - of it which we're just going to set to
32:27 - pre heat oven is equal to true and then
32:30 - we'll just have a simple if statement so
32:33 - if preheat oven is
32:36 - true then just
32:38 - resolve then we'll just have some text
32:40 - in here
32:41 - saying
32:45 - preheat oven to let's say
32:49 - 180° and then we can also have an else
32:53 - so we'll
32:54 - say
32:56 - failed oh sorry we need to actually put
33:00 - it inside the
33:01 - reject just say
33:03 - failed task and then we'll just make
33:06 - this let's say we'll say 1 second
33:09 - long so we've got our first function
33:11 - that we're going to use or our first
33:13 - instruction we'll just duplicate
33:17 - this couple more times so that we can
33:21 - use some more functions so for the
33:25 - second one uh let's just these quickly
33:28 - the second one we'll call let's call
33:30 - this
33:31 - one this is going to be
33:34 - add
33:36 - sugar and
33:40 - choco
33:43 - chips open this up and just change a few
33:45 - things around so we'll just say add
33:48 - we'll say
33:51 - choco add choco if that's equal to true
33:55 - in here
33:59 - we'll say
34:02 - Place butter and
34:08 - chocolate
34:09 - chips stir until melted
34:15 - and melted and
34:19 - smooth so that's going to be for that
34:21 - function and then we'll have another
34:23 - function and we'll call this one this
34:25 - instruction is going to be add the
34:29 - flour
34:33 - cocoa and salt we'll say in here add
34:38 - salt
34:41 - flour add salt flour and then for the
34:45 - Resolve say
34:49 - add
34:51 - flour cocoa and salt and stir until
34:58 - smooth and then finally we'll have one
35:02 - more which is just going to be baking
35:05 - the mixture and then we'll say bake
35:09 - mixture in
35:10 - there if bake mixture is true we just
35:14 - want to say
35:17 - bake
35:19 - bake for 24
35:24 - minutes for really
35:29 - gooy Center so that's all the functions
35:31 - or essentially all the tasks that we're
35:33 - going to need again these are all going
35:34 - to be returning promises and now we all
35:36 - have our function promises to bake and
35:37 - brownies we can then use the asynchro we
35:39 - function to write these asynchronous
35:42 - promises in a synchronous manner so like
35:45 - before we might use the dot then we can
35:46 - actually just use the away keyword
35:48 - inside of an async function instead
35:50 - making it look synchronous so let's go
35:52 - ahead and create that function so this
35:54 - function let's call it const bait
36:02 - chocolate
36:04 - brownies and then to make this an async
36:06 - function we're going to need to use the
36:08 - async keyword before
36:12 - brackets and because we've now defined
36:14 - this as an async function we can then
36:15 - use the await keyword inside of this
36:18 - async function so let's do that first
36:19 - with our first task which is to preheat
36:21 - the oven so we'll just say
36:24 - cons
36:26 - task one equals the aw keyword and we
36:30 - want this to return preheat
36:34 - oven and then all we need to do is just
36:36 - console do log this so C we log task
36:43 - one and then we actually need to call
36:45 - this function so we'll say bake
36:47 - chocolate brownies and as you can see
36:49 - it's telling us to pre the oven to 180°
36:52 - you can see we're using the async
36:54 - keyword here to make this an async
36:55 - function then we're using the aw keyword
36:57 - which await a promise being the preheat
36:59 - oven task and then once it's completed
37:00 - that promise but either resolved or
37:02 - rejected then it logs it to the console
37:04 - once we call this async function and you
37:06 - can see it's logging it to the console
37:09 - and again the beauty with this now is
37:10 - that if we do it for the other one so
37:12 - const task two equals a
37:16 - wait so we're going to wait the add
37:19 - sugar and choco
37:22 - chips then log that to the console
37:28 - task
37:29 - two just create a space between these
37:32 - and then we'll do a const
37:35 - task
37:37 - three equals a
37:40 - weight
37:42 - add flour and
37:46 - salt we'll
37:48 - also log that
37:51 - console log that to the
37:55 - console and I'll just
37:59 - comment that out at the moment so it's
38:00 - not far
38:01 - enough so we say task three and then
38:04 - finally we can do one more for the last
38:06 - one so const task for equals a
38:11 - weight
38:13 - bake
38:16 - exture and we'll just console. log this
38:21 - task
38:23 - four and then once that's done
38:27 - console one one
38:30 - last message saying
38:40 - enjoy
38:42 - your perfect
38:47 - brownies chocolate brownies that's
38:50 - important so now we'll uncomment
38:55 - this and if we take a look at the
38:57 - consolle say pre the oven Place butter
38:59 - and chocolate chips add the flour and
39:01 - cocoa bake for 24 minutes for really
39:02 - good Center enjoy your perfect chocolate
39:05 - brownies so you can see now using the
39:07 - async away we're writing asynchronous
39:08 - code in a synchronous manner so first it
39:11 - waits for the first This Promise logs to
39:13 - the console once that resolves waits for
39:15 - the second promise to resolve then the
39:17 - third then the fourth and then finally
39:18 - this last console. log which I think you
39:21 - can agree makes using promises now look
39:23 - much neater much more readable and just
39:25 - easier to work with and as I mentioned
39:27 - it's important to note that these
39:28 - keywords are linked so if I tried using
39:31 - the a inside of the without without
39:33 - defining this function as an async you
39:35 - can see we're getting an error a we is
39:37 - only valid inside async functions so
39:40 - just make sure you make this an async
39:42 - function before you use the await
39:44 - keyword now in regards to handling
39:46 - errors what we can do is actually just
39:48 - use a TR catch block to store all of
39:50 - these promises inside the try and then
39:52 - if there's any errors catch the errors
39:54 - so we'll do try
39:59 - we just grab all of these then
40:01 - underneath the try we'll do a
40:06 - catch got this down and then we'll
40:10 - just and then inside the catch we'll log
40:13 - an
40:15 - error so we'll say
40:18 - console do log the error if there is any
40:22 - errors and what we'll do is actually
40:24 - just create an error so it fails one of
40:25 - these promises so we'll just do it with
40:27 - the first one so we'll make this
40:32 - false and you can see now it's failed
40:34 - the task and just to make it a bit more
40:36 - clearer failed task
40:39 - one so you can see now it's hitting the
40:41 - reject and then it's also just catching
40:43 - that error in the try catch so again you
40:46 - can see how easy it is to write async
40:48 - functions and use them with promises now
40:50 - that's going to be it for part one I
40:52 - hope you guys enjoyed the video and I'll
40:53 - see you guys soon for part two hey there
40:56 - guys welcome to as program in part two
40:58 - in this video we're going to be using
40:59 - everything with part one about the async
41:02 - we fetch API and applying those to three
41:04 - projects as always guys if you like the
41:06 - content make sure subcribe and turn on
41:07 - notifications so you never miss an
41:09 - update so let's just have a quick recap
41:10 - to refresh our memories regarding
41:12 - promises so the evolution of promises
41:14 - started with callbacks because as we
41:15 - learned JavaScript was signal threaded
41:17 - meaning it executes line by line in
41:19 - order we first use callbacks to help us
41:21 - write Ayr code to create an async
41:23 - function and to call an async function
41:25 - we first had to pass a call back as an
41:27 - argument like you see on the screen here
41:29 - but as you can see this quickly led to
41:31 - callback is becoming deeply nested and
41:32 - this led to what we called earlier as
41:34 - callback H so to solve this issue
41:36 - JavaScript introduced promises as part
41:37 - of es6 and this essentially just
41:40 - simplified working with callbacks and
41:41 - made for better syntax so what you would
41:43 - do is you create a promise and then one
41:45 - of the most powerful features of S6 was
41:47 - the ability to chain asynchronous
41:49 - operations together so this allowed us
41:50 - to perform sequential operations in a
41:52 - more readable and organized manner chain
41:54 - promises would use the then method which
41:56 - takes a a callback function as its
41:58 - parameter the Callback function receives
42:00 - the resolve value of the previous
42:02 - promise as its argument and then inside
42:04 - that callback function we return a new
42:06 - promise to continue the chain or if we
42:07 - wanted to have errors we would just use
42:09 - the catch method which as we saw earlier
42:11 - is cool when any promise of the chain is
42:13 - rejected now even this approach wasn't
42:15 - fallproof and chaining would have
42:16 - similar drawbacks to that of just
42:18 - regular callbacks meaning that even
42:20 - chaining could lead to callback Hill
42:21 - does to tackle this JavaScript with the
42:23 - release of so this approach was an
42:25 - excellent way to avoid the previously
42:26 - discussed callback H but async we
42:29 - actually takes this even further with
42:31 - async we you can see it's much easier to
42:33 - read to follow and maintain and
42:35 - essentially just came about as a way to
42:36 - improve the code readability for
42:38 - asynchronous operations and this is the
42:40 - modern way now of using promises now the
42:42 - fetch API is basically just a feature
42:44 - that allows you to make HTT requests to
42:46 - a web server so you can make like get
42:48 - requests post requests put requests or
42:50 - delete request and what's really cool
42:52 - about is that it's built into modern
42:53 - browsers so you don't need any
42:55 - additional libraries or packages to use
42:57 - fetch API and simply put the fetch API
42:59 - just makes it easy to get information
43:01 - from a website and do something with
43:03 - that data in your browser or whatever
43:05 - environment you're working in the fetch
43:06 - API itself is incredibly straightforward
43:08 - to use and offers an unmatched level of
43:10 - flexibility through the use of drama
43:12 - promises for making requests from the
43:14 - web browsers now the fetch API syntax is
43:16 - relatively straightforward all you need
43:18 - is the uro of the resource you want to
43:20 - fetch plus some additional code that
43:21 - tells the browser what to do with the
43:23 - response from the server so again the
43:25 - fetch function accepts two parameters
43:27 - you got the URL to send the request to
43:29 - and this is actually the required
43:31 - parameter you need to give it a URL and
43:33 - then the second option here things that
43:34 - you want to put in the request such as
43:36 - the request method I.E a post or a get
43:38 - but this is actually an optional
43:39 - parameter but we will be using it in
43:41 - this video because it's pretty powerful
43:43 - so as I mentioned under the hood the fet
43:45 - API function actually just Returns the
43:47 - promise so for this example actually
43:49 - we're just going to use the then and
43:52 - catch but later on we're going to be
43:54 - using asyn we because it's much more
43:56 - easier to use manage and it's much more
43:58 - readable now because the fetch is a
44:00 - promise you can add then and catch to
44:02 - handle the response and handle any
44:04 - errors so what we'll do is just
44:06 - uncomment
44:07 - this and we'll say do then then we'll
44:10 - say response and we actually just do
44:13 - this all in one line consult
44:18 - response or we can have the do
44:21 - catch which is going to handle any
44:24 - errors for us
44:29 - now a couple things that you can see
44:30 - here um by default the fetch API is a
44:33 - get request so you can see here it's
44:35 - actually trying to get some information
44:37 - from a remote server and you can see in
44:38 - the response that we've got the status
44:40 - for 404 again saying that it's not found
44:42 - that's because we haven't included a URL
44:44 - which again as I mentioned is actually
44:46 - required for the fetch API now the URL
44:48 - we're going to use for this example is
44:50 - just going to be some dummy API which
44:52 - just returns us some information that we
44:54 - can work with so I'm just going to paste
44:56 - that in here and this is basically just
44:58 - called dummy jon.com so if you guys want
45:01 - to use this for your API examples it's
45:03 - really easy to use and work with so you
45:04 - can see now in the response inside of
45:06 - the console we're getting a status 200
45:08 - because now we've actually given it a
45:09 - URL and you can see that the body
45:10 - property here contains that readable
45:12 - Stream So to use the readable stream in
45:15 - our JavaScript application here to we
45:17 - just need to convert this to the Json so
45:19 - instead of logging into the console get
45:21 - the response and turn it into ad Json
45:24 - and then obviously we need to add
45:25 - another then method to then log this to
45:28 - the console say data now let's log data
45:32 - to the
45:33 - console and as you can see now the Json
45:36 - method converts the readable stream into
45:37 - the JavaScript Json object so it's just
45:39 - a bunch of key value pairs so it's
45:41 - basically just some information about
45:43 - the um iPhone 9 so you've got the
45:45 - description you've also got the uh ID
45:48 - got some images you got the pricing
45:49 - you've got the rating and now that we
45:51 - have this data object we can use these
45:53 - values in any way we want so for example
45:55 - if we wanted to create a website with
45:57 - which displays loads of products with a
45:58 - bunch of information we can now do that
46:01 - using the fetch API and it really is
46:03 - that simple to use and that's how we
46:05 - send a get request using fetch API and
46:07 - now again as I mentioned we can Now
46:08 - display this data in the HTML now if you
46:11 - want to send a post request instead of a
46:13 - get request we need to define the second
46:15 - argument when calling the function which
46:17 - is the option object which is this
46:18 - object here so inside of this we need to
46:20 - Def find a method property and then
46:21 - specify which request we want so the
46:25 - method that we want is the post method
46:30 - now when you send the post method we
46:31 - also need to set the request header and
46:33 - the body properties to ensure smooth
46:35 - process with the request so for the
46:37 - header we need to add a content type and
46:38 - then set that to application SL Json so
46:41 - we'll say headers and
46:45 - content
46:48 - type and we want this to be an
46:53 - application Json and then we need to
46:55 - specify what data we want to send we're
46:57 - going to need to create a body property
46:59 - in Json format so after the headers we
47:03 - have the
47:04 - body and then use the
47:07 - Json stringify method to send the data
47:11 - through so if we actually want to post
47:12 - something with this dummy text when
47:14 - regards to the products we actually we
47:16 - actually need to change this to add
47:19 - change this to add after the forward
47:21 - slash you can see it's already actually
47:23 - adding one extra product so you can see
47:25 - it's got an ID of 101 and the reason it
47:27 - has that is because products itself if I
47:30 - just get rid of the ad you can see we've
47:31 - got a total of 100 products so the first
47:34 - product is obviously that iPhone 9 that
47:36 - we had because we specified the first
47:39 - product in our example which was the
47:41 - iPhone 1 so if we want to add to this
47:43 - you see the ID now you see it's already
47:45 - actually been added and it's given it
47:47 - the ID of 101 now we want to give it a
47:50 - few extra properties like a description
47:52 - a price an age and a rating so we'll say
47:55 - say description
47:58 - iPhone
48:00 - 19 and then as well as the description
48:03 - let's also add a
48:05 - price this is going to be say
48:08 - 1,000 and then let's also do a
48:13 - rating and let's say it's n out of 10 so
48:17 - you can see now we've successfully added
48:18 - a new item to our products here using
48:22 - the second parameter of the fetch API
48:24 - which is the option object so all we
48:26 - need to do in this is just specify which
48:28 - method we want to use we need to include
48:30 - the headers so the content type we want
48:32 - to create is an application. Json and
48:34 - then in the body is where we include all
48:37 - the data that we want to add so that's
48:39 - how we can create a post request let's
48:41 - now create a put request which which
48:42 - we're going to use to update an existing
48:44 - product so we'll just grab our first
48:47 - product again and then create a put
48:50 - request and as you can see uh let's
48:53 - change it let's change the title
48:55 - actually
48:59 - to the
49:01 - iPhone 19 and then in the description
49:05 - can
49:10 - say changed to iPhone
49:15 - 19 and if we open up the description you
49:17 - can see spell that
49:21 - wrong you can see now we've updated our
49:24 - product here using the put method and
49:26 - then last what we can also do is
49:28 - actually just delete this product
49:29 - entirely with a delete request and we
49:33 - get rid of all this stuff don't need let
49:35 - in this to delete and that's how we can
49:38 - delete a product so now let's go ahead
49:40 - and use the fetch API and work with it
49:43 - using a syn8 so just get rid of all this
49:46 - I'm just going to create a function
49:49 - say uh con
49:53 - get
49:55 - all products it's going to be an async
50:01 - function and then let's just first
50:03 - create a variable which which is going
50:04 - to be equal to our fetch API so say
50:06 - const
50:08 - response and this is going to
50:10 - equal use the aw
50:14 - keyword
50:16 - Fetch and we're just going to
50:20 - paste our URL in here which is just
50:24 - going to get all of our products
50:28 - and then we want to turn this into Json
50:31 - so we'll say cons Json is going to
50:36 - equal another promise which is going to
50:39 - be our response.
50:42 - Json so we get our response in a json.
50:45 - format and then we'll just console.log h
50:48 - on so you can see how easy and much more
50:52 - readable it is to work with a syn
50:55 - away when working with with promises so
50:57 - we'll actually put this in a
50:59 - try catch so we'll paste that in
51:02 - here we say
51:06 - catch
51:10 - error so if we need to catch any
51:14 - errors and then
51:18 - now let's call this so I get all
51:23 - products and as you can see now if we
51:25 - open this up getting an AR of 30 of the
51:27 - products 30 out of the 100 products see
51:30 - all the products we get in there using
51:31 - the async away and using the fetch API
51:34 - and again you can see how easy it is to
51:35 - read and how easy it is to work with
51:38 - using asyn we combined with the fetch
51:40 - API so now we've learned about the fetch
51:42 - API and all the different requests we're
51:44 - going to combine the fetch API with a
51:45 - syn away and we're going to be creating
51:47 - three projects using these two topics
51:49 - like I said the first project we're
51:50 - going to build here is this Chuck nor
51:51 - jokes API so if you see here we've got a
51:54 - title got a paragraph section here and
51:56 - then we've Al got this button as well as
51:57 - this pretty funky Chuck Norris image
52:00 - quite simply all this is going to do is
52:01 - just load Chuck Norris jokes so if I
52:03 - click on load another you can see now
52:06 - it's loading us of Chuck Norris jokes so
52:07 - when Chuck Norris makes cupcakes the
52:09 - frosting on them is blood just not his
52:12 - very good and then if we load another
52:13 - one one time Chuck Norris was crossing
52:15 - the street without looking both ways he
52:17 - ran over a car again another good joke
52:20 - that's what we're going to be building
52:21 - in the Chuck Norris API we've got Visual
52:23 - Studio code open here so fresh empty
52:25 - project we've got an index.html file a
52:28 - style. CSS file app.js file and then
52:31 - also got the image folder which has this
52:33 - image of CH Norris the first thing we
52:35 - want to do in the index.html is just
52:37 - build the structure of the project so
52:39 - we'll just say here truck
52:44 - Norris jokes inside the body we'll have
52:48 - a div with the ID of container which is
52:52 - just going to house everything and we're
52:54 - going to have H2
52:56 - which is going to say
52:59 - Chuck Norris
53:03 - API then inside of that we'll have
53:05 - another
53:06 - div which is going to contain our joke
53:08 - so we'll say joke container
53:12 - paragraph and this is also going to have
53:14 - an ID
53:16 - of loading joke and this is just going
53:19 - to say press load
53:24 - another for
53:27 - joke and under this our button so it's
53:29 - going to hold joke
53:33 - BTN it's say load
53:37 - another and then underneath that we'll
53:39 - have our image which is just going to
53:42 - point the image folder
53:47 - Chuck so Chuck
53:51 - moris photo then we'll also give this an
53:56 - ID of
54:00 - truck and then we'll just open this up
54:02 - with live server so page here obviously
54:04 - it's got no styling at the moment do
54:06 - that next so first we need to link di
54:08 - sheet style.
54:11 - CSS and then while we're
54:14 - here we also link script
54:19 - file so now we're ready to install our
54:22 - app here and then we'll work with Fetch
54:23 - and as init so we can retrieve Tru J
54:26 - so we'll head into the Styles sheet and
54:29 - then first we'll just Target everything
54:30 - so we'll say box Siz in Border box set
54:33 - the margin zero padding to zero and then
54:38 - let's also set the font family to
54:44 - monospace and then we grab the
54:49 - container and then we'll set the
54:51 - position of this to relative because
54:53 - we're going to be positioning the chuck
54:55 - noris image um absolute in a moment so
55:00 - I'll set the background color of this to
55:01 - be # 1 F1 F1 F1 sorry just one
55:06 - F and then we'll make the height of this
55:09 - to be 100 vort
55:12 - Heights we'll set the color everything
55:14 - to be lime
55:18 - green and then the font size let's make
55:22 - it
55:23 - 1.5 six R actually
55:26 - it's nice and big maybe a bit bigger
55:29 - actually
55:31 - 1.8 and then we'll text the line
55:34 - everything to the
55:37 - center overflow let's just set that to
55:40 - Hidden just in
55:41 - case and then we just add some padding
55:44 - on the top and
55:45 - bottom and zero on the left and
55:49 - right and then let's just make sure the
55:51 - width is 100% the container then we want
55:54 - to grab the par graph of what the joke
55:57 - actually loads in um we'll say
56:03 - container p and we'll say line height
56:07 - for that is going to be 1.2
56:11 - R sorry M and just add a bit of margin
56:16 - top to this so 20
56:18 - pixels and let's also add some margin
56:21 - bottom of 10
56:24 - pixels font size let's make it 1.3 Rim
56:28 - that's too small let's say
56:32 - 1.8 nice and we set the width of this to
56:35 - be 100% of the container let's just add
56:38 - a little bit of pattern on the left and
56:41 - right this do look good and then as for
56:44 - the container itself we want to make
56:46 - this a fixed height so we say J
56:50 - container the div which wraps around
56:52 - this the joke we'll say set the height
56:55 - of this to be 200 pixels and then we'll
56:59 - Target the load
57:02 - button uh so we'll say uh this is
57:10 - load load
57:13 - joke
57:15 - etn this is going to have a background
57:17 - color is actually going to be
57:19 - transparent uh let's say border one
57:24 - pixels solid line green uh let's Al set
57:28 - the color of this to be lime
57:34 - green uh set the cursor to the pointer
57:37 - let's set the font size to be
57:41 - 1.4 R see what that looks like maybe a
57:44 - bit bigger let's say
57:47 - 1.6 that's good uh add some
57:50 - padding about 10 pixels uh let's set the
57:54 - text to be
57:57 - uppercase and then let's set the
58:02 - margin to be 35 pixels top and bottom
58:08 - and then
58:13 - Auto and Auto on the left and right and
58:16 - we actually need to display this as
58:18 - block that centers everything puts the
58:21 - button in the right place let's focus on
58:23 - the Chuck Norris image so this has an it
58:26 - of trus
58:31 - image so this is going to have a width
58:33 - of
58:36 - 100% we'll set the position of this to
58:38 - be
58:40 - absolute say bottom zero right Z and
58:45 - then left zero so that's looking just
58:48 - like the example we've seen all we need
58:50 - to do now is just be able to load the
58:52 - jokes once we click on this button here
58:55 - so we'll do that with a fetch API and
58:56 - asyn
58:57 - away so we'll go in the
59:01 - appjs we just create a variable say load
59:05 - joke it's going to be it's going to
59:08 - equal an async
59:10 - function which is going to be an arrow
59:14 - function need to make a
59:18 - function and then we'll use the try
59:21 - catch so inside the try create a
59:24 - variable which is going to be
59:26 - let's call it
59:29 - Chuck
59:30 - Norris
59:32 - Fetch and this is just going to equal of
59:35 - course the fetch API and then
59:43 - paste API or the URL in here and then
59:46 - this obviously takes another parameter
59:48 - inside this parameter we're going to
59:49 - give it a
59:51 - header and this is going to be a head
59:53 - off for
59:57 - application SL Json so that's the um
60:01 - waiting for the fetch then we need to
60:03 - convert this to Json so we say const
60:05 - joke data it's going to equal thewa
60:10 - again and Chuck noris fetch Json which
60:13 - is going to turn it to Json format for
60:15 - us and then we need to get the actual
60:17 - value from this joke data to display in
60:21 - our app here so we're going to say
60:24 - document. get element
60:26 - by
60:27 - ID we're going to Target the load in
60:30 - joke
60:32 - ID then we're going to taret the inner
60:35 - HTML which is going to equal joke data
60:39 - do value which is going to be the
60:44 - joke and obviously we'll have the
60:48 - catch uh which is just going to cons log
60:52 - an error for us
60:58 - if there is an error and then lastly to
61:01 - get the joke we need to Target the
61:04 - button here and add an vent list now so
61:06 - when we click on this loads this
61:08 - function here which is an acing function
61:10 - which is just going to get a random joke
61:12 - for us or random Truck N joke for us say
61:16 - document do get element by ID we want to
61:21 - grab the load joke BTN
61:26 - and add an event listener on
61:28 - this it's going to be a click
61:31 - event and we're going to Target the
61:35 - load joke
61:37 - function this should load us a Chuck
61:40 - joke when we click on this so if I click
61:42 - on the load another joke so you can see
61:44 - it's giving us a joke straight away if I
61:46 - click on it again it gives us another
61:48 - joke and it'll keep giving us random
61:49 - jokes about Chuck noris so that's the
61:51 - first um project that we created really
61:53 - simple to create a really simple use of
61:56 - the fetch API just turning it to Json
61:58 - and then changing it in HTML whenever we
62:00 - click on the button using an event
62:02 - listener let's now move on to the second
62:04 - project which is going to be a weather
62:06 - app all right guys so this is going to
62:07 - be the second project that we're going
62:08 - to be building which is going to be this
62:10 - weather app so at the top here you see
62:11 - we've got a search bar so we type in um
62:14 - any City within the UK and when we press
62:16 - the search bar it's going to give us
62:17 - some information about the weather for
62:19 - that particular City so it's going to
62:20 - have the date it's going to have the
62:21 - city and then it's going to have an icon
62:23 - which displays what type of weather it
62:25 - is describe the weather also going to
62:26 - have the current temperature and it's
62:28 - going to have some extra information
62:29 - here so the highs and lows for that day
62:30 - and then if we typ in another city let's
62:32 - say Newcastle we hit enter it shows us
62:35 - the data for Newcastle so in Newcastle
62:37 - it's currently raining temperature there
62:39 - is 16° highs of 18 and lows of 15 so
62:42 - this is the weather application we're
62:44 - going to be building in this in this
62:45 - part of the video so we've got our blank
62:47 - canvas here again we start our async
62:49 - projects got a body and we've got our
62:50 - Bare Bones HTML we're go inside the body
62:52 - and we're just going to have a container
62:53 - class and this is going to be called app
62:55 - inside of app we're going to have the
62:57 - search bar so we just put come in here
62:59 - say search bar and this is going to be a
63:01 - div with the ID of search
63:05 - bar and then we're going to have an
63:06 - input which is going to be the type of
63:08 - text we going to have the ID set that to
63:11 - search bar input and then we'll just
63:14 - have a placeholder on this so by city
63:20 - underneath that we're going to have our
63:21 - button just going to be which is going
63:22 - to be that search icon so we'll give
63:24 - this an ID
63:26 - or
63:28 - search icon and this is going to be an
63:30 - icon we're actually going to get from
63:32 - font awesome so we'll paste that in here
63:35 - and then we'll also paste font awesome
63:37 - CDN so there you go we get our little
63:38 - magnifying glass now to represent the
63:40 - search bar so there's the input so we
63:42 - can type in a city and now we've got the
63:44 - button to submit the data that we type
63:45 - into here so underneath the search bar I
63:49 - have the date and the city so we'll give
63:53 - us a rapper class of in
63:56 - paragraph ID of date and underneath that
63:59 - we'll have a three which is going to
64:01 - have the ID of City then underneath that
64:04 - we're going to have the description so
64:06 - the description of the weather have an
64:08 - ID Des
64:11 - description underneath that we going to
64:13 - have Temp and then finally we're just
64:15 - going to have that animation at the
64:17 - bottom which is the high and the low
64:18 - which is this data here going to say
64:21 - let's say
64:23 - extra info so so this is going to have
64:26 - an ID extra info then we're going to
64:29 - have two div columns in here and then
64:32 - also another class which is going to
64:34 - contain a header and then going to
64:36 - contain a paragraph which is going to
64:37 - show that extra data we'll say high H5
64:41 - we say highs and then we'll have a
64:43 - paragraph the ID temp Max duplicate
64:47 - column
64:49 - lows we have 10 minut so just to go over
64:51 - that again we're going to wrap the whole
64:53 - thing inside of an rapid div which has
64:54 - the idea of app then we've got our
64:56 - search bar div which contains our input
64:58 - we've also got a button which has a sort
65:00 - of search icon which will get from front
65:02 - awesome so just copy and paste this link
65:04 - inside the GitHub which I'll leave in
65:05 - the description below so then you can
65:06 - use the icons from front awesome so
65:08 - that's our search bar then we've got the
65:10 - date in city which is just this data
65:12 - here so the current date of that day and
65:14 - then the name of the city that we search
65:15 - then we've also got some description so
65:17 - this is going to be the description that
65:19 - you see here so the rain and then the
65:22 - temp is obviously the temperature here
65:23 - and then we've got the extra information
65:25 - which is the two columns so the highs
65:27 - and then the lows so that's all the HTML
65:29 - we're going to need for this section
65:31 - let's just now link the script
65:44 - tag the app.js and then this also link
65:47 - the sty
65:53 - sheet so we can work on the CSS so let's
65:56 - go ahead now install this so we head
65:58 - inside the sty
65:59 - sheet and this is going to be quite a
66:03 - large Styles sheet so let's get started
66:06 - we'll grab everything and we'll say box
66:10 - size in to be border box set the
66:13 - margin and Pad in to
66:16 - zero and let's set the font family let's
66:20 - say it
66:21 - to
66:23 - monat and then if that fails set to s z
66:27 - so let's grab the app which is the
66:30 - container we're going to set the
66:32 - position of this to be
66:33 - relative set the width to 414
66:38 - pixels we'll set the height to be 420
66:43 - pixels so display
66:47 - block margin let's set that to
66:51 - Auto so it's in the middle and we'll say
66:54 - text the line put that to the
66:57 - center give it some
67:00 - padding on the top and
67:02 - bottom overflow set that to
67:08 - Hidden and then let's give this a border
67:12 - radius of about I say about 45
67:17 - pixels and then the background image for
67:19 - this is going to be a color a linear
67:22 - gradient so I'm just going to copy and
67:24 - paste it in here cuz I'm not going to
67:26 - write it all out because there's quite a
67:27 - few values so there's our app there so
67:30 - that's going to contain
67:31 - everything we'll Now work on the search
67:34 - bar so we'll grab the search
67:38 - bar we set the value to display
67:42 - flex and let's set the color to be white
67:48 - and then we'll start the input so we'll
67:49 - say
67:51 - search bar input
67:55 - this is going to have
67:58 - background color of
68:02 - none we'll set the border of this to be
68:05 - none so we'll basically just strip it of
68:08 - all
68:08 - its uh styling so we'll set the outline
68:11 - To None width let's make it about
68:16 - 90% let's actually add some padding for
68:19 - the search bar on the left and right so
68:21 - we'll say padding zero on the top and
68:23 - bottom but 40 pixels on the left and
68:26 - right and then let's add a bit of margin
68:29 - the bottom of this
68:31 - too so about 30 pixels and then let's
68:34 - also just set the background of this it
68:37 - also be transparent set the color of the
68:41 - text to be
68:43 - white and then let's just add a little
68:45 - Bard bottom of this a bit solid one
68:49 - pixels make it let say light blue
68:56 - so that's starting to take some shape
68:58 - now let's
69:00 - also change the um input text or the
69:04 - placeholder so we'll Target the
69:06 - placeholder
69:08 - attribute and we'll say color let's make
69:11 - that
69:12 - white and then opacity let make it
69:16 - slightly see through and then for the
69:21 - icon we'll say uh let's target the icon
69:28 - and then we'll remove the border for
69:30 - this we'll make the background of
69:32 - this transparent
69:35 - to we'll set the color to be white and
69:38 - then we'll make font size of the icon
69:41 - 1.5
69:43 - Rim so it's nice and bigger um let's now
69:50 - Target the extra info here so we'll say
69:59 - extra
70:02 - info position this at the bottom so
70:04 - we'll say position absolute say from the
70:07 - bottom about 5
70:10 - pixels set the width of it to be to be
70:14 - one
70:16 - 100% and we'll set the display of this
70:18 - to be
70:21 - Flex justify content space
70:27 - around set the color to
70:31 - be uh let's
70:34 - say make this white as well and then
70:39 - let's add some padding to the bottom of
70:42 - this 30
70:45 - pixels and then we'll
70:49 - Target The Heading and the
70:51 - paragraph so we'll say extra
70:57 - info
70:59 - H5 we'll set the font size of this to be
71:01 - a bit bigger so 1.1
71:05 - R and then we'll also make this
71:08 - uppercase so that's the extra info um
71:12 - and let's also add a bit of margin to
71:14 - the top of that um app
71:18 - here
71:20 - uh let's say about 20
71:23 - pixels just to get a bit lower
71:26 - down so now what we're going to do is
71:29 - actually go and fetch the data first
71:31 - because we can't see the data at the
71:32 - moment so I don't want to put the
71:33 - styling on until we can actually see the
71:35 - data or how we can input it inside of
71:38 - our app here so we'll go ahead and do
71:40 - that first now for this API we're going
71:42 - to be using the um open Weather API now
71:45 - this actually requires a um API key but
71:48 - all you need to do is just sign up to
71:49 - this and then you'll get your free API
71:51 - key to use to work on your projects and
71:54 - then all you need to do is just paste it
71:55 - where you need to put the API key to
71:57 - then retrieve the data which I'll show
71:58 - you guys in a moment anyway so we've got
72:01 - our API key there so I'll just copy
72:04 - this and I'm just going to paste it in
72:07 - there as a
72:08 - comment so we'll go back to our app here
72:11 - and the first thing we want to do is
72:12 - actually
72:13 - Target some of the stuff here that we
72:15 - want to display when we get that data so
72:17 - we want to Target things like the date
72:19 - the city the description the temp we
72:22 - want to Target the temp Max here so
72:24 - we're going to need to create variables
72:26 - for them so we'll say const We'll Target
72:28 - the date first this is going to equal
72:31 - document. get element by
72:35 - ID and this has the ID of
72:38 - date so we've got that then we're going
72:41 - to need one for the city so
72:44 - document. get element by
72:47 - ID this has the ID of
72:52 - city and then we'll do the same for for
72:56 - let's do the same
72:57 - for
73:00 - temp also do the same
73:02 - for
73:04 - temp
73:06 - image which we'll work on in just a
73:08 - second so this has the idea of temp and
73:14 - then and then I actually forgot to
73:17 - include the temp
73:20 - image div
73:23 - so let's just call this
73:26 - image
73:28 - or weather image doesn't really matter
73:32 - and this is going to have the ID
73:35 - of
73:38 - temp image so we'll Target that
73:49 - here then we want to Target a
73:51 - description
74:00 - description and then just a couple more
74:02 - so the max the temp Max and the temp Min
74:05 - so we say const temp Max equals document
74:10 - do get element by
74:12 - ID this has the ID of temp Max and then
74:17 - obviously we've got the last one which
74:18 - is min now to display this date which
74:22 - has got the uh month the actual date and
74:25 - then the year we're going to need to
74:27 - create an array which is going to have
74:28 - all the months of the year so we can set
74:30 - it to that depending on what the current
74:31 - dat is so first we'll just do
74:33 - con say months this is going to equal an
74:36 - array of all the
74:37 - months so we got
74:43 - January
74:50 - febuary March
74:56 - April and I'll just paste the rest in
74:58 - because it's too long to type so that's
75:00 - all the months of the year we then need
75:02 - to create a new date object so we can
75:04 - Target the month and the day as well as
75:06 - the year so we'll say let grab the date
75:11 - equals new date object so a new instance
75:15 - of
75:16 - that say date object
75:19 - actually so we've got the DAT
75:21 - object and let's grab the month from
75:24 - that so we'll say
75:26 - this is going to equal months Target the
75:28 - date object dot get
75:33 - UTC month and what this is basically
75:36 - doing is just targeting the date object
75:38 - then using the fun of the date object to
75:40 - get us the month which is inside the
75:41 - month's array so it's just going to
75:42 - essentially equal whichever month it is
75:44 - and then display that month so now we've
75:47 - got the month let's do the day day it
75:51 - calls the date object get UTC date plus
75:56 - one so that's the day and then we'll get
75:58 - the year so let year equals date
76:04 - object.
76:06 - get
76:07 - UTC full
76:11 - year and then all we need to do is just
76:14 - display this in our app here we say date
76:19 - do inner
76:22 - HTML is going to equal month the
76:25 - day and then the
76:28 - year and it's currently not displaying
76:30 - it so let's check out the console Target
76:33 - the actual dat object so as you can see
76:35 - now that's displayed so obviously we
76:37 - haven't got any styling on this but
76:38 - we'll do the styling in just a moment
76:40 - let's actually fetch the data now to
76:42 - work with this so let's first we
76:45 - actually first need to Target the whole
76:48 - app say const app equals
76:53 - document. getet and by ID probably
76:56 - should have put that at top but it
76:57 - doesn't matter it says the ID of
77:01 - app and then we'll say const get
77:07 - weather it's going to be an async
77:17 - function and we're going to have a try
77:21 - catch so we'll say const
77:27 - weather
77:28 - data
77:32 - fetch this is going to equal the
77:35 - await fetch API and we're just going to
77:38 - paste the URL for that in here so we'll
77:41 - past
77:43 - the um open Weather API URL in here so
77:47 - at the moment we're hardcoding the city
77:50 - that we put in but we're going to make
77:51 - this dynamic in just a moment but we
77:52 - just want to display some data so
77:54 - obviously we're going to need our app ID
77:57 - so we got it set up here in there also
78:00 - put the catch in
78:03 - here do log the error in case and then
78:08 - obviously we want to put some headers in
78:12 - here this is going to be exactly the
78:14 - same as the other
78:17 - one this is going to be an application
78:25 - Json and it's not liking
78:32 - something so we need to put the head up
78:35 - inside of
78:39 - here and then we need to add a
78:43 - header and this is going to
78:47 - be
78:49 - application
78:51 - SL Json so that's our fetch API we a you
78:54 - now need to turn this into Json format
78:57 - so we'll say const weather data equals
79:04 - await weather data fetch. Json so that
79:08 - turns that into Json format so now we
79:11 - can log this to the console see what it
79:14 - returns
79:16 - us weather
79:19 - data so let's call
79:21 - This And as you can see now it's
79:23 - returning us some data so it's returning
79:26 - Us London and then it's got loads of
79:28 - other properties that we can work with
79:29 - so it's returning us the temperature and
79:32 - then also returning us things like
79:35 - clouds the coordinates it's also got
79:38 - time zone the actual weather itself so
79:40 - we've got things like the cloud the icon
79:42 - that will display um the description
79:44 - that we're going to be using so all of
79:46 - these properties now we can work with
79:48 - and then display in the front end so now
79:49 - what we need to do from here is Target
79:51 - all of these variables that we created
79:54 - which targets all the IDS of all the
79:57 - HTML elements and then use the
79:59 - properties that we get from the fetch to
80:01 - change in HTML of these so we can
80:03 - display them on the app here just like
80:05 - we've done with the date so we'll First
80:08 - grab the name so it displays the city
80:11 - name so we'll say uh city. inner
80:17 - HTML it's going to equal let's use back
80:20 - Texs and this is going to Target the
80:24 - weather data and it's going to Target
80:27 - the
80:29 - name if I refresh this we should now get
80:32 - the name you see we got London let's now
80:35 - do the same for the image so the way
80:38 - we're going to do the image is we're
80:39 - going to grab the variable of 10 image
80:42 - then we're going to grab the inner
80:45 - HTML and then we're actually going to
80:47 - create an image
80:52 - tag which is going to have the source
80:55 - attribute which is just going to
80:58 - equal the open weather map URL which is
81:01 - for the image so I'm just going to paste
81:03 - that in
81:04 - here and that's going to grab our
81:06 - weather icon and then we'll do the same
81:08 - for the description so say inner
81:12 - HTML and we're going to Target the
81:15 - weather data again say dot
81:19 - weather and then we're going to Target
81:22 - the index number which is zero
81:25 - and then we're going to Target the main
81:26 - so you see we get clouds so just to see
81:28 - what that looks like we fetch the
81:29 - weather data we go inside the weather
81:32 - property we go inside the index number
81:35 - of zero it has the property of main
81:37 - which is the clouds which is our
81:38 - description and next we want to Target
81:40 - the image so we'll say temp image or not
81:43 - the image the icon that we're going to
81:44 - be displaying we'll say dot in HTML
81:50 - equals and then we're actually going to
81:52 - create an image tag in here
81:55 - and then set the source attribute to the
81:57 - open weather map URL and then put the
81:59 - custom data that we fetch from the API
82:01 - so we get the correct icon so this is
82:04 - going to be the image tag I'm going grab
82:06 - the source attribute and this is going
82:08 - to be equal to that URL so it's going to
82:11 - be HTTP open Weather Matt or image and
82:15 - then we're going to grab the custom data
82:17 - from the fetch API and then this going
82:20 - to be the weather
82:22 - data Dot
82:25 - weather property and we're going to grab
82:27 - the index number of
82:29 - zero and then we're going to grab the
82:31 - icon and we'll say at let's make it
82:34 - 2x.
82:36 - PNG then we'll close this
82:39 - off and you can see we're now getting
82:41 - that icon and the way this actually goes
82:44 - and gets that icon is that we're
82:46 - grabbing the weather data we're getting
82:48 - the Json response and then we're go
82:49 - inside the weather property going in the
82:51 - first index and then we're grabbing the
82:53 - main property which is is equal to
82:54 - clouds and we're grabbing the icon which
82:56 - is a specific string which will display
82:59 - the clouds icon or whatever icon we get
83:01 - from the response so that's how we
83:02 - include the image and then all we need
83:04 - to do is just include the actual weather
83:07 - as well as the um highs and
83:10 - lows so we'll do that here we'll grab
83:12 - the temp do inner
83:16 - HTML and then this is going to
83:19 - equal a
83:23 - H2 and we're going to round this to the
83:25 - nearest number we'll say math. round and
83:30 - then Chuck that property in here so
83:31 - weather data
83:34 - main. temp and that's going to be our
83:36 - temperature there and then let's just
83:38 - put degre Celsius in
83:41 - here close that off and then we'll do
83:43 - the one
83:45 - for temp Max start
83:47 - inner
83:49 - HTML and this is just going to equal
83:52 - pactic
83:57 - weather data do
83:59 - main.
84:02 - temp Max and then we'll do
84:10 - Min and then we'll just get the degrees
84:12 - Celsius in there for those two so now
84:15 - I've pretty much got all the data the
84:17 - only thing that's left to do is just
84:19 - make the data here Dynamic so when we
84:21 - type in a name it will display that name
84:23 - but before we do that let's just go
84:24 - ahead and finish the style it for this
84:26 - so we head back in the stylesheet let's
84:27 - first style the date and the city so
84:31 - this say the idea of
84:33 - info so let's just do that after the
84:35 - input
84:37 - there we'll say
84:43 - info so we target the info and
84:47 - let's let's make line height of this to
84:50 - be 0.5
84:55 - room make the
84:57 - color
85:01 - white and then let's target
85:04 - the H4 which is
85:09 - the city
85:14 - name say font size let's make this
85:17 - pretty big just say 40 pixels this is a
85:20 - H3 I think this is actually a H3 not H4
85:26 - and let's make the font weight let's
85:30 - make that
85:32 - bold let's text transform it to
85:37 - uppercase and then let's add some margin
85:40 - there so margin let's say 2
85:47 - m say5 m get maybe a little bit
85:52 - bigger there you go and then we've got
85:55 - the icon let's target the description so
85:58 - this is going to have the ID of
86:05 - description let's just make this
86:13 - text transform set this to
86:18 - uppercase let's also change the color of
86:20 - this to White probably because it's all
86:22 - white we could literally just Target the
86:23 - color
86:25 - in the um global global settings but
86:29 - doesn't really matter for now but you
86:30 - could do it that way because it's pretty
86:32 - much all why so the last thing to Target
86:35 - is the actual degrees
86:37 - itself so the temperature so we'll go
86:40 - underneath the description we'll grab
86:42 - the
86:43 - temperature
86:48 - temperature and this has just the idea
86:50 - of temp so we say color make this white
86:56 - font size let's make it about 40 pixels
86:59 - see what that looks like too big let's
87:02 - try 20 pixels be small let's try
87:05 - 30 looks
87:07 - good add bit of let's actually make the
87:15 - icon a bit smaller we just remove the um
87:24 - so we'll just remove the size property
87:28 - here so we'll just remove the size in
87:31 - the URL there for the source so that
87:33 - just makes it smaller cuz we don't
87:35 - really need it that
87:36 - big um cuz we're more interested in the
87:38 - temperature
87:40 - so let's add some margin top to that say
87:44 - 20
87:46 - pixels yeah it's looking much better
87:50 - um so that's pretty much it for the
87:52 - styling I think now all we need to do is
87:54 - just make this Dynamic so when we type
87:56 - in a city name it will display that name
87:59 - and display the name of the city the
88:01 - date and then also the temperature as
88:04 - well as some description and an icon so
88:06 - this is actually really easily done all
88:08 - we need to do is just Target the value
88:09 - attribute of whatever we type in here in
88:11 - the input so we get that then we
88:13 - dynamically add it to the fetch API in
88:16 - here so we change this to um whatever
88:18 - the variable is going to be and then it
88:20 - grabs the input value of what it inserts
88:23 - and uses that value for the Fetch and
88:25 - we'll get the data for the city that we
88:26 - want so we'll just go about this say
88:29 - const city name equals document do get
88:35 - element BYOD I'm going to get the search
88:40 - input search bar input sorry I think
88:43 - it's got the idea of search bar input
88:45 - yeah so just copy that to make sure so
88:49 - we want to grab the value attribute of
88:52 - this so whatever we enter in into our
88:54 - input here is what the value is going to
88:55 - be in this case we want it to be a city
88:57 - name and then to make this Dynamic and
88:59 - then where we've hardcoded
89:02 - London we need to
89:06 - add the city
89:10 - name in here but we actually need to put
89:13 - this in back
89:15 - tick so that works now it's currently
89:18 - going to return us under five and it's
89:19 - not going to be able to get us the data
89:21 - because it's calling this right now so
89:22 - it's fetching nothing cuz there there's
89:24 - no value that we've inserted inside of
89:26 - our input here so we actually need to
89:29 - get rid of it here because we don't need
89:30 - to call it we only need to call this
89:31 - when we hit the search bar so we go in
89:33 - our index.html and then where our button
89:36 - is we add an on click attribute so on
89:42 - click and that's going to be equal to
89:44 - our fetch API variable so get
89:49 - weather uh spell click wrong
89:54 - so now this button has that has the on
89:56 - click attribute which is going to call
89:58 - our get weather fetch API and it's going
89:59 - to retrieve us the data that we want so
90:01 - if we type in a city name in here so we
90:04 - just type in London this now that we
90:07 - input here is going to be equal to this
90:08 - value which is then going to be equal to
90:11 - the parameter that we need inside of our
90:12 - URL to retrieve us the data so now if we
90:15 - search this you see we're getting London
90:17 - again with all the data that we had
90:19 - before when it was hardcoded if we want
90:21 - to get another city let's get Ken give
90:23 - us K and then we'll do one more and then
90:27 - let's say glasgo it returns us the data
90:29 - for glasgo so a really cool Dynamic
90:31 - application using the fetch API and asyn
90:34 - we we're now going to move on to our
90:35 - final project which is going to use the
90:37 - Pokémon API as for our last project
90:39 - we're going to be building this Pokedex
90:40 - which if you're familiar with Pokémon
90:42 - you'll know what this is and what we're
90:44 - going to be able to do here is that if
90:45 - we type in a Pokemon name it will
90:47 - display that Pokémon image for us so
90:48 - we've got Charizard as our first example
90:51 - let's say if we want to display
90:52 - Bulbasaur we'll just type it here bulb
90:55 - saw and if we enter that we're getting
90:58 - an image of bulbur now in the Pokedex
91:00 - screen and whatever Pokemon we type in
91:02 - here if it's inside the Pokemon API
91:04 - which we're going to be using in this
91:05 - example it will fetch that image for us
91:08 - and display in the screen so that's what
91:09 - we're going to be building in our last
91:11 - project here so we've got a blank HTML
91:13 - file here and we've got our blank web
91:16 - browser the first thing you want to do
91:18 - is just link our two Styles
91:20 - sheets so we say style one
91:25 - and
91:27 - then style two and the reason we're
91:30 - doing this is because it's going to be
91:32 - quite a lot of CSS styling here so I
91:34 - want to separate the one half of the
91:35 - Pokedex style it in one Styles sheet and
91:37 - then style the second one in another
91:39 - Styles
91:40 - sheet and then lastly I'm just going to
91:42 - copy and
91:43 - paste the front awesome CDN in here so
91:46 - we can use the icon for the search bar
91:49 - so that's all we're going to need for
91:50 - that now inside of the body we're going
91:51 - to wrap all of this inside a container
91:55 - and then we're just going to have a
91:57 - comment here
91:58 - saying first
92:01 - half
92:03 - of
92:08 - poex and this is going to be this half
92:10 - here so we'll wrap this in a div with
92:13 - the ID of
92:16 - Poker
92:18 - x
92:22 - one and then insert the Pokedex one
92:24 - section we're going to have another
92:27 - section which is going to house the
92:28 - screen here and then all these little
92:29 - buttons at the top here and then we'll
92:32 - have a div which is going to house all
92:34 - of these buttons here so we'll build the
92:37 - first section
92:38 - here first so we'll just call this the
92:43 - top and then we'll have the section for
92:45 - this bit so we'll go
92:49 - top
92:50 - square square right and then the top
92:53 - square we have the circle we have this
92:57 - circle here so we'll give this a ID of
93:02 - button white and then inside of that you
93:06 - can see we've got another Circle so
93:08 - we'll give this an ID of
93:11 - button blue we've got that section there
93:14 - then underneath that top square another
93:17 - section which is this section here which
93:19 - is these three buttons so that's going
93:20 - to be really simple it's going to be top
93:22 - square square top
93:27 - square
93:33 - two and this is just going to have three
93:35 - divs one is going to be but turn red
93:38 - duplicate that two more times and then
93:41 - button green and then button
93:46 - yellow and then we'll have the screen
93:49 - underneath this so we give this an idea
93:52 - of screen
93:55 - and inside of the screen you can see
93:56 - we've got a red button so we'll give it
93:58 - an idea of
94:01 - button red
94:06 - screen and then we've got two bars that
94:09 - you can see here so we'll say
94:13 - of
94:15 - bar bar
94:19 - one and bar two and then you can see
94:22 - there's also like a mini screen in
94:23 - inside of this which is going to have
94:25 - the image so we'll say screen two inside
94:31 - of that we'll have image
94:34 - tag we'll leave
94:36 - the source attribute Mt at the moment
94:40 - we'll work on that in a bit we'll just
94:43 - give this an ID
94:45 - of
94:46 - Pokemon
94:49 - image don't need the alt so that's the
94:52 - top section of the first half let's now
94:54 - build a bottom section so underneath the
94:56 - div of top we'll go underneath that just
94:59 - put common here as
95:01 - well top
95:12 - half
95:14 - botom so this is just going to have the
95:16 - idea of
95:17 - bottom and then it's just going to be a
95:20 - bunch of divs which is going to
95:21 - represent all of these buttons here so
95:24 - first we'll have one for the blue turn
95:26 - blue be an
95:28 - ID say two because we already have an
95:31 - idea of button blue then we'll
95:35 - have one for
95:38 - yellow and then we'll have one for the
95:41 - d-pad it's going to be two actually
95:43 - because we're going to fix
95:46 - these in The Styling so we'll say
95:52 - dpad or
95:55 - zontal and
95:57 - then
96:00 - d-pad
96:03 - vertical and then finally we have one
96:06 - more oh sorry two more actually we need
96:08 - to select we need these buttons here so
96:11 - that's going to
96:14 - select and the
96:17 - start so that's the first half of the
96:20 - Pokedex we're now going to move on to
96:22 - creating the hinge and then the second
96:24 - half so
96:26 - underneath the top half here just fold
96:33 - that we'll have the
96:38 - hinge which is quite simply just going
96:40 - to be a div the IDE of
96:44 - hinge and
96:46 - then second
96:51 - half of
96:54 - poker
96:57 - deex this is going to have a similar
96:58 - sort of layout to first half of the poex
97:03 - so we just call this
97:05 - poker de
97:08 - 2 and in this you can see we're going to
97:10 - have like a sort of hidden div here so
97:12 - it lines up with the first Pokedex so if
97:15 - this was to fold in a rolloff example it
97:17 - would look
97:18 - consistent so we'll just have the ID of
97:22 - top square and then this going to have a
97:25 - div
97:28 - hidden and then we're going to have the
97:31 - search bar underneath
97:40 - this which is going to have the
97:42 - input type text and this is going to
97:45 - have the ID of search
97:50 - name and then placeholder we'll say
97:54 - and then we'll have a button underneath
97:57 - this which is going to have an icon
98:02 - class with a class of fa Das fa-
98:09 - search and we'll set the
98:13 - area and we're going to work on this
98:15 - button in just a moment we're also
98:17 - actually need to give this an
98:19 - ID of search PN
98:24 - so now there's going to be three other
98:25 - sections so we're going to have the
98:26 - sections for the blue squares this
98:28 - section here for these two buttons so
98:31 - after the search bar we're going to have
98:32 - these three sections here so we got one
98:33 - section two section three sections which
98:36 - again are just divs so we'll do this bit
98:38 - here which is going to be using the grid
98:40 - layout so we'll go underneath the search
98:41 - bar go we'll wrap these in a div called
98:47 - section two and then we'll create divs
98:50 - for each of these sections so there's
98:51 - going to be eight different boxes so
98:52 - eight divs we'll give the class of
98:56 - squares so we'll do this eight times so
98:58 - 1 2 3 4 5 6
99:02 - 78 so that's going to be for it for that
99:04 - section then we've got third section
99:07 - here which is just three divs so we'll
99:10 - give this we'll wrap this sorry in a div
99:13 - of
99:14 - section
99:16 - three and then we'll have a diff for
99:18 - these two buttons of the Pokedex we'll
99:20 - give this let's give this uh of
99:24 - two
99:28 - squares then we'll have two div with the
99:30 - ID of two and then we'll have one for
99:33 - the yellow button so we'll just give
99:34 - this an ID
99:36 - of
99:37 - bottom yellow BT and then lastly we have
99:41 - this section here which is just two divs
99:43 - so we'll say section
99:46 - four and we'll have two divs with a
99:48 - class of
99:50 - bottom
99:51 - two so that's all we're going to need
99:53 - for the HTML if we head into our browser
99:55 - here you can see how much styling we're
99:57 - going to need to do for this because all
99:58 - we've got right now is the search input
100:00 - and the search bar icon button so as you
100:02 - can see I've split the Styles so we've
100:04 - got style one which is just going to be
100:05 - for the top section of the Pokedex so
100:07 - the Pokédex one which is this section
100:10 - here and then style two is going to be
100:12 - styling this one so we'll go ahead and
100:14 - crack them with that now because it's
100:15 - quite an extensive
100:17 - stylesheet so first we're just going to
100:19 - grab the body
100:23 - and this is just going to Center our
100:25 - Pokedex so display
100:27 - flex line items to the
100:30 - center Justified content to the
100:34 - Center Height will be
100:37 - 100% width will
100:39 - be 100% And then let's give a background
100:43 - color of this
100:46 - to say
100:48 - FC
100:50 - e 386
100:53 - and then we'll just give a pad on top of
100:55 - this let's
100:57 - say 20
100:59 - VH so you can see now it's centering our
101:02 - Pokedex with that let's grab the first
101:04 - half of the Pokedex and style that so
101:07 - we'll say it's got the ID of
101:13 - Poker x
101:15 - one which is this ID here and this is
101:18 - going to have a width of 350 pixels
101:23 - height of 520
101:27 - pixels set this display of
101:31 - block margin set that to
101:35 - Auto and then the background of this is
101:37 - going to be that red color so F c22 43
101:41 - so there's the first half of the Pokédex
101:43 - and we'll set the Z index for this to
101:45 - also be three and then we'll Target the
101:47 - container of
101:50 - top which has a width of
101:54 - 75% we also set the display to be
101:59 - block and say
102:02 - margin
102:04 - Auto
102:06 - height say
102:09 - 50% so the position of this to be
102:12 - relative
102:15 - background of
102:19 - none border radius
102:26 - 0% and then we'll set the Z Index this
102:28 - to be one next let's target the top half
102:31 - of this
102:33 - Pokedex so it's this ID
102:40 - there so we're going to position we'll
102:43 - first display this as block um let's
102:46 - give it a width of
102:49 - 55% margin let's give it auto give it a
102:53 - dark the darker background color 50
102:59 - 625 so Z index of this to be
103:03 - one and then the height of this to be
103:06 - say
103:08 - 25% so there's our little block there
103:11 - and then let's position this to be
103:15 - absolute and then from the left say -
103:21 - 16.5% so that puts it in the little
103:23 - corner
103:25 - there now let's target the buttons
103:28 - inside of this so we got the button
103:29 - White and the button blue so we'll say
103:33 - button
103:35 - white we give us
103:38 - to say background color of
103:44 - white border
103:46 - radius of
103:51 - 50% uh let's give it a width
103:53 - of 50
103:56 - pixels height of 50
104:00 - pixels display of
104:04 - block
104:06 - margin say Auto a little bit differently
104:09 - so position absolute from the top say
104:12 - about 10% and then from the left about
104:19 - 5% and then a z index of two and then
104:22 - we'll Target the blue the blue circle
104:24 - inside of this next so this has an ID or
104:27 - blue this is going to have a background
104:29 - color of a light blue so
104:33 - 71
104:34 - CD
104:37 - F4 border radius so this is going to be
104:41 - 50% width let's make it
104:45 - 85% height also 85% display of this to
104:50 - be block
104:53 - margin be
104:55 - zero and then we'll do some more
104:58 - positioning absolute so the margin
105:00 - should Beal to so we'll say from the top
105:03 - about
105:04 - 8% and then from the left about
105:08 - 3% and we'll have a z index of three so
105:11 - it's on top of everything and now if we'
105:14 - got the Border radius so
105:15 - border radius so
105:18 - 50% from the left actually sorry let's
105:21 - push it a little bit more to say 8% so
105:23 - it's more Central it's looking good now
105:26 - next we'll Target the uh top square here
105:28 - which has these three buttons there um
105:32 - but firstly I forgot to actually put
105:34 - this inside
105:36 - of top square div otherwise it's going
105:39 - to look really
105:41 - funky so let's do that first make sure
105:43 - you do that and
105:47 - then we'll grab the ID of top
105:51 - square two
105:54 - and we'll set the display of this to be
105:56 - block the margin to be
106:01 - Auto let's set the background color of
106:04 - this to be same color there dark red set
106:07 - the zindex to three and then we'll set
106:10 - the height to be
106:14 - 60% width to
106:17 - be
106:21 - 162% and
106:24 - then we'll position this a little bit
106:26 - differently so position
106:29 - absolute and then from the left let's
106:32 - say
106:35 - 80% so that pushes that along and that
106:38 - completes that top section there so now
106:40 - let's just Target those buttons so first
106:42 - we'll Target the red button so this has
106:44 - a IDE of button
106:48 - red so this will have a background color
106:51 - of a lighter
106:54 - red Oro
106:56 - radius of
107:00 - 50% width will be 15
107:04 - pixels height will be 15
107:09 - pixels set the display to
107:13 - block and then position
107:17 - this absolute let's also get rid of
107:22 - let's also set the margin to
107:26 - Auto and say
107:29 - top
107:32 - 45%
107:39 - left -
107:45 - 18% and Z index set that to two
107:53 - so that's the red button there
107:57 - copy let's just duplicate this now for
107:59 - the other three because they're quite
108:02 - similar so it would be button red and
108:04 - then
108:07 - button green and
108:11 - button
108:13 - yellow so they're going to have some
108:15 - different styling
108:18 - so button green is going to have a
108:21 - different color of course so 5
108:24 - 8 PB
108:28 - 69 button yellow is going to
108:30 - have
108:34 - FFC
108:36 - f54 now obviously the position is going
108:38 - to be a little bit differently so for
108:40 - button
108:41 - green it's going to be minus 8% and then
108:45 - for button yellow it's
108:48 - 2% so there's all our buttons there
108:50 - that's completed the top half let's now
108:52 - do the screen
108:54 - so which is this section here which is
108:57 - going to have the
108:58 - picture so we say body of
109:02 - screen be position
109:06 - absolute background color of slightly
109:09 - grayish color E6
109:13 - e 6
109:17 - E6 we set the display of this to be
109:20 - block
109:23 - say
109:25 - margin
109:27 - Auto
109:29 - border radius of
109:33 - 5% say position of this to be
109:42 - absolute uh let's also see this now so
109:45 - let's set the height to be
109:49 - 75% and the width to be 100%
109:55 - so we need to do now just position this
109:57 - a little differently so we'll say from
109:59 - the
110:00 - bottom say minus
110:03 - 10% oh
110:06 - minus that positions our
110:10 - screen let's create the second screen
110:12 - inside of that
110:15 - screen two so the position is to be
110:20 - absolute it's actually pretty similar to
110:22 - this one
110:24 - so paste the details in there and then
110:28 - we'll just change a few things so the
110:30 - width of this is going to be
110:32 - 80% and then top is going to be
110:36 - 10% left is going to be per and the
110:39 - background of the color of this is going
110:40 - to be a little bit different so it's
110:42 - going to be
110:44 - EF
110:47 - E5
110:48 - F6 FC and the Border radius is going to
110:51 - be a bit bigger so
110:53 - 8% so there's our screen there so we
110:56 - nearly completed the first half of our
110:57 - Pokedex so now let's target the bottom
110:59 - section say
111:03 - bottom set the width of that to be
111:06 - 100% display of that to be block margin
111:10 - set it to
111:12 - Auto height
111:15 - 50% uh let's set the Border radius for
111:18 - this to be let's just say something
111:20 - small like 5 pixels
111:23 - and then set the position this to be
111:24 - relative now we're just going to Target
111:26 - the buttons of all of this so we've got
111:28 - the blue button the select and start
111:29 - d-pad and then this button here but
111:32 - first let's just do the
111:34 - start which set the cursor to a
111:37 - pointer set the width to be 15% set
111:41 - display of
111:42 - block
111:44 - margin 10
111:47 - pixels Auto the 10 pixels top and bottom
111:50 - and then turn on the left and right set
111:51 - the height of this to be
111:54 - 8% then
111:56 - this
111:58 - absolute so say from the left we'll say
112:03 - 48% and then from the top say 30% and
112:09 - then let's just give it this color so
112:10 - background color it's going to
112:12 - be
112:14 - f071
112:17 - 147 so there's our select let's add a
112:19 - border radius to
112:21 - this of 30
112:24 - pixels and then we'll do the same for
112:27 - the select so it's quite similar so we
112:29 - just duplicate this
112:33 - actually do the
112:37 - select and the select has a different
112:40 - color so
112:42 - 58 EB 69 so it's like a greenish
112:46 - color and then from the left it's going
112:49 - to be 30% so it's next to the the start
112:53 - button so that's the two buttons let's
112:55 - now the two other buttons so the blue
112:57 - and the yellow one so this has the ID of
113:01 - button blue
113:04 - two this is going to be a cursor pointer
113:07 - a background color
113:10 - of 169 7 99 so the Border radius to be
113:17 - 50% width to be 50 pixels to be 50
113:24 - pixels set the display to block margin
113:27 - again to
113:28 - Auto and then set the position this to
113:30 - be
113:32 - absolute and then say from the top
113:36 - 29% from the
113:39 - left
113:42 - 5% and then the Z index to be
113:47 - two so there's our button there we'll
113:49 - duplicate this for the yellow one so
113:54 - button yellow two this will have a more
113:58 - yellow color so FFC
114:02 - 54 and then the top is going to be 59%
114:05 - and then from the left it's going to be
114:07 - 25% showing oh sorry
114:12 - actually didn't duplicate
114:21 - this so again this Sor is going to have
114:24 - the color of FFC F
114:31 - 54 be that yellow color and then from
114:34 - the top go again so
114:36 - 59% the top and then 25% on the
114:40 - left and let's actually make the width
114:43 - most to be 120 pixel and the Border
114:46 - radius is going to be just
114:49 - 5% so there's that button there all
114:51 - that's left to do now is just include
114:54 - the d-pad so go underneath this and
114:57 - we'll grab the d-pad
115:05 - horizontal and this is going to be again
115:07 - a cursor
115:08 - pointer background color this is going
115:11 - to be a slightly grayish dark grayish
115:14 - color
115:18 - 40440 height is going to be
115:22 - 80
115:23 - pixels the width is going to be 23
115:28 - pixels and then we'll position as a
115:31 - we'll set the display sorry to block
115:33 - again set the position of this to be
115:35 - absolute we'll say the width and sorry
115:38 - and then we'll say
115:39 - top is going to be
115:42 - 32% from the right
115:49 - percent and then let's just duplicate
115:52 - this for the other d-pad so this is
115:55 - d-pad
116:01 - vertical and then of course this is
116:02 - going to be a little different
116:05 - so the width of this is going to be 80
116:09 - pixels and the height of it is going to
116:11 - be 23
116:14 - pixels and then of course from the from
116:17 - the right it's going to be 8% and then
116:21 - from the top it's going to be
116:23 - 42% so as you can see that completes our
116:25 - Pokédex I'm just going to make the
116:27 - screen two here to be bit of a less of a
116:31 - border
116:35 - radius so as you can see now that's
116:37 - completing our first half of the Pokedex
116:39 - which is this section here so it's
116:40 - looking pretty good now let's move on to
116:42 - the hinge and the second part of the
116:45 - Pokedex so let's move to the second
116:47 - style sheet the first thing I'm going to
116:49 - do is just grab the container
116:53 - which is wrapping around all of this and
116:55 - we'll set the display to
116:59 - flex and we'll grab the
117:01 - hinge and this is going to have a width
117:04 - of 20 pixels background color of
117:09 - D5
117:11 - 0
117:15 - 625 and we'll set the Border radio for
117:18 - this to be let's just say five
117:21 - pixels set the height to be
117:25 - 470 pixels and then
117:28 - margin top to be 45
117:32 - pixels so there's our
117:35 - hinge now let's target the second
117:39 - Pokedex or the second half of the
117:42 - Pokedex Pokedex 2 set the width to be
117:47 - 350 pixels set the height to be 4 50
117:53 - pixels so the display to be
117:58 - block margin top let's make it a little
118:01 - bit lower so 70 pixels so it looks
118:04 - consistent so the background color to
118:06 - be
118:09 - FC
118:11 - FC
118:14 - 2243 Z index 2 3 set position relative
118:20 - we have a bit of an issue here and
118:21 - that's Pi the margin top not margin all
118:25 - the way around and then now let's target
118:27 - the hidden element which is this section
118:30 - here so it just looks consistent with
118:32 - the other side of the Pokedex so this is
118:35 - so this has an ID of
118:37 - hidden set the position of this to be
118:40 - absolute we'll set the background color
118:43 - of that light red light to be 30 pixel
118:47 - I'm going set the width to be 60%
118:52 - and then from the
118:56 - top let's say minus 30 you see now it's
119:00 - looking more
119:01 - consistent let's now style the search
119:04 - bar we'll grab the ID of search
119:09 - bar so the background color of this to
119:11 - be
119:13 - black display of
119:17 - flex height of 50 pixels
119:23 - and then say
119:25 - margin top let set that to 60 pixels
119:30 - margin
119:31 - left set that to 20
119:35 - pixels so it's looking a little bit
119:37 - funky now but we'll fix this don't worry
119:40 - so let's target the name so
119:43 - search name it's going to have a width
119:46 - of
119:49 - 90% so the border to do
119:54 - none background color to a light
119:58 - gray so
120:01 - 444 set the color of the text to be
120:06 - Azure outline let's remove
120:09 - it again let's make the height 50
120:13 - pixels to the left and then font
120:17 - size say 1.6 r
120:22 - so that's the search name let's also
120:24 - grab the
120:27 - placeholder style that so this is just
120:30 - going to add font
120:32 - size six frame and then let's just add a
120:35 - bit of margin left to this too of five
120:40 - pixels and set the color of it to
120:43 - be light
120:46 - gray so now let's target the button
120:54 - it's going to have a color
120:56 - of
121:00 - white a background color that dark or
121:03 - sort of light gray set the height to be
121:07 - 52
121:10 - pixels and
121:12 - then say the font size for the icon
121:15 - let's make it 20 pixels so that's it for
121:17 - the search bar and the search button
121:19 - let's now Target the second section
121:21 - which is the squares here so this has
121:24 - the
121:25 - wrapper of section
121:28 - two this going to have height of 100
121:32 - pixels a width of 80 p a width of
121:38 - 88%
121:40 - margin set it to 20 pixels set display
121:44 - to
121:46 - grid and then grid template columns are
121:49 - going to be repeat of four
121:52 - columns and then a width of one
121:54 - fractional unit and then we'll say grid
121:58 - cap of five pixels squares so this has
122:01 - the ID of squares all they all do all of
122:05 - those divs sorry the class of squares we
122:08 - set the background color of that to be
122:11 - Aqua ni squares so now Target third
122:14 - section so this has the IDE of
122:16 - section
122:19 - three set the height of this to be 70
122:22 - pixels the margin to be 10 pixels and
122:28 - then display of
122:31 - flex Justified content is going to be
122:34 - space between squares
122:37 - to
122:40 - squares you have the two squares
122:43 - container so width is going to be
122:47 - 100% and display of flex
122:53 - then let's target those two dibs which
122:55 - have the class of
122:57 - two so this just going to have a
122:59 - background color of
123:03 - beige width is going to be 60
123:08 - pixels and the
123:10 - margin of say five
123:14 - pixels get the yellow button so yellow
123:20 - button
123:23 - so the width of this to
123:25 - be 50 pixels height to be 50
123:30 - pixels background color let's make it
123:33 - like a yellowy orange
123:36 - FC F
123:40 - 54 then
123:43 - margin
123:46 - right 30
123:49 - pixels margin top to be 10
123:54 - pixels and then the Border radius to be
123:58 - percent and it's not showing cuz it's
124:01 - got a different ID let's make the Border
124:03 - radius a little low that one see what
124:05 - 40% looks like now let's go back to
124:09 - 50 and then set that be 60
124:13 - pixels and the height also be 60
124:16 - pixels so that's looking
124:19 - better now let's do the bottom two two
124:21 - buttons these sections
124:25 - here so grab
124:29 - section
124:32 - four so the width of this to be
124:39 - 91% margin to be 15
124:45 - pixels
124:49 - display Flex
124:57 - and then justify content space
125:01 - between and then we'll just Target those
125:03 - two
125:05 - divs so section
125:08 - four bottom
125:10 - two set the height of these to be 40
125:15 - pixels width to be 130 pixels and then
125:20 - lastly just grab the back color which is
125:23 - going to
125:26 - be that's
125:30 - 4404 at 40 40 40 so that completes our
125:36 - styling for the Pokedex now let use the
125:38 - fetch API and async Away to then type a
125:41 - Pokemon name in here and then display
125:42 - the image on the screen so we'll head
125:45 - inside the app.js and we'll say const
125:48 - get Pokémon equals Ayn
125:56 - in and then we'll put this in a
125:59 - try and we'll say let's first get the
126:03 - data so
126:05 - const
126:06 - Pokemon data equals be
126:11 - await grab the fetch API use back ticks
126:15 - and then we'll paste the uh Pokemon API
126:18 - inside of this so this is htps
126:22 - uh and then it's called Pokey
126:24 - api.
126:27 - Co SL API slv2 for version
126:33 - 2pokemon
126:37 - and then after this Pokemon we have
126:39 - another slash which is where youd put
126:41 - the Pokemon name in the parameter but
126:42 - we're going to be making this Dynamic so
126:44 - we're going to put in the actual Pokemon
126:46 - name that we type in here so it's just
126:48 - going to follow a similar sort of thing
126:49 - that we did in the weather API
126:52 - so let's just do some validation here so
126:55 - we'll say
126:57 - if the Pokemon
126:59 - data is not okay so using the
127:02 - exclamation mark at the start
127:04 - there then we'll just throw an
127:07 - error saying new
127:12 - error could not find
127:20 - Pokemon so after that validation we'll
127:22 - just fetch the DAT turn it into a Json
127:25 - format so we say con data equals a
127:29 - away then we'll grab the Pokemon data
127:31 - which we'll be
127:33 - awaiting and then we'll return it as
127:37 - Json and then we want to grab a property
127:40 - inside of that which is going to be the
127:41 - Pokemon image say const
127:46 - pokeon image is equal to the data that
127:49 - we return
127:52 - the Sprite property. the
127:55 - front default which again is just a
127:58 - property inside of the data that gets
128:00 - returned back and then we need to
128:02 - display this image so we're going to
128:04 - grab the image ID so
128:08 - display
128:10 - Pokemon equals document do get element
128:14 - by
128:17 - ID Pokemon image
128:26 - and then we're going to grab that which
128:27 - is the image and we're going to say
128:29 - display Pokemon grab the source
128:31 - attribute of that Pokemon and set it
128:34 - equal to Pokemon
128:35 - image which change the name there
128:39 - slightly and then we need to display
128:41 - this so we're going to have to set the
128:43 - display Val the star value of block so
128:45 - we'll say display Pokémon do
128:49 - style dot display
128:52 - is equal to block we'll set the catch on
128:59 - this we say
129:02 - error
129:04 - console.log error if there is any errors
129:08 - and then all we need to do now is just
129:09 - assign the value the input value that we
129:11 - get from this
129:13 - input and set it to the um the parameter
129:17 - of the Pokémon API so we'll go above
129:20 - this say cons
129:23 - Pokemon name is equal to document do get
129:28 - element by so really similar to how we
129:30 - did it in the weather
129:32 - API this is the search name input
129:37 - so uh this input
129:39 - here we want to grab the value of that
129:41 - but also set the value that we put in
129:43 - here automatically set it to lowercase
129:46 - so using the lowercase method so every
129:49 - time we type in a value it will always
129:50 - turn it to lowercase and then all we
129:53 - need to do is just insert it into this
129:55 - parameter here pokon
129:58 - image sorry
130:02 - Pokemon name so now we have that
130:04 - parameter so whatever value we put in
130:06 - here will display our Pokémon inside of
130:08 - the screen there and we actually need to
130:10 - call this method in the search bar here
130:12 - so we'll go back to the index to HTML
130:14 - inside of the button we'll have it
130:19 - onclick and we'll set that to
130:22 - uh whatever the so it's
130:25 - get pocorn method past that in
130:29 - there and now if we click on the search
130:32 - if we type in a Pokémon so we'll put in
130:34 - Bulbasaur again if we search that now
130:36 - you see we getting that image of
130:38 - Bulbasaur we just need to start this now
130:40 - so it fits the whole screen so we'll
130:43 - say
130:45 - poker Pokemon
130:49 - image we set the Z index to
130:51 - 1,000 just so it's always on top and set
130:54 - the width to
130:56 - 100% And then let's set the height to
130:59 - 100% see now it's working just as our
131:02 - original example and if we type in
131:04 - another Pokémon so let's say
131:10 - Charizard and hit enter you see now it's
131:14 - playing as Charizard Pokemon and
131:15 - whatever Pokémon is inside the Pokémon
131:17 - API will now work so that's it for our
131:20 - last project I hope you guys enjoyed
131:22 - this tutorial and I hope you learn a lot
131:23 - about how we can work with fetch API
131:26 - using async away and working with apis
131:28 - create cool projects