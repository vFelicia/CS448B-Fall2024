00:00 - What's the best way to learn programming? What 
programming language should you learn? First?  
00:04 - Is AI going to replace developers? In this 
video, you will hear answers to 10 of the most  
00:10 - common questions that people new to software 
development tab. This collaboration video  
00:16 - features answers from a bunch of experienced 
software developers and tutorial creators.  
00:22 - Will AI ever replace developers? Wow. Oh, 
really? I was question. I answered this question  
00:27 - a lot. I don't think so. No, I don't think so. 
No, I don't think so. Well, I don't think so.  
00:34 - Hard. No, the answer is no, I'm not seeing this 
like our problem? Not really. And the short  
00:39 - answer is no, I do not think that AI will replace 
developers anytime soon. I do however, think that  
00:45 - it will get rid of all the boring repetitive 
tasks that we don't want to do and allow us to  
00:50 - focus on the problem solving and creating aspects 
that software development count brain. Actually,  
00:57 - AI is our friend as developers, because it's 
creating lots of helpful tools that reduce  
01:04 - the amount of work we have to do and 
the amount of typing we have to do  
01:09 - to create new things and write code as developers, 
I think it will enhance us as developers,  
01:17 - it will save us from doing this repetitive tasks, 
something like an engine on the boat that helps it  
01:23 - to go faster. In my opinion, I think AI is a great 
addition of the set of tools that we already have.  
01:31 - And it will allow us to be more efficient, faster, 
and really speed up the development lifecycle.  
01:39 - With Auto completions that we've seen with some of 
the tools that already are out there. AI is only  
01:46 - as good as the data that we put into it. If you 
dig a little bit deeper into what AI exactly is,  
01:51 - it's just a dataset that is used for predictions. 
Now, in the case of GitHub co pilot, for example,  
01:57 - the predictions are really, really good. It seems 
to know what I want to type. So that is perfect,  
02:03 - but I don't think it will ever actually replace 
developers because you know, we can still have  
02:07 - a lot of creativity that systems don't have and 
consider this, there are still developers needed  
02:12 - to create the AI. What I think or what I see 
happening is AI coming into the tech things help  
02:20 - eight developers productivity, or help automate 
some of the tasks that developers have to do for  
02:27 - your day to day, I believe that AI will not be an 
independent power tool that will just magically do  
02:33 - everything that developers do now. But rather, 
it will be just one of the tools for developers  
02:39 - themselves to actually make their own work more 
efficient and delegate some of their tasks AI will  
02:46 - help optimize developers work, but certainly not 
replace them. I use Google copilot all the time,  
02:52 - and I'm not really worried about it. But if I were 
the kind of person that would occasionally get  
02:56 - things very spookily, right, and then sometimes 
crazy stuff that says wildly out of nowhere,  
03:02 - I might be replaced by co pilot. All the 
traditional jobs we know and love today  
03:07 - will eventually be replaced by AI. I'm a big 
believer in the singularity, and that eventually  
03:12 - artificial intelligence where it will surpass 
human intelligence, that's always going to need  
03:18 - us to develop simple applications, complex 
applications, hell even develop the AI that helps  
03:27 - developers, such as co pilot work the way it does, 
AI will not replace developers because there will  
03:34 - always be jobs for programmers to work on small 
scale, medium or large projects, AI will not be  
03:41 - able to do that all on its own, he can certainly 
be useful and can assist in development processes,  
03:47 - but it will not do the whole thing on its own. 
Unless, of course AI becomes self aware at which  
03:54 - point we'll have bigger things to worry about than 
our job. I think that someone will always need to  
03:59 - maintain something, right? There's infrastructure 
to be maintained. There's always going to be some  
04:04 - code to write someone needs to write code to 
make the AI work. In general, I think that AI  
04:10 - even if we were to replace the typical jobs 
that we do today, it just means that engineers  
04:15 - will have to adapt to something different, but I 
don't think it's going to replace them completely.  
04:20 - What is the best way to learn programming, through 
courses or by yourself? When you're just beginning  
04:27 - you need some kind of a guideline or roadmap 
because you don't know what you need to learn in  
04:33 - which order you need to learn or generally you 
have no idea where to start. So on a beginner  
04:38 - level, I recommend starting with courses and 
then go ahead and practice with actual real life  
04:45 - projects. I think you will spend as the developer 
most time of your life learning programming,  
04:51 - so the learning does not really stop. So if you 
find courses beneficial than going for courses But  
05:00 - I'll tell you now, the ability to study on your 
own is the one of the most valued abilities of the  
05:08 - developer. Honestly, I'm a big fan of courses 
because they provide structure. And I think  
05:13 - having structure is very important when you're 
learning something and you don't know where to go.  
05:18 - If you're simply learning a new language, you're 
already proficient in several languages, that I  
05:23 - think the best way is to go by yourself, and just 
read the docs and build projects. But if you're  
05:29 - starting from scratch, I think coding courses 
and then also simultaneously working on projects  
05:36 - is the best way to go. In my opinion courses 
will allow you to at least get the foundational  
05:41 - understanding, then you need to go by yourself and 
start creating products, applications, websites,  
05:49 - etc. Using the skills that you've just learned. 
I think taking a course is still technically  
05:55 - by yourself, but more structured. When you go 
through a course you're going to learn new things.  
05:59 - But then it's up to you to take that knowledge 
and apply it to your needs. Go build something on  
06:05 - your own after the course. Well, I would say is a 
mixture of things, I would advise all my students  
06:11 - always watch the tutorial first. However, not just 
rely on the tutorial too much, I would recommend  
06:18 - completely getting rid of what you've just built 
the tutorial and just starting from scratch,  
06:23 - really seeing if you can do it all by yourself, 
and really seeing if you can make the project  
06:27 - your own. Your best way to learn programming 
is really what works for you. Do you learn best  
06:33 - by digging in a book going through a course or 
even a combination of the two. But ultimately,  
06:39 - one thing that will help everyone is to practice 
by creating projects, I had a math professor that  
06:45 - wants math is not a spectator sport. And the 
same goes with programming you need to get  
06:50 - to practice and to get better. In my opinion, 
I think through courses because you can find  
06:55 - someone that you fully understand and you feel 
comfortable, like listening through the examples,  
07:02 - because some concepts can be really, really 
difficult to grasp. If you just for example,  
07:07 - reading books or through blogs, whereas if someone 
is teaching you and an explaining along the way  
07:13 - through, for example, videos, which I think is 
one of the best ways of learning programming,  
07:18 - I think that will take you a long way as you start 
off, then once you are comfortable and understand,  
07:25 - for example, the programming language or 
the framework, this is when I feel like  
07:29 - by yourself is better, because you can challenge 
yourself through wherever project that you think  
07:35 - will basically allow you to learn all the 
skills that you've learned from someone else,  
07:41 - it's more like you if you're just getting started, 
you need to go ahead and take some fundamental  
07:46 - courses about programming, maybe you learn web 
development, JavaScript, you get the first steps,  
07:51 - you learn the basics, then afterwards, you can 
jump on your own project and you start learning  
07:56 - by yourself. And this way, you will be able 
to like explore and read more documentation  
08:01 - like how to solve problems by yourself, like 
explore more libraries by your own portfolio.  
08:06 - And much, much more personally, I would say both 
because being a self taught developer myself,  
08:12 - I relied a lot on online resources, like courses, 
to help me learn some of the technologies that  
08:19 - I was learning. So you can do it yourself. 
But to be honest, you still need to rely or  
08:26 - look out for resources online to help. The 
answer to this really varies by two factors,  
08:33 - by your individual preference, and also by 
the situation that you're in. For some people,  
08:41 - it's better to go the self learning route than 
some people need the motivation, and the personal  
08:48 - involvement and structure that something 
like a coding school or a boot camp brings.  
08:54 - There's no one path to get into coding. 
What if everyone became a programmer? Well,  
09:00 - realistically, I don't think that will happen. 
But I definitely do think that it will help if  
09:05 - everyone has some basic understanding 
of how code works, how computer works,  
09:08 - because that will help for security, we will get 
a more diverse set of people in programming. So  
09:14 - that will definitely help as well to break 
some paradigms and get some creative new  
09:19 - things out there, which will be really great. 
So I do definitely think that everyone should  
09:23 - have some basic knowledge of programming. But 
Will everyone become a programmer? I hope not.  
09:29 - First off, not everyone is going to want to be 
a programmer. People have different interests,  
09:36 - and there's room for everybody's interests and 
passions in the world. That being said, I do think  
09:43 - that at least in school, everyone should learn 
the basics of programming. I agree with Steve Jobs  
09:50 - here when he says everyone should learn how to 
code because it teaches you how to think I think  
09:56 - that logic, like stepping through problems. And 
all those related skills that kind of fit under  
10:04 - the umbrella of learning to code are really 
valuable, regardless of what career you go into.  
10:13 - Also, coding skills can be very 
helpful even in non coding jobs.  
10:17 - I've heard a lot of people who have used 
a little bit of Python or a little bit of  
10:21 - Visual Basic to automate some of their tasks at 
work and really help them out with other things.  
10:28 - Or maybe someone will learn to code and then just 
use it for side projects, or building things that  
10:35 - they really want to exist for themselves 
or for the rest of the world. And coding  
10:40 - creates an opportunity for people to be able to 
do that. That's the beauty of learning to code.  
10:47 - You can take it anywhere and do so many things 
with it outside of just working as a developer.  
10:52 - I don't think that is possible, mainly because 
coding and programming is not for everybody,  
10:57 - some may like it, some may not like it. That 
being said, though, if for whatever reason,  
11:02 - everybody decided to become a programmer, that 
simply means that the demand on the job market  
11:08 - is very high for programmers, which is good for 
everybody. This is really not worth worrying  
11:13 - about. I think if the concern is, what if there's 
too many people in the job pool, and everyone's  
11:19 - trying to get into the same jobs? I think that's 
already happening today. But if you take a look at  
11:25 - the software engineer salaries, they're still very 
high. And that's because even with all the supply,  
11:31 - it's still very hard to find talent. So as long 
as I think if you strive to be a good engineer,  
11:37 - it really is not a problem for you to think 
about. Well, I think it's more of a self feeding  
11:42 - cycle. The more programmers we have, the more 
awesome technologies and generally technological  
11:48 - progress we have. Which means we again, need 
more developers for those new technologies.  
11:53 - However, I do think that the simple 
coding and programming skills  
11:58 - will not be enough for a professional software 
developer. So while some years ago, just average  
12:05 - JavaScript knowledge was a superpower. Now, 
as a developer, you actually need to bring  
12:10 - much more skills to compete with other 
developers, because again, the programming  
12:15 - field is rapidly growing and becoming more and 
more competitive. Man, that's never gonna happen.  
12:20 - I'm not really worried about it, though. But it 
would mean a worldwide shortage on Hot Pockets.  
12:25 - That would be cool. But it's not going to 
happen. Don't worry about there being too many  
12:29 - programmers, the demand for talented programmers 
goes up every year, as technologies advance. There  
12:35 - are tons of open roles everywhere. I'm 3040, 
or 50. Is it too old to learn how to program?  
12:42 - No, no, definitely not. It's never too late to 
start. It doesn't matter the age? Absolutely  
12:48 - not. I don't think it is ever too late to learn 
anything. Absolutely, yes. Turns out that a switch  
12:54 - flips in your brain when you're 30 years old, and 
you're unable to process new information, which is  
12:59 - why I don't know how Game of Thrones ended. But 
I'm sure it ended well, well, I don't think so.  
13:05 - I think programming can be learned at any stage 
in your life. Programming is a skill, it doesn't  
13:12 - really matter how old you are, like, literally, 
you just have to be consistent. You can literally  
13:18 - learn to code at any point in your life. You can 
learn programming at any age, I know people that,  
13:24 - you know, from the 30s 40s, they decided that 
had enough from what they were doing. And they  
13:31 - just became a programmer. So it's completely 
up to you whether you have the right mindset,  
13:36 - literally anyone, it doesn't matter 
the age, anyone can learn how to code,  
13:41 - age doesn't mean anything at all. I don't think 
it is ever too late to learn anything, basically,  
13:47 - as long as you kind of enjoy it, you know, maybe 
a job can be harder at a certain age because of  
13:52 - all kinds of prejudice that is out there by 
companies, which is, you know, not great. But  
13:57 - it's unfortunately the reality. But I feel if you 
want to learn anything, the time is now, a lot of  
14:04 - things you need to get started with learning how 
to code honestly is out there for free internet.  
14:09 - And there's a an abundance of information that 
you can just grab whenever. So I truly believe  
14:15 - whatever limitation it is that you think you 
have, it's probably not your age, it really is  
14:20 - just your own self belief of can you do it? Or can 
you not do it? My recommendation would be to just  
14:26 - get started learn a little bit each day and just 
see where that goes. I'm currently teaching my mum  
14:30 - to do some HTML, CSS and JavaScript. So I never 
think Never Say Never always is a good time to  
14:38 - start learning anything really not just software 
development. If it's either for a career switch  
14:43 - into a developer job, or just as a hobby 
programming can be for anyone of any age.  
14:49 - Absolutely not. I think age, even though obviously 
it is a real thing. It's also a social construct  
14:56 - all of these expectations around what time You 
should be doing things at what age should you be  
15:03 - doing any particular tasks, those 
are all just social constructs. So  
15:07 - I don't think you should believe anybody 
that tells you you can't do something,  
15:12 - no matter what age you are, yes, it will be 
harder to learn. Because when you're younger,  
15:17 - your brain is like a sponge, and it retains 
information better. But regardless of your age,  
15:23 - you can 100% learn to code and you should, 
if that's something you're passionate about,  
15:27 - I actually personally know a lot of people over 40 
that started learning to code and now are getting  
15:34 - careers out of it, like complete career switches. 
So now I don't think you can ever be too old.  
15:40 - These a diploma in computer science worth it 
worth it, probably, but required, probably not.  
15:47 - But then again, this kind of depends on what 
field of programming you're going after.  
15:52 - Some may require formal education, some may not. 
It also depends on the location where you leave,  
15:59 - and so on. So I would say if you're able to 
afford a formal education, go for it, then it  
16:06 - will be worth it. But if you can't, please don't 
take out any loans, because it's not going to  
16:12 - be worth it in that case, that really depends on 
your situation, if you have the money and time to  
16:19 - invest in a computer science degree, and it's also 
the best option for you personally, and mentally,  
16:27 - then I would say yes, a computer science degree 
would be great. It gives you lots of access  
16:33 - to professors who are knowledgeable about the 
foundations of computer science, you're going  
16:38 - to get really great foundational knowledge of 
software engineering, you'll also have access to  
16:46 - lots of resources, you'll be able to network with 
people in the industry, maybe get internships,  
16:53 - that's a really good leg up into a career as 
a software developer, many jobs will even say  
16:59 - they require a degree in computer science, or 
that equivalent amount of experience on the job.  
17:07 - Web development in general can 
definitely be done without a degree,  
17:10 - especially with all the free ways of learning 
that are out there. Now, it's actually quite  
17:14 - easy to get started with programming without 
going for a degree. Well, in my opinion,  
17:18 - the answer has been no, I have a diploma 
that I got after I already learned to code,  
17:24 - and I've never used it. But if you can afford 
to go to college, and have that experience,  
17:31 - I think it's good that people get that diploma, 
so that they can have that experience of learning  
17:36 - how to learn in a real college scenario. 
Do I think it makes you a better developer?  
17:42 - No. I have mixed feelings about this, because it 
really depends on what career you want to pursue.  
17:49 - Personally, I don't think my computer science 
degree was worth it. Because I could have learned,  
17:55 - actually, I did learn most of my knowledge from 
YouTube, from online courses from free resources  
18:04 - from Google and Stack Overflow. That's where I 
gained most of my knowledge. But what university  
18:09 - was very useful for is building a network 
of people, providing you with opportunities,  
18:18 - and having a structured approach to learning. 
So it's useful for those three things,  
18:23 - but it is definitely not necessary. So if 
that's what's holding you back from entering  
18:27 - the tech world that don't get one, just learn by 
yourself, maybe take a bootcamp but you can 100%  
18:35 - learn on your own and don't mind a computer 
science degree or feeling like you need one  
18:40 - hold you back. I don't have one. But I think 
it's fine. I think if you do get into this,  
18:46 - and you go through a boot camp, and they don't 
teach you data structures and algorithms,  
18:50 - it is probably something that you want to follow 
up on. And if you want to get into something like  
18:55 - machine learning, then some extra math would also 
do well. But yeah, I don't think it's necessary  
19:02 - for a practical working job at this point. Well, 
I personally don't have a computer science degree,  
19:10 - software development, or computer science wasn't 
really something on my radar, I actually studied  
19:15 - architecture. So I did the math. I did the physics 
and it just wasn't really a thing and wrong my  
19:21 - friendship group. So if I didn't do it, you 
don't have to, of course it does help. But is  
19:27 - there a really hard prerequisite? Absolutely. If 
you have time and money to go to the university,  
19:34 - go for it, because apart from the knowledge, 
most importantly, you're going to meet the right  
19:39 - people. I don't think it's worth it at all. But if 
you of course if you have a diploma, it's a great  
19:44 - add on you can add it to your CV and it's just 
like a great add on for you. But for just been  
19:49 - getting a developer urine needed deployment you 
can learn all by yourself. My short answer to that  
19:55 - is no. The longer answer is it filled specifically 
has a big advantage that whatever there is to  
20:03 - learn, you can actually learn yourself from online 
courses, YouTube videos, self practice, etc.  
20:10 - You can even create a portfolio of your projects, 
host them into a git repository and show it to  
20:16 - your potential employers as an evidence of your 
knowledge. Plus, I would argue that most of the  
20:21 - latest technologies or latest versions of the 
established technologies aren't always taught at  
20:26 - universities, simply because they can update their 
curriculum so fast to keep up with these changes.  
20:33 - I would say it is, I think that if you have one, 
it might be a little bit easier to break into  
20:38 - the industry, although it does take a lot of time 
and money. So those are your main considerations.  
20:43 - If you don't have a lot of either of those, then 
perhaps a boot camp might also work for you. So  
20:48 - was it worth it? I think it was for me, is 
it required though? Now, there's different  
20:52 - avenues nowadays to break into the industry, you 
don't need a diploma to get started. I would say,  
20:59 - if you have the money, then absolutely yes, it is 
worth it. Because computer science will teach you  
21:05 - things that will help you to become a better 
programmer in the long run. However, if you  
21:12 - don't have the money, then I think that he should 
maybe just try a bootcamp or for example, here in  
21:18 - the UK, the government is giving free 12 week 
program for people to get into coding, which is  
21:26 - amazing programming influences your health, it's 
a very sedentary job, you're sitting in front of a  
21:32 - computer for many hours every single day. And from 
a physical perspective that can really take a toll  
21:39 - on you. I have implemented quite a few systems 
to help keep me active throughout the day, I set  
21:47 - reminders on my watch. So my watch will vibrate 
every hour, so and let me know that I need to  
21:54 - stand up and walk around for at least one 
minute, it's very easy to get caught up in a  
21:58 - problem or writing code. And all of a sudden 
eight hours goes by and you haven't eaten.  
22:03 - You haven't had any water or gotten up to do some 
exercise. So be sure to take routine breaks. And  
22:10 - I really love my standing desk, it keeps me from 
sitting all day. I do think that with any sort  
22:16 - of job, when you sit too long at computer, 
it is important to get up stretch your legs,  
22:21 - get away from the computer every 20 minutes or so 
even though that does seem quite hard. Now, when I  
22:26 - think about it, I definitely don't do that enough. 
But I would say that taking short breaks, letting  
22:31 - your eyes rest is key when doing what we do. It's 
very addictive. So I remember when I started,  
22:39 - as a junior developer, I just wanted 
to you know, fix a bug from Friday,  
22:43 - I would spend Saturday and Sunday working on 
it. And then Monday, and then carry on for,  
22:50 - you know, weeks and weeks just focusing on 
programming without no break. And obviously,  
22:56 - that can have a big impact in your life. So 
burnout is a common thing within programmers. Yes,  
23:03 - programming can have an effect in your health. 
But I would say it's like everything, right? So  
23:09 - you know, just don't have too much of it. And it 
won't be a problem. Well, it definitely makes your  
23:15 - brain more active and possibly saves you from 
Alzheimer's. But because you sit down a lot,  
23:21 - you need to plan in a lot of physical activity 
in order to stay slim, not great. It is a lot  
23:28 - of sitting down. And that's not particularly 
awesome for your health. But I have noticed  
23:33 - that I do apply a kind of engineering rigor 
to my workouts. And when I actually work out,  
23:38 - that actually helps a lot. So there is that? It's 
kind of a funny question. But I think there's some  
23:42 - truth to it. Because if you really get caught up 
in a problem with programming, then it's easy to  
23:47 - maybe drink too much coffee, do not get up enough 
from your chair, maybe eat some unhealthy food,  
23:52 - because it's just easy, and you want to focus on 
the problem. So make sure to get up exercise, eat  
23:57 - healthy, do all kinds of things, but also for your 
mental state, right? It's very much a profession  
24:02 - where you have to think a lot. So make sure to 
disconnect at times, do something completely  
24:06 - different to relax and not get too caught up 
in complex problems that won't let you go.  
24:12 - Well, for me, it's quite an advantage because 
I am remote and I get to work my own hours.  
24:18 - I get to go to the gym five times a week, if not 
seven, and I get to Power Lift every single day.  
24:25 - So for me, I get to enjoy what I love at the gym, 
and also get to program mentally. I use the gym to  
24:34 - give me clarity, as well as taking away any 
stress I might have from the job that I do.  
24:41 - So a lot of times as developers we are literally 
on our desk sitting for hours upon hours. And in  
24:48 - the long run this could cause back aches or 
you can start having eye problems. So in this  
24:55 - scenario, what I would advise is, as well puzzle 
should take care of yourself If you notice that  
25:00 - you're having back ache, you should definitely 
get yourself an ergonomic chair that would help  
25:05 - you balance properly, or standing desks where you 
can switch between sitting and standing. And also,  
25:11 - if you are having eye problems, because you're 
always looking at the screen, definitely get  
25:16 - yourself a blue light blocking glass. This really 
helps improve your eyesight as you work everyday.  
25:23 - Do you need to know math to become a developer? 
Seriously? No, absolutely not. I don't know where  
25:29 - this comes from. I actually teach programming 
in elementary schools to fourth graders, and  
25:34 - they have this idea that takes a lot of 
math. So it's got to be like an episode of  
25:38 - Sesame Street or something, please don't watch 
that episode. Now dubbing maths, well, it's  
25:44 - very helpful is not again, a hard prerequisite for 
learning how to code. There are many avenues that  
25:50 - don't require any maths at all. For example, 
when I was working as a software developer,  
25:56 - in my old company, the amount of maths I did 
was very negligible. When creating games, for my  
26:01 - tutorials, it is a bit higher, but it just depends 
what kind of area you go into. This depends again,  
26:07 - on what you want to do. As a programmer, for 
instance, if you want to be a game developer,  
26:12 - you may need to know some math, especially if 
you're working on game engine that will evolve  
26:17 - a lot of game physics. But in general, No, you 
wouldn't really need any math to become developer.  
26:23 - know myself, I wasn't that good with Maths. 
But still, I'm a software engineer, obviously,  
26:28 - depending whether you want to, you know, go into a 
role where it's, you know, heavily maths focused,  
26:34 - such as a quant developer, then yes, you need to 
know maps, but there are many areas in software  
26:39 - engineering that you don't need to know maths 
at. All. Right. So also, it depends on on the  
26:45 - industry that you you're planning to go into. 
But in general, you don't need maths? Well,  
26:51 - it depends on the type of developer. If 
you're going to be doing machine learning,  
26:55 - or data analytics or quantum computing, then yeah, 
but in general, you just need to know basic math.  
27:03 - Math is obviously a related field, right? 
In programming, you're likely going to be  
27:07 - working with some form of numbers, you know, 
you might be writing some algorithms. But does  
27:12 - that mean that you need to be a math expert? 
Not necessarily. I think, you know, if you  
27:17 - do a typical CS degree, you'll have your learn 
a little bit of math, but it doesn't necessarily  
27:22 - turn you into a mathematician or anything like 
that. Right? So do you need to know some math?  
27:26 - Yeah, I think so. But do you need to be like 
an expert mathematician? No, not really, huh?  
27:33 - Well, I don't think so. Like, literally, you can 
be a developer without maths. Because at the end  
27:40 - of the day, depending on the kind of developer you 
are, you don't have to deal with mathematics. So  
27:46 - for for example, if you're a front end developer, 
you might need it at some point. For example, if  
27:52 - you're doing like CSS Calc, you need to know like 
a bit of calculation table. To be honest, it's not  
27:59 - a deal breaker for you to become a developer. So 
Max, is a good knowledge to have what not require?  
28:07 - Absolutely not. You don't need math skills to 
become a developer, I would argue that if you know  
28:13 - fourth grade math, that will be more than enough 
to start learning programming. What you need,  
28:19 - though, is a decent amount of logical thinking 
skill, which you can easily develop with practice,  
28:25 - because programming is about being creative and 
making logical connections and finding solutions.  
28:31 - So programming doesn't follow any 
predefined mathematical formulas.  
28:36 - So if the fact that you're not good 
at math is what's holding you back,  
28:40 - then you have nothing to fear about because 
that's not going to be a roadblock for you.  
28:45 - How long does it take to become a junior Dev. 
Now the natural progression of a developer is  
28:51 - very different depending on where you are mine 
was to do a boot camp, then a graduate scheme,  
28:58 - and then become a junior developer. And all in 
all, I think that process, including the boot camp  
29:03 - took a bout a year. So that is just something 
that I went through, but again, is different for  
29:09 - everyone. Well, as computer science evolves, you 
will probably need to know a lot more today than  
29:16 - you would have required to know in like, say 
90, it's but think six months is a safe period,  
29:26 - considering that you will be say practicing at 
least once a day, a guess for somebody who's  
29:35 - going to learn on a daily basis, it would be from 
like four to six months to be a decent Junior Dev.  
29:42 - But for others who are just like learning from 
time to time, I guess most of them is going to  
29:46 - be like 10 to 12 months to be a good Junior Dev. 
There is no set amount of time that anyone can  
29:54 - promise you where you will be a junior developer 
in so many months. Now I think it's really helpful  
30:02 - to get inspiration from people's stories where 
they say, Oh, I became a developer in three months  
30:08 - or six months, and this is how I did it. But that 
doesn't mean that it will be the same for you.  
30:13 - It could take you two years. And that's okay. 
That's your own path. Also, everyone comes into  
30:19 - software development, with a different background. 
I started coding HTML, probably when I was 11,  
30:27 - or 12 years old. Some people have almost 
never used a computer or can barely use email.  
30:33 - And some people have already built lots of things 
in programming languages. So you can never compare  
30:39 - yourself to other people. It depends on how 
much effort you put into learning, depending on  
30:43 - your current circumstances, you may or may not be 
able to invest the same amount of time as others.  
30:50 - In general, I'd say six to 12 months, but don't 
compare yourself to others. Go at your own pace,  
30:56 - and don't rush, you're going to be a better 
developer, if you take the time to really learn  
31:01 - the fundamentals, I could tell you that it would 
take you three months to become a junior Dev,  
31:06 - but I might be wrong. Or I might be right. 
It's really individual, because everybody  
31:11 - learns at a different pace. And everybody learns 
different ways. So while it could take you three  
31:18 - months, it could take somebody else nine months 
or even more. So don't be discouraged. If it  
31:23 - takes you a little bit longer to become a junior 
dev than somebody else. Don't compare yourself  
31:29 - to somebody else. He took a and there is 
nothing wrong with taking a little bit longer.  
31:35 - Take your time and just do what you're doing. It 
will take you exactly as long as it's needed for  
31:41 - you personally to become a junior though. I think 
it really depends. Online, you do you see a lot of  
31:48 - the best case scenarios. So you know, you see 
people that learn to code. And in six months,  
31:54 - without a computer science degree or anything, 
they get a job at Google, or you do see a lot  
31:59 - of people that learn to code and then get a six 
figure salary three months later. I think those  
32:04 - are best case scenarios. And even though that 
can happen, and absolutely yes, it does happen.  
32:09 - It's not the norm. And it's not what you should 
expect. And I think it, it discourages a lot of  
32:15 - people because they have those high expectations. 
But I think a realistic expectation for learning  
32:21 - to code. From day one to becoming a junior Dev 
and landing your first job would be a year or  
32:29 - even more. I think building those foundational 
skills would take at least six months,  
32:35 - I wouldn't trust anyone that tells you that it 
can take less, I think we should set a little  
32:41 - bit more realistic timelines, which programming 
language to choose first. Now this is of course,  
32:47 - a great question. And again, it depends on where 
you are geographically or what you're interested  
32:51 - in. For me, I did HTML, CSS, JavaScript, and then 
we've done to react and started looking at some  
32:59 - Python and some back end development as well. 
But again, that is not a hard, you must do this,  
33:06 - it will be different for everyone up? Well, I 
don't think there is one right answer to this,  
33:11 - I think that is the language that you enjoy 
most the one that sticks with you. So try out a  
33:16 - couple of different languages and see whichever 
one works for you. I also feel that if you've  
33:21 - mastered the wonderful art of programming, that 
it doesn't really matter what language you use,  
33:26 - if you fully understand one language, you can 
apply those concepts to any language out there,  
33:31 - I would go with JavaScript just because you know, 
you can use it for front end, you can use it for  
33:35 - back end, you know, basically, you can do it for 
full stack, you can use it for mobile development.  
33:39 - So you really, you can go all over the place with 
JavaScript, and it's a multi paradigm language. So  
33:45 - there's a lot that you can learn about programming 
with just that one language. So I think if you're  
33:50 - not sure, in my opinion, nowadays, JavaScript 
is an absolutely great way to get started  
33:54 - 100% What I would recommend is Python. Python was 
my first programming language and what we learned  
34:00 - at university and that is because it reads like 
English, it has a very simple syntax, it's easy to  
34:06 - learn, it's easy to understand, as a beginner, and 
it can help teach you the foundations. If you do  
34:11 - want to do front end, then I recommend JavaScript 
and obviously learning HTML CSS, in my opinion,  
34:18 - I think you should pick a language that will teach 
you the fundamentals of programming well enough,  
34:24 - and as many concepts such as object oriented 
programming, interfaces, types, for example,  
34:31 - right? Now, if you go into language that 
doesn't teach you all of these concepts,  
34:35 - then you can find a little bit difficult to move 
forward. So the benefit of learning for example,  
34:40 - language, such as C++, Java, C sharp, C, is that 
whatever other language follows, you will see  
34:48 - so many similarities that you'll see that language 
is just a tool for you to solve a problem.  
34:56 - Now, I'm a C sharp developer, I love the language 
and I do think as a Great one to get started with.  
35:01 - But ultimately, I would probably choose Python, 
mostly for there being so much learning material  
35:07 - for it. And it could be easy to get started 
with C sharp is a very close second, then, if  
35:12 - I were starting out, I would go to the local job 
market and see what's on demand and go from there.  
35:18 - Another way is to simply try out multiple 
different languages and see which one you  
35:24 - would like, which is easier. Maybe you like the 
syntax of one language better than the other,  
35:29 - and so on. People fall into a few different 
categories when they're learning to program.  
35:35 - Some people already have a goal in mind of what 
they want to do, for example, you want to become  
35:41 - a mobile app developer. While then you will learn 
Java and or Swift to work in that ecosystem.  
35:50 - Now, if you don't know what you want to do, 
there are two recommendations that I have  
35:57 - from working with students over the years. And the 
first is that if you really have no background,  
36:07 - in programming, or much technology at all, or 
if you are an artist, or very design oriented,  
36:16 - I recommend learning HTML, 
CSS, and JavaScript first,  
36:20 - one great thing about that stack is it starts you 
off with the most basic languages like HTML, CSS,  
36:28 - and gives you instant feedback in the browser, for 
everything that you're building and the changes  
36:34 - you're making. The nice thing about that stack 
is a browser is something almost everyone is  
36:39 - already used to using. So it gives you kind 
of that comfortable place to start coding.  
36:45 - If you are a little bit more tech savvy, 
and or you are not very good with design,  
36:52 - my recommendation is to learn Python first. It is 
such a great general purpose programming language,  
36:58 - has a wonderful community, and is used in 
pretty much every different type of programming,  
37:04 - from scripting to web development, Blockchain, 
AI, all different sorts of things. This is kind  
37:11 - of a complex question. And I'm going to 
preface it with it doesn't really matter.  
37:16 - But if you're a front end Dev, or you want to be 
a front end, Dev, choose HTML, CSS and JavaScript,  
37:22 - get the basics down and move on. If you're a back 
end Dev, choose a back end technology that excites  
37:28 - you, such as Java, Go Python, for example. Other 
than that, it's just about picking something and  
37:34 - getting started. I mostly recommend to start with 
JavaScript, because it's easy. It's flexible,  
37:42 - and is the most popular programming language for 
developing web applications. Because programming  
37:48 - is generally pretty abstract. So starting with 
web applications, where you can see the results  
37:53 - visually in the browser helps a lot to 
understand what you're actually programming,  
37:57 - because you have some actual visual feedback. 
Plus JavaScript can be used for both front end  
38:03 - and back end development. So with one language, 
you actually learn the basis of the full stack web  
38:09 - development. For me, I started with C and C++. But 
I guess for nowadays, it would be better to start  
38:16 - with something like JavaScript, or maybe Python, 
but I see Java code is a better choice to go for,  
38:22 - since it runs literally everywhere. Give us some 
tips on motivating yourself to study, I would say  
38:28 - start with a project, it will be something fun 
to work on, instead of doing random exercises,  
38:33 - or going straight through a book or a course. 
And with a project, you're more likely to go,  
38:40 - oh, I need to do this for to do what I wanted 
to do. And you'll go and see how to do it. And  
38:46 - you'll learn how to do it at the same time. I 
can share two themes here. The first step is  
38:53 - for you to create a study timetable. By having a 
study timetable you've already set aside time for  
39:00 - when you would like to study this really helps you 
because then there is no way you would say that,  
39:08 - for example, you don't have the time or 
something else is blocking your time because  
39:12 - now you have a schedule. The other thing I'll 
say is for you to find a study group, study group  
39:17 - really helps motivate you because do you have a 
group of other people that you can look out to  
39:24 - that would help motivate you to go ahead and 
study so having the study group is great.  
39:29 - And also setting a study thank you is also a great 
way to be motivated. I guess the best way would be  
39:36 - to find what interests you the most and try to 
learn it. Also I find a good way is actually  
39:43 - to follow video tutorials. And try to like follow 
them and create whatever projects because this is  
39:49 - going to give you a lot of more motivation 
and a push forward to learn by yourself  
39:53 - and create your own projects. Start sharing 
your progress with the developer community.  
39:59 - You could be on Social media like on Twitter, 
for example, or discord or somewhere else,  
40:04 - just make sure that you're sharing your progress, 
it will give you the needed motivation. There are  
40:10 - many different kinds of motivation that work for 
different people. But one of the best things for  
40:16 - me personally, is to follow inspirational people 
on social media, I love getting inspired by  
40:23 - different accounts. Also, to force myself to 
study, I typically use the two minute rule, which  
40:29 - is just telling yourself that you're going to do 
something for two minutes. And after two minutes,  
40:34 - you can stop. But usually, because you gain 
momentum, you don't stop after two minutes. So  
40:39 - you kind of trick yourself into spending the time 
to do that certain activity. Obviously, that's not  
40:45 - only for programming, it's for everything. But I 
find the two minute rule always helps me. And you  
40:51 - know, time blocking every single night, I'm trying 
to learn to code from this time to this time.  
40:57 - And sticking to that is super important. I would 
say, being part of a community. It's really,  
41:04 - really important, because you'll find like minded 
people like yourself, and you'll feel like you're  
41:10 - not alone in this journey. If you are part of 
a community, get engaged, ask questions, have  
41:17 - study groups with people meet people. And that 
way it will drive you forward every single day,  
41:24 - that days that you will feel like oh, this is 
so difficult. And if you are alone, it's much  
41:28 - easier for you to give up. Now, if you are within 
a community, and you've got people supporting you,  
41:35 - then you kind of feel you know, someone 
uplifting you all the way if you are stuck,  
41:39 - you ask questions. And yeah, just be part of the 
community. I think it's one of the best things  
41:45 - that you should do to motivate yourself. Well, 
motivation is a short term boost, you need to have  
41:52 - a clear understanding why you're doing this. This 
is how you'll make sure that you'll go through  
41:59 - all the rainy days. And all the days where you 
don't really want to study at all. And generally  
42:06 - try to switch between activities. Let's say you're 
coding than switching to something like running or  
42:14 - lifting weights. This is how you can 
split your day and not to get bored  
42:19 - with what you do. This is kind of a difficult 
question for me, because I'm a self motivated  
42:26 - learner who wants to learn about 
everything, regardless if it's tech,  
42:30 - cars, nature, woodworking, whatever I'm super 
interested in learning all the time. So I motivate  
42:38 - myself by finding something I'm interested in. 
And then I start reading about it and decide  
42:42 - whether or not it can hold my interest for a long 
time. Once I have that I can study all day, every  
42:48 - day about a topic. I think the most fun way to 
learn anything is with actual real projects that  
42:54 - are interesting for you. So once you learn the 
basics of a programming language from a course,  
43:00 - for example, you can start practicing yourself. 
For example, if you want to learn JavaScript,  
43:05 - think about a web application, you would want to 
develop for yourself, maybe you love sports. So  
43:10 - you want to develop a web application that shows 
all the fun sports events and activities near you.  
43:16 - Whatever it is, this will make it much more fun 
to learn coding than just going through a book or  
43:22 - a course with boring generic examples. Sure, 
there will always be cases where you have to force  
43:28 - yourself to do a little bit. But I think if you 
can find something that you enjoy most something  
43:32 - that feels like a hobby, then the motivation will 
be no problem, you will enjoy it so much that you  
43:37 - will continue working on it, you will find any 
spare time that you have to put into it. And the  
43:42 - motivation will be no problem at all. So make 
sure to find something that makes you happy.  
43:48 - Don't study, build stuff, and study what 
you need as you're building stuff to build  
43:53 - this stuff. It's called constructivist learning. 
And it's a way of teaching yourself new things.  
43:58 - By doing those things. You don't learn how to make 
cabinets. By just thinking about making cabinets,  
44:04 - yo make cabinets by building cabinets, same sort 
of thing with software, you learn how to build  
44:08 - software by building software. It was so helpful 
to me when I was starting out to really consider  
44:15 - why I was getting into software development. 
I was at a complete dead end in my life.  
44:21 - I'd wanted to do this for a long time. And I 
finally pushed myself to become a professional  
44:28 - developer back in 2015. One of the ways that 
I did that was writing down my reasons, all of  
44:36 - my why's for getting into software development, 
where I could see them and remember them. And I  
44:43 - found that very motivating for me. Another thing 
that I have realized that can really help you  
44:51 - push through challenges and when you get stuck 
is something I call building early and often.  
44:58 - You really need to have have successes along 
your journey while you're learning to code.  
45:05 - One of the best ways of measuring success is 
by building projects. When you can look back  
45:12 - and see the history of things you have built, and 
see how they started from simple little projects  
45:18 - and got slowly more advanced over time, 
you can really feel how much you have been  
45:25 - growing and learning. So even when you're stuck 
on something, and you feel like I can't do this,  
45:29 - or why can't I just get it, and you start to say 
all of these negative things to yourself, you can  
45:35 - look back and say, Wait, I have come so far and 
learned so much. This is just a small bump in the  
45:41 - road. And whether I figured this out right now, 
or later on, it doesn't matter, I'm still going to  
45:47 - make it to my destination. Always think of it this 
way study as if your job depended on it, which it  
45:54 - does. You know how much you study is going to 
determine how well you'll be able to break into  
45:59 - the field, the industry. And if you're already 
in the industry, how much you study, or how much  
46:04 - you learn in general is going to determine, you 
know how fast you go from a junior to a senior.  
46:09 - So as an engineer, you're going to be constantly 
studying and learning. Try to do a little bit each  
46:14 - day if you're struggling, you know, use Pomodoro 
or something like that. Join studying communities,  
46:19 - there's a lot of them online, go to coffee shops, 
go to libraries, wherever it is that it motivates  
46:24 - you to study go there. But in general, just 
try to do a little bit each day and you know,  
46:28 - make a routine out of it. And that's really all 
you need is just build a system that keeps pushing  
46:33 - you forward. In programming, there is never an end 
to learning. There's always something new to learn  
46:39 - about. So don't get overwhelmed. Take breaks 
from studying or just reading about something  
46:45 - by building something with the technology that 
you're studying about. You're going to learn  
46:49 - so much faster, and it's going to make it more 
interesting. Also study things that motivate  
46:54 - you. If you're not interested in something, 
then it's going to make it so much harder  
46:58 - to learn about it. Now, I think the most important 
thing when you're studying is to find something  
47:02 - you are genuinely interested in. So for example, 
if you are currently learning JavaScript and  
47:06 - you're just not into making to do lists, there are 
plenty of other things to build out there. If you  
47:11 - want to build a game then definitely find that or 
if you want to build a website that is cool too.