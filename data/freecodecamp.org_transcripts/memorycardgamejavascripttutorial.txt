00:00 - hello everybody welcome to the tutorial
00:02 - which is a memory card game built in
00:04 - pure javascript
00:06 - so to follow this tutorial you don't
00:08 - have to know a lot
00:09 - just the basics of html css and js
00:14 - like
00:15 - basic tags
00:17 - basic css selectors and what's a
00:20 - function
00:24 - you can find the files for each video at
00:27 - github.com
00:28 - code sketch
00:30 - in a written tutorial
00:32 - in the game demo
00:34 - at marina slash vegeta dot github dot io
00:38 - so if you get lost along the way please
00:41 - refer to those ok
00:44 - let's get started
00:56 - we are going to start with the basic
00:58 - file structure so in our terminal let's
01:01 - make a directory called memory game
01:04 - let's change directory into that new
01:07 - directory to create the files we are
01:09 - going to touch index.html
01:13 - styles.css and scripts.js
01:17 - we are also going to make a directory
01:19 - called mig for our images
01:22 - so in the editor
01:24 - let's open our index.html
01:32 - and declare our file
01:34 - as an html5 document with doctype
01:40 - the root tag let's specify the language
01:42 - as english
01:49 - and inside the head tag let's set our
01:52 - character encoding to utf-8
01:55 - set the title to memory game
01:58 - and link the stylesheet
02:07 - and inside our body tag we are going to
02:10 - add this script
02:16 - in styles.css we are going to add a
02:19 - reset to all items by setting padding to
02:23 - 0 margin to 0 and box sizing to border
02:27 - box
02:31 - the box sizing property handles how
02:33 - padding and border will be added to an
02:35 - element
02:37 - the default value for box sizing is
02:39 - content box which means that any border
02:42 - or padding applied to the element will
02:44 - add to its total width and height
02:47 - the other option is border box which
02:49 - adds padding and border to the element
02:51 - without changing its dimensions so it
02:54 - shrinks the available space for the
02:55 - content keeping its original size
03:00 - one thing to keep in mind
03:02 - box sizing does not apply to margin okay
03:05 - either option you choose margin will
03:08 - never be accounted as elements
03:10 - dimensions
03:12 - let's set the body height to 100 ph
03:16 - so vh stands for viewport height
03:20 - and viewport is the visible area of your
03:23 - web page
03:24 - so
03:26 - the unit vh corresponds to 1
03:29 - of the viewport height
03:32 - by setting it to 100
03:34 - our body will take 100 percent of the
03:37 - available height space
03:41 - and finally let's add the background
03:43 - color
03:59 - our board will be composed of a
04:01 - container div called memory game and by
04:03 - 12 cards
04:06 - each card consists of a memory card div
04:09 - that holds two images one representing
04:12 - the cards back face
04:15 - and the other representing its front
04:17 - face
04:23 - so back in the editor let's make that
04:25 - into html
04:37 - to download the images please visit the
04:39 - project repo at github
05:04 - so now that we have added all the
05:06 - elements
05:07 - let's also add a temporary width of 100
05:10 - pixels to all images so we can have a
05:13 - better idea of what's going on
05:35 - in styles.css we are going to be styling
05:38 - our memory game game container
05:42 - and the memory card front face and
05:44 - backface elements
05:46 - so let's add a border to each one of
05:48 - them so you can better visualize them
05:56 - let's remove that temporary image width
05:59 - and let's add a 640 pixel width and
06:02 - height to our container
06:20 - let's also set display to flex
06:25 - so
06:26 - what's going on here is that when we
06:29 - apply display flags to a container
06:32 - we kind of get some other properties set
06:34 - for us by default
06:37 - so what those properties tell our items
06:40 - is each one of you will take the same
06:43 - amount of space in the screen
06:45 - into the container it says
06:49 - your items should be laid out in a row
06:51 - and just one row
06:54 - and they're going to be positioned from
06:55 - left to right and they will be stretched
06:58 - out across the container's height
07:04 - our board has three rows four cards each
07:08 - so let's apply to the memory card a 25
07:12 - width and a 33.33
07:15 - percent height
07:20 - well we can see that the height is being
07:23 - correctly applied but the width is not
07:26 - so remember when i said that we had some
07:29 - default properties in the flex container
07:32 - one of them is flex wrap which is set to
07:36 - no wrap and is preventing the items from
07:38 - being laid out across multiple rows
07:42 - so let's reset it to wrap
07:46 - now we have to position the front face
07:48 - and the back face on top of each other
07:50 - so let's add a position absolute to them
07:55 - and uh
07:56 - well
07:58 - this is not what we wanted at all
08:02 - so let's take a closer look here
08:06 - when you add position absolute to an
08:08 - element the element has to find out
08:11 - relative to what am i going to position
08:13 - myself
08:14 - it doesn't know so it asks its parent
08:17 - in
08:18 - which in this case is box three
08:22 - so he goes box three are you positioned
08:26 - and an element is only positioned to the
08:29 - screen if it has a position relative set
08:33 - box 3 does not have that so it answers
08:35 - no i'm not positioned
08:37 - the element then goes okay not a problem
08:40 - i'm gonna ask your parent
08:42 - box two are you positioned box two is
08:45 - gonna go no i'm not positioned okay i'll
08:48 - ask your parent
08:49 - box one are you positioned boxland's
08:51 - gonna go no i'm not then the element
08:54 - says since none of you is positioned i'm
08:58 - gonna position myself relative to the
09:00 - body
09:01 - and this is why right now the element is
09:04 - sitting at the top left corner
09:09 - if we apply position relative to box one
09:12 - when the element asks box one are you
09:15 - positioned box one box one is gonna go
09:18 - yes i am positioned the element says ku
09:21 - then i'm going to position myself
09:23 - relative to u
09:24 - and the same goes if we apply position
09:27 - relative to box 2 and 3
09:30 - which means that
09:32 - an element with position absolute
09:34 - positions itself
09:36 - relative to the nearest positioned
09:38 - ancestor
09:41 - back in our template what's going on
09:43 - here is that since none of our elements
09:46 - are positioned to the screen front face
09:48 - and back face are positioning themselves
09:51 - relative to the body and we want them to
09:53 - be positioned relative to the memory
09:56 - card so let's add a position relative to
09:58 - it
10:04 - let's make the images take the whole
10:06 - width and height
10:08 - of its container
10:10 - and let's also apply some padding border
10:13 - radius and background color
10:21 - let's remove the borders
10:23 - and apply a 5 pixel margin to our memory
10:25 - card
10:36 - the layout has broken because the margin
10:39 - makes our cards overflow the available
10:41 - space
10:42 - okay
10:43 - so
10:44 - on calculating our width and height we
10:46 - have to take that margin under
10:48 - consideration
10:50 - the css calc function allows us to
10:53 - subtract the merging value from the
10:55 - width and height so let's apply that
11:02 - for centering the memory game container
11:04 - we're gonna apply a display flex to the
11:07 - body
11:09 - and margin auto to the memory game and
11:12 - that's gonna center it vertically and
11:14 - horizontally
11:34 - let's add a click effect to the memory
11:35 - card
11:37 - so the active pseudo class is going to
11:40 - be triggered whenever an element gets
11:43 - clicked
11:45 - so we're going to apply a transform
11:46 - scale
11:48 - of
11:49 - 97
11:51 - of its original size
12:01 - let's make that a bit smoother
12:06 - by applying a transition to it
12:14 - and for that transition to work we have
12:16 - to have a
12:18 - starting place
12:20 - so let's apply trans transforms ko1 to
12:23 - the memory card
12:30 - there's a typo here
12:36 - and there you go
12:45 - so now let's make the card flip when we
12:48 - click it
12:49 - the first thing you have to do is to
12:51 - make a list of all memory card elements
12:53 - and store it inside a constant named
12:56 - cards
12:58 - to do that we are going to use
13:00 - document.carry selector all
13:03 - passing the memory card class
13:08 - so then we're gonna loop through that
13:10 - list
13:12 - and to each
13:13 - one of the cards we're gonna attach an
13:15 - event listener
13:17 - we are going to listen for a click event
13:21 - and whenever that event is fired
13:23 - we are going to execute a function named
13:26 - flip card
13:31 - let's declare the flip card function
13:40 - and let's log a message
13:43 - to see if it's working
13:46 - and let's also see what's inside this
13:49 - keyword okay because this value is
13:52 - dynamically set according to the context
13:54 - so let's see in this context
13:57 - what our this keyword represents
14:11 - so you can see our function is being
14:13 - called
14:16 - and inside this variable we can see that
14:20 - we have our memory card
14:22 - so
14:23 - in this context
14:25 - that this keyword represents
14:27 - the element that fired the event
14:30 - okay
14:32 - so what we want here
14:34 - is to um i access the class list
14:38 - of the memory card
14:40 - and to toggle the flip class
14:43 - what toggle means is
14:45 - if the class is there remove it if it's
14:48 - not edit
14:50 - okay so let's navigate to our
14:53 - elements tab
14:59 - and we can see that it's toggling the
15:01 - class
15:08 - so back in styles.css let's set that
15:11 - flip class
15:13 - so we want to select the memory card
15:16 - element that also has a flip class
15:19 - remember that there's no space between
15:21 - the names because
15:23 - the two classes belong to the same
15:25 - element okay
15:27 - so when the flip class is present we are
15:30 - going to rotate
15:32 - the y-axis 180 degrees
15:58 - let's add the 3d effect to the card
16:00 - flipping
16:02 - so the perspective property is what's
16:04 - going to give some depth to our elements
16:06 - okay
16:07 - so we're gonna add a 1000 pixel
16:10 - perspective to the memory game container
16:12 - and also a property that's called
16:15 - transform style preserve 3d to the
16:18 - memory card because that's what's going
16:20 - to insert our memory card element inside
16:23 - the 3d space we just created in the
16:26 - memory game container because otherwise
16:28 - the memory card is gonna
16:30 - keep being flat sitting on the 2d plane
16:36 - so back in the editor let's add those
16:37 - properties
16:39 - 1000 pixel perspective to memory gain
16:43 - and transform style preserved 3d
16:46 - to the memory card
16:55 - we still don't see the 3d effect because
16:57 - we have to add a transition to the
16:59 - transform property
17:11 - and there we have it the 3d effect
17:14 - well when we flip the card we should be
17:16 - seeing the front face right
17:19 - and right now what we are seeing is the
17:21 - inverted js badge
17:24 - that happens because every html element
17:26 - has a back face
17:28 - which is a mirrored image of itself
17:31 - okay there's also a property called
17:33 - backface visibility that defaults to
17:36 - visible and this is why we are seeing
17:38 - the inverted badge so the first thing
17:40 - you have to do is to hide the back face
17:56 - and now that's hidden we have to rotate
17:58 - the front face 180 degrees in the y-axis
18:02 - so we can see it
18:33 - so when the player clicks a card we have
18:35 - to know if it's the first
18:37 - or the second card that he clicks so we
18:40 - can perform the matching logic okay
18:44 - so let's declare a variable called has
18:46 - flipped card and set it to false and
18:49 - also declare a first and first card and
18:52 - second card variables
18:55 - uh let's update here toggle to add
18:58 - and we are gonna add a condition okay so
19:02 - if has flipped card is false
19:05 - this means this is the first time
19:08 - the player has clicked a card
19:11 - so then we're gonna set has flipped card
19:14 - to true
19:15 - and we are gonna set the first card to
19:18 - the this keyword remember that this the
19:21 - element that has fired the event so in
19:24 - this case is our memory card
19:26 - so let's console log both variables
19:42 - so we can see
19:44 - we have the card we clicked
19:46 - and has flipped card is now true
19:50 - and when we click again on other cards
19:53 - it does not enter the condition because
19:56 - has flipped card is now true
20:03 - so if has flipped card is set to false
20:07 - it means the player is clicking
20:09 - at the first card
20:11 - if it is set to true it means the player
20:15 - is clicking in the second card and it's
20:17 - gonna fall inside the else clause so
20:20 - we're gonna set has flipped card back to
20:23 - false and we are gonna set
20:26 - the second card variable to this
20:29 - and let's console log those
20:39 - okay so it fires only
20:42 - at the second click and we can see we
20:45 - have the both cards we just clicked
20:55 - so now that we have both cards we just
20:57 - clicked
20:58 - we have to check if those cards match
21:01 - and how we're going to do that so
21:04 - we are going to make use of a very handy
21:06 - attribute in html which is the data
21:09 - attribute
21:12 - with that you can add to your elements
21:14 - any kind of information you want okay
21:19 - you can call it also whatever you want
21:21 - you can call it data name you can call
21:24 - it data image
21:25 - we're gonna call it data framework and
21:28 - pass the name of the framework the
21:30 - elements holding
21:32 - so let's add that to
21:34 - every one of our memory cards
22:02 - in order to access
22:05 - the data attribute that you defined in
22:07 - your html
22:09 - we do this through the data set object
22:12 - okay so
22:14 - it goes your
22:15 - element.dataset.the name you have chosen
22:42 - now that we can identify our cards
22:45 - we have to check if
22:47 - the dataset.framework
22:49 - from the first card and the second card
22:51 - are the same
22:53 - if they are we are gonna remove the
22:55 - event listener
22:57 - from the cards to prevent uh them from
22:59 - being clicked again
23:01 - and if it's not
23:03 - we are gonna then unflip the cards back
23:05 - to the original state okay
23:10 - so
23:11 - let's add the condition
23:15 - and if it's a match
23:17 - we disable
23:18 - the event listener with remove event
23:21 - listener
23:23 - so it works you have to add the event
23:26 - and the function you called
23:31 - to make sure they have been
23:33 - removed let's add a
23:35 - log message here
23:41 - all right
23:42 - they were correctly executed and then
23:46 - when we click again
23:48 - it won't fire because it's not going to
23:50 - the function anymore
24:00 - and then if it's not a match
24:02 - we'll unflip the cards
24:06 - to do that we are going to remove the
24:08 - flip class from the card
24:27 - okay so the second card hasn't turned so
24:30 - when we clicked the card it has
24:33 - immediately removed the flip class so we
24:36 - don't even we cannot even see it being
24:39 - flipped
24:40 - what we have to do is to add a set
24:43 - timeout with a 1500 second
24:46 - delay so there's enough time available
24:50 - for us to see the flipping
25:17 - right now we have a bunch of nested
25:19 - conditions inside our code
25:22 - and that makes our method very hard to
25:24 - read so
25:26 - let's make some refactoring here
25:29 - and first of all we're gonna extract the
25:31 - matching logic to its own own method and
25:34 - we are gonna call it check for match
25:47 - the code inside the e files blocks are
25:50 - also going to be extracted to their own
25:52 - methods
25:53 - in case it is a match we're gonna call
25:55 - disable cards and in case it's not we're
25:58 - gonna call unflip cards
26:07 - now that we have just one statement
26:09 - being executed inside our if else block
26:13 - there's an even shorter way we can write
26:16 - this by using a ternary operator
26:19 - so
26:20 - a ternary operator has three blocks
26:23 - the first one we place our condition
26:26 - the second one is the statement to be
26:28 - executed if the condition evaluates to
26:31 - true and the third one
26:33 - if the condition evaluates to false
26:36 - all right
26:37 - so a ternary operator allows you to
26:39 - write a knee false block in just one
26:41 - line
26:49 - and up here
26:50 - we can switch the else clause for a
26:54 - return statement in the end of our if
26:57 - because if the condition evaluates to
26:59 - true
26:59 - the return statement is gonna stop the
27:02 - function execution there
27:04 - and in case it's not true
27:07 - the code executed it's the one that
27:09 - would be inside the house clause
27:11 - so this makes the condition a bit
27:12 - cleaner
27:32 - right now our game's a bit buggy because
27:35 - there are some corner cases we have to
27:36 - take care of
27:38 - one of them is if we try to flip a
27:42 - second set of cards before the first set
27:45 - have finished unflipping then that
27:48 - crashes our logic
27:50 - so
27:51 - in case it's not a match we have to lock
27:53 - the board
27:54 - and wait until the cards finish
27:56 - unflipping
27:58 - so let's declare a lock board variable
28:01 - and set it to false
28:03 - and the first statements are inside our
28:05 - flip card function will be to return
28:08 - from the function if logboard is true
28:12 - so the rest won't get executed
28:15 - in case is not a match we are going to
28:17 - lock the board
28:21 - and only unlock it after cards have been
28:24 - flipped
28:58 - the second corner case we have to pay
29:00 - attention to
29:01 - is if we click twice over the same card
29:04 - because in that case is a match is gonna
29:06 - evaluate to true and is gonna disable
29:08 - the cards by removing its event listener
29:11 - so the card is going to remain flipped
29:14 - we have to add a condition to the
29:16 - beginning of our flip card function to
29:18 - avoid that
29:21 - so if it is the first card click
29:23 - then that this variable holds the first
29:25 - card
29:27 - but the first card variable is still on
29:29 - set so that condition is going to
29:32 - evaluate to false and the function will
29:34 - be executed normally
29:36 - if it is the second card click
29:39 - then the this variable holds the second
29:40 - card and in case that equals first card
29:44 - then it will return from the function
29:50 - in order for a condition to work
29:53 - after each round we have to set first
29:56 - card and second card to no
29:58 - so let's extract that to
30:00 - to a method of its own called reset
30:03 - board
30:05 - and uh there we're gonna set has flipped
30:08 - card and lock board to false
30:12 - and first and second card to null
30:16 - and we can do this using the es6
30:19 - destructuring assignment which keeps our
30:22 - code very very short
31:10 - the last thing left for us to do in our
31:12 - game is to shuffle our cards
31:15 - we are going to do this with the flexbox
31:17 - property called order
31:20 - that's a flex items property and it
31:22 - defaults to 0 which means that every
31:25 - flex item belongs to the same group and
31:28 - then they will be grouped by source
31:30 - order if you assign a different integer
31:34 - to the order property items will get
31:37 - ordered
31:38 - first by ascending order according to
31:41 - the value in the order property and then
31:44 - they will get ordered by source order
31:47 - so to shuffle our deck of cards we are
31:50 - going to generate a random number
31:52 - between 0 and 11 and assigned to each
31:54 - one of our cards
32:05 - let's start iterating through our deck
32:07 - of cards
32:11 - and to generate our random number we are
32:13 - going to use the
32:15 - math.random function
32:17 - which returns us a random number between
32:20 - 0 and 1 excluding 1.
32:24 - since we want a number that goes from 0
32:28 - to 11 we are going to multiply that
32:30 - number by 12.
32:33 - and since
32:34 - the order property needs an integer
32:37 - we have to apply math.floor
32:40 - in order to get that
32:44 - so now that we have our random number we
32:46 - can apply it to the order property
33:06 - we need our deck of cards to be shuffled
33:09 - before
33:10 - the player starts the game
33:13 - so instead of calling the shuffle
33:15 - function as we normally would
33:17 - let's wrap it inside a parenthesis and
33:20 - add an extra pair of parentheses to the
33:23 - end of it
33:24 - and that makes that function into an
33:27 - immediately invoked function expression
33:30 - which means that
33:31 - that function will be executed right
33:34 - after its definition
33:45 - and that's it for our memory game
33:47 - tutorial i hope you have enjoyed it
33:50 - please subscribe to the channel so you
33:51 - get our updates okay
33:54 - see ya
34:15 - you