00:00 - this beginner's course will help you
00:01 - learn html and css by building a real
00:05 - world project
00:06 - madison connor teaches this course
00:08 - she's an experienced front-end engineer
00:11 - she is excellent at breaking down things
00:13 - for beginners and explaining the
00:14 - fundamentals of web development
00:17 - hey everyone i'm madison and today we're
00:20 - going to learn html and css by building
00:23 - an order summary component
00:25 - this course is for complete beginners if
00:28 - you don't know any html or css then this
00:31 - course is for you
00:33 - this course is also for you if you do
00:35 - know some html and css but you want to
00:38 - cement your understanding of them by
00:40 - building something
00:42 - by the end of this course you will have
00:44 - a professionally designed project that
00:46 - you can use in your developer portfolio
00:50 - before i got my dream job working as a
00:52 - software developer which is what i do
00:53 - now
00:54 - i actually taught myself how to code
00:56 - using free code camp so i'm really
00:59 - excited to be here with you today
01:01 - building this
01:02 - let's just dive in and get started
01:05 - the order summary component is a
01:07 - challenge from front-end mentor
01:09 - in case you aren't familiar with
01:10 - front-end mentor we'll talk for a second
01:12 - about what it is
01:14 - if you're already pretty familiar with
01:16 - front-end mentor you can just skip over
01:18 - this section
01:19 - front-end mentor is a place where you
01:21 - can improve your coding skills by
01:23 - building professionally designed
01:24 - projects many of their projects are
01:27 - completely free and today you won't be
01:30 - paying anything as we build this
01:32 - challenge
01:33 - the main reason why i love front-end
01:35 - mentor is that you can build coding
01:36 - projects using professional designs
01:39 - each challenge on the site comes with
01:41 - starter files where you can see desktop
01:43 - and mobile designs of the app you're
01:45 - going to build
01:47 - today we're going to build this order
01:48 - summary component that we see here
01:50 - the first thing you need to do is sign
01:52 - up for a free account on front end
01:54 - mentor and start this challenge again
01:57 - you won't be paying anything in this
01:58 - course if you haven't already go ahead
02:01 - and go to frontendmentor.io
02:03 - and sign up for your free account
02:06 - next let's actually go to our project
02:09 - here's our order summary component
02:11 - before we talk about what an order
02:13 - summary component is
02:15 - i want to talk a little bit about how
02:17 - websites work and how we use html and
02:20 - css to build websites
02:23 - let's talk a little bit more about how
02:25 - websites work
02:27 - right now you're likely using a web
02:28 - browser so maybe you're using firefox or
02:31 - chrome or safari
02:34 - as an aside in this course i'm going to
02:36 - use google chrome
02:38 - and you can use whatever web browser
02:40 - you'd like but i suggest you use google
02:42 - chrome so you can follow along the
02:44 - course as closely as possible
02:46 - okay you're using your web browser and
02:49 - your browser's job is to interpret html
02:52 - and css files
02:53 - into a website that can be displayed for
02:56 - visitors
02:57 - every website that you go on today has
02:59 - html and css
03:02 - today we'll write html and css
03:05 - we'll put that html and css into files
03:08 - and then the browser will interpret this
03:11 - html and css and display our site to us
03:15 - all websites have files
03:17 - these are html css and javascript files
03:21 - as well as other files like images that
03:23 - you see on the web
03:25 - all of these files will determine how
03:27 - your website will look and act
03:31 - another part of websites is the server
03:35 - the server stores all the files on a
03:37 - website
03:39 - you can think of a server as just a
03:41 - computer that's connected to the
03:42 - internet and the server sends web files
03:46 - to the browser
03:48 - these are two core pieces of websites
03:51 - the server and the browser the browser
03:54 - can also be called the client
03:56 - when you build websites you might be
03:58 - called a web developer but there are
04:00 - also these terms called frontend and
04:02 - backend developer let's talk real
04:04 - quickly about what these mean and how
04:06 - they relate to the client and the server
04:09 - backend developers focus on the side of
04:11 - a website that users usually can't see
04:14 - the server side
04:16 - meanwhile front-end developers focus on
04:19 - the visual elements of a website or app
04:22 - that a user interacts with in other
04:24 - words the client side
04:26 - front-end developers work with html css
04:29 - and javascript among other tools to
04:31 - build the front-ends of websites
04:34 - these are the fundamentals of how a
04:35 - website works
04:37 - let's talk a bit more about html
04:41 - html is the foundation of all websites
04:44 - html allows your websites to display
04:47 - text images videos like anything you see
04:50 - on websites today
04:52 - front-end developers such as me use html
04:55 - and css to make websites look good
04:58 - we also use other things such as
05:00 - javascript and other tools and
05:02 - frameworks but that's a bit beyond the
05:04 - scope of this course
05:06 - html is the foundation of all websites
05:09 - html allows your website to display text
05:13 - images videos
05:15 - anything you see on websites today
05:18 - html alone might look ugly
05:20 - but that's where css comes in
05:23 - css styles your html
05:27 - in other words css makes your web page
05:29 - look nice
05:30 - front-end developers like me use html
05:33 - and css to make websites look good
05:37 - now that we know some about how websites
05:40 - work and how we use html and css to
05:43 - build websites
05:44 - let's go back and look at our order
05:46 - summary component
05:49 - your next question might be
05:50 - what is an order summary component
05:54 - think about anything you buy on the
05:56 - internet
05:57 - chances are you landed on a page
05:59 - and you bought something
06:01 - and then you saw an order summary
06:04 - maybe you bought a movie on youtube or
06:07 - you bought an online coding course from
06:09 - udemy
06:10 - or maybe you bought a subscription to
06:12 - spotify
06:14 - usually you will see an order summary
06:16 - that tells you either like what you're
06:18 - about to buy or
06:20 - what you bought already so it's just a
06:22 - summary of your order and it might show
06:25 - how much money you're spending and
06:26 - things like that
06:28 - for everything you buy on the internet
06:30 - it's likely there is a web developer
06:32 - using html and css to build and style
06:36 - that order summary page that you were on
06:39 - now this project
06:41 - is not just called an order summary it's
06:43 - actually called an order summary
06:44 - component
06:46 - you might be wondering like what is a
06:48 - component
06:49 - a component can mean different things
06:51 - for example
06:52 - like a component in react can mean
06:54 - something different than
06:56 - a component in a different library or
06:58 - framework
06:59 - however for our purposes here today we
07:02 - call this an order summary component
07:04 - because it's creating a piece of
07:06 - something
07:08 - a component in other words is a building
07:10 - block
07:11 - when a user goes and they see this
07:14 - component
07:15 - they might see this data here that tells
07:17 - them what plan they've bought
07:19 - but this data could change depending on
07:22 - the user
07:23 - what doesn't change is this component
07:25 - that will always render the same view
07:27 - and the same html the data on the other
07:30 - hand will be different
07:32 - so this component could be used several
07:34 - different times
07:36 - if we look at this design
07:38 - this kind of purple color in the
07:40 - background this is the page so maybe
07:42 - it's the web page that you're on after
07:44 - you've purchased something and then this
07:47 - looks like kind of a card and this is
07:49 - our component itself here
07:51 - an order summary component is absolutely
07:54 - something that you might build when you
07:56 - start working as a developer so you can
07:58 - add this project to your portfolio by
08:00 - the end of this course
08:02 - if you want to have an extra challenge i
08:05 - would say
08:06 - pause this video now and try to build
08:08 - the order summary component completely
08:10 - on your own
08:12 - if you get stuck you can just come back
08:14 - to this video and see how i wrote my
08:16 - code
08:18 - if you do this route
08:20 - your code might look different than mine
08:22 - but that doesn't mean
08:23 - there's anything wrong or bad about your
08:25 - code
08:26 - there are some best practices when it
08:28 - comes to coding and there is some code
08:31 - that is cleaner and more efficient than
08:33 - other pieces of code but there's also
08:35 - just different code writing styles so
08:37 - just because your code looks different
08:39 - than mine doesn't necessarily mean one
08:41 - piece of code is better than the other
08:44 - okay so let's look a little bit more at
08:46 - this challenge let's just exit out of
08:48 - here
08:49 - now let's go down to this brief section
08:52 - now here we can see our challenge is to
08:54 - build this order summary card and get it
08:56 - as close to looking like the design as
08:58 - possible
09:00 - this says our user should be able to see
09:02 - interactive states
09:04 - interactive states are for example
09:06 - when you hover your mouse over a button
09:08 - the button might light up or the button
09:10 - might change color
09:12 - we can also see here that we have this
09:15 - amazing slot community if you get stuck
09:17 - at any point in this tutorial you can
09:19 - join this free spot group and get help
09:23 - if you get stuck you can also look at my
09:25 - completed solution
09:26 - or you can look at all of the other
09:28 - solutions for this challenge that have
09:30 - been posted here on front-end mentor
09:33 - okay let's scroll back up and we'll hit
09:35 - visit challenge hub
09:37 - now mine says i've already started the
09:39 - challenge
09:40 - if you haven't started the challenge yet
09:42 - then you might see a slightly different
09:44 - screen
09:45 - but this view should look pretty similar
09:47 - for you here
09:48 - okay so next we want to hit download
09:50 - starter files
09:52 - next we see this step 2 which says
09:55 - download design files
09:57 - we are using a free membership so we
10:00 - don't have access to the design file
10:03 - but let me explain what this is if you
10:05 - don't know
10:06 - when you start working as a developer
10:09 - you will often be given designs from
10:11 - your designer at your company and these
10:14 - will essentially be pictures of how the
10:16 - application you are building is supposed
10:18 - to look
10:19 - figma and sketch are really commonly
10:21 - used tools that you can use to see the
10:24 - designs of the application that your
10:26 - designer gave you
10:28 - as a quick example we can go to the
10:30 - sigma ui design tutorial on free code
10:33 - camp
10:35 - next we can scroll down and we can see
10:37 - what the figma app looks like
10:39 - okay so say you're working as a software
10:41 - developer and the designer at your
10:43 - company they gave you this design and
10:46 - they said this is what this part of the
10:48 - app looks like
10:50 - you as the developer would go open up
10:52 - your figma app and you can click on
10:55 - things such as this new arrival text and
10:58 - when you click on it you'll be able to
10:59 - see
11:00 - the exact font color used
11:03 - you'll also be able to see other things
11:05 - that will help you build the app and
11:07 - help you make the app look as close to
11:09 - design as possible
11:12 - if we go back to our order summary
11:13 - component challenge
11:15 - we don't have our design files in figma
11:18 - because we're using a free account
11:20 - but that's actually okay because we're
11:22 - essentially going to eyeball it
11:25 - we're going to look at the pictures that
11:27 - were given in this download starter
11:29 - files kit
11:30 - and we're going to kind of guess what
11:32 - colors we'll use and this is going to
11:33 - work out really well for us
11:36 - i wanted to explain what figma was real
11:38 - quick in case you weren't familiar with
11:41 - design tools like sigma or sketch and i
11:44 - also wanted to explain it because when i
11:46 - was learning how to code i didn't know
11:49 - about tools like figma and sketch and i
11:52 - always wondered like how exactly does
11:54 - the developer turn a design into code
11:58 - okay so let's get to building we already
12:00 - hit download starter files so let's open
12:03 - these starter files in our text editor
12:06 - the next thing i've done is i've opened
12:08 - up my downloads folder and i found the
12:11 - starter files folder
12:13 - this says main three because i've
12:15 - already downloaded this a few times so
12:17 - yours might just say order summary
12:19 - component main
12:21 - let's actually grab this and we're going
12:23 - to drag it down
12:24 - into our vs code down here
12:28 - when we dragged our download starter kit
12:30 - folder into our text editor it opened up
12:34 - our text editor as we can see here
12:36 - okay so it might feel like a lot just
12:38 - happened let's pause for a second
12:41 - if you're not familiar with a text
12:43 - editor yet a text editor is where you'll
12:46 - write your code
12:48 - if you think about writing
12:50 - maybe when you go write a blog post you
12:52 - use notion or maybe you use google
12:55 - documents to write an essay for class
12:58 - in google docs you write words
13:00 - when you're writing code developers use
13:02 - something called text editors
13:06 - i use vs code which is pretty popular
13:09 - but you can use any text editor that you
13:11 - like
13:12 - if you're looking right now at my text
13:14 - editor you might see a bunch of things
13:16 - and you just have no idea what they are
13:19 - and that is totally okay
13:21 - there are a lot of features inside of a
13:23 - text editor and you don't need to know
13:26 - all of them or even most of them right
13:28 - now
13:29 - let's expand
13:32 - this i'm going to make my screen a bit
13:35 - bigger
13:38 - okay now we're in our starter files
13:40 - let's briefly go over what our starter
13:41 - files include
13:43 - first we see this design folder
13:47 - and here we simply have different
13:48 - pictures of what our app or our
13:50 - component will look like
13:53 - and again if you work as a developer you
13:56 - will usually be given designs by your
13:58 - designer in a tool like figma or sketch
14:01 - but for today we will be looking at
14:03 - these pictures to reference as we build
14:05 - our app
14:07 - as a side note throughout the course i'm
14:09 - going to call what we're building either
14:11 - an app or a component
14:13 - and sometimes i might just call this a
14:15 - card because it kind of looks like a
14:17 - card
14:18 - just wanted to note that in case you get
14:21 - confused later on when i'm saying card
14:23 - or app or component i'm really just
14:25 - referring to this project that we're
14:26 - building
14:28 - okay so we see that we have our order
14:30 - summary component and then we also see
14:33 - this thing called active states
14:35 - now this is the view or the design of
14:38 - what our card will look like when we're
14:40 - in an active state in other words when
14:43 - you hover over the card with your mouse
14:46 - you might have this experience when
14:48 - you're on websites and there is some
14:50 - interactivity you go and you're about to
14:53 - click a button you're hovering over the
14:55 - button and maybe the button looks like
14:57 - it bounces or it changes color or
15:00 - something like that
15:01 - now these are considered to be active
15:03 - states
15:04 - we also have mobile and desktop designs
15:07 - and these designs tell us like what the
15:10 - card should look like when you're on
15:12 - your phone versus when you're on your
15:14 - computer
15:15 - for our purposes today we're just going
15:17 - to focus on building the desktop view
15:21 - if you like as an extra challenge when
15:23 - you're finished with this course you can
15:24 - work on building the mobile view that's
15:27 - when you'll learn about things called
15:28 - media queries
15:30 - okay so moving on
15:32 - we also have this folder of images and
15:34 - this is just going to be all the images
15:36 - that we use in our app
15:39 - earlier i noted that web files are html
15:42 - files but they can also be other files
15:44 - such as images
15:46 - so we'll be putting these into our app
15:49 - now this is a bit beyond the scope of
15:50 - the course but the next file we have is
15:52 - this git ignore this is if you're using
15:55 - git and github to commit your code and
15:58 - then put it on github
16:00 - if you're going to commit your code and
16:02 - put it on github then this file just
16:04 - says what files should github ignore
16:08 - that is if you committed this whole
16:10 - folder to github right now
16:12 - then anything specified in this file
16:15 - would not get committed or in other
16:17 - words it would not get included next
16:20 - let's go to this index.html file right
16:22 - here
16:24 - in this index.html file
16:26 - we have a html setup as well as the
16:29 - information we need to build our cart or
16:31 - our app
16:33 - and we actually could start coding in
16:35 - this file but we're going to create a
16:37 - new folder to build our app we're going
16:40 - to create a new folder to build our app
16:42 - because i want us to build this app
16:44 - completely from scratch
16:47 - next up we have a few readmes
16:49 - now these are all really just telling us
16:51 - about the project and how you can
16:53 - complete this challenge
16:55 - lastly we have our style guide and this
16:58 - is going to show us the font colors and
17:00 - the font family that we need for our
17:02 - application
17:04 - this is going to help us style our
17:06 - project so that it looks as close to the
17:08 - designs as possible
17:10 - okay so like i said we're going to be
17:11 - building our project completely from
17:13 - scratch so we're going to leave this
17:15 - folder here and we'll reference it later
17:18 - next up we're going to open up our
17:20 - terminal and start building our project
17:24 - okay next i'll come over to my desktop
17:26 - and as a side note i'm on a macbook pro
17:30 - the next thing i'm going to do is come
17:32 - down here and click on my terminal so
17:34 - i'm going to click i term
17:38 - okay so this is opened and then i'm
17:40 - going to make it a little bit bigger so
17:42 - you can see it
17:43 - if you don't know what a terminal is yet
17:46 - a terminal is just a tool you can use to
17:49 - work with your computer
17:51 - you can type commands into your terminal
17:55 - terminals can seem really scary at first
17:57 - but they're not too bad once you learn a
17:59 - bit more about them
18:01 - okay
18:01 - next we're going to create a new
18:03 - repository for our order summary
18:05 - component
18:06 - a repository is just a place where all
18:09 - the code for this project will be stored
18:13 - repository is also just another name for
18:15 - a folder really
18:17 - if you want to you can put your
18:19 - repository on github
18:21 - github is a place where developers can
18:23 - share their code so other developers or
18:26 - really whoever can see it and read it
18:29 - again we won't go over github in this
18:31 - course but i would definitely recommend
18:33 - that you
18:34 - put the code from this course onto
18:36 - github and then you have that github
18:38 - link in your developer portfolio
18:41 - that way as a developer when you're
18:43 - showing off your developer portfolio
18:44 - others will be able to see the code that
18:46 - you wrote
18:48 - okay so next up we're going to use the
18:50 - command mkdir
18:52 - and this will create a new repository or
18:54 - a new folder and we're going to name it
18:56 - order summary component
19:01 - this creates this new repository with
19:03 - this name the next thing we want to do
19:05 - is we want to open up this order summary
19:08 - component repo that we just created
19:10 - and we want to open up this project
19:12 - inside of our text editor
19:15 - so this project is just an empty folder
19:17 - so far and we want to put files inside
19:20 - of that folder so we can add code to
19:22 - those files in other words we want to
19:24 - build our website
19:26 - so let's open up this order summary
19:29 - folder inside of our text editor
19:31 - we can do this by saying code
19:33 - order summary component
19:37 - and next we'll hit enter
19:39 - and as you can see this opens our order
19:41 - summary component folder inside of our
19:44 - text editor
19:45 - if you run this command that i just ran
19:47 - and it's not working for you
19:49 - then you can google openvs code from
19:52 - terminal on mac and there should be
19:54 - instructions on how to set that up
19:57 - if you're using a different computer or
19:59 - a different terminal or that's just not
20:01 - working you can also manually open vs
20:03 - code so you can go down here and click
20:06 - open and then you can go to file open
20:09 - and you can go find the repository that
20:11 - you just created
20:13 - okay next up let's expand this
20:16 - okay i just took a quick break and now
20:18 - i'm back and we're ready to start
20:20 - creating our files
20:22 - so here i'll right click and i'll hit
20:24 - new file and i'll write out index.html
20:28 - and i'll hit enter
20:29 - this is where we'll be writing our html
20:33 - earlier if you remember we talked about
20:35 - how
20:36 - websites are made up of web files such
20:38 - as html files javascript files and css
20:41 - files what we've done here is we've
20:43 - created our first html file which is
20:46 - really exciting
20:48 - i think in this moment you might feel
20:49 - like we're doing something really basic
20:51 - and you want to get to the advanced
20:53 - stuff
20:54 - but right now we're really learning the
20:56 - fundamentals and you will use these
20:58 - fundamentals throughout your career as a
21:00 - developer
21:02 - you might be wondering like why did we
21:04 - name this file index.html
21:07 - index.html is a special name that we can
21:10 - use and it will tell our browser that
21:12 - this is the home page of our app
21:15 - the index.html page is the default page
21:18 - on a website if no other page is
21:20 - specified
21:21 - this index.html file will be the file
21:24 - we'll view in our browser we're going to
21:26 - hit this button which will close that
21:29 - tab there so we have more space on our
21:31 - screen
21:32 - the next thing we're going to do is
21:33 - we're going to write out an exclamation
21:36 - point and then we're going to hit enter
21:39 - i'm also going to hit command plus which
21:41 - on my macbook will make the code a
21:43 - little bit bigger
21:46 - when we hit that exclamation point we
21:48 - just created some boilerplate code using
21:50 - emmett emit is a tool that's built right
21:52 - into vs code
21:54 - if you're using a different text editor
21:57 - you can just look at our finished code
21:58 - for the project that's linked below and
22:01 - you can grab this html boilerplate
22:04 - or you can pause the video and write out
22:06 - what you see here on the screen
22:09 - just make sure there aren't any typos
22:11 - otherwise some part of your app might
22:12 - not work
22:14 - okay so we have this html boilerplate
22:17 - but what is this code and what is it
22:19 - doing when developers say boilerplate
22:21 - code they mean pieces of code that are
22:24 - included in lots of places without any
22:26 - alteration
22:28 - in other words code that won't change
22:30 - and could be used for many projects
22:33 - this html boilerplate is just some code
22:35 - that provides a foundation for any
22:37 - website we built let's look at a bit
22:40 - more of this code
22:41 - here we have this title tag this is an
22:44 - html code tag that allows you to give
22:46 - your web page a title
22:49 - so we can switch this and we can say our
22:52 - title is order summary component
22:56 - and we can hit save
22:57 - if you notice that when i hit save my
22:59 - code jumped around a little bit and that
23:02 - is because i have an auto formatter on
23:05 - so every time i save my code gets
23:07 - formatted
23:08 - right now you probably don't have any
23:10 - auto formatting on
23:12 - but at some point you might be using it
23:14 - so now we've added this title to our
23:17 - site instead of document it now has the
23:19 - title of order summary component
23:21 - and instead of having to write out the
23:23 - title tag ourself we just use that
23:25 - exclamation point that automatically
23:27 - added the title tag as well as these
23:29 - other tags that we need we can also see
23:32 - that we have this html tag right here or
23:35 - in other words we see these words html
23:37 - and then we have these odd brackets side
23:39 - by side
23:41 - so this is an html tag
23:43 - this tag just tells the browser that
23:45 - everything inside of this tag is html
23:48 - we also see we have this meta tag
23:52 - so utf-8 is a kind of unicode we need to
23:55 - use encoding so we can translate the
23:57 - letters we use into bytes that computers
24:00 - use
24:01 - this might be a little bit confusing and
24:03 - you certainly won't need to know any
24:05 - more about bytes in this course
24:07 - the next thing you'll see here is
24:09 - another meta tag with this viewport
24:11 - value here
24:12 - this might look super confusing at first
24:14 - but essentially we need this for a
24:16 - responsive site
24:18 - a responsive site means a site that can
24:20 - work on all devices like your iphone or
24:22 - your tablet or your computer we want our
24:25 - app to look good on all of our different
24:27 - devices next we see we have this body
24:30 - tag here
24:32 - the body tag defines the document's body
24:35 - the body element contains all the
24:37 - contents of an html document such as
24:41 - headings paragraphs images hyperlinks
24:44 - tables lists and so on so in other words
24:47 - inside of our body tag all of our html
24:50 - will live here this is where it all goes
24:53 - let's actually write out some html
24:56 - we want to create our order summary
24:58 - component but first let's just write a
25:00 - hello world
25:03 - we're going to use a bold tag and we're
25:05 - going to say hello world
25:07 - and we're going to hit save
25:09 - again you'll see my auto formatter which
25:10 - is just pushing this tag over here
25:13 - kind of indenting the code and making it
25:15 - look nice
25:17 - okay so we'll talk more about what
25:18 - exactly this is doing in a moment
25:21 - but we want to next go and look at our
25:23 - app in our browser
25:25 - as a refresher we've created our html
25:28 - file
25:29 - inside of our order summary component
25:31 - repo
25:32 - we've added our boilerplate code this
25:35 - basic html setup here
25:38 - and then we've added this b tag with the
25:40 - words hello world now we want to load
25:43 - this in our browser
25:45 - as briefly mentioned earlier websites
25:47 - are usually made up of web files
25:49 - web files are usually html files css
25:51 - files and javascript files
25:54 - let's go to our browser chrome
25:56 - and let's open up this file
25:58 - okay so i've opened up my browser and i
26:00 - hit command o which opens this here and
26:04 - now i can see that my repository is
26:06 - already open here you might need to
26:08 - search inside of here to find your repo
26:11 - or in other words find your order
26:13 - summary component folder that we created
26:16 - next i'm going to click on index.html
26:18 - and hit open
26:21 - and now we've opened this up and we can
26:23 - see our hello worlds i'm going to hit
26:25 - command plus and make this much bigger
26:28 - so i'm just zooming into the screen here
26:30 - so here we can see that we've opened
26:31 - this file up in our browser we can see
26:34 - our app but this is just local to our
26:36 - own computer right
26:38 - this is not some url that is live on the
26:41 - internet uh you won't be able to send
26:43 - this to your friends as a link or
26:44 - anything like that in other words we are
26:46 - just viewing this index.html file
26:50 - locally on your computer but it has not
26:52 - been deployed to the internet
26:55 - we could deploy our application to the
26:57 - internet and that means we could go buy
26:59 - a domain like
27:01 - ordersummary.com and we could deploy our
27:04 - app so that anyone who visited
27:05 - ordersummary.com they could go to that
27:07 - link and see our app but for now we just
27:10 - have this locally on our own computer
27:13 - we just wrote this html that says hello
27:15 - world and i mentioned this thing called
27:17 - a b tag
27:19 - let's remove this b tag for just a
27:21 - moment
27:22 - so over here we're going to move this
27:24 - away
27:27 - and hit save
27:29 - now back in our browser we can see that
27:32 - this text hello world still looks
27:34 - exactly the same
27:36 - but if we go back to our app we can see
27:38 - that the b tag is gone
27:40 - the b tag is supposed to apply bold to
27:43 - these words uh and so we removed the b
27:45 - tag but we notice if we go back to our
27:49 - browser go back to our app
27:52 - etag looks like it's still there it
27:54 - looks like it's still getting applied
27:57 - and this is because we have not yet hit
27:59 - refresh on our app
28:01 - so we can hit command r or we can hit
28:03 - this button right here which will
28:06 - refresh our app
28:07 - so we need to refresh our browser so
28:10 - that it can see the new changes that
28:11 - were made
28:13 - every time we write new code or tweak
28:15 - our code over in our text editor we need
28:18 - to save that code and then come back to
28:20 - the browser and hit refresh if we want
28:23 - to see new changes that show up
28:25 - so if i hit command r now we can see
28:28 - that the bold tag is gone it seems silly
28:30 - to be hitting refresh every time you
28:32 - make a little change in your code and it
28:35 - is kind of cumbersome and slow to hit
28:37 - refresh every time
28:39 - many developers use tools that make an
28:41 - automatic refresh happen so that you
28:44 - don't have to
28:45 - manually refresh your page to see your
28:47 - new code changes
28:49 - however since we are basically just
28:51 - getting started and we don't have any
28:53 - fancy tools yet we're just going to be
28:56 - manually refreshing our page
28:58 - but if this drives you crazy don't worry
29:00 - it drives a lot of developers crazy and
29:03 - there's a lot of tools these days so
29:04 - that you don't have to manually refresh
29:06 - every time you write code that is
29:08 - different or new
29:10 - as i said once we have refreshed we can
29:12 - see that the bold we had before is gone
29:15 - now we just have this plain text that
29:16 - says hello worlds
29:18 - this text does look big but again that's
29:20 - only because i've zoomed in my screen a
29:22 - little bit if you zoom your screen back
29:24 - out this text will be pretty small
29:27 - here we just have this regular old text
29:29 - of hello world it's just some content
29:31 - here on the screen
29:33 - but when we added the bold tag we told
29:35 - our browser to display this text in bold
29:38 - we can start to see a little bit of why
29:40 - html is useful to us as developers
29:43 - back in our app let's add a h1 tag and
29:46 - we'll write our hello world inside of
29:48 - there and we'll hit save
29:50 - this h1 is an html heading tag html
29:54 - heading tags are used to format headings
29:57 - on your page in order of importance
30:00 - an h1 tag is much like the title on a
30:03 - cover of a book or the title on the
30:05 - front of a newspaper
30:07 - heading tags also have their own style
30:10 - so let's go back to our browser and see
30:12 - this style back in our browser if we hit
30:14 - refresh we can see our text got much
30:16 - bigger and more bold and this is the
30:18 - default style that's applied to h1 tags
30:22 - i've been talking a lot about html and
30:24 - these things called tags let's go over
30:26 - these html basics a bit more
30:29 - html is short for hypertext markup
30:32 - language
30:33 - no one really remembers what this stands
30:35 - for and it's really not that important
30:38 - what is important to know is that html
30:40 - isn't actually a programming language
30:43 - html is absolutely a
30:46 - valid language that programmers use
30:49 - however it is not a programming language
30:51 - it is actually a markup language
30:54 - what's the difference then between a
30:56 - markup language and a programming
30:57 - language
30:59 - programming languages like javascript
31:01 - use logic to control things on the page
31:04 - for example let's think about our
31:06 - buttons that are in the order summary
31:08 - component design
31:10 - because we aren't using a programming
31:12 - language today
31:14 - nothing will happen when we click on our
31:16 - button in the app that we're creating
31:19 - however if we had added javascript to
31:21 - this project
31:22 - we could say okay if we click on the
31:24 - button let's make something happen
31:27 - let's add logic to control what happens
31:30 - here maybe we'll move to a new view
31:32 - or maybe when we click the button a
31:34 - piece of text will pop up that says ok
31:37 - all done
31:38 - but because this project is only html
31:41 - and css
31:43 - our buttons in this application won't
31:45 - have any interactivity to them
31:47 - in other words they won't do anything
31:50 - you might be wondering well if
31:52 - programming languages like javascript
31:54 - use logic to control things on web pages
31:58 - then what does a markup language like
32:00 - html actually do
32:02 - html is the code that is used to
32:04 - structure a web page and its content
32:07 - html consists of a series of elements
32:09 - which you use to wrap different parts of
32:11 - the content on your web page we saw this
32:14 - a moment ago when we created our hello
32:16 - world
32:17 - websites can have only html on them and
32:20 - nothing else you can build a site with
32:22 - just html and css however it will
32:25 - probably be
32:26 - a boring and ugly website because it
32:29 - won't have any
32:30 - interactivity
32:32 - using javascript and the site will also
32:35 - not look very pretty because it wouldn't
32:37 - have any css and we'll go more into css
32:40 - in just a bit
32:41 - for now let's get a bit more into html
32:44 - syntax so first we'll learn kind of the
32:46 - concepts and ideas of html and then
32:49 - we'll go use them as we're writing out
32:51 - our application
32:53 - let's go into html syntax more first
32:56 - we'll go over the syntax and then we'll
32:58 - take that syntax and we'll use what we
33:01 - learned to build our application
33:04 - when i say syntax what do i mean
33:07 - the word syntax can seem kind of scary
33:10 - when you first hear it
33:11 - but syntax refers to the rules that
33:14 - define the structure of a language
33:17 - when you know the syntax of a language
33:19 - you can use that language
33:21 - first up let's talk about html elements
33:25 - here this entire thing
33:27 - is an html element
33:29 - an html element is a basic unit of html
33:33 - everything here
33:35 - from the hello world to the weird
33:37 - brackets you see to both of the h1s on
33:40 - either side of the content
33:42 - this is all part of the html element we
33:44 - see here
33:46 - now here when you see this odd looking
33:49 - like greater than and less than this is
33:52 - the html tag itself
33:55 - this is the opening tag and this other
33:57 - one over here is the closing tag
34:01 - tags are a special kind of text that you
34:03 - use to mark up your content on your web
34:07 - pages
34:08 - these tags will tell your browser to
34:10 - display
34:12 - whatever is inside of the tag in a
34:14 - certain way
34:15 - for every single html element there is
34:19 - an opening tag and a closing tag if you
34:21 - go back to our app and we go outside of
34:24 - the closing tag and we just write hello
34:26 - here and we hit save
34:28 - then we refresh and we see that these
34:31 - styles that the h1 are given here bigger
34:34 - and more bold are not applied to this
34:36 - hello and that's because this hello here
34:39 - is outside of the closing tag of the h1
34:42 - here
34:44 - let's talk a bit more about html tags
34:48 - so here we have the opening tag first
34:51 - this opening tag states where the
34:53 - element begins or starts to take effect
34:57 - and then next we have the closing tag
34:58 - over here
35:00 - this is the same as the opening tag
35:02 - except it includes this forward slash
35:05 - before the element name
35:08 - the closing tag tells us where our
35:10 - element ends
35:12 - in this case this closing tag tells us
35:14 - where our h1 element ends
35:18 - again this whole thing here is one html
35:21 - element
35:22 - our html element is made up of these
35:24 - tags and it's also made up of the
35:27 - content
35:28 - the content is whatever is between the
35:31 - opening tag and the closing tag
35:34 - in this case hello world is our content
35:38 - and again this whole thing with the
35:40 - content and both the opening tag and the
35:43 - closing tag this is all one html element
35:46 - itself
35:47 - we'll learn more about html as the
35:50 - course goes on but let's go on to the
35:52 - second topic that we'll be covering in
35:54 - this course which is css
35:57 - we're going to right click again and hit
35:59 - new file and we'll say styles.css
36:03 - before we start writing out our css
36:05 - let's dive into some css basics
36:08 - what is css anyways
36:10 - css stands for cascading style sheets
36:14 - it's a styling language that modifies
36:16 - the appearance of the content of web
36:18 - pages
36:19 - css by itself can't do very much
36:23 - the purpose of css is to style markup
36:26 - language
36:27 - in other words the purpose of css is to
36:30 - style html elements and make them look
36:32 - great
36:34 - we can actually inject a bit of css
36:36 - right into whatever html tag we went to
36:39 - style
36:40 - let's go do this
36:43 - next we're going to add a style sheet
36:44 - which will be our way of adding css to
36:47 - our html and connecting the files so our
36:50 - app knows that it'll use this css that
36:53 - we're about to write
36:56 - so we'll say link
36:57 - rel
36:59 - stylesheet rel is short for relationship
37:02 - and then we'll say
37:03 - [Music]
37:04 - styles oops
37:06 - styles.css
37:10 - you see i have an extra quote here
37:12 - just making typos all the time i'm going
37:15 - to remove that and hit save
37:17 - now we've connected our css to this
37:20 - index.html file and we want to go to our
37:23 - browser and test that this actually
37:25 - worked
37:26 - so let's remove this
37:28 - so here
37:29 - in our opening tag and in between these
37:31 - two brackets
37:33 - we can say style
37:35 - uh
37:36 - quotes
37:38 - background color i'm using autocomplete
37:41 - there your text editor might have an
37:43 - autocomplete and then we're going to say
37:46 - let's do aqua
37:47 - and then we're going to hit save
37:50 - if we go back to our browser and hit
37:52 - refresh we see that this now has the
37:54 - background color of aqua
37:56 - next up what if we want to add another
37:58 - h1 tag that says the hello world again
38:02 - let's do that so we'll write h1
38:05 - and here you might notice again that if
38:07 - i just wrote up the first h1
38:10 - i suddenly this second closing tag just
38:12 - appears again that is an extension i
38:15 - have that makes it a little easier and
38:17 - faster for me to write html
38:19 - so inside of here we'll say hello worlds
38:21 - again
38:22 - and hit save
38:25 - what if we want the second hello world
38:27 - again
38:28 - the second html element here to have the
38:31 - background color of aqua
38:33 - well what we have to do is add this same
38:36 - style attribute again
38:38 - so i'm being lazy and i'm being a true
38:40 - developer and i'm going to hit command c
38:43 - in other words i copy this and then i'm
38:44 - going to paste this here and hit save
38:48 - now we've accomplished our goal of
38:49 - having both of these h1 tags have the
38:52 - background color of aqua
38:54 - if we go back to our app and refresh we
38:56 - can see that we have both of our html
38:59 - elements and they both have the correct
39:00 - background that we want them to have
39:02 - now this is okay but it's going to get
39:05 - tedious if we need to add this so many
39:07 - times imagine if we have dozens of html
39:10 - tags on our real website and we're going
39:13 - to have to add this in several different
39:15 - places all over
39:16 - there is an easier way to do this
39:19 - instead we're going to use css selectors
39:23 - we'll be using css selectors all
39:25 - throughout the rest of the course a core
39:27 - piece of css syntax is the selector a
39:30 - css selector is the first part of a css
39:33 - rule it is a pattern to tell the browser
39:36 - which html elements should be selected
39:39 - to have the css property values inside
39:42 - the rule applied to them a css selector
39:46 - like this part on its own is the first
39:49 - part of a css rule
39:52 - so this entire thing is one css rule a
39:56 - selector is a pattern of elements that
39:59 - tells the browser which html elements
40:02 - should be selected to have the css
40:04 - property values inside the rule applied
40:07 - to them
40:09 - next we have these curly brackets that
40:11 - you see here these curly brackets are
40:14 - used to signify the start and the end of
40:16 - the styles that will be applied to this
40:19 - selector
40:20 - everything in between these curly
40:22 - brackets are styles that are applied to
40:25 - the html elements that match this
40:28 - selector inside of these brackets are
40:31 - property value pairs
40:34 - each property has a value
40:36 - let's go over an example so here where
40:39 - is the selector
40:41 - the selector is this h1 element
40:44 - here we are essentially saying
40:46 - okay go select all the h1 elements and
40:50 - make them all have a background color of
40:52 - aqua back in our app we had to write
40:55 - this code twice here and as developers
40:57 - we really don't want to be writing the
40:59 - same code over and over again if we can
41:01 - help it
41:02 - so instead we'll use our selector to
41:05 - grab all h1 tags and set their
41:08 - background color to aqua let's go back
41:10 - to our app and we'll remove this style
41:13 - attribute here
41:15 - so we remove it and we remove this and
41:18 - we hit save now let's go into our
41:21 - styles.css
41:23 - and we'll say exactly what we saw on the
41:25 - screen a second ago we'll say h1
41:28 - we'll do the curly brackets so this is
41:30 - our selector
41:31 - and then inside of our brackets these
41:33 - are the css styles that we want applied
41:36 - we'll use the property of background
41:39 - color and we'll use the value of aqua
41:41 - and we'll hit save
41:42 - if we go back to our app and refresh we
41:45 - see no difference which is exactly what
41:47 - we want
41:48 - the background color of both of these h1
41:50 - elements is now aqua and we didn't have
41:53 - to write the same code twice
41:55 - okay so we've learned some html and css
41:58 - basics and we're ready to jump into
42:00 - building the rest of our project we will
42:02 - learn more html and css on the way as we
42:05 - go
42:07 - one quick thing to note before we keep
42:09 - going
42:10 - let's briefly talk about how javascript
42:12 - works with html and css
42:14 - i mentioned javascript earlier and
42:17 - javascript is
42:18 - beyond the scope of this course it's
42:20 - something that we won't be covering
42:22 - but i want you to understand how
42:24 - javascript works with html and css so
42:27 - you can kind of understand how they
42:29 - holistically work together
42:31 - as a front end developer
42:33 - you're going to use html and css to
42:36 - build and style the content of your
42:38 - website
42:40 - you would also use javascript alongside
42:42 - the html and csx
42:45 - so these three languages html css and
42:47 - javascript you will use them all the
42:49 - time as a front-end developer
42:52 - what's always helped me is to think of a
42:55 - house analogy
42:57 - think of your application like it's a
42:58 - house
43:00 - so the html is the building blocks of
43:02 - your house uh the css is the styles of
43:06 - that house
43:07 - and javascript is the interactivity of
43:09 - the house javascript is the moving parts
43:12 - of the house
43:13 - back in our app again we have two
43:15 - different h1 elements here
43:17 - and we've created this rule which says
43:19 - for every h1 element give it the
43:22 - background color of aqua
43:24 - now if we go back over here
43:27 - what if we do not want
43:30 - this second h1 tag to have a background
43:32 - color of aqua
43:35 - what if we just want this to have a
43:37 - regular color of black for example
43:40 - the problem is we already wrote this css
43:42 - rule that says
43:44 - we want all h1s to have this background
43:47 - color of aqua
43:49 - every single h1 tag that we create on
43:52 - this page
43:53 - we'll get a background color of aqua
43:55 - and we no longer want that
43:58 - so instead we're going to use another
44:01 - css selector that solves this problem
44:05 - we want to say okay i want this h1 tag
44:09 - in particular to have a background color
44:11 - of aqua but i do not want this h1 tag to
44:14 - have that color
44:16 - we somehow need to differentiate these
44:19 - two html elements
44:21 - we need to somehow get this element
44:23 - specifically uh target this element
44:26 - specifically and make sure it has a
44:28 - background color of aqua
44:30 - but not this one
44:32 - and to do this we're going to use a
44:34 - class selector the class selector
44:37 - selects elements with a specific class
44:39 - attribute
44:41 - back in our app inside of our h1 opening
44:44 - tag we're going to create a space and
44:46 - we're going to say class
44:48 - and then inside of our quotes we're
44:50 - going to say
44:51 - aqua element
44:53 - and we're going to hit save
44:55 - i'm also going to just copy this
44:57 - next we're going to go back to our css
45:00 - and instead of this h1 we're going to
45:02 - paste in that class name and we're going
45:05 - to add a little dot right there and hit
45:07 - save
45:08 - now we are using a class selector
45:11 - in here we gave our h1 tag a class with
45:14 - the name of aqua element
45:16 - and then we created this css rule for
45:19 - this specific class if we save this and
45:22 - go back to our application and hit
45:23 - refresh we see that we did exactly what
45:26 - we wanted this second h1 element no
45:29 - longer has the background color of aqua
45:32 - this is the power of class selectors and
45:34 - again we'll use a bunch of different
45:36 - selectors as the course goes on
45:38 - let's start building the very first part
45:40 - of our application
45:42 - let's go back over here and we'll remove
45:43 - this css rule
45:46 - and then back over here we're going to
45:48 - get rid of our hello world
45:50 - next up we are going to write out our
45:52 - first div
45:54 - so we're going to say div
45:56 - and then we're going to write out for
45:57 - now we'll just write card and we'll hit
45:59 - save
46:01 - you might be wondering like what is a
46:03 - div what is this
46:05 - the div tag defines a division or a
46:08 - section in an html document
46:11 - the div tag is used as a container for
46:14 - html elements
46:17 - this div is going to be the container
46:19 - for our order summary card we'll give
46:21 - this a class of card so we'll say class
46:24 - card and we'll hit save
46:26 - actually we're going to make this
46:27 - lowercase
46:29 - you might be wondering why did i call
46:31 - this card
46:33 - well in my eyes this whole order summary
46:35 - component seems like a card on a page
46:38 - conceptually
46:40 - if we go back to the design in front and
46:43 - mentor dot io we can see that this is
46:46 - the whole page and then within the page
46:48 - is our component and we could also call
46:51 - it a card it kind of looks like a card
46:53 - on a page here
46:55 - so the card kind of symbolizes the whole
46:57 - order summary component on the page
47:00 - the div that we just created with a
47:02 - class of card
47:03 - this div will be the entire component
47:06 - that we see here
47:07 - everything inside of this div will be
47:10 - the image the text and all of the
47:12 - buttons
47:13 - in other words everything inside of this
47:15 - div with the class of card will be
47:17 - everything inside of our order summary
47:19 - component
47:21 - okay let's save this and then if we go
47:23 - back and refresh we can see that so far
47:25 - we just have this div with the class of
47:28 - card and it just says card so far back
47:30 - in our starter files i'm looking at the
47:32 - design of the card or the design of the
47:35 - component the first thing i'm going to
47:36 - do is give this card a width so we can
47:40 - see we have this whole page and there's
47:42 - a certain width of this card so back in
47:44 - our styles we're going to use the class
47:47 - selectors and say dot
47:49 - card
47:51 - width this is the property and then the
47:52 - value is going to be 450 pixels and
47:55 - we'll hit save next up we need to give
47:57 - this card the background color that it
47:59 - needs it just needs a white background
48:02 - so we can say background color white and
48:04 - hit save again now so far it doesn't
48:07 - look like much has changed we just have
48:08 - this text of card
48:10 - but again if we go to inspect and we
48:13 - look at our developer tools
48:15 - we can see that this card now has a
48:17 - width of 450 pixels and a background
48:20 - color of white you might be able to
48:21 - notice the width more if we change this
48:23 - so we can change this to orange for
48:25 - example and here we can see that our
48:28 - card only has the width of 450 pixels
48:31 - and not anything more
48:32 - the next thing we're going to do is grab
48:34 - our css variables
48:37 - first of all let's go back to our
48:38 - starter files
48:40 - and let's go back down to the style
48:42 - guide
48:43 - now that we've opened our style guide
48:45 - we're going to take all of these and
48:47 - just hit command c so we're going to
48:49 - copy these
48:51 - if you've never seen this hsl before
48:53 - this is just one format for a certain
48:55 - color
48:56 - you might have seen a hex code in other
48:59 - css examples and these are just
49:01 - different ways of representing a certain
49:03 - color in code
49:06 - back in our application and back in
49:08 - styles.css
49:09 - we are going to push this down and we're
49:12 - going to write out
49:14 - roots and then brackets and we're going
49:16 - to paste in our colors here
49:19 - and we'll get rid of this code comment
49:21 - if you're wondering what root means
49:24 - this root is a place where we can
49:26 - declare global css variables
49:29 - so variables in other words that we can
49:32 - use within all of our css
49:35 - now we want to turn these into css
49:38 - variables
49:39 - to create a css variable we need to
49:42 - write two dashes and then the name
49:45 - so we're going to say
49:46 - dash
49:48 - put this into lowercase and then create
49:50 - a dash here so this will be the name
49:52 - together
49:54 - and then we're going to do this for all
49:55 - of the other ones
49:58 - awesome and then we're going to hit save
50:01 - we also need to make sure that we
50:02 - remember our semicolons on each of these
50:12 - okay so we can see we have a typo where
50:14 - we need another dash here
50:16 - next up let's test that these variables
50:18 - work and then we'll see why they're
50:20 - useful
50:21 - so our card just needs a white
50:23 - background but for now let's use a css
50:25 - variable so we'll write out var
50:29 - and then inside of here we need to add
50:31 - the css variable that we want so we'll
50:34 - say var dark blue and we have this nice
50:37 - auto complete here so i'll just hit this
50:39 - add the semicolon and hit save
50:42 - then if we go back over here and we
50:43 - refresh we see we have this background
50:45 - color with the dark blue that we want
50:48 - we don't actually want this background
50:50 - color this isn't the color of our car
50:52 - but we just wanted to demonstrate that
50:54 - this css variable works let's remove
50:56 - that and hit save
50:57 - we'll also switch this back to just
50:59 - plain white and hit save again you might
51:02 - notice that this white right here we
51:04 - didn't actually create the css variable
51:06 - up here
51:07 - it just comes with css by default so
51:10 - it's kind of like a css
51:12 - defaults variable whereas the specific
51:14 - colors that we need in our app we
51:16 - assigned those to css variables that we
51:19 - created and we gave them custom names so
51:21 - these names could really be anything
51:23 - next up let's give our page on the
51:26 - application a background color if you go
51:29 - back to our starter files we can see we
51:31 - have this beautiful like purplish or
51:33 - blue background here and we see this
51:36 - kind of squiggly wave right here
51:39 - now this is actually a mix of two things
51:42 - on the page it is a background image and
51:44 - it is also a color
51:47 - back in our app we want to take this
51:49 - body tag and give it not only a
51:51 - background image but also a color the
51:53 - body tag is really the rest of the page
51:56 - and our card or our component is sitting
51:59 - inside of that body tag
52:01 - the body element contains all the
52:03 - contents of an html document
52:06 - such as headings paragraphs hyperlinks
52:09 - tables lists and so on
52:12 - there can only be one body tag in an
52:14 - html element
52:16 - we are going to give this body tag first
52:19 - of all a background image
52:22 - let's first add the image that we need
52:24 - if we go back to our designs like i said
52:27 - we're actually using an image here to
52:29 - create this kind of wave effect it's a
52:31 - little bit hard to tell but that's what
52:33 - we're doing
52:34 - so let's go ahead and grab this image
52:36 - we'll hit this button
52:38 - and we'll go down here and we'll copy
52:40 - this pattern background desktop so we'll
52:42 - hit copy
52:43 - next up we're going to create a another
52:46 - folder inside of our order component
52:48 - summary folder
52:51 - so we'll say new folder and we'll write
52:52 - out images and in here is where all of
52:55 - our images will belong
52:56 - we can create folders inside of our main
52:59 - repo or inside of our main order summary
53:02 - component folder to keep our files
53:04 - really organized after clicking this
53:06 - images folder we're going to hit command
53:08 - v
53:10 - next we'll close this again
53:12 - and then back in our styles.css we're
53:15 - going to write out
53:17 - body
53:19 - so our selector is the body tag in this
53:21 - case and then our styles or our property
53:25 - values are going to be in here
53:27 - and we're going to write background
53:29 - image
53:32 - and then we're going to say url
53:37 - images and we have this nice
53:38 - autocomplete and we're going to grab the
53:40 - pattern image that we want and we're
53:42 - going to hit save
53:44 - we also want to remove this and make
53:46 - this white again and we're going to
53:48 - again hit save
53:50 - back in our app we hit refresh and we
53:52 - also closed our dev tools and this looks
53:55 - okay so far but we have to remember that
53:57 - we're actually extremely zoomed in here
54:00 - sometimes i forget about this so i am
54:02 - actually zoomed in because as you're
54:04 - watching this i want you to be able to
54:06 - see the code on my screen really well
54:08 - but zooming in can also sometimes make
54:10 - your app look funky so let's go back to
54:13 - a hundred percent i'm going to hit
54:14 - command minus
54:16 - right now we're at 300 and we're going
54:18 - to go back down to 100
54:22 - now we're back at 100 of the correct
54:25 - kind of zoom size
54:27 - and we can see the problem is that we
54:29 - have this wave effect but
54:32 - it keeps repeating on the screen like
54:34 - it's much too small for the screen it
54:36 - seems like and so it's just repeating
54:37 - once twice and then three times down
54:40 - here let's fix this
54:42 - we can say background repeat
54:46 - no repeat and we'll hit save
54:49 - we don't want our background here to be
54:51 - repeating
54:52 - if we refresh now we see this is exactly
54:55 - what we want our background is not
54:57 - repeating and filling the space
54:59 - the next problem is that we do want this
55:01 - background image to be a little bit
55:03 - bigger
55:04 - so back in our app we use the background
55:07 - size css property for this
55:10 - the background size css property sets
55:12 - the size of the elements background
55:15 - image
55:16 - for this particular use case we want the
55:18 - value of cover
55:20 - so we'll say background size
55:23 - cover and we'll hit save
55:26 - if we go back to our app and refresh
55:28 - this is looking fantastic it's very
55:30 - similar to our design
55:32 - back to our design we can see that
55:35 - we've already done this wave effect and
55:37 - then the rest of the page has this
55:39 - slightly different kind of purple gage
55:41 - looks like the pale blue css variable
55:44 - that we created earlier so we'll use
55:46 - that back in our application i'm just
55:49 - going to copy this because again i'm too
55:52 - lazy to write it out
55:53 - and then we're going to say
55:55 - background color
55:59 - and then we're going to save bar and
56:00 - then paste in our css variable of pale
56:03 - blue we'll add our semicolon and we'll
56:05 - hit save or command s
56:07 - if we refresh our app again we can now
56:10 - see this is looking fantastic this is
56:12 - exactly what we want
56:14 - going on and looking at our design
56:16 - figuring out like what should we build
56:17 - next uh we can see that most of our text
56:20 - inside of our order summary component or
56:23 - in other words inside of our card
56:25 - is this kind of light color
56:28 - so let's go add that color to the div
56:30 - that has the card class
56:34 - so in here we'll say color
56:36 - var
56:37 - and it is desaturated blue
56:40 - and we'll hit save
56:41 - if we go back to our application
56:43 - we're going to zoom back in so we're
56:45 - going to hit command plus a few times
56:48 - just to make this a bit bigger
56:50 - we'll hit refresh and we see this has
56:51 - changed to the color that we want
56:54 - we can also see this change if we open
56:56 - up our dev inspector tool so we can hit
56:58 - inspect
56:59 - and we can use this and select our div
57:02 - with the class of card and we can see
57:04 - that it has this color
57:06 - if we toggle this it will go away and
57:08 - toggle it back the color will be applied
57:11 - again we used the color property because
57:14 - the color property specifies the color
57:16 - of the text
57:18 - so if we wanted we could change this to
57:20 - anything we could say pink and it would
57:22 - show up here and of course if we refresh
57:25 - this page again that pink is gone uh if
57:28 - we refresh the page the original styles
57:31 - that we coded up in our styles.css are
57:33 - back and the pink will be gone so when
57:36 - we fiddle with these colors down here
57:38 - and we change these in the browser this
57:40 - isn't actually changing anything in our
57:42 - code base itself
57:43 - it's just momentarily showing us like
57:46 - what these changes would look like in
57:48 - the browser so we can tweak things here
57:50 - but it's not going to affect any of our
57:52 - actual code in our app this dev
57:54 - inspector can work amazing if you are
57:57 - debugging because you can see which
57:59 - styles actually got applied or not
58:01 - for example back in our app let's say we
58:04 - take away one of these dashes right so
58:06 - maybe we just forgot the dash we made a
58:08 - typo this happens all the time and then
58:11 - if we go back to our app and we refresh
58:13 - again
58:14 - and we look down here we can see that
58:16 - this color is no longer getting apply it
58:18 - so our developer tools will actually
58:20 - give us this little warning sign right
58:22 - here
58:23 - so you might come into the app and you
58:24 - see okay the color is not there i wonder
58:27 - why and you can inspect this and look
58:29 - down here and see this warning
58:32 - and this says invalid property value
58:35 - this is kind of like an awesome clue
58:36 - that css is giving you it's telling you
58:38 - that there's something wrong with the
58:40 - code
58:41 - we can go back here and add this dash
58:43 - again and then know that it's working
58:45 - let's stop for a second and notice
58:46 - something really interesting
58:48 - so back over here in our index.html we
58:51 - have this word cart
58:53 - let's add another div nested inside of
58:55 - it
58:56 - and inside of this div we'll have the
58:58 - content of i love coding and we'll hit
59:00 - save
59:01 - let's go back to our browser and we'll
59:03 - refresh
59:04 - next let's inspect this second div
59:08 - and one thing we notice about this div
59:09 - here is that
59:11 - even though this div does not have the
59:12 - classic card it actually has the soft
59:15 - blue color right its text is this soft
59:18 - blue
59:20 - why is this
59:21 - this div does not have a clasp that is
59:23 - telling it to have this color of soft
59:25 - blue and yet it is still this soft blue
59:27 - color
59:29 - we can find the answer by scrolling down
59:31 - a bit and we see
59:32 - that we are hovering over this div right
59:35 - and then we see these words inherited
59:37 - from div dot card
59:40 - what happened here was that this child
59:42 - div i love coding
59:43 - it actually inherited its color from its
59:46 - parent div that has the class of card
59:48 - and our dev tools are actually telling
59:51 - us that right here so we are basically
59:53 - saying okay
59:55 - any children inside of the div with the
59:57 - class of card will also have the text
60:00 - color of soft blue
60:02 - think about this card div as being the
60:05 - parent div
60:07 - this div with the content of i love
60:09 - coding this div is inside of the parent
60:12 - div in other words the parent div has
60:14 - this opening tag and the closing tag and
60:18 - this div is between the opening and the
60:20 - closing tag and so this is the child of
60:24 - this parent div and here we're really
60:26 - saying okay any children inside of this
60:29 - div with the class of card are going to
60:31 - have the text color of blue
60:34 - think about this card as being the
60:36 - parent div and the card inside of it is
60:39 - the baby
60:40 - and the baby inherited the way that it
60:42 - looks from its parents
60:44 - this inheritance is a fundamental piece
60:46 - of css
60:48 - css cascades
60:51 - in other words this means that styles
60:53 - cascade down or are inherited from
60:56 - parent to child this can be really
60:58 - tricky because sometimes you have a div
61:01 - and you don't know where it's getting
61:02 - its style or something on your page
61:04 - looks really funky and you're like wait
61:07 - i didn't make that div that size and so
61:09 - it's inheriting some sort of style from
61:11 - somewhere else
61:13 - the next question you might ask is
61:15 - what if i don't want my child div to
61:18 - inherit its color from the parent dip
61:21 - okay so if we went to rebel we can use
61:23 - the class selector here so we can say
61:26 - class and we'll just call this child for
61:28 - now and we'll hit save
61:30 - and then back in our styles we can say
61:33 - dot childs and we can add another color
61:37 - property here so we can say color and
61:39 - we'll say red and we'll hit save
61:42 - if we go back to our app and refresh we
61:44 - can see that this child div now has the
61:46 - color of red
61:48 - so this child div has this color of red
61:51 - and it's now overriding its inherited
61:54 - color
61:55 - if we scroll down a little bit we can
61:58 - see that this is now slashed out because
62:01 - we have a more specific color property
62:03 - with a value set here and so this
62:06 - inherited style will no longer
62:09 - be applied here
62:11 - this can be a bit confusing because if
62:13 - you go back to our app and you say
62:15 - okay we have this card div with this
62:17 - color of desaturated blue and then we
62:20 - have this div inside of the parent div
62:23 - with the color of red you might
62:25 - sometimes wonder like
62:26 - okay which one wins here right like
62:28 - which css rule actually gets applied is
62:31 - it the blue one or is it the red one
62:33 - and css answers this by saying the most
62:36 - specific rule wins
62:39 - and in this case the most specific rule
62:41 - is the child div with the color of red
62:45 - because this rule is more specific to
62:47 - this div
62:49 - this is called css specificity
62:52 - i can never say css specificity right so
62:55 - i'm going to try to say it as
62:57 - infrequently as i possibly can
62:59 - but css specificity is
63:02 - the means by which the browsers decide
63:05 - which css property values are the most
63:08 - relevant to an element and therefore
63:11 - will be applied
63:12 - now this can seem complex so let's look
63:14 - at a great cheat sheet for this
63:17 - okay so this is a really fun little site
63:19 - called css
63:21 - specificity i again cannot really say
63:24 - that without getting tongue tied
63:26 - but here you can see when you are
63:28 - applying styles to your divs like what
63:30 - styles will win in other words what
63:32 - styles will actually get applied in
63:34 - order of importance
63:36 - okay so now that we've learned about css
63:38 - specificity let's move on and let's work
63:42 - more on our order summary component
63:44 - let's keep building
63:45 - we're going to remove this child div
63:47 - we're not really going to need it now
63:49 - and we're going to go over here and
63:50 - remove it here
63:52 - back in our designs let's create our
63:54 - title next this is our order summary
63:57 - title
63:58 - now back inside of our car div we're
64:00 - going to actually remove this word cart
64:03 - this was just kind of placeholder text
64:05 - we don't need it anymore
64:07 - next we're going to add an h2 element
64:09 - and we're going to say order summary
64:12 - and we'll hit save
64:15 - next we want to add styles to this h2
64:17 - tag
64:18 - if we go back over here and we refresh
64:20 - we can see it doesn't really have much
64:22 - style on it yet
64:24 - let's use a class selector
64:26 - so we'll give this a class name of title
64:30 - and we'll hit save
64:31 - back over here we'll say dot title and
64:35 - then we'll add our styles within here
64:38 - first we'll say color so we want this
64:40 - order summary text to have a color of
64:43 - dark blue so we'll say bar
64:45 - dark blue
64:48 - next up we want to give this a font
64:50 - weight of 900
64:52 - and if you're wondering i got this font
64:54 - weight from inside of our starter files
64:58 - lastly we also want this to have a font
65:00 - size of 32 pixels
65:04 - and we'll hit save
65:06 - again we're deciding how this style
65:08 - looks from looking at the image that we
65:10 - have in our starter files of the design
65:13 - if we go back and hit refresh we can see
65:16 - that this is looking a bit more similar
65:17 - to the design
65:18 - i am going to make this a tiny bit
65:20 - smaller because it's a little bit bigger
65:22 - than it's really necessary right now
65:24 - that's better
65:25 - the next thing that we want to do is add
65:27 - this cool image that we see here back in
65:29 - our starter files
65:31 - so within our starter files we're going
65:32 - to go and grab this image from the
65:34 - images folder that they provided for us
65:36 - this is the illustration hero so we're
65:38 - just going to copy this
65:40 - back in our application we're going to
65:43 - go to our images folder and we're going
65:44 - to hit paste
65:46 - awesome so now we have this here now
65:48 - when you see all of this
65:50 - you might be thinking okay this doesn't
65:52 - look like an image here
65:53 - this is an svg which is just a different
65:56 - kind of an image file
65:58 - so it's kind of like a jpeg but there
66:00 - are differences that we won't go into in
66:02 - this course so now we can just close
66:05 - this and we're actually going to close
66:07 - this as well
66:08 - and then lastly we'll close this so we
66:10 - have more space and go back to our
66:11 - index.html file
66:14 - next up right above our h2 tag we're
66:16 - going to use an image tag and this will
66:18 - allow us to display our image
66:21 - so we're going to say
66:23 - image src
66:25 - and then here we need to write out the
66:27 - file path to our image so we'll say
66:29 - images and then find it here
66:32 - again we can use our awesome
66:34 - autocomplete and say
66:35 - illustrationhero.svg
66:38 - and then we can use a closing tag and
66:40 - hit save
66:42 - one last thing we can do is add an alt
66:44 - tag so we can say alt
66:47 - hero image and hit save
66:49 - an alt tag also known as an alt
66:51 - attribute or an alt description it's an
66:55 - html attribute applied to image times to
66:57 - provide a text alternative next we can
67:00 - go back and refresh and we can see that
67:03 - our image is here and it's looking
67:05 - awesome the great thing about this image
67:07 - is that it's fitting perfectly
67:10 - if we inspect this image it has a width
67:13 - of 450 pixels which is exactly the width
67:16 - of our car
67:17 - but this width is actually not being
67:19 - inherited from the car
67:21 - so where are we getting this width from
67:23 - like why does this image have a width of
67:26 - 450 pixels
67:28 - if we go back to our app and we go look
67:31 - at this svg
67:32 - we see that there's actually a width
67:34 - hard coded into this svg
67:37 - now this is fine but imagine if we went
67:40 - to use this same image in other places
67:42 - in the application
67:44 - for example what if we want to use this
67:46 - image as
67:47 - the background of another page in our
67:49 - app
67:50 - if we use this image as the background
67:52 - in another page in our app then we would
67:55 - not want this image to have the width of
67:57 - 450
67:58 - but because this file is giving this
68:01 - exact width of 450
68:03 - that means that anywhere that we use the
68:06 - image as many times as we use it it's
68:08 - always going to have this width of 450
68:11 - pixels this isn't great for when our app
68:14 - scales right so if we do want to at some
68:17 - point add another page in our app and
68:19 - use this image again
68:20 - then we'll be stuck with this hard-coded
68:23 - width of 450 pixels and we don't want
68:25 - that
68:26 - let's go ahead and actually remove this
68:28 - width
68:29 - so we're going to remove this and hit
68:31 - save
68:33 - now if we ever use this image again
68:35 - elsewhere it's not going to have this
68:37 - hard-coded width of 450.
68:40 - if we go back to our app and we refresh
68:43 - we can see that this image no longer has
68:45 - the width of 450.
68:48 - this seems like a problem at first but
68:50 - we're going to actually fix this let's
68:52 - go back to our app and we're going to
68:54 - close this for now we don't really need
68:55 - it anymore
68:56 - and we're going to give this image a
68:59 - class
69:00 - and we'll call it
69:03 - hero image and we'll hit save
69:06 - next in our styles we're going to go
69:08 - down here and use the class selector so
69:10 - we'll say hero image
69:13 - and then we're going to use the property
69:14 - of width and we're going to say 100 and
69:17 - we'll hit save
69:19 - with 100
69:20 - means that we want to make this image
69:23 - element have the width of its parent
69:25 - element
69:27 - whenever you see a width of 100 on a div
69:30 - you'll know that that div is just going
69:32 - to be the width of its parent
69:35 - now if we go back to our app and hit
69:37 - refresh we can see that our image tag
69:40 - now has the width of 450 because that is
69:43 - the width of its parent
69:45 - we've added our order summary title and
69:47 - we've also added our image
69:50 - let's start adding some of the stuff
69:51 - down here
69:52 - okay the first thing we're going to do
69:54 - is create a new div and we're going to
69:56 - give it the class of container
69:58 - and inside of this div is everything
70:00 - inside of that white space that we saw
70:03 - including this title
70:05 - so here i'm going to hit option up arrow
70:08 - and move this guy so he's nested inside
70:11 - of this
70:12 - container div right here
70:14 - and then we're gonna hit save
70:16 - let's go over to our styles.css and then
70:19 - down here we'll say container and let's
70:22 - give this some padding we can say 30
70:24 - pixels and we can always go tweak this
70:26 - if we want cool so if we refresh we can
70:28 - see we have a bunch of padding
70:31 - we just added some padding right now and
70:33 - we talked a little bit about padding and
70:34 - margin earlier but we haven't really
70:36 - gone into
70:38 - like what exactly are padding and margin
70:40 - so let's dive into that right now
70:42 - to talk about margin and padding we're
70:44 - going to talk about one of the most
70:46 - important concepts in css which is the
70:48 - css box model
70:50 - okay so the css box model
70:53 - in css you can think of every element as
70:55 - a box
70:56 - so everything you see on a website
70:58 - whether it's a footer or a menu bar
71:00 - everything is a box if there is a parent
71:03 - div and there are some children divs
71:05 - inside of it
71:06 - that parent div you can think of as a
71:08 - box with certain properties and
71:10 - all of the children divs inside of it or
71:13 - different tags inside of it you can
71:14 - think of as a box as well
71:16 - and once you kind of understand this
71:18 - you'll understand
71:20 - how the html elements on your page are
71:23 - working better and you'll be able to
71:24 - write better css
71:26 - okay so every box consists of four parts
71:29 - you have the content
71:30 - so the content is the content of the box
71:33 - the content of the box is where things
71:35 - like text and images appear
71:38 - earlier we had that one div that just
71:40 - said hello world and so for that box the
71:43 - content was just the text of hello
71:45 - worlds
71:46 - um so you can have some text or video or
71:48 - several images and all of that is the
71:50 - content in a box and there can
71:52 - definitely be a ton of different content
71:55 - next you have padding so padding creates
71:58 - space inside of an element
72:01 - you also have border
72:03 - every box can have a border and a border
72:06 - goes around the padding and the content
72:09 - a border can have like a texture and a
72:12 - color and things like that
72:14 - you also have margin so margin creates
72:16 - extra space around an element so during
72:19 - the pandemic we had that like
72:21 - keep six feet apart roll so if you think
72:23 - of yourself like as a box um you could
72:26 - say you have you know six feet of margin
72:28 - between you and other people it's space
72:31 - between you and other elements
72:33 - padding and margin are easy to confuse
72:36 - and i used to confuse them all the time
72:38 - but margin is when you want to have
72:40 - space around the outside of your box so
72:43 - you're pushing that box away from other
72:45 - boxes on the page
72:47 - and padding is when you want to have
72:49 - more space inside of the box so space
72:52 - between the content and the border
72:55 - okay so this is called the css box model
72:58 - and for every single element on your
72:59 - page you can think about that element as
73:02 - a box with these four properties
73:04 - this is more of a visual representation
73:06 - that you'll see in your dev tools and we
73:08 - can see we have our content padding
73:11 - border and margin now every html element
73:14 - can have all of these things but it
73:16 - doesn't have to have them
73:18 - so in other words you could have padding
73:20 - set at zero margin set at zero etc
73:23 - okay so let's see this in action
73:26 - and back in our app we're going to add a
73:28 - paragraph tag
73:31 - and we're going to put our text inside
73:32 - of it and hit save
73:34 - paragraph tags are used to define a
73:36 - block of text as a paragraph
73:39 - now we hit save we can refresh and then
73:41 - see our new text showing up here
73:43 - and then we're going to go back to our
73:45 - inspector
73:46 - okay so we're gonna hit this and then
73:48 - we're going to click on our paragraph
73:50 - tag here now let's write a little bit in
73:52 - our css dev tools and again just to
73:55 - remind you when we write in here in our
73:57 - browser these are just showing us some
73:59 - temporary styles but of course this
74:01 - won't change any of our code
74:03 - in our repo now let's say we want to
74:05 - also add some padding to this paragraph
74:08 - tag
74:09 - so we can say padding and earlier we had
74:12 - that 30 pixels so we can say 30 pixels
74:16 - and if we look and see what happened
74:17 - here
74:18 - padding is in the green and so when we
74:20 - said 30 pixels with just one value here
74:23 - we gave padding to the top
74:25 - the left the right and the bottom so
74:27 - when there is just one value right here
74:30 - with this property of padding that one
74:32 - value gets applied to every single side
74:35 - of the top the right the left the bottom
74:37 - so what if we just wanted to give the
74:39 - top of this div some padding and nothing
74:41 - else one thing we could do is we could
74:43 - say padding top and then if we look
74:46 - again we can see that there's that green
74:48 - right there only at the top of the div
74:50 - so
74:50 - padding is zero on the left and the
74:52 - right and the bottom of the diff if we
74:54 - wanted to give padding to just the
74:56 - bottom of the div we could say padding
74:57 - bottom
74:58 - like that okay so say that you wanted to
75:01 - have different values on the top the
75:04 - left the right and the bottom so you
75:05 - could say padding bottom
75:07 - 30 pixels
75:08 - uh padding top
75:11 - uh 25 pixels
75:13 - padding right
75:16 - 10 uh padding left
75:19 - 5 pixels now
75:21 - okay so you probably will never do this
75:23 - because your padding right and your
75:25 - padding left should generally but not
75:27 - always have the same values but we can
75:30 - see here that we just wrote four
75:32 - separate lines of code
75:34 - and instead we can use something called
75:36 - css shorthands okay so you might not
75:38 - always do this where you have
75:40 - your padding right and your padding left
75:42 - at different values
75:43 - generally you'd want them to be the same
75:45 - value generally but not always
75:47 - but i want to illustrate a point here
75:50 - which is what if you need different
75:51 - values for
75:53 - the bottom the top the right and the
75:54 - left so you won't be able to use that
75:56 - just you know padding where you put in
75:58 - one value
75:59 - and this goes everywhere top right left
76:02 - and bottom so you'll have to use these
76:04 - or you can use something else called css
76:07 - shorthand
76:08 - so if i uncheck all of these which means
76:10 - they won't get applied
76:11 - and then oh this isn't getting applied
76:13 - because i have a typo here where i
76:15 - didn't put
76:16 - 40 pixels you can see
76:18 - so i'm going to
76:20 - take this right here and then i'm going
76:23 - to write in four properties right here
76:25 - okay so instead of writing padding
76:27 - bottom top right and left we can just
76:29 - write out padding with four values you
76:32 - might be wondering like how do i know um
76:35 - which value is applied where so you can
76:37 - always think about a clock so a clock
76:40 - goes from the top to the right to the
76:43 - bottom to the left so this first value
76:45 - would be at the top then we head over to
76:48 - the right just like a clock then we had
76:50 - to the bottom and then finally to the
76:52 - left so this is a css shorthand property
76:55 - okay so we've learned about padding uh
76:57 - next let's look at margin a bit
76:59 - so again margin is used to create extra
77:01 - space around the outside of an element
77:04 - so we could say margin 50 pixels
77:07 - and you can see this element now has
77:09 - more space around the outside of it with
77:11 - margin you can use all of the same
77:13 - shorthand properties that we use with
77:15 - padding we also have the content which
77:17 - we've already gone over so the content
77:19 - in this paragraph tag or in this box is
77:22 - simply these words and lastly we have
77:24 - border
77:25 - we could give this a border we can say
77:27 - border
77:28 - um
77:29 - one pixel solid orange
77:32 - and there you can see a border showing
77:34 - up
77:34 - if we go back to applying padding we can
77:37 - understand padding a little bit better
77:39 - because by applying this padding
77:41 - we are giving space around the inside of
77:44 - the element so you can see that between
77:46 - the border and the content there is more
77:48 - space
77:50 - okay so i've just refreshed the page
77:52 - one thing that you'll notice here
77:54 - is that there's actually a little bit of
77:56 - extra space right here
77:58 - i don't know if you can see that just in
78:00 - the corner there
78:02 - if we hover over our body tag we can see
78:05 - that we have a margin of eight pixels
78:07 - this is odd because you might be
78:08 - thinking like i never remember writing
78:10 - this this is actually what is called a
78:14 - default style
78:15 - so certain tags will come with default
78:17 - styles like we said let's go and remove
78:20 - this default style
78:22 - back in our app we are actually going to
78:24 - make a little space here and we're going
78:26 - to say star
78:28 - and we're going to say margin 0
78:30 - oh margin 0 and padding of 0. and we're
78:34 - going to hit save
78:37 - here we're using the all selector so
78:39 - this star looking thing this will select
78:42 - all the elements on the page and we're
78:44 - going to give them a margin of 0 and
78:46 - padding we want to do this because we
78:48 - don't want to have any default margin or
78:50 - padding applied
78:52 - if we refresh we can see that the space
78:55 - we saw a second ago is now gone
78:58 - the next thing we're gonna do is add box
79:00 - sizing border box so we'll say box
79:02 - sizing
79:03 - border box
79:06 - okay so what is border box and why are
79:08 - we applying it to every single element
79:11 - on our page
79:13 - border box tells the browser to account
79:16 - for any border and padding
79:18 - in the values you specify for an
79:20 - element's width and height
79:23 - okay so first let's remove um box sizing
79:26 - and we'll remove it so we can kind of
79:29 - see the problem that it solves when we
79:31 - add it back later
79:33 - okay so here we have our card and has a
79:35 - width of 450 pixels and if we hover over
79:38 - here we can see
79:40 - just below our card just below the
79:42 - paragraph tag and the content we can see
79:45 - that we have the width of 450 pixels
79:49 - let's say for whatever reason we want to
79:51 - add some padding right so we'll say
79:52 - padding right of 50 pixels
79:56 - and here we can see our card now has a
79:58 - padding rate of 50 pixels
80:00 - let's also notice what else changed if
80:03 - we look over here we can see that we now
80:06 - have a width of 500.
80:09 - okay so our card even though down here
80:12 - it says we have the width of 450 pixels
80:16 - if we hover over our card div we can
80:18 - clearly see that it now has the width of
80:20 - 500
80:21 - and this is because the browser looked
80:23 - at the width of the card of 450 pixels
80:26 - and then it looked at the padding which
80:28 - is creating more space inside of the
80:31 - card and it said okay so we have the
80:33 - width of 450 plus the padding rate of 50
80:37 - pixels and so that equals a total width
80:40 - of 500 pixels
80:42 - here's the problem we set this card to
80:44 - be a width of 450 pixels
80:47 - but it's not actually that width anymore
80:49 - and this is really confusing for a lot
80:51 - of developers because we want our card
80:54 - to have this width that we clearly
80:56 - defined but then we're adding padding
80:58 - and it's going to increase our card
81:00 - width to 500
81:02 - now what we can do is add box sizing
81:04 - border box and this is going to tell the
81:06 - browser that when determining the height
81:09 - or the width of this div simply account
81:12 - for the padding so we'll fit the padding
81:15 - into the total size of the box
81:18 - in this case we'll fit the padding into
81:20 - the total width
81:22 - in other words the browser will see this
81:24 - padding right of 50 pixels and it will
81:27 - fit that padding into the original width
81:30 - of 450 pixels
81:33 - let's go back to our app and we'll
81:34 - uncomment this out and we'll hit save
81:38 - then we need to come back here and hit
81:40 - refresh
81:42 - and then again we'll give some padding
81:44 - right just here in the browser
81:47 - hit save and we can see that we have our
81:49 - padding but we can also see that our
81:51 - width stayed at 450 pixels so our
81:54 - padding was kind of shoved into this
81:56 - total width
81:58 - i'd say most front end devs add box
82:01 - sizing border box to
82:03 - all of their elements just like this
82:04 - when they get started with a project
82:06 - because
82:07 - it's just more intuitive and it solves a
82:09 - lot of problems where
82:11 - our elements are much bigger than we
82:13 - expected them to be
82:16 - next up back in our designs we can see
82:18 - that this text has some space between it
82:22 - but if we look in our app this text has
82:25 - almost no space between it
82:27 - so we'll use line height for this which
82:29 - can be used to set the distance between
82:31 - text
82:32 - back in our app we're going to give this
82:34 - paragraph tag a class so we'll say class
82:37 - order description
82:40 - and we'll hit save then over in our
82:42 - styles we're going to come down here and
82:45 - we'll say order description
82:48 - and we'll say line height and we'll try
82:51 - out 25 pixels and we'll hit save again
82:54 - we come back and refresh we can see that
82:57 - there's now some space between this text
83:00 - okay so let's keep going if we want we
83:02 - can really build any part of this app
83:04 - next
83:05 - next up i think i'll add the border so
83:08 - if we look at our design again we can
83:09 - see that this design has a nice rounded
83:12 - border
83:13 - we'll go back to our card
83:16 - and we'll give this a border radius of
83:19 - 20 pixels
83:22 - back here if we refresh we can see we
83:24 - have this nice rounded border
83:26 - next up let's grab the font that we're
83:28 - going to be using so let's come back
83:30 - over here and let's look for our font
83:33 - okay so here we see the font family
83:35 - we're going to follow this link
83:37 - okay so now we're going to add the font
83:40 - weights that we want
83:41 - so we want 500
83:43 - we want
83:44 - 700 and 900.
83:48 - awesome the next thing we're going to do
83:49 - is hit import and we're going to copy
83:51 - this link right here
83:54 - okay so next up we're going to add this
83:55 - import to the top of our app like so
83:58 - i'm going to hit save
84:00 - then inside of our body tag down here
84:02 - we're going to say font family
84:06 - red hat display
84:09 - sans serif
84:11 - we go back to our app and we refresh we
84:13 - can see that we now have the font that
84:14 - we want awesome
84:17 - while we're here we can also give our
84:19 - body a font size of 16 and i saw that
84:23 - over in our starter files
84:26 - if we refresh we can see we have more of
84:28 - the size that we want keep in mind that
84:30 - i am again zoomed in here so if we zoom
84:34 - back out we'll start to see more of what
84:35 - our app actually looks like but
84:38 - i want you to be able to see this really
84:40 - well while you're taking this tutorial
84:41 - so i'm going to zoom back in
84:43 - one bug that we'll see here is that our
84:45 - borders got this really nice rounded
84:48 - border on the bottom
84:49 - but up here everything still looks like
84:51 - there's absolutely no border radius
84:55 - to fix this issue we'll use something
84:57 - else we'll use the overflow css property
85:01 - in this case we're going to use overflow
85:03 - hidden
85:04 - so when the content of an element is too
85:06 - big and overflowing we can hide that
85:09 - overflow
85:10 - in our case here this image is
85:13 - overflowing because
85:14 - this image is inside of the car div but
85:17 - its square edges are overflowing in
85:20 - other words we have this car div that
85:22 - has rounded borders
85:24 - but the image is overflowing with its
85:26 - square borders it's hiding the rounded
85:29 - border of the card
85:31 - so let's add overflow hidden to our card
85:34 - div and this is essentially saying
85:37 - okay when the content of the card div
85:39 - overflows or in other words when it's
85:41 - too big for the card then we are going
85:43 - to hide that
85:44 - okay so back here we're going to say
85:47 - overflow hidden and we'll hit save
85:51 - if we go back to our app and refresh we
85:53 - can see that overflow hidden did its job
85:55 - perfectly
85:56 - okay so next up we want to add some
85:58 - margin to each element inside of this
86:01 - container
86:02 - let's go back to where we created our
86:04 - container styles
86:06 - and we're going to say container
86:09 - and then we're going to say margin 13
86:11 - pixels
86:12 - zero
86:14 - okay so we're using this greater than
86:16 - star which says all of the children
86:19 - inside of this container they will all
86:21 - get this margin with this value
86:24 - when you have a margin property with two
86:27 - values
86:28 - this means that the first value is for
86:30 - the top and bottom and the left and
86:32 - right are at zero
86:34 - we just gave each element a top and
86:36 - bottom margin of 13 pixels and a left
86:39 - and right value of zero
86:41 - next up let's build these buttons that
86:43 - we see here
86:45 - okay so inside of our container div
86:47 - and just below our paragraph tag we're
86:49 - going to add our first button
86:52 - the button html element it's an
86:54 - interactive element and it can be
86:56 - activated by a user and you can use it
86:58 - to add
86:59 - programmable actions such as like
87:01 - opening a form or opening a new page
87:05 - we won't go into that in this course but
87:07 - those are some of the actions that you
87:08 - can use a button tag for
87:12 - since this course is all about html and
87:14 - css our buttons won't have any
87:17 - interactivity so nothing happens when we
87:19 - click on our buttons they won't be very
87:21 - exciting but we're going to make sure
87:23 - that they're styled correctly to look
87:25 - just like the design
87:28 - okay so first off i'll write out button
87:31 - and then i'll give it a class
87:33 - the first one we'll call the proceed
87:34 - button
87:36 - and then inside i'll say proceed to
87:39 - payment which is from the design and
87:41 - i'll hit save
87:42 - next up i'll essentially create an
87:44 - identical button but this one will say
87:46 - cancel order
87:47 - like how it says on the design and we'll
87:49 - give it a class of cancel button
87:57 - alright if we go back to our app and
87:58 - refresh we can see that
88:00 - these buttons look like total garbage
88:03 - these buttons also have a style already
88:06 - which is kind of odd because we didn't
88:07 - add any styles to these but like there's
88:10 - already a background color of gray and
88:11 - there's a border and again these are
88:13 - default styles from the browser the
88:16 - browser has a basic style sheet that
88:18 - gives a default style
88:20 - to certain elements
88:22 - so we're going to override these styles
88:24 - and make these buttons look how we want
88:26 - okay so over in our styles we are going
88:29 - to first focus on the proceed button so
88:31 - we're going to say proceed button and
88:33 - we'll give it a background color
88:36 - of bright blue
88:40 - and we're going to hit save
88:41 - now let's go ahead and add everything we
88:43 - need for this button so i'm going to go
88:45 - a little bit faster i'm going to give
88:47 - this some padding
88:50 - a color or text color in other words of
88:52 - white
88:53 - and i'm going to give it a box shadow
88:57 - let's give our button more of the styles
88:59 - that it needs so we'll say width 100
89:04 - border none we want to get rid of that
89:05 - default style border
89:07 - font weight of 700. cursor pointer
89:12 - this means when you hover over the
89:13 - button there will be a pointer
89:16 - so it kind of indicates to the user that
89:18 - you're going to click on something
89:20 - next we're going to give it a font size
89:22 - of 0.9
89:24 - we're going to give it a border radius
89:26 - so it's a bit rounded we'll go 12 pixels
89:29 - if we go back and refresh this button is
89:31 - looking so much better
89:33 - you might have a few questions here like
89:35 - for example why did we add a width of a
89:37 - hundred percent we said width of a
89:39 - hundred percent because if you remember
89:42 - when you give an element a width of a
89:43 - hundred percent then it's going to take
89:46 - the width of its parent container
89:48 - next up if we look at the designs we can
89:50 - see that this button here is a certain
89:52 - color and when you hover over this
89:54 - button it changes color slightly it
89:57 - almost looks like it's just a lighter or
89:59 - more transparent version of the same
90:01 - color
90:02 - for this we're going to use the opacity
90:04 - property so here we'll say proceed
90:06 - button hover
90:08 - and we'll give it an opacity of 0.8 and
90:11 - we'll hit save the opacity property
90:13 - specifies the opacity or the
90:15 - transparency of an element
90:17 - so if we refresh we can see once we
90:18 - hover over this button now it has this
90:21 - opacity applied next let's build the
90:23 - cancel button over here we gave this
90:25 - button the class of cancel button so
90:27 - we're going to copy this and come back
90:29 - to our styles and we'll say cancel
90:31 - button and we're going to start to add
90:32 - what we need first we'll give it this
90:34 - background color of white
90:36 - you can see it had this white color in
90:38 - the design
90:39 - then we want to give it a text color the
90:41 - text color was desaturated blue
90:45 - next we want to get rid of its border
90:47 - that came in the default style so we'll
90:48 - say border none
90:50 - then we want to give it a margin top of
90:52 - 22 pixels
90:54 - similarly to the proceed button we'll
90:56 - give it a width of 100
91:00 - next we'll give it a font weight of 700.
91:03 - i got this from the designs again
91:06 - next we'll give it a font size
91:09 - 0.9
91:11 - next we'll add a border radius of 12
91:14 - pixels
91:16 - and finally we'll say cursor pointer
91:21 - this button also has a hover state where
91:24 - the text color changes slightly so for
91:26 - that we'll say cancel button
91:28 - hover and then we'll say color black
91:31 - let's go ahead and hit save and then
91:32 - we'll look at our second button
91:35 - if we go back over here and refresh we
91:36 - can see that our button is looking much
91:38 - better much more similar to the design
91:41 - and it has this hover when we hover over
91:43 - cancel order
91:44 - back in our application we can see that
91:46 - for both of these buttons there are a
91:48 - lot of similar styles applied for
91:51 - example both of these buttons have the
91:53 - css property of width with the same
91:55 - value of 100 percent instead of
91:58 - repeating ourselves by writing a lot of
92:00 - the same styles twice we're going to
92:02 - write them just once
92:04 - so let's go up here and we'll say button
92:06 - so this is selecting the button tag
92:09 - because there are only two buttons in
92:11 - this app we can use this tag to select
92:13 - both of our buttons
92:15 - so here we'll grab the styles that are
92:16 - used on both the proceed button and on
92:19 - the cancel button
92:20 - so they both have a width of 100
92:24 - they both have border none which is
92:26 - getting rid of that default style
92:28 - they both have a font weight of 700.
92:31 - they both have a font size of 0.9
92:36 - they also both have a border radius of
92:38 - 12 pixels and lastly the cursor pointer
92:45 - great so now in our proceed button and
92:47 - our cancel button we can go and remove
92:49 - these styles
92:50 - so we'll get rid of the width
92:53 - border basically just all of these we
92:55 - can start getting rid of them
92:58 - you can do the same over here for our
92:59 - cancel button so you can say border none
93:02 - get rid of this
93:05 - basically all of these and we can hit
93:07 - save
93:08 - if we go back here we can see that our
93:10 - buttons are still looking great
93:12 - for this app there are only two buttons
93:14 - here and both of them need these styles
93:17 - but you should be careful using this
93:18 - button tag because this will select all
93:20 - of the buttons on the page and give it
93:22 - these styles so if you had other buttons
93:25 - on this page you might not want to use
93:27 - this button element here
93:29 - next up if we go back to our app we can
93:31 - see we have this purple box with a bunch
93:33 - of stuff in it
93:34 - let's get to building this by first
93:36 - adding the html
93:38 - first up back in our index.html let's
93:41 - add a plan container that will hold
93:43 - everything that we see in the purple box
93:45 - this will go right below our paragraph
93:47 - tag and above our buttons
93:49 - so we'll create a div and we'll give it
93:51 - a class of plan container
93:57 - and then next let's add the image that
93:58 - we see
94:02 - we go back to our starter files and we
94:04 - hit images we need this icon music so
94:06 - we're going to copy this
94:09 - back in our app we're going to paste
94:11 - this into our images folder like so
94:16 - back in our plan container div we're
94:17 - going to say image src
94:19 - and then we're going to say images icon
94:22 - music
94:23 - and we'll give it an alts of icon music
94:28 - and save
94:29 - if we go back to our designs we can see
94:31 - that we have this middle section here
94:34 - with annual plan and then it's telling
94:36 - us the price
94:38 - we will wrap a container div around
94:40 - these two smaller divs so that we can
94:42 - line them up where one is stacked on top
94:45 - of another so let's add these
94:47 - back in our plan container div we're
94:49 - going to create a another container div
94:52 - and we'll give it a class of plan
94:55 - description
95:00 - next up we're going to add the annual
95:02 - plan and we'll use a strong tag for this
95:05 - so we'll write annual plan
95:08 - then next up we'll use a p tag
95:12 - and we'll write out
95:14 - 59.99
95:16 - slash year and we'll hit save
95:20 - if we go back to our design we can see
95:22 - that we also want to add this change
95:24 - link right here
95:26 - right below our plan description
95:28 - container we're going to write an a tag
95:30 - so we'll say a
95:32 - and this is linking to nowhere for now
95:34 - since we're just focusing on styles and
95:36 - html
95:37 - and then inside of it we'll write change
95:41 - if we go back to our browser and refresh
95:43 - we can see that we have the html that we
95:45 - want i'm also going to zoom out a little
95:47 - bit so we can see everything better
95:50 - okay so we have the html that we want
95:52 - but this isn't looking so good so let's
95:54 - add some styles first let's work on the
95:56 - plan container
95:59 - back over here above our buttons we'll
96:01 - say plan container and first we're going
96:03 - to give it the correct font size of 16
96:06 - pixels
96:07 - then we're going to give it the
96:08 - background color of that kind of light
96:10 - purple that we saw
96:11 - the app calls it blue but to me it looks
96:14 - much more purple
96:16 - so we'll say very pale blue and we'll
96:18 - hit save
96:20 - next we'll give this container some
96:21 - padding so we'll give it 25 pixels of
96:23 - padding and then finally we'll give it a
96:25 - border radius because if you notice in
96:27 - the design the borders are a little bit
96:29 - rounded so we'll say border radius of 12
96:31 - pixels
96:33 - if we go back and refresh this is
96:34 - looking a bit better however we need to
96:37 - get these things all lined up
96:39 - the next thing we'll do is add display
96:42 - flex
96:43 - the flex property sets the flexible
96:45 - length on flexible items
96:47 - the next thing we're going to do is say
96:49 - flex direction of row
96:52 - if we go back to our app and hit refresh
96:54 - we can see this is looking much closer
96:55 - to the design
96:57 - lastly we want to add justify content
96:59 - space between
97:03 - the justify content property defines how
97:06 - the browser distributes space between
97:08 - and around content items space between
97:11 - is a value that will distribute the
97:12 - content evenly which is what we need
97:15 - we also want to write out a line item
97:17 - center
97:18 - this will align our items to the center
97:21 - if we go back to our app and hit refresh
97:23 - again we can see things are looking much
97:24 - better the justify content property with
97:27 - the value of space between allowed us to
97:30 - evenly space out these items how we want
97:32 - them next up let's work on our a tag
97:36 - if we go back to our design our a tag or
97:38 - in other words the tag that has the
97:40 - content of change inside of it looks a
97:42 - little bit different than what we
97:44 - currently have so let's add some styles
97:45 - to fix that
97:47 - so let's write out plan container
97:50 - a
97:51 - and we'll add some styles here first
97:53 - we'll add the color so var bright blue
97:58 - next up we'll add the font size which is
98:00 - 13 pixels
98:02 - and we'll add the font weight of 700
98:05 - and we'll hit save if we go back and
98:07 - refresh we can see that our a tag is
98:09 - looking much better
98:10 - next up we can add the hover state so
98:13 - when you hover over this change h i it
98:16 - actually changes color
98:17 - again we'll use opacity so we'll say
98:20 - plan container
98:21 - a hover
98:23 - and we'll give it an opacity
98:26 - of 0.8
98:29 - we'll also give it a text decoration of
98:31 - none
98:35 - we wanted to add text decoration none
98:37 - because when you hover over this link
98:39 - there is actually no underline
98:40 - underneath the link anymore
98:42 - go back to our app and we refresh we can
98:44 - see this is looking much better
98:47 - next up we can see that our annual plan
98:50 - text right here is very faint
98:52 - but if we go back to the design it looks
98:54 - much more bold let's give it the correct
98:56 - color so we'll say plan container
99:00 - strong
99:02 - so we are selecting the strong tag and
99:04 - we'll say color var dark blue and we'll
99:08 - hit save
99:09 - next up if we look at our app so far we
99:11 - can see that everything inside of this
99:14 - white space inside of this container we
99:16 - created is not looking exactly like the
99:18 - design we need to kind of center things
99:20 - here and make them look a bit better
99:22 - let's go add some styles to do this
99:25 - back in our container div that we
99:26 - created we're going to add a display
99:28 - flex which we talked about earlier we're
99:30 - going to give it a flex direction of
99:33 - column
99:36 - next we want to center the content so
99:38 - we'll say justify content center
99:41 - we'll also center the text on our page
99:43 - so we'll say text align center as well
99:48 - lastly we want to say font size of 18
99:50 - pixels
99:52 - if we go back and refresh this is
99:53 - looking much better and much closer to
99:55 - the design awesome
99:58 - something else we'll notice is that in
99:59 - the design this card is in the center of
100:01 - the page but here it's just hanging out
100:03 - off to the left so let's go back and fix
100:06 - that
100:07 - we'll go back to the styles for our card
100:08 - and we'll say margin
100:10 - 50 pixels auto
100:13 - now when you have just two values here
100:15 - the 50 pixels is going to be for the top
100:18 - and the bottom of the div and auto is
100:21 - going to be for the left and the right
100:22 - that is auto will be applied on the left
100:24 - and the right of the div and the 50
100:26 - pixels will be applied on the top and
100:28 - the bottom
100:29 - you might be wondering why are we using
100:30 - auto right here
100:32 - when we say margin auto for the left and
100:34 - the right margins of an element
100:36 - equal margin is given on either side of
100:39 - that element and so this is how we can
100:41 - center our card in the middle of the
100:43 - page
100:44 - if we refresh we can see that our card
100:47 - is now centered
100:49 - okay this is looking so close to the
100:51 - design let's go back over the design and
100:53 - see if there's anything that we're still
100:55 - missing
100:56 - if you go back to the design we can see
100:58 - that there is a bit more space here
101:00 - between the annual plan and the price
101:03 - then we have in our current application
101:06 - it also looks like the annual plan and
101:08 - the price are a little bit closer to the
101:10 - music icon than they are to the change
101:12 - link so let's make these changes really
101:14 - quick
101:15 - let's add some styles to our plan
101:17 - description which is the container for
101:19 - the annual plan and the price
101:24 - first we'll give a line height of 20
101:26 - pixels
101:28 - and the next we're going to give a
101:29 - margin right of 75 pixels and we'll hit
101:32 - save
101:33 - if we go back to our app and refresh we
101:35 - can see that this is looking much better
101:39 - okay so we are all done we have
101:41 - officially finished this course we have
101:43 - learned html and css from scratch and
101:46 - we've built our very first app we've
101:48 - built an order summary component that
101:49 - you can use on your developer portfolio
101:52 - thank you so much for watching this
101:54 - course