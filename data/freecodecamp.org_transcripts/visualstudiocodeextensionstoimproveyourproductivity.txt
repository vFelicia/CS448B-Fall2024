00:00 - in this course you will learn about
00:01 - popular visual studio code extensions
00:04 - that can help improve your productivity
00:07 - hey everyone my name is roman and i'm a
00:09 - full stack developer and today i'm going
00:10 - to talk about 10 vs code extensions that
00:12 - are going to make your life easier as a
00:14 - developer and also have just made me
00:16 - more productive below this video is a
00:18 - list of all 10 of those extensions along
00:20 - with the places you can go to download
00:22 - them so let's get started
00:26 - so the first extension we're going to
00:28 - talk about is git lens git lens is a vs
00:31 - code extension that allows you to
00:32 - visualize git context around files but
00:35 - also lines of code
00:36 - you can go ahead and search for git lens
00:38 - in the vs code extension marketplace and
00:40 - it will probably be the first search
00:42 - result that pops up now it's published
00:44 - by get kraken and if you see that go
00:46 - ahead and install
00:48 - and after you're done installing you're
00:50 - going to want to reload your window for
00:51 - the extension to take effect right away
00:54 - for mac you can press command shift p
00:57 - for windows ctrl shift p
00:59 - and it's going to open up the command
01:01 - palette and just type in reload window
01:04 - and go ahead and reload it
01:06 - now what you're immediately going to
01:07 - notice is wherever your cursor is
01:09 - there's going to be this unobtrusive
01:11 - annotation
01:12 - basically it's going to say the git
01:14 - commit author the git commit date and
01:16 - the git commit message
01:18 - and now if you hover that line you're
01:20 - going to get a better visualization of
01:22 - all that information
01:24 - on the bottom left you're going to
01:25 - notice a git commit number
01:27 - if you click that you're going to get a
01:28 - bunch of options
01:30 - you're going to be able to reveal the
01:31 - commit in a sidebar you can revert the
01:33 - commit you can reset the commit and so
01:35 - on and so forth
01:37 - in our particular case we're going to
01:39 - reveal this commit in a sidebar
01:42 - and what you're going to see is this
01:44 - tree that shows every commit
01:47 - and it's already expanded the commit
01:49 - we're interested in
01:51 - you can go ahead and interact with this
01:53 - tree
01:54 - i'm just going to click the
01:55 - calendar.view file because it says it
01:57 - was added
01:59 - and i can see all the additions that
02:01 - were made in this file in this
02:02 - particular case the whole file was added
02:06 - and now if you're interested in looking
02:07 - at other commits
02:08 - you can unexpend this and you you can
02:11 - expand other commits at will
02:13 - and if you go up one level you can see
02:16 - all the things that get lens allows you
02:17 - to do
02:19 - it allows you to use source control it
02:20 - allows you to use this commits view a
02:23 - file history view you can look at all
02:25 - your local branches i only have one that
02:28 - being the main branch you can look at
02:30 - your remote branches again i only have
02:32 - one which is
02:34 - the remote main branch you can look at
02:36 - git stashes
02:38 - tags and there's this search and compare
02:40 - feature where you can search for commits
02:42 - by message author file etc
02:46 - now if you go back to this hover menu
02:50 - what you're going to notice is a globe
02:52 - icon
02:53 - what this globe icon allows you to do is
02:55 - look at your commit in github
02:58 - before you do this you're going to want
02:59 - to sync with github in my particular
03:01 - case i've already done this
03:03 - it's going to be an icon right here
03:05 - and what it will do is pull in the
03:06 - picture of the author from github
03:09 - and also allow you to click this icon
03:12 - so i'm going to go ahead and click this
03:13 - icon
03:15 - and it's going to show me all the
03:17 - changes in this commit through github
03:21 - now we're going to go back
03:24 - and the final thing i want to show you
03:26 - is this team option
03:28 - this allows us to open a live share
03:30 - session with the author of this commit
03:32 - in this particular case we haven't quite
03:35 - installed live share yet
03:37 - i'll show you how to start sessions and
03:39 - interact with live share later in this
03:40 - video
03:41 - but this is just a handy feature to know
03:43 - about now at the bottom you're gonna see
03:45 - this bar blame option
03:48 - and basically this shows us the last
03:50 - author on this file along with the last
03:52 - commit date
03:54 - and then at the top what we're gonna see
03:55 - is all the authors on this file in this
03:58 - case it's just me so it's only showing
04:00 - me as a singular author but if there's
04:03 - multiple authors it will show the name
04:04 - of all the authors along with how many
04:07 - there are
04:08 - i often find this really helpful when i
04:10 - need to tag people on pr's often the
04:13 - best people to tag on a pr are the ones
04:16 - have either authored the file
04:18 - or worked with it before now that's all
04:20 - the things i'm going to touch on about
04:21 - git lens in this video if you're
04:23 - interested in learning more about
04:24 - different features be sure to look at
04:26 - the documentation and i hope you find
04:28 - this useful when you're looking for the
04:29 - right people to tag on pr's or you're
04:31 - just trying to visualize get better
04:36 - during this time when remote work has
04:38 - become so normalized i've often found it
04:41 - really hard to collaborate with my peers
04:43 - vs code liveshare is an extension that
04:45 - has made collaboration and pair
04:46 - programming incredibly easier liveshare
04:49 - is a way for me to host sessions with up
04:51 - to 30 people where i can debug files
04:53 - with others pair program and even teach
04:56 - when i'm using live share i can also
04:58 - share various resources like a server my
05:01 - terminal or my file straight through my
05:03 - session using read and or write
05:05 - permissions
05:07 - right now i'm going to hop on a call
05:08 - with my buddy liam who's going to help
05:10 - me debug an issue with my calendar app
05:12 - using vs code liveshare
05:14 - to kick things off i'm going to click
05:16 - down here on my name
05:18 - this is going to open some options it's
05:20 - going to say start a collaboration
05:22 - session start read-only collaboration
05:24 - session or join a collaboration session
05:27 - in my case i want to start one
05:33 - and then what i'm going to do is open
05:35 - this again
05:37 - and i'm going to copy my link so i can
05:39 - invite my friend liam to help me with
05:41 - this bug i've been struggling on
05:45 - now my friend liam has joined the call
05:48 - and i'm going to start an audio call
05:49 - with him so i'm going to go ahead and
05:51 - click
05:52 - on that bar down there and start or join
05:55 - audio call this is going to start up a
05:57 - call with
05:58 - liam and he'll be joining shortly
06:02 - what you're also going to notice in the
06:04 - meantime is there's this live share chat
06:06 - the live share chat has also said liam
06:08 - has joined
06:09 - uh you could opt to
06:11 - chat with others through this but
06:14 - in my case i find it a lot easier to
06:15 - pair program over a call
06:18 - hey roman can you hear me hey liam how's
06:21 - it going it's going well it's going well
06:24 - i heard you were having calendar
06:25 - problems
06:26 - yeah
06:27 - so there's this problem with this
06:29 - calendar app i made basically
06:32 - i just i create an event and after i
06:35 - create the event it goes on my calendar
06:37 - but then when i go to delete the event
06:40 - um it doesn't delete on the first time
06:42 - around but it deletes on the second time
06:44 - i try
06:48 - take me to your calendar
06:51 - delete function
06:53 - uh yeah i think that's called delete
06:55 - event
06:56 - okay yeah it's on line 156
07:01 - okay
07:05 - i think you're gonna want to async await
07:08 - this calendar service delete event
07:11 - okay
07:13 - try saving that and give it a shot all
07:15 - right i'll try saving that
07:17 - i'm going to try this out real quick
07:19 - just to make sure that works
07:27 - oh cool wow that worked
07:31 - hey i'm happy to help
07:33 - awesome thanks
07:34 - yup
07:35 - see ya talk later bye see you
07:39 - and i'm going to go ahead and stop that
07:41 - collaboration session which is also
07:43 - going to end the call with liam
07:46 - and that's the power of vs code
07:48 - liveshare you can immediately
07:51 - share your session and your screen with
07:53 - someone else but also set up an audio
07:55 - call
07:56 - and a chat straight in your vs code
07:58 - editor
08:02 - pieces is an ai assisted code snippet
08:05 - manager that auto classifies languages
08:08 - helps save and reuse code snippets and
08:11 - allows you to convert screenshots of
08:13 - code to actual text among many other
08:15 - things using their vs code extension and
08:18 - other integrations so to get started
08:20 - with pieces you can go straight to
08:22 - code.pieces.op and on the top right you
08:25 - can see this get pieces button
08:28 - when you see that go ahead and click it
08:30 - and it's going to take you to an
08:32 - installation page for pieces os
08:35 - which is basically the engine that
08:36 - powers all integrations in pieces
08:38 - including the vs code extension
08:41 - depending on your machine you're going
08:42 - to want to download for mac or windows
08:45 - in my case i want to install for mac so
08:47 - after the initial installation i'm going
08:49 - to get both pieces os and pieces for
08:52 - developers
08:53 - pieces for developers looks like this
08:56 - and it's just a gui for my code snippets
08:58 - which i'll touch on a little bit more
09:00 - later to make the most of my setup
09:03 - but before we touch on pieces for
09:05 - developers let's hop into vs code and
09:08 - install the pieces for vs code extension
09:11 - so when you go into vs code and type in
09:13 - pieces
09:14 - the first result is probably going to be
09:16 - pieces for vs code if you see this
09:19 - you're going to go ahead and install and
09:21 - you're going to immediately see this new
09:23 - pieces icon upon installation
09:26 - on the left
09:29 - so right now i don't have any code
09:30 - snippets so it's empty
09:33 - what i'm going to want to do is add a
09:35 - code snippet
09:36 - in practice the kind of code snippet i
09:39 - want to add is something i might reuse a
09:41 - lot
09:42 - or something i might reference or maybe
09:44 - just something i found especially
09:45 - difficult to write or create
09:48 - that i want to keep for safekeeping so
09:50 - let's just say this update range
09:52 - function fits one of those criteria so
09:55 - i'm going to go ahead and save that to
09:56 - pieces with a right click and then save
09:58 - to pieces
10:00 - what we're immediately going to see is
10:02 - there's a new top level directory called
10:04 - javascript from pieces auto
10:05 - classification of the snippet
10:08 - and then if you expand that directory
10:11 - you can click on the javascript snippet
10:13 - and you're going to see the update range
10:14 - function you can also hover the snippet
10:17 - and it's going to show you a preview of
10:18 - that function
10:20 - what i'm going to do now
10:21 - is delete the update range function in
10:23 - my calendar.view file
10:27 - and let's just say you know i'm working
10:29 - on a project i want to pull in that
10:30 - update range function all i have to do
10:33 - is go to my snippet
10:35 - and press insert snippet
10:38 - and it saved the way i formatted this
10:40 - function and also pulled that piece of
10:42 - code directly into the place i wanted
10:45 - the snippet to be put in now the last
10:47 - thing i'm going to want to do is rename
10:49 - the snippet to something more
10:50 - appropriate
10:51 - i'm just going to pick the function name
10:53 - which is update range
10:57 - and now it's saved as update range
11:01 - awesome
11:02 - just to recap what pieces allows me to
11:04 - do is store my code easily straight in
11:06 - my ide
11:07 - and also gives me the ability to pull
11:09 - that code out
11:11 - so now where pieces starts to become
11:13 - really powerful is when you start using
11:14 - the other integrations along with vs
11:17 - code
11:19 - so what i'm going to do now
11:22 - is go to stack overflow
11:24 - and i'm looking at this cohort analysis
11:27 - sql snippet
11:29 - now i find this cohort analysis sql
11:31 - snippet really helpful
11:33 - and it's also kind of hard to write so i
11:36 - want to go ahead and save that to pieces
11:38 - since i have the google chrome extension
11:40 - what i'm going to see on the top right
11:42 - is this pieces icon
11:44 - and this allows me to click the icon and
11:47 - directly save this code snippet to
11:49 - pieces without leaving stack overflow
11:51 - so i'm going to go ahead and click that
11:54 - and then what i'm going to do instead of
11:55 - looking in vs code
11:57 - is open up pieces for developers
12:01 - what i'm going to see in pieces for
12:02 - developers is an auto classification of
12:05 - the sql snippet
12:06 - which is the cohort analysis i just
12:08 - showed you and then if i click on this
12:11 - little information view it's going to
12:13 - give me more metadata about this
12:14 - particular snippet
12:17 - it pulls in the title from stack
12:18 - overflow as a description
12:21 - it pulls in the link of the stack
12:22 - overflow question and opposing the
12:24 - origin which is a pieces chrome
12:26 - extension
12:27 - and depending on what extension or what
12:30 - integration you save with using pieces
12:32 - it will have a different origin
12:35 - now for search i can add tags so i'm
12:37 - going to add cohort as a tag i'm also
12:40 - going to add sql as a tag
12:42 - i'm going to write cohort and sql as a
12:44 - tag
12:45 - and this is just generally going to help
12:47 - me search better using pieces for
12:49 - developers
12:50 - and now if we go back to vs code
12:53 - we can open our pieces explorer and
12:56 - refresh a tree
12:57 - and if you expand the sql section you'll
12:59 - see the sql snippet we just created
13:02 - which is the cohort
13:04 - analysis cool
13:07 - now the second practical use case i
13:09 - found for pieces integration especially
13:11 - pieces for developers
13:15 - is converting
13:17 - screenshots of code to actual code i can
13:20 - use
13:21 - so oftentimes when i'm watching tutorial
13:23 - videos
13:24 - i don't want to pause the video or leave
13:26 - the video because i'm really trying to
13:28 - understand the subject i'm learning
13:30 - but i do want to take a piece of code or
13:32 - copy the piece of code for safe keeping
13:35 - or i just want to run it locally to test
13:37 - it out while i'm watching the video
13:39 - pieces can be really useful for this
13:42 - so this particular video is a video on
13:44 - free code camp that just came out for
13:47 - building a live stream using flutter
13:50 - i'm going to copy these three lines of
13:51 - code which is dart
13:55 - and i'm going to convert that
13:57 - to code using pieces for developers
14:00 - so immediately when i drag the
14:02 - screenshot over to pieces for developers
14:04 - it identifies it as an image with dart
14:07 - there's this option to view as code on
14:10 - the right hand side i'm going to go
14:12 - ahead and click that
14:14 - what i get is copyable code
14:18 - from pieces for developers straight from
14:20 - the screenshot
14:22 - and just to show you i'm going to open
14:24 - up
14:25 - my ide
14:28 - i'm going to copy it and you can see i
14:29 - copied that code straight from pieces
14:32 - for developers
14:38 - better comments is a vs code extension
14:40 - that improves your comments by helping
14:42 - you annotate and document code more
14:44 - efficiently using a custom tagging
14:47 - system after you're done installing
14:49 - better comment
14:50 - you're going to want to open up your
14:51 - command palette
14:55 - and type in open settings and you're
14:58 - going to get this json option let's go
15:00 - ahead and click that
15:02 - so after we click that we're going to
15:05 - type better comments
15:07 - and intellisense is going to kick in and
15:09 - show this bettercomments.tag
15:12 - go ahead and pick that
15:14 - and this is going to show all the
15:15 - default settings for better comments
15:18 - so there's a couple tags that come out
15:20 - of the box for better comments
15:22 - there's the alert tag using an
15:25 - exclamation mark there's a question
15:28 - there's a commenting tag there's a to-do
15:30 - tag and there's a catch-all tag
15:33 - and within a tag
15:35 - there's a color property there's a
15:37 - strikethrough an underline a background
15:39 - color a bold and italic property and
15:42 - each of these can be manipulated
15:44 - differently
15:45 - in order to make a unique tag that
15:47 - anyone can identify in your code system
15:50 - or can be made for you to read easier
15:55 - so before we go ahead and dive into code
15:58 - let's add an additional tag here and
16:00 - we're going to create a bug tag
16:05 - and then i'm going to change the color
16:07 - so we can identify this to some random
16:09 - color here
16:10 - go ahead and save this file
16:12 - and i'm also going to reload my window
16:14 - again just so this kicks in
16:18 - cool so that bug tag should show up in
16:20 - our code
16:21 - what we're going to do is suppose we
16:23 - just want to add a comment on line
16:26 - 15
16:28 - so i want to add a comment saying this
16:29 - is a bug and it has a race condition so
16:32 - bug
16:33 - fix race
16:34 - condition here
16:38 - and
16:39 - now better comments is taking the tag
16:42 - from the settings.json file and applying
16:45 - the properties we set over there
16:47 - immediately what i'll be able to tell
16:49 - with the use of better comments is that
16:51 - any pink comment is probably
16:52 - documentation for a bug
16:54 - and suppose this race condition is just
16:57 - you know it's a very big deal and we
16:59 - want to make sure people know about this
17:01 - we can switch it to an alert
17:04 - and it changes to that orangish color
17:08 - that was set by better comments we can
17:10 - also look at different tags like a
17:12 - question mark which is blue
17:14 - and you could change each of these the
17:16 - way you want to in our settings.json
17:18 - file
17:20 - say you know we had a bug comment
17:22 - and now we've decided this bug is fixed
17:24 - but we want to leave the comment in the
17:26 - code base
17:27 - we can use the better comments
17:28 - strikethrough feature and it will just
17:30 - strike it through without getting rid of
17:32 - the comment
17:34 - so essentially what better comments has
17:36 - done is it's made it easier to visualize
17:39 - any comments in your code base and if
17:41 - you're using similar settings or if
17:43 - everyone on your team is using it now
17:45 - they're going to be able to associate
17:47 - different color comments
17:49 - to different tags and different problems
17:54 - let's just admit it
17:56 - we all end up console.logging a bunch
17:58 - when we're trying to find an error or a
18:00 - bug and i'd love to say i use a debugger
18:02 - every time but that's just not the case
18:05 - and that's where turbo console log comes
18:07 - into play
18:08 - turbo console log is basically a vs code
18:10 - extension that makes logging a lot
18:12 - easier
18:13 - you can easily add detailed console.log
18:16 - messages
18:17 - delete these messages all at once and
18:19 - even comment them out altogether
18:22 - so i'm going to dive in real quick
18:24 - basically suppose that there is a bug
18:26 - i'm trying to find on this calendar.view
18:28 - file
18:29 - and i want to console.log a few things
18:32 - that might help me track down this bug
18:34 - i'm going to go ahead and highlight a
18:36 - couple variables and i'm going to use
18:38 - turbo console log
18:40 - to help me create logging messages for
18:42 - them
18:43 - so for this event variable
18:45 - i'm going to press
18:47 - control option l
18:49 - and that will create a logging message
18:51 - for me on mac
18:53 - for windows users you're going to do
18:55 - control alt l
18:57 - and then i'll pick a couple
18:59 - more variables i'll do this event here
19:02 - control option l
19:04 - i'll do this
19:06 - type here
19:07 - control option l
19:10 - and now we have a couple console.logging
19:12 - statements
19:13 - cool this is what a file ends up looking
19:15 - like and if we look at these console.log
19:18 - statements what we have is each
19:20 - console.log message has the file name
19:23 - the line number associated with the
19:25 - comment the function
19:27 - and then the exact variable name
19:30 - so now suppose
19:32 - we think we've solved the problem we're
19:35 - trying to track down and we want to
19:37 - comment all these lines out to make sure
19:38 - the code works without getting all that
19:40 - extra noise
19:42 - for mac users you want to do option
19:44 - shift c
19:45 - and for windows users you want to do alt
19:47 - shift c so we're going to do option
19:49 - shift c since i'm on mac
19:51 - and now we've commented out all lines
19:54 - the only thing to remember here
19:56 - or the only thing to know
19:58 - is that all these keyboard shortcuts i'm
20:01 - showing you will only work for logging
20:03 - statements created by turbo console log
20:06 - if you're creating your own logging
20:07 - statement
20:08 - and then also creating some by turbo
20:10 - console log
20:12 - these keyboard shortcuts won't work for
20:14 - the ones you created yourself
20:16 - now after we've commented all these
20:19 - console.logging statements we've now
20:21 - realized that we haven't tracked down
20:22 - the error
20:23 - so we want to get these back in action
20:26 - for mac users you would want to do
20:29 - option shift u and for windows users you
20:31 - want to do alt shift u and that will
20:34 - uncomment all those commented
20:36 - console.log statements
20:39 - so the last thing left here is you know
20:41 - you're done debugging you want to get
20:43 - rid of all these console.logs
20:45 - historically the way i usually do this
20:47 - is i just search for them and get rid of
20:49 - them through a search but
20:51 - with turbo console log all you need to
20:54 - do is press option shift d for mac or
20:56 - alt shift d for windows
20:59 - and it will get rid of all
21:01 - console.logging statements at once
21:07 - code runner is a vs code extension that
21:09 - allows you to run code snippets and
21:10 - files easily with just a highlight and a
21:13 - right click
21:15 - so i'm going to go ahead and open this
21:17 - loop.py file and show you how code
21:19 - runner works
21:21 - let's say i have this function in my
21:22 - code it's called create list and
21:24 - basically it just creates an array or
21:26 - list of numbers from 0 through 9.
21:30 - i'm going to show you how this works
21:31 - right now i'm just going to print
21:34 - this list
21:36 - and use code runner highlight all this
21:38 - code and just
21:40 - right click run code
21:43 - cool it showed me that list
21:45 - zero one two three four five six seven
21:47 - eight nine
21:49 - and let's say you know in a practical
21:51 - scenario i'm looking at this code and
21:52 - i'm like wow i can actually refactor
21:54 - this to be a lot better but first i want
21:56 - to make sure it's being refactored
21:58 - correctly
21:59 - so what i'm going to do is make my
22:02 - refactor my refactor is a list
22:04 - comprehension so i'm going to say i for
22:07 - i in range 10
22:09 - and let's just make sure this is
22:11 - returning the same thing as our final
22:13 - variable over here
22:15 - i'm going to go ahead and highlight this
22:16 - again real quick
22:18 - run code
22:20 - i see the same result for both
22:23 - so now all i'm going to do is
22:26 - take my refactored code put it in the
22:28 - return value and get rid of all this
22:30 - extraneous code
22:33 - and as easy as that i made the refactor
22:35 - and now i know it works and hopefully
22:37 - after this i tested against my tests and
22:40 - that also confirmed it works but i've
22:42 - often just found code runner really
22:43 - helpful when i'm trying to make these
22:45 - quick refactors and get an immediate
22:47 - response on whether this change is
22:48 - working or not
22:53 - as developers we know the importance of
22:55 - fast applications and websites and one
22:57 - of the things that affects performance
23:00 - is the size of your bundles
23:02 - now
23:03 - a slow application or website can lead
23:06 - to lower seo rankings more users
23:09 - bouncing off your websites or
23:10 - applications and just generally a bad
23:12 - user experience so that's where import
23:14 - cost comes into play import cost forces
23:17 - you to look at the size of your
23:19 - third-party javascript packages straight
23:21 - in your editor and you can fix any large
23:24 - imports right away so after you've
23:26 - installed import cost go ahead and open
23:29 - a js file
23:30 - in my case i have this main.js file with
23:33 - a couple third-party imports
23:36 - what i immediately notice is lowdash is
23:38 - my largest package but i'm only taking
23:41 - this for each function
23:43 - so how can i make this smaller
23:45 - i can make this smaller by maybe
23:50 - just deconstructing
23:52 - no that doesn't exactly work
23:54 - um
23:55 - import cost says it hasn't really made a
23:57 - difference in the size of the package
24:00 - i'm importing well let's use a sub
24:02 - module to just grab this for each
24:04 - function
24:06 - and there we go
24:07 - now it's down to 5.7 kilobytes and in
24:10 - real time import cost tells me
24:13 - that i have made my bundle smaller and
24:15 - this just instills best practices so
24:18 - when you're pushing up a new application
24:20 - or when you're pushing up a new website
24:21 - you're making sure your third-party
24:23 - packages are not bloating your bundle
24:29 - now prettier is an opinionated code
24:31 - formatter for various web development
24:33 - languages such as javascript typescript
24:36 - jsx etc my prettier setup in a way where
24:39 - it formats all javascript files upon it
24:41 - being saved which is just a huge
24:43 - convenience because it enforces code
24:45 - styling that i've customized through my
24:47 - own settings
24:49 - now there's two caveats to prettier the
24:51 - first caveat being that if you don't
24:53 - like your code being rewritten which is
24:56 - essentially what prettier does with its
24:58 - automated code formatting you might not
25:00 - like it so much it can be often really
25:03 - difficult to set up with a linter but
25:05 - once you get it set up it could be
25:07 - great in conjunction with eslint which
25:10 - is the next extension we'll talk about
25:12 - to start off we're going to look at
25:13 - prettier settings which will dictate how
25:15 - prettier will format its own files
25:17 - so on mac you're going to do command
25:19 - comma
25:20 - on windows you're going to do control
25:22 - comma
25:25 - and you can type in prettier
25:28 - and it's going to open all the prettier
25:30 - related settings
25:32 - there's a setting for arrow functions
25:34 - there's a setting for bracket spacing
25:37 - and so on and so forth
25:40 - i'm just going to go with the default
25:41 - settings for the sake of this video but
25:44 - if you're inclined to use a customized
25:46 - settings file or you want some sort of
25:49 - customization so your prettier doesn't
25:51 - overwrite some styling that you're used
25:54 - to you can go ahead and customize your
25:56 - prettier what we're going to want to do
25:58 - next is search for format on save up
26:01 - here
26:04 - and you want to make sure this box is
26:06 - checked
26:06 - what it's essentially going to allow you
26:08 - to do
26:09 - is format the file
26:11 - on save using your prettier settings
26:15 - now the last thing i want to touch on
26:17 - before i show you a demo of prettier
26:20 - is that
26:21 - sometimes i've struggled to set up
26:22 - prettier because another extension
26:24 - conflicts with it in my case the
26:25 - extension was beater a view extension
26:28 - and i had to set it up in a way to let
26:29 - that extension know that prettier is
26:31 - going to be the default formatter
26:34 - so i'm going to show you how i did that
26:36 - i'm going to open my settings.json file
26:40 - and essentially what i did is there's
26:41 - some vendor settings that sets a default
26:44 - formatter
26:45 - for all the files that i want prettier
26:47 - to format
26:48 - i just specify that prettier is the
26:50 - default formatted for that file not veda
26:54 - so what you want to go ahead and do
26:57 - is if you find that your printer is not
26:59 - working
27:00 - you should check if any of the other
27:02 - extensions you have are conflicting with
27:03 - it
27:04 - so the last thing i'm going to do over
27:06 - here is pop open this calendar.view file
27:09 - and i have a bunch of poorly formatted
27:12 - code
27:13 - i want to format this properly according
27:15 - to the settings i have my prettier
27:17 - configurations i'm going to go ahead and
27:20 - save this file
27:21 - and printer automatically enforces all
27:24 - of its styling
27:26 - as you can see it's pretty seamless and
27:28 - is often used in conjunction with the
27:30 - linter eslint which is going to be the
27:32 - next extension we're going to talk about
27:38 - the eslint package is a linter and
27:40 - formatter that statically analyzes
27:42 - javascript code to find problems
27:45 - these problems can be both stylistic and
27:47 - coding ones
27:49 - some of the coding ones are stuff like
27:51 - a missing variable name or using a let
27:54 - where a const makes more sense now in
27:56 - this video we'll be talking about the
27:57 - eslint extension mostly which works with
28:00 - the eslint package to help you visualize
28:03 - linting errors along with suggestions on
28:05 - how to fix them and the vs code
28:07 - extension for eslint gives you quick
28:10 - fixes directly in the editor which are
28:12 - super helpful in picking up mistakes or
28:14 - poorly written code in real time
28:18 - so to get started we'll have to make
28:19 - sure our project has eslint first and we
28:22 - also have to make sure that the eslint
28:24 - package is installed globally
28:27 - to do so you can go ahead and run this
28:29 - command over here which is npm install
28:33 - dash g eslint to install it globally
28:38 - and then in my case i already have it
28:40 - installed globally so i'm going to go to
28:43 - the next step which is bootstrapping my
28:45 - project with eslint
28:48 - so after it's installed globally go
28:50 - ahead and type in eslint dash init
28:54 - and you're going to be prompted with how
28:56 - to set up eslint for your project
28:58 - in my case i want the full capabilities
29:01 - of eslint so i want to check it for
29:02 - syntax find problems and enforce code
29:05 - styles
29:07 - and then my modules are javascript
29:09 - modules
29:11 - the framework i'm using for the calendar
29:13 - app is
29:14 - vue.js
29:15 - my project does not have typescript
29:18 - it's running in the browser
29:20 - and i want to go ahead and use a popular
29:21 - style guide if you want to answer
29:23 - questions about your style you can go
29:25 - ahead and do that it'll allow you to
29:27 - customize eslint more than otherwise but
29:30 - i'm going to go ahead and pick the
29:32 - airbnb style guide
29:34 - and the final thing i'm going to pick
29:35 - here
29:36 - is i want my config file to be json
29:41 - and i want to go ahead and also make
29:43 - sure i have all pure dependencies
29:45 - installed
29:48 - so once that's done running what we're
29:50 - going to see on our left hand side in
29:51 - the file tree
29:53 - is a new file called eslintrc.json
29:57 - and this has all the configurations that
29:59 - we just talked about
30:01 - it's the exact setup i had through all
30:04 - those prompts
30:05 - and now what i'm going to want to do is
30:06 - speaking from experience is add in
30:08 - eslint ignore file so i'm going to touch
30:12 - dot eslint ignore
30:17 - and eslint is automatically going to
30:19 - lend some files i don't want linted
30:22 - and the dot eslint ignore file is going
30:25 - to make sure eslint ignores those
30:28 - particular files that i specify so i'm
30:30 - going to go ahead and add node modules
30:32 - as a directory i don't want linted
30:35 - src slash assets
30:37 - and then the public directory
30:40 - save that
30:42 - and the final thing we want to do is
30:44 - make sure eslint the extension is
30:47 - installed
30:48 - in my case i already have it installed
30:50 - and after all that is done
30:53 - you can go ahead and
30:56 - reload
30:58 - your window
31:08 - and you're going to see eslint tick
31:09 - effect
31:11 - so what you immediately see here
31:14 - is that there are a bunch of errors that
31:17 - eslint has picked up on
31:19 - and i'm going to go through and fix a
31:20 - couple just to show how eastlint works
31:23 - i'm going to go ahead and hover over
31:25 - this first one which is on the snapshot
31:27 - variable
31:28 - it shows a brief visualization of what
31:31 - the problem is you can also click view
31:33 - problem
31:35 - and it'll give an expanded message it
31:37 - also shows the eslint rule
31:39 - that is making this show up you can
31:41 - click on this rule
31:43 - and it'll open the browser to show you a
31:45 - specification of what this rule exactly
31:48 - is in eslint documentation
31:53 - so now we see snapshot is never
31:56 - reassigned use constant set okay that
31:58 - makes sense so i want to fix this real
32:00 - quick what's the way to do this well you
32:03 - just hover over again
32:04 - there's this quick fix option
32:06 - you get a bunch of options here you
32:09 - could fix all prefer const problems at
32:11 - once which would take care of a lot of
32:13 - the problems in this file you could fix
32:15 - this one in particular you can disable
32:18 - it so eslint just ignores this error for
32:20 - once
32:22 - you could show documentation for the
32:23 - file and finally you could fix all
32:25 - autofixable problems which would take
32:28 - care of a lot of this file so in this
32:31 - case i'm just going to fix this one
32:33 - const problem
32:35 - and immediately what we're going to see
32:36 - is eslint changes this let to a const
32:39 - and now that error is gone
32:42 - now we'll go to the next one
32:44 - hover over
32:47 - quick fix this
32:49 - and we'll just fix all auto fixable
32:51 - problems
32:52 - and you can see that most the errors are
32:54 - gone
32:56 - i know this seems a little messy right
32:58 - now and that's just because i
33:00 - bootstrapped the whole project
33:02 - at once
33:03 - but often linters are set up in the
33:05 - beginning of the project so in practice
33:07 - you would probably do a lot of this
33:09 - during project setup and in real time
33:12 - you would get these errors and you would
33:13 - just fix them so generally the vs code
33:16 - extension has allowed me to
33:18 - pick and choose where to fix my problems
33:20 - but also enforces best coding practices
33:22 - like the ones i just showed you
33:27 - the last extension i want to talk about
33:29 - is docker docker is a containerization
33:32 - platform that developers use to deliver
33:34 - applications uniformly across multiple
33:36 - environments now if you don't know much
33:39 - about docker outside of this tutorial i
33:41 - highly encourage you to learn more about
33:43 - it before looking at the extension
33:45 - because it just won't make a ton of
33:46 - sense if you have docker downloaded
33:48 - locally already you can go ahead and
33:50 - install this extension as well and it's
33:53 - published by microsoft and that's how
33:54 - you're going to know you're installing
33:55 - the right one
33:57 - if you don't have docker installed
33:59 - locally and you know how to use docker
34:01 - be sure to download it from docker.com
34:04 - and you'll be able to install by getting
34:06 - started
34:07 - once the extension is installed one of
34:09 - the first things you'll notice is a new
34:11 - icon on the left hand side
34:13 - it's going to be one of the docker whale
34:16 - and that's going to signify that you
34:18 - have the installation at docker and
34:20 - you're going to see this new left pane
34:22 - on the side
34:23 - that shows you various commands you can
34:25 - run in docker before we get to this left
34:28 - pane we're going to take a look at the
34:29 - command palette because this is a place
34:31 - where you can run a lot of docker
34:33 - command that the extension powers so i'm
34:36 - going to go ahead and load the command
34:38 - palette up
34:39 - and i'm going to type in docker
34:42 - and what you're going to see
34:43 - is many many docker commands you're
34:45 - going to see a command to prune a
34:47 - container a command to add docker files
34:49 - to your workspace
34:51 - a command to print the system and so on
34:53 - and so forth
34:55 - so what i want to do
34:57 - is
34:58 - generate a docker file for this repo
35:01 - that i'm working on because i want to
35:02 - containerize my application
35:05 - so all i'm going to do is type in docker
35:07 - and then files and i'm going to have two
35:09 - options one to add docker files to my
35:11 - workspace or one to add docker compose
35:14 - files in this case i'm not working with
35:17 - multiple containers i just want to
35:19 - containerize this one repo and this one
35:21 - application so i just want a single
35:23 - docker file so i want to add docker
35:25 - files to my workspace the first option
35:27 - i'm going to click that now my
35:30 - application is probably going to work on
35:32 - a node.js application platform so that's
35:34 - what i'm going to pick for my base image
35:36 - here
35:37 - i have a package.json file in my repo so
35:40 - i'm going to pick that
35:42 - i'm going to agree to port 3000
35:44 - i do not want to include an optional
35:46 - docker compose file because i don't need
35:47 - it
35:49 - and what we're going to see on the left
35:51 - side when we open our tree is there's
35:54 - going to be a newly generated docker
35:56 - file here we see the docker ignore that
35:58 - gets populated in and now we can click
36:01 - the docker file
36:02 - and we have a brand new docker file here
36:04 - that should help us containerize
36:07 - this application
36:09 - we'll also notice if we interact with
36:11 - this docker file that there's some
36:12 - built-in intellisense using vs code's
36:15 - native intellisense
36:17 - basically if you go in this docker file
36:19 - and you type in something like run which
36:21 - is a docker command vs code's built-in
36:24 - intellisense will pick up that this is a
36:26 - docker command and it's going to show
36:28 - you some documentation for that specific
36:30 - command
36:31 - which is really cool and really handy
36:33 - all the time
36:35 - now if we go back to the docker will
36:37 - we're going to look at this pane on the
36:38 - left hand side and the first thing we're
36:40 - going to notice is that there's a
36:42 - container running for me and that's just
36:44 - the getting started container
36:46 - that comes with the docker desktop app
36:49 - what i'm going to do is stop this
36:51 - container directly in my vs code editor
36:54 - and when i'm hovering over it to do this
36:56 - i get a better visualization of
36:58 - information regarding this particular
37:00 - container
37:01 - including the name of the container the
37:03 - image the ports it's running on and so
37:05 - on and so forth i'm going to go ahead
37:07 - and stop this by right clicking and then
37:10 - pressing stop
37:12 - and it's going to stop the container and
37:14 - now what i can do is i can also
37:17 - decide i want to prune this container i
37:19 - don't even want to stop it i just want
37:20 - to make sure it's completely gone to
37:22 - clean up my setup
37:23 - so i'm gonna go ahead and prune this
37:26 - container in the command palette
37:29 - it's gonna ask are you sure you want to
37:31 - remove all stopped containers i'm gonna
37:32 - say yes
37:36 - and i've removed that getting started
37:38 - container
37:40 - now if you keep on looking at the left
37:42 - pane you're going to see there's an
37:44 - images options
37:46 - in my particular case i only have the
37:48 - getting started image and if you expand
37:51 - the images
37:52 - you're gonna get each image tag
37:55 - i only have the latest tag and that's
37:57 - why it's only showing a singular image
37:59 - you could also set your extension up to
38:00 - be synced with a registry
38:03 - i'm synced with an azure registry many
38:05 - people use aws and docker hub you can go
38:09 - ahead and do that and basically what
38:11 - they'll allow you to do is push docker
38:13 - images straight to your registries from
38:15 - vs code
38:17 - and there's many more advanced features
38:19 - that you can pull off here in vs code
38:21 - using the docker vs code extension like
38:24 - volumes and networks and so on and so
38:26 - forth so it's really incredible how much
38:29 - power vs code and the extension
38:31 - particularly gives you with docker once
38:34 - you have the docker extension installed
38:36 - in your vs code editor you get built-in
38:39 - intellisense with docker you get the
38:42 - ability to stop and start containers
38:44 - straight in the editor you get the
38:46 - ability to set up multiple containers
38:49 - using docker compose envious code and
38:52 - you can also interact with your registry
38:54 - without ever leaving vs code
38:57 - so that's going to be it for this video
38:58 - if you like this video please give it a
39:00 - like and also be sure to subscribe to
39:02 - free code camp there's always a variety
39:04 - of content coming out and i've
39:06 - personally learned a ton from it and
39:08 - thanks for watching