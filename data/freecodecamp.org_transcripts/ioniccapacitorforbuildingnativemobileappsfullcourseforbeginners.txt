00:00 - welcome to this comprehensive video
00:01 - course on building native mobile
00:03 - applications using ionic and capacitor
00:07 - you're in great hands with an expert
00:09 - instructor Simon Grimm who is an ionic
00:12 - developer expert and an experienced
00:14 - ionic instructor this course will guide
00:17 - you step by step from getting started
00:19 - with ionic and capacitor to deploying
00:21 - your cross-platform app on various
00:23 - platforms ensuring you gain the skills
00:26 - needed to create impressive mobile
00:28 - applications get ready to dive into a
00:31 - world of ionic components animations
00:33 - gestures and more hey freeco campers
00:36 - what's up this is Simon from the ionic
00:38 - Academy bringing you up action-packed
00:40 - course on building mobile applications
00:42 - with the ionic framework and capacitor
00:45 - in this course you will learn how to use
00:47 - the ionic framework in combination with
00:49 - capacitor to build powerful
00:51 - cross-platform applications based on
00:54 - existing HTML JavaScript and CSS skills
00:57 - yes that's right you only need to be a
00:59 - web developed had two built native
01:01 - applications in today's world so what
01:03 - we're going to build along this course
01:04 - is a simple demonstration of what's
01:07 - possible with ionic we're going to talk
01:09 - about routing layouting we're going to
01:11 - use tons of components and we're going
01:12 - to build the simple flow which is very
01:14 - common in today's applications like
01:16 - having a login and registration page and
01:18 - then having some sort of different
01:20 - inside area within the inside area we
01:22 - will then also use a bunch of ionic
01:24 - components to see the power of ionic
01:26 - we're going to make API calls but
01:28 - overall you just need some limited
01:30 - experience with HTML JavaScript CSS and
01:34 - the react framework we will use ionic
01:36 - react along the course but you could
01:37 - actually also use ionic with angular
01:39 - which is very popular with view or with
01:41 - no framework at all however since react
01:43 - is most popular on the market and you
01:45 - probably already know the basics we're
01:46 - going to use it but trust me you really
01:49 - don't need to know a lot more about
01:51 - react besides use State and use ref and
01:53 - how a page actually works if you want to
01:55 - learn ionic even faster check out the
01:57 - ionicacademy.com which is my online
01:59 - School geared 100 towards ionic
02:03 - developers with tons of courses
02:04 - templates and a private Community I help
02:06 - developers bring their web development
02:09 - skills into ioni and enable them to
02:11 - build powerful native applications for
02:13 - IOS and Android from one code base so
02:16 - check it out ionicacademy.com and if you
02:18 - like the idea of cross-platform app
02:19 - development also head over to my own
02:22 - YouTube channel which you can find at
02:23 - Galaxy's underscore Dev where I upload a
02:26 - video every week about cross-platform
02:27 - development topics web development
02:29 - topics and also live stream usually
02:31 - every Thursday now without further Ado
02:33 - let's dive straight into the course and
02:35 - build an epic iOS Android web and even
02:39 - native desktop application with ionic
02:42 - and capacitor to get started with ionic
02:44 - you first of all need to install the
02:46 - command line interface so simply copy
02:48 - over this or type in npm install G for
02:53 - globally the ionic CLI the ionic CLI is
02:56 - required because this will help us to
02:58 - boot through a project to create
02:59 - template to add pages to run our
03:02 - application and it just offers a ton of
03:04 - helpful things for our application and
03:07 - once you've installed this you can
03:08 - follow this up with ionic start which
03:10 - usually starts a new project with a
03:12 - specific name and template so I'm just
03:14 - going to call this one my app as a
03:17 - template I want to use the blank
03:18 - template so there's also the site menu a
03:20 - tab bar but I want to show you how to
03:22 - build that in a later point of this
03:24 - course so we're going to start with a
03:25 - blank template which is just one page in
03:27 - our application and then we're going to
03:29 - follow this up with dash dash type react
03:33 - because we could also use angular we
03:35 - could use view or we could use no
03:36 - framework at all and this will now
03:38 - bootstrap a new application so let's
03:41 - take a look at this ionic is marketed as
03:43 - the mobile SDK for the web it is an open
03:45 - source UI toolkit and that is what you
03:48 - can think of ionic I think in the best
03:51 - way ionic is a set of components and
03:54 - helpful utilities to build awesome
03:57 - looking native mobile applications for
03:59 - both iOS as an Android with adaptive
04:01 - styling so applications will look
04:04 - different on IOS and Android without you
04:06 - having to do actually a thing for that
04:08 - that is pretty cool so once your
04:11 - installation or setup is finished you
04:13 - can open your application with a
04:15 - preferred terminal now with a preferred
04:17 - code editor in my case this is Visual
04:20 - Studio code but of course if you prefer
04:22 - uh something like webstorm or whatever
04:25 - you have you can use that as well
04:27 - however ionic itself also recommends
04:30 - Visual Studio code there's also an ionic
04:34 - extension so under the extensions you
04:37 - can use you can search for Ionic if
04:39 - you're not a fan of the command line
04:41 - it's pretty nice and it can do a few
04:43 - things for you however most of the time
04:45 - we're just gonna do it with the CLI
04:47 - because the extension is just using the
04:50 - CLI usually under the hood now we're
04:53 - going to talk about our project in a
04:54 - second let's figure out how this project
04:57 - looks by running ionic served in our new
04:59 - project because this is the fastest way
05:02 - to bring up our new ionic application
05:04 - and here it is ready to start an app
05:06 - this is our ionic application using the
05:10 - read preview now what is going on this
05:13 - is basically a website that you could
05:15 - have created with create react app or
05:17 - anything else it is just a website we
05:20 - have one pad slash home and it displays
05:23 - this page which actually looks pretty
05:24 - nice already it's kind of responsive so
05:27 - as we can see this fits into the middle
05:29 - of the screen and well it is a website
05:33 - so what I want to show you really
05:35 - quickly in the beginning is that we're
05:38 - not just working on a website
05:41 - although the live River usually looks
05:43 - like a website we are creating native
05:45 - applications with our web development
05:48 - skills so let's do this
05:50 - um let's go back to the editor and I'm
05:52 - going to put this a bit to the side and
05:54 - I'm gonna uh where's actually my preview
05:56 - of the application there it is I just
05:58 - want to quickly show you that this is
06:00 - actually as always in most project using
06:02 - live reload so underswords you're gonna
06:05 - find all the important parts of the
06:07 - application you're gonna find the home
06:09 - page here
06:10 - you don't have to worry at this point
06:12 - about the different text in here but
06:14 - what we can see is we for example have a
06:16 - blank here in the header so I could say
06:18 - free code Camp hit save and it will
06:21 - immediately update here so this is the
06:24 - page where we could put in our hello
06:27 - world code just to see that something on
06:30 - the screen is actually going on if you
06:32 - just want to get your hands dirty real
06:34 - quickly
06:35 - however before we do any kind of
06:37 - development in this project I want to
06:39 - show you the most important part which
06:41 - you most likely came for and that is how
06:43 - you can build a native application from
06:46 - your web code and for this we're going
06:48 - to have to use another tool called
06:50 - capacitor now capacitor actually the
06:54 - landing page looks very similar to ionic
06:56 - well capacitor was also developed by the
06:59 - ionic company so you probably heard
07:02 - about Cordova in the past if you've been
07:04 - longer if you've been around for a
07:06 - longer time in the cross platform
07:08 - development and capacitor basically
07:10 - helps you to wrap your web application
07:14 - into a native container and then deploy
07:16 - it on IOS and Android or as a
07:19 - progressive web application
07:21 - Cordova did this as well in the past
07:23 - however capacitor has a bit different
07:25 - philosophy and I think capacitor is the
07:27 - way forward in the future as more and
07:28 - more people are actually switching over
07:30 - to capacitor and it's also what
07:32 - recommended for Ionic one quick note
07:35 - capacitor is not just made for Ionic you
07:38 - can actually use any of your Web
07:40 - projects so let's say you have some
07:41 - random angular project or you have some
07:43 - react project you can just install
07:45 - capacitor and use the capacitor tools to
07:49 - wrap your web application in that native
07:51 - container and deploy it as a native iOS
07:53 - or Android app so there is no fixed
07:56 - connection between ionic and capacitor
07:58 - it's just that ionic and capacitor work
08:01 - really great together but you could also
08:02 - use your react code with whatever kind
08:05 - of styling layering native based tamagui
08:07 - and then plug in capacitor to build a
08:09 - native app or just use View and tailwind
08:12 - and then install capacitor so there are
08:14 - tons of options however what you get
08:16 - with ionic are a lot of great components
08:20 - so think of I ionic as the components
08:23 - and think of capacitor as the tool to
08:25 - actually build your app so we're going
08:28 - to use a bunch of these cool components
08:30 - later you're gonna see how all of this
08:32 - works how we can customize them and how
08:34 - we can integrate them but to quickly
08:37 - give you a win let's see how we can
08:39 - integrate capacitor into our ionic
08:41 - project so therefore I'm going to kill
08:44 - my live reload and I'm going to run
08:46 - ionic build because ionic build will
08:49 - actually create the first build output
08:51 - of my project right here and this is
08:54 - what capacitor needs to actually set up
08:56 - the project
08:57 - so then we're going to follow this up
09:00 - with ionic cap at iOS so we're adding
09:05 - the native platforms to our project I'm
09:08 - first of all adding the iOS platform and
09:11 - once we've done that I'm gonna also add
09:13 - the Android platform
09:16 - so we gonna end up with two new folders
09:19 - in here IOS and Android and the
09:22 - interesting thing is these folders are
09:24 - simply native projects so if you happen
09:27 - to have any kind of experience with
09:29 - Android or iOS development or if
09:31 - somebody on your team uh knows about it
09:33 - these are really just the native folders
09:36 - so we can now open them which is
09:39 - actually very easy with a CLI so you can
09:41 - go ahead with cap open iOS and then it
09:45 - will open the native project this is
09:48 - what iOS developers using this is xcode
09:51 - and if you want to run your app on an
09:54 - iOS device there's a little uh step you
09:57 - need to take so first of all apparently
10:00 - you need Mech to build for iOS it's
10:04 - there are a few build tools in the cloud
10:05 - but usually if you want to develop
10:07 - you're going to have to use some kind of
10:09 - Mac just get a cheap I'm no not an iMac
10:12 - what's the small thing uh Mac Pro make
10:15 - mini get a make mini ads you really
10:16 - enough if you just want to test Waters
10:19 - and you can probably get a refurbished
10:20 - one and what you want to do then is you
10:23 - want to install xcode so right now this
10:26 - would be xcode 14 you can download this
10:28 - for free from the App Store and
10:30 - additionally you might have to install
10:32 - some environment tools but the ionic
10:35 - documentation for developing on iOS is
10:37 - pretty good
10:39 - um I think actually you just need to
10:40 - install xcode and that's pretty much it
10:43 - and then you should be fine for Android
10:46 - you're gonna have to install Android
10:48 - Studio so you can download Android
10:51 - Studio for free as well and in your
10:54 - project just like we did before you can
10:56 - also run cap open Android which would
10:59 - open the native Android project yes I
11:01 - want to open this oh actually updated
11:04 - Android Studio just yesterday so yeah I
11:06 - want to open now from the internet that
11:07 - sounds great uh
11:09 - uh yeah I want to trust my project as
11:12 - well and there we go I now have a native
11:15 - project in here so every native
11:17 - developer could work with these tools
11:19 - and we're gonna learn how to use them as
11:21 - well react native or Expo abstract this
11:24 - away by giving you an application which
11:26 - you can run your application ionic is
11:28 - actually working on something as well
11:30 - called Nexus it also does work and maybe
11:32 - we want to use it later but for now I'm
11:34 - going to show you how you can easily
11:37 - deploy your apps to Android and iOS to
11:40 - give you a quick win so for iOS
11:44 - um we're going to go into our
11:45 - application uh I think we just added the
11:47 - platforms right ionic cap at Android
11:49 - right so let's go ahead with ionic cap
11:53 - sync
11:55 - what is command does is basically
11:58 - syncing your distroller into the iOS
12:01 - folder so it's just copying over the
12:03 - assets from your build into the native
12:07 - platform and we can do the same for
12:08 - Android and on top of that it is doing a
12:11 - bit more because capacitor has some
12:12 - plugins that we're going to talk about
12:14 - later which are like the entry level for
12:18 - you as a web developer into the native
12:20 - features like GPS bluetooth camera
12:23 - contacts you can access all of these
12:26 - usually native device functionalities
12:28 - from JavaScript through capacitor so
12:30 - capacitor is one the tool to build your
12:33 - app and two the bridge between your web
12:35 - code and these plugins and the sync
12:38 - command will just make sure that
12:39 - everything is correctly installed and
12:42 - just like we did this uh yeah we just do
12:45 - it ionic capsync it should be synced for
12:47 - both Android and iOS so let's get back
12:50 - to xcode
12:51 - um and once you're in xcode you can
12:54 - select from different devices or you
12:55 - could actually also plug in your own
12:57 - device however I'm just going to use the
12:59 - simulator because the iOS simulator is
13:02 - pretty great and we can use that if we
13:04 - want to now for Android you can also
13:07 - create a virtual device in Android
13:10 - Studio however for Android I kinda
13:12 - prefer to actually use my own device So
13:16 - within xcode within Android Studio I'm
13:19 - just going to select Google pixel my
13:21 - connected device and run app and I'm
13:24 - gonna also start another application so
13:27 - I can give you the screen of my device
13:31 - now here's already the iPhone 14
13:34 - simulator starting up and voila this is
13:39 - our or your application running as a
13:43 - native application you can see I can
13:45 - minimize this it has the capacitor logo
13:47 - as the app icon in the end we will
13:49 - change this so it looks completely like
13:51 - your own application
13:53 - but you now already have this and
13:57 - there's actually something already going
13:58 - on what's going on we didn't write any
14:00 - code well this is just a preview of the
14:04 - awesomeness of ionic components so if
14:06 - you inspect this ionic page there's not
14:09 - a whole lot going on we just have a like
14:11 - a header area and we have a Content area
14:13 - but just by passing in a few more
14:16 - parameters we got this iOS native
14:19 - looking UI which transitions a title
14:23 - from big into the status bar once again
14:25 - just a little preview of what's possible
14:28 - with ionic so let's see how we can also
14:31 - do this for Android I'm going to start
14:35 - my Android broadcast because the
14:37 - application was deployed and here we go
14:39 - here is the preview of my Android
14:42 - application and you see side by side
14:44 - notes apps look different right so this
14:48 - is another thing about ionic the ionic
14:51 - components render to the underlying
14:53 - platform form styling and we're going to
14:55 - see how we can play around with this and
14:57 - customize it but overall things will
15:00 - look android-like on Android as we can
15:02 - see here in the Android application on
15:04 - the status bar and the text and how
15:06 - everything appears and on iOS it will
15:08 - certainly look different you see the
15:10 - difference here in the status bar very
15:12 - clearly we have the iOS version and we
15:15 - have the Android version side by side
15:17 - coming from just one code base
15:20 - now this is pretty a pretty massive win
15:23 - already if you're just a web developer
15:25 - before at this point you can pretty much
15:27 - say you're able to develop native
15:28 - applications because at the end this is
15:32 - what we do we build our web application
15:34 - with web tools HTML CSS and JavaScript
15:37 - then we deploy it with capacitor as a
15:40 - native app and we can run it and use it
15:42 - just like any other native application
15:46 - now the process we used was well kinda
15:49 - complicated we had to build we had to
15:51 - sync we had to go to the studios and
15:54 - isn't there a better way and in fact yes
15:57 - there's definitely a better way so
15:59 - there's a live reload on a device I'm
16:02 - gonna run this command ioni cap run iOS
16:05 - dash dash live reload dash dash external
16:07 - I don't think you actually need the last
16:09 - Pad but if it's not working give it the
16:12 - public host your local computer IP as
16:15 - well to make this work what is command
16:18 - will do it will ask on which device
16:21 - let's use the iPhone 14 when we use Pro
16:26 - okay
16:27 - and this will do something
16:30 - um pretty cool it will bring up your
16:32 - local preview so in my browser uh
16:36 - where's my preview here we go I can
16:38 - still see the preview because just like
16:40 - before the live reload is working in
16:43 - here but at the same time capacitor will
16:46 - deploy a specific version of my app now
16:48 - to the simulator which is accessing the
16:52 - remote URL basically my own local server
16:55 - so
16:56 - what I can do now is I can have live
16:59 - reload on a device and let's say freedco
17:02 - Camp live
17:04 - actually this is a pretty bad example
17:06 - because this is only showing in here so
17:09 - let's change this to free code cam
17:12 - and we see immediately the change is
17:15 - applied in here so this is something
17:17 - every native developer would be jealous
17:19 - of because you have live reload of your
17:22 - application on a simulator or native
17:24 - device this is really unheard of in the
17:26 - native world I know it works with Expo
17:28 - and react native or flutter uh we all
17:31 - everyone in the cross-platform community
17:32 - knows about this but if you're
17:34 - developing just with swift
17:36 - um this is pretty cool so this helps you
17:39 - to get a preview in the browser play
17:42 - around with it in the best possible way
17:43 - and also see a live preview of your
17:46 - application here and by the way you can
17:49 - also spin this up for Android so you
17:52 - don't have to use iOS whenever I say iOS
17:55 - in these commands you can usually switch
17:57 - it to something else so let me also run
18:00 - the live reload for my Android device
18:03 - and then you're gonna see something
18:05 - which is like even another level Beyond
18:09 - this and that is you can have live
18:11 - reload on different devices at the same
18:14 - time so here we go here's my device now
18:18 - we get some space problems so let me for
18:21 - now bring this to the side and give this
18:24 - editor some space and what I'm going to
18:26 - do is I'm just going to write something
18:27 - in here
18:29 - so let's say I want to change uh the
18:32 - content of this screen
18:34 - let's say I want to change the color of
18:36 - the header bar I'm going to say color
18:39 - equals primary
18:42 - and with just a bit of delay everything
18:46 - updates so nicely uh we currently don't
18:49 - have the update on iOS because it's
18:52 - using this big header let's remove this
18:54 - for the sake of the presentations I'm
18:56 - going to get rid of the special ion
18:58 - header and then we have it the same in
19:01 - all the places and I could change the
19:03 - primary color now to let's say secondary
19:06 - again we're going to get into colors and
19:08 - what this means later on but for now I
19:11 - just want to show you that we can have
19:13 - this live reload on all the platforms we
19:15 - have web we have Android and we have IOS
19:18 - so we're really focusing on all three
19:21 - platforms at the same time how you want
19:24 - to develop is up to you my
19:26 - recommendation is to either use this
19:28 - command and occasionally look into the
19:30 - simulator
19:31 - or just use it and show look at the web
19:34 - preview because that's usually the
19:36 - easiest way sometimes you update stuff
19:38 - and then you want to reload the native
19:40 - platform so it's a bit more complicated
19:42 - and just hitting refresh in here is a
19:44 - lot easier however do as you prefer
19:48 - finally to wrap this up at the beginning
19:51 - and the quick wins we already have I
19:53 - want to give you the tools to debug this
19:56 - application because along the course I
19:58 - might run into problems or you might run
20:00 - into problems and you should understand
20:03 - now how you can actually debug your
20:06 - applications because that's a critical
20:07 - part uh for developing cross-platform
20:11 - apps so for our web I'm going to put the
20:14 - code to the site now for the web you can
20:17 - just use the usual browser debugging
20:20 - tools so on a Mac I can press command
20:23 - option I and this will open the sidebar
20:25 - should be fairly the same in other
20:28 - browsers and Firefox or Safari or
20:31 - whatever you prefer to use I just happen
20:33 - to use Chrome all the time where we have
20:35 - the console and if I put anything in my
20:38 - component here you can just put this at
20:41 - the top level actually don't know let's
20:42 - put it yeah and let's put it in here I
20:46 - see my log from home
20:49 - sweet home there we go right in here now
20:53 - how do I get the lock on these platforms
20:55 - and that is very important because if
20:57 - you want to develop native applications
20:59 - you also need to know how to debug them
21:01 - but that's actually pretty easy
21:04 - so for iOS you can or could check out
21:07 - xcode if you run an application through
21:09 - xcode you would see down here the lock
21:13 - of that application however we don't
21:15 - really see this on reload and I kind of
21:17 - don't like to look at xcode all the time
21:19 - so a better way to handle this is to
21:22 - open Safari and for Safari at the top
21:25 - you can press develop and then select
21:28 - your device
21:30 - so in my case no I don't want to make
21:33 - Safari default I really don't like to
21:35 - alright that was actually a good thing
21:36 - that it happened right now because now I
21:38 - can show you how to how to build this so
21:40 - if you don't see your application if you
21:42 - go to Safari develop and then select
21:45 - your simulator at the top and don't see
21:47 - your application to inspect simply go to
21:49 - the settings of your simulator go to
21:51 - Safari go to the bottom and advance and
21:54 - simply toggle JavaScript on and or off
21:57 - and on again so it definitely needs to
21:59 - be on if you then select your
22:01 - application and from the develop menu
22:03 - you should actually see your application
22:05 - which Len opens a new console inspection
22:08 - window for Safari and in here I can
22:11 - actually press something like reload and
22:14 - I would reload the application in here
22:15 - and as you can see we get the Luxe home
22:17 - sweet home feed connected and some more
22:20 - locks from capacitor so that is how you
22:24 - can debug your native iOS application
22:26 - and still get the web logs of your
22:29 - application and by the way this is the
22:31 - same for the simulator or if you connect
22:34 - a real device so if you connect a real
22:36 - iOS device to your computer and deploy
22:38 - it you by the way also need as far as I
22:40 - know to be enrolled in the iOS Developer
22:42 - program that's a different story and
22:45 - then you can do the same procedure from
22:47 - Safari and debug your application which
22:50 - is called remote debugging so here we
22:53 - got the direct debugging in off or of
22:55 - our webview
22:56 - that was the remote debugging with
22:58 - Safari for iOS and for Android devices
23:01 - you can actually use Chrome and try
23:04 - Chrome
23:06 - slash inspect which should hopefully
23:09 - show up your webview application so
23:11 - remote roller whatever and then simply
23:13 - hit inspect which will open another
23:16 - window I don't really like this preview
23:18 - it never really worked great for me so
23:20 - you can also toggle that off but anyway
23:22 - you're gonna find your application in
23:25 - here and if I hit refresh Yep this is
23:28 - also reloading my native application and
23:31 - giving us the logs so using Chrome
23:33 - inspect is the way to do remote
23:35 - debugging for Android with all of these
23:38 - things in place we have basically
23:40 - reached the first checkpoint the first
23:42 - checkpoint means we've installed ionic
23:44 - we've created our first ionic
23:46 - application we can run it on the browser
23:48 - with live reload and we actually
23:49 - deployed it to Native IOS and Android
23:51 - devices using capacitor and we
23:54 - understand how we can debug our
23:56 - applications using the browser debugging
23:59 - tools make sure you're at this point
24:01 - make sure you have your code editor open
24:03 - with our blank application because we
24:05 - can now die dive into creating the
24:08 - actual ionic application most
24:09 - applications today start with a login
24:11 - page they have a registration page and
24:13 - then they have an inside area and that's
24:14 - exactly what we're going to implement
24:16 - together along in this course so right
24:19 - now we just have one page and we haven't
24:21 - really talked about our folder structure
24:23 - so let's now first of all take a real
24:26 - look at what's going on we got the usual
24:28 - files of a web project we got a wheat
24:30 - config we got typescript configuration
24:32 - files we got an additional ionic
24:34 - configuration which isn't really
24:36 - important but the capacitor config will
24:40 - become more important later once we talk
24:41 - again about capacitor and Native
24:43 - applications besides that we have the
24:46 - usual index.html you see in react
24:48 - application which simply loads our
24:51 - main.tsx and that is actually the entry
24:53 - point to our application so within the
24:56 - main TSX you're going to find that we're
24:57 - looking for the root element and we will
24:59 - render our application in that element
25:01 - I'm actually going to disable react
25:03 - strict mode as this is always triggering
25:05 - twice the the locks in use effect and
25:08 - stuff so you can enable this again in
25:10 - the end for now I'm going to disable it
25:12 - and within our app TSX we're gonna see a
25:16 - lot of imports now this is where ionic
25:18 - really begins
25:20 - in here we're importing the ionic react
25:22 - router which is a package around the
25:24 - router we import all the styling and the
25:27 - utilities and the stuff that ionic needs
25:29 - and we also import and another variables
25:32 - file which specifies like a theme for
25:35 - our application these are CSS variables
25:38 - and we're going to play around with them
25:39 - in a second basically just note that
25:42 - they're used to style your application
25:44 - and then we have a call to set up ionic
25:47 - reactor if you remove this your
25:48 - application won't work at all and then
25:50 - it begins by wrapping our whole object
25:53 - or the whole application in an ion app
25:56 - now by doing this we enable a ton of
25:59 - different things settings that come from
26:02 - ionic page transitions all these cool
26:04 - things come because we are rendering our
26:06 - application as an ion app and the only
26:09 - thing that's happening here is the
26:10 - configuration for the ion react router
26:13 - in fact let's do this for our own route
26:16 - so let's get rid of these settings here
26:19 - and and I want to start with an empty
26:21 - pad and I want to have a login page so
26:24 - let's create a new file I'm going to
26:25 - call this login.tsx and I do have a
26:28 - little snippet for react functional
26:30 - export components so here we go oh no
26:33 - not react
26:34 - ionic react uh page component there we
26:38 - go that makes more sense so this is the
26:41 - login page and Export default login now
26:46 - by the way this comes from an extension
26:49 - let's see
26:50 - called ionic Snippets so if you want
26:53 - that simply install that in Visual
26:55 - Studio code otherwise it's just a quick
26:57 - way to have some code in here and the
26:58 - application is not failing now I've
27:01 - added this new page I will actually get
27:03 - rid of the home page and the home CSS
27:05 - [Music]
27:06 - like that again later but we really want
27:08 - to start at zero also I'm gonna delete
27:11 - these components so those are just
27:13 - components used in that initial app and
27:16 - instead of rendering the home page
27:18 - initially we will now render our login
27:20 - page and I'm pretty sure yes that I
27:23 - should remove this so here we go I
27:25 - should now be able to go to just the
27:27 - empty path and we see a blank page title
27:30 - and the UI goes here so this is the
27:33 - starting point for our login page while
27:36 - we're here let's also add a registration
27:38 - page so register the TSX ionic react
27:42 - page component I'm going to call this
27:43 - one register
27:45 - and then we can include this pad as well
27:48 - we can by the way also say route and
27:52 - then use component and put in register
27:55 - that would work exactly the same but we
27:58 - also yes have to supply the path
28:01 - I think I messed this up and if I now go
28:04 - to slash register
28:07 - um is this slash register I think I had
28:10 - a typo
28:12 - yeah register opens the registration
28:14 - page as well cool
28:17 - um now before we get into the routing
28:19 - let's create a little page and see how
28:21 - we can play around with this so we've
28:22 - already seen that ion app was at the top
28:25 - then we had the ion outlet with the
28:28 - routing information and then we have the
28:30 - ion page now every ion page defines like
28:33 - a page in your native application and if
28:35 - you come from a website well you usually
28:38 - had this huge screen and you had tons of
28:40 - different components and parent
28:41 - components and yeah we can still have
28:42 - these components with react but usually
28:45 - if we're talking about mobile mobile
28:47 - applications this is what we see this is
28:50 - a page of our application or a screen
28:52 - sometimes also called so what this is
28:55 - what you can imagine if you see an ion
28:56 - page now on that page we currently have
28:59 - an ion header which is the header area
29:00 - up here or what we see up here basically
29:03 - the area from the status bar including
29:06 - the title sometimes the menu button
29:07 - supporting buttons or anything else in
29:10 - that area and then below that below the
29:13 - header area we have an ion content area
29:15 - I'm just going to remove this and put
29:18 - something else in here so test
29:20 - there we go oh I'm actually on the
29:22 - register page so I want to go to the
29:24 - blank page there we go test so up here
29:27 - status bar title then we got the main
29:30 - content area which automatically becomes
29:32 - scrollable if this becomes bigger and
29:34 - then we could also have below the ion
29:37 - content an ion footer area that could
29:40 - wrap up our applications so then we had
29:43 - like an ion toolbar
29:45 - um
29:46 - please add the import and all these
29:49 - elements come from the ionic react
29:52 - package as you can see we need to import
29:54 - all of these one by one and right now
29:57 - I'm gonna put something in here we have
29:59 - this toolbar area so those are the three
30:02 - main blocks ion page ion header ion
30:05 - content and folder actually those are
30:06 - four anyway so let's get started and
30:10 - Implement our little form
30:12 - for that I'm gonna add a little function
30:14 - so we don't really do a real login uh
30:17 - we're just gonna do like a fake lock in
30:20 - and this will get an event and then
30:23 - we're gonna do some kind of operation in
30:26 - here
30:27 - um yes we're going to prevent the
30:28 - default of submitting a form and then
30:30 - trigger a little lock message I also
30:33 - don't need the footer area so let's
30:35 - start by creating this view I will also
30:39 - use a bit of styling so for most ionic
30:42 - components you can put in a color so by
30:44 - default we see the header has no color
30:46 - but if we go ahead we see we get access
30:49 - to these colors primary secondary and so
30:52 - on now I can just select some and it
30:54 - would apply The Styling and the color
30:56 - now comes from our variables because
30:58 - this is specified in ionic so we have
31:01 - the definition for primary secondary
31:03 - success and we can change these colors
31:06 - to our needs if we want to and by doing
31:08 - that we can easily re-theme our
31:10 - application so if we use this pattern
31:13 - across the application on buttons and
31:15 - different things you just need to change
31:17 - your color in one place to update the
31:20 - components across the whole application
31:22 - so there's actually a cool tool called
31:25 - the ionic color generator it's hidden
31:28 - here in the documentation down here and
31:31 - you can put in your own colors and then
31:33 - it will give you a nice little export so
31:35 - I used the free codecam colors here I
31:38 - just use the dark colors you could also
31:39 - use the light colors whatever you prefer
31:42 - and then you can grab this object
31:44 - usually actually I was a copy button I
31:46 - don't know it was time for for the copy
31:49 - button to move on so I'm gonna put this
31:52 - in here I don't want to override the
31:56 - other stuff
31:57 - and as a result
31:58 - we should see that my header now comes
32:01 - in this dark green color and as well I
32:04 - could use the primary color which would
32:06 - be this purple color or is it purple
32:09 - yeah I think it's purple do you want to
32:11 - use this I want to think I think we're
32:12 - going to use the green color and we're
32:14 - going to call this free code camp
32:17 - okay here we go this is our login now
32:20 - one particular component of ionic is
32:24 - pretty common and that is an ion card so
32:27 - let's add an ion card
32:29 - and on that ion card I want to add ion
32:32 - card content
32:34 - and within the content we're gonna later
32:36 - Define our form so if I put something in
32:40 - here and yes please update the import
32:42 - this is how an ion cart looks like
32:44 - actually it looks also pretty nice on
32:47 - iOS and if you want to get a quick
32:49 - preview of iOS here's what you can do
32:51 - you can just trigger your development
32:53 - console
32:55 - um then go to the device preview and now
32:58 - simply select the iPhone now it has
33:01 - still the default styling but if you hit
33:03 - refresh you're gonna see that this is
33:05 - now using the iOS styling we will later
33:07 - get you how this magic works and how you
33:09 - can play around with this just know that
33:11 - you can always inspect how your app
33:13 - would look like on iOS or Android by
33:16 - going here if we're not using the
33:18 - inspectron just use the default mode and
33:20 - now hit refresh we would once again get
33:22 - the default Android material design
33:24 - theming so with that in place uh let's
33:28 - create our form the form is a standard
33:32 - form and I want to say on submit it
33:34 - should trigger our do login
33:37 - now I don't really want to use a div
33:39 - element in here because there are other
33:40 - elements that we can use however of
33:43 - course you could use div element just
33:44 - like we used the form we could use any
33:46 - kind of diff element in this place but
33:49 - what I want to do is I want to use an
33:51 - ion input
33:53 - so all of these components can be found
33:56 - inside the component overview there are
33:58 - tons of components and I try my best
34:00 - along this course to show you most if
34:04 - well not all of the available components
34:07 - but really most of the cool components
34:09 - you should definitely check this out in
34:10 - the ionic documentation just to get a
34:13 - feeling for what they have to offer but
34:15 - usually they have pretty much everything
34:17 - that you need to build a native mobile
34:19 - application so an ion input would be of
34:22 - course an input field I'm going to give
34:24 - this the label email and let me let's
34:27 - just close it and see how it looks that
34:29 - could be interesting so by default well
34:31 - we have a pretty boring input with a
34:34 - static email in here now there are
34:37 - things that you can change about these
34:39 - components to make them a lot more
34:42 - awesome and that is something you have
34:44 - to learn if you get into ionic you will
34:46 - not only need to get used to the
34:49 - different components and understand
34:50 - what's available but also how you can
34:53 - actually use them because you can use
34:55 - them in tons of different ways just like
34:57 - we see in the first example this is the
34:59 - first example now
35:01 - um then we got different input Fields
35:03 - number Fields okay that's not too
35:05 - special but then we come to label
35:06 - placement it could be here could be here
35:08 - could be stacked could be floating
35:11 - um we got the clear option uh we got
35:14 - field inputs so all of this is just
35:17 - using the ion input and setting the
35:19 - right properties and I know this now
35:21 - looks very scary and I will never
35:24 - understand what's going on but trust me
35:25 - you will get used to this just write one
35:28 - two three ionic applications for fun do
35:31 - something release them on the stores and
35:32 - you're gonna get used to these things
35:34 - really really quickly
35:36 - so I'm gonna do my best and explain the
35:39 - properties that we're going to use so
35:40 - first of all I'm going to say that this
35:42 - is of the type email this is especially
35:45 - helpful for Native devices because they
35:48 - then know that you should display
35:52 - um that you should display the email
35:54 - keyboards which is a bit different than
35:57 - the usual keyboard
35:59 - additionally what we want to say as well
36:01 - we're going to probably add a
36:03 - placeholder uh so Simon and
36:07 - ionicacademy.com could be the
36:10 - placeholder that already becomes better
36:12 - and I definitely want to have the label
36:15 - placement floating
36:18 - so if we do that it looks like this if
36:20 - you click into it it moves top it's
36:22 - always a pretty nice thing however I
36:25 - also want to have this cool outline fill
36:27 - so let's add fill outline
36:30 - and we got it like this
36:32 - that's already pretty nice isn't it
36:35 - um and then the thing is here is my iOS
36:39 - preview and it looks okay by the way uh
36:43 - I get these at sign now because
36:46 - um we're using the type email here
36:49 - however I don't really like the way it
36:52 - looks so maybe later we can change this
36:54 - again and just don't worry about it too
36:57 - much we're gonna focus on this for now
36:59 - so we have fill outline we have the
37:01 - placeholder let's do the same for a
37:04 - passport field so I'm just gonna copy
37:06 - this over I'm gonna call this one label
37:10 - password
37:12 - type should also be set to password if
37:15 - you don't do this you will get clear
37:17 - text input but now we have the stars in
37:20 - here and you see they're kind of bunched
37:23 - together because I just HTML elements
37:26 - right below each other
37:28 - in those cases
37:30 - you can write some CSS to position them
37:32 - correctly to have like a little Gap or
37:33 - something but actually there are a few
37:36 - ionic utilities that you can also use so
37:38 - if we check out utilities
37:42 - CSS utilities there are a bunch of
37:44 - modifications we got text alignment like
37:47 - text start and Center then we got text
37:50 - transformation lowercase and we got also
37:52 - element placement uh we got floating
37:55 - stuff iron flow left right and what I
37:58 - like most is spacing so just adding ion
38:01 - pending to something or ion margin would
38:05 - work the same ion margin top start and
38:07 - and we can easily add this to our
38:10 - application it's pretty much like using
38:12 - Tailwind CSS utilities so let's try this
38:15 - and to my own input I'm going to add
38:16 - actually I'm going to use the second one
38:19 - I'm going to add the class name ion
38:22 - margin top and as a result we see it
38:26 - gets this nice little separation here
38:28 - which is a fixed value inside of ionic
38:31 - so that looks pretty nice all we need as
38:34 - well for the form is of course a button
38:36 - so let's use an ion button for that and
38:38 - I hope you kind of get a feeling now for
38:40 - most things everything's start with ion
38:43 - you can just give it a try and hope that
38:45 - it works this button will have the type
38:48 - submit
38:49 - so it will trigger the submit on submit
38:52 - of our form and actually get a nice
38:54 - little code completion but I won't I
38:55 - won't use it today uh copilot I won't
38:58 - use you today so let's close the ion
39:02 - button there we go and this one should
39:05 - say log in
39:07 - so
39:08 - um a small button well not probably not
39:10 - the perfect position so what we can do
39:12 - again we can say this should expand the
39:15 - full width there's also an option to use
39:17 - block so block is as you can see a bit
39:21 - more rounded maybe where we go with
39:23 - block today do we want to go with block
39:25 - or full it's a Pity that you can answer
39:26 - we should do this live anyway this
39:29 - button should also have some margin top
39:31 - so I'm going to copy this over to it as
39:33 - well so we have the nice separation here
39:36 - as well
39:37 - and then we also need probably another
39:41 - button to create account by the way we
39:46 - haven't specified a color then it's
39:48 - using the primary color so for our
39:50 - create account we want to probably not
39:53 - use type submit because this shouldn't
39:55 - trigger the submit we want to use let's
39:59 - say the secondary color
40:01 - then we do have the second button in
40:03 - here uh we have the margin top and as
40:06 - well this button should bring us forward
40:08 - to the next page so simply add a router
40:11 - link I'm going to say to slash nope
40:15 - register
40:17 - and then voila if you see in that
40:19 - transition we're going to talk about
40:21 - that transition in a second uh for now
40:24 - let's just keep it like it is uh and
40:26 - let's focus on on finishing up this page
40:28 - so there is a thing that we can do as
40:31 - well in most applications you're gonna
40:34 - see icons and we can also add icons to
40:37 - our application because there's a cool
40:40 - kit called ionicons
40:43 - ioni cons
40:45 - there we go and those are already
40:49 - available in our application it's a
40:51 - pretty cool set and these are just like
40:53 - ionic components responsive so they look
40:56 - different on IOS and Android we have
40:59 - outline modes filled sharp
41:01 - um actually I don't think they don't
41:03 - look different right
41:05 - um but you can use the different modes
41:07 - which usually already helps to achieve
41:10 - this so as I said these are already
41:13 - installed in our application so let's
41:15 - try and add something to the login
41:17 - button I'm going to add an ion icon
41:19 - again this is a component from ionic and
41:22 - then I need to specify the actual icon
41:24 - and there's something else slot that
41:26 - we're gonna have to talk about in a
41:28 - second now first of all we're going to
41:30 - import this button so let's add the
41:33 - import this usually not works
41:36 - automatically so lock in outline
41:41 - from ionicons slash icons that sounds
41:45 - good
41:47 - um actually
41:48 - what do we do oh I think yeah we messed
41:50 - up the icon so lock in outline and then
41:54 - we should see we have the first button
41:56 - so we will talk about slots later for
42:00 - now just think of them as injecting
42:02 - content into components um we have this
42:05 - ion button which is like a fixed
42:07 - component but we can still inject some
42:09 - content here and there and the same is
42:11 - true for other ionic components as well
42:13 - we're going to come back to this concept
42:15 - later for now let's just be happy that
42:17 - we have this nice little button here
42:19 - this icon and we can do this here as
42:22 - well let's say we're using a person
42:25 - Circle outline from ionicons and boom we
42:28 - have the second button and again I'm
42:31 - keeping up the iOS simulator we have all
42:34 - of this here in the simulator of course
42:36 - as well and would just work most of the
42:39 - time as you've seen that was pretty epic
42:42 - right we're gonna get to that in a
42:44 - second
42:44 - so now that we got this
42:47 - we can also do the registration page or
42:50 - maybe maybe let's also display a little
42:52 - image so I grabbed this image let's
42:56 - create a new folder here let's call this
42:58 - assets
42:59 - and within acids I'm just going to add
43:02 - the free codechem SVG
43:04 - um just grab this from somewhere or use
43:06 - your own image whatever you prefer and
43:09 - then
43:11 - um probably above my card I'm just going
43:13 - to put an image source uh we're gonna
43:16 - have to talk about the source and then
43:18 - alt should be free code cam
43:22 - and Logo yeah but of course we need to
43:25 - set the source as well
43:28 - so let's import
43:30 - the free code camera logo from my assets
43:34 - folder
43:36 - uh it should be yes exactly this
43:40 - and we'll put in free code Camp here
43:44 - and let's see there we go probably not
43:46 - the perfect size well we could say the
43:50 - width should be maybe 50 percent
43:53 - and then it's not centered so let's add
43:56 - a diff around this and we can actually
43:58 - use the ion text Center that should
44:02 - usually Center our element and I'm going
44:04 - to close this afterwards and there we go
44:08 - we have a nice login screen once again
44:10 - looks pretty cool on mobile as well I'm
44:13 - pretty proud of this one actually this
44:15 - looks really cool now one thing I don't
44:18 - like uh that I always complain in my
44:20 - reviews is we have this screen this
44:22 - lock-in screen and there's enough space
44:24 - on the screen but I still can scroll
44:26 - this you can't really feel this here on
44:28 - the web preview but I can feel it here
44:29 - in the iOS simulator so to overcome
44:32 - stuff like that this gets more into the
44:34 - direction really of the nitty gritty and
44:36 - under the hood stuff but what you can
44:38 - see is you can see scroll y
44:40 - equals false and with that no more
44:45 - scrolling of the ion content on this
44:48 - page possible however would be possible
44:50 - on our registration page
44:53 - so let's talk about the registration
44:56 - page we can already move to that page
44:58 - and in fact the page should be pretty
45:01 - should mostly be the same stuff like we
45:04 - do in here so I'm going to actually grab
45:06 - the whole ion page from here and move on
45:09 - to this page what we don't really need
45:13 - is the
45:15 - um the logo so let's get rid of the
45:18 - image I'm gonna call this one create
45:22 - account and then we of course need to
45:26 - add all the missing Imports and we
45:29 - should probably do a new function let's
45:31 - call this do register
45:33 - and on registration
45:35 - we get the form submission and then
45:39 - we're gonna handle this somehow right so
45:41 - instead of do login we're going to do
45:43 - register
45:45 - can I already move to that page yeah
45:46 - that looks good uh only thing is that we
45:49 - want to say create my account and
45:54 - instead of using person the login
45:56 - outline we're now using let's say
45:58 - something like
46:00 - check mark done outline also we only
46:03 - need one button so let's remove this one
46:06 - okay that looks pretty good uh I think
46:10 - it's actually pretty fine now how do we
46:13 - get back to the login page we've already
46:15 - seen this before I can go here and I can
46:17 - go back and actually use Swipe to go
46:21 - back so this is enabled by default in
46:23 - ionic and you see this is like a native
46:26 - transition and this is all HTML and CSS
46:29 - this is what the web can do you see this
46:32 - fading of the header area it is just
46:35 - unbelievable and stunning every time I
46:37 - use ionic and we get this automatically
46:40 - if we use the right kind of transition
46:42 - we're going to see how to change this
46:43 - and use a different transition once we
46:45 - move into the inside area as well for
46:48 - now by default the router link is simply
46:50 - pushing this new page on our stick now
46:53 - we might also arrive on this page like
46:56 - we do here if we refresh or as we can
46:59 - see we don't really have a way to go
47:01 - back besides swipe to go back so
47:03 - therefore let's inject a button into the
47:05 - toolbar of the registration page I'm
47:08 - going to use the ion buttons wrapper in
47:12 - the starting slot of the toolbar
47:14 - so this is a wrapper component around
47:17 - stuff like buttons and it's using the
47:19 - starting slot of the toolbar which is on
47:21 - the left hand side we also have an end
47:23 - slot so you could also put in buttons
47:25 - towards the end
47:27 - side of this I'm going to do a special
47:29 - button not just an ion button to go back
47:31 - but instead an ion back button and I'm
47:34 - going to also set the default href to
47:36 - slash
47:37 - now if I use an ion back button it will
47:40 - render a little back arrow at the top
47:43 - right here to go back whenever there's a
47:46 - page to go back to
47:48 - so we now got this working we could also
47:52 - change the text of course whenever you
47:53 - think oh Simon is using this component
47:55 - can actually also change the answer is
47:58 - usually yes and we will get later to how
47:59 - we can customize more of these things
48:01 - for now I just want to focus on getting
48:03 - used to ionic components and
48:05 - constructing a nice looking page
48:08 - so that also means I can refresh and the
48:11 - back button would have actually an
48:13 - action
48:13 - so we have the flow from our first page
48:17 - to this page let's see how we could also
48:19 - go back if we just click that button but
48:22 - you can not only use routing in
48:24 - components like we used with the router
48:26 - link you can also of course do this from
48:27 - code ionic is using another Hood the
48:30 - standard react router if you're using
48:31 - react and when there's a cool hook that
48:33 - we can add from ionic so we can call use
48:36 - ion router and actually they're going to
48:39 - be more hooks that we're going to talk
48:40 - about later but with this router we can
48:43 - simply say router go back so that just a
48:46 - handful of things that we can actually
48:48 - do so let's do this router go back and
48:51 - creating my account would now bring us
48:54 - back in a real world example of course
48:55 - you would now do your API call create
48:58 - the user and then navigate back or
49:00 - probably also log in the user but for us
49:03 - this is already enough and we can do the
49:06 - same in the login page so here we're
49:09 - back in the login page
49:12 - rout router equals oh come on router
49:17 - equals use ion router
49:20 - and then in the login we can do
49:23 - something like router dot push and go to
49:26 - the next page now this is still for the
49:29 - future we're not yet there because we
49:32 - are a few other things that we should
49:34 - take care of so we have created this
49:36 - login screen uh which is pretty nice in
49:39 - itself but in most applications you also
49:41 - want to have something like an
49:42 - introduction screen so let's also add an
49:44 - introduction screen to our application
49:46 - because it's actually not that hard
49:49 - as I said in the beginning you just need
49:51 - some basic react skills so what we're
49:54 - going to do is we're going to use state
49:55 - with use statehook and we're going to
49:57 - set
49:58 - uh intro scene set intro Steam
50:04 - oh come on you could do this co-pilot
50:06 - two
50:08 - use State
50:10 - false or we could also use true well
50:13 - we're gonna probably play around with
50:15 - that in the end and now if we haven't
50:18 - seen the intro we're gonna show a little
50:21 - intro component so therefore let's
50:23 - create a new folder components that's a
50:26 - nice way to create this it could also be
50:29 - a full page but I think uh marking it as
50:32 - a component should be enough so let's
50:34 - call this intro.tsx
50:37 - now what I want to use in here is the
50:41 - swiper implementation because ionic uh
50:45 - previously had something called slides
50:46 - but usually today all you want to use is
50:49 - swiper and Swiper is pretty easy to get
50:52 - started so we just need to run npm
50:54 - installed swiper and that's what I'm
50:57 - going to do in the project
51:00 - so npm install swiper and once we got
51:04 - swiper
51:06 - we can create our intro component
51:09 - actually can I already do an ionic react
51:13 - page component actually this is not a
51:16 - real page uh let's for now just call
51:19 - this a diff element and then say test oh
51:23 - I forgot about the name so I'm going to
51:25 - call this intro
51:27 - an intro as well and then we're going to
51:30 - try and display this on our login page
51:32 - using the simple logic with our state
51:35 - so we return and check
51:38 - um we're gonna put an empty fragment
51:40 - around our page
51:43 - like this
51:44 - won't really change anything but if we
51:47 - haven't seen the intro then we're gonna
51:50 - show the intro component so in that case
51:53 - we can use intro
51:55 - and we don't really have anything else
51:57 - yet
51:58 - um actually we're going to use the
52:01 - tenery operator so if we haven't seen
52:03 - the intro we're going to show intro and
52:05 - otherwise
52:07 - we're gonna show the ion page stuff we
52:11 - did before and we just need to put in
52:13 - the right brackets and now we see okay
52:15 - test because our intro component is
52:19 - showing up that's actually good news
52:22 - um on that note let's get into the intro
52:25 - component that's probably the fanciest
52:28 - react that we're gonna write in this
52:30 - course so really if you come through
52:32 - this part you shouldn't really have a
52:34 - hard time we're only using a bit of
52:35 - fetch on data fetching later but nothing
52:38 - really fancy besides that so what we're
52:40 - going to say is we're going to give this
52:42 - some container props because we need to
52:46 - inform the login page once we're done
52:48 - with the presentation so I'm going to
52:50 - Simply add an unfinished
52:53 - here
52:55 - and once this is called
52:57 - once this is called on the login page we
53:01 - can
53:02 - set some value because that is actually
53:04 - the exercise we're gonna have here that
53:07 - is to save that we have seen an
53:09 - introduction not only show this every
53:11 - time but we're gonna actually use some
53:13 - storage mechanism to store that
53:15 - information
53:16 - Now to create the intro we can now
53:19 - specify that this is of the type
53:22 - container props and then login will
53:24 - complain because we haven't implemented
53:26 - the interface yet so let's say intro on
53:30 - finish we're going to call some kind of
53:33 - function finish
53:35 - intro and I'm gonna just add this part
53:39 - here cons finish intro is that might
53:42 - might or might not become an
53:44 - asynchronous function
53:46 - um so
53:48 - uh fin putting it in here not really
53:51 - making any use of that so now we can
53:54 - create the introduction with swiper
53:56 - swiper is actually pretty easy to use we
53:59 - can just put in the swiper component and
54:02 - then put in swiper slides
54:05 - and each swiper slide can have some kind
54:07 - of information
54:08 - uh let's see and we can't really use are
54:13 - we importing it correctly yet uh not
54:15 - really we want to import it from swiper
54:17 - slash react
54:20 - additionally we also need to add the
54:23 - import for swiper CSS because otherwise
54:25 - usually it's not working very well of
54:28 - course it's displayed I just had no text
54:30 - in it so if I can do this come on
54:33 - uh then we should be able yes we see
54:36 - swiper seems to work it's really just
54:39 - installing swiper and then using it it's
54:41 - sometimes unbelievable how easy things
54:43 - can be
54:45 - now I'm gonna put in three little
54:47 - graphics for the intro you can use
54:49 - whatever you want or you don't even have
54:51 - to use some but I just want to have them
54:53 - in here and I'm going to add the Imports
54:56 - for all of our images at the top just
54:58 - like we did before so now with this
55:01 - information we can create our little
55:03 - overview here so just like before Source
55:06 - intro one alt intro one and let's see
55:10 - nice this renders our view and we can of
55:14 - course swipe there great
55:17 - um let's also add a little bit of text
55:20 - so let's add an ion text element you
55:22 - don't really have to use text but it's
55:24 - always a nice wrapper and you can change
55:26 - the UI if you want to or the the color
55:28 - easily so let's call this build awesome
55:31 - apps with ionic UI components
55:36 - and hit save and there we go well that's
55:40 - probably maybe we can improve this a bit
55:43 - uh so maybe at this point it's time to
55:47 - add our own styling so let's do a little
55:50 - intro dot CSS file right next to it and
55:55 - in the intro file I want to use a
55:58 - a specific heat for the swiper image so
56:02 - swiper slide image
56:05 - image should have like a height of 40
56:08 - view height so it's not getting too big
56:11 - and then margin bottom so the text is
56:15 - not so sticky to it okay this won't work
56:19 - yet because we still need to import it
56:21 - so let's go back to our actual uh intro
56:25 - page and import the
56:29 - uh CSS actually we just need to put in
56:35 - the path right
56:37 - just need to use the pair yeah that's it
56:39 - it's as easy as that and voila well this
56:43 - is not perfectly centered oh yeah we we
56:45 - only change the hate we should
56:47 - definitely make this centered by using
56:49 - uh swipe or slide styling so this
56:52 - applies to every single slide I actually
56:55 - don't know why this looks so horrible so
56:57 - let's use display Flex
57:00 - then it's next to each other so we're
57:03 - going to use the flex Direction column
57:06 - then it's below each other a lot better
57:08 - and then we're gonna say the usual align
57:11 - item Center justify content Center and I
57:14 - think I also had to use text align
57:16 - Center for whatever reason I didn't
57:18 - quite get but now it should be centered
57:21 - good good now with that in place I also
57:25 - want to have this take up the whole
57:26 - Space
57:28 - um because right here oh I could
57:29 - actually can't go back in this one
57:33 - um probably need to kill the application
57:37 - and then come back to it
57:39 - yeah we can see this is not looking
57:42 - great so what I want to give is to the
57:45 - general swiper element I'm going to give
57:47 - it the full hate uh actually with not
57:50 - hundred percent uh and hate can be 100
57:53 - view hate so then it should position our
57:56 - elements right here in the center of the
57:59 - screen and we have this traditional uh
58:02 - introduction swiper screeny thing
58:05 - now um we can stripe through this but
58:08 - there's also a way to go to the next
58:10 - page however this is actually more
58:12 - complicated with swiper than I thought
58:15 - it would be and for that we're gonna add
58:18 - a little additional component here
58:21 - so this was actually a recommendation by
58:23 - swiper so we can use the use swiper Hook
58:27 - from swiper react and then we can add
58:31 - our ion button and on click we're going
58:33 - to call slide next on the swiper hook
58:35 - it's just not working if I put it right
58:37 - in here so I had to create this custom
58:38 - button however if we now put in the
58:42 - swiper slide next button and put in next
58:46 - you see we can actually go to the next
58:49 - slide great with that in place we can
58:52 - finally create the other slides so let's
58:54 - create slide number two and three so I'm
58:56 - going to call this number two I'm gonna
58:59 - say text something else and then finally
59:03 - this will be intro three and Row three
59:07 - and we should be able yes to see the
59:12 - different images and we can swipe
59:14 - through them now the last one should
59:16 - actually not be a swiper next button but
59:18 - just an ion button which is triggering
59:20 - our unfinished event so on click I don't
59:23 - want to lock to the console but I want
59:25 - to call Finish
59:27 - intro
59:30 - um
59:31 - where is my Finnish intro
59:34 - um didn't we oh yeah we have the
59:37 - unfinished in here so we can add access
59:41 - to on finish to our container props here
59:43 - and then call it from here good so now
59:48 - if I click finish or we can also do it
59:51 - in here we should see a lock in the
59:54 - console which we do see right here Finn
59:57 - uh that tells us okay the user has
60:00 - finished this introduction and at this
60:03 - point we can set the intro scene to
60:08 - false but that's of course not enough so
60:10 - if we just do this we will get a problem
60:13 - maybe we're going to try this so let's
60:14 - say we finished the introduction we come
60:17 - back here to the login page and we're
60:19 - going to just set set intro scene to
60:22 - true
60:23 - okay cool story so user comes here next
60:26 - next finish and boom we're on that page
60:28 - cool that's great however if the user is
60:31 - opening the application again they would
60:33 - have to go through this again so we need
60:35 - a way to save that information on the
60:38 - web you can sometimes use local storage
60:40 - that is okay but something that is
60:43 - recommended if you want to save little
60:45 - Snippets little uh settings is capacitor
60:48 - preferences now capacitor preferences is
60:52 - one of the capacitor plugins we haven't
60:54 - talked too much about this I've given
60:56 - you a little in idea about this in the
60:58 - beginning basically capacitor is not
61:01 - only building or helping us build our
61:03 - native application but it's also giving
61:05 - us abscess to a bunch of native uh SDK
61:09 - functionality device clipboard camera
61:12 - stuff like that and there are also
61:14 - Community plugins that you can add
61:16 - besides the core plugins that I
61:19 - mentioned here so capacitor preferences
61:21 - is one of these plugins which gives us
61:24 - access to either user defaults and iOS
61:26 - or shared preferences on Android how is
61:29 - this working under the hood capacitor
61:31 - plugins have an implementation with
61:33 - native kotlin code for Android and Swift
61:36 - code for iOS and capacitor will select
61:38 - the right implementation for our job the
61:42 - cool thing is we just install these
61:44 - plugins and we use them with one API
61:46 - like preferences set camera get photo
61:49 - and under the hood capacitor will handle
61:51 - the rest for us no matter on which
61:53 - platform we run web iOS Android
61:55 - capacitor will use the right code and
61:58 - create the connection so it becomes a
62:00 - lot easier for the developer
62:02 - we're gonna get more into capacitor
62:04 - plugins later for now we just want to
62:06 - use this one plugin we could probably
62:08 - also use local storage but I thought it
62:11 - would be a good idea now to include a
62:13 - little native functionality at this
62:15 - point so npm install capacitor
62:18 - preferences and then follow it up with
62:20 - npx capsync because we're now adding a
62:23 - native plugin and we would have to
62:25 - rebuild the native polygons the
62:27 - Platforms in my case this means I won't
62:29 - have to restart my live reload to
62:33 - actually make this work on the native
62:36 - IOS app again so I'm going to dim this
62:40 - ionic cap run iOS just so I can bring up
62:44 - the preview
62:45 - uh this was the iPad for iPhone 14 pro I
62:50 - think hopefully
62:51 - uh we're gonna get back to that in a
62:54 - second little app oh it's already
62:55 - running again nice
62:58 - um but what we're gonna do is we can now
63:00 - check when the page loads if the intro
63:03 - was already seen before and once we've
63:05 - seen it we can set the key that we have
63:07 - seen it so let's define a little const
63:10 - up here simply because I like to access
63:13 - keys of the storage with a const so I'm
63:17 - pretty sure I'm not adding a typo in
63:19 - some place and then we're going to add a
63:21 - little use effect snippet
63:24 - uh add an empty dependencies array so
63:27 - this only runs once in the beginning
63:28 - don't add this in there and add a
63:31 - function const check storage gonna be in
63:35 - a synchronous function
63:37 - and once we've defined this we can call
63:40 - check storage here now in check storage
63:43 - what we're gonna say is we're gonna get
63:45 - the scene value from
63:48 - uh preferences
63:50 - get and we just have to specify the key
63:54 - so now we can use the cons this really
63:57 - makes the code better uh and more secure
64:00 - I'm going to actually put a little lock
64:02 - in here so we're going to see what the
64:03 - value is and then I'm going to say set
64:06 - intro scene if scene value is equal to
64:09 - true because you can't actually store
64:11 - objects in capacitor preferences only
64:13 - strings even if you're like Json objects
64:16 - you would have to stringify them to
64:18 - write them to capacitor preference it is
64:20 - really meant for small things there are
64:22 - things that you can use for storage uh
64:24 - for example ionic storage I got more
64:26 - information about this in the ionic
64:27 - Academy if you want to learn more just
64:29 - check it out
64:31 - so I'm going to open up my console again
64:34 - and if I hit save now
64:36 - we see the value is true because I
64:40 - actually have seen the um one before so
64:44 - maybe that's also a good point of time
64:47 - to go to application okay this is
64:50 - getting confused I usually have this on
64:51 - the side uh um how can I get this back
64:54 - to the site
64:56 - there we go okay
64:58 - um there we go
65:01 - uh here is not okay it should be right
65:05 - here there is it under local storage
65:08 - capacitor storage intro scene so I'm
65:10 - gonna delete this key I'm going to
65:12 - refresh the page and then the value is
65:14 - set to null so that was a little
65:17 - debugging of how you can debug storage
65:20 - um on the web it is using storage so
65:22 - there's also the cool thing about
65:23 - capacitor plugin on the web it's simply
65:25 - using the fallback available and on
65:27 - Native devices it would use as we've
65:30 - seen as user defaults or shared
65:31 - preferences
65:33 - with that in place it means we're
65:35 - checking for the storage
65:36 - and we can now also say when we finish
65:38 - the introduction we can set the
65:41 - preferences key value to true just like
65:46 - this and on the next start they would
65:48 - not appear again however if you want to
65:50 - keep that option let's also add
65:53 - something to see the intro again
65:55 - so we can set the intro scheme to false
65:58 - and probably also
66:01 - preferences Dot
66:03 - I think we can also call remove on this
66:06 - one and then we're just gonna add
66:08 - another button below the create account
66:11 - one and
66:15 - uh something like watch intro uh this
66:20 - should yeah again no router link uh I'm
66:25 - actually gonna give this the size small
66:28 - so we have a small button
66:31 - um why is this here by the way
66:33 - and then we're gonna have color maybe
66:36 - something like medium
66:38 - uh type button
66:40 - but anyway we're still in this so let's
66:42 - go through this once so this should have
66:44 - stored it oh I don't want that
66:46 - background in that case I can use fill
66:48 - clear so then we have this button okay
66:51 - so as you've seen I just went through
66:53 - the introduction if I refresh I shortly
66:56 - see this so I kind of don't like the
66:58 - logic here maybe it will be a better
67:00 - idea to set intro scene always to true
67:03 - and only
67:06 - um in this case yeah that should still
67:09 - work fine so now by default it will show
67:11 - the login page only if we haven't seen
67:13 - the intro it would show it so let's just
67:16 - click this
67:17 - um watch intro again uh that's probably
67:20 - not yet connected good point good point
67:23 - so on colic
67:27 - uh on click we're gonna call C intro
67:29 - again and now we're able to re-trigger
67:33 - the introduction and it makes more sense
67:34 - like this uh because they will usually
67:37 - just see the intro once so it's better
67:39 - to have this page and then the intro
67:40 - flickers in one you could of course also
67:43 - have some kind of transition but we
67:44 - don't want to get too much into that
67:46 - stuff right now okay we have the
67:50 - registration page we have a user
67:52 - introduction which is connected
67:54 - to our storage
67:57 - and let's do two little things before we
68:01 - move into the inside Area first of all
68:03 - we're gonna create the menu.tsx and
68:07 - we're going to use an ionic react page
68:09 - component and call this menu now this
68:12 - menu should be just like before
68:14 - specified in our app TSX as a route so
68:18 - I'm going to copy this and I'm going to
68:20 - make this under app I'm going to call
68:23 - this menu
68:25 - okay so hit save and on our login page
68:29 - so you would usually do some sort of
68:32 - verifications and the data to your
68:34 - backend and then bring the user to the
68:37 - actual next page that would push the app
68:41 - page on our stick so let's try this out
68:45 - okay this brings us here now you've seen
68:48 - that this was just a replacement of this
68:51 - View
68:52 - if I go back to this
68:54 - um probably we should add something to
68:57 - quickly test this out
68:59 - we're gonna do it like this um so if I
69:02 - hit knock in right now it's immediately
69:04 - replacing this this is because we use
69:06 - root if I would use something else in
69:08 - here and there should be something yeah
69:10 - there is back forward none or root let's
69:13 - see what happens if I use forward
69:16 - go back here and we see we get the push
69:19 - animation so by defining in the router
69:23 - Direction here we can change how ionic
69:27 - will transition the pages this is done
69:29 - under the hood ionic is listening to the
69:32 - changes of the react router and if it's
69:34 - moving forward using the forward
69:35 - Direction it is using the transition
69:37 - defined in the Iona core and the CSS
69:40 - stuff to go forward by the way you could
69:42 - also I think you can also replace that
69:43 - if you want to
69:45 - so we now have this forward transition
69:48 - or you could also use the root
69:50 - transition
69:51 - um from login to inside area
69:54 - I'm kind of undecided I think root is
69:57 - the Ural transition you would see
69:58 - because it's not really like you go back
70:00 - then again from the Locking area so root
70:02 - makes more sense however uh let's make
70:05 - this more realistic but also add a
70:06 - little loading as you usually do some
70:09 - kind of operation with your back end you
70:11 - would present a loading overlay and of
70:13 - course ionic has us covered so let's use
70:17 - another hook I'm going to add present
70:19 - and dismiss from use ion loading
70:26 - close this and then before we do the
70:31 - router push we're going to call present
70:36 - oh come on what's going on uh present
70:39 - could have a message if we want to
70:41 - um so let's say
70:43 - logging in not wait and I'm going to
70:47 - await this as well
70:49 - so marking the function is asynchronous
70:51 - and then usually you would do this once
70:54 - your request has finished we don't
70:56 - really have a request so I'm just going
70:57 - to add a little time out here
70:59 - of like two seconds once we hit that
71:03 - time out we're gonna dismiss so that's
71:05 - the second we added here uh and after
71:08 - the dismiss I'm gonna call Rooter push
71:11 - now if I press login we should see a
71:15 - lowering overlay and we're in the inside
71:17 - Area nice sometimes things just play
71:20 - nicely together and it just works and
71:22 - with ioniq this happens more often than
71:25 - not so you've built this full-blown
71:27 - login page at this point I don't know
71:29 - we're probably in this like an hour now
71:31 - or a bit more but we already have
71:33 - covered the basics of navigation styling
71:36 - some components forums and even login
71:39 - and that's actually a lot now one last
71:43 - thing for this uh chapter of the login
71:46 - page I want to make sure that it's not
71:48 - looking like this on the web so in order
71:51 - to do this uh we can use some grid
71:54 - components you could also write your own
71:57 - media queries of course all of this is
71:58 - just HTML and sees is everything you see
72:01 - in here these are just all HTML
72:03 - components
72:05 - um but there's also the ionic grid
72:06 - system that we can use and most of the
72:09 - time you will native applications and
72:12 - you're just fine by optimizing for this
72:14 - screen however if you really want to go
72:16 - from one code base to a deployed website
72:18 - and Native app you're gonna have to take
72:20 - care of these things as well so let's do
72:23 - this
72:24 - um I'm gonna add first of all to ion
72:26 - content a bit of padding as well I feel
72:28 - like um
72:30 - some petting is always good ion padding
72:35 - that will make our app already look a
72:37 - lot better yeah tons better
72:40 - um and then I'm going to wrap this in an
72:41 - ion grid the iron grid is a simple
72:44 - grid system that we can use you could of
72:46 - course also use your own grid if you
72:49 - want to but this makes it really easy
72:51 - basically you have an ion grit then you
72:55 - have rows and in every row you can have
72:57 - columns which can have a size up to 12
73:00 - units so you could either have in one
73:03 - row 12 single columns or you could have
73:06 - a column that is four and the column
73:08 - that is eight of a size and by defining
73:11 - these values we can create a cool
73:14 - responsive UI so I'm just gonna say this
73:17 - has a column size of 12 and then we're
73:20 - going to put in our image
73:23 - okay this won't really change anything
73:25 - so far but I can now say that on medium
73:29 - screens for the size MD it should only
73:33 - use eight uh and on LG it should only
73:36 - use six available units and on size XL
73:41 - it should use four available units
73:45 - now as a result this image stays small
73:48 - most of the time however it's not
73:50 - centered but no problem we can change
73:52 - this let's go to the ion row and add
73:55 - class and a utility class ion justify
73:59 - content Center and yes I could have done
74:01 - this basically from CSS as well
74:05 - um I think I have a typo justify content
74:08 - Center
74:10 - and now that one stays perfectly fine in
74:14 - the middle just as it should I think I
74:18 - can also say ion grid fixed so then it
74:21 - has like a fixed maximum value
74:25 - yeah that looks even I think that's even
74:27 - better
74:28 - yeah that's good however our card is not
74:31 - following that styling so let's copy uh
74:36 - this part of row and column
74:39 - and put it down here I don't want to put
74:41 - it in the same row and column setup
74:44 - although you could do this in some cases
74:46 - in here it doesn't really make sense so
74:49 - I'm just gonna grab the whole ion card
74:52 - and throw it into a column of itself and
74:56 - as a result
74:58 - we have this nicely centered page which
75:02 - looks great on Native devices and would
75:06 - also even work if you deploy your page
75:08 - as a website I think that's a pretty
75:10 - nice outcome
75:12 - um by the way we can also now do the
75:14 - same do we want to do the same for the
75:15 - registration maybe that's a little
75:17 - exercise for you it shouldn't be too
75:19 - hard simply put in the ion Grit
75:22 - close the column close the row close the
75:25 - grid make sure you're adding all the
75:29 - Imports and then grab your Ion card
75:33 - put it in here
75:35 - make sure that everything is added
75:37 - correctly I should have just added all
75:39 - missing Imports
75:40 - and with that in place I think
75:44 - yes we do have it in the center as well
75:47 - nice uh this yeah kind of works as well
75:50 - and we can log in
75:53 - and with that we have finished the first
75:55 - part which was the outside area the
75:58 - login screen and the registration at
76:00 - this point once again checkpoint number
76:02 - two you should have a decent
76:04 - understanding of ionic of how we put
76:07 - together some components on the page
76:09 - how we can use them how we can look them
76:12 - up in the documentation so really in the
76:15 - ionic documentation you're going to find
76:17 - all of these components the utility
76:19 - classes everything is usually
76:22 - um explained in detail with a bunch of
76:25 - examples on top of that we have
76:27 - introduced ionicons for icons we have
76:30 - used swiper an additional package is a
76:33 - show that we can use all things from the
76:35 - web all npm packages in our application
76:37 - and make them work and finally we have
76:40 - also already used one of the Native
76:42 - plugins with capacitor preferences which
76:44 - is we can't really see it but we know
76:47 - that under the hood on this native
76:49 - device it is actually using native apis
76:52 - it is using the default on the web and
76:55 - all of that from one single line like
76:58 - set remove or get so we really don't
77:02 - need to care about the native specialty
77:05 - so much if we develop ionic capacitor
77:08 - applications and we can just rely on the
77:11 - plugins and that they perform their work
77:13 - under the hood we will probably later
77:15 - look a bit more under the hood here and
77:17 - there but for now we have finished so
77:20 - far this second part and now the next
77:23 - part is talking about layouts after
77:26 - creating the outside area of our
77:27 - application which is lock in
77:29 - registration some information about the
77:31 - app we usually have an inside area as
77:34 - well and most of the time this is a new
77:37 - layout which is not just pushing new
77:39 - pages completely above the page but
77:42 - instead having a different layout and
77:43 - that's what we're going to implement now
77:45 - we want to implement the traditional
77:48 - site menu layout and we also want to
77:50 - talk about the tab bar navigation
77:52 - because implementing both is actually
77:54 - pretty easy so to get started let's
77:58 - create two new files I'm going to create
78:00 - a list dot TSX so ionic react page
78:05 - component let's make sure that I call
78:07 - this one list as so just do it
78:10 - immediately then would also do this
78:13 - correctly and saying a list and I'm
78:16 - gonna also add a settings.tsx
78:20 - ionic react page components settings
78:25 - and calling this one settings okay good
78:28 - so those are just blank pages that we
78:31 - can now use in our navigation after our
78:34 - login we already present the inside area
78:37 - which is slash app uh displaying the
78:40 - menu page and on that menu page we will
78:42 - now Implement our view
78:45 - so what we need for this is a kind of
78:48 - different setup I'm going to cut this
78:51 - out actually we're going to use this as
78:52 - again and I want to add an ion menu and
78:58 - for the ion menu I'm going to set the
79:01 - content
79:03 - ID to main this is important we're going
79:07 - to have to use this in another place as
79:10 - well and it is right below this right
79:12 - below this we have to add an ion router
79:15 - Outlet
79:16 - there we go with the ID Main and by then
79:21 - connecting the different path to the
79:23 - different routing information we can
79:25 - make sure that our stuff in the menu is
79:28 - working correctly with the main page so
79:30 - the menu of course we know a side menu
79:33 - as this area with links on the left or
79:36 - right hand side wherever you want to
79:37 - have the menu and then in the inside
79:39 - Area you have the actual page think of
79:42 - this ion menu here as our left hand side
79:45 - the actual menu so I'm going to put in
79:47 - the header say something like menu and
79:50 - in the ion content it could be like menu
79:53 - items
79:55 - on top of that we have the ion router
79:57 - Outlet which then renders the actual
79:59 - page and by the way you can already drag
80:01 - this in just like before we have this
80:04 - feature enabled by default so here we
80:07 - see our side menu I can just hide it
80:10 - once again this is already pretty fancy
80:12 - but we don't really have the main area
80:14 - defined so let's define different routes
80:16 - so just like before we're using route
80:19 - from react router
80:20 - I'm going to use an exact match for the
80:23 - path
80:24 - um
80:26 - slash I Think We're on slash app so
80:28 - slash app slash list should render our
80:31 - component list that we just defined
80:34 - before
80:36 - um and then we do have a second one
80:39 - which is actually not using an exact
80:42 - match because we're gonna have to supply
80:44 - some additional settings here later this
80:46 - is settings so we've defined those right
80:50 - now we don't display anything if we
80:52 - check out the URL we just add slash app
80:54 - but we can easily add a simple redirect
80:57 - in here as well so let's say for the
81:00 - exact match path we want to have a
81:03 - redirect
81:05 - um we could also do a list but I kind of
81:07 - don't want to do this I want to do a
81:09 - redirect in that case
81:11 - uh so around
81:13 - not automatically closing please and
81:17 - redirect
81:19 - to
81:20 - [Music]
81:22 - slash app slash list so whenever we
81:26 - enter this screen which we currently do
81:28 - from login we're just navigating to
81:30 - slash app we wouldn't automatically
81:32 - redirected to slash app slash list let's
81:36 - hit save let's refresh and we see
81:38 - I can just go to app and will
81:40 - immediately bring me forward to slash
81:43 - app slash list and we've pretty much
81:45 - already implemented like 60 of the site
81:47 - menu at this point let's continue
81:51 - um let's define the path for our menu
81:53 - items we don't have to do this but I
81:56 - really like to do the menu as sort of
81:59 - dynamic as possible so let's call this
82:02 - one home
82:04 - uh let's say the URL for this one is
82:07 - slash app slash list and then it should
82:09 - also have an icon that we can use in the
82:11 - list so let's use the home outline icon
82:15 - and now the import should work nice as
82:17 - well now we also have a settings page
82:19 - okay thanks go pilot Settings app slash
82:22 - settings and probably it doesn't really
82:25 - matter all it is newspaper outline for
82:27 - now
82:28 - okay now we want to create that uh menu
82:32 - view so to create that menu view we're
82:35 - gonna go back here uh in the ion header
82:38 - I'm going to give this toolbar the color
82:41 - maybe secondary so we have some fancy
82:44 - colors going on
82:46 - so then it turns blue actually quite
82:49 - nice
82:49 - and then for the actual menu items we
82:52 - can just use the ion content this is uh
82:55 - completely Dynamic so you have to create
82:57 - this our own it's not really based on or
82:59 - automatically using any kind of path but
83:02 - we can now make this a map function over
83:05 - our
83:07 - um path here but I want to do this
83:09 - manually so I'm just going to close it
83:11 - uh here so what we're going to use is
83:14 - we're going to use an ion item this is a
83:16 - very classic one almost like the card we
83:19 - used before or the button the ion item
83:22 - is a very standard component we're going
83:24 - to add the router link which should
83:27 - point to path.url and we also want to
83:30 - use the key of course and then let's
83:32 - also close it and say
83:35 - something like item dot name
83:39 - um
83:40 - uh okay yeah let's use item here not
83:43 - path that makes more sense
83:46 - uh can we can we go back yeah we can
83:51 - or did I mess up something no here we go
83:54 - we have home and we have settings does
83:57 - it actually work uh this one brings us
83:59 - to app slash settings yes kind of I
84:03 - wonder why app slash settings wasn't
84:05 - displayed correctly alright I finally
84:08 - figured this out so the problem is if
84:10 - you can access exactly app settings we
84:13 - have to go to app and remove the exact
84:15 - match from App otherwise this would get
84:18 - in our way and now we can refresh and I
84:20 - could go to app list and app settings
84:22 - and on both pages I should be able to
84:25 - drag in my site menu
84:28 - also this we can see in the background
84:30 - is changing from settings to home but of
84:34 - course we can improve this so what we
84:37 - notice is when I click this I would
84:39 - actually like to close this view here in
84:43 - that case we can surround our item with
84:47 - an ion menu toggle item so ion menu
84:50 - toggle
84:52 - actually we're going to use the index in
84:54 - here already so then we don't have to
84:56 - use it in here and we simply put the
84:59 - item in here
85:01 - now if I go ahead and select something
85:04 - it will close this and there we go now
85:08 - one other thing is that using items from
85:10 - the menu it should just replace the
85:12 - background I don't really like that it's
85:14 - still showing some sort of push
85:15 - transition so you notice this when I
85:18 - select this it is still showing this so
85:21 - therefore I'm going to set for the
85:22 - router
85:24 - Router Direction I'm going to set this
85:27 - To None So then it won't use any kind of
85:30 - specific transition and it simply
85:32 - replacing the page in the background
85:34 - that makes a little more sense in those
85:36 - cases also should work just fine here
85:40 - settings list works perfectly
85:43 - now
85:45 - um there's a problem if we use this on
85:48 - let's say a bigger screen a side menu is
85:51 - not so super cool so we're gonna have to
85:53 - figure out something for that and as
85:55 - well on small screens we also need this
85:57 - little Burger icon so probably we're
86:00 - gonna tickle the letter one let's go to
86:02 - the list and the settings page and what
86:04 - we can do on those pages is we can
86:07 - change our header area and just like
86:10 - before I on buttons goes right to the
86:14 - starting slot and then we're going to
86:16 - inject an ion menu button
86:19 - there we go and what's the idea of the
86:22 - ion menu button well the ion menu button
86:24 - should be displayed if a menu is
86:27 - available let's add this to the list
86:29 - page as well
86:31 - add all missing Imports and then we have
86:34 - a button to toggle our menu we're going
86:38 - to also make the toolbox color here
86:40 - matching our success color again I'm
86:43 - doing this on the settings page as well
86:46 - actually the buttons belong to the ion
86:49 - toolbar so I messed that one up
86:51 - there we go settings home and we have a
86:54 - nice side menu navigation and many apps
86:56 - this is actually already enough this is
86:58 - the traditional site menu pattern that
87:00 - you're going to see in tons of
87:01 - applications and we can use it perfectly
87:04 - however there's something pretty cool
87:06 - that I of course want to show you
87:08 - because this is of course is all about
87:10 - cool things with ionic and that is
87:13 - called the ion split Pane and at this
87:16 - point it is unbelievable easy to see
87:18 - this so here we go this is right now our
87:21 - app on bigger screens not really super
87:23 - helpful
87:24 - let's go to the menu and before we start
87:28 - the ion menu we will add an ion split
87:31 - Pane and I'm going to set the content ID
87:33 - to main as well
87:35 - when the menu is closed
87:39 - um no actually when the iron router
87:40 - Outlet is closed we're gonna also close
87:43 - the split pane now what's happening
87:46 - let's see
87:48 - on bigger screens we will now
87:50 - automatically have our menu attached to
87:53 - the site instead of being hidden behind
87:55 - this button you also see the button
87:57 - automatically hide because there's no
87:59 - more menu and yes we could change all
88:02 - the sizes and we could change the
88:03 - breakpoint at which this appears so iron
88:06 - split plane
88:08 - um I think there's a show
88:10 - or when yeah when
88:13 - um we could actually set this to an
88:15 - earlier point so it would not already
88:17 - show on the small medium break point or
88:20 - we could set this to the MD breakpoint
88:22 - here I actually kind of like the default
88:25 - so I'm going to keeping it as it was
88:28 - it's probably the LG or XL breakpoint
88:31 - um no I don't break anywhere now it's
88:34 - breaking here however we noticed
88:36 - something else our menu items are
88:37 - missing the problem is that usually the
88:40 - ion menu toggle will hide items if they
88:43 - are already visible so I actually don't
88:46 - know exactly what's the thought behind
88:48 - this because I always have to use it
88:50 - like this so on the ion menu toggle
88:52 - we're going to set auto height to false
88:55 - and then we're gonna see even on bigger
88:58 - screens we get access to the items this
89:00 - is pretty cool if you want to also
89:02 - Target like
89:03 - um tablet size devices so instead of
89:06 - having the site menu it would easily go
89:08 - to this always on menu on the side if
89:11 - you want to
89:12 - and we just got this by adding one
89:15 - little line with the ion split pane to
89:17 - our view also I just noticed that the
89:20 - ion items here are still pretty boring
89:23 - so I think we included icons uh let's do
89:27 - this
89:29 - um we should be able to inject them in
89:31 - the ion item so ion icon
89:35 - slot start using the icon
89:39 - um oh nice and there we go we already
89:41 - got them also here we got them if you
89:45 - don't want to have this Arrow at the end
89:47 - you can also say
89:49 - detail uh false or none
89:54 - I think it's none I'm not completely
89:56 - sure detail
89:57 - or its detailed fault yeah
90:00 - it's detailed faults that will remove
90:02 - the arrow here but still navigation
90:05 - should work just as before
90:08 - so now we got this by the way now we can
90:10 - even see this better if we remove the
90:13 - router direction again
90:16 - then every page would be pushed like
90:18 - this I don't really like this so for
90:20 - split pane for menu transitions this is
90:23 - usually the preferred way to do it
90:25 - so this is how we can Implement a side
90:28 - menu actually that wasn't too hard and
90:31 - because it wasn't too hard let's take
90:33 - one more step and also add a tip bar so
90:35 - we will just add a tab bar to the
90:37 - settings page to make life more fancy
90:41 - um you could also just have the tab bar
90:43 - there's no correlation between having a
90:45 - menu and tab bar you can have one of
90:47 - them or you can have both of them you
90:49 - could have a tab bar in a site menu or a
90:51 - site menu just in a tab there's really
90:53 - no limit to your creativity so let's get
90:56 - into our settings page
90:59 - um and on the settings page I'm actually
91:01 - going to do it a bit smaller organ and
91:03 - bring this up so you can definitely see
91:05 - the footer area here because that's the
91:07 - important part uh we're not making an
91:10 - eye on page
91:11 - but instead we gonna make this ion Taps
91:15 - uh or maybe we need to surround it with
91:18 - ion page I'm not completely sure we're
91:21 - gonna find out that's a cool thing we
91:23 - will just figure it out so we start with
91:26 - the ion tab bar
91:28 - um ion tab bar in the slot bottom
91:31 - actually the bottom slot is the default
91:33 - and top is not really working well
91:35 - anymore and then we follow this up by
91:38 - adding different tab buttons to our bar
91:41 - ion tab button and this should now be
91:44 - related to a specific tab like tab one
91:47 - and it should have an href so something
91:51 - like slash app slash settings slash tab
91:55 - one now we don't really have that tab so
91:58 - probably it's time to add those let's
92:01 - add two files I'm going to add tab 1.t
92:03 - is X and again ionic react page
92:06 - component okay ionic react page
92:10 - component there we go tab one
92:13 - so tab one and another file
92:17 - Tab 2 dot TSX honey react page component
92:22 - tab 2. I really like the snippet it
92:25 - makes it really really fast uh you can
92:28 - just focus on building the stuff so tab
92:31 - one and tip two pretty boring but we can
92:34 - now use them for the tab bar and for the
92:37 - routing because just like the side menu
92:39 - the split pane or the menu had its own
92:42 - router Outlet
92:43 - same is true for ION tabs so I'm going
92:45 - to have this area of ion router Outlet
92:47 - again in which we can Define the
92:49 - different routes so
92:51 - let's see if copilot gets this right
92:53 - slash app slash settings tab 1 should be
92:56 - component settings nope should be
92:59 - component tip one settings I think we're
93:02 - already on the settings page so that
93:04 - doesn't really make sense my friend
93:07 - um route number two is gonna be path to
93:12 - uh Slash app slash settings slash Tab 2
93:18 - and the component will be yeah tab one
93:22 - of course not it's gonna be tab 2. and
93:26 - there we go and also not even adding the
93:28 - Auto Import cool so those are our two
93:31 - tips and just like before we're gonna
93:33 - have to figure out a redirect because
93:35 - once we enter this page from the menu
93:37 - we're just on app settings so we need to
93:40 - account for that and make sure we
93:42 - activate an initial page
93:45 - therefore we're going to add a redirect
93:48 - for the path app slash settings that
93:52 - should have redirect just like before
93:54 - two apps lettings tab one and then we
93:58 - also need to close the route cool these
94:00 - are the routes we got now what we need
94:03 - as well is the actual implementation of
94:06 - the tap buttons we already added the tab
94:08 - button number one let's give it a little
94:10 - icon ion icon uh icon let's say I don't
94:15 - know triangle
94:18 - I don't really care uh and then we're
94:21 - gonna use an ion label this is always
94:24 - used or many times used if you want to
94:27 - inject some text and there we go tab 1
94:29 - is ready let's copy this over assign
94:32 - this to Tab 2 and the route tab 2. I'm
94:37 - going to use a different label and a
94:40 - different icon and voila this is our tab
94:44 - bar so with just a few lines of code
94:47 - which actually fit in my zoomed editor
94:49 - we got this tab bar working and it also
94:52 - looks as you would expect on iOS just
94:55 - great we still have this so I can still
94:58 - go to my home page
95:00 - and if I go to the settings page it
95:02 - would show tip 1 and tip two what
95:05 - happens if I just go to slash settings
95:07 - okay which just show and probably on
95:10 - those pages we should also add our cool
95:13 - little uh ion buttons to the ion toolbar
95:19 - so on both tab 1 and tip two
95:22 - let's quickly do this ion toolbar
95:27 - um yes please add all missing Imports
95:29 - this is tab one
95:32 - uh but this well yeah it should happen
95:35 - button yes that's
95:37 - yeah that's right uh and same for tip
95:40 - two
95:41 - so replacing this
95:44 - tab two and making sure we got all the
95:47 - Imports in place now we got this
95:50 - finished
95:51 - we got a site menu where we can go from
95:54 - our list to the settings page and the
95:56 - settings page also has a tab bar
95:58 - navigation which allows us to switch
96:00 - between tab 1 and Tab 2 and we could all
96:02 - the time just also use the site menu
96:05 - same for the web and on the web we even
96:08 - got this bigger preview we got the home
96:09 - screen and we got the settings screen
96:11 - which has this internal tab bar
96:15 - um yes the activation colors are right
96:18 - as well and with that you've already
96:21 - finished and taken the next step which
96:23 - is understanding the different layouts
96:25 - navigation patterns that you get
96:27 - available in ionic applications so we
96:30 - had just the simple push transition push
96:32 - pop in the beginning which just replaces
96:34 - The View and now we also have the site
96:36 - menu which allows us to put different
96:38 - links and items in the menu that's
96:40 - usually hidden or you can also have the
96:42 - tab bar which is a very common pattern
96:44 - seen in most applications from the App
96:46 - Store to Instagram to pretty much
96:47 - everyone using a tab bar and you see the
96:51 - implementation we have in here is really
96:54 - straightforward and pretty easy and it
96:57 - even worked with direct links which is
96:59 - in fact important if you want to display
97:01 - or deploy your application in the end
97:04 - for the web as well as a website so make
97:07 - sure that at checkpoint 3 you have this
97:10 - setup in place that you can navigate
97:11 - around in your application uh we don't
97:14 - really have a button to you go back
97:17 - maybe that should be our last action for
97:20 - this checkpoint so let's go to the menu
97:23 - and Below what we already got here for
97:26 - the path mapping we're going to add
97:27 - another menu toggle this doesn't need a
97:30 - key and it should just say log out
97:36 - um it should use an icon log out outline
97:40 - and the router link is just
97:45 - slash in the router direction should be
97:48 - rude let's see there we go
97:52 - if I hit log out I'm back on my login
97:54 - screen so now we have a full circle from
97:57 - going in navigation and finally tricking
98:01 - that actually I don't really like that
98:02 - it's a button an item so I'm going to
98:05 - make this an ion button instead
98:08 - um
98:10 - and I'm going to use slot start I don't
98:12 - need detail in that case I feel like
98:14 - that's cooler I don't know why expand
98:19 - full
98:21 - to make it cover the whole row yeah that
98:23 - looks a bit better we could probably add
98:25 - some some margin of heading but now we
98:27 - got the nice little lockout button
98:29 - primary color once again for theming and
98:32 - therefore we have the whole area so the
98:36 - next part is gonna be more challenging
98:39 - as we move further into ionic land and
98:41 - ionic components so make sure you're
98:44 - fine until here
98:46 - um use the navigation maybe just add a
98:49 - few pages to get used to the
98:51 - tab bar and the side menu and how it
98:54 - actually works to make sure you really
98:55 - get that nailed down and once you're
98:58 - ready we can continue with the next part
99:00 - now that we have the basic foundation
99:01 - for our application let's focus on the
99:03 - list pay page and really Implement all
99:06 - the things that go into a page which
99:08 - will show us a bunch of different ionic
99:10 - components so let's close the menu
99:13 - settings log in and let's just focus on
99:16 - the list page for the moment
99:18 - and what we're going to do is we're
99:19 - going to add a new function uh we're
99:21 - going to call this get users inside get
99:24 - users we're going to make an a fetch
99:27 - request to the random user API so we can
99:31 - just say cons data equals
99:35 - uh yeah almost that's almost good but I
99:38 - want to use a different API I want to
99:40 - use this one here and then we can say
99:44 - const users await data.json and finally
99:49 - I'm gonna also add a state so cons users
99:54 - said users that's going to be use state
99:59 - and that's going to be an empty array in
100:03 - the beginning okay perfect and we can
100:05 - call of course said users after this one
100:07 - once again this is as much react as you
100:09 - need to understand and if we put out a
100:12 - little lock here and refresh our page
100:14 - you should see uh that we're not yet
100:16 - calling that page good point so let's
100:18 - see we could use use effect but we can
100:21 - also tap into the ionic life cycle of
100:24 - our page that feels a bit more like
100:26 - ionic so instead of using use effect we
100:30 - can also use ion if you did enter did
100:34 - leave will enter will leave so let's
100:36 - pick will enter
100:38 - it should be a nice place and we're
100:40 - going to call get users which will set
100:43 - our data
100:45 - um and then we're gonna already close
100:48 - this okay on top of that we could also
100:51 - use a bit of a loading state so let's
100:54 - say loading set loading
100:57 - use State fault
101:00 - um yeah well initially we're actually
101:01 - loading that's true but once we got this
101:04 - we can call set loading fault but that
101:06 - means we should return some data here so
101:09 - let's return users
101:11 - uh otherwise we couldn't really use that
101:14 - and then we're maybe gonna just say cons
101:17 - users equals await good users
101:21 - just restructuring this a bit and then
101:24 - calling said users in here okay that
101:26 - looks a bit cleaner now if we reload the
101:29 - page and you add some kind of lock
101:31 - somewhere you should see that we get
101:34 - back results and there are like 10
101:37 - random users with some data included in
101:40 - that response that's pretty nice and we
101:42 - can use this to create a little list in
101:45 - our view so let's go back to our page
101:48 - we already have the header we have the
101:50 - buttons
101:52 - um probably we're going to also add
101:53 - another function let's call this one
101:56 - clear list
101:58 - um that should hopefully in the end yeah
102:01 - basically set the users back to an empty
102:04 - uh array but we're going to implement
102:06 - the functionality later for now we will
102:08 - just add ion buttons in the end slot as
102:11 - I said before you usually have a star in
102:14 - the end slot and then we add a button
102:16 - for ION icons
102:19 - um ion buttons on click clear list and
102:22 - that one shows up in the top right
102:24 - corner in fact this could probably also
102:28 - just use a little icon so instead of
102:32 - clear let's go for ION icon
102:35 - uh slot icon only is another slot if you
102:38 - want to have something a bit bigger so
102:40 - previously we use start and end in some
102:43 - cases you also have the icon only slot
102:45 - by the way all of this is always
102:47 - documented on the ionic documentation
102:50 - for the specific components so let's use
102:53 - I don't know treasure bin outline
102:57 - um ion icon slot um it's probably not
103:00 - using the right color so let's use color
103:03 - light
103:06 - in this case
103:10 - um Iron icon slot icon only uh where did
103:13 - I go wrong yeah this of course needs to
103:16 - go into a button
103:19 - um we actually had it right almost so we
103:22 - just need to make sure that we have an
103:23 - ion buttons outside but then we have an
103:26 - ion button within also adding the import
103:29 - and once we get this ion button
103:34 - uh hello Crush bin outline
103:38 - it's included
103:40 - where's my button am I on the right page
103:43 - actually
103:46 - um I on buttons uh slot and ion button
103:50 - on click clear list an ion icon slot
103:53 - icon only color light and yeah it's icon
103:56 - not name okay there we go now we finally
103:59 - got this man sometimes I really wish
104:01 - there were better error messages but
104:03 - anyway
104:04 - um let's also say in some cases you want
104:07 - to have a search bar well I only got you
104:09 - covered as well so you can simply drop
104:12 - in an ion search bar just like this and
104:16 - it will show up here well that looks
104:17 - pretty horrible now the cool thing is
104:19 - you can actually have multiple toolbars
104:22 - in your header area this is something
104:24 - you don't always see but that's actually
104:27 - a very clear and clean solution so after
104:30 - my first toolbar which has the buttons
104:32 - and the title I'm just adding another
104:34 - toolbar and then it looks like this also
104:38 - on iOS if I go there
104:40 - um actually this was not I should
104:43 - probably reload this application as well
104:47 - uh there we go log in
104:50 - and
104:52 - well it's not perfectly aligned in the
104:55 - header yet so on iOS we probably uh need
104:59 - to be a bit more careful uh we can do
105:02 - something we can say color uh success in
105:06 - here
105:07 - oh I don't want to move a screenshot and
105:09 - if we do this it works perfectly oh that
105:12 - wasn't fixed yeah we don't really need
105:13 - padding we just need to make sure that
105:15 - it's using the right background color so
105:17 - now it's more natively included up there
105:20 - I think that looks better a ton better
105:22 - nice let's also display our content now
105:25 - so in the ion content area we can remove
105:29 - class name ion padding for now and
105:33 - instead iterate over our users so
105:36 - users.map we have a user and probably
105:40 - yeah user and index
105:42 - and I want to write my own expression in
105:46 - here so what I want to use is an ion
105:48 - card just like before because the card
105:50 - is really a great component the card
105:53 - looks great in most cases uh and I think
105:57 - there is one missing bracket yeah now we
105:59 - go there we go
106:01 - um user's map is not a function yeah we
106:03 - probably need to we're setting users to
106:07 - an empty array and then I need to be
106:09 - careful here so this should actually be
106:12 - uh users
106:15 - hey maybe you should return this in the
106:17 - right way because the array has results
106:19 - so I'm going to say uh the get users
106:22 - function Returns the result how do you
106:26 - spell this results
106:29 - um yeah that's better
106:30 - and now I can iterate them correctly so
106:33 - the ion card has a header area and it
106:35 - has a Content area we will only use the
106:38 - content again ion card content maybe for
106:41 - uh giving you an idea of what the header
106:43 - looks like so ion card header and then
106:47 - ion card title test showing this this
106:51 - should render a bunch of cards with the
106:54 - header here and then we could have some
106:57 - kind of content here Below on iOS once
106:59 - again it looks a bit different card has
107:01 - a maybe nicer Shadow so I do like it a
107:05 - bit more but that's just my feeling
107:08 - there we go this is our card this is our
107:11 - playground uh we can now create
107:14 - something in the content let's use an
107:16 - ion item again as I said before this
107:19 - works in many places so for the ion item
107:22 - we have the ion label for some text and
107:26 - for the text we can now render a user
107:30 - dot name DOT first and user name last so
107:34 - that should already give us the starting
107:37 - point good
107:39 - um you might notice there's a little
107:41 - gray boredom this is for items because
107:43 - items are usually displayed in a list so
107:46 - if you don't want that you can say lines
107:49 - none and then that should be gone nice
107:53 - below the label we will also add a
107:58 - paragraph in the label yeah let's use
108:01 - user dot email for a bit of additional
108:04 - information and I also want to display a
108:06 - picture so we can of course create a
108:09 - rounded image that's not really a
108:10 - problem or we can use another ionic
108:12 - component which is the ion Avatar in the
108:15 - starting slot of that item and the ion
108:19 - Avatar just gets an image actually
108:21 - there's also an ion image tag that you
108:23 - can use so feel free to use it and then
108:27 - voila we already got this one nice that
108:31 - looks good that's a good starting point
108:33 - however I feel like this card has a bit
108:36 - too much padding so we've used utilities
108:38 - to add margin to add padding in
108:40 - different places and just like that we
108:42 - can add a utility
108:44 - ion no padding because ionic makes some
108:48 - assumptions about in which places we
108:49 - want petting and it usually makes sense
108:51 - for cards and other things but we don't
108:55 - really want this it's taking up too much
108:56 - space so now if we say IO no padding
108:59 - voila no more Petty also could we could
109:02 - we say large in here would this change
109:04 - anything I don't think it won't really
109:06 - wouldn't really change anything
109:09 - um and let's try so we have the starting
109:11 - slot we have the main slot and we also
109:13 - have an end slot let's put something in
109:15 - the end slot
109:17 - um how about an ion chip yeah there's
109:20 - really everything there's an ion chip
109:22 - there's an ion batch there's everything
109:24 - checkbox uh we got everything so let's
109:27 - use an ion chip in the end slot of the
109:31 - item and let's use the color
109:35 - um primary
109:37 - and what I want to say in that is
109:41 - um user.nationality
109:44 - I think we can just hear user.net yeah
109:46 - and I only have this nice little batch
109:48 - here and again on iOS I think it looks
109:51 - even Doper here on iOS so this is a nice
109:54 - list and once again we're just using the
109:57 - stock the default I haven't done any
109:59 - kind of custom styling and it already
110:01 - looks pretty good out of the box this
110:03 - looks better than most developers 15
110:05 - years ago could style their web
110:06 - applications like you get this for free
110:09 - out of the box and I think this is
110:11 - pretty impressive
110:12 - so with that in place uh I want to do a
110:17 - few more things so where do we get
110:20 - started
110:21 - um we probably want to implement the
110:23 - reload for the list that's going to be
110:25 - funny
110:26 - so uh we have the button to clear the
110:29 - list
110:31 - um let's see
110:32 - um we probably don't want to clear the
110:34 - list immediately and we show an alert
110:36 - instead and of course come on did you
110:39 - really question this there's of course
110:41 - an ionic component for this let's call
110:43 - the show alert
110:46 - um
110:47 - use ion alert and you already see
110:51 - there's also an action sheet and a modal
110:53 - and a pop over and yeah we can have a
110:55 - lot of fun with that but for now we're
110:57 - just going to use the show alert and
110:59 - we're gonna do this in our clear list so
111:02 - I'm going to just use the show alert
111:04 - hook and then I can pass in an option to
111:07 - show alert uh can we see the properties
111:10 - uh well alert options thank you use ion
111:14 - alert where are the alert there the
111:17 - alert options so this is how an alert
111:19 - could be built you can have a header or
111:22 - sub header message special class and
111:24 - inputs and buttons and you can even have
111:26 - a different enter and leave animation
111:28 - yeah we're not going that deep in it in
111:31 - this course but we got stuff on that in
111:33 - the ionic Academy so you can really do a
111:36 - ton of great things with ionic and the
111:38 - customization if you want to go the
111:40 - additional mile so in our case I'm just
111:44 - going to put in a header confirm I'm
111:47 - going to show show the message I sure
111:49 - you want to delete the users and then an
111:52 - array of buttons now the first button
111:55 - will have text cancel and roll cancel
111:57 - which will allow us to cancel this and
112:00 - the second one will be delete the users
112:02 - and this now has additional Handler
112:05 - inside of the Handler we basically catch
112:08 - the click event of that delete button so
112:12 - we can now close it and close the array
112:14 - and as a result if I now click on this
112:16 - button up here we get this overlay where
112:19 - I got cancel which simply cancels this
112:21 - or delete which actually deletes the
112:24 - list
112:25 - uh once we delete the list let's use
112:27 - another component called toast a toast
112:29 - is also pretty cool it's also
112:32 - um sometimes called a snack bar I think
112:35 - so use ion toast
112:38 - uh really there are tons of helpful
112:42 - hooks available and then show toast yeah
112:46 - that was actually pretty good go ahead
112:48 - co-pilot message all users deleted and
112:52 - for duration of two seconds
112:54 - and then maybe color danger whatever
112:58 - so if I do this and hit delete at the
113:00 - bottom we would have this nice little
113:02 - toast for two seconds
113:04 - um once again iOS just checking this and
113:08 - this is also very impressive on iOS this
113:11 - looks totally like the native iOS delete
113:13 - uh window I found this really impressing
113:16 - when I used ionic the first time it
113:18 - completely looks like the native
113:19 - dialogue and it's just the web this is
113:21 - not a native control so I can do delete
113:24 - as well and then I got a toast at the
113:26 - bottom as well with a deleted list and
113:29 - again uh works great now the only
113:31 - problem is we don't have any data
113:33 - anymore so let's add another
113:35 - functionality for that let's add a pull
113:37 - to refresh yeah that's not really hard
113:39 - to do with ionic there's a component to
113:42 - do this actually so in our ion content
113:45 - we can put an ion Refresher an iron
113:48 - refresher should go in the fixed slot
113:50 - which means it's fixed at the top and on
113:53 - ION refresh there should be a function
113:55 - call we won't call our gate users we're
113:58 - going to call a different function and
114:00 - within this there is the ion refresher
114:04 - content which you can of course style to
114:07 - your needs as well
114:08 - so let's do a function I'm going to call
114:11 - this const do refresh which actually
114:14 - gets an event
114:16 - I'm just going to use any for now
114:19 - so do refresh goes in here
114:22 - event do oh come on not twice do refresh
114:27 - there we go
114:29 - and voila and within our do refresh
114:33 - actually we should see this there we go
114:35 - there it is
114:37 - um so this is doing the ion refresh and
114:40 - it's doing it until we call event dot
114:43 - Target dot complete so when we call that
114:47 - uh actually not eventdetail DOT complete
114:51 - once we call this it will disappear so
114:54 - what are we going to do well we can say
114:57 - Khan's data equals await get users which
115:01 - means we're gonna have to make this an
115:03 - asynchronous function
115:05 - get users and then we can call set users
115:09 - with a new data and then we can call
115:11 - event detail complete so let's give this
115:14 - a try we got my data and I try to
115:18 - refresh
115:19 - and we got new data nice uh while this
115:23 - is taking place we could also have
115:26 - uh we could also have a loading no we
115:30 - don't really want to I think this is
115:31 - actually better there's no there
115:33 - shouldn't be a loading overlay
115:34 - this is exactly how it should work and
115:37 - once again works really nicely with this
115:40 - dragging factor that you can by the way
115:41 - set of course you can also change the
115:43 - icon so nothing is as it appears well
115:46 - somehow
115:48 - but this is the beauty of ionic that you
115:52 - can customize this and we will get to
115:53 - how we can customize those kind of
115:56 - things okay
115:59 - um we have the list we have a cool UI we
116:01 - can clear this stuff we have the uh
116:03 - toast and alert now let's do something
116:05 - else and that is uh something I really
116:07 - like and it's called skeleton views so
116:11 - while this view is loading it is empty
116:13 - and we can make a view that looks like
116:16 - the data is almost there and YouTube
116:19 - Instagram everyone's using this and
116:21 - ionic actually has a component for this
116:23 - as well which is pretty cool so
116:26 - um below or above our users map let's do
116:30 - another block
116:31 - if we are loading we're gonna do
116:34 - something in here
116:37 - um we're gonna do uh loading and open up
116:41 - a new expression and then we're going to
116:43 - create an array so this is just some
116:47 - dummy stuff uh yes an area with 10 items
116:51 - and using the ion card uh not too much I
116:56 - don't wanna
116:57 - uh put too much in here just want to
116:59 - make sure that we got the brackets right
117:01 - okay
117:04 - actually
117:05 - we're going to have this
117:07 - this which we'll display 10 ion cards
117:10 - and now we're gonna basically reuse what
117:13 - we have in here
117:14 - so this is my ion card content but of
117:17 - course we don't really have an ion image
117:19 - instead we have an ion skeleton text and
117:24 - this could be animated but we're going
117:26 - to use the animated in here
117:28 - so let's replace the name with an ion
117:31 - skeleton text
117:34 - um animated and also a style of let's
117:38 - say just 150 pixels
117:40 - and then for the paragraph down here
117:44 - we're gonna also add an ion skeleton
117:48 - this one won't be animated and then for
117:52 - the ion chip we will actually not
117:54 - display anything so watch The View
117:57 - actually we should reload the page and
117:59 - there we've seen shortly our perceived
118:03 - skeleton views and these are really I
118:06 - really like them uh you can do so many
118:08 - things with the ion skeleton
118:11 - um we could probably add a little time
118:13 - out to our function to make it take
118:15 - longer uh but I don't want to over
118:17 - complicate the code I think you already
118:18 - see how this is working
118:21 - um while we're loading initially it
118:23 - displays these components which pretty
118:25 - much look like what we got you could
118:27 - make sure that they have the right hate
118:29 - so it looks even more natural but this
118:32 - is already pretty epic and of course we
118:34 - got our ion refresher which I still like
118:38 - a lot uh why is this not refreshing
118:41 - uh fail to fetch okay fail to fetch why
118:45 - did they fail to fetch
118:47 - that's interesting
118:49 - okay I'm not failing to fetch anymore
118:52 - okay so this is a pretty cool list
118:54 - already but now we want to add something
118:57 - more we're going to add some modals to
118:59 - this page because modals are very
119:01 - important they're like overlays over
119:03 - your content if you want to show some
119:04 - more information in you know modals
119:07 - which just cover the whole screen and
119:09 - you can close them pretty much like
119:11 - passing or showing a new page but ionic
119:14 - has ways to present a model in really
119:17 - interesting ways we're gonna do a sheet
119:20 - model which we can drag up from the
119:22 - bottom and we're going to have a cart
119:23 - model which follows some iOS guidelines
119:25 - let's see how we can do this so to do
119:29 - this
119:30 - we're gonna uh first of all create those
119:33 - models which one do we want to first I
119:35 - think the cart model is actually a bit
119:37 - easier
119:39 - um so maybe we're going to start with
119:40 - that no actually I think
119:43 - you know what I think the the bottom
119:46 - sheet model is even easier so let's get
119:49 - started with that one
119:51 - um we're gonna do it in a specific way
119:54 - we're gonna have a selected user and
119:56 - we're going to display some information
119:57 - about that user in that model once we
120:00 - click on a card so therefore let's add
120:03 - currents selected user
120:06 - set selected user use date any I'm gonna
120:10 - start with null
120:13 - on top of that we're gonna have to use a
120:17 - little reuse ref so that will allow us
120:20 - to access the ion model element more
120:23 - easily from our application from the
120:26 - code
120:27 - and then we can heat over to our
120:29 - iteration don't use the skeletons uh use
120:32 - the real card and what I want to do is
120:35 - for the ion card
120:38 - on click I want to call
120:42 - um set selected user with the current
120:46 - user of that iteration now this will set
120:49 - simply set the user it won't really
120:51 - change anything but now simply below the
120:58 - ion model ref model we don't really want
121:01 - to CSS class in this case and I can also
121:04 - immediately close the model and within
121:07 - that model what we need is the same
121:09 - setup like we have in a page we have an
121:11 - ion header we have a toolbar we probably
121:15 - have some some buttons and then we also
121:18 - have this is pretty nice co-pilot you're
121:22 - nailing it today you're really nailing
121:24 - it
121:25 - uh this is uh impressive really
121:28 - impressive uh if you haven't used a
121:31 - co-pilot give it a try it's just writing
121:33 - your ionic application
121:35 - um
121:35 - completely so
121:38 - um we have our model with the reference
121:40 - um this is important because if we use
121:42 - it like that we can simply attach it in
121:45 - here to for example have a dismiss
121:47 - button to close the model
121:49 - additionally uh we now need a way to
121:52 - check if that model is actually open or
121:55 - open it so what I want to do is
122:00 - um how do we display this
122:03 - um let's say this is open
122:06 - when
122:08 - my selected user is not null
122:14 - I think yeah in this case it was
122:15 - actually already clicked so let's start
122:17 - again and click this now I click on it I
122:20 - set a user and the model opens which is
122:22 - by default just this full screen overlay
122:26 - again here
122:27 - uh same shows the full screen overlay I
122:31 - don't know why the transition looks so
122:32 - horrible uh anyway also we noticed
122:36 - something I can't use it again so I
122:39 - should use
122:40 - um
122:42 - functionally an event here from ionic
122:45 - so not that one but on ION that's
122:48 - usually how the events start and then we
122:50 - have
122:51 - on breakpoint it change on model did
122:53 - this Miss that's what I want so on model
122:55 - did this Miss yes I want to set my
122:57 - selected user back to null
123:01 - um too many brackets yes definitely so
123:04 - now it should work clicking this again
123:06 - close yeah now I can open this what
123:10 - again this is a pretty boring model and
123:13 - I want to show you something that is a
123:14 - lot better and for that the only thing
123:17 - you need to do and this is so funny they
123:19 - introduced it with I think ionic six
123:21 - something
123:22 - is you add an array of breakpoints this
123:25 - is not what I want a year an array of
123:27 - breakpoints like zero zero point five
123:31 - zero point eight something between one
123:33 - and then you're gonna set an initial
123:35 - breakpoint I'm gonna set this nah
123:37 - probably to 0.5
123:40 - now what happens is this is still the
123:42 - same code we just added those two lines
123:45 - but now we get this how cool is this
123:48 - this is a bottom sheet model that we can
123:50 - simply drag uh in our view and again
123:54 - this should of course also work here
123:58 - um so maybe is this already getting the
124:00 - latest version now this is probably
124:02 - stuck on the issue before so I need to
124:05 - real log in
124:07 - and then I should be able to get the
124:10 - bottom sheet model in here as well so
124:12 - this is the breakpoint 0.5 here's the
124:14 - 0.8 I can't deal any further but I can
124:18 - switch between those two and of course I
124:20 - can close it and with that I also get
124:24 - access to all the information in the
124:25 - model which means I can simply present
124:28 - um some kind of information about the
124:31 - user here in the model that we just
124:33 - selected
124:35 - um so for example in the title we could
124:37 - say
124:38 - selected user name first and last as a
124:43 - result yeah it should cut a lean Theresa
124:47 - Steffi yeah networks great okay that is
124:52 - the bottom sheet model
124:54 - um do you want to see yeah let's first
124:57 - of all take a look at the uh other model
125:00 - that I want to show you and we're going
125:02 - to add that model to this page as well
125:04 - just like we did the previous one in
125:07 - this case days I'm gonna add an ion
125:09 - model again so you can have multiple of
125:11 - those I'm gonna also set the ref to
125:15 - model it doesn't actually matter that
125:17 - both of them are using the same as long
125:20 - as I don't mess up
125:22 - um let's call this card mode I don't
125:24 - wanna I really don't want to mess this
125:26 - up so let's do card modal in here and
125:31 - then we can be sure that we're not
125:33 - messing up anything
125:35 - no I don't want to close the iron page I
125:37 - want to close the ion model of course so
125:40 - for that model we'll just copy the
125:42 - content for now
125:44 - and within the header I'm going to say
125:46 - this is a card model
125:50 - um then we have card model current
125:52 - dismissed to close it and within it I'm
125:56 - just gonna put my card model so how do
126:00 - we display this we previously used the
126:03 - is open property but this is actually
126:05 - not the preferred way the preferred way
126:08 - is to have a trigger now so I'm going to
126:11 - give this a trigger and call this card
126:13 - modal
126:14 - and I'm gonna now add a button to my
126:17 - page which has the trigger as an ID
126:22 - um because we want to use something else
126:23 - let's also add an ion fep button which
126:25 - is a floating action button
126:28 - properties vertical bottom horizontal
126:31 - end and also fixed and within the
126:35 - container of the ion Feb we then have
126:37 - the ion Fab button
126:40 - and this one can have an icon so
126:43 - something like ion icon
126:46 - um probably not the trash bin but add
126:48 - outline makes more sense now you don't
126:51 - really see this but there we go this is
126:53 - the uh fep button down here easy as that
126:57 - it's sticky it's actually very at the
127:01 - bottom but we could change that if we
127:03 - wanted to
127:04 - uh can we add something like class name
127:07 - margin bottom
127:10 - not really I think this is it's in the
127:13 - fixed slot so maybe there's a little
127:14 - issue anyway you could change this if
127:17 - you wanted to the important part is that
127:20 - on click I want to trigger my card model
127:22 - to open and therefore I'm going to give
127:24 - this the ID
127:26 - trigger modal
127:28 - so I'm going to refresh that page
127:30 - because I'm not sure if it works
127:31 - otherwise and on click
127:34 - it's not displaying anything that's good
127:36 - uh probably because it's called card
127:38 - model and not trigger
127:40 - let's try again and there we go now this
127:44 - is of course not a card model a card
127:47 - model looks different a card model is
127:50 - also of course I need to refresh this
127:53 - but I can tell you it's not yet working
127:56 - so what we need to do in order to make
127:58 - this work and this only works on iOS
128:01 - apparently is to give this a presenting
128:04 - element so this is a bit more
128:05 - complicated setup but trust me it's
128:07 - definitely worth it so let's go back to
128:10 - the top of our component
128:13 - and let's add this so we have the
128:15 - presenting element and set presenting
128:17 - element just using use State and when we
128:21 - enter the page let's do this now with a
128:23 - news effect
128:24 - we're gonna set
128:26 - set presenting element to well document
128:30 - query selector I kind of don't want to
128:33 - use it like that so let's add another
128:35 - reference
128:37 - const page equals use ref ion page
128:41 - element
128:43 - uh no actually that was right oh is
128:46 - there no HTML
128:48 - HTML ion
128:51 - there's no HTML ion page element that is
128:54 - interesting I didn't know about that uh
128:57 - well in that case let's just set it to
128:58 - nothing and let's call set presenting
129:01 - element on page dot current and we're
129:05 - just going to connect page with our ion
129:08 - page as a ref so setting the ref here
129:12 - not reference path of course page
129:17 - okay
129:19 - um we're setting this we're setting the
129:21 - presenting element now we just need to
129:24 - attach this and this is now just like
129:25 - before at this point we have a standard
129:28 - model that we display but just by adding
129:31 - presenting element in here
129:34 - we're gonna make this a card model
129:38 - um you're complaining about this well
129:40 - yeah at this point it's definitely gonna
129:42 - be set so here we go and voila the
129:47 - second presentation of a modal which is
129:50 - this awesome looking car on once again
129:52 - this is not using any kind of native
129:55 - technology this is just the web this is
129:57 - the web and what ionic is able to do
129:59 - with taking a lot of time to fine-tuning
130:02 - and customizing their CSS transitions of
130:05 - these things but to normal users this is
130:09 - just exactly what they expect it's a
130:11 - cart model it's an iOS card model and
130:13 - nothing else apparently for Android
130:15 - there is no such thing as the sticking
130:18 - card of you however
130:20 - it's a quite easy implementation for iOS
130:23 - and something we can easily add to our
130:27 - view
130:29 - now with that in place let's see what we
130:32 - can add to this page as well
130:35 - um probably for our view here for our
130:39 - bottom sheet let's add a segment control
130:41 - that's quite interesting a segment is
130:43 - very common in cases where you have like
130:46 - a home list and you want to switch a
130:48 - filter or something so let's do const
130:51 - active segment uh set active segment
130:58 - equals use date of well that's
131:01 - interesting uh no I want to set this
131:04 - just to any and when I set this let's
131:07 - say to details
131:09 - um that should be enough for making the
131:12 - segment work now in our first
131:17 - um in the bottom sheet model let's find
131:20 - this under the breakpoint we can once
131:23 - again do the cool thing where we have a
131:24 - second ion toolbar included
131:28 - um actually I'm going to use the light
131:30 - color for this toolbar and then I'm just
131:32 - going to do another toolbar and in that
131:35 - toolbar what I want to do is let's see
131:38 - bring this up
131:40 - here it is in that second toolbar I want
131:43 - to include an ion segment control the
131:47 - value is our active segment and on ION
131:51 - change I will yes call set active
131:54 - segment to
131:56 - event.detail.value that's correct
131:58 - Additionally the ion segment did it
132:01 - already closed no
132:02 - that's good so there we go and then we
132:05 - put in two ion segment buttons the first
132:10 - one will have value details so as I
132:13 - don't know details about the user and
132:16 - then we do have a second one let's call
132:18 - this calendar because I also want to
132:20 - show you one more component and with
132:22 - that in place we got this nice little
132:25 - toggle here and of course for the web uh
132:28 - let's make this a bit bigger so you can
132:29 - see this we got this in here as well so
132:32 - that is the segment control now we just
132:35 - need to react to the actual changes of
132:36 - that segment so let's do this in our
132:39 - content here
132:40 - I'm going to give this once again
132:42 - the class name
132:45 - oh I'm sorry
132:47 - uh class name ion padding
132:51 - ion padding there we go and then we can
132:54 - simply check if the oh what is here what
132:57 - was going on
132:59 - if the equif segment is equal to details
133:02 - in those cases I want to show something
133:06 - for example I just want to show an ion
133:09 - card with the user pretty much
133:12 - well it doesn't matter you can do
133:14 - whatever you want user details in here I
133:18 - prepared something like this
133:21 - oh come on now it's my messing up
133:23 - everything so I just made it like
133:25 - another card in there doesn't really
133:27 - matter what you want to do just showing
133:30 - some information you can copy this over
133:32 - from our previous page already
133:35 - additionally if the active segment is
133:38 - equal to calendar I want to do something
133:39 - else and I want to do something and use
133:42 - something called ion date time now this
133:45 - is a very very interesting component and
133:48 - something that people either like or
133:50 - hate
133:51 - because oh we already see it in the
133:53 - background the ion date time component
133:55 - displays this calendar view and there's
133:58 - a lot you can do with this
134:00 - there are so many options it doesn't
134:02 - really look great on the web so let's
134:04 - take a look here
134:05 - um if we go into the calendar on iOS it
134:08 - looks a lot better it really looks like
134:10 - the native calendar component you want
134:12 - to select the time you get all of this
134:14 - out of the box uh switching between
134:16 - month or selecting a different uh year
134:20 - or whatever with wheel Pickers and I
134:22 - don't want to get too much into this
134:23 - component you see we got this by simply
134:26 - rendering the ion date time there's the
134:28 - option to have an ion item which then
134:31 - triggers an overlay of the daytime you
134:33 - can set predefined dates use colors
134:35 - customize this view so it's not just the
134:37 - month view only week only time there are
134:41 - tons of options on this one so I really
134:43 - don't want to show you too much about
134:46 - this just check out the documentation
134:47 - for the ion date time in the button
134:50 - you're gonna see there's so much about
134:51 - ion daytime here
134:54 - um no we could make probably like a
134:56 - three hour course just on customizing
134:59 - date time different ways to use it with
135:02 - an overlay and the date time button is
135:04 - also pretty interesting which is this
135:06 - button which then renders the daytime as
135:08 - an overlay or you could also still have
135:10 - the Picker view which is what we've seen
135:13 - as well to select our dates
135:16 - now this was quite a lot
135:20 - um we tried to build one view based on
135:23 - some data including search bars
135:26 - including portal refresh we have tons of
135:29 - different uh items on the screen and
135:31 - also
135:32 - um I don't know if I'm why I'm getting
135:34 - this as a preview uh and also the bottom
135:37 - sheet modal and the cart model the
135:39 - calendar the segment there's a lot going
135:42 - on in the Stream the cart model so give
135:45 - this some time and play around with all
135:47 - the elements that we added to this page
135:50 - I make sure uh that you get this right
135:53 - however this is now checkpoint four if
135:56 - you don't have this this is not a big
135:58 - problem because we're going to continue
136:00 - with the tabs in the settings page now
136:02 - and leave this page but if you want to
136:05 - explore more of how this page works
136:07 - definitely spend some time checking it
136:09 - out and then continue for the next part
136:11 - at this point we've pretty much covered
136:12 - all the basics of ionic we've built a
136:15 - nice page that looks good that works
136:16 - good that has some functionality and
136:18 - we've used a bunch of components so now
136:20 - let's take an additional step and talk
136:22 - about two interesting things the first
136:24 - thing is animations and gestures and the
136:27 - second is how we can actually customize
136:29 - those ionic components and how they
136:31 - actually work under the hood so let's
136:33 - get started with animations and gestures
136:35 - this is an interesting topic because
136:38 - you actually won't find a lot of
136:40 - material about this topic you will
136:42 - probably find a blog post that I've
136:43 - written about it or you're going to find
136:44 - the ionic documentation on it but
136:46 - actually this is pretty cool and we can
136:49 - easily integrate these kind of
136:51 - animations in our ionic app with some
136:53 - simple code so uh let's get started
136:56 - probably on our tip 2 page so I'm going
136:59 - to close this and I'm gonna see both the
137:02 - apps here
137:04 - um where's my Tab 2 page because that's
137:06 - a blank page and we can create something
137:09 - nice in here
137:11 - um let's start with the animation
137:12 - because setting up the animation is
137:13 - actually pretty easy we can wrap our
137:16 - elements that we want to animate with
137:18 - the create animation component so I'm
137:22 - gonna put this up here and within I'm
137:24 - just going to add a little ion button
137:26 - you have caps lock enable things
137:29 - um ion button
137:31 - and that button should have
137:33 - well whatever let's call this join ionic
137:37 - Academy which you should definitely
137:39 - check out if you haven't done at this
137:41 - point and lose the class name ion margin
137:45 - okay uh where is my type 2 page should
137:48 - be somewhere here there we go so here's
137:51 - the button and within create animation
137:53 - we now get access to the cool API that
137:55 - ionic defined to create an animation you
137:58 - can start by giving it a duration
137:59 - actually I'm going to give it two
138:00 - seconds then you can specify how many
138:03 - iterations so how often should that play
138:06 - I'm actually gonna set this to Infinity
138:10 - because then we just keep playing
138:14 - um maybe I want to also add like a
138:16 - little delay of 200 milliseconds or
138:18 - maybe just a full second
138:21 - and then I can also either animate from
138:25 - two so I can just animate from like
138:28 - opacity 0 to opacity one or what I could
138:31 - also specify is keyframes which allows
138:34 - us to build a more complicated setup so
138:37 - yeah I could do something like this and
138:40 - offset 0 1 okay
138:43 - um yeah let's just let's just try this
138:45 - one if I hit save now we I actually
138:49 - don't know will we see something uh no
138:51 - we won't see because we have only
138:53 - defined the animation at this point so
138:56 - in order to also play this we need to
138:59 - give a ref to our animation and play it
139:02 - at some point which means you have full
139:05 - control over when you actually want to
139:07 - play your animation so let's create an
139:09 - animation ref
139:10 - and see uh use Rev use ref
139:16 - um this should be create animation
139:20 - um and exactly should be null and then
139:24 - I'm going to use this as the ref in here
139:30 - so there we go and now at some point I
139:33 - could play or start playing this
139:35 - animation let's say I will use the ion
139:37 - view did enter so after the user enters
139:41 - the screen
139:43 - I want to use my animation ref and
139:45 - simply call play on it that's what we
139:48 - want to do
139:49 - um play does not exist on create
139:51 - animation
139:54 - it usually should
139:56 - uh let's see this is definitely like
139:59 - this uh yeah this is not current dot
140:03 - animation we also need to access the
140:04 - animation so now when we enter the page
140:07 - it should play our animation let's see
140:10 - and there we go we've created a super
140:13 - simple animation I mean it's not a great
140:15 - animation I'm gonna make this one expand
140:18 - to the whole view but you see the
140:20 - potential of using animation so you
140:22 - don't have to Define your own CSS
140:24 - animations you don't need to bring in
140:25 - another library for animation so if you
140:28 - just want to animate some stuff on the
140:30 - screen the animation API is really
140:32 - powerful there are a lot of examples
140:34 - here
140:35 - uh like the keyframe examples and
140:38 - transitioning color opacity you can also
140:41 - group animations together when they play
140:44 - at different times so stuff like this
140:47 - easily possible with the animations API
140:49 - of ionic it's just one of those
140:51 - additional utilities that make life as a
140:54 - developer easier and developing ionic
140:56 - apps is a lot about this ionic has
140:59 - thought about how to make your life
141:01 - easier and how you can easily build apps
141:04 - and animations
141:05 - um by the way it should also work in my
141:07 - native app let's check it out
141:10 - um yeah there we go Works in here uh
141:13 - just Flawless as well also completely
141:15 - fluent I think it should be definitely
141:17 - 60 FPS I mean it's not a hard animation
141:20 - um it should work also I'm gonna cancel
141:22 - this now because it's going to be really
141:24 - distracting from what we're going to do
141:25 - next
141:27 - the next thing is we want to also create
141:29 - a gesture so gestures are pretty
141:32 - interesting
141:33 - we're going to create an element
141:35 - reference for that as well and that's
141:37 - going to be in HTML
141:40 - div element and then we're gonna Define
141:43 - the gesture on that element and just put
141:46 - the element on our page so uh let's just
141:50 - put it below the create animation below
141:53 - let me just create a simple div element
141:55 - ref will be set to our Elementor F and
141:59 - I'm just going to set a simple style for
142:02 - this
142:02 - so let's say I'm going to use just a red
142:06 - box I want to make this a red box with
142:09 - 50 8 50
142:12 - and then background color
142:16 - uh background color red okay so there we
142:20 - go we have a red box on the screen that
142:22 - wasn't too hard
142:23 - you can do a lot of things with the
142:26 - gesture and you have full control over
142:27 - what you want to do so to get started
142:30 - you simply need to set up a gesture and
142:33 - we're not using hammer for this
142:35 - um we're using an ionic react gesture
142:38 - and we're not calling new gesture we can
142:40 - actually call create gesture just like
142:43 - we can also create an animation from
142:45 - code by the way and I'm going to already
142:47 - close this to make sure it works okay so
142:51 - first thing we need to pass in is the
142:54 - element then we can give this a name and
142:57 - then it's already happy so that's good
143:00 - now we can Define different handlers so
143:03 - we got an on start Handler on move and
143:06 - on end which means we started the
143:09 - gesture we're moving the finger or the
143:11 - the pointer across the screen and we let
143:13 - go of it so let's define these in their
143:17 - own functions I'm going to call this on
143:19 - move Handler and this one will get not
143:23 - an event but actually gesture detail so
143:28 - I can type this correctly I'm just going
143:31 - to put out a little log message and I'm
143:34 - going to clear the lock here
143:36 - I'm gonna add this as my Handler so on
143:39 - move I'm going to call my on move
143:41 - Handler let's see
143:43 - uh oh that's actually
143:45 - uh we probably also need to pass in the
143:49 - threshold of zero so that means it
143:52 - starts and yes I forgot what I always
143:56 - forget is putting in gesture enable
143:58 - otherwise the gesture is actually not
144:00 - enabled so right now there's of course
144:03 - not a lot going on and I think we're not
144:06 - passing the actual event to my Handler
144:09 - here
144:11 - uh so let's try and refresh and there we
144:14 - go we get a bunch of logs with the
144:16 - gesture details and those details I
144:18 - usually uh the coordinates and where we
144:21 - move the finger and the Delta between
144:23 - where we started and stuff like that so
144:25 - a lot of information about the actual
144:28 - gesture and we can use that information
144:30 - to now move this across the screen so
144:34 - from our detail we can extract the X and
144:38 - Y coordinates and then we can simply set
144:41 - on our element ref current style
144:43 - transform and call translate actually I
144:46 - want to call
144:48 - yeah I think we can just call it like
144:50 - this let's see so now unmove
144:54 - um
144:55 - yes on move I can drag this around and
144:58 - transform it
145:00 - um as you can see it's always going back
145:02 - there and somehow feels very strange so
145:05 - we should probably also add a little on
145:08 - end Handler so let's copy this over
145:12 - and use it as on move end
145:15 - and on move end needs to go in here as
145:19 - well
145:20 - and in that case what I want to do is I
145:23 - want to just snap this item back in
145:25 - place so therefore I'm going to do
145:27 - element ref Uh current style transition
145:30 - yeah that's actually close to what I
145:33 - wanted to do so I want to translate it
145:35 - back to zero zero and I want to use uh
145:39 - 500 milliseconds ease out yeah that
145:41 - should be fine so let's see if I now
145:43 - release it
145:44 - it's just transitioning back but now
145:47 - it's also using this uh 500 millisecond
145:50 - delay all the time which is kinda
145:52 - strange and give this strange feeling so
145:54 - let's make sure that when we uh start
145:57 - the on move or we could probably do this
145:59 - in the OnStar so then we would have a
146:02 - use case for that as well so I'm going
146:04 - to call this on start Handler
146:08 - on start I want to have the on start
146:11 - Handler and within here I'm just gonna
146:14 - set my transition to none
146:17 - so now whenever I start the
146:20 - um gesture it will set the transition to
146:22 - none and I can immediately drag it
146:24 - around and in the end it's just snapping
146:27 - back and with that we have implemented a
146:30 - pretty dope transition
146:32 - um yes that is a problem on Native
146:34 - screens as we've seen here in my native
146:37 - applications so always a good thing to
146:40 - check your views again this doesn't
146:42 - really feel great so to prevent that
146:45 - we're gonna go back to my ion content
146:47 - and once again say scroll y
146:50 - uh folds so if you're working with these
146:53 - more advanced topics you might run into
146:56 - trouble here and there but overall we
146:59 - see we had the animation I can also
147:01 - enable the animation again
147:03 - and then we would have both on the same
147:05 - page uh working in fact
147:09 - uh yeah there we go now it's working
147:12 - again so I got my cool gesture here with
147:15 - the Box the different handlers and also
147:17 - the animation playing at the same time
147:19 - and no problem for the device at all and
147:22 - of course would work in the browser just
147:25 - the same so hope you uh like this quick
147:28 - demonstration of one additional utility
147:31 - but beyond that I want to now also get
147:34 - with you into the details of ionic
147:38 - components
147:39 - um so far we've just used them as HTML
147:41 - components I told you they have some
147:43 - slots and uh what you can do with them
147:46 - and how we can style them with our color
147:48 - or the different properties an icon or
147:52 - um whatever lines or whatever we used
147:55 - but how do they actually work that's an
147:57 - important concept to understand and it's
147:59 - actually not too hard so ionic
148:02 - components use or are web components and
148:06 - they are created with a tool called
148:08 - stencil which by the way is also so from
148:10 - the ionic company so the only company
148:12 - created both ionic framework which is
148:14 - the UI components and bindings capacitor
148:18 - a tool to wrap your applique web
148:21 - application in a native container and
148:22 - also stencil which they internally use
148:24 - to create all of their ionic components
148:27 - so how does a web component actually
148:29 - look like if you never use the web
148:31 - component it's pretty much like a
148:33 - reusable HTML tag that you can drop into
148:36 - any project if you import the right
148:38 - sources so you could have like uh
148:40 - English mytech and import a library and
148:43 - that would be your web component and you
148:46 - can actually check out all of the ionic
148:48 - components for example here on the Iona
148:51 - framework git repository I went into
148:53 - core source components
148:56 - and into the very common item and for
149:00 - the item what we're going to see is
149:02 - we're going to have the TSX
149:03 - implementation and additionally we're
149:05 - going to have some material design
149:07 - styling we have some iOS Style we have
149:10 - an interface but this one is the main
149:13 - file
149:14 - at the top you're gonna find the
149:15 - definition for the item with the
149:18 - different slots available so these are
149:20 - the slots we already use likes and for
149:22 - the item they are starred and helper or
149:25 - error there are also parts and we're
149:27 - going to talk about CSS Parts in a
149:29 - second as well
149:30 - for now let's just take a look at this
149:32 - so we have a class of an item which has
149:35 - a bunch of properties all of these
149:37 - things are the inputs that we use so we
149:40 - could for example now use four lines
149:43 - and we're going to see there's a
149:44 - property for lines it is either full
149:47 - inset or none
149:49 - um just like that we have a bunch of
149:51 - other things to be defined and we can
149:53 - try and use like you can go into the
149:56 - button you can go into the header and
149:57 - you're going to see the same thing over
149:59 - and over
150:00 - additionally to all of this well there's
150:02 - some ionic logic and what happens with
150:04 - the items but in the end you're gonna
150:06 - find a return block for all of these
150:08 - elements and this is basically what the
150:11 - element the HTML element looks like so
150:13 - an ion item under the hood is made up of
150:16 - these things and then there's a slot
150:19 - Define there's a div class there's an
150:21 - ion icon probably available if you have
150:24 - show detail and here's another class so
150:27 - under the hood this is just HTML CSS and
150:31 - JavaScript ionic just makes it easier
150:33 - for us by putting that logic away behind
150:37 - an ion card behind an ion content behind
150:40 - an ion item so you can use these items
150:43 - and they are not part of the actual Dom
150:47 - they're Shadow components in the shadow
150:49 - Dom which means their styling won't
150:52 - spill over to the rest of your
150:54 - application so if you usually write CSS
150:57 - you might like use a class that ion item
150:59 - is using and and then the ion item would
151:01 - suddenly look like the class and you
151:03 - don't really want that that won't happen
151:05 - simply because these are web components
151:09 - and if we inspect our application we can
151:11 - also see this so let's close this again
151:14 - let's make this a bit bigger
151:17 - use the inspector I'm actually going to
151:20 - put this to the side that's what I'm
151:22 - used to for inspecting stuff let's go to
151:26 - elements and let's just go to the ion
151:28 - item here and we're going to see here
151:30 - the shadow root inside the card opens so
151:34 - everything in here in that card is part
151:36 - of that shadow root which is in the
151:38 - shadow Dom not in your actual Dom but
151:40 - we're gonna see here are all the HTML
151:43 - components that I used another Hood in
151:46 - the ionic component now why did I tell
151:49 - you about all of this it's important to
151:51 - understand what these components are
151:53 - they are not magic they're just HTML and
151:56 - it's also important to understand how we
151:58 - can style them because we can't easily
152:01 - style for example the background of an
152:03 - ion item let's do this let's create a
152:06 - new
152:08 - list.css file here and I'm going to
152:11 - import this at the top of my list page
152:13 - so import
152:16 - um list.css so in that list CSS earliest
152:20 - try you use ion item background red
152:25 - no change why is my ion item background
152:28 - not turning red well the reason is that
152:31 - the background of the ion item is
152:33 - defined in the web component and it is
152:37 - hidden in the shadow Dom so in order to
152:40 - inject styling into ionic components we
152:43 - usually need to rely on CSS variables
152:46 - let me show you how you can find them so
152:49 - let's go to the documentation again
152:53 - let's go to components let's go to ion
152:55 - item and if I inspect the item on the
152:58 - right hand part I'm going to find
153:00 - theming so different colors okay that's
153:02 - cool and then we're going to see CSS
153:05 - Shadow parts and custom properties and
153:07 - all of that and at the bottom there is a
153:10 - definition of the different parts we're
153:12 - gonna get two parts in a second for now
153:14 - let's take a look at CSS custom
153:16 - properties because this is the way how
153:18 - we can now inject styling into the ion
153:21 - item using these and you can also find
153:24 - them if you inspect your application
153:27 - if you inspect the application and then
153:29 - use the search for dash dash something
153:32 - it will usually show you all the CSS
153:35 - variables used in something
153:37 - so instead of using background let's try
153:39 - Dash Dash background and immediately our
153:43 - styling is applied because the CSS
153:45 - variable is injected into the component
153:48 - this is how we can style our app and now
153:52 - we could do whatever we want so for
153:53 - example if we want to implement a little
153:55 - hover effect because our app should also
153:57 - work on the web
153:58 - um let's try and use I don't know
154:01 - green like color
154:04 - uh let's see and then we have it working
154:08 - really nice additionally maybe we're
154:10 - gonna change also the color of the text
154:13 - so in that case we can set it to well
154:17 - probably let's let's set it to White
154:19 - uh and then we see the header turns to
154:22 - White of the ion item probably not the
154:23 - best but interesting nonetheless
154:26 - additionally while we talk about colors
154:29 - and stuff you've seen our colors in the
154:32 - beginning so there are a bunch of colors
154:34 - defined by ionic you could also Define
154:36 - your own color if you want like ion
154:39 - color Simon I could Define this in here
154:42 - as well following the same setup but we
154:44 - can use all of these light medium danger
154:46 - warning success territory secondary and
154:48 - primary simply in our files so if I want
154:52 - to access one of those colors I can use
154:54 - the variable function and pass in the
154:56 - name of the CSS variable so iron color
154:59 - dark
155:00 - and now it yeah it's this is the color
155:03 - light dark because previously we had
155:04 - white now it's using this so I can also
155:06 - use primary it should give us like a
155:10 - green bluish thing yeah
155:12 - secondary is there anything better that
155:14 - works as a good contrast well none of
155:16 - them let's really go back to dark but
155:18 - it's definitely changing those colors
155:21 - and just like that you can do everything
155:24 - with CSS variables I could also change
155:27 - like the padding uh if I don't like the
155:29 - padding of that element so let's or set
155:32 - paying star to 20 pixels and would move
155:36 - this along
155:37 - so this is the way to inject CSS styling
155:41 - into our components no in some places uh
155:46 - for example if we have a detail icon uh
155:49 - here in my list actually I disabled this
155:51 - let's enable this again
155:53 - so in my menu I'm gonna say uh detail
155:57 - true again then it shows that Arrow so
156:01 - it's sometimes really hard to style
156:02 - these things now how can we apply
156:06 - additional styling or how can we inject
156:09 - General CSS into components an ionic
156:13 - figure out a way or actually they're
156:14 - using a way they're not inventing this
156:16 - and it is called CSS parts
156:19 - so defining CSS variables for every
156:23 - single property of an element it's not
156:25 - really possible an ionic key can't keep
156:27 - up with that so in order to allow
156:30 - styling different parts of something so
156:33 - that's where the name comes from we
156:35 - sometimes have Parts on items if we
156:38 - inspect the ion item and look for a part
156:42 - we're going to see we got a part native
156:44 - and we got a part detail icon defined in
156:47 - the HTML and we're going to also see
156:50 - this under CSS
156:52 - Shadow part for all of the items you can
156:55 - check this out not all of them but many
156:57 - we got the detail icon and we get the
157:00 - native part and if we use these parts we
157:04 - are now actually able to inject our own
157:06 - General styling without using CSS
157:08 - variables in Target every single
157:10 - property of an element let's try this
157:13 - out as a simple example for the ion item
157:16 - so the syntax is Ion item
157:20 - um part and then the name of the part so
157:24 - we saw there was detail icon
157:27 - and for the detail icon I'll just set
157:29 - the color to
157:31 - um something that's going to be
157:33 - noticeable and I'm also going to set the
157:35 - opacity to one because right now the
157:37 - opacity is like this and we hit save and
157:40 - we see these are just general CSS rules
157:43 - they are not CSS variables and we can
157:45 - inject them now directly into the part
157:48 - so that means we have two options to
157:51 - style and customize ionic components we
157:54 - have the predefined properties the CSS
157:56 - variables to override General things
157:57 - like borders background colors
158:00 - um Shadows there are different things
158:02 - defined for all these components has
158:06 - something that you just can't style
158:07 - because there's not the CSS variable
158:09 - defined in that shadow component you
158:12 - usually have access to this as a part so
158:14 - as we've seen with the item we have a
158:17 - detail icon part in which we can inject
158:19 - any kind of CSS without using variables
158:22 - now this was an explanation about the
158:25 - web components and how they work but
158:28 - there's one more thing that I want to
158:29 - show you that is the general
158:31 - configuration of our app
158:33 - now let's go back to the lockout
158:36 - I'm also gonna go back here to the
158:38 - lockout so I don't really like how the
158:40 - log out on iOS looks it's pretty cool
158:43 - that ionic is using adaptive styling
158:45 - because that gives us material design
158:47 - styling automatically in Android and web
158:49 - and iOS on iOS however if you don't like
158:53 - this on some components you can change
158:55 - this and you can not only change this on
158:58 - components you can also change this
158:59 - globally but let's do one by one I'm
159:03 - going into the login page and I'm trying
159:05 - to find my inputs so those were the
159:09 - email and the password input and I'm
159:11 - gonna add mode equals MD because MD is
159:15 - the material design mode I'm going to
159:17 - add this to both inputs and let's see
159:20 - what happens
159:22 - um actually nothing happens because the
159:24 - page is not reloading right
159:28 - um how can I reload this of course it's
159:30 - not reloading here let's see I'm gonna
159:33 - restart this
159:35 - and as a result we now have the same
159:38 - material styling on iOS that we had
159:41 - before so we can basically Force our app
159:44 - to say hey this component or that
159:46 - component should use a specific mode I
159:50 - can also do this for the button if I
159:52 - think the button looks better with that
159:53 - mode but of course now it's not changing
159:55 - again
159:56 - um so I'm going to stick it to those how
159:58 - does it actually work well the logic for
160:00 - the Adaptive styling is pretty easy just
160:02 - quickly explained if you check out your
160:04 - application uh you're gonna see
160:07 - but where do we go right here at the ion
160:10 - app level it adds the class oh thanks
160:14 - for that uh the class material design or
160:17 - if I would run this now on an iOS
160:19 - simulator it would add the class iOS to
160:22 - it so it really as easy as that we are
160:26 - adding at the top level one specific
160:28 - um class iOS or MD and then all
160:31 - subsequent
160:33 - um components on the page use their
160:35 - according styling or as I said if we
160:38 - want to we can change this on a per
160:40 - component level or what you can do as
160:43 - well you could change this globally and
160:46 - this is now in done inside the app TSX
160:48 - so in the beginning I already hinted at
160:50 - this that this setup ionic or recall has
160:53 - a lot more power and we can actually
160:55 - Supply a configuration in here so you
160:57 - can check it out there's an ionic
160:59 - configuration with a bunch of things
161:02 - that you can globally set
161:04 - you can set durations you can add custom
161:06 - animations which is by the way going
161:08 - back to what we saw before how we build
161:10 - animations yes you could do this to
161:13 - change like how your toast enters the
161:15 - page or how other Pages enter
161:18 - um and additionally like set the global
161:20 - refresh I can tell the general back
161:23 - button text or set the mode and that's
161:26 - what I'm going to try so I'm going to
161:27 - set my mode
161:29 - to iOS and if I set my mode to iOS what
161:33 - happens is on the web where we usually
161:34 - had the material design styling
161:38 - we would suddenly have IOS like buttons
161:41 - and an iOS like header iOS like overlays
161:45 - on the web which is actually looking
161:48 - pretty interesting I usually like the
161:49 - iOS styling
161:51 - additionally if you want something like
161:55 - no animations you could set animated to
161:58 - folds for the whole application not fail
162:01 - could be a fail but you want to do false
162:03 - and as a result everything will enter
162:06 - immediately you see menu opens closes
162:09 - immediately immediately back while the
162:11 - logging still we show that but then it
162:13 - just pops and
162:14 - no transition between a card model or
162:17 - sheet model so these are Global
162:19 - configurations that you can do I'm going
162:21 - to comment these out because we don't
162:23 - really want to use them so I kind of
162:25 - like the material on the web and for
162:28 - Native we have this but this shows that
162:32 - we can not only use these components and
162:35 - you should know understand what those
162:36 - components are they are web components
162:38 - and they're just HTML there's no magic
162:40 - behind them so you can always check out
162:42 - the source code and you don't have to
162:44 - rely on the general styling you can
162:46 - change the modes you can inject CSS
162:48 - variables for The Styling or sometimes
162:50 - use the different parts the shadow part
162:54 - of an item to inject custom styling now
162:58 - with all of that being said I think
163:01 - we've wrapped up the general UI part and
163:04 - now we move more into capacitor end to
163:07 - understand a bit more about the
163:09 - possibilities and the power that
163:11 - capacitor gives our app before we
163:13 - finally build our applications for the
163:15 - different platforms let's take one
163:17 - closer look again at capacitor because
163:19 - we're using capacitor but we're also not
163:22 - really using it yet so the cool thing
163:24 - about capacitor is not only that it
163:26 - wraps any kind of web application in a
163:28 - native container the cool thing are
163:30 - especially the plugins and we're just
163:33 - going to use one of these plugins now in
163:35 - our applications for example let's
163:37 - install the capacitor camera this is a
163:40 - very good example because it's going to
163:41 - teach us about a few different things
163:43 - first of all whenever we install a
163:46 - capacitor plugin it means we need to
163:48 - restart our live reload because we are
163:51 - making basically changes to the native
163:53 - projects so I'm going to use my iPhone
163:55 - 14 pro again
163:57 - and those changes need to be synced so
164:00 - you see this now uh under capacitor uh
164:03 - the installation it will now also
164:05 - install the capacitor camera not only
164:08 - the app and the haptics and keyboard and
164:10 - whatnot that we already had before so
164:12 - with that in place yes it will start up
164:14 - the application again now uh what else
164:18 - do we need to do well if we're talking
164:20 - about Native plugins we're now venturing
164:24 - away from our cozy little web
164:26 - development world and we're entering the
164:28 - world of IOS and Android and those rules
164:30 - are those walls have different rules
164:32 - for example to use the camera inside an
164:35 - iOS application you need to supply
164:37 - specific permissions same is basically
164:41 - true for Android as well we need to use
164:43 - these permissions and this is now I
164:47 - think the first real time that we have
164:49 - to interact with those uh platforms so
164:52 - what you need to do for example to use
164:54 - the camera and this is a common thing
164:57 - that you're gonna do if you're working
164:58 - with Android with capacitor many times
165:01 - is you have to go into the native folder
165:03 - and you're gonna have to find that file
165:06 - under app Source main manifest
165:09 - this is a very
165:12 - um central place every Android developer
165:14 - knows this file there's a lot going on
165:15 - in the Android manifest it defines a few
165:17 - things for your application and at the
165:20 - bottom we're gonna find the permissions
165:21 - block so I'm going to add my two new or
165:24 - three new permissions to read media
165:27 - images and to read and write the
165:28 - external storage and the same is now
165:31 - required for iOS so we need to now
165:34 - configure our info p list this is
165:36 - basically the same kind of file like the
165:38 - Android manifest but that is in the iOS
165:41 - folder under app info PLS a cryptic file
165:45 - with a bunch of strings in here and
165:48 - we're gonna add our own key uh the NS
165:52 - camera usage description uh you can put
165:57 - in whatever you want and then you also
165:59 - usually have like NS photo library usage
166:01 - description and finally uh well no in
166:04 - its location we're not using location uh
166:07 - we're gonna use the NS live photo
166:09 - library add usage description uh to well
166:13 - this is not really we don't really want
166:15 - to scan barcodes uh but anyway you can
166:18 - Define this to your own needs once you
166:20 - create an app I just want to show you
166:22 - that at this point we're kind of mixing
166:25 - web and Native together and we need to
166:28 - take care of that so we are responsible
166:30 - for managing the info PLS the Android
166:32 - manifest in on off our project
166:35 - now how do we actually use the camera
166:37 - that is once again pretty easy so here's
166:40 - an example this is all it takes to use
166:42 - the camera and we're going to use it on
166:45 - top of that I want to install the
166:46 - progressive web app elements I don't
166:48 - want to really talk a lot about
166:49 - Progressive web apps today we could
166:51 - probably have a whole course again on
166:52 - this on Progressive web apps if you're
166:54 - interested but while this package is
166:57 - doing is it's adding some cool things
167:00 - for capacitors so your plugins also show
167:03 - up nicely on the web for example for the
167:06 - camera how do we actually see a camera
167:08 - view on the web well with the pwa
167:11 - elements package we're gonna have a nice
167:13 - overlay for that
167:14 - the problem right now is usually I would
167:16 - install it like this and use it but at
167:18 - the time creating this course
167:20 - this wasn't working correctly with Veet
167:23 - so I'm gonna use the script instead and
167:27 - simply put those in my index HTML
167:31 - somewhere here in the head area I'm
167:33 - going to add the two scripts so that
167:35 - should work as well now at this point we
167:39 - can go back to our application and write
167:41 - the actual code to use the camera uh
167:44 - we're gonna do this on let's say the tab
167:46 - one page that's the last page where we
167:48 - don't really have anything yep so here
167:50 - we go
167:51 - let's simply Define a state image set
167:54 - image and then use state I'm going to
167:59 - set this to any null in the beginning
168:03 - on our page we will then add an image
168:06 - here so image source will be set to our
168:11 - image
168:12 - uh we don't really need an ltch and we
168:14 - of course need a button so ion button
168:17 - on click not really set image on click I
168:21 - want to call a function let's call this
168:23 - take picture it's gonna be an async
168:26 - function
168:27 - so that is what I'm gonna call in here
168:30 - and not this crazy part
168:33 - so take picture there we go and that
168:37 - should probably say take picture okay so
168:41 - we do have a button uh if I don't mess
168:45 - up my code here
168:46 - there we go take picture and also add
168:49 - the expand
168:50 - ion button expand
168:53 - come on
168:54 - full or block whatever you prefer there
168:57 - we go uh
168:59 - image example that's all also the
169:02 - headers counting for that okay now take
169:05 - picture is using the capacitor plugin
169:07 - that we just installed
169:09 - um it's certainly not working like this
169:11 - as copilot is recommending so we're
169:13 - going to write our own code const uh
169:17 - image equals await camera
169:21 - importing from the capacitor camera
169:23 - package get photo and there are a few
169:25 - other things like check permissions but
169:27 - that is usually done automatically if we
169:30 - take the first image we can also use
169:32 - pick images or get limited Library
169:35 - photos actually never use that one
169:37 - before so to get a photo we can supply a
169:40 - few properties like quality allow
169:43 - editing on Android the result type is
169:45 - interesting
169:47 - um that's what we're going to set in a
169:48 - second so we're going to set the result
169:50 - type 2 camera result type so we can
169:54 - nicely import this either base64 data
169:56 - URL or Yuri in this case we're going to
169:58 - make it easy and use base64 because then
170:01 - let me bring this in we can create our
170:05 - own image just like this a pre-pending
170:08 - data image JPEG base64 and then using
170:12 - the image base64 string that we get
170:14 - picked and the cool thing is this line
170:17 - is so powerful it is so easy we're gonna
170:19 - like four or five lines of code but is
170:21 - is doing so much well it's not really
170:24 - doing much but under the hood this is
170:27 - triggering the right call on Android
170:29 - it's calling the kotlin implementation
170:31 - of the camera on iOS it's calling the
170:33 - Swift implementation of the camera on
170:35 - the web it's using the web apis to get
170:38 - that image and we don't have to care
170:41 - about any of that we can just use it
170:44 - like this and then we set our image and
170:46 - we are happy so let's give this a try
170:48 - I'm gonna now take a picture and this
170:50 - brings up the pwa elements overlay that
170:53 - I talked about so it is now using my
170:55 - camera here I'm going to capture an
170:57 - image
170:58 - um usually there's like a bit of delay
171:00 - on the web so I'm going to use that
171:02 - image and the image is here on the page
171:05 - and we can do the same in here uh I
171:09 - actually don't know that we already
171:10 - redeploy let's give this a try logging
171:14 - go to my page take picture
171:16 - and uh
171:19 - if nothing happens yeah that's a good
171:21 - sign that we probably
171:26 - we did didn't we do it already uh let's
171:30 - see
171:31 - no probably not
171:34 - um or it's having some problems with the
171:37 - update uh ion label no that shouldn't be
171:39 - any problem
171:42 - um okay
171:44 - yeah maybe we messed up I'm just gonna
171:46 - do it again sometimes this is also
171:49 - having problems with the live reload uh
171:52 - in that case you can also just run like
171:54 - one build and we'll do the sync run one
171:57 - build
171:58 - um do that again but now actually it
172:01 - should work because we have set the
172:03 - right plist information as far as I know
172:05 - yeah no it comes up
172:08 - um by default this will open the dialog
172:09 - where you want to take this from photos
172:11 - or take picture on my simulator I will
172:13 - just use photos I'm gonna give access to
172:16 - all photos so this is now the permission
172:18 - dialog that is automatically triggered
172:20 - I'm just going to select this one and
172:24 - then I think those pictures are
172:25 - sometimes really big so I hope it shows
172:28 - up
172:29 - um
172:30 - or we get into trouble here
172:34 - try again let's try this one
172:37 - yeah this one shows up nice so again
172:40 - works both on the web I could also use
172:43 - an image here like one of my angular
172:45 - streams and select basically like a
172:48 - photo library and that works as well so
172:51 - we have image capturing and this is just
172:54 - one of the Native functionalities of
172:56 - capacitor there are different plugins in
172:59 - kinda included so that means they are
173:01 - managed by the ionic company by the
173:03 - capacitor team they are listed here
173:05 - under plugins and apis on capacitor.js
173:08 - home page especially the geo location or
173:11 - the Google Maps plugin is pretty cool
173:12 - which wraps Google Maps and uses the
173:14 - native implementation they have a native
173:16 - hdp plugin which helps you to use
173:18 - cookies and prevent course issues there
173:22 - are different other ones we already use
173:23 - preferences in the beginning local
173:25 - notifications is cool we got push
173:27 - notification stuff so just go through
173:30 - that list and try to use a few of them
173:32 - because they are actually really
173:33 - interesting but besides that there's
173:36 - also one more thing that we can or
173:38 - should do now as we move closer to
173:41 - releasing or building our application
173:44 - and that is also adding
173:46 - um an app icon and a splash screen and
173:49 - for that there's also a package called
173:50 - capacitor assets so I'm going to install
173:53 - this package now in my application
173:56 - uh here we go install capacitor assets
174:01 - and under
174:04 - um we want to put it in here I'm going
174:06 - to put this at the top level so this one
174:08 - expects a folder at the top level called
174:10 - assets
174:12 - hello sorry
174:15 - um Visual Studio you're still with me
174:17 - assets there we go
174:19 - and in assets you're gonna put in an
174:22 - icon and a splash screen so the splash
174:24 - screen is what shows briefly in the
174:26 - beginning of your application when it
174:28 - boots up the icon is of course how your
174:31 - app looks on the home screen of a user
174:33 - so I just created this logo PNG you can
174:35 - create your own little icon or use
174:38 - anything you prefer and once you get
174:41 - that we can use the tool here we can
174:45 - also Supply a dark logo by the way if we
174:47 - want to and this is now the line that we
174:50 - can use to generate our image in fact I
174:54 - think I used this before with a tiny
174:56 - little what I am calling it at
175:00 - assets
175:05 - yes there we go so here's the command I
175:07 - used before npx add capacitor which
175:10 - executes a local script from capacitor
175:13 - assets it will generate the icons and
175:16 - the splash screens using the icon
175:18 - background color or some dark color and
175:19 - for the splash screen also this dark
175:21 - color so let's run this command now
175:25 - and voila generating assets and it did
175:29 - generate our assets for the pwa for IOS
175:32 - and Android and we can confirm this
175:34 - actually so if I go back into the native
175:37 - project
175:39 - um we can check out the app
175:44 - um yes here's the launch screen and we
175:47 - can even see this better in where is it
175:49 - assets right under assets I can now find
175:52 - my app icon in all Dimensions with just
175:55 - one call that was pretty easy wasn't it
175:57 - I love it however to actually get that
176:01 - we're gonna have to remove the
176:05 - application I think
176:07 - uh so let's delete the app and I'm going
176:11 - to hit the reload once again
176:14 - so run please on my iPhone 14 pro and if
176:19 - I now run this this should install my
176:21 - application if there are some caching
176:23 - issues it might use the old version but
176:26 - usually yes that was briefly the splash
176:29 - screen and we also see we got our app
176:32 - icon in place so at this point you're
176:35 - pretty much ready to submit your
176:37 - application
176:39 - um because you got everything in place
176:40 - you got a splash screen uh you got a
176:43 - native icon and everything works we have
176:45 - now also uh used a bit more of capacitor
176:48 - as I wanted to uh say there are also a
176:53 - lot more capacitor plugins in the
176:55 - community so these the capacitor core
176:58 - plugins are just some of the plugins
177:01 - from ionic but there are also Community
177:03 - plugins so under the capacitor community
177:06 - on GitHub you're gonna find more plugins
177:09 - like Barcode Scanner like Firebase
177:11 - packages and a bunch more now they're
177:15 - just 50 repositories I mean that's quite
177:17 - a lot but they're not covering
177:19 - everything
177:20 - so in the past we or I already said that
177:24 - you used Cordova now Cordova has a tiny
177:27 - bit different system of how it handles
177:29 - stuff but capacitor is actually
177:31 - backwards compatibility with Cordova
177:34 - which means if I find like a Cordova
177:36 - plugin let's say Cordova contact picker
177:40 - something like that
177:43 - um this plugin although it's four years
177:45 - old so always be careful with the
177:47 - Cordova plugins they're sometimes not
177:49 - really maintained very well anymore
177:52 - um anyway you can use Cordova plugins
177:55 - holy moly 10 years ago with ionic with
177:59 - capacitor so usually you add Cordova
178:02 - plugins
178:04 - um like Cordova add some kind of plugin
178:06 - but with capacity you can just npm
178:09 - install these and capacitor will make
178:11 - sure that they work like 99 of Cordova
178:14 - plugins will work with ionic and I know
178:16 - the Cordova Community is really really
178:18 - big so over the years they're like I
178:21 - don't know thousands of Cordova plugins
178:23 - but many of them not very actively
178:26 - maintain as people move away from
178:28 - Cordova or shift to capacitor so just
178:31 - want to let you know that in case you
178:33 - heard about Cordova in case you think
178:34 - about Cordova or your company is moving
178:37 - from Cordova to capacitor you still can
178:40 - use these called plugins so with that
178:43 - being said I think we're ready with our
178:46 - app and we're finally able to take the
178:50 - last step together our last mission in
178:52 - this course is building the application
178:54 - and we will actually not only build it
178:55 - for IOS and Android we will also build
178:58 - it for the web and one additional
179:00 - platform in the end that you're gonna be
179:02 - surprised about so we have our
179:04 - application everything is cool and I
179:06 - just want to show you the general steps
179:08 - that you could now take to build out
179:10 - your application in general it would
179:13 - always start with something like ionic
179:15 - build this just builds the web project
179:17 - of your application and you can follow
179:19 - this up with a sync to your native
179:21 - project this is important because we've
179:24 - used live reload all the time so there
179:26 - might be some settings included that
179:30 - your application is using the remote
179:32 - server locally and we don't really want
179:35 - that so before you go live before you
179:37 - release your app you will run just a
179:39 - default build and then sync your app and
179:42 - then you could dive into the platforms
179:43 - you can just run cap open iOS which
179:45 - would open the project now to build and
179:48 - submit your iOS application to Apple
179:51 - you're gonna need a Mac you can do this
179:53 - in the cloud somehow but I said this in
179:55 - the beginning it's going to be painful
179:56 - and I don't really recommend it also if
179:59 - you want to release an app on the real
180:01 - app store you're gonna have to be
180:03 - enrolled in the iOS Developer program
180:05 - which I think is like 99 per year
180:08 - uh something like this 99 so and then
180:11 - you're gonna have to sign your
180:13 - application uh all of this setting up we
180:16 - do this in the ionic Academy I show it
180:17 - in a course or you can also find a big
180:19 - video on this on the uh on my channel so
180:22 - go check that out if you want to release
180:24 - your application basically uh you would
180:27 - go and run your application you would
180:29 - select like the general device and from
180:31 - the top of xcode you would run an
180:34 - archive so not a real build you would
180:36 - just do an archive yes I need to select
180:38 - my uh this for it for an archive to
180:41 - actually work this will then create an
180:44 - archive and you could go through the
180:45 - submission of uploading this to App
180:48 - Store connect and then putting up the
180:50 - images for the App Store the description
180:52 - and all of that stuff so making it short
180:54 - at this point we're basically leaving
180:57 - web uh we're leaving JavaScript and
180:59 - everything that we do and we just rely
181:01 - on the native tooling of the platforms
181:04 - and that is what makes capacitor
181:05 - different to tools like
181:07 - um I mean work with Cordova as well for
181:10 - Expo in the react native World they also
181:12 - trying to abstract this away but usually
181:14 - it's actually not too hard to use xcode
181:17 - or Android Studio so
181:19 - um also the benefit is you can just use
181:21 - the tools available to Native developers
181:24 - and they are usually pretty good you can
181:26 - also build this from the command line or
181:28 - you could change like the version
181:29 - numbers and stuff in xcode so it's not
181:32 - really too hard to manage a few things
181:34 - same for Android for Android you can
181:36 - open Android studio and within Android
181:39 - Studio you will have an option to run a
181:42 - build and create a signed bundle or
181:45 - signed APK you can also by the way just
181:48 - create an unsigned APK which you can
181:51 - distribute to your friend so on Android
181:53 - that usually works a bit easier if you
181:55 - do this you're gonna have to supply some
181:57 - keys for the bundle to upload and then
181:59 - you're gonna go through the submission
182:01 - in the Play Store which again takes some
182:04 - time but it's not really too hard you
182:06 - can find a video on that on my YouTube
182:08 - channel
182:09 - now this is IOS and this is Android
182:13 - um there's really no magic behind this
182:15 - there are a few steps involved but
182:16 - really it's no magic
182:18 - we gonna get more into magic as I'm
182:21 - gonna tell you that our page is just a
182:24 - website it is just a website and because
182:26 - it's just a website with ionic build
182:28 - we've created this dist folder and what
182:31 - I'm going to do now I'm going to do the
182:33 - easiest possible things so I'm going to
182:34 - open my app here and at the same time I
182:40 - will go to
182:43 - um I will go to netlife file I will just
182:46 - use netlify as an example because on
182:48 - Netflix I can deploy manually aside so I
182:51 - can just drop in a folder and that's
182:53 - what I actually gonna do now so I'm
182:55 - gonna drop in my app folder what we just
182:57 - did in here
182:59 - so I don't really recommend this way of
183:01 - deploying stuff you usually connect
183:02 - netlify to GitHub repository and on
183:05 - every commit it will rebuild your app
183:06 - and that sort of thing but I just want
183:09 - to show you that our app is just a
183:11 - website and within like seconds I can
183:14 - and I'm able to deploy this page uh
183:18 - actually oh I dropped did I drop in oh I
183:21 - dropped in oh no I dropped in the whole
183:23 - page that's not what I wanted uh your
183:26 - upload was interrupted yeah please
183:28 - um I definitely don't want to drop in my
183:30 - app I want to drop in the distal I was
183:32 - already curious why this is taking so
183:34 - long so yes please just upload the disk
183:37 - folder and not your whole project with
183:39 - Note modules oh I hope I didn't break
183:40 - the browser so manually deployed let's
183:43 - check it out and here is our application
183:46 - running on netlif I deployed to the
183:48 - World Wide Web
183:49 - working just as before because we're
183:52 - also optimized for bigger screens it's
183:54 - working nicely in here but of course it
183:56 - will also still have the responsiveness
183:58 - of smaller screens everything that we
184:01 - implemented before is now working on the
184:04 - web and taking a picture would ask me
184:06 - for camera access so everything would
184:10 - work exactly the same let's try to just
184:12 - pick this and there we go everything is
184:15 - working exactly like locally but
184:18 - deployed as a website so from our one
184:20 - code base we have now satisfied three
184:22 - platforms already we got iOS we got
184:24 - Android and we got the web but there's
184:27 - one more thing
184:29 - because our application is HTML in
184:32 - JavaScript what is close to that
184:35 - electron right you're using visual
184:38 - studio code so you're already using an
184:39 - electron application you probably also
184:41 - use slack and other applications that
184:43 - use electron I don't want to go too much
184:45 - into electron we got a course on
184:47 - electron in the ionic Academy but I just
184:49 - want to show you how quickly you could
184:52 - also get a desktop application there are
184:54 - like three commands that we need to run
184:56 - in our project to add electron as a
184:59 - platform for capacitor let's do this
185:02 - together first one is making sure and
185:05 - clean this npm install at capacitor
185:08 - Community electron I'll also kill the
185:11 - live reload for now
185:13 - okay second command is for
185:18 - in adding the platform so npx cap add
185:21 - capacitor Community electron uh this
185:24 - might or might not take a few seconds I
185:27 - actually don't know
185:29 - um and once we got that we should be
185:32 - able to open our web application with
185:35 - electron in a native container now we
185:37 - could also have a whole video about
185:38 - talking is electron good for web
185:41 - development or not there's also a rust
185:43 - um you know Tory available now which is
185:46 - on the hood using rust as far as I know
185:48 - but electron makes it really really easy
185:51 - to do stuff like this so let's open my
185:55 - platform and let's see
185:58 - um
185:59 - as far as I know there was a little
186:01 - problem with electron uh but here we go
186:05 - in a matter of seconds we have this
186:08 - native IO uh Native Apple application
186:10 - working uh this is so crazy it
186:13 - fascinates me because it's just I don't
186:16 - know uh crazy the only problem is as far
186:20 - as I know if we use this it's not able
186:23 - to make an HTTP call yet but this is
186:26 - just the configuration issue so let me
186:28 - try and put this to the side and quickly
186:30 - fix this as far as I know we now have an
186:33 - electron folder and with that we can do
186:35 - stuff for the electron app for
186:37 - customization and there's a setup TS and
186:41 - at the bottom of the setup TS I think
186:43 - there's a configuration right here
186:46 - um
186:47 - so instead of doing the content uh like
186:52 - we did it here
186:53 - and comment this out and use this one
186:56 - instead so this will allow access to
187:00 - other URLs as well if I now refresh
187:04 - um the application is gone from electron
187:05 - but opens up quickly again it's also
187:08 - automatically opening this debugging
187:10 - view so again it's just a web
187:12 - application I can now log in
187:15 - and voila here we go we got our app so
187:20 - that means at this point where's my
187:23 - netlify page
187:25 - so here is the netlify page here is the
187:29 - electron page and here is the native iOS
187:34 - application we get everything from one
187:39 - code base and that is the beauty not
187:41 - specifically of ionic but definitely off
187:43 - capacitor
187:44 - um so even if you don't like ionic and
187:47 - the components you've seen the power of
187:49 - capacitor is really fascinating in what
187:52 - it gives us we could also now put in
187:54 - right next to this and see the Android
187:55 - styling but we have covered every
187:58 - platform we have a native application
187:59 - that I could create for the Mac App
188:03 - Store we have a website that I can
188:05 - easily deploy and update and we have a
188:07 - native IOS and Android application that
188:09 - works completely native with an icon and
188:12 - is not distinguishable from any other
188:15 - native application and if this is not
188:18 - showing you the power and why you should
188:20 - use ionic and capacitor then I really
188:22 - don't know if you've made it this far
188:23 - congratulations on taking the first step
188:25 - to building ionic applications as a web
188:28 - developer I think adding this as a skill
188:30 - set to your web development tools is so
188:32 - powerful because you now have the power
188:34 - to not just build websites you can use
188:37 - that skill basically to 99 and build
188:40 - native IOS and Android applications or
188:42 - even desktop applications with electron
188:44 - including the power of capacitor and the
188:47 - styling of ionic you could also now
188:49 - build out that project add a few more
188:51 - pages and make it more logical and then
188:52 - use it as an example in your GitHub
188:55 - repository or show it on your CV to
188:57 - Future employers that you actually got
188:59 - the skill set to build native
189:01 - applications next to creating websites
189:03 - if you found this great there are three
189:04 - places where you can check me out first
189:06 - one is definitely the ionic Academy
189:08 - where I've been teaching ionic
189:10 - Developers for the past six years seven
189:11 - years almost how to build epic ionic
189:14 - applications we also got a private
189:16 - Community where we answer questions we
189:18 - have tons of courses on using Firebase
189:20 - using different back ends and
189:21 - implementing outside of cool features
189:23 - with ionic the second in place is my own
189:26 - YouTube channel so go check it out
189:27 - Galaxy's underscore Dev which is also
189:30 - one of my projects which is more focused
189:31 - on react native in case you're liking
189:33 - that but definitely heat over to my
189:36 - channel as I release at least one
189:38 - tutorial or one video per week over
189:40 - there as well and the third place is
189:42 - Twitter so go follow me on Twitter at
189:44 - schlimzan which is actually a German
189:45 - thing so that was a kind of bad idea but
189:48 - hopefully you're gonna find me otherwise
189:49 - just search for Simon Grimm on Twitter
189:51 - and follow me over there for fresh
189:53 - content basically every day I really
189:55 - hope you enjoyed this course on free
189:56 - code Camp about ionic and capacitor it
189:59 - has shown you the power of ionic and
190:00 - capacitor if you liked it please leave a
190:03 - like subscribe of course to the free
190:04 - code can Channel and let me know in the
190:06 - comments if you want to see me again in
190:08 - a future video thanks for your attention
190:09 - and of course happy coding
190:11 - Simon