00:00 - in this complete angular course for
00:01 - beginners you will first learn the
00:03 - basics of typescript and then you will
00:05 - learn how to use angular you will learn
00:07 - about important angular concepts such as
00:10 - binding dependency injection forms
00:13 - routing and more
00:15 - suntash is your instructor for this
00:17 - course he is a google developer expert
00:20 - for angular a github star and an active
00:22 - contributor to both angular and ngrx so
00:26 - he is the perfect person to teach you
00:28 - angular hi welcome to this course on
00:31 - angular getting started in this video we
00:33 - are going to introduce angular so we
00:36 - will talk about what is angular we will
00:39 - talk about framework versus libraries
00:40 - and at the end we will see some of the
00:42 - features of angular so we'll see a tiny
00:44 - to-do app and we'll go through some
00:47 - features
00:48 - so let's go through what is angular
00:51 - which is really important before you go
00:53 - ahead and choose angular as your
00:56 - framework so angular is actually a ui
00:59 - framework built by google and it is
01:01 - actively maintained by a team with uh
01:03 - within google which is the angular team
01:06 - and uh it has like around 30 members who
01:09 - are actively working on it
01:11 - angular
01:12 - had a previous version so uh there are
01:14 - some confusion regarding that so let me
01:16 - just clear it
01:17 - there was a framework called angularjs i
01:20 - am saying pause because it will just
01:22 - reach its end of life it was created
01:25 - back in 2009
01:26 - and it was created using javascript so
01:29 - it was a pure javascript framework
01:32 - around 2014 angular team decided that
01:34 - they will be rewriting the framework and
01:37 - they'll be creating a new framework they
01:39 - initially named it as angular v
01:41 - angular
01:42 - v 2.0 but later they decided to drop
01:46 - that v 2.0 they said
01:48 - it's angular so we have angularjs and
01:50 - now we have we had
01:52 - angularjs and now we have angular that's
01:54 - it and every so after uh the initial
01:58 - release of angular they decided to set a
02:03 - set uh set a release cycle for the
02:05 - framework so every six months there
02:07 - there will be some new additions
02:09 - new feature requests new enhancements
02:11 - some bug fixes which will be released so
02:14 - it happens every six months at the time
02:16 - of recording this video
02:18 - angular version 13 just released so
02:21 - if you are wondering we will be using
02:22 - v13 for this particular course no
02:24 - because we want the stable version so we
02:27 - will be going with angular v12 but at
02:29 - the end we can actually
02:32 - provide a video which will
02:35 - walk you through how you can upgrade
02:36 - from angular v12 to v13 so that will be
02:39 - covered
02:40 - so that's about the framework and one
02:43 - important thing
02:44 - when the team angular team decided to
02:46 - rewrite the framework they chose
02:48 - typescript as the language to rewrite
02:50 - the framework we will go through uh
02:52 - typescript in upcoming videos so we'll
02:54 - not talk more about it here
02:57 - what else so angular is a component
02:59 - based framework for building scalable
03:02 - apps so it's
03:03 - almost first choice for all the
03:05 - enterprise applications because they
03:07 - want to release faster which you will
03:09 - see in this course once we start
03:11 - implementing new features you will see
03:12 - how
03:13 - uh
03:14 - first we can actually do and deliver
03:16 - things so that's why it has been the
03:19 - number one choice so if you're thinking
03:21 - about what's component of course we are
03:22 - going to talk about component there will
03:24 - be an entire section which will talk
03:26 - about it but
03:27 - just let me tell you a little bit about
03:29 - what component based is so you use lot
03:32 - of websites in your daily life so you
03:34 - might have visited let's say if you were
03:36 - trying to learn angular you might have
03:38 - visited angular dot io or let's say you
03:40 - use facebook twitter every day
03:42 - so if i have to tell you what components
03:45 - are on those websites so you might have
03:47 - seen there is a sidebar there is a
03:49 - header there is a footer and there are
03:51 - some content areas right so for example
03:53 - in facebook you will see cards on
03:55 - twitter it's like totally different so
03:58 - those are small components which we
03:59 - talked about and all the frameworks
04:01 - which are out there for example react
04:04 - vuja angular they're all component based
04:06 - so you can create components and then
04:08 - you can build small small components and
04:10 - attach them together and build your
04:12 - application
04:14 - angular being a framework it provides
04:16 - you set of libraries and uh it has a lot
04:19 - of features included as part of
04:21 - framework so you have routing you have
04:23 - forms you have pwas uh which
04:26 - and uh many more right so you have
04:29 - data binding so we'll we'll talk about
04:31 - those features
04:33 - let's talk about framework versus
04:35 - libraries
04:37 - what is framework so frameworks
04:38 - generally condensed set of libraries so
04:40 - what i mean by that
04:42 - you might have used for example in case
04:44 - you have never used it that's absolutely
04:46 - fine but in case you have used some
04:47 - technologies like java.net in past
04:50 - you may have seen we use something
04:52 - called using or we do something called
04:55 - import in java so what you do we
04:58 - actually require or in case you have
05:00 - written lets you know node.js code you
05:02 - may have seen require or now
05:05 - the latest version support dsm so you
05:07 - might have used import so what we do
05:09 - right we actually import some libraries
05:11 - so
05:12 - if i talk about frameworks those
05:14 - libraries are part of your framework
05:15 - itself for example in.net so all the
05:17 - namespaces you which you import or you
05:20 - use are part of the framework itself you
05:22 - don't go outside similarly in angular
05:24 - framework also you have a lot of
05:27 - features for example
05:29 - i spoke about routing forms those are
05:31 - part of the framework so you can just
05:33 - import it with from the framework itself
05:36 - you can extend the framework of course
05:38 - uh you can build something on top of
05:40 - your framework
05:42 - linux dev tools is a good example uh you
05:45 - have ionic framework also which uses uh
05:48 - some of the features provided by angular
05:50 - uh so as we said there are some some
05:52 - examples of labels are you have
05:54 - angular.net you have java you have any
05:57 - express
05:58 - js so those are some examples
06:01 - now let's talk about libraries
06:03 - so libraries when we talk about
06:04 - libraries which we talk about some
06:06 - specific functionality for example let's
06:08 - say if i have to use uh low dash right
06:10 - so which is a really good uh
06:12 - uh blackberry out there so what low dash
06:15 - contains low dash contains a lot of
06:17 - utilities function which you can use uh
06:20 - to
06:21 - uh avoid a lot of code in your in your
06:24 - existing code face right so if i have to
06:26 - let's compare to
06:27 - objects i can just uh import something
06:30 - or use something from load as rather
06:31 - than adding my own so you can actually
06:34 - combine multiple libraries for example
06:36 - let's let me take an example of react in
06:38 - case you
06:39 - know about react right sorry in case you
06:41 - want to create an application using
06:44 - react so what you will do you will take
06:45 - react you will take react router you
06:47 - will take for
06:49 - some some of the form library which is
06:51 - available which suits your uh
06:53 - requirements so you will combine all
06:54 - those libraries and build your
06:55 - application that's what you do
06:57 - so that's that's libraries so some
07:00 - examples of course react moment js
07:02 - in moment.js has been deprecated but
07:05 - yeah it's a date time library now you
07:07 - can use late fns which is a replacement
07:10 - for moment.js and you have low dash
07:14 - let's talk about some of the features
07:16 - which is available we are not actually
07:18 - going to go into detail because we are
07:20 - going to go into more detail in the
07:22 - upcoming videos so uh there are a few
07:24 - features which is provided bangalore for
07:25 - example it has its own template engine
07:27 - uh it provides your data binding so you
07:29 - can find the data
07:30 - on your front end it has forms routing
07:33 - it provides you observables which is
07:36 - which is actually another library but uh
07:38 - heavily used inside angular and pws
07:41 - right so let's see an app
07:46 - so it's a small to-do app don't worry
07:49 - about the command as of now
07:51 - so i'll start this to-do app and we will
07:54 - see some of the features in action
08:26 - so here is our to-do app so
08:29 - you can see i'm whenever i click on this
08:31 - urls i'm actually being redirected to
08:34 - another url so this is routing so this
08:35 - is routing functionality you can see
08:37 - this is a form where i can input some
08:39 - values so let's add
08:42 - a
08:43 - bills
08:45 - as a task
08:47 - or
08:48 - by
08:49 - groceries
08:51 - as another task
08:53 - so these are two tasks which i've added
08:55 - now i can also mark this task as
08:56 - complete so and then i can go to
08:58 - completed task and see what are the
09:00 - tasks which are which has been completed
09:03 - so what we have seen here is you have
09:05 - data binding functionality you have
09:06 - forms you have routing
09:09 - let me show you pwa as well because
09:12 - it's being
09:14 - talked about a lot
09:15 - and
09:16 - let's see what actually pw is so
09:18 - whenever you visit some website you
09:20 - might have seen this symbol which says
09:22 - install app this is pwa functionality so
09:24 - what you can do is you can install your
09:26 - website as a native app it will behave
09:29 - like a native app in case you install it
09:31 - on your mobile in case i install it on
09:33 - desktop it will behave like a desktop
09:35 - app so that's that's about bwm
09:38 - so that's it from this particular video
09:41 - and
09:41 - we'll
09:42 - move to the next video now
09:56 - hi in this video we will talk about
09:59 - typescript
10:02 - as we said in previous video while
10:04 - introducing angular that typescript is a
10:07 - language in which the entire framework
10:09 - is written and we need to write our code
10:11 - in typescript as well so we are going to
10:13 - go through of course we will introduce
10:15 - you to typescript we'll talk about some
10:17 - basics i mean how
10:19 - the language came and who invented it
10:21 - and then we will talk about why should
10:22 - you learn typescript of course the one
10:24 - reason being you have to write your
10:26 - angular code
10:27 - using typescript but yes there is more
10:29 - then we'll talk about type safety and at
10:32 - the end we will see
10:33 - uh we'll install typescript and then
10:35 - we'll also write our first code and
10:36 - we'll execute that code so let's go
10:38 - ahead and get started
10:41 - so what is that what is the typescript
10:42 - right so let's
10:44 - talk about that first so it's a strongly
10:46 - typed programming language
10:48 - now you might be wondering what is
10:49 - strongly typed programming language so
10:50 - in case you are new to typescript just
10:53 - hang on we will be talking about it in
10:55 - more detail but in case you are coming
10:57 - from
10:58 - languages like java.net or in case you
11:01 - learned java.net in past so you might
11:04 - have seen that whenever you declare a
11:06 - variable you say okay it is integer it
11:07 - is a string
11:09 - it means you are already defining or you
11:11 - are telling the program that okay this
11:12 - is the data type of
11:14 - this particular variable and
11:16 - it should only hold the value of that
11:18 - particular data type that's what types
11:20 - of days
11:21 - and it is created and maintained by
11:23 - microsoft so initially a lot of people a
11:25 - lot of new developers thought that it is
11:27 - created by google which is totally which
11:30 - is wrong of course because uh
11:32 - as angular was the first to adopt
11:34 - typescript that that's why people think
11:36 - about uh
11:37 - or thought about that
11:39 - it is created by google but it is not so
11:42 - it is created by microsoft back in 2011
11:44 - and i think around 11 around 12 there
11:47 - was some
11:48 - public release which which was available
11:51 - but it didn't got so much recognition
11:54 - until unless google team decided that
11:57 - they will be writing their new framework
11:59 - which is known as angular v 2.0 that as
12:01 - we uh learned about in previous video
12:04 - that they will be rewriting the entire
12:05 - framework in typescript and then people
12:07 - started
12:08 - talking about typescript and now
12:09 - typescript also has many uh versions
12:12 - right right now i think the version 4 is
12:15 - there the major version but i think
12:17 - minor version is 4.4.4 so we'll see that
12:20 - i mean we'll of course learn typescript
12:22 - before we move into angular that's the
12:24 - whole idea about this particular section
12:26 - that where you will learn about
12:27 - typescript you will write your first
12:29 - program and
12:30 - we'll learn more about it
12:32 - it's a superset of javascript so let's
12:34 - talk about this
12:36 - thing uh before i i'm sure before coming
12:40 - to angular in case you have written uh
12:42 - your front-end code you might have used
12:43 - javascript and you might be wondering
12:45 - where is javascript and why why should
12:47 - uh we use typescript
12:49 - so you don't have to worry about it so
12:51 - most of the content com concepts which
12:53 - you have learned
12:55 - is actually same because if you see this
12:57 - diagram it says okay javascript is
12:59 - nothing but
13:01 - it's a subset of typescript so
13:03 - uh every javascript program which you
13:05 - have written so far is a valid
13:07 - typescript program
13:08 - and um you can actually go ahead and
13:11 - convert them to typescript by just
13:12 - renaming the file most of the cases it
13:14 - will work without any issue and then
13:16 - some type safety issues that's it but it
13:19 - should work
13:20 - so let's
13:21 - see what happens what uh
13:23 - why typescript right so why should be
13:25 - using typescript so as we mentioned it's
13:27 - a it's superset right it's a super set
13:29 - of javascript so
13:31 - almost uh learning curve is very much
13:33 - smaller it compiles down to javascript
13:35 - now this is this might be something
13:37 - which is confusing to you so we are
13:39 - saying that okay typescript is superset
13:41 - of javascript and then it compiles back
13:43 - to javascript yes that's the whole idea
13:46 - so
13:47 - script only provide your type safety so
13:49 - once you write your program most of the
13:51 - time what you see whenever you write a
13:53 - program or you write a code in
13:55 - javascript there is no type safety i
13:57 - mean we will talk about time safety com
13:59 - uh which will be coming up but yeah so
14:01 - the whole idea is to provide time safety
14:03 - to your program which will be compiled
14:05 - down to javascript by using which
14:08 - once you
14:09 - actually run your program or you compile
14:11 - your program you get all those errors
14:14 - related to type
14:15 - in your bra in your let's say in your
14:17 - development environment we before going
14:19 - to production that's a good idea it
14:21 - keeps your code work evergreen now what
14:24 - we mean by keeping your code evergreen
14:27 - there are many version of javascript in
14:29 - case you are not aware the es5 was there
14:32 - for a long time
14:33 - es5
14:36 - is supported by most of the browser even
14:38 - including i11 and older browsers now
14:41 - with latest browsers we have es6 or es
14:44 - 2015
14:45 - but that that's not it right so the uh
14:49 - the thing is it's going on the the
14:51 - development is going on the features are
14:52 - being added tc39 is the community which
14:56 - finalizes all the features which will be
14:57 - added into javascript and
15:00 - all the browsers implemented so yes uh
15:03 - 2015 is 2016 17 18 19 20 and then you
15:07 - will find 21 20 and then next those are
15:10 - the versions so that it's named by year
15:12 - and then next is of course all those
15:14 - experimental features
15:16 - but in case i want to i have written a
15:18 - code which now as of now uh works with
15:21 - es2015 and all the browser support most
15:24 - of the browsers support es2015 nowadays
15:26 - all the modern browsers
15:28 - now let's say all the browsers started
15:30 - supporting is 2016. if i have written a
15:33 - code using esp2e using javascript what i
15:36 - have to do is i have to actually go
15:37 - ahead and adopt to the new features
15:40 - right or new syntax but using typescript
15:42 - you don't have to you can just say okay
15:44 - compile down this javascript or compile
15:47 - this javascript to es2016 and then you
15:50 - are done that's it
15:51 - that's what i mean by keeping your code
15:53 - evergreen it is supported by all the
15:55 - major frameworks and libraries
15:57 - all the javascript
15:59 - code or all the javascript libraries you
16:01 - which you will find on nvm they do have
16:03 - something called types
16:05 - if they are not written in typescript or
16:08 - most of them are actually written by
16:10 - script written in typescript
16:12 - so of course here you can see react
16:15 - loves typescript react is one framework
16:17 - which is oh sorry one library which is
16:20 - not written in typescript they use
16:22 - something called flow and but you can
16:24 - write your code so now a lot of react
16:26 - developers are adopting typescript and
16:29 - writing their code in typescript angular
16:31 - written in typescript
16:33 - who
16:34 - the new version which is vo3 actually is
16:36 - rewritten in typescript so yep all the
16:38 - major frameworks supports even you can
16:40 - write your back-end code using
16:42 - typescript so express.js you have nesjs
16:45 - and all those frameworks can be written
16:47 - in typescript
16:50 - coming back times type safety so what is
16:52 - type safety
16:56 - in case uh you have written your
16:58 - javascript code in past you might be
17:00 - familiar with one error which we get a
17:02 - lot
17:03 - undefined cannot find or cannot read
17:06 - something or undefined
17:08 - or probably null errors
17:10 - why that happens because
17:12 - there is no types right i mean we you
17:14 - don't define that okay this particular
17:16 - variable will be integer and it will
17:18 - have a default value of something let's
17:19 - say 0
17:20 - or it's a string and default value will
17:23 - be let's blank you don't do that you
17:25 - don't do that in javascript
17:27 - and when we don't do that do that
17:30 - and we write try to compile our code in
17:32 - our browser and we try to access those
17:34 - properties or let's say access those
17:36 - variables and we try to access the
17:38 - properties of that variable
17:39 - what will happen in case there is
17:41 - nothing no value is defined or no value
17:43 - is assigned or there is no data type of
17:46 - course you will get an error
17:47 - but in case i can get those errors the
17:50 - undefined and null the
17:53 - most widely uh introduce error or
17:57 - most widely seen error in your
17:58 - javascript code while compiling your
18:01 - code
18:02 - what i mean by compiling your code
18:03 - nowadays you have lot of compilers which
18:06 - is available
18:07 - type
18:08 - typescript also comes with its own
18:09 - compiler so it's known as csc
18:12 - so
18:12 - what if we can do is we can capture
18:14 - those errors during compilation time
18:16 - that's that's what type safety does for
18:17 - you
18:18 - languages like c sharp and java they are
18:20 - they have been doing from a long time
18:22 - but
18:23 - now types type script is trying to solve
18:25 - that problem while writing your
18:27 - front-end code or as i said you can also
18:29 - you use it for your back-end because of
18:31 - course thanks to node.js you can run
18:34 - your javascript code anywhere browsers
18:36 - uh you can run on your os
18:38 - windows local machines right
18:40 - it's uh
18:44 - but one thing
18:44 - [Music]
18:46 - now
18:47 - as we said typescript will be compiled
18:49 - down to javascript
18:51 - you cannot run typescript code directly
18:53 - into the browser that's not possible uh
18:55 - typescript code
18:57 - is something which is just for your
18:59 - purpose for development purpose
19:01 - and it will give you the output of
19:03 - javascript code right so once you get
19:04 - javascript code you can go ahead and
19:06 - execute in browser your browsers cannot
19:08 - understand typescript there is a new
19:10 - runtime environment called deno uh which
19:12 - supports typescript you can write your
19:14 - typescript code and you don't have to
19:16 - actually compile it down to javascript
19:17 - it will just run
19:19 - we will see some code where we will talk
19:21 - about type safety but before that
19:24 - let's go ahead and create our first
19:26 - program and see how we can run create
19:29 - sorry create and compile our first types
19:31 - of code back to javascript code
19:50 - so what i'm going to do is i'm going to
19:51 - create a new folder uh which we which i
19:54 - will name it as typescript demo
19:57 - and we will keep the entire board which
19:59 - is related to typescript in this
20:00 - particular folder and this code will be
20:02 - shared with you so
20:04 - you can either
20:06 - just follow the video or follow the code
20:08 - write the code by yourself or you can
20:11 - download the code and play around it
20:12 - that's up to you how you prefer so let's
20:15 - create a
20:16 - new folder
20:32 - so i'm using vs code
20:34 - uh as my editor you can use whatever you
20:36 - want to but the preferred ps code i
20:39 - think it uh
20:40 - i mean it is available for all the all
20:42 - the os
20:43 - let me show you the link from where you
20:46 - can download it so you can just go to
20:48 - google and
20:50 - type vs code
20:52 - and
20:53 - code.visualstudio.com you can go ahead
20:55 - and download the latest version which is
20:57 - available right now i'm using windows
20:59 - and it gets automatically updated so i
21:01 - don't have to download it again but in
21:03 - case you are using other browsers just
21:05 - go to other platforms and
21:07 - install it
21:11 - so now our
21:12 - folder or our workspace is available so
21:16 - let's follow the steps to create our
21:18 - first program
21:24 - so what we need is we first need to
21:26 - install node node is required
21:29 - in case you have already installed mode
21:31 - just go ahead and verify the version we
21:33 - are going to use a node above 14 because
21:36 - that's what is supported by the angular
21:38 - latest version angular 12 and 13 also
21:40 - supports node 16 but as i said i'm not
21:43 - going to use node sorry angular 13 as of
21:46 - now
21:47 - so let's install or just first check the
21:50 - version so
21:54 - i'll use windows terminal
21:58 - to verify the version which you have
22:00 - installed you can just say note icon v
22:03 - it will give you the latest version my
22:04 - latest version is 14.15.5 which is okay
22:07 - because i want to use angular 12 and it
22:10 - supports it
22:11 - in case you don't have node installed
22:15 - doing it for first time so you can go to
22:17 - node.js.org
22:25 - and uh you can see latest table version
22:27 - is 16.13 as i said and you can download
22:31 - it as per your os by default it is
22:33 - giving me windows option because i'm
22:35 - using windows but in case you have mac
22:37 - os or linux it will probably prompt you
22:40 - with that particular setup
22:46 - okay so once uh you have installed node
22:50 - let's see what we have to do so you
22:53 - need to do npm in it to create a
22:54 - package.json file uh we will talk about
22:57 - a little bit about package.com later and
22:59 - then we have to install typescript and
23:02 - then we need
23:03 - some uh dna to initialize typescript so
23:05 - let's talk about the steps
23:10 - so this is my terminal and uh now first
23:12 - thing which we wanted to do is we wanted
23:14 - to create a package.json file so which
23:17 - is npm init this is the command and it
23:19 - will ask you a few questions you can
23:20 - just
23:22 - press enter and move on we just wanted
23:25 - a few things which is like name and
23:28 - version that's it and main index.js is
23:30 - fine
23:31 - so this once we have this package.json
23:33 - file now we need to install typescript
23:35 - so this package.json file
23:38 - will keep track of all the packages
23:40 - which you use
23:41 - and which is installed in your uh
23:43 - workspace
23:44 - so that's why we we are going to use
23:46 - this package.json this package.json is
23:48 - really important file because once you
23:51 - publish your code on npm uh npm actually
23:54 - uses all the information from this
23:55 - particular file what are the packages
23:57 - you depend upon what is your name what
23:59 - is the name of that package what is the
24:00 - version of that package so everything is
24:02 - actually taken from here
24:05 - so now we have our
24:07 - uh file we have our package resistance
24:09 - file now
24:10 - uninstall typescript so i'm going to run
24:12 - this command npm installed
24:14 - type
24:15 - script and it will probably give us
24:19 - probably let's see 4.4.4 yes as i said
24:22 - that's the
24:24 - exact question which is available right
24:25 - now
24:26 - and now it gives you node modules folder
24:28 - this is where all the packages which you
24:30 - installed
24:31 - will be kept
24:32 - nothing which you should check in
24:34 - so
24:35 - this is only for your development
24:37 - purpose
24:38 - now we have our typescript installed we
24:40 - uh have our package.json file we need
24:42 - typescript configuration files so we
24:44 - need to run dsc
24:46 - let's see what has double hyphen get
24:49 - so we have to do tsc iphone in it iphone
24:51 - fm internet and you will get a file
24:53 - called dsconfig.json really important
24:55 - file this is the configuration file
24:57 - which remember i spoke about you need to
25:00 - change your version and then you can
25:02 - compile your javascript to es 2016 and
25:04 - 2015 that's the file so this is where
25:07 - all the magic happens right
25:09 - so uh right now we are going to just
25:11 - talk about the first two properties
25:13 - which is target and module
25:15 - so target by default is es5 es5 is as i
25:18 - said the javascript version which is
25:20 - supported by all the browser all the
25:22 - modern browsers though they support
25:24 - es2015 so i'm going to change it to
25:25 - years 2015.
25:27 - module is something which tell which is
25:30 - for where you want to actually run your
25:32 - code with whether you want to run it on
25:34 - browser whether you want to run it on
25:36 - your
25:37 - os or your command prompt or from your
25:40 - machine local machine so sorry not local
25:42 - machine but yeah on your uh os not on
25:45 - browser so
25:46 - common js we are not going to
25:48 - we will let it be common js right now in
25:51 - angular you will see
25:53 - it will use es next which is of course
25:55 - for browsers
25:57 - so that's it so i changed my target to
26:00 - use 2015 and module just kept it common
26:02 - js there are few more properties which
26:03 - we will discuss about later on
26:07 - now let's write our first file so
26:10 - i'm going to create a file i'll name it
26:13 - as data types dot ts
26:16 - right so all the typescript files will
26:18 - have extension dot yes but before we do
26:21 - that let's create a
26:23 - js file and see what's the problem i
26:25 - mean why there is no type safety so in
26:28 - typescript sorry in javascript whenever
26:30 - you declare a variable what you do so
26:31 - you do let let's say
26:34 - i want to create a variable called fnm
26:36 - and probably you will be saying okay
26:39 - this is
26:40 - test right
26:44 - but
26:45 - javascript also allows this
26:48 - so as you can see actually i declared a
26:50 - variable called f name and then assigned
26:52 - a value a number it works doesn't give
26:54 - you any issues
26:56 - but it causes a lot of issues once we
27:00 - once we have hundreds of lines of code
27:02 - and
27:03 - now
27:04 - we lost the track okay what was the
27:05 - variable type and then we tried to read
27:08 - or let's say use some function which is
27:11 - actually for a string but the values
27:13 - number what will happen of course it
27:15 - will give you some errors that's that's
27:17 - what the problem is
27:20 - now let's go to typescript so i'll
27:22 - create
27:23 - a variable
27:24 - i'll call it as a name
27:27 - and let's
27:28 - say it is sean
27:30 - which is not last name welcome
27:32 - and now try to give it us the numeric
27:35 - value
27:36 - so in typescript it will give you an
27:38 - error it will say okay this type number
27:41 - is not assignable to typestring because
27:43 - of course i mean this is uh you file
27:46 - initializing the variable you said okay
27:48 - this is string
27:49 - and how this is happening uh we will
27:51 - talk about it i mean
27:52 - we are not if you see we are not giving
27:55 - any data type but somehow it is saying
27:57 - okay this type of string so we'll talk
27:59 - about that as well but yeah this is just
28:02 - to introduce you that okay this is what
28:03 - type safety is i'll recommend this out
28:06 - and see how to compile this code
28:10 - so here uh
28:11 - what we will do is
28:13 - uh typescript comes with its own
28:14 - compiler.tsc so run tsc
28:17 - now once you do tsc it will compile down
28:20 - this code to javascript code so it will
28:22 - create another file with same name so
28:24 - you can see its name
28:26 - types.js and almost it contains the same
28:28 - wood but i mean it's a js file so this
28:31 - this is the output which is generated
28:33 - but we will be doing a few more things
28:35 - with are this data.ts5 this
28:38 - code was just to introduce you how you
28:39 - can compile your code and how you can
28:41 - write your typescript code and how you
28:43 - can get the es25 es2515 version as your
28:47 - output or javascript version as your
28:50 - output so that's it from
28:52 - this video and we'll move on to the next
28:54 - video now
29:00 - in this video we are going to talk about
29:02 - single page applications
29:04 - i am sure in case you are
29:06 - going through some job requirement or
29:08 - you are going through some
29:10 - development uh using new frameworks they
29:12 - all support single page applications
29:14 - right so it's it's one of the widely
29:16 - used word nowadays in technology so
29:19 - every framework all the major framework
29:21 - which we have they support sp
29:23 - so let's see what we are going to do in
29:25 - this video so we will be talking about
29:26 - what is pa and we will also talk about
29:28 - how angular actually helps you to build
29:30 - single page applications
29:33 - so
29:34 - as i mentioned spa stands for single
29:36 - page application and all the modern
29:37 - frameworks angular java you are sorry
29:41 - angular java and react
29:43 - and vujs so all those frameworks
29:46 - supports creating single page
29:47 - applications
29:48 - so what's the difference
29:51 - so in older days whenever we used to
29:53 - create a web page we used to create
29:55 - multiple pages for each and every view
29:58 - the problem is of course we are actually
30:00 - rewriting most of the htmls we cannot
30:03 - reuse
30:04 - and
30:05 - another thing was whenever we used to
30:08 - switch between the urls for example
30:10 - let's say you have page called about
30:11 - this you have page about home or home
30:15 - page so what used to happen is there
30:17 - used to be page refresh
30:19 - the reason was
30:20 - whenever you click on a url the entire
30:23 - compilation of that code used to happen
30:25 - on server side so it's like i'll give an
30:28 - example of a spx pages which were like
30:30 - uh
30:31 - which will uh which were used long back
30:34 - and it was created by dominant framework
30:36 - or dot using.net framework so we used to
30:38 - create aspects pages where like uh for
30:41 - each url we will be creating each page
30:44 - and whenever you click on a page it
30:46 - request goes to server server will
30:48 - identify okay this is the page which is
30:50 - which is requested and then it will
30:52 - compile down all the pages and then it
30:54 - will give you the html then
30:57 - a lot of developers thought okay i think
30:59 - this is not the most efficient way what
31:02 - we can do is we can just give the static
31:05 - pages as it is
31:06 - rather than actually compiling
31:08 - everything on servers we can actually
31:10 - send all the resources to the client
31:12 - browser and then
31:14 - it can render it
31:15 - no compilation needed so that's where
31:17 - others how spa came into picture so in
31:19 - spa what will happen is all the
31:21 - resources actually to render everything
31:23 - will be sent on browser's machine or on
31:26 - your clients browser machine and that's
31:28 - it that's the only request will have
31:30 - which will happen and whenever there is
31:32 - some page uh data which is which will be
31:34 - requested for example if you have some
31:36 - apis
31:37 - to get the data from there will be a
31:39 - request but it will not reload the
31:41 - entire page that's the difference in
31:44 - spm even though i have multiple urls
31:48 - in
31:49 - frameworks like react or angular or vu
31:52 - it will be like
31:53 - a bunch of javascript code which will be
31:55 - required to re-render something so in
31:57 - case let's say i have form i have a
31:59 - powders and i click on about us
32:02 - so some javascript code which is already
32:04 - which will be rather either downloaded
32:07 - or which is already present
32:09 - will just go ahead and change that
32:11 - particular view so it will render
32:12 - whatever information is required on that
32:15 - particular view so that's that's how spa
32:17 - works
32:20 - how angular helps so angular has its own
32:23 - routing routing engine so whenever you
32:25 - click on some urls angular knows which
32:28 - view to render and that's how it happens
32:30 - angular has its own library called
32:32 - angular slash router which we will learn
32:33 - about and see how it how you can
32:35 - actually do everything you can
32:37 - request for url you can create your
32:39 - multiple urls friendly urls i would say
32:42 - or html5 urls now which is used
32:45 - and then angular also offers ssr server
32:47 - side rendering yes it's available but
32:49 - again it's not like the older days where
32:51 - the request goes to server and then
32:53 - there is a full reload which will never
32:55 - happen so it's not the full reload which
32:57 - happens but here angular will actually
33:00 - go to server and then compile and it
33:02 - will give you
33:03 - whatever data which is required with the
33:05 - entire page so it's not like
33:08 - the difference between ssr and spa is
33:10 - ssr is good for seo search engine
33:12 - optimization in case you
33:14 - for you your focus is more on seo
33:17 - go for ssr or there are other
33:20 - tools available to
33:22 - create your static pages for example
33:24 - there is something called skully which
33:25 - you can also use
33:27 - so this is it from spa and now
33:30 - let's move on to the next
33:53 - so before we go ahead and learn about
33:56 - of course typescript in angular we need
33:58 - some software to be installed so what we
34:00 - are going to need is we are
34:02 - so what we are going to need is we are
34:03 - going to need nodejs and we are going to
34:05 - need an editor
34:07 - editor is your choice i am going to show
34:09 - you how you can install vs code and i
34:11 - use vsco personally
34:13 - so lets go ahead and
34:25 - so before we go ahead and uh
34:27 - start learning about typescript and
34:29 - angular we are going to need some
34:30 - softwares to be installed and that's
34:32 - what we are going to do in this
34:33 - particular video
34:35 - we are going to need vs code and we are
34:37 - going to need node.js as well
34:39 - so uh
34:41 - editor is your choice vs code is the
34:42 - editor which we are going to use but we
34:44 - node.js is mandatory
34:46 - and you can use any editor of your
34:49 - choice apart from vs visual studio don't
34:51 - use visual studio because it's it's like
34:53 - heavyweight and
34:55 - it has a lot of things right which we
34:57 - don't need generally so
35:00 - what we are going to do is let's go
35:01 - ahead and install node.js and then we
35:03 - will see how we can use install uh how
35:04 - we can install vs uh code
35:06 - or uh
35:08 - and if you prefer any other reader
35:10 - please feel free to install that
35:11 - particular so let's go ahead and see
35:13 - node.js first
35:18 - to install node.js you have to visit
35:20 - this site called node.js rg and there
35:23 - are always two versions which are
35:24 - available so you have lts which is long
35:27 - term support and you have current
35:29 - current is where you have some uh
35:33 - experimenting features which probably
35:35 - you never need so don't install current
35:37 - because in case you are using it for
35:40 - development
35:41 - there may be some breaking changes
35:43 - so we will go with the latest stable
35:45 - version
35:46 - uh
35:47 - which is 16.13.0 so it says okay this is
35:51 - lts long term support and
35:54 - let's see first how you can
36:06 - so let's uh open a command prompt and we
36:08 - will see how we can actually
36:10 - verify which version of node.js is
36:12 - installed in on our machine and then we
36:14 - will go ahead and install the latest
36:16 - latest version so i actually updated uh
36:19 - node.js two days ago for my
36:22 - laptop so we will see the latest version
36:25 - which is available is 16.13.0
36:28 - but let's go ahead and install it
36:29 - anyways
36:30 - so i'll just download the setup
36:57 - so uh let's start the wizard and uh
37:00 - right now as i have already have 16.13.0
37:03 - available it is saying do you want to
37:04 - change
37:05 - or do you want to repair or do you want
37:07 - to remove so i click on change and i
37:09 - will change nothing so that's that's
37:10 - what we are going to do right now so you
37:12 - have a node.js runtime which is required
37:15 - we need a node npm package manager we
37:17 - will talk about npm in few seconds and
37:20 - of course i need all the other features
37:22 - so i'll just click on
37:24 - next
37:25 - automatically install necessary tools if
37:27 - this is something which if you are
37:29 - probably installing it for first time go
37:30 - ahead and do it but i'm
37:32 - going to skip it right now so let's go
37:34 - insta uh click next and
37:38 - it is asking me if uh
37:42 - okay so it is asking me to allow to
37:45 - change change
37:46 - on my application which is okay
37:50 - and this is it finish right so in case
37:52 - you get some error
37:53 - just let us know uh we will try to help
37:55 - or uh
37:57 - you may find some
37:59 - widely asked questions on step off
38:01 - in case something goes wrong now next
38:04 - thing which we need is npm
38:06 - why npm npm is a node package manager
38:09 - which will be used to install any
38:11 - packages which will be required for you
38:13 - so we are going to use it for to install
38:15 - typescript we will also see npm being
38:17 - used uh to install angular clm and we
38:20 - will also see npm being used when we
38:23 - want to install any other packages
38:25 - in case we are coming from dotnet or
38:26 - java background in
38:28 - dot net you already have some you have
38:30 - already have something called nougat
38:32 - which is the package manager in uh
38:35 - java or mobile world you have maven to
38:38 - install packages
38:39 - so it's similar so the only thing is
38:42 - no npm comes by default with node so you
38:45 - don't have to install anything you don't
38:46 - have to install it separately earlier in
38:49 - older days node.js and pm were two
38:51 - different things but
38:52 - people started using so much that node
38:55 - just decided to make it as part of the
38:58 - node build itself so you don't need to
39:00 - install again there are a few other
39:01 - package managers available uh which may
39:04 - you uh which you may use in your day to
39:06 - work day to day work in future so you
39:09 - have
39:10 - uh yarn and you also have pnpm so those
39:13 - are two other package managers which is
39:15 - which you can use
39:17 - npm as i said is already installed so
39:19 - you can see npm hyphen v which is 8.1.0
39:22 - right now
39:23 - and
39:24 - how to use it we will of course feed
39:26 - while installing type
39:28 - the next thing which we need is uh we
39:30 - need editor as i mentioned you can use
39:32 - anything any editor you want but we are
39:34 - going to see vs code
39:36 - so i'll search for vs code
39:38 - and this is the website and you can see
39:40 - there are
39:42 - multiple version for mac os windows
39:44 - linux you have unstable and insiders and
39:47 - you may ask okay what is insiders so
39:49 - insiders is something where uh vs4 team
39:51 - may give you some access access or some
39:54 - beta releases some features which is not
39:56 - still available for everyone and that's
39:59 - what insiders is recently windows 11 was
40:01 - launched
40:02 - for insider's program first and then it
40:05 - was launched for general purpose so
40:07 - stable is that's what general purpose is
40:09 - i mean you can go ahead and install and
40:11 - uh you don't have you get access to any
40:13 - beta features but it's okay right i mean
40:15 - uh probably you will be using it in
40:17 - product uh day-to-day development if
40:19 - you're comfortable going any use
40:21 - insiders otherwise stable is fine we
40:23 - will be using stable
40:25 - and
40:25 - to update visual studio code you don't
40:27 - have to actually do it manually uh it's
40:30 - it gets updated in background so when
40:32 - once you install it that's it that's the
40:34 - only thing which you need to install and
40:35 - then it will be updated in background
40:37 - regularly whenever there is a new
40:39 - release
40:41 - so let's go ahead and download the
40:42 - stable version as of now
40:46 - so it says the current version is 1.62.2
40:49 - so let's see
41:05 - and in case we you want to use visual
41:07 - studio i think visual studio 2022 will
41:09 - be available soon but
41:11 - as i said i don't use it so it's really
41:13 - happy
41:15 - you can use webstorm
41:18 - or any other editors which you like so
41:20 - let's see so i'll say accept agreement
41:23 - and create desktop icon i'll just click
41:26 - on all
41:26 - and let's go ahead and install i already
41:28 - have the latest version available i'm
41:30 - just doing it to show how to install it
41:32 - and again in case you get some issues
41:33 - while installing vs code
41:35 - generally uh the problem which you get
41:38 - during installation is related to the
41:40 - access so make sure that you are running
41:43 - all the setups as an administrator just
41:45 - to avoid error in case you still get
41:48 - some error just let us know we will try
41:50 - to help as much possible uh and before
41:53 - you uh
41:54 - like wait for the response just check it
41:58 - on stack or for flow as well probably
42:00 - you will get your solution there and
42:02 - that's it so let's launch visual studio
42:04 - code and we are done so in
42:07 - in upcoming videos we will be using vs
42:09 - code for all the code which we'll try
42:13 - previous video we saw how you can create
42:16 - your first file how you can use tsc
42:18 - typescript compiler now let's talk about
42:21 - data types so whenever you start
42:23 - learning any new programming language
42:25 - you learn about data types i mean how
42:27 - what are different data types it has and
42:28 - how to work with those so that's what we
42:30 - are going to do now
42:32 - so in day types we will talk about
42:35 - data types we will talk about uh
42:36 - inference type inference which is really
42:38 - important we will also talk about union
42:40 - and intersection types we will talk
42:42 - about generics and literal types
42:44 - so let's start with data so
42:47 - as we said typescript is a typed
42:49 - programming language and so it has lot
42:51 - of data types which is available and we
42:53 - will go through each one by one
42:56 - and
42:57 - let's go ahead and do that so we already
42:59 - have our program our workspace ready and
43:02 - the first stereotype which we are going
43:04 - to
43:05 - talk about is string
43:06 - [Music]
43:10 - so if you remember this code from the
43:12 - previous video we already declared
43:14 - something called lname and then we said
43:16 - equals to john which is a string value
43:19 - but how
43:21 - actually typescript knows that okay this
43:23 - is string
43:24 - we'll come to that but let's uh so let's
43:29 - let's uh
43:30 - so we'll talk about that i mean how
43:32 - angular sorry how your typescript knows
43:34 - that okay this type of string and this
43:36 - is where type inference come into
43:38 - picture
43:40 - typescript has the ability to determine
43:43 - the type from the value which is being
43:45 - assigned
43:47 - it's amazing right i mean you probably
43:49 - don't need to define the a type because
43:51 - typescript can actually guess it for you
43:54 - but don't try to do that i would suggest
43:56 - always use the type
43:57 - because sometimes sometimes it gets it
43:59 - wrong when you are writing complex code
44:01 - and it may give you some
44:04 - data which is
44:05 - not you want so here
44:08 - that's time difference so it can
44:10 - actually determine the data from its uh
44:12 - the value which is assigned so here it's
44:14 - a string so it is saying okay its type
44:16 - of string which is
44:17 - okay
44:18 - but in case you have to declare a new
44:20 - variable
44:21 - this is what you will be doing most of
44:23 - the time so you will say okay this is
44:25 - last name which is type of string
44:27 - and then you can assign a string value
44:29 - to this
44:30 - so it's my name
44:31 - [Music]
44:32 - last name
44:34 - and then
44:35 - the advantage is now i can actually if
44:37 - you say l name dot
44:40 - generally you don't get all the methods
44:42 - in case you're writing a javascript code
44:44 - and just declare a variable and press
44:46 - dot you will get list of functions for
44:48 - sure
44:49 - but it doesn't give you that okay this
44:50 - is only string function or numeric
44:52 - function it doesn't give you that
44:54 - here all the functions which you can see
44:56 - are actually
44:58 - uh can be applied on string that's it so
45:01 - you have to upper string to string
45:03 - so let's say if i do two upper string
45:05 - right and i'll say let
45:09 - new
45:10 - name
45:11 - equals to and name dot uppercase so i'm
45:13 - just updating or
45:15 - i'm updating the name to uppercase and
45:17 - now let's do console.log and see the
45:19 - output of this particular
45:22 - value
45:23 - now
45:24 - here you know type
45:26 - script compiler tsc can be used to
45:29 - convert or typescript the tsc compiler
45:33 - can be used to convert or compile your
45:35 - file to javascript code
45:37 - but how you will run it so we will be
45:40 - using node but there's something called
45:41 - ts node which you can also use but we
45:43 - are going to use tsc and node so let's
45:45 - see so we'll run dsc first which will
45:48 - compile this code to javascript which is
45:50 - right data.js and you can see your code
45:52 - available here and now i can just say
45:55 - node and
45:57 - data
45:59 - and you can see okay uh
46:01 - the uppercase function was applied to
46:02 - this value and then you have this output
46:05 - so you are running this locally because
46:07 - we are able to run this on my command
46:09 - prompt because i am using node as i said
46:11 - node can be used to run your code on
46:13 - your local machine you don't have to
46:15 - actually run the javascript in browser
46:19 - so this is string i mean
46:24 - let's see uh the
46:26 - the next attempt
46:28 - so
46:29 - it also has something known as number
46:32 - so let's talk about numbers so whenever
46:34 - you have some numeric value to a sign
46:36 - quite unused number for example let's
46:37 - say let h
46:39 - equals to
46:41 - let's say 20 right
46:42 - but
46:43 - you can you can do this because of type
46:45 - inference thing but in case you have to
46:46 - create a variable and you don't have a
46:48 - default value you can say type colon
46:50 - number uh sorry not
46:54 - not the and capital but yeah lower so
46:56 - you can see it says okay now you have
47:00 - let age
47:02 - ah okay i'm writing code in javascript
47:04 - file
47:06 - my bad
47:08 - and you can see i can say let age which
47:11 - is type of number and now i can say h
47:14 - is equals to
47:16 - 25 let's which is a value numeric value
47:19 - but if i say age is equals to
47:22 - 25 it will give me an exception it will
47:25 - say okay this is
47:27 - string but i am expecting number so yeah
47:31 - this is something which you can do you
47:32 - can also do uh decimal numbers so in
47:34 - case you have like
47:36 - uh
47:38 - decimal numbers you can say 25.5 that's
47:40 - also applicable
47:41 - that's uh and you here right so you can
47:44 - see h dot so you can see you will be
47:46 - only able to see the function which can
47:48 - be applied on number so you have to fix
47:50 - to precision but what in case let's say
47:52 - you want to type cast which happens
47:54 - right sometimes so yes that's that's
47:57 - possible as well so i can say let the
47:59 - result
48:01 - uh equals to
48:03 - so let's say if you want to you have a
48:05 - numeric string value and you want to
48:06 - pass it to in this is a normal
48:08 - javascript function this is something
48:10 - which is not coming from typescript yep
48:13 - this is something which is available in
48:15 - your
48:16 - javascript as well so you can say pass
48:18 - it and uh
48:19 - string value and it will work so let's
48:21 - uh create
48:24 - select
48:26 - dob equals to
48:28 - 25 right so it's
48:31 - it infers the value so i don't have to
48:32 - do anything so it says it's a string and
48:34 - then you can pass this string here
48:37 - and using percent you can convert it to
48:39 - number and let's see the magic here so
48:42 - it says result will be type of number
48:44 - because as i said due to time type
48:47 - inference functionality type script
48:49 - knows what what will be the return type
48:51 - so person returns a number and that's
48:54 - what out that's what the output is
49:00 - we will see some uh
49:03 - fun i mean we will see functions as well
49:05 - where we will of course try to play with
49:07 - uh these relatives
49:09 - and let's see the next so
49:11 - after seeing bull a number there is
49:13 - boolean as well which is available in
49:14 - almost um
49:16 - in most of the programming languages so
49:18 - let's talk about boolean so boolean is
49:20 - something which can hold true and false
49:22 - values right this is what we know
49:24 - this causes a lot of confusion when we
49:26 - come from a type safe language like
49:29 - dotnet or java
49:31 - it i was actually i got into a lot of
49:33 - issues initially when we started with
49:35 - typescript because i was coming from a
49:36 - document background let's see why
49:39 - so in java or dotnet whenever you say
49:42 - boolean it has a default value
49:44 - it's false
49:45 - right so let's see
49:47 - sensitive is
49:49 - valid
49:50 - which is type of boolean
49:52 - and in our types of language like dotnet
49:54 - and java we have habit of doing this is
49:56 - valid of type boolean because we know it
49:59 - will return the default value as false
50:02 - but let's see what happens here
50:04 - i am going to do console.log
50:09 - result
50:10 - and uh
50:12 - not result is valid sorry
50:16 - and you can see here there is one
50:18 - error so it says variable is valid is
50:21 - used before being assigned
50:23 - it is telling you that okay this value
50:25 - is not assigned and it is just giving
50:27 - you a quick warning here but let's see
50:30 - let's see what happens when we run the
50:32 - board so i'll say tse
50:34 - it will uh
50:35 - of course bring this warning here error
50:37 - this uh this error sorry it will print
50:39 - this error here as well and why i will
50:41 - just come back to that in a second but
50:44 - let's run the node and data
50:48 - and you will see you will get the value
50:50 - as undefined
50:53 - so where is the default value going so
50:55 - actually
50:56 - just let's go back to uh earlier video
50:59 - where we said
51:01 - that java type script will be compiled
51:03 - down to just
51:04 - javascript doesn't know anything about
51:06 - times
51:07 - so if i go to
51:09 - typescript.js you will see
51:11 - is valid that's it and
51:14 - if you write this code in javascript
51:15 - it's it will be undefined because you
51:17 - have not assigned any value
51:19 - that was the error which is printed here
51:20 - so it says it's not assigned so of
51:23 - course it was expecting that it will
51:24 - fail you have you are trying to access a
51:26 - variable but you have not assigned the
51:28 - value so it will be undefined why we are
51:29 - getting this error because of t is
51:31 - config and there is a property called
51:33 - strict true
51:35 - so if you keep this in if you use a
51:38 - district mode by default which which is
51:40 - by default
51:42 - you cannot or you you can but you will
51:45 - get an error if you try to access any
51:47 - variable which is not defined
51:49 - so while working with typescript keep
51:52 - district more true so it's like uh it
51:54 - enables all strict type checking options
51:56 - so you can see it says enable alt
51:59 - type checking option we will discuss
52:01 - about few of this
52:02 - stick type modes but right now let's go
52:04 - with
52:05 - the strict mode i mean where all the
52:08 - strict strict options are enabled so
52:10 - yeah that's why it was giving enough so
52:12 - whenever you are working in boolean make
52:14 - sure you define the default value so
52:17 - either true or false whatever you refer
52:19 - i mean whatever
52:21 - fits of course into your workflow or in
52:23 - your code so use default value false
52:26 - order and now you can see the error is
52:28 - gone itself
52:30 - so you might have seen one more
52:31 - advantage that you don't have to
52:33 - actually most of the time run the code
52:35 - you can actually see this types uh type
52:38 - related error inside your terminal
52:40 - itself so it saves a lot of time during
52:43 - the development
52:47 - now
52:48 - let's talk about the other day type
52:50 - which is ally again i will uh um
52:53 - go back and refer for example.net.java
52:56 - where you have
52:58 - list types available right so you have
53:00 - list
53:01 - which is available in type in java's
53:03 - java as well as starting
53:05 - in javascript world we use aries and
53:08 - generally we do something like this so
53:10 - let's say if you have
53:12 - emp
53:13 - list this equals to this
53:15 - this is generally
53:17 - how your array looks like in javascript
53:20 - so here if you see the type so let's say
53:22 - it says any of array what is any so if
53:26 - you see here in the database list
53:29 - there is any as well so we are going to
53:31 - talk about any let's
53:32 - come back to that later
53:34 - let's talk about arrays so in
53:37 - typescript you can declare a
53:41 - as
53:42 - as an array of some data so you can say
53:45 - string l for example if i just want all
53:47 - the values
53:49 - sorry
53:50 - or i want this array to only hold the
53:53 - values of type string what i can do is i
53:55 - can say string and then box
53:57 - there there is another syntax which is
53:59 - available as well so i can say let
54:01 - i can say department list
54:04 - which is you can also use this syntax
54:06 - which is known as array and then you can
54:08 - use this rectangle boxes this is known
54:10 - as
54:11 - generics so that we will also talk about
54:14 - generics in uh
54:15 - [Music]
54:16 - we will also talk about generics but as
54:18 - of now let's just see the syntax so yeah
54:20 - these are two ways in which you can
54:22 - define an array
54:24 - feel free to use any one so it's same
54:27 - because once it is compiled down to
54:29 - javascript you don't you will not have
54:31 - this particular type slider because it
54:32 - will be removed
54:34 - and then uh let's see i can say emp list
54:38 - is equals to i can create some arrays
54:42 - and i can have string right so if i try
54:44 - to add a number
54:49 - you will see uh i have we have an error
54:51 - so it says number is not assignable to
54:53 - type string so yep this is string array
54:56 - and let's change this to
55:00 - numbers list
55:02 - and we can say number of array of
55:04 - numbers
55:06 - right so i can just hold numbers
55:08 - here uh let's create a number list
55:12 - equals one two three four five these are
55:13 - five numbers
55:15 - there are few functions which you can
55:17 - apply i will i will talk about few
55:18 - functions as of now and then we will
55:20 - talk about few functions when we talk
55:22 - about interfaces because um
55:25 - you can do lot uh while uh with
55:27 - interfaces so here you can see num list
55:29 - so let's try to use some function right
55:32 - which we generally use in javascript
55:35 - so here let's try to filter all the
55:37 - values which is greater than 2
55:40 - so i can say let result
55:44 - is equals to i can say num list i'm not
55:47 - using my i'm not going to use map but
55:50 - i'm going to use some
55:51 - function called filter
55:52 - okay so this filter function by using
55:55 - this filter function i can say okay each
55:57 - number
55:58 - i'm accessing each number and then i
56:00 - will say
56:03 - num
56:04 - is greater than 2
56:08 - and
56:08 - this is closing
56:10 - so let's see uh here i think result is
56:12 - already declared above that's why it is
56:14 - giving me errors so i can say results
56:17 - and i think this is extra
56:19 - so now here let's see the output so it
56:22 - says okay result will be number of array
56:24 - so this filter function which is of
56:25 - course coming from javascript is same
56:28 - it here what we are doing is we are
56:30 - filtering all the values within this
56:32 - array where number is greater than two
56:34 - so if i print this output i can say okay
56:36 - the system is so
56:38 - dot log results
56:41 - and let's compile using type compiler
56:43 - and then run node
56:46 - you can see we have output 345
56:50 - also we can
56:52 - use few more so i can say results
56:55 - is equals to i can let's use some other
56:58 - function
56:59 - and
57:00 - find let's use find
57:02 - so i want to find a
57:06 - number which is equals to
57:13 - okay
57:14 - so here is a catch
57:22 - so if you see this results it was
57:25 - expecting a number of array here if you
57:27 - see this it says number or undefined
57:29 - because uh find method returns only one
57:32 - value so
57:35 - it doesn't return an array so just
57:37 - that's why we are getting that error
57:39 - because array it was array and then we
57:41 - cannot assign it number so that's not
57:44 - possible so i can just
57:46 - print console.log number and you will
57:49 - see that we will get the number i mean
57:51 - of course number two number equals to
57:53 - two which exists so
57:54 - let's see we have pse and then
57:57 - [Music]
57:59 - node
58:00 - so of course two is available in the
58:02 - array and we get that output so this is
58:04 - fine you can also use find function in
58:07 - case you are trying to find a single
58:08 - value for example let's say uh
58:10 - this
58:11 - in employee right so i think that's
58:13 - that's the best use case where i can say
58:15 - uh
58:16 - if this employee exists or not right i
58:18 - want to find that particular that
58:20 - particular employee
58:21 - so i can say emp list
58:25 - dot find then i can say emp and then
58:27 - equals to
58:31 - emp
58:36 - goes to this and then select
58:45 - and then we can the node and then we
58:46 - found that particular value so
58:48 - this is how you can use find you can
58:51 - also use i let me show you in simple
58:52 - example of sorry let me uh let me show
58:55 - you another example of reduce function
58:57 - which you may have uh heard about a lot
59:00 - in javascript with how you can use it so
59:02 - i'll use it to calculate the sum of
59:05 - number list
59:06 - let's see so i'll say let's sum
59:09 - is equals to
59:10 - you can see i mean if you can see this
59:12 - magic which is happening here this is
59:14 - something because of github copilot
59:16 - which is a product by github and right
59:18 - now it is in beta and
59:20 - you can apply for vert list
59:22 - so you can also use it so it says num
59:25 - list dot reduce so this is reduce
59:26 - function and here is accumulator and the
59:30 - number
59:31 - the way it works is it will calculate
59:33 - the sum
59:34 - till it reaches the end of the array so
59:37 - let's see and i'll just do console.log
59:41 - some
59:42 - so the output should be one plus two
59:44 - which is three then three plus three six
59:46 - six plus four four six plus four ten and
59:50 - ten plus y fifteen so let's see if i'm
59:52 - right i mean if i'm good at map or not
59:56 - so let's go to node and fifteen oh yeah
60:00 - so i am good at maths
60:01 - just kidding it's a simple math so yeah
60:04 - so this is how you can use reduce
60:05 - function uh to actually go through
60:08 - entire
60:09 - number
60:10 - uh this is reduces really useful in case
60:12 - you have area of some
60:15 - object and then you want to calculate
60:17 - let's say
60:18 - you have products right and then you
60:20 - want to calculate the sum of your card
60:23 - you can use reduce
60:26 - so these are few functions and we as we
60:28 - said we will come back to the areas when
60:30 - we talk about interfaces so let's
60:33 - move on and let's talk about the other
60:35 - area type which we have this is xenon uh
60:37 - enums are really um
60:39 - [Music]
60:40 - handy
60:41 - and it is available in most of the
60:43 - programming languages which we use let's
60:46 - see how you can actually use those so
60:48 - here you can use enum and i'll take a
60:50 - classic example of color so let's say i
60:53 - have a enum
60:55 - color and then i what i need is red
60:57 - green blue so
60:58 - red green
61:00 - blue
61:02 - so let's say you have some um
61:04 - probably design system where you want to
61:07 - restrict the
61:08 - colors which your team can use what you
61:11 - can do
61:12 - of course you can give them the list of
61:13 - colors that okay these are the colors
61:15 - which can be used what in case you can
61:16 - give them a typed list
61:19 - of course this is enums right so you can
61:21 - give them enums and you can say okay
61:23 - these are the these are the colors which
61:24 - can be used so let's say if i want to
61:26 - create a new color so i can say c which
61:29 - is type of color and then i can choose
61:31 - color
61:32 - dot
61:33 - and i can say okay which color i want
61:35 - green blue or red so this is how you can
61:37 - use enums
61:39 - let me show you a magic
61:41 - as a as we said right as sorry as i said
61:43 - in previous video that whenever you
61:45 - compiled on your typescript
61:47 - this
61:48 - types are actually removed they are not
61:50 - used that's only until you write the
61:53 - code and with enums in most of the cases
61:56 - you are not going to use enums on
61:58 - production i mean once your code is
62:00 - compiled you won't need
62:02 - this
62:03 - enums
62:05 - but let me show you what happens when
62:06 - you do dsc
62:12 - so this
62:14 - how many six lines of code is actually
62:15 - generated for that you know
62:18 - but on production i what i need is this
62:20 - line
62:21 - i don't need to know about this
62:23 - because of course i cannot change this
62:25 - value once in production right once my
62:27 - bundle uh once my code is compiled
62:30 - so
62:31 - how to uh how to take care of it
62:35 - typescript allows you to declare enums
62:37 - as const
62:39 - and
62:40 - this const will do the magic so let's
62:43 - see what happens
62:46 - that's it c equals 2 that's it this is
62:49 - the code which will be available on your
62:51 - production so
62:53 - what this cost will do is it will just
62:55 - stream down everything it will remove
62:57 - all the information because uh if you
62:59 - see enums enums actually have an index
63:02 - value so you can see here 0 1
63:04 - 2 so it will just keep those those index
63:07 - values and that's it it will trim down
63:09 - all the type information so in case you
63:12 - are not going to use this enums values
63:14 - on your production remove it by using by
63:18 - declaring them as const so you can
63:20 - actually let's say uh the example which
63:22 - i gave you are creating your design
63:23 - system and then your
63:25 - developers need to only select the
63:27 - colors from this
63:29 - but that doesn't need to be known once
63:31 - you are once your code is deployed on
63:32 - protection
63:34 - just declare it as a constant that's it
63:36 - so that's a very good use case and in
63:38 - case
63:39 - you want to trim down some bytes from
63:41 - your protection
63:47 - i mean when i was using.net i used to
63:49 - use it a lot i mean i think that
63:52 - when i was writing that dotnet code it
63:54 - was really
63:56 - the new feature which was introduced
63:59 - in uh dot net and it it is there from
64:01 - long time in python and very useful so
64:04 - let's see i mean
64:05 - uh what what we can do is
64:08 - let's use
64:10 - tuples to swap two numbers
64:13 - let's see how many lines of code feel
64:14 - right
64:15 - so i'll create let uh
64:18 - swap numbers
64:22 - [Music]
64:24 - which is
64:25 - type of
64:27 - integer
64:29 - sorry not integer so
64:31 - which is type of number common number
64:34 - so this is my tuple
64:37 - and i'll write a function right now so
64:39 - it's a function uh swap
64:42 - numbers
64:44 - and uh what this sharp numbers does is
64:47 - it takes to parameter so i'll say um
64:50 - it takes
64:52 - num one comma num two so these are two
64:56 - values it takes and it returns
65:00 - num
65:02 - to command num one
65:05 - now let's use it so what i'm going to do
65:07 - is i can say swap
65:10 - numbs
65:11 - is equal to swap numbers 10 comma 20. so
65:14 - let's see it says inning cannot be
65:16 - assigned
65:20 - okay so here
65:25 - number one
65:30 - so here uh i'm have to just assign the
65:33 - return type as well now let's see what
65:34 - it returns so it says okay it returns
65:36 - number common number
65:38 - and you must be wondering this looks
65:40 - similar to arrays what what is the
65:42 - difference so let's me let me show you
65:44 - that so here if i try to access swap
65:46 - numbers of zero
65:50 - okay
66:07 - here you can see i mean you must be
66:08 - wondering okay this looks similar to the
66:10 - aries but okay what's the problem here
66:13 - so if you can see okay i was okay
66:16 - the variable
66:17 - name was incorrect so he here you can
66:19 - see okay i can access this
66:22 - start numbers with zero i mean this is
66:23 - something which you can do with arrays
66:25 - as well
66:26 - here let's try to do that right
66:29 - so
66:30 - for example here num list
66:33 - so i can say let
66:35 - new
66:37 - num is equals to
66:39 - num list
66:42 - of
66:43 - zero
66:47 - and it works so uh if you
66:50 - know arrays index starts with 0 so 0 1
66:54 - 2
66:55 - 3 4. so 4 is the maximum index which we
66:58 - can access let's try two
67:01 - and
67:03 - five
67:04 - you don't get any uh
67:06 - any issue here i mean it's okay uh the
67:08 - value problem will be once you compile
67:10 - your code it will probably throw you an
67:12 - error right
67:13 - because there is no element at fifth
67:15 - index
67:17 - but still but let's try to do something
67:19 - similar here
67:21 - so we have two numbers available inside
67:24 - this swap
67:25 - function right so you have first number
67:27 - and second number
67:28 - so if i try to access swap numbers of
67:32 - two
67:36 - let's see
67:37 - again i just entered wrong variable name
67:41 - so here you can see it says this tuple
67:43 - has length of 2
67:45 - has no element at index 2 of length 2
67:48 - has no element index 2. so it is saying
67:50 - that this tuple only has two values
67:52 - that's it i cannot see any value at
67:54 - index 2 if i try to access the value at
67:58 - 1
67:59 - it will just give me
68:01 - the value that's it it will not give me
68:02 - any exception
68:04 - so
68:05 - what what do you think
68:06 - this doubles can be helpful at
68:10 - so let's say you have an api call which
68:12 - gives you let's say employee list and
68:14 - department list as well
68:17 - in most of the cases what you have to do
68:18 - is of course you have to
68:20 - uh go ahead and create two separate apis
68:23 - or probably you have to go ahead and
68:25 - find the objects and then you have to
68:27 - assign it to two different properties to
68:28 - return it from your function but using
68:31 - tuples you can actually easily do that
68:32 - right you can just return first
68:35 - first value and second value
68:37 - so you can probably say this is
68:38 - department and this is employee and
68:41 - your
68:42 - variable can be of type employee and
68:45 - type of department and it can just
68:48 - fetch the value by index using zero or
68:49 - one so you can say of employee or zero a
68:52 - zero will be let's say employee and one
68:54 - will be your department so that's what
68:56 - you can actually do using the tuples
68:59 - react has a lot of use cases for tuples
69:01 - i have not seen that much use cases in
69:03 - angular but uh probably some advanced
69:06 - cases so we which i have never been
69:08 - across but yeah this tuples are really
69:10 - useful in case you have a function which
69:12 - returns multiple values
69:13 - you can use triples
69:25 - let's see uh other data so now next day
69:27 - type which we have is ini
69:31 - we actually saw any data type
69:34 - we actually saw any data when we were
69:36 - going through errors remember so
69:38 - uh any is uh kind of let's say in
69:41 - javascript if you remember it just you
69:43 - don't have any data types so any is kind
69:45 - of equivalent so if i create a variable
69:48 - i'll select the
69:52 - department
69:55 - which is type of any
69:57 - so if i create a variable
69:59 - with
70:03 - type as any
70:06 - here so i have department of variable
70:08 - which is type of any i can assign any
70:11 - value to this particular variable so
70:14 - i can say department is equal to yt
70:17 - uh department equals to 10 and it will
70:19 - accept it will not throw any exception
70:22 - the first thing which you should do is
70:24 - do not use any in your code base so try
70:27 - to avoid any in case you have an
70:29 - existing code base try to
70:31 - move away from any and use the uh
70:33 - correct data types in case you can
70:36 - otherwise uh there is there is something
70:38 - called implicit any true flag available
70:40 - here as well which stops you from using
70:43 - any by default so if i just enable this
70:46 - let's see
70:50 - and i try to act like try to say um
70:54 - let's take this similar previous example
70:56 - right so where we had boolean
70:58 - remember this one
71:03 - it says is valid is used before being
71:05 - assigned so here and let's see
71:09 - what else we can
71:15 - let's see if this gives an error
71:22 - let's say some
71:24 - numbering let's try to create a function
71:27 - so it's a function add
71:32 - and here let's see
71:35 - implicit any
72:04 - because we are actually saying number so
72:07 - it will not give a semi error
72:13 - but yeah and i don't try to use any uh
72:16 - probably i'm not able uh not able to get
72:18 - the error because we are saying this is
72:19 - any but
72:21 - even though if you don't give any right
72:23 - so if you just create a
72:25 - variable without mentioning any real
72:27 - type you will also see that okay this is
72:29 - also type of thing so let's try to
72:30 - compile this code tsc
72:32 - and
72:34 - let's see the output
72:36 - right so it will work is a work as a
72:38 - design
72:39 - if there is no data types assigned
72:41 - so you don't have any type check and
72:43 - your application or your code may fail
72:46 - in production right because you are not
72:47 - using the time safety feature so first
72:49 - thing which you should do is not do not
72:51 - use
72:52 - uh type any anywhere
72:55 - in case you have an existing code base
72:56 - try to actually
72:58 - incrementally do it i mean you of course
73:00 - if you have a large code base you cannot
73:02 - do it at once you can do it slowly
73:04 - slowly in iterations that's what you
73:06 - should target about
73:08 - so this is amy and now
73:11 - the other day types which we have we
73:13 - have void and
73:14 - never
73:15 - so let's go ahead and see
73:18 - but before that i mean before discussing
73:20 - about these two types we will go through
73:22 - functions
73:32 - so uh in functions uh functions are what
73:35 - click some some uh set of instructions
73:37 - which you write uh for example let's say
73:39 - if i want to add two numbers what i can
73:41 - do is i can write
73:42 - a function
73:43 - which will have the instructions on
73:45 - getting the input how to add those
73:47 - functions and then return it so it's
73:49 - kind of uh probably a reusable thing
73:52 - which you can actually go ahead and
73:53 - reuse wherever you want or it can be
73:55 - your business logic as well right so
73:57 - probably getting the api data that can
73:59 - be a function
74:01 - so uh in this
74:02 - particular video we are going to talk
74:04 - about different ways to write functions
74:06 - so we will talk about
74:08 - how you can write your function in
74:09 - typescript then we will talk about
74:11 - generic function we will talk about
74:12 - optional parameter required parameter
74:14 - and rest parameter so let's
74:15 - let's go ahead and do that
74:21 - i'll create a new file for functions
74:24 - i'll call it as function start is
74:28 - so first let's talk about the ways in
74:30 - which you can write a function in
74:32 - typescript there are multiple ways the
74:34 - first first is of course named function
74:37 - for example i can say function and then
74:38 - function keyword and then i can say add
74:41 - and
74:44 - this is functions dot d is right
74:47 - so you have add functions and now you
74:49 - have two parameters and it returns a
74:51 - plus b
74:52 - this is generally what we write in
74:54 - javascript right
74:56 - but in typescript as we said
74:59 - we will be using type saved so i can
75:01 - remove this and that's okay this is
75:03 - number one which is type of number so i
75:05 - will be mentioning
75:06 - the
75:07 - type of
75:10 - parameters which it can accept so i'll
75:13 - say okay this is number
75:15 - which is type of number and this is
75:18 - actually as i said this is github
75:20 - copilot which which is being used here
75:22 - and then i can return
75:23 - num1 plus num2
75:27 - so in
75:29 - typescript you always have type save
75:31 - functions so
75:33 - uh in if i have to actually add a
75:35 - function in java if i have to create a
75:36 - javascript function for add
75:38 - and i don't define any uh types right
75:41 - generally i don't then i can accept
75:43 - strings as well and it can break your
75:45 - code as well but here we are saying okay
75:47 - this function this that function can
75:49 - only add two numbers so that's it that's
75:51 - taken care of and due to inference due
75:54 - to inference this add function knows the
75:56 - written type as well
75:58 - but i will suggest always
76:00 - have
76:01 - the written type
76:02 - let me tell you the reason why of course
76:04 - one reason is for compiler and what in
76:07 - case you try to add two numbers but you
76:09 - miss the written keyword which happens a
76:11 - lot of time i mean of course it happens
76:12 - with me
76:13 - sometime i just miss the written keyword
76:15 - and i just keep thinking why this
76:16 - function doesn't return anything
76:18 - let's see the return type
76:20 - so it says it's void remember the
76:23 - written type void which we spoke about
76:25 - or saw in the previous slide
76:27 - so void it means it will void it means
76:31 - it will not return anything right so
76:33 - this function will not written anything
76:34 - just to make sure that okay uh you don't
76:36 - get into such issues if i define the
76:39 - return type now you will start getting
76:41 - an error so it will say okay the
76:43 - function whose declared type is neither
76:44 - void or any must return a value because
76:47 - we are saying that this should written
76:49 - number then we have to put in return
76:51 - number
76:55 - that's th this is this is your first way
76:58 - to write function and then you can say
76:59 - okay let
77:00 - or let's do console.log
77:05 - add to comma 3
77:07 - right so i can just run dsc to compile
77:10 - the files and then you can use node
77:13 - functions
77:14 - and you will get the output as five
77:18 - let's see another way to write a
77:19 - function so you can also write a
77:21 - function like
77:23 - let's just use subtract
77:25 - is equals to
77:38 - or
77:44 - remove this uh this uh
77:46 - and i'll say return
77:51 - or you don't have to return such number
77:53 - one minus ten
77:54 - so this is also another way to write the
77:56 - function you can see uh same right so
77:58 - you have just you don't have function
78:00 - keyword that's it so here we are saying
78:02 - this is something which uh we know as
78:04 - arrow function right so you have error
78:06 - function have used here and then you are
78:08 - saying the sub function takes two
78:10 - parameter number one and number two and
78:12 - returns a number and uh within this it
78:15 - will say number one minus number so this
78:17 - is another way and let's try this out
78:19 - and see
78:25 - subtract two minus three of course which
78:26 - will we should return minus one so let's
78:28 - see run dsc and then
78:30 - [Music]
78:33 - known functions and we have minus one as
78:35 - output
78:51 - there is one more variation to write a
78:53 - function let's
78:55 - use constraint multiply
78:58 - and rather than using arrow function you
79:00 - what you can do is you can actually use
79:01 - a function keyword here and then you can
79:03 - say return number
79:05 - and
79:07 - here you can say okay ah sorry you don't
79:09 - have to use a function now
79:11 - you can say uh return
79:16 - num1 into num2 so this is another
79:19 - variation the way of writing a function
79:21 - you can use
79:23 - i mean whatever type you want to let's
79:25 - see the output right so if you run tsc
79:29 - let's go to
79:31 - functions.js so you can see uh this is
79:34 - your subtraction this is a
79:35 - multiplication
79:36 - so all the types are stripped and this
79:38 - is your normal name function for so this
79:40 - is name and
79:42 - this is
79:43 - a named function
79:45 - this is
79:46 - a function expression and this is arrow
79:48 - function so this is uh three types in
79:51 - which you can write a function
79:53 - and there is more to it but you don't
79:55 - have to worry about it this is this is
79:57 - the minimum information which we need to
79:59 - start working on our angular code base
80:03 - now
80:04 - after this let's
80:06 - see some example of
80:08 - optional parameters required parameters
80:11 - and rest parameters
80:13 - so let's say uh now you have this add
80:15 - function but what you need is you need
80:17 - this
80:18 - functionality where you want to add
80:21 - three numbers
80:22 - but third number should be optional
80:25 - so how you can do that so here
80:28 - in typescript you can see number three
80:31 - and you can put a question mark and
80:33 - say type of number so now you can see
80:35 - num3 is optional and your add function
80:38 - still
80:39 - works
80:40 - if i remove this
80:42 - you will start getting an error because
80:44 - this add function requires three
80:45 - arguments we have just passed to
80:47 - so
80:48 - this is this is known as required or
80:50 - sorry optional parameters so i can use
80:55 - it with two
80:56 - values and three values as well but i
80:59 - mean you must be wondering what how
81:00 - about here right so how to use it here
81:04 - uh i'm just adding num1 plus num2 you
81:06 - can use uh the
81:10 - optional chaining here so you can say
81:11 - num3
81:13 - if num 3 exist
81:15 - so i will say num
81:18 - 1 plus num 2 plus num 3
81:22 - else num 1 plus 1
81:24 - so this is
81:25 - a false statement in a single line so
81:28 - here you can see so it says if num three
81:30 - exists num uh add three numbers if
81:33 - otherwise just add two numbers
81:36 - uh this is not optionally changing and
81:37 - i'll talk about optional channel
81:39 - changing
81:40 - probably in next videos in upcoming
81:43 - videos this is not optional channels
81:44 - sorry sorry for that
81:46 - uh here uh you can also use so as i said
81:49 - this is optional parameter there is
81:51 - something called require parameter as
81:52 - well
81:53 - so here let's say i need three numbers
81:55 - but third number is required so
81:58 - i mean
81:59 - you can still go ahead and avoid that so
82:02 - i can
82:02 - create third parameter number three and
82:05 - i can assign it a default value
82:09 - so if no one passes this value
82:11 - 10 will be used so i can say num1 minus
82:13 - 1
82:14 - minus num
82:16 - 3 right so num3 has
82:19 - like default value of 10
82:21 - if no one passes then will be used but
82:23 - in case i pass the third value
82:28 - this value will be used so this is
82:30 - required and so this one is required
82:32 - parameter
82:33 - and this is
82:35 - sorry this one is optional parameter and
82:38 - this one is your required fact
82:46 - so we also have something known as rest
82:48 - parameters what is that
82:49 - let's let's go ahead and see that
82:52 - so now uh
82:53 - this function has had a requirement that
82:56 - okay third parameter can be optional
82:58 - and this is where it is required but
83:01 - let's write a function so let's say
83:03 - uh function
83:08 - and
83:09 - two
83:10 - okay i'll just
83:12 - i'll say add two
83:14 - and here
83:16 - the thing is i can pass and number of
83:18 - arrays n number of values after this
83:21 - so i have two numbers but after that i
83:23 - can just pass the n number of arrays
83:25 - that's the requirement how you can do
83:26 - that so i can say number three
83:36 - which is number array
83:42 - so i'm saying uh this
83:45 - you can see i mean so
83:47 - thanks to go github co-pilot it is
83:48 - writing code for me now so here you must
83:51 - be wondering what is happening here so
83:53 - here the third parameter is array so i'm
83:55 - using reduce
83:57 - to make sure that it come it actually
83:59 - sums everything and then adds in number
84:01 - one and number two let's see how to use
84:03 - it so i can say console
84:06 - dot log so i can say com to comma three
84:09 - but i can also do
84:11 - five six
84:12 - seven
84:18 - format
84:24 - argument of type number is not
84:25 - assignable to type
84:30 - let
84:33 - me numbers is equals to
84:41 - and let's try to use this numbers
84:44 - variable here
84:45 - should be okay
84:50 - yeah so we are using this rest operator
84:53 - right so i have to pass like this
84:56 - rest of numbers so here
84:58 - it will be 2 3 2 plus 3 and whatever the
85:02 - sum of this number is let's see dac
85:08 - and then we can say node
85:17 - and yeah so it's it comes to 20. so
85:20 - this is how you can use the rest
85:22 - parameters so in case you want to pass
85:25 - n number of numbers after this you can
85:27 - do that
85:28 - i mean in previous uh thing and previous
85:32 - without doing this you can also do this
85:33 - but you have to say dot dot and
85:36 - five six seven and
85:39 - i mean you can go as much as you want
85:41 - right so this is how you can actually
85:42 - pass this rest parameters or rest
85:45 - values
85:46 - so these are three uh
85:48 - ways how you can actually play with the
85:50 - parameters make sure that you always
85:53 - define the written type and always
85:56 - define the parameters type as well
86:03 - we will talk about generic function as
86:05 - well if you remember in previous video
86:07 - we saw an
86:09 - different variation of arrays remember
86:12 - array and then angle brackets and then
86:13 - we can define what data type it will
86:16 - have area of saying rf number so generic
86:19 - functions are like it can be like a
86:22 - function which can have
86:25 - return type
86:26 - based on what you pass
86:28 - so it will it will be like it will act
86:30 - like a placeholder so whatever you pass
86:32 - will be removed and
86:34 - uh will be returned at the runtime
86:36 - so let's go ahead and see that but
86:38 - before
86:41 - before going to that let me show you one
86:43 - more way to pass the data here for in
86:45 - the rest parameters we saw you can
86:47 - actually pass three dots but you can
86:49 - also do
86:50 - this
86:51 - you can just say
86:52 - five
86:54 - comma six comma seven comma eight i mean
86:57 - so the way it works is there is
86:59 - parameters it will take these two as
87:02 - first and second parameter and
87:05 - rest of the values will be passed here
87:07 - num 3 which is really cool about
87:09 - respects right so you don't have to go
87:11 - ahead and define 10
87:12 - parameters or
87:14 - 10 different parameters to actually hold
87:16 - those values
87:17 - now let's go ahead and create our first
87:19 - generic function so what we
87:22 - will create
87:23 - so what we can do is let's create a
87:25 - function which will take the
87:28 - array of
87:29 - string or area of number and then it can
87:32 - concrete all the values and give it to
87:34 - you as a new
87:36 - array
87:37 - let's see let's see how we can build it
87:47 - so here is the function so it uh
87:49 - function name is get items so we are
87:51 - saying this t is our placeholder you can
87:53 - call it anything you want so generally
87:56 - this was very confusing when i started
87:58 - learning generics i used to think t some
88:00 - t mean something because everywhere
88:03 - everywhere you go you will find t or
88:05 - every programming language you go for uh
88:07 - generics you will find t so it's not
88:09 - like that you can also make it type
88:11 - and then just change everywhere from d
88:15 - to like
88:19 - the official website of typescript which
88:21 - has a typescript handbook they use this
88:23 - pattern so they don't call it t to avoid
88:25 - this confusion they use time
88:27 - so we know okay what we uh
88:30 - what we mean is this is a placeholder it
88:32 - doesn't mean anything
88:34 - so uh let's try to
88:36 - pass some values and use this function
88:38 - so okay i'll call it as com get result
88:45 - is equals to we'll call get items and
88:49 - right now let's see what we are doing
88:51 - here so we are passing the array of
88:53 - numbers
88:54 - and it knows that okay we are saying
88:56 - okay as this number all the types are
88:59 - replaced and it is replaced with numbers
89:01 - so you can see this is how generics work
89:03 - so i can also do this
89:11 - is equals to get
89:13 - items and now i can pass abcd and now
89:16 - you can see it will say okay the return
89:19 - type is string you can also do this you
89:22 - can pass the written type i mean the
89:24 - type t here so you can say okay it will
89:26 - be i'm expecting to pass number and
89:29 - everything which will be returned should
89:30 - be of type number array
89:34 - and same here
89:37 - so it can infer the values i remember we
89:40 - we spoke about inference so it can infer
89:42 - the values and it can give you the
89:43 - proper proper return type so this is
89:46 - really useful in case you want to create
89:48 - some reusable function which
89:50 - apart from its type right uh it can uh
89:53 - we can take any type and it can work so
89:56 - you can do this you can actually go
89:57 - ahead and create that function as
89:59 - generic function so you can replace this
90:01 - type with whatever you want whatever you
90:03 - are working with
90:14 - now we are going to talk about classes
90:17 - if you have very any prior experience in
90:20 - programming you might have heard about
90:22 - classes because object oriented
90:24 - programming starts with classes you have
90:25 - like inheritance or polymorphism
90:27 - everything is around classes
90:29 - in
90:30 - javascript there was no concept of
90:32 - classes for a long time
90:34 - am i wrong yes i'm wrong so there was a
90:36 - way to create classes in javascript but
90:39 - the syntax was little bit different and
90:41 - it was uh
90:43 - it was kind of you may know this
90:45 - something called iffy immediately
90:47 - invoked function expression so that was
90:49 - equivalent of class in javascript
90:51 - and
90:53 - with es6 thanks to a6 we have class
90:56 - syntax available
90:58 - so thanks to es6 we have this class
91:00 - syntax available and typescript had it
91:02 - actually before before even that it was
91:04 - introduced in esx
91:06 - so
91:07 - uh earlier typescript actually you
91:09 - should like we used to write class
91:11 - syntax in types then it used to
91:13 - transpile into es5 and then used to give
91:15 - a cp function but when es6 introduced
91:18 - classes it started actually giving you
91:20 - class class syntax so you will see when
91:22 - we write classes the syntax are pretty
91:24 - much similar in javascript
91:26 - as well as
91:27 - uh typescript so let's go ahead and see
91:29 - what we are going to see so we will see
91:31 - of course we'll talk about classes we
91:33 - will see how you can create classes we
91:34 - will talk about properties and
91:35 - constructor we will
91:37 - talk about the how you can create
91:39 - methods how you can create instance of a
91:41 - class
91:42 - we will also talk about member
91:43 - visibility and then static members so
91:46 - let's go ahead and get started and let's
91:48 - create a new
91:50 - file so we'll call it as
91:53 - class
91:54 - yes
91:56 - so how you write class so you will use
91:59 - of course class keyword and let's name
92:01 - it as employee so uh for naming
92:04 - convention uh prefer this uh pascal case
92:08 - employee so let's say employ if i have
92:10 - employee information so i will be
92:12 - capital so right this is your possible
92:14 - case
92:15 - so right now we have a class called
92:17 - employee so this is how you create class
92:19 - and
92:20 - let me go to ts config.json right now
92:23 - and
92:25 - remember we changed this target es1015
92:26 - we are saying uh we are going to support
92:28 - modern browsers but what in case i want
92:30 - to support older browser so let's see
92:33 - how it used to create classes or we used
92:35 - to create classes in older days right in
92:37 - es5
92:39 - i can say tsc and
92:42 - it will transpile and give us this
92:44 - height so you can see this this is known
92:47 - as the immediately invoked function
92:48 - expression or iffy but if i change this
92:51 - configuration to use the es2015 version
92:54 - which is now supported by all the modern
92:57 - browsers
92:58 - and you can run dsc again
93:04 - and you can see okay same syntax right
93:06 - so class employee
93:09 - now let's uh go ahead and see how
93:12 - [Music]
93:13 - let's add some properties to this
93:15 - particular class how so let's say if we
93:17 - want to have some properties and some
93:20 - constructors which we generally do let's
93:22 - see how we can do that so to define
93:23 - properties you can create let's say id
93:25 - which is type of you have to give type
93:29 - to each property you should and
93:32 - right now as we are in stick mode you
93:33 - will get this
93:35 - error it says id has no initializer and
93:38 - it's not definitely assigned in the
93:40 - construct so
93:42 - in case you have default values go ahead
93:43 - and do that otherwise
93:45 - just put this
93:47 - exclamation mark which will uh which
93:50 - will avoid this error
93:52 - and we can say name and we can say
93:54 - address
93:58 - so this is how you can create properties
94:00 - but in case i want to use constructor
94:03 - and i want to actually assign all these
94:05 - properties using constructor
94:07 - typescript has a default constructor so
94:10 - let's go ahead and see how you can
94:11 - create an instance of this class first
94:13 - so i'll say okay this let
94:16 - emp is equal to new employee i will call
94:18 - this employee as
94:20 - uh john
94:21 - right so this employee name is john and
94:23 - then we can define or we can assign some
94:26 - properties so i can say okay this one
94:30 - name is sean
94:33 - and address this is 71 okay so this
94:35 - these are the properties these are the
94:36 - values which we have assigned to this
94:38 - particular prop
94:39 - and let's see how it looks like so you
94:41 - can just say console.log john and
94:44 - let's transpile this file tse
94:47 - and
94:48 - let's run it using node
94:54 - and you can see it gives you a employee
94:57 - object right and it's it is giving you
94:59 - all the values id name address so this
95:01 - is how you can create a class and assign
95:03 - its values here
95:09 - now let's talk about constructors so
95:10 - constructors are something which will be
95:12 - which will be responsible for creating
95:14 - an instance of this class so how you can
95:17 - use constructor of course by default
95:19 - there is a default constructor which is
95:20 - available you don't have to in case you
95:22 - don't want to
95:24 - or you can have parameterized
95:25 - constructor so in other programming
95:27 - languages you can actually have
95:30 - parameterized constructor as well as
95:31 - default constructor in typescript you
95:34 - cannot have both you can have either
95:36 - default constructor or parameterized
95:38 - constructor
95:39 - so here let's try to actually do that
95:42 - i'll create another constructor function
95:44 - i'll constructor
95:45 - [Music]
95:48 - so you will get an error so here you can
95:50 - see it says multiple constructor
95:52 - implementations have not allowed so you
95:54 - cannot do this
95:55 - by using constructor of course we we can
95:58 - avoid this
96:00 - in case we have default values right we
96:03 - can do something like this
96:06 - i can say okay this dot
96:08 - address is equals to
96:10 - address you can see as soon as i do this
96:13 - the error will be gone
96:16 - and then i can set this dot id
96:19 - equals to id and this dot
96:21 - name equals one
96:23 - but once we do this i mean what we are
96:24 - expecting is we are supposed to pass
96:26 - this properties by creating the instance
96:30 - so where we are getting the instance you
96:31 - can see at line number 15 and we
96:34 - started getting the error as well
96:35 - because we are not passing those values
96:37 - and it is expected that whenever you are
96:39 - creating an instance you have to pass
96:40 - the value so rather than actually
96:42 - passing this
96:43 - values here on line number 17 18 and 19
96:46 - we can go here so we can say one comma
96:50 - john and
96:51 - address is
96:52 - highway 71
96:54 - and we can remove this
96:56 - otherwise that will just overwrite the
96:57 - values which we don't want to and let's
97:00 - run it again so i can say tse
97:04 - and now i can just note and you can see
97:07 - you have the properties right so same
97:09 - values which was assigned here is
97:11 - available so this is how you can
97:13 - actually add properties and this is
97:15 - how you can create a constructor
97:17 - function
97:20 - now let's talk about uh methods how you
97:23 - can add methods to your class
97:26 - to create methods you can just give a
97:28 - function name you don't have to use
97:30 - function keyword so i can say okay get
97:33 - name
97:34 - with address
97:37 - and
97:38 - what i can do is i
97:40 - i want to actually have a written type
97:41 - as we said we should
97:43 - have a return type here string
97:46 - and i will say okay this is written
97:49 - uh this dot name plus this this dot
97:51 - address here actually i want to
97:53 - introduce one more
97:54 - uh
97:55 - syntax to you so here we can see okay we
97:58 - are passing this dot name and then we
98:00 - are passing we are concatenating two
98:02 - strings basically
98:03 - so we have this dot name and then there
98:05 - is a name will be john and
98:07 - then his address which is is highway 71
98:10 - let's try that out right so i'll say let
98:13 - address
98:14 - is equals to john dot get name with
98:16 - address and then we'll just do
98:18 - console.log here on line number 27
98:21 - and let's do tsc
98:26 - and we have this john highway 17 but
98:29 - this way of concatenation is really uh
98:33 - buggy sometime because your
98:36 - you may miss this so it happens it
98:38 - happens it happens with everyone uh it
98:40 - happens with me it happened fit me uh in
98:42 - past as well
98:43 - so what you can do is you can actually
98:45 - uh use the
98:47 - another you use another syntax
98:50 - which is a string literal uh you can
98:52 - actually do something like this so you
98:53 - can say
98:54 - uh in single quotes so you can
98:56 - use this
98:58 - this key which is filled which is known
99:00 - as
99:01 - tilt you can press this
99:04 - without shift
99:05 - right so
99:06 - looks like single quotes but it is not
99:09 - and then you can
99:10 - put it inside
99:12 - the dollar and curly brackets so
99:14 - variables you can replace with curly
99:16 - brackets
99:17 - and here also
99:19 - i can do same so i can say dollar
99:22 - curly brackets
99:25 - and
99:26 - now you can see i have a space here
99:30 - i don't have to manually put a
99:32 - concatenation sign which we did earlier
99:36 - and
99:36 - do that so i can say
99:38 - uh john stays
99:42 - at hyper 71 and let's see the output
99:47 - and this is something which you can do
99:48 - in angular as well so it's not like
99:50 - something specific to typescript i mean
99:53 - uh
99:54 - you can do where you can actually go
99:56 - ahead and utilize this code in your
99:58 - real-time application so using this
100:00 - string literals so
100:02 - you can see john stays that have you
100:03 - seen even no need to actually go ahead
100:05 - and concatenate using plus sign or uh no
100:09 - and you don't miss your spaces right
100:11 - that's that's the cool thing about it
100:14 - now let's talk about
100:19 - creating instance we so what we learned
100:21 - so far is we created a class we created
100:23 - uh
100:24 - properties and constructors uh we added
100:26 - properties we uh also added constructor
100:28 - we added a method we created an instance
100:31 - of class this is how you do it
100:33 - right so using new and class name uh
100:36 - let's talk about visibility right member
100:38 - visibility here
100:41 - uh you can see you have properties id
100:42 - name address but before that i i think
100:44 - i'm used to actually talk about why to
100:46 - create classes
100:48 - that's really important right so in your
100:51 - application what you are going to do is
100:53 - you are going to create a lot of you are
100:55 - going to create a lot of
100:57 - code which will contain your business
100:59 - logic how to actually write those
101:01 - business logic or where to write those
101:03 - business logic that's where class is
101:04 - coming comes really handy so a class
101:07 - will be responsible for like uh handling
101:09 - some business business logic which you
101:11 - will be writing for example let's say in
101:14 - angular we are going to use classes for
101:16 - writing services which can have like
101:18 - getting data from your backend and
101:20 - displaying it on your front end we will
101:22 - be using it for components which will be
101:25 - kind of your view so
101:27 - it needs some back end right i mean it
101:29 - needs some
101:30 - glass to actually give the data back to
101:32 - your html that's where we will be using
101:34 - classes so it's it's it will just wrap
101:36 - your entire business logic you are going
101:38 - to write your business logic into
101:40 - classes and you will have like tons of
101:42 - classes right different classes where
101:44 - you can have different logic for example
101:46 - if i'm writing some logic related to
101:49 - uh getting the data from
101:51 - my back end
101:53 - for all the
101:54 - rooms i want for example if i take an
101:56 - example which we are going to go
101:58 - and implement in our this course we are
102:00 - going to create an hotel management
102:03 - application so well let's say you have
102:05 - like lot of rooms available so you can
102:07 - write the class to get those room data
102:10 - and display it on your front end and
102:12 - assign or you can have like logic to
102:15 - assign your rooms those are the
102:16 - different logics which we will have
102:19 - so those logics will actually go into
102:21 - your classes
102:22 - so it classes makes like
102:24 - splitting your logic
102:26 - uh into
102:27 - smaller chunks right that that that is
102:29 - what your classes are going to make it
102:30 - possible
102:32 - and you can do lot of stuffs with
102:34 - classes which we'll see uh here let's
102:36 - say uh we have right now id
102:38 - you can actually create blog uh this is
102:41 - private uh keyword which is introduced
102:43 - in
102:44 - new version of javascript and now
102:46 - supported by typescript as well or
102:49 - you can also use private keyword but i
102:52 - just think you should not anymore
102:54 - because it's
102:55 - the native one is supported so you can
102:57 - say hash id let's see what it says
103:00 - so it says hash id is declared but its
103:02 - value is never read because it says okay
103:05 - it's a private value sorry private
103:07 - variable you can see now we have
103:08 - actually started getting
103:10 - this error here as well so
103:13 - i can say private
103:16 - or i can just use hashtag
103:19 - in case you want to keep it private so
103:20 - here you can see private id and then uh
103:24 - with private
103:25 - uh
103:27 - sorry private variables you can actually
103:29 - assign them into your constructor so if
103:31 - i keep the this one hash id so what i
103:34 - have to do is i have to go ahead and
103:35 - change it here as
103:37 - so i can assign this inside my
103:39 - constructor if i try to access
103:47 - the properties you can see i'm not able
103:49 - to access id because it's a private it's
103:52 - private to the class and we won't be
103:53 - able to access whenever we create a new
103:55 - instance of that particular class so
103:57 - that's the private property for you
104:00 - and prefer now if uh as you will be
104:03 - using probably android 13 in future i
104:06 - mean by the time this course gets
104:08 - released i prefer hash id which is like
104:11 - the native syntax for creating private
104:14 - variables in javascript
104:16 - so this is private by default all the
104:20 - properties and all the classes are
104:21 - public you don't have to mention that
104:23 - you can also make it protected
104:27 - so you can see okay now i have made it
104:28 - protected so why uh
104:30 - what protected does
104:32 - it is useful in case you want to extend
104:34 - this particular class so let's create
104:36 - another class i will call it as
104:41 - class
104:42 - manager which
104:44 - extends employee
104:51 - so ah here it says uh constructor for
104:54 - derived class okay this is this is
104:56 - something which is required in case we
104:58 - are extending so we have to call superb
105:00 - and this is it now
105:03 - here uh we can actually access all the
105:05 - properties so you can see i can
105:07 - get address and name
105:10 - uh properties
105:12 - which will be accessible here
105:14 - and
105:18 - [Music]
105:23 - but you can see uh whenever you create a
105:25 - new object you won't be able to get
105:29 - i mean so protected is something which
105:31 - will be
105:32 - available within class and
105:34 - the classes which extends this class so
105:37 - right now i can go ahead and access uh
105:39 - this name inside my class as well as the
105:41 - class which extends it but once you
105:43 - create the instance you can see it's not
105:45 - available it's uh something which is not
105:48 - visible to my instance a public instance
105:50 - which is created so this is how you can
105:52 - actually use protected classes between
105:55 - like in case you are trying to extend
105:59 - this is also known as inheritance in uh
106:01 - other oops concept so you can you also
106:04 - call it as inheritance
106:06 - so
106:07 - you can also get access to all the
106:09 - members i'm sorry methods as well so i
106:11 - can actually create
106:13 - uh this
106:15 - get name with address but here i can say
106:17 - this manager
106:18 - this uh whatever name is a manager at
106:20 - this particular branch right so this is
106:23 - really nice so i can say okay this let
106:25 - create let's create a new mic
106:28 - so mike is a manager who stays at cherry
106:30 - stripe and i can do
106:32 - console.log
106:34 - and get name with address now let's see
106:38 - we created an instance and then we have
106:40 - actually
106:42 - a new i mean we have implemented this my
106:45 - manager class actually implements its
106:47 - own method which is called get name with
106:49 - address but for in case i don't do this
106:52 - let's do that
106:54 - you can see i can still call get name
106:56 - with address what happens now
106:58 - [Music]
107:02 - so in this case what what will happen is
107:04 - your manager class knows that okay this
107:06 - method exists in my parent class so it
107:08 - will call the parent class so this is
107:10 - this is something which is really nice
107:12 - about inheritance you can achieve this
107:15 - and let's roll it back so we have its
107:17 - own function as well and we have
107:21 - implemented by manager so this is from
107:26 - member visibility and you can have
107:28 - static members as well now it is allowed
107:30 - so let's see uh static members probably
107:33 - let's talk about
107:35 - i can say static and
107:38 - should i create a method let's create
107:40 - another
107:42 - and i'll say return
107:43 - 50 right i'm just returning a number so
107:46 - with static members static members are
107:49 - something which can be accessed
107:52 - with the class name
107:53 - so here let's see what i am referring to
107:56 - so i can say john dot
107:58 - you can see it it has address and gate
108:00 - get name fifth address where is this
108:03 - particular function
108:04 - which is get employee count
108:07 - so you can
108:09 - do is employee dot get employee count so
108:14 - you will be able to call this particular
108:15 - method on the name itself without
108:18 - creating a new instance so this is what
108:20 - happens in static
108:23 - i wanted to show you one more thing
108:26 - yeah i wanted to show you getters and
108:28 - setups right so this is something which
108:30 - is widely used in programming languages
108:32 - like java and dotnet you can use skaters
108:35 - and setters you can also use getters and
108:36 - setters in typescript
108:38 - so here i can say get
108:41 - emp
108:43 - id so as of now you if you remember emp
108:46 - id is a private variable so it cannot be
108:49 - used outside you can it cannot be
108:51 - accessed outside but in case i want to
108:53 - access it so i can do is i can say okay
108:56 - this is a getter method
108:57 - and i can say return this dot hash id
109:01 - similarly i can have a setter with same
109:03 - name
109:04 - and here
109:06 - i can say this will be id which is type
109:09 - of number
109:10 - and i can say this dot id is equal to id
109:13 - i'm just assigning it so i i don't want
109:15 - to return anything
109:16 - i can say okay this
109:20 - right so this is the setter which will
109:22 - assign the value and this is the getter
109:24 - which will get the values here so now uh
109:26 - let's say
109:28 - let's do this
109:30 - and i just said john
109:33 - dot emp id is equals to 100 so i'm just
109:36 - then changing this employee id which was
109:37 - assigned as 1 200
109:40 - by using
109:41 - setters
109:42 - and
109:44 - here you have john
109:46 - dot
109:47 - um
109:48 - [Music]
109:49 - it says will be available on the
109:50 - instance itself so i think we already
109:52 - have
109:53 - console.log no we don't have let's add
109:56 - console dot log john dot emp id
110:00 - so what we are supposed to get it here
110:02 - so as we are calling it it will call the
110:05 - getter so we will get the employee id
110:07 - which is entered
110:08 - so let's clear
110:12 - and
110:12 - call dc again
110:16 - and i'll call node
110:18 - which is
110:20 - some
110:21 - node class and you can see i we are
110:23 - getting hundred so getters and setters
110:25 - it is also possible in case you have
110:27 - like hang off using getters and setters
110:30 - they are useful as well in case uh we
110:32 - will be using it in angular you will see
110:33 - some examples where we use getters and
110:36 - setters so
110:39 - this is it for from the classes we will
110:42 - now
110:42 - talk about interfaces so
110:45 - interfaces are really important i mean a
110:47 - lot of time you will be writing
110:49 - interfaces when you write a new code in
110:52 - angular or even uh you you use it
110:55 - outside
110:56 - why interfaces are important
110:58 - let's see
110:59 - so here we will be talking about of
111:01 - course how you can create interfaces how
111:03 - you can create uh
111:05 - use interfaces type you how you can
111:07 - implement interfaces yes that's possible
111:10 - how you can extend interfaces we will
111:12 - talk about optional properties with
111:13 - interfaces we will talk about object
111:14 - destructuring and array destructuring
111:17 - that's uh something which is really
111:18 - useful i mean
111:20 - you can actually avoid a lot of
111:21 - unnecessary code using object and direct
111:24 - structure and we'll see that
111:27 - so let's create a new file
111:29 - i'll call it as interface on these
111:37 - so to create an interface you can use
111:39 - interface
111:40 - uh keyword and then
111:43 - there is a naming pattern so a lot of
111:45 - developers
111:47 - i before interfaces i don't like it i
111:50 - mean even angular's uh documentation
111:53 - says don't use i so what i can do is
111:55 - let's create a user interface right so
111:58 - what a user can have so it can have a
112:00 - name okay it can have let's say it can
112:04 - have
112:05 - id
112:08 - and your user can have email
112:12 - so these are the properties so uh
112:15 - most of time you will be using
112:16 - interfaces as uh to create your own user
112:20 - defined data type so this is now a data
112:22 - type for eco so you have user
112:24 - it you uh interfaces can also have
112:27 - a function definition
112:29 - we will talk about what function
112:30 - definition is soon but here right now
112:32 - let's talk about interfaces as your user
112:35 - defined data
112:36 - so let's say you want to use complex
112:38 - object right so you have like name age
112:40 - id email
112:42 - and
112:42 - what we generally do in javascript is
112:44 - something like this
112:46 - so we create where
112:48 - users for example equals to
112:50 - and then you you just give all the
112:52 - property names i mean
112:54 - in
112:55 - of course in javascript you don't give
112:56 - type so you say
112:58 - uh it has name
113:00 - which is like blank
113:02 - age which is let's say one
113:05 - ide has one the default values right so
113:07 - and then
113:09 - you can say maybe less something blank
113:11 - this is generally i mean we have an
113:13 - habit of like creating an object in
113:15 - javascript
113:17 - but in typescript you can rather than
113:18 - doing this you can actually create an
113:20 - interface and then you can use this
113:22 - interface as a type so we have type
113:25 - safety that's the whole idea right so we
113:27 - can have type safety by using this
113:29 - values
113:31 - let's see
113:32 - what we can do so here
113:35 - remember uh so we have this user here
113:37 - and let's try to create another
113:39 - interface i will talk about let's go
113:42 - back to class
113:44 - here address
113:46 - do you think we can actually uh
113:48 - have a complex object as an address yes
113:50 - we can for example we have at this line
113:53 - one address line to zip code or country
113:55 - or city whatever those are the
113:57 - properties which uh your address can
113:59 - have but right now is it possible yes i
114:01 - mean i can just go ahead and do
114:02 - something like we discussed we saw right
114:05 - so we can have your street i mean city
114:09 - you have your state and pin
114:12 - so i can say okay this is pin and string
114:17 - so i can do something like this and you
114:20 - you can see we already have an error
114:21 - here because this
114:23 - type does not match
114:25 - but i mean writing this in
114:27 - your class breaks the purpose i mean
114:29 - what in case i want to use this address
114:32 - type somewhere else what you will do
114:35 - of course copy paste the code right
114:36 - which is like
114:38 - uh which brings the single
114:39 - responsibility principle when we are
114:42 - talking about writing a better code
114:45 - what we can do we can create an
114:47 - interface rather than this so what they
114:48 - can do is i can just create here
114:51 - i'll just move on top
114:53 - i can create an interface called
114:56 - address
114:58 - and
115:04 - and i can have all these properties as
115:06 - part of this interface now i can just
115:07 - say okay this address is type of this
115:09 - address
115:10 - and while assigning the values uh here
115:13 - also we'll say okay this address is type
115:14 - of this address and now us while
115:16 - assigning the value you will see that we
115:18 - are getting intelligence to provide all
115:20 - the values so you can see it says okay
115:22 - straight uh abc city bangalore state
115:25 - karnataka
115:27 - and
115:29 - you have your bin code so all this are
115:31 - the properties which you can pass as an
115:33 - address
115:34 - and
115:35 - this is
115:36 - typed right time so whenever your users
115:39 - try to actually use this particular
115:40 - class they will get the intelligence
115:42 - okay these are the types which needs to
115:44 - be provided in case they provide
115:46 - something which does not match the type
115:48 - but they will get the error so
115:50 - that this is where you can actually go
115:51 - ahead and utilize interfaces
115:54 - what in case i want to use the interface
115:56 - but
115:57 - i don't want all the properties to be
115:59 - provided let's try to create a value
116:01 - here so i can select
116:03 - user
116:04 - which is type of
116:06 - user equals to i mean i'll provide all
116:08 - the values
116:10 - email
116:14 - so we have
116:16 - john age
116:18 - sorry name age id and email but in case
116:20 - i want to make age optionally let's
116:23 - remove this i don't want to pass it
116:25 - what we have is
116:26 - an error it says it's it's missing a
116:28 - property which is age
116:31 - so in typescript
116:33 - you can actually make it optional by
116:35 - putting a question mark in front of the
116:36 - property so it will of course you will
116:39 - get phase the scenario a lot where you
116:41 - want to actually
116:42 - make some properties optional
116:44 - while creating you your own type or
116:47 - creating while creating your interface
116:48 - this is how you can do it so just put a
116:50 - question mark and that's it
116:53 - now
116:55 - let's see one more thing you can also
116:58 - extend interface you can also implement
117:00 - interface so let's say i have a new
117:02 - interface
117:06 - i'll call it as employee
117:10 - and it needs to have all the properties
117:12 - of users so i can do is extend
117:15 - so
117:16 - i think employee already exists that's
117:18 - what
117:18 - employee
117:21 - name is protected property name
117:26 - okay so this was actually we already
117:28 - have an employee class right so it was
117:29 - just name you cannot have actually this
117:32 - same name for two different
117:34 - classes and interfaces
117:36 - so here we can see employees extend user
117:38 - so
117:39 - we have all the properties which is part
117:41 - of user and you can also add your own so
117:44 - let's say a name age
117:45 - id email and i can add let's say salary
117:49 - as extra property
117:51 - so if i create a new
117:53 - value or create a new variable let's say
117:56 - i'll call it as of course let's call it
117:59 - as something else
118:01 - let employee okay
118:03 - so i'll call it as employee which is a
118:05 - type of employees now you can see you
118:06 - have name
118:08 - id email of course age is
118:11 - optional and then you have salary as
118:12 - well so if i remove salary now you will
118:15 - start getting an error that salary is
118:16 - missing so this is how you can actually
118:19 - extend
118:20 - an interface
118:22 - it is also possible that your interfaces
118:24 - can have
118:26 - method definition what do you mean by
118:27 - that so let's create an interface
118:31 - and i'll call it as
118:35 - login
118:37 - and it has a login method
118:41 - which returns boolean for example or
118:44 - let's say which returns type of user
118:48 - so this is method definition you are you
118:51 - are not responsible for implementing
118:53 - this method who can i mean of course the
118:55 - class so let's go back to
118:58 - class.ds
118:59 - and we want to use this interface
119:02 - how we can do that
119:04 - this class exists in different file this
119:06 - interface exists in a different file
119:08 - this is where we will also talk about
119:10 - one concept which is known as module cs
119:12 - modules
119:15 - in typescript or now available in with
119:17 - javascript as well
119:19 - you can actually import
119:21 - uh sorry
119:22 - let's not jump to the con
119:24 - the terms right now but what you can do
119:27 - is you can refer to some object which is
119:29 - which is defined in different file into
119:31 - another file how
119:33 - so
119:34 - whichever object needs to be used
119:36 - outside you have to mark them with
119:38 - export keyword
119:40 - once you add export keyword
119:42 - these
119:43 - whenever it is compiled your code knows
119:45 - that okay this particular interface can
119:48 - be used outside of the class
119:50 - now where we want to use this particular
119:52 - class what we have to do is we have to
119:54 - import we have to use import statement
119:57 - and then we use calibrate brackets from
120:00 - and give the relative path of that
120:03 - particular file so that right now the
120:05 - relative path
120:06 - path is interface
120:07 - don't have to give the extension
120:09 - remember i'm not using extension yet
120:12 - thanks to bs code uh
120:15 - you get 10 deletions so once you
120:17 - press ctrl space bar you will see how
120:20 - what are the things which can be used
120:22 - outside of this particular module out of
120:25 - interface so interface is a module and
120:27 - then you can use login from here now i
120:30 - can just go to employee and say i will
120:32 - implement because i want to implement
120:34 - this particular function so i can say
120:35 - okay implements login and you can see
120:37 - there is a of course uh
120:41 - option which says uh there is an alert
120:43 - which says
120:44 - you are not implementing this um
120:46 - login uh sorry interface properly so
120:49 - let's implement it
120:51 - and you can see here so i have login and
120:54 - which is type of user
120:55 - and probably you can return a new user
121:00 - and let's copy the user from here
121:03 - we already had a user defined right so
121:05 - you can just return
121:13 - and okay so here uh this is interesting
121:16 - so uh we have said uh we are saying that
121:18 - okay this is the date and type which is
121:20 - user
121:21 - so what we have to do is we have to also
121:23 - mark
121:24 - user with export keyword yes you're
121:26 - right so we have to say okay export and
121:29 - now i can just go ahead and use in class
121:31 - so i can if you can please click here
121:35 - and you can say add user to existing
121:36 - import
121:38 - which is available here
121:40 - and this is it so we have implemented
121:43 - our login method as well
121:46 - you can
121:47 - export in sorry you can import in
121:48 - multiple ways so here we can see we are
121:50 - saying import each object right login
121:53 - user there are some other uh ways to
121:56 - write import statement which i generally
121:59 - should not use but just in case you get
122:01 - across this particular syntax just
122:03 - remember that this is possible so you
122:05 - can also say info star as
122:08 - i'll say this is
122:11 - user login
122:13 - from
122:14 - dot slash interface
122:16 - and once you use this syntax you have to
122:18 - refer everything like this user login
122:20 - dot login
122:22 - and uh here as well user login dot user
122:25 - so that's that's the only syntax so it's
122:27 - a it's an alias we are saying okay
122:29 - whatever this particular module
122:31 - gives to me i use it as alias user
122:35 - use user login as an alias and then i
122:37 - can access every object by using dot
122:41 - so don't use this i mean this is
122:42 - something which you should not just use
122:45 - whatever you need and
122:47 - that's it so this is how you can also uh
122:51 - import and export which is known as es
122:53 - modules and this is also you can how you
122:56 - can use interfaces
122:58 - now we will talk about object
123:00 - destruction and led structure
123:03 - let's see
123:09 - so let's say we have a function which
123:11 - returns the user information right so
123:13 - let's rather than function let's have
123:15 - this object so you have this user object
123:18 - and uh
123:19 - what we need is i need to access name
123:22 - and email that's it i just need two
123:24 - properties
123:25 - how you generally do that
123:26 - so this is the way so you will of course
123:29 - create this user object and then you can
123:31 - say
123:32 - user dot name password
123:36 - i want to access it so i can say user
123:38 - dot name and user dot email
123:42 - right so this is how you would generally
123:44 - access all the of all the objects
123:48 - but in case we actually can write this
123:50 - in a single line of output yes that's
123:51 - possible
123:52 - so here what we can do is we can
123:58 - do something like this i can say user
124:00 - comma
124:01 - email
124:04 - sorry
124:05 - name
124:09 - so we i can say uh this is known as
124:11 - object destructuring so we can just
124:13 - access name and email
124:15 - out of this three properties i don't
124:18 - want to read id that's absolutely fine
124:19 - you can also
124:20 - rename it for example i just don't want
124:22 - to use it as name i want to use it as
124:25 - username i mean i want to access this
124:27 - name property but not as name property i
124:29 - mean i want to rename it as a username
124:31 - so what you can do is name colon
124:33 - whatever new property name you want and
124:35 - that's it
124:37 - right and for example email also i don't
124:39 - want to name it as email probably i want
124:42 - is
124:43 - uh
124:44 - user login
124:46 - right so now if you see here next line i
124:50 - can just go ahead and use user login as
124:52 - a as an property that's available
124:55 - so this is object destructuring which we
124:57 - can generally use
125:02 - let's talk about
125:09 - let's talk about led structuring now so
125:11 - we have
125:13 - this object destructuring and
125:15 - to create or do you
125:17 - learn about parity structuring let's
125:19 - create an array first so
125:21 - i'll create lit users
125:24 - which is type of
125:26 - user and then
125:27 - so as mentioned you can use both syntax
125:30 - array with like
125:32 - brackets which is a generic syntax or
125:35 - this syntax and let's create few records
125:42 - so we'll say name
125:44 - you know email
125:46 - let's copy from here i think we have
125:50 - this
125:55 - and
125:57 - let's format this and that let's add one
126:00 - more few more records so i'll put this
126:03 - as
126:11 - so i can say 1
126:13 - this is 2 and this is three and change
126:15 - the id and john
126:17 - one
126:18 - two
126:20 - now to
126:22 - learn about our uh led structuring let's
126:24 - say i want to access the user one and
126:26 - user two how we can do that
126:30 - any idea
126:32 - so of course we need array syntax so i
126:35 - will say
126:36 - box
126:37 - and then i can say user
126:39 - one
126:40 - command user two
126:44 - and this is it so
126:46 - you will get the first record in this
126:48 - secondary button this let's let's try to
126:50 - write console.log and see if we what we
126:53 - are talking is correct
126:55 - so i'll say console.log user2
126:58 - sensor dc
127:00 - and then we will run node this is
127:02 - interface so it'll say okay there is
127:04 - some typing issue
127:06 - this should be changed
127:09 - it's okay so anyways it says
127:12 - but the files will anyways compile so
127:16 - not a problem here so it's a node
127:18 - interface
127:19 - um
127:21 - so you can see you have like first
127:22 - record here second record here and
127:25 - you can also
127:26 - have all the values the rest of the
127:28 - values like this you can see you request
127:31 - users
127:33 - so let's say if i have a few more
127:35 - records right so let's say look at this
127:38 - as user john
127:40 - v and id is four
127:44 - and let's do console.log user3
127:49 - awesome console.log rest
127:52 - users so let's use tsc again to compile
127:56 - the files and then we will use node
128:02 - and you can see our rest of the values
128:04 - are available as part of this particular
128:05 - array and you can see these are objects
128:07 - you don't have to actually go ahead and
128:10 - get it as object array and then you have
128:11 - to access the values it's not so you
128:14 - don't have to do
128:15 - index of zero index of one that's
128:16 - something which we don't have to in case
128:18 - you are using this
128:20 - array destructuring syntax and you can
128:22 - get the rest of the values like this all
128:24 - the rest users
128:25 - so this is a really handy in case you
128:27 - are working with arrays and
128:29 - there are a few more functions uh let's
128:31 - few uh let's talk about few
128:33 - uh let's say if i want to filter
128:36 - uh
128:37 - a value like so i can say uh
128:39 - [Music]
128:42 - result
128:44 - is equals to
128:45 - [Music]
128:47 - this users
128:49 - yeah let's use the rest users and
128:52 - here
128:54 - you can use filter for example and then
128:56 - you can say user id is greater than two
128:58 - so what are the values which is the list
129:00 - three and four sorry uh we all only have
129:03 - three and four interest users so i can
129:04 - say okay greater than three three so i i
129:07 - will get one one record with like
129:10 - this id four
129:12 - i think we are we already discussed
129:14 - about few array methods so let's not
129:15 - talk let's not uh
129:17 - go ahead and talk about them so that's
129:19 - it that's fine
129:20 - and this is this is it about
129:29 - yeah so this is it about uh interfaces
129:31 - one more thing uh before we move back so
129:33 - we need to talk about decorators
129:36 - and but before that before we move into
129:38 - decorators one more thing which we uh
129:40 - let's talk about so interfaces actually
129:42 - does not exist in javascript so let's
129:45 - see the output so we have this user
129:47 - interface which is created right so
129:49 - let's go ahead and see interface.js you
129:51 - will not find that particular interface
129:53 - anywhere
129:55 - so
129:56 - remember
129:57 - at runtime all the interface i mean once
129:59 - you compile your code all the interfaces
130:02 - will be removed they won't be part of
130:04 - your production bundle so you have to
130:06 - decide whether you want to use
130:08 - interfaces or classes this is generally
130:09 - which people do ask that when to use
130:12 - interfaces of when to use classes
130:14 - in case you want to actually retain the
130:16 - type by uh like once you create the prod
130:19 - build go ahead and use classes because
130:21 - uh
130:23 - generally used in like backend
130:25 - programming so if you are creating your
130:27 - apis it is preferred that you should use
130:29 - classes for written types
130:31 - not interfaces for example if you uh
130:34 - come across an sjs or you use
130:36 - expressions where you have to actually
130:38 - give some
130:40 - take some input you cannot use
130:42 - interfaces there because of course once
130:44 - you create your build the types are gone
130:47 - so you can use classes and then you can
130:49 - retain the type and you can also verify
130:52 - if you are using uh if you are getting
130:53 - the correct information or not so
130:56 - [Music]
130:57 - just keep it in mind so
130:59 - this is something which uh
131:02 - which is really confusing for someone
131:04 - who is coming from java dot and
131:05 - background but yeah this interfaces does
131:08 - not exist really inside
131:13 - typescript or javascript
131:16 - so
131:19 - decorators are
131:21 - one experimental feature which is
131:23 - available in typescript and it is not
131:24 - going to go anywhere because a lot of
131:27 - users a lot of
131:29 - frameworks libraries already use
131:32 - decorators a lot it was initially
131:34 - suggested as part of javascript
131:36 - but it was lit dropped
131:38 - so that's how they still exist inside
131:41 - typescript
131:42 - they can be applied on like
131:45 - um
131:46 - what what is a decorator so it's it's
131:48 - like uh
131:49 - [Music]
131:51 - you can also you can actually go ahead
131:53 - and modify the behavior of your class or
131:55 - method or a property
131:57 - at runtime by using decorator so
132:00 - are we going to write the decorator the
132:02 - answer is most of the time no that is uh
132:04 - some advanced code where you may need it
132:07 - why we are talking about decorator here
132:08 - because it is used internally by angular
132:12 - and you will come across multiple
132:14 - decorators when writing your angular 4
132:17 - so
132:18 - let me go to code base so
132:20 - some
132:21 - examples which we'll see is for example
132:23 - class
132:24 - let's say component
132:29 - and
132:31 - you will come across let's say
132:34 - decorator called component
132:42 - so what this particular
132:44 - component meant
132:46 - so generally whenever you see something
132:49 - on top of class or property or method
132:53 - with starting with at the rate and
132:55 - having some curly brackets and some
132:56 - properties those are decorators so it
132:58 - can change the behavior of your class at
133:01 - runtime once they are executed
133:04 - we will not be writing our own as we
133:06 - said uh we will be using the one
133:08 - provided by angular that's why that's
133:10 - the reason we are talking about
133:12 - uh decorators here you can actually
133:13 - write your own decorators in some to
133:15 - handle some advanced cases in case you
133:17 - want to do something at runtime uh but
133:20 - that's that's really advanced use case
133:22 - you probably will never come across that
133:24 - as i said these are experimental
133:26 - features so there are two flags which is
133:28 - used uh this one experimental decorators
133:31 - and experimental decorator metadata this
133:34 - needs to be enabled so you here you can
133:36 - say okay enable this experimental
133:38 - support for es7 decorators
133:40 - this needs to be enabled here in case
133:42 - you are writing your own typescript code
133:45 - outside of angular but inside angular
133:47 - these are already enabled so you don't
133:49 - have to do that
133:50 - so
133:52 - this is it
133:54 - from
134:01 - so this is it from decorators we will
134:03 - not go we are not going to go into much
134:05 - detail let's talk about es module uh we
134:08 - already saw the example while working
134:10 - with interfaces and classes you remember
134:12 - import and export keywords that's what
134:14 - we uh this this is what es module is all
134:17 - about
134:18 - and let's see uh we also went through
134:20 - actually this is also covered we also
134:23 - went through typescript to a different
134:24 - version you remember we change the
134:26 - target to es5 and es2015 you can change
134:29 - it to whatever version you want
134:32 - and
134:34 - let's see some properties of this ts
134:36 - config.json file and then we will end
134:38 - with
134:39 - our typescript section and we will start
134:41 - with the angular section so here as i
134:43 - said we uh we already
134:46 - went through target and module we saw
134:49 - strict no implicit any uh just enable it
134:51 - as well but if you see say strict true
134:54 - you have enabled all the strict flags
134:56 - here you don't have to actually enable
134:58 - one by one
134:59 - apart from that you can
135:02 - use some some of the uh
135:04 - properties for example here
135:07 - put output output can we see output here
135:10 - yeah out here for example let's say i
135:12 - want my all our output which is
135:15 - generated right now let's see
135:17 - so if you notice this and this file is
135:20 - not saved somehow
135:22 - if you notice right now all the js files
135:24 - are just created
135:27 - next to our ts file but in case you have
135:29 - a lot of files it will make your life
135:32 - really tedious to actually go ahead and
135:33 - figure out which
135:35 - file is your output so using root diff i
135:37 - can just say okay this is dist folder
135:40 - and now i can just to
135:47 - plc and once you do tac all the outputs
135:50 - will be generated inside dsd folder you
135:52 - can see here all js files all the output
135:54 - is a part of dsd folder
135:56 - uh source map which is really uh
135:58 - interesting because
136:00 - remember i said we
136:02 - can when only run javascript on browser
136:04 - what in case you want to
136:06 - debug your code
136:08 - what you what code we are going to write
136:11 - of course typescript
136:12 - what code we are going to get on browser
136:14 - javascript
136:15 - how to debug
136:16 - it not possible right
136:19 - so yes this is possible uh by enabling
136:22 - the source map this is also something
136:23 - which you don't have to because on in
136:26 - angular the in development mode you will
136:28 - find this property to be true but let's
136:30 - see what happens when you do source map
136:33 - true
136:34 - so let's run the ac file again so once
136:36 - we say source map true a new file
136:39 - another file will be generated
136:40 - called map file this map file contains
136:44 - the information that from where this
136:46 - code is getting generated so you can see
136:48 - uh there is a property called sources so
136:51 - it sources it says it is coming from
136:53 - class.ds
136:55 - right so at runtime this file will be
136:57 - actually
136:58 - used by your browser to redirect you to
137:01 - the correct ts file rather than
137:04 - js file
137:06 - so this is
137:08 - source map and
137:11 - i don't think so you need to know more
137:13 - about
137:15 - yeah this is really interesting i'll
137:17 - just
137:21 - i'll just remove all the dst folder
137:24 - all the js files
137:40 - so let's see uh once you do no emit
137:44 - you can see there is no output generated
137:48 - let's go back and fix this
137:52 - and just say this is type of
137:56 - address
137:57 - to fix this issue
138:00 - and then we will say this
138:04 - address i think we can get
138:16 - let's comment this as of now let's run
138:18 - psc again
138:23 - right so if you say no emit there will
138:25 - there won't be any output which will be
138:27 - generated
138:28 - there is another flag
138:36 - see selection
138:38 - [Music]
138:45 - and sources
138:57 - so let's move it back to false
139:03 - and let's say tse
139:07 - now you have your output generated one
139:09 - more thing which i wanted to show you is
139:11 - let's go back to
139:13 - interface class.ts
139:15 - here we were getting errors right so if
139:17 - you remember if you see this we are
139:19 - getting an error and once we
139:22 - run psc
139:25 - we are getting the error but it still
139:28 - generates the output let's see i mean
139:30 - earlier it was already there so we are
139:31 - not sure if it is generated or not so
139:33 - let's see i mean you can see even though
139:35 - we are getting the error we are still
139:37 - getting the output so remember one thing
139:40 - typescript cannot stop you from
139:42 - compiling your file
139:45 - it can only give you errors warnings
139:47 - those are like really your warnings it
139:50 - is saying that okay you have some type
139:52 - issue but it will not stop your code
139:54 - from compiling keep this in mind so uh
139:57 - in case you are like you are relying on
139:59 - this error and considering that your
140:01 - code is actually not compiled yes it is
140:03 - not it is not true your output will be
140:06 - always generated it will give you some
140:08 - typing issue in case it has but yeah it
140:10 - will also give you the output
140:13 - so this is it from typescript section
140:15 - now we can go ahead and learn about
140:16 - angular all the concept which you have
140:18 - you uh which we have learned which you
140:20 - have learned sorry
140:22 - all the concept which you have learned
140:24 - so far related to typescript will be
140:26 - used inside the angular and they are
140:29 - really important so don't skip anything
140:33 - hi
140:34 - so far we have completed with typescript
140:39 - we learned the basics of typescript now
140:41 - we are going to apply those concepts so
140:43 - let's start with
140:44 - angular so here we will first go through
140:46 - the setup and installation we will set
140:49 - up our workspace and we will install the
140:52 - necessary
140:53 - applications or necessary
140:56 - programs
140:59 - we will install the necessary softwares
141:01 - required to run our
141:03 - to run and create our first application
141:05 - so let's see what we are going to see
141:06 - here in this video so we will see how we
141:08 - can install angular cli we will see how
141:11 - you can create a workspace using angular
141:13 - cli we will create a workspace and then
141:16 - we will talk about the files which is
141:18 - available in that workspace and finally
141:21 - we will also talk about monorepo which
141:22 - is really important so let's go ahead
141:24 - and get started
141:26 - in previous video we mentioned that we
141:28 - won't be probably using angular 12 but i
141:31 - think
141:32 - sorry
141:32 - in previous video we mentioned that
141:35 - we probably won't be using angular 13
141:37 - but uh
141:38 - we will use angular 13 i have seen there
141:40 - are not many breaking changes so let's
141:42 - go ahead and use angular 13 which is the
141:44 - latest
141:44 - version and which will be
141:46 - uh
141:47 - the version for next six months so you
141:49 - will use the same version and it will be
141:52 - easy to even migrate in future so
141:54 - first thing which we have to do is of
141:56 - course go ahead and
141:58 - the first thing which we have to do is
142:00 - go ahead and install angular cli
142:02 - which will help us to create the
142:03 - application so
142:05 - we will open the command prompt
142:11 - so this is the folder where actually i'm
142:12 - keeping all the files related to this
142:14 - course but you don't have to worry about
142:15 - it you can just open a command prompt
142:17 - and run this format npm
142:20 - install at the rectangular slash cli
142:24 - hyphen g so hyphen g is for global so we
142:27 - will be
142:28 - installing the latest
142:30 - version of angular cli globally in our
142:33 - machine so you can use the angular cli
142:37 - from anywhere
142:39 - so you can use
142:40 - angular cla from anywhere on your
142:42 - machine so
142:44 - you can also verify if which version is
142:46 - installed
142:47 - let's right now let's install it
142:51 - and then we'll see how you can verify
142:52 - the version
142:54 - it will take few seconds based on your
142:56 - internet speed
142:57 - so
143:05 - so it's installed now you can see this
143:07 - is the very this is the version
143:10 - so it says angular version
143:13 - 13.0.1 is installed as of now
143:16 - to
143:17 - see which version is already available
143:19 - on your machine you can run ng hyphen fn
143:21 - version which will give you this version
143:25 - angular cli version and it will also
143:27 - give you note version as said 14 is
143:29 - absolutely fine angular 13 support
143:40 - [Music]
143:44 - our application in case you don't want
143:46 - to install the global version you can
143:48 - also use nbx i'll show you how you can
143:51 - do that but let's go ahead and now
143:53 - talk about creating our workspace
143:57 - angular cli allows you to create an
144:00 - empty workspace where you can add
144:02 - multiple projects and libraries
144:05 - sorry
144:06 - angular cli allows you to create
144:08 - multiple projects within your workspace
144:11 - so you can create an empty workspace and
144:12 - then add projects later or you can
144:15 - create
144:16 - an workspace with a default application
144:17 - that's choice is yours
144:20 - what we are going to do is we will be
144:22 - creating an application with the default
144:24 - application which we need
144:26 - so let's see how we can do that i mean
144:28 - how you can create and workspace
144:30 - empty sorry how you can create an empty
144:32 - workspace and how you can create a
144:33 - workspace with default application
144:38 - this is the so move to any folder where
144:41 - you want to create your project
144:43 - right now i use i have created a folder
144:45 - called angular and i create all the
144:47 - angular related projects in this
144:49 - particular folder angular folder but
144:51 - choose as per your convenience
144:54 - so you can use engine new command to
144:56 - create a new application
144:59 - awesome
145:00 - you can create a new
145:01 - workspace
145:03 - so engine you and then you can give your
145:05 - workspace name i can say hotel
145:10 - hotel inventory
145:12 - app
145:14 - as we said i can create an empty
145:16 - workspace in case you want to create an
145:18 - empty workspace you can
145:20 - pass a flag called create
145:23 - application
145:25 - is equals to false
145:29 - i want to create and work space with
145:31 - default project so
145:33 - i won't be
145:35 - let's do that so i'll say
145:39 - engineer hotel inventory app and hyphen
145:42 - fn create application equals to false
145:43 - this will create an empty workspace for
145:45 - us
145:46 - we will delete it and then we'll create
145:47 - again with default project
145:50 - so right now it is installing the
145:51 - packages i'll just cancel it here
145:53 - because i don't want the packages to be
145:55 - installed i can because i want to delete
145:57 - this folder and then create a new
146:11 - [Music]
146:13 - so we want to create a new application
146:15 - with
146:21 - with a default project so here we'll
146:23 - just open this and
146:27 - open with code so we'll see
146:29 - what we get
146:30 - when we create an empty workspace so you
146:32 - can see we don't have much
146:35 - uh files available here you have
146:37 - dsconfig.json which we have seen
146:39 - we have package.json which we have also
146:41 - seen angular.json which is like
146:43 - angularjson angular's configuration file
146:46 - and rest of them are just read me and
146:49 - get ignore and editor configurance so
146:52 - this is it this is what you get once you
146:53 - create and workspace without a default
146:57 - application
146:58 - now you can add a application as well
147:01 - let me show you how
147:06 - and that will require us to install the
147:08 - packages so let's go ahead and do that
147:10 - i just don't want you to do it but let's
147:13 - see
147:14 - so
147:16 - to install the packages you can run npm
147:18 - i and it will read all the packages
147:20 - which is required from package.json
147:23 - and it will installed and then we'll see
147:25 - how you can add a project
147:28 - into this empty workspace and then we'll
147:30 - delete it and then we will create a new
147:32 - workspace with a default project
147:49 - okay so uh now it is installed so let's
147:52 - see how to create
147:53 - a new
147:56 - so what we want to do right now is we
147:58 - want to create a new application
148:00 - so you can use ng generate
148:03 - app which is short for application and
148:05 - your application name which is let's say
148:07 - hotel
148:08 - in when
148:11 - so this is
148:12 - our application name hotel inventory app
148:14 - is our workspace name
148:16 - and it will ask if you want to actually
148:17 - share this information
148:19 - with
148:20 - i mean this is just for like usage of
148:23 - the commands
148:24 - so it's up to you
148:28 - so this will ask some question whenever
148:29 - you create an app
148:31 - let's see those questions so it says
148:33 - would you like to add angular routing as
148:35 - we are going to use angular routing
148:36 - later on i'll say yes don't worry about
148:38 - it right now uh which styles it you want
148:41 - to use i will go with this sas
148:43 - and this is it so you can see a new
148:45 - project has been created here
148:47 - uh called hotel inventory and it has
148:50 - some files these are the files which
148:52 - we'll talk about later on later once we
148:55 - finalize our workspace
148:57 - and now we can just skip this installing
148:59 - packages thing
149:11 - yeah so this is how you can create an
149:12 - empty workspace and add project later on
149:15 - in case you want to and now let's see
149:18 - the other way where we will create a
149:20 - workspace with a default project
149:25 - so first i will go ahead and delete this
149:27 - folder
150:21 - so now
150:22 - once that folder is created now let's
150:24 - create a new workspace with and default
150:26 - application as result
150:28 - we can say engine new and
150:30 - you have to just mention the project
150:32 - name so i can say hotel
150:34 - in when
150:38 - app and that's it you don't have to
150:40 - mention hyphen fn create application
150:41 - flag
150:42 - and this will create
150:44 - it will ask you the same question
150:46 - whether you want to add routing i i we
150:48 - want to actually use routing in future
150:50 - so we'll say yes which style should we
150:52 - want to use i'll say css and
150:55 - that's it now
150:56 - it will create your workspace with
150:58 - default application or default project
151:03 - so
151:04 - now all the files are already generated
151:07 - so you can see hotel inventory app and
151:09 - now only the installation is going on so
151:12 - meanwhile let's go ahead and open this
151:13 - project in
151:15 - our vs code
151:28 - okay so now
151:30 - the first step is completed we have
151:31 - learned how to install angular cli and
151:33 - how to create an application with
151:36 - default project without default project
151:37 - i mean an empty workspace where you
151:39 - don't have any project or a workspace
151:42 - where you have a default project
151:49 - so now next what we need to do is we we
151:51 - will learn about what are the files
151:53 - which is available within the workspace
151:55 - we just created so we'll start with the
151:58 - last one we'll start at the
152:02 - bottom and then we'll go up so let's see
152:04 - what are the files which is available
152:09 - so the first file which is available is
152:11 - tsconfig.json you might be wondering why
152:13 - i'm not saying
152:14 - tsconfig.spec.json because that's the
152:16 - first file which is here right so these
152:19 - two files tsconfig.spec and tsconfig.app
152:22 - they both extend these config.js and you
152:24 - can actually verify here the first line
152:26 - extends
152:27 - and even if i just open app it will also
152:30 - save extents so what is the purpose of
152:32 - this two files so let's first talk about
152:33 - ts config.json so this is your ts
152:36 - configuration file which we learned
152:37 - during typescript you may see there are
152:40 - few things like strict
152:42 - no implicit
152:44 - returns so these are all flags which is
152:47 - available in typescript
152:49 - and source map
152:51 - then we had target remember so now uh we
152:54 - said we we were using es2015 now angular
152:57 - saying es2017 is safe to use so
153:00 - that's it module we said es next but
153:03 - yeah here it is to es2020 so which is
153:05 - absolutely fine
153:07 - and then there are some angular related
153:09 - flags
153:10 - which will
153:12 - uh
153:13 - which will be used in terms of angular
153:15 - you don't have to worry about it right
153:16 - now and then you have out here as we see
153:19 - as we have seen right where all the
153:22 - outputs gets generated
153:25 - and
153:26 - now
153:28 - whenever you write code in angular you
153:30 - will be writing two types of code most
153:33 - of the time so you will be writing
153:35 - application related code and you will be
153:36 - writing unit test
153:38 - angular says all the unit tests which
153:41 - will be automatically generated for you
153:43 - uh we will be seeing some command which
153:45 - will generate all the files you don't
153:46 - have to generate files manually so
153:48 - everything will be generated will be
153:50 - created using angular click
154:37 - both files will be generated by angular
154:39 - cli for us
154:40 - and this
154:42 - spec.json will be used by all the unit
154:45 - test files so angular generates all the
154:46 - unit test file as named as
154:49 - spec.ds so you can see here it says
154:51 - include spec.ts so all the unit test
154:54 - file will be named as spec.ds and this
154:57 - configuration file ts configure
154:59 - spec.json will be used to compile those
155:02 - pack.ds files and
155:04 - you will be writing
155:05 - rest of the code which is like dot ts
155:07 - files which is your which is our
155:09 - application code
155:10 - that will be compiled using ts
155:12 - config.type.js so that's the value
155:14 - difference
155:15 - so now as we know about ts config files
155:18 - let's move up so readme.md is something
155:20 - which will be used only for like your
155:23 - repositories for example if you upload
155:25 - your project on github github actually
155:27 - displays all the information from your
155:29 - readme and
155:31 - on your
155:32 - like on your repository let me show you
155:34 - quickly
155:48 - so this is ngrx codebase so you can see
155:50 - here
155:51 - this all this information is actually
155:52 - coming from readme.md that's that's the
155:54 - purpose of readme.file where you can
155:57 - give some information about what project
155:59 - what your project is what are some
156:01 - commands for example building your
156:03 - command testing your computer sorry
156:04 - building your application testing your
156:06 - application so you can mention all those
156:08 - to make
156:09 - contribution to your project easier
156:12 - then you have package.json so here we
156:14 - will have all the packages
156:16 - which we are using and there is two
156:19 - things i mean dependencies and dev
156:21 - dependencies which is available here
156:23 - and there are a few commands which will
156:25 - be used for example how to run your
156:27 - application locally how to build it how
156:29 - to run tests and
156:31 - you can also run it in watch mode in
156:34 - case you want to so
156:35 - it's up to you but
156:40 - so lot of developers get confused
156:42 - between dependencies and dev
156:43 - dependencies so
156:45 - it's easy to actually identify any
156:47 - packages which will be used and needed
156:50 - for your production build goes into
156:52 - dependencies you need packages which is
156:53 - just for your development purpose and
156:56 - it won't be part of your production
156:57 - build goes into dev dependencies so for
156:59 - example all the packages related to test
157:01 - karma karma chrome launcher all these
157:04 - packages are actually your dev
157:05 - dependencies even type script
157:07 - even though we will be writing our code
157:11 - even though we will be writing our code
157:12 - in typescript typescript is not your
157:14 - dependency because we are not going to
157:16 - deploy typescript on production on
157:18 - production we will be of course
157:19 - deploying javascript right because your
157:22 - browsers only understand samsung
157:25 - lock file is something which is used by
157:26 - ci in case
157:30 - log files are generally used by uh your
157:33 - ci environment
157:34 - it is it is optional it's up to you
157:36 - whether you want to use log file or not
157:39 - in big teams
157:41 - it's always good practice to use log
157:44 - files but in case you have a small team
157:46 - i think prefer uh
157:48 - deleting this file it's absolutely fine
157:50 - uh the problem in last teams is that so
157:53 - many developers will be like
157:55 - uh adding new packages removing new
157:57 - packages so look log file make sure that
157:59 - you all are on the same version in case
158:01 - someone changes the version they have to
158:03 - commit log file
158:04 - the only overhead is in case you add new
158:07 - packages or you update any packages log
158:10 - file needs to be updated updated as well
158:12 - otherwise it will your ci will fill
158:15 - then you have karmaconf.js file which is
158:18 - anything with con phase configuration
158:20 - not conference so
158:22 - karma.confor.js is it is
158:25 - it's a karma is actually a task as a
158:27 - task runner to run your tests
158:29 - and angular comes with a default unit
158:32 - testing uh framework which is available
158:34 - which is jasmine and karma so you'll be
158:36 - writing your all test cases in jasmine
158:38 - and then you will be using karma to run
158:40 - those tests you don't have to
158:42 - change anything here until you need to
158:45 - for example you can change your
158:48 - threshold values
158:50 - and you can add more
158:52 - uh this coverage
158:54 - or coverage reporters it's up to you i
158:57 - mean you can read more about it from
158:59 - karma website itself you don't have to
159:01 - go anywhere else
159:03 - angular.json will have information
159:05 - related to your workspace for example
159:07 - right now in my workspace there is one
159:09 - application which is hotel inventory app
159:11 - in case you add more projects
159:14 - this
159:14 - config this angular.json file will have
159:17 - all this information about every project
159:20 - each and every project
159:22 - git ignore is a file to ignore some
159:25 - files which should not be checked in
159:27 - and you can see here we have node
159:29 - underscore modules because this node
159:31 - module should not be checked in never do
159:33 - that i mean it's like some node module
159:35 - should be
159:36 - installed every time whenever you are
159:38 - running it on ci or if someone takes
159:42 - the latest project so it should not be
159:44 - checked in
159:46 - and then you have editor config it's
159:47 - like uh you can
159:49 - the advantage of having enter config
159:51 - file is
159:52 - the advantage of having editor config
159:54 - file is you can actually
159:57 - set up your environment your local
160:00 - editor
160:01 - based on some settings from any other
160:03 - editor for example you are a big fan of
160:06 - some other editor right adam or webstorm
160:09 - you can bring some configurations here
160:11 - so that's the purpose of having editor
160:18 - config browser list rc this is really
160:21 - important file because based on this
160:23 - your output will be generated you can
160:24 - see uh
160:27 - you can run this command npx browser
160:29 - list and it will tell you which are the
160:31 - browsers you are supporting right now so
160:34 - you can see it supports chrome 95 wedge
160:36 - 94.95
160:37 - and some other versions right so this is
160:40 - this is the uh browser list which will
160:42 - be generated if you are wondering where
160:43 - is i11 no i 11 is not supported anymore
160:46 - angular 13 has dropped the support for
160:48 - i11 in case you want to support just go
160:50 - ahead and add or remove something from
160:52 - uh refer to this browser support section
160:55 - on angular.io and you can also go to
160:57 - github.com to see all different browsers
161:01 - right which is available and then what
161:03 - needs to be done to add those browsers
161:05 - here so this is browser list rc
161:08 - now apart from that what we have here is
161:11 - src folder this is src folder is where
161:13 - we are going to have fun it means we are
161:15 - going to write our code here
161:16 - node modules has said all the packages
161:18 - which is installed will be available in
161:20 - node underscore modules folder and
161:23 - it should not be checked in
161:25 - so let's see and now let's go back and
161:27 - talk about src folder what we have again
161:29 - we will start from the bottom
161:31 - so first file which we have is test.ts
161:34 - and again this file is something which
161:36 - where you don't have to do anything so
161:38 - this is used by your karma config karma
161:40 - control gs5
161:42 - it actually just loads all the files
161:44 - recursively that's it to all the dot
161:47 - spec files right so it loads all all
161:49 - those files and give it to karmacon.js
161:52 - that's it so you can execute then you
161:54 - have
161:55 - style.scss file which is your global
161:58 - style sheet file so in case you want to
162:00 - add any global styles you can actually
162:03 - add it here styles.css
162:08 - polyfills very important file so you can
162:11 - see something some some text is written
162:13 - here and then you have only one import
162:16 - called zone.js
162:18 - what is this polyfill.ts
162:22 - to understand polyfills you have to like
162:25 - we have to talk a little bit about
162:27 - javascript
162:28 - so remember when we were talking about
162:30 - uh remember when we were talking about
162:32 - typescript we said typescript can be
162:34 - compiled down to any version of
162:36 - javascript we need
162:38 - does
162:39 - all the browsers support all the version
162:41 - of javascript
162:43 - probably es2017 yes es2015 yes but what
162:46 - in case we have is 2018 or 2019
162:50 - even not all the browsers supports a
162:52 - free feature from es2015 or es2017 so
162:56 - how to take care of those features
162:58 - so what you can do is
162:59 - you can add folly fills for those
163:01 - features for so what polyfills does is
163:03 - it will make sure that your code which
163:05 - you have written are backward compatible
163:08 - with
163:08 - some older browser
163:10 - so for example let's say animations so
163:12 - when
163:13 - uh there is one package let me see if i
163:16 - can find it here
163:18 - okay this that's removed now we don't
163:20 - have that anymore but earlier in earlier
163:22 - version of angular there were few
163:24 - packages which we need to install in
163:26 - case you want to support animation on
163:27 - i11 so of course now i11 support has
163:30 - been dropped so that is removed
163:32 - but in case you want to support some
163:33 - features which is not supported on one
163:36 - of the browser you can add polyfill so
163:38 - polyfills will just add some extra code
163:41 - remember it will always add some extra
163:44 - code so it will always add some extra
163:45 - bundle or extra
163:47 - lines of code to your final bundle so
163:49 - you may like get
163:51 - some
163:52 - performance not performance it but yeah
163:54 - you may get some larger bun bundle uh if
163:57 - you add polyfills that's that's the only
163:59 - thing
164:00 - why imports zone.js here zone.js is
164:03 - needed to
164:05 - run all the code which is
164:07 - so
164:08 - zone.js is something which actually
164:10 - patches a lot of features or a lot of
164:12 - code which is not supported by some
164:13 - browsers
164:14 - uh and used internally by angular that's
164:16 - it that's the purpose in future angular
164:19 - team is planning to remove zone.js but
164:21 - that's uh something which is in
164:23 - which is still in development so
164:25 - right now we cannot we cannot remove it
164:27 - so that's polyfill for us
164:30 - main.ts what comes in your mind after
164:34 - hearing this file name main dot is
164:36 - of course in case you are coming from
164:38 - java or any uh programming background
164:42 - you may have heard about main static
164:43 - public static void main so whenever we
164:46 - talk about main function which says okay
164:48 - this is where our execution starts so
164:50 - this is the same file for angular this
164:52 - main.ts is entry point where our
164:54 - application execution starts so whenever
164:56 - you
164:57 - like create a new application run it
165:00 - this is where everything starts so you
165:02 - have something called if it is running
165:04 - in production mode this is environment
165:05 - variables so
165:07 - it says okay in case i am running in
165:09 - production mode go ahead and enable prod
165:11 - mode in case we are not we will run in
165:13 - development mode first all the
165:15 - development we are going to do and we
165:17 - are going to run everything in
165:18 - development mode and then finally we
165:20 - will create broad bundle which will be
165:22 - deployed on our production server
165:24 - here also we have something called
165:26 - bootstrap app module we will talk about
165:28 - this in shoes
165:30 - in upcoming
165:33 - section right now
165:34 - don't worry about it the only thing
165:36 - which you want to understand here is
165:38 - this main dot ts is our main entry point
165:41 - then you have index.html which is our
165:43 - main index.html which will be served
165:46 - remember we said
165:48 - sorry
165:49 - so this is main index.html which will be
165:52 - served to your user
165:55 - so angular is sba single page
165:57 - application
165:58 - and i'm sure you uh so most of you are
166:00 - already aware of this concept called spa
166:03 - because
166:04 - all the frameworks which you use
166:06 - nowadays we talk about sp single page
166:08 - applications
166:09 - we will talk about spas in detail once
166:11 - we go to routing
166:14 - this is fair icon this is something
166:16 - which you see on all the websites
166:19 - this icon which is you can see github
166:21 - icon here that's fair icon
166:24 - then you have uh environments folder
166:26 - where you can actually create your
166:28 - environment variables based on different
166:30 - environment you have so right now there
166:32 - is two environment.ts which will be used
166:34 - for development
166:35 - environment.ts which will be used for
166:37 - production we will create some more
166:39 - environment variables in future just to
166:41 - give you some idea how you can create it
166:43 - right now you can see there is only one
166:46 - property called production
166:49 - so make sure whenever you add more
166:51 - properties you should add it in both
166:52 - files otherwise your
166:54 - product build may fail or any
166:55 - environment very environment based
166:58 - uh
166:59 - file which you have created may fail
167:01 - assets this is where we are going to
167:03 - keep our keep
167:05 - our assets so what is assets in
167:07 - programming right so whenever you work
167:09 - with front end of course you will have
167:11 - images some static files everything goes
167:13 - into assets so
167:15 - just don't give keep it anywhere else
167:17 - make sure that you are adding into an
167:19 - asset folder
167:20 - then you have app this is now finally
167:23 - this is the folder where we are going to
167:24 - write our app
167:26 - sorry this is the folder where we are
167:27 - going to write our code
167:29 - so you have an app module here
167:31 - component.ts pack.ts then you have a
167:35 - style
167:35 - stylesheet file says css file
167:38 - html this is where you are going to
167:39 - write your html files and then you have
167:41 - app routing why this file is here this
167:43 - is related to routing so don't worry
167:45 - about right now we will talk about this
167:47 - while so when you once you say
167:51 - do you need routing module
167:54 - remember the question which we had do
167:56 - you need a routing module when you said
167:58 - say yes this file will be created and of
168:00 - course in case you need routing
168:01 - functionality
168:02 - you should say yes
168:04 - so these are the files so you have
168:06 - modules component
168:07 - and
168:08 - now let's
168:10 - move ahead
168:23 - before we go ahead and
168:25 - write our code or we just talk about
168:27 - this
168:28 - module which is available here
168:30 - component.ts files which is available
168:32 - here let's talk about important thing so
168:34 - we said in angular you can create
168:37 - multiple projects
168:39 - within your workspace
168:41 - that's something called monorepo
168:43 - so what is monorail so
168:45 - mono repose is something where you can
168:47 - actually
168:48 - have multiple applications so in angular
168:50 - you
168:51 - by
168:52 - when i say multiple applications
168:54 - you can have multiple application and
168:56 - libraries both you can actually create
168:58 - angular applications as well as
169:00 - libraries and inside a single
169:03 - workspace
169:05 - you can also deploy
169:08 - multiple applications from your
169:09 - monoreport that's advantage for example
169:11 - let's say you have
169:13 - a client who has like the admin
169:14 - dashboard and then there they have a
169:16 - client facing in client-facing
169:18 - application what you can do is you can
169:21 - just have both the application in a
169:22 - single monorepo and you can also create
169:25 - libraries which will like be shared code
169:28 - between or between both the applications
169:31 - and then you can also deploy both
169:32 - application from the
169:35 - mono repo itself
169:36 - it also makes sharing the code between
169:40 - multiple projects easy so you uh you
169:42 - have like a separate team which is
169:44 - working on admin application a separate
169:46 - team which is working on your client
169:48 - facing application or public facing
169:49 - application
169:51 - what they can do is they can create like
169:54 - extract the common codes keep it in
169:56 - library share it across and then use it
169:59 - saves a lot of effort lot of time and
170:01 - it makes like
170:02 - collaboration between multiple teams
170:04 - much easier
170:07 - so this is uh it from here
170:09 - uh the the workspace and monorail now
170:12 - let's talk about
170:15 - few things a few files again main.tas
170:19 - and other files
170:21 - i'll show you the
170:22 - connection between this files and your
170:24 - angular.json file how they are connected
170:27 - so let's go to angular.json file and
170:30 - this is our project right now hotel
170:31 - inventory
170:33 - it has project type so this is how you
170:35 - can identify if a project is library or
170:37 - application application is of course
170:39 - your
170:40 - application which can be deployed
170:41 - somewhere and then which has like your
170:43 - visual visuals or front-end application
170:46 - kind of thing so that's application
170:48 - library something which is which will
170:49 - have your reusable codes
170:51 - and you can use those libraries build
170:54 - those use it or publish it on nvm those
170:57 - are libraries
171:00 - so let's go ahead and see
171:03 - so there are few properties so first
171:06 - this
171:07 - hotel inventory app what is the source
171:09 - route for this application so it says
171:11 - src so this is this is the folder in
171:14 - case we create a new application we will
171:16 - see that later on you will see the
171:18 - source route will be a different folder
171:21 - prefix will come back to this
171:23 - before that let's see some more options
171:29 - here
171:30 - so here uh the first property which you
171:32 - have is output path this is where all
171:34 - the final bundles or final code to be
171:37 - deployed will be created we'll talk
171:39 - about this then you have index file so
171:41 - remember we said okay this is the
171:43 - default index.html which will be served
171:45 - to the consumer
171:46 - do
171:47 - does it need to be index.html the answer
171:49 - is no you can name it whatever you want
171:51 - but
171:52 - mapping should be here so you have index
171:54 - which will
171:56 - uh which have a path to index.html so
171:58 - this file
171:59 - similarly main main.t is again so this
172:02 - is referring to this file so it can be
172:04 - any file name i'm just saying okay this
172:06 - is the mapping this is how they are
172:07 - mapped
172:08 - once you start building your application
172:11 - then polyfills of course it is defined
172:13 - here so in case you want to add like
172:15 - uh you want to have a common polyfill
172:18 - for let's say you have monorepo with 10
172:20 - applications now
172:21 - do i need to actually have multiple
172:23 - polyfill.ts the answer is no you can
172:25 - actually go ahead and just create a
172:26 - polyfill.ts somewhere
172:29 - in a common folder and then use it
172:31 - that's possible
172:32 - ts config as we mentioned for app ps
172:35 - config.json will be used
172:38 - and there is a new property called
172:39 - inline style language you can earlier uh
172:42 - writing in line sas was not supported
172:45 - now this so that's this is the property
172:47 - which is used
172:49 - and what will be uh
172:51 - actually
172:52 - available inside your assets folder so
172:54 - you have fab icon and then assets folder
172:57 - so once you uh let's say keep some
172:59 - images uh in your let's say separate
173:01 - folder right generally try to move them
173:03 - into assets folder but in case you are
173:05 - keeping it somewhere you can actually
173:07 - just pass a path here
173:09 - style.scss this is your global styling
173:12 - global style.css
173:14 - and in case you want to include more
173:16 - styles you can actually mention it here
173:18 - for example let's say you want to add
173:19 - bootstrap you want to use angular
173:21 - material you can apply or add all those
173:24 - paths here
173:25 - this scripts uh you can actually load
173:28 - some js files as well so you can
173:30 - actually give path here in case you have
173:33 - some requirement to load some external
173:34 - javascript otherwise just don't
173:38 - so these are the files which is related
173:40 - now
173:42 - let's go back to main.cs
173:45 - so here you have your main.ts and let's
173:48 - run this application and then we will
173:49 - see the flow how it actually
173:52 - goes to this
173:54 - what is this module and then how you get
173:56 - your first page
173:58 - so to do that i'll just open
174:11 - so we go inside hotel inventory yeah let
174:13 - me zoom in a little bit
174:17 - now here you have to run a command
174:19 - called ng serve
174:21 - hyphen o
174:23 - to run this application locally so i'll
174:26 - say
174:27 - i don't want to actually share this
174:29 - information
174:30 - it's up to you you can just change it to
174:32 - yes if you are
174:34 - working on some side project
174:44 - so meanwhile it is getting compiled
174:45 - let's go back here so here
174:47 - as we said so this is your main entry
174:49 - point to the application and it goes to
175:00 - so it goes to this bootstrap model so
175:02 - whenever use your main.ts
175:05 - executes it goes to this bootstrap
175:07 - module and it bootstraps and module
175:09 - which is app module
175:11 - and let's see what is available here
175:16 - and it has something uh called app model
175:19 - class actually and then on top of app
175:21 - module there is something called add
175:23 - three ng module so what is this let's
175:26 - let's talk about this and then we will
175:27 - move on to next topic
175:30 - in angular everything is a class right
175:33 - so you can see this app module it's a
175:35 - class
175:36 - component it's a class
175:41 - but to bootstrap your application you
175:43 - need a minimum one module remember this
175:47 - so in angular we call this as a root
175:50 - module
175:50 - in future it may be possible that you
175:53 - don't need modules anymore but right now
175:55 - we need modules what we do using module
175:57 - we will also talk about that so right
175:59 - now let's talk about this so
176:02 - uh this class this is your root module
176:05 - which will actually have information
176:07 - about all the components which will be
176:09 - created
176:10 - what is component yes we will talk about
176:12 - that as well
176:13 - it will also contain the information of
176:16 - any third party library or any angular
176:18 - specific library which is being used
176:21 - so if you see this import section
176:24 - it has something called browser module
176:26 - and app routing module so this
176:28 - browser module is actually an angular
176:30 - module which is available as part of
176:32 - angular platform browser library and app
176:35 - routing module is created by us when we
176:37 - started our
176:39 - when we create a created r application
176:42 - so when any angular module which needs
176:44 - to be used
176:45 - needs to be imported into imports array
176:49 - any uh components directive and pipes
176:52 - remember these three words we will talk
176:54 - about all these three any component
176:56 - directives and pipes needs to be
176:58 - registered by declarations array
177:02 - and this ng module will have all the
177:04 - information about different components
177:05 - different angular modules which is being
177:07 - used or any module which you have
177:09 - created by your own
177:12 - it means i can have any number of
177:13 - modules i can create n number of modules
177:16 - in my application
177:17 - but it needs at least one root module
177:19 - and that's why angular creates one by
177:22 - default
177:23 - and this will be loaded once you
177:25 - start your application or once you build
177:27 - your application
177:29 - so this is from where your execution
177:30 - starts so now it gets uh goes to app
177:33 - module app module knows everything about
177:36 - my application it knows what are the
177:38 - different components what are different
177:39 - modules i am using
177:41 - and it gives that information to your
177:42 - compiler
177:45 - now after this
177:47 - let's go ahead and talk about
177:49 - this at the retention point
177:51 - now your compiler needs to know that
177:53 - whatever class i am actually uh
177:55 - compiling what type of class is that
177:58 - what is this at the rate engi model
178:00 - remember just
178:01 - in typescript we discuss something about
178:03 - decorators so and we mentioned that
178:05 - angular uses lot of decorators
178:08 - so this at the right ng module is a
178:10 - decorator so what decorator does it
178:13 - modifies the behavior of your class so
178:15 - what this add that ng module is doing
178:17 - here it is giving all this metadata
178:19 - information that okay what are the
178:21 - different components i am using what are
178:23 - the different modules angular modules i
178:25 - am using to the compiler
178:28 - then you have something called bootstrap
178:29 - app component so now
178:31 - once you compile all the files your
178:34 - angular application needs to know that
178:35 - okay which component
178:38 - will be loaded first what is component
178:40 - now let's go ahead and talk about what
178:41 - is component
178:42 - so it
178:43 - goes to this app component.ts right so
178:45 - you can see you have component.ts and
178:47 - whenever you create a component you will
178:49 - get four files so let's talk about those
178:50 - four files so you will get a ts5
178:53 - you will get a spec.ts file where you
178:54 - will write your unit test you will get a
178:57 - css file or css file or whatever type
178:59 - style sheet you have selected
179:02 - third and you will get an html file your
179:05 - where you can write your html code so
179:06 - these four files will be great
179:08 - now coming component
179:11 - so components are actually your views
179:13 - which will be actually rendered to the
179:15 - end user so here this is my first
179:18 - component so similar to my root module
179:21 - which is we said app module
179:23 - we
179:24 - will have one root component this is our
179:27 - root component that's why also the
179:28 - selector is named as approach we'll talk
179:30 - about what this selector means and what
179:33 - that template you are in cellular is but
179:35 - that's why they are it is named
179:37 - mentioned as as root because we need a
179:40 - root component as well now let's come
179:42 - back here so bootstrap we have mentioned
179:44 - that okay this is my root component and
179:46 - this root component will be loaded on
179:48 - your index.html
179:50 - it means
179:51 - in case i want to load any other view or
179:54 - any other component in future where i
179:57 - can load it i can load it within this
179:59 - app component.ts so
180:02 - now let's talk about all other files so
180:04 - now we are aware that okay this
180:06 - component this is the component of view
180:08 - which will be available for us
180:10 - now and these are the four files so html
180:12 - is where we will be writing our our
180:15 - html code and in case you create new
180:17 - components and it needs to be rendered
180:19 - you will add that into app component or
180:21 - testimony
180:22 - let's talk about this properties first
180:24 - so we have this first property which is
180:26 - named as selector
180:28 - so
180:29 - when you create component actually what
180:31 - you do is you create a view how it will
180:34 - be rendered it will be rendered using an
180:36 - html tag if you go to index.html this is
180:39 - your html tag and that's what you will
180:41 - be creating so you will be creating
180:43 - multiple reusable html tags which i can
180:45 - go ahead and use anywhere i want to
180:48 - those are components so you go to any
180:50 - library or any framework ui framework
180:53 - they will give you this custom html tags
180:56 - this is what you will be creating you
180:57 - will be creating those custom html tags
180:59 - and then you can render it anywhere you
181:01 - want to
181:02 - so here the selector becomes your html
181:04 - tag
181:05 - then of course it needs to render some
181:07 - html so
181:09 - you can do it in two ways in angular you
181:11 - can either have a separate
181:14 - html file separate where you can write
181:16 - your html or you can also use inline
181:18 - html as well so this template url now
181:22 - points to this html it says okay
181:23 - whatever html is rendered right now it's
181:25 - coming from this html so if i go to this
181:27 - as low plus four to double zero all this
181:30 - information is actually available here
181:31 - so let's remove it and
181:35 - i'll create an h1 i'll say
181:37 - hello
181:39 - what
181:40 - right so
181:43 - and you can see as soon as i press
181:46 - save
181:48 - this will be automatically compiled so
181:50 - this uh
181:52 - in angular
181:53 - the ng surf command
181:55 - runs in a watch mode what i mean by
181:57 - watch mode it keeps
181:59 - and watch on all the changes which you
182:02 - make in your file just on your file
182:04 - system or in
182:06 - your workspace
182:07 - not everything is washed so
182:09 - let's say if i make some changes to
182:11 - angular.json or package.json it won't be
182:14 - actually washed are you make any changes
182:17 - inside your src folder most of them will
182:18 - be watched and it will just restart the
182:21 - server which is running here so you can
182:23 - see
182:29 - let's
182:30 - press ctrl s and you can see compile
182:32 - successfully because of course there
182:33 - were
182:34 - there were not any changes so it was so
182:36 - fast that we didn't even realize but it
182:38 - says okay the build time was this
182:44 - so we have hello world here but let's
182:46 - see how you can actually make it
182:48 - inline as well i'll remove this i'll
182:50 - comment this uh template url property we
182:52 - will be using template url i always
182:54 - prefer having another html file
182:56 - to write our template
182:59 - in case you want to do it in line you
183:01 - can use template property
183:03 - so i can just say
183:05 - hello world
183:09 - from
183:10 - inline
183:12 - template
183:15 - all right
183:16 - let's save and
183:18 - you have hello world from inline
183:19 - template
183:21 - and i can also of course add
183:23 - h1
183:27 - and you can also see
183:29 - uh
183:30 - i have installed angular inline uh
183:32 - angular language services i'll talk
183:34 - about that as well
183:36 - i was getting an intellisense whenever
183:37 - right whenever i was writing the inline
183:40 - html tag so let's let's let me tell you
183:43 - you can go to uh extensions and you can
183:46 - actually go ahead and install angular
183:48 - language service this is the angular
183:50 - language service
183:52 - it's
183:53 - created and maintained by angular team
183:56 - itself so it gives you all the
183:58 - intelligence inside your vs code even it
184:01 - gives you all the errors inside vs code
184:02 - so you don't have to worry about like
184:04 - getting those errors while compiling or
184:06 - building your application most of the
184:08 - errors you will actually get inside your
184:10 - editor for example let's try this out i
184:12 - think
184:22 - okay this works
184:25 - yeah but here you can see it is giving
184:26 - me option that okay there is
184:28 - open h1 tag
184:33 - so uh this is
184:35 - inline html template but but in case you
184:37 - have multi-line htmls
184:39 - sometimes you may don't want to actually
184:41 - create a separate file for your template
184:45 - but it's multi-line so you cannot do it
184:47 - in a single line
184:49 - that's possible as well so what you have
184:51 - to do is you have to rather single
184:52 - quotes you have to use the stick
184:54 - operator
184:55 - remember we use this in typescript as
184:58 - well so i can mention p
185:01 - let's use p tag and i can say
185:05 - angular is
185:08 - awesome
185:12 - and now you have multi-line html right
185:15 - so
185:16 - just add the this tick operator and then
185:19 - move your html
185:21 - here so you can see the output is
185:24 - available here so this is how you can do
185:26 - it in multi-line html as well i'll just
185:27 - keep this here so you can refer it in
185:29 - future
185:32 - you have style urls same so i either i
185:36 - can have another file
185:38 - to create all the style sheets sorry all
185:40 - the styles related to this component
185:43 - and
185:44 - or
185:45 - i can just have inline styles as well so
185:48 - it's up to you whatever whatever you
185:50 - prefer i'm not that good in those
185:52 - styles i mean i can
185:54 - probably
186:00 - yeah i can write some css but i mean i
186:04 - that not that advanced right so it's up
186:06 - to you which styles you want to use
186:10 - let it be a separate file or you can
186:12 - also use styles property to give you
186:15 - or to write your inline styles so i can
186:18 - say okay the such one will have
186:22 - let's see
186:28 - i'll commend this one and then we can
186:29 - use inline styles where we are saying
186:32 - this h1
186:33 - if we have one yeah we we do have
186:36 - and it will have the color red so this
186:38 - is how you can write it in
186:40 - inline
186:41 - and as we said
186:43 - now you can also use inline sas
186:47 - code as well here earlier it was not
186:48 - supported so just keep that in mind with
186:51 - angular 12 it is supported now
186:53 - i'll just comment this as well
186:59 - okay so this is about component and we
187:01 - also discuss about module so now what we
187:04 - can do is
187:05 - we can create our new component and then
187:08 - we will start learning about
187:10 - the next topic or next concept
187:13 - which is template syntax because of
187:16 - course this is uh important whenever you
187:17 - want to start working on a new ui
187:20 - framework you the first thing which you
187:22 - have to
187:23 - understand is of course the language
187:24 - which we have learned about which is
187:26 - typescript and the next thing is the
187:28 - template engine how to write your
187:30 - templates and let's get into that
187:42 - so first thing first i mean first what
187:44 - we are going to do is we will be
187:45 - creating a new component and we will be
187:46 - writing our code inside that particular
187:48 - component
187:51 - okay before we move up before mo uh we
187:53 - go ahead and create a new component
187:57 - i want to again talk about the selector
187:58 - property remember uh
188:00 - there was
188:02 - in angular.json there was a prefix
188:04 - called app
188:07 - so this prefix is actually used whenever
188:10 - you create a new component in your html
188:13 - tag name so here app root is your html
188:16 - tag name and app is a prefix angular
188:18 - says whenever you are creating a new
188:20 - component have some prefix
188:22 - just to avoid conflict with any other
188:24 - html element which may exist so if i
188:27 - just keep it root there is possibility
188:29 - that root may be another html tag
188:31 - defined somewhere
188:33 - it can be native it can be created by
188:35 - some other library
188:36 - or it may be created in future
188:39 - inside
188:40 - let's say inside html as well so have
188:43 - some prefix generally
188:45 - it should be
188:46 - it should start with whatever your
188:48 - application is or let's say some people
188:50 - also some some companies also keep it on
188:53 - based on the company name right so or
188:56 - the application name whatever you prefer
188:58 - so right now we have app but we can
189:00 - change it to whatever
189:01 - we want so here let's say uh
189:03 - [Music]
189:06 - i can change it to hotel inventory
189:09 - right so hotel inventory app
189:12 - so i can say h i
189:14 - i know it sounds really bad
189:20 - hinv for example hotel inventory right
189:23 - so short for every inventory
189:25 - or let's say if you uh have some
189:28 - specific hotels right for whom you are
189:30 - creating this particular app you can
189:32 - keep the select prefix based on that now
189:36 - if you change it here you have to
189:38 - actually go ahead and change it
189:40 - here as well and
189:42 - once you do this you have to go ahead
189:44 - and change into index.html as well so
189:46 - you have to say okay this
189:48 - won't be
189:52 - abroad but hotel inventory management
189:56 - hotel inventory road right so
189:59 - uh or
190:00 - you can also do it while you're while
190:02 - you are creating your app so you can say
190:04 - create engineer your application name
190:06 - hyphen fn prefix equals to whatever you
190:08 - want
190:09 - but up to you i mean whatever way you
190:12 - want to do it
190:18 - so let's see if it still works
190:24 - yeah as i mentioned we made changes
190:27 - right now to
190:29 - angular.json and
190:31 - any angular.json related changes are not
190:33 - watched so we have to stop our server
190:35 - and run it again so let's do that
190:38 - here and we'll draw and serve again um
190:44 - and meanwhile let's go ahead and
190:47 - start
190:48 - preparing or start talking about the new
190:51 - the next topic which is
190:53 - template uh syntax right so we will talk
190:55 - for template engine and you have hello
190:57 - world again but if you see hello world i
190:59 - mean just let me show you one more thing
191:01 - here
191:02 - i can go to
191:02 - [Music]
191:04 - inspect and here
191:06 - you will notice
191:14 - this is your html tag
191:16 - hi nb root right and then you have h1
191:18 - tag available here so this is
191:21 - the html tag you created
191:22 - right now
191:25 - time to create our own component so here
191:28 - uh what we will be doing is we will be
191:30 - creating
191:32 - will be creating a hotel inventory
191:33 - management app so let's create some
191:35 - views
191:36 - around that right so
191:40 - first
191:42 - what is important if uh
191:45 - hotel wants to manage his inventory what
191:47 - is the most important inventory
191:50 - rooms right so room seems the most
191:51 - important inventory they have so what we
191:53 - will do is we will create a component
191:57 - so how you can create a component is you
191:59 - can say ng
192:00 - g
192:01 - which is short for generate so you can
192:03 - also write generate if you want to
192:06 - we'll be using shortcut and then you
192:08 - have component
192:10 - which is also there is a shortcut to
192:12 - write we can write c
192:14 - and then your component name or your
192:16 - view name whatever you want to give it
192:18 - so let's say uh i want to
192:21 - now create a component called rooms
192:24 - so which can have information about all
192:26 - the rooms the
192:27 - uh what it has right now
192:29 - and whenever you do that as we mentioned
192:31 - this will create four files you have
192:33 - html css pack.ts and then your tsl ts
192:36 - file is where you will be writing your
192:38 - code html file where you will be writing
192:39 - your views
192:41 - to get the list of all
192:44 - commands
192:45 - you don't have to remember those
192:46 - remember just just keep that in your
192:48 - mind you don't have to remember all the
192:50 - commands all the options you can just go
192:52 - to docs and at the end of the docs you
192:54 - have the cli command reference
192:56 - and you can read all the commands in
192:59 - case there are some changes in future
193:01 - there that will be updated in case you
193:03 - get a new command in future that will be
193:04 - added here as well so you have all the
193:07 - information related to cli commands
193:10 - and this is our application
193:12 - so let's close this
193:16 - so now we have created our first
193:18 - component
193:19 - let's try to
193:21 - right now just uh see what is here it
193:23 - says room works
193:24 - let's go back to our application on
193:26 - sorry let's go back to the browser and
193:28 - see what is available here so we just
193:30 - have hello world
193:32 - so in case i want to render this
193:35 - rooms component or any information
193:36 - related to rooms component right now
193:39 - i have to
193:40 - add this html tag here because this is
193:44 - our entry component
193:46 - and you will see okay it says rooms work
193:48 - it means the new component which we have
193:50 - created is getting rendered perfectly
193:52 - fine you don't have to do anything
193:55 - let's go ahead and add some information
193:58 - so
194:01 - let's talk about templates
194:04 - first question why you create front-end
194:06 - application
194:08 - okay if you're wondering you get paid
194:10 - for it yes you that's that's the
194:12 - different uh answer but what else right
194:15 - so we create front end because we want
194:18 - to display some information to the end
194:20 - user
194:21 - that's the whole purpose i mean of
194:22 - course i can create apis and i can ask
194:24 - my users to just hit those api and get
194:26 - information right that
194:28 - that's uh that's developers that's that
194:30 - information is relevant to developers
194:32 - but for end users the information which
194:34 - is available on some some front-end
194:36 - application that's what matters so you
194:39 - get paid for that
194:41 - and it means whatever code we have to
194:44 - write we have to eventually go ahead and
194:46 - bind that data to our html our view
194:48 - that's where it will be available so
194:51 - let's now let's see how you can actually
194:52 - do that in angular every
194:56 - language every library has their
194:58 - different syntax to work with templates
195:01 - so how you will do it in angular so here
195:05 - we have already
195:06 - discussed about component introduction
195:08 - we have also already already discussed
195:10 - about how great you you can create a
195:12 - first component
195:13 - so we'll just skip here and then we'll
195:15 - come back come to just binding syntax
195:17 - so let's see
195:19 - so how you can bind that information to
195:21 - your friend
195:22 - let's close this
195:24 - so there are three ways uh to bind your
195:27 - information which is available in your
195:28 - ts5
195:30 - to your html so you have interpolation
195:32 - you have property binding you have even
195:33 - event binding
195:34 - so let's see first interval
195:36 - interpolation
195:38 - you can use interpolation syntax with
195:40 - any basic data for example if you have
195:42 - date
195:43 - if you have a string you have number
195:46 - those information can be binded using
195:48 - interpolation even uh you can work with
195:50 - objects
195:51 - using interpolation so
195:53 - uh let's see
195:55 - what we will do is we will create um
195:59 - uh let's say hotel link so this is my
196:01 - first property
196:04 - and
196:05 - i'll just print hilton hotel right so
196:07 - this is the hotel name for like if let's
196:09 - say this hotel name we want to display
196:11 - on our view right now
196:13 - using interpolation syntax so you can
196:15 - just go to html
196:17 - i will put an h1 tag here
196:20 - right
196:20 - and i'll say welcome
196:25 - welcome to and you can put double curly
196:28 - brackets
196:29 - and put your variable name so hotel name
196:32 - is my variable name right
196:34 - and just save
196:35 - let's go back to the browser
196:39 - and it says welcome to return so this is
196:41 - how your interpolation syntax textbooks
196:44 - so this is string of a variable of type
196:47 - string
196:48 - you remember we said
196:50 - inference so it is able to infer that
196:52 - okay this property should be string and
196:54 - then we are displaying it using the
196:55 - interpolation syntax
196:58 - angular allows you to
197:01 - also use
197:03 - so let's talk about the second way
197:05 - which is property binding so angular
197:07 - allows you to actually use
197:10 - native html attribute properties
197:14 - for binding as well
197:16 - so what i mean by that
197:17 - so
197:18 - actually i can have a div
197:21 - and i can bind
197:23 - a value directly to this this div
197:26 - to any valid property of this particular
197:29 - tube so remember do you remember any uh
197:31 - valid property of div
197:33 - so in case uh
197:35 - you don't it's absolutely fine you can
197:37 - just go to uh mozilla docs right msdn
197:40 - and read about all the html tags and
197:42 - basic javascript
197:44 - so i'll
197:45 - use one property which is known as inner
197:47 - text so there is a property called inner
197:49 - text
197:50 - equals to
197:52 - i'll say
197:53 - here
197:55 - i
197:55 - i'll create another property i'll say
197:57 - this is number of rooms
198:00 - so let's say we have 10 10 rooms
198:02 - available in this hotel
198:04 - and then i can just use number of firms
198:06 - here
198:07 - so what is the difference so gen
198:09 - generally uh you use this in a text
198:11 - property something like this
198:13 - this is this
198:14 - javascript code so generally we do
198:17 - document
198:21 - dot get element by id and then you get
198:23 - an element by id and then you are
198:25 - applying a text this is normal
198:26 - javascript this is how you do it in
198:28 - javascript but in angular you can
198:30 - actually just avoid all this code and
198:32 - just directly do it here so you have
198:34 - inner text remember this box that's the
198:37 - extra layer of syntactical sugar which
198:40 - we are adding which angular is adding
198:42 - and then you are just saying okay this
198:44 - variable name should be bound to this in
198:46 - a text property and i can say okay this
198:48 - is
198:48 - a number of rooms
198:53 - right
198:55 - and you will see number of rooms
198:57 - available 10. so this is property
199:00 - binding uh remember you can only use it
199:02 - with any valid html property of any
199:06 - valid html tag
199:08 - if i try to use
199:10 - inner text
199:12 - i'm getting inline error remember i said
199:14 - angular language service can give you
199:16 - that that's it if i save this you will
199:19 - also get this information everywhere so
199:21 - you are getting this here you will be
199:23 - getting it in your command line and as
199:26 - soon as you fix this
199:28 - and say okay this is the property it
199:30 - will be gone from here it will be gone
199:32 - from your
199:32 - [Music]
199:33 - view so it's back and that's it
199:38 - now
199:39 - once you create front end of course you
199:41 - need to display information but you need
199:43 - to do one more thing as well you may
199:45 - need to actually collect information
199:47 - so how to collect information so
199:50 - of course in
199:52 - uh you may want your user to interact
199:54 - with your application it means you may
199:56 - want your user to raise the events i
199:59 - mean probably us
200:01 - save some information or
200:03 - probably in some cases retrieve some
200:04 - information based on some filters
200:06 - so you need those right so you need to
200:09 - need a way to actually raise the events
200:10 - as well
200:11 - so the third way is something which is
200:13 - known as event binding
200:15 - right so let's talk about even binding
200:19 - now
200:21 - in plain javascript we just do something
200:23 - like this so let's create a button
200:26 - and we use click equals to a function
200:29 - name so here you probably will be using
200:31 - a function name in javascript
200:34 - in angular you will do some just little
200:37 - bit extra so here
200:39 - um sorry in
200:40 - javascript you say on click so you'll be
200:42 - some doing something like on click goes
200:44 - to your function name in angular as i
200:47 - said every programming languages or
200:50 - every
200:51 - framework has their own
200:54 - different
200:55 - template syntax or template engine
200:58 - in angular you have to just put it in
201:00 - this banana syntax so this this is known
201:03 - as banana syntax and this is known as
201:05 - box syntax
201:06 - so it's
201:07 - put any event just remove on put a
201:11 - banana syntax and that's your angular
201:13 - event
201:14 - now on click equals to i can create a
201:17 - function so i'll create a function
201:19 - called toggle
201:23 - and i'll say this is toggle
201:26 - so right now we are getting an error
201:27 - because this toggle function does not
201:28 - exist let's go ahead and implement it
201:32 - let's go to ds and write a toggle
201:36 - function
201:38 - and what this toggle function will do is
201:40 - let's say it will hide show hide the
201:42 - rooms
201:44 - so i'll create another property hide
201:47 - rooms
201:49 - which is equals to false
201:54 - and whenever we click on toggle and set
201:56 - this dot height rooms is equals to not
201:59 - this dot height rooms right so we want
202:00 - to toggle the value
202:02 - and here
202:04 - i'll create a div here
202:08 - and i'll move this information
202:12 - here
202:13 - and then we will be using
202:15 - a property binding syntax so
202:18 - hidden is a property which i think all
202:20 - available on almost all the html tags
202:22 - which exist so hidden equals to
202:25 - hide rooms
202:26 - it's a boolean property right so true or
202:28 - false also true
202:30 - let's see
202:31 - so let's go back
202:34 - so right now we have number of rooms
202:36 - click on toggle and they are gone so
202:38 - remember but uh this
202:41 - this div still exists here right because
202:44 - hidden is a property and i can just
202:46 - remove it and then display this
202:48 - information again so toggle
202:50 - uh what we are doing is we are raising
202:52 - an event which is going and going ahead
202:54 - and updating a property and then
202:56 - our viewer is updated accordingly
203:00 - i'll show you one more thing how you can
203:01 - actually debug your application because
203:03 - that will be uh beneficial for
203:05 - for upcoming uh videos and in case you
203:08 - get into some issues you will be able to
203:11 - figure those as well
203:13 - so here in sources panel you will be
203:15 - able to see all the components all the
203:17 - files which you have written this is
203:19 - your code
203:20 - right so i can just go to
203:22 - not here
203:23 - so go to pages and you will be able to
203:25 - see all the files in dot folder so you
203:27 - you will be able to see localhost for
203:29 - double zero and then you will be able to
203:30 - solve them back
203:32 - and then dot folder is where your code
203:34 - exists
203:35 - so
203:36 - app and then you have your rooms
203:39 - and
203:40 - you have your dot ts file let's add a
203:42 - breakpoint here click on toggle and you
203:45 - have your breakpoint available right so
203:47 - your debugger available here so you can
203:49 - see okay uh right now the hydro property
203:52 - is true and we are upgrading it to true
203:54 - to false and now it is available here so
203:58 - this is how you can actually add
203:59 - breakpoints find files you can also use
204:02 - a shortcut so you can press ctrl p
204:06 - and open any file so you can just type
204:08 - app dot so let's say
204:10 - i want to open app modules so you can
204:12 - hear it do that here or let's say
204:16 - rooms right so i can just say room start
204:18 - component.ts and that's it so you can
204:21 - also search in case you have a lot of
204:22 - files of course you won't be wasting
204:24 - your time going through it you can just
204:26 - open the sources panel press ctrl p this
204:29 - is on windows i in i'm sure probably
204:32 - this will be the same across all the uh
204:34 - different os for chrome so control p and
204:37 - then just type the file name
204:41 - the same
204:42 - command control p works for your vs code
204:45 - as well so let's say if you have
204:46 - thousands of files how you will search
204:48 - for a file we can press ctrl p
204:50 - start typing the file name and that's it
204:52 - so you can move to any file by using the
204:56 - shortcuts
204:58 - so this is uh it from the binding syntax
205:01 - you will learn about interpolation you
205:02 - learn about property binding you learn
205:04 - about event binding and this is what we
205:06 - are going to use for
205:09 - all our
205:10 - upcoming tutorials
205:17 - in this video we are going to talk about
205:19 - directives
205:21 - so we will see types of directives and
205:23 - we will also see built-in directives in
205:25 - this particular video and later on in
205:27 - this course we will also see how you can
205:29 - build your own custom directives yeah so
205:32 - let's go ahead and see what directives
205:33 - are so directives are something which
205:35 - can change behavior or appearance of
205:37 - your dom element
205:39 - they are kind of like
205:42 - and uh you can say that they are a
205:45 - reusable function which you can apply on
205:47 - any dom element which you have in your
205:49 - application and then if you want to
205:51 - change that behavior of your dom or
205:54 - let's say appearance of that dom you can
205:56 - achieve that via directive
205:58 - directors can implement all life cycle
206:00 - look we have not
206:02 - learned about lifecycle hooks right now
206:04 - it will be in upcoming videos but just
206:07 - remember this
206:08 - while implementing you can also
206:09 - implement all the lifecycle loops
206:10 - because we will be using that later on
206:14 - the one difference between your
206:15 - components and directives are
206:17 - they cannot have templates remember we
206:19 - when we uh went through all the
206:21 - components we said
206:22 - there will be four files every time
206:24 - and there was one template one style
206:27 - sheet uh then we have your you'd uh
206:29 - sorry your spec.ts and then your dslr in
206:32 - directives you will be having
206:35 - you won't be having
206:36 - a template file so it will be just have
206:38 - uh your directives will just contain
206:40 - your logic
206:43 - so let's talk about types of directories
206:44 - which we have so there are two types
206:46 - which is one is structural directives
206:48 - and one is attribute based directive
206:50 - structural directives are always
206:52 - costlier because they are going to
206:54 - implement
206:55 - uh sorry
206:56 - structural directives are always
206:57 - costlier because they are going to
206:59 - change the behavior of your dom which
207:02 - may give you performance
207:04 - uh
207:05 - performance issues as well
207:07 - attribute directives you will be using a
207:09 - lot of the time probably most of the
207:11 - time you will be creating your own
207:13 - attribute based directive rather than
207:14 - structured directive
207:16 - so let's go ahead and use some built-in
207:18 - directives which we have available and
207:21 - later on
207:22 - uh and we will also talk about what are
207:24 - the structured directives and attribute
207:26 - based directive which we have while
207:28 - going through each built-in directives
207:34 - here so first we will
207:38 - we will go through ng if ngif directive
207:41 - and let's see what we can achieve using
207:43 - ngif directive let's go back to our code
207:45 - this is our code
207:47 - here
207:54 - so uh what we will do is we will also uh
207:57 - we'll create on one interface where we
207:59 - will have some
208:01 - information about our rooms
208:03 - so let's go ahead and do that let's
208:05 - create the interface i'll call it as
208:07 - rooms
208:11 - so this is our interface name
208:13 - then we can say
208:14 - export interface remember the typescript
208:17 - section where we created our interfaces
208:19 - and i'll call it as room
208:23 - and let's see uh
208:24 - what this room uh property is going to
208:26 - have
208:27 - it will have as of now we will we will
208:29 - keep adding more properties as we
208:32 - go but right now let's say we have
208:36 - label rules
208:42 - which is number
208:50 - then we have
208:52 - book
208:54 - rules
209:03 - and
209:04 - let's have these two properties as of
209:06 - now and then we'll
209:07 - see later on
209:09 - and here i'm going to create a rooms
209:11 - property
209:14 - which will be type of
209:16 - room
209:17 - which is imported from you can see
209:18 - actually due to
209:20 - angular language service it auto it can
209:22 - actually auto import out this is
209:24 - something which is also enabled in vs
209:26 - code so
209:27 - you can just go to room
209:31 - and uh it's not going to be arrayed
209:37 - it's an object
209:40 - and here
209:41 - i'll say available rooms is 10 and
209:45 - booked rooms is five
209:47 - and let's
209:49 - have
209:51 - total rooms as well
210:02 - so let's say you have total rooms as 20
210:05 - but you're just
210:07 - booking for
210:09 - 15 right so where you have five
210:10 - available and five booked and five
210:12 - probably
210:13 - somehow something on hold or something
210:15 - like that right or
210:17 - going through construction so
210:19 - you have this now you you have this data
210:21 - available and what we are going to do is
210:24 - let's first see in the spelling i think
210:26 - i'm not sure why i keep
210:30 - rooms
210:31 - somehow
210:33 - so you have total rooms available rooms
210:35 - and book room so what we are going to
210:36 - achieve using this property is we will
210:37 - be using nge if directive we will see an
210:39 - example of
210:40 - directive
210:42 - and let's say if available rooms is
210:44 - greater than zero
210:45 - we want to display a section where uh
210:48 - probably you can see which which rooms
210:51 - are available right list
210:52 - of rooms which are available in future
210:55 - right now we don't have the rooms list
210:57 - so here let's see how we can achieve
211:01 - remember we said
211:02 - we can also use all the valid properties
211:05 - of
211:06 - html while doing property binding and we
211:08 - saw an example of hidden but there was
211:11 - one problem with hidden attribute
211:14 - so he
211:15 - so the problem was if you inspect this
211:17 - element and see this
211:23 - number of rooms and just let's click
211:25 - toggle
211:26 - even though uh that particular div uh
211:29 - element is hidden it is still available
211:31 - on your dom and
211:32 - when you have lot of dom elements on
211:34 - your you
211:35 - your view
211:36 - it will cause performance issues
211:39 - so what we can do
211:40 - but in case
211:42 - i don't display this storm element until
211:44 - unless i need it
211:46 - or i can just remove it whenever
211:49 - i don't have any rooms available so in
211:51 - that case my dom dom element will be
211:53 - fewer than what we can expect in case we
211:57 - display all the elements
211:59 - so let's go ahead and try to achieve
212:01 - that
212:03 - so i'll create a new div
212:06 - here
212:07 - and here i'll say
212:09 - for example i am going to display rooms
212:12 - list here in future when we have a list
212:15 - of rooms
212:20 - let's see if okay remove this breakpoint
212:23 - first
212:24 - and we get this rooms list
212:28 - now
212:29 - the cases in case rooms are available i
212:32 - want to display this entire thing i mean
212:34 - i can have anything here right i can
212:36 - have a list i can have whatever i want
212:38 - to
212:40 - in future we are going to have list
212:41 - basically so here what we will do is i
212:44 - can just access this rooms
212:46 - property here and using the ng if
212:51 - directive so star ng
212:55 - if
212:56 - is equals to
212:57 - i can say rooms
212:59 - dot
213:00 - total sorry available rooms
213:05 - if it is
213:08 - greater than zero
213:10 - i want to display this so rooms list
213:12 - right now of course our available rooms
213:14 - are greater than zero so we will get
213:16 - this rooms list and it is available here
213:19 - now let's go ahead and change
213:21 - the
213:22 - available rooms to zero
213:26 - and let's come back here okay so that
213:28 - particular div is gone but let's inspect
213:31 - the element this is this is where it
213:33 - gets interesting right so you can see
213:35 - that div entire date is gone it's not
213:37 - available in your dom so something which
213:39 - let's say there are some some
213:41 - secure information which you don't want
213:43 - to display to all user but let's say you
213:45 - want to
213:47 - enable that particular
213:49 - area or you want to display that
213:51 - particular section
213:52 - in some particular case
213:55 - that's it you have
213:57 - the perfect use case for ngf try to use
214:00 - ngif as much as possible don't rely on
214:02 - the hidden attribute so
214:04 - that's one thing
214:07 - now let's go ahead and change this
214:09 - to
214:10 - them
214:13 - so we have learned about ng if directive
214:15 - now
214:16 - let's
214:17 - let's go ahead and see what our what
214:19 - else is there so we have ng4 okay before
214:22 - we go to ng4
214:24 - before we go to ng4 i'll i want to show
214:27 - you some
214:29 - some more
214:31 - i can say syntax which you can use so
214:34 - here
214:40 - in a typescript this is something uh
214:43 - uh this is known as optional chaining
214:46 - and there are two two
214:48 - uh sorry there are two features which
214:50 - are actually enabled in typescript which
214:52 - is optional chaining and null knowledge
214:54 - collision collision you can actually use
214:57 - both inside template as well let me show
215:00 - you some example so let's say if
215:02 - my rooms
215:04 - my room's property right
215:08 - if my room's property is not available
215:11 - what i can
215:12 - also do is i can say no rooms
215:15 - so let's see
215:16 - so what i will do here is
215:19 - i'll say rooms
215:21 - is this
215:22 - and i'll just
215:30 - have to make it optional let's do that
215:31 - quickly so
215:34 - question mark question mark
215:36 - question
215:38 - and i will commend
215:40 - this
215:41 - i'll keep it here so i can we can go
215:43 - ahead and use it later on but let's see
215:45 - so we have we don't have any uh data
215:47 - available for rooms
215:50 - let's see what we get here
215:54 - so we are getting an error so it says
215:56 - rooms dot available rooms is greater
215:57 - than zero and it says object is possibly
215:59 - undefined
216:01 - but in this case now what we can do so
216:03 - of course this will be taken care by
216:05 - knowledge pollution operator but you can
216:07 - also use the
216:10 - optional chaining here
216:12 - you can put a question mark
216:15 - and
216:17 - let's see
216:26 - sorry
216:27 - i can do something
216:28 - rules
216:30 - and
216:37 - if rooms and
216:39 - rooms
216:41 - dot available rooms is greater than zero
216:44 - let's see if it works
216:48 - uh-huh
217:10 - let's uh let's see uh we have made some
217:12 - changes so we are saying rooms dot
217:14 - available rooms so in case rooms is
217:16 - available we will display only rooms
217:17 - list
217:18 - here let's see what it displays okay it
217:22 - is showing object object which of course
217:24 - makes sense because
217:25 - we have to change
217:27 - we have to check for an individual
217:29 - object right and so here
217:32 - i can say
217:33 - i can just use the same so i'm saying if
217:35 - uh
217:36 - rooms dot available rooms
217:40 - is available
217:41 - then uh it's okay otherwise just go
217:44 - ahead and display no rooms and it should
217:46 - work yeah so you have no rooms available
217:49 - in case there is uh the available rows
217:51 - available rooms does not exist so this
217:53 - is something which you can use which is
217:56 - null collision operator and this is
217:58 - optional chaining so you can say okay
218:00 - before accessing this variable go ahead
218:02 - and check if this exists or not so this
218:04 - is really useful in case you want to
218:05 - bind some object you don't have to worry
218:08 - about it i mean
218:10 - whether this object exists or not so we
218:12 - generally do write if uh and else that
218:15 - so you don't have to do if an else here
218:17 - you can just put a question mark and try
218:19 - to access an object if object exists it
218:22 - will print it if doesn't exist it will
218:24 - just leave it right i mean for example
218:26 - this rooms list right now available
218:28 - rooms does not exist so it is not
218:30 - displaying room list that's it so these
218:32 - are two uh operators which is really
218:34 - useful while working in angular template
218:36 - they are available inside your
218:38 - typescript file as well so feel free to
218:40 - use them there also
218:43 - now once uh now we know about these
218:45 - operators and we know about ngif let's
218:48 - go ahead and do some uh extra stuff
218:50 - right so rooms list we said uh we want
218:54 - to
218:55 - display rooms list in case we have
218:56 - available rooms now let's go ahead and
218:58 - put this code back
219:06 - let's see it breaks the template it
219:08 - doesn't so we we still have rooms list
219:10 - and it displays the number of rooms
219:12 - which is available so
219:14 - which is
219:15 - this this line of code
219:18 - so rather than this dip i could have
219:19 - just used this which will take care of
219:22 - yeah i mean in case my rooms does not
219:24 - like uh there are no available rooms it
219:25 - will also show norms
219:29 - so let's
219:32 - see this
219:33 - available rooms is greater than zero
219:36 - object is possibly undefined i can just
219:38 - remove let's see
219:41 - dot available rooms okay do i need to
219:44 - check if it is undefined
219:47 - let's see
219:57 - let's see
220:04 - so available rooms not equals to
220:06 - undefined and
220:08 - rooms
220:10 - okay i'm still getting this set up
220:12 - somewhere
220:20 - because of this question mark which
220:22 - let's remove it
220:25 - which make it makes the value as
220:27 - undefined as well so you should not be
220:30 - getting it anymore
220:36 - numbers html
220:40 - okay let's
220:42 - change
220:44 - rooms dot available rooms greater than
220:46 - zero
220:47 - right first
220:48 - so we have like our uh now we want to
220:51 - display here groups list now we need
220:52 - rooms data so we need uh rooms list data
220:56 - so what we will do is we will create an
220:57 - interface
220:59 - and we will call it as
221:02 - room
221:04 - list
221:05 - let's add some properties so first thing
221:07 - which we will do is room type
221:10 - right so you can have like
221:12 - there are multiple room types
221:15 - which is let's say right now string
221:17 - and uh what else we can have
221:20 - well
221:21 - our room can have amenities right
221:24 - we will say this is amenities
221:28 - which is as of now string
221:30 - then the price of this particular room
221:34 - which is
221:35 - number
221:36 - and
221:37 - what else what else room can have
221:40 - i can of course i mean it is the the
221:43 - room type is there it can have an image
221:45 - right so photos
221:49 - which is uh which can be string area of
221:52 - string but let's let's say we right now
221:54 - we have only one one photo so
221:57 - this is
221:58 - and
222:01 - uh
222:03 - available
222:09 - i want one daytime property as well
222:13 - so we can have check-in time
222:16 - right so we will also
222:20 - have one date property
222:22 - and
222:24 - check out time so we have string number
222:28 - date
222:29 - so yeah i think this is enough this is
222:31 - more than enough uh information
222:34 - now let's go ahead and create some data
222:36 - so i'll say room
222:40 - list let's just type of
222:45 - chrome
222:46 - list
222:47 - and uh this is going to be adding so
222:49 - just
222:54 - and let's say room type uh amenities
222:58 - price
222:59 - and then we have
223:01 - photos let's take some something from uh
223:04 - unsplash second time let's say we have
223:07 - uh
223:08 - [Music]
223:09 - let's put some date
223:11 - uh 11th
223:15 - 11th
223:16 - november 2021
223:21 - and check out time this
223:24 - and we have to say new date
223:27 - and then
223:32 - in your application just try to use some
223:34 - uh
223:35 - date
223:36 - time from daytime uh library for example
223:40 - state data finance whatever your uh
223:43 - you have decided for your
223:46 - application so when it is
223:49 - price let's say i'll just increase to
223:52 - increase 2 000
223:54 - sorry
223:55 - photos
223:58 - let's take the same photo
224:00 - as of now
224:05 - and then we have chicken time and
224:09 - you have chicken time so
224:19 - and this won't be deluxe room but let's
224:22 - say
224:26 - private
224:27 - suit
224:29 - and
224:30 - rest of the things are almost same
224:33 - let's increase the price to 15
224:37 - okay so we have this list of records
224:40 - available here now let's
224:41 - try to bind it
224:43 - now we know how to bind
224:46 - values like string number boolean we
224:48 - also know how to bind objects now
224:51 - but what about arrays so let's try
224:53 - binding areas here right so rooms
224:56 - list i can say rooms
225:01 - list so just let's place it here as it
225:03 - is
225:06 - and we have something called object
225:08 - object object so it says okay there is
225:09 - some object which has three records so
225:12 - you can see it actually printed it
225:14 - thrice so it means okay there are three
225:16 - records but i'm not sure how to read it
225:18 - so what's uh the way to read it yep that
225:21 - is this is where we our next directive
225:23 - will come handy which is ng ng4 we will
225:26 - be using ng4 so it's like for loop
225:28 - which will look through each and every
225:30 - record and display this information
225:32 - in the way we want to
225:35 - so generally uh what how you display uh
225:38 - area of information right on your web
225:39 - page the
225:41 - in if i have talked about in html
225:43 - probably we will be using some data
225:44 - table right
225:45 - so right now let's use table and in
225:48 - future what we will do is we will remove
225:49 - this table and we will use something
225:52 - from third party ui library because in
225:54 - your real-time project you are not going
225:56 - to create table
225:57 - probably never
225:59 - you will be using some ui library so you
226:02 - should learn about that and that's what
226:04 - we will do in
226:05 - probably in upcoming video where we will
226:07 - remove this table and then we will
226:10 - replace it with uh with angular material
226:12 - table
226:13 - why we are learning it right now because
226:15 - angular material table will uh
226:18 - will actually avoid or
226:20 - you can say uh it will it will give you
226:22 - a wrapper where you don't have to write
226:24 - this code so you should learn about ng4
226:26 - in case you have to work with area of
226:28 - records
226:30 - but
226:30 - as you said angular material table takes
226:32 - care of everything so it will do it do
226:34 - internally all those things you know you
226:36 - won't be actually writing this code
226:38 - but this ng4 directive will be useful
226:42 - for a lot of other cases where you have
226:43 - actually era of data and you want to
226:45 - bind it so let's uh
226:47 - use
226:48 - table
226:51 - and
226:52 - we'll say okay first uh there is a tr
226:55 - and then dh
226:57 - we have room number room okay not room
227:00 - number
227:01 - but
227:02 - we are okay viral number can be on
227:04 - property which we missed
227:18 - and let's add it here
227:21 - so it's room number one
227:22 - [Music]
227:25 - number two and
227:27 - so number three so okay so we have a
227:30 - room number property as well so let's
227:32 - see uh the headers so we have room
227:34 - number room num room type
227:35 - then what else
227:38 - so this will be our table headers room
227:40 - price
227:42 - then we have uh
227:44 - room status we don't have but let's say
227:46 - we will
227:47 - have amenities right we have amenities
227:57 - so we have room number room type
227:58 - amenities price is there
228:01 - photo we will use later on check in time
228:03 - checkout time because uh we want to
228:05 - actually uh see some
228:07 - [Music]
228:09 - date time pipe as well and just talk
228:11 - about it later let's see so right now
228:13 - let's display this checkout and chicken
228:15 - and check out time
228:18 - check
228:21 - time so let's use only one chicken time
228:24 - here
228:26 - this is it so this is our
228:29 - header
228:32 - and now we want to display the
228:34 - information so let's come back here and
228:36 - have another tr
228:38 - and now we want to what we want to do is
228:40 - we want to create multiple rows remember
228:42 - so dr means of course your table rows
228:45 - which will be created for each and every
228:47 - record so this is where you will be
228:49 - applying your ng for
228:51 - so i'll say okay this is ng 4
228:54 - is equals to let's see how the syntax is
228:57 - so you can select
229:00 - room
229:04 - of
229:05 - rooms
229:09 - list
229:13 - okay what happened here
229:15 - okay it's not rooms list it's long list
229:17 - okay so now this will this uh for loop
229:20 - will run for each record inside room
229:23 - list so we have three records right now
229:26 - and now let's display the information so
229:29 - we have room number type price
229:33 - room dot
229:43 - okay room
229:54 - what's wrong here
230:22 - see this
230:26 - what's wrong yes td
230:33 - room dot
230:39 - okay let's
230:43 - generally we should get intelligence but
230:45 - somehow the intelligence is not working
230:49 - okay so we have price then we need
230:51 - amenities
230:53 - so let's
230:56 - copy the properties right now amenities
230:59 - and then we have check-in time and
231:01 - that's another property check-in time
231:06 - okay so now we have our room list
231:09 - available let's go ahead and see
231:14 - so let's go ahead and see that on the ui
231:16 - here you can see all the information is
231:18 - available in a tabular format so i think
231:20 - check-in time
231:22 - okay we have to change
231:25 - it is what happened to this it is not
231:27 - just number two i mean it is
231:30 - you get a change something here i'm
231:32 - going to teach them when it is now this
231:34 - is a string
231:36 - okay i think i just copy pasted
231:38 - something
231:42 - hmm checking time
231:45 - which will be
231:48 - here
231:49 - so let's go ahead and see the ui and
231:51 - this is uh this is the information which
231:53 - we have available in tabular format so
231:54 - we have a room number we have room type
231:57 - we have room price
231:58 - but then we have amenities and then this
232:00 - is your date format so by default the
232:03 - you can see angular displays the long
232:05 - date format which we can change we will
232:07 - change this date format later on
232:10 - right now let's uh go ahead and see
232:13 - what happened here so we have ng for
232:15 - loop available which like works for each
232:18 - record which is available in your array
232:22 - there are a few more properties which ng
232:23 - for us let's talk about those
232:26 - rather than uh actually uh ng4 can also
232:30 - give you access to two few more things
232:32 - which is
232:33 - uh even and odd values so in case i want
232:35 - to find out which row is even and which
232:38 - row is odd ng4 gives you that so i can
232:41 - say let
232:42 - e equals to even
232:45 - and let o equals to r
232:49 - and let's print it here right so i'll
232:51 - say this is
232:53 - one more header
232:55 - even
232:56 - [Music]
233:03 - and
233:05 - let's see
233:18 - i mean if it's even display even or
233:20 - display out simple logic right so you
233:23 - can see even odd even so this is how
233:25 - your information is getting displayed so
233:28 - using even or not values
233:30 - what else we also have an index value
233:33 - available so in case you want to get a
233:35 - hold of an unique value for your row and
233:38 - you don't have any unique values you
233:40 - just want to display a running number
233:43 - while actually displaying your records
233:45 - that's possible you can say let
233:48 - i equals to index
233:51 - and here let's say
233:53 - i will add one more
233:54 - [Music]
233:55 - ph
234:04 - we can say dd and this is display i
234:07 - remember this is an index value so it
234:09 - starts from zero so don't uh
234:11 - don't be shocked once you see okay it's
234:14 - why it is giving
234:15 - zero because of course this is index so
234:18 - starts from 0 you will say 0 1 so this
234:20 - is it so you have this few values which
234:23 - is available
234:24 - we will talk about one more um
234:28 - a very important property or of ng for
234:32 - let's
234:33 - do it later because uh that will require
234:36 - some extra code to be written like we
234:39 - need services and all
234:40 - uh to see an example
234:43 - ng for every every time uh the thing is
234:46 - whenever you have ng for a
234:48 - directive used
234:50 - in case something gets changed it will
234:51 - re-render all the records within this
234:53 - data you can actually improve the
234:55 - performance of this particular ng for
234:57 - which we will see in a separate section
234:58 - how you can improve that
235:00 - but right now this is it this is the
235:02 - basics which you need to know about
235:04 - while working with ng4
235:10 - so we are done with ng if and we are
235:12 - done with ng4 but we we didn't discuss
235:15 - about one thing you remember this star
235:17 - what with this star is
235:21 - okay we uh we have been discussed about
235:23 - it so let's let's uh let's talk about
235:25 - that star
235:26 - remember we said there are two types of
235:28 - directives attribute-based directive and
235:29 - structural directives
235:31 - so how you will differentiate between
235:33 - structural directives and attribute this
235:35 - directive so that's the star which
235:36 - actually lets you know
235:38 - or
235:40 - there is one more way
235:42 - generally in all the built-in directives
235:44 - which has star or structural directives
235:45 - yes that's uh that's what that's true
235:48 - and
235:49 - other uh like ng class and ng style they
235:52 - are attribute based directive
235:53 - so your structural directives can modify
235:56 - your dom remember this
235:59 - here
236:01 - if you see your
236:03 - uh
236:05 - list on your
236:06 - view right now
236:08 - you can see actually we just on in our
236:10 - code base we just have dr manley once
236:13 - who is creating these three tiers or
236:15 - four tiers
236:16 - one two three four okay first one is
236:19 - headers anyways so one two three three
236:21 - records right who is creating that so
236:22 - that's the task of ng for star ng4
236:25 - and it is actually a structural
236:27 - directive so it can add and modify uh
236:29 - sorry it can add or remove the dom
236:31 - element from your view
236:33 - similarly if you see i mean we had used
236:36 - ngif it was actually adding the div for
236:38 - removing the tip
236:40 - you can actually do that on button click
236:41 - as well of course by changing the
236:43 - properties
236:44 - so that also does the same thing and ge
236:46 - is also able to add or modify the tom
236:49 - element so
236:50 - any directive which can uh
236:53 - modify your dom element is structural
236:55 - directive attribute best directives are
236:57 - something which will probably add some
236:59 - attribute to your
237:00 - uh
237:02 - element or remove something or add some
237:04 - extra logic to your element based on
237:06 - some properties but they cannot modify
237:09 - entire dom that's the difference
237:14 - so sorry they can modify the dom let's
237:17 - they can modify the dom but they cannot
237:19 - add or remove the element from the dom
237:21 - that's
237:22 - what your
237:24 - attribute directives does most of the
237:25 - time
237:30 - so let's see
237:31 - uh
237:34 - let's talk about ng switch we'll take an
237:36 - example of ng switch and then we'll talk
237:38 - about the
237:39 - rest of two class uh two attribute based
237:41 - directives which we have
237:45 - ng switch is something which is uh i
237:48 - have used very rarely but very useful so
237:51 - let's see an example what we can do i'm
237:53 - sure you you might have learned about
237:54 - switch case statement so ng switch is
237:56 - kind of
237:57 - similar
237:58 - which is available here so
238:01 - let's see what we can achieve i'll take
238:04 - an example
238:06 - simple example here and
238:09 - let's see so here what we want to do is
238:12 - for example if i am an user i'm normal
238:15 - user i don't want to display this room's
238:17 - information to the user but in case i am
238:20 - an admin i want to display this rooms
238:23 - so let's see how we can achieve that
238:24 - using ng switch
238:26 - so first what we will do is we'll create
238:28 - a property here
238:29 - i'll say this is login type we don't
238:32 - have login page right now so we'll just
238:34 - start with mock data
238:35 - it's a login type and i'll say this is
238:38 - admin right now
238:42 - and let's go to our company testimony
238:44 - here i'll use a div
238:49 - and i'll use star
238:52 - ng switch
238:54 - is equals to
238:56 - i'll say this is login
239:00 - type
239:02 - just
239:11 - uh
239:13 - oh let's name it rolled right which
239:16 - makes more sense
239:22 - and now
239:23 - based on
239:25 - whether the role is admin or
239:28 - if it's simple user we want to display
239:31 - different views so here what i will do
239:34 - is i will say a div
239:36 - and we will use star ng switch case
239:40 - is equals to i'll say this is uh
239:43 - user this is user rule
239:46 - i want to display you want to actually
239:48 - use it as string so what i can do is i
239:50 - can put single quotes inside it remember
239:53 - if i just remove single quotes it will
239:54 - treat it as variable as we have seen so
239:56 - far while binding the data so here i am
239:59 - i want to treat it as string so i'll say
240:01 - okay this is a user
240:03 - and here i can say uh
240:06 - this is let's say welcome
240:09 - user right so
240:11 - this is what you want to display to the
240:13 - user
240:15 - if it's not
240:16 - it's admin
240:20 - i want to display this room's
240:22 - information
240:26 - and uh switch case like uh switch case
240:29 - statement this
240:31 - this also has ng switch case uh will
240:34 - also have
240:35 - a default one so you can use that
240:41 - so default i can say you don't
240:48 - you're not at risk to be this page right
240:50 - so
240:51 - let's see right now our
240:54 - role is admin so we should be able to
240:56 - see everything
240:57 - let's change our role
240:59 - to
241:00 - user
241:01 - so we will see that welcome user
241:04 - thing
241:06 - so you can now have welcome user and
241:08 - let's
241:09 - type users which will say you are not
241:12 - authorized to view this page so this
241:13 - your ng switch case
241:15 - works
241:16 - so you have like your ng switch where
241:18 - you are assigning the value and then and
241:20 - you switch case based on which you can
241:22 - toggle your view you can display
241:23 - whatever you want to here
241:25 - so in this which case uh and ng switch
241:28 - case default these are the different
241:30 - uh attributes or you can say
241:33 - different directives which you have
241:35 - available you can use those
241:40 - we'll keep this code here because we are
241:43 - not going to use it anymore
241:44 - so
241:51 - let's see an example of ng class and ng
241:53 - style and then we'll wrap up with
241:56 - built-in directives
242:05 - so can you guess what ng class and
242:07 - energy style is related to
242:09 - yeah if you if your answer is related to
242:12 - style cs that's that's the correct
242:14 - answer
242:15 - so what we need is uh there are two ways
242:17 - right so i can just apply some style or
242:19 - i can apply some
242:22 - some
242:22 - class directly so let's see how we can
242:25 - do that
242:26 - so here i'll create two classes
242:29 - even
242:31 - where we have let's say background color
242:34 - and
242:35 - color
242:40 - let's change to
242:42 - this is looks white so i'll say this is
242:45 - still blue
242:47 - and color is
242:49 - white
242:50 - and then there is an odd class
242:53 - which has
242:55 - background color of
242:57 - light still blue and
243:00 - let's use tomato
243:01 - and white
243:04 - so let's see how we can use ng class to
243:07 - toggle the class between even or not we
243:09 - can do that here so
243:11 - [Music]
243:13 - i can apply this ng
243:16 - not here let's not apply on td if we
243:18 - want to apply it on tr so i can say
243:21 - ng
243:26 - class is equals to so if i am if my
243:29 - class is even
243:30 - then i can say okay the
243:33 - if it's even row i mean my class will be
243:35 - even
243:36 - else
243:37 - i'll say use odd class
243:42 - there are multiple syntax remember you
243:44 - can also just uh
243:45 - use a variable name directly here that's
243:47 - absolutely fine right now we are saying
243:49 - okay based on even value switch
243:52 - uh have different uh class let's change
243:55 - this to even
243:56 - let's go to view
244:00 - and you can see we have different rows a
244:02 - different background color
244:04 - for different different uh even an odd
244:06 - rows right so this is how you can use ng
244:08 - class also as discussed you can also
244:10 - have a variable for example let's say
244:12 - you have a class name which is saved for
244:15 - some user user preferences right they
244:18 - they prefer some different class to be
244:19 - used so you can save those those class
244:22 - and then load it by a variable that's
244:23 - also possible
244:25 - ng style is something where you have to
244:27 - give the style so let's see where i
244:29 - where we can do that
244:32 - uh in a text
244:34 - here let's try to do here
244:40 - so i'll say if ng
244:43 - ng if
244:46 - um
244:54 - zero
245:02 - and
245:09 - use the style
245:15 - and say
245:18 - rooms
245:22 - well let's remove it right i mean we can
245:23 - directly do this as well so we can say
245:27 - here ohms
245:41 - greater than zero then we can say
245:43 - color
245:50 - then
245:58 - color is
246:00 - green so we will just see this one
246:04 - let's see if this works because i
246:06 - generally don't use ng style
246:13 - okay it is expecting something at
246:15 - language
246:17 - rooms uh color green uh
246:19 - missing expected curly brackets
246:23 - on line number seven
246:26 - this is close
246:27 - this is okay okay this is an extra rate
246:49 - so you can actually we can do something
246:51 - like this so we can say color which is a
246:53 - property and then we are saying if rooms
246:56 - there are available rooms make it green
246:57 - otherwise make it red red
247:00 - let's see how it looks like
247:07 - you can see this is green color which is
247:08 - coming here so
247:12 - let's make it some other color which
247:14 - looks visible so i'll say steel blue
247:22 - okay so this is still blue now you can
247:24 - see of course that it is different from
247:26 - the
247:27 - the black
247:29 - or you can just keep it
247:32 - green
247:33 - so this is how you can also use ng style
247:35 - ng style also
247:36 - accepts variable so you can also pass a
247:39 - variable here that's absolutely fine
247:44 - so this is from the directives part now
247:47 - we will move on to pipes
247:52 - so we know how to do data binding we
247:54 - also learn about few
247:56 - useful directives
247:58 - next thing which we are going to talk
248:00 - about is pipes
248:03 - what is pipe
248:05 - so
248:07 - in uh
248:12 - so we are going to see what is pipe and
248:14 - then we will talk about some built-in
248:15 - types so let's first talk about what is
248:17 - pipe
248:19 - so in your day-to-day uh work of course
248:21 - what you will be doing is you will be
248:23 - finding some data on your
248:26 - front-end screen or your view
248:29 - and there will be times that
248:31 - a requirement may come that okay this
248:33 - particular date object should not be
248:36 - displayed in the long
248:38 - date format which we have seen
248:40 - probably it needs to be shown in some
248:42 - other day format
248:44 - or there might be requirement to display
248:46 - amount in let's say dollars inr or any
248:49 - other
248:50 - uh currency right so by default
248:53 - the currency is
248:55 - dollar of course
248:57 - but we may need to actually show it in a
248:59 - different format for uh the same goes to
249:01 - numbers
249:02 - what to do i mean of course we cannot
249:04 - ask the api to change the date format
249:06 - they will be like okay this same api is
249:08 - getting used at multiple places why
249:10 - should i do that for you
249:12 - so the pipes are the answer so pipes are
249:14 - used for data transformation so
249:16 - when i mean transformation
249:18 - it has a meaning so transformation means
249:20 - my original object remain as it is i'm
249:23 - not going to change that object but
249:26 - while presenting that object i am
249:28 - displaying it in different format
249:31 - so it means the pipes don't actually uh
249:34 - pipes actually don't change the ocean
249:36 - object they keep it as it is but while
249:39 - presenting it on your view you may
249:41 - actually change the format in different
249:43 - different format so there are few
249:45 - built-in pipes which we have and there
249:47 - are a few uh you can actually write your
249:48 - own bypass which we are going to do in
249:51 - future
249:53 - here we will go through all the built-in
249:54 - pipes which we have so you we have date
249:57 - by buffer case lower case we have
249:58 - currency we have decimal we have percent
250:01 - pipe as well we have json pipe slice and
250:03 - then we have a simple so let's go
250:05 - through them uh go go so let's go
250:08 - through them one by one and we will see
250:10 - uh we will apply and then see how your
250:12 - view looks like so let's switch back to
250:14 - the ps code
250:16 - and this is the same view which we uh
250:19 - wrote last so remember rooms and then we
250:22 - created a list
250:23 - so let's start with the first pipe which
250:25 - we have which is great pipe
250:28 - so we already have a property called uh
250:30 - chicken time right so here let's see how
250:33 - we can apply
250:34 - so you can give use this particular
250:37 - symbol which is available just below
250:40 - backspace
250:41 - and above enter so you can just save
250:43 - shift and press this which is pipe
250:45 - operator and then you can write okay i
250:47 - want to use date
250:49 - and let's go ahead and see this and
250:53 - let's see it on our view so you can see
250:56 - your date time format is actually
250:57 - changed to something else earlier it was
250:59 - a long date format now once you apply
251:01 - date it is short date format by default
251:05 - you can also change it
251:07 - with specific format as well
251:10 - all the formats are available on
251:13 - angular.iodox so you can just go to
251:15 - angular.io and
251:17 - in docs section you will see uh
251:20 - references
251:36 - so you can see all the formats which you
251:38 - can use here so you can also use
251:40 - text short medium long or you can also
251:42 - specify the format you want as well so
251:46 - it's up to you
251:49 - so let's say if i just say date
251:51 - and then in case you want to change you
251:54 - have to put colon and then you can write
251:56 - okay short
251:57 - so this is the format which i need short
252:00 - which is the equivalent to let's see m
252:04 - d d y by h m m a so it's like something
252:06 - like this this if this is the example
252:08 - right so
252:10 - uh
252:12 - the one which is by default is this one
252:14 - short date
252:15 - you can specify the format as well so i
252:17 - can say dde uh mmm and
252:21 - so it will be a date month in the first
252:24 - three characters so you can say 11th
252:26 - november 2021 so this is how you can
252:28 - actually change the formats and you in
252:30 - case you need time uh so you can also
252:32 - pass the hmm ss
252:34 - and uh
252:36 - this one two three four four sets is
252:39 - actually for time zone in case you want
252:40 - to display the time zone
252:42 - so this is an example of date format
252:44 - let's see what else we have so
252:47 - let's go back to slides we have about
252:50 - case lowercase let's see both and then
252:53 - we also have title case
252:55 - okay which i missed here
253:04 - right so i want to display this in
253:07 - lower case
253:09 - we can say lowercase
253:10 - so everything will be displayed in
253:12 - lowercase characters
253:14 - right so you can see air conditioner
253:16 - free wi-fi tv bathroom kitchen or
253:18 - everything is in lower case right now
253:21 - and up and i can just change this to
253:23 - uppercase
253:25 - and everything will be in camps
253:27 - and
253:29 - if i'm not drawn okay so i missed it in
253:31 - slide but we do have title case as well
253:33 - where the first character will be in
253:35 - capital so you can see air conditioner
253:37 - free f
253:38 - and then we have tv bathroom kitchen so
253:40 - every the first character is in capital
253:42 - that's titled
253:45 - now we also have currency so we can use
253:48 - currency
253:49 - and by default the default currencies in
253:53 - is based on the en us which is dollars
253:55 - so you can see dollars available here
253:57 - 500 thousand dollars and 50 000
254:00 - you can change currently by passing the
254:02 - value for example for
254:05 - indian currency the co-designer
254:08 - so you can see uh it will now give us
254:10 - request symbol remember
254:12 - the uh
254:14 - currency uh code to its equivalent uh
254:18 - display uh
254:20 - is not available for all the currency
254:22 - types it is available for all the major
254:23 - currencies but you may actually find
254:25 - some currency which is missing so in
254:27 - that case it will just display whatever
254:29 - you pass here
254:31 - so here you have inr for example if i
254:33 - want to display euro i can say eur
254:37 - and it will display you the hero symbol
254:39 - and uh of course great britain bound g b
254:44 - g b
254:47 - and it will display the pound symbol
254:53 - saved
254:55 - and you will get this pound symbol here
254:57 - so by default it's euro but let's keep
254:59 - it as an inner right now indian rupees
255:05 - so we are done uh we saw how did pipe
255:07 - works how we can use lowercase uppercase
255:10 - title case then currency pipe we have
255:12 - decimal and percentage pipe so
255:15 - let's see percentage five first
255:17 - percentage is uh something which will
255:19 - display your value in percent so one is
255:21 - hundred percent remember this
255:23 - so in case uh you want to actually uh
255:26 - convert some
255:27 - some some numbers in percentage make
255:29 - sure that it is
255:31 - uh in decimal right
255:33 - so let's go ahead and see so you can see
255:35 - it is zero percent is 100 percent this
255:37 - is 200 percent so in case you have 0.5
255:39 - it means 50
255:41 - which is of course true right
255:43 - so this is percent pipe we'll come back
255:45 - to decimal and then we have json uh and
255:48 - uh slice and and we have a sync pipe so
255:51 - here we are going to say jsonpipe of
255:53 - course we will see slice paper as well
255:55 - as pipe we will not discuss right now we
255:58 - will discuss it during uh
256:00 - http and api calls so we have to wait
256:03 - for that
256:06 - let's see how to use this input so here
256:08 - uh
256:10 - room from list
256:17 - so jsonpipe is useful uh mostly for
256:20 - different but was for example let's say
256:21 - this room list right and it has a lot of
256:23 - objects okay a lot of other properties
256:26 - as well and what you want to do is we
256:28 - want to just check what is the value
256:30 - available here so if i just
256:32 - or just apply these uh
256:36 - just apply this binding you will see
256:38 - this is object object but what in case i
256:40 - want to actually see the value so i can
256:41 - just go ahead and write my power based
256:43 - on that it happens because of course in
256:45 - case you have large largest object you
256:47 - need to find okay which property exists
256:49 - and which property doesn't so useful for
256:52 - debugging don't keep json types on
256:54 - protection so let's see what how json
256:57 - helps here so i can just use python
256:59 - symbol and you can say json remember
257:01 - it's all small
257:03 - and
257:04 - now you can see okay these are the
257:06 - values which are available so it says
257:07 - okay there is a room number there is a
257:08 - room type these are the values then you
257:11 - have photos object available as well
257:13 - then you have chicken time checkout and
257:15 - these are all the properties which is
257:17 - available within this particular json
257:19 - property it can be applied
257:26 - it can be applied on object it can be
257:28 - applied on an array so you can apply it
257:30 - for everywhere
257:32 - remember again i am saying this is
257:33 - something which should be used for
257:35 - debugging purpose only should not use on
257:37 - production
257:38 - so this is jsonpipe i just keep it here
257:40 - i'll comment this
257:42 - then we had slice pipe so slice is
257:45 - similar to slice
257:47 - property or you can say slice function
257:49 - which exists in javascript so here uh
257:53 - let's try to apply
257:55 - a slice
257:57 - here
257:59 - and you can pass
258:01 - how many records you want to display so
258:03 - i guess is zero to one
258:07 - let's go ahead and see our view
258:11 - and you can see it says okay it displays
258:14 - first record because the pipe which we
258:16 - are using the slice or let's talk about
258:18 - slice function which exists right so
258:20 - slice function accepts through parameter
258:22 - first index and the last index it will
258:24 - display the value between
258:26 - those two so we here we are saying start
258:28 - from the zeroth index and display one
258:29 - value you can also change of course uh
258:33 - the first and then you can say okay uh
258:35 - go to two right so start from first and
258:38 - take the next two values but
258:40 - doesn't exist there are no other two
258:42 - values which exist only there are zero
258:43 - one two so it is only displaying me uh
258:47 - the uh id2 right so room number two
258:49 - which is third record so zero uh one two
258:52 - so between one and two there is only one
258:54 - record if i say zero to two let's see
258:57 - so it will always skip if i am not wrong
258:59 - here it will always keep 0 and it will
259:02 - give you 1
259:03 - sorry
259:05 - sorry i am wrong
259:07 - here let's see the values so you have
259:09 - room number 1 and 2 right so it will
259:11 - start from 0 until 2 0 1 2
259:14 - so here uh
259:17 - so room number one and room number two
259:20 - uh it will skip the last one if i'm uh
259:23 - okay so let's reiterate again so when
259:25 - you pass slice and some numbers so here
259:28 - what we are saying is
259:31 - starts from 0 and go to go till 2 so
259:35 - you have 0 and 1
259:37 - it will not consider the last number
259:39 - similarly when we say 0 and 1 it will
259:41 - again skip the last number so 0 and 1
259:44 - and if i say 0 to 3 let's see what
259:46 - happens it will
259:48 - display all the records right so 0
259:50 - because third index 0 0 1 2 3 so third
259:54 - index is fourth value so of course there
259:57 - is nothing which exists there and it
259:59 - will always
260:01 - not consider the last last value so we
260:03 - get 0 1 2
260:04 - similarly when we passed 2 what it did
260:07 - did is so 0 1 and skip the last value so
260:10 - zero and one so this is how it works so
260:13 - generally you won't be using slice a lot
260:16 - of time because
260:17 - in case you are working with large data
260:19 - set it is not
260:21 - suggested that you should use slice pipe
260:23 - to
260:25 - filter out the records so general i mean
260:27 - the use case to use slice pipe can be
260:30 - filtering without the records
260:32 - but don't use it
260:34 - are you
260:35 - not filtering sorry the general use case
260:37 - to use slices pipe sorry generally use
260:40 - case to you uh use slices pagination so
260:43 - don't use uh this slice pipe for
260:45 - pagination unless you have some like
260:47 - fixed records so let's say you have some
260:49 - master table where
260:50 - your records are not going to go above 5
260:53 - 15 or let's say 100 it will always be
260:55 - like that
260:56 - which generally doesn't happen right i
260:58 - mean most of the cases you will get more
261:01 - i mean you don't know how many records
261:02 - we are supposed to get
261:04 - so don't use
261:05 - slice for pagination in a real-time
261:07 - application always rely for server-side
261:10 - pagination or server-side filtering
261:13 - in case you are working with large data
261:15 - set
261:16 - so this is a slice
261:19 - and then we have number as well so let's
261:21 - see
261:22 - if we get
261:24 - any
261:29 - type and i don't have decimal numbers
261:32 - here
261:45 - decimal pipe example right so we are
261:47 - what we will do is we will add one more
261:49 - property so let's add a rating property
261:51 - because that's something which can be
261:52 - decimal
261:53 - so here i'll say
261:55 - [Music]
261:57 - reading and
261:59 - we will say this is type of number uh
262:01 - you don't have float you had this uh
262:04 - beacon does exist in typescript but
262:06 - begin days like for big numbers so for
262:09 - rating i don't think so we need uh begin
262:12 - and now let's add this property so i'll
262:14 - say this rating
262:15 - is
262:17 - 4.5
262:22 - and here
262:23 - let's say it's 3.4
262:29 - this is output 5 for example
262:32 - and it is 2.6
262:36 - so what we can achieve using decimal
262:38 - points so let's say you don't want to
262:40 - actually round off these values or you
262:42 - don't want to round off these values to
262:44 - some specific numbers so this is
262:46 - something which you can achieve using a
262:48 - decimal pipe
262:50 - so here i'll just add a last property
262:54 - and i'd say this is written
263:27 - so let's apply decimal um sorry not
263:30 - decimal the name is decimal but the pipe
263:33 - name is number
263:34 - so let's uh apply this and see
263:38 - how it looks like so you have this four
263:41 - point five three point five point six
263:42 - for example uh so this is the values
263:44 - right and now we want to actually
263:45 - display this in different format so what
263:48 - we want is uh
263:51 - there are three properties uh
263:54 - there are three properties which you can
263:55 - pass
263:56 - first is
263:58 - how many number we want to display
264:00 - before decimal so i am saying okay we
264:01 - want to display one number before the
264:03 - estimate
264:05 - then
264:08 - how many decimals after uh sorry how
264:11 - many uh numbers you want to display
264:13 - after decimals for example if it says 0
264:16 - and 0
264:18 - so it will uh let's see what it does so
264:20 - it says okay this
264:23 - five
264:24 - is closer to five so it goes to five
264:26 - three point i think uh what were the
264:29 - other values let's see
264:31 - so we had three point four and two point
264:32 - six so three point four is closer to
264:34 - three so it goes to three
264:36 - two point six is closer to 3 so it goes
264:38 - to 3 so this is how this particular
264:41 - value works let's see how we can change
264:44 - the values
264:47 - so this uh
264:49 - two values right so this is minimum uh
264:52 - you can actually see the definition here
264:54 - so it says uh this is the value and this
264:57 - is digits info
264:58 - and you can also pass local but this is
265:01 - not we are looking at right now decimal
265:03 - pipe
265:04 - and
265:05 - here so you can see uh
265:07 - let me show you the shortcut so you can
265:09 - actually go ahead and say control plus
265:11 - click it will
265:12 - take you to this particular pipe in case
265:14 - it happens right so
265:15 - i generally don't use number five so if
265:17 - i forget about the definition of course
265:19 - the docs is one place where i can see
265:21 - look for it but you can also open this
265:23 - inside vs code
265:25 - control plus control plus click here or
265:28 - you can also do f12 so press f1 and it
265:31 - will also take you to the definition
265:32 - file where you can see some example for
265:34 - example let's see here so it says 3.6
265:37 - number and then we are saying first it
265:39 - will we want to display one number
265:41 - before the decimal point and after that
265:44 - we want to display uh minimum 0
265:47 - so you can see minimum number of digits
265:49 - after decimal point so it says zero and
265:51 - maximum number of digits after a decimal
265:53 - point so it says zero so this is what we
265:55 - are saying uh so let's say if i
265:59 - do it like this so i i want to display
266:03 - one and one
266:09 - right so you we said okay we want to
266:10 - display uh at least one minimum digit
266:13 - and one maximum digits which is four
266:15 - point but in case we had a running
266:17 - number right so let's say if i change
266:19 - this to three point
266:21 - four
266:23 - where we have
266:24 - a few more numbers available now let's
266:26 - see what happens
266:27 - so you have 3.5 because it actually said
266:31 - okay 3.4 and we want to display only one
266:33 - number so it actually four is closer to
266:35 - five so it says okay let's go to five
266:38 - and
266:40 - let's go to
266:41 - [Music]
266:42 - i want to display two maximum numbers
266:44 - let's see what happens here so you have
266:46 - three point four six
266:47 - so uh this is uh
266:50 - two decimal numbers and we can of course
266:52 - increase whatever maximum numbers you
266:55 - want to so now you have three point four
266:57 - point four five seven
267:00 - so this is this is how you can actually
267:03 - uh use this number type
267:06 - and you can also pass local uh local uh
267:09 - which is like
267:11 - you remember
267:12 - the numbers are actually different in
267:14 - different different uh
267:16 - countries so for example here in india
267:19 - we use decimal points but if you go to
267:22 - europe
267:24 - sometimes they use comma
267:26 - or probably uh some other countries
267:28 - might be using some other different uh
267:31 - different uh
267:32 - separation uh
267:34 - uh value right so separate different
267:36 - separator which you got you can also do
267:38 - that using this let me show text
267:41 - sees that we have some samples
267:51 - so let's try to display this number in
267:53 - france dfr is local for france let's see
267:57 - okay there is some error
268:00 - okay this is not something which is
268:02 - valid
268:11 - local invalid pipe argument missing
268:13 - local data for
268:14 - okay
268:23 - missing local data so we have to add
268:26 - local first and then
268:27 - it's okay
268:28 - [Music]
268:31 - let's see enus is available yes this is
268:33 - available and this is the default one
268:39 - so right now of course the front uh the
268:41 - thing is with local is you need to add
268:43 - the support for those locals so that's
268:45 - that is something which is not added
268:46 - probably we'll see an example of
268:49 - later on but yeah i mean you can pass
268:51 - the locals here and then it will display
268:53 - the number based on that particular
268:54 - local so
268:56 - for example this number may be different
268:58 - or in a different format in france which
269:01 - is possible and it is possible it's
269:08 - too
269:22 - so you can see thousand decimal support
269:24 - separators right so
269:25 - uh in canada you uh we use space
269:30 - in danish we you are we are using space
269:32 - so in different currencies
269:34 - there are different separators which are
269:35 - used so this is what i was referring to
269:38 - so thai you have comma then dot
269:41 - here also you have comma spanish there
269:43 - is no comma there is just spaces
269:45 - sorry space you have dots and
269:48 - then dot here you have comma so these
269:50 - are different uh numbers formatting
269:52 - different locales
269:54 - and angular supports different locals as
269:56 - well i mean that's another topic
269:59 - which is not part of this course but in
270:00 - case you want to refer uh angular does
270:03 - support
270:04 - converting your
270:06 - uh
270:07 - like
270:08 - text to a different format which is
270:10 - known as internet internationalization
270:12 - and localization
270:13 - it is a feature which is which is
270:15 - supported by angular
270:17 - so that's it from the pipes as we
270:18 - mentioned the sig pipe will be used
270:20 - while talking about http in later
270:22 - section
270:28 - hi in this video we are going to talk
270:30 - about lifecycle looks
270:32 - but before we do that
270:34 - let's do one more thing
270:38 - right now if you see this particular
270:39 - view
270:40 - it it's missing something it is missing
270:43 - the styling if you think about it right
270:46 - so there are multiple options which you
270:48 - can choose from
270:50 - you can either go with bootstrap
270:52 - you can go with angular material or you
270:55 - can also use
270:57 - something
270:58 - [Music]
271:01 - or you can also use
271:02 - television css which is also supported
271:05 - by angular
271:06 - so what we will do is let's add
271:08 - bootstrap right now and
271:10 - then we will add angular material later
271:12 - on
271:13 - and probably at the end we will see how
271:15 - you can configure
271:17 - television css probably later in the
271:19 - video
271:20 - so to add bootstrap there are multiple
271:22 - options which you have there are
271:24 - multiple libraries which actually
271:25 - supports bootstrap
271:27 - so we have ngx bootstrap and ng
271:28 - bootstrap both are same
271:31 - uh even contains lot of similar
271:34 - components i mean you can choose any one
271:35 - they both support bootstrap 4 as of now
271:38 - they don't have support for bootstrap 5.
271:41 - so let's see okay so nzx bootstrap
271:43 - actually came with suppose it came up
271:44 - with the support for bootstrap 5 also so
271:47 - let's add
271:48 - you can add this command you can see
271:51 - how you can install so there are
271:52 - instructions given on this page uh you
271:54 - we can we will use the angular cli way
271:57 - so let's go ahead and do that
272:04 - and before you do that
272:07 - and before you do this make sure you
272:10 - stop the server which is running so
272:13 - i have stopped the server because it is
272:15 - going to impact the
272:17 - angular.json and we need to restart the
272:20 - server so
272:21 - i already stopped it in case you are
272:23 - running just stop and run this command
272:25 - ng add ng export start which will
272:27 - install bootstrap 5 and it will give
272:30 - access to some components which comes
272:32 - with it so if let's go back to the page
272:35 - so you can see it has accordion alerts
272:37 - button carousel collapse
272:40 - so these are all components which you
272:41 - you can use inside your
272:44 - angular page
272:45 - or angular application
272:48 - so
272:48 - we will
272:49 - come back to this later on right now we
272:51 - just want to install ng export strap so
272:55 - let's see
272:56 - it says uh the package engine bootstrap
272:58 - 6.2.0 will be installed and executed
273:05 - somehow okay
273:07 - let's see what's wrong
273:12 - so this ng
273:14 - engines bootstrap the current version is
273:17 - 7.1.2
273:18 - but it is saying for us the compatible
273:21 - version is seven six point two point
273:23 - zero
273:24 - and
273:27 - we have angular 13 which is being used
273:32 - so there is some problem with the
273:34 - release so let's use the uh latest
273:36 - version whatever it is offering right
273:38 - now 6.2.0 and
273:41 - meanwhile i'll check what's wrong with
273:43 - this so
273:44 - it is
273:45 - released on silence
273:47 - september 24th
273:58 - since
274:12 - cannot find schematic
274:14 - angular utility config
274:16 - okay looks like this particular package
274:18 - is not compatible with angular 13 as of
274:21 - now so that's that's the problem here
274:25 - tell
274:26 - what we can do
274:31 - even they are not compatible with
274:32 - angular 12
274:37 - this is strange
274:58 - okay let's try with the uh
275:00 - [Music]
275:02 - this version which is
275:05 - 7.1.2
275:10 - okay let's see
275:13 - 7.1.2 and then this one has package.json
275:17 - which supports
275:18 - angular 11. this is really strange
275:20 - because it should be either
275:23 - angle 12 or 13 so let's
275:27 - look for
275:28 - the tax
275:32 - 7.1.1
275:37 - and this also uses angle
275:39 - let's check if ng
275:42 - there is another package ng input strap
275:44 - let's see if that supports it
275:47 - mg
275:48 - but
275:56 - beta support for bootstrap 5 is
275:57 - available with angular 11 with 11.0 beta
276:01 - 2
276:02 - and this is the command so let's see
276:05 - i'm getting started
276:07 - and
276:08 - this is for angular 12
276:11 - bootstrap css5
276:14 - let's try let's try this one
276:22 - and you put strap is added
276:28 - okay let's see if this works ng add ng
276:31 - bootstrap
276:35 - so it also supports in case you have
276:36 - multiple projects so you can pass which
276:38 - project you want to add this bootstrap
276:41 - library to but let's see
276:46 - okay so it is saying bootstrap 10 will
276:49 - be installed
276:54 - okay this is also
276:56 - just not working so let's try with this
277:00 - one so what i'm going to do is i'm going
277:02 - to
277:03 - [Music]
277:05 - enter it next
277:08 - so uh remember as of today not all the
277:10 - libraries are compatible with angular 13
277:13 - and that's what
277:14 - we are that's what the issue which we
277:16 - are facing right now
277:21 - um
277:29 - okay this is this is sad
277:34 - angular 13 from good project found
277:37 - common 13.0.1
277:47 - angular common 12
277:50 - okay so even they are not compatible
277:52 - with angular 13 because they are saying
277:54 - okay this is for angular 12
277:56 - okay
278:00 - let's see if we have any other way
278:03 - start by
278:29 - let's start 5.0 okay so it is available
278:33 - let's try to install bootstrap directly
278:35 - and then we'll see and then install put
278:38 - stuff
278:39 - so uh if you are not aware bootstrap
278:42 - five has actually dropped the support
278:43 - for either so that's
278:46 - that's one thing which they have done
278:48 - so bootstrap is installed now let's see
278:55 - so you can verify it from node modules
278:57 - folder which we have available here and
279:00 - let's go to a b
279:04 - so distributable js and sorry css and
279:07 - okay this is all bootstrap css files
279:10 - which is available we want to use
279:12 - bootstrap.main.css this is what we are
279:14 - going to use and
279:16 - there are multiple ways there are
279:17 - multiple ways you can do it
279:19 - let's see
279:22 - let's try to configure it so
279:24 - [Music]
279:26 - okay i have to
279:28 - i want you to copy the path actually so
279:31 - here bootstrap main dot css
279:35 - i'll copy
279:36 - relative path
279:39 - and
279:41 - i'll show you both ways
279:45 - first way is you can actually add this
279:48 - uh css into your global global styling
279:50 - how you can do that so you can use
279:52 - import
279:53 - sorry add that import
279:55 - and then you can do
279:57 - this
279:58 - you don't have to actually give path
279:59 - like this you can just say
280:02 - build
280:03 - this one
280:04 - and of course change
280:07 - pst css extra
280:10 - wind.css and
280:13 - let's try to see if this one works so
280:17 - and then we will show you another way
280:18 - which is uh not adding to your global
280:22 - style css but in another way
280:27 - we'll be able to see the changes because
280:28 - of course styling of your page will
280:30 - change because of
280:32 - the font which is used by bootstrap
280:46 - okay let's
280:49 - there's some error
280:50 - no such file directory open bootstrap
280:53 - dst okay
280:55 - what is
280:57 - along here probably
281:00 - let's remove this
281:03 - and let's see our build
281:06 - okay now it is compiled successfully so
281:08 - let's
281:09 - see okay so you can see uh
281:11 - i think you might have seen this page
281:14 - you can see this page and this page
281:16 - so this one has bootstrap 5 which is
281:19 - installed and now applicable to
281:21 - your application this doesn't has any
281:23 - css so this is how you can verify if
281:25 - bootstrap is added to your application
281:27 - or not
281:29 - so
281:31 - let me show you another way to add
281:32 - bootstrap or any other css so it's it's
281:34 - something which you can do with any css
281:37 - any
281:38 - css which you have installed using npm
281:40 - so it's not only for bootstrap so
281:43 - this this was the first way where you
281:44 - can actually go ahead and add it into
281:46 - style.css
281:47 - or css whatever
281:49 - type which you are using
281:51 - so let's stop the server because in
281:53 - another way we are going to add this
281:55 - into our
281:56 - angular.json
281:59 - so i'll comment this out so we don't
282:01 - have the css available here
282:03 - and i can go to angular.json
282:05 - angular.json has many properties there
282:07 - is one property called styles
282:09 - and i can go here and
282:12 - i can apply uh just it's an array
282:14 - remember and i can just go ahead and add
282:15 - this part
282:17 - and while adding this path here you have
282:19 - to add with node modules remember this
282:32 - okay good strap
282:35 - paste
282:37 - css
282:38 - and strap main.css
282:41 - and
282:43 - if i'm not wrong bootstrap also gives
282:45 - you
282:46 - satisfy you can also use that let's see
282:49 - tsd css
282:53 - and i think you will have here it is so
282:55 - in case you want to add or use sas files
282:58 - this is sas files are available as well
283:00 - so rather than actually taking the path
283:02 - from list you will be taking it from
283:04 - scss folder that's that's the difference
283:06 - and now let's run it again
283:30 - and then
283:31 - and
283:33 - you can see uh of course let's see the
283:36 - difference right so you have this is
283:37 - with bootstrap five and this is without
283:39 - any style being added to our application
283:42 - so right now of course as of today nzx
283:44 - bootstrap ng bootstrap do both are not
283:46 - supported with angular 13 but in future
283:49 - they will so
283:50 - uh the only difference would be you have
283:52 - to run that ngat command and you don't
283:55 - have to
283:56 - set this conf this uh changes which we
283:58 - did right now right so we added this to
284:01 - styles array you don't have to do this
284:03 - manually
284:04 - that will be taken care by ngat command
284:06 - which we used previously
284:10 - so now we know how to use
284:12 - this
284:13 - as css so let's try to actually apply
284:15 - some css here
284:17 - class
284:19 - table
284:28 - so
284:30 - let me close this now uh you can see
284:32 - this table is uh actually having this
284:36 - new class
284:37 - and
284:38 - we can
284:39 - also see one more thing uh let's try to
284:42 - minimize
284:45 - so we have
284:47 - you can see
284:49 - as we added bootstrap now our
284:51 - application is responsive so it is
284:54 - changing the width of your table
284:56 - based on your screen size
284:58 - so you don't have to do that manually
284:59 - anymore i mean you don't have to add
285:01 - extra styles uh to make your application
285:04 - responsive bootstrap will take care of
285:05 - it for you
285:11 - in this video we are going to talk about
285:13 - lifecycle looks so
285:15 - we'll talk about what lifecycle looks is
285:18 - and then what are the different
285:19 - lifecycle looks which exist
285:21 - for uh
285:22 - your components
285:24 - so let's see what is component uh or
285:27 - lifecycle locus
285:28 - so
285:29 - in angular what we are going to create
285:31 - is we are going to of course go ahead
285:32 - and create a lot of components
285:34 - now all component needs to go through
285:37 - some life cycle looks
285:39 - or you can say some events which it
285:42 - needs to go through
285:46 - this will happen this entire
285:49 - events or you can say hooks will happen
285:51 - for each and every component
285:54 - so in
285:55 - other technologies also in other
285:57 - frameworks also you have the concept of
285:59 - hooks
286:00 - and same applies to angular
286:03 - in
286:04 - dotnet in case you are coming from
286:05 - dotnet uh
286:06 - earlier in older days it has it had
286:09 - something called page lifecycle events
286:11 - which is
286:12 - which is kind of similar thing which we
286:13 - have here so if you talk about each uh
286:15 - the component of a com sorry if you talk
286:18 - about event or lifecycle hook for a
286:20 - component
286:21 - so somewhere it starts
286:24 - creating a new instance for component
286:25 - and at the end it will be destroyed so
286:28 - from start for from creating an instance
286:30 - to destroying an instance this is how
286:32 - your entire life cycle looks looks like
286:36 - and uh
286:37 - there are
286:38 - a few live stuff looks uh sorry these
286:40 - are the life cycle looks which are
286:42 - mentioned here so you have all changes
286:44 - only need do check
286:46 - after content in it checked we need
286:48 - checked and then destroyed so let's uh
286:50 - go through each of them one by one
286:54 - and
286:57 - yeah
286:58 - and you might have already noticed that
287:00 - ng on init lifecycle looks already exist
287:03 - on your rooms component so if you see
287:05 - this
287:06 - there is ng on in it
287:08 - so in angular for every lifecycle looks
287:10 - there is an interface so for example
287:12 - ngon in it has an interface called on
287:15 - init so if i have destroy or ng on
287:17 - destroy so there is an event called uh
287:19 - or an interface called on destroy you
287:22 - can just go to this event and uh same
287:24 - fpl or control click and you will go
287:27 - inside this to see which event is that
287:29 - so ngo in it in earlier days it was
287:32 - optional but uh
287:34 - make sure that you implement the
287:35 - interface
287:36 - whenever
287:37 - you are
287:38 - trying to access some of the lifecycle
287:42 - looks of your component so let's see
287:44 - what you can achieve using uh ngo net
287:47 - lifecycle load but before we go ahead
287:49 - and do that before we actually move
287:53 - so before sorry
287:55 - before we go ahead and move do that
287:57 - before we talk about ngon in it
288:00 - here
288:02 - you will notice that there is also a
288:03 - constructor which is available so it
288:04 - means before even your ngoninet event
288:07 - gets called
288:09 - your component needs to be initialized
288:11 - so this is where this happens and when
288:13 - in
288:15 - when it happens actually on your page
288:18 - whenever it gets
288:20 - rendered on your view at that time
288:22 - constructor will be called and
288:23 - just after the constructor is finished
288:25 - your ng on init lifecycle
288:27 - ngon in it lifecycle look will be called
288:30 - so people do uh get confused okay if
288:33 - both are kind of same that okay once my
288:36 - component is initialized i can just hook
288:38 - into ng or unit lifecycle look
288:40 - why what is the difference between
288:42 - constructor i mean we are we are saying
288:43 - that whenever a instance is created a
288:45 - constructor is called
288:47 - remember ngoninit is where your you
288:50 - should write
288:51 - your logic
288:52 - constructor should be used only in case
288:54 - you want to inject some services this
288:57 - will become this will be coming later on
288:59 - when we talk about services
289:00 - but let's just keep that in mind in in
289:03 - your mind
289:04 - constructors should not have any
289:06 - blocking code so in case you are writing
289:08 - some blocking code in your constructor
289:10 - it is wrong that code should be part of
289:12 - ngoninet
289:13 - so let's see uh what we can achieve
289:15 - using ngon unit lifecycle look and um
289:19 - to see this what we will do is we will
289:21 - just move some
289:22 - property declaration
289:24 - from here to ngoninet
289:30 - so here i am saying okay this
289:32 - room list is equals to
289:35 - empty and then in n g on it i will say
289:37 - this dot
289:39 - room list is equals to this records
289:41 - right so we are just moving uh the
289:44 - entire array here
289:46 - inside ngo in it so in case you have any
289:49 - let's say you want to load some data
289:51 - from your api and you want to display uh
289:53 - that data on your view
289:56 - you should write that code as part of
289:57 - ngo net lifecycle load
290:00 - this should not go into constructor or
290:01 - any other life cycle so ngo engineering
290:03 - is something where we are saying that
290:04 - okay now my component is initialized
290:06 - and
290:07 - just after my component is initialized
290:09 - you want to do anything
290:11 - just add that code into ng on in it life
290:13 - cycle look so let's go ahead and verify
290:15 - our view
290:18 - and here we are i mean there is no
290:20 - changes
290:22 - and our code is compiled as well so this
290:24 - is all about engineering we will be
290:25 - using utilizing
290:28 - we will be utilizing ng on it like cycle
290:29 - looks in future whenever we
290:31 - start
290:32 - implementing our services and start
290:34 - getting the data from the api so we'll
290:36 - see some use cases where we'll be using
290:38 - it
290:47 - now let's go back and talk about other
290:49 - life cycle looks
290:50 - so you might be wondering i mean i said
290:52 - ng on in it is the first life cycle
290:54 - event then why i have mentioned it
290:56 - second year
290:57 - of course that's
290:59 - that should be the question in your mind
291:01 - right now so we have ng on changes which
291:03 - is before ngon in it remember in this
291:06 - lifecycle looks constructor is the first
291:07 - one which will be called every for every
291:09 - component once they are initialized so
291:11 - we have engine changes before ngonin and
291:14 - then we have ng do check
291:16 - let's uh go ahead and talk about uh
291:20 - so
291:22 - there are two topics which will go
291:23 - parallely here so lifecycle looks and
291:26 - there will be something known as
291:27 - component communication this these two
291:29 - topics i generally take it partly
291:31 - because they
291:32 - they need each other i mean they uh they
291:34 - needs to be understand uh while talking
291:36 - about lifecycle looks and then you uh
291:38 - needs to know about component lifecycle
291:40 - sorry component interaction as well
291:42 - so this ng on changes actually uh is
291:44 - related to one of the
291:46 - ways you can do component communication
291:49 - let me just go back and
291:51 - talk a little bit about component
291:52 - communication because we will be using
291:55 - uh component communication in our
291:58 - code right now
292:00 - so what we will be talking about here is
292:02 - just theory i mean we are going to see
292:04 - the examples so
292:06 - let's introduce and then there are ways
292:08 - for component communication we will be
292:10 - doing this parallel right so ways for
292:11 - component communication we will relate
292:13 - to the component lifecycle look so in
292:14 - case you write your real-time code you
292:16 - know what needs to be done rather than
292:18 - just doing something blindly
292:22 - so
292:23 - why we need component communication
292:25 - in case you are going to create an
292:27 - entire enterprise application there will
292:28 - be scenarios that you need to
292:31 - interact between two different
292:33 - components right now we have seen that
292:35 - we right now we have two components app
292:36 - component and your rooms component
292:39 - what in case they want to actually
292:40 - interact with each other how we can do
292:42 - that that's what communication uh
292:44 - component communication is all about
292:46 - we also said that
292:48 - in future what will be
292:50 - we also said in future what we will be
292:52 - doing is we will be creating a lot of
292:54 - html reusable html tags that's what
292:56 - component is what in case
292:58 - i want to create those
293:01 - reusable tags and then i can use it
293:02 - anywhere
293:04 - who will be passing the data of course
293:06 - someone has to interact with that
293:07 - particular component right that's a
293:08 - reusable component so it cannot contain
293:11 - its own information it has to rely on
293:13 - some information which is coming from
293:14 - somewhere else that's your another
293:16 - component
293:19 - this is component communication
293:22 - so multiple components interacting with
293:24 - each other but there are multiple ways
293:25 - now
293:26 - so there are three ways which we
293:28 - generally use so first is using input
293:29 - and output second is using view children
293:31 - or content children sorry we child or
293:34 - contention and third one is using
293:35 - service
293:37 - now
293:38 - as we talk about ng on changes we are
293:40 - going to use the component communication
293:42 - using input and output
293:44 - so let's try to create a scenario first
293:46 - so in this uh application right now if
293:49 - you see
293:50 - now we uh you are also going to learn
293:52 - how you can actually split your big
293:54 - components into smaller components
293:57 - so if you see this html
293:59 - uh which has like like 43 lines of code
294:02 - right now 43 lines of html
294:05 - if you see
294:06 - if you think about this table
294:09 - i think this table can be another
294:10 - component
294:12 - the reason being
294:13 - i can just remove this logic and keep my
294:16 - component smaller that's what we uh
294:18 - often do right whenever we talk about
294:20 - single responsibility
294:22 - and this has nothing to do with rooms
294:24 - right i can actually go ahead and
294:25 - display a lot of information and then i
294:27 - can just keep this logic separate
294:30 - also
294:31 - let's say we want to display this room's
294:33 - list at multiple locations or multiple
294:37 - pages
294:38 - what you will be doing
294:40 - is copy pasting a good idea the answer
294:42 - is no
294:43 - what we can do we can actually create a
294:44 - reusable html tag put this somewhere
294:47 - else and just pass the data that's it
294:50 - that's what we are going to do now
294:51 - so let's go ahead and create a component
294:54 - and
294:55 - as this component is related to rooms
294:57 - i'll put this inside rooms i'll call it
295:01 - call it as roomslist so here
295:03 - in case you want to create this
295:05 - component inside this particular folder
295:06 - i can just go ahead and say open in
295:08 - integrate terminal
295:09 - and
295:11 - to create a new component we already
295:13 - learned the command so i can say ng
295:15 - g c which is ng generate component
295:18 - and then i can say rooms hyphen list
295:23 - i'm not sure why i keep making the
295:26 - mistake of
295:28 - rooms
295:34 - now so now we have this rooms list
295:36 - folder and
295:38 - all four files aspects earlier now let's
295:40 - do uh one thing so we will
295:43 - remove this
295:45 - logic from here
295:47 - and put it here
295:49 - so my entire table uh logic i mean to
295:52 - render the table or render the rooms
295:55 - list is not part of it i mean it's not
295:57 - part of rooms company it's part of my
296:00 - room's list company makes sense right i
296:01 - mean it it even tells you what it is
296:04 - supposed to do it is supposed to list
296:05 - the rooms
296:07 - now let's talk about the data so we have
296:09 - okay rooms list and
296:12 - we don't have the data right now so we
296:14 - want to pass the data so let's see how
296:15 - we can do that
296:17 - as we said we'll be using input and
296:18 - output
296:19 - so now let's try to understand both
296:25 - here
296:26 - we want to get
296:28 - the data
296:30 - which means i want to get the input so
296:32 - what we will be doing is we will be
296:34 - creating an input using accurate input
296:37 - which is a decorator
296:39 - sorry
296:41 - which is a decorator and i can call it
296:44 - as rooms
296:46 - which is type of
296:52 - rooms list array
296:54 - is equals to i mean i have an empty
296:56 - error by default
296:57 - so we are saying
296:59 - make this rooms property as an valid
297:02 - html property on this html element this
297:06 - is what we are doing here remember
297:08 - whenever you add input tag it means this
297:10 - property rooms becomes and
297:13 - becomes an property on top of this html
297:16 - tag so we can pass the data
297:20 - now
297:22 - few need a few things need to be changed
297:24 - so rather than rooms list i will be
297:26 - saying rooms
297:27 - and that's it so now all the errors are
297:29 - gone
297:31 - now let's try to use this component in
297:33 - my parent component
297:34 - this is where we want to display that
297:36 - component so we know the html tag yes we
297:39 - do so i'll copy this
297:42 - html tag here
297:46 - and as i said the rooms is the valid
297:48 - property which is added here so i'll say
297:50 - rooms you can see uh due to angular
297:52 - language service we are getting in
297:53 - intelligence is equals to now we know
297:56 - that the property which is available
297:58 - here is called
298:01 - rooms
298:05 - room list
298:08 - and we can close this html tag so
298:12 - this is it now let's save this and see
298:15 - if it is already compiled because our
298:17 - application is
298:18 - really small and see here so you can see
298:21 - okay now you have your entire data
298:23 - available but let's verify if it's true
298:26 - right i mean if it's actually coming
298:28 - from the rooms list
298:29 - and you can see here so this is your
298:32 - hotel inventory management and hyphen
298:34 - rooms list this is the new html tag
298:36 - which we created but where is the css
298:38 - gone let's go ahead and try to see that
298:45 - and we have rooms class table
298:58 - ah okay sorry
299:00 - if you remember we had added add odd or
299:02 - even style so you can see odd and even
299:05 - is actually added here so it is part of
299:08 - room component how is this happening we
299:10 - will talk about it there is there is
299:12 - something called encapsulation which we
299:14 - need to talk about
299:16 - currently what we can do is you we can
299:18 - actually add it inside rooms list or
299:21 - we can add
299:23 - in our global style sheet so let's do
299:25 - that
299:27 - and once it is added in global it is
299:28 - available so
299:30 - that's that's it that's this is how your
299:32 - you can pass input to your
299:35 - component now what we made it what we
299:37 - made possible right now so if you think
299:39 - about it what we did is we created a
299:40 - reusable component
299:42 - which doesn't need to know from where my
299:44 - data is coming anyone can pass the data
299:47 - by using this property to this
299:49 - particular component so i'm not
299:51 - restricted to use
299:53 - list component only at certain places i
299:55 - can use it anywhere i want because this
299:57 - rooms component
299:59 - only contains information about how to
300:01 - render things not how to get the data or
300:04 - how to drive the data
300:07 - in
300:08 - real world application we call this
300:09 - relationship between
300:11 - this two component
300:13 - rooms component and rooms list component
300:15 - as parent and child
300:17 - you can also call this com relationship
300:20 - as
300:21 - smart component dumb component so this
300:23 - is for smart component which knows
300:25 - from where to get the data
300:27 - and some
300:30 - some action which needs to be performed
300:32 - and this is your dumb component which
300:34 - doesn't know anything it just needs to
300:36 - know how what to render that's it
300:39 - so parent child
300:41 - smart component dump component these are
300:43 - the things which you uh
300:46 - if you come across these things this is
300:48 - what you mean
300:55 - in your real-time enterprise application
300:57 - try to split your components to as
301:00 - smallest level as possible
301:02 - don't have a
301:04 - component with like thousands of html or
301:06 - thousands lines of ts try to split them
301:09 - as much as possible generalize them
301:12 - and uh
301:13 - try to have like small component for
301:15 - each logic so here we knew that okay
301:17 - there is a rooms list which needs to be
301:19 - created so what we did is we created
301:21 - another room space component which will
301:23 - take care of rendering those things
301:25 - now
301:28 - in real time application now let's uh
301:30 - let's talk about the term right smart
301:31 - component of component
301:34 - in real time uh applications now your
301:37 - child component may need to
301:40 - do some action
301:42 - for example so let's say uh we want to
301:44 - actually
301:46 - we have this rooms list now
301:48 - i want to give an action button at the
301:50 - end and i want to say
301:51 - book this room or
301:54 - uh
301:54 - marks it mark it as sold right so this
301:56 - is something so this hotel becomes not
301:59 - available
302:02 - we are saying this particular component
302:04 - is child component or dumb component so
302:06 - it cannot take action on its own
302:09 - simple example real-time scenario of
302:11 - course if you have a kid what you what
302:13 - kids do right they come to you and say
302:15 - okay i need this thing and then you do
302:17 - it right and you don't give money to
302:19 - your kid and say go ahead and buy it
302:21 - until of course they they become um
302:25 - they become smart right i mean they know
302:27 - how to deal with things so same same
302:29 - concept is applied here so now as my
302:32 - child component or my dumb component
302:34 - doesn't know or doesn't need to know how
302:36 - to do stuffs what it can do
302:39 - in case it needs to perform some action
302:41 - it can ask
302:42 - parent it can ask the smart component to
302:45 - do stuffs
302:46 - this is where we need to
302:48 - pass the data back from child to parent
302:50 - component how to achieve that
302:55 - of course output right so we are saying
302:58 - input can get the data output can
303:00 - give out the data so let's create an
303:02 - output and outputs are actually an event
303:05 - so
303:06 - let's right now let's create an event
303:09 - called
303:09 - room selected so i we will click on this
303:12 - room
303:13 - we'll say okay select this room and this
303:15 - information will be passed to your
303:16 - parent and your parent can do anything
303:18 - whether
303:19 - this room needs to be worked this room
303:21 - needs to be marked as sold this room
303:22 - needs to be deleted right i mean let's
303:25 - say uh
303:27 - now this room is used for some other
303:28 - purpose so this room is not available
303:30 - anymore so what we will do is we will
303:32 - create an output
303:33 - decorator we will use an output
303:34 - decorator and then we are saying the
303:36 - event name is rooms
303:38 - room selected
303:40 - or we can say selected
303:43 - room
303:44 - and
303:45 - it it needs to be an event so there is a
303:47 - new event emitter class which is
303:49 - available in angular core
303:51 - which needs to be imported so we can say
303:53 - new event emitter and then we have to
303:55 - tell what kind of data we want to send
303:57 - back to parent so here the kind of data
303:59 - we have is room list
304:02 - if
304:03 - it needs to be multiple of course you
304:04 - can put an array but right now i want to
304:06 - just select send the selected room
304:11 - so done here so now what we will do is
304:13 - we will add an action here and
304:17 - i'll create an header and then say this
304:19 - is
304:20 - select room
304:25 - and inside td
304:28 - we will add a button
304:29 - and it's auto
304:31 - so we can say button class and vdn video
304:34 - primary is a
304:35 - is a bootstrap class
304:37 - and
304:38 - this is the function which will
304:39 - implement select room so let's go ahead
304:41 - and see and this is the room object
304:43 - which we which it will get once you
304:45 - click on this particular room
304:47 - so let's go back to typescript and add
304:50 - this function which is supposed to get
304:54 - sorry
304:56 - which is supposed to get a room list and
304:59 - then once
305:00 - this room list or the room is selected
305:04 - we want to emit this data back to parent
305:06 - so this this line of code selected room
305:09 - dot embed will
305:10 - give this data back to the parent who
305:13 - has
305:15 - remember who has actually
305:17 - uh subscribed to this event it's not
305:19 - something like i mean if i'm not
305:21 - subscribing to this event this won't be
305:23 - available so let's go ahead and see that
305:24 - part of us see that part of the code so
305:27 - here this is our
305:28 - okay
305:31 - button
305:31 - [Music]
305:36 - it was not closed so
305:39 - now let's go back to the parent which is
305:41 - this one
305:42 - and let's implement the event so we know
305:45 - the name selected room this is the event
305:47 - name
305:48 - and i'll
305:50 - write a local function which selects the
305:53 - rooms
305:54 - so we can say select row
305:57 - and this is something which is not
305:58 - implemented right now let's go ahead and
306:00 - implement
306:01 - so here
306:03 - what i will do is uh first let's
306:06 - add a console.log
306:09 - so it's a selected room which takes a
306:11 - room and
306:14 - we print console.log room
306:18 - save this
306:22 - here now as we are getting some data we
306:24 - have to actually pass some information
306:26 - here so here you have to pass something
306:29 - called as dollar event
306:31 - this always remains dollar event so this
306:33 - is an event which will be received from
306:35 - my child component
306:36 - and here you can specify that okay uh
306:39 - this event uh which will be sending me
306:42 - the data of this type
306:44 - so this room um
306:46 - this this data will be type of room list
306:50 - so far so good
306:52 - let's see our build just completed
306:55 - let's see our application now we have
306:57 - the select button you can see when you
306:59 - hover it becomes blue
307:01 - right so
307:03 - let's go to console and
307:05 - let's
307:07 - delete
307:08 - and let's click on select
307:11 - and you can see okay now you have this
307:13 - rooms component.ts line number 68 this
307:16 - is where this information is coming
307:18 - right so you have your amenities
307:19 - checking time checkout time and
307:21 - whichever row you select you get that
307:24 - row specific data sent to your parent
307:26 - so this is how your output works
307:30 - now uh we can actually do something more
307:32 - with this i can say okay this is
307:34 - selected
307:36 - room which is type of room list
307:39 - and we as we are using strict mode i
307:41 - just add this so we don't get the error
307:44 - and now
307:45 - here
307:48 - uh let's do it just before above the
307:50 - table so i can say this
307:52 - div
307:54 - is
307:55 - awesome
307:57 - and we will use star ng if
308:01 - so we'll just display it in case
308:03 - selected rooms exist
308:05 - and then we can say okay this selected
308:07 - room
308:08 - or let's uh
308:10 - use json pipeline
308:13 - to see what information we have
308:15 - available
308:19 - let's go back and
308:21 - let's click on select
308:32 - because there which is not saved looks
308:34 - like
308:57 - i think some
308:58 - okay
309:00 - looks like something is not getting
309:02 - recompiled okay it is not
309:05 - so somehow
309:07 - now it is done
309:09 - let's click on select
309:15 - ah
309:17 - my bad so
309:18 - we have to assign this value right so
309:20 - this dot selected room is equal to
309:24 - and once we have assigned this value now
309:26 - let's go ahead and click on selected
309:27 - room you can see the information is
309:29 - getting changed based on what data you
309:31 - emit from your child component so this
309:33 - is how you can
309:34 - communicate between
309:36 - two components child and parent or smart
309:38 - component dum component using input and
309:41 - output
309:42 - now how it is related to
309:44 - ng on changes event because that's why
309:46 - we did this
309:48 - we'll see that next
309:52 - so far we have seen
309:54 - the ng on init lifecycle look and we
309:57 - also saw how we can
309:59 - do component communication using input
310:01 - and output
310:02 - and we did that because we wanted to
310:04 - talk about ng on changes lifecycle bug
310:07 - which is next so uh let's go ahead and
310:09 - do that and while
310:12 - talking about ng on changes we will also
310:14 - talk about
310:15 - one
310:16 - very important concept which is known as
310:19 - change detection
310:22 - in this is like really important topic
310:24 - even in interviews as well a lot of
310:26 - questions may be asked uh related to
310:29 - related to change detection so let's go
310:31 - ahead and
310:32 - go in depth and talk about how change
310:35 - detection works in angular and
310:37 - how ng on changes helps us to actually
310:40 - improve the performance so let's go
310:41 - ahead and do that
310:48 - so if you see our app right now what we
310:49 - have is we have a child component which
310:51 - is let me just close this
310:56 - we have a parent component called rooms
310:58 - component and then we have a child
311:00 - component called rooms list
311:02 - so this is and uh then we have a top
311:05 - root level parent component which is
311:07 - abnormal
311:09 - whenever we do some action
311:12 - the data needs to be updated right and
311:14 - the data our view needs to be updated if
311:15 - we talk about not the data
311:17 - how that happens so angular
311:20 - does it via change direction
311:22 - so it is actually internally handled by
311:25 - angular but there are multiple ways you
311:27 - can actually um
311:28 - [Music]
311:30 - change uh change direction for your
311:32 - component so let's go ahead and talk
311:34 - about change section first i'll go to
311:36 - the app so this is our app
311:40 - and i'm going to enable
312:15 - it's climbing on
312:17 - okay
312:18 - let's see
312:34 - and we can go to
312:38 - panels here
312:40 - so we have style computer layout
312:44 - and there is rendering on
312:51 - let me just open it in another tab
313:04 - and
313:05 - show rendering
313:07 - should be here compact points now
313:10 - computer layout
313:12 - [Music]
313:16 - okay let's open this in chrome
313:29 - and let's open
313:32 - dev tools so you can press f12 or just
313:35 - right click
313:36 - and say inspect
313:48 - okay so this is what i was looking at so
313:50 - there is a tab called rendering which
313:52 - you can see and let's click on
313:55 - pen flashing this is the property which
313:57 - we i was looking at and let's click here
314:02 - so some green uh borders you can see
314:04 - right now what is this green border so
314:07 - this green borders are actually saying
314:08 - these are the dom elements which are
314:10 - getting changed
314:12 - are we changing everything the answer is
314:14 - no we are not changing everything but
314:15 - still uh whenever you click on some or
314:18 - you perform some action
314:20 - angular detect there are some changes on
314:22 - your view and your view needs to be
314:24 - updated
314:25 - this is by default which happens inside
314:26 - angular
314:28 - but there's components which doesn't
314:30 - need to be changed for example this
314:31 - table right
314:32 - did we added or removed anything here
314:35 - the answer is no we did not right so
314:38 - uh this table should not change
314:41 - why it is getting changed even if i
314:42 - click on a toggle which is outside
314:45 - of
314:46 - like this is something which is
314:47 - available on our parent company if i'm
314:49 - not wrong yeah
314:51 - uh this is a uh sorry this is on rooms
314:53 - component if uh
314:55 - yeah so this is on rooms component and
314:57 - then it is also updating the rooms list
314:59 - component how is that possible i mean
315:00 - i'm not changing anything but it is
315:02 - getting updated
315:03 - consider like right now we just have two
315:05 - components but in case you have a lot of
315:07 - components on your view what will happen
315:10 - so change direction will run for each
315:11 - and every component
315:13 - can we
315:14 - avoid that the answer is yes we can so
315:17 - let's see how we can actually optimize
315:18 - this uh change uh detection strategy
315:21 - which which is default uh to change
315:24 - detect changes for each component
315:26 - remember the way it runs is let me just
315:28 - go back to uh dev tools
315:31 - and i'll go to elements here
315:35 - and there is angular dev tools also
315:38 - which is available now you can actually
315:39 - see it here
315:40 - so let's say
315:42 - down
315:43 - on tree so this is your ts3 structure
315:45 - right now let me just zoom in
315:51 - so this is our tree structure right now
315:53 - so we have root then we have rooms and
315:55 - rooms list so in case someone performs
315:58 - action here it
315:59 - it will of course uh
316:01 - send an event to the parent and parent
316:03 - will start running change direction for
316:06 - each and every component
316:08 - so let's say i have rooms and then i
316:10 - have
316:11 - let's say employee or let's say
316:14 - there is a there is another view which
316:16 - is to add rooms time
316:17 - so what will happen is the change
316:19 - direction will run for both even though
316:21 - i am changing only rooms
316:22 - or i am changing something in rooms
316:26 - by using change section strategy you can
316:28 - actually optimize this behavior let's go
316:29 - ahead and see that
316:38 - so first i mean there are some rules
316:41 - before you can actually go ahead and
316:43 - apply change detection strategy to your
316:46 - component
316:47 - so here you can say
316:50 - change direction this is the property
316:52 - and
316:53 - there are two modes by default it's on
316:56 - its default let me just import change
316:58 - instruction strategy first so we
317:00 - will get this intelligence so you have
317:02 - default which is default when you when
317:05 - we don't change anything
317:06 - so any event will cause the entire
317:10 - change detection to run for your
317:11 - application
317:13 - and then there is on push before you go
317:15 - ahead and use onpush there are some
317:17 - requirements which you have to make
317:19 - which you have to meet
317:21 - on push change friction strategy can be
317:23 - only applied in case
317:26 - i am not modifying some data internally
317:29 - in this component
317:30 - how you can achieve it by using input
317:33 - and output
317:34 - in future you can also uh
317:37 - apply the same strategy in case you use
317:39 - some
317:40 - state management technique for example
317:42 - if you are using ngrx or if you are
317:44 - using any other state management library
317:47 - in that case also you can move it to one
317:48 - push right now the state management part
317:50 - is out of scope of this particular uh
317:53 - course
317:54 - so here we are going to apply it on
317:57 - rooms list component because it uses
318:00 - input and output so it doesn't rely or
318:02 - it doesn't change the data internally it
318:04 - relies the data which is coming from
318:06 - outside so
318:07 - it always knows that if in case the data
318:09 - is getting changed
318:10 - so here let's move on to on push and
318:15 - to
318:16 - now to actually uh show you the
318:18 - difference
318:20 - we have to do one more thing
318:21 - let's see that
318:28 - so what we will do is we will write
318:30 - some small code to add a new record or
318:34 - to add a new room number let's go ahead
318:36 - and do that it's just a small button
318:40 - so let's do it here
318:46 - so this is div
318:50 - and then we have button and i'll call it
318:52 - as add room
318:54 - [Music]
318:56 - and
318:57 - we will right now uh
319:00 - pass the static data so
319:01 - [Music]
319:03 - let's say this is add room
319:07 - let's go ahead and
319:09 - again spelling mistake
319:16 - and let's go back to ts and here
319:19 - we will add a new room
319:23 - so we'll create a room first so it's a
319:25 - const
319:26 - room
319:27 - which is type of room list is equals to
319:30 - and then we'll say um
319:34 - let's see what is the properties room
319:36 - number
319:37 - four
319:38 - and then there are room type there is
319:42 - amenities
319:44 - there is price
319:46 - there is
319:47 - photo so we'll just copy the one from
319:50 - the existing property
319:52 - and there's second time and then you
319:55 - have checkup time and then you have
319:57 - reading okay so this is our new room
319:59 - data which is available let's copy the
320:02 - photos property here
320:10 - because all the properties are required
320:12 - as of now so
320:13 - [Music]
320:15 - we have to pass each and every property
320:17 - and
320:18 - after this
320:22 - i'll say this dot room list dot push so
320:25 - let me just do this room list dot push
320:27 - and
320:28 - let's go back here and comment this out
320:30 - so we are saying
320:31 - right now my change detection strategy
320:34 - is default so it means any action is
320:37 - performed just go ahead and
320:39 - run the change section for everyone
320:41 - let's click on add room
320:46 - see room list
320:48 - chrome list push and then you have
320:52 - chrome list available here so should
320:55 - work let's see
321:01 - let me just save this file again because
321:04 - probably it is happening because it is
321:05 - not able to identify
321:07 - the change direction strategy
321:18 - okay let's see if there is any error
321:22 - let's
321:24 - ohms component.ds
321:28 - and what we have is this dot rooms list
321:37 - so rooms list we have
321:40 - okay we already have the record
321:41 - available here one two three four is
321:44 - added twice
321:45 - so it should work
321:49 - okay i just want getting added let's see
321:51 - let's go ahead and check that
322:09 - rooms list
322:11 - okay so
322:13 - we forgot to remove this pipe
322:15 - slice remember so zero to three so we
322:17 - can only display three records so even
322:19 - though more records are available
322:21 - and let's try to click on that room so
322:24 - you can see it is working fine i mean
322:25 - whenever you click on add room the
322:27 - record is getting added now let's keep
322:30 - this change this code as as it is and
322:33 - let's go ahead and apply change
322:35 - direction here because this is really
322:36 - important i mean
322:38 - you uh you might have understood now
322:39 - that okay why to use onpushing strategy
322:42 - because we are not modifying some data
322:44 - here
322:46 - and
322:47 - the data is actually coming from outside
322:49 - but there is one more important concept
322:51 - which we need to understand so let's go
322:53 - and see
322:54 - now you can see actually i am clicking
322:56 - on add room and nothing is happening but
322:58 - let's see a magic so i'll go to
323:00 - of course dev tools
323:02 - and let's click
323:04 - add a break point here
323:06 - click on add room
323:20 - okay
323:20 - so you
323:23 - you can see you your room list right now
323:26 - here
323:29 - okay somehow it is not able to show
323:34 - click
323:36 - add in the watch
323:38 - and let's see what is available here so
323:40 - you can see okay your
323:41 - uh
323:42 - data has
323:44 - f
323:45 - four records here so you have one two
323:47 - three four and
323:49 - let's move on but here you still have
323:51 - three records why so because now my
323:55 - component which actually is or change
323:58 - traction strategy on push there is one
324:00 - more requirement which we have to which
324:02 - we have to meet
324:04 - here let's see what is happening here
324:06 - so this room list property which is
324:08 - getting binded to my child component
324:11 - what we are doing right now we are
324:12 - actually pushing and record into this
324:14 - particular array
324:16 - so this is where you have to understand
324:18 - the concept of immutability
324:22 - whenever you are working with change
324:23 - direction strategy on push the data
324:25 - which you are trying to assign should
324:27 - not be mutable
324:29 - so it means when we apply a dot push
324:32 - what happens
324:34 - we actually change the room list
324:36 - property
324:38 - the concept of immutability says
324:40 - we should always return a new instance
324:43 - remember this because it is really
324:45 - important because uh in future if you
324:47 - try to use
324:48 - some state management technique and try
324:51 - to do the same stuff
324:52 - you have to understand uh the concept of
324:54 - immutability because entire state
324:56 - management thing works with immutability
324:59 - so here we are saying
325:00 - rather than actually modifying room list
325:03 - directly what we need to do is we have
325:06 - to return a new object every time we
325:08 - modify this instance it can be an object
325:10 - it can be a array whatever but in case
325:13 - you are trying to modify it
325:15 - return a new instance
325:17 - how we can do that so there are
325:20 - i'll show you a syntax which is very
325:22 - useful so you can say this dot
325:24 - room list
325:26 - now
325:27 - is equal to
325:29 - i can say uh dot dot dot three dots it
325:31 - is called spread operator so i am saying
325:35 - this dot
325:36 - room list which means
325:38 - keep the existing data and add the new
325:41 - record
325:43 - okay so this spread operator will say
325:45 - okay this in this array spread the
325:47 - previous data so in case i have three
325:49 - records all uh present already so three
325:53 - add three records plus the new record
325:55 - if i click it click on it again what
325:57 - will happen so it will have four records
325:59 - and the next record will be added which
326:01 - is fifth record
326:02 - let's try to run this and
326:05 - see how it works so let's click on add
326:07 - row
326:09 - and um of course i will remove
326:11 - breakpoints
326:14 - and you can see now a new record is
326:15 - available click on add room again a new
326:17 - record is available so now uh the
326:19 - advantage of using onpush let's click on
326:23 - toggle
326:27 - so here what will happen is
326:29 - now as my room's list component is
326:33 - on change section strategy on push
326:36 - the component also sorry the change
326:38 - section three will check okay if this
326:40 - component is marked as one push it means
326:42 - i have to only
326:43 - run the change direction in case
326:45 - something changes inside this component
326:47 - so here
326:52 - this property will make sure that we are
326:54 - not running
326:56 - the change detection for this particular
326:58 - component until and unless needed but
327:00 - keep this requirement in your mind first
327:03 - of course your component should not
327:05 - change the data internally
327:08 - second in case you are assigning or
327:10 - passing some data
327:12 - it should be
327:14 - uh it should actually come from the
327:16 - parent component right it should or it
327:18 - should not uh it should the property
327:21 - should be immutable so it means whenever
327:23 - i am assigning a new property or new
327:25 - value
327:26 - it's
327:27 - the whatever
327:28 - your let's say if you are using state
327:30 - management state management or like ngrx
327:32 - or ngxs they always return a new object
327:35 - whenever i try to modify something same
327:37 - up same concept applies here so in input
327:40 - property what i did earlier was i tried
327:42 - to use dot push
327:44 - what dot push did it modified the room
327:47 - list property
327:48 - so
327:49 - right it actually mutated the existing
327:52 - object but
327:54 - it should not do that it should be
327:56 - immutable it means whenever i am trying
327:58 - to apply some uh or pass some data to my
328:00 - child component and i have changed
328:02 - action strategy on push it means i have
328:05 - to apply a new instance or pass a new
328:07 - instance every time so what i did what
328:09 - we did we changed this
328:11 - code from
328:13 - this push method to this new uh
328:17 - code where we are using spread operator
328:19 - to make sure okay the existing data is
328:21 - already available in array and the new
328:22 - record gets added so this is related to
328:26 - change detection strategy on push
328:28 - now go ahead and
328:30 - let's uh go ahead and talk about ng on
328:32 - changes
328:35 - so i'll close this
328:36 - and
328:41 - here
328:43 - so on
328:45 - ngon changes property or ng on changes
328:47 - lifecycle look
328:49 - can be applied on a component which has
328:52 - input property remember this
328:55 - you cannot apply ng on changes let's
328:57 - look anywhere else
328:59 - you can only apply on component or a
329:01 - directive which has
329:03 - the input property right now our
329:05 - component
329:06 - rooms list component has input property
329:08 - so let's see how what it does and how it
329:10 - behaves
329:11 - so i am going to use in on changes
329:15 - and let's implement interface
329:21 - so uh you can see ngo changes
329:23 - get some property which is changes of
329:26 - type simple change
329:28 - and let's see what simple change is
329:31 - simple changes sorry simple change is
329:33 - also an interface so uh here you can see
329:36 - simple change
329:37 - so what it has is it's a it has a
329:39 - property name and
329:41 - some metadata so let's see what this
329:42 - metadata is simple change property so it
329:45 - will give you
329:48 - sorry
329:49 - it will give you some information like
329:52 - previous value next value so let's see
329:55 - here so you have previous value current
329:58 - value and whether it's a first change
330:01 - and there is a is first change property
330:03 - as well boolean property as well
330:05 - what we can achieve using this let's go
330:07 - ahead and do that
330:09 - here
330:11 - right now uh what we will do is we'll
330:13 - just write console.log to just
330:16 - figure out what's happening here so what
330:17 - actually ngon changes does
330:20 - let's inspect
330:24 - let's go to console
330:25 - so
330:26 - let's go to console and
330:28 - click on add room
330:32 - and see here so you have some data which
330:34 - says
330:36 - rooms simple change
330:38 - pre current value is like this one two
330:41 - three four four records previous value
330:43 - was one two three three records is it a
330:46 - first change you can also find that
330:48 - property so it says first change is
330:50 - false it means no it is not a first
330:51 - change it is because previously you can
330:54 - see there was one
330:56 - console log which is
330:57 - here
330:59 - at the top if it says the previous value
331:01 - you was
331:03 - like three records and
331:09 - let me just
331:11 - refresh this
331:14 - [Music]
331:17 - right so uh yeah so you have current
331:18 - value 3 and then
331:20 - we have previous value undefined here
331:23 - this is what i was looking at because
331:25 - whenever your component is initialized
331:26 - you will have of course previous value
331:28 - will be undefined and then you have
331:30 - first change as true because this is the
331:32 - first time the value is getting changed
331:34 - and then you have current value as three
331:35 - records and when i change it
331:38 - every time you change this
331:40 - uh you will get the records available
331:42 - here now what
331:44 - is the use case what where you can
331:45 - actually use it so let's say in case i
331:47 - want to modify some property after
331:50 - getting the input values you can do it
331:52 - using ngo changes so you can just assign
331:55 - it inside ngo changes but remember ngon
331:58 - changes will only work in case you have
332:00 - input properties and your input
332:01 - properties gets updated
332:03 - or you get a new value remember this new
332:05 - value not updated so it's like whenever
332:07 - you get a new value you will
332:09 - get uh the
332:12 - uh data inside ngo changes and based on
332:14 - that in case you want to write some
332:15 - logic you want to log these values you
332:17 - can go ahead and do that using ng on
332:19 - changes
332:22 - how you can access the properties so
332:24 - let's talk about that as well right now
332:26 - we have only one property called room
332:27 - list
332:28 - i'll add one more property
332:32 - and we will say this is
332:34 - title and
332:36 - i'll say this is a type string
332:39 - and
332:41 - i'll say this is default values blank
332:44 - let's go ahead and try uh to pass this
332:46 - value as well i'll say this is rooms and
332:48 - then we have
332:49 - our title
332:52 - is equals to
332:54 - room
332:55 - list and we want it to be in string so
332:58 - i'll just use single quotes
333:00 - so now with this string and let's find
333:03 - this value
333:05 - this title is equals to
333:07 - rather than doing this we'll see
333:09 - title
333:10 - here
333:14 - and we have rooms list available here
333:16 - the room list available here right so
333:17 - just add let's add as to
333:28 - okay so we have room list uh which is
333:30 - coming from outside so now let's go
333:32 - ahead and try to change this value
333:35 - uh and see what we get
333:37 - so i'll just write
333:39 - another
333:42 - one click of
333:44 - this toggle button right so we already
333:46 - have the struggle button i'll say this
333:48 - dot
333:50 - title so we have
333:53 - we have to define a top title property
333:55 - here so i'll just say okay this is
333:57 - again title
333:59 - equals to
334:02 - room
334:04 - list
334:06 - and let's use this title property
334:11 - here now rather than string we'll just
334:13 - pass this
334:14 - title property here
334:17 - and on toggle i'll just change this to
334:28 - and say rather than room list let's call
334:30 - it as rooms
334:31 - list
334:33 - and we just want to actually change the
334:35 - property and see what we get inside
334:36 - engine changes
334:38 - and let's install it
334:42 - and let's clear this console and let's
334:45 - click on toggle
334:47 - and we have rooms list available here so
334:48 - let's see what we get here so you can
334:50 - see right now only the value which is
334:52 - which got changed is title
334:55 - right so
334:56 - whenever you will change your input
334:59 - value
335:00 - that will come as property so here
335:03 - you can always do
335:09 - so if
335:12 - changes dot let's say title
335:16 - which means the title is changed
335:29 - okay index image
335:35 - so i'm saying if
335:37 - the title property has changed so uh you
335:40 - can do something like for example i can
335:42 - say this dot
335:43 - title
335:46 - and
335:48 - changes.title.com value
335:51 - let's apply to
335:52 - [Music]
335:56 - what we can do
335:58 - let's try to do the substring
336:01 - or two uppercase let's let's do
336:02 - uppercase current value dot uppercase
336:06 - you can see uh your property or value is
336:10 - updated to uppercase because of this and
336:12 - why it work because of course here we
336:14 - are assigning a new value right so we
336:15 - are saying this dot title equals to so
336:17 - this is uh this is what you can do or
336:20 - achieve using
336:21 - ng on changes let's take a look
336:24 - very useful in case you want to control
336:26 - what value needs to be updated whenever
336:28 - a new data is passed or you want to run
336:31 - you want to run change direction
336:32 - manually that is also possible using
336:34 - this probably we will see once we talk
336:36 - about
336:37 - services because we need to understand
336:39 - the services before we go ahead and use
336:41 - anything
336:42 - or any services available inside angular
336:45 - so this is uh this is it from engine
336:48 - genius so what are the concept which we
336:49 - learned
336:50 - because
336:51 - we learned about input and output we saw
336:53 - how you can pass data between two
336:55 - components or how you can do component
336:57 - communication
336:58 - using input and output then we also
337:00 - learned about change direction strategy
337:01 - which is really important and then we
337:03 - learned about ng on changes just because
337:05 - of engine changes we had to actually
337:07 - learn these two concepts very important
337:12 - now as we have learned about ngon unit
337:14 - and engine changes and now let's move on
337:17 - to the next lifecycle look which is ng
337:19 - do check
337:20 - now this lifecycle look is something
337:22 - which you will be
337:24 - hardly using but you have to understand
337:26 - or you have to know about what do check
337:29 - does so let's go ahead and see it in
337:31 - action
337:34 - so here uh i will just go ahead and add
337:37 - this on rooms component.these
337:41 - so here i'll say ok this is
337:43 - on
337:44 - [Music]
337:50 - search
337:57 - to check yeah so this is the interface
338:00 - which will be used for do check and then
338:02 - we have to implement
338:03 - the interface and just
338:10 - sometimes there is something wrong
338:17 - ng do check
338:20 - and this is the method which we need to
338:22 - implement
338:23 - so
338:27 - on changes i'll remove this
338:30 - and
338:40 - okay
338:41 - and here let's do console.log right now
338:43 - console.log and
338:46 - i'll say on changes is called
338:55 - okay
339:00 - cannot find name blue chip okay
339:02 - so let's add it in it should be imported
339:05 - from angular core so let's add it here
339:08 - and let's see the build and it's
339:09 - completed now
339:10 - let's go to the page
339:13 - and let's inspect the element uh let's
339:15 - go to the dev tools and here on
339:18 - console you can see there is a
339:22 - message says on changes is called
339:26 - now i'll just do one thing and keep it
339:29 - open here
339:33 - right
339:34 - i'll remove everything and let's
339:38 - invoke some events for example add room
339:40 - you can see on changes is called let's
339:42 - click on toggle you can see on changes
339:44 - is called
339:45 - you uh let's click on this select and
339:47 - you can see on changes is called so what
339:49 - this on changes event is so this on
339:52 - changes event is
339:54 - something which will be executed every
339:56 - time you raise any event
339:58 - irrespective of where this component is
340:02 - implemented or available
340:04 - in case it is active it will listen to
340:06 - any changes which has happened
340:09 - inside your entire application remember
340:11 - that
340:12 - so this event uh or implementing this
340:14 - lifecycle look is very costly in case
340:17 - uh what what what can be the use cases
340:19 - uh for uh
340:20 - in last four years uh i have been
340:22 - writing angular code and never see never
340:24 - saw any example or any use cases where i
340:26 - had to go ahead and implement ng on
340:27 - changes
340:28 - but it can be useful in case you want to
340:31 - detect
340:32 - some changes which is not controlled by
340:35 - anywhere so let's say you have some
340:36 - logout button where
340:38 - some logout button plays on any some
340:40 - corner of your screen and you want to
340:43 - make sure whenever that log logout
340:44 - button is clicked
340:46 - you should go ahead and detect changes
340:48 - but where you are not sure
340:50 - what we can do what you can do is you
340:51 - can have an implementation of ng on
340:54 - changes or sorry are not engineer
340:56 - changes do check event or do check
340:58 - lifecycle loop
341:00 - as there's an event which is raised blue
341:02 - check will be called and you can handle
341:04 - your special scenario where of course
341:06 - that event is something which is not
341:07 - captured by anyone will be captured by
341:09 - your do check lifecycle so that's one
341:12 - you that can be one use case but
341:15 - try to avoid it as much as possible also
341:18 - another thing which you should keep in
341:19 - mind is
341:22 - you should not implement ngo on changes
341:24 - and do check together
341:26 - on same component the reason being of
341:28 - course both are going to do the same
341:29 - thing
341:30 - what on changes does it will detect any
341:34 - changes to your input values what
341:37 - changes on do check will do it will
341:39 - detect any changes inside your
341:41 - application so
341:43 - it will be like capture twice so don't
341:44 - do that and try to avoid on changes
341:47 - sorry
341:49 - do check as much as possible not on
341:51 - changes to check as much as possible uh
341:54 - some i like extreme use cases if you get
341:57 - into it even before doing that just try
342:00 - to
342:01 - in case you have some special scenario
342:03 - where you think that do check is some do
342:05 - check is the answer uh you need to
342:07 - implement budget
342:09 - i would suggest go ahead and check on
342:11 - stack overflow ask to ask the question
342:13 - if uh what you are trying to do is
342:15 - correct and then use it otherwise don't
342:18 - so this is ng blue check
342:23 - in this video we are going to discuss
342:25 - about
342:26 - ng
342:28 - after view unit and
342:29 - and
342:30 - ng after wechat and we will also discuss
342:32 - about something known as view
342:34 - child
342:35 - and we will learn about some
342:38 - other stuffs like template ref
342:40 - and how you can dynamically load a
342:42 - component so let's go ahead and get
342:44 - started
342:45 - so far we have discussed about on
342:47 - changes on it on init and do check
342:56 - so to understand
342:58 - how you can actually use ng after
343:00 - viewing it we have to first learn about
343:02 - view child
343:04 - and how we can actually communicate or
343:08 - load a component using view child and
343:10 - what else we can use uh do using view
343:13 - child so let's go ahead and do that so
343:15 - we'll start with a simple
343:17 - uh example the first example which is
343:20 - which is really useful you will
343:22 - get into a lot of scenarios where this
343:24 - may be helpful for you so let's get into
343:27 - that so
343:28 - what i'm going to do is i'm going to
343:29 - create a new component
343:32 - and we will
343:33 - communicate to that component using view
343:36 - child so i'll call this component as
343:39 - let's call it as header component so
343:41 - let's say ngtc
343:43 - and
343:45 - header
343:54 - now we have already seen an example
343:56 - where
343:57 - we have we are actually communicating
343:59 - with a component which has input
344:00 - property and then the child component
344:02 - can
344:03 - uh send some data back using output so
344:06 - in using input and output but this is
344:08 - another way let's say uh you have a
344:10 - component but you don't want to actually
344:13 - make it reusable i mean you don't have
344:15 - to uh don't want to actually have uh
344:17 - input and output properties because most
344:19 - of the time they will be individual
344:20 - component but sometimes let's say you
344:22 - may need to
344:23 - load them
344:24 - uh in another component you may want to
344:27 - access them in another component and
344:29 - probably assign some property or
344:32 - call some function of this particular
344:34 - component or let's say you have any
344:36 - third party component
344:38 - this is really a
344:40 - good use case for view child as well so
344:42 - let's say you have a very uh third party
344:44 - component which on which you don't have
344:46 - much control right so
344:47 - it's like they have some component and
344:49 - then you can pass input and output
344:51 - properties or let's say they have some
344:53 - component where they don't let's say you
344:55 - get an uh library ui library and where
344:58 - they have some component which is
344:59 - internal to them so they don't
345:01 - want to actually make it reusable but
345:03 - maybe you want access to that particular
345:05 - component
345:06 - you are working within a team like
345:08 - multiple projects working together and
345:10 - it's a library so they they don't want
345:12 - to make it reusable like by using input
345:14 - and output but you may want to actually
345:16 - access them um so what what are the
345:18 - approach what is the approach you will
345:20 - take of course you can go ahead and talk
345:22 - to the team and ask them to make it
345:24 - reusable but let's say they don't want
345:26 - to do that right i mean it doesn't fit
345:28 - uh or it doesn't
345:30 - actually help in their use case so what
345:33 - you will see how we can actually do that
345:35 - how we can actually access any component
345:37 - into uh our other component which
345:39 - doesn't have input and output property
345:41 - so let's uh create so we have already
345:44 - this header component now what we will
345:45 - do is we will
345:48 - create a property here and remember i am
345:52 - not going to make it
345:55 - input property
345:59 - okay so we have title which is of type
346:02 - string and i'll put this
346:06 - title
346:10 - here using interpolation syntax
346:12 - so far so good i mean you created a new
346:15 - component you assigned a new property
346:16 - and then we just added that into our
346:19 - interpolation syntax
346:21 - so we just added that into our
346:23 - interpreter using interpolation
346:25 - pollution syntax
346:27 - sorry we just added that using
346:29 - interpolation syntax
346:30 - now let's go to
346:32 - appcomponent.html and let's say let's go
346:35 - to room component.html
346:37 - so we have this welcome to hotel name
346:40 - uh what we want to do is
346:42 - we want to have an title here
346:48 - and we want to use this header component
346:50 - so let's see how we how we do that
346:52 - so i will just comment this out
346:56 - and we will use
346:58 - fbp
347:00 - hotel header
347:01 - is that the
347:03 - component name oh sorry directive name
347:05 - no
347:05 - so this is the directive name hyp header
347:14 - and this is it so we have places
347:16 - component let's see how it looks like on
347:18 - ui
347:20 - okay so we don't have that particular h1
347:23 - available here so let's inspect
347:26 - and here
347:28 - let's
347:30 - open it here so you uh we have this
347:32 - header here but i mean
347:34 - we don't have any property right because
347:36 - right how to pass the title now i mean
347:39 - that component is uh
347:40 - that component doesn't have input
347:42 - property just have a property
347:44 - but what in case i want to access it now
347:48 - let's see how we can achieve that using
347:49 - view child
347:55 - so here uh we will create
347:59 - we will use view child it's a decorator
348:01 - so virtual decorator and then
348:04 - it we need to pass some parameter and we
348:07 - will talk about that parameter as well
348:08 - so here i'll go ahead and pass this
348:11 - component which is header component
348:14 - right so this is the component we want
348:16 - to access
348:22 - and i'll call it as
348:24 - uh so this is a variable i'm saying this
348:27 - is header component of type header
348:29 - component and let's import
348:31 - this header component
348:42 - okay we have already imported header
348:44 - component somehow
348:46 - it is taking some time
348:48 - for some reason
348:51 - anyways
348:53 - so what we did here so using view child
348:55 - what we have done is we have created a
348:56 - new instance of header the setter
348:58 - component and we can access this
349:00 - instance inside this component inside
349:03 - the rooms component right now so i can
349:05 - access any property any method on this
349:07 - particular component and i can achieve
349:09 - whatever i want to
349:10 - but there is a cache
349:12 - let's do
349:14 - console
349:16 - dot
349:17 - login
349:19 - okay somehow my indecisions start
349:21 - stopped working let me just check
349:24 - so this dot
349:26 - uh
349:29 - header component has no initializer okay
349:31 - we are using strip mode so i'll just put
349:33 - this question mark to avoid this
349:35 - particular level
349:36 - and it is compiled
349:39 - let's see the output let's see the
349:41 - output now so we have uh
349:44 - let's go to console
349:46 - and here
349:50 - rooms component uh ds line number
349:54 - 36
349:56 - yeah here so you can see uh what we have
349:58 - available here is let me just zoom in we
350:02 - have undefined
350:04 - this uh i i specifically said that using
350:07 - view child what we are doing is we are
350:09 - creating a new instance of this
350:11 - particular component but why don't we
350:13 - have anything if it's a component i mean
350:15 - it should be give us some metadata
350:17 - information right about that particular
350:18 - instance but we don't have here
350:20 - so let's see uh
350:22 - why and how we can access it so first
350:24 - thing which i'm going to do is i'm going
350:26 - to create or
350:27 - i'm going to implement after viewing it
350:32 - so let's go ahead and do that
350:36 - view
350:37 - in it
350:46 - and
350:48 - we will implement the interface which is
350:51 - ng
350:52 - afterburner
350:55 - and let's
350:56 - use the same line which we have written
350:58 - here online number 37
351:00 - and let's paste it on line number 80.
351:05 - it's saved so let's go ahead and see
351:08 - and it is simply it is compiled
351:10 - successfully and now let's wait and see
351:14 - so online number
351:15 - 36 sorry now line number 37 as i uh
351:18 - added one more line
351:20 - we don't have anything we still have
351:22 - undefined but at line number 80
351:24 - we have the same instance but we have
351:26 - now some metadata so what is that
351:28 - metadata it is giving me information
351:30 - about
351:31 - it is giving me information about the
351:33 - header component
351:34 - so i just said that it is going to
351:36 - create a new instance and it is it has
351:38 - created but this instance is actually
351:41 - available
351:44 - inside after unit not inside
351:47 - engine indeed why so so let's uh
351:50 - discuss the difference here
351:52 - using view child you create a new
351:54 - instance but
351:55 - there is one more property which you
351:57 - have to
351:58 - provide here
352:00 - let's uh do that and we will discuss
352:03 - about it so there is a property called
352:05 - static true
352:06 - by default this static property is false
352:09 - and
352:10 - what happens when we make it true so
352:12 - let's go ahead and see both in the in
352:14 - action
352:16 - now
352:17 - you can see now after making static to
352:20 - true i started getting an instance at
352:22 - line number 37
352:24 - and of course i will get an instance at
352:26 - line number 80 as well because it's
352:28 - available so what we achieve using
352:30 - static two
352:32 - this is here you where you have to
352:34 - understand the component life cycle book
352:37 - properly
352:40 - let's go to the slide
352:42 - so if you see this life cycle look
352:45 - ngo changes ngo in it ng to check and
352:47 - then we have content in it content check
352:50 - and then we have after unit and after we
352:52 - checked and then
352:53 - ng on destroy
352:54 - this lifecycle
352:56 - will execute for each and every
352:58 - component
353:00 - now
353:00 - [Music]
353:02 - i am right now inside rooms component
353:06 - what i'm trying to load i'm trying to
353:08 - load header component so what will
353:09 - happen here so let's go through it
353:12 - first
353:14 - the ng on init of your rooms component
353:16 - will be called and then after do check
353:18 - after content in it after content check
353:21 - after viewing it after we check an ng on
353:23 - destroy
353:25 - as i am trying to load header component
353:27 - the same
353:28 - life cycle of header component will be
353:30 - called as
353:33 - here we are saying static true
353:36 - which has a very specific purpose that
353:38 - in case i am saying this component
353:41 - is
353:41 - has this property called
353:44 - with static true it means this component
353:46 - is actually safe to be used
353:49 - inside on init of its parent
353:53 - why so i mean why we should make it true
353:55 - and why why should we should make it
353:56 - false
353:58 - this is here where i will talk about
354:00 - little bit i'll
354:02 - talk a little bit about asynchronous
354:04 - programming
354:07 - if let's say uh my header component has
354:09 - the same lifecycle look and inside ngon
354:12 - in it lifecycle look it has some
354:14 - asymptos code what will happen
354:17 - in that case
354:18 - of course
354:20 - the execution will be blocked
354:22 - and it is not
354:24 - uh it is not
354:25 - we
354:26 - sorry
354:27 - we won't be confident that this
354:28 - particular instance will be available at
354:31 - the ng on init of my parent because of
354:33 - course i mean
354:36 - this at this particular time header
354:38 - component is still executing its
354:40 - ngoninet on inaudible so it is still not
354:42 - initialized
354:44 - so whenever you have some component
354:45 - which has let's say some asynchronous
354:47 - code which may delay or something right
354:50 - so which may delay creating or executing
354:52 - the ng only lifecycle look
354:54 - make it static false you do we need to
354:57 - do that no the answer is no static is
354:59 - false by default that's why we were not
355:01 - getting that instance at line number 37
355:04 - when we didn't add it static to property
355:07 - in this case header component does not
355:09 - contain any synchronous code so it is
355:11 - safe to be used
355:12 - but still
355:13 - whenever you are using view child that's
355:16 - why they removed it so earlier therefore
355:18 - there was a lot of confusion people a
355:21 - lot of developers used to miss this
355:23 - property and they used to try accessing
355:25 - it inside engineering lifecycle which
355:27 - used to get which uh
355:29 - used to cause an error and developers
355:32 - used to blame the framework so angular
355:34 - team decided around angular 9 that they
355:36 - will remove make it by default false so
355:39 - they will make static variable false so
355:42 - developers don't get an instance inside
355:44 - ngo in it in case they are sure that
355:46 - okay i am sure that okay this will not
355:48 - cause any issues they can make it start
355:51 - true so
355:53 - based on what you are trying to do
355:55 - use this static property properly in
355:57 - case you are not sure
355:59 - just make it just keep it default so
356:01 - where you don't have to pass anything
356:03 - and you are safe to access this instance
356:06 - after unit
356:08 - now let's come and talk about after unit
356:10 - what we did there right and why it is
356:12 - available in after unit
356:14 - so when we are saying static is false of
356:16 - course we are saying okay this is
356:17 - something which may cause delay and we
356:19 - are not sure that we want to use it
356:21 - inside ngo in it
356:24 - after viewing it
356:26 - is life cycle so
356:27 - ngon in it is initialization of the
356:29 - component like so component is getting
356:31 - initialized
356:32 - after we
356:33 - viewing it is the
356:36 - at this particular life cycle look the
356:38 - component is saying
356:39 - all the view
356:42 - so remember so uh the component is
356:45 - saying that whatever view i have that is
356:47 - also initialized
356:49 - so i'm if i'm trying to load any other
356:51 - component inside my component it means
356:53 - that they are also ready they are
356:55 - initialized as well that's why we are
356:56 - saying after view init so after view is
356:59 - totally initialized i mean everything on
357:01 - my template is also initialized it is
357:03 - safe to use any other component in your
357:06 - template uh in your
357:08 - life in your code base right on in your
357:11 - ts file so that's the ng after viewing
357:14 - it lifecycle
357:19 - now
357:20 - the other lifecycle hook which is
357:21 - related to ng after view unit is known
357:24 - as after view checked so if you uh see
357:27 - here it is known as after view chart so
357:29 - to go to after reject let's do one more
357:32 - thing
357:33 - right now we have just accessed the
357:34 - instance
357:35 - what i'm going to do is i'm going to
357:37 - remove this
357:40 - i'm going to remove this static property
357:42 - here from here
357:45 - and comment this out
357:48 - and here
357:51 - let's assign the property title
358:07 - and let's see this is
358:13 - okay so we are saying okay this header
358:15 - component title is rooms view
358:18 - and you can see the properties available
358:20 - here rooms view but
358:23 - i want to show you one more thing so
358:25 - here you can see uh there is an error
358:27 - which says expression changed after
358:30 - after it has been checked error
358:32 - so this is one of the most um
358:35 - what you can say the most searched error
358:38 - related to angular and it has an
358:41 - actually link as well so you can click
358:43 - on this link and it will tell you more
358:44 - about this error it will it has actually
358:47 - a video as well
358:49 - from the angular team
358:50 - so let me tell you uh you should not
358:52 - worry about this error in case you get
358:54 - this error this is totally fine if you
358:57 - get this error on your development
358:59 - development environment right now we are
359:00 - in dev environment how you can verify if
359:02 - you are in dev environment you can just
359:04 - click here six messages
359:06 - and here right so in console you will
359:09 - always see this message angular is
359:10 - running in development mode
359:12 - when you create production build you run
359:14 - in production build if you get this
359:16 - error in production build there is
359:17 - definitely something wrong with your
359:18 - error with your code but if you get this
359:21 - in your development mode that's totally
359:23 - fine and let me tell you why of course
359:25 - you can go to the link and you can read
359:27 - more about it but let me just tell you
359:29 - as we are going through this uh
359:31 - particular topic
359:33 - in development mode angular runs change
359:36 - detection twice
359:37 - so that's why we get this error so it
359:39 - says okay previous value was blank now
359:41 - current value is rooms view so they run
359:43 - it twice that's the that's the reason we
359:46 - we have this error
359:47 - and why they do it because it's of
359:49 - course development environment so they
359:50 - need to actually go ahead and recheck if
359:52 - something has changed so don't worry
359:54 - about it i mean it's it's totally fine
359:57 - and ng after let's
360:01 - view checked so we can actually go to
360:03 - this
360:08 - sorry
360:09 - after
360:11 - view checked right so you can see uh you
360:14 - probably will never use this particular
360:16 - lifecycle cycle look
360:18 - so it says it says a callback method
360:20 - that is invoked
360:21 - immediately after the default change
360:23 - director has completed one
360:25 - change check cycle for a component but
360:28 - as we said
360:29 - we will uh the
360:31 - by default i mean angular will run this
360:33 - change direction twice in your
360:36 - development mode you will get this error
360:37 - even though we call this in after view
360:40 - check so it's like
360:42 - now let me just talk a little bit about
360:44 - after what we have after we checked
360:47 - let's take a look
360:52 - so at this point
360:54 - your
360:55 - angular has already completed one life
360:57 - cycle check already so in case you want
361:00 - to um let's say assign some property
361:02 - here you can actually go ahead and do
361:04 - that here
361:05 - after your life your change direction
361:07 - has completed or you want to modify
361:08 - something you want to modify some values
361:11 - you want to call some function you can
361:13 - actually go ahead and do that here but
361:15 - remember in depth mode you will still
361:16 - get this error so don't worry about it
361:18 - this error
361:20 - is okay in case you get in depth mode
361:22 - but
361:23 - if you are getting it in
361:24 - production mode that's an issue
361:26 - yeah so uh this is it
361:29 - from
361:31 - after unit and after view checked
361:34 - is it no there is more so let's go ahead
361:36 - and talk about those
361:38 - what else we can achieve using view
361:40 - child
361:42 - life cycle looks i mean uh
361:43 - [Music]
361:44 - let's
361:45 - do one more thing uh
361:48 - how about dynamic components so let's
361:51 - say
361:52 - i just comment this out now i want to
361:57 - render this room's component but
361:59 - dynamically i don't want to do it in
362:01 - template
362:07 - so just copy some template here so we
362:09 - have this tip then we have ng template
362:12 - uh i'll talk about what ng template is
362:14 - and then we uh have h1 tag welcome user
362:17 - uh let's
362:20 - remove this as well so we have just an
362:21 - ng template with hashtag user and then
362:25 - ng template so first let's try to
362:27 - understand what ng template is so ng
362:29 - template is kind of like
362:32 - a tag
362:33 - to understand it in uh like
362:37 - easy words so ng template is a tag which
362:39 - will be
362:40 - uh which will never render anything so
362:42 - ng template itself won't render anything
362:45 - so it's like it is not visible i mean so
362:48 - but
362:49 - it can help us to render some other
362:52 - template so what some other template can
362:54 - be it can be another component
362:56 - so let's try that out
363:00 - here what we are going to do is we are
363:02 - going to
363:04 - dynamically load the
363:06 - rooms component
363:08 - using view child
363:09 - so let's do that
363:13 - so i'll say okay this is
363:16 - few child and then
363:20 - i need the access so let's view child
363:25 - and close this
363:28 - now after this i need the access to this
363:30 - particular
363:32 - ng template tag so this hashtag user has
363:35 - some specifics i'll just talk about it
363:37 - so we can use this
363:39 - here
363:40 - and then we can use one property called
363:43 - read
363:46 - and which we can pass view
363:49 - container
363:51 - ref
363:53 - i'll call it as vcr the container ref
363:56 - which is type of view container
364:00 - it is going to give me some reference by
364:02 - the name if you can guess so it's saying
364:04 - okay i'll get it will give me some
364:06 - reference
364:07 - to what
364:08 - now let's talk about this user
364:11 - so here this hashtag user is something
364:15 - known as template reference
364:19 - once you define something with hash on
364:20 - any html tag
364:23 - you can access that
364:24 - tag
364:33 - so you can access that tag inside your
364:36 - ts file using view child
364:40 - it's not only with ng template i can
364:42 - access any html tag i can even access
364:44 - div i can access even input element
364:47 - we'll talk about it i'll we'll see an
364:49 - example right to just to be sure that
364:51 - how it works so here we are saying give
364:54 - me the reference to this user tag right
364:57 - and this view container ref will
364:59 - actually help us to
365:01 - dynamically load a component
365:03 - let's do that so here i am going to
365:05 - first say
365:07 - it implements oninit
365:10 - and here i'll say this ng on init
365:19 - and uh
365:20 - okay so i'm getting some
365:22 - uh hint because i'm using some service
365:24 - from github so let's write i'll write
365:26 - this force so you can const
365:29 - component
365:30 - as we want to let's uh assign some value
365:33 - as well component ref is equal to
365:35 - i can say this dot
365:37 - vcr
365:40 - dot so there is a method
365:45 - okay
365:46 - so you can use this dot view container f
365:48 - dot create component and then you can
365:50 - pass any component here directly so i'll
365:53 - say okay actually i wanted to do
365:57 - is
365:58 - load
365:59 - rooms component
366:02 - and let's
366:06 - import
366:18 - okay so now
366:34 - so it has rooms slash
366:39 - rooms
366:40 - dot component
366:43 - so this is the file and then we need
366:45 - rules component here
366:47 - so at this point of time uh you will see
366:50 - your component will be loaded so let's
366:52 - save this
366:56 - and see if our code is compiled yes it
366:58 - is
367:00 - let's go to
367:05 - html and
367:08 - cannot read properties of undefined
367:27 - okay sorry
367:29 - so we just uh sorry so we just learned
367:31 - that whenever we use view child the
367:35 - static property is false so what we need
367:38 - to do is
367:39 - here i need to use after unit
367:43 - and here we can access this ng after
367:46 - unit and now we will get the instance of
367:50 - the
367:51 - tag and it should work now so let's uh
367:53 - see let's go to the browser and
367:56 - here it is so you have your
367:59 - view which is loaded which is loaded
368:00 - dynamically you remember you uh you
368:03 - didn't specified the room's
368:06 - uh
368:06 - component inside your template inside a
368:08 - template you just have an ng template
368:10 - and you just gave a reference a template
368:12 - reference and then we loaded that
368:15 - component dynamically from our
368:16 - typescript file so this is what you can
368:19 - achieve you can just let's see the
368:22 - uh
368:23 - html dom here you have hi env rooms
368:27 - which is loaded inside this particular
368:28 - div and this is it
368:30 - this is how you can actually load a
368:32 - component dynamically
368:33 - just a single line of code and in case
368:35 - you want to actually modify some
368:36 - properties using component ref so i can
368:39 - just do component ref
368:41 - and i can do instance
368:44 - dot
368:46 - and you can access any property so let's
368:48 - try to access any of the property which
368:50 - we have available here
368:51 - and i'll say number of rooms it is 10
368:54 - right so let's try to change it
368:57 - it is getting used somewhere yeah here
369:00 - so i'll say this
369:04 - number of rooms is equals to
369:07 - 50
369:09 - and let's
369:11 - let's run it and see the output here and
369:13 - you have 50 here so
369:15 - then you have actually loaded a
369:17 - component dynamically you
369:19 - changed a property as well
369:22 - and
369:23 - this is what we achieved using mutual
369:26 - and we also learned about template ref
369:30 - so let's try uh to actually access
369:33 - a div element using template reference
369:36 - let's see how we can do that
369:38 - i'll just comment this out
369:41 - and we'll keep the code
369:43 - same here
369:49 - let's comment and comment this and
369:52 - here i'll create a div
369:55 - and i'll say hash
369:59 - any property name let's say name
370:02 - so we have this div with hashtag name
370:06 - this name is actually template reference
370:09 - now i can access this
370:10 - inside my component
370:13 - using uh virtually also view
370:16 - child give the name
370:19 - and now as i'm sure that okay this
370:22 - div is actually available inside my
370:24 - template
370:25 - and it doesn't contain any code which
370:26 - will delay or cause any issue i'll say
370:29 - okay this is static
370:31 - true
370:36 - right so i'll say this is name
370:39 - and
370:41 - you can of course you need to give some
370:43 - type so you can give a type called
370:45 - element ref
370:50 - because it's an html element
370:52 - and now
370:54 - recommend
370:56 - and use oninit
370:58 - and let's see
371:00 - ng on
371:04 - sorry not that
371:08 - enjoying it and then i can say this dot
371:10 - name
371:15 - dot
371:17 - you know
371:19 - let's try to access any property uh
371:24 - okay so now intellisense is not working
371:26 - in
371:28 - but
371:28 - it should give me negative element let's
371:31 - see
371:42 - let's do console.log
371:48 - so first let's see what
371:50 - this dot name gives us it should give us
371:52 - an element
371:53 - [Music]
371:56 - so let's see if it is compiled once it
371:59 - is compiled
372:00 - and let's see here
372:03 - [Music]
372:05 - we have native element ref and yeah so
372:08 - native element is the property which we
372:10 - should be trying to access
372:13 - so we have uh this or native.native
372:16 - element and then you can access any
372:18 - property for example i want to
372:20 - set in a
372:21 - text i can say equals to
372:24 - uh
372:26 - build then
372:31 - hotels right and then i will just remove
372:34 - this
372:35 - console.log
372:39 - now let's see
372:40 - and we have
372:42 - hello world
372:46 - is there any issue
372:49 - you can uh you can see it here so you
372:51 - have built-in hotel available here let's
372:53 - put an h1 tag so it's visible right now
372:55 - it is not
372:57 - or
373:01 - it's it's it's okay right so we add and
373:04 - even
373:05 - uh it's available so yeah that's what we
373:07 - wanted to verify so we have this little
373:09 - nodule available here and what we did we
373:11 - accessed an element remember so earlier
373:14 - it was like uh what what what we have
373:16 - done so far using which right so first
373:19 - we
373:20 - the
373:21 - we actually accessed and
373:24 - component instance using view child that
373:26 - was our
373:27 - um
373:28 - header component right so we actually
373:30 - access return component or created a new
373:32 - instance using typescript using your
373:34 - file uh we used view child for that then
373:37 - loaded it then we
373:39 - spoke about static property what it does
373:41 - then we
373:42 - saw in second example where we used view
373:44 - container ref
373:46 - we container ref to
373:48 - dynamically load a component that was
373:50 - the second example third example what we
373:52 - did is we
373:54 - accessed an html element we tried we got
373:57 - the access of that html element using
373:59 - using template reference and then we
374:02 - assigned some value to that particular
374:04 - html element
374:06 - by using of course the
374:08 - uh native property right so we use the
374:10 - instance dot whatever property uh not
374:14 - we used native uh what was that property
374:16 - name
374:20 - yeah so we use native element property
374:22 - dot the property which exists on html
374:24 - element so here we know okay div has
374:27 - something called in a text and we use
374:29 - that property to bind it
374:31 - so these are three examples which we
374:32 - have seen using viewsite and we also saw
374:34 - that okay the instances will be
374:36 - available
374:37 - in case we you we are using static as
374:40 - false
374:41 - in after view init lifecycle look so
374:43 - most of the time after unit lifecycle
374:45 - hook is
374:46 - good for anything which you want to do
374:48 - after your view is initialized
374:50 - and uh if you checked is it's optional i
374:53 - mean you will probably
374:55 - there there will be hardly some
374:57 - instances where you will find it useful
374:58 - but you can do everything which you want
375:01 - to do after view is initialized inside
375:03 - ng after viewing it lifecycle
375:07 - now let's see one more example i'll do
375:10 - one thing
375:12 - so i
375:14 - what i'm doing is i'm having multiple
375:16 - instances of this header component
375:18 - inside my rooms list
375:21 - let's see how it behaves so we still
375:23 - have single
375:25 - uh
375:26 - here
375:28 - we still have only one instance which is
375:30 - available and which has this room's view
375:32 - property
375:34 - rest doesn't
375:36 - so here let's try to understand this
375:39 - view child property will always access
375:42 - the first instance which is available on
375:44 - your template
375:46 - in case you want to access all the
375:48 - elements which is available
375:50 - on your component of type header
375:52 - component
375:53 - you need to use view children so name
375:56 - itself tells you what we are trying to
375:58 - achieve right so view child in case i
376:00 - have one instance view children in case
376:02 - i have more than one instance right
376:04 - child children
376:05 - so let's try to do uh use view children
376:09 - and the same uh the one difference which
376:11 - we have here is view children
376:14 - static property is by default false and
376:16 - it's false you cannot change it because
376:19 - it is saying okay you are going to have
376:21 - access multiple instances and cannot be
376:22 - available during engineering
376:25 - so here i'll
376:27 - pass header component
376:29 - and here i'll say this is header char
376:33 - children
376:34 - component
376:38 - and
376:38 - we have to just do one more thing
376:41 - now
376:42 - query
376:44 - list
376:51 - let me just write this code and then
376:52 - we'll talk about it
376:55 - let me see if query list is imported
376:57 - from the correct
376:59 - path
377:01 - okay it's still not
377:06 - let's try to
377:16 - so we have this uh
377:18 - sorry so we have this uh view children
377:20 - and we are saying this is the property
377:22 - and this is hydrochildren component
377:25 - children
377:27 - and we are saying this is type of query
377:28 - list of header component
377:30 - what we are trying to do here so let's
377:32 - see let's see
377:34 - [Music]
377:39 - okay looks like my laptop is consuming a
377:41 - lot of resources
378:01 - foreign
378:36 - okay so
378:38 - now here so what we did is we created we
378:41 - used we children to create instance of
378:43 - error component and then we named it as
378:46 - header children component
378:51 - and which is type of query list of
378:52 - header component let's try to just to
378:55 - console.log and see what what happens
378:57 - here and we know that we cannot access
378:59 - it inside ng on it as we said that is
379:02 - like static is false by default we
379:04 - cannot do anything here
379:06 - so let's say this dot uh header children
379:08 - component dot
379:10 - now you can see it says forage
379:13 - why it is saying for it because
379:15 - uh let's do console.log and then we will
379:18 - see what it contains and then we'll talk
379:20 - about the properties it has
379:30 - okay
379:32 - so you can see uh what
379:34 - it has it's a query list it has a
379:36 - property called dirty
379:38 - it means dirty means there is no uh
379:40 - nothing has changed inside this
379:41 - particular component then it has first
379:43 - and it has last this is first instance
379:46 - and last instance so in case you have
379:49 - like multiple components of same type
379:51 - and now you want to do something
379:52 - different with first instance and last
379:54 - instance you can do that for example
379:56 - let's say uh
379:58 - you have you you have multiple rows like
380:01 - let's say you created a component and
380:03 - you want to render them as rows
380:05 - you want to
380:07 - take first row and show them as header
380:09 - take last row show them as footer
380:12 - and whatever is in between you can
380:14 - actually
380:14 - treat it as your content that's possible
380:17 - using first and last you have also
380:19 - length property which tells you how many
380:21 - results are there and then you have
380:22 - underscore results property which gives
380:24 - you all the result
380:25 - so it means it is an array so query list
380:28 - is something which has access to all
380:31 - properties which is available here
380:34 - you can
380:36 - let's go ahead and
380:38 - see
380:39 - here right so i can just go ahead and
380:40 - say header
380:41 - child component
380:45 - dot
380:47 - last
380:52 - okay so i can access last component and
380:54 - then i can access the title property of
380:56 - last so i'll say this is uh
381:00 - last title just random string right
381:07 - and let's see the output so it's a it
381:09 - says okay this is your room's view which
381:11 - is first instance which we have already
381:12 - changed using view child and this is
381:14 - your last title which we changed using
381:16 - the last property in case you want to do
381:18 - uh
381:19 - something with each and every row you
381:21 - can actually do it by using for each
381:23 - loop
381:24 - and what else
381:29 - and
381:37 - we will see no different changes later
381:39 - but yeah i mean this is like an array so
381:42 - you will get all the methods most of the
381:44 - methods not all methods which is
381:45 - available on your
381:47 - on on your array so you can see it has
381:50 - some
381:51 - uh there is something called reset but
381:53 - and it's
381:54 - not what we need so we have fun find
381:57 - filter
382:02 - and you can also call destroy
382:04 - to destroy any component
382:11 - okay
382:12 - and you can also get any uh component
382:14 - using index in case you want to here you
382:16 - have get method as well so this is uh
382:19 - what you can do using header children
382:21 - component this is really useful in case
382:22 - you want to create your own
382:24 - uh let's say reusable component or your
382:28 - component where
382:29 - you want to create your drop downs right
382:32 - so
382:33 - where you can your users can pass the
382:35 - list of records and you can display them
382:38 - as you want not the user want right so
382:41 - these are some examples uh angular
382:43 - material uses um
382:46 - view children multiple players at
382:47 - multiple places you can check out the
382:49 - code base to understand it more so this
382:52 - is
382:53 - it from view child and view children we
382:55 - also discuss about how
382:57 - you can use view child you can how you
382:59 - can use visual trend and the life cycle
383:01 - looks as
383:04 - in previous video we saw how we can use
383:07 - view child and we also discuss about
383:09 - some
383:10 - uh scenarios where view child is useful
383:12 - and ng after viewing it uh life cycles
383:15 - look hook as well
383:18 - ng after unit hook as well
383:21 - now in this video we are going to talk
383:22 - about
383:23 - ng after content in it
383:26 - but as i said we will be
383:28 - going through the life cycle as well as
383:30 - some some of the concepts
383:32 - so here we are talking about after
383:34 - content so it has to be
383:37 - it has to do something with content but
383:40 - what content we are talking about
383:43 - here we are going to talk about the
383:45 - really important topic called content
383:47 - projection
383:48 - so let's go ahead and talk about content
383:49 - projection and then we'll come to ng
383:52 - after content in it and what is and then
383:54 - how we can use it
383:55 - so let's go back to the code base
384:00 - and for this what we will do is we will
384:02 - create a new component
384:04 - so uh
384:05 - because we need to understand what
384:07 - content projection is
384:08 - so i'm going to create few components
384:11 - and then uh let's see let's uh
384:17 - we'll talk about the content projection
384:20 - so first component which i will create
384:22 - is
384:23 - let's call it as
384:27 - container
384:33 - so this is a container component and
384:36 - why uh content position is useful let's
384:38 - let's talk about once we create this
384:40 - component
384:46 - so let's say you have your
384:48 - application right
384:50 - but what you need is you
384:52 - uh once you finalize your design system
384:54 - you said okay my sidebar can be on left
384:58 - side
384:59 - my footer can be on the lower side my
385:02 - header will be on top of the
385:05 - top of the page
385:07 - but use i don't want to actually give
385:09 - this functionality where user can decide
385:12 - i mean not the end user but my
385:14 - developers as
385:16 - a lead engineer i want to actually take
385:18 - care of where the components will be
385:20 - rendered
385:22 - and in what sequence
385:24 - this is where actually uh these are few
385:26 - scenarios where can this is actually one
385:29 - scenario where content position is
385:30 - useful what else
385:32 - so let's say you have created one
385:35 - component as you said components are of
385:38 - course your reasonable html tags so what
385:40 - we need is we want to give that reusable
385:42 - html tag but what content should be
385:45 - placed inside that
385:47 - particular container or a particular
385:50 - component
385:51 - should be defined by user again if i
385:53 - talk about user here i am talking about
385:55 - the developers so your developers should
385:57 - be able to define that okay i want to
385:58 - put some let's say h1 tag or uh i want
386:01 - to put a break here or i want to put a
386:03 - horizontal line here that's something
386:06 - which is up to the developer
386:08 - so these are two scenarios where content
386:10 - position can be really useful let's go
386:12 - ahead and do that so first
386:15 - how we can achieve that so to achieve
386:17 - the
386:18 - content projection what you have to do
386:19 - is you have to place an html tag called
386:21 - ng content
386:23 - so let's do that i'll say
386:28 - ng content
386:32 - and this is what we have so we have ng
386:34 - content open closed that's it nothing
386:36 - [Music]
386:38 - else let's take this component just
386:41 - close this
387:02 - so you might be wondering what is
387:04 - different here i mean we have been doing
387:06 - the same thing earlier as well right we
387:08 - for example rooms component we have
387:10 - placed the room component open and close
387:11 - that's it
387:13 - how this ng content is going to address
387:15 - so let's
387:17 - see the view it is act as it is
387:20 - now
387:21 - let's try to put some html contents here
387:24 - so what i'm going to do is i'm i'll
387:26 - place an h1 tag i'll say this is
387:30 - from
387:33 - energy
387:34 - [Music]
387:35 - content
387:37 - let's go ahead and see
387:39 - and you can see you have this is from
387:40 - ngc content available here the content
387:42 - which we placed inside an html tag and
387:46 - if you see this i mean of course this is
387:47 - how it looks like hiv container and then
387:49 - this h1 which is replaced
387:52 - by this ng content which we have placed
387:55 - here
387:56 - so it will not work with other tags for
387:58 - example if i do try to do it here for
388:00 - example h i n b rooms we don't have any
388:02 - ng container here so it doesn't know
388:04 - what to do with this so let's go ahead
388:06 - and try this out
388:08 - and see
388:11 - and you don't have anything here right
388:13 - so in rooms you are not getting that
388:15 - particular
388:17 - h1
388:19 - content which we have placed but here we
388:21 - are able to get it because we have
388:23 - placed an energy content and you can
388:24 - knows that okay this there will be some
388:27 - content which will be passed by
388:30 - the user i mean as a developer i mean
388:31 - you can be
388:32 - the same developer right you who is
388:34 - writing container and who is using that
388:36 - container
388:37 - so this is uh what you can achieve using
388:39 - ng content but of course this is not it
388:41 - so let's go ahead and talk a little bit
388:43 - more in detail
388:45 - you can also do one more thing
388:48 - as i said you can provide the order in
388:52 - which you can
388:54 - you want to actually load your
388:55 - components so let's say i can give or i
388:58 - can create a container component which
389:00 - has like your dashboard header footer
389:03 - sidebar
389:04 - placed accordingly right
389:06 - but you don't want to actually do it by
389:08 - yourself i mean containers should not
389:10 - have anything so container should define
389:12 - okay where was what that's it
389:16 - there isn't mean let's say what you can
389:18 - do is that container component is your
389:20 - reusable component and now you are going
389:22 - to use that reusable component across
389:24 - multiple applications so what you have
389:26 - to do is you have to just create the
389:28 - component
389:29 - and you have to just place them that's
389:31 - it that's what you have to do as an user
389:33 - i mean as a developer
389:35 - so let's uh create few components here
389:42 - [Music]
389:46 - let's see what we can create
389:53 - we can create an employee component so
389:55 - of course hotel will have any have
389:57 - employees
390:05 - and we already have rooms so we'll these
390:08 - are two so let's say now what i want to
390:10 - do is
390:11 - i want to uh load
390:14 - let's say employees data first
390:16 - then i want to give an ng content where
390:19 - people uh sorry where developers can
390:21 - add whatever content they want to and at
390:24 - the end i want to load rooms
390:26 - so let's see how we can do achieve using
390:28 - ng content so in ng content you can
390:32 - pass a property called select
390:35 - in select you have to pass the html tag
390:38 - remember this so first what i want to do
390:40 - is i want to actually load employee
390:49 - okay so this is where i'm going to place
390:50 - employee then there is an ng content and
390:53 - at the end
390:54 - what we want is we want to load rooms
390:57 - so
390:58 - let's go back to rooms
391:03 - let's close this again
391:07 - take rooms go to container
391:10 - html and
391:12 - let's replace this here
391:24 - now we are done with our container now
391:27 - let's go back
391:28 - to this main component.html and now we
391:32 - have this container available here so
391:33 - what i can do is
391:35 - i can place
391:36 - so
391:37 - remember i'm placing rooms
391:40 - first
391:42 - and let's put
391:45 - in employee second
391:49 - and let's save this
391:51 - you can just format
391:56 - and
391:58 - let's go back to our page so this is uh
392:00 - this is how it looks like so you can see
392:02 - uh you have hello world then you have
392:04 - rooms view
392:05 - and let's see here
392:09 - i need to comment this out otherwise
392:11 - rom's data will be like displayed twice
392:16 - and let's uh yeah so we uh it's compiled
392:18 - now you can see so
392:20 - let's open the container you have
392:22 - employee first
392:24 - then we have this is from ngcontent
392:26 - because we placed an empty container we
392:28 - are saying that okay whatever doesn't
392:29 - match comes here
392:31 - and then we have rooms
392:32 - and we don't have the same sequence
392:37 - here i mean we are sorry
392:40 - we don't have same sequence here we are
392:42 - loading rooms first employees second and
392:44 - then at the end and it doesn't matter i
392:46 - mean because you have defined this this
392:48 - is the sequence in which i want to
392:50 - actually load some content
392:52 - and
392:53 - [Music]
392:54 - you have also defined this is these are
392:56 - the uh matching tags so select we are
392:58 - saying okay select this particular html
393:00 - tag or select this particular component
393:02 - right
393:03 - which will be placed here
393:05 - so this is how you can actually use a
393:08 - continuous now what else what else we
393:10 - can do
393:11 - we are talking about ng
393:13 - ng after content in it now what is the
393:16 - content for a component
393:17 - so for this particular component if you
393:19 - talk about container component the
393:21 - content is something which will be
393:23 - loaded
393:25 - or which will be provided by the parent
393:26 - component
393:28 - so
393:30 - the content
393:35 - also whatever is loaded inside this
393:37 - container is the content now
393:40 - [Music]
393:41 - your components so my container
393:44 - component can only access this
393:46 - components in case they it want to
393:48 - inside a lifecycle called ng after
393:52 - content in it because at that moment the
393:54 - company knows that my component my uh my
393:57 - contents are initialized so who is
393:59 - giving the comp content it right now it
394:02 - is it is parent component like app
394:03 - component which is giving the content
394:06 - when container component will come to
394:07 - know that all the components are all the
394:09 - contents are initialized within my
394:11 - component add the container oh sorry uh
394:15 - ng after content
394:16 - so let's put an implement
394:18 - and let's see what we can do
394:20 - using this so
394:22 - i'll say implements
394:24 - after
394:26 - content in it
394:28 - and let's implement
394:32 - so here you can see in c after content
394:35 - in it
394:38 - but
394:39 - how to select
394:40 - the components so here i want to
394:42 - actually select let's say
394:45 - employee component for example let's add
394:47 - some properties here
394:51 - so i will say this is in b
394:53 - [Music]
394:55 - employee name
394:57 - which is string and by default john and
395:00 - let's display this employee name
395:03 - here
395:09 - so we want to actually so let's say
395:12 - access the employee component here and
395:14 - then probably want to change some data
395:16 - or want to call some action or
395:19 - want to actually do something with
395:21 - employee component everything is
395:22 - possible so how to access that
395:24 - particular component first you have to
395:26 - use something known as view chill view
395:28 - checked
395:29 - okay so you can say view child and then
395:31 - you can pass the component so you can
395:33 - say okay this is employee component and
395:35 - then
395:36 - you can give an a name sorry
395:38 - not view child
395:42 - content child
395:43 - so we can give a property name so i can
395:46 - say this is content
395:52 - or we can just call it as employee
395:55 - which is type of employee component
395:58 - and let's import blue chip that's the
396:01 - contentious idea
396:03 - and now we have this particular property
396:05 - of course this is uh strict mode so we
396:07 - have to put this question mark as our
396:09 - exclamation mark and now let's try to
396:11 - access and uh before we move ahead you
396:13 - might have this question so uh do we
396:15 - have static true or false available here
396:17 - the answer is no uh in content child you
396:19 - can actually only access those uh
396:22 - everything which you have defining here
396:24 - inside the ng after contentment so there
396:27 - is no option of all calling
396:29 - static true the reason being of course
396:31 - because this component doesn't know what
396:34 - is supposed to be available here it will
396:36 - be always passed by my parent component
396:38 - and bad it will take some time right so
396:40 - running through all the life cycle
396:42 - initializing its own content then uh
396:44 - [Music]
396:46 - going to child component initializing
396:48 - that and then coming to the content in
396:50 - it life cycle look so it won't be
396:52 - available here so we have to actually
396:54 - just go ahead and
396:55 - do whatever you want to do with this
396:57 - particular component or access this
396:58 - component here so let's do console.log
397:01 - this.employee right now
397:03 - and let's see our application so here um
397:08 - just
397:10 - so you can see here so you have access
397:12 - to uh line number ts
397:14 - you can see the line number here so it
397:16 - says okay this is coming from container
397:18 - component
397:19 - and then you have the emp name access to
397:21 - emp name as well
397:22 - now what i can do with this so i can
397:24 - just uh do something like i can change
397:27 - this dot employee
397:30 - and i can just
397:31 - access the
397:33 - let's say emp name equals to
397:38 - from drawn to rick
397:41 - and it will be changed here so you have
397:43 - uh the updated value available so you
397:46 - can actually dynamically oh sorry you
397:47 - can actually uh
397:49 - access any component at runtime so it's
397:52 - not like something which is uh
397:57 - you you can access any component
397:59 - which is loaded by a content
398:02 - or ng content then you can access access
398:05 - that component using content chart and
398:07 - then you can
398:08 - do whatever you want to do so uh the
398:11 - the preferred way is always of course
398:13 - using input and output you can make as
398:15 - much
398:16 - or you can
398:18 - so the preferred way is to use input and
398:21 - output but in some cases this this is
398:23 - really useful view child and view
398:24 - children where you don't have much
398:26 - control on your component you want to
398:28 - access those component uh inside your
398:30 - typescript file uh you want to create
398:32 - the instance at that particular time and
398:33 - then you want to assign some data or you
398:35 - want to actually
398:36 - bind some data or call some function
398:38 - which is available on another component
398:40 - so these are the some use cases where
398:42 - these two are really useful of course
398:45 - both having different purposes right we
398:46 - saw what we tell us and now we are
398:48 - talking about containers so energy
398:50 - content remember this type so
398:52 - in case you want to you are not sure
398:54 - okay what will go here you just want to
398:56 - provide
398:57 - a container where
398:59 - my i can i can replace any text in
399:02 - future so you can actually add that
399:04 - inside the container for example uh
399:07 - one
399:08 - com one example which we can give is
399:10 - faqs right so for what in case you have
399:13 - a lot of clients what you will be doing
399:15 - is of course the design will remain same
399:16 - properly probably the only thing will
399:19 - change it will change is content so what
399:21 - you can do is you can create a container
399:22 - component uh
399:24 - apply all the stylings you want to and
399:27 - then just
399:28 - ask your designers to actually write the
399:30 - content for you that's it or who whoever
399:33 - is uh
399:34 - responsible for the content they can
399:36 - provide the content that's it and that's
399:38 - uh that's
399:39 - that saves your time right
399:41 - so let's uh
399:43 - move on and now i've ng after content in
399:46 - it then there is also there is a life
399:48 - cycle of called ng after content checked
399:50 - so in case you want to actually make
399:51 - sure something is something needs to be
399:53 - done once you are once
399:55 - one time your change section is has
399:57 - executed you can use that but probably
400:01 - rarely used so you will not find
400:03 - many scenarios where that will be used
400:06 - which leaves us to our last lifecycle
400:09 - look which is really important because
400:12 - whenever something is created it needs
400:13 - to be destroyed of course i mean
400:15 - everything
400:16 - it's it's part of the life right
400:19 - so
400:20 - our component starts when it is
400:22 - initialized and
400:24 - when it is destroyed
400:26 - at that moment our last last life cycle
400:28 - look which you can see at the bottom is
400:29 - ng on destroy which on destroyed i mean
400:32 - it itself says when i am getting
400:34 - destroyed so this is the event which
400:36 - will be called when your component gets
400:37 - destroyed but
400:39 - when does our component gets destroyed
400:41 - very important question let's go ahead
400:43 - and figure that out
400:46 - so here
401:05 - let's take an example of this so uh
401:07 - remember we had this
401:10 - hidden right so what i'm uh what i'm
401:12 - going to do is now i'm going to use uh
401:15 - ngif
401:17 - on this
401:18 - but uh what i will do is whenever i
401:22 - click on hide rooms
401:24 - we will
401:25 - hide the entire room list remember what
401:28 - ngf does it removes the component from
401:30 - the dom
401:31 - so
401:32 - let's use it here
401:37 - and
401:41 - let's implement
401:50 - on destroy
402:00 - and i'll say this is console.log
402:04 - on destroysquad
402:08 - let's go back to our code
402:17 - so i'll remove clear the console and
402:20 - let's click on toggle so you have your
402:22 - component back so it this is the first
402:24 - time your component is actually loaded
402:27 - let's click on toggle again
402:30 - and
402:38 - one second so you have bronze components
402:43 - gf
402:44 - night rooms
402:49 - i just implemented this on destroyer at
402:51 - the wrong place because the component
402:53 - which is getting destroyed is not this
402:55 - one it is the room's list component
403:05 - save this and
403:07 - we'll just remove the on destroy from
403:09 - here because otherwise it will
403:11 - give us an error that we have not
403:13 - implemented the interfaces properly
403:16 - yep let's see
403:17 - so you uh we have this toggle button now
403:20 - the component is loaded and let's clear
403:23 - the console and click on toggle again
403:25 - and you can see now it says on destroy
403:27 - is called and root rooms list component
403:29 - just to
403:30 - clear that okay this is the correct line
403:31 - where this code is available so what is
403:34 - happening here why uh
403:36 - uh why on destroy is getting called so
403:38 - remember so whenever
403:39 - the dom element gets removed sorry
403:42 - whenever a component is get gets removed
403:45 - from your dom at that moment the
403:47 - components on destroy life cycle event
403:50 - will be called
403:51 - now what you can achieve using ngo
403:54 - destroyer so it's it's getting destroyed
403:56 - so it should be okay right i mean it's
403:58 - okay it's getting destroyed
403:59 - but it's really useful in case you have
404:02 - some memory consuming code and you want
404:05 - to free the memory this is the core this
404:07 - is the lifecycle look where you can
404:08 - actually do that now what is the
404:10 - scenario for wrangler so in angular you
404:13 - uh we will be using something called
404:14 - subscription in upcoming sessions in
404:17 - upcoming videos
404:19 - and
404:20 - using those subscription you can
404:21 - actually uh subscribe to some some data
404:25 - now once you subscribe to that data
404:27 - that's that subscription become active
404:30 - so somewhere you have to actually
404:31 - unsubscribe to those that's where ngon
404:33 - destroyer comes into the picture or you
404:35 - want to actually
404:36 - probably uh
404:38 - let's say reset some data or
404:41 - do some logic when you're you're
404:43 - whenever your component is getting
404:44 - destroyed you can go ahead and do that
404:46 - inside ngo destroy for example let's say
404:49 - uh you want to remove something from
404:51 - local local storage or session storage
404:54 - whenever a component is getting
404:55 - destroyed yes that's that's the life
404:57 - cycle book where you can book into and
405:00 - call those code to clear your cash clear
405:02 - your storage
405:04 - those are the things which can be done
405:06 - here
405:07 - but
405:07 - most of the time you will be using this
405:09 - lifecycle look to unsubscribe to the
405:11 - data in future
405:13 - so this is it about lifecycle looks now
405:16 - let's move on to next topic
405:21 - in this video we are going to talk about
405:23 - dependency injection
405:24 - so we will talk about what is dependence
405:27 - injection and we will see what uh what
405:29 - is di providers so di stands for
405:31 - dependency injection mixture
405:34 - so let's go ahead and talk about
405:35 - dependency injection so dependency uh
405:39 - in case you are coming from some other
405:41 - technologies you may have already used
405:43 - it for example dotnet and java uses
405:45 - dependency injection a lot but in case
405:48 - you are not aware that's absolutely fine
405:50 - so what what is the dependency here so
405:52 - in angular a dependency can be a service
405:55 - or sorry not
405:58 - [Music]
405:59 - you it can be a class actually it can be
406:01 - class
406:03 - so let's create it
406:05 - so in angular a dependency can be a
406:07 - class or an object which you can
406:10 - access or you can inject inside a
406:12 - component or inside a surface wherever
406:14 - you want to
406:15 - it's actually a design pattern which is
406:17 - uh as i said widely used in other
406:19 - technologies dotnet java they use it a
406:21 - lot
406:23 - and
406:24 - in other technologies you have to
406:25 - actually go ahead and do some
406:27 - configuration to actually achieve
406:28 - dependency injection but
406:30 - angular has the dependency injection
406:33 - built in
406:34 - and this is one of the
406:35 - uh this is one of the uh i would say
406:38 - one
406:39 - fun
406:41 - so
406:42 - dependency injection is one of the
406:44 - feature which actually
406:45 - makes angular what it is it makes
406:48 - angular really better because this is
406:50 - one functionality or you can say one
406:52 - feature which is not available with
406:54 - other frameworks
406:55 - and it is really powerful so we will of
406:57 - course go ahead and see what we can
406:58 - achieve using our dependency injection
407:01 - as we said there are uh there are
407:03 - multiple types of providers so you have
407:04 - class bis providers then you have value
407:06 - providers and we have factories we will
407:08 - talk about those uh what what are those
407:11 - and
407:13 - but and we can also uh
407:17 - before we actually go ahead and talk
407:18 - about other di providers we'll start
407:20 - with class based providers so we'll
407:22 - start with class base provider then
407:23 - we'll see value provider and we will see
407:26 - factory as well so here let's go ahead
407:28 - and see how you can create and consumer
407:31 - service we will also talk about what
407:32 - service does because that's important
407:34 - right before you can you go ahead and
407:36 - use something you have to be aware what
407:38 - why it is used
407:42 - so here rooms component.ts let's go back
407:45 - to this component so if we see if the uh
407:49 - number of lines of code in my rooms
407:51 - component is already raised around 126 i
407:54 - mean including the spaces
407:56 - but yeah i mean more than 100 lines of
407:58 - code
408:00 - and some of the code may be reusable
408:03 - right so uh but not right now but of
408:05 - course in longer longer term
408:07 - some of the code base some of the code
408:09 - which we have written inside room
408:10 - component can be reusable
408:13 - so what we can do of course the
408:16 - what we can do is we can create
408:17 - something reusable and we can move this
408:19 - code somewhere
408:21 - what is that somewhere so that's
408:22 - somewhere in service so what we can do
408:24 - is we can create a service we can move
408:26 - all reusable code in that particular
408:28 - service generally what you try to do is
408:30 - keep the code minimum inside your
408:32 - component and try to split that code
408:35 - into
408:36 - multiple services i mean services is
408:38 - something where you will be writing your
408:40 - business logic so your business logic
408:42 - should go into your
408:45 - your services so don't try to write
408:47 - everything inside component always split
408:50 - them into services services are
408:52 - something which will which is which
408:54 - knows okay what it's supposed to do for
408:56 - example it's possible that you may do
408:59 - multiple things inside a component for
409:01 - example uh
409:03 - you can have a dashboard where you are
409:04 - accessing the data from let's say
409:06 - employees you are accessing the data
409:08 - rooms data you are accessing the booking
409:10 - data
409:11 - so what you will do write all the code
409:14 - inside your component the answer is no
409:15 - of course what you can do is you can
409:16 - create multiple services based on what
409:19 - uh each service is supposed to do for
409:21 - example each service one service for
409:22 - rooms one service for booking one
409:24 - service for employee and then i can just
409:26 - use all those services inside the
409:28 - component and the uh the advantage is i
409:30 - can actually go ahead and use that
409:31 - service anywhere i want to and i don't
409:34 - have to duplicate the code
409:35 - so let's see how we can actually do uh
409:38 - or
409:39 - start creating a service and split the
409:41 - logic in this example so what we'll do
409:44 - is we'll create a service for rooms
409:47 - now
409:47 - [Music]
409:48 - for creating the services it's up to you
409:50 - what folder structure you follow
409:52 - generally
409:54 - what i do
409:56 - i keep a folder called
409:58 - service or services
410:01 - and i create my all services here for
410:04 - example any service related to rooms
410:06 - goes into this folder
410:08 - similarly i mean if i have to create a
410:10 - new service for employee i'll create a
410:11 - services folder in employee and then
410:14 - move all the code base or
410:16 - add all the logic there
410:27 - [Music]
410:31 - so let's let's go ahead and create our
410:33 - services so we won't be doing it
410:34 - manually we will be using
410:36 - angular clm so you can type ng g
410:41 - generate as service and the name of your
410:43 - service so here i want to create a
410:45 - service for room so i'll say okay rooms
410:47 - so my
410:48 - new file will be created inside this
410:50 - services folder
410:52 - and
410:53 - here it is so you have rooms dot room
410:55 - service
410:57 - class created so you can see okay it has
410:58 - a it has a class and then provided in
411:00 - root what is this provided in root we
411:02 - will discuss about it let's ignore it as
411:05 - of right now
411:06 - and what we will do here is we will move
411:09 - some logic from my
411:11 - rooms component to here and then we will
411:13 - use this service rather than actually
411:15 - writing that code into room service
411:18 - let's see first
411:20 - this data right so we have actually this
411:22 - data which is coming for example in
411:25 - future what we will do is we will get
411:26 - this data from our backend or from some
411:28 - api
411:29 - so
411:30 - generally the driver of
411:32 - any data should go into service
411:35 - so here i can
411:37 - create
411:40 - a method
411:41 - i can say this is get rules
411:58 - so this is rooms list
412:12 - and then i'll just return
412:17 - in this dot room list
412:22 - so nothing
412:24 - extraordinary right right now because we
412:26 - don't have the apis we just want to
412:27 - understand how services works
412:30 - so we got the rooms data which is now
412:33 - part of my service
412:35 - and rather than actually uh doing
412:38 - or
412:39 - getting all the data i mean inside the
412:41 - component what we have done is we have
412:43 - moved that logic into service now let's
412:46 - see how to use that particular service
412:49 - as we said in angular we are going to
412:51 - use dependency injection so what is a
412:53 - dependency injection it's a design
412:54 - button of course we reset it's a design
412:57 - pattern so but what it it does
413:00 - so
413:01 - using dependency injection approach
413:04 - the dependency injection approach says
413:05 - you should not create an instance
413:07 - directly
413:09 - so
413:10 - in general if i have to create an
413:12 - instance of class this is this is
413:13 - something which we will do we will say
413:15 - okay this is room
413:17 - service
413:19 - which is type of
413:20 - [Music]
413:24 - is equal to new
413:26 - room
413:33 - okay so
413:35 - this is how you will create a new
413:36 - instance of a class
413:37 - but when we say
413:39 - we need to use dependency injection this
413:42 - is something which you should not so
413:46 - rather than creating the instance
413:48 - manually we need to rely on the
413:50 - dependency injection uh which is already
413:52 - provided built in by angular we don't
413:54 - have to do anything else
413:56 - so let's see how we can do that so here
413:58 - i can inject a service i can inject
414:01 - anything i can inject a class i mean i
414:03 - when you can inject a component which
414:05 - you should not do until unless you think
414:07 - that's the last approach possible which
414:10 - i think which i don't think so i have
414:12 - seen some developers doing that but
414:14 - that's an antibiotic i would say
414:16 - should not inject a component so here we
414:18 - have created a service
414:20 - and now we want to use this particular
414:22 - service inside our component so this is
414:24 - this is how you will be doing it so you
414:26 - will say
414:27 - uh rooms
414:29 - i mean the variable name
414:33 - service which is type of
414:37 - rooms service
414:39 - now
414:40 - once you do this
414:42 - we have to also provide the access
414:44 - modifiers
414:46 - now uh this is where a lot of developers
414:48 - get confused whether we should get it uh
414:50 - get uh take it public or private i would
414:52 - say always make it private
414:55 - the thing is if i make this particular
414:57 - service public
414:59 - it can be accessed on the template which
415:01 - is again an empty pattern a lot of
415:03 - developers does that does that does it
415:06 - should not access services directly from
415:09 - your template try to avoid it
415:12 - so what i can do is i can mark this as
415:14 - private it means okay i'm limiting this
415:17 - particular service to my template or
415:19 - sorry to my typescript file itself not
415:22 - anything else so it will the instance
415:24 - will not leak on to my html or my
415:27 - template
415:28 - now to get the data i can what we can do
415:31 - is we can say this task
415:34 - rooms list
415:37 - is equals to now we have to get it from
415:39 - service so we'll say this dot
415:41 - room service start get rooms
415:46 - and
415:47 - let's square in
415:50 - let's go ahead and see the output
415:56 - so
415:58 - so let's go ahead and see the output so
415:59 - here of course we have to click on
416:01 - toggle and you have your data back
416:03 - the only thing only difference is now
416:05 - this data is coming from your service
416:07 - not from
416:08 - component itself so component doesn't
416:10 - know
416:11 - how to get the data generally your
416:13 - component should not know um how to get
416:15 - the data or how to add the data or how
416:17 - to even do any business logic that
416:19 - should not be the responsibility of your
416:21 - component that should go into a service
416:24 - so what uh what is a service a reusable
416:26 - class where you can actually put some
416:27 - business logic
416:29 - and then you can just access those
416:30 - inside your component
416:32 - and
416:34 - this this is how you will create a
416:36 - service
416:37 - so let's go ahead and move on
416:42 - you can also achieve component
416:45 - interaction using service so in case you
416:47 - want to pass the data between two
416:48 - components you can do that using service
416:51 - better example which we'll see is
416:55 - when we learn about alexis so right now
416:57 - just just be aware there are multiple
416:59 - techniques so we have used input and
417:01 - output view child view children content
417:03 - sorry view view child content child and
417:06 - you also have some services as the
417:09 - another approach
417:12 - so now we have to actually talk about
417:16 - let's let's go into little bit more
417:18 - detail into the services
417:26 - here so provided in
417:30 - we have root and you have uh two more uh
417:33 - you have root ini and uh there is one
417:36 - called platform which is which is not
417:38 - used uh which is in get which gets
417:41 - internally used by the router service
417:43 - uh as of now there is no
417:45 - like concrete example which is available
417:47 - for using provide uh provided in
417:49 - uh platform in case there is something
417:51 - comes up we will add a new video
417:54 - but right now we have to provided in
417:55 - root and any uh we are going to discuss
417:57 - about root right now and any we will
417:59 - discuss once we go into routing because
418:02 - uh that's there is a solid use case
418:04 - which we can use
418:06 - before actually we talk about this
418:08 - provided in root we have to talk uh
418:10 - something about how this particular
418:12 - services
418:14 - gets resolved
418:16 - right so we said dependency injection so
418:18 - once once we inject this particular
418:20 - service
418:21 - angular has to actually resolve these
418:23 - dependencies how we do that how angular
418:25 - does that
418:26 - so to understand it
418:29 - let's uh talk a little bit about
418:32 - this diagram
418:34 - which is
418:35 - known as dependency resolution
418:39 - here
418:42 - whenever you inject a service
418:46 - angular needs to figure out where this
418:48 - particular service is provided
418:50 - so right now
418:52 - if you see
418:54 - this provided in is something which is
418:56 - known as root
418:58 - so what what does it denotes
419:01 - in
419:02 - older days i mean
419:03 - before angular 6 before angular 6 what
419:06 - we used to do is whenever we had we
419:08 - create we used to create a service we
419:10 - used to register that service here
419:13 - so you can see this providers area is
419:14 - empty
419:15 - we actually used to do it here
419:18 - then with angular 6
419:20 - angular team came up with a approach
419:22 - where they said
419:24 - when we create a service we will say
419:26 - provided in root by default so when we
419:28 - say provided in root the service is
419:30 - actually registered here inside this app
419:32 - module you don't have to do it manually
419:35 - now now why it was done which is of
419:37 - course again very really uh
419:40 - again which is really important to
419:41 - understand
419:44 - so a lot of time what the developers
419:46 - used to do is they used to inject they
419:48 - used to register a service
419:51 - and over the time of over
419:53 - the time
419:55 - probably after some sprint developers
419:57 - used to actually stop using that
419:59 - particular service for example let's say
420:00 - i was doing some poc the code made into
420:03 - master and now i am not using it after
420:06 - the next release because the poc is not
420:08 - needed anymore
420:10 - but as this is already available in
420:12 - providers it is getting
420:15 - bundled as part of your code final code
420:19 - so agnes that once we once you create a
420:22 - service and say provided in root we will
420:24 - take care of registering your services
420:26 - here in app module
420:29 - also in case this particular service is
420:31 - never getting used we will also remove
420:33 - this from the bundle once you create a
420:35 - production build
420:36 - win-win situation for both of us right
420:39 - and as framework and as well as the
420:41 - developers
420:44 - now
420:45 - what else what else provided in rulers
420:50 - once you add a service using provided in
420:53 - root you get a single instance of this
420:56 - particular service available across
420:59 - remember this
421:00 - so
421:01 - what do you mean by singleton
421:03 - let's uh try to figure that out
421:06 - so what i'm going to do right now is
421:09 - here let's uh
421:20 - we know constructor right so we we
421:22 - talked about constructor multiple times
421:24 - so what it is i mean this is uh
421:26 - something which will get called whenever
421:28 - a new instance of your class is getting
421:30 - created so here what i will do is we'll
421:32 - say console.log and i'll say room
421:34 - service initialized
421:36 - why i'm doing it let's let's go ahead
421:38 - and figure out
421:39 - so let's say i use this particular
421:41 - service somewhere else for example in
421:43 - employee component
421:44 - and say this is private
421:47 - uh
421:48 - not employee rooms
421:50 - service
421:52 - and
421:58 - room service so we injected this
421:59 - particular service here as well
422:02 - now let's go to
422:04 - let's go to our view and see
422:06 - what is happening here so you can see
422:08 - room service is only a room service
422:11 - initialized is getting called only once
422:14 - not at other places and it is from room
422:17 - service
422:18 - this one i mean if you even
422:20 - see i mean if i click on toggle
422:22 - you will not see okay this service is
422:24 - not initialized again
422:26 - why so
422:27 - because there is only one single
422:29 - instance of this particular class or
422:32 - this
422:33 - employee as a room service which is
422:35 - available right now so there is only one
422:37 - instance
422:40 - whenever you use provided in root so it
422:42 - means i am registering this particular
422:44 - service into my root module
422:47 - if it gets used of course it will be
422:49 - part of your bundle if it doesn't get
422:50 - used it will be removed
422:52 - but you are also getting a single
422:54 - instance of your
422:55 - service
422:57 - now let's go back
422:59 - and try to see what in case i need a
423:01 - separate instance
423:04 - valid use case right i mean i don't want
423:05 - to use the same instance for
423:07 - multiple components i want
423:09 - what i want is
423:11 - so employees should have its own
423:13 - uh uh sorry in employee should have its
423:16 - own instance
423:17 - so i can we can actually pass something
423:19 - known as providers and then you can pass
423:22 - a service here so i'm passing room
423:23 - service
423:24 - again here
423:26 - so now let's see what uh what happens
423:29 - and you can see rooms service is
423:32 - actually initialized twice one
423:35 - of course the global instance second
423:37 - is for employee so who is using global
423:40 - instance right now rooms
423:42 - and who is using the local instance
423:45 - employee so employee has a different
423:46 - instance and your
423:49 - rooms has a different instance so this
423:50 - is how you can actually uh
423:52 - create
423:53 - instance
423:54 - of your service in case you need to most
423:57 - of time i mean single in singleton
423:59 - instance is more than enough but
424:01 - there might be some there may be some
424:02 - use cases as per your application for
424:05 - example a real-time example which i can
424:07 - give is
424:08 - in
424:09 - one of the project i was part of we
424:11 - wanted to actually
424:13 - take some json data and we wanted to
424:15 - put some controls on the on the ui
424:19 - and
424:20 - remember so every screen has that json
424:24 - data coming from the backend
424:26 - so what we needed is every screen should
424:28 - have its own instance so
424:30 - unfortunately uh in during testing we've
424:33 - actually figured it out it didn't made
424:35 - into the production but uh what we did
424:38 - is we removed this provider's property
424:40 - while migrating our port because our
424:43 - code base was on angular 5 and we wanted
424:45 - to migrate to angular 7 i think
424:48 - where this provided in concept came in
424:51 - so we ended up removing everything and
424:52 - then just adding provided in so what
424:55 - happened is now
424:56 - whenever i used to
424:58 - switch the uh urls
425:00 - i used to get more and more components
425:02 - being added onto my view the reason
425:04 - being it was a single instance or single
425:06 - instance which was available so whenever
425:09 - i used to
425:10 - switch back to another page i mean all
425:12 - the json it used to get uh used to get
425:15 - added into the same ad
425:17 - because it was a single instance so
425:19 - make sure that you are sure that you
425:22 - whether you want to create a single
425:23 - instance or not
425:24 - so in case you don't want to create a
425:26 - single instance go ahead and register
425:28 - your service inside that component and
425:30 - you're safe
425:36 - so now we know about single singleton
425:38 - instance and how you can make non single
425:40 - in a singleton instance
425:42 - now one more thing which is again very
425:45 - important to understand during
425:46 - dependency injection
425:49 - so uh how your services are getting
425:52 - resolved right
425:53 - so here uh
425:55 - let's talk a little bit about it so
425:56 - whenever a component uh
425:58 - or a service right it checks that okay
426:01 - there is something which is injected
426:02 - here
426:03 - the service
426:06 - resolution starts from this particular
426:08 - component so it's okay it identified
426:09 - okay now this room service is actually
426:11 - injected here
426:12 - first
426:13 - the component will check with itself
426:17 - do i have an provider's array available
426:19 - here if it is available the entire
426:21 - dependency resolution tree stops
426:24 - if it doesn't identify that okay this
426:26 - particular service is not available here
426:29 - in case i have a new
426:31 - module
426:32 - remember i can have a number of modules
426:34 - we have not just done it
426:36 - as of now we will be doing that while we
426:38 - move into routing
426:40 - so let's say if for example rooms has
426:43 - its own module it will go to the parent
426:45 - so it will be module in that case
426:48 - it will check with that model do you
426:50 - have this particular service it says
426:51 - okay i don't have it
426:53 - and then it goes to
426:55 - the parent of
426:57 - the that particular module so let's say
426:59 - right now we have component
427:01 - appcomponent.html which is our root
427:02 - component it checks with this particular
427:05 - component do you have this particular
427:06 - instance it says no and at the end it
427:09 - reaches to app module and as all the
427:11 - services which you create are marked as
427:14 - provided in root
427:15 - it comes here and it says okay i have
427:18 - found this particular service but in
427:20 - case this particular service is not
427:21 - registered i mean we misprovided in root
427:24 - or
427:25 - uh you you never had this particular
427:27 - property so there is possibility that
427:29 - you may not
427:31 - have this provided in property available
427:34 - in case someone migrated the code base
427:39 - so
427:39 - what in this case
427:44 - now you'll get an error so this error is
427:47 - again uh you will find of course you
427:49 - will find a solution on stack overflow
427:50 - if probably on the first page so
427:53 - whenever you get a error like something
427:55 - like this which says no provider for
427:57 - room service so here it is saying that i
427:59 - am not able to figure out where this
428:00 - particular service is registered
428:03 - remember you may get this of course
428:05 - while working daily on your code base
428:07 - it's possible
428:08 - so here it is of course saying that okay
428:10 - this particular service was not
428:11 - available at app module so what i did is
428:14 - i went one step above so
428:16 - let's see
428:17 - let's go back to the this diagram
428:20 - so it it
428:22 - it actually went to this
428:24 - app module our rf module it didn't found
428:28 - this particular service here
428:30 - then
428:31 - where else it can look at lookup so
428:33 - remember above app module we also have
428:36 - something called main.ts
428:38 - and we use something called platform
428:40 - browser here so it goes to this platform
428:42 - browser and says do you have this
428:44 - particular service by any chance it says
428:46 - no i don't have it
428:48 - after this there is one more level which
428:50 - is called null injector which is
428:52 - actually specifically to use
428:54 - or
428:55 - check if this particular service is
428:57 - available or not
428:58 - and once it reaches there
429:01 - you get this particular
429:03 - null injector
429:05 - makes sense right null injector and null
429:07 - injector error so you
429:10 - get this particular error says okay this
429:12 - particular service is not available i'm
429:14 - not sure what you're trying to do but it
429:15 - is not available it is not registered
429:18 - and let's go ahead and put it back
429:20 - so i can go to room service
429:23 - and
429:23 - just
429:24 - put it back and our application
429:29 - will combine
429:31 - will compile again and it works so this
429:34 - is uh what this particular
429:37 - hierarchy means so
429:39 - this is how your services gets resolved
429:41 - so
429:42 - this
429:47 - now
429:48 - uh so this is it from the dependency
429:52 - injection uh we will we need to discuss
429:54 - one more thing before we end up with
429:56 - dependency injection and then we will
429:58 - move on to our http
430:01 - so far we have learned about dependency
430:03 - injection and how it is resolved but
430:06 - there are few
430:07 - more important things which you should
430:09 - understand and which is known as
430:10 - resolution modifiers so we are going to
430:12 - talk about four resolution modifiers
430:14 - which is which exist
430:16 - and which are really useful
430:18 - uh
430:19 - based on your scenario so we will also
430:21 - discuss about the scenarios where it can
430:22 - be utilized
430:24 - so let's start with the first resolution
430:26 - modifier which is available called self
430:29 - let's see a use case for
430:31 - this self decorator
430:35 - so we are back to this code and
430:38 - here
430:40 - we will go to this employee component uh
430:42 - because i think this is the best place
430:44 - where the self decorator scenario
430:47 - is best suited for
430:49 - so remember we discussed about how you
430:51 - can actually go ahead and add this
430:54 - provider's property on employee service
430:56 - because we want to have and separate
430:58 - instance for this particular service and
431:01 - then we also discuss about the
431:02 - resolution uh how how your dependency
431:04 - gets resolved right i mean it goes to
431:06 - your parent and
431:07 - uh it keeps going
431:10 - till it finds uh the root and if it it
431:12 - is not available at the root it will go
431:14 - to the
431:15 - null injector and then it we will get an
431:17 - error called null inject error right so
431:20 - this providers does not exist which is
431:22 - like as i said
431:24 - widely
431:25 - uh
431:25 - [Music]
431:26 - a widely searched error which is
431:28 - available on internet but
431:32 - now let's go ahead and see how you can
431:34 - utilize the self decorator here
431:38 - so in this scenario in employee
431:40 - component we are actually injecting the
431:42 - service
431:44 - at the component level right so we are
431:45 - we are sure that this particular service
431:48 - should be available here that's the
431:51 - use case and that's the expectation as
431:53 - well
431:54 - so what we can do is we can by using
431:56 - either itself decorator
432:01 - which should be imported from angular
432:03 - core remember this
432:05 - by using this we can
432:13 - by using this self decorator now we are
432:15 - saying that this particular service
432:17 - should be available at this level
432:19 - if this particular service is not
432:20 - available here it means
432:23 - we should throw an exception now when it
432:25 - can be uh useful
432:28 - so
432:29 - in my uh one of my real-time project
432:32 - where i was working so we wanted to
432:34 - actually
432:36 - create
432:37 - the
432:38 - forms by collecting some json data which
432:40 - was coming from backend
432:43 - so what happened is by mistake while
432:46 - migrating our application from the lower
432:48 - version to the upper version so the
432:50 - lower version was actually angular 5
432:52 - and
432:54 - we were migrating to angular 7 and the
432:56 - provider's property came around angular
432:58 - 6
432:59 - so what we did is by mistake we removed
433:01 - that property and what happened
433:03 - but as we remove this property whenever
433:06 - we used to actually revisit different
433:08 - forms all the controls
433:10 - used to get added into the same service
433:13 - because it's it was single digit service
433:15 - and at one point we realized that our
433:17 - form one of the page or one of the form
433:20 - is really slow and then we realized that
433:22 - okay behind the scene it has like 300
433:24 - controls
433:25 - so that was the use case but in case we
433:28 - added this we had you we might have
433:30 - added this self decorator
433:32 - it actually serves the purpose because
433:34 - it it should tell us that okay now this
433:36 - particular
433:38 - service is should be available here
433:40 - should be registered here if i
433:42 - use this self-decorator let's run this
433:44 - application first
434:01 - iphone or
434:25 - so the application is here and
434:27 - let's click
434:43 - and
434:44 - let's keep it side by side because we
434:46 - want to see the error
434:47 - so let's say if i add the self decorator
434:50 - and i remove this provides property
434:54 - so now what will happen is we will start
434:55 - getting the same error which we have
434:57 - received earlier which says
435:00 - let's come back here and
435:12 - okay looks like this employee component
435:14 - is not available that's why
435:16 - i'll just add this employee component
435:18 - somewhere let's
435:20 - add it here
435:24 - and now we have the snow provider for
435:25 - room service right so we started getting
435:27 - this error
435:28 - now actually here
435:30 - as we added self decorator now
435:34 - during uh
435:36 - our file resolving this particular
435:38 - instance
435:40 - angular will not go up it will just try
435:42 - to see if it is available here if it is
435:44 - not available here it directly goes to
435:46 - the nail injector error and it traces an
435:48 - error that this particular service is
435:50 - not available so pretty useful pretty
435:52 - useful in case you are aware that okay
435:54 - your service will only be registered at
435:56 - this particular level go ahead and use
435:58 - it
436:00 - now let's move on to the next decorator
436:02 - which we have
436:03 - which was itself
436:05 - for that we will take an example of this
436:07 - rooms component service because
436:09 - if you see
436:11 - we are not registering the
436:14 - service here
436:15 - right we are not saying okay this should
436:17 - be available at the
436:18 - component level
436:20 - we are expecting this web service to be
436:22 - available
436:23 - somewhere i mean maybe his parent
436:26 - uh parent of room component
436:28 - may be app component or app module
436:30 - so we are aware that okay this this
436:32 - service will never exist at this level
436:34 - so what we can do is we can ask the
436:36 - angular to skip the check
436:40 - for this particular component by using
436:42 - skip self that's the name right so name
436:44 - itself suggests skip self skip myself
436:47 - from the entire dependency resolution
436:49 - tree which you are going to execute skip
436:52 - myself
436:53 - again
436:54 - to give you an idea do we should we use
436:56 - this the answer is
436:59 - maybe because angular internally
437:02 - because angular internally uses
437:03 - something known as bloom filter to
437:05 - figure out where the service or the
437:07 - instance is available and it is pretty
437:09 - fast already you don't have to do uh go
437:11 - ahead and use itself but it is a useful
437:14 - uh with another attribute or another
437:17 - resolution modifier called optional
437:19 - [Music]
437:21 - so let's uh go ahead and see
437:23 - now the next
437:25 - attribute which is available we will see
437:28 - optional first and then we will go to
437:30 - the host
437:33 - to understand
437:35 - the
437:36 - optional one what i have done is i have
437:38 - created a service called logger
437:40 - so this is logger service and it
437:42 - contains a method called log and you can
437:44 - see uh what i have is i'll just add this
437:47 - provided in property here because i have
437:49 - removed it right now
437:51 - so i have added this uh created this new
437:53 - service and
437:55 - what i'm going to do is i'm going to use
437:56 - this logger service but what we need is
437:59 - we want to use this logger service
438:01 - only during dev environment
438:03 - during production actually we don't want
438:05 - to use this long service but as we have
438:07 - seen if we try to remove this provided
438:09 - in property
438:11 - we will get an exception because we are
438:13 - saying uh if this particular service is
438:15 - not registered anywhere go ahead and
438:17 - raise an error even though we use skip
438:19 - self or we use self
438:22 - we are going to get this error so this
438:24 - is what
438:25 - we can achieve using optional decorator
438:28 - so let's go to appcompany.ts we will
438:30 - actually inject this particular service
438:32 - here so let's
438:33 - say private
438:36 - log the
438:37 - service
438:38 - which is type of login service and
438:41 - let's
438:42 - uncomment this so i'm going to call this
438:44 - log method
438:46 - and let's see
438:49 - and we have uh this app component.nc on
438:52 - it right those so this is this is
438:54 - something which is
438:55 - blocked at this line angular you can see
438:58 - logger service dot ts
439:00 - but
439:01 - during production let's say we don't
439:02 - want to inject this service i mean there
439:04 - are multiple ways we will not talk about
439:06 - it right now
439:07 - but in case uh just to recreate the
439:10 - scenario where this particular service
439:12 - is not registered
439:14 - what we can do is let me just add option
439:16 - later on but we can actually go ahead
439:18 - and
439:18 - recreate this scenario where this
439:20 - service is not registered by removing
439:22 - this provided in root property right now
439:24 - we will start getting an exception
439:26 - saying this uh
439:28 - service is not available right
439:30 - and no provider for log service this
439:32 - this was expected
439:35 - so what we can do is we can mark this
439:37 - service as
439:44 - optional so let's go ahead and use
439:48 - optional decorator
439:50 - not option optional decorator and now
439:52 - list currency
439:53 - and the error is gone so we don't have
439:55 - that no provider for logger service
439:58 - anymore because this is optional so in
440:00 - case angular figures out there is an
440:02 - instance which is available it's okay if
440:04 - it doesn't just go ahead and execute it
440:07 - i'm using this ternary operator here
440:09 - because in case this particular service
440:10 - is not available uh we will get an error
440:13 - so let's see
440:15 - so if i try to execute the log method
440:18 - there
440:21 - you can see cannot read properties of
440:22 - that so to avoid this i am using this
440:25 - ternary operator which will only execute
440:28 - in case logger service exist otherwise
440:29 - it will just skip that
440:31 - so this is optional
440:33 - now what we will do is we will go ahead
440:34 - and see the last decorator which is
440:37 - available called rose
440:38 - and for that what we are going to do is
440:40 - we are going to get uh take this
440:42 - container example
440:44 - right so
440:45 - what we have here is we have injected
440:48 - this room service
440:49 - here
440:50 - in my container
440:52 - now how host is
440:54 - useful let's talk about that
440:57 - so here
441:00 - how many instances of uh room service
441:01 - which we have let's go ahead and see
441:03 - that
441:04 - so we have one and
441:06 - two instances right now
441:08 - [Music]
441:09 - what in case i want to have and
441:12 - separate instance for all the component
441:15 - which are part of container like this
441:17 - this container component
441:19 - in that that case what i can do is i can
441:21 - just register this particular service
441:23 - here
441:24 - first
441:26 - and then i can add the host decorator
441:29 - here
441:31 - now all the component which is actually
441:34 - uh loaded inside this particular
441:37 - uh this particular container will start
441:39 - using the instance which is available
441:41 - here
441:42 - so to just recreate the scenario we have
441:47 - uh employee and rooms right so what i
441:49 - can do is
441:51 - here remove this
441:53 - and from here remove this because it was
441:56 - creating this second instance if you
441:58 - understand if you remember right
442:00 - and let's go ahead and see
442:02 - now
442:17 - okay one more thing which
442:19 - we missed is this
442:20 - container right
442:22 - so we have
442:24 - we have to uncomment
442:32 - because we we are not right now using
442:34 - container so
442:35 - i'll just do this i'll comment this
442:37 - employee and then i will just use the
442:38 - container
442:39 - and let's go ahead and see
442:41 - so now you have two instances so one
442:43 - instance is actually which is of course
442:45 - global one and another one is actually
442:47 - which is created by the container
442:48 - component now the content everything
442:51 - within container will start using the
442:53 - second instance which is created by
442:55 - container also we are saying this is
442:57 - host component
442:59 - so
443:00 - and no actually none of the component
443:02 - which is loaded inside container will go
443:05 - above this particular level to look for
443:08 - this particular service instance so if i
443:09 - remove this
443:12 - and try to run you will start getting
443:14 - this no provider for room service found
443:17 - in node injector it will not go up it
443:18 - will never go up and check with its band
443:21 - so this is what you can achieve using
443:23 - the host decorator remember most of the
443:26 - decorators you are not going to use
443:28 - delhi probably few use cases where it
443:30 - may be useful
443:32 - skip self i have as i said it's not
443:34 - mandatory but you can use it it's uh as
443:38 - a flute builder is already pretty fast
443:40 - and
443:41 - you don't have to use it self is really
443:43 - useful do use it in case you are using
443:46 - providers on the component itself
443:49 - not to actually avoid that because blue
443:51 - filters is already uh pretty powerful
443:53 - but just to avoid the scenario which i
443:55 - mentioned right so sometime by mistake
443:57 - refactor while refactoring the code we
443:58 - remove it if you have add itself it
444:00 - means okay i actually really wanted to
444:03 - have this component this service
444:05 - registered at this component level and
444:07 - in case someone new comes in and joins
444:09 - your team and
444:10 - he figures out okay this providers is
444:12 - probably not useful and removes it he'll
444:14 - start getting an error and probably he
444:17 - can read about self decorator and what
444:19 - it is
444:20 - of course documentation is a better way
444:21 - but just in case nothing is documented
444:24 - right so this is all about
444:27 - uh the
444:28 - resolution modifiers
444:29 - and let's move on
444:34 - in this video we are going to talk about
444:36 - another type of service so as you can
444:38 - see there are actually three types of
444:40 - services which exist so we have used the
444:42 - first type which is class based
444:44 - providers so till now whenever we used
444:47 - to do ngg service we used to get a class
444:50 - with of course add direct injectable
444:52 - decorator
444:53 - and we used to inject it and then use it
444:56 - let's go and see where value providers
444:58 - can be useful
444:59 - value providers are like you can pass an
445:02 - object as a service and you might be
445:04 - wondering
445:05 - where that can be useful why should i
445:07 - use object as a service so let's go
445:09 - ahead and figure that out first first
445:10 - let's see the use case and then we will
445:12 - create our service
445:22 - so so far uh let's go back to our room
445:25 - service this is the code we have
445:28 - we have an constructor and
445:33 - let me just remove this line
445:35 - and we have a get rooms method
445:37 - because this service does not do
445:39 - anything i mean this is an kind of
445:43 - sorry so this is us like a static
445:46 - service right i mean uh with mock data
445:49 - and does nothing right so we have just
445:51 - some dummy data which is which is
445:53 - available and then we are getting the
445:54 - state but once you create a real-time
445:58 - application your data is going to come
446:00 - from of course an api
446:03 - and for any api you need an endpoint
446:05 - that's that's how apis work right so
446:08 - what in that case
446:10 - let's see an example in case i have to
446:13 - access an api endpoint
446:15 - which
446:16 - will be used across my application i
446:18 - mean in multiple services
446:20 - what can i do
446:21 - the first way let me show you the
446:22 - simpler way which can be done so i can
446:25 - go to environment i have added already
446:27 - added this uh uh this endpoints here so
446:30 - what i have done is in environment.ts i
446:32 - have added a property called api
446:33 - endpoint which is of course and right
446:36 - now targets to local state 080 and some
446:39 - api slash v1 so even version one of our
446:42 - api
446:43 - this api does not exist
446:45 - and i have to add the same configuration
446:47 - in productions so my build will not fail
446:50 - otherwise it will fail so remember in
446:52 - case
446:53 - you have multiple environment files
446:55 - whenever you change into your
446:56 - environment or ts make sure you make the
446:58 - same change into every environment or ts
447:01 - file which is available for example i
447:02 - can have one for staging i can have one
447:05 - for uh uat and of course two are
447:07 - required which is environmental ts and
447:09 - product we will discuss about
447:12 - we will discuss this later on uh while
447:14 - deploying on deploying our production
447:16 - production uh application how we can
447:19 - change this settings
447:20 - but right now just remember so whenever
447:22 - you add something just make sure that it
447:24 - is added to all the environment files
447:26 - and in case i want to access this api
447:28 - endpoint inside my service how i can do
447:30 - that
447:32 - let's go to in room service.ts
447:34 - and i can import
447:37 - from
447:40 - dot dot slash dot dot slash dot dot
447:42 - slash and till i reach to environment
447:46 - and then i can say environment. uh the
447:49 - environment file and then i can just
447:50 - access the property
447:53 - right so environment and then
447:55 - i can use this environment anywhere so i
447:58 - can just
447:59 - say here console.log environment dot
448:05 - api endpoint and let's save this and see
448:12 - and you have this url available right so
448:15 - here you can see room service line
448:16 - number 18 sorry 44
448:19 - and we have this api endpoint which is
448:20 - available in our config file but what we
448:23 - are talking about here is we are saying
448:25 - this url will be used at multiple plus
448:28 - multiple services what in that case just
448:31 - think about your import
448:33 - right i mean it will be like everywhere
448:35 - i have to give entire path
448:37 - how i can avoid this so this is where
448:40 - the
448:41 - value providers come really comes really
448:43 - handy and we are going to see two
448:45 - examples so first let's see how we can
448:47 - actually deal with this objects right
448:49 - some uh
448:52 - so what i'm going to do is i'm going to
448:53 - create a folder i'll call this as app
448:55 - config so it will uh contain some
448:58 - services related to application
449:00 - configuration
449:02 - so the first thing which i'm going to do
449:04 - is i'm going to create a service so
449:06 - let's see how we can we create a value
449:08 - provider right we i'm going to call it
449:09 - as a service because it is we are going
449:11 - to actually inject it so i will call it
449:13 - as app
449:15 - config
449:16 - dot service
449:18 - dot ts
449:20 - if you are wondering why i am typing it
449:21 - because of course there is no command
449:23 - for it you have to do it manually so the
449:25 - first thing which we are going to do is
449:27 - we are going to create a
449:30 - export constant and i will call it as
449:33 - app service
449:35 - uh it depends i mean if you see i'm
449:38 - using
449:39 - capital letters but it's okay even
449:41 - though you don't use capital letters
449:43 - that's absolutely fine because uh
449:45 - generally
449:46 - we have an habit of
449:48 - mentioning const as capitals but it's
449:51 - not mandatory so choose whatever you are
449:52 - comfortable with and then what i have to
449:55 - do is i have to create a new injection
449:57 - token so i will say new
449:59 - injection token and you can see uh i'm
450:02 - using something known as github
450:04 - copilot that's why i'm getting this
450:06 - autocomplete so i'm going to use it
450:08 - and let's import injection token from
450:11 - angular core and then this is app config
450:14 - right this is actually an interface we
450:16 - are going to create so let's go ahead
450:17 - and create that
450:18 - i will create an interface
450:21 - let's call it as abp
450:24 - config dot interface dot this
450:30 - and let's do
450:32 - let's create an interface
450:34 - and you can mention uh all the
450:36 - properties which
450:38 - belongs to your app configuration and
450:41 - so uh right now what we are going to do
450:43 - is i'm going to use api endpoint this is
450:45 - the only property we have but in case
450:46 - you have more just go ahead and add all
450:48 - the properties here
450:52 - now
450:53 - here i can just use the same interface
450:56 - which we have created
450:59 - and let's import it
451:01 - so this becomes my service this is this
451:03 - is the service we are going to use but
451:04 - we also need the data
451:06 - so by value providers means i am going
451:08 - to provide some value that's let's go
451:10 - ahead and create our value so i am going
451:13 - to create another constant
451:17 - and i'm going to call it as app config
451:19 - and let's provide the value so i here i
451:22 - can say api endpoint because this is the
451:23 - property we have here and then we have
451:25 - to provide the value now
451:27 - what we can do is we can import our
451:30 - environment dot ts file here
451:33 - and
451:37 - slash dot dot slash
451:39 - environment slash
451:41 - one
451:42 - and take the property which we need so
451:45 - we are going to need
451:48 - environment dot
451:54 - api point and now i have to do it at
451:56 - only one place i don't have to repeat
451:58 - this inside edge and every service so we
452:01 - don't have to do that
452:02 - so now this is done so we have our
452:04 - service ready we have sorry we have our
452:06 - service ready we are we have our value
452:08 - ready now let's see how to register this
452:10 - particular service because we have not
452:11 - done this right i mean we don't have
452:13 - anything called
452:15 - here called provided in
452:17 - uh so let's see let's see how to do it
452:18 - so
452:20 - we can go to app module
452:21 - and you know that you can see this
452:23 - providers here this is where you can
452:25 - register yourself so you can say provide
452:30 - sorry
452:32 - it will be an object so i can say
452:34 - provide
452:35 - and here i am going to say provide this
452:38 - particular service
452:42 - and i am going to use a property called
452:44 - use value
452:49 - and inside value
452:52 - i am going to say
452:53 - this is the value
452:56 - and let's import both so i'll just
453:01 - done so we have what we have done so far
453:03 - is we have created a value provider we
453:05 - have registered that value provider now
453:07 - the next step is
453:09 - to use this provider let's
453:11 - do that
453:13 - i am going to go back to roomservice.ts
453:17 - remove this
453:20 - and now we need to access the url from
453:22 - that particular service which we have
453:24 - created so we know we know how to inject
453:26 - a service so let's write that
453:29 - constructor this year
453:31 - and
453:34 - our service name is
453:37 - app service config
453:41 - so
453:42 - if i do this
453:47 - and you can see i cannot
453:49 - right even
453:51 - my intelligence says it it is not
453:53 - something which can be recognized what
453:56 - is this
453:58 - so the way to use the value providers is
454:00 - you have to use
454:02 - something known as inject
454:04 - decorator and then you will pass your
454:07 - service
454:08 - here
454:11 - app service config so let's import
454:16 - now you can see it's it is giving me the
454:18 - path somehow let's change this it should
454:22 - not be src
454:29 - so we have our uh app service we have to
454:32 - use the add inject decorator
454:34 - and now i can say private
454:38 - so i'll call it as config and
454:42 - here we don't have to use type any
454:44 - because we also know the type so let's
454:46 - go back to the surface this is the type
454:48 - appconfig so we can use
454:50 - this particular type here
454:53 - so we get proper
454:55 - intelligence right i mean even the
454:57 - typings
454:58 - and again
455:00 - this is
455:09 - now let's try to access uh the same api
455:12 - endpoint by using this particular
455:14 - service so let's save this
455:18 - go back to the code base and
455:21 - sorry go back to the url
455:24 - and let's see if it is compiled
455:30 - it is compiled so let's see
455:33 - and we have room service initialized
455:36 - here and this is your end point so you
455:37 - can see line number 46 now we are
455:39 - actually getting this value from a value
455:42 - provider rather than actually directly
455:44 - accessing environment dot a value from
455:46 - environment.ts what we are doing is we
455:48 - are we have created an
455:50 - uh
455:52 - injection token or we have created a
455:54 - value provider and then we are using it
455:56 - so this is the way you should be doing
455:57 - that
455:58 - now let's talk about the second use case
456:06 - so if you have uh
456:09 - by learning javascript you might have
456:11 - seen some
456:13 - apis right i mean you may have seen
456:14 - windows we have
456:16 - local storage station storage what in
456:18 - case i want to use those inside angular
456:22 - of course you can because of course
456:23 - that's javascript and angular at the end
456:26 - gives you javascript as an output right
456:28 - and it's a friend it's a front-end and
456:30 - every javascript code is a valid type
456:32 - script code so you can use that
456:34 - but there are some ways so there is
456:36 - there is a way to use it
456:38 - so to do that i will take an example
456:41 - where we will use
456:43 - the local storage service
457:07 - okay
457:08 - so we'll see an example where we are
457:10 - going to use local storage service
457:12 - as an value provider
457:14 - inside angular app
457:16 - so to do that
457:17 - we will create a new file
457:19 - and we will call it as local storage
457:25 - dot token
457:27 - remember any javascript api which you
457:30 - have seen can be used in this way
457:33 - and i just copied some code
457:38 - so here what we are doing is we of
457:40 - course we are creating an injection
457:41 - token we are using provided in root here
457:44 - because i want to make sure that this
457:45 - particular service is reshapable and if
457:48 - no one is using it it the code can be
457:51 - removed it and
457:52 - i'm calling a factory function to return
457:55 - a new instance of local storage that's
457:56 - what we are doing here we don't have to
457:58 - register this service directly anywhere
458:01 - so
458:03 - let's see how we can use it so i'll go
458:05 - to webcomponent.ts and here
458:10 - let's see uh we will inject something
458:13 - will import
458:16 - from
458:17 - dot slash okay
458:20 - dot slash local storage token
458:27 - and
458:28 - now we can use this
458:31 - into our constructor so
458:34 - we will we need to use inject
458:37 - right and then we will call our
458:40 - local storage token which is type of
458:42 - local storage and you can also give type
458:44 - storage so this is any this is actually
458:48 - the type for your
458:51 - let's see
458:53 - yeah this type for your
458:55 - storage api which is which exists in
458:57 - browser
458:58 - so actually typescript also ready has
459:01 - type definition file for most of the web
459:03 - apis or javascript based uh apis which
459:07 - we use generally
459:09 - it's called a file called lib.dom.ts
459:12 - because it's all related to dom right so
459:14 - here uh we can use it in case you get
459:16 - any error while compiling just move it
459:18 - to any that's subject
459:20 - and once this is done let's go ahead and
459:22 - add something to local storage so to do
459:24 - that
459:26 - i just add one value
459:36 - so let's add
459:38 - on ngon init let's add this value into
459:40 - our uh local storage so
459:43 - i'm adding a variable called name and
459:46 - the value is related
459:48 - let's see
459:49 - it this this value will be added once
459:51 - our app is loaded right because it's on
459:54 - engine in it on our root component
459:56 - let's go ahead and see so this is uh
459:59 - where you can verify local storage so
460:01 - here you can go to your
460:04 - application
460:07 - and
460:08 - just see local storage localhost four
460:10 - double zero right so because our
460:12 - application is right now running on
460:14 - localhost four to double zero you can
460:16 - see this value name data notable yep so
460:19 - this is this is where your value will be
460:21 - available don't try to add anything
460:23 - which is secure to your local storage
460:25 - this is just an example how you can use
460:27 - local storage in similar way you can
460:29 - also use session storage so in case i
460:31 - in case you want to use look stress and
460:33 - storage inside your angular application
460:36 - rather than directly using it try to
460:38 - create an injection token like this
460:40 - which like the one which we have created
460:42 - for local storage
460:44 - the only difference would be
460:46 - session storage
460:47 - right
460:48 - and uh
460:49 - even you can use other apis for example
460:52 - window dot for example in case you want
460:54 - to use uh location right so rather than
460:57 - actually injecting location directly
460:59 - which is
461:01 - or accessing location directly which is
461:02 - possible yes of course it is possible
461:04 - try to use the token so you can use
461:06 - location menu bar there are navigator
461:09 - there are a lot of apis which access
461:11 - right i mean
461:12 - you can all you you can use all those
461:14 - apis as a token here rather than
461:16 - actually directly using inside your code
461:18 - base in case you come across any
461:20 - existing code base which is not
461:22 - following this try to refactor i mean
461:23 - you will learn something new so this is
461:26 - it from value providers
461:33 - in this video we are going to talk about
461:35 - angular http and observables
461:37 - this is really important to understand
461:39 - because
461:40 - in your enterprise applications what you
461:43 - are going to do is most of the time you
461:44 - will be interacting with the apis so
461:46 - this is what we are going to learn here
461:48 - how to interact with your apis how to
461:50 - handle uh the http uh calls
461:53 - and how to do
461:56 - different http calls
461:57 - so let's go ahead and see uh the agenda
461:59 - for this particular video so we will of
462:01 - course go through the introduction then
462:03 - we will set up the http client we will
462:06 - use the http client service which is
462:08 - which will be used to make those api
462:09 - calls
462:10 - we will talk about
462:12 - rxjs we'll talk about observables and
462:13 - streams we will see different http
462:15 - methods which exist
462:17 - we will see some examples of rxjs
462:19 - operators
462:20 - and then we will see http interceptors
462:22 - and at the end we will see
462:24 - at the end we will see app initializer
462:27 - so let's go ahead and see uh why this
462:30 - angular http is important so in
462:32 - enterprise application as i said you
462:33 - will be interacting with apis
462:36 - in
462:36 - javascript you might have used hdx or
462:39 - fetch if you have never used it that's
462:41 - absolutely fine that's those are the
462:43 - low level apis which is available inside
462:45 - your browser
462:47 - http client is the service which we are
462:49 - going to use to interact with our apis
462:52 - and destitpic client
462:53 - internally uses rxjs so what is rxjs of
462:56 - course we will see that but let's go
462:58 - ahead and start with setting up our
463:00 - skipping line
463:02 - to use the functionality provided by ctp
463:04 - client to interact with your apis we
463:07 - need to do some configuration
463:10 - so let's go through that those steps the
463:12 - first step is we have to use something
463:14 - called http client module as soon as you
463:17 - see module it means this is something
463:19 - which needs to be registered
463:21 - at your module level
463:23 - a strip client module generally should
463:25 - be registered at your root level because
463:27 - uh
463:29 - you are going to use http calls across
463:31 - your application right so you just need
463:32 - to register it once and that's
463:33 - absolutely fine
463:35 - until unless you are using services
463:37 - and even in that case this will be taken
463:39 - care of okay sorry i just added it to
463:41 - declarations really sorry for that
463:43 - i
463:45 - okay so here it is so we have
463:48 - http client module registered and we
463:51 - have imported it from angular common
463:52 - http remember this
463:54 - angular common http because http client
463:56 - module should be imported from here in
463:58 - case you get an old code base
464:01 - it's possible that uh there was another
464:04 - uh
464:04 - [Music]
464:05 - there was another library called angular
464:07 - slash http so
464:09 - if you are getting something from
464:10 - angular http you are probably on the
464:12 - older version and you should move to
464:14 - angular common http which was of course
464:16 - uh introduced
464:18 - in 2017 so you don't have to go ahead
464:20 - and still use that particular api
464:23 - remember angular slash common slash
464:24 - yesterday this is from where you should
464:26 - be using it
464:27 - so this is first step now we are done we
464:30 - are done with setting up the http client
464:35 - now let's go ahead and see how we can
464:36 - use http client service but before we
464:39 - move into
464:40 - uh
464:41 - start using our http client service we
464:43 - need an api and we don't have any api
464:46 - available as of now so what we are going
464:47 - to do is we are going to
464:49 - use a mock api which i have created you
464:52 - don't have to worry about this i'll
464:53 - share the we will share the code and you
464:55 - can just download it
465:00 - this api is actually written in nest js
465:04 - and it is written using typescript
465:07 - so i'll just do npm start here to start
465:09 - this particular api
465:11 - and it will expose some api endpoints
465:13 - which which we have already written so
465:15 - you can
465:16 - go to rooms controller and you will be
465:17 - able to see aps slash rooms uh this is
465:20 - post this is get this is get by id
465:23 - and this is patch and delete these are
465:25 - different apis which is
465:27 - available and we will be interacting
465:29 - with this api so you can see these are
465:31 - the end points which we get api slash
465:33 - rooms post abs slash rooms get
465:37 - and
465:38 - now let's go back to our code base uh
465:40 - sorry here uh let's go back to our
465:43 - uh application like and the first thing
465:46 - which we need in case you are setting up
465:48 - your
465:49 - http uh or http api or your api server
465:54 - locally you need to create one file
465:56 - which is known as proxy.conf.json
466:00 - is something uh
466:01 - this is something which is available
466:03 - inside documentation so i'll just guide
466:04 - you to the document documentation and
466:07 - uh in next time
466:09 - whenever you want to set it you can just
466:11 - refer the documentation so you can go to
466:13 - angular.io which is of course the
466:15 - official documentation
466:18 - search for proxy
466:39 - let's see
466:50 - um
467:20 - okay let me see
467:33 - you get this set up okay
468:04 - oh so yeah you can go to the
468:07 - documentation and go to uh this
468:10 - ng surf command
468:13 - and in ngsurf you will find
468:15 - one property called
468:18 - proxy
468:20 - yeah proxyconfig and you can just click
468:22 - here to it will take you to the page
468:25 - where all the information is available
468:27 - so we can create a proxy.con.json this
468:29 - is first step which i have already done
468:31 - for us and then you can just copy and
468:33 - paste this uh our api also exists with
468:36 - slash api right so slash api slash uh
468:39 - [Music]
468:42 - so slash ap slash room so we'll start
468:45 - with slash api and this is where the api
468:49 - exists
468:50 - local 3000 so you can verify from here
468:54 - uh this application
468:57 - main.ds and app.listen so right now it
469:01 - is running on localhost
469:03 - 3000
469:05 - and after this there are few steps more
469:06 - which i have already done for us but you
469:09 - can refer it from here we have to
469:11 - actually add one more configuration
469:14 - so we have to add one more configuration
469:16 - inside our angular.json uh the surf
469:19 - command
469:20 - this is the configuration for serve and
469:22 - we have added this inside development we
469:24 - have also added proxy config and path to
469:27 - our proxy.con.json file once you do this
469:30 - that's it you're done right so this is
469:33 - to set up the proxy and now let's go
469:34 - ahead and utilize the service
469:38 - http client service to make our first
469:40 - api call
469:41 - so
469:45 - room service this is uh where we want to
469:48 - go and
469:53 - we are going to use http client service
469:55 - which is available inside angular so
469:58 - we'll say private
470:00 - http and we'll say type of http client
470:02 - let me just remove this and
470:04 - we will import http client from angular
470:07 - common slash http so this is
470:10 - this is imported now we have our strip
470:12 - client service available let's go ahead
470:14 - and make our first api call so here
470:16 - right now we are getting the data from
470:18 - uh of course service itself we have hard
470:20 - coded this data let's remove this let us
470:22 - get rid of it
470:26 - i'll do one a small change as my id at
470:29 - the back end is a string i'll change
470:33 - this room number
470:34 - to b string
470:37 - and
470:39 - probably i have to change at one more
470:41 - place which is this
470:47 - now to get the data in
470:50 - from an api we generally make a get
470:52 - called so get calls can be
470:55 - accessed from the browser itself so
470:57 - let's try to see
470:59 - if that works so i can say localhost
471:01 - 3000 slash aps slash
471:04 - rooms this is where our
471:06 - resources are available and you can see
471:08 - uh we have three records available
471:09 - already and this is our data
471:12 - so
471:13 - here rather than actually getting the
471:15 - data from this dot room list what we are
471:17 - going to do is we are going to call the
471:19 - http get method so there are multiple
471:21 - methods which exist so we have get post
471:24 - put delete patch
471:26 - and there are a few more but we won't be
471:27 - using them uh pro
471:30 - a lot so let's use generally we call
471:33 - like
471:34 - whenever you start working with a new
471:36 - uh
471:37 - sorry whenever you start working with a
471:39 - new framework the first thing which you
471:40 - learned is cloud operation right create
471:42 - rate update delete that's what we are
471:43 - going to do
471:44 - this get method is read
471:47 - so here i'll say this dot
471:49 - http
471:50 - dot get and you can see i'm getting
471:52 - intelligence but i'm not going to use it
471:53 - right now so i'll say so we get and we
471:56 - need an api endpoint right now as we
471:59 - have a proxy server available we don't
472:00 - have to give entire paths so we don't
472:02 - have to mention localhost 3 3000 slash
472:05 - api slash rooms what we can do is i can
472:07 - we can mention slash api slash rooms
472:10 - this is it
472:11 - because of the config proxy config which
472:14 - we have so proxy will redirect or this
472:17 - call slash api rooms to localhost
472:21 - 3000
472:23 - which is available here
472:24 - right and now let's say let's save this
472:29 - and
472:31 - once we go back to our component we will
472:33 - start getting an error here
472:35 - so
472:37 - this code is commented right now but
472:39 - let's uncomment and if we will start
472:41 - seeing an error it says this dot rooms
472:44 - have some swiggy lines let's see what it
472:46 - says
472:46 - it says type observable of object is
472:49 - missing following properties
472:51 - so it is saying okay whatever data you
472:53 - are trying to actually assign this
472:55 - assign it to room list is
472:57 - is of something
472:59 - of type called observable
473:01 - what is this observable
473:03 - so let's uh see this first what i will
473:05 - do is we'll just con
473:07 - do a console.log to try to understand
473:09 - what this observables and everything is
473:20 - and let's go to console
473:23 - and we can see this right so we have
473:26 - observable which says operator and there
473:29 - are something called source
473:31 - but there is no data
473:34 - so let's try to understand what
473:35 - observable means
473:38 - angular uses a library called rxjs
473:40 - internally to work with data
473:44 - and it is also
473:46 - used inside your http service as well
473:50 - even there are few other places like uh
473:52 - we we will be using it in forms we will
473:54 - be using it in
473:57 - routing so multiple places so alex just
474:00 - let's see what is this
474:03 - so this is the official uh web page here
474:05 - it's just dev so you can go ahead and
474:07 - see what rxjs is it's a there is a small
474:10 - introduction which is
474:12 - written here so it's a library it's of
474:14 - course a library to work
474:16 - with
474:18 - even it's a event best program uh sorry
474:21 - to work with event best programs using
474:23 - observable sequence so what what do you
474:25 - mean by observable sequence i mean
474:28 - probably you might have
474:29 - never heard about observables
474:32 - it's a because it's a of course a
474:33 - different library and generally we don't
474:35 - use that those libraries but rxjs is one
474:38 - of the powerful library which which
474:40 - which is available here and can be used
474:42 - with any
474:44 - framework so it does not that it it's
474:47 - only technically coupled with angular
474:49 - it's uh it's used in react it can be
474:52 - used in woo it can be used in swelt
474:54 - anywhere you want
474:56 - so rxjs
474:58 - has a concept that whatever data you get
475:02 - is a stream of data
475:04 - right so what do you mean by stream for
475:06 - example uh you might have already used
475:09 - lot of streaming services
475:11 - so let's go to youtube let's uh
475:14 - let's go to netflix let's go to amazon
475:16 - what are those they are your streaming
475:18 - services like amazon of course amazon
475:22 - not the
475:23 - shopping app
475:24 - right amazon prime
475:26 - so uh what you get is you get
475:29 - a stream of data right i mean that they
475:31 - are streaming some data to your
475:35 - your devices
475:37 - once we say stream so it's like once you
475:40 - what happens uh when you
475:42 - when you want to access some streaming
475:44 - services the first step is you subscribe
475:46 - to it right i mean of course you you
475:48 - need to create an account you subscribe
475:50 - and then you can start getting those
475:51 - streams the similar concept works inside
475:54 - rxjs so
475:55 - once you want to get some data the first
475:57 - thing which you have to do is you have
475:59 - to of course someone needs to publish
476:01 - the data that's that's of course true
476:03 - because of course if no one is
476:04 - publishing the data or no one is
476:06 - publishing the streams you will not get
476:07 - anything
476:08 - but as a user
476:10 - as a developer what you should be doing
476:12 - is you should be subscribing to the
476:15 - stream to get the data
476:17 - it's a continuous stream generally uh
476:20 - let me just try to explain you as a
476:23 - common
476:24 - term which is used a lot called push
476:26 - versus pull architecture
476:29 - let's go back to our code piece i'm not
476:31 - going to write entire code but yeah just
476:33 - just an example
476:36 - so here let's say
476:39 - if we are not using stream
476:41 - what you will do is you will call let's
476:45 - say get data to get the data
476:47 - in case let's say we perform some
476:50 - operation
476:51 - we add the data
476:54 - so we add a new data what you need to do
476:57 - is in case i want to get the latest data
477:00 - generally we do
477:02 - sorry generally we do is call the get
477:05 - data again
477:07 - right this is this is something which
477:09 - you we have been doing from long time
477:11 - right in javascript
477:12 - we have been doing from long time so
477:15 - whenever you
477:16 - modify the data what you do is you get
477:19 - the data again what you do is you pull
477:21 - the data
477:22 - this is called pull pull based
477:23 - architecture so every time you update
477:26 - something just go ahead and pull the
477:27 - data
477:28 - rxjs works on a push architecture
477:32 - it says
477:33 - once you get the data
477:36 - it is continuous stream
477:40 - continuous stream of data
477:44 - so
477:45 - in case
477:48 - you add some data you add the data
477:51 - directly into the stream
477:55 - and once this stream is updated
477:58 - anyone who has actually subscribed to
478:00 - the stream will get the data you don't
478:03 - have to call the get data function again
478:05 - to get the data that's full based
478:07 - architecture here we are saying whenever
478:10 - you update the stream you will get the
478:12 - updated data that's push based
478:14 - architecture you are not doing it doing
478:16 - yourself
478:17 - actually stream is pushing the latest
478:18 - data to you
478:20 - so hope you understand understood this
478:22 - because this is really important to
478:23 - understand rxjs and streams
478:25 - i'll just leave it here in case you want
478:27 - to refer this again so
478:30 - what we are going to do is we are going
478:32 - to get our of course rooms data first
478:34 - thing in case i want to access this data
478:37 - what i have to do is i have to go ahead
478:38 - and subscribe to it and how we can
478:40 - subscribe using uh
478:42 - rhs
478:44 - it has a subscribe method so you can to
478:47 - get rooms
478:49 - dot
478:51 - let's see
478:55 - subscribe and here
478:58 - we can say this dot rooms list is equals
479:01 - to rooms but we are getting an herb
479:03 - again i mean why
479:05 - let's try to read the error
479:07 - this is one of the
479:08 - most important skill you should learn
479:12 - in all the modern or the latest
479:14 - frameworks which we have available
479:15 - nowadays the developer experiences
479:17 - really the developer experience is
479:19 - really great what you mean by developer
479:21 - experience
479:22 - so it's all these things right errors or
479:25 - messages while developing so it guides
479:29 - you what the actual issue is so it says
479:33 - that
479:34 - this room list is of type this room list
479:37 - array but
479:38 - you are trying to assign it to an object
479:42 - and of course there is a mismatch in
479:43 - data type
479:45 - what we can do here is we can go ahead
479:47 - and change uh in get rooms we can
479:49 - actually ask our http service to
479:51 - actually give me the data in this
479:54 - particular type so i can use these
479:57 - generic syntax and i can say room
480:00 - list
480:01 - so
480:07 - i'll start room yeah
480:09 - room list array
480:11 - so we are saying whatever data i am
480:12 - going to get just transform the data
480:16 - into this particular object and then
480:18 - give it back to me and you have your
480:20 - data available and let's see what else
480:23 - we are missing we are just missing one
480:25 - bracket
480:26 - and let's save this and let's go back to
480:28 - our front end and let's click on toggle
480:30 - and you have the data you just made your
480:33 - first http get call from an api using
480:36 - angular
480:37 - you can go to network and you can just
480:40 - go to uh
480:41 - [Music]
480:43 - fetch xsr
480:44 - and you will be able to see your request
480:46 - so here we have our get request
480:50 - uh which returned us status code 200.
480:53 - you can go to preview to see the data
480:55 - which is written
480:56 - and these are requested us and request
480:59 - response address so
481:01 - this is your plain link
481:04 - json response and this is your formatted
481:06 - response
481:07 - and it also tells you uh when it started
481:10 - and how much time it took so it was
481:12 - completed around in 11 11
481:15 - 0.89 milliseconds so it took this is how
481:17 - much it took to actually
481:20 - download the content it was waiting for
481:22 - 11.32 milliseconds to complete the call
481:24 - but total if you see
481:26 - uh here
481:29 - 31.88 milliseconds so this is absolutely
481:32 - fine i mean you should not your api
481:34 - should respond within one second and
481:36 - 31.1 uh thirty point eight thirty one
481:38 - point eight eight millisecond is perfect
481:40 - i mean of course it's a local database
481:42 - and we sorry it's a local api and we
481:44 - just have three records to fetch but
481:46 - yeah congratulation you just did
481:48 - your you just made your first api call
481:51 - and
481:53 - you have rendered the data on your ui
481:58 - so now we understand how to get the data
482:01 - from http but i'll focus again on rxjs
482:03 - because this is really important to
482:05 - understand so we saw that okay rxjs is
482:08 - something which gives you stream of data
482:10 - and it is used for writing reactive
482:12 - programming and we also discuss about
482:14 - pull versus push what is the difference
482:17 - and it gives you like it gives you
482:20 - observables like stream of your data
482:22 - which we can subscribe to what we are
482:24 - going to see now is
482:26 - we are going to create this
482:28 - observable
482:29 - by using rxjs itself
482:31 - not using http
482:33 - and see how it works so
482:35 - let's go back
482:38 - to our code base and let's create an
482:41 - observable by r1 so
482:44 - what i'm going to do is i'm going to
482:46 - create
482:47 - and
482:48 - stream i'll call it as a stream is
482:50 - equals to new
482:52 - observable
483:06 - see
483:07 - survivable is something which should
483:09 - come from rxgs okay it is not imported
483:15 - and we'll remove this
483:17 - right now
483:21 - okay
483:27 - and now here in observe
483:30 - we get an observer which we will call a
483:33 - method called next
483:35 - so there are multiple methods which
483:37 - exist on your observable so you have you
483:39 - can see you have unsubscribe
483:41 - you have complete you have error you
483:43 - have remove and add
483:44 - here what we are going to do is we are
483:45 - going to call next what you mean by next
483:48 - so whenever you call a next on your
483:51 - observer it will be emitting a new data
483:54 - so whoever is of subscribing to this
483:57 - stream will get this data so let's say
484:00 - i'm
484:01 - saying the next data is
484:03 - uh user
484:06 - one
484:07 - and i can of course call it multiple
484:09 - times so i can say okay this is
484:12 - observer
484:13 - dot next user two
484:16 - and
484:18 - next user three
484:20 - and i can also call observable
484:22 - observer dot complete so whenever this
484:25 - of course every stream will finish
484:27 - somewhere
484:29 - so i'm saying whenever this uh
484:32 - after this just go ahead and complete
484:34 - the stream so you can see i'm going to
484:36 - call complete method and this is where
484:39 - my stream completes
484:41 - we can also handle so you can see it
484:44 - says observer dot
484:46 - uh we have one more method error right
484:49 - so we can also handle the error in case
484:51 - what uh if error there is any error
484:54 - right so we can just say okay in case of
484:56 - error just raise an exception and that's
484:58 - it so we'll say this
485:00 - uh i mean we are not going to use it we
485:02 - will see it later on whenever
485:04 - a stream
485:06 - raises an error how to handle those so
485:08 - we'll see that as well
485:10 - so now this is our our stream which we
485:12 - can subscribe to which has an observer
485:15 - and which can
485:17 - which can
485:18 - raise or which can give you new stream
485:21 - every time you have you are calling this
485:24 - let's go to stream ngo init and here
485:26 - i'll say this dot
485:28 - stream
485:30 - and we will subscribe to this
485:32 - right so we'll subscribe and we'll say
485:34 - this is
485:35 - our data
485:37 - and we'll call
485:39 - console.log and we'll see what the data
485:42 - is
485:45 - let's go back to our hotel inventory app
485:48 - let's go back to the console and
485:51 - you can see you have user one user to
485:52 - user three after this your stream gets
485:55 - completed right so
485:57 - we are going calling complete
486:00 - let's try to
486:05 - call this again so we are calling it
486:06 - multiple time it is anyways happening
486:08 - multiple times right now so you can see
486:10 - user one user to user three and again
486:12 - user one user to user three is getting
486:14 - uh
486:16 - getting uh rendered so we are
486:18 - subscribing to this stream multiple
486:19 - times and we get the same data every
486:21 - time and after this your
486:23 - your stream completes
486:25 - inside this subscribe also you can get
486:29 - three values so let's go ahead and see
486:31 - uh the definition of course so you have
486:34 - next value you have error
486:37 - and you have complete
486:39 - three values so
486:42 - you can actually write some this as
486:49 - this is our next value so
487:54 - so once we subscribe to this we get
487:56 - three times of three types of data so
487:58 - you can see we get next
488:00 - which is of course next value so we'll
488:02 - we can also do something like this on
488:04 - complete i am going to say
488:07 - just go ahead and
488:08 - complete uh sorry
488:12 - we'll just print that this is this
488:13 - stream is completed
488:15 - and in case you get error you can also
488:18 - just say okay uh there is some error
488:20 - right so whatever stream whatever the
488:23 - error is you can just print it
488:26 - let me just format
488:29 - so we have next complete an error
488:32 - let's go to our ui again and you can see
488:36 - it says user1 user 2 and this is where
488:38 - com your stream completes
488:40 - then again user 1 user 2 user 3 and your
488:43 - stream completes right
488:51 - okay this is uh at another place where
488:53 - it is getting
488:54 - called so user room component
488:57 - this is the one
488:59 - okay because our rooms component is
489:01 - getting rendered twice it is getting
489:02 - called wise that's that's that's the
489:04 - thing
489:04 - uh i think it has to do with this
489:08 - right so we have portal rooms here and
489:10 - let's come
489:12 - comment this one so we will just use
489:14 - this
489:15 - and it will be rendered only one so you
489:16 - have user one user two three and then it
489:18 - is completed and then you have user one
489:20 - user to user three and then your uh api
489:23 - uh sorry your stream completes so
489:27 - this is what
489:28 - will happen this is what we will be uh
489:32 - we won't be using this syntax uh um
489:36 - we will be using this syntax a lot of
489:38 - times even not this syntax we will see
489:40 - what is the standard way this is just to
489:43 - make sure that you understand streams so
489:45 - what uh we have as part of uh streams is
489:48 - there are two parts
489:49 - one is of course your observable which
489:51 - will be subscribed right which your
489:53 - users can subscribe to and
489:56 - internally observable will have an
489:57 - observer which will observe the data
490:00 - if there is a new value which is
490:02 - available now where this is useful so in
490:04 - case let's say you are working with some
490:05 - real time database
490:07 - right so whenever a new value is like
490:10 - pushed because it's a push based
490:12 - architecture
490:13 - your observer will actually observe okay
490:16 - there is a new value so what i have to
490:18 - do is i have to call next internally
490:20 - this is what it will be doing internally
490:22 - it will call next method so whoever has
490:26 - subscribed to it gets the new value
490:30 - even in case it uh it also has complete
490:33 - and error so in case you get some error
490:36 - or your stream completes that's it if
490:38 - your stream completes it will not going
490:39 - to give you anything in case
490:41 - error is sent it will capture that error
490:44 - and it will send it to you you don't
490:46 - have to go ahead and create this
490:48 - by your own you will be using some
490:50 - operators of course we will go ahead and
490:51 - see that
490:53 - this is just to let you know how
490:54 - observables internally work
490:57 - and what's what you get once you
490:59 - subscribe to it you get next complete an
491:02 - error these three methods are given to
491:03 - you
491:04 - generally what we do is we work with
491:06 - data but you should also work with try
491:08 - to handle the errors gracefully as well
491:10 - i mean your user should not see the
491:13 - error right red lines in your once your
491:15 - application is available
491:17 - so
491:18 - we will see how we can also handle error
491:20 - in case we get it from the api so this
491:22 - is this is all about observable streams
491:25 - observable observer
491:27 - and how you can create it manually by
491:29 - using observable class which is
491:31 - available here right so if you go to
491:33 - this rxjs observable you will see this
491:35 - is a class and it also
491:38 - has time so right now if you see uh let
491:41 - me just show you uh
491:43 - here so it says observable of unknown
491:45 - because we have not given any type uh we
491:48 - can actually make it string because
491:50 - right now i'm working with string so it
491:52 - will know okay this particular stream
491:55 - will have string of data you can make it
491:57 - number in case you are working with
491:58 - number but yeah this is higher level api
492:01 - you don't have to do it you don't have
492:03 - to use it directly inside your code
492:05 - because most of the time you will be
492:06 - using http and
492:08 - you will getting you'll be getting the
492:09 - data from there or
492:12 - you will directly work with streams by
492:15 - using other methods so we will see those
492:17 - right now this is what we have
492:20 - in rxjs right so
492:23 - and observables now let's go ahead and
492:25 - move into other methods
492:29 - move on and see other operations right
492:31 - now we have done get operation and we've
492:33 - discussed something about rxjs
492:36 - now we will next we will try to do post
492:39 - operation right so we uh we are done
492:41 - with red
492:42 - let's do it let's see create
492:45 - and
492:49 - let's go back to our code this is our
492:50 - service and we will call at rooms
492:54 - add room okay we will pass one room not
492:57 - rooms
492:58 - and
492:59 - here we are going to do return this dot
493:01 - http dot post
493:02 - api slash rooms and the room data which
493:05 - we have available right
493:07 - so our service is done this is this is
493:09 - uh this this is the
493:11 - a service is done so this is it
493:14 - but you have to
493:15 - be aware whenever you are working with
493:18 - apis you should be aware of request
493:20 - format as well as response format
493:22 - so let's uh
493:24 - let me just check what is the request
493:26 - and response format for my this
493:28 - particular api so we have this
493:31 - post this is the create and create room
493:34 - which is
493:35 - which requires room number room type
493:37 - amenities everything apart from
493:40 - the room number
493:41 - which will be created for us
493:44 - and let's go ahead and see
493:50 - the service
493:51 - just to see what will be the response
493:54 - so in create this is just
493:57 - of course i'm not accessing any database
494:00 - so
494:01 - okay i'm returning the room's entire
494:04 - list of data which is which is added now
494:06 - so let's see uh so we have this our
494:10 - post
494:11 - generally you get the latest record
494:13 - which is added but it's up to you i mean
494:15 - it's it's a really bad practice to
494:17 - return all the data which is added but
494:19 - this is just an example right so i'm
494:21 - just going to return all the data which
494:23 - is available
494:25 - after adding this record as well
494:27 - and now let's go back and
494:30 - this is our ad room function remember we
494:32 - just wrote this
494:34 - here
494:35 - we will call
494:36 - will recommend this and we will say this
494:39 - dot
494:40 - room service dot ad room and we will
494:42 - pass this room as
494:44 - uh the data i will comment out room
494:46 - number uh which is which won't be passed
494:49 - here
494:50 - let's see if it gets any uh it gives us
494:52 - any issue otherwise this should be fine
494:54 - and this dot room list
494:56 - we will assign
494:58 - whatever data we are getting from this
495:00 - response to room list
495:03 - right so we uh
495:05 - let's go ahead and
495:09 - try to
495:15 - let me just close other browsers
495:18 - and
495:20 - we have our get data right so this is
495:23 - available get call succeeded and we got
495:25 - our data from the api we want to just
495:27 - add functionality so let's
495:30 - click on add room let's go to network
495:32 - first because this is where we will be
495:33 - able to see our request click on add
495:36 - room
495:37 - and we got
495:39 - 201 so if you see
495:41 - we have 201 created it means my api was
495:44 - successful we also got the latest record
495:46 - which is added here you can see the id
495:48 - is alphanumeric because it is generated
495:50 - using uuid which will be unique id
495:54 - and its alphanumeric string so
495:57 - let's see the payload so this is the
495:58 - payload which is which we have sent to
496:01 - our api and
496:03 - of course this is uh this is the
496:04 - response which we have received and this
496:06 - is json response in case you want to see
496:07 - it and you can also see other
496:09 - information right so your timing and
496:12 - everything
496:13 - so
496:14 - this is it this is how you make a post
496:16 - call i mean in case you get a single
496:17 - record of course you have to try it uh
496:20 - you have to go ahead and see i mean how
496:22 - to handle that data but right now i'm
496:24 - returning all the
496:25 - record including the current record so i
496:27 - get everything which is available
496:31 - and i can add more so you can see
496:33 - right
496:34 - so you have
496:35 - those different records with different
496:37 - id the same record we added with
496:39 - different id
496:40 - right now i'm
496:42 - uh sorry right now we have our hard
496:44 - footed the data because we don't have
496:46 - any
496:47 - form
496:48 - in future we will replace this with the
496:50 - form that's what we are going to do
496:52 - so
496:53 - let's move on and make our next api call
496:56 - which is now update
496:58 - so let's let me just check quickly what
497:01 - is the update
497:02 - api looks like
497:07 - okay so this is my update and it takes
497:10 - the data and
497:12 - updates the
497:15 - data and gives me back okay let's try to
497:17 - make an update call and here
497:20 - what we are going to do is of cour again
497:22 - i am going to hard code some data
497:25 - just to see how to make this call right
497:27 - and
497:28 - this also returns the entire records
497:31 - remember this this also returns entire
497:33 - record in reality you are not going to
497:34 - get this you are not going to return
497:36 - entire data probably you will get
497:38 - the id right so this is updated or not
497:41 - that's it
497:49 - so let's go ahead and
497:52 - add a button
497:53 - and
497:56 - i'll call this as edit
497:59 - room
498:01 - and let's implement this function
498:19 - okay so edit room function and as we
498:22 - said we are going to
498:25 - just use the dummy data here as well so
498:27 - i'll take it from this
498:32 - and i'll
498:33 - say uh room number three
498:36 - so this data will be updated for room
498:39 - number three
498:45 - and we will call it as
498:49 - edit
498:50 - room again in future we will have a form
498:53 - from where we can edit this record so
498:55 - let's see uh what we have at room number
498:57 - three which is private suit
499:00 - and 15 000 so i think we have a
499:03 - different yeah so we have different
499:05 - record here so this will be updated with
499:08 - room number three
499:09 - let's write the uh method so i'll say
499:11 - this is a date
499:13 - room
499:15 - which will get a room data and will
499:17 - return
499:23 - so i'll say this.http.put and
499:26 - again i'm returning the entire list so
499:28 - i'm saying okay this is the type of
499:30 - response and then
499:32 - i did we'll have the same api and this
499:34 - is our data
499:36 - let's go ahead and save this
500:08 - thank you
500:33 - so let's see
500:35 - let's try to make an edit call so we
500:37 - have
501:16 - so we have our edit call here so let's
501:19 - click on edit
501:21 - edit room and
501:25 - we don't have any ah okay one second
501:28 - did we
501:29 - call this particular api i don't think
501:32 - so
501:33 - no we didn't write so we have to save
501:35 - this dot
501:36 - s t e d b
501:38 - room service
501:40 - dot edit room and then we will subscribe
501:42 - to the to the data and then we will just
501:45 - mind it
501:46 - i'll say this dot room list is equal to
501:47 - data because we are getting everything
501:49 - back
501:51 - let's save this
501:55 - and
501:58 - go back to the ui
502:01 - see the data so we have this one
502:02 - available click on edit
502:04 - and okay it gave some error let's see
502:09 - let's go to the network and uh we have
502:11 - api rooms
502:13 - put
502:14 - 404 not found okay okay
502:16 - let's see for what we have to what we
502:19 - have for ot here
502:21 - okay we don't have put okay
502:25 - but we have
502:28 - rooms post get patch and delete okay
502:31 - this is
502:34 - let's see if we can change get patch
502:38 - which takes an id and
502:51 - let's see if we can make it put
502:54 - and we need to pass an id then let's
502:57 - run this again
503:02 - so i'm restarting the server so it
503:05 - uses put uh
503:07 - it actually captures the put api as well
503:09 - but we have
503:10 - yeah now we have put so it says it is
503:12 - available on api slash room slash id so
503:15 - we have to pass the id in the request
503:18 - itself so let's go ahead and see how we
503:19 - do that
503:28 - so we'll go to edit rooms and
503:30 - this is where we have to pass room slash
503:32 - id so we'll say okay i am going to use
503:35 - this this tick operator and
503:38 - i'll say slash
503:39 - dollar
503:40 - and here i'll say room
503:42 - or dot
503:45 - room number which is the id for us and
503:48 - let's go ahead and see let's uh
503:50 - go to the browser and see the data or
503:52 - see the request which is being passed
503:55 - let's click on
503:57 - let's go to the network we are already
503:58 - on the network tab let's click on edit
504:00 - room and we have 200 okay yes we made
504:03 - our uh put call as well so we have this
504:06 - payload
504:07 - and you can see uh the data is updated
504:10 - as well right so we uh earlier it was
504:13 - something else now we have same data
504:14 - which we had sent here available in our
504:17 - table so
504:19 - you can see your payload you can see
504:22 - your request it says localhost
504:25 - 4000 api slash room slash 3.
504:29 - so this is how you can make a put call
504:31 - so
504:32 - ah this is this is uh let's see the
504:35 - delete next
504:42 - so i'll say delete and
504:44 - if you see delete also requires the id
504:46 - to be passed so i am going to
504:50 - do is
504:51 - i'll say just id just type of string
504:54 - you don't need to send the entire data
504:56 - to delete so and
504:59 - delete also does not return anything so
505:01 - you can see okay
505:04 - here
505:06 - right now it returns the id
505:09 - that's it right so it returns the uh
505:12 - it returns the data apart from this id
505:14 - we as we said this is a dummy api so i'm
505:17 - returning all the data but in reality
505:19 - you will find that delete will never
505:20 - return anything that's that's uh that's
505:23 - true
505:24 - and let's call
505:29 - let's see
505:30 - this is delete room
505:33 - and here
505:34 - we will save this dot
505:37 - delete room dot sorry this dot
505:42 - your service room service
505:45 - delete room and i am getting the data
505:48 - back again as i said i am
505:50 - giving the entire record and let's try
505:52 - to
505:53 - delete this one with room number three
505:57 - home surface
506:00 - delete okay
506:02 - and let's try to assign this data here
506:07 - so we have let's see api slash room
506:09 - slash id this is how our request looks
506:11 - like right now api slash room slash id
506:13 - we don't have to pass any payload to
506:15 - delete
506:17 - go back and uh we need of course and
506:19 - delete from delete button available to
506:22 - call the delete so i'll say okay this is
506:25 - a delete room
506:27 - and
506:30 - we will be calling this delete room
506:32 - function from here
506:34 - and let's go ahead and see the data
506:36 - first and let's click on delete room and
506:39 - done so now we have learned about the
506:42 - delete function as well right now you
506:43 - can see it returns something but in
506:46 - probably in real time your real-time
506:47 - application it will just give you
506:49 - information about okay whether it this
506:51 - data is related or not or in case you
506:53 - have received some
506:55 - uh other error right that might that you
506:57 - might get but delete gen generally just
506:59 - performs a single operation okay just go
507:01 - ahead and remove this data and that's it
507:03 - and
507:05 - in in case you are also taking care of
507:06 - your apis make sure you don't delete the
507:09 - data from database always prefer soft
507:11 - delete over heart delete so soft delete
507:14 - it means you
507:15 - have some flag which we just turn on so
507:18 - probably you can just have a column
507:20 - called deleted and just mark it as yes
507:22 - deleted yes and that's it
507:24 - so that's it from the crowd operation
507:26 - you now understand crud operation we
507:28 - will see
507:29 - some of the rxjs operators next and
507:33 - then we will
507:34 - wrap up the http method by after
507:36 - completing few more videos like fbp app
507:39 - initialize
507:41 - now next what we are going to do is we
507:44 - are going to explain explore one more
507:45 - api which is really powerful it gives
507:48 - you more information about your http
507:50 - call and it is known as request so
507:54 - one thing uh before we go ahead and
507:55 - implement this request api i need an api
507:58 - which has lot more data
508:01 - so
508:02 - what we are going to do is we are going
508:04 - to use a dummy api which gives us around
508:06 - more than more than 4000 records
508:08 - and
508:09 - json placeholder
508:11 - is one of the dummy api which is which
508:13 - exists it's a fake rest api
508:16 - and it has a method called
508:18 - photos
508:20 - which gives us 5000 records which will
508:22 - be sufficient
508:23 - which actually suits the purpose for
508:26 - this particular example
508:29 - so let's go ahead and do that before
508:32 - we move into this i'll just make one
508:34 - more change let me just close all the
508:36 - files
508:42 - and in rooms component
508:46 - i'll just talk change the value of
508:48 - toggle because right now by default the
508:50 - rows are written which we don't want to
508:53 - so let's change height rooms to
508:56 - [Music]
508:58 - true and i think it should work
509:02 - let's uh write this api call as part of
509:06 - room service itself
509:09 - and i will we will call it as get photos
509:15 - this api is known as request so the
509:17 - first thing which we have to do is we
509:19 - have to go ahead and create a request
509:20 - http request so let's go ahead and see
509:22 - how we do that so i'll create a constant
509:26 - request
509:27 - and is equal to we'll say this dot
509:30 - sorry
509:31 - monitors dot will say new http request
509:35 - which
509:37 - you can see actually comes from
509:39 - here http request which is coming from
509:42 - here let me just remove this yeah which
509:45 - comes from angular slash common slash
509:46 - scp
509:49 - and we are going to so let's go ahead
509:51 - and see the uh payload so we can
509:53 - actually pass
509:54 - several methods we have get head boost
509:57 - sorry get head json b options uh but
510:00 - remember this doesn't work for post
510:02 - because post is not here right
510:04 - and uh we will be calling get method and
510:07 - this is the api which are which we are
510:09 - going to call
510:10 - sorry
510:11 - let me just check
510:14 - this in placeholder
510:18 - and let me just copy the url again
510:23 - in case you are trying for yourself you
510:24 - can also refer this json placeholder api
510:27 - for your your project
510:32 - so this is the api and now it needs some
510:36 - we need to pass some configuration here
510:38 - so let's go ahead and see what are those
510:40 - configuration so we are going to use
510:42 - report progress
510:43 - for this particular example that's
510:47 - and
510:49 - now
510:53 - we are going to pass this http request
510:55 - to our request method so let's do return
510:58 - this is not http request and we are
511:00 - passing this particular request
511:03 - and we need to create the interface as
511:06 - well because we need to provide the
511:08 - typing we will do that but i mean that's
511:11 - that's for you you can try this out you
511:13 - can just refer
511:15 - the metadata or you can refer the
511:17 - properties from
511:18 - this particular url just a placeholder
511:20 - type called typecode.com photos
511:23 - and it gives you response so you know
511:26 - what type of response you have and then
511:28 - you can create your interface based on
511:29 - it
511:35 - so you have album id title so all these
511:37 - parameters
511:39 - now once this is done let's go ahead and
511:40 - call this method
511:42 - inside room component.ds i'm going to
511:44 - call this method
511:46 - i'm going to call this method on
511:47 - ngoninit this is just an example right
511:50 - so in case you need to use this
511:52 - you can so let's see what are as i said
511:56 - this is going to give you more
511:57 - information about your http request so
511:59 - let's see what those information i'm
512:01 - talking about
512:03 - so i'll say this dot
512:04 - room service
512:06 - dot get photos
512:09 - and here i'm going to do subscribe and
512:11 - let's see
512:13 - the first uh thing which you should
512:15 - always do is just check what the data is
512:18 - or how your data looks like
512:20 - so let's see uh so
512:22 - i'm saying console.log data and
512:25 - go to console
512:28 - and
512:29 - this room number component.ts line
512:31 - number 66
512:33 - and let's see the response so
512:35 - remember earlier whenever we
512:37 - subscribed to our data what we got we
512:39 - got the data that's it
512:41 - but here your rooms component is
512:43 - actually giving you more than this
512:45 - it is giving you entire http response
512:48 - which has lot of information which has
512:51 - body status code status text
512:54 - but
512:55 - one more thing
512:56 - if you notice
512:58 - your http
512:59 - call
513:01 - which you made using http request
513:04 - and then you subscribe to it it is
513:05 - actually
513:07 - printed multiple times so let me just
513:09 - start from the top right so here we
513:11 - don't have anything but
513:13 - we have to see for line number 66
513:16 - so here so first is here so you can see
513:19 - it has some information it says http
513:21 - header response
513:23 - so it says okay
513:25 - uh
513:27 - your
513:28 - request to the server is sent this is
513:30 - what we get
513:31 - this is what information we get here
513:34 - okay and now this is also 66
513:37 - and
513:38 - here it starts loading the data
513:57 - okay so here you can see at this line
514:00 - again this is line number 66 so this is
514:02 - where it actually start loading the data
514:06 - so it also gives
514:16 - so it also gives you information
514:18 - how much data is loaded so you can see
514:20 - here line number 66 again line number 66
514:23 - here
514:24 - same if you see object type 3 and how
514:26 - many bytes are loaded here again and
514:29 - then finally
514:30 - when you get the
514:32 - data it gives you http response why this
514:35 - is printed twice because
514:37 - we are loading it twice right so you can
514:38 - see here it's the same component a room
514:41 - component getting called twice so you
514:43 - can you get same information again and
514:45 - again let's hide one so i can we can go
514:48 - to app component dot
514:50 - html
514:51 - and
514:52 - inside this
514:55 - and we will so we will see get some
514:58 - sorry we'll get
515:00 - a small log to work with and yeah so now
515:04 - at the end we have this http response
515:06 - what you can achieve using this so let's
515:08 - say if you have an api which takes some
515:10 - time to load data and you have a lot of
515:11 - records to display for example the same
515:13 - example right we have 5000 records so we
515:16 - don't want to actually
515:18 - make made sorry we don't want to you
515:21 - make user think that this is hand the
515:23 - application is hanged right now
515:25 - rather you can display the user that
515:27 - okay this many devices are downloaded
515:30 - and you can probably show some loader
515:32 - right and
515:33 - based on that
515:34 - uh your user i mean your
515:37 - even your application will be
515:39 - interactive rather actually just being
515:40 - there and user thinks that okay there is
515:42 - nothing which is happening
515:44 - so let's see how we can read this
515:46 - information
515:48 - let's go to room component.ts
515:50 - so this data is actually not the data
515:53 - it's its event so if you see there are
515:56 - multiple events which is being called so
515:58 - i'll call this as
516:00 - event
516:02 - and then
516:04 - here
516:05 - what we can do is we can subscribe to
516:07 - multiple
516:08 - events so i'll say okay
516:14 - let's use switch
516:20 - okay looks like some
516:24 - okay
516:29 - switch based on the event type
516:32 - i'll say case uh i'll uh first let's see
516:36 - http event type which we have to
516:38 - import
516:39 - http event type is what is going to give
516:42 - you those information so whether your
516:44 - request is sent
516:45 - i mean in case it's an upload event
516:48 - if upload is in progress if it is
516:51 - download
516:52 - what is the response editor whether our
516:54 - request is actually sent to the server
516:56 - or not in case uh there is some problem
516:58 - communicating with server you will get
517:00 - an error here
517:01 - and let's go ahead and do that so first
517:03 - and we are going to see we are going to
517:06 - say okay
517:07 - [Music]
517:13 - so in case
517:14 - the request is sent i will say okay
517:16 - console
517:20 - dot log request has been made
517:22 - and of course don't
517:24 - miss the break
517:25 - and then case and say this is
517:27 - http response setter
517:30 - and say console
517:32 - and
517:33 - here we are going to say
517:37 - request
517:42 - success
517:45 - and then
517:46 - case
517:47 - this is uh
517:48 - important so we are saying okay case
517:50 - http event download progress and here
517:53 - what you can read is uh let's create a
517:55 - variable i will say this is so
517:58 - sorry
517:59 - total
518:00 - bytes so this event is actually going to
518:03 - give us
518:07 - how many bytes are downloaded so what we
518:08 - can achieve here is we can say this dot
518:11 - total bytes
518:13 - plus is equals to
518:16 - event
518:18 - and
518:20 - if you try to access right now you will
518:21 - get two properties total and type so
518:23 - total can be uh
518:26 - sorry total can be null while you are
518:29 - downloading the data so what we need is
518:31 - loaded so we need to show how much data
518:33 - is loaded and
518:36 - that's
518:38 - about this and finally we will handle
518:41 - the response
518:42 - and now if i do console.log
518:45 - and
518:47 - let's consider console.log
518:51 - again so if we try to access event dot
518:54 - you will see you will get uh many
518:56 - properties and these are the properties
518:58 - which you generally get from an api
519:01 - let me show you
519:04 - here so if you go to network and click
519:06 - on rooms
519:08 - click on headers and you have requested
519:10 - us right so sorry not requested us but
519:13 - yeah
519:14 - this one so you see uh you get status
519:16 - code you
519:18 - get the data of course which is part of
519:21 - your your response so you are going to
519:23 - get more information about what your
519:25 - response was including the status board
519:28 - including your body including your
519:29 - headers status everything
519:32 - so i'll say let's try to access body
519:38 - and let's see
519:40 - and this is your photos but this is not
519:42 - what we are interested into we are
519:44 - interested in console.log right now so
519:46 - let's go ahead and see
519:48 - so we have of course this is uh
519:51 - [Music]
519:52 - this is our data so this is 5000
519:54 - requires which is available
519:55 - and
519:56 - here
519:57 - we want to
520:00 - display the total byte so what i'm going
520:02 - to do is
520:03 - here i'll say there is
520:08 - let's play send h1 here sorry
520:11 - so it is visible
520:12 - and then and say this is total bytes
520:17 - loaded
520:18 - let's see
520:20 - and you can see uh of course it is my
520:23 - internet speed is real fast so you can
520:24 - see two
520:25 - this many bytes loaded but we can go to
520:28 - network and
520:31 - we can move to slow 3g
520:34 - and let's reload
520:43 - right so you can see okay it was it was
520:45 - it started from zero and then it is
520:47 - loading the data
520:48 - so
520:49 - i'll just go to no throttling again and
520:53 - so it is too fast of course so to
520:55 - download this many 72 bytes so it didn't
520:59 - took a lot of time
521:01 - but yeah this is what you can achieve
521:03 - using request api it is really powerful
521:05 - it gives you a lot of information more
521:07 - information than what your you generally
521:08 - get from your http kit
521:11 - uh so try to utilize this as much as
521:13 - possible we already saw the use case
521:15 - where you can do that the only thing is
521:17 - we have to utilize the json placeholder
521:19 - api because we don't have an existing
521:21 - api which gives us
521:23 - those many records
521:24 - so yeah that's it from the
521:27 - next we are going to discuss
521:29 - and see some rxjs operators
521:32 - as we said in past rxjs is really
521:34 - powerful and you should learn about rxjs
521:36 - in more detail
521:37 - though this is an introduction uh though
521:39 - this is and not and fully fledged rxjs
521:42 - course but yes we are trying to cover as
521:45 - much as possible so you understand the
521:46 - basics
521:48 - and we will be covering
521:50 - rhs
521:52 - as much as possible which can be used in
521:54 - your production application
521:56 - so once you start writing or once you
521:58 - start working on angular application you
522:00 - will be able to
522:01 - use enough
522:03 - rxjs operators as well as well as enough
522:06 - rxjs in your application
522:09 - there are many operators which exist
522:11 - there are i think around
522:12 - there are more than 100 operators which
522:14 - exist
522:15 - it's not possible to know all of them
522:17 - and you even don't need all of them to
522:20 - uh to be frank
522:22 - you can always refer the rxjs operators
522:25 - on rxjs.dev which is official website
522:28 - and in case you are not sure which
522:30 - operator to use they have one really
522:32 - nice operator decision tree where you
522:35 - can
522:36 - give some information about what you are
522:38 - trying to achieve and they will
522:40 - give you an operator which we can use
522:45 - you can see the documentation for
522:47 - operators here
522:48 - as i said there are more than 100 it's
522:50 - not possible to understand all of them
522:52 - and probably you won't be using or you
522:54 - never need more all those hundred
522:56 - operators you are going to
522:59 - almost use most of the time around 10
523:01 - operators which from which we will be
523:03 - using most of the pitch from which we
523:05 - will be covering most of them here
523:07 - the first operator which we are going to
523:10 - use is share replay
523:12 - now why we need rxjs operators
523:16 - remember rxjs gives you a stream of data
523:20 - and
523:21 - that stream of data cannot be modified
523:24 - it can be modified only within
523:27 - a stream or
523:29 - before it is subscribed
523:32 - so how to modify those data so that's
523:34 - where operators come really handy
523:37 - so here i'll give you an example
523:39 - of how we can use share reply operator
523:42 - and then we will also see some examples
523:45 - of operator where you can modify the
523:47 - data while the stream
523:49 - within the stream and then give it back
523:53 - so
523:54 - to see this example what i'm going to do
523:56 - is i have i'm going to make two changes
523:59 - here i'm going to uncomment this again
524:02 - so we get the request twice
524:05 - i have made one more change in
524:08 - container component remember we had
524:10 - this host
524:12 - uh decorator here on
524:14 - the service and this providers have
524:16 - commented this and i have removed this
524:18 - as well just to make sure that you are
524:20 - following the same because if i don't
524:22 - remove it i mean we are going to end up
524:24 - with multiple instances of a service and
524:26 - of course it will make two different
524:28 - calls
524:29 - so let's go ahead and talk about this
524:31 - share replace service
524:32 - so here you can see rooms is being
524:34 - called twice photos is again being
524:37 - called twice
524:39 - it's the same data right so why we need
524:42 - to make two calls
524:43 - what we can do what we can do better
524:45 - here probably we can catch whenever
524:48 - first make call is made and then we
524:50 - don't have to make another call right
524:52 - that's that's looks like a perfect
524:54 - solution yes that's what share replay
524:56 - does share replay can help you to cash
524:58 - the request so you don't have to make
525:00 - your call again
525:01 - it's very useful in case you have some
525:02 - master data which uh you don't need to
525:05 - download again and again right whenever
525:07 - you are visit your user visits the page
525:11 - and in case you are making the same call
525:13 - at multiple places which is possible
525:14 - it's not something which uh you which
525:16 - you should avoid it is something which
525:18 - you should avoid but it's it's possible
525:20 - that it may happen that you are calling
525:22 - the same api again and again to get some
525:24 - data
525:25 - so let's see how we can use our sorry
525:27 - rxjs share replay operator to cache this
525:30 - request and
525:33 - make our application little bit faster
525:36 - so i'm going to make some changes into
525:38 - room service i am going to use a
525:40 - different approach generally i prefer
525:42 - this in case i don't have any uh i don't
525:44 - need a function so
525:47 - i'm going to use get rooms but
525:50 - i'm going to use a dollar i'll talk
525:51 - about what this room installer does
525:54 - and then
525:55 - i'll call this get rooms api
525:59 - and
526:00 - remember as i said we cannot go ahead
526:03 - and modify the stream
526:04 - after we subscribe to it a stream can be
526:07 - modified inside a function that function
526:10 - is known as pipe
526:11 - so
526:13 - this pipe is where you can do anything
526:16 - with your data and right now we are
526:18 - going to call a share replay operator
526:20 - with share replay 1
526:24 - so we are going to repeat or replay the
526:27 - last one record which we have received
526:29 - and this is done this is uh the method
526:32 - now let me talk about this get room
526:34 - installer what we are doing this is a
526:35 - property so we are saying this is a
526:37 - property and this dollar is to denote
526:39 - that this is a stream
526:41 - so generally whenever you work with
526:43 - streams try to use this approach try to
526:45 - uh
526:46 - use this syntax and so you don't need
526:49 - ngo in it or you don't have to call
526:50 - anything inside engineering we'll see an
526:52 - example where we can actually avoid
526:54 - subscription as well so once you get
526:56 - comfortable with this it will be easy to
526:58 - understand that code as well
527:00 - so here we have a property get rooms and
527:03 - then we are saying okay this is
527:04 - a stream which we get here
527:07 - and so far nothing has changed we still
527:09 - getting to record to request right so
527:11 - rims rooms
527:13 - now let's go to rooms component.ds here
527:15 - and rather than getting to get rooms we
527:18 - are going to access get rooms
527:20 - property and let's go ahead and see
527:24 - that we are now getting rooms request
527:27 - only once but of course we have the data
527:29 - available multiple times because we are
527:31 - caching the first request so we don't
527:33 - have to go ahead and make another call
527:35 - this is something which is really
527:36 - important to understand because of
527:37 - course you may have an application where
527:39 - multiple calls are being made
527:41 - unnecessarily
527:42 - with even though the data never changes
527:45 - you share play and then you are done
527:50 - in this video we are going to discuss
527:51 - about one pipe which we had left while
527:54 - talking about built-in pipes remember we
527:56 - said we are going to use a sink pipe
527:58 - while working with http and that's what
528:00 - we are going to explore here that's why
528:02 - we are back on this particular topic
528:04 - we are going to see how we can utilize a
528:06 - sink pipe and what's the purpose of
528:08 - using a sink pipe so this is going to be
528:10 - little bit
528:12 - longer theories plus
528:14 - examples
528:20 - so let's go back to our port
528:23 - so here right now the code which we have
528:25 - written
528:26 - you you can see everywhere we are doing
528:28 - dot subscribe
528:30 - dot subscribe right so we are
528:32 - subscribing uh our
528:34 - uh
528:35 - stream everywhere
528:37 - now there is a downside to this
528:40 - there is a downside yes
528:42 - to subscribe the streams
528:46 - try to relate this streams uh streams to
528:48 - your streaming services
528:51 - when you subscribe to let's say netflix
528:52 - or amazon prime
528:56 - once you subscribe let's say you
528:58 - subscribe to netflix and you wanted to
528:59 - actually cancel that subscription next
529:01 - month and you forget you actually forgot
529:04 - to cancel your subscription what happens
529:07 - you pay the price
529:09 - same thing is applicable here
529:12 - but here what is the price we are paying
529:14 - the price is actually performs
529:17 - so whenever you subscribe to a stream
529:19 - the streams are active
529:21 - the standard way is whenever you
529:23 - subscribe to stream you should
529:24 - unsubscribe to it
529:26 - how we can unsubscribe to it
529:28 - remember we discussed about ngo and
529:30 - destroy
529:31 - and we said engine destroy is an event
529:33 - where we can go ahead and
529:35 - uh re uh i mean release the resources we
529:38 - can actually
529:39 - unsubs uh we can release anything which
529:41 - we have
529:42 - in memory so this is where we can
529:44 - unsubscribe to it
529:47 - but
529:48 - most of the places we don't need to
529:50 - subscribe manually it's not impossible i
529:52 - mean it's not even
529:54 - totally impossible to remove all the
529:55 - subscribe methods it's not
529:57 - but yes
529:59 - there are places there are things uh
530:02 - there are like operators by using which
530:04 - you can you can do that
530:06 - and especially in case you want to just
530:08 - read the data
530:10 - you can go ahead and avoid the streams
530:12 - uh sorry you can go ahead and avoid the
530:14 - subscription manual subscription
530:17 - for example of course this one
530:19 - or
530:21 - we had the photos one as well right so i
530:24 - mean of course we are
530:25 - here we are trying diving deep that okay
530:28 - we want to handle this even this even
530:29 - this event but yeah uh even
530:32 - in this case right so we can just avoid
530:35 - the subscription because we just wanted
530:37 - to access the data
530:38 - so async pipe
530:41 - makes a spot makes it possible to
530:44 - manage the subscription for us
530:46 - what in case i have to do it myself
530:49 - so this is how the code will look like
530:50 - and you will see this code in a lot of
530:52 - places in your application or maybe if
530:55 - you get hired to work on any application
530:57 - probably the chances are that you will
530:59 - see this code
531:01 - generally we get
531:03 - and
531:05 - subscription object
531:09 - which is type of subscription
531:15 - which comes from rxjs so you can see
531:18 - okay i'll just do this one
531:21 - right so subscription which is come
531:23 - which comes from rxjs you can see this
531:26 - and
531:30 - we will ask
531:32 - this we will use this variable to hold
531:34 - the subscription for us
531:36 - and
531:36 - then
531:41 - i'll use ng on destroy
531:44 - and
531:45 - you will find that some code which looks
531:47 - like this so if
531:51 - this dot subscription it means there are
531:53 - some there are any active subscription
531:56 - go ahead and unsubscribe to it so this
531:57 - is the code which you can find at many
532:00 - places and this is the way you can
532:01 - actually
532:02 - uh unsubscribe to an active subscription
532:05 - as well why ng on destroy we are saying
532:08 - whenever this component gets destroyed
532:10 - just go ahead and destroy the
532:11 - subscription also because we don't need
532:13 - it we don't need to it to be available
532:16 - in the memory
532:17 - and
532:19 - in case i want to avoid this
532:22 - which i said totally i mean uh there is
532:25 - a service i'll share the code there is
532:27 - an actually
532:29 - [Music]
532:31 - there is a service which you can use at
532:34 - all the places
532:35 - to actually achieve this uh or write
532:38 - this write your code in a simpler way
532:40 - but yeah i mean i'll share that in
532:42 - future because that that service you can
532:44 - utilize in your real-time application
532:47 - here but right now let's say i don't
532:49 - want to actually
532:50 - subscribe it manually here
532:52 - how we can do that
532:54 - so i will remove this and
532:58 - let's use this stream so i'm going to
533:00 - comment this line because
533:02 - i'll keep it here but i'll just comment
533:04 - this
533:05 - now remember the earlier code which we
533:08 - wrote for sherry play i am going to use
533:10 - the same approach here so i'm going to
533:12 - say this is uh what this is rooms
533:16 - i'm going to say this is the room stream
533:19 - and this is equals to this method so i'm
533:22 - going to say okay this is room stream
533:24 - and actually this data is coming from
533:25 - your no subscribe method
533:29 - let's see
533:30 - once this is done
533:32 - of course let's go back to
533:35 - the ui and we will see okay there is no
533:37 - data which is available inside my table
533:40 - let's go to component and let's try to
533:42 - read what is available here how we can
533:44 - do that
533:45 - so we can
533:47 - use
533:48 - i'll just remove some
533:50 - headers here
533:53 - and
533:55 - whenever we have a stream we have to use
533:58 - the async pipe and then i'm using json
534:00 - to display that data so think like what
534:03 - it will do is it will unwrap that object
534:06 - and it will give you the data so
534:08 - remember earlier
534:10 - previously what we used to do is we used
534:13 - to subscribe
534:14 - to get that data out and then read the
534:16 - data here
534:18 - what is happening is we are passing the
534:19 - entire stream to a sync pipe which will
534:22 - unwrap which will unwrap means it will
534:24 - unsubscribe to that particular data and
534:26 - give the data back to us
534:29 - once your ng on destroy is called
534:31 - passing pipe will also take care
534:34 - of unsubscribing to that object so you
534:37 - don't have to write go ahead and write
534:38 - this code where you say okay this is
534:40 - equals to this subscription is equal to
534:42 - this and then unsubscribe in ngon and
534:45 - destroy so you don't have to write this
534:47 - code by yourself
534:49 - now let's go ahead and see how we can
534:51 - use it so i'll just copy this i'll
534:53 - comment now we know how my data looks
534:55 - like
534:55 - and here
534:57 - we are passing this uh rooms data
535:00 - let's see
535:02 - where is my where where is the table
535:06 - and i had her
535:10 - here
535:11 - now i can say uh this room stream
535:17 - pipe
535:18 - a sink here
535:24 - is it room or rooms
535:38 - [Music]
535:40 - and we will also say ngif
535:44 - rooms type busing so in case some rooms
535:46 - is available go ahead and display this
535:48 - and it says a room list of okay so rooms
535:52 - can also uh
535:54 - sorry
535:55 - this is a sync pipe uh can also return
535:57 - null so that's what it is us telling us
536:00 - right now that okay if it is null i mean
536:01 - i'm not able to assign this to an array
536:04 - or null
536:05 - the the thing which we can do is we can
536:07 - say okay this is type of
536:09 - not here
536:11 - this is type of this or none
536:15 - and this error will be gone
536:20 - so now we have uh we are checking if
536:22 - rooms data exist then only use
536:25 - but there is a downside to it so i'll
536:26 - show you i'll talk about that as well
536:28 - but right now we have our data which is
536:30 - absolutely fine right we are getting the
536:32 - data but here right now uh we are
536:35 - checking this in rooms async
536:38 - and here also we are doing the same
536:41 - the downside of doing such or writing
536:43 - this code is we have to i mean your sync
536:46 - pipe has to subscribe it multiple times
536:49 - can we do it at once yes that's possible
536:51 - you can do something like this so you
536:52 - can say rooms are sync as
536:54 - room and then you can just pass uh
536:58 - let's do it
537:01 - make it rooms
537:03 - and we can pass it here
537:07 - well even so we have to subscribe only
537:09 - once let's go ahead and verify our ui
537:10 - and it works no error and everything is
537:13 - as
537:15 - i mean looks the same as it was earlier
537:17 - so
537:19 - try to avoid multiple async pipe on the
537:21 - same
537:22 - stream rather do this so you can rather
537:26 - than actually
537:27 - doing multiple passing pipes you can
537:30 - just say okay as this and then you can
537:32 - just use that data unwrapped data down
537:35 - below
537:36 - so this is how a sync pipe works
537:38 - why we discuss about it because uh the
537:40 - next operator which we are going to use
537:44 - depends upon sync pipe so let's go ahead
537:46 - and see that
537:48 - now back to our rxjs operators and right
537:51 - now we are going to talk about the
537:52 - another object called catch error
537:55 - and that's why we learned about trussing
537:57 - pipe so let's see how we can actually
537:59 - handle the errors
538:01 - in our code base
538:04 - so so far we have written the code all
538:07 - the happy flow no exception that's fine
538:09 - right i mean most of the time you will
538:10 - get the ap flow but we have to handle
538:12 - the exceptions as well
538:14 - so here let's try to introduce an error
538:17 - how we can do that
538:20 - i can just change the api right so i can
538:22 - say api slash room and
538:26 - let's see and we have
538:39 - okay somehow application still works but
538:42 - get room okay sorry
538:45 - here
538:46 - we are not using the get rooms now so we
538:48 - will get 404
538:50 - we generated an error now how to handle
538:53 - these exceptions
538:54 - right now we are saying okay we have a
538:56 - stream and whenever like that stream
538:59 - gives you the data just go ahead and
539:00 - display them let's see an example where
539:03 - we can also handle the exception
539:06 - so
539:07 - you can handle the exception inside
539:08 - service as well as in your
539:11 - component
539:13 - the best
539:14 - thing would be to use something like
539:16 - ngrx which is like advanced topic which
539:18 - is not part of this but yeah let me show
539:20 - you how we can handle exception here
539:23 - so this stream as i said we cannot
539:25 - modify the stream after we subscribe to
539:27 - it but we can modify it by using pipe so
539:30 - we will apply the pipe and here i am
539:32 - going to say catch error this is the
539:35 - ngrs function which we have
539:37 - and
539:38 - we will handle the exception here but it
539:40 - says okay there is some problem so it
539:42 - says error it declared but right now we
539:44 - are not using its value
539:45 - let's try to use the value and to do
539:48 - that
539:49 - what we will do is we will say right now
539:52 - let's
539:52 - do console.log
539:55 - and we'll say error
539:59 - and it says array of void
540:02 - ah okay so it accepts room list
540:06 - parameter right so we can say okay do
540:08 - this
540:09 - capture the earth and
540:11 - written
540:12 - off
540:16 - this i'll explain what we are doing here
540:20 - let's
540:21 - format
540:22 - and we have an extra error
540:25 - okay so we are handling uh we are we are
540:28 - saying okay this is uh log the error and
540:30 - then just return the empty array
540:32 - so
540:33 - let's go ahead and see
540:35 - okay so nothing here let's see the
540:37 - console
540:39 - and we have the uh error
540:42 - which is http line number let's see line
540:45 - number 68 yeah so line number 68 we have
540:48 - error http error response and it says
540:50 - okay this is the message
540:53 - right so this is the actual message
540:54 - which we have now what we need is we
540:57 - let's say we want to display this
540:58 - particular message you want to show okay
541:00 - this this is the actual error which we
541:02 - have received
541:03 - how we can do that
541:05 - i'm going to use another
541:07 - type which is available in alexis which
541:09 - is both observable and observer so i am
541:13 - going to create an error stream
541:16 - and i am going to say this is a
541:19 - type of subject
541:25 - and it is
541:27 - sorry
541:30 - just type of subject and which is type
541:33 - of string
541:35 - uh sorry
541:37 - and as this is not initialized i'm going
541:39 - to say okay this is
541:40 - uh
541:42 - application operator which will avoid
541:44 - that particular error
541:47 - now let's see what is this particular
541:49 - subject is as you can see it is coming
541:52 - from
541:52 - rxjs of course and it is subject is
541:55 - actually base class for all the uh
541:57 - different uh
541:59 - uh streams which you get so it's a uh
542:02 - like
542:04 - uh what you can say it's a base class
542:07 - right for all the type of streams which
542:08 - you get this is the best base class so
542:10 - you can actually create a subject and
542:12 - then uh there are different types of
542:14 - subjective which also exists internally
542:16 - angular also uses subject at a lot of
542:18 - places
542:19 - so here uh what we have done is we have
542:21 - created uh this subject and now
542:24 - here what i'm going to do is i'm going
542:25 - to say okay this dot
542:28 - error
542:29 - dot i'm going to call a method called
542:31 - next remember we said whenever we we saw
542:34 - an example of observer we said there are
542:36 - three methods which exist next complete
542:38 - and error so we are going to say next
542:40 - error
542:41 - and
542:42 - whenever we get the
542:45 - new error value
542:47 - we are going to subscribe to this
542:50 - so we are going to say
542:54 - here
542:55 - this dot
542:57 - we don't have to
543:00 - let's see
543:11 - let's
543:11 - do this dot
543:14 - error
543:17 - stream dot as observable
543:20 - so this
543:22 - is my subject
543:24 - this get error or
543:26 - let's make it i'll keep it get error as
543:28 - of now i'm saying
543:30 - i'm going to subscribe to this so this
543:32 - is this active stream whenever there is
543:34 - an if there is an error which is erased
543:36 - i'm going to push this error you
543:38 - generally should not write this code
543:40 - inside your
543:41 - component because there is a drawback
543:44 - whenever next
543:45 - gets called you uh your change detection
543:47 - is going to run again so that's a
543:49 - drawback but
543:50 - of course you should learn about this
543:52 - how to do exception handling as well you
543:53 - can move this to your service you can
543:55 - move it to another common place wherever
543:57 - you want to
543:58 - but yeah
544:00 - now we have this error which is
544:02 - available and now let's go ahead and see
544:03 - so i'm going to save this
544:07 - and
544:08 - going to subscribe to this error
544:10 - just above this and
544:12 - uh here i'll say h1
544:16 - and get error pipe
544:19 - sync
544:21 - and what i'm going to do is i'm just
544:23 - going to take message out of it right so
544:26 - we don't need to display the entire
544:27 - error
544:28 - so
544:29 - let's see how the ui looks like
544:33 - and okay there is some error cannot read
544:35 - properties of undefined okay probably
544:38 - i'm missing something let's see
544:42 - okay
544:44 - new subject
544:46 - this is how it should be actually we
544:48 - have to create a new subject of type
544:50 - string and this should fix the
544:53 - issue now we have
544:55 - of course everything is working fine
544:56 - looks like everything is working fine
544:57 - but you can see you have error code
544:59 - available here so it says your error
545:01 - message has to be failure response for
545:03 - this blah blah blah which is available
545:05 - now
545:06 - so what we are doing is whenever there
545:08 - is an exception
545:10 - now we are handling that error we are
545:11 - handling that error and then we are
545:13 - subscribing to that error as well we are
545:15 - saying okay in case we get the data
545:17 - that's absolutely fine but in case i get
545:18 - the error just go ahead and display the
545:20 - error as well you can customize this
545:22 - error based on
545:23 - your
545:24 - requirement now let's go ahead and fix
545:27 - the url
545:29 - and our
545:30 - data will be back now we don't have any
545:32 - error so nothing no error will be
545:34 - subscribed to right so this is how you
545:37 - can use catch error
545:39 - and yes just make sure that okay you are
545:42 - not doing not writing this code in your
545:44 - component this is just an example you
545:46 - can do it inside service we will see an
545:49 - example of
545:50 - where we do the
545:52 - component interaction using service
545:54 - where we are going to see different
545:55 - types of subjects which exist
545:57 - and probably we will move this code
545:59 - outside so this is it from
546:04 - [Music]
546:06 - so far we have seen two operators share
546:08 - replay and catcher and we also saw an
546:10 - example how you can use a sink pipe
546:12 - which is really great you should focus
546:14 - more on using a sync pipe as as much as
546:16 - possible
546:17 - let's now see an example of map operator
546:19 - we are going to see some uh
546:22 - other map operator as well because there
546:24 - are there are few different like uh you
546:26 - will find there is switch map merge map
546:29 - and uh
546:30 - there are a few operators like that so
546:32 - but here we are going to just talk about
546:34 - map operator so let's go and see how we
546:36 - can actually use map operator to work
546:38 - with our stream
546:40 - and
546:40 - modify it
546:42 - and by the way this is the first
546:44 - operator which we are going to use which
546:47 - can modify which will modify the data
546:48 - right
546:53 - this is the first operator which we are
546:55 - going to use which will modify the data
546:56 - so far we have seen cache error which
546:58 - was able to cache the error and we saw
547:00 - we saw share replay which was able to
547:03 - cache the data right so let's see uh how
547:05 - we can modify the stream by using
547:08 - shareplay now sorry by using
547:10 - uh how we can modify the stream by using
547:12 - map operator
547:15 - and to do that what i'm going to do is
547:17 - i'm going to
547:19 - subscribe to the same streams
547:21 - okay and i
547:23 - call this as
547:25 - account
547:27 - and i'm saying this is a stream and here
547:30 - i am going to
547:32 - subscribe so i'll say this dot
547:35 - room
547:36 - sorry
547:39 - room service
547:41 - dot
547:43 - get rooms so this is our stream
547:45 - and then we can use pipe
547:49 - and now in map using map operator so we
547:52 - just use map
547:53 - and okay this is coming from rickshaws
547:56 - we'll say rooms and we will take the
547:58 - number of rooms which is available
548:00 - inside this
548:02 - and now if you see this type the
548:04 - important thing is see the types
548:06 - here it is array of rooms and here it is
548:09 - count
548:10 - which means number of rooms which are
548:12 - available inside this particular area so
548:14 - we are actually modifying the stream and
548:17 - we are just returning the number of
548:19 - records or you can see rooms.length
548:21 - which is number of records number of
548:22 - rooms which is available in this
548:24 - particular stream
548:26 - but
548:26 - we are not subscribing it manually we
548:29 - are still
548:30 - in the stream we modified the stream and
548:32 - said okay it was like room of numbers
548:35 - which was coming inside the pipe and
548:36 - then we took only the count as and we
548:39 - gave that count as a stream
548:41 - so here now i can just go ahead and use
548:44 - this
548:45 - in our template
548:47 - and let's put it here
548:51 - and let's uh okay there's one thing
548:54 - let's put it in it in h1
548:57 - and we'll see number of rooms
549:02 - is
549:06 - sync
549:07 - and let's save this as well because
549:09 - otherwise uh this variable won't be
549:11 - identified because the file is not saved
549:14 - let's see if it is
549:15 - compiled
549:17 - yes it is compiled
549:19 - let's go to the browser and you can see
549:21 - it says number of rooms three so this is
549:23 - how you can utilize map operator and
549:26 - uh
549:26 - without subscribing to the stream you
549:28 - can just get the data whatever you need
549:31 - from the existing stream
549:33 - so this is
549:34 - uh the map operator and now we will move
549:37 - on to the next topic
549:39 - in this video we are going to talk about
549:41 - several things first we will see
549:43 - how we can add the extra headers to our
549:47 - http request
549:48 - and then we will see how we can actually
549:51 - intercept those requests that's where
549:52 - the concept of http interceptor will
549:55 - come and then at the end
549:57 - we will see app initializer
549:59 - so first let's go ahead and talk about
550:01 - modifying the header information
550:08 - so
550:08 - we are back to our code base
550:11 - in
550:12 - your enterprise application there might
550:13 - be scenarios where you may need to pass
550:16 - some extra information in the header
550:19 - whichever we are talking about http
550:22 - request header
550:23 - so we will first learn how to do that
550:26 - so
550:27 - let's uh go to our
550:30 - service
550:32 - and let's try to add some extra headers
550:35 - to
550:36 - our
550:37 - this calls right so we have get call we
550:38 - have post call how we can pass that so
550:41 - if you see the signature
550:43 - of every http request which we have i
550:45 - mean get both put everything you will
550:48 - find that there is something called http
550:50 - headers which we can pass
550:52 - which takes a key value pair
550:55 - similarly you will find it for post as
550:57 - well
550:58 - and post delete everything
551:01 - so let's see uh how we can create an
551:04 - http editor and then we will try to pass
551:06 - it so first let's create the header i'll
551:10 - call it as
551:12 - header and it will be new
551:15 - http
551:17 - headers
551:19 - right so uh as we know it takes key and
551:22 - valid
551:28 - so a few combinators which we see
551:30 - content type
551:32 - you have let's say forms data no that's
551:34 - not a header
551:36 - or you can pass token right so token is
551:38 - a common use case here we are going to
551:41 - pass let's say
551:43 - um
551:44 - token for example
551:46 - and
551:47 - it will take
551:52 - this is the value so alpha numeric let's
551:54 - say our token is some alphanumeric
551:57 - random value and then here i can just
551:59 - say pass
552:00 - this headers
552:04 - to okay
552:07 - so we now let's
552:09 - verify inside our browser that if if
552:11 - that particular
552:13 - header which we have sent is received or
552:16 - not
552:20 - let's go back to our network tab
552:23 - and let's reload this
552:27 - uh it's compiled and this is the request
552:30 - which we are planning to see which we uh
552:33 - in which we have added that particular
552:35 - header information which is named as
552:37 - token
552:38 - let's see so this is responsive this is
552:40 - not what we are looking at we are
552:41 - looking at request header
552:43 - and let's see if we have
553:01 - okay there is one thing
553:03 - uh there's a one mistake which i made
553:06 - if you i mean we are not calling this
553:07 - method anymore so if i have to do this i
553:10 - have to actually
553:12 - pass this letter information here right
553:14 - in inside this call
553:15 - so
553:17 - i'll do one thing i'll create
553:20 - and cut this
553:21 - and
553:23 - paste it here and then we'll pass this
553:24 - header information
553:26 - into this
553:30 - with the start headers and
553:33 - let's remove it
553:43 - and let's remove this as well
553:45 - okay so this is the http method which we
553:48 - are calling let's go ahead and verify
553:50 - our build which is comp which is
553:52 - compiled application is compiled now
553:53 - let's go back to our code base and let's
553:56 - try to see request header now
553:59 - so we have this token which is available
554:01 - now this token can be received from at
554:03 - your api so in case let's say you are
554:07 - working together with some back-end
554:08 - developer he says listen uh for this
554:11 - particular api call i am going to
554:13 - need some token this is the token which
554:15 - you have to pass with every request so
554:17 - this is this is how you are going to do
554:18 - it so you will
554:21 - let's go back to the code and then let's
554:22 - talk about it so this is how you will
554:24 - create a new header and then you will
554:26 - pass that header into your request so
554:28 - this dot headers which you have passed
554:30 - here
554:31 - and you can of course pass multiple
554:35 - and let's see
554:40 - [Music]
554:44 - so you can call append method and then
554:46 - you can add multiple so that's how you
554:48 - can do it you can also see
554:50 - there is a method to get the headers you
554:52 - have has has to actually see if this
554:56 - particular
554:57 - header exists or not so
555:00 - you can just copy the same header let's
555:02 - say let's try to add a room and see if
555:04 - it works
555:05 - and we have this information passed or
555:08 - not so we can pass headers and we will
555:11 - pass this rotators in add info in add
555:14 - api as well
555:19 - let's go back to the code and let's add
555:22 - a room
555:23 - and this is our rooms api and we will be
555:26 - able to see
555:27 - token here as well
555:29 - right so this is how you will be adding
555:31 - header information now once we know this
555:34 - how to add header information let's talk
555:36 - about another use case so let's say you
555:38 - get a token and
555:40 - now the requirement is you have to
555:42 - actually go ahead and add this token f
555:44 - to every request
555:46 - do you think the what i'm doing is
555:48 - correct or is the most in efficient way
555:51 - of course the answer is no right i mean
555:52 - what i'm doing is i'm duplicating the
555:54 - code which is of course i shouldn't be
555:56 - doing that so what we can do so this is
555:59 - where the concept of http interceptors
556:01 - come in
556:02 - http interceptors is not only made for
556:05 - this but there are bigger use case for
556:07 - http interceptors
556:08 - http interceptors i mean you may have
556:11 - actually heard about interceptors let's
556:14 - come back and talk about interceptors
556:15 - first before we talk about http
556:17 - interceptors what do you mean by
556:19 - interceptor
556:20 - you might have seen some movies right
556:22 - where
556:23 - some someone says okay your call is
556:25 - being intercepted what you mean by that
556:27 - so actually there is
556:30 - sender and receiver so client is my
556:33 - receiver and server is my center right
556:35 - uh
556:36 - if you see i mean your server is
556:38 - responding to uh each and every request
556:41 - and your
556:43 - your client is also making a request to
556:45 - so it goes from
556:47 - your client to server and server to
556:49 - client
556:50 - now there is someone in between who is
556:52 - listening to what is happening what what
556:54 - data is going what data is coming
556:57 - that is interceptor so
557:00 - similar way http interceptor is an a
557:02 - service which will sit between your http
557:06 - call which is being made from your
557:08 - client which is your browser to the
557:10 - server and
557:11 - in case also your server responds it can
557:14 - also listen to your request that's http
557:16 - interceptor here
557:18 - what can be the use case i mean there
557:19 - are a lot of things which you can see do
557:21 - using http interceptor one is of course
557:24 - you can add this combinators inside
557:25 - interceptor so you don't have to add it
557:27 - everywhere
557:29 - what what else what other use cases can
557:31 - be in case you want to let's say add
557:33 - date timestamp to each and every request
557:35 - yeah that's you can do that uh you can
557:38 - do using http interceptor what else
557:41 - let's say you want to uh handle the
557:42 - scenario where your token is expired yes
557:45 - and should be interceptor is the way to
557:47 - go
557:48 - and you can add multiple http
557:49 - interceptor it's not like you can only
557:51 - add one http interceptor the only thing
557:54 - is it will be called in the sequence
557:56 - they are registered so let's go ahead
557:58 - and create our first http interceptor
558:01 - to see how it works
558:05 - and to do that i'm going to use a
558:06 - command so
558:07 - of course n g g
558:10 - interceptor
558:15 - and i'm going to call it as let's say
558:17 - request
558:18 - request interceptor so
558:24 - and we have this
558:26 - this two classes created and you have
558:27 - this
558:28 - request interceptor which is which
558:30 - implements http interceptor that's why
558:32 - it is called http interceptor
558:35 - remember
558:37 - http interceptor can modify your request
558:40 - as well as it can modify your responses
558:42 - as well in case you want to
558:44 - now
558:45 - http interceptor has
558:48 - has actually an function which we need
558:50 - to implement which is called intercept
558:52 - and this is really important next dot
558:54 - handle
558:54 - this line actually sends the request to
558:57 - your server if you don't re if you don't
559:00 - call this method
559:01 - nothing will happen so
559:04 - let's try to first
559:06 - do one thing
559:08 - i'll just do console.log
559:11 - and we will just log our request
559:15 - right so
559:19 - request interceptor and then we'll pass
559:22 - the request with us
559:24 - once you are done with this i mean uh
559:26 - right now this interceptor will not do
559:28 - anything because it is not registered
559:29 - let's go ahead and register the
559:31 - interceptor so
559:32 - we will do it here
559:34 - and
559:35 - this is the this is how you are going to
559:37 - register it so you will say provide
559:55 - so we are going to say provide on
559:59 - this
560:23 - those
560:26 - value which will be http interceptors
560:31 - so uh let me talk about this uh in in a
560:34 - little bit uh
560:35 - [Music]
560:37 - we'll talk about this what we are doing
560:39 - here so we are saying provide use value
560:41 - this and then we will say multi true
560:45 - and let's go ahead and verify first so
560:49 - our build is successful
560:51 - let's go back to our application
560:53 - and console because we want to change
560:56 - see the request and
560:58 - request success
561:05 - request has been made and
561:08 - let's see there is anything from
561:10 - interceptor okay somehow it is not
561:22 - provide request interceptor which is our
561:24 - class
561:25 - please value this multi true
561:33 - okay let's see our amp is getting
561:35 - updated
561:43 - the build was successful and nothing
561:46 - changed okay
561:47 - somehow it says nothing changed
562:05 - okay
562:06 - let's see
562:10 - [Music]
562:11 - room service has been initialized
562:35 - okay let's
562:43 - not use
562:45 - customs value i think
562:59 - just
563:00 - done the opposite of it so
563:02 - you have we have to provide http
563:04 - interceptor as a service and then we
563:06 - have to say use
563:07 - class which is our request interceptor
563:10 - so
563:12 - i just use the values somehow
563:15 - and let's talk about this and let's
563:17 - verify again in case
563:20 - it is working fine or not and we will be
563:22 - we should be able to see now
563:25 - first
563:28 - here it is so you can see request
563:29 - interceptor line number 16 and it has
563:32 - everything so right now aps rooms is
563:34 - called
563:35 - and
563:36 - we have
563:37 - context body header and there should be
563:39 - one for uh
563:41 - photos
563:42 - and there should be one for
563:45 - where is
563:48 - the rooms api
563:50 - ah this is the rooms one right so you
563:52 - have rooms one and as well as the photos
563:55 - so both the requests are captured here
563:57 - in case we want to add room you will see
564:00 - uh when
564:01 - the request is handled here so you can
564:02 - see body context headers and in headers
564:05 - you will be able to see the token
564:07 - because right now we have one uh header
564:09 - which is added here
564:11 - so this is this these are the
564:12 - information i mean this uh this gives
564:14 - you complete http information i mean
564:17 - which is being sent from your client
564:18 - machine to your server server machine
564:21 - now let's come back to this and talk
564:22 - about this provide and use class
564:25 - so here
564:26 - this http interceptor is nothing but a
564:28 - token so remember we created an
564:30 - injection domain and this http
564:33 - interceptor also is also the same so
564:35 - here what we are saying is we are saying
564:38 - i have created a new http interceptor by
564:41 - implementing the interface http
564:44 - interceptor
564:46 - go ahead and add this http interceptor
564:48 - into list of interceptors which already
564:51 - exist and you might be wondering which
564:53 - interceptor exists
564:54 - yes so angular internally adds a lot of
564:57 - interceptors the reason being if you see
565:00 - this information right now are we
565:02 - preparing this information no we are not
565:05 - this is something which angular is doing
565:07 - by itself
565:08 - so
565:08 - of course it has some list of
565:10 - interceptors which is internally
565:12 - implemented and then we are adding our
565:14 - own so it will be executed in sequence
565:16 - so once every interceptor is executed
565:18 - then this will be executed
565:20 - if we add one more after this
565:23 - in that case first this request
565:25 - interceptor will be executed and after
565:27 - that the next interceptor will be
565:29 - executed it will always be sequential
565:31 - remember that in case you uh
565:34 - end up adding multiple interceptors so
565:36 - remember the sequence
565:38 - now here we have the information uh
565:40 - which is uh needed and now we understand
565:43 - what http interceptor does for us now
565:45 - let's go ahead and
565:46 - utilize that right so here what we are
565:49 - going to do is let's uh first
565:51 - add the header information right so
565:53 - right now we have added the header
565:55 - information inside the service we cannot
565:57 - do it for
565:58 - each and every uh api call
566:01 - so let's remove it from here so i'll
566:03 - just
566:04 - comment this out
566:06 - remove this
566:08 - from here
566:10 - similarly i'll remove from add
566:17 - and let's come here
566:19 - so first thing you cannot directly
566:21 - modify the request you cannot modify the
566:23 - original request so let me just refresh
566:25 - it because it may cause confusion so you
566:27 - cannot
566:28 - modify the original request
566:31 - you can clone it and then modify so i'll
566:34 - say okay this is new request fonts
566:36 - new
566:38 - request
566:39 - is equals to
566:41 - i'll say request.clone
566:43 - and here
566:44 - i can pass headers which will be
566:48 - i'll say new
566:50 - http
566:54 - headers and now let's copy the key and
566:57 - value from here so i'll say this is
566:59 - token
567:00 - and this is the value
567:03 - and
567:04 - the one thing which we have to do is now
567:06 - we have to pass this request not the
567:09 - original request remember that
567:11 - uh so it happens a lot of times that i
567:13 - end up just passing the same request and
567:15 - then i see okay why the modified values
567:18 - are not there so it's absolutely fine um
567:21 - everyone makes that mistake so
567:22 - [Music]
567:24 - and let's format
567:26 - using prettier and now let's verify the
567:30 - application again
567:32 - so we have uh
567:35 - network tab let's go to photos and it
567:38 - photos should also have this token so
567:40 - you can see the token is available here
567:42 - did we add it to photos no we did not
567:44 - who is adding it the interceptor is
567:46 - adding it similarly in
567:48 - the rooms
567:49 - you will find the token available here
567:50 - you will
567:51 - just let's add a room
567:53 - and we will find that okay it is also
567:55 - added here you have inside room
567:58 - uh we call delete room and inside delete
568:01 - room also you will notice that token is
568:03 - available so now with each and every
568:05 - request the token will be appended
568:08 - or added to the request
568:10 - you can do
568:11 - of course more thing for example let's
568:13 - say if you want to handles or you want
568:15 - to create some use cases when you forget
568:18 - request not for course request you can
568:19 - do that because
568:21 - this request information
568:23 - you can see uh it has a lot of
568:25 - information so you can say request dot
568:27 - method
568:28 - and let's uh do it for post one d right
568:31 - we will add this information header
568:33 - information only for post
568:36 - so i'm going to do this i'm going to say
568:37 - okay if requestism dot method is post go
568:41 - ahead and add this
568:44 - token and make a request otherwise
568:48 - make the original request
568:51 - let's format and
568:54 - right so let's verify
568:56 - now our get request should not have this
568:58 - in this token let's go to photos and
569:02 - no we don't have it
569:04 - for
569:05 - rooms
569:06 - we don't have it let's
569:09 - execute a post request by adding rooms
569:11 - and now
569:12 - we have it
569:13 - so this is this is uh these are the
569:15 - things which you can achieve using
569:17 - http interceptor right now we are only
569:20 - handling the request remember this you
569:22 - can see i'm not handling the response
569:24 - i'll show you one use case uh
569:27 - in while working with probably routing
569:30 - and forms how you can also handle the
569:32 - response so
569:34 - yeah that's it uh from the http
569:36 - interceptor now next thing which we are
569:38 - going to talk about is we will see app
569:41 - initializer so
569:43 - let's do that next
569:46 - next we are
569:48 - next we are going to do last topic from
569:50 - stdp intercept uh sorry from http
569:53 - and we are going to discuss about test
569:55 - initializers now
569:57 - what and where you are going to use it
570:00 - so this is little bit advanced topic as
570:01 - i am trying to cover everything which
570:03 - you can
570:05 - sorry i'm trying to
570:07 - cap
570:08 - sorry i'm trying to cover everything
570:10 - which you can utilize in your production
570:12 - application so you should not get any uh
570:16 - certain things okay uh this is something
570:18 - which i'm not aware of so this app
570:20 - initializer is something which is really
570:22 - useful it's kind of again a service
570:25 - which will help you to
570:27 - load the data before your app gets
570:29 - initialized and now you might be
570:31 - wondering what is the use case when i
570:34 - need the data before application is list
570:36 - for example let's say you have some
570:37 - configuration
570:39 - you need to load that configuration
570:41 - before your app is initialized and then
570:43 - you need to save that data into your
570:45 - service and then use it how you are
570:47 - going to do it
570:48 - i'm talking about before your
570:51 - application is sliced i mean before you
570:53 - get your first page
570:55 - this is where app initializer can help
570:57 - you app initializer can
571:00 - plug in your service and it will call
571:03 - that particular service before your app
571:04 - is initialized and you can do anything
571:07 - where uh whatever you want into that
571:09 - service you can make an http call get
571:11 - the data from your any api or you can
571:14 - just load a config file from your local
571:17 - uh disk right i mean for example if you
571:19 - have
571:20 - saved some file in your assets and you
571:21 - want to
571:22 - based on your configuration you want to
571:24 - load that asset file or config file
571:27 - that's possible so let's take an example
571:28 - where we will be using a config file
571:31 - and we will load that config file and we
571:33 - will
571:34 - make that data available before our app
571:36 - is initialized
571:38 - to do
571:40 - that first what i'm going to do is i'm
571:43 - going to create a service
571:44 - so i'm going to say nggs and i'm going
571:47 - to call it as a init service initializer
571:51 - and i'll add some code here
571:54 - and we'll talk about it
572:00 - so i'm going to make an http call
572:08 - and
572:11 - we'll create a property which is type of
572:12 - readme
572:14 - and let's add
572:16 - this tab update
572:18 - so what we are going to do is we are
572:19 - going to load this config.json file
572:21 - which we don't have right now
572:24 - let's create in assets
572:26 - config.json and
572:29 - let's add some properties so let's see a
572:32 - version
572:32 - [Music]
572:34 - and
572:34 - some some normal properties right so
572:38 - let's say it has to these two properties
572:40 - as well
572:41 - now this service needs to be called
572:43 - before my application is like so i can
572:45 - make the http call get the data and do
572:47 - whatever i want to i mean i can just go
572:49 - ahead and use this service anywhere and
572:52 - the data will be available
572:53 - now let's see how to use it so that's a
572:58 - little bit change in this index so we
573:00 - are going to create a function
573:02 - we will call it as init
573:04 - factory
573:10 - and we'll pass our service here so we'll
573:12 - say okay this is
573:14 - init
573:15 - service
573:17 - which is type of innate service which we
573:19 - have
573:21 - and then we are going to say return a
573:23 - function
573:24 - this is really important part so we are
573:26 - going to return a function which says we
573:28 - need service dot init method which is
573:30 - the method which we have here so this
573:32 - method will get make an api call or
573:34 - should we call float the json file and
573:37 - add save this into this particular
573:40 - property
573:41 - now once this is done we have to
573:43 - register it to register we are going to
573:46 - say
573:46 - provide app initializer because that's
573:49 - the service where we want to actually
573:51 - plug in this particular method then we
573:53 - can say use
573:54 - factory as we have factory available and
573:56 - then we have to provide dependency
573:58 - dependency will be
574:00 - the number of the services which you
574:02 - provide here it's possible that you can
574:04 - call multiple that's possible yes
574:07 - and
574:09 - you have to say multi-truth because app
574:11 - initializer is again an object where we
574:13 - are going to add a service
574:15 - now this is done let's go ahead and
574:17 - verify if
574:19 - this works or not and how we can verify
574:23 - i'm just going to the network tab and
574:24 - config.json is loaded yes that's loaded
574:27 - let's try to read the property
574:33 - now to leave to see if this property is
574:36 - available or not we can inject the
574:38 - service in here
574:41 - so let's say this is private
574:52 - and restart i just
574:55 - will just do console.login
575:02 - server start
575:03 - config
575:06 - and let's verify it
575:09 - and we have
575:10 - this data available app component or tsl
575:13 - number 24 and this is available and this
575:15 - is loaded even before your app is
575:17 - initialized so yep this is how you can
575:19 - do it uh common use cases maybe let's
575:22 - say you have a config.json file where
575:24 - you have
575:25 - environment apis based on your
575:26 - environment and you want to load that
575:29 - and then make api calls
575:30 - yes that's that's how you can do it
575:33 - so this is the last topic from http and
575:35 - now we will continue with router
575:41 - so far we have learned about
575:43 - the basics of angular
575:45 - and
575:46 - one thing you may notice is we don't
575:48 - have so much of ui right now available
575:51 - we said we are going to use we are going
575:53 - to create a project based on hotel
575:55 - inventory but we just have like a table
575:57 - and we saw some functionality where we
575:59 - can add details
576:01 - and
576:02 - that's it right we can edit but we don't
576:04 - have forms and even we don't have urls
576:06 - where we can click and move to different
576:10 - views
576:11 - so this is what we are going to start
576:13 - right now we are going to start with
576:16 - angular router
576:17 - so in this video we will talk about the
576:21 - introduction of course and then we will
576:23 - see we'll see how to set up router we
576:25 - will also see some services which is
576:27 - provided by router itself so we have
576:29 - activated route router service we'll
576:32 - talk about future module and we'll
576:35 - we'll see how we can do feature module
576:36 - routing as well we'll talk about nested
576:39 - route child routes lazy loading route
576:41 - cards we'll also see uh if you remember
576:43 - in last
576:44 - session uh we in last video uh we didn't
576:48 - covered how you can communicate between
576:50 - mult between multiple components using
576:52 - services so that's
576:53 - uh what will be covered in this uh
576:56 - this part as well we'll see how we can
576:58 - do that and we'll also see angular
577:00 - material so
577:02 - let's go ahead and get started
577:05 - so let's see what angular router is so
577:07 - it's provide it provides the
577:08 - functionality to add routes i mean what
577:11 - is the routes right so first we have to
577:13 - actually go ahead and understand what
577:15 - the route is so let me show you a page
577:21 - and i'll go to angular.time so
577:24 - the
577:26 - documentation right so here you can
577:28 - click on features you can click on
577:29 - routes these are different sorry you can
577:31 - click on features you can click on docs
577:33 - you can click on resources so these are
577:35 - different routes which are available on
577:37 - this page so
577:38 - using angular router we will be able to
577:40 - configure all this on the front end
577:42 - itself so we don't have to do this on
577:44 - backend it provides this spf
577:47 - functionality single page application so
577:49 - if you see
577:51 - we are still on the same page
577:53 - right if you click on blog it redirects
577:56 - to another page so this is different but
577:58 - this is single page application so where
578:00 - you can click on any let's say we can
578:01 - click on docs click on any of the urls
578:04 - overview you can see your url is getting
578:06 - changed but there is no
578:08 - uh request to the server
578:11 - so everything is happening on your front
578:13 - end which is which means it's a single
578:15 - page application where everything is
578:18 - known to your application in advance so
578:21 - it doesn't need to
578:23 - take any data from the backend
578:25 - apart from the http calls which we'll be
578:28 - making
578:31 - we can also configure nested routes so
578:34 - what is the nested route so you can see
578:36 - if i click here you can see guide is the
578:39 - main route and then in
578:41 - guides we have different i mean this is
578:43 - not uh this is not the uh
578:45 - uh child yeah so you can see kite is the
578:47 - parent route and then you have different
578:50 - child routes available inside this
578:53 - so
578:53 - if i go to get started you will find
578:55 - okay what is uh angular
578:58 - the developer guides but yeah i mean
579:00 - everything is getting loaded inside the
579:02 - same route so we'll see how we can also
579:03 - configure something like this where
579:06 - we can replace some part of you so
579:09 - that's will that will be covered as well
579:12 - so let's go ahead and see how we can set
579:14 - up router so
579:16 - let's go back
579:19 - to the code
579:26 - so this is our code and we don't have
579:28 - any uh router routing functionality as
579:31 - of now and let's go ahead and add that
579:33 - so we'll be adding it inside app module
579:36 - let's see what needs to be done
579:38 - let's go
579:40 - back to the slides
579:42 - so what we have to do is we have to
579:43 - first go ahead and import router module
579:45 - so router module is uh the module which
579:47 - will provide us all the functionality
579:49 - required for
579:51 - or required to use the routing
579:53 - functionality which angular has
579:56 - so let's add
580:01 - so i will not do it here so
580:03 - we already have something called app
580:05 - routing module remember when we created
580:07 - this application there was a question
580:09 - using ngnu so there was a question do
580:11 - you want to configure routing module and
580:13 - we said yes
580:14 - so that's the purpose so we can keep our
580:16 - code
580:17 - in different modules
580:19 - so here this app routing module is
580:22 - to configure any routes which we want to
580:24 - configure so we already have this so you
580:26 - can see we already have router module
580:28 - imported and then we have exported it so
580:31 - my app component sorry app module knows
580:33 - about this so you can see app routing
580:35 - module is already added here so the step
580:37 - is automated now
580:39 - then we have for root module so let's
580:41 - see forward function
580:43 - so here it is for root
580:45 - so you will be configuring for root 21
580:47 - remember this you should not
580:49 - configure for route multiple times
580:52 - singleton service so in case you do it
580:54 - will probably override the previous
580:58 - routes which you have added so this is
581:00 - taken care for which is all also
581:01 - available and then we will talk about
581:04 - default route dynamic route and wildcard
581:06 - route so let's go ahead and see first
581:07 - how we can configure the routes so
581:10 - what we are going to do is we are going
581:12 - to create multiple urls as we saw on
581:14 - angular.io where you can click on guide
581:16 - we can click on talks we can click on
581:18 - features and it moves to different uis
581:22 - so let's see how many
581:25 - components which we have right now
581:30 - so we have this uh employee rooms and
581:34 - containers let's say we have three these
581:36 - three so let's see how we can configure
581:38 - a route so to configure a route
581:41 - you have to pass two things so first is
581:44 - you have to provide a path
581:46 - so we will say okay this is path
581:48 - and uh
581:50 - you can give any friendly url name you
581:52 - want to for example if i want employees
581:55 - component to be
581:57 - rendered
581:59 - when i click on a url called slash
582:01 - employee localized 3000 sorry localized
582:03 - four two double zero slash employee
582:05 - i can do something like this so i can
582:07 - say employee
582:09 - and when i click this just go ahead and
582:12 - give me employee component
582:16 - so first is configured
582:18 - we will similarly do it for others so
582:21 - let's say path
582:23 - and we'll see rooms
582:27 - and
582:28 - when i do this i want this rooms
582:31 - component
582:34 - to be rendered
582:36 - and the last one sorry
582:42 - is i want
582:44 - this
582:45 - to be
582:48 - let's call it as
582:50 - container as of now
582:54 - and when i do this i want component
582:57 - but once again
583:01 - okay container component will not render
583:03 - anything by default so i'll just remove
583:05 - it i'll keep this
583:07 - so we have two routes available right
583:08 - now so employee and rooms
583:11 - and
583:13 - let's try to see if our application
583:15 - works
583:21 - and let's say
583:23 - rooms
583:24 - i entered the incorrect early
583:28 - and it doesn't right it be it goes back
583:30 - to whatever we we had so let's see
583:37 - so there should be an error let's see uh
583:39 - so
583:40 - okay right now okay that error is
583:43 - because okay this route is
583:47 - okay
583:48 - so when we are clicking on slash room so
583:50 - you can see okay there uh in ui you can
583:52 - see the url but nothing happens right i
583:55 - mean
583:55 - so it should only display the content
583:57 - related to rooms or when i say
584:00 - slash employee only it should only
584:02 - display the content related to employee
584:05 - because we are
584:06 - missing one important thing
584:08 - when we configure routing we have to
584:10 - place so i'll just remove this i mean
584:13 - i'll just comment all this out here
584:15 - and container let's remove this
584:18 - let's remove this and let's remove this
584:20 - as well
584:22 - so here we have to place something known
584:24 - as a router outlet i'll come back and
584:26 - we'll talk about this what this router
584:28 - outlet is
584:30 - and let's see so we have in uh so slash
584:33 - employee and it says employee works and
584:35 - then there is john because this is what
584:37 - it is available on
584:39 - employee component that's it let's try
584:41 - with rooms
584:44 - and you should be able to see all the
584:46 - details related to rooms it works i mean
584:49 - sorry
584:51 - so it works i mean so we have
584:54 - rooms related data when we click on
584:56 - rooms we have employee related view or
584:59 - we can say employ related data when we
585:00 - click on employee so we have configured
585:02 - a route
585:03 - but do you think this is usable the
585:06 - answer is no of course right i mean
585:08 - generally we don't do that we don't ask
585:10 - users to go ahead and click on this url
585:13 - so you will go to good rooms or click on
585:14 - this url so you will go to employees we
585:16 - don't do that we generally have a nice
585:18 - navigation available
585:20 - or
585:21 - whenever you do localhost four to double
585:23 - zero let's see this
585:25 - so four to double zero and nothing
585:26 - happens there is nothing available on my
585:30 - route
585:31 - so generally what we do is for this
585:33 - we
585:34 - set up a default url so what we will do
585:36 - is let's set up a default url then we
585:38 - will see how we can work on the
585:40 - anchorings or the urls and then we will
585:43 - add an angular material
585:45 - so let's go back to the code and let's
585:48 - do first thing first
585:49 - we will add the default url so what i
585:51 - want is
585:53 - or as a user as a developer what i want
585:55 - is i mean whenever a user comes on to my
585:58 - page let's say he and uh mentors ww2 dot
586:01 - abc.com or right now local is for zero
586:05 - the user should be redirected to rooms
586:10 - so how we can do that so we can say path
586:14 - and redirect to
586:15 - slash rooms and path match full so it
586:18 - will match the entire path that's that's
586:20 - what this path match full means uh you
586:23 - can also provide rejects expression in
586:25 - case you need to most of the application
586:27 - don't need that so don't over complicate
586:30 - things so here we are saying okay
586:32 - whenever i come whenever a user comes on
586:35 - my web page
586:36 - and there is nothing after that slash
586:39 - four double zero
586:41 - so the path is empty
586:43 - redirect to the rooms which is already
586:45 - configured
586:46 - and
586:47 - make sure that you are matching full
586:48 - path
586:49 - so let's see and now we are redirected
586:52 - to rooms let's go ahead and verify it
586:53 - again
586:54 - photo zero and we are redirected to
586:56 - rooms so this is how the default url
586:59 - works
587:00 - now let's see how we can actually
587:02 - add some navigation so first what we
587:05 - will do is we will add some anchor links
587:08 - and then we will see how we can
587:10 - ease this process by using angular
587:12 - material or any other ul library of your
587:14 - choice
587:15 - so i'll add enter
587:18 - now you may have used href
587:21 - don't use href here so let me show you
587:23 - what happens in case we use href
587:26 - uh so of course we can do h reference
587:28 - equals to rooms
587:31 - and
587:32 - i can see rooms
587:40 - and similarly
587:42 - i can say employee
587:44 - so there's two anglings which are
587:46 - available
588:00 - and let's see let's click on employee
588:04 - hey it works
588:05 - let's click on rooms then why i'm saying
588:07 - not to use hf
588:10 - do you saw any uh odd behavior as we
588:13 - discussed about
588:15 - click on employee and you can see the
588:17 - entire page is getting reloaded this is
588:19 - not an sp this is multi-page application
588:22 - which this is something which happens in
588:23 - mpa multiple multiplayer applications
588:26 - so to avoid this what you should be
588:28 - doing is rather than using href angular
588:31 - provides a property so you can say
588:36 - router link
588:38 - is equals to
588:42 - and let's see
588:45 - click on employee and it works click on
588:47 - rooms it works but did you saw there is
588:49 - no page reload so it means page is not
588:51 - getting reloaded it's a single page
588:53 - application on the same page the views
588:55 - are being changed now coming back to our
589:01 - this
589:02 - router outlet
589:04 - we need to discuss it otherwise how you
589:05 - will understand that how this works
589:09 - so whenever you click on any url what in
589:12 - what happens in case i just keep this
589:14 - router link and remove this outlet
589:17 - let's see
589:19 - and nothing is getting loaded
589:21 - so there is no
589:22 - error you can see cannot read out this
589:24 - is something which is related to earlier
589:26 - view but there is nothing which is
589:27 - getting rendered click on rooms click on
589:29 - employee url changes but there is
589:31 - nothing to render so let's add back this
589:34 - router outlet and we'll talk about it
589:39 - so whenever uh there
589:41 - is
589:42 - any
589:43 - uh url or you have some provided some
589:45 - route which is configured
589:47 - the thing is angular looks for
589:52 - let's go back to this
589:56 - so angular looks for this router outlet
589:59 - on your view
590:00 - if this router outlet is available
590:02 - whatever component which you have
590:04 - configured here so let's go back to the
590:06 - configuration again so here you have
590:09 - added some configuration right so load
590:11 - this component load this component so
590:13 - angular will
590:15 - add this component just after this
590:17 - router outlet remember this so you have
590:19 - rooms added just after this router
590:21 - outlet in case this router outlet does
590:23 - not exist angle
590:25 - i mean won't be able to add this because
590:26 - there is no router outlet so same in
590:29 - case i click employee it will just
590:31 - remove the existing component and add
590:34 - this employee component this is how
590:36 - this works this router router
590:38 - functionality works so make sure i mean
590:41 - when you start
590:43 - you it will happen that you will miss
590:44 - router outlet a lot even it happened
590:46 - with me and i still do that i mean
590:48 - whenever i'm doing a live coding i miss
590:50 - it generally i mean
590:52 - not generally but occasionally not it
590:54 - doesn't happen a lot but yes it it
590:56 - happens so in case your router is not
590:58 - working route functionality is not
591:00 - working just check if you have router
591:01 - outlet available or not and that's it it
591:04 - will be taken care of
591:05 - now
591:07 - now what we have done we have added the
591:09 - routing functionality we have
591:11 - added the routes we have added anglings
591:14 - to shuffle between it we have added the
591:16 - default route we have uh even
591:20 - yeah that's it so now what we will do is
591:22 - now
591:23 - of course this url this navigation
591:25 - doesn't look nice right i mean
591:27 - uh of course i'm not going to use this
591:29 - application if i have to i mean how this
591:32 - ui looks like so what we can do is let's
591:34 - go ahead and add material next
591:42 - now in this video we will be adding
591:43 - angular material to our application and
591:46 - we will also add a navigation nice
591:48 - navigation using angular material itself
591:51 - so the page is material.angular.type
591:54 - this is the webpage
591:58 - where you can read uh everything about
592:00 - angular material so it's a
592:02 - ui component ui component library
592:04 - similar to remember we try to add
592:06 - angular booster so this is some similar
592:09 - but it uses the material css so material
592:13 - or you you can say it uses material
592:15 - design so material design is of course
592:17 - something which is uh created and
592:19 - maintained by google itself so they have
592:21 - created a component library on top of it
592:24 - you can see it has a lot of components
592:25 - you can go to components it provides cdk
592:27 - as well in case you want to build your
592:29 - own components
592:30 - uh which angular already has and it has
592:32 - a guide
592:33 - so
592:34 - let's go ahead and add this
592:36 - the first thing which i'm going to do is
592:38 - i'm going to stop the server because it
592:40 - will add some configurations to
592:42 - angular.json
592:43 - and have to anyways restart it
592:45 - so
592:46 - let's go ahead and
592:48 - get started
592:49 - so it says uh there are some
592:52 - guide for angular and then there are
592:54 - some steps which we have to do so the
592:57 - easiest thing to ins or easiest way to
593:00 - install angular material is just to run
593:01 - this command
593:03 - so let's do that
593:10 - ng add angular material
593:18 - so it says the angular material 13.1.1
593:21 - will be installed i would say yes
593:22 - because that's what i'm looking at i'm
593:24 - using angular 13.
593:42 - and it will ask you to choose themes so
593:45 - the themes are same which is available
593:47 - here so you can see
593:48 - it has purple and green pink and blue
593:51 - deeper palette amber
593:53 - and
593:55 - you can choose whatever you like so
593:56 - let's go with indico and pink
594:00 - which is the default one okay
594:02 - you want to use angular typography we
594:04 - are not going to use it but let's add it
594:07 - do we need animation yes we need
594:08 - animation
594:11 - because a lot of angular material
594:13 - component uses
594:15 - animation
594:18 - you can disable them if you want to i
594:20 - mean in case you are using some older
594:21 - browser we have seen
594:23 - uh the animation doesn't work properly
594:25 - on i11
594:26 - in case you are supporting it if you are
594:29 - not supporting it you are lucky
594:31 - now uh angular has itself dropped the
594:33 - support for i11 and most of the uh
594:38 - most of the applications out there
594:39 - doesn't support i11 anymore
594:42 - and now it is added
594:44 - let's go ahead and see the changes
594:56 - so it
594:57 - adds this
594:59 - css you can see the css is added here
595:02 - and it will add some styles
595:06 - it added some meta tags
595:09 - here
595:10 - and link
595:12 - which is which is to you uh load
595:13 - material icons
595:16 - and it will also
595:18 - add browser animation because we said we
595:20 - want to use browser any uh sorry we want
595:22 - to support animation so this browser
595:25 - animation module is added
595:27 - and that's it
595:28 - let's
595:29 - go ahead and run our application and see
595:30 - how it looks like
595:33 - remember we have not added the uh
595:35 - navigation as of now we'll do that next
595:39 - once we see the changes on our
595:41 - application
596:07 - okay so
596:08 - probably uh the changes are not that
596:10 - visible but you can see
596:12 - the
596:13 - font is changed
596:15 - because of course the angular material
596:16 - has a different font right
596:18 - now
596:20 - click on employee rooms everything works
596:22 - let's inspect
596:24 - and there is no console error apart from
596:26 - one which we have already discussed
596:27 - about this error
596:29 - now let's go ahead and add the
596:31 - navigation as we discussed about
596:35 - so we'll go back to the uh guide section
596:38 - here
596:39 - let's see
596:40 - and in guide there is
596:43 - something known as schematics
596:45 - i am showing you because
596:47 - you should keep this in mind that
596:49 - whenever you want to refer it next time
596:51 - just refer the docs so
596:54 - you can see uh this step is available
596:56 - here and in case you want to install cdk
596:59 - which we don't need as of now
597:02 - we what we want to do is we want to
597:03 - create a navigation so for creating a
597:05 - navigation there is a navigation
597:08 - schematic which is available
597:10 - it means it's a command which will
597:12 - generate the entire navigation page for
597:14 - us and we can just use it
597:17 - so let's go ahead and do that
597:26 - so it here
597:30 - so i'll see this is navigation so i'll
597:32 - call it as this is a app nav app
597:36 - navigation
597:44 - and this is done
597:45 - so we have
597:47 - this apple nav
597:49 - or we could have just said navigation
597:51 - that's that's all also fine but yeah
597:53 - so we have this uh component available
597:55 - here let me just close this
597:57 - and it has some already code which is
598:00 - available
598:01 - so we can see okay this is available
598:03 - here as well
598:05 - and
598:07 - some breakpoint observer i mean this is
598:09 - something which you may have do
598:11 - by your own in case you don't use the
598:13 - schematic so let's see how it looks like
598:15 - so what i'm going to do is you can see
598:28 - uh you can you can see uh it has some
598:31 - matte list some with some href we will
598:33 - be replacing the search reps with router
598:36 - or router link
598:37 - and this is where the content goes
598:40 - you can see it says add content here
598:43 - so
598:44 - let's replace
598:47 - and make this component available here
598:56 - let's comment this out let's
598:59 - comment this
599:04 - and let's see our view
599:07 - let us see our application so you can
599:08 - see it has some menu link one link to
599:12 - which of course doesn't work right now
599:13 - because there is nothing which is
599:14 - configured
599:16 - but you can see also this is
599:19 - responsive
599:21 - so you don't have to actually go ahead
599:23 - and
599:23 - make this responsive you don't have to
599:25 - write any extra css this is all taken
599:27 - care of so a responsive navigation bar
599:29 - created for us without even writing a
599:32 - single line of code yes this is what
599:34 - angular material does
599:35 - or this is how you can actually utilize
599:37 - the schematics which is available by
599:39 - angular material
599:41 - so let's uh
599:42 - add some let's make this
599:44 - navigation work
599:47 - so here
599:49 - let's go back and we said here we'll add
599:52 - router link
599:54 - and as we already know the routes we
599:56 - don't have to actually go ahead and
599:57 - move it in box so i can say okay this is
600:00 - uh rooms
600:04 - and this is a router link
600:09 - is equals to
600:11 - i'll say this is employee
600:17 - and
600:22 - we'll say this is employee
600:26 - remove this and now we
600:29 - want to add a component here router
600:31 - outlet
600:32 - and let's
600:36 - see our application it works right so
600:38 - you can now navigate to room so you can
600:40 - navigate to employees and everything
600:42 - works fine
600:43 - so this is how you can uh add angular
600:45 - material to our application
600:46 - or any application and you can also
600:49 - configure the routes and
600:52 - you can also add navigation without
600:55 - making much of an effort so you can see
600:57 - it is responsive it will work for mobile
600:59 - so you can just click on mobile here and
601:01 - it will work so you can move to whatever
601:04 - url or whatever routes you have
601:06 - configured
601:07 - so this is it from this particular video
601:11 - so far what we have done is we have
601:13 - configured the route we also saw how we
601:15 - can set default route for our
601:17 - application but let's see there is one
601:19 - problem with what whatever we have done
601:21 - so far and we will see how we can fix it
601:25 - so here let's say if i try to enter a
601:29 - route which does not exist
601:31 - and this is where the problem is you can
601:33 - see blank page
601:35 - and now if i go to the uh
601:39 - console.log let's see
601:40 - something interesting there
601:43 - so in console you will see an error
601:45 - which says cannot match any routes with
601:47 - this particular url so let me just zoom
601:50 - in and of course this url does not exist
601:52 - but we should not give a blank page
601:54 - right what we generally do in real time
601:56 - applications you might have visited lot
601:58 - of applications you might have used it a
602:01 - lot of web web apps what you generally
602:03 - do
602:04 - yes the answer is four or four pages
602:06 - right in case uh you guessed that you're
602:09 - absolutely right
602:10 - so
602:12 - the solution is to add a 404 route how
602:15 - we can do that using angular
602:17 - so this is where
602:19 - we are going to do
602:25 - so this is where we are going to do
602:28 - a wild card route example or we are
602:31 - going to see an wildcard route example
602:33 - so let's go back to
602:35 - let's go back to our code
602:38 - and let's open the configuration file if
602:40 - you remember it was app routing module
602:43 - and we had added this default route now
602:45 - let's go ahead and add a wildcard route
602:47 - which will take care of and we'll talk
602:49 - about it let's first add it so how to
602:51 - add wireless card route you have to say
602:52 - path
602:54 - and
602:54 - you will say double star which is
602:58 - the
603:01 - let's
603:02 - write this and talk about it here so the
603:04 - path double star says any
603:07 - route which does not match
603:09 - to any of this
603:11 - will be captured by this and what we are
603:13 - doing is we are redirecting to rooms
603:16 - do we need to the answer is no we don't
603:19 - so let's uh create a 404 page and let's
603:22 - redirect the users to 404 page so let's
603:25 - add a component
603:28 - and we'll say ngc
603:31 - and we'll say this is not formed
603:33 - you can show whatever you want to
603:35 - probably i've seen a lot of inventive uh
603:39 - ways to actually show not one page there
603:42 - are a different application which uses
603:45 - some
603:46 - svg svgs like some
603:49 - skull logo
603:50 - depends right so whatever whatever your
603:52 - use cases
603:53 - so here we are adding not phone page and
603:55 - let's go back to component
603:58 - and i'll say this
604:00 - or we can say the resource
604:03 - you are
604:06 - looking for
604:09 - does
604:10 - not exist
604:12 - right so we can show this
604:14 - and
604:16 - what we can do is we can just wrap it
604:18 - inside a div
604:20 - and
604:24 - let's
604:25 - do
604:25 - [Music]
604:26 - just add some css here h1
604:30 - and we'll say this is
604:32 - font
604:35 - size and
604:36 - font color
604:39 - so color
604:40 - would do
604:41 - and we'll say this is red
604:45 - let's see
604:46 - let's go back
604:48 - to our application and let's try to
604:49 - enter a url
604:52 - uh but again sorry right now it will be
604:54 - redirected to rooms because we said it
604:56 - should be redirected to rooms here
604:58 - but what we want to do is we want to
605:00 - redirect to
605:01 - of course
605:03 - not found page so we can say component
605:05 - and we will say
605:08 - not
605:10 - bom component
605:12 - let's save
605:14 - and let's try to enter url which does
605:16 - not exist and here we are the resource
605:18 - you are looking for does not exist i
605:19 - think there is some problem with css
605:21 - which is uh not
605:23 - taking the color probably it should be
605:26 - font
605:27 - color if i'm not wrong there is nothing
605:29 - called font color
605:37 - that's my mum
605:46 - okay there is something wrong but yeah
605:49 - anyways this is not
605:51 - what we want to do so
606:00 - so now what we have is we have a 404 uh
606:02 - page which is available for us by using
606:05 - the wildcard route match so this is how
606:07 - we can
606:07 - handle those scenarios
606:09 - and
606:10 - let's
606:11 - see what's next
606:13 - so now we will talk about
606:15 - how we can create dynamic urls that is
606:18 - interesting right so what in case i want
606:20 - to uh
606:21 - redirect a user to let's say room slash
606:24 - id
606:25 - right so it uh you might have seen some
606:28 - uh ecommerce applications and let's take
606:30 - an example of e-commerce application
606:31 - let's open one so let's go to amazon
606:36 - and let's click on let's see any product
606:39 - so i say yeah
606:41 - one plus
606:45 - nine pro
606:48 - and when you click on this you can see
606:50 - uh there are some parameters which is
606:52 - added after this right
606:56 - if you see this one it has like s k one
606:59 - plus whatever your product name is and
607:01 - after that uh you will see here
607:04 - uh you have keyword one plus nine pro
607:06 - equals to this lot of parameters which
607:08 - is added in the url
607:10 - but in case we want to create some url
607:12 - where we can pass some let's say in our
607:14 - case a room id and it opens the new page
607:18 - right i mean it redirects to a new page
607:21 - let's see how we can do that how we can
607:22 - configure a url like that
607:24 - so this is where we will be discussing
607:26 - about
607:27 - the concept of dynamic routes we'll see
607:30 - how we can create dynamic routes
607:36 - the first thing which we'll do is we'll
607:37 - go to rooms uh let's see the ui first
607:41 - sorry
607:42 - so let's uh go to the ui first and we'll
607:45 - go to rooms
607:46 - and remember we added the select button
607:48 - so what we will do is on click of the
607:50 - select button we will redirect the user
607:52 - to
607:53 - another view where we can see the
607:56 - information about this particular page
607:58 - in
607:59 - as we move forward we will
608:01 - we will actually
608:02 - change this button to book
608:05 - now and so users can not use this but
608:08 - let's say it's a hotel inventory
608:10 - management so the hotel uh receptionist
608:12 - or anyone can book the hotel from this
608:14 - particular button
608:16 - so
608:17 - they know which particular room number
608:19 - is this and then they can just enter the
608:21 - information related to the user and
608:23 - that's the type in the
608:25 - guest and that's it so let's go back and
608:29 - what we will do is
608:31 - i'll
608:32 - create a new component here
608:35 - so let's go to open in integrate
608:37 - terminal
608:38 - remember one thing i mean i'm i'm
608:40 - [Music]
608:42 - creating the components which are
608:44 - related inside the same folder for
608:46 - example right now i'm going to create a
608:47 - room booking folder which is of course
608:49 - related to room so i'm keeping this
608:51 - inside this world folder so i'll say
608:54 - this is ng
608:56 - c and i'll say this is rooms
609:01 - game
609:07 - now we have this component available
609:09 - and
609:13 - so now we have this component available
609:15 - now what we have to do is we have to
609:17 - redirect whenever we click on that
609:19 - particular select button on this
609:21 - component so
609:22 - but that particular id will be of course
609:26 - it will be dynamic we don't know the id
609:29 - by default i mean in advance so let's
609:31 - see how we can do this so it's a path
609:36 - rooms of course rooms will remain same
609:38 - because that's the
609:39 - main url let me enter point slash and
609:42 - you can put colon id
609:45 - and let's see what the purpose of that
609:47 - particular component are sorry colon id
609:50 - is smooth
609:51 - here and then it's a component and we'll
609:54 - say this is
609:55 - rooms
610:00 - booking
610:06 - let's add this to
610:08 - module and this is
610:10 - so a room slash id and then rooms
610:12 - looking component let's test this right
610:15 - now
610:16 - and is there any missing thing yes
610:18 - there's a
610:19 - comma missing here let's
610:21 - close this and now let's try to
610:24 - test this first how we can test it i can
610:26 - just enter whatever i want to after room
610:29 - slash and you can say it says rooms
610:31 - booking works
610:33 - and from where it is coming it is coming
610:35 - here so it means my route is working
610:37 - fine i mean i can enter whatever i want
610:39 - to after this and it will just redirect
610:42 - me to room smoking works
610:43 - now what we have to do is we have to
610:46 - make a link from
610:48 - this rooms list
610:50 - right so whenever we click on this
610:52 - particular button select room we should
610:54 - be redirected to that particular
610:56 - component how we can do that let's see
610:58 - so there are multiple ways uh i can just
611:00 - use router link
611:02 - remember we uh right now on select room
611:04 - we used to actually send the data back
611:06 - to the component so what we will do is
611:08 - we will just
611:09 - comment this out
611:14 - and we will use button now
611:16 - and with router link
611:19 - right now the router link value will be
611:21 - dynamic so
611:22 - input
611:23 - box is equals to
611:26 - and then here i can say rooms so i can
611:28 - say slash
611:30 - rooms
611:32 - and
611:32 - the next value is the id which we want
611:34 - to pass so we already have that
611:35 - particular id which is room dot id if
611:37 - you remember so
611:39 - here room
611:41 - and why we don't have id
611:45 - anyways we
611:47 - will see room dot id
611:50 - and
611:52 - let's close button and we'll say
611:56 - book pro
611:59 - okay somehow it says rooms does not have
612:02 - id as possible room number okay sorry
612:08 - so we have a room number
612:12 - and
612:13 - i'll also add a class so let's add the
612:15 - class
612:17 - btnb primary let's use the same one
612:26 - so let's go back to our employer sorry
612:30 - rooms
612:31 - now we have this book room button
612:32 - available here let's click on one of
612:34 - them and you can see room slash one so
612:36 - you have the values available here so
612:38 - let's go back again
612:40 - and click on rooms
612:42 - book and we have the id has two
612:44 - available here so now we have configured
612:47 - a dynamic route now we can actually
612:49 - navigate between that but let me show
612:51 - you one more thing
612:53 - i am removing the slash here and it has
612:55 - a purpose so let me show you
612:57 - because this is something which you may
612:59 - face in your real-time application so
613:01 - you can see now what what is happening
613:03 - here
613:04 - now i am not redirected to rooms booking
613:06 - page remember i am redirected to 404 the
613:09 - resource you are looking for does not
613:10 - exist why
613:12 - let's see the url found the issue
613:15 - yes room says
613:17 - twice
613:18 - why so
613:20 - why it was working before so whenever
613:22 - you say slash it means the route should
613:24 - start from here
613:26 - by default the uh
613:28 - routing functionality works in a way
613:30 - that it will always append the previous
613:32 - url which is already or sorry previous
613:34 - uh you can say uh the parameters without
613:37 - parameters which is already available
613:40 - that's the reason it was like so doing
613:42 - room slash rooms because
613:44 - uh we said we we don't have slash right
613:47 - so it will say okay the earlier
613:48 - parameter is rooms here
613:51 - right so it is it is it has the rooms if
613:54 - i click on this
613:55 - it is saying just go ahead and add these
613:57 - two parameters to the url when we put
613:59 - slash it is saying just start from here
614:02 - so whatever the url is i want to
614:04 - redirect to rooms slash id
614:07 - so this is the difference remember uh we
614:09 - really uh keep this in your mind or you
614:11 - can just revisit the video again in case
614:13 - you get this error uh in future
614:16 - so now uh we have configured dynamic url
614:20 - we are now
614:21 - able to redirect to uh the component as
614:23 - well what next what next what do you
614:25 - think what should be the next step for
614:27 - us
614:29 - yes you guessed it right you we need to
614:32 - get the id right so whatever id we are
614:34 - passing in case you want to boot this
614:36 - particular room we need this id we need
614:38 - to read the one or two whatever value
614:41 - which is available into the parameter
614:45 - so let's see how we can do that for that
614:48 - we will go back to rooms component
614:51 - and let's say what we will do here is we
614:53 - will put the id
614:55 - uh i'll just do id right now and let's
614:58 - see how we'll read this id
615:04 - i'll go back to the slides
615:07 - and
615:08 - we will talk about a service called
615:10 - activated route service because this is
615:12 - what we are going to use
615:14 - remember so what activated route
615:16 - activated route services so it allows
615:18 - you to read the router data whatever
615:20 - router data which is available inside
615:22 - your application
615:23 - you can also access the snapshot data so
615:25 - we'll talk about what snapshot and the
615:28 - other data is and then you can also
615:29 - access data from route config we will
615:31 - see all these examples but let's
615:34 - do first what you want to do is we want
615:37 - we have
615:40 - right now the value which is which we
615:42 - are talking about is it is available
615:43 - inside our route right so we want to
615:47 - read this one
615:49 - so i'll say private this is a service
615:51 - and it is available by default by and
615:54 - provided by angular router so you don't
615:56 - have to do anything else you we have
615:58 - already we have already imported the
616:00 - router module so we don't need to
616:02 - register anything extra
616:04 - so let's say this uh
616:06 - router
616:07 - which is
616:10 - activated route
616:13 - right so we have injected the service
616:15 - and they should come from angular slash
616:16 - router remember this
616:18 - and now uh here we will say this dot
616:20 - router dot
616:22 - so there are multiple parameters which
616:23 - we have and the ones we the one which we
616:26 - need is we need terms
616:28 - and then in params see this
616:30 - so it's also an observable yes so router
616:34 - data is an observable so we can say
616:36 - subscribe and let's see uh
616:40 - let's say
616:41 - let's say params
616:43 - and
616:46 - see if there is an extra closing yes
616:48 - and console.log balance right now we'll
616:50 - just do this
616:52 - let's see what we get here so
616:55 - console and
617:00 - we have this right so we if let's zoom
617:03 - in so we have id and one so it gives you
617:06 - key value but from where this particular
617:08 - id is coming from
617:09 - right we are not seeing this uh just
617:11 - required and read id
617:13 - let's go back to our code base and let's
617:16 - go to the configuration
617:19 - this is the id so
617:21 - angular remember it knows that okay this
617:23 - particular key whatever i'm passing here
617:25 - is actually defined as id
617:28 - you can name it whatever you want it
617:29 - doesn't need to be id i mean you can
617:31 - just say room id
617:32 - let's try that right so we can say room
617:37 - id
617:38 - and let's see here so you will get it as
617:40 - room id not id
617:42 - so
617:42 - keep it whatever you want to
617:44 - should be i mean uh
617:46 - it should describe itself right i mean
617:48 - here we are talking about room so room
617:50 - id doesn't make sense i mean even room
617:51 - slash id does make sense but just not to
617:54 - get confused you can just keep it
617:55 - whatever you like
617:56 - now we uh now we know the key
617:59 - now let's try to redrive the values how
618:02 - to get it
618:04 - so here
618:06 - you can say params.get
618:25 - there are multiple ways so we can
618:27 - do this one let's try it with
618:31 - terms
618:33 - dot
618:35 - no this is not the one
618:41 - so parents of room id and
618:44 - let's see
618:46 - we need to of course do a console.log so
618:54 - let's try let's do one thing so i'll say
618:56 - remember we already said uh we'll be
618:59 - using a variable called id and this is
619:01 - number so i'll say this dot
619:04 - id
619:06 - is equals to
619:08 - param
619:09 - of room id so let's see
619:12 - and we will save this as well
619:15 - the template one
619:19 - okay it has no initializer so
619:22 - and say this is default to zero
619:26 - and you have one available here so you
619:28 - can see uh the value which is available
619:30 - inside our route
619:32 - is
619:32 - now we are able to capture it so let's
619:34 - go back click on rooms
619:36 - click on room 2 and the value 2 is
619:39 - available here so this is how you can
619:40 - actually go ahead and access whatever
619:44 - dynamic parameter you define inside your
619:46 - url but let me show you one more thing
619:48 - here
619:49 - so here uh you
619:51 - remember we always we said while talking
619:54 - about rxjs you should not subscribe
620:01 - remember while talking about uh
620:02 - observables we said we should not
620:04 - subscribe it will lead to memory leakage
620:06 - so how we can actually make sure that uh
620:08 - [Music]
620:10 - i mean how we can avoid this particular
620:11 - subscription so there are ways of course
620:13 - the way is using
620:15 - the rhs rxjs operators so here what we
620:19 - can do is we can actually do something
620:20 - like this so i can say um
620:26 - this dot id is equals to i'll say this
620:29 - dot
620:30 - uh
620:31 - router dot let me show you snapshot as
620:34 - well sorry we've actually wanted to
620:35 - discuss about this as well so params
620:38 - snapshot
620:40 - dot patterns
620:43 - of
620:45 - room id
620:51 - and let's see
620:52 - snapshots and then we'll come back to
620:54 - the subscription so let's go to rooms
620:56 - and click on one let's go back to rooms
620:58 - and click on two so you might be
621:00 - wondering okay if i am able to get the
621:01 - data using snapchat why should i go
621:03 - ahead and use subscription
621:04 - so remember snapshots will never update
621:07 - the data in case you are changing the
621:09 - value being in the same view
621:12 - so whenever a new value is submitted by
621:14 - anyone that value will never be captured
621:16 - right now we are actually migrate we are
621:18 - navigating to another view so it is it
621:21 - knows okay we are coming from another
621:22 - view and i need to update
621:24 - our take this status from snapshot so
621:27 - this will never receive a new value in
621:30 - case it is already in the view remember
621:33 - this because in case uh in future we
621:35 - will talk about child components and if
621:38 - you try to access using snapshot you may
621:40 - get into issues right where the value
621:42 - will never be updated so this is
621:44 - snapshot but this is not what we are
621:46 - looking at so i'll say this dot id i'll
621:49 - create one
621:51 - here let's create
621:53 - id
621:55 - uh stream is equals to
621:57 - right
621:58 - which is type of sorry
622:02 - type of observable
622:04 - of number because we know what this is
622:06 - going to be number
622:09 - and
622:12 - we put this here
622:13 - and let's see so we'll say this dot id
622:16 - which is stream is equals to this dot
622:19 - router
622:23 - dot params
622:27 - dot now we will use pipe because we
622:30 - don't want to
622:31 - subscribe and here we will use something
622:34 - known as there are multiple operators we
622:36 - can use we can just use map right so
622:38 - let's try let's go with map i mean this
622:40 - is the this is the easiest one right so
622:42 - we can say map and you can see the id it
622:44 - says it will be type of number because
622:46 - it knows the type and let's move and
622:50 - use this
622:53 - id
622:55 - type
622:56 - async
622:57 - right so what we have done here so we
622:59 - said now we are not going to subscribe
623:01 - manually we can just do this let's let's
623:03 - try to
623:04 - avoid this and let's do this
623:08 - id is equals to this
623:10 - and recommend this one
623:16 - it's format
623:19 - and
623:20 - [Music]
623:22 - let's see the application so you have
623:24 - the value when available here click on
623:26 - rooms and values to
623:28 - click on here and values three so we are
623:30 - still able to get the value the param
623:33 - value by using
623:35 - passing by we are not we we are not
623:37 - subscribing anymore
623:40 - and we also saw how we can get the data
623:42 - from params
623:43 - using
623:44 - the
623:46 - activated route service
623:51 - and
623:52 - what else what else
623:58 - here uh let's talk about
623:59 - so here let's talk about one more thing
624:01 - so right now we are using this params
624:03 - property right
624:04 - but there is one problem with params
624:06 - property what in case we have multiple
624:08 - values available as part of your query
624:11 - your parameters right
624:13 - but in that case what you will do of
624:14 - course you can say params of another
624:17 - value
624:18 - but uh there is another uh api which is
624:20 - also available which is more preferred
624:22 - than this params so let's try to use
624:24 - that particular parameter uh or
624:26 - particular property so i just comment
624:28 - uncomment this
624:30 - and rather than params
624:32 - we will use something known as paramap
624:35 - same it also emits the observable but
624:37 - let's see what is the difference but
624:40 - sorry what is the difference here so it
624:41 - is the params and to get the value
624:46 - here you can use params
624:49 - dot and now let's see this so it has
624:51 - some methods like get all has keys so
624:54 - you can before even accessing the values
624:58 - so before even accessing the values you
625:00 - can see if this particular particular
625:02 - key exists or not right it is really
625:04 - useful in case you want to redrive
625:06 - multiple information and other
625:08 - information is probably let's say
625:09 - optional right
625:14 - so you can just check if this particular
625:16 - key exists by using ash sorry it has and
625:19 - then you can access the value so here
625:21 - you can see get
625:22 - and then you you have to provide the key
625:24 - again the key will be room id
625:27 - so
625:28 - this is how you will be writing it but
625:29 - as we already have this code what we
625:31 - will do is we will replace this using
625:33 - this one so we can say paramap and uh
625:36 - here
625:37 - i'll say params dot get room id
625:42 - and let's uh comment this out we don't
625:44 - need it anymore we just wanted it for
625:46 - reference
625:47 - and let's go back to our ui
625:52 - and we still have this working code
625:53 - available so you can see
625:55 - the values whatever value we change we
625:57 - are getting that value available here so
625:59 - this is a preferred paramap because it
626:02 - is like more clean ui rather than
626:04 - actually uh
626:07 - uh just getting the value like this
626:10 - which may throw an exception in case the
626:12 - key does not exist here you can actually
626:14 - go ahead and check if this key exists
626:16 - and get the value
626:17 - so this is
626:20 - from the dynamic routes and let's move
626:22 - ahead
626:24 - so before we go ahead and utilize more
626:27 - services related to routing or more
626:29 - functionality related to routing we are
626:32 - going to
626:33 - have some more views and for that what
626:36 - we are going to do is we are going to
626:37 - jump
626:38 - right now or into forms so what we will
626:40 - do is we will create some views uh using
626:43 - forms and we will combine both together
626:46 - i mean forms plus routing so we get a
626:49 - complete picture
626:51 - how our application looks like
626:54 - so
627:02 - we are going to start with template
627:04 - driven forms
627:11 - so let me tell let me tell you this
627:13 - first angular has two types of forms
627:15 - template driven forms and it also has
627:17 - reactive forms
627:19 - for me personally i prefer reactive
627:21 - forms but it's not like
627:22 - they
627:24 - one is one is bad one is good it's not
627:26 - like that they both are powerful it's
627:28 - just on based on your use case what you
627:30 - prefer or based on what
627:33 - flavor you prefer right so we will go
627:36 - through both we will create forms using
627:38 - template driven forms as well as
627:39 - reactive forms and
627:41 - you can choose while working on your
627:43 - application which suits your team which
627:45 - suits your
627:46 - application so let's start with template
627:49 - driven forms first
627:50 - so what the agenda is we will set up
627:52 - template driven forms we will see how we
627:54 - can add validation we'll see how we can
627:56 - submit and reset forms
627:58 - we will uh
627:59 - see some examples if you remember we uh
628:02 - we saw pipes and we saw directives so
628:05 - here we will see uh how we can use
628:08 - custom uh for how we can write a custom
628:10 - pipe how we can write a custom validator
628:12 - uh and how we can also write a custom
628:14 - directive so validator part it's related
628:17 - to forms how we can validate forms
628:19 - so let's see uh and let's go ahead and
628:21 - see how we can actually set up a
628:23 - template driven form and how we can
628:25 - create our first template driven form
628:26 - but what we will create
628:28 - so remember we performed some crude
628:30 - operation card operation right and we
628:33 - took an example of adding a room so
628:34 - let's do that let's create a template
628:36 - driven form for adding a room
628:38 - so
628:40 - first thing
628:41 - we already
628:42 - have some functionality available so
628:45 - let's close all this
628:50 - rooms
628:51 - we have rooms list and if you remember
628:53 - we had this
628:54 - add button somewhere add room
628:57 - so what we need to do is we need to take
628:59 - this add room functionality out and put
629:01 - it in a different component so what i'm
629:03 - going to do is i'm going to call it as
629:07 - a new component so let's
629:09 - say open integrate terminal
629:17 - and here we will say ngc
629:21 - and
629:22 - let's call it as rooms
629:28 - add
629:30 - okay so it's
629:31 - it will be used to add and grow that's
629:34 - what we are planning we are trying to
629:37 - do
629:38 - and let's see
629:40 - so we got our component and let's go to
629:42 - the slides right
629:45 - let's go to the slides and let's see
629:47 - what are the steps which needs to be
629:48 - performed so first we have to add forms
629:50 - module
629:51 - to module
629:52 - and then we have uh we have uh template
629:55 - driven forms so
629:57 - that's next step so how we create the
629:59 - form so we'll come back to this first
630:00 - let's
630:01 - do the first step so first import forms
630:03 - model to module right now we have one
630:05 - module so let's go ahead and add this to
630:10 - this module and into imports area as
630:13 - it's a module remember
630:15 - and let's
630:17 - format
630:18 - with prettier
630:22 - and add
630:25 - forms
630:27 - module
630:29 - and it is auto imported for me so from
630:31 - angular forms and this is what we wanted
630:33 - to do now let's go ahead and create a
630:34 - form so to create a forms we uh
630:37 - we will be using html forms so we will
630:40 - be writing html form
630:42 - you don't have to do something extra
630:43 - here i mean if you know html you know
630:46 - how to create a form in html that's what
630:48 - is needed to create a form in
630:50 - template-driven forms
630:52 - so let's first see what are the values
630:54 - which is required to add a book room
630:56 - and for that we already have this
631:00 - add room functionality so we need room
631:02 - type we know we need amenities we need
631:05 - price we need photos
631:07 - and check-in time checkout time rating
631:09 - right so these are the things which we
631:11 - need so let's go ahead and add a form
631:15 - for this
631:17 - so i'm going to add form right so this
631:20 - is uh sorry not from
631:22 - form right so this is how we create a
631:24 - html form nothing fancy here and let's
631:28 - add some divs
631:35 - let's see how many fills we had one two
631:37 - three four five six seven so i'll add
631:40 - seven tips
631:44 - three four five six seven and i will add
631:48 - one more for submit button so it that's
631:51 - it
631:52 - and now
631:56 - here uh we i'm going to use some
631:58 - bootstrap classes so uh bootstrap has
632:01 - something called
632:02 - form group
632:04 - so let's use um
632:07 - group
632:08 - so for all the tips we can use form
632:10 - group
632:11 - what it will do it will just add some
632:13 - space so that's what it is going to do
632:23 - except the last one because uh that will
632:25 - be our submit button so that we
632:27 - already
632:29 - gap so
632:31 - from group and now we need controls we
632:33 - need
632:34 - our controls to be added so let's go
632:36 - ahead and
632:38 - do that so we have room type
632:43 - so i'll say input and we have to say
632:46 - type
632:47 - uh so input
632:49 - type will be text
632:50 - and
632:52 - name let's give a name
632:55 - which will be
632:56 - room type
632:59 - and here
633:01 - we are going to use a class
633:04 - of type form control
633:10 - and let's format the document
633:14 - so uh what we will do is we will create
633:17 - a route
633:18 - for adding a room
633:21 - and let's go ahead and do that here
633:23 - so here and just add
633:27 - path
633:29 - we'll say its rooms
633:32 - slash add and component
633:36 - is
633:40 - rooms
633:45 - add component
633:47 - and once done here we need to add this
633:50 - into our routes uh sorry our navigation
633:53 - bar
633:53 - so let's go to navbar go to html and
633:56 - here
633:58 - we will add
634:01 - outlink store rooms slash ad and we'll
634:04 - say
634:04 - add
634:05 - room
634:08 - let's verify this functionality first
634:11 - let's say add room and we have this
634:15 - input text available here
634:17 - so
634:19 - first step is done we
634:21 - added a forms module we
634:23 - just created an input field we added a
634:25 - uh route that's it and now let's
634:28 - complete our form so let's go to rooms
634:31 - slash add
634:32 - and let's add the other inputs
635:01 - okay
635:02 - now before we actually move ahead and
635:04 - talk more about forms why we create
635:06 - forms remember in case you have an
635:09 - enterprise application there will be
635:10 - some use cases where you have to collect
635:12 - user input so that's the that's the
635:14 - reason you will be using forms mostly
635:17 - for example let's say you have some
635:18 - filters which you need to show you need
635:20 - to collect some user input in forms of
635:22 - feedbacks you need to uh
635:25 - collect user profile information that
635:27 - these are some cases where you may need
635:29 - forms it's not mandatory right you can
635:32 - still have an entire application without
635:34 - forms
635:34 - what are the use cases like
635:37 - the applications where you just need to
635:39 - display the data for example you have
635:41 - internal revenue system
635:42 - and uh so what you will end up with so
635:44 - some charts and all those things but
635:46 - still you may need some filters as well
635:48 - so that those are scenarios where you
635:50 - will be using forms and
635:53 - let's uh move now and let's add other
635:56 - controls so i'll say this is
636:00 - and we can add uh one more thing we can
636:02 - add placeholder so we know what we are
636:04 - we are supposed to enter correct so
636:06 - let's say this is room type
636:08 - and let's see
636:09 - so you have a nice uh placeholder
636:12 - available here so it depends so
636:15 - a lot of applications uses label
636:18 - but a lot of mobile first applications
636:20 - does not use label they use placeholder
636:21 - so it's up to
636:22 - uh your design system how you want to
636:25 - proceed with it so
636:27 - and what we will do is let's see if i
636:31 - can add
636:33 - okay let's uh let's take css later
636:36 - and let's see what else we have here
636:40 - amenities prices photos or amenities
636:44 - so it will be let's say this will be
636:48 - text as well
636:52 - and this
636:55 - will be m and these
636:58 - and placeholder will
637:00 - be installed
637:09 - and then it is
637:12 - let's add to
637:22 - let me just
637:24 - it's here so i can just refer quickly
637:27 - so i'll see this is input type this is
637:29 - price so guys to save type is number
637:34 - price i'll say this is
637:36 - placeholder
637:38 - room
637:39 - price
637:42 - for that night
637:44 - so because most of the prices are
637:46 - perfect
637:47 - then we have photoboos
637:51 - and this should be text and placeholder
637:57 - photos
638:00 - and we can say provide link right so
638:05 - this is done
638:08 - and we need check in and check out time
638:11 - so this is our date time right so we can
638:14 - actually use date time
638:16 - and let's say check-in time and
638:19 - place folder
638:21 - because all the hotels actually have a
638:24 - check-in checkout policy right so you
638:25 - have to check in by three i mean it can
638:27 - be part of policy but let's try to keep
638:29 - it minimum so i'll say this this chicken
638:32 - time
638:34 - and check out time
638:38 - and this will be date time as well
638:41 - and then say this is placeholder
638:44 - and this stage report time
638:48 - and this is rating so it will be again
638:51 - number
638:52 - rating and placeholder ulcerity
638:58 - you can in future actually replace this
639:00 - with some rating component in case
639:03 - you come across some
639:05 - some component library which has rating
639:07 - system or rating component you can use
639:09 - it
639:10 - and here i will say
639:12 - button
639:25 - okay so we will have a submit button
639:26 - available here so you have button button
639:28 - button primary submit let's go ahead and
639:30 - verify our forms okay this looks nice i
639:32 - think this is some things which is
639:34 - missing
639:35 - from
639:38 - input class form control
639:41 - from group
640:10 - okay so i think the spaces are missing
640:13 - let me verify
640:31 - okay
640:35 - class form group okay this is correct so
640:39 - now
640:42 - control
640:58 - this is
641:08 - okay so now we have this form available
641:10 - but let's see
641:13 - uh we are still not able to do one thing
641:15 - what's that
641:16 - so we need to collect this information
641:18 - and send it to our backend that is
641:20 - something which is missing how we will
641:21 - do that so
641:22 - to do to achieve that we need some
641:25 - two-way data binding which is uh which
641:27 - needs to be available how we do two-way
641:30 - data binding so angular forms provided
641:33 - by default so in case you want to do it
641:35 - do two-way data binding we will discuss
641:37 - about what data binding is
641:39 - uh but let's see it in picture and then
641:41 - we will do that
641:42 - so first thing uh we need a model uh
641:45 - what we uh the model which we are
641:47 - talking about is we need a interface
641:50 - which tells us how my room
641:53 - information is going to look like
641:55 - so to do that
641:56 - i will create a room
641:59 - which is type of
642:01 - let's see room
642:03 - list i think
642:04 - is equals to
642:06 - yeah this is the uh so remember id room
642:09 - number we have made anyway is optional
642:11 - so let's
642:13 - add some uh other things so let's say
642:16 - room type this this will be the default
642:18 - values which we are adding right now
642:19 - amenities
642:20 - and
642:21 - check in
642:22 - time check out time
642:28 - and then we have photos
642:31 - we have price
642:32 - and then we have rating
642:35 - so these are the default values whenever
642:37 - we are supposed to enter some values
642:38 - into the form this will be the default
642:40 - values which will be available
642:42 - now we need to connect this
642:45 - model
642:47 - this represents our forms fields right
642:49 - so now we need to connect this model to
642:51 - our form so we can pass the information
642:54 - from template to my ts5 and vice versa
642:57 - even i if i change something in my
642:59 - typescript file it should reflect back
643:01 - into my form so these are the that's
643:03 - what we are supposed to do here so let's
643:05 - see how we can do that
643:07 - we have already added forms module into
643:10 - our
643:10 - and module so it
643:12 - it unblocks or it gives you some
643:14 - functionality what is those
643:16 - functionality it gives you info
643:18 - functionality true achieved we're
643:20 - determining how
643:22 - we have to use something known as
643:24 - ng model so remember this so you have to
643:26 - say ng model
643:28 - is equals to
643:29 - uh room
643:30 - which is my property
643:32 - dot
643:33 - your
643:34 - uh
643:35 - sorry room which is uh my model dot
643:38 - property name so here we are supposed to
643:40 - get room type
643:42 - right so this is
643:44 - done here
643:45 - let's add for others so i'll say room
643:47 - type this will be amenities
643:51 - this will be price
643:58 - this will be photos
644:04 - this will be
644:05 - chicken time
644:07 - this will be
644:09 - check out time
644:10 - so
644:13 - and this will be rating
644:18 - now we added this now what what next how
644:21 - we can verify that two area binding is
644:23 - working fine let's see that so what we
644:25 - can do is as room is my property which
644:27 - is supposed to
644:29 - update whenever i enter some value value
644:31 - here i can just do something like this
644:33 - room by jason let's see
644:36 - and you can see uh it has room type
644:38 - amenities check in time checkout time
644:40 - photos price rating everything is
644:42 - available let's add something in room
644:44 - type you can see the value is getting
644:45 - changed it means now i have the power of
644:48 - two-way data binding available with me
644:50 - so whenever i make some changes here it
644:52 - will be reflected back into my ts file
644:55 - so let's add a valid room type and then
644:58 - we will add we will provide a submit
645:00 - button
645:01 - or we will add the functionality to
645:03 - actually send this data to our backend
645:05 - which we have already done so
645:07 - here we have a submit button right but
645:10 - how to submit this form let's go ahead
645:12 - and do that
645:13 - we can see uh ng submit is equals to a
645:17 - function which will actually add this
645:19 - data or send this data to our backend so
645:22 - i can say this is add room function
645:24 - which we will implement which we don't
645:26 - have right now and let's
645:29 - go ahead and do this so let's add room
645:33 - do we need to pass some information to
645:34 - this form
645:36 - of course no because we already have all
645:38 - the information available as part of
645:40 - this model because whatever value we
645:42 - enter is updated into this property so
645:44 - we can just do something like this so
645:47 - i can go to room number ts we need to
645:49 - get the reference to our service
645:52 - which is
645:53 - let's where is the constructor yep this
645:55 - one so i will say room service i don't
645:58 - want to
646:00 - i can just avoid skip self and all those
646:03 - things because
646:05 - we already discussed about it and then
646:07 - in add room i can we can do this dot
646:11 - room service
646:12 - dot
646:13 - add room
646:15 - uh where we can pass this dot room
646:19 - and we'll subscribe we'll say this is
646:21 - data
646:22 - and
646:24 - you'll say if
646:26 - [Music]
646:30 - let's
646:31 - do something like if
646:44 - okay so right now we are in
646:46 - we are
646:47 - actually giving all the data back so we
646:49 - can just do something like this i'll
646:51 - just do console.log
646:55 - well let's do one thing but even better
646:57 - so what we can do is
646:59 - i say success
647:02 - message just type of string
647:06 - is equals to this
647:08 - and
647:09 - you can add
647:11 - a deviate
647:18 - and we can add a class
647:30 - strap
647:41 - you can see which class we can use
648:07 - right we can use alert here so you can
648:10 - say alert
648:12 - alert
648:15 - success
648:18 - right and then we will set this message
648:20 - and say this dot
648:23 - message success masters is equal to
648:28 - let's see what
648:29 - room added successfully this is what we
648:31 - needed and let me just format
648:34 - so
648:35 - everything is visible here so now we
648:37 - have uh add room functionality uh we
648:40 - injected the service we added a success
648:43 - message which will display in case our
648:45 - room is added or not
648:47 - let's go ahead and
648:49 - verify
648:50 - so
648:52 - here i'll say room type is
648:55 - economy
648:57 - i mean it is is we have wi-fi
649:03 - uh ac
649:05 - and price is let's say 5000 photos
649:08 - provide link which let's say
649:11 - leave it right now and
649:23 - and this is
649:25 - 23 let's make it 10
649:27 - [Music]
649:30 - and 30 23
649:32 - let's provide rating
649:34 - for
649:35 - let's do submit and it says rooms added
649:37 - successfully but why should we trust it
649:40 - right so let's go ahead and
649:42 - verify in the console and
649:45 - let's go to the network tab
649:47 - and let's add another one right economy
649:50 - and this is deluxe room
649:54 - and we will say 6000 and let's click on
649:57 - submit and rooms is added you can see
650:00 - you have two extra values available room
650:02 - type amenities and everything
650:05 - and this is it so what we have done is
650:07 - we just created our first template
650:08 - driven form
650:10 - we
650:11 - attached or we added the functionality
650:13 - to send the data to the back end the
650:14 - only thing is
650:15 - the spaces are not working properly but
650:17 - we will fix those not an issue and you
650:20 - can say that rooms added successfully
650:22 - was already there which doesn't look
650:24 - good so we will see how we can actually
650:26 - avoid that as well we should get it once
650:28 - the submit button is enabled or sorry
650:31 - once the form is submitted and also if
650:33 - you notice there is no validation
650:36 - so we can just empty we can just enter
650:39 - an empty form so i mean i can just avoid
650:41 - all the values click on submit and still
650:44 - we are able to add
650:46 - the room you can see price is null
650:47 - rating is null
650:49 - and there are no amenities so
650:51 - let's go ahead and add validation next
650:53 - time then we will see some more
650:55 - functionality related to our template
650:56 - driven forms
651:01 - let's go ahead and add some validations
651:03 - to this form because we haven't done
651:05 - that right and we can just
651:08 - we can just submit a blank form as of
651:10 - now
651:14 - to add validation
651:16 - in template driven forms we have to use
651:19 - the html5 validations so in case you are
651:22 - not aware of what html5 validations are
651:24 - let me just uh
651:26 - go back to
651:49 - so uh we as you said we will be using
651:51 - html5 forms and uh sorry html5
651:53 - validators so there are multiple
651:55 - validators which exist so let's go ahead
651:57 - and uh see them
652:02 - first so the first and i think
652:05 - first and i think most of the time you
652:07 - will be using this validator which is
652:08 - known as required so let's go ahead and
652:10 - see how we can add that so to add a
652:12 - required validator you have to just say
652:14 - required
652:15 - that's it that's uh that's
652:17 - you are done so you have added a
652:18 - required validator and now this field
652:21 - becomes required but
652:23 - it's going to be verified
652:26 - does it look like it is
652:29 - required
652:30 - of course no because we have to add some
652:32 - extra checks we will talk about it
652:34 - let's go back to the code let's add the
652:37 - fields right now so we'll say okay
652:39 - right now required this is required this
652:41 - is also required
652:43 - this is required
652:45 - that so all the form fields are required
652:47 - right now
652:50 - but we can still go ahead and submit the
652:51 - button now let's see how we can actually
652:54 - uh i mean we can still go ahead and see
652:56 - the submit button so let's see how we
652:58 - can actually disable this control
653:01 - until unless we have received all the
653:02 - values and valid values
653:06 - let's go back so uh to actually
653:08 - get the status
653:11 - of my form whether this form is valid or
653:14 - not we need to get an instance of this
653:16 - form how we can do that
653:18 - right i mean we have talked about
653:20 - classes to create a instance of a class
653:22 - we do
653:23 - object equals to new and then whatever
653:25 - class name is and it will give you
653:27 - instance but what about this i mean this
653:29 - is the form how you will get the
653:30 - instance so remember we discuss about
653:32 - something known as a template variable
653:35 - right so we said hash and some name and
653:38 - then equals to
653:39 - a hash some name and then it gives you
653:41 - the instance of that particular uh
653:44 - particular html control right we we
653:47 - discussed it for
653:48 - div
653:49 - so here also we can actually use this
653:51 - way so i can say this is a
653:55 - rooms
653:56 - form
653:58 - is equals to you have to say ng form
654:00 - remember this in g form
654:02 - and now you will you get an instance of
654:04 - this form
654:05 - to yourself now how we can verify so
654:08 - let's avoid let's remove this and use
654:10 - rooms form here
654:12 - and let's see what we
654:16 - get let's see what we have here so
654:19 - [Music]
654:24 - console and we have some errors
654:28 - because uh this json has a lot of
654:30 - properties so right now what the
654:32 - property which we need is rooms form uh
654:34 - we need
654:37 - errors
654:41 - double rs yeah we need rs property let's
654:44 - go ahead and see
654:47 - so
654:48 - it says null vice versa so
655:00 - [Music]
655:09 - so we have tombstone
655:28 - okay so uh the property which we need is
655:31 - valid so it has two properties uh all
655:34 - the forms all html forms has this all
655:37 - these properties so it's not like it is
655:39 - available only for angular no it's not
655:41 - it is available in normal html as well
655:44 - you can actually access this properties
655:45 - via javascript in case you want to if
655:48 - you're writing a normal javascript or
655:49 - typescript code so let's talk about all
655:52 - these properties which we are going to
655:53 - see so
655:54 - valid will tell us whether this form is
655:56 - valid or not let's verify
655:59 - so it is false so the current form is
656:01 - not valid so this is how we are going to
656:03 - figure out whether to submit or not
656:06 - whether we need to enable the submit
656:08 - button or not enable the submit button
656:10 - so let's uh talk about few other
656:11 - properties which we are going to use so
656:13 - here i'll just copy paste right now and
656:15 - then we'll replace so
656:17 - we are going to talk about something
656:18 - known as pristine
656:22 - then we'll talk about something known as
656:23 - 30
656:25 - valid
656:27 - invalid
656:28 - and we also have something known as
656:31 - value
656:36 - well if not values let's see let's see
656:39 - what we get here
656:42 - so we have true false false true and
656:44 - then this is your forms value right
656:47 - whatever you enter here will be
656:48 - available here you don't have to
656:50 - necessarily uh take the value from form
656:53 - dot value you can also get it from your
656:55 - uh
656:56 - of course the model which you have
656:57 - created
656:59 - so here uh let's go ahead and see what
657:02 - these values are false true false true
657:05 - right let's see
657:07 - so this is pristine this is 30 this is
657:09 - valid and this is invalid so what are
657:11 - these values so pristine and dirty are
657:14 - real uh
657:15 - good use cases i'll talk about it let's
657:18 - talk about valid and invalid right so
657:20 - they are like opposite of each other
657:22 - so
657:23 - if your any of your
657:26 - control has some validation error it
657:28 - means your form is not valid
657:31 - so valid will be false as soon as all
657:35 - the form control
657:37 - becomes error free it means they don't
657:40 - don't break any validation rule which we
657:42 - have provided it means they are valid
657:44 - which will be true and invalid will
657:46 - become false so here if you see
657:48 - currently
657:50 - if you see currently it says uh
657:52 - valid is false and invalid is true which
657:55 - is true right so let's see how we can
657:57 - actually disable this first
657:58 - let's you uh handle this use case where
658:01 - how we can disable this particular
658:02 - submit button
658:06 - before i go ahead and do that let me
658:08 - tell you one thing very clear in case
658:11 - you have some validations don't just add
658:13 - those validations at your front end your
658:16 - back end should also have those same
658:18 - validation because what you are going to
658:21 - do is end of the day there will be an
658:22 - api call and if your someone figures out
658:25 - how to make your api calls and without
658:27 - passing the data if you
658:29 - he'll be able to break your system so
658:31 - make sure that you add validation at
658:32 - both the places not only at frontend so
658:35 - here you can we can use a property
658:37 - called invalid
658:39 - sorry
658:44 - we will be using disabled and i will say
658:47 - rooms form dot
658:49 - so we want it to be disabled in case
658:53 - uh
658:54 - perform is invalid so let's
658:56 - say so it should be disabled in case our
659:00 - form is invalid so let's enter all the
659:02 - values
659:04 - and let's see
659:07 - and now our form becomes valid right you
659:09 - can see this so if i remove
659:11 - this value it means my form becomes
659:13 - invalid again so submit button the
659:15 - submit button becomes disabled so this
659:17 - is how the required validator works and
659:19 - these are the values uh the these are
659:23 - the properties which you can access by
659:25 - using this particular form so pristine
659:27 - dirty invalid value
659:28 - and value as well so
659:31 - now here also let's to
659:34 - check so i'll say this
659:37 - start ng if
659:39 - is equals to we can say
659:43 - success message
659:48 - is not equals to blank
659:50 - so
659:58 - and let's see now
660:00 - so this
660:01 - the success bar should be only available
660:03 - after the submit button is clicked and
660:05 - in case we have some message otherwise
660:07 - it won't be
660:08 - enabled or it won't be displayed on the
660:10 - page so now what we have done is we have
660:12 - taken care of two cases which we
660:13 - discussed about now let's go ahead and
660:15 - add more
660:17 - validators
660:20 - the next validator which we are going to
660:22 - talk about is uh we will see min and
660:25 - min length and max length so
660:27 - what
660:28 - is the use cases for mean length and
660:30 - maximum so in case let's say you want
660:32 - amenities right for example let's say
660:34 - amenities so you want that amenities
660:36 - should be like minimum five characters
660:38 - and maximum 200 characters
660:40 - so in this case what you can do is you
660:42 - can use min and max let's let's let's go
660:44 - ahead and do that
660:46 - so here i'll we already have required so
660:48 - i'll say min length
660:52 - is equals to 50 or 35
660:56 - and we'll say max length
660:58 - is
660:59 - let's make it 20 as of now
661:04 - let's send the room let's enter
661:06 - amenities but let's not enter five
661:08 - characters and let's enter
661:11 - photos
661:13 - what you can see uh the form is still
661:15 - invalid right so but the problem is here
661:18 - it it actually introduces to uh us to
661:20 - another issue
661:22 - we are not able to display the errors
661:24 - based on what the actual error is
661:26 - we should right now we should display
661:29 - the message saying
661:30 - okay this particular for
661:33 - value or the amenities which you are
661:35 - trying to enter is it should be minimum
661:37 - five characters but it is not
661:39 - the users will of course will be
661:40 - confused what's going on here
661:43 - we should display uh the messages so
661:45 - let's go ahead and see how we can do
661:46 - that so this message is actually right
661:48 - now or this error is actually available
661:50 - right now with the control so here what
661:52 - we need is the access to control how we
661:55 - can do that yes let's go ahead and see
661:57 - so to get the access to this control we
661:59 - can say hash and whatever property name
662:02 - you want to set it so let's say this is
662:04 - amenities right so i'll say this
662:07 - amenities
662:12 - it's a room i mean it is because it will
662:13 - conflict with another variable
662:15 - room amenities is equals to you have to
662:18 - say ng model remember this
662:20 - and now let's go ahead and see
662:23 - i'll place another
662:26 - div
662:27 - here and we'll say
662:30 - amenities
662:32 - dot errors as json let's go ahead and
662:34 - see
662:36 - so it says right now uh the error is
662:38 - required too
662:39 - but let's enter something right so now
662:42 - you can see it says mill length required
662:44 - length is 5 actually in this one if i
662:46 - try to enter
662:48 - more than 20 character i won't be able
662:49 - to do it because it is supported by the
662:51 - browsers so it says okay maximum length
662:54 - has reached
662:55 - 50 characters or 20 characters and we
662:57 - cannot enter more than 20 so it it has
662:59 - stopped i mean i'm right now i'm still
663:01 - typing but i'm not able to actually
663:03 - enter the values and if i go below 5 it
663:06 - will again give me the same error let's
663:08 - see how we can display this as a message
663:10 - right so here
663:13 - we can use so here i'll just say
663:17 - first
663:18 - star in g if
663:23 - if it has errors right you can also uh
663:26 - do errors dot which type of error we are
663:28 - talking about so here let's say if we
663:30 - talk about mean length right so i'll say
663:32 - okay if
663:33 - the errors
663:39 - okay so it says it should be
663:42 - accessed as this main length
663:47 - and
663:48 - strength it is possibly done
663:53 - yeah
663:55 - so i'm trying to access uh the let's say
663:57 - it's i'm saying if it is
663:59 - mill length error
664:01 - so what we can do is we can say
664:05 - and we'll just add a class right so
664:09 - class alert
664:11 - alert
664:13 - link let's
664:18 - what was this uh success right so it
664:20 - should be alert
664:22 - from a wrong danger and let's see
664:25 - uh
664:28 - emanate peace
664:32 - be
664:35 - minimum
664:37 - or should be minimum
664:39 - minimum five gas so this is the
664:42 - information we want to show
664:43 - let's go ahead and see
664:45 - let's enter one character and you have
664:48 - the message available here it says i
664:49 - mean it should be five characters and as
664:51 - soon as we
664:52 - go beyond five characters the error is
664:54 - gone but yeah so this is
664:59 - how you can display the errors on
665:02 - control level
665:03 - so we have this and of course you can
665:05 - also say errors of required and then you
665:08 - can also say okay this amenities is
665:10 - required
665:11 - this room type is required
665:13 - all on your control level that is also
665:15 - possible
665:16 - so we saw min length and max length
665:18 - what's next what's next so we have uh
665:20 - the min and max
665:22 - as well
665:23 - i'm not sure if it still works but let's
665:25 - see
665:26 - so it's a mean uh which is
665:29 - one
665:30 - and max which is
665:32 - five let's see
665:34 - this is okay i'll not do it here i'll
665:37 - let's do it for
665:38 - rating right i mean i um i don't want
665:41 - anyone to rate me less than one
665:43 - a lot of services a lot of business do
665:45 - that right
665:47 - so
665:48 - one two three four five now i won't be
665:50 - able to actually go beyond five i'm just
665:52 - still still pressing the up key but i'm
665:54 - not able to go so let's go ahead and say
665:59 - lc0 and let's enter all the other
666:01 - details
666:03 - and photos but we are still not able to
666:06 - submit as soon as we move to one because
666:08 - this is the minimum required we are able
666:10 - to proceed so i we cannot go up
666:13 - beyond five i don't want anyone to rate
666:15 - me um more than five because that's the
666:17 - max so this is how you can do with min
666:20 - and max so we learned about required
666:23 - min length max length
666:24 - uh then we talked we talked about min
666:26 - and max what else what other uh
666:28 - validators which we have in html5
666:31 - so we also have a validator for
666:35 - email
666:36 - so email of course you can mark any
666:38 - property as email and it will be
666:40 - considered as an email so let's try
666:42 - right now we don't have anything for
666:44 - email but
666:46 - just
666:46 - for an example right so we just make it
666:48 - email
666:50 - i think email is enough let's see
666:56 - and let's display all the errors
666:59 - otherwise we won't be able to figure out
667:01 - right
667:02 - which kind of error is this
667:08 - so you can see uh it says okay min
667:10 - length max length
667:12 - and then now it says it's uh there is
667:14 - this particular text whatever you have
667:17 - entered it's not an email
667:19 - so if i go ahead and say the rate
667:22 - now we have actually
667:24 - a valid email that's as per the html5
667:27 - validate validator this is an actual
667:30 - valid html uh sorry valid email
667:33 - so this is email and
667:35 - what other so there is also something
667:37 - known as format so format takes regex so
667:41 - you can actually
667:42 - use
668:21 - ah okay sorry it's not uh so the next
668:24 - validator which we are
668:25 - we're going to talk about it's known as
668:27 - patent so pattern is something where you
668:29 - can provide a regular expression for
668:31 - example i don't know what this rejects
668:33 - is thanks to our
668:35 - github co-pilot uh which gave me this
668:37 - rejects for some some reason so let's
668:40 - see what this pattern is so here i can
668:42 - just provide this pattern a regular
668:45 - expression
668:46 - and my text whatever i enter will be
668:49 - actually
668:51 - validated against this pattern so this
668:53 - is regular expression
669:00 - let's see
669:02 - so it says okay required pattern is this
669:04 - i'm not sure what required pattern is it
669:07 - starts from a to z and then there are
669:08 - number so one two three
669:11 - ah then there is plus
669:13 - at the rate
669:15 - okay i still don't understand what this
669:17 - pattern is probably we can search for
669:19 - this regular expression and see but yeah
669:21 - you can provide any regular expression
669:22 - as a pattern and this will be validated
669:24 - so we learned about required
669:27 - mid length max length min map min max we
669:30 - talked about email we talked about
669:31 - pattern so these are different
669:33 - validators which we can use
669:35 - while working with template driven
669:38 - sorry while working with template driven
669:39 - forms and all these are built-in
669:42 - validators you don't have to do anything
669:44 - extra to use them
669:45 - so
669:47 - this
669:48 - it this is it from the required
669:50 - validator part what we covered is we
669:52 - also saw how we can
669:53 - validate your entire form how we can
669:55 - validate your
669:56 - specific control
669:58 - and how we can actually show errors
670:00 - based on specific uh controls as well
670:03 - so that's it
670:07 - in this video we are going to talk about
670:09 - few things
670:10 - uh we talked about valid invalid but we
670:13 - didn't test pristine and dirty so let's
670:15 - talk about these
670:17 - two states because they are really
670:18 - important to understand and
670:20 - to show you an example let me
670:23 - just open the
670:26 - um
670:33 - let me just open the view and you can
670:35 - see here right now
670:36 - this required true error is already
670:39 - there right so once again let's go back
670:41 - to our code base
670:43 - and
670:46 - this errors
670:47 - so if i do something like this
670:51 - div
670:52 - and star in g if
670:55 - errors
670:59 - dot
671:01 - required
671:04 - [Music]
671:06 - and here let's say
671:10 - please
671:12 - provide
671:13 - the amenities
671:18 - let's see the output
671:21 - so you can see this error message is
671:23 - available here of course and we have not
671:25 - provided the class but yeah this error
671:26 - message is available here but
671:29 - as a user i haven't actually touched the
671:31 - controller i haven't entered anything
671:34 - so using pristine you can actually avoid
671:36 - something like this so you can do
671:41 - here
671:43 - remember this this property is available
671:45 - on form as well as control so i am going
671:48 - to use it on the control so i can say
671:50 - if
671:52 - dot
671:54 - pristine
671:58 - so let's say dirty
672:01 - and this two so i'm combining these two
672:04 - properties let's say uh let's see what
672:06 - we are going to achieve using this rate
672:09 - so you can see i don't have the error
672:11 - when the view was available at the first
672:14 - time so i'm providing
672:16 - the ability to
672:18 - enter some text
672:21 - before i go ahead and show the error so
672:22 - in case i remove it
672:24 - i delete the entire thing i will get
672:26 - this error which is really valid right i
672:28 - mean as i have entered something and
672:30 - then i removed it i should show this
672:32 - particular error message so how does
672:33 - pristine and dirty helps so let me talk
672:35 - about these two properties
672:37 - so pristine
672:39 - always means fresh state to your form
672:41 - control it means no one has actually
672:44 - touched your form so let me just refresh
672:46 - this page
672:48 - and you can see the pristine value is
672:49 - true why i'm saying this is a pristine
672:51 - because of course we have actually
672:53 - logged pristine first
672:55 - so pristine is frustrated as soon as i
672:58 - interact with any control inside this
673:00 - form let's do that it becomes false
673:03 - and it will be false remember valid
673:06 - invalid can change the state i mean a
673:08 - form which was valid can become invalid
673:11 - in case i remove some
673:13 - values or delete some values from some
673:15 - control
673:16 - but a form which becomes pristine
673:20 - to dirty
673:22 - will never come back
673:23 - until until unless you reset it
673:26 - the thing is we are about to go ahead
673:28 - and see how we can reset our form that's
673:30 - why we are talking about dirty and
673:32 - pristine
673:33 - so remember pristine means frustrate i
673:35 - have as a user no one has actually
673:37 - touched anything no one has entered
673:38 - anything inside the controls provided
673:41 - once you do interact with it it becomes
673:44 - dirty so this states are actually really
673:46 - important in case you want to understand
673:48 - or you want to see if user has
673:51 - interacted with your form or not you may
673:53 - actually have let's say form where you
673:55 - want to collect some feedback
673:57 - but you really want feedback so sometime
674:01 - you may
674:02 - get an requirement that okay users
674:04 - should not be able to
674:06 - move out from this form until unless
674:07 - they provide some feedback
674:10 - so how you can do that so based on this
674:12 - state so if it's pristine or dirty so
674:14 - let's say user entered something and
674:15 - then he decided to move out you can just
674:18 - restrict him okay uh you have someone
674:20 - save changes or let's say it is a really
674:22 - important form right you have stepper
674:23 - control for example in case you are from
674:26 - india you might have filed your taxes so
674:28 - at each and every steps it asks you to
674:30 - save the data
674:31 - but in case you don't save the data so
674:33 - it will give you some effort right so
674:34 - something like that can be implemented
674:36 - using this form control values so pc in
674:38 - order t
674:40 - now as you understand pristine and ready
674:43 - now let's move back uh sorry
674:45 - so let's go ahead and talk about
674:50 - how to reset the form right
674:53 - if you see this right now uh we have
674:57 - let's say go on
675:01 - wi-fi
675:02 - ac
675:04 - and let's say this is 5000 this is
675:08 - anything and you might be wondering why
675:10 - this is not daytime because uh the
675:12 - datetime control is actually broken on i
675:15 - think this is chromium browser so i i'll
675:17 - replace this with
675:19 - material datepicker we will do that
675:21 - we'll do that together so just wait
675:24 - right now it's it's the default date
675:26 - right and then
675:28 - we can do
675:29 - i have to remove one thing remember we
675:32 - added email
675:37 - sorry we added pattern
675:39 - yeah
675:41 - let's remove the pattern so we can
675:42 - actually go ahead and save the data so
675:44 - we say okay this is economy i think i
675:46 - have
675:47 - wi-fi and then ac
675:50 - and let's say this is 5k
675:52 - this is random data and let's say this
675:54 - is three star
675:56 - let's see so room added successfully now
675:58 - this room got added but what about the
675:59 - data
676:00 - the data is still there don't you think
676:02 - this is wrong yes it is wrong i mean we
676:04 - should reset the form so i can as a user
676:07 - i can enter new data right it
676:11 - may be possible if we still show this
676:12 - data the user may actually just
676:15 - duplicate the data by by wondering okay
676:17 - why this data is still available here so
676:19 - let's see how we can reset the state
676:21 - reset the state of this one so
676:24 - to do that
676:30 - we can
676:31 - say here
676:44 - let's go back
676:45 - so i want to reset the state after the
676:48 - operation is completed right so i can do
676:49 - something like this here so i can
676:53 - let's
676:54 - this remove
676:58 - and then
677:00 - we can get the access to this form
677:02 - control how we can do that so we can
677:04 - actually pass
677:06 - this rooms form
677:08 - as a variable here
677:10 - and now here we will get this rooms form
677:14 - which is which will be type of ng form
677:17 - and
677:18 - let's see if i am uh
677:20 - accessing the current yeah control
677:22 - container
677:23 - so
677:26 - after this i can say rooms form dot
677:28 - reset so let's see how it behaves and
677:34 - let's save both
677:36 - so i'll say this is deluxe
677:41 - amenities
677:43 - and five
677:44 - tv
677:47 - pc and then
677:49 - this is six games random data four star
677:52 - and save now you can see your room is
677:55 - added successfully and now
677:57 - your entire data is actually resetted
678:00 - right so now we have a fresh rate you
678:02 - can see also the most important thing to
678:04 - understand here is once you reset your
678:05 - form
678:06 - you
678:07 - set your form back to form straight back
678:10 - to the pristine that's why it became
678:12 - true otherwise it will never become true
678:14 - so this is
678:16 - this is how you can actually reset the
678:18 - state of form as well and there are few
678:20 - more methods so you can also do
678:23 - preset form and here you can actually
678:26 - pass the default data so i can just do
678:30 - here i can just copy this and i can say
678:33 - okay once you reset the form just go
678:35 - ahead and
678:36 - treat this as default data so let's see
678:39 - i'll say this is deluxe
678:41 - now or you can say this is
678:43 - double room
678:46 - mnt
678:47 - 55 ac
678:50 - two
678:50 - beds and let's say this is 500
678:54 - and let's say this is
678:56 - four star right submit and now you have
678:59 - a reset state as well of course because
679:02 - you can see pristine became true and you
679:05 - have this default data which you
679:06 - provided so these are two methods which
679:08 - we can use to reset your forms using
679:11 - template event form so let's remember
679:13 - how we do this so we are passing this ng
679:15 - form
679:16 - as a reference to our type script file
679:20 - and then we are saying okay this form is
679:22 - actually type of ng form because
679:23 - remember this this ng form is like uh
679:26 - extended or you can say it's a top level
679:29 - form group which will be available so
679:30 - under which all the control will be
679:32 - available
679:33 - and then after you have added
679:35 - successfully you can just go ahead and
679:36 - call the reset button reset form and
679:38 - your state is receipted now
679:41 - so this is from uh this is how you can
679:44 - actually
679:46 - handle the states and how you can reset
679:47 - your form
679:52 - so next thing which we are going to talk
679:53 - about is custom directive with forms you
679:55 - might be wondering where the pipe part
679:57 - went so pipe part will be actually
680:00 - covered in
680:01 - reactive form uh because it's it's
680:03 - almost same so i don't want to actually
680:05 - repeat it again so that's why we moved
680:07 - it there and right now let's see how we
680:09 - can actually add a custom directive
680:12 - uh with forms and what we are trying to
680:15 - do is we will be uh
680:17 - uh we will be creating a directive which
680:19 - can modify the behavior of an element
680:22 - so what are the use cases so uh let's
680:24 - see
680:26 - let's let's see that right so we will
680:28 - talk about them
680:34 - so for this what we are going to do is
680:36 - as we are going to need a login form in
680:38 - future we will create another form i
680:40 - will not touch this form as of now we'll
680:42 - keep it as it is and let's create
680:45 - another component we will call it as
680:47 - login component so i'll say nggc
680:50 - login
680:58 - and we will be using template driven
680:59 - forms and so let's go ahead and do that
681:02 - so form
681:04 - div
681:08 - let's say class
681:10 - form
681:11 - group so i think form group is not
681:13 - working because of some conflicts with
681:15 - angular material
681:16 - so let's see
681:20 - and we will add some controls so this is
681:22 - input
681:24 - uh type is
681:28 - text from control name ng model and i'll
681:31 - say this is email
681:33 - let's
681:34 - say type is also email because we are
681:36 - going to treat
681:38 - uh username as email i mean
681:42 - provide
681:45 - your
681:46 - user
681:47 - so we are not going to implement any api
681:49 - for this we will actually just mock
681:52 - and that's it so we'll just mock this
681:54 - entire service with some dummy data and
681:57 - we'll move
681:58 - so here it is password
682:03 - email and i'll say this is password
682:08 - provided enter your password
682:12 - enter your password
682:15 - right so we are done uh now we just need
682:17 - to create the model let's go ahead and
682:19 - do that
682:21 - so i'm going to create uh this is
682:24 - username
682:25 - which is type of string
682:27 - which is equals to blank
682:29 - and this will be password
682:33 - which is again type of string uh let's
682:37 - call this as email so
682:39 - because we have already uh yeah we have
682:41 - uh used it as email so let's do that and
682:44 - then we need a button uh so button and
682:47 - we will
682:48 - create a login button
682:50 - so let's go ahead and write some logic
682:52 - here
682:53 - login
682:57 - and we'll say if
683:01 - this dot
683:03 - email
683:04 - is equals to
683:07 - admin
683:10 - gmail.com
683:11 - and
683:13 - this
683:14 - dot
683:15 - password
683:18 - is equals to
683:19 - the best password in the world admin
683:21 - admin right so
683:23 - username and password is admin
683:26 - and let's see
683:27 - and after this we have to go ahead and
683:29 - let's uh right now use an alert and we
683:32 - have to actually go ahead and implement
683:34 - this uh with some other functionality of
683:36 - routing we will come back to that later
683:38 - right now let's just do this
683:40 - and here
683:42 - we will add route
683:44 - we will redirect
683:46 - we'll say this is path
683:54 - since the path is
683:56 - login
683:58 - and component
684:02 - is
684:03 - login component
684:04 - and now here we will redirect the users
684:07 - to login
684:09 - so we added a new component and let's
684:11 - add a comma here so
684:13 - yeah so perfect so we added a component
684:16 - login component we created a form for
684:18 - login and we now change the route so by
684:21 - default it will go to login
684:24 - let's see so i'll
684:27 - remove this
684:29 - and here we are right so provide
684:30 - username and password
684:32 - and this login button so right now of
684:34 - course the admin and password does not
684:36 - match so it will not show you another
684:37 - but let's try that out
684:40 - of course we wrote some logic so let's
684:42 - verify
684:43 - and find gmail.com and
684:46 - password is admin and yep login
684:48 - successfully
684:49 - ray we created our login page right i
684:52 - mean of course you can design it in a
684:53 - better way i'm not that great into a
684:55 - great using css but yeah i mean you can
684:58 - uh
685:00 - you you can design as per
685:02 - your knowledge
685:03 - so here
685:04 - what we are going to do is we are going
685:06 - to create an
685:08 - directive which can modify this element
685:10 - so we will try to modify this input
685:12 - element and we will see how we can
685:13 - actually work with directives because we
685:15 - have not seen how to create a custom
685:17 - directive right so we saw build
685:19 - directives so far
685:21 - so let's go ahead and create a new
685:23 - component i'll just try and say ngg to
685:26 - create a new directive you can say ngg
685:30 - directive d and we'll call this
685:32 - component directive as hovered so
685:35 - uh what we want to achieve is whenever
685:37 - we hover above this particular elements
685:39 - it may change the background color right
685:41 - so uh
685:43 - a minimum example is to give you a
685:45 - real-time uh field of how you can
685:47 - actually write a directive which can
685:49 - modify your element
685:51 - of course in real-time application you
685:53 - will get more advanced use cases but
685:56 - i mean this is this is one of the
685:58 - examples which
685:59 - can help you when you will plan to
686:01 - actually write some of the directives
686:03 - like this
686:04 - so
686:05 - not
686:06 - done now we can go to
686:08 - [Music]
686:12 - word directive here so let's go ahead
686:14 - and create a folder so or it will be we
686:17 - will do that later
686:19 - so
686:20 - when we talked about directive we said
686:22 - directives are
686:24 - sorry when we talked about directive we
686:26 - said directors are similar to component
686:28 - but they will never have one thing which
686:30 - is template
686:31 - so here uh let's see how we can actually
686:34 - get an access to the element which is of
686:36 - course
686:37 - uh this
686:40 - hover directive right so this over
686:42 - directive will be
686:43 - kind of an helper method to your element
686:46 - where it you can apply it so let's see
686:48 - how we can do that so
686:50 - here
686:52 - we will say
686:53 - uh
686:54 - we are supposed to use host listener but
686:56 - we will do that later on but let's try
686:59 - to do first thing first
687:01 - we will say
687:05 - let's apply some color
687:07 - so i'm saying the
687:09 - by default your
687:12 - when whenever we try to
687:14 - let's say when we apply this particular
687:16 - directory we are not talking about right
687:18 - now how to use host listener i mean host
687:20 - listener is something which we'll talk
687:22 - about so let's not get confused so right
687:24 - now we are just trying to see once we
687:26 - apply this particular directive it
687:28 - should change the background color to
687:30 - red
687:31 - right so
687:33 - here what we can do is we can implement
687:36 - implement
687:37 - on init let's take a look
687:44 - the reason we can actually use life's uh
687:47 - ng on it on all the lifecycle looks is
687:49 - as you said directives is similar to
687:51 - what your components are apart from this
687:53 - template but it can still go ahead and
687:55 - use all the lifecycle looks as well so
687:58 - here now what we need is we need this
688:00 - color to be applied to the element which
688:03 - is available outside right
688:05 - it's uh
688:06 - i mean how we can do that
688:09 - so let's see
688:12 - so here we will see we will provide
688:19 - we will inject
688:21 - element which is type of element ref
688:26 - and
688:27 - let's
688:28 - do a console.log here
688:30 - and see what this element is
688:36 - on init
688:38 - why okay so let me just add this so what
688:41 - we have done so far we have just
688:42 - injected element ref and we have just
688:45 - done console.log now let's go ahead and
688:47 - apply this particular directive how to
688:49 - apply it so we can go to the component
688:52 - this input element is where i want to
688:53 - apply it just add it like this h i and v
688:58 - and let's apply it here as well so we
689:00 - are we we can use directives it's uh
689:03 - reusable thing so let's inspect
689:06 - let's go to console and here is the
689:09 - interesting thing which we want to
689:11 - discuss about so you can see
689:12 - a native element it gives gives you
689:14 - access to the native element so what to
689:17 - simplify this i mean of course we can
689:18 - see that okay it is referring to the
689:20 - login component you can see the context
689:22 - so it says okay it is coming from
689:24 - something called login component so to
689:26 - simplify it
689:27 - let's go ahead and say this element dot
689:29 - native
689:30 - element and let's see what we get
689:33 - so here you can see you are actually
689:36 - getting this input element how you can
689:38 - actually just go ahead and see i mean
689:40 - you can just click on it
689:41 - and see okay this is the email and this
689:43 - is the password so we are actually
689:45 - getting the reference to the element on
689:48 - which you are applying the directive so
689:50 - this element riff will give the access
689:52 - to the element now you can actually go
689:53 - ahead and do whatever you want to with
689:55 - this particular element let's do this so
689:58 - i can say this dot element dot native
690:00 - element and i can just write in store to
690:02 - dot style dot color is equal to this dot
690:04 - color let's see
690:07 - but okay nothing happened because of
690:09 - course color is not a property so i can
690:11 - say back ground
690:15 - color
690:18 - let's see
690:32 - okay so it was small g so now you can
690:35 - see i i just change the background color
690:37 - of this particular
690:39 - input control by using the style
690:42 - property directly but you can of course
690:44 - do better you can actually go ahead and
690:46 - do it using
690:47 - the
690:48 - document object right so you can go
690:50 - ahead and do using that so let me show
690:52 - you an example so i can say
690:54 - this dot document
690:55 - [Music]
691:06 - or let me
691:09 - use the
691:11 - class actually uh there is a class which
691:12 - is available so uh let's
691:15 - grab that class again we just go to
691:17 - angular dot io uh it's document
691:20 - i'm not wrong yet
691:33 - okay so anyways that's that's the api
691:35 - which i wanted so you can actually just
691:37 - inject this private
691:42 - document which will be type of document
691:57 - let's see
691:58 - it's an
692:00 - injection okay
692:02 - it's an injection token so i can do
692:04 - something like this at the rate
692:07 - inject
692:22 - now using this document so uh
692:26 - let's talk about this document object
692:27 - which we are talking about so remember
692:29 - in web so let's say if i inspect this i
692:32 - mean this is normal html if i try to
692:34 - access this document
692:37 - right so it gives me access to the
692:38 - entire page i mean whatever control
692:41 - which is available here so you can see i
692:42 - get access to html and body everything
692:44 - and by using document dot get element by
692:48 - id these are some apis which are which
692:50 - is available here so i can just go ahead
692:52 - and say i can get access to any element
692:55 - which is available here for example
692:57 - let's say this aio shell right so this
693:00 - is one of the element if i do this okay
693:04 - this is not id
693:06 - okay sorry this is an uh
693:08 - tag this is not an id
693:10 - let's search for something which is an
693:12 - id
693:13 - and class this okay there is nothing
693:18 - there is no id so
693:21 - let's try to do this mac toolbar
693:24 - by using
693:27 - document dot get element by tag
693:32 - name
693:34 - and i can just put the tag name here and
693:37 - you can see i can get the access to this
693:39 - html element so this is a web api so
693:41 - this document is actually a wrapper
693:42 - around the same and by using this we can
693:45 - actually just simplify this so you can
693:46 - say this dot document dot
693:49 - uh
693:51 - you can say get element by id so not
693:53 - getting metal you can get element by id
693:55 - but i can just to let's see what we can
693:59 - use here
694:03 - create element
694:05 - very selective let's see if i can pass
694:07 - uh element here
694:09 - let's see what it takes so it says html
694:12 - of type or html element as well so let's
694:15 - see
694:16 - probably this is not the one also we are
694:19 - looking for
694:32 - okay there are few more properties i'm
694:34 - looking for when let's see
694:37 - stylesheet replace
694:42 - very selective different plugins okay on
694:57 - something related to class detailing the
695:00 - class name
695:13 - and child contains focus create element
695:21 - okay let's see document
695:37 - so uh let's go ahead and see this i mean
695:40 - using multiple ways so there are
695:41 - something which we can do set
695:44 - uh we can actually do it using the dom
695:47 - or we can actually i mean this way style
695:49 - dot color or background color which we
695:52 - have seen
695:53 - so back
695:59 - background color
696:00 - and
696:05 - let's see the application again now
696:14 - yeah
696:15 - but there is another way as well another
696:17 - way possible let's
696:18 - see that so there is another api which
696:21 - is available and we can also use that
696:23 - api to simplify this
696:25 - uh which is known as renderer 2 so i can
696:28 - just do renderer
696:33 - or just name it renderer and you'll see
696:37 - renderer 2.
696:43 - why render 2 because there is already a
696:46 - api called renderer so
696:48 - renderer 2 is something which you can
696:50 - use and we can actually simplify this by
696:53 - using rendered api so you can say render
696:54 - it dot and now you get access to all the
696:57 - methods there are set style set property
697:00 - so this is something which is
697:02 - property if i'm not wrong here
697:05 - oh sorry this is the style
697:07 - so we can say set style and the first
697:09 - parameter which we have to pass is the
697:11 - element so we can pass the element and
697:13 - then the
697:14 - second parameter would be the property
697:16 - which you want to change and the third
697:18 - parameter will be the actual value so i
697:20 - can say with this
697:22 - dot color
697:24 - and let's see
697:25 - we will achieve the same thing so we
697:27 - have now same
697:30 - available
697:31 - uh the background color available as red
697:35 - so this is this is the sim uh simple api
697:37 - simple example right how you can
697:38 - actually be change the behavior of your
697:40 - dom element by using
697:43 - the
697:44 - element ref and the renderer
697:46 - but in case we want to actually do
697:48 - something based on the event which will
697:50 - happen on your parent control
697:52 - a simple example can be let's say
697:54 - whenever you hover above your rows right
697:58 - so you have a table and whenever you
698:00 - hover above your rows you should
698:02 - probably change or highlight that
698:04 - particular row so common example right
698:06 - so how you can do that so i'll just take
698:08 - an example of
698:10 - here
698:11 - host listener so host listeners are
698:13 - actually used to listen to any event
698:16 - which is happening on your parent
698:18 - component
698:19 - the component where this particular
698:20 - directive is applied so let's see what
698:22 - we can do here so here i just copy the
698:25 - same
698:26 - and i'll say okay whenever you hover
698:29 - change the background color to green
698:33 - so on mouse enter my background color
698:35 - will be changed to green let's go ahead
698:38 - and verify and you can see one of over
698:41 - let's refresh it again
698:42 - and
698:44 - you must refresh it again and on here
698:46 - the background color is changed to green
698:49 - similarly
698:50 - we can
698:51 - listen to mouse leaf event so we can say
698:54 - okay on mouse leaf just go ahead and
698:56 - make this to white
699:03 - so as soon as i leave it becomes white
699:06 - so you can see i can actually go ahead
699:08 - and do that as well by using the host
699:10 - listener so host listener will listen to
699:12 - any event which is happening on the
699:14 - component where this particular
699:16 - directive is applied
699:18 - what else so you can also pass the
699:21 - properties
699:22 - input properties
699:24 - to your directives as well as output
699:25 - properties because as i said
699:27 - it's same right i mean
699:30 - the only difference is it doesn't have a
699:31 - template to deal with
699:33 - so here let's try to convert this
699:36 - color
699:37 - so now the user or developer can decide
699:40 - which color to pass so i'll say okay
699:42 - this is now input
699:44 - which is of type color and by default
699:47 - it's red in case some one does not pass
699:49 - it
699:51 - if i pass it so let's say this is input
699:54 - oh sorry this is color
699:57 - we can actually just avoid this
700:01 - box property i can say color equals to
700:04 - and because uh this is going to be a
700:05 - string only so i can say okay
700:08 - for this just use color is equals to
700:10 - green
700:12 - and for this use steel blue another
700:16 - my
700:17 - one of my favorite colors
700:19 - so let's see
700:22 - and here it is so you can see uh let's
700:25 - refresh it again so now we are we are
700:27 - able to pass the default color to your
700:31 - directive
700:32 - by using
700:33 - they may uh
700:35 - by making the input as input property
700:38 - what else we can achieve
700:40 - i'll show you one more thing which can
700:42 - be done
700:43 - so is it possible that i can just
700:45 - combine my input properties with my
700:47 - selective as well
700:48 - how let's do that
700:51 - so there are multiple ways i'll
700:53 - you can actually just do by using this
700:55 - so you can keep your input name and same
700:57 - as your selector and let's change this
701:01 - and
701:02 - concept is done here we will go to this
701:05 - and now
701:06 - i'll say h
701:09 - green
701:11 - and
701:12 - same here so i'll say okay this is
701:14 - equals to
701:15 - steel blue let's see
701:17 - if it works
701:25 - you can see uh still works right so we
701:27 - are now uh what we have done is
701:32 - now we are not using any extra variable
701:34 - so we are we are using the same variable
701:36 - name
701:37 - to actually capture the color as well by
701:39 - using the same input property as of my
701:42 - selector property this is something
701:43 - which can be achieved
701:45 - so or
701:46 - there i mean there is another hack but i
701:48 - will not tell you because that's uh what
701:50 - you can say that's a linting error
701:53 - in most of the application
701:55 - that's a lending error you should not do
701:56 - it but yeah so this is this is another
701:59 - example how you can actually deal with
702:00 - directives so what we did here is we
702:03 - created a directive we applied the
702:05 - directive to our components
702:07 - and we discussed about element reference
702:09 - renderer to or the apis which you can
702:11 - use to change the behavior of your dom
702:13 - then we discuss about host listener how
702:15 - you can actually listen to any event
702:16 - which is happening on your components
702:19 - where your directive is applied so
702:20 - directives are some what what directive
702:23 - is it's a helper function for your
702:25 - components or for
702:27 - any dom element
702:29 - so
702:32 - in this video we will see how we can
702:34 - utilize
702:35 - the custom directives to create a custom
702:39 - validator for your components
702:41 - this uh
702:43 - technique can be applied on any template
702:45 - driven forms
702:47 - so let's go ahead and do that so first
702:49 - we will create a directive
702:53 - so i'll create
702:55 - folder
702:58 - and let's create an email validator so
703:01 - uh as we said our username is email so
703:03 - if we detect a text called test in the
703:07 - email we will say okay this user is not
703:09 - valid user so
703:11 - let's see i'll call it as email
703:13 - validator
703:16 - and then we have to create
703:22 - sorry
703:27 - and the g b and i'll call this as email
703:32 - value
703:45 - so how to add this so remember so in
703:48 - case you are trying to implement a
703:49 - custom validator for your template
703:51 - driven forms you have to implement
703:54 - something known as a validator
703:58 - finally
704:04 - one second it should be
704:06 - it's a class so it should be extend if
704:09 - i'm
704:16 - there are two things so
704:18 - let me just tell you so there is an
704:20 - interface validator which will be used
704:22 - for our use case there is a class called
704:24 - validators which we will use with
704:26 - reactive forms so let's implement
704:28 - validator and see what we need to do so
704:30 - we have to add something like this i'll
704:32 - just copy this and then we'll talk about
704:34 - it
704:36 - so here
704:38 - you can see i'm adding a providers and
704:40 - we are saying provide ng validators
704:43 - use existing where you will provide this
704:45 - class and then you will say multitude
704:47 - what is the purpose let's we will talk
704:49 - about it and this validator class
704:51 - actually gives you a validate method
704:54 - which has signature like this so it
704:56 - gives you control validation errors so
704:58 - this is uh the interface right so this
705:00 - is the function which is provided by
705:02 - interface
705:03 - let's talk
705:04 - from top to bottom what we have done
705:08 - angular already has like all the
705:10 - built-in validators right which we have
705:11 - seen email required and patterns
705:14 - everything
705:16 - in case we want to actually add our own
705:18 - validator we have to actually let
705:20 - angular know that we are adding our own
705:21 - validator by using an
705:24 - injection token remember we did it for
705:26 - http interceptor we added our http
705:29 - interceptor as part of the angular's
705:31 - interceptor queue so here similarly here
705:34 - what we are doing is we are adding
705:36 - our validator into all the existing
705:38 - validator which exists
705:39 - and for that we are saying whenever i
705:42 - try to use this particular selector you
705:44 - have to go ahead and add this particular
705:46 - class as part of the validators which
705:49 - exist that's why we are saying multitude
705:51 - because it's not object it's an array
705:53 - it's an array of
705:54 - all the validators which exist
705:57 - now here you can see it returns whether
705:59 - null or validation errors validation
706:01 - errors is type of key and value
706:05 - so here we can do something like this
706:06 - this abstract control actually gives you
706:08 - the value of the control this is base
706:10 - class for most of the classes related to
706:13 - forms
706:14 - remember this one thing there is no
706:16 - difference between template driven and
706:17 - reactive forms right because the apis
706:19 - are same so the core apis are same it's
706:22 - the only way the flavor changes right i
706:25 - mean what we have seen till now is
706:27 - template driven form where we did
706:28 - everything on html we will see reactive
706:31 - form and you will know the difference
706:32 - but right
706:33 - here we'll do something like this we'll
706:35 - say control
706:36 - and as as uh this is a
706:39 - input control so i'll say okay if this
706:41 - uh control dot value
706:44 - now you can see i'm not able to get
706:45 - anything after this
706:47 - why so
706:48 - so if you see the value is type of
706:50 - any
706:51 - if i need uh
706:53 - or if you want the typings i will
706:56 - suggest doing this so you can actually
706:58 - do
706:59 - create
707:01 - control dot value as we know that we are
707:03 - going to get string just type cast a
707:06 - test string and now
707:07 - we can do something like this
707:14 - value dot now you can see uh i'll say
707:16 - okay if it includes
707:18 - the word
707:20 - test
707:23 - i will return so this is how you will
707:25 - return an email validator so you'll say
707:27 - email validator and then it's key value
707:30 - so i can say
707:31 - email
707:34 - valid
707:37 - email
707:38 - [Music]
707:40 - true
707:41 - right and so let's say invalid email
707:44 - true
707:45 - and if there is no error it means we can
707:48 - return null so you can see the uh typing
707:51 - error is gone here and let's apply this
707:54 - validator now to email
707:56 - and see if we get the uh error we are
707:59 - looking at
708:01 - so
708:02 - now let's go back to login component
708:04 - apply this to
708:06 - this one
708:07 - and i we will take hashtag email
708:12 - equals to
708:16 - ng
708:17 - model right so we have seen how to get
708:19 - the access to this particular control
708:21 - and now here we can do div
708:25 - email dot errors and pipe json
708:29 - let's go ahead and verify the code now
708:31 - we have this
708:32 - uh
708:33 - top type test at the rate g
708:36 - mail.com
708:44 - let's see
708:47 - ah there are some errors cannot assign
708:49 - value
708:50 - variable email template variables are
708:52 - read only where i'm trying to assign a
708:54 - value
708:56 - email dot errors in email
709:01 - that's probably
709:04 - the name
709:08 - after let's stop the server and start
709:10 - again
709:13 - probably i changed some variable and it
709:15 - crashed
709:28 - let's verify it again so i'm saying
709:29 - email control because probably i said
709:31 - email that's why it crashed but it's
709:34 - verified
709:36 - yeah so now we have null so it means
709:38 - it's valid so i'll say test.gmail.com
709:41 - and you can see invalid email true so we
709:43 - have the validation error available here
709:45 - and what we just did is we added our
709:48 - custom validation to this particular
709:50 - control by using a
709:52 - custom directive
709:54 - and now you can just go ahead and add
709:56 - this validator it is reusable right so
709:58 - you can actually go ahead and use this
710:01 - custom directive anywhere you want
710:02 - within your application
710:04 - and this is it from the custom
710:08 - writing your
710:09 - own
710:10 - validator using custom directive
710:17 - now we are back to the routing part
710:18 - remember i said we will create some
710:21 - views using template treatment forms and
710:23 - then we will be back to the routing and
710:26 - the place where we left is router
710:28 - service
710:29 - so let's uh go ahead and see an example
710:32 - how we can actually use router service
710:34 - and a small example
710:38 - so far we have done some navigation
710:40 - right so we have used router link to
710:42 - navigate to whatever view we want to
710:45 - but in case we want to do it
710:46 - programmatically it means let's say we
710:49 - have some logic and
710:51 - after that logic is satisfied we want to
710:53 - navigate to some other view
710:55 - that's why we created login component so
710:57 - remember we just added this alert login
710:59 - successful
711:00 - but in case
711:02 - uh i want to
711:03 - redirect to rooms after we are logged in
711:07 - how we will do that
711:08 - so angular has a service called router
711:10 - so let's put in c
711:13 - we'll use
711:15 - route
711:16 - which is type of router
711:18 - and it comes from angular slash router
711:20 - so you can see this and now let's see
711:22 - how we can navigate there are many
711:23 - methods uh which this particular api
711:26 - exposes so i'll say route dot and we
711:29 - will be using navigate so in navigate
711:31 - you can just pass the url where you want
711:33 - to redirect so i can say i want to
711:35 - redirect to rooms
711:37 - and the thing is you can pass the
711:40 - commands as well so for example if i
711:41 - want to say room slash ad i can do
711:44 - something like this let's try this out
711:47 - we already have a url called room slash
711:49 - ad
711:53 - so
711:54 - let's
711:55 - provide admin ad
711:57 - gmail.com
712:00 - and this will be admin right so
712:04 - and let's click on login and you can see
712:06 - we are redirect to room redirected to
712:08 - rooms slash ad so this is how you can do
712:10 - it programmatically there is something
712:12 - called there is another api called
712:13 - navigate by url as well so you can see
712:16 - uh in this case you can just give the
712:18 - url so you can say it will be
712:21 - slash
712:22 - rooms
712:25 - slash add
712:26 - and let's see
712:30 - let's uh remove this and
712:34 - go back to the login page
712:35 - and
712:40 - now we are back to the room
712:42 - so only thing is the difference is
712:44 - uh between navigate by url navigators
712:47 - navigate by url will
712:49 - take the list of commands so whatever
712:51 - you are passing inside so let's go back
712:53 - to navigate
712:56 - so here we are passing the list of
712:58 - actions or you can say commands and
713:00 - navigate method will create the entire
713:02 - url for us if we navigate by url we are
713:05 - saying okay this is the url just go
713:06 - ahead and redirect so that's the
713:08 - difference so this is about cloud
713:10 - service we will see more about router
713:12 - service soon but not right now
713:18 - in this video we are going to talk about
713:20 - feature module and routing
713:22 - so
713:23 - remember
713:25 - so far
713:27 - remember so far what we have done is we
713:28 - have we have single module right so we
713:31 - just have an app module which is
713:32 - available inside our code
713:34 - and that's it
713:35 - but
713:37 - over the period of time the app module
713:39 - becomes like a huge
713:41 - code base that it really becomes
713:43 - difficult to manage it
713:45 - so that's where the concept of feature
713:47 - module comes in so feature module
713:49 - the concept of feature module is you
713:51 - should actually wrap all the features
713:53 - together in a single module for example
713:56 - if they are related sorry i just missed
713:58 - that part so if they are related so for
713:59 - example rooms so what i can do is i can
714:01 - create another module
714:03 - move everything related to rooms inside
714:05 - that particular component sorry
714:07 - inside that particular module the
714:08 - advantage is in case i want to use that
714:11 - particular module or some logic from
714:12 - that particular module it becomes really
714:15 - easy to share those things
714:17 - also
714:18 - in future in case we want to lazy load
714:21 - that particular module which
714:22 - is the uh which we will talk about lazy
714:24 - load so don't worry about what lazy load
714:26 - is right now but in case you want to do
714:28 - that do that it really becomes easy
714:30 - to achieve lazy loading if you already
714:33 - have feature module i always suggest
714:35 - whenever you are working on some
714:36 - application try to create your
714:39 - components and wrap it together
714:42 - using feature modules or you can save
714:43 - modules
714:44 - there is also concept called scam which
714:46 - is a single component and module which
714:49 - prefers that you should have for every
714:51 - component you should have a module
714:53 - that's also a very uh good thing to do i
714:55 - mean in case you have a large
714:56 - application with like thousands of
714:58 - component uh where it really becomes
715:00 - difficult to difficult to actually see
715:02 - where this particular component will be
715:04 - used and then we ended up we end up with
715:06 - like huge code base uh with a single
715:09 - module with
715:10 - thousands of components inside it and
715:12 - all the components being loaded by
715:14 - default increasing your entire
715:17 - application size
715:19 - so always start with like think about
715:21 - okay if i'm creating this component
715:23 - where this component should fit in does
715:26 - it need a module separate module just go
715:28 - ahead and do that in case it is already
715:30 - related to some feature just go ahead
715:32 - and add that particular component to
715:33 - that feature module so let's start by
715:36 - actually breaking our rooms
715:38 - uh component because remember in most of
715:41 - the application let's say uh if you get
715:43 - assigned to any project
715:45 - this may be a problem that
715:47 - some feature is already created but
715:48 - everything is registered inside a module
715:50 - so the first way i'm going to show you
715:52 - is how you will fix
715:54 - the scenario where you have some such
715:56 - concept right where
715:58 - uh you have uh everything available into
716:00 - app module
716:01 - for this example are rooms right now
716:04 - everything related to rooms is actually
716:06 - registered into app module we can
716:08 - actually remove that feature and create
716:09 - another module for rooms right so let's
716:12 - go ahead and start with that
716:16 - so here we already have rooms folder
716:18 - what i need to do is i need to create a
716:20 - module how you will create a module is
716:22 - nggm4 module and then just give rooms
716:26 - and i will pass a flat equals to
716:31 - true otherwise it will create a folder
716:33 - which we don't want to i we want that
716:35 - room's model should be available here so
716:37 - we got our rooms model
716:39 - uh we want also wanted one more thing we
716:41 - wanted uh that rooms should have a
716:43 - routing module as well similar to what
716:45 - we have outside here app routing module
716:47 - so we want that rooms also should have a
716:49 - routing module and we will say flat true
716:52 - and
716:54 - let's see
717:02 - [Music]
717:09 - so there is a flag to actually overwrite
717:12 - i'm just looking for that particular
717:14 - flag force
717:16 - so i'll say i have an f1 force so it
717:18 - will overwrite the existing file so we
717:21 - will have
717:22 - uh
717:23 - rooms module
717:26 - routing flat true
717:28 - unknown option
717:31 - okay sorry this is like an effect flat
717:34 - equals to true and then we have iphone
717:36 - force
717:37 - merge conflicted rooms module
717:43 - let's see
717:44 - okay let's delete this file right now
717:46 - [Music]
717:54 - okay so what we got there's rooms module
717:56 - and room sorting model similar to app
717:57 - module and apps app routing marketing
717:59 - but remember this
718:00 - uh
718:01 - we will talk about this part for child
718:03 - let's uh hold on
718:05 - first let's talk about this room's
718:07 - module now what we have to do is we have
718:08 - to move everything related to rooms out
718:11 - of app module to here so let's go ahead
718:13 - and do that
718:16 - so we have rooms rooms list component
718:20 - let's do that
718:24 - and
718:25 - what else we have
718:28 - my employee rooms booking room set
718:33 - so
718:33 - [Music]
718:38 - and let's remove this code so you can
718:41 - see just uh by creating another
718:43 - component i have removed like almost 10
718:46 - lines of code from here
718:47 - from your app module so
718:50 - now this is step one so now let's go
718:52 - ahead and
718:53 - add this all this here
719:00 - so all these components are added here
719:04 - and our application will break right now
719:06 - so let's go ahead and see what is
719:07 - happening here
719:09 - and let's try to click on add room
719:12 - rooms you can see nothing is getting
719:14 - loaded and
719:15 - you may get some exceptions so
719:18 - a native element but
719:21 - it's okay
719:24 - but you can see i mean there's nothing
719:26 - which is getting loaded because of
719:27 - course uh
719:29 - there is a lot of errors a lot of
719:30 - compilation errors so let's go ahead and
719:33 - try to fix those i mean don't the one
719:34 - thing about refactoring i'm also trying
719:37 - to show you how to refactor the code
719:38 - base you are uh
719:41 - probably i mean it's it's a good thing
719:43 - you should always re uh revisit your
719:45 - code base so i'm just trying to figure
719:47 - trying to tell you how you generally i
719:49 - generally uh go ahead and refactor the
719:50 - code base so now we have a lot of errors
719:53 - don't be scared whenever you see such
719:55 - errors don't be scared i mean it's
719:56 - absolutely fine
719:58 - uh that's the first step if you are
720:00 - scared i mean of course you will end up
720:02 - like you will roll back the code base
720:03 - and you will be in the same mess as you
720:06 - were earlier
720:07 - so now let's uh
720:09 - kind of
720:10 - close this and
720:12 - let's try to see uh what what needs to
720:14 - be done more right
720:16 - so we have moved all the components here
720:18 - now
720:21 - right so we
720:23 - we have all the components here and now
720:25 - as we have created just a feature module
720:27 - what we can do is we can actually go
720:29 - ahead and register
720:31 - this rooms module into
720:36 - this
720:39 - app model so what we have done is we
720:41 - have removed some code from your app
720:43 - module and then we created another
720:45 - module and as we want that module to be
720:48 - available everywhere we have just
720:50 - registered that module here rims module
720:52 - so let's go ahead and compile this code
720:54 - again
721:03 - so what you can do is you can actually
721:05 - put some of your reusable code inside a
721:08 - module and then you can just
721:10 - use that module wherever you want to in
721:12 - case let's say you have a component to
721:17 - show a table right
721:18 - and what you what you can do is that's
721:20 - what that table is getting used like
721:23 - at many places so what you can do is you
721:25 - can just create that particular
721:27 - component with table and a module and
721:29 - then you can just use that module
721:30 - everywhere where you want to now let's
721:32 - go ahead and see the errors so there are
721:34 - multiple errors so it says roomsat
721:36 - component no directive on for ng form
721:38 - now once you create a module there are
721:41 - few things which we have to
721:42 - which there are few things which you
721:44 - have to keep in your mind
721:46 - now this
721:47 - components
721:48 - which are available here they are using
721:51 - some specific
721:52 - modules
721:53 - for example uh this error
721:57 - sorry this error which says okay this is
722:00 - no directive found with export as ng
722:02 - form it means we are using form
722:04 - functionality here but that form
722:05 - functionality is not available how you
722:07 - can do that we have already learned
722:09 - about it so what we have to do is we
722:11 - have to go ahead and add into imports we
722:13 - have to say forms
722:15 - module
722:18 - so you will see
722:19 - each error gone one by one so now
722:23 - the first error will be gone so it will
722:24 - be recompiled failed to recompile and
722:26 - now there is another error it says this
722:29 - header component is not part of this
722:32 - module
722:33 - now we are using this header component
722:35 - in rooms component.html this is uh
722:38 - this is really really good use case for
722:40 - a reusable module
722:42 - as rooms component sorry this header
722:44 - component can be used at multiple places
722:46 - we cannot just register in inside the
722:50 - inside the main module app module
722:52 - otherwise it won't be available for
722:54 - other modules which which is created for
722:56 - example rooms so what we can do is in
722:58 - such cases the same example which i was
723:00 - giving a table a reusable table which
723:03 - can be used so here
723:05 - what i can do is i can just go to header
723:07 - i can say open an integrated terminal
723:10 - and create a module here so i'll say
723:11 - this is a header
723:13 - hyphen fn
723:15 - flat but i don't need a routing module
723:18 - here because this is a just a usable
723:20 - component it does not contain any
723:22 - component which can be accessed by route
723:24 - the reason i created inside room is
723:26 - there are components which can be
723:27 - accessed by route by urls so we will
723:31 - also move the logic related to the urls
723:34 - inside its own module to avoid writing
723:37 - so much code inside your
723:39 - inside your app module
723:41 - now let's register this header component
723:44 - here
723:46 - now once you do this
723:48 - you will start getting an error so the
723:50 - thing is
723:51 - one component can be registered as part
723:53 - of only one module remember this keep in
723:56 - your mind
723:57 - so
723:58 - here uh this header component is
724:00 - actually uh if i if i do this
724:03 - if i do
724:05 - [Music]
724:06 - here i register the center module
724:11 - and let's add
724:13 - the setter module
724:16 - here
724:18 - so
724:20 - the thing is your imports
724:23 - or your modules can be
724:24 - added into multiple places right and
724:26 - that's the whole
724:28 - that's the whole uh
724:30 - uh you can say the that's the whole core
724:33 - about creating the module so you can
724:34 - actually reuse things around your entire
724:37 - application into multiple modules
724:39 - but i cannot register or i can i cannot
724:43 - actually uh import sorry i cannot
724:46 - register a component multiple times so
724:50 - if i have added declarations uh header
724:52 - component into declarations are here i
724:54 - cannot add it into here so
724:56 - if i do this that's an error so here
724:59 - let's remove this over
725:01 - header component from
725:03 - here right so header component is
725:04 - removed
725:06 - and now it's only available at one place
725:08 - but let's see
725:10 - if it fixes our issues so
725:12 - let me just compile compile it again
725:17 - it will not so the answer is it will not
725:19 - so we'll see how how we can fix that so
725:22 - now
725:24 - let's let let it give us the error first
725:28 - now it says okay this header is still
725:30 - not found the reason being
725:33 - in case
725:35 - if you are using a component outside of
725:37 - its model
725:40 - so this header component is actually
725:42 - used inside rooms module
725:45 - so you have to also add it to exports
725:49 - it means
725:50 - i am exporting this particular component
725:52 - so anyone outside this module can also
725:55 - access to this particular element
725:57 - remember this whenever you are creating
725:59 - reusable components this is the thing
726:01 - which you should do
726:02 - you should always add it to exports
726:04 - array so it can be accessed outside
726:06 - otherwise it won't be available now
726:07 - let's go ahead and see our output
726:10 - and it is compiled successfully
726:13 - so
726:15 - let's see
726:17 - how if our application works
726:21 - rooms
726:23 - ad rooms worked employee worked
726:27 - login
726:28 - worked
726:30 - let's try uh the functionality
726:36 - okay just looks like
726:44 - something is broken but
726:51 - it says uh includes test this is ah
726:55 - right so it is it is giving us error
726:57 - uh what was the
726:59 - admin it was admin right
727:02 - and now it works as well so
727:05 - so entire functionality is working again
727:07 - what what we have done here is we have
727:09 - created
727:10 - we created actually two feature module
727:12 - one to show
727:14 - the scenario where we will not have any
727:15 - routing module we will have a component
727:17 - which is reusable and can be accessed
727:19 - outside of its own module so it's not
727:21 - going to be used inside its own module
727:24 - here right header module and then we saw
727:26 - another example where we created a rooms
727:28 - module we moved all the components which
727:30 - is related to rooms module inside its
727:32 - own module
727:34 - and that's it and then we also added the
727:36 - modules which is uh which is required
727:39 - here for example it was using the forms
727:40 - functionality it was using the header
727:42 - component so we added both the modules
727:45 - to make it successful always read the
727:47 - errors remember whenever you are
727:48 - refactoring the code always read the
727:50 - errors what is that all the errors are
727:53 - readable so you know what is going wrong
727:56 - now let's go ahead and let's move ahead
727:58 - and also try to move this
728:00 - rooms related routes to its own module
728:03 - so we already have this module available
728:05 - we'll remove it from here so you can see
728:07 - how easily we are able to remove lot of
728:09 - code from our app module and app routing
728:11 - module
728:12 - and we will add it here
728:16 - so
728:16 - [Music]
728:20 - rooms component room sat component and
728:22 - booking component
728:24 - once done
728:26 - you will see a difference that in app
728:27 - routing module we always use for root
728:29 - and whenever you have a feature module
728:31 - with routing it will always use for
728:33 - feature sorry for change the reason
728:36 - being uh your for root is like it's a
728:38 - singleton service so you are adding all
728:41 - the routes inside a singleton service so
728:43 - we are saying for root it means this
728:45 - this is these are the routes which are
728:47 - available globally and all
728:49 - other routes is part of your feature
728:52 - modules they can be accessed from within
728:54 - your feature or once they are registered
728:56 - so
728:57 - here we have three routes which are
728:59 - available and the way it works is
729:01 - routing module is actually registered
729:03 - here you can see
729:05 - imports in uh we have added a rooms
729:07 - routing module so now
729:08 - this routes are also registered but
729:11 - there is a catch there is a catch let's
729:13 - see
729:15 - we have added rooms module here let's go
729:17 - ahead and see if our application works
729:20 - it will break so just to give you an
729:21 - idea so you can see if i try to access
729:23 - employee it works if i try to access
729:25 - rooms it says resource you are looking
729:27 - for does not exist same for ad room
729:30 - what's happening here the routes exist
729:32 - yes but why we are getting 404 let's go
729:34 - back revisit the basics remember when we
729:37 - were talking about this routines right
729:40 - we talked about this
729:41 - wildcard we said it will go
729:44 - sequentially from top to bottom
729:46 - let's go to app module and figure try to
729:48 - figure out why it is happening so all
729:50 - the import statements are also executed
729:52 - sequentially so you you can see it goes
729:54 - to app routing module first
729:57 - and go to approaching module it says
729:59 - okay employee login
730:01 - this default route and then start it
730:03 - says okay the any other route is not
730:05 - available here right now
730:07 - so how to fix that so in case you have
730:10 - feature modules with its own routing you
730:12 - should always register this
730:16 - uh
730:17 - you should always register your feature
730:19 - modules before app routing mode just
730:21 - remember this
730:23 - because of course when you start
730:24 - learning angular you will get this error
730:26 - you will get okay why my routes are not
730:28 - working that this is this might be one
730:30 - of the reason that you are getting four
730:31 - or four pages
730:32 - let's go back and that's it everything
730:36 - back to normal
730:38 - and your functionality works so this is
730:40 - how you can create a feature module and
730:42 - uh
730:44 - and also how you can create a feature
730:45 - model with its own routing module so
730:48 - remember right now what we did is
730:50 - right now what we did we just did is we
730:53 - refactored a code base to make it more
730:55 - uh
730:56 - what you can say flexible more uh
730:59 - extends extensible so in case anyone
731:01 - wants to actually make changes to
731:03 - related rooms they know that they have
731:05 - to just make changes inside this
731:06 - particular folder that's the whole idea
731:09 - about creating this small small feature
731:11 - modules right people know where to make
731:13 - the changes they don't have to touch the
731:15 - entire application they don't have to
731:16 - make changes into app model every time
731:19 - that's a really bad structure in case
731:20 - you get into some code base where
731:22 - everything is added into a module of
731:24 - course you should the first thing which
731:26 - you should suggest is to refactor that
731:28 - code base by splitting them into
731:30 - different feature modules
731:32 - the advantage is of course the code is
731:34 - more maintainable and we can also do
731:37 - lazy loading which we will see later on
731:42 - now in this video we will see how we can
731:44 - do nested routes and we can
731:46 - load child routes so let's see let's try
731:49 - to understand what
731:50 - we mean by nested routes right so we can
731:54 - load another route inside an existing
731:56 - route that's nested routes and it can
731:58 - have some child routes as well so let's
732:01 - go ahead and try to figure out a
732:03 - scenario
732:05 - so here
732:07 - so you have this book room right right
732:09 - uh so right now if i click on this book
732:12 - room it is going to another
732:14 - view altogether right so all the
732:16 - existing view is lost so what in case
732:18 - you get an requirement that
732:21 - but in case you get a requirement that
732:23 - when you click on this book room
732:25 - the
732:26 - another view should open below this
732:28 - particular table
732:29 - so you can just fill out all the details
732:32 - and complete the booking you don't have
732:34 - the form of course we will add the form
732:35 - later on but let's try to fix uh let's
732:38 - try to build this scenario using the
732:41 - nested routes concept
732:45 - let's go back to our code let's see
732:47 - where the routing exists so our routes
732:49 - are here so what we want is this room
732:51 - slash ad should be loaded on
732:55 - below sorry not on but below this
732:57 - particular table
732:59 - so we can do that
733:01 - so here you can use something known as
733:04 - children property
733:08 - and you can move
733:10 - this route inside this children property
733:14 - so this is step one
733:15 - once we did we have done this let's see
733:22 - right still i mean it is getting loaded
733:24 - on another view
733:28 - because we are referring uh to the wrong
733:31 - view all together so this is the path
733:34 - which we needed room slash id
733:36 - now let's go ahead and see here you can
733:39 - see uh when you click on this it goes to
733:41 - this room slash one but it says the
733:43 - resource you are looking for does not
733:44 - exist
733:46 - this is
733:47 - strange because we said room slash id
733:49 - is already configured
733:51 - and
733:52 - it should go to
733:54 - rooms booking component but this is not
733:56 - happening
733:57 - so now we have to do one more thing we
733:59 - have to go ahead and tell where to
734:01 - actually load this room's booking
734:03 - component by placing another router
734:05 - outlet
734:07 - so let's see how it behaves now so let's
734:09 - go to rooms
734:11 - let's click on blue chrome
734:22 - let's see what's
734:25 - different here okay so now as we are
734:27 - already inside rooms so we have to
734:29 - remove this
734:30 - okay let's see rooms
734:33 - so because it's child right so it's uh
734:35 - it's child route so we have to
734:38 - okay let's remove this slash as well
734:42 - now let's click on rooms and click on
734:44 - book room you can see this component is
734:46 - actually getting loaded here let's uh
734:48 - put some
734:52 - more content here so i'll say
734:55 - booking
734:56 - this is
734:58 - edge
735:03 - room
735:11 - so it is visible right so you can see so
735:13 - booking room 2 click on any room you
735:16 - want to book and it will be displayed
735:18 - just below the table wherever you have
735:20 - placed the router outlet so remember to
735:22 - do two steps which is needed in case you
735:25 - want to do nested routing so why it is
735:27 - nested routing because you can see this
735:29 - is already available inside a router
735:31 - outlet and then we are loading another
735:33 - router outlet here so let's try to
735:35 - understand this uh template right
735:38 - so here
735:39 - we can see
735:42 - this is our first uh
735:45 - app
735:46 - and then you have the sidebar
735:50 - and we have first outer outlet here and
735:52 - then
735:53 - there is another router outlet which is
735:55 - available here so it is nested right so
735:57 - what you brought so understand the
736:00 - nesting needs one thing same thing again
736:02 - available inside same thing so router
736:04 - outlet again available inside router
736:06 - outlet that's nesting and
736:08 - as it is getting loaded as part of this
736:11 - existing component it's
736:13 - part as it is treated as a children
736:16 - routes so you can see this is children
736:18 - and then we are saying when we click on
736:20 - room slash id so we don't have to
736:23 - specify room slash id again here we can
736:25 - just say colon room id
736:28 - and
736:28 - that particular component will be loaded
736:30 - wherever we place
736:32 - this particular outer outlet so if i
736:34 - place it
736:36 - above
736:37 - here
736:40 - so you can see uh
736:43 - booking room this one
736:44 - right so whatever room you select it
736:47 - will be loaded here so this is how you
736:49 - can achieve nested routes and
736:52 - children routes you can play more i mean
736:54 - you can actually uh
736:56 - experiment
736:57 - by creating more
736:59 - child component and see how we can load
737:02 - them you can you can load multiple so
737:04 - it's not like only this will be loaded
737:06 - you can actually add multiple here i can
737:08 - just do uh
737:11 - i can
737:17 - just test routine
737:18 - i can also move this one
737:24 - inside this array
737:26 - and i can remove this and i can say
737:28 - slash so now it is also
737:30 - child component so the only thing is
737:33 - actually add room is available here so
737:35 - if you try to click so let's go to room
737:38 - and let's click on add room you can see
737:45 - let's
737:48 - let's do it on this one
737:51 - let me just do this and here
737:54 - on rooms component.html on add room this
737:58 - one right so on add room let's do
738:00 - router link
738:02 - so we'll say this is router link
738:05 - and i'll say this is
738:06 - room
738:08 - slash ad let's verify if it is correct
738:11 - rooms okay it's rooms
738:13 - slash ad
738:15 - and let's try to add a room let's click
738:17 - on add room and it says room slash room
738:19 - slash ad
738:21 - the reason being because we are already
738:24 - here okay
738:26 - let's see
738:28 - as we are already inside child probably
738:30 - that is the issue and here it is all
738:32 - right so we click on add room and
738:34 - booking uh
738:37 - and what is there inside room ad
738:42 - room set
738:43 - okay this is the form
738:45 - room slash at where is this form gone
738:48 - [Music]
738:59 - okay this is good that we came across
739:01 - this issue uh
739:03 - here
739:04 - so uh the thing is
739:06 - right now uh if i say room slash room id
739:09 - or i say room slash ad
739:12 - this
739:15 - slash
739:16 - ad can also
739:18 - match to this
739:21 - the reason being it uh
739:23 - it's like it just uses that okay i i can
739:27 - say room slash any place holder and this
739:28 - will be called so to avoid this just
739:31 - make sure that uh you place at this uh
739:33 - this before and then you have dynamic
739:35 - crowds after this
739:36 - that's a really good thing that we
739:38 - actually uh came across this issue
739:39 - because this is also one of the uh
739:41 - reason where a lot of developers get
739:43 - stuck so what we have done is we are
739:45 - saying that ad is first so it will match
739:47 - to add but if we place this one i mean
739:50 - it's a wild card right i mean it's a
739:51 - it's a placeholder so if i keep this
739:54 - first it will also match to room slash
739:57 - ad
739:58 - and it will always go to the booking
739:59 - number and that was uh the thing now if
740:02 - i click on book room you can see i'm
740:03 - getting going to this if i click on add
740:05 - room i can see the add room
740:06 - functionality available on this view
740:09 - itself so this is how you can play
740:11 - around with multiple children components
740:12 - you can add a number of children
740:14 - components in case you want to display
740:16 - them on the same view you don't want to
740:18 - redirect to somewhere else so this is
740:21 - how you can do it and uh let's move
740:28 - so far we have seen how
740:31 - angular routing uh can help us to create
740:34 - several routes
740:35 - and in last video we also learned about
740:37 - how you can create modules
740:39 - so
740:40 - as discussed modules are something which
740:42 - where we can actually wrap all the
740:44 - functionality related to a feature into
740:46 - its own module right in its own angular
740:48 - model
740:49 - but
740:50 - once your application grows there will
740:52 - be many modules
740:54 - and so the application size will grow as
740:56 - well
740:58 - and
740:59 - one point of time you will probably end
741:01 - up with huge
741:02 - main bundle size so
741:04 - this is where we will talk a little bit
741:06 - about uh the
741:08 - build which we create for deploying on
741:11 - protection
741:14 - so so far we have been using a command
741:16 - called ng serp which is used to run this
741:19 - application locally and debug it
741:22 - now we will use another command to
741:24 - create a production build which can be
741:26 - used to deploy your application on
741:28 - production
741:36 - so to do that i am going to run a
741:37 - command called ng build
741:41 - and
741:43 - you can say c equals to production
741:47 - now what this command will do is it will
741:49 - build your application
741:52 - with production mode so
741:54 - this this uh whatever
741:56 - files which will be generated
741:58 - it will be
742:00 - minified
742:01 - and it can be deployed on your
742:03 - protection server so
742:04 - let's see it will take some time to
742:07 - generate the bundles
742:09 - you will get several files and we will
742:11 - talk about one main
742:13 - file which is called main.js
742:21 - so here you can see uh you have main.js
742:23 - which is around
742:25 - 476.91 kb
742:28 - right now our application is really
742:29 - small i mean
742:31 - it
742:32 - contains an app modules a few components
742:34 - and one module
742:36 - consider it like a huge enterprise
742:39 - application
742:45 - consider uh now in future you will end
742:47 - up with a huge enterprise application
742:49 - here you will probably have hundreds of
742:51 - modules you will have thousands of
742:52 - components
742:53 - even not that big let's say
742:55 - in range of hundred right so this bundle
742:58 - size will increase and this main.js is
743:00 - the file size which will be
743:02 - served to your customers
743:06 - now 476 kb is it's okay right i mean it
743:09 - can be it will be pretty fast on your 4g
743:12 - network
743:13 - but what in case you have this bundle
743:15 - size in mbs and that's where the problem
743:17 - comes in now you will have a big bundle
743:20 - which needs to be loaded whenever your
743:23 - your user comes to your portal
743:25 - so they have to wait they have to wait
743:27 - based on uh how much speed they have
743:29 - right how much the bandwidth
743:31 - they have
743:34 - what you can do is using angular mod
743:36 - angular router you can also split the
743:38 - code
743:40 - if let's go back to our application
743:45 - so if you see here
743:47 - the functionality related rooms
743:50 - do we think i mean this room's
743:52 - functionality should be available by
743:54 - default to the users the answer is no
743:56 - right i mean of course
743:58 - we we have to actually go ahead and add
744:00 - few forms more functionality to our
744:04 - to our login screen and
744:06 - that will be the first page which will
744:07 - be served to our customer so without
744:09 - login they cannot even use this room's
744:12 - functionality even employee
744:14 - functionality so it doesn't make sense
744:16 - to actually give all this
744:18 - views with your main.js bundles i mean
744:21 - all this code is something which is
744:23 - useless at that time probably your user
744:25 - just comes to login page and goes away
744:27 - and
744:28 - this this code will never be used
744:31 - so this is where actually angular router
744:32 - can use angular router can help us to
744:35 - split our code based on several routes
744:39 - it has some advantages of course
744:43 - this code will never be downloaded in
744:45 - case your user never comes to this
744:46 - particular route and once the user
744:49 - visits this
744:50 - it will be once it will be downloaded
744:52 - only once so it's not like i mean if i
744:54 - just uh go to another route this all
744:56 - code will be um
744:58 - removed and then we will be added back
745:00 - once we come back to this route that
745:02 - that's that's a no so
745:05 - but there are few requirements which you
745:06 - have to fulfill to
745:09 - achieve this
745:10 - what are those requirements
745:12 - remember whenever you are trying to
745:15 - create a module as lazy loaded model or
745:18 - you are trying to separate that code
745:20 - from all entire application the first
745:23 - thing which you should think about is
745:25 - what are the things which needs to be
745:27 - reusable if it's reusable probably you
745:30 - have you have to rethink about your
745:32 - architecture let's say there is one
745:34 - component which is reusable from rooms
745:37 - in that case i will remove that
745:39 - from the rooms component i will put it
745:41 - somewhere else which is with where we
745:43 - will put reusables so i can use it
745:45 - inside rooms and other places as well
745:47 - never do something like this where you
745:49 - have rooms module lazy loaded and then
745:51 - you are there is one component which is
745:53 - being used somewhere else
745:54 - in that case you have to go and
745:56 - import rooms module in that particular
745:58 - module which will fail the purpose of
746:01 - having a lazy loaded model so a lazy
746:04 - loaded model should be isolated i mean
746:05 - it should not talk to any anyone else it
746:08 - should know everything about itself and
746:10 - once loaded it should be able to perform
746:13 - all the functionality
746:14 - and your application should not know
746:16 - about this module until unless it is
746:18 - requested so here we are talking about
746:21 - this code will be downloaded based on
746:23 - user interaction so once i interact with
746:26 - this rooms module
746:27 - or rooms url
746:29 - the code will be downloaded so let's go
746:30 - ahead and see what are the prerequisite
746:37 - so first thing is
746:39 - now as we have
746:41 - chosen the rooms module to be lazy
746:44 - loaded the first thing is no one should
746:46 - know about
746:48 - rooms modding
746:49 - remember last time what we did is we
746:51 - created a feature module for
746:54 - this
746:55 - room's module and then we added here so
746:56 - first step remove this
747:04 - now no one knows about rooms module and
747:06 - it should not work right i mean if i
747:09 - recompile the application you can see
747:12 - there are a lot of errors because of
747:14 - course the list uh this room's module is
747:16 - gone i mean no one knows about rooms
747:18 - module anymore
747:19 - now what's next
747:22 - now
747:23 - here in app routing module we will add
747:26 - one part
747:30 - remember we have already fulfilled one
747:32 - particular step
747:34 - we have already isolated everything
747:36 - related to rooms module in its own
747:38 - module so we are not sharing anything
747:40 - outside rooms module
747:42 - right so just keep that in mind keep
747:44 - that in your mind whenever you are
747:46 - designing uh
747:47 - this lazy loaded module for your
747:50 - application just keep this in mind
747:52 - here i'll
747:53 - say path rooms you might be wondering
747:55 - why we are doing here and we'll talk
747:57 - about it so
747:58 - rooms and then you have to use a
748:00 - property called load children
748:03 - and here we'll say
748:05 - we will be using an import statement so
748:07 - i'll just let me just talk about this
748:19 - and
748:24 - okay something is missing
748:27 - what
748:46 - oh
748:50 - okay
748:53 - so what we have done here is we have
748:54 - added a path rooms and we are saying
748:57 - load children
748:58 - and then some import statement we'll
748:59 - come back to this let's go back and make
749:03 - some changes to your room's routing
749:04 - module here we will remove this path we
749:07 - need to book it put it blank
749:10 - and let's go back let's go back and talk
749:12 - about this
749:13 - so now we rather actually directly
749:15 - importing
749:16 - the rooms module into app module so
749:19 - what we are doing is we are trying to
749:21 - lazy load it so
749:22 - uh the lazy loading means
749:24 - now
749:25 - we are providing the path inside the
749:28 - routes array because of course this is
749:29 - your you remember app routing module
749:31 - right the main routing module
749:33 - so now my app routing module knows that
749:35 - there is a path called rooms and
749:37 - whenever
749:38 - someone tries to access rooms what i
749:40 - have to do is i have to go ahead and
749:42 - download this particular rooms module
749:44 - remember this is the module which we
749:45 - created earlier
749:47 - so i have to go ahead and download this
749:48 - rooms module which has a angular module
749:51 - called rooms model right so this is
749:54 - this import statement is something which
749:56 - is native into a to the browser so at
749:58 - runtime at runtime remember i'm not
750:01 - talking about the compile time compile
750:03 - time is when we are actually building
750:05 - our port right
750:06 - at runtime
750:08 - it will whenever we click on rooms it
750:10 - will go ahead and download all the code
750:12 - which is related which is available here
750:14 - inside this rooms folder
750:17 - and make sure that you are not using
750:19 - anything outside rooms module right
750:22 - so here
750:23 - we have we got we
750:25 - did this we can do some similar thing
750:28 - for employee that's something which you
750:29 - can try what you can do is you can
750:31 - create another module for employee and
750:33 - then try to lazy load that module you
750:36 - have to just
750:38 - create a routing module and then you
750:39 - have to
750:40 - create a angular module that's and those
750:43 - are two things which we have to do and
750:44 - then you can in similar fashion you can
750:46 - download the employee module
750:49 - in case you are not able to do it
750:51 - just
750:52 - raise an issue and we will help you
750:56 - now this is also done we have removed
750:58 - this because
751:00 - why we left this path blank because we
751:02 - have already defined this path here so
751:05 - when this particular module gets
751:06 - downloaded and it goes to its default
751:09 - url i mean the first url so it will
751:12 - check okay this is the component which i
751:14 - have to download so rooms is my default
751:16 - route i don't have to do anything and
751:17 - then we have the children which we
751:19 - already configured last time
751:21 - now let's go ahead and verify the
751:23 - application so
751:25 - two things we will verify but there are
751:27 - two things which will verify uh first
751:29 - let's verify the build
751:30 - let's see if there is any difference in
751:33 - the files which got generated earlier
751:35 - right so earlier we got four files
751:38 - now let's see after making these changes
751:40 - how many files we get
751:42 - and how it impacts uh impacts the bundle
751:44 - size as well
751:56 - so you can see it says there are some
751:58 - initial chunk files and there is
752:00 - something which is lazy chunk files so
752:03 - you can see uh now we have another
752:06 - module which is of
752:08 - 11 kb
752:10 - and it will be downloaded separately
752:12 - once i interact with that particular
752:14 - router let's go ahead and run the
752:15 - application now
752:26 - and meanwhile let's see if we are
752:28 - missing something here
752:30 - and okay
752:34 - so let's verify how if our lazy loaded
752:37 - model or lazy loaded functionality which
752:39 - we did is working fine or not how we can
752:41 - verify
752:42 - of course
752:43 - in build we can see there was a
752:44 - different uh bundle altogether but we
752:46 - can actually verify it from here so you
752:48 - can go to the sources you can go to
752:50 - webpack. and go to src app
752:53 - and here
752:55 - you can see okay so here we can you can
752:58 - see we are actually using room service
753:00 - somewhere so
753:02 - one file is already downloaded
753:04 - because we are using it outside probably
753:06 - uh in
753:07 - app module or somewhere else
753:10 - but
753:10 - let's see the main functionality
753:13 - let's click on rooms
753:14 - now you can see all the files apart from
753:16 - services are downloaded as i clicked on
753:19 - this rooms and now i can just go ahead
753:21 - and visit any other url that won't
753:24 - impact this files so this is how you can
753:27 - verify what are the files which are
753:28 - downloaded
753:29 - uh lazily right i mean apart from
753:32 - services everything is being resoluted
753:34 - right now and it will be available as
753:37 - well inside your network tab so let me
753:39 - just remove it and let's refresh let's
753:42 - go to employees and let's refresh this
753:44 - page
753:47 - and let's clear
753:49 - and let's click on rooms so you can see
753:51 - src app rooms rooms module so this is
753:54 - something which which is telling you
753:55 - that okay this all the file
753:58 - this code is actually being loaded
754:00 - separately
754:01 - and
754:02 - when is happening when i click on rooms
754:04 - so this is how lazy loading works and
754:08 - you should
754:09 - as i said there are there are many
754:11 - things which goes behind whether this
754:14 - module needs to be lazy loaded or not
754:16 - few things we already discussed one more
754:18 - thing which we need to uh
754:20 - make sure is you should i mean it's not
754:23 - like in us if this is a functionality
754:25 - which is available we should go and down
754:28 - sorry we should go ahead and implement
754:30 - lazy loading for all the models it's not
754:33 - lazy loading lazy loading is useful for
754:35 - the modules which are really big and
754:38 - which you think won't be
754:40 - used frequently by your
754:43 - end users remember not developers
754:45 - developers can just go ahead and add
754:46 - anything right uh because it's uh it's
754:50 - based on the business requirement i
754:51 - would say so whenever you are
754:52 - implementing this you should go ahead
754:54 - and
754:55 - ask business that okay
754:57 - what will be the frequency how many uh
754:59 - users we are expecting this views to be
755:01 - used by
755:03 - it's okay in case you don't get don't
755:06 - implement lazy loading at first that's
755:08 - absolutely fine i mean it's okay because
755:10 - you don't know your user behavior right
755:13 - as you know your user behavior you can
755:15 - actually go and implement lazy loading
755:18 - but
755:18 - at least have feature modules in place
755:20 - uh and there will be of course there
755:22 - will be many modules which you will
755:24 - realize even while developing that okay
755:26 - these modules are not probably going to
755:28 - be used
755:29 - more frequently for example let's say
755:31 - you have
755:32 - uh
755:33 - a profile section how many times you do
755:35 - you think uh your users are actually
755:37 - going to use the profile section
755:39 - probably
755:40 - once in a month that's rare right i mean
755:43 - in case they have to update some mobile
755:45 - number or email id which is really rare
755:47 - so those are the modules or let's say
755:50 - you have some kind of reports
755:52 - which will be uh let's say which are
755:55 - month and report so you know okay this
755:57 - this reports will be actually
755:59 - will be downloaded only in a month only
756:01 - once in a month so you know that okay
756:02 - this frequency will be really less so
756:04 - you can go ahead and configure is a
756:05 - loaded model so it's like
756:08 - whenever you are thinking about lazy
756:09 - loaded modules it's your
756:11 - developer mind as well as the business
756:13 - needs or the business uh idea which you
756:16 - get how frequently it is going to be
756:18 - used so keep all those things in mind
756:20 - before you go ahead and implement lazy
756:22 - loading mode lazy loaded module for your
756:24 - code base
756:26 - so this is it from lazy loaded model try
756:29 - it for employee if you don't if you're
756:31 - not able to do it just let us know
756:36 - now we are supposed to actually uh now
756:38 - we are going to actually discuss about
756:39 - round cuts but we will hold this topic
756:41 - for
756:42 - a few few more things which uh we will
756:44 - cover and then we'll come back to the
756:46 - route cuts
756:47 - so i'm going to show you a few more
756:49 - things related to the lazy loading uh
756:51 - right now what we have done is we
756:53 - already had an angular model right we
756:55 - what we did is the approach we took is
756:57 - we created the all components we created
756:59 - everything inside rooms and then we
757:01 - added a module then we did a refactor
757:04 - and
757:05 - finally we ended up module which
757:07 - was lazy loaded
757:09 - what in case
757:10 - i want to start from the day one i have
757:13 - the requirement
757:14 - right so i spoke to my business team
757:16 - they're saying okay this small this is
757:18 - something probably won't be used a lot
757:20 - but we need this functionality or
757:22 - probably this functionality is really
757:23 - huge and in case if we include it in
757:25 - your main module it is going to bump
757:27 - our bundle size so you decide that okay
757:30 - we will lazy load it to so uh the bundle
757:33 - size is less and it will be loaded
757:35 - faster for the users
757:37 - and you want to start with lazy loaded
757:39 - module from the daven
757:41 - let's try to do that
757:45 - so what we will do is we will uh
757:47 - create a module so let's create a
757:50 - booking model
757:51 - which will show all the bookings which
757:53 - can be done which will be done using the
757:55 - rooms module right so this is
757:57 - rooms booking but i mean it's a great
758:00 - module so
758:01 - this will be
758:02 - used to see all the previous bookings
758:05 - which are made
758:07 - and we need to download to make sure
758:09 - that it is lazy loaded so what you can
758:11 - do is there is a command to do that so i
758:13 - can say ngg
758:15 - module
758:16 - i can say a model name so i can say
758:18 - booking which is my module name i can
758:20 - say hyphen f and route is equals to
758:23 - booking
758:24 - and hyphen iphone routing
758:26 - uh to make sure that there is a routing
758:28 - module which is created so let's go
758:30 - ahead and
758:30 - enter
758:32 - and see what happens
758:36 - uh module option required
758:38 - module option required when
758:42 - iphone module
758:45 - is equals to booking
758:47 - let's see or i i think let's see
759:00 - so specified module booking does not
759:03 - exist it's okay
759:04 - sorry
759:08 - okay so uh
759:10 - there was a problem with the command now
759:12 - uh let me just talk about this
759:14 - particular module so
759:15 - what this module is so it is asking me
759:19 - where should i go ahead and register
759:21 - this particular lazy loaded module right
759:23 - now we have two models rooms module as
759:25 - well as app module
759:26 - so
759:27 - we have to provide the module where we
759:29 - need to go ahead and create a lazy
759:31 - loaded route like this
759:33 - so right now what i need is i want to
759:35 - create it with app with app module so
759:38 - uh it will now go ahead and create you
759:40 - can see
759:41 - uh it created a path here so you can see
759:44 - booking load children import booking
759:46 - module and booking module so if i go to
759:48 - booking module now you will find several
759:50 - things you will find a module you will
759:52 - find a component and all the related
759:54 - files as well as booking routing module
759:56 - as well
759:57 - all this
759:58 - by using a single command
760:00 - so you don't have to go ahead and do
760:02 - whatever we did earlier right so go
760:04 - ahead and create component then add a
760:05 - module and then do this no you can just
760:08 - do it with a single command also i'll
760:11 - show one more command which we can use
760:14 - so let's say
760:16 - is there any other
760:18 - screen we want to create
760:20 - okay so let's say uh i want to create a
760:23 - filter
760:24 - uh functionality right so where we can
760:26 - search for like search functionality so
760:28 - we we want to search for rooms
760:31 - and we what we want to do is we want to
760:32 - create a module first and then we want
760:34 - to add components and we don't want to
760:36 - lazy load this
760:38 - remember
760:39 - this one we wanted to resolute this one
760:41 - and we don't want to let's load so what
760:43 - we can do is we can create first the
760:44 - module so i can say ngm
760:47 - and i can say search
760:49 - so it will create a module first
760:53 - right so now we have the module now i
760:55 - want to create a component so what i can
760:57 - do is i can just go ahead and say
760:59 - nggc
761:02 - search
761:02 - now this will create a search component
761:05 - inside the search folder so you can see
761:07 - uh it created the files inside search
761:09 - folder as well as one more thing
761:11 - search module will register this search
761:14 - component
761:15 - so this is all all done automatically
761:17 - you don't have to do it manually
761:19 - the only reason i went through or
761:22 - i went through the uh
761:25 - the path where i did everything manually
761:28 - is probably you won't be writing
761:30 - uh the code from the scratch in your
761:32 - application you should know how to
761:34 - refactor the application or how to
761:36 - revisit the code right i mean what's
761:38 - wrong what's right in your code base
761:40 - otherwise you will be lost
761:42 - so that was the whole purpose of
761:44 - actually doing that exercise
761:46 - in case you are creating new code this
761:48 - is the way you should be doing it so
761:50 - first create the module and then create
761:52 - the component in case it needs to be
761:53 - lazy loaded from the day one just go
761:55 - ahead and reuse this command and that's
761:57 - it and you can define which on which
761:59 - module i want to actually register it i
762:01 - could have given it as rooms as well
762:03 - remember this so
762:05 - in case i am going to actually access
762:07 - this from the rooms module i can do that
762:10 - so i can actually lazy load any other
762:12 - module inside rooms that's also possible
762:14 - probably we'll try one exercise with
762:16 - that as well
762:18 - now we have our booking module and this
762:22 - is loaded as well so now i can just go
762:24 - ahead and
762:25 - add
762:27 - navigation
762:28 - and
762:34 - we can say this is
762:38 - bookings
762:41 - and
762:42 - what was the route booking
762:48 - and let's
762:49 - revisit
762:51 - the application
762:52 - and you uh
762:55 - let's go to sources
762:57 - pack
762:59 - dot slash src app and you can see we
763:03 - don't have anything related to booking
763:04 - let's click on bookings and now you have
763:06 - everything related to bookie
763:08 - so this is another command another way
763:10 - to do it and we will of course go ahead
763:12 - and add a form
763:14 - where we can see all the bookings in um
763:18 - in upcoming uh videos right so we will
763:21 - be using angular material table we will
763:22 - show you an example of how you can
763:24 - utilize angular material table to do
763:25 - that
763:26 - so yep that's uh that's another way to
763:30 - implement lazy loading
763:42 - well
763:44 - so when discussing
763:46 - dependency injection if you remember we
763:47 - left one thing i mean we said we will be
763:50 - discussing about it once we go through
763:51 - the lazy loading so let's go back and uh
763:54 - do that so
763:55 - we discussed about provider types we saw
763:58 - a route right we said okay in case it is
764:00 - root you can actually go ahead and add
764:02 - use this particular
764:05 - sorry you can use that particular
764:07 - service as a singleton service across
764:09 - your application
764:11 - now
764:12 - we will talk about the other type of
764:15 - provider type which is aiming now you
764:17 - might be wondering where this any is
764:19 - useful so let's go ahead and talk a
764:21 - little bit about it there are there are
764:22 - multiple use cases
764:24 - and i wrote a blog post on the same so
764:26 - i'll be trying to cover the same example
764:28 - here but let's figure out what
764:31 - is the use case for using any
764:34 - so here let's say we have a service like
764:38 - we uh what we will do is we'll create a
764:40 - service we will call it as a config
764:42 - service
764:44 - we already have app config so let's
764:48 - create another service and
764:50 - for that
764:51 - i will be creating a services folder so
764:54 - this is like a reusable kind of services
764:58 - and let's
765:02 - open the integrated terminal
765:03 - snggs
765:05 - and i'll say this is uh what should we
765:08 - name it
765:12 - config let's call it as config service i
765:15 - don't i don't think so we have anything
765:16 - called config service as of now
765:19 - and
765:21 - here so we have this config service
765:23 - let's go ahead and change this to any
765:26 - and
765:27 - one thing which we will be doing is we
765:29 - will be uh let's do
765:31 - uh console.log
765:34 - and let's see how many instances get
765:36 - gets created so we know that whenever a
765:38 - service
765:39 - is configured with provided in root we
765:41 - get a singleton instance and we in case
765:44 - you want to create multiple instances
765:45 - you can just go ahead and use providers
765:47 - property as we saw earlier
765:49 - now using provided in any let's see uh
765:52 - what happens so i am going to use this
765:55 - service inside the rooms component
765:59 - we will just inject it
766:01 - as of now
766:10 - and so this is concrete config
766:18 - service which is type of config service
766:30 - and let's go back to the application
766:32 - let's see if
766:34 - uh it is compiled here
766:36 - now let's go to console and this is
766:38 - where we will we want to see an
766:40 - interesting thing
766:42 - so here uh
766:43 - let's use config service services at one
766:46 - place other or is it okay
766:52 - okay let's do ctrl f5
766:57 - let's click on rooms
766:59 - and here i
767:01 - see
767:03 - let's see we have this
767:05 - room service initialized conflict
767:07 - service right
767:08 - so
767:10 - [Music]
767:15 - config surface initialized
767:19 - and we will be using the same config
767:21 - service inside app component the same
767:23 - way i mean we are not going to use it
767:25 - we'll just inject it and see how it
767:27 - behaves
767:36 - constructor
767:38 - this is this
767:41 - and let's see if we have any other
767:43 - module
767:46 - that's okay okay these two modules are
767:48 - enough more than enough
767:50 - let's go back to the ui
767:53 - and now you can see uh here it says
767:56 - config service initialized so we have
767:58 - config service dot ts line number nine
768:00 - it means one instance of config service
768:03 - is created right now
768:04 - and we cannot see any other instances
768:06 - which are available
768:08 - ah okay
768:09 - go to one more thing i'll just clear
768:11 - this
768:12 - and let's see the messages
768:15 - so we have this config service
768:16 - initialized so
768:18 - now
768:19 - [Music]
768:20 - why actually uh moved away from rooms
768:22 - because on click of rooms i mean it is
768:25 - supposed to create another instance so
768:26 - let me tell you why
768:28 - we have not done providers property we
768:30 - have not added to provide this property
768:31 - why should it create a new instance so
768:33 - let's go back go ahead and talk about
768:36 - how any place an important role here so
768:38 - we have config service initialized here
768:40 - let's go ahead and click on rooms
768:42 - and you will find that
768:46 - here config service is initialized again
768:51 - one instance
768:53 - two instance
768:54 - by so
768:56 - so when we say con
768:58 - this providers
769:02 - so when we use this providers at
769:05 - provider in providing as any
769:08 - it will create
769:10 - one instance for the entire
769:14 - code base where there is nothing lazy
769:16 - loaded right
769:18 - and it will create separate instances
769:20 - for each
769:22 - lazy loaded module in case it is getting
769:24 - used for example it is getting used in
769:26 - rooms so it will create another instance
769:29 - for rooms module
769:30 - if we go ahead and inject it
769:32 - inside let's say
769:35 - we have another model called header
769:38 - if we inject another instance in header
769:40 - it will not create an another instance
769:42 - because
769:43 - it is not lazy loaded but let's go ahead
769:45 - and inject let's try to inject it and
769:47 - see right so how many instances we end
769:48 - up with
769:49 - so here uh we have
769:52 - copy this
769:55 - header
769:57 - so as as per expectation header
769:59 - should use the global instance which is
770:02 - available which will be created
770:04 - and we'll create one for booking because
770:06 - booking is lazy loaded so
770:12 - let's see
770:14 - now rooms
770:17 - has so one is global instance config
770:19 - service initialize then rooms has
770:20 - another instance config services
770:22 - initialize two and now let's click on
770:24 - bookings and once we click on bookings
770:26 - booking has another config service
770:28 - initialize so we have how many instances
770:30 - right now three instances
770:32 - two
770:33 - used two separate instances used by two
770:36 - different lazy loaded modules as we said
770:38 - provided is any and one which is global
770:40 - instance which is available everywhere
770:43 - what can be the good use case so let me
770:45 - just uh give you an interesting use case
770:47 - which actually wrote a blog post on and
770:49 - it is great it is actually used in uh
770:52 - one of my friends uh book which was
770:54 - launched let me just stop uh so uh which
770:57 - was launched last year
770:59 - yeah it was launched last year uh it is
771:02 - a book based on angular iv so it's it's
771:04 - a little bit advanced right now you are
771:06 - on basic so i'll say i suggest once you
771:08 - have the basic idea or little bit idea
771:12 - about angular how it works then just go
771:13 - ahead and purchase that book so it's on
771:15 - angular iv which i actually profit so
771:19 - let's go ahead and talk about the use
771:21 - case which i was talking about
771:23 - so here what we will do is i'll create
771:26 - another
771:28 - so we already have service and i will
771:30 - create one
771:33 - injection token
771:36 - and say this is uh
771:38 - config
771:40 - or
771:44 - let's call it as route config
771:48 - so this interface uh this will be the
771:50 - interface and we'll say this is export
771:58 - interface
771:59 - without config
772:01 - and we'll say this is a
772:03 - [Music]
772:05 - title
772:07 - this type of stream so we have just
772:08 - single property
772:10 - and let's
772:11 - create an injection token so let's say
772:13 - this is
772:14 - cloud
772:16 - config
772:18 - dot service
772:20 - dot is
772:22 - and here we'll say export
772:25 - const
772:30 - without config
772:34 - which is equals to new injection token
772:41 - which will be type of
772:43 - this particular interface
772:48 - and i'll say this is a
772:50 - route config
772:56 - and
773:01 - what is this route configure first of
773:02 - that is being used as a type
773:10 - name section token which is type of
773:12 - route config
773:17 - okay let's see what i'm missing here
773:30 - ah
773:31 - this route config
773:33 - which is
773:34 - looks like uh this is something which
773:37 - already exists in angular
773:39 - core
773:41 - and
773:43 - let's import this import
773:45 - the interface
773:48 - dot slash without config
773:51 - and
773:52 - we'll say this is the interface which
773:54 - you are looking at and
773:56 - it should be fine
774:00 - config
774:01 - token
774:05 - great so we created our token and now we
774:07 - have an interface let's see how actually
774:09 - it helps in case we are using provided
774:12 - it provided in as any
774:15 - i'll use this route config token
774:18 - in app module we know how to do that
774:21 - right so we already have an example here
774:23 - so i'll just add provide
774:28 - and we will use value
774:34 - which will be
774:45 - let's go back to our module
774:48 - and we'll say which will be
774:50 - having
774:52 - so we know the type so we have this
774:54 - title
775:01 - which is home
775:02 - [Music]
775:05 - and we will be using this route config
775:08 - token we let's go ahead and use it
775:11 - inside the config service
775:14 - so now we know how to do that so we'll
775:17 - say inject
775:20 - and
775:22 - config
775:25 - cloud config token
775:28 - real quick
775:32 - config
775:34 - token
775:38 - and out something right so we'll just
775:40 - import this as well
775:42 - and let's print the value
775:44 - i think this is our extra
775:48 - console.log
775:52 - this is not conflict token let's verify
775:53 - this functionality as of now so we have
775:55 - this
775:56 - uh service which is
775:58 - now injected in so what we did is we
776:01 - created a config service and we created
776:03 - a token we uh provided a value to this
776:05 - particular token we said title is home
776:08 - and then
776:09 - we use this particular thing in service
776:11 - and we have
776:14 - tried we just
776:15 - we are just actually
776:17 - logging the top token value
776:20 - let's see what we have done so far and
776:22 - there is something unexpected
776:24 - which is app model.ts line number 68.
776:27 - let's see probably x just
776:29 - mr common
776:34 - then
776:35 - let's go ahead and see so what we have
776:37 - here so
776:38 - config service right now has few uh
776:42 - few instances right so we have this
776:44 - config service initialize and then we
776:46 - have title home
776:49 - you must be wondering what we have done
776:51 - i mean this is something which we have
776:52 - already done again why i am covering
776:54 - this this thing again i mean and we know
776:56 - how to use injection tokens but there is
776:59 - a difference when you use
777:01 - provided in any
777:04 - here
777:05 - let's try to
777:07 - pass
777:08 - this value
777:10 - to rooms module
777:12 - and what we will do is
777:16 - providers
777:19 - and i'll set our title is room
777:22 - so remember right now we are saying
777:24 - there's another
777:26 - we are just changing the title let's go
777:28 - ahead and see so we have title available
777:31 - as home available here right let's go to
777:34 - room
777:35 - and
777:36 - let's see what is the title available
777:38 - right now
777:39 - so we have title as room
777:42 - it changed
777:44 - let's switch back to any and let me show
777:47 - you what will be the value in case we
777:49 - use any sorry we use root
777:52 - so let's go back to the rooms sorry
777:55 - config surface
777:57 - and change this
777:59 - to root
778:04 - and
778:06 - here it is so you will still get
778:10 - for rooms even for rooms we are getting
778:13 - the value as home
778:14 - let me show you i mean probably let's
778:17 - move into uh another module so we can
778:19 - see the value so we have this home of
778:21 - course which makes sense click on rooms
778:23 - we will still end up with
778:29 - home
778:30 - why so
778:32 - because when we say
778:34 - root it's a singleton instance which
778:36 - will be available when we are saying any
778:38 - it will create a new instance for that
778:41 - particular service
778:42 - so we ended up with the new value which
778:45 - we registered into the module otherwise
778:48 - we will just get the previous value as
778:50 - which was
778:52 - added into app module remember this this
778:54 - is a really interesting uh
778:57 - interesting thing which landed in
778:58 - angular 9 and uh it's really useful so a
779:01 - lot of developers don't know this
779:03 - functionality which is available but can
779:05 - be can be really useful in case you want
779:07 - to actually go ahead and
779:09 - pass some other configuration
779:11 - which is which or you want to overwrite
779:14 - some configuration inside any of your
779:16 - lazy loaded module very interesting use
779:19 - case so
779:20 - as i said my friend has also covered it
779:22 - in very much detailed way in his book
779:25 - and you can also go through that use
779:27 - case as well
779:28 - so this is it about any and i'll just
779:31 - change back to any because this that was
779:33 - the purpose of having this particular
779:34 - service
779:35 - and we are done so now we will end up
779:37 - with whenever we click on rooms we will
779:39 - end up with configuration as title room
779:42 - you can pass any configuration for
779:44 - separate or you can just override the
779:46 - configuration for your lazy loaded
779:48 - module using in so uh we saw both the
779:51 - example using just a service how it
779:53 - behaves and then inject we added
779:55 - injection token to show you how it
779:57 - behaves in case we pass an injection
779:59 - token
780:04 - let's go ahead and talk about route
780:06 - cards
780:07 - so
780:08 - as per name suggest writes its cards
780:11 - what what you understand by cards so you
780:13 - have many type of cards and you might
780:15 - have seen your in your real time or real
780:18 - life as well right so let's say
780:20 - atms they have guards banks they have
780:22 - guards what they're trying to do
780:24 - they are trying to secure something of
780:26 - course in that case it's money
780:28 - so what route guards do so it means they
780:31 - these guards are actually trying to
780:33 - secure route
780:35 - but how so there are multiple guards
780:37 - which are available and they do
780:38 - different stuff
780:39 - so we will go through one by one and we
780:41 - will talk about resolve guard at the end
780:44 - and before we talk about resolve guard
780:46 - we will
780:47 - create our booking form finally and we
780:49 - will fix the date picker issue which we
780:50 - have uh in our
780:53 - earlier form right we if you remember we
780:55 - created our
780:57 - rooms uh add rooms form and we said okay
781:00 - this date time doesn't work then we will
781:02 - be using the angular material date
781:04 - picker so we will fix that as well
781:06 - so let's see uh how
781:08 - route guard behaves but before we go
781:10 - ahead and talk about how route card
781:12 - works we need to understand one thing we
781:14 - need to understand the
781:17 - routing event
781:19 - how does your route works
781:21 - right so we have not seen this we have
781:23 - seen okay how to configure your route
781:24 - how to
781:26 - do your default route how to do your
781:28 - wildcard route but
781:30 - in which sequence they are called i mean
781:32 - what happens when so you click on route
781:34 - so let's go ahead and talk about that
781:37 - and to do uh that
781:38 - we will be
781:40 - subscribing or we will be using the
781:42 - router service which we have already
781:43 - used but
781:45 - we'll be using some different properties
781:46 - let's go and see that
781:49 - so here i'll say private
781:52 - i'll say this is route
781:54 - and this is router
781:56 - now let's call it as a router right that
781:58 - makes sense
782:00 - and now on ng on init live cycle look
782:04 - i'll say this dot
782:05 - router dot
782:07 - events
782:09 - and it's an uh observable so i'll be
782:12 - subscribing to it and then we'll say
782:13 - this is event
782:21 - and here
782:22 - we'll just do console.log
782:27 - event
782:29 - and let's go to our ui
782:40 - let's see if it's compiled yes it's
782:41 - compiled and i think that is something
782:43 - bigger which is available
782:45 - so let's move on
782:48 - i can just let me just disable
782:51 - and let's go to console
782:55 - and here
782:58 - we want to
783:10 - hm
783:14 - so here you can see
783:16 - line number 34 so let's go ahead and see
783:18 - how it starts right so when in this case
783:22 - the navigation happened if you remember
783:24 - let me just do this one thing i'll just
783:26 - remove this and let's go back to
783:28 - employee right so we have the only route
783:30 - cards
783:31 - or route events are blocked
783:35 - so there are multiple events which gets
783:37 - fired when you click or
783:39 - in case a navigation happens
783:42 - so here you can see it starts from
783:44 - navigation start and if you see there
783:46 - are few parameter which your navigation
783:49 - start has so it has a url it has a
783:51 - unique id generated for each and every
783:54 - navigation event which happens
783:56 - these ids are really helpful in case you
783:59 - are getting some issue
784:01 - during navigation a common use case or a
784:03 - common issue which we generally get
784:04 - during navigation is
784:06 - by the time the first navigation gets
784:08 - completed you are trying to navigate
784:10 - again so you can only figure that out
784:13 - based on the id
784:15 - so
784:16 - navigation started then
784:18 - it tries to recognize the
784:20 - uh route so it says okay now this route
784:23 - is recognized so i have to uh there are
784:25 - some states which is uh available so
784:28 - remember
784:29 - a snapshot that's part of this you can
784:32 - see router snaps uh router state
784:35 - snapshot
784:36 - so you have url url after redirects
784:39 - then we get a get guard check start and
784:41 - this is where the route cards come into
784:43 - picture so it says okay now i'll be in
784:46 - go ahead i'll go ahead and check
784:49 - whatever guards you have implemented so
784:51 - this is where it will start
784:53 - then it will say okay now let me go
784:55 - ahead and activate the child
784:59 - where we have seen the child's so if you
785:01 - go to rooms
785:02 - click on add room so this is child right
785:04 - so it will go ahead and check if this
785:06 - child
785:07 - uh it will go and start activating this
785:09 - child routes
785:11 - then activation starts it will say okay
785:13 - now everything is figured out now i can
785:15 - go ahead and activate this particular
785:18 - routing or route
785:21 - now here all the cards have checked all
785:24 - guards check have ended so it says okay
785:26 - now it's fine everything is okay all
785:28 - guards
785:30 - said
785:31 - uh so all all the cards which we have
785:32 - implemented they are saying it is okay
785:34 - to allow this particular user to enter
785:37 - into this particular
785:39 - route guards check in right so nowadays
785:42 - when you try to enter into bank or atm
785:44 - what they do they check your temperature
785:46 - they try to see if you have any symptoms
785:48 - right so and then they allow you so
785:49 - that's where guards check end
785:52 - then it says okay now let me just
785:53 - resolve uh this particular route
785:56 - right so it will it will try to resolve
785:57 - this particular route where we are
785:58 - redirecting to room slash at and then it
786:00 - says okay now this is also fine this all
786:03 - ended
786:04 - then it will call activation ended and
786:05 - then it will say okay now child
786:07 - activation also ended and
786:09 - navigation finally it says okay now
786:11 - everything is fine let me just send the
786:13 - navigation and uh the last event which
786:16 - we have is scroll event scroll event is
786:19 - something which you can use in case
786:20 - let's say you click on a url and now you
786:23 - want to scroll your
786:26 - uh scroll your this horizontal bar right
786:29 - somewhere or top bottom wherever you
786:32 - want to you can just go ahead and
786:33 - subscribe to the scroll even task so
786:36 - this is
786:37 - related to this is related to your
786:39 - router events how they are called in
786:42 - sequence
786:43 - and now we will go ahead and talk about
786:44 - the route cards
786:49 - while working with router events it is
786:50 - also possible to listen to a specific
786:52 - event as we saw there were multiple
786:54 - events which were getting fired right
786:56 - but in case i want to let's say
786:58 - show loader when navigation start and
787:01 - show up and i mean remove the loader
787:03 - when navigation ends
787:04 - how you will be able to do that so we
787:07 - can actually achieve that by using
787:10 - something like this so i'll just rewrite
787:12 - this code or let me just keep it here so
787:15 - you can refer this
787:16 - while revisiting the code
787:19 - and let's try to listen to the specific
787:21 - event navigation start navigation and
787:22 - that's it
787:23 - so we'll say this dot
787:25 - router dot events
787:27 - dot
787:28 - now as we said we need to listen to
787:30 - specific events so i don't want to go
787:32 - ahead and
787:33 - listen to all the events and then filter
787:35 - out
787:36 - we will be using rxjs remember little
787:38 - bit difficult but with some practice you
787:40 - will figure out how to use rgs
787:43 - so here i'll be using pipe
787:46 - and inside pipe i'll be using filter
787:48 - operator so you
787:51 - let's see if it is here it is from
787:53 - alexis and in filter i will say this
787:55 - event
787:56 - which is instance of
787:59 - i'll say navigation start
788:04 - right so i'm just listening to the
788:06 - navigation start event and then i can
788:08 - subscribe
788:09 - and here
788:11 - uh let's say console sorry
788:15 - i'll say this is
788:17 - navigation start
788:21 - and we can remove this i think
788:23 - let's see
788:26 - and we can say console.log
788:30 - and now
788:34 - you can actually write a code here to
788:36 - show a loader navigation
788:39 - started
788:43 - right and then i can just use another
788:46 - given where i say navigation end
788:51 - and i'll say navigation completed
788:56 - let's go ahead and see if it works
789:00 - right so
789:02 - let's
789:03 - inspect
789:05 - go to console
789:07 - and
789:09 - let's go to
789:10 - [Music]
789:12 - default route first right so we can just
789:14 - remove all the comments which we have
789:17 - and let's click on employee and you can
789:20 - see navigation started navigation
789:21 - completed so we are listening to only
789:24 - this two events so this is how you can
789:26 - filter out uh the other events in case
789:29 - you don't want to listen to them so
789:32 - uh just to give you an idea how you can
789:34 - actually achieve this as well
789:37 - now we understand how the routing event
789:40 - works and how we can listen to specific
789:43 - events in case you want to so now let's
789:45 - move on to the route cards so we we
789:47 - discuss what guards are what route
789:48 - guards are and let's
789:50 - see what this different guards do right
789:53 - so as you know in banks also they are
789:55 - there are different guards in case there
789:57 - is a guard who is like standing in front
790:00 - of your bank there
790:01 - if there uh there are some lockers or
790:04 - some
790:05 - uh yeah some lockers in bank they have
790:07 - different guard available right to
790:09 - secure that area so similarly router has
790:12 - different cards for different
790:14 - uh areas to secure so let's start with
790:16 - can activate
790:20 - and for connectivity we actually have a
790:23 - very nice
790:25 - use case already
790:27 - let me show you
790:34 - so remember we already have this login
790:36 - page but is this login page usually
790:38 - useful the answer is no this is useless
790:40 - i mean this is like
790:42 - some uh guard who is standing in front
790:44 - of bank but he is not checking anyone he
790:46 - is just letting the everyone go
790:48 - so
790:49 - it's pretty useless right so here uh
790:52 - what we can do is the can activate guard
790:54 - let's relate to can activate card so can
790:57 - activate cards
790:58 - uh guard actually tries to
791:01 - c
791:01 - if i'm
791:04 - sorry if i am as a user
791:07 - of course at the end as the as a end
791:09 - user
791:10 - is
791:11 - a valid entity
791:13 - to access
791:15 - this particular route or not can i
791:18 - activate can i activate this particular
791:19 - route that's what can activate is all
791:22 - about it means
791:23 - that guard is actually checking
791:26 - if
791:27 - no one has fewer right i mean that's
791:29 - what they're supposed to do in in days
791:31 - of corona so they're supposed to check
791:34 - your temperature and everything
791:36 - so if
791:37 - you have a few fever they are supposed
791:39 - to let you go
791:41 - and the same thing will
791:43 - uh is
791:45 - same thing can activate will do for us
791:47 - here so in case we are logged in we
791:50 - should be able to access the different
791:52 - routes which we have in case we are not
791:54 - logged in we are not supposed to do that
791:56 - so based on some conditions you can
791:59 - secure your own
792:00 - let's go ahead and create cards
792:03 - how we can do that so i'll just
792:05 - what we will do is as we are supposed to
792:07 - write few other cards as well i'll
792:09 - create a new folder i'll just call it as
792:12 - guards
792:15 - and
792:16 - let's go to terminal and you can see ngg
792:20 - card
792:20 - so ngg
792:22 - and i'll say this is login card as we
792:26 - are supposed to check if the user is
792:28 - logged in or not i mean it can be
792:30 - anything right it can be your scenario
792:32 - so
792:33 - we have can activate we will be using
792:35 - can activate child but we will be using
792:37 - it for rooms so we will not add this
792:39 - and can activate we will use it for
792:41 - another form which we are supposed to
792:42 - create
792:43 - and can load we will use this one so we
792:46 - can select you can select which of these
792:48 - if router guards you want to implement
792:52 - one why resolve guard is not there we'll
792:54 - talk about it don't think about it right
792:56 - now so we are supposed to we chose two
792:59 - words which we need to implement can
793:01 - load we will talk about it later but as
793:03 - is it is supposed to be part of this
793:04 - particular file i just added it here
793:08 - so now
793:09 - let's see so what we have it's a
793:12 - interface it's an interface which has a
793:14 - function called can activate it gives
793:16 - you some data we will see what we can do
793:18 - with this particular data
793:20 - and it returns some
793:22 - parameters let's talk about this later
793:25 - on
793:25 - so here uh by default this route guard
793:28 - returns true
793:30 - it means
793:31 - this is the useless card which we have
793:33 - so he is just letting everyone go
793:35 - without checking the fuel
793:36 - so but let's see how to apply this guard
793:38 - right at least let's understand how to
793:40 - actually put that guard in front of the
793:42 - bank
793:42 - so
793:43 - here
793:46 - in your routing configuration you can
793:47 - just go to route configuration and you
793:49 - can choose
793:50 - what are the different areas which we
793:52 - want to secure so we want to secure
793:53 - employee we want to secure booking we
793:56 - want to secure rooms
793:58 - right and we don't want to secure login
794:00 - now if we secure the login
794:03 - game over right i mean no one will be
794:05 - able to access login
794:06 - so here you can use can activate
794:08 - property
794:09 - and it's an array it's an array remember
794:12 - this it means i can just add any number
794:14 - of cards
794:16 - so let's say i have a login card i have
794:18 - a role guard for example there are
794:21 - different types of roles which are
794:22 - assigned to access your lockers
794:25 - right uh as and let's say someone from
794:28 - admin i i'm not supposed to access the
794:31 - lockers but someone from the accounting
794:33 - i am supposed to access the login let's
794:34 - see access the locker so those are those
794:37 - are the uh criteria which you can put
794:39 - you can create another card and just add
794:41 - it afterwards so here we just have one
794:42 - so i'll say login card
794:44 - that's it i'll just apply this to all
794:47 - the places which we have
794:48 - which we want you to secure so let's say
794:51 - this you get a guard you also get a
794:53 - guard
794:55 - but as we said
794:56 - right now everyone will have access to
794:59 - everything right
795:02 - now let's go back and change that true
795:05 - to false
795:09 - and
795:10 - here it is
795:12 - we don't have access to anything
795:14 - and let's go to login
795:17 - we should be able to access login
795:18 - because we said okay this is something
795:20 - which is not secured as of now i mean
795:21 - there is no guard in front of login
795:24 - so
795:25 - it works
795:26 - but what in case
795:28 - i mean
795:29 - here so it doesn't work for anything
795:32 - else and even
795:34 - if i
795:35 - try to do this will be redirected to
795:37 - login but you saw right i mean we were
795:39 - on
795:41 - employee route i think and then we got
795:43 - kicked out and there was an empty page
795:45 - we will see how we can actually dis uh
795:47 - uh
795:48 - handle that scenario as well but let's
795:51 - do first thing first
795:53 - so what we need to do here is we want to
795:55 - actually write the code so we want to
795:58 - write the code so
796:00 - once we are logged in
796:01 - and we
796:03 - or the end user is logged in and it's a
796:05 - valid user
796:07 - that particular user should be able to
796:09 - access the routes so we can redirect to
796:12 - wherever we want to for example let's
796:14 - say we will redirect to
796:15 - brooms right
796:17 - let's see
796:19 - let's put that logic first
796:21 - so in login
796:24 - what we will do is we will create
796:25 - another service
796:28 - i will call this service as login
796:30 - service
796:36 - and here i am going to put a
796:40 - flag
796:41 - which says is logged in
796:43 - and which is type of boolean and false
796:46 - and then i am going to put a method
796:48 - login
796:49 - where we will just copy the logic which
796:51 - we have already available so i'll say
796:53 - this is
796:55 - email and password so i'll say
796:59 - email
797:01 - which is a string
797:03 - and
797:04 - password which is also string but rather
797:06 - than doing navigate here
797:10 - right so we'll just keep the navigation
797:11 - part here and say this dot is logged in
797:14 - is equal to true so i'm just setting up
797:16 - flat that okay
797:18 - this particular user is logged in now
797:21 - and as this is a singleton instance
797:23 - everyone using this particular service
797:25 - will get the latest value for is logged
797:27 - in you can do it in multiple way do you
797:29 - want to use uh some behavior subject go
797:31 - ahead and do that but let's try to keep
797:33 - it boolean uh as of now
797:36 - and if this is
797:37 - uh
797:39 - not logged in
797:42 - or we can just do something like this
797:44 - right so
797:45 - set this and return this dot is logged
797:47 - in so if it is not true of course it
797:49 - will return the default value which is
797:51 - false
797:52 - and now let's go back to our login code
797:55 - and
797:56 - here
797:57 - say private
797:59 - login
798:01 - which is like login service
798:07 - and
798:07 - we will just check
798:10 - if this dot
798:12 - login server start
798:14 - login
798:16 - and we will pass this dot email and this
798:18 - is not password
798:19 - let's see if there are extra
798:26 - so if this is true we should be able to
798:28 - navigate to
798:29 - rooms slash ad let's try to
798:33 - go back go to rooms right we don't want
798:35 - to go to room slash yet so
798:38 - but still it will not work right so
798:40 - let's try that out
798:42 - the reason being uh we have not made
798:44 - changes to our guard our guard still
798:45 - returns false
798:47 - so i'll say this is admin at gmail.com
798:51 - and this is
798:53 - admin
798:55 - right so nothing works you can see
798:59 - here navigation started but
799:01 - uh there was a guard which said okay you
799:04 - are not supposed to come here just go
799:05 - back go back
799:07 - and that's
799:08 - where we will just write the code to our
799:11 - card now i can use login service here so
799:14 - uh remember this is a service right so
799:15 - it also has a constructor
799:18 - and then you can say private
799:21 - login
799:23 - service
799:25 - which is type of login service so now we
799:26 - have access to login service server here
799:29 - let me just close this and rather than
799:31 - returning false what i can do is return
799:33 - this dot
799:36 - login service
799:37 - dot
799:38 - is logged in
799:40 - so remember you uh it can be observable
799:42 - as well because it can return observable
799:44 - or it can return
799:46 - url tree it can also return a promise
799:48 - which we are not using anymore and also
799:51 - it can return a boolean which we are
799:52 - using right now it's a boolean value
799:54 - so
799:55 - now let's go ahead and verify
799:58 - the
799:59 - functionality so i'll say okay this is
800:01 - admin and password is
800:04 - admin and let's click and
800:07 - here it is we are
800:09 - on rooms page let's click on employee
800:11 - let's click on add room and everything
800:13 - works fine
800:14 - right so because now your guard is
800:16 - saying okay i checked you you don't have
800:19 - here let's just go
800:20 - go into the bank and similarly here
800:23 - our login service is saying yes you are
800:25 - logged in just
800:26 - go ahead and enter and access the urls
800:28 - you want to
800:30 - so this is uh one way
800:32 - but let's try to do one thing let's
800:35 - refresh this page
800:37 - remember now it's a blank page we are
800:39 - not even on login page
800:42 - the reason being once
800:45 - we refresh of course you
800:46 - lose the state of your application
800:49 - in that case you be your locked in state
800:51 - becomes false
800:53 - but
800:54 - your guard does not know where to
800:56 - redirect to you so it says okay i'm not
800:58 - sure where you uh we want to redirect to
801:00 - you because you have already passed you
801:03 - have already uh
801:04 - you are already past the login uh sorry
801:07 - the routes right so you uh you have
801:10 - already checked the routes and you
801:11 - failed the
801:13 - what guards you failed the card state or
801:16 - you failed you failed the guard check
801:18 - now where to redirect to you so this is
801:20 - where you can do something like this so
801:21 - you can say written if logged in then i
801:24 - can say okay return true
801:26 - or
801:28 - you can use
801:30 - throughout the service so let's see
801:32 - inject
801:35 - private
801:36 - router
801:41 - so you can say this dot
801:43 - router dot
801:45 - navigate and i can say just go ahead and
801:48 - navigate this user to login
801:50 - let's see now
801:51 - and here it is so we are on login page
801:53 - but you might be saying okay this that
801:54 - was by default why us why you're lying
801:57 - i'm not let me show you
801:59 - so let's go ahead and say login
802:01 - and
802:02 - same thing we will refresh
802:05 - and we are on login so we fix that
802:07 - particular issue as well so this is from
802:10 - can activate card
802:12 - let's go back ourselves now
802:15 - now let's go ahead and discuss about can
802:17 - activate child so it has something to do
802:19 - with child as it says
802:21 - and lucky luckily for us we have already
802:24 - seen some example how you can use the
802:26 - children property in your route right so
802:28 - we did it for rooms
802:31 - let's go back to the code so here
802:33 - we have
802:36 - rooms and then let's go to the routing
802:38 - and we have these two parts
802:42 - so
802:43 - now what we want to apply is we want to
802:45 - say in case this logged in user is admin
802:49 - i should be able to access children
802:50 - otherwise i should not be able to access
802:52 - children
802:54 - possible right as i said i mean even in
802:56 - banks you can have a guard
802:58 - who can who is responsible for checking
803:01 - what kind of role someone has who is
803:03 - trying to access this particular logger
803:05 - locker if you are a teller of course you
803:07 - should you you can get the access if you
803:10 - have uh if you're a user you should get
803:13 - the access to the locker but if you are
803:14 - someone who is not authorized to access
803:16 - the locker you can get into the bank
803:19 - so you
803:20 - pass the can activate
803:22 - guard but you should not be able to
803:25 - enter into the locker room
803:27 - that's what we are supposed to do here
803:29 - so here we will be creating another
803:31 - folder we'll call it as cards and this
803:34 - is related to rooms so i'll just close
803:37 - others here
803:39 - and
803:40 - let's close this as well because there
803:42 - are too many files which will open
803:44 - and let's go to integrated terminal and
803:46 - g
803:48 - g and i'll say this is room card
803:50 - related to room so in case in future we
803:52 - want to add more we can
803:54 - and the only guard which we want here is
803:56 - we want can activate
803:58 - child and that's it
804:03 - right now it's true but let's go ahead
804:05 - and apply this card
804:07 - so here you can say can activate child
804:09 - again this is an array so you can have a
804:11 - number of cards applied here
804:13 - and you can say room
804:16 - card
804:17 - right so
804:18 - everything great so far
804:21 - and we should be able to access once we
804:23 - are logged in so i'll say this is admin
804:27 - admin
804:28 - and we should be able to access
804:30 - rooms
804:32 - and add rooms you should be able to
804:34 - access book
804:37 - room
804:38 - and works fine
804:40 - now let's break it
804:42 - so to break it we have to say return
804:45 - false
804:56 - let's provide
804:58 - admin
805:00 - admin
805:01 - and
805:05 - click on employee click on rooms
805:08 - bad room now we don't have access
805:11 - click on book room we don't have access
805:13 - and it says navigation started but it
805:15 - never ended because
805:16 - because of course the guards kicked us
805:19 - out
805:20 - let's now fix it
805:22 - so we can go to login
805:24 - and now we are supposed to have two
805:26 - types of login so one is user logged in
805:28 - a user login and one is admin so i'll
805:30 - just add i'll say this is admin and
805:33 - which is
805:35 - boolean and which is false by default
805:37 - and if
805:38 - someone uses this so i'll say this is
805:40 - admin which is true
805:42 - and
805:44 - i'll say else
805:47 - or
805:48 - not else
805:50 - if
805:52 - else
806:00 - you can just use it right
806:02 - yeah
806:04 - i'll say this says
806:08 - user
806:14 - i can say okay this is logged in is true
806:17 - now but is admin is false
806:28 - so now
806:28 - my login service knows who is admin who
806:30 - is not
806:32 - let's go ahead and use this into our
806:33 - cart
806:35 - so we can use constructor
806:39 - facebook
806:40 - login
806:42 - service
806:43 - just type of login
806:45 - service and then here
806:52 - i can say if return this dot
806:55 - login service dot is admin
806:58 - so if this is true written truth that's
807:00 - it
807:02 - in case you want to add some extra check
807:04 - go ahead and do that
807:06 - let's figure out admin first add room
807:10 - yes works
807:11 - select room select
807:13 - book room works
807:15 - let's refresh this page so we'll go back
807:18 - to login now and
807:21 - now you will use user and
807:24 - gmail.com and we will use
807:27 - user
807:29 - right and let's click on add room we
807:31 - don't have access to it
807:33 - select books
807:34 - and we don't have access to it either
807:36 - so this is how you can prevent the
807:38 - access to child drums
807:41 - next card we are going to talk about is
807:43 - not candy activate but we will talk
807:45 - about can load and then we will come
807:47 - back to candy activate and resolve card
807:50 - so why i mean in candy activate we need
807:52 - a form so we will go to the uh
807:55 - another topic which is reactive form
807:57 - which is pending right now and we'll
807:59 - create a form and then we'll come back
808:01 - to candy activate because the scenario
808:02 - is related and i don't want to skip that
808:06 - let's see can load
808:10 - we already have an issue which is
808:12 - related to
808:13 - where we can apply can load so let's go
808:15 - ahead and refresh this page so we will
808:18 - be redirected to login
808:20 - and let's go to sources
808:22 - and let's see what are what is the code
808:24 - which is loaded right now so you can see
808:26 - you can go to apps and
808:28 - rooms
808:31 - what's this possible
808:35 - let me just refresh again
808:37 - so yeah rooms is gone right so we don't
808:40 - have rooms available here
808:42 - which is okay right i mean we said we
808:44 - already tested this then you might be
808:46 - wondering why i'm talking about it
808:48 - talking about
808:49 - this rooms again which is lazy loaded we
808:52 - know that it is not supposed to be
808:53 - loaded
808:54 - let's go ahead and click on rooms
808:57 - so this room says loaded are we
808:59 - redirected to rooms the answer is no
809:01 - but still have access to this particular
809:03 - route the reason being
809:05 - we are not redirected because of can
809:08 - activate card so we are not able to
809:10 - activate this particular
809:12 - route
809:14 - but it is loading the code because it
809:16 - doesn't know what to do in case i am not
809:20 - authorized to access this particular
809:22 - route
809:23 - this is where can load this is this is
809:26 - where can load route guard comes into
809:28 - the picture
809:29 - so this is where the can load card comes
809:31 - into the picture so it is itself say it
809:33 - is saying that can i load this
809:36 - particular route
809:37 - it is only applicable for lazy loaded
809:40 - router remember this so i can apply the
809:42 - scan load card
809:44 - so i can just go to cards
809:46 - and i can apply this the same apply the
809:48 - same
809:51 - so i can just say if logged in
809:54 - right
809:58 - and
809:59 - let's apply the card here
810:02 - so this is rooms
810:04 - i can say can load
810:06 - and then i can pass the card
810:11 - and you might have a question again i'll
810:12 - come back to that point
810:14 - but let's go ahead and verify this one
810:16 - so i will go to web pack
810:18 - src app
810:19 - rooms not available let's click on rooms
810:22 - and still not load it because now it
810:23 - knows that okay in case
810:26 - if i am not logged in i am not supposed
810:28 - to do anything i am not supposed to
810:29 - allow access to this particular sorry i
810:31 - am not supposed to load this particular
810:33 - uh lazy loaded module so that's what we
810:35 - are restricting here now let's come back
810:37 - to this point
810:38 - you might be wondering that for can
810:40 - activate and can load both
810:42 - i am applying login card
810:44 - i mean i can just go ahead and have uh
810:46 - can activate child here as well and
810:49 - i can have sorry we don't have child but
810:51 - in case we had right so we can also
810:54 - apply um resolve guard here the reason
810:57 - the thing is whenever uh
811:00 - it tries to actually
811:02 - apply or
811:04 - run particular card it checks for which
811:06 - property so here though even though we
811:08 - are passing a login card for both
811:11 - in this case it knows that i have to go
811:12 - ahead and activate this scan load
811:14 - function
811:15 - in this case it knows that i have to go
811:17 - ahead and implement ah so we call can
811:19 - activate method that's all so that's
811:21 - absolutely fine so don't get confused
811:23 - here um that i have to go ahead and uh
811:25 - create multiple guards for multiple use
811:28 - cases even the even though the code is
811:30 - same no you don't have to
811:33 - before we go ahead and explore the other
811:37 - round cards which we had
811:39 - we'll go ahead and create a form so we
811:40 - already have something called booking
811:42 - which uh
811:43 - we want to
811:44 - uh create so we want to create a booking
811:46 - form where
811:48 - users
811:49 - can book
811:50 - a room right so as in someone who is
811:53 - working in that hotel you will you
811:54 - should be able to book a room
811:56 - and that will be the form which will be
811:57 - created
811:58 - so we will be using another approach
812:00 - called reactive forms we already saw a
812:02 - template driven form and
812:04 - here in reactive form as well we will go
812:06 - through a step we'll
812:08 - do step by step we'll set up reactive
812:10 - form then we'll talk about
812:13 - so
812:14 - we'll uh we'll see how to create a form
812:16 - then we'll also see how to create uh add
812:18 - controls dynamically then we'll talk
812:20 - about the built-in validators we'll talk
812:22 - about submit and reset form
812:25 - we'll talk about how you can listen to
812:27 - the changes on a form which will be of
812:29 - course using template driven form
812:31 - we will also talk about patch value set
812:33 - value which is really important uh
812:36 - important question in case you are
812:37 - giving an interview
812:39 - we will talk about few rxjs operators
812:41 - and then we will also add a custom
812:43 - validation so let's go ahead and start
812:45 - with setting up your reactive form the
812:47 - first thing which we need to do is we
812:48 - need to create or import a reactive
812:50 - forms module
812:56 - we will be doing it for booking and for
812:57 - booking we already have a module
812:59 - separate module so
813:01 - what we'll do is we will add a reactive
813:03 - forms model here
813:05 - and remember
813:06 - in template driven form what we saw is
813:08 - we created the
813:09 - in template driven form what we saw is
813:11 - we created entire form using html right
813:15 - in template driven form you will see
813:16 - another approach we will see that all
813:18 - the forms will be created using st using
813:21 - typescript and we will just be rendering
813:23 - the those forms which is already created
813:26 - so now first step is done reactive forms
813:28 - module added now let's go ahead and see
813:30 - what else
813:31 - so we'll create reactive form using
813:33 - typescript and this is a good approach
813:35 - in case you want to have like more
813:37 - control on the typescript site of our of
813:40 - your form
813:41 - and uh
813:44 - in case uh sorry the apis are same as i
813:47 - said but you will be using something
813:48 - like form group form control form
813:50 - directives
813:51 - uh
813:52 - so let's go ahead and do that
813:58 - so here
814:04 - let's first see how our form looks like
814:10 - it means we have to have a model so here
814:12 - i have created a model which will
814:15 - which will show you how my uh how the
814:18 - form looks like so
814:21 - let's paste it here
814:24 - so we'll be having
814:28 - a booking id which will be order
814:29 - generated so we can remove this
814:32 - we will have a room id of course because
814:34 - we will book a specific room
814:36 - then we will have email we will have
814:38 - check-in date checkout date we will have
814:40 - booking status which will be generated
814:42 - uh or we can send it so booking amount
814:44 - booking date we will have a mobile
814:46 - number
814:48 - guest name guest writer is city state
814:50 - country and zip code
814:52 - and we also have
814:53 - uh
814:56 - guest count
814:58 - which will be type of number
815:00 - and
815:01 - in case it is
815:03 - number of guests are
815:06 - more than one right so we have to have
815:08 - that cash list
815:09 - so we can say guest
815:11 - list
815:14 - and some
815:16 - random
815:17 - thing right some random object so let's
815:20 - go ahead and add let me
815:23 - just add this into my back end because i
815:25 - have not done that
815:28 - and
815:29 - it's a guess list which will be the
815:33 - array
815:35 - okay so i'm not creating an interface
815:37 - here but it's absolutely fine but yeah i
815:39 - know this is these are the fields which
815:41 - we are supposed to have
815:42 - so let's go ahead and see uh how we can
815:44 - create this form using reactive forms
815:48 - so the first thing which we need is we
815:50 - need uh
815:53 - the first thing which we'll do is we
815:54 - will do one thing
815:55 - i'll remove this connectivity card from
815:57 - here i don't want to actually log in
815:59 - every time
816:00 - and
816:02 - let's do it
816:04 - here as well and we'll put it back
816:10 - thing is uh here i need
816:20 - let it be
816:22 - we can keep this and let's do it for
816:24 - booking
816:25 - so booking component the first thing
816:27 - which we need is we need a form so how
816:29 - we'll create a form
816:31 - so there is a class called form
816:33 - group
816:34 - where you can actually go ahead and add
816:36 - multiple controls
816:37 - we will see some other variation as well
816:39 - what in case i don't want to actually
816:41 - have entire form we need a single
816:43 - control we'll see an example of search
816:47 - so here i'll call this as booking
816:51 - form
816:52 - which is type of form
816:54 - group
816:56 - so this is the first class which we are
816:58 - using form group and we are saying okay
817:00 - this um booking form
817:05 - let's
817:06 - use this
817:07 - so we don't have the error available
817:09 - here and then we now we need
817:12 - we have we got our form so it's an empty
817:14 - form what else
817:16 - you will do after you got your form you
817:17 - will add controls how you will add
817:20 - control so let's go ahead and see that
817:21 - so there is a class called form builder
817:23 - the name itself suggests that okay this
817:25 - is something which will be used to build
817:27 - the form
817:28 - let's go back to our slides here
817:35 - so
817:36 - we will go through form control later on
817:39 - for another example but here so we can
817:41 - use form group to group multiple forms
817:43 - multiple controls
817:45 - and we will be using form builder to
817:46 - build complex forms so uh it can be used
817:50 - to
817:50 - add multiple controls to that particular
817:52 - form
817:54 - so now let's go ahead and do the step
817:55 - two so we want to use form builder so
817:58 - i'll use
818:01 - this is a service remember so form
818:02 - builder is a service so we are injecting
818:04 - it
818:05 - we will say okay this form is form
818:07 - builder
818:09 - and then we can say this dot
818:12 - your booking form is equal to
818:14 - fb dot
818:16 - group we are grouping the form there are
818:19 - multiple ways we will talk about how we
818:20 - can create a control because
818:22 - this form builder allows us to add
818:24 - multiple things so you can see it says
818:27 - there is a group which is my widely used
818:29 - you can say there is a star in front of
818:31 - it means it is widely used and then we
818:34 - have array and control we will see all
818:35 - the examples don't worry about it so
818:37 - right now we are saying okay there is a
818:38 - group
818:39 - and now in this form group we can add
818:41 - multiple controls so let's go ahead and
818:43 - add
818:51 - so it's a room id
818:57 - so let's replace this semicolons with
819:01 - comma
819:05 - okay
819:10 - and i'll copy this and then we'll talk
819:13 - about it
819:24 - okay
819:39 - and we will add this guest list later
819:42 - so we have this one form group closed
819:46 - here we'll just remove this two commas
819:48 - uh with
819:50 - single comma
819:52 - okay
819:56 - let's format this
819:58 - and
820:01 - somehow this is not close
820:05 - uh okay
820:06 - let's remove this now
820:08 - so
820:09 - format document
820:11 - so we got the form and now we have added
820:13 - some controls
820:15 - first up let's go ahead and verify this
820:18 - we are talking about we are saying that
820:19 - this is a form but is it really a form
820:21 - let's go ahead and talk see that how we
820:24 - can verify if it is a form the simplest
820:26 - way is to go ahead and check the
820:28 - properties which are available generally
820:29 - on forms so remember pressing the d
820:32 - values so let's try this one
820:35 - so booking form dot value
820:38 - pipe json
820:40 - and then we'll also talk about pristine
820:42 - and dirty
820:52 - and now let's go back to the ui
820:57 - and of course this uh these routes is
820:59 - not supposed to work but bookings will
821:01 - and you can see uh in
821:03 - values we are getting all the values or
821:06 - all the properties which we have defined
821:08 - and all the values are by default empty
821:11 - empty string
821:13 - right
821:14 - so let's talk about this first so this
821:17 - is a shortcut to uh this one so you can
821:20 - actually
821:21 - use new form control and provide a
821:23 - default value
821:25 - so either use this syntax or this syntax
821:27 - i generally use this syntax because it
821:29 - it is
821:30 - it i mean i love to
821:33 - tell them okay this is a form control
821:35 - and because of typing right so
821:38 - otherwise you can just go ahead and use
821:39 - this particular syntax as well
821:42 - so now we have all the controls
821:45 - defined so what we did so far is we
821:47 - created
821:49 - we uh sorry we added the reactive forms
821:52 - module we created the form using
821:54 - reactive way
821:56 - by using form group form builder
821:59 - now next thing
822:00 - sorry the next thing which we have to do
822:02 - is now we have to go ahead and render
822:04 - this form remember as i said the form is
822:06 - already created and this is the proof
822:09 - right so
822:10 - form dot value it means the form is
822:12 - created
822:14 - pristine dirty it gives gives us the
822:16 - values as well so it means the form is
822:18 - ready now the next thing which we have
822:19 - to do is just go ahead and render it
822:22 - now let's go ahead and bind this form to
822:24 - our
822:25 - html right
822:26 - so how to create a form of course we
822:28 - have to use form tag
822:30 - there is no other option
822:31 - the next thing is uh you have to define
822:33 - that okay now this form is already
822:35 - created so we have to somehow tell the
822:38 - html that okay you don't have to create
822:40 - a new form if you don't i mean it will
822:42 - create a new form right so the way to do
822:45 - is you have to use a directive called
822:47 - form group
822:48 - and now this form group directive is the
822:51 - booking form which we have already
822:52 - created
822:53 - so this line of code
822:55 - will tell
822:56 - the angle compiler okay look uh sorry
823:00 - look we have already created this form
823:02 - just go ahead and bind this form to this
823:05 - booking form which is already created
823:07 - and which has this controls
823:09 - so step one done
823:11 - we said that
823:12 - um now let's go ahead and apply a div
823:16 - but here we will be doing something
823:18 - so here we will be doing a different
823:21 - thing we will be using materials control
823:23 - so we can go to
823:25 - uh sorry components and we can go to
823:27 - form
823:31 - right so there are multiple ways to add
823:33 - your form input text
823:35 - so let's go ahead and see how what needs
823:37 - to be done so
823:39 - here the following element doesn't work
823:41 - inside the mat form field so we have
823:44 - uh
823:45 - sorry input we have text area
823:48 - and
823:49 - let's see the code here so we have
823:52 - mat form field
823:54 - uh mac label uh select button
823:58 - we have text area
824:00 - and then there is should be an input
824:02 - input as well so we use mat input here
824:05 - so
824:06 - for input we will be referring this
824:08 - but this matte input can be wrapped
824:11 - inside the form field so we have to
824:12 - actually combine both the apis
824:14 - and we can see it here uh
824:18 - html
824:20 - right so we have this mat form filled
824:22 - class
824:23 - and we will copy the css as well from
824:25 - here so let's do that i will just copy
824:27 - one and then we will repeat it for this
824:30 - so here uh
824:31 - now we are getting some error we'll just
824:33 - remove this let's get a get rid of this
824:36 - div now because here mat form field is
824:39 - what we are looking at
824:40 - so i'll just say for my document and
824:43 - just ignore about the error
824:46 - we'll fix those
824:48 - we'll copy the css from here
824:52 - and
824:56 - so the they have some my uh error states
824:59 - okay i'll we'll remove this will not
825:01 - make this much complicated i'll remove
825:03 - this one
825:04 - from control is what we need mat label
825:06 - is what we need
825:08 - mat error okay matte and
825:10 - okay i'll remove mat hint
825:12 - matte error okay
825:16 - and now let's talk about this
825:19 - so here uh
825:20 - what are the apis which we are going to
825:22 - use is mat input and mat form so let's
825:26 - go to the form control
825:30 - field control and let's see what we need
825:32 - to do so we need to import this mat
825:34 - frame mat form field module
825:36 - let's go ahead and add it
825:40 - so now matte form filled
825:43 - error should be gone then we have label
825:47 - and input so let's take input second
825:50 - and now all the errors related to input
825:52 - should be gone
826:00 - and then we had label so let's go to
826:02 - [Music]
826:12 - okay looks like label is part of this
826:14 - particular api so we don't have to do
826:15 - anything
826:16 - and that's it now here
826:19 - in form field we will say this first
826:22 - property let's see what is the first
826:23 - control which is room id
826:25 - so i'll say okay this is uh
826:27 - text
826:29 - and
826:30 - i'll say this form control is room id
826:33 - room id is something which is available
826:35 - here
826:36 - so
826:40 - apart from this
826:56 - so room id is
826:59 - i'm not getting this is string so i have
827:01 - to save this
827:07 - okay
827:08 - so yes we will be using form control
827:10 - name and
827:13 - let's see
827:16 - from control name room id it should work
827:18 - and now let's go ahead and comment this
827:20 - mat error for time being
827:24 - okay so what we have done is we are
827:26 - saying this is room
827:28 - id
827:31 - and let's see how it looks like so it
827:33 - says okay we have this uh
827:35 - room id a placeholder and so this is
827:40 - home id
827:44 - and let's enter something here so you
827:45 - can see room id is actually which is
827:47 - getting mapped here but there is some
827:49 - problem with css let's see what is this
827:54 - did applied the css
827:57 - example
827:58 - uh
827:59 - full width
828:02 - where is that example full width and
828:04 - okay we have not applied the form
828:08 - so let's do that as well so
828:11 - i think it should be
828:15 - input
828:22 - it should be applied here so so this is
828:25 - class
828:31 - example form
828:34 - so we applied the css as well now let's
828:36 - see so let's go to bookings and
828:39 - still not
828:41 - the
828:42 - thing which you wanted
828:44 - so it says width is hundred percent but
828:46 - someone is
828:47 - actually stopping it from
828:51 - okay so this is hundred percent the
828:53 - stave is hundred percent this is hundred
828:55 - percent
828:56 - okay this is not an impression so
828:59 - mat form filled in fix
829:02 - let's see
829:04 - uh
829:05 - width
829:08 - okay
829:09 - no this is
829:25 - okay this is also says its
829:28 - width is hundred percent someone is
829:30 - actually stopping it
829:58 - uh
830:06 - let's try to do this let's add it in
830:09 - global css
830:22 - okay so
830:23 - not
830:26 - what we wanted it to be so
830:29 - let's remove this
830:31 - and
830:34 - let's remove this classes as well
830:42 - and let's remove this appearance as a
830:44 - little bit
830:45 - uh okay
830:47 - so we have this form filled uh
830:50 - okay so now it is not even applying the
830:52 - material
830:58 - css so let's go ahead and see
831:02 - so we have the styles available here and
831:05 - let's go to angular.json
831:08 - indica pink i'll just remove this
831:10 - bootstrap one for time being
831:12 - and let's restart the server probably
831:14 - they as we are using both it is actually
831:16 - causing a conflict
831:18 - so let's save this
831:26 - event
831:46 - okay let's hope it works now
831:49 - ah okay so i was right so it was it was
831:52 - just due to the conflict because we are
831:54 - using both
831:55 - uh angular material as well as uh
831:58 - bootstrap css so now you can see it has
832:00 - room id and this is this is how you are
832:02 - actually material can component
832:05 - material control should look like
832:07 - uh i am sure other forms is broken now
832:10 - because we were using bootstrap but we
832:12 - can we can actually replace everything
832:14 - with material control we will do that we
832:16 - will do
832:16 - i mean you can try it as a practice for
832:18 - other controls but here we will be using
832:20 - just the
832:22 - um just the material form
832:26 - so let's uh go ahead and add other
832:27 - controls so i'll just remove i'll just
832:30 - keep this but
832:32 - i'll just come
832:35 - okay let's do it for mac
832:39 - uh form field and then we need the input
832:42 - control
832:43 - right so we'll just add this and then
832:45 - we'll replay uh just with multiple so we
832:49 - have a lot of controls so
832:51 - let's do a copy paste as of now and then
832:53 - we will
832:55 - see which
832:57 - control to use right we'll just need to
832:59 - figure that
833:00 - out
833:02 - so we this was the first one uh
833:06 - let's open the model so we have
833:09 - this many controls
833:13 - and let's put it here
833:23 - somehow i think not everything was
833:24 - copied let's see okay room after room id
833:29 - so we need guest email so the next one
833:31 - is type is email
833:34 - guest email and we'll say provide
833:38 - and
833:41 - email
833:43 - did we have name okay sorry so name
833:46 - should be
833:48 - the first one right
833:49 - so we'll use text and
833:52 - let's save it
833:58 - and we'll move this
834:01 - before email
834:03 - now we can have other things uh which is
834:07 - mobile number
834:09 - so this is mobile
834:16 - and then we have checked in date
834:21 - so we'll say okay this is from
834:23 - controlling it but uh interesting uh so
834:26 - check in date and second uh checkout
834:27 - date right we need uh control i mean uh
834:30 - date picker control so we will use date
834:32 - bigger
834:33 - booking status we will uh sit later
834:36 - booping amount
834:37 - looking amount and
834:41 - type is number because
834:44 - it's an amount looking amount
834:55 - booking date it will be again date
834:56 - picker mobile number we already create
834:58 - and then we have guest address
835:01 - city
835:02 - let's do it later because i can see uh
835:05 - i think
835:06 - this can be another form as well
835:09 - so we will see that i mean we can how we
835:11 - can actually
835:12 - uh put this entire thing as a different
835:15 - property as an address
835:17 - so let's see that later on uh let's wrap
835:20 - it by commenting the other controls
835:32 - as we are going to need it so we'll just
835:34 - keep it here and let's see our form okay
835:37 - unexpected tag looks like i compended
835:39 - the form as well
835:41 - okay it's here but
835:42 - something something which is not closed
835:45 - properly yes here it is
835:49 - okay so now we have room id guest name
835:52 - email mobile number booking amount so
835:54 - these are few properties which we have
835:56 - let's enter so we can see okay guest
835:58 - name is something which is getting
836:00 - updated here email
836:01 - is getting updated here mobile number is
836:04 - getting updated
836:05 - uh here and then we have booking amount
836:07 - which is also getting updated just to
836:09 - verify the form i mean if everything is
836:11 - fine or not
836:12 - so done so all these properties are
836:15 - actually mapped to its respective
836:17 - controls right by using something called
836:20 - form control name which maps
836:23 - this
836:25 - input control to the control which is
836:27 - already defined
836:29 - next step
836:31 - we need date pickers let's take it from
836:33 - here so we have something called date
836:35 - picker available here
836:37 - and which gives us some nice state
836:39 - picker so let's go ahead and see the api
836:41 - so it says okay you have to add this
836:45 - you have to add date picker module so
836:47 - let's do that
836:49 - and do we need to do anything else the
836:51 - answer is okay
836:53 - no
836:54 - let's see the uh here um okay no so we
836:58 - don't have to anything we
837:00 - we can just use
837:02 - mat
837:04 - there are okay there are two things uh
837:06 - we also have range
837:08 - do we need range
837:09 - the answer is yes we could we can
837:11 - actually uh
837:13 - provide start date ended by using the
837:15 - range control but let's
837:18 - let's see we will use the date picker
837:21 - so we have two different properties so
837:23 - here mandate picker so let's see how to
837:25 - use it
837:28 - we already have
837:30 - this mat form filled i'll just comment
837:33 - the first one mat form filled
837:35 - from here to here okay
837:40 - okay
837:45 - let's copy this
837:48 - and move this commented
837:51 - thing to here okay
837:53 - so we have mad date picker which is
837:55 - speaker what we need to do is we need to
837:58 - map
837:59 - the uh
838:02 - map the control so we will be using here
838:05 - form
838:06 - control name is equals to we have
838:11 - check-in date
838:16 - and let's format this
838:19 - and let's verify
838:22 - okay so it says uh matt date because
838:25 - center is internal property of input
838:29 - so we added mat date picker
838:33 - module here
838:35 - and it is not saved so you can see there
838:36 - was a white dot line it was it means it
838:39 - was not saved and let's see
838:42 - the form now
838:46 - and there is again some error okay
838:48 - so it says mat date picker no provider
838:51 - found for date adapter interesting
838:53 - because yes we need to set something and
838:55 - it is already provided in the
838:56 - documentation there is nothing uh this
838:58 - error is not wrong because we have uh
839:01 - this
839:03 - you can see here internationalization
839:05 - properly no no provider for data
839:07 - so you can see it is already uh given
839:09 - into the documentation so so it says no
839:12 - not provided for all injectable data
839:14 - it's choosing a date implementation so
839:15 - you can
839:17 - use multiple uh date implementation
839:19 - which is available
839:20 - and what we will do is
839:24 - we will use native one so i can just use
839:26 - mat native date
839:28 - this one
839:31 - module
839:34 - okay i think this is not part of this so
839:37 - let's see from where it is
839:39 - it's part of before let's see if it
839:41 - fixes our issue
839:43 - and
839:44 - bookings yep so you can see uh it
839:46 - doesn't it has nine nice date picker and
839:49 - which you can choose
839:50 - and it
839:51 - shows you
839:53 - uh uh do or
839:54 - allows you to access
839:56 - a calendar right so
839:58 - our date picker so you have available
840:00 - just shows a date you can we can
840:03 - actually change this
840:05 - and say
840:08 - this is
840:10 - chicken
840:11 - [Music]
840:13 - date
840:14 - right so here now label will be changed
840:17 - to check-in date and you can see when
840:19 - you click on this the label goes above
840:21 - it's it's a mobile uh first approach
840:24 - right so whenever you are using material
840:26 - it's a mobile first approach
840:27 - so now we have chicken date and all
840:31 - other controls which are available so we
840:32 - also added and
840:34 - we also added a date picker so we can
840:36 - just go ahead and create all other
840:37 - controls what we will do is we will add
840:39 - all the all other controls and then we
840:41 - will see how our form behaves and then
840:42 - we will add more controls
840:46 - so
840:47 - i have created the forms
840:49 - affiliated with form uh we i have added
840:51 - few more fields for example we have not
840:53 - checked second date checkout date
840:54 - booking date
840:56 - booking amount mobile number and email
840:58 - and guest name and room id which is
841:00 - right now our text box but we will uh
841:02 - change it we will do something like
841:03 - where we click on rooms and then book
841:06 - rooms and the id is actually retrieved
841:09 - from the url which we already know how
841:10 - to do that so here let's
841:14 - do something right so we already have
841:15 - few more fields where we have address
841:17 - city state country zip code
841:20 - and we'll talk about guest account later
841:22 - on so what we will do is we will try to
841:24 - cover as much scenario as possible here
841:27 - so for the second step
841:29 - we will add this address information in
841:32 - our second form
841:34 - you if you are wondering what is second
841:35 - form so we will be will do nesting form
841:38 - nesting which is that one feature which
841:39 - is available inside the
841:42 - angular forms which you can do
841:44 - so
841:45 - uh this form right now as we know that
841:46 - this is a form can have a nested form
841:48 - controls
841:50 - so
841:50 - we will create another group form group
841:53 - inside this existing form
841:56 - but
841:57 - before that let's go ahead and talk
841:59 - about few more things
842:01 - let's go ahead and see how to submit
842:03 - your form
842:22 - okay so we will see how we can submit
842:24 - the form and then we'll be back with
842:25 - some uh few more things for example how
842:27 - to add uh
842:28 - these this message control nested form
842:31 - control then we'll talk about how you to
842:33 - add controls dynamically and then we'll
842:35 - talk about built-in validators
842:46 - so uh
842:48 - let's go back to bookingcomponent.html
842:51 - and to submit the form we have to use
842:53 - the same uh event which we had used
842:55 - earlier if you remember in template
842:57 - driven form we used
842:58 - ng submit so we'll say this assembly
843:01 - submit equals to and i'll say this is
843:04 - add
843:07 - again
843:07 - [Music]
843:09 - right so here
843:11 - let's see
843:18 - let's just uh
843:19 - and then we'll do console.log to see
843:21 - what is the value which we're getting so
843:23 - if you might be wondering how to get
843:25 - this values right now so you can do
843:27 - something called
843:29 - this.booking.bookingform.value
843:31 - and let's verify it right
843:36 - so one thing which i want to show you
843:38 - here is let's say if i enter a wrong
843:41 - format here right so as this is already
843:43 - date picker i mean you can see the
843:45 - validation error is already there and
843:46 - this is how actually angular material
843:48 - shows validation errors
843:50 - it it becomes red so just to let you
843:53 - know in case
843:54 - so uh let's go ahead and see
843:58 - props
844:00 - so before we can submit
844:02 - we need a button as well so let's add a
844:04 - button which we missed
844:06 - and we will be using angular material
844:08 - button now
844:09 - and to do that let's
844:14 - go to material dots right so in on
844:16 - material.angular.io we have lot of
844:18 - components there is a button component
844:19 - as well
844:20 - and we will use this primary button so i
844:23 - can we can just go to example
844:25 - and see the code and let's copy this
844:28 - primary button and put it here
844:31 - which i will put inside another tab
844:35 - and
844:36 - as we are using material button we need
844:38 - to add also the api
844:40 - so we will say import map button module
844:43 - which right now is used inside
844:46 - this one
844:48 - looking module in case i'm using it uh
844:51 - in other forms
844:53 - you can also add it to app module
844:56 - let's go ahead and see uh
844:57 - this compilation is done
844:59 - let's see the form
845:01 - and we have this button available here
845:03 - so
845:04 - everything works even the css works and
845:06 - we'll say uh
845:11 - book
845:12 - room
845:16 - let's go ahead and see in console let's
845:18 - clear everything let's click on book
845:19 - room and you can see you have all the
845:21 - properties right now it's empty because
845:22 - we have not submitted anything let's
845:24 - click uh let's provide the room number
845:27 - guest name
845:29 - provide an email
845:32 - mobile number
845:35 - booking amount
845:39 - and then we will have
845:41 - check in date
845:42 - checkout date
845:44 - and booking date book room and you can
845:46 - see you have all the information which
845:48 - you have submitted so you have booking
845:50 - amount you have booking date book
845:51 - check-in date check-in check-out date
845:53 - this will be the guest name email uh
845:55 - mobile number and room id so everything
845:57 - is available
845:59 - but there is a catch
846:02 - what in case uh so let me show you what
846:04 - what the what is the catch here so here
846:07 - you can also do something like this so
846:09 - you can actually say
846:11 - uh that okay your default value is 2
846:15 - and that and you want this
846:30 - see the api so form select okay so
846:40 - so you can submit
846:41 - a form state which looks like this
846:54 - and
847:01 - we don't have any typings here so that's
847:04 - what the problem is and
847:06 - you can say value and uh a disabled
847:08 - state let's see let's see what happens
847:10 - in this case
847:11 - so your form control will be disabled
847:14 - so you can see the value 2 is available
847:16 - here but the state of this control is
847:18 - disabled
847:20 - so
847:20 - or you can
847:21 - i mean you cannot
847:23 - type anything here so it won't allow you
847:26 - let's now submit that form and see the
847:29 - catch
847:44 - okay so can you see something is missing
847:46 - here
847:48 - let's zoom in
847:49 - [Music]
847:50 - any property which you think is missing
847:53 - yes
847:54 - the answer is room id you cannot see
847:56 - room id available anywhere even in the
847:57 - object
847:59 - even it's in form we are not able to get
848:02 - this particular value which was
848:04 - available earlier
848:07 - this is a this is one thing which
848:10 - is not available when we try to access
848:12 - the value dot value property
848:14 - so
848:15 - try to use
848:16 - another property of form which is known
848:18 - as get raw value so get raw value will
848:21 - also give you
848:23 - the values of the control which are in
848:25 - disabled state
848:26 - so let's clear it
848:28 - let's enter
848:30 - the
848:34 - email
848:35 - mobile
848:38 - kingmont so checking date
848:41 - check out that and booking it
848:45 - and click on book room
848:47 - and now you can see room id is available
848:49 - as well so remember when you submit this
848:51 - submit form and you want to get the data
848:53 - out of that particular form try to rely
848:55 - on get raw value to get the correct
848:57 - values rather than just dot values
849:01 - so
849:01 - this is one thing which we wanted to
849:04 - show you
849:05 - now let's move on and let's add the next
849:07 - part as we said
849:09 - we will be nesting the form what we mean
849:11 - by that
849:13 - so here you can see i have lot of
849:14 - controls right so
849:16 - what we want to do is we want to do
849:18 - something like this so we want to have
849:20 - another form control which says address
849:24 - and then
849:26 - this address contains
849:28 - the values or you can say the form
849:30 - controls
849:31 - and
849:36 - so this is how we want it our form to
849:38 - look like so there will be an address
849:40 - object which will hold uh i can say this
849:43 - is
849:44 - let's remove this
849:47 - guest right so we can say okay this is
849:49 - state
849:51 - country
849:53 - zip code
849:57 - and
849:59 - here we can actually break this into two
850:01 - address line run
850:07 - because most of the i think uh booking
850:09 - form has like address line one address
850:10 - line to address line three
850:12 - so
850:13 - we want this form to look like this and
850:15 - let's verify this form is created in
850:17 - such a way you can see address and yes
850:20 - it is right so you have address and then
850:21 - address contains all this object it says
850:24 - at this line at this line okay i have to
850:26 - mention one address line one address
850:28 - line two city state country and zip code
850:31 - let's
850:32 - see how to render this particular form
850:34 - on our ui right now
850:37 - so the first thing which we need is i'm
850:39 - going to wrap it inside div
850:43 - and let's add a accordion control so
850:47 - here we have something known as
850:51 - let's see
850:57 - expansion panel so angular material
850:59 - contains something known as expansion
851:01 - panel which we can use so we will be
851:03 - using this api
851:05 - and let's go ahead and add this
851:12 - all right so we added my expansion panel
851:14 - and now we want
851:16 - something like this right so where we
851:17 - have we can click and it will just open
851:20 - all the addresses which we have
851:22 - so let's see the code
851:25 - and
851:29 - this
851:30 - is two buttons and
851:33 - these are the form controls right so we
851:35 - will
851:40 - okay let's see
851:44 - okay there is okay this is the expanded
851:46 - collapsible button we just don't need
851:47 - that anyways
851:49 - so we need from here
851:53 - mat expansion panel accordion
852:02 - and let's see
852:03 - i'll just put it as it is and
852:06 - we'll close the accordion
852:09 - and we are also using mat icon so let's
852:12 - add that as well so mad
852:14 - icon module
852:17 - and this is it let's see let's see how
852:20 - our form looks like right now so you
852:22 - have this personal data so we'll let's
852:24 - let's replace all this object right now
852:27 - right away so we will say this is
852:31 - address
852:33 - and here we want to
852:36 - add matte panel description we will
852:39 - remove this
852:40 - or
852:48 - let's remove this mac panel description
852:53 - so we just have a title
852:56 - right so
852:58 - cool sounds looks good and then we will
853:00 - add the other properties inside this so
853:03 - let's start doing that
853:05 - and we will take
853:10 - let's see
853:11 - where is the diff con because that's
853:13 - really important here
853:16 - okay so i'll move this
853:19 - matte accordion inside the diff i'll
853:21 - just tell you why i did this let's first
853:24 - create the form
853:25 - okay so we have this address information
853:28 - available here and let's copy
853:30 - this mat form field
853:40 - i think the closing of
853:43 - is missing and let's try to use this
853:46 - address line one as
853:49 - form control name here and placeholder
853:52 - is address line one
853:55 - so let's format it again
853:59 - okay so what we have done is right now
854:01 - this mat form field anyways does not mix
854:03 - right now it's not used but this is the
854:05 - one which we added right now so we are
854:07 - saying at this address line one is the
854:10 - form control we are looking at but here
854:12 - let's see something
854:14 - which is available here cannot find
854:17 - control with name address line one and
854:19 - you might be wondering i mean this
854:20 - control is available here but can you
854:23 - see if i type anything here it is not
854:25 - getting reflected into this particular
854:27 - control
854:28 - and there is also an error which says i
854:31 - cannot find this control with address
854:33 - line one but you might be wondering okay
854:35 - i mean this particular control does
854:36 - exist here
854:38 - but how it is not available so this is
854:39 - where
854:41 - we have to understand one thing this is
854:43 - another form within a form
854:46 - so to access this particular controls
854:49 - the first thing which you have to do is
854:50 - that's the reason i place this thing you
854:52 - have to use form
854:54 - group
854:55 - name
854:56 - remember we have already used form group
854:58 - here
854:59 - and there can be only one form group on
855:02 - a single
855:03 - oh oh sorry there can be only one form
855:06 - group on a page
855:08 - so this form group is available now
855:10 - anything which you want to add inside a
855:11 - form can be nested form and another form
855:14 - right so
855:15 - it's okay i can create another form
855:17 - using this fb dot group and that can be
855:19 - another form altogether
855:21 - but if i'm adding it inside a form same
855:24 - form it can be form group name now so
855:27 - we'll say okay this form group name is
855:29 - equals to
855:31 - address
855:33 - and we are saying any control which will
855:35 - be available inside this particular tab
855:37 - will be related to the address
855:40 - and you can see the error is gone
855:42 - you will not see any error its address
855:45 - enter the address and you can see it is
855:46 - getting
855:47 - applied to this address line one
855:49 - property
855:50 - similarly we can add address line to
855:52 - city state country and zip code all
855:54 - those controls
855:55 - so now your form looks little bit better
855:58 - right i mean it's it looks much better i
855:59 - would say we can actually uh also move
856:02 - this section the entire section into
856:04 - another accordion or expansion panel and
856:07 - it will look really nice so we we will
856:09 - have list information displayed while
856:12 - submitting the form
856:14 - so uh
856:15 - what we will do is we will add all these
856:17 - controls uh let's go ahead and do that
856:26 - so we have address line 2
856:28 - this is across line 2
856:33 - and what was next city state country
856:37 - so let's say this is city
857:06 - okay and the final is zip code so let's
857:10 - see
857:11 - uh yeah see code or we can we could have
857:14 - just said zip it's absolutely fine
857:23 - let's see the form so we have
857:25 - uh there's no error it means we added
857:27 - all the controls successfully and now
857:29 - let's submit this all together so i'll
857:32 - say okay this is this
857:38 - booking announced
857:40 - chicken date
857:43 - so called date
857:49 - city
857:51 - state
858:00 - right and let's click on book room and
858:01 - now you have all this data available
858:03 - let's see the address one right so you
858:04 - can see
858:05 - the address line one two city pin code
858:08 - everything is available inside and
858:09 - properly
858:12 - formatted address property right so you
858:14 - don't have to do anything so yep this is
858:17 - how you can add nested control and this
858:19 - is how you can do submit let's move on
858:22 - to the next where you will see
858:24 - how to add controls dynamically to your
858:26 - form
858:32 - now let's go ahead and see one amazing
858:34 - feature which is provided by the angular
858:37 - forms we will be adding and removing
858:39 - controls dynamically and we you will see
858:42 - how many uh
858:43 - number of lines of code we have to write
858:45 - to achieve this
858:46 - because it's
858:48 - not that much as we end up generally
858:50 - doing in
858:52 - regular forms in case you have created a
858:55 - dynamic form in past using jquery you
858:58 - will understand the pain
859:00 - or you will understand how easy it is to
859:02 - actually do that i mean sorry for using
859:04 - the term easy because i've been doing it
859:06 - from a long time maybe it's easy for me
859:08 - but yeah you will understand at least
859:09 - the basic
859:10 - difference in the api both angular and
859:13 - other uh
859:15 - sorry other
859:16 - framework has to offer so let's go ahead
859:18 - and do that what will be the scenario
859:20 - what we are going to do here
859:22 - so
859:23 - we will add a functionality where
859:25 - now while booking
859:27 - of course it's possible right you can
859:29 - have a number of guests you can have
859:31 - more i mean three for whatever number of
859:33 - guests you want to
859:35 - so we will provide a functionality where
859:37 - you can just click on a button which
859:38 - says add guest and it will add more
859:41 - controls as you go
859:43 - right so here
859:45 - rather than guest count
859:47 - i'll say this will be guests
859:51 - which will be this dot fb dot array
859:54 - so we are saying now the control which
859:56 - we are supposed to provide will be area
859:58 - of controls not the
860:01 - uh
860:02 - group so it won't be a nested form but
860:04 - it will be a nested form
860:06 - array of a form
860:07 - so here we can do something like this so
860:10 - you can pass like
860:12 - one two three
860:14 - something like this right so you can
860:16 - pass a number of values here or we can
860:19 - also pass
860:21 - this sort
860:22 - fb dot group
860:25 - but not control
860:30 - and
860:31 - here i can say okay this is the guest
860:33 - name so it's
860:38 - let's add the controls so we have guest
860:41 - name what what we generally uh what are
860:43 - the information we generally take so we
860:45 - take name
860:46 - age
860:48 - right so let's say this is new
860:50 - form control
860:54 - remember you can just use whatever way
860:56 - you like you can also mix both but
860:59 - follow one i generally use this form
861:01 - control to get the intellisense part
861:03 - running so uh yeah so we get the guest
861:06 - name we get age
861:08 - uh what
861:10 - else
861:12 - i think this two is enough let's see
861:14 - as of now so
861:16 - let's verify this one form
861:20 - so there is no error but you can see
861:22 - guest has this array right so if you
861:24 - have guest name and h it means
861:26 - this area of
861:28 - a control has actually two controls
861:30 - available within it and we can have ad
861:33 - we can add n number of it let's do one
861:35 - thing let's add a button first
861:38 - so remember one thing uh the this div is
861:41 - there for reason so i'm not going to add
861:44 - this new controls inside this as uh as
861:46 - they don't belong there they belong to
861:49 - uh this form right so this booking form
861:51 - so i have to add it inside this form
861:55 - right so
861:56 - i'll just do it after this particular
861:58 - div
862:03 - and here i'll pop this button
862:06 - and i'll say this is
862:08 - add
862:11 - guest
862:12 - and
862:13 - this will be type
862:16 - of button because remember if i don't
862:19 - give a type it will also submit the form
862:20 - which we don't want to we can have only
862:23 - one submit button within a form
862:25 - and on click of this button i want to
862:28 - add guest
862:31 - so let's uh go ahead and see do this
862:34 - we'll write this functionality first
862:37 - so let's add
862:38 - guest and here you can do something like
862:41 - this
862:43 - what we can do is we can create a get a
862:45 - property here
862:47 - so i'll say this is guests
862:50 - is equals to
862:52 - this.bookingform.get
862:54 - you can see this
862:56 - you can actually access any controls by
862:58 - using this api which is available inside
863:00 - angular reactive forms so we can say
863:02 - bookingform.get
863:04 - guests which is referring to this and we
863:06 - will type cast it as form array we will
863:09 - tell that okay this is an array this is
863:11 - not a single control or this is not a
863:14 - nested form
863:15 - so once this is done we can do something
863:17 - like this so we can say this dot guests
863:19 - dot
863:21 - add
863:28 - [Music]
863:35 - okay let's see the set controls set
863:38 - validator status test
863:41 - okay so we can say controls
863:44 - dot
863:44 - push
863:46 - okay so we will be using this controls
863:48 - dot push to push a new control so we can
863:50 - actually do something like this
863:54 - so
863:55 - as this is and
863:56 - what we can push we can either push a
863:58 - control or we can push a group
864:00 - so right now it's not of course it's not
864:02 - the control which we are looking at we
864:03 - are looking at a group so let's save
864:06 - this and let's verify the functionality
864:08 - first
864:11 - okay there is some error let's see what
864:13 - is this cannot read property of
864:15 - undefined of get let's see why
864:18 - the start
864:22 - because
864:24 - this
864:40 - what i'm doing
864:49 - and we have to say pretend
864:53 - okay sorry i've had written some wrong
864:55 - syntax for getter which
864:58 - changed why did that so we have getter
865:01 - um guess so now let's go ahead and see
865:04 - get from http no we don't want this kit
865:06 - from http we want to use getter
865:09 - let's go to booking and we have this add
865:12 - guest available here right so right now
865:13 - of course we have not added this uh or
865:16 - we have not rendered this particular
865:18 - form group or sorry for mary on to our
865:20 - view so we can click here
865:22 - uh on add guest
865:26 - okay
865:27 - something happened
865:36 - and guessed why it is not doing anything
865:43 - one click now we have add guest
865:47 - let's see if it is doing something
865:48 - strange no
865:52 - guest dot controls dot push
866:19 - by that actually we need to add it
866:22 - to this area so guest dot push because
866:25 - we don't want to go inside the controls
866:27 - let's see if it works
866:34 - let's click on add guest and you can see
866:36 - we are able to add the guests
866:39 - so
866:40 - still they are not rendered but yes we
866:42 - are able to actually add those uh
866:45 - controls dynamically
866:46 - right so this is something which we uh
866:48 - we are doing uh we are actually adding
866:50 - this controls with a single line of code
866:52 - remember this
866:53 - so if you count this as a line another
866:56 - line so two lines of code right so we
866:58 - are doing it in two lines of code now
867:00 - let's go ahead and do the next part
867:02 - let's go ahead and add it
867:03 - uh
867:04 - on your form right so we need to render
867:06 - this on your on the form at the end so
867:09 - again
867:11 - we'll start it with a div
867:14 - and here we will do something like form
867:17 - array name because we have already uh
867:20 - sorry we don't have this as a form group
867:22 - we have it's an array so we will say
867:24 - okay this is the guests
867:27 - area which we are looking at
867:29 - and now here we have to
867:31 - go ahead and
867:32 - add multiple so uh i'll just let me just
867:35 - write this code and then we'll talk
867:37 - about this so here uh
867:40 - not the guest form but
867:41 - [Music]
867:43 - we'll say looking form uh let's
867:46 - write this and then we'll talk about it
867:49 - or
867:50 - it's not
867:51 - we already have this
867:53 - guests
867:57 - dot controls okay
867:59 - and let's remove let's
868:02 - do this
868:04 - form
868:05 - control name
868:06 - i will say this is
868:14 - this is stiff and let's remove this
868:18 - it's
868:23 - and here we wanted another div
868:29 - where we will use form
868:32 - group name
868:33 - is equals to i uh so let me just
868:36 - complete this code and then we'll talk
868:37 - about
868:38 - what i have done
868:40 - and
868:41 - ctrl x remove this extra controls
868:44 - and let's see if we have matching divs
868:47 - so this dave closes here this dave
868:49 - closes here this div does not close
868:52 - anywhere so we need to
868:54 - close this div and okay now it's look
868:57 - fine it looks fine
869:02 - and here we will put uh from uh so what
869:05 - is the first property which we have
869:06 - inside guest so it's a guest name
869:10 - from control name is the guest name
869:15 - and we will
869:18 - use
869:19 - this
869:20 - and similarly we will place another form
869:24 - field
869:25 - which is
869:26 - of type age and which is h and which is
869:29 - of type number
869:36 - and let's go again
869:38 - so let's go ahead and see it so you've
869:40 - got guess the email is sent or something
869:42 - and uh looks looks like there is an
869:44 - error so it says okay uh cannot find
869:47 - controls with path guests i and guest
869:50 - name
869:51 - let's go ahead and see
869:53 - what it is referring to so
869:55 - we have a form area name guess
869:59 - and we are saying within each
870:01 - control go ahead and loop over this
870:04 - then we have form group name and this is
870:06 - where the problem is we have to put it
870:09 - in box we'll talk about that as well
870:12 - let's enter and
870:14 - done right so we have our
870:16 - uh
870:17 - form
870:18 - working right now let's click on add
870:19 - guest and you can see you have another
870:21 - form control
870:22 - which is again you can see the value
870:25 - available here click on again another
870:27 - guest
870:30 - right and you can just see it is it is
870:33 - in working state so we created the form
870:35 - of course we created uh this controls
870:37 - dynamically but we need to
870:40 - discuss about this what we have done
870:41 - here i mean this is really important to
870:43 - understand this we know that okay we are
870:45 - referring to
870:46 - that okay this
870:48 - guest is in one of the for for mary
870:50 - which is available inside the form
870:51 - that's why we did this what is this
870:53 - logic what is this magic
870:56 - so let's go ahead and talk about it
870:58 - let's go to the booking component
871:00 - so here what we have is uh
871:03 - yeah
871:04 - so what we are doing here here first so
871:06 - let's try to understand this so we are
871:07 - saying
871:09 - now this array this is an array how we
871:11 - deal with array in angular we have seen
871:13 - that okay in case i want to access an
871:15 - area of controls or sorry array of
871:17 - values generally we end up doing or end
871:20 - up writing ng for so this is the same
871:22 - thing which we are doing here so we are
871:23 - using ng4 we are saying
871:25 - go ahead and loop over
871:27 - each and every control which is
871:29 - available inside this array you guys
871:31 - said it
871:32 - then this part is clear and then we are
871:34 - using the index value
871:36 - for next line of code which is available
871:38 - here so form group name
871:40 - so remember
871:41 - let's try to understand the structure
871:43 - so we have a form group the main form
871:46 - group then we have format and then
871:48 - inside that form area we also have a
871:50 - form group
871:52 - so
871:54 - technically i have to go ahead and use a
871:56 - form group name again here but do we
871:58 - have a form group name the answer is no
872:01 - right we don't have a form group name we
872:02 - are actually just adding a form group
872:04 - here
872:05 - it doesn't contain a name so i had to
872:07 - create
872:08 - a form control name dynamically so i am
872:10 - saying okay this i will help me to
872:13 - control that form group name dynamically
872:15 - because form group name should be unique
872:18 - so it starts from 0 1 2 so that's how it
872:22 - this line will help
872:24 - now once we know that okay this is form
872:26 - group name each row will have its own
872:28 - unique name
872:29 - the next thing
872:31 - which is pending is your controls then
872:34 - we are just placing this controls inside
872:36 - this particular mat form field
872:38 - and that's it
872:39 - we are done so this is what this code is
872:42 - so similarly in case you want to add it
872:44 - in your case of course you have to do
872:46 - the same line
872:48 - nothing will change
872:49 - so
872:51 - once this is done sorry
872:53 - let's go ahead and see
872:55 - we have this control let's put it inside
872:57 - same accordion right so
873:00 - let's try to do that
873:06 - and i'll remove this commented code now
873:08 - we don't need it
873:13 - so this is our
873:15 - matte accordion
873:17 - mat expansion panel
873:21 - let's put it
873:23 - on top of formatting name
873:26 - and that's right
873:28 - and then we had
873:31 - some closing
873:32 - mat
873:33 - expansion panel and accordion
873:35 - so we'll put it here
873:38 - so
873:39 - this added this ends here this ends here
873:42 - okay
873:49 - and
873:50 - rather than address we'll say this
873:55 - let's see
873:58 - done so we have guests and you can add
874:00 - number of guests
874:02 - so within this
874:04 - accordion also right so you can create
874:05 - multiple panels if you want to
874:07 - that
874:08 - uh it should be guest one guess two
874:11 - guess three something like that we can
874:13 - do that as well
874:14 - so try it by your own otherwise we will
874:17 - add an example so here we will say guest
874:19 - whenever you click on guest it will say
874:21 - guest one guess two three something like
874:23 - that
874:24 - so we are done uh adding the dynamic
874:26 - controls as well
874:32 - we will talk about one more api uh which
874:35 - is
874:36 - very useful
874:37 - in case uh you want to add some extra
874:40 - fields
874:41 - so let's take an example let's say uh
874:43 - there is an optional field
874:45 - to add a passport
874:47 - okay so let's add a form and let's add a
874:50 - button here on top
875:04 - and we'll say this is that
875:08 - passport
875:23 - and let's implement this function
875:32 - so we only want to add passport in case
875:34 - uh we click on this button right it's
875:36 - optional so what we can do is we can
875:38 - just add this dot
875:45 - let's see the
875:47 - api first so we have something known as
875:49 - add control and remove control in case
875:50 - you want to remove that particular
875:52 - control
875:53 - so here
875:58 - we can say this dot your form name so
876:01 - this is booking form dot add
876:03 - control and
876:05 - as it says control so we'll be using
876:07 - adding one control so we can say okay
876:09 - this control name is passport and we can
876:12 - choose to have a default value
876:14 - right so let's go ahead and see
876:20 - so of course it's not available here
876:22 - right now
876:23 - let's
876:23 - click
876:24 - on
876:26 - the button
876:27 - and for that we have to save this
876:31 - form
876:35 - and let's see so we click on add
876:36 - password and you can see a new form
876:38 - control called passport is available
876:40 - here
876:41 - so this is just in case we need some
876:43 - extra information right so you can
876:45 - actually do that by using the add
876:46 - control api which exists
876:50 - you can remove the same using
876:52 - remove control but let's let's see how
876:55 - to bind it because
876:56 - but in case this control does not exist
876:59 - right
877:00 - so here let's see we how we can add it
877:06 - so i'll just add one mat form filled
877:10 - and we'll say this is
877:12 - passport
877:17 - and we'll say this is the control name
877:19 - is passport
877:22 - and place folder name is passport number
877:26 - but if i try to add this right now let's
877:29 - see
877:37 - so if you try to add this right now we
877:38 - will get an exception because right
877:40 - currently this form control does not
877:42 - exist
877:44 - right so it does not exist and it will
877:45 - throw an exception if you click on the
877:47 - password
877:48 - and now enter
877:49 - as there was already an error it will
877:51 - not work
877:52 - how to handle this scenario
877:55 - so we can use
877:58 - ng
877:59 - right so we can say
878:01 - in gf we can say okay this dot sorry not
878:05 - this
878:06 - booking form
878:11 - dot
878:13 - control
878:14 - dot
878:34 - okay let's see which
878:36 - api we have contains that value get
878:39 - value
878:59 - dot as control i think
879:06 - so here we can just check
879:10 - get
879:12 - and
879:13 - put the control in
879:15 - so we can use this get method to uh
879:18 - get access to any control so in case
879:20 - this particular control exists
879:23 - then show go ahead and show this
879:24 - otherwise don't
879:26 - so let's see if it works
879:30 - and now we don't have any error click on
879:32 - add passport provide the password
879:34 - information it works so this is how you
879:36 - can handle uh such scenarios where you
879:38 - want to add a control dynamically and
879:40 - you want to render it adding is okay
879:42 - right we saw that okay we can just add
879:44 - it but how to render it so you have to
879:46 - go ahead and check
879:47 - first whether the control exists if it
879:49 - exists go and then add the control
879:51 - otherwise tone
879:52 - so using this code uh you can also
879:54 - remove
880:00 - i can say delete
880:02 - passport
880:06 - and here
880:08 - we can call the other api
880:11 - remove control so first i have to check
880:14 - whether the control exists so i can say
880:16 - if
880:17 - if
880:21 - this dot
880:22 - booking on dot get
880:26 - the control name
880:28 - uh passport then go ahead and remove the
880:30 - control
880:32 - so let's see
880:34 - and
880:35 - we have to save the form as well okay it
880:37 - is safe so we have add password delete
880:39 - password and the functionality works as
880:41 - expected right so you can see it's it
880:44 - it's not like it's only getting deleted
880:46 - from uh ui right it's getting actually
880:48 - deleted from the form
880:50 - so
880:51 - platform
880:52 - add password delete password and we are
880:54 - done
880:55 - one more thing uh as we are already
880:57 - talking about the reactive form or sorry
880:59 - dynamic forms here also right we have
881:01 - multiple guests
881:03 - and we can add as many as one we want
881:06 - but what in case you want to delete y
881:08 - card so we added one extra what can you
881:10 - do right now nothing you can do you
881:12 - probably have to reset the form
881:15 - so let's see uh let's cover cover this
881:17 - scenario as well
881:19 - so to remove our control from the list
881:21 - of controls we need the specific
881:24 - index from where you want to delete the
881:26 - control remember this keep this in your
881:28 - mind
881:29 - so what we will do is
881:31 - we need access to this form group so we
881:33 - need access to this eye actually
881:36 - so
881:37 - i have to add this button inside this
881:40 - div
881:40 - so here we'll add one more div which
881:42 - will say
881:43 - button and i'll say remove guest so this
881:46 - is remove guest button which we have
881:48 - added
881:48 - and let's implement and we are passing
881:50 - the site we are passing the index from
881:52 - where we want to remove the control
881:54 - so here right we can go to
881:56 - [Music]
881:58 - remove cast
882:00 - and
882:04 - yeah so
882:06 - we can just do this dot guess dot uh
882:08 - remove at so we can pass the uh
882:12 - pass the index which we are receiving in
882:13 - this function so we are saying i which
882:16 - is of type
882:18 - number
882:19 - and we will pass this index here
882:22 - and
882:24 - the control will be removed from the
882:26 - array
882:29 - so every uh row so here we will see
882:31 - every row will have a remove guess
882:33 - button so as we add one more
882:36 - add one more and it remembers from which
882:38 - index it is removing the control right
882:40 - so if i remove let's add some
882:43 - text here
882:45 - and if i remove this one it remembers
882:47 - that i had removed one the first one so
882:49 - it will not change the values remember
882:51 - this
882:52 - and you can add one as many as you want
882:54 - and then remove as many as you want you
882:57 - can remove all and then add more
883:00 - so this is how you can actually
883:03 - do dynamic stuffs with this particular
883:05 - api so what we learned we learned about
883:08 - the form array we learned about how you
883:10 - can add multiple uh sorry controls
883:12 - dynamically using form array then we
883:13 - also learned about how you can add done
883:16 - controls dynamically using add control
883:18 - and then you can remove them using
883:19 - remove control and then similarly we saw
883:22 - how you can remove controls from an
883:24 - array
883:24 - one more thing uh you might be wondering
883:28 - that okay this code
883:29 - and this code looks same yes they do
883:32 - look same so what we can do is we can
883:34 - actually go ahead and
883:35 - export this so we can just go ahead and
883:37 - say right factor and we can say
883:42 - let's
883:42 - create a method let's create a function
883:44 - so i'll call this function as
883:47 - add
883:49 - rest
883:51 - okay
883:52 - and
883:53 - let's see
883:57 - okay somehow it got added inside this
884:01 - for some reason
884:06 - okay
884:09 - something wrong here i think
884:19 - i had guest function already exist and i
884:20 - just named it the same
884:23 - so we'll say refracted
884:26 - [Music]
884:28 - accept
884:31 - to inner function in method no i want to
884:34 - actually extract it in the function
884:36 - let's write it
884:38 - add the guest
884:41 - control
884:44 - and here we'll just use this code
884:48 - and we'll see
884:50 - written
884:52 - return
884:55 - written and here we can add this dot add
884:58 - guest one rule
885:01 - and similarly we can let's format
885:11 - we can use the same line
885:13 - resort and guest control here
885:20 - let's verify so we have we don't have
885:23 - any errors
885:24 - uh the guess
885:26 - is available here let's add and see if
885:29 - the value is available here and it is
885:31 - and let's click on multiple guests and
885:34 - that's it so we don't have code
885:35 - duplication as well now in this
885:37 - particular code base
885:39 - now what we will do next is we will add
885:40 - some validation right now there is no
885:42 - validation we completed our form we
885:43 - wanted uh
885:45 - we want we added all the controls which
885:46 - we needed to create a booking form and
885:50 - uh let's go ahead and add validation now
885:52 - because you can see i can just go ahead
885:53 - and submit without anything and
885:56 - you can see it said it's all empty
885:59 - values all over there
886:04 - now we will add the validation to our
886:06 - form but right now we don't have any
886:07 - validation so let's see how we can add
886:08 - validation to
886:10 - reactive forms we have already learned
886:12 - it for temporary driven forms remember
886:14 - we can just use html5 validation so in
886:17 - case of
886:18 - temp sorry
886:20 - in case of reactive forms let's see how
886:22 - to do it
886:23 - so
886:24 - it is actually a second parameter which
886:26 - is available here you can see uh you can
886:29 - see the typings so it says uh the second
886:32 - parameter is validator or options you
886:35 - can actually pass it something like this
886:37 - you can say validators
886:39 - and then there is a class called
886:41 - validators remember validator was an
886:44 - interface which we used in previous
886:47 - video while talking about adding
886:51 - a custom validation to a template driven
886:53 - from
886:54 - here we are talking about validators
886:56 - class which comes from angular slash
886:57 - forms
887:00 - and it has all the validations uh
887:02 - built-in validations which we have seen
887:04 - in
887:05 - html5 validation
887:07 - so you have main
887:08 - max required everything so let's see how
887:11 - to use them
887:12 - so here we are saying okay validators
887:14 - validators dot required and similarly
887:16 - you can also add it here in similar
887:19 - fashion you can say okay validators dot
887:21 - required and
887:22 - i am using two validations here uh which
887:24 - is validators dot required and then we
887:26 - are also using email
887:28 - else what else we can apply uh
887:31 - you can also play with min max so let's
887:33 - uh
887:34 - check we can have guest name
887:39 - as
887:41 - validators dot required and then we can
887:44 - also have
887:46 - a mill length of
887:48 - 5.
887:57 - and let's go ahead and see our form
888:01 - so here you can see a
888:04 - star
888:06 - so at some places uh or some
888:10 - properties you will be able to see a
888:11 - class available here sorry a star
888:13 - available here it's actually you don't
888:15 - have to do anything with angular
888:16 - material uh whenever you add validation
888:19 - you will also will get this star when
888:21 - it's default behavior
888:22 - and
888:24 - it tells you that okay this form is not
888:25 - valid right now and it's easy to figure
888:28 - out the validation error as well right
888:30 - we added it for guest name and email
888:34 - and
888:35 - for room id
888:38 - right so which is already
888:39 - true
888:40 - and you can add more validators as you
888:42 - want so the validators
888:45 - are a different type of validity
888:47 - validators which we have has been
888:49 - matched required required
888:51 - so i mean i'm sure you know uh the
888:53 - others because they are same as we
888:54 - discussed about
888:56 - by working with template driven forms
888:59 - let's see required true so for required
889:01 - rule it's like
889:02 - let's say if you have a check box right
889:05 - so let's actually add a checkbox
889:08 - and we will
889:10 - go to material and we'll see how
889:13 - checkbox
889:15 - can be used
889:16 - so here uh
889:18 - c
889:20 - so we have a different api for match
889:23 - match checkbox
889:24 - let's add this
889:31 - remember why the reason i always refer
889:34 - i'm referring to the documentation is to
889:35 - make you a habit of referring to the
889:37 - documentation whenever you are working
889:39 - with any ui control
889:41 - because
889:43 - there are chances that in some
889:45 - like in next release
889:47 - they can add something extra and
889:50 - if you get into some issues you will be
889:52 - able to easily figure out that issue by
889:54 - by using the documentation
889:56 - so now we have this checkbox available
889:58 - let's go ahead and add
890:00 - our checkbox so we will say match
890:02 - checkbox and
890:05 - rather than uh
890:07 - using this
890:09 - let's add a property first
890:11 - and
890:13 - we'll see this is
890:16 - pnc right so terms and conditions
890:20 - which is
890:27 - new form control
890:30 - and we'll pass false and then we'll pass
890:33 - required to so before you can proceed
890:36 - with the form you have to submit or
890:38 - select this tnc so we will place it
890:42 - after this
890:46 - match box we will not use ng model
890:50 - so we will not use ng model but we will
890:52 - use form control name as we saw
890:55 - and
890:56 - we will say this is t and c
890:59 - t and c terms and conditions let's see
891:05 - so you can see
891:07 - you have this checkbox available here
891:09 - now so we have to check this check
891:12 - this box uh to proceed with i mean
891:16 - to proceed with submitting the form but
891:17 - we have not added that check as of now
891:20 - let's go ahead and do that so we now add
891:22 - some validations but our form is still
891:24 - we will be able to submit our form so
891:26 - let's use the same approach we used
891:28 - earlier so we'll say disabled and then
891:30 - you can say this is booking
891:34 - okay somehow
891:38 - typing is not working for this
891:40 - dot
891:42 - keep it disabled in case the form is
891:44 - invalid the same things the same
891:46 - controls are same properties are
891:48 - available here so now you can see the
891:50 - book room is invalid let's provide all
891:54 - the values
892:00 - mobile number i mean these are not
892:03 - required values so we'll just move on to
892:05 - tnc and
892:07 - okay guest name should be five character
892:09 - and you can see the button becomes valid
892:12 - and you can click it now so we have some
892:14 - validations in place
892:16 - and we have added a required true
892:18 - validator as well
892:20 - and
892:22 - now you can play around with other
892:23 - validations uh
892:25 - in uh so you have been max email we
892:27 - already added
892:28 - we have pattern in case you want to uh
892:31 - have a control where you have some
892:32 - rejects
892:33 - you can also apply the pattern property
892:35 - as well
892:37 - so this these are few built-in
892:38 - validators and now let's move on to
892:41 - creating our own validator
892:44 - before we learned how to submit the
892:46 - forms right we also added the validation
892:48 - now for pert reset
892:50 - right so we have not seen that scenario
892:51 - so as of now
892:53 - we know how to uh do reset we already
892:55 - learned about if that if you remember we
892:57 - did it for template driven forms
893:00 - so let's go back to the code and see how
893:03 - we can do it so we will go to our ad
893:05 - booking method and here you can do
893:08 - something like this so this dot booking
893:09 - form dot
893:11 - you can call reset so you can see you
893:13 - can pass all the values so it's a value
893:15 - is optional so by default it will just
893:17 - make everything to null which we don't
893:19 - want to so
893:20 - you can
893:21 - provide the values for each and every
893:24 - control which we have available here
893:27 - so let's do that
893:29 - here
893:43 - so remember we are providing the values
893:45 - not the control value right so we
893:47 - can just have the default values for
893:49 - each and every
893:50 - control
894:00 - and
894:02 - this
894:02 - is guest name
894:05 - here we will just remove this
894:08 - and put a curly bracket
894:32 - here we can just pass an empty array we
894:34 - don't want anything to be available
894:37 - and in dnc we can just say false
894:41 - so let's go ahead and verify so we are
894:43 - using reset
894:44 - method
894:49 - let's provide the values so we can say
894:50 - okay this is
894:52 - tom
894:53 - oh we need five characters so let me
894:56 - just enter my name
894:57 - okay i just
894:58 - spread my name down okay
895:00 - uh
895:06 - we'll just use the uh
895:09 - values which are required rights and
895:11 - let's do that let's save it and you can
895:13 - see now the values are actually
895:16 - it's back to the original state so we
895:18 - know we have like default values
895:19 - available here right now right so
895:21 - whatever we pass so you can see uh tnc
895:24 - let's say tnc tnc is false
895:26 - guess as we said it's an mtr
895:29 - address again we pass some default
895:32 - values
895:33 - and this is how you can reset the form
895:34 - one thing which we have not seen so far
895:36 - is
895:38 - what what is missing what do you think
895:42 - so we have not seen how to uh validate
895:45 - the controls
895:46 - uh sorry how to show the errors on
895:48 - control level remember this is some one
895:50 - thing which we did it uh with
895:53 - template driven form here for example uh
895:55 - the guest name is required but it also
895:57 - has a limit right so it has a max
896:00 - mill length property which says it
896:01 - should be at least five character so
896:04 - let's go ahead and see how we can
896:05 - actually add those validation messages
896:08 - here
896:09 - so uh now let's see how we can add
896:11 - control level validation we already have
896:13 - some code available here so we'll uh
896:15 - uncomment and we will talk about it so
896:17 - let's see uh
896:18 - angular material also has something
896:20 - known as mat error so if i go to
896:22 - material
896:24 - dot angular dot io and components
896:27 - and let's see is it's part of form
896:31 - filled and you can see it's and there
896:34 - should be an example this one
896:37 - form filled with error messages
896:39 - and it has something called mat error so
896:41 - which we are going to use
896:43 - to show the error so you can see it says
896:45 - not a valid email
896:47 - so here let's do it let's copy this and
896:50 - move it to
896:52 - guest name right so we have uh
896:54 - check that it should be minimum
896:56 - 5 characters and how the way you can do
896:59 - it is
897:02 - let's copy this
897:06 - so it has a
897:07 - api so this booking form
897:10 - has an api where you can check has error
897:12 - method so here let me just remove this
897:14 - because we just needed one validation we
897:16 - don't need both
897:18 - and has error which is min
897:21 - length
897:28 - experiment
897:34 - and we can
897:37 - let our users know that okay in case it
897:40 - has a main length error
897:42 - we can say please
897:46 - guest name
897:49 - should be
897:50 - [Music]
897:52 - five
897:53 - characters
897:55 - should be minimum
897:59 - five characters
898:02 - right so let's go ahead and test this
898:05 - and then we'll add few more validation
898:11 - and guest name so let's see
898:16 - okay somehow it's not available
898:18 - let's
898:21 - is that not saved
898:24 - let's see here probably it has to do
898:26 - with booking form dot
898:29 - uh errors
898:50 - ah okay
898:53 - so uh you can see here uh we are
898:55 - actually looking at the booking form
898:57 - which is not true uh because this mill
898:59 - length is available with this particular
899:01 - control and let's see we can how we can
899:03 - do that so you we can do something like
899:04 - this so working form dot get
899:07 - and you have to say uh the control name
899:10 - so which is
899:12 - guest name
899:13 - and then we can use
899:16 - has error so we will use as it can be
899:19 - null
899:21 - let's see all right so we can actually
899:24 - do something like
899:25 - let's print this
899:28 - dot errors let's put question mark so in
899:31 - case it's
899:33 - not null
899:34 - and
899:36 - that's it let's see
899:41 - so it says object object right now and
899:44 - the reason being it's actually an object
899:47 - so uh let's see uh we'll just do json
899:50 - because it's right right now require
899:52 - true and you can see now it has mean
899:54 - length error so
899:57 - uh m
900:01 - small
900:03 - and we should not
900:05 - have this error message
900:09 - you can see guest name should be minimum
900:10 - five characters so we are able to
900:12 - display the error
900:15 - based on your current control remember
900:17 - this so
900:18 - uh
900:19 - we'll remove this one command this one
900:22 - so you can what you can do you can just
900:24 - so use a booking form to get the control
900:26 - and then use has error method to and
900:29 - check if
900:30 - it has this specific error
900:32 - and that's it that's what you need to do
900:34 - so now
900:35 - uh if i try to move and
900:38 - if i enter less than five characters i
900:39 - know the exact error that okay guess
900:42 - name should be minimum five character so
900:44 - i have to enter one more character
900:47 - now
900:49 - you might be wondering okay this is okay
900:50 - i mean this is my top level control what
900:53 - in case i want to validate this address
900:55 - line one address line two how to
900:57 - mention
900:58 - uh the errors based on the control
901:01 - so let's go ahead and do that as well
901:03 - and we will do it for errors
901:05 - so here let's first add the validation
901:12 - so we will add
901:15 - validators required and let's add it to
901:19 - few more controls
901:20 - so we have cp
901:26 - and let's add it to state
901:31 - so three a few more controls which are
901:33 - required now
901:36 - and you can see okay the validation is
901:38 - already applied so
901:40 - that's not an issue
901:41 - now let's go back
901:44 - and see how we can show that error so
901:47 - we'll be using mat error
901:51 - and let's go to the address so address
901:53 - status line one here
901:55 - uh we will add mat error here and we
901:58 - will say
901:59 - now you have to actually combine this so
902:01 - you have to say address
902:04 - get
902:05 - address dot
902:09 - address line one
902:12 - and has error uh let's say required
902:16 - and we can say our address
902:20 - design
902:24 - fun
902:25 - is it quiet let's see
902:34 - oops this is fine
902:37 - so you can uh see uh it says
902:43 - so you can see it says address line one
902:45 - is required right so we just added this
902:49 - this validation so remember
902:51 - for top level it's
902:54 - booking or whatever form name you have
902:56 - dot get and the control name
902:58 - for
903:00 - nested form you have booking form dot
903:02 - get
903:03 - your
903:04 - form group name dot your control name
903:07 - and then whatever error you are looking
903:08 - at
903:09 - now how about the inner sorry array
903:12 - right so for array
903:14 - now we uh we do have your form group
903:16 - name but we also have form area name
903:19 - so let's see
903:23 - we will add for guest name
903:25 - let's go ahead and
903:27 - add this
903:31 - guest name and we'll say this is
903:36 - validators
903:44 - let's copy this
903:53 - so we have this
903:54 - guest name as required and let's see if
903:56 - it is required
903:59 - and yes that is required now let's go
904:01 - ahead and add the validation so here we
904:03 - can
904:04 - let's copy this matte error thing again
904:08 - matte error
904:12 - come back inside form and this is mat
904:14 - form fit where we want to add this edit
904:16 - so here now it will be little bit
904:18 - different
904:19 - so now because this is an array so the
904:22 - thing is you have to pass it something
904:24 - to pass it like this so first is
904:26 - your form area name
904:29 - comma
904:38 - and well
904:42 - so but
904:51 - already
904:52 - it's first is your
904:56 - guess
904:57 - so this will be string
905:00 - then
905:00 - form group name which is i
905:04 - and the third one will be your control
905:07 - so which is guest name which is again
905:09 - string
905:10 - let's format this
905:13 - so we have guest i and guest name and
905:15 - then has required
905:18 - let's see
905:22 - to guests and
905:24 - you can see uh right now of course we
905:26 - just copied the same so we can say
905:31 - request
905:34 - name
905:37 - is required
905:41 - and let's try to enter
905:42 - delete it
905:44 - and move on and you can see the guest
905:46 - name is required so this is how you can
905:47 - actually display the control level
905:49 - validation based on
905:51 - what field you are trying to validate so
905:54 - we
905:55 - started with the top level controls then
905:57 - we went to the to the nested form and
905:59 - then finally we went to the array so ah
906:02 - this is from the uh this is it from the
906:05 - validation part because the sorry
906:07 - built-in validation part so we learned
906:08 - about uh how you can reset your form and
906:11 - how you can
906:12 - uh go ahead and add the control level
906:15 - validation
906:17 - we are going to talk about two important
906:20 - apis which is available with angular
906:22 - reactive forms which is known as patch
906:24 - value and set value so first let's
906:25 - understand where it is
906:30 - useful so right now we have this form
906:33 - let's say what in case we have this
906:36 - form values coming from some api
906:39 - how to bind that value here
906:41 - so let's try to do that first
906:46 - so let's say we have
906:49 - um
906:50 - get
906:51 - um looking
906:53 - data this is a method
906:56 - so we can achieve it in by using two
906:59 - values two apis the first is uh patch
907:02 - and second is set
907:04 - so i mean first is set and the second is
907:06 - patch so we'll talk about both so let's
907:08 - see how set behaves set value and then
907:10 - we'll see
907:11 - what patch values can do first so here
907:14 - we can use this dot
907:16 - booking
907:17 - form dot
907:18 - set value so this is the api
907:22 - and it
907:24 - takes
907:25 - so if you see this
907:26 - the api
907:31 - so it says values and it says key
907:33 - and value right so remember this key so
907:36 - key is the form control name which we
907:38 - have and then this is values and then
907:39 - you can pass some
907:41 - other values which we'll see
907:43 - which we don't want to see right now but
907:45 - yeah so here you can
907:48 - pass the default values
907:50 - let's say it's coming from back and
907:52 - right so
908:02 - second date
908:09 - right now it will fail but let's see
908:18 - and
908:19 - let's call this after our form is
908:21 - created so this is where we will call
908:24 - this this red uh get booking data
908:28 - inside ngoninet remember so i am just
908:30 - calling it after our okay sorry wrong
908:33 - place
908:35 - so we need to call it after our form is
908:37 - created inside ng on in it so here our
908:40 - form is created and then we are calling
908:41 - get booking data now let's cut and see
908:44 - so we have all these default values
908:45 - right available here because we provided
908:47 - all the
908:49 - remember we provide all the values but
908:51 - here you see
908:53 - yeah that's fine we don't have uh yeah
908:56 - we have an error here so must apply a
908:58 - value for form control at index 0 this
909:00 - is what i wanted to show you uh but let
909:02 - me just do one thing let me just remove
909:04 - any of the property
909:10 - see this error must supply a value for
909:12 - control with
909:13 - name checkout date
909:17 - and
909:20 - why so
909:22 - the thing is whenever we use set
909:25 - value property or set a value api it
909:29 - expects us to pass
909:30 - all the values for all the control which
909:33 - it has
909:34 - keep this in mind set value we need to
909:37 - pass the value for each and every
909:38 - control
909:40 - patch value it makes it little bit loose
909:43 - so
909:44 - in patch value you can you are allowed
909:46 - to skip
909:47 - some of the controls
909:49 - so now you can see we don't have the
909:51 - error anymore and everything works right
909:54 - so if i just provide guest name it will
909:56 - work and we already have this value
909:58 - which is provided or set using the patch
910:01 - value method so this is the difference
910:02 - otherwise
910:04 - there is no difference between set value
910:06 - and patch value set value makes little
910:08 - bit strict that you you have to go ahead
910:09 - and pass every uh value for each and
910:12 - every control patch value makes it
910:13 - little bit flexible so i don't have to
910:15 - pass everything
910:22 - form api also allows us to listen to the
910:25 - form value changes in real time
910:27 - so
910:29 - how it is possible
910:30 - so you can use a value changes property
910:32 - which is a stream remember we have
910:34 - already discussed board stream so which
910:36 - is a stream and which looks for any
910:38 - changes which is happening in real time
910:40 - on your form
910:41 - so let's go ahead and see how we can
910:43 - actually utilize this api so here
910:46 - after my form is
910:48 - done
910:49 - we can actually uh use
910:55 - booking form dot value changes as this
910:57 - is a stream we are subscribing to it and
910:58 - it will give us the data in real time
911:00 - let's see
911:01 - so console.log data
911:08 - and let's remove this and enter the
911:11 - value so you can see as soon as i enter
911:13 - a value it is actually giving me the
911:16 - data mobile number
911:18 - and
911:20 - now we have this mobile number available
911:22 - so it will be called for each key press
911:25 - remember
911:26 - so if i enter
911:28 - 5 now let's enter 0 0 0 right so for
911:32 - each and every value which is getting
911:34 - changed you can capture
911:37 - that value in real time using value
911:40 - changes
911:41 - but
911:42 - it
911:43 - isn't it an overhead
911:45 - i mean why should i need i need to know
911:47 - the value changes which is happening in
911:49 - real time
911:50 - but remember it means
911:52 - in case i have any validation
911:55 - or custom validation it will be
911:56 - triggered for each key press
911:59 - sometime it becomes a
912:01 - little bit
912:03 - it can give you performance issues
912:05 - sometime
912:06 - in case you we have a small form doesn't
912:08 - matter but in case you have a lot of
912:10 - controls and every control has some
912:11 - validation which is getting triggered
912:13 - it may make your forms little bit slower
912:18 - let me tell you angular is really fast
912:20 - so probably you will never get to see
912:22 - this issue but just just in case so how
912:25 - we can avoid it so let me introduce you
912:28 - to another property which exists on your
912:31 - form controls
912:32 - which lets you
912:34 - control the behavior how
912:37 - your form values will be changed
912:39 - so right now values get changed on each
912:42 - key press
912:44 - that's a default behavior
912:46 - to change the current behavior you can
912:49 - do something like this so here we have
912:51 - this validators.required validator.email
912:54 - right
912:55 - so here we can change this to
913:01 - validators so we will say okay this is a
913:04 - value and there is a property called
913:08 - up
913:10 - dated
913:14 - on
913:19 - once again
913:22 - form control let me say
913:24 - see where we have used form control so
913:26 - we can
913:33 - add control
913:35 - yeah so uh
913:39 - we have validators and update on sorry
913:41 - not updated on so update on
913:45 - move this
913:48 - and let's update on
913:52 - blur
913:57 - and we need to change this to an object
914:03 - so i prefer using new form control
914:05 - rather than this but yeah it's okay we
914:07 - will
914:08 - do update
914:11 - on
914:13 - this is okay this is okay and this is
914:17 - done and we haven't this as an extra
914:20 - let's see uh
914:22 - then we can pass you can remove this
914:26 - and yeah let me just format
914:31 - so
914:32 - here with this we are passing an object
914:34 - which has two values update on and then
914:36 - we have validators so now for email
914:39 - and let's add it for some other control
914:42 - as well let's add it for mobile number
914:45 - so i can just do something like this i
914:48 - can
914:54 - alright so i'm saying this is this will
914:56 - be updated on
914:58 - blurry
914:59 - so blur is an event which will be called
915:02 - once you move out of the control so
915:04 - let's see
915:06 - let's remove this
915:08 - let's enter mobile number so you can see
915:11 - no values is being captured in real time
915:13 - so as soon as i press the keys it's not
915:16 - happening
915:18 - press the tab or move out of this
915:20 - control you will see the values being
915:22 - changed for others it will be same i
915:25 - mean we have not changed the behavior
915:26 - for entire form can we do that yes we
915:29 - can you can also pass this value here
915:32 - as the last option after your form is
915:35 - created and you can pass the same
915:37 - properties so you can say update
915:40 - [Music]
915:50 - update on blur and then in case you have
915:52 - some validations which we will use
915:54 - you can do that so let's
915:58 - test it now
915:59 - let's enter booking amount and you can
916:01 - see it is not getting called as soon as
916:03 - i move out of this particular control it
916:04 - is getting called so this is the for
916:06 - template driven form this is how you can
916:08 - be
916:09 - uh change the behavior uh based on uh
916:14 - based on how your user interact so there
916:15 - are three values which it has so you
916:17 - have blur change and submit change is by
916:20 - default
916:21 - submit is really useful in case you
916:23 - don't have any errors or any validations
916:26 - or you want to show the validations once
916:28 - your form is submitted so you can move
916:30 - to submit so in that case
916:32 - let's try to understand how it impacts
916:34 - right so for change let's say you have
916:36 - one of 10 controls
916:38 - where i average users enter five keys so
916:42 - 10 into 50 times your change even it
916:44 - will be called
916:45 - in case we move on to blur it is number
916:48 - of controls right so if you have five
916:50 - controls
916:51 - and
916:53 - uh sorry ten controls and
916:55 - let it be any any your users
916:58 - enters any a number of times or any
917:00 - number of values
917:01 - only 10 times your changes will be
917:03 - called on the control value changes
917:07 - submit one events
917:10 - you might be wondering i mean is it
917:11 - possible to control uh the same for
917:14 - template treatment forms yes it is i
917:16 - just wanted to wait till this time to
917:17 - let you know that okay this is possible
917:19 - for template driven forms as well
917:21 - and to do that we will go to
917:25 - rooms add
917:28 - here
917:30 - so
917:30 - we can use
917:36 - ng model options here where you can pass
917:40 - the properties so you can say update
917:44 - and you can say okay
917:46 - this will be plus
917:49 - so this is how you can control it for
917:51 - your
917:53 - uh template driven forms
917:55 - so uh remember ng model options and you
917:58 - can see here so it has three properties
918:00 - it has name standalone and update on so
918:02 - update on uh is referring to these three
918:04 - values which is change blur and submit
918:06 - so you can set it for
918:08 - um or set it to anything you like
918:11 - yeah so this is how you can control uh
918:14 - so this is how you can listen to the
918:15 - control value changes and this is how
918:16 - you can also control how you want to
918:18 - listen to those changes
918:20 - so this
918:22 - uh this is it from value changes now we
918:25 - can talk about
918:27 - a few arrangements operators which we
918:29 - can combine
918:30 - with
918:32 - value changes
918:33 - and
918:35 - we will discuss about few
918:37 - map operators which exist in rxjs
918:40 - and we'll try to understand each one of
918:42 - them because that's really useful in
918:44 - case you are working with rxjs in some
918:46 - big project so let's go ahead and do
918:49 - that to
918:50 - the thing is now we need to connect to a
918:52 - real-time api
918:53 - and
918:54 - what we will do is we will use the uh
918:56 - jsonplaceholder api which we used in
918:58 - past
919:00 - because we want to post this data and
919:03 - in jsonplaceholder actually you can post
919:05 - anything you like
919:12 - so let's
919:13 - not json video json
919:16 - placeholder
919:21 - and
919:32 - we will use post api
919:34 - and let's see
919:36 - so we can call slash post and that's it
919:40 - so
919:41 - here let's go ahead and create a booking
919:43 - service first
919:48 - i'm going to send you gs and
919:51 - booking
919:53 - service
920:00 - and we'll use our http
920:03 - service
920:04 - and we also need to register should be
920:07 - module so let's do that that should be
920:16 - declined module and let's save this
920:20 - and here we will use the http service
920:23 - studio p
920:25 - client
920:28 - and we will say uh
920:36 - book
920:37 - room
920:40 - which is
920:41 - which has booking data so right now i
920:43 - don't we will not create the interface
920:45 - so let's do it as any which we should
920:48 - not but yeah i mean this is anyways
920:50 - uh dummy apis right so we can say this
920:53 - dot
920:54 - svp.post
920:56 - and we will replace this with
920:58 - placeholder jsonplaceholder
921:02 - slash
921:04 - posts
921:06 - and we'll pass this booking data here
921:08 - and let's remove the subscribe
921:13 - and let's return
921:16 - whatever we get
921:19 - and
921:20 - next
921:21 - we will
921:22 - inject this particular method
921:25 - where is this component
921:31 - so it's a private
921:34 - room
921:35 - booking
921:37 - service or just call it as booking
921:41 - service
921:53 - and we will do it here so we'll set this
921:55 - dot
921:56 - booking
921:58 - service dot
922:00 - book room
922:01 - and we'll subscribe to the changes so
922:03 - let's say this is data
922:05 - and
922:06 - we will
922:07 - listen
922:08 - and we'll remove this reset as of now
922:10 - because we want to
922:12 - see different scenarios
922:14 - so
922:15 - this is one place
922:19 - and
922:24 - this is on submit right so i'll just go
922:26 - console.log
922:30 - data
922:34 - which will be using
922:35 - in some time but
922:39 - let's go ahead and control some update
922:42 - this right now and
922:50 - so to see the example of how this
922:53 - uh map operator works different map
922:55 - operator works we will be calling
922:58 - our submit method here let's see
923:01 - so i'll say this dot
923:03 - config our booking service
923:08 - dot
923:09 - book room
923:11 - and we'll pass the data here
923:17 - so
923:18 - you can see actually what we are doing
923:19 - is we are subscribing
923:23 - or
923:35 - um
923:40 - okay so what we are doing here is we are
923:42 - subscribing uh
923:45 - the book room method within subscription
923:47 - which is not a good practice but
923:50 - we want to actually see the different be
923:52 - different behavior which we have
923:54 - while using the map operator so
923:57 - this is not the way we are going to use
923:58 - it so how we are supposed to do that
924:01 - so here uh let's rewrite this and
924:04 - we will be using it uh doing it via the
924:07 - map operators so we can do
924:10 - this dot booking form
924:13 - dot
924:13 - value
924:14 - changes dot
924:16 - pipe
924:19 - and we will be using the different map
924:21 - operators so let's start with merge map
924:27 - and in merge map we will say okay this
924:29 - is data and then we will be
924:31 - uh
924:32 - calling
924:33 - this dot book room
924:36 - let's comment this out
924:38 - and let's see the behavior right now
924:41 - and let's comment let's remove this and
924:44 - let's go to the network tab because it
924:47 - will give us clear idea how the
924:49 - merge map operator works
924:51 - so remember we have
924:53 - right now um the form will be sub uh
924:56 - like value changes will be called when
924:57 - we move out of the control because we
924:59 - have sent said uh
925:01 - this updated on blur so let's remove
925:04 - that this as well
925:05 - and say uh rather than blur i will go
925:08 - back
925:09 - to
925:14 - update on
925:34 - [Music]
925:37 - okay so
925:38 - now as uh we have moved on with the
925:41 - default behavior which is change let's
925:43 - see how it behaves so network
925:49 - amount
925:52 - and
925:54 - okay
926:10 - see what's wrong here
926:14 - okay we
926:15 - have not subscribed so let's do that
926:18 - and let's subscribe to this
926:20 - data
926:23 - and we'll just do console
926:26 - dot log
926:28 - it
926:29 - let's see now
926:32 - because as we discussed i mean of course
926:34 - we need to subscribe it otherwise
926:35 - nothing will be called
926:36 - so let's remove this network tab and
926:39 - let's enter the guest name and you can
926:40 - see post requests being made
926:43 - in parallel so you can see it doesn't
926:45 - care so
926:46 - now trying to understand different merge
926:48 - merge operators so first is merge map
926:52 - so in this case merge map does not care
926:54 - about the sequence
926:57 - so it will try to
926:59 - post the data or
927:01 - you can say subscribe to the stream as
927:03 - soon as the data is provided
927:06 - sequence does not matter much more
927:09 - let's move on to the other operator so
927:11 - we have mergement which says okay i
927:14 - don't care about
927:15 - the sequence as soon as i get the data
927:18 - or a stream is
927:20 - as a stream is emitted i will just go
927:23 - ahead and
927:24 - pass this stream to whoever has
927:26 - subscribed
927:30 - now next
927:32 - which we will use switch map let's see
927:34 - how switch my behaves
927:44 - clear
927:45 - network tab
927:49 - yes can you see something uh which is
927:51 - different
927:54 - so let me just explain this behavior now
927:56 - so you can see there are a lot of
927:58 - requests which are being cancelled
928:03 - what what is happening here so in case
928:06 - of this switch map switch map will wait
928:10 - sorry a switch map will cancel any
928:12 - existing request if it receives a new
928:14 - data
928:15 - so let's say if you care about that
928:18 - whoever has subscribed to your stream
928:21 - should get the latest data only and
928:23 - should previous data or previous stream
928:25 - which is raised should be cancelled you
928:28 - switch map operator is the way to go
928:31 - now let's talk about the last one
928:37 - which is exhaust map
928:47 - let's enter
928:49 - you can see i entered multiple
928:51 - characters
928:52 - exhaust map cares about the sequence so
928:55 - it says until unless the previous
928:57 - request is not completed i will not
929:00 - subscribe to any latest changes so it
929:03 - takes its time to complete the previous
929:05 - one so you can see it has
929:06 - uh so here you will see uh the data
929:09 - let's talk about
929:11 - request header
929:15 - response
929:20 - and
929:24 - right so you have your data available
929:25 - here so it says okay until unless the
929:27 - previous request is not completed i'm
929:29 - not going to call anything else so this
929:32 - this api is i think it was never called
929:34 - but you can see here so this
929:36 - api started here it says 204 okay so
929:38 - these are two apis which are called you
929:40 - can see the first api request
929:42 - and you will be able to see the values
929:44 - requested a response editor payload
929:46 - where you have all the data so we
929:48 - entered the guest name and then it
929:50 - waited until unless this request was
929:52 - completed to
929:54 - make the second request so you can see
929:56 - the
929:57 - rest of the values actually went into
929:59 - second request so in case you care that
930:01 - okay the previous
930:03 - request which you made should be
930:04 - completed before i can make a new
930:06 - request
930:08 - this exhaust map is your
930:10 - operator which you are looking at
930:12 - so we discussed about three map
930:14 - operators which are really useful as i
930:16 - said you don't have to use all the
930:17 - operators like more than hundred
930:19 - operators which exist you have to
930:20 - remember uh
930:22 - um list10 operators which we have
930:24 - already used in this particular uh
930:27 - uh in this particular course and if you
930:31 - use uh all these operators if you master
930:33 - all these operators
930:35 - it's more than enough
930:37 - and
930:38 - once you move uh or once you get more
930:40 - scenarios
930:42 - you can actually explore more operators
930:43 - but you don't have to start like
930:45 - learning hundred operators on day one
930:51 - now we will talk about how to write
930:53 - custom validation for reactive forms
930:56 - so
930:57 - we will learn how we can add validation
930:59 - for control and we will also see how we
931:01 - can add
931:02 - validation for form level which is a
931:04 - little bit interesting because
931:06 - you may get this issue and i'll talk
931:08 - about few scenarios where actually this
931:10 - is useful
931:11 - but before we do
931:14 - that let me just start
931:19 - before we do that uh remember last time
931:22 - we got some issue and we had to disable
931:23 - bootstrap so what i have done is we have
931:26 - just added this we have actually
931:28 - enabled this input which seems to fix
931:31 - the issue where
931:32 - both
931:33 - angular material and the bootstrap seems
931:35 - to work so if you see uh this is the
931:38 - form and this is the table right so it
931:40 - both works
931:41 - we'll also do one more thing we will do
931:43 - a little bit clean up because we if you
931:46 - see i mean on
931:48 - all the pages we have lot of junk data
931:50 - for example this which we
931:51 - use just to
931:53 - just to uh show you right how the data
931:55 - looks like
931:56 - so let's go ahead and clear those first
931:58 - and then we'll move ahead
932:00 - so i'll just i'll just keep it here it's
932:03 - not like i'm going to remove it so you
932:04 - can always refer
932:06 - uh these values
932:09 - and
932:10 - gone
932:12 - and let's
932:14 - do one more thing
932:38 - let's clear this as well uh we'll just
932:40 - keep the table that's it
932:43 - so
932:44 - this is our rooms component
932:51 - so let's
932:52 - get rid of this
932:54 - let's remove this
932:57 - let's remove
932:58 - those
933:05 - and
933:08 - let's click keep this and we will use
933:11 - btn
933:13 - between
933:17 - success
933:19 - let's remove
933:21 - sorry
933:33 - we'll keep roams list
933:37 - the reason being okay
933:41 - and
933:44 - will disable those buttons too
933:46 - let's see
933:50 - room is missing following property rooms
933:52 - list
933:54 - okay
934:07 - and looks a little bit better right i
934:09 - mean now we don't have a lot of junk uh
934:12 - data which is available here right now
934:14 - and let's
934:16 - comment this one too
934:30 - i'm just doing it because you should
934:31 - know that what are the changes which we
934:33 - have done and that's it so now we can
934:35 - click on book room and this is the book
934:37 - room
934:38 - component which is available here
934:41 - so what we will do is let's go ahead and
934:42 - add few custom
934:44 - decorators are sorry not because sorry
934:47 - uh let's go ahead and add some custom
934:48 - validations to this reactive form and
934:51 - let's see what are the different ways in
934:53 - which we can do that
934:54 - so let's start with a simple validator
934:57 - where what we will do is we will
935:00 - validate a control let's say example
935:02 - guess name same same scenario which
935:04 - we'll take remember in uh we wrote a
935:07 - custom validator where we said okay in
935:09 - case
935:10 - there's a test in name uh go ahead and
935:12 - reject this particular
935:14 - value so it should show the validation
935:17 - that okay the name is invalid same we'll
935:19 - do it for guest so we'll add a
935:21 - validation but using the custom
935:24 - sorry reactive
935:25 - well i mean
935:27 - so we'll add a validation where we'll
935:29 - say okay in case this name contains
935:32 - value as test
935:34 - we will
935:35 - just give a validation error
935:38 - how to do that so i generally try to
935:40 - follow the same approach which is uh
935:42 - followed by validators class
935:45 - so let's go back to the booking
935:47 - and
935:48 - looking component
935:50 - and remember we have already used some
935:52 - validation right so we have added the
935:54 - built-in validation right now which is
935:56 - which uses this
935:57 - validators.requirevalidators.email
936:00 - if you see the implementation of
936:01 - validators class it's a class with some
936:03 - static methods so we'll try to follow
936:05 - the same approach and
936:08 - to
936:09 - do that let's go ahead and add a folder
936:12 - we'll call it as
936:13 - uh valley
936:15 - directors
936:18 - and let's create a class so
936:20 - [Music]
936:21 - let's see ng generate um if it has a
936:25 - class
936:27 - uh i'm using uh this is okay let me just
936:30 - show uh talk about this as well i have
936:31 - added a extension for called nx console
936:34 - which lets you do that so um
936:37 - i'll just say this class name is custom
936:41 - valley
936:42 - dater
936:45 - and project name is fine this is the
936:47 - folder where i want to do it
936:50 - and that's it run
936:58 - and we have this class created
937:01 - and here we will add some static methods
937:03 - so let's
937:05 - add some validators we will be adding
937:06 - all the validators in this particular
937:08 - file so i'll say this is a validate
937:12 - value date name
937:14 - and
937:15 - so
937:18 - let's talk about this now so we have a
937:20 - validate validate name function and
937:23 - it takes a parameter called abstract
937:25 - control so what is this abstract control
937:27 - is so abstract control is base class for
937:30 - everything from group form control form
937:32 - array so it's a base class so it knows
937:34 - it has all the information which your
937:37 - all
937:38 - form control form group can have
937:40 - and
937:42 - you can get the value by using so
937:44 - control dot value so this this will give
937:46 - you uh the value uh which which which is
937:50 - entered into the control right
937:52 - so let's try to validate name so first
937:55 - thing first thing which we'll do is i'll
937:57 - say const
937:59 - value
938:03 - is equals to control dot value as a
938:05 - string because uh if you see the value
938:07 - is actually type of enemy
938:10 - and i need some uh
938:12 - as we know that we know that okay this
938:15 - name is going to be string so we are
938:16 - type casting it as a string
938:18 - and we'll say if
938:20 - value dot
938:22 - includes
938:26 - test
938:27 - and it's the same so if remember
938:30 - we can return an object in case there is
938:32 - an error so i can i can say validate uh
938:35 - not this one i can say return
938:37 - in valid
938:39 - name
938:40 - truth
938:42 - and if
938:45 - this is not the scenario return null so
938:48 - once you return null it means there are
938:50 - no validation error
938:51 - and let's see how to apply this
938:53 - validator now so we can go to our
938:55 - component
938:57 - and we want to apply this to name so
938:59 - let's see where the name is this as well
939:01 - and you can add your validator in this
939:03 - list of array so you can say okay this
939:06 - is
939:06 - custom
939:08 - validator dot
939:10 - validate name
939:12 - and
939:14 - let's go ahead and see
939:16 - save this and here
939:20 - let's go to the name
939:22 - the guest name right so we will enable
939:24 - this to see the list of errors which we
939:27 - have
939:34 - and let's go ahead and say login
939:45 - let's select the room and here we are
939:48 - and
939:49 - let's enter a name which has like test
939:52 - so you can see invalid name troop
939:54 - so uh now
939:56 - this is this is the simple validator
939:58 - which we also wrote for uh
940:00 - template-driven forms so where we are
940:03 - just checking if this particular text
940:04 - exists in this particular control just
940:06 - go ahead and give this in validation
940:09 - message
940:10 - so
940:10 - now the next validator which we will
940:12 - write is something where we we can pass
940:16 - some value so it's like
940:18 - let's see
940:19 - here right so you have mean length and
940:21 - we wanted to pass how much the length
940:24 - should be
940:25 - so we will try to write a similar
940:26 - validator and
940:28 - what we will do is let's say in case
940:31 - we want to restrict the special
940:33 - characters in guest name
940:36 - i mean of course it's not possible guest
940:38 - name should not have contained special
940:39 - characters but in case someone enters it
940:41 - right or let's say mobile number so in
940:44 - case someone enters
940:46 - anything apart from plus
940:51 - what's that
940:53 - oh
940:54 - i and
940:55 - let's let's not take that scenario but
940:57 - because it's it should be number i mean
940:59 - you can go ahead and directly use the
941:01 - pattern uh so it doesn't make sense but
941:03 - yeah let's see
941:05 - uh
941:06 - guest name let's take guest link and
941:08 - what we want to do is we want to pass
941:10 - uh some characters which should not be
941:11 - allowed
941:12 - so it's it happens right so perfect
941:14 - scenario for your passwords let's say
941:16 - you have a password control and you want
941:18 - to uh you don't want to allow some
941:20 - specific uh special characters
941:23 - and you want to re write the custom
941:25 - validator for that so what we can do is
941:27 - let's
941:28 - write one
941:30 - and say this is static
941:37 - validate
941:40 - special cat
941:43 - right so we are saying okay uh let's see
941:45 - so we are saying okay uh this
941:48 - value
941:50 - but
941:51 - you might be wondering right now it
941:53 - seems similar to this so what we are
941:56 - missing so let me just show you what we
941:57 - are missing so rather than passing the
941:59 - substrate control here this will change
942:02 - we will return control like this
942:06 - and here
942:07 - we will
942:12 - and we we'll pass a character here so
942:15 - it's okay this is character which is
942:16 - type of string and we will check for
942:19 - this character if this character is
942:21 - available
942:28 - okay so let's see what we are doing so
942:30 - rather actually passing uh the
942:33 - object directly we are returning the
942:35 - function
942:37 - so it's a function inside a function
942:38 - right so this is the main function which
942:40 - will take the parameter and then it will
942:42 - return a function which will return
942:44 - either invalid special character or
942:46 - return null
942:47 - and to use this there is only small
942:49 - syntax change if you see so rather than
942:52 - passing this control here we are just we
942:54 - just moved it inside here
942:56 - so let's try to use this and
943:01 - we'll apply it on the same guest name
943:08 - you can say custom validator dot
943:12 - validate special care let's uh say
943:14 - uh we are not supposed to use stuff
943:18 - okay
943:21 - so we pass start and if it
943:30 - so if this uh if someone enters a star
943:32 - into this particular guest name
943:35 - it will be invalid name so let's enter
943:38 - to do that
943:39 - so we are
943:40 - entering the right
943:43 - name i mean
943:44 - a valid name but we entered a star so it
943:47 - says okay this is the invalid special
943:49 - character so you should not use star so
943:52 - this is how you can do that you can of
943:53 - course implement your own whatever you
943:55 - want to pass i mean
943:57 - so
943:58 - whatever character you want to pass
944:02 - now third scenario which we will talk
944:04 - about is
944:06 - perform
944:08 - so
944:10 - where this type of validation is
944:14 - sorry where this valid type of
944:16 - validation will source so let's say you
944:17 - have two controls right which you want
944:20 - to validate for example password confirm
944:22 - password here also we have an example
944:25 - we have the second date and checkout
944:27 - date right now i can just go ahead and
944:29 - say
944:30 - that my check-in date
944:32 - is 20th
944:36 - and checkout date is 10th
944:38 - which is not possible right
944:40 - so what in case we want to write a
944:41 - validator which validates this which
944:44 - validates okay this
944:45 - check-in date cannot be greater than
944:48 - checkout date
944:50 - right so let's try to write a validator
944:53 - for this how we can do it
944:56 - let's go back to our validator class
945:03 - so let's say this is static uh we'll say
945:06 - validate
945:07 - date
945:10 - but rather than actually passing
945:12 - abstract control right now i know that
945:14 - this is this is a form group
945:17 - and here we will
945:19 - get the values for both so we'll say
945:21 - okay give me the control call checking
945:23 - date
945:24 - and why this is keeping an issue
945:28 - ah okay
945:32 - so uh we i'm saying give me the value of
945:35 - checking date and check out it let's
945:37 - verify the
945:41 - names i mean because this this object
945:43 - should object name should match
945:45 - so we have
945:48 - check in date check out date days
945:51 - capital in both the cases yeah looks
945:53 - fine
945:54 - but
945:55 - let's put the logic to actually
945:58 - calculate the date
946:04 - so i'll say this is
946:10 - new
946:13 - i'm just typecasting it to date
946:22 - and this is
946:26 - new date
946:37 - and we'll take difference between two
946:39 - dates
946:44 - okay first we need the timing
947:04 - uh
947:08 - check-in date check out it
947:26 - let me just type cast it to any right
947:28 - now so we
947:29 - can see the stiffness
947:33 - is less than equals to
947:38 - zero
947:39 - i'll say this is invalid date
947:42 - and otherwise
947:44 - let's return
947:45 - let's verify this logic right so what we
947:48 - will do is we will just do a console.log
947:50 - for all the values to see
947:53 - if
947:54 - this is what we are expecting div days
947:59 - and div
948:01 - time
948:03 - and
948:04 - let's use it so what we have done is we
948:07 - wrote a validate date function which
948:09 - takes form group and we are checking uh
948:12 - getting the two values checking date and
948:14 - checkout date from this and then we are
948:16 - calculating the difference let's go
948:18 - ahead and apply this on booking
948:20 - component.ts
948:22 - and what i want to do is i want to call
948:23 - this particular method once
948:26 - my update on value is
948:32 - blur
948:35 - and
948:37 - i want to call
948:38 - validators
948:50 - and which is
948:53 - custom
948:54 - validator
948:56 - dot
948:57 - validate date
949:01 - okay
949:07 - let's inspect
949:09 - and we'll add a breakpoint so we can see
949:10 - what
949:12 - is the value which we are getting right
949:13 - now so i can say here also to search a
949:15 - file you can
949:17 - let me show you some shortcut as well so
949:19 - you can press ctrl p ctrl p on your
949:22 - keyboard and then you can just start
949:23 - entering the file name
949:25 - so i need customvalidator.ts
949:29 - and let's add some validation sorry
949:31 - breakpoints here let's choose chicken
949:34 - date which is already there
949:35 - let's choose checkout date
949:38 - and let's see
949:40 - so we have checking date as this monday
949:42 - feb 20 2020
949:45 - and then we have checkout date
949:48 - which is
949:50 - right now
949:52 - jan 18th
949:53 - let's say the difference 708 days and
949:57 - if div days is less than equal to zero
949:59 - then invalid otherwise valid so right
950:02 - now the form is valid let's
950:04 - provide a date so this is 18th right so
950:08 - let's select our
950:13 - check-in date after
950:16 - january so
950:18 - let's see now so we have
950:20 - check-in date checkout date and then dip
950:23 - days should be my minus right now so
950:26 - okay somehow it is 21.
950:36 - how come
950:46 - checking date minus checkout date
950:50 - okay
950:51 - let's try to select
950:54 - 10th
950:58 - so jan 10th jan 18th
951:02 - because we are doing absolute that's the
951:04 - that's why
951:06 - it is
951:23 - okay probably something wrong let's see
951:37 - okay so we were right i think this uh it
951:39 - is happening because of this math dot
951:40 - absolute
951:42 - let's go ahead and remove this math dot
951:43 - absolute because it is it is returning
951:45 - as positive value
951:47 - and in case we need
951:50 - the diff in minus we should
951:53 - let's try this out
951:57 - and
952:00 - it's disabled and run it
952:02 - and let's enable uh now let's
952:06 - provide our date so we'll just select
952:08 - 2020
952:10 - jan
952:11 - 18th
952:19 - so uh right now okay this is not a
952:21 - number that's that's okay
952:24 - and let's select a previous
952:28 - date and dave days
952:33 - is
952:34 - 18th and 10th
952:36 - okay so it should be checkout date minus
952:38 - checking date if i'm not wrong let's
952:40 - let's try this out so if i put
952:42 - this date on 26th i think we should now
952:45 - get a minus value
952:47 - yeah so yeah so we just need to now
952:50 - change
952:50 - the position so i can say check out date
952:55 - minus
952:59 - second date
953:01 - and we are true so now we have added a
953:04 - validator which validates to date
953:07 - right and this is something which you
953:09 - can also take and apply to password and
953:12 - confirm password
953:14 - so let's supply jan
953:16 - 10th
953:17 - and if i try to check out early
953:24 - and let's apply uh give all the values
953:27 - valid values
953:29 - mobile number
953:31 - let's
953:32 - let's see
953:34 - just want to give the valid values so
953:38 - our required values
953:43 - right so even though we have provided
953:45 - all the valid values for required fields
953:48 - there is still a
953:50 - problem with the form validation because
953:52 - the date condition is not satisfied we
953:55 - cannot check in sorry check out early so
953:57 - let's go ahead and
953:59 - see this first
954:01 - so here
954:03 - i can apply
954:12 - let me just close others so you can
954:14 - right click here and say close others
954:22 - booking form
954:29 - dot
954:30 - invalid
954:35 - and
954:36 - we will do one thing so right now it's
954:38 - it's really hard to figure out right
954:40 - where the problem is because
954:42 - uh we are saying okay this
954:44 - date does not match but we are not
954:46 - displaying any errors so it will be
954:48 - really confusing for our users to figure
954:50 - out the actual error so what we can do
954:53 - of course we can add a control level
954:55 - validation
954:56 - so let's do that let's
955:00 - try to see how we can apply this to a
955:02 - control level uh i mean how we can
955:05 - actually apply this error to control
955:06 - level uh
955:08 - property
955:09 - right now
955:10 - uh this error is actually available on
955:13 - form
955:14 - it's not available on the control so
955:15 - what we will do is we will add
955:20 - here so we can do something like this so
955:22 - we already have access to the control so
955:24 - if you see this is uh control checking
955:27 - date and checkout date so here we can
955:29 - add something like this
955:32 - get
955:36 - dot
955:39 - set error and we can save
955:42 - [Music]
955:43 - in validate true and of course it can be
955:47 - null so just put it here and now this
955:50 - error will be added to your control
955:51 - let's go ahead and try to figure out if
955:54 - it's true
955:55 - so we will go to
955:57 - checkout date checking date checkout
955:59 - dave this is our checkout date
956:01 - and we will use the same
956:04 - approach
956:06 - to print
956:07 - the years
956:09 - booking date checkout date here it is so
956:12 - we'll take check out date
956:14 - dot errors
956:16 - check out date
956:18 - and let's see let's see if this
956:20 - particular control is applied to the uh
956:22 - checkout date or not
956:23 - so
956:24 - [Music]
956:25 - let's select a date 2020
956:29 - jan and i'll say 18th and checkout date
956:33 - is 10th so you can see it has a invalid
956:35 - date error which is applied to the
956:36 - control right now so this is how you can
956:38 - actually also show meaningful messages
956:41 - to your end user so they know okay what
956:44 - we are doing wrong now let's go ahead
956:45 - and print
956:46 - fill in all the valid properties
956:49 - and
956:50 - let's try to submit this form
956:58 - and dnc and looks like there is one more
957:02 - validation error which is not satisfied
957:05 - which one
957:13 - okay
957:14 - which which property is that
957:18 - guest name
957:21 - and here it is so now this book room is
957:24 - valid
957:25 - we submitted it let's see and this is
957:28 - your guest email data which is available
957:30 - here ids101 mobile
957:33 - and
957:36 - so remember right now we are actually
957:38 - sending this data to our dummy api right
957:41 - so which we which we wrote uh and which
957:44 - we
957:44 - uh took it from jsonplaceholder so we
957:46 - are just sending this data back that's
957:48 - it
957:49 - and this is it
957:51 - so uh this is how you can add custom
957:52 - validator to your reactive form we
957:54 - covered all the scenarios all the
957:56 - scenarios which we can think of and
957:58 - which
957:59 - is useful in case you are writing the
958:01 - validators for your application
958:03 - so
958:04 - ah this is it from the custom validator
958:06 - part
958:08 - let's go ahead and uh talk about one
958:10 - route guards which we had left
958:12 - we actually have two left uh we will
958:13 - come to resolve but
958:15 - let's see
958:17 - let's talk about candy activate guard
958:22 - sorry
958:23 - so candy activate guard is something
958:25 - where
958:26 - we are saying that okay now you have
958:28 - entered the route
958:29 - but can you exit the route so we are
958:31 - trying to
958:33 - see if user our user is actually
958:37 - uh
958:38 - authorized to exit the uh route right so
958:41 - here
958:42 - example can be let's say you entered
958:44 - into theater but can you exit the
958:46 - theater i mean probably you need some
958:48 - authentication to exit
958:50 - so you are locked until unless let's say
958:53 - move finishes or you have
958:56 - interval
958:57 - so to
959:00 - generate or to have a real-time scenario
959:03 - here what we will do is we will create
959:05 - we already have a booking form
959:07 - so what we'll do is in case there is
959:09 - some information or let's say our form
959:11 - is in dirty state it means
959:14 - as a user i came and i made some changes
959:17 - into my form
959:19 - and if i try to exit we should display
959:21 - some message let's say saying
959:24 - you are not authorized to actually or
959:26 - you have some pending changes you can
959:28 - display a pop-up saying you have some
959:30 - pending changes do you really want to
959:32 - accept
959:33 - some kind of message right
959:35 - so
959:36 - we will be
959:37 - trying to generate the same scenario so
959:39 - let's see
959:40 - with candy activate the fun thing is you
959:42 - can do it for a routed component
959:54 - so if you see our booking is actually
959:56 - one of the routed component which is
959:58 - available here
959:59 - so i'll just change the path a little
960:01 - bit
960:02 - okay
960:03 - i'll make it as
960:05 - uh booking
960:07 - slash
960:08 - room id
960:10 - so we are booking for a specific room
960:13 - okay
960:15 - and
960:20 - here on
960:23 - rooms
960:29 - we had a route so if you see uh
960:32 - we said okay this should redirect to
960:34 - booking component
960:36 - and
960:36 - it's it's another booking component
960:38 - right so actually we never
960:41 - did anything here so what we'll do is
960:49 - we'll remove this
960:50 - okay so we removed this particular route
960:53 - we have booking slash
960:56 - or room id
960:58 - let's go back to the rooms list
961:00 - component here
961:05 - and here we will say redirect to
961:09 - booking
961:12 - slash room number
961:14 - let's verify this change and then we'll
961:16 - proceed
961:24 - and to do that we have to log in let's
961:26 - see
961:29 - and let's click on book room
961:32 - so we are here booking slash one right
961:35 - so we are getting the book uh room id
961:38 - for which we want to book so this is
961:40 - first we
961:41 - are here
961:43 - next step we will try to get this id
961:46 - here with this room id
961:51 - let's go back to our
961:53 - booking
961:55 - ts
961:56 - and how we can get that data so by using
961:59 - activated route we have seen that
962:02 - we'll say this is private
962:06 - and
962:07 - this is route
962:09 - activated route
962:13 - and we can uh do something like this
962:16 - here so we can say
962:20 - once
962:22 - room
962:23 - id and we can say okay from param just
962:26 - get me the room id
962:28 - and now i can pass this room id here
962:34 - as we are inside the ngo unit we don't
962:36 - need to do this dot room id
962:39 - let's verify this in this behavior
962:51 - click on
962:52 - this
962:53 - and we have this two and this two but
962:55 - you might be wondering okay that was the
962:57 - default one let's try to use it for
962:59 - three okay it's still two let's see what
963:01 - is wrong here
963:04 - room id
963:10 - this is a reset i think uh get booking
963:13 - data yeah
963:15 - remember we hardcoded this
963:20 - get booking data where is this function
963:22 - here i'll remove this because we don't
963:24 - want this default value for room id
963:28 - so it's empty room id
963:30 - and let's go back to rooms
963:32 - let's login again
963:40 - let's click on
963:42 - room
963:44 - okay so now this value is not available
963:47 - let's see why so
963:55 - we can debug
963:57 - let's go to src
963:59 - app
964:00 - okay
964:01 - and booking component
964:03 - and this is the line number
964:06 - so let's
964:09 - see what's wrong here
964:12 - click
964:13 - and f10 to my d is
964:17 - okay
964:20 - param id it says it's room id available
964:28 - but
964:30 - params.get room okay high capital okay
964:33 - cool
964:34 - so the code was correct only problem is
964:38 - the uppercase and lowercase so let's fix
964:39 - that
964:41 - and
964:42 - we will say okay this is room type
964:46 - remember the key should match
964:54 - let's refresh this page now
964:57 - and let's see
964:59 - and now we have the id okay
965:01 - great let's move
965:10 - okay i'll
965:12 - probably close this and
965:13 - [Music]
965:14 - open it again
965:29 - and let's click on
965:31 - this
965:32 - and works right so we have room id3 and
965:35 - now we are looking for a specific room
965:38 - so this is the second step so first we
965:41 - fix the route second we are sick we are
965:43 - saying okay we are we wanted to book it
965:45 - for specific room we are here and now we
965:48 - want to add the card to make sure that
965:51 - in case there are some unsaved changes
965:53 - on this form
965:55 - we should send a message we should show
965:57 - a message to the user that okay
965:59 - there are some unsafe changes so let's
966:02 - see if we can use some material control
966:04 - to do that so i think material has
966:07 - something for us
966:09 - material
966:11 - angular material
966:14 - so we can use this
966:17 - let's see
966:20 - yeah we can use this matte dialog to
966:22 - show and dialogue saying you have
966:25 - someone say unsave changes
966:27 - but let's do it later first let's add a
966:32 - card
966:38 - here we will create
966:49 - and i'll say this is ng g
966:52 - g
966:52 - and this is booking guard
967:02 - and what we need is we just need can
967:04 - deactivate and that's it
967:12 - so you can see in can deactivate we are
967:14 - getting one extra parameter so we have
967:16 - something known as component so this is
967:18 - the routed component so we will pass
967:20 - this booking component as one of the
967:22 - parameter
967:23 - here which is unknown
967:25 - and same here so let's go ahead and see
967:29 - what we can achieve using this
967:31 - so now we can
967:34 - put and
967:35 - check
967:36 - so i can say
967:37 - in case this
967:39 - component
967:41 - dot the property which is booking form
967:44 - dot
967:46 - if it is dirty
967:48 - so
967:49 - if it is ready so go ahead
967:52 - and so
967:54 - yeah so it's if it is dirty we should
967:56 - not allow the user to exit if it is
967:59 - pristine we should allow user to exit so
968:01 - i'll just go ahead and save pristine
968:05 - and let's verify uh by applying this
968:07 - card so we will
968:09 - apply
968:13 - this can
968:14 - deactivate
968:16 - to the smoking guard
968:19 - this and pass the booking out again it's
968:21 - an array so you can pass multiple
968:23 - let's verify this functionality so far
968:28 - and then we'll add the dialog
968:31 - so we have this let's try to click
968:34 - somewhere else we are not able to
968:37 - redirect
968:39 - right so you can see i cannot um
968:43 - let's try again with login you might be
968:45 - wondering okay probably because the
968:48 - state has reset we are not able to but
968:50 - let's
968:51 - log in and see
968:54 - right so we have three let's enter
968:55 - something let's try to move and we are
968:58 - not able to do it
968:59 - let's reset this form so i'll refresh so
969:02 - it's in pristine state let's try to move
969:04 - so
969:06 - let's see we are able to redirect
969:09 - this is it
969:10 - so we it means our
969:14 - guard is working perfectly fine
969:16 - let's put the dialog now
969:17 - [Music]
969:19 - so here let's see some example open
969:21 - dialog okay
969:23 - cancel let's
969:24 - see the code
969:27 - and open dialog
969:29 - we can pass some example dialog here
969:33 - or let's uh
969:35 - not do this i think there is another
969:37 - control which
969:38 - where we can just directly pass the
969:40 - message uh there is that
969:43 - divider date picker chips
969:58 - let me just go to
970:00 - the default page i think there are there
970:02 - should be
970:05 - slider buttons
970:08 - okay uh
970:12 - no we are not looking for chips we are
970:14 - looking
970:16 - for
970:17 - you know progress bar
970:21 - elephants
970:22 - okay
970:23 - stripper tabs toolbar duty
970:29 - okay let's see
970:30 - okay this is not
970:36 - let's see there should be a way to
970:42 - hmm
970:45 - let's
970:46 - and pass
970:49 - some
970:50 - data okay so we will we'll be using this
970:52 - one we'll be using dialog to uh show
970:56 - that okay uh we'll show the message that
970:58 - okay you have someone save changes this
971:00 - is what we are going to do here
971:05 - now let's go back to the booking card
971:07 - and here uh let's
971:08 - use import the
971:11 - api
971:16 - image dialog module
971:20 - and
971:21 - let's go to the example
971:33 - so it says okay you have to pass an
971:35 - component so let's create a component
971:40 - [Music]
971:51 - okay we can use snapper okay this this
971:54 - will be uh the easiest one so snack bar
971:56 - is something where you can
971:57 - display a message like this so let's say
971:59 - here right so we can display a message
972:02 - it's a simple api and then dialog
972:04 - because we don't need to create a
972:05 - component but we will add this
972:08 - try to use dialog
972:10 - module if you can if you want to try
972:12 - this out
972:13 - and here
972:15 - uh in
972:19 - the thing is you can just inject a snake
972:21 - mat snake bar
972:23 - into your service so let's do that
972:27 - we'll do a constructor and then inject
972:31 - the snag bar
972:37 - and here we can do before we return this
972:40 - message right so we will say if
972:43 - component
972:45 - is pristine
972:47 - return this
973:00 - else what we are going to do is we are
973:03 - going to return false anyways
973:05 - but
973:07 - we will open this dot snack bar dot
973:11 - from template open
973:13 - we can open and then we can say okay you
973:16 - have unsaved changes and that's it
973:19 - let's verify this one
973:24 - click
973:26 - so admin
973:28 - admin and click on booking room
973:33 - and let's
973:35 - do this and try to move
973:42 - okay let's see what's wrong
973:45 - huh
973:48 - so circular dependency for booking guard
973:52 - okay so how the how
973:55 - is that
973:56 - a circular dependency
974:00 - book module
974:08 - it says booking guard is
974:13 - no provider for matt's name bar okay
974:15 - let's see let's see the api so in case
974:17 - we want to
974:18 - we have to provide something
974:22 - so um
974:52 - so we had to actually just add matte
974:54 - snack snack bar module into app module
974:57 - as well somehow to uh make sure that it
974:59 - works so now let's go ahead and verify
975:01 - this functionality so you can see let me
975:03 - just refresh this page so we uh go to
975:06 - login
975:07 - admin and then be
975:09 - logged in
975:12 - click on book room
975:14 - go to employee works
975:16 - go back book employee now let's make
975:19 - this form dirty
975:20 - let's try to move and you can see you
975:22 - have some unsafe changes so we are not
975:24 - able to redirect but we are also
975:25 - displaying this message that you have
975:27 - someone save changes and you can just
975:28 - discard complete the form and then once
975:32 - your form is
975:33 - in pristine state you can just go ahead
975:35 - and redirect or move from this
975:38 - particular
975:39 - url so this is how you can uh
975:42 - use can deactivate card this was a real
975:44 - time example which i can give you
975:46 - sorry this was a real-time example which
975:48 - i can give you you can find more uh
975:51 - more real-time use cases in your
975:53 - application as you go
975:55 - but you don't have to probably you will
975:57 - not get the scenario i mean once you
975:58 - start the application so yeah this is
976:02 - it so
976:05 - now next what we are going to do is we
976:07 - are going to discuss about how you can
976:09 - use
976:10 - form control
976:11 - you might might be wondering okay we
976:13 - already saw form group and we also saw
976:14 - form control now why we are talking
976:16 - about form control again so we will see
976:18 - that example
976:19 - and we will apply
976:20 - that with a pipe
976:22 - so we will write our own custom pipe
976:26 - let's talk about the scenario where we
976:27 - are going to use it
976:32 - so on this page right so if you see this
976:34 - on on this page what we will do is we
976:36 - will add a text box here
976:39 - which will be like kind of filter where
976:41 - we can enter the room price and it will
976:43 - filter the values based on that roon
976:45 - price
976:46 - okay so let's see how we can
976:49 - do that
976:53 - so this is our rooms page
976:56 - let's go to the rooms component
977:01 - here
977:19 - so if you remember this values is
977:23 - actually coming from
977:24 - this particular service so we are
977:26 - calling room service and from here we
977:29 - are getting this all these values so
977:31 - what we will do is we will apply a
977:33 - filter
977:34 - something like this so let's let's let's
977:36 - try that out let's do uh let's write the
977:39 - code first
977:46 - so we are going to use reactive form
977:48 - here so we will add
977:50 - react deforms module first
977:56 - and
978:02 - let's create a form sorry form control
978:05 - because we just need a single control
978:07 - and to do that what we will do is we
978:09 - will create
978:12 - we'll call it as a search
978:15 - or
978:17 - price
978:19 - filter
978:26 - sorry
978:27 - which is is type of or which is
978:30 - equals to new form control
978:35 - remember this we are seeing new form
978:36 - control and we are passing default value
978:38 - as 0
978:40 - let's render this
978:42 - here
978:44 - we will say this is div
978:47 - and we will provide our input
978:51 - input
978:52 - type
978:53 - which will be number
978:55 - class which will say
978:57 - is form control place
978:59 - holder we will say this is
979:02 - twice
979:05 - and here
979:06 - as we don't have form group we will be
979:09 - using something known as
979:11 - form
979:16 - form control
979:20 - is equals to the
979:24 - price filter
979:26 - and let's
979:28 - do this so we will just
979:30 - put price filter here to see if whatever
979:32 - value we enter is getting applied or not
979:35 - so let's go ahead and
979:37 - test that first and then we'll apply the
979:39 - filter so we'll save this is
979:42 - admin
979:44 - and
979:48 - so uh
979:49 - you can see this value right this value
979:52 - is getting changed so as i have right
979:55 - now it's a control right so control will
979:57 - have all the properties pricing dirty
979:59 - all this all those properties
980:01 - what we are interested about is value so
980:03 - values getting changed that's it the
980:04 - first step which we have done is okay we
980:07 - are able to apply or sorry we are able
980:09 - to get the values from this particular
980:11 - control
980:12 - step undone now the next step which you
980:14 - want to do is we want to apply this
980:17 - value filter to this rooms list how we
980:20 - should do that
980:21 - so here
980:22 - what we will do is we will
980:25 - create another property called price
980:26 - filter
980:27 - so let's see
980:28 - how we can do that rooms list
980:31 - html
980:33 - and we will apply uh we'll pass that
980:35 - value here somewhere
980:37 - with a new pipe which will create so
980:40 - let's go ahead and create that pipe and
980:47 - so we can say ntg type and we'll see
980:50 - this is filter
980:52 - so
980:53 - i'm creating kind of a filter but
980:55 - remember never do that no never do that
980:57 - on a real-time application always go
981:00 - ahead and uh do filter sorting at your
981:03 - back end i mean at your api level just
981:07 - don't do it at your front end i mean
981:08 - this is just an example
981:11 - and now uh we can
981:13 - say okay this
981:15 - pipe will have multiple parameters so
981:17 - first parameter is something which will
981:19 - have
981:20 - the list of rooms so i'll say this is
981:22 - rooms
981:24 - and which will be of type
981:37 - let's see the type here
981:39 - room
981:40 - list
981:42 - right so we will say okay this is
981:45 - the array and the second parameter would
981:47 - be
981:48 - price
981:50 - which is type of number
981:53 - let's
981:56 - and here we will return we'll say okay
981:58 - this rooms
982:00 - drop filter
982:02 - where price is less than this price or
982:05 - sorry
982:07 - where rooms dot price is
982:09 - so if you enter 5000 so yeah it looks
982:12 - correct
982:13 - and then we can apply this filter pipe
982:15 - so let's see this
982:18 - rooms
982:20 - list
982:21 - we'll do one thing i'll just avoid this
982:24 - change direction strategy on push
982:27 - and then we can apply this pipe
982:30 - filter and we have to pass a value so
982:32 - let's pass 1000 right now
982:53 - no more phones
983:02 - let's see
983:06 - unknown was not assigning
983:15 - let's see
983:29 - let's fix this issue so it says uh
983:32 - unknown okay so here if you remember we
983:34 - are actually passing unknown here so we
983:37 - will say okay this will return an array
983:39 - we can remove this an empty array in
983:41 - case
983:42 - uh
983:43 - this that is this is not satisfied so
983:45 - let's go ahead and test this because it
983:47 - should work i mean we have we are
983:48 - passing hard coding this values right
983:51 - so let's go ahead and see our ui
983:56 - and we will say admin admin
983:59 - and you can see it only displays the
984:01 - values which is less than thousand less
984:03 - than equal to thousand
984:05 - right now we are not passing this value
984:07 - so
984:08 - let's go ahead and now fix that
984:10 - so this value will be our filter
984:13 - so we will
984:14 - take another input
984:18 - and we'll say this is price
984:21 - which is equal to 0
984:23 - and we will use this price
984:27 - here
984:30 - and let's verify again
984:32 - so
984:35 - and
984:36 - okay so there is nothing which is less
984:38 - than zero so
984:43 - i think our filter logic is wrong we
984:46 - should do this
985:02 - right so
985:03 - i want to filter everything which is
985:05 - above this particular value so yeah this
985:08 - looks correct
985:09 - and now
985:10 - let's pass
985:12 - this filter
985:15 - which is now a new person
985:17 - not filter but price which is the new
985:20 - property which we have added
985:21 - is equals to
985:25 - price filter
985:27 - dot
985:28 - value
985:30 - let's see
985:38 - and let's enter um
985:43 - 500 so you can see now i can see only
985:45 - values which is greater than 500 let's
985:48 - enter 5000 now we can see only values
985:51 - which is greater than 5000 so which is
985:53 - 15 there is only one record which is
985:54 - available
985:56 - so this is how you can combine form
985:57 - control
985:59 - with a filter so this is a real-time
986:01 - example which i can which i can give you
986:04 - and you can utilize that in case of you
986:06 - want to just create some filters on your
986:08 - page you don't want to have a form
986:10 - basically so in that case just utilize
986:12 - the form control that's it you don't
986:14 - need to create a form group
986:16 - so
986:17 - this is the flexibility which reactive
986:19 - forms gives you and then we apply it we
986:21 - added it with a pipe custom pipe where
986:23 - we wrote a logic that whatever price we
986:25 - provide
986:27 - it will
986:28 - filter out all the room first price
986:30 - which is greater than this price which
986:31 - is provided
986:32 - so this is it from reactive forms and
986:36 - let's move on
986:39 - now let's go ahead and talk about the
986:41 - last card which we had left and we said
986:43 - okay this card is
986:45 - little bit different from the existing
986:46 - cards we saw that okay can activate can
986:49 - deactivate connect with child and can
986:51 - load cards are related to the routes
986:54 - but
986:55 - what about resolve guard and why it was
986:56 - not available when we tried to create a
986:59 - guard and it was not available in the in
987:01 - the list of options which we had
987:04 - so
987:05 - this one card is actually related to
987:07 - data featuring
987:09 - okay let me okay just uh i said data
987:11 - fetching but it's not data featuring its
987:13 - state of prefetching
987:15 - so might be wondering what is data
987:16 - prefetching
987:19 - generally what we do is whenever we want
987:22 - to display some
987:23 - records or display some data what we do
987:27 - we go to the component and then
987:30 - we make a service call to get the data
987:33 - that's what we generally do
987:35 - but what in case let's say
987:38 - we have a requirement that okay this
987:40 - user should not
987:42 - go to this particular view until unless
987:43 - the data is available in case something
987:45 - goes wrong there is no point actually
987:48 - redirecting the user to that particular
987:50 - view
987:51 - so this is this is a scenario where
987:53 - resolve guard can help you so resolve
987:55 - card can help you preface the data let
987:57 - me show you an example
987:59 - we need some records for this and we
988:01 - will be using uh we'll let's do one
988:04 - thing we'll create another component
988:06 - and we need some data so we don't have
988:08 - some dummy data available right now we
988:10 - need like more than 1000 records
988:16 - or let's see how many records this json
988:19 - placeholder got
988:21 - so it has
988:22 - comments
988:24 - which has like 500 records
988:28 - okay let's uh see let's uh use this
988:30 - comments api
988:33 - and to do that uh what we will be doing
988:35 - is we will be creating another component
988:41 - and let's do
988:45 - so it's a nggm
988:48 - and this is post
988:50 - comment
988:53 - i'll use iphone fill route
988:56 - is equals to
988:57 - comment
988:59 - and hyphen iphone routing and i want to
989:02 - use um app module i want to register
989:04 - this in app module
989:09 - so this will be lazy loaded of course
989:15 - and we got this component and now what
989:18 - we will do is we will create a service
989:19 - for this
989:24 - and let's verify the routing so we have
989:26 - our route available here
989:29 - and okay everything is good now let's go
989:31 - ahead and create the service
989:36 - ngcs and then this is
989:39 - command service
989:45 - we are going to need a certificate
989:48 - module here
989:52 - as we are going to make an http call
989:57 - in service
990:01 - let's inject so it's private
990:04 - um
990:06 - http
990:08 - srdp inclined
990:11 - and we'll call get comments
990:14 - this dot
990:16 - http dot get
990:18 - and
990:24 - written
990:26 - this is the api so we'll use this
990:33 - done
990:35 - and let's uh do one thing i'll just put
990:38 - this and let's create a table
990:41 - and it's the class is table
990:45 - and then we will have pr where
990:49 - we will put our headers so we will have
990:51 - bunch of
990:53 - ph
991:16 - and say this is let
991:18 - command talk
991:20 - comments this is the property which we
991:22 - are going to use
991:24 - and then we will use some tds
991:30 - okay let's see how many properties we
991:31 - got post id id name 1345
991:35 - so let's go ahead and create an
991:37 - interface
991:38 - i'll call this as
991:41 - comment
991:43 - dot
991:44 - ts
991:46 - and let's create export
991:50 - interface
991:58 - we have
991:59 - id which was
992:01 - of type number
992:03 - post id which is the gain type of number
992:05 - is capital players
992:07 - we have name which is string we have
992:10 - email
992:12 - which is again string and then we have a
992:13 - body
992:14 - we go
992:16 - which is again string
992:18 - let's go to service and say okay this
992:20 - http get should return the comment array
992:25 - and this comment remember uh there is uh
992:28 - somehow there is an comment api which
992:30 - exists inside inside typescript itself
992:33 - so let's name it as comments just to
992:35 - avoid this issue which i faced in
992:39 - one of my project actually
992:45 - and
992:46 - let's go to component and here
992:48 - we will use the service so say private
992:55 - let's close this
992:57 - and we'll see this is
992:58 - command
993:00 - service
993:01 - this type of
993:03 - comment
993:05 - service
993:06 - and then we can just say this is
993:09 - comments
993:12 - is equals to this
993:14 - dot
993:18 - command service dot get comments okay so
993:21 - now we can use it here
993:24 - with the sync pipe
993:27 - and let's
993:28 - use
993:29 - comment dot
993:32 - id post id
993:37 - and your name
993:38 - [Music]
993:40 - so
993:42 - okay
993:52 - command of name
993:55 - and then we have email
994:03 - and let's not put body here and let's
994:06 - apply the same id
994:10 - post id
994:18 - name
994:20 - image
994:22 - it says okay so we are missing 5 async
994:27 - and
994:27 - let's format this format
994:30 - and
994:32 - let's add a navigation here
994:37 - and we will not apply any
994:38 - [Music]
994:40 - guard
994:43 - and this is
994:45 - comment
994:51 - let's go ahead and see so we have
994:54 - comments that will be here and it says
994:56 - this is not available comment is not
994:59 - available so
995:03 - okay i made a spelling mistake somehow
995:07 - comment
995:12 - okay so
995:14 - let's see one thing let's see a behavior
995:15 - here so you can see when i click on
995:17 - comments there is an empty page and then
995:19 - the data is getting loaded
995:21 - so
995:22 - what in case uh i don't want to show an
995:25 - empty page
995:26 - so this is also one scenario where you
995:28 - can actually use it
995:29 - that okay
995:30 - when my view is loaded it should be
995:32 - loaded with data not without data
995:36 - but remember keep one thing in your mind
995:38 - you can use resolve card with
995:42 - a
995:44 - use case where your data will not change
995:46 - after it is loaded
995:48 - okay so
995:50 - now let's try to fix this issue by using
995:53 - the resolve card so we will create
995:56 - a new
995:58 - folder here
995:59 - we'll call it as
996:01 - guard
996:02 - let's go to integrate terminal
996:06 - lcng
996:08 - and this is
996:10 - comment
996:12 - comment that so let's
996:16 - and you can see i don't have any option
996:19 - so i have to
996:20 - at least choose one so we'll use can
996:22 - activate but we'll remove it
996:26 - and then
996:27 - let's remove this one
996:29 - and we need resolve card so
996:33 - this is i think this is the one yep this
996:35 - will resolve that and we have to define
996:37 - what kind of data this resolve guard
996:39 - will written
996:40 - so we will say okay this will return the
996:42 - commands
996:44 - array
996:48 - and here
996:52 - let's there's an extra okay so you can
996:55 - see right now what i'm saying is it will
996:57 - uh return a
997:00 - value of observable of type comments
997:03 - or promise of comments or comments so we
997:05 - are saying this resolve interfaces which
997:07 - is coming from here
997:10 - okay so resolve of type t so which type
997:12 - of data you want to return
997:14 - so comments of array and this is it now
997:17 - let's go ahead and apply this command
997:18 - card and see how it is so you can see
997:21 - i'm just calling the same command
997:22 - service which which we were calling from
997:24 - the component earlier so
997:27 - let's go and apply this guard first so
997:30 - how we can do that
997:31 - we can go to the card
997:34 - and we can say resolve
997:36 - now resolve the way a result works is it
997:38 - is a key value player so you can say
997:40 - comments this is the key
997:42 - and then you can say okay this is the
997:44 - comment resolver
997:47 - right it's not available comments
997:49 - coming back okay
997:51 - great so now this will be returning the
997:54 - comments data
997:56 - and let's see how we can actually access
997:57 - this
997:58 - so this is the key remember this
998:02 - and to access this data now we can go to
998:04 - component
998:06 - and here let's use
998:11 - what do you think which service will be
998:13 - used here
998:14 - remember when we talked spoke about
998:17 - router we spoke about a service called
998:19 - activated route we said anything related
998:21 - to data
998:22 - you should use the activated route
998:24 - service
998:25 - so here we will of course use the same
998:39 - and first try to see if this data is
998:41 - available so we'll what we'll do is
998:43 - activated route dot
998:46 - sign
998:48 - we'll say data dot subscribe and let's
998:51 - see what we get here
999:03 - and we comment this out or let's let let
999:07 - it be as of now let's see
999:14 - and we can see this comment component.ts
999:17 - line number 19 which is actually giving
999:19 - us sorry which is also
999:22 - giving us this key so you can see it has
999:24 - a key comments and then it has 500
999:26 - records so let's try to access
999:32 - data
999:34 - dot
999:39 - um
999:41 - we can do something like this
999:47 - and let's see so now we will get the 500
999:51 - records rather than that
999:53 - which
1000:00 - just missed the console.log
1000:21 - and here it is so we have all the 500
1000:23 - records available and we have this data
1000:26 - prefaced it's not like we are actually
1000:28 - navigating to the route
1000:30 - and then getting the data no we are
1000:32 - prefetching the data so here we can also
1000:35 - do something like this let's try to
1000:38 - use it as a stream so i can say this
1000:47 - comments
1000:50 - stream is this dot
1000:52 - activated route dot
1000:56 - data and then we can use pipe of data
1001:01 - and
1001:02 - here
1001:04 - we can do
1001:07 - by
1001:09 - map
1001:11 - data
1001:25 - and we can use plug
1001:28 - to
1001:29 - get
1001:30 - the comments let's see let's try this
1001:32 - out
1001:42 - let's see if this is the correct use
1001:44 - case
1001:57 - okay no
1001:59 - we can apply
1002:01 - lock here
1002:13 - uh sorry this is not the way to use it
1002:15 - so we can just use this plug operator
1002:17 - here and then we can define what key
1002:19 - want we want to access
1002:20 - this is it so we can say okay this
1002:22 - command
1002:23 - is
1002:24 - we are getting this comment from
1002:26 - activated route data dot pipe and then
1002:28 - we are
1002:29 - plugging this particular key from the
1002:32 - stream
1002:34 - and we can remove this now we don't need
1002:36 - it i was just writing it to show you in
1002:38 - case you want to subscribe how you can
1002:39 - do
1002:40 - how you can actually do that
1002:43 - let's see the stream now
1002:46 - so rather than comments i'll be using
1002:48 - comment and see if it works so let's
1002:51 - save this and save this
1002:55 - okay now let's go ahead and move from
1002:58 - comments oh sorry move from any other
1003:00 - route to comments you can see there is
1003:02 - some delay but actually data is getting
1003:04 - loaded without any
1003:07 - blank page so because the data is
1003:09 - already prefaced it just need to render
1003:11 - it generally the approach with tag is we
1003:13 - take is we landed on the ui and now you
1003:16 - have to uh wait until your ng on init
1003:19 - lifecycle event will be called and then
1003:21 - it will go ahead and call your service
1003:23 - and load the data now
1003:24 - now we what we are doing is we are just
1003:26 - using the activated route data to pick
1003:28 - uh sorry plug
1003:29 - this uh data which is already provided
1003:32 - into your route so we already added this
1003:36 - uh into our resolve card so we are
1003:38 - saying okay before you migrate or sorry
1003:40 - before you navigate to this route
1003:44 - go ahead and
1003:46 - preface this data so this data should be
1003:48 - available before my user
1003:50 - will navigate to this so this is another
1003:52 - use case for using the prefetch or you
1003:55 - can say resolve card so i am keeping the
1003:58 - same uh both the ways
1004:00 - feel free to use whatever fits your
1004:01 - scenario i have also this code available
1004:04 - in case you don't think that this is
1004:05 - something which you need
1004:07 - generally we should not use this let me
1004:08 - show you a better way to do this
1004:11 - you can actually do
1004:12 - uh something like this you can provide
1004:14 - the type so you can say okay this is
1004:17 - this will be my
1004:18 - comment
1004:30 - comments which will be type of
1004:33 - comments
1004:35 - array
1004:37 - something this should work
1004:41 - no load matches this call when so
1004:54 - create anonymous function
1005:00 - comments and
1005:03 - comments is type of this area
1005:14 - let's see if it works
1005:19 - somehow
1005:40 - hmm strange
1005:49 - this is the best way we can do this
1005:53 - let me just remove it so we can say data
1005:55 - and
1005:57 - here
1005:58 - you can type cast here so you can
1005:59 - actually create a common create a
1006:02 - property
1006:03 - comments which is type of
1006:06 - comments
1006:07 - array
1006:08 - is equals to this and then you can say
1006:12 - that this dot
1006:14 - in comments
1006:16 - is equals to data of like this so this
1006:18 - is how you can uh do it
1006:21 - and you will get the typing after this
1006:23 - so in case these are three ways here we
1006:28 - call the method to get the data after we
1006:30 - landed on the view this is
1006:33 - using the resolve method and we use the
1006:35 - stream we uh we have not used uh the
1006:38 - subscribe method we have not manually
1006:40 - subscribed which we did here
1006:42 - but uh choose when which fits your
1006:44 - scenario
1006:48 - now in this video we are going to talk
1006:50 - about how you can do global error
1006:51 - handling we have seen like how we can
1006:54 - do error handling for http service but
1006:56 - what in case we want to do it at global
1006:58 - level
1006:59 - okay so let's go ahead and try that out
1007:03 - so angular provides you a
1007:06 - class
1007:08 - that's a class
1007:11 - sorry so angle provides you a
1007:13 - service which which is already available
1007:15 - called error and handler so
1007:18 - what you can do is you can actually
1007:20 - extend that particular service and you
1007:22 - can provide your own info your own
1007:23 - implementation
1007:25 - so here let's uh
1007:27 - go ahead and do that
1007:30 - so i'll create a class
1007:32 - here called
1007:34 - error
1007:38 - handler
1007:39 - service parties
1007:42 - and we'll create this class export class
1007:46 - and we'll call it as global
1007:51 - error
1007:52 - handler
1007:54 - which extends
1007:57 - error
1008:00 - handler
1008:03 - and now uh you can just call the handle
1008:06 - error method so let's see
1008:17 - this must have an overwrite
1008:26 - okay let's see
1008:27 - so we have error handler implements
1008:30 - error handler and
1008:32 - handle error
1008:33 - which does something so i'm just
1008:35 - wondering what's
1008:37 - wrong here
1008:38 - that should be
1008:49 - okay you
1008:51 - looks correct to me okay sorry
1008:53 - implements
1008:55 - implements error handler and then it's
1008:57 - it's a actually you can see it's a class
1008:59 - but you can also implement it because it
1009:01 - provides a single method which is
1009:04 - just like a method definition not the
1009:07 - implementation so i can just go ahead
1009:08 - and implement it and then we are just
1009:11 - doing console.log right now
1009:13 - now to handle this to register this you
1009:15 - can of course go ahead and see how we
1009:16 - can do it so you have to go ahead and
1009:18 - add it into providers
1009:20 - like this so let's copy this
1009:23 - and let's go to our app module because
1009:25 - we want to actually handle the uh
1009:29 - error at global level
1009:33 - and we'll say okay this is provide error
1009:36 - handler and then
1009:38 - this is our global
1009:40 - error handler class
1009:42 - now we need to introduce some error
1009:44 - let's do that
1009:48 - let's verify if it is working fine right
1009:50 - now so
1009:51 - okay nothing uh no issue so what we will
1009:54 - do is we will go to this comment abn
1009:58 - command service and then we will just
1010:00 - make some mistake here right so this api
1010:03 - does not exist and it will throw an
1010:04 - exception
1010:05 - now you can see uh there is an error
1010:08 - handler line number of five which says
1010:11 - http error response and this says okay
1010:14 - this api does not exist right or the
1010:16 - status code is 404 it means it is not
1010:18 - able to
1010:19 - go ahead and catch this particular api
1010:21 - or
1010:22 - go ahead and access this particular api
1010:24 - so it says again it does not exist and
1010:26 - we are able to handle this exception at
1010:28 - global level by using our new global
1010:31 - error handler class
1010:33 - and
1010:34 - you can do more right i mean it's not uh
1010:36 - in our example we are just using the
1010:38 - console.log but you can actually send it
1010:40 - to your backend or you can actually send
1010:43 - it to your
1010:44 - whatever apis which you have
1010:46 - and you can save this error somewhere
1010:49 - so whenever you are revisiting your like
1010:52 - error logs to see if there is some
1010:54 - problem which
1010:55 - your users are facing because there are
1010:57 - some
1010:58 - edge cases right we generally miss out
1011:00 - so just go ahead and add error vendor
1011:01 - class and lock all the errors until
1011:04 - unless your
1011:05 - application becomes stable and then you
1011:07 - can remove it
1011:09 - let's
1011:11 - talk a little bit about testing
1011:13 - of course when whenever you are working
1011:15 - on some application you need to also
1011:17 - write unit test cases that's the
1011:19 - developer's job but there are many types
1011:21 - of testing which is uh
1011:23 - which is done so we have unit test cases
1011:25 - or unit testing which is written by
1011:27 - developers and then you also have
1011:29 - something known as integration test or
1011:31 - end-to-end test which is generally done
1011:33 - by the testers so
1011:36 - the tools are a little bit different so
1011:38 - for example for end-to-end test tests
1011:40 - you can use something known as cypress
1011:43 - or
1011:44 - other tools like playwright which is
1011:46 - also available you can use
1011:49 - and a lot of
1011:50 - older applications used to have
1011:53 - a protector so protector is discontinued
1011:56 - now angular team decided to drop
1011:58 - maintaining it so they are not
1012:00 - maintaining it anymore and they have
1012:02 - also dropped this dropped creating an
1012:04 - end-to-end application with
1012:07 - angular cli so before
1012:09 - before angular 12 they uh whenever used
1012:12 - to create a new application there used
1012:14 - to be a end to end application as well
1012:16 - which used to be created but now uh it
1012:18 - is not created anymore so you have to go
1012:19 - ahead and add any uh compatible uh
1012:23 - end-to-end uh
1012:25 - test suit to your application so cyprus
1012:28 - is preferred which is used by many
1012:30 - large
1012:34 - organization it is open source project
1012:36 - uh there are some paid features which is
1012:38 - like dashboard which is which which
1012:40 - probably you you will not need that much
1012:42 - but yeah it's an open source project so
1012:44 - you can go ahead and use it for free
1012:47 - so let's see what we are going to cover
1012:49 - here so we are going to talk about unit
1012:50 - test that's it so we will introduce you
1012:53 - to tests
1012:54 - and then we'll talk talk about how you
1012:56 - can write your first test and then we'll
1012:58 - see how we can test a component and how
1013:00 - we can test test a service
1013:02 - let's go ahead and do that
1013:05 - so angular by default gives
1013:08 - the setup for
1013:10 - unit test so remember this karma
1013:12 - converges and we spoke with we said
1013:15 - while going through the project
1013:16 - structure we said this is the file which
1013:18 - will be used by uh your task runner
1013:21 - that's it
1013:22 - but we never discussed more
1013:24 - more about it so
1013:26 - angular uses karma plus jasmine to
1013:29 - write the test case so you can actually
1013:31 - do ng test you can run this command and
1013:34 - it will run all the
1013:36 - test file which is available here which
1013:38 - ends with dot spec dot ds of course
1013:41 - right now if we execute it
1013:43 - you will get a lot of errors so let's
1013:45 - see i mean so it's starting the chrome
1013:47 - browser this is how it looks like
1013:50 - it does
1013:51 - there are many type of reports uh
1013:54 - reporter which we have available right
1013:55 - now this is html reporter which uses
1013:57 - chrome
1013:58 - and it it will open everything in chrome
1014:00 - and it will show you how many tests are
1014:02 - getting passed how many tests are
1014:04 - getting failed
1014:07 - so let's go ahead and see that
1014:22 - so it says incomplete no specs found
1014:25 - somehow
1014:27 - because there are some errors right so
1014:28 - you can see
1014:29 - there are some errors which is making
1014:32 - this
1014:39 - so let's see what this error is it says
1014:41 - expected to argument right now what we
1014:42 - will do is we will just
1014:44 - remove this
1014:51 - and let's see
1014:53 - so at least we get the uh feel right how
1014:56 - your ui looks like
1014:58 - once you run the ng test and how your
1015:00 - report looks like sorry
1015:03 - testing is a whole topic all together so
1015:06 - it says
1015:07 - there are because there are different
1015:08 - tools which are available so we are not
1015:10 - going to go into that much detail here
1015:12 - it will just we will introduce you to
1015:13 - the testing
1015:17 - and let's see
1015:19 - probably there are no errors you can see
1015:20 - right now so uh there it says there is
1015:23 - 32 specs which
1015:24 - out of which 21 is failed so you can see
1015:27 - spec list the green ones
1015:30 - zoom in so this green ones
1015:33 - is successful and this
1015:36 - red ones of course it shows that this
1015:37 - this is a failure so this is how you can
1015:39 - figure out okay which test is getting
1015:41 - passed which can which test is getting
1015:43 - failed uh so here in command service
1015:45 - should be created so you can see okay
1015:47 - it's not
1015:49 - uh it is giving me error right now so
1015:51 - you can just click on the test as well
1015:53 - to see what's going wrong
1015:55 - so it says okay
1015:57 - it says no provider for stripping line
1015:59 - so while testing we are not providing
1016:00 - the http line module so that's the
1016:02 - problem so we can fix it so let's see
1016:05 - let's try to do that so here in command
1016:08 - service
1016:09 - uh service dot spec we can do
1016:12 - [Music]
1016:14 - test
1016:15 - configure testing module and then we can
1016:17 - say import
1016:20 - http
1016:25 - client testing module so there is
1016:26 - something known as stupid client
1016:30 - skippy
1016:31 - testing
1016:38 - what's that called html
1016:40 - let's say the p client module let's
1016:42 - reclined
1016:47 - okay let's try to pass the stripy client
1016:50 - module right now and see
1016:55 - because this http client of course
1016:57 - exists inside http line module
1017:00 - so
1017:00 - [Music]
1017:04 - okay uh let's see specialist okay it's
1017:07 - green failed
1017:20 - and let's see failures
1017:23 - and now you can see there are 20
1017:24 - failures so earlier there was 21
1017:26 - failures so probably
1017:28 - let's go to spec list and see comment
1017:37 - so you can see comment service created
1017:39 - passed
1017:40 - but uh i mean this is just to show you
1017:42 - how the report looks like and how you
1017:44 - can see uh what is the error you can
1017:45 - just click on this line and it will tell
1017:47 - you uh that okay this is the actual
1017:49 - error and why this particular test is
1017:51 - getting fit so let's go ahead and try to
1017:53 - write a little bit
1017:55 - of test cases for a component and a
1017:58 - service
1018:00 - see how we can write a sample test case
1018:03 - using jasmine so the idea is to give you
1018:06 - uh
1018:08 - sorry
1018:09 - so uh the thing is uh it will give you a
1018:10 - little bit idea how you can actually
1018:12 - write adjustment test cases and let's
1018:14 - create a test file so i'll say this is
1018:16 - test test.spec.ds
1018:21 - so here uh generally what you do is you
1018:24 - write a describe block
1018:26 - where you will describe that what you
1018:27 - are trying to test
1018:29 - and to do this i'll create a file as
1018:32 - well so i'll say this is
1018:34 - test
1018:35 - dot ds
1018:37 - so
1018:38 - let's see if there is another test.dcs
1018:42 - so i'll say this is test
1018:43 - service
1018:45 - dot ds
1018:46 - so the first thing is you will write
1018:48 - that okay let's
1018:53 - let's add a class which is
1018:56 - uh
1018:58 - calculator class
1019:03 - and then we will have some functions
1019:05 - which will say one is add
1019:08 - and then we have subtract
1019:10 - and multiply
1019:12 - okay so there's a few uh few
1019:14 - implementations which we have inside
1019:16 - this calculator class let's go ahead and
1019:18 - see how we can test it so the first
1019:19 - thing is
1019:20 - uh we need to import what we are trying
1019:22 - to test so it's okay we are trying to
1019:24 - test
1019:26 - service
1019:27 - so it's okay this is describe
1019:31 - and we'll say this is test service
1019:34 - and we'll see okay this is
1019:36 - where we are writing the code so
1019:39 - your
1019:41 - tests should look like a story so we are
1019:43 - saying okay we want to test this so in
1019:46 - describe we are saying okay we are
1019:48 - trying to test this particular service
1019:51 - and then you will write the steps what
1019:53 - you are trying to achieve
1019:54 - so first is of course i will say uh
1019:57 - should
1019:59 - add two numbers
1020:02 - right so this is one of the tasks or one
1020:04 - of the test case uh for our particular
1020:06 - this particular service so i can say
1020:08 - okay const uh service
1020:13 - is equal to new
1020:15 - uh
1020:15 - test service which really
1020:18 - take it
1020:19 - uh sorry import it from here
1020:25 - what was the name
1020:28 - not calculated sorry
1020:30 - so we created a new calculator service
1020:33 - and then we can do something like this
1020:34 - so we can say expect
1020:36 - so uh we have to write our expectation
1020:38 - that what this test case should do so we
1020:42 - are saying that okay whenever we run
1020:44 - this test case
1020:45 - just go ahead and add this to number and
1020:47 - the
1020:48 - answer should be 4 that's our
1020:50 - expectation so similarly i can just do
1020:52 - it for uh should
1020:54 - subtract
1020:56 - two numbers and then we can say if this
1020:58 - is subtract and
1021:03 - we'll say answer should be zero
1021:07 - let's go ahead and run this so we can
1021:10 - just to insert test and it will go ahead
1021:12 - and run all the test case because this
1021:14 - file matches the
1021:16 - format which is dot
1021:18 - spec.ts it will open it in browser
1021:32 - so a lot of
1021:33 - projects also use something known as uh
1021:36 - just
1021:37 - for testing
1021:38 - which is little bit faster but right now
1021:40 - it's not compatible with angular 13
1021:42 - that's one of the issues
1021:48 - okay
1021:48 - so uh we are saying we are seeing now
1021:50 - there are 34 specs and let's go to spec
1021:53 - list and
1021:54 - let's see calculator one
1021:56 - i'm sorry we said test service right
1021:59 - yeah so you can see uh these two
1022:03 - these two tests are getting passed so
1022:05 - should add two numbers and should
1022:06 - subtract two numbers it's getting past
1022:08 - so this is how you actually will be
1022:10 - writing the test start with describe
1022:12 - block and then you will be writing the
1022:13 - story that okay what now this this
1022:16 - should do so it should add two numbers
1022:18 - it should subtract two numbers
1022:20 - so this is a simple test case
1022:48 - and see how we can
1022:50 - test our service
1022:52 - so here let's try to do a service
1022:56 - let's try to test this shared data
1022:57 - service right so we already have a spec
1022:59 - file available here
1023:00 - and
1023:01 - there is something known as configure
1023:03 - testing module which we don't need right
1023:04 - now but
1023:06 - let's see
1023:08 - what we can achieve using this so here
1023:11 - i will say it should
1023:16 - emit
1023:19 - the message basically what we are going
1023:22 - to do here is we are going to test the
1023:25 - uh send message right so if you remember
1023:27 - in shared data service we said
1023:30 - send message which actually
1023:34 - emits
1023:35 - a new message
1023:36 - right so
1023:38 - i'm sorry so if it emits a new message
1023:40 - so we will check this so here we will do
1023:44 - this dot our service
1023:46 - dot set message
1024:05 - okay and once we do this the expectation
1024:07 - is
1024:08 - we should get a hello message
1024:11 - in this stream so we will do something
1024:13 - uh simple right now so we can say
1024:15 - message
1024:17 - dot subscribe
1024:22 - and then we can say
1024:24 - uh expect this message to be hello so
1024:28 - sorry this will be service dot
1024:30 - message stream and then we'll say
1024:32 - message to be hello
1024:34 - and now let's stop this let's uh
1024:36 - disconnect the test we will also see
1024:39 - something uh ng test hyphen iphone code
1024:43 - coverage let me tell you about this as
1024:45 - well
1024:48 - while testing you can also test how much
1024:50 - code is being covered by your test cases
1024:52 - so
1024:54 - there is no hard rule i would say i mean
1024:55 - it depends upon how much code you think
1024:57 - is worth testing
1025:00 - sometime of course we set a hard target
1025:02 - that we should go for hundred percent
1025:04 - test for uh coverage or we can
1025:06 - uh go to eighty percent code coverage i
1025:09 - think it's it's a false uh alarm i would
1025:12 - say most of the time you may get a false
1025:13 - alarm the thing is you should
1025:15 - concentrate on
1025:17 - what logic is worth testing i mean do
1025:19 - you think this this should be tested if
1025:21 - it is not i think it's okay to skip so
1025:24 - here let's see what is wrong
1025:27 - i think there is an extra bracket here
1025:30 - so
1025:38 - message
1025:40 - then it should close here
1025:42 - and then we have
1025:44 - the
1025:45 - outer one and closed let's see
1025:49 - so
1025:51 - it's completed now tests are running
1025:54 - and you can see the one which we are
1025:57 - looking at
1025:58 - is
1026:00 - shared
1026:01 - let's go to the spec list first
1026:05 - shared so you can see shared uh data
1026:07 - service and
1026:09 - it says this was successfully so
1026:12 - should i meet the message it means uh
1026:14 - what our expectation was that whenever
1026:16 - we
1026:18 - send uh this set message whenever we
1026:20 - call this set message it should go ahead
1026:21 - and
1026:22 - message
1026:24 - whoever has subscribed to the message
1026:26 - should get this hello message and that's
1026:27 - what we tested and it worked
1026:29 - so here you can see uh the code coverage
1026:31 - is of course right now pretty bad so we
1026:33 - have statements which is covered at 43
1026:36 - lines 38 of 9 38.9 of lines are covered
1026:40 - and then we have functions which is like
1026:41 - 34 percent covered
1026:44 - so uh now let's go ahead and see an
1026:46 - example of a component so we already
1026:48 - have some components which is getting
1026:49 - failed right so let's see rooms
1026:51 - component should create
1026:54 - now let's see how we can actually fix
1026:55 - this particular test case and you can
1026:57 - click on error and see what is the error
1026:59 - so it says okay the thing is you need to
1027:01 - provide an injection token
1027:03 - okay
1027:04 - let's see how we can work with this
1027:07 - there is
1027:08 - a few there are few errors so let's see
1027:11 - let's go to what is this
1027:19 - not room service but
1027:22 - which component was this room
1027:25 - it was at rooms component let's let's go
1027:27 - back
1027:29 - i think it was rooms component so let's
1027:31 - go back to rooms
1027:35 - component prospector keys okay
1027:37 - so we have this it says okay we we have
1027:40 - not provided the config service because
1027:42 - remember uh you have to go ahead and
1027:44 - provide all the services which your
1027:46 - component is using right now so it uses
1027:49 - room service it uses config services you
1027:51 - it uses shared service
1027:53 - so we can uh
1027:55 - go to our site
1027:56 - we can go to this and here
1028:00 - we can add providers so we can say okay
1028:02 - providers parry
1028:05 - and let's
1028:06 - add all those providers which are being
1028:08 - used so we have room service we have
1028:12 - config service
1028:15 - and we have a shared data service
1028:18 - and let's import each one of these
1028:26 - and
1028:28 - let's see
1028:31 - now uh let's see what's the error we are
1028:34 - getting right now it says also activated
1028:36 - route is not provided
1028:38 - and http client will see some uh the
1028:41 - errors will be gone one by one so it
1028:44 - means we need uh to import
1028:49 - imports that should be
1028:51 - client module
1028:57 - let's see http
1029:00 - i think that was testing as well
1029:03 - and institute
1029:05 - we can use the testing module rather
1029:08 - than actually original module we can say
1029:09 - okay i want to use the testing model not
1029:12 - the original one so
1029:13 - once this is done let's see
1029:18 - let's refresh
1029:22 - so
1029:24 - now we will see
1029:25 - less number of errors here so it says
1029:28 - now let's talk let's see http error it's
1029:31 - gone right so we don't have http any any
1029:33 - more
1029:34 - then it says okay uh this one from
1029:37 - comment component we don't need this so
1029:39 - let's go to the special list
1029:41 - look for
1029:43 - rooms component and let's go to should
1029:45 - create
1029:47 - and see the errors
1029:52 - so now the problem is it says room
1029:54 - service which uses injection token so we
1029:56 - have to provide the injection token now
1029:58 - let's see what how we can do that
1030:00 - so rooms
1030:01 - service
1030:03 - and this is the injection token which is
1030:05 - being used so we can actually mock this
1030:07 - we can do something like this here
1030:10 - you can say okay provide
1030:15 - app service config
1030:18 - and then you can we can say use uh value
1030:26 - so let's see uh what this app config is
1030:29 - so it has api endpoint
1030:31 - so we can go back to our
1030:33 - component.spec.ts and say okay this is
1030:35 - atm point
1030:37 - is
1030:41 - this dummy value so
1030:43 - you can
1030:44 - provide any dummy value you want to
1030:47 - and now let's see
1030:53 - okay it's getting disconnected
1030:57 - let's rerun
1031:06 - and let's go to specialist
1031:10 - rooms
1031:11 - component should create and let's see
1031:13 - the error now
1031:15 - so we have
1031:18 - now the
1031:20 - thing is config service also uses an
1031:22 - injection token
1031:23 - so let's see so config service
1031:26 - it uses injection token call config
1031:28 - token
1031:29 - let's provide the same so we can say
1031:32 - provide
1031:34 - cloud config token
1031:37 - and
1031:40 - we need the value so right title
1031:44 - so here
1031:45 - we can
1031:47 - go back let's
1031:51 - and say
1031:52 - use
1031:54 - value
1031:58 - title
1031:59 - as
1032:00 - booms
1032:02 - and
1032:03 - let's see
1032:06 - so now this this injection token should
1032:08 - be also resolved so you can pass uh
1032:09 - values like this you can also re replace
1032:11 - these services as well so you can create
1032:14 - an empty service let me show you that
1032:16 - example as well let's refresh this it
1032:18 - says it disconnected again
1032:34 - let's go to special list
1032:37 - rooms
1032:39 - rooms component should create and let's
1032:41 - see what is the error now
1032:47 - so it says cannot set properties of
1032:49 - modified undefined setting title so now
1032:52 - it is trying to call the
1032:54 - methods which is available here so you
1032:56 - can see it says uh here
1033:01 - so these are the methods which are being
1033:02 - called so it is trying to now execute
1033:04 - all those methods so here
1033:07 - it says uh
1033:09 - after viewing it line number ta130 so
1033:13 - line number 130 is this so it says
1033:15 - header component or title rooms which is
1033:18 - a valid failure if you remember what we
1033:20 - did is we have removed header component
1033:22 - from here
1033:23 - so it doesn't exist anymore so
1033:27 - uh it was a valid test case uh valid
1033:29 - failure which got
1033:31 - uh captured so we can actually do
1033:34 - something like this right so we can
1033:36 - actually uh enable this header component
1033:38 - so we we can put one header component
1033:40 - and see if it works
1033:42 - right so i can say hi and b header and
1033:46 - you will find now another error being
1033:48 - replaced
1033:49 - being
1033:51 - rendered so let's refresh
1033:54 - so as soon as you are like
1033:57 - earlier we were getting some error
1033:59 - because the services which we provided
1034:02 - were not correct so now we provide all
1034:04 - the services all
1034:06 - everything
1034:07 - and
1034:09 - it is trying to execute engion in it and
1034:12 - it is trying to execute ng after minute
1034:14 - so it will start calling all the life
1034:16 - cycle looks
1034:17 - so
1034:18 - looks like there is some issue with this
1034:23 - anyway so we can do one thing
1034:26 - as we know that this is not the scenario
1034:28 - this won't be available anyways we'll uh
1034:31 - save i mean replace this and comment
1034:33 - this out
1034:36 - and let's see
1034:41 - [Music]
1034:44 - so now we should get a different error
1034:46 - ah okay it's completed so you can see
1034:48 - should create so now your component is
1034:50 - initialized now you can go ahead and
1034:51 - check for the methods
1034:53 - right so we can add another let's say
1034:57 - uh
1034:59 - method so let's for example uh let's try
1035:03 - the toggle
1035:05 - so i'll say it
1035:08 - should
1035:12 - toggle
1035:16 - so uh
1035:23 - so uh what we need to do is we have to
1035:24 - say component.toggle and expect what
1035:27 - should we expect so we should expect
1035:29 - hide rooms
1035:32 - right so we can say uh here we can set
1035:35 - component
1035:42 - dot hide rooms
1035:44 - is equals to false and once we call
1035:46 - toggle
1035:47 - we should it should become true that's
1035:49 - what the expectation is so let's go
1035:50 - ahead and see if it works
1035:52 - again build the connection
1035:54 - that's why uh people use just and or we
1035:57 - we can also use
1035:59 - the reporter as your command prompt
1036:02 - that's also fine
1036:03 - and let's see so now rooms has
1036:06 - our
1036:08 - rooms should toggle right so you can see
1036:10 - should toggle is also completed it means
1036:12 - now this test is also passed
1036:14 - so similarly you can call different
1036:16 - methods and see if they are getting
1036:18 - completed or not in services as well we
1036:20 - uh
1036:21 - saw an example how we can work with
1036:23 - observables
1036:24 - so you can just call the method and see
1036:27 - if this observable is limited or not so
1036:29 - this is just a basic understanding of
1036:31 - testing because as i mentioned testing
1036:33 - is a huge topic in itself and
1036:35 - there are some courses which are i mean
1036:38 - we can probably go ahead and create
1036:40 - another course covering all those
1036:42 - scenarios so this is it from this
1036:44 - particular course
1036:47 - this video we will see how we can
1036:49 - deploy our application
1036:52 - on netlife so there are many providers
1036:55 - many cloud providers where you can
1036:56 - actually go ahead and deploy your
1036:58 - front-end application network being one
1037:00 - it's it's really simple to use so let's
1037:03 - go ahead and see how we can
1037:04 - do that
1037:05 - right so first thing which we need to do
1037:07 - is we need to push this code on github
1037:09 - we have not done that let's do it
1037:16 - so i'll go ahead and create an account
1037:18 - uh sorry my repository first thing which
1037:20 - you have to do is you have to create
1037:21 - your account that's the that's the step
1037:24 - one
1037:25 - and now i can go to my repositories and
1037:27 - i can create a new repository from here
1037:30 - and here i am going to name it as
1037:35 - hotel
1037:37 - in
1037:38 - mandatory
1037:47 - let me just zoom in
1037:49 - yeah so hotel inventory this is the uh
1037:53 - and
1037:54 - let's see
1037:56 - i'll keep everything as
1037:58 - as it is
1038:00 - let's see if we have
1038:06 - hmm
1038:08 - right now i have made this repository
1038:10 - public but
1038:12 - we'll move it to private
1038:14 - as the netlify
1038:16 - will charge me for deploying
1038:18 - and repository which is private so i'll
1038:21 - just use it try public right now
1038:23 - and once this is done i need to actually
1038:25 - push the existing code base so i'll do
1038:27 - this
1038:28 - here
1038:31 - get this as a branch this is final
1038:34 - code
1038:37 - and you get
1038:38 - i'll commit this changes git commit and
1038:41 - we'll say
1038:43 - first let's add all make sure that all
1038:45 - files are added
1038:46 - and then we'll add a commit
1038:50 - and we will say this is
1038:53 - final code
1038:55 - and let's move back to the master
1038:59 - okay so this somehow this change was
1039:02 - left
1039:12 - add
1039:16 - means changes
1039:20 - and let's move back to
1039:22 - the main branch and as we already have
1039:25 - the code available so
1039:27 - our repository available on my local
1039:29 - machine we'll be using this one this
1039:30 - command
1039:32 - so let's add
1039:35 - then we need to do is
1039:37 - push
1039:43 - actually this command was to change the
1039:44 - branch name domain but we already
1039:46 - were using the branch name as main and
1039:48 - now let's push this code
1039:52 - and look let's refresh this
1039:56 - and then right so we have this this
1039:59 - repository available now let's go back
1040:01 - to netly file
1040:02 - sorry let's go to netlife if i login i
1040:05 - already have my account available in
1040:07 - case you don't have it just go ahead and
1040:09 - create one so just login
1040:15 - and
1040:21 - in package.json i am going to add a
1040:24 - command
1040:26 - which will be build rod so to build the
1040:29 - broad uh
1040:32 - plot bundle we have already seen the
1040:33 - command so we we use ng
1040:36 - uh
1040:37 - build
1040:38 - hyphen c is equals to production
1040:42 - so this will this command will be used
1040:45 - so i'll just add get add
1040:48 - get comment
1040:51 - add
1040:52 - pod
1040:53 - build
1041:00 - okay somehow this file was not staged
1041:03 - properly
1041:06 - okay
1041:07 - so let's see if latest changes are
1041:10 - available
1041:13 - and this
1041:16 - okay i have to push
1041:18 - okay so i pushed i have post all the
1041:19 - changes here and now it should be
1041:21 - available
1041:24 - so add plot build the list commit is
1041:26 - available here let's go to the nutley
1041:28 - file and you we can what we can do is we
1041:30 - can go ahead and say
1041:31 - uh
1041:38 - add new site
1041:40 - import an existing project from github
1041:45 - and it will uh i'm already authorized
1041:48 - and let's uh
1041:50 - find this repository
1041:53 - hotel inventory
1042:01 - select
1042:03 - and the branch to deploy is main
1042:05 - okay
1042:06 - and uh
1042:08 - it says okay if you if you are using uh
1042:10 - something else i mean some
1042:14 - if you're using monorepo this base
1042:15 - directory is useful right now it's not i
1042:17 - mean we are just uh having a single
1042:20 - project
1042:21 - then we need to provide
1042:23 - this plot build command here so i'll say
1042:26 - npm run build plot and publish directory
1042:28 - is something which you can get from
1042:30 - angular.json so if you go to the
1042:33 - production sorry build and here
1042:36 - configuration production you will find
1042:41 - what is that
1042:48 - some somehow it is not available here
1042:50 - but generally when you create a
1042:51 - production build the file goes to dst
1042:54 - slash your application name
1042:56 - so
1042:56 - this tst slash your
1042:59 - hotel inventory amp so this is where my
1043:02 - files will be available so i want to
1043:05 - publish this directory
1043:08 - and let's click on deploy site
1043:11 - and now your deployment has started
1043:13 - and let's see it is building you can see
1043:15 - the log here so it will start
1043:19 - deploying the application it says it is
1043:22 - using node version 16 which is now
1043:26 - available and
1043:30 - somehow i already have back i also have
1043:32 - package log file available i can remove
1043:34 - this if i want to we will remove it
1043:37 - and
1043:48 - and uh nutify also has this great
1043:51 - functionality where you can actually
1043:53 - play a game until unless your code is
1043:55 - getting deployed right so this is like
1043:58 - card match
1043:59 - you can
1044:00 - play
1044:17 - let's see uh it is taking some time
1044:22 - if it doesn't work we can actually
1044:24 - yeah it's done so build command from
1044:25 - netlify app and vm run build prod which
1044:28 - it is actually generating the bundle
1044:30 - right now and once this is done you will
1044:32 - be able to see uh a link
1044:35 - okay so it says
1044:37 - preview deploy
1044:40 - and you can see uh this is the master
1044:42 - code right i mean um we have we don't
1044:44 - have anything available in our master
1044:46 - code so this is how it looks like i mean
1044:47 - this is the default page which we had so
1044:50 - now
1044:52 - all our changes are actually in this
1044:54 - file final code folder
1044:56 - so what we can do is we can actually
1044:58 - raise a pr so i'll just do one thing
1045:00 - i'll just push
1045:02 - uh this branch
1045:04 - so you can see it says okay you have to
1045:06 - push this particular branch i mean
1045:08 - so i'm pushing this branch right now
1045:12 - let's go to the github
1045:15 - and let's
1045:16 - raise a pull request so it goes to the
1045:19 - final code to the fro to main let's
1045:22 - create a pull request
1045:27 - and the only thing which we have to do
1045:29 - is now it will fail so you can see
1045:32 - uh right now
1045:34 - i we did nothing so whenever you will
1045:36 - raise a pull request
1045:38 - it will auto
1045:40 - deploy it will auto deploy your changes
1045:42 - on netlife so this is what csd means
1045:46 - right so you you should be able to do
1045:47 - continuous integration and deployment so
1045:50 - you don't have to wait
1045:52 - till your code is merged into the main
1045:54 - branch to see the latest changes here we
1045:56 - are saying okay
1045:58 - as soon as you open the pull request
1046:00 - it will deploy it will merge and give
1046:02 - your temporary url so right now it is
1046:04 - failing because we don't have the
1046:06 - publish uh sorry build command
1046:09 - which is available here so if you
1046:11 - remember we
1046:12 - made that change in master so we can
1046:14 - actually go ahead and add that
1046:16 - particular command here and then we'll
1046:18 - push it again
1046:19 - to make it work and then we'll see how
1046:21 - your temporary
1046:23 - url looks like
1046:25 - right so i will say this is
1046:29 - move it
1046:37 - and
1046:38 - build
1046:39 - command
1046:41 - okay somehow get ad is not working right
1046:43 - now
1046:44 - so let's space changes from here and
1046:48 - let's push
1046:55 - and as soon as we do push let's go back
1046:58 - to
1046:59 - our branch
1047:04 - and it will try to build this code again
1047:06 - right so it started the build again and
1047:09 - once this is done it will you can see
1047:11 - this is the depaul deploy preview
1047:13 - processing so
1047:14 - it will give you a link once you click
1047:16 - on this details link it will open the
1047:18 - page it will open the application which
1047:20 - will be having a temporary url so
1047:23 - netlify gives a random generated url
1047:27 - to every application so this is our
1047:29 - random generated url for this
1047:31 - application but our preview branches
1047:33 - will have a different url
1047:34 - so let's see
1047:36 - it will take few minutes uh sorry few
1047:38 - seconds to complete this deployment
1047:41 - and once done we can see this code is
1047:43 - available i mean
1047:44 - the latest changes are available here
1047:47 - i mean once you merge it right so once
1047:49 - we merge the code back to the main
1048:08 - we'll not merge this pr so you can go
1048:11 - ahead and see the difference between
1048:13 - your master code main code which was
1048:15 - just uh
1048:17 - like
1048:18 - a startup or you can say start template
1048:21 - using angular cli and the final changes
1048:23 - so you can see click on deploy url and
1048:25 - this is this is the application which we
1048:27 - created right so we have this booking
1048:28 - form available we have this login which
1048:32 - was available earlier right so
1048:34 - admin
1048:36 - and we
1048:36 - can to admin and you can see
1048:39 - you have your view available here you
1048:41 - can just click on send message which is
1048:43 - available here rooms
1048:45 - where this message is available also so
1048:47 - you can see deploy preview condensing so
1048:49 - this is your preview branch so this is
1048:51 - how you can actually set up your ci cd
1048:53 - for using netlify
1048:55 - uh go ahead and deploy your application
1048:57 - netlife is free for open source i mean
1048:59 - right now i'm just going to make this as
1049:01 - private so
1049:02 - uh you you you can go ahead and get the
1049:05 - access to this code later on
1049:07 - so
1049:10 - in this video we will see how you can
1049:12 - also use utilize github action to build
1049:15 - your application so remember we are just
1049:17 - talking about building because we have
1049:19 - already have cicd available with
1049:21 - your netlife so github actions is
1049:25 - something which can help you to automate
1049:27 - the stuff
1049:29 - so here we what we are going to automate
1049:30 - is on every pull request
1049:33 - a new
1049:34 - build should be or your build should be
1049:37 - done right so
1049:39 - here we can just go to node.js we will
1049:41 - use node.js to build our application
1049:43 - and it gives you a nice template so it
1049:45 - says okay which branch
1049:47 - to
1049:48 - on push to this branch build on pull
1049:51 - request go ahead and build
1049:53 - which server to use so we are saying
1049:55 - okay we will be using ubuntu which node
1049:57 - version to use we will be using only 16
1050:00 - because we don't
1050:01 - want to utilize much of resources
1050:04 - remember for open source net uh this kit
1050:06 - of actions is free i i have the pro
1050:08 - license so it it is uh it gives me some
1050:13 - 3000 minutes if i am not wrong 3000
1050:15 - minutes worth of
1050:16 - build time for free and then we have
1050:19 - this uses so it uses some github actions
1050:22 - to check out my code so checkout is some
1050:25 - term which we use in
1050:26 - github in git
1050:28 - to
1050:29 - copy the code and make our own version
1050:32 - so we check out this code and then we
1050:34 - use this
1050:35 - node version which is 16
1050:37 - and then we are caching
1050:39 - the npm version and here
1050:43 - we are running npm ci npm ci is
1050:46 - something which will install all the
1050:47 - node packages
1050:49 - so we already have let's go and check if
1050:52 - we have this package lock file available
1050:55 - yes it is available so
1050:57 - we can use npmci if
1050:59 - and package lock is not available you
1051:01 - can just do npm install
1051:03 - and then we are saying
1051:05 - that
1051:06 - in case the build command is available
1051:09 - just go ahead and build so we do have uh
1051:11 - the build command
1051:13 - which is
1051:16 - built broad so we'll copy this command
1051:18 - and we'll post it put it here and team
1051:20 - run build and we'll remove if 500
1051:23 - present because we know that it is
1051:25 - available and we will call it as uh
1051:30 - build dot primal and we'll start a
1051:33 - commit
1051:34 - we will create a new branch because we
1051:36 - want to see how github actions triggers
1051:38 - the changes right
1051:39 - and we'll say okay added
1051:42 - github
1051:45 - action to
1051:47 - build
1051:49 - and let's propose a new file
1051:53 - and let's create a pull request on pull
1051:55 - request it will start building your code
1051:57 - right so here let's go ahead and see
1052:01 - now you can see there is a new step
1052:02 - which is added here node.js ci and you
1052:05 - can click on details to see
1052:07 - what is happening here so you uh it
1052:08 - started a new job starting a new job and
1052:11 - it is setting up your job and it is
1052:15 - executing all the step which you
1052:17 - mentioned in that one yml file
1052:20 - so you don't have to become like a
1052:23 - devops devops expert to do this
1052:27 - git of action make it really easy for us
1052:29 - so we just need to choose right template
1052:32 - and then give the right commands
1052:35 - to
1052:36 - execute or to build your code base you
1052:38 - can also run your tests on ci so you if
1052:42 - if you want to run the test you can just
1052:43 - say npm run test and that will run your
1052:45 - test on your ci so you you can verify
1052:48 - all the changes before you go ahead and
1052:50 - merge your code remember netlife is good
1052:52 - it will
1052:53 - uh it will check if your build is
1052:55 - completed and it will give you deploy
1052:57 - url but what in case we want to do more
1052:59 - we want to run the tests we want to run
1053:01 - the end to end tests so github actions
1053:03 - can help you with those you can just run
1053:05 - go ahead and run that con
1053:07 - give those commands in sequence and it
1053:09 - will run all those right now it is
1053:11 - building the project it is saying okay
1053:13 - uh i am running this command ng build
1053:15 - type and c equals to production if this
1053:17 - is completed i mean it will just
1053:19 - complete the step and then it will give
1053:21 - us green signal that your code is good
1053:24 - too much
1053:25 - that's it
1053:26 - so this is how you can use github
1053:28 - actions as well very useful in case you
1053:30 - are like working on your site project
1053:32 - and you want to make sure that
1053:34 - everything goes fine before you merge
1053:36 - changes or you are collaborating on a
1053:37 - project with someone else and
1053:40 - of course
1053:41 - every time you cannot go ahead and
1053:42 - verify everything right so in case you
1053:44 - have tests you can actually go ahead and
1053:46 - verify it using github actions and it's
1053:49 - free for open source projects so go
1053:50 - ahead and utilize it