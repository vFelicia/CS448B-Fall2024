00:00 - this linux course will teach you the
00:02 - basics you need to know as a penetration
00:04 - tester it was created by hackersploit
00:07 - who has one of the most popular cyber
00:09 - security channels on youtube hey guys
00:11 - hackersploit here back again with
00:13 - another video and welcome to the linux
00:15 - essentials for hackers the 20 you need
00:18 - to know and uh first of all let me
00:20 - explain to you what this series is about
00:22 - before we actually take a look at what
00:24 - we'll be covering and the various issues
00:27 - that uh you know uh
00:28 - beginners in infosec
00:30 - and ethical hacking usually face when
00:33 - dealing with the topic of linux so uh it
00:36 - comes as no surprise that linux is very
00:38 - very important uh to learn if you are
00:40 - going to get into infosec because uh you
00:42 - will be
00:43 - using various linux based uh offensive
00:47 - distributions like kali linux or parrot
00:49 - os and it's it's imperative that you
00:51 - understand how to use the system to your
00:53 - advantage how to become efficient at it
00:56 - and that's primarily what this course is
00:58 - focused on now if you are a system
01:00 - administrator then it is uh worth also
01:03 - going through this course because we'll
01:05 - be covering a various aspects that you
01:07 - might not have known about but again if
01:10 - you're a beginner this is perfect for
01:11 - you this will cover exactly what you
01:13 - need to know to be efficient and
01:16 - effective with linux uh when it comes
01:18 - down to pen testing or ethical hacking
01:21 - getting started is very simple if you
01:22 - are a pen tester or you're a beginner to
01:25 - linux uh you can install linux from
01:27 - scratch or run it in a virtual machine i
01:30 - prefer running you know installing it
01:32 - from scratch on a physical machine
01:34 - however if you are interested in you
01:36 - know delving into the various
01:38 - distributions that exist you can check
01:40 - out distrowatch.com and you can start
01:42 - playing around with them uh you know in
01:44 - a vm
01:45 - or you could opt to set up a linux
01:47 - server all right so that's pretty much
01:49 - all that i wanted to talk about in
01:51 - regards to an introduction to this
01:53 - course and without further ado let's get
01:55 - cracking
02:00 - in this video we're going to get started
02:02 - with taking a look at the various
02:03 - keyboard shortcuts that will help you
02:06 - navigate around the system much easier
02:08 - and work with the terminal at a much
02:10 - more efficient rate all right so let's
02:12 - get started now i'm currently using
02:14 - ubuntu you can be using any other linux
02:17 - distribution that you want
02:19 - and we're going to be primarily working
02:21 - with the terminal first before we
02:23 - actually delve into desktop environments
02:26 - uh and you know various other
02:28 - distributions so we're going to be using
02:30 - debian and again ubuntu is based off
02:32 - debian and for our package manager we'll
02:35 - be taking a look at the aptitude package
02:37 - manager but as i said we'll be delving
02:39 - into all of that later on all right so
02:41 - with ubuntu uh getting opening up a
02:44 - terminal with your keyboard is very
02:46 - simple you have your control alt n t key
02:49 - or you have your super and t if you're
02:51 - running debian or any other distribution
02:53 - so on ubuntu it's ctrl alt n t
02:56 - or your super nt and you can customize
02:58 - your keyboard shortcuts uh however you
03:01 - want all right so
03:02 - let me just uh let me just minimize this
03:04 - now uh the other interesting thing that
03:07 - you can do or very helpful thing that
03:09 - you can do when working with various
03:11 - windows it doesn't have to be a
03:13 - a terminal window is you can perform
03:16 - tiling and that is by using the super
03:17 - key and your arrow keys to direct the
03:20 - location of the windows and you can tile
03:22 - them appropriately right so as you can
03:25 - see i've used the super and up key and
03:27 - that maximizes it and of course i can
03:29 - take it to the left or i can take it to
03:31 - the right and i can you know leave it
03:33 - where where it was previously right so
03:35 - let me just expand it now let me talk
03:37 - about a font size right so font size is
03:40 - very easy to change and to actually
03:42 - increase and reduce so if i wanted to
03:44 - increase my font size i would use the
03:46 - control shift and the plus key on my
03:49 - keyboard and that would increase the
03:50 - font size right
03:52 - i can then minimize it by using the
03:54 - control and the minus key on my keyboard
03:56 - and that will reduce the font size so
03:58 - again increasing it is ctrl shift and
04:01 - and the plus key
04:03 - and reducing the font size is control
04:05 - and the minus key on your keyboard right
04:08 - so
04:09 - that is how to increase and reduce your
04:12 - font size now let's talk about
04:14 - actually clearing your screen which is
04:16 - very very simple so i'll just use a
04:18 - generic command here you don't have to
04:20 - worry about what that command is so if i
04:22 - wanted to clear my terminal i would
04:24 - simply say clear and that will get rid
04:26 - of all the content that was currently on
04:28 - the terminal however
04:30 - i can also use a keyboard
04:33 - keyboard shortcut so again if i just
04:36 - list the same command here i can use the
04:38 - control and l key and that will clear
04:40 - the terminal for me without me having to
04:42 - type the clear command all right so
04:44 - let's talk about some uh some other
04:46 - keyboard shortcuts that you should be
04:48 - aware of right so uh if we are working
04:51 - with a particular process so for example
04:54 - i can say
04:55 - nmap i can run a quick nmap scan here
04:58 - and i can just say sv
05:00 - 192.168.1.1
05:02 - and we can hit enter i can use the
05:04 - control c key
05:06 - to actually end the currently running
05:09 - process and it will return you back to
05:11 - your uh to your shell uh in this case
05:14 - we're using the bash shell so if i want
05:16 - to end a process that's currently
05:18 - running like the one i was running which
05:20 - was nmap i use the control and c
05:22 - keyboard shortcut right now if i wanted
05:25 - to suspend or to pause this
05:27 - or to pause a particular task or a
05:30 - process i can use the control and z key
05:33 - right so if i was running nmap s v the
05:36 - same key or the same command i can type
05:39 - that out however here are other useful
05:41 - keyboard shortcuts that you can use so i
05:44 - can cycle through my previously used
05:46 - commands by using the up arrow key and
05:49 - that will again cycle through all my all
05:51 - my previously used commands so again i
05:53 - can just go to this previous command and
05:55 - hit enter and then i can use ctrl and z
05:58 - to actually uh pause and suspend that
06:00 - process uh in memory and remember it
06:03 - hasn't stopped it you have just
06:04 - suspended it all right now let's talk
06:06 - about tab uh
06:08 - let's talk about the tab key and auto
06:10 - completion right so uh we can use the
06:13 - tab key uh to auto complete file and
06:16 - directory names so let me just clear
06:18 - this out and i can use the control and l
06:20 - key so if i go to my uh well i can
06:22 - actually work from my home directory but
06:25 - let's say i wanted to cat a particular
06:28 - file so let me just list all the files
06:30 - in here so let's say i wanted to cat my
06:33 - let's see or let's say i wanted to get
06:35 - my my password file so again i can say
06:38 - cat
06:39 - etsy
06:40 - and i can say password right now
06:43 - if i wanted to auto complete this i
06:45 - could use the tab key and again it'll if
06:48 - i use it two times it will give me the
06:50 - various suggestions here so a single tab
06:52 - will auto complete it if it has an
06:55 - accurate uh id of of the particular file
06:58 - or directory you're referring to so
07:00 - again if i said uh if i give it a bit
07:02 - more information in regards to the file
07:04 - or directory i was looking for i would
07:07 - simply just hit tab and it gives me the
07:09 - file there however i can hit double tab
07:12 - and that again gives me the files that
07:14 - are related to the particular data that
07:17 - have entered here so again if i reduced
07:18 - it just to ap and i hit tab twice it
07:21 - will give us the recommendations as to
07:24 - uh in in reference to the to to the
07:27 - to the particular files that uh that
07:29 - begin with the word p and again if i can
07:31 - increase that uh probability or the
07:34 - specification of the file i'm looking
07:36 - i'm looking for by increasing the amount
07:38 - of letters so again
07:40 - again i can tap it twice and now you can
07:41 - see the results are more fine-tuned so
07:43 - again i can
07:45 - i can use tab to auto complete it to
07:47 - password and i can hit enter and that
07:49 - displays the contents of the password
07:50 - file so that is how to use uh the tab
07:53 - key and those are the various uh you
07:55 - know commands that uh or keyboard
07:57 - shortcuts that you can use while working
07:59 - in the terminal and hopefully those will
08:00 - make your life a whole lot easier so
08:02 - again control and l that clears
08:04 - everything for me
08:06 - now let's talk about how to close your
08:08 - terminal so again closing your terminal
08:10 - is very simple you can use the control
08:13 - shift and w key so again i can say
08:15 - control shift and w here
08:18 - right over here and that works pretty
08:20 - universally among all distributions so
08:22 - again control alt d that opens up your
08:25 - terminal uh increasing the font size
08:27 - control shift and the plus key and so on
08:30 - and so forth and you can tile your
08:32 - terminal or any window in your system by
08:34 - using the super key and your arrow keys
08:37 - or your directional keys here
08:39 - all right so those are all uh the basic
08:43 - keyboard shortcuts that i wanted to
08:44 - start off with i'll be referencing
08:46 - others throughout the series uh let me
08:48 - know which ones are i missed and i'll be
08:50 - seeing you in the next video in this
08:52 - series
08:56 - in this video we're going to be taking a
08:58 - look at file management and file
09:00 - manipulation uh in linux so let's get
09:03 - started so i'm just going to open up my
09:05 - terminal here and let's just expand this
09:08 - and let's increase the font size so we
09:10 - can see what's going on all right so
09:12 - let's start off with a bit of directory
09:15 - navigation and understanding uh what
09:18 - files exist within a directory right so
09:21 - the first question any beginner to linux
09:24 - has is when the in the terminal is how
09:26 - do i know where i am or how do i know
09:29 - what directory i'm in right so they want
09:31 - to know where where they actually exist
09:34 - in the linux file system so by default
09:37 - if you are logged in as a user uh you
09:39 - know that a user is not the root user uh
09:42 - so you know a normal user account for
09:44 - example i'm logged in as a lexis
09:47 - so i'm going to be in my current home
09:50 - directory now you can confirm this by
09:53 - typing in pwd all right pwd means print
09:57 - current working directory or print
09:59 - working directory and that is
10:01 - self-explanatory it prints the current
10:03 - directory that you are in and that you
10:06 - uh will be working in or any commands
10:08 - that you actually run will be executed
10:10 - within this directory right so i'm going
10:12 - to hit enter
10:14 - and as you can see it tells you i'm in
10:16 - the home alexis directory now user
10:18 - accounts are usually sorted out this way
10:21 - so the root account usually has its own
10:24 - folder in the root directory
10:26 - of the file system of the linux file
10:29 - system whereas other users like alexis
10:32 - here
10:33 - will be found within the home directory
10:35 - and then furthermore their own
10:36 - individual directories based on their
10:38 - usernames and this is where all their
10:40 - files will be stored all right which
10:42 - brings us to the next question which is
10:44 - how do i list the files within a
10:46 - particular directory and this is very
10:48 - simple we use the ls command which means
10:50 - list all right so i'm going to hit enter
10:53 - and this will list the files and the
10:56 - directories within the current directory
10:58 - right so i'm going to enter and as you
11:00 - can see it tells us within this current
11:02 - directory we we have the desktop
11:04 - directory uh the documents directory
11:07 - downloads etc etc right so
11:10 - this is the simple way of listing files
11:12 - now the ls command has the ability to be
11:15 - run with other arguments or commands or
11:18 - options that allow you to increase or to
11:21 - modify the way the output is
11:24 - or the way the files are displayed to
11:26 - you right so a quick example of this is
11:29 - by using the ls hyphen or dash l command
11:33 - all right so this will list all the
11:35 - files and directories in this directory
11:39 - uh in the format of a list or a table
11:42 - which makes it easier to read for users
11:45 - right so i'm going to hit enter and
11:46 - immediately you can see it gives you a
11:49 - vital information like the total
11:51 - right of here the permissions the owner
11:54 - the ownership of these files and
11:56 - directories
11:57 - you have the date modified and the name
11:59 - of the file uh of the files and
12:01 - directories
12:02 - all right so
12:04 - that is how to use ls in combination
12:06 - with another command now you can also
12:08 - get more output by combining the ls
12:11 - command with other options so again if
12:13 - we wanted to list all the files that are
12:15 - all the files and directories that are
12:17 - currently in this working directory i
12:19 - can use the a command which essentially
12:22 - is an abbreviation for all now when i
12:24 - say all in the context of a linux it
12:26 - means all hidden files all files within
12:29 - this directory will be displayed all
12:31 - right so if i list the files again here
12:33 - you can see that it only displays the
12:36 - the files and directories that are
12:38 - visible to users if we want to display
12:41 - all the files and directories including
12:43 - hidden files and directories we can say
12:44 - ls and we can say a
12:47 - all right and this again will give us
12:49 - all files and directories including
12:51 - hidden files and directory so you can
12:52 - see the hidden files in linux have the
12:55 - dot or the full stop
12:57 - before the file name here so again the
12:59 - bash aliases file is a file that is used
13:02 - in configuration of your bash profile so
13:05 - again it allows you to configure aliases
13:07 - when working with bash again so the
13:09 - hidden files in nx typically are used
13:12 - for configuration of various system uh
13:15 - system environment variables or various
13:18 - system tools uh you know so on and so
13:20 - forth we'll be working with this later
13:22 - on and it will all make sense shortly
13:25 - now the great thing about the list
13:26 - command is that i can use it in
13:28 - combination with the previous command so
13:30 - if i wanted to list this in a way that
13:32 - was much easier to read i can say ls a l
13:36 - and this will list all the files and
13:37 - directories including the hidden files
13:39 - and directories in the format of a list
13:42 - or a table and i hit enter and there you
13:44 - are you can see
13:46 - it displays all the files and
13:47 - directories in the form of a list here
13:49 - and again it gives you information in
13:51 - regards to the ownership and the
13:52 - permissions more of which we'll touch
13:54 - upon later on in the course all right so
13:57 - i'm just going to clear the terminal
13:58 - here and let's take a look at the ls
14:00 - command a little bit more all right so
14:02 - let's say i wanted to um to actually
14:05 - list the files um in a more
14:08 - readable format for users so again i can
14:11 - just type in ls
14:13 - l and i can use the h command all right
14:15 - so if i hit enter again this displays it
14:18 - in a much easier way for uh for users to
14:21 - understand what's going on and the
14:22 - context i'm referring to is more to do
14:26 - with the size all right so if i say ls l
14:28 - you can see that the data here or the
14:31 - size of the files is in bytes right now
14:34 - when we use the ls h or the h where the
14:37 - h stands for human readable format you
14:39 - can see it displays the actual size in
14:41 - kilobytes a much easier way for you to
14:44 - understand the sizes of files
14:46 - etc etc all right so let me just clear
14:49 - the terminal here
14:51 - and
14:52 - let's take a look at one more uh command
14:55 - that we can use with ls and that is if
14:58 - we wanted to uh show uh subdirectories
15:01 - right so remember when we show when we
15:03 - use the ls command
15:05 - it shows us the directories within this
15:07 - current working directory but let's say
15:09 - we had other directories within um let's
15:12 - see
15:13 - within pictures right so we could have
15:15 - other directories within pictures or
15:17 - documents or the downloads folder etc so
15:20 - again we can say
15:22 - uh if i wanted to list
15:24 - the the the subdirectories within the
15:26 - desktop folder i can say
15:29 - ls
15:30 - l and we'll use the capital r command
15:33 - and this again means recursively so we
15:36 - can then specify the folder we want
15:38 - which is going to be desktop or the
15:40 - directory we want again it's going to be
15:41 - desktop and we hit enter and again it
15:44 - will list for us the files that exist on
15:47 - the desktop first of all and again it
15:49 - shows us that we have
15:51 - a directory called c
15:53 - and a txt file called todo.txt
15:57 - all right within the c folder or the c
15:59 - directory we have three files we have a
16:02 - temp dot c
16:03 - we have a test binary and a test.c file
16:06 - so again it's displayed to us what is on
16:09 - the desktop and then what is uh what is
16:12 - in the directory c on the desktop so
16:14 - again it's used for recursive a listing
16:16 - of the of files and directories and sub
16:19 - directories that way all right so i hope
16:22 - that makes sense now let's talk about uh
16:24 - some directory navigation all right
16:27 - which is quite important here
16:29 - uh before we actually talk about uh file
16:31 - manipulation um and copying files etc so
16:36 - as i said we are currently in the home
16:38 - alexis directory now if i wanted to move
16:41 - a step back or to move to a parent
16:43 - directory i can say cp all right so cd
16:47 - will change directory to the actual home
16:49 - directory uh so again if i type in pwd
16:52 - you can see it will not do anything now
16:54 - if i wanted to go a step back i can type
16:57 - in cd
16:58 - and i can follow that or yes i can
17:01 - follow that up with two full stops and
17:03 - that will take me a step back and
17:06 - immediately on your bash shell you'll be
17:08 - given the current directory that you're
17:10 - in now so again it's telling us we are
17:12 - in the home directory and we can confirm
17:14 - this by typing in pwd right so if we
17:17 - list the files within the home directory
17:19 - you can see that the only directory that
17:21 - exists is the alexis folder and that's
17:23 - because that's the only use on the
17:25 - system so let's take a step back right
17:27 - so i can take a step back and i hit
17:30 - enter and now we are currently in the
17:32 - root directory the root file system
17:34 - directory for the off for linux right so
17:37 - again i can list all the files in here
17:39 - and i can hit enter and as you can see
17:41 - we are now in the root this is the
17:44 - actual root directory of the linux file
17:46 - system not the root folder or the root
17:48 - user directory just the root
17:51 - of the file system so
17:53 - you can now see all the various folders
17:55 - that the linux file system is comprised
17:57 - of all right so that is how to actually
18:00 - navigate a step back now if i wanted to
18:02 - navigate into any one of these
18:04 - directories i could say cd and then i
18:07 - specify cd is an abbreviation for change
18:11 - directory and i can specify the
18:12 - directory i want to move into so i can
18:15 - say cd home
18:16 - right and again that will take me into
18:18 - my home directory and then i can list
18:20 - the files in here and this tells me oh
18:22 - we have a directory called alexisd
18:24 - and then i can say change directory into
18:27 - the directory alexis and that will take
18:28 - me into the uh the directory alexis
18:32 - all right now i can also use um i can
18:36 - also use the forward slash to refer to a
18:39 - directory that is currently not in this
18:41 - particular directory so let's say i
18:44 - wanted to move into the um let's see
18:47 - i wanted to move into the
18:50 - um let's try the etsy folder i can say
18:54 - cd
18:56 - forward slash etsy and this refers to a
18:59 - directory that is currently not in this
19:01 - directory but at the root at the root of
19:04 - the linux file system so i hit enter and
19:07 - that takes us into the etsy folder so
19:09 - again i can confirm this by typing in
19:11 - pwd and again it tells me i'm currently
19:13 - in the etsy folder
19:15 - right now if i want to navigate back to
19:18 - my user home directory so i'm currently
19:21 - logged in as the user alexis if i want
19:24 - to go back to alexis home directory i
19:26 - can simply do this by typing
19:29 - home alexis right that's very very
19:31 - simple but if i want to even make this
19:33 - shorter i can use
19:35 - the command right over here and again i
19:38 - can hit enter
19:40 - and
19:41 - i can
19:42 - easily just navigate back to my home
19:43 - directory so if i hit enter you see and
19:46 - i type in pwd it's going to take me into
19:48 - my home directory right over here all
19:51 - right now that we have taken a look at
19:52 - you know directory navigation and moving
19:55 - around directories let's take a look at
19:57 - uh creating files copying etc all right
20:00 - so i'm currently on my in my home
20:02 - directory so let's talk about
20:05 - actually copying a file
20:07 - now before we actually do that we need
20:09 - to actually understand how to create
20:11 - files really really quickly right so
20:13 - the first thing i want to do is i'll go
20:16 - into my desktop here and i'll say cd
20:18 - desktop and i'm going to hit enter and
20:20 - i'm in my desktop now all right so if i
20:23 - wanted to create a file really easily i
20:26 - can use touch all right so touch is a
20:29 - is a tool or a utility that allows you
20:31 - to you know easily create files again
20:33 - let me show you a command that will help
20:35 - you understand what various commands and
20:37 - tools are so if i want to know uh
20:40 - i want information about a particular
20:42 - command i can use the what is
20:44 - the what is command so i can type in
20:46 - what is and then i can say what is touch
20:49 - and i can hit enter and again it tells
20:52 - me change the file timestamps all right
20:54 - or so i can also say what is
20:56 - uh let's see what is nano right nano is
20:59 - a text editor so i can hit enter and
21:02 - it's going to tell nano is another
21:03 - editor etc so it gives you information
21:05 - about a particular command or tool all
21:07 - right so i can use touch to create a
21:09 - file remember without any content right
21:11 - so i can say touch
21:13 - and i can say the file name is going to
21:15 - be test.txt
21:17 - all right i can hit enter and if i list
21:20 - all the files in the desktop you can see
21:22 - i have the test.txt file right over here
21:25 - all right so
21:27 - i can now
21:28 - direct data into this file so again i
21:30 - can use the ech command and if we want
21:33 - to learn more about the echo command i
21:34 - can type in what is and i can say echo
21:37 - and i can hit enter and it's going to
21:39 - say display a line of text right so we
21:41 - can say echo
21:43 - alexis is
21:46 - alexis is
21:47 - you can say alexis is not cool i know
21:51 - something like that
21:52 - and i can just hit enter and again it
21:54 - will display on our terminal alexis is
21:56 - not cool all right so it simply just
21:58 - displays a line of text however we can
22:00 - redirect this data into a particular
22:03 - file and in this case we want to dis we
22:06 - want to redirect this data into the
22:08 - test.txt file right so i can say echo
22:12 - we can say hello
22:14 - and we'll just use this simple string of
22:16 - text here and i can say
22:20 - redirect to this and we use the greater
22:22 - than sign to redirect data to a
22:25 - particular file or to a particular
22:27 - command so i can say test dot txt all
22:30 - right and i hit enter and now this file
22:34 - should have the words or the string
22:36 - hello now if you want to easily just
22:39 - display the context uh or the content of
22:41 - a file i can use the cat command all
22:43 - right now again we can use the what is
22:45 - command to find uh to find out more
22:48 - about what the
22:49 - cat command does so i can hit enter and
22:51 - it's going to tell us it concatenates
22:53 - files and prints on the standard output
22:55 - so again it gives us the output of all
22:57 - the content it prints out the content of
22:59 - a particular file uh so again i can say
23:01 - cat test dot txt and hit enter and again
23:05 - it prints out what we had redirected
23:07 - into it
23:09 - all right so that is how to use the cat
23:11 - command now again i can redirect a lot
23:13 - of text into this uh so let's say i
23:15 - wanted to edit this uh this file or i
23:18 - wanted to remove this file which is a
23:20 - much better way of actually taking a
23:21 - look at you know file manipulation
23:24 - technique so again i've shown you how to
23:25 - create a file a very simple file
23:27 - redirecting output
23:28 - we can also
23:30 - use cat to redirect output so for
23:32 - example if i wanted to redirect the
23:34 - contents of the password file i can say
23:37 - cat hc password and i'm using the
23:39 - relative directory you can see here so
23:41 - the the the contents of the password
23:44 - file i want to redirect into the
23:47 - test.txt file however if i wanted to
23:50 - create another file i could easily do it
23:52 - directly from here i could say password
23:54 - dot txt and i hit enter and now we can
23:57 - display the contents of the password.txt
24:00 - file and again i can use the tab
24:02 - autocompletion here and i hit enter and
24:04 - again it gives us all the content was
24:06 - redirected into this new txt file
24:09 - excellent so now let's talk about
24:11 - actually you know create removing files
24:14 - copying them etc so if i wanted to
24:16 - remove this file here the test.txt file
24:20 - i use the rm command which stands for
24:22 - remove right again you can use the what
24:24 - is command and again use it again it
24:26 - tells you this is used to remove files
24:28 - and directories so let's talk about
24:30 - removing files first
24:33 - all right so we can say remove uh test
24:35 - dot txt all right and again we use tab
24:39 - auto completion and i hit enter and this
24:41 - will have removed the file over here
24:44 - right so um
24:46 - that is essentially how to remove a file
24:48 - now
24:50 - uh if i want to remove a directory uh i
24:53 - can now i need to specify that it is a
24:56 - recursive action but before we do that
24:58 - let's talk about creating a directory
25:00 - first because that that's quite
25:02 - important as well so if i want to create
25:04 - a directory i use the make directory
25:06 - command which is abbreviated into mkdir
25:09 - so make a directory and i give it a name
25:12 - so i can say test all right so this is
25:13 - going to create a folder or id or a
25:16 - directory called test
25:18 - right once i hit enter and i list all
25:20 - the files here you can see we have the
25:21 - test directory over here uh so what i
25:24 - can do is
25:26 - i can you know i can navigate into it i
25:28 - can copy files into it so let's say i
25:31 - wanted to copy a file into this uh
25:33 - directory so again i can say
25:36 - let's say i wanted to say touch um or we
25:39 - can do the same thing so i can say cat
25:41 - etsy
25:43 - password and i want to redirect this
25:45 - into a file called
25:47 - password.txt and once that is done i
25:50 - want to copy the file so i want to say
25:52 - cp that means copy and i want to specify
25:54 - the file that i want to copy which is
25:56 - going to be password dot txt and i want
25:59 - to copy that into the test directory so
26:01 - i specify the directory i want to copy
26:03 - in i want to copy it into
26:05 - in this case the test directory is
26:07 - within the current working directory so
26:09 - i don't have to specify a relative path
26:11 - if i was specifying a relative path i
26:13 - would use the forward slash here so i
26:15 - can just say test
26:17 - and i hit enter and now if i remember if
26:20 - i wanted to list the contents of the sub
26:22 - directories recursively i could say ls
26:25 - lr and i hit enter and you can see the
26:27 - contents of the test directory uh
26:30 - password.txt
26:32 - excellent so again if i want to remove
26:34 - the the password file i can say
26:36 - removepassword.txt
26:38 - if i want to remove a directory and the
26:40 - directory what we want to remove is the
26:42 - test directory i can say remove and i
26:44 - use the capital r which means
26:47 - recursively remove and i say test and i
26:50 - use the tab autocompletion and i hit
26:52 - enter and now if we list the files in
26:54 - the on the desktop you can see we've
26:56 - gotten rid of all of these folders and
26:59 - files
27:00 - all right so
27:01 - now that we know how to actually create
27:04 - a directory we can actually um
27:07 - let me talk about removing a directory i
27:09 - actually covered it with the remove
27:11 - command however we can also use um
27:14 - another command called remove directory
27:16 - which is abbreviated into rmdir
27:20 - this will only allow you to remove a
27:22 - directory if you do not have any files
27:24 - within that directory right so let's say
27:26 - i uh
27:28 - by the way you can cycle through your
27:30 - previously used commands using your
27:31 - arrow keys in this case you can use the
27:34 - uh the up arrow key so let's say i
27:36 - wanted to catch i wanted to you know
27:38 - redirect output of the password file
27:40 - into a file called password.txt and i
27:42 - wanted to copy this file or let's
27:45 - actually talk about
27:46 - moving files so if i wanted to move a
27:48 - file i would say mv and again you can
27:51 - use the what is command so what is mv
27:54 - so i can say mv i want to move the
27:57 - password txt file into the test
28:00 - directory here i'm going to hit enter
28:02 - and now you can see that the
28:04 - the password file has been moved into
28:06 - the test directory so again i can
28:09 - i can list all the files within the test
28:11 - directory here and that again it tells
28:13 - me that we only have the password.txt
28:15 - file in here so if i use the rm dir
28:19 - command which means remove directory and
28:21 - i say test remove directory test you can
28:24 - see it's going to tell me that this
28:26 - directory is not empty so as a result we
28:28 - need to specify remove
28:30 - recursively
28:32 - test and we're going to hit enter and
28:33 - now it gets rid of the test directory
28:36 - for us all right so those are uh very
28:39 - very simple ways of
28:41 - you know creating copying and of of
28:43 - course deleting commands now uh
28:45 - before we actually end this video which
28:47 - i know has been going on for quite a
28:49 - while i'm going to be covering file
28:50 - directory permissions later but i want
28:53 - to talk
28:53 - i want to talk about file manipulation a
28:56 - little bit more uh so we've talked about
28:58 - uh you know using the cat command
29:00 - redirecting output uh using touch as
29:02 - well moving files let's talk about you
29:05 - know renaming files
29:07 - uh and also taking a look at the content
29:09 - of particular files here so what i want
29:12 - to do now is
29:13 - let's actually take a look at um
29:16 - at actually renaming files all right so
29:18 - i'm going to again use the similar
29:20 - command that we had used i'm just going
29:21 - to you know
29:23 - i'm going to redirect the output of the
29:25 - password file into a file called
29:26 - password.txt
29:28 - and now if i wanted to rename the
29:30 - filepassword.txt
29:32 - into something else i would use the mv
29:34 - command right so there isn't a command
29:36 - to rename files in linux you use the mv
29:40 - command which means move
29:42 - in this case it's very simple the syntax
29:44 - is uh you specify the file that you want
29:47 - to change the name of which is going to
29:48 - be password.txt and i changed the file
29:51 - name to let's say
29:53 - test
29:54 - dot txt
29:56 - and hit enter and now if we list all the
29:58 - files in the directory you can see that
29:59 - it changes it to test.txt and indeed if
30:03 - we actually uh if we actually
30:06 - display the contents of the file you can
30:08 - see that the the content is preserved
30:10 - while we've changed the name and we can
30:12 - also change the extension of the file so
30:15 - i could say move
30:16 - test.txt into test
30:19 - let's say test.c we can we can change
30:22 - the contents into a c file right and now
30:24 - if i say uh cat test dot c
30:27 - i can hit enter and there you are now
30:29 - let's talk about uh editors and then
30:31 - i'll talk about the content of the files
30:33 - uh before we actually end this video so
30:37 - um
30:38 - there are two uh standard editors that
30:40 - are pretty much the standard when it
30:42 - comes to linux and working within the
30:44 - terminal i'm not talking about graphical
30:46 - uh gui based editors like uh g edit and
30:50 - stuff so if i wanted to edit this file
30:52 - within the terminal i have two options i
30:54 - have nano so again i can use the what is
30:57 - command and say what is nano and again
30:59 - that's an editor and i have we have vim
31:02 - which is pretty much the most popular
31:04 - option and i'll be making independent
31:06 - videos on this editors and how to
31:07 - configure them so again if i want to
31:10 - edit the test.txt file i can say nano
31:13 - test.tx
31:15 - test.c
31:16 - let's actually rename it back to
31:18 - test.txt
31:20 - dot txt and we say nano test
31:23 - dot txt and we're hit enter and that
31:26 - takes us into nano now exiting nano is
31:28 - very simple again you can navigate
31:30 - around make changes uh exiting it we use
31:32 - control and x and that's it now with v
31:35 - vim or vi we simply type in vi or vim
31:38 - and we say test.txt hit enter and again
31:42 - with them the syntax is very different
31:43 - if i want to make changes or i want to
31:45 - add content i type in i to insert text
31:48 - and again i can play around with it and
31:50 - once i'm done i hit escape and then i
31:52 - can write changes to this file or i can
31:54 - quit and discard any changes by typing
31:56 - in q
31:57 - and the exclamation mark and hit enter
32:00 - and that's how to use the various
32:01 - editors i'm not covering them uh you
32:03 - know to their full to their fullest
32:05 - extent and that's because we have
32:06 - various videos that will be actually
32:09 - focused on editors themselves so um
32:12 - that's pretty much all that i wanted to
32:13 - cover in this video there's quite a bit
32:15 - hopefully you guys can actually learn a
32:17 - lot from this video
32:22 - in this video we're going to be talking
32:23 - about file and directory permissions and
32:26 - ownership all right so again there's
32:28 - quite a bit to cover and hopefully i'll
32:30 - explain the various ways of doing it and
32:32 - i hopefully i can explain it as best as
32:34 - i can all right so let me just open up a
32:37 - terminal here and we can get started
32:38 - immediately right so
32:40 - let's just expand this and there we are
32:42 - all right so the first thing i'm going
32:44 - to do is i'm just going to go on to my
32:45 - desktop or change my directory onto my
32:48 - desktop and i'm just going to clear this
32:50 - now one thing i want to talk about
32:51 - before i actually get started if i list
32:53 - all the files in here you can see that
32:55 - directories will typically be
32:57 - highlighted in blue and to keep this on
33:00 - a standardized basis you want the color
33:02 - scheme for your terminal to be the linux
33:05 - console or you can use xterm if you want
33:07 - and again that will just keep it really
33:09 - standardized but for the purpose of this
33:11 - video i'm just going to stick to the
33:13 - linux console again just so directories
33:16 - and
33:17 - your directories are highlighted blue
33:19 - and again executable files are
33:21 - highlighted green all right so that'll
33:23 - keep things uh more simple and very easy
33:25 - to understand all right so let's get
33:27 - started so again if i list all the files
33:30 - in this directory uh you can see that um
33:34 - typically when i list it in the form of
33:36 - a list or a table we have various bits
33:38 - of information right so again i can also
33:41 - you know
33:42 - type this in and print it out print it
33:44 - out in human readable format but again
33:47 - that doesn't explain
33:49 - a lot of the information that already is
33:51 - here all right so we have the first
33:53 - column which is your file permissions
33:55 - file and directory permissions um you
33:58 - then have the user and the group all
34:01 - right so this is to do with ownership
34:03 - these two are to do with ownership you
34:05 - then have the file size uh and the date
34:07 - modified and of course you have the the
34:10 - file or the directory name
34:12 - as is
34:13 - as as is and as was created all right so
34:17 - what i'm going to do is the first thing
34:18 - i want to do is i'm just going to create
34:20 - a simple file i'm just going to call it
34:21 - test
34:23 - test dot sh because i know many of you
34:25 - don't like me sticking with one type of
34:27 - file
34:28 - and what i'm going to do is i'm just
34:29 - going to cut the contents of the
34:31 - password file
34:32 - into the test dot sh file right
34:36 - and i can just hit enter and we can
34:37 - clear this out and let me also create a
34:39 - directory here and we'll just call it
34:41 - test and let's clear this out all right
34:43 - so now if i list all the files here
34:45 - you can see that
34:47 - we have the new files that we just
34:49 - created test.sh and the test directory
34:52 - so
34:53 - if we take a look at the permissions for
34:55 - the sh file which is a shell file and is
34:58 - potentially executable however in this
35:00 - current state it isn't and you might be
35:02 - asking well why isn't it executable and
35:05 - that's where file and directory
35:07 - permissions come into play now
35:10 - permissions in linux are very very
35:11 - simple to understand now many people
35:14 - usually you know complicate it quite a
35:16 - bit and there isn't a need for this uh
35:19 - again there are two ways of handling it
35:21 - which is where most of the confusion
35:23 - starts that is the symbolic mode format
35:26 - and the uh the octal mode or the binary
35:29 - mode as it's so referred to as all right
35:32 - and these basically deal with various
35:34 - techniques as to which you can ascertain
35:36 - or set
35:37 - uh you know their various permissions
35:40 - for files and directories but the first
35:41 - thing you need to understand first of
35:43 - all if you're a beginner is there three
35:45 - types of permissions that you can apply
35:47 - to a file or directory in linux those
35:50 - are read which is represented by r as
35:53 - you can see right over here uh the the
35:55 - second one is the w or the right
35:58 - permissions and the last one is the x
36:01 - permission which stands for executable
36:03 - so these basically mean read this allows
36:06 - this means that you're allowed to read
36:08 - the file uh the right permission means
36:11 - you're allowed to write changes to the
36:13 - file and the x permission means you're
36:15 - allowed to execute the file now you
36:17 - might be saying well we have various uh
36:20 - various
36:21 - sequences of these permissions appearing
36:24 - here how is it sorted out and that's a
36:26 - very good question so let's take a
36:28 - simple example of the test.sh file right
36:31 - over here all right so first of all uh
36:34 - as you'll see right over here each of
36:36 - these is sorted into
36:38 - six uh into six columns however they're
36:41 - really not separated but that's how you
36:43 - have to understand them so you have your
36:44 - first one here you have your second one
36:47 - here and you have your third one here
36:49 - now this initial prefix here is
36:52 - is there to tell you the type of file
36:55 - you're dealing with in this case we're
36:56 - dealing with a file so it leaves that
36:58 - blank in the case of if of a directory
37:01 - it will be annotated by a d and that
37:04 - tells you that you're dealing with a
37:06 - directory all right so let's let's talk
37:08 - about the other columns here so the
37:10 - first uh the first one here is for the
37:13 - owner of the file alright so these are
37:16 - the owner permissions now when we're
37:18 - talking about ownership for this
37:19 - particular file we can see that the
37:21 - owner of the file and the group that it
37:23 - belongs to
37:25 - is alexis all right now if it belonged
37:27 - to another user that means that these
37:29 - permissions were specific to that
37:31 - particular user or the owner of the file
37:34 - the second column here is in uh these
37:37 - are the permissions for the group all
37:39 - right so again these are group
37:40 - permissions and the last one are for all
37:43 - other users on the system so let's say i
37:46 - created a file and i'm currently in the
37:48 - alexis uh the home alexis desktop
37:51 - directory here
37:52 - uh let's say i was logged in as another
37:55 - user and i navigated into this directory
37:59 - and i tried to execute this file over
38:01 - here well given that i would be i was
38:04 - using another user
38:06 - the permissions for this file
38:08 - explicitly state that i can read the
38:11 - file however i cannot execute it or i
38:14 - cannot write any particular changes to
38:16 - it so hopefully that makes sense now
38:19 - let's talk about changing these
38:20 - permissions or setting these permissions
38:22 - for these files now this is where the
38:24 - chmod command comes into place all right
38:28 - so the chmod commands allows you to
38:30 - change the mode for files and
38:32 - directories and allows you to change
38:34 - permissions for the file and directories
38:36 - so again i can say i can use the what is
38:38 - command with chmod and you can see it
38:41 - allows you to change the file mode bits
38:43 - and change the permissions of a file or
38:45 - directory right quite simple
38:48 - now let's talk about this for a second
38:49 - it's very easy to use we say chmod
38:52 - and then we specify the options that we
38:55 - want and finally after the options we
38:57 - specify the file to which we want to
39:00 - apply these permissions to all right so
39:02 - very very simple syntax however as i
39:04 - mentioned there are two ways of doing
39:05 - this many people are comfortable with
39:07 - their own way and i recommend that you
39:09 - find your own way of going about this
39:11 - but i will make a recommendation to make
39:14 - things a whole lot easier and maybe uh
39:16 - one way that you can understand it you
39:18 - know a whole lot better all right so
39:20 - that the the first way is by using the
39:23 - symbolic mode format all right and the
39:25 - second way is by using the octal
39:28 - or the binary mode all right so let's
39:31 - start off with the symbolic mode format
39:34 - all right so let's say i wanted to
39:36 - change the permissions
39:38 - for the file
39:39 - the file test dot sh right over here all
39:42 - right so you can see that we we
39:45 - currently cannot execute it so uh what
39:47 - i'm going to do is let me just remove or
39:50 - i can just
39:51 - what i can do is just
39:53 - get etsy or we can just say dev null and
39:56 - don't worry what i'm doing here i just
39:58 - want to
40:01 - dot sh and we can actually just say echo
40:05 - um we can say
40:07 - echo hello world and we can just use
40:10 - this and we can pipe that into the file
40:13 - test.sh and now if we try and execute
40:16 - this file
40:17 - you can see that we hit enter we can see
40:20 - that we do not have the particular or
40:22 - the necessary permissions to execute
40:24 - this so that will be our goal here our
40:26 - goal is to set uh or to provide uh the
40:29 - user lexis with executable permissions
40:32 - all right so let me just list this one
40:34 - more time and we can take a look at the
40:35 - permission so for the owner alexis he
40:38 - can only read and write changes to the
40:41 - file which we we pretty much did already
40:43 - uh for the group they can only read the
40:45 - file uh and for all other users they can
40:49 - only read it all right so let's talk
40:50 - about the symbolic mode format
40:52 - so the symbolic mode format is very
40:55 - simple to understand of course i've
40:56 - mentioned it has to do with the various
40:58 - permissions so read write and execute
41:01 - and it is done in conjunction with the
41:03 - chmod command all right so now with the
41:06 - chmod command i can now specify
41:10 - the specification in regards to the
41:12 - uh to the user the group uh
41:16 - the uh the other or for all users all
41:18 - right so what this means is
41:20 - if i wanted to specify permissions or
41:23 - set permissions for uh for the current
41:25 - user i would do that by typing in chmod
41:28 - u
41:29 - and then i can add permissions i can say
41:32 - you um i can say i can add permissions
41:36 - by using the plus sign or i can say u is
41:39 - equal to and then i would set the
41:41 - permission so i can say user
41:44 - the current user is going to be
41:46 - read write and execute
41:48 - we're going to provide this user with
41:50 - the read write and execute permissions
41:52 - and then we specify the file that we
41:54 - want to apply these permissions to so i
41:56 - can say test dot sh all right and i can
41:59 - hit enter now if i list all the files
42:01 - here again you can now see that the the
42:04 - user alexis or the owner alexis has read
42:08 - write an executable permissions which
42:09 - means we can now execute this file and
42:12 - we just entered a simple piece of uh
42:14 - code here so again we can say test.sh
42:17 - and again we we cannot we can actually
42:19 - just modify this sorry uh we can say
42:21 - just going to test.sh and we can just
42:23 - say
42:24 - echo
42:25 - so that whenever we print it out we can
42:27 - actually get those
42:29 - this little string of text here again so
42:31 - let me just write and exit there and you
42:34 - can see that that was successful so
42:36 - again if we execute the file here you
42:38 - can see it prints out the string hello
42:40 - world excellent so now we have set the
42:42 - permissions for the user using the
42:44 - symbolic mode format all right so we can
42:47 - also remove permissions
42:49 - uh and again i've shown you how to
42:51 - explicitly set the permission so again
42:53 - let's go over that one more second one
42:55 - more time so chmod and now let's say we
42:58 - wanted to apply uh these same
43:00 - permissions for all the users on the
43:03 - system all right and for for for for the
43:06 - group all right so to do this we use the
43:09 - group
43:10 - uh and the o sign uh or we can also use
43:13 - the a sign all right
43:15 - and that will mean a group and all other
43:18 - users on the system so group and all of
43:20 - these users on the system so again the
43:23 - standard definition is
43:25 - for use the current user or the owner of
43:27 - the file g is for the group uh and again
43:30 - o is for other and a is for all all
43:33 - right so that will set for all so we can
43:35 - say group and we can then say group and
43:37 - other
43:38 - uh is will have read write and
43:41 - executable permissions and then we
43:43 - specify the file here and we hit enter
43:46 - and then that will set the permissions
43:47 - explicitly so again if we list all the
43:49 - files now you can see that the the the
43:52 - current user uh the group and all other
43:55 - users have read write and executable
43:57 - permissions which means i can now
43:59 - execute this file if i was logged in as
44:01 - another user that belongs to any other
44:04 - group on the system which is not
44:06 - recommended so let's talk about how to
44:08 - remove these permissions all right so i
44:10 - can say chmod
44:13 - and let's say i wanted to remove the uh
44:16 - the right and executable permissions for
44:19 - for the groups and other users on the
44:21 - system so again we say go and now we say
44:25 - minus
44:26 - wx so the right and executable
44:29 - permissions and we say test dot sh and
44:31 - we hit enter and now if we list all the
44:34 - files here you can see that now we have
44:36 - removed all these permissions so the
44:39 - only the current user is only allowed to
44:41 - read write and execute the file however
44:43 - the group and the other users on the
44:45 - system are only able to read it so that
44:48 - is essentially how to use the symbolic
44:50 - mode format so you can see it's a very
44:52 - simple system to use let me just go over
44:54 - it one more time we use the chmod
44:57 - command we then specify the user uh the
44:59 - group
45:00 - uh other
45:02 - uh other or all all right so again ugo a
45:05 - that is the standard uh
45:08 - the standard definition there and then
45:10 - of course we use the plus or the equal
45:12 - signs to add permissions or to
45:14 - explicitly set them so for example if i
45:18 - wanted to give the group execute
45:20 - executable permissions i would say chmod
45:24 - group plus x all right so we're setting
45:27 - it for the group and we're giving it
45:29 - executable permissions we then specify
45:31 - the file
45:32 - and we hit enter and now if we list all
45:34 - the files here you can see that it gives
45:36 - the group executable permissions so it
45:39 - can read the file and execute it however
45:41 - it cannot it cannot write changes to the
45:43 - file so i can i can also get rid of it
45:46 - so again chmod minus we can say group
45:49 - minus x
45:50 - uh so remove the executable permissions
45:52 - and then we specify the file we hit
45:55 - enter and again if we list the files
45:57 - here you can see we're back to the old
45:59 - uh permission so again a very simple way
46:02 - of setting permissions
46:04 - all right now let's talk about uh the
46:06 - binary or the octal mode of setting
46:09 - permissions
46:10 - all right so now let's talk about the
46:12 - octal or the binary mode of setting
46:15 - permissions right which is again very
46:17 - simple and is my preferred way of
46:19 - actually going about doing it now again
46:21 - as i said it's entirely up to you all
46:23 - right so again we are still using the
46:25 - chmod operator here and again this is
46:29 - the standard so again we can say chmod
46:31 - and then now when dealing with the
46:34 - binary or the octal mode of setting
46:36 - permissions
46:37 - the read write and executable
46:40 - permissions are now denoted in a binary
46:43 - format and you might be saying well if
46:45 - that's the case doesn't that make it a
46:47 - little bit complex well i'll explain why
46:50 - it it will not make it complex all right
46:52 - so let me explain something so typically
46:55 - as i said the read uh right and
46:57 - executable permissions are now
46:58 - represented by a binary value all right
47:02 - so the read value is
47:04 - the the read permission is represented
47:06 - by a value of four all right the right
47:09 - permission
47:11 - is execute is uh is denoted or
47:13 - represented by a value of two sorry and
47:17 - the executable permission is represented
47:20 - by a value of one all right and again
47:23 - we're still following the previous uh
47:26 - the previous format of going of actually
47:28 - uh understanding permissions here so
47:31 - again we have the uh the owner now the
47:33 - owner of the file or the directory uh
47:36 - you then have the group and others uh
47:39 - other users on the system
47:41 - all right so let's work with the test.sh
47:44 - file and i'll talk about setting
47:45 - directory permissions which is again
47:47 - very very simple as well
47:49 - all right so
47:51 - let's say we wanted to get rid of the
47:55 - the write and execute permissions for
47:57 - the owner of the file which is right
48:00 - over here you can see it has read write
48:02 - and execute permissions so to do this
48:04 - with the the binary mode or the octal
48:08 - mode
48:09 - again we need to specify chmod and now
48:12 - the permissions if you already know
48:14 - about this are now represented by the by
48:17 - binary values all right so as i said for
48:21 - the owner
48:22 - we want to actually specify the
48:25 - following so again we can say
48:28 - chmod
48:29 - and for the owner we need to specify the
48:33 - we want to get rid of the right and
48:35 - executable permissions so we only have
48:38 - the
48:38 - the write permission which again as we
48:41 - said is going to have a value
48:43 - of four all right so we start off with
48:46 - the value of four so we're going to say
48:47 - chmod four
48:49 - and then for the other files uh uh also
48:51 - for the other for the group and for the
48:54 - other uh users on the system we want to
48:56 - use the same permission we so we're
48:59 - gonna say chmod four 444
49:02 - and then we specify the file name
49:05 - test.sh and we hit enter and now if we
49:08 - list the files in here you can see that
49:10 - now the file
49:11 - only has read permissions
49:14 - for the owner the group and other users
49:16 - on the system all right so that's how to
49:18 - set it now if i wanted to give the um
49:21 - the owner of the file read write and
49:23 - execute permissions we would need to add
49:26 - these binary values together all right
49:28 - so read is going to be equal to four all
49:31 - right right is going to be equal to two
49:34 - and um
49:35 - and execute is going to be equal to one
49:38 - all right so two plus four
49:40 - is going to be six six plus one is going
49:42 - to be 7. so we say chmod 7 that is for
49:46 - the user permissions or the owner
49:48 - permission so read write and execute
49:50 - let's say for the group and the other
49:54 - users on the system we want to give them
49:56 - only read permissions which again is
49:58 - denoted by four so that's four uh read
50:02 - permissions for the group
50:03 - and for other users on the system the
50:05 - same thing and then we type in the name
50:08 - of the file all right and i'm gonna hit
50:10 - enter
50:11 - and we can now display this and
50:13 - immediately you can see we now have read
50:15 - write and executable permissions for the
50:17 - owner for for the group we only have
50:19 - read permissions and for other users on
50:22 - the system we only have read permissions
50:24 - all right so that's very easy to
50:25 - understand now if it is complex i will
50:28 - leave a uh a resource in the description
50:30 - section that has a table of all of these
50:33 - permissions but the math is very simple
50:35 - right so again we're simply adding 4
50:37 - plus
50:38 - plus 2 plus 1 and that is for all
50:41 - permissions so this is
50:43 - right
50:44 - so again this is
50:46 - sorry this is read write
50:48 - and this is execute so 4 plus 2 plus 1
50:50 - is going to be 7. if i only want read
50:53 - permissions it's going to be four if i
50:55 - only want
50:57 - read and write permissions it's going to
50:58 - be six again that would be uh seven six
51:02 - six or if i only wanted um
51:06 - read
51:06 - uh and execute permissions that would be
51:09 - uh so for example if we wanted for the
51:11 - user or the owner read write and execute
51:14 - permissions that would be seven and then
51:16 - for the group and for all of the users
51:18 - we only wanted read and execute
51:20 - permissions that would be seven five
51:21 - five all right so it's very easy to set
51:24 - permissions this way and again you're
51:26 - always setting explicitly for the user
51:29 - uh for for the owner the the the user
51:32 - the group and then all the other users
51:34 - on the system so that's something you
51:36 - need to take
51:37 - into consideration all right so now
51:39 - let's move on to actually uh changing
51:42 - you know directory permissions all right
51:44 - so if i list all the files here again
51:46 - you can use the symbolic mode or the uh
51:48 - the octal mode whatever is comfortable
51:50 - with you we have the test directory that
51:52 - we created so again if we wanted to
51:54 - provide it with all permissions you can
51:56 - see that it has read write permissions
51:59 - for the current user and for the group
52:02 - and the other users it only has read
52:03 - permission so again we can say chmod
52:06 - uh user we if we use the symbolic mode
52:09 - we can say user
52:11 - uh user group and other that's going to
52:13 - be equal to read write and execute and
52:16 - then we say test the name of the
52:18 - directory and we hit enter and now if we
52:20 - list all the files in here you can see
52:22 - that the permissions have been set
52:24 - uh and then again if we wanted to go
52:26 - back i can say chmod
52:29 - and let's say we only wanted the file to
52:32 - be re we only wanted the user to be able
52:35 - to read and
52:37 - write to this particular directory then
52:39 - we would say this is going to be equal
52:41 - to 4 plus 2 is going to be 6
52:44 - 4 4 and then we say test and we hit
52:46 - enter we again we can just confirm the
52:49 - permissions have been changed and there
52:50 - you are so that's how to set uh
52:52 - permissions on a directory however if
52:55 - there are other directories and files
52:57 - within this directory then we need to
53:00 - set these permissions we can set them
53:02 - recursively and to do this we can then
53:05 - type in chmod
53:07 - and if we use the r command the capital
53:09 - r command that means recursive
53:11 - permissions so again we can then say uh
53:14 - before we do that let's actually move
53:16 - this file the test file the test.sh file
53:20 - into the test directory
53:22 - and you can see it it tells us that we
53:25 - do not have adequate permissions and
53:27 - that's because again if we list all the
53:30 - if we list all the permissions here for
53:32 - the the directory
53:35 - uh if we say for example uh for this
53:37 - particular file
53:39 - let's say we want to say chmod 755 test
53:43 - dot sh and now we say move uh test dot
53:46 - sh into the test directory and we hit
53:49 - enter that is telling us that we cannot
53:51 - move it nuts primarily because of the
53:54 - the the permissions for the directory so
53:56 - we can say chmod 755 a test and we hit
53:59 - enter and then we can say move
54:02 - we can then say test.sh into the test
54:05 - folder here and we hit enter and now we
54:07 - can move it all right so that proves
54:09 - again that the importance of permissions
54:12 - and understanding them so now if we
54:14 - check the directory test uh the the
54:17 - files within the directory test we have
54:19 - the test.sh file so now if we wanted to
54:22 - to actually provide this directory and
54:25 - all the files within it files and
54:27 - directories within it recursively with
54:29 - all permissions i could say chmod
54:33 - 777 and that gives it read write and
54:35 - executable permissions for the the owner
54:38 - uh the group and all other users on the
54:40 - system so again i would say chmod
54:43 - recursively 777 and i'm using the octal
54:46 - mode as you would have guessed and then
54:48 - we specify the directory and hit enter
54:50 - and now if we list all uh the directory
54:52 - itself you can see it has all
54:54 - permissions if we list uh all the files
54:57 - uh within the the test directory if we
55:00 - list the permissions here you can see
55:02 - that the test.sh file now has all has
55:04 - also uh those permissions and they have
55:07 - been applied recursively so if i had any
55:10 - other files or directories within this
55:11 - directory uh they would have been
55:13 - applied as well all right so now that we
55:15 - have actually uh taken a look at file
55:17 - ownership uh sorry file permissions
55:20 - let's take a look at file ownership
55:25 - in this video we're going to be talking
55:27 - about file ownership which is a fairly
55:29 - simple topic to understand and again in
55:32 - the previous video we used the chmod
55:35 - operator
55:36 - or the chmod tool and in this video
55:38 - we're going to be using the ch own tool
55:41 - again which is quite self-explanatory it
55:44 - allows us to change the ownership of
55:46 - files and directories which is quite
55:48 - important all right so as we did in the
55:50 - previous video
55:52 - you can see that we were able to
55:54 - change the permissions for this for the
55:57 - test directory and the test files within
56:00 - it and i've just changed them back to
56:02 - some pretty standard uh uh to some
56:04 - pretty standard permissions here and
56:06 - again uh we also had the
56:10 - we also had the uh the test.sh file
56:13 - within the test directory so
56:15 - let's talk about ownership so as i
56:17 - mentioned the current owner of this file
56:20 - right over here is alexis and this is
56:22 - the this is denoted uh right over here
56:24 - so the ownership information and the
56:26 - group ownership information if there is
56:29 - any
56:30 - now as i said uh we we haven't talked
56:32 - about adding users and groups which is
56:34 - fairly simple we haven't talked about
56:36 - you know setting particular permissions
56:37 - for users uh you know uh within the uh
56:40 - the sudo as file but that's something
56:42 - we'll get to later
56:43 - so if we wanted to change the ownership
56:45 - of this file
56:47 - to
56:48 - uh
56:49 - to to let's say the root user i can do
56:51 - that very very easily so again i can say
56:54 - let me just go into the the root user
56:56 - here and now i'm currently logged in as
56:59 - the root user so if i wanted to change
57:00 - the ownership and i'll go into the test
57:03 - directory if i wanted to change the
57:05 - ownership of the test.sh file
57:08 - what i can do now is i can say ch own
57:11 - and again you can use the what is tool
57:13 - or the what is utility to actually give
57:15 - you some more information about the the
57:18 - ch own tool so again it tells you this
57:20 - allows you to change your file owner and
57:23 - group and of course change the ownership
57:25 - of a file
57:26 - all right so now if i wanted to change
57:28 - the ownership of the test.sh file
57:31 - from alexis to to the root user i can do
57:34 - this very very easily so i can say
57:37 - i can say ch own
57:38 - and then i specify the the the user i
57:41 - want to uh to actually change the
57:44 - ownership to in this case to the root
57:46 - user and then i'll specify the file name
57:48 - which is going to be test.sh and i hit
57:50 - enter and now if i list all the files
57:53 - here you can see that the owner of the
57:55 - file has been changed to root however
57:57 - the group of this file is still alexis
58:00 - all right so that's something that we
58:01 - also have to change to change the group
58:04 - or to change the group order here
58:06 - it's very simple we use the change group
58:08 - command which again is denoted by
58:11 - uh it is denoted by change grp so chgrp
58:15 - and again we can use the what is tool
58:16 - change drp hit enter and this allows you
58:19 - to change group ownership so let's say
58:21 - we want to change the group ownership to
58:23 - root as well or to the root group
58:26 - if we type in groups and we say root
58:29 - again that tells us what
58:31 - what group the root user belongs to and
58:34 - as you can see it belongs to the root uh
58:36 - due to the root group uh and again we
58:39 - can say groups alexis and uh you can see
58:42 - these are the groups that the user lexis
58:43 - belongs to it belongs to the to the
58:46 - group alexis adm cd rom sudo etc etc
58:50 - all right so let's say i wanted to
58:52 - change the group of this file so change
58:54 - group
58:55 - um
58:56 - and then i say change it to the group
58:59 - root
59:00 - and i want you to change the file
59:01 - test.sh and now if we list the
59:03 - permissions here or the ownership sorry
59:05 - um
59:07 - we can see now that the owner of the
59:09 - file is the root user
59:11 - and the the group ownership of this file
59:13 - belongs to the to to to the group uh two
59:16 - to the root group right over here all
59:19 - right so that is how to use the ch own
59:22 - and the ch
59:23 - group or the change group command to
59:25 - change the ownership of a file now again
59:27 - we haven't experimented with users yet
59:29 - and that's something we'll be touching
59:30 - upon quite soon so we'll be explaining
59:34 - this as we move along
59:39 - in this video we're going to be talking
59:40 - about how to use the grep tool in
59:42 - regards to looking for data or
59:44 - information in files all right so this
59:46 - is one of the most important linux
59:48 - utilities or tools that uh you can you
59:51 - can learn how to use and it will really
59:52 - improve your efficiency when dealing
59:54 - with data and working in the terminal
59:57 - okay so let's actually get started with
59:59 - understanding what it is and what it
60:01 - does all right so the first thing we can
60:02 - do is we can just use the waters command
60:04 - to give us a bit of a context or
60:06 - information in in regards to what this
60:07 - tool is and what it does so again it
60:09 - tells you
60:10 - this prints lines matching a particular
60:12 - pattern and again if you're interested
60:14 - in learning more about the tool you can
60:15 - always use the manual pages or go
60:17 - through the manual pages for the
60:19 - particular tool so there you are it
60:20 - gives you information or in regards to
60:22 - how to use it the purpose of this video
60:24 - is to show you how to use it in the most
60:26 - efficient way or in a way to therefore
60:28 - in increase your understanding on on how
60:31 - to use the tool
60:32 - and how to make you efficient with using
60:34 - it
60:34 - all right so uh before we we actually
60:37 - take a look at a concrete example of how
60:39 - to use grep
60:40 - we must understand two things all right
60:42 - the first thing you need to understand
60:44 - is there are two ways of using grip the
60:45 - first way is by using grip on its own
60:47 - all right so again we can just type in
60:50 - grep here
60:51 - uh and the other way of using grip is by
60:53 - actually piping the output of another
60:55 - command into grep and then finding what
60:57 - you're looking for all right so you
60:59 - might be a little bit confused but let
61:00 - me explain what it does in a very simple
61:02 - way so grep is a tool that allows you to
61:04 - find strings or patterns in files
61:06 - alright so that means you can search or
61:08 - specify for the data or the strings
61:10 - you're looking for in a particular file
61:12 - all right so let's take a look at a com
61:14 - at a concrete example uh we're going to
61:16 - be looking for a word within a the
61:19 - proxychains.configuration file now if
61:21 - you're not familiar with what
61:22 - proxychains is uh you can check out my
61:24 - proxy change video where i show how to
61:26 - set it up uh and install it but again
61:28 - it's it really doesn't matter because
61:30 - you can follow up with any other files
61:32 - you're working with all right so let's
61:34 - say i
61:35 - i wanted to find the word dynamic within
61:37 - the file the cro the proxy chains
61:39 - configuration file
61:41 - let's let's take a look at how to use it
61:43 - using the first method which is using
61:44 - grep on its own without piping the
61:46 - output of another command so we can say
61:48 - grep and then the command we want to
61:50 - specify after or the parameter
61:52 - or the variable rather is the the data
61:54 - we're looking for so again you want to
61:56 - encapsulate this within double quotation
61:58 - marks so again if it's a word we can
61:59 - type in dynamic now the thing you you
62:02 - must ensure is that this this search
62:04 - will be case sensitive and i'll show you
62:06 - how to omit at the case sensitive
62:07 - searches so let's say we're looking for
62:09 - the uh the the word dynamic and then we
62:12 - specify the location of the file we want
62:14 - to search
62:15 - for this particular word in so again
62:17 - proxychains.conf
62:19 - and again we can use the double tab here
62:21 - like so and we hit enter and again that
62:23 - displays the word dynamic chain to us
62:26 - again that's the the word that it was
62:28 - able to find within the entire file
62:31 - however as i said this say
62:34 - this particular search is going to be
62:35 - case sensitive now if we want to omit
62:38 - the case sensitive search we can use the
62:40 - i parameter or the i argument here
62:43 - so once we hit i that means that it will
62:46 - search for all files
62:48 - or for all words within this particular
62:50 - file uh
62:52 - called a dynamic all right so once we
62:54 - hit enter you can see now it gives us
62:56 - two lines in the files uh they are both
62:58 - different in the fact that the first one
63:00 - is in case and the second one starts
63:02 - with an uppercase d all right so again
63:05 - it's a very simple tool to to use and
63:07 - again you can now see how efficient and
63:09 - how great it is at finding bits of
63:11 - information within files so again we can
63:14 - say let's say we want to look for
63:16 - particular users within the password
63:18 - file so i can say grep
63:20 - and i can say let's say we're looking
63:22 - for the user alexis in the password file
63:24 - and then i say etsy
63:26 - password and we hit enter and then it
63:28 - displays the user account information
63:30 - for the user lexis all right so that's
63:32 - very simply how to use it now let's take
63:34 - a look at the second method or way of
63:37 - using grep and that's by piping the
63:39 - output of one command
63:41 - into crep and then of course finding the
63:43 - data you're looking for that way and the
63:45 - way to do this is by using the pipe the
63:48 - pipe symbol or the pipe key on your
63:50 - keyboard now you can find this key on
63:52 - the extreme right of your keyboard just
63:54 - before your numpad if you do have one
63:57 - all right so the way we use it is let's
63:59 - say we wanted to cut the contents of the
64:01 - password file so let's say we wanted to
64:03 - say cat etsy
64:06 - password and we say we want to look for
64:09 - a particular string within this file and
64:12 - to do this with grep we now enter the
64:15 - pipe symbol
64:16 - which means we are redirecting the
64:18 - output of this initial command
64:20 - and we are now passing it on to grep so
64:22 - now grep can do something with this
64:24 - output so we say grep i want you to look
64:26 - for the word dynamic all right
64:29 - and we type we hit enter and we and
64:31 - there you are so again it does not give
64:33 - us any options here um and that's
64:36 - because i did not specify user here so
64:38 - again say alexis and again that gives us
64:40 - the using the user account information
64:43 - for the user lexus and again we can just
64:45 - change it to the
64:46 - proxychains.configuration file here
64:48 - and we hit enter and we change this to
64:50 - dynamic sorry um like so and it gives us
64:53 - the data now a lot of people have been
64:55 - asking me since uh since i covered
64:58 - redirecting output uh as i mentioned
65:00 - there are two ways of redirecting output
65:02 - the pipe
65:03 - key or the pipe command is used to
65:05 - redirect output and you know further
65:07 - process the data that you're outputting
65:09 - the difference between the pipe uh the
65:11 - pipe uh command or redirecting output
65:14 - with pipe and the greater than symbol is
65:15 - the greater than symbol will not display
65:18 - the information on to your terminal it
65:20 - will actually just output everything or
65:23 - redirect all the output of the command
65:25 - that you have
65:26 - that you've used into a file or even
65:28 - another command so again if i say cat
65:31 - fc password and i use this i wanted to
65:33 - redirect the output into it uh into a
65:35 - txt file i can say desktop
65:38 - and say test.txt and i hit enter and now
65:41 - if i actually get uh the the the file on
65:44 - my desktop sorry i believe i'm in my
65:46 - home directory here and i say test.txt
65:48 - hit enter it it actually has the content
65:50 - of the file so again that's the
65:51 - difference when uh when i'm actually
65:53 - talking about uh redirecting output with
65:56 - both the pipe and the greater than sign
65:58 - uh which is very different so
66:00 - again the pipe symbol is the preferred
66:02 - way of using or actually passing the
66:04 - output of one command and processing it
66:06 - with another command
66:08 - like
66:08 - leg grip and you can use it with other
66:10 - utilities that will actually show you
66:11 - how to use uh for the further further
66:14 - along the series here
66:16 - so
66:17 - you can use this with any other command
66:18 - that displays output onto the screen so
66:20 - i'm just going to use one more command
66:22 - just to show you how efficient this is
66:23 - so let's say i typed in ifconfig and i
66:26 - just want my inet information i can pipe
66:28 - the output of the ifconfig command and i
66:30 - can say i net
66:32 - uh and i can just say grab i net here
66:34 - and i hit enter and it gives a it gives
66:36 - me my inet information whether that be
66:38 - ipv4 or ipv6 all right so you can now
66:41 - see how useful this is and i want you
66:44 - guys to experiment with this let me know
66:46 - what you think
66:47 - where you're not understanding how to
66:48 - use it and i'll be sure to make up for
66:51 - full follow-up videos if you guys are
66:52 - interested in it
66:56 - in this video i'm going to be showing
66:58 - you how to use the locate utility to
66:59 - find files and i'll be also making an
67:02 - another video after this to show you how
67:03 - to use the find tool to actually find
67:06 - files as well so they're two utilities
67:07 - that you can use in this video we're
67:09 - going to be taking a look at how to use
67:10 - the locate tool it's a tool that goes
67:12 - ignored by many beginners or newcomers
67:14 - mostly because of its relative
67:15 - simplicity but it's a very efficient
67:17 - tool and does what it's supposed to do
67:19 - so again
67:20 - we can use the what is uh utility here
67:22 - to tell us more about what this tool is
67:24 - so again we can just say what is locate
67:26 - and as you can see it tells us it finds
67:28 - files by the name which is very simple
67:30 - and again you can use the manual page
67:33 - you can use the manual for this
67:34 - particular tool to learn how to use it
67:36 - so i'm just going to be covering just
67:38 - enough to make you efficient with the
67:39 - tool and make you understand how it
67:41 - works and how you can use it in
67:42 - conjunction with grip
67:44 - all right so
67:46 - uh let's actually get started with a
67:48 - very simple example right so let's say i
67:50 - wanted to locate a file on the system
67:52 - right and
67:53 - i wanted to locate a the password file
67:56 - so i can say locate
67:57 - password and hit enter and you can see
68:00 - it's given me a lot of a lot of
68:02 - information here a lot of files called
68:04 - password on my system
68:05 - right now this is really not efficient
68:08 - because um again i'm looking for a
68:11 - particular file that i'm looking for
68:13 - which is bill which actually exists in
68:14 - the etsy file and we can see the result
68:17 - well that's not actually the result here
68:19 - with this is the result right at the top
68:20 - here all right however this really is
68:23 - not efficient or an efficient way of
68:24 - going about it right so uh this is where
68:27 - we can now specify the options that we
68:29 - can use
68:30 - uh that we can use with uh with a tool
68:33 - like locate so let's say we wanted to
68:36 - get only the files that match this
68:38 - particular pattern or these particular
68:40 - uh strings here so the password string
68:43 - so to do this we type a or we use the uh
68:45 - we can use the all parameter or option
68:48 - here and once we hit enter again that
68:50 - gives us the same information so what
68:51 - does that means is it's actually
68:53 - displaying all the files on the system
68:56 - uh that actually match the patterns of
68:58 - password here
69:00 - and because this file really doesn't
69:01 - have any extension we now have to deal
69:03 - with the actual path or the path that we
69:06 - we might want to be uh finding this file
69:09 - in now of course that is counter
69:11 - intuitive given that um
69:13 - i can say that this belongs in the etsy
69:15 - in the etsy directory and again that now
69:18 - it now actually narrows down uh the
69:20 - files into what they may be so again
69:22 - that's the the actual file where we were
69:24 - looking for but you can see how tedious
69:26 - this is so we can actually shorten this
69:29 - now by actually using the grep tool
69:31 - which actually showed you how to use and
69:33 - it's very very simple so again we're
69:35 - simply going to use grip to look for
69:37 - particular information related to the uh
69:40 - to the information that is is given to
69:42 - us by locate so we can now say locate
69:45 - and then we say we're looking for
69:47 - password and
69:49 - we close that and now we say we pipe the
69:51 - output and we say grip let's look for
69:54 - password uh within etsy within the etsy
69:58 - directory so again
69:59 - we can now say etsy here sorry fc and
70:05 - we say password or we can just say the
70:07 - etsy directory here and then we can hit
70:09 - close and you can see it gives us the
70:11 - results we're looking for it highlights
70:13 - them in red or depending on the color
70:15 - scheme you're using in your terminal so
70:16 - again we can improve the efficiency of
70:18 - this by typing in
70:20 - etsy password and we hit enter so this
70:23 - is a file without a particular extension
70:25 - which makes it relatively difficult to
70:27 - actually find but you can find it
70:29 - relatively easily if you use grep here
70:31 - um so so let's actually talk about um
70:34 - about another file that has an extension
70:35 - that we can use to explain this here
70:38 - all right so
70:40 - um let's say we're working with the
70:43 - the the resolve file or the resolve
70:46 - configuration file which is used for to
70:48 - modify your name servers which is
70:50 - available on our linux systems what we
70:52 - can say is we can say locate
70:56 - resolve and uh sorry resolve and we hit
70:58 - enter and again tons of files but now we
71:01 - know that this file has an extension so
71:03 - we can say uh locate it's uh we can say
71:05 - locate resolve uh dot conf and read
71:08 - enter and again it still gives us a lot
71:09 - of files but we're looking for the one
71:11 - that belongs in the that exists in the
71:13 - etsy folder again so what we can do now
71:16 - is we can say locate and we want to
71:18 - actually
71:20 - we're looking for we can use the all uh
71:22 - the old parameter here
71:23 - and then we say we're looking for
71:26 - uh all files with an extension or we're
71:29 - looking for a file with the with an
71:30 - extension of uh conf or config here so
71:34 - we'll use the wildcard option to mean
71:36 - that this we're looking for for all
71:38 - files with this particular extension so
71:39 - we say
71:40 - um all and then we say conf and we close
71:44 - those um these quotation marks and now
71:46 - we pipe the output into grep here and
71:48 - now with grep we can then say we are
71:51 - looking for resolve here and we sorry
71:53 - that is we're looking for resolve when
71:55 - we enter and now it gives us the
71:57 - information we're looking for
71:59 - and the first option here so again
72:01 - that's with the
72:02 - the actual extension of confirm so again
72:04 - we're limiting the results to
72:07 - only the files that have an extension of
72:08 - config or configuration and then we can
72:10 - use grep to find the particular string
72:13 - that is most important to us so let me
72:15 - give you another example because this
72:16 - seems very simple
72:18 - so let's say
72:20 - we're looking for the proxy chains right
72:23 - uh so we can say proxy change and hit
72:25 - enter and there you are you can see
72:27 - immediately now because that is a unique
72:29 - string it gives us the results
72:31 - immediately with the uh we with the uh
72:33 - the extension here and that's because we
72:35 - specified it so again we can just say
72:37 - locate you know proxy chains
72:40 - and hit enter and there's a ton of files
72:42 - now another thing you might find useful
72:44 - is actually
72:46 - displaying how many results are matching
72:49 - the particular pattern you have
72:50 - specified exist so let's say i want to
72:52 - say locate i can say all that means all
72:55 - the the the matching uh the matching
72:58 - patterns here so we say all and then we
73:00 - can use the c uh the c argument here
73:03 - which specifies or prints the number of
73:05 - matching results and then we say we
73:08 - specify the string we're looking for or
73:10 - we can just say we're looking for proxy
73:12 - chains and we enter and it tells us here
73:14 - that we have 25 uh files
73:17 - uh or results that actually have the
73:19 - matching patterns here now if we limit
73:21 - it to
73:22 - conf and we hit enter now you can see we
73:24 - only have two so that's essentially how
73:26 - to use this tool uh in regards to you
73:28 - know displaying the amount of matching
73:30 - uh patterns you have and if you wanted
73:32 - to locate so if we get rid of this here
73:36 - and let's hit enter you can now see the
73:37 - results that it tells us here so we have
73:39 - the one in the etsy folder and one in
73:42 - the the debian package management uh
73:45 - the debian package management folder uh
73:47 - in regards to its actual configuration
73:50 - there so
73:51 - that's how to use the locate tool now
73:52 - again let me just cover one more
73:54 - additional parameter you can use and
73:56 - that is the the eye parameter which
73:58 - again is very important and that means
74:00 - that you want to ignore case uh that's
74:02 - something i should have mentioned
74:03 - earlier all searches with locate are
74:05 - typically going to be case sensitive so
74:08 - again i can say proxy chains
74:10 - and i hit enter and we have no results
74:12 - right so if i wanted to ignore the case
74:14 - sensitivity of what i've just hit uh of
74:16 - the the pattern i've just entered i can
74:18 - just hit i and i'd enter and again we
74:20 - get the same results and i can now limit
74:22 - this to proxychains.conf and there you
74:24 - are and again i can i can partner these
74:26 - or i can actually combine these commands
74:28 - with each other to give us the
74:30 - information we're looking for so again a
74:32 - very very simple tool to use but again
74:34 - it gives you very consistent results
74:40 - in this video we're going to be taking a
74:41 - look at how to enumerate uh system
74:43 - information on linux now you might be
74:45 - wondering what exactly do you mean here
74:47 - well i'm simply referring to uh
74:49 - important information about your system
74:51 - and the user currently logged in as just
74:54 - information that you might need when
74:56 - you're currently logged onto a system
74:57 - and you might want to know more about
74:59 - what you're dealing with all right so
75:00 - let's get started now the first
75:03 - uh the the first thing we need to do is
75:05 - we need to find out what user we're
75:07 - currently logged in as and the host name
75:09 - and the use id etc etc all right so
75:13 - let's get started with that
75:15 - so the first thing i want to know when
75:17 - i'm logged in is who am i exactly and
75:20 - that tells me the current user that i'm
75:21 - logged in as and then if i type in host
75:23 - name
75:24 - uh that again gives me the current
75:26 - hostname of this workstation or of this
75:28 - computer in my case it tells me i'm
75:30 - running uh the hostname is alexis
75:32 - workstation now if you do want to change
75:34 - your uh your hostname you can you can do
75:38 - so by by modifying the host name file i
75:41 - believe that's what it's called the yeah
75:44 - there we are and you can see that mine
75:46 - is set to alexis workstation or ws which
75:49 - is an abbreviation of workstation so you
75:51 - can change this and in my case i don't
75:53 - want to do this so i'm just going to
75:54 - exit out of here
75:56 - so that is how to find out the current
75:58 - user logged in as and the host name
76:01 - now if you want to find the user id that
76:03 - you're currently logged in as you can
76:04 - simply type in id
76:06 - that gives you the current use id
76:09 - and again of course the user you then
76:10 - have the group id which is quite
76:12 - important and the other groups that this
76:13 - user is currently a part of
76:15 - now um
76:17 - in regards to groups and the groups that
76:20 - a particular user may be part of the way
76:23 - to enumerate this information is by
76:25 - typing in groups and then the name of
76:27 - the user so we can type in groups alexis
76:30 - and once we hit enter again it tells us
76:33 - the user lexis is a part of these groups
76:35 - so it's a part of the group alexis sudo
76:38 - among the other ones here that are
76:40 - essentially system uh system accounts
76:42 - here that you or system groups that uh
76:45 - really have to do with just permissions
76:47 - to a particular service
76:49 - um so that is basic user enumeration now
76:51 - let's talk about a little bit about the
76:53 - system and enumerating information like
76:56 - um
76:57 - like your uh
76:59 - like your linux distribution the version
77:01 - stuff like that so uh i'm currently
77:03 - using a debian system or i'm using
77:06 - ubuntu so again it's based on debian so
77:08 - the the practices are all the the
77:10 - techniques and the commands are quite
77:12 - similar on both ends now when dealing
77:14 - with uh you know systemd based
77:16 - distributions
77:17 - uh and all of course red hat based
77:18 - distributions the process is going to be
77:20 - slightly different and i'll explain why
77:22 - and how
77:23 - um so on linux if you on sorry on
77:27 - on on tpn or on ubuntu if you want to
77:29 - enumerate your linux uh if you want to
77:32 - enumerate your linux distribution
77:34 - version and the name you simply type in
77:37 - lsb release a and of course
77:40 - lsb is a utility and you may not have it
77:43 - installed but again it comes with um
77:46 - with db and ubuntu by default so again
77:49 - that tells us the distributor the
77:50 - distributor id the description again
77:53 - ubuntu 18.04
77:55 - 0.3 lts
77:57 - the release name
77:58 - sorry the release version and the code
78:00 - name here which in this case is bionic
78:02 - beaver
78:03 - so again you can also use the check the
78:05 - contents of the issue file
78:08 - so if we type in cat etsy issue you can
78:10 - see it tells us the same thing here
78:12 - um
78:14 - so that is for debian based
78:16 - distributions now um
78:18 - when dealing with system d distributions
78:21 - like um
78:23 - centos arch
78:25 - red hat
78:27 - also debian to to some extent you can
78:29 - also use the you can also take a look at
78:32 - the content within the os release
78:34 - file which will also enumerate on debian
78:36 - as well but i just wanted to explain
78:38 - that so you guys don't get confused all
78:40 - right so what you can do is just simply
78:42 - type in cat let's see
78:44 - os
78:46 - os release and again that gives us the
78:47 - information that we were looking for now
78:50 - on um on ubuntu and on db and if i hit
78:53 - enter it tells us nothing there if i
78:56 - then use the star or the wildcard we hit
78:58 - enter that gives us the linux
79:00 - distribution information
79:02 - and a bit more information regarding the
79:04 - privacy policy
79:06 - uh support url stuff like that
79:09 - and um now that's uh now that we've also
79:12 - covered the system the uh base
79:14 - distributions let's talk about uh
79:16 - dealing with red hat now on red hat um
79:18 - if you want to take a look at the
79:20 - uh the red hat release version uh you
79:23 - can i believe you can find it if i type
79:24 - in cat hc and then you type in red hat
79:28 - release now i'm currently not using a
79:30 - red hat based distribution so that would
79:32 - pretty much give you the red release
79:34 - version um so that's basically
79:36 - enumerating your distribution name uh
79:40 - your distribution version and name um if
79:42 - you are using you know some of these uh
79:45 - distributions based on debian or the
79:47 - systemd based distributions like arch
79:50 - centos or red at enterprise linux
79:53 - so again let's talk about you know
79:56 - enumerating information about your
79:57 - processor or your cpu
79:59 - so you can easily do this by typing your
80:01 - ls cpu and we can hit enter and again
80:03 - that enumerates information about your
80:05 - cpu so it gives you information like
80:07 - your architecture and the instruction
80:09 - set
80:10 - um the amount of uh the amount of cores
80:14 - the threads per core the cost per socket
80:17 - sockets
80:18 - vend id
80:19 - cpu family the model model name in this
80:22 - case it's an i5 8400
80:25 - uh the stepping the
80:27 - the
80:28 - frequency here in megahertz so max and
80:31 - minimum as well so 4 gig by 4 gigahertz
80:34 - and the minimum of 800 megahertz
80:36 - uh
80:38 - virtualization and then the l1 l2 and l3
80:41 - cache and so information about your cpu
80:44 - all right so now that we've taken a look
80:47 - at enumerating cpu information let's
80:48 - take a look at enumerating kernel uh
80:50 - information which is done using the you
80:52 - name
80:53 - uh
80:54 - using the unnamed command or utility
80:55 - which essentially stands for unix name
80:59 - so again if we just type in what is your
81:01 - name here and you can see it says prints
81:03 - system information and guess the name
81:05 - and information about the current uh
81:07 - kernel so using it is very very simple
81:09 - so if you type in your name a that
81:11 - displays all the information so again it
81:13 - gives you information about like your uh
81:15 - your host name the current linux kernel
81:17 - that's that's installed and currently
81:19 - running
81:20 - and then you have the uh you then have
81:23 - the instruction set here i'm going over
81:24 - the the important information so again
81:27 - we can uh we can actually take a look at
81:29 - the various options that are available
81:31 - here so again we can say
81:33 - if we want the kernel uh we if we want
81:36 - the kernel version here we can type in
81:38 - uh we can say you name
81:41 - s and that tells us the kernel that
81:43 - we're currently running which is the
81:44 - linux kernel the version here can be
81:47 - printed out by typing you name
81:49 - uh i believe it's your name r that's the
81:51 - current release so in our case it's
81:53 - version 4.15 which i believe is stable
81:57 - not too sure
81:58 - um and then if you want again if you
82:00 - want the
82:03 - the information about the the
82:04 - instruction set for your processor you
82:06 - can type in your name
82:08 - you name p
82:09 - again that gives you the instruction set
82:10 - in our case x 86 64.
82:14 - uh and then if we want the hardware
82:16 - platform we can type in you name i
82:19 - so we can say you name i
82:21 - the hardware platform again that's the
82:23 - that's uh the information in regards to
82:25 - the architecture and then the operating
82:28 - system
82:29 - uh we can say you name
82:31 - o and it enter gnu linux so again just
82:33 - basic information regarding your system
82:36 - but uh the key bits of the important
82:39 - pieces of information here are your
82:40 - kernel and the instruction set of course
82:43 - so that's essentially all the
82:45 - information uh that you might want to
82:48 - enumerate regarding your system or you
82:50 - might be interested in now dealing with
82:53 - um with disk usage and um disk uh and
82:57 - disk usage disk space i'll be making a
82:59 - separate video on that so uh you guys
83:01 - can stay tuned for that but in regards
83:03 - to your system this these all the
83:05 - commands that you can use to find
83:06 - information about your the current user
83:08 - that's logged in
83:10 - uh so again if i type in who again that
83:12 - tells me the current users that are
83:14 - logged in in my case it's uh the only
83:17 - user is alexis so that's just an
83:19 - additional tidbit so again we've covered
83:22 - you know the user id the group id and
83:26 - we've also covered enumerating
83:27 - distribution information and the kernel
83:29 - information so
83:34 - in this video we're going to be covering
83:35 - how to use the find tool and we'll also
83:37 - be taking a look at some challenges on
83:39 - of the wire bandit uh more related to
83:41 - what we're taking a look at in this
83:42 - video which is how to correctly utilize
83:45 - the find command to look for files or
83:46 - directories within your system so an
83:48 - extremely uh you know very useful tool
83:51 - that will really help you save time when
83:53 - looking for particular files and i'll be
83:55 - showing you how to use it right now most
83:56 - efficiently so again we can use the what
83:58 - is utility to find out more information
84:00 - about the tool so again it tells you at
84:02 - this this tool allows you to search for
84:04 - files and in a directory hierarchy you
84:07 - can also check out the man pages for
84:08 - this particular tool
84:10 - and again you can go through all of this
84:12 - if you want to i'm going to be covering
84:14 - all uh the the information that is
84:16 - necessary or that will make you the most
84:18 - efficient with this tool
84:20 - all right so let's get started let's
84:21 - stop wasting time so using the tool is
84:23 - very simple we say find and then after
84:25 - sayings find we need to specify uh the
84:28 - directory we want to we want to search
84:30 - in so again we can specify the current
84:32 - directory that we are currently in uh by
84:34 - you know using the full stop or the dot
84:37 - uh or we can specify the entire linux
84:39 - file system directory which is done by
84:41 - using a forward slash like so as you
84:43 - would when navigating directories
84:45 - or i can specify an individual directory
84:47 - that i want to uh that i want to search
84:49 - in so i can say home
84:51 - alexis which is pretty much the
84:52 - directory we're working in so what i'm
84:54 - going to do is i'm just going to search
84:55 - the entire linux file system directory
84:57 - which if you're going to do you do
84:58 - require root or pseudo privileges
85:00 - otherwise you'll not be able to access
85:02 - files and directories that you know you
85:04 - do not have adequate permissions to
85:05 - access
85:06 - so i will also add the pseudo command
85:09 - here
85:10 - so again we're going to find files
85:11 - within the linux file system directory
85:13 - we then specify the other bit of
85:15 - information that uh will help us
85:16 - fine-tune our results which is of course
85:18 - going to be the type that we're dealing
85:20 - with so the type in regards to the find
85:22 - command is very simple it simply refers
85:24 - to what you're dealing with so are you
85:26 - looking for a file or a directory and
85:28 - that can be denoted by either using f
85:31 - for file or d for directory in our case
85:33 - we're looking for a file so we're just
85:35 - going to hit file all right so very
85:37 - simple next we specify the other
85:39 - variable that again will help us
85:40 - fine-tune our search results and is very
85:43 - important which is the name so what is
85:45 - the name of the file you're looking for
85:46 - so i can say proxy chains
85:49 - and i know i'm using the same example
85:51 - but again i'll show you how robust this
85:53 - is in a second so i can say
85:54 - proxychains.conf
85:56 - and after this i can pretty much hit
85:58 - enter now the important thing to note
86:00 - here
86:01 - is that i can use uh the grep command in
86:03 - conjunction with find to you know pipe
86:05 - output and specify configuration files
86:07 - by themselves similar to what we looked
86:09 - at when we're taking a look at the
86:10 - locate tool uh so i can just hit enter
86:13 - and you can see we found the
86:14 - configuration file and we didn't have
86:17 - adequate permission for some files which
86:19 - is perfectly fine
86:20 - um so that's how to use the find tool
86:22 - and i've shown you the various
86:23 - parameters you can use so you can
86:24 - specify the type uh the name uh which
86:27 - i'll show you how to how robust it can
86:28 - be in a second so let's take a look at
86:30 - the same example so i'm just going to
86:32 - say find um and you know we can just say
86:35 - sudo sudo find
86:37 - and we say the type is going to be
86:40 - a file which you can also change to
86:42 - directory if you are looking for a
86:43 - directory so for example i can say
86:46 - directory and then i can say name
86:48 - and their name is going to be alexis
86:50 - look for the directory lexis and hit
86:52 - enter and their ui tells us oh we have
86:54 - various uh directories here so we can
86:56 - see we have um
86:58 - we have the home directory here and a
87:00 - few other files here that uh i've
87:02 - actually popped up from my external hard
87:04 - drive which i don't think are that
87:05 - important
87:07 - but there you go that just shows you how
87:09 - robust this tool is in regards to you
87:11 - know looking for particular files so you
87:13 - can change that up so so let's go back
87:14 - to our previous example so i'm just
87:15 - going to say the name is going to be
87:17 - proxy chains now i mentioned in the
87:19 - previous video the the case sensitivity
87:21 - which is quite important so if you are
87:24 - performing a search
87:26 - uh in which you do not want any case
87:28 - sensitivity you use the i name command
87:30 - instead of the name command and then
87:32 - after this you can say i can say alexis
87:34 - for example and of course it will ignore
87:36 - all the cases here so i can you know i
87:39 - can combine it with whatever uppercase
87:41 - up and lowercase uh characters i want
87:43 - and i'll still get i'll still get the
87:45 - same results
87:46 - uh and i can just hit enter
87:49 - and uh this time again it gave us uh the
87:52 - same results but uh it gave us different
87:54 - results because we are looking for a
87:56 - file so if we change this into a
87:57 - directory here you can see that it's
87:59 - going to give us the same results that
88:00 - we had in the in the initial run when
88:02 - we're looking for uh you know
88:04 - directories uh called alexis so that's
88:06 - how robust this tool is so i talked
88:08 - about using um using extensions which is
88:11 - again very very simple so let's say
88:13 - we're looking for extensions and we're
88:15 - looking for all uh conf files which
88:17 - belong in the etsy directory so i'm just
88:19 - going to say etsy and we've now written
88:21 - it down we can say name is going to be
88:24 - i can say um
88:27 - uh we can just say conf and we'll use
88:28 - the wildcard uh so i say conf we'll just
88:31 - use the same configuration file
88:32 - extension
88:33 - uh and then i can say grep and then i
88:35 - specify the name of the file right so uh
88:38 - you know i can hit enter and this is
88:40 - going to display all the configuration
88:42 - files within the etsy directory but
88:44 - again i have to specify the
88:46 - uh the file specification here and i'm
88:48 - going to enter
88:49 - and there you are so it gives you all
88:50 - the configuration files so very simple
88:53 - tool to use now let's talk about the
88:54 - other variables that you can use to
88:56 - specify
88:57 - that will help you fine-tune your your
88:59 - search results and that is by specifying
89:01 - the size of the file
89:03 - and the permissions all right so again
89:05 - we can just use a simple example i'm
89:07 - just going to say find and i'm going to
89:09 - say we'll say type and that's going to
89:11 - be you don't really need to specify the
89:13 - type if you don't want to it's just
89:14 - there to help you fine tune your results
89:16 - so i can perfectly ignore it if i know
89:18 - what i'm looking for
89:19 - precisely i can then say you know name
89:22 - and the name is going to be proxy chains
89:25 - i can say epoxychains.conf you know i
89:26 - have the whole name
89:28 - and then i can say size i'm looking for
89:30 - a file with a particular size so i can
89:32 - then use the various options i have so i
89:34 - can say it's going to be plus one
89:36 - megabyte which can be done like so uh or
89:39 - i can you know i can save plus a hundred
89:41 - megabytes whatever i want to say so in
89:43 - this case let me just say plus one
89:44 - megabytes and hit enter
89:46 - and uh well we're getting uh various
89:48 - permission errors here and that's
89:50 - because we'll just say etsy
89:52 - hit enter
89:54 - and i will say sudo and
89:57 - there we are and we got no results at
89:59 - all i just wanted to to actually provide
90:01 - it with the adequate the adequate
90:02 - permissions so that i can show you that
90:05 - if we use uh you know
90:07 - if we use parameters like these size and
90:10 - we specify it down to due to the actual
90:13 - size of the file we can sort of uh
90:14 - fine-tune our results very very uh to a
90:16 - very deep granular level
90:18 - so if i just um
90:21 - let's say um etsy and i can then grab
90:26 - proxy chains
90:28 - conf and
90:29 - i hit enter here you can take a look at
90:32 - let me just change this to a human
90:34 - readable format so you can say it's
90:36 - about uh four kilobytes here and uh we
90:39 - can then you know you can specify the
90:41 - size depending on on how you want it and
90:43 - i'll get back to this uh when we'll be
90:45 - taking a look at the uh the over the
90:46 - wire banded challenges because that's
90:48 - where i really want to showcase the
90:49 - power of the fine tool
90:51 - let's talk about permissions before we
90:53 - actually get started with at the over
90:54 - the wire bandit challenges and the
90:56 - permissions are very simple to to
90:58 - actually specify here i'm going to be
91:00 - covering you know users and groups and
91:01 - we'll be taking a look at that example
91:03 - but let's talk about uh permissions
91:05 - first so permissions allow you to find
91:07 - again files that have particular
91:09 - permissions very very straightforward
91:11 - here so you know i can say um
91:14 - let's say i create a file go to my
91:16 - desktop here and i'll say touch
91:18 - alexis dot sh you know just a simple
91:21 - shell script or a bash script here hit
91:23 - enter and i say chmod
91:25 - 400 alexis dot sh and hit enter and they
91:29 - say find within
91:30 - the home directory i can then say
91:34 - let's say we're looking for a file
91:36 - type is going to be a file we don't have
91:38 - a name but we have permissions so i can
91:40 - say firm
91:41 - let's look for
91:43 - let's look for files with the permission
91:44 - of 400 which means
91:47 - um
91:48 - which means that the the the owner or
91:50 - the user can read the file um but the
91:53 - other group and all other users on the
91:55 - system are not able to access it so
91:58 - again uh that should give us a few
92:00 - results but we don't have adequate
92:01 - permissions for the other files so you
92:03 - can see we get the result right over
92:05 - here so you can use permissions to help
92:07 - fine-tune your search results and get
92:09 - the exact results you're looking for
92:11 - you know we can also specify 744 we hit
92:14 - enter and uh
92:16 - it looks like we had a few files with
92:18 - those particular permissions but
92:20 - nothing no no important files that we
92:23 - that don't have the correct permission
92:25 - so you can see that this can help you
92:26 - find a files on your system that have
92:28 - incorrect permissions and then you can
92:30 - rectify them uh you know like so instead
92:32 - of going manually and checking for their
92:34 - permission so very useful tool now that
92:36 - we've taken a look at how to use the
92:38 - tool let's take a look at how to
92:40 - implement it in some challenges and
92:42 - that's what we're going to do in the
92:43 - next step which is the over the wire
92:45 - challenges so you can follow along if
92:46 - you want to and i'll see you there
92:48 - all right so we are back on over the
92:50 - wire and i'm currently on the bandit uh
92:53 - on the bandit web page here and uh you
92:56 - you can get access to this challenge by
92:58 - following the instructions on level zero
92:59 - uh the levels we're interested in are
93:01 - going to be levels four five
93:03 - uh level fours uh to level four to level
93:06 - six so again we'll just go to level four
93:08 - here and i currently have access and
93:09 - i've solved the challenges uh all
93:12 - all up till level four so we can get
93:14 - started
93:15 - all right so
93:16 - uh you can see that uh level four
93:18 - pertains uh
93:20 - actually finding a file so you can see
93:22 - the password for the next file or for
93:24 - the next level is stored in the in the
93:26 - only human readable file
93:28 - in the in here directory uh tip if your
93:31 - terminal is messed up you can try the
93:33 - reset command and again it gives you the
93:35 - various commands that you can use to
93:36 - solve this level so again let's go back
93:38 - into our terminal as you can see i'm
93:40 - currently on bandit 4 and we can list
93:42 - the files within this home directory and
93:44 - you can see we have an in here directory
93:46 - so let's uh let's go in here let's see
93:48 - what's going on
93:50 - so if you list the files here you can
93:52 - see we have various files and if i if i
93:54 - try cutting one of these uh one of these
93:56 - files you can see that um
93:59 - sorry let's specify that hyphen there
94:02 - let's say file zero zero we can hit
94:04 - enter and you can see it has a various
94:06 - uh
94:07 - it has various pieces of data and of
94:09 - course our job is to look for files
94:11 - within this in here directory that have
94:14 - uh human readable data so again what we
94:16 - can do is we can use the find command
94:18 - here uh to actually find uh you know the
94:21 - various files that have human readable
94:23 - data so i can say uh in this current
94:25 - directory and we are looking for um
94:28 - [Music]
94:29 - we can actually just say find and then
94:31 - in this directory uh we're looking for
94:34 - the type
94:35 - it's going to be a type of file here and
94:37 - then we can grip the output or we can
94:39 - pipe the output sorry and within we can
94:41 - use the x args command here to look for
94:45 - um i believe it's uh if we just expand
94:48 - this uh let's take a look at how to use
94:50 - x cogs one more time
94:51 - uh we wanted to display uh the file read
94:54 - items from a file uh instead of standard
94:57 - uh standard input
95:00 - uh
95:00 - and yeah this if we type in file that
95:03 - should tell us the files that we're
95:04 - dealing with all right and this will
95:06 - help us shorten the process so let's go
95:08 - back in here as we say file in it enter
95:11 - and as you can see it tells us that in
95:13 - file 0 7 we have some ascii text however
95:17 - in all the other files we have data so
95:18 - again we can access this file now we can
95:20 - just cap the contents of this file and
95:22 - we should get the password next level
95:24 - all right excellent so we can copy this
95:26 - let me exit and we'll go to bandit level
95:29 - five here i'm going to enter we'll just
95:32 - paste in the password
95:34 - and we can get started now all right so
95:36 - let's take a look at what a challenge or
95:38 - level five uh pertains
95:40 - so again it says the password for the
95:42 - next level is stored in a file somewhere
95:44 - under the in here directory and has all
95:47 - of the following properties it's human
95:49 - readable um okay all right it's going to
95:52 - be a human readable file um 1033 bytes
95:56 - in size
95:57 - and it's not executable all right so
95:59 - that's uh an option these are all the
96:01 - these are all parameters that we'll have
96:03 - to specify to some extent
96:05 - so let's actually get started so
96:07 - uh these are going to be in the in here
96:10 - directory so i'll just go into the in
96:11 - here directory and you can see we have
96:13 - uh other directories within this so
96:15 - we're going to just say find
96:17 - uh and we're going to say type is going
96:19 - to be a file uh we were told that we
96:22 - have it's going to be human readable so
96:24 - you can use x args there
96:27 - uh
96:27 - size i showed you how to specify size
96:29 - now the the thing about specifying size
96:32 - in bytes is if we just take a look at um
96:37 - we take a look at the at the find tool
96:38 - and we just
96:40 - grip for some for size you can see that
96:43 - it tells us the size does not count
96:45 - indirect blocks uh
96:47 - etc so size one megabyte is not
96:49 - equivalent is not equivalent to size so
96:51 - if you're specifying it in bytes you
96:53 - need to specify uh the actual number and
96:55 - then the c here all right so that's what
96:58 - we have to do so um we just go back in
97:01 - here and we go to type a file and then
97:03 - we say size
97:04 - is going to be 10 33 c and then after
97:07 - this um
97:09 - we're supposed to us
97:11 - the file is not
97:12 - is not executable so we can then use the
97:15 - logic um operators here so we're going
97:18 - to say
97:19 - not executable and executable is another
97:22 - parameter you can specify and then we
97:24 - can use xrx here
97:26 - and we're going to say file and hit
97:28 - enter
97:29 - and you can see it tells us
97:31 - that maybe here07 and file2 has some
97:34 - ascii text with very long lines all
97:37 - right so let's cut the content off this
97:39 - file
97:40 - and just get it we're just going to
97:42 - enter here and we have the password so
97:44 - let's exit and go on to the final level
97:46 - in this particular video so i'm gonna
97:48 - go into level six hit enter
97:51 - and i'm gonna paste the password in here
97:53 - and we can now take a look at what level
97:56 - six pertains
97:58 - uh so level six the password for the
98:00 - next level is stored somewhere on the
98:02 - server and has all of the following
98:04 - properties so yeah this is now where we
98:06 - have the user and group specifications
98:09 - which is really simple so again we're
98:11 - told to look for a file
98:13 - on the entire server
98:15 - owned or the the entire linux file
98:17 - system that is owned by the user bandit
98:19 - seven
98:20 - and is owned by the group bandit six and
98:23 - in 33 bytes in size all right so we can
98:27 - then say um
98:28 - it's on the entire server we have any
98:30 - files here no we don't so we can say
98:32 - find and we're looking for a user which
98:36 - is going to be bandit seven and a group
98:39 - which is again very easy to specify
98:41 - group is going to be bandit 6
98:46 - the particular file we're looking for is
98:48 - going to be
98:50 - 33 bytes so 33c
98:54 - [Music]
98:55 - i think that's pretty much it in regards
98:57 - to the options or the parameters that we
98:59 - were given so let's actually see if we
99:01 - can find this file when it enter
99:05 - and
99:05 - we get various
99:07 - you know permission denied errors here
99:10 - and it looks like we get a password file
99:13 - here so that's under the var folder or
99:15 - the var directory and it's a bandit 7
99:18 - password so let's copy the directory do
99:19 - that the actual file path the relative
99:22 - file path and cat the contents of that
99:24 - and we get the password to the next
99:26 - level and i'm just going to hit exit and
99:29 - we can move on to bandit level 7 which
99:32 - is now
99:32 - is is going to pertain to another
99:34 - challenge which is out of the scope of
99:36 - this video so
99:40 - in this video i'm going to be talking
99:41 - about shells now this might be a little
99:43 - bit confusing for you if you're a
99:45 - beginner to linux but um
99:47 - you the only thing you need to
99:49 - understand is that your the various
99:51 - types of shields you can use on linux
99:53 - now if you're using ubuntu or debian the
99:56 - default shell that you'll be you'll be
99:58 - given is going to be called the bash
100:00 - shell all right and again i can confirm
100:03 - this by echoing my variable my shell
100:05 - variable here so i can say echo shell
100:07 - and again it tells you the the current
100:09 - shell that i'm using which is bash now
100:11 - bash is an acronym for the born again
100:14 - shell
100:15 - uh so that means that there was a born
100:17 - shell and you're familiar with it and
100:19 - that is the sh or the sh shell so uh
100:23 - all of these shells can be used to to
100:26 - actually work with the linux system
100:28 - that's that's entirely up to you my
100:30 - objective in this video is to explain
100:33 - how to change your default shell and not
100:35 - work with the bash shell
100:37 - all right now
100:38 - on linux if you want to actually display
100:40 - all the shelves that you currently have
100:42 - that can be used uh you can essentially
100:45 - just read the contents
100:47 - of the shells file in the etsy directory
100:49 - and i can hit enter and you can see it's
100:52 - going to tell me it's going to tell you
100:53 - the valid login shells you have
100:55 - so we have the born shell which is the
100:58 - sh we have the born again shell which is
101:00 - bash which is the preferred
101:02 - shell to use you then have our bash and
101:04 - dash which is pretty good and then you
101:06 - have fish now i just installed fish and
101:09 - again many of you have been asking me to
101:11 - cover this i'll explain it after i've
101:13 - after actually explained passion how to
101:15 - use it how to customize it and stuff
101:17 - like that so for the purpose of this
101:19 - video i'm going to be using i'm going to
101:21 - be using bash and i'll later on cover
101:23 - the other the other shelves that you can
101:24 - use and you know using fish
101:27 - so the first thing is how to switch from
101:30 - shell to shell within a given terminal
101:32 - instance
101:33 - so i'm currently using the bash shell if
101:36 - i wanted to switch into the bond shell i
101:38 - can just hit sh and hit enter and you
101:41 - can see i'm now in the bond shell and
101:42 - again all the linux commands work
101:44 - perfectly fine i can hit all the various
101:46 - linux commands that i could run so i can
101:49 - list all the files in here etc etc you
101:51 - get the idea right so i can then say cat
101:54 - etsy shelves and again we can take a
101:57 - look at the shelves we have i can now go
101:59 - back into bash
102:00 - i can go into dash if i want to and
102:02 - again that takes me to in into into dash
102:05 - you can say echo and we can again
102:08 - confirm this and hit enter and it tells
102:10 - us we're still in pin bash that is
102:12 - because we're currently within this
102:14 - instance but if i changed it as my
102:16 - default login shell which i'll show you
102:18 - in a second how to do so let me just go
102:20 - back into bash
102:21 - and we will actually let me just clear
102:24 - this out so there we all right so
102:26 - you can see how easy it is to switch
102:28 - between shells in a particular terminal
102:30 - instance now
102:32 - by default as a user account on a linux
102:34 - system
102:35 - uh a
102:36 - you will be specified a particular shell
102:39 - to use and that can be found in the
102:40 - password file so if i hit enter so let
102:42 - me just grab it and display my account
102:45 - you can see that the shell is specified
102:47 - here and i'll explain this when talking
102:48 - about users and groups you can see that
102:50 - uh the default login shell that i have
102:53 - been specified to use is the bash shell
102:57 - which is perfectly fine now the great
102:58 - thing about linux is when creating the
103:00 - user you can specify the shell that
103:02 - they're going to use however you can
103:04 - also change the shell of the user or the
103:06 - user can change the shell that they want
103:08 - to use when they log in or every time
103:10 - they log in and the way we do that is by
103:12 - using the change shell command or the
103:15 - change shell utility which is defined by
103:18 - chsh or that's an actual abbreviation of
103:21 - the command so i can type in what is
103:23 - chsh
103:24 - and i'm going to enter you can see it
103:26 - tells you this allows you to change the
103:28 - login shell
103:29 - all right so if i want to change uh the
103:32 - default login shell all i need to do is
103:34 - let me first display the shells that i
103:36 - have here one more time all i need to
103:38 - specify is their relative path all right
103:40 - so if i say chs8 it's going to ask me
103:42 - for the password of my user here when it
103:45 - enter and it's going to say changing the
103:46 - login shell for the user lexis enter new
103:49 - value or press enter for the default the
103:51 - default login shell for me is bash so if
103:54 - i wanted to change it to
103:56 - to fish for example i would say
103:58 - user
104:00 - sorry that is user
104:02 - bin and i say fish i'm going to enter
104:04 - and that changes it for me all right so
104:07 - what this means in essence if i type in
104:09 - cat hc password here
104:12 - what this means
104:13 - let me just display the results here you
104:15 - can see that it changes uh the default
104:17 - login shell so this means that uh when i
104:20 - log out and i log back in
104:22 - uh what's gonna happen is that i'm gonna
104:24 - be given the fish shell as my default
104:26 - shell instead of bash so if you're
104:28 - wondering what the fish shell is uh you
104:30 - can install it very easily by typing
104:32 - sudo apt install or apt-get install
104:35 - whatever you find is useful for you
104:38 - just hit enter and i already have it
104:40 - installed so that's how to install it so
104:42 - what is fish fish is a friendly as a
104:45 - friendly interactive show it's a great
104:47 - show for beginners extremely
104:48 - customizable and you can see once i
104:50 - typed in fish it allowed me to log in
104:52 - the great thing about fish is it allows
104:54 - allows me to actually it actually gives
104:57 - me predictions in regards to the
104:59 - commands that i might be interested in
105:00 - running we'll get to this in a second
105:01 - let me go into bash
105:03 - all right so that is how to change your
105:05 - default login shell
105:07 - all right so again i'm right now i'm
105:09 - currently set to use fish as the default
105:12 - shell when i log in every time
105:14 - but let's talk about bash because that's
105:16 - uh that that's the primary goal of this
105:18 - video because it's the most used shell
105:20 - and the one you'll be coming across
105:22 - mostly so in my current home directory
105:24 - so in the user lexis directory here i
105:27 - have various bash files bash
105:29 - configuration files uh within this
105:32 - directory so i'm just gonna grab them
105:34 - and i'll say bash and of course they're
105:36 - gonna be hidden
105:37 - so i'm just gonna hit enter and as you
105:38 - can see i have a bash aliases file which
105:41 - you're not going to have by default i
105:42 - created this and i created it to to
105:45 - prove a point and to actually
105:46 - demonstrate an example here we then have
105:48 - the bash history uh file which has uh
105:51 - all your history of all your commands
105:53 - and this is very different to your
105:55 - actual
105:56 - gnu history uh utility
105:59 - um
106:00 - you have bash log out and bash rc bash
106:02 - rc is your bash configuration file i'm
106:04 - not gonna cover how to configure it it's
106:06 - extremely straightforward and you can
106:08 - pretty much configure it directly uh by
106:10 - using the preferences tab right over
106:12 - here
106:13 - but we can take a look at it i just want
106:15 - to show you how it is so and if we take
106:17 - a look at it here through vim you can
106:20 - see that
106:21 - it essentially allows you to to
106:23 - configure set
106:25 - variables i change the color change the
106:27 - the size of the history of the history
106:29 - file um
106:31 - let's see what else you can actually do
106:34 - here so there you can you can change the
106:36 - color
106:38 - this is all to do with color and you can
106:40 - you can do a lot of other stuff with uh
106:42 - in regards to customizing how it appears
106:44 - and and how it works so for example if i
106:47 - wanted um if i wanted bash to actually
106:51 - run the fish shell instead of the bash
106:54 - shell every time i started up
106:56 - i started bash up i would type in fish
106:58 - right just at the bottom here and let me
107:01 - save this file now and if i open up a
107:03 - new terminal you can see immediately it
107:05 - opens up the fish shell
107:07 - so that's pretty cool but this isn't the
107:09 - correct way of doing it or the preferred
107:11 - way of doing it so i'll just get rid of
107:13 - this fish command here
107:15 - and i'll save the changes here all right
107:16 - so now that we've talked about um
107:20 - now that we've talked about the bash rc
107:22 - file let's talk about the bash history
107:25 - file which is very important all right
107:26 - so
107:27 - by default in linux you have the history
107:30 - command um which again let me just type
107:32 - it in the history command is essentially
107:35 - the new history library now the the
107:36 - history uh
107:38 - this essentially allows you to to
107:40 - actually check uh a lot it stores a
107:42 - history of all the commands you've run
107:45 - and uh you know you can clear your
107:46 - history very easily by typing in history
107:49 - c right and it's as simple as that but
107:52 - it's not to be mistaken or confused with
107:55 - bash history which is again uh
107:57 - is specific to the bash shell or the
108:00 - bone again shell
108:01 - so again this file will contain a list
108:04 - of all the commands that i've run and
108:06 - and i'll show you how to clear it so if
108:08 - i get the contents of the file
108:10 - uh you can see that it it has all of
108:13 - these commands that i've been running so
108:15 - far you know perfectly fine
108:17 - and if i wanted to clear it it's very
108:20 - easy i can just redirect the the
108:22 - contents of the so i can say dev
108:25 - null and then
108:27 - [Music]
108:28 - i can redirect the output into the
108:30 - actual bash history file they bash
108:33 - history here hit enter clear this out
108:36 - if i now try and catch the contents of
108:39 - the bash history file
108:41 - you can see it has nothing so i've been
108:43 - able to clear my bash history i think
108:44 - i've covered this in my one of the
108:46 - videos where i spoke about uh actually
108:49 - clearing your tracks on linux so this is
108:51 - a great way of doing that and of course
108:53 - you can then use the history command if
108:55 - you want to do that so that's to do with
108:57 - actually using the um
109:00 - with actually working with the actual
109:02 - bash history here now let me talk about
109:04 - the bash aliases file all right so the
109:06 - aliases file is very simple it allows
109:08 - you to specify aliases or command
109:10 - aliases that you'd like to use now you
109:12 - can just create a file within your home
109:14 - directory and just name it bash aliases
109:16 - so what i'll do is i'll actually just
109:18 - show you the contents of the file
109:21 - so i can just show it show it to you
109:22 - right over here so bash aliases hit
109:24 - enter and you can see i have two aliases
109:27 - i have alias update which runs the
109:29 - command sudo apt-get update and then i
109:31 - have upgrade which runs the command sudo
109:34 - apt-get upgrade so it's fairly simple to
109:36 - understand what happens so i can just
109:38 - type in update and that will update my
109:40 - packages and then i can type in upgrade
109:43 - and that will upgrade my packages
109:44 - instead of typing the commands over and
109:46 - over again so that is what
109:48 - you know the command aliases are and how
109:50 - to specify them so again it's very
109:52 - simple in regards to configuring it
109:57 - in this video i'm going to be showing
109:59 - you uh how to enumerate intermission in
110:01 - regards to your current disk usage and
110:03 - in information you know in regards to
110:05 - how much storage your system is
110:06 - consuming how much you have left the
110:08 - various disks attached to your system
110:10 - etc stuff like that
110:12 - all right so as i said in the previous
110:13 - videos in regards to enumerating you
110:15 - know information about your system it's
110:17 - very important to know uh the state of
110:20 - view system and that you know could
110:21 - include the current ram usage uh what
110:24 - you the temperature of your processes
110:26 - are you know so again it's very
110:27 - important to know as a system
110:28 - administrator or someone who is going to
110:30 - be you know using linux uh you know more
110:34 - and more every day uh how to enumerate
110:37 - information and useful information like
110:39 - your current disk usage
110:41 - and the various drives that you have
110:43 - installed on your system so let's talk
110:45 - about disk usage first which is quite
110:47 - important right because when working
110:49 - with the terminal you have no gui you
110:51 - know programs
110:53 - that can actually you know visualize
110:54 - this for you so it's very important that
110:56 - you understand how to do this extremely
110:58 - important so the tool we're going to be
111:00 - using is a tool called du right and
111:02 - again it's fairly straightforward what
111:04 - that means that means disk usage so i
111:07 - can just say what is what is du and i
111:09 - can hit enter and as you can see it
111:10 - tells you this allows you to estimate
111:12 - file space usage right
111:15 - now du is a very simple tool to use and
111:18 - you can take a look at the man pages or
111:19 - in regards to how how to use it
111:22 - um so let's actually just run a simple
111:25 - command within this current directory
111:26 - and i'll show you what i mean so if i if
111:28 - i hit du
111:30 - uh you can see that
111:32 - this is um there's something weird
111:34 - happening here right so it's displaying
111:37 - a lot of files and uh when i say that it
111:40 - really is displaying it's displaying all
111:43 - the sizes of all the files within this
111:45 - directory recursively all right now you
111:48 - might be saying well what does that mean
111:50 - exactly
111:51 - well it means that it's actually showing
111:53 - you the size of all the files within a
111:56 - current working directory all right
111:58 - that's essentially what it means now
111:59 - what current directory am i working in
112:01 - i'm working in my home directory so we
112:03 - need to make this a little bit more
112:05 - human readable and the way we do this is
112:07 - by typing du and then we specify some
112:10 - arguments the first thing we want to do
112:12 - is we want to summarize
112:14 - all of these results into a uh into a
112:16 - format that we can understand right so
112:19 - instead of displaying recursively all
112:21 - the files here show us the top level
112:23 - directories and the total sizes of those
112:26 - directories and then we can go
112:27 - recursively within those particular
112:29 - directories if we wanted to all right so
112:32 - the s command is going to summarize
112:34 - everything up and then we want to use
112:35 - the h command the human readable format
112:38 - within this current working directory
112:40 - and i'm going to hit enter
112:42 - and as you can see right over here tells
112:45 - you it gives you a beautiful list of all
112:47 - the directories you have in this
112:49 - particular directory and on the left
112:51 - hand side you have their sizes in human
112:53 - readable format which means they have uh
112:56 - they have that they have size uh they
112:59 - have uni their various units in
113:00 - megabytes and in gigabytes
113:02 - and you know so far the the only file
113:05 - that's crossed at the threshold of one
113:07 - gigabyte is my virtualbox folder so
113:09 - again you can use a tool like trep to if
113:12 - you're going through tons of files on a
113:14 - system i'm just using simple examples
113:16 - here so you know i can say grep and you
113:18 - know i can say one uh one gig and we can
113:21 - hit enter and again that can be used to
113:23 - enumerate all of these all of this type
113:25 - of information or i can just say g
113:28 - g would be much better and there you are
113:30 - so again that's how to use grep in
113:32 - conjunction with all of these commands
113:34 - so that's how to use the disk usage tool
113:36 - now again i can go on to my um let me
113:40 - just go uh
113:41 - actually let's let's just go into the
113:43 - linux file system itself and say sudo uh
113:46 - eush and we'll run the same command and
113:48 - again we can hit enter and again that
113:50 - starts to enumerate the sizes of all of
113:52 - these directories now mind you it has to
113:54 - go through all of these directories and
113:56 - the subdirectories uh directories
113:58 - recursively to get this size so again
114:01 - for some particular files
114:02 - you will not have the adequate
114:04 - permissions to actually access so again
114:06 - there you are it gives you uh all the
114:08 - information you're looking for here and
114:09 - we can you know we can grab it to we're
114:12 - looking for the the big g for a gigabyte
114:15 - so the home directory has quite a
114:17 - few files the media directory uh the
114:20 - snap swap file user var etc etc
114:24 - um so let's take a look at one command
114:26 - i'll just go back into my home directory
114:27 - and i'll say man eu and we'll hit enter
114:33 - let's look for one
114:35 - one more command that yes the c command
114:38 - which will produce a grand total which i
114:40 - wanted to explain so i can say to you
114:42 - shc and hit enter and again that gives
114:45 - you a total of um
114:48 - it gives you a total of all of these
114:49 - files
114:50 - uh it gives you a total of all of the
114:52 - files and directories in this current
114:54 - working directory all right so that's
114:55 - pretty much how to use the disk usage
114:57 - tool
114:58 - uh to analyze the current disk usage
115:00 - within a particular directory now let's
115:02 - talk about the df tool so i can type in
115:04 - what is the fn8 enter and this is going
115:07 - to report file system disk space usage
115:10 - so we were talking about disk usage in a
115:12 - particular directory right but now we
115:14 - want to know our disk usage in relation
115:17 - to the total amount available right so
115:19 - we want to know how much we've consumed
115:21 - uh
115:22 - in our current uh disk where we have our
115:24 - home directory or just on all our drives
115:27 - right and to do this we type in df so
115:29 - again let me just open up the man pages
115:31 - so df
115:33 - um you can go through all the other
115:35 - arguments you want and we'll just quit
115:38 - and we'll say df for example
115:40 - all right so
115:41 - that displays a lot of information here
115:44 - that we we really don't need
115:46 - we're pretty much looking for our our
115:48 - system disks uh only
115:50 - and uh we can sort of narrow this down
115:52 - first of all by typing in so we can say
115:54 - df h is going to be for human readable
115:57 - format so again we can say man df and we
115:59 - say grep
116:01 - we're looking for h
116:03 - like so
116:04 - and uh
116:05 - sorry let me just uh we're looking for h
116:08 - here
116:09 - so again h is for human readable format
116:12 - all right so we can then say dfh
116:15 - and we can pretty much hit enter all
116:18 - right and what this does now is it's
116:20 - going to display
116:21 - all of all of your drives for you here
116:24 - and you then have the various so for
116:26 - example storage device c is the current
116:28 - uh file uh the current drive that i have
116:31 - my system installed on so it gives you
116:33 - uh it sorts it out into the file system
116:35 - size and a human readable format so
116:37 - gigabyte megabyte etc uh the amount used
116:40 - the amount available the usage
116:42 - percentage and where it's mounted so
116:44 - uh you can see that dev sd storage
116:47 - device c1 is mounted is the actual linux
116:50 - file system directory i then have
116:52 - various other
116:54 - external right so let's say i just
116:56 - wanted to display the storage devices
116:58 - right so i can you then utilize the grep
117:01 - tool i can say
117:02 - uh i can say grip uh sd and hit enter
117:06 - and there we are so it tells me all
117:07 - right so um you have sd sdc one and sdd1
117:12 - so sdc1
117:14 - has a total space of 117 gigabytes um
117:18 - and again we can what we can do here is
117:20 - uh we yeah
117:22 - that's perfectly fine so you have the um
117:24 - you have the current usage percentage
117:26 - which is 16 percent uh the amount point
117:28 - and then for my external drive
117:30 - you can see uh this is the total amount
117:32 - available uh the amount used the amount
117:35 - remaining and the usage percentage and
117:38 - where it's mounted on which is the media
117:40 - because it's an external drive
117:42 - all right so
117:43 - that is essentially how to use the df
117:46 - tool now we can specify
117:48 - additional options to uh to to actually
117:51 - only display
117:52 - results that we're looking for in
117:53 - regards to um to actually file file
117:56 - system formats so if you're looking for
117:58 - xt for ntfs what we can do is we can say
118:02 - uh we can say df h t right so t will
118:05 - specify the the file system for format
118:08 - so again we can say xt4 and we hit enter
118:10 - and that's going to only it's going to
118:12 - it's only going to display linux file
118:14 - systems and i'm going to enter and you
118:15 - can see it tells us sdc1
118:17 - and it gives us all the relevant
118:19 - information regarding the the size used
118:22 - uh used uh data the amount available and
118:24 - the usage percentage which is currently
118:26 - at 16
118:27 - so again that is how to analyze your
118:29 - disks uh your disk usage on linux and uh
118:32 - how to you know actually deduce how much
118:35 - disk space you're using how much is left
118:37 - the usage amount of where your various
118:39 - disks are mounted on etc etc
118:45 - uh in this video going to be talking
118:46 - about creating archives so you know
118:48 - creating tar files dart or gzip files
118:51 - and then extracting them so just how to
118:53 - manage and maintain the various archives
118:55 - you will be creating now there are many
118:57 - reasons to create archives on linux of
118:58 - course one of the reasons is it saves
119:01 - space uh you can if you're taking
119:03 - backups of particular directories uh
119:05 - it's great to have an autumn an
119:07 - automated script to to actually automate
119:10 - the process of archiving the files uh
119:12 - that's something that you can take a
119:13 - look at with my shell scripting series
119:16 - uh the link to that will be in the
119:17 - description section if you're interested
119:19 - in learning some shell scripting
119:21 - uh but let's get started with this video
119:23 - so uh the tool we're gonna be using is
119:25 - the tar tool now tar is an archiving
119:27 - utility as you can see here and again if
119:30 - we if we take a look at the man pages
119:32 - for this particular tool uh it gives you
119:34 - the various options that you can use you
119:36 - know in regards to creating uh archives
119:38 - comparing them deleting them etc so
119:41 - there's a lot of stuff in here
119:42 - the purpose of this video is to show you
119:44 - uh or to and to explain to you how to
119:46 - create uh how to create archives uh how
119:49 - they differ in terms of the extension
119:51 - and of course how to extract the various
119:53 - archives that i
119:54 - that you'll come across
119:56 - all right so uh on my desktop what i've
119:59 - done is um i've created a simple
120:02 - directory here uh let me just uh remove
120:04 - this uh
120:06 - this directory right over here um there
120:09 - we are and um so i created a directory
120:12 - called file
120:13 - and within this directory uh you can see
120:16 - that i've created a
120:18 - a test.txt file that contains uh the
120:21 - contents of the password file so just a
120:23 - random file that you know you may want
120:25 - to uh you may want to archive or random
120:28 - directory that you you may want to
120:29 - archive so if i wanted to create a tar
120:32 - archive of this file directory what i
120:34 - would do is i would say tar and then i
120:36 - would specify
120:38 - you know some arguments here
120:40 - in in regards to what i want star to do
120:43 - so first of all i would want dart to
120:44 - compress the file
120:46 - um and then of course i want uh i wanted
120:49 - to compress
120:50 - this file so we're specifying the file
120:52 - um now after this we specify the name of
120:55 - the archive that we want to give it so
120:57 - we'll just call it file dot dar this is
121:00 - different than a dar.gz
121:02 - archive and i'll explain how that
121:04 - differs shortly so then we specify the
121:08 - the directory that we want to actually
121:10 - archive and we hit enter
121:12 - and there you are so you can see it
121:14 - created uh the tar file for us and of
121:16 - course if we type in um file and
121:19 - file.tar you can see it tells you that
121:21 - this is a tar archive gnut or archive
121:24 - here so that means it was it worked
121:26 - correctly now um
121:28 - let me remove this uh the star archive
121:30 - here and if we run the same command that
121:33 - we did
121:34 - sorry about that let me just um let me
121:36 - let's do it one more time so you can say
121:38 - tar
121:39 - we can also use the uh the v command and
121:42 - that will give us some verbose output in
121:44 - regards to what files are currently
121:46 - being processed uh you know in the
121:48 - overall archiving uh process so again we
121:51 - can say tar cvf
121:53 - and then we say dar we can just say
121:55 - file.um
121:58 - file.tar and then we specify the
122:00 - directory and we hit enter and you can
122:02 - see it then gives you a the post output
122:05 - and we get the dar the file.tar archive
122:07 - here so
122:09 - if we want to extract a tar archive
122:12 - that's a very very simple thing to do
122:14 - all we need to do is we say tar
122:17 - guitar
122:19 - and now that we want to extract it we
122:21 - use the x command uh by the way you can
122:23 - you can negate or not use the iphone
122:26 - here but i personally like using the
122:28 - iphone just so that i understand where
122:30 - my syntax is going so i can say extract
122:33 - and we can verbose you know we can have
122:35 - some verbose output
122:37 - and we say extract
122:39 - the file and then we specify the file so
122:42 - we say file.tar and then we can provide
122:46 - an output for it or you can just hit
122:47 - enter and it you know it extracts it for
122:50 - us and because we already have the file
122:52 - here uh it will essentially overwrite
122:54 - the
122:55 - uh the newer files if the if there are
122:57 - any new changes etc so we can uh
123:00 - we can remove this directory and do that
123:02 - one more time here so we can say star
123:06 - xvf
123:07 - file dot r and we hit enter now if we
123:10 - list this you can see that we have the
123:12 - file directory here all right excellent
123:15 - so that's uh working with star files and
123:17 - that's you know a standard tar
123:20 - a guitar file here uh now let's talk
123:22 - about gzip files so if i say what is
123:26 - gzip and uh you can do this with star
123:28 - again uh it's a very very simple you
123:31 - that's the preferred way of doing it so
123:33 - uh let's take the um
123:36 - the same or we can just remove the file
123:38 - dot our here so let's take the same
123:41 - file directory here and if we want to
123:44 - now use the or compress it
123:47 - into a third or gzip file
123:50 - using gzip of course then we would say
123:53 - tar
123:55 - uh now we are compressing it so we say c
123:57 - z uh f or c z c v z f or c z v f
124:02 - whatever you want to use in our case we
124:04 - we don't want to work or we want to
124:06 - display uh you know some the verbose
124:09 - output so we can just use the czf
124:12 - and then we specify um
124:14 - we specify the name so we're going to
124:16 - say file.tar
124:18 - register and then we specify the
124:20 - directory that we want to archive or
124:22 - compress and we hit enter
124:24 - and you can now see that we created the
124:27 - gz file here so if we type in file and
124:29 - then you know just to find out what
124:31 - we're dealing with the ui tells you
124:33 - we're dealing with a gzip compressed
124:35 - data
124:37 - so again we can extract it really simply
124:39 - by saying dar
124:41 - um dar x z f
124:44 - x z f and then we say file
124:46 - dot r g z but uh before we do this uh
124:49 - let's remove uh let's remove the actual
124:54 - file directory here so we say term
124:57 - x zf and then we say
124:59 - file.gz and we hit enter and it'll then
125:03 - give us the file directory which is
125:05 - right over here so again we can cut the
125:06 - contents just to show you that it's
125:08 - worked just fine
125:10 - um
125:11 - you can see that it's the entire content
125:13 - of the password file so that's pretty
125:15 - much how to work with archives i'm not
125:17 - going to be covering the various other
125:18 - utilities that you can use so for
125:20 - example bc2 which is again very simple
125:23 - use uh in regards to using bzip2 for
125:26 - compression i wanted to show you how to
125:28 - use the tar uh guitar utility for
125:31 - archiving files archiving them and then
125:33 - of course extracting them so it's the
125:34 - most reliable and consistent way of
125:37 - working with archives on linux and it's
125:39 - great for you know taking backups and
125:41 - with the help of a shell script you can
125:43 - easily automate the process
125:48 - in this video i'm going to be talking
125:50 - about uh you know adding managing users
125:52 - and groups and then in the follow up
125:54 - videos we'll be talking about user
125:56 - security and sort of securing the
125:58 - authentication uh section or area of of
126:01 - linux so let's get started now i just
126:03 - want to give you a bit of a premise
126:05 - i'm currently running a um currently
126:07 - logged in by ssh onto one of my uh linux
126:10 - servers and the reason being is as we
126:12 - move on into this series to to the end
126:14 - or to the completion uh i'll be covering
126:16 - security uh you know various security
126:19 - aspects that we will require a lot of
126:20 - testing so again uh that's primarily the
126:22 - reason so let's get started now by
126:24 - default
126:25 - uh you can see that i've created another
126:27 - user called admin
126:29 - and i'm currently running ubuntu server
126:31 - so
126:32 - what's going to happen is uh it is
126:34 - recommended never to only be using the
126:36 - root user and that you need to have
126:38 - another user in which you can then uh
126:40 - start you know applying various
126:42 - permissions to so by default on ubuntu
126:45 - uh when working with users again is a
126:48 - very very simple syntax in regards to
126:50 - adding them so what we're going to do is
126:51 - we're just going to create a user here
126:53 - we're just going to say user add and you
126:55 - can take a look at all the uh the
126:57 - various options you can use when
126:59 - specifying a user
127:00 - so if i just say uh user add and i hit
127:04 - enter you can see it doesn't give me any
127:06 - prompt but if i say user add alexis and
127:09 - i hit enter it will give me
127:11 - an error with the um
127:13 - it will give me an error with with a
127:15 - lack of permissions now i did this uh
127:17 - you know deliberately so that i can
127:19 - demonstrate uh how to use groups before
127:21 - we actually take a look at that so i'll
127:23 - just switch i'll just switch into the
127:25 - root user here
127:26 - and we'll go into my home directory and
127:28 - we'll just say v sudo here uh so we'll
127:31 - say v sudo and
127:33 - what we want to do now
127:35 - is we have the user admin uh but we want
127:38 - to
127:39 - we want to actually have this user
127:42 - [Music]
127:43 - we want to add this user admin into the
127:45 - sudo group which will essentially allow
127:48 - members of the group to execute any
127:49 - command now i can do that or i can also
127:51 - add them to the admin to the admin group
127:54 - which which would be better
127:56 - um so again we can sort of customize the
127:59 - various uh the various commands that we
128:01 - can specify and i'll get to this in a
128:02 - second so
128:03 - uh what we want to do now is i'll just
128:06 - exit and i'll say user mod
128:08 - and i'll say user mod a
128:11 - g
128:12 - ad group and then we say
128:14 - admin and the user admin and we hit
128:17 - enter and that's going to add the user
128:19 - admin into the group admin so you
128:21 - specify the group first and then the
128:22 - user there that might might seem a bit
128:25 - confusing but if i just say groups uh
128:27 - groups admin you can see that it tells
128:30 - me that the user admin is in the group
128:32 - admin all right so if we go back into
128:33 - the user admin here
128:35 - you can see it tells you to run a
128:36 - command as administrator use
128:39 - user root use the sudo command so again
128:41 - we now have permissions to do whatever
128:42 - we want so if we go back here
128:45 - we can say sudo user add
128:48 - user add and
128:49 - again that will give us the same option
128:51 - so if we say user ad alexis
128:53 - uh it's going to add the user now the
128:55 - problem with this if i display the
128:57 - password file
128:58 - you can see that the user alexis by
129:00 - default will be given a home directory
129:02 - that's perfectly fine and the diff the
129:04 - default shell will be set to the bond
129:06 - shell so what i want to do is let me
129:08 - show you how to remove a user so to
129:10 - remove a user we say user dell and then
129:12 - if we want to remove their home
129:13 - directory
129:14 - we say uh r or we use the recursive
129:17 - command and then we specify the user so
129:19 - we can say alexis
129:20 - and again we need to use um
129:24 - the
129:24 - we need to use the sudo command here
129:26 - because we require root privileges so
129:28 - it's going to remove
129:31 - it's going to remove the user so if we
129:32 - just display the
129:34 - uh the contents of the home directory we
129:36 - can see that the only user directories
129:37 - we have are for the user admin all right
129:39 - so now that i've explained that let me
129:40 - show you the correct syntax for adding a
129:43 - user here so again i can just say user
129:45 - ad now
129:47 - uh in regards to the actual commands you
129:49 - can use you can take a look at the man
129:51 - pages uh sorry um
129:53 - user ad and you can take a look at all
129:56 - of these options and there's a quite
129:58 - extensive options you can use in regards
130:00 - to creating user but in our case we want
130:03 - to say user ad and um
130:05 - the first thing we want to do is we want
130:07 - to make sure that this user has a home
130:09 - directory with its username appended so
130:12 - we can say m
130:13 - and then we can add a comment so again
130:15 - this can describe uh you know something
130:17 - about the account and what it's used for
130:19 - we can just say alexis and we can then
130:21 - specify the shell this is very important
130:23 - if you want a uh
130:25 - if you want the user account to to use a
130:27 - custom shell
130:29 - in our case we'll just say bin bash and
130:31 - then we specify the name of the user
130:33 - account or the username and we hit enter
130:35 - all right so again it tells us we need
130:36 - sudo privileges so let's add that and
130:39 - i'll just hit enter and the the user is
130:41 - added now this user doesn't have a
130:43 - password yet so to add a password for a
130:46 - user we can say we can use the password
130:48 - command all right and again it requires
130:50 - root
130:50 - privileges
130:52 - so if i wanted to change the password
130:54 - for the admin account or for the current
130:56 - account that i'm using i simply type in
130:57 - password and it'll say changing password
131:00 - for admin and it'll ask me for my
131:01 - current password
131:02 - i'll enter a new password here
131:05 - and the password isn't changed so i just
131:07 - wanted to demonstrate this so again i
131:09 - can just say let me just change the
131:11 - password here
131:12 - and i'll just change it to something
131:15 - different and there we are so the
131:16 - password for the admin user has been
131:18 - updated successfully
131:20 - if i wanted to change the password for
131:22 - another user i would say password alexis
131:24 - and hit enter
131:26 - so again we we can use the sudo
131:28 - privileges because we're now modifying
131:34 - and
131:36 - sorry about this let's just add um
131:40 - and there we are so now we've added the
131:42 - password for the user lexis so i can
131:44 - directly switch uh into this user
131:47 - account and i'll show you something
131:49 - interesting here so i can say sudo
131:51 - alexis
131:52 - um and i switch into it and um
131:56 - there we are so now if i try and do
131:57 - something like sudo apt update here
132:00 - uh it'll ask me for the user for the
132:02 - password and um well i think i entered
132:04 - the correct the incorrect password here
132:06 - so if i enter the correct password you
132:08 - can see it's going to tell us that
132:09 - alexis is not in the sudoes file this
132:11 - incident will be reported all right so
132:14 - that's um that's essentially telling us
132:16 - we don't have adequate adequate
132:18 - permission so if we go back into the
132:19 - admin account
132:20 - um
132:22 - we can now play around with the sudoers
132:25 - file so again we'll say sudo vsudo and
132:28 - we'll hit enter and let's talk about now
132:30 - adding permissions and before we
132:32 - actually take a look at groups
132:34 - right so typically with ubuntu uh you
132:37 - can see that it gives you all of these
132:38 - various groups you know right out of the
132:40 - bat and you you can specify specific
132:43 - user privileges
132:45 - under this right over here so you can
132:46 - see for the root user um
132:49 - it can run it from all uh sessions
132:51 - irregardless of whether it's a tty uh or
132:54 - a remote session
132:55 - uh and then you know for all users in
132:58 - all groups and it can run all commands
132:59 - so again again just say alexis and let's
133:02 - say all or you know i can just simply
133:04 - say
133:05 - uh all sorry that's always going to be
133:07 - equal to all and so that's pretty much
133:10 - uh all users um
133:13 - and then in regards to the command
133:15 - specification which you specify here so
133:17 - this user can actually run all
133:20 - permissions or i can limit it to you
133:22 - know certain permissions if i want to
133:24 - right now again
133:26 - this will pretty much
133:29 - this this will pretty much allow me to
133:32 - to actually run uh specific commands so
133:35 - for example if i wanted to only allow
133:37 - this user to say for example user bin
133:40 - apt
133:41 - get
133:42 - for example um so what i'll do is i'll
133:44 - just save this file and we'll go back
133:46 - into the user lexis here
133:48 - um and we'll say
133:51 - and then we say sudo apt get and many of
133:54 - you might be catching on and you'll see
133:56 - what happens here
133:58 - so you can see that that works now and
134:01 - we're able to run only that command with
134:02 - root privileges
134:04 - so we'll just wait for this to actually
134:06 - update the repositories
134:08 - let's try and run another command with
134:10 - root privileges and i'll show you what
134:11 - will happen here so
134:13 - again my apologies my internet is
134:16 - really not that quick um so we'll just
134:18 - wait for this to complete
134:21 - and um
134:22 - so there we are
134:23 - got the repos and you know i can pretty
134:25 - much install software and i can use the
134:28 - app to get a utility so if i say sudo
134:31 - um let's say vim
134:33 - hc
134:34 - ssh sshd config if we open this you can
134:38 - see we're not allowed to do this so if
134:40 - we go back into the admin user
134:42 - you can see now this is a great way of
134:45 - you know specifying um specifying
134:48 - permissions for users so
134:50 - additionally what i can do is i can use
134:52 - groups right now
134:54 - i have the user alexis here and let me
134:56 - just comment this if i say all commands
134:59 - uh that means it can run all commands
135:01 - here without any uh without any
135:03 - restrictions so we then have groups
135:05 - right now groups
135:06 - allow
135:08 - groups essentially allow users to allows
135:10 - you to group users you know based on
135:12 - their particular role or
135:14 - responsibilities now in this case we
135:15 - have two groups we have admin and sudo
135:18 - and they essentially allow users to
135:19 - execute all commands with root
135:21 - privileges here
135:23 - um so
135:24 - uh what we can do is uh we can create
135:27 - another group here so uh
135:30 - we can just exit out of this uh well
135:32 - actually no
135:33 - we can just modify this one more time
135:36 - because uh i want to actually comment
135:38 - this in regards to the permissions here
135:40 - so we'll just exit and let's talk about
135:42 - groups all right so let's talk about
135:44 - groups in linux now groups are a great
135:47 - way of sort of collectively applying
135:49 - permissions to you know groups of users
135:52 - that you know you may want to have uh
135:54 - you know the same privileges uh or
135:57 - permissions uh and you know it's a great
135:59 - way of
136:00 - blanketing
136:01 - various permissions on different users
136:03 - and a great way of of course segregating
136:05 - roles and duties within a system so it's
136:08 - a great way of actually actively
136:11 - uh
136:12 - actively approaching uh the whole idea
136:15 - of segregation of roles and duties so
136:18 - let's talk about uh creating groups uh
136:20 - deleting groups and of course working
136:22 - with permissions with groups so we're
136:24 - going to follow this the same scenario
136:26 - we have the admin user uh and of course
136:29 - we then have the user alexis here so the
136:31 - user lexis currently is not part of any
136:34 - any any particular group so again it's a
136:36 - standard user account that doesn't have
136:38 - root privileges and is simply just
136:40 - allowed to operate within those
136:42 - constraints now if i wanted to add a
136:44 - group here i would say group add right
136:47 - and then i'll specify the name of the
136:48 - group so let's say we want to add the
136:51 - the user alexis to a group called
136:54 - developers
136:55 - right so we're going to say group add
136:57 - developers let me just prepend this with
136:59 - sudo because we do need root privileges
137:02 - to create new groups and we're going to
137:03 - hit enter all right so now we have the
137:06 - group created so if we want to display
137:08 - groups for a particular user or the
137:10 - groups that a user is in again we use
137:12 - groups and then the name of the user
137:15 - and you it tells you that alexis
137:16 - currently is is in its own group we can
137:19 - view all the groups on the system by
137:21 - visiting the or cutting or displaying
137:24 - the contents of the group a file if we
137:27 - hit enter you can see that we have the
137:29 - various groups and you can see we have
137:31 - all the system accounts as well as
137:33 - pretty much they're going to be in their
137:34 - own group unless
137:36 - uh specified otherwise
137:40 - um so let's uh let what we're gonna do
137:43 - is we're going to add the user alexis
137:46 - into this developers group and then i'll
137:47 - show you how permissions can sort of be
137:50 - uh be manipulated that way so we're
137:52 - gonna say user mod and we're gonna say
137:54 - we're gonna append append
137:56 - the user lexis and we're going to say
137:58 - the group by the way you can use a
138:00 - lowercase g here the lowercase g
138:02 - primarily means you need to specify the
138:04 - group ids in our case we'll just use the
138:07 - capital g because we know the names of
138:09 - head
138:10 - so we'll say developers and we want to
138:12 - add the user alexis to the group
138:14 - developers
138:16 - i believe we need root privileges for
138:18 - this so i'm going to enter and that
138:20 - should do it all right so now if i say
138:21 - groups alexis you can see that alex is
138:24 - going to be part of its own group and
138:26 - uh
138:27 - and the developers group now when we
138:29 - talk about having its own group that
138:31 - simply refers to you know user specific
138:33 - privilege specifications so again if we
138:35 - visit the uh the v sudo uh utility uh to
138:39 - modify the sudoes file
138:42 - you can see that we talked about user
138:44 - user privilege specification and we had
138:46 - actually added a uh you know some
138:49 - privileged specifications for the user
138:52 - alexis where
138:54 - you know we can access it from all hosts
138:56 - and we've specified all users however
138:58 - not all groups so this essentially will
139:01 - restrict
139:03 - uh this will restrict
139:05 - the user alexis uh
139:07 - and it will essentially allow him to run
139:09 - uh you know the apt-get utility with
139:12 - root privileges here
139:14 - however
139:16 - that's one way of doing it so if if i
139:18 - use this if i use this this same syntax
139:22 - uh then i can also you know allow it to
139:24 - run all commands
139:26 - and you know i can also specify the uh
139:28 - the exp explicitly to refuse
139:32 - to refuse it to use the root uh to
139:35 - actually have pseudo privileges so it
139:37 - will only run this command
139:39 - uh and and you know so on and so forth
139:41 - so i can do that actively if i wanted to
139:43 - however i don't want to so what we'll do
139:45 - is let's just test this out to see that
139:47 - it works and of course you can change
139:49 - this to whatever
139:50 - whatever command that will require you
139:52 - know root privileges so we can just use
139:54 - app to get here and i'll save this now v
139:57 - sudo when saving and exec
139:59 - and exiting if you do have a syntax
140:01 - error it will tell you so again if we go
140:03 - here and we say
140:05 - let's uh let let's actually mess around
140:07 - with the syntax here so again i can just
140:09 - say add a few uh commas there you can
140:13 - see that it tells us uh in the etsy
140:15 - pseudo as well as syntax error near line
140:17 - 21 and we can use the e command to edit
140:20 - it so again that's a great uh that's the
140:22 - great uh reason for using these the uh
140:26 - the v sudo utility it actually points
140:28 - out logical and uh and syntax errors
140:32 - so we'll save this now and we'll exit
140:35 - and what we'll do is we'll now switch
140:37 - into the user lexis and um
140:40 - i'll go here and you can see that now if
140:42 - i type in apt-get update you can see
140:44 - that we can run this command but it
140:46 - still requires administrative privileges
140:48 - or root privileges so if we pre-pend it
140:51 - with root or sorry sudo
140:54 - if we say sudo and we hit up and we just
140:56 - enter the password you can see that
140:58 - we're able to run the command however if
141:01 - we wanted to display the um we say cat
141:04 - etsy shadow
141:06 - uh
141:08 - cat etsy shadow is going to tell you
141:10 - these alexis is not allowed to execute
141:12 - cat etsy shadow with you know root
141:15 - privileges so again we can say cat
141:17 - hc password here that works because it
141:20 - doesn't require root privileges and we
141:22 - are pretty much allowed to view the
141:24 - contents of this file
141:26 - all right so that's how to apply
141:27 - permissions based on a user all right
141:30 - now i can also change this up and we can
141:32 - use the the example of the group here so
141:35 - we can just go back into the user admin
141:38 - and
141:38 - just enter the password here and again
141:40 - we'll say sudo
141:42 - vsudo and we'll get into this so we'll
141:45 - comment this uh you know user privilege
141:47 - specification entry and we can enter our
141:49 - group anywhere here we can just add a
141:51 - comment if we wanted to
141:56 - specification
141:58 - um developer group
142:00 - we can just say developer group and then
142:02 - we say
142:03 - when adding a group we prepend it with
142:05 - the the modulus sign and then we say we
142:09 - specify the name of the group so we say
142:11 - developers and then after this we
142:13 - specify the permissions here so again we
142:15 - can say all
142:16 - all hosts and then we'll say all users
142:20 - of all groups that's because we need a
142:23 - sudo that's very important we need the
142:26 - ability to access all the groups so
142:28 - again we can all we can always limit it
142:30 - to
142:31 - uh all users and then the admin group if
142:34 - we wanted to but again we say all
142:38 - and then instead of all commands we say
142:40 - user bin
142:43 - we can say apt user pin
142:46 - sorry user bin apt get update uh sorry
142:49 - apt-get sorry not update
142:52 - um so we can save this and if we exit
142:54 - you can see we have no syntax errors so
142:56 - again back to alexis here
142:59 - and i will enter the password
143:01 - and uh yeah so now we can say sudo apt
143:05 - uh
143:06 - get update and that works fine uh for
143:09 - some reason
143:11 - uh not allowed to execute uh let me just
143:14 - check this right now uh yeah it's part
143:16 - of the developers group uh let me just
143:19 - go back into the admin group here oh
143:21 - sorry into the admin user
143:23 - and uh let's see what the issue is
143:26 - what's the issue is with the
143:27 - specification of uh
143:30 - of permissions here um
143:33 - so
143:35 - what i'll do is um let's see what can be
143:39 - this shouldn't be causing any issues uh
143:42 - let's try apt and let's just see whether
143:44 - this works i'll just say
143:54 - i have to update that that works fine
143:57 - um i believe you need to add yeah you
143:59 - need to separate the commands and it
144:02 - would be wise to use command command
144:04 - aliases so yeah i i simply forgot about
144:06 - that sorry about that guys um so so that
144:08 - will work fine so again if we say sudo
144:11 - cat etsy shadow
144:13 - for example
144:14 - yeah because we wanted to view it you
144:16 - can see it again it restricts us to
144:18 - running uh only the apt update utility
144:20 - or running the app utility here so that
144:23 - is how to you know sort of segregate
144:25 - permissions based on a user whether you
144:26 - want to specify the permissions you know
144:28 - on a user to use a basis
144:30 - or how to specify the permissions on a
144:32 - you know in in regards to adding users
144:35 - to a group and then applying them that
144:36 - way sort of blanketing the users that
144:39 - way so again it's all about
144:41 - you know what philosophy you are you
144:42 - adapt to and if you're a system
144:44 - administrator it'll also depend on the
144:46 - use case and the use you usage scenario
144:49 - in which your server is being deployed
144:52 - in
144:56 - we're going to be talking about
144:57 - networking uh in the command line all
144:59 - right so let's get started now
145:01 - um if you pretty much watched any of my
145:04 - older videos where we were working with
145:06 - networking within the linux terminal you
145:08 - know that i would typically use the
145:10 - ifconfig utility however
145:13 - you know the standard has changed now
145:15 - and what we have to use or what is the
145:17 - preferred method of getting information
145:20 - and interacting with various network
145:22 - interfaces is by using the ip command
145:24 - right so the ip
145:26 - utility allows you to you know show
145:28 - manipulate routing network devices
145:30 - interfaces and tunnels etc
145:32 - all right so let's get started by first
145:35 - of all um understanding how to display
145:37 - your current uh routing table so again
145:39 - we can do that by typing in ip route
145:42 - show and that's very simple so ip route
145:44 - show and this will show you your current
145:46 - uh routing table so you can see this is
145:48 - my uh this is uh this is currently my
145:51 - router's ip address or my gateway uh
145:53 - this is my interface name here and this
145:56 - is the source ip which is my ip address
145:58 - so that gives you an idea of uh of your
146:00 - ip routing table uh currently
146:03 - now again you can take a look at uh we
146:06 - can grip route here and uh in the man
146:09 - pages and you can take a look at all the
146:10 - options you have available for you um so
146:13 - you can pretty much change the route if
146:15 - you want to do but of course that's
146:16 - beyond the scope of this tutorial i'm
146:18 - simply showing you how to find
146:20 - information that's very useful if you
146:21 - want to display your current ip address
146:23 - we type in
146:25 - ipaddr and we hit enter and this gives
146:28 - you your two interfaces so we have local
146:31 - this is a loop back so this is you know
146:33 - for your local host
146:35 - uh and you then have your ethernet in my
146:37 - case my ethernet adapter which has the
146:39 - interface name enp2so
146:42 - you can see that it has an ip of
146:45 - 192.168.1.1
146:48 - and you have the uh the entire uh
146:51 - the entire network range there
146:53 - um you also have your your ipv6 ip
146:56 - address here that is required and of
146:58 - course you have your mac address so very
147:00 - similar to ifconfig um so if we
147:03 - if we take a look at ifconfig which is a
147:06 - perfectly great uh tool that you can use
147:08 - and so you know you can use it if i type
147:10 - in i have config
147:12 - we can take a look at the man pages here
147:14 - just so i can show you the flexibility
147:16 - so again uh you can play around with all
147:18 - the options that are available but
147:20 - pretty much the simple way of going
147:22 - about it would be to simply display your
147:24 - current um so if i say ifconfig
147:28 - and i'm only looking for my
147:30 - i can say inets if i'm only looking for
147:32 - my ipv4 address or my inet addresses you
147:35 - can see that i can easily just print
147:37 - them out and i also have my net mask so
147:39 - a very organized way of taking a look at
147:42 - your your interfaces and your ip
147:44 - addresses as well
147:46 - right now i'm still to make a video on
147:48 - on managing services
147:51 - and processes with linux but uh
147:53 - essentially working with your network
147:55 - manager we can also take a look at dhcp
147:58 - because that would be quite important so
148:00 - if you are running this on wi-fi or you
148:02 - are using a wireless adapter or even an
148:04 - ethernet where you don't have static ip
148:08 - distribution
148:10 - or resolution what we can do is if we
148:12 - say what is dhclient um and we can just
148:15 - hit enter you can see that uh if we type
148:17 - in dh client and we hit enter you can
148:19 - see that it doesn't give us any
148:22 - any options here so if we take a look at
148:23 - the options that we available to use we
148:26 - can pretty much um
148:28 - let's take a look at the man pages
148:29 - because this is a bit better way of
148:32 - actually utilizing it so again we can
148:34 - use the dhcp v4 protocol to obtain
148:38 - a new ipv4 address but in my case i i
148:41 - have my ip statically uh assigned here
148:43 - so that would not be a wise thing to do
148:46 - but if i wanted to restart my network
148:47 - manager uh again i'll be making a an
148:50 - individual video on this so you don't
148:52 - have to worry so you can use sudo
148:53 - service
148:54 - network
148:57 - network manager
148:58 - um
149:00 - restart and i can hit enter or i can use
149:02 - system d so i can say sudo system
149:05 - control
149:06 - uh we can say restart we say network
149:09 - let me just see network we're looking
149:11 - for the network manager here so if i let
149:13 - me just tab and see what we have we're
149:16 - looking for the network manager.service
149:18 - which is right over here so i can
149:20 - execute this and that will essentially
149:21 - restart it now again as i said if you're
149:23 - not familiar with processes don't worry
149:25 - we'll be covering it in the next set of
149:27 - videos as we wind up this series
149:29 - but that's pretty much how to restart
149:32 - your network adapter if you're having
149:33 - any issues and you can sort of work with
149:35 - that now let's talk about netstat
149:38 - because again that's quite an important
149:40 - tool and i haven't i have a an
149:42 - independent video on how to use netstat
149:44 - if you are interested in it so again we
149:46 - can say netstat and we hit enter say
149:49 - print network connections routing tables
149:51 - uh et cetera et cetera so i'll just go
149:53 - i'll just go over the most common
149:55 - options you can use and this essentially
149:56 - allows you to understand what uh what
149:59 - services ports uh you have running
150:01 - listening and are you are connected to
150:03 - so for example
150:04 - if i wanted to display the route i would
150:06 - say net stat and i would say r and that
150:09 - gives me my routing table so we have the
150:11 - destination uh the gateway the gen mask
150:14 - flags and the interface here
150:17 - so in all cases we're working with my uh
150:18 - with my ethernet interface here so you
150:21 - can see that
150:23 - for the default gateway uh we have it
150:25 - right over here the destination and of
150:27 - course the gen mask so again you can get
150:29 - very good information from this now if
150:31 - we wanted to take a look at all the tcp
150:33 - connections that we have we can say net
150:36 - stat and we use t and that gives us all
150:39 - the tcp connections on uh that we are
150:41 - currently connected to or listening
150:43 - for on our system so you can see that uh
150:47 - we have the protocol which is very
150:48 - important this is this is uh uniquely
150:51 - going to be tcp
150:52 - uh the local address the foreign address
150:54 - the port it gives you and the state
150:56 - which i'll get to in a second
150:58 - um so you can pretty you can also grab
151:00 - information from this so again you can
151:02 - say grip and if i had the ssh
151:04 - uh port open uh i would hit i'll say
151:07 - grep 22 for example and uh you pretty
151:10 - much gives you results based on
151:12 - the actual string of characters in this
151:14 - case it's not giving us anything new but
151:16 - if all to say
151:17 - um let's say
151:19 - sudo
151:21 - sudo
151:22 - service ssh
151:24 - start now hit enter
151:27 - and if we try and grip this now uh we
151:29 - don't get anything so let's uh let's
151:31 - take a look at how to find a listening
151:33 - ports so or listening socket so we can
151:36 - say netstat
151:38 - l and we hit enter and you can see
151:40 - there's quite a bit of listening uh of
151:42 - stock of sockets that are currently
151:44 - listening for
151:46 - uh
151:46 - for actual connection so in our case you
151:49 - can see we have the ssh port here
151:51 - and we can pretty much grip
151:54 - with these particular services um and
151:56 - you can sort of work with that if you
151:58 - want to
151:59 - uh talking about udp only we can again
152:02 - that's very simple so that's that if i
152:04 - wanted listening tcp connections i would
152:07 - say um for example lt and hit enter and
152:10 - that will only display the listening tcp
152:12 - connections if i wanted listening udp
152:14 - connections i would
152:16 - type in lu and again that gives us all
152:18 - the listening udp connections
152:21 - um if we want to display the the actual
152:24 - processor processes and the process ids
152:27 - we can say netstat
152:29 - p and we hit enter
152:31 - and what we can do is we can say ltp
152:34 - so ltp and we're looking for grip ssh
152:38 - and we hit enter it again tells you uh
152:40 - that we have ssh running in or you can
152:42 - go through this all over again so let me
152:44 - just clear this out
152:46 - so if we display the results here um you
152:48 - can see that
152:50 - it gives you all the information that
152:52 - you're looking for uh so if we get rid
152:55 - of this and we also have p it gives you
152:57 - the various process ids
152:59 - uh so if we let's just take a look at
153:01 - the table right at the top here that
153:03 - pretty much prints it all
153:05 - uh you can see we have the pid right
153:07 - over here and we can sort of grip
153:09 - through that if we wanted to
153:12 - so that's uh using um netdiscover
153:15 - netstat uh we're not talking about net
153:17 - discover yet but again you can check out
153:19 - our independent video on that and allows
153:22 - you to check various connections that
153:23 - you have open and you know running
153:25 - either established or listening on your
153:27 - system they could be for both a tcp and
153:29 - udp
153:30 - now let's talk about net discover now
153:33 - net discover does not come pre-installed
153:35 - with any linux distribution as far as
153:37 - i'm concerned apart from the pen testing
153:39 - uh or offensive distribution so again we
153:42 - can simply just say what is netstat
153:45 - and you can pretty much um well no not
153:47 - nets that net discover
153:51 - um i believe this is uh its cover like
153:54 - so and we hit enter and it's an active
153:56 - passive uh erp reconnaissance tool
154:00 - and so what this means is it allows you
154:02 - to essentially scan your network for uh
154:04 - for other devices or hosts that are
154:06 - currently connected to your network
154:08 - whether they be uh wi-fi enabled devices
154:10 - or connected to your uh to your network
154:13 - via ethernet or to your switch um so
154:15 - again to install it you can use any of
154:17 - the package managers you're comfortable
154:19 - with and we simply type in net discover
154:22 - and we hit enter so do have to get
154:24 - installed sorry
154:26 - and we hit enter and you can see already
154:28 - have it installed so using it requires
154:30 - root privileges so we say sudo
154:34 - net discover
154:36 - and then we specify the interface that
154:38 - we want to use so we can see enp2s0
154:42 - and hit enter and as you can see it will
154:44 - start scanning and it's doing this
154:45 - through arp or the address resolution
154:47 - protocol so arp
154:50 - request and response packets so again
154:52 - it's sending various arp requests
154:54 - to you know all ips on the network and
154:56 - then the responses give us the results
154:58 - that uh that actually prove that whether
155:01 - we have a device or not so you can see
155:04 - i currently have the my router which is
155:06 - running uh this is the default gateway
155:09 - and then i also have another device
155:11 - running here
155:12 - let's see if we have any other devices
155:15 - and we'll just wait for it to continue
155:16 - scanning
155:18 - so i'll just wait for this to continue
155:20 - scanning i think i have multiple other
155:22 - devices this is pretty much going to be
155:24 - my windows device if i bring up
155:27 - a mobile device here let's see if that
155:29 - actually
155:30 - comes up
155:32 - and i'll try and load up a website here
155:34 - i actually don't have my phone on me but
155:36 - in any case this essentially gives you
155:39 - all
155:40 - it essentially gives you all devices on
155:42 - your network and that's a great way of
155:44 - monitoring your network and viewing what
155:46 - devices you have so again it gives you
155:48 - the ip their mac address and their mac
155:50 - vendor so again it gives you an
155:52 - information about what device you're
155:53 - dealing with so in this case tp-link and
155:56 - then hot high precision which is pretty
155:58 - much a network adapter and once you're
156:00 - done you just hit ctrl c and that will
156:02 - terminate the process right over there
156:05 - all right now to end up at or to end
156:07 - this video
156:08 - let's talk about a dns which a lot of
156:10 - people actually ask me about so your dns
156:12 - information
156:14 - or your name servers rather are going to
156:16 - be stored in your resolve.com file so
156:18 - again sudo
156:20 - uh sudo and we'll use vim etsy and we're
156:24 - looking for the resolve uh
156:26 - resolve dot com file and we hit enter
156:29 - you can see that this uh this file is
156:30 - managed uh by the system they resolved
156:33 - uh and we can i'll actually show you how
156:35 - to use that utility shortly um
156:38 - so this is a dynamic result or
156:40 - configuration file for connecting local
156:42 - clients to the internal dns stub
156:44 - resolver of systemd so again it tells
156:46 - you that this is going through systemd
156:48 - and this is more of a dynamic uh of a
156:51 - dynamic file that is generated
156:53 - dynamically
156:54 - and again it is just for connecting
156:56 - local clients to the internal dns dns
156:59 - resolver with systemd resolved um and
157:02 - i'll be talking about services as i said
157:04 - later on but many people edit this which
157:06 - will work temporarily uh however if you
157:09 - do want to take a look at systemd
157:10 - resolve that's extremely simple so
157:13 - what you could do if you want to use
157:14 - this manually is uh we would actually
157:16 - just add another one here so i can say
157:19 - name server and then i'll say for
157:21 - example go the google name server eight
157:23 - eight eight eight
157:24 - and uh i can use that if i want to but
157:26 - in our case we're not gonna we're not
157:28 - gonna have any changes here so we'll
157:30 - just exit so
157:32 - you can actually check the status of
157:34 - system d resolve so we can say uh system
157:38 - b
157:39 - uh resolve sorry resolve and we say
157:42 - status
157:43 - and we hit enter and again that gives
157:45 - you uh the various dns information that
157:48 - you're looking for so we can print out
157:50 - so you can see the dns servers that we
157:52 - currently have set
157:54 - are going to be the google dns server
157:56 - and this is going through your uh your
157:58 - actual your router or your main gateway
158:01 - so it would be advisable to switch uh
158:04 - you know to any dns server that you want
158:06 - to do or that you want to use on your
158:08 - main router
158:09 - so you can see that it uses the default
158:12 - one that is your default gateway ip here
158:15 - and the google
158:17 - the google dns server that i have set
158:19 - here and that was simply for the
158:20 - demonstration purposes in this video so
158:23 - that's how to system they resolve
158:25 - um now when talking about your hosts
158:27 - file this essentially allows you to
158:29 - manage your various hosts and you can
158:31 - use this uh you know for ad blocking
158:33 - uh or yeah you can use it for ad
158:35 - blocking if you want to so for example
158:37 - uh we can say sudo
158:40 - vim and we say etsy and we say host and
158:43 - we hit enter and you can see uh for
158:45 - example where we have uh defined uh the
158:48 - local host or the loopback
158:50 - uh you know
158:52 - 127.0.0.1 is our localhost and then the
158:55 - current host here which is alexis
158:57 - workstation is
158:59 - 127.0.1.1 so i could also change that to
159:01 - any other ipa i want
159:03 - so if you're going to block an ad what
159:05 - you typically do is you put an invalid
159:07 - ip address here so i could say zero zero
159:09 - zero zero
159:10 - uh and i could sort of block a website
159:13 - here like for example
159:15 - i could say google.com
159:18 - which is not a smart thing to do but in
159:20 - any case uh we can write those changes
159:22 - and exit and then if i say sudo system
159:25 - control
159:26 - we say restart network
159:29 - manager i believe
159:31 - network manager dot service
159:33 - um so we will just let me just try and
159:35 - complete this for some reason it isn't
159:38 - displaying this system
159:41 - system control
159:46 - network manager.service
159:49 - and we want to use this so we want to
159:51 - restart the network manager and i'll
159:53 - actually show you this to you right now
159:55 - um so if we try and open up a firefox
159:58 - instance here and we say google.com and
160:01 - we hit enter you can see
160:03 - uh it pretty much redirects us to the
160:05 - local host and
160:07 - that's essentially how to use the hosts
160:09 - file now i can change the ip to
160:10 - something i do something else completely
160:12 - but again many of you have been asking
160:14 - me how to use the hosts file so that's
160:16 - pretty much how to use it
160:19 - and we can get rid of that right now
160:21 - because i don't want that to be the case
160:23 - and we can just restart the network
160:24 - manager one more time
160:26 - and there we are so we should be good
160:28 - there all right so that's pretty much
160:30 - all i wanted to cover in regards to
160:31 - networking and all that is important as
160:34 - i said we'll be taking a look at
160:35 - services i will also be taking a look at
160:37 - ssh and if you are interested in in
160:40 - exploring tools like netstat and net
160:43 - discover you can check my independent
160:45 - videos
160:50 - in this video we're going to be talking
160:51 - about how to use store and proxy gains
160:53 - in conjunction to anonymize your traffic
160:56 - uh you know through the use of any tool
160:57 - that you want so both of these tools
160:59 - don't come pre-installed on you know
161:01 - standard distributions but you can
161:03 - pretty much find them on pen testing and
161:05 - offensive distributions so again what we
161:08 - need to do is install the tor service
161:10 - first not the tor browser but the actual
161:13 - tor service and then secondly we need to
161:15 - install the proxy chains tool so again
161:17 - to install the tour service all we need
161:19 - to do is say sudo
161:21 - sudo apt you can use whatever package
161:22 - manager using sudo apt-get install and
161:25 - it's pretty much going to be just store
161:27 - that will be the name of the service and
161:28 - i already have it installed so
161:31 - again if you just want to check what it
161:33 - is so you can say what is store and this
161:34 - is referring to the actual
161:37 - um due to the actual service so you can
161:39 - see that what is a second generation
161:41 - onion router
161:43 - so if we say man
161:44 - tor and we hit enter you can see that
161:46 - door
161:47 - uh is a connection oriented anonymizing
161:49 - communication service users i choose a
161:51 - source routed path through a set of
161:53 - nodes
161:54 - uh and negotiate a virtual circuit
161:56 - through the to the network i think i've
161:58 - pretty much explained this before in
161:59 - previous video as to how the tor how tor
162:02 - works um so we'll be using tor now uh to
162:04 - start the tour service we can use
162:07 - systemd or you can also use a service
162:10 - um so we can say sudo system control and
162:13 - we say uh we can say start and then we
162:16 - are looking for tor uh
162:19 - i think where it is the tor service here
162:22 - uh i'm not too sure what it is what it's
162:25 - called so if we say tor
162:27 - let's check the status here
162:29 - status store
162:31 - and you can see that we currently have
162:32 - it loaded and active so again the tor
162:36 - service is an anonymizing overlay
162:38 - network for tcp so if we use netstat
162:41 - here so we can say netstat
162:43 - and we can look for listening tcp
162:46 - connections and we grip for the port
162:48 - that the door service connects through
162:49 - which is 1950 and we hit enter you can
162:52 - see we now have uh you know we are
162:53 - listening on port 9050 and this is
162:56 - localhost so that's perfect we can use
162:58 - this with proxychains all right so now
163:00 - let's talk about proxychain so again uh
163:02 - installing proxychains is very simple so
163:04 - you do upgrade install proxychains uh
163:07 - sorry um
163:09 - proxy chains and we enter and i already
163:11 - have it installed uh before we actually
163:13 - use it we now need to uh we need to play
163:16 - around with the configuration file so
163:18 - that we can tweak the the configuration
163:20 - to what we want it to be and how we want
163:22 - it to work so we can say sudo vim hc
163:26 - proxychains.conf and we hit enter
163:29 - so again
163:30 - pretty much i'll go through the settings
163:32 - that i use so again
163:34 - we can use http x4 sox5
163:37 - uh and again we this allows you to
163:39 - tunnel um or proxy you can you can
163:42 - essentially tunnel your connections
163:43 - through a series of proxies and in our
163:46 - case the proxies are going to be is
163:47 - going to be tor so with dns that's the
163:50 - great thing so
163:51 - uh the options below identify how the
163:54 - proxy list is treated only one option
163:56 - should be common uncommented at a time
163:58 - so
163:59 - dynamic chains where each connection
164:02 - will be done via chained proxies all
164:03 - proxy chained in order as they appear in
164:05 - the list at least one proxy must be
164:07 - online to play in the chain i i pretty
164:09 - much like using the random chain
164:12 - so you can see that each connection will
164:14 - be done via random proxy or proxy chain
164:17 - from the list this option is good to
164:18 - test your intrusion detection system
164:20 - because it's constantly changing uh you
164:23 - know through random proxies but if again
164:25 - if you want a dynamic chain that's
164:26 - perfect
164:27 - uh you can also use the strict chain
164:29 - this will ensure that uh all connection
164:32 - are going to be done through a chain
164:33 - proxy or all proxies will be chained in
164:35 - the order as they appear in the list so
164:38 - i like using a random chain so you want
164:40 - to uncomment this or it will be
164:42 - commented here so
164:44 - if i just hit insert here and it'll
164:46 - pretty much be commented like so and you
164:48 - want to uncomment this
164:50 - we then want to take a look at the proxy
164:52 - dns request so again this will prevent
164:55 - no leak for dns data this is very
164:57 - important you want to make sure that's
164:59 - uncommented and then we want to take a
165:02 - look at the proxy list format so this
165:03 - gives you an idea of how to use your
165:05 - proxy list if you are interested in
165:07 - using other proxies apart from tor
165:10 - you can see that we have socks 5 http
165:12 - sox4 you know in our case the defaults
165:15 - will be set to door and we want to add
165:17 - socks 5 as well here so we say socks 5
165:20 - and we can we remember it's running on
165:22 - our local host uh sorry 127.0.0.1
165:26 - uh 1950 and that's of course going to be
165:28 - um that's going to be socks 5 all right
165:31 - so we can add any of the other proxies
165:33 - we want here so again if you're not keen
165:35 - on using tor you can change this and
165:37 - we'll write changes and quit from here
165:40 - so now when using proxy chains you want
165:42 - to ensure that you have the toss service
165:43 - started and it's currently running and
165:45 - then i use the syntax is very simple so
165:47 - we say proxy chains
165:50 - and then we specify the tool that we
165:52 - want to use um so for example
165:55 - i can say proxy chains are firefox uh or
165:58 - i can use another tool like ssh or
166:01 - telnet
166:02 - or i could use a tool uh maybe let's try
166:05 - firefox because it's the easiest way to
166:07 - test this so i say firefox
166:09 - and then i open this website dns
166:11 - leaktest.com
166:13 - and we hit enter and that's going to
166:15 - start proxy chains for us now given that
166:17 - it's using door the connection is going
166:19 - to be much slower than you know a
166:21 - standard proxy uh of course depending on
166:23 - what proxy you end up using so we'll
166:25 - just wait for this to load up and the
166:26 - dns lictest.com
166:28 - will tell us what our ip is and secondly
166:31 - it will tell us
166:33 - what our dns is so you can see
166:36 - it gives us information regarding our ip
166:38 - um for some reason isn't telling us what
166:40 - country it is so again we can just hit a
166:42 - standard test this will test our dns to
166:44 - see if we
166:45 - are leaking any dns information and of
166:48 - course dns information is very important
166:49 - as it can leak your geographical
166:51 - information so again you can just go
166:54 - through the test and this will display
166:56 - whether or not what dns servers you're
166:58 - currently been using so let's wait for
167:01 - this and see what results we get there's
167:03 - a progress bar right over here so you
167:05 - can see that all are going through um
167:08 - dns servers in germany and of course you
167:11 - have their host names and their various
167:13 - ips so again that's a great because it
167:15 - was a we were we didn't leak any of our
167:18 - personal dns information that or the dns
167:20 - servers we went through but of course
167:22 - that is also dependent on on you know
167:25 - dns security something that's out of the
167:26 - scope of this video
167:32 - in this video we're going to be talking
167:33 - about uh process and service management
167:36 - uh so we're going to be talking about
167:37 - lots of tools that you can use to uh to
167:39 - manage processes
167:41 - and also manage services right so these
167:44 - this is a very important video pretty
167:45 - much i think one of the most important
167:47 - videos in this series because of of the
167:50 - power that that comes with it so uh
167:52 - first of all let's let's take a look at
167:55 - some of the utilities that you can use
167:57 - uh to to manage system resources and to
168:00 - view the current processes and you know
168:02 - just view resource consumption in
168:04 - regards to the processes that are
168:06 - consuming the most and consuming the
168:07 - least
168:08 - now by default all linux systems come
168:10 - with a utility called top right and you
168:13 - can pretty much get some information
168:15 - about it by using uh the what is command
168:17 - so again it tells us that top displays
168:19 - linux processes so you can hit top and
168:21 - again as you can see this gives you
168:23 - information regarding uh your your
168:25 - system resources the consumption and the
168:28 - various processes that are running the
168:30 - the owner of the processes in terms of
168:32 - the user so you have your process id
168:34 - very important there that can be used to
168:36 - manage the process either to kill it
168:38 - uh or to stop it you then have the user
168:41 - here that it belongs to
168:43 - you then have the cpu and memory
168:45 - consumption
168:46 - uh the time
168:47 - and the command itself so again you can
168:50 - essentially use this to manage all your
168:52 - processes however the a better utility
168:55 - custom utility that you can install by
168:57 - with with whatever the package manager
168:59 - using
169:00 - and that is the h-top utility so again
169:02 - we can install it we can install it here
169:04 - i already have it installed so again we
169:07 - can clear this and say what is h-top you
169:09 - can see that this is an interactive
169:11 - process viewer so if we open up htop uh
169:14 - you can see that first of all it gives
169:15 - you your processor usage
169:17 - in regards to how many cores you have so
169:19 - i have six scores here and it gives you
169:21 - the utilization in terms of percentage
169:24 - you then have your memory usage so it
169:25 - gives you a total usage i have about 16
169:28 - gigs here and i'm currently using six
169:30 - gig
169:30 - uh it also tells you your swap usage uh
169:33 - so i have a swap uh set to about two
169:36 - gigs uh don't get angry at me and a lot
169:37 - of people are against swap nowadays
169:40 - it gives you the amount of tasks
169:43 - the amount running the load average and
169:45 - the uptime of your system so very useful
169:47 - information it also sorts it out it
169:50 - sorts the information out uh you know
169:52 - similar to what we add so we have the
169:53 - process id and you can sort that out uh
169:56 - chronologically so you can say you can
169:58 - just click on it and it loads it up from
169:59 - the first process with the process id of
170:02 - one you then have the user so you can
170:04 - again switch from all the user uh the
170:06 - user accounts that uh that these
170:08 - processes are running under
170:11 - you then have your cpu usage so if i
170:12 - click on cpu that displays uh the the
170:15 - process that is currently using the most
170:18 - uh cpu usage uh again i can click on
170:20 - memory and it tells us that google
170:22 - chrome is using the most memory that's
170:24 - that's not a surprise
170:26 - and of course we can just go back to cpu
170:28 - usage and you can see that obs is
170:30 - currently running right now which makes
170:31 - sense as that is using the most cpu
170:34 - right so uh this is a utility that you
170:37 - can use to pretty much manage your
170:39 - processes now before we take a look at
170:40 - how to use it because this simplifies
170:42 - the process
170:43 - let's take a look at uh you know how you
170:46 - would actually view these uh the
170:48 - resource consumption like ram usage for
170:50 - example to v ram ram usage we would
170:53 - simply type in free
170:54 - and that again tells you uh if we that
170:57 - you know we just use the man pages here
170:59 - you can see that free uh displays
171:02 - the amount of free and used memory in
171:04 - the system so again you can display this
171:06 - uh in regards to uh to to to the output
171:09 - you want so if we say three h that
171:11 - prints it out in human uh readable
171:14 - format so you can see we have total used
171:16 - free shared
171:17 - the cash and available and of course
171:19 - also for your swap so that's uh one of
171:21 - the quick ways you can view how much ram
171:23 - you're using
171:24 - now let's talk about processes right so
171:26 - processes uh need to be understood as
171:29 - you need to separate them between you
171:31 - need to separate processes and services
171:33 - right so processes
171:35 - uh are viewed with the ps tool so again
171:38 - uh ps uh gives you a report uh it gives
171:40 - you a report of this uh or it
171:42 - essentially gives you a snapshot of your
171:43 - current processes that you have running
171:46 - all right so if i just say ps
171:48 - this is weird because many users
171:50 - actually i've pointed this out so why
171:53 - does it only give you two processes well
171:55 - you haven't specified any arguments in
171:57 - regards to what processes you want to
171:58 - see so what it's going to give you is
172:00 - it's simply going to display processes
172:02 - that are in your current shell and you
172:04 - can see that the tool that it has is the
172:06 - bash
172:07 - and the the actual command that you run
172:09 - so that makes sense now if we want to
172:11 - display all processes we would simply
172:13 - say psa ux
172:15 - and you can view all of this syntax
172:18 - from the man page which is actually
172:20 - recommended here i'm using the psd style
172:22 - or the bsd syntax so again
172:25 - to see every process on the system using
172:28 - standard syntax you can use that i'm
172:29 - using as you can see right over here bst
172:32 - syntax so i'll continue with that so i
172:34 - can say ps aux
172:36 - and i can hit enter alright so this is a
172:38 - lot of information here this is
172:40 - essentially giving you a snapshot of all
172:42 - the processes that you have running on
172:44 - your system so we can scroll all the way
172:46 - to the top and again the it's sorted out
172:48 - into a table with various columns so
172:50 - again you have the user the process id
172:52 - and it starts chronologically
172:54 - but the great thing about tools like
172:55 - h-stop is it gives you a dynamic view of
172:58 - of the processors how much they're
173:00 - consuming on a second by second basis uh
173:03 - cpu usage memory etc but this is a
173:05 - snapshot remember so again this can give
173:07 - you an idea of all the processes that
173:09 - are currently active however if you want
173:11 - a dynamic idea of the current system
173:14 - resource consumption use a utility like
173:16 - top or h-top this just gives you a
173:18 - snapshot all right the key thing we're
173:20 - looking for here is the pid because we
173:23 - won't talk about managing processes
173:25 - right so
173:26 - let's say um i want to start a service
173:29 - here
173:30 - so i say sudo system
173:32 - control
173:35 - system control i'm going to say start
173:38 - and i'll say tor i want to start the tor
173:40 - service here and then i say ps aux i can
173:42 - also grab the output here and i can say
173:44 - i'm looking for tor uh so give me all
173:47 - processes with door right now of course
173:49 - it's going to give us you know various
173:51 - other false positives with the the
173:53 - string of characters t o r and you can
173:56 - see the inclusion of that within storage
173:58 - but if we just go to the bottom here uh
174:00 - you can see we have um
174:03 - we have the user bin tour uh binary
174:06 - being used here so that looks
174:07 - interesting
174:08 - and yeah so if we take a look at the
174:10 - process id we can see it has a process
174:12 - id of 7604 so if we say uh sudo
174:16 - system
174:17 - control we say status status store and
174:21 - we enter um sorry about this guy system
174:25 - control and we hit we take a look at the
174:27 - status of the
174:28 - of the service you can see that it's
174:30 - active it's loaded and active so if we
174:32 - want to kill this process all we need to
174:34 - do is get the process id in this case
174:36 - it's going to be 7604
174:39 - and all we need to do is say
174:41 - we just say kill
174:43 - and you may want to prepend this with
174:45 - root privileges or the pseudo command so
174:47 - we say sudo kill
174:48 - uh seven six zero four seven six zero
174:51 - four and we enter and now if we take a
174:53 - look at the the the tour service you can
174:55 - see it's still running now the reason i
174:57 - did this is because you need to
174:59 - differentiate between a service and a
175:02 - process because the service will re
175:04 - reinitiate or re-initialize itself right
175:07 - so let's take a look at
175:09 - the let's take a look at all the
175:11 - processes here and we can take a look at
175:12 - more realistic options available to us
175:15 - right so i'll give you an example here
175:17 - um so let's grip for ssh and we'll say
175:22 - grep ssh
175:24 - let's see we have the ssh daemon here
175:27 - [Music]
175:29 - which is running as a process id
175:32 - of
175:34 - 5687 right and
175:36 - we also have the uh yeah that's pretty
175:39 - much the one we're looking for we also
175:40 - have the ssh agent here
175:42 - so what we can do is we can say um
175:45 - pseudo here
175:46 - one nine six nine
175:48 - and we can also say pseudo kill 56 87
175:51 - right so we can say 56 87 you kill that
175:55 - and then we say system
175:57 - system
175:58 - control and say
176:00 - status ssh and we hit enter you can see
176:03 - that ssh
176:05 - is currently loaded but inactive dead
176:08 - right so that's just a simple way of
176:10 - managing processes now we can do the
176:11 - same thing
176:12 - uh with h-stop and i'll show you how to
176:14 - do this many people actually skip this
176:16 - but each stop is has a much easier way
176:18 - of doing this so when you launch h-stop
176:21 - uh you can pretty much filter through
176:22 - the results but a great way of searching
176:24 - for services by their name instead of
176:25 - using grep is by using the f3 key
176:28 - after which it will bring up this little
176:30 - search bar and i can search for things
176:31 - like door
176:32 - uh and if i use a space
176:34 - it pretty much should give me all the
176:36 - results so let me just do that one more
176:38 - time so i say tor
176:40 - and
176:41 - we can see that the process was closed
176:44 - but the the service is still running so
176:46 - let's try another another process here
176:49 - let's see if we have um
176:52 - let's see let's actually work with
176:53 - h-stop i just want to show you this so
176:54 - if we click on h-stop and it's
176:56 - highlighted yellow we can actually kill
176:58 - it by using f9 so if we hit f9 we can
177:01 - send various signals to this process so
177:04 - we can say signal quit signal kill so if
177:06 - we say signal kill that's option nine
177:09 - and we hit enter
177:10 - you can see that that will pretty much
177:12 - kill the process and you can see that it
177:15 - actually points that up right over here
177:17 - and
177:17 - you can see that the output is messed up
177:19 - and i shouldn't have probably done that
177:21 - but i wanted to demonstrate the power of
177:22 - h stop here so if i go into h stop one
177:25 - more time and now again it's giving us
177:27 - our dynamic results so we can pretty
177:29 - much use that same
177:30 - syntax to manage our services really
177:32 - easy and many people go over this it's
177:34 - not just a system resource uh
177:37 - usage
177:38 - utility to actually display how much uh
177:40 - you know resources you're consuming it
177:42 - can actually allow you to interact with
177:44 - your services or your processors quite
177:46 - well so
177:48 - again i can search for any process right
177:50 - over here with name or i can
177:52 - again i can work with the the resource
177:55 - consumption so again i can highlight
177:56 - resource consumption here uh memory
177:58 - consumption et cetera et cetera right
178:00 - now let's talk about service management
178:02 - with system d right because i also want
178:05 - to cover uh system v as well system v
178:07 - service management but
178:09 - now the norm is increasingly becoming
178:12 - system d so it's great to to actually
178:14 - know how to use this so
178:16 - if we say man system
178:18 - control this is the utility that allows
178:20 - us to control um
178:22 - so you can see control the systemd
178:24 - system and service manager so i'll show
178:26 - you how to use it so if we want to list
178:28 - all the active services which are going
178:30 - to be a lot we can say system
178:32 - uh control and we hit enter and you can
178:35 - see that we can you know we can move
178:36 - down with the uh your your directional
178:39 - keys
178:40 - and this gives you an idea of all the
178:41 - services that you have running and once
178:43 - you have once you're done we have about
178:45 - uh 230 lines here and they keep on going
178:47 - as as the more you you actually go down
178:50 - so uh 269 loaded units um it gives you
178:54 - all information regards to all the
178:55 - services you have running so if we quit
178:58 - we can also prep so if we grep here we
179:01 - say grab
179:02 - ssh and we hit enter so we have no ssh
179:05 - service running so if we if we want to
179:08 - start a service like the ssh service
179:09 - what i can do is i can say
179:11 - system control
179:13 - system control i say start and then i
179:17 - i can you know then play around with
179:19 - with what i want to do so i can say
179:21 - um i can say
179:24 - start and then the name of the service
179:25 - so i can say ssh and then i can use the
179:27 - tab auto completion here so again you
179:29 - can see that we have the ssh socket and
179:31 - the ssh service so if i wanted to start
179:34 - the ssh service uh just give it a few
179:36 - seconds it does take a while to load
179:37 - this if i use tab auto completion too
179:39 - much so if i say
179:41 - system control uh start ssh service and
179:43 - i hit enter it's gonna ask me for my uh
179:45 - for my password and it's gonna this
179:47 - because it requires root privileges
179:49 - so uh that has started the ssh service
179:51 - now we can again uh confirm this uh with
179:54 - you know we can say uh lt here and uh
179:57 - you can see we have ssh running
179:59 - right over here so again we can check
180:01 - the status of the pros of this actual
180:03 - service by running uh sudo system
180:06 - control and we can say status
180:09 - ssh dot service here and we enter
180:12 - and there we are so you can see it tells
180:14 - us that the ssh service this is using
180:16 - open ssh so it tells us it's loaded and
180:18 - active which means it you can actually
180:20 - use it and it gives you information
180:22 - about it so the log of events so again
180:25 - started uh ssh listening on port 22
180:29 - listening on localhost port 22 starting
180:31 - the openssh openbsd secure shell server
180:35 - and it gives you the various timestamps
180:37 - right so
180:38 - that's how to pretty much interact uh to
180:41 - how to start and monitor the status of a
180:43 - service if you're having issues with it
180:45 - right now if i wanted to disable it or
180:47 - to stop it i could say um i could just
180:51 - i can say stop
180:53 - uh and i can say ssh dot service and i
180:57 - hit enter and that will stop the
180:59 - sorry let me just enter my password here
181:01 - that will stop the service
181:03 - if i check the status you can see that
181:05 - it's loaded but inactive and dead now a
181:07 - lot of people ask me how do i run
181:10 - particular services on system startup
181:12 - and you can easily do that with systemd
181:15 - so i can say sudo system let's say i
181:18 - wanted to enable the ssh service every
181:19 - time i boot up which is useful
181:22 - so i can say system control
181:25 - [Music]
181:26 - and then i would say enable but first i
181:28 - need to check if it's already enabled so
181:30 - i can say is enabled
181:32 - and then say ssh dot service and that
181:35 - will tell me if uh it is currently
181:37 - enabled to
181:38 - do to be run on system startup you can
181:40 - see tells us that it's currently
181:41 - disabled which is great
181:43 - uh if i check the synergy service i just
181:46 - want to give you an example a robust
181:47 - example or hit enter you can see that on
181:50 - startup yes this service is enabled
181:52 - that's because i use the synergy service
181:54 - to you know for my mouse sharing my
181:56 - mouse and keyboard sharing
181:58 - system so again that tells me that okay
182:00 - that's enabled so if we want to enable
182:02 - ssh what we would say is a pseudosystem
182:05 - control and we would say enable and say
182:07 - ssh.service
182:10 - all right and i hit enter and you can
182:12 - see it's created the sim link
182:14 - for us uh in the system d uh directory
182:17 - here so
182:19 - uh if you're using um
182:22 - if you're using system v then you nee
182:24 - you need to play around with the initial
182:26 - uh the init scripts uh
182:28 - and you then need to create a sim link
182:30 - but this does it automatically for you
182:31 - so now if we check the uh is enabled if
182:34 - we check if it's enabled you can see
182:35 - that now it's enabled if i want to
182:37 - disable it from running on startup i
182:39 - would simply say disable
182:42 - because i don't want ssh running this is
182:44 - not a server so
182:45 - i can check it now and we can see it's
182:47 - disabled all right so
182:49 - that's pretty much how to manage uh you
182:51 - know services with system d so that's
182:54 - how to start stop uh if i want to
182:55 - restart a service again i can simply say
182:58 - restart so let me do that right now so
183:00 - if i say sudo system control i say tor
183:03 - sorry start
183:04 - tor i can hit enter that will start the
183:06 - tour services i want to reload it i can
183:08 - say reload
183:10 - all right now i can also um
183:14 - i can also reload will reload the uh the
183:17 - configuration if i say restart that will
183:19 - simply restart the service with the
183:21 - current configuration so that's a quick
183:23 - tidbit for you if you you can use reload
183:25 - here then that will essentially restart
183:28 - it with the newer configuration so in
183:30 - case you're wondering so i'll just stop
183:31 - this service
183:32 - and i'll just hit enter
183:34 - and there we are all right so
183:36 - that is how to manage services now if
183:38 - you want to uh if we want to reload the
183:41 - entire the system d daemon what we can
183:43 - say is sudo system control
183:46 - uh we're looking for the daemon and we
183:49 - can say reload and we just hit enter and
183:51 - that will reload the daemon completely
183:53 - that's if you're having any issues and
183:55 - you wanted to reconfigure particular
183:56 - services
183:58 - all right
183:59 - now
184:00 - let's talk about system v service
184:02 - management which many of you are
184:03 - familiar with a system v is essentially
184:05 - where you say service
184:07 - the name of the service which could be
184:08 - door and then we say start
184:10 - we can say stop
184:12 - and we can say restart right very very
184:14 - simple and we can also check the status
184:16 - so again say service store start
184:18 - that will ask you know ask me for my
184:21 - administrator privileges i can say
184:23 - service store
184:25 - status hit enter you can see it tells us
184:27 - active loaded
184:29 - um and then we can say system a service
184:32 - store we can say stop and we can hit
184:34 - enter and that will stop these the door
184:36 - service and we can also
184:38 - say restart and again that will simply
184:40 - restart the tour service there and we
184:42 - can then stop it one more time so that's
184:44 - how to use system v very very simple but
184:46 - in my opinion system d
184:48 - uh is is the much better alternative to
184:51 - learn now and it's extremely robust and
184:53 - very very powerful tool to actually
184:56 - learn how to use or do low utility
185:02 - in this video we're going to be talking
185:03 - about ssh uh how to configure it
185:05 - securely
185:06 - uh and then of course we'll talk about
185:08 - you know how to uh how to securely
185:10 - transfer files with ssh so let's get
185:12 - started um first of all with
185:14 - establishing what ssh client and server
185:17 - we're going to be using so in our case
185:19 - we want to be uh we want to be using
185:21 - openssh which is pretty much the go to
185:23 - uh the the go to ssh client in server
185:26 - solution it's completely open source and
185:28 - it's uh it's one of these uh you know
185:30 - great services so again that was uh
185:32 - developed by the bsd team
185:34 - so um again uh we must first of all
185:38 - understand the uh the connection type or
185:40 - the connection model uh with ssh so ssh
185:43 - is primarily a client server connection
185:46 - model so that means you need the client
185:48 - software to
185:49 - connect to the to the server software in
185:51 - our case we need to install the openssh
185:54 - client service or the client package
185:57 - on our client and of course the openssh
185:59 - server package on r7 i'll show you that
186:01 - right now so i'm currently on my client
186:02 - here which is going to be ubuntu our
186:04 - remote server is going to be one of my
186:05 - ubuntu servers uh running on my
186:07 - virtualization server so
186:09 - what i'll do is i'll say sudo apt
186:13 - get install and we say open ssh and we
186:16 - we're looking for the openssh if we
186:18 - double tap we can see we're looking for
186:19 - the openssh client right so i'm gonna
186:21 - hit enter and uh i already have this
186:24 - installed right now the openssh client
186:27 - configuration file is found so if i say
186:29 - cat hc ssh sorry ssh and this is found
186:33 - under
186:33 - it is the ssh config the sshd config
186:36 - file is for the open ssh server
186:39 - so you can see i also have my uh my my
186:42 - public and private keys here as well but
186:44 - i'll get into that in a second they we
186:46 - don't need to complicate this right now
186:47 - so if i take a look at me at my config
186:50 - file here this is the client config
186:53 - you can see that um
186:55 - the options are quite uh straightforward
186:58 - in regards to what you can enable and
186:59 - disable so you can specify the port
187:02 - uh the protocol um
187:04 - and uh various other bits of
187:06 - you know configurations here but that's
187:08 - not the the in within the scope of the
187:11 - video but i just wanted to get to that
187:13 - so
187:13 - uh my remote server is running on um
187:16 - it's currently running on an ip of
187:20 - 192.168.1.113 so
187:22 - we already have an admin user on that
187:23 - system so we'll just say admin and we'll
187:25 - say 192.168.1.113
187:28 - all right and i will just enter the
187:31 - password here for the admin user and
187:33 - there we are so you can see i'm
187:34 - currently logged in as the admin user so
187:38 - the first thing we want to do is we need
187:39 - to install uh the openssh server so you
187:42 - say oh apt-get install open ssh
187:44 - server and the reason i'm doing this
187:46 - even though i have it installed already
187:48 - just to show you how one would go about
187:49 - doing it right
187:51 - um so hit install already installed
187:53 - there excellent all right all right all
187:55 - right now that we have this uh both the
187:57 - pieces of software installed on the
187:59 - client and the server
188:00 - we can talk about uh configuring uh you
188:03 - know ssh right so pretty much when
188:06 - dealing with the remote server and
188:08 - remote authentication the first thing
188:10 - you need to do is you need to disable
188:12 - root logins
188:14 - uh because the root the root user
188:16 - account is extremely powerful because it
188:18 - really has no restrictions in regards to
188:19 - what it can do so that's our first order
188:21 - of business here and this can be done by
188:24 - modifying
188:25 - this can be done by modifying the
188:26 - openssh
188:28 - the openssh
188:30 - configuration file the opensh server
188:32 - configuration file so if i say sudo vim
188:35 - hc ssh and we're looking for sshd
188:39 - uh sshd and we say
188:42 - sshdconfig and we hit enter so you can
188:44 - see this is the openbsd openssh
188:46 - sshdconfig file
188:48 - and it does you it tells you here this
188:50 - is a sshd server systemwide
188:53 - configuration file so the first thing we
188:54 - want to do is we let's take a look at
188:56 - some of the various uh configurations
188:58 - you can set here so you can change the
189:00 - default port this is great for those of
189:02 - you who are who want to set up a
189:03 - honeypot on that exact port like por 22
189:06 - and then have ssh run on another port
189:08 - like 2 2 2 0
189:10 - you can do that as well
189:12 - you can also change the listen address
189:14 - if you want to uh the host key names uh
189:17 - let's talk about uh let's just go down
189:20 - into logging you can play around with
189:22 - logging here
189:23 - uh and i'll talk about logs probably in
189:25 - another video and here we are we have uh
189:28 - we have authentication all right so
189:29 - within authentication you can see we
189:31 - have an option called permit root login
189:34 - right and we want to change this to no
189:36 - right so from yes to no
189:39 - uh and we we can also play around with
189:41 - the grace the login grace time so we can
189:44 - increase this or decrease it based on
189:46 - the on the time you want to provide
189:48 - uh we can keep strict modes to yes uh in
189:52 - regards to the max authentication tries
189:55 - we can change this to four although i'll
189:57 - be making a separate video where i'll be
189:59 - showing you how to set up ssh brute
190:01 - force protection the max sessions i want
190:04 - are going to be three public key
190:06 - authentication
190:08 - uh yes uh let's go all the way down now
190:11 - um
190:12 - and we are primarily looking for
190:14 - password authentication so we'll talk
190:16 - about this when we're going to be
190:17 - setting up ssh keys so for now we've
190:20 - we've essentially disabled uh where
190:22 - we've disabled the root logins so if i
190:24 - just save the the files here now when
190:27 - whenever you've made changes to the uh
190:29 - to the open sh server configuration file
190:32 - we need to restart uh the open ssh
190:35 - server so to do this again we'll use
190:37 - systemd so say system
190:40 - and we say
190:42 - restart
190:44 - sshd sshd service remember this is the
190:47 - sshd daemon or the openssh server and we
190:49 - hit enter
190:50 - all right so now pretty much if we just
190:53 - open up a new tab on my client and i try
190:55 - and log into the root user account i
190:57 - would say ssh root and i would say 192
191:00 - 168.1.113
191:03 - and hit enter right and i enter the
191:04 - password for the root user
191:07 - and
191:08 - you'll see pretty much that we will not
191:10 - be able to do it so
191:12 - uh that is pretty much uh going to block
191:14 - any logins to this uh to this particular
191:17 - account now the other thing we we want
191:19 - to do is we want to disable or we want
191:21 - to lock
191:22 - the password for the
191:25 - we want to lock the password for the
191:26 - root account this will ensure that
191:28 - even though
191:30 - a person or an attacker may have
191:33 - the password the legitimate password
191:35 - they can get through it through another
191:36 - user account because remember remember
191:39 - if if a user gets access to the admin
191:42 - account via ssh they can easily switch
191:45 - to the root user account so we also have
191:47 - to disable you know the password login
191:50 - here and this will pretty much lock the
191:52 - account unless we have the privileges to
191:54 - actually change the password manually
191:56 - and to unlock it but it's a great way of
191:58 - of you know
192:00 - protecting yourself from script kiddies
192:01 - so
192:02 - what we can do is we can say um we can
192:05 - use the password command and say
192:06 - password uh l and we specify the account
192:09 - we or
192:10 - the the account whose password we want
192:11 - to lock and we hit enter uh we need uh
192:14 - pseudo privileges here so you say sudo
192:16 - hit enter and the password expiry
192:18 - information has changed so you can say
192:19 - sudo
192:20 - password and then status
192:23 - i believe it's status what options can
192:25 - we specify here
192:27 - root uh
192:28 - wait enter no we do not want to enter a
192:30 - new password so we can just do this one
192:33 - more time here so you can see that i can
192:34 - actually change the password but let me
192:36 - lock it
192:37 - um
192:39 - root where is the status how do we check
192:42 - the status oh yeah there is a capital s
192:44 - so if we hit enter you can see that the
192:46 - password is now going to be locked now
192:48 - uh the second step would be to disable
192:51 - password authentication and to use ssh
192:54 - keys which is exactly what i'm going to
192:56 - show you right now
192:57 - so that will pretty much ensure that
193:00 - you're protected from brute force
193:01 - attacks because you're pretty much
193:03 - ensuring that you cannot log into this
193:05 - ssh server
193:06 - without an ssh key right so
193:10 - uh what we'll do is we will create a new
193:12 - ssh key here and this is very this is
193:15 - very easy to do so uh first of all uh we
193:18 - need to uh we need to establish
193:21 - uh what user account we're going to be
193:24 - you know pretty much be using we've
193:26 - already locked out the root account
193:28 - and once we set up the ssh keys we'll be
193:30 - pretty much logging into the admin user
193:32 - account and the asset the ssh keys
193:35 - or the ssh key based authentication will
193:37 - only allow us to to access the admin
193:39 - account
193:40 - after which we will we will modify the
193:43 - uh the openssh server configuration file
193:45 - to disable
193:46 - uh password authentication so what we'll
193:48 - do is we'll say um
193:51 - ssh keygen
193:53 - um
193:54 - there we are t rsa and we hit enter and
193:57 - it's going to ask us for
194:00 - uh it's going to say generating public
194:02 - private
194:03 - rsa key pair enter the file in which to
194:06 - save the key so we'll say
194:09 - home oil just leave it in this directory
194:10 - hit enter we can enter a passphrase
194:12 - that's always recommended i'll enter
194:14 - password is here that will also add an
194:16 - additional level of security to your ssh
194:18 - key because remember the ssh private key
194:21 - has to be kept secret so
194:23 - we can see that the keys have been
194:25 - copied into a home alexis and ssh
194:27 - directory here so
194:29 - pretty much what we can do now
194:31 - is uh if we change our directory into
194:33 - the ssh directory here you can see that
194:36 - we have the public and private keys
194:38 - right over here so what we need to do
194:40 - now is we need to copy the uh the public
194:43 - key onto the server so let me just
194:44 - explain how ssh works really quickly how
194:47 - the authentication works
194:48 - so you store your public key on your on
194:51 - the server and you have your private key
194:53 - uh with you and the private key is the
194:55 - most important as it's the
194:57 - it's pretty much the key that will allow
194:59 - you to authenticate successfully with
195:01 - the server so you need to keep it secure
195:03 - and backed up in the event you lose it
195:05 - you lose access to the server that's
195:07 - very important right
195:08 - so essentially what what's going to
195:10 - happen here
195:12 - is your private key is used for
195:13 - encryption right so your server the ssh
195:15 - server will use your it will send a
195:18 - random string of data to you the ssh
195:20 - client uh after which the ssh client
195:23 - will encrypt that a random string of
195:25 - data with the private key and send the
195:27 - encrypted data
195:28 - uh to the server the server will then
195:30 - use your public key to decrypt it and if
195:33 - it then matches and you know so on and
195:35 - so forth i'll explain that in a second
195:37 - so
195:37 - what we can do now is we need to copy
195:39 - this uh so we say ssh
195:41 - copy
195:42 - id and we specify uh the the server so
195:46 - we say
195:48 - 192.168.1.113 and we hit enter
195:50 - it's going to ask you you can see it's
195:52 - asking for the user alexis but we don't
195:55 - want to do this remember because we want
195:57 - to use the uh the user admin so we're
195:59 - going to say admin and we're gonna hit
196:01 - enter it's gonna ask for admins password
196:04 - like so and uh
196:06 - you can see after we've entered the
196:07 - password it's gonna ask us for the it's
196:09 - gonna tell us the number of keys added
196:10 - is one
196:11 - and we can now try try login to the
196:13 - machine with ssh admin and we will
196:16 - essentially not have uh we will not need
196:18 - to use passwords but before we do that
196:21 - we need to disable password
196:22 - authentication with ssh so to do this
196:24 - again we say sudo vim and i'm back on
196:26 - the server now ssh
196:29 - and we say sshd config and we hit enter
196:32 - and
196:33 - we'll go all the way to the bottom here
196:36 - uh am i in the right configuration file
196:38 - i believe so
196:41 - yes we are i believe uh your possible
196:44 - authentication right over here
196:46 - and we will change this to no so this
196:49 - will
196:49 - essentially disable the ability for you
196:52 - to log in to this or to this remote
196:55 - server via ssh with passwords so the
196:57 - only way you can login
196:59 - is going to be through ssh keys so now i
197:02 - can
197:03 - write changes and exits here and we'll
197:06 - restart the
197:07 - ssh server
197:09 - service or the sshd service we enter and
197:12 - that's going to restart it for us orange
197:14 - so now if we exit
197:16 - we can essentially say ssh
197:18 - admin
197:20 - at 182
197:23 - 168.1.113.8 enter and it's going to ask
197:25 - me for the passphrase for the for the
197:27 - private key and we're going to unlock
197:29 - and there we are we now have access
197:31 - right now some of you might be saying
197:33 - well uh you have the private key what if
197:36 - the location is different so let me just
197:37 - show you this right now so i'll go into
197:39 - my ssh directory here
197:42 - and uh
197:44 - just list all the files and i'll say
197:46 - i'll move the um
197:48 - this is sorry sorry about that let me
197:50 - just go to my local directory here or i
197:51 - can actually just log out
197:53 - so cd ssh
197:55 - and what i'll do is i'll move the
197:57 - private key so i'll say move id
198:00 - rsa to uh
198:02 - sorry to my desktop and i'll hit enter
198:05 - and now if i try and log in so i say ssh
198:08 - uh admin
198:10 - sorry uh
198:12 - states
198:14 - enter you can see it logs in just fine
198:16 - however if if i didn't know the location
198:18 - what i would say is for example let me
198:21 - just exit i would say for example if i
198:23 - was logged in on another computer
198:25 - i would then say uh so again let me just
198:28 - go on to my desktop here
198:31 - if i wanted to specify a private key for
198:33 - logging in i would say ssh i and then i
198:36 - would say id rsa and then i say admin at
198:42 - 192.168.1.1138 enter and typically what
198:45 - you want to do is you want to ensure
198:46 - that your private key has permissions
198:49 - you want to ensure that it can only be
198:51 - read
198:52 - by the current user and not by the group
198:54 - or all other users on the system so a
198:57 - great precaution or a great way of doing
198:59 - this is saying chmod 400
199:02 - id rsa and that will essentially protect
199:04 - your private key right so that is
199:07 - essentially how to you know set up ssh
199:10 - uh and how to copy your how to set up
199:13 - key based authentication how to copy
199:15 - your ssh keys onto the server
199:17 - and we cannot talk about you know
199:19 - copying remote files or copying you know
199:21 - files remotely with ssh so again to do
199:24 - this is very simple what i'll do is i'll
199:26 - just create a file let's say touch test
199:28 - dot ext and i'll cat fc uh password into
199:34 - the test.txt file here and what let's
199:37 - say i wanted to copy this test.txt file
199:40 - into the ssh server uh what i would do
199:43 - is i would use the scp utility so the
199:45 - scp is again secure copy so i would say
199:48 - scp and then i would specify the file so
199:51 - i'll say touch
199:52 - uh sorry test test.txt and then i would
199:55 - spare out specify the credentials so it
199:57 - say admin 192.168.1.11
200:00 - and then i'll specify the location i
200:02 - want to save it in so i say home admin
200:05 - uh this is on the remote server by the
200:07 - way so home uh i can't seem to write
200:09 - admin today for some reason and i'll
200:12 - essentially hit enter and you can see
200:14 - that it actually copied quite quickly so
200:17 - now if we try and log in so we say ssh
200:23 - one one three uh
200:24 - three and eight enter and we list the
200:27 - files within the home directory for
200:28 - admin you can see that we have the
200:30 - test.txt file and if i catch the content
200:33 - here it's the
200:34 - it's the password information for the uh
200:37 - for my client uh right over here which
200:39 - is running ubuntu and you can see my
200:41 - user accounts
200:42 - there so that is pretty much how to use
200:45 - ssh how to set it up how to set up
200:47 - authentication how to protect uh your
200:49 - root user account how to copy files
200:51 - securely how to set up key based
200:53 - authentication so i hope that was
200:54 - comprehensive enough
201:00 - so this video is going to be focused on
201:01 - essentially getting you to fully learn
201:04 - and of course utilize curl to its
201:07 - maximum potential and i'm going to be
201:09 - covering as many commands as i possibly
201:10 - can now that being said curl has a lot
201:13 - of functionality that you need to
201:15 - explore on your own as well but i'll be
201:17 - covering some of the most important bits
201:19 - of functionality that it does offer to a
201:21 - normal user or a power user as well
201:24 - so uh without any further ado let's get
201:26 - started so for those of you who have
201:28 - never heard of curl curl is essentially
201:30 - a utility that allows you to transfer
201:32 - data to or from a network server using
201:35 - one of the supported protocols now the
201:37 - protocols that it does support are http
201:40 - https ftp
201:42 - ftps you also have your sftp you have
201:46 - tftp telnet et cetera et cetera now
201:48 - there are various other
201:49 - protocols that it does support in
201:51 - addition to the ones i've just mentioned
201:53 - uh but i will get into that later
201:55 - now the great thing about curl is that
201:57 - it is a multi-platform tool which means
202:00 - uh it works on linux uh mac os and
202:02 - windows now i'm gonna be covering how to
202:04 - use it on linux but of course the
202:06 - commands are pretty much the same now in
202:08 - regards to installing uh installing curl
202:10 - it as far as i know it comes
202:12 - pre-installed with most akia linux
202:14 - distributions uh but if you want to
202:16 - install it whether or not using the
202:18 - aptitude package manager you can use the
202:20 - sudo apt-get install curl command and if
202:23 - you are if you're using an archbase
202:25 - distribution you can use the pacman s
202:28 - command to install it and the the name
202:30 - of the package is curl all right if you
202:32 - are using a mac os installation or mac
202:35 - os as your operating system you can use
202:37 - the brew install command so that is brew
202:40 - install and curl all right and that's
202:43 - pretty much uh simple right over there
202:44 - with windows you need to download an
202:46 - executable or a bin file if i'm not
202:48 - wrong and you need to save it in your
202:49 - windows directory and of course from
202:51 - that you can directly launch it from
202:53 - your command prompt
202:55 - that being said let's get started now
202:57 - curl as i mentioned comes pre-installed
202:59 - with most linux distributions so let me
203:01 - just clear the terminal here and i'll
203:03 - maximize it so we can see what's going
203:05 - on
203:06 - all right so the basic syntax is as
203:08 - follows but before we do that let's open
203:10 - up the help menu you can explore the
203:12 - help menu if you are if you're really
203:14 - looking for a bit more functionality or
203:16 - you're looking for specific functions as
203:19 - you can see it's a very comprehensive
203:20 - tool and i'm primarily going to be
203:22 - covering uh the basic commands that you
203:24 - that allow you to utilize it quite well
203:27 - uh that being said many people ask me
203:29 - how i personally learn about a command
203:31 - that or a tool that i'm not familiar
203:33 - with i personally use the man or the
203:36 - manual for each of these tools so the
203:38 - manual contains a very very good
203:40 - description of of all the bits of
203:42 - functionality in regards to a tool uh
203:45 - and all linux tools pretty much uh come
203:47 - with a manual and the manual is
203:49 - extremely useful so if you you want to
203:51 - check them out go ahead and do it i
203:53 - really really recommend it when learning
203:55 - how to uh how to use a tool
203:57 - all right so let's talk about the basic
203:59 - queries you can perform with curl all
204:01 - right so when i talk about interacting
204:02 - with the various protocols this
204:04 - particular video is going to be focused
204:06 - on http and https i know there is
204:09 - ftp functionality but i'm not going to
204:11 - be getting into that because that's more
204:13 - that's where things sort of get a bit
204:15 - different but for now let's focus on
204:17 - those two protocols all right so when
204:19 - performing a basic query of a url uh you
204:22 - essentially type in curl and then the
204:24 - url so for example if i type in
204:27 - hsploit.com here
204:29 - and hit enter what will happen is this
204:31 - will essentially fetch the content of
204:33 - the specified url so for example i've
204:36 - hit curl https hsplugged.com and it will
204:38 - essentially return to me the content of
204:41 - the entire web page now you might be
204:42 - wondering well how can we verify this
204:45 - and that's where we get into essentially
204:47 - saving your output into a file or
204:49 - downloading files so i can say for
204:51 - example curl and if i want to output the
204:54 - uh the output of this command or the
204:55 - contents of this query i can say i can
204:57 - use the lowercase o and i can then say i
205:00 - specify the directory i want to save it
205:02 - in so home alexis desktop
205:04 - and i'll just uh sorry that is desk that
205:07 - is desktop and i'll just call it uh
205:09 - hsploit
205:12 - dot html and after that i'll type in
205:14 - hsflight.com
205:16 - right over here that is the url now it's
205:18 - very important to specify
205:20 - uh the protocol that you're using so for
205:22 - example if a website is http you won't
205:24 - need to specify to get it if it is using
205:27 - the https protocol it is very important
205:29 - but i'll get into redirection in a
205:31 - second so
205:33 - https.com and we hit enter and it's
205:35 - going to give you this little status
205:37 - right over here essentially giving you
205:39 - an update as to what is the current
205:41 - status of the entire process here now
205:43 - for some reason it's taking quite a
205:44 - while now
205:45 - but we'll wait for it to complete and
205:47 - there we are so
205:48 - let me explain a bit of the uh the the
205:51 - structure of this little status menu or
205:54 - table here so for example you have the
205:55 - total amount to be downloaded uh the
205:58 - amount received the average download
206:00 - speed the upload speed the the total
206:03 - time are the time spent and the time
206:05 - left and uh right now if we cat
206:07 - uh the the hs flight dot um well
206:10 - actually if we need to go into our
206:12 - desktop here uh so if we capped
206:14 - hsploit.html here you can see the entire
206:16 - contents now if we open that up here if
206:19 - i open that up with uh with chrome for
206:21 - example let me just open this up where
206:23 - is google chrome
206:24 - um
206:26 - where is google chrome here there we are
206:28 - google chrome if i just open that up
206:30 - here in a web page you can see that
206:31 - pretty much it has all the content of my
206:34 - website so each exploit.com and it's
206:36 - pretty cool that it does save the entire
206:38 - contents of the html file here now of
206:40 - course this is going to um this is going
206:42 - to leave out
206:44 - extra bits of files in regards to the
206:46 - the web page but this is a great way of
206:48 - saving the contents of a query now that
206:50 - could be for any other protocol it not
206:52 - it does not necessarily need to be for
206:54 - the http or the https protocols all
206:57 - right now when we talk about downloading
206:59 - files
207:00 - that is pretty much how it goes for a
207:02 - web page or for a query so let me just
207:05 - remove the hsp.html mind you i could
207:07 - have saved it as a txt file i simply i'm
207:10 - saving it so that i can use it at a
207:12 - later time now you can also use curl to
207:15 - download files from the web which is
207:17 - really really awesome and that's
207:18 - primarily why i have the ubuntu page
207:20 - open here because i want an example to
207:22 - use so for example if i wanted to
207:23 - download the ubuntu iso
207:26 - i go to the download page and i select
207:27 - the air version 18.4
207:29 - 18.04 lts
207:32 - and it's going to start the download so
207:33 - if i just going to show all downloads
207:35 - here and let me just copy the link here
207:37 - the download link so i can go into curl
207:40 - and i can say for example
207:42 - i can give the file name a new name or i
207:44 - can just download it directly so let me
207:46 - explain the two ways of doing it so for
207:48 - example i can say curl
207:50 - i can output the uh i cannot i can say
207:53 - download this file as ubuntu
207:56 - iso
207:57 - dot iso sorry iso and then i i paste in
208:01 - the the download link and what that is
208:03 - going to do is that it's going to
208:04 - download the file and save it as ubuntu
208:07 - iso dot iso now the extension is very
208:09 - important because if you get that wrong
208:11 - it's going to save it as a different
208:12 - file type all right so if i enter you
208:14 - can see it's going to start the download
208:16 - and there we are we can see that the
208:18 - total amount to be downloaded is one uh
208:19 - 194 megabytes which is about 1.9
208:22 - gigabytes and you have the received the
208:24 - download speed the average download
208:26 - speed and the current download speed
208:27 - right over here the time left etc etc
208:30 - now you can see that my internet speed
208:32 - is pretty bad right now but that's
208:33 - primarily because i am updating one of
208:35 - my systems so i do apologize for that so
208:38 - if we check the desktop you can see we
208:39 - have the ubuntu iso over here which does
208:42 - prove that it does work all right now
208:44 - the other way of doing it
208:46 - let me just remove the ubuntu iso.iso
208:48 - file there the other way of doing it is
208:50 - by downloading it with its original file
208:52 - name which is specified on the on the
208:54 - web server so
208:56 - to do that i simply type in curl and i
208:58 - use the capital o and i paste in the
209:00 - download link and hit enter and that is
209:03 - going to download the file with its
209:04 - original download name so you can see
209:06 - ubuntu 18.04.2
209:08 - uh desktop amd 64-bit dot iso or md64
209:13 - dot iso all right so that is
209:15 - pretty much how to download files and
209:17 - now that i've explained that
209:19 - we cannot talk about redirects because
209:20 - redirects are extremely important so
209:23 - if i just get rid of ubuntu here so if a
209:26 - website is redirecting to another url
209:29 - it's very important that you know how to
209:31 - specify this to curl and why is that
209:33 - important so in many cases redirects may
209:36 - be set up and of course that is
209:37 - specified by the http
209:39 - 300 request or the it could be any 300
209:42 - requests mostly theo one or three or
209:44 - three
209:44 - and it's very important that you know
209:47 - how to specify this with call now the hd
209:49 - the http protocol syntax is very
209:51 - important in curl and you can do this by
209:53 - using the l command or the capital l
209:55 - command sorry so for example
209:58 - if my website was uh if the
210:00 - urlhsflight.com
210:02 - was uh so if i say
210:04 - hsplug.com
210:06 - was redirecting to another url to
210:09 - another url and i wanted to specify this
210:11 - to curl i would use the l command now i
210:13 - know that my website is not and a great
210:16 - way of demonstrating this is by using uh
210:18 - the so for example if i say curl
210:21 - http
210:23 - hslight.com
210:26 - right over here and hit enter and we'll
210:28 - give that a few seconds here and i'll
210:30 - explain what's happening in a second so
210:32 - that you can see the importance of
210:33 - specifying uh the l parameter if there
210:36 - is a redirect so you can see i got no
210:38 - result and that's because curl is going
210:40 - to http and that's the importance of
210:43 - protocols with curl you need to specify
210:44 - the correct protocol irregardless of
210:46 - whether or not you're using ftp
210:48 - http https so my website is https now my
210:53 - website by default will redirect however
210:55 - you need to specify that with curl i do
210:57 - apologize for that and let me just clear
210:59 - the notifications here
211:01 - so again i i as i mentioned you need to
211:03 - specify this with girls so i can say
211:05 - curl and i use the l command over here
211:08 - and then i specify http
211:11 - uh and then i say hsplight.com here
211:13 - right over here and hit enter
211:15 - and that will essentially redirect me to
211:17 - the appropriate webpage and
211:19 - as you can see right over here we get
211:21 - the entire contents of the
211:23 - hsp.com website or html file rather so
211:26 - that is how to do essentially how to
211:29 - work around um how to work around
211:31 - redirects
211:32 - all right now another bit of important
211:35 - another important command sorry is the
211:37 - querying response headers so you can
211:39 - also view and analyze the response
211:42 - headers being sent by a particular web
211:43 - server
211:44 - and this can help in web assessment so
211:46 - for example if i wanted to query the
211:48 - response uh the response headers i'm
211:49 - being sent back by the web server i can
211:52 - say curl
211:53 - capital i and i can say
211:55 - https
211:58 - hs plate.com
212:01 - and i can just hit enter and what's
212:03 - going to happen here is it will give it
212:05 - a few seconds this is going to depend on
212:07 - uh varyingly depending on your on your
212:10 - particular web server so you can see it
212:11 - gives us the protocol we have cookies
212:13 - here uh we have the php version so we're
212:16 - getting important information now uh
212:18 - looks like we have some wordpress json
212:21 - files here if i delivered by the cdn or
212:23 - the content delivery network
212:25 - uh let's look at some important cookies
212:28 - here that might give us a bit of
212:29 - information in regards to the website so
212:30 - an important bit of information here and
212:32 - of course i'm using this as an example
212:35 - is the dwqa
212:37 - and this is my question and answer
212:39 - plugin that i use and you can see that
212:41 - it has an anonymous cookie that's being
212:42 - set here and that can give you
212:44 - information as to a bit more of how the
212:46 - web application is working so that is
212:48 - how to query the response that is being
212:50 - sent by the server and of course you can
212:51 - see right over here this is a cloudflare
212:53 - server and we have the cfra which is the
212:56 - cloudflare array
212:57 - that essentially uh uh
212:59 - is telling cloudflare uh what uh it's
213:02 - giving information to cloudflare about
213:04 - the particular client that is accessing
213:06 - the web server all right now that is
213:08 - very interesting however it really gets
213:10 - interesting because girl can also do a
213:12 - really cool thing it can also allow you
213:14 - to view the request headers and the
213:16 - connection details so you can view the
213:17 - tls handshake et cetera et cetera so if
213:20 - i say curl
213:21 - v and i say curl v
213:24 - https
213:25 - and they say exploit.com here and hit
213:27 - enter you can see that we can view the
213:29 - entire tls and shake which is really
213:32 - really unique and awesome so
213:34 - let me just see if i can figure uh which
213:37 - is wait which is right over here so
213:39 - there we are we can see the the initial
213:40 - connection here
213:42 - uh we i'm particularly looking for the
213:44 - tls uncheck and right over here we can
213:46 - see the tls handshake taking place so
213:48 - you can see that it is successful and
213:50 - this is a great way of identifying um
213:53 - problems with the tls uncheck if the
213:54 - certificate has an issue so for example
213:57 - we have the client hello the server
213:58 - hello we then have the encrypted
214:00 - extensions being exchanged the
214:02 - certificate is being exchanged and then
214:04 - verified and then finally the tls
214:06 - uncheck is completed you can see that we
214:08 - have the version tls version 1.3 and the
214:11 - ciphers that are being used or the
214:13 - encryption being used
214:14 - all right so you also have information
214:15 - about these certificates uh expiry date
214:18 - uh when it was actually registered uh
214:20 - the issuer all that good stuff so if you
214:22 - do want to view
214:24 - uh if you do want to view the connection
214:26 - details and a bit of an advanced
214:28 - information or additional information in
214:30 - regards to the connection you can go
214:32 - ahead and use the uh the v command
214:35 - now the last thing that i want to cover
214:37 - in regards to the http and http hts
214:40 - protocols is the fact that you can cross
214:42 - post requests and many people have seen
214:44 - me using this in ctfs particularly when
214:47 - i'm essentially brute forcing um
214:50 - login pages so
214:52 - uh i can give you an example so if i
214:54 - wanted to essentially test credentials
214:56 - on a website and this can really be in
214:58 - any uh i can be using any parameters i
215:01 - could be spoofing various cookies all
215:03 - that good stuff so for example i can say
215:05 - if i wanted to log in to wordpress site
215:08 - and i wanted to essentially test various
215:10 - credentials i can say for example
215:12 - curl
215:13 - data and that is the sorry the data that
215:16 - we're specifying and then in here i
215:17 - would specify log and this is the
215:19 - particular syntax for wordpress and the
215:21 - password would be equal to i can say
215:24 - password here and then i close the uh
215:27 - the uh the quotation marks and then i
215:29 - specify uh the wordpress page here so i
215:31 - can say
215:33 - https and you can say
215:36 - wordpress.com and i can say wordpress
215:39 - login dot php and that is the login page
215:43 - right over here and if i hit enter
215:45 - and i know this you can see that admin
215:47 - is not a valid username or wordpress.com
215:49 - etc you get the response so this is a
215:50 - great way of testing various pieces of
215:52 - data so you can also play around with
215:54 - cookies all that good stuff and in this
215:56 - case we're simply playing around with
215:57 - the login and the password parameters
215:59 - here and we specified our own values
216:02 - now if you do need to to encode the
216:04 - particular parameters you can also use
216:06 - burp suite for that so for example
216:09 - um let's see if i wanted to go um let me
216:12 - just uh turn intercept on here
216:15 - if i just went into hsploy.com here so i
216:18 - just say it it's exploit.com and it's a
216:20 - wordpress login.php
216:24 - sorry.php here and i just hit enter and
216:27 - uh for some reason we're getting stack
216:29 - uh stack
216:30 - we're just getting a stack protect here
216:32 - in any case uh the what i was getting to
216:34 - if you do want to encrypt your url or
216:36 - any other parameters you can use the
216:38 - control plus u key
216:43 - in this video we're going to be looking
216:45 - at how to use the uncomplicated firewall
216:48 - or as it is commonly known as ufw on
216:51 - linux alright so you might be asking
216:53 - what exactly is ufw or what is the
216:56 - uncomplicated firewall if it isn't
216:58 - already self-explanatory well
217:01 - ufw or the uncomplicated firewall acts
217:04 - as an interface to ip tables and is
217:06 - designed to simplify the process of
217:09 - configuring a firewall now you also
217:11 - might be asking well what exactly is
217:13 - iptables well iptables is an extremely
217:16 - flexible firewall utility that was built
217:19 - for linux operating systems now you also
217:21 - might be asking well why aren't we using
217:24 - ip tables why are we using ufw as
217:26 - opposed to ip tables well iptables is a
217:29 - great tool that offers great
217:30 - functionality when it comes down to
217:32 - configuring firewalls however it can be
217:34 - difficult for beginners to learn how to
217:36 - use it properly when configuring a
217:38 - firewall as a result ufw is well suited
217:42 - for beginners and as a result they can
217:44 - use they can learn how to use a firewall
217:46 - or to configure a firewall really really
217:48 - easily and they can learn about rules
217:50 - etc they get the the general idea behind
217:53 - a firewall all right so ufw is a is a
217:57 - great firewall that is designed to be
217:59 - run on hosts or servers uh but it's only
218:02 - doubtful in the extent is in the extent
218:04 - uh it offers in in terms or in regards
218:07 - to functionality what i mean by this it
218:10 - it only goes so far as uh
218:13 - as allowing you to block or allow
218:15 - connections to and from uh to and from
218:17 - the server so incoming and outgoing and
218:19 - you can also block ip addresses ports
218:21 - etc and entire an entire subnet
218:24 - which i'll get into in a second
218:26 - all right
218:28 - so the purpose of this video the purpose
218:30 - of this video is to teach you how to use
218:31 - ufw and all the comments that you need
218:33 - to know to get started and to fully
218:35 - utilize it to its uh due to your
218:38 - advantage really so this will include
218:39 - commands such as allowing and blocking
218:41 - various services by port uh and their
218:44 - source ip addresses and this video
218:46 - should be used as a reference so if this
218:48 - is your first time with ufw you can
218:50 - definitely find something that you
218:51 - haven't you that you didn't know in this
218:53 - video if this is your if you're already
218:55 - an experienced use of ufw hopefully you
218:57 - can find something in this video that
218:59 - you didn't know already alright so
219:01 - without any further ado let's get
219:03 - started
219:04 - so
219:05 - uh installing ufw is very very simple
219:08 - now if you are using an ubuntu server or
219:10 - you're running ubuntu ufw should be
219:12 - pre-installed on it if it isn't getting
219:14 - installed on any other distribution is
219:16 - very very simple use your aptitude
219:18 - package manager so sudo apt-get install
219:22 - ufw i already have mine installed so
219:24 - it'll check for an update if there isn't
219:26 - an update it's not going to update it
219:28 - and it's going to give me the results
219:29 - here all right so once it is installed
219:31 - we are ready to begin
219:33 - now the important bits of using ufw are
219:36 - always knowing its state or its status
219:38 - all right so currently i have ufw
219:41 - disabled it is not running and if i
219:43 - wanted to know that i would simply type
219:45 - in
219:46 - sudo
219:47 - ufw status now it is very important to
219:50 - precede the ufw command with sudo if
219:53 - you're not using a root user in my case
219:55 - i'm using the root user so i don't need
219:58 - to use the sudo command but in any case
220:00 - i will use it so that it becomes a good
220:02 - practice with you and i don't recommend
220:05 - running efw from the root user but this
220:07 - is a simple video for demonstration all
220:10 - right so i'm going to hit enter it's
220:11 - going to tell you the status of the ufw
220:14 - or the uncomplicated firewall is
220:16 - inactive which is great all right now i
220:19 - can also check an additional i can get
220:21 - more information from the status command
220:23 - by typing in verbose which will give me
220:25 - more information in regards to the rules
220:27 - that are currently active now as you
220:29 - guessed it will not display anything
220:31 - because we haven't set any particular
220:33 - rules and the if the firewall is
220:35 - currently not active so nothing really
220:38 - special there and the last status
220:40 - command that is very very popular is to
220:42 - is to show the status the numbered
220:44 - status so that you have an idea of what
220:46 - uh what rules are currently running and
220:48 - their number so that you can terminate
220:50 - or delete them all right so that's what
220:52 - what it's there for now of course these
220:54 - don't make any sense right now because
220:56 - the the current status of the firewall
220:58 - is inactive once we activate it or once
221:01 - it is active we will be able to get a
221:03 - whole lot more information from them all
221:05 - right so i'm going to enter again you'll
221:06 - see it's going to tell you that it is
221:08 - inactive and that is fine
221:10 - all right
221:11 - so let's talk about enabling disabling
221:14 - and resetting ufw so enabling ufw is
221:16 - very simple sudo ufw and enable and that
221:20 - will enable the firewall and it'll give
221:22 - you the little status over here the
221:24 - firewall is active and is enabled on
221:27 - system startup which is excellent so
221:28 - that it is always active and if you are
221:30 - running a server that is huge for you
221:33 - all right so disabling it is very very
221:35 - simple we simply type in
221:37 - disable and we hit enter
221:40 - all right and that will tell you that
221:41 - the firewall is stopped and disabled on
221:43 - on system startup
221:45 - now when i talk about resetting the the
221:47 - ufw or the uncomplicated firewall this
221:50 - is in regards to the rules that you
221:51 - might have set now please do use caution
221:54 - with the reset command the reset command
221:56 - is there to to help you out if you have
221:58 - made a mistake in configuring your
222:00 - firewall now if you already have a
222:01 - working firewall and you only want to
222:03 - delete a particular rule do not use the
222:05 - reset command because that will reset
222:08 - your firewall to the default uh to the
222:10 - default configuration that it came with
222:12 - pre-installed or installed or the the
222:14 - configuration it came with installed all
222:16 - right so if i type in sudo ufw
222:20 - uh ufw reset that will reset it and
222:22 - it'll tell you that which is very good
222:24 - resetting all the rules to the installed
222:26 - defaults proceed with operation
222:29 - y or n for yes or no hit yes to reset it
222:33 - and there you are so there is a small
222:35 - fyi if in case you wanted to know that
222:37 - and you've messed up
222:38 - in this video and you want to reset it
222:40 - there you are
222:41 - all right so what we're going to do is
222:42 - we're going to start off we
222:44 - understanding the default policies uh
222:46 - for the ufw or the uncomplicated
222:49 - firewall
222:50 - all right so
222:52 - uh the default policies uh for ufw are
222:56 - as follows uh now before we do that let
222:59 - me explain something so ufw
223:01 - uh by default will it will deny all
223:04 - incoming connections but will allow all
223:06 - outgoing connections so what is
223:08 - happening here is sudo ufw
223:11 - and you can you can always use this to
223:13 - to restore it to its default policies so
223:16 - sudo ufw
223:18 - default
223:20 - deny
223:21 - incoming
223:23 - all right so that is the default uh that
223:25 - is the default connection for incoming
223:27 - or the default connection status for all
223:29 - incoming connections so by default ufw
223:32 - will deny all incoming connections and
223:34 - it will
223:35 - it will allow
223:37 - all outgoing connections
223:41 - so it will allow all default outgoing
223:43 - connections and of course you can change
223:45 - this to whatever you want if you want
223:47 - incoming connections to be allowed while
223:49 - the firewall is active then you can also
223:51 - do that as well so i can say default
223:53 - allow
223:54 - incoming all right which is not the
223:57 - smartest thing to do if you're running
223:58 - this on a server you want to manage what
224:01 - connections are incoming
224:02 - in case your your server is being
224:04 - attacked but that is a very very
224:05 - different story and hopefully i'll make
224:08 - a video on that later on in configuring
224:10 - a server for security
224:12 - in this case we'll just leave them to
224:14 - its defaults all right which are are
224:16 - going to be set by default you don't
224:17 - need to set them i'm simply explaining
224:19 - to you how to do it and how to change
224:21 - them if you want to change them all
224:22 - right so this gate is great for normal
224:24 - systems uh but when it comes down to
224:27 - servers it becomes a little bit
224:28 - different and you want to be able to
224:30 - manage the incoming connections in
224:33 - regards to services and ports and the ip
224:35 - addresses that are going to be allowed
224:37 - to connect to your computer or your
224:39 - server
224:40 - all right
224:41 - so what i want to do is
224:43 - the first thing i want to do is i'm
224:44 - going to talk to talk about services and
224:46 - ips all right so if i want to allow an
224:49 - incoming ssh connection uh how do i do
224:52 - that well it's very simple so sudo ufw
224:56 - allow ssh all right and this is going to
224:58 - allow all ssh connections it's going to
225:00 - allow in incoming ssh connections all
225:03 - right which is okay if
225:05 - as long as you have a private key and
225:07 - you've properly secured the ssh
225:09 - connection and and the authentication
225:12 - all right so i'm going to hit enter it's
225:13 - going to tell me rule is updated
225:15 - fantastic you can also do this by typing
225:17 - in the port so i can say sudo ufw allow
225:21 - 22 and it's going to update uh the rules
225:24 - accordingly now if i want to if i want
225:26 - to disable you ssh incoming ssh i can
225:29 - say sudo ufw deny
225:32 - ssh all right and i'm going to hit enter
225:34 - it's going to tell me the rule is
225:35 - updated which is which is also very very
225:37 - good and of course you can do that
225:39 - with the port as well but with services
225:42 - these are the particular services the
225:44 - services by the name in which they are
225:46 - sorted so ssh is going to be known as
225:48 - ssh and it knows that ssh uses port 22.
225:52 - all right let's talk about uh working
225:53 - with port 80 or http connections
225:56 - so that is what uh unencrypted web
225:59 - servers use and the connections can be
226:01 - allowed with the following command so
226:03 - you can type in sudo ufw
226:05 - uh allow
226:07 - allow http and we hit enter it's going
226:10 - to update the rules and you can also do
226:12 - it with using uh you can also do it
226:14 - using the port which is port 80 hit
226:16 - enter and there you are in my case i'm
226:18 - going to deny this so i'm going to say
226:20 - deny http hit enter and we're good again
226:23 - all right so what i'm going to do is
226:26 - before we actually continue i'm going to
226:27 - leave some services running so that when
226:29 - i enable the firewall you'll be able to
226:31 - see them when i when i essentially check
226:33 - the status
226:34 - all right so i'm going to say
226:37 - ufw
226:38 - enable or sorry allow
226:41 - allow ssh because i want to allow ssh
226:44 - connections
226:45 - sorry about that my typing is pretty bad
226:47 - right now allow ssh there we are
226:49 - fantastic and we can move on to the next
226:51 - protocols and services
226:53 - now talking about https or port 443 that
226:56 - is again uh what encrypted web servers
226:58 - use and can be allowed with the
226:59 - following command so you can type in
227:01 - sudo
227:03 - allow https and hit enter and that's
227:06 - going to allow https connections again
227:08 - that can be replicated or duplicated
227:10 - with the port 443 in this case i'm just
227:13 - going to deny the connection so i'm just
227:16 - going to https and there we are so the
227:18 - rules are going to be updated
227:19 - successfully for ipv4 and ipv6 as well
227:22 - that is why you have rules updated for
227:24 - both the protocols over here
227:26 - all right now if you want to allow both
227:28 - uh http and https you can do that in
227:32 - you can do it in one command and that is
227:33 - done by typing sudo ufw allow and you
227:37 - can also deny it as well so proto the
227:39 - protocol is going to be tcp
227:42 - proto is tcp you can also change that
227:44 - depending on what protocol you're using
227:45 - so from any
227:47 - from any target or you can also use the
227:50 - ip so from this particular target but
227:53 - i'll get to that in a second so we're
227:54 - going to say from any any computer we
227:56 - are simply going to allow the connection
227:59 - from any
228:00 - to any
228:02 - port
228:03 - uh to any port and we specify the port
228:06 - support 80 and 443 hit enter the rules
228:09 - updated so we can also deny it as well
228:11 - which is what i'm gonna do because i
228:12 - don't want that running so deny and
228:15 - voila all right so that is how to run it
228:17 - in one command and the the key words
228:19 - here are going to be the allow and deny
228:22 - that is the most important bit here all
228:24 - right if you're talking about ftp that
228:26 - is again uftp uh sorry um
228:28 - uh ufw nor am i talking ufw
228:32 - uh ufw allow ftp or port 21
228:36 - and that can also be denoted by port 21
228:39 - tcp hit enter and it's going to uh
228:42 - because it already exists we can then
228:44 - say deny
228:46 - and you need to specify with ftp that
228:48 - we're using it in tcp so deny rules
228:51 - updated successfully and that is how to
228:53 - configure or enable and disable ftp
228:55 - connections
228:56 - all right now let's move on to ip
228:58 - addresses now before we actually move on
229:01 - to ip addresses four services this is
229:03 - all done through the port and also
229:05 - through the name so if you're running
229:06 - pop3 a pop3 mail server you can also do
229:09 - it as well if you're running mysql i can
229:11 - say ufw
229:12 - allow
229:14 - 3306 that is a mysql a database and i'm
229:17 - just going to deny it or i'll leave that
229:19 - running so that we can also check the
229:20 - status i don't have a mysql server
229:23 - running on this computer but that's how
229:25 - you one would do it so uh in most cases
229:27 - you want to deny connections to your ad
229:30 - to your
229:31 - to your mysql database so in this case
229:33 - i'm going to say 3306 deny any
229:35 - connections to that particular port and
229:37 - of course i can specify the eyepiece
229:39 - with my previous command that i showed
229:41 - you right over here so i can say ufw
229:43 - deny protocol tcp
229:45 - from any to uh
229:47 - from any to any port and then specify
229:49 - 3306 here hit enter the rules are going
229:52 - to be updated so we can deny all
229:54 - connections to our sql database which is
229:57 - hugely important that's why you have
229:59 - open databases running and available to
230:01 - be accessed publicly on show then they
230:04 - can simply be exposed so this is one of
230:05 - the things you must do on your firewall
230:08 - all right so getting back to ip
230:10 - addresses again it's very very simple so
230:12 - if i want to allow incoming connections
230:13 - from a particular ip address i can
230:15 - simply type in ufw
230:17 - allow and i type in uh the ips so allow
230:20 - from
230:22 - 192.168.1.1 which is my gateway or
230:24 - access point iep address which is
230:26 - important because if i don't allow
230:27 - incoming connections from it
230:30 - i essentially won't be able to to get
230:32 - any internet access so i'm going to hit
230:33 - allow which is important
230:37 - and and that's very very important as i
230:39 - mentioned when your firewall is active
230:41 - because if you want to allow incoming
230:42 - connections you need to specify what ip
230:44 - or what ip subnet they may belonging to
230:47 - so uh what an example i can give you
230:50 - here is if you want to specify a
230:51 - particular port uh for a particular ip
230:54 - address for example i i only want the ip
230:58 - address
230:59 - 192.168.1.103 to access ssh i can type
231:02 - in the following so i say sudo ufw
231:06 - allow from 192.168.1.103
231:10 - to any port
231:12 - to any port 22. so this will only allow
231:15 - uh this particular ip address to access
231:18 - the as this the ssh service i'm going to
231:20 - enter it's going to say rules are
231:22 - updated now if you're wondering what uh
231:24 - the ip address 192.168.1.103
231:27 - is my windows operating system and i
231:30 - usually connect to my cali operating
231:31 - system to it remotely via uh via putty
231:35 - all right so that is a good rule to have
231:38 - uh when talking about subnets it's very
231:39 - very simple again so sudo ufw uh allow
231:44 - from and we specify the subnet range
231:46 - here 182.968.1.1
231:49 - uh and 24 but i don't want to do that
231:51 - because i only want particular ip
231:53 - addresses
231:54 - uh to essentially uh to be allowed in
231:57 - regards to incoming connections so i'm
231:58 - gonna i'm not gonna hit enter but that
232:00 - is how to specify a particular subnet
232:03 - you can also disable or deny a
232:05 - particular connections
232:06 - all right so
232:08 - we have already talked about denying uh
232:10 - access and again it is all in regards to
232:13 - what you want to do in regards to the ip
232:15 - so what i can say for example if i
232:17 - wanted to allow a particular subnet
232:19 - to access the mysql database i can say
232:22 - for example
232:24 - sudo
232:25 - ufw
232:26 - allow
232:28 - from
232:29 - 192.68.1.1.1
232:33 - and 24 and to any
232:37 - any port
232:39 - i can say any port
232:41 - 3306 of course that is a very stupid
232:44 - thing to do so i'll just keep it to port
232:46 - 22 with this which is ssh so all of my
232:48 - computers in my subnet should be able to
232:50 - access this computer via the ssh port
232:53 - only i'm going to hit enter and it's
232:55 - going to tell me rule change after
232:56 - normalization because we already had it
232:58 - active so it is changed and updated the
233:01 - rule
233:02 - all right so let's talk about deleting
233:03 - rules because that is essentially as far
233:05 - as it will go in regards to allowing in
233:07 - denying rules to uh incoming and
233:10 - outgoing connections
233:11 - to and from your firewall so we've
233:13 - looked at allowing and denying ports
233:15 - services and ip addresses let's talk
233:17 - about deleting particular rules so now
233:19 - that we've set our rules we can
233:21 - essentially enable the firewall now so
233:23 - i'm going to say sudo
233:25 - sorry about that sudo
233:28 - sudo enable and we type in uh sudo ufw
233:32 - enable sorry about that
233:33 - ufw enable i was getting a bit confused
233:36 - there with ip tables you have w enable
233:38 - and that's going to enable the firewall
233:41 - excellent so now we can check the status
233:43 - all right so the status as i mentioned
233:44 - is very very simple to check uh which by
233:47 - the way is going to include the number
233:48 - status so the default status is sudo ufw
233:53 - status
233:54 - gonna hit enter and it's gonna give you
233:56 - the current status of the firewall all
233:58 - right so
233:59 - tcp
234:00 - is going to be allowed which is port 22
234:02 - which is as it is going to be allowed
234:05 - which is incoming
234:07 - it's going to allow
234:08 - tcp our weight we have port 80 deny
234:11 - allow for for it again so incoming
234:14 - outgoing uh the same goes for what we
234:17 - had set for um
234:20 - the rule set for both
234:22 - uh http and https we had set our ftp
234:25 - rule set here we'd set our mysql
234:28 - database rule set here to deny
234:31 - again we had set it
234:33 - via tcp remember it's very important to
234:35 - specify the protocol
234:37 - uh we then have again we set the rules
234:39 - to now a particular iep address remember
234:42 - from here they were all from anywhere or
234:44 - any particular source
234:45 - so allow all connections coming from
234:48 - my access point uh allow all ssh
234:51 - connections in coming from this
234:53 - particular ip
234:54 - allow any incoming ssh connections from
234:57 - any particular ip in this subnet which i
234:59 - set incorrectly it should have been one
235:01 - not zero that's my primary
235:03 - uh access point that is sitting outside
235:05 - of my office
235:07 - and then we have all the all these
235:09 - settings for uh for the ipv
235:12 - ipv6 protocol so that is how to check
235:14 - the status now you want to display a bit
235:16 - more information we use the verbose
235:17 - command
235:18 - verbose over here and i'll give you a
235:20 - bit more information and this is
235:22 - primarily what i like using
235:24 - so this is the status that i like using
235:27 - the verbose status because it tells you
235:29 - the status is active logging is on on
235:31 - low
235:32 - the default policies are to deny
235:34 - incoming and allow outgoing as i
235:36 - mentioned
235:37 - and now we have for
235:39 - for port 22 under the protocol tcp we
235:42 - want to allow incoming connections we
235:44 - want to allow incoming connections there
235:46 - which we is not clever but anyway we had
235:49 - set it to any computer on this subnet so
235:51 - that makes sense
235:52 - we want to deny incoming http
235:54 - connections we want to allow then
235:56 - incoming http connection and that's
235:58 - because i was actually showing you that
235:59 - we can actually disable it so
236:01 - i can say ufw
236:04 - we can say d9
236:06 - for 80
236:07 - and it's going to update it and we hit
236:09 - enter and there we are so now it's it's
236:11 - where we're simply denying the rules
236:12 - here which is great all right so deny
236:15 - deny for both port 80 which is http uh
236:18 - for https we are also denying and that's
236:21 - simply giving you the the action so
236:23 - we're denying or allowing in connections
236:26 - and the only ones being allowed inside
236:28 - are going to be for the ssh port right
236:31 - over here and right over here which are
236:34 - going to simply be allowing particular
236:36 - ip addresses
236:38 - and the entire subnet and all ip
236:40 - addresses from the connection now you
236:41 - might want to change this if you want to
236:43 - only specify a particular subnet
236:46 - but that's simply how to check the
236:48 - verbose status now if you want to look
236:50 - at the numbered status which is
236:51 - important because you might want to
236:52 - delete a particular rule you do that by
236:55 - typing sudo ufw status numbered
236:57 - [Applause]
236:59 - status numbered
237:01 - like so and we hit enter and that is
237:03 - going to number all of the rules that
237:05 - you had set which is very important if
237:06 - you want to delete a particular rule all
237:08 - right so let's take a look at how to
237:10 - delete a particular rule so if i wanted
237:12 - to delete um
237:14 - i want to delete
237:16 - rule 1 and 2 i can do that so i can type
237:18 - in sudo ufw delete
237:22 - and i simply type in one for example and
237:24 - that is going to ask me do i want to
237:25 - delete this particular rule i'm going to
237:27 - hit yes and then i'm going to i want to
237:29 - delete rule 2 as well and yes and if we
237:32 - check the these these status the verbose
237:35 - status here we can see yes now we are
237:38 - talking now we have uh we we have
237:40 - correctly set up our our firewall here
237:42 - so it's going to allow
237:44 - uh allow in connections we can also get
237:46 - rid of that one as well so we're going
237:48 - to simply display the status here the
237:50 - number status so let's get rid of 1 as
237:52 - well
237:54 - 1 here yes we want to get rid of that
237:57 - and we showed the status once more
238:00 - we can see that yes we are denying all
238:02 - connections all http connections all
238:05 - https connections and we also set this
238:08 - rule which is a duplicate rule of both
238:09 - these two so i'm showing you how to do
238:11 - it really shortly uh we are denying ftp
238:13 - we are denying uh mysql access
238:17 - via tcp and also the the port whether it
238:19 - be on tcp or udp irregardless the only
238:22 - ones we're allowing inside are going to
238:24 - be connections coming from this
238:26 - particular ip which is the access point
238:29 - and this particular ip which is my
238:30 - windows operating system and that is
238:32 - going to be going to be allowed on port
238:33 - 22
238:35 - uh and the entire subnet is going to be
238:37 - allowed on port 22 which is really
238:39 - redundant because i should have just
238:40 - gotten rid of this one right over here
238:42 - but regardless that is how to delete uh
238:45 - the particular rules and if you want to
238:46 - reset it again resetting it is very very
238:48 - simple to take it back to the defaults
238:50 - that if is if you have messed up your
238:53 - rule set and you want to just start over
238:55 - fresh so sudo
238:57 - ufw
238:59 - reset and we hit enter it's going to ask
239:01 - you yes
239:02 - and remember the firewall is still
239:04 - active so if i just check the status
239:06 - it's going to tell us that it is
239:08 - inactive that's because we reset it so
239:10 - uh if we we uh we enable it so ufw
239:14 - enable
239:16 - and uh we'll then check the status right
239:19 - now we have or we don't have any rule
239:21 - set so that is how to use ufw or the
239:24 - uncomplicated firewall to allow incoming
239:26 - and outgoing connections to ports
239:29 - from ip addresses particular ip
239:30 - addresses their services how to delete
239:33 - particular rules and how to monitor the
239:35 - current rules that you have set up so
239:37 - that is pretty much all you need to know
239:38 - in regards to getting started and and
239:40 - fully utilizing ufw you know in in
239:43 - regards to configuring a particular
239:44 - operating system or a server if that's
239:46 - what you're working with so
239:52 - in this video i'll be showing you how to
239:53 - clear your tracks on linux operating
239:55 - systems with a variety of tools all
239:58 - right so why is this important now if
240:00 - you're a penetration tester you probably
240:02 - already know why this is important well
240:04 - covering tracks or clearing your tracks
240:06 - is the final stage of penetration of the
240:08 - penetration testing process so just
240:10 - before you start report writing and that
240:12 - video is on its way by the way so do
240:15 - stay tuned for that so clearing your
240:17 - tracks essentially involves clearing or
240:19 - wiping all the activity of an attacker
240:21 - or you being the attacker that is so as
240:24 - to avoid any detection by incident
240:26 - response teams or forensic teams all
240:29 - right so it is vitally important in the
240:31 - penetration testing life cycle
240:33 - and of course if you look at it from a
240:35 - defensive point of view it can really
240:37 - test incident handlers and the blue team
240:39 - in their ability to discover an attacker
240:42 - in in the system whether they do have an
240:45 - intrusion detection detection system or
240:47 - not and of course from the perspective
240:49 - of the forensics teams it can also test
240:52 - them in uh sort of analyzing their skill
240:54 - and finding what the attack the attacker
240:56 - may have left behind in regards to logs
240:59 - uh files or backdoors that they may have
241:01 - left running any user accounts that they
241:03 - were using etc so this is usually or
241:06 - commonly the biggest mistake vector that
241:08 - an attacker makes all right or that is
241:10 - associated with with attackers and it's
241:12 - something that has been ignored over the
241:14 - years which is really really weird
241:15 - because if you read or pick up any
241:16 - penetration testing book
241:18 - when they essentially explain the
241:20 - penetration testing
241:22 - cycle or the stages of penetration
241:24 - testing uh clearing your tracks is one
241:26 - of them just before you actually write
241:28 - up your report and of course if you're
241:30 - an attacker this is the final stage of
241:33 - uh of your attack and of course leaving
241:34 - some persistence behind but that's
241:36 - another video for another time
241:39 - so
241:39 - it's it's very very sad to see that this
241:41 - is not taken into consideration i'm not
241:43 - talking about this from an attacker's
241:45 - perspective but also from a blue team
241:47 - perspective where uh this is something
241:49 - that is very easy for them because
241:51 - attackers are very very sloppy they they
241:53 - haven't taken it into consideration so
241:56 - it's really good to essentially
241:57 - understand how this is done and how it
241:59 - can be
242:00 - and how it can be analyzed from both
242:02 - perspectives from a red team and a blue
242:04 - team perspective so
242:05 - uh this is usually as i've said the
242:07 - biggest mistake of an attacker and this
242:09 - is where the professional attackers are
242:11 - sorted out from the amateurs so if you
242:13 - take a look at most of the biggest hacks
242:15 - in the world over the last two years
242:17 - most of the the detection has been made
242:19 - really really easily from the malware
242:21 - that they have left behind which they
242:23 - didn't clear they should have cleared
242:24 - but of course they were setting it up
242:26 - for persistence as i said that's a video
242:29 - for another time but again also masking
242:31 - malware or backdoors is also a vital or
242:34 - an important piece of uh of the forensic
242:37 - or well not the forensic the post
242:38 - exploitation
242:40 - all right now when we talk about uh the
242:42 - attacker's perspective uh he or she
242:45 - usually needs to
242:46 - evade detection if there is an intrusion
242:48 - detection system therefore preventing
242:50 - any incident response and then he or she
242:53 - needs to clear the logs or back doors
242:55 - that can be discovered by the forensics
242:57 - team all right so what an attacker is
242:59 - looking to do and should do is first of
243:02 - all clear logs modify registries or
243:05 - clear any of the registries that they
243:07 - did create and lastly remove any files
243:10 - or user accounts that they might have
243:11 - been using all right now as i've said
243:14 - for this particular video we'll be
243:15 - focusing on linux i also want to make an
243:17 - independent video for windows because it
243:19 - is vitally important to understand how
243:21 - to do so on both these operating systems
243:24 - and also probably take a look at mac os
243:27 - as that is also getting quite uh quite
243:29 - popular especially for penetration
243:31 - testers
243:32 - so i'm going to be covering the
243:33 - fundamentals and you can do a lot of
243:35 - your own research i'll be covering the
243:36 - tools that i've personally used before
243:40 - and
243:41 - really uh the last piece that i want to
243:43 - actually tell you is clearing your
243:44 - tracks will also depend on the
243:46 - privileges that you have on the system
243:49 - and whether or not you're remotely
243:50 - attacking the system but for linux it is
243:52 - quite universal
243:54 - all right now i also have a little or a
243:56 - quick tool that i'll be sharing with you
243:57 - at the end of the video that is an a
243:59 - forensics tool or an anti-forensics tool
244:01 - for windows so you can definitely check
244:03 - that out
244:04 - i'll probably make another video of it
244:05 - but for now let's focus on linux all
244:07 - right so let's talk about the linux log
244:10 - files which are the most important
244:11 - aspects
244:12 - uh of uh of persistence or activity that
244:15 - is being logged on the linux operating
244:17 - system or the linux kernel
244:19 - all right so your the log files on any
244:21 - linux system can be found on in the var
244:25 - well actually let me just change
244:26 - directory into that so cd var and it is
244:29 - stored in the log directory right over
244:31 - here so now that i'm in the directory i
244:33 - can list all the files in here
244:35 - and these are all the log files that
244:37 - currently exist and of course if you
244:39 - just read their name they're pretty
244:40 - self-explanatory they have all they they
244:43 - have they're all they all have their
244:45 - various use cases and what data they are
244:48 - essentially logging all right so for
244:50 - example when talking about uh the
244:52 - auth.log file this stores authentication
244:55 - logs uh let's see if
244:57 - let's see if we can find the kernel if
244:59 - we can find yet there we are the
245:00 - kernel.log file which essentially stores
245:03 - all the kernel logs you then have the
245:05 - mail server logs which is of course uh i
245:08 - don't think we have a mail server here
245:09 - but if we did you'd have the mail server
245:12 - logs as well you then have the system
245:14 - bootlog which is your boot your boot log
245:16 - which again we don't have here for some
245:18 - reason
245:20 - we then have um
245:22 - you have your http the httpd log which
245:25 - essentially has logs for your web server
245:27 - if you do have a web server
245:29 - or a web server that being the apache
245:31 - web server so again there are a lot of
245:33 - log files here we're going to be
245:34 - focusing on the auth log right of you
245:37 - which essentially contains the
245:38 - authentication logs and then we'll take
245:40 - a look at the bash history file which is
245:43 - very important as well we'll also take a
245:44 - look at the shred file as well so
245:47 - let's talk about the shred file and the
245:50 - the the auth dot log file
245:52 - all right so if i'm just to open up the
245:54 - auth.log file here this essentially
245:56 - stores all the uh the authentication
245:59 - logs which are very very important for
246:01 - to a forensics team uh to essentially
246:03 - analyze what was happening to the system
246:05 - what activities were carried out etc etc
246:09 - all right so you can go ahead and
246:10 - analyze all all of the files right over
246:13 - here and get an idea of of essentially
246:16 - uh what was going on and of course that
246:18 - is uh
246:19 - that deserves its own video in its own
246:22 - right because that is more of a
246:23 - forensics type of video
246:25 - but for now we're looking to get rid of
246:27 - this because remember if you're an
246:28 - attacker you want to get rid of all of
246:30 - these files so that uh they really
246:32 - cannot build an idea of what was going
246:34 - on on the system all right so let me
246:37 - just exit out of this and as i said the
246:40 - tool that is most recommended for any of
246:42 - this getting erasing files erasing hard
246:45 - drives is shred now if you haven't heard
246:47 - of shred shred is essentially a tool
246:49 - that allows you to delete uh or erase a
246:52 - file permanently so it allows you to
246:54 - delete files data permanently now many
246:57 - of you might be confused with saying wow
246:58 - why can't you just delete it well if you
247:00 - delete a file
247:02 - it can be recovered and i'll explain
247:03 - this in a second so shred allows you to
247:06 - delete files and data permanently and
247:07 - prevents the recovery of that data
247:10 - it does this because it over it
247:12 - overwrites the file multiple times with
247:14 - ones and zeros now when you
247:16 - traditionally delete a file with your
247:19 - graphical user interface or you simply
247:21 - hit the delete a key on your keyboard
247:23 - what's happening here
247:25 - is your file isn't being deleted it is
247:27 - simply marked as a space in which data
247:30 - can be written to or data can be written
247:32 - on top of therefore replacing the
247:34 - previous data and of course this is
247:35 - going to be dependent on how you use the
247:37 - computer and that's why when you you see
247:39 - these real amateurs are doing
247:41 - questionable things on their computer
247:43 - you know doing illegal stuff on the
247:44 - computer
247:46 - just delete the file without even
247:48 - realizing that you aren't deleting it is
247:50 - deleted for you the user but uh in the
247:53 - back end the file still exists it's
247:55 - simply marked that the sector is simply
247:57 - marked as a as a space that should be
248:01 - written onto us and when it's written
248:03 - onto then the files are lost but you can
248:05 - still perform a lot of data recovery
248:07 - that's why you have an industry
248:09 - dedicated to data recovery because of
248:11 - how operating systems are and how they
248:13 - uh they essentially mark spaces or data
248:16 - that you won't delete it there's spaces
248:17 - that can be overwritten all right so
248:19 - that is the difference between keeping
248:21 - files and maintaining uh the fact that
248:23 - they cannot be written to
248:25 - or overwritten that is
248:27 - by other files and and
248:29 - when you actually hit delete so when we
248:32 - talk about a tool like shred shred is a
248:34 - tool that i've used a lot of times
248:36 - before for wiping or erasing hard drives
248:39 - when i'm when i'm done with them when
248:41 - i'm disposing them or when i'm selling
248:42 - drives which is very very rare never
248:45 - sell your drives
248:47 - all right so shred comes pre-installed
248:49 - in kali linux and i'm guessing in pretty
248:50 - much all the other distributions so i'm
248:53 - just going to clear this out and what
248:54 - we're going to do is we're just going to
248:56 - open up shred here with the help command
248:59 - and the shred tool is quite
249:01 - comprehensive and i'll try and explain
249:03 - all the commands
249:04 - all right so the shred command
249:06 - essentially when you when you're writing
249:08 - to a file or a particular drive it uh
249:11 - it essentially overwrites the specified
249:14 - files repeatedly and therefore making it
249:16 - difficult or impossible for uh you know
249:19 - hardware software or software recovery
249:21 - to to get the data back all right so the
249:24 - options or the parameters that you can
249:25 - specify
249:26 - with the shred tool are as follows you
249:28 - have the f the f command which
249:30 - essentially allows you to change
249:32 - permissions to allow writing if needed
249:34 - you have the n command which is the
249:35 - iterations or essentially this allows
249:38 - you to overwrite the amount of times you
249:40 - want which is which is good the default
249:42 - amount of times is three which is okay
249:44 - but if you're really paranoid about you
249:46 - know about your files and you really
249:48 - want to get rid of them you can increase
249:50 - the amount of times all the iterations
249:52 - then have the size uh the size of the
249:54 - number of bytes to shred you then have
249:56 - the u command which is essentially
249:58 - allows you to
249:59 - uh to truncate uh it essentially
250:01 - truncates and remove the files after
250:03 - overwriting you then have the v command
250:05 - over here which shows your progress over
250:07 - both uh shows verbose information about
250:09 - the progress you then have the x command
250:12 - right over here which essentially
250:14 - uh this what this does is again is it's
250:17 - self-explanatory but this does not round
250:19 - the files up to the next full block
250:22 - uh we then have the z command which adds
250:24 - the final overwrite with zeros to hide
250:26 - shredding so it uh usually with uh
250:29 - with software recovery tools they can
250:31 - actually detect if there was shredding
250:33 - done and this prevents that and you have
250:35 - u the u command which essentially
250:37 - removes the file after threading which
250:39 - is what we're going to be taking a look
250:40 - at as well
250:42 - all right so let's take a look at the
250:43 - command that we'll be using and i'll
250:45 - explain what's going on
250:47 - all right so we'll be using the vfzu
250:49 - command which if we just look at the
250:51 - arguments here we are going to be using
250:53 - the v so verbose v
250:55 - f z u so f we're going to force to
250:58 - change the permissions if they exist so
251:00 - if you don't have read and write
251:01 - permissions is going to force it
251:03 - uh so uh there we are so z uh we're
251:06 - going to use the v f z u so then z is
251:09 - going to be essentially add a final
251:10 - override with zeros to hide the
251:12 - shredding process which is good and we
251:14 - are going to remove the file uh after or
251:17 - after the overwriting process all right
251:19 - so that is what is going on here so to
251:21 - do that we simply type in shred
251:24 - and after shred we type in our commands
251:26 - or the combination of commands so
251:28 - vfzu and the file which is auth.log and
251:32 - i'm going to hit enter and there we are
251:34 - all right so shred it's going to start
251:36 - the shredding process right over here
251:37 - and you can see shred uh authored logo
251:40 - was renamed to zero zero zero et cetera
251:42 - renamed renamed renamed all the way to
251:44 - uh to the fact that the file was removed
251:47 - or destroyed all right so that gets rid
251:49 - of the auth.log file which essentially
251:52 - gets rid of the authentication logs very
251:54 - very simple you can take a look at all
251:56 - the other logs and of course you might
251:58 - want to get rid of all the other logs
252:00 - that
252:00 - that might have existed before or in the
252:03 - fact in in regards to the services that
252:05 - you might have used so for example if
252:07 - you used mac changer which is quite rare
252:09 - you might want to get rid of that log
252:11 - file the kernel log file which is right
252:13 - over here so
252:14 - if we open it up
252:16 - kernel.log
252:18 - and there we are these are all the log
252:19 - files in regards to the to the kernel so
252:22 - again this is a file that you might want
252:23 - to get rid of or you can simply edit
252:25 - what you don't want in any of these log
252:27 - files so as to to to sort of throw off
252:31 - the forensic themes or off of your back
252:33 - to essentially make it look really
252:35 - really traditional all right so that is
252:37 - how to clear your log files of course
252:39 - you can use shred for deleting any other
252:42 - file this is a video not it's not
252:43 - designed to be uh to be about shred but
252:46 - there you go you can use shred to erase
252:48 - files uh permanently all right so do be
252:51 - careful with it as well now let's talk
252:53 - about bash history which is a video that
252:55 - most of you guys requested me to to talk
252:58 - about now bash history essentially keeps
253:00 - a record of all the commands that were
253:02 - executed by a user on the linux command
253:05 - line
253:06 - now this is very very important because
253:09 - the uh the bash history is a is a file
253:11 - that is kept uh
253:13 - usually separated for each individual
253:15 - user on the linux system so if you are
253:18 - the root user you have your own bash
253:19 - history file if there was a user called
253:22 - alexis he will also have his own bash
253:24 - history file you get the idea so
253:27 - the directory in which it is stored in
253:29 - is in the home user the user that being
253:32 - the user that you are using
253:34 - and the file is the dot bash history
253:37 - file
253:38 - all right so i'll get to that in a
253:39 - second so if there was a user
253:42 - let me just go back into the root
253:43 - directory and this is where it is stored
253:45 - so if you do have a user it is stored in
253:47 - the
253:48 - home and the username so this is where
253:50 - you put in the username and it is stored
253:52 - under the bash history file right over
253:54 - here
253:55 - all right
253:56 - so that is if you are using a particular
253:59 - use on the system which is quite obvious
254:01 - but if you do have root privileges then
254:03 - it's also important but you essentially
254:04 - want to get rid of all the bash history
254:06 - because this will essentially give
254:08 - forensics teams a list of all of what
254:11 - you did on that system
254:13 - all right so let me actually show you
254:15 - how this can be analyzed so i'm just
254:17 - going to open up nano here and since i'm
254:19 - in the root directory i think i should
254:20 - have the there we are the bash history
254:22 - file
254:24 - uh now i personally have a lot of
254:26 - important information in there so i'm
254:28 - going to simply show you how to get to
254:31 - wipe it all right now wiping it you can
254:33 - also use shred if you want to but i
254:35 - don't recommend doing that because again
254:37 - you're really starting to
254:39 - you're helping the forensic team build
254:42 - uh an idea of what type of attacker
254:44 - they're dealing with so i would
254:45 - recommend keeping things as normal as
254:47 - possible
254:48 - all right so if you you can also use the
254:50 - null redirect to clear the file which is
254:52 - what i'm going to do so you can
254:53 - essentially use the null redirect as
254:55 - follows so
254:56 - bash history
254:58 - and uh as on once i hit enter it will
255:00 - essentially clear the file because i'm
255:02 - using null redirect so it's essentially
255:04 - clearing the entire file so
255:06 - bash history let me open up the file
255:08 - sorry
255:09 - nano
255:10 - uh and um
255:13 - bash
255:14 - history as follows and there we are so
255:15 - it's empty now you might be wondering
255:17 - well it is empty but did it contain
255:19 - anything well if we start using the
255:21 - terminal here which uh am i currently
255:23 - using this so i'm using terminator
255:25 - uh yeah there we are so i was using a
255:27 - material session i was just working on a
255:29 - few hack the box videos which will also
255:31 - be coming out so don't worry about that
255:33 - so if i was to do your sudo apt get
255:36 - update
255:38 - there is a command that i did run and we
255:40 - try and open up the bash history file
255:42 - right over here and we'll let we let
255:44 - that running and that is in my uh
255:47 - terminator session all right so let's
255:48 - open it up one more time and uh for some
255:51 - reason it isn't showing up well we have
255:52 - to wait for the command to execute so
255:54 - uh let me just wait for that to execute
255:56 - so i'll get back to you when this is
255:58 - done
256:00 - alrighty i'm back i've essentially just
256:02 - ran a few commands i was just doing a
256:04 - bit of metasploit work i was using
256:07 - messer venom all that good stuff because
256:09 - i really wanted to show you how much
256:10 - information the bash history file can
256:13 - uh can actually reveal so let me just
256:15 - open it up one more time here
256:17 - and my terminal always lags out when i
256:20 - resume a video which is really weird
256:21 - something to do with my processor let me
256:23 - know if you guys know what's going on
256:25 - here alright so bash
256:28 - bash history like so when we hit enter
256:30 - and there you are so you can see that i
256:32 - was doing uh some very interesting
256:34 - things here
256:35 - so i went to my desktop i created a
256:38 - payload the message venom i copied the
256:42 - uh the payload to my apache directory i
256:45 - restarted apache
256:47 - uh looks like i removed a motility
256:50 - installation i also removed an
256:52 - index.html file
256:54 - uh well i cleared the terminal i'm
256:58 - actually missed i misspelled so yeah
257:00 - this reveals a lot of information about
257:02 - what the attacker was doing or what a
257:04 - particular user was doing on the system
257:06 - so
257:07 - so there you go and it'll also tell you
257:09 - that your attacker has really bad typing
257:12 - skills and really makes a lot of
257:13 - spelling mistakes so yeah you can pretty
257:15 - much get an idea of what exactly is
257:18 - going on here
257:19 - all right so that's pretty much going to
257:21 - be it for this video guys thank you so
257:23 - much for watching
257:24 - if you have any questions or suggestions
257:26 - let me know in the comment section on my
257:28 - social networks on my website and i'll
257:30 - be seeing you in the next video peace
257:32 - guys
257:36 - [Music]
257:47 - hey guys in this video we're going to be
257:49 - taking a look at ssh brute force
257:51 - protection with fail to ban now before
257:53 - we actually get started with setting it
257:55 - up let's get a bit of an understanding
257:57 - as to what this tool is and how we can
257:58 - use it
258:00 - for ssh brute force protection all right
258:02 - so what is fail to ban filter ban is an
258:04 - intrusion prevention framework that's
258:06 - written in python
258:08 - and that protects linux systems and
258:09 - servers from brute force attacks now
258:11 - these are not limited to ssh but the
258:13 - scope of this video is going to be based
258:15 - around ssh as the primary service that
258:18 - is going to be protected uh you know
258:19 - from brute force attacks
258:21 - all right so it allows you to monitor
258:23 - the strength and the frequency of
258:24 - attacks and then from that you can sort
258:26 - of create various jails that you can use
258:29 - and you can sort of customize your the
258:32 - strength of the defense you want to set
258:34 - up based on the attacks you're getting
258:36 - and of course fail to ban can be set up
258:38 - to block ip addresses automatically
258:40 - based on specific parameters more of
258:42 - which i'll explain as we move along all
258:44 - right so the great thing about fail the
258:46 - ban is that it automates the process of
258:48 - protecting your server
258:50 - or your ssh from brute force attacks
258:52 - alright so
258:53 - let's get started all right now that we
258:56 - have an understanding of what fail to
258:57 - ban is and how we can use it to protect
259:00 - our servers you know from brute force
259:02 - attacks on ssh
259:04 - let's take a look at the infrastructure
259:05 - we'll be using in this video
259:07 - so for the purpose of this video i've
259:08 - just set up a quick
259:10 - a quick server here with linux and i'll
259:12 - just copy the ip address it's just a
259:14 - simple ubuntu server and they'll
259:16 - demonstrate how powerful filthban
259:18 - actually is so i'll just open up a
259:20 - terminal here and we can try and log
259:22 - into this server right now i haven't set
259:24 - any any other user account so we'll be
259:26 - logging as the root user
259:27 - and let me just enter the password here
259:30 - and that should log us in immediately so
259:32 - the first thing i want to do is i want
259:34 - to update
259:35 - the packages because we do need to
259:36 - install fail to ban all right so i'm
259:38 - just going to say upgrade update here
259:40 - and we do need to run sudo there because
259:43 - we're already using the root user but in
259:45 - any case
259:46 - let's just update the packages here or
259:48 - the repositories sorry not our packages
259:52 - now filter ban is completely free to use
259:55 - and you know you can install it through
259:56 - most of your popular package managers in
259:58 - our case we're just going to use the
259:59 - aptitude package manager so as a apt-get
260:03 - install and we're going to say fail to
260:05 - pan and we hit enter
260:07 - and that is going to prompt us to
260:09 - download about 18.7 megabytes and we're
260:12 - just gonna let that install
260:13 - uh this shouldn't take uh too much time
260:16 - and we can see we do have a sim link
260:18 - created here that's very important for
260:19 - the filter band service so one of the
260:22 - first things we need to do is we need to
260:23 - ensure that we have enabled fail to ban
260:25 - to run on on system startup so in the
260:27 - event you do reboot your server uh you
260:30 - need to make sure that filter ban you
260:31 - know runs
260:32 - directly on the startup or during the
260:34 - startup so to do this we'll use a
260:36 - systemd so system control and we'll say
260:39 - um enable
260:41 - uh of course we're gonna say fill to ban
260:44 - and the service is actually called fail
260:46 - to ban dot service so we're gonna hit
260:48 - enter
260:48 - and as you can see it's gonna say
260:50 - synchronizing the state of the
260:51 - filterband service with the csv
260:54 - service script uh so irregardless of
260:56 - whether we used systemd
260:59 - so
261:00 - what we can do now is we can start
261:02 - taking a look at the configuration files
261:04 - right now the configuration files
261:07 - for failed ban are going to be found in
261:09 - the etsy uh they're in the etsy
261:11 - directory so we can say um let's just
261:13 - list all the files etsy
261:15 - fail to ban and we hit enter and let's
261:17 - take a look at these configuration files
261:19 - so the most important one that you want
261:21 - you want to be familiar with is are
261:23 - going to be the jail dot conf file and
261:25 - the filterband.com file or the
261:27 - filterband.com file is a file we'll not
261:29 - be taking a look at
261:30 - uh in this video but we're taking a look
261:32 - at the actual jail.configuration file
261:34 - now uh uh if a fairly frequent or common
261:38 - term that you'll be hearing uh you know
261:40 - that will hear being mentioned when
261:41 - talking about fail the ban is the use of
261:43 - jails all right so what is a jail in
261:46 - filter ban well a jail is essentially a
261:48 - configuration file
261:50 - that you know contains filters or
261:52 - arguments that protect your system or a
261:54 - particular service now by default all
261:57 - your jails for particular services are
262:00 - going to be in the jail.conf file
262:02 - alright so if i just get the contents or
262:04 - let's actually view the entire file we
262:06 - can say um
262:08 - let me move into the directory so it's
262:10 - much easier for us to work there
262:12 - so we can say less and we say
262:15 - jail
262:17 - jl.conf and we hit enter uh you can
262:20 - pretty much see that first of all it
262:21 - tells you that uh this is not the uh the
262:24 - appropriate way of actually creating or
262:27 - modifying the already preset jails the
262:29 - reason being is this we should actually
262:31 - create another jail.configuration file
262:34 - uh with the local extension so you can
262:36 - see in most of the cases you should not
262:38 - modify this file but provide
262:39 - customizations in the jail.loc of the
262:42 - gel.local file or you can create
262:45 - separate.con files under the jl.d
262:47 - directory something we're not going to
262:48 - be doing because the gel.local file is
262:50 - pretty much the best way of going about
262:52 - it so what you can do is you can copy
262:54 - this file and you know you can make a
262:55 - copy of it however the second copy is
262:57 - going to be called jail.local
262:59 - in within this uh it has various jails
263:02 - that protect various services now the
263:04 - first one you can see
263:06 - is uh going to be the sshd or the
263:08 - openssh server service and it's going to
263:10 - be enabled so a jail has already become
263:13 - uh has already been configured for this
263:15 - but you can see that there aren't any
263:17 - protection uh configuration options that
263:19 - have been set here
263:21 - so for example the band time the default
263:24 - band time for all jails on all services
263:26 - irregardless of whether it's ssh or ftp
263:28 - has been set to one hour now we can
263:31 - pretty much customize this for uh
263:32 - particular services which is what we
263:34 - want to do so you can use this uh this
263:37 - same configuration file uh and you can
263:39 - copy it you know and use the local
263:41 - extension and this will essentially set
263:43 - up protection for all of those services
263:45 - however in our case i want to
263:47 - i want to actually create a new
263:49 - jail.local file and the only service
263:51 - that i'm going to be protecting or we're
263:52 - going to be configuring is the
263:54 - the the openssh server this sshd service
263:57 - so again all we'll do is we will say um
264:00 - we'll use them here and we'll say
264:02 - jl.local
264:04 - and we're going to hit enter now as you
264:06 - already saw within the gel.configuration
264:09 - file
264:10 - we can essentially
264:12 - we we can start working with these
264:14 - services that we want to protect so
264:16 - again we do this by specifying their
264:18 - name so in our case the openssh server
264:20 - is defined by the ssh daemon here so
264:23 - we're going to say ssh daemon and then
264:25 - after this we're going to start
264:27 - providing the syntax now the first
264:29 - important bit of syntax here is going to
264:31 - be the enabled configuration or the
264:33 - enabled option
264:35 - this essentially you know
264:37 - means whether this essentially controls
264:39 - whether the jail is enabled uh or
264:41 - disabled and the option here we can
264:43 - specify is either true or false right
264:46 - and of course that is self-explanatory
264:49 - enabled means that the uh the jail or
264:52 - the protection will be enabled or this
264:54 - these particular configurations will be
264:56 - enabled so for now let's just keep it at
264:58 - false because i want to show you uh you
265:01 - know a test brute force attack on the
265:02 - server
265:03 - uh before and after so what we'll do is
265:06 - we'll just say false
265:08 - and uh
265:09 - after this we can then get started with
265:11 - our configurations now let me just talk
265:12 - about the various configurations that
265:14 - exist here
265:16 - uh so we pretty much need to specify the
265:18 - service the port and the filter and the
265:21 - log file that we'll be using now let me
265:23 - explain that sounds like a mouthful but
265:24 - it's really very simple to understand
265:27 - all right so the first thing i want to
265:28 - do is i want to say what's the pot the
265:30 - port is going to be the ssh port right
265:33 - so the ssh port here
265:35 - and
265:36 - after this we specify the filter that
265:38 - we're looking for now the filter is
265:40 - something very important right so let me
265:42 - just open up a uh
265:43 - i'll open up a new tab here and we can
265:46 - try and authenticate to this server one
265:48 - more time so i'll just say ssh root and
265:51 - we'll just authenticate to this server
265:53 - and the reason being is i want to show
265:55 - you the log the log file that we're
265:57 - talking about this is the auth.log file
265:59 - now the auth.log file uh pretty much
266:02 - stores all the authentication attempts
266:04 - made to the server whether they they
266:05 - were successful or whether they failed
266:08 - and pretty much you can find this within
266:11 - the let's just get the contents of the
266:13 - file so you can find this within the log
266:15 - directory under etsy and it's called the
266:17 - author log file now when i talk about a
266:19 - filter again a filter is very simple to
266:22 - understand uh we'll just hit enter for
266:24 - some reason we don't have
266:27 - this file we're looking sorry this is in
266:29 - the var directory my apologies i'm just
266:32 - getting confused with the etsy directory
266:33 - there so you can see that this gives you
266:35 - um
266:36 - it gives you a log here of all the
266:38 - authentication attempts
266:40 - and when i was talking about the actual
266:42 - filter so if i say filter
266:44 - this will essentially mean this is
266:47 - essentially where you say fail to ban i
266:49 - want you to look for this particular
266:52 - filter in our case we're looking for the
266:53 - ssh daemon or the sshd service here so
266:56 - you can see
266:57 - that for example if we take a look at
266:59 - the first ssh
267:01 - demon
267:02 - log here we can see that this is the the
267:04 - ssh server listening on port 22 and then
267:07 - if we take a look at some authentication
267:09 - attempts you can see we have an
267:10 - authentication attempt here
267:12 - that tells us accepted password for the
267:14 - root user and the particular ip address
267:17 - here
267:18 - and this was made through ssh not a tty
267:21 - session so if it can also tell you
267:23 - whether the authentication is done
267:25 - locally or remotely so that is the
267:27 - filter we're looking for so we only want
267:29 - to filter for ssh daemon or sshd
267:32 - logs there so we then need to specify
267:35 - the the location of the log file that
267:37 - we're going to be using so say log path
267:39 - is going to be equal to and we specify
267:41 - the relative directory here so we're
267:42 - going to say var
267:44 - log
267:45 - and auth.log here
267:48 - and after this we can just hit enter and
267:50 - we can now talk about the security
267:52 - options right so the security options
267:54 - are very simple the first or the first
267:56 - of with of which is the most important
267:59 - this is the max retry option and this is
268:01 - where you specify the number of attempts
268:03 - to be made before an ip address or a
268:06 - user is banned all right so to do this
268:08 - we say max retry
268:10 - max retry and that's going to be equal
268:12 - to in our case we'll just say three so
268:14 - the number of uh so we say the number of
268:16 - attempts to be made before a band is
268:18 - going to be equal to three so if you
268:20 - enter
268:21 - you know an incorrect password three
268:22 - times that's that you're going to be
268:24 - banned right
268:25 - now we then have the band time right so
268:27 - the band time
268:29 - is again self explanatory this is the
268:31 - number of seconds an ip address will be
268:33 - banned for now typically you can set it
268:35 - to an hour which is uh is primarily
268:38 - going to be uh you know 3600 seconds or
268:41 - you can uh you can specify a day which
268:44 - is a very good option that many system
268:47 - administrators set so again
268:49 - we can just calculate this so 60 times
268:52 - 60 um that pretty much gives us what
268:54 - we're looking for that's 3600 multiplied
268:57 - by 24 hours that's going to be 86 400 so
269:01 - we can say 86
269:04 - 400 and that's typically going to block
269:06 - uh any ip addresses that have incorrect
269:10 - authentications more than three or uh
269:12 - three incorrect authentications for
269:14 - entire day
269:15 - right so what we can do is we'll just
269:17 - set it to 3600 or we can set it to 60
269:20 - seconds whatever you feel is appropriate
269:22 - for your server based on the attacks
269:24 - you've been getting or you can set a
269:25 - generic one if you're monitoring your
269:27 - server and seeing how many attacks
269:29 - you're typically getting which i'll show
269:31 - you how to monitor
269:32 - you can then ignore ip addresses so you
269:35 - can whitelist ip addresses
269:37 - so again that's done by specifying
269:39 - ignore ip and then within this you can
269:42 - then specify any ip addresses that you
269:44 - may want to white if you're a system
269:45 - administrator it may be wise to enter
269:47 - your ip address here
269:49 - um so you can do that and i think
269:52 - we can also specify uh i've specified
269:55 - band time what about find time so the
269:57 - amount of time between failed uh login
270:00 - attempts
270:01 - we can you can just say find time
270:05 - or we can actually leave that out
270:06 - because we really don't need that uh
270:08 - these are these options are pretty
270:10 - pretty good um so we can save
270:13 - this file
270:15 - and we
270:16 - we
270:17 - ensured that this jail was disabled and
270:19 - the reason being is i want to show you
270:22 - what you know typical field
270:23 - authentication looks like
270:25 - so what i'll do is um let me just exit
270:28 - from here and i'll just
270:31 - ssh into this and i'll enter incorrect
270:33 - passwords now typically the the
270:36 - the max amount of times you're allowed
270:37 - to authenticate incorrectly is three
270:39 - times that's the default one but i'll
270:41 - explain something interesting here so
270:43 - for example
270:44 - uh actually before i do this because i
270:46 - do want to block my ip address because
270:48 - it is going to connect to it remotely
270:51 - let's see if we can actually use proxy
270:53 - chains here so let me just open up this
270:55 - in part os and i'll expand this
270:59 - uh or we can actually use anon surf so
271:01 - let me just use anon surf instead of
271:02 - using proxy chain so we'll just start
271:04 - this
271:05 - yes go ahead
271:07 - and the reason being is i don't want to
271:09 - actually expose my real ip address here
271:11 - because when i'll be showing you the ip
271:13 - addresses that were blocked uh this will
271:15 - come into play so what i'll do is i'll
271:17 - just wait for announcers and on surf to
271:19 - start before we authenticate to the
271:21 - server and i'll show you what happens
271:24 - here
271:24 - so remember the jail has is currently
271:26 - disabled and ssh protection is is
271:29 - currently not active with fail to ban
271:31 - all right so we are currently uh
271:34 - anonymized here so what we'll do is
271:35 - we'll say ssh
271:37 - root at
271:38 - and we'll hit enter
271:40 - and we'll say yes we want to accept the
271:42 - fingerprint and we'll enter incorrect
271:44 - password so i can just say password
271:47 - and again that will be incorrect
271:49 - permission denied
271:50 - password will hit enter
271:53 - another incorrect password attempt for
271:56 - authentication attempt hit enter one
271:58 - more time
272:00 - and there we are you can see so it gives
272:02 - you three attempts by default and then
272:04 - after which you're told permission
272:05 - denied let's try this one more time so
272:08 - we're we're sort of exceeding the amount
272:10 - of attempts but remember we haven't
272:11 - enabled the fail to ban jail so we can
272:14 - still try authenticating incorrectly
272:16 - say password
272:19 - and
272:20 - password let's try it a few more times
272:22 - and there we are we can still see that
272:24 - after three unsuccessful attempts
272:27 - uh it uh it it essentially disconnects
272:29 - the the connection what i'll do is we'll
272:32 - just wait for we'll just close this and
272:34 - uh let's restart the service before we
272:36 - actually get started so again uh before
272:38 - after writing any changes to your uh to
272:41 - your jail configuration file
272:43 - uh you essentially need to restart the
272:45 - the filterband service so we say system
272:48 - control
272:49 - sorry system
272:50 - system control and we say restart
272:53 - uh we'll say fill a two band service and
272:57 - we
272:58 - hit enter and that's going to restart it
273:00 - so now that we've tested that this uh
273:02 - that we you know we currently do not
273:04 - have any brute force protection here uh
273:07 - what we can do is we can modify this
273:09 - file and we can say uh set this to true
273:12 - so now we're going to activate the
273:13 - protection so we're gonna say true
273:16 - and we're going to write changes and
273:18 - exit and we'll restart the filter band
273:20 - service and let me just check the status
273:22 - here
273:24 - [Music]
273:27 - sorry that is incorrect
273:29 - we'll just change this to status and we
273:31 - can see it's active and running this is
273:33 - very important because
273:36 - if you do want to actually check if
273:38 - you're having any issues with your
273:39 - syntax or any of the filters you've set
273:42 - up for your particular jail in the jail
273:44 - configuration file
273:46 - this is where you can actually check if
273:47 - there are any issues and you also have
273:49 - the log here so you can see stopped
273:50 - start started and we're ready again so
273:54 - we can now get started and we can test
273:56 - it one more time so what i'll do is i'll
273:58 - use the same ip address here
274:00 - and what we'll do is we'll just say ssh
274:03 - root act
274:04 - and for some reason we're being told the
274:06 - connection was closed by remote host
274:09 - so let's try a different ip here so uh
274:12 - let's see if we can let's check the
274:15 - um
274:16 - the status of of the tor service
274:19 - and we remember we need uh
274:22 - do we have tor running we currently have
274:24 - door running i believe but i think we
274:26 - still need to disable the anon surf here
274:29 - we can just stop it
274:32 - uh so we'll say stop and we'll wait for
274:34 - this to stop
274:36 - and i think we can just use proxy chains
274:38 - now that would be much better
274:40 - uh instead of using anon surf
274:43 - although i should have done that before
274:45 - but i just wanted to explain a point
274:46 - here so
274:48 - all anonymous mode has been stopped and
274:52 - we'll just start store
274:55 - uh actually yeah we can we can do we'll
274:57 - start it and uh now let's use proxy
274:59 - chains i'll say proxy chains
275:02 - ssh um i'll say root at and we'll paste
275:06 - the ip in here
275:08 - all right so it'll ask us for the
275:10 - password and i'll just enter an
275:11 - incorrect password late enter
275:14 - and uh lend an incorrect password again
275:17 - remember we have said we have set the
275:18 - options in the gel configuration file to
275:20 - three so again it will just uh it will
275:22 - block the user for the first three
275:23 - attempts obviously
275:25 - uh we aren't getting a response we can
275:27 - also try brute forcing with hydra
275:30 - which is also another option so let's
275:32 - try this out so we'll say
275:34 - hydra
275:35 - uh l uh we'll say root
275:39 - and the password list is gonna be user
275:42 - uh share
275:44 - and we're gonna say word lists and we'll
275:46 - use some of the meta split word lists
275:48 - here
275:48 - uh let's see which ones we have
275:51 - do we have any ssh ones
275:53 - nothing much
275:57 - we can use the common roots let's try
275:59 - that we can just use any the the bottom
276:01 - line is i just want to show you
276:03 - what this would look like
276:05 - so we're looking for ssh
276:07 - and we specify the ip address here
276:09 - let's get rid of any other sessions that
276:11 - i had and let's have some verbose output
276:14 - and let enter
276:15 - and you can see it tells us that could
276:16 - not connect to
276:18 - to this particular ip
276:20 - connection refused what i'll do is uh we
276:23 - can you can see that after the third
276:25 - failed attempt
276:27 - we can see that we get no response and
276:28 - that actually proves that it's working
276:30 - however i'll i'll actually show you how
276:32 - you can check this so if we just
276:34 - terminate this and we go back in on to
276:37 - our server we can view the logs and the
276:39 - failed authentication attempts and the
276:41 - blocked ips
276:42 - uh by taking a look at the filter ban
276:44 - client here so i can hit enter and then
276:47 - after this we want to display the status
276:49 - right so if i hit status and we hit
276:51 - enter this will give you the number of
276:53 - jails that you have and as you can see
276:54 - we have only one gel and that is the ssh
276:57 - daemon so we want to check the status of
276:59 - the ssh
277:01 - daemon or this is ssh server as the
277:03 - openssh server
277:05 - uh jail and we hit enter all right and
277:08 - you can see that the status for the jail
277:10 - is as follows so the filter is
277:12 - the currently failed is zero the total
277:15 - amount of failed authentication attempts
277:17 - is six
277:18 - uh you then have the file list which is
277:20 - uh the authentication log that is going
277:22 - through uh it's banned three ip
277:24 - addresses so the total amount of band
277:26 - ips is three you have the band ips that
277:29 - i think we used with unknown surf
277:31 - and also with store and my ip address
277:33 - here which for some reason it blocked i
277:35 - think that's because i disabled
277:37 - um i think i disabled announcers and
277:40 - pareto's using my ip in any case
277:43 - so what we can do now is we can go back
277:45 - into parrot and um
277:48 - if we take a look at hydra we can see
277:50 - that we have a few issues here so let's
277:52 - test this one more time by running anal
277:54 - surf
277:55 - again and then we'll try and run hydra
277:57 - with that so that we have a new ip we
277:58 - can work with
278:00 - because it looked through the filter
278:01 - bank line that it did work um
278:04 - so and when i'd run
278:07 - i'd run proxy chains with hydra here
278:10 - uh because actually didn't run proxy
278:12 - chains directly so if i try and do that
278:14 - right now we can actually do it here so
278:16 - we can save proxy chains
278:18 - um
278:20 - we'll wait for this to connect first so
278:21 - we're currently on the announcer tunnel
278:24 - so we can just run it through this so we
278:26 - hit enter
278:27 - there's going to test if possible
278:28 - authentication is supported and you can
278:30 - see it is working and
278:33 - immediately we're getting a few
278:34 - connection errors so
278:36 - it's going to try connecting again but
278:39 - what we can do is um
278:41 - [Music]
278:42 - we can say sudo
278:44 - we'll say
278:46 - proxy chains and we'll run this with
278:49 - hydra right and i'll enter my password
278:51 - here
278:52 - so we can see that it's currently
278:54 - supported
278:56 - and
278:57 - immediately we get uh authentication
278:59 - errors to the server so that's working
279:01 - fine let's take a look at the filter
279:03 - bank client one more time so again i'll
279:06 - just clear that out and we can run the
279:09 - fill to burn client and check the number
279:11 - of failed authentication attempts again
279:14 - and now you can see that again the
279:16 - amount of failed authentication attempts
279:18 - has moved up to 38
279:20 - and the currently the the total amount
279:22 - of band ip addresses are as follows so
279:25 - we have various ones that we had uh that
279:27 - we have uh that we got with anon surf
279:30 - and proxy chains to uh
279:32 - to a certain extent so
279:34 - uh that's pretty much how to view
279:37 - um
279:38 - this is pretty much how to view all the
279:39 - failed authentication attempts and the
279:42 - blocked ips which you can then use to
279:43 - build a geographical model of where most
279:46 - of the attacks are coming from even
279:47 - though they may be coming from a botnet
279:49 - uh so again that's how to use feldeban
279:51 - uh so again if you want to disable a
279:53 - particular jail uh we can just check
279:55 - this out here
279:57 - uh fill the ban and you can then modify
279:59 - the local configuration file so we can
280:02 - use fim and we say jail dot local
280:05 - and we enter so if i'm working with the
280:07 - ssh daemon i can just disable this
280:10 - to false here and that will disable the
280:12 - protection
280:13 - and if i just run and exit and we can
280:16 - try and restart this service so i can
280:18 - say
280:20 - system control
280:23 - we can say restart
280:25 - oops sorry
280:26 - restart let me just reduce the font size
280:28 - here and we'll say fill to ban
280:31 - service and we'll hit enter
280:34 - and there we are
280:35 - all right uh let's take a look at
280:38 - whether we can actually log in now
280:41 - so i'll say exit
280:42 - and this is through my local ip i'm not
280:44 - going to use proxy chains
280:46 - um so i'll say
280:48 - ssh will actually just ssh without proxy
280:50 - change ssh
280:52 - root at this particular ip and you can
280:55 - see it now works perfectly fine so if i
280:57 - hit another
280:58 - uh you know some other incorrect
281:00 - passwords we are now able to
281:03 - at least get authentication attempts
281:05 - across the line uh but yeah that's
281:08 - pretty much all that i wanted to show
281:09 - you guys how to do um you know with
281:11 - failed by how to use fill the band you
281:13 - know to protect to protect your server
281:15 - from uh ssh brute forces uh let me know
281:17 - if you have any questions or suggestions
281:19 - and i'll be seeing you in the next video