00:00 - array iteration
00:02 - i'm going to go through eight methods to
00:04 - iterate through an array
00:06 - to iterate means that you're going
00:07 - through the array and you're doing
00:09 - something with each item of the array
00:12 - some some methods don't necessarily go
00:14 - through each item but we'll get to that
00:15 - most do
00:16 - the first one is for each let me show
00:19 - you an example here
00:21 - so you can see in the example i'm
00:23 - passing in the array one two three four
00:25 - each and for each is pretty
00:27 - straightforward it just does something
00:29 - for each item in the array so we pass in
00:32 - we can pass on the item and we pass in
00:34 - the index of the item in the array and
00:37 - then for each in this example for each
00:38 - item we're just going to console the log
00:40 - and the index so if i run that we can
00:42 - look in the console one zero two one
00:45 - three two that's just the item in the
00:47 - index
00:48 - the next way to iterate is map
00:51 - in map it takes the item that's from the
00:55 - array it does something to it and then
00:57 - puts a new thing back in that same place
01:00 - in the array so if we have this array
01:02 - called three and it just says one two
01:04 - three
01:05 - and now we are going to assign it to
01:08 - doubled three dot map that's how we're
01:11 - gonna iterate and we're going to return
01:14 - the item times two it's just going to
01:16 - double each item so instead of the
01:18 - rating one two three there's gonna be a
01:20 - new thing in place of each item in the
01:22 - array
01:24 - if i run that you can see at the bottom
01:26 - two four six it's all been doubled
01:29 - next up is filter
01:31 - filter is going to take an array and
01:33 - it's gonna check each item in the array
01:35 - it gets again some kind of condition to
01:37 - see if it's true or false if it's true
01:40 - it's going to put the item back in the
01:42 - array if it's false it's not going to
01:43 - put the item in the array
01:46 - and each of these makes a brand new
01:48 - array so we're going to pass in the
01:50 - numbers one two three and filter and the
01:54 - condition is item modulus two equals
01:56 - equals equals zero
01:58 - and for each of these items it's going
02:00 - to check to see
02:02 - if if that's true and this is just a way
02:04 - to find out even numbers so if we run
02:07 - this
02:09 - you can see the bottom of the console
02:10 - here
02:11 - the only item is going to put back
02:14 - into the array or into the returned
02:16 - array is 2. it doesn't actually put it
02:19 - back into the array it's because ins
02:22 - still is one two three but evens is now
02:26 - two
02:28 - reduce and reduce we're going to take an
02:30 - array
02:31 - and we're going to
02:33 - do something and then pass the result to
02:36 - the next iteration
02:38 - along with the next item in the array so
02:40 - that's why we're going to put result and
02:43 - an item in here so
02:45 - the first time it goes to the array it's
02:48 - going to have a result and it's going to
02:50 - send that result to the next item
02:52 - to the next iteration and then add an
02:55 - item the number at the end is what the
02:58 - initial result is going to be
03:00 - if you don't put a number at the end
03:02 - like this the initial result will be
03:04 - the first item in the array so when it
03:07 - goes through this it's the result is
03:09 - going to be zero then we're going to add
03:11 - the first item that's one and then it's
03:13 - going to go through the item the array
03:15 - again and the result is now one and it's
03:17 - going to i add the item two so one plus
03:20 - two is three and this goes gonna go
03:22 - through again there's all this three
03:23 - it's gonna add three and that's gonna be
03:25 - six and before we run that i'm gonna put
03:28 - console.log
03:31 - sum
03:33 - and let's see
03:34 - at the very end we get six
03:37 - next up is sum
03:40 - sum you just check if any item in the
03:43 - array so here's here's all the items in
03:44 - the array he has negative numbers
03:47 - sum means does any item in the entire
03:50 - array meet this condition so if any item
03:54 - in the entire array meets the condition
03:56 - is less than zero
03:58 - it's going to be true
03:59 - if no items meet the condition then it's
04:01 - going to be false
04:03 - so you can see this is true because one
04:06 - of the items in the array is negative
04:09 - the next one is every and this is kind
04:11 - of similar to sum but now
04:14 - every number has to meet the condition
04:16 - so we have the const all positive
04:18 - numbers we pass in one two and three
04:20 - every you know here's the callback
04:21 - function we're going to run this
04:23 - function we're going to pass in each
04:24 - item if each item is more than zero
04:28 - then
04:30 - we're gonna put true
04:33 - but also if we make just one item
04:35 - negative when we run that
04:37 - we're gonna have false so it's either
04:39 - all or nothing with this one okay next
04:42 - one we're going to look at is find
04:45 - find goes through every item in the
04:47 - array and checks it against the
04:49 - condition and if that's true it returns
04:52 - that item so it's searching for a
04:54 - specific item in the in the array if we
04:58 - pass in this array and in this array we
05:00 - have a list of key value pairs id is a
05:02 - id is b ids c
05:05 - objects dot fine we're gonna pass in
05:06 - this function with the item so it's
05:08 - gonna go through each item and check to
05:10 - see if the id equals equals equals b
05:14 - and then if it finds that it's going to
05:17 - return it
05:20 - so it returned the whole thing id b
05:25 - if it doesn't find your item then it
05:26 - will return undefined
05:29 - and the last one is find index
05:31 - find index is pretty much just like find
05:34 - everything in this code is the same
05:35 - except we just add the word index here
05:38 - and instead of find it's find index and
05:40 - then we're consoling find index
05:43 - so instead of returning the actual item
05:46 - it's going to return the index of the
05:48 - item so this is index 0 index 1 and x 2
05:53 - and you can see that we're looking for b
05:56 - and that's index 1. so if i run that and
05:59 - you look at the bottom of the console
06:01 - you will see
06:02 - a 1. if it does not find the index
06:05 - anywhere it will return negative one
06:08 - well thanks for watching and special
06:10 - thanks to jordan harband i use something
06:12 - that he wrote as inspiration for this
06:14 - video and you can see the link to that
06:16 - in the description don't forget to
06:18 - subscribe and remember use your code for
06:20 - good