00:00 - this massive flutter course will take
00:01 - you from being an absolute beginner to
00:03 - being able to release apps on the google
00:06 - play store and the app store bandit is a
00:08 - very experienced software developer and
00:10 - an excellent teacher hello everyone and
00:13 - welcome to this free flota course my
00:15 - name is vandal and i'm a google
00:17 - developer expert for flutter and dart
00:19 - and let's jump and jump right in who's
00:21 - this course for i designed this course
00:23 - mainly for absolute beginners so whoever
00:26 - hasn't even done a written a single line
00:28 - of code before i actually when designing
00:31 - this course i designed it for two
00:32 - specific personas one was a graphic
00:34 - designer who was working mainly with
00:35 - figma
00:36 - actually it doesn't really matter what
00:38 - graphical tool you're using photoshop
00:40 - or figma or whatever or sketch
00:42 - and the other persona was a project
00:44 - manager who's mainly working with jira
00:46 - so um i've made the assumption that you
00:49 - pretty much don't know anything about
00:50 - software development from before and
00:52 - even if you're a software developer you
00:54 - could perhaps jump over the things that
00:56 - you might know but if you haven't done a
00:59 - flutter development from before i
01:00 - strongly suggest that you actually
01:02 - follow the chapters chronologically
01:03 - which is the way i've designed this
01:05 - course basically
01:07 - so um as i mentioned i want when i
01:10 - design this course i want i wanted
01:11 - everybody to just follow the chapters
01:14 - one at a time and one after each other
01:15 - chronologically so um i highly recommend
01:18 - that you don't jump over chapters just
01:20 - because there's so much information
01:22 - provided in each chapter and i will be
01:24 - referring back to information that i
01:26 - provided in previous chapters in each
01:27 - chapter so i think it's very good if you
01:29 - can just follow the course the way i
01:32 - design it to be consumed which is
01:34 - chronologically
01:36 - and what you learn in this course is not
01:38 - only the basics but you'll also go from
01:41 - a complete beginner to being able to
01:43 - release your
01:45 - applications in apple's app store and
01:47 - google's play store and we're going to
01:49 - be using a
01:51 - blend of different tools and software
01:53 - we're going to be using visual studio
01:54 - code we're using firebase for the
01:56 - backend which i'll teach you all about
01:59 - we're using even figma as a graphic
02:01 - designer to create our icons and
02:03 - screenshots and even
02:04 - our
02:06 - loading screens so and there's lots to
02:09 - be learned and i'll take you through
02:11 - those steps and i don't make any
02:12 - assumptions about what you may know from
02:14 - before so i'll explain everything along
02:17 - the way so you'll go from absolute
02:18 - beginner to be able to be able to
02:21 - actually release your two applications
02:23 - which is the same code base in apple's
02:25 - app store and google's play store
02:27 - uh if you if you're attending this
02:29 - course please do follow me on social
02:31 - media and i'll really really appreciate
02:33 - it i'm evan.mp on twitter and also you
02:36 - can find me by my full name on linkedin
02:38 - that'd be much appreciated this course
02:40 - of course uh for free
02:42 - but for those who want to and are able
02:45 - to
02:46 - support me um then you can do that by
02:48 - buying me a cup of coffee on
02:51 - buy me a coffee.com van that so without
02:54 - further ado let's just jump right into
02:57 - it
02:58 - hello everyone and welcome
03:00 - to the first chapter of our flutter
03:03 - course
03:04 - um
03:06 - there are so many different topics that
03:08 - i could choose for the first chapter
03:10 - they're
03:12 - and they're all very important
03:15 - however after going through the material
03:18 - that i've been preparing for you for
03:19 - this course i realized that one of the
03:22 - absolute basic points that we have to go
03:25 - through is the developer accounts
03:28 - um
03:29 - for apple and google now if you're not
03:32 - familiar with the term of developer
03:34 - account there
03:35 - are
03:36 - basically what a developer account
03:37 - allows you to do is to release your
03:39 - applications on um apple's app store and
03:43 - google's play store
03:47 - as i mentioned in the introduction
03:49 - you may choose to follow along this
03:52 - course
03:53 - without actually releasing the
03:56 - application to the app store and the
03:58 - play store
04:00 - but
04:02 - even if you do decide to not release the
04:05 - applications
04:06 - on the aforementioned stores you will
04:08 - still
04:10 - for the optimal experience of
04:12 - development for ios and android you will
04:15 - most definitely need a developer account
04:19 - and
04:20 - the reason behind that is
04:24 - i mean it is quite deep to try to
04:26 - explain the actual reason behind it
04:29 - but
04:31 - from my perspective one of the most
04:32 - important reasons you may want to have a
04:33 - developer account is to create the
04:35 - so-called
04:38 - app ids
04:41 - so every application on ios and every
04:43 - application on android has
04:45 - an identifier which is usually something
04:48 - called a reverse domain identifier and
04:51 - it's kind of like um
04:53 - i still find it strange
04:55 - the way it is but
04:59 - some were somehow it was decided that
05:01 - every application needs to have an
05:03 - identifier and every identifier is kind
05:05 - of like associated with a domain name
05:08 - and a domain name is kind of like a
05:09 - website for instance if you have
05:11 - a
05:12 - yourname.com uh as your website
05:16 - then
05:17 - you would say that okay i'm gonna create
05:20 - an application for ios and android in
05:21 - flutter and i'm gonna call it fubar
05:25 - then
05:26 - it was somehow decided that your
05:28 - applications identifier would then in
05:29 - that case be
05:33 - if you reverse it
05:34 - then it would literally be your domain
05:36 - in reverse which would become
05:39 - dot
05:41 - your name dot
05:43 - your application's name
05:46 - i don't really know
05:47 - i mean if somebody's
05:50 - if somebody knows the reasoning behind
05:52 - it i would be glad to hear that and i'm
05:53 - sure that there's resources out there
05:55 - explaining why that is the case but it
05:57 - kind of feels like it's become
05:59 - the
06:00 - norm
06:01 - and we just have to roll with it
06:04 - so
06:06 - the reason i explained the app
06:08 - identifier
06:09 - is that
06:12 - when you set up your back end later when
06:14 - we set up the back end later together
06:17 - in that the client that we write in
06:20 - flutter is going to talk with our
06:21 - backend and store the notes retrieve the
06:24 - notes create a user
06:26 - uh sign in with a user etc etc
06:30 - that back-end
06:33 - setup also will require you to have your
06:36 - app identifier
06:38 - and
06:41 - even though you don't necessarily need
06:44 - to have a developer account to get an
06:46 - app identifier because an app identifier
06:48 - is just something that you decide
06:50 - okay here's my app identifier i think my
06:52 - website is called this
06:54 - blah blah and even though you don't
06:56 - actually need a website that's the thing
06:57 - but an app identifier is usually
06:59 - associated with a website so don't worry
07:01 - about it
07:02 - you don't have to have a website in
07:04 - order to follow along with these steps
07:05 - that i'm going to name here
07:08 - but it is still good practice to create
07:10 - your developer account in order to
07:12 - officially register
07:15 - your app identifiers
07:18 - and
07:19 - another reason that you will need
07:22 - a developer account for apple and google
07:25 - is that you will
07:27 - for apple
07:28 - um
07:30 - if you want to be able to
07:33 - deploy your application
07:35 - onto a telephone
07:38 - and not use a simulator
07:41 - then you will need to register a
07:42 - developer account and
07:44 - use some resources that apple provides
07:46 - you in forms of certificates and keys
07:49 - and profiles
07:50 - in order to deploy your application to a
07:53 - telephone or an ipad for instance
07:58 - and android the world is a little bit
08:00 - different in that you don't have to do
08:01 - the same process but
08:04 - in order to then submit your application
08:06 - to google for
08:09 - review
08:10 - later so that it can be available for
08:12 - everybody who has an android telephone
08:15 - or a tablet you will still need a
08:17 - developer account so
08:19 - it goes without saying that it is a very
08:20 - important step
08:22 - um
08:24 - that even if you decide
08:26 - not to
08:29 - deploy your application later to app
08:31 - store and play store
08:33 - it's still a very fundamental step so
08:36 - i suggest that you actually go through
08:38 - these steps that i'm gonna provide you
08:40 - in the first chapter
08:42 - and that's why i actually decided to
08:44 - have this as chapter one
08:47 - um
08:48 - sorry i have to just edit my notes a
08:50 - little bit
08:51 - if you haven't watched the introduction
08:53 - to this course and you're just jumping
08:55 - here i suggest that you go to the
08:56 - introduction and watch it i know it was
08:58 - about 34 minutes it was quite a long
09:00 - introduction but there are so many
09:03 - important points that i feel everybody
09:05 - needs to know before you get started
09:07 - with the course so please watch those if
09:09 - you see me moving my head around then
09:11 - you know the reason
09:13 - and i explain a lot of things
09:16 - that are like the fundamentals of this
09:18 - course
09:19 - and the reasoning
09:21 - all those decisions which i believe are
09:23 - so important that i still suggest
09:25 - everybody watched an introduction before
09:27 - they actually start with the course so
09:30 - so
09:32 - we've now talked about
09:34 - the basics
09:37 - um and if you go to
09:39 - why we need a developer account i
09:41 - believe i've already covered this
09:44 - in that a developer account is
09:47 - the utility is an account that you
09:49 - register for apple and google
09:52 - that gives you extra resources as a
09:54 - developer in order to be able to deploy
09:56 - your application and deploy your
09:58 - applications to the respective
10:01 - app stores
10:04 - now
10:06 - if we talk about
10:09 - developer accounts
10:11 - there are two main types of developer
10:13 - accounts one is an individual account
10:16 - and the other one is a company account
10:20 - um
10:22 - and
10:23 - for me the biggest difference between
10:25 - these two different accounts is the
10:27 - liability
10:28 - um and by liability i mean
10:31 - if you
10:33 - if you register an individual account
10:36 - then you as an individual are liable for
10:40 - that application and as users download
10:43 - your application and interact with it if
10:45 - they have any problems any for instance
10:47 - any
10:48 - there's any judiciary problems
10:51 - like if
10:52 - if someone for some reason believes that
10:55 - you're storing their data in the wrong
10:57 - way or that you're storing their
10:59 - personal information without exposing
11:01 - that and telling the users about that
11:03 - then they can personally hold you liable
11:06 - for
11:07 - for for instance breach of information
11:10 - or gdpr
11:12 - infringements or whatever it is so
11:16 - just know that you can register yourself
11:18 - as an individual for
11:20 - both
11:21 - app store apple's app store and google's
11:24 - play store
11:25 - but you need to also be aware that
11:28 - should you wish to do that then you're
11:30 - personally liable for any problems that
11:32 - will
11:32 - that may be
11:33 - [Music]
11:34 - occurring in the future so that's the
11:36 - personal account
11:38 - or an individual account and as a
11:40 - company account then
11:42 - uh
11:43 - you kind of like
11:44 - based on what type of company you've
11:46 - created
11:48 - um
11:49 - you may or may not be personally liable
11:52 - for
11:53 - um
11:55 - any damages that may be caused to your
11:57 - users and if they bring it up to you now
11:59 - i know this is all sounding a lot
12:01 - serious
12:02 - in reality what we are trying to do is
12:05 - not that big a deal but we are still
12:08 - trying to store i mean the goal of this
12:10 - course is to um at this course is to
12:14 - uh
12:16 - go through
12:17 - an application and create an application
12:19 - that can store users notes notes can be
12:22 - quiet personal
12:25 - and you're storing those notes then um
12:28 - on a backhand that you have full access
12:30 - to
12:31 - so you're kind of like storing user
12:33 - created data
12:35 - so it is very important that you
12:36 - actually treat that data correctly make
12:38 - sure that nobody
12:40 - except those who are authorized
12:43 - can access that data so
12:45 - um
12:47 - from a responsibility
12:49 - point of view it is actually
12:52 - a little bit different
12:53 - what kind of
12:54 - company account you want to create if
12:57 - that's what you want to create now
12:58 - because for instance in sweden where i
12:59 - live
13:01 - you can have
13:02 - a personal company account in that or
13:06 - sorry a personal company so you can
13:07 - register a personal company it means
13:09 - that you are personally liable for that
13:12 - company
13:13 - um
13:15 - and you can also create a company that
13:17 - uh
13:18 - it has like uh
13:20 - it's like an umbrella basically sits on
13:22 - top and then there are people who are
13:24 - directors of the company and blah blah
13:26 - so you're not personally liable
13:29 - uh
13:30 - and that is the same structure that you
13:32 - can find in many other countries
13:34 - i believe you asked germany
13:36 - sweden
13:37 - england
13:38 - and many other countries you can set up
13:40 - companies that are
13:42 - either a sole
13:43 - proprietorship or something called
13:46 - english is not my first language but
13:47 - it's something like that or you can
13:49 - create like a limited company that you
13:50 - have limited liability and you're not
13:52 - personally liable so
13:54 - these are the different types of
13:56 - developer accounts that you can set up
13:59 - so
14:01 - we can i mean that point i think we all
14:04 - understand now that you can create an
14:06 - individual or a company account
14:11 - now
14:12 - i think i mean i personally registered
14:14 - already an account
14:18 - as an ios developer and an android app
14:21 - developer so
14:24 - and since i registered a company account
14:26 - i can't go through setting up the exact
14:29 - same company again
14:31 - but at least i can show you some of the
14:34 - steps involved
14:36 - in creating those
14:39 - accounts
14:40 - so what we could do is to um
14:44 - now you can't see the screen right now
14:47 - but i will bring it up here
14:50 - so that you can also see
14:54 - now i'm gonna bring my studio here
14:57 - and i'm going to make this screen a
14:59 - little bit bigger so that you can see my
15:01 - screen better
15:04 - so
15:05 - let me also make this a little bit
15:06 - smaller on top so that you can see
15:10 - the content a little bit better
15:14 - so you can see here that there are two
15:17 - options available to you either you
15:19 - enroll as an individual or you enroll as
15:21 - an organization
15:24 - and it is strongly recommended actually
15:26 - um
15:29 - so you need to make sure that you have
15:31 - two-factor authentication turned on and
15:35 - so that's that's not a problem all this
15:37 - means basically as an individual it
15:39 - means that just you you will need an
15:41 - account you will need to set up an
15:42 - account
15:45 - however if you want to set up as an
15:46 - organization like if you have a limited
15:49 - company and you want to create an apple
15:51 - developer account that is linked to that
15:53 - organization is a little bit different
15:54 - because
15:56 - um
15:57 - you will need to set up something called
15:59 - addons or duns or i don't know how you
16:02 - want to pronounce the uns
16:04 - which is kind of like a
16:07 - it's a new thing for me at least but it
16:10 - is an identifier for your company that
16:12 - you either have been assigned to already
16:15 - um
16:18 - by
16:18 - i think there is a company called dmb
16:22 - um
16:24 - so if we go to let me see if i can bring
16:27 - the notes for that
16:31 - uh let's see
16:33 - learn more if you go to learn more here
16:37 - here
16:38 - dmb
16:41 - is called by done and bradstreet
16:45 - so
16:46 - there then we have uh the ability to
16:49 - register a duns number
16:51 - um
16:53 - for me i was one of the lucky people to
16:55 - have already been assigned a duns number
16:58 - for my company
16:59 - um
17:01 - by dmb
17:02 - because you either have um let's see if
17:05 - if they write it here
17:07 - you see it says dmv may have already
17:09 - assigned your organization a free uh
17:11 - duan's number
17:13 - before enrolling look up your
17:14 - organization to see if you have a duns
17:16 - number so you can just click on the link
17:19 - and we can go here
17:21 - and
17:22 - you can then select your region for me
17:24 - it would be sweden then i would write my
17:26 - company name
17:28 - some address information contact
17:30 - information etc etc
17:32 - and then you can check
17:34 - whether there is a duns number assigned
17:36 - to your company so i suggest that you
17:38 - actually do this by going to this
17:40 - website
17:41 - okay
17:46 - so that's for a duns number if you
17:48 - already have one but if you don't have
17:50 - one then you will have to create
17:52 - and request a duans number from dnb
17:56 - i would show you the website for dmb and
17:58 - the uns number right now but
18:01 - my browser is set up so that my locale
18:04 - is already provided to the browser which
18:06 - is swedish and then if i go to the dmv
18:07 - website you're gonna see everything in
18:09 - swedish
18:10 - and that doesn't make any sense just to
18:12 - read the information in swedish but
18:15 - i believe you can go to dmb's website um
18:19 - so if
18:20 - if i search for a dmb
18:23 - duns or dunes or here so this is a
18:26 - swedish
18:28 - localized website for dmb
18:31 - let's see if it can change the language
18:34 - um
18:37 - actually i can see here that they're
18:39 - very they're actually in sweden
18:44 - and i wonder if we can here change
18:47 - country
18:48 - let's just say
18:52 - international
18:56 - so
18:57 - if we go here
19:00 - let's see if he can um
19:03 - if there's any way to actually request a
19:06 - duns number
19:08 - like if he sir say b-u-n-s
19:12 - um
19:16 - and i can't see anything related to that
19:18 - to be honest with you so if you go back
19:23 - here
19:24 - i can see i can request the duns and
19:27 - here the locale is svse
19:30 - and here the locale was engb
19:33 - so what happens if we just go back to
19:34 - this url that we were on before
19:38 - and then i just change the locale
19:40 - does that work
19:42 - well unfortunately but
19:44 - i mean here the uns number
19:47 - um
19:48 - get a duns number okay that's good
19:52 - and then and you can hear say i'm an
19:54 - apple developer
19:56 - press continue
19:58 - oh it sends you back here
20:01 - um
20:02 - that was really bad
20:06 - so
20:07 - it says look up your organization
20:10 - in apple's website
20:12 - uh
20:14 - and when you
20:15 - when you try to get a uns number
20:18 - it tells you to go to apple's website
20:21 - um
20:25 - if we say that then okay legal business
20:28 - name etc etc okay
20:30 - so you will you will need to go through
20:33 - this process which doesn't seem to be
20:35 - completely easy
20:36 - to get a duns number you see requested
20:39 - the uns number so you probably just want
20:40 - to go to dmb.coms
20:44 - number.html
20:46 - and i i can't explain this complete
20:49 - process to be honest with you because
20:51 - first of all it will be a waste of time
20:53 - for both of us
20:54 - uh because these are so many moving
20:57 - parts and a third-party company that i
21:00 - have no control over so if i even try to
21:02 - explain their process it may change
21:04 - tomorrow so there's
21:06 - it's not a good investment of our time
21:08 - but everybody else has figured it out
21:11 - and i'm pretty sure that if you just go
21:12 - and say request the uns number you can
21:14 - just
21:15 - follow the process and then
21:17 - get your uns number but begin by going
21:21 - through
21:23 - look up your organization
21:25 - so
21:26 - you may already have been assigned a
21:28 - free duns number so
21:31 - do that first please but but if you have
21:34 - to request the uns number i believe
21:36 - there is a little bit of a cost to it
21:38 - and that is about 70 dollars if i'm 70
21:41 - to 80 dollars at the time of recording
21:43 - this video
21:44 - so
21:45 - count with almost about a hundred
21:47 - dollars and
21:49 - hopefully not more
21:51 - uh hopefully actually a lot less about
21:54 - around um
21:56 - 70 dollars at least
21:59 - does that make sense i said so many
22:01 - numbers seventy dollars at least
22:03 - so um
22:05 - try to get your duns number at least
22:07 - that that's what apple says you will
22:09 - need
22:10 - now of course if you want to register
22:13 - as a company i can't stress this enough
22:16 - you will need a website
22:18 - i remember vividly when i registered
22:21 - a developer account at apple
22:24 - and they rejected my request saying that
22:27 - well
22:28 - your website doesn't have any content
22:31 - and they were right because i just
22:33 - created an empty website like a domain i
22:36 - regis i know i didn't actually create an
22:38 - empty website i registered a domain
22:42 - and there was no website so when you
22:44 - typed my website's name it was it would
22:46 - just not show you anything so
22:50 - um and they came back and said no your
22:53 - application is rejected because you
22:54 - don't have a website what kind of
22:55 - company are you
22:57 - so then i had to actually get like a
22:59 - hosting service and i have some content
23:02 - in there have like a support
23:04 - so if you are registering as
23:07 - a website sorry as a company as an
23:10 - organization you will need a hosting
23:12 - service you will need a domain provider
23:15 - uh
23:16 - you will need to ensure that you have a
23:18 - website because they're not the same
23:20 - thing if you have a host
23:22 - and you have a domain provider it still
23:24 - doesn't mean that you have content
23:27 - on your web page but what i realize is
23:30 - that if you
23:32 - register your domain and have hosting
23:34 - service make sure that you have a
23:36 - website just have some
23:38 - content in there say hello we are this
23:40 - business that business
23:42 - um
23:43 - we work with this and this if you have
23:45 - any questions contact this email and
23:47 - here's our phone number here's their
23:48 - address etc so you need to ensure that
23:51 - if you have
23:52 - an organization it is actually an
23:55 - organization it's not just like hi my
23:58 - name is fubar i'm sitting at home
24:01 - contact me if you have any questions not
24:03 - like that
24:04 - so
24:05 - and of course after you made your
24:07 - decision you start the enrollment
24:09 - process so
24:12 - now
24:13 - learn more continue enrollment on the
24:15 - web you can do
24:16 - and then you come here and you will
24:18 - basically need to provide your
24:20 - information
24:21 - and continue with the process now we're
24:23 - not going to go through this but
24:25 - the important thing i have to mention
24:27 - here is that as
24:28 - you
24:29 - go through the enrollment process as a
24:33 - an apple developer unfortunately there
24:36 - is a cost
24:37 - uh last time which is about a few months
24:40 - ago when i registered or i had to renew
24:42 - my registration you have to renew your
24:44 - registration
24:45 - for
24:48 - apple's developer account you have to
24:50 - renew it every year
24:52 - and
24:53 - as i've mentioned here the
24:57 - process is not free unfortunately it
24:59 - costs
25:00 - or
25:01 - last time i registered or renewed my
25:03 - registration it costs 99 and i believe
25:05 - it's been 99 for a very long time so if
25:08 - you're in sweden it costs about a
25:09 - thousand
25:10 - crowns if you're in england it probably
25:12 - costs about 80 pounds or something
25:15 - um and in the us it's about yeah just
25:18 - count with almost a hundred dollars so
25:21 - i used to be able to provide this like
25:23 - you have to have some sort of credit
25:24 - card or debit card to be able to pay for
25:25 - it so
25:27 - um after you've done that after you
25:29 - register your account as an organization
25:31 - you will have direct access then
25:33 - or an immediate access to your developer
25:36 - account and you can start developing
25:38 - applications etc etc etc so
25:42 - if you're following along with this um
25:45 - course and you want to deploy your
25:47 - application to the app store and play
25:49 - store please do this first
25:52 - get your developer account either as an
25:54 - organization or as a
25:57 - as an individual
25:59 - get that process out of the way because
26:02 - a developer account especially if you're
26:03 - an organization as i mentioned here is
26:05 - not a super fast process i mean when you
26:09 - get the account then it's simple it's
26:12 - fast and you're in there immediately but
26:15 - the process itself is a long process so
26:18 - um i remember for me it took about two
26:20 - weeks because i got one rejection took
26:22 - about one week for them to renew like to
26:24 - review the process the documents again
26:27 - so
26:28 - is not a fast process uh unfortunately
26:31 - it's like very
26:34 - it's yeah it's just long long
26:38 - boring process so
26:41 - get that out of the way if you can
26:42 - please
26:43 - um
26:45 - so
26:46 - that's for
26:48 - the
26:49 - long and not free part
26:52 - for ios
26:55 - and
26:56 - also
26:58 - one more thing that i need to mention is
27:00 - that
27:02 - if you're registering and you want to
27:04 - sell applications which is not the
27:06 - purpose of this course but if you want
27:08 - to sell applications then you will have
27:10 - to provide some banking
27:12 - and tax information
27:13 - so they need to ensure that the stuff
27:16 - that you're selling in different
27:17 - countries the money that is
27:19 - then being sent to your bank account
27:21 - will be accounted for when you're paying
27:23 - your taxes
27:24 - so and i believe that if you're trying
27:27 - to sell
27:28 - apps on the app store then you will have
27:31 - to fill in some forms with the u.s tax
27:34 - offices um
27:36 - i don't even remember irs i think
27:39 - internal revenue services or something
27:42 - like the irs i believe that you have to
27:44 - fill some forms like send the forms to
27:46 - them then they will come back with some
27:47 - sort of identifier to you and then you
27:50 - will need to use that identifier
27:52 - on apple's website in order to basically
27:54 - say that yeah yeah i know i'm selling
27:56 - stuff in the u.s i'm selling stuff in
27:58 - japan i'm selling stuff in sweden norway
28:01 - but i'm
28:03 - gonna pay taxes for them here in my
28:06 - country and that's what the form says
28:07 - here
28:09 - here is my name here's my company
28:12 - i'm an organization or i'm an individual
28:15 - so i have no company
28:17 - my
28:18 - personal identification number my
28:19 - country is this
28:21 - um is my address my phone number etc and
28:24 - then you send it to them
28:26 - to irs and then they come back and say
28:28 - okay now we know who you are and here is
28:31 - your um
28:33 - identifier number like a business
28:35 - identifier number bin or something they
28:37 - call it i think i don't remember exactly
28:38 - but i believe depending on whether
28:40 - you're a business or an individual then
28:42 - the number is a little bit different
28:45 - so if you're a business i think it's bin
28:46 - and if you're an individual is in i
28:48 - don't know
28:49 - so
28:50 - um i don't know what that dialogue was
28:52 - some bluetooth devices wants to connect
28:54 - to my computer i don't know what it is
28:56 - so
28:58 - that's that part it can be long and it's
29:01 - not free okay
29:05 - that was a lot of information um
29:09 - that's for ios
29:10 - now uh what we can do now is to talk a
29:13 - little bit about android as well
29:16 - and
29:17 - the good thing about the android process
29:19 - like setting up your account for
29:22 - as a google developer is that it's a lot
29:24 - more straightforward as you would expect
29:26 - from google and given that they're um
29:30 - even like
29:31 - sending updates to an android app to the
29:33 - google developer console is a lot more
29:35 - straightforward than it is for ios i
29:37 - don't want to scare you but it is a fact
29:40 - and you will know that later when we
29:42 - actually get to the end of this course
29:44 - where we release the apps
29:46 - for ios and android that it is a little
29:48 - bit more straightforward for google
29:51 - play store
29:55 - but you still need to sign up for a
29:57 - developer account
29:58 - so
30:00 - um
30:01 - i'm gonna take in my notes uh that i've
30:04 - talked about that
30:05 - so
30:06 - what we also need to know is that there
30:08 - is a url that we can go to
30:11 - i'm going to copy that and paste it over
30:13 - here so you see which one i'm talking
30:14 - about
30:16 - here
30:18 - then you can see that you can set up a
30:21 - developer account and once you've logged
30:24 - in so i'm assuming that you're logged in
30:25 - then you go to play.google.com slash
30:27 - console slash user or you zero sign up
30:31 - is where url it may change
30:34 - so let's just
30:35 - what you can do is just google
30:37 - google play console developer account or
30:40 - google developer account then you will
30:42 - end up in a url that looks kind of like
30:43 - this so
30:45 - so don't count with this url that i
30:46 - mentioned here because it may change
30:48 - that's what i'm saying and
30:51 - you can as it is for ios development you
30:53 - can either set it up personally as an
30:55 - individual or you can set up as an
30:56 - organization now i
30:58 - happen to have set it up for myself as
31:00 - an organization because i do have a
31:01 - company here in sweden so it is a lot
31:04 - easier for me to tie all my business
31:06 - relations with apple and google into one
31:09 - entity which is my developer account for
31:13 - sorry which is my company
31:16 - so
31:17 - it wouldn't make so much sense for me to
31:18 - explain this either to go through all
31:21 - the details but if you want to set it up
31:22 - for yourself as an individual just press
31:24 - on get started or if you want to set it
31:26 - as an organization just press get
31:27 - started there as you can see you can
31:30 - provide information about your
31:32 - organization and you can see here as
31:33 - well as soon as you say i'm an
31:35 - organization then they say okay what's
31:36 - the website
31:37 - so
31:39 - uh you can see if i don't have a website
31:40 - we recommend adding a website that
31:42 - represents your organization well
31:44 - kind of makes sense i mean if you're a
31:45 - company where's your website every
31:47 - company should have a website unless
31:49 - you're like a pizza restaurant or
31:51 - something even a pizza restaurant
31:53 - probably needs a website but we have a
31:55 - pizza restaurant here in our town that
31:56 - doesn't have website so
31:58 - they're on facebook um
32:02 - and you don't you probably don't want to
32:04 - say that your company's website is on
32:05 - facebook so
32:07 - um
32:09 - so yeah
32:10 - where are we here
32:12 - and if you say you're an individual then
32:13 - you come here
32:15 - and they ask for some other stuff
32:18 - but still interesting because
32:20 - it says enter the url of your website or
32:22 - social media profile
32:24 - uh so here you kind of have to need
32:27 - you kind of need to enter that as well
32:29 - so maybe you can get away with a
32:30 - facebook url i laughed about it but
32:33 - maybe you can get away with it i don't
32:34 - know
32:35 - but i don't recommend that to be honest
32:36 - with you because as you will see later
32:38 - in the course when we actually submit
32:41 - our apps to app store and play store
32:43 - there are a few key
32:46 - data points that you have to provide to
32:48 - both stores one is a privacy policy url
32:52 - and the other one
32:54 - is a support url
32:56 - um
32:58 - and there are also two
33:01 - other
33:02 - emails you have to provide
33:04 - so yeah four
33:06 - the emails the first one is
33:09 - the support email and the other one is a
33:11 - contact email and if you're if you're
33:14 - setting up a business account
33:15 - then i really suggest that you actually
33:17 - set up a website because if you set up a
33:19 - website and you have a domain you have
33:21 - an email provider then your email will
33:24 - kind of be like uh
33:27 - foobar at
33:28 - mybusiness.com it's a lot more
33:31 - professional to set up an email that is
33:34 - bound to that it's connected to your
33:36 - email to your domain than it is to say
33:40 - mr johnson gmail.com
33:42 - um
33:43 - i wouldn't trust a business that has a
33:45 - gmail.com
33:47 - account
33:49 - i kind of want to know that yeah here's
33:50 - a serious business that they have their
33:52 - own website and blah blah blah
33:56 - but on the contrary
33:58 - setting up a website setting up some
34:00 - emails doesn't necessarily mean you're
34:02 - serious either so
34:04 - but it makes it more dedicated if you
34:06 - know what i mean so
34:08 - um
34:10 - so yeah
34:12 - that's um
34:14 - the process for setting up an account
34:15 - also for as an android
34:18 - developer i think that's that's about it
34:21 - uh that's all i wanted to mention in
34:23 - this uh first chapter of our course uh
34:28 - i highly recommend that you get your
34:30 - developer accounts for apple and for
34:37 - google
34:39 - what you'll also need to know is that
34:42 - i mean i've talked a lot about now apple
34:44 - account and a google developer account
34:47 - but
34:49 - if you're if you're developing uh your
34:52 - application
34:56 - on a windows machine for instance if
34:57 - you're if you're trying to learn how to
34:59 - develop flutter applications and you
35:00 - don't care about releasing your
35:02 - application at all
35:03 - you don't have to do any of this
35:06 - just follow along with the course as
35:07 - usual no problem
35:09 - but if you're
35:11 - if you want to actually release your
35:12 - application for ios then you
35:15 - most definitely need to also have a mac
35:17 - because you can't build your application
35:19 - otherwise there are some tricks you can
35:21 - do you can like
35:22 - build your
35:23 - photo application then later on like a
35:26 - friend's macintosh if they have one or
35:28 - you can send to a service that's in the
35:30 - cloud and they build the app for you and
35:32 - then they will send it back to you and
35:33 - then you can submit it so
35:36 - or maybe they even have to submit it
35:38 - it's a bit hairy to be honest with you
35:39 - but
35:40 - um
35:41 - it's it's a complicated topic it is a
35:44 - little bit difficult to explain
35:46 - um
35:48 - for instance if you're on a windows
35:49 - machine you can't even have xcode xcode
35:52 - is the tool
35:53 - and the the entire like a chain of
35:58 - tool sets that gets installed on a
35:59 - macintosh in order to build
36:02 - an application for ios platform
36:05 - now why am i talking about this and
36:07 - the reasoning behind that is that if
36:08 - you're developing a flutter application
36:10 - then um
36:13 - flutter
36:14 - can be deployed on a windows machine um
36:17 - macintosh or collectively called as
36:19 - desktop
36:21 - web android ios five platforms at the
36:25 - moment
36:26 - and
36:27 - if you're trying to
36:30 - release your application and build it
36:31 - for ios for instance and test on an
36:34 - iphone or an ipad you can't do that on a
36:38 - windows machine unfortunately that's not
36:41 - there's nothing wrong with a windows
36:42 - machine it's just apple's fault for
36:45 - locking down their build systems and all
36:48 - their tools to macintosh so they haven't
36:51 - made the
36:51 - [Music]
36:52 - conscious decision
36:55 - or
36:55 - yeah they haven't made the decision to
36:59 - bring their tool system and tooling to
37:02 - windows unfortunately or linux
37:05 - swift which is the language to write
37:07 - native applications for ios
37:10 - can be run i believe on linux um on
37:13 - windows might be
37:17 - but its main platform is still
37:19 - mac
37:22 - i know that this is a lot of information
37:25 - also to learn but if there is anything i
37:28 - want to
37:29 - close this chapter the first chapter of
37:31 - this course with is
37:34 - you can learn flutter and follow along
37:36 - with the steps i'm going to provide in
37:38 - this course without having to register
37:40 - any accounts yet so that's
37:43 - point one
37:44 - point two is that
37:47 - you will need a macintosh if you want to
37:50 - release if you want to comfortably build
37:52 - and release your flutter app
37:54 - for ios
37:58 - if you
37:59 - want to release your application on
38:01 - google play store which is point three
38:03 - if you want to do that you will need to
38:05 - register a developer account on google
38:08 - play console
38:09 - as i've shown you here
38:12 - and
38:13 - i believe that's all that's all you need
38:15 - to know so
38:17 - some of you may already have all these
38:18 - accounts and don't have to worry about
38:20 - it
38:21 - but some may not
38:22 - know all this like if you're coming from
38:24 - a design and design background if you
38:26 - all you do is work with figma et cetera
38:29 - and this is somebody for important
38:30 - information that you'll need to know
38:32 - about because i don't want you to get
38:33 - like frustrated during the process
38:36 - so i just want you to have some
38:37 - information so that you can get started
38:39 - at least without without too much hassle
38:43 - all right that's it i think for
38:45 - this
38:46 - chapter i can take in my notes that i've
38:48 - explained everything i want to explain
38:51 - did take about 35 minutes
38:53 - uh
38:54 - it's not unexpected to be honest it's a
38:56 - lot of information
38:58 - and i kind of want to take my time with
38:59 - it it's important that you
39:01 - and for me as well to understand all
39:03 - this
39:05 - so great i think um that's it for this
39:08 - video
39:09 - so i'll see you in the next chapter
39:12 - hi everyone and welcome to the second
39:14 - chapter of our course now if you haven't
39:17 - watched the introduction to this course
39:19 - i really suggest that you do that before
39:22 - continuing with the course because there
39:23 - are so many points that i've explained
39:24 - in that
39:25 - introduction that i believe are so
39:27 - important to understand before
39:29 - continuing with the course so
39:32 - in this chapter what we're going to do
39:34 - is we're going to take care of some
39:35 - setup steps that are required for
39:38 - pretty much the
39:39 - rest of
39:40 - this course and all the other chapters
39:42 - that follow along after this one chapter
39:44 - 3 4 and etc so
39:47 - um we're going to talk about flutter
39:49 - dart dark pad
39:50 - and how to install flutter whether
39:52 - you're on windows mac or
39:55 - linux
39:56 - and we're also going to talk about
40:00 - xcode android studio and we're going to
40:03 - talk about a few very useful
40:06 - extensions to our code editor so
40:09 - if you're coming from a background where
40:11 - you haven't worked with any kind of
40:13 - programming language before
40:14 - um
40:15 - i'm going to take this chapter quite
40:17 - easy so if you're an advanced programmer
40:20 - already you may want to skip this and
40:21 - you already have like flutter install
40:24 - everything you can skip this chapter
40:27 - without a problem
40:29 - so let's start by talking about
40:32 - what flutter is
40:34 - well traditionally developers and
40:36 - programmers or software engineers
40:37 - however you want to call them
40:39 - they've been
40:40 - creating and writing code with their
40:43 - fingers
40:44 - in
40:45 - different languages and then they're
40:47 - targeting different platforms it's very
40:49 - important to understand what a language
40:50 - programming language is um
40:53 - versus a platform
40:55 - think of a platform
40:58 - as
40:59 - the the end station where a software
41:02 - ends up being run run on
41:05 - so let's say windows is a platform mac
41:08 - is a platform linux is a platform and
41:11 - ios that runs on all iphones is a
41:15 - platform android is a platform etc
41:18 - now
41:19 - you would have
41:20 - programming languages
41:22 - that
41:23 - you as a software developer would use in
41:26 - order to target those platforms to write
41:28 - software for those platforms so you use
41:30 - a programming language in order to write
41:33 - a piece of code and be able to run that
41:36 - code on that target platform okay
41:39 - so a programming language example is
41:41 - javascript python swift
41:45 - rust
41:46 - um what else is popular right now java
41:50 - kotlin all these
41:52 - these are
41:53 - programming languages so
41:56 - you as a software developer who's trying
41:58 - to learn flutter would use then dart as
42:01 - your program programming language as i
42:04 - will soon explain
42:05 - so
42:08 - that has been the tradition that a
42:10 - person sits in front of a computer and
42:11 - says okay i want to write a program for
42:13 - windows then they go and write some code
42:15 - maybe with
42:17 - csharp.net or
42:19 - maybe they will just use some other
42:21 - technology i don't know what's out there
42:23 - right now for windows maybe they would
42:25 - use vb.map
42:28 - and
42:29 - then they would be done and they will
42:30 - release the software for windows and be
42:32 - like okay i'm done now
42:34 - then someone comes in the project and
42:36 - says ah we need the same software for uh
42:39 - macintosh or we need the same software
42:41 - for
42:42 - some other uh
42:47 - for instance platform then you would
42:50 - have to go and write the same
42:52 - software
42:53 - uh exact same code pretty much for the
42:56 - other platform
42:58 - so this process would be very repetitive
43:00 - in that you would have to write the same
43:02 - software over and over again so
43:04 - things such as flutter came in in order
43:07 - to remedy that so saying that a software
43:09 - engineer sits at home or sits in the
43:11 - office works with a group of other
43:12 - people and a designer maybe or a few
43:14 - designers ux there is a product owner
43:17 - et cetera and then they would write the
43:19 - same code then
43:22 - which will then be run on different
43:24 - platforms so as a software developer you
43:26 - wouldn't have to maintain different
43:28 - uh
43:30 - very
43:31 - similar pieces of code that only can be
43:33 - run on one specific platform so
43:37 - flutter in its ground basically is a ui
43:40 - framework
43:42 - for running beautiful
43:44 - and writing beautiful applications that
43:46 - run on multiple platforms at the same
43:49 - time
43:50 - developed by google has been in
43:52 - production for a very long time it's uh
43:56 - tried and tested it's open source
43:59 - and if you don't
44:01 - if you don't come from like software
44:02 - engineering background open source
44:04 - basically means that
44:07 - the code that
44:10 - is written
44:11 - for flutter
44:13 - basically the code that makes up plotter
44:15 - is open to the public
44:17 - for
44:18 - uh finding bugs and also for
44:20 - contributing to it or maybe just
44:22 - learning from it so if you're for
44:24 - instance coming from a background of as
44:26 - a designer it's kind of like you have
44:27 - your figma file open to the entire world
44:31 - or your adobe xd source open to the
44:34 - entire world for for them to watch what
44:36 - you're doing as you're designing and
44:38 - also for them to be able to fix stuff in
44:41 - your design if they see it not working
44:44 - as it should
44:45 - so that's open source
44:47 - um
44:48 - so flutter is open source ui framework
44:51 - um developed by google
44:54 - what a framework means i mean if you're
44:56 - not coming from a software engineering
44:57 - background a framework is kind of like a
44:59 - set of tools
45:00 - uh provided to you
45:02 - as a software developer so you can use
45:04 - these tools take a bit of this one take
45:07 - a bit of that one in order to produce an
45:09 - output so
45:11 - flutter it in itself is a software
45:14 - but it's more precisely
45:16 - referred to as a
45:19 - as a framework because of it's a
45:22 - collection of tools so if you hear a
45:24 - framework just know oh there's a
45:26 - collection of things i can use to
45:27 - produce some output now
45:30 - that's what flutter is um but
45:34 - what powers flutter
45:36 - is a programming language language
45:38 - called dart and
45:40 - dart has been in the making for more
45:42 - than eight years is a language that at
45:45 - the moment being maintained by google
45:49 - and also is open source so anybody can
45:51 - contribute to it anybody can learn from
45:53 - it and and find exploits or maybe
45:55 - problems with it and it will get patched
45:57 - by the public or by google themselves
46:00 - so dart is
46:02 - the language the programming language
46:04 - that powers flutter you could say
46:08 - so
46:11 - now you know what flutter is and now you
46:13 - know what dart is
46:17 - and i think in the next step now what we
46:19 - can do is talk about
46:21 - a great piece of
46:24 - web software called dart pad
46:27 - now
46:29 - dark pad as i said is a web
46:31 - software
46:33 - or you could just call it a website
46:35 - that allows you to run or write your
46:38 - dart code
46:40 - maybe pure dart code or
46:43 - code for flutter
46:45 - and run it directly in your browser
46:48 - without you even having to install
46:50 - anything so just open your browser and
46:53 - as you will see soon we go to dark pad
46:55 - and you will see how it looks like so
46:57 - let me just
46:58 - show you a little demonstration here so
47:00 - here i have dart pad open
47:03 - and i can actually increase the size so
47:04 - you can see a little bit better
47:07 - i may have to rearrange some components
47:09 - here on the screen so you can see the
47:10 - screen better
47:12 - so i went to dartpad.dartlang.org
47:16 - and you can see here that there is a
47:18 - program written on the left hand side
47:21 - and i can actually
47:23 - yeah let this
47:25 - what is dark dark pad allows you blah
47:27 - blah text to be there so you can have
47:29 - context of what i'm talking about
47:31 - and you can see that the program is
47:33 - sitting there and you are allowed then
47:36 - to either change the program the way it
47:38 - is
47:39 - or click anywhere here to see
47:41 - documentation down here
47:43 - or press the run button so i'm just
47:45 - going to press the run button and you
47:46 - can see that
47:48 - the text hello got printed to the screen
47:50 - five times plus the
47:53 - number of times it was actually printed
47:55 - it's also printed on the screen so hello
47:57 - one two three four five
47:59 - so what you see on this side is the
48:02 - source code
48:04 - if you remember from open source so this
48:06 - is a source code written in the
48:08 - programming language called dart
48:10 - and this is the output of that program
48:13 - so
48:14 - dark pad allows you to write text
48:17 - here and just execute it and see the
48:19 - results immediately
48:22 - so
48:24 - that's what dart is i mean sorry dark
48:26 - pad is and we're going to talk
48:28 - about dart and dark pad more in the in
48:30 - the course but
48:32 - right now what we should do is to start
48:35 - by installing flutter
48:38 - because
48:40 - uh i mean you could say okay but flutter
48:43 - is just the
48:45 - uh
48:46 - ui framework how about dart well the way
48:50 - flutter is packaged by default is that
48:53 - it includes the dart programming
48:55 - language and its runtime so if the tools
48:57 - required to run any dart code
49:01 - it packages all of that in just one big
49:03 - chunk for you so you don't have to go
49:05 - and install different components like
49:07 - install dart separately in flutter so
49:10 - let's just then improvise and i'm going
49:11 - to say
49:12 - in here
49:14 - let's say install flutter okay
49:18 - then you go to this beautiful website
49:20 - called flutter.dev
49:22 - i'm going to increase the size here so
49:24 - you see
49:27 - so um
49:29 - we go there now
49:31 - and you will see this beautiful website
49:33 - here
49:34 - and what we're gonna do is just to press
49:36 - on get started and remember
49:38 - we press on get started but this
49:41 - website looks like this right now maybe
49:44 - in a few months or maybe in a few years
49:46 - it will change so you'll just have to
49:48 - find out a way to get to
49:50 - the installation part right now it's
49:52 - called get started and i can see it's
49:53 - located as docs.flower dev get started
49:56 - install
49:58 - then pick your platform here i'm on a
50:00 - macintosh but if you're on windows just
50:02 - click on windows and then you get
50:03 - instructions on how to install fodder
50:07 - and then or if you're on linux you can
50:10 - also do the same just get instructions
50:12 - for your
50:13 - platform
50:15 - now i'm going to mac and i'm going to
50:17 - click on mac and then
50:20 - i'm going to
50:21 - look at this information here i'm going
50:23 - to increase the size so it's a little
50:24 - bit easier to read and it says okay
50:27 - download the following installation
50:29 - bundle to get the latest stable release
50:30 - of the flutter sdk
50:33 - sdk means software development
50:35 - development kit i believe so it's just
50:39 - like series of tools for you to use it's
50:42 - just fancy words so
50:45 - then we're gonna do that let's just get
50:47 - flutter mac
50:48 - i'm gonna download it
50:52 - and it may take some time because it is
50:54 - actually quite a chunky
50:55 - uh bit of software as you can see it's
50:58 - almost 1.2 gigabytes
51:01 - so depending on your internet connection
51:03 - it could take
51:04 - yeah anything between a few seconds to a
51:06 - few minutes
51:09 - after you've done that then you will
51:10 - have to unzip that
51:13 - in some folder
51:16 - so
51:17 - what that kind of means is just i can
51:19 - see that my mac is already decompressing
51:21 - this zip file for me so i don't have to
51:24 - do that myself and it's already
51:25 - decompressed in this place so i'm just
51:27 - gonna click on it
51:29 - and i'm gonna show you its content so it
51:32 - kind of looks like this
51:33 - okay
51:36 - now that you have this what you need to
51:38 - do is to ensure that all these files are
51:42 - placed inside
51:45 - a location on your computer
51:47 - which is
51:49 - protected so that you don't accidentally
51:51 - delete it and it's also a good like um
51:54 - you know exactly where it is so
51:56 - by that i mean don't put it on a desk on
51:58 - your desktop and don't put it in like
51:59 - documents or anything it's not a
52:01 - document software
52:03 - what i like to do is usually to have a
52:07 - folder
52:08 - on a macintosh called dev so
52:12 - i will open terminal here as you can see
52:15 - terminal if you're not familiar with it
52:17 - is an application that
52:19 - you can
52:21 - control pretty much the entire system
52:23 - with it
52:24 - if you're on a mac or if you're on linux
52:26 - or any unix based system and if you're
52:29 - on windows you can also do a lot with
52:30 - your terminal
52:32 - so in windows that terminal is called
52:35 - cmd i believe
52:37 - as in command i believe
52:40 - on
52:41 - linux and mac it's called terminal
52:44 - i'm using a a terminal here called i
52:47 - term
52:49 - uh but if you're on vanilla mac os then
52:52 - you would go and open terminal
52:54 - like this which is just looking like
52:56 - that
52:59 - so i'm going to open i-term right now
53:02 - which is my terminal you can open the
53:04 - terminal that you're comfortable with
53:07 - i'm going to increase the size of this
53:11 - i like to place
53:13 - my installations for these pieces of
53:15 - software in my home directory which is
53:17 - denoted by this little funny character
53:19 - slash dev
53:22 - and
53:23 - if i look at the contents of this i can
53:25 - see i have a folder called tooling if i
53:29 - say tooling
53:30 - and look at the contents of it i can see
53:32 - flutter is right there
53:34 - so
53:36 - for me flutter installation you know
53:38 - this folder that got in that got
53:40 - downloaded for me in my downloads folder
53:43 - i would go and copy its contents
53:45 - contents and place it
53:47 - in this folder so if i say cdflutter
53:51 - and then you can see that i'm in my user
53:55 - dev folder tooling flutter so this is
53:57 - where i choose to put flutter now you
54:00 - can choose to put this downloaded folder
54:02 - anywhere else as the documentation tells
54:05 - you
54:06 - in the desired location for example
54:09 - so
54:10 - go ahead and do that pick a location and
54:12 - for me this location works for you it
54:14 - may be if you're on windows it would
54:17 - probably be like c
54:19 - backslash i don't know
54:22 - you could say dev backslash tooling
54:24 - backslash flutter this could be a good
54:26 - location for your tooling hot photo
54:30 - so
54:31 - i'm imagining now that you've done that
54:33 - you've gotten a folder and for me it's
54:34 - this one where you've extracted your
54:37 - flutter installation in
54:39 - now you can see that it says
54:41 - in this
54:43 - third step you will need to expose
54:45 - flutter's binary files to your system
54:49 - and what that basically means is that
54:52 - flutter as an sdk or a toolkit or a
54:55 - framework
54:57 - it has a lot of
55:00 - bits and pieces of software in it and
55:02 - some of these bits are more important in
55:04 - that sense that they're actually
55:06 - executable in that
55:08 - imagine that um
55:10 - on your computer
55:12 - whether in macintosh windows or linux
55:14 - you can have different documents some
55:16 - documents can be text sound documents
55:17 - can be images some documents can be i
55:20 - don't know
55:21 - what else they can be and or a word
55:24 - document for instance okay because i
55:26 - came up with another example
55:28 - or they could be programs a program is
55:31 - something that you can just double click
55:33 - on and a piece of software gets executed
55:35 - and then it will open for instance an
55:36 - example of the program is a microsoft
55:39 - word
55:40 - another example of program is a google
55:43 - chrome web browser
55:45 - another example of program is safari
55:48 - so these are programs and flutter comes
55:51 - also with its own built-in programs that
55:53 - do very specific and important things on
55:55 - your computer
55:57 - related to flutter of course
55:59 - um
56:01 - sorry i have to see my uh
56:04 - recording studio nothing you had to do
56:06 - uh it was just for me so
56:10 - these important programs that are inside
56:12 - the flutter installation which you just
56:14 - downloaded need to be exposed to your
56:16 - entire system
56:17 - so that you can work with flutter
56:20 - with with ease
56:22 - and that means
56:23 - if you're for instance from a design
56:24 - background
56:26 - it will allow you to anywhere in your
56:28 - terminal just write figma and figma app
56:31 - would open
56:32 - and that's the same thing with flutter
56:33 - in this folder you see we're in the
56:36 - flutter folder where you downloaded your
56:39 - installation and install it in this
56:40 - folder there's a folder called bin which
56:43 - means binary
56:45 - in here there are so many things that
56:47 - are important to the entire system to
56:49 - run you see flutter and dart these two i
56:52 - said so many but yeah there's pretty
56:54 - much two
56:56 - so these two binary uh executables need
56:59 - to be exposed to your system
57:02 - and the way to do that on a macintosh is
57:04 - to change your paths as is documented
57:07 - here
57:08 - so the way i like to do that is i go and
57:12 - change my
57:14 - so if i do a vim and look at my zsh rc
57:19 - i can see my paths and you can see it
57:23 - here
57:24 - so you see i've actually put that export
57:27 - command as it is stated here
57:29 - i put it here you see
57:33 - this may be a bit intimidating to be
57:35 - honest with you uh
57:37 - what all it's doing is that you see this
57:40 - file that i've
57:42 - placed here i don't know if i can
57:43 - actually zoom into it and if you can see
57:45 - i don't know how that looked in the
57:47 - actual recording
57:48 - but
57:49 - this is
57:50 - a sort of like a set of instructions to
57:53 - my terminal on this macintosh to tell it
57:57 - where different
57:58 - bits and pieces of
58:00 - binary executables are placed such as
58:02 - flutter
58:03 - dart python etc etc so when i install a
58:07 - piece of software
58:08 - uh in this way you see we just
58:10 - downloaded a package and just put it
58:12 - somewhere on our computer uh macintosh
58:14 - won't know about the stuff that's in it
58:17 - of course it won't so you have to tell
58:19 - it where those things are
58:22 - because otherwise if you don't do this
58:24 - step if you don't do the step three then
58:26 - every time you want to run flutter then
58:28 - you have to specify exactly where that
58:30 - flutter command
58:31 - is so for me it would be in my home
58:33 - folder dev tooling flutter being slash
58:36 - flutter
58:37 - but if you do this then you can anywhere
58:39 - in your terminal just write flutter and
58:41 - your macintosh or linux or
58:44 - windows computer will know where to find
58:46 - it
58:47 - so
58:49 - do that put put these instructions as
58:51 - specified here in your path
58:54 - and after doing that you may need to
58:56 - reload your path using a command
58:59 - on windows and linux called
59:01 - source
59:02 - and the shrc for me
59:05 - depending on which shell you have you
59:07 - may have to
59:10 - put that instruction in somewhere else
59:12 - on windows i believe
59:14 - you will have to modify your um
59:17 - environment variables
59:20 - i remember this from many many years ago
59:22 - let's see if you have to do that
59:26 - update your path you see
59:28 - if you wish to run flutter commands in
59:30 - regular windows console take these steps
59:32 - blah blah from the start search end and
59:34 - select edit environment variables for
59:36 - accounts so
59:37 - what you'll just have to do really is
59:39 - just to follow these steps i mean i'm
59:41 - going through basically giving you some
59:43 - of the basics
59:44 - of these instructions so you can get
59:46 - like a head start but these instructions
59:48 - can also change in the future so don't
59:50 - rely just on what i'm telling you please
59:53 - just go to the installation website here
59:56 - uh here as you see docs flutter dev get
59:59 - started install
60:00 - and try to follow along with the
60:04 - steps provided so
60:07 - after you've done all of this
60:09 - you should be able to be anywhere on
60:12 - your computer
60:13 - and just say flutter doctor
60:16 - now fluffer doctor is a very important
60:18 - command because
60:20 - it looks at your flutter installation
60:22 - and it kind of makes sure that it's in
60:24 - good health as denoted by the word
60:27 - doctor so
60:29 - because fluttering itself is a framework
60:31 - and it depends on many other bits and
60:34 - pieces
60:35 - which your computer may need to have in
60:37 - order for flutter to actually work
60:39 - optimally
60:40 - um
60:42 - flutter doctor will then go through a
60:44 - series of steps to ensure that first
60:46 - flutter is updated and that you for
60:48 - instance have android
60:51 - tool chain that you have xcode installed
60:53 - chrome blah blah
60:55 - so
60:58 - i mean this result at the moment looks
61:00 - quite fine on my computer but if you're
61:02 - running flutter doctor for the first
61:03 - time on your computer you may get a few
61:05 - problems uh some of the problems that
61:08 - you'll experience probably is going to
61:09 - say android
61:11 - sdk couldn't be found xcode couldn't be
61:13 - found
61:14 - because if you're running flutter on a
61:17 - windows machine or linux machine then
61:19 - you can't have xcode xcode is like the
61:22 - software
61:23 - provided by apple
61:25 - and only runs unfortunately on mac os
61:28 - and it's used for
61:31 - compiling
61:32 - or creating
61:35 - mac os ios and ipad os pieces of
61:39 - software so although you can run flutter
61:42 - on your linux and on your
61:45 - windows machine without a problem you
61:47 - won't be able to produce or
61:50 - test your flutter code running on an
61:53 - iphone unfortunately unless you have
61:58 - access to xcode
62:00 - and the easiest way to get access to
62:01 - that is of course to have a macintosh
62:03 - and that's unfortunately because
62:05 - unfortunate because yeah
62:07 - it's uh it's just not available for
62:09 - other platforms
62:12 - so
62:13 - you've run flutter doctor and it's
62:19 - it's basically gonna tell you that okay
62:21 - now i'm gonna assume that you're on a
62:23 - macintosh it's gonna tell you that okay
62:25 - uh xcode for instance uh you need to
62:27 - install xcode and the way to do that is
62:29 - you need to open app store on your
62:31 - computer and just type xcode here
62:35 - and go and install xcode on your
62:37 - computer
62:39 - um
62:40 - so depending on i don't know which
62:42 - version is the latest at the moment but
62:44 - if you're trying to develop flutter
62:46 - applications that and also make sure
62:48 - that they run on your ios phone or the
62:50 - ios simulator
62:52 - then you need to install xcode if you're
62:54 - on a mac sorry if you're on a linux
62:56 - computer or windows you don't have to do
62:58 - this step actually you can't do
62:59 - unfortunately this thing
63:04 - so once you've done that
63:06 - you also need to make sure
63:08 - that
63:10 - you've installed develop developer tools
63:14 - for xcode so let's see how we can do
63:16 - that developer tools xcode
63:20 - command line tools right
63:24 - let's see
63:25 - install
63:26 - from terminal there's a command that you
63:29 - can execute
63:30 - in order to do that and that command
63:32 - actually looks like this
63:36 - here i'll
63:38 - i will zoom into it so you can see
63:40 - better
63:40 - um
63:42 - it says sudo xcode select install
63:45 - so you need to issue that command in
63:47 - your terminal so if i do that and it
63:49 - says what's the password i'll enter my
63:51 - password
63:52 - and it says they're already installed so
63:55 - if you haven't done that please go ahead
63:57 - and execute this command in order to
63:59 - install command line tools for your
64:01 - xcode
64:04 - now the next piece after xcode that you
64:07 - will need is
64:10 - let's see if i can actually bring up
64:13 - so we've talked about flutter doctor
64:15 - that was flutter doctor and we also
64:16 - talked about installing xcode so i'm now
64:18 - bringing that up a little bit late
64:21 - and but now the next step is to install
64:24 - android studio
64:26 - so
64:27 - what android studio is is like the
64:29 - equivalent of xcode but for writing
64:32 - android specific applications now
64:35 - for in order to write flutter
64:37 - applications you don't need android
64:39 - studio per se but you kind of need the
64:42 - sdk manager
64:43 - now
64:45 - both ios and android
64:47 - um
64:49 - for programmers they provide you with
64:51 - something called an sdk just like
64:52 - flutter is an sdk or tool kit
64:55 - ios and android also provide you with
64:57 - sdk in order to write native
64:59 - applications
65:00 - and since flutter utilizes these native
65:04 - capabilities of each platform in order
65:06 - to for instance create an application
65:07 - that's compatible with ios or android
65:11 - it will utilize the native uh components
65:15 - or sorry or the native pieces of
65:17 - software namely called
65:19 - xcode
65:20 - sorry mainly called ios sdk and android
65:23 - sdk
65:25 - so you need to download android studio
65:27 - so you get access to the sdk manager so
65:29 - you can install an android sdk
65:31 - now xcode in itself when you download
65:34 - the latest version of xcode it comes
65:35 - with the latest version of the ios sdk
65:38 - but android studio doesn't do that
65:41 - wait a minute yeah it probably does in
65:42 - the latest versions but we can check
65:44 - that out
65:45 - so if you go to your browser and just
65:46 - say android studio
65:49 - and then you open up
65:51 - developerandroid.com let's just go there
65:54 - and then you can just click on download
65:57 - android studio and then there are
65:59 - download options and you can see there's
66:00 - available for windows mac and linux
66:03 - so
66:05 - then please go ahead and download uh
66:08 - your android studio and i can see the
66:10 - for macintosh is a package so you can
66:13 - install it easily you don't have to
66:14 - unzip anything and for windows is also
66:16 - like an executable so tar gz
66:19 - as well for linux so
66:21 - now let's say that you've done that and
66:24 - now after doing that then you should be
66:26 - able to bring up
66:28 - android studio
66:31 - let's see
66:34 - i'll bring it up here
66:37 - now
66:38 - when you bring up your android studio it
66:40 - will just pretty much be empty here
66:43 - on the screen and you'll get some tips
66:44 - and tricks how to use android studio but
66:46 - the important thing for you here is to
66:49 - be able to install uh
66:52 - the android sdk so if you go then to
66:55 - tools
66:56 - i believe there is an sdk manager right
66:59 - here
67:01 - so just ensure that you have
67:04 - an sdk installed for me i have android
67:06 - 12
67:07 - installed here so ensure that you have
67:09 - one of these sdks ready for you to use
67:13 - by flutter
67:15 - and as soon as you've done that then
67:17 - when you run then your um
67:21 - clutter doctor
67:23 - command
67:25 - and
67:26 - the part about android sdk is going to
67:30 - be
67:30 - ticked here
67:32 - uh sorry the android studio
67:35 - so that's that so we've talked about
67:37 - android tool chain which is the android
67:38 - sdk you can see
67:40 - we've talked about xcode chrome is just
67:42 - a web browser if you want you can have
67:44 - that if you're developing app flutter
67:45 - applications for the web it kind of is
67:48 - necessary
67:49 - um
67:51 - and then this you're probably if you're
67:54 - just getting started with flutter you're
67:55 - not going to have this vs code part
67:57 - ticked because vs code is
67:59 - a a code editor an open source code
68:02 - editor provided by
68:05 - microsoft
68:07 - and it is the code editor that i'm going
68:09 - to use for the entire course for this
68:12 - entire course as we go on and to be
68:14 - honest with you i've tried android
68:15 - studio and i've tried vs code for
68:17 - flutter development and i can highly
68:19 - recommend that you use vs code
68:21 - just for its sheer performance it's for
68:24 - its simplicity
68:26 - extensions and
68:28 - its ability just to really focus on a
68:31 - simple editor without bothering you with
68:33 - lots of bells and whistles so
68:35 - it's a preference though some people use
68:38 - android studio for flutter development
68:39 - and some people use vs code so
68:42 - i don't think
68:43 - one is better than the other it's
68:44 - completely a preference so
68:47 - so that's for android studio and the
68:49 - android sdk so now let's go ahead and
68:52 - install visual studio code which is the
68:55 - tool that i'm going to use for this
68:57 - course so
68:58 - let's bring up a new window and i'm
69:00 - going to say install visual studio code
69:04 - and i'm going to bring the window up
69:05 - here so you see
69:07 - let's go here and
69:09 - and you can download the one that you
69:11 - prefer for your computer i've chosen mac
69:14 - and for me specifically i have a
69:16 - macintosh with an apple silicon so
69:18 - i then choose this one mac with an apple
69:20 - silicon and then it's gonna download
69:21 - that for you automatically so it's just
69:24 - about 200 megabytes i think or actually
69:26 - 100 megabyte only after you've done that
69:28 - just
69:29 - on a macintosh you would go and
69:32 - put that on uh
69:34 - in your applications folder so i'm
69:37 - actually gonna delete that which i
69:39 - downloaded just now because i already
69:41 - have vs code
69:42 - on my system
69:46 - so that's for visual studio code um
69:52 - so let's go ahead now and
69:55 - now that we've done that
69:57 - i'm gonna
69:59 - talk a little about
70:00 - talk a little bit about um some
70:03 - extensions that we're gonna use in
70:04 - visual studio code so let me bring up my
70:07 - terminal
70:08 - and um
70:11 - you know we don't need that let's go and
70:12 - bring up visual studio code um and then
70:17 - i already actually have so many visual
70:19 - studio code windows open
70:21 - uh but i can just say new window so you
70:24 - see how visual studio code looks like
70:27 - and then
70:29 - let's see don't show again okay so this
70:31 - is pretty much how visual studio code
70:33 - looks like so it's a very simple
70:34 - application to begin with
70:36 - um now what we need to do for this
70:38 - example is to enable a few extensions
70:41 - now the first section extension that
70:43 - we're going to enable is called arrow
70:45 - lens and you need to go here on the left
70:48 - hand side find extensions and just type
70:50 - error um if i can type air
70:54 - and just say airlance just like that
70:56 - click on airlands and just press enable
70:59 - or install i believe it's called so
71:02 - error lens allows you to see errors in
71:04 - line without you having to click on a
71:06 - specific line of
71:08 - error basically so
71:10 - it expands the entire error as you're
71:13 - coding you will probably have some
71:15 - errors in your code that error will be
71:16 - then displayed right there in front of
71:18 - your face in its entirety so you don't
71:20 - have to press a little small button to
71:22 - be able to see the complete air
71:24 - so it's a fantastic extension
71:26 - to be honest with you
71:28 - now the other thing that you'll need is
71:31 - something called a bracket pair
71:34 - colorizer and that bracket pair
71:35 - colorizer is something that is already
71:37 - installed in visual studio code
71:41 - it used to be a an extension that you
71:44 - could download but it was so popular
71:46 - that microsoft has added that internally
71:48 - to visual studio code so you don't have
71:50 - to do that manually sorry by installing
71:52 - an extension so
71:56 - now that we've talked about that the
71:58 - next step is to actually install flutter
72:01 - and dart
72:02 - extensions so here just type
72:05 - flutter
72:08 - do that and then just
72:09 - click on the install
72:12 - button i've already installed that so
72:13 - there's a disable button for me here
72:16 - the flutter
72:17 - extension and then you'll also need the
72:19 - dart extension so just type dart and
72:22 - then install that as well
72:25 - so after these two
72:28 - installations
72:31 - we also need to install another
72:34 - great extension called block bloc
72:39 - i'm not going to go into the details of
72:40 - what block is because we will learn
72:42 - about block a lot later in the course
72:45 - but it is just a great
72:47 - extension to have as we go on you're
72:50 - going to learn about it so
72:52 - i can't really explain exactly what it
72:54 - is right now but just install it and i
72:56 - will tell you more about block later in
72:58 - the course i promise
73:01 - so
73:03 - that was basically installing a block
73:07 - now
73:08 - when you start up your visual studio
73:10 - code it probably doesn't look like the
73:11 - way it does for me
73:13 - and that is because i have a custom
73:15 - theme installed on my visual studio code
73:17 - called tokyo night
73:20 - it is a very very mellow dark
73:25 - theme as it's called
73:27 - and scenes in visual studio code can be
73:29 - installed just like you install an
73:31 - extension so if you like my theme you're
73:34 - more than welcome to go in into
73:36 - extensions and then search for tokyo
73:39 - night
73:40 - and just install it
73:42 - so that's
73:44 - it has different theme colors as well
73:46 - this is the one i use tokyo knight
73:48 - actually i use this one tokyo night
73:51 - so if you want that theme please go
73:53 - ahead and
73:55 - install it
73:58 - and now that we've talked about that we
74:00 - come to
74:02 - the last point that i wanted to discuss
74:04 - basically
74:05 - in uh before we wrap up this chapter
74:09 - which is our chapter two so
74:11 - now that we talked about a little bit of
74:13 - setup for setting up your flutter
74:15 - installation and setting up your text
74:16 - editor which in this case is visual
74:19 - studio code
74:20 - in the next chapter which is chapter 3
74:22 - we're going to talk about
74:25 - dart programming so before we actually
74:27 - jump into writing flutter applications
74:29 - we're going to talk about how to write
74:30 - code in uh
74:32 - dart
74:33 - or at least understand like the basics
74:35 - of dart
74:36 - so without further ado let's close up
74:39 - this chapter and i'll see you in the
74:41 - next one
74:42 - hello everyone and welcome to the third
74:44 - chapter of our flutter course
74:47 - in this chapter i thought maybe we could
74:49 - focus a little bit on um actually not a
74:51 - little bit but quite a lot on dart
74:54 - as you know from the previous chapter we
74:56 - know now that dart is the programming
74:58 - language that
75:00 - powers
75:01 - uh flutter
75:02 - so
75:04 - it would be a good idea for us at least
75:06 - to get a little bit of introduction to
75:08 - dart how it works a little bit of its
75:11 - internals
75:12 - different data types functions methods
75:14 - classes and
75:16 - this chapter as well um just like the
75:18 - entire course i'm kind of assuming that
75:19 - you haven't done any programming at all
75:21 - before so i'm going to take things
75:24 - very slowly uh take the concepts one at
75:27 - a time introduce them to you
75:30 - so
75:31 - and i will give you some references to
75:33 - read more about the topics as
75:35 - we won't have really
75:38 - that much of a time in this course to go
75:40 - into detail about everything so
75:44 - um
75:44 - the goal of this chapter is to
75:47 - basically get you started with
75:49 - programming uh
75:51 - dart uh and writing your apps then later
75:54 - for flutter
75:58 - in order to do that we need to have a
76:01 - project
76:04 - set up
76:05 - and by project i mean you need to have
76:06 - some kind of a playground set up so that
76:09 - you can start writing
76:11 - dart code and then you can try it on for
76:13 - instance a telephone or a simulator or
76:16 - what have you
76:18 - now
76:19 - um a lot of people would rather go to
76:21 - dark pad as we saw in the previous
76:23 - chapter and start writing their code in
76:26 - dart pad
76:28 - that's one way of doing it but since in
76:30 - this chap in this pro in this course
76:33 - we're gonna
76:34 - write
76:35 - an application release it for ios on
76:37 - android
76:38 - um it is safe to say that that
76:41 - we can literally start actually creating
76:45 - our real project here and now
76:48 - so that we can then later build upon it
76:50 - rather than writing all our code in dart
76:53 - pad
76:54 - because
76:55 - you can then by doing by writing your
76:58 - code in an actual flutter project you
77:00 - can get used to how we work with
77:03 - flutter as a whole
77:05 - so i think this is a little bit of a
77:06 - time invested into later chapters as
77:09 - well where we're gonna work and continue
77:11 - working on the same project so we have
77:13 - to just set it up once
77:15 - but at the same time
77:18 - there is a little bit of a value in not
77:20 - blending in too much of our
77:24 - test code like what we're doing in this
77:26 - chapter with what we're going to do
77:27 - later
77:29 - in the actual application if you know
77:31 - what i mean so
77:33 - so i think it would be better now for us
77:35 - to set up just a test application
77:37 - and then
77:38 - keep working on it and then later on
77:40 - when we start doing the actual
77:42 - application then we create a separate
77:43 - project for that so
77:46 - now
77:48 - let's then
77:50 - do that together so i'm gonna bring
77:53 - my face down here so you see the entire
77:56 - entire screen
77:58 - i'm then going to create a new terminal
78:01 - window and bring it up here on the
78:03 - screen so you can see it and i'm going
78:04 - to increase the font so it's a little
78:06 - bit easier to spot what i'm typing
78:10 - so let's go to a folder where you try to
78:13 - or where you
78:15 - keep your
78:16 - uh projects for me i go to dev projects
78:20 - and i have a folder there called flutter
78:22 - so i try to put all my
78:25 - flutter projects in here
78:29 - then in order to create a new flutter
78:31 - project
78:33 - what you have to do is to issue the
78:34 - flutter
78:36 - create command
78:37 - and this create command is already
78:39 - shipped inside flutter so if you say
78:41 - which flutter
78:43 - this is going to go and find the actual
78:44 - flatter binary if you remember from the
78:46 - previous chapters where we installed
78:48 - flutter
78:50 - it's going to find the flutter binary
78:52 - and then
78:53 - call the create command on it so if you
78:55 - say flocker create
78:57 - it expects you to kind of like
78:59 - provide it with some sort of a name of a
79:02 - project so let's just say
79:04 - learning guard
79:06 - learning er mean dart
79:10 - so
79:11 - that's the binary that's the command and
79:13 - that is the name of the project okay so
79:16 - uh this is the easiest way to create a
79:19 - new floater flutter project in my
79:20 - opinion at least so let's execute that
79:22 - command
79:27 - it's gonna do its thing
79:29 - and what i'm gonna do then is to as you
79:31 - can see it's created a new
79:33 - folder called learning dart
79:36 - so let's go and i'm going to say
79:38 - cd learning dart
79:41 - and then i'm going to issue a command
79:43 - called code dot and
79:46 - i can actually bring this a little bit
79:48 - to the right so you can and also
79:51 - do like this so you can see what i'm
79:53 - typing
79:55 - as you can see i've written
79:57 - code dot and what code does is that it
80:00 - brings up visual studio code so it's
80:01 - just like a
80:03 - command that you can issue in order to
80:04 - bring a visual studio code and
80:07 - um
80:08 - if if i just bring up visual studio code
80:11 - the way it is right now
80:13 - and for instance you can see it you
80:14 - can't see it right now but it's because
80:16 - i have a separate uh screen here i'll
80:19 - bring up visual studio code as you can
80:21 - see here by hand
80:23 - there is a good extension where there is
80:26 - an ability
80:27 - for visual studio code to install this
80:30 - code
80:32 - shortcut for you in terminal in your
80:34 - path so if you say which code
80:36 - it just says user local bin code
80:39 - so it's just an executable that allows
80:42 - you then to open up visual studio code
80:44 - with a path like so you can say open a
80:47 - visual studio code in this folder
80:49 - so you can just say code
80:52 - dot so
80:54 - and you can do that in visual studio
80:56 - code you can allow that to be installed
80:58 - by doing um command shift p on macintosh
81:02 - or control shift p i i believe in
81:04 - windows
81:05 - and
81:06 - linux
81:07 - and there is this little command here
81:09 - that says shell command install code
81:11 - command in path so if you execute that
81:13 - once then it's already set up for you
81:15 - you don't have to do that anymore so if
81:17 - you'd like to be able to say code
81:20 - dot in terminal
81:21 - and open the current folder
81:24 - within visual studio code without you
81:25 - having to open visual studio code
81:27 - manually and then doing file open
81:30 - then i suggest that you do command shift
81:32 - p or control shift p
81:34 - in visual studio code depending on which
81:36 - operating system you're using and then
81:37 - choosing shell command install code
81:40 - command in path so i've already done
81:43 - that so i can just say code dot
81:46 - and i'll bring this up here
81:49 - so as you can see this is the basics of
81:51 - a simple
81:54 - um flutter project that you create with
81:58 - flutter create now visual studio code
82:00 - has a built-in terminal so i don't have
82:03 - to have this terminal window open
82:04 - anymore so i'm just gonna close it okay
82:07 - and i'm gonna make this full screen
82:09 - increase the size a little bit so you
82:10 - can see better and perhaps i could even
82:13 - remove this flutter
82:15 - logo on top right so you can see the
82:18 - content a little bit better as well
82:22 - so that's the creation
82:24 - of our
82:25 - simple flutter project now
82:28 - in order for this flutter project to run
82:30 - and you be able to run this
82:32 - application and like keep testing your
82:35 - project
82:36 - you would have to select a target and
82:38 - you do that with command shift p
82:40 - and then
82:41 - choosing flutter select device so you
82:43 - can just say flutter select device
82:45 - enter
82:47 - command shift p is on macintosh and ctrl
82:49 - shift p i believe is in linux and
82:50 - windows so do that command shift b is a
82:53 - very important command you're going to
82:54 - use it quite a lot in this course so
82:56 - just learn that please
82:59 - um then i'm going to say select device
83:01 - and i'm going to choose
83:03 - since i'm on a macintosh and as you saw
83:05 - earlier we have xcode already installed
83:07 - xcode comes also with the entire ios sdk
83:11 - and also with the simulator i can choose
83:14 - to run our application on ios simulator
83:18 - or i can choose to run it on an actual
83:20 - phone
83:22 - now for
83:23 - this
83:24 - um
83:25 - i believe i don't know if you've talked
83:27 - already about scrcpy to be honest with
83:30 - you i'm just gonna
83:31 - search in my notes um to see if you've
83:34 - talked about that and
83:38 - if you just give me one second i'll just
83:39 - check here i believe we're we're gonna
83:41 - set it up in chapter six so we haven't
83:43 - set up scrcp cpy yet so for that purpose
83:46 - i'm just going to say select device and
83:49 - i'm just going to say start ios
83:50 - simulator so that is going to as you can
83:52 - see start up by your simulator and that
83:55 - for now is like the best way for us to
83:58 - test our application so
84:00 - while this is connecting um i can show
84:03 - you a little bit around as well
84:05 - we have as you can see lots of files
84:07 - here already created for us we're going
84:09 - to go through some of these um
84:11 - but one of the most important files that
84:12 - you're going to need to get used to used
84:14 - to is this lib slash main.dart and this
84:17 - is where like the majority of the code
84:20 - is written so
84:22 - uh this is his contents at the moment um
84:26 - let's see what it's doing with the
84:28 - simulator i'm just gonna have a look
84:29 - here
84:32 - um
84:33 - it's taking a little bit longer than
84:35 - expected so what i'm gonna do is i'm
84:37 - just gonna
84:38 - kill the io simulator manually this
84:40 - shouldn't this usually doesn't happen
84:42 - but that's okay if it does happen then
84:43 - you know how to deal with it just close
84:44 - the simulator
84:46 - um and then i'm just gonna
84:49 - go to command shift p select device and
84:51 - then start ios simulator fresh so it's
84:55 - starting right now
84:58 - okay so that's our simulator and i'm
85:01 - actually going to decrease the size of
85:02 - this a little bit since i realize that
85:04 - it is a
85:06 - very large font so
85:09 - this is our main dart file this is like
85:11 - where the flutter
85:13 - command line um command has created
85:16 - it is the file that has been created for
85:18 - us so we don't have to play around with
85:19 - it too much to be honest with you at the
85:20 - moment
85:21 - um for the purpose of this chapter we're
85:24 - just gonna have a look at um
85:27 - basically kind of like exploiting this
85:29 - uh code so that we can inject our code
85:31 - into it so we can learn dart a little
85:33 - bit so you don't have to understand all
85:34 - of this code the way it is right now
85:36 - there's lots of comments and etc so
85:40 - so that's
85:41 - that part so now that we're here and
85:43 - then you can see we have a little
85:45 - simulator here and in order to run this
85:48 - application on this simulator since
85:50 - you've already done the flutter select
85:51 - command
85:53 - you just go to run and you say run
85:55 - without debugging for now so
85:57 - since the simulator
85:59 - is already selected then it understands
86:01 - that it needs to compile this project
86:02 - for my simulator so
86:06 - um
86:08 - and we're just going to give it some
86:09 - time depending on your machine and like
86:11 - what you have for specifications on your
86:12 - machine this this command could take
86:14 - anywhere between
86:16 - a couple seconds to maybe 30 seconds
86:19 - or even more and i'm not sure how long
86:21 - it's going to take for a fresh flutter
86:22 - project to be honest with you to start
86:24 - running on the simulator but it took
86:26 - about 21 seconds so or 22 seconds so
86:29 - um
86:31 - i will bring up the
86:32 - project now and this is like the basic
86:34 - flutter project i'm not going to go into
86:36 - details about how it works but you can
86:37 - press the plus button if you want to so
86:40 - but what i'm going to do i'm just going
86:41 - to close this widget inspector that was
86:43 - opened
86:44 - automatically and i'm just going to
86:46 - bring this a little bit down so that we
86:49 - can see the debug console okay
86:51 - so
86:53 - that's for setting up our project so
86:56 - that part is done now the first thing
86:58 - that we need to talk about
87:00 - when we start talking about
87:03 - dart is the concept of keywords
87:06 - now since i'm assuming that you haven't
87:08 - done any programming language in any
87:10 - other place before
87:12 - um
87:13 - you need to understand what keywords are
87:16 - they're very
87:17 - important in understanding any
87:19 - programming language basically and
87:21 - keywords are
87:22 - um
87:22 - [Music]
87:25 - concisely explained there are
87:27 - words that are reserved
87:29 - for
87:31 - the programming language
87:32 - that you
87:34 - cannot use for anything else than what
87:37 - the programming language intends those
87:39 - words to be used as
87:42 - i know that sounds a little bit
87:43 - difficult but
87:46 - i mean there's no real good analogy in
87:48 - like if you're coming from figma if
87:49 - you're coming from a design world what a
87:51 - key word could be because in a design
87:54 - world you're not really talking
87:56 - in terms of code with your product or
87:59 - with your
88:02 - software where you're designing your
88:04 - stuff but
88:06 - when you come to programming language as
88:07 - you know it's a language so
88:09 - words mean stuff in in a programming
88:12 - language so a keyword is as its name
88:15 - indicates is a word that has a special
88:18 - meaning in that particular particular
88:21 - language and
88:22 - i provide a link here for you that you
88:24 - can check out but i'm going to open it
88:26 - up and
88:30 - bring it to the screen here increase the
88:31 - size a little bit so we can see better
88:34 - uh have a look at my screen here yeah
88:37 - and you can see this is a part of the
88:38 - documentation for dark programming
88:40 - language that explains what keywords are
88:42 - in dart and you can see there are some
88:44 - words that have special meaning like
88:46 - show import
88:47 - extends async await break
88:50 - so you can say that the language the
88:52 - dark language is made out of these
88:54 - keywords that is pretty much it it's
88:57 - just like series of keywords like the
88:59 - things that you tell the language that
89:01 - hey i want to do something and then it
89:03 - says okay what do you want to do then
89:04 - you say okay i want to do this or this
89:06 - or this so
89:07 - special words for the programming
89:09 - language so that it understands what you
89:11 - mean basically
89:15 - so that's for keywords um
89:17 - for now we don't have to really go into
89:19 - so much more details about what a
89:21 - keyword is but for now just understand
89:22 - that a keyword is a special word
89:25 - in the programming language
89:27 - language's brain kind of so that you can
89:29 - talk to it it's your interface with the
89:30 - programming language to make it
89:32 - understand what you want to do okay
89:35 - and please check out the link that i
89:36 - provided here to understand more about
89:37 - keywords
89:42 - okay so we've talked about keywords i'm
89:44 - just gonna check it in my notes so that
89:47 - we know we've talked about it
89:51 - now the next concept that we need to
89:53 - talk about are
89:55 - data types
89:58 - um
90:00 - if you for instance come from a design
90:02 - background then you have different tools
90:05 - to work with for instance you may have
90:07 - in your design system whatever you're
90:09 - using if you're using product from adobe
90:11 - or if you're using for instance figma or
90:13 - whatever
90:14 - visio or whatever tool you're using then
90:16 - there's like a set of components that
90:18 - you can work with for instance you can
90:20 - drag in a text field or you can drag in
90:22 - an image field or sorry an image or you
90:25 - can for instance assign
90:29 - assign a color to a text so these are
90:31 - all like things that you can do with
90:34 - that
90:36 - software
90:37 - now a data type in in a programming
90:39 - language like dart
90:41 - is that type of a thing for instance you
90:45 - would say
90:47 - i have some data in my mind okay what is
90:49 - it it's the first name of a
90:51 - of my friend okay his name is uh
90:54 - jack or whatever um
90:57 - and then you would say okay what type is
90:59 - jack is it a number no is it like um
91:03 - is it a list of things well yeah it's a
91:06 - list of uh characters yeah
91:09 - uh okay then it's that is this data type
91:13 - or you could say
91:15 - i'm thinking about my age
91:17 - my age is let's say i'm 37.
91:20 - okay what is 37 is it a list of things
91:23 - well yeah it kind of is a list of
91:25 - numbers
91:26 - list of digits but it's also in itself a
91:29 - number so
91:32 - then there has been this convention like
91:34 - convention in different programming
91:36 - languages and every program language
91:38 - language pretty much that you can use
91:39 - these days has this concept of data
91:41 - types data type is as its name indicates
91:43 - a
91:44 - a specific
91:46 - specific name assigned to
91:50 - to a series
91:52 - a specific name assigned to a data
91:55 - that is bound to be of a specific type
91:58 - as well so for instance in dart you have
92:02 - data types called integers or you have
92:05 - strings or you have arrays and sets
92:07 - which we'll talk about soon but
92:09 - a data type just for now though it's
92:11 - just a stamp on a piece of data to say
92:14 - that you're of this specific type
92:17 - so
92:18 - you could think of a data data type as a
92:20 - nationality you could say like every
92:22 - person coming from sweden is swedish
92:23 - boom that's his data type so it's just a
92:26 - categorization of data based on their
92:29 - appearance or based on what they
92:32 - actually hold so
92:34 - for instance you can say here's a
92:36 - university full of engineers and
92:40 - these are software engineers these are
92:41 - mechanical engineers so the software
92:42 - engineer is a data type it or is a
92:44 - person type a category type so putting
92:48 - stamps on things based on the
92:50 - categorization is kind of what data type
92:52 - does and
92:54 - in short i mean
92:56 - you just have to know that it's just a
92:57 - categorization of things based on
92:59 - what they hold so
93:02 - and there's and there's a website that
93:04 - you can read about uh dart data types
93:07 - and it's right here
93:08 - i don't know if you've i've if i've
93:09 - provided it here
93:11 - on the link below as you can see dart
93:13 - core library html so
93:15 - um and here you can read more about dart
93:19 - data types
93:21 - but we're not going to go into so much
93:22 - detail about all these right now just
93:24 - know that
93:25 - data type in dart is or any programming
93:27 - language basically that has data types
93:30 - is a categorization of
93:32 - data based on their appearance or
93:34 - contents
93:37 - now
93:38 - let's talk a little about
93:40 - something called constants in dart
93:43 - a constant
93:45 - usually in programming language
93:47 - languages are
93:48 - values
93:50 - whose value cannot be changed
93:53 - that's a little bit meta but
93:56 - uh let's say for instance the value of
93:58 - um
94:01 - a value of 10
94:03 - it's a number
94:04 - it cannot be changed 10 is 10 and it
94:07 - will always be 10.
94:09 - um
94:10 - or your name that is a constant although
94:13 - you can go and change it but as long as
94:15 - that is your name it is a constant so
94:18 - um
94:20 - another example of a i mean
94:22 - there are so many values that can be
94:24 - constants which will actually be quite
94:27 - abstract for me to be able to explain
94:29 - right now but just know that a constant
94:31 - is a value whose
94:33 - internal data cannot change during
94:36 - the
94:38 - during where you're writing your program
94:40 - and also during when you're running your
94:42 - program so
94:44 - um that is kind of what a constant is
94:48 - uh but there is also this uh notion of a
94:51 - compile time constant and a runtime
94:54 - constant and i i mean
94:56 - you don't have to know about
94:58 - uh
94:59 - like those different types of constants
95:01 - right now just because like in dart a
95:02 - constant is a constant whether it's
95:05 - runtime or
95:06 - compile time is constant it's just just
95:08 - a constant as you'll see soon but
95:11 - i still believe that it's important to
95:14 - understand the difference between
95:15 - compile time and runtime
95:18 - when you're talking about programming
95:20 - and when you're becoming software
95:21 - developer and i hope by the end of this
95:23 - course you'll actually become a software
95:24 - developer if you're not already um that
95:26 - would be really amazing uh but
95:30 - the notion of a compile time and a and
95:34 - runtime is very important to understand
95:36 - and
95:36 - developers like to um
95:39 - make a distinction between whether
95:41 - something has happened during compile
95:43 - time or something has happened during
95:44 - runtime and
95:45 - compile time is
95:48 - or before i explain compile time maybe i
95:50 - should explain compile compile is where
95:52 - you take the program that you're writing
95:54 - here
95:55 - and you tell the computer that i want
95:58 - you to package this up
96:01 - so that i can run it later on
96:04 - x and y machine
96:06 - so that process of packaging things up
96:09 - simply said is
96:10 - in very simple terms it's called
96:12 - compiling or a compilation okay so
96:16 - um
96:17 - from where you start writing your
96:19 - program with the hand with your fingers
96:21 - until where you package it you're pretty
96:22 - much just compiling it okay
96:25 - but when you run it like we're running
96:28 - it at the moment on
96:30 - ios simulator
96:32 - that session from where you start
96:35 - outputting your program into this device
96:38 - and for it to run your program from that
96:41 - moment on
96:42 - then
96:43 - the distinction separates into
96:46 - runtime
96:47 - so
96:48 - you haven't compiled time and runtime
96:50 - and a constant is a value that is the
96:52 - same during compile time and runtime so
96:55 - its value doesn't change so the value of
96:57 - 10 is 10 while you're writing your
96:59 - program and also stays the value of 10
97:02 - while the program is
97:04 - running so
97:07 - that is a
97:09 - very simple explanation of a constant so
97:12 - now let's
97:14 - put
97:15 - constants and data types uh
97:18 - in practice now in this
97:21 - project that was created for you by
97:23 - flutter create
97:25 - in this in this line of code as you can
97:29 - see it says void main we're not going to
97:31 - talk about exactly what that is but just
97:32 - press enter at the end of it and just
97:35 - write
97:39 - final
97:40 - and i'm going to tell you what final is
97:42 - soon
97:43 - and just saying name is equal to foo
97:47 - okay
97:48 - this is
97:50 - there's lots going on in here and i'm
97:52 - gonna tell you um
97:54 - what is actually happening here
97:56 - um
97:58 - but i before before we actually go
97:59 - through all these details let's let's
98:02 - add something here called a constant so
98:04 - i'm just kind of saying const age is 27
98:08 - or yeah 27. as you can see this is how
98:10 - you write code in dart you start by a
98:13 - keyword usually or a variable name or
98:16 - something as we're going to talk about
98:17 - it
98:18 - but const is a keyword okay
98:21 - and it tells dart that what
98:23 - is following here is a name right after
98:26 - cons i'm going to write some name
98:28 - and in that name then i'm going to
98:31 - basically say okay i'm adding the value
98:34 - of 27 to this
98:37 - h i'm sorry about this my dog also
98:39 - barking a little bit
98:41 - so
98:43 - what is happening here is that you're
98:44 - telling dart that i'm
98:46 - putting the value of 27 into a constant
98:49 - call h
98:51 - and you can refer to this age later for
98:53 - instance you can say
98:55 - then
98:56 - const age
98:59 - twice the age
99:02 - you can say is equal to age multiplied
99:04 - by two and this is also constant because
99:07 - at compile time word dart is basically
99:10 - trying to understand what you've written
99:11 - it says okay you said 27 and then you're
99:13 - saying 27 is a constant so its value is
99:16 - never going to change and if you tell me
99:17 - 27
99:18 - multiplied by 2 that also is a constant
99:21 - because
99:22 - both this side and this side are compile
99:25 - time constants
99:28 - so that's that's what we mean by a
99:30 - constant it's a value that is specified
99:32 - during compile time and it and it cannot
99:34 - change so
99:36 - also it's important to know that notice
99:38 - that your learning guard and
99:42 - here is
99:44 - sorry i have to just take some items in
99:45 - my notes to make sure that i've
99:47 - explained all of those to you um
99:50 - you can see here that every line of code
99:52 - in dart needs to end with a semicolon
99:55 - and that tells dart that yeah you're
99:57 - starting a new line of code of course
100:00 - you can put two lines of code like this
100:02 - but if you just press save
100:04 - there is a program automatically running
100:06 - in the background which is called dart
100:07 - fmt which is the dart formatter which is
100:10 - going to format your code and prefix it
100:12 - so if i like put a lot of spaces in here
100:14 - and just press save
100:16 - you can see upon
100:17 - doing command s on mac or control s on
100:20 - linux and windows upon saving dart
100:22 - formatter is gonna kick in and format
100:24 - the code for you so
100:26 - just a little hint
100:29 - um
100:30 - okay
100:31 - those are constants so we've talked
100:34 - about that
100:35 - now let's talk about variables a little
100:36 - bit
100:38 - a variable is
100:40 - usually
100:42 - anything that contains
100:45 - a value that is not a constant
100:48 - i mean i think that's like the
100:50 - simplest way of explaining what a
100:51 - variable is um a variable as a name
100:54 - indicates it can vary
100:57 - and that means that the data that it
100:59 - holds it doesn't need to be constantly
101:01 - the same it means that
101:03 - from where you start the program you may
101:04 - actually
101:06 - assign a value to this variable and you
101:07 - may also change that variable depending
101:10 - on what type of variable it is
101:12 - um
101:13 - so
101:14 - there's also
101:17 - this notion of
101:19 - a final variable in dart which we'll
101:22 - talk about soon so
101:24 - before we do that let's go to this main
101:25 - function here and you could just say um
101:29 - var name is fu
101:33 - and here what i've done is that i've
101:35 - created a variable
101:37 - indicated by the var keyword
101:41 - whose value is foo or let's just say
101:44 - alex
101:47 - and semicolon to end the line now if i
101:49 - want to change this value all i could
101:51 - say here is to say name is equal to
101:55 - anthony
101:56 - or whatever
101:58 - now this is basically us assigning a new
102:02 - value to this variable saying anthony
102:05 - um
102:07 - as i said there is also a
102:10 - no the notion in
102:12 - dart
102:13 - for a keyword called
102:15 - final
102:16 - so you could just say final name equal
102:19 - to alex and it's it's a little bit
102:21 - strange because final is also a variable
102:24 - whose value cannot be changed so you may
102:27 - be like okay what like what kind of a
102:29 - variable is that like
102:31 - how is that not a constant
102:33 - now there's a little limitation because
102:35 - you you may try to like say const
102:38 - aim alex
102:41 - but this
102:42 - as you will see later in in the
102:46 - in the course
102:48 - final gives you the flexibility to
102:51 - assign a value to your variable
102:54 - a little bit later maybe in the process
102:56 - of creating it
102:58 - but it still indicates to dart that the
103:01 - value of this variable is not gonna
103:03 - change after it has been assigned to
103:06 - it's a little bit
103:08 - yeah it's it's it's just a little bit
103:10 - confusing maybe at the moment so let's
103:11 - just say
103:13 - a variable is like a constant but its
103:16 - value can be changed let's just leave it
103:18 - at that okay so
103:20 - uh
103:21 - that's it
103:24 - okay now that we talked a little bit
103:26 - about a little bit about uh
103:29 - variables let's talk about functions so
103:32 - um i didn't specify exactly what this is
103:35 - just because we hadn't really come to
103:37 - functions
103:38 - but a function is
103:41 - a body
103:42 - of code is a grouping of series of lines
103:45 - of code one to n number of n lines of
103:48 - codes
103:49 - that
103:51 - is logically
103:53 - uh grouped
103:54 - and it can it has a few properties uh
103:58 - one is its return value here indicated
104:00 - by void
104:02 - the other part of its information is its
104:05 - name
104:07 - followed by a pair of parentheses
104:10 - an open parenthesis and a closed
104:12 - parenthesis
104:14 - in which you will write something called
104:16 - the function arguments
104:19 - or parameters
104:20 - um
104:22 - it's pretty much just like uh
104:25 - imagine like
104:27 - a box where you input things in it it
104:29 - does some processing and then it outputs
104:32 - that stuff whatever it wants to output
104:35 - so
104:36 - what we could do here is to create a
104:38 - very simple function for for ourselves
104:41 - by
104:43 - as you see as you saw before or as i
104:45 - mentioned before
104:47 - what you write for a function in the
104:49 - beginning is this data type i mean what
104:52 - data comes out of this function
104:54 - and
104:56 - um
104:56 - and here
104:58 - let's say we want to add
105:00 - someone's first name and their last name
105:02 - with a space between it so if i say foo
105:05 - as the first name and bar as the last
105:08 - name then the full name should be fu bar
105:11 - and with the space in between
105:13 - so
105:15 - as i said then you need to specify the
105:17 - data type first what you're gonna return
105:19 - and if you looked at the documentation
105:21 - that i provided earlier there's a data
105:23 - type called string
105:25 - which is a series of characters
105:27 - basically it could be a name a family
105:29 - name address of your house or whatever
105:32 - and that's a data type is string okay so
105:34 - we say we're outputting string and then
105:36 - you say okay what should this function
105:38 - be called
105:39 - um
105:40 - there's a convention in dart that your
105:42 - functions should follow a camel case
105:47 - naming convention basically in camel
105:49 - cases if you for instance say
105:51 - in english my function should be called
105:53 - get full name
105:55 - that's my function name but you cannot
105:57 - have spaces in your function function
105:58 - names in dart or pretty much every
106:00 - programming language that i know about
106:03 - then
106:04 - remove all the spaces and then except
106:07 - for the first word
106:08 - change all because uh cons all the other
106:12 - words
106:13 - uh first letter to uh to uppercase so
106:18 - it was like this before you could
106:19 - actually change them to uppercase first
106:22 - and then remove the spacing so this is
106:24 - this is how you should write your
106:26 - function names
106:27 - this is called camel case
106:30 - full name okay
106:31 - we said that we also have to open
106:33 - parenthesis
106:35 - now
106:37 - let's just say then
106:41 - we need to uh specify somehow that we're
106:44 - going to accept a first name and a last
106:46 - name
106:47 - well
106:48 - what kind of a data type does a first
106:51 - name have well
106:53 - it's kind of like a string it's a name
106:54 - it's a series of characters so let's
106:56 - just type string here
106:58 - and then we want to take a first name
107:00 - and we know about camel case now so
107:02 - let's just say first name
107:04 - is uppercase and remove the
107:07 - spacing so
107:08 - first name
107:09 - hey that's the parameter
107:11 - and then you want to go to the next
107:12 - parameter so just say comma
107:16 - and then you want to say
107:18 - string last name
107:20 - you take the first name and the last
107:22 - name
107:23 - now we also said that after the
107:25 - parenthesis after you have accepted your
107:26 - parameters you want to go and create
107:28 - like your curly brackets here i don't
107:30 - know actually if i mentioned that before
107:33 - but every function is either
107:36 - its body or its logic it's either
107:40 - followed by equal
107:44 - greater than sign which we're going to
107:45 - talk about later or
107:47 - sco uh
107:48 - is by curly bracket so we're just going
107:50 - to use curly brackets
107:53 - now there
107:54 - what you want to do here you want to
107:56 - take the first name and add a space to
107:58 - the first name and then follow that by
108:00 - the last name so
108:01 - you need to you you need to tell dart
108:03 - that that is the data you want to return
108:05 - and
108:06 - thankfully there is a
108:08 - um
108:09 - there's a keyword called return that
108:11 - tells dart that you want to return some
108:13 - value from a function so
108:15 - then what you're going to do you're
108:16 - going to say i want to return what the
108:19 - first name and i want to add a space
108:23 - single quotes space
108:26 - us
108:28 - last name
108:30 - right
108:31 - so
108:32 - i mean
108:33 - this is a very simple implementation of
108:35 - get full name so um
108:39 - however there's there's actually a
108:40 - better way of doing this in dart and
108:42 - i'll explain it to you right now and
108:44 - that is by formatting your strings
108:47 - so
108:48 - let's say that you want to
108:50 - basically
108:52 - tell dart kind of like how your result
108:55 - looks like and you want to ask dart to
108:57 - insert the first name and last name into
109:00 - that result for you
109:02 - and that's how you'll do it like this
109:04 - you say
109:05 - okay i want to return a string denoted
109:07 - by the single quotation marks here and
109:09 - you can also do a string in dart with
109:11 - double quotation marks but i'm going to
109:13 - explain that a little bit later
109:16 - so let's say that you
109:18 - want to
109:19 - return the first name in here but if you
109:21 - say first name
109:24 - what's going to happen here is that it's
109:25 - actually going to take this first name
109:27 - as
109:28 - has you written in the string so when
109:30 - you get this return value it's actually
109:32 - going to say first name
109:34 - not the value that you pass to this i
109:37 - know it may be a little bit
109:40 - difficult to understand when i say the
109:41 - value that you pass to this what does it
109:43 - even mean
109:44 - uh so let's put this actually to test
109:46 - first okay
109:48 - go now into
109:50 - this
109:51 - build function as you can see here on
109:53 - line 16. now it may not be on line 16
109:55 - for you but for me is at the moment on
109:57 - line 16. just find this class my app
110:00 - stateful stateless widget and find this
110:03 - widget build stuff that's written there
110:06 - create a new line here
110:08 - okay
110:09 - and just say
110:12 - full name
110:13 - or sorry say print
110:16 - as i'm writing it here
110:18 - print
110:19 - and then just say
110:23 - what do we call our function get full
110:24 - name
110:26 - see here
110:27 - and it says okay what's the first name
110:29 - i'll say quotation marks who
110:31 - and the last name is bar
110:34 - and ended with a
110:36 - semicolon so and ignore this call for
110:39 - now sorry this uh warning avoid print
110:41 - calls and production codes so
110:45 - okay so
110:46 - now we're calling that function this is
110:48 - the
110:49 - it's i mean it's called calling it's
110:52 - called invoking
110:54 - it may have other names but usually
110:56 - programmers call this calling call the
110:58 - function
110:59 - and
111:00 - these are the parameters that you're
111:02 - passing to this function okay
111:04 - so uh
111:07 - the
111:08 - i mean there are two words
111:10 - used for
111:11 - in in the programming world to explain
111:13 - these parameters like with with name and
111:15 - that is called a parameter or an
111:17 - argument i mean they're used
111:19 - interchangeably
111:20 - the meaning of them is kind of like
111:22 - getting uh convoluted in to the point
111:24 - that no one knows which one is which but
111:26 - you could just use parameter or argument
111:28 - and everybody would understand what
111:29 - you're saying so but there's a little
111:31 - bit of the difference which i'm not
111:32 - going to go into the detail of but if
111:34 - someone just says call this function
111:36 - with parameters or arguments you know at
111:38 - least what you're doing okay
111:40 - foo bar
111:42 - now we're printing its value all you
111:44 - have to do in order to execute this code
111:46 - is press command s and you will see the
111:49 - result
111:51 - outputted here now
111:52 - what we did here
111:55 - um
111:58 - what we did here was very
112:00 - very key
112:02 - feature in flutter called
112:04 - hot reload
112:06 - as you saw i didn't execute my code
112:08 - again i didn't press like the run button
112:10 - again i just said save
112:13 - now saving in flutter
112:15 - triggers an action called hot reload
112:18 - hot reload in flutter is it's a whole
112:20 - topic of its own
112:22 - which i'm not gonna go so much into
112:24 - detail of but what hot reload does
112:27 - really is
112:28 - it looks for changes
112:32 - in
112:33 - in your code hierarchy without
112:36 - complicating it too much i'm just trying
112:37 - to phrase my
112:38 - sentence
112:40 - right so that it's um
112:42 - not too complicated for
112:44 - this chapter
112:46 - it looks for changes that you made to
112:47 - the code and executes only those changes
112:52 - okay
112:53 - and in the process of executing those
112:55 - changes it might execute everything else
112:57 - that is in its uh
112:59 - in its path and
113:01 - by doing a save this function gets
113:04 - called somehow magically which i'm not
113:06 - going to go into
113:07 - right now
113:08 - which in turn then calls or invokes our
113:11 - function called getfullname and
113:14 - its value will then be passed into
113:17 - another function called print
113:19 - okay
113:21 - i hope that that made sense
113:25 - uh and as you can see the result isn't
113:26 - really what we expected it just says
113:28 - first name
113:30 - and that is because here we said return
113:32 - first name and as you can see if you put
113:34 - first name like this inside your string
113:37 - it becomes its own string it has nothing
113:39 - to do with this
113:40 - anymore
113:41 - if you remove these quotation marks
113:43 - however
113:45 - then it says oh first name is this
113:47 - parameter
113:48 - you see it actually highlights it so
113:51 - then if i press command s on mac or
113:53 - control s on linux and windows you will
113:55 - see
113:56 - foo being printed to the screen
113:58 - okay
113:59 - you can also say last name here and it
114:01 - will say bar
114:03 - right
114:05 - and know that no also notice that when
114:07 - i'm changing these things it's not
114:08 - executing immediately automatically i'm
114:10 - pressing command s so just keep that in
114:12 - mind please so
114:17 - so
114:18 - that's for a function and but before we
114:20 - move on explaining the basics of a
114:23 - function i want to also explain
114:27 - a little bit about
114:30 - string formatting and that is we said
114:32 - that we're going to put first name and
114:34 - last name because this is what we did in
114:36 - the beginning first name plus space plus
114:38 - last name and this wasn't so pretty
114:39 - because it's like doing string
114:41 - concatenation in a very old-fashioned
114:42 - matter in a very old-fashioned manner
114:45 - yeah i think i said it right the first
114:47 - time
114:49 - but what you want to do here is to
114:52 - uh use uh garth's built-in formatting
114:55 - capabilities and you do that by first
114:57 - saying that okay i want to return some
114:59 - sort of a string
115:00 - and i want to have first name
115:03 - space
115:04 - last name but as you saw this earlier if
115:07 - i command s or control s
115:09 - it just returns those strings exactly as
115:12 - i've written them not the parameters
115:15 - what you can do is just to put a dollar
115:17 - before them
115:18 - and you can see their coloring now
115:20 - changes depending on the theme that
115:21 - you're using or depending on the text
115:22 - editor that you're using if you're using
115:25 - android studio it may not color it the
115:27 - same way or if you're using visual
115:29 - studio with a different theme on a
115:30 - different maybe platform you may not
115:33 - even change the color but for me at
115:34 - least you can see that the change the
115:36 - colors change so as to indicate that now
115:38 - i'm not actually returning
115:41 - the string exactly as you wrote
115:44 - except on returning the parameters
115:47 - that are here
115:49 - so command this
115:50 - and now you can see that the result is
115:53 - full bar
115:55 - okay
115:57 - so that is the basics of functions in
116:02 - in dart
116:03 - before we move on
116:05 - from functions i also want to explain
116:07 - quickly that
116:08 - um a function doesn't necessarily have
116:10 - to return anything
116:12 - and that means that
116:14 - you may have a function here that wants
116:17 - to just print some data to
116:19 - uh the screen or to here to the debug
116:22 - console and you can just call it
116:24 - print my name
116:26 - and parenthesis and
116:28 - curly brackets and
116:30 - as you can see here
116:32 - i can just write the name of the
116:34 - function without any
116:36 - data type to be returned but it's a
116:38 - little bit of a convention that you
116:40 - actually tell dark that this is a void
116:42 - function
116:43 - meaning void is a key word as we talked
116:46 - about it earlier in the beginning of
116:48 - this
116:49 - chapter
116:52 - void is a key word telling dark that
116:54 - this is a function that doesn't return
116:56 - anything and as you can see
116:58 - dart is completely fine with this
116:59 - function being completely empty meaning
117:01 - that well yeah you said you're not
117:03 - returning anything you're probably just
117:05 - gonna do some stuff in here so i'm not
117:07 - gonna bother you with some errors saying
117:09 - oh you forgot to do something
117:11 - but as soon as you change the return
117:13 - value or the return data type of your
117:16 - function to for instance string
117:19 - then you'll get an error
117:22 - saying that oh yeah the body might
117:24 - complete normally causing null to be
117:26 - returned blah blah you don't have to
117:27 - know exactly what that means but
117:29 - essentially what that means is you're
117:31 - telling dart that you're returning a
117:33 - string but you're not returning anything
117:36 - it's literally
117:37 - looking for the return keyword
117:40 - saying that oh you missed it so you
117:42 - could silence that uh error by saying
117:45 - return an empty string
117:48 - semicolon
117:51 - so
117:53 - i think this pretty much explains the
117:56 - basics of um
117:59 - functions to be honest with you
118:02 - there's lots more to learn about
118:03 - functions and as i said functions can
118:06 - also be like
118:07 - written
118:08 - using this syntax and
118:11 - this syntax is used when your function
118:13 - is very simple or in that
118:16 - it doesn't need to break into different
118:18 - lines of code
118:20 - by a semi-colon so a function who has a
118:24 - very simple logic you can just skip
118:27 - writing
118:28 - these square brackets
118:30 - no curly brackets sorry
118:33 - and you can just say you see i will
118:36 - remove this
118:38 - put equal sign
118:40 - greater than sign
118:42 - remove the closing curly bracket
118:45 - and then you can remove the return
118:47 - statement and that's it
118:49 - that is a shorthand it's a function
118:51 - shorthand in dart
118:53 - and you could use it simply to
118:56 - simplify kind of your code some people
118:58 - may like it some people kind of may be
119:00 - against it
119:02 - just because it's um
119:04 - it kind of splits your
119:06 - code into two different styles some
119:08 - functions are with uh curly brackets
119:10 - some functions are with this pointer
119:12 - thingy and uh kind of depends on your
119:15 - and you on you and your team to be
119:18 - honest
119:18 - um
119:19 - i know usually from my um
119:22 - from my experience usually
119:24 - we software developers like to follow
119:26 - conventions so in one
119:29 - in one project
119:31 - the developers may decide okay we're
119:32 - just going to go with this convention
119:34 - and since
119:35 - using curly brackets
119:38 - involves the ability to have both
119:41 - complicated and simple return statements
119:45 - in a function it's actually preferred
119:48 - as a convention than using this syntax
119:51 - simply because this syntax doesn't allow
119:52 - you to split your code into separate
119:54 - lines of code it has to all be in one
119:57 - statement so if that makes any sense
120:02 - so i think i think that's it for
120:05 - functions and now we've talked about
120:08 - functions arguments return values
120:12 - we talked about variables constants
120:15 - data types and
120:17 - keywords in dart and
120:20 - these are such important parts of
120:23 - learning how to program with dark and
120:25 - flutter that i think you need to spend
120:27 - some time and experiment with them so do
120:29 - some experimentations on your own for
120:30 - instance take
120:32 - not don't take just the first name and
120:33 - last name just take for instance
120:35 - someone's address someone's age
120:37 - different play around a little bit with
120:39 - different data types like integers
120:40 - different numbers have a look at the
120:42 - link that i provided
120:44 - earlier which was here i'll bring it up
120:46 - again so you can see that
120:48 - have a look at this link and have a look
120:50 - at the different examples of different
120:52 - data types because in this in
120:55 - in the
120:56 - upcoming chapters and in the uh rest of
120:59 - this course we're going to play around
121:01 - with a lot of different types of data
121:03 - types
121:04 - so i think it's important that you have
121:05 - a look a little bit
121:07 - at the documentation as well
121:10 - so
121:10 - let's leave this chapter at this point
121:14 - and then in the next chapter we're going
121:15 - to talk a lot more about more advanced
121:20 - dart programming language features so
121:22 - thank you for joining me for this
121:24 - chapter and see you in the next one
121:26 - hello everyone and welcome to chapter 4
121:29 - of this flutter course
121:31 - in the previous chapter chapter 3 we
121:33 - talked about keywords data types
121:36 - constants variables and some basics of
121:38 - functions
121:39 - and in this chapter we are going to
121:42 - as you can see on the captions here
121:44 - we're going to focus on control
121:46 - statements and
121:48 - collections now
121:50 - um i'm assuming you're following these
121:53 - chapters
121:54 - um chronologically so that you're like
121:56 - going
121:58 - one by one so i'm assuming then that you
122:00 - have your uh dark project set up and
122:03 - that you've got some sort of a simulator
122:05 - or emulator running
122:07 - so
122:08 - without further ado let's have a look at
122:11 - um i'm actually gonna
122:14 - bring up the captions here and then i'm
122:15 - gonna put my face at the bottom there
122:19 - and bring up our project that we created
122:22 - in the previous chapter
122:24 - up here so this this is running at the
122:26 - moment so if i do a command s or control
122:29 - s on linux and windows
122:31 - then as you can see here there is a run
122:33 - button
122:34 - and then
122:36 - it's just gonna do a hot reload which in
122:38 - turn calls this build function which we
122:40 - don't yet know really how it works
122:42 - because i haven't really explained it
122:43 - but
122:45 - what we did we just
122:47 - called a print function here and then
122:49 - our get full name function so
122:52 - what i'm going to do here is let's
122:54 - remove this code from the build
122:57 - and let's remove everything that we
122:58 - wrote here as well so keep the main
123:00 - function as you can see here and then
123:03 - keep your stateless widget which we're
123:05 - going to talk about later okay
123:07 - so instead go and create a new function
123:09 - that is called void
123:11 - test
123:13 - all right
123:14 - and then in the build function just say
123:16 - test
123:18 - all right
123:19 - just like that
123:21 - the purpose is that in this function
123:23 - we're going to write most of the code in
123:25 - this chapter so we are going to
123:27 - basically test some code that's the
123:28 - purpose of this function so
123:32 - let's talk about if and else if and l's
123:35 - are
123:36 - control statements in
123:38 - most programming languages that allow
123:41 - you to
123:42 - branch your code based on a condition
123:45 - so if we for instance in here create a
123:48 - final
123:50 - variable whose value cannot be changed
123:52 - if you remember from the previous
123:53 - chapter whose value cannot be changed
123:55 - after it's been assigned to
123:57 - let's say final name is foo
124:00 - all right
124:01 - and end it with the same semicolon
124:03 - now
124:05 - an if statement basically allows you to
124:08 - check the value or a condition
124:10 - to be
124:12 - of a certain
124:13 - value or to be true or false
124:16 - and
124:17 - then it allows you to execute some code
124:19 - and then you can also
124:22 - append an else statement to it which
124:24 - gets executed if the code or if that
124:27 - condition is not met i'm going to show
124:28 - you how that is written
124:30 - the syntax for an if statement is just
124:33 - if
124:34 - and if is an is a keyword
124:36 - so you would say if
124:38 - and then you would open and close
124:40 - parenthesis and then you would put curly
124:42 - brackets like this that's the syntax of
124:45 - if and in the parenthesis you would put
124:47 - your condition
124:48 - so i would say in this case if name and
124:52 - i would like to for instance check if
124:54 - name is foo
124:56 - now
124:58 - uh we haven't come to operators yet
125:00 - we're going to talk about operators
125:02 - actually soon
125:04 - but this is um as you can see here we're
125:07 - saying final name equal to foo this is
125:10 - kind of like um
125:12 - an assignment uh operation and that is
125:15 - an operator in dart it's called an
125:17 - operator
125:18 - so
125:19 - there is also
125:21 - and since this is an assignment we don't
125:22 - want to actually assign anything to name
125:24 - you want to check if it's of a certain
125:25 - value and
125:26 - that is with this conditional operator
125:29 - equal equal
125:32 - and then you will just say okay if it's
125:34 - foo then for instance print
125:38 - uh yes
125:40 - this is foo
125:42 - and then a semi colon to end it however
125:44 - if this condition is not met you may
125:46 - want to execute another piece of code
125:48 - and then you can just do else
125:52 - like that
125:53 - and then this would you would just say
125:55 - no this is not foo
125:57 - all right and a semicolon so i'm just
126:00 - going to do command s and you can see
126:02 - the value or the string yes this is food
126:05 - printed to the screen or to the terminal
126:07 - here or to the debug console
126:10 - you can have multiple statements in here
126:12 - so you can have more print statements in
126:14 - here you can just do anything you want
126:16 - basically in here
126:18 - and the same goes for else
126:21 - now there is a possibility to write if
126:24 - statements kind of without
126:26 - the curly brackets but you don't see
126:28 - them that often and i recommend that you
126:30 - actually always try to as a convention
126:33 - do with curly brackets if you can
126:35 - however it is possible that inside a
126:37 - code base that you will work on with
126:39 - your colleagues it is decided that it's
126:42 - okay to have if statements without curly
126:45 - brackets where there are very simple and
126:48 - one-liners basically
126:50 - so let me show you
126:52 - an example of that you could just say if
126:54 - name is foo
126:58 - you would just say print yes this is foo
127:01 - and this is completely accepted as well
127:03 - so because it's a one-liner
127:06 - but if you then say
127:08 - okay i want to have another line print
127:10 - hello world
127:13 - you can see it goes to the next line
127:15 - meaning that
127:16 - this line right here
127:19 - will be executed no matter your
127:21 - condition up there so this is completely
127:23 - detached from your if statement up here
127:25 - okay
127:26 - and i just realized that it is quite
127:28 - important for me to be able to show line
127:30 - numbers
127:31 - and by default your editor probably has
127:33 - line numbers enabled i usually disable
127:35 - line numbers
127:36 - when i'm working myself basically
127:39 - but when talking about code with other
127:42 - people it's quite useful to have line
127:43 - numbers because i can then tell you oh
127:45 - look at line nine or look at my line ten
127:48 - okay so
127:49 - that's the basic of if and else
127:52 - now you can also have if right after
127:56 - else so
127:58 - an example of that is for instance to
128:00 - say if name is fu
128:05 - and then you do some code all right
128:08 - you say print yes it is foo
128:12 - not food
128:13 - after the curly bracket then you would
128:15 - say else
128:16 - and then you can then say another if
128:18 - else if
128:20 - all right
128:21 - and then after if comes the
128:23 - parenthesis and a curly bracket if you
128:25 - remember from the if before
128:27 - it is the exact same syntax as it as it
128:29 - is here
128:30 - so there's pretty much no difference you
128:32 - can you see if
128:34 - and then if
128:35 - and then you put your condition in here
128:37 - you would just say if name
128:39 - and then you may just want to say is not
128:42 - and that's another operator
128:44 - it's uh basically is a not operator so
128:47 - it's checking to make sure that this
128:50 - name is not
128:51 - of the value that you provide to the
128:53 - right hand side
128:56 - and then you can say bar
128:58 - and print
129:00 - this value is not bar
129:03 - else
129:05 - and then you can wrap it up and you can
129:07 - say print i don't
129:10 - know what this is
129:11 - now i i'm so glad i actually
129:13 - accidentally ran into this issue
129:16 - as you can see now the editor is kind of
129:18 - going crazy and darts not understanding
129:20 - what this statement is
129:22 - and
129:23 - as we talked about it previously um
129:26 - strings in dart are preferred to have
129:28 - to be kind of like created with single
129:30 - quotes however
129:32 - if your string in itself contains a
129:34 - single code for instance in this case
129:36 - the word don't
129:39 - contains a single code then dart kind of
129:42 - gets confused like okay does the string
129:44 - in here you can see it's
129:46 - up until this point is it's a green so
129:49 - it's thing it's thinking that oh the
129:51 - string ends here but what is all of this
129:52 - then that follows
129:55 - if you have that problem
129:57 - there are two ways of fixing that either
129:59 - you
130:01 - scape your
130:03 - single code and that is a
130:05 - that is a software kind of development
130:08 - lingo escape kind of if you hear that it
130:10 - pretty much just means that you're
130:12 - um you are
130:16 - kind of
130:16 - wrapping it in a way
130:19 - that dart understands that you don't
130:21 - mean it literally you don't mean that
130:23 - i want to end my string here except that
130:25 - this needs to be escaped and put in the
130:28 - string as its own value basically it's
130:30 - kind of difficult to explain but i think
130:32 - you know what i mean um so that's one
130:34 - way of doing it it's a little bit dirty
130:36 - so
130:37 - in case you run into this issue it's
130:39 - best to actually wrap your entire string
130:41 - in double quotes and this way
130:44 - then dart understands that whatever
130:45 - comes in here is okay like a single code
130:48 - is completely okay
130:50 - unless you actually want to have
130:52 - a double co double uh
130:55 - double quotes in your string that is
130:57 - enclosed with double quotes again so
130:58 - you'll see if i put a double quote here
131:00 - then dart goes crazy so you can escape
131:02 - it with a backslash like that
131:05 - so if you have single codes and double
131:07 - quotes in your string then you will have
131:09 - to kind of pick a convention either you
131:11 - enclose the entire string in single
131:13 - quotes and scape your
131:14 - single quotes
131:16 - inside that string and let the double
131:18 - quotes live or you enclose your entire
131:21 - string in double quotes and then you
131:23 - will
131:24 - escape your double quotes in the string
131:28 - i hope i hope that makes sense
131:31 - so
131:33 - that is
131:34 - um if and else in um in a nutshell
131:38 - but before i move on i kind of want to
131:40 - explain an important concept here in
131:42 - that when dart executes this code it
131:44 - kind of goes by line by line so it
131:46 - starts with line seven the execution of
131:48 - this test
131:49 - function and then it come comes here and
131:51 - it says okay name is foo all right
131:53 - um
131:54 - and it's actually saying that we prefer
131:56 - const so let me change that to const
131:58 - okay so
132:00 - um
132:01 - and it says
132:02 - okay if name is foo
132:04 - all right then it comes over here but
132:07 - let's just change that to foo with
132:08 - triple o
132:11 - um actually
132:13 - yeah let's no let's not do that let's
132:14 - keep it as foo so it says if foo is if
132:18 - name is food then it says yeah that's
132:19 - true
132:20 - and then it goes here however as you can
132:23 - see the line number 11
132:25 - also says if
132:27 - name
132:28 - is not bar
132:30 - then it should execute this as well
132:33 - and
132:35 - and you can see that foo is not bar so
132:37 - this condition is also true
132:39 - however this this this will never be
132:41 - executed and that is because
132:44 - when dart goes inside these curly
132:46 - brackets then it says okay i did what i
132:48 - had to do i did my print statement the
132:50 - rest i ignore
132:52 - so if an if statement is kind of like a
132:54 - is a
132:56 - it puts a stop when it when it falls
132:58 - into one of these if statements it kind
133:00 - of says okay i did my job in this entire
133:03 - if else block then i will execute the
133:06 - code after that so if i clear the
133:09 - console here and press command s you can
133:10 - see it only says yes it is foo it
133:12 - doesn't come here
133:14 - so however if you change this
133:17 - um condition so that the
133:20 - dart compiler or
133:22 - basically the execution of the program
133:23 - doesn't fall into line number 10 it will
133:25 - eventually fall to line number 12. so
133:28 - you can see it says this value is not
133:30 - bar so when you're writing your if
133:32 - statement and else statements just be
133:34 - careful with that just know that it's
133:35 - kind of like a as soon as the code jumps
133:38 - into one of those branches it doesn't go
133:40 - to the rest of the branches and checks
133:42 - them basically
133:44 - all right
133:47 - okay
133:49 - that was for if and else
133:53 - now let me
133:55 - check that in my notes that we've talked
133:57 - about that
133:59 - what we need to do now is to talk about
134:05 - operators
134:07 - operators
134:09 - they
134:10 - there are three different types of
134:12 - operators there are prefix operators
134:15 - infix operators and suffix operators
134:19 - and
134:21 - and i will explain them to you i mean
134:24 - how they work um
134:27 - i think to explain operators probably
134:29 - it's best that we talk about numbers so
134:31 - let's go in this test function and
134:33 - delete everything that we we've written
134:35 - here and let let me just say final
134:38 - h is 20. all right so
134:42 - um
134:43 - now we've created a variable whose value
134:46 - cannot be changed after spin assigned to
134:47 - because we created as a final a variable
134:50 - whose value is 20. all right now if you
134:53 - want to calculate half of this value how
134:55 - would you do that then well there is an
134:57 - operator for that and that is a division
134:59 - operator so you would just say for
135:01 - instance final
135:04 - half of age as you can see we're using
135:06 - camel case as i explained in the
135:08 - previous chapter
135:10 - an easy way to do camel case is to say
135:12 - half of it just writing in english
135:14 - change the first letter of
135:18 - of like this here change the first
135:20 - letter of all the words except for the
135:22 - first word to uppercase and then remove
135:24 - all the spaces that's camelcase
135:25 - basically so half of age is age and then
135:28 - there is a great operator in a dart
135:31 - called a division operator and then you
135:33 - would say
135:35 - all right
135:37 - and then you could just say print half
135:39 - of h
135:41 - so command s and that says ten all right
135:44 - so that's the division operator and then
135:47 - you will have
135:49 - let's say final double
135:51 - the h
135:54 - and then we will say h
135:56 - multiplied by two it's kind of like a
135:58 - star
135:59 - that is an operator and you can see
136:03 - these both operators this one
136:06 - the division and the multiplication uh
136:09 - multiplication it's a little bit
136:11 - difficult to say
136:12 - operators are in fix operators and an
136:15 - infix operator is an operator that has
136:18 - two parameters one to its right and one
136:20 - to its left i don't know how you can
136:21 - actually
136:22 - yeah one two one to each side i don't
136:25 - know if my video is like mirrored so if
136:27 - my right hand is actually right hand on
136:29 - your side as well so i don't know yes it
136:32 - is probably
136:34 - so
136:37 - these are infix operators when they have
136:39 - two values one to each side
136:43 - however there are also
136:46 - prefix operators
136:48 - and
136:49 - an example of that is for instance if i
136:51 - said final
136:53 - h minus 1
136:56 - and actually we
136:59 - change this to var i'll explain soon why
137:02 - and if we said minus minus h
137:05 - now this is an example of a prefix
137:08 - operator and a prefix operator is an
137:11 - operator that it comes before
137:14 - whatever it has to do its work on and in
137:17 - this case this minus minus operator what
137:20 - it does is that it takes the value that
137:22 - comes after it
137:24 - it
137:25 - decreases that value by one
137:28 - and then it returns its result back to
137:31 - the left-hand side so in this case the
137:35 - the interpreter comes here and says okay
137:37 - you wanna calculate something okay it's
137:39 - equal to
137:40 - oh a prefix operator that takes a
137:43 - variable here and it says okay what is
137:46 - age is 20
137:47 - minus 1 is 19. puts it in here and it
137:50 - also puts that minus 1 sorry puts that
137:54 - 19 in an h so
137:55 - i think so at least so if we say print
137:57 - age and print age minus one now both
138:00 - should kind of be 19
138:02 - and you can see it says twice you see 2
138:05 - 19. so that kind of means it's uh twice
138:08 - so flutter has this great ability not to
138:11 - duplicate basically log statements or
138:13 - print statements
138:16 - so
138:17 - we have i mean there are some really
138:19 - great operators in dart and that is the
138:21 - plus operator operator and then you have
138:25 - the minus division multiplication and
138:28 - then you have the logical kind of like
138:30 - operators to check if a value from the
138:32 - left is equal to the value to the right
138:34 - so
138:35 - these are kind of like the basics of the
138:37 - operators in um dart so you don't have
138:40 - to know so much more about these for now
138:43 - i would say
138:44 - um
138:45 - you can get really far with these and a
138:48 - lot of these operators actually work not
138:50 - only on numbers but also on strings so
138:53 - and for instance if you this is one of
138:55 - the cool features of dart which i
138:57 - absolutely love i think it was just such
139:00 - a great idea for them to implement this
139:02 - like
139:03 - uh one thing i mean if you're not coming
139:05 - from a software development background
139:07 - um you may not know this but if you're
139:09 - coming for instance from design
139:10 - background also you would notice that
139:11 - sometimes when you're creating designs
139:13 - or
139:14 - any any screen and you want to kind of
139:16 - like show that design to someone like a
139:18 - product owner you want to actually
139:20 - populate the text inside your design
139:23 - with some lorem ipsum
139:25 - and lower mibsum is basically has a huge
139:27 - history of where it comes from but it's
139:29 - usually some sort of a dummy text kind
139:32 - of that you want to place inside your
139:33 - design
139:34 - so that you can just like display and
139:36 - show it to someone
139:38 - and
139:39 - a lot of developers like in many
139:40 - languages when they want to display some
139:42 - text and they don't know what to say
139:44 - like we're just testing stuff i just
139:45 - want to display some text they go and
139:47 - grab lorem ipsum and then put it in
139:49 - their code
139:51 - but dart has gone to the next step and
139:53 - said okay we don't need that so what you
139:55 - can do you can say for instance name is
139:57 - foo
139:59 - that's a string name but you can say
140:01 - name times 20
140:04 - is name times 20. you can literally say
140:07 - multiply a string by 20 and what that
140:09 - does is that it
140:11 - says foo 20 times
140:13 - so if i say print
140:15 - name times 20
140:16 - you can see it's
140:18 - 20 times so
140:20 - it's a great feature you can say foo bar
140:22 - pass
140:23 - and then just say times 100
140:26 - and yeah it just
140:28 - that's it copies it for you 100 times in
140:31 - names time
140:32 - 100 for instance so
140:36 - so that is a um
140:39 - that is
140:41 - shortly said that is
140:43 - the basics of operators in dart okay
140:47 - i'm gonna delete that code
140:50 - i'm gonna
140:52 - mark in my notes that we've talked about
140:53 - that
140:56 - now i'm just gonna quickly
140:59 - also mention
141:01 - that
141:03 - um
141:05 - we can also create custom operators to
141:08 - be honest with you and
141:10 - i don't think it is completely
141:13 - all right right now to talk about custom
141:16 - operators i think it's kind of like a
141:18 - topic to talk about later so i actually
141:20 - just moved it in my notes that
141:22 - we don't need to talk about it right now
141:23 - because we have to know about a little
141:25 - bit about a little bit about classes and
141:28 - objects so that we can after we've
141:30 - created our own class then we can create
141:31 - custom operators as well so
141:34 - i don't think it's completely
141:35 - appropriate to talk about right now but
141:37 - just know that in the future you can
141:39 - also create your own operators and then
141:41 - like or you can also override like
141:43 - different operators and how they work
141:45 - with different objects so it's it's
141:46 - really fun
141:48 - um
141:50 - but that's that's that let's just let's
141:51 - just leave operators to that for now
141:55 - now the next topic that i wanted to talk
141:58 - about is lists
142:01 - and
142:02 - a list in dart is
142:05 - a series of
142:07 - things that are
142:09 - similar to each other and they are
142:12 - placed inside
142:15 - a list as you would have for instance a
142:16 - piece of paper and you could write your
142:18 - shopping list or like a christmas
142:20 - shopping list or whatever
142:22 - and it's numbered so
142:25 - um these are called lists in dart
142:29 - so for instance if you say
142:32 - foo
142:33 - and then bar
142:36 - and then bass as you can see dark
142:38 - doesn't like this syntax at the moment
142:40 - it says okay what are these like what is
142:42 - this uh
142:43 - uh
142:44 - comma here
142:46 - the way to tell darth that this is a
142:48 - list of things that are like in place
142:50 - one two three
142:52 - is by placing them inside uh square
142:55 - brackets and then a semicolon of course
142:59 - now
143:00 - um
143:04 - as i've talked about it before just just
143:06 - now actually lists have
143:08 - indexes in that they all have their own
143:11 - place placement inside the list
143:14 - and all these objects as we call them
143:16 - they have their placements inside the
143:18 - list and you may think that object
143:20 - number one is foo and then
143:23 - object number two is bar and now number
143:25 - three is bas and i kind of correct but
143:28 - index says in
143:31 - i mean all the programming language that
143:33 - i've worked with c plus c rust
143:37 - dart swift
143:39 - javascript
143:41 - they pretty much all start at the index
143:44 - of zero and that is so important to
143:46 - understand because like
143:48 - the placement of this object
143:50 - called foo inside this
143:52 - list
143:53 - is not one it's actually it's index is
143:56 - zero
143:57 - and that is why lists are called zero
144:00 - based and their indexes are called zero
144:04 - based indexes so you've got to be
144:06 - careful with that and we're going to
144:07 - talk about indexes soon actually
144:10 - so let's just say
144:11 - final names is that now if i want to
144:14 - extract foo from here i'm just going to
144:16 - say
144:17 - final foo is names
144:20 - at the index of zero right i'm just
144:23 - going to print it i'm just going to say
144:24 - printfu and you'll see food printed here
144:27 - now if i say
144:29 - i want to get past then i'm going to say
144:31 - print sorry
144:33 - index of three
144:34 - and you'll see
144:36 - oh sorry
144:38 - index of two because it's the third item
144:41 - but since indexes are zero base then
144:43 - it's in excel so i made the mistake
144:45 - myself so command s and you'll get bass
144:48 - and
144:49 - i actually want to go back to this three
144:51 - and then command s so you can see what
144:53 - happened here you'll see you you'll get
144:55 - something called
144:56 - a range error which is an exception
145:00 - an exception in dart and many other
145:03 - programming languages is when things go
145:06 - wrong
145:07 - so that the language doesn't really know
145:09 - anymore what you mean
145:10 - and in this case you can see this
145:12 - through an exception at the language
145:15 - level or at the library's level where it
145:17 - says
145:18 - there are no four items in this array or
145:21 - in this list because the index of three
145:24 - indicates four items
145:26 - item number one in the list has the
145:28 - index of zero item number two has the
145:30 - index sub one item number three has the
145:33 - index of
145:34 - two
145:35 - and item number four has the index of
145:38 - three
145:39 - and there are only three objects in this
145:42 - array or in this list so
145:44 - zero index zero one two
145:47 - so that's it
145:49 - and index of number three is
145:50 - non-existent and that is why we're
145:52 - getting this invalid value not in
145:55 - inclusive range zero to two
145:59 - so
146:00 - that's how you access items inside a
146:02 - list
146:03 - and this is how you actually create a
146:05 - list okay so you say list of items which
146:08 - is full bar bas so
146:10 - you can also there are some convenient
146:12 - um
146:13 - properties on lists that you can for
146:16 - instance say
146:17 - final
146:19 - length so if you want to know how many
146:21 - items are
146:22 - in this list you can also say
146:25 - names
146:27 - dot
146:27 - and then you would say linked
146:30 - we're going to talk a little bit about
146:31 - that now as well because i think it's so
146:33 - important to understand what that is
146:37 - dots in dart and in many other
146:40 - programming language is a way to drill
146:42 - in to
146:43 - something to extract something else from
146:46 - it and in this case names is a list
146:49 - and
146:50 - all lists in dart
146:53 - have
146:54 - something called properties
146:56 - length is the property of
146:59 - the list data type in dart
147:02 - and that means every list in dart has a
147:06 - property called link that is
147:08 - automatically calculated for you you
147:10 - don't have to do anything as you enter
147:13 - values in this list this length is gonna
147:16 - then return the right value to you so
147:19 - i'm gonna i'm just gonna talk about that
147:21 - a little bit more so i'm just gonna say
147:22 - print named length
147:24 - it's gonna say you'll see here
147:27 - let me scroll a little bit it'll say
147:29 - three three items in this array
147:32 - i'm gonna change the names list to var
147:35 - so that we can actually
147:37 - um
147:38 - change its contents and mutate it like
147:42 - i just wanna add a new name to this
147:44 - names and i'll just say add
147:47 - is a function as you can see because it
147:48 - has parentheses right after it
147:51 - so and i will say
147:52 - um
147:54 - my name and then semicolon to end the
147:56 - statement now if i say print names
147:59 - length right after the statement
148:01 - you guessed it oh i can see actually my
148:04 - um
148:05 - you may not see all the print statements
148:07 - because this text is right there so
148:10 - let me resize my visual studio code a
148:12 - little bit so you can see things a
148:14 - little bit better sorry about that
148:16 - so
148:18 - now we have names length here and you
148:21 - can see the second time around it said
148:24 - four
148:25 - okay
148:26 - so
148:27 - when you say dot after
148:29 - the name of a of a variable and that
148:33 - means it can be a constant a variable or
148:35 - a final variable after you put dot
148:38 - after its name you're accessing
148:40 - different properties or different
148:42 - functions inside that thing okay so it's
148:45 - kind of like an accessor it allows you
148:47 - to drill down inside an object and grab
148:49 - things out of it or maybe make that
148:52 - object do something for you okay
148:55 - so
148:57 - i think i think that's good enough to be
148:59 - honest with you about lists i don't want
149:00 - to go too much into details and scare
149:03 - people about like all the different
149:05 - things you can do with lists and but
149:08 - there there is great documentation on
149:11 - dart's own website all you have to do is
149:12 - just to google or duckduckgo or whatever
149:15 - you want to use bing
149:17 - your
149:18 - your way through and just search for
149:20 - dart arrays documentation or just dart
149:23 - arrays and then you will find lots of
149:24 - information about it
149:26 - or sorry dark lists because in dart
149:28 - they're actually called lists in some
149:30 - other programming languages they're
149:31 - called arrays but
149:33 - those names can be used interchangeably
149:35 - to be honest with you lists and arrays
149:36 - are kind of like yeah almost the same
149:38 - thing so
149:42 - all right um
149:45 - that was lists in dart i'm gonna take it
149:47 - in my
149:49 - notes so that we know we've talked about
149:50 - it
149:52 - the next topic that i wanted to talk
149:54 - about in this
149:56 - video
149:57 - are things called sets
150:02 - all right and
150:05 - as you can see in the caption i've
150:06 - written here is a list of unique things
150:08 - whereas
150:10 - lists were lists of homogeneous things
150:14 - sets our list of unique things so
150:20 - i think the best way actually to explain
150:22 - sets is just to jump right into it so
150:26 - the syntax for a set is with a curly
150:28 - bracket and
150:30 - actually i think i think it is
150:34 - yeah i think so
150:37 - so let's say final
150:38 - uh names and i'm just gonna say curly
150:41 - bracket foo
150:42 - and then end that okay just like that
150:46 - now if i type names here
150:48 - you will see that the suggestion
150:49 - provided here or the information
150:51 - provided by visual studio code says
150:54 - names is a set of string
150:56 - we talked about this in the previous
150:58 - chapter that
150:59 - when i say final names
151:02 - or final something name for instance is
151:05 - foo
151:05 - i'm kind of telling dart to create
151:08 - a variable
151:10 - whose
151:11 - reference name is name and its value is
151:14 - fu and dart automatically understand
151:16 - that the data type of this
151:20 - value is string because its data is
151:23 - string so you don't have to say final
151:25 - string name
151:26 - although you could do that but let's
151:29 - change this to const as well as
151:31 - and
151:32 - you don't have to actually say this is a
151:34 - string because dart understands it
151:36 - automatically so you just remove the
151:38 - data type if that's what you want to do
151:40 - which is what i actually prefer to do
151:42 - instead of being too verbose
151:44 - unless you have a really good reason to
151:46 - provide the data type anyways let's go
151:48 - back to sets so
151:51 - we were
151:52 - here
151:54 - means and that's and in the same way
151:56 - that we created a string and then dart
151:58 - automatically understood the data type
152:00 - by putting uh square brac sorry curly
152:02 - brackets here or curly braces here and
152:04 - putting some data inside that dart
152:06 - automatically understand okay this is a
152:08 - set of some stuff in here and this stuff
152:11 - for now just looks like a string so
152:14 - if i say foo bar
152:16 - as
152:18 - um
152:20 - art says okay this is fine but if i go
152:22 - in here and i say foo again you can see
152:24 - i automatically get then an error
152:26 - message say saying two elements in a
152:28 - constant so literally cannot be equal
152:31 - because it understands that this foo it
152:34 - has already repeated there
152:38 - okay so let's remove foo from here and
152:42 - let's do an experiment
152:43 - let's change this names to var so that
152:45 - we can actually change its con its
152:48 - contents
152:49 - then go to name and add to the next line
152:51 - and say names if i can spell
152:54 - and say add
152:55 - and then say foo again
152:57 - and then say names add bar and then set
153:01 - add bas
153:02 - or sorry means advanced
153:06 - and then we'll say print names okay and
153:09 - i'm gonna clear the logs with this
153:11 - button right here
153:13 - and then i'm gonna press command s
153:16 - and you can see that the set is still
153:18 - full bar bass nothing changed really
153:20 - there
153:21 - that is one of the greatest properties
153:24 - of
153:25 - lists
153:26 - of um
153:29 - sets in dart and in pretty much every
153:31 - other programming language that supports
153:33 - sets and that's
153:35 - sets only ensure always that their data
153:39 - is not duplicated and
153:42 - this is i mean there's lots of magic
153:44 - happening in the background that i
153:45 - haven't really talked about in i mean
153:48 - for instance like the question that you
153:49 - may ask how does dart know
153:52 - foo is the same as foo does it compare
153:55 - them yes it kind of does actually
153:57 - um
153:59 - it's internally doing a comparison
154:02 - between these things but we never told
154:04 - it how that comparison should work
154:07 - and that is because
154:09 - if you remember from operators when we
154:10 - talked about it the string
154:14 - now we haven't talked about classes well
154:16 - i'm just going to say strings in dart
154:19 - already know how they should be compared
154:22 - with other strings
154:24 - okay
154:25 - so
154:27 - they
154:28 - they kind of have this logic of hash
154:30 - codes and comparison operators that they
154:33 - know exactly like okay
154:35 - given this string am i the same as that
154:37 - like given sorry given what i am
154:40 - and this new thing that you're providing
154:43 - me like i'm foo and you're saying foo am
154:45 - i the same as foo and then it says yes
154:46 - or no so
154:48 - that is what sets are doing internally
154:51 - but we don't actually see that so
154:54 - um
154:56 - just know for now that sets in dart
154:58 - allow you to create unique lists of
155:01 - things okay and then
155:04 - you may also be a little bit like
155:06 - tempted to go and say okay i have things
155:09 - here let's say const things is equal to
155:13 - foo and then we say one
155:16 - and this will also work and that is
155:18 - because
155:19 - dark has
155:20 - the concept of object as well you can
155:23 - see you'll see things and it'll say oh
155:25 - now it's a set of object
155:28 - we haven't talked about objects yet and
155:32 - if i look at my notes i can see that
155:34 - we're going to talk about objects in
155:35 - chapter six
155:36 - and we're right now in chapter four
155:39 - so we haven't really
155:41 - gotten to that point to talk about
155:43 - objects
155:44 - and i don't want to really scare you
155:46 - about objects and what they actually are
155:48 - but just know that
155:50 - there is a hierarchy of data types so
155:54 - you have object and then you have
155:58 - data types that kind of derive their
156:00 - functionality from objects so
156:02 - here sits object and then here's its
156:05 - string integer
156:07 - double etc and then you have sets and
156:09 - blah blah blah now
156:11 - when you're here when you were first
156:13 - here and you said i have foo barbaros
156:15 - all strings then dart was like okay
156:18 - this is a set of strings
156:20 - but then
156:21 - you said oh i have a string and i have
156:23 - an integer which is a number
156:26 - now dart was like oops i have i can't i
156:28 - mean
156:29 - i don't really i can't say this is a
156:31 - list of strings and integers that's not
156:33 - possible in there so it says i'm going
156:34 - to take the common denominator type that
156:37 - sits above them as their parent to
156:40 - specify what these things are okay
156:43 - and that is kind of like the same thing
156:45 - that we do in real life in that if i
156:47 - give you for instance um uh
156:51 - two candies like a twix bar then you say
156:54 - then you would say
156:56 - this is a twix bar that's one thing
156:58 - if i give you 10 twix bars then you will
157:00 - say a lot of twix bars or 10 twix bars
157:03 - if i just give you a bunch of twix bars
157:06 - oh that's a bunch of twix bars but if i
157:09 - go and
157:11 - like
157:12 - blend like lots of twix bars mars bars
157:16 - whatever all the sweets into a bag and i
157:19 - give you that bag what do you call it
157:20 - you don't say
157:21 - oh this is a bag of twix and uh snickers
157:25 - and this is a
157:26 - and mars bar no you would probably just
157:28 - say candy it's a bag of candies and
157:32 - that's what dart is doing here saying oh
157:34 - you threw a lot of stuff in here i i
157:36 - can't
157:37 - like comprehend that this is a set of uh
157:40 - objects
157:41 - so
157:42 - we do that in real real life and that's
157:43 - what dart is doing here so just when you
157:45 - see object just know that oh dark
157:48 - doesn't really know what this is anymore
157:49 - so
157:50 - or it kind of knows what it is it's just
157:53 - a
157:54 - bunch of stuff so
157:56 - that's what object in this case means
158:00 - so that was a weird uh
158:03 - comparison maybe but i hope you get uh
158:05 - what i mean
158:07 - and if you see me looking here it's just
158:09 - because i'm looking at my notes to
158:10 - ensure that i've explained the things
158:12 - that i've
158:13 - set out to explain so
158:16 - talked a little about about hash codes
158:18 - and sets we don't have to go into
158:20 - details about that so
158:23 - now let's go and talk a little bit about
158:25 - maps
158:26 - um
158:28 - and
158:29 - maps are kind of
158:31 - one of my favorite data data structures
158:34 - in
158:34 - any programming language that supports
158:36 - them pretty much almost all modern
158:38 - programming languages support maps so
158:40 - a map is
158:43 - a data structure
158:45 - as you can see here maps are used to
158:47 - hold key value pairs of information and
158:49 - what that means is
158:51 - um
158:53 - let's say that you want to explain
158:56 - a person using their different
158:58 - properties
159:00 - then you would say age
159:03 - their gender
159:05 - their
159:06 - hair color their
159:09 - heights uh whatever
159:11 - name all that so
159:13 - these are kind of like your keys
159:16 - so
159:18 - you would explain
159:19 - the properties of that person using
159:21 - those keys and all those keys have their
159:23 - values so
159:25 - if you say height then you say like 180
159:28 - yes
159:30 - and if you say weight then you select 70
159:32 - kilograms
159:34 - so these are key values the keys are the
159:37 - properties of that person and the values
159:39 - are the values of those properties so
159:42 - and the way to create a map is very
159:44 - similar so to very similar to a set with
159:47 - a curly with curly brackets
159:50 - so you say person
159:52 - and then you say equal to
159:54 - actually this is just a name you don't
159:56 - have to say person but yeah or you can
159:58 - just say const so person and then you
160:00 - open curly brackets and then you would
160:02 - do your keys here and i would say the
160:04 - key of age for instance i'll say 20
160:07 - and then you say
160:08 - column
160:10 - is it calling yeah it's a column
160:12 - and then you end the whole set with a
160:15 - semicolon so i just created a
160:19 - basically here i created a map whose
160:23 - keys are string and values are integers
160:27 - now let's see if dart understands that
160:30 - you see this is it's a map of string as
160:32 - keys and means as values but now
160:35 - as you saw before the analogy of candies
160:38 - now if i say okay i have another key and
160:41 - it says
160:42 - um
160:44 - name and i say oh the name is foo
160:47 - dart's going to be like oop
160:50 - what is this person oh it's a map of
160:52 - string as keys and object as the value
160:55 - because it just looks at the common
160:57 - denominator of the string which is foo
161:00 - and 20 which is an integer and says oh i
161:03 - don't know i can't create a map whose
161:05 - keys are string and its values are both
161:08 - string and integers so i'm just going to
161:10 - go to their parent and be like oh the
161:12 - parent of both string and integer is
161:14 - object so your values are of type object
161:17 - so
161:18 - a bunch of candies basically okay
161:21 - um
161:22 - that's how you create a um
161:25 - you create a map in dart so
161:28 - and the other property of a map is for
161:30 - instance you would say
161:32 - um
161:34 - if you if you go and create an agent
161:36 - again here
161:37 - you see it says two keys and a constant
161:40 - map literal cannot be equal so it's
161:43 - doing some checks here making sure that
161:44 - the keys are actually unique so keys
161:47 - inside a map
161:49 - need to be unique all right so however
161:52 - if you go and change this and say var
161:55 - person so and then you later go and say
161:58 - person
162:00 - name is equal to foo like just like that
162:04 - and then you print the entire person
162:06 - so i'm just gonna say print before
162:09 - and print after okay
162:12 - and you can see here it said first time
162:16 - h key is 20 it has a value of 20 and the
162:19 - name k has the value of foo with a
162:21 - capital f then the second time around on
162:23 - the print statement on line 15 then we
162:26 - when we print the person it has
162:29 - the
162:30 - um
162:31 - key of age with a value of 20 because we
162:33 - didn't modify that and a key of name as
162:35 - it was before with the value of foo with
162:38 - like six i think uh capital o's
162:41 - so this is how you would modify a
162:44 - map
162:45 - you would specify the key
162:47 - and then you would say equal to which is
162:49 - an operator and then you would say the
162:50 - new value all right
162:52 - um however if you added a new key here
162:54 - for instance um last name
162:58 - and you say bad
163:00 - and that will just kind of like get
163:01 - appended to
163:03 - the um to the map so age the same name
163:06 - the same now you have a new key whose
163:08 - value is bas all right
163:13 - and that is kind of like the basics of
163:16 - um
163:17 - maps so
163:19 - there are lots of things you can do with
163:21 - maps and i really encourage you just
163:23 - like everything else that i talked about
163:25 - in this chapter that you go and read
163:26 - some of the documentations because
163:29 - if you're following along with this
163:31 - course and your goal is to become a
163:32 - software engineer and if you're for
163:34 - instance a project manager or a designer
163:36 - ux or whoever you are
163:38 - um
163:39 - i think you need to understand that
163:41 - software engineers
163:43 - do not know all the answers you have to
163:45 - go and read documentation you have to
163:47 - practice practice practice and put time
163:49 - into it
163:50 - countless countless hours you need to
163:52 - put into learning so
163:56 - i
163:56 - i mean this course i think is going to
163:59 - be so many hours long
164:01 - the the way i can i mean i can see
164:04 - uh the planning for all the chapters
164:06 - that i put here
164:07 - there's so many chapters i think the
164:09 - entirety of this course is gonna go over
164:12 - 20 hours so you can imagine i can't go
164:14 - into details about every single thing
164:17 - otherwise it is just
164:19 - this course is probably going to be like
164:20 - 200 300 hours
164:22 - uh it's unbelievable so
164:25 - we can't do that so what i expect you to
164:27 - do now is just to open your browser and
164:29 - just type dart
164:30 - maps documentation something like that
164:34 - dart maps
164:35 - so
164:36 - and you also need to know that now that
164:38 - you're starting to google things you
164:40 - need to be aware of the word dart and
164:42 - that dart is an existing very popular
164:45 - name for just darts
164:47 - darts okay
164:48 - so sometimes depending on what you're
164:51 - googling
164:52 - if a topic related to
164:55 - the classic darts that you throw is more
164:57 - popular than the topic of the
164:59 - programming programming language which
165:01 - kind of sounds the same
165:03 - it may pop up first so
165:05 - in this case if you say dart map
165:09 - you may actually end up in some sort of
165:11 - weird website that
165:12 - explains to you how you can throw darts
165:14 - at a map
165:16 - i don't know i'm just trying i'm just
165:17 - trying to bring it up because that i
165:19 - actually ended up in that situation that
165:20 - i searched for something related to dark
165:22 - i actually ended up in a weird website
165:24 - talking about darts as like a sport
165:26 - so
165:27 - know that as well please
165:30 - all right now we've uh talked about maps
165:34 - so i'm gonna take that in
165:38 - my notes um
165:39 - now
165:41 - what's coming in the next chapter
165:46 - we are gonna talk about a very um
165:50 - important concept in dart and many other
165:53 - programming languages such as rust and
165:55 - swift and that is null safety or dart
165:57 - calls it sound the sound noise safety it
166:00 - is a very important thing to know about
166:02 - in dart
166:04 - and it will greatly help you in the
166:06 - future as you write your flutter
166:08 - applications and in this course i'm
166:10 - going to use a lot of um
166:13 - null
166:14 - i'm going to
166:16 - make a lot of null references talk about
166:18 - null quite a lot throughout the course
166:21 - so
166:21 - it is very important that we go through
166:24 - that as soon as possible and we're
166:26 - definitely not gonna leave that out so
166:29 - that's gonna be for chapter five so
166:32 - keep an eye out for chapter five that is
166:34 - to follow so i hope that you enjoyed
166:37 - this chapter chapter number four where
166:38 - we talked about dark control statements
166:41 - and collections and i'll see you in the
166:43 - next chapter
166:45 - hello everyone
166:46 - and welcome to chapter number five of
166:49 - this vlogtech course
166:51 - in this chapter we're going to talk
166:52 - about null safety
166:54 - um
166:55 - in the previous chapter chapter number
166:57 - four we talked about
166:59 - dart control statements and
167:01 - collections
167:02 - and before we go on to talk about
167:05 - enumerations and objects and classes
167:08 - i feel
167:09 - it is very important to talk about null
167:11 - safety which is a concept that is
167:13 - available in most most modern languages
167:16 - such as
167:17 - dart sorry such as rust and swift
167:21 - so it is important to kind of like get
167:23 - this out the way before we continue
167:26 - maybe not even get it out of the way but
167:27 - actually like
167:29 - learn what it means and try to utilize
167:31 - it so that we can write better code so
167:35 - um
167:36 - i thought to just bring up um
167:39 - the concept of
167:41 - null values and why they're important to
167:44 - handle well
167:46 - i mean you've seen so far that we have
167:48 - data types a data type can be for
167:49 - instance a string can be an integer
167:52 - and then you can put values in them
167:55 - um however
167:57 - in programming languages you're also
168:00 - allowed to
168:01 - have the concept of the absence of a
168:04 - value so
168:05 - on one hand you have values so you for
168:08 - instance have a string value equal to
168:10 - foo bar or your name or whatever it is
168:13 - and then on the other hand you can have
168:15 - the absence of that value so you can see
168:17 - that
168:18 - okay i have a container i have a
168:19 - variable that can contain the values of
168:22 - type string or i have
168:25 - a variable that can contain any object
168:28 - however at the moment i don't have that
168:30 - value so you will just tell dart that
168:33 - this variable that i have right now
168:35 - that can either contain a valid value of
168:39 - type
168:40 - object or of type string or
168:42 - integer or it can sometimes also
168:46 - during its lifetime
168:48 - contain
168:50 - nothing
168:51 - and this nothingness is the concept
168:54 - that is known as null um
168:58 - so it's
168:59 - null in dart is a keyword um
169:03 - it means that it's a word that you can
169:05 - just write in your text editor as you're
169:07 - writing your code and you say that a
169:09 - variable's value is equal to null
169:12 - and this tells dart that well okay this
169:14 - variable at the moment doesn't contain
169:16 - any values so null is
169:19 - not really a value but it's actually the
169:22 - absence of a value you should think of
169:24 - it that way
169:26 - so
169:29 - let's have a look at this um
169:31 - there's a little bit of a documentation
169:33 - here um
169:36 - uh on dart's website dart dev null
169:39 - safety so i'm just going to click on it
169:41 - you're not going to see my screen at the
169:42 - moment
169:44 - i'm just bringing it up in a
169:46 - browser
169:48 - a browser window i'm going to bring it
169:49 - on the screen
169:51 - and increase the size a little bit and
169:53 - also change the
169:55 - sizing on the
169:58 - window as well so you can see the
170:00 - contents in its entirety um
170:03 - so
170:05 - as you can see in dart it's called sound
170:07 - null null safety and there's
170:09 - documentation about what this actually
170:11 - means
170:12 - um
170:13 - we're gonna look at uh
170:15 - [Music]
170:16 - look at what's not safety actually means
170:18 - in dart and i'm gonna give you a lot of
170:20 - examples of what that actually
170:21 - practically means and there's
170:23 - documentation here in dart's website
170:25 - simple simply because dart um
170:28 - in its older versions and not in its
170:30 - current versions it in its older
170:33 - versions it didn't support uh all safety
170:35 - so there was a lot of code written
170:37 - manually by programmers in order to for
170:39 - instance check whether
170:42 - a value is absent in a variable
170:45 - and then there is as you can see here it
170:48 - says migrating an existing package or
170:50 - app so there is documentation written by
170:52 - the dart team in order to help
170:54 - developers understand how they can move
170:56 - their old code to the new code
170:58 - that supports null safety
171:00 - um however if you're following along
171:02 - with this course and you're it's like
171:04 - you're
171:06 - basically just following chronologically
171:08 - from chapter one to all the other
171:10 - chapters i don't know how many chapters
171:12 - were going to happen if you're following
171:13 - along with this course you don't have to
171:14 - think about migrating because the code
171:16 - that we're writing in this entire course
171:18 - is going to be null safe meaning that
171:20 - we're going to take advantage of darts
171:22 - null safety operators and meaning that
171:25 - we are not going to manually check for
171:27 - values being null and then doing some
171:30 - branches of code whether they're null or
171:31 - not but
171:33 - so what i mean is that if you read the
171:35 - documentation for sound safety you don't
171:37 - have to worry about the migration parts
171:38 - just read the rest okay
171:42 - so
171:45 - with that out the way i'm just gonna
171:47 - make sure that i take that in my notes
171:49 - here that's why i'm looking in this
171:51 - direction because i have all my notes
171:52 - here
171:53 - um let's close this window and bring up
171:56 - our
171:57 - visual studio code window that we had
171:59 - from earlier i'm gonna put it here
172:02 - and i'm just gonna ensure that it is of
172:06 - the correct height as well so you're
172:08 - gonna see it the window in its entirety
172:11 - okay
172:13 - so
172:14 - now that we talked about what non-values
172:16 - are and that they're the absence of a
172:18 - value let's have a look at
172:21 - making any type nullable
172:23 - and if you follow along with the
172:26 - with the course up to this point you
172:27 - should have some sort of a simulator or
172:28 - an emulator running and then you should
172:30 - have done command shift p or control
172:32 - shift p
172:34 - uh depending on your operating system
172:35 - command shift p in mac and ctrl shift p
172:38 - in linux and windows in order to bring
172:40 - up the um
172:43 - this menu and then you can just type
172:44 - flutter select device and then you just
172:46 - select the device that you want to run
172:47 - the code out so i'm kind of assuming
172:49 - that you've already done that and that
172:50 - your code is running and this is
172:52 - something that we talked about in
172:54 - earlier chapters so we're not going to
172:56 - go through that again
172:58 - so i have a
173:00 - an iphone simulator which you cannot see
173:02 - on the screen but i have it running in a
173:04 - separate uh screen just because we don't
173:06 - have enough
173:07 - real estate i can bring it up to this
173:08 - window but it will just take a lot of
173:10 - space so i'm gonna bring it up to
173:11 - another monitor so you don't see it
173:14 - so this code at the moment is running
173:16 - live so if i press command s then it's
173:17 - gonna run and just print the output for
173:19 - us okay
173:21 - um
173:22 - now
173:24 - let's talk about making any type um
173:27 - nullable
173:29 - and there is a
173:31 - way to do that let's let's have a look
173:33 - here
173:34 - we talked about that null is a keyword
173:36 - and that that's why you can see it is
173:37 - like um
173:38 - highlighted here in a different color
173:40 - so if you for instance say final
173:43 - name is foo
173:45 - all right
173:46 - as you can see it says okay i accept
173:48 - this as his name is foo but you can't
173:50 - just say name like it's a null because
173:53 - then it doesn't understand is it an
173:55 - object is it's a string is it nil right
173:57 - is it an integer and if you type here
174:00 - name then you see it's just dynamic it
174:01 - doesn't understand the type
174:03 - so
174:05 - and we'll talk about dynamic a little
174:06 - bit later um but what you can do is to
174:09 - actually specify that okay i want a
174:12 - string data type that
174:14 - it can contain
174:16 - normal names or strings as we call it
174:18 - like series of characters or it can
174:20 - sometimes be null and in that case you
174:22 - have to actually specify the data type
174:24 - as
174:24 - um not just string
174:27 - not just this because you'll see you'll
174:29 - get an error
174:31 - and you'll actually get a suggestion it
174:32 - says try changing the type of the
174:34 - variable or casting the right hand type
174:36 - to string
174:38 - but we're not going to do that wasn't it
174:39 - such a
174:40 - it wasn't such a useful suggestion
174:42 - because what you want here is to
174:44 - actually make dart understand that this
174:47 - variable right here or this constant
174:49 - right here can sometimes contain the
174:51 - value of null
174:53 - and the way to do that is you
174:55 - put a suffix after your
174:58 - data type as a question mark
175:01 - so this is this is the syntax which is
175:03 - actually used in some other languages as
175:05 - well it's used in swift as well
175:08 - so
175:09 - um this tells dart that well here if we
175:12 - make it actually variable as you can see
175:14 - or sorry like this so you say i have a
175:17 - variable
175:19 - it's it's a string but sometimes it may
175:22 - the string value may be absent
175:25 - um and then you'll just say okay
175:28 - now name is foo
175:30 - and you can say now name is no
175:33 - so this is kind of like resetting out
175:34 - names so if i just say okay print
175:38 - name
175:39 - and then after foo i say print name okay
175:42 - so let's just clear the console and just
175:45 - run this application you can see the
175:46 - first time it says it's null
175:48 - and then the second time around it says
175:50 - it is foo
175:53 - so this is how you tell dark that you
175:56 - want
175:57 - to have nullable
175:59 - data type and you can do this with
176:00 - pretty much all data types so you can
176:02 - just say okay i have an integer
176:05 - um of age and that's 20. but you can see
176:08 - you cannot now assign the value of null
176:10 - to integer because it's not nullable but
176:12 - as soon as you make it nullable then
176:14 - that is accepted so
176:17 - um and of course you can do
176:19 - um
176:21 - you can do different operations using
176:22 - for instance we in the previous chapter
176:24 - i believe we talked about control
176:26 - statements if and else
176:28 - so you can say for instance if age
176:31 - is 20
176:33 - and then you can encode or you can say
176:36 - if age is null
176:37 - execute some code
176:39 - so they work as you would expect so
176:42 - there is no difference really
176:44 - and
176:45 - i mean if you if you think about that
176:47 - notability nullability is just like a
176:51 - suffix to a data type you can also say
176:54 - okay pretty much any data type can be
176:56 - nullable and that's that's correct like
176:57 - for instance if you have
176:58 - a list of string
177:01 - of names
177:03 - and you can say okay i have foo
177:06 - and bar here this is a list of strings
177:09 - i've talked about lists in chapter four
177:12 - now you can you can see here that list
177:14 - of strings there are two data types here
177:17 - the list itself and the
177:19 - contents that it holds so if you want to
177:22 - make the list in itself nullable then
177:25 - you would put the question mark after
177:28 - okay this means this list of strings in
177:31 - itself can be absent so you say name is
177:33 - null and that's accepted all right
177:36 - however since you're telling dart that
177:38 - okay the names uh value here can its
177:41 - entirety be null
177:43 - but its values are not supposed to be
177:45 - null
177:46 - so if you then go in here and just put
177:48 - null in here then you see that you got
177:50 - an error
177:52 - and that's because dart is saying that
177:53 - okay you just promised me that
177:55 - the list in itself it can be absent but
177:58 - as soon as
177:59 - it is not absent meaning that as soon as
178:01 - it is present there
178:03 - with some values it's the values cannot
178:06 - be no and that means that the
178:08 - this type should be
178:10 - you're telling me here that it is not so
178:12 - if you want to make an optional
178:15 - or nullable
178:17 - list of
178:18 - optional strings then you would put the
178:21 - question mark after the data type of
178:22 - string as well
178:24 - so this is now
178:26 - i mean the way you should read this is
178:28 - i have a list of strings and i call that
178:32 - list names
178:35 - names can sometimes be no
178:38 - meaning that it can be absent
178:42 - and
178:44 - if it is not absent
178:46 - it can contain objects of type string
178:50 - that themselves can sometimes be absent
178:53 - meaning that okay like for instance if
178:55 - you say
178:56 - fu bar no that's accepted but you can
178:59 - also say names
179:00 - is no
179:02 - see what i mean so both the container
179:04 - which is called names and the values
179:07 - that it contains can be optional
179:10 - and the word optional is very important
179:11 - for you to learn it's it's kind of like
179:13 - an
179:14 - industry accepted way of talking about
179:16 - nulls and nullable values so
179:18 - this is optional all right
179:23 - okay um
179:25 - now we talked about that
179:27 - nullable values and optional values all
179:30 - right basically you can use those words
179:32 - interchangeably so
179:34 - if you're talking with a colleague
179:36 - programmer you would say oh how would
179:39 - you describe this okay this is an
179:40 - optional list of optional strings or you
179:43 - could also say nullable list of nullable
179:45 - strings but
179:47 - optional is also word that is typically
179:49 - used to talk about
179:51 - nullable values all right
179:55 - okay we talked about making any type
179:57 - nullable so um
180:01 - i'm just gonna
180:02 - mark that as
180:04 - done that we've talked about it in notes
180:06 - all right
180:07 - now let's talk about cherry picking
180:10 - non-null values and what this means is
180:16 - with dart you can easily
180:19 - ask the
180:21 - language to
180:22 - give you
180:24 - values that are not null
180:26 - at all i'll explain what this actually
180:28 - means let's say that
180:30 - you have a um
180:34 - you have a string
180:36 - final um string first name
180:40 - and is equal to foo
180:43 - okay
180:44 - now let's just say
180:45 - this is a constant all right that's
180:47 - that's what the suggestion was you see i
180:50 - wrote final because i was not planning
180:52 - to
180:53 - reassign this first name value to
180:55 - anything else but then i got a
180:56 - suggestion to actually use the word
180:57 - final here or the keyword final sorry
181:00 - the keyword comms as you can see here
181:03 - so let's say const
181:05 - all right
181:07 - um
181:08 - now
181:09 - what we want to do here then is to
181:12 - also create a last name
181:15 - or middle name
181:17 - r
181:19 - and then we say last name
181:25 - and actually what we're going to do is
181:26 - we're going to say the first
181:28 - the first name is null all right
181:31 - so first name middle made bar and last
181:34 - name bass
181:36 - now if you want to
181:38 - if you have these values and you want to
181:40 - for instance
181:41 - i mean right now you can actually see
181:43 - the values that you put here but
181:44 - sometimes these values are passed to
181:46 - your function so you don't know what
181:48 - they are right now you can see what they
181:49 - are so it's easy if i told you pick the
181:52 - first non-null value then you would say
181:54 - middle name because you can see it
181:56 - however if you had a function for
181:58 - instance test here that accepted those
182:00 - values for instance string
182:03 - first name
182:04 - string
182:05 - last name and then string
182:07 - or yeah middle name etc then
182:10 - you wouldn't know what those values are
182:13 - or you cannot make an assumption about
182:15 - what those values are except that they
182:17 - are nullable or optional strings so
182:20 - i hope that you get what i'm trying to
182:22 - say now if someone told you to pick the
182:24 - first non-null value
182:27 - one way to do that is like the old way
182:30 - of doing that is to say for um
182:33 - if
182:34 - first name
182:36 - is not snow
182:39 - um then you would say oh i again okay i
182:42 - know first name
182:45 - is the first non
182:48 - small value okay
182:51 - and then you say okay if first name
182:54 - isn't null then we pick it otherwise
182:56 - else if
182:58 - middle name
182:59 - is not null okay
183:02 - and then you say okay
183:05 - middle name is the first nominal value
183:07 - and then else if again so last name is
183:12 - not null
183:13 - then you would print the same thing so
183:15 - this is very repetitive
183:17 - um
183:18 - and it's basically
183:20 - um
183:22 - so it is basically
183:24 - very verbose in the in the way it is
183:27 - created
183:29 - there is a better way of doing this and
183:31 - that is with the
183:32 - uh question mark question mark operator
183:35 - in
183:36 - dart which is available in some other
183:38 - programming languages such as swift as
183:39 - well
183:40 - so the way to do that then is you would
183:43 - want to pick the first non-null value so
183:45 - you would say
183:46 - final
183:47 - or const first non-null value
183:51 - and you would say that's equal to first
183:53 - name
183:54 - or or so this is kind of like question
183:57 - mark question mark
183:58 - middle name
184:00 - and then question mark question mark
184:02 - last name
184:04 - so
184:04 - and i mean we're getting a warning here
184:06 - just because dark understands already
184:08 - that this middle name although a
184:11 - so it's this is although an optional
184:13 - basically it has a value
184:15 - but if we make this null
184:19 - so and that warning goes away but i mean
184:21 - it would probably be cleaner if we
184:23 - actually pass these as parameters into
184:24 - this function so we don't get these
184:26 - weird warnings
184:28 - but the way the question mark question
184:30 - mark operator is working is that it says
184:32 - it is an infix operator just so you know
184:34 - in in from chapter four you know an
184:36 - infix operator is an operator that has
184:38 - two
184:38 - things
184:40 - and one on each on each side the right
184:42 - and left
184:43 - so in this case on the right side we
184:45 - have middle name and on the left side we
184:46 - have first name so what this operator
184:48 - does it says if the value on my left
184:51 - side is null
184:52 - i'm gonna pick the value on my right
184:55 - okay
184:56 - and let's now in this case say okay
184:59 - middle name is not now so what it does
185:01 - it says first name or you null yeah
185:03 - you're not then i'm gonna go to the
185:04 - right side middle name are you no no i'm
185:07 - not no then it's gonna pick that and the
185:09 - rest of the
185:10 - statement is not gonna be executed
185:14 - however if middle name was also known in
185:16 - this case then what happens is that it
185:18 - begins from the left is a first name or
185:21 - you know
185:22 - yes middle name or you know yes so this
185:25 - entire
185:26 - operation here
185:30 - it doesn't yield any value
185:32 - and then so this entire operation will
185:34 - let me know so it says okay now i have
185:38 - to compare our
185:39 - left left hand side are you know yeah we
185:41 - know that this entire thing was no
185:44 - and then it says right hand side are you
185:45 - null
185:46 - nope i'm bass then it takes pass so
185:50 - the
185:51 - this question mark question mark
185:52 - operator is a null aware operator that
185:54 - picks either the left side or the right
185:56 - side
185:57 - whichever one is not null first in that
186:01 - order so left side are you null
186:04 - if you're null i go to the right side
186:06 - but if you're not not
186:07 - not null i'll pick you
186:10 - so keep that in mind it is a very handy
186:12 - operator and it will
186:15 - shorten your code quite a lot all right
186:18 - now if we then go in here and say first
186:20 - non-null value you can see it actually
186:22 - says oh it's a string
186:24 - however if we
186:26 - if these were parameters so if we said
186:29 - first name
186:30 - and then string last name sorry middle
186:33 - name
186:36 - last name
186:37 - they were not provided to us like that
186:41 - converter was okay and then we say final
186:45 - now
186:46 - if we say first non-null value in this
186:49 - case since it is a normal case
186:51 - excuse me
186:53 - where the dart compiler isn't working
186:55 - with constants
186:58 - and then
186:59 - it cannot resolve this to a constant
187:02 - value at the moment so it says okay
187:03 - there are three optional values i have
187:05 - no idea what they are
187:07 - so
187:07 - i'm gonna do my best to pick the first
187:09 - nominal value depending on i mean based
187:11 - on what we provided here
187:14 - however i may not be able to solve this
187:16 - so
187:17 - the final result here as you'll see is
187:19 - and it's an optional string meaning that
187:22 - well i may not be able to resolve this
187:24 - meaning that this entire operation on
187:26 - top on line 9 may result in a null
187:30 - all right
187:32 - sorry about that sorry about my voice
187:35 - so
187:36 - that is the question mark question mark
187:38 - operator so i'm just gonna mark that
187:41 - that we talked about it in my notes
187:45 - okay
187:47 - so
187:48 - that was that um
187:51 - now
187:53 - let's talk about the next topic uh which
187:56 - is the null aware assignment operator i
187:59 - think that's that's this actual official
188:01 - name
188:02 - um this operator is very similar to the
188:05 - question mark question mark operator in
188:07 - that it
188:09 - it tries to resolve
188:11 - a variable
188:13 - to make sure it is not null
188:15 - it's going to do its best um and let's
188:17 - have a look at an example let's just say
188:20 - um
188:22 - bar
188:23 - and i'm gonna say actually let's just
188:25 - say
188:27 - ring
188:28 - and name is first name so we begin we
188:31 - say that we have an optional name
188:33 - and we begin by assigning first name to
188:35 - it so it means that
188:37 - this name might at the moment depending
188:39 - on the value of first name it may be
188:41 - null
188:42 - and now
188:43 - if that is null you may want to assign
188:46 - another value to it all right
188:48 - and then you can do that with this
188:50 - operator you would say last name
188:53 - let's see what happened here
188:55 - both trying to oh is it this yes it is
188:58 - equal to so i actually should change
189:01 - this
189:03 - case to equal to
189:05 - question mark
189:07 - yes and i'm going to bring it up again
189:09 - so that it is actually correct let's say
189:14 - and then name equal to
189:16 - isn't this working
189:19 - lastly oh
189:20 - dummy
189:22 - where was it this one
189:25 - try changing the
189:29 - it like this
189:31 - i'm actually a bit unsure right now so
189:33 - let's have a look actually what this
189:34 - does
189:35 - um
189:37 - and it's three positional and then we
189:39 - say no no
189:41 - no and then bar
189:43 - and then baz here okay so
189:46 - first name is null
189:48 - middle name is bar and last name is bass
189:50 - and
189:51 - to be honest with you i mean this is
189:52 - quite a lot for me as well it is
189:54 - something that is like the
189:56 - syntax of the programming language it is
189:58 - something that you will kind of need to
190:00 - live with you're not gonna memorize this
190:02 - all just in in your head all the time of
190:05 - course like the main parts of it you're
190:07 - gonna you're gonna remember but
190:09 - uh not all of it so and you can see for
190:12 - me as well i'm just like at the moment
190:14 - okay which one is it um
190:16 - so i'm gonna test that so i'm to begin
190:18 - with we say name is first name and
190:21 - if that is null then assign
190:24 - actually let's just say middle name
190:27 - name here then use middle name and then
190:28 - print the name finally
190:30 - and i can see it says bar here so it's
190:32 - actually question mark question mark
190:34 - equal
190:35 - um
190:37 - so i actually maybe need to edit this
190:40 - text one more time so i'm just going to
190:42 - say question mark question mark equal
190:45 - bring it up because i think question
190:46 - mark equal is not going to work an equal
190:48 - question mark isn't going to work either
190:49 - it's not a value it's not a valid syntax
190:51 - a question mark question mark equals
190:53 - sorry about that
190:54 - so
190:55 - what this operator at the moment is
190:56 - doing it says that i'm gonna take the
190:58 - value on the left hand side and check
191:00 - whether it is null or not if it is null
191:02 - then i'm gonna assign the value on the
191:04 - right hand side to the left hand side
191:08 - if it is not null i'm gonna leave it
191:11 - alone
191:12 - okay
191:13 - so
191:14 - at the moment first name as you saw here
191:16 - is null
191:17 - the first parameter that we passed here
191:19 - so what it says it says okay i'm going
191:21 - to check then for middle name
191:23 - if
191:24 - if name is null and it is null and then
191:26 - it says okay middle name are you
191:28 - like presenter and i will assign that
191:30 - value here so it will be
191:32 - um
191:32 - [Music]
191:34 - basically it will be bar which is the
191:36 - value of the milling
191:38 - now if we
191:40 - in here said
191:42 - middle name is also null
191:46 - right we could have another operator
191:49 - here that says okay if after taking the
191:52 - middle name we are still null then take
191:54 - the last name
191:56 - so
191:58 - and you can see bass gets printed to the
192:00 - screen and that is because because bass
192:03 - is the last parameter that we're
192:04 - checking on line 10
192:06 - and its value is not null
192:08 - um
192:10 - so you can see how like if i then went
192:12 - here and actually said the first name is
192:15 - bar then you will see that that will be
192:17 - the value that gets printed to the
192:18 - screen here
192:20 - because
192:21 - right here
192:23 - name or first name which is bar got
192:25 - assigned to name so it is an optional
192:28 - string but it has a value which is bar
192:30 - then when you come to this line number
192:32 - nine then you're telling dart look if
192:35 - name is null then assign middle name to
192:38 - it and dart says well
192:40 - name isn't null it is bar so i'm not
192:43 - going to assign middle name to it and
192:44 - then it goes to line number 10 and does
192:45 - the exact same thing all right
192:48 - so that is like the null aware
192:50 - assignment operators and uh
192:53 - it is useful
192:55 - i personally i mean to be honest with
192:57 - you i
192:58 - as you could as you could kind of guess
193:00 - i don't use this operator so often it is
193:02 - there
193:03 - and i have no shame in saying that
193:05 - pretty much in none of my programs have
193:07 - i had to use this so it is present for
193:10 - you to
193:11 - use it is available if you want to use
193:13 - it so just
193:15 - don't be like me but try to remember the
193:17 - syntax this question mark question mark
193:18 - equal
193:20 - okay
193:22 - and i'm gonna actually fix that in my
193:24 - notes as well that it is question mark
193:26 - question mark equal
193:28 - okay
193:31 - and i'm going to check it in the notes
193:32 - that we've talked about it
193:37 - now let's talk a little about
193:39 - a little bit about conditional method or
193:42 - property access or conditional
193:44 - invocation
193:47 - now
193:48 - as we talked about in the previous
193:49 - chapter with dart as like many other
193:52 - programming languages you can
193:54 - use the dot syntax
193:56 - in order to access or drill down inside
194:00 - properties and methods or functions
194:02 - inside other objects as we saw for
194:04 - instance with the case of
194:07 - or lists in dart you can say
194:10 - i have a list and then you want to get
194:12 - its length then you would say
194:14 - the name of the list dot links and that
194:18 - drills down inside that list and gets
194:20 - the links property okay
194:23 - however as you saw also earlier in this
194:25 - chapter in chapter number five
194:28 - even lists or pretty much any data type
194:31 - in dart can also be nullable
194:33 - so how do you access
194:36 - properties of a null object so let's
194:40 - have a look at that now
194:42 - let's say i'm gonna i'm gonna actually
194:44 - delete these properties uh the
194:46 - parameters that come here to our
194:48 - function
194:50 - and i'm to say and i'm going to go down
194:52 - here and remove these parameters as well
194:56 - and in here let's just create an
194:59 - optional list of strings
195:02 - not optional list of optional strings
195:04 - but at just an optional list of valid
195:07 - strings okay so i'm just going to say
195:09 - list of strings as an option i'm sorry
195:12 - an optional list and i'm just going to
195:14 - say means
195:15 - and that is equal to let's just say at
195:17 - the moment foo all right
195:19 - now
195:21 - in here if you try to say final length
195:24 - of names or number of names is names
195:28 - links
195:29 - okay
195:31 - if you then look at the data type here i
195:34 - mean we could actually say this is null
195:37 - okay
195:38 - and you can see
195:39 - here dart actually is allowed to
195:42 - or is able to give you an error
195:46 - knowing that this list it is null at the
195:49 - moment however if you accept it i think
195:51 - it's actually better that we accept this
195:52 - value as a parameter so that dart
195:55 - analyzer cannot be too smart about like
195:58 - making assumptions about what this
195:59 - actually is at the moment so
196:03 - you can see the
196:04 - analyzer is telling you it cannot be
196:06 - unconditionally accessed because the
196:08 - receiver can be null and that means yeah
196:11 - exactly as it says it says names can
196:13 - mean all i don't know if it's not right
196:15 - now or not
196:16 - but it can be
196:18 - so how do you access that one way to do
196:21 - that like the old way of doing that is
196:23 - to say if
196:25 - names is not null
196:27 - then length
196:29 - is named length okay
196:32 - uh final length is
196:35 - uh in x okay so that tells dart that
196:39 - look i'm actually checking for null
196:41 - values
196:42 - um or i'm checking that this list is not
196:45 - null on line eight
196:48 - and if it is not null
196:50 - then i would access its length property
196:52 - and this is kind of it's called type
196:55 - promotion
196:56 - and type as in data type
196:59 - so in this case you can see on line
197:00 - number eight
197:02 - or now if i go and create a new line on
197:04 - number online number eight and i say
197:06 - names
197:08 - this is an optional list
197:11 - that can contain strings
197:13 - and in here
197:15 - you can see it is um it is typed as the
197:17 - same but it is promoted to not being
197:21 - null because you've already checked for
197:23 - it because if you remove these lines of
197:25 - code you can see now that you get an
197:27 - error the exact same line but if you
197:29 - check first for null and you don't get
197:31 - the error it's a type promotion okay
197:34 - so this is kind of like the old way of
197:35 - doing that
197:36 - um
197:38 - so let's say that you want to have you
197:40 - want to extract the length so you say
197:42 - final length or means length
197:45 - right you create the variable but you
197:47 - don't assign anything to it
197:49 - when you say if names is not null then
197:51 - the length is equal to name's length
197:53 - otherwise length is zero okay so this is
197:56 - one way of doing that
197:58 - is the old way of doing that
198:02 - and
198:03 - you may be
198:05 - trying to be smart as well and say okay
198:06 - i don't need this else statement if i
198:09 - just say this is a variable
198:11 - and by default is zero and yeah you
198:13 - would be right because length is zero by
198:14 - default and then if names is not null
198:17 - then you say okay length is equal to
198:18 - names length
198:20 - however there's a better way of doing
198:22 - that and that is using the
198:25 - quest dot question mark i believe or the
198:27 - question mark that actually it is yeah
198:29 - operator which conditionally executes
198:33 - or invokes a method or a property inside
198:37 - an optional if that optional value is
198:39 - present
198:40 - i'm going to show you how to do that so
198:42 - if we say final links
198:46 - is names and then you would put question
198:48 - mark dot and then you would say links
198:50 - and you would see this this code like
198:52 - being executed without a problem
198:54 - however if you go here you would see
198:55 - that length is an optional value it's an
198:58 - optional integer so
199:00 - you may be like okay how do i solve that
199:02 - how do i say that
199:05 - i want length to be zero
199:08 - if
199:10 - this length value is
199:13 - null meaning that if it's names if the
199:15 - names list is null and we can't extract
199:18 - the length then i want this value to be
199:20 - set to null and that is using our
199:23 - question mark question mark operator
199:24 - that we talked about the null aware
199:27 - operator that we talked about earlier
199:29 - the infix operator
199:30 - so you could just do this you would say
199:33 - length is
199:35 - if the names list is present meaning
199:38 - that its value is not null then grab its
199:40 - length otherwise take the value of 0 and
199:43 - assign it to length and if you go to
199:45 - line number nine now and i say length so
199:47 - you can see it's an integer
199:49 - so it's not
199:51 - um
199:53 - is not an optional integer anymore
199:57 - so you could do the same thing as well
199:59 - like you could say names
200:00 - and you could do the same thing with
200:02 - properties and you could also do it for
200:04 - functions so you can say names add
200:06 - as
200:08 - right so you see this is a function
200:10 - called add and then we're adding the
200:12 - value of bass to that list
200:15 - however you can't
200:16 - unconditionally invoke this function on
200:19 - an optional value because
200:21 - it might be null
200:23 - all right
200:26 - so
200:27 - that is like a very very important
200:31 - bit of learning about dark
200:34 - learning about optionals in dart how you
200:36 - could use
200:38 - nullable values and
200:40 - as you will see and we'll talk about it
200:43 - more in this course um
200:45 - there is
200:47 - many cases where you have to
200:50 - um
200:52 - take into consideration all values and
200:56 - especially if you're working with
200:58 - different libraries where
201:00 - the library cannot make too many
201:02 - assumptions and your code is dependent
201:03 - on the library and
201:06 - you will have to take into consideration
201:08 - okay the absence of a value means that i
201:10 - personally have to like take some
201:12 - um
201:13 - decisions in my code consciously in
201:15 - order to execute bits and pieces of code
201:17 - depending on the absence or presence of
201:19 - the value so try to use these optional
201:22 - um
201:23 - null aware operators that i taught you
201:25 - here which was
201:27 - um the null aware um basically like the
201:30 - decision making on to pick like the
201:31 - infix operator that tells you whether
201:33 - the left hand side or the right hand
201:34 - side depending on which one is not null
201:36 - first it picks that one okay
201:38 - that offer is very important and the
201:40 - um
201:42 - all over invocation operator which is
201:44 - here so you say some object which may be
201:46 - null then do something on it
201:48 - or the
201:51 - operator which is a null aware
201:52 - assignment operator that assigns the
201:54 - value on the right to the variable on
201:56 - the left should the variable on the left
201:58 - be null all right so these are very very
202:00 - important to understand
202:05 - okay
202:06 - um
202:07 - now that we've talked about that i'm
202:09 - gonna take that in my notes that that is
202:11 - a topic we talked about
202:14 - now
202:15 - we also have um
202:18 - very very good official documentation
202:21 - about null safety in dart so i'm gonna
202:24 - bring up this documentation on a
202:25 - separator separate screen
202:28 - and then i'm gonna bring it up here so
202:30 - you can actually see as well all right
202:35 - um
202:36 - you can see here it says understanding
202:37 - all safety and this is great great
202:39 - documentation
202:40 - about how null safety in dart works
202:45 - as you can see a lot of examples um
202:49 - i mean it talks about like from the
202:51 - absolute beginning
202:53 - what it actually means
202:56 - uh and you can see here null is at the
202:59 - level of object so it's not novel itself
203:01 - is not like an object
203:03 - so you have lists and doubles and
203:05 - integers here but null sits on top for
203:07 - itself it's kind of like the absence
203:10 - of a value
203:14 - so there's lots of examples in in this
203:16 - link and i
203:17 - highly encourage you to have a look at
203:18 - it some things you may not understand
203:20 - for instance like this one you will
203:22 - understand easily because it says there
203:24 - is something called a thing like a class
203:27 - but we haven't talked about classes yet
203:29 - and its
203:31 - name parameter name here in this
203:32 - function called showgizmo is called
203:35 - thing and you can see it is
203:37 - conditionally accessing a property on
203:40 - that thing
203:43 - so
203:44 - and then if that property in itself is
203:47 - null it conditionally access that as
203:50 - well so if this property is nullable and
203:53 - then it's accessing another property
203:55 - inside that nullable property
203:57 - if it's not null so it's i mean it's a
203:59 - great way you can chain them as you can
204:01 - see here so
204:02 - then so if this thing is not null then
204:06 - conditionally accesses this property on
204:08 - that so it's it's beautiful i mean and
204:10 - this thing is available on many other
204:11 - languages like rust and swift as well so
204:14 - it's nothing new it but it is kind of
204:16 - like
204:17 - uh such an important topic to understand
204:20 - in dart that i think you shouldn't just
204:21 - skim over it so you should just really
204:23 - learn how to work with it so
204:28 - all right um we've now talked about null
204:32 - value so i'm going to take that in our
204:34 - in my notes here
204:36 - now i think for chapter 5 five
204:40 - this information is enough so that we
204:42 - can move on to
204:44 - the next chapter
204:47 - and in the next chapter chapter number
204:49 - six we're going to talk about some
204:50 - really really juicy stuff and
204:53 - this is like chapter six is going to be
204:55 - like um
204:56 - as i can see my notes are pressing in
204:59 - a lot of really interesting
205:01 - topics such as enumerations classes
205:03 - objects
205:05 - custom operators constructors factory
205:07 - constructors class methods
205:09 - i mean inheritance and stop classing
205:12 - apps subclassing abstract classes so
205:16 - as you may have heard
205:18 - depending on what background you have
205:20 - you may be like a product owner or
205:22 - product designer a ux or whatever you
205:25 - may not have like a software engineering
205:27 - background but
205:29 - dart is um
205:31 - in its core it's an
205:32 - object-oriented programming language it
205:35 - means that things in dart are objects an
205:38 - object is an instance of a class as
205:41 - we'll talk about in the next chapter so
205:44 - um
205:45 - for you to understand dart and how these
205:47 - things work for instance we've talked
205:49 - about lists and actually typing dots in
205:52 - front of the name of the list and
205:53 - getting its lengths but you may not
205:55 - really know how that works so in order
205:57 - to understand all those things what that
205:59 - dot means you need to understand what
206:01 - objects are in order to understand
206:03 - objects you need to know what classes
206:05 - are and when you understand classes then
206:08 - you will learn about inheritance and
206:09 - then you will talk we'll talk about
206:11 - abstract classes properties static
206:14 - functions all that so
206:16 - what we're going to talk about in
206:17 - chapter six is so
206:19 - important that i believe that every dart
206:21 - developer needs to know about this and
206:24 - we're learning all of these things to be
206:26 - become good at doing flutter um so
206:30 - uh although you can go and write like
206:32 - servers or maybe server applications
206:34 - with dart or you could write command
206:36 - line applications with dart but these
206:38 - days
206:39 - dart is primarily used for writing
206:41 - flutter applications and i don't have
206:43 - any
206:44 - data to prove that but i can see for
206:46 - myself when i'm in the community that
206:48 - most people are using dart primarily to
206:50 - write flutter applications so we're
206:52 - doing all of this to learn more about
206:54 - flutter and i highly recommend that you
206:56 - don't skip these chapters where we're
206:58 - talking about art especially if you're
206:59 - new
207:00 - to flutter development so with that said
207:02 - let's leave this chapter the way it is
207:04 - right now chapter number five we're done
207:07 - with that let's go to chapter number six
207:08 - and learn about dart enumerations and
207:10 - objects
207:12 - welcome to chapter six of this flutter
207:14 - course
207:16 - in this chapter we're going to talk
207:17 - about uh dart enumerations and objects
207:21 - and these are some of my favorite things
207:23 - to actually talk about so
207:26 - um
207:26 - in most programming languages actually
207:28 - have the same facilities so
207:31 - if you follow along with the other
207:33 - chapters then you should have a working
207:35 - dart project set up now and maybe
207:37 - running in an emulator or a simulator so
207:39 - that you have the ability to press
207:41 - command s on mac or control s in linux
207:44 - and windows in order to rerun your
207:46 - project so without you having to pretty
207:48 - much do anything so
207:50 - let's then get started i'm just going to
207:52 - make that assumption that you're already
207:54 - set
207:55 - with those requirements
207:58 - so
208:00 - let's start by talking about
208:02 - enumerations and i'm gonna bring up
208:05 - the project from the previous chapter
208:08 - let's just make sure that it's on the
208:09 - screen so you can easily see it
208:12 - now i'm going to go and to this list
208:14 - function that we created remove the only
208:16 - parameter there and remove that as well
208:19 - so if i press command s now nothing
208:21 - should happen on the screen because we
208:22 - don't have any functionality in tests so
208:24 - let's talk about enumerations and what
208:26 - they actually are as you can see here
208:28 - animations are named list of related
208:31 - items
208:32 - now
208:33 - an enumeration is
208:35 - kind of like equivalent of
208:37 - making a string written programmatically
208:40 - so that it becomes an entity
208:43 - and by that i mean that
208:46 - let's say you have the
208:48 - value
208:50 - name
208:51 - and then you could say foo
208:53 - and you would also say khan's other name
208:56 - that's also foo they're both the same
208:59 - string but they're not the same identity
209:01 - in that
209:02 - i mean internally actually in terms of
209:04 - const i don't want to go too much into
209:06 - the comp how the compiler actually works
209:07 - but they're going to be going to be the
209:09 - same string
209:10 - but i mean that you've written it twice
209:12 - so it's not the exact same thing you
209:14 - have to write it twice
209:16 - so an enumeration try to tries to
209:18 - basically
209:20 - make sure that
209:22 - a value has a name that can be
209:24 - programmatically referred to so
209:27 - let's say
209:28 - um cons sorry enum and that's a key word
209:32 - in dart that's how you create an
209:33 - enumeration
209:35 - um i'm going to take this that we've
209:37 - talked about some some other things
209:39 - during the intro sorry about i have to
209:40 - look at my notes anyway anyways so we
209:43 - have the enum here that's how you create
209:45 - an animation in guards
209:47 - and you would and then give a name to
209:50 - your innovation and unlike variables and
209:52 - constants that they're
209:55 - written with camel case you'd have to
209:57 - basically use another casing here which
209:59 - is the first letter of every word in
210:02 - your iterations name has to be uppercase
210:04 - and the and the rest of the letters have
210:06 - to be lowercase so
210:08 - let's in this case for instance say
210:10 - person properties okay the properties of
210:13 - any person
210:15 - then in this enum you will write the
210:17 - different properties for instance first
210:19 - name
210:20 - and lastly
210:21 - page
210:22 - so what that basically means is that
210:24 - you've now defined a list of related
210:27 - things such as first name last name age
210:29 - which are categorized under a particular
210:32 - name which in this case person
210:34 - properties okay
210:36 - and you can refer to these in your code
210:38 - using the dot notation so you can say
210:40 - person
210:41 - properties
210:43 - first name okay
210:45 - and we can print it actually so i'm just
210:47 - gonna press command s and you can see it
210:49 - being printed to the screen so
210:51 - um
210:53 - i mean immersions are really really
210:54 - great as we go on in the in learning
210:57 - about dart and how dart works how we can
210:59 - work with flutter how we can parse data
211:01 - that comes back from a
211:04 - a server for instance
211:06 - but for now it's enough for you to
211:08 - understand that you can categorize
211:11 - related items
211:13 - under an enumeration so that you can
211:15 - refer to them later okay
211:16 - and indoor you can also get the string
211:18 - representation of these uh
211:22 - values using their name property that is
211:24 - something that's created for you by
211:26 - default so if you just say name
211:28 - you now see first name being printed to
211:31 - the screen as a string but before that
211:33 - if you print the innovations
211:36 - value here for first name it would print
211:38 - out the entire thing okay
211:40 - so that's
211:42 - short and sweet about enumerations we're
211:45 - gonna use them quite a lot
211:47 - actually
211:49 - especially later where we go to more
211:51 - advanced topics
211:53 - as we develop our real application but
211:56 - for now just know that this is how you
211:58 - create an information using an enum
211:59 - keyword and then the rest of the
212:00 - properties you just put in curly
212:02 - brackets okay
212:03 - so
212:06 - that's for
212:07 - enumerations um
212:10 - now we need to talk about switch
212:12 - statements and actually let's bring this
212:13 - back and i'm gonna
212:15 - change this to properties let's say okay
212:18 - and let's just say for instance animal
212:21 - type and let's say cat um
212:24 - dog and then let's say rabbit
212:28 - maybe
212:30 - so
212:30 - let's say we have an animal type
212:32 - enumeration and um
212:35 - we want to
212:36 - and then we for instance get in our
212:38 - function we say animal type
212:40 - animal type so there's a property that
212:42 - we expect to be passed our function
212:45 - called animal type and then
212:47 - we name that property animal type with
212:49 - kennel casing here okay so if we do that
212:52 - then we go to our function here we're
212:54 - recalling the function you can see that
212:55 - we got an error meaning that there is a
212:57 - parameter expected of type animal type
212:59 - and no one's passing them
213:01 - so at the call side which is
213:04 - the place you are calling your function
213:06 - that's what a call site is known as in
213:09 - programming so if you're coming from a
213:10 - background of design or
213:12 - um anything that is not software
213:14 - development related so you wouldn't
213:16 - probably know
213:17 - so much about the this kind of lingo but
213:19 - a call site is where you're calling a
213:21 - function so at this call site online
213:23 - number 19
213:26 - um we're gonna gonna pass an animal type
213:28 - and let's just say uh cat in this case
213:31 - okay
213:32 - so in here we could just print that and
213:35 - i'm just gonna say animal type
213:38 - i'm gonna press command s and you can
213:40 - see cat being printed here okay
213:42 - now if you want to execute
213:45 - different types of code depending on
213:47 - this animal type
213:49 - then you could you could which is not
213:52 - recommended you could use an if
213:53 - statement so if you just said if
213:56 - animal type is equal to animal type cat
214:01 - you say print all i left oh i love
214:04 - cats okay
214:06 - else if animal type is animal
214:13 - and you would say prince or
214:16 - or you would say dogs are so fluffy or
214:18 - something
214:22 - and else if
214:25 - animal type is animal type
214:29 - me
214:30 - and say
214:31 - i wish i
214:32 - had
214:36 - so this is using normal if statements
214:38 - you say if animal type is cat then blah
214:40 - blah blah
214:41 - now
214:43 - it is one way of doing it but it's not
214:45 - the recommended way of working with
214:47 - enumerations and the recommended way of
214:48 - working with enumeration especially if
214:50 - you're doing like branching code as
214:51 - we're doing here is using a switch
214:54 - statement so
214:55 - let's convert this code to switch
214:57 - um
214:58 - so let's say switch
215:00 - you put parenthesis open close and then
215:03 - open close curly brackets and in here
215:05 - you would put your narration so you say
215:07 - animal type okay
215:09 - and the way to handle these different
215:10 - branches then is with the case uh
215:13 - keyword you'd say in the case of
215:15 - animal type
215:17 - money
215:18 - print
215:19 - uh money
215:21 - sound like this okay
215:23 - case animal type
215:25 - a cat
215:26 - print cat
215:29 - and case animal type
215:33 - og print dog
215:39 - just like that okay
215:41 - now
215:42 - this is i'm great i'm actually grateful
215:44 - that we're getting this uh error so you
215:46 - can clearly see what it says is the case
215:48 - should not complete normally try adding
215:50 - break or return now what this is saying
215:53 - that you see in
215:54 - many programming languages just like
215:56 - dark when the program comes here to the
215:59 - case statement it kind of like falls
216:01 - through to the next line and dart tries
216:03 - to avoid that so it says okay if i
216:05 - handle bunny then i'm doing some stuff
216:07 - but it kind of feels like i'm like
216:09 - falling down to the next line after this
216:11 - because you didn't tell me what to do
216:12 - after the print statement so you either
216:15 - tell
216:16 - me to like completely go out of this
216:18 - function go out of the test function by
216:20 - putting the return keyword here we
216:23 - haven't talked about return really yet
216:25 - but you could do that you could just say
216:27 - okay return right after all of these so
216:29 - i'm just going to press command s
216:31 - and you will see cat being printed to
216:33 - screen which is here okay
216:35 - but if you didn't have this return
216:36 - statement statement here you would get
216:38 - an error okay
216:39 - so
216:40 - you either say return
216:42 - or you would use the break keyword now
216:45 - there's a difference between these let's
216:46 - put a print statement here and i'm going
216:48 - to say function is finished okay
216:51 - so i'm kind of expecting that
216:53 - by
216:54 - executing our
216:56 - our code here our test function here
217:00 - passing the value of cat at the moment
217:02 - that we fall into the switch
217:05 - we check that this is cat and then print
217:07 - the cat and then we return okay
217:10 - this is kind of
217:11 - what it is doing it means that it kind
217:13 - of skips over this print statement and
217:15 - you'll see soon if i say command s it
217:17 - will just say cat and then we'll return
217:19 - from that
217:20 - so this is not really what i wanted i
217:22 - wanted this switch statement to be
217:24 - executed print cat and then continue
217:26 - after switch okay and that's where you
217:28 - use the break statement so
217:31 - or the key word here so if you say break
217:33 - it breaks out of the switch statement
217:35 - and then continues with the rest of the
217:37 - function as it as you would expect so if
217:39 - i press command s here you say cat and
217:42 - then function is finished all right
217:44 - so
217:45 - switch is the preferred way of working
217:48 - with um
217:49 - enumerations especially if you're doing
217:51 - branches so you could also like
217:54 - um
217:56 - for instance if in this case he said uh
217:59 - pray make sure
218:01 - this is
218:02 - is a cat
218:04 - you could also in this case say if
218:07 - animal type
218:08 - is not animal type
218:11 - chats
218:12 - and you would return okay you could do
218:15 - this as well so this is kind of like
218:17 - a conditional statement that you're
218:19 - putting in the beginning of your
218:20 - function making making sure that any
218:22 - code executed after line 10
218:25 - is
218:26 - completely sure that the animal type is
218:29 - a cat okay so in that case you may just
218:31 - use a typical if statement so you don't
218:33 - have to do switches okay but if you're
218:36 - trying to execute spec special pieces of
218:39 - code depending on
218:41 - which value this enumeration contains at
218:44 - the moment
218:45 - then i highly suggest that you use
218:47 - switch statement instead of if statement
218:49 - all right so kind of depends on your on
218:51 - your use case all right
218:55 - okay i'm just going to mark this item as
218:57 - done in my notes
218:59 - now let's talk about classes all right
219:02 - which is one of my favorite topics to
219:04 - talk about actually
219:07 - um
219:08 - well classes in
219:10 - uh dart and in many other languages
219:12 - let's actually bring this back to how it
219:14 - was before make it a test function all
219:17 - right
219:18 - and remove the animal type from here and
219:20 - remove them i can actually continue and
219:23 - we can actually
219:25 - as well okay
219:27 - so classes in dart are
219:31 - are grouping of various functionalities
219:35 - into one packageable piece of data
219:39 - and and by that i mean for instance
219:42 - let's say that you have a function
219:44 - called run
219:45 - another function called breathe
219:48 - and then you have a person's first name
219:50 - a person's last name
219:52 - of course you could go and define these
219:54 - things like this you could say khan's
219:56 - first name
219:57 - yeah something and khan's last name is
219:59 - something
220:01 - like this
220:02 - okay
220:05 - um just like that and then you could
220:07 - have a function and sorry you would say
220:10 - run
220:11 - um and then you'd have another function
220:12 - called breathe
220:16 - you can do that but these are functions
220:19 - that are kind of like for us in this
220:20 - particular case or at least in my head
220:22 - at the moment i'm imagining these
220:24 - functions
220:25 - to be related to a person
220:27 - and that person can run that person can
220:29 - breathe that person has a first name and
220:30 - last name so the grouping of these
220:33 - related things
220:35 - is
220:36 - done with a class
220:38 - in dart at least so
220:40 - the way to do that is you would say for
220:42 - instance class which is a keyword in
220:44 - dart
220:46 - let's
220:47 - say the name of the class now for the
220:49 - naming of classes and enumerations and
220:51 - any other
220:52 - entity except for variables and
220:54 - constants
220:56 - you should use um just normal casing you
220:58 - would i don't actually know if it's
221:00 - called pascal casing or i think so
221:03 - um
221:04 - but you would just use your upper case
221:06 - the first letter of every word okay so
221:08 - let's just say person
221:10 - okay this is how you would say a person
221:14 - class all right so
221:16 - i don't think actually we can put const
221:18 - in there i'm just gonna grab
221:20 - these two functions and just place them
221:22 - inside this person class all right
221:24 - and let's in this say print
221:27 - running
221:29 - run function and with reading we're
221:31 - going to say breathing
221:33 - all right
221:34 - and in the test function you would want
221:37 - to
221:38 - create
221:40 - something called an instance of this
221:42 - class now
221:44 - instances are objects and objects are
221:47 - created from classes so
221:50 - you need to understand how
221:52 - instantiation
221:54 - works in software development and this
221:56 - is for any programming language such as
221:58 - dart
221:59 - rust
222:01 - swift python javascript where
222:05 - they
222:05 - allow you to create classes
222:08 - and now that you know what a class is
222:11 - in order to use a class you need to
222:13 - usually create something called an
222:16 - instance of that class that means that
222:18 - you tell
222:18 - the programming language that okay here
222:21 - is the class i know about that but give
222:22 - me a copy of it
222:24 - so
222:25 - every class
222:27 - can be instantiated meaning that the
222:30 - dart compiler will create a copy of that
222:32 - exact class with its data its functions
222:34 - its properties and give that copy to you
222:37 - all right so
222:39 - that is called instantiation and it
222:41 - works by using the equal sign and
222:45 - creating putting a parenthesis
222:47 - at the end of the name of the class as
222:49 - i'll show you here so let's just say
222:50 - final
222:52 - and we say person
222:54 - which is the name of our variable in
222:56 - this case is equal to as i said equal
222:58 - sign then we would write the name of the
223:00 - class and parenthesis just like that
223:01 - okay
223:02 - so now you said a person variable in
223:04 - this case is an instance of that person
223:07 - class
223:08 - now you'll understand using dots and
223:11 - notation you could say person.run you
223:13 - see
223:14 - that function is now available on your
223:16 - instance of the person class and you
223:18 - would say person
223:19 - dot
223:20 - breathe okay
223:22 - so these are
223:23 - functions that are available at instance
223:28 - level of the person class i know there's
223:30 - a lot of words that i'm just talking
223:32 - about but i think you understand the
223:34 - point here so
223:35 - this is how you instantiate the person
223:37 - class and this is how you invoke various
223:40 - functions on that class so if i press
223:42 - command s you can see it says running
223:44 - and
223:46 - if you said in this case person
223:49 - and then without instantiating using
223:51 - their
223:53 - parenthesis if you said breathe
223:55 - you will get an error here instance
223:57 - member breathe can't be accessed using
223:59 - static axis
224:00 - okay and
224:03 - that's i mean that is kind of like
224:04 - instance member is an important term
224:07 - also to remember an instance member
224:09 - means some functionality that is only
224:12 - available at the instance level meaning
224:16 - that it's not available at the person
224:18 - class level but you have to make a copy
224:20 - of person in order to be able to access
224:21 - that all right
224:24 - so
224:25 - that's
224:26 - the basic of classes
224:28 - you can do a lot with classes as we will
224:31 - talk about soon so i'm just going to
224:32 - leave that person class right there
224:35 - and then
224:37 - just going to mark that as talked about
224:40 - in my notes as well
224:42 - and let's now talk a little bit a little
224:45 - bit about objects
224:47 - well
224:49 - objects are actually quite easy to
224:51 - explain an object is an instance of a
224:53 - class so
224:56 - you wouldn't like
224:58 - when someone says oh here's an object of
225:00 - type string it means literally that
225:02 - there is a class called string i've
225:04 - created an instance of it and
225:07 - and that is an object so the word
225:10 - instance the words instance and object
225:13 - are usually used interchangeably uh but
225:16 - if you hear someone say instantiate a
225:19 - class then you would say okay what's the
225:21 - class name oh it's person all right
225:25 - and person
225:25 - is now i created an instance okay and in
225:28 - this case you can see i'm just creating
225:29 - an instance of person without actually
225:30 - doing anything with it so that's got
225:32 - kind of like a useless object all right
225:34 - but if i put i say foo as a person
225:39 - then this
225:40 - foo now is an object of type of person
225:43 - and actually you can write its name here
225:45 - and you'll see that it tells you that
225:46 - this is a person okay
225:49 - so that in short is what
225:52 - um
225:54 - objects are
225:57 - and i can see my notes that objects need
226:00 - are kind of like in the wrong place i'm
226:02 - gonna bring it to the right place sorry
226:03 - about that um
226:05 - okay
226:07 - now
226:09 - let's talk a little bit about um
226:12 - constructors
226:14 - and i can see constructors also at the
226:16 - wrong place in my notes so i'm going to
226:17 - bring those also to the right place okay
226:20 - sorry about that
226:22 - um
226:23 - now what a constructor is at its name as
226:26 - its name indicates is
226:28 - a special
226:30 - logic in a class that constructs or
226:33 - initializes or builds that class's
226:37 - instance all right so
226:39 - you may say that okay let's go to our
226:41 - function here as to our class here
226:43 - person
226:44 - and let's say every person has
226:46 - a first name or name okay so let's just
226:49 - define that we say final string name all
226:52 - right as you can see now dart is saying
226:54 - okay you said that every person has a
226:56 - name but
226:57 - and it's a final meaning that after the
226:59 - person has been instantiated or after
227:02 - that person has been initialized or
227:05 - created an instance from you cannot
227:07 - change that name because you said final
227:09 - all right
227:10 - if you said like string name is foo that
227:13 - would be different because it means
227:15 - every person instance that gets created
227:17 - has the default value
227:19 - foo for its name that's a completely
227:21 - different way of saying
227:22 - uh what the name of
227:25 - in this case as you can see we're saying
227:26 - that there every person instance every
227:29 - person
227:30 - copy that we create has a name now dart
227:32 - to say okay where is the name then you
227:34 - didn't tell me how to create it
227:37 - and that's where you would want to use
227:39 - something called constructor okay
227:42 - constructors are sometimes you uh called
227:44 - as initializers depending on the
227:46 - background of the programmer they may
227:48 - call it constructor initializer uh or
227:51 - maybe some other names that i don't know
227:53 - about but if you if you hear that a
227:55 - constructor then you will now know what
227:57 - i'm talking about
227:59 - soon actually
228:01 - so
228:02 - now what you can do at least in visual
228:04 - studio code when you get this error is
228:06 - to just hover hover over it and then
228:08 - press command on mac or control on
228:11 - windows on linux and press dot
228:14 - now you will see you will get some
228:16 - suggestions here
228:17 - and it will the second suggestion at
228:19 - least for me here says create
228:20 - constructor for final fields okay and i
228:23 - can just press that
228:24 - and what happens here now you see it's
228:27 - that it creates something that looks
228:29 - kind of like a function but it doesn't
228:31 - have a name
228:33 - its name is implicitly set to the name
228:35 - of the class okay
228:37 - so basically it says i'm a special
228:40 - function with the same name as the class
228:42 - and i expect a value to be given to me
228:46 - which i will then in turn assign to the
228:49 - name property of myself
228:51 - it's kind of like a strange way of doing
228:53 - things but it is quiet clean as well
228:56 - okay
228:57 - after you do that so this is how you
228:59 - create a constructor after you do that
229:01 - then at the call site where you're
229:02 - calling this person class to create an
229:05 - instance of it it will complain saying
229:07 - that oh i'm expecting an argument
229:10 - but i didn't find any
229:12 - and that's where you have to pass the
229:14 - name so let's say in this case is foo
229:17 - bar okay
229:18 - and then on the next line you can just
229:20 - say print foo name
229:22 - all right and press command s and then
229:25 - you can see foo bar being printed to the
229:27 - screen so
229:29 - that is like the basic of a constructor
229:31 - that's how you construct instances of
229:33 - your class all right
229:35 - now you may be saying that all right i
229:38 - don't want
229:39 - i mean you can do many fancy things with
229:42 - constructors you could say okay
229:45 - this name for instance by default must
229:48 - have a special value you could do that
229:50 - there's lots of things you can do with
229:51 - constructors which i'm not going to go
229:52 - into the details of
229:54 - but right now just know that a
229:56 - constructor is this special kind of
229:58 - function that has the same name as the
229:59 - name of the class
230:01 - and then parenthesis and then you put
230:03 - your values in here all right
230:08 - okay
230:09 - that was
230:11 - constructors
230:13 - um
230:14 - now
230:16 - let's talk a little bit about um
230:21 - methods all right
230:24 - and
230:25 - what methods are
230:27 - i'm actually going to go here and say
230:29 - we're going to talk about methods
230:32 - and those at the wrong place in my notes
230:34 - as well sorry about that
230:36 - a method of a class we've talked about
230:38 - already to be honest with you and a
230:39 - method of a class is
230:41 - um
230:42 - a function on the class
230:45 - which
230:46 - is usually referred to as an instance
230:48 - method meaning that the function is
230:50 - available after you've instantiated that
230:52 - class all right as we're doing in line
230:55 - number 14.
230:56 - name is an instance variable
231:00 - so is a variable that is available at an
231:03 - instance level is not an instance method
231:06 - an instance method should be a function
231:08 - all right so let's go and create a
231:10 - function here that doesn't return any
231:12 - value denoted by the void return type
231:14 - and we say print name all right
231:17 - the
231:18 - functionality of this function is only
231:20 - just to print
231:22 - class all right that's all it all it
231:24 - does
231:25 - and in dart you're also now that we're
231:28 - talking about this i'll just mention
231:29 - also in dart it's usually
231:31 - better not to prefix your instance
231:35 - variables or instance functions
231:38 - inside the class itself using
231:41 - this
231:42 - keyword this
231:45 - keyword in dart
231:48 - that this this
231:50 - or that this keyword
231:54 - basically refers to the current instance
231:56 - of this class all right
231:59 - so you could either tell print name to
232:01 - print this dot name or it's actually
232:04 - better to remove this and refer to it as
232:07 - name that's the recommended way of doing
232:08 - it okay so avoid the keyword this as
232:11 - much as you can
232:13 - unless you have to
232:15 - and we'll come to those points hopefully
232:17 - later in this
232:19 - in this course why you may have to do
232:21 - that while you may have to use this
232:24 - all right now we have the print name
232:27 - instance method all right
232:30 - so let's just use it instead of this
232:32 - print function that we're doing here
232:33 - let's just say foo
232:36 - dot prints name all right command s or
232:39 - control s
232:40 - on linux and windows and command sun on
232:43 - the macintosh and then you get the
232:45 - flutter
232:47 - foo bar printed here or you could just
232:49 - say
232:50 - print
232:50 - i'm going to
232:52 - i will now print the name of this person
232:56 - in single quotes we don't need double
232:58 - quotes okay command s and you will see
233:00 - that message being printed here
233:01 - followed by the actual name of that
233:04 - instance so
233:05 - if someone says method or instance
233:07 - method you will then know what we're
233:09 - talking about is a function created at
233:11 - the class level that does some stuff all
233:14 - right so that's short and sweet
233:18 - um
233:20 - okay
233:21 - now that we've talked about that
233:23 - let's talk a little bit about
233:25 - inheritance and subclassing i'm gonna
233:28 - bring a caption here so you know what
233:30 - we're talking about
233:32 - now
233:34 - inheritance and subclassing are so so
233:37 - important in dart
233:39 - and in any other object-oriented
233:41 - programming language that i don't think
233:42 - anybody should like jump over it or
233:45 - um like for instance i know
233:47 - developers working in various
233:48 - programming languages that are object
233:50 - oriented but they kind of steer clear of
233:52 - the object oriented aspects of that
233:55 - language and maybe they don't need it
233:57 - and maybe they just feel like it's
234:00 - unnecessary or they feel like oh it's
234:02 - just too complicated but in dart if you
234:04 - want to become a good flutter developer
234:06 - or a good dart developer you need to
234:08 - know about
234:09 - um classes and um
234:12 - inheritance so
234:15 - so let's
234:17 - talk about inheritance what inheritance
234:19 - in dart is is that
234:22 - it allows you to
234:24 - define a class
234:26 - and then
234:27 - to add more functionality to that class
234:30 - into a new class
234:32 - so
234:33 - let's for instance say
234:37 - we go into our test function here and
234:40 - remove that okay
234:42 - that code and also remove the person
234:44 - class now
234:45 - let's create a
234:48 - class livingthing all right
234:51 - and then we say funk
234:53 - sorry void
234:54 - breathe
234:56 - and then we say print
234:59 - living thing is breathing okay
235:01 - so we created a class living thing and
235:04 - we're saying that anything that lives
235:06 - needs to breathe now this may be an
235:08 - assumption but anyways
235:10 - anything that lives and is above the
235:13 - and it's above the ground and it's
235:15 - basically alive is breathing okay
235:18 - so that's our function on the living
235:21 - thing now
235:22 - you may say okay
235:25 - any living thing may also have the
235:26 - ability to move okay then we have a
235:29 - function called move i'm going to say
235:30 - print i am moving all right
235:35 - so now you may say okay now i kind of
235:37 - want a class called uh cats all right
235:41 - cat is also a living thing
235:43 - one way to do that to go about creating
235:45 - a class uh
235:46 - the cat class is to say class cat
235:49 - and then you say um i kind of need these
235:52 - functions and you'll go and copy it and
235:54 - then you paste them here all right
235:56 - and then you say okay i'm good to go now
235:59 - but one of the absolute
236:02 - paramount paramount
236:04 - qualities of
236:05 - a developer is the
236:07 - developers do not like to repeat
236:10 - themselves
236:11 - and
236:12 - it is such an important concept in
236:14 - programming that you need to avoid
236:16 - repeating yourself that you need to just
236:18 - coin that down now
236:19 - get it straight so that you don't
236:22 - make this mistake as we're doing in this
236:24 - code right now so
236:27 - the first thing you want to do as a
236:28 - developer say how can i grab this code
236:31 - and
236:32 - and it's obvious that the cat is also a
236:34 - living thing so
236:36 - that's where you want to use the extends
236:39 - um keyword that allows you to inherit
236:43 - the functionality inside the living
236:45 - thing class into your cat class so
236:48 - in this case i'm saying cat class
236:50 - extends or read it in english as
236:52 - inherits
236:53 - living
236:54 - thing all right so
236:57 - you can see that the cat class in itself
236:59 - is empty right now but if you go to the
237:00 - test function and i say
237:03 - final
237:05 - fluffers
237:07 - is a cat
237:09 - and then i can say fluffers
237:12 - uh you can see that now that the cat
237:14 - class has breathe and move uh
237:17 - functionalities or functions actually
237:21 - so although cat itself didn't define
237:23 - these functions but they're available
237:25 - for the instance in this case called
237:27 - fluffers of type cat to use so you could
237:30 - just say move and then you can say
237:32 - fluffers
237:35 - okay
237:36 - so if i run this code if i delete
237:38 - everything in the debug console and run
237:40 - this code you can see that the cat
237:42 - instance called fluffer is the same move
237:44 - or i am moving and it will also say
237:46 - living thing is breathing okay
237:50 - now
237:53 - you could also i mean we could also talk
237:55 - about now that we're talking about
237:57 - inheritance and subclassing
238:00 - um
238:01 - actually maybe i shouldn't call a
238:02 - subclassing but i also think it's
238:04 - important for you to understand what
238:06 - subclassing is subclassing is literally
238:07 - the same thing as inheritance
238:09 - subclassing is saying that you have a
238:11 - class and you're creating a sub
238:12 - component like a sub
238:14 - thing of it
238:15 - which may actually have
238:18 - it's a little bit of a strange naming
238:19 - sub because sub means kind of like a
238:21 - subset of things available in that class
238:24 - but it actually is like a superset
238:26 - because
238:27 - it will
238:28 - grab everything like the cat at the
238:30 - moment has every functionality in living
238:32 - thing right
238:33 - but it may not necessarily do that
238:36 - it's kind of complicated to explain but
238:38 - if you hear subclassing or inheritance
238:41 - know that
238:43 - that is what we mean
238:45 - you
238:46 - use the extends keyword usually okay
238:52 - all right now we've talked about
238:54 - inheritance and subclassing
238:58 - so
238:59 - i'm gonna
239:00 - move a little bit uh my notes around
239:03 - sorry about that that i'm looking away
239:05 - from the screen and uh
239:07 - now we're gonna talk about abstract
239:10 - classes all right
239:13 - there's good documentation about
239:14 - abstract classes and
239:18 - what we're going to do here
239:21 - is to just change this class living
239:24 - thing at the moment to abstract
239:28 - and you see that everything works as
239:30 - expected
239:32 - well
239:34 - an abstract class
239:36 - is very similar to
239:40 - a normal class and there's good
239:42 - documentation about what an abstract
239:43 - class actually is from a dart
239:45 - perspective and you can see it says use
239:46 - the abs abstract modifier to define an
239:48 - abstract class class that cannot be
239:50 - instantiated all right
239:52 - so an abstract class is just like a
239:56 - normal class that can't have instances
239:59 - so
240:00 - in this in this case once we made living
240:02 - thing an abstract class if you then go
240:05 - and hear say
240:07 - thing
240:09 - is a living thing
240:11 - right
240:13 - and
240:14 - it says oh abstract classes can't be
240:16 - instantiated
240:18 - so an abstract class is a class that
240:22 - groups logic into itself
240:24 - with the sole purpose of other classes
240:28 - using its functionality okay
240:31 - so if you mark something as an abstract
240:33 - class in dart you what you need to just
240:36 - know in your head is that this is a
240:38 - class that has some utilities that has
240:40 - some code that is supposed to be used in
240:44 - other normal classes all right
240:46 - and no one is supposed to just go and
240:49 - create an instance of living thing in
240:51 - this case
240:52 - instead
240:54 - at the call side you need to instantiate
240:57 - classes of that type so
240:59 - now we can say cat as we did before and
241:02 - we can say thing breathe move or
241:04 - fluffers
241:08 - so
241:09 - that's what an abstract class is
241:12 - it is
241:14 - just a class that cannot be instantiated
241:16 - it's usually like a utility class that
241:17 - other classes are supposed to inherit
241:19 - from all right
241:23 - okay um
241:25 - i can see now in my notes and i'm gonna
241:28 - take that we've talked quickly about
241:29 - abstract classes
241:32 - and i'm going to bring
241:34 - the next topic up which we're going to
241:36 - talk about which are factory
241:39 - constructors
241:41 - so
241:43 - i absolutely personally love factory
241:45 - constructors to be honest with you
241:49 - let's remove our abstract class i'll
241:51 - explain to you what a factory
241:55 - is let's see now we have a
241:56 - glass cat all right
241:59 - um and then in here
242:02 - let's give the cat a name
242:05 - of type string
242:07 - command dot or control dot
242:10 - for linux windows on the name in visual
242:12 - studio code at least to create a
242:14 - constructor you can do that and say
242:16 - create constructor or you could manually
242:18 - create a constructor so you say cat
242:21 - this name okay that's a constructor
242:24 - and also know that um you could make
242:27 - this a const because it is actually
242:29 - using a final field but we're going to
242:30 - talk about that later
242:32 - now we have a cat class here that has
242:36 - a constructor called just cat meaning
242:39 - that in here you can say
242:43 - final
242:44 - fluffball
242:45 - is cat
242:48 - and then you say fluffball
242:50 - all right so now you're creating an
242:52 - instance of the cat class and the name
242:55 - of the variable is called fluffball
242:57 - and the name of the cat is fluffball
243:02 - right
243:04 - so
243:06 - then you can say print
243:08 - off
243:09 - ball
243:10 - dots name all right
243:12 - so
243:13 - that
243:14 - is just normal constructor it has
243:16 - nothing to do with a factory constructor
243:17 - but what a factory constructor actually
243:19 - is
243:20 - is a way for you to construct instances
243:24 - of your classes
243:26 - and using convenience functions
243:31 - so what that means is that if you in
243:33 - your code see that
243:35 - you are creating instances of this class
243:38 - like 20 times 30 times different places
243:41 - in your application using this exact
243:43 - same name fluffball
243:46 - then
243:47 - you need to then create a factory
243:49 - constructor that is a clear sign that
243:52 - your usual use case for create an
243:55 - instance of class is
243:56 - through
243:57 - the same name of fluffball
244:00 - so
244:01 - that's where factory constructors are
244:03 - useful for and as their name indicates
244:05 - is a way to
244:06 - create
244:07 - a product like a factory does uh super
244:10 - fast for you okay so it's the speed at
244:13 - which you can create an instance of a
244:14 - class that the factory constructor
244:16 - shines at all right
244:18 - so let's now look at a factory
244:20 - constructor that gives us an instance of
244:22 - cap whose name is always fluffball all
244:25 - right
244:26 - the way to do that is you would say
244:28 - factory
244:29 - and you would say cat dot fluffball
244:33 - so you say any class called cat which is
244:36 - this class has a function called
244:39 - fluffball which is this factory
244:41 - constructor and then you would put your
244:43 - parentheses in here
244:45 - and then what you need to do is to kind
244:48 - of
244:49 - set up your class instance in this case
244:51 - like if you say curly brackets and say
244:53 - this name
244:54 - is fluff
244:56 - like that that's how you're basically
244:59 - creating an instance of your class but
245:02 - the usual way of doing that is you say
245:04 - this
245:04 - name
245:06 - dude let's see uh
245:08 - factory cat fluff ball
245:11 - and then you would say
245:13 - name is fluff
245:16 - see that i've kind of like forgotten the
245:19 - um
245:20 - uh
245:21 - syntax for factory uh so let's go i'm
245:24 - gonna bring up safari here and let's go
245:26 - and say guard factory constructor
245:30 - i'll bring bring up here factory
245:33 - constructor so let's say factory
245:35 - and let's go and see an example and you
245:37 - can see here it says factory logger like
245:40 - that okay and there's a factory logger
245:42 - blah blah like that so
245:44 - are basically so what what it's
245:46 - basically saying in here is saying that
245:48 - this in this function you need to return
245:51 - something okay so let's close that
245:53 - safari window and what we're going to do
245:55 - in here we're going to say return cat
245:57 - and as the name we're gonna say
245:59 - fluffball all right so that's how you
246:01 - would create like a factory constructor
246:05 - so what you're doing here is saying that
246:06 - i have a constructor called fluffball
246:09 - whose return value is a cat
246:11 - but inside i have some special logic
246:13 - that kind of packages it up just like
246:15 - you do in a factory so
246:18 - let's go in here instead of doing cat
246:19 - fluff ball like that then you can just
246:21 - say cat dot fluffball okay so it kind of
246:24 - like became a
246:26 - um
246:28 - it became like a convenient function in
246:31 - that you can just say cat fluff ball and
246:33 - then you say print
246:35 - fluffball
246:37 - dot
246:39 - name and you can see by default it is
246:42 - or whatever you put here
246:44 - fluffball 2 print and it gets printed to
246:46 - the screen ok
246:49 - so that's how you would create a factory
246:51 - constructor and a factory constructor is
246:53 - really really important when you're
246:54 - talking about class clusters
246:56 - we haven't talked about class clusters
246:58 - and to be honest with you i don't think
247:00 - that we're gonna talk about that in this
247:03 - course
247:04 - i don't think anywhere in this course
247:06 - i've actually talked about
247:08 - class clusters
247:10 - but know that
247:13 - in the context of dart and abstract
247:15 - classes a factory constructor does not
247:18 - necessarily
247:20 - have to return an instance of the same
247:23 - class all right so it can actually
247:26 - return
247:27 - an instance of another class
247:29 - but i highly suggest that you actually
247:32 - go and read about factory constructors
247:35 - as i just did just google
247:37 - factory constructor
247:39 - dart and you will see some examples of
247:41 - it
247:42 - um
247:43 - they are really useful if you're working
247:44 - with a lot of data and you're doing like
247:47 - data parsing
247:48 - json parsing etc
247:51 - but
247:52 - i don't think it's so useful right now
247:54 - for you to know
247:56 - but know that it is there available for
247:59 - you to use but
248:01 - i leave it up to you to go and read more
248:03 - about it yourself
248:07 - okay
248:08 - and we've now talked about factory
248:09 - constructors and um
248:11 - now let's talk a little bit about
248:14 - custom operators so i'm going to bring
248:17 - custom operators here okay
248:20 - now
248:22 - a custom operator in dart is
248:27 - an operator such as an equal sign or
248:30 - equal equal sign for for instance
248:33 - um checking equality um of an instance
248:37 - of an object with another instance of
248:39 - the same object
248:40 - um a custom operator allows you in dart
248:42 - to override the ability of your class to
248:47 - be compared to or added to or
248:50 - subtracted from multiplied with
248:52 - something
248:54 - with your own logic now let's see what i
248:56 - mean by that let's say that
248:59 - you have final uh cat one and that is
249:02 - equal to cat with the name of foo
249:05 - then you say okay i have cat two now
249:07 - with the exact same name
249:09 - and then you'd say if cat one is exactly
249:12 - the same as cat 2 prints they are equal
249:16 - otherwise say print they are not equal
249:19 - ok
249:22 - so
249:22 - these two instances have the exact same
249:25 - name
249:26 - foo
249:27 - and if you run this code now you will
249:29 - see
249:30 - that dart is said it says that they're
249:32 - not equal although internally you may
249:34 - think hmm
249:35 - for me in my project anytime
249:39 - two cats have the same name
249:41 - i want them to be considered equal and
249:44 - this is like where
249:46 - things get interesting because then you
249:48 - can override this particular
249:51 - function or operator at the language
249:55 - level only for your class so the way to
249:57 - do that is you would go and start by
250:00 - writing override
250:02 - with an ad sign
250:04 - and you say
250:06 - bool operator equal equal covariance i'm
250:09 - going to explain all this don't worry
250:10 - about it cat and you say cat and then
250:13 - here you say
250:14 - um other
250:16 - name is me okay and then we get a
250:19 - problem with the hash
250:20 - i'll add that as well
250:22 - so don't worry about all of this um i
250:25 - will explain it in details
250:27 - um
250:28 - all right so okay
250:31 - so let's start by looking at what i just
250:33 - did here with the override
250:38 - notation here
250:40 - overwrite is very important term for you
250:42 - to understand in object-oriented
250:43 - programming and that is
250:45 - wherever you have
250:46 - um
250:48 - a class
250:51 - and you are
250:53 - inheriting from that class in in our
250:55 - case for instance class cat you can see
250:58 - that it doesn't have any extents
251:00 - but by default in dart every class
251:03 - inherits implicitly from the object
251:06 - class so you could just say extends
251:08 - object
251:09 - and that is the exact same thing as
251:11 - omitting writing that
251:13 - those two words so
251:14 - just know that cat comes from object
251:17 - an object internally already defines an
251:21 - operator called equal equal that returns
251:24 - a boolean
251:26 - a boolean is a value that can either
251:28 - include true
251:29 - that can either be true or false
251:32 - and it's great just for saying that is
251:34 - this this or is this that
251:37 - is this this or not kind of like that
251:40 - so a boolean is a data type all right so
251:43 - that operator an operator is a keyword
251:46 - as well in dart basically saying telling
251:49 - dart that we are going to change
251:52 - change as in override
251:54 - the functionality of this equally equal
251:57 - operator that is defined at the object
251:59 - level with our own
252:01 - implementation all right
252:03 - let's actually bring the extents here
252:05 - and go into this object definition just
252:07 - select it right click on it and say go
252:09 - to definition all right
252:11 - and search for operator equal equal
252:14 - you'll see that it is defined right
252:16 - there for you okay
252:17 - and there's lots of documentation about
252:19 - what it actually does
252:22 - so that's this syntax we're overriding
252:24 - we're changing the definition of that
252:26 - function all right
252:29 - so
252:30 - then since this is a simple function an
252:33 - operator in itself is a function it
252:35 - actually you can see it starts it has
252:37 - like a
252:39 - parenthesis here
252:41 - in the parenthesis you get the value
252:43 - that that operator is comparing your
252:46 - class with okay so
252:50 - it's that
252:51 - that value that your class is being
252:53 - compared to also needs to be a cat
252:54 - because you cannot in dart is not
252:56 - recommended that you compare tune
252:58 - classes of different types with each
253:00 - other so
253:01 - here we say covariance covariance
253:04 - is a keyword that you merely use in dart
253:07 - but i think it's important for you to
253:08 - understand what it does is
253:10 - that it tells dart that although
253:13 - at the object level
253:15 - we said that the parameter that comes in
253:17 - is of type object but in our case we are
253:21 - sure that the value that comes in this
253:23 - function is actually a cat all right so
253:26 - covariant tells dart that
253:28 - forget what the super class which is
253:31 - object defines as the parameter type for
253:34 - this parameter because if you remove
253:36 - covarian you see it says cat
253:39 - an object as a parameter
253:41 - but if it's a covariant you're kind of
253:43 - like overriding even that
253:46 - assumption all right so we say okay an
253:48 - equal so we're mean compared our
253:51 - instance of cat is being compared with
253:52 - another cath instance
253:54 - and what we're doing is that we need to
253:56 - return a boolean saying whether they're
253:57 - equal or not and you can see i'm just
253:59 - comparing
254:00 - i'm just comparing the name which is our
254:03 - name
254:04 - with the other instances name all right
254:07 - now when you do that as you saw then we
254:09 - get a problem here which is kind of like
254:12 - a warning that tells you that okay
254:14 - now that you've you've overwritten this
254:17 - um
254:18 - operator you also need to override the
254:21 - hash code all right
254:23 - now
254:24 - to honestly i don't think like hashcode
254:26 - is such an important thing to talk about
254:28 - right now but just know that hashcode is
254:32 - a special number
254:34 - that you assign
254:36 - to your or a special identifier that you
254:39 - assign to your instance of classes that
254:41 - is
254:42 - then used inside collections for
254:44 - instance if you put your instance of of
254:47 - cat inside
254:48 - a
254:49 - dictionary
254:50 - then or sorry or inside a map as it is
254:53 - called in dart which we talked about i
254:54 - believe in chapter
254:56 - four
254:58 - yes in chapter four so if you didn't
254:59 - watch chapter four i strongly suggest
255:01 - that you do that
255:03 - so
255:04 - if you put instances of your
255:10 - of your cat class inside a
255:13 - set
255:14 - or inside a map
255:16 - then the way dart
255:20 - knows that the the keys inside its map
255:23 - or the values inside the set are
255:25 - actually unique it's using this hash
255:27 - value all right
255:28 - so
255:30 - if you see if i go here and say command
255:32 - dot to get a suggestion how to fix this
255:34 - it says create method hash code
255:37 - that is what is required to fix this
255:39 - word
255:40 - so you can see that it's an override
255:43 - which means that this hash code
255:45 - getter was defined on the object class
255:48 - if we go to object and look for that you
255:50 - can see that it is actually defined
255:52 - there
255:53 - and we're overwriting its value
255:56 - and here it says i'm going to go to
255:57 - super and get that value
256:00 - super is our object so as super class
256:03 - that sits up above us all right
256:06 - but if you want to overwrite that in
256:08 - case you in this case you can just say
256:09 - okay don't get the supers hash code just
256:12 - get the name hashtag and to be honest
256:14 - with you this is just a
256:15 - very technical stuff which i don't think
256:17 - belongs right in this chapter six but
256:20 - just know that here we're creating an
256:23 - identifier for our cat class
256:26 - which allows dart to understand
256:29 - that if this
256:31 - cat classes instances are placed inside
256:35 - collections such as a map or a set
256:39 - then it will know
256:41 - if they're unique or not okay
256:45 - all right
256:47 - so now that we've done all of this we
256:49 - can rerun the code
256:52 - and you will now see that it says they
256:54 - are equal
256:55 - that's that's all we wanted that's
256:57 - really all we want
256:58 - but there was a lot of code actually i
257:00 - don't know it's like four lines of code
257:02 - um
257:03 - this is not even considered a line of
257:05 - code it's kind of like a
257:09 - is a hint to the analyzer but uh
257:14 - so
257:15 - you could just say it's pretty much just
257:16 - two lines of code but it is quite a lot
257:18 - of
257:19 - new things to be honest with you for you
257:21 - to
257:22 - grasp
257:23 - so i leave this here so you can have a
257:25 - look at it
257:27 - um and
257:29 - i think
257:30 - for this chapter to be honest with you
257:32 - we've talked a lot now in this chapter
257:34 - about enumeration switch statements
257:37 - classes objects uh constructors
257:39 - factory
257:41 - constructors
257:42 - abstract classes inheritance a lot so it
257:46 - was quite a heavy chapter this chapter
257:48 - six but
257:48 - i suggest that you
257:51 - go and read the also the official
257:53 - documentation for dart because as i said
257:55 - we don't have the possibility to talk
257:57 - about everything
257:58 - um
258:00 - otherwise this course will just be
258:02 - enormously big and that's not what i
258:04 - want to do so
258:06 - please go and read the documentation
258:08 - about the things that we talked about
258:09 - especially especially object oriented
258:11 - programming in dart so
258:14 - and with that said
258:17 - in the next chapter we're going to talk
258:19 - about some advanced features in dart
258:21 - such as
258:23 - future
258:24 - async operations streams and generators
258:28 - so
258:31 - please have a look about at the
258:32 - documentation and i will see you in the
258:35 - next chapter
258:37 - hello everyone and welcome to chapter 7
258:40 - of this flutter course in this chapter
258:42 - we're going to talk about advanced dart
258:44 - concepts
258:46 - things such as extensions futures
258:48 - streams
258:50 - um
258:50 - async await generators and um
258:54 - generics as well
258:56 - so
258:57 - uh i'm kind of assuming that you've
258:58 - already set up the project that we've
259:00 - talked about in the previous chapter so
259:01 - i'm not going to go through that again
259:03 - and then i'm assuming that we have like
259:05 - some sort of an iphone simulator so
259:07 - or an android emulator or any device
259:10 - that you may be able to test your
259:11 - project on so
259:13 - i'm going to bring up my project here so
259:16 - i'm going to place it right there
259:18 - this is how we left the project in the
259:19 - previous chapter
259:21 - and then i'm going to do command shift p
259:23 - on mac or control shift p in linux and
259:26 - windows in order to select the device
259:27 - and i'm just going to say iphone 13 pro
259:30 - which is a simulator that i have here
259:34 - um
259:35 - right there and then i'm just going to
259:37 - go and say run
259:39 - run without debugging okay so this is
259:42 - going to take its time and i just
259:43 - thought to
259:45 - then use this time to explain a little
259:47 - bit about extensions
259:49 - um
259:49 - as you can see here extensions are
259:52 - the ability for
259:53 - the programmer and dart in order to er
259:57 - are there the ability for the programmer
259:58 - to
259:59 - extend
260:00 - or add functionality to an existing
260:03 - class in chapter six we talked about
260:05 - classes and objects so i kind of um
260:09 - would
260:10 - wish for everyone who is in this chapter
260:12 - to act actually have followed that
260:14 - chapter as well
260:15 - uh i'm actually going to go here and go
260:17 - to do not disturb yeah i am actually
260:19 - there so let's have a look at a simple
260:21 - extension in dart and how we can use
260:23 - that i can see that the programming
260:25 - program is running i'm going to delete
260:27 - the old code that we had and i'm going
260:28 - to bring my face to that bottom right
260:32 - and i'm just going to be a little bit
260:33 - aware of these um
260:36 - captions that i'm displaying on the
260:37 - screen and that they're blocking the
260:39 - screen so i'll just make sure that you
260:40 - can see the contents as
260:43 - as we go on so
260:45 - um let's also remove all of that and
260:47 - then let's just say that we have a
260:49 - simple cat class here who has a name
260:52 - and we can go in here and say final
260:55 - meow
260:56 - is yeah an instance of cat and i can say
260:59 - print
261:00 - and me
261:02 - actually we have to provide a name i can
261:03 - see here and let's just say fluffers
261:07 - and save meow
261:09 - dot's name okay so we print that name
261:11 - and i'm gonna say command s
261:13 - just like that and um perhaps gonna
261:17 - bring up visual studio code so you can
261:19 - actually see the output so command s and
261:21 - you can see that um
261:24 - where are we getting this there are
261:25 - equals oh that's an old command so
261:27 - command is and you can see fluffers is
261:29 - printed to the screen so that's because
261:30 - we have the name here okay so i'm also
261:33 - going to get rid of this caption right
261:34 - now so you can see the entirety of the
261:36 - code so like that bring it down here i'm
261:39 - also going to get rid of my
261:41 - simulator and bring it to another screen
261:43 - okay so now let's say that you want to
261:45 - add a functionality to this or a
261:47 - function to this class
261:49 - that allows a cat to run or allow the
261:52 - cat to jump so one way to do that is to
261:55 - actually go to the
261:57 - cat class class itself and create a
262:00 - function in there but what you can also
262:02 - do is to go and say extension
262:04 - for instance run on cat that's the
262:07 - syntax for creating an extension what
262:10 - you're saying is that
262:11 - you're extending the
262:13 - class call cats
262:15 - with
262:16 - a new functionality that is called run
262:18 - now this is not the name of the function
262:20 - itself it's just the name of your
262:22 - extension
262:23 - and you don't have to really know about
262:25 - the name right now so much it's just
262:27 - when you can go and become more advanced
262:29 - in dart and you for instance create
262:30 - libraries for yourself that
262:32 - you
262:33 - create extensions on different classes
262:35 - for instance in your library and then
262:37 - people or programmers who use your
262:39 - library then they can in
262:41 - basically include
262:43 - specific extensions that you've included
262:45 - in your library
262:47 - in their code or they can exclude them
262:49 - and so
262:52 - just know that it's just a name on the
262:53 - extension so it doesn't mean so much
262:55 - right now okay so then you can just
262:57 - create a function that has no return
262:59 - value called run and then you can say
263:02 - print and cat
263:04 - name is running
263:06 - and you know this syntax from the
263:07 - previous chapters that this is how you
263:09 - format a string and then in here you're
263:11 - basically doing um spring interpolation
263:15 - interpolation i think it's called
263:18 - and you're including that name inside
263:20 - your own string so the result is going
263:22 - to be cat
263:23 - space
263:24 - the name of this cat instance
263:27 - space is running okay
263:29 - so
263:30 - using that
263:31 - then you can every cat instance in your
263:34 - project is gonna get
263:36 - that function called run so you can just
263:39 - say me out run
263:41 - and command this and you can see that it
263:43 - says cap fluffers is running so
263:46 - just know that extensions are
263:49 - they're a great tool for you to use if
263:52 - you believe that there is a
263:53 - functionality that you're adding to an
263:55 - existing class which it doesn't really
263:57 - belong
263:58 - in that class itself
264:01 - but
264:01 - it may for instance belong in the
264:04 - current source file that you're working
264:05 - with so
264:07 - extensions are very very useful and
264:10 - but i also believe that they need to
264:12 - kind of be used with care kind of like
264:14 - sparsely so when you really need an
264:16 - extension you could just go and create
264:17 - an extension and they have limitations
264:20 - and as you get more used to
264:23 - programming in dart you will understand
264:24 - their limitations a little bit better so
264:27 - just know that they're there
264:29 - and
264:30 - can be used another example of an
264:32 - extension is for instance if you had a
264:34 - class
264:34 - person
264:36 - let me say first name
264:39 - property okay
264:41 - so this is an instance property and then
264:43 - you would say uh last name
264:45 - and then you say command dot individual
264:48 - studio code on mac or control dot in
264:51 - linux and windows and you create a
264:52 - constructor for your personal class okay
264:55 - so that's how you create an instance of
264:57 - your person class then you can go in
264:59 - here and you say
265:01 - um
265:02 - final fou is person whose first name is
265:05 - who and whose last name is bar okay
265:08 - and in here let's say you want to be
265:11 - able to calculate a person's full name
265:13 - all right so what you could do is to you
265:16 - could say extension
265:17 - for me
265:19 - one person
265:21 - and then here you could just say i have
265:23 - a i want to calculate the full name so
265:27 - that the result type is going to be a
265:28 - string
265:29 - and then you want to create a getter now
265:31 - we haven't talked about getter so much
265:32 - but just know that it's kind of like a
265:33 - property it's a property that can only
265:35 - be read forever but it cannot be written
265:37 - to so you just say get
265:38 - and then you say phoney
265:40 - as the name of the property and you will
265:42 - say that is equal to
265:45 - dollar first name
265:46 - space dollar last name okay
265:50 - so what you're saying here is that i
265:51 - have a getter whose return type is
265:53 - string and whose name is full name and
265:55 - it returns the first name and last
265:56 - memory with the space in between and
265:58 - then in here you could just say print
266:01 - foo
266:02 - for me all right
266:04 - and command s then i will bring the
266:07 - i'll remove the caption so you can see
266:09 - that foo bar is printed to the screen
266:12 - okay
266:13 - so that's for extensions and i'm gonna
266:16 - note that here in my i'm gonna mark it
266:19 - in my notes that we've talked about
266:20 - extensions all right
266:23 - now the next thing to talk about the
266:24 - next topic is futures
266:27 - and as you can see here future is a data
266:29 - to be returned in the future as its name
266:30 - suggests so
266:32 - um
266:33 - and that is part of something called
266:35 - asynchronous programming if you haven't
266:36 - uh been doing uh programming before you
266:39 - may not be so
266:40 - familiar with the term synchronous or
266:42 - asynchronous um
266:44 - a synchronous task is a task that
266:47 - happens when you ask for it and it
266:49 - returns with the data that you ask for
266:51 - immediately
266:53 - for instance if you say
266:54 - um what is 2 plus 2 and then we'll say
266:58 - okay it's four that's the synchronous
267:00 - task but if you for instance say to your
267:03 - um spouse or your friend
267:06 - go to the grocery store today please and
267:08 - get some milk
267:09 - that is not gonna happen in this instant
267:11 - it's i mean even if you even if you're
267:14 - the grocery stores right next to your
267:16 - house or your apartment then your friend
267:18 - has to go
267:19 - get get ready put put on shoes go to the
267:22 - store get the mail can come back so
267:25 - um that that is an asynchronous task so
267:27 - an asynchronous task is basically a task
267:31 - that
267:32 - whose results are not returned
267:34 - immediately okay
267:36 - so
267:36 - up until this point we've looked at
267:38 - functions that i'm actually going to
267:40 - remove all of this code from here so
267:41 - that we don't have all of that
267:44 - now we only have the void test function
267:46 - in here okay
267:48 - so
267:51 - all the functions that we've written so
267:53 - far have been synchronous functions in
267:55 - that for instance you would say
267:57 - string multiplied by
268:00 - two and then it gets an integer of a and
268:03 - it just says a multiplied by two all
268:05 - right
268:06 - and actually sorry hint so it returns an
268:09 - integer the function call the function
268:11 - name is called multiplied by two it
268:13 - takes an integer as a parameter and just
268:14 - multiplies that integer by two and
268:16 - returns it it's a synchronous operation
268:18 - okay however in dirt if you wanna work
268:21 - with asynchronous operations that you
268:23 - have to
268:24 - use a class called future so
268:27 - let's have a look at that um let's say
268:29 - that you have a function
268:33 - multiplied by two it which it may take
268:35 - some time in order to multiply a value
268:37 - okay this is hypothetical because yeah
268:40 - the multiplication is going to be done
268:41 - immediately but we're just going to
268:43 - assume that yeah this is a complicated
268:44 - multiplication and it will take some
268:46 - time all right so let's say future and
268:48 - then you would say what is the actual
268:51 - future what does it contain what data
268:53 - type can we say integer and then we say
268:55 - heavy
268:57 - future
268:58 - okay
268:59 - and it takes a value of int a heavy
269:02 - future that
269:04 - multiplies by two something like that
269:06 - okay
269:07 - so it says i return a future okay now
269:12 - in here then your your
269:15 - um
269:16 - responsibility is to create and package
269:19 - up an integer and return it inside a
269:21 - future so
269:23 - if you for instance in here say okay
269:25 - return 10 okay
269:27 - you see that it says l10 isn't
269:29 - compatible with the future of integer
269:32 - because 10 is a synchronous value it's
269:34 - right there it's present so what are you
269:37 - doing here then you could say
269:39 - okay what i do return is a future
269:42 - and then you could say oh i'm going to
269:43 - delay this future
269:45 - by a duration of three seconds okay
269:49 - and then you'll see there's a second
269:50 - parameter to this delayed function
269:53 - um you can see it let's see
269:57 - uh if we have a look at delayed function
270:00 - in here you see there is a second
270:02 - parameter called future or a computation
270:05 - so
270:06 - in here what you're what you need to do
270:08 - is just to say okay
270:09 - my second parameter is a function i'm
270:12 - going to ignore its return value well
270:14 - i'm just going to return the value of a
270:16 - okay
270:17 - so let's actually see if we say
270:20 - future delay duration seconds and then
270:22 - we say the parameter is let's say e
270:25 - and then i'm just going to say return a
270:29 - what is this value going to be then
270:32 - you know what we could actually look at
270:34 - the documentation for future delayed so
270:36 - i can also refresh my mind
270:38 - so i'm going to go and open a new safari
270:40 - window and i'm going to say future
270:41 - delayed
270:43 - this is the type of stuff that usually
270:44 - happens anyways if you're programming
270:46 - with dart i'm also going to increase the
270:48 - size so that you can see it a little bit
270:50 - better
270:50 - and let's have a look at a future delay
270:53 - here
270:54 - and
270:55 - here we can see how it's constructed uh
270:58 - how to use future okay
271:00 - so you can see here that there is a
271:02 - function that it doesn't basically take
271:03 - anything any uh value so
271:06 - i think the problem was that i may have
271:08 - just created like a function that um was
271:12 - expecting a parameter so
271:14 - this is how you would do that and i mean
271:16 - it is a little bit strange argument like
271:19 - i'm actually going to clean it up a
271:20 - little bit as well
271:22 - and then make this a constant as you can
271:23 - see it's suggested here and then return
271:26 - so i've written a lot of code i haven't
271:28 - explained really what i've done here but
271:29 - i will do that now so let's see
271:31 - uh we're saying that we're returning an
271:34 - integer in the future so
271:36 - it's not going to be returned
271:38 - immediately it's going to take some time
271:39 - for it to do its calculation okay so and
271:42 - then here let's say a multiplied by 2 as
271:44 - we as we promised in the function
271:46 - signature okay so that's future int
271:48 - this is the name of the function so
271:50 - nothing magical about that and then it
271:52 - takes a parameter that says integer a
271:54 - in the function body itself we're saying
271:56 - okay we're returning a future but we're
271:59 - delaying its return by the duration of
272:02 - three seconds so duration as you can see
272:03 - is a class here if you go in it
272:06 - actually is a constitution okay and then
272:08 - there is a class on top probably
272:09 - somewhere
272:11 - uh let's see
272:15 - constitution in blah blah blah
272:19 - constitution duration operator i believe
272:22 - this is i mean the duration dart it's
272:24 - probably just a class duration
272:27 - somewhere
272:28 - if you look at here class duration so
272:31 - so we're saying that we're creating a
272:32 - duration as a first parameter to the
272:34 - delayed function of the future so we're
272:36 - saying that we're delaying this future's
272:38 - return value by three seconds and then
272:40 - it says okay i'm going to wait three
272:41 - seconds but then i'm after i waited
272:43 - three seconds i'm going to call this
272:45 - function
272:46 - and this is kind of like a shorthand for
272:48 - creating a an inline function you could
272:50 - also do it like this you say okay my
272:52 - function that i'm providing to this
272:54 - function so it's like you're passing a
272:56 - function to the future delay function
272:58 - and then in here you could just say okay
273:00 - i return a multiplied by two and then a
273:03 - semicolon so this is probably a little
273:06 - bit easier to read so
273:08 - um
273:09 - now that we have that um
273:12 - we could actually use this function in
273:15 - our test um
273:17 - in our test function so
273:19 - when you then um
273:21 - i mean now that actually we we've now
273:24 - talked a little bit a bit about future
273:26 - and in order to use a
273:29 - future then you need to know something
273:30 - about
273:32 - async and awaiting dart
273:34 - now
273:35 - async and await
273:37 - are very related to each other but quite
273:39 - different in their meaning and
273:41 - um
273:42 - i just want to now explain actually
273:44 - first async
273:46 - async is a key word in dart that marks a
273:49 - function as asynchronous in that
273:52 - remember synchronous is something that
273:53 - returns immediately and asynchronous is
273:55 - something that does not return
273:56 - immediately takes some time however to
273:59 - mark a function async in here it means
274:02 - that this function internally
274:04 - can execute commands that do not return
274:07 - immediately okay
274:09 - so
274:10 - ac marking a function as async it
274:13 - it it means that this function
274:16 - internally calls other functions that do
274:18 - asynchronous work so
274:20 - let's now say final um result is
274:24 - heavy future
274:26 - and we say 10 okay
274:28 - now that we've done that let me just
274:30 - print the result and you'd be surprised
274:32 - to actually see the result
274:34 - when we do that and you'll see that it
274:36 - is not what you think it's not going to
274:37 - be 20 okay
274:39 - so i'm gonna get rid of this caption so
274:41 - that you can see the the result and i'm
274:43 - gonna clear the results in the console
274:45 - and command s
274:47 - and you'll see that what got printed to
274:49 - the screen is actually the future is not
274:52 - is not what you think it's not
274:54 - the value 20 which should be a
274:56 - multiplied by 2 which should be 20. so
274:59 - what happened here is that when you call
275:00 - a function that returns a future you're
275:03 - actually getting the future back you're
275:04 - not getting its data back
275:06 - so how do you get that data back well by
275:09 - prefixing the function with the keyword
275:12 - await
275:14 - so as its name indicates this
275:16 - keyword is just going to wait for
275:20 - the result of this function to be
275:21 - calculated and then it's gonna go to the
275:23 - next line okay
275:25 - so
275:26 - these two are very related to each other
275:29 - and you'll see that if i remove async
275:30 - then i will get an error saying that
275:32 - well you said this function
275:34 - called test is a synchronous function it
275:37 - just returns void
275:38 - basically means it doesn't return
275:40 - anything and it asynchronously does its
275:43 - work and doesn't
275:45 - have to wait for anything so
275:47 - but then inside the function you're
275:49 - saying wait which means yeah i have to
275:51 - wait some time for something and that's
275:52 - not okay so
275:54 - what you need to do then is you mark
275:55 - your functions with async if internally
275:58 - in that function you're using a weight
276:00 - all right
276:02 - and
276:03 - the weight itself then is used for
276:07 - waiting for the result of the future
276:09 - okay so if you remove this async and
276:12 - then you remove this await everything
276:14 - will just work but it's just
276:16 - synchronously getting the future of the
276:20 - heavy future that multiplies by two and
276:22 - printing it so it's not doing any
276:25 - asynchronous work in here you can see
276:27 - it's just getting that instance so now
276:29 - that we're calling that let's command s
276:31 - and you'll see it's waiting
276:33 - three seconds and then printed the
276:35 - result 20 to the screen okay
276:38 - so
276:39 - that for us was async and in weight and
276:42 - we're going to use async and in a way
276:43 - and await quite a lot in this course so
276:46 - it would be really good if you could
276:48 - have with this information that i gave
276:49 - you if you could just have a little bit
276:51 - of
276:52 - a read about future like documentation
276:54 - on the web
276:56 - so if you just search future
276:58 - dart um and maybe async await and
277:02 - read a little bit about them because
277:03 - they're so important in doing
277:05 - asynchronous work in dart that we just
277:06 - can't jump over them okay
277:10 - all right um so now we've talked about
277:14 - future
277:15 - uh
277:16 - and we've talked about async and awaits
277:19 - so i'm just gonna mark them as
277:23 - done in my notes
277:25 - um the next topic to talk about
277:28 - it would be
277:29 - streams
277:31 - so as you saw here a future in dart is a
277:35 - class that controls the computation of
277:38 - an asynchronous value in order to be
277:39 - returned in some point in the future
277:42 - however
277:43 - quite often in
277:45 - in your client's work or even server
277:48 - work you need to do work that is
277:50 - asynchronous however it is continuous
277:53 - work for instance if you if like i have
277:56 - the time uh displayed on top of my
277:58 - screen on the right hand corner
278:01 - that is a stream of
278:04 - strings
278:05 - it is a it is a stream because it
278:08 - doesn't have an end ready it it's a
278:11 - continuous pipe of information every
278:14 - minute that
278:15 - little ticker
278:17 - up on top right it's gonna increase and
278:20 - it's gonna go to zero six fifty zero six
278:22 - fifty 651 so
278:24 - it is continuously calculating the
278:26 - current time and like sending it down at
278:29 - this pipe
278:30 - now in asynchronous programming and in
278:32 - reactive programming
278:34 - which you may also get into if you're
278:36 - following with this course or if you're
278:37 - following some other course you may
278:39 - actually be interested in learning about
278:41 - learning more about streams
278:43 - and reactive streams
278:44 - a stream is just a pipe of data
278:47 - um that
278:49 - either
278:50 - it either completes
278:53 - or it never completes
278:56 - actually it completes successfully or it
278:58 - never completes or it errors out and
279:02 - dies okay so
279:03 - um a stream of time up there you can see
279:06 - it's not 0 6 50 in the morning and it is
279:09 - a stream of data that never completes
279:11 - because time is just just continuously
279:14 - going forward okay
279:15 - so when we talk about streams we just
279:18 - mean a pipe of data a future
279:21 - that
279:22 - sends data down this pipe that
279:25 - never ends
279:26 - as you saw in the case of a future a
279:28 - future ends it calculates its data and
279:30 - it returns and it says i'm done
279:32 - but a stream in dart
279:35 - is a future that just continues working
279:38 - okay so it calculates some data in the
279:41 - future and it also sends it down the
279:42 - stream and it says oh well i'm not done
279:44 - here's another data here's another data
279:46 - okay
279:47 - so
279:49 - let's have a look at this uh stream and
279:52 - see how we can work with streams okay
279:55 - so let's go and create a stream of um
280:00 - let's say a string
280:02 - and then we say get name okay
280:06 - now in here
280:08 - you your job is to create a string so if
280:11 - you say return hello
280:14 - see that hello is not compatible with
280:17 - the return type that you promised it's
280:18 - going to be a string
280:20 - um so you it this is very similar to how
280:22 - we worked with the
280:24 - future of integer you couldn't return an
280:26 - integer in that future but you have to
280:28 - create a future of integer and inside
280:30 - the function
280:31 - return the actual integer which was the
280:33 - computation if i go back you will see
280:35 - that
280:36 - code here right
280:39 - the future delayed and inside this
280:40 - function you're actually doing the
280:42 - computation all right
280:43 - so
280:45 - how do we create a stream and you could
280:46 - just say stream
280:49 - and then you could say
280:50 - okay periodic for instance or a value
280:54 - okay if you say we return a stream of
280:57 - value
280:58 - and then you could say foo
281:00 - is accepted
281:01 - what this means is that you have a pipe
281:03 - of data
281:05 - but the only value that it contains is a
281:07 - foo is the value of food that's it all
281:10 - right
281:10 - so let's now go into this test function
281:13 - and try to consume this uh stream if you
281:16 - just said
281:17 - final value is gets me
281:21 - and you just print this value
281:24 - and then i'm going to clear the logs
281:25 - here and say command s you'll see that
281:27 - just like future it just says instance
281:30 - of controller stream okay so it is not
281:33 - the actual value inside the string so
281:35 - the question is how do you wait for
281:38 - values
281:39 - inside a stream you could just say okay
281:42 - await
281:44 - it says okay you've
281:46 - actually we could read this a weight
281:47 - applied to stream string which is not a
281:49 - future so
281:50 - dart is understanding that okay you're
281:52 - awaiting on a stream but
281:54 - this is this is not just like a future
281:56 - that you're gonna wait for there's
281:58 - nothing to await like it's not a single
282:00 - value is a stream so
282:02 - the syntax to
282:03 - do that is await
282:05 - four
282:07 - okay so this is a syntax
282:10 - for awaiting for values inside a stream
282:12 - then you could say wait for final value
282:15 - in
282:16 - its name okay
282:18 - and then you could just print the value
282:19 - so this is a little bit of a strange
282:20 - syntax but if you read it in like in
282:23 - english it makes perfect sense you're
282:25 - waiting for values in get's name
282:28 - if you just ignore the final in here
282:31 - okay
282:32 - but read it in english from left to
282:33 - right await for values in get name
282:35 - that's it
282:37 - and then at the end i'm going to say
282:39 - print stream
282:41 - finished working
282:45 - here the console command s
282:47 - and you'll see it immediately said foo
282:50 - and then stream finished working i'm
282:52 - gonna clear it command s
282:54 - foo stream finish working okay
282:57 - so this is an interesting concept but
282:59 - it's still not a stream really i mean
283:01 - we're packaging the full string inside
283:03 - the stream but
283:05 - it's only one value we could have done
283:07 - that with a future so let's take
283:10 - advantage of streams actual
283:11 - functionality of
283:13 - sending down data in its pipe
283:15 - continuously so what we could do in here
283:18 - say stream
283:19 - periodic it means periodically produce
283:22 - values and in here you can see the first
283:24 - parameter is a duration so let's say
283:26 - constant duration
283:28 - of seconds every second okay and then
283:32 - there is a second parameter in here
283:34 - that you'll have to provide if i move my
283:36 - mouse over periodic you'll see that the
283:38 - second parameter is this string function
283:41 - int okay so it means that give me a
283:44 - function that accepts an integer
283:46 - and then it returns a string all right
283:49 - and it understands that it needs to
283:51 - return a string because you're saying
283:52 - that your stream is a string if you
283:55 - change this to an int and then went here
283:59 - um to the documentation and the
284:01 - documentation will actually or the
284:03 - method signature will change to say that
284:05 - uh your you should support you're
284:07 - supposed to take an integer in this
284:08 - function that you provide to me and then
284:10 - you need to return an integer okay so
284:12 - that string i just wanted to show you
284:13 - that that string that was shown in the
284:15 - function signature there it's because we
284:17 - promised to return a string in our
284:19 - function okay so
284:21 - let's go in here
284:23 - basically the function signature said
284:25 - that you need to accept an integer so
284:26 - i'm just going to say value
284:28 - and then let's go in here
284:30 - i'm just going to say return foo
284:34 - so we basically
284:36 - conform to that function signature we
284:38 - said we take some value and you see the
284:41 - value is an integer
284:42 - and then we're returning a string okay
284:44 - so now we can consume that so if i clear
284:47 - this log and i say command s you see
284:50 - that every second the value of foo is
284:52 - going to get printed to the screen and
284:53 - that's
284:54 - actually i need to remove this caption i
284:56 - can see you can't see it
284:58 - you see that 10 times 11 times 12
285:01 - 13
285:02 - 14.
285:04 - so all right
285:05 - um i'm sorry about that the caption was
285:07 - blocking the screen i wasn't aware of
285:09 - that um or actually i was aware of that
285:11 - but i forgot that that was the case in
285:13 - in this as i was talking
285:16 - so you can see that every second the
285:19 - stream is sending a value all right now
285:23 - that's that's basically the gist of
285:25 - using streams
285:26 - you will
285:28 - i'm wondering actually if we're gonna
285:30 - use the streams in this course i believe
285:33 - at some point we are
285:35 - i need to probably look at the um
285:39 - look at my notes
285:42 - yes i can see that we're actually using
285:44 - streams in this course so
285:46 - don't worry about
285:48 - if you don't fully understand streams at
285:50 - the moment because we're gonna talk
285:53 - about streams and
285:55 - um
285:57 - because we're gonna actually talk about
285:59 - streams and stream controllers later in
286:01 - this
286:02 - in this
286:03 - course so
286:05 - just know for now that a stream is like
286:07 - a future but it
286:08 - continuously or periodically can return
286:11 - values and then you can wait for
286:15 - those values using the await for
286:18 - syntax and dart okay
286:23 - okay
286:24 - um
286:25 - now
286:26 - the next topic to
286:30 - talk about
286:31 - in this chapter is generators so
286:36 - generators are very very interesting in
286:38 - dart
286:39 - some other languages also support
286:43 - generators and
286:45 - but not not all modern languages do that
286:47 - so
286:48 - a generator in dart is a function
286:52 - that returns
286:55 - i don't want to say iterable but it
286:57 - returns a list of things
287:03 - but it
287:04 - internally calculates that data in a
287:07 - very simple way
287:10 - that's the best explanation i can come
287:12 - up with to be honest with you let's have
287:13 - a look here
287:14 - i think the best way to do that is
287:15 - actually write a function that does uh
287:18 - creates a generator okay
287:20 - um i'm gonna clear this um
287:23 - and then we have a test function here
287:24 - let's mark lacing okay
287:26 - um
287:27 - let's now go create a generator and
287:30 - let's say
287:31 - we want to
287:32 - create a function that returns the
287:34 - values one two three
287:36 - um
287:37 - so
287:38 - a way to do that is would be to say i
287:41 - want a list of integers okay and my
287:44 - function
287:46 - or get one two three like this
287:50 - and you could say return one two three
287:52 - like that okay so that's completely
287:54 - valid
287:55 - another way of doing that is to use
287:57 - something called iterable
288:00 - and iterables i mean you need to
288:02 - understand what iterables actually are
288:04 - and they're kind of like lazy
288:05 - collections and when you get used to
288:09 - doing more software engineering you will
288:10 - understand more what
288:12 - why we use lazy collections
288:15 - but for now just know that an iterable
288:17 - is a prepared and packaged up list of
288:21 - things
288:23 - but it is not
288:24 - it is not completely calculated when it
288:27 - first begins
288:29 - it's kind of like
288:31 - it's kind of like how a restaurant works
288:34 - in a typical night a restaurant might
288:35 - have for instance 50 customers
288:38 - and
288:39 - when that shift begins during the night
288:42 - not all food is ready i mean it can't
288:45 - possibly be like when cut the first
288:47 - customer comes in we can say that the
288:49 - food for the 50th customer is already
288:51 - ready in the kitchen
288:52 - that's how a restaurant works it it
288:55 - listens to orders of its customers and
288:57 - then it generates the food based on the
288:59 - orders that's how an iterable works okay
289:02 - however a list in dart is an already
289:05 - packaged list it means that it's as if
289:07 - like you go to a supermarket and then
289:09 - you buy
289:10 - ready ready to go
289:12 - food that's already packaged 30 packs of
289:15 - that that is a list that is 30 ready
289:18 - readily packaged food items and then you
289:20 - take away that's how list works but an
289:24 - iterable is more like
289:26 - it's
289:27 - it's a list of like things that gets
289:29 - calculated on the go
289:32 - on the fly all right
289:34 - so
289:35 - um
289:36 - just know that for now so we just said
289:38 - either well and as you can see dart
289:40 - understood that okay a list is also an
289:42 - eye trouble so i don't have to worry
289:43 - about that so it didn't give you an
289:45 - error
289:46 - so let's go and actually instead of
289:48 - doing one two three let's go and mark
289:50 - our
289:51 - um function as
289:54 - uh a generator and you do that with
289:56 - either sync or async okay
289:59 - so and this would be a stream like
290:03 - now the difference between sync
290:07 - with a an asterisk an async with an
290:09 - asterisk is
290:11 - a sync function is an
290:13 - it is a generator function that returns
290:16 - a list of things but it calculates that
290:19 - list of things
290:20 - asynchronously and as you can guess the
290:22 - async equivalent of the sync asterisk it
290:26 - does the exact same thing but it returns
290:28 - a stream
290:30 - and which means it's asynchronously
290:32 - calculating its result okay so
290:35 - when you mark a function as sync you
290:38 - don't then go and return
290:40 - like this because you can see that you
290:42 - can see that it says you're creating a
290:44 - generator function so you have to kind
290:46 - of calculate your results now you can't
290:49 - just return a bunch of things to me okay
290:52 - so
290:53 - to do that you would use a keyword in
290:56 - dart called yield
290:58 - now yield is
291:00 - a very interesting keyword that you
291:02 - would use only in generator functions as
291:04 - far as i know
291:05 - and in here you're telling dart that
291:07 - okay the first value that i'm outputting
291:10 - in my iterable is the value of one so
291:14 - if in here we went and said
291:17 - um
291:19 - i know or say we say four value in
291:24 - gets one two three
291:27 - and then you could just say print value
291:30 - you can see it only prints the value of
291:32 - 1. i'm actually going to get rid of this
291:33 - caption you can see the output
291:36 - it only prints the value of 1 just
291:38 - because we yielded the value of 1. okay
291:41 - so you could just send then say yield
291:43 - one yield two and yield three
291:45 - then you'd see the values one two three
291:47 - so
291:48 - in this function internally then you
291:50 - could do a lot of other important things
291:52 - maybe some synchronous uh some other
291:54 - synchronous calculations and every time
291:56 - you have a value to output
291:58 - then you would basically
292:00 - um
292:01 - you would do a yield and you could also
292:04 - print the entire return value
292:08 - yes you don't have to do a four loop
292:11 - so you could just say print it and then
292:12 - it would say one two three okay
292:14 - but if you do a for loop then you're
292:16 - actually taking advantage of that lazy
292:19 - um
292:20 - capabilities of an eye turbo so you
292:23 - could break out the loop at loop at any
292:25 - time you could just say
292:28 - print value
292:30 - if value
292:32 - is two
292:34 - then you could break okay
292:37 - so let's clear the logs and command s
292:40 - you'll see only the value of one and two
292:42 - gets printed and then as soon as you're
292:44 - at the value of two then you're breaking
292:45 - and that means that this yield
292:47 - was basically never calculated so that's
292:49 - that's like the beauty of
292:54 - generator
292:55 - functions
292:57 - so you could also create asynchronous
292:59 - generator functions as i mentioned and
293:01 - that means that you're kind of like
293:02 - creating a stream of iterables
293:06 - to be honest with you asynchronous
293:07 - generators i've i've maybe used them
293:11 - once or twice
293:12 - uh in in the many years i've used dart
293:14 - so
293:15 - i don't think you're going to use them a
293:17 - lot but just know that they're there and
293:19 - you could use them by prefixing your eye
293:22 - treble with a stream
293:23 - saying that basically you're returning a
293:25 - stream of eye troubles and then
293:27 - suffixing your function with async just
293:29 - like that all right
293:32 - so and then here it says okay you said
293:34 - that you're returning a stream of ideal
293:35 - integers but you're turning only one
293:37 - value in here then you would just say
293:38 - okay one two
293:41 - okay
293:42 - um but then you would say yeah then you
293:44 - have the ability to do whatever you want
293:45 - here like return an actual eye variable
293:47 - okay so i'm not going to talk about
293:49 - asynchronous generators to be honest
293:51 - with you in this course because they're
293:52 - kind of like outside the scope
293:55 - so just know that they exist and you can
293:58 - use them
294:01 - okay i'm going to mark in my notes that
294:03 - we've talked about generators so
294:05 - the next topic to talk about are
294:07 - generics
294:09 - and i'm going to bring up a caption here
294:12 - so generics in
294:14 - programming languages that do support it
294:16 - are
294:17 - there so that you avoid writing the same
294:20 - code over and over again okay
294:22 - so
294:23 - let's say that you i mean this is a very
294:26 - typical
294:28 - example i know it's a little bit cliche
294:30 - but
294:32 - i think it's cliche for a reason and
294:33 - that's because it's such a good example
294:35 - um
294:36 - let's say you
294:38 - have a class
294:41 - that stores
294:43 - a pair of data let's just say class
294:46 - pair okay
294:48 - and then in here you could say okay what
294:50 - pair of data do i want to store okay i
294:52 - want to store
294:55 - value one as a string and i want to also
294:58 - store value two as a string and then you
295:00 - create the constructor for it okay
295:02 - all right that's that's great it's a
295:04 - pair of strings but how do you then
295:06 - pair an integer like two integers then
295:09 - you would say okay
295:10 - i have to have another pair class and
295:13 - this one is an integer
295:16 - but then you have this problem because
295:18 - pair is already defined as a class up
295:20 - there on line seven
295:22 - so you cannot reuse that you cannot have
295:24 - the same name then you would say okay
295:26 - pair of
295:27 - integers
295:30 - and then here you would say pair of
295:32 - strings
295:33 - and you make sure that the constructor
295:35 - name is also
295:37 - correct
295:38 - now
295:39 - i mean you may have also i mean in this
295:41 - point at this point we don't have logic
295:44 - at all in these two classes you may have
295:46 - actually quite a lot of logic in your
295:48 - classes but
295:50 - as i mentioned i think during one of
295:52 - these chapters i think it was chapter
295:53 - one or two program one of the main
295:55 - characteristics of software engineers is
295:57 - that we all dislike
296:00 - um writing the same piece of code over
296:02 - and over again so
296:04 - we try
296:05 - to as much as possible avoid
296:08 - um repeating ourselves
296:11 - so
296:12 - that's where generics can come in so
296:15 - what you could do is instead of doing
296:17 - this pair of pair of
296:20 - let me bring this here let's go and
296:22 - create a class that is generic and you
296:24 - would say pair
296:25 - and then a format for creating a generic
296:28 - class is to write after the name of the
296:31 - class oh just to a less than and greater
296:34 - than sign okay and then open your square
296:37 - brackets
296:38 - now
296:39 - in here then you define
296:41 - your generic
296:43 - names like the data types with usually
296:47 - with single characters let's say that
296:50 - what you want is a pair of any data type
296:53 - let's call the first data type a
296:56 - and the second data type b because
296:58 - there's two values so let's call this
297:00 - one a and this one b okay you would just
297:04 - write them as we just say we say a and b
297:06 - okay
297:07 - so then in here you would say final
297:10 - a
297:11 - value one so you're telling the compiler
297:14 - that okay whatever pair i'm creating
297:17 - the first data type that i accept is a
297:19 - and that should be placed here
297:21 - and then we say okay then the b is the
297:23 - second one
297:25 - and then we create a constructor for
297:26 - this okay
297:28 - so how you would use this then is you
297:30 - would say final and is pair
297:34 - then you would say foo and bar okay
297:37 - and then this is just like a simple it's
297:40 - very similar than to pair of
297:43 - strings that we wrote up there you see
297:44 - it worked as well but now in this case
297:46 - dart is smart enough to understand that
297:48 - names is a pair of string and string
297:51 - meaning that the two values that you
297:53 - pass to this pair generic class were
297:56 - actually then placed for you
297:59 - magically inside the a and b templates
298:02 - that you provided up here okay
298:04 - so if in if in this case then you said
298:07 - okay i have foo
298:08 - and then i have the value of 20
298:10 - then dart smart enough to understand
298:12 - that oh now it's a pair of string and
298:14 - integer
298:16 - so
298:16 - that's how you would use uh generics
298:19 - basically so i mean there are so much to
298:22 - talk about about generics and how
298:24 - you can
298:27 - uh basically utilize them in order to
298:29 - create
298:30 - very simple classes so that they're
298:33 - so that they're reusing as much
298:35 - capability or as much code as possible
298:38 - without duplicating that code so
298:41 - and talking about generics to be honest
298:43 - with you it could be it's its own entire
298:45 - course we could go on and on four five
298:48 - six hours i could talk about generics so
298:51 - just know that generics are created like
298:53 - this you say class pair and then you
298:55 - would say
298:56 - your generic data types which then in
298:58 - case
298:59 - then in turn get placed inside the
299:02 - definitions inside the class itself so
299:04 - okay
299:06 - um
299:08 - all right now that we've talked about
299:10 - generics um i believe that we could kind
299:12 - of like wrap up this um
299:14 - chapter where we talked a little bit
299:16 - more about advanced topics in dart
299:18 - extensions futures
299:20 - async awaits streams the weight for
299:22 - stream generators and
299:24 - generics okay
299:27 - now i'm actually really happy that we
299:29 - went through chapter number seven which
299:31 - is this chapter because up until this
299:33 - point we've kind of been like preparing
299:36 - ourselves for our launch
299:38 - it's
299:40 - it's now time that we put everything
299:42 - that we've learned into practice
299:44 - and actually start building our project
299:47 - so i'm actually getting goosebumps
299:49 - because it's such an important part of
299:52 - this course that we've actually gone
299:53 - through the basics we've talked about
299:55 - dart we've talked about like some of the
299:57 - basics of setting up the simulator etc
299:59 - etc that it's with great pleasure that i
300:02 - can say okay we've gone through that now
300:04 - and all you need to do right now is just
300:05 - to practice and what better way to
300:08 - practice
300:08 - than to put what you've learned um into
300:13 - application by
300:14 - writing
300:15 - the
300:17 - flutter project that we've been aiming
300:18 - to do from the beginning so
300:20 - without further ado let's then
300:23 - prepare for the next chapter which is
300:24 - chapter eight and in chapter eight we're
300:26 - gonna talk about
300:28 - uh project setup and then we're actually
300:30 - gonna add some dependencies to our
300:32 - project which we're gonna use
300:34 - later okay so
300:36 - let's aim for that and i'll see you in
300:39 - the next chapter
300:41 - hello and welcome to chapter number
300:43 - eight of the slatter course
300:45 - in this chapter we're going to talk
300:47 - about our basic
300:48 - project setup in the previous chapters
300:50 - up until this point to be honest with
300:52 - you we've been just working with dart
300:54 - and kind of like
300:55 - um laying the foundation for learning
300:57 - the programming language that actually
300:59 - um
301:01 - uh it fuels flutter so it's a
301:03 - programming language that you're gonna
301:05 - need to be quite comfortable with in
301:07 - order to be able to write your flutter
301:08 - applications so you're gonna learn more
301:11 - and more about dart as we go on in this
301:13 - course but it is very very good if you
301:15 - can
301:16 - look at the intro chapter and then just
301:18 - kind of like follow along on the
301:21 - chapters up until this point so that you
301:23 - get the general idea of what dart is all
301:26 - about and then how you can use it
301:28 - at a very shallow level i mean i know
301:30 - there's lots of material that i put out
301:32 - on that but
301:33 - we really didn't like go so deep in
301:36 - every topic so i just wanted to give you
301:38 - like a flavor and taste of
301:40 - the different available options in dart
301:43 - so
301:44 - if you haven't watched those chapters
301:45 - please just go ahead and skim skim over
301:48 - them even if you're comfortable already
301:50 - with dart
301:51 - so
301:52 - in this chapter we're going to talk
301:53 - about the project setup and this is the
301:56 - like one of the absolute most important
301:58 - parts of setting up
302:00 - um an application for flutter so if
302:03 - you're
302:04 - if you're thinking of maybe skipping um
302:07 - over this chapter that's also okay if
302:09 - you know what you're doing but if this
302:11 - is the first time that you're setting up
302:12 - a flutter project that then i think it's
302:14 - really good if you can
302:16 - follow along with this chapter
302:19 - so i'm going to go now into um
302:23 - let's do some setup here so what am i
302:25 - going to do i'm going to bring my face
302:27 - to the bottom right here so you can see
302:29 - the entirety of the screen
302:32 - and then i'm going to bring up the
302:34 - caption for the next item that we're
302:36 - going to talk about
302:38 - and in here well we have a um
302:43 - as you can see there is a command that
302:44 - you can issue in the terminal to create
302:46 - a new flosser project so
302:48 - every flosser project has different
302:49 - properties it has for instance a name
302:52 - which is the entire like the name of the
302:54 - entire project
302:56 - um and also one of
302:59 - the
303:00 - main properties of flutter project is
303:02 - identifier
303:04 - now the identifier wouldn't be so
303:05 - important had it not been that flutter
303:07 - can actually deploy to ios and android
303:11 - and an identifier for
303:13 - an ios app and an android app is
303:16 - actually
303:17 - what defines that application as unique
303:20 - as on the app store where ios ios users
303:24 - and ipad os users can download
303:26 - applications and on the um
303:29 - play store where android users can
303:30 - download
303:32 - android apps so these identifiers are as
303:34 - i mentioned in one of the previous
303:36 - chapters are kind of like reverse domain
303:38 - identifiers so it's kind of like if your
303:40 - website is
303:41 - foobar.com and your application is
303:44 - called baz
303:45 - then your reverse domain identifier for
303:48 - your application will become dot
303:50 - foobar.bass
303:53 - so it's kind of like
303:54 - you take your domain name and reverse it
303:56 - so if foobar.com becomes com.fubar and
303:59 - then you put dots after that and then
304:01 - you put your actual application name
304:04 - so these identifiers need to be unique
304:07 - and by that i mean like
304:09 - if a if a developer
304:12 - on the ios app store or google play
304:14 - store is already gone and registered
304:17 - the reverse um basically that item
304:19 - identifier.com.fubar.bass
304:22 - for any of their applications so they
304:24 - said okay here's my application called
304:26 - image gallery but it has a completely
304:28 - random identifier of com.foobar.pass
304:32 - then you as a new developer even if you
304:35 - want to do the same funky uh deployment
304:37 - to the app store you can't register that
304:40 - name anymore because because it is
304:41 - already
304:42 - taken so
304:44 - think of the identifier of your project
304:46 - as
304:47 - what is gonna carry on from the start of
304:50 - where you create your project all the
304:52 - way through to
304:54 - the app stores okay so
304:56 - it is quite important that you actually
304:57 - choose it wisely because if you don't do
305:00 - that wisely from the absolute start
305:02 - unfortunately you will have to do some
305:04 - filling around in the future
305:06 - to go and update that yourself so
305:10 - um
305:11 - so i would i would really suggest and
305:13 - recommend here that you take a little
305:15 - bit of um time to think about what that
305:18 - identifier is going to be
305:20 - what you prefer that identifier to be
305:22 - and what you're comfortable with and
305:24 - what for instance if you have a domain
305:26 - name as a developer for
305:28 - the app store and for google play store
305:31 - so if you have a domain name already
305:33 - registered on your name i suggest
305:35 - strongly then that you use that and if
305:37 - you have domain names personally and
305:39 - domain names
305:41 - selected as like a
305:43 - and for your company then you need to
305:45 - now know whether you're going to release
305:47 - this application under your name
305:49 - personally or if you're going to release
305:51 - it on your company's name
305:54 - so these all play a role but
305:57 - without further ado let's just go and
306:00 - create our project here and
306:02 - um
306:03 - i to be honest with you i personally
306:05 - haven't really thought about whether i
306:06 - want to release this application as a
306:08 - private person or if i want to create it
306:10 - under my company and i think
306:12 - since my developer account is
306:15 - at apple and at google is under
306:18 - my company's name which is pixelity ab
306:21 - in sweden then i'm actually going to use
306:24 - that company's domain name which is
306:26 - pixelity.se
306:28 - because s is like the swedish domain
306:31 - name just as code.uk is the
306:34 - um british one for instance
306:37 - so i think i will do that so let's go to
306:40 - and open a new terminal let's go to
306:42 - terminal um
306:44 - i don't see my screen right now but i'm
306:46 - just going to bring up a new terminal
306:47 - window here
306:50 - and bring it up so that you can also see
306:52 - it um
306:54 - and i'm gonna increase the size of the
306:57 - text so it is clear what i'm typing okay
307:01 - so let me go ahead and create a project
307:04 - so i'm gonna go to my development um
307:08 - folder where i have all my projects and
307:10 - i'm gonna go to projects
307:11 - flutter okay
307:13 - and then as you can see is flutter
307:15 - create
307:17 - and then and then dash dash org as an
307:19 - organization
307:21 - and i'm going to see say se dot pixelity
307:25 - now as i said my domain name is called
307:27 - pixelity.sc but your org needs to be the
307:30 - reverse of that okay so remember reverse
307:33 - identifier so reverse domain identifier
307:35 - so
307:36 - then if your for instance organization
307:38 - is
307:39 - hello dot com then here you would have
307:41 - to write com dot hello alright
307:44 - so i'm gonna say s epixody but you
307:46 - shouldn't do this so if you're following
307:48 - along with this course please just
307:50 - choose an identifier for your domain
307:52 - that it makes sense to you and if you
307:54 - don't have a domain if you if you're not
307:56 - bothered by all of that if you're not
307:57 - going to release your application to the
307:59 - app store you don't even have to care
308:02 - about this just put anything in here you
308:04 - could just say
308:05 - come um
308:07 - making stuff up
308:09 - if that's what you want so it's not a
308:12 - big deal to be honest with you so just
308:14 - go ahead and pick an identifier so
308:17 - i'm going to say s epixody because
308:19 - that's my reverse domain name
308:22 - and then in here you have to write your
308:25 - app application name
308:26 - so
308:28 - um
308:29 - what should we call this application to
308:31 - be honest with you i i mean i personally
308:32 - haven't really
308:34 - made up my mind what this application
308:35 - should be called maybe we should call it
308:38 - uh
308:38 - my personal
308:41 - notes
308:42 - my personal notes or my notes
308:45 - something like that
308:47 - or
308:48 - private notes
308:50 - okay
308:52 - all the private notes
308:55 - or notes list i don't know not my notes
308:59 - that would work
309:01 - sd pixel in my notes yeah why not
309:04 - and
309:06 - let's just call it my notes then all
309:07 - right
309:09 - so
309:10 - let's go ahead and do that flutter
309:12 - create
309:13 - and i can see i mean actually i'm very
309:15 - grateful that we got that little
309:17 - notification on top so let this do its
309:19 - work
309:20 - and um
309:22 - it did its work and it's done and it
309:24 - called something and it created a folder
309:26 - you can see called my notes
309:28 - and on top of this window if you saw
309:30 - then there was a little message printed
309:32 - a new version of flutter is available to
309:34 - update to the latest version just run
309:35 - flatter upgrade so that was not a part
309:38 - of this course i didn't mean it for this
309:40 - to happen but i can't control it either
309:41 - because flutter is a tool that is being
309:43 - developed by google it's an open source
309:45 - tool when there is a new version when
309:47 - you run any of these flutter commands
309:49 - and it's going to check
309:50 - um with the version repository to see is
309:53 - there any new version available and if
309:55 - there is then it's going to give me this
309:56 - flutter upgrade
309:58 - message here so
310:00 - um as i mentioned in the introduction of
310:03 - the course
310:04 - i've planned this course quite a lot but
310:06 - i haven't i can't plan it 100 so things
310:09 - will happen that i hadn't planned for
310:11 - and then we just have to roll with the
310:12 - punches and i'm actually glad that this
310:14 - thing happened right here so you can see
310:16 - how to upgrade flutter as well so
310:18 - as you can see it's very easy just copy
310:21 - just say flutter upgrade okay so i'm
310:22 - going to go at the bottom of the
310:23 - terminal i'm just going to say flutter
310:25 - upgrade
310:29 - right so this is going to actually take
310:31 - some time depending on how big the
310:34 - upgrade is because
310:35 - flutter is divided into
310:38 - different kind of engines as you know
310:40 - flutter can output um
310:43 - binaries or applications for ios it can
310:46 - output it for android it can do it for
310:49 - mac os it can do it for
310:52 - um
310:53 - windows
310:54 - and basically desktop searches and mac
310:56 - windows linux and then you will have web
310:59 - as well so there's
311:00 - quite a lot of things involved in
311:02 - flutter as you can see in here it's like
311:04 - downloading everything necessary in
311:06 - order for you to be able to create
311:07 - android applications so
311:10 - so after that is done you see it goes to
311:12 - the ios tool so it's downloading but
311:14 - it's also i believe after it's done
311:17 - downloading stuff
311:19 - it also needs to make sure that it can
311:21 - build those tool sets so
311:23 - this is a process that might take some
311:26 - time
311:27 - and in order to avoid us having to wait
311:30 - for that entire process
311:32 - as you can see it's now going to web sdk
311:34 - and blah blah
311:36 - so we don't have to necessarily wait for
311:38 - this so i'm just going to create a new
311:41 - oh it actually finished so that was
311:44 - quite fast all right so it it finishes
311:46 - work we don't have to do anything
311:48 - special here
311:50 - um so that's how you upgrade flutter so
311:52 - just run this command as suggested by
311:54 - the flutter tools itself flat upgrade
311:56 - and then you're good to go
311:59 - okay so
312:01 - we've done that step now so we've set up
312:03 - our project i'm just gonna move to my
312:06 - notes here
312:07 - and i'm gonna make sure that that topic
312:09 - is ticked
312:11 - and for the next item what we're gonna
312:13 - do here is we're gonna talk about um
312:17 - we're gonna basically have a quick look
312:18 - around the
312:21 - the environment set up by flutter when
312:23 - you run photo create because the flow to
312:25 - create doesn't just like create an empty
312:27 - director it actually creates the
312:29 - skeleton or the scaffold of your
312:32 - flosser project but pretty much
312:34 - everything necessary for you to be able
312:36 - to run that project okay
312:39 - so in this in this application i mean in
312:41 - this in this step of chapter 8 we're not
312:44 - actually going to run the application on
312:46 - any device that's for chapter 9 and for
312:48 - chapter 10.
312:50 - but what we are going to do is to have a
312:52 - quick look around the
312:54 - project structure so let me go to my
312:58 - notes here and what i'm going to do is
313:00 - i'm going to use this
313:01 - code visual studio code
313:04 - extension which is provided in the path
313:06 - so i can just say code dot which opens
313:08 - up visual studio code in the current
313:10 - folder okay
313:11 - so
313:13 - then once that is done i'm going to
313:15 - bring a visual studio code here i'm just
313:16 - going to take a little bit of care to
313:18 - ensure that you can see the
313:20 - important parts of the screen
313:22 - okay and i'm going to increase the size
313:25 - quite dramatically so it's visible for
313:27 - you as well it is very big on my screen
313:30 - but i think it's like
313:32 - a nice size on the on the actual output
313:34 - video
313:36 - alright so as you can see here is the
313:39 - folder created by flutter create
313:42 - and there are quite a lot of bits and
313:44 - pieces in here
313:45 - and i'm just going to
313:47 - tell you
313:49 - a bit about a few of these folders and
313:52 - what they they represent so
313:54 - one thing that you need to understand
313:56 - about flutter is that it actually is not
313:58 - like um
314:00 - it's not really like react native
314:03 - uh if you're familiar with that flutter
314:06 - on ios for instance it for those who
314:09 - have done ios development uh flutter it
314:12 - outputs a native binary on your on your
314:15 - phone
314:16 - a native um
314:18 - fat binary basically for your uh
314:21 - ios application and it just puts one
314:23 - view on the screen and then it
314:25 - graphically renders all its contents
314:28 - using metal okay so if you're not an ios
314:31 - developer that probably doesn't make so
314:32 - much sense to you but
314:34 - this part that i'm going to mention now
314:36 - should make sense for everybody but
314:39 - when you create a flutter application
314:42 - and the flutter create command basically
314:44 - spits out different parts that may be
314:47 - necessary for your application to run on
314:49 - different platforms
314:51 - one of those platforms one of the key
314:52 - platforms that flutter runs on is ioso
314:55 - that is the folder that contains the
314:58 - native bits and pieces necessary for
315:01 - photos to be able to run
315:04 - in an ios simulator or on an ios device
315:07 - such as an iphone or an ipad okay
315:09 - so this is like as you can see it's the
315:11 - project or the workspace and sorry and
315:14 - the workspace because for those of you
315:16 - who are ios developers you will know
315:17 - that
315:18 - there's a thing called cocoapods and
315:20 - flutter internally actually uses
315:22 - cocoapods for ios if you're not an ios
315:24 - developer just know that
315:28 - every
315:29 - ios or android or web application
315:32 - can bring with itself dependencies and a
315:35 - dependency is a way for your application
315:39 - to bring in code from other people in
315:42 - order to be able to achieve special
315:44 - functionalities so
315:47 - there are various tools available for
315:49 - ios developers android developers
315:53 - web developers to be able to bring in
315:55 - dependencies for web for instance if
315:57 - you're writing a node application you
315:58 - will just use npm which is a node
316:01 - package manager if you're using swift
316:03 - you will probably just bring in for
316:05 - instance spm i think um swift package
316:07 - manager or cocoapods
316:10 - and there's another a third one
316:13 - um which i've kind of forgotten the name
316:15 - of um
316:17 - which i may remember later if you're
316:19 - using android you're probably familiar
316:21 - with gradle and that you can like use
316:23 - for
316:24 - bringing in external dependencies so
316:28 - so
316:29 - if
316:30 - this is a platform of android and this
316:32 - is a platform of ios and here's web and
316:34 - here's um
316:36 - desktop for instance
316:38 - flutter sits on top of these so it can
316:41 - control all the um
316:44 - all the small bits and pieces for these
316:46 - platforms to be able to be packed
316:48 - packaged inside one flutter application
316:49 - which sits on on top here
316:52 - and all these different platforms down
316:54 - here
316:55 - excuse me they can have their own
316:57 - dependency management so the dependency
317:00 - managements kind of sit under one layer
317:02 - under so
317:03 - flutter then talks with these dependency
317:05 - managers and says okay you need to
317:07 - install this dependency for me to be
317:09 - able to work
317:10 - so
317:12 - the reason i mention all of that is
317:15 - that is the reason you can see a
317:16 - workspace here and an xcode project and
317:19 - that's because flutter internally is
317:21 - using a dependency manager
317:23 - system called
317:24 - cocoapods which in turn creates a
317:26 - workspace
317:27 - that
317:28 - links together the main project and all
317:30 - its dependencies
317:32 - if you're not an ios developer if you're
317:33 - not interested in all of this just know
317:35 - that this ios folder
317:37 - is just so that your application run can
317:40 - run on an ios device
317:43 - um
317:44 - so that's that
317:45 - the next part which is important is the
317:47 - test folder which we're actually going
317:49 - to use in this course
317:51 - the test folder is where you create your
317:53 - tests
317:55 - if you're not familiar with software
317:56 - development from before if you don't
317:57 - have a background software engineering
317:59 - testing is
318:01 - the ability for programmers in order to
318:03 - be able to make certain assertions about
318:05 - their code and in order in order to make
318:08 - sure that they can automatically run a
318:10 - series of tests against their own code
318:13 - to make sure that everything is
318:15 - functioning as the programmer intended
318:17 - that to if you are if you if you are
318:20 - coming from software engineering
318:22 - background that know that we're gonna
318:23 - put our integration tests we're gonna
318:25 - put our
318:26 - widget tests and unit tests inside this
318:29 - test folder okay so i hope that covered
318:32 - everybody that's that may be watching
318:34 - this course
318:36 - then you also have a folder called
318:38 - android and this is as you would expect
318:40 - it is putting all the necessary files
318:43 - and folders that is required for your
318:46 - android project to be
318:49 - hosting your flutter application so
318:52 - just know that flutter kind of
318:54 - is a series of tools is like a mobile
318:58 - kind it's like a beautiful sdk
319:00 - that gets injected into these native
319:03 - applications and natively also renders
319:07 - its content so
319:08 - um
319:09 - and just like we had a host ios
319:11 - application here you will also have an
319:14 - android folder which contains all the
319:16 - bits and pieces required
319:18 - for your application to be run natively
319:21 - on
319:22 - android
319:24 - phones and on android tablets
319:26 - so
319:27 - this is as you can if you're an android
319:29 - developer you're probably like already
319:30 - familiar with this like you have your
319:32 - app and build great gradle inside the
319:34 - app folder so there's nothing like fancy
319:36 - going on here it's a simple android
319:38 - application which you can actually
319:40 - uh if you have android studio installed
319:42 - on your computer if you want to you can
319:44 - open that folder and actually have a
319:45 - look around and even run that
319:47 - application as a native and android app
319:50 - on your phone
319:51 - okay
319:53 - so
319:54 - that is our android folder and as you
319:56 - would guess then we have a web folder
319:59 - because
320:00 - i think i mentioned this before but
320:01 - flutter supports uh deployment of flash
320:04 - applications to the web as well so you
320:06 - can actually create web applications
320:07 - with flutter it's nothing that we're
320:09 - going to discuss in this course
320:10 - particularly but if you're interested in
320:12 - writing web applications with flutter
320:14 - you can also google that
320:16 - so have a look at that if you're
320:18 - interested in web applications because
320:21 - though web applications in flutter are
320:24 - relatively new but foster has actually
320:27 - come really far with with that so people
320:29 - are creating all sorts of websites with
320:31 - flutter already
320:34 - sorry about that
320:36 - okay um then we have a little file here
320:39 - called analysis options
320:42 - and um as you can see it says this file
320:44 - configures the analyzer so
320:46 - um
320:47 - if you are not coming from a software
320:50 - engineering background then you may not
320:51 - know what analysis actually means but
320:54 - think of analysis as
320:55 - a way for a flutter to be able to
320:58 - have a look at the code that you write
321:01 - and
321:02 - and correct you
321:03 - where it
321:04 - sees fit so where it sees that oh you've
321:07 - made a mistake in writing something that
321:09 - could be written in a better way then it
321:12 - consults this analysis options yaml file
321:15 - and then it says okay what are the rules
321:16 - that i have to adhere to like do you
321:18 - want me to be very strict about certain
321:20 - rules or do you want me to be like less
321:21 - strict about other rules or do you want
321:23 - me to completely ignore
321:25 - certain mistakes that you're making so
321:28 - the analysis options yaml file as it is
321:31 - pronounced
321:32 - it allows you to
321:34 - basically define the roles that make
321:37 - sense for your project
321:38 - in this course we're not going to talk
321:40 - about so much analysis options to be
321:41 - honest with you but just know that it's
321:43 - there
321:45 - so let me bring up the uh
321:48 - the project structure here again
321:51 - um and the next thing that we need to
321:53 - have a look at which is very very
321:56 - important is this file pop spec dot yaml
322:00 - now um this is a file that i mean
322:04 - one of the things that you you'll need
322:05 - to know about flutter and the basic
322:07 - structure that it creates for you is
322:09 - that there are tons of documentations
322:12 - and documentations are like so so well
322:14 - done in my opinion in in the flutter
322:16 - world where i personally come from like
322:19 - the back-end developer development
322:20 - background like i'm doing django or
322:22 - where i'm doing ios development
322:24 - sometimes documentation can for instance
322:26 - on the ios native world be very kind of
322:29 - lacking
322:30 - so
322:31 - flutter has gone like well above the
322:33 - line of what is required from a
322:36 - developer's perspective in terms of
322:37 - documentation and they provide a lot of
322:39 - documentation
322:41 - and if you're not coming from a software
322:42 - development background the documentation
322:44 - is pretty much like
322:45 - information provided by the developers
322:47 - who created the tool for you in order to
322:49 - help you get better at that tool okay as
322:52 - you can see here there's a file created
322:54 - for you pop special and you can see
322:56 - there's lots of gray lines here prefixed
322:58 - with this
323:00 - hashtag
323:01 - if you remove them you'll see that they
323:03 - become normal sentences but if you put
323:04 - them back they become something called a
323:06 - documentation and a documentation if
323:08 - you're not from software engineering
323:09 - background it means just piece of text
323:12 - provided as an information block to you
323:14 - which is not code anymore so the program
323:17 - is not going to
323:18 - turn this into any sort of sort of a
323:20 - code it's just going to ignore that this
323:22 - is just for you to learn okay
323:25 - so let's go back to this pop specky ammo
323:27 - and talk about what it actually is pop
323:29 - spec yaml is such an important part of
323:31 - flutter that i think that you need to
323:33 - actually
323:34 - ignore i mean don't ignore the comments
323:38 - go and spend some time and read the
323:41 - comments just to understand what they
323:43 - mean
323:44 - so
323:45 - um what i'm going to talk about here is
323:48 - a little bit about what this pop spike
323:49 - yaml actually is it is if you're for
323:52 - instance from coming from a web
323:54 - background and if you've worked with
323:56 - node.js then we will have some sort of a
323:58 - config
324:00 - json file or if you're coming from
324:02 - django you'll have settings.pi file if
324:05 - you're coming from native ios world what
324:07 - would be the equivalent of the config
324:10 - it kind of will be kind of like your
324:12 - info plus file um
324:14 - so
324:16 - i mean it is your it is kind of like a
324:19 - control panel of
324:21 - what your project should actually be
324:24 - looking like its icons the version
324:27 - number its name all your dependencies so
324:31 - these things will be all placed inside
324:34 - inside this file and
324:36 - when you change this file if you're
324:38 - already running your application then
324:40 - flutter are automatically
324:42 - understands changes to this file and
324:45 - then reconfigures itself if it can on
324:47 - the fly
324:49 - with your new configurations if it can't
324:52 - then you may have to restart your
324:53 - application like if you make drastic
324:55 - changes for instance if you bring in a
324:57 - completely new dependency
325:00 - into your project
325:02 - then the project cannot be like re-run
325:05 - immediately it needs to actually
325:07 - recompile and link against that
325:09 - dependency it's just like humanly
325:10 - impossible
325:12 - or computerly impossible for it to do so
325:16 - um
325:17 - so let's have a little look around in
325:19 - this pop specky ammo file as you can see
325:21 - there's a tag here called name and it's
325:24 - and it's a value it's my notes and if
325:26 - you remember
325:27 - from the terminal if i bring back the
325:29 - terminal
325:31 - bring up the text a little bit
325:33 - uh this is what we created right this is
325:35 - the project this is how we created the
325:37 - project so
325:38 - we said flutter creates an organization
325:40 - of seda pixelity and then my notes all
325:43 - right
325:45 - that is what the my notes is for this is
325:47 - your project name my notes all right
325:50 - and this is a little just a little
325:51 - description of what this application is
325:53 - all about now
325:55 - you may be
325:56 - curious about what word is actually went
325:58 - s e se.pixelity or whatever you created
326:01 - your
326:02 - project organization under
326:05 - now you can see i search for it i said
326:07 - command f in visual studio code on in
326:09 - mac or control f in linux and
326:12 - windows and visual studio code and i
326:14 - don't know actually what the shortcut
326:15 - for that fine is in uh
326:18 - android studio i just now heard studios
326:19 - a little bit peculiar about its uh key
326:22 - mappings so it may not be command f on
326:24 - mac or controller for linux and windows
326:26 - so i search here now for sepixology and
326:28 - you can see that there are no results so
326:31 - this particular thing that i stressed so
326:34 - much in the beginning that is very
326:35 - important you choose wisely
326:37 - is not actually something that flutter
326:39 - itself needs as i mentioned it is
326:41 - something that the different platforms
326:42 - that you'll deploy to need so if i now
326:46 - actually say command shift f in visual
326:48 - studio code which searches in the entire
326:50 - project say se.pixolity you will see
326:53 - that it is found in different places
326:55 - inside this project for ios for instance
326:59 - you can see here is in the project pbx
327:01 - approach
327:02 - and for android as well in our build
327:04 - gradle so you'll see the application id
327:06 - became se pixelity my nodes
327:09 - and for ios if you look around here as
327:12 - well you'll see that it is s e pixel in
327:14 - my notes okay
327:16 - so
327:18 - that was just side note um
327:21 - so the other thing that you'll need to
327:24 - know about the pop spec yaml is this
327:26 - version number here and this is the
327:29 - if you're not from a software
327:30 - development background um if you haven't
327:32 - done software development before
327:34 - versioning is a way for you to tell
327:37 - various places that you publish your
327:39 - application on for such as ios app store
327:42 - or google play store
327:44 - what
327:46 - if you have something new in your
327:48 - application
327:50 - so for instance if you and this is this
327:52 - is how software is actually actually
327:54 - labeled like a software has different
327:55 - properties
327:56 - what you're deploying what you're
327:58 - developing here is a fluster application
328:00 - but from the point of a store such as
328:02 - the app store it's it's just a package
328:05 - of stuff
328:06 - with some properties like its name
328:08 - identifier and its version now this
328:11 - version is very important because it is
328:13 - a number usually three digits
328:16 - or i know that google play store
328:18 - actually supports also four digits
328:20 - separated by a dot
328:22 - and these
328:24 - these numbers actually mean something
328:26 - special they
328:28 - if you begin from the left and then you
328:30 - go to the middle and then to the right
328:32 - the left number is something called a
328:35 - major number
328:37 - the middle number is called a minor
328:38 - number and the right one and then most
328:42 - the rightmost number is usually called
328:44 - the build number
328:46 - in normal software development the
328:48 - process is kind of like this that
328:50 - you begin with an idea you say okay my
328:53 - idea is to create a notes application
328:55 - that's that's the first idea that's idea
328:57 - number one then you put one as the major
329:00 - number then you begin by zero and zero
329:03 - okay so that's how a version number is
329:05 - kind of like birth
329:07 - so you say one zero zero that's version
329:09 - one usually called okay
329:11 - then you release that application you
329:13 - say okay i'm fine with that version one
329:15 - and then you're in the kitchen cooking
329:16 - some food and then you say okay um it
329:19 - would be great if i could put like um if
329:21 - i could add
329:22 - the ability for users to be able to
329:24 - delete their notes
329:26 - it's not a huge functionality it's just
329:28 - a little bit um improvement on what i
329:30 - already have in the store
329:32 - then you will go and say okay is that a
329:35 - major idea or a minor idea
329:37 - hmm it's not a major idea a major idea
329:40 - would be like a total rewrite of the
329:42 - application adding massive number of
329:44 - features fixing massive number of bugs
329:46 - etc so it's not a major idea then you go
329:48 - to the minor idea and that minor idea
329:51 - corresponds to this minor version here
329:53 - so you say okay the previous one was
329:54 - zero this one is how big of a difference
329:57 - hmm it's just a small future so let's
329:59 - just say one
330:01 - it was a huge like uh
330:04 - minor idea
330:06 - not major enough to be a major idea but
330:08 - minor
330:09 - but quite a big minor idea then you
330:12 - would probably like
330:14 - from zero to maybe two or three it's not
330:17 - so popular to do that usually
330:20 - would go chronologically in that order
330:22 - like one two three four but you're also
330:24 - welcome to jump versions
330:27 - um
330:28 - in special cases so let's say then you
330:30 - say okay i fixed that
330:32 - and i'll now make it build and send it
330:34 - to
330:35 - apple and google
330:37 - just remember that your previous build
330:39 - was build zero
330:41 - now
330:42 - depending on how your project is
330:45 - structured like you may decide that okay
330:48 - every build that i make i'm going to
330:50 - actually increase this build number so
330:51 - the previous one was zero now it's gonna
330:54 - be one then it's going to be two three
330:56 - four five six blocks so every time you
330:58 - make build and send it out to your
331:00 - consumers even if they're a group of
331:02 - testers or
331:04 - people who are
331:06 - your only consumers may actually just be
331:08 - people who are downloading your
331:09 - application directly from the app store
331:10 - or google play store
331:12 - or from the web they may be interacting
331:13 - with your application as well
331:15 - then you may say okay every time i make
331:17 - a new bill and send it out that's when i
331:19 - actually increase this build number
331:21 - or depending on your project setup you
331:23 - may
331:24 - come with into an agreement with your
331:26 - teammates to say okay we don't increase
331:28 - the bills chronologically but every time
331:30 - we change the major or the minor we
331:32 - actually reset the build back to zero
331:34 - and then we go up chronologically so
331:37 - um
331:38 - i i don't want to go to be honest with
331:40 - you too much into detail about the
331:41 - version but if you're
331:43 - interested in software development and i
331:44 - think if you're watching this course
331:45 - that kind of means that you're
331:47 - interested in software development
331:48 - you'll need to know about this so just
331:50 - know that version is your way of
331:52 - labeling your software and its features
331:55 - and what's new in it
331:57 - with numbers okay
332:00 - so just remember major
332:02 - uh minor build all right
332:04 - but you don't have to play with this so
332:06 - much to be honest with you so i think in
332:08 - this entire course we're actually not
332:09 - gonna play with it
332:11 - so all right
332:12 - uh the next bit of information in the
332:14 - pop special is the environment as you
332:16 - can see there it says sdk
332:18 - now when you see sdk just think of
332:21 - software development kit
332:23 - and this sdk is referring to the flutter
332:25 - sdk so it means that
332:27 - if you share your source code with some
332:30 - other developer who's sitting maybe on
332:32 - the other side of the planet
332:34 - if they get your source code and they
332:36 - want to for instance be able to test
332:37 - this application on a simulator or an
332:39 - emulator on a real device then they are
332:42 - required to have flutter sdk
332:45 - version this
332:47 - or less than this all right so you can
332:49 - actually get your flutter version by i
332:51 - believe if you run flutter dash dash
332:54 - version
332:55 - it will tell you that i'm plotter 281
332:59 - and that as you can see here it says
333:01 - yeah the sdk required in order to run
333:04 - this application is two
333:06 - one five zero more than or equal to that
333:09 - at least at least two one five zero okay
333:13 - so that's your sdk the flutter sdk
333:16 - the other part that you'll need to know
333:18 - about is this section in the pops wiki
333:20 - ammo and that that is called the
333:22 - dependencies and this is what we're
333:24 - going to talk about actually
333:26 - um
333:26 - right now
333:29 - um
333:30 - and dependencies as i mentioned before
333:33 - uh are ways for you as a software
333:36 - developer to bring in code that other
333:38 - people have written in order to make
333:41 - your application application function
333:43 - better or function in a completely new
333:45 - way for instance
333:47 - um you need to kind of be careful with
333:48 - dependencies just because
333:50 - depending on what dependencies or
333:53 - libraries you bring into your project it
333:55 - can actually make your life better or
333:57 - worse
333:58 - dependencies are
334:00 - um
334:01 - basically when you bring it in a
334:02 - dependency they're usually code written
334:04 - by somebody else or other people that
334:07 - may be working on a library so
334:11 - when you're if you're not coming from
334:12 - software development background then you
334:14 - will need to know this and i'm just
334:15 - going to warn you from from now so that
334:18 - you've heard it at least from somebody
334:20 - dependencies when you're picking
334:22 - dependencies just be a little bit
334:23 - careful in that
334:26 - they may
334:29 - it may be that they initially make your
334:31 - suffer better
334:33 - but
334:34 - since dependencies are code written by
334:37 - other people
334:38 - and other people's priorities change
334:41 - their lives may change so that they
334:43 - don't have time enough enough time to
334:45 - continue working on those dependencies
334:47 - so
334:48 - i have personally run into the issue
334:49 - that uh we brought in a dependency into
334:51 - a project and then after a while we just
334:53 - realized that oh
334:54 - the developer isn't uh
334:57 - actively working on this and maybe even
334:59 - the developer made that library um
335:02 - deprecated and deprecated is the world
335:05 - that a word that you'll get to know when
335:07 - you work more with software development
335:09 - and deprecated kind of means that the
335:10 - library is not supported anymore the
335:13 - library is not
335:14 - is not actively being worked on anymore
335:17 - and the developers are encouraging you
335:19 - to move away from them
335:20 - so
335:21 - when you bring in dependencies what i'd
335:23 - like you to do is just to have a look at
335:26 - who is behind the dependency
335:29 - and prioritize your picking and cherry
335:31 - picking
335:33 - based on a few factors
335:36 - if the divi if the
335:39 - if the dependency is written by a single
335:41 - person
335:42 - um be a little bit careful about that
335:44 - just because single persons
335:46 - priorities may change and they may not
335:49 - be able to
335:50 - like continuously work on a
335:53 - even if if it's an open source project
335:55 - they may not be able to continuously
335:56 - work on that
335:58 - um if independence is written by an
335:59 - organization especially an organization
336:01 - that you have a lot of
336:02 - faith in then prioritize it a little bit
336:05 - higher
336:07 - um
336:08 - at least that's my opinion
336:09 - if a dependency is written by a bunch of
336:13 - independent people
336:15 - under an organization prioritize that
336:18 - also higher than a single person who has
336:21 - a
336:22 - who has a library under their private
336:24 - name okay
336:26 - that doesn't necessarily always mean
336:27 - that a dependency created by an
336:29 - organization is actually better quality
336:31 - it just means that the chances of it
336:33 - being deprecated are a little bit less
336:35 - than
336:36 - uh
336:37 - chances of the same library being
336:39 - deprecated had it been written by a
336:40 - single person under their private name
336:44 - so these may actually to be honest with
336:46 - you sound a little bit high level at the
336:48 - moment
336:48 - and you may
336:50 - think okay why do i have to need all
336:51 - this it's just that it is very easy for
336:54 - newcomers to flutter to get
336:58 - dependent on dependencies in that it's
337:01 - so easy to bring in a dependency and
337:02 - just work with it that people forget
337:04 - that oh
337:05 - this is actually code written by a
337:07 - single person sitting in there in their
337:09 - room just like me sitting here and
337:10 - telling you not to listen to people who
337:12 - are sitting in their rooms
337:14 - but i believe it is very important to
337:17 - try to steer
337:19 - your thoughts towards a little bit more
337:23 - constructive dependencies that are good
337:25 - for your project in the long run but if
337:28 - you're writing an application i just
337:29 - want to release it and don't care about
337:31 - it anymore
337:32 - after you've released it maybe
337:34 - maybe it's okay to bring in a dependency
337:36 - from just a
337:39 - that that dependency that you don't even
337:40 - care about but i would even challenge
337:42 - that idea of releasing an application
337:44 - which you may not care about after the
337:46 - first release but because that's usually
337:47 - not a good idea
337:49 - okay a lot of talk about dependencies
337:51 - but i think that had to be said
337:55 - so we're talking about dependency i'm
337:56 - just gonna bring in the captions so
337:58 - um
338:00 - now here you can also see there is a
338:02 - dependency dependency here by default
338:04 - brought into you by flutter itself
338:06 - called cupertino icons
338:08 - and cupertino icons is a dependency that
338:11 - i believe that the flutter team itself
338:13 - is actually behind
338:15 - so
338:17 - you may be thinking okay what are these
338:19 - dependencies like where do they come
338:20 - from they actually come from normal
338:22 - people and
338:23 - companies so i'm going to bring up a
338:26 - um website here for you
338:28 - and it is called pop.dev i'll bring it
338:31 - up so that you can actually see it
338:34 - here and um
338:38 - you can see that in this website popped
338:40 - up there you can search for dependencies
338:42 - so i'm actually going to copy this
338:43 - cupertino icons from here
338:45 - and i'm going to paste it right there
338:47 - um kupertino icon just enter and i'm
338:50 - gonna press on it and you'll see that
338:52 - it's published by the flutter team
338:54 - themselves okay
338:56 - so
338:57 - pop.dev is the website where you will
338:59 - search for dependencies so you just
339:01 - search for a package and then it will
339:03 - bring up results here for you so
339:07 - um this is how you'll search for
339:08 - dependencies okay
339:11 - um
339:12 - and
339:13 - now that we talked about that let's also
339:15 - talk about something called dev
339:17 - dependencies
339:19 - they have dependencies are
339:21 - dependencies that will bring into your
339:23 - project
339:24 - which are useful only under development
339:28 - so
339:29 - if you're familiar with software
339:30 - engineering the normal dependencies will
339:33 - get linked to your project and then you
339:34 - will they will be shipped with your
339:36 - application whereas dev dependencies
339:39 - there are only dependencies that
339:41 - you
339:43 - under the development time will use in
339:45 - order to make your software better and
339:47 - as you can see here one of the
339:48 - dependencies for instance is flutter
339:50 - test
339:51 - or flutter lens in this case as well
339:54 - excuse me
339:56 - okay so there are lots and lots of
339:58 - things to talk about here and as you can
340:00 - see here in the future actually we'll
340:01 - work with this that you can bring in
340:03 - assets and images and bringing them into
340:05 - your project okay
340:08 - so
340:09 - this is a quick look around at the pub
340:11 - spec yaml and i'm going to
340:14 - let this be here
340:16 - i'm just going to tick in my notes here
340:18 - that pops back yaml we've talked about
340:20 - it
340:21 - now to the important part
340:24 - we actually in our application we're
340:26 - going to need some dependencies in order
340:29 - to be able to continue working with the
340:30 - application now
340:32 - we haven't talked so much about firebase
340:33 - before but just know that firebase is
340:36 - a tool that allows you to
340:40 - kind of go serverless but also have a
340:43 - server now serverless is just a fun
340:46 - funky word that is being used nowadays
340:48 - to describe a server written by somebody
340:51 - else so a server that you don't
340:53 - personally have to write if you don't
340:54 - come from a software development
340:56 - background for instance you're a product
340:57 - owner or a designer
340:59 - a server is where your data sits in the
341:02 - cloud kind of
341:03 - so
341:06 - you as a developer sitting in front of
341:08 - your computer right now you're writing a
341:09 - flutter application and your flash
341:11 - application is going to be installed on
341:12 - ios and android devices and that is the
341:14 - client the client is the consumer of the
341:16 - data sent by the server okay so the
341:18 - server is where the logic sits on a
341:21 - computer in the cloud okay and firebase
341:24 - is a computer in the cloud just think of
341:26 - think of that that is written by google
341:28 - so you control it with simple commands
341:30 - on your computer but it controls your
341:33 - data so your client your flutter
341:35 - application can connect to it and grab
341:38 - the data and read the data and
341:39 - manipulate the data on the client side
341:41 - so
341:43 - now in order to talk to firebase we
341:45 - actually need some um
341:49 - dependencies and firebase um will i'll
341:52 - bring up my safari window here
341:55 - now let's have a look at firebase core
341:58 - i'm going to search for it
342:01 - click on it firebase core as you can see
342:02 - it's written by the publisher is
342:04 - firebase.google.com
342:06 - and just remember that flutter is
342:07 - actually a tool created by
342:10 - google as well so
342:12 - i personally think that anything related
342:14 - to firebase is completely okay to bring
342:17 - in into your flutter application has a
342:19 - dependency all right
342:21 - so
342:22 - um i'm going to go here and then say
342:25 - we need four dependencies
342:28 - for this particular project okay so
342:31 - if you're in visual studio code you can
342:33 - bring um
342:34 - the terminal up uh i actually forgot the
342:37 - command for bringing the terminal i
342:38 - think on my mac is control backtick
342:41 - but i believe you can also always bring
342:43 - up terminal advice going to terminal and
342:46 - new terminal okay now i can see there
342:48 - are two terminal windows here okay now
342:51 - i'm going to get rid of the explorer on
342:53 - the left hand side so you can see that
342:55 - the data a little bit better here
342:58 - there are four dependencies that we need
343:00 - to bring into our project all right and
343:02 - i want you to follow along with this
343:04 - exactly as i'm doing
343:07 - previously what we had to do in order to
343:09 - i mean previously in the previous
343:10 - versions of flutter if you wanted to
343:12 - bring in a dependency then you'd have to
343:13 - go and say
343:14 - you go to your in your pop spec and then
343:17 - add your dependencies manually with
343:19 - special versions and then
343:22 - you have to go to those dependencies top
343:24 - dev websites to see the current version
343:27 - all
343:28 - but with the latest versions of flutter
343:29 - you don't have to do that all you have
343:30 - to do is just to say flutter pop add
343:34 - and
343:34 - i'm going to do that right now
343:37 - so that's how you bring in a dependency
343:39 - all right
343:41 - the first dependency that we need is
343:42 - firebase core so just enter this command
343:46 - it'll take some time perhaps
343:50 - okay
343:51 - then say the same command but say
343:53 - firebase
343:54 - off i'm gonna have a look at my notes
343:56 - basically here to make sure that i'm
343:58 - entering the correct dependencies
344:00 - and i'm not going to talk so much right
344:02 - now about what these dependencies
344:03 - actually are
344:05 - because that is going to take a lot of
344:06 - time as well so let's just bring the
344:09 - dependencies in there are four
344:10 - dependencies so the next dependency that
344:13 - we have to bring in is cloud
344:16 - firestore
344:19 - and
344:21 - let's go to the next one
344:24 - and we say that
344:27 - cloud firestore is the third dependency
344:30 - and then we say firebase analytics
344:35 - so that is the fourth dependency
344:40 - so
344:41 - we've brought in four dependencies at
344:43 - the moment if you look here
344:45 - there is a firebase core
344:47 - which is like the
344:50 - the kernel the main important parts
344:52 - parts of firebase which again is what
344:55 - we're going to use as our server where
344:57 - all the nodes for all our users are
344:59 - going to sit
345:02 - the next one is firebase auth
345:04 - auth is the short form let me see where
345:06 - did it go um here firebase off that is
345:09 - for authentication
345:11 - and
345:12 - um i haven't yet shown how that our
345:14 - application is actually going to look
345:15 - like but auth is for
345:17 - authentication is where our users will
345:19 - be able to register
345:21 - uh log into our application and log out
345:23 - and also get email confirmations to send
345:26 - to their emails in order to be able to
345:28 - verify the account so
345:30 - auth is for authentication and that's
345:31 - what we're gonna use it for in order to
345:33 - make sure that people who
345:35 - are interacting with our application
345:36 - they're actually logged in okay
345:39 - the next part is cloud firestore
345:43 - and this dependency is used for when we
345:46 - actually store a logged in users notes
345:49 - in the firebase backend
345:51 - all right
345:52 - it's just funky names to be honest with
345:54 - you they're just names decided
345:57 - by developers just like me and you so
346:01 - and the next part is firebase analytics
346:03 - and that is for
346:05 - if you use firebase analytics when you
346:08 - basically set up your firebase backend
346:10 - you will get some free analytics in for
346:13 - instance oh which
346:14 - screen did the user go to which button
346:16 - did they press and you can have a look
346:18 - at these analytics when you then look at
346:20 - your firebase console which we're gonna
346:22 - talk about later
346:24 - i mean i know all of these are quiet um
346:27 - maybe a high level if you're not if
346:28 - you're not familiar with firebase you
346:30 - may be like what the hell did we just do
346:32 - and that is okay you don't have to know
346:34 - all of this just know that we are these
346:37 - four dependencies are stuff we need in
346:39 - order to make our application function
346:41 - all right so now that we've added these
346:43 - dependencies you can actually go back to
346:44 - your popspakiano file and kind of have a
346:47 - look here
346:49 - at the dependencies that we added and
346:51 - you can see all of them were added here
346:53 - automatically for you with their latest
346:56 - versions okay so previously in previous
346:58 - versions of flutter we had to do this
347:00 - manually but now you can just say
347:02 - flutter pop ad and it will add the
347:04 - dependencies for you directly to pop
347:06 - special all right
347:09 - so
347:10 - great a lot of things we discussed here
347:13 - it almost took 50 minutes to go through
347:14 - all of these basics but i believe
347:17 - actually basics should take more time to
347:19 - explain than the more advanced stuff
347:21 - because
347:23 - the more advanced you get the less
347:25 - explanation you need so that is why all
347:28 - these basic things basically take time
347:30 - to explain
347:31 - [Music]
347:33 - okay
347:34 - i'm just going to take in my notes that
347:36 - we've talked about all of these
347:40 - topics
347:41 - and i think this is actually a wrap for
347:44 - chapter number eight so chapter number
347:46 - eight we talked about um
347:48 - how to set up our project we've actually
347:50 - set up our project now we've set up our
347:52 - dependencies had a look around uh the
347:55 - default flutter template and we also
347:57 - talked about pop special so
348:00 - that's great stuff in chapter number
348:02 - nine we're gonna talk about my favorite
348:04 - which is the ios app setup and in this
348:08 - chapter actually we're gonna go through
348:10 - a lot of things profiles certificates
348:14 - we're gonna talk about app ids
348:17 - a lot a lot a lot i can see here in the
348:19 - list so i'm really excited actually for
348:22 - chapter number nine
348:23 - so
348:25 - go grab a cup of coffee or a cup of tea
348:27 - and i'll see you in the next chapter
348:30 - hello and welcome to chapter nine of
348:32 - this course
348:33 - in this chapter we're going to talk
348:34 - about the setup of our ios app and as i
348:38 - mentioned it i think it was in um the
348:41 - introduction
348:42 - uh chapter in the absolute first
348:44 - actually it's not a chapter it's just
348:45 - introduction to this whole course
348:48 - um we talked a little bit about what
348:51 - we're planning to do with this
348:52 - application that we're developing here
348:54 - and um two of the things that we're
348:56 - going to do is to actually release the
348:58 - app in the app store and in the play
349:01 - store now if you're not planning to
349:03 - actually do that you could
349:05 - potentially skip over this chapter
349:07 - um
349:08 - but i still believe that if you're
349:10 - planning on becoming a flutter developer
349:13 - you need to know how these things work
349:15 - because
349:16 - being a flustered developer depending on
349:18 - what kind of flutter developer that you
349:20 - actually want to become
349:21 - um with me assuming that you want to
349:24 - become an actual flutter developer where
349:26 - you can for instance work on different
349:27 - applications and release them personally
349:29 - or you can work in like a team con
349:32 - concept uh and in the context of a team
349:35 - where you
349:36 - work with other developers inside a
349:38 - company for instance in order to work on
349:40 - their applications and release them than
349:41 - in the app stores so
349:44 - if you're if you fall into any of those
349:45 - categories that you actually want to
349:47 - release your application then i strongly
349:48 - believe that you should know how to do
349:50 - that yourself so
349:52 - although you may be a part of a part of
349:53 - a team of a huge organization where the
349:56 - release process is its own like process
349:58 - that you basically hand over your source
350:00 - code to them and then they basically
350:02 - build it and repair it and release it
350:04 - but if you want to become like a
350:06 - full-fledged flutter developer or a
350:08 - mobile developer for that matter you'd
350:10 - need to know
350:12 - how to actually release your
350:13 - applications okay
350:14 - so in this chapter we're going to talk
350:16 - about
350:18 - releasing your app or actually we're
350:20 - going to talk about preparing your
350:21 - application for releasing in
350:24 - app store later so
350:27 - what you need to know
350:29 - is how do you set up your flutter
350:32 - application so that you can actually
350:33 - build it
350:34 - later and release it in the ios app
350:38 - store okay
350:41 - and if i bring up the next caption here
350:44 - you'll see that
350:46 - in order for you to be able to
350:48 - build your application and then deploy
350:51 - it in the app store you need an ios
350:54 - developer account
350:56 - and i talked about this previously um
350:59 - that
351:00 - how what a developer account is and that
351:03 - you'd have to apply for it i think it
351:05 - was in chapter one we talked about this
351:08 - but if you've jumped over that chapter
351:10 - you'd need to know that you have to
351:11 - apply for a developer account at apple
351:14 - and once granted that developer account
351:16 - then you're going to be able to get
351:18 - access to a portal portal called the
351:21 - app store connect
351:23 - app store connect is your portal for
351:25 - managing your applications
351:27 - and uploading to the app store
351:30 - downloading some debug information etc
351:32 - which i'm not going to go into so much
351:33 - detail right now and it also has a side
351:35 - note as a developer you will get access
351:38 - something called i think the developer
351:40 - portal or something like that i think
351:42 - it's called
351:43 - i believe so i think we just call it
351:45 - developer portal or developer developer
351:47 - site
351:49 - so you'll get access to that and you'll
351:50 - be able to manage things such as
351:53 - certificates and profiles okay so
351:56 - which we're going to talk about soon
351:58 - actually so
351:59 - let's say that you have your developer
352:00 - account and if you don't have your
352:02 - developer account then please just go
352:03 - and search online for register developer
352:06 - account or just watch the first chapter
352:09 - i have to look at my notes actually here
352:11 - and see if that's what we talked about
352:12 - in chapter one
352:15 - actually yeah i can see here chapter one
352:17 - was titled developer accounts and in
352:19 - that chapter we talked about how to
352:21 - register for an ios developer again in
352:23 - depth so please go and watch
352:25 - chapter one if you haven't done that and
352:27 - if you are planning to actually release
352:29 - your application
352:30 - in the ios app store
352:33 - so
352:35 - sorry about that
352:36 - so now you know that you need the
352:38 - developer account and it costs a little
352:40 - bit of money i think it's about 99 so in
352:42 - sweden it's about 990 swedish crowns
352:45 - something like that or 1000 swedish
352:46 - crowns almost
352:49 - so um
352:50 - now that we've talked about the
352:51 - developer account let's talk about the
352:53 - certificates and profiles because this
352:55 - is the thing that trips up a lot of
352:56 - mobile developers when they come to ios
352:58 - development
352:59 - um i mean i've been doing ios
353:01 - development since late 2000 2007
353:05 - when
353:06 - there was pretty much no um
353:08 - ios sdk as such it was like just a set
353:11 - of tools and very little library support
353:14 - because originally ios apps by steve
353:16 - jobs definition were supposed to be web
353:18 - applications and then
353:20 - apple just transitioned to disbelief
353:22 - that yeah we actually have to have
353:23 - native applications so they released
353:25 - some tools and xcode was there so you
353:27 - could build some simple applications
353:28 - with ios opengl es what's there so you
353:30 - can build some games as well
353:33 - but
353:34 - how it started was that
353:36 - apple wanted to make sure that the
353:37 - applications that are developed can only
353:40 - be distributed through the app store so
353:42 - they said that okay
353:44 - if i give vandal for instance a
353:47 - developer account he shouldn't be able
353:48 - to create his own app store because they
353:50 - it's just a
353:51 - i'm not going into the details of what
353:53 - why they're doing that there's a whole
353:55 - topic and what we could discuss like a
353:58 - few days we could talk about that
353:59 - whether it's a monopoly or not i don't
354:01 - know so i'm not going to go into the
354:02 - detail about that but what you need to
354:04 - know that
354:05 - is there is an app store the um
354:09 - basically just called app store but you
354:11 - could call ios app store mac apps or
354:12 - whatever you want
354:14 - and apple has control over that so it's
354:16 - apple
354:17 - who sits there and like controls the
354:19 - measures that apps that are published on
354:22 - the app store they're of a good quality
354:24 - for instance okay so apple themselves
354:28 - have a certificate now a certificate is
354:31 - like a piece of paper uh just imagine a
354:34 - piece of paper certificate that they
354:35 - hold onto and they said okay whatever we
354:38 - publish on the app store
354:40 - um
354:41 - it comes from us okay so every app on
354:44 - the ios app store
354:46 - comes actually from apple i don't mean
354:48 - that the apple has written the app i
354:50 - mean that apple has signed the app using
354:52 - their certified that piece of paper okay
354:54 - so
354:55 - and then when the app gets downloaded to
354:58 - your iphone your iphone actually checks
355:00 - is this a
355:02 - is this a trusted application where does
355:04 - it come from so
355:06 - ios as an operating system it can
355:09 - contain and you can install many
355:10 - different types of applications that
355:12 - come from many different types of
355:13 - sources
355:14 - such as
355:15 - the ios app store or you could actually
355:17 - download application that comes directly
355:18 - from a specific developer
355:21 - now
355:23 - all these applications need to be signed
355:25 - they need to be signed with a
355:26 - certificate that is just to identify
355:28 - where they come from so certificate is a
355:31 - piece of paper that you as a developer
355:33 - hold and every application
355:36 - excuse me every application that you
355:37 - develop will be signed using that
355:39 - certificate okay so that certificate is
355:42 - your identity as a developer and it gets
355:45 - kind of
355:47 - carried around in with your application
355:50 - to the destination so if you develop
355:52 - this notes application that we're doing
355:54 - in this course and you sign it with your
355:56 - certificate then your application is
355:58 - going to have that certificate signature
356:00 - inside it so when i send it to apple and
356:02 - then apple is like aha that's this
356:04 - developer who created this app okay
356:06 - and then when apple then
356:09 - says okay your application's fine you
356:11 - can't release it to the app store then
356:13 - apple re-signs your application with
356:16 - their own certificate
356:18 - that is just to make sure that your
356:20 - application after it's been signed with
356:22 - apple certificate can be distributed
356:25 - into the ios app store and downloaded by
356:28 - millions of users around the world so
356:32 - it's just sir just know that certificate
356:34 - is your identity as a developer okay
356:37 - [Music]
356:38 - now now that we talked about
356:40 - certificates let's talk about profiles
356:42 - because that also is a tripping point
356:44 - for some developers
356:46 - um especially if they don't come from
356:48 - like a native ios development background
356:50 - which i do
356:51 - um
356:52 - profiles
356:54 - you see a certificate identifies you
356:58 - in short profiles identify your app
357:02 - so that's like the
357:04 - very short way of saying it so you as a
357:07 - developer might have
357:08 - 10 20 30 applications that you're
357:10 - developing or you have developed
357:13 - each of these applications will have
357:15 - their own identity
357:17 - and that identity at the end is tied to
357:19 - you as a developer so you say here's my
357:21 - certificate here's
357:23 - who i am
357:24 - but when you then create an application
357:26 - then that application also needs to
357:28 - identify itself it will be like here i
357:30 - am i am an application signed with this
357:32 - profile using this certificate so
357:36 - just know that a profile is kind of like
357:38 - an identity for your application
357:40 - and different flavors of that
357:42 - application
357:43 - and a certificate is an identity of you
357:47 - as the person who developed that
357:48 - application all right
357:49 - so
357:52 - and if you notice i just said different
357:53 - flavors of your application
357:56 - and by that i mean that if you're not
357:58 - coming from a development background
358:00 - um if you're for instance coming from a
358:02 - design background and you have a figma
358:04 - file or visio file that you're designing
358:07 - your wi-frames and whatever if you're
358:09 - coming from a product owner ownership
358:11 - background than your probably may have
358:13 - like um
358:14 - working with jira or excel sheets or
358:16 - whatever wherever you put your
358:18 - requirements you may not be familiar
358:20 - with different flavors of an application
358:23 - but if you've
358:24 - worked a little bit close with an app
358:27 - team then you'll know that there are
358:28 - different flavors of every application
358:31 - and
358:31 - those flavors are usually i mean they're
358:34 - usually two flavors
358:36 - one is a development flavor and the
358:38 - other one is a production flavor a
358:40 - development flavor is the application
358:43 - you see if you sit with developers with
358:45 - software engineers that are working on
358:47 - your application
358:48 - on a daily basis they're coding they're
358:50 - fixing things they're fixing bugs adding
358:52 - new features and then they will provide
358:55 - the product to you as a software uh as a
358:58 - product owner for instance or a designer
359:00 - and you will download that flavor on
359:02 - your application and be like okay this
359:04 - this looks fine great
359:06 - now
359:07 - all of a sudden you press a button and
359:08 - that button crashes the application so
359:11 - the application just disappears oh
359:13 - it crashed
359:14 - well at that point if the developers
359:16 - were doing their job correctly then they
359:18 - had had to put some crash analytics into
359:20 - the application
359:22 - that
359:23 - as soon as the application crashes or
359:25 - something bad happens to the application
359:27 - of that flavor of the application that
359:29 - you
359:30 - installed on your
359:31 - iphone or android phone or
359:34 - tablet or whatever and they will get
359:37 - something called a crash report
359:39 - a crash report is as its name indicates
359:41 - it's just a report where the crash
359:44 - information is completely visible and
359:46 - they probably even know which button you
359:48 - tapped at what time and what was the
359:50 - information
359:51 - that your app was carrying at the point
359:52 - that it crashed so it helps them
359:55 - debug and fix that problem
359:57 - now these flavors of the application
360:00 - that you install on your phone on a
360:01 - daily basis were working mobile
360:03 - developers are usually called debug
360:06 - applications and a debug application
360:08 - it's just a way of saying that the
360:10 - developers who created it it created the
360:12 - application have the opportunity then to
360:15 - fix any bugs that may arise with more
360:18 - information than they would usually have
360:20 - had they released this application to
360:22 - the store for millions of
360:24 - others to download so
360:26 - that is a flavor it's a debug flavor or
360:28 - is a development flavor okay and it just
360:30 - means that it's a daily it's kind of
360:32 - like a
360:34 - updating regularly application that only
360:36 - very close circle of people close to the
360:39 - project can download so that's a flavor
360:41 - okay
360:42 - another flavor of an application that
360:44 - gets released by developers could be the
360:47 - production
360:48 - flavor and the product production flavor
360:50 - is
360:51 - the same as the debug flavor but
360:54 - a little bit like
360:56 - some stuff maybe removed from it some
360:58 - sensitive information that may be logged
361:00 - otherwise maybe removed from it it's
361:02 - just like a stripped-down version
361:04 - for security purposes not stripped-down
361:06 - version of like features or anything
361:08 - it's just
361:09 - they make it tighter they make it so
361:12 - that it is a little bit more secure like
361:14 - some extra stuff may be removed from it
361:16 - extra stuff that otherwise developers
361:18 - only may need so
361:21 - when it then gets packaged into this
361:22 - beautiful little uh
361:24 - yeah beautiful little package basically
361:26 - then it will also be a new flavor called
361:30 - the production flavor
361:32 - so now you have two flavors one is like
361:34 - for a close circle people sitting next
361:36 - to the product
361:38 - in the same product
361:40 - room or now that everyone's working
361:42 - remotely maybe people are sitting at
361:43 - home etc and that is like the product
361:46 - team closely developers testers product
361:47 - owners designers uxers everyone that is
361:50 - the closed circle
361:52 - they get the development builds usually
361:55 - and then when you get to
361:57 - sending your application to apple for
361:59 - instance
362:00 - or to google for review then you would
362:02 - get the production flavor okay the
362:04 - reason i'm talking about flavors is that
362:06 - these different flavors on ios at least
362:09 - are basically
362:11 - assigned with their own specific
362:14 - profiles so then you'd have a
362:16 - development profile and you would have a
362:18 - production profile and these prof
362:21 - profiles dictate to your application
362:23 - what it what it can and it can't do
362:26 - for instance one of the capabilities of
362:28 - a development profile in the ios world
362:31 - is that your application can actually be
362:33 - installed on a telephone hooked with a
362:35 - cable or even
362:37 - without a cable and debugged remotely so
362:41 - this is one of the cool things you can
362:42 - do with ios in that you can actually
362:44 - like if i'm a developer sitting here
362:46 - i can
362:47 - get the designer's telephone and say oh
362:50 - yeah you want the application like do
362:52 - you want to actually see what i'm
362:53 - working on yeah she or he would say
362:56 - you would
362:57 - connect your their phone to your
362:58 - computer and enable something called
363:00 - remote debugging
363:02 - and then you would disconnect it and
363:04 - then give the phone back to them and
363:06 - whenever they want the application
363:07 - running live on their phone as you're
363:09 - developing it you can actually run the
363:11 - application with your xcode
363:14 - live under
363:16 - uh iphone or ipad so
363:18 - that is its own flavor and the profile
363:21 - which is the development profile
363:23 - dictates to that application that you
363:25 - can be debugged but if you then want to
363:29 - sign your application with a production
363:31 - profile and send it to apple
363:33 - that profile dictates that this
363:35 - application is not allowed to be
363:37 - debugged
363:38 - and when you
363:40 - create your application and send it to
363:43 - apple you need to make sure of two
363:45 - things
363:47 - among many other things but
363:48 - certificate and profile wise you need to
363:50 - make sure of two things
363:52 - the application is signed with your
363:54 - production certificate and the
363:57 - application is signed also with the
364:00 - production profile which is hooked to
364:02 - the production certificate so first the
364:05 - certificate should be there using the
364:07 - certificate you create the profile with
364:09 - the profile you sign your application
364:11 - and then you send this application to
364:13 - apple apple then looks oh everything is
364:16 - is in order
364:18 - the profile to use was a
364:20 - a production profile and the certificate
364:23 - linked to the profile was also correct a
364:25 - production certificate identifying you
364:27 - as a developer
364:30 - so
364:31 - that was almost 16 minutes of
364:33 - information about profiles and
364:34 - certificates for ios but i think they're
364:36 - so paramount
364:37 - in i mean it's so important to
364:39 - understand
364:41 - that you shouldn't really jump over
364:43 - these concepts as if you're if you want
364:45 - to become a mobile developer it's so
364:46 - important so
364:49 - now enough with
364:52 - concepts now let's talk a little bit
364:54 - about
364:56 - um
364:57 - the developer account and here i
364:59 - actually have a link which i'm going to
365:01 - open in a separate window
365:03 - and then i'm going to bring it to the
365:06 - foreground so you can actually see
365:09 - so here is the developer account as you
365:13 - can see on apple's website and i'm gonna
365:17 - bring my face a little bit to the right
365:19 - bottom right so zoom into the window
365:21 - here
365:22 - and this is actually on developer
365:28 - then you would go into accounts okay so
365:30 - after you've registered an account
365:32 - then you will be able to go in here and
365:35 - sign in with your account and i'm going
365:36 - to sign in with my
365:38 - um companies apple id
365:43 - there we go and then it says okay we
365:46 - sent you a verification code and i have
365:48 - my
365:49 - apple watch here so i'm i'm just gonna
365:52 - say i didn't get a code and text me the
365:54 - code all right
365:55 - so
365:56 - in a short while i should be able to get
365:59 - a verification code here
366:01 - and it is important that you don't show
366:03 - this verification code to other people
366:05 - it's just you shouldn't do that so i'm
366:08 - gonna remove the screen from where you
366:10 - can see it and i'm gonna enter the code
366:12 - that was sent to me it is six digits and
366:16 - it is uh just basically digits and
366:19 - bring the phone i bring the browser up
366:21 - now and i say trust this browser okay
366:23 - [Music]
366:25 - so
366:26 - here you will see that um license
366:29 - agreement has been updated okay so we
366:31 - should be able to review that later so
366:33 - i'm gonna increase the
366:36 - space that this screen is taking at the
366:38 - moment so you can see it in its entirety
366:41 - and you can see that now that you you've
366:43 - logged into this account you should be
366:45 - able to see things such as
366:47 - overview membership people's
366:49 - certificates ids and profiles okay
366:52 - so and then what i talked about earlier
366:55 - which is your app store connect okay
366:57 - so um
367:00 - and
367:01 - what happens here basically is
367:04 - that
367:05 - in the membership people's certificates
367:08 - ids and profiles is where you will
367:10 - manage your certificates and all your
367:11 - profiles as i mentioned before
367:14 - so
367:15 - um
367:16 - here it is very important that you
367:18 - basically set up a good ground for your
367:21 - uh certificates create the dev
367:23 - certificate the
367:24 - the production survey and then you
367:25 - create your profiles after that which
367:27 - we're gonna talk actually about in this
367:29 - um
367:30 - in this chapter
367:33 - so
367:35 - here are the missing pieces for us in
367:37 - order to be able to
367:39 - carry on
367:41 - so we need as i mentioned before
367:43 - certificates profiles and app ids app id
367:46 - is something that i didn't mention
367:47 - before so i think it's just important
367:49 - that i mention what an app id is
367:52 - an app id is
367:55 - additional to the profile that you
367:57 - create an app id is an identifier that
368:01 - apple and you use in order to know which
368:05 - application you are
368:07 - talking with
368:08 - both you yourself and also
368:11 - if you for instance in the in the future
368:13 - are going to enable
368:14 - features such as push notifications
368:18 - now if you're not familiar with what
368:19 - push notifications are they're basically
368:22 - remote notifications remote information
368:24 - that you can send from a cloud somewhere
368:27 - on the internet
368:28 - to a user's phone so when they get their
368:31 - phone they will see oh here is a message
368:33 - from this application
368:35 - you can think of it as remote messages
368:36 - just as if someone sent you an sms or an
368:39 - imessage
368:41 - or for instance if you're using whatsapp
368:43 - or telegram someone writing a message in
368:45 - a chat and then you're getting a
368:46 - notification on your phone that is
368:47 - called a push notification so
368:50 - an app id is used mainly in order to
368:54 - be able
368:55 - in order for you as a developer to be
368:57 - able to specify different capabilities
369:00 - of your application for instance that it
369:01 - can
369:02 - receive push notifications that it can
369:04 - for instance store secure information on
369:06 - the phone etc etc so
369:09 - so when i previously mentioned that you
369:10 - need a certificate and profile in order
369:12 - to sign your application you also need
369:14 - an app id in order to identify your
369:16 - application and its capabilities okay so
369:19 - we're going to talk about that soon
369:20 - actually
369:23 - so
369:25 - now
369:26 - what we need to do here before we
369:28 - actually get started creating a
369:30 - certificate
369:32 - uh is to
369:34 - talk about the keychain now
369:36 - if you're if you're if you have a
369:38 - developer account here and you are
369:40 - planning on releasing your application i
369:42 - kind of can basically assume that you
369:44 - have
369:44 - a macintosh so that you have registered
369:47 - for an account
369:49 - and that you want to be able to sign
369:50 - your application with a certificate and
369:53 - profile
369:54 - however you may be in a group of people
369:56 - who doesn't have a
369:58 - who doesn't have a macintosh and xcode
370:00 - etc but you still want to be able to
370:02 - release your application to the app
370:04 - store so you may want to for instance
370:07 - create your certificate profiles an app
370:09 - id and then later send that information
370:11 - to some sort of a cloud hosting service
370:13 - for for them to sign your application
370:15 - and then send it back to you something
370:17 - like that i have never done that myself
370:20 - but you may be in that group and uh
370:23 - for the sake of being inclusive i think
370:25 - it's important to talk about that
370:27 - um now
370:29 - let's talk about what i've put up here
370:31 - as the caption and that is like the
370:33 - certificates in the keychain
370:35 - you see every
370:36 - certificate gets created by you as a
370:39 - developer sending a request to apple
370:42 - now
370:43 - this request is
370:45 - you basically creating a digital
370:47 - signature on your computer
370:49 - which
370:50 - your computer holds onto
370:52 - then your request you will send it to
370:54 - apple apple says oh you're asking for a
370:57 - certificate okay here's the certificate
371:00 - and then you download that certificate
371:01 - and then when you double click on the
371:03 - certificate it gets installed and hooked
371:05 - to your original request okay so here's
371:09 - the certificate and here's the private
371:11 - key so
371:13 - the private key is just a piece of
371:15 - information that your computer stores
371:17 - digitally on only your computer so that
371:20 - later the downloaded certificate can
371:22 - actually be hooked to it creating a
371:24 - chain okay so
371:27 - your application when it gets signed
371:30 - with your certificate that you then
371:31 - download from apple
371:33 - it actually contains some information
371:35 - about the certificate and the private
371:37 - key and then you send the application
371:40 - that was signed using these two pieces
371:41 - of information to apple so
371:45 - there's a lot of information i know but
371:46 - i think it's important for every mobile
371:48 - developer who wants to
371:49 - release something for ios appstore to
371:51 - know this um
371:54 - now this
371:55 - private key and the certificate they
371:56 - both get stored inside a program on your
371:59 - computer called keychain if you have
372:01 - macintosh
372:03 - and i can bring up keychain actually
372:05 - now let me see which i have three
372:08 - screens here so i don't know which one
372:09 - is gonna get open on
372:12 - so
372:12 - i will bring up keychain here um
372:17 - and i will show you how it looks like
372:20 - so
372:21 - here is an example of keychain and you
372:24 - can see here there's a distribution
372:26 - certificate and a development
372:28 - certificate okay
372:30 - and these certificates i didn't create
372:32 - them i downloaded them but the things
372:34 - under them this is the chain i was
372:35 - talking about this is the key that i
372:37 - created okay
372:39 - so when you request a certificate from
372:42 - apple you actually create this thing on
372:44 - your computer and you upload this thing
372:47 - to apple for them to create a
372:49 - certificate hooked to that kind of not
372:52 - you don't actually upload exactly this
372:53 - but something that is related to this
372:55 - okay
372:56 - so
372:57 - for us in order to be able to continue i
372:59 - think it's important that i actually
373:01 - delete these
373:02 - existing certificates from my computer
373:04 - so i'm just going to go like this and
373:05 - i'm going to be like
373:06 - delete two items all right and delete
373:08 - them just like that
373:11 - okay so now they're gone now what we
373:13 - need to do is
373:14 - um
373:17 - here let me put up the captions so you
373:19 - can see
373:25 - so that was the certificates and now we
373:28 - also need to talk about um
373:33 - we also need to talk about actually
373:34 - deleting the profiles now this is an
373:37 - interesting part if you already have
373:38 - like profiles installed on your computer
373:40 - you may not want to do this but i'm just
373:43 - going to show you this step so that we
373:45 - start with a clean slate okay so you're
373:47 - not supposed to do this if you exactly
373:49 - know what you're doing with your
373:50 - certificates but if if this is the first
373:52 - time you're doing this and there may
373:54 - already be some certificates for you on
373:55 - your computer for some reason then this
373:57 - is the way to actually get rid of them
373:59 - so i'm gonna open up finder
374:02 - um
374:04 - let me open up finder here
374:05 - and i'm gonna bring it up here
374:08 - and what we need to do is to go into a
374:10 - folder called um
374:13 - i believe it's called library and then
374:14 - mobile
374:16 - device
374:17 - and then something called provision
374:18 - profiles okay
374:20 - and you can see here um and i will show
374:22 - you this path again so it's my user
374:25 - library mobile device and then provision
374:28 - profiles okay
374:29 - so after i've gone into that folder i'm
374:32 - going to delete these profiles that are
374:34 - here okay
374:35 - so you don't have to do this if you
374:37 - don't want to and you know exactly what
374:38 - you're doing but i'm just doing it to
374:40 - show you that profiles are always stored
374:42 - in that location for your user okay
374:45 - and what you can also do which i really
374:46 - like is to if you say add columns here
374:48 - and kind of like drag it into your
374:50 - favorites so you don't have to type that
374:52 - path every time so let's just put it
374:53 - here okay so that every time i want to
374:55 - install the profile i can just click
374:57 - here and put my profile there all right
375:03 - all right um
375:06 - now that we've done that the next step
375:08 - as the caption shows here is to delete
375:10 - our existing certificates and profiles
375:12 - from apple's
375:13 - development account so let's go to
375:15 - certificates ids and profiles here on
375:17 - the left hand side and you'll see here i
375:19 - have quite a lot of things stored right
375:21 - here okay you see distribution
375:23 - development development blah blah
375:26 - so what we can do here is to go ahead
375:29 - and delete these certificates on the
375:32 - left hand side you see it's a
375:33 - certificate so there are quite a few of
375:35 - them
375:37 - so what i'm going to do is just to tap
375:39 - on this one and just say revoke revoke
375:42 - tap on the next one and just revoke them
375:44 - one by one so and again if you're new to
375:47 - ios development and you've just gotten
375:49 - your development account you don't even
375:51 - have any certificates so this screen is
375:53 - going to be empty for you so revoke
375:56 - revoke so your screen is gonna look like
375:58 - this all right
376:00 - so now that we don't have certificates
376:02 - i'm also going to go into profiles and
376:05 - delete these profiles so if i just go in
376:07 - here and kind of like say all my
376:09 - profiles and then just delete this is
376:11 - going to be fine as well so sort of
376:13 - problem all right so now i've deleted
376:15 - all my profiles
376:16 - and certificates
376:19 - and that was the goal of this part of
376:22 - the chapter
376:23 - 9 i believe so yeah
376:26 - i've now deleted the existing
376:27 - development and production certs
376:29 - and
376:30 - then that is done with the profiles as
376:32 - well they're also gone
376:35 - so what we need to do now is to create
376:38 - something called a development
376:39 - certificate and just to recap a
376:40 - development certificate is
376:42 - a certificate that will allow you as a
376:44 - developer to run and test your
376:47 - application
376:48 - while you're developing it on real
376:50 - iphone or ipad all right
376:53 - so it's it's not necessary for releasing
376:56 - the application but i personally after
376:59 - many years of experience developing
377:00 - mobile applications i've come to the
377:01 - conclusion that i prefer actually
377:03 - running my application testing my
377:05 - applications are real devices as i
377:07 - develop because you also have emulators
377:09 - and you also have simulators that
377:12 - simulate and emulate the capabilities of
377:15 - iphone and
377:16 - android phones or tablets but i've come
377:19 - to the conclusion that it's actually for
377:21 - me at least better to test my
377:23 - application real phones or tablets
377:26 - so in order to be able to do that and if
377:28 - you have for instance an iphone
377:29 - connected to your computer
377:31 - um and you want to test your flag
377:33 - application on that iphone then the
377:35 - first thing you need to do is to create
377:36 - a development certificate so you need to
377:38 - identify yourself as a developer to
377:40 - apple so let's go to the certificate
377:42 - section and then just say create a
377:44 - certificate and then choose apple
377:47 - development actually sorry ios app
377:50 - development
377:51 - this is interesting it says
377:55 - yeah so it says apple that's very
377:56 - interesting so you can basically use
377:58 - something called apple development but
377:59 - we're not going to do that we're just
378:00 - going to say ios app development at the
378:02 - moment okay
378:03 - so
378:04 - let's do that just choose ios app
378:06 - development and just press continue and
378:08 - here it says create a new certificate
378:11 - and create a new certificate is it's
378:14 - waiting for you to tell it that you're
378:17 - asking for a development certificate and
378:18 - you need to choose a file now this is
378:20 - the magic part you need to now go back
378:22 - to
378:22 - keychain so let me see if i can bring up
378:24 - keychain again
378:26 - and in here
378:28 - just go to keychain access menu
378:32 - and then say
378:33 - a certificate assistant and then say
378:36 - request a certificate from a certificate
378:38 - authority okay
378:40 - so i'm gonna press that and i'm gonna
378:43 - put my company's email here
378:46 - and the common name i'm just gonna leave
378:48 - it as my name all right
378:50 - and then i'm just going to say save to
378:52 - disk
378:53 - all right
378:55 - so um
378:57 - that's what we're doing now
378:59 - then i'm gonna say continue and it says
379:01 - okay i'm gonna write a file on your
379:03 - desktop or wherever you want with that
379:05 - request so save it somewhere that you
379:07 - know where it is actually saved so i'm
379:09 - gonna save that and then say done all
379:12 - right now you see
379:13 - that certificate request in itself
379:15 - didn't create a certificate it's just a
379:17 - certificate request but what it did is
379:19 - that it created a private key
379:22 - and you can actually go to your keys
379:23 - here and you'll see that there was a
379:26 - if i say kind private key so one of
379:28 - these keys is the one that was just
379:30 - created right now okay
379:32 - i don't exactly know which one because
379:34 - it doesn't have a date but it's just one
379:35 - of these so every request for creating a
379:39 - certificate
379:40 - it creates with itself a private key
379:43 - okay so keep that in mind let's go back
379:45 - to my certificates
379:47 - now that that file has been saved on
379:48 - your desktop just say choose file and
379:50 - then go to your desktop
379:53 - and pick that certificate request okay
379:56 - and it's you see here certificate
379:58 - request search sign request
380:00 - and just say continue
380:02 - and then it says okay it expires in a
380:05 - year and you need to keep that in mind
380:07 - because development certificates do
380:08 - always expire in a year and you need to
380:10 - by basically renew them okay
380:13 - so but for now you don't have to worry
380:14 - about that because we're not going to
380:15 - take a year to develop this application
380:17 - so let's just say download and it got
380:20 - downloaded to my downloads folder so
380:23 - i'm gonna bring up my downloads folder
380:25 - uh and actually
380:27 - just
380:29 - gonna show you here
380:31 - like this
380:33 - so
380:34 - here is
380:35 - the file that got downloaded you see
380:38 - it's a cert file all right now this
380:40 - certification in itself it doesn't
380:42 - contain your private key remember the
380:44 - private key is in the keychain so what
380:45 - you need to do is just you need to
380:46 - double click on this all right so
380:49 - double clicking on it you see it will
380:51 - then create a certificate in your
380:52 - keychain under my certificates and login
380:54 - keychain that is linked with your
380:57 - private key you see so this is what you
380:59 - downloaded from apple this is what you
381:00 - created on your computer by requesting a
381:03 - certificate and when you double click on
381:05 - the downloaded certificate these two get
381:07 - hooked together okay
381:09 - so that's it that that is what you have
381:12 - to do to create a development
381:14 - certificate and the key related to it
381:16 - all right
381:18 - now let's go to the production
381:20 - certificate and we need to kind of do
381:21 - the same thing same process
381:24 - in order to create our production
381:25 - certificate so let's go back to all
381:27 - certificates and i'm just going to say
381:28 - plus certificate and
381:30 - i'm gonna say ios distribution app store
381:34 - and ad hoc okay so choose that option
381:36 - please
381:38 - and sorry i'm just gonna not also in my
381:40 - notes here that we talked about the dev
381:42 - certificate
381:44 - so let's go ahead and press continue
381:46 - here and you'll have to do the exact
381:48 - same process as you did for the
381:49 - development certificate and create a new
381:52 - certificate request so
381:55 - let's do the same thing just basically
381:56 - kind of copy and paste the same process
381:59 - go to keychain access
382:01 - certificate assistant request a
382:02 - certificate from a certificate authority
382:05 - and just be careful a little bit with
382:06 - this because i've understood from what
382:08 - i've what i've seen is that depending on
382:10 - what you've chosen here this menu
382:13 - actually changes
382:14 - so
382:16 - it could be that you kind of need to
382:18 - make sure in your keychain that you're
382:20 - not selecting anything
382:21 - so just make sure that nothing is
382:23 - selected and then go to um sorry then go
382:25 - to
382:27 - certificate assistant and request a
382:29 - certificate for certificate authority
382:30 - put your
382:31 - company's or your developer accounts
382:34 - email there i'm just gonna pick solid a
382:35 - b
382:36 - and then save to disk and then say
382:38 - continue
382:39 - and then save it to desktop and since
382:41 - there is a file already there with the
382:42 - same name from the previous step it's
382:44 - going to say are you sure you want to
382:45 - replace it yes replace it
382:48 - and it got saved then i'm going to go
382:50 - here and then choose the same exact file
382:53 - but it's
382:54 - actually is a new file which got
382:55 - rewritten
382:56 - and then say continue
382:58 - and you'll see now there is a download
383:00 - so
383:01 - i'm going to download that and if i go
383:03 - to my downloads folder um
383:07 - here i'll bring it up so you can see as
383:09 - well
383:11 - um
383:13 - let's see
383:14 - i'm going to bring it here you will see
383:15 - that there is a new file called ios
383:18 - distribution that is your production
383:20 - certificate okay so double click on that
383:22 - keychain it's open again and you'll see
383:24 - now you have two certificates here
383:25 - iphone distribution and then iphone
383:27 - developer so
383:29 - these are your certificates and keep
383:31 - hold of them kind of like try to save
383:33 - them and if even if you don't save them
383:35 - it's okay because they're now placed
383:36 - here so you can always export them okay
383:39 - but it's also good practice just to keep
383:41 - hold of them
383:43 - great
383:44 - now
383:45 - sorry about that
383:46 - now we've created a developer and a dis
383:50 - and a production or distribution
383:51 - certificate
383:52 - let's talk about the next step and that
383:54 - is required for us to be able to release
383:56 - or test our application on
383:58 - on phones so
384:00 - let's go back here and to identifiers
384:03 - and in here is where you create your
384:05 - application identifiers and you can see
384:07 - that they're actually tied to a specific
384:09 - organization and identifier which we
384:11 - talked about
384:12 - in which chapter was it that we talked
384:14 - about i think it was actually in chapter
384:16 - eight
384:17 - yes if you have if you don't know what
384:18 - an identifier is please go back to
384:21 - chapter number eight where i discussed
384:23 - that so
384:25 - let's
384:26 - press the plus button here
384:28 - and say that you want to create a new
384:30 - app id okay press continue and then you
384:34 - will choose app here not an app clip
384:37 - and then you will be presented with this
384:39 - screen here so i'm gonna
384:41 - explain to you what all this is so
384:43 - in here the description um we're just
384:45 - gonna print some information here that
384:48 - describes our application and to be
384:50 - honest with you i don't remember what we
384:52 - actually called our application when we
384:54 - created
384:55 - in the previous i can see it was called
384:57 - my notes
384:59 - so i'm just going to say my notes
385:01 - flutter application sample or flutter
385:04 - app all right
385:06 - here the bundle identifier is very
385:08 - important that you actually specify it
385:09 - correctly as we created it in our
385:13 - in chapter 8. so i'm going to bring up
385:15 - the my notes application here i'm going
385:17 - to increase the font size so you can see
385:20 - um if you remember where we created the
385:23 - application
385:25 - with this command you see we said
385:27 - se.pixelity and then my notes meaning
385:30 - that the application identifier from
385:32 - this point on is going to be
385:34 - se.pixelity.mynotes okay with a dot in
385:37 - between all right so if i search for
385:39 - that in our project let's say
385:40 - sepixolity.mynotes
385:43 - you will see there are some results here
385:44 - you see so depending on how you created
385:46 - your floater application depending on
385:48 - what organization you specified this
385:50 - identifier may be different for you but
385:52 - since my identifier in this case is s
385:54 - epixody my notes i'm just gonna copy
385:56 - that
385:58 - and i'm going to bring it here make sure
386:00 - explicit is selected and just paste that
386:02 - bundle id in there okay so yeah it's
386:04 - chosen
386:05 - now if you remember what i said before
386:06 - an app identifier is not just the
386:08 - identifier the bundle id itself but it's
386:10 - also like a list of capabilities that
386:12 - your application can have now if you for
386:14 - instance want to have push notifications
386:16 - you will also need to enable that in
386:18 - here now push notification is not not
386:20 - something that we're going to do in this
386:22 - course so you don't have to do that but
386:25 - all you need to do here after you've
386:26 - entered your app id prefix sorry your
386:30 - app bundle an identifier and a
386:31 - description just press continue
386:35 - and you can see that says okay are you
386:36 - sure everything's fine yeah explicit
386:38 - yeah great and then i say register
386:41 - now that identifier got created all
386:43 - right
386:45 - so
386:46 - um
386:47 - you don't really have to do anything
386:48 - with that identifier right now it's just
386:50 - that you have now registered that
386:52 - identifier so no one else can basically
386:54 - take that app from you
386:57 - so
386:58 - i'm gonna
386:59 - actually
387:02 - tick these items in my notes so that we
387:04 - know we've talked about it all right
387:06 - now the next step
387:08 - is to prepare your
387:11 - uh your application so that it can
387:13 - actually be installed and debugged or
387:15 - tested on real phone now
387:18 - you can't see my entire setup but here i
387:21 - have an iphone 12 pro which is just
387:24 - right here it's a little bit dirty
387:26 - screen but that doesn't matter it's just
387:27 - my test telephone
387:28 - and
387:29 - this phone
387:31 - is connected as you can see with a cable
387:34 - to my computer and it is available for
387:37 - my computer to see so i'm just going to
387:39 - unlock this phone right now with my
387:40 - passcode
387:42 - and if i then bring up my
387:45 - finder
387:47 - so here
387:48 - you can see that it is available here
387:51 - right here okay
387:52 - so it's my telephone and
387:55 - it has a special identifier and if you
387:58 - want to get your device identifier which
388:00 - is what we need to do here as you can
388:02 - see in order to debug on a real device
388:04 - we need a uid to register for our
388:06 - profile
388:07 - so
388:08 - when you i mean this is a kind of like a
388:10 - big thing to talk about because it takes
388:12 - a lot of time but what i'm going to say
388:13 - here is that when you created that
388:15 - development pro and development
388:18 - certificate the next step is for you to
388:21 - basically register your device with
388:23 - apple so that apple knows on which
388:25 - devices you actually want to test your
388:27 - application all right
388:29 - and those devices they're stored in here
388:31 - in under the devices um tab
388:34 - and there are ways to get your device
388:36 - identifier such as going to finder as i
388:40 - just showed here and just tapping on
388:42 - your
388:43 - device now i'm kind of going to do it
388:45 - off screen so you don't see the entirety
388:47 - of what is here
388:50 - so
388:52 - let me see if there's any way for you to
388:54 - actually get your device identifier yes
388:56 - and it is i can actually see here
388:58 - there's a way to get that um
389:00 - so what i'm going to do is i'm going to
389:02 - actually bring finder up here so you see
389:04 - what happens i just tap on my phone now
389:07 - you need to register your device on
389:09 - identifier under this devices tab before
389:12 - you create your profile okay
389:14 - i'm not going to do that because my
389:16 - phone is already registered but you need
389:17 - to do this on your own and the way to do
389:19 - that is to connect your phone or your
389:22 - tablet which you want to test your
389:23 - flutter application on to your computer
389:26 - then
389:27 - go into finder and tap on your phone and
389:30 - then just click on this section now i'm
389:33 - not going to do that here and the reason
389:35 - behind that is that every device
389:37 - says identifier really identifies that
389:39 - device so you could go and register my
389:40 - device under your account
389:42 - so
389:44 - and it's just not a good idea to show
389:45 - your device identifier to others so i'm
389:47 - not i'm not going to be able to do that
389:49 - unfortunately in this course but
389:51 - the steps you have to take is to click
389:53 - here
389:54 - on this label and it will show you a
389:56 - section called uuid
389:58 - copy that uuid and go into devices
390:03 - section of the certificate identifiers
390:05 - and profile section of apple developer
390:07 - account and add that uuid with a name to
390:11 - your account
390:12 - okay so i'm just gonna assume you've
390:14 - done that and if you need some time to
390:16 - go ahead and do that please pause this
390:18 - video and do that so
390:20 - the key is just to get the identifier
390:22 - from here okay there's a way also get
390:24 - your identifier your device identifier
390:26 - from xcode um and that works exactly the
390:29 - same you just have to open xcode then go
390:31 - to um i believe go into menu and then
390:35 - pick devices and from there you pick
390:36 - your device and you'll see it's
390:38 - identifier right there
390:40 - so that was a lot of talk let's say that
390:42 - you've already done that
390:44 - so what we need to do now is to go and
390:46 - create a development profile all right
390:50 - so i'm just going to tick these items in
390:54 - my notes as well
390:55 - so this is the exciting part now we're
390:56 - going to go to the profile section and
390:58 - create a new development profile so
391:01 - click on generate a profile and i'm
391:03 - going to say ios app development and
391:04 - then say continue
391:06 - then it says okay choose an app id you
391:08 - see now your profile is going to be
391:09 - linked with your app so
391:11 - do this drop down here and you can see
391:14 - i'm just going to say my notes and this
391:16 - is the app that i created
391:18 - and for you this id maybe a little bit
391:20 - different the description maybe a little
391:21 - different but just choose the
391:24 - um
391:24 - app id that you created in the previous
391:27 - steps so i'm going to choose that i'm
391:29 - just going to say continue
391:31 - now it's going to say okay which
391:33 - certificate is this profile connected to
391:35 - do you remember i said that a profile is
391:37 - linked to a certificate this is what
391:40 - that actually means so
391:42 - granted that you've created your
391:43 - development certificate in as i talked
391:46 - about in this chapter just select your
391:47 - certificate so and then say continue
391:50 - now
391:51 - here it asks is that
391:53 - which devices do you want this um
391:57 - profile which which device do you want
392:00 - your application which is signed with
392:01 - this profile certainly to be able to run
392:03 - on now these all these devices come from
392:06 - the devices section i've registered many
392:08 - devices so
392:10 - um
392:10 - even some of my co-workers devices
392:14 - which allow us to basically debug an
392:16 - application on their devices as well so
392:18 - granted that you've
392:19 - done that
392:21 - if you go back here
392:22 - then you will see those um
392:26 - see those devices in this list
392:29 - right so i'm just going to say select
392:30 - all just make sure my application can be
392:33 - run on all those devices that i've
392:35 - registered okay
392:37 - then say continue and then you will give
392:39 - it a name so i'm going to give it a name
392:41 - of my notes
392:42 - dival dev
392:44 - profile
392:46 - or just my notes dev okay
392:48 - i'm just going to say generate
392:50 - and you will get some information about
392:52 - when it expires etc also expires in a
392:54 - year
392:55 - so and then you'll have to say download
392:58 - and we're going to do the exact same
393:00 - thing now for a distribution profile a
393:02 - distribution profile is the kind of like
393:04 - the same dev profile but you cannot
393:06 - debug your application with it all you
393:08 - can pretty much do with it is to sign
393:10 - your application with that profile and
393:12 - send it to apple so that you can deploy
393:14 - your application in the app store okay
393:16 - so press plus profile and in this and
393:19 - this time go to distribution and say app
393:21 - store you see distribution subsection
393:23 - and app store
393:25 - so press the continue button
393:27 - then go here and then choose your
393:30 - application
393:32 - so that was the development profile
393:33 - sorry now we have to go to production so
393:36 - i'm going to bring the window a little
393:38 - bit up so that you can see it in its
393:39 - entirety so
393:41 - then i'm gonna choose my notes
393:44 - all right
393:45 - and then i'm just gonna press the
393:47 - continue button here
393:50 - um
393:51 - i'm gonna take it in my notes so we've
393:52 - talked about the dev profile okay
393:56 - so now that you've done that uh
393:59 - choose your assertive again you see it
394:00 - says okay now you're creating a
394:01 - certificate a profile for a distribution
394:04 - then it should be hooked with some sort
394:05 - of distribution certificate and since
394:07 - ios distribution certificate is the only
394:09 - one that we created if you remember i
394:10 - deleted all my other certificates
394:13 - so that's the only one left here just
394:15 - pick that and press continue
394:16 - now give it a name i'm going to say my
394:18 - notes
394:21 - prod
394:22 - production
394:23 - and then i'm just gonna say generate it
394:25 - says
394:26 - okay there you go and you can download
394:28 - it all right
394:29 - now that you've done that you need to
394:31 - bring up your
394:33 - downloads folder where your profiles got
394:35 - downloaded um
394:37 - now you see these are the two profiles i
394:39 - got downloaded except with their
394:40 - extension of mobile provision provision
394:43 - you need to install these somehow on
394:45 - your computer so that you can sign your
394:47 - applications or your ios application
394:50 - with this with these
394:52 - so what you need to do now is to copy
394:54 - these two files i'm going to copy them
394:56 - like this and command c
394:58 - and then bring them into your provision
395:00 - profiles folder i'm just going to
395:02 - cut and paste them there okay so they're
395:05 - not in the downloads folder anymore so
395:06 - there they are
395:08 - there are other ways of installing these
395:10 - profiles some people rather drag it into
395:12 - xcode some people double click on them
395:14 - and those are all fine but there's a
395:16 - little bit of a problem by doing those
395:18 - methods compared with the method i
395:20 - showed you here if you double click
395:22 - these profiles
395:24 - mac os knows how how to install them but
395:27 - mac os just messes up their naming so
395:29 - they will be installed on their very
395:31 - random names so if you come back to your
395:33 - provisioning profiles folder they may be
395:35 - under some sort of a cryptic name that
395:37 - you don't recognize anymore so in this
395:39 - way they
395:40 - basically keep their original name which
395:43 - is very descriptive of what they
395:44 - actually are okay
395:48 - okay that was that so now we've created
395:51 - a um dev profile and a prod profile
395:58 - exciting stuff so what we need to do now
396:01 - is actually work we can say that we're
396:03 - done with this screen here so i'm going
396:06 - to close that
396:07 - and what i'm going to do here then is to
396:10 - what we need to talk about now is to set
396:12 - up our project
396:13 - in xcode so that xcode understands that
396:17 - our application needs to be signed with
396:18 - the correct profiles and certificates so
396:20 - what i need you to do is to go to the
396:23 - ios folder in your flutter project and
396:26 - just right click on it and say reveal in
396:28 - finder okay
396:30 - after you do reveal in finder double
396:32 - click on the workspace in order to open
396:35 - your
396:35 - flutter xcode workspace in xcode
396:40 - and what you'll need to do now is to
396:42 - basically
396:44 - make sure that your signing of your ios
396:47 - application is done correctly so choose
396:49 - this icon on top left in your um i think
396:52 - it's project explorer or something
396:54 - project navigator
396:56 - then on the targets
396:58 - choose your targets and then go to
397:01 - signing and capabilities and just remove
397:04 - automatic signing okay
397:06 - for this course we're not going to use
397:08 - automatic signing
397:10 - i'm just going to take it
397:12 - here in my notes that i've talked about
397:15 - removing automatic signing
397:21 - so
397:22 - the next step is for us to be able to
397:25 - tell xcode that for debug purposes in
397:27 - order for us to be able to run our
397:29 - application
397:30 - on a real phone and debug that
397:32 - application which profile and which
397:34 - certificate it needs to use
397:37 - so what i'm going to do here is to go
397:40 - into this section here as you can see
397:42 - debug on under signing and capabilities
397:45 - and then i can see that actually it is
397:48 - going to
397:50 - it's already using the automatic signing
397:53 - for debug and i'm going to remove that
397:54 - as well okay
397:56 - so what you need what you need to do
397:57 - here is actually pick the right profile
397:59 - here
398:00 - and it says my notes dev and my notes
398:02 - profile sorry prod and you can see it
398:05 - says ineligible
398:07 - and um
398:08 - that is because we don't have a
398:10 - development team yet and alex and i'll
398:12 - explain that soon but for now just go to
398:14 - your provisioning profile and say for
398:17 - debug purposes we're gonna use the
398:19 - mynotes dev
398:21 - um
398:22 - and then go to your release and then say
398:26 - i'm gonna use my notes prod okay and
398:29 - here's a little error here you see it
398:30 - says producing profile my notes pro
398:32 - doesn't include signing certificate
398:34 - apple development blah blah blah okay
398:37 - that's that's fine don't worry about
398:39 - that
398:40 - so
398:41 - what we need to do now is to actually
398:43 - tell it um so i'm going to actually pick
398:45 - here
398:47 - profound search setup release profile
398:49 - insert okay
398:52 - so what you need to do here is to
398:55 - go to your build settings and make sure
398:58 - that your development
399:00 - team
399:01 - here is actually selected you see
399:03 - pixelity is for me and then for you it
399:06 - may be something else so
399:08 - um now what i'm gonna do i mean
399:10 - sometimes uh and i can see signing
399:12 - certificate here is actually not really
399:14 - selected sometimes it can be that xcode
399:16 - kind of goes crazy when we play with
399:19 - certificates and signings so i'm going
399:21 - to close xcode
399:22 - i'm going to do the same thing here go
399:24 - to
399:27 - revealingfinder
399:29 - finder open up in another window here so
399:32 - i'm going to open up the workspace again
399:39 - okay i can see we're still getting the
399:41 - problem provisioning profile minus that
399:43 - doesn't include signing certificate
399:44 - apple development and let's open up our
399:46 - keychain again and have a look a little
399:48 - bit here
399:49 - and i can see unfortunately there is a
399:52 - profile you can see previously we had
399:54 - two profiles and it is very unfortunate
399:57 - because um
399:59 - so in here you can see this this
400:02 - development
400:03 - certificate was created by us you see
400:05 - they're very tightly close to each other
400:07 - these two we created but this is
400:09 - something that xcode has created and
400:11 - that is because xcode tries to do
400:13 - automatic signing as you saw it was
400:15 - saying automatically manage signing so
400:18 - by doing that it created a certificate
400:20 - for me on my behalf which i don't want
400:23 - so the error that we're seeing here is
400:25 - that
400:26 - xcode is now saying that this this
400:28 - profile that you have here is not linked
400:31 - to this thing
400:32 - which xcode created itself no one asked
400:34 - it to do that i didn't ask xcode to do
400:36 - that so when you're working with is a
400:38 - woman just know that xco tries to do a
400:39 - lot of magic for you and
400:42 - if you want to actually
400:43 - do things manually
400:45 - it may get in the way
400:47 - so what i'm going to do here is i'm
400:49 - going to delete this
400:51 - development certificate because i didn't
400:53 - ask for it okay
400:54 - so i'm going to say
400:55 - i believe actually that's the right one
400:57 - yeah so i'm going to say delete delete
400:59 - and now you can see that error went away
401:01 - simply because xcode was like ooh now i
401:03 - understand which one you're talking
401:04 - about
401:05 - and then the provision profile of the
401:08 - prod
401:09 - also is hooked
401:11 - correctly
401:12 - so
401:14 - now
401:15 - what i'm gonna do is as you can see here
401:18 - i've opened the project here and then i
401:21 - have my actual iphone selected here to
401:24 - be able to make sure that your
401:25 - application can actually run on this
401:28 - phone now after all of this hard work is
401:30 - just to press the play button here
401:33 - so i want to do that and i want to let
401:34 - it do its thing and if everything works
401:37 - correctly
401:38 - um it's going to basically then um allow
401:42 - us to run the application all right
401:44 - so now it says
401:46 - now and this is a dialogue that you're
401:47 - probably also going to get
401:49 - what's happening here is that it's
401:50 - trying to sign the application and all
401:52 - its libraries
401:54 - using that profile
401:56 - development profile and since that
401:58 - development profile is
402:00 - linked to a development certificate in
402:02 - the keychain and that keychain is
402:04 - password protected you see the login
402:06 - keychain it says i can't access that
402:08 - certificate give me the password for the
402:10 - login keychain so i'm going to type that
402:14 - and then i'm going to say always allow
402:17 - so let's do it let it do its thing
402:20 - and this may depending on the machine
402:23 - that you're running this uh process on
402:25 - it may take some time
402:27 - i can see it's saying now building so um
402:33 - okay then i got an actual failure here
402:37 - it says cloud firestore wasn't found
402:40 - and this is very interesting um
402:42 - actually i mean i didn't plan for this
402:43 - to happen but it did happen i'm kind of
402:45 - glad that it happened
402:48 - this happens usually
402:50 - when you um
402:53 - when you add new dependencies to your
402:55 - projects such as these big dependencies
402:57 - but they're not really linked to your
402:58 - project yet so the way to fix that is
403:01 - i'm gonna
403:02 - let xcode be here okay i'm gonna close
403:04 - this
403:06 - i'm gonna bring a terminal uh what i'm
403:08 - going to say here is flutter
403:11 - clean i clean
403:13 - ios
403:14 - or clear ios i think clean
403:17 - so this is basically going to clean up
403:20 - how the ios project was set up and all
403:22 - those dependencies all right now i'm
403:23 - going to close actually xcode as well
403:25 - then what i'm going to say is to say
403:26 - flutter pop get
403:32 - and flutter pop get what it does is that
403:34 - it sets up all our dependencies from the
403:37 - beginning and just to make sure i'm
403:38 - going to go into the ios
403:40 - folder and i'm going to say
403:43 - pod install
403:46 - and
403:47 - could not be compatible version okay pod
403:50 - [Music]
403:51 - install
403:52 - dash dash update repo
403:56 - uh
403:58 - hot install
404:00 - uh let's see if we can do an update repo
404:02 - i'm just gonna do that uh without like
404:06 - explaining it right now so much and see
404:08 - if that fixes our problem i'm going to
404:09 - bring up a new safari window and say
404:11 - pod install update repo let's see what
404:14 - the command was but because i've
404:15 - forgotten that
404:20 - what update we have
404:23 - yeah um let's pawn install
404:28 - i believe
404:30 - there is a variant of
404:32 - repo update it's called okay pot install
404:36 - repo update let's see if this fixes our
404:38 - problem
404:40 - and if cisco could not find compatible
404:42 - version for podcloud firestore from blah
404:45 - blah
404:45 - specs satisfying from dependencies were
404:48 - found but they require higher minimum
404:51 - deployment target and that's very
404:52 - interesting
404:53 - so
404:54 - what is happening here is
404:57 - you see the deployment target that we
404:59 - have for our application um what it
405:02 - means is that
405:03 - when we created the project with flutter
405:06 - flutter said that
405:08 - what it does internally is says
405:10 - this flutter application should be run
405:12 - on these ios versions and these android
405:14 - versions and what we're seeing here
405:16 - is that
405:19 - what we're seeing here is that we are
405:21 - using cloud firestore and cloud
405:22 - firestore as a dependency is expecting
405:24 - our application to have a minimum
405:26 - deployment version it means that cloud
405:28 - firestore cannot be used in applications
405:30 - that for instance are trying to run on
405:32 - ios 7 for instance okay so what we need
405:35 - to do here in your um flutter project
405:38 - just say command p in visual studio code
405:40 - and open up a file called um
405:44 - pod file all right
405:46 - you go in there and
405:48 - let's see
405:49 - here we have some stuff set up let's go
405:52 - in here and just say platform ios and
405:55 - what we're going to do is just to say
405:57 - platform ios 13
405:59 - just just now i mean 13 it's really good
406:02 - because right now is ios 15 is available
406:06 - so you could just say you're supporting
406:07 - 15 14 and 13. so i'm going to do that
406:10 - and then i'm going to run pod install
406:12 - again
406:15 - and this time i can see that things are
406:17 - going a lot better and it's installing
406:19 - all our dependencies without a problem
406:22 - so
406:23 - um what you need to know now what i did
406:25 - here was something that you probably
406:27 - would need to do if you're comfortable
406:29 - with ios development so you need to fix
406:31 - these problems by hand
406:33 - but before i explain what i actually did
406:35 - you need to know about something called
406:37 - pod
406:38 - and i explained this in the previous
406:39 - chapters about when we started in
406:42 - chapter 8 when we talked about
406:43 - dependencies
406:45 - flutter
406:47 - can in can create ios applications ios
406:50 - applications dependencies are
406:53 - basically using uh cocoa pods
406:56 - so cocoapods is a dependency management
406:59 - system for ios applications
407:01 - and
407:02 - you need to just know that
407:04 - you need to in order to be able to do
407:06 - the trick that i just did you need to
407:08 - install cocoapods and there is a good
407:10 - website for that i mean you can i'll
407:12 - bring up my and i say install cocoapods
407:17 - and then i go here and you just say
407:19 - cocoapods and then there is a command
407:21 - that you need to issue in your computer
407:23 - in order to install cocoapods okay
407:26 - so um after you've installed cocoapods
407:30 - then you can go into your ios project
407:32 - and like
407:32 - ask it to reinstall your dependencies so
407:36 - the key here though was for me to
407:37 - uncomment this platform line in the pod
407:40 - file where my dependencies are managed
407:42 - so i'm just going to say
407:43 - now i'm supporting ios 13 at the minimum
407:47 - all right and then i manually ask the io
407:50 - the project to be recreated the ios
407:53 - project to be recreated using pod
407:56 - install repo update
407:58 - so
407:59 - after you've done that your dependencies
408:00 - are generated and then i'm going to
408:02 - right click on ios again
408:04 - and i'm going to say oh i can say open
408:06 - in xcode that's interesting will that
408:08 - work i don't dare to be honest with you
408:09 - do that
408:10 - revealing finder and then i'm going to
408:12 - do that and open a project so
408:16 - i'm going to go now do command
408:20 - do i do command b maybe not let's just
408:22 - run it directly so
408:25 - so
408:26 - i'm gonna then bring up xcode and press
408:29 - run again and let's see if it can then
408:31 - find
408:32 - those dependencies that it couldn't find
408:34 - previously okay
408:36 - so
408:37 - we're gonna
408:39 - let it do its thing
408:42 - and it may take some time as you can see
408:44 - because there's lots of dependencies we
408:46 - dragged in
408:47 - and all i think there were firebase off
408:50 - we had firebase core we had cloud
408:53 - firestore and also firebase analytics so
408:55 - these dependencies
408:56 - themselves can bring with them a lot of
408:58 - other dependencies so
409:01 - um it is important that
409:03 - that then to know that
409:05 - as i mentioned in the previous chapter
409:06 - in chapter eight bringing dependencies
409:08 - is not just
409:09 - all
409:10 - butterflies and balloons in the sky it
409:12 - is actually a serious process you need
409:13 - to consider what's bringing in a
409:16 - dependency means to you and your team
409:17 - and your application so
409:19 - in this case we've only brought
409:20 - dependencies that were officially done
409:22 - by google and google is behind flutter
409:25 - so i think
409:26 - then the
409:28 - you can basically trust anything that
409:29 - has to do with firebase at least so
409:32 - if it's released by the google team that
409:35 - work on firebase of course
409:37 - um so we're gonna let it do its thing
409:40 - i'm gonna just tap here and i can see
409:42 - that
409:43 - it's building quite a lot of files
409:47 - if everything goes according to
409:49 - our plan
409:50 - then
409:52 - the result is going to be that
409:53 - application run on this phone
409:56 - so um
409:58 - it would be very exciting actually to
410:00 - see if this will
410:01 - work as we intend to
410:05 - and as i mentioned depending on the
410:07 - computer that you're using this process
410:09 - may take
410:10 - in the beginning at least
410:12 - quite a lot of time
410:14 - so if you have a powerful computer it
410:16 - may take less time and if you have a
410:17 - little bit less powerful computer it may
410:18 - take some more time
410:20 - and
410:21 - um now that we're waiting i should also
410:23 - probably mention that this process of
410:25 - waiting is only initially
410:28 - something you need to do
410:30 - once the build has been done once it
410:33 - kind of like its artifacts will be
410:34 - cached inside your computer
410:36 - so that you don't have to rebuild the
410:38 - entire project from the beginning okay
410:41 - so
410:42 - um
410:44 - i'm gonna let it do its thing
410:47 - and uh while we're waiting actually we
410:49 - could talk a little bit about quicktime
410:51 - which is a caption i brought here
410:53 - if you're like me and you like to like
410:55 - debug your applications on real phones
410:58 - then you may want to see or show that
411:01 - your your phone's screen
411:03 - and
411:05 - on your computer so for instance if
411:07 - you're sharing your computer as a screen
411:08 - with a co-worker and he or she wants to
411:11 - also see your application running on
411:14 - your phone you will need to use
411:16 - something called a quicktime network
411:18 - quicktime
411:19 - so we're going to talk about that now
411:21 - but before we do that let me just show
411:22 - you
411:23 - that here is now our flutter application
411:27 - run on this telephone
411:29 - so
411:31 - there we go
411:32 - our app is now running
411:34 - now that we've done that all of this is
411:36 - done you don't need xcode anymore so i'm
411:38 - just going to press stop here and what
411:40 - i'm going to do i'm actually going to
411:41 - run our application from visual studio
411:44 - code or flutter application on that
411:47 - iphone all right so command shift b or
411:49 - control shift b depending on which
411:50 - platform you're using and say select
411:52 - device
411:53 - i'm going to choose my iphone 12 pro
411:55 - then i'm going to go to run and say run
411:57 - without debugging
411:59 - you don't have any extensions oh not
412:01 - this file open up your main darp file
412:04 - okay
412:05 - and then say run run without debugging
412:08 - and you'll see it says launching
412:11 - so this is going to actually consult
412:13 - xcode and say that hey xcode here's the
412:16 - flutter application run it on this
412:19 - telephone
412:22 - so
412:25 - and to be honest with you i actually
412:26 - didn't like this that it's using
412:27 - automatic signing
412:29 - it what may have happened is that when
412:31 - we did flutter clea clean you may have
412:34 - messed up our
412:36 - profiles to be honest with you
412:38 - and this is not a good sign it could be
412:40 - that when i did flutter clean it
412:42 - actually messed up the profile
412:45 - so i'm going to open up xcode again and
412:47 - bring up our application again and let's
412:49 - have a look at our profiles
412:52 - and i can see debug no it's fine it's
412:54 - not automatic signing so
412:57 - you don't have to worry about this
412:58 - message that was printed to the screen
413:00 - by uh by flutter so i don't think this
413:03 - something that we need to worry about
413:06 - so now that you've set that up then you
413:09 - could actually run your application
413:11 - directly from
413:12 - visual studio code or android studio
413:14 - depending on which environment you're
413:16 - running your
413:17 - flutter applications or debugging your
413:19 - applications from
413:21 - okay now let's say that that is done um
413:26 - then what you need to do if you want to
413:28 - mirror your application
413:30 - screen on your computer then you can
413:33 - bring up something called quicktime
413:34 - player on your macintosh and then go to
413:37 - file and then say movie recording now
413:39 - this is probably going to hijack my
413:42 - no it didn't hijack anything then i'm
413:44 - going to go to
413:46 - iphone 12 pro and see if it can mirror
413:49 - that phone for me
413:52 - uh
413:55 - is it not able to do that is it because
413:57 - i'm recording my screen or something i'm
413:59 - gonna actually
414:00 - [Music]
414:02 - wait for this debug process to continue
414:08 - let us do its thing first i think i'm
414:10 - probably trying to do too many things at
414:11 - the same time so
414:14 - uh
414:15 - [Applause]
414:16 - i proxy i don't really know what i proxy
414:18 - is
414:20 - so
414:22 - um
414:24 - connecting to the vm service taking
414:25 - longer than except expected and that
414:27 - could be because my macintosh is
414:28 - actually blocking something that flopper
414:30 - needs so i'm going to go to privacy here
414:33 - which is security and privacy and just
414:34 - let iproxy to run
414:36 - allow anyway
414:38 - so that may help flutter then get its
414:41 - process working
414:46 - yeah that could be it because maybe my
414:48 - macintosh just blocked that eye proxy so
414:51 - i'm gonna stop this process and i'm just
414:53 - going to say run run without debugging
414:55 - again let's see if it can do its work
414:57 - this time
415:00 - launching and this time since it's
415:02 - actually built the application
415:04 - previously it shouldn't take long this
415:07 - time before it can run the app
415:09 - so it has already built the app once so
415:12 - it shouldn't really take as long this
415:13 - time
415:16 - so
415:16 - i can now see it says installing and
415:18 - launching
415:21 - so let's see if we can get that to work
415:26 - xcode build done in eight seconds
415:28 - and to be honest with you this is taking
415:29 - longer than i expected it shouldn't take
415:31 - this long to run the application and i
415:34 - can see nothing was blocked this time
415:36 - mac os cannot verify the developer of
415:37 - iproxy and i'm just going to say open
415:40 - i think there is something wrong with
415:42 - the latest versions of mac os and how it
415:45 - tries to for instance verify
415:47 - various tools that
415:49 - flutter is using internally but
415:51 - everything went fine at the end i could
415:53 - actually launch the application from
415:55 - visual studio code and now it's running
415:58 - inside my iphone
416:00 - now i'm gonna stop this so now the app
416:02 - as soon as i say stop the app is going
416:04 - to stop working there what i'm going to
416:06 - do then is to go to
416:08 - quicktime
416:10 - and see if we can get quicktime to
416:12 - actually mirror
416:14 - this iphone i'm going to unplug it
416:16 - the phone and then plug it again
416:18 - and see
416:20 - if it understands that it has to mirror
416:23 - the phone
416:25 - i can see my quicktime is also giving me
416:26 - some trouble
416:30 - and it crashed
416:34 - i mean this is live uh recording of this
416:36 - session so you can see all the problems
416:38 - a developer will have to fix and this is
416:40 - me
416:41 - so let's go to um and see if we can
416:45 - get it to
416:48 - let's see
416:49 - if i can get it to
416:53 - recognize this phone
416:56 - and to be honest with you i mean i'm
416:58 - actually doing this on a separate screen
416:59 - so you don't have to see my face so much
417:01 - but i can see that my macintosh for some
417:03 - reason is not recognizing this telephone
417:04 - so i cannot record it basically on this
417:07 - um
417:09 - uh on this screen right now
417:12 - but if you're doing this at home it's
417:14 - probably gonna work for you so uh
417:16 - connect your phone with a cable to your
417:17 - computer and then go to quicktime player
417:19 - and then with quicktime player say new
417:21 - movie recording and from movie recording
417:23 - just from the drop down choose your
417:25 - choose your um
417:29 - phone and you'll be able to mirror your
417:31 - screen so
417:33 - um
417:34 - now that that is done i mean we actually
417:38 - got to a lot of hurdles that i hadn't
417:40 - planned for we saw the iproxy thing
417:43 - happening here
417:44 - grateful that it happened
417:46 - we saw the error with the pod
417:47 - installation which is the dependency of
417:49 - our project because there was no minimum
417:51 - version set up for our flutter project
417:53 - we fixed that we saw a problem with the
417:56 - profile not being picked up
417:58 - automatically because xcode had created
418:00 - the certificate automatically we fixed
418:02 - that
418:03 - so
418:04 - i mean i could
418:06 - for instance now go and filter these out
418:08 - from the video and kind of like when i
418:11 - actually output the final course for you
418:13 - then everything will just work perfectly
418:15 - so
418:16 - you don't have to see any of that
418:18 - hiccup
418:19 - but i don't want to do that to be honest
418:21 - with you because i think it's so
418:22 - important for you to see
418:24 - what issues
418:26 - you will get as you develop your
418:28 - thoughts or applications it is important
418:30 - i don't want to polish this um i don't
418:32 - want to polish this uh course so much
418:34 - that you think everything is perfect
418:36 - from the absolute beginning and if
418:37 - you're and if you're making mistakes
418:39 - then something is wrong with the way
418:40 - you're developing things but these
418:42 - things happen you need to understand why
418:44 - they happen then you need to learn how
418:46 - to fix them so
418:48 - with that said
418:49 - uh
418:50 - i think then we're good to go uh for ios
418:53 - we've explained
418:54 - everything we needed to explain
418:56 - uh everything worked except for the
418:58 - quicktime thing and i think that is
419:00 - because
419:01 - um i'm actually i have a lot of software
419:03 - open here i am playing stop playing in
419:05 - stuff recording stuff so it may be
419:08 - because of that is a little bit confused
419:09 - and who knows maybe my computer needs to
419:11 - restart so
419:12 - um
419:14 - so with that said let's prepare
419:15 - ourselves for the next chapter and that
419:17 - is
419:18 - to do the exact same thing with it for
419:20 - ios hopefully with less explanation now
419:23 - that we've gone through the basics for
419:25 - android so
419:27 - uh grab a cup of tea cup coffee whatever
419:30 - you want and i'll see you in the next
419:31 - chapter
419:32 - hello and welcome to chapter 10 of this
419:34 - flutter course
419:36 - in this chapter we're going to look at
419:37 - setting up our android
419:39 - phone
419:40 - or any android device that you may have
419:42 - at hand in order for us to be able to
419:44 - run our flutter code on it and now in
419:46 - chapter nine we looked at how we can run
419:49 - the application
419:50 - and basically run our flash application
419:53 - on an ios device and we set up the
419:56 - provisioning profiles we set up the
419:58 - certificates what else
420:01 - the app id
420:03 - at app store can on um
420:05 - apple's developer website
420:07 - i mean there is a lot of work to do and
420:10 - you know that chapter took about an hour
420:12 - to explain everything but
420:14 - when it then comes to
420:16 - the android side things are a lot easier
420:19 - um
420:20 - so
420:21 - i thought in this chapter we're gonna
420:22 - have a look at how we can
420:25 - have an android phone for instance in my
420:27 - case here i have a oneplus pro 7 pro
420:32 - that is connected with a usb cable to my
420:35 - computer so there's nothing special
420:38 - about it it's just an android phone and
420:40 - um
420:41 - i prefer to actually as i mentioned in
420:44 - the previous chapter in chapter 9 that
420:46 - i prefer personally when i'm developing
420:48 - applications to
420:51 - developing floss applications to run my
420:53 - applications on a real phone or a real
420:56 - device as i'm testing now
420:59 - um you may not know this if you're
421:01 - coming from like a design background or
421:02 - a background that's not really related
421:04 - to mobile development in previously but
421:08 - um
421:10 - if you're developing applications for
421:12 - only ios then you have something called
421:14 - an ios simulator
421:16 - um an io simulator is a program that
421:20 - runs on your macintosh that comes with
421:22 - xcode and the ios sdk that allows you to
421:25 - simulate how ios internally works and it
421:28 - allows you to install your applications
421:29 - from xcode directly or from from flutter
421:33 - directly into the simulator and simulate
421:37 - basically how your application will be
421:39 - perceived by your actual users
421:42 - if you're developing applications for
421:44 - android then there is something called
421:47 - an android emulator now an emulator is
421:50 - quite different from a simulator in that
421:52 - an emulator as its name indicates it
421:55 - actually tries to emulate everything
421:57 - about the operating system and the
421:59 - device so for instance an android
422:02 - emulator for an old device for instance
422:05 - that you may get a hold of a device
422:07 - that's five six years old
422:09 - it will actually work slower
422:12 - than an android emulator for a very
422:15 - modern device
422:17 - but had you done the same thing for an
422:18 - ios simulator and simulated an ios
422:21 - device that's five years old
422:23 - it would still perform
422:25 - at today's like at your computer's uh
422:29 - speed because it is simulating ios it's
422:32 - not actually emulating it the way it
422:34 - really works on a phone so
422:36 - when it comes to android you have this
422:38 - possibility to run your application on
422:40 - an emulator which is a lot closer to the
422:42 - actual device that your user will be
422:45 - using
422:47 - so it is not the exact perfect copy in
422:50 - most cases so it's not gonna be like
422:52 - working exactly as a real physical phone
422:55 - but it's a lot closer to the actual
422:58 - physical device that an ios simulator is
423:01 - so
423:04 - given that background i still prefer to
423:07 - run my flutter applications on a real
423:10 - phone
423:11 - and in this chapter
423:13 - if you're interested in that if you're
423:15 - if you have an android phone and you
423:17 - want to for instance deploy your flutter
423:20 - application on an android phone and test
423:22 - it while you're programming it then this
423:25 - chapter is for you
423:27 - now i also have to say that um
423:32 - mean
423:32 - [Music]
423:34 - you don't
423:35 - you don't have to do this but for the
423:37 - entire entirety of this course i'm
423:40 - actually going to be
423:42 - as we're developing the application the
423:44 - notes application i'm personally going
423:47 - to
423:48 - be using my android phone
423:50 - so that um
423:53 - so as we basically do hot reloads and
423:55 - then we write some code and we want to
423:57 - test it i'm not going to show any
423:58 - emulator i'm not going to show any
423:59 - simulator i'm actually going to show my
424:01 - real android phone working
424:03 - now i'm not going to show it with just
424:05 - like
424:06 - i'm not going to install the application
424:08 - here and just show you like this because
424:09 - this is not going to work it's not a
424:11 - good way of showing things to uh to
424:14 - someone watching this course so what
424:16 - we're gonna do is
424:18 - as the first
424:20 - task in this uh chapter we are going to
424:24 - install an application on our um
424:26 - computer called scrcpy
424:29 - okay
424:30 - now scrcp cpy is a
424:34 - is an open source project
424:36 - um
424:37 - that is on github with
424:39 - many thousand stars and it is
424:42 - not like a dependency it's not something
424:45 - that you're going to build into your
424:46 - flutter application but it's actually
424:48 - utility you're going to install on your
424:49 - computer okay so
424:52 - your computer will will then be able to
424:55 - mirror your android
424:57 - phone or your android tablet on your
424:59 - computer's screen so
425:02 - and this scr cpy is absolutely beautiful
425:05 - it's one of my absolute favorite
425:06 - utilities to have when doing mobile
425:08 - development
425:10 - and the reason behind that is that
425:11 - unlike the
425:13 - um
425:14 - solution that i showed in the previous
425:16 - chapter which is quicktime quicktime
425:18 - player where you mirror your ios
425:21 - telephone on your computer but you
425:24 - cannot interact with that mirrored image
425:26 - you still have to bring up your
425:28 - telephone and interact with the
425:30 - telephone and see the interactions
425:31 - either on the phone itself or on your
425:33 - screen unlike that scrcpy allows you to
425:36 - actually interact with your phone or
425:39 - your tablet or your android phone or
425:41 - tablet
425:42 - from your computer screen so you can
425:44 - actually take your mouse and then go to
425:46 - that screen and tap on a button and it
425:48 - will actually tap on that button on your
425:50 - android telephone so
425:52 - it is magical it's beautiful it's open
425:55 - source and free so if you have an
425:57 - android tablet or an android phone and
425:59 - you're following along with this course
426:00 - i highly recommend that we install
426:03 - scrcpy together actually as we're going
426:06 - to do
426:07 - in this course
426:08 - so
426:10 - i'm just going to take in my notes here
426:12 - that i've explained that so
426:14 - um before actually we go about
426:16 - installing scrcpy we need to
426:20 - do um we need to install adb
426:25 - and
426:26 - this adb is like um
426:28 - i believe it actually stands for android
426:31 - debugger or something let's see what
426:34 - actually adb stands for
426:36 - i'm gonna bring up a um
426:39 - a safari window here as you can see adb
426:42 - stands for android debug bridge and adb
426:45 - is a great tool if you want to for
426:47 - instance be able to talk with your
426:50 - android telephone all from the command
426:52 - line so you can send it a message and
426:53 - say hey take a screenshot
426:56 - hey do this or click here or yet
427:00 - close this application whatever so you
427:02 - basically send commands to your android
427:04 - telephone or tablet through your
427:06 - terminal it's um it's fantastic
427:08 - and
427:09 - with
427:10 - with
427:11 - adb i mean having adb install your
427:14 - computer then you can actually install
427:16 - scrcpy
427:18 - which uses adb in order to talk to your
427:21 - telephone and send commands to it and
427:23 - receive images from it etc so
427:26 - with that said we need to install adb so
427:30 - i'm going to close this turn window here
427:32 - and i'm going to bring up terminal
427:35 - i'm going to increase the size of this
427:38 - terminal window so you see what i'm
427:39 - doing okay
427:41 - so in here then i'm going to say
427:44 - brew install
427:46 - cask android platform tools okay
427:51 - so this will then allow you to
427:54 - install if i can
427:58 - using android platform tools then um you
428:01 - will be able to grab adb from that so
428:03 - android platform tools insta
428:05 - installation actually includes adb all
428:07 - right
428:08 - so
428:09 - um i can see that i mean for me you can
428:11 - see that i've already installed android
428:13 - platform tools so i get this message
428:15 - here saying that well you've already
428:17 - installed it
428:18 - but if you have not installed android
428:20 - platform tools before you will running
428:22 - this command will actually install it
428:24 - for you now i don't want to reinstall it
428:26 - so i'm just not going to do this
428:28 - suggested command here but just know
428:30 - that before you install scr cpy you will
428:33 - need to get adb up and running okay
428:36 - and that comes in android platform tools
428:42 - all right
428:45 - so
428:47 - let's let me just go into my notes and
428:49 - say that we've talked about adb so after
428:52 - you've done adb we need to go and i'm
428:55 - going to bring up safari again
428:59 - let's see if i can bring up the window
429:00 - here so you can see what i'm doing as
429:02 - well then i'm going to say scr cpy
429:06 - okay and then you will see that the
429:07 - first suggested website is on github and
429:09 - this is exactly where you need to go
429:12 - so go to scrcpy here and you will see
429:15 - information about how you can actually
429:17 - install scrcpy and it says on linux you
429:21 - can do apt installer crcpy on windows
429:24 - you can do a download here
429:26 - and on mac os then you can do brew
429:28 - install
429:30 - scr cpy
429:33 - so
429:34 - i've already done that so i've already
429:36 - actually installed scrcpy so i don't
429:38 - have to do anything special
429:42 - and um you can see it actually tells you
429:44 - here i'm going to increase the size of
429:46 - this window so you can see a little bit
429:48 - better
429:49 - and it will tell you here that you need
429:51 - adb accessible from your path if you
429:53 - don't have it yet then do that command
429:56 - that i mentioned to you okay
429:59 - so
430:00 - after you've done the installation on
430:02 - your computer then you should be able to
430:04 - bring up a terminal so i'm going to
430:06 - bring up terminal here
430:07 - and
430:08 - as you can see here i have my android
430:11 - telephone and it the screen looks like
430:14 - this right now so it's just on the home
430:16 - screen nothing special
430:20 - then
430:22 - i want to bring up scrcpy
430:25 - but before you do that
430:27 - if this is the first time you're doing
430:29 - this process you will probably need to
430:31 - enable something called usb debugging on
430:34 - your android telephone
430:36 - and
430:37 - depending on how your
430:40 - what your android phone looks like or
430:43 - what it is
430:44 - the usb debugging when you plug your
430:46 - android telephone it will kind of show
430:48 - you
430:49 - um
430:50 - a screen like this
430:52 - so i'm going to enlarge this a little
430:53 - bit so you can see better
430:55 - so this dialog will pop up on your
430:58 - android telephone saying that oh do you
431:01 - want to allow this computer to do
431:02 - debugging on this um on this telephone
431:05 - and what you need to do is just to say
431:07 - always allow from this computer and then
431:08 - press the ok button this is only so that
431:12 - you will be first of all able to install
431:15 - and debug your
431:17 - flutter applications
431:19 - all from visual studio code or from
431:20 - android studio right on your android
431:23 - telephone or tablet
431:24 - and also it will allow you to run scrcpy
431:27 - which in turn uses adb
431:30 - in order in order to communicate with
431:32 - your device okay
431:34 - so
431:36 - that is for
431:39 - usb debugging all right
431:43 - so what we need to do is actually bring
431:44 - up scr cpy so
431:46 - in terminal i'm just going to say ser
431:48 - cpy
431:50 - and as you can see here it's going to
431:51 - talk to my android telephone and it
431:53 - brought up a window which i'm going to
431:55 - slowly bring here to this screen so you
431:57 - can see
431:59 - so
432:00 - i'm going to leave the terminal here
432:01 - because the terminal is actually fueling
432:03 - this thing so if i close my terminal
432:05 - this is also going to be closed so just
432:07 - keep this terminal open or if you're
432:10 - using item for instance like i'm using
432:12 - then you can bring up a new tab and
432:14 - continue working with another
432:16 - command line otherwise you can just
432:18 - close it or you can just minimize this
432:20 - if you're if you're bothered by it so
432:23 - as you can see now i have my android
432:25 - phone here
432:26 - mirrored on my screen i'm actually going
432:28 - to do this so you can see it a little
432:30 - bit better i'm going to bring it right
432:32 - here in between so this is my actual
432:35 - android phone so if i click here with my
432:38 - mouse it actually interacts with my
432:41 - phone so
432:42 - i can bring up my phone here
432:45 - so you kind of see them side by side
432:47 - and if on the
432:49 - if on the scrcpy screen here i press the
432:52 - back button
432:53 - you will see that my android screen
432:56 - changes
432:57 - one more time click on google
433:00 - so it's really interacting with my
433:02 - android telephone here okay
433:04 - so
433:05 - i highly suggest that you actually
433:06 - install sdrcpy to be honest with you
433:08 - it's a great great tool if you're into
433:11 - mobile development or if you want to
433:13 - become a mobile developer so
433:15 - um
433:16 - and regarding what i said earlier about
433:18 - devices i think in
433:21 - you will get really really far with the
433:23 - ios simulator and the android emulator
433:26 - however
433:28 - i personally should suggest that you
433:30 - spend
433:31 - and invest some money into getting
433:33 - devices for for yourself they don't have
433:35 - to be top of the line
433:37 - latest devices but
433:39 - one android telephone and one ios
433:41 - telephone
433:42 - or even tablets will do but preferably
433:45 - telephones you don't even have to have
433:46 - sim cards in them just just the
433:48 - telephone device physically itself so
433:51 - um
433:52 - and
433:53 - i mean if you're getting into mobile
433:55 - development you will kind of after many
433:57 - years kind of have a lot of telephones
433:59 - anyways because you will get like this
434:01 - year's new telephone and then two years
434:03 - later you get another telephone so you
434:05 - kind of pile them up
434:06 - um
434:07 - and you could use those all telephones
434:09 - then as test telephones as we call them
434:12 - all right
434:14 - so
434:15 - that's that part now what we need to do
434:17 - next is to now that our android phone is
434:20 - connected here
434:22 - what we need to do is to go to visual
434:24 - studio code into our project
434:26 - and choose that um
434:30 - so choose our let me see bring up visual
434:33 - studio code here if i can visual studio
434:35 - code
434:36 - this is i have so many screens here so
434:38 - it's a little bit of a challenge to
434:40 - actually
434:41 - line them up all here so what i'll do
434:43 - here is i will get rid of the side
434:45 - window all right and i will bring up
434:48 - then scr cpy on the right hand side and
434:50 - then just resize the screen a little bit
434:53 - here
434:54 - and then like this so i have you this is
434:57 - like my usual setup so i have visual
434:59 - studio code here on the left and then i
435:01 - have my android phone mirrored on the
435:03 - right hand side okay
435:06 - so what then you'll need to do after
435:08 - you've done all of this work is in
435:09 - visual studio code just say command
435:11 - shift p on mac or ctrl shift b on linux
435:14 - and
435:17 - windows and if you're using android
435:18 - studio i don't to honestly know the
435:20 - commands there to select a device in
435:22 - flutter they may be like a drop down or
435:24 - something so please do that
435:26 - so here i'm just going to say command
435:28 - shift b and i'm going to say flutter
435:29 - select device okay
435:31 - and in select device i'm actually going
435:33 - to choose my
435:34 - android telephone which is the one being
435:36 - mirrored here
435:38 - choose an android phone and then i'm
435:39 - going to say run run without debugging
435:42 - okay
435:45 - so
435:47 - let's then see
435:49 - that you can see here it says launching
435:51 - dart on gm 19 blah blah in debug mode so
435:56 - since it's an android application now
435:58 - all of a sudden we just switch from ios
436:00 - to android previously our application
436:02 - was being like our source code was being
436:03 - compiled by xcode
436:05 - and now since we're trying to deploy to
436:07 - an android telephone it's the gradle
436:09 - it's gradle basically that's taking care
436:11 - of the build process so if you're an
436:14 - android developer then you know that
436:15 - basically gradle zero build system and
436:17 - yeah
436:18 - it is working um
436:20 - it is basically doing the build in the
436:22 - background
436:24 - so i'm actually so glad that we got this
436:26 - error right now so i'm gonna take here
436:29 - in my notes that we've talked about in
436:31 - vs code select android and then show
436:33 - android phone mirroring working okay
436:36 - so
436:37 - you see here we got some errors
436:40 - actually when we talked about in chapter
436:42 - what chapter are we on we're on chapter
436:44 - 10. in chapter 9 when we talked about
436:46 - running our application on ios we
436:48 - actually got something similar
436:50 - there was an error saying that oh your
436:53 - uh
436:54 - dependencies firebase they need this
436:57 - version but you're on that version and
436:59 - and the under
437:00 - and the code that actually solved it if
437:02 - you remember we went to our pod file i
437:04 - just put this platform here saying ios
437:07 - 13 because you see we have four
437:09 - dependencies at the moment we have
437:12 - firebase auth we have firebase core
437:14 - analytics and something else which i
437:16 - don't remember let me have a look at the
437:18 - notes here
437:20 - there were core auth cloud firestore and
437:23 - firebase analytics
437:24 - these four dependencies they have their
437:27 - own requirements so they say that we as
437:31 - dependencies cannot be installed on an
437:32 - application that for instance supports a
437:34 - very old android os or a very old ios
437:38 - version so these dependencies are
437:41 - putting requirements on your project so
437:44 - and we fixed that yes uh in the in
437:47 - chapter nine we fixed that um by going
437:52 - into the pod file and
437:54 - commenting out this basically removing
437:56 - the comment from this line and changing
437:58 - it from 9
437:59 - to 13. so we fix it like that for ios
438:03 - but how do we do it for android now we
438:05 - get a lot of great information here and
438:08 - it says that you kind of need to find
438:09 - this debug default config and min sdk
438:12 - version okay so let's look for default
438:15 - config so i'm going to copy that text
438:18 - and i'm going to then command shift f in
438:22 - visual studio code and search for it and
438:24 - as you can see here we have a little um
438:28 - flutter version name and then flutter
438:29 - version code to integer
438:31 - and i can see here there is
438:34 - information about flutter versions like
438:36 - if you go to our build gradle
438:38 - and
438:39 - there is a flutter version code to
438:41 - integer that is the
438:44 - and the where's the main sdk here min
438:47 - sdk version okay so i'm going to search
438:49 - for min sdk version
438:51 - and here i can see it is 19 here it is
438:54 - 19. and android min sdk version
438:59 - 19 so there's actually quite a lot of
439:01 - places where
439:02 - 19 is mentioned all right
439:05 - and the error itself let's read it
439:09 - requires a higher android sdk version
439:11 - fix this by adding the following to the
439:13 - file build gradle android default config
439:16 - min sdk version okay so
439:20 - if we look at the default config here
439:23 - it's talking about this thing min sdk
439:25 - version i can see that previously this
439:27 - used to be a number and recently it has
439:29 - been changed to flutter min sdk version
439:31 - so i'm going to bring up a safari window
439:33 - and i'm going to say change flutter min
439:36 - sdk version so let's see what people are
439:39 - actually suggesting is there a good
439:41 - command that allows us to do this
439:45 - you see people are still saying that we
439:46 - need to do it like that by changing it
439:48 - to a specific version but i believe
439:52 - there should be a better way of doing
439:54 - this instead of hard-coding it um
439:57 - with the new flutter project with the
439:58 - flutter style you're unable to change
440:00 - the mini sdk version and local
440:01 - properties
440:03 - great okay so if we go to a file called
440:06 - local.properties that's what they're
440:08 - saying here so
440:09 - i'm gonna
440:10 - try to find local properties and i can
440:12 - see here
440:15 - there is an sdk set here
440:17 - but there is no min sdk version
440:21 - so
440:22 - we probably need to just go and fix that
440:25 - up so i'm going to copy paste and i'm
440:26 - just going to say flutter.sdk version
440:28 - 19. okay save that file then i'm going
440:31 - to go back to the main dart and then say
440:34 - run without debugging let's see what
440:36 - happens this time
440:39 - and if it accepts that
440:41 - local properties change that we just
440:43 - made
440:44 - and it's still saying that it won't be
440:46 - able to users running so
440:48 - uh what we could do in here to be honest
440:50 - with you is just troubleshooting so
440:52 - let's just say go back to the root
440:54 - folder of your application and say
440:56 - flutter clean android
441:02 - why is it doing the xcode workspace
441:04 - and then say flutter
441:06 - pop get
441:13 - so if this works properly then it should
441:15 - have cleaned the android code for us and
441:17 - like put the version 19 in our build
441:20 - gradle like this should actually resolve
441:22 - to 19 so let's go to main dart and just
441:24 - give it one more try if this if this
441:27 - solution doesn't work then we
441:28 - unfortunately have to go into our
441:30 - build gradle file and and do what was
441:32 - recommended and put the min sdk version
441:34 - there as a constant value of 19 just to
441:37 - get the code
441:38 - compiling so
441:40 - let's have a look here at um
441:42 - what our gradle build is gonna do
441:47 - so
441:48 - i don't really know what happened with
441:50 - it
441:53 - i it doesn't seem to really be doing
441:55 - anything so one more try run without
441:58 - debugging and see what happens launching
442:02 - i'm gonna have a look at my android
442:03 - phone here as well running gradle task
442:05 - assemble debug
442:10 - and for me it's not running anything at
442:12 - the moment on this on this phone so what
442:14 - we're gonna do is let's go to
442:17 - i mean this solution didn't work so
442:19 - i'm gonna remove that and i'm gonna go
442:20 - to build gradle and put the
442:23 - target sdk version i think that was the
442:26 - min sdk version sorry
442:28 - and here we're just gonna say 19 instead
442:31 - okay
442:33 - like that like it was actually suggested
442:35 - to us so
442:36 - um let's then go to main dart and then
442:39 - say run without debugging one more time
442:40 - and if this solution doesn't work i may
442:42 - actually have to like restart the visual
442:45 - studio code if it's kind of confused for
442:46 - some reason
442:48 - because usually when you say
442:50 - gradle like when you start the build
442:52 - process it actually gives you some
442:55 - feedback it either says that something
442:57 - failed or that yeah i um
443:01 - it then ran successfully and in this
443:03 - case i can see it's not running so i'm
443:05 - just gonna say quit visual studio code
443:07 - okay
443:08 - and then i'm gonna bring up visual
443:10 - studio code so i have a lot of projects
443:12 - usually so
443:13 - i'm gonna
443:13 - [Music]
443:16 - minimize all of these things and i'm
443:18 - going to only open
443:20 - our my notes application
443:23 - so let's go in there
443:25 - to our my notes application and let's
443:28 - give this a try one more time i'm going
443:29 - to go to run without debugging and let's
443:31 - see what happens
443:35 - oh now it's choosing iphone 13 pro in
443:37 - debug mode so that's because i restarted
443:39 - visual studio code and it doesn't know
443:40 - which device to run on so i'm going to
443:42 - say select device and then choose my
443:44 - android phone again
443:46 - run run without debugging
443:49 - and hopefully crossing my fingers here
443:52 - that
443:52 - since we've changed the
443:55 - um
443:56 - version number then it's going to work
443:58 - and i can see here
444:02 - i see so now it's com complaining about
444:05 - multi-decks so i mean this is great
444:07 - stuff i'm so glad that we're seeing all
444:09 - these errors because usually we don't
444:11 - have the possible i mean usually you see
444:12 - in tutorials that yeah everything's
444:14 - working fine uh he clicked there and
444:17 - clicked there and everything worked but
444:19 - here we're actually getting to the point
444:21 - where you see every issue that could
444:23 - arise and then we're gonna fix it
444:25 - together and this is like a day in the
444:26 - life of a software developer things go
444:28 - wrong but then you'll have to fix it so
444:31 - um this multi-dex is something that
444:33 - you'll have to
444:35 - configure and we're going to say
444:38 - use multi-dex flag so
444:42 - i'm going to go to safari and i'm going
444:45 - to paste it here
444:46 - um and then there is a solution
444:49 - hopefully somewhere in our default
444:50 - config you see it says multi-dex enabled
444:53 - so
444:54 - let's go to your to the
444:57 - build gradle in app which is right here
444:59 - you see android app build gradle in your
445:02 - default config as it says here
445:04 - multi-decks enabled just bring it here
445:07 - it's it there
445:08 - and then go to your dependencies at the
445:10 - bottom of this file right here and bring
445:13 - implementation multi-decks right there
445:16 - okay so i'm just going to paste it right
445:18 - there go back to my main guard file here
445:21 - and then say run run without debugging
445:23 - so
445:24 - let's see what happens
445:28 - and there are some warnings here that
445:29 - are printed in red you don't have to
445:31 - worry about them so much right now
445:33 - there are warnings as their name
445:34 - suggests so um you don't have to worry
445:37 - so much to be honest with you as i
445:39 - mentioned
445:40 - so there we go here is um our flutter
445:44 - application now working and running on
445:47 - um
445:49 - on the actual phone so
445:52 - i'm gonna bring then the phone here
445:55 - and you can see it is showing the exact
445:56 - same thing so if i with my mouse go over
445:59 - you can't see that because you're
446:00 - actually seeing my face
446:03 - so
446:04 - um and then you will see the value 3
446:06 - printed
446:07 - here as well so that's that's great
446:10 - stuff
446:12 - um
446:14 - then
446:23 - i don't know why this
446:25 - uh screen is rotated
446:28 - i rotate it back
446:30 - oh it's because my phone is actually
446:32 - rotated so i'm gonna rotate it back so
446:34 - it's uh
446:37 - it's not rotated in the wrong
446:39 - orientation great so we got a lot of
446:42 - problems to be honest with you there um
446:44 - but that's okay that's usually what
446:46 - happens when we're working with mobile
446:48 - development at least in the beginning
446:50 - when you're doing the setup so i'm
446:52 - actually
446:53 - grateful that we're getting these errors
446:55 - so you see them so you don't just think
446:57 - everything is going to work from the
446:59 - absolute beginning so
447:01 - even though as i said in the
447:02 - introduction i haven't planned all of
447:04 - this that these errors come up i don't
447:06 - want things to be perfect so even though
447:08 - that is happening but i'm still quite
447:09 - grateful that they are happening so
447:12 - what we need to talk about now is
447:14 - something called screen sleeping and um
447:18 - as you're developing your uh application
447:21 - on your android telephone or tablet
447:23 - you'll notice that you will run your
447:25 - application on the phone or the tablet
447:28 - and then after
447:29 - after a short while your screen will go
447:31 - to sleep which means the screen will be
447:33 - locked
447:34 - and then when you try to then rerun or
447:36 - rerun your application or re refresh
447:38 - your application then you will get an
447:40 - error from flutter saying that it cannot
447:41 - deploy the application because the
447:43 - device is locked so
447:45 - that is quite annoying that the
447:46 - telephone does it but it is for a good
447:48 - reason the telephones like for security
447:50 - purposes they have to lock the screen so
447:52 - that if you leave it somewhere on a
447:53 - bench or something in a park and you
447:55 - just forget it and you go away then it
447:57 - is locked so no one's going to get
447:59 - access to your telephones
448:00 - data with that said what we need to do
448:03 - is disable it while you're developing
448:05 - your applications because
448:07 - what you want is a telephone that's
448:08 - always there is available the screen
448:10 - doesn't lock so you can always deploy a
448:12 - newer version of our application to it
448:14 - or as or as long as you
448:16 - you don't lock it yourself manually
448:20 - so what we're going to do is i'm going
448:21 - to bring up the phone here so you see
448:23 - what i'm doing i'm going to go here
448:26 - i'm going to go to the settings
448:28 - screen um here
448:31 - and
448:32 - you will probably need to i mean in
448:34 - order for you to actually even be able
448:35 - to run your application and do funky
448:38 - things with your application on your
448:39 - telephone you need to enable something
448:41 - called developer remote so developer
448:43 - mode on android and on ios is a series
448:46 - of development tools that the phone
448:48 - provides only to developers and in order
448:50 - to get those tools you need to perform a
448:52 - series of actions like a monkey or
448:54 - something on your telephone and
448:56 - um i'm not going to provide instructions
448:58 - exactly how to do that for all different
449:00 - phones because depending on the
449:01 - manufacturer of your telephone
449:03 - especially if it's on android then
449:04 - developer mode is brought
449:07 - into life in a different way so what you
449:09 - need to do is to find out the
449:11 - manufacturer of your telephone and the
449:12 - model of your telephone here is a
449:15 - oneplus pro 7 i believe and then google
449:17 - and say oneplus pro 7 developer options
449:20 - or developer mode
449:22 - then you'll get some information about
449:23 - how to enable that i've already done
449:25 - that so if i go to i believe it's
449:28 - utilities or sorry i think it's system
449:30 - then
449:31 - you can see there then i have an option
449:33 - called developer options okay
449:35 - so in order to disable screen sleeping
449:38 - you have to go to developer option and
449:39 - say stay awake
449:42 - and that is by default disabled all
449:45 - right
449:47 - so
449:48 - um
449:50 - we've now then talked about um
449:54 - developer tools and we've talked about
449:56 - that you can interact with your
449:58 - telephone uh using scrcpy so
450:02 - to be honest with you i think i think
450:03 - that's all you need to know for
450:06 - um for the android setup there is not
450:09 - much more to talk about the rest is just
450:12 - developing our application as usual and
450:14 - then running it on the android phone and
450:17 - then mirroring the screen using a crcpy
450:20 - so that's what i'm going to do for the
450:21 - entirety of this course i'm going to
450:23 - primarily run the application run our
450:26 - application that we're going to develop
450:27 - in this course on this telephone and
450:29 - mirror the screen using scr cpy
450:32 - but you may choose to use an ios
450:33 - simulator or an android emulator or an
450:36 - ios phone or a tablet whatever
450:38 - so i can't provide
450:40 - descriptions about how to do all of
450:42 - those things because that is a complete
450:44 - course of its own but at least now you
450:46 - have the tools and the necessary
450:48 - information in order to understand how
450:50 - you can actually deploy to an iphone and
450:53 - an android phone all right
450:55 - so
450:56 - uh
450:57 - with that said now we can say that we're
450:59 - actually good to go on android
451:02 - um and in the next chapter which is
451:04 - chapter 11 we're going to get to some
451:05 - juicy stuff which is uh setting up our
451:08 - project on firebase and if you remember
451:10 - from the introduction we're going to use
451:11 - firebase for our back end
451:13 - so um
451:16 - then
451:17 - you know what's coming in the next
451:18 - chapter and uh now you have the tools
451:21 - necessary in order to get the app
451:23 - running so with that said then let's go
451:26 - and
451:27 - configure our firebase project in
451:30 - chapter 11.
451:31 - hello everyone and welcome to chapter 11
451:33 - of this course
451:34 - in this chapter we're going to talk
451:36 - about our back end setup which is with
451:38 - firebase
451:40 - um and i'm as i as i've said it before i
451:43 - kind of assume that you've gone through
451:45 - the chapters of this
451:47 - course chronologically so you started
451:49 - from the absolute beginning introduction
451:50 - and then
451:51 - you're following along so there's lots
451:53 - and lots of lots of information as you
451:55 - can see it's about eight hours of
451:56 - information before this chapter
451:58 - so i feel like since i've explained
452:01 - everything so thoroughly in all those
452:02 - chapters i'm not going to go through all
452:05 - that again
452:06 - so i will jump over stuff that i've
452:09 - already explained so i if you haven't
452:10 - watched those chapters i
452:13 - really suggest that you at least skim
452:15 - over them a little bit so you see
452:17 - so you get the gist of it
452:19 - um now i'm looking at my notes and i can
452:21 - see
452:23 - that in this chapter as the caption
452:25 - shows here we're gonna set up our back
452:27 - end our backend is using firebase and
452:31 - while developing this course i
452:33 - contemplated creating
452:35 - a like as a part of this course have a
452:38 - custom backend as well that we do with
452:40 - django i personally do django
452:42 - development uh for back-end and websites
452:44 - like rest apis and also for
452:47 - simple websites as well
452:49 - but to be honest with you if i then go
452:51 - and create a simple back-end with django
452:54 - and then show you how to integrate with
452:56 - that using flutter
452:57 - it really has nothing to do with flutter
452:59 - like the backend part has nothing to do
453:01 - with flutter itself so
453:04 - having that
453:05 - issue in the beginning of this course i
453:07 - was faced with a challenge of do i go
453:10 - into the rabbit hole of creating custom
453:12 - back
453:13 - for this course
453:15 - and walk you through also creating a
453:16 - custom package which has nothing to do
453:18 - with flutter and flutter is the reason
453:21 - you were watching this course so i
453:23 - was faced with that challenge of whether
453:25 - i should do that or just use uh firebase
453:29 - and i choose and i chose firebase simply
453:31 - because it is a product by google it is
453:34 - kind of like serverless so it is a
453:35 - server without you actually having to
453:37 - write code as such
453:39 - so i picked firebase for its simplicity
453:42 - so that we can get the backend working
453:44 - up and running without so much work and
453:48 - i hope that you understand that that is
453:49 - the reason that we're not doing a custom
453:51 - back-end but firebase is a very reliable
453:54 - uh
453:55 - back-end created by google and it has
453:57 - all google's financial backing for
454:00 - further
454:01 - developments and for support so you
454:04 - don't have to worry if you're picking
454:05 - firebase and if you're thinking oh is it
454:07 - going to continue being supported
454:09 - the quick answer is yes it is going to
454:11 - be supported it is so big everyone's
454:13 - using it and it's too big even to fail i
454:16 - would say right now at least for
454:18 - the
454:19 - uh upcoming uh next few years i would
454:23 - say
454:24 - i can't predict the
454:25 - future for 10 20 years in the future but
454:28 - for now you don't have to worry about
454:29 - that so
454:32 - um
454:33 - so that's what we are going to do in
454:35 - this chapter i'm just going to take it
454:36 - in my notes um
454:39 - now previously when uh flutter came out
454:42 - like in year 2020 or even the beginning
454:45 - of 2021
454:47 - if you want to integrate with
454:50 - firebase you have to do a lot of custom
454:52 - work
454:53 - now
454:55 - in the recent versions of flutter
454:57 - there is a
455:00 - a command that you can issue from your
455:01 - terminal it is called flutter fire cli
455:05 - and this command
455:08 - is amazing because like the work that
455:10 - you have to previously do manually a lot
455:12 - of custom work dragging files and p
455:14 - lists and jsons configurations app ids
455:17 - etc etc it was such a big
455:21 - undertaking that a lot of developers
455:23 - would make a lot of mistakes during that
455:25 - process and it was just not good so
455:28 - um
455:29 - there is now a command that you can
455:31 - issue from from your terminal which
455:33 - allows you to do all that custom work
455:35 - but it does it for you so you don't have
455:37 - to do do that manually so
455:39 - as i provided here there is a link i'm
455:41 - going to open that link
455:43 - if i can somewhere let's see if i can
455:45 - bring up safari
455:48 - it opens in a
455:50 - wrong screen i'll bring that screen here
455:53 - so you'll see it as well
455:55 - enlarge that screen and also enlarge the
455:58 - font so it is more visible
456:01 - so you can see it says fluffifier
456:03 - overview
456:04 - and it says get to know firebase for
456:06 - flutter
456:07 - we recommend starting with the get to
456:09 - know firebase for flutter code lab and
456:11 - video okay so there's a video here if
456:12 - you want to watch it
456:14 - and uh and it says okay if you're
456:16 - migrating your existing project then
456:18 - look at the migration guide migrating if
456:20 - you're not familiar with that term uh if
456:22 - you're not coming from a software
456:23 - engineer background migrating economy so
456:25 - you have an existing thing and you want
456:27 - to
456:28 - make it newer like
456:30 - and put in new stuff in it so you kind
456:33 - of migrate your information from the old
456:35 - project to the new one so
456:37 - but in this case we don't have to worry
456:38 - about that because we're we've created a
456:41 - brand new project so there's no existing
456:43 - firebase installation in our application
456:45 - that we have to worry about okay
456:47 - there's a lot of information here you
456:49 - can see it says using the cli etc etc
456:53 - and that is actually what we're going to
456:55 - do now
456:56 - we are going to have a look at how we
456:59 - can install the flutter fire cli
457:02 - and you can see here it says you should
457:03 - execute the dart pop global activate
457:05 - flussifier cli
457:07 - and then you issue flutter fire
457:09 - flussifier config so let's start by
457:12 - copying this code from here copy it and
457:14 - i'm going to bring up my terminal
457:16 - and i'm going to increase the size of my
457:18 - terminal so you actually see what is
457:20 - happening here okay so i'm gonna paste
457:23 - that command in and i'm gonna let it do
457:26 - its thing
457:27 - i've already done this installation
457:29 - before so for me it may actually go a
457:31 - little bit smoother or a little bit
457:32 - faster but for you it may take a little
457:34 - bit longer depending on whether you've
457:36 - already installed flat of rsli before or
457:38 - not
457:39 - so now that that is installed the next
457:41 - thing you will have to do is you will
457:43 - actually need to make sure i mean it's
457:45 - not provided in the documentation but
457:47 - it's something that i'm providing for
457:48 - you because i know that i've personally
457:50 - run into this issue before
457:53 - so
457:54 - um
457:55 - this flutter fire cli it will give you
457:59 - this command as you can see here flutter
458:01 - fire okay and if i in my terminal say
458:04 - which flutter fire
458:07 - you can see that flutter fire is
458:08 - installed in this folder so it's under
458:11 - my personal folder on my computer
458:14 - slash dot pop cache slash bin and then
458:17 - right there so unfortunately when you
458:19 - install lots of fire cli it doesn't
458:21 - it doesn't tell your terminal where it
458:24 - is installed so if you then immediately
458:26 - after that say flutter fire and then
458:28 - blah blah blah as it is mentioned here
458:31 - classifier configure your terminal will
458:33 - most probably say that what is flutter
458:35 - fire
458:36 - so
458:36 - it's not provided here in the
458:37 - documentation but i'm telling you here
458:39 - as you can see in the caption that you
458:40 - need to tell your terminal where flutter
458:42 - fire is actually installed okay
458:45 - so
458:47 - um
458:48 - then what you'll need to do is uh to do
458:51 - as i've mentioned here you can see i've
458:52 - said that you need to change your path
458:54 - and include your home folder slash pop
458:57 - cache slash bin so if i go to my
459:00 - terminal configuration if i say um
459:04 - in
459:06 - vshrc
459:08 - you can see at the top here somewhere i
459:11 - should have there you see it says export
459:14 - path and i say okay my new path is the
459:17 - old path plus using this uh double
459:20 - column here or column
459:22 - this folder as i've mentioned here in
459:25 - the captions at the bottom of the screen
459:26 - so you will need to do this as well so
459:28 - i'm going to quit vim now and then after
459:31 - you've done that make sure that you
459:33 - source that
459:37 - configuration so in my case i would have
459:38 - to say source
459:40 - zsh rc and that will read the paths
459:44 - um
459:45 - fresh otherwise you could also take the
459:47 - high road and like
459:49 - close your terminal completely
459:50 - terminated and then start it again which
459:52 - in turn reads the configuration and
459:54 - brings flutter fire a path
459:56 - into
459:58 - existence
460:00 - if you don't want to source that's what
460:01 - i mean
460:03 - so
460:05 - now we've talked about that now let's
460:07 - actually talk about what the firebase
460:09 - cli is
460:12 - it is a um actually let me
460:15 - make sure i tick all of these items that
460:17 - i
460:18 - talked about
460:20 - in
460:22 - right now let me just mark them as done
460:24 - in my notes
460:26 - so
460:29 - um
460:30 - so what you need to do now is what we
460:33 - need to do now is to talk about firebase
460:35 - cli
460:37 - and um
460:38 - as you can see here is a cli to help us
460:40 - interact with firebase right from our
460:42 - terminal now
460:43 - um
460:45 - this this used to be done manually
460:47 - previously in that you would have to go
460:49 - to firebase and like create a whole
460:51 - separate project and then integrate that
460:53 - project into your flosser application so
460:55 - you don't have to do any of that anymore
460:57 - so
460:58 - um what you need to do now is as the
461:01 - next step is to install the firebase cli
461:03 - which does all of that work for you
461:06 - so i've provided here as you can see
461:09 - there is a command here that you can
461:12 - issue
461:13 - and then you can go to a firebase google
461:16 - com docs cli install cli mac blah blah
461:19 - so i'm actually going to go to that
461:22 - location
461:24 - in my web browser here so you can see
461:27 - what i'm doing
461:29 - here
461:31 - and you will see there's a lot of
461:33 - information provided here i'm going to
461:34 - bring up the uh i'm going to make the
461:36 - size a little bit bigger i'm going to
461:38 - bring my face maybe to the bottom right
461:39 - as well so you can see more information
461:40 - on the screen
461:42 - and you can see for mac or linux then
461:45 - there is
461:46 - yeah let's go here mag you can install
461:48 - the firebase cli for macro linux using
461:50 - one of the following options
461:52 - so standalone binary blah blah so you
461:55 - need to have a look at this
461:56 - documentation on on how you can install
461:59 - the firebase cli on your on your
462:01 - computer whether you're using mac or
462:03 - whether you're using linux or windows so
462:09 - so
462:10 - after you've done that after you've
462:11 - installed the firebase
462:14 - cli you will actually need to
462:19 - log in
462:20 - in your into your account using that
462:23 - firebase
462:25 - cli
462:26 - so
462:28 - let's let's do that let me actually in
462:30 - here um let's bring up our project uh in
462:35 - visual studio code so i'm gonna bring it
462:37 - up here
462:39 - and bring up the right caption as well
462:41 - so you see what we're talking about
462:42 - we're going to talk about firebase login
462:44 - and log out you see when you
462:47 - want to integrate your flutter
462:49 - application with firebase you need to
462:51 - create a
462:52 - firebase project on something called the
462:55 - firebase console
462:56 - so this project is pretty much the
463:00 - configuration of your firebase backend
463:03 - on firebase's console on their website
463:06 - so you need to configure a backend so
463:08 - what we need to do here is now before we
463:10 - can actually configure it back in
463:13 - in your terminal you need to tell
463:15 - firebase what user you have because i
463:19 - personally have many google accounts and
463:21 - any one of those google accounts can
463:23 - potentially have many flutter sorry many
463:25 - firebase projects
463:28 - because firebase projects are linked to
463:30 - your google accounts okay
463:32 - now in order for our firebase cli to
463:36 - understand where it needs to create the
463:39 - project you need to tell it to log in
463:42 - with an account all right so
463:44 - the way to do that is to bring up
463:46 - terminal and as you can see here is my
463:48 - terminal
463:49 - and i'm going to clean this a little bit
463:51 - i'm going to bring up the font as well
463:53 - so it's quite ginormous and that's okay
463:56 - so what you need to do now is to tell it
463:59 - to log in
464:01 - so i'm going to say firebase
464:04 - login okay
464:08 - it's gonna do its work and it's telling
464:10 - me i'm already logged in with this
464:11 - account if you haven't logged in with an
464:13 - account then you're gonna get a prompt
464:15 - telling you uh okay which email and
464:18 - password do you wanna log in with so
464:21 - now
464:22 - um it may be actually worth it to be
464:24 - honest with you for me to log out right
464:26 - now so that you see the entire process
464:28 - so
464:29 - i'm a bit hesitant to log out because
464:32 - uh i actually have protected my google
464:34 - account with a security key
464:36 - so
464:37 - i don't have the key right here and i
464:40 - hope that i can find it so
464:42 - for the sake of for the sake of actually
464:44 - going through this process together with
464:46 - you so you see how it works i'm gonna
464:48 - log out
464:49 - so let's log out here
464:52 - so i'm saying firebase logout
464:54 - and it says there is a new version of a
464:57 - firebase tool so let's copy this here
465:00 - and i'm gonna see if we can install
465:04 - um what did it say
465:06 - npm install
465:07 - global so let's copy that here global
465:11 - firebase tools okay
465:15 - if it can do its work then before we can
465:17 - continue
465:19 - and npm is something called a node
465:21 - package manager and it is kind of like
465:25 - if you're working with node.js if you're
465:27 - developing for instance node
465:29 - applications
465:30 - which you which you don't have to know
465:32 - about it's just a way it's like a
465:34 - tool kit for creating applications uh
465:37 - remove the existing file and try again
465:39 - or npm with force okay
465:42 - npm install global
465:45 - with dash dash force i think
465:48 - yeah
465:49 - so it's it's like a dependency
465:51 - management for
465:52 - node applications and firebase tools is
465:55 - a node application so that's all you
465:57 - need to know really i mean there's there
466:00 - are courses available about node and
466:02 - node.js then you can actually have a
466:04 - look at how they work etc so i'm not
466:06 - going to go into details about that so
466:09 - before i could i mean i could have
466:11 - actually done a firebase logout without
466:13 - all of this but i just want to show you
466:15 - that things aren't planned like i can't
466:17 - perfectly plan things here and when i
466:19 - tried to log out it said oh there's a
466:21 - new version of node available blah blah
466:23 - so
466:24 - now that i think sorry there's a new
466:26 - version of firebase tools available that
466:28 - you can use that you can install with
466:29 - npm so
466:31 - i did that so let's now say uh firebase
466:34 - logout
466:37 - okay so the logit actually was
466:39 - successful
466:40 - previously and
466:42 - so let's now say firebase login
466:46 - and it says allow firebase to collect
466:48 - cli usage and error reporting
466:49 - information i'm gonna say as a developer
466:51 - to be honest with you
466:53 - you may you may be tended to say no like
466:56 - here but if you are a developer you can
466:59 - put your shoe you can put yourself in
467:01 - the shoes of another developer working
467:02 - at google working for firebase and they
467:05 - are trying to get some information about
467:07 - how you use the cli and whether they can
467:10 - learn from your usage of the cli in
467:12 - order to make the cli better so i
467:15 - usually say yes to these things
467:17 - especially if there's a developer asking
467:18 - for permission so but you can say no to
467:20 - this if you want to so i'm just going to
467:22 - say yes
467:23 - and you can see here then there's a
467:25 - screen provided here asking me to log in
467:27 - with one of my google accounts all right
467:30 - and
467:30 - i'm going to pick my company's google
467:32 - account because that's what i usually
467:34 - use all right so i'm going to choose
467:35 - that and it says firebase cli wants to
467:38 - access your google account and it says
467:40 - okay what permissions it's going to use
467:42 - you can have a look at this information
467:44 - if you want to
467:45 - if it concerns you so if you if you're
467:47 - concerned about any of these things
467:49 - please go and read the
467:50 - links provided here
467:52 - i'm just going to say allow
467:54 - and once that is done you will see that
467:55 - it says firebase cli login successful
467:58 - and then you can pretty much just close
468:00 - this window safely
468:02 - and now it says logged in as pixelityav
468:06 - gmail.com so i can say firebase login
468:09 - again and that would be the prompt that
468:11 - you saw in the beginning of this video
468:13 - that you are logged in alright
468:16 - good
468:17 - that was a lot of information now now
468:19 - that you are logged in with the firebase
468:21 - cli you actually need to configure a
468:25 - firebase project all right and we do
468:28 - that with the flutter fire cli which we
468:31 - installed in the beginning of this
468:32 - chapter using this command dart pop
468:34 - global activate all right
468:37 - so what you need to do now is to
468:41 - issue
468:42 - the flutter fire configure
468:44 - command as i've shown here down at on
468:46 - the left hand side so i'm going to do
468:48 - that flutter fire configure
468:52 - so it will fetch all the projects that
468:54 - i've already created in my
468:57 - google account and it says okay these
468:59 - are the projects available flash chat
469:02 - fluffer note guessing chords random
469:04 - project testing or you can create a new
469:07 - project
469:09 - now i'm going to choose create a new
469:11 - project here okay
469:12 - and
469:13 - it says okay enter a project id for your
469:16 - new firebase project so what i'm going
469:18 - to do here is i'm just going to type my
469:20 - notes all right
469:22 - so
469:23 - as you can see my notes
469:26 - is the name of our flutter project as
469:28 - well so my notes now i'm going to say
469:31 - okay i'm going to create the same
469:32 - project called my notes okay i'm going
469:34 - to press enter here
469:37 - i says yeah i'm going to create it
469:39 - and it's probably
469:40 - i mean you can see that we immediately
469:42 - got an error saying that
469:44 - this project already exists and you can
469:46 - see
469:47 - um
469:48 - command blah blah blah yeah fail to
469:49 - create a project because there's already
469:50 - a project with
469:52 - with id mynotes please try again with a
469:55 - unique project id so
469:56 - this is basically telling us that hey
469:58 - someone else has created my notes and it
470:01 - wasn't one of the projects that we had
470:02 - created because if you if you have a
470:04 - look at your
470:06 - if you open uh your web browser and say
470:08 - firebase console
470:11 - go to your firebase console
470:14 - and uh let me make sure that i'm logged
470:16 - in with my pixelity account yes
470:19 - and
470:20 - if i have a look let's see dismiss let's
470:23 - see
470:25 - get started firebase helps you watch
470:27 - demo
470:28 - yeah we are logged in with that account
470:30 - so i can actually see maybe i don't have
470:33 - any projects set up here which is a
470:34 - little bit weird because
470:36 - we actually saw that there were some
470:37 - projects set up under this account so i
470:39 - don't understand why the firebase
470:41 - console so it's not showing them
470:44 - um
470:44 - firebase console backed by google
470:47 - firebase console google
470:49 - yeah there they are okay so it is on
470:52 - console.firebase.google okay
470:54 - and i can see that my notes application
470:58 - is not an application that i own i
471:00 - haven't created that so
471:03 - what it is saying is that globally
471:05 - firebase projects have an identifier and
471:08 - now i've entered an identifier that is
471:09 - already taken so
471:11 - what i'm going to do then is i'm going
471:13 - to issue the same command uh
471:16 - firebase flutter fire configure and this
471:18 - time i'm going to give it a little bit
471:20 - more information about the project name
471:22 - so that makes it a little bit more
471:24 - unique so i'm going to choose
471:26 - create a new project
471:28 - and then in here in the name of the
471:29 - project i'm going to say mynotes
471:33 - flutter project
471:36 - maybe someone has already taken this as
471:38 - well
471:40 - i don't know
471:42 - so it's doing its thing it's doing its
471:44 - magic basically so let's have a look
471:51 - and i mean
471:53 - this is okay that is taking some time it
471:55 - is doing a lot of work it's setting up
471:57 - like the ios project and android project
471:58 - etc so
472:00 - this thing used to take a lot of time to
472:02 - do by hand like maybe 10 folds the
472:05 - amount of time that this
472:06 - cli is taking so i'm not so bothered by
472:09 - the fact that it's taking some time so
472:11 - and here it will actually tell you okay
472:13 - which platforms do you want to select
472:14 - and as i said like flutter allows you to
472:17 - create web applications android
472:19 - applications ios applications and also
472:22 - uh
472:23 - desktop applications or four platforms
472:25 - and then here it says okay which ones do
472:27 - you want to create
472:28 - for our project right now you can just
472:31 - say android and ios you don't have to
472:33 - worry about like
472:35 - um
472:37 - mac os or linux or windows and web but
472:40 - you have the ability to do that if you
472:41 - want to so choose android and ios for
472:43 - now and press enter
472:46 - so it's gonna do its work
472:53 - so let it do its magic
472:58 - and now this is this is the amazing part
473:01 - that you had to do manually before you
473:03 - had to previously go
473:05 - and register like your application with
473:08 - apple and then go and register bundle
473:09 - identifier and then put the bundle
473:11 - identifier manually in firebase and then
473:13 - download some files put those files in
473:15 - your ios and android project now
473:17 - now you don't have to do that anymore
473:19 - here it just tells you which bundle
473:21 - identifier are you using for your
473:22 - project and if you remember from before
473:24 - when we created our flutter project from
473:26 - the beginning we said flutter create and
473:31 - then an organization which for me was s
473:33 - e dot pixolity do you remember that
473:35 - command
473:35 - it kind of looked like um
473:38 - i mean if i bring up terminal maybe i
473:40 - can even go back to it flutter create do
473:43 - you remember this command i will zoom
473:45 - into it a little bit so you can see
473:46 - better this is how we actually created
473:48 - our project we said flutter create.org
473:51 - as he pixeled in my notes so the bundle
473:54 - identifier for this application will be
473:55 - sepixolity.mynotes
473:57 - however since sc pixelity is the reverse
474:00 - domain for me this won't this won't be
474:02 - the case for you so
474:04 - go back to how you created that
474:06 - identifier for a project using your
474:07 - organization name and you now you have
474:09 - to paste that in here so you will see
474:12 - i'm going to say s e
474:14 - pixelity
474:15 - dot my notes okay
474:19 - so enter that
474:22 - and it's going to configure your ios
474:24 - project for you
474:30 - and that was it so
474:32 - it has now
474:33 - set up everything necessary for your
474:35 - project to work so i mean you may you
474:38 - may just think oh well this was this was
474:40 - so little and what did it actually do
474:42 - but for me who's been working with
474:45 - firebase and flutter for a very long
474:47 - time
474:47 - this is all magical because it did a lot
474:50 - of work it configured your application
474:52 - on the firebase console it actually
474:54 - registered an android and an ios project
474:57 - hooked into this firebase project
474:59 - downloaded the configuration files place
475:02 - them in the exact correct place in your
475:05 - application
475:06 - so it did a lot of work but you don't
475:08 - really have to know about that so
475:10 - um now if you want to kind of see the
475:13 - result of it if you see here the output
475:15 - of this says that there is an identifier
475:17 - associated with your ios app and then
475:19 - there's an identifier associated with
475:21 - your android app
475:23 - so that's what we're going to do now
475:25 - let's now make sure that these
475:27 - identifiers are correct and that the
475:30 - bundle identifier that we provided to
475:32 - the cli is also placed in the
475:35 - configuration file correctly so
475:37 - copy this for instance ios identifier
475:40 - that was created for you so copy it
475:43 - and then search for it in your entire
475:45 - project and then you'll find a little
475:46 - file here and let me bring it down
475:49 - it is called
475:51 - firebaseoptions.dart
475:53 - so this is where ios is configured and
475:57 - let me bring this like that so you don't
475:59 - see it
476:00 - and this is where the android project is
476:02 - configured you can see the um
476:05 - app id is right here and the api key is
476:08 - right there so don't worry about this i
476:10 - mean you should not show your api key
476:13 - and app id to anybody um so but since
476:17 - i'm developing this course for you i
476:19 - have to show it i can't just go and
476:21 - censor it but don't worry about it by
476:23 - the time you're seeing this um video by
476:25 - the time you're seeing this course i've
476:26 - already deleted this project from
476:28 - firebase so there's not going to be any
476:30 - security risk involved so
476:32 - um
476:33 - so that project isn't going to exist
476:35 - even if you know the api key on app id
476:37 - so don't worry about that but if you are
476:39 - developing your own application just
476:41 - kind of be careful who you share your
476:43 - api key and app id with all right
476:46 - that was a lot of information a lot a
476:49 - lot a lot so um
476:52 - and i'm gonna actually tick here
476:55 - that we've talked about that
476:59 - i create a new project
477:02 - and yeah that's that's all working as it
477:04 - should
477:06 - so i'm also gonna go here in the
477:08 - captions and i can see that i have some
477:10 - information here about enabling
477:12 - multi-decks and multi-dex was something
477:14 - that we've already enabled in the
477:17 - previous chapter which was chapter 10
477:19 - for the android project so
477:21 - now everything should be working as it
477:23 - did before to be honest with you so if
477:25 - you in your visual studio code or
477:27 - android studio if you're developing
477:29 - under your flutter app with android
477:30 - studio you can also
477:32 - go and select your device to run on now
477:35 - in the previous chapter you saw that for
477:36 - the entirety of this chat in this course
477:39 - i'm gonna use an android phone to
477:40 - develop uh our application so you may
477:43 - choose to use an io simulator an android
477:45 - emulator or an android phone or tablet
477:47 - or ios phone or tablet so but i'm gonna
477:49 - use a real android phone and as you saw
477:52 - we have the ability to bring up scr cpy
477:56 - to mirror the android screen so i'm
477:59 - going to bring it right here
478:02 - change the size of visual studio codes
478:04 - window a little bit so you can see the
478:06 - android um telephone right there as well
478:09 - then what i'm going to do
478:10 - just to make sure that the project runs
478:12 - after all of this work that we've done
478:14 - so that we haven't broken anything
478:16 - really let's then go and
478:19 - debug the application
478:21 - sorry run it without debugging and this
478:23 - is this is why you will see this is the
478:24 - result of all the work that we've done
478:27 - pretty much nothing
478:28 - this is like
478:30 - i mean
478:32 - it sounds funny to say it because we did
478:33 - a lot of work with the firebase project
478:35 - but there is nothing that you can see on
478:37 - the screen and that's that's the reality
478:38 - of doing software development you may be
478:40 - putting a lot of work sometimes in doing
478:42 - something and this result isn't
478:44 - immediately visible all right
478:46 - so but what you have done in this
478:48 - chapter was that you actually set up
478:50 - your back end with just a few commands
478:52 - you installed two clis the flutter fire
478:55 - cli and the firebase cli you logged in
478:57 - with firebase cli and then you set up
478:59 - your backend with the flutter fire cli
479:02 - all right
479:03 - now just to make sure everything is set
479:04 - up properly also you can bring up your
479:06 - web browser i'm gonna bring it up here
479:08 - and i'm gonna say console.firebase
479:12 - and
479:12 - let me make sure
479:14 - that we have
479:16 - our notes app here you can see my node
479:19 - slatter project
479:20 - and you can click on it and you can see
479:22 - how it is set up for you you can see
479:23 - there is an android app setup and an ios
479:26 - app setup so
479:27 - you didn't have to really do anything
479:29 - now there's lots of things you can do
479:31 - with firebase which we're going to
479:32 - actually play with throughout this
479:34 - course but not right now just make sure
479:37 - that your
479:38 - firebase project is created for you by
479:41 - logging into console.firebase.google.com
479:45 - many dots
479:48 - all right and we've talked about this
479:50 - now running the application on an
479:52 - android telephone so
479:55 - that was already set up so we don't have
479:57 - to talk about that now
479:59 - now that you've seen that you've set up
480:00 - your backend you're ready to go and uh
480:04 - so i can say congratulations so that's
480:06 - in order
480:07 - now
480:10 - the android setup is already done so i
480:11 - can see that that is set up we don't
480:13 - have to talk about that either
480:16 - however
480:18 - what we do need to talk about is what
480:20 - we're gonna
480:21 - discuss in the next chapter
480:25 - so
480:26 - in the next chapter we are for the first
480:29 - time in this course we are going to talk
480:31 - about
480:32 - the uh footer code actual thoughts or
480:36 - code we're going to start writing a
480:38 - simple registration screen so using this
480:41 - registration screen our
480:43 - right now hypothetical users are going
480:46 - to
480:47 - look at the screen and say okay i don't
480:50 - have an account with this application
480:52 - i'm going to register myself so
480:54 - then you will
480:55 - be able to they will be able to enter
480:58 - their email address a password of their
481:00 - uh choosing press some sort of a button
481:03 - and we will then talk with firebase and
481:05 - say here's a new user register that
481:08 - person okay so that's all for the next
481:11 - chapter which is chapter 12. so grab a
481:13 - cup of coffee cup of tea whatever you
481:15 - want to do
481:16 - get refreshed then
481:18 - and i'll see you in the next chapter
481:20 - hello and welcome to chapter number 12
481:23 - of this filter course
481:24 - in this chapter and which i'm very
481:26 - excited about we're going to talk about
481:28 - a basic register screen well up until
481:30 - this point we've been really configuring
481:33 - our i mean if we go chronologically
481:35 - we've had the introduction we've gone
481:36 - through so many chapters to talk about
481:38 - dart and its basics and even some more
481:40 - advanced topics such as generics
481:44 - and then as soon as we did that then we
481:49 - basically
481:51 - started learning about setting up our
481:53 - iphone and android application also
481:55 - after that
481:56 - sorry the iphone and android application
481:59 - together with certificates profiles and
482:01 - got scr cpy working so there's been a
482:04 - lot of information up on those till this
482:06 - point so many hours of information that
482:08 - you can go back and watch
482:10 - and i strongly suggest that you actually
482:12 - do that because i've explained
482:14 - everything in such
482:16 - extent extensive detail that i feel like
482:19 - explaining all those things again and
482:20 - again will be a waste of time both for
482:22 - you and me
482:23 - and
482:24 - in this chapter
482:26 - we are going to use all that information
482:28 - that we've learned from the previous
482:29 - chapters and start actually creating a
482:31 - registration screen a simple
482:32 - registration screen in our floater
482:34 - application source code that talks with
482:37 - firebase and firebase we set up in the
482:39 - previous chapter if i'm not mistaken so
482:42 - have a look at that chapter if you
482:44 - haven't set up your firebase app
482:46 - back-end
482:47 - or at least i mean we haven't really set
482:49 - up anything we've just like
482:51 - well yeah actually set up yeah we could
482:53 - say set up um but we haven't really
482:55 - configured in such great details it's
482:57 - just like we've set it up so
482:59 - have a look at that chapter please if
483:00 - you want to um
483:03 - before you continue with this chapter so
483:06 - so
483:07 - i'm gonna go to my captions here and
483:09 - just ensure that i can show you the
483:10 - correct captions
483:12 - now what we need to do in this chapter
483:14 - is to start working on our registration
483:16 - screen and what i'm going to do here is
483:18 - bring up a caption for you so that you
483:20 - know what we're going to do
483:22 - the first thing you need to do is to
483:24 - bring your
483:25 - visual studio code
483:27 - or your editor of choice
483:29 - on the screen so i'm i'm going to do
483:31 - that and then i'm going to bring my
483:33 - android phone mirrored on the screen
483:35 - with scrcpy
483:37 - and then i'll see if i can bring my face
483:39 - to the right so you can see a little bit
483:40 - of a bigger screen
483:44 - and what we need to do here now is to go
483:46 - in this main dart file and remove
483:48 - everything that is a comment now
483:51 - if you're coming from like a design
483:52 - background or a product owner or um like
483:55 - in
483:56 - wherever whatever background that is not
483:58 - software development related if you're
484:00 - coming from those backgrounds then you
484:01 - may not know what a comment is however
484:04 - i'll tell you now a comment is a piece
484:06 - of information piece of text that is
484:07 - written inside a source file such as
484:09 - this main dart file that doesn't
484:12 - translate to an actual code so it's
484:15 - information placed there
484:16 - usually for other developers or whoever
484:19 - is looking at the code so that they
484:20 - understand the code a little bit better
484:22 - okay
484:23 - comments in dart can be created in
484:24 - different ways however the most
484:27 - i mean the most usual way of doing it is
484:30 - with
484:31 - double forward slashes as you can see
484:33 - here and a space and then some text all
484:35 - right
484:35 - so
484:36 - i'm going to need you now to go into
484:39 - your main dart file and we're going to
484:41 - remove all these comments right now
484:42 - because they are basically creating a
484:44 - lot of noise for us right now okay
484:47 - so let's go ahead and remove all those
484:49 - gray lines or whatever color they're
484:52 - displayed on your screen they may be
484:53 - green
484:54 - depending on your
484:56 - theme
484:57 - i have tokyo knight as i mentioned
484:59 - before
485:00 - in visual studio code so comments are
485:02 - displayed in gray
485:05 - gonna remove all that comment there okay
485:08 - and that's it
485:09 - so and i think this as well
485:12 - and i don't know yeah and it seems also
485:15 - like uh
485:16 - so yeah i think now we've removed all
485:19 - the comments so if i do command s that
485:21 - does a hot
485:23 - reload
485:24 - and i'm actually going to talk about
485:25 - what the hot reload is but if you've
485:27 - done this then you're good to go i'm
485:29 - going to take that in my notes so we've
485:31 - talked about it
485:32 - now the next topic to talk about here is
485:35 - hot reload versus hot restart now
485:38 - these two are so important for you to
485:39 - understand that i think you should like
485:41 - get this before you continue with the
485:43 - rest of the course and i'm gonna do my
485:45 - best to explain what hot reload and
485:46 - hardware start are
485:48 - if you're for instance coming from a
485:50 - design background where you have for
485:51 - instance figma
485:53 - and you design your um
485:56 - stuff you're you're putting some vectors
485:58 - on the screen you're dragging images and
486:00 - i can go in your figma design and
486:02 - literally observe you as you're doing
486:04 - that so i'm actually looking at your
486:06 - changes you don't have to press any
486:08 - publish button nothing like that even if
486:10 - you're in your drafts i can still follow
486:12 - you and watch you as you're designing
486:15 - now that future is very very much
486:18 - possible in flutter as well
486:20 - however
486:21 - the cost of doing that the same thing
486:24 - that figma does is quite heavy because
486:27 - as i'm changing my code i actually i'm
486:30 - not going to be able to see my changes
486:32 - unless i tell flutter that okay i've
486:35 - made some changes show me them on the
486:37 - screen
486:38 - that is hot reload okay for instance if
486:42 - i go in here and i say flutter demo home
486:44 - page and remove the demo home page from
486:46 - here
486:47 - press command s that's going to save my
486:49 - file which in turn is going to do a hot
486:52 - reload okay
486:54 - so command s
486:55 - you can see this title now was changed
486:58 - from here
486:59 - so it's set it says not flutter demo i'm
487:01 - going to change it back command s hot
487:03 - reload and it's going to say home page
487:05 - now you can also avoid for instance
487:08 - doing command s and just go in here in
487:10 - your visual studio code or android
487:12 - studio and just say hot reload so i can
487:15 - see now that didn't actually do it that
487:16 - was great because i can see a little
487:20 - like blob here you see the circle on
487:22 - this file this in visual studio code is
487:24 - an indicator of a file that has not been
487:26 - saved so
487:28 - so if i save it and it itself is going
487:30 - to do a hot reload so i don't have to
487:32 - actually manually press the hot reload
487:33 - button so save and then you can see the
487:35 - changes immediately applied there
487:38 - however some changes to your code are
487:41 - going to be so big that footwear is not
487:44 - able to resolve the delta from the
487:47 - previous state of the application to the
487:50 - new states and we will come to those
487:52 - changes very difficult to explain them
487:53 - right now but just know that hot reload
487:56 - is
487:57 - usually works in 99 something percent
488:00 - like i'm making up statistics here in
488:03 - most cases hot reload works in that it
488:05 - can show you your latest changes however
488:08 - sometimes your changes may be so drastic
488:10 - and so big and the
488:13 - the
488:14 - calculation of the delta from the
488:15 - previous previous state to the next to
488:17 - the new state may be so big that flutter
488:19 - isn't able to do that so then you will
488:22 - have to do hot reload and then hot
488:23 - reload is
488:25 - here sorry hot restart you will have to
488:27 - do a hot restart sorry about that
488:30 - so there's more differences between them
488:32 - like internally about the state
488:35 - like the state of your application and
488:37 - whether one
488:38 - keeps your state and the other one loses
488:40 - your state so i'm not going to talk
488:42 - about that right now because we haven't
488:43 - even talked about states in flutter so i
488:47 - don't think it makes so much sense to
488:48 - talk about that right now just know that
488:51 - in most cases hot reload displays your
488:53 - latest changes and that and it's
488:56 - sufficient if you just do a command s
488:58 - and save your files
489:00 - but hot restart it will basically kind
489:02 - of like rebuild your application
489:05 - with new states okay
489:08 - so i think i think to be honest with you
489:09 - that's sufficient for now
489:11 - so what we need to do now
489:15 - is to
489:16 - have a look a little bit about at
489:19 - restructuring the code that is created
489:21 - for us by default
489:23 - and as you can see here
489:25 - um i mean we don't really know how these
489:27 - things work right now
489:30 - um you don't even know like in the
489:32 - caption i say material app inside run
489:34 - app and home page widget
489:37 - what does this mean well you don't know
489:39 - that and that's okay
489:41 - i'm not going to like confuse us right
489:43 - now with too much detail but what you'll
489:45 - need to know right now is that
489:47 - let's go in here and i'm gonna bring the
489:50 - logs up
489:51 - what i'm gonna do in here in this build
489:53 - function of my app
489:55 - just go and type print
489:58 - building
490:01 - okay
490:02 - and command s and then you'll see that
490:05 - printed to the screen so every time i'm
490:08 - pressing command s
490:10 - this entire application is being built
490:13 - again and there is a little bit of like
490:15 - a resource
490:16 - hug because
490:20 - as you can see here material application
490:21 - is the entire
490:23 - kind of like a scaffolding entire frame
490:26 - of your application including the bar on
490:28 - top including this white view here and
490:30 - including that badge up there on the top
490:32 - right
490:33 - it's like you are pretty much building
490:36 - things that you don't need to build
490:37 - every time you save this file so it's a
490:39 - little bit of like a a problem of um
490:42 - performance whether you want to do that
490:44 - or not but in this in this uh course i'm
490:47 - just i'm gonna give you some advice on
490:49 - how to make your application also run a
490:51 - little bit faster so to do that what we
490:54 - need to do is just to tell flutter that
490:55 - hey look we don't want to build the
490:57 - entire app every time
491:00 - or the app structure every time we're
491:02 - pressing command s to how to hot reload
491:04 - so
491:06 - your
491:07 - challenge here now is to if i get rid of
491:10 - this
491:11 - what we need to do now is you can see
491:12 - here
491:13 - in the main function which is the root
491:15 - function that flutter calls when it
491:17 - actually runs your application it says
491:18 - okay i'm running an app called my app
491:20 - and if you look at my app the only thing
491:22 - it does it actually creates a material
491:24 - app that's all it does so
491:26 - what you need to do now is to grab this
491:29 - material app so i'm just going to say
491:31 - command x on
491:33 - mac
491:34 - or control x i think on windows and
491:36 - linux
491:37 - grab that and instead of this const my
491:40 - app
491:41 - paste that in there okay
491:44 - and then kill your my app boom like that
491:48 - okay and then do command s
491:51 - and just to make sure everything is
491:52 - working correctly i'm just going to do a
491:54 - hot restart
491:56 - and you can see everything is working as
491:59 - it should so what we did here really was
492:01 - actually let's see my homepage yeah
492:03 - that's fine
492:05 - um
492:06 - yeah so
492:07 - what we have now is just the main
492:10 - function and something called my
492:12 - homepage stateful widget all right so
492:16 - get your code also to this state
492:20 - i'm gonna take in my notes that i've
492:22 - talked about that all right
492:23 - so the next thing we need to talk about
492:25 - is stateless versus stateful
492:28 - now
492:30 - state
492:31 - i mean for me it feels like for me to be
492:34 - able to explain this i need to first
492:35 - explain what a state is uh let's say in
492:38 - here i press this button
492:40 - five times okay
492:42 - and then i go and i say oh i want to
492:44 - change the title of this little label
492:46 - there i'm gonna say you
492:49 - you've instead of you have
492:52 - or
492:53 - yeah let's convert this to double quotes
492:56 - because we're putting a single code in
492:58 - there
492:59 - i'm gonna say you've pushed the button
493:01 - this many times and i'm gonna say
493:03 - command s or control s in windows and
493:05 - linux to hot reload
493:08 - hot reload yeah command s okay
493:11 - and you can see is that you've pushed
493:13 - the button this many times but it kept
493:16 - the number five
493:17 - so if it rebuilt this application or
493:20 - this widget
493:22 - or this thing that you can see on the
493:24 - screen how did it keep keep the state
493:27 - well that is because
493:29 - hot reload is able to sometimes as i
493:31 - mentioned before keep your state and
493:33 - state is just data data usually
493:38 - mutated and created either by the
493:40 - application or the user or both and in
493:43 - this case this is a state that the user
493:44 - is controlling so by pressing the button
493:46 - he or she is increasing this number now
493:49 - it's 10 okay
493:50 - a state full widget it can keep that
493:54 - information
493:56 - so
493:56 - it you see it has
493:59 - something called a counter
494:00 - it's an integer and it keeps hold of
494:03 - that number so
494:05 - and upon this number being changed it
494:08 - can kind of redraw itself so
494:11 - stateful widget is
494:13 - something that is on the screen usually
494:15 - something that you can visibly see
494:17 - such as this screen the white screen you
494:20 - can see here
494:21 - stateful
494:22 - and it can contain data
494:27 - upon who's changing it can redraw itself
494:30 - itself so
494:32 - had we had the same widget as you can
494:35 - see in my home page and it was stateless
494:37 - widget which is available as well
494:39 - you see
494:40 - let's switch it
494:42 - it wouldn't necessarily be able to
494:46 - redraw itself or contain any mutable
494:49 - data i mean even stateless widgets
494:53 - for those who are a bit more familiar
494:56 - with flutter you'll have like value not
494:58 - notifier and builders so even stateless
495:01 - widgets can be redrawn depending on what
495:03 - you're trying to do
495:05 - but they cannot contain
495:07 - mutable variables so that is kind of
495:11 - like the um
495:13 - difference between stateful and
495:14 - stateless so you can see here this is a
495:16 - variable that is not read-only otherwise
495:19 - it would be final so if i make this
495:21 - final you can see it says oh you can't
495:23 - reassign this value to something else so
495:25 - just know that if you see state full
495:27 - widget then it is a widget that contains
495:30 - information that can be
495:32 - changed
495:34 - as the user interacts with the widget or
495:35 - as time goes by or as the widget sees
495:38 - fit however stateless widget is a widget
495:41 - who's
495:42 - who has who doesn't contain any mutable
495:44 - pieces of information and doesn't manage
495:48 - any mutable pieces of information
495:50 - internally okay
495:52 - that's a lot of just just there's a lot
495:54 - of talk i know if you're not comfortable
495:56 - with like if you if you haven't done
495:57 - software development before you may not
495:59 - this may not make any sense to you and i
496:01 - promise you as we go on and of course
496:02 - you're gonna learn more about it so
496:04 - don't worry about it if you didn't get
496:06 - this
496:07 - on the get-go
496:10 - so
496:13 - you can see now let's see um
496:16 - let's talk a little bit about i'm gonna
496:18 - actually tick this
496:23 - in the
496:25 - in my in my notes
496:30 - okay so i can see in my notes that i had
496:33 - um
496:35 - that as part of as part of uh
496:38 - what i was going to explain here i was
496:40 - actually
496:41 - i had planned i can see my notes i had
496:44 - planned in one of the previous captions
496:46 - uh here um
496:48 - as part of this caption i was actually
496:50 - supposed to come completely kill this my
496:52 - home page uh widget
496:54 - and i was supposed to actually create a
496:57 - widget just called home page so let's do
496:59 - that let's just go back into that
497:01 - caption so kill this my home page
497:05 - and now
497:06 - go in here and change this to home page
497:10 - so what we need to do now is to create a
497:13 - very simple home page okay so i'm gonna
497:15 - remove this title from here as well and
497:18 - you can see now we have an error telling
497:20 - us that okay i don't know what home page
497:22 - is now what we need to do is to create a
497:25 - uh actually let me see if i plan to
497:27 - create a stateless yeah stateless widget
497:30 - okay
497:31 - a great shortcut that you need to know
497:33 - in visual studio code and i think it may
497:35 - be available in android studio as well
497:38 - is if you want to create a stateless
497:39 - widget just type stl
497:42 - and you can see it tells you that okay
497:43 - you want to create a stateless widget
497:45 - great
497:46 - okay there it is then you give it the
497:48 - name of home page okay so now you have a
497:51 - home page great and i'm going to do a
497:53 - command s and now you can see this is
497:56 - one of the times that flutter was like
497:58 - okay
497:59 - i don't understand what you're trying to
498:00 - do you change some stuff in this main
498:02 - function and i can't do hot reload so
498:04 - you have to do hot restart so now the
498:06 - screen is kind of gonna be black
498:09 - so
498:10 - now we have what i had planned in the
498:12 - course initially for for this chapter so
498:14 - great let's go now to the next point
498:18 - um
498:19 - so you can see the screen is black here
498:21 - and that's because of this container
498:23 - there is a little container there or
498:24 - something on the screen that you can't
498:25 - really see because it's just black so
498:28 - you could go in here and say there is a
498:29 - color and you can say colors red i just
498:32 - command s
498:34 - and you can see now the screen is red so
498:36 - just know that there is something on the
498:37 - screen but you just can't see it because
498:38 - it's all black so
498:41 - the way to get your application to a
498:42 - point that is actually like presentable
498:45 - to a user you usually have to create
498:46 - something called a scaffold now scaffold
498:49 - as it as its name indicates it's kind of
498:51 - just like the basic building structures
498:54 - of an application that kind of makes it
498:56 - presentable to a user to an average user
498:58 - so
498:59 - even though if you're creating like a
499:00 - graphically intensive application this
499:03 - black background may be completely okay
499:05 - but in most applications when you run
499:08 - them then you'll get
499:10 - then you'll get like a bar on top that
499:12 - tells you like the name of the screen
499:13 - that you're on kind of like the title of
499:15 - a web page and you'll also get some like
499:17 - a status bar on top where as you can see
499:19 - here the status bar is kind of like
499:22 - black with all white icons on top and it
499:24 - will give you like a wide screen where
499:27 - you can interact with your content
499:29 - so we don't have that and in order to
499:31 - create that you have to create something
499:32 - called a scaffold so
499:34 - go to your container here and say
499:36 - scaffold okay
499:38 - now i'm gonna press command s and you'll
499:40 - see all this on then we get this little
499:43 - white screen here and then there's a
499:45 - little tint on our status bar as well so
499:47 - it makes it a little bit more
499:48 - presentable okay
499:50 - so
499:51 - what we need to do now i'll basically
499:54 - see if i've planned to add some bar
499:57 - title in here which i haven't so let's
499:59 - do that right now so for our scaffold
500:01 - we're also going to add an is something
500:04 - called an app bar
500:06 - so go to your scaffold and say app bar
500:09 - and then say i create a new instance of
500:12 - the app bar class all right
500:14 - and in here there's a property called
500:16 - title and as the title say text
500:20 - okay
500:20 - and for the text i'm going to get rid of
500:22 - all this documentation there's excessive
500:24 - amount of documentation here which kind
500:25 - of blocks the screen so
500:27 - and for the text just say
500:30 - register
500:31 - for instance and make it a constant
500:33 - so and put a comma here and a
500:37 - uh comma here as well
500:39 - so you see after you've done that
500:41 - your screen has a beautiful blue bar
500:43 - here with the title of your uh
500:46 - application or the title of your home
500:47 - page
500:48 - and there is a white canvas here for the
500:51 - rest of your content to be displayed so
500:54 - now there are a few things in here which
500:56 - i could jump over but i kind of feel
500:58 - like they're so important to explain
500:59 - that i'm going to do that right now so
501:02 - in flutter every time you have for
501:04 - instance here there is a text you see
501:06 - sorry there is an app bar an app bar if
501:08 - you go into the source code of an app
501:10 - bar let's go a little bit higher you can
501:13 - see it it says i'm a stateful widget all
501:16 - right so app bar in itself is a widget
501:18 - so what we're doing here is saying we
501:20 - have something called a scaffold let's
501:22 - go to scaffold it itself is a stateful
501:24 - widget so we're saying the main widget
501:26 - we're returning from our build function
501:28 - as you can see it should return a widget
501:30 - is a scaffold which is a stateful widget
501:32 - in itself it has a property called app
501:34 - bar an app bar it itself is a stateful
501:36 - widget which in turn has a property
501:38 - called title now the title
501:41 - if you look at the documentation it says
501:43 - title is also widget
501:45 - so
501:46 - let me also make the screen a little bit
501:48 - bigger
501:49 - like this so you see it better
501:51 - so
501:52 - now the title is a widget and we're
501:54 - saying oh we're going to use a text
501:56 - widget if you look at text what it is is
501:58 - a stateless widget it means internally
502:00 - it states or its state can change and it
502:03 - it doesn't have any mutable variables
502:05 - okay oh i didn't want to change that
502:08 - so
502:09 - if you see what we're doing here when in
502:11 - flutter you're just creating widgets
502:13 - everywhere in flutter almost everything
502:16 - is a widget either stateful or stateless
502:18 - and you try to you need to kind of try
502:20 - to stick to stateless widgets as much as
502:22 - you can all right we're going to talk
502:23 - more about stateful and stateless so
502:27 - now that we've added the scaffold and
502:29 - i've explained a little bit about these
502:31 - widgets that were we've created and
502:32 - we've done a command as here just to
502:36 - hot reload the application or this
502:38 - widget
502:40 - uh what we need to do next is to create
502:43 - a login button
502:46 - so
502:47 - let's go and create some sort of a login
502:49 - button
502:50 - and you can see here i've written the
502:52 - caption button on home page in the
502:54 - center to log in
502:56 - or more accurately it could actually be
502:59 - register
503:01 - so i'm going to change that i'm going to
503:02 - say register button
503:05 - and button on the homepage in the center
503:07 - to register okay
503:09 - display the caption to you there
503:12 - to and i'm gonna change my notes here
503:14 - just quickly all right so
503:16 - now your task is to create a button on
503:18 - the screen how do you do that well
503:20 - in scaffold you see the scaffold at the
503:23 - moment it's the owner of that bar on top
503:25 - and it's the owner of this
503:27 - white content here so what you need to
503:29 - do is to go and look at a property
503:31 - called body
503:32 - and body is
503:34 - in itself if i move my mouse over it
503:36 - says okay give me a widget you see
503:39 - and of course i could say well i have no
503:41 - widgets null is also acceptable but in
503:44 - this case we're going to create a button
503:46 - called text button so text button is a
503:50 - widget if you go into source code you'll
503:52 - see it's a
503:53 - text button button style button and that
503:56 - is a state full widget all right so
503:59 - you're basically saying that i'm
504:00 - creating a button and i want to allow
504:02 - the user to do something with it all
504:04 - right so we need to do as you can see
504:06 - there is a little bit of an error here
504:08 - to say that says unpressed is a
504:10 - parameter that you haven't provided to
504:12 - me so we need to tell this button
504:15 - that
504:17 - when this button is pressed it needs to
504:20 - do something and this is a requirement
504:22 - for the text button class that it's
504:24 - telling you well i'm a button
504:26 - what do you want me to do when i'm
504:28 - pressed if you don't press if you don't
504:30 - provide unpressed parameter to me i
504:33 - don't i'm not even a button i could just
504:34 - be a label and that is what this error
504:37 - is all about is saying that if you're
504:38 - creating a button make sure that you
504:39 - handle
504:41 - what happens when the user presses on so
504:43 - in here just type unpressed
504:46 - and i'm just going to get visual studio
504:48 - to complete this code for me you can see
504:50 - it says okay an empty function
504:54 - a function with empty list of parameters
504:56 - so no parameters
504:57 - and then
504:59 - the code in itself is empty at the
505:01 - moment okay so go after the create
505:04 - creation of that function and then you
505:06 - see that there is another that you have
505:07 - to handle that says child
505:09 - you see text button you would say you
505:12 - would probably just assume that oh a
505:13 - text button should have some sort of a
505:14 - string parameter that says what is my
505:17 - text
505:18 - so
505:19 - if we write child here the beauty of
505:22 - flutter is that it says
505:24 - child is a widget so text button doesn't
505:27 - doesn't make any assumptions about what
505:30 - content you want to display on that
505:31 - button
505:33 - what it does it says i need to display
505:35 - some widget anything it could be an
505:37 - image it could be an icon it could be
505:39 - whatever it could be a list of things
505:41 - which is not a good idea to do but you
505:43 - could still do that so
505:45 - um
505:45 - go and create a child widget and now
505:48 - you've learned about the text widget so
505:50 - i'm just gonna say a constant text
505:51 - widget and in here we're just going to
505:53 - say register okay
505:55 - now command s
505:57 - and you'll see now all of a sudden you
505:58 - have a register button there
506:01 - so another cool feature now i want to
506:03 - show you in visual studio and i think
506:04 - it's available also in android stu is
506:05 - that you can go and wrap your widgets
506:09 - with other widgets so instead of for
506:11 - instance saying that i want the text
506:13 - button to be in the center and then you
506:15 - go and create a center if
506:18 - you know it also exists you could do
506:20 - command dot or command dot on mac or
506:23 - control dot in windows and linux and
506:25 - visual studio code on the widget that
506:27 - you want to wrap in some other widget
506:29 - and then
506:30 - you will get this beautiful menu that
506:32 - says you you know you can wrap it with
506:34 - many different things so i'm just going
506:36 - to pronounce a wrap with center so as
506:39 - you can see center is a widget that has
506:42 - a child property all center does is that
506:45 - it tries to center
506:47 - horizontally and vertically it's child
506:51 - inside the available space of the center
506:55 - widget itself
506:56 - the entire available space in this case
506:58 - as you can see is this entire white
507:01 - background so center has access to that
507:04 - entire white background right now
507:06 - because center is the root widget of our
507:09 - body which is the only thing that our
507:11 - scaffold is showing at the moment
507:14 - so
507:15 - center then is able to center align this
507:18 - text button so let's command s and you
507:19 - can see the register button is centered
507:22 - horizontally and vertically in the
507:24 - available space
507:27 - now that i've talked about that i'm
507:29 - going to take it here
507:32 - and what we're going to do here is very
507:34 - very important so
507:37 - what we need to do is
507:39 - we now need to handle when the text
507:42 - button is pressed
507:44 - that we're going register a user with
507:47 - firebase okay
507:48 - now
507:49 - we talked about this when i talked about
507:51 - like uh dart in the previous chapters we
507:54 - talked about synchronous and
507:55 - asynchronous and i'm not gonna go into
507:57 - details about that now
507:58 - registration i'm sorry i'm not going to
508:01 - talk about that in details because we've
508:02 - talked about that in details before so
508:05 - if you need to know about that i think
508:07 - synchronous and asynchronous were
508:09 - probably explained in um i'll have a
508:12 - look at my notes
508:14 - they were explained in chapter number
508:16 - seven so if you haven't watched chapter
508:19 - number seven i strongly suggest that you
508:21 - do that if you don't know what sync and
508:22 - async are
508:24 - um
508:25 - what we need to do now is to tell
508:27 - firebase to register user now
508:28 - registering a user with firebase is an
508:31 - asynchronous task so it's not going to
508:33 - complete immediately so what we need to
508:35 - do now is to tell flutter that the
508:38 - button press is an asynchronous task and
508:41 - all you need to do here is just to put
508:42 - the keyword async in there okay
508:46 - so
508:48 - that is that
508:50 - that's it in my
508:52 - notes i've talked about it
508:57 - now
508:59 - what we need to do is to have a look at
509:01 - this link that i've provided for you
509:04 - um i'm going to close this safari window
509:08 - let me see if i can
509:09 - show you on this screen
509:13 - um
509:16 - other sign-in methods great you can see
509:19 - as i'm displaying here
509:22 - firebase allows you to
509:25 - enable various sign-in methods
509:28 - uh to your for your users so
509:31 - um
509:32 - firebase
509:33 - is not only limited to like google
509:35 - services you can as you can see it can
509:37 - allow you to enable facebook signing for
509:40 - users or apple sign-in
509:42 - twitter or phone number sign-in so there
509:45 - are various methods available
509:48 - for you to enable in your flutter
509:50 - application and in this application
509:52 - we're gonna use email and password sign
509:54 - in
509:55 - and there's like documentation about all
509:57 - of those in this link that i've provided
509:59 - provided to you so
510:02 - i'm not gonna go through the entire
510:03 - contents of this to be honest with you
510:05 - because there are just so much
510:06 - information and we're not interested in
510:09 - all of these but still i believe if
510:11 - you're interested in firebase and
510:13 - firebase authentication which we are
510:15 - going to use in this course it is great
510:18 - if you could just have a look at this
510:21 - link that i provided for you here
510:24 - so
510:25 - what we need to do now
510:28 - is also right i've written here that i
510:30 - need to talk about a little bit about
510:32 - anonymous users you see firebase when
510:35 - you start your application and you kick
510:37 - firebait if firebase
510:39 - you basically start the whole process of
510:41 - firebase you say firebase start
510:44 - firebase is amazing in that on the
510:46 - client side it by default creates
510:48 - something called an anonymous user so if
510:50 - you talk with firebase with your
510:52 - thoughts or application and say who's
510:54 - the current user even if you haven't
510:56 - done anything with firebase before if
510:57 - you haven't configured it or actually
510:59 - you have to configure it
511:00 - which we have already done but if you
511:03 - haven't called any firebase functions
511:05 - before in your application you could
511:07 - just say firebase who's the current user
511:09 - and firebase will just tell you here's a
511:11 - current user it's an anonymous user so
511:13 - that user is pretty much never going to
511:15 - be empty it's never going to be null or
511:17 - nil or whatever you like to call it so
511:19 - or if you're python developer you just
511:21 - call it none so that user is almost
511:24 - never none
511:25 - so just know that firebase has a concept
511:27 - of anonymous users okay
511:30 - i'm just going to take that in my notes
511:32 - that we've talked about it
511:33 - so what we need to do in the next step
511:35 - i'm going to bring the caption up so we
511:37 - have to kind of like speed things up a
511:38 - little bit here because there's so much
511:40 - to talk about
511:41 - um what we need to do here now is just
511:43 - to
511:44 - create two text fields now one for the
511:47 - email and the other one for the password
511:49 - and we are going to then put our button
511:52 - um
511:53 - next to those two text fields so text
511:56 - field one email text field 2 password
511:59 - and then the register button as the
512:00 - third component now if you have
512:03 - components like this that you want to
512:04 - stack vertically one on top of each
512:06 - other and one after each other then you
512:09 - need to use a which is called column all
512:11 - right
512:12 - so what i'm going to do here is go here
512:15 - to the center and kind of like remove
512:17 - that i'm just going to say command dot
512:19 - in mac or control dot in windows on
512:20 - linux and just say remove this widget
512:22 - okay i don't want to center anymore
512:25 - command s results register buttons on
512:28 - top left and what i'm going to do is i'm
512:30 - going to command up again and say wrap
512:31 - with column okay now if you command s
512:34 - you'll not see anything directly on the
512:37 - screen no changes all right
512:38 - but what was created for you is a column
512:41 - widget with children property which is a
512:44 - list of widgets that it can display so
512:46 - the first thing we're gonna do is to
512:48 - create two text fields okay
512:51 - so let me have a look here and just make
512:52 - sure yeah
512:54 - i'm just going to say a text field
512:57 - and another text field okay
513:00 - like that
513:02 - save you'll see two text fields display
513:04 - there so i can actually go in there and
513:05 - start typing something okay
513:09 - like that so now we've created two text
513:11 - fields with a column
513:14 - on the screen
513:16 - i'm going to note that here a ticket in
513:18 - my notes so we've talked about it now
513:20 - what we need to do is
513:22 - grab the text that is displayed in this
513:25 - take these text fields and when you
513:27 - press the register button pass that to
513:29 - firebase okay now you see i'm telling
513:32 - you that when you press the button you
513:33 - need to grab the text inside these text
513:35 - fields but inside this function of
513:37 - onpress you have no access to these text
513:40 - fields okay so you kind of need to pass
513:42 - information from this text field and
513:44 - this text field to a text button and the
513:47 - way to do that is is using something
513:50 - called a text controller
513:53 - so
513:54 - a text or a text editing controller a
513:56 - text editing controller is kind of like
513:58 - a proxy object that you pass
514:00 - to your text field and the text field it
514:03 - writes its current text all the time to
514:05 - that text editing controller and in your
514:07 - text button here then you can say
514:10 - controller text okay so you can then so
514:13 - it's kind of like if your text field is
514:14 - sitting here and your text button is
514:16 - sitting here then you'll have something
514:18 - here in the middle that is your proxy
514:20 - the text editing controller that is
514:22 - grabbing me for latest information from
514:24 - the text field and then your the text
514:27 - button can read that information okay so
514:29 - just know that a text editing controller
514:30 - is kind of like a proxy
514:32 - now that we need to manage some state we
514:35 - need to manage this proxy object then we
514:37 - need to convert our home page to a
514:39 - stateful widget okay so go in here to
514:42 - your home page command dot and say
514:44 - convert to stateful widgets so all of a
514:45 - sudden stateful widget all right
514:47 - so
514:50 - um now what we need to do is to go and
514:53 - create those two text editing
514:54 - controllers so i'm going to go in here
514:57 - go to your home page state
514:59 - here and say
515:01 - late final
515:03 - what do we call them do i have any
515:05 - specific desire here let me see my notes
515:09 - no
515:10 - so there's no desire really for the
515:12 - naming so let's just say late final text
515:16 - thing
515:16 - controller and let's call it here email
515:20 - okay
515:21 - and the other one i'm just gonna
515:23 - say password
515:25 - now in the previous chapters we haven't
515:26 - talked about late what late is this
515:29 - keyword in dark that tells your program
515:31 - that although this print although this
515:34 - variable has no value right now but i
515:36 - promise to assign a value to it before
515:39 - it is used so it's kind of like a it's a
515:42 - contract so
515:44 - late literally means that i'm not ready
515:46 - right now i will do it later i'm not
515:48 - ready to assign a value to this so
515:50 - what we need to do now is to
515:53 - um
515:54 - is to create these values now
515:56 - you need to also know something about
515:58 - stateful widgets now that our homepage
516:00 - state is a stateful widget it will have
516:02 - two amazing
516:04 - amazing two great
516:06 - functions one is called init state i
516:09 - believe and the other one called is
516:11 - disposed now init state is a function
516:13 - that will be called by flutter
516:15 - automatically when it creates your home
516:17 - page so it says okay now you have the
516:20 - ability to create all your variables or
516:23 - your late variables
516:24 - once
516:25 - now whenever this homepage then dies and
516:28 - goes out of the memory or it's trying to
516:29 - go out the memory it will also get a
516:31 - function called dispose
516:33 - so
516:34 - you've said that in the contract i've
516:36 - written that i'm going to provide a
516:38 - value for these emails email and
516:39 - password text editing controllers and
516:41 - the best way to do that is to go into
516:43 - this init state
516:45 - function here
516:47 - and
516:48 - assign those to proper values so i'm
516:50 - just gonna say email
516:53 - email is text editing controller like
516:56 - that
516:57 - okay
516:58 - and i'm gonna do the same thing for the
517:00 - password field
517:02 - now you also need to understand that you
517:05 - after you've created these two you also
517:07 - need to dispose of them all right so
517:10 - go in and overwrite your dispose
517:13 - function
517:15 - and then say email dispose and password
517:19 - so a lot of developers forget to do this
517:22 - especially like newcomers so don't make
517:24 - that mistake so you created the text
517:26 - editing controllers and you're also in
517:28 - charge of disposing them okay
517:32 - now um
517:35 - okay uh so we've done that already
517:38 - after you've created your text editing
517:40 - controllers you need to go to your text
517:41 - fields and assign
517:43 - those controllers to your text field so
517:45 - in here there's a parameter called
517:46 - controller and just say email
517:50 - and for your text field on the second
517:52 - one which is for your password say
517:53 - controller
517:55 - it's password so what is happening now
517:58 - is you hooked this proxy object that sat
518:00 - here
518:01 - this one which is your email or password
518:03 - text editing controller to your text
518:05 - field that is sitting here okay you
518:07 - still haven't hooked it to your text
518:08 - button which is sitting here so this
518:10 - link is kind of broken and we're gonna
518:12 - fix that soon
518:14 - okay take it in the notes that we've
518:16 - talked about that
518:19 - so what we need to do now at the moment
518:20 - if i press command s you will see no
518:22 - visible changes on the screen however
518:24 - there's a little bit of a problem with
518:26 - our text fields as you can see they
518:27 - don't have any hint they don't tell the
518:29 - user what they expect the user to
518:32 - actually enter so
518:34 - what we need to do now is to go and add
518:36 - something to these text fields called a
518:37 - hint
518:38 - a hint is a piece of information
518:40 - provided to the user
518:42 - and usually kind of like very subtle
518:45 - color that tells the user about the
518:47 - information that this text field expects
518:49 - them to enter
518:50 - and that hint will automatically be
518:52 - removed as soon as the user types at
518:56 - least one character on that text field
518:58 - okay so let's go to the first text field
519:00 - and say
519:01 - decoration
519:04 - and i believe it's an input decoration
519:06 - and then say input decoration okay
519:09 - and for the hint there's so much
519:11 - information on the screen we can't see
519:12 - anything
519:13 - and there is a hint text as you can see
519:16 - hints text and it expects a string so in
519:19 - here say please enter or just say enter
519:23 - your email here
519:26 - and you can see it's suggesting this to
519:27 - be a constant so i'm going to make it a
519:29 - constant
519:30 - and a little bit of a comma there as
519:32 - well and you can see now it says enter
519:34 - your email here
519:35 - and copy and paste this decoration as
519:38 - well and put it in the next text field
519:40 - so say that enter your password
519:44 - here
519:46 - so let's enter your email here enter
519:47 - your password here
519:50 - so
519:51 - um
519:52 - let me also make sure that that is
519:54 - correct there and take it in the box so
519:56 - um
519:57 - then if you start typing in those fields
519:59 - you can see that the hints disappears as
520:00 - soon as you type something and if you
520:02 - remove that character then the hint also
520:04 - disappears and the same thing for the
520:06 - password okay
520:09 - so we've now got the
520:11 - groundwork like the base
520:14 - work done here and we need to get
520:16 - through the authentication so when you
520:18 - press this text button here where we
520:20 - need to do authentication and that means
520:22 - we're just going to register for now
520:24 - so what you need to do is you need to
520:26 - import
520:27 - firebase so firebase was our dependency
520:30 - and using the import statement you can
520:32 - actually grab the content that it was
520:34 - created for firebase and bring it into
520:36 - your source code okay
520:38 - so as you can see here we're gonna bring
520:40 - package uh firebase off
520:43 - and firebase off parts okay
520:46 - now command s you don't see any
520:48 - difference on the screen because an
520:50 - import statement doesn't really change
520:51 - the state of your application as such
520:55 - and after
520:56 - the importing
520:58 - we need to
521:00 - i'm going to take it here as well that
521:01 - we've talked about it
521:02 - so what we need to do now is to upon
521:05 - pressing this button where we're going
521:07 - to get your
521:09 - username and password from these text
521:12 - fields so let's say final
521:14 - username or sorry email and i'm going to
521:16 - say the email field text
521:19 - i'm going to say final password
521:22 - is password
521:24 - text
521:26 - we're going to our email and password
521:28 - controllers and grabbing their text
521:30 - which is the latest text that the user
521:32 - entered in those fields okay
521:34 - so
521:35 - after we've done that now you can go and
521:37 - say firebase
521:39 - auth
521:41 - instance
521:44 - and then you will say create user with
521:47 - email and password you can see this is a
521:48 - function
521:49 - that allows you to register or create a
521:52 - user as its name indicates uh with
521:54 - firebase so
521:56 - um i'm gonna do that so as you can see
521:58 - here as well this thing returns a future
522:01 - okay so
522:03 - um
522:05 - so this is this is not nothing that you
522:07 - can just like call and say hey do this
522:10 - now
522:11 - um
522:12 - without actually awaiting on it
522:15 - otherwise it will just say here i am a
522:17 - future i'm something that i will
522:19 - calculate something in the future and
522:21 - by not putting a weight before that call
522:23 - you will only get the instance of future
522:25 - you will not actually get the work that
522:27 - it's doing you will get like a wrapper
522:30 - around the work saying that this is the
522:31 - kind of work i'm gonna do but if you
522:33 - have weight on it it will actually
522:35 - perform the work
522:37 - if that makes any sense so i've
522:39 - explained the weight in that chapter i
522:40 - think also chapter seven or whatever it
522:42 - was when we talked about more advanced
522:44 - topics in dart so please have a look at
522:47 - that chapter as well
522:48 - um after doing that you will see that
522:51 - the return of this is actually future of
522:53 - a user credential so what i'm going to
522:55 - do is i'm going to say final user
522:58 - credential is this
523:00 - and then i'm going to print it user
523:02 - credential okay
523:04 - so command s
523:06 - and just hot restart here just in case
523:09 - because we didn't import so what i'm
523:11 - going to do in enter email here i'm
523:13 - going to say pixelityab.gmail.com
523:16 - and for the password i'm just going to
523:18 - say fubar
523:20 - bass okay
523:23 - so let's bring our console up so we can
523:26 - see what our application prints to the
523:28 - screen
523:29 - and i'm just going to say register which
523:31 - we're going to get an error for right
523:33 - now so
523:36 - and you can see here it says no firebase
523:39 - app default has been created called
523:41 - firebase initialize app
523:44 - so
523:46 - this is i mean this is really good that
523:47 - we're getting this because i actually
523:49 - have planned for us to fix that
523:52 - um but before we go ahead and do that
523:56 - um i should probably explain what this
523:59 - is why this is happening you see
524:01 - firebase there was there was if you
524:02 - remember when we configured it there was
524:04 - a file created here for us called
524:06 - firebase options
524:07 - and it has a lot of code in it and then
524:09 - there's like a configuration here uh
524:12 - that here you see android and for ios as
524:15 - well now what firebase is complaining
524:17 - about is saying that you've created this
524:18 - configuration but you've never actually
524:20 - told me about it so
524:22 - poor firebase so what we need to do now
524:24 - before we actually do the configuration
524:26 - is to fix
524:27 - something that you can immediately see
524:29 - on the screen which is which is
524:30 - incorrect
524:31 - you see foo bar bas is your password it
524:34 - shouldn't be visible to the user so when
524:36 - you're typing it it should be a password
524:38 - field and at the same time this field
524:41 - here you see is is an email field but
524:43 - where is the add sign at sign isn't
524:45 - immediately visible here so you need to
524:47 - tell these text fields to be configured
524:49 - in a specific way so that they're
524:51 - actually suitable for email and password
524:54 - registration fields
524:56 - so i'm going to get rid of this bar on
524:58 - the right oh sorry on the left
525:00 - and what we need to do is to bring up
525:02 - the caption
525:03 - for the next thing for the next topic to
525:06 - talk about talk about
525:08 - first what we're going to do is to make
525:09 - this
525:10 - password text field
525:12 - secure
525:13 - so
525:14 - what you need to do here in your
525:16 - decoration of the password field go in
525:18 - here and say obscure um actually it's
525:22 - not in the decorations right here
525:23 - obscure text
525:25 - it has true and if you press s on that
525:28 - you'll see that your text is now obscure
525:31 - also you need to do a
525:33 - enable suggestions
525:35 - false and then you will also do
525:37 - autocorrect
525:39 - false these are three important
525:41 - properties to
525:42 - provide here now you see enable
525:44 - suggestions is usually like as you're
525:46 - typing in a text field depending on your
525:48 - operating system
525:50 - it will provide you suggestions like
525:52 - this
525:53 - in a password field you don't want to do
525:54 - that you don't want to have any
525:56 - suggestions so that's for enabled
525:58 - suggestions also autocorrect is when you
526:00 - try to type something and you know you
526:02 - all probably know what autocorrect is so
526:04 - i'm not going to explain it so you're
526:05 - disabling autocorrect based on your
526:06 - password password field which makes
526:08 - sense so um now
526:12 - let's go and bring these two properties
526:14 - also to our email field which is
526:17 - here
526:18 - okay
526:19 - and what we're also going to do is to
526:21 - tell it that it is an email it needs an
526:24 - email keyboard so let's go in here and
526:27 - say input
526:29 - or keyboard i think type and it's called
526:32 - text
526:33 - input type i think
526:36 - and then dot email
526:38 - there's the email address so
526:41 - save it
526:42 - now if i then go here you can see
526:45 - there's an ad sign so i can um oh sorry
526:48 - you can't see it so i'm going to do
526:51 - this so you can actually see the that
526:53 - sign so you can see their keyboard here
526:55 - and then there's an ad sign right there
526:57 - okay
526:59 - so
527:01 - that's for that and then suggestions are
527:03 - also disabled so as i type there's no
527:06 - suggestions really for my um text
527:09 - because you don't want suggestions on
527:10 - email fields emails are usually like
527:12 - crazy texts so
527:13 - um or not usually but sometimes so you
527:16 - don't want any suggestions there okay
527:19 - we've done that i wanna take all of
527:21 - these items as done in in my notes
527:24 - now the next thing we need to do
527:28 - is uh to fix that uh
527:31 - initialization of our firebase app so
527:34 - we're gonna do it naively right now so
527:37 - i'm going to go
527:38 - because you see we still have this error
527:39 - so if i if i bring this up
527:42 - clean the
527:43 - errors and then say
527:45 - pixelity a b gmail.com and i say
527:50 - ubar baz
527:52 - i say register we will still get this
527:55 - error that says no if no firebase app is
527:58 - configured okay
528:00 - so what we need to do is to actually
528:02 - register
528:03 - sorry initialize firebase before we do
528:06 - firebase instance create user with email
528:08 - and password
528:10 - so
528:12 - what we need to do then is to go here
528:15 - and say firebase
528:16 - initialize firebase
528:20 - app
528:22 - see what we have there
528:26 - firebase
528:28 - auth instance or initialize app
528:32 - i've actually forgotten the syntax for
528:34 - that so
528:36 - let's see if we actually can learn
528:38 - how to do that by going to our
528:41 - um
528:43 - firebase options
528:44 - initialize you can see it should be done
528:47 - like this
528:48 - and what we need to do then is to import
528:50 - firebase options as it's as it's showing
528:52 - here firebase options and then await
528:54 - firebase.initialize app with this okay
528:57 - so let's let's kind of grab that code
529:00 - and then go into our main guard file and
529:01 - import firebase options so i'm going to
529:03 - go here and say import
529:08 - firebase options
529:10 - and right before we
529:13 - do the
529:16 - registration here
529:18 - i'm gonna do
529:19 - this code that was provided there for us
529:21 - so i'm gonna remove the comments
529:23 - command s and i can still see that
529:25 - firebase isn't imported so we're going
529:28 - to import it by doing import library
529:30 - package firebase core firebase core here
529:32 - what i did here is that i basically took
529:33 - advantage something that's built into
529:35 - visual studio code in order for me to
529:37 - get the import statement automatically
529:39 - so i'm going to do command dot on it and
529:41 - it says okay
529:42 - import this dart file so i'm just gonna
529:44 - take advantage of that why not
529:46 - and you can see that it is imported here
529:50 - firebase core
529:51 - so
529:52 - now that we've done that um i'm gonna
529:54 - press command s my state is preserved in
529:57 - the uh in my phone here and let me bring
530:02 - the logs here clean them and then i'm
530:04 - gonna press the register button
530:07 - boom
530:08 - uh here and we got an error here and it
530:11 - says device unlock initializing all
530:13 - firebase apis and firebase preparing to
530:15 - create blah blah and let's actually see
530:18 - what the error was so
530:21 - it is on handle exception request
530:24 - failed
530:25 - and
530:26 - unreachable host and that is probably
530:29 - because i actually don't have proper
530:31 - internet connection on my
530:33 - phone
530:34 - here
530:35 - so i'm gonna go here and i'm gonna go to
530:37 - settings
530:39 - actually great that you're seeing these
530:41 - errors because these things do happen so
530:43 - and i'm gonna turn wi-fi on
530:45 - so make sure that it's gonna connect to
530:47 - a valid wi-fi
530:48 - here
530:50 - and it connected i'm gonna go back to
530:52 - the application
530:53 - clear the logs oh my god there are so
530:56 - many things displayed there
530:58 - so then what i'm gonna do is i'm gonna
531:00 - repeat the same thing i'm gonna say
531:01 - register now
531:03 - so
531:04 - now we got to the
531:07 - next state that i have prepared that it
531:10 - says you can see in the errors it says
531:12 - configuration not found now
531:15 - what is happening here i'm not taking my
531:18 - notes that we've talked about the other
531:20 - part of the code
531:22 - what is happening here is that
531:24 - we haven't actually told firebase
531:27 - that we are going to take advantage of
531:30 - email and password signing combination
531:32 - as i told you before there are various
531:34 - way for various ways for a firebase to
531:37 - allow us to register a user uh apple
531:40 - login um you can do email and password
531:43 - combination you can do facebook you can
531:45 - do google
531:47 - maybe twitter as well yeah i think
531:48 - twitter was there as well so you need to
531:51 - tell firebase that um
531:53 - we basically want to
531:56 - allow this combination all right
532:00 - so
532:01 - now i've explained that let's bring up
532:03 - safari or your favorite browser maybe
532:05 - chrome and let's go to uh console
532:09 - firebase google.com i'm going to bring
532:11 - my browser on the screen so you can also
532:13 - see it
532:15 - and i'm going to then find our
532:17 - application which was called
532:20 - uh my notes flutter project okay so go
532:22 - to
532:23 - consolefirebase.google.com and find your
532:25 - project that you created in the previous
532:27 - chapter click on it
532:29 - then go to authentication as i as i show
532:32 - you here
532:33 - and let's see
532:35 - uh
532:36 - authentication actually get started
532:41 - and in sign in
532:43 - uh what we need is this email and
532:45 - password combination so go email and
532:47 - password combination and just allow it
532:49 - all right
532:51 - so and then press save
532:53 - and that's it that's all you have to do
532:56 - so i'm gonna
532:56 - grab this screen just kind of bring it
532:58 - to another
532:59 - monitor so you don't see it clean the
533:01 - logs and then say register
533:05 - so you can see now all of a sudden you
533:07 - got user credentials back from firebase
533:09 - so
533:10 - you actually could now um
533:14 - register your application like register
533:16 - a real user with firebase like that is
533:19 - actually magical so i'm gonna
533:21 - click on my notes that i've talked about
533:23 - that
533:25 - so
533:26 - however you see this this is a little
533:28 - bit problematic in that by pressing the
533:30 - button but we're actually initializing
533:32 - an application and then we're doing the
533:34 - create user with email and password what
533:37 - would happen if you had two or three
533:38 - buttons on the screen all needing
533:41 - firebase you can't do firebase
533:43 - initialize app in every single one of
533:45 - them so the solution to this is kind of
533:47 - like initializing your firebase
533:49 - application before you
533:52 - start and start with everything else in
533:55 - your in your on your screen and on your
533:57 - phone so
533:59 - there is good documentation of how to do
534:01 - that and i've actually linked to that so
534:04 - i'm going to bring it here
534:05 - so what we need to do is take advantage
534:08 - of something called widgets flutter
534:10 - binding
534:12 - and
534:13 - what happens to be honest with you here
534:15 - is that firebase it needs some
534:19 - it needs to
534:20 - kick start its process before everything
534:23 - else is rendered on the screen and in
534:25 - order for that to happen it needs to it
534:28 - needs to have some sort of that like the
534:30 - core flutter engine to be in place
534:33 - and so that it can make its call to the
534:35 - core slaughter engine and say that i'm
534:37 - done with my work so in order to do that
534:39 - then you need something called um
534:42 - widgets flutter binding
534:45 - so i'm gonna
534:46 - i'm gonna bring up
534:48 - the um caption for that and i can show
534:52 - you that i'm this is this is the
534:53 - documentation that i'm showing you as of
534:54 - linked there
534:56 - so
534:57 - in our in your void function here
535:00 - um before we actually you see
535:02 - maybe i'm jumping over a little bit but
535:04 - what we're trying to do is to try to fix
535:06 - this issue here that we're awaiting on
535:08 - initialize app on firebase okay so we
535:11 - don't want to do this on the press of a
535:12 - button we actually want to do it
535:14 - somewhere else and in order to be able
535:16 - to do that somewhere else we have to
535:17 - first take care of this widget binding
535:19 - okay so in your main function in here
535:23 - then say um
535:25 - i think we need to say
535:27 - widgets flutter binding dot ensure
535:30 - initialized like that
535:33 - okay and if you want to know more about
535:35 - that i strongly suggest that you read
535:37 - this documentation that i've provided
535:39 - here okay
535:42 - so now that that is in place
535:44 - um now that you've done that do a hot
535:47 - restart
535:48 - okay so you're gonna lose your state
535:50 - here after the hot restart and that's
535:52 - okay
535:53 - i'm gonna take that in my notes that
535:55 - i've talked about that
535:58 - now
535:59 - as you know this initialize
536:02 - app is a future you see it's a future of
536:04 - firebase app now what you need to do is
536:07 - kind of like you want to tell flutter to
536:10 - not build this column before it has
536:15 - finished doing that future
536:18 - and
536:19 - the way to do that is using flutter's
536:22 - future builder widget future builder it
536:25 - takes a future
536:27 - it performs the future and once this
536:29 - future has succeeded or it has failed
536:32 - doing its work it will give you a call
536:34 - back and in that callback it asks you to
536:37 - actually produce a widget you want to
536:39 - display to the user depending on the
536:41 - state
536:42 - of that futures result so it basically
536:46 - instead of you having to do this
536:47 - initialization of firebase every time a
536:50 - user presses the button you say i'm not
536:52 - going to do anything until that is done
536:55 - once that is done or if it errors out
536:57 - let me know then i will give you a
536:59 - widget to display to the user depending
537:01 - on the results okay
537:04 - so what we're gonna do
537:05 - is gonna go to this body which is a
537:07 - column right now command dot and then
537:10 - let's see stream builder we have but we
537:12 - don't have future builder so i'm just
537:14 - gonna say command dot wrap with
537:18 - widget
537:19 - and i'm gonna say future builder okay so
537:22 - i'm gonna build a future as you can see
537:24 - it says
537:25 - okay builder is required so let's put a
537:28 - builder parameter here and if you're
537:31 - like me and you forget these syntaxes
537:33 - you can just control space in visual
537:35 - studio code on mac or command space in
537:37 - linux and windows to get help
537:40 - and then you'll just use this syntax
537:42 - there okay
537:44 - so bring your entire column
537:48 - here you see this until the end of the
537:51 - column without the comma
537:53 - then you remove your child bring that
537:55 - entire thing and put a return here and
537:57 - just place it there okay
537:59 - like that
538:00 - now your future builder um it doesn't
538:04 - have an actual future to come to perform
538:07 - so
538:07 - for its future
538:11 - let's see i wanna
538:12 - say that we've talked about the future
538:14 - builder
538:16 - and what we need to do now is to grab
538:18 - this future from here you see
538:20 - await firebase initialize app and grab
538:23 - that future without the weight remove
538:25 - the weight
538:27 - and put it in the future builders future
538:31 - parameter
538:33 - like that
538:34 - all right
538:35 - command s
538:37 - on a hot restart
538:39 - and
538:40 - you can see nothing has really happened
538:42 - on the screen so
538:44 - you didn't have any difference you don't
538:46 - notice any difference basically
538:49 - so if everything really worked as it
538:51 - should
538:52 - um
538:55 - then what we need to do then is to
538:57 - um if everything is working as expected
539:00 - then we should be able to register users
539:01 - so what i'm going to do here is i'm
539:02 - going to provide the exact same user
539:07 - already registered and then say register
539:11 - and you'll see now we get an error
539:13 - let's see if i can show you there and it
539:15 - says the error is firebase auth email
539:17 - already in use the email or the email
539:19 - address is already in use by another
539:22 - account
539:23 - and that is this part which i'm gonna
539:25 - bring the caption up for you
539:29 - so
539:31 - we've also talked about that
539:36 - all right
539:37 - so
539:38 - the next topic that i want to talk about
539:40 - before we close off and round off this
539:42 - uh chapter
539:45 - is connection states you see
539:47 - we told future builder to perform a
539:49 - future
539:50 - the future was firebase initialize app
539:53 - okay this thing
539:54 - now if you look at the builder what
539:56 - we're returning from it right now is a
539:58 - column but we're completely ignoring the
540:00 - parameters that are coming in here
540:02 - the second parameter that gets passed
540:03 - your builder is something called a
540:05 - snapshot of data type async snapshot as
540:07 - you can see there
540:09 - an async snapshot of an object is the
540:11 - state of that object right now okay
540:14 - so and that object itself is actually
540:16 - the result of your future in this case
540:19 - firebase app so
540:21 - it's just that
540:22 - it didn't understand that this snapshot
540:24 - is an async snapshot of your firebase
540:26 - app but that's okay we don't actually
540:28 - need the firebase app in the snapshot
540:30 - however one thing that you do need in
540:32 - this snapshot is its state you see a
540:36 - future has a start point it has a line
540:39 - where it processes its information and
540:42 - it has an end point it either ends
540:45 - successfully or it fails now the
540:48 - snapshot is your way of getting the
540:51 - results of your future whether it
540:54 - has it started is it processing is it
540:57 - done or did it fail so what we need to
541:00 - do in here as we're waiting for firebase
541:03 - initialize app to do its work we're
541:05 - gonna basically say uh we're loading
541:08 - just tell the user loading and as soon
541:11 - as the snapshot is done then we're gonna
541:12 - say that
541:14 - loading has finished
541:17 - so let's do that let's go in here and
541:20 - say
541:21 - switch
541:22 - snapshot
541:25 - i believe it's called
541:28 - connection state all right and then get
541:31 - help from visual studio code to complete
541:32 - this so i'm going to say add missing
541:34 - case clauses and you can see there are
541:35 - so many different cases
541:37 - right
541:39 - done waiting active and done
541:42 - all right so
541:44 - for
541:46 - none
541:47 - waiting let's let's just say everything
541:50 - else except for done we're gonna return
541:52 - like a
541:54 - text that just says loading so
541:57 - let's say in here we remove all of these
542:00 - okay
542:02 - in the done statement we say return this
542:04 - entire column
542:07 - all the way here
542:10 - right and then we don't need the break
542:13 - because we said return and then we're
542:15 - going to say default
542:17 - default is a special case which is not
542:20 - actually inside that enumeration but is
542:22 - a case that says everything else that i
542:24 - haven't handled and in this case we just
542:27 - say return text
542:30 - loading something like this as a
542:32 - constant okay
542:35 - so i'm gonna heart reload
542:37 - sorry hot restart and the two hours
542:39 - video this is happening so fast that
542:41 - we're not actually seeing the loading
542:42 - but at least we have handled the case
542:44 - that if for instance a user's connection
542:46 - is too slow or their device is too slow
542:49 - when the future has finished they will
542:52 - see this column i'm gonna actually fold
542:54 - it
542:54 - and if this feature hasn't finished yet
542:57 - it's not done then they will see this
542:58 - text offloading all right and by the way
543:00 - this is how you can actually fold and
543:02 - unfold things in visual studio code so
543:04 - fold
543:06 - fold like this unfold all right it's a
543:08 - great way of seeing more of your code so
543:13 - wow a lot of information this this video
543:16 - took an hour kind of like as i expected
543:18 - um
543:21 - so we now have a basic firebase setup
543:24 - we've done our initialization of the
543:26 - application of our firebase we talked
543:28 - about a lot of widgets actually we
543:29 - talked about column
543:31 - column we text talked about text future
543:34 - builder
543:36 - text field
543:37 - container
543:39 - god app bar so many things so
543:42 - this is a lot of content and if you
543:44 - didn't get all of it that's okay we're
543:46 - gonna talk more about these in the
543:48 - upcoming chapters
543:50 - but i strongly suggest that i mean if
543:52 - you're watching this course and if
543:55 - you're just watching it
543:57 - and
543:58 - if you're an advanced developer and
544:00 - you're watching that's completely fine
544:01 - but if you're if you're develop if
544:04 - you're not a developer or if you're a
544:06 - junior developer or someone who
544:09 - doesn't have so much experience with
544:10 - flutter development and you're really
544:12 - trying to learn everything i'm saying
544:14 - here please don't just watch this video
544:16 - go and do this yourself go and write
544:19 - this code pause the video as i'm talking
544:21 - i know i'll talk a little bit fast but
544:23 - that's just to save a little bit of time
544:25 - pause the video write the code as i
544:26 - write it test it as i test it and see
544:29 - the results for yourself because that's
544:30 - how you will learn not just by watching
544:32 - so
544:34 - great we've talked a lot about
544:36 - widgets and firebase configuration
544:40 - and in the next chapter we're going to
544:42 - talk about login screen and also email
544:45 - verification and also clean up our
544:47 - registration screen so without further
544:49 - ado let's just prepare yourself for the
544:51 - next chapter and i'll see you there
544:54 - hello and welcome to chapter 13 of this
544:56 - flutter course
544:58 - in this chapter we're going to talk
544:59 - about the login view in chapter
545:02 - 12 as i can see here
545:05 - sorry about that we talked about the
545:07 - registration flow and
545:10 - we actually talked about quite a lot of
545:11 - things which after after that i i
545:13 - thought maybe we need to kind of like go
545:15 - through them one more time just
545:18 - every now and then talk about those
545:20 - those little widgets that we talked
545:21 - about like a future builder center
545:24 - column text button and we talked also
545:26 - about um
545:28 - text field text editing controller so
545:30 - there were lots of components that we
545:32 - talked about but we got pretty much like
545:34 - a
545:34 - a simple registration flow working it
545:37 - wasn't really a flow actually it was
545:38 - just a simple registration screen
545:41 - i'm saying that it wasn't a flow because
545:43 - it was just a simple screen that didn't
545:45 - lean anywhere that's usually what is
545:47 - called the flow if you have a screen
545:48 - that leads somewhere
545:50 - now in this chapter we're going to talk
545:52 - about login the login view and we're
545:55 - also going to divide the logic that
545:56 - we've created in our current home page
545:59 - and put it into a registration view so
546:03 - we're by the end of this chapter we're
546:04 - gonna have two views one is for the
546:06 - registration the other one is for
546:09 - the login okay
546:11 - so as i've shown you here
546:14 - um we have those logic i mean the
546:16 - registration logic in place now we have
546:18 - to work on login but we also work a
546:20 - little bit on cleaning up the code
546:22 - because
546:23 - usually this i mean as you get more and
546:25 - more comfortable with software
546:26 - development you'll know that
546:28 - you will have like these flows of ideas
546:30 - and then you'll start coding and write
546:32 - your code and then you test it and then
546:34 - after a while you realize oh this got a
546:36 - little bit messy i have to refactor the
546:38 - code so that's what refactoring kind of
546:40 - means like you take what is already
546:42 - there and you kind of make it better
546:43 - make it cleaner more presentable so
546:46 - that's what we're also going to do in
546:47 - this chapter
546:50 - so the first thing we need to do is to
546:53 - create a stateful register view widget
546:55 - okay
546:56 - so as you can see here this will be used
546:58 - as
546:59 - the base of our register view
547:03 - so
547:04 - let me go and bring some stuff that
547:06 - we're going to need in this chapter the
547:08 - first one is my scr
547:11 - i bring it to the screen so you'll see
547:13 - it as well
547:14 - and scr cpy we set it up in one of the
547:16 - previous chapters so you should be
547:18 - comfortable with that already
547:20 - um
547:21 - i'm going to go to go to our app here
547:23 - which is the register view that we
547:25 - created gonna bring my face to the right
547:27 - so we'll see a bit more of the content
547:29 - on the screen
547:30 - and then i'm also going to bring up
547:33 - visual studio code which is appearing on
547:36 - another screen right now but i'll bring
547:38 - it up here so you'll see as well
547:40 - i'm going to increase the size a little
547:42 - bit as well so it becomes
547:44 - easier to see
547:46 - so this is where we lift things um
547:49 - let me bring up
547:51 - and do the screen like this so this is
547:53 - where we live things we have a home page
547:55 - which at the moment is the register view
547:57 - okay but we need to create a register
548:00 - view like not just a home page it's
548:03 - called the home page so
548:05 - and since we need a stateful widget
548:07 - we're going to use a shortcut in visual
548:09 - studio code to create a stateful widget
548:10 - for us and that is with s t f as in
548:13 - state full so if you want to create a
548:16 - stateless widget you'd say stl okay
548:19 - so stf
548:21 - and in here we're going to call it what
548:23 - should we say register view like that
548:27 - all right
548:29 - so
548:30 - this will be as i've mentioned here this
548:33 - will be the base
548:35 - of our
548:39 - this will be the base of our
548:41 - registration view all the code for
548:43 - register will
548:44 - appear here i'm sorry that i'm looking
548:47 - here just to make sure
548:48 - that i'm basically
548:50 - going through my notes i have very
548:52 - detailed notes here and just making sure
548:53 - that you get all the information that i
548:54 - plan for you to get so if you see me
548:56 - looking here it's just because i'm
548:57 - looking at the notes to ensure that
548:59 - um so now that we've created register
549:01 - view at the moment it doesn't have
549:02 - anything so it's just a container and
549:04 - the default color for containers and
549:06 - background is black so
549:09 - let's go to our register view here
549:11 - so let's go to our main function here
549:13 - and as you can see at the moment we're
549:14 - returning home page as the home and what
549:17 - we're going to do here is just to say
549:18 - instead of that return register view
549:21 - okay
549:22 - and that is it's very possible we will
549:24 - get a problem here and you can see
549:26 - nothing is changing because i'm changing
549:28 - something inside the main and that isn't
549:30 - affected really by a hot reload
549:34 - so we have to hot restart so i'm gonna
549:36 - go how to restart here
549:38 - and you can see now the screen is black
549:39 - so
549:40 - um
549:41 - that part is basically done
549:45 - so what we'll have to do here now is to
549:49 - rename our home page to our login view
549:51 - actually so we have a new registration
549:54 - view which we're going to write the code
549:56 - for or actually place the code from the
549:58 - previous home page into register view
550:00 - and we also need the home page to be
550:02 - renamed so it's very some i mean there's
550:05 - lots of renaming putting things here and
550:07 - there but we're just playing with some
550:09 - names basically here so
550:10 - the next thing you need to do is to go
550:12 - to your home page which is here
550:14 - and rename it one way to do that visual
550:16 - studio code is to right click on it and
550:18 - just say rename symbol or i believe it's
550:21 - also
550:22 - command f2
550:25 - or actually for me it's f2 if two does
550:28 - the renaming but on a macbook pro for
550:30 - instance you don't you can't just press
550:32 - f2 because f2 has another function
550:34 - so what you'll need to do is to press
550:37 - function keyboard keep key on your
550:39 - keyboard and then press f2 that will
550:41 - bring up the rename dialog or you could
550:43 - just right click here and just say
550:45 - rename symbol which does the same thing
550:47 - so rename your home page to login view
550:50 - okay
550:53 - all right so we have login view here now
550:56 - um i'm gonna take it that we've done the
550:58 - rename
551:00 - um you see
551:02 - right now all we've been doing here is
551:04 - just to like write our code write
551:06 - everything in main dart but this is this
551:08 - is not a not the right way of doing
551:11 - things especially as your projects get
551:13 - bigger you need to make sure that you're
551:15 - you're taking the responsibility to also
551:17 - make sure that your code is readable and
551:19 - the structure of your project is
551:21 - understandable by others who may also be
551:22 - working on the same project now chances
551:25 - are that if you're watching this course
551:27 - that you will be the only person working
551:29 - on the source code so you won't have
551:31 - anybody else looking at your code
551:34 - even though
551:35 - that you may be the only person looking
551:37 - at the code and working with it you
551:39 - still will need to from time and time
551:42 - come back to the project fix some stuff
551:44 - add some stuff remove some stuff so
551:48 - even if you're the only person working
551:49 - with it you will need a clean
551:53 - source code to look at so if you come
551:55 - back to the source code after a month
551:56 - and you start to add more and more stuff
551:58 - to this main dart file after a while it
552:00 - will just get out of control so
552:02 - you'll need to also do refactoring on
552:04 - your code just to ensure that it is in a
552:06 - clean state so
552:07 - what we're going to do is to bring up
552:09 - our project browser here
552:11 - as you can see we're inside lib and then
552:13 - there's a file called main dart
552:15 - what we need to do here is
552:18 - to move our login view into its own file
552:21 - and you can see here i've written that
552:23 - we're going to move it into lib views
552:25 - login view this file doesn't exist at
552:27 - the moment so you'll need to create it
552:30 - what you'll do here i mean in visual
552:32 - studio code there's a great trick that
552:34 - you can do that it can create a file on
552:36 - all the intermediate
552:38 - folders as well so instead of going here
552:41 - and say new folder to create this views
552:44 - folder and then inside there i create a
552:46 - login view what you'll need to do just
552:48 - say new file
552:50 - and then type the entire path in there
552:52 - so just say
552:54 - views and then slash login view dot dart
552:57 - and this will create the views folder
552:59 - for you so it's great
553:03 - um
553:04 - so what i'll need to do here is to
553:07 - take our login views code as you can see
553:09 - here
553:12 - as we had here class login view and then
553:15 - bring all that code into this new login
553:18 - view file that we just created okay so
553:20 - i'm gonna get this out of the way
553:22 - here and just
553:23 - paste it
553:24 - all right and that's okay we're getting
553:26 - a lot of errors here and the reason
553:28 - behind that is i mean we haven't talked
553:31 - about import statements so much before
553:33 - but import statement is
553:35 - a way for you as a programmer to bring
553:38 - in code written by others
553:40 - whether it is the flutter team at google
553:42 - or whether it is a third party
553:44 - third-party dependency
553:46 - and tell your
553:48 - flutter
553:49 - project
553:50 - where those pieces of code are and at
553:53 - the moment
553:54 - i mean if you're not coming from a
553:55 - software engineering background you're
553:56 - not familiar with imports
553:58 - this is um i mean
554:00 - the closest analogy that i can find is
554:03 - as if for instance in figma you've
554:05 - created
554:06 - um
554:07 - you're trying to create an instance of a
554:10 - design that you've already created but
554:11 - figment doesn't know where that instance
554:12 - is so you'll say oh here's a copy of the
554:15 - button instance
554:17 - and then figma is like oh where can i
554:18 - find that button you haven't even
554:20 - created it so then you need to first go
554:22 - create that button or drag it in from
554:24 - another project and put it in your
554:26 - components
554:27 - page and then you can create an instance
554:30 - of it so
554:31 - if you're not into design and
554:34 - figma you may not understand what i just
554:35 - said but
554:37 - what i'm trying to do is just to be as
554:38 - inclusive as possible in this course to
554:40 - make sure anybody who's following this
554:41 - course will
554:43 - try to at least understand bits and
554:45 - pieces of what i'm saying
554:47 - so
554:48 - going back to import what we need to do
554:50 - now is to tell flutter where those
554:52 - pieces of highlighted code are and one
554:55 - thing to do in visual studio code which
554:57 - can help you greatly if you're trying to
554:59 - go around this
555:01 - writing things by hand is just to do
555:03 - command on mac or control on linux and
555:07 - windows hold down command or control
555:09 - depending on your operating system and
555:10 - press dot
555:12 - then you will see suggestions here as
555:14 - where those components those missing
555:16 - components may be placed and what you'll
555:19 - need to do here is just to import
555:20 - package flutter material because that's
555:23 - where these components that we're using
555:25 - are actually placed so oops
555:28 - i managed to click the wrong wrong
555:31 - option there so material boom
555:34 - all right i think now almost everything
555:36 - has disappeared all almost every error
555:39 - has disappeared except for these
555:41 - firebase errors so
555:42 - let's go and
555:45 - let's see
555:46 - so let's go
555:48 - in there
555:49 - and say now firebase core
555:52 - import that
555:54 - and also here we need to import minors
555:57 - firebase options okay
555:59 - so i think everything basically is
556:01 - disappeared there's also firebase auth
556:04 - import that as well
556:05 - alright so we're good to go now on this
556:07 - login view however remember
556:11 - this login views code really is not
556:13 - login view i mean if you remember the
556:16 - code that we've written in the previous
556:17 - chapter
556:18 - this login view at the moment it says
556:21 - log view but all it does is register do
556:23 - you remember that we have the text field
556:25 - and even the button that says register
556:27 - so
556:29 - what we need to do now is to
556:31 - drag the code as you can see here from
556:34 - the login view here
556:36 - we need to kind of bring it into the
556:37 - register view okay and our register view
556:40 - at the moment is here you see
556:43 - there
556:44 - so let's go and try to do that a little
556:47 - bit with care okay so grab all this code
556:50 - that is here in the login view here
556:52 - there
556:53 - get dispose in its state
556:56 - and also grab your email and password
556:59 - and member variables
557:01 - from here and
557:04 - cut them
557:06 - so i'm gonna go then in here in the
557:08 - register view state
557:10 - then paste those right before the build
557:13 - function so there we go okay
557:16 - go back to login view dart and you can
557:19 - see that there is a build function here
557:21 - here
557:23 - and
557:24 - i'm going to literally just grab that
557:27 - entire build function including the
557:28 - override
557:30 - and
557:31 - as i can see here the build function
557:33 - ends right there and i'm gonna cut that
557:36 - also okay and i'm gonna go here and
557:39 - replace this override on the um
557:43 - on the what is it called register view
557:45 - and paste that one from before here okay
557:48 - so what all we did here is we made sure
557:50 - that the register view
557:53 - it is indeed the register view and the
557:55 - login view is empty at the moment so
557:57 - what you'll need to do you see there's
557:58 - an error here that says that okay you
558:00 - have a stateful widget for login but it
558:03 - doesn't have any build function
558:06 - so you'll now need to create that build
558:08 - function and of course you could do it
558:10 - by hand
558:13 - but
558:14 - it's i mean
558:16 - it's not really
558:17 - it's not really that
558:19 - good of an idea to
558:23 - write all that code by hand of course in
558:24 - the beginning you may say that oh well i
558:26 - just want to learn the best way to learn
558:28 - is to type and i completely understand
558:30 - that but there are some things like
558:31 - there are limits i also believe like
558:33 - once you've done it once or twice you'll
558:35 - kind of get bored of doing that or
558:36 - you'll get tired of doing that so i
558:38 - actually suggest that for these
558:40 - functions that you're overriding the
558:41 - best way is actually get your editor
558:43 - text editor or ide to complete these
558:46 - things for you so i'm going to go on
558:47 - this error and just say command dot on
558:50 - mac and control dot on linux and windows
558:52 - and say create one missing override okay
558:55 - and in here we just say return
559:00 - okay
559:01 - so that's our login view and you can see
559:04 - here
559:05 - now we have
559:06 - a register view
559:08 - that is right here and then we also have
559:11 - a login view all right
559:14 - so
559:16 - let's go then
559:18 - in our main dart file here i can see
559:20 - that there is a register and let's just
559:22 - actually restart this
559:25 - hot restart okay so we have a register
559:28 - and
559:29 - our login view is completely empty so
559:33 - now um
559:36 - what we need to do basically is kind of
559:38 - like um
559:41 - it's kind of work on our login view
559:43 - because this is this is like the goal of
559:45 - this chapter
559:46 - we need to have a login view and up
559:49 - until this point what we've been doing
559:50 - is kind of like create a register view
559:52 - with all the code in it a separate login
559:54 - view
559:55 - which was our previously
559:57 - previously created registry so
559:59 - i mean this is all a lot of talk just to
560:01 - say that we have a registered view
560:03 - but we don't have a login view and we
560:05 - need to work on login views so
560:06 - if you remember um
560:08 - wow i mean you don't actually have to
560:10 - remember you can look at it here the
560:11 - register view has two fields enter your
560:13 - email here and for your password here
560:15 - and
560:16 - this is this their register v and login
560:19 - are very similar to each other what
560:21 - register view does differently is that
560:22 - it creates this it basically does a call
560:25 - to firebase that says
560:27 - create user with email and password
560:30 - but if you think about it everything
560:32 - else is very similar
560:34 - sorry about that
560:36 - so you need to create you need to make
560:38 - sure in both of them that firebase is
560:39 - initialized
560:41 - you will have two text fields email
560:43 - password and you will have a button one
560:46 - for register and for one for login
560:49 - so
560:50 - what we could do to be honest with you
560:51 - is to now go and copy this code that we
560:55 - got from our login view
560:57 - okay that happens i actually forgot that
561:00 - so let's go and copy this code again
561:02 - from here
561:04 - literally get grab everything from there
561:06 - and put it in our login view like that
561:09 - and change this register button to log
561:11 - in
561:12 - so now we have two copies of the same
561:15 - view basically once it's registered the
561:16 - other one says log in all right
561:19 - so
561:21 - and what we could do is now go to our
561:23 - main dart file here
561:25 - and instead of returning the register
561:27 - view we could just return the login view
561:29 - because we want to work on the login
561:31 - view now okay we have a user registered
561:34 - and now we need to work on login and as
561:37 - a side note
561:38 - if you follow the previous chapter
561:40 - you'll you'll know that we actually did
561:42 - register a a valid user with firebase
561:47 - and
561:48 - what you could do is to go to your
561:50 - firebase console
561:52 - as we could do now just an ad hoc i
561:54 - hadn't planned for this
561:56 - but what we could do say
561:57 - console.firebasegoggle.com
561:59 - ensure that you're logged in with your
562:01 - account
562:02 - then i'm going to go to this uh project
562:05 - that we created mynotes flutter project
562:07 - go in there and then go into
562:09 - authentication and you can actually then
562:12 - see the user that you created
562:16 - using the flutter application that
562:18 - you're actually working on so when you
562:20 - call this function in your in your
562:23 - register view this function
562:25 - firebase os instance create user with
562:28 - email and password that user was indeed
562:30 - created in the firebase console so here
562:33 - you have a user you could also disable
562:35 - this user and do other things but we're
562:37 - just going to leave it like that for now
562:39 - okay
562:41 - so what you need to do now is instead of
562:43 - register view tell your home page to
562:45 - render the login view and you could just
562:47 - type login view
562:49 - and if you just
562:51 - type a login view like that you will get
562:53 - an error of course because login view
562:55 - isn't in scope but i believe visual
562:57 - studio code could actually help with
562:59 - that because you see we haven't imported
563:01 - login view at all so
563:03 - this main dart file doesn't know what
563:05 - login view is
563:07 - exactly the same thing happened here do
563:09 - you remember if we didn't have these
563:11 - imports we got lots of errors saying
563:12 - that they i don't know where this class
563:14 - is so the same thing is happening in
563:17 - this main dart file all right so i
563:19 - believe in visual studio code now i'm
563:21 - kind of improvising but i think if you
563:23 - set login view and just press enter boom
563:26 - it does an import automatically for you
563:29 - and let's see where it is here you see
563:32 - but if you're not comfortable doing that
563:34 - just type login view
563:36 - by hand and do the same thing i showed
563:38 - you before just command dot on mac or
563:40 - controlled up in windows and linux and
563:42 - say import okay so it's going to import
563:45 - it for you
563:47 - now we have the login view and if i
563:49 - press command s or actually we have to
563:51 - do a hot restart
563:54 - you see now there is a login button
563:56 - right here okay
563:59 - so what we'll need to do is as you can
564:01 - see in the caption now that we're
564:03 - working on logging the login view go to
564:05 - your login view
564:07 - and go here where the button is pressed
564:09 - you see text button unpressed
564:11 - what we'll need to do here is to
564:14 - call the a new function on our firebase
564:17 - auth instance instead of create user
564:20 - with email and password we're going to
564:21 - say firebase auth
564:23 - got instance
564:26 - but sign in with email and password and
564:30 - you can see the function signature is
564:31 - very similar to create user with email
564:33 - and password in that it takes two
564:35 - parameters namely email and password
564:38 - both of type string and then what it
564:40 - does return in fact is user credential
564:44 - and do you remember create user with
564:46 - email and password also return user
564:48 - credentials so
564:49 - it's very simple to switch between login
564:52 - and register in that in that sense so
564:55 - grab the sign in with email and password
564:57 - name
564:58 - that's the only thing we're interested
564:59 - in and just paste it here instead of
565:01 - create user okay
565:03 - just gonna save that
565:06 - some reason my
565:08 - scrcpy crashed and i have no idea why
565:11 - so
565:12 - that's okay that wasn't planned what we
565:14 - could do is to go to our and i can see
565:16 - you see it got an aborted so what we
565:18 - could do is to go to our terminal and
565:21 - i'm gonna say scr cpy okay
565:25 - and i'm going to bring it to the screen
565:26 - here so
565:28 - and also if you're if you noticed here
565:31 - we have a login button but the title
565:33 - here still says register so let's go and
565:36 - fix that let's go into the app bar and
565:38 - just say login
565:40 - all right
565:42 - and actually problem is i can also see
565:46 - that my
565:47 - as scrcpy crash also the running of this
565:51 - process this application on that android
565:54 - phone also crashed so there is i mean
565:56 - the flutter instance of this project
565:58 - isn't really running at the moment so
565:59 - what i'll have to do is to go to main
566:01 - dart and say run without debugging so
566:05 - and it's now launching doing a gradle
566:07 - build gradle remember from the previous
566:09 - chapters is for android
566:12 - and if it's using xcode it is for ios
566:14 - all right so
566:16 - it's doing the greater build so if
566:18 - everything goes according to the plan
566:20 - then we should get a login
566:23 - title up there and while this is doing
566:25 - its work i'm going to go to my notes and
566:27 - just ensure
566:28 - that i've talked about the things that i
566:30 - promise i'm going to talk
566:32 - about all right it's installing our
566:35 - application i'm gonna remove the widget
566:37 - inspector and now you can see we have a
566:39 - login
566:40 - on top and
566:42 - that is working as expected all right so
566:46 - as you can see here after the logging
566:48 - call here sign in with email and
566:50 - password we're doing a print
566:53 - now
566:54 - what we could do here is to
566:57 - enter some information of a user that
566:59 - doesn't exist okay so i'm just going to
567:01 - say my personal email
567:04 - and i'm going to say foo bar path
567:07 - and i'm then going to bring up the
567:08 - console here as you'll see the debug
567:10 - console clear it
567:12 - um
567:13 - and i'm going to actually remove
567:16 - or do something like this so you can see
567:18 - the debug console a little bit better in
567:20 - its entirety and i'm going to press the
567:22 - login button all right
567:25 - and then
567:26 - sorry about that
567:28 - so we have now um
567:31 - the next thing that we need to handle as
567:33 - you can see
567:34 - uh
567:35 - i'll perhaps increase the size even more
567:38 - here so you'll see it better
567:40 - when i press the login button
567:43 - excuse me
567:44 - using a user
567:47 - that doesn't exist meaning that we
567:49 - haven't registered that user then we got
567:52 - an error here that says firebase off
567:54 - user not found and that that makes sense
567:57 - actually completely because
567:59 - the
568:00 - we haven't actually done any
568:02 - registration for this user okay
568:05 - so
568:06 - what we could hear what we could do here
568:08 - is to go in
568:11 - here and i'm gonna bring things back up
568:14 - kind of the way they were
568:16 - here
568:18 - all right so
568:19 - here we're recalling this function uh
568:22 - let me decrease the size because it's
568:24 - absolutely ginormous
568:26 - in here
568:28 - signing with email and password
568:29 - um
568:31 - we need to handle
568:32 - a thing called an exception and i don't
568:35 - think we talked about exceptions to be
568:37 - honest with you while i was i was
568:38 - teaching you about dart if you know
568:40 - about exceptions you could just skip
568:42 - through kind of skim through this little
568:44 - bit of the video but if you're if you're
568:46 - not a software development developer
568:48 - from before or software engineer then
568:51 - you may not know what an exception is an
568:52 - exception is when
568:54 - things go wrong and you haven't kind of
568:57 - thought about those things from the
568:58 - beginning so as you can as you
569:02 - for instance if you're if you're working
569:04 - with
569:05 - if you're a software if you're a
569:07 - designer or a product owner
569:09 - haven't done software development before
569:11 - you may have also used other pieces of
569:14 - software and sometimes software crashes
569:16 - just like scr cpy just crashed a few
569:18 - minutes ago that is perhaps
569:21 - probably
569:22 - an exception or an error that the
569:24 - software developers who created scrcpy
569:26 - hadn't counted with so they hadn't
569:29 - counted with
569:30 - that
569:31 - an error might occur in this scenario
569:33 - for instance so
569:35 - not having handled that the application
569:37 - crashes it means that an exception
569:39 - happens and error happens that the
569:41 - developers of that program hadn't
569:43 - accounted for so
569:45 - and this is an exception that you're
569:46 - seeing here in your flutter application
569:48 - so firebase is saying that you're trying
569:50 - to log in with a user that doesn't exist
569:52 - so what do you want to do with it i
569:53 - can't continue after this i don't know
569:54 - what to do so
569:56 - the way to handle exceptions in
569:59 - flutter or in dart actually is using a
570:02 - try catch block so i'm going to bring it
570:04 - here put the entire code for your user
570:07 - credential creation in the try statement
570:09 - as you can see here and then go in here
570:11 - and say catch b
570:14 - in parenthesis for now
570:16 - all right just like that
570:18 - and then i'm just gonna say something
570:20 - that happened
570:22 - in single codes
570:24 - all right so you can see here now we
570:26 - have a try block as indicated here with
570:28 - this line it's all the way from on top
570:31 - to here and then we have a catch block
570:33 - the way try catch works is that it as
570:35 - its name indicates it tries to do the
570:37 - work that you're saying it needs to be
570:39 - done in the trial block should anything
570:42 - bad happen it will go to various catch
570:45 - statements that you can't then place
570:47 - after that try okay
570:49 - so
570:50 - as you saw in the logs this error
570:54 - let's see if we can find it here
570:57 - it was of type firebase auth uh let me
571:01 - see on handle exception but we didn't
571:03 - actually get its type unfortunately so
571:07 - what we could do here is
571:09 - print something bad happen and then
571:10 - print the error itself okay
571:14 - so i'm just going to say clear the logs
571:17 - command s
571:19 - and then i'm going to press the login
571:20 - again
571:22 - sorry here and you can see now it says
571:24 - something bad happened firebase auth
571:27 - user not found and then some information
571:31 - and
571:31 - we could actually say print e
571:35 - run time type and doing that will
571:38 - actually give you information about
571:41 - which class of exception this is because
571:44 - you see
571:45 - as you're working with flutter and as
571:47 - you're working with software generally
571:49 - you're creating software you're writing
571:51 - code different types of exceptions
571:52 - happen and these exceptions have their
571:54 - own identity every exception has its own
571:57 - identity it's the series of classes or
572:00 - different places that it may come from
572:02 - in dart you can pretty much
572:04 - anything can become an error even a text
572:07 - can become an error or enum can become
572:09 - an error so
572:11 - when you come to this catch block as
572:12 - i'll move my mouse over it you can see
572:14 - that here it says i don't even know what
572:16 - this is this is an object so
572:18 - it could be anything
572:20 - but you are actually in the in your
572:22 - cache block you're mostly interested in
572:25 - exceptions that might occur from
572:26 - firebase so
572:28 - since we don't really know what this
572:29 - type is we're gonna
572:31 - print it out to the console
572:33 - and we're gonna have a look at what type
572:35 - it is so let me do
572:37 - a little bit of them
572:39 - how should i do this
572:41 - is this a little bit better arrangement
572:43 - perhaps so you can see what happens yeah
572:46 - perhaps then what i'm going to do
572:48 - command this hot reload
572:50 - and go here press the login button and
572:53 - you'll see that the type of that
572:55 - exception is firebase auth exception all
572:58 - right
572:59 - so what we need to do now is to go to
573:01 - our code
573:03 - and
573:04 - handle
573:05 - firebase auth exceptions not just any
573:08 - exception as we're doing here
573:10 - because we're catching any exception so
573:13 - what we want to do is to catch firebase
573:15 - off exceptions in our cache block all
573:17 - right and a way to do that is i'm going
573:19 - to do this now
573:22 - and i'm going to do like we were doing
573:25 - before get rid of the consoles to see
573:27 - more of the code
573:28 - so what you could do you can have
573:30 - specialized cache blocks in dart and
573:32 - that means that you are not catching
573:35 - everything but you tell dark that look
573:37 - in this particular catch block i'm
573:40 - interested only in exceptions of this
573:42 - type and
573:43 - as you might have guessed that already a
573:45 - try block can be accompanied by more
573:49 - than one catch block
573:51 - this cache block that you can see here
573:53 - is called catch all it catches every
573:56 - exception that might occur in the
573:58 - running of the code inside the try block
574:01 - however
574:02 - if you're interested in specific
574:04 - exceptions in this case firebase auth
574:06 - exception i believe oh i've cleared it
574:09 - but i think it was firebase off
574:11 - exception i'm going to run it again
574:13 - go to the login button and you can see
574:15 - it says firebase off exception so we're
574:17 - interested specifically in that so let's
574:18 - go and say tell dart that we're
574:21 - interested in that i'm just i'm going to
574:22 - say on
574:23 - firebase off exception
574:26 - catch
574:28 - e
574:28 - all right
574:29 - so this is the format of catching
574:32 - specific exceptions you prefix your
574:34 - catch statement with the keyword on and
574:37 - then you write the type the runtime type
574:39 - or the class name of the type of
574:41 - exception that you're interested in
574:43 - handling all right
574:45 - so in this case we said on firebase off
574:47 - the exception catchy and we're gonna
574:49 - remove this catch from there
574:51 - and we're gonna go here
574:54 - actually i don't even have to cut and
574:55 - what you'll need to do in here just say
574:57 - print e code
574:59 - you see
575:01 - save this before i before i tell you
575:03 - what i was going to say after uc
575:05 - let's test this let's say login and
575:08 - you'll see that the code is used or not
575:10 - found
575:11 - so
575:12 - now that we told dark that we're
575:14 - specializing in catching exceptions of
575:16 - firebase auth exception then this e is
575:19 - not an object anymore really let's see
575:22 - if we can get some help now it says okay
575:25 - if i can catch exceptions of firebase
575:27 - auth exception then i know that the
575:28 - error that i can pass to you is of that
575:31 - type
575:32 - now that you catching firebase
575:34 - authexception you can go to this code
575:36 - and you see there are different
575:37 - properties that you can read from
575:38 - message code email credential et cetera
575:40 - et cetera okay
575:41 - so we're now interested in the code
575:45 - so
575:46 - as the caption right here shows at the
575:48 - bottom of the screen you'll see that we
575:49 - need to handle e-code equal to user not
575:52 - found all right so let's say if e code
575:56 - is equal to user not found
576:00 - then let's say print
576:01 - user not found like that else e code oh
576:06 - sorry actually we're not going to do it
576:07 - outside kind of like running ahead of
576:08 - myself a little bit there
576:11 - so
576:13 - we have now um
576:15 - e-code user not found then we're just
576:17 - saying print user not found okay i'm
576:18 - going to clear the logs here go back to
576:21 - see our cpy here and i'm just gonna say
576:23 - login and you'll see all it does it says
576:26 - user not found all right
576:29 - so
576:31 - so that's that we haven't really i mean
576:32 - the caption at the bottom left of the
576:34 - screen says handle but depending on your
576:37 - um background you may
576:40 - expect handle to do different things for
576:42 - a software for a seasoned software
576:43 - engineer handle may actually mean that
576:45 - well do something about it okay tell him
576:48 - tell the user like oh i couldn't log in
576:50 - the user couldn't be found or
576:52 - whatever reason just show something to
576:54 - the user and we could do that but at the
576:55 - moment we don't have the capacity to do
576:57 - that we don't really know how to handle
576:59 - that so
577:00 - what we need to do then is to simply say
577:04 - print so we just print it to the screen
577:06 - so this is our handling for now okay
577:08 - it's very simple all it does is just
577:10 - ensures that no exception is thrown to
577:12 - the user's face or that the application
577:14 - doesn't crash
577:18 - okay that was a lot of information um
577:22 - now as the caption here shows in the
577:23 - login view we also need to handle wrong
577:25 - password
577:27 - and i mean as you can see here the e
577:30 - code is a string so anything here could
577:33 - happen that could be defined by string
577:37 - and one other
577:38 - excuse me
577:40 - one of those errors actually is wrong
577:43 - password so let's test that
577:45 - in here let's say else if if the code is
577:48 - not user not found just print
577:52 - something else happened
577:54 - and then print
577:55 - the errors code to the screen okay
577:59 - so i'm going to save this
578:02 - and i'm going to then go here and then
578:05 - actually change this email to an
578:07 - existing email which was the one that i
578:09 - registered
578:11 - and password i believe was foobar or
578:13 - something
578:14 - clickfu bar maybe
578:16 - and i'm going to say login and you can
578:18 - see here it says now something else
578:20 - happened wrong password so
578:23 - that could that could kind of mean that
578:25 - well yeah actually that isn't my
578:26 - password this foo bar was in my password
578:28 - i don't even remember what it was maybe
578:29 - it was full bar bass
578:31 - but that is great it says something else
578:33 - happen an e code and that's exactly what
578:35 - we have to
578:37 - sorry about that
578:38 - and that is exactly what we need to
578:39 - handle here um wrong password so in your
578:43 - else statement say else if
578:46 - e code
578:48 - is
578:49 - wrong password
578:52 - then we're going to say print
578:54 - wrong password
578:56 - okay
578:58 - man is
578:59 - so that's there clear the logs i'm going
579:02 - to say log in and you'll see the message
579:05 - wrong password
579:07 - printed to the screen
579:09 - all right
579:11 - a lot of work
579:13 - we've done quite a lot of work now in
579:15 - the login view but we haven't really put
579:17 - much energy into the register view you
579:19 - see they're very similar in that they do
579:22 - almost the same api calls with the email
579:24 - and password ones that sign in the other
579:25 - ones that's register
579:26 - however in if if we go to our main dart
579:29 - file you'll see in here in our register
579:32 - view we're just calling the api and kind
579:34 - of like hoping for the best there's no
579:36 - try catch statement here okay so what we
579:38 - could do is have a look at how we did it
579:40 - for login we put the api call inside the
579:43 - try block you see what we need to do is
579:45 - to go to main dart and for our register
579:48 - view
579:49 - here register view state do the same
579:51 - thing let's put this in a try block here
579:57 - okay
579:58 - and then just say catch or say on
580:01 - firebase off exception
580:05 - this is i mean i'm not going to explain
580:06 - this again because it's exactly what we
580:08 - did just in the login view
580:10 - i believe firebase authexception didn't
580:12 - really exist in this in this dart file
580:14 - before but that is what visual studio
580:17 - code helped me with as i typed it and
580:19 - pressed enter for auto completion
580:21 - then it must have been imported
580:23 - somewhere
580:25 - or it was probably part of firebase auth
580:28 - dart i believe actually so if i command
580:30 - click on it
580:31 - it goes to firebase auth so that's why i
580:34 - it probably didn't have to import
580:35 - anything because it was already imported
580:37 - as a part of firebase auth okay
580:42 - oh wow that was a lot of information
580:43 - also
580:45 - now that we're working on the register
580:46 - view let's go to our main
580:49 - dar main function here and since we're
580:51 - only seeing the login view let's switch
580:53 - this back to register view
580:56 - and command s but this is not going to
580:58 - change anything as you remember hot
580:59 - reload doesn't have an effect of any
581:01 - changes that you it doesn't have an
581:03 - effect on anything that you're changing
581:05 - the main function remember that you have
581:06 - to hot restart okay
581:08 - so hot restart now we're in the register
581:11 - view
581:13 - and we need to now handle wrong password
581:16 - uh actually
581:19 - no that's not the login sorry about that
581:21 - now we need to handle
581:24 - this weak password
581:26 - so
581:27 - as you're working with uh firebase zoom
581:30 - you will notice that it has its own set
581:32 - of security rules you also can override
581:35 - these security rules later for your
581:36 - server if you want to for instance you
581:38 - can expect or you can say all my users
581:40 - have to have passwords that are 18 um
581:44 - characters long and a mixture of digits
581:46 - and alpha numerical values etcetera
581:48 - etcetera but
581:49 - there are some default security rules
581:52 - set up on firebase
581:53 - for credentials that every user needs to
581:56 - abide by so let's actually have a look
581:58 - at that and
582:00 - let's
582:01 - do a print here and i'm going to say
582:03 - print e
582:05 - code okay
582:07 - and as you'll see in the caption as you
582:08 - are seeing in the caption there is an e
582:11 - code of equal to weak password that
582:13 - needs to be handled so i'm going to go
582:14 - here try to register user with my
582:17 - personal email and the password of a b
582:20 - c all right then i'm going to bring up
582:22 - the console clear the console a little
582:23 - bit
582:24 - i'm going to do this so you'll see it a
582:25 - little bit better
582:27 - then i'm gonna try to register with a
582:29 - password of abc press register
582:34 - what happened
582:35 - here you see the code was weak password
582:38 - and as you'll expect yeah weak password
582:40 - that is too weak a password to even be
582:43 - used anywhere so
582:45 - um
582:48 - so what we need to do here is to handle
582:50 - the weak password
582:52 - error basically i'm gonna take in my
582:55 - notes that i've talked about some other
582:57 - topics of login
582:59 - all right so we'll handle weak password
583:02 - the way we handle the other
583:04 - errors in login view
583:06 - then say if e code
583:09 - is equal to
583:10 - weak password
583:14 - and let's just say print week password
583:17 - okay
583:19 - and we'll say
583:20 - um so that's that's that for now okay
583:23 - and i'm going to just bring up the um
583:28 - debug console again
583:30 - and press the register button one more
583:32 - time
583:32 - now you'll see the information let me
583:34 - bring it so you can actually see it
583:37 - yeah you can actually see it great you
583:38 - can see weak password being printed here
583:42 - all right so that was great
583:44 - now let's go let me bring the let make
583:46 - the screen a little bit bigger
583:48 - the next thing we have to handle
583:50 - is um in this register view as you can
583:53 - see in the caption here
583:56 - you can also get an error called email
583:58 - already in use so if you go to the else
584:00 - statement here again and print
584:02 - e
584:03 - if i try to register with the same email
584:05 - that i registered before
584:08 - this user already exists and if even if
584:10 - i have quite a good password for this
584:12 - user so i'm going to say fubar bass
584:16 - 1029.
584:18 - so we know that the error is not going
584:20 - to be the password like it's actually a
584:21 - good password well
584:23 - better than fubar baz at least and that
584:25 - or abc so i'm just going to say register
584:28 - and
584:31 - do we not get any value here or did i
584:32 - even press the register button
584:36 - is it really
584:37 - registering pixelity a b
584:39 - no i don't think so
584:40 - um
584:42 - oh i hadn't saved the file oops so yeah
584:46 - i haven't saved my changes i'm gonna say
584:48 - register
584:51 - oh now it says email already in use and
584:52 - that is exactly i mean that is pretty
584:54 - much what we have to handle right
584:55 - because we're printing e so
584:57 - um i didn't have to say oh no surprises
585:00 - there
585:01 - so let's handle email already and use so
585:05 - i'm going to copy this email already and
585:06 - use string just exactly as it's
585:08 - mentioned here
585:10 - and i'm going to go to else and say
585:12 - else if e code is equal to
585:15 - that string and then say uh email is
585:18 - already
585:20 - in use okay
585:22 - and then save it there
585:25 - clear the logs press the register button
585:27 - again you can see now it says email is
585:30 - already in use okay
585:34 - so
585:35 - um
585:36 - let me also have a little bit of a look
585:38 - at my notes
585:41 - um
585:44 - i can also i mean to be honest with you
585:46 - in the notes i don't see anywhere
585:48 - that we're really trying to handle
585:52 - uh these errors like actually doing
585:54 - something about them all right
585:58 - so
585:59 - perhaps a better thing
586:02 - to do would be
586:04 - to really like show a message or
586:07 - something to the user
586:09 - and i'm kind of wondering that right now
586:11 - like whether that's a good idea or a bad
586:13 - idea for this chapter and perhaps just
586:16 - doing a print will suffice to be honest
586:18 - with you
586:19 - not entirely sure about that so
586:22 - um let's leave it at that for now okay
586:26 - i'm also gonna go here and make sure
586:27 - that i'm not yeah i'm in do not disturb
586:30 - so let's leave it leave it at that email
586:32 - already use perfect okay let's leave it
586:34 - at that
586:36 - now the next thing that we have to
586:37 - handle
586:38 - it could also write a situation where
586:40 - the user tries to enter an invalid email
586:42 - all right so let's put an else statement
586:44 - here and say print
586:46 - um e code again
586:48 - save it
586:50 - let's go and remove this add sign so it
586:52 - becomes an invalid email and try to
586:55 - press the register button okay now you
586:57 - can see uh you can't actually see now
587:00 - you can see at the bottom in the logs it
587:02 - says invalid email and that is the code
587:05 - for that error so let's handle invalid
587:08 - email now all right
587:10 - so i'm going to go here and say else if
587:13 - e code we call to invalid email then
587:16 - we're going to say print invalid email
587:19 - entered all right and save it
587:22 - so clear the logs
587:24 - tap the register button and now you'll
587:26 - see invalid email entered okay
587:30 - so
587:31 - i mean that's really
587:33 - um all we have to do
587:35 - right now for our
587:38 - error handling and as we're going on i
587:40 - mean to be honest with you i still have
587:41 - a little bit of time to figure out
587:42 - whether we're really going to handle
587:44 - these things by and by that i mean like
587:46 - if we are
587:48 - if we need to display some some error to
587:50 - the user okay and we may need to do that
587:53 - but it is a little bit complicated like
587:56 - depending on how we want to handle it do
587:58 - we want to show like a message to the
587:59 - user do you want to show a toast to the
588:01 - user um
588:03 - or do we want to like display another
588:05 - screen to the user and that's kind of
588:06 - like unclear even to me right now so
588:09 - maybe we'll iron these things out then
588:10 - as we go on
588:12 - in in the upcoming chapters as well
588:16 - so
588:19 - now i can see here
588:21 - that login
588:24 - we've talked about that
588:26 - and what we need to do then
588:28 - in order to be able to
588:31 - carry on with the upcoming chapters
588:34 - is actually to make sure that we are
588:38 - logged in to the application you see
588:40 - we've worked on the register view we've
588:42 - worked on the login view
588:44 - we're trying like so many different
588:46 - combinations here to register new user
588:48 - login so i personally don't know at the
588:50 - moment whether
588:51 - this application firebase instance
588:54 - actually has a logged in user and if
588:56 - you're familiar with like python django
588:59 - or flask or if you're doing nodejs or
589:01 - whatever development like backend
589:02 - development
589:04 - you can be a logged in user but still
589:06 - end up being in a login view
589:09 - so if you send a login login user to a
589:12 - login view doesn't mean that the user
589:14 - isn't logged in
589:15 - instead it means well that user is
589:17 - logged in but may want to log in as a
589:19 - different user so that is the case in
589:22 - our application as well we have a
589:23 - register screen a login view but i
589:25 - personally don't know what the state of
589:27 - the application at the moment is are we
589:28 - logged in or are we not logged in
589:30 - because we're kind of like playing with
589:32 - different views here okay so that's very
589:34 - important now because in the
589:37 - next chapter i can see in chapter 14 we
589:40 - are going to work with
589:42 - um
589:43 - we're working on separating the app
589:45 - initialization from the login and
589:46 - register screens because you can see at
589:48 - the moment we have this future builder
589:51 - that is
589:52 - initializing firebase and it is doing
589:55 - lots of work comes with snapshots stay
589:57 - done blah blah and we're doing the exact
589:59 - same thing in two views login view and
590:01 - the register view so
590:03 - what we need to do is kind of like
590:04 - separate that logic
590:05 - and ensure that we display the correct
590:07 - view depending on yeah what the state of
590:09 - the application is and before we can
590:11 - then continue or start that chapter we
590:13 - kind of need to make sure that the user
590:15 - the current user is logged in all right
590:17 - so let's go to our um
590:22 - main dart here and login logged in views
590:24 - already displayed so i don't really you
590:27 - don't need to worry about this part
590:28 - import login view
590:30 - what you need to do now is to make sure
590:34 - that instead of register view we're
590:36 - displaying the login view
590:37 - and remember now we're saving something
590:39 - changing something in the main
590:42 - function so hot reload isn't going to
590:44 - work so you need to do hot restart
590:46 - so we'll get to that login view
590:50 - and let's then enter valid details here
590:53 - so i'm going to say pixelityab.gmail.com
590:55 - and i think the password was fubar best
590:58 - to be honest
591:00 - i'm going to press the login button
591:03 - all right and there we got the
591:06 - credentials for this user
591:09 - wow that was a lot of information and i
591:12 - understand that um
591:14 - so what we need to work on now i'm going
591:16 - to take some stuff in my notes
591:20 - is
591:21 - as i mentioned we need to for the next
591:23 - chapter i mean we're kind of done with
591:25 - this chapter to be honest we've talked a
591:27 - lot about like exception handling
591:28 - separated the login view from the
591:30 - register view but our register view is
591:32 - still in the main dart we're gonna we're
591:34 - gonna
591:35 - fix that soon
591:36 - but what you need to know to do before
591:39 - you continue with the next chapter and
591:40 - just ensure that you're displaying the
591:42 - login view to the user and that you're
591:44 - actually logging logging in with a valid
591:46 - username and password this ensures that
591:49 - the firebase instance that is running in
591:51 - this application right now is going to
591:53 - cache that information locally on ios is
591:56 - going to cache that information in a
591:58 - secure storage called keychain and on
592:01 - android i think it's called shared
592:02 - preferences or something like that
592:05 - so that information is going to be
592:06 - securely stored now on that telephone
592:09 - which for me is an android telephone
592:11 - right here and
592:13 - when i restart the application whenever
592:15 - if i like shut down my
592:17 - telephone restart the telephone the os
592:19 - come back up that information is already
592:21 - saved on that telephone so my user is
592:23 - logged in all right
592:25 - so just ensure that before you continue
592:27 - with the next chapter that you've
592:29 - registered the user first and that
592:31 - you've logged in with that user from
592:33 - your application so that information is
592:35 - cached inside the application all right
592:38 - good a lot of information
592:41 - in the next chapter
592:43 - we're going to separate the app
592:45 - initialization from the login and the
592:48 - register screens there are only a few
592:51 - steps that we have to do
592:53 - in that chapter
592:55 - so
592:58 - so i don't think that chapter is going
593:00 - to actually be so long
593:02 - so grab a cup of tea coffee whatever you
593:05 - want chocolate or whatever it is and
593:07 - i will see you in the next chapter
593:10 - hello and welcome to chapter number 14
593:13 - of our flutter course
593:14 - as you saw in the previous chapter we
593:16 - worked on the login view now we have a
593:19 - login view and a register view in place
593:21 - and what you also saw is that we did
593:24 - some very simple
593:25 - error handling for various scenarios
593:28 - such as
593:29 - uh email address already registered
593:32 - weak password um
593:34 - invalid email
593:36 - incorrect password or wrong password i
593:38 - think it was called so
593:40 - now we have two views in place
593:42 - um we have but we have two main issues
593:45 - to address here
593:47 - the
593:48 - registration or the register view that
593:50 - we created still lives
593:54 - in our
593:55 - main.dart file
593:58 - and the other issue is as the caption
594:00 - here displays is that the widgets are
594:02 - doing app initialization
594:04 - if you remember from the code
594:06 - there was this firebase initialization
594:09 - api
594:10 - invocation that we had to do and since
594:13 - the login view and the register view are
594:15 - very similar to each other they're both
594:17 - doing the
594:18 - initialization of firebase
594:21 - what we're going to do in this chapter
594:22 - is
594:24 - separate these um
594:26 - initializations and
594:28 - make them one that's that's the first
594:31 - first thing we need to do so we just
594:32 - have one initialization that's going to
594:34 - happen
594:35 - and what we're also going to do is to
594:36 - bring the register view in its own file
594:38 - so this this chapter is going to be a
594:40 - quick one unlike the other chapters and
594:42 - i think that's kind of refreshing to be
594:44 - honest with you otherwise all chapters
594:46 - are going to be very long and
594:47 - very detailed
594:49 - so
594:50 - with that said let's then um
594:55 - let's then
594:57 - start with the first thing we have to do
594:59 - which is
595:00 - basically to move the register view into
595:02 - views register view okay
595:04 - i'm going to see if i can bring up
595:05 - visual studio code um
595:08 - how we had left it before
595:10 - and i'm going to bring up scrcpy
595:14 - which
595:15 - is my android phone running our flutter
595:17 - application right now
595:19 - so let's do as the caption says here i'm
595:22 - going to make the screen a little bit
595:24 - bigger so you can see better
595:25 - then go to your project uh or explorer
595:28 - here visual studio core if you're using
595:30 - android studio you can go go to the
595:31 - navigator there as well there's a
595:32 - similar one in android studio or if
595:34 - you're using sublime that is exactly the
595:37 - same thing here on the left hand side
595:38 - you can see the project structure
595:40 - then go to lib and then views as we have
595:43 - the login view there let's create a view
595:45 - called register view so right click here
595:47 - and say new file and i'm going to say
595:49 - register mu dot dart
595:53 - okay so then we have to as the question
595:55 - says go back to our main dart file and
595:58 - grab this register view from here
596:01 - group all the register view including
596:03 - its register view state
596:06 - grab all of that
596:08 - cut it in mac you do it with command x
596:11 - and in windows and linux i think you do
596:12 - control x so
596:14 - um i cut that and i'm gonna then bring
596:16 - it into register view here
596:19 - as you saw in the previous chapter doing
596:21 - these things usually cause a lot of
596:22 - headache
596:23 - for
596:24 - for your editor because i mean it's not
596:27 - a headache for you because we can easily
596:29 - fix it for us it's not a problem but
596:30 - it's just the editor that doesn't
596:31 - understand where all these classes are
596:32 - located at so i i've explained this
596:35 - previously in
596:36 - the exact previous chapter before this
596:38 - so i'm not going to explain it again so
596:40 - let's say command dot in visual studio
596:42 - code and then say import material to fix
596:44 - all the stateful widget problems and all
596:46 - the things that all the classes are
596:48 - stored in material dart here in the
596:50 - flotter package okay
596:53 - then we have other problems such as
596:54 - firebase so
596:55 - command dot import firebase core to fix
596:58 - that command dot import firebase options
597:01 - here
597:02 - it's that problem and we will also have
597:05 - to import firebase off i believe and
597:08 - that is also fixed all right so now we
597:11 - have a register view here perfect
597:13 - and um
597:14 - if you see here in our main dart now
597:18 - there are lots of things that are
597:19 - imported which aren't which aren't
597:21 - needed anymore
597:23 - so let's remove those you can see these
597:25 - things are actually
597:28 - you may say okay well how do i find all
597:30 - these problems like there's lots of
597:32 - issues here but had i not come back to
597:33 - the main dart file i wouldn't have seen
597:35 - them and the way to fix that is to
597:37 - actually bring up your
597:39 - problems view here and you'll see that
597:42 - there are lots of problems stated that
597:44 - you can go go and fix those you see
597:47 - print statements are here and then
597:49 - unused imports which you can which you
597:52 - can clean up as well so
597:54 - that's how you can use the problems
597:55 - window
597:57 - i'm going to do that by hand now remove
597:59 - this and remove this so we have a clean
598:02 - void main function here all right i'm
598:04 - gonna do a hot restart just to make sure
598:06 - everything's working as expected
598:08 - then we have the login view here okay
598:12 - so the next thing we need to do now is
598:16 - as the notes i'm actually going to go to
598:18 - my notes and make sure that i have
598:20 - talked about the previous point
598:22 - so the next thing we need to do is to
598:23 - create a dedicated home page that does
598:26 - the app initialization and depending on
598:30 - whether the user is logged in or logged
598:32 - out or if the user is verified or not
598:34 - then it's going to display the correct
598:35 - widget on the screen okay so
598:38 - just to explain that a little bit more
598:40 - is that i mean you i can say that
598:42 - you see in your main function here that
598:45 - when your application run you it runs
598:47 - you're telling it to go to login view
598:48 - but why
598:49 - why are we saying go to login view
598:52 - why are we saying go to register view we
598:54 - have no logic at the moment that says
598:57 - are you logged in then show the login
598:59 - view or if you're not like me and show
599:01 - the registry so
599:02 - that's what we're going to do with our
599:04 - home page okay so imagine the home page
599:06 - kind of being the manager of the
599:08 - different routes that your application
599:10 - can manage so saying that oh if this
599:13 - condition then do this if that condition
599:15 - display the other screen so
599:18 - we need a home page and conveniently
599:20 - named is home page i mean lots of other
599:23 - people may try to call it something else
599:25 - like a route page or whatever
599:27 - but for now we're going to go with
599:29 - homepage because it's just so easy to
599:30 - understand for everyone so
599:32 - let's then go in here
599:35 - and say we want to have
599:37 - a stateless widget stl and we're going
599:40 - to call it home page okay and i'm gonna
599:42 - press escape after that so now we have a
599:44 - stateless widget called home page in our
599:46 - main dart file
599:50 - now
599:50 - what we need to do then after doing that
599:54 - we need to go in our main dart file and
599:57 - instead of saying login view let's just
599:59 - say home page okay and if i press
600:02 - command is remember this is not going to
600:03 - take any effect immediately because hot
600:05 - reload doesn't take into consideration
600:07 - it changes the main function here so you
600:09 - have to do a hot restart so you'll see
600:10 - black screen right now okay
600:12 - so
600:13 - that's that
600:16 - so
600:18 - what we need to do now is
600:20 - to
600:21 - basically have some scaffold in our
600:24 - homepage because we don't want to
600:25 - display just an empty screen to the user
600:27 - okay
600:28 - so
600:28 - let's go in here for our container
600:31 - instead say we return a scaffold
600:34 - talked about scaffold in previous
600:36 - chapters so i'm not going to explain
600:37 - that again
600:39 - and let's go and create an app bar with
600:42 - which we've also talked about
600:44 - title accounts text and say home page
600:48 - okay
600:50 - well command s in mac or control s in
600:53 - linux and windows to save this file and
600:55 - you'll see the changes
600:56 - took effect immediately
601:00 - all right so
601:02 - what do we need in the home page we said
601:04 - that the home page needs to initialize
601:07 - firebase it needs to first do that so
601:10 - that we can get rid of this code in both
601:12 - register view you see this code future
601:14 - builder firebase initialize app and then
601:16 - connection state done blah blah and also
601:19 - we have the exact same code in our login
601:21 - view so
601:22 - there's a lot of code to write in every
601:25 - view that we're gonna develop though
601:26 - this application isn't gonna have so
601:27 - many views maybe six seven views but
601:29 - still we don't wanna do initialize app
601:31 - in every view and do a future builder
601:34 - it's just a lot of code so that's what
601:36 - our
601:38 - homepage is gonna do okay
601:42 - so let's do that uh let's go and grab
601:46 - this code um
601:49 - excuse me
601:51 - let's grab this code with the future
601:53 - builder pretty much maybe the entire
601:55 - build function okay from our login view
601:58 - so go to your login view grab the entire
602:00 - build function until its end which is
602:03 - here this parenthesis okay ending
602:06 - parenthesis
602:07 - close your login view close your
602:08 - register view if you want to then go and
602:11 - replace the entire override of widget
602:13 - build in your home page
602:15 - with that code that you just cut or
602:18 - sorry copied from the login view paste
602:20 - it right here
602:22 - now we we don't want the home page to
602:24 - have any logic that has anything to do
602:26 - with
602:27 - um
602:29 - text fields this homepage is we're going
602:31 - to use it for something a lot more noble
602:33 - so you don't need all the text fields
602:37 - and
602:37 - and
602:38 - all of these columns and uh your text
602:41 - button so
602:42 - go to here where you're creating the
602:45 - column in connection state done
602:48 - and grab that code all the way from
602:50 - return so if i fold it you'll see that
602:53 - that is the entire return and i'm going
602:54 - to actually delete it
602:56 - oops it didn't delete the entire code
602:58 - okay so i'm going to do it by hand from
602:59 - the return
603:00 - all the way down here
603:03 - to where the
603:05 - column ends
603:07 - okay
603:09 - and instead of that column what we're
603:11 - gonna do
603:13 - is just return a text
603:15 - that says
603:18 - okay
603:20 - just like that so if firebase
603:22 - initialization is done it's just gonna
603:24 - say done and let's also change the text
603:26 - here and just call it home all right
603:28 - now that we've done that you can see we
603:30 - still have some problems with firebase
603:31 - not being imported because i deleted
603:33 - those um
603:34 - um
603:35 - imports previously so i'm gonna fix that
603:37 - now command dot on firebase and say
603:39 - import that and command dot on default
603:42 - firebase options or control dot
603:44 - depending on whether on your linux
603:46 - whether if you're on linux or a mac or
603:49 - windows import firebase options
603:54 - all right so now you'll see we have a
603:56 - homepage that just displays the word
603:57 - done here
603:58 - once the connection state of our future
604:01 - which is initialized app of firebase is
604:03 - actually done so hot reload
604:06 - and you'll see hotdog sorry
604:09 - done is also displayed hot done
604:11 - um
604:12 - so uh
604:14 - i'm gonna take that in my notes that
604:15 - i've talked about that
604:18 - all right
604:19 - the next thing we need to do in this
604:21 - chapter is um
604:23 - to make sure that the user is not null
604:26 - and that also the user is verified so
604:29 - under some rare circumstances with
604:32 - firebase such as when you haven't
604:34 - initialized your firebase application
604:36 - using initialize app the user that is
604:39 - stored in the firebase um
604:42 - firebase
604:43 - code or in the instance of firebits
604:45 - running inside your application may
604:46 - actually be null and we've talked about
604:49 - null in uh previous chapters where we
604:51 - talked about dart and it's basics so you
604:53 - can go back to those chapters and watch
604:54 - those so i'm not going to explain what
604:56 - null is again
604:57 - but just quickly null is simply said the
604:59 - absence of a value in this case absence
605:01 - of the user so
605:03 - what we need to do in our application is
605:05 - to ensure
605:07 - that
605:09 - a
605:09 - the user the current user in the
605:11 - application is
605:13 - um non-null meaning that it should be
605:16 - present and also that the user's email
605:19 - should be verified okay
605:21 - so
605:22 - you may be asking why
605:24 - is it important for a user's email to be
605:27 - verified
605:28 - the reason
605:29 - i mean also before i say why is it
605:31 - important for a user's email to be
605:32 - verified maybe let's talk first about
605:34 - what an email verification is and
605:37 - that whether you've already seen it or
605:39 - not so in a lot of services online if
605:42 - for instance you go to a website
605:44 - even if it's a shopping website or
605:46 - amazon or whatever ebay if you say okay
605:48 - i want to register a new user and you
605:49 - say okay here's my email address here's
605:51 - a password of my choosing um
605:54 - once you do that
605:55 - you will be logged into the website
605:57 - they'll say okay if this email doesn't
605:59 - exist already
606:00 - i'm gonna allow you to register this but
606:02 - then you wouldn't really be able to do
606:04 - so much with the website you can search
606:06 - stuff but you probably won't be able to
606:07 - buy things
606:09 - unless until unless you've
606:11 - verified your email and that means that
606:13 - as soon as you register for amazon for
606:15 - instance then it will send you an email
606:17 - to the email that that you chose upon
606:19 - registration and there will usually be a
606:21 - link in that email and say thank you for
606:23 - registering a user at amazon or ebay
606:26 - click on this link to verify your email
606:28 - address
606:30 - you've probably seen emails like that so
606:32 - you could just go to your inbox and
606:34 - search for verify and you'll probably
606:35 - find lots of emails that ask you verify
606:38 - your account with the service so um
606:42 - now let's now that we talked about what
606:44 - email verification is let's talk about
606:45 - why it's important well let's say that
606:48 - i'm a user and i want to use this
606:50 - application that we're developing so i
606:51 - want to score some notes in it
606:53 - then i'll go and and register myself
606:57 - under an email that i don't own
606:59 - all right so let's say then i register
607:02 - my
607:03 - your email address with a password of my
607:06 - choosing since you haven't registered
607:08 - your email address yet with the service
607:09 - icon and ahead of you and register your
607:12 - email address with the service and now
607:14 - i'll just log in
607:16 - remember i'm not logging into your email
607:17 - i'm logging into this application with
607:19 - your email now
607:22 - now i've taken that email so if you then
607:24 - who's the rightful owner of your email
607:26 - address comes to this application and
607:28 - say oh i'm a foobarbaz gmail.com and i
607:31 - want to register an account with this
607:32 - application and it says oops that email
607:34 - address was already taken so you'd be
607:36 - like how is that taken that's my email
607:37 - address so
607:39 - that is the importance of email
607:41 - verification what we need to do in our
607:43 - application is to make sure that
607:44 - whenever someone comes and registers a
607:47 - user using the email address and a
607:49 - password of their choosing then we're
607:51 - gonna send a real email using firebase
607:54 - to that email address and say
607:56 - hey you just registered a user here make
607:59 - sure that you click on this link that
608:03 - says verify blah blah to actually verify
608:06 - your user with our application or with
608:08 - our file with our applications firebase
608:11 - instance that sits on firebase cloud all
608:13 - right so
608:15 - so what we need to do now is to go in
608:18 - here in the connection state done you
608:19 - see
608:20 - let's then check the current user okay
608:23 - let's see if this current user actually
608:26 - is logged into the application so let's
608:29 - say firebase
608:31 - um
608:32 - and then let's say
608:34 - firebase app i believe it's called
608:37 - instance
608:38 - let's see got instance
608:42 - changelog firebase
608:45 - all right let's see if we can actually
608:47 - google that together okay so this is
608:49 - good for you to also see
608:51 - right base flutter get current user
608:54 - we're probably going to end up on some
608:56 - sort of a stack overflow
608:58 - and we'll have a look at how we can
609:00 - actually retrieve the current user as
609:02 - you can see the response here is from a
609:04 - user
609:06 - whose username is quite
609:08 - dissu kurt jr i apologize if i'm
609:12 - butching this name but you can see that
609:15 - it's provided here for you that it says
609:16 - firebaseos.instance
609:18 - and using that instance then you can get
609:20 - the current user so let's do the same
609:22 - thing here let's say firebase off
609:25 - dot instance
609:27 - and then
609:28 - current user okay
609:30 - i'm gonna get rid of this screen on the
609:32 - left which which is our project browser
609:34 - and i'm gonna print this statement right
609:36 - here before we return the done text okay
609:39 - so i'll bring up the debug console clear
609:42 - the debug console and i'm going to say
609:44 - command s all right
609:47 - and since we've made a lot of changes
609:49 - here you see we created a home page lots
609:50 - of stuff in here so what we need to do
609:52 - is just do a hot restart basically
609:54 - flutter in this case wasn't able to
609:56 - really understand
609:58 - what we've changed in our home page so
610:01 - there were so many changes that it just
610:03 - couldn't handle so a hot restart is the
610:05 - remedy there
610:07 - now you can see here as we printed the
610:09 - current user
610:11 - i'm going to do this so you can see more
610:13 - of the
610:14 - the output i'm going to bring it up a
610:16 - little bit i'm going to increase the
610:18 - size quite dramatically so you can see
610:19 - it better as well
610:21 - and
610:22 - i'm going to highlight the parts that
610:24 - were actually printed so this is what
610:26 - firebase or this is what the print
610:28 - statement printed out for us and this is
610:30 - user credentials that were created by
610:33 - firebase and
610:35 - if you remember from the previous
610:36 - chapter i said that make sure before you
610:38 - come to this chapter that you have a
610:41 - login user and this is the reason i
610:43 - wanted us to i wanted the firebase
610:45 - instance in our application to already
610:47 - know that you're logged in so that when
610:49 - we print your current user credentials
610:51 - then as you can see it says here's the
610:53 - email address
610:55 - and then there's a property called email
610:57 - verified false and it says are you an
610:59 - anonymous user
611:01 - false and if you remember from one of
611:03 - the earlier chapters when i talked about
611:05 - the firebase setup then
611:07 - an anonymous user is a user who hasn't
611:09 - really logged into the application yet
611:11 - and
611:12 - firebase is intelligent enough to
611:13 - understand that any user who comes to
611:16 - your application who hasn't logged in
611:17 - before or and their login
611:19 - information isn't saved in keychain or
611:21 - shared preferences on android then that
611:24 - user is anonymous anonymous by default
611:26 - so if you didn't take the
611:28 - um last action from the previous chapter
611:31 - and you didn't log into the application
611:33 - with your current user
611:35 - then you will actually be anonymous here
611:36 - so this flag will say true
611:38 - but since we've already done that we've
611:40 - logged into the application then you'll
611:41 - see our credentials being printed to the
611:43 - screen
611:45 - now this is the part that i was
611:47 - interested in which is email verified
611:49 - and it says false
611:51 - so what we're going to do here is to say
611:56 - take the user so we're saying a final
611:58 - user is firebase off instance current
612:01 - user i'm going to decrease the size a
612:02 - little bit here okay
612:04 - and i'm gonna make the screen a little
612:06 - bit bigger so you can see it better
612:08 - and let's go then create an if statement
612:11 - here
612:12 - and let's say that we're gonna say what
612:15 - what have i planned for it let's just
612:17 - say if user is
612:20 - verified email verified then we're going
612:23 - to say print
612:24 - you are a verified user
612:27 - and otherwise
612:30 - we're going to say print you need
612:33 - verify your email first
612:37 - so
612:39 - you see here because i'm so glad that
612:40 - actually we're seeing this error you can
612:42 - see the entire error
612:44 - it says
612:45 - how can i scroll here it says the
612:47 - property email verify can't be
612:49 - unconditionally accessed because the
612:50 - receiver can be null try making the
612:53 - access condition using question mark dot
612:56 - or adding a null check to the target so
612:59 - what this is saying is if you go to this
613:01 - user move your mouse over it uh if i can
613:04 - do that oh no
613:06 - here you'll see that it says user is an
613:09 - optional user so what firebase has done
613:12 - here is saying
613:13 - this current user property that you can
613:15 - see here is an optional user meaning
613:17 - that well if something goes wrong and
613:19 - firebase can't actually calculate your
613:21 - current user
613:23 - for instance if you disable anonymous
613:25 - users which you can actually do
613:27 - then firebase will be said it will be
613:29 - saying oops
613:31 - null user
613:32 - the user is absent i don't know who this
613:34 - user is so
613:36 - that is firebase api telling your
613:38 - application that if you're using my api
613:40 - then you need to handle this case you
613:42 - can't just ask me if the email is
613:43 - verified because the user may actually
613:45 - be null the user may be absent so
613:48 - there was a great suggestion here you
613:50 - saw here that says you can conditionally
613:53 - access that property using the question
613:54 - mark dot
613:57 - syntax so let's do that question mark
613:58 - done but as you do that you see you'll
614:01 - get another problem
614:03 - it says okay
614:05 - you're asking me to compare an optional
614:08 - boolean
614:09 - with
614:10 - an actual boolean because remember your
614:12 - if conditions need to resolve in into a
614:14 - true or false so
614:16 - um so in this case what you can do is
614:20 - to either create something called for
614:22 - instance if an intermediate variable you
614:24 - can say final
614:26 - email verified
614:29 - and you'll say that is equal to user
614:31 - optional access to email verified field
614:33 - or false you see this is the question
614:36 - mark question mark which we've already
614:38 - talked about when we talked about dark
614:39 - basics so
614:41 - what you said here is take the left hand
614:43 - side of this operator of question mark
614:46 - question mark which is a null aware
614:48 - operator you say if the left hand side
614:51 - exists take it otherwise take the value
614:54 - on the right okay so now if you move
614:56 - your mouse over email verify you'll see
614:57 - that it's a boolean all right
615:00 - perfect so you could either do that or
615:03 - get rid of this intermediate variable
615:05 - that you created here and literally just
615:06 - put the exact same code in your if
615:08 - statement and that will work exactly as
615:10 - it did up there so let's just go ahead
615:12 - with that one less line of code
615:14 - one
615:16 - line of code less maybe
615:18 - um all right so
615:21 - if the user's email verified or false is
615:24 - true
615:25 - which means that if the user's email
615:28 - verification could be read as true or
615:30 - false and if you can't use false if the
615:33 - equation then in itself is true then the
615:37 - user is verified
615:38 - otherwise the user isn't verified so
615:41 - let's do command s there
615:43 - let's bring up our console i'm going to
615:46 - change the screen layout a little bit so
615:48 - you can see better
615:49 - and you can see here it says you need to
615:51 - verify your email i actually clean the
615:53 - screen a little bit and command s again
615:54 - so you'll see a little bit less
615:56 - information on screen and you can see
615:58 - our print statement which was here got
616:00 - printed saying that yeah you haven't
616:03 - verified your email and you need to do
616:05 - that first
616:07 - okay a lot of information but maybe less
616:09 - than the other chapters and to be honest
616:11 - with you this is all we have to talk
616:13 - about in this chapter i just wanted to
616:14 - display
616:15 - or and show you that um or actually
616:18 - explain first what email verification is
616:20 - why is it important and that we're we
616:23 - are going to use email verification in
616:25 - our in our application as you'll soon
616:27 - see
616:28 - and how can you actually read that
616:30 - property from a firebase user
616:34 - great
616:35 - that was all for this chapter now the
616:38 - next chapter is going to be a little bit
616:40 - different you may actually expect a
616:42 - continuation of this chapter you would
616:45 - think that we're going to jump right
616:46 - into email verification but i have
616:49 - intentionally actually put a little bit
616:51 - of a pause in our
616:53 - flow because this is something you'll
616:54 - have to do as a software developer
616:56 - sometimes in that if you see something
616:58 - not
617:00 - kind of correct something isn't working
617:02 - right then you'll need to address it as
617:04 - soon as possible and this is something
617:05 - we're going to address in the next
617:06 - chapter the problem here that you may
617:10 - may if you're a seasoned software
617:11 - developer or may not have thought about
617:13 - is that
617:14 - we are just writing code on our computer
617:17 - this code could be easily deleted by a
617:21 - malicious program a virus or if
617:23 - something happens to our computer all
617:25 - this could just go away and you'll lose
617:28 - everything that you've written so if
617:30 - you're not coming from a software
617:31 - engineering background then you may not
617:32 - know what git and github are
617:35 - now
617:36 - i'm not going to scare you to be honest
617:37 - with you this is not something scary but
617:39 - um
617:41 - what we need to do is just to make sure
617:43 - that we have a backup of our code and
617:44 - just that's just common sense like even
617:46 - if you're a designer even if you're a
617:48 - music producer even if you're a soft if
617:50 - if your product owner whoever
617:53 - or product manager you probably know
617:56 - that whatever you're working on needs to
617:58 - be saved somewhere safely so if you have
618:00 - a video file you're not just going to
618:02 - put it on your computer you're probably
618:03 - going to make a backup of it if you're
618:05 - working with figma that that file is
618:07 - already shared in the cloud is sorry not
618:09 - shared it's already stored in the cloud
618:11 - so
618:12 - it's very rarely that you will work on
618:16 - pieces of um documents that are not
618:18 - securely stored in some sort of cloud
618:21 - and even if you're working for instance
618:23 - with a document then nowadays there's
618:25 - also shared like um sorry there are
618:28 - cloud
618:29 - solutions for storing your documents
618:30 - securely in the cloud so
618:32 - um i mean it pretty much
618:34 - almost always when you're working on a
618:36 - user generated document or a source code
618:38 - in this case you'll need to make sure
618:39 - that it's securely stored in the cloud
618:41 - and that's what we're going to do in the
618:42 - next chapter so we're going to talk
618:44 - about git and github we're going to set
618:46 - up our gpg keys
618:48 - or pgp keys how do you want to say it
618:51 - and we're actually going to dive a
618:53 - little bit deep into git and what it
618:55 - actually means and why it is why is it
618:57 - good why do software developers talk a
618:59 - lot about git and as you might know
619:03 - this course well
619:04 - not might you already know this course
619:06 - is about flutter
619:08 - but i couldn't help put this chapter in
619:12 - because i believe if you're not a
619:13 - software developer if you're coming from
619:15 - another background
619:17 - then it is my duty kind of to tell you
619:20 - about git and github and why is it
619:23 - important how to use it how i like to do
619:25 - very simple tasks with getting github so
619:28 - um
619:29 - so let's then prepare ourselves for the
619:31 - next chapter which is going to be a
619:32 - little bit less coding it's not really
619:34 - we're not at all almost not at all going
619:36 - to be working on the source code we're
619:38 - mainly going to work with git and github
619:41 - so
619:42 - with that said i will wrap up this
619:44 - chapter and i'll see you in the next one
619:48 - hello and welcome to chapter 15 of this
619:50 - letter course
619:51 - in previous chapters we talked a lot
619:54 - about setting up our project so we've so
619:56 - far been working a lot with setting up
619:58 - the project and the basics we also
620:00 - created our login and registered views
620:02 - in our flutter application as i was
620:05 - developing this course myself i got to
620:07 - the point that there was a lot of code
620:08 - being written by me and then i needed to
620:11 - make sure that it is stored
620:12 - in a in a place where i can always go
620:15 - back to even if i lose this information
620:17 - on my computer that i can go back to
620:19 - that place and then retrieve that code
620:21 - so um
620:23 - if you're a software developer if you're
620:25 - if you're a seasoned software developer
620:26 - from before and you know what git and
620:28 - github are and you're comfortable using
620:30 - them and you know how to set up for
620:31 - instance your secure keys with gpg
620:34 - then you can safely jump over this
620:35 - chapter but if you're a designer product
620:37 - owner product manager whoever who
620:39 - doesn't know what git and github are or
620:42 - maybe need some help setting those
620:44 - things up
620:45 - then this is a good chapter for you
620:47 - uh otherwise you can just skim quickly
620:50 - over
620:51 - so
620:52 - let's
620:54 - let's talk quickly about what git and
620:56 - github are and why we need them um as i
620:59 - mentioned when you're working with your
621:00 - code for instance as i was while
621:02 - developing this course then you're
621:03 - writing a lot of code which
621:05 - is i mean intrinsically valuable because
621:08 - your time was translated into those
621:11 - pieces of code as you were writing the
621:13 - code you spent some time and energy and
621:15 - effort and wrote the code so it is quite
621:18 - an important piece of information for
621:20 - you just to lose and depending on the
621:22 - type of project you're working on for
621:24 - instance this project it has taken me
621:25 - quite a lot of time to even develop the
621:28 - idea of the project and put it together
621:31 - so while i was while i was putting
621:32 - together the idea of the course and
621:33 - written writing all the bits and pieces
621:36 - that i have to explain in every video i
621:38 - made quite a lot of backups of that of
621:40 - those ideas because had i not done that
621:43 - and had i just put everything in just
621:45 - one piece of paper or something or just
621:47 - even one digital document on my computer
621:50 - had i lost a document then well yeah
621:53 - i would have lost it and i would have
621:55 - had to begin from the absolute beginning
621:58 - and this is the same thing for your code
622:00 - [Music]
622:01 - so you need to use two services called
622:04 - git and github in order to
622:07 - store your
622:08 - code
622:10 - in in a safe place so that you can
622:12 - always retrieve it later
622:14 - so let's talk quickly about what is git
622:18 - and why do you need this um
622:22 - so what you need to know about gitz is
622:25 - that git is a
622:28 - piece of software on your computer
622:31 - that allows you to
622:35 - manage
622:36 - various changes that you make to a code
622:40 - base such as our project at different
622:43 - times keeping track of the date those
622:45 - changes were made the person who made
622:48 - the changes and the changes themselves
622:50 - and also it will be able to provide you
622:52 - the difference between your recent
622:54 - changes and what was already
622:57 - provided in the or what was already
622:59 - committed into this git repository
623:03 - well what a git repository really is is
623:06 - a bucket
623:07 - is an empty bucket initially where there
623:09 - is nothing in there and as you interact
623:12 - with your source code then you'd be like
623:15 - okay now i want to turn this source code
623:17 - that i've written into a bucket so then
623:19 - there's a bucket created around your
623:20 - source code called a git repository
623:23 - which keeps track of all the changes
623:26 - that you're that you're making or
623:28 - anybody else that works on the same
623:30 - source code is making to the code and it
623:33 - will allow you to save snapshots of
623:37 - those changes at
623:39 - at specific times of your choosing
623:42 - if you're a designer of your and you're
623:44 - working with
623:45 - figma for instance figma already
623:48 - automatically saves your work at the
623:50 - times that it sees fit so you never have
623:52 - to press really a save button and also
623:55 - figma if you've seen it
623:57 - and it keeps track it has a version
624:00 - history so you can literally go to figma
624:03 - and say okay i've done my work i want to
624:05 - actually commit my changes in the
624:07 - version history and i want to give it a
624:09 - name
624:10 - most designers don't do that and they
624:11 - legislate must save their work
624:14 - automatically and by that figma just
624:16 - says here's the timeline of your changes
624:18 - at this time you did this at this time
624:20 - you did this so
624:22 - even if you're a designer you're
624:23 - implicitly using something called a
624:26 - version control and which in it in that
624:29 - case is figma
624:30 - but when you're coming to the software
624:32 - development world we're working with
624:34 - your flutter application there is no
624:35 - figma there and you're working with raw
624:38 - code so you're going into visual studio
624:39 - code or sublime or whatever text editor
624:42 - that you're using android studio
624:45 - as an id or whatever
624:47 - then there is no service sitting there
624:49 - and saying oh you made some changes let
624:51 - me let me help you save it in some sort
624:53 - of app
624:54 - or a cloud solution so
624:57 - the system that allows you to do that on
624:59 - your computer is called git so git is a
625:01 - software that allows you to keep track
625:03 - of changes that you're making to source
625:05 - code okay
625:07 - so i can see here that before we
625:09 - continue we're gonna actually talk a
625:11 - little bit about git
625:13 - and so
625:15 - what i'm gonna do here i'm gonna add lib
625:17 - a little bit here and improvise
625:19 - and i'm gonna go here and make the
625:21 - screen a little bit bigger i'm gonna
625:22 - bring up terminal and you don't see it
625:24 - on that screen because it opened on
625:27 - another screen so
625:29 - let me just increase the size and bring
625:31 - it up here so you also see it
625:33 - so i'm gonna go here to my development
625:35 - folder
625:37 - and i'm going to go to my projects and
625:43 - let's think go to
625:47 - make a folder i'm going to say git
625:51 - okay
625:52 - should i call it git or just let's
625:54 - actually create a folder called
625:56 - testing okay
625:59 - let's go into testing then it is an
626:02 - empty folder as you can see for now
626:05 - and what we're going to do is we're
626:07 - going to tell git now which is a
626:09 - software installed on my computer um to
626:12 - tell it that okay all of a sudden i want
626:14 - to turn this empty directory here into
626:16 - something called a repository remember
626:18 - it's going to be a bucket then that
626:20 - keeps track of changes in the current
626:22 - directory now before we continue maybe
626:25 - oh sorry about that
626:27 - maybe you also need to actually install
626:29 - git on your computer if you're not
626:31 - coming from a software development
626:32 - background you probably don't even have
626:34 - git installed on your computer so i'm
626:36 - going to bring up a
626:38 - a browser window here and say install
626:40 - git
626:42 - so
626:43 - if i google install git you will see
626:46 - that there there's like information
626:49 - how you can install git on your computer
626:52 - if you
626:53 - are on a macintosh and you have already
626:56 - installed xcode xcode comes pre pre like
627:01 - pre-packaged with gits already
627:03 - if you're on windows i believe that you
627:05 - actually have to i have a windows
627:07 - machine right here next to me which i
627:09 - use daily i believe for windows you'll
627:12 - have to install git personally like
627:14 - manual so let's say install git
627:16 - windows
627:19 - uh get download package get a time get
627:20 - guys install git
627:24 - oops my ipad for some reason got
627:27 - disconnected here so i'm going to have
627:29 - some difficulty then
627:31 - um
627:32 - let's see now install git on linux
627:36 - okay
627:38 - i believe there is a good package
627:40 - actually for getting it on windows let
627:42 - me go back here installer on windows you
627:44 - can see here
627:45 - just go to i'm going to increase the
627:47 - screen size a little bit as well so you
627:49 - can see it a little bit better
627:51 - here it says go to https get scm com
627:54 - download win so i'm going to go here
627:56 - and it's going to start downloading so
627:58 - i'm just going to say cancel because
627:59 - right now i'm in a macintosh so here is
628:01 - where you can download git and install
628:03 - it on your computer
628:04 - if you are on a windows machine and you
628:06 - have the linux subsystem which i do on
628:08 - my windows machine then you may actually
628:09 - want to download git using see sudo apt
628:12 - um
628:14 - on that
628:15 - linux subsystem but
628:17 - it is possible that the linux subsystem
628:18 - on windows already comes shipped with
628:20 - git so you don't have to do anything i
628:22 - wouldn't be surprised if git was one of
628:23 - the absolute core components that was
628:25 - shipped with linux
628:27 - um
628:28 - so that's for a macintosh and also if
628:30 - you're on a macintosh and you don't have
628:32 - xcode for whatever reason
628:35 - um
628:36 - then you may need to also download git
628:38 - separately so let's go back here and see
628:41 - how you can do that
628:42 - uh if you say mac os here it says there
628:45 - are several ways to install get on mac
628:47 - users probably install the xcode command
628:49 - line tools which we've already done so
628:52 - if you don't have it in slavery it will
628:54 - prompt you to install it
628:56 - so otherwise you can go in here get
628:58 - semcom download mac and then you can do
629:01 - brew install git
629:03 - so if that is what you want to do then
629:05 - you first have to actually install
629:07 - homebrew
629:08 - so
629:09 - go into this link and say homebrew
629:11 - install basically just do as it says
629:13 - here you see there's the command
629:16 - and then go and install
629:18 - git using homebrew
629:21 - and if you're on linux then a sudo apt
629:24 - install git i think maybe you don't even
629:26 - need to have sudo if you're installing
629:28 - for the current user so just apt
629:30 - app is it get or install i forgot but
629:33 - there's information about
629:35 - linux here as well
629:38 - app install yeah get all
629:41 - so
629:42 - yeah i mean i'm assuming you're kind of
629:44 - like on a debian based distribution as
629:45 - well but otherwise there's information
629:47 - here how you can install it otherwise so
629:50 - all right uh
629:52 - that was a lot of information and before
629:54 - we continue i'm just going to try to
629:55 - make sure that i'm connected back to my
629:57 - uh
629:59 - to my laptop to my ipad here because on
630:02 - my ipad i keep hold of all the
630:04 - information that i have to provide to
630:06 - you in some sort of like a chronological
630:08 - order so it is very important for me to
630:10 - actually get my notes up there so i'm
630:12 - going to try to connect to my ipad and
630:14 - yeah there it is
630:16 - okay
630:18 - so
630:19 - now that you've i'm assuming that you've
630:21 - installed git i'm assuming that that is
630:23 - done if you say which git
630:26 - then it's going to tell me in this case
630:27 - that user being get that's where get it
630:30 - installed if you're on windows to be
630:32 - honest with you i don't know the command
630:34 - on windows to know whether it come like
630:37 - git is installed but on windows all you
630:39 - have to do is just to type git and if if
630:41 - you see that
630:43 - it throws an error it says git isn't
630:45 - available either you haven't installed
630:47 - git and if you have installed git maybe
630:51 - git isn't in the current path so you'll
630:53 - have to go and adjust your environment
630:55 - variables in order to get git and
630:57 - is lots of information on the internet
630:59 - so we're not going to focus right now on
631:01 - how to install git exactly because
631:03 - that's going to be like its own course
631:05 - maybe
631:06 - but if you follow the instructions that
631:07 - were provided on the website that i just
631:09 - showed you should be able to get far
631:11 - so
631:12 - i'm assuming now git is is installed on
631:15 - our computer and you can see here we're
631:17 - in a folder called testing so if i say
631:19 - where that testing is you can see that
631:20 - is is right here now what we want to do
631:23 - is to say testing for instance is the
631:25 - project that we're gonna place all our
631:26 - code in okay so there's gonna be
631:28 - information that we're gonna write here
631:30 - in this um in this folder there's gonna
631:33 - be some dart files there's gonna be some
631:35 - png and jpeg files there's gonna be our
631:38 - application icon all that stuff
631:40 - and we want to store this safely
631:43 - so
631:44 - the first thing you may want to do is to
631:48 - to basically tell git that this current
631:51 - directory in itself is a git's
631:54 - repository so the bucket remember the
631:57 - bucket is going to wrap itself around
631:58 - the directory so
632:00 - if i get the contents of this directory
632:02 - at the moment you can see that it's
632:03 - completely empty but if you want to
632:05 - create a git bucket or a git repository
632:08 - around this directory all you have to
632:10 - say is just to say git init dots
632:13 - okay
632:14 - you'll see here now it says that
632:16 - initialize amt git repository in this
632:19 - folder
632:20 - so now if i get the contents of this
632:22 - folder you'll see that there is a new
632:24 - directory called dot git and dot git
632:26 - directory is where git basically keeps
632:29 - track of its internal like the changes
632:31 - to this directory and like
632:33 - what you
632:35 - save when you save it who is it that
632:37 - saved the work etc so now that you've
632:40 - done that now you've created a git
632:42 - repository basically around this empty
632:44 - directory you can issue various diff git
632:47 - commands such as
632:49 - its status
632:50 - this will give you the current status on
632:53 - this um
632:54 - on this uh
632:56 - directory and you can see here as soon
632:58 - as we created a git repository with git
633:01 - in it all of a sudden my terminal
633:03 - changed my prompt here and said that all
633:06 - of a sudden testing is not just testing
633:08 - anymore but it's actually a git
633:09 - directory and we're on a branch called
633:12 - main
633:14 - now
633:15 - i don't want to talk about branches
633:17 - right now but just know that there are
633:18 - um
633:20 - yeah let's just not talk about branches
633:21 - right now because i'm planning to do
633:22 - that a little bit later so
633:25 - so but what we are going to talk about
633:27 - is this little message here that says no
633:28 - commits yet now
633:31 - in git whenever you're working um git
633:34 - doesn't just save your work
633:36 - automatically you need to tell git to
633:38 - save your work and those points where
633:41 - you save your work there are call
633:43 - commits it commits as its name indicates
633:45 - is you committing your work you say i
633:47 - committed to this and i want to save it
633:50 - and that's i mean it could be called
633:52 - save but save is
633:54 - maybe
633:55 - um
633:56 - it could be uh like
633:59 - read as kind of more like a verb like oh
634:02 - am i gonna save it now or what is it but
634:04 - if i say here's my commit then
634:06 - it could be a little bit easier to infer
634:08 - that oh it's a piece of information that
634:10 - you've saved and you've committed to so
634:13 - i think maybe that's the reason it's
634:14 - called the committee i'm not sure
634:16 - so
634:17 - those commits are points of time where a
634:20 - person that has access to this
634:22 - repository saved their work okay so just
634:24 - remember that that is a commit and if we
634:27 - see here the status says no commits yet
634:30 - because there was literally nothing that
634:31 - you told get to save now what we're
634:34 - going to do is to open up visual studio
634:35 - code so i'm going to bring up you just
634:37 - to studio code here and you can see it's
634:39 - an empty folder
634:40 - and i'm gonna create a file here and
634:42 - let's just call
634:44 - um let's call this um
634:48 - info.txt so just text file okay
634:51 - so here's an empty file and i'm just
634:54 - gonna type hello in here increase the
634:56 - size a little bit as well so you can see
634:57 - better
634:59 - so
634:59 - now if i say git status here you can see
635:02 - all of a sudden it doesn't say no
635:03 - commits yet it it well basically it says
635:06 - dad but it also says on track files and
635:10 - it puts the info text right here now
635:14 - let me then explain what attract file
635:16 - and on track file is a track file is a
635:18 - file that you've told git about before
635:21 - so it it's tracking the changes being
635:24 - made to that file
635:26 - on track file is a file that you have
635:28 - not told yet before about so it says oh
635:31 - here's a file you're doing something
635:33 - with it but i'm not gonna even look at
635:34 - it i'm not gonna keep track of it
635:36 - because you don't you didn't tell me to
635:38 - do so
635:39 - so
635:40 - and things um
635:42 - i mean yeah a file basically can be in
635:45 - three states in git right now you've
635:47 - learned two of them either tracked or on
635:49 - track but it could also be in another
635:52 - state that i will show you soon
635:55 - so
635:56 - now you can see there's a message here
635:58 - that it says let me bring actually the
636:01 - terminal a little bit up here so you can
636:02 - see the terminal in its entirety it says
636:05 - use git add and then the name of the
636:08 - file in order to include what will be
636:10 - committed so let's do that i'm just
636:12 - going to say git add info txt
636:15 - and now i'm going to say git status and
636:17 - all of a sudden you'll see that get
636:18 - understood that here's a new file you're
636:21 - committing committing this file
636:23 - called info text but you can see
636:26 - that it still says you haven't committed
636:28 - anything but it says changes to be
636:30 - committed and all of a sudden this file
636:32 - is green
636:34 - remember i said a file can be in three
636:36 - states on tracked which means git
636:38 - doesn't know about it tracked which
636:40 - means it does know about it or it could
636:42 - be staged
636:44 - so if you see here this file is green
636:47 - and it says changes to be committed so
636:50 - stage is where
636:51 - you have made changes to a file
636:54 - and you've told git that you want to
636:56 - commit it but you haven't committed it
636:59 - yet
637:00 - now you may be asking okay why would i
637:02 - have files that aren't going to be
637:04 - committed in some projects if you have
637:07 - some information for instance if you're
637:09 - working with 10 other developers
637:11 - and you're making some
637:13 - tests and you're writing some code in
637:15 - the in the directory where your source
637:17 - code is placed at but you don't you're
637:20 - not really ready with that file yet you
637:21 - don't want to commit it into a branch
637:23 - where everyone else sees then you could
637:25 - say oh i'm not going to commit this it
637:27 - is not staged file i'm not even ready
637:29 - for staging it and putting it into the
637:31 - commit so in that case you're not going
637:33 - to add it to the staging area okay so
637:35 - remember that
637:36 - now that you've you've done that you
637:38 - just said git add you can commit it and
637:40 - a commit literally means that you're
637:42 - going to save this work in git okay
637:45 - and the way to do that is using git
637:47 - commits
637:48 - and then you will provide a message
637:50 - using dash m here and then quotation
637:53 - marks okay so here you will write a
637:55 - message that will be appended to your
637:58 - entire commit
638:00 - so what we're going to do here says
638:02 - let's just say
638:04 - add new info txt file for fun okay and
638:08 - then i'm just going to press enter
638:10 - and see here it says one file change and
638:12 - one insertions and it will say that yeah
638:15 - it has created this file okay so i'm
638:17 - gonna clear my uh terminal now and we're
638:20 - gonna do git status
638:23 - all of a sudden that message that about
638:25 - no commits yet disappeared and all this
638:27 - is is that is that you're on a branch
638:28 - called main and there's nothing to
638:30 - commit okay
638:32 - so
638:33 - what do you do then if you want to see
638:36 - the commit that you just made like if
638:37 - you want to see okay what are all the
638:39 - comments that were made then in that
638:41 - case you can say git log
638:43 - and git blog will display
638:45 - all the all the commits that were made
638:47 - and who they were made by and you will
638:49 - also be able to see the date that were
638:51 - made and the commit message do you
638:53 - remember we said git commit dash m so
638:56 - that was the message provided in the get
639:00 - command and then saved in the repository
639:02 - okay
639:04 - so
639:05 - that is the message and that's the email
639:07 - of the person who basically did that
639:10 - commit
639:11 - now i jumped over a little bit here and
639:14 - um
639:16 - and to be honest with you that was
639:18 - i didn't really think about that some
639:20 - people if you're installing git
639:22 - then you're not going to have all this
639:24 - information already set up like who you
639:26 - are
639:27 - and there's information about how you
639:29 - configured it and how you tell get who
639:32 - you are
639:33 - and what your name is etc and that is
639:36 - using a command called git config
639:39 - and global for instance
639:41 - but you could actually read about read
639:43 - about that online so just say git config
639:45 - and then you will get a lot of
639:47 - information about how to do that so but
639:50 - just know that git is such a big world
639:53 - that if i want to explain everything
639:55 - about git we could have a course that is
639:57 - already
639:58 - 30 hours just talking about git so
640:02 - just know that there's constraints for
640:04 - on me to explain like the absolute
640:07 - basics of get to you in order for us to
640:09 - be able to use git in this course for
640:11 - this particular use case so i'm gonna
640:13 - just focus on those things okay so
640:16 - um now that you know how to commit i
640:19 - think you're
640:20 - you're like very
640:21 - you're in
640:23 - good
640:24 - place to start learning more about git
640:26 - and the thing you may want to know so
640:28 - which we're not going to use in our in
640:30 - this course
640:32 - is branch using git and why you'll need
640:35 - them now
640:37 - git is a
640:39 - is a piece of software that allows
640:42 - groups of people work on the same piece
640:44 - of code without losing their changes now
640:48 - if you're for instance from a design
640:49 - background if you're working with figma
640:52 - if i go into the design file that you
640:54 - you've shared with me as an observer i
640:57 - cannot make any changes so i can only
640:58 - observe you and i can just like export
641:01 - assets uh or even if you're using um a
641:05 - zeppelin
641:06 - it's the same thing you can so someone
641:08 - some designer sitting with sketch for
641:10 - instance and then they're exporting the
641:12 - work into zeppelin and then you as an
641:13 - observer you're
641:14 - you're exporting that information from
641:16 - zeppelin
641:17 - but you can't make any changes to the
641:19 - source however with git when you share
641:22 - your information for like your git
641:24 - repository with someone else they can
641:26 - also make commits to it as you'll see
641:28 - soon we're going to use github for that
641:31 - so
641:32 - um
641:33 - then basically you need to
641:35 - make sure that every person is
641:38 - identified correctly and then they have
641:40 - for instance they
641:42 - that they have configured get in the
641:44 - right way and sometimes
641:47 - i mean we're talking about branches so
641:49 - sometimes these people
641:51 - don't want to affect what you are doing
641:53 - in this main branch so just imagine and
641:56 - a branch is more like a
641:58 - train line like your train is going
642:00 - there
642:01 - and maybe some some places your friends
642:04 - want to visit a town in the city that
642:06 - you hadn't planned so they get off the
642:08 - train they go on another train line and
642:11 - at the end you will meet so at that
642:13 - point you can see that they branched out
642:14 - into their own branch and that is like
642:16 - the concept of branches in git as well
642:18 - so sometimes when you're working with
642:20 - other developers they may want to branch
642:21 - out into their own branches on the same
642:24 - source code do some experiments and once
642:27 - they figure out what they actually
642:28 - wanted to do maybe they will save their
642:31 - own work into that branch and then they
642:33 - will bring it back to your branch at the
642:35 - end you will meet at the train station
642:37 - and then they bring the results with
642:38 - them and then you merge together so
642:41 - there's a lot of information about
642:43 - branches how they work in kit but just
642:46 - know that
642:47 - branches are kind of like train lines
642:48 - and right now you're on the main train
642:50 - line
642:51 - going from your city to the destination
642:53 - okay
642:55 - so
642:56 - um but again there's time constraints on
642:58 - this course i can't explain everything
643:00 - about git but if you're interested
643:01 - there's lots of great content available
643:03 - on youtube that you can watch and i'm
643:05 - pretty sure that there's lots and lots
643:06 - of tutorials online as well that you can
643:08 - go and read about as well
643:13 - wow that was a lot of information okay
643:16 - um
643:18 - let's now talk about what github is
643:22 - now
643:23 - github is simply said a cloud service
643:26 - for storing your git repositories so
643:30 - um
643:32 - right now this git repository is sitting
643:34 - on my computer so even if if it is i'm
643:36 - committing my work i'm saving my work
643:39 - there's still
643:40 - no uh traceability from the outside
643:44 - world so no one else is allowed to see
643:46 - this code right now it's sitting right
643:47 - on my computer and for that if i want to
643:49 - share this code with other people and
643:51 - potentially allow them not to read only
643:54 - but also to be able to commit and
643:56 - collaborate with me in the source code
643:59 - then i would be able to share that on a
644:01 - cloud service such as github
644:04 - github
644:06 - has the word git in its name but it's
644:08 - not the same thing as git so git is a
644:10 - software that actually manages all your
644:11 - commands and etc but github is the cloud
644:14 - service that holds on these repositories
644:17 - for you
644:19 - so
644:20 - if you don't have a github account i'm
644:21 - going to help you do that right now
644:23 - so
644:24 - let me close actually no i'm not going
644:26 - to close i'm going to minimize this
644:28 - and minimize perhaps um
644:32 - yeah let's close this one i don't think
644:34 - we're gonna need it
644:36 - so i'm gonna bring up a window here
644:40 - and i'm gonna go here and
644:42 - look at this
644:45 - website github.com all right
644:48 - so
644:48 - what we need here is that for you to
644:51 - create a github account and to do that
644:54 - you'll need to go to
644:57 - this website that i will provide for you
644:59 - right there github.com sign up okay
645:03 - so i'm gonna if i bring up um
645:06 - a browsing window here and say sign up
645:09 - you will see that yeah it won't know
645:11 - that i'm signed in already with my other
645:13 - account and it will ask me to start
645:15 - signing up right here okay
645:18 - so this is like the main window for the
645:20 - sign up of github and this they've done
645:22 - it a little bit comically it kind of
645:23 - like a star wars kind of theme i don't
645:25 - know what you want to call it but
645:27 - here you will go through a few steps in
645:29 - order to create a github account okay
645:32 - so
645:33 - i'm not going to do that simply because
645:34 - i've already done that
645:36 - but in your case we'll just need to go
645:37 - through this provide your email choose a
645:39 - good secure password for your email for
645:42 - your github account and then at the end
645:45 - you will have a simple github account
645:49 - okay
645:50 - as i already have
645:54 - so
645:54 - uh
645:56 - we've talked about already setting up
645:58 - git in the terminal so i'm not gonna
646:01 - talk about that i'm just gonna maybe
646:03 - move this
646:06 - um a little bit up all right
646:09 - now after you've set up github on your
646:13 - uh basically after you set up a github
646:16 - account
646:18 - you will need to set up something called
646:21 - ssh keys now
646:23 - this is a little bit technical but
646:28 - and it is nothing that you can jump over
646:31 - it's not like you can actually commit
646:32 - your work without setting up ssh keys on
646:34 - your computer you can always go to
646:36 - github and actually commit your work
646:38 - right on github itself like you can
646:40 - write some text and then
646:42 - change that
646:44 - text right in the github interface like
646:47 - the web interface so
646:49 - then they will do all of that work for
646:50 - you because they will commit it from
646:52 - kind of like their key their own ssh
646:54 - keys i believe but if you on your
646:57 - computer want to be able to commit your
646:59 - work from your
647:02 - hard disk or your ssc or whatever into
647:04 - github you will need something called
647:06 - ssh key ssh keys are
647:10 - cr crypto cryptograph crypt
647:14 - how should i say it
647:16 - is cryptographically even uh
647:19 - let's see crypt
647:20 - cryptographic
647:22 - no crypt
647:24 - yeah cryptographically i don't know
647:26 - yeah cryptographically signed
647:30 - these are cryptographically signed
647:32 - pieces of
647:34 - signature
647:35 - um that
647:38 - will
647:39 - just kind of like private keys that we
647:41 - worked with when we worked with keychain
647:43 - in one of the previous chapters
647:45 - they allow you to identify yourself as a
647:48 - person or as a committer
647:50 - so
647:51 - i think that does make sense
647:54 - so
647:54 - uh i apologize again for the hiccup of
647:57 - cryptographically it's just because i'm
647:58 - not a native english speaker so you
648:00 - should be expecting these hiccups
648:02 - every now and then at least
648:04 - so
648:05 - an ssh key is a piece of key that is a
648:09 - signature that you as a developer or a
648:13 - committer of code create on your
648:14 - computer
648:16 - and whenever you make a commit and you
648:18 - wanna
648:19 - send that commit then to
648:22 - github then github
648:24 - knows who you are
648:26 - okay so it says okay
648:28 - you are
648:30 - person xyz and you're trying to push
648:32 - your changes into this repository i'm
648:35 - just gonna make sure you have access to
648:36 - everything okay
648:37 - so you need your ssh key set up
648:41 - so
648:44 - what we need to do is to go to github
648:47 - and i'm going to bring up a web browser
648:52 - for you to understand how to set up your
648:54 - ssh keys so let's say github sets up ssh
648:58 - keys
649:00 - and you can see adding a new ssh key to
649:02 - your github account so there is a very
649:05 - very comprehensive guide here on how to
649:09 - set up your ssh keys so you can see that
649:11 - it says
649:12 - um
649:13 - let's see
649:16 - generating a new ssh key and adding it
649:17 - to the ssh agent so this is where you
649:19 - want to go okay
649:21 - so after searching for github as a setup
649:24 - ssh keys make sure that you at the end
649:26 - go to this link generating a new ssh key
649:28 - and adding it to the ssh ssh agent
649:32 - read through this there is very
649:34 - comprehensive guide there are only a few
649:36 - commands that you have to issue in the
649:38 - terminal so
649:39 - do them precisely as as it is specified
649:42 - here okay
649:44 - so after you've done that then what
649:46 - you'll need to do is
649:48 - to add that ssh key i believe into your
649:52 - github account you see as the link
649:54 - provides here adding a new ssh key to
649:56 - your github account so
649:59 - you can see here then it says okay do
650:01 - this command and then go to your github
650:03 - account settings and then go to search
650:06 - and gpg keys and then say new ssh key
650:09 - and then add that information in here
650:11 - okay and then press save
650:13 - and that's it then you have your ssh key
650:16 - all set up and done so these are the two
650:19 - things you'll need to do create an ssh
650:21 - key and then upload the public key into
650:24 - github
650:25 - and again because of constraints on this
650:27 - course i can't explain this
650:30 - like line by line to i'm just providing
650:32 - you the information that you need to
650:34 - know and i kind of expect you to do
650:36 - these things on your own okay
650:38 - um
650:41 - so
650:43 - that is that now
650:45 - we also need to talk about um
650:49 - gpg keys
650:52 - uh
650:53 - and let's actually i think gpg was new
650:56 - privacy
650:58 - what was jpg
651:02 - privacy guard
651:04 - so is a piece of software that you
651:05 - download on your computer you can see is
651:07 - a free software replacement for
651:09 - semantics pgp cryptographic software
651:12 - suit
651:13 - uh it is compliant with rfc blah blah
651:17 - all you need to know about gpg and how
651:19 - we're going to use it in this course is
651:21 - that
651:22 - um
651:23 - where you
651:25 - have your i mean we talked about ssh
651:27 - keys where you have your ssh keys and
651:29 - then you and i know this is a little bit
651:31 - geeky but that's kind of like the nature
651:33 - of this thing anyways
651:35 - and when you
651:36 - sign your commits with your ssh key with
651:39 - your private key and then you push your
651:41 - changes to github and github just
651:43 - verifies okay this is a
651:46 - this commit is coming from someone who
651:47 - has access to this repository
651:51 - when you create your
651:52 - gpg keys and then you sign your commits
651:55 - with the gpg keys
651:57 - then that actually verifies that you are
652:01 - who you say you are so a lot of software
652:04 - developers are still continuing with ssh
652:06 - keys and to be honest with you that's
652:08 - not good enough
652:09 - um
652:09 - [Music]
652:10 - i mean
652:12 - well it it depends kind of on your
652:14 - opinion but in my opinion is not good
652:16 - enough because anybody getting a hold of
652:18 - your ssh keys can literally just do
652:20 - anything they want with your commits and
652:22 - change anything they want but um
652:26 - with the gpg keys you'll ensure that you
652:28 - are who you are and anyone else even if
652:30 - they have hold of like your ssh keys
652:32 - their their commits won't be signed as
652:34 - you so
652:35 - um
652:38 - so let's now talk a little bit and we're
652:40 - going to take some items here and just
652:41 - make sure that we've talked about them
652:44 - about ssh keys
652:46 - now we're going to talk about gpgm where
652:48 - you actually need it so there's a little
652:50 - link here
652:52 - i'm going to open that link here so we
652:54 - can both see it and it says git is
652:57 - cryptographically
652:59 - uh
653:00 - still i this word is a little bit
653:01 - different different for me to say
653:02 - cryptographically secure but it's not
653:04 - foolproof if you're taking work from
653:07 - others on the internet and want to
653:09 - verify that commits are actually from a
653:10 - trusted source git has a few ways to
653:12 - sign and verify work using gpg okay
653:16 - so
653:18 - uh
653:20 - so what you'll need to do is uh you need
653:22 - to set up jpg basically on your computer
653:24 - and i and i believe
653:26 - um if you just say gpg install mac or
653:29 - gpg install windows or whatever then you
653:32 - can come to for instance for i'm using
653:34 - jpg tools on mac
653:37 - and for you can actually install gpg for
653:40 - various operating systems for instance
653:42 - windows or linux so just google gpg and
653:46 - then your operating system is so for
653:47 - instance gpg
653:50 - i can smell as spell
653:52 - if i can smell
653:54 - gpg and download noon pg here and you
653:57 - see so this is like the download tools
653:59 - for
654:01 - windows i believe let's see
654:03 - and you can see here you could use
654:05 - gpg for win
654:07 - full featured windows version of you
654:09 - know pg so
654:12 - all i'm trying to say is just to
654:13 - download the piece of software called
654:15 - gpg for your operating system so whether
654:17 - it's gpg for win or
654:19 - gpg tools for mac os or if it's like for
654:22 - debian uh
654:24 - canoe pc is part of debian okay so it's
654:26 - already maybe built in so you don't have
654:27 - to do anything for
654:29 - your debian based linux operating
654:30 - systems
654:32 - all right
654:33 - so after doing that then you will need
654:35 - to
654:36 - set up gpg for github and i'll provide a
654:40 - link here for you that you can
654:42 - read about says managing commit
654:44 - signature verification
654:47 - and the link i'll open it here
654:50 - so you can see how it looks like
654:52 - and you can see here
654:54 - generating a gpg key so you can first go
654:57 - there and it will help you through the
654:59 - various steps that you need to take in
655:01 - order to create your gpg keys it's very
655:03 - easy it's just a few lines of uh
655:06 - code or a few lines of text that you
655:08 - have to issue in your terminal in order
655:10 - to create your gpg keys okay
655:13 - so after you've done that and
655:16 - you need to make sure to go into this
655:17 - section add a new gpg key we've done
655:20 - that
655:21 - and then you go here to your settings
655:23 - you can see ssh and gpg keys and then
655:25 - the same way you added your ssh keys
655:28 - you'll need to add the gpg key in your
655:30 - github account okay
655:33 - and after you've done that the
655:34 - difference between sshk and a gpg key is
655:36 - kind of like to you need to tell get
655:38 - that you have a gpg key and then it
655:40 - needs to sign your commits with your gpg
655:42 - key okay
655:43 - and that's where you go into this tell
655:45 - get your assigning key and you need to
655:47 - just follow these steps to tell get
655:49 - using the
655:52 - git config global user signing key you
655:55 - see here okay
655:57 - so just follow these steps to be honest
655:59 - with you i don't think you need to
656:00 - associate email with gpg really right
656:02 - now but if you want to you can do that
656:05 - so i'm kind of like assuming that you've
656:07 - already done that
656:09 - for
656:11 - um
656:12 - for your computer and that you've
656:13 - created the ssh key you kind of know a
656:15 - little bit about git you have a github
656:17 - account now you have created your pgp
656:21 - keys and then you have told git about
656:24 - your pdp key so your signature comments
656:27 - are actually signed okay
656:30 - so the next thing we need to do is to
656:33 - now can you see we've been working on
656:35 - our um
656:37 - notes application my notes i think it
656:39 - was the
656:40 - um
656:42 - the project was called my notes here
656:46 - if you remember
656:47 - and um
656:48 - if i say git status here you will see
656:50 - that it says not a git repository and
656:52 - that's kind of a little bit sad because
656:54 - we've written quite a lot of code but we
656:56 - haven't really backed it up in github
656:58 - okay
656:59 - so
657:00 - what we need to do now is to go and
657:01 - create a github repository remember that
657:03 - bucket we need to create one of those
657:05 - buckets for our code
657:08 - so let's go i'm going to create a safari
657:11 - window here or
657:12 - chrome or brave
657:14 - firefox whatever you want to use and i'm
657:16 - going to go to github.com
657:18 - and i'm going to go into repositories
657:20 - here as you can see and i'm going to say
657:22 - new
657:23 - and i'm going to give it the name my
657:25 - notes all right i'm going to increase
657:27 - the size of the window so you see it
657:28 - better for the description i'm going to
657:30 - say my notes flutter application
657:33 - and you can see here that tells you it
657:35 - asks you if you want to create a public
657:37 - public repository or a private
657:39 - repository and the difference here is
657:41 - that if you create a public repository
657:42 - everyone can by default read
657:45 - the content that you're creating
657:47 - usually
657:49 - if if you're if you're not 100 sure what
657:51 - public means create a private repository
657:53 - because
657:54 - usually there's lots of information that
657:56 - you may want to create like a private
657:58 - information with some api keys
658:01 - so you want to probably create a private
658:02 - repository unless you know exactly what
658:04 - you're doing or if you want to for
658:05 - instance um
658:07 - contribute to open source projects and
658:09 - create an open source project from an
658:10 - absolute beginning then you go and
658:12 - create a public but you can always make
658:14 - your private repository public later
658:18 - and you can always make your public
658:19 - repository private later but that
658:22 - doesn't happen that often so
658:24 - it's probably a good idea to create a pr
658:27 - private in the beginning okay
658:28 - then in here add a readme file a readme
658:31 - file is pretty much just a file that
658:33 - will be displayed to whoever goes to
658:35 - your github repository and looks at just
658:38 - the index file of the github repository
658:41 - so you can place some information in
658:43 - there but it's usually a good idea to do
658:45 - that you don't have to but i suggest
658:46 - that you actually do that and then say
658:49 - excuse me
658:50 - and then say add git ignore and we
658:53 - haven't talked about git ignore before
658:54 - but what get ignore is that its name
658:56 - indicates is a file that dictates to get
659:00 - on your computer
659:02 - or on the computer of whoever has cloned
659:04 - your repository about what files should
659:08 - not be committed to your git repository
659:11 - so
659:12 - usually it's a good idea to have a get
659:14 - ignore file and in here for the template
659:15 - just choose dart okay
659:18 - dart
659:19 - okay
659:20 - and in here you don't have to choose
659:22 - license right now because you're
659:23 - probably not going to share this code
659:24 - with anybody as it is right now but you
659:26 - can always add a license later okay
659:29 - so
659:30 - i created a private repository some name
659:32 - uh which is my notes sorry yeah um
659:36 - i actually feel no for the name of the
659:38 - repository i'm going to change it just
659:39 - to lower in case i have no space it's
659:41 - just my notes okay
659:43 - and then i'm going to say create
659:44 - repository boom
659:47 - so as you've done that now you will see
659:50 - that you have a repository here
659:52 - and
659:54 - i mean there's nothing really in it okay
659:58 - so
660:00 - what we need to do now is to you see we
660:03 - have
660:04 - our code here and then we have a
660:06 - repository how do we put this code in
660:08 - there you may think okay i'm going to
660:09 - upload all the files by hand or like go
660:11 - and drag files here
660:13 - you could kind of actually do that but
660:14 - it's not a good idea
660:16 - and so what you need to do is just tell
660:19 - git now all of a sudden that hey
660:21 - this
660:22 - folder here is indeed a git repository
660:25 - remember from what i said before so you
660:27 - need to say git init
660:30 - i'm going to bring up the caption so you
660:32 - know what i'm talking about git init and
660:34 - then you say good and it dot okay all of
660:36 - a sudden this became a repository so if
660:39 - you do get status you see
660:41 - let me see if i can actually change the
660:42 - arrangement on the screen so you'll see
660:44 - more of the
660:46 - screen real estate
660:48 - and perhaps i could even do something
660:50 - like this
660:52 - is that a better idea than just doing
660:54 - this
660:55 - no probably not so this is better
660:58 - uh okay this is a little bit better so
661:00 - you see now it says now that you're a
661:02 - git repository i can see you have a lot
661:03 - of files that you haven't really
661:05 - committed and what we could do then we
661:07 - could say git add
661:09 - all
661:10 - add all these files and folders to my
661:12 - git repository and then i'm going to say
661:15 - git commit
661:17 - with the m as a message my initial
661:19 - commits okay
661:22 - see now if i say git status it says
661:24 - there's nothing to commit
661:26 - i want to kind of push these changes i
661:28 - want to send these changes together but
661:30 - how do i do that because if i say git
661:32 - push
661:33 - see it says oh i don't know where to
661:35 - push these things to
661:37 - so
661:38 - what you need to do now is to go to your
661:40 - github repository and then go to code
661:42 - and then grab this guy from here
661:46 - you see to the code to ssh
661:49 - and then copy this and then go in here
661:52 - and do what it says here git remote ad
661:54 - so i'm going to say git remote add
661:58 - origin it's the name of our remote for
662:01 - instance and now i'm going to add that
662:04 - if i say git push
662:07 - it says okay now that you've done that
662:09 - you still need to tell me that this main
662:11 - branch which is on your local computer
662:13 - is actually mapping to the main branch
662:15 - on github which is right here
662:18 - so you see here's the main branch and
662:20 - we're also on the main branch so
662:22 - you don't have to do this complicated
662:24 - code you could actually say git push you
662:26 - origin head which to me is a little bit
662:28 - cleaner
662:29 - and that will do the same thing for you
662:32 - updates were rejected because the remote
662:34 - contains work that you do not have
662:35 - locally this is usually because it's
662:37 - actually great that we got this
662:39 - i had a plan for this to happen but what
662:42 - is happening here is that you see if i
662:44 - go into this
662:46 - github repository
662:48 - and then
662:49 - i can click on this initial commit here
662:52 - you will see that when i created the
662:54 - repository and we chose all those you
662:56 - know readme file and the
663:00 - and the git ignore file these are files
663:02 - that are literally created on github
663:04 - using github by github and placed inside
663:08 - this repository so that is a commit you
663:10 - see it has its own
663:11 - and
663:13 - it has its own commit id
663:16 - now
663:17 - that commit is sitting there in that
663:19 - bucket over here so there's a commit in
663:22 - its own bucket okay now we have our own
663:25 - computer here with its own bucket
663:28 - and its own commit but all of a sudden
663:30 - we're telling this using that git add
663:32 - command that i said
663:34 - what we're doing is that we're we're
663:35 - making a connection between this local
663:37 - repository and the server repository and
663:39 - saying that any changes have happened
663:40 - here we want to push them over here and
663:42 - when we said git push
663:44 - these changes are rejected because it
663:46 - says oh you're you have changes here
663:49 - and commits and you're putting them in
663:51 - here
663:53 - but
663:54 - your changes your repository here didn't
663:57 - contain the changes that were already
663:59 - there so it's saying that there's a
664:01 - conflict i don't know what you're trying
664:02 - to do are you trying to like replace the
664:04 - contents that were over there with your
664:06 - stuff
664:08 - and to be honest with you that could
664:09 - actually be the case
664:11 - because
664:13 - you see what we did here we have a git
664:15 - ignore file here that was created for us
664:18 - by github and also we have our readme
664:20 - file which we probably actually don't
664:22 - need to be honest with you maybe we
664:23 - don't need that and also they get
664:25 - ignored but if you looked at the changes
664:27 - that were committed committing here if i
664:29 - say
664:30 - um
664:31 - lsla
664:32 - you will see there already is a file
664:35 - here
664:37 - it was called get ignore
664:40 - here you see
664:42 - which was created by flutter when we
664:44 - created our project flutter already
664:46 - added that so let's say cat
664:49 - and with ignore to see its contents and
664:51 - you'll see there's lots of stuff that
664:52 - fluffer has already created for us that
664:54 - says these things need to be ignored so
664:58 - what i'm trying to say is that all these
664:59 - things that exist over here we don't
665:01 - need them really so what you could do is
665:02 - say git push
665:06 - f
665:07 - and i believe that force pushes a bit
665:09 - push
665:11 - u origin
665:13 - head f
665:14 - which force pushes everything
665:17 - okay
665:18 - so i'm going to clear that now and i'm
665:20 - going to go to my notes repository and
665:23 - all of a sudden you see that
665:25 - here is you see
665:27 - and oh we already had a readme file as
665:29 - well so flutter has created a readme
665:31 - file that's that's amazing i didn't know
665:33 - this so i learned something that's
665:34 - pretty cool
665:36 - all right there we go so now we have our
665:38 - code basically pushed
665:41 - [Music]
665:42 - um so that is for our commit
665:46 - that is already
665:48 - placed there
665:50 - i'm gonna just take some items here that
665:52 - i've talked about them
665:55 - um
665:58 - great
665:59 - so that is already done as well pushing
666:01 - so now you have your changes over there
666:03 - okay on github
666:06 - now what we need to talk about is also
666:08 - tagging
666:10 - in this course i'm going to use a
666:12 - feature in git called tags
666:15 - a tag is just as its name indicates it
666:17 - kind of is a label
666:19 - so as you're as you become better and
666:22 - better at software development you'll
666:23 - understand that some places sometimes
666:26 - during your journey as a software
666:28 - developer the code that you wrote means
666:30 - a special thing to you for instance you
666:32 - may say
666:33 - after a whole weekend of work i could
666:36 - finally deliver like the verification
666:39 - screen to my users and that in itself in
666:42 - its essence essence has a special
666:45 - importance is it has a special meaning
666:47 - and you may want to tag it and by
666:50 - tagging it it means that i'm just going
666:51 - to give a special name to this so in the
666:54 - future if i want to go back to that
666:56 - point in time i don't go i don't have to
666:58 - go into my be it log and look at all my
667:01 - commits and see which one was that
667:03 - special commit but i also want to like
667:06 - give it a special name okay and that
667:08 - name is a an annotated tag or a tag that
667:12 - has a message applied to it all right
667:16 - so
667:17 - that is in its essence what tagging is
667:20 - so you're giving a name to your um
667:25 - to your uh work basically
667:29 - so what we need to do now here is to tag
667:32 - our work as step one we've done a lot of
667:35 - steps up to this point but none of them
667:36 - has been so
667:39 - like important that we actually have to
667:41 - commit yet but i think this is important
667:43 - enough now we have a registry screen and
667:45 - a login screen so that we can tag it so
667:47 - the way to create it to create an
667:49 - annotated tag and git you will literally
667:51 - just say git tag okay
667:55 - so
667:56 - let's go in here and say git tag and
667:59 - give it the name of step one
668:02 - all right now you can see if i want to
668:03 - push these tags to the back end sorry to
668:06 - github because those tags don't exist
668:08 - right here right now
668:10 - and
668:11 - what we could do is to say git push tags
668:14 - dash tags and this pushes all those tags
668:17 - to the server
668:19 - which is github in that case
668:21 - and to be honest with you i don't really
668:22 - know here one tag i can see all of a
668:24 - sudden here
668:26 - tags and step one is created there okay
668:31 - so what we could do also is that's after
668:33 - we have our gpg keys all set up we also
668:36 - can confirm that our work is truly
668:38 - signed
668:40 - and if i go to my notes here and then
668:42 - look at this commits
668:44 - um
668:45 - let's see if you can see that
668:46 - information
668:48 - somewhere here can we see all our
668:50 - commits
668:52 - um somehow here
668:54 - if you go to this timeline
668:57 - oh it's not showing me that information
668:59 - right now
669:01 - yeah but anyways you could you could
669:03 - have a look at whether your commits are
669:05 - signed by a little badge which i can't
669:06 - see right now so maybe there's actually
669:08 - something wrong with my pgp key so if
669:10 - you've done all the pgp installation
669:12 - correctly on our computer then you
669:14 - should see all your commits being signed
669:15 - and actually displayed here but with
669:18 - some sort of a badge but i can't
669:19 - unfortunately see that maybe github has
669:21 - changed that interface so that we can't
669:23 - see our verified and badge for our jpg
669:26 - keys yet so
669:28 - all right we talked a lot about
669:31 - gits in this chapter
669:33 - um so i think that's actually quite
669:36 - enough for this chapter and git we've
669:38 - talked almost 15 minutes about get to be
669:40 - honest with you and that's sufficient
669:43 - now that we've got get set up what we're
669:45 - going to use it for in the upcoming
669:47 - chapters is whenever we do something
669:49 - significant that needs to be saved we
669:51 - are going to commit that change and also
669:53 - tag it and send both our commits and our
669:56 - tag
669:57 - to github so that is stored securely in
669:59 - some sort of a cloud storage basically
670:02 - so
670:03 - that's how we're going to use git and
670:04 - github in this course
670:06 - and i thought of it as so important for
670:09 - every software developer to know that i
670:11 - thought if anybody is watching this
670:12 - course who is not a software engineer in
670:14 - front before
670:15 - then you definitely need to know about
670:16 - git and github before you can continue
670:20 - so what we're going to do in the next
670:21 - chapter then is to talk about email
670:23 - verification we've done login register
670:26 - screen is very simple but we haven't
670:27 - done the email verification yet and
670:29 - that's exactly what we're going to do in
670:31 - the next chapter so i'll see you there
670:34 - hello and welcome to chapter 16 of the
670:36 - swata course
670:37 - in the previous chapters we've talked
670:39 - about the login and registration page
670:41 - and also we took a little detour to talk
670:44 - about
670:46 - git and github
670:48 - so now you should have all those things
670:49 - set up so you should also have some sort
670:51 - of an emulator simulator or real device
670:53 - setup so we're testing our application
670:56 - right from visual studio code or android
670:57 - studio or sublime whatever text everyone
670:59 - on those devices
671:02 - um in this chapter we're going to as the
671:04 - caption says here we're going to talk
671:05 - about email verification
671:07 - and um
671:09 - i talked about this in the
671:11 - in
671:12 - one of the previous chapters why we need
671:14 - email verification
671:16 - but the main reason for that is as you
671:18 - can see in the caption here says people
671:20 - can sign up with emails they don't own
671:22 - and that is a little bit of a problem
671:24 - and
671:26 - um
671:27 - the reason why it
671:30 - is a problem is that you might
671:32 - get into a situation actually i can see
671:34 - here my wi-fi is kind of tripping
671:37 - okay it's connected now sorry about that
671:40 - and
671:42 - what could happen is if a user comes in
671:44 - to the application and starts your
671:46 - flutter application on their phone or
671:48 - tablet and then they sign up with an
671:49 - email that they don't own and then i as
671:52 - the rightful owner of that email address
671:55 - come to and download the same
671:56 - application and try to register my email
671:58 - and the applications as well this email
672:01 - address already exists
672:02 - so
672:04 - um so we have a problem here so what we
672:06 - need to make sure is that the p people
672:08 - who register in an email can also verify
672:11 - that they own that email address okay
672:14 - so let's take care of that in this
672:16 - chapter
672:18 - gonna bring up visual studio code or you
672:21 - also bring up the
672:22 - editor of your choice where you're um
672:26 - the editor that you're comfortable with
672:28 - um
672:30 - and i'm just gonna take in my notes that
672:32 - i've talked about that
672:35 - so what we're gonna do here as the first
672:37 - step is to go to our main dart file here
672:41 - right after home page and create a state
672:44 - full widget i believe
672:47 - so
672:47 - i'm going to do that right now so
672:49 - sd remember sdf stateful
672:52 - then we're going to call let me see
672:54 - verify
672:55 - email view
672:56 - all right
672:59 - and in here uh what we're gonna do
673:03 - is just to return a simple scaffold so
673:05 - i'm just gonna say return scaffold for
673:08 - now we're gonna get a cons error here so
673:09 - i'm just gonna
673:11 - put the constant there
673:14 - so
673:15 - um that's for our stateful widget
673:19 - then what we're gonna do is um
673:21 - we are as you can see here as soon as we
673:24 - see that um the email isn't verified
673:27 - here we just say you are sorry that it
673:30 - is verified we say you are a verified
673:32 - user and if you're not verified we just
673:34 - say you need to verify your email first
673:36 - but in both cases what we're doing is
673:38 - that we're just returning a text widget
673:40 - that says done and it's displayed here
673:43 - and so what we need to do here
673:45 - is
673:46 - to if the user is verified
673:50 - in here we're going to say return this
673:53 - otherwise what we need to do is to
673:56 - display this verify email view okay
674:00 - but
674:00 - the way we need to do this right now and
674:03 - we're actually going to fix this quite a
674:04 - lot as we go on but right now i just
674:06 - want to show you how to push a view into
674:08 - the screen now pushing is a concept that
674:11 - i believe came
674:12 - came into
674:14 - like a widespread existence after ios
674:18 - and android became popular in the early
674:20 - days of like 2006 2007
674:22 - actually was 2007 i think
674:25 - and pushing is where you have a screen
674:28 - and you're seeing that screen and then
674:31 - you press a button or something and
674:32 - another screen just kind of pushes
674:34 - itself on top of the existing screen
674:36 - okay
674:37 - so what we need to do now is to
674:40 - if we see that well you haven't
674:43 - verified your email you want to push
674:45 - this verify email view and a way to do
674:47 - that in um flutter
674:50 - is with something called a navigator and
674:52 - remember this is a little bit
674:54 - problematic the thing that we're gonna
674:55 - do right now is actually gonna cause an
674:57 - error and i will explain all this but
674:59 - for now let's just go go ahead and do
675:02 - this so we will fix things as we go on
675:05 - okay
675:06 - so
675:07 - right here that where we say you need to
675:09 - verify your email first and we can
675:10 - actually see that in the console um
675:13 - here um oh you can't see it because it's
675:15 - hidden by
675:17 - the caption but you can see now it says
675:19 - you need to verify your email first
675:23 - so let's go ahead and
675:26 - push that
675:28 - verify email view onto the screen what
675:31 - i'm going to do i'm going to get rid of
675:32 - this so um
675:35 - make the
675:36 - uh
675:37 - what should i do here should i go back
675:39 - to the same layout so you can see yeah
675:42 - that's probably better so go in here and
675:44 - say navigator
675:46 - off
675:48 - and
675:49 - then you say your build context and then
675:51 - you should say push
675:54 - now push is the function that you're
675:56 - calling
675:57 - and
675:58 - you can see here it acts it says okay
676:01 - give me
676:02 - a route
676:04 - and then you say material routes here
676:07 - um material page route
676:09 - okay and then there's a builder function
676:11 - in here
676:12 - and um
676:14 - like this i will explain all of this
676:16 - soon to you and then in here say verify
676:18 - email view
676:20 - just like that
676:22 - um
676:25 - we have to return
676:27 - all of this
676:28 - and i think we're
676:30 - there's something wrong with all this
676:32 - let's see builder and then we're doing
676:34 - that and then one parenthesis i think is
676:36 - missing is it
676:38 - so this one closes there
676:40 - then there's this one
676:42 - and it needs to be ruined and what is
676:43 - the actual error that's being displayed
676:45 - the return time future dynamic isn't a
676:46 - widget as required okay
676:49 - and uh what we need to do is just to do
676:51 - this
676:54 - and yeah that's fine so let's bring this
676:57 - return done back to where it was and
677:00 - then we remove this print statement from
677:02 - here as well and this print statement
677:04 - from there and make this cons and i'm
677:06 - gonna explain all of this so don't worry
677:08 - about it
677:10 - all right so
677:11 - what is happening here is as you can see
677:16 - sorry about that my throat isn't really
677:18 - working with me today
677:20 - so what is happening here is
677:22 - you see in our future builder here
677:26 - we are expected in the builder function
677:29 - which we are right now in here you see
677:31 - we're always expected to return a widget
677:34 - so that's what the future builder does
677:36 - it is in itself a widget
677:38 - that performs a feature and once that
677:40 - future is done or it errors out or
677:42 - whatever
677:44 - then it calls this builder function and
677:47 - in the builder function it is expected
677:48 - to return that builder function itself
677:50 - is expected to return a widget
677:53 - something to display on the screen okay
677:55 - now your job as a developer who's using
677:57 - the future builder is to actually return
677:59 - a widget in this builder function and
678:01 - that's why we're doing here what we're
678:03 - doing here we're saying if the
678:05 - connection state if the future is done
678:07 - return this text of done
678:09 - otherwise return this text so we have
678:12 - basically
678:13 - fulfilled the contractual um
678:17 - agreement here
678:19 - builder expects a widget we return a
678:22 - widget however we're trying to be clever
678:24 - here in saying that okay we do return
678:26 - done but also we're performing an action
678:28 - which is navigator of this context which
678:31 - is our build context and we haven't
678:33 - talked about build context so much
678:35 - before but you can actually see
678:38 - i mean the documentation isn't so clear
678:40 - maybe it says this class presents a set
678:42 - of methods that can be used from build
678:44 - methods and from
678:46 - but anyways what a build context is is
678:50 - kind of like a packaged bit of
678:51 - information that you can you can use in
678:54 - order to pass data from one widget to
678:56 - the other and it is very useful for for
678:59 - instance if you're using block and we
679:01 - haven't talked about block yet but just
679:03 - know the build context is kind of like a
679:05 - bit of information about the context
679:08 - where your widget
679:09 - is at
679:11 - so in here what we're saying we're
679:12 - saying create a navigator of this
679:14 - context and navigator is just a class
679:17 - for you okay and then when you tell
679:19 - navigator to push something it says okay
679:21 - what do you want me to push on the
679:22 - screen then we say create a material
679:25 - page route
679:27 - to push
679:28 - and you can see that material page route
679:30 - has an argument called builder which
679:33 - in itself expects a widget okay so you
679:36 - need to return a widget
679:38 - in this build function but all we're
679:39 - doing here to be honest with you it's
679:41 - just saying that push a widget on the
679:42 - screen that's all so this is like the
679:44 - format that you need to learn about okay
679:46 - navigator of the context push material
679:48 - page route builder context and then you
679:50 - put your widget in there
679:52 - okay
679:54 - all right that was a lot of information
679:57 - i mean this looks kind of okay at the
679:59 - moment
680:02 - so
680:03 - however there is a problem with it and
680:05 - if you're not careful you can miss that
680:07 - problem and i really always like to
680:09 - bring up my
680:11 - debug console so that i'm aware of all
680:14 - problems that might happen and the
680:16 - problem that you can see on the screen
680:18 - it said
680:19 - on handle exception package flutter
680:22 - widgets navigator dart failed assertion
680:24 - line blah blah in navigator
680:27 - so that there is an error
680:30 - [Music]
680:31 - and um
680:33 - there is actually a github issue for
680:36 - that i can see i've actually linked it
680:39 - there as well but we're going to come to
680:40 - that but just be aware that what we are
680:42 - doing here is not really good
680:45 - it's not a good idea to push something
680:47 - inside a future builder but we're going
680:50 - to do it anyways just so we can fix it
680:52 - later so that you know at least this
680:55 - issue exists and at the same time we
680:57 - achieve what we're trying to do here
680:59 - which is displaying a new widget
681:03 - once a condition is met in this case the
681:05 - user's email is not verified okay
681:11 - all right
681:13 - what we need to do now is fix this up
681:16 - fix our
681:19 - widget up here
681:20 - i'm gonna just take some items in my
681:22 - notes
681:24 - alright so
681:26 - at the moment our
681:28 - uh verify email view
681:31 - it it's it's a completely wide scaffold
681:33 - it doesn't even have an app bar there's
681:35 - nothing in there so what we can do is
681:37 - just to first of all go and create an
681:39 - app bar here so we say app bar
681:41 - and app bar title
681:43 - we've done this before so you should
681:44 - know already the syntax and then the
681:46 - title is just gonna say verify
681:48 - email verify email
681:53 - and i can see appbar title is text i
681:56 - don't even know what i've done wrong
681:57 - here to be honest with the constraint
681:58 - isn't the cons instructor it just means
682:00 - that well okay i have to remove this
682:02 - and i have to make this text const
682:05 - um i mean
682:07 - i'm i'm like moving past these things
682:10 - but you may be a little bit confused if
682:11 - you're not if you haven't done this
682:13 - before you may be confused what i'm
682:14 - doing here let's maybe i should explain
682:17 - actually this what is happening here you
682:19 - see
682:20 - before we started using the app bar in
682:22 - scaffold everything was completely fine
682:24 - dart was completely okay and i said okay
682:26 - i'm gonna accept this as it is what
682:28 - we're telling dart here is that we're
682:30 - creating a scaffold and it is a constant
682:32 - scaffold it means it is we're not
682:34 - actually doing any special configuration
682:36 - that makes this not a constant okay but
682:39 - that's so let's actually go here i'm
682:42 - going to hold down command on my
682:43 - macintosh you can hold down control your
682:45 - linux machine or windows and click on
682:47 - scaffold
682:49 - excuse me
682:50 - and you can see that the initializer
682:52 - that i'm calling here or the constructor
682:53 - that i'm calling here is marked as const
682:55 - here okay
682:56 - but as soon as we put app bar in here
682:59 - and i'm going to click on the same thing
683:00 - again let's see
683:04 - if we can find that initializer
683:09 - scaffold app bar this app bar i can't
683:12 - really seem to find that particular
683:14 - initializer
683:16 - but what is happening
683:18 - essentially here is saying that
683:20 - um
683:22 - what you're trying to do here which is
683:25 - creating an app bar with a text inside
683:28 - here a text widget and an app bar makes
683:31 - this scaffold widget not a constant
683:33 - anymore okay so
683:36 - the first thing you need to do is say
683:37 - okay i understand that that's not a
683:38 - constant anymore remove this constant on
683:40 - scaffold but then you get an error here
683:42 - or
683:43 - well a problem telling that okay you've
683:46 - removed the comms from scaffold but
683:47 - still you could make your code better by
683:49 - making your text a constant because this
683:51 - text scene text widget seems to be a
683:54 - constant all right so i'm going to make
683:56 - that a constant now
683:59 - all right so back to our
684:01 - so i'm going to press command s here
684:04 - is not true and i'm going to hot restart
684:09 - verify email okay and i can see we have
684:11 - yeah it's
684:13 - again we have a problem with hot reload
684:15 - because as soon as we do hot reload then
684:17 - we get this error but this error is
684:18 - simply because of something weird that
684:21 - we're doing in here so if you get error
684:23 - just do hot restart and you should be
684:24 - good to go until we fix this problem
684:26 - okay
684:27 - all right so as you can see in the
684:29 - caption of this chapter what we need to
684:31 - do here is to display a column text and
684:33 - a text button to send the verification
684:35 - email so let's go to the body of our
684:38 - scaffold so i'm just going to say body
684:40 - and let's create a column
684:42 - children and inside the children
684:45 - let's just go and say we have a text and
684:48 - say please verify
684:51 - your email address
684:55 - and that's that and then what we're
684:57 - gonna do in here we're gonna place a
684:59 - text button as well
685:01 - and perhaps what could be better
685:04 - is
685:05 - if i scroll this a little bit up so you
685:06 - can see the code in its entirety
685:09 - then the text button if you remember
685:10 - from the previous chapters it has two
685:12 - very important and required parameters
685:14 - child and on press
685:16 - according to darts
685:18 - analysis tools or flutters analysis
685:20 - tools
685:21 - the child parameter of those widgets or
685:24 - those functions that do accept the child
685:27 - is preferred to always be the last
685:29 - parameter so go ahead and create the
685:31 - unpressed first and then go ahead ahead
685:34 - and create the child so in the child
685:36 - we're going to say text off
685:38 - and send email verification
685:42 - okay
685:43 - and make this text content so dark is
685:45 - happy about that and make this constant
685:47 - as well press command s
685:49 - and don't forget the comma here then hot
685:52 - reload so we can see the results
685:55 - okay so now we have some text in there
685:58 - and then we have a button here that says
685:59 - send email verification
686:04 - okay i'm going to take it in my notes
686:05 - that i've talked about that so we don't
686:07 - miss it um
686:08 - now what we need to do here is upon
686:11 - pressing this button
686:13 - we actually need to send an email
686:16 - verification to the current user okay so
686:19 - what we need is the current user so that
686:22 - comes from let's see
686:24 - if we can find it in our
686:28 - login view and register view we have you
686:30 - see login views or credentials firebase
686:33 - code
686:34 - um let's see actually we got the user
686:37 - right here firebase initialize app and
686:39 - then we were like fire yeah that's how
686:41 - you get your current user firebase auth
686:43 - instance current user okay so i'm going
686:45 - to copy that information from our
686:49 - home page okay and bring it into your
686:52 - verify email view state in the button
686:54 - press right there
686:56 - so this is how you get your
686:58 - user okay
686:59 - now what we need to do is as the caption
687:02 - says here we need to await on the user
687:04 - send email verification so say await
687:07 - user send
687:09 - let's see
687:12 - user send email verification okay so now
687:14 - you can see this is a function
687:16 - and it says it can't be unconditionally
687:19 - invoked and that is because user can be
687:22 - nil
687:23 - or null
687:24 - and it is an optional user so as you've
687:27 - understood from the previous chapters
687:28 - you need to conditionally
687:30 - access this function now be a little bit
687:32 - careful here because this function is a
687:34 - future you see it's a future void so as
687:36 - you know calling a function that returns
687:38 - a future void does not invoke the future
687:41 - except it only tells the function to
687:44 - return the future okay so if you
687:46 - actually want the future to be executed
687:48 - you need to wait on it so if you then
687:50 - say await here
687:53 - you'll see we get an error telling that
687:55 - yeah you can't do asynchronous call
687:58 - calls in this current uh
688:01 - scope that you're at and that is simply
688:02 - because the unpressed function is not
688:05 - marked as asynchronous okay so remember
688:07 - that
688:08 - great
688:09 - so
688:10 - um i'm gonna press command s here we get
688:12 - the error i'm gonna do this hot restart
688:16 - then
688:17 - uh if i'm not mistaken i mean if i bring
688:19 - a browser up let's see if i can bring a
688:21 - browser window here and i'm going to say
688:23 - console.firebase google
688:26 - and let's go to our mynotes flatter
688:28 - project and let's go and have a look at
688:30 - our authentication i can see that
688:32 - there's a user here it says
688:34 - pixelityab.gmail.com for you it's
688:36 - probably gonna say something else
688:37 - hopefully it's gonna say something else
688:39 - so that you haven't registered with my
688:40 - email
688:41 - and what we need to do then is to simply
688:44 - go here and press the send email
688:46 - verification button
688:48 - boom
688:49 - okay
688:50 - so nothing happened on the screen
688:54 - and um
688:55 - i'm going to bring up the right caption
688:57 - here so you know what we're talking
688:58 - about now we want to kind of look at how
689:00 - this email actually looks like
689:02 - so let's see if i can bring up that
689:05 - email without uh
689:08 - without uh
689:12 - i like bringing up all my
689:15 - um
689:16 - other emails and other users because
689:18 - that's kind of like private information
689:21 - so
689:22 - all right so uh let's go ahead and see
689:25 - i'm gonna then bring up this email on
689:27 - the screen so you can see how it looks
689:30 - like so
689:31 - as as
689:32 - that email address you can see here
689:35 - that's my email address or this is the
689:37 - user that is logged in into our
689:38 - application then received an email from
689:41 - firebase which is no reply at
689:43 - mynotesflusterproject.firebaseapp.com
689:46 - okay
689:47 - and it says okay you need to click on
689:48 - this link in order to verify your user
689:53 - so
689:54 - now
689:55 - i'm just going to take in my actions in
689:57 - my notes here that i've talked about
689:59 - that
690:01 - and let's then click on this link to
690:03 - verify our identity and here it says
690:05 - your email has been verified you cannot
690:07 - sign in with your new account great okay
690:10 - so i'm going to close that taking in my
690:12 - notes that i've talked about it
690:15 - um and what we can do here then is just
690:18 - to
690:18 - refresh here and there's nothing really
690:20 - different about this user as you can see
690:24 - so
690:25 - um
690:26 - we're also looking at that user and you
690:28 - can't really i mean at the moment i
690:30 - can't personally see if this user is
690:32 - verified
690:33 - or not so
690:35 - maybe that's something that firebase is
690:37 - going to provide in the future just like
690:38 - a checkbox or something saying or like a
690:41 - yeah just like a check icon saying
690:42 - whether this user is verified or not but
690:44 - you can't see that at the moment in
690:46 - firebase console at least i can't
690:50 - all right a lot of information now let's
690:53 - go to our um
690:56 - talk about this error that we got on the
690:59 - screen
691:00 - and i've provided a little link here
691:02 - which i'm going to click on on a
691:04 - separate screen and then bring it bring
691:06 - it up here on the screen that you can
691:08 - see
691:09 - now if you remember where we pushed this
691:13 - verify
691:14 - email
691:15 - widget on the screen
691:17 - using navigator and then material page
691:19 - route i think it's called
691:21 - and where is it material page right here
691:23 - do you remember
691:24 - then we got this error on handle
691:26 - exception okay and then there's an issue
691:28 - actually for that here on
691:31 - flutter's
691:33 - github repository so as you know flutter
691:34 - is an open source project and
691:37 - is an organization here on github and
691:39 - pretty much everything that they're
691:40 - doing for flutter is under that
691:43 - organization on github so as you can see
691:45 - here it says how to call navigator push
691:48 - in future builder error log and then
691:50 - there's lots of great discussions about
691:52 - like
691:53 - what should be done and etc but
691:55 - just know that for now what you need to
691:58 - know is that you cannot do that without
692:00 - having that error although although
692:02 - things may seem fine in
692:04 - on the screen but as you saw as soon as
692:06 - you do a
692:07 - hot
692:08 - hot reload and then you will have this
692:11 - error also so there is an exception
692:14 - being thrown and we need to
692:16 - handle that
692:18 - all right so
692:20 - after you've looked at that uh
692:22 - github issue and you've gone through the
692:24 - comments you'll understand that that's
692:26 - not the way to do things in flutter at
692:28 - least not for now
692:30 - and um i'm actually gonna take it in my
692:33 - notes so if you see me looking here i'm
692:34 - just making sure that i'm explaining
692:36 - everything to you okay
692:37 - um
692:39 - so what we need to do now is to go and
692:41 - change the way our
692:43 - um
692:45 - our verify email view is created so
692:50 - so instead of us returning
692:53 - you see here what we're doing is that
692:55 - we're in our verify email view what
692:58 - we're returning we're returning an
692:59 - entire scaffold and that is why we're
693:02 - trying to push this screen on our
693:05 - current home home page because we're
693:06 - saying that here's the home page and
693:08 - then there this is the verify email view
693:10 - and it has a scaffold just like the home
693:12 - page does do you remember if you go up
693:16 - to our homepage homepage also has a
693:18 - scaffold and an app bar so what we're
693:20 - pretty much saying right now is that
693:22 - this is the home page and we kind of
693:24 - need to move another page on top of it
693:26 - which pretty much has the same structure
693:28 - it has the app parts etc etc
693:30 - and that is causing the problem because
693:32 - we're pushing something in future
693:33 - builder and we're not allowed to do that
693:36 - so
693:37 - what you need to do now is
693:39 - in order to fix this problem just for
693:41 - now
693:42 - we go and remove the scaffold and in our
693:45 - build function all we're gonna do is
693:47 - just to return the column okay so go on
693:50 - your scaffold here and
693:53 - here
693:54 - and what we're gonna do is we're just
693:55 - gonna say uh let's see if we have a
693:58 - remove functionality here and we don't
694:00 - and that's okay
694:01 - i'm just going to grab this column
694:04 - and i'm going to bring it a little bit
694:05 - up so you can see i'm going to put a
694:06 - comma here
694:08 - hot hot reload so we don't see the ugly
694:10 - error on the screen
694:12 - and grab your column here
694:15 - and without the comma at the end grab
694:17 - that column and in the build function
694:20 - just return that okay instead of your
694:21 - scaffold and a semicolon at the end all
694:24 - right
694:27 - um
694:28 - so that's what we're gonna do now
694:31 - for now we're just gonna return column
694:32 - there and then what we need to do
694:35 - um
694:36 - let me see actually that's what we're
694:38 - gonna do now or is it something that
694:39 - we're gonna do later
694:41 - yeah
694:42 - um
694:43 - so yes
694:44 - we've now changed verify email view and
694:46 - that returns a column now let's go in
694:48 - here you see in here when we see that
694:51 - the user isn't verified uh what we need
694:54 - to do then is to say navigator instead
694:56 - of navigator of we're gonna just return
694:59 - our verify email view in here okay so
695:01 - let me go in here and just say return
695:03 - that
695:04 - as a constant
695:07 - and in here
695:11 - otherwise do that so i'm going to press
695:13 - command s here
695:14 - and a hot
695:16 - reload
695:19 - okay
695:20 - so
695:20 - let's go and see what is happening here
695:22 - so what we're saying is that
695:24 - if user instance current if user email
695:27 - verified then return done otherwise
695:30 - return verify email view so
695:32 - what's happening to be honest with you
695:33 - is that
695:34 - previously where we were pushing an
695:36 - entire screen on the current screen now
695:38 - what we're doing is saying that here is
695:40 - a screen already put this verify emails
695:44 - email views widget
695:47 - that returns that is returned from the
695:48 - build function right inside this current
695:52 - screen's content okay so it's a little
695:54 - bit of a difference instead of pushing a
695:55 - whole new screen we're putting that new
695:58 - screen's contents in our screen all
696:00 - right
696:03 - okay and now we have this and i see now
696:08 - that
696:08 - our app still thinks that we're not
696:11 - verified but what we could do is just to
696:13 - make sure you can see here that
696:16 - um at least we're not getting that ugly
696:19 - error anymore so if i do a hot restart
696:21 - here
696:23 - i can see this email verification and
696:25 - that's a little bit strange to be honest
696:27 - with you because we did verify our user
696:30 - so what i'm going to do is just to
696:31 - ensure that this this phone right now
696:34 - has
696:35 - um
696:38 - internet connection
696:40 - and it does so that user should have
696:42 - been verified
696:44 - and i think we actually did click on the
696:47 - verification email so let me go back
696:49 - here
696:50 - go back to the application
696:52 - and what we could do is just to stop the
696:54 - application from running and then press
696:56 - run without debugging and just to ensure
696:58 - that everything is set up correctly
697:01 - so if everything is working fine then we
697:04 - shouldn't come to
697:05 - verify email view instead we should go
697:07 - to
697:09 - here
697:10 - we should display the done text to the
697:13 - to the user
697:14 - so
697:16 - let's just let's just ensure that that
697:17 - is working as expected before we
697:19 - continue with the next item
697:25 - i can still see this and we could simply
697:27 - put some um
697:29 - poor man debugging in here and just
697:30 - prints the user email like that prints
697:33 - the entire
697:34 - user to the screen command s okay
697:36 - and let's go in here i can see email
697:38 - verified is still false is anonymous
697:41 - false metadata
697:42 - last signing time so it still thinks
697:45 - that i'm not verified so what i'm going
697:47 - to do is i'm going to send an email
697:48 - verification
697:50 - and i'm just going to go to my mail here
697:54 - and let me go here
697:57 - and let's just i'm going to bring up
697:59 - that email
698:01 - and let me just ensure that
698:04 - we can
698:06 - click on that link
698:07 - and it says your email has been verified
698:10 - okay
698:11 - then let's close this and i'm gonna do a
698:14 - hot reload
698:16 - here
698:17 - and to be honest with you i can still
698:18 - see now that we're not verified so
698:22 - let's go in to safari
698:24 - and say
698:25 - um
698:26 - firebase
698:28 - flutter email verified not working
698:34 - email verification
698:36 - let's see if there's something that
698:37 - we're missing
698:39 - uh firebase auth current user and then
698:42 - user null is email verified and i
698:45 - believe that is what we're doing here it
698:47 - this is not hopefully a future is
698:49 - actually a user
698:50 - yeah and
698:53 - in here we're initializing the
698:55 - application so that that should work
698:57 - fine as well
698:58 - and then we're getting the user and then
699:00 - email verified that should also work so
699:03 - um
699:05 - one thing to implement is email verified
699:07 - and initiate function imperiality can be
699:09 - ideal approach to easy for verification
699:10 - with firebase well that's not really
699:13 - the problem here
699:16 - connection state waiting
699:18 - and it could simply be that we need to
699:21 - just try to log in with that user so
699:23 - that it tries to contact firebase again
699:25 - okay
699:26 - so
699:27 - what i'm gonna do here is to as we have
699:30 - planned here let's go and change both
699:34 - the login view and the register view as
699:36 - well so that they don't return
699:39 - an entire scaffold but instead we're
699:41 - gonna make sure that they only return
699:44 - their actual content
699:47 - okay as you can see i put in the caption
699:48 - here that they shouldn't for now return
699:50 - a scaffold
699:52 - um
699:53 - so that's going to be done in the home
699:54 - page so let's go
699:56 - and i can see i have a little bit of
699:57 - them
700:00 - now return a scaffold that's the
700:03 - job of home page so i just fixed our
700:07 - little caption there as well let's go to
700:08 - login view and i'm gonna go here
700:11 - and let's go to your login view here you
700:13 - can see we have firebase initialize app
700:15 - future builder we have all that logic
700:17 - also in both login view and registering
700:19 - we shouldn't be doing that so i'm gonna
700:21 - grab this return column all the way from
700:24 - there
700:24 - and
700:25 - go to all the way where the return
700:27 - column ends
700:29 - grab that then i'm gonna pretty much
700:32 - nuke the entire
700:33 - build function and instead return the
700:36 - column okay so that's our login view
700:40 - and now we have a lot of
700:42 - unused imports i'm going to remove them
700:45 - as well
700:46 - and i'm going to go to our
700:48 - register view and
700:51 - for now as well do the same thing for
700:53 - register view
700:54 - go to your build function in the
700:56 - register view and everything
700:58 - needs to be removed except for the
701:00 - actual content which is the column
701:02 - so
701:04 - grab the column as you can see here
701:07 - nuke the entire build function
701:10 - and just return your call all right
701:13 - so what i'm gonna do here is
701:15 - to
701:17 - fix this email verification issue
701:19 - perhaps what we need to do here
701:21 - is
701:22 - for now
701:23 - let's go in here and
701:27 - turn just comment out all the codes so
701:29 - when the initialization of firebase is
701:31 - done just return your login view so
701:33 - let's say return
701:34 - login view
701:36 - okay as a constant so i'm just gonna
701:38 - press command s and then we come here
701:41 - and i'm going to enter pixelityab
701:43 - gmail.com football baz okay
701:46 - and if you remember from login view if
701:48 - you go back to login view
701:50 - we had this beautiful little thing that
701:52 - printed the user credentials to the
701:54 - screen so
701:55 - that is saved already and i've saved
701:58 - here as well
701:59 - so let's go and enter that information
702:01 - pixel tab at gmail.com and then through
702:04 - bar bas
702:05 - and let me bring up the debug console
702:08 - and kind of change the screen layout so
702:09 - so you see it a little bit better as
702:10 - well i'm going to clear the console
702:13 - and i'm going to press the login button
702:15 - so
702:16 - here now we have the user credential you
702:19 - can see it's printed to the screen
702:21 - and now email verified is set to true so
702:25 - the problem there was that
702:28 - when there's email verification sent
702:30 - firebase
702:31 - as you as a user i mean there's
702:33 - something for me to learn as well so
702:35 - i'm actually grateful that i'm learning
702:36 - as i'm actually teaching
702:38 - so
702:39 - one once what happened here is that we
702:42 - verified an email and that email
702:44 - verification
702:46 - we clicked on the link but firebase
702:48 - doesn't immediately understand that
702:50 - you've
702:51 - as a user have verified your email now
702:53 - so what you need to do you need to ask
702:55 - the user to log in and upon that point
702:57 - it seems like firebase is actually
702:58 - refreshing that data locally as well as
703:00 - contacting firebase backend and getting
703:02 - the latest information from there so
703:04 - just because your user has verified
703:06 - their information doesn't mean that the
703:08 - application is immediately going to
703:09 - understand that so you need to ask the
703:11 - user to log in again okay
703:15 - so i can see here now we were supposed
703:17 - to return the logging view um
703:20 - so
703:22 - i'm going to take some items in my notes
703:24 - just to make sure that i've talked about
703:25 - them
703:27 - and we're returning the login view right
703:29 - now from
703:32 - from our home page so this is something
703:34 - you'll need to do also before we
703:36 - continue to the next chapter
703:40 - all right that was a lot of information
703:42 - and um
703:46 - but
703:47 - for this chapter
703:48 - what we've done pretty much is just to
703:50 - create the uh verify uh email view or
703:54 - what we call it is it called verify
703:56 - verify email view we ensure that it can
703:58 - send an email we clicked on the link in
704:00 - the email and made sure that the user is
704:01 - verified and that's and that all has
704:04 - been working fine
704:05 - um
704:06 - but we still have a lot to work on and
704:09 - as you can see it right now i'm going
704:10 - into the code and manually like
704:12 - returning the screens that i personally
704:14 - want to see or it's important for you to
704:16 - see for instance the login view but
704:19 - if you display login view how is the
704:21 - user able to go from the login view to
704:23 - register if they don't have an account
704:26 - that they can log in with so that's what
704:28 - we're gonna do in the next chapter we're
704:30 - gonna create links between our screens
704:33 - so that a user can go from one screen to
704:35 - the other and then
704:37 - back
704:38 - so
704:39 - um
704:40 - so yeah great job that's it for this
704:42 - chapter and i'll see you in the next one
704:45 - hello and welcome to chapter 17 of the
704:47 - slotted course
704:49 - in the previous chapters we've been
704:51 - working quite a lot with some of the
704:53 - basics of flutter for instance stateful
704:56 - stateless widgets we've been looking at
704:58 - a column we've been looking at text
705:01 - button and many other widgets and kind
705:03 - of trying to get
705:05 - our screens presentable to the user and
705:08 - at the same time we've been working on
705:09 - the functionality of the applications
705:11 - such as logging in registering verifying
705:13 - email etc
705:15 - we have a lot to work on
705:17 - and um we're gonna break it down by
705:20 - first starting to work on the link
705:22 - between the login and the register view
705:24 - as you can see here
705:26 - at the moment we i mean i'm going to
705:28 - bring up the code um
705:30 - the way we left it in the previous
705:32 - chapter
705:33 - as you can see here in the main function
705:37 - sorry in our
705:39 - home page widget and also let me change
705:42 - the
705:43 - um
705:44 - let me change the structure on the
705:46 - uh of the different views on the screen
705:48 - so you can see a little bit better so if
705:51 - i do a hot restart here you can see that
705:54 - um when the connection state is done
705:56 - when the firebase application is
705:57 - initialized i'm displaying the or we're
705:59 - displaying the login view here without
706:01 - basically having the option to go to any
706:04 - other screen from here so if i want to
706:06 - send the user to the register view then
706:08 - i have to change this code right here
706:09 - and say okay now you have to
706:11 - go to register view
706:13 - so
706:14 - that's why we need a link between these
706:17 - two views i'm sorry i'm looking at this
706:19 - screen just because i need to actually
706:22 - ensure that i tick the items that i've
706:24 - already explained so um we need to make
706:26 - sure that when a user is on the login
706:28 - screen even if that's the first screen
706:30 - that we always display to the user which
706:31 - is not
706:32 - but if even if it was we need to be able
706:34 - to let the user to go from the login
706:36 - screen to the registry and also from
706:38 - registry view back to the login screen
706:41 - so that's what we're gonna do in this
706:44 - chapter
706:46 - so
706:47 - as the first
706:48 - item that we have to tackle
706:50 - is to go to our login view and add a
706:52 - button that will send us to
706:55 - the registry so i'm going to open up
706:58 - i'm going to bring it here make the
707:00 - screen a little bit smaller here
707:02 - so let's go to our login view which i
707:05 - can see is actually modified um yeah
707:07 - that's okay actually so
707:10 - and what we need here you can see we
707:12 - have a text button and that is for our
707:14 - login view the login button
707:17 - and as you can see the cache has added
707:19 - text but it's allowing you to send us a
707:20 - registry view so right after this text
707:22 - button let's create a new text button
707:24 - and i'm going to bring it a little bit
707:25 - higher so you can see i'm going to say
707:27 - text button remember uh child parameter
707:30 - always has to be at the la at the
707:33 - it should be the last parameter so i'm
707:36 - going to say unpressed ask visual studio
707:38 - code to complete it for me and then i'm
707:40 - going to say child the text is going to
707:42 - say what should it say
707:44 - should it say not registered
707:47 - yet
707:48 - and we say register here something like
707:51 - this i make it a constant okay
707:53 - and i'm gonna save this and you can see
707:55 - now that we have a little button here
707:56 - that says not registered yet register
707:59 - here
708:00 - okay so that part is done but the button
708:03 - at the moment the way it is right now
708:04 - it's not doing anything so
708:06 - we need to address that
708:09 - but before we can do that we need to
708:11 - talk about
708:13 - named routes
708:15 - you see in the previous exercise or in
708:18 - the previous chapter
708:20 - we use navigator and
708:23 - dot of context and push
708:25 - and then we created a material page
708:27 - route
708:28 - that may have all been kind of like
708:30 - alien to you and you didn't really know
708:32 - what was happening and that's okay you
708:33 - will get to know it more and more as we
708:35 - go through the various chapters in this
708:37 - in this course but what we need to do
708:39 - here is to first talk about what a route
708:42 - is and what a name route is and i've
708:44 - actually put a link to a documentation
708:47 - here for you
708:49 - that we can go i'm going to bring up my
708:51 - web browser and i'm going to create a
708:52 - new window and i'm going to say flutter
708:55 - mean routes
708:56 - which is going to end up in the exact
708:58 - same link that you can see there
709:01 - and it says here in the navig in the
709:03 - navigate to a new screenplay recipe
709:05 - however if you need to navigate to the
709:06 - same screen actually it wasn't such a
709:08 - great description to be honest i was
709:10 - kind of expecting a little bit of better
709:12 - description but maybe i can do that
709:14 - myself instead of you having to look at
709:15 - this and i can see to be honest with you
709:17 - this
709:18 - this
709:19 - webpage is a part of a cookbook which
709:21 - kind of is probably all
709:24 - like linked together so in order for you
709:26 - to understand this page you actually
709:27 - have to go to this link and read that
709:30 - and then see
709:31 - and then this would be the continuation
709:33 - so
709:34 - i just put the link here just so you
709:36 - have it as reference
709:38 - but i'm gonna explain that myself here
709:40 - now if we go back to um where we had the
709:44 - named route let's see
709:45 - uh where did we have the name route when
709:48 - we pushed it it was quite a bit before
709:50 - this
709:52 - if i can undo here
709:54 - so this is something called an anonymous
709:57 - route so sorry about that i said name
709:59 - route but this is an anonymous route so
710:02 - a route is as its name indicates in
710:04 - flutter is it's a journey that has a
710:07 - start and an end so it starts from a
710:09 - view and it ends in a view okay that's a
710:11 - route
710:13 - um
710:14 - however there are two types of routes
710:15 - and you can create in flutter either you
710:18 - do your routes either you go to a new
710:19 - screen to your destination from the
710:22 - current screen without providing any
710:24 - sort of information about what this
710:25 - route actually means to your application
710:27 - so it's an anonymous route you're doing
710:29 - it in line you're not telling flutter
710:32 - about this route beforehand
710:34 - so as the user presses the button or
710:37 - for instance in this case as the user
710:39 - ends up in the home page and the future
710:41 - builder initializes firebase upon the
710:45 - connections they've done meaning that
710:46 - the initialization of firebase is
710:48 - complete then we were pushing
710:50 - the verify email view on the screen and
710:52 - then we
710:54 - fixed it by doing all this code
710:56 - so that was an anonymous route you're
710:58 - doing it in place as the done connection
711:00 - state happens then we were pushing a new
711:03 - route
711:04 - uh in our navigator
711:06 - but a named route is the exact same
711:10 - thing that we write like we were doing
711:12 - before but you tell flutter about that
711:15 - route before so that when your
711:17 - application is created and initialized
711:20 - and the flutter engine starts it knows
711:23 - that there is a route with the name xyz
711:25 - for instance or fubar bass whatever you
711:27 - want to define
711:28 - and it goes to a certain
711:32 - screen okay so that is the difference
711:34 - between an anonymous route and a name
711:36 - route in that as its name indicates a
711:38 - named route
711:39 - is a route that has a name so you tell
711:41 - flutter that associate this particular
711:44 - name as a type of string to this route
711:50 - okay i'm going to take it here
711:52 - in my notes that we've talked about that
711:56 - so what we need to do now
711:59 - is to define two routes for our
712:01 - application one called slash login slash
712:03 - and the other one is called slash
712:05 - register
712:06 - okay
712:08 - so let me just go and ensure that i'm
712:10 - bringing those routes correctly so
712:13 - what i'm going to do here and you need
712:15 - to do as well is to go to your main
712:18 - function
712:20 - and at the moment we have a title for a
712:22 - material app and a theme data and then a
712:25 - home here
712:27 - but what you also have is a parameter
712:29 - called routes okay so let's go and say
712:32 - we want to create these routes
712:36 - and you can see here it says routes its
712:39 - value is a map of string and a builder
712:42 - function for the values of those
712:44 - uh string keys so it's a little bit
712:47 - strange it's a map whose keys are
712:49 - strings and
712:50 - values are functions that take in a
712:54 - build context sorry about that and
712:56 - return a widget so it's a little bit of
712:59 - a
713:00 - it's like maybe a paradigm shift in your
713:01 - head but these things do exist and i've
713:04 - already i've also created my own classes
713:07 - that kind of expect this kind of
713:08 - parameter
713:09 - so let's go into routes and say okay now
713:11 - we have routes
713:13 - as you know as you know this is how we
713:15 - create a map map is a is a list of key
713:18 - value pairs
713:19 - or map entries as they're called in
713:21 - flutter
713:23 - and then what we need to do here is i'm
713:26 - sorry but i'll just move some code
713:28 - around i have three screens here so i
713:30 - kind of have to manage those screens at
713:31 - the same time i'm explaining things so
713:34 - what we're gonna do here is to define
713:37 - two routes slash login all right and
713:40 - remember the value of this of the value
713:42 - of every key inside this routes needs to
713:45 - be a function you see it's a function
713:48 - that returns a widget and it takes a
713:50 - build context inside so in here what
713:53 - we're going to do is say we have a
713:56 - context
713:58 - and we return actually sorry login slash
714:02 - we return the login view all right so we
714:05 - say have a route called slash login
714:07 - slash and when that route is used it
714:10 - returns the login view
714:13 - an instance of the login view now we
714:15 - need to do the exact same thing but for
714:16 - register so i'm going to copy this
714:19 - and here just going to say register and
714:21 - instead return the register view which
714:23 - we haven't imported into our main dart
714:25 - file and you can remedy that by pressing
714:28 - command dot on mac or control dot on
714:30 - windows and linux and then say import
714:33 - register
714:34 - view
714:37 - okay that's that and i'm gonna have a
714:40 - look at my notes a little bit
714:43 - so
714:44 - what we need to do now um i've already
714:46 - explained that okay in log area all
714:48 - right so what we need to do now is to go
714:51 - from login to the register view
714:54 - and as you can see i've explained it
714:56 - here in the caption that this will
714:58 - actually cause an error but we will fix
715:00 - this error as we go forward okay
715:03 - so
715:04 - in this uh register view here sorry in
715:07 - this um
715:09 - in our login view so let's go to the
715:10 - login view we have this button right
715:12 - here and what we need to do is just to
715:14 - ensure that by pressing that we can go
715:17 - to the correct place
715:20 - and
715:21 - i think i brought up the caption
715:23 - and you can see that we need to use
715:25 - navigator of context push named and
715:28 - remove until
715:30 - and this this is kind of a peculiar call
715:33 - because what it essentially does is as
715:35 - you can see right now on the screen we
715:37 - have
715:38 - the
715:38 - login and
715:40 - we basically the way we've created
715:42 - things at the moment is that we have the
715:44 - home view which is a widget
715:47 - and then depending on the state of
715:49 - actually no not depending on anything
715:52 - we're literally just hard coding login
715:54 - view to be returned inside this okay so
715:57 - we have the home widget and then inside
716:00 - this home widget we're inserting the
716:02 - contents of login view so login view and
716:04 - home page are kind of like displayed on
716:06 - top of each other
716:08 - and
716:09 - this home page has the scaffold whereas
716:11 - the
716:12 - login view doesn't have any scaffold and
716:14 - it's just a column at the moment if you
716:16 - remember we can go back to login view so
716:18 - you can see that it's just a column okay
716:21 - so that's the structure currently by
716:24 - doing this command that i'm providing
716:26 - you here navigator of context push name
716:28 - and remove until
716:30 - what is going to happen is that as its
716:33 - name indicates it's going to
716:36 - remove everything
716:38 - before it pushes this new route
716:41 - so
716:42 - is what we're basically saying here is
716:45 - that by pressing the not registered yet
716:46 - button and register here we're going to
716:48 - nuke this screen remove it completely
716:50 - from the screen and replace it by this
716:53 - new widget that we're returning okay so
716:55 - let's go to our login view in this
716:57 - button here into the login view and
717:00 - sorry in the not registered yet button
717:04 - we say navigator of
717:06 - context
717:08 - and remove until here push and remove
717:11 - until push named and remove until
717:15 - and in here now we need to display our
717:18 - register route and we refer to that
717:21 - using its name
717:24 - so
717:26 - let's go and fix that now so we say here
717:30 - slash register
717:32 - and
717:34 - put false there as it is and you can see
717:37 - you can get documentation about this and
717:39 - there's a predicate here that returns
717:41 - returns true or false and it says push
717:44 - the route with the given name onto the
717:45 - navigator and then remove all the
717:46 - previous routes until the predicate
717:48 - returns true
717:50 - and at the moment we're just saying
717:51 - return false meaning return remove
717:53 - everything from the route and just go to
717:55 - the register view so just leave this as
717:57 - false right now okay
717:59 - and this is actually going to cause
718:02 - a problem and you will see that soon i'm
718:04 - going to hot restart just in case and we
718:06 - go here to our login view
718:08 - and i'm going to press the not
718:11 - registered button here and boom and you
718:14 - can see now um
718:16 - that's actually great that we're getting
718:17 - this error this is exactly what i what
718:19 - i'd expected so
718:21 - what is happening here is that we're
718:23 - removing everything that's on the screen
718:25 - and
718:26 - pushing around to the screen that has no
718:29 - scaffold so this is the problem that you
718:31 - can see on the screen that yeah i can't
718:33 - just display a column on the screen
718:35 - without anything around it so we need
718:37 - kind of a scaffold
718:40 - and that is what this caption also is
718:43 - saying at the bottom left of the screen
718:44 - as i'm showing you here
718:47 - i'll check some items in my um
718:50 - screen
718:52 - so as the next thing what we need to do
718:54 - now is to go to our register view
718:58 - which is what we're pushing here and
719:00 - make sure that our register view now has
719:02 - all of a sudden a scaffold all right so
719:05 - let's go to
719:06 - lib here and register view i'm gonna
719:09 - remove this project explorer here at the
719:12 - moment we're returning a column what i'm
719:14 - gonna do is gonna command click on mac
719:16 - or control click on linux and windows
719:18 - and say wrap with
719:21 - widget and then call this widget
719:23 - scaffold
719:24 - and just say scaffold body
719:28 - and for the app bar create a new app bar
719:32 - and for its title say text and this is
719:35 - the register view or just say register
719:38 - with constants okay we're just gonna
719:40 - leave it like that i'm just gonna double
719:41 - check in my notes to make sure that's
719:43 - what i had intended for the register
719:46 - view to actually be called yes i can see
719:49 - that it was called register as well
719:50 - there great
719:53 - so
719:54 - we have that now and you can see
719:56 - now we're in the register view and there
719:58 - is no error i'm gonna do a hot restart
720:01 - and we go here again and now i'm gonna
720:04 - press the not registered yet button and
720:06 - you can see we are going to the register
720:09 - view
720:10 - okay
720:12 - so now we have a good connection between
720:15 - the login view to the register view
720:19 - but there is no connection backwards
720:21 - there's no connection from the register
720:23 - view to the login view and that's
720:26 - exactly what we're going to do now
720:30 - just as we did um
720:32 - i'm going to take some items in my notes
720:34 - as well
720:36 - so what just as we did in um
720:41 - in the login view that i'm going to hot
720:43 - restart so you just uh remember you can
720:46 - be reminded of what we did we had a
720:48 - login view as our login button and we
720:51 - added a new item to go from login to
720:53 - register but also we want to make sure
720:55 - that if you are already registered and
720:57 - you ended up on the screen then you can
720:59 - go back to the login view okay so let's
721:01 - do something similar here in our
721:03 - register view
721:05 - and
721:06 - at the end of the register button here
721:08 - let's create a new one and we say text
721:10 - button
721:11 - and uh on crest gonna get help from
721:14 - visual studio code to create that
721:16 - function signature and then i'm going to
721:18 - say child
721:19 - is a text that says
721:23 - what should we say
721:24 - already registered
721:27 - log in here like this okay as a constant
721:34 - and i comma here so we get the
721:36 - formatting in place and now you can see
721:37 - the register view also has a button that
721:40 - says if you're already registered then
721:42 - log in here and the login view has
721:45 - not registered yet register here so
721:49 - now we have to program this and as you
721:50 - saw in the login view we had this
721:52 - functionality navigator of push name
721:55 - blah blah let's copy that functionality
721:57 - from the login view and bring it into
721:59 - the register view
722:00 - under already registered button there
722:03 - and instead of going to registered main
722:05 - route we're going to go to the login
722:07 - name route okay
722:09 - and then
722:10 - hot hot uh hot reload you don't have to
722:12 - hot restart
722:13 - i'm gonna press this button
722:15 - and actually this is really great and
722:17 - that's the
722:19 - same point that i had here
722:22 - so
722:24 - uh link this okay
722:26 - so i've talked about that i'm going to
722:28 - just take some items um in the
722:31 - in my notes to make sure that i've
722:33 - covered all the grounds that i prepared
722:35 - for
722:36 - covering basically so you can see this
722:38 - is the exact same error that we had in
722:40 - the previous screen um
722:42 - or in the previous situation that our uh
722:45 - register view didn't have a scaffold
722:47 - because we went from login view and to
722:49 - register view and then register we
722:50 - didn't have scaffolds so we created a
722:51 - scaffold here
722:53 - if you remember okay but if you go to
722:55 - the login view you can see the login
722:56 - view still returns a column and the way
722:58 - i mean the reason this has been working
723:00 - so far is that because our home page had
723:03 - a scaffold do you remember here homepage
723:05 - had a scaffold and the contents of login
723:08 - view have have
723:09 - so far just been injected into the body
723:13 - of our home page and that's the reason
723:15 - if you hot restart your application you
723:17 - come to this beautiful home screen it
723:19 - says home and then you have the login
723:21 - view right here okay
723:24 - so
723:25 - what we need now is
723:27 - if you remember from the previous
723:28 - chapter we removed the scaffold from
723:30 - their login and their register and now
723:31 - we're putting them back but i kind of
723:33 - want you to understand the reasoning
723:35 - behind why i'm doing things i don't want
723:37 - you to think that everything is perfect
723:38 - from the beginning because for me at
723:40 - least when things are done perfectly in
723:42 - the beginning i always question like
723:44 - what if this thing wasn't there and i'm
723:47 - just trying to make sure that we remedy
723:48 - these things so you go through the
723:50 - entire journey you see what's wrong and
723:52 - how we can fix it instead of just
723:54 - me presenting to you the exact right way
723:56 - of doing things so
723:58 - from the beginning
724:00 - let's go to our login view and make sure
724:02 - we do the same thing that we did with
724:03 - register view and
724:06 - add a scaffold
724:09 - so let's go in here and add a scaffold
724:12 - so i'm going to write i'm going to click
724:14 - on it sorry i'm going to command
724:17 - and we're going to press command and dot
724:18 - on it on mac or control dot on linux and
724:21 - windows and you say wrap with widget and
724:24 - just say your widget is called scaffold
724:26 - scaffold unfortunately doesn't have a
724:28 - child parameter so it has a body
724:30 - so change that parameter to body
724:33 - and let's create an app bar for it then
724:35 - we say app bar
724:37 - and it has a title and we say const text
724:41 - and in here we just say login
724:44 - okay
724:47 - all right now
724:49 - as you can see i mean we've now added
724:50 - the scaffold and as the top as the
724:53 - caption here is telling you it says
724:55 - about login view is being embedded into
724:56 - home page this isn't good
724:58 - so now what we need to do is to go to
725:02 - the next uh
725:04 - section which is we need to remove now
725:06 - the scaffold from our main dart or from
725:10 - the home page because
725:12 - for
725:13 - right now home page is our login view is
725:16 - being embedded into home page but that
725:18 - isn't really good enough
725:21 - so
725:22 - we can't have login view with its own
725:24 - scaffold being embedded inside a home
725:26 - page that already has a scaffold so
725:29 - uh what we need to do is to remove the
725:31 - scaffold from our homepage uh let's see
725:34 - if we can do that and it doesn't seem
725:36 - like it's working so i'm gonna go
725:38 - and
725:40 - say that i'm gonna grab the future
725:42 - builder okay and this is what you need
725:43 - to also do
725:44 - grab the entire future builder and
725:47 - instead of returning the scaffold just
725:48 - return your future builder just like i'm
725:51 - doing here
725:55 - all right um
725:57 - [Music]
725:58 - there's a lot of information and also
726:00 - let's make sure that our um
726:04 - verify email view also has a scaffold
726:07 - because this is what we need right now
726:09 - we need all our views to have a scaffold
726:10 - so i'm going to
726:13 - embed our verify email views columns as
726:15 - well inside a scaffold
726:18 - so
726:18 - wrap with widget and let's say scaffold
726:21 - there is no child in
726:23 - scaffold remember there is a body and
726:25 - then we say app bar is an app bar a
726:28 - title effect const
726:30 - text and we say verify email something
726:32 - like this okay
726:35 - good now if i command s in order to save
726:38 - all these changes we're gonna get an
726:39 - error
726:40 - hopefully
726:43 - which we didn't and that's also okay
726:45 - it's probably because we actually fixed
726:48 - home page so it doesn't have a scaffold
726:49 - that's why we're not getting the error
726:53 - so
726:55 - that is really good i've also explained
726:57 - that then
726:59 - so let's just make sure that the
727:00 - connection is working between these two
727:01 - screens so
727:03 - login view is there you can see there is
727:05 - no home page any anymore displayed here
727:07 - if you remember from before this
727:09 - refactoring then when we sh when we
727:12 - showed the login view then there was the
727:14 - home pages app bar displayed on the
727:16 - screen but home page right now is just a
727:18 - future builder that returns other things
727:20 - such as a text of loading or the login
727:22 - view
727:23 - and also here i noticed that instead of
727:26 - logging loading what we could do is to
727:28 - display a circular progress indicator
727:32 - this is a great widget if you're if
727:34 - you're just doing some sort of a loading
727:35 - that may not immediately have an end so
727:38 - what circular progress indicator does it
727:40 - just shows like a loading indicator we
727:42 - could actually comment all of this code
727:45 - out and just return the circular
727:46 - progress indicator and comment the
727:49 - switch out as well and then press
727:51 - command s so you actually see how it
727:52 - looks like it's ginormous at the moment
727:54 - because there's no scaffold around it
727:56 - but if you had scaffold everything put
727:59 - in place then you would see the circle
728:00 - progress indicator actually displayed
728:02 - correctly on the screen so
728:04 - let's go back
728:05 - command s so we see the log loadings
728:08 - sorry the login screen or the login view
728:11 - and the connection between those screens
728:13 - is working as
728:14 - well the next thing we need to do is to
728:18 - at the moment you see we have our login
728:19 - view and the register view so they're in
728:21 - their own files but in the main guard
728:24 - file we've kind of forgotten or maybe
728:26 - not forgotten we just haven't had the
728:28 - time to do that we have the verify email
728:30 - view still rightly like it's just
728:33 - displayed or it's coded in the main dart
728:36 - file so what we need to do is just to
728:37 - create an an own file for it and we call
728:40 - it verify email view okay so go to views
728:43 - here and right click on it new file and
728:45 - say
728:46 - verify
728:48 - email view dot dart okay
728:52 - and grab the code from verify email view
728:55 - here
728:56 - and paste it
728:57 - or cut it basically and just place it
729:00 - here
729:00 - and make sure all the imports are in
729:03 - place i've already explained in previous
729:06 - chapters how we need to fix imports
729:09 - so i'm not going to go into so much
729:11 - detail about how imports work and how we
729:13 - should do that because i think if you've
729:15 - already gone through the chapters
729:17 - chronologically then this is like
729:19 - obvious for you how to fix it so it kind
729:21 - of feels like if i try to over explain
729:23 - all these things over and over again the
729:25 - people who are watching this course
729:26 - chronologically from the beginning and
729:28 - they're kind of gonna get bored so in
729:30 - the interest of not boring actual people
729:31 - who are watching things i'm not gonna
729:33 - over explain so there we go that is
729:36 - fixed and also let's make sure that we
729:38 - import firebase off as well so that
729:40 - error goes away
729:42 - save just
729:44 - make sure that hot
729:45 - we do a hot restart as well just make
729:47 - sure everything is working as expected
729:50 - and it does
729:52 - so what we need to do now also in
729:56 - in the interest of
729:58 - uh
729:59 - following through with the plan of
730:03 - being a good software developer
730:06 - what we talked about not in the previous
730:07 - chapter but i think it was in chapter
730:10 - let's see it was in chapter 15 i believe
730:12 - where we talked about git and github now
730:14 - we've done a lot of code things are
730:16 - working great let's commit our code okay
730:19 - so as we had if i bring up the terminal
730:22 - here i'm going to do this so you see a
730:24 - little bit better i'm going to bring up
730:26 - terminal
730:28 - and let's go to our terminal here i can
730:30 - see scrcpy is running in this terminal
730:32 - so i'm going to create a new terminal
730:34 - here
730:34 - and i'm going to just say be it log and
730:37 - you can see we had the initial commit
730:39 - and that was step one all right so
730:41 - because we tagged it as a step one you
730:43 - see here so what we do let's just get
730:46 - git status and we see that we've done a
730:48 - lot of work i'm gonna get add all the
730:50 - files to the staging area remember from
730:53 - the git chapter
730:54 - and then let me also make this a little
730:57 - bit bigger so you can see it better
730:59 - um
731:00 - okay then i'm gonna commit and i'm gonna
731:02 - say git commit step two like this
731:08 - okay um
731:11 - and also actually before we do that i
731:13 - believe we've missed a few things
731:17 - then i just look a little bit in my
731:19 - notes just to make sure that i'm not
731:21 - missing things before we continue
731:23 - if i look at um
731:28 - yeah so what we need to actually there's
731:29 - one thing we missed here at the moment
731:31 - what we're doing is saying that okay
731:33 - just go to the login view but one thing
731:35 - that we've missed is to ensure that we
731:36 - go to the correct correct view okay so
731:40 - what we're gonna do is
731:42 - we say we first get the current user so
731:45 - we say here's the user
731:47 - and
731:48 - if the user is not
731:50 - null
731:52 - here
731:53 - and we put an else statement here as
731:54 - well
731:56 - so
731:58 - if the user is not null then we
732:02 - say okay
732:03 - um if user
732:06 - email verified
732:09 - so
732:11 - and we just say print email is verified
732:14 - or we just return
732:16 - text
732:20 - email is verified something like this
732:22 - okay
732:23 - let's go back to the print so
732:25 - before we actually do all this maybe i
732:27 - should explain why we're doing this so
732:29 - at the moment or before we started with
732:31 - this exercise right here
732:33 - whenever the application was running we
732:35 - were just going directly to the login
732:36 - screen but what we need to do now is to
732:38 - now that we have three screens we have
732:39 - the login view register view and also
732:41 - the verify email view
732:43 - is that what we call it verify email
732:45 - view yeah
732:46 - we need to make sure that we're actually
732:48 - accommodating these various conditions
732:50 - into returning the the correct widget so
732:52 - here we're saying that if the user's
732:54 - email is verified
732:56 - let's then say just say
732:58 - email is verified okay
733:00 - and we can actually return maybe even a
733:04 - um
733:08 - and we'll return something so yeah let's
733:10 - do that so we will return text
733:14 - done something like that okay
733:17 - if the email is verified we just say
733:18 - that your email is verified but the user
733:20 - doesn't see that if the email is not
733:22 - verified we will we will basically
733:25 - return
733:28 - verify email view okay so
733:31 - that's us basically saying that yeah you
733:33 - need to verify your email
733:36 - that's if user is not null
733:40 - now
733:41 - if the user is null then we send you to
733:44 - the login view so let's go in here in
733:46 - the ill statement we say return login
733:48 - view
733:50 - as a constant
733:54 - so i think
733:56 - that should do it to be honest with you
733:58 - return cons return log so we can remove
734:01 - all of this from here
734:03 - boom
734:05 - so let's review it
734:07 - upon firebase initialization being done
734:10 - successfully we are going to
734:13 - check for the current user if there is a
734:15 - user we're gonna check if the email is
734:17 - verified if email is verified right now
734:19 - we're just going to say print email is
734:21 - verified and since we're not returning
734:23 - anything in here the code is going to
734:25 - fall through to line 48 here which in
734:27 - turn then returns just a text done okay
734:30 - so if you have a logged in user sorry if
734:32 - you have a user who's
734:34 - logging into the application and the
734:35 - email is verified all the user is going
734:37 - to see is just a text done all right
734:39 - but if you have a user in the
734:41 - application whose email is not verified
734:43 - that user is going to see the verify
734:44 - email view
734:46 - if you don't have a user with firebase
734:48 - so that user is not logged in then we're
734:50 - going to display the login view all
734:52 - right
734:54 - a lot of information i understand this
734:55 - may be a little bit frustrating so
734:58 - so now i'm going to hot restart and what
735:00 - you can see here is just a very ugly
735:03 - text done displayed on the screen this
735:05 - means the current user in the
735:07 - application is logged in and the email
735:09 - is verified and
735:12 - it is very ugly i understand but you
735:14 - need to also understand the reason why
735:15 - this is ugly at the moment and that is
735:17 - what happens if you do not tell flutter
735:20 - how things need to be rendered and
735:22 - since our home page has a future builder
735:25 - and nothing else surrounding it there is
735:28 - no scaffold there's nothing it's just a
735:30 - text widget that's flutter telling you
735:33 - okay i don't even know how to render
735:35 - things anymore i don't know what theme
735:36 - you're using i don't know the font size
735:38 - i don't know the default font color so
735:40 - that's what happens if you don't
735:41 - surround your widgets with a scaffold or
735:43 - another
735:44 - material widget that knows how to render
735:47 - things okay
735:50 - wow a lot of information again um but i
735:52 - hope you're sticking with me here
735:55 - now that we've done that we can go and
735:57 - commit so let's have it look at our logs
736:00 - and look at the status i'm gonna change
736:03 - the structure or the layout of the
736:05 - screen so you see better
736:07 - and now now we see that after we did git
736:10 - add we've also changed the main dart
736:12 - file with these changes so i'm gonna get
736:15 - at that as well all those changes and
736:18 - i'm gonna say git commit step two okay
736:22 - so now that's gonna be committed and
736:25 - we're also going to push the commit
736:29 - and additionally we need to tag it okay
736:31 - because if you remember if you look at
736:33 - the logs
736:34 - the first commit that we did here it was
736:36 - tagged as
736:37 - step one
736:38 - now we've committed step two but we
736:40 - haven't tagged it so let's go tag it
736:43 - i'm gonna say git tag
736:45 - um step two
736:48 - and then you need to push your tags with
736:50 - bit push
736:51 - dash dash
736:52 - tags and that creates the step two tag
736:56 - as well for you okay
736:59 - i understand that was a lot of
737:01 - information but i hope you could stick
737:02 - with me and go through all these steps
737:04 - so that we are ready basically for the
737:07 - next chapter
737:10 - all right and also before continuing
737:12 - with the next chapter just ensure that
737:14 - you're logged in because in the next
737:16 - chapter we're actually going to work on
737:18 - the log out so
737:20 - i can see also i've planned a lot of
737:23 - information in that chapter for you so
737:25 - there's lots and lots and lots of things
737:27 - to do
737:28 - so it's a very exciting chapter actually
737:30 - the next chapter and but before you
737:32 - continue with that just ensure that you
737:34 - go to the login screen and ensure that
737:36 - you log in with the user and you just
737:38 - see this ugly done button here okay
737:41 - and
737:42 - as i mentioned in the next chapter we're
737:44 - going to talk about displaying a simple
737:46 - interface to the users who are logged in
737:49 - and also allow those logged in users to
737:52 - log out so
737:54 - get some coffee tea if you want to or
737:56 - whatever refreshments you want and i'll
737:59 - see you in the next chapter
738:01 - hello and welcome to chapter 18 of this
738:03 - flutter course
738:04 - in previous chapters we've talked a lot
738:07 - about login and
738:10 - registration views
738:11 - and and we've also talked about
738:13 - integration with firebase
738:15 - we now have pretty much like our login
738:18 - and register view
738:21 - well i don't want to say we've got them
738:22 - down but
738:24 - we have a basic login and a basic
738:26 - registration view
738:28 - um
738:29 - if you remember from the previous
738:30 - chapter we kind of left the application
738:32 - and state that
738:33 - if the application detected that you
738:36 - had um
738:38 - you were a logged in user and that you
738:40 - had a verified email address then we
738:43 - showed kind of like a
738:44 - dirty done text on the screen and i can
738:48 - bring bring the screen up on my android
738:50 - phone here
738:52 - and you see we kind of left it in this
738:53 - state
738:54 - and i'll bring the code up as well so
738:56 - you just get
738:57 - reminded of what we were doing so we
739:00 - left the application in this state that
739:02 - if the user wasn't null meaning that the
739:05 - user was present and that
739:08 - his or her email address was actually
739:10 - verified we simply did a print statement
739:13 - in there and
739:15 - we left it like that meaning that
739:17 - since our builder function
739:20 - of
739:22 - let me actually bring up the right
739:24 - caption as well
739:26 - since the builder function of the future
739:28 - builder requires that you return a
739:30 - widget by moving your mouse over you can
739:32 - actually see that it says required
739:33 - widget you need to return a widget from
739:36 - that function
739:38 - since it requires that what we did is
739:40 - just we put a like a return cons text at
739:44 - the end of all our if statements so if
739:47 - none of these were present there we're
739:48 - still returning a text okay
739:50 - and since that was there and in this
739:53 - user email verified we're not returning
739:56 - a widget
739:57 - then the code falls through to this line
740:01 - meaning that if you're a logged in user
740:03 - and you're verified then we're returning
740:04 - the text off done
740:07 - so we need to kind of um now start
740:10 - because you see okay before i say that
740:12 - sentence
740:14 - now that we
740:15 - are have handled the email verification
740:18 - view so if you're if you're a logged in
740:19 - user but your email isn't verified we
740:21 - displayed it verify email and if you're
740:23 - if you aren't
740:24 - registered meaning that like you don't
740:25 - have a user then we show the login view
740:28 - since we've got those down what we need
740:30 - to do now is to work on the actual main
740:33 - ui of our application because what you
740:35 - can see here that says done this should
740:38 - be the main ui of our application so
740:40 - users who are logged in and their emails
740:42 - are ready are verified should see the
740:44 - main ui of the application so
740:47 - in this chapter we're actually going to
740:49 - work on the main ui of our application
740:52 - and then allow the user to log out from
740:55 - our application as well so i'm just
740:58 - looking at my notes to ensure i'm
740:59 - telling you all the stuff that i plan to
741:01 - tell you
741:04 - so without further ado maybe we could
741:06 - actually get started with that so let's
741:09 - go into our
741:11 - main dart file here and create a new
741:14 - widget
741:17 - so
741:18 - i'm going to bring it up here
741:20 - and we're
741:21 - going to create a new stateful widget
741:23 - called notes view
741:25 - and this notes you just imagine that it
741:28 - is the
741:28 - it is the main ui of the application for
741:30 - people who are
741:32 - logged in okay so as i mentioned before
741:35 - stf to create a stateful widget and then
741:38 - we call it um
741:40 - notes
741:41 - view i believe all right
741:45 - now what we need to do
741:48 - let's see it doesn't even really have a
741:51 - scaffold or anything so maybe that's
741:53 - what we need to do i'm just gonna
741:55 - go here
741:58 - so let's go create a scaffold and an app
742:01 - bar for it all right
742:03 - so
742:04 - we go in here into where we're returning
742:06 - a container at the moment we just say we
742:08 - want a scaffold
742:11 - and for our scaffold we want an app bar
742:15 - and the app bar should just be an app
742:17 - bar
742:18 - with a title of um const
742:21 - text
742:22 - and we just say
742:24 - what should we call it i don't think
742:26 - i've got notes for that to be honest
742:28 - with you let's just call it your notes
742:30 - or something like that
742:32 - i'm gonna actually go and have a look at
742:34 - my notes to see
742:36 - what i've called it in that
742:39 - um
742:40 - where i was actually preparing this
742:42 - course for you and i can see i've
742:44 - written main ui so let's just do that
742:46 - let's just say main ui in here okay so
742:48 - we have a scaffold in there
742:51 - so and
742:53 - it just says main ui and the
742:56 - body is empty at the moment so there is
742:58 - nobody and if you remember from previous
743:00 - chapters when you return a scaffold and
743:02 - an app bar all it does is that it
743:04 - creates kind of like depending on your
743:06 - theme but usually with the light theme
743:07 - it creates a a bluish status bar and an
743:11 - app bar with white text for the app bars
743:14 - title
743:15 - and the rest of the content of the
743:16 - screen is just going to be white so it's
743:18 - kind of like an empty container kind of
743:22 - okay
743:24 - now we have that in place
743:27 - and we are going to
743:29 - go to our uh
743:33 - future builder here in our home page
743:36 - and instead of doing this
743:38 - returning text done
743:40 - we're going to remove that and now we're
743:42 - going to get an error saying that well
743:44 - the case should not complete normally
743:46 - try adding break or return and that's
743:49 - basically it's complaining in this
743:51 - line of code here for me in line 41 it
743:54 - may be another line of code for you
743:56 - so it's saying that well one of the
743:58 - cases of your your like the entire block
744:01 - of code that you're placing in here it
744:03 - doesn't always end with a return and
744:05 - that's exactly right because in the case
744:07 - of user being email verified we're not
744:09 - returning a widget and what we're going
744:11 - to do in here we're just going to say
744:12 - return const
744:14 - to you okay
744:18 - all right um and i'm going to press
744:21 - command s there and now we did a hot uh
744:25 - reload and you can see the main ui of
744:28 - the application
744:30 - and in my notes i can see here that
744:32 - we're going to go and place a little
744:33 - text in
744:35 - our scaffold here
744:37 - and for your
744:39 - app bar
744:40 - we're good to go for the body let's just
744:42 - say const text
744:45 - hello world okay
744:48 - so now we can see the hello world
744:50 - displayed right there
744:53 - i can see i have a lot of notes to be
744:55 - honest with you with this chapter so i'm
744:57 - really making sure that i'm looking at
744:58 - my notes while i'm giving you the
745:00 - content to ensure that you're getting
745:02 - all the information that i plan for you
745:04 - to get so i apologize if i'm looking a
745:06 - lot at my notes it's just to
745:08 - yeah it's just to deliver the best
745:10 - content for you to be honest
745:12 - okay so we've done that hello world
745:16 - now
745:17 - what we need to talk about is um
745:21 - the app bar class and i've provided a
745:23 - link here for you
745:25 - which i'm going to
745:27 - open on my screen and then bring to this
745:30 - screen so you can also see it
745:32 - increase the size a little bit and
745:34 - perhaps also do this layout so you can
745:36 - see it's um the caption as well
745:40 - so
745:41 - you can see for appbar the documentation
745:43 - just says a material design app bar an
745:46 - app bar consists of a toolbar and
745:47 - potentially other widgets so
745:49 - all you need to do really or all you
745:52 - need to know about an app bar is
745:54 - that um
745:56 - it it
745:57 - it is able to display
746:01 - various widgets i mean pretty much
746:03 - everything in flutter is a widget so an
746:06 - app bar isn't an exception
746:09 - and an app bar consists of various
746:12 - components
746:13 - the default app bar allows you to
746:15 - display a title as you can see here in
746:18 - the title by default has its own styling
746:20 - it means that it has its own left and
746:23 - top and
746:24 - bottom margins so by default it's like
746:26 - displayed vertically in the middle of
746:28 - your app bar as you can see in the main
746:29 - ui of our application so
746:32 - pretty much every
746:33 - material component pretty much
746:35 - everything you display on the screen has
746:37 - a theme
746:38 - okay and
746:40 - an app bar has its own theme and it has
746:42 - its own capabilities
746:45 - so what we're going to do the where
746:47 - we're going to use the app bar in the
746:49 - main ui of our application
746:51 - is not only to display a title but it's
746:53 - also to display
746:55 - a um a little button
746:59 - to the far right that the user can click
747:02 - on or tap on
747:04 - in in our case tap on because there'll
747:06 - be indirect users are going to run our
747:09 - application on mobile devices so they're
747:11 - going to tap and if we allowed the
747:14 - our application to be run on desktops
747:16 - then they'd be able to click and maybe
747:18 - even tap on if they're running for for
747:20 - instance um
747:21 - microsoft's
747:23 - what is it called surface book or
747:26 - surface
747:28 - lap
747:29 - tablets
747:31 - so
747:33 - this is what an app bar is as is like
747:36 - the gist of it and there's information
747:38 - here in the documentation you can see
747:40 - here it says there's a leading space and
747:41 - then there's or you can actually put a
747:43 - widget in the leading and then there's a
747:45 - title and then some other actions and
747:47 - these are the things we're actually
747:48 - going to use actions in this um
747:53 - in this section in this chapter of our
747:56 - uh
747:57 - flutter course so you can see here for
747:59 - instance there's actually
748:01 - code on how to configure an app bar with
748:04 - some button you can see you can press
748:07 - the button and then you get a snack bar
748:09 - right here
748:11 - okay so keep this in mind you can have a
748:14 - look at the documentation i really
748:15 - actually suggest that you do that
748:18 - and um
748:21 - and you can you can spend some time
748:22 - reading through the documentation but i
748:24 - don't think you need to get absorbed in
748:25 - the documentation so much but just have
748:27 - a look at the various parts of an app
748:29 - bar and try it for yourself okay
748:33 - so
748:34 - um
748:36 - i can see that i've told you about the
748:38 - documentaries i'm gonna um
748:41 - i'm gonna move past that
748:45 - so that that part is done um
748:48 - and now what i think we need to do
748:51 - um is to talk about uh this print
748:55 - statement and why we were getting an
748:57 - error here
748:58 - you see print
749:00 - if if i if i put a print here and if i
749:02 - say print hello world
749:04 - you usually get
749:06 - information here saying avoid print
749:08 - calls in production code okay
749:11 - so
749:13 - before we move past this because you've
749:15 - probably seen this quite a lot in this
749:17 - course that i've placed print statements
749:19 - and then we can like for instance if i
749:21 - bring up the debug console and just do
749:24 - command s on my mac or control so linux
749:26 - and windows in order to hot reload
749:27 - you'll see
749:29 - let's see actually email verify heart
749:30 - reload i'll restart here
749:33 - oops see i can see that it crashed
749:36 - that's okay so i'm gonna go and bring up
749:38 - scr cpy again
749:42 - and these things do happen and that's
749:44 - completely fine so and i'm gonna need to
749:47 - run the application again because i
749:48 - actually lost my connection with that
749:50 - device but while that is doing its job
749:53 - i'm gonna tell you also about
749:55 - print
749:56 - and versus a log you see
749:59 - uh
749:59 - print is usually called a poor man's
750:01 - debugger in that um if you're not a
750:04 - software developer you probably don't
750:05 - know about even debugging what that
750:06 - means but what debugging is is it
750:08 - essentially is is where there is a
750:10 - problem in your source code but you
750:11 - don't know really where so you try to
750:13 - step through various lines of code in
750:15 - your application and refine what the
750:17 - problem is
750:18 - so
750:19 - um a lot of a lot of times when people
750:22 - don't really either they don't have the
750:24 - time to debug or they believe that the
750:25 - debugger is just too slow they start
750:28 - putting print statements in their
750:29 - application and
750:31 - um by putting print statements in their
750:32 - application they can kind of track where
750:34 - they where the application is going
750:36 - through the various lines of code and if
750:38 - for instance they put a print statement
750:40 - in a place of code where they didn't
750:42 - expect the application to end up and
750:44 - then they'd be like oh okay i ended up
750:45 - in this code block i shouldn't have so
750:47 - let me just check why i ended up here so
750:50 - it's kind of called a poor amount
750:51 - debugging because print is a piece of
750:55 - code that you actually place in your
750:57 - code so sometimes print isn't the
750:59 - desirable thing to do
751:02 - in banking applications for instance you
751:04 - should be extremely careful what you
751:06 - print because these things get logged
751:08 - and you you may think well okay they get
751:10 - logged on that phone uh what is the
751:13 - problem with that
751:15 - the problem with logging things even if
751:17 - it's on the phone is that you you must
751:19 - know that the operating systems android
751:21 - and ios usually like the most popular
751:23 - ones right now they keep track of your
751:26 - lot so these logs are actually stored in
751:28 - a place on the operating system so you
751:30 - can actually read them back later so
751:32 - there is a buffer so this information
751:35 - that your application may be printing to
751:36 - the console isn't completely private
751:38 - except that it is stored on the phone
751:41 - even if it's for a short while while it
751:43 - gets replaced by a new buffer if your
751:45 - phone ends up in the wrong hands someone
751:47 - can actually get a hold of your lock so
751:49 - imagine a banking application logs your
751:51 - like a login information username
751:55 - password all that detail and even if
751:57 - it's only for that application you may
751:59 - think but someone else it may actually
752:01 - end up in the wrong hand so that's what
752:04 - this information is telling you avoid
752:05 - print calls in production code okay so
752:07 - there is another way of doing this
752:10 - um
752:11 - instead of doing prints you can actually
752:14 - use log
752:16 - in your in your code and we're gonna i
752:19 - believe
752:20 - we're actually going to talk about in
752:23 - this chapter
752:24 - i think we're gonna talk about logging
752:28 - so let me have a look here in my
752:30 - notes um yes we're actually going to
752:34 - talk about logging instead of printing
752:36 - so
752:38 - just keep that in mind that there's a
752:39 - better way of doing print statements if
752:41 - if they're if that's what you want to do
752:43 - if that's what you want to see
752:44 - on the console so we're gonna fix that
752:47 - soon and this is you see hello world
752:49 - information that was printed by this
752:51 - print statement okay so sorry about that
752:52 - that was just a little detour but i i
752:54 - thought it was necessary to tell you
752:56 - especially if you haven't done software
752:58 - development before
753:01 - okay we've done the return notes view in
753:03 - the home page we shouldn't have any
753:05 - print in the home page and you can see
753:06 - this is our home page right now and we
753:08 - don't have any print statements let me
753:10 - change the
753:11 - view a little bit all right
753:14 - so um
753:17 - so what i'm gonna now describe to you is
753:20 - that we need a an enumeration that
753:22 - describes our various um
753:26 - app bar
753:27 - items that the user can click on you see
753:30 - when we create our app bar
753:32 - and this app bar will in itself be able
753:35 - to
753:36 - display something called a pop-up all
753:38 - right so i haven't shown you how this is
753:42 - going to work by the end of this chapter
753:43 - so it may be a little bit difficult to
753:45 - understand but just imagine that we have
753:48 - our ui here and what we need to achieve
753:51 - in this chapter is to place a little
753:52 - button here with like a dot dot either
753:55 - horizontally or vertically i don't
753:56 - really know what the icon is going to be
753:58 - so some sort of a button here upon
754:00 - pressing which
754:01 - the user will get a little fine nice
754:05 - like a drop down and in this drop down
754:08 - then you can place various items like
754:10 - log out
754:11 - settings blah blah blah so imagine we
754:13 - have a drop down by pressing that button
754:15 - and upon pressing the log out button
754:18 - then we're going to display a dialect to
754:20 - the user saying are you sure you want to
754:21 - log out from the application so
754:24 - this works very nicely i mean when
754:27 - before i say this works very nicely
754:29 - maybe i should explain that by pressing
754:31 - each one of these items in the pop-up
754:34 - menu that we're going to display to the
754:35 - user we are going to get a call back
754:37 - from the system saying oh this item got
754:39 - pressed
754:40 - and you need to tell the system what
754:43 - this item is you can either give it like
754:45 - an integer like a
754:47 - numerical value or a string or even
754:50 - better better you can give it an
754:52 - enumeration value if you remember from
754:54 - the
754:55 - chapters where we talked about dart
754:57 - basics we talked about enumerations and
754:58 - why they're important and and that they
755:01 - make things very easy because when you
755:04 - specifying your enumeration and put
755:06 - cases in your animation
755:08 - and then
755:10 - you you let me actually change this to
755:12 - also do not do so sorry about i just
755:14 - remember that
755:15 - and you give those innovation values to
755:18 - your pop-up menu items by press but by
755:20 - the user pressing on any of those items
755:22 - you will then get that enumeration value
755:24 - back so you can do a switch statement in
755:26 - your a callback and say oh which item
755:29 - got called was it this case of the
755:31 - enumeration so instead of you doing like
755:33 - integer comparisons or string
755:35 - comparisons you can actually use
755:36 - enumerations which make your life a lot
755:38 - easier
755:41 - so
755:41 - we are going to talk about that
755:44 - soon as you can see an enumeration that
755:46 - describes our pop-up and we're going to
755:49 - work on that soon
755:53 - okay
755:54 - we talked about that um
755:57 - all right so
755:59 - now let's talk about pop-up menu button
756:02 - versus pop-up menu item
756:04 - and as you can see the caption says
756:06 - they're usually used together and let's
756:08 - go actually bring up safari here and i'm
756:11 - going to say pop-up menu item flutter
756:14 - and i'm going to bring up the document
756:15 - documentation up here okay
756:17 - so we can have a look at it together
756:20 - as you can see it says an item in a
756:22 - material design pop-up menu so this is
756:24 - the actual menu item itself so if you
756:26 - imagine we're displaying a drop down
756:28 - menu every item in that pop-up menu item
756:32 - is of type sorry
756:34 - every item in the pop-up menu
756:37 - is of type pop-up menu item all right
756:40 - and you can see a pop-up menu item in
756:43 - itself has
756:45 - a i mean a pop-up menu item is a generic
756:48 - in advanced um a dart chapter we also
756:51 - talked about generics and what a generic
756:53 - item in this case a pop-up menu item
756:56 - basically is
756:57 - is that it has a value of this type that
757:01 - it says
757:02 - is off in this case a pop-up menu item
757:05 - is
757:06 - why farther is a pop-up menu item is of
757:09 - type y farther now we don't really know
757:11 - why if either
757:12 - why farther is but it could just be an
757:14 - enumeration okay and you can see here
757:17 - now
757:17 - after you've decided decided that a
757:19 - pop-up menu item
757:20 - carries a value of of this type then its
757:23 - value should actually be specified and i
757:25 - can see that there is a case called
757:28 - harder
757:29 - in that animation that you've assigned
757:31 - to your pop-up menu item okay
757:34 - now
757:35 - what is a pop-up menu button so let's
757:38 - search here pop-up menu button okay
757:41 - let's go into the documentation here and
757:43 - you can see it says displays a menu when
757:45 - pressed and calls unselected when the
757:47 - menu is dismissed all right so
757:50 - um
757:51 - what you need to know is that the pop-up
757:53 - menu button is the actual
757:55 - button that we will place on kind of on
757:58 - our app bar upon pres upon pressing
758:01 - which it will display
758:02 - a menu and you can see here in the code
758:06 - you see here
758:08 - the pop-up menu button
758:11 - has an unselected callback and it has an
758:14 - item builder
758:15 - and items inside the pop-up menu item
758:18 - then are
758:19 - sorry the items inside the pop-up menu
758:21 - button
758:22 - are of type pop-up menu item so
758:26 - imagine then you have the pop-up menu
758:27 - button as like the parent
758:30 - and then you will have its item builder
758:32 - and each of which of these items are of
758:34 - type pop-up menu item and that's exactly
758:37 - what we're actually gonna do
758:40 - in this chapter
758:42 - okay i'm gonna close that window i don't
758:44 - think we need the safari window here um
758:48 - so
758:50 - now i think i explained this part of the
758:53 - caption a little bit just now about when
758:55 - we talked about the pop-up menu item but
758:58 - you can see here i've said pop-up menu
759:00 - item has a value let's look at the code
759:01 - for pop-up menu items so maybe we could
759:03 - just actually right here pop-up menu
759:06 - item in our code and i'm going to
759:08 - command click on it and you can also see
759:11 - that a pop-up menu item has this
759:14 - property called value okay and as you
759:16 - can see a pop-up menu item as i
759:18 - mentioned before is a generic class that
759:21 - carries a value of type t and type d
759:23 - basically when you see t in generics it
759:26 - just means something that you specified
759:27 - so anything that's specified inside the
759:31 - less than and greater than size is a
759:34 - generic name
759:36 - which then gets replaced at a compile
759:38 - time with the type that you as a
759:40 - programmer specify okay
759:42 - so
759:43 - um that's the code for the pop-up menu
759:45 - item and you're more than welcome to
759:47 - drill down more into into that code to
759:50 - understand it better
759:52 - so
759:54 - let's then go and create uh
759:57 - our enumeration that we've now talked
759:59 - about
760:01 - and
760:02 - i'm just going to go in
760:04 - here right above the notes view
760:08 - and let's then define an enumeration
760:10 - called menu action and in there we're
760:13 - gonna have a case called log out okay so
760:16 - let's say enum
760:17 - menu action we said we're gonna call it
760:20 - and then we have a case called log out
760:22 - in there so if i do command s to hover
760:24 - reload then nothing happens and the dart
760:26 - formatter i can actually see they form
760:28 - our code very well for us
760:33 - so the next part that we need to take
760:36 - care of
760:37 - is to actually display our pop-up menu
760:39 - button you can see in notes app view
760:42 - state app bar create a pop-up menu
760:44 - button of type menu action
760:48 - so
760:50 - in the app bar in order for us to be
760:52 - able to display a little action there we
760:55 - need to um
760:58 - actually go to the app bar here
761:01 - and you can see there is a property
761:02 - called actions which is it says it's a
761:05 - list of widgets all right so we're gonna
761:07 - say we need actions there okay i'm also
761:10 - just going to ensure that i have
761:13 - everything here so i can see the code as
761:15 - well and my notes
761:18 - i can take in my notes that we've talked
761:20 - about things
761:21 - like the menu
761:23 - action
761:25 - um
761:26 - all right and now we're gonna create the
761:29 - um
761:30 - pop-up menu button all right so
761:33 - you see the action as we saw in the
761:35 - source code on the website that i
761:36 - displayed you and that i displayed to
761:38 - you as the documentation inside the
761:40 - actions of our app bar then we're going
761:42 - to create items of type pop-up menu
761:44 - button okay so let's go ahead and do
761:47 - that
761:49 - pop-up menu button
761:51 - all right and then you can see it has an
761:53 - item builder okay
761:55 - and and
761:56 - i think it's actually an item builder
761:59 - and also unselected so
762:01 - let's first actually take care of the
762:03 - unselected so i'm going to put
762:04 - unselected command space in visual
762:06 - studio code on a mac and control space
762:08 - in linux and windows in order to get
762:10 - this dialog get some help from visual
762:12 - studio code to complete this code for us
762:14 - you see upon selected it's going to
762:17 - return the value to us and we're telling
762:20 - darth in here that our pop-up menu
762:22 - button actually manages values of type
762:26 - menu action all right which is what we
762:29 - specified right here okay
762:32 - and you can see we're getting an error
762:34 - saying that the named parameter item
762:35 - builder is required okay and we'll
762:37 - provide that now
762:40 - so let's go and create a
762:43 - item builder here
762:45 - get help from visual studio code with
762:47 - the same command that i mentioned to you
762:49 - before
762:50 - and in here then we're going to create a
762:52 - constant of a pop-up menu item
762:56 - and we're going to say that this menu
762:58 - item actually manages
763:00 - values of type menu action as well okay
763:03 - and we're going to say according to the
763:04 - documentation remember every pop-up menu
763:07 - item has a value so a value associated
763:10 - with it which then in turn gets passed
763:12 - to this unselected function
763:15 - when this pop-up menu item is tapped
763:18 - okay so then we're going to say in this
763:20 - case it has the value of menu actions
763:23 - when you actually log out
763:26 - and this child is just going to be
763:28 - a text
763:30 - that says
763:32 - log out
763:33 - okay and as a const as well actually the
763:36 - entire thing is a cons so we don't have
763:38 - to do that okay
763:39 - so we just uh let me have a look item
763:42 - builder
763:43 - menu actions constant body might return
763:46 - normally okay
763:48 - okay i see because the item builder if
763:50 - we move our mouse over it
763:54 - if i move the mouse over item blue you
763:57 - can actually see that it needs a list of
763:59 - pop-up menu entry
764:01 - and you can see pop-up menu item if you
764:03 - go to this code is actually of type
764:05 - pop-up menu entry so the problem we're
764:08 - seeing here is that it says you aren't
764:10 - returning a list but you're just
764:12 - returning an item so we're going to say
764:14 - return a list
764:15 - and in here we just say
764:18 - turn that item okay
764:21 - like that
764:23 - can we actually make that entire list
764:25 - const so yeah that works as well okay
764:28 - i'm gonna do command s and what you'll
764:30 - see here now is
764:33 - uh we've actually added log out
764:36 - um
764:37 - so and you'll see here now by pressing
764:39 - this then we'll get a beautiful pop-up
764:42 - menu
764:43 - here
764:44 - and there is a log out item in it all
764:46 - right
764:48 - so
764:49 - that logout text there is the child of
764:52 - our pop-up menu item so
764:56 - don't worry i mean don't get confused
764:58 - with the child and the value what you
765:00 - need to know is that the child is what
765:02 - the user sees and the value is what you
765:04 - as a programmer see because
765:06 - when the user then taps on that item
765:09 - your unselected is going to get called
765:11 - and then we'll get that value so just to
765:13 - test that let's go back to our print
765:15 - statement and say value
765:18 - and i'm going to bring up the console
765:20 - here going to clear it and i'm gonna
765:22 - change the ui layout a little bit so you
765:25 - see it better i'm gonna do command s and
765:27 - then i'm gonna tap on this log out
765:29 - button poof
765:31 - you'll see now our unselected got called
765:34 - and the out value
765:36 - which was what you associated with your
765:38 - pop-up menu item
765:40 - got printed here and got sent sent to
765:43 - the unselected
765:45 - okay so we've done that part we've
765:48 - handled it with double quotes we haven't
765:51 - really handled but we're just printing
765:52 - its value right now okay
765:56 - so i'm just gonna
765:58 - go through some of the things that i
765:59 - plan to
766:02 - talk to you about um
766:06 - uh
766:07 - okay
766:09 - all right so
766:10 - we can see that the print statement is
766:12 - um doing its job so
766:15 - in the previous part of this chapter i
766:17 - talked about why print usually isn't a
766:19 - good idea and
766:21 - there is a better way of doing print and
766:23 - that is with logging so
766:26 - dart itself comes
766:28 - pre-packed with a package called
766:30 - developer
766:31 - and you can easily import developer and
766:34 - inside the developer tools for dart
766:36 - there is a good function called log and
766:38 - you can use log which is a more
766:41 - trustworthy and more even configurable
766:44 - version of print and i'm going to show
766:45 - you how to do that
766:47 - so in your import statements let me
766:50 - increase the size of the screen a little
766:52 - bit so you see it better
766:54 - say import dart from dart import
766:56 - developer okay
766:59 - now i haven't talked so much about
767:01 - import statements before but import is
767:03 - actually configurable as well so in here
767:05 - for instance if you look at the code
767:07 - inside import this dart developer
767:09 - there's a lot of stuff that you might
767:12 - not need in your application okay so by
767:14 - importing
767:16 - um a package or a library in your
767:19 - program you're pretty much importing
767:21 - everything that that package also
767:23 - imports so in this case extension
767:24 - profile or service timeline
767:27 - and these things then get
767:29 - these things will then be available in
767:31 - your workspace just by you pressing for
767:34 - instance for me is control space on my
767:36 - macintosh so all these symbols will then
767:39 - be available right here so there's tons
767:41 - and tons of things that are available
767:44 - right now in your application without
767:45 - you having to do anything just because
767:47 - you imported quite a lot of things now
767:50 - by importing the dart developer
767:53 - package in this case also you're making
767:55 - all those symbols available kind of like
767:57 - globally inside this file at least and
768:00 - some developers don't like that some
768:02 - developers kind of like to limit the
768:04 - amount of symbols available
768:06 - and only have the symbols available that
768:08 - they actually work with okay
768:10 - and because of this there is a good
768:12 - functionality for import and dart where
768:14 - you can say show
768:16 - and by doing a show you are telling dart
768:18 - that um
768:20 - you only want to import a specific part
768:22 - of this package so the specific part
768:25 - that you're interested in is a function
768:27 - called log
768:29 - now
768:30 - after doing this you can basically go to
768:32 - your application and then say log
768:34 - now a lot of developers also don't like
768:36 - this because they think oh log where did
768:39 - that come from so
768:41 - um if you want to be more specific where
768:44 - functions come from especially if
768:45 - they're not your own functions or maybe
768:48 - even if you have few log functions maybe
768:51 - you even have a log function in in this
768:53 - code right here like if you say void log
768:57 - um like this
768:58 - and then you type log here
769:01 - i mean it's there are so many logs
769:03 - available now i don't even know which
769:04 - one is which so
769:07 - what
769:08 - dart allows you to do is to give an
769:10 - alias to your import so for instance if
769:14 - you want to use the log function that is
769:17 - provided in this developer package for
769:19 - you you can actually give an alias to
769:21 - this entire package in this source file
769:24 - which is the main dart file so you can
769:26 - say as
769:27 - i'm going to say dev tools okay so what
769:30 - happens here is that the log function
769:33 - now is not available as it was before
769:35 - except you have to say devtools log and
769:38 - then you'll see that there's a log
769:40 - function and that's the only function
769:43 - available inside devtools now because it
769:45 - says show
769:46 - if you hadn't done the show here
769:48 - then devtools will have everything that
769:51 - dev tools or the developer package in
769:53 - this case uh allowed you to
769:56 - or import it into your workspace okay so
769:59 - do the code then as this import devtools
770:02 - show log and the reason i'm explaining
770:04 - all of these is because i think these
770:05 - are so important to understand
770:07 - and that
770:09 - you need to get them like
770:11 - as soon as possible and now that i'm
770:13 - explaining these things in such detail
770:15 - i'm not going to explain them anywhere
770:17 - else in inside this chapter so i don't
770:20 - want to have like half explained
770:24 - things
770:25 - that we actually need to fully
770:26 - understand and explain half of it now
770:28 - and then half of it later because then
770:30 - you may not be able to
770:32 - chain the information to get the entire
770:34 - picture so that's why i'm explaining
770:36 - things sometimes in such great detail
770:39 - okay now that we've done as devtools
770:42 - show log let's go to this print
770:43 - statement that we put here
770:46 - in our notes in the unselected and then
770:49 - say dev tools
770:52 - log okay
770:54 - and you can see now that it's
770:55 - complaining to us because it says the
770:58 - devtools log it doesn't allow us to
771:01 - print a value and if you have a look at
771:03 - the log fi and log function signature it
771:05 - expects a message of type string but our
771:08 - a menu action is an enumeration but you
771:11 - can always say to string on an
771:13 - enumeration value in order to make it a
771:15 - string so
771:18 - um so what we're going to do then is to
771:21 - go and
771:22 - click on this log out and now you see a
771:24 - log item being printed to the screen and
771:27 - it's a little bit more distinct as well
771:29 - you can see now now that we're not using
771:30 - print using log make sure that your log
771:33 - items are a little bit more
771:34 - distinguished inside the debug console
771:38 - so that's also a good plus
771:45 - all right
771:47 - let's go now to the next item
771:51 - so what we're gonna do here now we have
771:54 - the log out
771:55 - button here so i'm going to tap on it it
771:57 - says log out we have that
772:00 - already present
772:01 - what we need to do now is upon pressing
772:03 - this item we are going to display a
772:06 - little dialogue to the user
772:08 - now if you're a designer you may be
772:10 - familiar with a dialogue and the
772:12 - dialogue is basically like an alert
772:13 - displayed on the screen depending on
772:15 - what type of operating system you're
772:16 - running on but both android and ios and
772:19 - ipad os mac os windows everything they
772:22 - have their own
772:23 - way of handling dialogues and dialogues
772:26 - are usually like a small little window
772:28 - displayed usually in the center of the
772:30 - main screen where that application is
772:32 - placed and the dialogues are
772:34 - configurable usually with a title with
772:37 - the description text or even images and
772:40 - usually with some action buttons which
772:42 - are called cta or call to action
772:46 - so
772:47 - that is the exact same case here in
772:48 - flutter so upon pressing this log out
772:51 - button we're going to display a dialogue
772:52 - to the user saying oh you want we see
772:54 - that you want to log out are you sure
772:56 - you want to log out and then like a
772:57 - cancel or no button and a yes button
773:00 - which is the call to action or cta okay
773:04 - so um
773:07 - what we need to do now is to create that
773:09 - function a function that can display an
773:12 - alert dialog
773:14 - to the user and you can see here that in
773:17 - the caption i've mentioned write a login
773:19 - function to display a dialog
773:21 - and its
773:22 - signature is kind of like it returns a
773:24 - feature of boolean and if you think i
773:27 - mean if you really think about it a
773:28 - dialogue that asks the user to log out
773:30 - either has a cancel or a null button or
773:33 - sorry it has
773:35 - either a cancel or no button and
773:38 - a
773:39 - a call to action which does the log out
773:41 - so it either logs out or it doesn't
773:45 - or basically it either confirms that you
773:47 - need to be logged out or it says no you
773:49 - shouldn't be like that so it's true
773:50 - false okay so a boolean so boolean is
773:52 - perfect for this case
773:54 - um and what we're going to do now is to
773:56 - write a function that returns a future
773:58 - of that boolean saying true you have to
774:00 - be logged out or false not and we're
774:03 - going to call it show logout dialog okay
774:07 - so let's go at the bottom of this file
774:09 - and
774:10 - and say future and
774:13 - bull
774:14 - and as i've mentioned in the caching
774:16 - we're going to call the show log out
774:18 - dialog and we say build context because
774:20 - we need actually context to display our
774:23 - log out
774:24 - button on
774:29 - okay a lot of information now um i'm
774:32 - gonna go actually a little bit back to
774:34 - the previous caption
774:36 - uh because i forgot to mention something
774:38 - there um
774:41 - and the important thing to mention here
774:43 - are two things called show dialogue and
774:45 - alert dialogue now show dialog
774:48 - actually let's go to alert dialog first
774:51 - alert dialog we can see is a class is a
774:53 - stateless widget which defines the the
774:57 - dialog that gets displayed to the user
774:59 - itself so it doesn't have any concept of
775:01 - being displayed to the screen or
775:03 - what happens when the dialogue is
775:05 - created after that point it doesn't care
775:07 - about that so it just
775:09 - performs the action of creating an alert
775:11 - dialogue for you
775:12 - that's for alert dialogue but
775:14 - you need a way to display that alert
775:17 - dialogue to the user and the way to do
775:18 - that is with show
775:20 - i believe it's called show dialogue
775:24 - and
775:25 - you can see here show dialog is a
775:26 - function that returns an optional future
775:30 - or sorry a future of an optional value
775:33 - there's a difference between an optional
775:34 - future and a future of an optional value
775:36 - so in this case it's a future that
775:38 - always gets returned but it optionally
775:40 - contains a value okay and you can see it
775:43 - says okay give me a context and then you
775:46 - have to provide a builder to me okay and
775:48 - this builder should return a widget so
775:50 - what we're gonna say is going to say
775:51 - show the dialogue you can see here
775:54 - and and
775:56 - and builder we're going to get help from
775:58 - visual studio code to complete it all
776:00 - right
776:00 - and in here in our builder what we're
776:02 - going to do is we're going to actually
776:04 - create our alert dialog okay
776:08 - so uh
776:09 - let's go back to this caption so we know
776:12 - what we're doing what what the actual
776:13 - goal is here okay
776:16 - so in
776:17 - the builder you're responsibility is to
776:20 - create an alert dialogue so let's say we
776:22 - return
776:24 - an alert dialog which is a widget as you
776:27 - saw before
776:29 - and it has a title you can see the title
776:31 - is a widget
776:32 - actually right like here is a widget
776:37 - for the title we're going to create a
776:38 - const of text and
776:40 - the text i can see we set sign out here
776:44 - so we're basically configuring the alert
776:47 - dialog okay
776:48 - right now the title
776:50 - then for the contents
776:52 - or the content also is a widget and
776:55 - we're going to say this is also a const
776:57 - text and we're going to ask the user
777:00 - are you sure you want to sign out okay
777:03 - just like that
777:05 - now that we've put the title and the
777:08 - content in there we need to specify the
777:11 - parameters call actions and you can see
777:13 - the type of this actions is list of
777:15 - widgets all right and this is like the
777:17 - buttons that the user will see on this
777:20 - alert dialog
777:22 - what we're going to do is going to
777:24 - create two text buttons so i'm going to
777:25 - say text button all right
777:28 - and don't worry about all these errors
777:30 - and things that we're seeing here this
777:31 - is because as i mentioned in one of the
777:33 - previous chapters or one of the first
777:34 - introduction chapters i think
777:36 - is because we have an extension here
777:38 - called error lens and aero lens is
777:41 - extend expanding all these errors that
777:43 - are happening as we type and it's
777:45 - displaying it on the screen it looks
777:47 - really scary it looks like we're doing
777:48 - everything wrong but these these bro
777:51 - these errors actually do make sense if
777:53 - you look at it it says text button the
777:55 - named parameter on press is required but
777:57 - there's no corresponding blah blah so we
778:00 - need to fix these things okay so let's
778:02 - go to text button and say unpressed get
778:04 - help from visual studio go to complete
778:06 - it and then after that i'm pressing say
778:08 - child
778:09 - so this first button is actually gonna
778:12 - be our cancel button okay
778:16 - so that's the first text button and copy
778:19 - this text button now and paste it in
778:21 - here and instead of cancel this time say
778:23 - log out all right and
778:27 - like that now you see there's a lot less
778:29 - information displayed on the screen and
778:32 - it looks a lot better okay
778:35 - so
778:37 - now we have an alert with two buttons
778:39 - cancel log out but you can see upon
778:40 - pressing those buttons we aren't doing
778:42 - anything here okay and we need to fix
778:44 - this actually so let's go ahead and
778:47 - first say we are returning this show
778:49 - dialog which returns the value of
778:51 - boolean and now you see we get a general
778:55 - error here saying that wait you said
778:57 - you're returning a future of bull but
778:59 - this show dialogue of bull is going to
779:01 - return an optional so what what do you
779:03 - mean so this is dark getting a little
779:05 - bit confused
779:07 - quite correctly actually is saying that
779:09 - you saying that you return a boolean but
779:11 - we know that show a dialogue returns an
779:13 - optional boolean so what do you want to
779:14 - do about it and a way to fix this to be
779:16 - honest with you is
779:18 - you
779:19 - append something called a then function
779:22 - to the entire show dialogue saying that
779:24 - okay
779:26 - if this show dialogue isn't able to
779:27 - return a boolean then i'm going to
779:29 - return false otherwise return the value
779:31 - of the show dialogue so
779:33 - um
779:34 - because i mean you may be now asking why
779:36 - wouldn't the show dialogue return a
779:38 - value it either has a cancel or a logout
779:40 - button but remember on android for
779:41 - instance you have these physical keys
779:44 - i'm going to change the layout so you
779:47 - see this button down here if i show a
779:49 - dialogue on the screen android users can
779:51 - always press this little button which
779:53 - will then change to an arrow down that
779:55 - they can press on it to dismiss the
779:57 - dialogue so they they have the ability
780:00 - to dismiss a dialogue without actually
780:03 - answering a question that the dialogue
780:04 - asks them and ios users can sometimes
780:07 - also tap outside a dialogue in order to
780:10 - cancel that dialogue so that is why show
780:12 - dialogue says i may not be able to
780:15 - return
780:16 - the value that i promised kind of to
780:18 - return should this or tap on any of my
780:20 - buttons quite correctly okay so append a
780:24 - then statement let me change the screen
780:25 - layout here
780:28 - so append event statement here which is
780:31 - a function that gets called
780:34 - should this future complete so if the
780:38 - user dismisses this dialogue this future
780:40 - is going to complete but it won't have a
780:42 - value you see it is an optional bull in
780:44 - that case so in here we say either you
780:46 - return a value
780:48 - if it's present or you return false
780:50 - that's it okay now you see dart is quite
780:53 - happy about this all right
780:56 - now what we need to also do is
780:58 - you see the way we're gonna
781:02 - the way we're gonna display this
781:04 - dialogue is to
781:06 - tell flutter that
781:08 - hey
781:09 - this like pause everything you're doing
781:13 - and display this dialogue modelly on the
781:15 - screen
781:16 - and this dialog is going to grab focus
781:18 - from everything else that's on the
781:20 - screen so the user kind of has to go and
781:22 - choose an item unless they want to
781:24 - cancel that item by for instance
781:26 - pressing the
781:28 - physical key on an android phone
781:30 - now
781:31 - when we display the dialog we're going
781:33 - to use the build contents context and
781:35 - the navigator
781:36 - and display the screen just like we
781:39 - display like a named route so
781:42 - the show dialogue function here inside
781:45 - our text buttons on press it is our
781:47 - responsibility as the alert dialogue to
781:50 - to dismiss ourselves
781:52 - and it's our responsibility to actually
781:55 - pass a value to this show dialogue and
781:57 - say hey this button was pressed and this
782:00 - is the value that it returned
782:02 - so
782:03 - what you to do on these unpressed is to
782:06 - say navigator
782:07 - of
782:08 - context and then you'll say pop
782:11 - and then you
782:13 - provide your value the boolean value in
782:15 - this case so upon cancelling we'll pop
782:18 - with the value of false
782:20 - and we copy this code and we go into the
782:22 - on press of the second text button which
782:24 - is log out and in this case we should we
782:26 - say that you should basically return
782:28 - true
782:29 - all right
782:32 - that was a lot of code i understand that
782:34 - let's just make sure formatting is
782:35 - correct as well put commas here before
782:37 - your parentheses end so the formatting
782:39 - is a little bit nicer in that case
782:41 - so
782:42 - that's our
782:44 - show log out dialog
782:46 - function
782:50 - now as the caption says what we need to
782:53 - do is to go and display this
782:57 - dialogue to the user
782:59 - and the way to do that is
783:01 - upon
783:03 - the user tapping this log out button
783:05 - here you see the value is a menu action
783:07 - so what we're going to do
783:09 - is going to um do a switch statement so
783:12 - we say switch
783:14 - value
783:16 - and what i really like about
783:18 - uh the
783:21 - this
783:22 - warning that we're getting here saying
783:23 - the missing cause clause for log out
783:25 - dart is already understanding that
783:27 - um
783:28 - there's a case statement and there's a
783:31 - case in this menu action enumeration
783:33 - that we're not handling and it's asking
783:35 - us to do that so you could tap on this
783:37 - little
783:38 - here icon and say add missing case
783:40 - clauses or you can say command dot on
783:43 - mac or control dot on linux and windows
783:45 - to bring up this menu also and i've also
783:48 - understood from my conversations with
783:49 - others on linkedin that this option is
783:51 - also available on vim
783:53 - and other editors because this is part
783:55 - of the language front end actually so
783:58 - it's not only a thing you can do in
784:00 - visual studio code thankfully
784:03 - so
784:04 - go and add the missing case clauses
784:07 - and in this case what we need to do now
784:09 - is to display our alert so we're going
784:12 - to say await should log out or something
784:16 - and we say sorry final
784:18 - should log out is equal to wait and now
784:21 - we're going to call this function that
784:22 - we created show logout dialog
784:25 - okay
784:28 - and now it's complaining saying that you
784:30 - can't do wait because this function here
784:33 - is unselected is not asynchronous so now
784:35 - we're gonna make it asynchronous and
784:37 - then we're gonna say devtools
784:39 - log
784:40 - should log out to a string okay
784:44 - so command s and let's go to our ui now
784:48 - and i'm going because we're doing
784:50 - devtools log i'm going to bring up the
784:51 - debug console here clear it so you see
784:53 - better and i'm going to press the log
784:56 - out now you see our dialogue is
784:57 - displayed to the user saying sign up are
784:59 - you sure you want to sign up with our
785:01 - buttons pressing the cancel button where
785:04 - we're then going to come to the
785:05 - unselected here and get the value of
785:07 - false boof you see right there
785:10 - pressing the same button again saying
785:12 - log out and then log out here we're
785:14 - going to get the value of true
785:19 - wow that was also a lot of information
785:21 - so i'm just going to go to my notes and
785:23 - ensure that i've explained everything
785:25 - that i want to explain
785:26 - all right
785:29 - and that was done
785:31 - now
785:32 - now that we've displayed amnata we can
785:34 - actually display a dialog to the user
785:36 - get the true and false values back we
785:38 - need to also ensure that we're actually
785:40 - logging out from firebase as well so the
785:43 - true or false isn't enough we need to
785:44 - log out from firebase and the way to do
785:46 - that as you can see in the code here in
785:48 - the captions is firebase auth instance
785:50 - sign out okay
785:53 - so um
785:55 - what we need to do then is to call a
785:57 - function
785:59 - so we say in here um
786:01 - let me bring up my notes
786:04 - so we say if
786:07 - should log out
786:11 - then we are going to do that because you
786:13 - see this should log out says true if you
786:15 - do have to log out and false if you
786:17 - don't have to so we just made sure that
786:19 - it's true okay so you can either say it
786:20 - should log out or you can say if it
786:23 - shouldn't log out then return
786:26 - and then you do the actual log out after
786:28 - this so it completely depends on your
786:30 - style i'm just gonna do if should log
786:33 - out because it makes more like
786:34 - grammatical sense for me if i should log
786:36 - out and do this then saying if i
786:38 - shouldn't log out don't do this
786:41 - it's a little bit of a preference but
786:42 - you're free to to choose your own style
786:44 - as you go on
786:46 - so let's say firebase off
786:48 - um instance as we can see here and then
786:51 - we say sign out
786:53 - and you can see that it returns a future
786:55 - avoid
786:57 - so let's call it and then we say wait
787:01 - oof all
787:02 - right and now that we've done that
787:06 - uh after we sign the user out then
787:09 - there's no point keeping the user in
787:11 - this user interface because this user
787:13 - interface is only for people who are
787:15 - logged into the application and signing
787:17 - out from firebase means that well you're
787:19 - not logged out anymore okay or you're
787:21 - not signed in anymore sorry you're not
787:24 - logged in anymore signed in anymore
787:26 - they could be used interchangeably sign
787:28 - in or log in and log out and sign up
787:31 - depends of the lingo that you prefer to
787:34 - use in your in your project
787:37 - i also use these terms interchangeably
787:39 - so if i say sometimes sign out or log
787:41 - out you know what i mean
787:43 - all right in this case after you sign up
787:45 - we also want to send you to the login
787:46 - screen because that's like the in in my
787:48 - opinion at least it's the most common
787:50 - thing to do if you sign out of an
787:52 - application you then go back to the
787:53 - login screen okay
787:55 - otherwise if you for instance are
787:57 - developing a
787:58 - website and then there is like a
788:00 - a forum website or something and
788:03 - the user goes and logs out you may send
788:06 - them them to not to the login page but
788:08 - but you may actually send them to like a
788:10 - read-only copy of all the forms
788:12 - available in your in your website but
788:14 - since we don't have
788:16 - any content to display to a user who has
788:19 - signed out the only thing we can display
788:20 - to them is the login screen because we
788:22 - don't have any other content to display
788:24 - okay so upon signing out we're gonna
788:27 - send you to the login screen so let's do
788:29 - that now
788:30 - so we're gonna see navigator
788:32 - as you can see in the caption of um
788:36 - of our context
788:38 - and we're saying push remove push name
788:41 - and remove until and then we're going to
788:43 - say login
788:45 - leave like that
788:47 - and we don't need the route
788:49 - and just like that command s
788:53 - all right does this make sense
788:56 - so let's then see if this works um
789:01 - so
789:02 - let's have a look at that uh let me also
789:04 - go to my notes to ensure that i'm
789:06 - explaining
789:07 - everything
789:10 - yep
789:12 - great and let's just make sure that sign
789:14 - out is working okay so log out we say no
789:17 - just to test that that is working and
789:19 - then log out and then we say log out
789:21 - here and i can see i'm even using the
789:23 - language like interchangeably here which
789:24 - is not a good idea are you sure you want
789:26 - to sign out and then a log out button
789:28 - it's not perfect but it works
789:30 - you're free to change this if you want
789:31 - to and then if you say log out then we
789:33 - should go back to the login screen
789:35 - perfect
789:37 - that is working but something isn't
789:39 - working quite right and i'll tell you
789:41 - soon but before we do that let's go to
789:42 - the terminal and
789:44 - go to here i have two terminals one for
789:46 - scr cpy and the other terminal is for
789:49 - doing commits messages i'm going to
789:51 - bring up actually so you see it better
789:53 - so what we need to do as we've done in
789:55 - the previous chapter is now that we have
789:56 - git and github
789:58 - set up let's commit our work and we're
790:00 - going to call this step three okay
790:04 - so that's what we're going to do now we
790:05 - are going to commit our work and we're
790:07 - also going to tag it
790:09 - so let's say git status just to have a
790:11 - look at what we've changed i can see
790:13 - that there's only changes in the main
790:15 - dark file and you can also say git if so
790:17 - you can see what you've changed you see
790:20 - all the green ones are new and all the
790:21 - red ones are things that you've
790:23 - basically removed or replaced with new
790:25 - content
790:26 - for instance this one was removed this
790:29 - one was removed and this one was added
790:30 - all right so quite a bit of information
790:32 - here let's say it gets at all so we
790:36 - add all those to the staging environment
790:38 - in order to commit them and then i'm
790:40 - going to say git commit with a message
790:42 - of step three
790:44 - and let's have a look at our logs i can
790:46 - see initial commit which is step one and
790:48 - then step two and then step three
790:51 - and then you will push these changes or
790:54 - push the commits to github all right
790:57 - now i'm gonna clear that terminal here
790:58 - and we also need to tag our code
791:00 - remember commits are not the same thing
791:01 - as tags so i'm going to say git tag step
791:04 - 3
791:06 - and put your tags as well
791:10 - so that pushed the tags as well great
791:14 - wow that was a lot of work um
791:18 - but uh i have to kind of say
791:20 - congratulations for you to
791:22 - keep up with me in this chapter as we
791:24 - went through all these different bits
791:26 - and pieces that we had to put in place
791:28 - for the log out to work but like at such
791:30 - an integral part of our application that
791:32 - i think it's worth spending some time
791:34 - explaining how things are working also
791:36 - talk about a little bit of like basics
791:38 - of
791:39 - the show dialogue and menu items pop-ups
791:42 - etc etc so once we talk about them now
791:44 - we don't have to talk more about them
791:46 - later
791:48 - remember i told you something isn't
791:49 - quite working right here
791:53 - and that's what we're going to fix in
791:55 - the next chapter which is fixing the
791:57 - login screen and i'll tell you what is
791:59 - isn't working if you now go in here and
792:01 - put your email address
792:05 - and put your password in you can see
792:07 - pressing login doesn't do anything
792:09 - it just logs into the application
792:11 - because if you go to login view and we
792:13 - have a look at the code that we wrote
792:14 - here
792:15 - let me get rid of the console here
792:17 - if you look at the
792:19 - button that was pressed upon pressing it
792:21 - all we're doing is just we're doing a
792:22 - print user credential and you can see
792:25 - that if you go here oh i can see i
792:27 - actually got wrong password so let me go
792:30 - and say foo barbaz
792:32 - oh
792:34 - now we got the user credential here you
792:35 - see
792:36 - but still nothing worked even if you
792:38 - provide the correct user credentials
792:40 - then
792:41 - it's not working as it should and by
792:43 - that i mean it's not taking you to the
792:45 - next step what should happen in the next
792:47 - step all right
792:49 - so
792:50 - that is what we're gonna fix in the next
792:52 - chapter we're gonna work on fixing the
792:55 - login view so for this chapter all you
792:57 - all you and i did is to
792:59 - uh take care of our main user interface
793:02 - we got rid of that ugly uh
793:04 - done text widget that we were displaying
793:08 - at the end of the previous chapter
793:10 - and we have now a main ui with a
793:14 - menu
793:15 - bar item on top right and pressing that
793:17 - displays a
793:18 - pop-up menu
793:20 - which has an enum
793:22 - item in it upon pressing which then you
793:24 - get a dialog and then if you cancel
793:28 - um
793:29 - you go back to the main ui and if you
793:31 - say log out or sign out you go back to
793:33 - the long view so there was a lot of work
793:34 - that we did and congratulations for you
793:36 - for keeping up
793:38 - so
793:39 - uh get ready then and whatever you want
793:41 - to do get some refreshments and that we
793:43 - will fix our login screen in the next
793:45 - chapter
793:47 - hello and welcome to chapter 19 of the
793:49 - swata course
793:50 - in the previous chapter we worked on log
793:52 - out
793:53 - and after we completed log out you saw
793:56 - that we went to the login screen and um
794:00 - that it wasn't really working as it
794:01 - should in that
794:03 - what it was doing is um that it was
794:05 - logging you in with firebase and it was
794:07 - printing the user credentials to
794:10 - the debug console
794:12 - or the cons basically the console and we
794:15 - were seeing the logs
794:16 - but the login view wasn't actually going
794:19 - to the notes view
794:22 - so as you can see here it says the login
794:24 - doesn't route properly it just stays
794:25 - there and that's
794:26 - does nothing upon successful login and
794:29 - that's exactly what we're going to
794:30 - address in this chapter this chapter is
794:32 - going to be quite a short one because
794:33 - all we're basically doing is just doing
794:35 - some cleanup and we're going to go from
794:38 - the login screen to um the login view to
794:40 - the note c and we're going to remove
794:42 - some um
794:44 - law
794:44 - print statements um and this is like
794:46 - what what is gonna happen as you become
794:49 - more and more of a software developer
794:50 - and that sometimes you do the heavy
794:52 - lifting as we did in the previous
794:53 - chapter we took care of uh logout
794:56 - and you learned a lot about new classes
795:00 - like the buttons and the menus and
795:04 - unpressed of those menu items and then
795:06 - after you've done that you'll probably
795:08 - spend some time to clean up the code and
795:09 - this is one of those chapters that we're
795:12 - going to do
795:13 - a cleanup
795:16 - so let's have a look at the first thing
795:17 - that we need to remedy and that is our
795:20 - print statements
795:21 - um
795:22 - let's have a look at the code i'm going
795:24 - to bring up our code
795:29 - so i think we call it my nodes so here i
795:33 - think is the right window
795:35 - and i'm going to get rid of the debug
795:37 - console right there and i'm going to
795:39 - bring up scrcpy
795:42 - which i have somewhere around here
795:44 - okay so you can see in login view we
795:46 - have quite a lot of print statements at
795:48 - the moment they just say print user not
795:50 - found wrong password user credentials
795:52 - and etc
795:53 - and we also have a register view here
795:56 - which has a few print statements so
795:58 - let's go and remedy this and use log as
796:02 - we talked about it before so let's say
796:04 - i'm going to change the um
796:08 - view layout here so you see the code a
796:10 - little bit better
796:11 - let's go and use log and if you don't
796:13 - know the difference between log and
796:15 - print nice drawing i strongly suggest
796:16 - that you watch the previous chapters
796:18 - where we talked about this and why it is
796:20 - actually advised to use log instead of
796:22 - print
796:23 - and login itself isn't perfect it has
796:25 - it's not
796:26 - like problems but
796:29 - not problems maybe downsize or things
796:31 - that you need to be aware of and i
796:33 - highly suggest that you read the
796:34 - documentations for log as well but um in
796:37 - this case as you can see it's also
796:38 - suggested by the analyzer not to use a
796:41 - print so we're going to change that to
796:43 - both in the login view and registry
796:45 - we're going to change that to
796:46 - using log so let's go ahead and say
796:49 - import dart developer and as devtools
796:53 - show log all right now i'm gonna copy
796:56 - paste this in here as well and at the
796:58 - same time i'm gonna clean up the code a
797:01 - little bit in register view all right
797:05 - okay we've done the import in login view
797:07 - and register you want to save those and
797:10 - now let's go to the login view and
797:11 - remove all these print statements and
797:13 - instead just say devtools
797:16 - log
797:17 - and we're just going to say user
797:19 - credential to string okay remember print
797:21 - can print an object
797:23 - if you look at the
797:25 - information for print here
797:27 - excuse me
797:28 - you can see the function signatures is
797:30 - that i can print an optional
797:32 - object which is kind of peculiar that it
797:34 - can print an optional object i mean
797:37 - um
797:38 - does it mean that i don't have to
797:40 - actually pass a parameter no it has a
797:42 - positional argument but that argument
797:44 - can be not so i could say
797:46 - string um
797:49 - value is null like this like an optional
797:51 - and just pass that here so i animal
797:53 - still work that's what it means so let's
797:56 - have fun it can accept an optional
797:59 - object
798:00 - and remember every object has a function
798:03 - called to string so this two string
798:06 - functions actually coming from objects
798:07 - so we can command click on it
798:09 - and you'll see that uh let's see oh that
798:12 - this is the two string of
798:15 - user credential but if we look at um
798:21 - if we create for instance how do i
798:24 - explain the tostring and where it comes
798:26 - from
798:26 - um
798:27 - let's let's do it like this let's say we
798:30 - have an object
798:32 - optional object value and that is null
798:34 - now i can say value to string you see
798:37 - there's a function there
798:38 - so these are the op these are the
798:41 - functions and properties that any object
798:43 - exposes and every class
798:47 - in dart
798:49 - is
798:50 - implicitly a subclass of object
798:52 - including user credential meaning that
798:55 - user credential has inherited the
798:57 - tostring
799:00 - function from the object class however
799:03 - if you looked at the source code for
799:05 - this particular two string you can see
799:07 - it comes from package firebase off
799:08 - firebase off the dart meaning that user
799:11 - credential this class has overwritten
799:14 - the functionality of tostring meaning
799:16 - that it is returning its own string to
799:18 - represent itself all right
799:20 - and that's this long string that we saw
799:22 - actually
799:23 - we can't see it now but let me see if i
799:25 - can
799:27 - log in here so you see it poof
799:30 - and you see this user credential that is
799:32 - printed right here
799:33 - let me change the screen layout a little
799:35 - bit so this user credential
799:38 - so
799:39 - this is being printed or this is being
799:41 - returned and calculated by
799:43 - the to string function on user
799:45 - credential and you can see it looks like
799:46 - this user credential and then additional
799:48 - information and then prints the
799:49 - additional information and that's
799:50 - exactly what you can see here you see
799:52 - additional user info and then there's
799:54 - credential which i believe
799:59 - it should be somewhere around here
800:01 - is anonymous is here credential that's
800:03 - the key and then another one called user
800:07 - and where could that be
800:10 - it's somewhere in here i can't see it
800:12 - really but it should be somewhere in
800:14 - here
800:15 - user password i mean to be honest if you
800:17 - copied this like if i actually copied
800:19 - this and brought it into its own file
800:22 - and search for user
800:24 - boom boom let's see
800:28 - it's a little bit strange that it's all
800:29 - in one line but that's okay too i'm
800:31 - going to search for user boom
800:34 - and that is the user information you can
800:36 - see user is user display name etc so
800:40 - that's two string okay the reason i'm
800:42 - explaining all of this is because you
800:43 - need to know that print can print an
800:45 - object but log can't log needs a string
800:49 - so if you look at the function signature
800:50 - it says give me a message of type string
800:52 - okay
800:53 - so
800:54 - um that's what we're doing here we're
800:56 - saying devtools log and then user
800:57 - credentials to string
801:00 - we need to do the tostring okay
801:02 - so go ahead copy this dev tools log and
801:05 - then
801:06 - let's change all these print statements
801:07 - to say that that's what needs to be
801:09 - printed now or logged
801:12 - change all of those in your login view
801:14 - so that you don't have any more warnings
801:16 - here
801:17 - related to print okay
801:19 - save your login view and then go to
801:20 - register view and do the exact same
801:22 - thing so
801:23 - user credentials
801:25 - needs to be to stream
801:28 - and for weak password do the same thing
801:31 - email to the same thing and then invalid
801:33 - email entered and we have no other print
801:36 - statements and what you could do i mean
801:38 - i haven't
801:39 - had a plan for this uh in
801:42 - in my notes here i don't see
801:45 - anywhere that i'd plan for that but i
801:47 - think we could just
801:48 - uh
801:49 - we could just improvise a little bit and
801:51 - what i really like to do when i'm doing
801:52 - like cleanups like this in my source
801:54 - code i like to go and make sure that
801:56 - there's no print statement statement
801:58 - anywhere else because it just feels like
802:01 - when you're clean on cleaning up your
802:03 - code especially if you're doing
802:04 - something as simple as what we're doing
802:06 - here it is worth spending maybe just a
802:08 - few more seconds and making sure that
802:10 - you're applying the same cleanup in the
802:11 - entire source now sometimes your source
802:14 - code may be so big and complicated that
802:17 - you changing even a simple bit of code
802:19 - may affect the source code in such a way
802:21 - that you may not know if you're breaking
802:23 - it or anything
802:25 - so
802:26 - and for that we need tests unit tests
802:28 - widget tests etc but if that is the case
802:32 - you don't have to do that but in this
802:33 - case since our application is so new
802:35 - we've just created it there's not much
802:37 - logic in it i think it's worth maybe
802:38 - just doing a command shift f
802:40 - in visual studio on mac or ctrl shift f
802:43 - it was just here to go on linux and
802:44 - windows just to go go to this global
802:46 - search and just search for print
802:49 - and i can see here that we don't have
802:51 - any print left in our source code so we
802:53 - don't have to change anything else all
802:54 - the prints seem to have been in the
802:56 - login view and in the register view so
802:59 - don't worry about that anymore okay
803:04 - all right
803:05 - that was for our prints
803:08 - um so now what we need to do is to
803:12 - ensure
803:14 - that
803:15 - yeah basically we need to now focus on
803:16 - what we wanted to do in this chapter
803:19 - that was a side kind of like a
803:21 - side note there to clean up our print
803:24 - statements what we need to do in this
803:24 - chapter to make sure that we can go from
803:26 - the login view to the
803:28 - notes view i believe is what we created
803:31 - in the
803:32 - and one of the previous chapters um
803:35 - is it here in the main dart perhaps
803:40 - let's see
803:41 - notes view yeah
803:43 - so let's do that and you remember from
803:46 - the previous chapters where we oh we
803:48 - don't need the
803:49 - devtools log here okay
803:51 - if you remember from one of the previous
803:52 - chapters where we talked about named
803:54 - routes and named routes as you can see
803:56 - that are defined in the main function
803:59 - now remember the main function
804:02 - does not get recompiled
804:05 - when you do a hot reload keep that in
804:07 - mind so we're now going to modify our
804:10 - routes and allow and create a new route
804:13 - as you can see here it's called nodes
804:15 - actually it should be node slash
804:18 - so i'm going to hide this caption
804:21 - and change it so that it is actually
804:24 - accurate
804:26 - like that
804:27 - um and i'm going to bring it up
804:30 - again so you see the
804:32 - correct route that we have to create
804:33 - okay
804:34 - so let's go in here and create a new
804:36 - route for our notes
804:39 - and anybody who then
804:41 - that tries to
804:43 - push this route on the screen will get
804:45 - the
804:46 - notes view appear
804:48 - on their screen okay so let's just say
804:50 - as a string and notes slash as the
804:53 - captions suggest and then you have to
804:54 - provide remember the routes was a map
804:58 - where the keys were strings and the
805:00 - values had to be functions that accept
805:03 - the build context and return a widget
805:05 - it's a little bit of a string syntax but
805:07 - you'll get used to so the value should
805:09 - accept the build context as you can see
805:10 - here and it should return a widget so in
805:12 - this case we return the notes view okay
805:15 - as a constant
805:19 - okay that part is done now so
805:22 - what we need to do now is to ensure that
805:24 - upon pressing the login view sorry upon
805:27 - press upon pressing the login button
805:30 - that we are doing a code similar to
805:33 - what we did in um if you look here in
805:36 - our login view when we went to register
805:38 - do you remember this navigator of
805:40 - context push name and remove until okay
805:44 - so
805:45 - we need to we need to do that and
805:48 - when we do this
805:50 - when we did this initially when we
805:52 - worked with push name and remove until i
805:54 - don't think i actually explained
805:55 - entirely what push named and remove
805:58 - until does to be honest
806:00 - so i'll do that now
806:02 - as its name suggests it pushes around on
806:05 - the screen so it says that you have a
806:07 - screen and you want to put something on
806:09 - top of it okay so pushing is something
806:10 - that is very popular in mobile
806:12 - development because
806:14 - a mobile screen
806:16 - usually i mean after ios came um
806:19 - it became very popular that you had a
806:21 - screen you press the button and another
806:23 - screen got pushed on top of that screen
806:26 - so this has been available i mean in
806:27 - many other places even web browsers are
806:29 - not doing it these days and even nokia
806:32 - phones in in the good old days were
806:33 - doing the same thing but it wasn't as
806:35 - popular back then and it wasn't like
806:38 - coined as a term of pushing until ios
806:40 - and android became more and more popular
806:42 - back in 2007
806:43 - so
806:45 - pushing is the concept of having a
806:46 - screen and then
806:48 - moving and pushing physically another
806:50 - screen on top of it okay
806:52 - so that's what push means in push name
806:56 - all right the named part of this
806:58 - function means that you have a named
807:00 - route so you have defined a route
807:02 - somewhere such as your main screen here
807:05 - and you are trying to push that using
807:07 - its name so you're not just pushing a
807:09 - new widget out of nowhere okay so that's
807:11 - what the name means
807:13 - now
807:14 - the part that says and remove until
807:18 - what it says is um
807:20 - if you have for instance one screen here
807:22 - another one is pushed on top of it and
807:23 - now you want to push another one on the
807:25 - screen
807:27 - what the remove until says it says if
807:29 - you want to push this one on the screen
807:30 - i'm going to give you the chance to get
807:32 - rid of the existing screen on the stack
807:34 - so i remove these first and then i'll
807:37 - push yours and this is kind of useful
807:39 - for for instance if you're let's say you
807:41 - have a login view
807:43 - and then you press the login button and
807:46 - in the in our case when the user
807:47 - credentials are correct if we then
807:50 - um
807:52 - if we then want to go to the notes view
807:55 - we don't have to keep this logging view
807:57 - on the screen so if this login view is
808:00 - here what we could do is to push the
808:02 - notes via on top of it some nodes view
808:04 - is always sitting here but then you as a
808:06 - programmer not the user as a programmer
808:08 - you'll always know that the
808:10 - login view is sitting behind this so
808:12 - that's not so good because once you're
808:14 - logged in
808:16 - and you're on the notes view you don't
808:17 - need this view anymore you don't need
808:19 - the login view sitting there and
808:21 - consuming memory so that's what remove
808:24 - until does because it gives you the
808:26 - opportunity it passes you see a route of
808:28 - dynamic and it says let me know when you
808:32 - want me to stop
808:33 - move removing things from the screen
808:36 - before i push yours and us returning
808:38 - false basically says
808:40 - just remove everything don't care about
808:42 - the routes that are on the screen at the
808:44 - moment and don't care about the routes
808:46 - that you're telling me about just remove
808:48 - everything and go to this register view
808:50 - okay
808:52 - all right that was a lot of information
808:53 - hopefully you got that so
808:55 - now we need to do is to go to our login
808:57 - view which we are right now and upon
809:00 - getting our user credentials here what
809:04 - we need to do is to send the user to the
809:07 - um
809:08 - main ui
809:09 - so i'm just gonna check in my notes that
809:11 - i've explained everything to you before
809:13 - we go forward
809:15 - and yeah that seems to be the case so um
809:18 - let's then go ahead and do that right
809:20 - here
809:22 - what we're going to do is going to get
809:23 - rid of this dev tools log here okay
809:27 - let's then go in here and say
809:30 - and navigator
809:31 - of and remember we have a build context
809:33 - and we're going to say push name and
809:35 - remove until
809:37 - uh like this and our new route name is
809:41 - actually what's it called notes i think
809:43 - we call it right in here yeah slash note
809:46 - slash
809:48 - so put put that in there and in here you
809:51 - could just say
809:52 - return false okay now
809:55 - this is one thing of also i haven't
809:57 - mentioned in the previous chapters but
810:00 - in dart it is very important that you
810:02 - always suffix your parameters
810:05 - parameter values with a
810:08 - a comma and a comma you can see here
810:11 - is placed usually between parameters but
810:13 - also the last parameter is suggested to
810:15 - have a comma because as you can see here
810:16 - the dart formatter right now isn't
810:18 - really able to break this
810:20 - these two parameters into two separate
810:22 - lines of code and that's what we usually
810:24 - do in dart you can see here for instance
810:26 - when we did a wait on firebase instance
810:29 - sign in in the last parameter we had a
810:32 - comma if i remove that the code will
810:34 - actually be a little bit uglier in this
810:36 - it looks like this but if you put a
810:38 - comma at the end of your last parameter
810:41 - dark is able to break your parameters
810:43 - each parameter and its value in its own
810:46 - line and that's like a usual convention
810:48 - in dart so if you see something like
810:50 - this that doesn't look quite right put a
810:51 - comma at the end of the last parameter
810:53 - and press command s for dark formatter
810:55 - to be able to format your
810:57 - uh code okay
811:00 - great we've done that now
811:02 - and at the moment we're not using
811:04 - the user credentials um at all so what
811:07 - we could do to be honest with you is to
811:09 - get rid of that so all we'll do is we
811:11 - say firebase instance sign in with email
811:13 - and password okay
811:15 - and um that's it because this whole
811:18 - thing is in a try block so if this thing
811:20 - doesn't work properly then we'll come
811:22 - here okay
811:23 - now
811:24 - well this is great actually now we're
811:26 - gonna go from our
811:28 - um login view to the notes view but
811:31 - you'll be a bit disappointed to see that
811:33 - this isn't going to work as it should so
811:36 - let me change the
811:37 - uh ui a little bit here and then press
811:40 - the login button
811:42 - and you'll see we get an error here that
811:44 - says unfortunately on unknown route was
811:46 - not set
811:48 - it's quite cute that they say
811:50 - unfortunately in the
811:52 - uh in the actual airlocks so
811:55 - that's what this caption also tells you
811:58 - you see i i talked about it a little bit
812:00 - before
812:00 - when we kind of started with this
812:02 - chapter that we said that we're going to
812:03 - put the
812:05 - login as our the notes
812:07 - name route in the main function
812:10 - but
812:10 - this is i told you that this isn't going
812:12 - to really work so well the reason is
812:14 - again the main function isn't going to
812:17 - rebuild when you do hot reload so
812:20 - in order for your changes in the main
812:22 - function to take effect you need to do a
812:24 - hot restart so what is happening here is
812:26 - that you've defined everything correctly
812:28 - everything is done right there's nothing
812:29 - wrong in the code itself it's just the
812:31 - way we are executing the code that is
812:33 - wrong and now you have to do a hot
812:35 - restart for flutter to be able to pick
812:36 - up your changes in the main function as
812:38 - well okay so hot reload is not going to
812:40 - do it so you need to do a hot restart so
812:42 - i'm going to do hot restart here
812:45 - we come here and now you see we're in
812:46 - the hello world because
812:48 - we are actually logged in from the
812:50 - previous section
812:52 - um i'm going to log out
812:54 - and we come here now i'm going to enter
812:56 - my
812:58 - details
812:59 - foo bar baths and please don't
813:01 - use football bats as your password i'm
813:03 - just doing it for the sake of simplicity
813:05 - and now we say login and you see that by
813:08 - doing login we come to the main ui of
813:12 - the application so and as you saw
813:16 - pushing in android using material design
813:20 - isn't the same thing as
813:22 - pushing on ios let me let me demonstrate
813:24 - it one more time for you so you'll have
813:25 - a
813:26 - good look at it in the login view enter
813:29 - your information
813:33 - uh
813:34 - through barbados and then do log in and
813:36 - before you do that just have just make
813:39 - sure that you're focusing very well on
813:40 - the screen i'm going to bring it up a
813:41 - little bit more
813:43 - so you'll see better um look how this
813:47 - main ui of the application won't
813:49 - actually be pushed but it instead will
813:51 - be kind of like moved from the bottom of
813:53 - the screen to the top while that
813:55 - previous screen gets faded away so
813:58 - focus on the screen please
814:01 - did you see that so
814:02 - ios and android are going to work
814:04 - differently differently but the
814:06 - concept is the same so now that the main
814:08 - ui is pushed to the screen where an
814:11 - android is displayed on the screen the
814:13 - login view has disappeared and been
814:16 - removed from the view stack okay
814:19 - so that's great that's all we have to do
814:22 - in this chapter so i hope actually you
814:24 - are happy with the results and that we
814:27 - didn't have to do too much now what we
814:29 - need to do also we need to make sure
814:30 - that we do like we did in the other
814:32 - chapters so let's go ahead and
814:35 - let's go and commit and tag our changes
814:38 - all right so we if you look at our tag
814:41 - um
814:42 - if you say git tag we have now step one
814:44 - two three
814:46 - and this
814:47 - chapter in this chapter we're gonna
814:48 - commit our message commit our changes
814:51 - and tag it with the tag name of step
814:54 - four so if you look at git log we did
814:57 - step three in the previous chapter now
814:58 - we're gonna do step four so let's say
815:01 - git add
815:02 - all and you can see it was just a few
815:04 - files that we changed
815:06 - now let's um i'm not sorry i'm going to
815:08 - change the screen layout
815:10 - i'm also going to say git commit
815:13 - um
815:14 - step 4
815:16 - okay
815:17 - and um
815:19 - now let's tag it as well
815:22 - let's push our changes to uh github and
815:26 - also let's get a push our tags
815:30 - like this
815:32 - so if you say git tag now now we have
815:35 - four tags and if we do its log
815:39 - you'll see we have step two three and
815:41 - four and the initial commit which is
815:43 - step one all right well done that was
815:47 - great and work for this chapter quite a
815:49 - short chapter and sweet um and now we
815:52 - need to get ready for the next chapter
815:53 - as you can see in the caption here says
815:55 - we need to clean up our routes since
815:56 - they are everywhere
815:58 - and that means that you can see here
815:59 - we've defined our routes login register
816:02 - nodes but also in the login view we're
816:04 - like redefining we're saying that
816:06 - actually not redefining we're trying to
816:07 - like go to the notes route but we're
816:09 - typing the entire route name again and
816:12 - this is usually in programming not a
816:14 - good idea like if you have strings
816:15 - flying all over the all over the place
816:18 - like one is defined in the main dart the
816:20 - other one is called in the login view
816:22 - and this something similar is used for
816:24 - instance in the register view as you can
816:26 - see here
816:28 - usually this means that you need to um
816:30 - bring these into one central place and
816:33 - kind of reuse them and that is exactly
816:36 - what we're gonna do in the next chapter
816:38 - so
816:38 - um let's just
816:40 - leave it like this and i'll see you in
816:42 - the next chapter
816:44 - hello and welcome to chapter 20 of this
816:46 - flutter course
816:47 - in this chapter which is going to be a
816:50 - very short one i think it's going to be
816:51 - the shortest chapter of all the chapters
816:52 - we've done so far we're going to do some
816:55 - cleanup now
816:57 - you can see that uh i mean i'll show you
817:00 - what state we left our code in in the
817:02 - previous chapter
817:04 - this is what we've done so i'm gonna
817:06 - bring up the project uh
817:08 - files up here
817:10 - you will see that um the state that we
817:12 - left our project in was if we go to our
817:15 - main dart we had some routes defined i'm
817:19 - gonna
817:19 - do it like this you'll see it better we
817:21 - had some routes defined
817:23 - and um
817:26 - and one was called a login which the
817:28 - register view actually uses to send the
817:30 - user to the login view
817:32 - if the user already had
817:34 - a
817:36 - if the user had already registered and
817:37 - we don't actually have to
817:39 - talk
817:40 - about that without showing it so let's
817:42 - go here let's go here in the register
817:44 - view so if the user ends up in the
817:46 - registry and they
817:48 - already have a username and
817:50 - their email and password setup then they
817:53 - can click on this or tap on this button
817:55 - that says already registered log in here
817:58 - and that happens in our
818:01 - register view here navigator of push
818:04 - name and then goes to the login route
818:06 - which is defined in main art and kind of
818:09 - the same thing happens in the login view
818:11 - here so if the user doesn't have
818:15 - their
818:16 - if the user hasn't registered for our
818:18 - service then they can actually tap on
818:20 - not register yet register here button
818:22 - okay
818:23 - and that's the register route and the
818:26 - third route that we have is the notes
818:28 - route which allows us to send the user
818:30 - from the login screen to the main ui of
818:34 - the application which we just call at
818:36 - the moment
818:37 - notes view which right now
818:39 - resides inside main dart and i'll just
818:43 - have a look at my code here and just to
818:45 - ensure that that is
818:48 - what i had intended yeah so we haven't
818:50 - yet
818:51 - refactored notes view and we haven't yet
818:54 - put it into its own file okay
818:57 - so
818:58 - let's talk about hard coding now
819:01 - if you're not a programmer like if you
819:03 - don't have a software development
819:04 - background you probably don't know what
819:06 - hard coding is but
819:08 - i'll i'll kind of give you the um
819:12 - i'll give you example maybe in different
819:15 - worlds that may also
819:17 - be relevant for a programmer let's say
819:19 - you're working in figma and you're
819:21 - working with a design so you have a list
819:24 - of items to display on the screen and
819:26 - you create these list designs like you
819:29 - have a little cell that should be
819:31 - displayed inside a view then you go and
819:33 - copy paste this
819:35 - in 10 different places and then
819:38 - you talk to the team about the design
819:40 - that you've created and then they say oh
819:41 - you'd be really great if this label was
819:43 - a little bit bigger then what you'd have
819:45 - to do is to go to every place that
819:47 - you've copy pasted that
819:50 - cell and you have to change the label a
819:53 - better way of doing that in figma if
819:54 - you're a designer would be to create a
819:57 - component and then create instances of
819:59 - that design component in various pages
820:02 - of your figma design
820:04 - so if
820:06 - so you need to update something then you
820:07 - need to just update it in one place
820:10 - so
820:11 - even if you're not coming from a design
820:13 - background and you're working for
820:14 - instance as a project this is a product
820:17 - owner or a project manager you may be
820:20 - working with some like um
820:22 - excel sheets and you're creating maybe
820:24 - um some
820:27 - graphs now if you create a graph from a
820:29 - data set
820:31 - you probably want to reuse that graph in
820:33 - other places so if someone says okay can
820:35 - i get like all the graphs available in
820:37 - the project then you don't go and create
820:38 - the same graph over and over again you
820:40 - kind of want to refer to the same sheet
820:42 - in your
820:43 - google sheets or your excel sheets so
820:47 - the concept is the same you don't want
820:49 - to repeat yourself and that's what the
820:51 - mistake that we've done at the moment in
820:52 - our source code in that we have our
820:54 - routes defined in one place however
820:57 - where every word we're gonna use these
821:00 - routes we're writing their names again
821:01 - and this is one thing
821:03 - that most programmers do not like
821:06 - when you become more of a seasoned like
821:08 - a senior developer then you try to avoid
821:11 - these things because if we now go to our
821:14 - main dart file and change this login to
821:17 - just slash login then we have to search
821:19 - everywhere in our project for a name
821:21 - route called slash login slash as it was
821:24 - before and change that to this new form
821:27 - and that's not a good idea
821:31 - that's hard coding and that is why
821:33 - developers don't like it and i suggest
821:35 - that you don't like it either
821:38 - so uh what we're gonna do in this
821:40 - chapter very quickly hopefully we can
821:42 - get done with it soon
821:44 - uh be done with it soon we're gonna
821:46 - create a new file in our project is the
821:50 - first file of its kind that we're
821:52 - creating where we're going to put our
821:53 - constants okay so constants as you know
821:56 - from where we talked about dart are
821:58 - values that don't change during the
821:59 - compile time
822:01 - and they don't change during the runtime
822:03 - either so these are our route names
822:05 - because they're always constant they're
822:07 - no one is going in there and changing
822:09 - them okay
822:10 - so let's go ahead and do that as a
822:12 - caption says here let's go create a fox
822:14 - under lib under folder called constants
822:17 - and then routes and as i showed you
822:19 - before you don't have to create the
822:20 - intermediate directories in this case
822:23 - constants before you create the route
822:25 - start file what you'll need to do is
822:27 - just right click on lib where you want
822:29 - to create the constants and then the lib
822:31 - sorry the constants folder and then um
822:34 - route start file just right click here
822:37 - say new file then say constants um if i
822:40 - can spell it um
822:43 - and then say
822:44 - routes part
822:47 - and that will create the constants
822:48 - folder intermediate folder for you okay
822:52 - so
822:53 - what we need now is to define as the
822:55 - caption says here we need to define
822:57 - three routes one for the login route one
823:00 - for register and the other one for the
823:01 - notes route so let's just say
823:03 - const login route
823:05 - and we just say that's equal to login
823:08 - slash i'm gonna copy paste this and i'm
823:11 - just gonna in this second one just say
823:13 - this is
823:14 - uh register route as the caption
823:16 - suggests and then the notes route okay
823:19 - and in here i'm going to say register
823:21 - and in here you should say also notes
823:23 - okay so now we've defined these three
823:26 - routes
823:28 - but what we need to do now we've defined
823:30 - them but this is not enough what we need
823:32 - to do is to actually go and use them so
823:35 - let's go back to our main dart file and
823:37 - in here instead of using login we need
823:40 - to use a login route right and you can
823:43 - see now visual studio code smart enough
823:45 - to understand that this is a symbol that
823:47 - we've defined in a file here
823:50 - but this symbol right now isn't
823:52 - available in the current context because
823:53 - we haven't imported that constant
823:57 - routes
823:58 - file
824:00 - so
824:01 - if i just
824:02 - allow visual studio code to auto import
824:04 - that you can see all of a sudden the
824:06 - symbol becomes a valid symbol
824:08 - in my current context and if i go up
824:11 - here then i should be able to see that
824:13 - visual studio code has imported this
824:15 - file for me but if you're if you're
824:18 - working with veeam or if you're working
824:19 - with android studio and you're not
824:22 - given the opportunity to
824:24 - uh to import you can always go to this
824:26 - symbol and just say
824:28 - uh command dot or control dot depending
824:30 - on your operating system and just say
824:31 - import that library
824:34 - and even if your
824:35 - editor isn't smart enough to do
824:37 - importing in this way you can import it
824:39 - yourself so you can just say
824:42 - um import
824:44 - package then the name of the application
824:46 - which is my notes and then you'd say
824:48 - constants slash routes dot darts so
824:53 - there you have three ways of solving the
824:54 - same problem i usually do auto import so
824:56 - i don't have to type all of that um and
824:59 - i'm not gonna explain this more than in
825:01 - the upcoming chapter so you have all the
825:03 - tools necessary in order to be able to
825:05 - fix a problem like this okay so in here
825:08 - i'm going to use register route and
825:10 - since
825:10 - uh route start is now imported here
825:14 - here
825:15 - then i'm not going to have a problem and
825:17 - i don't have to auto import anything
825:19 - okay and for notes i'm going to say
825:21 - notes route
825:23 - oh that's great now we've defined them
825:26 - in our main function however we still
825:28 - have a few places where we're doing
825:31 - routing and we're hard coding those
825:33 - routes so let's fix first our notes view
825:37 - which is the main ui of the application
825:39 - so if i type here pixel tab gmail.com
825:46 - like that and then i say um
825:50 - login
825:53 - and we're getting some oh foobar baz
826:00 - in here when we do log out that's where
826:03 - we sending the user to the login route
826:04 - so let's change that as well to say
826:06 - login route okay so that's one place
826:10 - uh i'm gonna then say log out here poof
826:13 - log out
826:14 - so that's fixed now the other place we
826:16 - have to fix is in the login view as you
826:19 - can see here
826:20 - where we press the not register yet
826:23 - register here button so let's go to the
826:25 - login view
826:26 - in our views in login view
826:29 - i'm going to get rid of the explorer
826:30 - there
826:31 - in the
826:33 - in this button not registered yet let's
826:35 - see where it is
826:38 - here
826:40 - you see we're sending the user to the
826:41 - register route so i'm going to send them
826:44 - instead to register router and you can
826:46 - see you should code smart enough again
826:48 - to do auto import so i'm going to take
826:49 - that option
826:50 - and also we have another route here
826:52 - which sends you to notes where you
826:55 - have successfully logged in so let's
826:57 - just say notes route okay
827:00 - so that's for our login view
827:02 - and now the other place that we have to
827:03 - fix is in register so go to your project
827:06 - explorer and then go to register view
827:08 - and have a look at where we're doing
827:10 - this login button here okay
827:13 - and
827:15 - let's then say instead of
827:18 - that we're just going to say
827:21 - login routes okay so
827:24 - if you now search for push name and
827:26 - remove until and then show the results
827:30 - if you click through them you shouldn't
827:32 - have any routes that is hard coded okay
827:34 - so
827:35 - nodes route
827:37 - register route and the login route so
827:41 - now we fix this and just remember
827:44 - because we now have changed the main
827:47 - function here and we have some routes
827:49 - here do you have to do hot restart in
827:51 - order to see your changes but
827:53 - if everything's working according to the
827:55 - plan and that we didn't like to make any
827:58 - wrong choices in our rat names and that
828:00 - we gave them the same name or anything
828:02 - which we haven't
828:04 - if everything is working like it did
828:06 - before then you shouldn't see any
828:07 - changes in here so if you enter your
828:10 - information like you did before
828:13 - and i say foobar about then i should be
828:16 - able to log in
828:17 - should be able to log out
828:19 - and i should be able to go to register
828:21 - view or the login view so
828:24 - it's working exactly as it did before
828:26 - okay
828:29 - all right great stuff that was a quick
828:31 - chapter as other chapters since now we
828:34 - have made some changes and we've
828:36 - actually made the code better and we've
828:38 - tested to make sure everything works
828:40 - fine it's time to commit our changes as
828:43 - you can see the previous chapter we
828:46 - committed our changes as step 4
828:49 - and in this chapter we're gonna commit
828:51 - our changes as step five and we're also
828:54 - going to
828:55 - um
828:56 - we're also going to tag it like we did
828:58 - before
829:00 - and let me change the
829:01 - layout as well so you'll see the
829:04 - terminal a little bit better i'm gonna
829:06 - do it like this gonna make the terminal
829:08 - bigger even so you see it even better
829:10 - so let's go ahead and see what the
829:13 - status is i can see there are lots of
829:16 - changes as you can see here it says
829:18 - you've made changes you modified these
829:19 - existing files and now all of a sudden
829:21 - there's a new folder as well so what i
829:24 - like to do in these cases when there is
829:26 - a new folder i like to do bits add all
829:29 - because this adds all the files and
829:31 - folders
829:32 - so you can take it at all and if you say
829:35 - git status now you can see
829:37 - the new folder including its content is
829:39 - now added to the staging environment or
829:42 - the staging area
829:45 - okay now we've staged so now let's
829:47 - commit and we say we said that we are
829:49 - going to commit and tag as step five
829:53 - so let's say step five um and then get
829:56 - tag
829:57 - um step five as well get push your
830:00 - changes
830:01 - and then give push the tags as well
830:04 - all right so if i say you tag now we
830:06 - have five tags
830:08 - and if i say gitland we have step five
830:10 - four three two and then the initial
830:13 - commit which is pretty much step one all
830:14 - right so
830:16 - great stuff well done for going through
830:19 - this chapter so fast as well together
830:20 - with me and what we need to do now is to
830:23 - get ready for the next chapter
830:25 - and just to give you a little preview
830:27 - what we're going to work on is to have a
830:29 - look at our error handling in
830:32 - specifically the login view so if i make
830:34 - this a little bit smaller so it's more
830:36 - digestible you can see at the moment our
830:39 - error handling the reason i put
830:41 - quotation marks around it is that it's
830:43 - not so much of an error handling to be
830:44 - honest with you what it is doing is just
830:46 - says if an error of this type happens
830:49 - then log this message to the console a
830:52 - normal user sitting with their phone
830:55 - they don't have access to logs they're
830:56 - not going to see any logs so logs are
830:59 - very very much useless for them and what
831:01 - we're going to do in the next chapter is
831:03 - actually display meaningful information
831:05 - to the user
831:06 - using some alert views and
831:10 - dialogues so
831:12 - grab your refreshments if you want to
831:14 - and i'll see you in the next chapter
831:17 - hello and welcome to chapter 21 of this
831:19 - flutter course
831:21 - in the previous chapter as you remember
831:23 - we talked about cleaning up the routes
831:25 - that we have in our main function and we
831:27 - put them inside their own dart files so
831:30 - that they are separate from um so we're
831:33 - basically not hard coding hard coding
831:35 - them in different places of the
831:36 - application
831:37 - we talked about what hard coding also is
831:39 - if you're not coming from a software
831:41 - development background and why it is
831:43 - usually a good thing not to hard code
831:45 - your strings and spread them around in
831:47 - the entire code base
831:50 - in this chapter we are going to focus on
831:52 - cleaning up
831:54 - error handling in our login view to
831:56 - start with if you remember our login
831:59 - view at the moment
832:00 - actually i don't have to say if you
832:02 - remember because i can bring up the code
832:04 - so we can have a look at it together
832:07 - here is our
832:10 - code
832:11 - i'm going to bring up scrcpy here as
832:14 - well so you can see
832:16 - the android phone working okay
832:18 - so i'm going to also change a little bit
832:21 - the um
832:23 - screen layout so if you remember uh we
832:26 - have our login view right here probably
832:29 - have to move some things around here so
832:31 - it becomes a little bit better layout
832:33 - let's go to login view and we have then
832:36 - our
832:37 - um
832:38 - lock statements here should anything go
832:41 - wrong so
832:43 - if we could sign in with an email and a
832:45 - password then we were pushing the notes
832:48 - route onto the screen
832:50 - but if there was a problem with our
832:52 - firebase authentication and we got a
832:54 - firebase auth exception
832:56 - we are simply at the moment logging that
832:59 - information to the debug console and
833:02 - that is not good enough because should
833:04 - any errors happen for instance if the
833:06 - current user couldn't be found or that
833:08 - the password is incorrect
833:10 - uh your end user will not receive these
833:14 - logs because they're not running this
833:16 - application beside visual studio code or
833:18 - anything like that
833:20 - except your actual users are going to be
833:22 - running the application on a normal
833:24 - telephone such as an android or an ios
833:27 - or an
833:28 - ipad even or tablet
833:31 - so that's what we are going to do in
833:32 - this chapter we're going to clean up the
833:34 - logic for our error handling so um
833:38 - so before you begin with this chapter
833:40 - just make sure that you're inside your
833:42 - login view as we are right here and then
833:45 - ensure that your application or your
833:47 - user is logged out so if you're in the
833:50 - main interface of the application or
833:52 - you're inside the notes view as we call
833:55 - it ensure that you go to the menu and
833:57 - then you log out of the application also
833:59 - make sure that your telephone or your
834:01 - emulator simulator also has internet
834:03 - connectivity so
834:04 - you can actually hit firebase back end
834:07 - [Music]
834:09 - okay
834:10 - so as you've seen in our login view and
834:14 - register view we have logic that tries
834:17 - to handle
834:19 - different kinds of errors that may arise
834:21 - for instance in the registration view we
834:22 - have weak password handling and we have
834:25 - email already in use or an invalid email
834:29 - error handling
834:30 - and so here we have three error handling
834:34 - and also in login view we have two error
834:37 - handling and
834:39 - aside from these we also need to handle
834:42 - the case of any other exception that
834:44 - might arise in this try block and we
834:47 - don't have that at the moment you can
834:49 - see we're only catching firebase off
834:51 - exceptions so we have to have a generic
834:55 - catch block at the end of our try
834:57 - statement in the login view
835:00 - and another catch block which is a
835:02 - generic catch block at the end of the
835:04 - try statement on our register view three
835:09 - three uh
835:10 - auth exceptions plus and a generic
835:12 - exception handling here four total in
835:15 - register view
835:16 - plus two here six and a generic one here
835:20 - seven so we are going to handle seven
835:23 - types of errors that might occur during
835:25 - login and registration and for any one
835:28 - of these we are going to display an
835:30 - alert to the user so we're just gonna
835:32 - alert the user that something has
835:34 - happened and it needs to be taken care
835:37 - of okay
835:39 - so let's go then into um
835:42 - have a look at
835:44 - the end of your main dart file and you
835:46 - can see we already have a future bowl
835:49 - show log out dial again this is a log
835:51 - out this is a dialog
835:53 - that you can see is an alert dialog that
835:56 - at the moment just returns a boolean
835:58 - what we need is a
836:00 - future void as the caption shows here a
836:03 - function that says show error dialog and
836:05 - it has a context and a string to display
836:08 - to the user so we're just going to use
836:10 - it generically generically from anywhere
836:12 - in the application okay
836:15 - so for now i need you to go to your
836:17 - login view
836:19 - and at the bottom of the login view
836:21 - we're going to create the function
836:23 - signature for this so let's just say
836:25 - future void
836:26 - and as i've called it here show error
836:28 - dialog and we're going to get a build
836:30 - context called context and then we're
836:32 - also going to say string text okay
836:34 - just like this
836:36 - and remember you can always put a comma
836:38 - here to complete the um
836:42 - to make sure that the dart formatter
836:44 - actually formats your functions
836:46 - correctly all right
836:49 - so remember
836:50 - show error dialogue uh what it needs to
836:53 - do all it has to do is just to create a
836:55 - dialogue and then display it so to do
836:58 - you i mean you may think that you always
837:00 - start with the creation of the dialogue
837:02 - but in fact you need to first think
837:04 - about returning the result of the
837:05 - dialogue which is in cases of void so
837:07 - you do that using um
837:10 - show dialogue so say
837:12 - return show dialog
837:15 - and the context is available for you as
837:18 - a parameter to your function and also
837:21 - let me should i make this a bit bigger
837:23 - or is the size okay i think this size is
837:25 - actually quite enough
837:27 - so
837:28 - now that we have that let's then go and
837:31 - say that we want to have a builder
837:34 - and your builder i'm going to get help
837:35 - from visual studio code to complete this
837:37 - you see it takes the um it brings the
837:41 - build context in as a parameter and it
837:43 - expects you
837:44 - to return let's get the documentation on
837:47 - it and expect you to return a widget and
837:49 - the widget that we're gonna have to
837:51 - display in our short in our show dialog
837:54 - is an alert dialog so let's go create
837:56 - that alert dialog
837:59 - all right so
838:01 - um
838:02 - for the title of our alert dialog since
838:04 - this is as you can see from the
838:07 - function signature here that says show
838:09 - air dialog this is this dialog is
838:12 - explicitly going to be used and
838:14 - exclusively gonna be used for displaying
838:17 - errors to the user so something has
838:19 - happened
838:20 - and we need to handle that error okay so
838:23 - we are going to in this case write a
838:25 - specific very specific title for our
838:27 - alert dialogue that the user understands
838:29 - something bad has happened and it needs
838:31 - their attention
838:33 - so for the title we're just going to say
838:35 - a constant text remember the title
838:38 - property if you just move your mouse
838:40 - over you can see it's a widget it's not
838:42 - a string you actually can configure the
838:44 - title to be whatever you want so this is
838:45 - the beauty of
838:47 - flutter almost everything is a widget so
838:49 - you'd expect oh the title should just be
838:51 - a string but no you can configure the
838:53 - title to be exactly what you want so it
838:56 - can just be an icon if you wanted to so
838:59 - so let's in here in the text say an
839:01 - error
839:03 - occurred
839:06 - and then we're going to go for the
839:08 - content
839:10 - of this
839:11 - dialogue remember the content comes in
839:13 - here as the text as a string so let's
839:16 - wrap that inside a text
839:19 - widget and we just say we display the
839:21 - text in there okay
839:24 - and for the actions
839:26 - we're gonna go here
839:29 - and let's for the actions then say we're
839:31 - gonna create a text button remember the
839:34 - text button has two parameters
839:37 - one is its um
839:39 - file the other one is unpressed the text
839:41 - button always has to have both these
839:43 - parameters set all right
839:46 - so
839:47 - what do we want to do on the unpressed
839:50 - we're going to just create the um
839:52 - function signature for it and for its
839:55 - child we're just going to say text
839:58 - and let's just say okay
840:01 - okay
840:03 - um so
840:05 - now we have that set up
840:06 - and uh let's just do some formatting in
840:09 - there so let's think about what we need
840:12 - to do on the on press just remember this
840:14 - dialog is just going to be displayed to
840:16 - the user the user is just going to get
840:18 - the information such as we're going to
840:19 - display an alert saying that oh
840:21 - um your password is too weak or uh hey
840:24 - this user already exists or this email
840:26 - already exists or incorrect password so
840:28 - it's just text and then ok button so
840:31 - pressing the ok button the only thing is
840:33 - going to do is just going to dismiss the
840:34 - alert dialogue so only thing you need to
840:36 - do in here is just to say navigator of
840:39 - your context and then you'll just pop
840:42 - this ensures that your dialogue then
840:45 - gets dismissed now
840:47 - i've done some videos about this before
840:49 - on linkedin and twitter i've done live
840:50 - videos about this where we talked about
840:52 - a better way of displaying error
840:54 - dialogues because
840:56 - this way of displaying error dialects is
840:58 - a little bit limited
841:00 - in that then the
841:02 - pressing of the button dismisses the
841:04 - dialog however sometimes you may need to
841:08 - have persistent dialogue displayed on
841:10 - the screen even when you push new
841:11 - screens on top of other screens so
841:14 - it's a little bit strange that a
841:16 - dialogue is doing navigation in that it
841:18 - tells navigator to pop
841:20 - a better way of doing this is using
841:22 - overlays but overlays are a little bit
841:24 - complicated for this part of the course
841:26 - so we're not going to talk about
841:28 - overlays right now let's just say now we
841:31 - have a generic dialogue that can display
841:33 - a text with a title of an err occurred
841:37 - okay
841:40 - all right so that is in place now and
841:43 - now let's go to the next item that we
841:46 - need to handle here
841:48 - and that is to handle user not found
841:52 - so if we go to
841:54 - our um
841:56 - sorry i just need to have a look at my
841:57 - notes to ensure that i'm telling you
841:59 - everything that i i was supposed to tell
842:01 - you
842:03 - all right so in here on your login view
842:06 - in the case that the error is used or
842:08 - not found we are going to display an
842:12 - alert to the user using our new function
842:15 - okay so in if e code user not found
842:19 - instead of devtools log we're going to
842:21 - say
842:22 - show error dialog the context is already
842:25 - available for us because you see it is
842:28 - passed inside
842:29 - your build function already so you don't
842:31 - have to grab it from anywhere else it's
842:33 - available right there and for a text
842:35 - we're just gonna say user not found okay
842:40 - and close the string you can see now if
842:42 - i format this um code these two
842:45 - parameters are displayed on the same
842:47 - line as i mentioned in the previous
842:49 - chapter all you have to do for the dart
842:51 - formatter to be able to format this code
842:53 - correctly is put a comma at the end of
842:54 - the last parameter and just press
842:56 - command s and it will format it again
842:58 - for you so each parameter goes into its
843:00 - own separate line
843:02 - okay um in case of the so now that we've
843:06 - handled user not found okay so we could
843:09 - literally test that let me do a hot
843:10 - restart just to ensure every piece of
843:12 - code is injected into the binary that is
843:15 - running in the application
843:16 - let's go and place an email that doesn't
843:19 - exist so that we get the user not found
843:22 - and let's just enter some password and
843:24 - then i'm going to press the login button
843:26 - and you can see now we get our error
843:28 - displayed on the screen that says an
843:30 - error occurred user not found and you
843:33 - can press the ok button to get rid of
843:36 - the
843:37 - um the dialog and getting rid of the
843:39 - dialog is happening here you see
843:41 - pressing that button says navigator of
843:43 - context pop so
843:45 - that's what is happening there
843:49 - all right great stuff what we need to do
843:51 - now is to handle wrong password as well
843:53 - and this one is going to be a breeze
843:55 - because we've already handled user not
843:57 - found so what you can do is copy and
844:00 - paste this code that was placed here in
844:02 - the user not found statement and bring
844:04 - it here and replace this devtools log
844:07 - wrong password with that and instead of
844:09 - saying user not found what we're going
844:11 - to say is going to say wrong credentials
844:14 - okay
844:17 - so let me now go and
844:19 - try to log in you can also do that at
844:21 - home or wherever you're watching this
844:23 - course from you can enter the email
844:25 - address of a user who's already
844:27 - registered with your application so like
844:28 - if you're testing you may enter the
844:30 - email address of the person that or your
844:32 - own email address if that's what you're
844:34 - testing with but enter the wrong
844:35 - credentials so there we go
844:38 - and then press login and now you can see
844:40 - that message being printed to the screen
844:41 - wrong credentials okay
844:44 - all right perfect now um
844:48 - what we also need to do
844:50 - um
844:51 - [Music]
844:53 - is handle other firebase authentication
844:56 - exceptions
844:58 - and you can see here in this case we're
845:00 - saying if there is a firebase auth
845:02 - exception and if the code is used or not
845:04 - found or if the code is wrong password
845:07 - however there might also be an exception
845:10 - that you haven't accounted for and
845:12 - although these are the most known error
845:15 - codes that you can get there's always a
845:17 - possibility that there will be another
845:19 - error code in the future maybe not now
845:22 - that you will receive from firebase
845:23 - which you haven't accounted for in that
845:25 - case
845:26 - the code then goes in here and says oh
845:27 - the code is not user not found
845:30 - is not wrong password and it will just
845:31 - fall through meaning that this entire
845:34 - code will this entire catch block will
845:36 - not be able to catch the actual
845:38 - exception and your code will crash
845:42 - so it is very or you will actually get
845:44 - an error screen
845:45 - so
845:47 - it's very important that you
845:48 - think about your exception handling
845:51 - early on so you don't send out a code to
845:54 - production that doesn't have proper
845:55 - error handling okay
845:57 - so um
845:58 - that's what we're going to do
846:01 - so two things we need to do we have to
846:02 - handle other exceptions that might occur
846:05 - and also other firebase off exceptions
846:07 - so let's do those things
846:11 - so um
846:14 - actually we need to first do this so
846:15 - let's first take care of other all
846:18 - firebase auth exception so place an else
846:21 - statement in here and then in that case
846:23 - just display a dialog
846:25 - like i'm doing here and for the error
846:28 - we're just going to say error and then
846:30 - in here
846:31 - e dot code
846:33 - now you may not be familiar with this
846:35 - syntax from before because maybe i
846:37 - haven't explained this before but this
846:38 - is like string formatting and guardian
846:40 - is very elegant it's also available i
846:42 - mean kind of the same thing is available
846:44 - in almost every language that i work
846:46 - with swift it's available in python when
846:47 - you're working with django it's
846:49 - available in ros it's available in
846:50 - javascript javascript so
846:53 - you're basically escaping a string and
846:55 - injecting some actual variables inside
846:58 - that all right
847:00 - so in python for instance you would do a
847:03 - f which means you're formatting and
847:05 - you'd be like hello
847:06 - and you would i think you would say
847:09 - dollar
847:11 - value
847:12 - and then you would put your value at the
847:15 - end something with a percentage sign
847:16 - something like that and in javascript
847:18 - you will do
847:20 - back quotes like this so and in swift
847:22 - you will do something like this uh e
847:24 - code like that inside a string so this
847:27 - is basically a way for dark to inject an
847:30 - actual code
847:32 - inside your string
847:34 - and you can see
847:35 - in the case of firebase auth exception
847:38 - the e becomes then a firebase auth
847:40 - exception and every
847:43 - exception of this type has a code of
847:45 - type string
847:47 - and this is us basically injecting that
847:49 - string inside our own string so every
847:52 - code then will be prefixed with the
847:54 - value of error and then a double double
847:57 - column here and then space and the code
847:59 - string itself
848:01 - now that we've done that we also need to
848:03 - handle the case where the exception is
848:05 - not a firebase auth exception and that's
848:07 - the next point that we need to talk
848:09 - about
848:11 - so in here uh at the end of this
848:15 - on firebase auth exception block and if
848:17 - you're kind of like unsure where things
848:18 - start and then you can see that as you
848:20 - go to this
848:22 - end of this curly bracket here you can
848:24 - see that visual studio code has
848:25 - highlighted this curly bracket right
848:27 - there saying that this is the beginning
848:29 - of the code and even if that's not
848:31 - enough for you you can always go to
848:32 - visual studio codes and
848:35 - gutter on the left hand side and like
848:37 - collapse these pieces of code
848:40 - so you can see oh
848:42 - here here you can easily see them you
848:44 - can also i think
848:46 - can we not collapse this entire if
848:48 - no we can't collapse that entire thing
848:50 - but anyway so at the end of this we need
848:53 - to do now is
848:54 - just to say catch e
848:58 - this is a generic catch block meaning
849:01 - that if
849:02 - the exception that occurs in the try
849:04 - statement is not a firebase auth
849:06 - exception then go into this catch block
849:09 - and in this cache block now e you can
849:12 - see is an object so it's not like a
849:15 - normal exception anymore it's just any
849:17 - object because if you remember when we
849:19 - talked about exceptions in dart you can
849:21 - throw pretty much anything in dart as an
849:24 - exception you can even throw an
849:25 - enumeration value so
849:27 - that's why it's telling us saying that
849:28 - any except any other exception other
849:30 - than this is just an object it's not
849:33 - known to me i don't know what it is so
849:35 - it's up to you now to display that error
849:38 - now if you remember from before from the
849:39 - previous chapter objects all have a
849:42 - function called tostring
849:44 - so that's perfect then we can go here
849:47 - let me expand these so that they don't
849:49 - become a little bit cryptic like they
849:50 - did
849:51 - and paste that code to display a show
849:55 - error dialogue again in here also we're
849:57 - just going to say
850:00 - e to string
850:02 - just like that right
850:06 - so
850:07 - we we're handling wrong credentials with
850:09 - handling any other error that might
850:10 - arise and also sorry any other firebase
850:13 - exception
850:15 - of exception and any other exception in
850:18 - general that might arise during logging
850:21 - the user in
850:25 - all right
850:26 - that was a lot of information i
850:28 - understand and i move past this quite
850:30 - fast since when we talk about one thing
850:32 - like we've already talked about
850:33 - displaying dialogues i don't think it's
850:35 - worth your time and my time to spend too
850:37 - much time explaining all of these over
850:39 - and over again and so
850:41 - and that's why i move past these
850:43 - sometimes quite fast
850:45 - what we need to do now is to do some
850:47 - cleanup because you see now we have our
850:49 - login view m here
850:51 - sorry login view dart file here and the
850:54 - m in visual studio code means modified
850:56 - since we last committed this into git
850:59 - and we have that file however we also
851:01 - have the show error dialog that is
851:03 - sitting here that is also going to be
851:06 - useful for the register view however
851:08 - it's right now just sitting in the login
851:10 - view so if register view wants to then
851:13 - use this same code you will have to
851:15 - import the login view and then use this
851:17 - feature it's a little bit wrong this is
851:20 - supposed to be like a generic show error
851:22 - dialogue and it should be available for
851:24 - pretty much any piece of code that needs
851:25 - it so what we were going to do as a
851:28 - caption says here we're going to create
851:29 - a new file
851:30 - um and folder as i can see under lib
851:34 - so open your project explorer under lib
851:37 - go and create and you can see here we
851:40 - need to create a file called show error
851:42 - dialog dart and it's it needs to be
851:44 - inside
851:46 - a folder called utility so i'm going to
851:48 - right click on lib and say new file and
851:50 - i'm just going to type utilities
851:54 - slash
851:55 - show error dialogue dart
851:59 - all right
852:00 - and go to your login view and grab that
852:03 - code
852:05 - uh for show error dialogue uh poof
852:09 - i'm gonna grab the code
852:11 - and cut it
852:13 - however you cut in your operating system
852:15 - in mac is command x in visual studio
852:18 - code and bring it into your show error
852:20 - dialog file all right we're gonna get a
852:22 - lot of uh errors but as i've explained
852:24 - in the previous chapters we can also
852:26 - import these things material dart to get
852:28 - rid of almost actually all of those
852:30 - errors so that was fantastic
852:32 - now that we've done that you can see
852:33 - visual studio is already showing this
852:35 - tab the login view as having an error
852:37 - and that is because login view is using
852:40 - show error dialog but now that we've
852:42 - removed show error dialog from there it
852:44 - doesn't know where this show error
852:46 - dialog now resides
852:49 - so what we need to do is to use our new
852:51 - file in the login view dart file
852:55 - and you could do that you could ask
852:56 - visual studio code to help you with this
852:58 - and you could just say import library
853:01 - and
853:02 - that's it it imported it for us
853:06 - and
853:07 - as you can see
853:08 - now that we're we don't have any more
853:10 - logs inside our login view
853:14 - visual studio code is helping and saying
853:15 - you're no more using you're no longer
853:18 - using the dev tools or the dart
853:20 - developer
853:21 - package import
853:23 - what you can do is just to safely remove
853:25 - that and clean up your imports as well
853:27 - while we're going okay
853:29 - so um
853:31 - that is working fine and we can just
853:33 - confirm that so i'm just going to enter
853:34 - an existing email here
853:37 - with the wrong credentials and just to
853:38 - ensure that we're getting the dialogue
853:40 - wrong credentials okay
853:42 - perfect
853:43 - now that we've done that i'm going to
853:45 - change the screen layout a little bit
853:47 - and what we're going to do is that we
853:49 - need to wrap up this chapter we've
853:51 - cleaned up our error handling and we
853:53 - need to just make a commit remember
853:55 - pretty much in every chapter from a few
853:58 - chapters uh back onwards we're to commit
854:01 - our code at the end of the chapter just
854:03 - to make sure that you have traceability
854:04 - for for your code and this is what you
854:06 - will need to do even if you're working
854:08 - for instance actually especially if
854:10 - you're working inside a
854:12 - a team with other people doing flutter
854:14 - code or any other code you need to
854:16 - ensure that your code which is ready or
854:18 - even if it's not ready it is committed
854:20 - so um
854:22 - even if your code isn't ready you can
854:23 - commit it into a specific branch but you
854:26 - should never leave your work day
854:29 - without committing your work remember
854:30 - that okay
854:32 - so let's now go and commit our work i'm
854:35 - gonna bring up the terminal a little bit
854:37 - here so and you can see that the
854:39 - previous chapter we did a step five
854:42 - and in here we're going to commit our
854:44 - work as step 6 and also we're going to
854:47 - tag our work okay
854:48 - so let's say git status you can see
854:51 - utilities is a new folder i'm just going
854:53 - to say git add all i'm going to increase
854:55 - the size of the screen as well so you
854:56 - see it better
854:57 - make your studio code a little bit
854:59 - larger as well
855:00 - clean
855:02 - and get add dash dash all and then git
855:05 - status now you can see these are staged
855:07 - for committing and i'm going to commit
855:09 - them as step 6 i believe
855:13 - after doing that let's tag it as well as
855:15 - step six
855:16 - um and get push our changes and we're
855:20 - also gonna push tags
855:23 - all right that is absolutely perfect
855:26 - so that was that to be honest with you
855:29 - for this chapter so this was a quick
855:30 - chapter as well and that's completely
855:32 - okay actually quite refreshing to have
855:34 - these short chapters for me as well
855:37 - um
855:38 - so now that we've done error handling in
855:41 - our login view
855:42 - we also need to clean up our register
855:44 - view you can see our registry has kind
855:46 - of the same problem
855:48 - as login view had at the beginning of
855:50 - this chapter in that we have a lot of
855:52 - error like dev tools log stuff in here
855:55 - which aren't so useful so for the next
855:58 - chapter um
856:00 - what we need to do is to ensure that
856:01 - we're logged out of the application and
856:03 - that we can go to the register view as
856:07 - we can do here so that's where you need
856:10 - to be for the next chapter and before we
856:13 - can continue with that
856:15 - with the course to the next chapter so i
856:17 - hope you enjoyed this chapter and i'll
856:19 - see you in the next one
856:21 - hello everyone and welcome to chapter 22
856:24 - of this flutter course
856:25 - in the previous chapters we've been
856:27 - talking quite a lot about login and
856:28 - register and email verification and as
856:30 - you saw in the previous chapter and we
856:33 - have some problems still in our register
856:34 - view in that when we come to
856:37 - the
856:38 - error handling we're still doing logs
856:40 - basically instead of using our new
856:42 - function that was called show error
856:44 - dialog
856:45 - and also our register view basically
856:48 - isn't really able to send us to the
856:50 - correct place after a successful
856:52 - registration you see we have email
856:54 - verification set up in that every user
856:56 - who registers also needs to
856:59 - verify his or her email before entering
857:01 - the main ui of the application so if
857:04 - that is the default behavior in that a
857:07 - newly registered user needs to verify
857:09 - their email perhaps it would be best
857:11 - that we
857:12 - send the user right after registration
857:15 - to the email verification view and these
857:18 - are the things that basically we're
857:19 - going to solve in this chapter fixing
857:21 - our log statements in the register view
857:23 - and also sending the user to the email
857:25 - verification view
857:28 - sending the registered user to the email
857:29 - verification view right after
857:31 - registration okay
857:33 - so these are the goals of this chapter
857:35 - so you know and i'm gonna bring up my
857:37 - visual studio code to the screen so you
857:38 - can also see it i'm gonna bring up scr
857:40 - cpy to the right hand side so you see
857:43 - you see that too position these windows
857:45 - a little bit better
857:47 - alright so
857:48 - the first task that we we need to do
857:50 - here is to make sure that we're using
857:52 - show error dialog in our
857:55 - register view
857:57 - and if you haven't watched the previous
857:58 - chapter that's what we did in one of the
858:00 - previous chapters that we talked about
858:02 - this uh file here in utilities show
858:03 - error dialog that increase the size of
858:06 - the window so you see it better
858:07 - so this show error dialog is a generic
858:09 - dialogue that
858:11 - has a title that says an error occurred
858:13 - and also a text of your choosing
858:16 - so let's go to our registry view as the
858:18 - caption says here i'm going to minimize
858:20 - the terminal here and get rid of the
858:22 - explorer
858:23 - and let's go to this weak password and
858:26 - then start typing
858:28 - show error dialog and you can see it's
858:30 - gonna auto import it
858:32 - excuse me
858:33 - it's going to auto import it for us so
858:35 - let's say show air dialog with that
858:37 - context
858:38 - and i'm just going to in this in the
858:40 - case of a weak password
858:42 - um
858:43 - we need to just say weak password okay
858:48 - so that part is done and you can also
858:50 - put a comma at the end of the second
858:51 - parameter just to make sure that it is
858:54 - clean but remember also that show error
858:56 - dialogue is a
858:58 - is an asynchronous function so if you
859:00 - move your mouse over it you'll see that
859:02 - it says future void so by just calling
859:04 - show air dial like you're not showing
859:05 - the error dialogue you're basically just
859:07 - telling the short i like to return the
859:09 - future which in turn then uh can display
859:12 - the error dialogue if you await on it so
859:14 - don't forget a wait
859:16 - after doing that let's remove our dev
859:19 - devtools log from there from the weak
859:21 - password and if statement
859:25 - and
859:26 - now what we're going to do is to copy
859:29 - this code that we wrote here and go to
859:31 - email already in use and display another
859:34 - error dialog in here using the same
859:36 - exact code and i'm just going to say
859:39 - email is already in use okay
859:43 - so that's for email rna news and also
859:46 - for invalid email we're going to say
859:48 - just invalid
859:51 - let me have a look for invalid email if
859:53 - you should just say
859:54 - um this is an invalid email address
859:59 - right
860:01 - and i can see that we haven't really
860:05 - handled other exceptions that might
860:07 - occur because you remember in the login
860:11 - view
860:11 - we had a look at
860:13 - handling for instance other uh
860:17 - other exceptions that might occur like
860:19 - firebase off exceptions that we did in
860:21 - an else statement there and also we did
860:23 - a generic catch statement that catches
860:25 - any other exception that is not a
860:27 - firebase auth exception and i can see
860:29 - now we haven't done that in register
860:31 - view so let's go and take care of that
860:32 - so let's just say else
860:34 - so in this else statement we're catching
860:37 - any other firebase off exception that
860:39 - might occur okay so i'm just going to
860:41 - say here
860:42 - and i'm just going to say
860:44 - error
860:46 - and dollar e code okay so that's very
860:48 - similar to what we're doing in
860:50 - our login view
860:52 - so
860:53 - and i apologize i could just see that
860:55 - you couldn't see the code because it was
860:57 - hidden behind the caption but now you
860:59 - can see it so i'm putting an else
861:00 - statement here and then i'm saying
861:02 - basically a weight shorter dialogue and
861:05 - e code so
861:06 - that's for if you if you look at have a
861:09 - look at this um
861:11 - curly bracket right here which you can
861:13 - now see this purple one it it starts
861:16 - here because it's the beginning of where
861:18 - we start catching firebase off
861:20 - exceptions
861:21 - and
861:22 - what we also need to do is put another l
861:25 - another catch statement here which
861:27 - catches any other exception that is not
861:31 - a firebase auth exception okay
861:33 - so we've covered this in the previous
861:35 - chapter when we talked about exception
861:37 - handling in the login view so i don't
861:39 - think i need to explain that again um
861:43 - okay so what we're going to do in here
861:45 - we're also going to show the error
861:46 - dialog in this case as well but for the
861:48 - message we're just going to say e2
861:50 - string okay
861:52 - similar something similar we did in
861:54 - our login view actually exactly the same
861:56 - thing
861:59 - okay that was great so now we're using
862:00 - short error dialog instead of log in the
862:02 - register view and now
862:04 - basically i don't think we're using dev
862:06 - tools
862:07 - over using devtools login here i don't
862:10 - think we need to do that anymore so we
862:11 - can get rid of that
862:13 - and we can also then get rid of devtools
862:16 - um
862:17 - import over here okay
862:21 - it's gonna have a look at my notes a
862:23 - little bit just to ensure that i'm
862:24 - telling you all the information that you
862:25 - need to know
862:26 - that's great okay
862:28 - um now that we've done all of this we
862:31 - need to also
862:32 - make sure
862:33 - you can see as the cache that says after
862:35 - every registration we need to confirm
862:36 - the user's email and that is like the um
862:40 - the pattern of every
862:42 - newly registered user in application
862:44 - that
862:46 - a newly registered user cannot have
862:49 - already confirmed their email because
862:51 - it's just not possible the two don't go
862:53 - together a newly user a newly registered
862:55 - user hasn't had their email address
862:57 - registered in our system therefore has
862:59 - not received a verification email during
863:02 - this session so
863:04 - this is a pattern that we need to
863:05 - basically help our users with so after
863:08 - every successful registration we're then
863:09 - going to automatically send the user to
863:12 - the verify email view and if you
863:15 - remember from the previous chapters we
863:16 - have this verify email view right here
863:18 - which is its own stateful
863:20 - widget and
863:22 - i mean it doesn't necessarily have to be
863:24 - a stateful widget i can see it's not
863:26 - doing anything stateful but we've just
863:28 - left it that state will stay full widget
863:30 - and it can just be like that for now
863:32 - um but we can also turn it into a
863:34 - stateless widget if you want to
863:37 - um okay
863:39 - so that's for the pattern of what our
863:42 - users are doing with the register view
863:44 - so if we go to register here
863:46 - uh oops no we are actually on the
863:48 - register sorry about that so
863:50 - um okay so what we need to do now is
863:52 - since we're gonna send the user from the
863:54 - register view we're gonna send to the
863:56 - verify email view we need a route for
863:58 - that and if you remember from the
864:00 - previous chapters we're defining our
864:01 - routes now inside this file lib
864:03 - constants routes
864:05 - dot dart
864:06 - and we've right now defined login route
864:08 - register route and nodes route
864:11 - then we need a new route for the verify
864:14 - email view so let's go ahead as the
864:15 - caption says in here and just type that
864:17 - and just say cons verify
864:19 - email
864:21 - out is
864:22 - slash verify email like that with a
864:25 - slash at the end as well
864:28 - now that we've defined the route
864:30 - we need to then go excuse me we need to
864:33 - go into our main dart file so i'm going
864:36 - to close this file close this file and
864:38 - then command p on mac in visual studio
864:40 - or or control p in linux and windows and
864:44 - go to main.dart
864:46 - okay
864:47 - in your main.dart you remember all the
864:49 - routes were registered inside the routes
864:52 - parameter of your material application
864:54 - so let's go ahead and register the um
864:58 - email verify email wrap here
865:01 - and we say context and we just say const
865:03 - verify email view
865:05 - and so that's also then registered
865:08 - inside the main function okay
865:11 - remember anything that you're doing
865:12 - inside the main function is not going to
865:14 - be reloading when you do hot uh
865:17 - hot reload so you need to do a hot
865:20 - restart here in order for for those to
865:23 - for for those changes in the main
865:24 - function to take effect so i'm just
865:26 - going to do a hot restart here
865:29 - okay
865:30 - so
865:31 - let's now that we've registered that
865:33 - let's go to our register and now that
865:36 - we've registered there are so many
865:37 - registered words i'm throwing out there
865:38 - so i just want to clarify now that we've
865:40 - registered to verify email routes in our
865:42 - routes in main dart we need to go to the
865:45 - register view and use this verify email
865:48 - route in there after a successful
865:51 - registration okay
865:53 - so um
865:54 - let's then go to our
865:57 - i'm going to close this and i'm going to
865:58 - go to
866:00 - register view
866:02 - right here
866:03 - okay
866:05 - here i can see that we're
866:07 - getting the user credentials and then
866:09 - assigning it to this user credential we
866:11 - don't have to do that anymore so let's
866:12 - just remove that
866:14 - we are not going to actually use the
866:15 - returning user credentials upon a
866:17 - successful create user with email and
866:19 - password we're going to go to the next
866:21 - line automatically because we have a try
866:24 - and catch statement here
866:28 - so
866:28 - now what we need to do is
866:30 - uh we're gonna show the verify email
866:33 - route okay
866:35 - uh
866:36 - so let's go uh
866:38 - to our
866:40 - uh verify email around in here and what
866:42 - we're going to say is to say navigator
866:45 - and
866:46 - dot push
866:48 - navigator of context
866:50 - and then we're going to say push named
866:52 - and you see in this case we're actually
866:54 - going to say push name instead of using
866:56 - the other functionality that says push
866:58 - name and
867:00 - remove until
867:01 - and the reason behind this is that
867:03 - um
867:06 - when when a user is inside the
867:08 - registration page here
867:11 - and when we want to go to the
867:14 - let's say that you enter some email in
867:16 - here and then you enter some password
867:18 - and you click the register button or you
867:20 - tap the register button
867:21 - and we send you to the verify email page
867:25 - where we say oh
867:27 - um
867:28 - here you can verify your email et cetera
867:30 - now in there if you if you realize that
867:32 - oh i register with the wrong email you
867:35 - need to be able to go back to the
867:37 - register page so in order to avoid
867:39 - having all these buttons that go send
867:41 - one user from one page to the other it
867:43 - would make a lot more sense if he from
867:45 - the register view could just push the
867:47 - new uh email verification route so we
867:50 - don't replace the entire routes like the
867:53 - register page with the new route so
867:56 - basically the desired effect here is
867:57 - that our register page is gonna stay
867:59 - right here and then we're gonna push the
868:00 - verify email route on top of it if the
868:03 - user in the verify email route realizes
868:05 - that they've done something wrong with
868:06 - the email address then they can just
868:07 - press the back button on the top bar and
868:11 - go back to the register page so that
868:13 - it's just a natural
868:15 - way of navigating between screens so
868:17 - that's why we're using push named in
868:19 - this case okay
868:21 - so i'm gonna say push names and push
868:23 - name and and then in the name we're just
868:26 - gonna say verify
868:28 - email route oops and verify email route
868:31 - like this
868:33 - i'm gonna do a command s right there and
868:36 - um
868:38 - then let's make sure that we can put all
868:40 - of this in action all right so i'm gonna
868:43 - hot restart just to make sure you
868:45 - remember we did a
868:47 - change in our main function so if you
868:48 - forgot to do hot restart please do that
868:50 - now um so that your changes can actually
868:52 - take effect from the login view which is
868:55 - the first view that the user sees we're
868:56 - gonna go to the register page
868:59 - and inside this register page i'm going
869:01 - to register with a new user so since
869:05 - i've already registered my user and i
869:08 - can actually go to firebase console so
869:11 - let's go to console firebase
869:14 - the user which i usually use is already
869:16 - registered with this application so my
869:18 - notes flutter project okay
869:20 - let's go to authentication and i can see
869:23 - pixelityab gmail.com is already
869:25 - registered so i'm going to register with
869:27 - a new user in here i'm going to say
869:29 - van.mp
869:31 - and the password is foobarbaz i'm just
869:33 - going to choose here and please don't
869:35 - use this password in production for any
869:37 - of your accounts anywhere at all this is
869:39 - just a bad idea i'm using fubar bass for
869:42 - consensus consistency and and for the
869:44 - sake of simplicity in this project so
869:47 - because for me it's a lot easier as i'm
869:49 - typing and writing all the passwords
869:51 - over and over again just to use
869:52 - fullbarbass but this is not a good
869:54 - password so i think just to make this
869:57 - clear
869:58 - um now i'm going to register this user
870:00 - and now you can see that
870:02 - after a successful registration now
870:04 - we're ending up in this verify email
870:06 - screen and this is really good
870:09 - and but
870:11 - there is a way we can actually make this
870:13 - better and let's go to firebase here and
870:15 - i can see now that user is already
870:17 - registered here you see and it has a
870:19 - user id
870:20 - and here's the last sign-in date okay
870:23 - so
870:24 - how can we make this better you see
870:27 - if this is the natural flow of going
870:30 - like when the user is in the register
870:32 - page or the register view and they
870:35 - always end up in the verify email page
870:38 - the way that we can make this better
870:41 - is um
870:42 - that upon successful registration right
870:45 - before we push the
870:47 - verify email
870:50 - view on the screen
870:51 - is that we actually send a verification
870:54 - email to that user because otherwise
870:56 - what you're creating you're creating a
870:58 - logic for the user that they have to
870:59 - take an extra step in order to verify
871:02 - their account so they come here and now
871:04 - they have to press another button but it
871:05 - would be really good if you actually did
871:07 - that button press kind of for them
871:09 - before we went to that screen so
871:11 - we're not actually going to physically
871:13 - like tap that button for them but we're
871:15 - going to execute the same code that that
871:16 - button executes for the user okay
871:21 - so that's what we're gonna do now so um
871:24 - as the caption says in here in your
871:26 - register view right before you navigate
871:28 - to the verify email route ensure that
871:31 - you get the current user basically so
871:34 - you say
871:35 - final user is firebase off
871:39 - instance i believe and current user okay
871:42 - get your user
871:44 - and then in here
871:46 - you'll say user um and
871:49 - there is a function called send email
871:51 - verification and remember your user is
871:53 - an optional user and that's why you're
871:55 - seeing this elvis
871:57 - operator here which is kind of like a
871:59 - moustache or something i don't know what
872:01 - you want to call it some some people
872:03 - call it elvis operator if you're coming
872:05 - from kotlin or in swift you would say
872:08 - like an optional invocation depending on
872:10 - the language that you're coming from but
872:11 - if you're not if you don't i have like a
872:13 - software development background then you
872:15 - may just call that a question mark
872:17 - um remember now
872:19 - so user is optional and this function
872:21 - returns a fusion voice so you can't just
872:23 - call it you need to wait on it and
872:26 - so now we're doing that so we're now
872:28 - awaiting on that all right
872:31 - and also since now we've changed our
872:34 - logic in that when you press the
872:36 - register button upon successful
872:37 - registration we're sending you an email
872:39 - verification
872:40 - is not a good idea to end up on this
872:42 - screen that just says please verify your
872:44 - email address because let's let's just
872:46 - face it we have already sent an email
872:48 - verification so we don't want the user
872:50 - to click this button actually we want
872:53 - the user to click this button or tap
872:55 - this button
872:56 - if they haven't received the email in a
872:59 - while all right so we don't want like
873:01 - double emails for users so it's just not
873:03 - a good idea
873:05 - so uh sorry i'll just have a look at my
873:08 - notes a little bit here
873:11 - okay so what we need to do now is as the
873:14 - caption now says here we need to go to
873:16 - our
873:17 - verify email view and add a text on top
873:20 - to say we have already sent a
873:21 - verification email okay and that's just
873:24 - common sense okay
873:26 - so let's go to our
873:28 - verify email route which is basically
873:31 - verify email view in here
873:34 - and you can see that we have a column in
873:36 - here and the first text at the moment
873:38 - says please verify your email address so
873:40 - let's create another text in here i'm
873:42 - going to say cons text
873:44 - and i'm going to say
873:46 - weave
873:48 - you see because i want to write the word
873:50 - weave as in we have there is a single
873:53 - code in here so i cannot have my own
873:55 - string having single codes because then
873:58 - dart doesn't understand where
874:00 - this what this string is because it
874:02 - thinks here's a string that starts here
874:04 - and it ends here but what is this one
874:06 - so in in order to have single quotes
874:08 - inside your dark strings then you would
874:10 - have to
874:11 - encapsulate or
874:13 - basically put your string inside double
874:16 - quotes so you avoid that confusion
874:18 - so we can say we've
874:20 - sent you an email verification
874:24 - please
874:26 - please open
874:28 - it in order
874:30 - to verify your yeah so please open it to
874:33 - verify your
874:34 - uh
874:35 - accounts
874:37 - something like this okay
874:39 - and also this text then we need to
874:41 - change that as well because you see we
874:42 - don't want this text to be kind of like
874:44 - a call to action saying that hello
874:46 - like here we're saying we sent you an
874:48 - email verification please open the
874:49 - verifier again and then right after that
874:51 - we're saying hey click this button so
874:53 - that's not a good idea let's just change
874:54 - this text and say
874:56 - if you haven't
874:58 - and let's make this double quotes as
874:59 - well just the same story as before
875:03 - if you haven't
875:04 - received a verification
875:06 - email
875:08 - yet
875:09 - press
875:10 - the button below something like this
875:14 - okay so i'm just gonna press command s
875:16 - and now you can see those texts being
875:18 - displayed on the screen they're not very
875:20 - pretty to be honest with you at the
875:21 - moment but that's okay too so
875:24 - um that's not a problem let it be like
875:26 - that
875:28 - all right so we're displaying that text
875:31 - uh to the user and what we need to do
875:33 - now uh
875:35 - is to test this whole uh
875:38 - flow basically again just to make sure
875:41 - that yeah it's working as expected so
875:43 - in order to do that go to your firebase
875:45 - console again
875:46 - and i'm gonna bring up the console in
875:48 - here hopefully you can see it too and
875:50 - i'm gonna go to that project then
875:52 - authentication and this user i'm gonna
875:54 - delete this user okay delete
875:56 - boof
875:57 - all right that user is gone i'm gonna
875:59 - close the screen now
876:02 - and and what we're gonna do then is just
876:04 - to hot restart the application in order
876:06 - to clean all the states
876:10 - um to restart
876:14 - is it not taking effect
876:16 - all right i'm gonna then uh verify email
876:21 - i can see that there is no back button
876:23 - and it kind of feels like
876:25 - uh we're ending up in in that screen
876:27 - because in our main dart file
876:30 - and let's go in main dart
876:33 - i believe that we're actually sending
876:34 - the user to verify email view in this
876:37 - case user firebase instance card okay
876:41 - so this is a lot a little bit a bit of a
876:43 - problem because now we're kind of like
876:44 - stuck in this uh
876:47 - in this
876:50 - view because firebase as a caption right
876:53 - here says it says firebase doesn't
876:54 - understand the remote changes
876:56 - we removed that user completely but
876:59 - firebase still believes that that user
877:01 - exists and that is because you see
877:02 - firebase can't like the client that is
877:05 - inside the code that is inside the
877:07 - client application which you are
877:08 - developing can't constantly talk with
877:11 - firebase and say give me the latest
877:13 - state give me the latest state
877:14 - this user that is right now on this on
877:18 - this phone
877:19 - is a local user that once had a
877:22 - connection with the backend but it
877:24 - doesn't anymore but firebase doesn't
877:25 - like delete this user locally so
877:29 - so what we need to do
877:31 - the best way to handle this case is to
877:33 - have kind of like a restart uh
877:36 - button in our verify email so if for
877:40 - some reason the user like in this case
877:43 - understands that hey um i'm stuck
877:46 - i need to get out of here from verify
877:48 - email i kind of want to go back to where
877:50 - i was so what we need to do is to
877:54 - upon the user pressing a restart button
877:56 - here we want to
877:58 - sign that user out so firebase
878:00 - understands well this user isn't signed
878:02 - in anymore so that we don't end up in
878:05 - this case that email is verified etc etc
878:08 - and we also are going to send the user
878:11 - to the register view okay and as you can
878:14 - see
878:15 - we can't send the user back to the
878:18 - register view
878:19 - i mean that we can't expect the register
878:22 - view to exist on the view
878:25 - on the view stack in this case because
878:27 - if a user has just freshly started the
878:29 - application application so they will end
878:31 - up in this future builder the future
878:33 - builder would then check the user and
878:34 - says oh you should go to the verify
878:36 - email view and in this case there is no
878:38 - register view behind the
878:40 - um verify email view so in that case you
878:43 - will see that we won't push but we will
878:45 - actually do push name and remove until
878:48 - but we will get there soon okay
878:50 - first off let's go to your uh to your
878:52 - verify email view and right after this
878:54 - text button we're gonna add another text
878:56 - button
878:58 - up a little bit so you see it better
879:00 - and let's just say a text button
879:04 - unpressed is just going to be empty for
879:05 - now and then for his child we're going
879:07 - to add a const text that just says
879:10 - restart okay
879:13 - so that's that and then here what we
879:15 - then need to do is as i mentioned before
879:18 - is to uh and as the caption
879:22 - explains here we need to actually log
879:24 - the user out so let's say firebase auth
879:27 - instance
879:28 - and and then what we need to do is to
879:30 - say sign out
879:32 - okay remember cyano i also believe is a
879:36 - future of void so you need to await on
879:38 - it so oops
879:40 - um see i just jumped screens without
879:43 - actually really wanting to do that so
879:44 - let's wait on it and it's going to give
879:46 - you an error because now your unpressed
879:48 - function is not async so make it async
879:51 - right
879:53 - after doing that using if i do command s
879:55 - now we're gonna see the restart button
879:57 - here but
879:58 - doing that just does a sign out it
879:59 - doesn't actually send you to the
880:00 - register view and we're gonna take care
880:02 - of that soon so as a caption says
880:05 - navigator of context i push named remove
880:09 - until and in here we're going to send
880:11 - the user to remember from our routes
880:14 - view sorry a routes file there is a
880:16 - register route okay so let's go there
880:20 - let's go register
880:23 - out and in here we just leave the code
880:25 - as it is and i come at the end to clean
880:27 - it up a little bit and
880:31 - and that should be good to go
880:35 - okay now i'm gonna do a hot restart
880:37 - you'll see now we end up in here
880:40 - and because it's still the user is
880:42 - logged in because we haven't executed
880:43 - this code yet and i'm just gonna then
880:46 - press the restart button and you'll see
880:48 - we end up in the register view just to
880:50 - make sure that we're not going to go
880:52 - into this
880:53 - vicious cycle again that every time we
880:55 - do a hot restart we're going to end up
880:56 - in the verify email view
880:58 - and let's just do a hot restart now to
881:01 - see what the state of the application is
881:03 - going to be and as you can see upon hot
881:05 - restart we end up in the login view
881:08 - which means that the main dart file in
881:10 - the future builder it went to this code
881:13 - so the user is null at the moment and
881:16 - that's exactly what we wanted because we
881:18 - signed the current user out okay
881:22 - all right so we are then going to use
881:24 - the same credentials to um
881:27 - as before to register let's just go to
881:29 - the register view then and i'm going to
881:30 - say
881:32 - round.np np gmail.com and then fubarbas
881:36 - and i'm going to then register this user
881:39 - and you can see it says it sent you an
881:41 - email verification please open it to
881:42 - verify and i can see on my third screen
881:44 - here that i actually got the email
881:46 - um verification
881:50 - so
881:51 - as you can see in the caption it says
881:52 - get the confirmation email but don't
881:55 - confirm yet because we kind of need to
881:57 - have a look at a problem that we have in
881:59 - our application
882:00 - so um
882:04 - now let's see if we can log in so what
882:06 - i'm going to do is to
882:08 - go back on the screen from the verify
882:10 - email go back to the register view and
882:12 - instead of doing a registration again go
882:14 - to the login view now use your current
882:17 - uh
882:18 - like the new user that you just created
882:20 - but you haven't confirmed the email use
882:22 - the credentials of that user and say
882:26 - gmail.com and foobar as
882:28 - and then press the login button
882:31 - you'll see now we've ended up in the
882:33 - main ui of the application
882:36 - and that is problematic because
882:38 - any user just like i did can go to the
882:41 - register view then they will go to the
882:43 - confirmation view automatically they say
882:46 - okay i got a confirmation email and then
882:48 - they don't confirm the email they press
882:50 - the back button to go to the registry
882:52 - view again and from registry google they
882:54 - go to the login view and then they log
882:56 - in so
882:57 - because you see in our login view
882:59 - and here in this code
883:01 - right after signing with email and
883:03 - password we are not verifying that the
883:05 - user has actually verified their email
883:08 - address we're just saying sign in and
883:11 - firebase says all right sign in great
883:13 - the email and password match an entry in
883:15 - the authentication database i'm good to
883:17 - go and then we're just saying push to
883:19 - notes wrap so
883:21 - that is a problem um
883:23 - that we have that we need to fix in the
883:25 - next chapter okay
883:27 - but for now we've got a lot of code i
883:29 - can see all the files are changed so
883:31 - let's commit our code and tag it like
883:34 - what we're doing in other chapters as
883:36 - well
883:37 - gonna go to the terminal i'm going to
883:39 - change the screen layout a little bit so
883:41 - you see it better
883:43 - increase the size of the
883:44 - views so you see it even better
883:47 - and you can see the previous tag was
883:49 - step 6. now let's have a look at the
883:52 - status of our code and i can see there's
883:54 - lots of changes modified you can always
883:57 - issue the command g apa
884:00 - which i call gopa and that will show you
884:02 - all your changes but i'm just gonna say
884:04 - git commit sorry good at all
884:07 - i'm going to say git commit and we said
884:09 - that we're going to commit this as step
884:11 - 7 okay
884:12 - and push those changes to github
884:16 - and i'm going to also tag it as step 7
884:20 - so like that step seven and then i'm
884:22 - just gonna say git push tags
884:26 - all right fantastic now
884:28 - as the caption says here we need to get
884:29 - ready for the next chapter and as you
884:31 - can see it says user needs to verify
884:33 - email before going to the main ui
884:34 - because that is as i explained there is
884:37 - a problem that we have which we haven't
884:38 - addressed yet but it's quite easy to
884:40 - address as you'll see in the next
884:42 - chapter so
884:44 - uh i'll see you there
884:46 - hello everyone and welcome to chapter 23
884:48 - of this vlog course as you saw in the
884:49 - previous chapter we talked about
884:51 - cleaning up our registration flow so
884:54 - that when we tap on registration or the
884:57 - register button we actually send an
884:59 - email confirmation to the user and we
885:02 - saw that we go to the email confirmation
885:04 - view and before we even get there we
885:06 - then receive our email confirmation in
885:08 - our inbox so that all worked very well
885:11 - except for the fact that now a user who
885:13 - hasn't registered who hasn't verified
885:15 - their email account can still end up in
885:18 - the main ui of our application and
885:20 - that's what we're going to fix in this
885:21 - chapter so
885:24 - as the
885:26 - title shows here or as the caption shows
885:28 - here what we need to do is to ensure
885:30 - that
885:31 - we first before we continue with the
885:33 - chapter we need to make sure that we've
885:34 - logged out of the application so um
885:36 - now that you're in the main ui of the
885:38 - application let's just go in here and
885:40 - say log out and we're logging out to end
885:42 - up on the login screen
885:44 - i'm gonna i'm also gonna bring up visual
885:46 - studio code as we left it before
885:51 - so
885:52 - what we need to do now i'm going to
885:53 - close
885:54 - other tabs except for the login view
885:57 - excuse me
885:59 - and you can see in here
886:00 - right after we're signing with email and
886:02 - password right now we're sending the
886:04 - user to the notes route and we need to
886:07 - clean this up so
886:08 - what we need to do is just to get the
886:10 - current user from firebase
886:13 - and
886:14 - i'm gonna bring up
886:16 - the correct correct caption as well and
886:18 - i'm gonna change the screen layouts a
886:20 - little bit um
886:21 - so you see the code better
886:24 - so as you can see the caption says you
886:26 - need to add an if statement before you
886:28 - send the user to the main ui of the
886:30 - application
886:31 - and to make sure that the user is
886:33 - verified okay so
886:35 - in order to do that we also need to get
886:36 - the
886:37 - concurrent user so we can say final user
886:39 - is equal to firebase off instance
886:43 - firebase off instance
886:45 - and the current user okay so that's for
886:47 - the current user
886:50 - and we're going to say if the user
886:52 - optional you see we need to optionally
886:54 - access that email verified or false
886:57 - when we get a boolean value here either
887:00 - this returns a true or reuse false
887:02 - so in here we say user's email is
887:05 - verified
887:08 - otherwise user's email
887:13 - uh
887:14 - if i can spell it is not verified okay
887:18 - so now we have the two conditions in
887:20 - there
887:22 - so what we need to do now is to grab
887:24 - this code that we had from before you
887:26 - can see it sends the user to the main ui
887:28 - of the application and of course that
887:31 - needs to happen only if the user has
887:35 - basically
887:36 - verified their email address so grab
887:39 - that code and place it in user email is
887:43 - verified okay in here
887:44 - and in the case that the user email is
887:47 - not verified then we kind of need to do
887:49 - the same code
887:50 - but instead of going to the nodes route
887:53 - which is the main ui of the application
887:55 - we actually know we need to go to the
887:57 - verify email route if you remember from
887:59 - the previous chapters in a route start
888:01 - we've already defined verify email route
888:03 - okay
888:04 - so
888:06 - let's go back in our login view and then
888:09 - paste the same code except for going to
888:11 - notes route we're gonna go to and verify
888:15 - email routes okay
888:17 - so
888:18 - really all we have to do for this
888:20 - chapter so it's just cleaning up the
888:22 - logic one step at a time okay and that's
888:24 - okay some chapters are going to be long
888:26 - some chapters are going to be short it's
888:28 - actually quite refreshing even for me to
888:30 - have some shorter chapters so
888:32 - um now what we need to do is let's put
888:35 - this to test
888:38 - and as you can see what we're going to
888:39 - do is to remove that test user again
888:41 - from firebase console and test the
888:44 - entire flow again so i'm going to do a
888:45 - hot restart here
888:47 - and just to make sure that the state is
888:49 - completely restarted i'm gonna bring up
888:52 - a firebase console let's go to our
888:54 - application which for me is called
888:55 - mynotes flatware project
888:57 - i'm gonna go to authentication and
888:59 - remove that test user that i created
889:01 - here okay delete
889:03 - and do another hot restart just to make
889:04 - sure the cache is invalidated if there's
889:06 - any cache in there
889:08 - and
889:09 - what we need to do now is to just oops
889:13 - what we need to do now is to do kind of
889:16 - like the same registration again so i'm
889:17 - gonna go to the register page here and
889:20 - then i'm gonna go to your enter your
889:21 - email here
889:23 - and i'm going to
889:24 - write the same email address to register
889:26 - the user again through bar bath
889:29 - press the register button
889:31 - and we end up here then i'm going to do
889:32 - the same hacked as we did before uh
889:35 - press the back button and then go to the
889:37 - login screen i'm going to type the same
889:40 - credentials and say fubar baz if
889:42 - everything is worked according to our
889:44 - plan upon pressing the login button the
889:47 - code is going to end up in here saying
889:49 - that the user's email is not verified
889:52 - and it's going to remove the login route
889:54 - from
889:55 - from the stack and push the verify email
889:57 - route on the screen okay so both
890:00 - and that is exactly what we're getting
890:02 - here you can see we're going to the
890:03 - verify email view as we planned
890:08 - okay as i mentioned this chapter was a
890:09 - short one and that's actually really
890:11 - good so what we need to do now is to
890:14 - focus on what we're gonna do in the next
890:15 - chapter as you can see it says our
890:17 - authentication logic is all over the ui
890:19 - and we need to make a service for the
890:21 - authentication you see
890:23 - up until this point we've been working
890:24 - with firebase directly in the source
890:27 - code in that we've been like writing
890:29 - firebase auth code pretty much in our ui
890:32 - now you may think that well that's okay
890:35 - i mean
890:36 - if you're if you don't come from a
890:38 - software development background you may
890:39 - think that that is fine and it should as
890:41 - long as it works
890:43 - but
890:44 - the software development industry has
890:46 - shown us over and over again that the
890:48 - saying of oh if it if it's working if
890:51 - it's not broken don't fix it that that
890:53 - doesn't that doesn't really apply to all
890:55 - cases as we've seen uh in the case of
890:58 - for instance log 4j uh it was working
891:01 - but then there was a security flying and
891:03 - everybody had to go out to their code
891:04 - base and fix everything so we're
891:06 - entirely still of the weekends so the
891:08 - code works
891:10 - but there's a problem with it in that
891:12 - here you have your user interface so the
891:15 - code is quite high level it's like
891:17 - literally the user is here and then we
891:20 - have our user interface here and then we
891:22 - have like the code that we've written
891:25 - and like a little bit more low level
891:27 - like our if statements and then firebase
891:29 - is sitting all the way down here and
891:31 - we're like exposing this firebase layer
891:33 - all the way to our ui layers the ui is
891:35 - talking directly with a layer of the
891:38 - code that is so level that they
891:39 - shouldn't have direct connection with
891:41 - each other so
891:43 - if you're not from a software
891:44 - development background this may be a
891:45 - little bit alien to you but software
891:47 - developers really like to make sure
891:49 - things are
891:50 - com
891:51 - liking their own compartments
891:53 - so
891:54 - what we need to do is in order to get
891:56 - ready for the next chapter is just get a
891:58 - good cup of coffee or tea because the
892:00 - next chapter is actually going to be a
892:01 - long one and it's going to be a
892:02 - complicated one but i'm gonna do my best
892:05 - to explain all the concepts as good as i
892:07 - can but just know that the next chapter
892:09 - is gonna be a
892:11 - big one okay
892:12 - so uh grab your refreshments juice tea
892:16 - water coffee whatever you want and i'll
892:19 - see you in the next chapter
892:21 - hello and welcome to chapter 24 of this
892:24 - flutter course in the previous chapter
892:26 - we talked about ensuring that the user's
892:28 - email is verified before he or she can
892:30 - proceed with the
892:32 - with
892:33 - by before the user is able to go to the
892:36 - main ui of the application
892:38 - um and what we are going to do now is
892:41 - take a step back from developing our ui
892:43 - and logic of the application by creating
892:46 - an auth service
892:50 - so
892:51 - i'm going to provide you with a caption
892:53 - here and as you can see it says auth
892:54 - provider auth service meaning an author
892:56 - provide abstract class on an off service
892:59 - now
893:01 - if we have a look at the code that we've
893:02 - created so far let me bring up visual
893:04 - studio code so you can see it on the
893:06 - screen like i do here um i'm going to
893:08 - increase the size so you see better
893:11 - and i'm going to bring up the
893:12 - application as well
893:14 - so we can see it side by side
893:17 - i have three screens here so it's a lot
893:19 - it's a little bit difficult to juggle
893:22 - um
893:23 - excuse me
893:24 - so i'm going to change the screen layout
893:26 - so you see the code better
893:28 - if you look here
893:30 - we have our
893:31 - um
893:32 - three views login
893:35 - register and verify email view okay
893:37 - or we actually have four views the other
893:39 - one is the main ui of the application
893:42 - um which we have right now created in
893:44 - here notes view
893:47 - excuse me
893:48 - but if you have a look at the login view
893:50 - you can see one of the things that we're
893:51 - doing immediately as we go to the login
893:53 - view is
893:54 - um
893:55 - is not actually immediately by pressing
893:56 - the login button we're talking with
893:58 - firebase off signing in we are kind of
894:00 - doing the same thing talking with
894:02 - firebase by uh in the register view you
894:05 - can see firebase auth instance create
894:07 - user
894:08 - and we also have firebase in our verify
894:11 - email
894:11 - so you can see here we are actually
894:13 - importing firebase auth firebase so
894:17 - if you're not uh like if you don't have
894:19 - a software development background from
894:21 - from before you may think well this is
894:23 - this is fine very important firebase but
894:25 - you also need to know that firebase is
894:27 - kind of like a low-level abstraction
894:30 - layer that um
894:32 - that is talking to the firebase backend
894:34 - and providing you with a lot of
894:35 - high-level uh
894:38 - functionality but those high-level
894:39 - functionalities at the firebase level
894:42 - they're kind of high level but if you
894:44 - think about
894:45 - that firebase is
894:47 - a dependency that we're bringing into
894:49 - our application that's talking with
894:50 - firebase back-end in itself is
894:53 - low-level compared with our ui so if you
894:56 - think that
894:58 - the ui code is here then what we are
895:01 - doing is that we're like saying here is
895:03 - firebase and then the ui is talking
895:05 - directly with the firebase libraries and
895:07 - functionalities and
895:09 - in the in the eyes of a like a software
895:11 - developer has been doing this for a
895:13 - while this is not a good idea simply
895:14 - because we're missing a little bit of a
895:18 - layer in between the ui and firebase
895:20 - which abstracts away the firebase
895:22 - functionality from the ui of the
895:24 - application
895:25 - and as we talked about it before um it
895:28 - is possible that in the future you may
895:30 - want to allow for instance apple login
895:32 - or google login or sign in with facebook
895:35 - etc various options for signing in and
895:38 - if you look at um the console at
895:41 - firebase you'll see immediately that
895:44 - you have various ways of authenticating
895:46 - a user at the moment we've enabled sign
895:48 - in method for email and password but you
895:51 - also have the ability to add a new
895:53 - provider you can as you can see google
895:54 - facebook and these as you can see
895:56 - they're called providers a new provider
895:59 - and that is what we're going to do in
896:01 - this chapter of our flashlight course as
896:05 - well so
896:06 - we're going to take firebase and
896:09 - think of it as an authentication
896:11 - provider okay so we're going to create a
896:12 - class
896:14 - which i believe we're calling at the
896:16 - moment firebase auth provider
896:19 - but we're gonna say that this firebase
896:21 - auth provider comes from another class
896:23 - which is called auth provider so what
896:26 - we're gonna do then is gonna say okay
896:29 - any auth provider that needs to that our
896:33 - application can work with is expected to
896:35 - have certain functionalities
896:37 - and certain properties okay such as the
896:40 - current auth provider should be able to
896:41 - return the current user the author
896:44 - provider should be able to log a user in
896:46 - um
896:47 - log user out register users send an
896:50 - email verification so these
896:51 - few basic functionalities
896:54 - so that will be our abstract offs
896:57 - provider class and then we will create
896:59 - another class which is as we call it it
897:02 - will be the concrete implementation of
897:04 - that abstract class so think of the
897:06 - abstract class as kind of like a
897:08 - as it's it is our um contract
897:12 - so we're saying any authentication
897:14 - provider such as google facebook etc
897:16 - will need to conform to the
897:18 - functionality that we specified in this
897:20 - abstract class okay
897:21 - then we will go and develop a concrete
897:23 - implementation of that abstract class
897:25 - and we will call it firebase auth
897:27 - provider and we will actually place the
897:29 - real implementation of our
897:31 - authentication
897:33 - for firebase such as creating a user
897:35 - logging user in etc etc in that concrete
897:39 - implementation okay
897:41 - and then what we will do also we will
897:43 - create another class which we will call
897:45 - it i believe we call it off service
897:49 - and its goal
897:51 - and in this course it won't do so much
897:54 - what it will do it will just
897:56 - take a provider such as a firebase auth
897:59 - provider a google auth provider and it
898:01 - will just expose the functionalities of
898:03 - that provider to the outside world and
898:05 - and the goal of this is that so we will
898:08 - have our ui talking
898:10 - with that service and that service will
898:13 - talk to a provider which which is the
898:15 - firebase auth provider and that firebase
898:17 - auth provider will talk to firebase so
898:19 - we're
898:20 - right now we have firebase ui
898:23 - but after after the end of this chapter
898:25 - we will have firebase
898:27 - um firebase auth provider
898:30 - auth service and then the ui so we will
898:32 - have two layers sitting in in between
898:35 - and you may actually correctly think
898:38 - that well this is a lot of work why do
898:40 - we need that but
898:41 - for me i if i wanted this course to be
898:44 - just another course where i show you how
898:46 - to include firebase then it wouldn't be
898:48 - to be honest with you worth actually
898:50 - doing yet another course about firebase
898:52 - and flutter because there are lots of
898:53 - courses available maybe not maybe not
898:56 - courses that go through so much details
898:57 - as i am going but i still believe that
899:00 - my job here is not just to make you a
899:02 - developer but also make you a good
899:04 - developer where you take some extra
899:07 - steps in order to make your code a
899:08 - little bit better and this is why you
899:10 - will actually notice as as you get more
899:12 - into software development and working
899:14 - with others in inside teams which you
899:16 - may not be doing at the moment but when
899:18 - you get your first job a software
899:19 - developer you'll understand that other
899:20 - software developers are actually taking
899:22 - some extra steps in order to make their
899:24 - code a little bit easier and better to
899:26 - maintain so that's what we're gonna do
899:29 - in our code okay
899:32 - so um
899:34 - that was
899:35 - uh the intro for this chapter what we
899:37 - need to do is to
899:39 - um first think about how we're handling
899:41 - our um exceptions
899:44 - if you look inside the i mean in the
899:46 - verify view we're not taking care of
899:48 - exceptions as such maybe that's
899:49 - something we'll need to do as well
899:51 - but if you look at the login screen for
899:53 - instance we're having here a try block
899:56 - and then when it gets to firebase off
899:58 - exception we're handling user not found
900:01 - wrong password and then if anything else
900:03 - happens we just say show error
900:05 - so here there are two
900:07 - specific errors off errors that we're
900:09 - handling wrong password and the user not
900:12 - found and if we go to
900:16 - the register view you will also see we
900:18 - have weak password email already used
900:21 - and invalid email all right
900:25 - so these are some of the exceptions that
900:27 - we'll need to handle in our um in our
900:30 - application but right now as you can see
900:32 - our ui is going directly to firebase
900:34 - auth exception and it's like importing
900:37 - firebase auth exception which is
900:40 - created inside let's have a look
900:42 - firebase off accession src interface
900:45 - it's in um
900:49 - it's in one of the files which i believe
900:51 - is accessible through firebase auth so
900:54 - if you go to firebase off
900:56 - that probably imports all the exceptions
900:59 - as well there we go here it is
901:02 - so
901:04 - so our ui shouldn't really know anything
901:06 - about firebase off by the end of this
901:08 - chapter so let's take the first step
901:10 - here then and let's go and create our
901:13 - as you can see a new file
901:15 - under lib
901:17 - under folder called services auth and
901:19 - then off
901:20 - exceptions.dart so i'm gonna do that
901:22 - right now
901:23 - i'm going to collapse these and let's go
901:25 - under lay down you can see that we don't
901:27 - have con right now we have constants
901:29 - utilities and views so we don't have
901:30 - anything called services so let me right
901:32 - click on lib and say new file and you
901:34 - can do the same thing
901:35 - and in here just enter the entire path
901:38 - so say services
901:40 - off and then we say off
901:42 - exceptions.dart
901:44 - okay
901:45 - [Music]
901:47 - oh that is our new file that we created
901:50 - in there
901:51 - and what we need to do is to go and
901:52 - define all those exceptions so let's
901:55 - begin by saying that we need a new
901:58 - exception called user not found off
902:00 - exception and if you remember user not
902:02 - found is something that we're handling
902:04 - here do you remember
902:05 - firebase off exception in the login view
902:07 - and if we cannot find that user we're
902:09 - just showing an error saying show error
902:12 - dialog so let's define an exception for
902:14 - that and i'm going to say class
902:17 - user not found and off
902:25 - and i'm going to say implements
902:28 - exception so this is a typical way of
902:30 - creating exception classes in your in
902:33 - your application that you say
902:34 - and here is
902:36 - my own class that is that for instance
902:38 - represents an exception and it's it's
902:41 - good practice just to say that it
902:42 - implements an existing exception
902:44 - exception you can see here by command
902:46 - pressing on it you can see it goes to
902:48 - flutter bin cache core exception start
902:51 - so it is already imported by default you
902:53 - don't have to import any specific file
902:55 - in order to get access to the exception
902:56 - class
902:57 - so it's it suffices that you just
903:00 - implement that class okay
903:04 - so now let's go ahead and implement the
903:07 - next
903:08 - exception as the title as the caption
903:11 - says here wrong password off exception
903:13 - and that is also handled inside our
903:16 - login view
903:17 - wrong password right here
903:20 - so
903:21 - i'm just gonna go and kind of like copy
903:24 - that code and in here i'm just gonna say
903:27 - wrong password
903:29 - auth exception
903:33 - all right what else are we handling here
903:35 - nothing else in the login view at least
903:37 - so that's that's really good so
903:40 - i'm just going to close the login view
903:41 - for now
903:42 - and save this file okay
903:46 - so let's now start taking care of some
903:48 - of the exceptions that we're handling in
903:50 - our register view and let's go to
903:51 - register view and you'll see here that
903:53 - the first section exception that we're
903:55 - handling is called weak password
903:57 - so
903:58 - i'm going to put a comment in here and
904:00 - a comment in here i'm going to say login
904:02 - exceptions
904:04 - and and register
904:06 - exceptions okay
904:08 - so as the caption says let's create a
904:10 - class called weak password auth
904:11 - exception gonna copy this code from here
904:14 - and i'm gonna say weak
904:16 - password off exception
904:20 - so that's for the register views weak
904:22 - password the next one is email already
904:24 - in use so that's what the caption says
904:27 - here as well so let's go and copy this
904:30 - and i'm gonna say email already in use
904:32 - auth exception
904:35 - okay
904:36 - so now we have the password and email
904:38 - already and use exceptions
904:42 - and let's have a look
904:44 - and we also have the invalid email
904:47 - auth exception
904:49 - which i don't think i had planned for
904:51 - but let's go and implement that as well
904:53 - so let's say invalid email
904:57 - author okay
905:00 - okay um
905:02 - now what we also need to do is to
905:05 - define a few
905:08 - other exceptions as you remember from
905:10 - register view
905:12 - we also have the case of an else where
905:15 - we basically say something else happened
905:17 - here it's an off exception but something
905:18 - else may have happened that we haven't
905:20 - handled with this code or we may also
905:22 - have another cat statement here that
905:25 - catches like generic exceptions and
905:26 - we're we're doing the same thing as you
905:28 - can see the code here um and let me
905:31 - change the screen layout so you see it
905:33 - better i'm gonna go to
905:36 - the login view as well because we're
905:37 - doing the exact same thing in the login
905:39 - view in that
905:41 - upon getting a firebase auth exception
905:43 - this code
905:45 - then we also have an else statement even
905:48 - in there so we're saying if the code is
905:50 - not like handled by us it may be another
905:53 - code in that case also show the show
905:55 - error dialog or in that case show error
905:58 - dialogue
906:00 - and we're also doing a catch like a
906:02 - generic catch as well so we need kind of
906:04 - like an
906:05 - exception that handles all those cases
906:07 - so
906:08 - an unknown code during the firebase off
906:11 - exception and an unknown exception so
906:14 - we're gonna create a generic exception
906:16 - all right
906:17 - i'm gonna change the screen layout a
906:19 - little bit
906:21 - um like that i'm gonna go to my notes
906:23 - okay
906:24 - so let's just in here say generic
906:27 - exceptions
906:30 - um and i'm gonna
906:33 - bring
906:35 - this one up as well
906:38 - today i'm gonna bring this one first so
906:40 - let's go ahead and create a generic auth
906:42 - exception i'm gonna copy this code from
906:44 - here i'm going to say generic auth
906:46 - exception
906:47 - okay
906:48 - and what we also need to do is to
906:50 - provide
906:51 - this thing user not logged in
906:55 - off exception
906:57 - and you will you will know now that
907:00 - um
907:01 - i mean you will need to know why we're
907:03 - actually having a use or not logged in
907:05 - off exception and
907:07 - this will be an exception that our um
907:10 - that our firebase provider will be able
907:12 - to throw
907:14 - if
907:15 - the user is null
907:17 - after registering that user for instance
907:21 - so let's say that we tell our auth
907:23 - provider we say register a user with
907:26 - this email and password and no exception
907:28 - happens nothing
907:30 - so we the application thinks that all
907:32 - right everything went as expected but
907:34 - what if the user
907:36 - that we access
907:38 - at firebase auth
907:40 - is null in that case our auth provider
907:42 - should be able to handle that and send
907:44 - an exception saying that oh i couldn't
907:46 - find this user or this user isn't logged
907:48 - in so let's create that exception as
907:50 - well so i'm just going to say
907:52 - user not logged in exception so let's
907:55 - just say class
907:56 - implement
907:58 - exception
907:59 - okay so user not logged in off exception
908:02 - and i'm gonna save that as well
908:06 - all right that was a lot of work now we
908:08 - have created all those files oh sorry
908:10 - maybe you didn't actually see the code
908:12 - that i wrote i don't like having
908:13 - captions up all the time but i also
908:15 - think captions are so important so that
908:17 - you always know what we're working with
908:19 - but the downside of having these
908:20 - captions at the bottom left of the
908:22 - screen is that sometimes they hide what
908:24 - i'm typing so i'm doing my best really
908:26 - to
908:27 - catch those and
908:29 - catch that issue and if i see that
908:31 - happening i'll i'm gonna bring the
908:33 - screen up like this so you see it but
908:34 - sometimes i may be missing that i
908:36 - apologize for that so let's let's say
908:39 - that and now we've implemented all our
908:41 - exceptions
908:43 - and as you can see in the captions it
908:45 - says we need an auth user we shouldn't
908:47 - expose firebase's user to the ui
908:49 - and this to be honest with you is the
908:51 - same story as we had for our exceptions
908:54 - the ui code should not at all be working
908:58 - with firebase the ui code should be so
909:00 - high level and so abstracted from the
909:03 - rest of your application that it
909:05 - shouldn't even at all know how it is
909:08 - functioning you're just giving it
909:10 - different
909:11 - providers and services and it should be
909:13 - calling those services and providers not
909:15 - really knowing how they're tied together
909:17 - and at the moment you can see our login
909:19 - view it's like
909:22 - where let's go in here
909:24 - you can see here in login view and for
909:27 - me it's on line 67 for you maybe in a
909:29 - different line but we're after calling
909:32 - the sign in with email and password
909:33 - function which we also shouldn't be
909:35 - doing
909:36 - but
909:37 - what we're doing after that is we're
909:39 - getting the current user from firebase
909:41 - and this user is of type you can see
909:44 - let's go in here and see it's of type
909:46 - user so if i go put the type in here and
909:49 - command click on it you'll see this user
909:52 - is part of firebase auth you see there's
909:54 - a fun there's a class called user so
909:58 - we are all we were also like exposing a
910:01 - firebase user to our ui and that is not
910:04 - a good idea
910:05 - so as a caption says here we shouldn't
910:08 - expose firebase's user to the ui so we
910:10 - need to have our own user that abstracts
910:14 - away the functionality
910:16 - or that that the current user at
910:19 - firebase level has okay
910:21 - so
910:22 - let's go ahead and do that so
910:26 - we're going to create an off user dart
910:29 - file in lib services auth a file called
910:32 - off
910:33 - user so i'm going to remove or sorry i'm
910:36 - going to close all the files that i've
910:37 - created and under
910:39 - services auth i'm going to then create
910:42 - an off user
910:44 - so i'm going to say off user.dark
910:48 - and in this off user then we need to
910:50 - basically start working with firebase in
910:53 - this case so i'm going to go to my notes
910:55 - just to ensure i'm telling you
910:56 - everything that i'm um that i plan to
910:58 - tell you
911:01 - all right so let's go in here and import
911:03 - firebase
911:04 - it's user import package
911:09 - firebase
911:10 - and is it in
911:13 - firebase auth i believe and then we're
911:15 - gonna say show user okay and as i've
911:18 - mentioned before this is a great way of
911:20 - just ensuring that you're not exposing
911:23 - too much of a packages classes to your
911:26 - current workspace except what you're
911:28 - saying is that firebase auth is isn't it
911:31 - maybe an entire dart file with its
911:33 - structures maybe thousands of classes
911:35 - now i'm exaggerating but a lot of
911:37 - classes but you are only interested in
911:39 - the user class okay
911:41 - so
911:43 - you could also like say
911:45 - as
911:46 - firebase
911:48 - off like that and then you would say
911:50 - show user and that will allow you so if
911:52 - i say test
911:54 - then you will be able to say
911:56 - firebaseauth.user
911:58 - you can also do that if you if you
912:00 - prefer to for instance ha prefix the
912:02 - user in this case that comes from
912:04 - firebase with the actual place that it
912:06 - comes from you could also use as
912:09 - some people may like it and i also do
912:12 - but i haven't planned to do that in in
912:14 - this particular
912:15 - file so do it if you want to the way
912:18 - that i'm doing it here so you can follow
912:19 - along with the steps that i'm providing
912:21 - for you in this course without diverging
912:24 - from
912:25 - from the point
912:27 - okay now that we've done the um
912:30 - import
912:31 - what we need to do as a caption in the
912:33 - case we need to create the actual class
912:34 - so let's say class off user
912:37 - and in here what we need is a field
912:40 - called is email verified now remember
912:45 - right now all we need from our off user
912:48 - is to know whether that email is
912:49 - verified or not so if you go for
912:51 - instance to our login view
912:53 - you can see that we have this code here
912:55 - and
912:56 - that signs a user in with email and
912:58 - password and right after that gets the
913:00 - user and all it does with that user says
913:02 - email verified
913:04 - and we're doing the same thing in
913:06 - register view i believe so let's go to
913:08 - register view and you can see in here
913:10 - and it says
913:12 - actually there we're not doing anything
913:13 - with the email verified all we're doing
913:15 - is just saying a send email verification
913:17 - so sorry about that so it's in login
913:19 - screen okay so let's go in our off user
913:23 - in here and say it has a property called
913:25 - is email verified okay so
913:27 - i'm gonna say final and bull is email
913:32 - and you saw that firebase has
913:34 - implemented this function this uh
913:36 - property as email verified i personally
913:39 - prefer to call boolean functions boolean
913:41 - getters in this case like a property of
913:43 - a class with is wherever i see that fit
913:47 - it's just because it makes a lot more
913:48 - sense for me at least to say user dot is
913:51 - email verified rather than saying
913:53 - user.email verified
913:55 - it just makes it more like complete
913:58 - grammatically is blah blah verified or
914:00 - is that
914:02 - so that's the reason that we're
914:04 - diverging a little bit
914:06 - okay um
914:07 - now you see this in here and we're
914:11 - saying it's email verified you can get
914:12 - help from visual studio code to
914:14 - create a constructor for final fields
914:17 - and even if you don't want to do that
914:18 - you could always just type it by hand
914:20 - you can say off user self is email
914:22 - verified sorry this is email verified
914:25 - and since this class it only has a
914:29 - property that you can set upon
914:31 - initialization and you're not changing
914:33 - it because it's a final field
914:34 - excuse me
914:36 - you can make your constructor a const
914:40 - excuse me again and it would also be
914:43 - good if you could
914:45 - basically let's say
914:46 - immutable as another try defining
914:49 - undefined i believe you actually have to
914:51 - import foundation in here
914:53 - now immutable basically is
914:57 - but immutable here i don't think we've
914:59 - talked about that before but it's just
915:01 - like an annotation telling that this
915:04 - class and any subclasses of this class
915:06 - are going to be immutable meaning that
915:08 - their internals are never going to be
915:10 - changed upon initialization so if you
915:13 - then go and create for instance class my
915:16 - off user and say extends the auth user
915:20 - and then you'll have a bull
915:22 - um let's say in here and you create a
915:26 - constructor for it so let's create a
915:27 - constructor for it so boom okay
915:31 - prefer declaring what is a const okay
915:33 - then we say const then you say okay well
915:36 - i want a boolean flag in here bull is
915:38 - blah
915:39 - and
915:41 - um
915:42 - yeah
915:43 - bull is blocked
915:45 - now you see it says null not
915:47 - non-nullable instance flab but it must
915:49 - be initialized let's just initialize it
915:50 - to false and and it says can't define a
915:53 - cons constructor okay then we're not
915:55 - going to make it a cons constructor and
915:57 - now you see that little warning here it
915:59 - says this class or a class that this
916:01 - class inherits from is marked as
916:04 - immutable but one or more of its
916:06 - instance feels aren't final so
916:09 - now you see what immutable means it
916:11 - tells dart that this class and all its
916:14 - subclasses need to be immune immutable
916:17 - they cannot have any fields that change
916:19 - so by removing this field then you get
916:22 - rid of that
916:23 - little warning and you can make this
916:25 - cons and the error completely goes away
916:28 - so now you know what immutable means
916:30 - okay
916:32 - all right great now we created that is
916:34 - email verified at a cons constructor for
916:36 - our off user
916:38 - let's go to the next point
916:42 - the next point as you can see here it
916:44 - says we need a factory constructor
916:47 - that creates our
916:50 - auth user from a firebase user and
916:53 - factory constructors are really useful
916:55 - for this purpose in that you have
916:58 - let's say object x and you want to
917:00 - create an object y from that instead of
917:03 - you manually gluing things in some sort
917:06 - of a middle layer saying now i take the
917:08 - object x and add some blah blah and fuse
917:10 - it together and then put object y you
917:12 - can put that responsibility on object y
917:14 - and saying that you need to be able to
917:17 - initialize yourself or construct an
917:19 - instance of yourself from this object
917:21 - and this is like a typical pattern that
917:22 - you'll see everywhere so
917:25 - um well everywhere everywhere but where
917:27 - you have the ability to do that so
917:29 - that's what we're gonna do now with a
917:31 - factory constructor so let's say we have
917:34 - a factory constructor here
917:36 - we'll say off user and we say from
917:39 - firebase okay as the caption says then
917:42 - we take a firebase user in here
917:45 - like that and then we say what we will
917:47 - do in here we will actually create an
917:49 - instance of our own class an off user
917:52 - given that user okay so let's say that
917:55 - we create
917:56 - an off user in here
917:58 - and a lot of user and it's email
918:00 - verified comes from user email verified
918:03 - like that
918:04 - all right so this shouldn't be they
918:06 - shouldn't be that difficult to
918:07 - understand so this creates
918:08 - this goes into
918:10 - this constructor you can see
918:13 - and it takes the email verified value of
918:15 - the firebase user and places it in this
918:18 - class so all we did is just we kind of
918:20 - like copied
918:21 - a firebase user and
918:24 - we
918:25 - made a copy of it into our own off user
918:27 - okay so we're not
918:29 - exposing firebase's user and all of its
918:32 - properties to our user interface
918:39 - all right that was a lot of information
918:40 - now let's talk about an auth provider as
918:44 - i mentioned in the beginning of this
918:45 - chapter
918:46 - and as you saw in the firebase console
918:49 - you will have the possibility to add
918:52 - various auth providers to your
918:53 - application when you're working with
918:54 - firebase so such as
918:56 - google and apple facebook
918:59 - and many many more okay an email and
919:01 - password combination like we're doing so
919:03 - all of those are providers
919:05 - what we need to do now is to create an
919:07 - alt provider class that encapsulates
919:10 - every provider that we may add in the
919:14 - future and creates a nice interface for
919:17 - them says every provider that our
919:19 - application can work with should conform
919:22 - to this particular interface okay
919:24 - so let's go ahead and take care of that
919:26 - now and i can see here we're going to
919:29 - create that file on the lib services
919:31 - auth
919:32 - off provider so we have lib services off
919:36 - but we don't have auth provider files so
919:38 - let's let's right click on auth and say
919:40 - off provider dart
919:46 - and go to my notes
919:49 - so
919:51 - what we're going to do in here then is
919:53 - since our off uh provider
919:56 - is going to work with our
919:59 - um
920:00 - it's for instance
920:02 - the the functions that we're going to
920:03 - provide for our auth provider are for
920:05 - instance a getter that gets the current
920:08 - user so that's not a function it's just
920:10 - a getter the way we're actually doing it
920:12 - in here if you see let me go to login
920:14 - view
920:15 - and you'll see in login view here this
920:18 - thing at the moment say firebase auth
920:20 - instance current user this is a getter
920:22 - so this is a property and returns the
920:25 - firebase user what we want is for our
920:28 - auth provider to also be able to provide
920:31 - us with the current user now remember
920:34 - we've abstracted away the firebase user
920:37 - with our own auth user which we just
920:40 - created okay so what we need is this
920:43 - abstract class that can return an
920:46 - instance of our off user okay
920:48 - so for that we need to import this off
920:51 - user into this dart file so let's just
920:54 - say import
920:56 - package
920:57 - this application that i've created as
920:59 - you can see in the title it's called my
921:01 - notes
921:02 - so let's go to my notes services
921:05 - auth and then auth user so that's the
921:08 - import statement as you can see in the
921:11 - caption i've written package xxx and
921:13 - that's where you need to put the name of
921:14 - your package in this case for me is my
921:17 - notes
921:20 - all right that's great now let's go and
921:24 - create an abstract class so i've
921:26 - mentioned this twice before but our auth
921:29 - provider dart file is not gonna have
921:31 - really
921:33 - is not gonna have any logic it's an
921:36 - abstract class though abstract classes
921:38 - in dart can contain logic but in this
921:40 - case our abstract class is just going to
921:42 - be a protocol or you may know it as
921:44 - interface or you may also know it as
921:47 - well an abstract class so let's go ahead
921:50 - and create that let's say abstract class
921:52 - auth provider
921:55 - and so the abstract class creation is
921:58 - done what we need to do is now give it
922:01 - like the ability to return the current
922:03 - off user okay so as the caption says
922:05 - we're going to say off user and get
922:08 - current user okay
922:10 - so we're saying any author provider
922:12 - whether it works with email password
922:14 - whether it's a google auth provider
922:16 - whether it's an apple facebook twitter
922:18 - whatever it needs to be able to
922:20 - optionally return the current currently
922:22 - authenticated user and that's what this
922:24 - optional site is
922:26 - here for okay
922:28 - and then what we will also need to do is
922:31 - to
922:32 - allow it to
922:33 - be able to log a user in okay so we're
922:36 - going to say we will have a function
922:39 - that
922:41 - completes in the future
922:43 - and returns an off user
922:46 - and it says log in
922:48 - like this okay
922:51 - and now we have to think what does this
922:53 - login actually require well in our case
922:56 - it requires email and password so let's
922:58 - just put email and password we're
923:00 - thinking that every author provider that
923:02 - we're writing is going to have an email
923:03 - and password combination of some sort
923:06 - you could say id and password but i'm
923:09 - just going to go with email and password
923:10 - for now okay so let's make these
923:12 - required parameters as well so i'm going
923:14 - to put curly brackets here and curly
923:16 - bracket here i'm going to say required
923:18 - stream email
923:19 - and then a required stream password like
923:22 - this
923:23 - okay
923:24 - and a semicolon at the end of that
923:26 - command s to save the file so dark
923:28 - formatter can do its magic
923:31 - and the reason where you see if we go to
923:35 - author sorry if you go to our login
923:37 - screen again
923:39 - and in here we say sign in with user and
923:42 - password you can see that it always
923:43 - returns a user credential now you may
923:46 - you may think how can i always return a
923:49 - user credential if the current email and
923:51 - password are actually incorrect and they
923:53 - don't belong to a valid user well the
923:55 - way that firebase is handling is that if
923:57 - you say sign in with email and password
923:58 - if you can grab the current user if he
924:01 - can't sign in that user with the
924:03 - information that you provide it returns
924:05 - it otherwise it fails with an exception
924:07 - meaning that it's saying that as long as
924:09 - you call me and there's no exception i
924:11 - will give you user credential if there
924:13 - is an exception well you need to handle
924:15 - that so that is a great way to avoid
924:18 - having functions let me close the off
924:20 - user as well avoid having functions that
924:23 - do like this that option on your return
924:25 - user so
924:27 - do your work in your functions
924:29 - return the user and return the object
924:32 - that you promised if you can't do that
924:35 - throw an error so you don't have to do
924:37 - this do this kind of a optional return
924:40 - okay
924:43 - for a the login function now we need to
924:46 - also have a function that can create a
924:48 - user so that imagine that it's for the
924:50 - sign up or
924:52 - um
924:53 - yeah what else do we call it uh register
924:56 - yeah so
924:57 - let's call it a create user so we say
925:00 - this also returns a auth user
925:03 - and we call it creates user like this
925:06 - and this also has all these parameters
925:08 - so i'm just going to copy and paste this
925:09 - you don't have to do that twice and a
925:12 - semicolon at the end
925:14 - all right guard formatter do its thing
925:17 - and then let's go and
925:20 - and create a function that allows us
925:22 - then to log a user out because that's
925:24 - what we're doing in the main ui of the
925:26 - application okay
925:28 - the log out it's not going to return any
925:30 - value as you can see in the caption here
925:32 - just a future void so we say future void
925:34 - log out just like that
925:37 - all right so that was simple
925:40 - and also we will need a function that
925:42 - can send an email verification okay so
925:45 - this one's also very easy it's just a
925:47 - future void and as you can see in
925:49 - captions we're calling it send email
925:52 - verification all right
925:55 - so
925:57 - how was that
925:59 - okay
926:00 - as i mentioned
926:01 - our office provider at the moment is
926:03 - just an abstract class so
926:05 - it's
926:06 - dictating an interface for any
926:09 - authentication provider that we're gonna
926:11 - add to our application
926:13 - we but just so you know we are only
926:16 - going to add an email author provider
926:19 - okay
926:20 - or
926:20 - sorry a firebase author provider
926:23 - but this way by creating an abstract
926:26 - class with an author provider as a name
926:28 - and then you create a concrete class
926:30 - called firebase auth provider you're
926:32 - able to in the future to extend this and
926:34 - add more and more auth providers all of
926:36 - which will follow the same interface
926:38 - okay so that's the goal
926:40 - but we're only in this in this course
926:43 - are gonna use firebase auth provider
926:46 - so uh just so you know
926:48 - as the caption says go ahead and create
926:50 - a a file called firebase auth provider
926:53 - in your services auth folder i'm gonna
926:56 - right click here and i'm gonna say oops
926:58 - uh and say new file i'm gonna call it
927:00 - firebase off
927:02 - dot provider.net
927:05 - now let's go in here and say
927:07 - um i'm gonna go to my notes a little bit
927:09 - here uh
927:11 - like that okay so this is gonna be like
927:13 - the juiciest part of um
927:17 - of this chapter we are actually going to
927:19 - abstract the way firebase authentication
927:22 - into our own provider so expect this
927:25 - file to grow a little bit in size i can
927:27 - see my notes it's going to go to about
927:29 - 100 lines of code but that's okay too so
927:33 - and um we can just get started with it
927:36 - and so
927:37 - as you can see in the caption we need to
927:39 - import a few of files auth user
927:42 - auth provider and off exceptions we need
927:44 - auth user because this sorry actually
927:47 - let me first
927:48 - explain why we need to import auth
927:50 - provider because our firebase auth
927:52 - provider is going to be a concrete
927:53 - implementation of the file auth provider
927:56 - or the class auth provider that we just
927:58 - created so that's the reason for that
927:59 - import
928:00 - the os user import is going to be
928:02 - because as you can see in the auth
928:04 - provider
928:05 - the login and create user functions they
928:07 - need to return an off user so that's why
928:09 - we need to import off users so that our
928:11 - provider can return instances of that
928:13 - okay
928:14 - and last but not least we also need to
928:16 - import auth exceptions because remember
928:18 - our firebase auth provider is also going
928:20 - to
928:21 - abstract away all the authentication
928:23 - errors and exceptions that otherwise
928:25 - happen at the firebase level into our
928:28 - own exceptions that we've created
928:30 - here off exceptions okay so let me go
928:33 - ahead and first import off user so
928:36 - package
928:38 - and this application called my notes
928:41 - and we have services auth
928:44 - and then we have
928:46 - off user okay so i'm gonna import that
928:49 - and i'm gonna copy this file then and
928:51 - this line and the next one is gonna be
928:53 - the off provider
928:55 - and as you can see in the captures we
928:57 - also have to import auth exceptions
929:02 - so those are the three imports
929:06 - now
929:06 - since we have our own imports
929:09 - and this file is going to talk directly
929:11 - with firebase we also need to import
929:12 - firebase of course so and let's go ahead
929:15 - and import
929:17 - and i'm going to actually copy that code
929:19 - so i don't have to type all of it
929:20 - because it's a little bit boring but you
929:22 - can see
929:23 - in the captions at least what you need
929:25 - to import the firebase off and you need
929:28 - to also import firebase off exception
929:30 - okay
929:32 - great
929:34 - so that's our imports
929:36 - um now what we need to do is to create
929:38 - the actual class and
929:40 - um as you can see it's going to be
929:42 - called firebase all provider and
929:43 - implements auth provider which is our
929:45 - own class so let's say firebase
929:48 - auth provider implements
929:51 - a provider just like that okay and now
929:53 - you can see you get an error same
929:54 - missing concrete implementation i'm
929:56 - going to change the layout of the screen
929:58 - so you see the code in its entirety
930:01 - and then what we need to do is to
930:02 - implement you see those function
930:05 - functions and getters that auth provider
930:08 - abstract class
930:09 - says that every class that implements it
930:12 - needs to implement those things as well
930:14 - so you may try to do those things by
930:16 - hand but i absolutely
930:18 - i i i'm not at all a fan of doing things
930:22 - by hand sorry about that so i prefer to
930:24 - get help from the editor to complete
930:26 - these things so i'm just going to say
930:27 - command dot
930:29 - and make class firebase off abstract
930:31 - create five missing overrides okay so
930:34 - there we go so visual studio code
930:36 - created all those functions in here and
930:38 - you can see in all of them it just says
930:39 - throw unimplemented error
930:42 - great stuff
930:44 - i'm gonna decrease the size of the font
930:45 - here go back to the
930:48 - same layout that we had before
930:51 - so the first thing that we need to do in
930:53 - here let's go ahead and implement this
930:56 - current user okay
930:59 - so this is going to have a lot of
931:01 - not a lot but it's going to have a bit
931:03 - of logic so i'm going to do this instead
931:05 - of being with a pointer
931:07 - and let's go ahead in here and try to
931:10 - get that user so let's say
931:12 - you see our job is now to get the
931:15 - firebase user and turn it into an off
931:17 - user remember our off user had a factory
931:20 - constructor so we need to call that
931:22 - factory constructor okay so let's just
931:24 - say final user is equal to firebase off
931:28 - our firebase
931:30 - and auth
931:32 - instance
931:33 - and then we say current user
931:35 - and then we say if user is not null
931:40 - and we need to create an instance of it
931:42 - as off users so we just say return
931:45 - off user from firebase user okay
931:50 - otherwise we return null like this so
931:54 - if firebase says there's a user then we
931:56 - create an off user out of that and we
931:58 - just return it
932:02 - okay that was for a current user it
932:04 - wasn't so much of code to be honest with
932:06 - you
932:08 - now what we need to do is to take care
932:10 - of create user which is this function
932:12 - right here
932:14 - so create user is going to be a little
932:16 - bit thicker to be honest so
932:19 - let's go ahead and
932:22 - first do a little bit of formatting in
932:24 - here so i like to always
932:27 - append a comma at the end of the last
932:29 - parameter of my function so that when i
932:31 - do dark formatter
932:33 - or dart format it's going to break all
932:35 - these parameters into their own
932:37 - lines okay because before it looked like
932:39 - this and it's not so clean in my eyes at
932:41 - least it's a preference thing
932:43 - okay so
932:44 - in here what we need to do is to
932:47 - create basically uh
932:50 - a user with uh firebase
932:53 - so i'm going to put this entire thing in
932:55 - in a try block and then we're going to
932:57 - catch firebase off exception
933:01 - and
933:02 - on firebase off exception catch e okay
933:08 - so just like that
933:10 - and then we're going to have a generic
933:11 - cache block in here
933:13 - like this
933:17 - all right uh now what we need to do in
933:19 - create user in the tri-state main
933:21 - statement we need to actually tell
933:23 - firebase that we want to create a new
933:25 - user so let's say firebase
933:28 - off
933:30 - instant and then we say create user with
933:32 - email and password okay so we have the
933:33 - email here and the password and we can
933:36 - see those parameters already there so we
933:38 - don't have to do anything
933:39 - so
933:40 - um but what we need to do here is you
933:43 - can first actually see yeah this
933:45 - function needs to return a value we're
933:46 - gonna fix this so don't worry about that
933:48 - but we also need to await on this
933:51 - because remember creating a user or
933:52 - email password is not a function that
933:54 - just returns immediately and this is one
933:56 - of the things that is absolutely
933:57 - beautiful about dart in that in the
933:59 - interface we didn't actually say that
934:00 - this function has to be async but you
934:03 - can in this concrete implementation make
934:04 - this function async so it's absolutely
934:07 - beautiful so async is not the part of
934:09 - the signature of the function but it has
934:11 - more to do with the internals of that
934:12 - function so in order to call this
934:14 - function with an await you see if we put
934:17 - a weight here we get an error we need to
934:19 - make this function async all right so
934:22 - great stuff
934:25 - all right so after doing that what we're
934:28 - going to do is to get the current user
934:30 - if the current user is there then we're
934:33 - just gonna return the current user if
934:35 - the current user after creating a user
934:38 - or email and password and no exceptions
934:40 - is not there then that is a bad sign and
934:42 - we need to return then one of our auth
934:45 - exceptions called user not logged in off
934:47 - exception okay
934:48 - so i'm going to close this so let's go
934:51 - in here and say final
934:52 - user is
934:54 - get or just user is the current user
934:57 - remember we already have a getter for a
934:59 - current user right here
935:01 - okay
935:03 - and it just gets the current user from
935:04 - firebase so we say here's the user
935:07 - if the user is available there
935:10 - is not null
935:12 - then just return the user
935:15 - otherwise you should throw a user not
935:18 - found or i think that's what we call the
935:20 - user not logged in
935:23 - auth exception all right
935:28 - that's for the creation of the user if
935:31 - everything goes fine except for this
935:32 - part
935:34 - now we need to go to our firebase auth
935:36 - exception and we need to handle a few
935:38 - things um
935:39 - so if you look at where in our register
935:42 - view
935:44 - in here we are handling weak password
935:48 - email already in use and invalid email
935:51 - so let's just copy these three things
935:53 - okay actually these four things because
935:55 - we have an else block in there as well
935:58 - okay
935:59 - so i'm gonna copy that code just do the
936:02 - same thing please so go to your registry
936:03 - and copy that code go back to your
936:05 - firebase auth provider inside the
936:08 - firebase off exception where you're
936:09 - catching that
936:11 - paste that code but remove everything
936:14 - that has anything to do with the show
936:15 - error dialog okay so at least we have
936:19 - if and else statements okay
936:21 - like this so you should end up with a
936:23 - code that looks like this
936:26 - now
936:27 - where there is a weak password we are
936:29 - actually going to throw our own error so
936:31 - we're going to say throw
936:33 - weak password off exception
936:36 - it is an email already in use we're
936:38 - going to throw email already and use
936:40 - authexception
936:42 - in case on invalid email throw invalid
936:44 - email off exception and if there is any
936:47 - other code that we don't know about
936:49 - we're just going to throw a generic auth
936:51 - exception
936:54 - and also if there is a final catch
936:57 - basically meaning that by calling the
936:59 - create user an email with email and
937:01 - password if there is any other exception
937:03 - other than firebase auth exception we
937:06 - also need to handle that and throw
937:08 - a generic auth exception there as well
937:11 - okay
937:13 - a lot of code but
937:15 - hopefully this makes our ui code
937:19 - easier to read okay so we're doing this
937:20 - for a good purpose
937:23 - great stuff that's for
937:25 - our
937:25 - create user i'm gonna fall create user
937:28 - uh if it allows me to fold the entire
937:30 - create user poof and i'm gonna fold
937:33 - current user as well so this is a
937:35 - technique that you can or not a
937:36 - technique that's just a trick you can do
937:37 - in your editor if it supports folding
937:39 - and unfolding just to make sure that it
937:41 - looks a little bit cleaner okay because
937:43 - now that you've written create user you
937:45 - may not be directly interested in all
937:47 - its details you may just want to know
937:49 - that it's there okay
937:53 - all right the next thing we need to do
937:54 - is to implement send email verification
937:57 - so let's find that function and i can
938:00 - see it's right here send email
938:01 - verification i'm gonna scroll a little
938:02 - bit up so you see
938:04 - like that
938:06 - i'm gonna go to my notes as well okay
938:09 - so what we need to do then is to
938:11 - incent email verification what we need
938:14 - is to also mark this as async because
938:17 - it's going to call an asynchronous
938:18 - function on firebase as well okay
938:21 - and we need to
938:23 - call the send email verification
938:24 - function on the firebase user remember
938:26 - our user doesn't have that functionality
938:28 - our user only has is email verified
938:30 - property so in here let's get the
938:34 - firebase user so i'm going to say user
938:36 - is firebase
938:38 - off
938:39 - instance current user
938:41 - and we say
938:42 - if user is not null then we call that
938:47 - function so we say await user send email
938:50 - verification i remember i think this was
938:51 - the future of void so that's why we're
938:53 - doing a weight on it and that is why we
938:55 - have the async tag in here okay now
938:58 - if the user is nil then we're gonna just
939:01 - say user is not logged in you cannot
939:04 - send an email verification from user
939:05 - who's not logged in okay so then you
939:08 - throw user not
939:10 - logged in off exception
939:12 - okay
939:14 - so that's our send email verification
939:17 - function
939:19 - let's then fold this function as well so
939:21 - we don't see its internals
939:23 - as the caption says now we need to go
939:25 - and implement a login login is just as
939:28 - important as creating a user i'm going
939:30 - to start by putting a comma at the end
939:32 - of password parameter here and command s
939:34 - in order to save it
939:36 - and in here in the login function we're
939:38 - going to do something very similar to
939:40 - what we're doing in the register
939:41 - function i can see in my notes
939:43 - by doing a try
939:45 - and then we say on firebase off
939:48 - exception
939:50 - and catch
939:52 - e
939:53 - and then we'll say
939:54 - catch
939:55 - any other exception okay so
939:58 - let's in in here then start by um
940:02 - telling firebase that we want to log in
940:03 - with those credentials so let's say
940:06 - firebase auth instance and then we say
940:09 - uh
940:10 - sign in with email and password so
940:13 - there's a function in there okay
940:15 - and i'm gonna put a
940:17 - semicolon at the end so you can see the
940:19 - code
940:20 - all right so that's what we're doing but
940:22 - remember again these functions are
940:24 - asynchronous so you can't just call that
940:26 - function and expect it to work it's a
940:28 - future of user credential okay so make
940:31 - your function asynchronous and then
940:32 - await on this
940:34 - function so we're going to do something
940:37 - very similar similar to what we're doing
940:39 - in register sorry in the create user in
940:41 - in that we're saying final user is
940:43 - current user
940:45 - i hope you can see that code yes i can
940:47 - see that you can see so in this in this
940:51 - uh code we're gonna take the exact same
940:54 - code that we wrote in um
940:56 - create user so i'm gonna expand that you
940:58 - can see here
941:00 - i'm gonna copy that code and you could
941:02 - do the same what we're doing is just
941:04 - making sure after signing in then there
941:06 - is a current user okay copy that code
941:10 - gonna fold this then i'm gonna bring it
941:12 - to the login and right after sign in
941:15 - with email and password i'm gonna paste
941:16 - that code okay so that's that part
941:19 - now
941:20 - you see now we have firebase
941:22 - authexception again to handle just like
941:24 - we did with create so let's go to your
941:27 - um login view
941:29 - and have a look at which
941:32 - and which exceptions we were handling so
941:34 - i can see here we're handling these
941:37 - i'm actually going to copy that entire
941:39 - code from login view you see a firebase
941:41 - off exception username wrong password
941:44 - etc and including the catch any other
941:46 - exception block right here copy that
941:49 - code and bring it to your
941:52 - firebase auth provider
941:54 - and
941:55 - replace let me actually see how it looks
941:57 - like
941:58 - yeah replace all of this with that okay
942:02 - and then remove your weights as we did
942:05 - before to be honest with you this this
942:07 - is just a lot of big talk for saying
942:09 - that we
942:10 - um
942:12 - need some code from another place to
942:14 - bring here so your code now should look
942:16 - like this so it says on firebase off
942:18 - exception and we're handling user not
942:20 - found wrong password off exceptions from
942:22 - firebase and a generic catch block okay
942:27 - so in the case of a user not found a
942:30 - firebase office session we're going to
942:31 - say throw user not found alt exception
942:35 - in the case of a wrong password we're
942:36 - going to say throw on password boss
942:38 - exception
942:39 - and any other case that might occur here
942:42 - we're just going to throw generic off
942:43 - exception
942:45 - and in here as well we're going to say
942:47 - throw generic with exception
942:50 - and
942:52 - thing i really like to do is you see in
942:54 - dart it's not yet possible to say that i
942:56 - want to ignore a variable in this case
942:58 - you can see that in this like where we
943:00 - have a catch
943:01 - we actually have to pattern match
943:03 - against an exception and then we have to
943:05 - assign a name to it and that name is
943:07 - called e inside this function so if i
943:09 - type e you can see it's an object
943:11 - however as you can see in the body of
943:13 - this function we're not actually
943:14 - interested in e at all we're not using
943:16 - it so in in other languages it is
943:18 - possible to ignore like in javascript
943:20 - python swift rust it is possible to
943:23 - ignore a variable and saying that hey
943:25 - i'm not interested in this value by
943:27 - putting something called like an
943:28 - underscore or something you can do the
943:30 - same thing in art the difference is that
943:33 - in dart if you say underscore you're not
943:34 - actually ignoring it that variable is
943:36 - also there but it's just called
943:38 - underscore in this case so you can see
943:40 - you can still call to string on it so
943:44 - you may want to do it or you may just
943:45 - want to leave it alone because you can
943:47 - see guard an analyzer it doesn't give
943:49 - you an error
943:50 - of any kind saying that yeah your
943:53 - pattern matching but you're not using it
943:54 - so it's up to you how you want to do it
943:57 - and i like to do it like this
944:01 - wow that was a lot of code um or maybe
944:03 - more like a lot of explanations so let's
944:05 - go to login and fold that and as you can
944:07 - see in the caption now we have to take
944:08 - care of the logout function and
944:10 - the caption also says that this function
944:12 - needs to be asynchronous okay
944:14 - and you know why because we're going to
944:16 - call a function on firebase in order to
944:20 - take care of the logouts
944:22 - so in order for a user to be logged out
944:24 - the user should actually exist so let's
944:26 - just say final
944:28 - user needs firebase off
944:31 - instance
944:32 - and then we're going to say current user
944:34 - and we say if user is not null
944:38 - and it's a user sign uh logout what's it
944:40 - called or what's it called
944:42 - oh we have to tell a firebase off so we
944:45 - then we say firebase
944:46 - off instance sign out
944:50 - the weight on it okay
944:52 - otherwise we say throw user not
944:57 - logged in
944:58 - so we're basically saying here that you
945:00 - cannot log out a user if that user
945:02 - doesn't exist okay or that user isn't
945:04 - logged in
945:07 - all right
945:09 - lots of code lots of description but
945:11 - that's okay we've now implemented an
945:14 - auth provider firebase auth provider
945:16 - okay
945:18 - which is a concrete implementation of
945:19 - auth provider
945:22 - now as the caption indicates here we
945:24 - need an auth service
945:28 - um now what is an auth service i
945:31 - mentioned this a little bit before but
945:33 - an auth service is also going to
945:35 - implement auth provider
945:38 - and
945:39 - in itself is going to take an instance
945:42 - of an auth provider as well
945:45 - but as you'll see in this chapter and in
945:47 - the rest of this um
945:49 - course you'll see that our
945:52 - our auth service is really just the
945:56 - provider itself which is
945:58 - exposing all the functionalities of the
946:00 - provider that we give it
946:02 - and it's not and it has absolutely no
946:05 - other logic at the moment okay but the
946:07 - reason we're doing that is for me to
946:09 - just to show you that you need to have
946:12 - providers and then you need to have
946:13 - services that they talk to each other
946:15 - and then this service can then expose
946:17 - more value to your user interface to
946:20 - your ui code than the provider does
946:23 - that's usually the case that the service
946:26 - fuses together
946:27 - a few other providers talk to few
946:30 - providers and at the end it grabs the
946:32 - data fuses together and provides that
946:34 - information to the ui now in our case
946:37 - that's not gonna be the case okay our
946:40 - firebit our auth service is only going
946:43 - to talk with our the given auth provider
946:46 - and expose all its functionalities to
946:48 - the ui but we're doing this exercise so
946:50 - that you see how you can abstract away
946:53 - various bits and pieces of functionality
946:55 - from the ui code so remember that that's
946:58 - the reason we have our auth service
947:00 - which we're gonna soon create okay
947:03 - so as a caption in the case here let's
947:06 - go ahead and create our odd service
947:07 - inside the auth folder here so auth and
947:10 - i'm going to create a new file here i'm
947:12 - just going to call it all service
947:16 - in this dart file then we need to create
947:19 - start creating our
947:22 - auth service okay
947:24 - sorry gonna go to my notes in here as
947:26 - well so
947:28 - what we need in here is to
947:30 - import a few things we need to import
947:32 - our auth provider and an off user so i'm
947:34 - not to explain this again so um package
947:38 - my notes
947:39 - and we have services off
947:41 - and we have and we need to import auth
947:44 - provider
947:45 - and copy this kind of code and then i'm
947:47 - going to say off news user i believe
947:52 - so
947:53 - um
947:54 - so let's have a look in here in the
947:56 - captions
948:00 - like that
948:01 - okay so we need to create now as you can
948:03 - see we need to create an auth service
948:06 - that also implements auth provider okay
948:09 - so
948:10 - um
948:11 - if i look at the captions here why is
948:13 - auth service an author provider i've
948:14 - already explained this to you but you
948:17 - can see it says but can have more logic
948:19 - so that's the reason okay so don't
948:20 - forget that so let's go and create a
948:23 - class of all service in here
948:26 - and it implements an off of the auth
948:28 - provider
948:30 - um abstract class okay
948:33 - now what you'll need to do what you need
948:36 - to know is that the auth service in
948:37 - itself isn't going to be hard coded to
948:39 - use the firebase auth provider
948:42 - what it's going to do is that it's going
948:43 - to actually take an audit provider from
948:46 - you
948:47 - and saying that okay i will then expose
948:48 - the functionalities from that auth
948:50 - provider to the outside world with the
948:52 - ability to maybe even change that data
948:54 - before it returns it to you but in our
948:55 - chapter and then the rest of this course
948:57 - it's not going to do that it's just
948:58 - going to expose the same auth providers
949:00 - functionality to the outside world so
949:02 - let's go ahead and as the caption says
949:05 - say we take an auth provider and we just
949:08 - call it provider okay
949:11 - we need to do then is to create a
949:13 - constructor
949:14 - for your auth servicing here so command
949:17 - dot on mac or control dot windows and
949:19 - linux and say create constructor for
949:21 - final fields and make it constant as
949:22 - well
949:24 - okay so now we have this beautiful
949:27 - little off service that takes the
949:28 - provider but as you can see it says
949:30 - missing concrete implementations and
949:32 - that's because we said our auth service
949:34 - is also an auth provider so we have to
949:37 - implement those auth provider classes
949:41 - overrides as well so let's add them in
949:43 - here as well but this time it's gonna be
949:46 - a lot easier uh to implement these
949:48 - functions because our because our auth
949:49 - service internally has a provider and
949:52 - all it has to do is just
949:54 - expose the functionalities of the
949:56 - provider in its own
949:58 - implementation all right
950:01 - so
950:02 - um
950:03 - as the caption also says we need to
950:04 - delegate then to our
950:06 - actual provider
950:08 - before we do that i'm going to do a
950:10 - little bit of a clean up here and i
950:11 - suggest that you do too and in places
950:13 - that we have more than one parameter
950:14 - let's go and put a comma at the end of
950:16 - the last parameter right here and there
950:19 - boom
950:20 - and
950:21 - that was it i'm going to do command s so
950:23 - that dart formatter formats the code a
950:25 - little bit better
950:26 - and let's just go and go ahead and
950:29 - expose the functionalities of our
950:31 - provider in our
950:33 - concrete implementations of the auth
950:36 - provider so in here we say provider dot
950:40 - creates user email and password perfect
950:44 - for the current user we return the
950:46 - provider's current user we say provider
950:50 - adopt current user
950:53 - for the login we then expose the
950:56 - providers login function we say provider
950:59 - login with that information
951:01 - and for our logout we do the same thing
951:05 - so i'm going to say provider logout okay
951:08 - and for sending you
951:10 - so say provider send email
951:14 - provider
951:16 - and notification great stuff that was uh
951:19 - that went really fast as you can see
951:22 - okay
951:25 - now
951:25 - um
951:27 - you see we've done a lot of code now if
951:29 - we go to our if if i change the screen
951:32 - layout a little bit better a little bit
951:34 - so you see the code better and let's go
951:36 - to our terminal the built-in terminal i
951:38 - absolutely love it in visual studio code
951:40 - that there is an integrated terminal
951:42 - and let's have a look at our git status
951:45 - you'll see that we have changed login
951:48 - view but also there is an entirely new
951:50 - folder here called lib services so if
951:53 - you then add all of that
951:56 - and to get status you'll see that we
951:58 - actually have done a lot of work so
952:01 - if i increase the size you see we've
952:03 - added all exceptions auth provider all
952:05 - service auth user and firebase auth
952:07 - provider
952:08 - plus the changes in the login view
952:11 - now
952:13 - um actually i don't know what did we
952:15 - change in login view
952:16 - so
952:17 - that's interesting to know if you go to
952:18 - the login view did we
952:20 - did we change anything in login view
952:22 - because at the moment i can't really
952:24 - remember if we change anything special
952:26 - in the login view
952:28 - so it would be interesting to actually
952:31 - see what we've done so if i go to my
952:34 - terminal here
952:35 - and
952:36 - if i issue this command as you can see
952:38 - here i'm going to remove that
952:40 - login view from the staging environment
952:43 - so like this
952:45 - paste it there
952:47 - and i'm gonna say git status and then
952:49 - i'm gonna say bit diff i can say okay
952:52 - the difference is that i
952:53 - have added firebase core in here
952:58 - which i don't see
953:00 - in the
953:02 - login view and also
953:04 - what's changed
953:07 - has this navigator been removed
953:12 - there's a lot of code in here that may
953:14 - have not been committed from the
953:16 - previous chapter that may be it so that
953:18 - may be the reason okay but that's all
953:20 - right as well so now let's get at all
953:22 - and let's then go to the next stage as
953:25 - you can see we've done a lot of work
953:27 - let's just make sure everything is
953:28 - committed this time okay so get status
953:31 - everything is added to the staging
953:32 - environment then i'm just gonna say git
953:34 - commit
953:37 - message and step eight this time
953:41 - and i'm going to push all those changes
953:43 - and get status i can see everything's
953:45 - committed great
953:46 - also let's tag our code because i
953:49 - believe the previous
953:51 - chapter we didn't tag anything but the
953:53 - one before that we tagged that step
953:55 - seven and that was chapter number 22
953:58 - where we talked about error handling in
954:00 - the registry and going to the next
954:01 - screen after registration so we didn't
954:03 - tag anything in the previous chapter so
954:05 - now we're going to tag things as step 8
954:08 - so let's just say git tag step 8
954:11 - i can spell here
954:13 - and it push tags as well
954:16 - if you can say git log you will see get
954:18 - step 8 is there step 7 every step is
954:21 - there an initial commit is there as well
954:23 - which is step one and if you say git tag
954:25 - you'll see all your tags available as
954:27 - well okay so
954:29 - we've committed and tagged we've done a
954:32 - lot of work in this chapter and i don't
954:33 - think we need to actually drag it on for
954:35 - longer because yeah it will be
954:37 - unbearable maybe if it's too long
954:40 - now
954:41 - as we usually do which is the tradition
954:43 - here before going to the next chapter we
954:45 - prepare ourselves for what is coming as
954:47 - you can see in the caches that we need
954:48 - to migrate our existing code to using
954:51 - our own auth service we have an auth
954:54 - service
954:55 - which abstracts away the provider and we
954:58 - have a firebase auth provider but we
955:00 - still are not using that code so that's
955:03 - exactly what we're going to do in the
955:04 - next chapter and if i look a little bit
955:07 - in my in my notes i can actually see the
955:10 - next chapter will also be quite a long
955:12 - one maybe not as long as this chapter so
955:15 - maybe you'll need a cup of coffee or tea
955:17 - so
955:18 - let's do that and without further ado
955:20 - i'll see you in the next chapter
955:22 - hello everyone and welcome to chapter 25
955:24 - of this flutter course
955:26 - in the previous chapter we talked about
955:28 - earth service and that was quite a big
955:30 - chapter we talked about cleaning up
955:32 - making sure that our authentication
955:35 - related code is in
955:37 - one central place we created the auth
955:40 - provider the firebase auth provider then
955:42 - we created
955:43 - our auth service
955:46 - and and we also ensure that
955:49 - both the service and the provider are
955:51 - conforming to the interface provided by
955:54 - our abstract class for authentication
955:58 - so um we call those the off service and
956:01 - the firebase auth provider and then our
956:03 - abstract class was called auth provider
956:07 - now we've done all that work but we
956:09 - haven't really even started using that
956:11 - auth service and that's what we're going
956:14 - to do in this chapter
956:18 - um
956:19 - the first thing that we have to do is
956:21 - actually
956:22 - making sure that we have easy access to
956:24 - our off service
956:26 - um you see the way we created the auth
956:28 - service let me
956:30 - bring the code here so we can all see
956:35 - change visual studio codes um
956:38 - layouts a little bit
956:42 - let's then have a look at our um let me
956:44 - see if i can resize this a little bit as
956:46 - well okay let's have a look here at our
956:49 - auth service you see that with the way
956:52 - that we created our off service is that
956:53 - it in its initializer or constructor
956:56 - however you want to call it um it is
956:58 - taking a provider so for us to be able
957:01 - to use our auth service every time you
957:04 - want to use our auth service we actually
957:06 - have to provide it with an auth provider
957:08 - which in our case is going to be the
957:09 - firebase auth provider which it resides
957:12 - right here
957:13 - so this could be cumbersome especially
957:15 - if you're working with firebase quite a
957:17 - lot in your user interface every time
957:18 - you want to use it then you need to say
957:21 - auth service initialize the auth service
957:24 - and then initialize your firebase auth
957:25 - provider and give that to your
957:28 - auth service so
957:30 - we don't want to do that every time
957:33 - and that is exactly why we need to
957:35 - create a
957:38 - factory uh
957:40 - initializer as you can see here in the
957:42 - uh
957:44 - in
957:45 - the captions so uh it says add firebase
957:47 - factory to officers and that's exactly
957:49 - what we're gonna do here
957:52 - so let's go to our auth service and as
957:55 - the code is provided for you just write
957:56 - it
957:57 - factory and i'm going to say auth
957:59 - service dot
958:01 - in firebase so the responsibility of
958:04 - this off service firebase factory here
958:07 - or sorry the the responsibility of the
958:09 - firebase uh
958:12 - factory here
958:13 - on our off service is to return an
958:16 - instance of our auth service that is
958:17 - already configured with a firebase auth
958:21 - provider so
958:23 - then we're going to say it returns an
958:25 - instance of auth service
958:27 - change the layout of the code here the
958:29 - screen as well so you can see it better
958:32 - and we're going to say firebase
958:34 - um
958:35 - auth provider okay
958:38 - so that's that um now you see i have a
958:42 - column here in visual studio code that
958:44 - tells me where the code is going to
958:45 - break some people even for one parameter
958:48 - in their uh dart code or flutter code
958:51 - they prefer to have a comma at the end
958:53 - of it so that it is ready to take new
958:55 - parameters in the future so if you do
958:57 - that then um
958:59 - dart format is going to break that code
959:00 - for you into multiple lines ready for
959:02 - you to enter the next parameter if
959:04 - that's your preference go for it but i
959:06 - have no preference here i just leave it
959:07 - like that when i have one parameter i
959:09 - just leave it in one line okay
959:13 - so
959:14 - before we actually go about uh starting
959:18 - to use our auth service we need to take
959:20 - a little trip back to the main dart file
959:22 - as the caption indicates here so you
959:25 - either go to the explorer but the way i
959:27 - usually like to do it is with command p
959:29 - and i say main dart and then i go there
959:32 - remember if you are linux or windows
959:34 - then you have to do control p okay so
959:36 - let's have a look at our main dar file
959:38 - and let's see if i can close these
959:40 - places firebase off firebase provider
959:43 - login the dart
959:46 - what did we change there save that as
959:48 - well let's go back to the main now so
959:49 - basically i just closed all the files
959:51 - uh because i just want to have them in
959:53 - our files so as the caption is
959:55 - is telling you here um our menu action
959:59 - and the notes view are right now spread
960:02 - just around in the main dart file and
960:03 - this is usually not a good idea because
960:07 - you need to as part of your journey into
960:08 - becoming a software developer you need
960:10 - to make sure that your code is clean and
960:12 - it's easy for other people to read now
960:15 - i'm not saying i mean i'm not a true
960:17 - true believer that the code has to be so
960:20 - easy to understand that even if you grab
960:22 - a random person from the street they
960:23 - have to understand the code because
960:25 - sometimes you need to make sure that
960:27 - the person looking at your code has a
960:29 - certain level of knowledge from before
960:32 - but with all that said you need to make
960:34 - sure that your code is easy to
960:35 - understand and read so
960:38 - let's make sure that the menu action and
960:40 - notes view are refactored and that
960:42 - they're in the right place and not just
960:45 - spread around in main dart file
960:48 - so as a caption indicates we're going to
960:50 - move our menu action into
960:52 - a new new folder called enums inside lib
960:56 - and the file name is going to be menu
960:58 - action dot dart and
961:00 - the caption was a little bit wrong it
961:02 - shouldn't be dark 10 it should be dart
961:04 - so i'm going to save the caption and
961:07 - bring it back up so it's with the right
961:10 - file extension
961:13 - so let's go and create that file i'm
961:16 - gonna go here into lib i'm gonna right
961:19 - click on lib and i'm gonna say new file
961:21 - and in the new file i'm just going to
961:22 - type ins
961:24 - and
961:25 - bring it up as well so you see it better
961:28 - or you see it at all enums and then menu
961:31 - action. okay
961:33 - excuse me
961:35 - let's just go and grab that menu action
961:37 - from there and paste it inside this menu
961:39 - action and save that file okay don't
961:42 - worry main.dart at the moment has a
961:44 - problem because menu action doesn't
961:45 - exist here anymore so we're getting some
961:47 - errors and that's okay we're gonna fix
961:48 - that
961:50 - so let's go now to our um
961:54 - to the main dark file again and we have
961:57 - to clean up this notes view and as the
961:59 - caption in the case we're going to move
962:00 - it into
962:01 - lib views notes view okay we already
962:04 - have the views folder remember from
962:06 - before all we're going to do is just to
962:08 - move this notes view into its own file
962:11 - so i'm going to right right click on
962:12 - views and i'm going to say
962:14 - notes view dot darts
962:18 - okay let's go to main guard grab the
962:21 - notes view and it's state so from there
962:24 - notes view stateful widget and i'm gonna
962:26 - grab all of that
962:28 - and
962:29 - we're gonna even
962:31 - take the show log out dialog with it
962:36 - and bring it
962:37 - to note2 and paste that there okay so
962:40 - now we have a lot of problems because uh
962:42 - in an empty dart file as i've mentioned
962:44 - before there's no material import so i'm
962:48 - going to do the material import now so
962:49 - command dot and say import library
962:52 - package flower material and that is
962:54 - going to fix those import
962:56 - those errors for you
962:58 - now this file doesn't have it hasn't
963:00 - imported
963:02 - uh menu action so let's fix that as well
963:04 - with visual studio command dot and get
963:06 - help from visual studio code to
963:08 - automatically import our menu action
963:11 - dart file okay
963:14 - so that is also fixed and also remember
963:17 - now in notes view also right now is
963:21 - using firebase off and we're going to
963:23 - fix somebody into this chapter so that
963:25 - note2 isn't or any of our views none of
963:28 - them are going to talk directly with
963:29 - firebase so that's going to be fixed by
963:31 - the end of this chapter
963:32 - but for now let's go ahead and clean
963:34 - this up and make sure that firebase auth
963:36 - is imported and also remember login
963:39 - route was used here when we log out of
963:43 - the main interface of the application so
963:45 - when we log out then it sends us back to
963:48 - the login route and that is defined in
963:51 - our routes
963:53 - dart file here so let's import that too
963:56 - excuse me
963:58 - all right so that was a lot of work
964:00 - we've we've done that now so we're done
964:02 - so i'm going to save this notes view dot
964:04 - dart
964:07 - and
964:08 - now as the the case we need to go back
964:09 - to the main dart and remedy this issue
964:12 - which we have and we need to import
964:14 - notes view uh get help from visual
964:16 - studio code or your favorite editor or
964:18 - if you don't have this functionality in
964:20 - your editor if you're using vim or
964:22 - something you may just need to import
964:24 - that by hand and the import is just the
964:25 - package name of your application views
964:28 - notes view okay so i'm gonna
964:31 - get help from visual studio code to do
964:33 - that
964:34 - great
964:36 - so
964:37 - um
964:39 - now let's have a look at something that
964:41 - we actually forgot in the previous
964:43 - chapters
964:44 - um you see we've done everything in our
964:46 - off service if you have a look at our
964:49 - auth service it has almost all the
964:51 - functionalities that we need it has
964:53 - create view sorry create user it has
964:55 - current user it has login log out and
964:58 - send email verification but there's one
964:59 - detail that we forgot about let's go to
965:02 - main dart and have a look at it
965:04 - you can see in here our entire main dart
965:08 - uh
965:09 - like the home page build function is
965:12 - built around a future builder that i i
965:15 - know i'm saying build quite a lot maybe
965:17 - i should say it's revol it's revolving
965:19 - around a future builder which in turn
965:21 - initializes firebase you see it calls
965:24 - firebase initialize app and now that we
965:26 - want to move away from our user
965:29 - interface
965:30 - interacting directly with firebase we
965:33 - also need to remedy this
965:35 - this user interface it shouldn't go to
965:37 - firebase directly it should ideally go
965:40 - to our
965:42 - off service
965:44 - and that's what the caption says
965:47 - so let's now go to our
965:51 - auth provider abstract class so let's
965:55 - close all these files make sure
965:56 - everything is saved
965:58 - let's go to our off provider
966:00 - and make sure that we have a function
966:02 - there
966:03 - and let me actually bring up my notes
966:07 - that says initialize so
966:10 - we're going to say future void
966:12 - initialize okay
966:14 - remember now that we've added this
966:16 - function to our auth provider we're
966:17 - going to have problems because both the
966:19 - firebase auth provider and auth service
966:22 - they're they're conforming currently to
966:24 - the author provider abstract class and
966:26 - adding a new function to this abstract
966:28 - class means that we're gonna get two
966:30 - errors indicating that this function
966:33 - isn't implemented in firebase auth
966:35 - provider and in our auth service so we
966:37 - need to fix those problems you can see
966:39 - they're actually highlighted as red here
966:44 - okay um
966:47 - let's go then to the next caption
966:52 - and i'm gonna get rid of that bottom
966:54 - view so it doesn't bother us so let's go
966:57 - now as you can see in the firebase auth
966:58 - provider and overwrite initialize and
967:00 - make it async and call initialize app on
967:04 - firebase
967:05 - so to in order to do the firebase
967:08 - initialize code we need to have a look
967:10 - at our main dart and see how that is
967:11 - done at the moment you can see it is
967:13 - called firebase initialize app so i'm
967:15 - gonna grab that code and i suggest that
967:17 - you do the same thing i'm just gonna
967:19 - copy that code for initialize app
967:22 - and let's then go to our firebase auth
967:25 - provider
967:27 - and get help from visual studio code or
967:29 - android studio in order to complete that
967:30 - one missing override for initialize
967:32 - function
967:33 - and i believe it gets added here
967:35 - somewhere
967:37 - or it didn't
967:39 - where did it go
967:41 - we should have an initialize a missing
967:44 - concrete
967:46 - create one missing override initialize i
967:49 - still don't see the missing
967:55 - i'm gonna do that here myself future
967:57 - void initialize like this okay
968:01 - and uh what we're gonna do as the name
968:03 - indicates it's gonna be an async
968:05 - function here and what we need to do is
968:07 - just to save firebase initialize app so
968:11 - um
968:12 - and we're gonna await on this so like
968:14 - that
968:15 - and remember we have we need to have two
968:18 - imports here and one is for the firebase
968:21 - and the other one is default firebase
968:22 - options so let's get help from visual
968:24 - studio code to import those firebase
968:26 - core
968:27 - and import
968:29 - firebase options dark file which if you
968:32 - remember when we set up firebase
968:34 - initially was brought into our
968:36 - application from the firebase cli so
968:39 - is is not a file that we've created
968:40 - ourselves except it's the firebase cli
968:42 - that created this for us okay
968:46 - here now it says annotate over members
968:49 - and that's exactly what we need to do so
968:50 - let's just say
968:51 - over
968:53 - right like this and now we have
968:55 - initialize uh over member of our author
968:58 - provider inside firebase author provider
969:01 - so
969:01 - basically all we're saying is firebase
969:03 - auth provider implements initialize
969:05 - function and it has actual
969:07 - implementation okay
969:10 - all right we have one error left and
969:12 - that is inside auth service so let's go
969:14 - to auth service
969:17 - and we'll have the exact same problem
969:19 - here and says missing concrete
969:20 - implementation so i'm gonna see if i can
969:23 - get visual studio code to add that
969:25 - implementation and it added it here
969:27 - initialize okay
969:29 - so in here what we have to do is just to
969:32 - delegate this function to the actual
969:34 - provider so we're going to say provider
969:38 - and we're going to say initialize just
969:40 - like that all right so this was the easy
969:43 - one
969:44 - and if you don't remember from the
969:45 - previous chapter or maybe you jumped
969:47 - over the previous chapter i don't know
969:48 - how you ended up in this chapter if you
969:50 - haven't watched the previous chapter i
969:52 - strongly suggest that you do that there
969:54 - is a reason we have our off service that
969:56 - implements auth provider
969:58 - and the reason behind that is that
970:00 - usually services have more logic in them
970:03 - than what they
970:05 - bring into themselves so if a service
970:07 - has two other services connected to
970:09 - itself then it may actually take bits
970:12 - and pieces from the service and other
970:13 - bits and pieces from another service and
970:16 - fuse them together with some extra logic
970:18 - and that is exactly why the author
970:20 - services as an odd provider so the goal
970:23 - for us is to allow the officers to do
970:25 - more work than an author provider even
970:27 - though right now only thing it does is
970:29 - just delegates all its functionality to
970:32 - the auth provider and remember you could
970:34 - also see make sure that i mean if you
970:36 - don't like this implementation you can
970:38 - for instance remove this and then
970:41 - basically remove all these functions and
970:44 - by doing that you're just saying that an
970:46 - auth service includes an off provider
970:48 - and that's all you're doing or you could
970:50 - completely kill you your off service so
970:53 - it's up to you but if you're following
970:55 - along with this uh with this course i
970:57 - suggest that you keep it the way it is
970:59 - because there's a there's a point to it
971:01 - so
971:03 - okay
971:04 - now that we've done that uh it's time to
971:07 - do some cleanup and this is this is a
971:09 - very exciting part of this uh
971:12 - chapter because we now have our auth
971:14 - service and our firebase auth provider
971:17 - and in and additionally we have an off
971:20 - service firebase factory which allows us
971:22 - to anywhere inside our code we could
971:24 - just say autoservice.firebase
971:26 - and in that way we get access to
971:29 - our um firebase auth provider inside the
971:32 - auth services so it's it's really
971:35 - magical you're gonna see it soon
971:37 - so i'm going to close all files here
971:39 - ensure everything is saved then as the
971:41 - caption indicates i'm going to go into
971:43 - main art file
971:47 - main dart
971:49 - and as you can see it says remove
971:51 - everything related to firebase and
971:53 - replace with auth service by importing
971:56 - auth service okay so one way of doing
971:59 - that is just to ensure that you go and
972:01 - kill it from the source so you can see
972:03 - here we have two firebase imports and if
972:06 - you remove these two firebase imports
972:08 - which is
972:08 - my preferred way of usually working with
972:10 - software is that i try to like remove
972:13 - something from its source so now that
972:15 - i've removed those then visual studio is
972:17 - telling me that hey you're using
972:19 - firebase in two places you need to fix
972:22 - this because you don't have the imports
972:23 - then i know okay
972:24 - here are the two places that i have to
972:26 - do my refactoring in okay
972:28 - so
972:29 - as you can see here it says firebase
972:31 - initialize app and we need to make sure
972:32 - that we're not doing that anymore so
972:34 - we're just going to say
972:36 - in this case our future remember is um
972:40 - it's auth service and since i haven't
972:43 - imported that yet visual studio is
972:45 - offering to auto import it so i'm gonna
972:47 - say yes please
972:49 - um it's auto imported now but if you
972:51 - don't wanna if you're you're working
972:52 - with vim or some other a text editor
972:55 - that doesn't have that capability you
972:57 - could
972:58 - import that in
973:01 - this way
973:03 - per package the name of your package
973:04 - services off auth service dart
973:07 - and i just noticed that this is another
973:09 - firebase import which i'm going to
973:11 - remove now
973:12 - excuse me
973:14 - so auth service now we want to tell
973:17 - because we're using firebase we're going
973:19 - to say auth service dot firebase and in
973:22 - here we're just going to say initialize
973:24 - okay so that fits in perfectly
973:27 - and in here
973:29 - you can see we're using firebase um
973:32 - instance firebase auth instance current
973:35 - user in this case we're just going to
973:36 - say uh off service
973:40 - dot our base man current user just like
973:43 - that okay and now remember odd i talked
973:46 - about this in previous chapters but
973:48 - i prefer to have boolean flags prefix
973:50 - with the word is
973:53 - whenever that makes sense and in this
973:54 - case you can see firebase implementation
973:56 - had email verified but we have is email
973:58 - verified so i'm going to say is email
974:00 - verified like that
974:02 - all right
974:03 - and s or control x and linux and windows
974:06 - a command is on on mac to save this file
974:09 - and
974:10 - it looks fine right now but we're not
974:12 - really done um
974:14 - we also have problems in our login view
974:18 - i mean problems not errors or warnings
974:21 - but problems in that we're using
974:23 - firebase directly and we're going to the
974:26 - firebase auth directly in our login view
974:29 - and we need to fix as you can see the
974:31 - caption system login view remove
974:32 - firebase and replace with off service
974:35 - okay
974:37 - so let's go to uh to the source and
974:40 - remove firebase completely from
974:44 - your login view
974:46 - command s and now you'll see we have a
974:48 - lot of problems here and one two three
974:51 - yep that was it so three three places
974:55 - that we need to fix
974:57 - so let's go ahead and fix those places
975:00 - because yeah um
975:02 - there's a lot to handle here so we start
975:05 - by this one at the moment we're saying
975:06 - firebase off instant sign in with email
975:08 - and password
975:10 - and what we need to do is just to uh
975:12 - call our off service
975:14 - so we're gonna say auth service and
975:18 - auto imported
975:20 - and auth service has firebase auth
975:22 - provider and we're then gonna say assign
975:26 - in or do we say login yeah email
975:29 - password okay so i'm gonna i'm gonna
975:31 - take this code the way it is
975:33 - and i'm not paste then them in
975:36 - here
975:38 - so now we're saying auth service
975:39 - firebase login okay
975:43 - then we're seeing here that we're
975:45 - getting the current user and the right
975:47 - way now to get the current user is by
975:49 - saying off service
975:51 - dot firebase current user
975:54 - and email verified should be ms email
975:56 - verified okay so now we fix those
975:58 - problems in this area by going to all
976:02 - the search instead of going directly to
976:04 - firebase
976:07 - okay that was that now we need to start
976:10 - looking a little bit at our error
976:13 - handling and
976:15 - you can see here we have on firebase off
976:18 - exception
976:20 - so we need to fix these with various um
976:24 - other
976:25 - exception handlings not firebase auth
976:28 - exception
976:29 - but now remember we have our own
976:32 - exceptions in auth exception start
976:36 - and
976:37 - these are
976:38 - all coming from exception but what we're
976:40 - going to do is we're going to have like
976:42 - on
976:43 - blah blah for various of those
976:45 - exceptions as you'll see soon so um i'm
976:48 - gonna what i'm gonna do is i'm gonna
976:51 - take this code and keep it the way it is
976:54 - like that
976:56 - and i'm going to add new on statement so
976:59 - um
977:00 - let's take care of user not found so i'm
977:02 - going to say on user not found exception
977:04 - and you can see that it says user not
977:06 - found exception is an exception that we
977:08 - created manually but it's not imported
977:09 - here because it was inside the auth
977:11 - exceptions dart file so i'm going to say
977:13 - visual studio code please complete that
977:15 - and also import it for me okay
977:17 - so say in this case then we have to do
977:21 - show error dialog so grab that code and
977:24 - place it here okay
977:28 - then we're going to say
977:29 - on
977:31 - what else do we have wrong password
977:33 - because it's this thing i'm going to say
977:36 - on wrong password of exception
977:40 - and go in here and grab then your show
977:43 - error dialog from here
977:45 - and place it there
977:46 - okay
977:48 - that
977:49 - and then we also need to have the on
977:51 - generic auth exception so on generic
977:55 - auth exception
977:56 - and we do this show error i like
977:59 - the way it is here
978:02 - so then we go and bring that here and
978:04 - you can see on generic error off
978:06 - exception we don't have any specific
978:08 - like information like any e or anything
978:10 - to string so all we're gonna do in here
978:12 - we'll just say we're gonna say
978:13 - authentication error
978:15 - okay and then you need to go and remove
978:18 - the other
978:19 - catch blocks so your code should
978:22 - basically look like this
978:25 - okay so a try block and then three
978:28 - special exception handlings one after
978:32 - the other
978:34 - great command s on your login view now
978:36 - you shouldn't have any problems in your
978:39 - login view and there's no import of
978:41 - firebase in your login view just as it
978:44 - was in the main dart file let's just
978:46 - make sure that there's no firebase
978:48 - import here either firebase
978:50 - yeah firebase yeah no imports of
978:53 - firebase great
978:55 - [Music]
978:57 - and as the caption now says we need to
978:59 - go to register view and remove firebase
979:02 - and replace with auth service now that
979:03 - we've done the same exercise now for
979:06 - login view you should now know basically
979:09 - what we're gonna do in register view
979:10 - we're gonna go to pretty much the exact
979:12 - same thing we did in login view except
979:14 - in registry removing firebase from the
979:16 - imports get all the errors that we're
979:19 - going to get and after we get those
979:21 - errors we're going to fix the problems
979:23 - in register so let's go ahead and do
979:25 - that
979:27 - let's go to our imports there's firebase
979:29 - imported right there we're going to
979:30 - remove that now we have
979:32 - probably quite a lot of errors yeah
979:35 - that's good
979:37 - and let's go then and fix that i'm going
979:39 - to go to my notes just to ensure that
979:41 - i'm following all the
979:44 - notes that i was supposed to tell you
979:46 - about
979:48 - then
979:48 - we don't create user with email and
979:50 - password in our auth server so let's
979:52 - just say all service
979:54 - and it's not imported so let's auto
979:56 - import it dot firebase and we're gonna
979:59 - say sign and what do we call it create
980:01 - user email and password
980:05 - on the end of the last parameter grab
980:07 - the code and replace your firebase auth
980:10 - create user email and password with our
980:13 - auth service create user
980:16 - okay
980:17 - and in the place where we're getting the
980:19 - user let's then say auth service
980:23 - firebase and we're gonna say current
980:25 - user
980:27 - and now we have send email verification
980:30 - but i think we called it some something
980:31 - else we said
980:34 - and
980:35 - oh we didn't implement the send email
980:37 - verification or did we
980:40 - let me go to auth service
980:43 - and
980:44 - um send email verification yeah it is
980:46 - right there so i'm gonna oh i see
980:49 - because previously
980:51 - what was happening is that
980:53 - firebase implements send email
980:55 - verification at the user level but we
980:58 - don't have we don't want that anymore
981:00 - and our user doesn't have that
981:02 - functionality actually our user has just
981:05 - a boolean flag
981:06 - so what we need to do in here we're
981:08 - going to ask our service to to send that
981:10 - email verification so we're going to say
981:13 - fire and auth service
981:15 - and this send email verification just
981:18 - like okay
981:21 - all right
981:22 - then we need to fix these exceptions as
981:24 - well because as you saw in the login
981:26 - view we don't have firebase auth
981:27 - exception in this case like we've
981:29 - removed the ui's
981:32 - ability to talk directly with firebase
981:34 - by removing all the imports so now we
981:36 - need to make sure that we handle
981:37 - exceptions just like we did in the login
981:39 - view okay
981:42 - so let's go ahead and say
981:44 - um
981:45 - on
981:47 - each password because i think that's the
981:48 - first one that we handle so
981:50 - um i mean you see almost the entire
981:53 - screen is now red and that's one of the
981:54 - downsides of using the extension that i
981:56 - talked to about during one of the first
981:59 - chapters of this
982:00 - course where i'm using an extension
982:02 - called air lens and air lens extends and
982:05 - expands all the errors that would
982:07 - otherwise just happen with little icons
982:09 - next to the lines it's expanding them
982:12 - into their own separate lines and it
982:15 - kind of makes the code look a little bit
982:16 - angry at times when you're making
982:19 - drastic changes to your code but don't
982:21 - worry about it just have a look at your
982:23 - syntax and kind of see that yeah i'm
982:25 - kind of doing the right thing i'm going
982:27 - to fix it soon so don't be intimidated
982:28 - by all these red
982:30 - flags in here okay or these red lines
982:34 - so let's handle weak password exception
982:38 - now it's going to be a little bit
982:39 - quieter here okay
982:41 - then grab your show error dialog
982:43 - from there and that's for a week
982:45 - password
982:46 - put it here
982:48 - like that and um
982:51 - then we need to handle
982:53 - um our
982:54 - email already in use
982:57 - on email already in use off exception
983:01 - and we're gonna then take the code from
983:03 - email already and use which is just a
983:05 - shorter dialog right there put it there
983:07 - okay
983:10 - like that um
983:12 - and we need to also handle
983:15 - invalid email so i'm gonna go in here
983:18 - and say on invalid email off exception
983:22 - let's grab the code from invalid email
983:25 - off exception
983:27 - and
983:30 - and and that part is done as well
983:33 - also we need to have on generic als
983:35 - exception so let's go in here and just
983:37 - say on generic auth exception
983:40 - and let's just handle that
983:43 - shoulder dialog
983:45 - and actually this is what we did for the
983:47 - generic auth exception so i'm just going
983:49 - to grab that code
983:50 - put it there and since on generic off
983:53 - exception we're not accepting any e so
983:56 - we're not saying on catch like e like
983:59 - that we could have done that but we're
984:01 - just ignoring completely at the e and in
984:04 - here and we're just gonna say failed to
984:06 - register
984:07 - and then let's clean up the rest of the
984:09 - code remove the other cat statements
984:10 - okay so your code basically is going to
984:13 - look clean like this now so you have a
984:14 - try block and then you say okay i'm
984:17 - trying this code right here create user
984:19 - if weak password auth exception happens
984:21 - do this if email is already in use do
984:24 - this if invalid email do this or any
984:27 - other auth exception do this so
984:30 - it looks cleaner in my eyes at least the
984:33 - way we've done it now than the way we've
984:34 - done it before in that before we were
984:37 - going to firebase and firebase do this
984:39 - do that on firebase auth exception do
984:41 - this otherwise
984:43 - so now the only thing we're doing is
984:45 - going through our
984:47 - auth service and handling
984:50 - auth related exceptions and that's it
984:54 - okay all right um
984:57 - now that we've we've done our work in
985:00 - the register you can see there's no
985:02 - errors in the register we need to go to
985:04 - notes view
985:06 - as the caption indicates so i close
985:08 - register view now let's open up our
985:10 - notes view
985:12 - and see what we are doing with firebase
985:15 - and notes view so do the same thing like
985:17 - we did before remove firebase as one of
985:19 - your imports so you get the you get the
985:22 - idea like an overall idea of what is
985:25 - happening in here and how we're using
985:26 - firebase and i can see the only place
985:28 - where using firebase in notes view is
985:30 - firebase off instance sign out that's
985:33 - good it's just one place but we have to
985:34 - fix that too so
985:36 - let's then go um sorry i'm just gonna
985:38 - bring up my notes as well um we're in
985:41 - notes view
985:43 - okay
985:45 - so let's just then go to um
985:48 - here and we're gonna we're just gonna
985:50 - say off
985:52 - auth service
985:54 - all right and then we're going to say
985:56 - log out i think we call it and we need
985:58 - to wait on it okay
986:00 - like that
986:01 - and
986:03 - it's bad so what we could do now
986:06 - we've removed firebase from there as
986:08 - well
986:09 - and let's then go
986:13 - as the caption indicates we need to now
986:14 - go through the entire app and make sure
986:16 - that everything is working as expected
986:19 - but before we do that let's have a look
986:21 - at our views and make sure none of them
986:23 - is importing firebase so i can see login
986:26 - view is not importing anything related
986:28 - to firebase meaning that it's not using
986:29 - firebase let's go to notes view
986:32 - no imports related to firebase either
986:34 - not using firebase
986:36 - or at least not using firebase directly
986:38 - remember it's using firebase but through
986:40 - our auth service okay so no imports from
986:43 - firebase here either and we have our
986:46 - verify email view which at the moment i
986:49 - can see
986:52 - verify email view oh i see that we
986:54 - haven't clean up our verify email view
986:57 - and that's something that we also need
986:58 - to do so we forgot about that let's
987:00 - let's take care of that okay
987:02 - so let's go in here and
987:05 - remove this firebase auth from here as
987:07 - well
987:10 - i'm gonna go to
987:12 - my notes here
987:15 - okay
987:16 - so let's have a look at that now let's
987:18 - say that uh send email verification
987:21 - shouldn't be there so let's just then
987:23 - say fire off service
987:26 - um
987:28 - firebase oops firebase
987:31 - a current user and i can see you see
987:33 - here it was using the current user just
987:36 - to send the email verification but we
987:37 - don't do that anymore we just
987:39 - because send email verification is not
987:41 - at a user level anymore when we've
987:42 - developed our off service remember so
987:44 - we'll just say send email verification
987:46 - like that await
987:47 - all right
987:48 - and then remove those two lines of code
987:50 - which were just getting the user and
987:52 - sending an email verification remove
987:53 - those
987:55 - and and to answer you i hadn't planned
987:57 - for this i can actually see in my notes
987:59 - i hadn't uh
988:01 - fixed the verify email view and that's
988:03 - why i'm not showing it in the captions
988:04 - and that's completely okay i have to
988:06 - improvise as well sometimes so
988:09 - let's then go ahead in here in them
988:12 - in the text button that says restart as
988:14 - you can see here that needs to just sign
988:16 - the user out so let's just say off
988:18 - service
988:20 - base log out and make sure that you wait
988:23 - on it okay just like that and remove
988:26 - this line of code as well so verify view
988:28 - now doesn't have any imports to uh from
988:31 - firebase either
988:32 - and i believe those were
988:34 - are
988:35 - all of our views except for also main
988:38 - let's make sure there's no firebase
988:39 - imports here either
988:41 - perfect so now we're done with this and
988:44 - what we could do as the caption in the
988:45 - case we're going to do a hot a restart
988:47 - here
988:50 - and let's see if things are working yeah
988:52 - and i'm just going to say restart here
988:54 - and let's see
988:56 - the current state of the application i'm
988:58 - going to bring up a firebase console
989:01 - go to my notes application here
989:03 - authentication and i can see i have two
989:06 - users here okay so i'm gonna i'm just
989:08 - gonna say pixelityab.gmail.com
989:11 - foobarbass
989:13 - and let's say register and then it
989:15 - should give us an error saying email is
989:17 - already in use so email is already in
989:19 - use let's go in here and say pixelityab
989:24 - gmail.combarbaz and i remember from the
989:25 - previous chapters this is a user that's
989:27 - already verified his um email address so
989:30 - by pressing login we should actually go
989:32 - to the main ui of the application so
989:34 - logout should work as it did before
989:36 - and let's go then to
989:38 - the
989:39 - uh and try to log in with the user
989:42 - and that's i think hasn't
989:44 - uh
989:45 - verified his email address so
989:48 - you can see then we're getting sent here
989:50 - verify email and then we can press the
989:52 - send email verification which in turn
989:53 - then sends the email and to the user
989:58 - so
989:59 - that was a lot of information and
990:02 - some improvised edition as well in this
990:04 - chapter for the verify email view that i
990:06 - hadn't planned for so it's good for me
990:08 - to know as well that sometimes i can
990:09 - miss things as well but now we haven't
990:11 - missed it during talking about it in
990:13 - this chapter
990:14 - so
990:15 - let's now
990:17 - wrap up this chapter we've done quite a
990:19 - lot and the main goal of this chapter is
990:21 - now
990:22 - we've achieved that because we wanted to
990:24 - go away from using firebase directly in
990:26 - our ui and going away from that using
990:29 - our auth service for everything related
990:31 - to firebase and that's achieved so
990:34 - very well done
990:35 - now what we need to do is as we're doing
990:37 - in other chapters we need to uh commit
990:40 - and tag all the code that we've done
990:42 - because it would be
990:43 - horrible if we
990:44 - lost all this code for some reason
990:47 - so let me change the um layout of the
990:50 - screen here
990:51 - and i'm going to make the
990:54 - browse the editor a little bit bigger so
990:56 - you see it better and i'm going to go
990:58 - into the terminal which i absolutely
991:00 - love in visual studio called the
991:01 - integrated terminal and you can see that
991:04 - in the previous chapter we had committed
991:06 - and tagged our code as step that's step
991:08 - eight now we need to commit as step nine
991:11 - first let's have a look at status and
991:13 - get add all
991:15 - status and we say git commit and we say
991:18 - step nine okay
991:22 - and then we say git tag
991:26 - nine as well and we first push our
991:29 - commit
991:30 - and we say good push tax
991:34 - all right that's pushed as well
991:37 - well done great job we are done with
991:39 - this chapter and as it is uh for the
991:42 - case for other chapters i've talked
991:43 - about we usually talk about what we're
991:45 - gonna do in the next chapter at the end
991:46 - of the current chapter so
991:48 - we're done with auth service it's
991:50 - working fine
991:51 - but what we don't have are some um tests
991:56 - you see
991:58 - there are three different types of tests
992:00 - that you can write in flutter
992:03 - unit tests integration tests and widget
992:06 - tests now
992:09 - a unit test is where you for instance
992:11 - try to take
992:13 - your current off service and then you uh
992:17 - want to just say okay auth service log
992:19 - in register do this do that and
992:22 - given this condition i expect you to do
992:24 - this now our auth service is working
992:27 - quite well but
992:28 - we can't be 100 sure that it is working
992:32 - as it should and let's say you're
992:34 - working inside a team and there are
992:36 - three other people working on the same
992:38 - code base with you and you work on the
992:40 - auth service and then you committed
992:42 - everybody reviews the code or
992:44 - the way i like to do my code is to a
992:47 - pair program or mob program so there's
992:49 - no code reviewing because everyone's
992:51 - working on the same code at the same
992:52 - time so it depending on how you're
992:55 - working inside your team then you send
992:57 - your code then two weeks later a new
992:59 - developer comes in changes your auth
993:01 - service
993:02 - and to and they change the service that
993:05 - it makes sense to them but then they
993:06 - break your code so maybe for instance
993:09 - email verification
993:10 - screen stops working because they change
993:12 - the code so that it's not executing the
993:15 - logic the way you thought it should
993:17 - execute the logic so that's why we need
993:19 - tests to verify that our
993:22 - um
993:23 - the way we design software is actually
993:27 - uh is the way that it should perform its
993:30 - work so that it's not missing any points
993:32 - and
993:33 - that's what we're going to do in the
993:34 - next chapter so
993:36 - um grab some refreshments and i'll see
993:39 - you in the next chapter
993:41 - hello and welcome to chapter 26 of this
993:44 - flutter course
993:45 - in the previous chapter you saw that we
993:47 - started using our auth service in
993:50 - our user interface code so we're not
993:52 - going against
993:54 - firebase directly so we removed all the
993:57 - imports
993:59 - to firebase in our user interface
994:02 - files in the login register
994:05 - main dart file and um
994:08 - notes view and
994:10 - also verify email view
994:13 - and we have a good working auth service
994:16 - however what we're missing are some
994:18 - tests and tests are one of my absolute
994:21 - favorite topics when i talk about
994:23 - software development because
994:25 - they make your code a lot more robust
994:27 - than
994:29 - just writing the code and leaving it in
994:30 - there and i understand some software
994:32 - developers may
994:34 - look at things as black and white
994:36 - saying that you have to have codes or
994:38 - you don't have to have codes but i'm
994:40 - more of a grayish person in
994:43 - thinking that well you have to be
994:45 - realistic sometimes you if you're for
994:47 - instance writing an application for
994:48 - yourself in a hackathon for instance and
994:51 - in in your you're in time pressure and
994:53 - you just want to get something out well
994:55 - that's not the right place to write a
994:57 - unit test if you're in a hackathon
995:00 - but if you're working with a company and
995:02 - they and you're getting paid to write
995:04 - good software and you're getting paid to
995:06 - write your tests as well to make sure
995:08 - everything's working out as it should
995:09 - especially if you're a back-end
995:10 - developer software like a front-end
995:12 - developer
995:13 - then you will need to ensure that your
995:16 - code is tested properly so
995:20 - i'm going to bring up the caption
995:22 - here
995:23 - about why we actually need tests and
995:27 - especially unit tests
995:29 - um and we're going to talk about the
995:31 - different types of tests in a while but
995:34 - let's just talk about unit tests um i
995:36 - mentioned in the
995:39 - like the outro to the previous chapter
995:41 - about what unit tests are
995:43 - and why we need them and
995:45 - for me the main reason having a unit
995:47 - test is to ensure that if you if you
995:49 - think here's the auth provider we left
995:52 - it in a state that well it's working
995:54 - okay code codes on code working so
995:57 - it's working but what if a new developer
996:00 - comes into the project and
996:02 - tries to change some code so that it
996:04 - works for her or for him
996:06 - but unintentionally changes it changes
996:08 - the code so that it's not working for us
996:10 - the way that we intended it so
996:13 - that's why that's one of the reasons we
996:15 - have unit tests okay
996:17 - um so that's what we're going to do in
996:18 - this chapter and i completely understand
996:20 - that this you if you're watching this of
996:23 - course you're probably sitting somewhere
996:24 - in a calm area a calm room and you're
996:27 - watching this course yourself it's the
996:29 - chat i think the chances of you watching
996:31 - this course with a group of people are
996:33 - quite slim so
996:35 - um and chances are you're just following
996:37 - along with the course and you're trying
996:38 - to write an application or release it to
996:39 - the app store or play store and play
996:41 - store
996:42 - so
996:43 - maybe you're not so interested in making
996:45 - sure that your auth service is actually
996:47 - tested and i completely understand that
996:48 - but i'm basically designing this course
996:51 - for people who are trying to become also
996:53 - good software developers so if you're
996:55 - coming as i've mentioned like one of the
996:56 - personas that i developed this course
996:58 - for are designers so if you're a
997:00 - designer have no background in flutter
997:02 - development you may also be interested
997:04 - in writing tests for your application
997:07 - especially if your goal is to go into a
997:09 - bigger organization and actually get a
997:11 - job as a flutter developer or as a
997:12 - software developer so
997:14 - given that background you should know
997:17 - what tests are what unit tests are
997:18 - integration tests are and what for
997:21 - instance widget tests are in flutter
997:25 - now i need to also mention that
997:27 - there's something called a tdd or test
997:30 - driven development and
997:32 - the right way of actually
997:34 - doing test driven development is to
997:37 - first
997:38 - write the tests and then you write your
997:41 - software at the moment we're doing it
997:42 - the exact opposite because i didn't want
997:44 - to complicate uh things as we're going
997:47 - because i have this as i said i designed
997:48 - this course for someone who's probably
997:49 - new to flutter development or software
997:51 - development in general so like going
997:53 - into test development test driven
997:54 - development directly and then writing
997:56 - our off service probably would have
997:58 - complicated things more so in for the
998:00 - sake of simplicity we wrote the code and
998:02 - then we're writing the test but just so
998:04 - you know if you're if you hear people
998:07 - talking about tdd tested with the test
998:09 - driven development what they mean is
998:10 - that you write the tests and in the
998:13 - writing of the tests you come towards
998:15 - the conclusion of how the interface of
998:17 - the class you're actually writing the
998:19 - tests for should look like if you're
998:21 - working with classes
998:22 - so test driven development is there's
998:24 - very important and we should be aware of
998:27 - it how to use it and if you're
998:29 - working in a software development
998:32 - organization you should do test
998:34 - development test
998:35 - driven development if time allows and if
998:38 - um all the constraints are in the right
998:40 - place for you to actually do tests and
998:42 - as i said i look at things more like in
998:45 - a not in a black and white um
998:48 - vision more like a gray vision
998:50 - i say that you should do tests but that
998:52 - is again something that is completely up
998:55 - to you and up to the situation that
998:56 - you're in so
998:58 - just be aware of what tdd is and that
999:01 - the right way of doing test driven
999:03 - development is that you first write your
999:05 - tests
999:06 - and then you write the interfaces and
999:09 - the code that the tests are actually
999:11 - performing their tests on there's lots
999:14 - uh lots and lots of resources online
999:16 - about tdd and what it actually means how
999:19 - it should be used tdd flutter as well so
999:22 - i strongly suggest that you have a look
999:24 - at those resources as well and maybe
999:26 - perhaps after you've gone through this
999:28 - chapter and done like the basics of
999:30 - doing tests
999:33 - now um you see we have time limit in
999:36 - this course because this course can't go
999:38 - on for hundreds and hundreds of hours um
999:41 - first because i i wouldn't probably be
999:43 - able to put so much time i know that
999:45 - this course is already gonna go over 20
999:48 - hours of time but
999:49 - it is it is going to take a lot of time
999:53 - if you want to go and cover everything
999:55 - and all different types of testing
999:58 - in flutter so
1000:00 - for the sake of simplicity and making
1000:02 - sure that you follow along with this
1000:04 - course without dropping off and getting
1000:06 - scared of all testing things that we're
1000:08 - gonna do i'm gonna give you like the
1000:10 - basics and i'm gonna give you the
1000:12 - building blocks that you're you need in
1000:13 - order to be able to carry on later on
1000:15 - your own and write more and more tests
1000:17 - so
1000:18 - i just know that the reason we're
1000:20 - dedicating this chapter to testing is to
1000:22 - make sure that everybody understands
1000:23 - that testing is very important but also
1000:25 - we are not going to have many many many
1000:28 - hours just to focus on testing
1000:31 - though it is a very important subject
1000:34 - now let's talk about different types of
1000:37 - tests i mentioned this in the outro to
1000:40 - the previous chapter and but i'll
1000:42 - mention it here in case you've jumped
1000:44 - over that chapter which i don't
1000:45 - recommend and if if you talk about
1000:48 - different types of tests in the flutter
1000:50 - you should know that there are unit
1000:52 - tests widget tests and integration tests
1000:55 - and let's just quickly talk about
1000:57 - what these different types of tests are
1001:01 - well um
1001:02 - let's go and talk about the concept for
1001:04 - instance of a class let's say you've
1001:05 - created a class called auth service
1001:07 - which is the case for us and you want to
1001:10 - write some tests for this class now this
1001:12 - class is very isolated in its own in its
1001:15 - own like it is it has a set of function
1001:17 - functionalities functions and it has a
1001:19 - getter called current user
1001:21 - if you don't remember that let me just
1001:22 - bring it to the screen so you see better
1001:24 - um so let's go to our auth service
1001:30 - it conforms to and implements the auth
1001:32 - provider it has a constructor it has a
1001:34 - factory constructor here as well and it
1001:36 - has all the functionalities that are
1001:38 - provided by the auth provider because it
1001:40 - implements auth provider so i'm gonna
1001:43 - actually increase the size so you see
1001:45 - better
1001:46 - so um
1001:48 - this is a unit of itself so it's a an
1001:51 - isolated piece of code that talks with
1001:54 - an auth provider and then it gives us uh
1001:58 - basically mirrors the functionalities of
1002:00 - that author provider which in in this
1002:02 - case is that in the firebase case is the
1002:04 - firebase auth provider so
1002:06 - it doesn't have so much functionality
1002:08 - but it has functionality good enough in
1002:10 - order for it to be tested and it's
1002:12 - actually important to test it just to
1002:13 - make sure nobody unintentionally changes
1002:16 - this code without without consulting
1002:18 - with us or without like and making sure
1002:20 - that their changes aren't gonna break
1002:22 - our code so that's unit tests so you
1002:24 - have a unit of code you have a piece of
1002:25 - code isolated and you want to test that
1002:28 - piece of code and to ensure the
1002:30 - different functions inside that code um
1002:33 - are working as they should so that's
1002:36 - just like a general idea of what a unit
1002:38 - test
1002:38 - is now a widget test as its name
1002:42 - indicates is a way for you as a software
1002:45 - developer in order to make it as a way
1002:48 - for you as a software developer to make
1002:49 - sure that your widgets like the ui that
1002:51 - you are creating is working as a shift
1002:54 - for instance if you have a login view in
1002:57 - your application
1002:59 - and this login view allows the user to
1003:01 - tap on a button in order to log in and
1003:04 - you're saying that okay in the ui i'm
1003:06 - going to make sure as soon as you press
1003:07 - the login button
1003:08 - until the user is logged in that this
1003:11 - login button should be disabled okay so
1003:13 - that's a piece of logic that you thought
1003:15 - about good idea you put that code in
1003:17 - there
1003:18 - but how do you test it how do you make
1003:20 - sure that the login button stays
1003:22 - disabled until login is successful
1003:25 - that's where widget testing comes into
1003:27 - play so widget testing is some sort of
1003:31 - uh like an end to end test and by that
1003:34 - we mean that your widgets are probably
1003:38 - talking with your services and with your
1003:40 - providers
1003:42 - so
1003:42 - your widget for instance the login
1003:44 - widget
1003:45 - or the login screen upon pressing the
1003:47 - login button is gonna call into your
1003:49 - service in this case the auth service
1003:51 - and it's going to go into this login
1003:53 - function this login function in turn is
1003:55 - going to talk with a provider the
1003:57 - provider in turn is going to talk with
1003:59 - the firebase code which in turn is going
1004:01 - to talk with the firebase backend so you
1004:03 - see the layers are stacking up ui is
1004:06 - here the button is on the ui
1004:09 - ui is talking with auth service
1004:11 - here auth service is talking with the
1004:14 - provider the provider is talking with
1004:16 - firebase firebase is talking with the
1004:18 - firebase backend and maybe the backend
1004:19 - is also talking with some other services
1004:21 - so
1004:22 - that's end to end it's one end and the
1004:25 - other end is right here so
1004:27 - you are basically by writing widget
1004:29 - tests you're doing end-to-end testing in
1004:31 - a way okay so that's widget tests
1004:35 - the other things are integration tests
1004:37 - you see
1004:38 - an integration test is where you for
1004:40 - instance have a service which we have in
1004:43 - this case the auth service and the auth
1004:46 - service is in this case the auth service
1004:49 - constructor or the factory constructor
1004:50 - is talking with firebase so if you test
1004:53 - our off service the exact way it is in
1004:56 - that you go and say auth service
1004:58 - firebase
1004:59 - and then you
1005:00 - issue commands against this auth service
1005:02 - firebase you create a user you sign in
1005:04 - with the user you log out you send an
1005:06 - email verification
1005:08 - if you're doing these tests you are
1005:10 - actually doing integration tests so
1005:12 - you're because you're making sure that
1005:15 - the code is also working end-to-end but
1005:17 - there's no ui involved so
1005:19 - uh
1005:20 - but
1005:21 - i mentioned i mean you're now thinking
1005:23 - okay what if testing auth service the
1005:25 - way it is is integration tests how come
1005:28 - you said in the beginning of this
1005:29 - chapter that we're going to do unit
1005:30 - tests
1005:32 - and that's what we need to talk about
1005:35 - now because you see in this unit test
1005:38 - exercise that we're going to do in this
1005:39 - chapter we're not actually going to call
1005:40 - firebase we're going to call we're going
1005:42 - to do something called mocking
1005:45 - i don't know if i've actually
1005:47 - mentioned some something here
1005:50 - yes i can see that later i'm actually
1005:52 - going to talk about mocking
1005:54 - and mocking in english it could mean
1005:56 - that you're making fun of someone and
1005:58 - that's not this and what we're talking
1005:59 - about here mocking is kind of like you
1006:02 - imitating um a real service so imagine
1006:06 - you have the auth service the off
1006:08 - service has a firebase factory talks
1006:10 - with firebase and it turns talks with
1006:12 - the firebase code and then talks to the
1006:13 - backend we're going to get rid of all of
1006:15 - that pipeline and say we're going to
1006:17 - test off service but we're going to give
1006:20 - it
1006:21 - another provider a provider that we
1006:23 - control you see the fire the firebase
1006:26 - auth provider has a lot of code in it so
1006:28 - we can go in there
1006:30 - let's go in the firebase auth provider
1006:31 - it talks directly with firebase but what
1006:34 - if we could create an
1006:36 - auth provider that conforms to auth
1006:38 - provider and then write a lot of logic
1006:41 - in that auth provider and provide that
1006:43 - author provider to the auth service
1006:46 - now all of a sudden we have an auth
1006:48 - service that delegates all his tasks to
1006:50 - this mock
1006:52 - um
1006:54 - auth provider that we control the code
1006:56 - for so we know exactly what the sign-in
1006:58 - is going to do we know exactly what the
1006:59 - sign out is going to do or log in and
1007:01 - lock it depending on the terminology
1007:02 - that you like to use
1007:04 - so
1007:05 - what we are going to do in this chapter
1007:06 - is mocking and i'm going to explain that
1007:09 - soon so let's just jump over that for
1007:11 - now
1007:13 - okay
1007:14 - um
1007:16 - the next thing that we need to talk
1007:17 - about are dev dependencies
1007:20 - if you're coming from like a node
1007:22 - background if you've worked with nodejs
1007:24 - or express you know already about npm
1007:27 - which is the node package manager
1007:30 - and you know what dev dependencies are
1007:33 - in there
1007:34 - if you're coming from an ios background
1007:37 - there isn't much of a dev dependency to
1007:39 - be honest with you except if you're
1007:41 - coming from an ios development
1007:42 - background then you know when you're
1007:43 - writing your tests those test frameworks
1007:45 - etc that you bring into your test target
1007:48 - there are inside their own target so
1007:50 - that they're not shipped with the final
1007:52 - product if you're not coming from any of
1007:54 - those backgrounds and you just want to
1007:55 - know what dev dependencies are all
1007:57 - explaining now you see when we're
1007:59 - working with our application if we go to
1008:01 - our pop spec yaml
1008:04 - you'll see that we have a section here
1008:07 - called dependencies and at the moment we
1008:09 - have dependencies on various libraries
1008:11 - for instance firebase core
1008:13 - firebase auth cloud firestore and
1008:16 - firebase analytics these are the
1008:18 - dependencies or libraries that we're
1008:20 - bringing into our application
1008:22 - which if you think this is our
1008:24 - application these are the various
1008:25 - libraries coming in and then we're at
1008:27 - the end
1008:28 - actually at the end of this um
1008:30 - course we're gonna send our application
1008:32 - to app store and google play store
1008:34 - when we create our application to send
1008:36 - to these respective stores we're
1008:38 - bundling the application and all the
1008:41 - dependencies together and sending this
1008:44 - as a complete binary to the respective
1008:47 - um
1008:48 - app store
1008:50 - however you also have a section here in
1008:52 - your pop spec yaml called def
1008:54 - dependencies
1008:55 - now dev dependencies are dependencies
1008:59 - that you use and bring into your
1009:01 - application only
1009:03 - during the development of your
1009:05 - application meaning that when you ship
1009:06 - your application which is a term used
1009:08 - for
1009:09 - saying that when you create the
1009:10 - application and post it to the
1009:12 - respective app store for instance for
1009:14 - review then those dependencies aren't
1009:16 - actually packaged inside your
1009:18 - application so they're only inside your
1009:20 - application while you're developing it
1009:22 - and as soon as you package it up and
1009:23 - send it for release then those
1009:25 - dependencies are not going to be packed
1009:27 - inside the application all right
1009:28 - so
1009:29 - those are dev dependencies
1009:37 - now let's go to our
1009:41 - testing here
1009:42 - so as you can see here we need to bring
1009:45 - tests into our
1009:49 - into our flutter application to make
1009:51 - sure that we can actually run our tests
1009:52 - so you will see here flutter test is
1009:55 - already included i'm going to show you
1009:56 - the command that you'll need to issue in
1009:58 - terminal in order to bring it manually
1010:00 - as well
1010:00 - and that is if we go in here and just
1010:02 - type flutter pop add test dev
1010:09 - all right
1010:12 - it's doing a pop get there
1010:15 - okay this job is done now now let's have
1010:18 - a look in here
1010:19 - and you can see now we have a dev
1010:22 - dependency called test and that's how
1010:24 - you bring it into your application using
1010:26 - this command so i'm going to bring it up
1010:28 - again just so you see it flutter pop add
1010:31 - test and and a dash dash dev if as i
1010:35 - said if you're a node
1010:37 - node.js developer you'll know this from
1010:39 - npm
1010:40 - d which adds it as a development
1010:44 - requirement or dependency to your
1010:46 - application so
1010:48 - i'm not going to assume that you brought
1010:50 - in this test package into your
1010:52 - application with the command that i
1010:53 - provided here for you in the terminal so
1010:55 - if then you look at your pops back yaml
1010:57 - file so i'm going to bring this down
1011:00 - if you look at your pop spec yaml file
1011:02 - inside dev dependency then you should
1011:04 - have this test package only inside your
1011:06 - dev dependencies if you see that is
1011:08 - brought into the dependency section that
1011:10 - is incorrect it shouldn't be there and
1011:12 - that is because you've missed perhaps
1011:14 - adding the dash dash dev at the end of
1011:16 - your flutter pop add test command so if
1011:19 - you do it like this
1011:21 - then test is going to be added to
1011:23 - dependencies and that's incorrect so
1011:25 - make sure that you fix that error
1011:30 - okay so let's go to the next section and
1011:34 - talk about that now if you bring up your
1011:36 - explorer you will notice that if you go
1011:39 - to your test folder the entire test
1011:41 - folder at the moment is marked as red
1011:43 - and and
1011:45 - uh actually it's not marked as red like
1011:47 - an email it's is is
1011:50 - rendered in red color that's what i mean
1011:52 - so it could be um maybe
1011:54 - heard in in the wrong tone so if you go
1011:57 - in there that folder was read and then
1012:00 - if you click on on this file which is
1012:02 - called a widget test that file is also
1012:04 - red has a lot of errors here actually no
1012:06 - it has one error because it's creating
1012:07 - something called
1012:08 - my app so
1012:10 - what we need to do in here because we
1012:11 - don't need this existing test you see
1012:13 - this test was created for us when we
1012:15 - created our flutter application we need
1012:17 - to get rid of it okay so let's go in
1012:20 - here and right click on it and just say
1012:22 - delete and that file is gone okay
1012:26 - so that's the first thing that we have
1012:27 - to do
1012:29 - and collapse this leap folder here as
1012:31 - well
1012:33 - now what we need to do here as a caption
1012:35 - indicates we need to create a new file
1012:36 - called auth test dot dart okay
1012:40 - so let's go ahead and do that under the
1012:44 - test folder so
1012:47 - let me go ahead and do that right now
1012:50 - under the test folder right click and
1012:52 - say new file and then call it off test
1012:55 - dart
1012:56 - all right
1012:59 - okay and what we need to do then in this
1013:02 - off test start right now this function
1013:04 - is completely empty so let's first
1013:08 - add a main function in here
1013:10 - like that and you can see as soon as we
1013:12 - add the main function in here dart is
1013:14 - intelligent enough to give us a run and
1013:16 - a debug functionality here and that's
1013:18 - displayed in visual studio code i think
1013:20 - android studio also does the same thing
1013:22 - i don't think vim is availa is able to
1013:24 - do that it may be vim is time and time
1013:27 - again has surprised me with all this uh
1013:29 - amazing capabilities
1013:31 - uh but depending on the
1013:33 - um on the tool or the text editor or the
1013:36 - id that you're using this could be
1013:38 - different but don't worry about it we're
1013:39 - not actually going to click on these
1013:41 - things so if you don't see these things
1013:43 - in your text editor you don't have to
1013:45 - worry about that
1013:47 - so
1013:48 - now that we've done
1013:49 - adding the test package now that we've
1013:52 - imported test packages that depends we
1013:54 - also need to import it so let's go in
1013:56 - here and say import
1013:58 - and get rid of this editor sorry
1014:01 - explorer on the left hand side and i'm
1014:03 - going to say if we import a package
1014:05 - called test
1014:07 - and there's a file in there called test
1014:08 - start so now we're ready basically okay
1014:14 - all right um
1014:16 - now you see
1014:18 - you may not have noticed it but
1014:20 - i have this application already running
1014:22 - on my actual android phone as we've done
1014:25 - in the previous chapter so i never
1014:26 - killed this application without a reason
1014:28 - it's always running on that android
1014:30 - phone i can always bring it up with scr
1014:33 - cpy so i can see right here that is
1014:36 - running without a problem
1014:39 - however
1014:40 - remember one of the previous chapters
1014:42 - one of the first previous chapters when
1014:44 - we talked about adding firebase to our
1014:46 - application i think it was chapter five
1014:48 - or six it was very early in the course
1014:50 - when we brought in firebase we need to
1014:53 - we needed to kill the application
1014:55 - meaning that we needed to terminate the
1014:56 - application and run it from scratch
1014:58 - so
1014:59 - depending on some dependent actually no
1015:01 - i don't think it's depending when you
1015:03 - bring in a new dependency in your
1015:05 - project you need to always ensure that
1015:06 - you rebuild your project so you cannot
1015:09 - do hot reload and hot restart because
1015:10 - some of these dependencies they actually
1015:13 - need your application to be
1015:14 - compiled from scratch
1015:16 - and then
1015:18 - then be brought into your binary so hot
1015:21 - reload and hot restart aren't going to
1015:22 - actually
1015:23 - like be able to bring those dependencies
1015:26 - yet at least into your flutter
1015:28 - application so what i need you to do
1015:30 - is to stop the execution of your program
1015:34 - and then let's go in here save these
1015:36 - changes then let's go and say
1015:41 - main.dart
1015:42 - and let's run the application
1015:45 - without debugging and let's see if this
1015:47 - is going to launch the application
1015:49 - correctly on the right device as well
1015:50 - and i can see yes it is going to run it
1015:53 - on the correct device i change the
1015:55 - screen layout a little bit here as well
1015:58 - so
1015:59 - let's just then wait for uh this gradle
1016:02 - belt to finish doing its work
1016:06 - it might take some time depending on the
1016:08 - changes that you've made to the
1016:09 - application in this case we brought in a
1016:11 - whole new package called testing to our
1016:13 - application so
1016:14 - it is taking its time and that's
1016:16 - completely fine
1016:20 - and i can see now it has
1016:22 - run our code without a problem great
1016:26 - stuff for this chapter i don't think we
1016:29 - need our um device with scr cpy if
1016:33 - you're using ios simulator i don't think
1016:34 - you need it if you're using an emulator
1016:36 - i don't think you need it either so we
1016:37 - could just get rid of it so we don't
1016:39 - have to display it on the screen but
1016:40 - remember my application is still running
1016:42 - okay
1016:43 - so
1016:44 - um let me get rid of this here get rid
1016:46 - of the widget inspector get rid of the
1016:48 - main dart and let's go to our auth test
1016:52 - dart file in here
1016:54 - okay
1016:56 - now one thing that we also need to fix
1016:59 - before we start writing our tests is
1017:02 - this little functionality here this
1017:04 - little guy in our auth user
1017:08 - if i bring up off user here
1017:11 - you'll see that it has the way we left
1017:13 - it is we added a
1017:16 - um we added a member variable to this
1017:19 - off user immutable class here called is
1017:21 - email verified and the way we're
1017:23 - constructing this auth user if you see
1017:25 - here we're saying off user just give us
1017:27 - this william so if from anywhere inside
1017:30 - your function and you have
1017:34 - a if from anywhere inside of your
1017:36 - application you want to create an
1017:37 - instance of off user you'll probably do
1017:39 - like this off user and then you have to
1017:41 - pass that boolean is email verified
1017:44 - however you'll see that
1017:47 - parameter has no name
1017:49 - it's just a true or false
1017:50 - if i as a programmer see auth user true
1017:53 - obvious or false i don't understand what
1017:56 - this true or false is what does that
1017:58 - even mean does that mean the auth user
1018:00 - is turned on is turned off what does it
1018:02 - mean
1018:03 - for that dart has the capability to give
1018:07 - you required named parameters and that
1018:10 - means that
1018:11 - instead of passing true in here you will
1018:14 - be forced to write off user his email
1018:18 - verified true or false like that
1018:21 - so in order to do that as the caption
1018:24 - indicates we need to go and make this a
1018:25 - required parameter and the way to do
1018:27 - that is to
1018:29 - wrap it inside curly brackets like this
1018:31 - and then prefix it with the word for the
1018:33 - keyword required
1018:36 - so after you've done that and this
1018:38 - function is not going to work anymore
1018:40 - because this parameter is missing so
1018:43 - it's email verified
1018:45 - and we're gonna pass
1018:47 - this value right there
1018:49 - okay and let's just move that remove
1018:51 - that function so
1018:53 - now we've achieved what we said we're
1018:55 - gonna do
1018:58 - now
1018:58 - um because you see we're not gonna we're
1019:01 - not actually you may think that okay
1019:03 - we've changed this parameter to required
1019:05 - so where are all the errors in our code
1019:07 - why didn't anything break and that's one
1019:09 - of the beauties of what we've done so
1019:11 - far and that we've abstracted away so
1019:13 - much code that the code is a lot more
1019:15 - robust now so because nowhere inside our
1019:18 - application we're actually creating us
1019:20 - users except from this factory function
1019:24 - the only place we have to fix this is
1019:26 - email verified is inside this factory
1019:28 - function so
1019:29 - to me that's beautiful because
1019:31 - doing something like drastic by adding a
1019:34 - required parameter to a class it didn't
1019:36 - break anything so we're just good to go
1019:39 - okay
1019:42 - all right um
1019:44 - now this is the point that i mentioned
1019:47 - previously that we need a mock off
1019:50 - provider all right
1019:52 - in order to do a mock author provider i
1019:55 - need to go a little bit more into what
1019:57 - mocks are and why we need them you see
1020:00 - in software um
1020:02 - we have especially in testing as well or
1020:04 - even as the app architecture level or
1020:06 - software architect architecture level we
1020:08 - have something called dependency in
1020:10 - injection
1020:12 - dependency injection
1020:14 - just quickly explaining it is very
1020:16 - similar to our auth service let's have a
1020:18 - look at our off service here you see off
1020:21 - service is dependent on an auth provider
1020:24 - and it's not just making the assumption
1020:27 - that it's auth providers always firebase
1020:30 - it provides a factory for firebase but
1020:32 - it's not making an assumption about that
1020:34 - hey i'm always locked to firebase auth
1020:37 - provider
1020:38 - this is dependency injection so this off
1020:41 - service is dependent on a provider using
1020:43 - a
1020:44 - constant constructor initializer we're
1020:47 - injecting the provider into it
1020:49 - this
1020:50 - in a nutshell is dependency injection in
1020:53 - software development
1020:55 - you could go into a lot more details
1020:56 - about it but we don't have time for it
1020:58 - um
1020:59 - so what is a mock the mock goes very
1021:03 - very well
1021:04 - hand in hand with dependency injection
1021:07 - in that in this case you can see we have
1021:09 - an off service that is mirroring the
1021:11 - functionality of its provider which you
1021:13 - could inject into it
1021:15 - but
1021:16 - the provider that we're using at the
1021:17 - moment is called firebase what if we
1021:19 - created a
1021:22 - completely new provider that we have
1021:24 - complete control over we can we can make
1021:27 - sure that it conforms and implements
1021:30 - auth provider and we can make sure that
1021:32 - it implements all those functionalities
1021:33 - that is that auth provider implements
1021:35 - and overrides all those but we have some
1021:37 - special logic in our own
1021:40 - mock auth provider
1021:43 - then we will give this auth provider to
1021:45 - our auth service and then let the auth
1021:48 - service do its magic and and mirror all
1021:51 - those functionalities of the provider so
1021:54 - we're gonna mock an off provider and
1021:58 - provide that into our auth
1022:00 - service so that's what mocking is when
1022:03 - you when you create a
1022:05 - a new function or a class and then you
1022:09 - can then
1022:10 - inject that into another
1022:13 - place and then test that another place
1022:15 - okay
1022:18 - so let's go in our off test dart file
1022:21 - that we have right here i'm going to
1022:22 - command s on it and let's go and create
1022:25 - our little off like mock off provider
1022:31 - so i'm gonna go in here and i'm just
1022:33 - gonna say class mock off provider and
1022:35 - suggest you do the same thing and this
1022:37 - guy is gonna implement
1022:39 - um
1022:41 - the auth provider okay auto imported for
1022:44 - us okay so like that
1022:48 - all right
1022:50 - now what we need to do is just to get
1022:51 - mock-off provider
1022:53 - to implement all the functionalities
1022:55 - that the auth provider apps abstract
1022:57 - class requires us to implement so i'm
1023:00 - going to command dot on it and
1023:02 - respectfully ask visual studio code to
1023:04 - create those six missing overrides thank
1023:07 - you so much visual studio code for
1023:09 - making our lives easier
1023:13 - okay
1023:14 - now what we need to do is just to do the
1023:16 - heavy lifting of this mock auth provider
1023:19 - which means to go ahead and create the
1023:22 - functionality for the auth provider okay
1023:25 - i understand that the code is completely
1023:27 - ginormous right now so i'm going to
1023:28 - decrease the size a little bit so you
1023:30 - see more of the code
1023:32 - so let's go ahead and take care of the
1023:34 - first function in here which is create
1023:37 - user
1023:38 - okay now you see
1023:41 - what we're going to do is
1023:43 - if you remember
1023:45 - our auth provider
1023:47 - has a function called initialize all
1023:50 - right
1023:50 - now when we're using auth provider in
1023:53 - the context of firebase firebase
1023:56 - internally has the concept of whether it
1023:59 - is initialized or not
1024:01 - but when we're creating a mock auth
1024:03 - provider where is that functionality we
1024:06 - don't keep track yet of whether our mock
1024:09 - auth provider is actually initialized or
1024:11 - not
1024:12 - and we just have an initialize function
1024:14 - but what if someone calls create user on
1024:18 - our mock auth provider without having
1024:21 - initialized the provider yet and that's
1024:24 - what we need to do now
1024:26 - so let's go ahead and keep track of that
1024:29 - so what we're going to do here is we're
1024:31 - just going to say var is initialized
1024:34 - it is false to begin with okay
1024:36 - and the reason i'm saying underscore is
1024:39 - initialize is because um
1024:42 - this is making this property pretty much
1024:44 - private to our mock-off provider so
1024:47 - we're indicating to the outside world
1024:49 - that hey you shouldn't be reading from
1024:50 - this property or writing to this
1024:52 - property
1024:55 - okay that is done now let's create a
1024:58 - little getter for this property so that
1025:00 - when we're testing our mock auth
1025:03 - provider we can actually say
1025:05 - hey are you initialized
1025:07 - and we can also create a test for a mock
1025:10 - auth provider which we're actually going
1025:11 - to do is to say okay when we create the
1025:14 - mock auth provider it shouldn't
1025:16 - initially be initialized however after
1025:19 - calling initialize on it then we make a
1025:21 - test to make sure that initialize flag
1025:24 - is set to true so let's in order to do
1025:26 - that we need to be able to read this is
1025:28 - initialize flag let's go ahead and
1025:30 - create a boolean getter for it we call
1025:32 - it is initialized
1025:34 - it's initialized and we just return is
1025:38 - initialized in there
1025:41 - all right
1025:43 - now let's go into our create user i'm
1025:46 - going to put a comma at the end of that
1025:47 - parameter i'm also going to take the
1025:49 - liberty of going and creating and
1025:51 - putting a comma at the end of login
1025:52 - function
1025:54 - and that's the only two places that had
1025:57 - that required a comma at the end of
1025:59 - their parameter list so now dart
1026:01 - formatter is able to format the code a
1026:03 - lot better
1026:06 - okay let's go to create user now you see
1026:09 - in create user i'm pretty much in all
1026:11 - these functions that we're writing in
1026:13 - here for instance login send email
1026:14 - verification we're we need to make sure
1026:16 - that this mock auth provider is already
1026:20 - initialized so we're actually going to
1026:22 - throw an exception if you call these
1026:24 - functions that require initialization
1026:26 - without having initialized the mock auth
1026:29 - provider first so let's go and define a
1026:32 - um an exception in here
1026:36 - so let me see actually if i have written
1026:38 - that down somewhere
1026:40 - nope so let's go in here and just say
1026:43 - class
1026:45 - not mini
1026:46 - initialized exception
1026:49 - implements
1026:51 - exception so you should know this from
1026:53 - before
1026:54 - and it's empty for now
1026:56 - okay
1026:59 - so what we need to do in here we need to
1027:00 - just say if
1027:03 - is initialized if it's not initialized
1027:06 - then throw
1027:08 - not initialized exception
1027:11 - okay
1027:14 - so that's an if statement it's a
1027:15 - one-liner that's why we don't really
1027:17 - break it in here otherwise you put curly
1027:19 - brackets in here and then do the
1027:20 - throwing in there but you could also use
1027:22 - a one-liner if statement if that's all
1027:24 - if that's
1027:25 - what you're doing just one line of code
1027:28 - all right and i kind of like these
1027:29 - one-liner if statements to be honest
1027:31 - with you so i hope you got this if the
1027:34 - mock auth provider is not initialized
1027:36 - throw that particular exception
1027:40 - and what we're going to do is just we're
1027:41 - going to fake creating a user okay so
1027:44 - we're just going to say
1027:46 - if you call the create user on firebase
1027:48 - for instance it probably needs to go and
1027:50 - talk with firebase back-end so it's
1027:51 - going to take some time so let's build
1027:54 - in some little uh delay in here
1027:57 - and what we're going to do is just to
1027:58 - say future
1028:00 - and delete
1028:02 - and here you have to pass the duration
1028:04 - to it so we say const duration
1028:06 - seconds
1028:08 - and they do
1028:11 - i believe that's it
1028:14 - let's just say one in here and remember
1028:17 - future delayed if i go and move over
1028:20 - it's a function signature it returns a
1028:22 - future of dynamic so by creating a
1028:25 - future you're not actually waiting on it
1028:27 - so let's mark our function as async and
1028:30 - let's just wait on it
1028:32 - okay now
1028:36 - do then is to make sure that
1028:40 - um
1028:40 - this create user actually returns an
1028:43 - author user but remember also in
1028:45 - firebase um or i don't actually know if
1028:48 - firebase works like this by but by
1028:50 - creating a user what we're going to do
1028:52 - in our mock auth provider is actually
1028:55 - logging that user in as well okay
1028:58 - so
1028:59 - let's just say you see login returns
1029:02 - also a future of auth user so at the end
1029:04 - of this create user we're just going to
1029:06 - make our lives easier and just return
1029:08 - the result of logging in so let's just
1029:10 - say return
1029:11 - and log in
1029:12 - when
1029:14 - this email and password okay
1029:17 - so this is a very dumb and very easy
1029:20 - mock implementation of create user in
1029:23 - itself it does three things checks to
1029:26 - make sure that you're initialized and if
1029:27 - you're not initialized it throws an
1029:29 - exception
1029:30 - it does a mock uh one second wait just
1029:34 - to like fake making an api call and the
1029:37 - third thing that it does is that it
1029:39 - calls the login function with the same
1029:40 - email and password and returns the
1029:43 - result of login just so that it can get
1029:45 - its off user
1029:49 - okay now we need the mock current user
1029:53 - so
1029:54 - how do we do that how do we get a
1029:56 - current user you see
1029:59 - firebase has the ability to keep track
1030:01 - of the current user but how do we do
1030:03 - that we can't just go and delegate this
1030:05 - functionality to firebase right now so
1030:07 - we also need to create an auth user in
1030:10 - here okay so let's go to deter mock auth
1030:12 - provider right there
1030:15 - off is initialized or below it doesn't
1030:17 - matter somewhere i'm gonna do it above
1030:20 - i'm gonna say user
1030:22 - like this
1030:23 - you see in far in a dart if you make a
1030:27 - member variable optional by default it
1030:29 - is null so it has no value so you don't
1030:32 - have to actually go and say no and you
1030:34 - can see it says don't explicitly
1030:35 - initialize variables to no good good
1030:38 - analyzer
1030:40 - i don't have a user that we're
1030:42 - internally going to manage and i'm
1030:44 - actually going to make it prefix it with
1030:46 - an underscore so that it is marked as a
1030:48 - private function as a private member
1030:50 - variable
1030:52 - then in the current user simply return
1030:54 - that user so like this okay
1030:59 - perfect
1031:00 - now
1031:01 - we need to go and take care of the
1031:03 - initialize function let's see if we can
1031:06 - find it
1031:07 - login here is initialize
1031:11 - so
1031:11 - the only thing we're going to do in
1031:12 - initializers we're going to fake waiting
1031:15 - just wait for like a second
1031:18 - and and then set r is initialize flag to
1031:22 - true so let's grab this code of a weight
1031:25 - from our create user function and then
1031:27 - bring it to initialize and then just say
1031:30 - await and make your function
1031:31 - asynchronous and then we're gonna just
1031:34 - wait
1031:35 - and we're just going to say initialized
1031:37 - is true
1031:38 - so that was an easy one all right so
1031:43 - then the meatiest part of our
1031:46 - mock author provider is actually the
1031:48 - login function because it's not that
1031:51 - it's doing login but it's also
1031:54 - the function that the register
1031:56 - function is using or do we say create
1031:58 - user
1031:59 - create user so that function is also
1032:02 - logging the
1032:03 - it's calling the login function so we
1032:05 - need to really test this function to
1032:07 - ensure that it's working properly okay
1032:10 - as i mentioned before in most of these
1032:12 - functions when we need to make sure that
1032:13 - our mock auth providers initialize
1032:15 - before these functions are called on
1032:17 - them so let's go and grab this code you
1032:20 - see it says if is initialized and bring
1032:22 - that code as well in our login function
1032:26 - so that's the first thing that we're
1032:27 - gonna do
1032:29 - now
1032:30 - we're also going to build in some fake
1032:33 - functionality into the login function
1032:36 - just so we can write tests for them
1032:38 - because you see in the real world you
1032:40 - probably have like lots and lots of real
1032:43 - logic that is
1032:45 - inside your uh auth providers and auth
1032:47 - services but we don't have all that real
1032:49 - logic right now because our application
1032:51 - is quite small right now so we're gonna
1032:53 - build some fake functionality into our
1032:55 - mod provider and then sorry in our mock
1032:58 - auth provider and then we're going to
1033:00 - write tests that test those
1033:03 - scenarios so you learn about mocking and
1033:05 - you'll also learn about writing tests
1033:07 - for those mocks okay so that's the
1033:09 - entire purpose of this chapter
1033:12 - so
1033:12 - what we're going to do then is we're
1033:14 - going to say if
1033:16 - and so we're going to make up an email
1033:18 - that we don't like we're going to say if
1033:20 - email is
1033:21 - um fooatvar.com
1033:24 - then throw user not found exception okay
1033:27 - so if you're trying to log in with this
1033:29 - email address we're just gonna say user
1033:31 - not found okay
1033:33 - and if password
1033:36 - is foobar
1033:38 - unlike the foobar password either then
1033:40 - we're going to say throw
1033:42 - wrong password off exception so
1033:46 - remember
1033:47 - login in itself if we go to our
1033:51 - firebase auth provider so go to this
1033:53 - file firebase auth provider dart it has
1033:56 - those functionalities like if you have a
1033:58 - look at login it has a functionality
1034:00 - like handling user not found wrong
1034:01 - password generic auth exception so what
1034:03 - we're doing is that we're creating some
1034:05 - sort of a mock of kind of the same thing
1034:07 - but we're locking it to specific email
1034:09 - and password okay
1034:12 - okay so that's for password we don't
1034:13 - like the email of foo at bar.com and we
1034:16 - don't like the password of foobar
1034:20 - now
1034:21 - we're also going to remove the
1034:22 - unimplemented error here now in this
1034:24 - case let's just create a user so we're
1034:26 - going to say user is and off user
1034:30 - and it's email verified we just say true
1034:32 - or let's just say false actually so we
1034:34 - say when you're trying to log in we're
1034:36 - just saying is email verify false okay
1034:39 - now that we've created a user let's
1034:40 - assign it to our user
1034:42 - like this because remember we have a
1034:44 - private field called
1034:46 - underscore user and we
1034:48 - just keep hold of it like this
1034:52 - and then we will do because remember we
1034:54 - need to return a future of that auth
1034:56 - user then we say return future
1034:59 - of a value equal to our user like this
1035:05 - so
1035:06 - that's our login function
1035:10 - so
1035:12 - that was quite a lot of work but i think
1035:14 - you hopefully understand what we did
1035:16 - right there
1035:19 - now we have to look at a logout function
1035:21 - and the logout function is gonna have
1035:23 - some code as well so
1035:26 - um it's not just gonna be saying okay i
1035:28 - logged out as i mentioned before we need
1035:30 - to make sure that the
1035:32 - mock provider is initialized so let's
1035:34 - bring that code in here
1035:35 - boom okay and we also need to make sure
1035:38 - if you want to log out that you've
1035:40 - actually logged in before so let's just
1035:43 - say if
1035:44 - um if i can find my keys
1035:46 - if user is null
1035:49 - then throw
1035:51 - uh user not found off exception okay
1035:55 - otherwise what we're gonna do is we're
1035:57 - just gonna await
1035:59 - so let's find an await code from before
1036:01 - we're just gonna fake waiting a little
1036:04 - bit just one second okay
1036:06 - and and we're gonna set our user as well
1036:09 - to null we're just gonna say the current
1036:12 - user then is not you can see it's
1036:13 - complaining that we're using a weight
1036:15 - but let me just say in here then
1036:18 - async
1036:19 - just like that then the error goes away
1036:21 - because if you mark your logout function
1036:23 - as async then you can wait on a future
1036:26 - so easy as well logout says am i
1036:29 - initialized
1036:30 - and in order for me to log out there
1036:32 - needs to be a user and then i'm gonna
1036:34 - fake waiting one second and then i'm
1036:36 - gonna set that user to null so easy pc
1036:38 - okay
1036:41 - now let's mock our email verification
1036:44 - code
1036:45 - so same thing so you should now be
1036:47 - familiar with this let's just make sure
1036:49 - that we are initialized i'm going to
1036:50 - grab a code from there room throw
1036:52 - unimplemented error actually let's leave
1036:54 - it
1036:55 - let's leave it there okay
1036:57 - for now at least
1036:58 - and um
1037:00 - then during the send email verification
1037:03 - what we're gonna do is you see when we
1037:05 - did a login we said that uh let's have a
1037:08 - look at the login we said by default the
1037:09 - email for the user's email verification
1037:11 - is false but upon send doing a send
1037:14 - email verification we're just gonna flip
1037:16 - that flag where all of a sudden i'm
1037:17 - gonna say oh now outside of your email
1037:19 - verified
1037:20 - which which isn't so realistic but
1037:22 - that's the logic that we're mocking
1037:24 - right now okay and remember a an auth
1037:27 - user
1037:28 - uh here
1037:29 - has a and it's email verified it's read
1037:33 - only like you it's a constant you cannot
1037:35 - change it so
1037:36 - just because we have an optional user in
1037:39 - our mock auth provider it doesn't mean
1037:41 - that we can just go and say off user is
1037:43 - email verified true we can't write to it
1037:45 - so we need to rewrite this entire user
1037:48 - okay
1037:49 - so
1037:50 - after checking that you're initialized
1037:53 - what we're doing is saying that
1037:55 - if
1037:57 - let's get the user actually final user
1037:59 - is
1038:00 - this let's get your current user and we
1038:03 - say if user is null
1038:06 - and throw user not found so our
1038:10 - send email verification code is make
1038:12 - sure making sure that you've logged in
1038:14 - before you can send an email
1038:15 - verification or at least you register
1038:17 - your user okay
1038:20 - um
1038:21 - okay
1038:22 - then what we're going to do is to create
1038:24 - a new user we're saying new user is an
1038:27 - off user and his email verified is true
1038:29 - this time and then we set that as our
1038:31 - current user so we say the current user
1038:33 - is the new user
1038:36 - and then we just remove that and we make
1038:39 - our sure our code async as well
1038:43 - okay
1038:44 - so that's for send email and
1038:46 - verification
1038:47 - so you see
1038:49 - it did take a while but we've actually
1038:50 - written now a mock auth provider that
1038:53 - has its own code and it has its own
1038:55 - initialization etc okay
1038:57 - now what we need to do is to
1039:00 - talk actually about tests so
1039:03 - um
1039:06 - let's see yes um
1039:08 - so what are test groups and what are
1039:12 - tests you see
1039:14 - if you think of tests as or at least
1039:16 - unit tests as pieces of code that test
1039:20 - other pieces of code
1039:22 - you may think okay i'm going to write a
1039:24 - test for create user
1039:26 - here i'm going to then write a test for
1039:28 - current user i'm going to write test for
1039:29 - initialized login blah blah now all of
1039:32 - these are common and group they're kind
1039:34 - of related they're all testing mock auth
1039:36 - provider and that's what test groups are
1039:39 - for in your test functions in flutter
1039:42 - sorry in your tests and test suites in
1039:45 - florida you can actually group your test
1039:47 - functionalities into a group that has a
1039:50 - name and then you can ask flutter to run
1039:52 - that entire group of tests for you so
1039:55 - that's what test groups are for
1040:00 - so now what we need to do is to go into
1040:02 - our main test function right there and
1040:05 - basically create a group and then add
1040:07 - provider inside that so let's just go
1040:10 - ahead and then type group
1040:12 - and in here we're just going to say mock
1040:15 - authentication okay
1040:17 - and let's go in here the second
1040:19 - parameters as a function
1040:20 - and like that so now you should have
1040:22 - your code like this so basically you
1040:23 - created a test group and you can see
1040:26 - visual studio code is telling me that oh
1040:28 - you can run this group
1040:29 - so we're gonna put all our mock
1040:32 - authentication tests inside this group
1040:34 - okay
1040:36 - and as a caption says the first thing
1040:37 - we're gonna do is we're gonna create our
1040:40 - an instance of our mock aus provider so
1040:43 - let's go ahead and say a final
1040:46 - provider
1040:48 - is a mock-off provider just like that
1040:51 - okay
1040:52 - so
1040:53 - now we have that
1040:55 - so now we're getting to the juicy parts
1040:57 - and i'm so happy about this because
1040:58 - we've done quite a lot of groundwork
1041:00 - just to get to this point for this
1041:01 - chapter
1041:02 - so now we're gonna write our first test
1041:05 - so as you can see the title says testing
1041:07 - provider is initialized providers
1041:09 - shouldn't be initialized to begin with
1041:11 - you see we're starting with
1041:13 - a
1041:14 - an assertion we're saying that according
1041:16 - to our implementation the way we've
1041:18 - implemented our mock auth provider it
1041:21 - should not be initialized to start with
1041:23 - so we're just making sure that by
1041:25 - creating an instance of mock auth
1041:26 - provider it's is initialized the boolean
1041:29 - getter
1041:31 - should return false if it if it returns
1041:34 - true we're going to fail our tests so
1041:36 - meaning that if someone then sneakily
1041:37 - goes into the code later and says oh
1041:39 - this is true by default then the tests
1041:41 - are gonna fail and all the developers in
1041:43 - the team are gonna be notified about
1041:45 - that okay
1041:46 - so
1041:47 - let's create our first test the way to
1041:50 - create tests in flutter is that you
1041:52 - start typing test okay
1041:54 - and you give it a name in this case i'm
1041:56 - gonna say should not
1041:58 - be initialized to begin with okay so
1042:02 - that's the name then you're gonna
1042:03 - provide it with a function to execute
1042:05 - upon doing its test
1042:08 - and in here you could say you could use
1042:10 - a function called expect
1042:13 - and you say writers
1042:15 - provider is initialized
1042:18 - it should be false to begin with
1042:21 - all right so
1042:23 - that's the first test that we wrote so
1042:25 - test function then you write a name for
1042:28 - it then a function to be executed and in
1042:30 - there you can use various flavors of the
1042:33 - expect function you'll see
1042:35 - expect there are various flavors of that
1042:38 - so
1042:39 - right now we're just expecting the easy
1042:41 - initialize flag to be false
1042:44 - okay
1042:46 - now the next test that we have to do um
1042:49 - so as the captioning case test logging
1042:52 - out before initialization the provider
1042:55 - should throw and not initialize
1042:57 - exception
1042:59 - so
1042:59 - basically what we're saying is that
1043:01 - according to the log out function it
1043:03 - shouldn't be able to log out if it's not
1043:05 - initialized first so we're literally
1043:07 - testing this line of code okay to make
1043:09 - sure that no one just unintentionally
1043:11 - comments it out or unintentionally
1043:14 - removes the same we don't need it all
1043:16 - right so let's test that uh
1043:18 - functionality so let's just say test i'm
1043:21 - going to look at my notes to see what
1043:22 - i've named there
1043:24 - cannot log out
1043:26 - if not initialize okay now you know that
1043:28 - as a second parameter to your test
1043:29 - function you need to provide a function
1043:31 - so uh
1043:32 - parenthesis
1043:34 - and then curly brackets and in here
1043:36 - we're just gonna say
1043:38 - expect
1043:39 - and now we're using a new flavor of this
1043:42 - expect and in here i'm just going to say
1043:44 - provider log out
1043:46 - and upon calling this logout function
1043:50 - we actually want to expect an exception
1043:54 - so there is a really good
1043:56 - uh catch that you can use in here that
1043:59 - is called throws a
1044:01 - and you can see throws a is a matcher
1044:04 - and it matches the result of the log out
1044:06 - function against whatever you provide
1044:08 - here so you say throws a
1044:11 - and then you expect
1044:12 - an exception in here you see the const
1044:15 - type matcher
1044:18 - height matcher is just going to say not
1044:20 - initialized
1044:21 - exception so i'm going to type this and
1044:24 - then i'm going to show you what i'm
1044:26 - doing basically in here
1044:28 - see what i've done through jose const
1044:30 - blah blah blah huh
1044:33 - that looks fine as well
1044:35 - and let's see why type manager is not
1044:38 - extract method cons throws i probably
1044:41 - messed up something
1044:43 - in here yeah
1044:45 - so let's see what is happening here so
1044:48 - what we're telling expect in here is
1044:50 - saying that execute the logout function
1044:53 - and
1044:54 - we're now testing the result of that
1044:57 - function against something called a
1044:59 - matcher and matcher is because you see
1045:02 - in here you can't say that this result
1045:05 - should be an exception because what are
1045:07 - you going to do are you going to create
1045:08 - a
1045:09 - an instance of that exception that's not
1045:11 - that's not a good way of testing your
1045:13 - functionality in here you're saying
1045:15 - you're matching the result of calling
1045:17 - the logout function it gains that
1045:19 - expected type as you can see type
1045:22 - matcher is if you go into it you can see
1045:25 - is a matcher
1045:27 - okay so that's how you would expect a
1045:31 - function to throw an exception all right
1045:37 - all right a lot of information um
1045:40 - now what we need to do after testing
1045:42 - that functionality we just need to make
1045:43 - sure that we can actually initialize our
1045:45 - mock provider
1045:47 - i'm going to bring the code a little bit
1045:49 - up here so you can see it better
1045:52 - so
1045:53 - now let's
1045:54 - go in here and say test and let me see
1045:57 - it should be able to be initialized
1045:58 - should
1045:59 - be able to be initialized
1046:02 - and create an empty function in here
1046:04 - then what we're going to do is just to
1046:06 - say await provider
1046:08 - dot initialize like this
1046:11 - and remember just like everywhere in
1046:13 - your dart code you can make your
1046:14 - functions asynchronous just by putting
1046:17 - async right before the curly bracket so
1046:19 - it's not a part of the signature of the
1046:20 - function it's just telling dart that
1046:22 - inside this function i'm going to
1046:23 - execute some code asynchronously okay
1046:26 - so upon initializing we then after
1046:29 - initialize if you look at the code that
1046:30 - we did for initialize
1046:32 - it just does a uh
1046:35 - and a weight of one second and then it
1046:36 - sets the flag of is initialized to true
1046:39 - and we can read that flag by reading
1046:41 - this boolean getter so let's say away
1046:44 - provider initialize and then we're going
1046:45 - to say expect
1046:48 - the provider is initialized flag to be
1046:50 - true after this
1046:52 - all right so that one was an easy one
1046:57 - so after we've done all of this you see
1047:00 - is initialized and doing initialization
1047:02 - is not actually going to create a user
1047:04 - for us so let's make sure upon
1047:06 - initializing our provider that the user
1047:08 - is no so let's just say test
1047:10 - user should be null after initialization
1047:14 - okay
1047:15 - empty function
1047:16 - and then let's just expect the user the
1047:20 - current user to be known so let's say
1047:21 - expect
1047:22 - a provider current user
1047:25 - that it should be known all right so
1047:27 - easy to read and it's almost like
1047:29 - reading english so
1047:32 - so that's it
1047:35 - all right now what we're going to do is
1047:37 - doing some asynchronous testing i want
1047:39 - you to see this as well because it's
1047:40 - very important now let's say that you're
1047:43 - we want to test as the caption is
1047:45 - telling you testing the time required to
1047:47 - initialize we can test timeouts in this
1047:49 - case so
1047:50 - what we're going to do is look at our
1047:52 - initialization code here and let's see
1047:57 - the initialize function here
1047:59 - at the moment is waiting one second what
1048:02 - we're going to do in our test just for
1048:03 - the sake of using how you can test
1048:06 - timeouts and how you you can test for
1048:08 - instance api calls in the future we're
1048:10 - going to do some asynchronous testing in
1048:12 - here with a timeout saying that our test
1048:15 - should fail
1048:16 - if initialize on our provider takes more
1048:19 - than x amount of seconds all right so
1048:23 - now let's go in here and say test um
1048:25 - should
1048:26 - be able to initialize
1048:29 - in less than two seconds
1048:32 - okay and an empty function which is
1048:34 - asynchronous just like that
1048:36 - empty body for now
1048:39 - and what we're going to do in here is to
1048:42 - say await
1048:45 - on the provider's initialization
1048:48 - okay
1048:49 - and after initialization we're also
1048:51 - going to expect the is initialize flag
1048:53 - to be true just like that
1048:56 - however we're going to
1048:57 - use a new
1048:59 - parameter of our test called timeout
1049:01 - now timeout will provide a constant
1049:04 - timeout to it
1049:06 - with a duration so
1049:09 - duration and in this case we're just
1049:11 - going to say two seconds and i think we
1049:12 - have one extra parameter in here
1049:13 - constitution timeout
1049:16 - argument zero expected what one found
1049:18 - cons time and then here seconds
1049:22 - and avoid cons here okay so this is very
1049:25 - simple simply said we're saying that
1049:27 - we're created a test that calls the
1049:29 - initialize function on our provider and
1049:31 - just ensures that that function returns
1049:35 - to the test context before the timeout
1049:38 - has passed so internally this test
1049:40 - function which you provided timeout to
1049:42 - is going to create a little timer and
1049:45 - then it's going to set the timer to
1049:47 - start with as soon as it calls the
1049:49 - function
1049:50 - this function in here let me show you
1049:52 - here this
1049:54 - as that is
1049:55 - progressing and doing its work it's
1049:58 - going to terminate its result processing
1050:01 - as soon as the timeout basically passes
1050:04 - so in this case our initialize function
1050:06 - is going to take one second to process
1050:08 - this work if it can't do that during
1050:10 - these two seconds of timeout that test
1050:13 - is going to fail okay so now you know
1050:16 - how to test that as well
1050:19 - so let's go in here and now test the
1050:22 - medius part of our
1050:24 - provider which is creating a user as you
1050:27 - can see we have to test make sure that
1050:30 - creating a user actually delegates to
1050:32 - our login function and we have to test
1050:34 - all the edge cases all right
1050:38 - so let's go ahead and do that let's then
1050:40 - say we test
1050:42 - uh create user should delegate um
1050:47 - delegate
1050:49 - to login
1050:51 - function and in here we're gonna create
1050:53 - a function which is an asynchronous
1050:55 - function all
1050:57 - and what right
1050:57 - need to do is to create this
1051:00 - basically if you remember create user
1051:01 - doesn't have internal logic of its own
1051:03 - it's just going to call login but login
1051:04 - has this beautiful logic that first test
1051:06 - fooadbar.com
1051:09 - with any password should throw this
1051:12 - error user not found off exception so
1051:14 - let's just test that scenario okay let's
1051:16 - go in here
1051:17 - and say final bad email user is
1051:23 - provider create
1051:25 - uh
1051:27 - writer oh don't we have our provider
1051:32 - oh i've added this test i apologize i've
1051:35 - added this test i believe at the end of
1051:38 - this entire test group i should have
1051:40 - added it here so if you've made the same
1051:42 - mistake i apologize for that it's my
1051:43 - fault you should fix that and make make
1051:46 - sure that your test is in the same group
1051:48 - where it has access to the provider so
1051:50 - then i'm going to say provider and so
1051:53 - final bad email user is
1051:56 - uh provider creates user
1051:58 - the email is fooatbar.com
1052:01 - and password could just be any password
1052:03 - okay
1052:04 - comma semicolon make sure dart formatter
1052:07 - formats your code properly so then what
1052:10 - we need to make sure is
1052:11 - when the bad user is
1052:14 - basically returned to us then it should
1052:16 - actually contain a user not found off
1052:19 - exception so let's go ahead and say
1052:21 - expect
1052:23 - a bad email user
1052:26 - to actually be of
1052:29 - to throw a
1052:30 - const
1052:32 - type matcher
1052:34 - of
1052:36 - that user
1052:37 - not found off exception like this
1052:42 - okay let's see
1052:44 - and i
1052:45 - have to close that here as well
1052:48 - so we're basically saying calling the
1052:50 - bad email user the creation of a user
1052:52 - with that specific email should throw a
1052:55 - user not found off exception and
1052:56 - remember you may think oh we've tested
1052:58 - this before yet but that was in the
1053:00 - context of
1053:02 - here let's see
1053:05 - actually no we haven't tested that
1053:06 - before it's it's this thing that we've
1053:08 - tested so sorry about that so we've
1053:09 - tested a lot yeah we haven't tested this
1053:10 - particular case so
1053:12 - all right so
1053:14 - now we've tested that now let's test
1053:16 - this scenario with a bad password a
1053:18 - password of fubar you see we have that
1053:20 - logic in our mock provider here for the
1053:22 - login function let's test this scenario
1053:24 - now let's test this code we should throw
1053:26 - the wrong password off exception okay so
1053:29 - let's go in here and say
1053:33 - final
1053:34 - i can see that you can't see the code so
1053:36 - bad password user is provider and create
1053:40 - user with the email of let's just say
1053:43 - someone at bar.com and the password is
1053:45 - fubar and that's the password we didn't
1053:47 - like remember that okay
1053:50 - now we copy the code from here
1053:52 - and then we say
1053:53 - that that password user should throw an
1053:57 - exception called wrong password
1054:00 - off exception okay so we've tested that
1054:03 - scenario as well
1054:06 - now we actually should test the um
1054:09 - the positive scenario so let's go ahead
1054:12 - and say final user is awaits provider
1054:16 - and we say create user
1054:18 - all right
1054:20 - an email is going to be
1054:23 - foo and the password is going to be bar
1054:25 - remember our our mock auth provider is
1054:27 - not actually testing whether an email is
1054:30 - correct email or not
1054:32 - firebase is doing that but a mock
1054:34 - provider isn't doing that so
1054:36 - we could just provide any email
1054:39 - foo and password a bar and it will just
1054:41 - accept it as long as it's not
1054:43 - it the password isn't foobar and as long
1054:45 - as the email is not footbar.com okay
1054:49 - all right now let's let's make sure that
1054:52 - this user is then being assigned to the
1054:56 - current user of our auth provider okay
1054:59 - so let's expect the auth provider
1055:02 - offer sorry the provider's current user
1055:04 - to actually be equal to this user okay
1055:07 - because um
1055:09 - that's what we did in our create user
1055:11 - remember we create user delegates this
1055:13 - work to the login and then login
1055:15 - internally sets the current user to that
1055:17 - user they just created okay so that's
1055:19 - the scenario now we're testing with this
1055:21 - line of code here
1055:25 - all right so that's that
1055:27 - um
1055:28 - so what we need to do then is just to
1055:30 - make sure
1055:31 - by just creating a user which we're
1055:33 - doing here that the is email verified
1055:36 - functionality sorry that is email
1055:38 - verified um parameter of our auth user
1055:41 - is set to false by default remember
1055:45 - login function here
1055:47 - is set is email verified false let's
1055:49 - test that functionality okay so we just
1055:51 - say expect
1055:54 - users
1055:55 - we use email verified to be false
1055:58 - right
1056:00 - wow that was a lot of
1056:02 - code to be honest with you and i hope
1056:04 - that you got everything that i mentioned
1056:06 - here
1056:08 - so now that we've done that let's test
1056:10 - the email verification functionality uh
1056:13 - and let's have a look at what we
1056:14 - actually did in email verification
1056:17 - you see we have this functionality not
1056:19 - initialized
1056:20 - then we take the current user if the
1056:22 - current user is null then we say user
1056:24 - not found exception and then we create a
1056:26 - new user with is email verified to true
1056:29 - and we're then setting that user as the
1056:32 - current user so that's what the send
1056:34 - email verification code is doing okay
1056:38 - now you see
1056:39 - when
1056:40 - when flutter then runs our code it's
1056:42 - going to run them sequentially so it's
1056:43 - just going to go from top to bottom and
1056:45 - then you remember
1056:47 - before we test the email verification
1056:48 - we're actually testing create user which
1056:51 - in turn calls the login function so
1056:54 - since we're keeping a hold of our
1056:56 - provider
1056:57 - this create user calling login function
1056:59 - ensures that the current user actually
1057:01 - sets and is not email verified so we can
1057:05 - count on that okay
1057:06 - so let's say
1057:08 - that we test
1057:10 - and we say login user should be able to
1057:13 - get verified uh logged in user should be
1057:17 - be able
1057:19 - to get verified
1057:20 - okay and then an empty function in here
1057:23 - um like that
1057:25 - so in here we then say provider send
1057:28 - email verification okay
1057:31 - and with the final user is providers
1057:33 - user uh
1057:36 - current user
1057:38 - like that
1057:39 - and we now make sure that the current
1057:42 - user is not null so we say expect user
1057:45 - is not uh or
1057:48 - yeah expect the user is not null which
1057:52 - as you can see is a great matcher that
1057:54 - you can match something against it so
1057:55 - you say shouldn't be no okay like that
1057:58 - all right
1058:00 - and then we also we need to make sure
1058:02 - that this user's uh verification is set
1058:05 - so it's email verified should be true
1058:07 - then we say expect and we'll get an
1058:08 - error now you'll see user is email
1058:11 - verified it should be true
1058:14 - okay and you can see you get an error
1058:15 - here saying that a user is optional but
1058:16 - we're gonna
1058:17 - and do an asterisk here saying that
1058:19 - force force on rapid for us okay
1058:25 - now what we should do as the last test
1058:27 - we as the caption says test logging out
1058:30 - and logging in and this is normal
1058:31 - scenario that should just work let's
1058:33 - create a test for it so let's just say
1058:35 - test
1058:37 - and we're going to call it should be
1058:39 - able to log out and log in again should
1058:41 - be able to log out and log in
1058:45 - and again okay
1058:47 - and an async function
1058:49 - so and a semicolon at the end
1058:51 - so what we're going to do here then is
1058:53 - just to say
1058:55 - log out and log in and then we get the
1058:57 - current user and we just make sure that
1058:59 - you're not
1059:00 - null so let's say a wait on the provider
1059:04 - to log out
1059:06 - and we say await on the provider to log
1059:08 - in
1059:10 - with an email of just user and password
1059:14 - just like that okay so or just email
1059:18 - because we're not actually validating
1059:19 - the email and password in our auth
1059:21 - provider in our mock author provider
1059:25 - and then we're going to get the current
1059:26 - user so we say final user is provider
1059:30 - current user and we just make sure that
1059:32 - that user is not known so let's just say
1059:34 - expect the user is not null
1059:39 - which is a method built into
1059:42 - flutter tests
1059:43 - all right that was a lot of work and i'm
1059:46 - proud of you for
1059:48 - sticking with this chapter
1059:51 - we talked a lot about tests there's so
1059:53 - much that you need to go through so much
1059:55 - material and you need to learn on your
1059:56 - own as well about different types of
1059:58 - matters and different flavors of expect
1060:01 - and talking about expect i kind of
1060:03 - expect you to go
1060:04 - and read these things also on your own
1060:06 - and learn about them in your own time as
1060:08 - well
1060:10 - now the exciting part we need to run our
1060:12 - tests so let me change the screen layout
1060:15 - and
1060:17 - let's go in our terminal here
1060:19 - and let's increase the size
1060:22 - and
1060:23 - let's then
1060:24 - uh break this and as you can see you can
1060:27 - tell flutter to run your test by saying
1060:29 - flutter test and providing that path to
1060:32 - your test so now flutter is going to go
1060:34 - ahead and issue and go through those
1060:37 - tests one by one
1060:41 - and let's see what we get as the result
1060:45 - and you can see it's giving like time
1060:47 - for all of these tests and it says all
1060:50 - tests passed now i just want to
1060:52 - highlight this before we go on we did a
1060:54 - lot of tests i've prepared these tests
1060:57 - manually so to make sure that they
1061:00 - actually testing important functionality
1061:02 - inside our auth provider however i've
1061:04 - written the tests very carefully to make
1061:06 - sure
1061:07 - that they work
1061:09 - this is not the case when you're doing
1061:12 - things in real life your tests should
1061:14 - fail if you've done things right your
1061:16 - tests should fail to begin with and you
1061:19 - then need to go and write your and fix
1061:22 - your logic if you're doing things even
1061:24 - more right you should write your tests
1061:26 - first nothing is going to work then you
1061:29 - should go and write your logic to fit
1061:31 - those tests and expectations so just
1061:34 - because these tests are passing right
1061:35 - now i know we have joy inside we say oh
1061:38 - everything's passing everything's great
1061:40 - but in reality that's not going to be
1061:41 - the case usually okay
1061:45 - so
1061:46 - a lot of work we did let's do as we
1061:48 - usually do keep the tradition and let's
1061:51 - commit our work and and also tag it so
1061:54 - let's then say git status to see the
1061:57 - status lots of things changed
1061:59 - hey
1062:01 - hit add git status
1062:04 - all right we're going to commit this as
1062:05 - step 10
1062:07 - and we're going to say in here get push
1062:11 - it's going to push our commit to github
1062:13 - and then we get the tag as well as step
1062:16 - 10
1062:18 - and push
1062:20 - tax
1062:24 - traditions as it is tradition in this uh
1062:26 - philosophy course we always talk about
1062:28 - what we're going to do in the next
1062:29 - chapter before we wrap up the current
1062:31 - chapter so as you can see the cache has
1062:33 - said let's get ready for the next
1062:34 - chapter we need a database to store user
1062:36 - notes before you use or if we use
1062:38 - firebase for storage now
1062:41 - you see we at the moment we're not
1062:44 - actually writing anything anywhere there
1062:46 - are no nodes uh
1062:48 - the user can't even create new nodes so
1062:50 - but what if we wanted to give the
1062:52 - ability for the user to create new nodes
1062:54 - and then delete those nodes and update
1062:55 - those nodes and
1062:56 - uh to begin with uh we're going to store
1063:00 - these nodes in a local database inside
1063:03 - the application so you will learn in the
1063:05 - next chapter
1063:06 - about sqlite
1063:08 - and local databases and how to use them
1063:11 - with firebase
1063:12 - sorry and how to use them in flutter
1063:16 - in the latest chapters
1063:18 - in the later chapters we will change
1063:20 - that logic so we'll be won't use sql
1063:22 - lite uh but i believe for any developer
1063:25 - uh
1063:26 - if you're like a
1063:29 - i can't say any developer but if you're
1063:30 - a front-end developer or a back-end
1063:31 - developer you should be comfortable with
1063:33 - databases and that's exactly what we're
1063:35 - going to do
1063:36 - in the next chapter so grab some
1063:38 - refreshments and i'll see you in the
1063:40 - next chapter
1063:42 - hello and welcome to chapter 27 of this
1063:44 - flasa course
1063:46 - in the previous chapters we've been
1063:48 - talking about
1063:49 - our user interface and also we've been
1063:51 - looking at our um
1063:54 - services and
1063:56 - we've put some
1063:57 - time also to create some um
1064:00 - tests for our services and providers
1064:03 - up until this up until this point we've
1064:04 - been talking quite a lot about like the
1064:07 - logic of going from one screen to the
1064:08 - other uh integrating with firebase etc
1064:11 - however we haven't actually talked about
1064:13 - storing um user created content
1064:16 - inside our application or inside some
1064:18 - sort of cloud service
1064:20 - what we're going to do in this chapter
1064:22 - is we're going to talk about sql lite
1064:25 - and storing user generated content in
1064:27 - this case the user generated nodes
1064:30 - inside sqlite now
1064:33 - i'm gonna get to what sqlite is but
1064:35 - first of all let's have a look at the
1064:37 - title of this chapter which as you can
1064:38 - see it says crotlocal storage for
1064:41 - those of you who are software developers
1064:42 - from before and are comfortable with
1064:44 - crowd you can just jump over this
1064:46 - part of the chapter for those who are
1064:48 - not familiar with crowdcrot stands for
1064:50 - create read update and delete these are
1064:53 - four very fundamental operations that
1064:55 - any developer would perform on their
1064:58 - data and for instance if you're a flask
1065:00 - or a django developer node express um
1065:04 - developer you're you're probably already
1065:06 - familiar with these because
1065:08 - you're probably using some sort of a
1065:10 - database mysql or sqlite
1065:13 - um and you're storing your data in there
1065:15 - and you're just working with the data
1065:17 - and you're familiar with the term crop
1065:18 - but if you're not familiar with it then
1065:21 - think of it as c which is create is you
1065:24 - creating
1065:25 - some sort of a an object inside a
1065:28 - database some such as for instance a
1065:30 - user generated note
1065:33 - you read of course want to be able to
1065:35 - read that data back for instance in our
1065:37 - application's main user interface you
1065:38 - may want to read the entire contents of
1065:40 - the database
1065:41 - not the entire contents but at least in
1065:43 - user generated notes for that specific
1065:45 - user so that's the r in crowd
1065:48 - then you have u which is for
1065:50 - which it stands for update um or it
1065:52 - doesn't stand for update it means update
1065:54 - because u is the first letter of update
1065:56 - so on update is for instance if i have
1065:59 - already generated a node inside this
1066:01 - application i want to go and change the
1066:02 - contents of that node then that's the u
1066:04 - in crod
1066:06 - and um last but not least you have d
1066:08 - which is delete um and as its name
1066:11 - stands basically you
1066:14 - you allow the user to be able to delete
1066:15 - their own generated content from the
1066:17 - database so
1066:20 - what we're going to do in this course is
1066:22 - to um
1066:24 - talk about sqlite that is a database or
1066:28 - a c
1066:29 - library and a library created in c
1066:32 - um
1066:33 - that allows us to
1066:35 - see as a programmer language c that
1066:37 - allows us to store data inside a file
1066:40 - now if you're if you're coming from like
1066:42 - the backend world if you're if you're
1066:44 - programmed with inside with python in
1066:46 - django you're already familiar with this
1066:48 - because sqlite is the default database
1066:50 - that will be provided to you in django
1066:52 - and a flask as well i believe is using
1066:55 - sqlite by default which is very similar
1066:57 - to
1066:59 - django
1067:01 - but if you're not familiar with sqlite
1067:03 - is i've prepared a website here which i
1067:06 - mean i haven't prepared the website i've
1067:07 - just opened the website so
1067:10 - um
1067:11 - so you can see here i'll increase the
1067:12 - size of the font here and you can see
1067:15 - sqlite is a c language library that
1067:17 - implements a small fast self-contained
1067:19 - high reliable full-featured sql database
1067:21 - engine sqlite is the most
1067:23 - used database engine in the world well
1067:26 - just think of sqlite as the database
1067:29 - engine that we're going to use in our
1067:30 - application and it's not something that
1067:33 - is built in inside um flutter we will
1067:37 - have to use a so-called plug-in for it
1067:40 - um
1067:41 - but that's also okay and i mean not many
1067:44 - languages have support for talking with
1067:46 - a database and natively so
1067:49 - um
1067:50 - but we'll get there we'll get to that
1067:51 - point okay
1067:54 - now let's talk about how we're actually
1067:56 - going to integrate with sqlite and to
1067:58 - start with so i'm assuming that you
1068:00 - don't you have never worked with sqlite
1068:02 - before or you haven't worked with any
1068:04 - type of database before and you're
1068:05 - trying to learn how to do that okay so
1068:07 - that's that's been my assumption from
1068:08 - the beginning of this course so if
1068:10 - you're already seasoned developer you
1068:12 - know exactly how school sql light works
1068:14 - you may want to jump over this section
1068:16 - of this chapter and get to like more
1068:18 - juicy parts where we integrate actually
1068:20 - with equal light inside the floater
1068:22 - application
1068:23 - so let me close this um or maybe let's
1068:25 - just keep it open
1068:27 - and what i'm going to talk about now is
1068:29 - um a program
1068:31 - a free program called db browser for sql
1068:34 - lite you see sqlite allows you to
1068:38 - i mean if you think of
1068:40 - sql lite has different components first
1068:42 - you have your database which is just a
1068:44 - file that sits on a disk
1068:46 - and then you will have the sqlite
1068:49 - engine that can read from this this file
1068:52 - and write to this file so that's the
1068:54 - engine and then this engine should run
1068:56 - somewhere so it's either going to run
1068:59 - inside an application such as the one
1069:01 - i'm mentioning here a db browser for sql
1069:03 - light okay so sqlite's like baked into
1069:05 - that application or you can also bring
1069:08 - sql light into your terminal so that you
1069:10 - can actually talk with sql lite
1069:12 - databases from within your terminal
1069:14 - or if you for instance have install
1069:15 - django on your computer then you can use
1069:17 - django in order to integrate with sql
1069:20 - iso sqlite is the engine that talks to
1069:22 - the sqlite files
1069:25 - uh which are your databases but then
1069:27 - it this engine should run somewhere it's
1069:30 - not just an executable that like you say
1069:32 - here take this file you now have to have
1069:35 - like some sort of a container where the
1069:36 - sequel light engine basically resides
1069:40 - when we then talk about our flutter
1069:41 - application we're going to bring this
1069:42 - engine into the flutter application so
1069:45 - our app can talk with that database but
1069:47 - for now we're going to look at a program
1069:49 - called db browser for lite db browser
1069:52 - for sql lite is a free and i believe
1069:54 - it's an open source program let's search
1069:56 - for it
1069:57 - i'm going to say
1069:59 - db browser for sqlite
1070:02 - and we end up in this
1070:04 - website and um and as you can see the
1070:07 - official home of the db browser for
1070:09 - sqlite and this is how the program kind
1070:11 - of looks like
1070:12 - um i'm not sure if yeah i can see now
1070:15 - it's actually available for windows mac
1070:18 - os and it would be amazing if it was
1070:19 - available for linux as well
1070:21 - um yeah
1070:23 - so
1070:24 - it seems to be available
1070:25 - uh and you can actually use snap so
1070:27 - that's great so if you're on ubuntu like
1070:30 - i am
1070:31 - not on this machine right now but if
1070:32 - you're on ubuntu you can actually use
1070:33 - snapstore or even debian any type of
1070:36 - operating system linux space operating
1070:38 - system that has snapstore so that is
1070:40 - really good even on arch linux fantastic
1070:44 - all right on debian you used apt so
1070:48 - that's fine but anyway so it's available
1070:49 - for windows linux and mac os so i need
1070:53 - you to basically go to sqlite browser or
1070:56 - db browser as it's called db browser for
1070:58 - sqlite if you go to the home page i need
1071:02 - to find this website
1071:04 - and let me change the screen layout so
1071:05 - you see it better
1071:07 - and i need you to download this program
1071:09 - okay i've already downloaded it on my
1071:11 - computer so i'm going to close that
1071:14 - safari window and i'm going to bring you
1071:15 - the db browser for sqlite as it looks
1071:18 - like on my computer
1071:19 - the only thing i've changed on my
1071:21 - interface here is i've changed the font
1071:23 - from 13 to 20
1071:25 - not because i don't like the number 13.
1071:29 - it has nothing to do with that but it's
1071:30 - just i thought 20 is a little bit of a
1071:34 - nicer font size for this course um
1071:37 - all right so what are we gonna do now so
1071:40 - um let me then talk about
1071:44 - the structure of our database and how
1071:46 - we're going to set it up
1071:47 - if you think about how we've created our
1071:49 - user interface in that here's the user
1071:52 - interface if we go here you can see that
1071:55 - we can register with different users so
1071:58 - then we have a user entity or a user
1072:00 - table as we're going to call it
1072:02 - and then we also have
1072:05 - we are going to allow
1072:07 - the creation of these users in our
1072:09 - database so imagine that we will have
1072:11 - some sort of a table some sort of entity
1072:13 - in our database that is dedicated to
1072:15 - users and users are probably just going
1072:17 - to have
1072:19 - a
1072:20 - what are they going to have they're
1072:21 - going to have an id and an email so as
1072:24 - you remember when you create a
1072:27 - when you register a user with firebase
1072:30 - you always get a user identifier so
1072:32 - we're gonna store that id
1072:35 - plus the user's email in our database
1072:38 - okay so we're not gonna store the user's
1072:40 - password that isn't that is an absolute
1072:41 - no-no okay
1072:43 - so user id which comes from firebase and
1072:46 - the email address we're gonna store in
1072:48 - our database
1072:50 - and also
1072:52 - we are going to have another table and
1072:55 - another table in our database dedicated
1072:58 - to notes so as a user when i log into
1073:00 - the application i should be able to
1073:01 - create my own notes and these notes
1073:04 - should be kind of like bound to and like
1073:07 - they should be glued to my user so if my
1073:09 - user is in the database i should be able
1073:11 - to have notes and if my user is deleted
1073:14 - all those notes should kind of also be
1073:15 - deleted from the database so it's kind
1073:17 - of like a cascade for those of you who
1073:19 - are familiar with back-end development
1073:21 - so
1073:23 - that is like the structure that we're
1073:25 - going to set up for our database so
1073:27 - in our i can see in my notes that for
1073:30 - our notes table we are actually going to
1073:32 - have a user id
1073:35 - integer in that table that like binds
1073:38 - the
1073:39 - every node object to the user who
1073:42 - created it but we'll get there so don't
1073:43 - worry about it
1073:45 - so i'm going to get rid of this
1073:47 - here and put it there
1073:49 - so we don't see it
1073:50 - now what we need to do is start testing
1073:52 - so we want to create a database a simple
1073:55 - database and start creating some tables
1073:58 - in there okay so what i need you to do
1073:59 - is just to press the new database and
1074:02 - i'm going to save it on my desktop and
1074:03 - let's just call it testing okay
1074:06 - and i'm going to press the
1074:09 - save button right there
1074:11 - okay you can see now we created a
1074:14 - database and we have a table here it
1074:17 - doesn't look so nice i mean it's not
1074:19 - rendered so fine because i've changed
1074:21 - the font on my screen
1074:23 - but you i think you can you get the idea
1074:25 - okay
1074:26 - so what we need to do is to as the
1074:28 - caption says we need to create a table
1074:30 - called user okay
1074:32 - so go in here at the table section here
1074:36 - and i'm improvising a little bit here
1074:37 - because this is like something that i
1074:39 - plan to show you but i haven't actually
1074:40 - prepared any notes for it so let's just
1074:42 - go ahead and create a table here called
1074:44 - user and as you can see we're gonna be
1074:47 - able to have some
1074:48 - um
1074:50 - fields in here what is called a field in
1074:53 - here is pretty much just like a column
1074:55 - so
1074:56 - by creating a field you're creating a
1074:58 - column okay and the great thing about db
1075:00 - browser for sqlite is that you can see
1075:03 - the sql
1075:04 - code that will be generated for you
1075:06 - which we're actually going to use later
1075:08 - when we integrate sqlite into our
1075:10 - flutter application but for now i just
1075:12 - want you to get the idea of how sqlite
1075:14 - works how it creates the tables et
1075:16 - cetera okay
1075:17 - so now we have the user uh
1075:20 - empty table it doesn't have any fields
1075:22 - or columns i need you to press this add
1075:25 - button right here and what we're going
1075:27 - to do is we're going to just create um
1075:29 - an id
1075:31 - field
1075:32 - now if you're not a developer or
1075:34 - software engineer friend before you may
1075:36 - not
1075:37 - know about id field and why it's
1075:38 - important or if you're a developer from
1075:41 - before you may know id as primary key
1075:43 - from before
1075:44 - so
1075:45 - um an id is just usually an integer
1075:48 - identifier an integer is a number so a
1075:51 - number identifier for every row that you
1075:54 - later later insert into your table so
1075:57 - why is it important because
1075:59 - usually an id is something called a
1076:01 - primary key and a primary key by default
1076:04 - is
1076:05 - is
1076:06 - unique what that means is that for you
1076:08 - to be able to create a user in this
1076:10 - table it has to have its unique
1076:13 - identifier now
1076:15 - if you remember how our um
1076:18 - how we are basically treating users in
1076:21 - our user interface is that we're
1076:22 - treating them by their email so you may
1076:24 - think well the email is a unique
1076:26 - thing as well so why don't we go with
1076:28 - uniqueness off the email well we can
1076:31 - apply uniqueness constraints on the
1076:33 - email field and or the email column but
1076:36 - it is very well established pattern in
1076:39 - database um
1076:41 - world where you're working with
1076:42 - databases that you i mean you can make a
1076:46 - string column
1076:48 - unique such as then such as an email but
1076:50 - a primary key is usually an integer such
1076:54 - as pk or id so it's just a convention
1076:57 - and it's also a good practice to not go
1077:00 - with
1077:01 - like a uniqueness of a string because it
1077:04 - takes more resources in order to
1077:05 - calculate the uniqueness of a string
1077:07 - than it takes for an integer so we're
1077:10 - then going to call this field id
1077:14 - going to be integer and there are some
1077:16 - fields in here which are not rendered so
1077:17 - well i'm going to increase the size of
1077:19 - this and i'm going to do
1077:20 - like this
1077:22 - okay
1077:24 - so
1077:25 - what we're going to do in here um
1077:28 - we're going to take you see n n in here
1077:30 - at the type we're going to leave as
1077:32 - integer that's fine n n means not null
1077:36 - meaning that this field should always be
1077:38 - present it should never allow the value
1077:40 - and emptiness of the value or the
1077:42 - absence of a value to be present there
1077:44 - okay the absence of value to be present
1077:46 - i hope that makes sense basically just
1077:48 - means that the value cannot not be
1077:50 - either so we're we're going to leave it
1077:52 - like that pk stands for primary key and
1077:55 - that is what i oh actually i can move my
1077:57 - mouse over them that's great primary key
1077:59 - so um
1078:00 - it means that it is the key using which
1078:03 - is a unique key in this
1078:06 - table using which we should be able to
1078:09 - then easily query
1078:11 - different users from this table so what
1078:14 - we're going to do is we're going to take
1078:15 - this item right here okay
1078:18 - ai is auto increment i believe and auto
1078:20 - increment is a great functionality in
1078:22 - sqlite and many other uh databases that
1078:24 - allows you as the as the name uh
1078:27 - suggests
1078:28 - and as the name indicates that by you
1078:31 - creating for instance a user with a
1078:34 - specific email and you insert that user
1078:36 - into the database in this table
1078:39 - and you don't even have to assign an id
1078:41 - to that user you just say here is the
1078:42 - user email boof put it in the database
1078:46 - then
1078:48 - excuse me then sqlite is smart enough to
1078:50 - say oh i but i need an id field as well
1078:53 - you haven't provided it and then it
1078:55 - looks at this field and says oh id is
1078:56 - auto increment so it's going to create
1078:59 - that id for you and increment the
1079:01 - previously generated id and assign the
1079:04 - new id to your object for instance if
1079:06 - you have no objects inside this table
1079:10 - and then you add a new user then it
1079:12 - automatically gets the id of zero
1079:15 - and then if you generate the next user
1079:17 - and put it in there then it will get the
1079:18 - id of one so you get the idea okay and
1079:21 - that is exactly what we're gonna do for
1079:23 - this particular field
1079:25 - and unique is just yeah as its name
1079:27 - indicates this field needs to be unique
1079:29 - but if you indicate something as primary
1079:31 - key implicitly it is a unique field okay
1079:35 - and to be honest with you we could
1079:36 - actually check not null as well meaning
1079:38 - that yeah it should always be there so
1079:39 - just in case
1079:41 - so that's for the user field okay
1079:44 - sorry it's for the id field
1079:47 - and now let's go ahead and create a new
1079:48 - field for the user's email
1079:51 - like this and for the email you should
1079:53 - say that it is a text okay
1079:56 - and what we'll do we'll say it shouldn't
1079:58 - be null and also the emails are unique
1080:03 - so have a look at this now it generated
1080:06 - code for it that says create table user
1080:08 - id integer not null email text not now
1080:11 - unique and it sets a primary key of id
1080:14 - with an auto auto increment so
1080:17 - this is kind of like the code that we're
1080:20 - actually going to use in our flutter
1080:22 - application in order to programmatically
1080:25 - create this table
1080:27 - later but for now just keep it in mind
1080:29 - this is kind of like the syntax of
1080:31 - creating a
1080:32 - sqlite table programmatically okay
1080:37 - all right so then you can press ok in
1080:39 - here
1080:40 - and now you can see the user table has
1080:41 - been created for you and here's the code
1080:43 - for it or the schema as it says right
1080:45 - there
1080:48 - all right
1080:49 - great stuff now as we did the user table
1080:52 - we need to go and create our notes table
1080:55 - because remember from before i said
1080:57 - we're going to allow the user to create
1080:58 - notes when they're logged into the
1080:59 - application and by the time they're
1081:01 - actually logged into the application we
1081:02 - should have already created a user uh
1081:06 - row for them
1081:07 - in the user table
1081:09 - and then by creation of every note we're
1081:12 - going to create also a new note in the
1081:14 - database in our note table which we're
1081:16 - just going to create as the caption
1081:17 - indicates
1081:18 - and then we're going to bind that note
1081:20 - to that user in the database so
1081:24 - i need you to go here then and then we
1081:25 - need to create a new table by pressing
1081:27 - create table button okay
1081:30 - so as the caption in the case here let's
1081:31 - call this new table note
1081:34 - and we're then gonna start by creating a
1081:36 - new field called id and we've already
1081:38 - gone through this you know exactly what
1081:40 - to do in here an id field as integer and
1081:43 - we say it shouldn't be in it shouldn't
1081:44 - be null
1081:46 - it should be primary key
1081:48 - and
1081:51 - and i think that's it to be honest with
1081:53 - you so not null and
1081:55 - auto increment as well of course so
1081:58 - all right so that's for that's for the
1082:00 - id of a note now
1082:02 - what other fields do we need in here so
1082:05 - what we could say is for instance that
1082:06 - you have a a user id and so you want to
1082:10 - bind a user to a node
1082:14 - and what we're gonna do in here we're
1082:16 - gonna bind this we're gonna say
1082:17 - literally that this oops where did it go
1082:20 - oh it's a little bit strange interfacing
1082:23 - here so that's okay too
1082:25 - um so user id integer and we're going to
1082:28 - say it's not null
1082:31 - and also what we're going to do is to
1082:34 - what we want to do is for this user id
1082:36 - to be kind of like bound to
1082:39 - a user tables id field and that's that's
1082:42 - called a
1082:44 - foreign key so you have a primary key
1082:47 - which is the key that your table itself
1082:49 - manages as its own field and then you'll
1082:51 - have a foreign key as its name indicates
1082:54 - that it is it is a field inside your
1082:56 - table that is bound to another tables
1082:59 - something else column so in this case
1083:01 - our user id should be bound to the user
1083:03 - tables id column and you can create that
1083:06 - with db browser for sqlite inside
1083:08 - constraints
1083:10 - and in here let's see
1083:12 - we add a constraint and we say we have a
1083:14 - foreign key
1083:15 - and in here
1083:16 - so let's say
1083:18 - sqlite foreign key
1083:20 - and we say the user id
1083:24 - and we say apply
1083:26 - and you can see now it says foreign keys
1083:28 - or id references it's not at the moment
1083:30 - referencing anything
1083:31 - so
1083:32 - i wonder if that
1083:35 - field is hidden somewhere to the right
1083:38 - hand side
1083:41 - and how we could possibly create that
1083:45 - let's see i just remember from before
1083:47 - that this was a little bit strange to
1083:49 - get working from the beginning so
1083:51 - name oh maybe it's it's the name right
1083:53 - there so
1083:56 - so let's say user id references
1083:58 - sqlite foreign key let's see how it's
1084:01 - created foreign key user id
1084:03 - references
1084:04 - let's just say name
1084:06 - should we say um in here if i say blob
1084:10 - what happens
1084:11 - foreign keys ready references
1084:13 - contains blah
1084:15 - so that's not that's not really what i
1084:17 - wanted in there so i'm going to remove
1084:18 - this plot that i just created and let's
1084:20 - see if we can change the sequel we can't
1084:24 - are there no other fields available here
1084:26 - that we can play with
1084:29 - perhaps not
1084:30 - and i want to remove this just to see if
1084:32 - i've made any mistakes in there so
1084:34 - let's say
1084:35 - so here i can see we have a user id and
1084:38 - then there is a foreign key and i can
1084:41 - see here this is perhaps the right
1084:43 - actual way of doing i remember there was
1084:45 - something really strange about it and
1084:46 - now i remember that it is hidden under
1084:49 - this foreign key um column unfortunately
1084:53 - i believe it's a little bit of a strange
1084:54 - interface that's okay i'm just still
1084:57 - very very grateful that we have db
1085:00 - browser for sqlite as a free software
1085:02 - and perhaps even an open source software
1085:04 - i'm not sure about that and i'm very
1085:06 - grateful for every developer who's
1085:08 - worked on this so
1085:09 - i just hope that it um
1085:11 - that's understood but what we're going
1085:13 - to do here in here we want to bind this
1085:15 - user id to the id field of the user
1085:17 - table so just click here under foreign
1085:19 - key and double click actually i can see
1085:21 - then this magic thing appears here
1085:24 - so let's go ahead and say that we want
1085:27 - to bind this to the user table id field
1085:31 - and
1085:32 - i believe that should be it yeah and you
1085:35 - can see now the code generated here says
1085:38 - we have a foreign key called user id and
1085:40 - it references the user table id field
1085:44 - okay
1085:46 - perfect um now we also need to do is to
1085:49 - create another field in here and that's
1085:51 - the text of every note
1085:54 - so what we're going to do for notes is
1085:56 - going to be very simple our notes are
1085:58 - not going to include any sort of
1086:00 - um
1086:01 - they're not going to include any sort of
1086:03 - for instance um
1086:06 - images they're not going to include any
1086:08 - sort of
1086:10 - ordered list or unordered list they're
1086:12 - going to be simple texts okay and they
1086:15 - don't even have titles the title of a
1086:17 - note we're going to derive from the text
1086:19 - of the notes so
1086:20 - it's very simple
1086:21 - so for the text of the note let's just
1086:23 - go say it is of type text
1086:26 - and uh
1086:27 - i believe i believe that's all we need
1086:31 - right now so
1086:33 - user id text and yeah that's fine and
1086:36 - also to be honest with you if you want
1086:37 - to you could also create a other fields
1086:40 - in here you see in this uh in this
1086:43 - course what i what i want to do in the
1086:45 - beginning is to allow us to create a
1086:47 - local database that you can store all
1086:50 - the users notes in it but i want you to
1086:53 - also be able to
1086:54 - later in the future get rid of this
1086:56 - local database and replace it with
1086:57 - firebase that's like the goal um however
1087:00 - some of you may actually decide to keep
1087:02 - this local database store the user's
1087:04 - information in this local database and
1087:07 - not the user's information the user's
1087:08 - notes in this database and then you may
1087:11 - want to decide to have some sort of a um
1087:14 - utility service that sits in the
1087:15 - background and syncs these notes with
1087:17 - firebase at appropriate time so
1087:20 - that's up to you if you want to do that
1087:21 - then you may want to actually create a
1087:22 - little fill in here that's called is
1087:25 - synced with server or something like
1087:27 - this okay
1087:30 - or it's synced with cloud i've
1087:32 - called it in my note so let's go ahead
1087:33 - and do that although we're not actually
1087:35 - going to use this field but i just want
1087:36 - to demonstrate to you that this field is
1087:38 - possible to
1087:40 - achieve with
1087:42 - sqlite
1087:44 - then in here let's say it is an integer
1087:47 - also
1087:48 - um and we're going to say the default is
1087:51 - 0 meaning it's not synced
1087:54 - basically true or false in
1087:57 - true could be translated to any value
1087:59 - that is not 0 and 0 could be translated
1088:01 - to the value of false so putting the
1088:02 - value of
1088:03 - zero in here meaning that it is not
1088:06 - synced with any cloud
1088:08 - storage
1088:09 - so let's then go ahead and say that uh
1088:12 - this is integer and it's um we should
1088:14 - say it's not null and um and it doesn't
1088:18 - have to be unique so now you can see
1088:20 - that this is the result of the creation
1088:22 - of our tables this is id integer not
1088:24 - null and the id is also primary key in
1088:27 - auto increment then there is a user id
1088:29 - which is integer not null but it's also
1088:31 - a foreign key to the user table under
1088:33 - the id column
1088:35 - or the id field and then we have another
1088:37 - field here says text of type text and
1088:40 - then another field that's called isync
1088:41 - with cloud integer not null default zero
1088:44 - okay so
1088:46 - that's all we need to do
1088:48 - and i'm going to press okay and i need
1088:49 - to do the same thing on your side all
1088:52 - right
1088:53 - now we have two um
1088:56 - we have two
1088:57 - tables in our database
1089:00 - so let's go ahead and um
1089:04 - let's go ahead and move on to the next
1089:06 - point that we're going to talk about you
1089:07 - see as the captioning case we need to
1089:09 - create these programmatically otherwise
1089:11 - we have to move this
1089:14 - database that we just created called
1089:16 - testingdb
1089:17 - manually into the documents folder of an
1089:19 - application i'm going to explain what
1089:21 - this actually means you see
1089:23 - now we have a file called testingdb it
1089:27 - has the database for our application
1089:30 - with some tables okay
1089:32 - however
1089:33 - we need to be able to create these
1089:35 - tables programmatically if they don't
1089:36 - exist inside our application you see
1089:40 - this testing db for me is sitting on my
1089:42 - desktop it has absolutely nothing to do
1089:44 - with our flutter application and you
1089:46 - could be smart and like drag this db
1089:49 - into your firebase application flutter
1089:51 - application and then kind of copy it to
1089:53 - the right place when the application is
1089:55 - is executed in the user's telephone or
1089:58 - on the tablet
1089:59 - and then try to read from that database
1090:01 - it is possible but what i'm going to do
1090:03 - in here is i'm going to show you
1090:05 - a better way of doing this in that we're
1090:08 - going to actually create these tables
1090:10 - programmatically in our flutter
1090:12 - applications so that
1090:13 - you also see that process and how that
1090:15 - works how can you integrate with
1090:17 - sqlite inside your flutter application
1090:20 - okay
1090:22 - all right so in order to do that as a
1090:24 - captioning case we need a few
1090:25 - dependencies uh we need sql sqflight
1090:29 - path provider and path
1090:32 - and um i'm gonna then explain to you why
1090:34 - we need these dependencies you see sql
1090:36 - sqflight is a package it's a third-party
1090:39 - package that we need to add to our
1090:40 - application in order for our flutter
1090:42 - application to be able to talk with sql
1090:45 - flight
1090:46 - so that's that's that and that is for
1090:48 - storage actual storage and talking with
1090:51 - the database that package used for okay
1090:54 - now there is a dependency that we have
1090:57 - to drag into our application called path
1090:58 - and path is used for us to be able to
1091:01 - grab the applications documents folder
1091:05 - so that we can actually create a file
1091:07 - inside a documents folder and place our
1091:10 - data inside that file just like i'm
1091:13 - placing the data for nodes and user
1091:15 - inside this testing db file on my
1091:17 - desktop so
1091:18 - the path
1091:20 - uh provider and the path provider uh i
1091:23 - may have actually taught set paths but
1091:25 - it's actually called path provider path
1091:27 - provider dependency allows us to grab
1091:30 - the the applications
1091:32 - documents folder and if you're not
1091:34 - familiar with mobile application
1091:35 - development you may not know this but
1091:37 - applications that sit on the uh on an
1091:40 - android phone or tablet and on ios
1091:43 - telephone or ipad os tablet
1091:45 - they have their own file structure so
1091:48 - every application in itself has a
1091:50 - document
1091:51 - directory so
1091:53 - whereas on your computer like if you're
1091:55 - sitting on a from a laptop or a desktop
1091:57 - you have a documents folder that other
1092:01 - applications that run on your operating
1092:03 - system could get access to so it's one
1092:05 - documents folder every application can
1092:08 - request access to and store information
1092:10 - in it and read from it but that's not
1092:12 - the same concept in mobile devices and
1092:15 - on tablets in that every application
1092:17 - runs inside something called sandbox the
1092:20 - sandbox is like a it's like a
1092:23 - cage inside where the application
1092:25 - resides and all the application data
1092:27 - resides in that sandbox so
1092:30 - every application can request access
1092:32 - from the operating system to read its
1092:34 - own documents folder okay and that is
1092:37 - what the
1092:39 - path provider
1092:40 - package is gonna allow us to do
1092:43 - to find our applications documents
1092:45 - folder in which we're gonna store our
1092:48 - database file
1092:50 - now
1092:51 - we also need as i mentioned a
1092:53 - a package called path
1092:55 - and
1092:57 - we need this path just for a very single
1092:59 - up a simple operation and
1093:01 - let's say that we have uh use path
1093:04 - provider to get our documents folder now
1093:06 - we want to
1093:08 - create a file in this documents folder
1093:11 - and kind of like get the full path of
1093:12 - this file documents folder slash
1093:15 - this file and that's what we need the
1093:17 - path package because it has a great
1093:18 - function called join that allows us to
1093:20 - take the path or of a directory or
1093:23 - folder and
1093:24 - join that path with a file name and it
1093:28 - gives us the entire path
1093:29 - back so we can access that file okay
1093:32 - so
1093:34 - a lot of information i'm gonna take this
1093:36 - um into another
1093:38 - screen so you don't see it and i can see
1093:41 - here it's asking for to control this
1093:43 - computer's access now i'm going to deny
1093:44 - that for now
1093:46 - um all right so what we're going to do
1093:48 - i'm going to bring our code up if i can
1093:50 - find it
1093:51 - and here's the code how we left it in
1093:53 - the previous chapters
1093:55 - and i can see that it is running
1093:57 - excuse me in scrcpy i'm going to bring
1093:59 - it here i'm not actually sure if you
1094:01 - need a crcpy in this chapter so it may
1094:03 - be better for me to just to minimize scr
1094:05 - cpy
1094:07 - and i'm going to make this code a little
1094:09 - bit bigger here as well okay
1094:11 - so
1094:13 - so what we need now
1094:15 - is to first before we go ahead and
1094:18 - actually create our notes service is to
1094:20 - bring in those dependencies okay
1094:22 - let me change this screen layout a
1094:24 - little bit so you see better i'm going
1094:25 - to increase the font as well
1094:27 - so i need you to go to your uh
1094:31 - editor text editor or id if you're using
1094:33 - and we need to bring in those uh
1094:36 - dependencies okay
1094:38 - so let's go and bring up uh your web
1094:41 - browser and say pop.dev and in public
1094:44 - dev search for sql flights okay and you
1094:47 - can see it's right there and the way to
1094:49 - install it is very simple you should be
1094:51 - able to just say
1094:53 - uh flutter pop at sqflight so let's go
1094:56 - ahead and do that by hand
1094:59 - and let's give it a flight remember it's
1095:01 - not sq sqlite it's sqlite
1095:07 - okay that dependency has been added then
1095:09 - i'm going to say flutter pop add provide
1095:12 - a path provider and we can actually
1095:14 - search for it in popdev path provider
1095:18 - and it is right there
1095:20 - it's developed by the people who have
1095:22 - brought us flutter and so to begin with
1095:25 - at google so it's not really a third
1095:27 - party application or third party uh
1095:30 - package and we can actually have a look
1095:31 - at sql flight as well and see who's
1095:33 - developed that
1095:35 - oh it's another yeah it's another
1095:37 - publisher is not flutter themselves so
1095:40 - let's go back to path provider
1095:43 - and i'm gonna just say
1095:45 - installing as we can see is flutter pop
1095:47 - add path provider let me just copy that
1095:50 - and paste it there
1095:52 - add path provider
1095:55 - and then we also need path so let's go
1095:58 - back in here and just type path i
1096:00 - believe this is my flutter team yeah
1096:01 - dark dev so let's just say flutter pop
1096:05 - add a path
1096:10 - alright that's going to do its work and
1096:12 - now if you go to our um
1096:16 - pop special
1096:18 - then you should be able to see those uh
1096:21 - dependencies sqflight path provider and
1096:24 - path are right there okay
1096:26 - now that we've done that we can go and
1096:29 - do what we uh are supposed to do in here
1096:31 - which is create our notes service you
1096:34 - can see that in the
1096:35 - uh in the description i've provided here
1096:37 - in the caption i said that we're in
1096:38 - creating inside a folder called crud
1096:40 - and we already have lib services you can
1096:43 - see in here lib services and lib
1096:45 - services auth but we don't have crud so
1096:48 - i'm gonna go in here in lib and just say
1096:51 - new file and i'm gonna say services
1096:54 - well slash
1096:55 - absolutely it's saying that it already
1096:56 - exists so inside services i'm going to
1096:58 - say new file then i'm going to bring it
1097:01 - so you can see it as well oh where did
1097:03 - it go
1097:04 - services new file
1097:06 - crud
1097:08 - i think i need to change the screen
1097:10 - layout so unfortunately so you'll see it
1097:13 - better services again new file in here
1097:18 - a new file uh third time or fourth time
1097:21 - lucky crud and then nodes service
1097:25 - dot
1097:28 - okay so
1097:29 - what we're going to do with this node
1097:31 - service is to uh
1097:33 - is to basically grab
1097:36 - a hold of our database it is the primary
1097:39 - service that is gonna work with
1097:41 - our sqlite database it's gonna grab
1097:43 - users it's gonna
1097:45 - create new users delete users it's gonna
1097:48 - find users it's gonna create notes
1097:51 - delete nodes update nodes everything
1097:53 - everything that we need from our user
1097:55 - interface this
1097:56 - node service is going to
1097:59 - facilitate that for us okay
1098:04 - okay so
1098:06 - what we need to do inside uh are
1098:12 - so what we need to do now is to actually
1098:14 - i think before we do that we need to
1098:16 - import our dependencies so
1098:18 - let's import our dependencies we need uh
1098:20 - three dependencies if you remember path
1098:22 - path provider and sqlite so
1098:24 - um i'm gonna
1098:27 - bring those in here so we don't have to
1098:29 - type it again
1098:31 - so imports are kind of like boring and i
1098:35 - i don't rather not type them so let's go
1098:37 - in here and you can have a look at what
1098:38 - i've imported here package sql flight
1098:40 - and then we import that
1098:42 - then we also have the path provider okay
1098:44 - so that we can get the documents folder
1098:46 - for this application and then we also
1098:48 - are importing package path path and then
1098:50 - i'm doing this show syntax in order to
1098:54 - bring in this particular function called
1098:56 - join all right
1098:58 - so
1098:59 - you could also skip that but the problem
1099:01 - is that then you get everything inside
1099:03 - path of dart and that's not what i want
1099:05 - so i just want us to get this particular
1099:07 - function inside
1099:09 - path.dart and you could also do the same
1099:10 - thing in here to be honest with you you
1099:12 - could just say show um and i think the
1099:15 - function is called get application
1099:16 - documents directory so let's do that why
1099:19 - not let's just get that particular
1099:21 - function from path provider as well okay
1099:24 - we don't need the entire path provider
1099:25 - all right
1099:27 - all right that's great
1099:29 - so
1099:32 - what we need then is for us to be able
1099:34 - to
1099:36 - grab a hold of our
1099:38 - current database path as i mentioned are
1099:41 - every application that you develop with
1099:43 - flutter for mobile application mobile
1099:45 - devices such as android and ios and ipad
1099:48 - os they have their own documents
1099:50 - directory and we're going to create and
1099:52 - we're going to get the path of the
1099:54 - documents directory and then we're what
1099:56 - we're going to say is we're going to
1099:58 - join that using path
1100:01 - dependency
1100:02 - with a name that we are going to specify
1100:05 - for our database okay
1100:07 - so
1100:08 - um
1100:10 - what we need to do then is to let's go
1100:12 - ahead first actually and take care of
1100:14 - some other important matters that uh
1100:17 - need to be dealt with before we actually
1100:20 - create the function functionality for
1100:21 - for our database uh implementation you
1100:24 - see note service is going to talk with
1100:26 - database but before you can do that it
1100:28 - needs to have some sort of dart
1100:30 - representation of those two two very
1100:32 - important tables that we created um user
1100:36 - and note so if you read that data from
1100:38 - the database how are we going to
1100:40 - represent it inside our dart application
1100:43 - and for that we need dart classes
1100:47 - so
1100:48 - what we need now is to as a caption in
1100:51 - the case we need database users create a
1100:53 - class called database user inside notes
1100:56 - service dart
1100:59 - all right that is going to be a bit of
1101:00 - code so i hope you're ready for it
1101:03 - and let's just go ahead i'm looking at
1101:06 - my notes
1101:07 - let's go ahead and create as the caption
1101:09 - indicates we create a class in here
1101:12 - i make the
1101:13 - a little bit bigger class and i'm just
1101:15 - going to say database user okay
1101:20 - now if you remember from db browser for
1101:22 - sqlite i'm going to bring it here every
1101:24 - user had
1101:26 - can we actually
1101:28 - oh we can browse it but i want to go
1101:29 - back to the user
1101:31 - and modify the table save it and you
1101:33 - remember it had an id and an email id
1101:35 - was integer and email was text so that's
1101:37 - what we're going to define in here okay
1101:39 - so we're going to say final and id and
1101:42 - final string
1101:44 - email
1101:46 - get help from visual studio to
1101:47 - completely complete this i'm not going
1101:49 - to explain these again and again because
1101:51 - we've explained this quite a lot in
1101:53 - previous chapters so by this point i
1101:55 - just assume that you know what these are
1101:58 - let's make this a constant initializer
1102:00 - and then let's go ahead and say these
1102:02 - two
1102:03 - parameters are required parameters so
1102:05 - they become also named parameters by
1102:07 - default okay
1102:09 - and that's that put a comma here so we
1102:12 - get dark formatter to do its magic
1102:15 - and what we're going to do
1102:16 - is remember when we
1102:19 - actually you shouldn't remember because
1102:21 - you don't know this maybe yet but when
1102:23 - we talk with
1102:24 - our database we are going to read
1102:28 - like hash tables
1102:30 - for every row that we read from our for
1102:33 - from that table so every user inside
1102:36 - that database
1102:38 - table called user is going to be
1102:40 - represented by this object a map of a
1102:43 - string and an optional object okay so
1102:46 - that's a row inside the user table
1102:50 - now imagining that the
1102:52 - this
1102:53 - node service that we're going to create
1102:55 - soon
1102:56 - reads these
1102:58 - users from the database and it should be
1102:59 - able to pass this to our database user
1103:02 - class and the database user class should
1103:04 - create an instance of itself
1103:07 - depending on the values inside this map
1103:09 - all right so let's go ahead and create
1103:12 - a constructor we call it database user
1103:15 - and then we say front row
1103:17 - and then we say we get a map of a string
1103:20 - and an optional object in here and then
1103:22 - let's just call it map okay
1103:25 - so what we're going to do in here is
1103:27 - we're going to create the shorthand for
1103:29 - creating and constructing our object and
1103:31 - we'll say the id is equal to inside this
1103:33 - map there needs to be some sort of a
1103:36 - column called an id column so instead of
1103:38 - hard coding that in here like this let's
1103:40 - go and define a constant here and just
1103:42 - call it id column and let's just say
1103:45 - that this is equal to id and in here
1103:47 - we're just going to say id is equal to
1103:49 - ib column just like that all right
1103:52 - and then what we're going to say is we
1103:54 - also need the email an email is equal to
1103:59 - map
1104:00 - and remember we have the email i'm going
1104:02 - to open the user in here
1104:06 - modify table
1104:11 - and let's go and have a look at this
1104:13 - email which is text right there okay
1104:17 - so
1104:18 - the table that column basically is
1104:20 - called email so let's go and go ahead
1104:22 - and create const i'm going to make this
1104:24 - a single single code as well because
1104:26 - that's like the preferred way of doing
1104:28 - it and let's call it email column and
1104:30 - i'm going to assign this to
1104:32 - full email and in here i'm just going to
1104:34 - say email column
1104:36 - as a string
1104:37 - and this should be as inked so
1104:41 - this was
1104:42 - i mean it looks complicated but it
1104:43 - really isn't so and you can see it's a
1104:46 - constant so we could also actually tag
1104:48 - this as immutable and we need to import
1104:51 - foundation in order to be able
1104:54 - to do that
1104:55 - okay
1104:57 - now that we have our database user we
1104:59 - need to also implement a few more
1105:01 - functionalities for
1105:03 - this class before we're actually done
1105:05 - with it
1105:06 - so the three things that we need to do
1105:09 - for it is first to create like a string
1105:11 - descriptor for this class so that if
1105:13 - we're printing out this user to the
1105:15 - debug console
1105:17 - otherwise
1105:18 - i mean before i say otherwise if we're
1105:20 - printing out an instance of the database
1105:22 - user to the debug console so we're
1105:25 - looking at the various users that are
1105:27 - inside our database
1105:29 - if we do not implement two string on our
1105:32 - class it's literally just gonna say
1105:34 - instance of database user in the console
1105:36 - and that's not so useful so it's my it's
1105:39 - my um
1105:40 - habit to if i'm planning to print out
1105:42 - these things to the console it's my
1105:44 - habit to go and implement two strings so
1105:46 - let's just in here say to string
1105:49 - and it gives us the overwrite and what
1105:51 - we're going to do in here is just we're
1105:53 - going to say a person
1105:55 - and person
1105:58 - id is equal to dollar id
1106:00 - and email is equal to dollar email okay
1106:03 - so that's for your to string
1106:05 - then what we need to do is also
1106:07 - implement some sort of equality
1106:10 - behavior for our class you see we want
1106:13 - to be able to see if two different
1106:15 - peoples that we've retrieved from the
1106:16 - database are equal to each other or not
1106:18 - so if if i say if person x is equal to
1106:22 - person y then like read the person wise
1106:24 - notes such as something like that so
1106:27 - let's go and implement equality for our
1106:29 - class and the way to do that is you
1106:32 - overwrite
1106:33 - a boolean operator and it's called bool
1106:37 - operator equal equal
1106:39 - and in here you would have a covariant
1106:42 - which we haven't talked about yet and i
1106:45 - will talk talk to you right now about it
1106:48 - so
1106:49 - what covariance is is a keyword in dart
1106:51 - that not many people know about but it
1106:53 - allows you to change the behavior of
1106:56 - your input parameters so that they do
1106:58 - not necessarily conform to
1107:00 - the signature of that parameter in the
1107:03 - super class so remember we're doing
1107:05 - overwrite here meaning that there this
1107:07 - functionality this operator is already
1107:09 - defined at the object level so let's go
1107:12 - to object
1107:14 - just type object somewhere for instance
1107:16 - void hello
1107:18 - and then say object and then command
1107:20 - click on it just so you can go there and
1107:23 - search for operator
1107:25 - equal equal and you'll see in here that
1107:27 - it says external operator equally and
1107:29 - the parameter should be of type object
1107:32 - now we don't want to do that we want our
1107:35 - classes to be compared to other classes
1107:37 - of the same type so if you don't
1107:40 - put covariant in here you'll get an
1107:42 - error from the
1107:43 - analyzer and you'll soon see that
1107:45 - actually we're going to remove that soon
1107:47 - so
1107:48 - in here we're saying that we're going to
1107:49 - compare our class with equal equal and
1107:51 - instance of our class with equal equal
1107:53 - and we're going to compare with another
1107:54 - user of the same class okay and then
1107:57 - here we're just going to say our id
1107:59 - should be equal to the other id that's
1108:01 - our equality
1108:04 - now let's go ahead then and remove this
1108:06 - covariant as i promised you
1108:08 - and now you'll see you'll get an error
1108:10 - saying that oh wait a minute according
1108:12 - to object equal equals should compare
1108:15 - the current object with another object
1108:17 - but using covariant you're telling dart
1108:19 - that hey i'm not comparable with other
1108:22 - objects of any other class i'll only
1108:24 - comparable with database user instances
1108:26 - so make that happen all right
1108:28 - so
1108:29 - then after you implement equal you have
1108:31 - to also implement hashcode as is
1108:32 - suggested by the analyzer so i'm going
1108:34 - to get help from the dart
1108:36 - from visual studio code and i'm going to
1108:38 - say create method hashcode
1108:40 - and in the overwriting of hashcode i'm
1108:42 - just going to return my id's hashcode
1108:46 - okay so this basically the id is
1108:49 - becoming the primary key of this class
1108:51 - using which it will hash itself so it
1108:53 - can be placed inside maps or
1108:57 - hash nodes if you're
1108:59 - if you're a ros developer or
1109:02 - a dictionary if you're a swift developer
1109:04 - so
1109:05 - uh that's hashing okay so it feels like
1109:08 - we're actually done now with this um
1109:13 - with the with our database user so
1109:16 - and that was quite a bit of code but we
1109:18 - managed that
1109:20 - all right now that we've done the
1109:21 - database user we need to do something
1109:23 - similar but this time we need to do it
1109:25 - for our nodes so we have a database user
1109:28 - now we have to create something called a
1109:30 - database node okay note
1109:32 - not node
1109:34 - and i'm going to do that under the
1109:36 - database user just so that we can have
1109:39 - closer access to these constants all
1109:41 - right
1109:42 - so i suggest you do the same thing so
1109:43 - let's just say we create a class and we
1109:45 - call it database note
1109:47 - and remember from our database schema
1109:49 - that a note so if i go in here and say
1109:52 - right clicks right click and modify
1109:54 - table then we had id user id text and a
1109:58 - field call is synced with cloud all
1109:59 - right so let's go ahead and do that id
1110:02 - is integer user ids integer text is text
1110:04 - or string as ins is synced with cloud
1110:07 - it's just an
1110:08 - integer in here but we're gonna
1110:09 - represent it as a boolean all right
1110:12 - so keep those four fields in mind so
1110:14 - let's go ahead and say final id and
1110:17 - mint id
1110:19 - and we have a final int in our database
1110:22 - we call the user underscore id because
1110:23 - that's a convention in sqlite
1110:26 - or sql generally that you don't put you
1110:28 - like you don't write your fields with
1110:30 - user uh
1110:32 - id usually you don't type like this the
1110:34 - way we type with camel case in dart in
1110:36 - other languages we just say user
1110:38 - everything's under everything is
1110:40 - lowercase and different words are
1110:42 - separated from each other with
1110:43 - underscore but that's not the case in
1110:45 - dart and other languages instead we say
1110:47 - user
1110:49 - user id like this with panel case all
1110:51 - right
1110:52 - and we're also going to create let me
1110:54 - just move this a little bit there and
1110:56 - we're also going to create um
1110:59 - the string for our text
1111:03 - and
1111:04 - last we're going to say is synced with
1111:07 - cloud something like that all right and
1111:09 - again remember we're not going to use
1111:10 - this input cloud it's just for you to
1111:13 - understand how we create different
1111:14 - fields in the database
1111:16 - and yeah it's just it's just something
1111:18 - that you future you guard yourself
1111:20 - against future changes in your database
1111:22 - schema so by doing this you're allowing
1111:25 - yourself to play with this field so that
1111:27 - you know every note that is locally
1111:29 - created in the local database is not by
1111:31 - default sync with the cloud all right
1111:33 - i want to get help from visual studio
1111:34 - code to complete the constructor for
1111:36 - this and i'm going to go and do
1111:39 - all of these fields as required so i'm
1111:41 - going to say required and i'm going to
1111:44 - copy that paste it right there paste it
1111:46 - right there and there and then i'm going
1111:48 - to put a comma at the end and command s
1111:51 - on mac or control s in windows and linux
1111:54 - to save this and get dart formatter to
1111:56 - format this file for me
1111:58 - all right so that's the initializer
1112:00 - and we kind of also need to do the same
1112:02 - thing that we did here for our database
1112:04 - user and that we need to instantiate it
1112:06 - from a row so let me copy this code the
1112:09 - way it is right there
1112:10 - and i'm going to bring it into our
1112:12 - database note i'm going to paste it
1112:14 - right there and instead i'm going to say
1112:16 - this from row initializer creates a
1112:18 - database note
1112:21 - in our database note we have an id
1112:24 - but we don't have email so in here we're
1112:26 - just going to say user id
1112:28 - is map then we need a new column which
1112:31 - is called user id column okay so let me
1112:34 - just see my notes how i created it
1112:36 - yes i can see it's called just user id
1112:38 - call so go ahead and create a new
1112:40 - constant in here
1112:41 - and call it
1112:43 - user id column which is if you remember
1112:46 - from our schema it was called user
1112:48 - underscore id
1112:50 - so user id
1112:52 - okay
1112:53 - and here we say user id is equal to map
1112:56 - user id column
1112:58 - as a string and it's complaining right
1113:00 - now because we have two more fields to
1113:01 - initialize but we haven't really read
1113:03 - their values from the map so text and is
1113:06 - synced with cloud so for text we're just
1113:07 - going to say text is equal to map
1113:09 - and let's go create a new
1113:11 - consonant in here we say text column
1113:15 - and that's equal to text so it's just
1113:16 - the name of the field or the column here
1113:19 - you see
1113:20 - so let's go ahead and say that's text
1113:22 - and in here we say text
1113:24 - column
1113:27 - and we say add string and i believe
1113:30 - that's how we call it yeah
1113:32 - and we'll be calling a string can be
1113:34 - initialized oh sorry about this the user
1113:36 - id can't be a string it should be added
1113:38 - in so let's just say it's an int and
1113:40 - last but not least is synced with cloud
1113:42 - so we're to say
1113:43 - async with cloud actually is read from
1113:47 - from our database as an integer remember
1113:50 - is synced with cloud as an integer so
1113:52 - we're going to say
1113:54 - we're going to first define a column for
1113:56 - it is synced
1113:57 - with cloud
1113:59 - column
1114:00 - and we're going to call it async with
1114:03 - cloud and
1114:04 - i mean i'm saying uh we're going to call
1114:07 - it but actually we've already called it
1114:08 - we called it is synced with cloud so
1114:10 - just need to copy and paste that in here
1114:13 - you see
1114:15 - okay and then we're going to say is
1114:17 - synced with cloud as equal to now
1114:20 - you see we don't have this uh
1114:24 - data we don't have this field as a
1114:25 - boolean in the database we have it as an
1114:27 - integer so we have to read it as an
1114:29 - integer so we're going to say in the map
1114:31 - there's a column called async with cloud
1114:33 - column and it's an integer okay
1114:37 - if that is equal to one then
1114:40 - return true
1114:42 - otherwise uh
1114:44 - is equal to one true otherwise false so
1114:47 - you see what happened here we read the
1114:49 - column as an integer
1114:51 - and oh if it's equal to one then this
1114:53 - guy is equal to true otherwise this guy
1114:55 - is equal to false okay
1114:58 - now that we've done the initialization
1115:00 - of our
1115:02 - database notes from the from the row we
1115:05 - need to go ahead and
1115:08 - we need to create the tostring as well
1115:10 - for our database note okay
1115:14 - so let's go and overwrite to string
1115:18 - like this
1115:19 - and we're just going to say this is a
1115:21 - simple
1115:22 - note we're going to say
1115:24 - is equal to note
1115:26 - and its id is equal to dollar id is text
1115:29 - is equal to
1115:31 - or just its user id is equal to dollar
1115:33 - user id
1115:34 - which is a field that we have
1115:37 - and then we are not going to print its
1115:39 - entire scene is an entire text instead
1115:41 - we're going to say is synced with cloud
1115:44 - is
1115:46 - other is synced with cloud just like
1115:49 - that all right
1115:52 - all right so yeah i mean optionally you
1115:54 - you may also add text if you want to
1115:57 - it's kind of up to you but
1115:59 - the problem is that the text of a note
1116:01 - could be so long that it actually gets
1116:03 - in the way of you getting information of
1116:05 - your class instance such as its id user
1116:07 - id and a single class so maybe if you
1116:10 - want the text to be there just add it at
1116:12 - the end so it basically doesn't disrupt
1116:14 - the rest of the fields that you may
1116:16 - actually have interest in reading okay
1116:19 - so we did the
1116:21 - implementation for
1116:23 - from uh tostring right now but we
1116:25 - haven't done the equality so let's go
1116:27 - and overwrite the equality as well and
1116:29 - the hash node hash code sorry
1116:31 - i'm going to copy that code from our
1116:33 - database user and bring it into the
1116:36 - database node and i'm going to then
1116:39 - paste it right here so you can see it as
1116:40 - well
1116:42 - we're in the equality we're saying that
1116:43 - we're comparable with a database note as
1116:46 - long as our id is equal to the other id
1116:49 - then we're good to go
1116:50 - for the hash code then we're going to
1116:52 - get our id's hash code all right just
1116:54 - like we did for the other class
1116:58 - wow that was a lot of work to do
1117:01 - okay now we've created the database note
1117:03 - as well as the caption indicates um
1117:06 - so what we need to do now is just to
1117:08 - make sure we have all our constants in
1117:11 - place before we carry on now remember
1117:14 - right after doing these classes we're
1117:16 - going to go ahead and create
1117:18 - our um the actual note service that
1117:21 - talks with our database all right so
1117:24 - before we do that let's create all the
1117:26 - necessary constants such as
1117:28 - the file under which our database is
1117:31 - going to be saved so let's just call it
1117:33 - bb name and we're just going to call it
1117:36 - notes.db all right remember this is like
1117:38 - the file name okay now we're going to
1117:40 - create and you can see in here in our um
1117:43 - file here in as db browser for sqlite we
1117:46 - call this file testing.db and in our
1117:48 - case we're just going to call it nodesdb
1117:50 - and we're going to store it in documents
1117:52 - folder inside that application okay
1117:55 - and then we have two tables and notes
1117:57 - table and a user table so let's go ahead
1117:59 - and create them notes table is
1118:01 - um
1118:02 - votes
1118:04 - and const
1118:05 - user table means user and these are like
1118:08 - table names as we define them here node
1118:10 - and user okay
1118:13 - so those are those and what else do we
1118:15 - need um i think i think that's pretty
1118:17 - much it to be honest with you i think
1118:19 - these are all the constants that are
1118:21 - needed in order for us to be able to
1118:22 - create our notes service
1118:26 - all right let's go ahead now and start
1118:28 - with our note server so i'm gonna clear
1118:31 - this go to the top of this file and then
1118:33 - i'm gonna make some empty space in here
1118:35 - and actually create our notes service so
1118:38 - let's go ahead and create a circuit
1118:40 - class here and call it node service
1118:43 - it's very exciting this is the beginning
1118:44 - of us creating a cross service that
1118:46 - works with our database which we're soon
1118:48 - going to create actually okay
1118:50 - as the cache indicates we need a
1118:52 - function an async function that opens
1118:55 - the database you see opening a database
1118:57 - is not a functionality that you can just
1118:59 - say open now it it will happen
1119:02 - asynchronously because we may need to
1119:04 - for instance grab the current um
1119:07 - current uh folder
1119:09 - do documents folder and then append or
1119:12 - join that documents folder with
1119:14 - our database name which we define here
1119:16 - as a console so it's a lot of
1119:17 - asynchronous stuff that we're going to
1119:18 - happen in there well not a lot but a few
1119:21 - at least
1119:22 - and that is the reason this open
1119:23 - function is going to be asynchronous
1119:25 - okay
1119:26 - so as i caption any case let's go ahead
1119:28 - and create a future void
1119:31 - and call it
1119:32 - just open
1119:33 - and we call it async like that
1119:37 - now this open function is going to keep
1119:40 - hold off
1119:41 - i mean after it has opened the database
1119:43 - is actually gonna
1119:45 - store it somewhere in our node service
1119:47 - so it's going to say hey i've opened the
1119:49 - database
1119:50 - here is the object so that other
1119:52 - functions in the future such as the
1119:53 - functions are going to let us
1119:55 - read
1119:56 - users from the database or you read
1119:58 - notes from the database those functions
1120:00 - then they're going to say ah oh here's
1120:02 - the database instance i know how to grab
1120:05 - values out of it okay so
1120:07 - what we're going to do is to say we have
1120:09 - a database
1120:11 - as you can see it is brought by our
1120:15 - sqflite
1120:16 - library
1120:17 - and we're just going to call it db all
1120:19 - right so
1120:20 - to begin with is null and we're going to
1120:23 - assign to it
1120:26 - all right um
1120:30 - so what should we do now um
1120:33 - let's go ahead then and start by doing a
1120:36 - test and see if this database is already
1120:39 - opened you see if we have an instance of
1120:41 - this database then we can kind of like
1120:42 - assume that this database file has
1120:44 - already been opened and we don't have to
1120:45 - open it anymore so let's just say if
1120:48 - the db
1120:50 - is not null
1120:51 - and just
1120:53 - throw
1120:54 - uh a new exception and we're gonna just
1120:57 - call it a database already open
1120:59 - exception so let's go and define an
1121:01 - exception
1121:04 - uh here
1121:07 - let me see if i can copy and paste that
1121:08 - from my notes
1121:12 - but you see this is just an exception
1121:14 - that's a database already open exception
1121:15 - all right so in here we're just going to
1121:16 - say database already open exception all
1121:20 - right
1121:21 - simple if you call the open function
1121:23 - multiple times while the database is
1121:25 - already open you're going to get an
1121:27 - exception okay so that kind of makes
1121:28 - sense
1121:30 - so let's go ahead and now get the
1121:33 - document
1121:34 - directory path and we have to do a try
1121:36 - in here
1121:37 - because this can actually throw an
1121:39 - exception so let's say find final
1121:42 - docs
1121:44 - path is equal to
1121:46 - and you need to say get documents get
1121:49 - application documents directory if you
1121:50 - have a look at the signature of this
1121:53 - method it says i return a future of
1121:54 - directory so let's go ahead and do that
1121:57 - so we need to await on it and that's the
1121:59 - reason our function is async and that's
1122:00 - the reason we're awaiting because this
1122:02 - returns the
1122:04 - path asynchronously now if you look at
1122:06 - the documentation for this you can see
1122:08 - that it can actually throw an exception
1122:10 - called missing platform directory
1122:12 - exception if the system is unable to
1122:14 - provide the directory
1122:16 - all right if for some reason this the
1122:18 - system isn't able to provide a document
1122:19 - directory to
1122:21 - um to us is going to throw this
1122:23 - exception and that is exactly why we
1122:25 - have our code inside a try statement
1122:27 - here so let's say if that exception is
1122:29 - thrown like this then we're going to
1122:31 - throw our own exception so let's define
1122:34 - an exception we call it unable to get
1122:36 - documents directory
1122:40 - this so it's just a class unable to get
1122:42 - documents directory
1122:44 - exception nothing special about that
1122:46 - okay
1122:49 - and then we in here we say throw
1122:52 - at
1122:53 - uh
1122:54 - the name missing platform oh i see you
1122:56 - see it's it's complaining now and i can
1122:59 - see that you couldn't see the codes i
1123:00 - apologize for that it's complaining and
1123:02 - saying that i can't find this missing
1123:04 - platform directory exception and that is
1123:06 - because this is specified in this um
1123:10 - path provider but for our path provider
1123:12 - we just say show get
1123:14 - get application documents directory so
1123:15 - all other symbols are hidden from us so
1123:18 - we could just remove that and just
1123:19 - import the entire path provider and that
1123:21 - error goes away all right
1123:26 - okay
1123:28 - now let's do this now let's say
1123:31 - i apologize let's get the the actual
1123:34 - path of our
1123:35 - database so to do that you will say and
1123:38 - what are we calling it db path is equal
1123:41 - to join remember we have this function
1123:42 - joined here that we imported from path
1123:45 - and we say join
1123:47 - the docs path the path and our db name
1123:51 - remember the db name is a constant as a
1123:54 - string we define it down here we just
1123:55 - call the notes db
1123:57 - that is now going to be joined with the
1123:59 - actual path of our documents folder all
1124:02 - right
1124:04 - and what we're going to do
1124:05 - is we're going to say we now want to
1124:07 - open the database with a function called
1124:09 - open database which comes from
1124:11 - skflight
1124:13 - and the path is dbpath and remember this
1124:16 - open database i believe is the future of
1124:19 - our database you see so we await on it
1124:22 - all right
1124:24 - and
1124:25 - then we assign that to our uh local
1124:27 - database instance that's it
1124:29 - so that was basically
1124:32 - opening the database so we've now opened
1124:34 - it but
1124:36 - remember
1124:37 - all we've been working on right now is
1124:39 - inside this db browser for sqlite
1124:44 - this
1124:45 - thing this program here is managing its
1124:47 - own database file this database file is
1124:50 - not going to exist in your flutter
1124:52 - application we've just played around i
1124:54 - just showed you how to create a sqlite
1124:56 - database how to create different tables
1124:58 - what fields are what primary key is so
1125:01 - you need to kind of like forget about
1125:03 - this this application and where it
1125:05 - stores this data
1125:06 - you need to now focus on how is your
1125:09 - flutter application going to be able to
1125:10 - create those tables how is your flutter
1125:12 - application going to be re reading data
1125:14 - from the tables or deleting data from
1125:16 - the table so
1125:17 - if you think about it if you've
1125:19 - completely forgotten about the
1125:22 - db browser for sqlite then you could
1125:24 - just say at this point in time you see
1125:26 - open database also can create the
1125:28 - database for you if it doesn't exist
1125:31 - we can look at the documentation for it
1125:33 - here uh oh my god
1125:35 - opens the database at a given path by
1125:37 - the system
1125:38 - uh on is the first let's see encrypt is
1125:41 - called if the database did not exist
1125:43 - prior to calling opendatabase okay so it
1125:45 - can create the database for you which is
1125:46 - what it's gonna do but those tables are
1125:48 - not gonna exist and we have to have a
1125:50 - way of creating those tables if they
1125:52 - don't exist upon us opening the database
1125:55 - okay and that's what we're gonna do here
1125:57 - so let's go ahead and actually grab the
1126:01 - code for creating the user table so i'm
1126:04 - just going to say const create
1126:08 - user table is equal to and this is now
1126:11 - i'm going to actually use the syntax
1126:12 - that we haven't used before and that's
1126:14 - triple quotation marks okay
1126:16 - and then triple quotation marks on the
1126:18 - next line and then a semicolon now what
1126:20 - this does is that it allows you to place
1126:23 - pretty much anything inside this string
1126:25 - without you having to escape that string
1126:27 - because triple quotation marks are very
1126:29 - unique so if you paste any program other
1126:31 - programming languages code in here
1126:33 - chances are that programming languages
1126:34 - code is not going to include three
1126:37 - three quotation marks so the purpose of
1126:40 - this is that now you can go ahead in
1126:42 - your sqlite uh db browser for sqlite and
1126:45 - grab those users um if i go here
1126:48 - database structure user modify table and
1126:51 - you can literally now grab this code
1126:52 - that was created by a db browser for
1126:55 - sqlite and paste it in here you see
1126:59 - so there we go now you have a beautiful
1127:02 - database creation code in here sorry
1127:04 - table creation code that says create
1127:06 - table user blah blah id integer not null
1127:10 - and however we need to take care of
1127:11 - something in here and we just say if not
1127:14 - exists i believe
1127:17 - and we have to put it before user as
1127:20 - well so that's the only thing we're
1127:22 - adding here we're basically saying
1127:23 - create a table call user if it doesn't
1127:26 - exist because
1127:27 - you see we don't want to get an error
1127:29 - because if you create a table that
1127:31 - already exists in the database then
1127:32 - skflight is going to throw an error
1127:34 - saying that this table already exists
1127:35 - okay so that's why we need if not exists
1127:40 - and then what we need to do is to tell
1127:42 - our database this database that we
1127:44 - created up here to execute that command
1127:46 - so we're just going to say execute and
1127:47 - you see it says give me a sequel to
1127:49 - execute and i'm going to give you a
1127:50 - future void and we say okay execute
1127:52 - create user
1127:54 - table and we have wait on it
1127:59 - some comment in here we just say create
1128:03 - user table
1128:04 - and then in here for the um
1128:09 - after we've executed the create user
1128:10 - table we also have to then take care of
1128:13 - uh the creation of our note table
1128:17 - so i'm just going to do the same thing
1128:18 - that we did up here and just say create
1128:20 - note
1128:22 - table
1128:23 - equal to as single quotes triple
1128:25 - single quote semicolon let's go to db
1128:28 - browser for sqlite and grab this node
1128:31 - here and say modify table and grab the
1128:34 - code that was generated for you and just
1128:36 - paste it in here do some formatting so
1128:38 - it becomes a little bit more bearable to
1128:40 - read and have a look at and we do the
1128:42 - same thing that we did up there we say
1128:43 - if not exists like that all right
1128:47 - so
1128:48 - i think i think to be honest with you
1128:50 - we're good to go there i don't think we
1128:51 - need to do anything special in there we
1128:53 - also have to execute that command so i'm
1128:55 - just going to grab the code from there
1128:57 - paste it right here
1129:00 - and like that and i'm going to say
1129:02 - create note table so that's going to
1129:04 - do the creation of the note table as
1129:07 - well
1129:09 - well done that was it that was a big
1129:11 - function
1129:12 - i mean by the standards of what we've
1129:14 - done so far that was quite a big
1129:15 - function okay but generally this is not
1129:17 - considered such a big function i
1129:19 - remember now you have actually constants
1129:21 - in here you could you could i mean
1129:24 - if it's me deciding i would bring this
1129:27 - constant somewhere else not inside this
1129:30 - function we could literally go ahead i
1129:32 - mean i hadn't planned for this but let's
1129:34 - go ahead and grab this constant from
1129:36 - here and bring it to the end of this
1129:37 - file okay where we have all the other
1129:39 - constants like this
1129:40 - and let's go and grab the other constant
1129:42 - from here
1129:43 - boo
1129:44 - and bring it down as well so we put it
1129:47 - at the end of our file right there
1129:49 - okay
1129:50 - as i said i hadn't planned for this but
1129:52 - i just think it makes sense because now
1129:53 - our function is a lot cleaner to have a
1129:55 - look at here we have a comment for
1129:57 - create the user table let's create a
1129:58 - comment as well here we say
1130:00 - that creates notes table
1130:03 - and remove those empty spaces and just
1130:05 - save your file perfect
1130:08 - now we have the open function
1130:12 - let's go ahead and have a look at how we
1130:14 - can do closing of our database right
1130:17 - let's have a look at
1130:19 - my notes in here okay
1130:22 - let's have a look at our
1130:24 - closing code so i'm going to fold the
1130:26 - open function in here so we don't see it
1130:28 - anymore and let's go ahead and create as
1130:30 - you can see in the caption we have to
1130:32 - say future void close um okay and it's
1130:36 - asynchronous so
1130:39 - what we need to do then is we shouldn't
1130:41 - allow any person to close the database
1130:43 - if the database is not open so let's go
1130:45 - ahead and define an exception for that
1130:47 - and we're going to call the database is
1130:49 - not open okay so i'm going to copy that
1130:52 - exception so i don't have to type it
1130:54 - manually manually because by this point
1130:56 - you know how to create exceptions so
1130:58 - it's nothing extraordinary for you to
1131:00 - learn
1131:01 - database is not open that's a new
1131:02 - exception okay
1131:04 - so what we're going to do is we're going
1131:06 - to say
1131:07 - we have our database final db is equal
1131:10 - to our local db up there and we say if
1131:13 - db is null
1131:15 - and then we throw database not open oops
1131:20 - database
1131:22 - is not open
1131:25 - else we're gonna ask skflight to close
1131:28 - that database for us and the way to do
1131:30 - that is just to say db.close and you can
1131:33 - see it's a future of void so that's why
1131:35 - we're waiting on it all right
1131:37 - and then at that point we have to also
1131:38 - reset this local database which is
1131:40 - called underscore data underscore db so
1131:42 - we say db is equal to no
1131:45 - right so easy peasy close went very fast
1131:49 - actually
1131:52 - all right
1131:55 - now what we need you see as we're now as
1131:57 - we have to open and close now we're
1131:58 - going to start working with data in the
1132:00 - database but
1132:02 - in order for you to get
1132:04 - like your um
1132:06 - database so that it can for instance
1132:09 - actually grab
1132:11 - like every function that tries to read
1132:13 - something from the database it has to
1132:15 - have some code in order to make sure
1132:16 - that the database is open otherwise it
1132:18 - has to throw an error so we're gonna
1132:20 - have like five six of these functions
1132:21 - and each of which is gonna check the
1132:23 - database and then do the same thing is
1132:25 - the database open yes if it's not open
1132:27 - throw this error we could put that
1132:28 - particular code inside on our function
1132:30 - that we are going to call getdatabase or
1132:33 - throw okay so let's go ahead in here and
1132:36 - just say this function returns a
1132:38 - database
1132:39 - it database or throw
1132:43 - and
1132:43 - prefix it without underscore saying that
1132:45 - this is a private function and then
1132:47 - we're going to say final db is db
1132:50 - if db
1132:51 - is null
1132:54 - and we say throw um
1132:56 - database is not open
1132:59 - else
1133:01 - we return the db okay so this is a
1133:04 - private function that our reading and
1133:06 - writing internal functions in this class
1133:08 - are going to use in order to get the
1133:10 - current database so that they avoid
1133:12 - doing the same if statement everywhere
1133:13 - okay
1133:16 - all right now we're going to start with
1133:19 - actual code so
1133:21 - to read and write from the database in
1133:23 - this case we're gonna start with a
1133:24 - function called delete user that allows
1133:26 - us to provide as you can see an email
1133:29 - address
1133:30 - and using that email address then we're
1133:32 - gonna delete that user from our database
1133:34 - so you you will learn how to manipulate
1133:36 - data from our or inside our database
1133:38 - okay
1133:40 - so let's go ahead and do that function
1133:42 - signature as it's indicated here i'm
1133:44 - just going to say future void delete
1133:46 - user
1133:47 - and required uh string email
1133:51 - and make this function asynchronous okay
1133:54 - then
1133:55 - what we're gonna do is just to get our
1133:57 - database with this absolutely beautiful
1133:59 - get database or throw function that we
1134:01 - created here so i'm just going to say
1134:02 - final vb is get database or throw so
1134:06 - this in turn is going to throw an
1134:08 - exception called database it's not open
1134:10 - if the database is not open so we don't
1134:11 - have to
1134:12 - manually do that
1134:14 - okay so in order to delete something
1134:17 - from sql flight uh or in this case
1134:19 - sqlite that is managed by sqflight we
1134:22 - can say db dot
1134:25 - d b dot delete and as you can see it
1134:28 - returns a future of the number of rows
1134:31 - that were deleted and then it says okay
1134:33 - which table and then a where clause and
1134:35 - a list of objects to pass to your word
1134:37 - clause so we're going to say the delete
1134:40 - from the user table
1134:42 - and uh
1134:44 - the word clause is gonna be
1134:46 - email is equal to something
1134:49 - and the where arts are in this case are
1134:52 - gonna be email to lowercase okay so i'm
1134:55 - gonna put this
1134:56 - semicolon there and a call in here and
1134:59 - then we're going to wait on it and we're
1135:00 - going to say final
1135:02 - and delete the account is a weight
1135:05 - so in this case i mean as you can see
1135:07 - here is what we're basically doing is
1135:09 - just we're doing formatting we're going
1135:10 - to say we're going to say delete
1135:12 - something from the user table as long as
1135:14 - that something's email is equal to
1135:17 - something and that something is again
1135:19 - that email so you're basically saying
1135:21 - delete
1135:23 - as many objects as possible in the user
1135:25 - table as long as their email is equal to
1135:27 - this and remember we made email unique
1135:29 - so if if we've done our homework right
1135:32 - then deleted count is it should either
1135:34 - be zero meaning that no personal
1135:38 - account or no user with this email
1135:40 - exists in it into table or it should be
1135:43 - one meaning that yeah i could delete uh
1135:45 - without a problem
1135:47 - so
1135:49 - we're actually gonna assert that we're
1135:50 - gonna say if deleted count
1135:53 - is not
1135:54 - one
1135:55 - all right then we're gonna throw an
1135:57 - error could not delete the user so i'm
1135:59 - gonna grab that um exception i'm gonna
1136:02 - place it right here
1136:04 - so we say if we couldn't delete that
1136:05 - user we're just gonna say throw could
1136:07 - not delete user all right
1136:12 - so we couldn't delete that user
1136:18 - um
1136:19 - all right so let's go ahead
1136:22 - now that we have done the delete user
1136:24 - and and remember you may be asking okay
1136:26 - why are we throwing a user maybe that
1136:28 - user doesn't exist and it should just
1136:30 - work fine and of course i mean
1136:32 - it is going to work fine if you have
1136:33 - your try and catch statements when you
1136:35 - call this function
1136:37 - what we're saying is that the interface
1136:38 - of the node service is going to throw an
1136:40 - error through an exception if you call
1136:42 - the lead user with a non-existing email
1136:45 - and that's completely fine for a service
1136:47 - to do but where you're consuming the
1136:49 - service then you can manage and say oh
1136:52 - this delete function is going to throw
1136:53 - an exception by like for instance
1136:55 - looking at a documentation looking at
1136:57 - the code then i'm going to handle it
1136:58 - where i'm calling it as at the call site
1137:01 - which is called okay
1137:03 - so this is completely fine
1137:06 - for a service to do
1137:08 - then what we're going to do as the next
1137:10 - point is to create a user and you can
1137:12 - see
1137:13 - it's going to be a future of database
1137:15 - user so this is beautiful it's going to
1137:16 - actually create a user given an email
1137:18 - address and then it's going to return
1137:20 - that database user to us so let's go
1137:21 - ahead and do that let's just say
1137:23 - future
1137:25 - database user
1137:27 - and we're going to say create user
1137:29 - and a required string field of email
1137:33 - and we're going to make it asynchronous
1137:35 - all right
1137:37 - so in here what we're going to do is
1137:38 - just going to get the database we're
1137:40 - going to say final vb is equal to get db
1137:42 - database or throw
1137:44 - and then we're going to say um
1137:47 - db.query
1137:49 - um like that because we're going to
1137:51 - actually issue a query to the database
1137:53 - okay
1137:54 - so as you can see this is a helper to
1137:56 - query table and return items found all
1137:58 - optional clauses are unfiltered or
1137:59 - formatted as sql queries okay
1138:03 - so um let's go ahead and
1138:07 - in here what we're going to first do the
1138:08 - first thing we're going to encrypt user
1138:10 - now we're going to actually check if a
1138:13 - user with a given email already exists
1138:15 - okay and that's where why we're doing
1138:17 - query and we're not like inserting
1138:19 - something into the database to begin
1138:20 - with we're asking the data to say hey
1138:24 - does in the user table
1138:26 - we're looking for and we're acquiring
1138:28 - the database for a person or a user
1138:31 - whose email is this and that this thing
1138:34 - is actually going to return and let's
1138:36 - have a look at it it's going to return
1138:38 - a list of rows that were available in
1138:41 - the database okay and that list is going
1138:44 - to be empty if no
1138:47 - no entities matched our query okay so
1138:49 - let's just call it final results is
1138:51 - we're querying the user table
1138:55 - and we're going to say um
1138:57 - we're looking for
1138:58 - just one item
1139:00 - and we have a word equal to
1139:03 - we're looking for the email and where
1139:05 - arts are going to be
1139:09 - email to lowercase semicolon at the end
1139:12 - and bring it like this
1139:15 - equal to bb and we wait okay
1139:21 - so by us first
1139:23 - making a query to the database and
1139:25 - checking whether a user with the same
1139:27 - email exists we're basically avoiding
1139:30 - getting an error
1139:32 - for the uniqueness of that email later
1139:34 - on at the sql
1139:36 - layer
1139:38 - so in this case you can see results if i
1139:41 - move my mouse over it and it says that
1139:43 - it is a list of rows and if this list is
1139:47 - not empty
1139:48 - it literally means that a user with that
1139:50 - co without email address already exists
1139:52 - in the database so
1139:54 - let's then say if
1139:56 - results is not empty then we're going to
1139:59 - say throw
1140:00 - user already exists uh
1140:03 - exception and we don't have that
1140:04 - exception yet so let's go ahead and
1140:07 - find that exception for me at least and
1140:10 - i can paste it right here
1140:12 - so define this exception use already
1140:14 - exists
1140:16 - and let's go ahead and throw that
1140:18 - exception user already exists okay
1140:21 - so
1140:22 - that's the our if
1140:24 - statement so at that point we've
1140:25 - basically made sure that that user does
1140:27 - not exist in the database all right
1140:30 - so what we need to do then
1140:32 - is to go and insert that user now that
1140:35 - we've checked that he or she doesn't
1140:37 - exist in the database so we have to go
1140:38 - and insert that user so the way we do
1140:40 - that is by going and telling our
1140:42 - database we say db insert and you can
1140:45 - see it says in which table and then give
1140:47 - me a map of
1140:50 - keys and values which is the column name
1140:52 - and the value for that column all right
1140:54 - so let's just say we insert into the
1140:56 - user table
1140:58 - which is a constant we've defined from
1141:00 - before remember and then the map is
1141:02 - going to be
1141:03 - for the uh let's go back to our db
1141:05 - browser for sql for note sorry for user
1141:09 - uh oops
1141:12 - for user
1141:13 - we have id which is primary key not null
1141:16 - and auto increment so we don't have to
1141:18 - insert the id but we need to insert the
1141:20 - email so let's go ahead and say we have
1141:22 - the email call
1141:24 - is equal to b it's going to be equal to
1141:26 - email to lowercase all right
1141:30 - so like that and insert if you can have
1141:32 - a look here it returns a feature of pins
1141:34 - and if you read the documentation
1141:37 - uh let's see if if it gives us some
1141:38 - documentation here
1141:42 - zero could be returned for some specific
1141:44 - conflict algorithm algorithm algorithms
1141:46 - if not inserted so this is going to
1141:48 - basically give us that
1141:50 - uh
1141:51 - so what it's going to do in this case is
1141:53 - actually going to give us a user id back
1141:55 - i wish there was some good documentation
1141:57 - about it
1141:59 - oh here you can see it says insert
1142:01 - returns the id
1142:03 - so this is very very good this is
1142:06 - actually really cool because remember we
1142:08 - said we return a database user and a
1142:10 - database user actually has an id in it
1142:12 - so
1142:13 - if this function here did not return the
1142:16 - id how else would we get the id then
1142:18 - we'd have to insert and then read that
1142:20 - same user in order to get the id but we
1142:21 - don't have to do that so in here then we
1142:24 - say final
1142:25 - and we say user id is equal to await on
1142:27 - this function functionality
1142:30 - and then we just return a database user
1142:35 - up so you actually see the code then we
1142:37 - say user id and the email is email the
1142:39 - way it was before
1142:41 - they added a column there
1142:44 - fantastic now we've taken care of the
1142:46 - create user
1142:48 - uh
1142:49 - function in our database so that's
1142:51 - create user i'm gonna follow so now we
1142:52 - have create user delete user and open
1142:54 - and close and a private function in
1142:56 - order to get the current database
1142:58 - okay
1143:00 - as the caption indicates now we have to
1143:02 - take care of a function called get user
1143:05 - which it can retrieve a user given its
1143:08 - email address alright so
1143:10 - i'm going to go ahead and
1143:12 - basically write that function signature
1143:14 - in here by pasting it from my note so i
1143:16 - don't have to type it manually but you
1143:18 - have it in the captions in case you need
1143:19 - to go go to it we just like we did in
1143:22 - the other functions we're going to get
1143:23 - the current database or throw an error
1143:25 - if the database isn't open so we're
1143:26 - going to say db is get database or throw
1143:31 - then what we're going to do is we're
1143:32 - going to query the database for that
1143:35 - email address and if you remember in the
1143:36 - create user we already did that so let's
1143:38 - go and copy that
1143:40 - boof
1143:41 - like this
1143:42 - and i'm going to fold create user and
1143:44 - let's go in here and paste that code we
1143:46 - have the results okay
1143:49 - so in this case we have to do the
1143:51 - opposite you see in create user we
1143:53 - checked to make sure
1143:56 - that
1143:56 - um
1143:57 - the
1143:58 - results are actually empty because we
1144:00 - want to make sure before we create a new
1144:02 - user with that email that email doesn't
1144:04 - already exist but in this case we
1144:06 - actually have to do the opposite when
1144:08 - you want to get a user we want to make
1144:09 - sure that it does exist so we have to
1144:11 - say if results is empty meaning that we
1144:15 - couldn't find this user with the given
1144:17 - email address then we say a throw
1144:20 - could not find user
1144:22 - actually we don't have that yet so we
1144:24 - need to define a new exception called
1144:26 - could not find user and i'm gonna bring
1144:28 - it up here
1144:31 - just like we have to delete user we also
1144:33 - have could not find user okay and then
1144:35 - here we have to throw that could not
1144:36 - find user all right
1144:40 - if the results were empty then we throw
1144:42 - it up otherwise we have to then
1144:43 - construct a database a user so we say
1144:46 - return database user
1144:49 - from row and we say results
1144:53 - dot first
1144:54 - which is the first row that was read
1144:57 - from
1144:58 - the
1144:59 - user table also remember we set a limit
1145:01 - of one so it should be
1145:03 - it should be either zero
1145:05 - rows or one row which is the user with
1145:08 - the given email address okay
1145:11 - all right perfect uh let's go ahead to
1145:13 - the next function that we have to
1145:15 - implement and
1145:16 - that is for us to be able to create new
1145:19 - nodes so if you want to be like me and
1145:21 - like clean up the code a little bit here
1145:23 - just fold everything so you only see the
1145:25 - function signatures now we can focus on
1145:28 - the next function which is
1145:30 - creates nodes i'm just going to find it
1145:31 - in my notes here
1145:34 - just to make sure i give you the exact
1145:37 - code necessary in order to create the
1145:40 - create note function
1145:42 - uh if i can find it um creates notes
1145:45 - right there okay
1145:47 - as the
1145:48 - as the caption indicates we have to have
1145:50 - a an asynchronous function called create
1145:53 - node it returns a database node and it
1145:55 - also says who is the owner of this node
1145:58 - and it's just going to create a new node
1146:00 - with an empty text and it's going to
1146:02 - associate that and nodes with the given
1146:06 - database user and for you see the
1146:09 - parameter is of type database user and a
1146:11 - way to get a user is either to create
1146:14 - one if it doesn't exist and you get the
1146:16 - database user or you get an existing
1146:18 - user okay so
1146:20 - excuse me let's go ahead and say future
1146:22 - database user
1146:24 - and we call this function as the nodes
1146:25 - indicate create node and we say it's a
1146:28 - required field of a database user
1146:32 - oops sorry it shouldn't return a
1146:33 - database user it should be database
1146:35 - nodes all right and the parameter is the
1146:37 - owner which is the database user
1146:41 - and it's an async function
1146:43 - so just like we did in the other places
1146:45 - we're going to say final db is get
1146:48 - or throw
1146:50 - get the current database or throw
1146:53 - so what we need to do first is just to
1146:54 - make sure that the current user that we
1146:57 - are passing here already exists in the
1146:59 - database because remember database user
1147:01 - is just a class it can be created by
1147:04 - calling its constructor which is right
1147:06 - here um
1147:08 - somewhere here
1147:09 - so
1147:10 - i could just create a new database user
1147:12 - instance as a database user and a random
1147:15 - email and a random id
1147:17 - but in here when we're trying to create
1147:19 - a node for that particular database user
1147:21 - we need to first make sure that that
1147:22 - database user's actually inside the
1147:24 - database okay and to do that we say
1147:26 - final
1147:27 - bb user
1147:29 - equal to await
1147:31 - and we actually call our own get user
1147:34 - function in here we say get user with
1147:36 - the email of the um owner's email
1147:39 - on our email
1147:41 - so in here we're literally reusing the
1147:43 - code that we've created
1147:46 - then
1147:47 - what we're going to do is we're going to
1147:49 - check whether this database user is
1147:51 - actually the owner
1147:54 - see
1147:56 - what do i mean by that i mean that let's
1147:58 - say that i go and hack things up and i
1148:00 - say oh i create a new instance of
1148:02 - database user manually without inserting
1148:04 - into the database and here's the id some
1148:05 - sort of a random id and then here's the
1148:08 - email which i know exists in the
1148:10 - database
1148:11 - now what we need to do in our code is
1148:12 - just to make sure that the
1148:15 - id that you provided in your database
1148:18 - user here is actually an id of an
1148:20 - existing user in our database and to do
1148:22 - that we could literally use this little
1148:24 - beautiful function that we wrote earlier
1148:26 - which is the equality function of our
1148:28 - database user which actually checks our
1148:30 - id against the other
1148:32 - database user's id so if we literally
1148:34 - say here in here we say if the db user
1148:37 - is not the owner which goes into our
1148:40 - equal equal operator and negates it it
1148:43 - says oh if it's not equal to that then
1148:45 - we say throw
1148:47 - could not find user okay
1148:51 - so
1148:52 - after this place
1148:53 - if we if we actually found the db user
1148:56 - with that email and the id was exact id
1148:58 - as the owner then we can actually be
1148:59 - sure that that user does exist in the
1149:01 - database with the correct email and the
1149:03 - correct id okay so let's just put
1149:05 - comments here in here and say make sure
1149:08 - owner exists in the database with the
1149:11 - correct
1149:12 - id that's it okay
1149:16 - all right after we've done that we also
1149:18 - have to take care of actually creating
1149:20 - um
1149:21 - the note so let's go ahead and create a
1149:24 - um text and here we say the text is uh
1149:28 - i'm sorry i noticed that you couldn't
1149:30 - see that code
1149:32 - i hope that you saw this code at least
1149:35 - that i wrote here but if you didn't i
1149:37 - apologize for that because just because
1149:39 - i'm using a software that i don't see
1149:41 - the software all the time on my main
1149:43 - monitor which is the monitor i'm coding
1149:46 - i have to look at a secondary monitor
1149:47 - which is down here so i'm doing my best
1149:50 - to look at that secondary monitor just
1149:51 - to make sure you're seeing all the
1149:52 - content but sometimes i could miss that
1149:54 - i apologize for that so
1149:56 - let's see that
1149:57 - now you can see this code all right i'm
1149:59 - going to bring this code a little bit up
1150:01 - so let's go ahead and actually create
1150:03 - the notes so i'm going to put a comment
1150:05 - in here and say our work now is to
1150:06 - create notes create the notes
1150:10 - and what we're going to say we're going
1150:11 - to say
1150:12 - db insert just like we did an insert
1150:15 - previously for create user we're going
1150:16 - to
1150:17 - do a db insert for the notes and it's in
1150:19 - the notes table
1150:21 - and you see the values in here is going
1150:23 - to be a map
1150:24 - and the map is if you look at the
1150:27 - insert function is literally a map of
1150:29 - string and object so
1150:31 - let's have a look at our note table in
1150:33 - here and you can see notes right click
1150:35 - modify table it needs user id text and
1150:39 - is synced with cloud columns so let's go
1150:41 - ahead and say user id column user id
1150:44 - call
1150:46 - it's the owners id
1150:48 - and we had what else do we have we have
1150:50 - the text column
1150:52 - and that is equal to this text that we
1150:54 - just created out there which is an empty
1150:56 - text basically
1150:57 - you don't have to do this you don't have
1150:59 - to do that part you could just literally
1151:00 - just say
1151:02 - this
1151:03 - to me it's more readable if i define
1151:05 - these things beforehand like that okay
1151:09 - and then here we just say is synced
1151:12 - with
1151:13 - cloud column and its value is one in
1151:17 - this case so we're basically saying that
1151:19 - we start off with that okay
1151:21 - and i just noticed that i had missed a
1151:23 - column in there remember insert it
1151:26 - returns the id of the inserted object in
1151:28 - the database and it's a future so let's
1151:30 - then say final note id is equal to a
1151:34 - waiting on that function to insert the
1151:36 - notes into the note table
1151:41 - all right now that that is done we're
1151:43 - going to
1151:44 - actually return a new note instance and
1151:47 - return it a database note so what we're
1151:49 - going to do in here we're going to say
1151:50 - final
1151:51 - note is equal to database note
1151:54 - notes like that
1151:56 - and for the id we're going to say note
1151:58 - id i'm going to bring it up so you see
1152:00 - it better
1152:02 - and for the user id we're going to say
1152:04 - owner id text is text so this is another
1152:07 - reason to have it defined like a
1152:09 - constant like i did so that we can reuse
1152:11 - it here and there
1152:12 - and is synced with cloud what should we
1152:14 - do there we should probably just say
1152:16 - true okay
1152:19 - creating a note you have to return it
1152:20 - then inside your um asynchronous
1152:23 - function all right i'm going to put a
1152:24 - comma here as well just to make sure
1152:26 - formatting is in place
1152:29 - all right now we inserted notes into the
1152:31 - database and we also created a database
1152:33 - node to return that from our function
1152:37 - wow
1152:38 - a lot of code a lot of code but i hope
1152:40 - you're sticking with me throughout this
1152:42 - chapter so now we have create note
1152:44 - as the caption indicates now we have to
1152:46 - work on a function that allows us to
1152:47 - delete a node because remember we're
1152:49 - going to allow the user to select a node
1152:52 - in the database later sorry select the
1152:54 - node on the user interface which that
1152:56 - user themselves have created and be able
1152:58 - to delete that notes all right so we
1152:59 - need a function that allows us to delete
1153:01 - a node using its id all right
1153:04 - so
1153:05 - let's go i'm just going to bring the
1153:08 - basics of this function or almost the
1153:10 - entirety of this function actually here
1153:12 - so we don't have to code that manually
1153:14 - i'm going to paste it here
1153:16 - and as you can see here the signature of
1153:18 - this function i'm going to explain it
1153:19 - all the signature up to this function is
1153:21 - called delete node as an asynchronous
1153:23 - function as the caption at the bottom of
1153:24 - the screen in case we do the get db
1153:27 - and then we're literally just calling
1153:29 - the delete function which is the exact
1153:31 - same thing which i believe we did
1153:33 - in delete user let's have a look at that
1153:35 - you see delete count db delete in the
1153:38 - table
1153:39 - and then your work clause and in this
1153:41 - case inside the delete note we're saying
1153:44 - from the note table delete an object
1153:47 - which has its column id equal to
1153:50 - something and then we're passing that
1153:52 - something in the where arcs
1153:54 - now if we couldn't delete anything if
1153:58 - that note didn't exist with the given id
1154:00 - and we're throwing an exception called
1154:01 - could not delete node and that's an
1154:03 - exception that we haven't defined yet
1154:05 - and we're gonna have to define that at
1154:07 - the bottom all the other exceptions that
1154:08 - we've defined so far so that's could not
1154:10 - delete node implements exception all
1154:12 - right
1154:14 - so i thought to i mean i usually don't
1154:16 - copy paste code even if it's my own code
1154:18 - but i thought this is such an easy code
1154:21 - we have literally done every part of
1154:23 - something similar before we've done the
1154:25 - get db we've done the deletes before
1154:28 - we've done this if statement before so
1154:30 - it's nothing new and i don't think you
1154:32 - have to have
1154:33 - me here spending time explaining the
1154:36 - same thing over and over again and
1154:37 - that's why i copy pasted this delete
1154:38 - note here okay
1154:41 - all right then what we need also is the
1154:44 - ability for us to delete all nodes from
1154:47 - our database how do we do that as you
1154:48 - can see we need a function called future
1154:51 - means which is which indicates a number
1154:53 - of nodes that were deleted from the
1154:55 - database we call it delete
1154:57 - all nodes and it's an async function
1154:59 - here okay
1155:02 - and uh what we need to do in here is
1155:04 - just it's very simple we're going to say
1155:06 - final db is equal to get or throw
1155:10 - and then we say db delete and then we
1155:12 - just literally say uh
1155:14 - note oops note table
1155:17 - uh boom boom await on it all right
1155:22 - and you see
1155:23 - this if you issue the delete command on
1155:25 - on your database with a given table all
1155:28 - what it does is that it deletes every
1155:30 - row inside that uh table for you and it
1155:34 - will return the number of rows that were
1155:35 - affected so you can see it returns the
1155:37 - number of rows affected so that's
1155:38 - exactly what we want to return so just
1155:40 - return that value in this function right
1155:44 - perfect good stuff
1155:46 - we've done some big functions and some
1155:48 - small functions so it's so refreshing to
1155:50 - have some small functions as well
1155:52 - even for me so
1155:55 - so what we need to do now is to create
1155:57 - the functionality for fetching a
1155:59 - specific node you see when we actually
1156:02 - get to the ui where we render all the
1156:04 - nodes that are inside the database to
1156:05 - our user in the main ui of our
1156:07 - application we're going to list all the
1156:09 - nodes and then if the user presses on
1156:11 - any specific node then we're going to
1156:13 - get the id of that node and then read
1156:15 - that node's information from the
1156:17 - database and that's why we need a
1156:19 - function that takes an id of a node and
1156:21 - actually grabs that node for us from the
1156:23 - database okay
1156:25 - so let's go ahead and program that so
1156:27 - i'm gonna bring bring the uh
1156:30 - i'm gonna bring the
1156:31 - function signature and we're not gonna
1156:33 - copy paste it this time let me copy
1156:35 - paste the function actually i mean so
1156:37 - let's go ahead and get the db so this is
1156:39 - easy for you now you know how to do that
1156:43 - and we're going to query the database so
1156:44 - we're just going to say final notes
1156:46 - which is going to be like
1156:48 - the
1156:48 - iterable list of
1156:51 - maps that the sqlite database can read
1156:54 - so we're going to say await
1156:56 - on the db query
1156:58 - and we're going to say in the notes
1157:00 - table i'm going to remove all these
1157:01 - overlays so you see the code better
1157:03 - notes table and we're going to just say
1157:06 - um remit one because we want to get one
1157:09 - note all right
1157:12 - and the word clause is going to be
1157:14 - um using its id you see we're gonna say
1157:17 - id equal to something and the where arts
1157:19 - are gonna be just the id itself like
1157:21 - that boom and a semicolon like that all
1157:24 - right
1157:26 - and now if this notes uh
1157:30 - which is
1157:31 - you can see it's a list if notes
1157:34 - is empty we're going to throw an
1157:36 - exception so we're going to say um could
1157:38 - not find notes do we have that
1157:40 - uh could not find user we have could not
1157:43 - find notes we don't have so let's go and
1157:45 - define it
1157:46 - i'm going to bring it from
1157:48 - my own notes so we don't have to write
1157:51 - that manually
1157:52 - so define an exception called could not
1157:54 - find node implements exception all right
1157:56 - and then here we just throw it could not
1157:59 - find nodes so if you gave us an id we
1158:01 - couldn't find it in database we just
1158:02 - throw an exception otherwise
1158:04 - we need to actually create an instance
1158:06 - of our database node so we say return
1158:09 - database note from row and nodes first
1158:14 - okay so that's similar to how we did it
1158:17 - before for getting a user as well
1158:22 - all right now
1158:24 - we also need
1158:25 - a functionality that allows us to get
1158:28 - all nodes in the system you see we have
1158:31 - get node to delete all nodes delete node
1158:34 - create node but we don't have any
1158:35 - functionality that can get all the nodes
1158:37 - and that is the exact function we're
1158:39 - going to use the main interface of our
1158:40 - application to render all the nodes for
1158:42 - a given user okay
1158:44 - so
1158:46 - let me just make sure that i have that
1158:48 - function in here
1158:50 - and it is called
1158:52 - get all nodes
1158:59 - let's see
1159:01 - we can find a functionality get all
1159:03 - nodes somewhere
1159:06 - create note we have
1159:08 - get user we have
1159:11 - and perhaps i don't actually have a
1159:13 - functionality right now i can see in my
1159:15 - notes that i don't actually have get all
1159:18 - notes but that is actually not a problem
1159:20 - at all in the get note here you see we
1159:23 - have that we have to define this gets
1159:25 - all notes so let's go ahead and do that
1159:27 - i'm going to copy the signature of this
1159:30 - function
1159:32 - and i'm going to bring it here and we're
1159:33 - going to say we're going to return a
1159:34 - future
1159:35 - of list of database notes and we're
1159:38 - saying get
1159:39 - all notes like this all right excuse me
1159:44 - and it shouldn't require any parameters
1159:46 - we're just going to ask the database to
1159:47 - return all the notes all right
1159:50 - sorry about that again
1159:52 - and i'm going to copy the functionality
1159:54 - from here
1159:55 - for gets notes
1159:58 - excuse me again
1160:00 - and in here we're not now going to limit
1160:02 - anything and we don't have anywhere
1160:05 - clause okay so just like that we're
1160:07 - going to say db query from the note
1160:09 - table and we get all the notes then if
1160:12 - notes is empty then we say could not
1160:14 - find notes
1160:15 - or perhaps we could just say
1160:18 - notes we can see it's a list we can
1160:20 - literally
1160:21 - not have any special logic in here that
1160:23 - says could not find note or anything
1160:25 - and i'm gonna have a look at my notes in
1160:27 - here
1160:30 - that's fine um
1160:32 - what we need to do now now that we have
1160:33 - our notes we can map them so we say
1160:35 - notes map and you can name this
1160:38 - parameter and and in your mapping you
1160:40 - need to say okay i get a database note
1160:42 - which which you can see is of type let
1160:44 - me see if i can move my mouse over here
1160:46 - it's a map of string object this matches
1160:48 - perfectly into our database notes
1160:51 - but from row and then you say from this
1160:55 - n
1160:56 - let's actually call it note row or
1160:58 - something like that and we put it there
1161:00 - and if you say final
1161:02 - result
1161:03 - and now i think this is an eye treble to
1161:05 - be honest with you so you can see it's
1161:06 - an iterable of database notes okay so
1161:09 - what we could do is actually change our
1161:10 - future in here instead of saying list we
1161:12 - return on iturble okay so
1161:14 - in order for the sake of uh cleanliness
1161:17 - i'm also gonna change our captioning
1161:20 - here and say iterable so you see the
1161:22 - correct information on your screen as
1161:24 - well
1161:26 - all right
1161:27 - so that's our result so all we need to
1161:29 - do in here just to return it that's it
1161:32 - so so
1161:33 - like that
1161:34 - perfect so
1161:36 - um and that's the functionality of get
1161:38 - all nodes so it's very simple nothing
1161:40 - nothing special
1161:43 - and
1161:45 - now uh what we need to do is just to
1161:47 - wrap it up there's one last function
1161:49 - that we have to implement and remember
1161:51 - when we go to the main ui of the
1161:53 - application we're going to allow the
1161:54 - user to create nodes list all their
1161:56 - created nodes and also be able to click
1161:57 - on any specific node in order to update
1161:59 - the contents of that node so we need a
1162:01 - function called update note so let's go
1162:04 - and bring my notes in here update notes
1162:08 - so let's go ahead and create the
1162:11 - signature for that function and future
1162:13 - database notes
1162:15 - and we say update notes
1162:18 - like that and we're going to have some
1162:20 - required parameters which we actually
1162:22 - grab an existing database note object
1162:26 - and then we
1162:27 - expect the user to also provide a new
1162:29 - text so let's just say required
1162:31 - a database note
1162:33 - notes and then we say it's the required
1162:36 - string of text just like that
1162:43 - you're already familiar with this we're
1162:45 - gonna get the database we say get or
1162:46 - throw
1162:48 - okay
1162:50 - and we're just gonna issue an update to
1162:53 - our
1162:54 - database we haven't done updates before
1162:57 - for our sql like database so that's what
1162:59 - we're going to do now so let's just say
1163:00 - db.update
1163:02 - and you can see it says give us a table
1163:04 - or give me the table and
1163:06 - your list of updates so let's go in here
1163:09 - and say
1163:10 - update the uh
1163:14 - note table
1163:15 - um
1163:16 - and actually before doing that how do we
1163:18 - make sure that this table that note
1163:20 - already exists in the database because
1163:22 - like we saw earlier anybody can go and
1163:26 - add
1163:27 - or create an instance of a database node
1163:29 - it doesn't necessarily have to be in the
1163:30 - database but we kind of need to make
1163:32 - sure that it already is stored in the
1163:33 - database because before we can updates
1163:36 - to update its text so we already have a
1163:38 - functionality that does that remember
1163:40 - gets notes with an id so we could
1163:42 - literally just say
1163:44 - await
1163:46 - it's note
1163:48 - and then we say note id
1163:50 - and you see this actually throws an
1163:53 - error
1163:54 - if you go to this function it throws an
1163:56 - error called could not find note which
1163:58 - is exactly what we're after but we're
1163:59 - not actually after the the result of it
1164:02 - we don't want the actual note because
1164:04 - we're assuming that that is the same
1164:06 - object as this so we're just ignoring
1164:08 - its return value okay
1164:12 - in the update we're going to say the
1164:13 - notes table
1164:14 - and the values that we're going to
1164:15 - provide are two we're going to say the
1164:17 - text column
1164:19 - i need a new text
1164:21 - and we're upon you updating the text of
1164:24 - a node we're also going to assume that
1164:25 - well all of a sudden this node is not
1164:28 - synced with the back end or with the
1164:30 - data with the
1164:32 - uh with the cloud database anymore okay
1164:34 - so that goes back to our um
1164:37 - async with cloud column
1164:39 - so let's go in here and say is synced
1164:41 - with cloud column then it's going to be
1164:43 - set to zero remember that was an integer
1164:45 - field all right update is an
1164:47 - asynchronous function so you have the
1164:49 - weight on it
1164:50 - and it also returns the number of feel a
1164:52 - number of rows that were updated so
1164:54 - we're going to say updated
1164:55 - updates count
1164:59 - sorry
1165:00 - final
1165:01 - updates count is equal to a weight on db
1165:03 - update all right now by you
1165:06 - at the call side calling the updates
1165:08 - note function we're assuming that that
1165:11 - note should have existed
1165:12 - in the database okay so in this case the
1165:15 - updates count should it should be a
1165:18 - value other than zero okay so we say if
1165:22 - updates count is equal to zero
1165:25 - bring the code up so you can see it
1165:27 - and then we have to throw a new
1165:28 - exception called could not update
1165:30 - note and paste that
1165:33 - exception from my notes
1165:35 - so it should look like this class could
1165:36 - not update node implements exception all
1165:38 - right so i need you to write this code
1165:40 - as well
1165:41 - and if updates notes
1165:44 - if updates count is zero then we're
1165:46 - gonna say throw could not update
1165:50 - note
1165:51 - else
1165:52 - now you can see what we promised is to
1165:53 - return a new database note so let's go
1165:56 - and just say
1165:58 - do we then i mean that's that's the
1166:00 - thing we've updated that uh and how do
1166:04 - we return an update a database note to
1166:06 - you well we could just do this
1166:09 - turn
1166:11 - its uh notes with that note id because
1166:14 - we already have gets notes function
1166:16 - implemented all right
1166:19 - wow
1166:20 - very well done if you could stick with
1166:23 - me throughout this chapter because we
1166:24 - did a lot of work so um i'm gonna fold
1166:28 - this fold this you can see we have a lot
1166:30 - of functions here
1166:32 - quite a lot of work and i think so far
1166:34 - this has been the biggest chapter of
1166:36 - this uh of this course but we've also
1166:38 - had a lot to do a lot of information i
1166:40 - hope you could stick with me
1166:42 - let's go ahead now and clean up our
1166:44 - exceptions as the caption indicates
1166:46 - let's put all our crowd exceptions in
1166:48 - one file inside lib services crowd crud
1166:51 - underscore quad exceptions okay
1166:54 - so let's go in here and
1166:58 - uh actually it should say crowd slash
1167:00 - crowd exceptions so um if i look at my
1167:04 - notes inside services crud i'm gonna
1167:08 - fix this caption and i apologize for
1167:10 - that i'm just gonna fix it on on the go
1167:14 - like this and i'm gonna bring it up
1167:18 - and actually it should say crowd slash
1167:20 - crud underscore exception so i think
1167:22 - there was more than one error in there
1167:24 - and cros
1167:25 - required exceptions so
1167:27 - it should be lip services slash quad
1167:30 - exceptions all right so let's go and fix
1167:32 - that up
1167:34 - inside services we have crowd already
1167:35 - and we have nodes service dart let's
1167:37 - create a new file in there and we just
1167:39 - call it crud exceptions dot art now i
1167:42 - need you to go into your node service
1167:44 - dart file and grab all those exceptions
1167:46 - that you define here and just cut them
1167:49 - with command x on macintosh or control x
1167:52 - in linux and windows and then bring it
1167:54 - into your quad exceptions alright and
1167:57 - save this file
1168:00 - and let me also have a look here
1168:06 - just to make sure my notes are clean as
1168:08 - well for you
1168:09 - uh so because i i noticed that the next
1168:12 - caption was also a little bit incorrect
1168:14 - now we need to go and use that crowd
1168:16 - exceptions in our note series because as
1168:18 - you can see it is marked as red right
1168:19 - now because there were so many
1168:21 - exceptions thrown that um this file
1168:24 - doesn't have access to anymore so i'm
1168:26 - gonna get help from visual studio code
1168:27 - here with command dot and say import
1168:29 - crowd exceptions
1168:30 - and all those errors are gonna go away
1168:34 - all right well done huge chapter a lot
1168:36 - of work done and congratulations for
1168:39 - sticking with me through this chapter
1168:41 - now as is the tradition we're gonna now
1168:44 - go ahead and commit our work and um also
1168:48 - tag it so i'm going to make the screen a
1168:50 - little bit bigger
1168:52 - let's go to our terminal here
1168:54 - and i'm then going to say in here we're
1168:57 - going to tag and commit our work as step
1169:00 - 11 so let's first get status
1169:02 - and then we say git add all
1169:05 - hit status again here are the things
1169:07 - we've done pop spec was changed because
1169:09 - we added three dependencies uh provide a
1169:12 - path provider path
1169:14 - and and also i believe actually it was
1169:16 - called path and path provider right
1169:18 - yes
1169:19 - path path provider and sqlite so that's
1169:22 - why these two files have been changed
1169:24 - node service is completely new and crowd
1169:25 - exceptions is also new
1169:28 - so git commit
1169:30 - uh step 11 as the caption indicates um
1169:34 - git push
1169:36 - which they commit first remember and
1169:37 - then we tag it as step 11
1169:40 - and we push our tags as
1169:42 - well fantastic
1169:45 - now congratulations again for going
1169:48 - through this chapter with me it was a
1169:49 - huge chapter i think the biggest so far
1169:51 - now we need to get ready for the next
1169:52 - chapter as a tradition for the other
1169:54 - chapters at the end we talk a little bit
1169:56 - about what we're going to do in the next
1169:58 - chapter just to get ready for it
1170:00 - so
1170:01 - we've done a lot of work on the data now
1170:03 - we need to fuse it together with our uh
1170:06 - with our ui and in order to do that we
1170:08 - need to talk about streams and stream
1170:10 - controllers you see
1170:12 - when you're in the main ui of your
1170:14 - application after you've logged in you
1170:16 - need to see a list of your notes
1170:18 - but what happens if you see the list of
1170:20 - your notes and then you press the plus
1170:22 - button to create a new note and this
1170:24 - plus button is a button that we're going
1170:25 - to create soon in the next chapters what
1170:27 - happens if you press the plus button
1170:29 - should you then send manually a signal
1170:31 - to your ui and say hey a new note was
1170:34 - created update the list that is a lot of
1170:37 - work and for that you can do things a
1170:40 - lot cleaner if you use streams and
1170:42 - stream controllers and that's what we're
1170:44 - going to talk about in the next chapter
1170:46 - so
1170:47 - you may want to have a short pause after
1170:49 - this chapter since it was so big so do
1170:51 - that please get your refreshments coffee
1170:53 - tea whatever you want and i'll see you
1170:55 - in the next chapter
1170:57 - hello everyone and welcome to chapter 28
1170:59 - of the swata course in previous chapters
1171:01 - we've been talking quite a lot about
1171:03 - crud create read update delete and we
1171:05 - talked about how we can for instance
1171:07 - have raw functionality in our node
1171:10 - service so that we can read from the
1171:12 - database delete stuff from the database
1171:13 - create users etc etc now we haven't
1171:17 - really worked in the past two chapters
1171:19 - so much with our user interface and
1171:21 - that's completely okay because sometimes
1171:23 - as you're developing applications or
1171:24 - you're developing software you may have
1171:25 - to take detours in order to create the
1171:27 - functionality that is later gonna be
1171:29 - needed
1171:30 - for your user interface and you'll do
1171:32 - the same thing if you're doing um
1171:34 - back-end development like uh web
1171:35 - development so i myself do web
1171:37 - development with django and sometimes i
1171:39 - have to go and create a lot of
1171:40 - functionality on the backend first
1171:43 - before i can actually go and mirror that
1171:45 - functionality on the ui which is for
1171:47 - instance the web browser where the user
1171:49 - is consuming the content so
1171:51 - and
1171:52 - if even if you're a designer for
1171:53 - instance you're working with figma you
1171:55 - can't always produce user-facing content
1171:58 - like prototypes you may have to
1171:59 - sometimes go and design for sure
1172:01 - components and then after you've done
1172:02 - your components and you'll be ready to
1172:04 - put those components into screens and
1172:06 - display that to your product owner or
1172:08 - your developers
1172:09 - so
1172:11 - um
1172:13 - so far we've been working a lot with
1172:15 - what the user doesn't see and we have to
1172:18 - like stitch
1172:19 - up those last bits and pieces before we
1172:21 - can actually go to the ui and manipulate
1172:23 - that data which our notes service can
1172:27 - right now manipulate we're missing a few
1172:29 - functionalities which we're going to
1172:30 - develop in this chapter in the node
1172:32 - service
1172:33 - and
1172:34 - what we're going to work with in this
1172:35 - chapter especially is with streams and
1172:38 - stream controllers so
1172:40 - let me bring up the caption
1172:42 - that i'm going to talk about now so what
1172:44 - are streams and what are stream
1172:45 - controllers well
1172:47 - if you are a developer already you've
1172:49 - done software development you may know
1172:51 - something uh
1172:52 - about reactive programming and reactive
1172:55 - programming is where you have
1172:58 - a bunch of data sitting somewhere for
1172:59 - instance and then you perform some
1173:02 - operations on that data and this data
1173:03 - gets updated and you will be notified of
1173:06 - these updates through some sort of a
1173:07 - pipe of information so
1173:10 - and if you haven't done software
1173:12 - development before so reactive
1173:13 - programming and streams and stream
1173:15 - controls may be a little bit
1173:16 - overwhelming but we're going to start
1173:18 - very slow so there's nothing to be
1173:20 - worried about i'm going to explain
1173:21 - everything as much as i can to make
1173:24 - things easier for you
1173:25 - but if you don't have development
1173:27 - background from before software
1173:28 - engineering background there's not so
1173:30 - much that i can explain about streams
1173:32 - and stream controllers for you to
1173:34 - completely understand how they work all
1173:36 - i can say is that imagine a stream is
1173:39 - just a point of time or a stream is
1173:42 - basically an entity that controls data
1173:44 - all right just say something that keeps
1173:46 - hold of data and then you perform things
1173:48 - on it so you say add this data or remove
1173:51 - this data add this data with this data
1173:53 - and give me the results so
1173:55 - it keeps hold of its data and it has a
1173:58 - timeline so it starts at some point
1174:00 - manipulates its data and then it either
1174:03 - errors out at the end saying that oops i
1174:04 - can't do this and then it just dies or
1174:07 - it will just complete at some point and
1174:09 - also there is a third category of
1174:11 - streams
1174:12 - where the data just keeps living on so
1174:14 - it never basically
1174:15 - um
1174:16 - completes or
1174:18 - errors out so
1174:20 - so just think of streams as pipes of
1174:22 - data types of information that you can
1174:25 - manipulate and you can also perform
1174:27 - operations on
1174:28 - so if that's what streams are then what
1174:30 - are streams stream controllers in dart a
1174:33 - stream controller is your interface
1174:36 - um to your streams so
1174:40 - you have the stream which is sitting
1174:43 - right here and you can't
1174:45 - you you don't basically usually go and
1174:47 - add stuff to a stream directly or read
1174:49 - stuff from the stream what you can do is
1174:52 - to have a stream controller where you're
1174:54 - manipulating the stream for instance our
1174:55 - node service and this stream controller
1174:58 - is able to for instance add stuff to the
1175:00 - stream or read stuff from the stream so
1175:02 - just imagine the stream controller is
1175:04 - kind of like the manager of that stream
1175:05 - so if all of this sounds a little bit um
1175:08 - high level and abstract i completely
1175:10 - understand that it usually is when
1175:12 - you're working with reactive programming
1175:13 - some people actually hate reactive
1175:15 - programming but
1175:17 - as one of my colleagues used to say it's
1175:18 - always easier to
1175:20 - hate than to learn and my approach is
1175:22 - usually if i hate something is because
1175:25 - maybe i haven't really fully understood
1175:27 - it so there are very few things in my
1175:29 - life that i've actually learned which i
1175:31 - hated after learning so
1175:34 - if you're a bit overwhelmed by streams
1175:36 - and stream controllers or reactive
1175:38 - programming don't be they're actually
1175:40 - really good if you know how to use them
1175:41 - so they're very easy to use as long as
1175:44 - you get a handle of uh
1175:46 - how basically it's getting a handle of
1175:48 - the right way of using them so that's
1175:50 - what i'm going to show you in this
1175:51 - chapter and then
1175:52 - upcoming chapters as well
1175:55 - so let's go excuse me let's go to our
1175:57 - application i'm going to put the code
1175:59 - right here let's have a look at what
1176:00 - we've written so far i'm going to
1176:02 - increase the size of the screen and then
1176:04 - decrease the font size a little bit so
1176:06 - it's not as ginormous
1176:09 - so
1176:10 - um
1176:11 - let's have a look at what we've done so
1176:13 - far you can see we have quite a lot of
1176:15 - functionality in here
1176:17 - we have for instance delete all nodes
1176:19 - then we have
1176:21 - get all nodes
1176:23 - we have update nodes so quite a lot of
1176:26 - functions
1176:27 - but if you see all of these are directly
1176:30 - talking with our database with our
1176:31 - sqlite database none of these
1176:33 - functionalities are
1176:34 - actually telling or
1176:37 - we don't even have to talk about
1176:38 - functions but if you look at the node
1176:39 - service in it itself it doesn't contain
1176:41 - a list of nodes so it doesn't have the
1176:44 - ability to cache these nodes so it's as
1176:47 - soon as you give it a command the node
1176:48 - services i don't know what to do i'm
1176:50 - just going to go to the database and do
1176:51 - what you said i have to do
1176:53 - however this could i mean in not in our
1176:56 - application but in an application that
1176:58 - has millions and millions of rows of
1177:00 - data for instance this could not be such
1177:02 - a good idea that you always go to the
1177:04 - database and
1177:06 - read the entire thing in order to for
1177:08 - instance delete one row or um basically
1177:11 - these operations should kind of be like
1177:13 - cached inside your application before
1177:15 - you go and hit the database hopefully
1177:18 - and what we're going to do as you can
1177:19 - see in the caption here we're going to
1177:20 - actually start caching a list of notes
1177:22 - that the node service has so the goal is
1177:25 - for the note servers to be able to
1177:26 - expose a list of notes that the ui can
1177:29 - then render on this on the user screen
1177:32 - so if the user goes and presses the plus
1177:34 - button then that plus button is then
1177:36 - gonna send a message here to our note
1177:39 - servers we're going to then go to this
1177:40 - function create node and this create
1177:42 - node function internally is then going
1177:44 - to manipulate that list of nodes inside
1177:46 - node service say hey here's a new node
1177:49 - add that
1177:50 - and then our ui is going to listen to a
1177:53 - list of these notes available in note
1177:55 - service and if things change in that
1177:56 - list
1177:57 - then the ui is just going to
1177:59 - automatically update itself and this
1178:01 - interface between the ui and the node
1178:02 - servers is going to be done through a
1178:04 - stream okay
1178:06 - i know it's a lot of a lot of
1178:07 - information but you'll get it you'll get
1178:09 - it as long as we go through this chapter
1178:11 - together
1178:12 - so what we need to do first is let's go
1178:14 - and as then as the caption at the bottom
1178:15 - of the screen indicates we're going to
1178:17 - go and expose a list of notes in our
1178:20 - note service okay so let's just let's go
1178:22 - ahead and say we have a list
1178:24 - of uh database notes
1178:28 - and we're just gonna call it notes and
1178:29 - we're gonna start with an empty list all
1178:32 - right
1178:34 - so that's really good now we have let's
1178:35 - say this is our cache this is where
1178:36 - we're keeping all the notes that this
1178:39 - node service manipulates all right
1178:42 - so now let's go and talk a little bit
1178:45 - about our um
1178:46 - stream controller so
1178:49 - you see what we need to do as the as the
1178:51 - information here says um
1178:54 - what we need is for the node service to
1178:57 - be able to control a stream of nodes so
1179:00 - when the list of this nodes changes we
1179:04 - need to
1179:05 - tell our stream in the note servers that
1179:07 - hey some element got added hey some
1179:09 - element got deleted or some element got
1179:11 - updated so
1179:13 - then the ui can then reactively listen
1179:15 - for these changes in the in the nodes
1179:17 - service and we do that through the um
1179:21 - our stream controller
1179:24 - so let's go as the caption indicates i'm
1179:25 - going to write it and notes actually
1179:27 - maybe i should yeah i'm going to write
1179:29 - it notes stream controller and the way
1179:32 - to create a stream controller is that
1179:34 - you just say stream controller and then
1179:35 - you specify the type of data that your
1179:38 - stream contains which is a list of
1179:39 - database nodes
1179:42 - and then we're gonna
1179:44 - just say dot broadcast
1179:48 - like that and i believe stream
1179:50 - controller isn't yet
1179:52 - excuse me um isn't imported in our notes
1179:55 - service so i'm gonna get help from
1179:56 - visual studio code and you can see it's
1179:59 - it says that well stream controller is
1180:01 - available in the dart async package so
1180:05 - um and yeah async meaning asynchronous
1180:08 - so in order to be able to use stream
1180:10 - controller you have to import that so
1180:11 - i'm going to get help from visual studio
1180:12 - code to do that
1180:14 - all right so let's see what we did in
1180:16 - here
1180:17 - what is this the syntax looks really
1180:19 - really scary but it really isn't all
1180:21 - you're saying is that i want to be able
1180:23 - to control a stream
1180:25 - um
1180:27 - of a list of database notes basically
1180:30 - you're saying that i have a pipe this
1180:32 - pipe
1180:33 - every event that is inside this pipe is
1180:36 - a list of database nodes so let's say
1180:37 - you start with an empty list so this
1180:39 - list is empty inside this pipe then you
1180:41 - add an item to this
1180:43 - pipe
1180:44 - then what it does it says oh what was i
1180:47 - before i was on empty list add that new
1180:49 - item so now i'm an item now i'm an array
1180:52 - or a list with one item and then it puts
1180:54 - that array inside the stream so the
1180:56 - stream's value is now at the beginning
1180:58 - was empty list then it's a list of one
1181:01 - item so this stream controller is
1181:03 - basically in in control of as its name
1181:06 - indicates it's in control of the changes
1181:09 - to this notes um
1181:11 - list it isn't hooked to that yet but
1181:14 - that's its purpose and that's the reason
1181:15 - it has the exact same data type in its
1181:18 - stream controller
1181:21 - now the broadcast part in here and as
1181:24 - you can see the documentation actually
1181:26 - spot on it says the controller where
1181:28 - stream can be listened to more than once
1181:30 - and
1181:32 - if you've done dark development or
1181:33 - flutter development from before you may
1181:35 - know that if you then um and i'm now
1181:38 - assuming as i said that your dart or
1181:40 - flutter developer from before if you
1181:42 - have created a stream controller and
1181:43 - then you go and listen to the changes to
1181:45 - that stream that the stream controller
1181:47 - is controlling and then you do a hot
1181:48 - reload then you get an error from your
1181:51 - flower application saying that oh this
1181:53 - stream's already been listened to so you
1181:54 - cannot listen to it again and that's the
1181:56 - problem that normal stream controllers
1181:58 - can cause and that you as soon as you've
1182:00 - listened to them you should close your
1182:02 - listening channel to that stream before
1182:04 - you can listen to them again so that's
1182:06 - what broadcast fixes if you're not a
1182:09 - developer from before what this
1182:10 - broadcast basically is saying is that
1182:13 - it's okay for you to create new
1182:15 - listeners that listen to the changes to
1182:17 - this stream controller so here's a pipe
1182:19 - of information at this point you start
1182:21 - and listen and then it's completely okay
1182:23 - that if you want to listen to changes to
1182:25 - the stream controller later in the
1182:26 - future as well so you're not going to
1182:28 - get any errors by doing this broadcast
1182:30 - all right
1182:33 - all right um
1182:36 - now what we need also is a
1182:39 - handy function
1182:40 - in our um
1182:44 - in our application.can
1182:50 - that can read all the available notes
1182:52 - from our database and then cache them
1182:54 - inside both the notes cache right here
1182:57 - and our controller okay
1182:59 - so you see what our our goal in this
1183:02 - chapter is is to
1183:05 - make sure that this is the source of
1183:07 - truth that our notes
1183:09 - list contains all the nodes for
1183:13 - for instance the current user
1183:15 - then the stream controller
1183:17 - is our interface to the outside world
1183:20 - the ui is going to be listening to
1183:22 - changes that occur in this stream
1183:24 - controller
1183:26 - so whenever you see this this is not
1183:28 - something that's going to be read from
1183:29 - the outside
1183:30 - everything's going to be read from the
1183:32 - outside through this all right so keep
1183:34 - that in mind so let's go ahead as a
1183:36 - caption in the case and we're going to
1183:37 - create a function in here called cache
1183:39 - notes and its purpose is just to read
1183:41 - all the notes from the database and
1183:42 - place it both in here internally and in
1183:45 - our node stream controller which is
1183:47 - going to be read externally all right
1183:51 - so let's go and do that so i'm going to
1183:52 - say future void and we're going to call
1183:54 - it cache and notes
1183:57 - is async
1184:00 - then if you remember we already have an
1184:02 - async function called get all notes so
1184:04 - i'm just going to say um final uh all
1184:06 - notes is await
1184:10 - it's all notes okay so that's gonna get
1184:12 - all our notes
1184:14 - and we're gonna assign that to our uh
1184:18 - list of notes in here okay
1184:20 - so let's go in here and say
1184:23 - as you remember get all notes returns on
1184:25 - iterable of all our notes and now we
1184:28 - have a little bit of a problem here
1184:29 - because we're saying list of all notes
1184:30 - and in here we're also saying list of
1184:32 - notes so we have to convert that
1184:34 - terrible to a list of all notes okay
1184:38 - either we could do that or we could have
1184:40 - this just sit there as an eye treble
1184:43 - it's completely up to you i have no
1184:45 - issue with any and we could just go with
1184:47 - list
1184:48 - so let's go in here and then we're gonna
1184:50 - say uh our notes
1184:52 - is the private notes is all notes to
1184:55 - list
1184:56 - and we also are going to update our
1184:58 - stream controller with that with the
1185:01 - value of underscore nodes okay so we're
1185:04 - going to say notes stream controller
1185:07 - if i can spell
1185:09 - and then we're going to add
1185:11 - notes to the stream and remember a
1185:14 - stream is just
1185:16 - the evolution of a value through time
1185:19 - and
1185:20 - the first point of this evolution was an
1185:22 - empty list and then the next one is
1185:24 - going to be
1185:25 - the
1185:26 - notes that are all the notes are in the
1185:29 - database okay so that's just
1185:30 - that we telling anyone listening to the
1185:33 - stream controller that hey here's a new
1185:35 - value all right
1185:38 - okay so um
1185:40 - now that we're doing this you can see
1185:42 - we're getting an error and dart is very
1185:44 - actually this analyzes so clever because
1185:47 - you see it's telling us that the cache
1185:49 - notes function is not being used now
1185:52 - you may be asking yourself well none of
1185:54 - these functions are being used update
1185:56 - note for instance is not being used so
1185:57 - if i
1185:59 - search for update notes
1186:00 - let's see update
1186:02 - nodes could not update nodes so yeah you
1186:05 - can see that update node function in
1186:07 - itself is not being used at all so
1186:10 - why is it that the
1186:12 - analyzer is complaining about this
1186:14 - function particularly and the reason is
1186:15 - because we have a little prefix
1186:18 - behind this function name
1186:20 - and this prefix is telling
1186:22 - the analyzer that this function is
1186:24 - private and private to this class now
1186:27 - dart analyzer is looking at it and it's
1186:29 - like okay it's a private class but
1186:30 - you're not using it so
1186:32 - the reason that other functions aren't
1186:34 - being um
1186:35 - marked with this warning is that dart
1186:38 - understands that they are not prefixed
1186:40 - with a
1186:41 - with a with an underscore meaning that
1186:44 - they're going to be used publicly
1186:46 - somewhere else so it's not going to yet
1186:48 - give us any warning saying that you
1186:50 - haven't used those functions as soon as
1186:51 - you remove that you see that the warning
1186:53 - also goes away but we're going to keep
1186:55 - down the score okay i just want to
1186:56 - explain to you why you're seeing this a
1186:58 - little warning here
1187:01 - okay now that we've done cash notes what
1187:03 - we're going to do is just to go to our
1187:05 - as a caption case we're going to go to
1187:06 - the open function
1187:08 - let's see if we can find it
1187:10 - here
1187:11 - open
1187:12 - and upon opening our database so uh let
1187:16 - me have a look at my notes
1187:18 - upon opening our database we are going
1187:21 - to um
1187:24 - cache all those uh
1187:27 - let's let me just have a look at my
1187:30 - notes yeah we're gonna basically go to
1187:32 - uh
1187:33 - the open function that we have here
1187:34 - future void open
1187:36 - i'm a bit surprised that i actually
1187:38 - haven't
1187:39 - written any notes about that yeah i can
1187:41 - see actually i have so that's good okay
1187:44 - so
1187:45 - right after executing this command for
1187:47 - creating the notes table after we've
1187:49 - created the user table and note table
1187:51 - and now that we know that we could open
1187:53 - the database we also have to cache all
1187:54 - the notes in our
1187:57 - local variable so let's just go and call
1187:59 - that function so we're just going to say
1188:01 - await cache
1188:02 - notes okay
1188:05 - so this means that when you call this
1188:07 - open function
1188:08 - if after we made sure all the tables
1188:10 - everything is there
1188:12 - if they didn't exist then we're gonna
1188:13 - read all the notes and place them inside
1188:15 - this notes variable and also in this
1188:17 - stream controller okay so that's how we
1188:19 - did the cache notes and i hope that you
1188:21 - could see the see the code
1188:23 - and it wasn't hidden by the caption at
1188:24 - the bottom of the screen
1188:27 - all right so that part is done now um
1188:30 - now what we need to do in here is to go
1188:32 - to the next part of the code and as you
1188:34 - can see it says cache note in create
1188:36 - node in create node function add the new
1188:38 - node to underscore nodes and the node
1188:41 - stream controller
1188:42 - so
1188:43 - i'm going to go to my nodes here creates
1188:46 - nodes
1188:47 - and ensure that when we create the nodes
1188:50 - in our creates node
1188:55 - right here in this function in the
1188:56 - create node you see at the moment what
1188:58 - we're doing is that we're just creating
1189:00 - a node and returning it
1189:01 - that's good but i mean it's not good
1189:04 - enough because as i said we need the ui
1189:07 - to be able to reactively listen to all
1189:10 - the notes that are right now in the
1189:12 - database for that current user okay
1189:14 - so in here after we create the note
1189:16 - we're actually going to add it to our
1189:18 - array of nodes and then we're also going
1189:21 - to add it to
1189:23 - our stream controller so i'm just going
1189:25 - to go in here and say nodes
1189:28 - and add this new node in there and also
1189:31 - remember the stream controller's
1189:33 - responsibilities just reflect the values
1189:35 - inside the underscore nodes to the
1189:36 - outside world so all we have to do is
1189:38 - just to say notes stream controller add
1189:41 - notes just like that because notes is
1189:43 - the source of truth as i mentioned
1189:45 - before all right
1189:49 - great stuff uh
1189:51 - now we need to take care of the other
1189:52 - function called delete note let's
1189:56 - search for that
1189:58 - um
1189:59 - delete notes all right so
1190:03 - what we need to do is to have a look at
1190:04 - this uh functionality here and you can
1190:06 - see it says if we couldn't delete
1190:08 - anything then uh throw this
1190:11 - exception but now we're gonna add an
1190:13 - else statement in here and
1190:15 - by us being able to delete that note
1190:17 - meaning that you can see the note id we
1190:20 - have which is this id so what we need to
1190:22 - do as a caption in the case we need to
1190:23 - actually remove that note also from our
1190:25 - local cache so we're going to say notes
1190:27 - remove where
1190:29 - and this is the note and then i'm going
1190:31 - to say note that id
1190:33 - should be equal to that id
1190:36 - after doing that we could just say note
1190:38 - stream controller add
1190:40 - notes and you could be try you could try
1190:43 - to be clever in here and you for
1190:44 - instance could say oh
1190:46 - you see that
1190:47 - who says that that note actually exists
1190:49 - in our cache we can't 100 be sure about
1190:51 - that but if you look at the signature of
1190:52 - the remove where function
1190:54 - um removes all objects oh maybe we don't
1190:58 - have the ability to actually know
1191:00 - if that node was deleted but what you
1191:01 - could do you could just say count before
1191:04 - is notes count and then you could in
1191:07 - here or length
1191:09 - and here you could just say if notes
1191:11 - links
1191:12 - is not count before then you can update
1191:15 - your stream i don't plan to do that but
1191:18 - you can you can try to do that if you
1191:20 - want to it's just a safeguard for you to
1191:22 - say i'm gonna update my out outside
1191:25 - facing stream only if i actually could
1191:28 - delete this note from my cache
1191:30 - if you think it's worth it i don't think
1191:31 - it's worth it
1191:33 - but that's just an opinion
1191:35 - so we're going to leave it like this as
1191:37 - the caption also indicates
1191:39 - now you see we also have a functionality
1191:41 - to delete all nodes so
1191:43 - let me find that function
1191:45 - all nodes
1191:47 - all right so let's go in our delete
1191:52 - all nodes in here find that function and
1191:54 - you can see right now what it what it's
1191:56 - doing is just returning the number of
1191:58 - deleted nodes
1192:00 - now what we're going to do we're going
1192:01 - to say final uh
1192:04 - what should we call it number of
1192:05 - deletions
1192:07 - is equal to this and we're gonna return
1192:08 - that number of deletions okay because i
1192:10 - mean i'm doing that simply because we
1192:12 - need to
1192:13 - do some work in in the middle here okay
1192:17 - so then what we're gonna do is gonna say
1192:20 - notes
1192:21 - is an empty list all right so we're
1192:24 - resetting the notes and then after doing
1192:27 - that we're also going to update our
1192:28 - stream controller so we're going to say
1192:30 - add the underscore nodes to stream
1192:32 - control and then return the number of
1192:34 - deletions so let's make sure that our
1192:36 - local cache is updated and also that the
1192:38 - user-facing
1192:40 - interface of our class which is the
1192:42 - stream controller is also
1192:44 - updated with the latest information
1192:48 - okay next thing that we need to do as
1192:50 - you can see in the cache that says
1192:51 - update caching get node remove old node
1192:54 - with same id and add the new one on and
1192:56 - update this stream so
1192:59 - let's go to our git node
1193:04 - okay
1193:06 - so um
1193:10 - let's have a look at our get note in
1193:11 - here then
1193:13 - and at the moment as you can see in here
1193:15 - what it's doing is
1193:17 - oops that's not get note um here is get
1193:20 - note
1193:22 - right there
1193:23 - okay
1193:24 - and as you can see here uh we're
1193:26 - basically what we're doing is that we're
1193:28 - saying um
1193:29 - upon you trying to read a note from the
1193:32 - database we're literally just making a
1193:34 - query to the database and then if we
1193:36 - could find that item we are returning it
1193:39 - by creating a database node from
1193:42 - from a row that you can see right here
1193:46 - uh but what we're gonna do is that if
1193:48 - you try to get a note in there is a
1193:51 - possibility that we already had that
1193:53 - note cached locally in our notes array
1193:56 - but that note is
1193:58 - uh outdated meaning that the copy that
1194:00 - we had in our cache is not really
1194:03 - updated with the latest changes that
1194:05 - have been applied to the database so it
1194:07 - makes good sense right here to now upon
1194:11 - creating a new instance of database node
1194:13 - actually to update our local cache as
1194:15 - well okay so i'm just going to say final
1194:17 - note is equal to that and we're going to
1194:18 - return that node
1194:21 - bill right here so this code is the
1194:23 - exact same as it was before except we're
1194:25 - now assigning the return value of from
1194:27 - row to a new local variable here okay
1194:30 - so let's go to our notes and say remove
1194:33 - where
1194:34 - and i'm going to say in here note and
1194:36 - i'm going to say i'm going to say note
1194:38 - id should be equal to id
1194:41 - which is
1194:42 - this thing here okay so we first remove
1194:45 - that node existing node from the notes
1194:48 - array then we say nodes add
1194:52 - and we add the new nodes in there and
1194:54 - then what we're going to do is right
1194:56 - after that update the stream controller
1194:57 - which is our outside facing um interface
1195:01 - so note stream controller add notes okay
1195:05 - so you can see this pattern so we first
1195:07 - always update our local cache and then
1195:09 - we reflect those changes to the outside
1195:11 - world all right
1195:14 - all right great stuff so um
1195:17 - that's for note stream controller and
1195:19 - notes um
1195:20 - [Music]
1195:21 - now there's another function which is
1195:23 - called update notes and
1195:26 - let's go to update node actually before
1195:28 - we have a look at anything else and you
1195:30 - can see in here when we update that
1195:33 - first we make sure that that node exists
1195:35 - so let's put actually a comment in here
1195:36 - make sure note exists
1195:40 - and then we say
1195:41 - update db i'm going to expand this code
1195:44 - so you see better that's the update db
1195:46 - part
1195:47 - and if we couldn't update anything then
1195:49 - we throw it could not update note and
1195:52 - you can see that in here
1195:55 - upon doing an update node what we want
1195:57 - to do is i mean it is quite clever what
1195:59 - we've done so far because it means that
1196:00 - we've updated the database but what we
1196:02 - do then in order to return the new
1196:04 - refresh node is that actually we call
1196:06 - getsnow so
1196:07 - that is that's pretty good so
1196:10 - but what we also need to do is just to
1196:11 - make sure our local and cache is also
1196:14 - updated
1196:15 - so
1196:16 - let's go in here and say final
1196:18 - updated nodes
1196:20 - and what we're going to do as the
1196:21 - caption at the bottom of the screen
1196:23 - indicates we're going to remove that
1196:25 - notes from our local cache and add the
1196:28 - updated note in there and then
1196:31 - send the add message to our stream
1196:33 - controller as well so let's just say
1196:35 - notes
1196:36 - and remove
1196:38 - so we're going to remove the old object
1196:40 - from our cache and i'm just going to say
1196:42 - notes
1196:42 - as long as the notes id is equal to the
1196:46 - updated notes id so that's going to
1196:48 - remove the existing existing node
1196:52 - and i'm going to say notes add and we
1196:55 - have the
1196:56 - updated node in here
1196:59 - as soon as you change your
1197:01 - notes and local cache then you need to
1197:03 - also update your stream so the stream
1197:06 - controller add
1197:07 - notes
1197:08 - all right
1197:10 - and then we return the updated notes in
1197:13 - here so what happening here is just that
1197:15 - we updated something in the database we
1197:17 - got the new object from uh the database
1197:20 - we removed that uh node from a local
1197:23 - cache and then we added it in there okay
1197:26 - added it back that's the updated node
1197:28 - all right
1197:30 - all right great stuff that's for update
1197:32 - notes and then what we need is as the
1197:35 - captioning case is get or create user in
1197:38 - node service
1197:40 - so um
1197:41 - this is a function that we're going to
1197:43 - actually use in the next chapter
1197:45 - um
1197:48 - so
1197:48 - how is this function useful this is the
1197:50 - first time we're actually seeing the the
1197:52 - um
1197:53 - signature for this function as the name
1197:54 - in the case it says get or create user
1197:57 - you see
1197:59 - when you at the moment go into our user
1198:01 - interface let's go to the login view for
1198:04 - instance
1198:05 - login view here
1198:06 - i'm gonna remove the explorer so you see
1198:09 - the code in its entirety and right here
1198:12 - when we do auth service firebase login
1198:14 - then we get the current user if the
1198:16 - email is verified is that we're going to
1198:18 - nodes routes now let's then go to our
1198:21 - notes view you can see right now notes
1198:23 - view the only thing it's doing is that
1198:25 - it's creating an app bar with a um sorry
1198:27 - it's creating a scaffold with an app bar
1198:29 - that we have our logout button in
1198:32 - and let's go actually let me bring up
1198:34 - scr cpy so i'm gonna use my email
1198:37 - address in the login screen so um
1198:40 - i actually may need to go and
1198:42 - connect this device to wi-fi so boom
1198:46 - i'm gonna open up um
1198:50 - that login with my user so i'm to get
1198:53 - rid of all those
1198:56 - i'm going to login in here use oops uh
1198:59 - we've sent you an email verification
1199:00 - okay
1199:01 - maybe i should actually log in with the
1199:03 - user who has already been verified
1199:08 - so let's log in with this user you see
1199:09 - in the main ui of the application um of
1199:12 - our application we have this hello world
1199:15 - right there because
1199:17 - um you can see the body of the
1199:20 - the body of our notes view right now it
1199:22 - just says hello world so you could
1199:24 - pretty much say that the notes view has
1199:27 - literally no contact at the moment with
1199:28 - the notes service
1199:31 - but we're gonna fix this soon by first
1199:34 - making sure that the note service allows
1199:36 - the user interface to
1199:37 - create a new user upon going to the
1199:40 - screen so when we come to the screen we
1199:42 - need to make sure that there is a user
1199:44 - associated with the current firebase
1199:47 - user
1199:48 - inside our database okay
1199:50 - so that's what we need this little uh
1199:53 - good function called get or create user
1199:55 - which returns a database user in our
1199:59 - notes service so we're gonna use that in
1200:02 - the next chapter so remember that okay
1200:04 - but we need to create the function at
1200:05 - this right now
1200:08 - all right let's go then and create this
1200:09 - function as the name indicates so future
1200:13 - and database user and we're going to say
1200:16 - get or create user and it has a required
1200:19 - parameter i can see required stream
1200:21 - email
1200:23 - and it's an async function right
1200:25 - so um
1200:27 - we need to basically have a look at this
1200:28 - how we can create this user
1200:33 - so
1200:34 - the goal in here is to first we try to
1200:37 - get this user from the database if that
1200:39 - user doesn't exist then we're going to
1200:41 - create that user and then in both cases
1200:43 - we're going to return either the
1200:45 - fetched or the created user back to
1200:48 - the
1200:49 - caller
1200:51 - so let's go in here and just say
1200:54 - final
1200:56 - user is await
1200:58 - get user okay and you see the email just
1201:01 - fits in there perfectly but if you
1201:02 - remember from the implementation of get
1201:04 - user let's go in there and expand this
1201:06 - if
1201:07 - the user couldn't be found then it
1201:08 - throws an error says could not find user
1201:10 - that's rq so that if that function
1201:13 - throws that error then we're going to
1201:15 - create that user so if that user doesn't
1201:16 - exist in the database it needs to be
1201:18 - created so let's put a try statement in
1201:20 - here and then we're going to say on
1201:22 - could not find user
1201:23 - so here is
1201:25 - the user so in this case in the try
1201:28 - statement it means that we could get the
1201:30 - user okay so if we get to this return
1201:32 - statement it means that get user
1201:34 - function didn't throw any exceptions
1201:35 - such as could not find user in the case
1201:37 - that we could not find user we're going
1201:39 - to actually create a user so let's just
1201:40 - say created user
1201:42 - is a way to create user
1201:46 - with that email and then we're gonna say
1201:48 - return created user and if you look at
1201:51 - the create user function as well right
1201:54 - here it also i believe does it throw yes
1201:58 - so if it couldn't create that user it if
1202:00 - it's the result was empty it just says
1202:02 - user oh no that's that's where we get
1202:04 - the user sorry about that
1202:06 - we need to have a look at this insert so
1202:08 - yeah that's the only thing it's doing so
1202:10 - it's not basically throwing any other
1202:11 - error okay
1202:13 - the only thing it does is if you're
1202:14 - creating a user that already exists i'm
1202:16 - going to draw an error
1202:18 - so here
1202:19 - we have where and we've ended up with a
1202:21 - try and catch block
1202:22 - that could also throw an exception which
1202:25 - we haven't handled all right so what you
1202:27 - could do is just to do a whole catch in
1202:30 - here and then don't do anything with it
1202:32 - i like this pattern quite a lot in my
1202:34 - code at least because if i don't do this
1202:37 - then i don't actually have the
1202:38 - possibility to debug my application
1202:40 - later so i can't put like a breakpoint
1202:42 - in here and see did any other exception
1202:44 - arise if you don't do that because then
1202:47 - the exception will be thrown to
1202:49 - the caller and the caller will have to
1202:50 - handle that but in this case we're not
1202:52 - really handling the exception we're just
1202:54 - catching it and then we're throwing it
1202:56 - back to the call side this only allows
1202:58 - you basically to put a breakpoint in
1203:00 - here if you want to debug your
1203:01 - application later okay so it's just a
1203:03 - it's just in quite a cheap way of making
1203:06 - your code easier to debug all right for
1203:08 - those of you who are interested in this
1203:12 - all right fantastic and we've covered a
1203:14 - lot and
1203:16 - there's still a lot to do
1203:18 - but we've come far so congratulations um
1203:21 - let's have a look here it says let's get
1203:23 - ready for the next chapter and upon
1203:24 - logging in we need to call our get or
1203:26 - create user function and have the user
1203:28 - ready
1203:29 - and this is what i mentioned to you
1203:31 - before inside our notes view at the
1203:32 - moment
1203:33 - we don't have any functionality that
1203:36 - creates
1203:36 - a new user or gets the current user
1203:39 - based on their email if they already
1203:40 - exist in the database and
1203:42 - that is going to be like the actual uh
1203:45 - first bit of logic which we're gonna do
1203:48 - in the next chapter which integrates our
1203:50 - notes view with the note server so the
1203:52 - tempo
1203:53 - of our course right now is gonna shift
1203:55 - towards more and more to the notes view
1203:58 - until we have a list of notes and allow
1204:01 - the user to create notes update notes so
1204:04 - it's exciting times we've come far we've
1204:06 - done quite a lot of work up up to this
1204:07 - point um and there's still a lot left
1204:09 - but um
1204:11 - hopefully you're getting the attack at
1204:13 - that like the
1204:14 - tempo of the uh
1204:17 - of the course better and better and you
1204:19 - can see
1204:20 - why we are doing things the way we are
1204:22 - doing so
1204:23 - uh congratulations again
1204:25 - and uh
1204:27 - get some refreshments if you want to
1204:29 - again coffee tea and i'll see you in the
1204:31 - next chapter
1204:32 - hello everyone and welcome to chapter 29
1204:34 - of this flutter course in the previous
1204:36 - chapter as you saw we worked with our
1204:38 - note servers and we talked about streams
1204:40 - and stream controllers
1204:42 - we have put uh you know a lot of effort
1204:45 - in our note service in order to talk
1204:47 - with the database and kind of read from
1204:49 - the database and cache
1204:50 - the red information
1204:52 - in our notes uh member variable so if
1204:54 - you haven't watched the previous chapter
1204:56 - i highly suggest that you do that
1204:57 - because
1204:58 - moving forward with this course without
1205:00 - having watched his chapters
1205:01 - chronologically makes it quite difficult
1205:03 - for you to proceed so
1205:05 - i'm gonna build on top of the previous
1205:06 - chapter as we've done with the other
1205:08 - chapters as well and in this chapter
1205:10 - we're gonna basically start putting in
1205:12 - place uh all the structure necessary in
1205:15 - in order for
1205:17 - us to be able to display all the user
1205:18 - generated notes
1205:20 - in the notes view okay
1205:23 - so as you can see we have almost
1205:24 - everything in place um there are a few
1205:27 - functions left to do and we also in this
1205:29 - video in this chapter we're going to
1205:30 - talk about future builder and also a
1205:33 - stream builder
1205:34 - and i don't think we've talked about
1205:36 - stream builder before we talked about
1205:38 - future builder so that's going to be an
1205:40 - exciting um
1205:41 - new thing to talk about in this chapter
1205:45 - all right so
1205:46 - i've just i've talked about this in the
1205:48 - um
1205:50 - in the outro to the previous chapter
1205:52 - that what we need to do in this
1205:54 - chapter right now in chapter 29 is to
1205:57 - allow the user to to go to the notes
1205:59 - view and upon going to the note c we're
1206:01 - all always going to make sure that that
1206:02 - user exists in our database now you see
1206:05 - we have firebase right here and then our
1206:07 - user has upon coming to the notes view
1206:10 - that user must have logged in with a
1206:12 - verified email address so that user
1206:14 - exists we know that that user exists in
1206:17 - firebase and has a verified email
1206:19 - address but that user might not exist in
1206:22 - our database remember we're gonna store
1206:24 - the user generated notes in our database
1206:26 - and hook them to the user who created
1206:29 - those notes okay so
1206:31 - um so upon going to the notes view we
1206:33 - always need to make sure that that user
1206:35 - exists in the database
1206:38 - and the way to do that if you remember
1206:39 - let me just bring the code you don't
1206:40 - have to try to remember that so let's go
1206:42 - into our notes service you can see
1206:47 - we have a function called get all notes
1206:49 - and but we don't have any functionality
1206:51 - at the moment to for instance give us
1206:52 - the notes for a a specific user so
1206:56 - if we want to do that if you want to for
1206:58 - instance get grab all the notes for a
1207:01 - specific user then we're going to go
1207:02 - with a user's email address because if
1207:05 - you look at the way our application is
1207:07 - working with um
1207:09 - the current user you can see we're
1207:11 - working always with officer so we're not
1207:13 - going through um firebase directly and
1207:16 - our auth service also has an off user so
1207:18 - let's have a look at our auth and have a
1207:21 - look at auth user and you'll see that
1207:23 - our auth user only has one flag that
1207:25 - just says is email verified
1207:28 - so how do we go and call this function
1207:31 - which is called get or create user on
1207:33 - our note service where we don't actually
1207:35 - have an email address for our current
1207:37 - user
1207:38 - and that's what we need to do we need to
1207:40 - go ahead and add an email field to our
1207:43 - off user
1207:44 - and so as the caption indicates here we
1207:47 - need to add this field to our off user
1207:49 - okay so i'm going to change the screen
1207:50 - layout a little bit so you see better
1207:53 - and let's go ahead and add a new field
1207:55 - in there i'm going to have a look at my
1207:56 - notes also um or user
1208:00 - so and add a new field in here and we
1208:02 - just call it the final
1208:04 - string um email
1208:06 - just like that and get help from your
1208:09 - editor in order to add the email field
1208:12 - add final field here so this is also
1208:15 - going to be a required parameter like
1208:17 - this and i'm just going to make it
1208:18 - required like this and it come at the
1208:20 - end to get the formatting done
1208:23 - and here where we actually creating our
1208:25 - instance of auth user what we're going
1208:27 - to do is to say we return an auth user
1208:30 - and the email is already actually in the
1208:32 - firebase user let's go to the firebase
1208:34 - user and look for email you see there is
1208:36 - a getter called email okay
1208:40 - and the thing is that this email getter
1208:42 - is optional string so what we need to do
1208:45 - is just to make it optional maybe in our
1208:47 - off user as well okay so in here then
1208:50 - where we create the off user we're just
1208:51 - going to say the email field is equal to
1208:53 - user email and put a comma at the end
1208:55 - here and a comma here as well to get the
1208:57 - format going
1208:59 - so all we did in here would say that our
1209:01 - r auth user has an optional string as
1209:04 - its email and that email string is read
1209:06 - from the firebase user that's all
1209:09 - nothing complicated
1209:10 - all right
1209:14 - okay what we need to do then is to as
1209:16 - the caption indicates go to our notes
1209:18 - view and grab the let's go notes view
1209:20 - here and we need to then read the
1209:23 - current user's email address okay so
1209:26 - what we're gonna do is saying that our
1209:28 - auth user has an optional email but we
1209:30 - we as an application developer are sure
1209:32 - that because we're using email and
1209:34 - password registration we are sure that
1209:36 - any user who ends up in the notes view
1209:39 - has an email address okay so
1209:41 - that's an assumption we're going to make
1209:43 - although our off
1209:45 - user which was let's see if we can find
1209:47 - it
1209:48 - off user here although the off user says
1209:51 - that i optionally have an email but
1209:52 - we're always going to say no that email
1209:54 - should exist because we're only at the
1209:56 - moment using email password sign in
1209:59 - method all right so
1210:01 - in order for this notes view to be able
1210:02 - to make a call to the notes service and
1210:05 - grab
1210:06 - or sorry to create or get the current
1210:09 - user it needs an email so let's go ahead
1210:11 - and expose a functionality in our notes
1210:13 - view
1210:15 - as the caption indicates that grabs the
1210:17 - user's email so let's go in here and i'm
1210:19 - going to go to my notes view as well in
1210:22 - my notes
1210:24 - all right
1210:25 - and what we're going to do in there is
1210:26 - just to expose the user email so let's
1210:29 - just say
1210:30 - string get user email
1210:34 - let's get rid of this side
1210:36 - explorer as well
1210:38 - and i'm going to say off service
1210:41 - firebase
1210:43 - all right off service i don't think it's
1210:44 - imported so let's actually see is it
1210:47 - imported
1210:50 - off service yeah it is imported okay
1210:52 - that's good
1210:54 - about firebase
1210:57 - and this can't be equal so that's why
1210:59 - it's going a little bit crazy firebase
1211:01 - and then we're going to say current user
1211:03 - and you see this current user is now
1211:05 - optional but since we are the
1211:07 - application developer and we're sure
1211:09 - that if you end up in the notes view
1211:11 - then you should have a current user
1211:12 - that's what we've already made sure in
1211:14 - the previous steps okay so if you look
1211:16 - at the
1211:16 - login screen for instance in our login
1211:19 - view so i open the login view here we're
1211:21 - saying if the current user exists and is
1211:24 - email verified is true then go to the
1211:26 - notes view so
1211:27 - then we can be sure that inside the
1211:29 - notes view we already have a user okay
1211:31 - so
1211:32 - this current user in firebase currently
1211:34 - says optional but we're gonna unwrap it
1211:37 - force on rapid okay and then we're gonna
1211:39 - say email and force unwrap that too
1211:44 - all right so um
1211:46 - that's what we've done so now we get the
1211:48 - user's email
1211:51 - now if you remember inside our um
1211:54 - inside our note service we have two
1211:56 - really important functions which at the
1211:58 - moment are at the bottom of this
1212:01 - class which are called open and close
1212:04 - respectively
1212:07 - and what we need to make sure is that
1212:08 - upon going to notes view that
1212:12 - our database is actually open so we
1212:15 - cannot continue to read stuff from
1212:18 - various parts of our database if the
1212:20 - database handle hasn't actually be
1212:22 - created so
1212:24 - let's then go to our uh notes view
1212:27 - and
1212:28 - in here as you can see this is the
1212:30 - reason we made this and notes view a
1212:31 - stateful widget in that we need to now
1212:34 - hook into the two life cycle events of
1212:37 - our notes you and to open our database
1212:39 - upon the creation of this node 2 and
1212:42 - then close the database upon it being
1212:43 - disposed so
1212:45 - as the caption indicates let's go and
1212:47 - overwrite the init state function in
1212:49 - here okay and what we're going to do in
1212:51 - here we're going to say
1212:52 - uh now we want to
1212:54 - basically have a notes service in our
1212:57 - init state and we also need to make sure
1212:59 - that it is open so
1213:03 - so let's have a look uh let me have a
1213:05 - look in my notes as well
1213:07 - all right
1213:08 - so uh
1213:10 - we need to open the database in there so
1213:12 - let's go and
1213:14 - grab a hold of our notes service so we
1213:15 - don't have a note service right now but
1213:17 - we're going to create that so let's just
1213:18 - say late final notes
1213:23 - so this is our uh notes view uh
1213:27 - undefined class notes service
1213:30 - haven't we imported note service and we
1213:32 - haven't so let's just do it on import
1213:34 - right now so this is our notes view
1213:36 - grabbing hold of an instance of node
1213:38 - server so that it can work with it okay
1213:42 - so um
1213:44 - let's go ahead and do that then so we're
1213:46 - going to go and say
1213:48 - notes
1213:48 - service is equal to an instance of nodes
1213:52 - service like this and then we're going
1213:54 - to say nodeservice.open
1213:57 - and right now this function is a future
1214:00 - void
1214:01 - and
1214:01 - you may not really be able to do an
1214:04 - async in your init stating here but
1214:06 - we're just for now we're just saying
1214:08 - open all right so open the database
1214:12 - and that's all we have to do and then we
1214:14 - have to take care of closing the
1214:16 - database so let's go ahead and say
1214:18 - upon disposing
1214:20 - upon this uh notes views disposal we're
1214:23 - also going to close the database because
1214:24 - we're good citizens of the dart lab so
1214:27 - we're not just going to leave the
1214:28 - database open so node service and we're
1214:30 - going to say close all right and
1214:34 - that's that's pretty much it that's all
1214:35 - we have to do for now
1214:38 - okay great stuff let's save this and um
1214:42 - i'm also going to maybe bring a crcpy
1214:45 - here
1214:46 - and what i'm gonna do then is to do a
1214:49 - hot restart
1214:51 - and
1214:52 - let's just log out
1214:55 - and then i'm gonna log in with that user
1214:57 - again
1214:58 - if i can spell pick solitude
1215:03 - um
1215:04 - foo barb has horrible password i've
1215:07 - mentioned this before
1215:09 - authentication error
1215:11 - foo
1215:12 - barbaz it could be because this uh phone
1215:16 - doesn't have wi-fi right now so let's go
1215:19 - in here turn wi-fi on and then i'm gonna
1215:21 - go back here
1215:23 - android phones usually initial
1215:24 - initialize their wi-fi site quite fast
1215:26 - so now we should be able to say login
1215:28 - and we end up in the main ui of the
1215:29 - application so this open function has
1215:31 - gone well
1215:32 - and i can see that we haven't had any
1215:34 - exceptions thrown in the debug console
1215:37 - so
1215:38 - that was open and close
1215:41 - so
1215:42 - so let's have a look in here um
1215:45 - as you can see in the caption uh right
1215:48 - now we are what we're doing is that
1215:49 - we're like issuing different functional
1215:52 - functions in our for instance let's have
1215:53 - a look at delete user what it does is
1215:55 - that it says get database or throw um
1215:58 - and at the moment this get database or
1216:00 - throw only thing it does is just make
1216:02 - sure that this db is available in there
1216:05 - but it doesn't make sure that that
1216:06 - database is open as such it just makes
1216:08 - sure that there is a database
1216:10 - instance in the the internet in the node
1216:13 - service
1216:14 - so what we need to make sure now is that
1216:17 - every function that works with our
1216:18 - database first ensures that the database
1216:20 - not only is instance is there but that
1216:23 - the database also
1216:25 - open
1216:26 - all right because if you look at the
1216:28 - excuse me um here we have the open
1216:31 - database and that basically
1216:32 - sets the instance to that database all
1216:35 - right
1216:36 - so what we need to do is to create a
1216:38 - little function that says ensure
1216:40 - database and what is it called ensure db
1216:43 - is open so
1216:45 - uh
1216:45 - i'm just going to go ahead and have a
1216:47 - look at my notes for ensure dbs
1216:50 - open and um let's have a look at
1216:55 - putting that maybe above open in here
1216:58 - okay so
1217:00 - if you're following along with me you
1217:01 - just go to top of the open function and
1217:04 - we're just gonna say future void
1217:06 - ensure db is open
1217:09 - and that's an async function all right
1217:13 - so
1217:15 - what then we're going to do is just to
1217:17 - say um
1217:20 - let's see
1217:21 - we're going to put a try block in here
1217:24 - and let's go we see that our open
1217:26 - function at the moment
1217:28 - throws an exception that says database
1217:30 - already open exception so what we need
1217:31 - to make sure is that we cache that
1217:33 - exception so when our uh
1217:35 - our uh notes view gets hot reloaded then
1217:39 - it shouldn't try to open the database
1217:41 - over and over again and if it does then
1217:43 - this open function is going to throw an
1217:45 - exception
1217:46 - and um
1217:48 - and our ensure dbs open function is
1217:51 - going to catch that and it's just going
1217:52 - to let it go all right so all it does is
1217:55 - that
1217:56 - we just ensure that we're not opening
1217:58 - the database over and over again because
1217:59 - it's just an overhead okay
1218:01 - so what we're going to do then is we're
1218:03 - going to say awaits open in here
1218:06 - and in here we say we're catching
1218:07 - database
1218:09 - already open exception and we're just
1218:11 - going to let it go in this case so
1218:14 - we just say
1218:17 - sorry on all right so now we have this
1218:20 - intro db function is open uh it's your
1218:23 - db is open function
1218:25 - and we need to start using that um
1218:28 - so let me bring up the right caption so
1218:30 - we need to start using ensure dbs open
1218:33 - function in various functionalities in
1218:34 - our application so let's first go to
1218:36 - delete user
1218:38 - here
1218:39 - and uh we're just going to say await
1218:42 - ensure db is open that's the first place
1218:46 - and let's go to create user
1218:49 - um
1218:50 - we have a function called create user
1218:53 - here
1218:53 - and we're gonna wait on ensure db is
1218:56 - open
1218:57 - okay
1218:59 - that was create user now let's go to
1219:01 - getuser
1219:03 - this function get user right here
1219:05 - if i can go to it for some reason i'm
1219:07 - not able to go to it here and let's say
1219:09 - wait db is over
1219:13 - uh that that that's that part let's go
1219:15 - to get all notes
1219:18 - function get all notes and do the same
1219:20 - thing await
1219:22 - on make sure db is open
1219:25 - oh also i can see i didn't actually call
1219:27 - the function so let's make sure that
1219:29 - i've done it in the other places i'm
1219:31 - just going to copy that code and ensure
1219:33 - bb is open let's just make sure that i'm
1219:35 - actually calling the function and like
1219:36 - i'm not like placing it just there
1219:40 - so it looks fine all right
1219:42 - and so you have to do it in get all
1219:44 - nodes function as well
1219:46 - and we're going to go to create node and
1219:48 - do the same thing so let's just go and
1219:50 - await on
1219:52 - actually paste that code in there wait
1219:53 - ensure db is open
1219:56 - and we're we need to do it in um
1219:59 - so we not we've done it in create node
1220:01 - and let's go ahead to delete node delete
1220:04 - node
1220:05 - and paste the function right there as
1220:06 - well sorry paste the
1220:08 - invocation of the function
1220:11 - delete all nodes
1220:13 - as well delete all nodes right there
1220:16 - do the same thing and also we do it in
1220:18 - gets note
1220:20 - here
1220:21 - the same thing
1220:23 - and also we have what else do we have um
1220:26 - update notes
1220:28 - right there
1220:30 - and we do it as the first call
1220:35 - but and then uh where else do we have to
1220:37 - do it
1220:38 - let's see we've done it now delete user
1220:40 - yeah i think now we place the ensure dbs
1220:43 - open all those calls all right
1220:46 - okay that was a lot of information um so
1220:50 - what we need to do now is to
1220:53 - make sure basically that we work on our
1220:57 - notes view as we promised in the
1220:58 - beginning of this chapter
1221:00 - now you see
1221:02 - the reason that we created the ensure db
1221:04 - is open is that before any of these
1221:06 - functions are called that our code is
1221:10 - actually going to open the database for
1221:11 - us that means in our notes view we don't
1221:14 - actually have to do this anymore because
1221:16 - we know that by issuing any database
1221:18 - related commands to our nodes service
1221:21 - that that function in itself is going to
1221:23 - open the database for us it's just a
1221:25 - nice little feature in our node servers
1221:27 - to make sure that we don't have to make
1221:29 - an extra call to open the database
1221:32 - um before we
1221:35 - start using our node service okay so
1221:37 - it's just like a convenient a little
1221:39 - function
1221:41 - all right as the captioning case now i'm
1221:42 - going to talk about future builder and
1221:44 - async snapshot well um we've talked
1221:47 - actually previously a little bit about
1221:49 - future builders before
1221:52 - but uh what a future builder is maybe
1221:55 - actually you should write it here future
1221:57 - builder and then go to the code so you
1221:59 - see it a little bit better you can see
1222:00 - it is a stateful widget so and what it
1222:04 - does is that it subscribes to a future
1222:07 - that will return its value in the future
1222:09 - if you're familiar with javascript then
1222:11 - you'll know it as promises
1222:12 - um
1222:13 - and uh if you're familiar with rx swift
1222:17 - or any rx related then you'll know
1222:18 - probably as like a single or an
1222:21 - observable kind of actually not an
1222:22 - observable because that's a stream
1222:23 - builder a future builder is kind of like
1222:25 - a single builder meaning that a value
1222:28 - that starts someplace and then
1222:30 - calculates something returns its value
1222:32 - and then it finishes that's it
1222:34 - so a future builder allows you to submit
1222:36 - a future
1222:37 - and it will allow you to submit a
1222:39 - builder meaning that
1222:41 - it takes that chunk of code that
1222:43 - produces a value as a future it says
1222:45 - okay now it's mine i will take it
1222:48 - subscribe to it as the value of this
1222:50 - future changes i will give you the
1222:51 - ability to return various widgets that
1222:54 - need to be displayed on the screen so it
1222:56 - basically ties
1222:58 - your future logic with your ui logic so
1223:00 - it's
1223:01 - absolutely beautiful
1223:03 - so what we need to do now is to make
1223:05 - sure that upon going to our build
1223:08 - function right there in the body you see
1223:11 - in the body of our notes view here
1223:14 - we need to make sure that
1223:16 - we are
1223:18 - creating a user or getting the current
1223:22 - user from the database if it already
1223:24 - exists and we're creating that user if
1223:26 - that user doesn't exist and
1223:29 - if you remember we have this function
1223:30 - already it is called gets or creates
1223:33 - something something a get or a create
1223:35 - user and it's a future so we're going to
1223:38 - create a future builder in our uh notes
1223:41 - view that subscribes itself to the value
1223:43 - that is returned by this and then it
1223:45 - will tell us about various updates and
1223:48 - these various updates are going to be
1223:49 - provided to us as something called an
1223:51 - async snapshot an async snapshot is
1223:54 - basically as its name indicates is a
1223:56 - wrapper as a snapshot around an
1223:58 - asynchronous functionality which is in
1224:00 - this case our future of
1224:02 - get or create user
1224:04 - so that's what we're going to do in our
1224:07 - notes view
1224:09 - as you can see in the
1224:11 - caption we're going to now return a
1224:13 - future builder in nodesview.
1224:16 - and actually that should say notes view
1224:18 - notes underscore
1224:21 - view so i'm going to fix the caption as
1224:22 - well so
1224:24 - i don't confuse anybody including myself
1224:26 - and notes view
1224:29 - here
1224:30 - so now it's better i apologize for that
1224:32 - so
1224:33 - right now we have this hello world but
1224:35 - we're gonna change that so it returns a
1224:37 - notes view so i'm gonna say sorry a
1224:39 - future builder so let's say we now
1224:41 - return a future builder
1224:43 - and now it says okay there are two
1224:45 - parameters that we have to provide one
1224:46 - is the future the other one is actually
1224:47 - the builder function so the builder
1224:50 - sorry the future in itself is going to
1224:52 - be
1224:52 - you see the future is
1224:54 - our note service
1224:56 - get or create the user and the email if
1224:59 - you remember is the current user's email
1225:02 - address which we created a getter for
1225:04 - called user email so let's go put that
1225:06 - in there user email and then you can see
1225:09 - it's still complaining saying that the
1225:10 - builder function hasn't been
1225:12 - provided
1225:14 - so let's go and say then that we have a
1225:15 - builder function
1225:17 - and right there and i talked about async
1225:20 - snapshot because that's the parameter
1225:21 - that you get in here is this is async
1225:23 - snap snapshot of object right now
1225:27 - but we're gonna fix that so um
1225:30 - let's then in here um
1225:34 - let's then talk about actually
1225:37 - this functionality right here
1225:39 - so
1225:40 - after we get the current user or creates
1225:43 - a new user if that user hasn't existed
1225:45 - in our database we also need to grab all
1225:48 - the nodes for that user
1225:50 - and
1225:51 - we don't right now
1225:54 - have the functionality to
1225:56 - have like a stream of all the nodes for
1225:58 - the current user we're going to add that
1226:00 - soon but as you can see in the caching
1226:01 - is we can achieve this with our stream
1226:03 - controller which we've already placed
1226:05 - like the groundwork for in our node
1226:08 - service
1226:09 - so let's go and create a little
1226:11 - functionality in here in our notes
1226:13 - service dot dart
1226:15 - and as you can see it
1226:17 - allows you to retrieve all the notes so
1226:20 - we're just going to say stream
1226:24 - of a list of database notes
1226:26 - database notes like that
1226:29 - and we it's a getter and we call it all
1226:31 - notes okay and what it does is is in
1226:34 - itself is gonna subscribe to this note
1226:37 - stream controller and retrieve all the
1226:39 - notes from that controller because
1226:41 - remember this note stream controller in
1226:42 - it
1226:43 - in itself contains this guy all right
1226:46 - so and that's what we're going to do
1226:48 - we're going to say it returns the node
1226:50 - stream controller stream
1226:54 - actually another stream get all not so
1226:56 - sorry that was wrong
1226:58 - and stream
1227:01 - all right
1227:04 - so that's our getter for getting all the
1227:06 - notes um now what we need to do now that
1227:09 - we've created our uh so back into back
1227:12 - in note2.dart now that we have
1227:15 - created our
1227:17 - user
1227:19 - what we need to make sure of is that if
1227:23 - the user could be created then we are
1227:26 - going to work with something called a
1227:28 - stream builder that retrieves all the
1227:30 - nodes from the node service and then
1227:31 - renders them on the screen okay
1227:34 - but we can't yet render them we don't
1227:36 - have any user generated content and we
1227:37 - also don't know yet how to render them
1227:39 - so first let's take care of something in
1227:41 - here this snapshot in here what we need
1227:43 - to do is to say if snapchat
1227:45 - connection state is connection
1227:48 - state dot done
1227:51 - like this
1227:53 - um
1227:53 - if that's the case then we're gonna do
1227:55 - some logic in here so let's just say
1227:57 - return a text of hello for now okay
1228:01 - actually we need to maybe switch this so
1228:03 - let's just say switch
1228:07 - snapshot dots connection state and i
1228:10 - really like to get uh visual studio code
1228:12 - to complete the rest for me so i don't
1228:14 - like to write all the cases so i'm just
1228:16 - gonna say command dot or on mac or
1228:18 - control dot on linux and windows i say
1228:19 - add missing case clauses and in the case
1228:22 - of done i'm just going to say return
1228:24 - this text okay
1228:26 - if the creation or the retrieval of the
1228:28 - current user was completed then just
1228:30 - return this text hello
1228:32 - and in any other case for instance in
1228:35 - the case of default
1228:38 - we're just going to return
1228:41 - a circular progress indicator just like
1228:43 - that
1228:45 - okay then i'm gonna put the case of done
1228:48 - above that
1228:49 - like that all right
1228:52 - let's then do a hot restart and i can
1228:55 - see my um scrcpy kind of just crashed so
1228:59 - yeah stuff like that happens sometimes
1229:00 - and that's okay let me go ahead and go
1229:03 - back to this shell and say hcr cpy
1229:08 - the application is working fine it's
1229:09 - just that scr cpy crest so i'm just
1229:11 - gonna say your notes will appear here
1229:14 - now
1229:15 - command s
1229:17 - actually my debug process has crashed as
1229:19 - well so
1229:20 - i'm going to run the application now
1229:22 - again
1229:25 - hopefully this
1229:27 - gradle task goes fast because we've
1229:29 - already compiled the application from
1229:30 - before
1229:32 - so what we need to do you see we are now
1229:34 - taking care of making sure that the user
1229:37 - is created in the database if it didn't
1229:38 - exist or we're getting the user if that
1229:40 - user exists in the database but what we
1229:42 - also need to do is to start listening to
1229:46 - changes to this stream which is in our
1229:48 - note service called all nodes and
1229:50 - depending on the state of that stream
1229:54 - then we're going to build our user
1229:55 - interface all right so in this in here
1229:59 - we're actually not going to return like
1230:00 - a text of hey your notes will appear
1230:03 - here but we're actually going to use a
1230:05 - stream builder which is very similar to
1230:08 - a future builder but it actually listens
1230:10 - to changes to a stream okay
1230:14 - so
1230:15 - oops did i just kill the application
1230:18 - right here
1230:19 - so there we go your notes will appear
1230:21 - here so
1230:22 - that seems to be working fine so let's
1230:24 - go in here and then say that we want to
1230:26 - um
1230:29 - return
1230:31 - our stream builder i'm going to put this
1230:32 - back and before we do that i want to
1230:35 - explain this little thing that i've
1230:37 - shown in the captions
1230:38 - what are the waiting and dawn flags in
1230:42 - the connection state you see
1230:43 - both a stream builder and a future
1230:45 - builder work with something called an
1230:47 - async snapshot which is this guy you see
1230:49 - async snapshot and this async snapshot
1230:52 - can have various connection states so if
1230:53 - you go to connection state in there and
1230:55 - you can see we have none waiting active
1230:58 - done all right so
1231:03 - when you when you have you see in the
1231:05 - case of an active says for example a
1231:07 - stream that has returned at least one
1231:08 - value but is not yet done
1231:10 - so that's for a that's for a stream
1231:14 - uh but if you're waiting for a future or
1231:17 - a stream then you're gonna get this
1231:19 - waiting flag and it done is gonna happen
1231:21 - for your um a future so a future that
1231:24 - has completed its task as i said it does
1231:26 - something and it completes but a stream
1231:28 - usually it just keeps living so you
1231:30 - can't like hook into or you shouldn't
1231:32 - hook into the done event for a stream
1231:34 - but you should actually hook into your
1231:36 - waiting um
1231:39 - connection state so that's what we're
1231:40 - going to do so connections stay done for
1231:42 - a future and a connection state of um
1231:46 - are
1231:46 - waiting for the stream so in here let's
1231:49 - then create a
1231:51 - stream builder
1231:53 - and our stream
1231:55 - is going to be our note services all
1231:58 - notes um
1232:03 - so that's the stream itself and then we
1232:05 - need a builder and let's get visual
1232:08 - studio to complete that for us um
1232:11 - okay and in the builder what we're gonna
1232:13 - do is we're gonna say switch
1232:16 - snapshot connection state
1232:19 - like this get visual studio code to
1232:20 - complete the rest for you
1232:22 - in the case of
1232:24 - waiting
1232:26 - we're just going to say
1232:29 - return
1232:30 - paused text waiting
1232:33 - for all notes
1232:36 - okay
1232:36 - i'm going to remove the break from here
1232:40 - and in any other case so in the case of
1232:43 - default we're just going to say
1232:45 - return
1232:47 - on circular progress indicator just like
1232:50 - that
1232:52 - so now you see if i command s to hot
1232:54 - reload then it just says waiting for all
1232:56 - nodes to appear on the screen so
1232:58 - this is now like the skeleton of our
1233:01 - application's notes view so that it
1233:04 - takes care of two things it gets the
1233:06 - current user using his or her email
1233:08 - address if that user already exists in
1233:09 - the database or creates it so that's the
1233:11 - future builder and the
1233:14 - the widget returned by the future
1233:16 - builder in itself is a stream builder
1233:19 - so the stream builder then calculates
1233:20 - all the nodes and returns them from the
1233:23 - node service and then it has a
1233:25 - connection state and waiting which in
1233:27 - turn right now is saying waiting for all
1233:28 - nodes and we're going to change this
1233:30 - later
1233:31 - so that
1233:33 - so that uh
1233:34 - it doesn't just return a text it
1233:36 - actually returns a list of notes all
1233:38 - right so
1233:40 - now let's talk about something else
1233:42 - before we wrap up this chapter and you
1233:45 - see at the moment what we're doing is
1233:46 - that we're saying our note service um is
1233:50 - a new service right here so every time
1233:53 - go into init states if i command s in
1233:55 - here or if you did a hot reload or hot
1233:57 - restarting here actually hot restart
1233:59 - this
1234:01 - i can see maybe that is the reason we're
1234:02 - crashing the entire application because
1234:04 - we're creating a new node service so
1234:06 - that could be the reason i can see hot
1234:07 - restart is a little bit flaky right now
1234:09 - so um so that is pretty much the reason
1234:11 - we're going to create a single now if
1234:14 - you're not familiar with what a
1234:15 - singleton is a singleton essentially is
1234:17 - a pattern used in software development
1234:19 - where you create a
1234:21 - service for instance or a class instance
1234:24 - where that class instance is only one
1234:28 - inside the entire application right now
1234:30 - any place in our app we can go and
1234:32 - create a new instance of node service
1234:33 - but if you think about it the node
1234:35 - service should only exist as one copy in
1234:38 - the entire application it shouldn't be
1234:39 - like made new copies of this note
1234:41 - service over and over again so that's
1234:43 - what a singleton is and that's what
1234:44 - we're going to do with our note service
1234:48 - so i see i have a little bit of problem
1234:50 - with my um
1234:53 - captions and i'm going to bring the next
1234:54 - captioner and fix that
1234:56 - so let's go ahead first and uh
1234:59 - before i run the application maybe we
1235:00 - should fix this problem with our
1235:02 - singleton so let's go to our note
1235:04 - service
1235:06 - and we're going to create a single now
1235:08 - singleton pattern in various languages
1235:10 - i mean it differs from language language
1235:12 - and dart is not as clean to be honest
1235:15 - with you in my opinion as it should be
1235:16 - such as it is in languages such as swift
1235:19 - um but it is what it is and we need to
1235:22 - kind of live with it the way uh it works
1235:24 - right now
1235:26 - so the way that we do it uh that we make
1235:29 - our
1235:30 - class note service a singleton is to go
1235:33 - ahead and
1235:35 - first create a private
1235:38 - constructor for our class so we're going
1235:40 - to say note service
1235:42 - underscore and just a
1235:45 - shared instance
1235:47 - and this is just a function name it's
1235:48 - just a private initializer to this class
1235:50 - okay
1235:52 - and what we're going to do then is we're
1235:53 - going to say static
1235:55 - final
1235:56 - notes
1235:58 - service so we're creating a shared
1236:01 - instance and we're going to say notes
1236:03 - service
1236:05 - got shared instance so this creates that
1236:06 - shared instance for us but no one from
1236:08 - the outside world is going to be able to
1236:10 - then make a call to these two because
1236:12 - they are well private so now we're going
1236:15 - to create a factory constructor we're
1236:16 - going to call it note service
1236:18 - like that and that is going to return a
1236:21 - shared instance for us so it's just a
1236:22 - hack to be honest with you in my opinion
1236:24 - at least it's it's a hacky way of
1236:26 - creating a singleton but that's the way
1236:28 - it works in dart at least for now
1236:31 - all right now we've created our
1236:32 - singleton so what we can do then is i
1236:35 - mean we don't have to make any changes
1236:37 - to this guy to the init state because
1236:38 - right now it's making any
1236:40 - it's constructing node service and we
1236:43 - have changed that so that anyone who
1236:45 - calls node service like this is actually
1236:47 - coming to the factory constructor which
1236:50 - then in turns returns this shared
1236:51 - instance which in turn calls this
1236:53 - private factory and it causes private
1236:55 - initializer or constructor so it's like
1236:58 - a three layer
1236:59 - deep in order to create a singleton
1237:03 - all right well done we
1237:05 - i mean we could also try to run the
1237:07 - application while all this is going on
1237:10 - and i can bring up scr cpy again and if
1237:13 - it's doing any better bring it up here
1237:16 - okay
1237:16 - so
1237:18 - we've done quite a lot of work we've
1237:19 - laid the groundwork for the next chapter
1237:22 - so now we have the ability to hook into
1237:25 - all the notes available in our database
1237:27 - which is being controlled by a stream
1237:29 - and a stream controller and we're then
1237:31 - being able then we're able to display
1237:33 - those notes on the screen use using this
1237:37 - stream builder which i'm trying to find
1237:39 - right now which is right here okay so
1237:41 - we've done quite a lot of work and well
1237:43 - done to you for sticking with me
1237:45 - throughout this chapter
1237:48 - as is the tradition we are doing in
1237:50 - every other chapter by the end of
1237:51 - chapter we commit our work and also tag
1237:54 - them so let's go ahead and do that i'm
1237:55 - going to change the
1237:57 - screen layout a little bit get rid of
1237:58 - the cr cpy it has been a little bit
1238:00 - angry with us today this scr cpy
1238:03 - and here's the screen layout and i'm
1238:05 - going to increase the font size of it
1238:08 - and a new shell all right so in the
1238:11 - previous chapter we uh committed and
1238:13 - tagged our work as a
1238:15 - step 11 i believe so if you say git tag
1238:17 - you can see we have up to step 11. let's
1238:20 - go ahead and say git status first
1238:23 - yep some files that have been modified
1238:25 - and we
1238:26 - add all the files and then we say
1238:29 - step 12 this time and we push our
1238:32 - changes
1238:34 - and then we're going to tag our work as
1238:36 - well as step
1238:38 - 12
1238:40 - and then we push our attacks
1238:44 - fantastic well done now
1238:46 - again uh what we do in the end of every
1238:48 - chapter is we talked a little bit about
1238:50 - what we're gonna talk about in the next
1238:52 - chapter
1238:53 - and as the caption indicates we're gonna
1238:55 - uh
1238:56 - we're done with the basics of the notes
1238:58 - but we have no data and that's what
1238:59 - we're gonna fix a remedy in the next
1239:02 - chapter so we're gonna talk about how we
1239:04 - allow the user to press a button for
1239:06 - instance in order to create a new note
1239:08 - and for that note then to appear in our
1239:11 - stream builder and display to the user
1239:14 - so
1239:15 - maybe you want to take a little break
1239:17 - some refreshments do that please and
1239:19 - i'll see you in the next chapter
1239:21 - hello everyone and welcome to chapter 30
1239:24 - of this flutter course in the previous
1239:26 - chapters we've been working quite a lot
1239:27 - with our database layer and we've also
1239:29 - been working with the ui in order to
1239:31 - kind of make sure that we can
1239:33 - have a list of notes um but as you've
1239:36 - seen in the previous chapters we don't
1239:38 - have notes or
1239:39 - we don't actually have
1239:41 - the ability for the user to create these
1239:43 - notes so starting from this chapter
1239:45 - we're going to start working on creating
1239:47 - some sort of user interface in which the
1239:49 - user can enter
1239:51 - their notes and those notes will be
1239:52 - saved then with our quad servers that
1239:55 - we've created in one of the previous
1239:56 - chapters
1239:59 - before we carry on let's take care of
1240:01 - one thing at the moment our notes view
1240:03 - doesn't really have like the proper
1240:05 - title i'm going to bring the code here
1240:07 - on the screen so you see it as well
1240:10 - and i'm going to bring scrcpy you may
1240:12 - have your simulator or emulator um or an
1240:16 - actual device on the screen so that's
1240:18 - also fine
1240:19 - let's do some rearrangement here and i'm
1240:22 - also going to rearrange the screen here
1240:24 - so you see the code better at the moment
1240:27 - the ui and the title of our main ui is
1240:30 - just saying main ui so let's take care
1240:32 - of that and that's inside notes view
1240:34 - dart
1240:36 - let's find where we're creating the app
1240:38 - bar and here we're saying main ui so as
1240:41 - the caption indicates we're gonna change
1240:43 - that to your notes
1240:44 - like this and command s hot reload and
1240:47 - then we can see your notes appear there
1240:50 - so that part is now done um
1240:54 - so
1240:55 - let's now have a look at how we're gonna
1240:57 - enable a user to create new notes in our
1241:00 - application you see
1241:02 - um
1241:03 - there are different ways of going about
1241:04 - doing that there are like some
1241:06 - applications that will display
1241:08 - something called a floating action
1241:10 - button a floating action button is a
1241:12 - button that appears usually to the
1241:14 - bottom right of the screen if you have
1241:17 - languages which are left to right or if
1241:19 - you have arabic lang like arabic persian
1241:22 - language like that that you write from
1241:23 - right to left then that floating action
1241:25 - button should appear on bottom left so
1241:27 - it's kind of like a button that appears
1241:29 - just floating on the screen
1241:32 - um and usually it's like out of uh out
1241:34 - of your um out of the way for your main
1241:37 - ui
1241:38 - uh however it can get sometimes in the
1241:40 - middle of the way so
1241:42 - um
1241:43 - for instance if you have a list of notes
1241:45 - and these notes can like their titles
1241:47 - can go to a few lines of text and then
1241:50 - you have a floating button that sits
1241:52 - like at the bottom of the screen it
1241:53 - could just block some again parts of
1241:55 - your content so
1241:57 - some people don't like floating action
1241:58 - buttons
1241:59 - and floating bar action buttons are
1242:02 - usually
1242:03 - they usually appear in android
1242:04 - applications is i think it's it's coming
1242:06 - from material design from google i could
1242:08 - be wrong about this but usually you
1242:10 - don't see them in ios applications and
1242:12 - since we're developing our application
1242:13 - to be user friendly for both ios and
1242:16 - android users we're not going to use
1242:17 - floating action buttons for now but
1242:19 - there's just to be clear there's really
1242:21 - nothing wrong with floating action
1242:22 - buttons so
1242:24 - so what we could do is either we could
1242:27 - go in our menu here where we have log
1242:30 - out and create a new item in here that
1242:32 - says for instance a plus or add
1242:35 - add a new note or something like that
1242:37 - i'm sorry i'll just add this also
1242:39 - to uh do not disturb so we could either
1242:41 - add an item in here that says add note
1242:43 - something like that or we could go to
1242:46 - this bar that we have up here our app
1242:48 - bar
1242:49 - and add a new item just like we have
1242:52 - this three vertical
1242:54 - dots we could add a new item in there
1242:58 - so now
1243:00 - then it comes to kind of like preference
1243:02 - and some sort of reasoning of why we
1243:04 - should add
1243:06 - the plus button the way we're gonna add
1243:07 - it and my reasoning behind um
1243:10 - wanting to put the plus button
1243:13 - but like beside this
1243:15 - these vertical three dots is that
1243:17 - adding a new note is pretty much like
1243:20 - one of the main tasks users would want
1243:22 - to do in your application's main user
1243:24 - interface so they either go in here to
1243:27 - and delete their notes update their
1243:29 - notes or add a new note so there are
1243:31 - three things they're going to do
1243:33 - deleting notes is usually not that
1243:35 - common so updating notes and adding new
1243:38 - notes should be like the main actions
1243:40 - that your users perform in your main uh
1243:43 - application ui so it should be very
1243:45 - instantaneous it should just be very
1243:47 - easy for users to do that so if you put
1243:49 - a plus button here
1243:51 - beside this these three vertical dots
1243:54 - then it takes the user just one click to
1243:56 - go to the new screen in order to create
1243:58 - a new node however if you put like add
1244:01 - to notes
1244:02 - menu in here then they have to first do
1244:04 - one tab to go here and then another tab
1244:07 - in order to create to go to the next
1244:09 - screen and that's just like one tab
1244:11 - extra
1244:13 - and that's where we're gonna add a plus
1244:15 - button beside these three vertical dots
1244:19 - so before we get started with that let's
1244:22 - go ahead and
1244:23 - do some preparation for that so we need
1244:25 - a widget and which is going to be our
1244:27 - new notes view and as you can see we're
1244:29 - going to create a new file for it inside
1244:32 - lib views notes which is a new folder i
1244:35 - believe which we haven't had from before
1244:38 - let's go in here we have views as you
1244:40 - can see and we don't have a folder
1244:42 - called notes so
1244:44 - in views what we're going to create now
1244:47 - is this dart file new node view so i'm
1244:49 - just going to right click on it and say
1244:51 - here i'm going to say a folder called
1244:53 - notes which we don't have yet
1244:55 - and i'm going to say new notes view dot
1244:57 - dart okay so that's that file already
1245:00 - we're not going to do anything in that
1245:01 - file yet
1245:04 - and now that we have our
1245:06 - notes folder under views it just makes
1245:09 - sense to move our notes view here as
1245:11 - well which is at the moment sitting
1245:13 - under views you can see the breadcrumb
1245:16 - here says lib views notes view it makes
1245:19 - sense now to move this notes view which
1245:21 - is the list of our notes into this notes
1245:24 - folder as well so i'm going to need you
1245:26 - to just drag that file and place it
1245:29 - inside the notes folder
1245:32 - okay
1245:34 - all right that's great
1245:37 - excuse me so we've done that now
1245:39 - um
1245:40 - now what you may have noticed if i bring
1245:43 - the
1245:44 - list a little bit higher now that we've
1245:45 - done that
1245:47 - also let's just make sure we haven't
1245:48 - broken any uh
1245:50 - imports
1245:51 - notes view oh i see that's that's really
1245:53 - great because by dragging the notes view
1245:55 - into
1245:56 - the notes folder visual studio was
1245:58 - intelligent enough to refactor also all
1246:02 - the imports that we're referring to
1246:03 - notes view so your editor of choice like
1246:06 - if you're using sublime or if you're
1246:07 - using some vim for instance it may not
1246:10 - be able to automatically take care of
1246:12 - that so by you moving your notes view
1246:14 - inside the notes folder depending on how
1246:16 - you do it you may need to fix your
1246:19 - imports as well so
1246:21 - if you search for nodesview. let's have
1246:24 - a look at
1246:25 - i can see the only place it was imported
1246:27 - it was the main.dart file so you will
1246:30 - you might need to go and fix that import
1246:32 - in there okay so if you're getting an
1246:34 - error for your imports then you know why
1246:38 - all right so
1246:39 - that's that's moving our notes you
1246:42 - now if you've noticed if you go back to
1246:43 - the editor here you'll you probably have
1246:46 - noticed that we have some red files in
1246:47 - here and it's because
1246:49 - we have added um
1246:51 - our email uh
1246:53 - an email field to our auth user so if
1246:56 - you go in here you can see that we added
1246:58 - this email field in our auth user in one
1247:00 - of the previous chapters
1247:02 - because we needed
1247:04 - to be able to retrieve
1247:06 - nodes for a specific auth user from our
1247:08 - node service okay
1247:10 - so after adding that now we've broken
1247:12 - our tests and we haven't really had the
1247:14 - time yet to fix the test so
1247:17 - uh
1247:18 - let's have a look at how we can fix our
1247:20 - test if we if you dr uh scroll down a
1247:23 - little bit in our tests file you will
1247:26 - notice where we've broken the test and
1247:29 - this is here we're in two places where
1247:31 - we're creating an off user okay here
1247:35 - and the way we're working with this off
1247:37 - user in our test is not really something
1247:39 - that we're writing tests for later like
1247:41 - we're not actually creating an off user
1247:44 - and then
1247:45 - doing a test against the off users email
1247:48 - so it's at the moment it's pretty much
1247:50 - just decoration in that we need to just
1247:52 - make sure that our tests compile and
1247:55 - that we don't have a compilation error
1247:57 - here so let's go and see if visual
1247:59 - studio code can help us with that so i'm
1248:01 - just going to do command dot on mac or
1248:03 - control dot on windows and linux and say
1248:04 - add required argument eval and for email
1248:07 - you could just say fooatbar.com so that
1248:09 - doesn't matter so much and a comma at
1248:12 - the end to get dark formatter to format
1248:13 - the file correctly for us
1248:16 - and then excuse me gonna get help from
1248:18 - visual studio code again and say add
1248:20 - record argument email and again we're
1248:22 - going to say um
1248:24 - fooatbar.com
1248:26 - and a commanding all right
1248:29 - so as you can see in the caption also we
1248:31 - just need to make sure that we're
1248:32 - running our tests and making sure that
1248:33 - we haven't broken anything so let's go
1248:35 - to our tests in here and see if i
1248:38 - if i can bring this up a little bit
1248:40 - change the screen layout so you see what
1248:42 - i'm doing as well uh
1248:44 - increase the size of the screen and i'm
1248:46 - going to search for flutter test and
1248:48 - that's the line the command that you
1248:50 - also have to type as the caption at the
1248:52 - bottom of the screen indicates as well
1248:55 - and let's just run our tests and see
1248:57 - what we get for results if we've done
1248:59 - everything correctly we shouldn't have
1249:00 - any problems with our tests at the
1249:02 - moment
1249:04 - but you may have like diverged from the
1249:06 - course uh for a good reason and written
1249:08 - more tests and you may then have to fix
1249:11 - those tests as well and i highly
1249:13 - encourage all my
1249:15 - watchers whoever's watching this course
1249:16 - to actually do as many tests as possible
1249:19 - experiment with widget test integration
1249:21 - tests and unit tests as much as you can
1249:23 - to learn how that works
1249:26 - um
1249:27 - all right so that's that now let's go
1249:30 - ahead and change the screen layout we've
1249:31 - taken care of our tests now and you can
1249:33 - see the
1249:35 - tests have passed and also we don't have
1249:38 - any more red flags inside our
1249:42 - auth test.dart file
1249:45 - all right so what we need to do now you
1249:47 - see
1249:48 - when we then add a plus button to our
1249:52 - main ui in order to go to
1249:54 - our new view which is um
1249:57 - i believe we created it here new note
1249:59 - view
1250:00 - we need to define a round for it we've
1250:02 - already done that for um
1250:05 - for
1250:07 - all our other routes so if we have a
1250:09 - look at our um let's see if we can find
1250:12 - it
1250:13 - constants routes
1250:15 - we have verified email routes we have
1250:17 - nodes route register route and all of
1250:18 - those
1250:19 - so i'm just going to have a look at my
1250:21 - notes and make sure that we define our
1250:23 - new route in here
1250:25 - excuse me
1250:26 - so let's go and call this new route and
1250:28 - we're going to call it new
1250:30 - note route and we're just going to say
1250:32 - slash
1250:33 - and notes slash
1250:35 - new note
1250:37 - all right so
1250:38 - and remember this doesn't really mean
1250:41 - anything except for
1250:43 - excuse me again
1250:45 - except for you to handle like your route
1250:48 - name so
1250:49 - if you had like notes with a z it would
1250:53 - also work as long as you're using the
1250:54 - same route name everywhere
1250:56 - so don't think that this is like bound
1250:58 - to any sort of a magical
1251:00 - file finding a mechanism in flutter it
1251:03 - has nothing to do with that it's just
1251:04 - for you to define your route name so you
1251:06 - could literally just say fu in here and
1251:09 - as long as you use this route name
1251:10 - everywhere everything's just gonna work
1251:12 - as expected
1251:14 - so
1251:15 - that's our new note route created inside
1251:18 - the cons
1251:20 - of routes dart
1251:22 - as the notes indicate as the caption on
1251:24 - the screen indicates we have to go to
1251:26 - main dart file in here
1251:28 - and we need to then go and define that
1251:30 - route uh here
1251:32 - okay so we have login route register
1251:35 - route notes route verify email route and
1251:37 - then we have to define this new route
1251:39 - which is called new node route okay
1251:41 - so let's just let's just say new node
1251:43 - route it takes a build context in here
1251:46 - we could just ignore that with an
1251:48 - underscore if you want to i'm not doing
1251:49 - that and then we're going to create a
1251:51 - new instance of new uh
1251:54 - node routes
1251:56 - sorry a new node view um but we don't
1251:59 - have that yet so let's go and define the
1252:02 - new node view
1252:05 - but for now i'm just going to say const
1252:07 - new node view like this and this is not
1252:09 - going to work
1252:11 - because we don't have that view set up
1252:12 - yet we've just created the file for it
1252:14 - okay
1252:16 - so i'm going to close some files which
1252:18 - we don't need and let's go into our new
1252:21 - note view
1252:24 - and as the caption indicates we're going
1252:25 - to create a stateful widget called new
1252:28 - note view so i'm going to use a flutter
1252:32 - sorry visual studio codes and stateful
1252:35 - widget template here stf
1252:37 - and i'm going to call it new notes view
1252:40 - right
1252:41 - and we're going to get some errors and
1252:43 - you know already that's because we have
1252:45 - an imported material dot dart so i'm
1252:47 - going to get help from visual studio
1252:48 - code command dot
1252:50 - on mac or control dot on linux and
1252:51 - windows and say import material
1252:53 - and all those errors are going to go
1252:54 - away okay
1252:57 - so now we have our new node view
1253:01 - excuse me
1253:04 - so let's then inside this new note view
1253:06 - go creates a simple scaffold so
1253:09 - i'm going to say we have a scaffold
1253:12 - and inside our scaffold we have an app
1253:14 - bar and we're going to say avbar
1253:17 - and an app bar has a title and in here
1253:19 - we're just going to say cons text
1253:22 - new note
1253:23 - something like this
1253:26 - and for the body of this scaffold we're
1253:29 - just gonna add a
1253:31 - const of text that says write your new
1253:36 - note here something like this okay
1253:40 - so this is a very simple stateful widget
1253:42 - at the moment i mean it's not even
1253:43 - stateful it and what it's doing right
1253:45 - now is it could pretty much be achieved
1253:47 - with a stateless widget but in the in
1253:49 - the next chapters we're going to add
1253:50 - more and more logic to this view so it
1253:52 - needs to be a stateful widget for it to
1253:54 - be able to work in the future as well
1253:57 - and for what we have planned for it okay
1254:01 - excuse me so now that we have this ma
1254:04 - new note view let's go ahead in here
1254:06 - back to our main dart and get help from
1254:09 - visual studio code to import that file
1254:11 - for us so i'm just gonna say import and
1254:13 - you'll see it will be a new import
1254:16 - right here on line five for me maybe
1254:18 - another line for you
1254:20 - so let's import a new node view and it
1254:22 - allows us to basically define a route
1254:24 - i'm just to say command s and just to be
1254:27 - sure
1254:28 - since actually not to be sure we are we
1254:30 - are 100 certain that the changes in our
1254:33 - main um function won't be
1254:36 - won't be taken
1254:37 - uh
1254:38 - into consideration when we do a hot
1254:41 - reload we have to do hot restart for
1254:42 - these changes to take effect so let's do
1254:45 - a hot restart here
1254:48 - okay and for some reason i can actually
1254:51 - see my scr cpy has now crashed again
1254:53 - it's a bit flaky that's okay i i'm not
1254:56 - gonna complain
1254:57 - uh
1254:58 - it's just
1254:59 - an open source project to be honest with
1255:01 - you and i can see i actually have lost
1255:03 - my connection from flutter as well to
1255:06 - the program so
1255:07 - let me run that code now in scrcpy on my
1255:10 - actual android phone
1255:13 - and i'm
1255:14 - also going to ensure that my android
1255:16 - phone actually has wi-fi
1255:18 - as well so turn wi-fi on on my phone and
1255:22 - i'm going to go back here to the main
1255:24 - interface so while this is all compiling
1255:28 - let's go to the next step that we have
1255:30 - to take care of which is actually
1255:31 - displaying
1255:33 - oops
1255:35 - so which is actually displaying
1255:38 - um this new note view all right
1255:43 - as a caption indicates we need to go to
1255:44 - the notes view and on press of the icon
1255:47 - button show the new notes view so
1255:50 - i'm going to go to my notes as well go
1255:52 - to notes here
1255:55 - and we have to add a little
1255:59 - button
1256:02 - on our
1256:04 - uh notes view so let's go ahead and
1256:07 - go there we'll have a look at how our
1256:09 - note2 is structured at the moment as you
1256:11 - can see right now we have an array of
1256:13 - actions which just for now it has a
1256:16 - pop-up menu button
1256:18 - excuse me and we need to add a new icon
1256:21 - button in there so let's go ahead and
1256:23 - say icon button
1256:24 - an icon button has to have an icon and
1256:27 - an on press so let's say unpressed so
1256:30 - remember this is going to be our plus
1256:32 - icon all right
1256:34 - so that's our on press and for the icon
1256:36 - we're just going to say const icon
1256:39 - and then we're going to say icons add
1256:41 - and as you can see i believe that your
1256:43 - studio code was able to show your icons
1256:45 - right in line as well so you can see
1256:47 - here that's how the button is going to
1256:49 - look like which is a plus button all
1256:51 - right
1256:52 - and a comma here to get that working so
1256:54 - if i do command s in here now we should
1256:56 - see a plus button after hot reload all
1256:58 - right so but that button isn't doing
1257:00 - anything because it's unpressed it's
1257:02 - empty all right
1257:04 - so what we need to do is just to say uh
1257:06 - navigator
1257:07 - of our context or build context and
1257:10 - we're just going to push a route called
1257:13 - new node routes that's it
1257:15 - all right
1257:16 - so that's all you have to add a comma
1257:18 - here just to get the code formatting
1257:19 - working all right
1257:22 - so let's let's actually test this and
1257:24 - see if it works so i'm going to press
1257:25 - the plus button in here and you can see
1257:28 - our new node route is being displayed on
1257:30 - the screen with the little text that we
1257:32 - added here
1257:33 - that says write your new node here right
1257:35 - and pressing the back button will then
1257:37 - send us back to the main ui of the
1257:39 - application and you may have noticed
1257:41 - that in the notes view i didn't say push
1257:43 - name and remove until and that's because
1257:46 - when you press the plus button in order
1257:48 - to create a new note you want the user
1257:50 - to be able to get back to the main ui of
1257:52 - the application whenever they need to
1257:53 - and that's what
1257:54 - is facility facilitating this back
1257:57 - button right here okay
1258:00 - all right that was great stuff and that
1258:02 - is pretty much all we had to do for this
1258:04 - chapter
1258:06 - so a short chapter is kind of refreshing
1258:08 - to be honest with you if you ask me so
1258:10 - that's really good um
1258:12 - as is tradition let's commit our work so
1258:16 - that we can get ready for the next
1258:18 - chapter i'm gonna change the screen
1258:20 - layout here a little bit
1258:22 - oops um let's go in here change the
1258:25 - screen layout
1258:27 - and let me bring up the terminal and
1258:29 - increase the size of the screen so i see
1258:32 - it better
1258:34 - so we're going to have a look at our git
1258:36 - status and i can see there's a whole new
1258:38 - folder in here called lib views notes
1258:41 - and we have two
1258:43 - files under there which is our notes
1258:45 - view and new notes view so let's just
1258:47 - say git at all
1258:50 - and have a look at our status here you
1258:51 - can see now everything's
1258:53 - mentioned there i'm going to get rid of
1258:55 - this make it a little bit bigger so you
1258:57 - see better
1258:59 - so what we need to do is just to commit
1259:01 - this first and we're going to say step
1259:02 - 13.
1259:04 - i believe so at least so let's have a
1259:06 - look at our logs yeah step 12 was the
1259:08 - last chapter so we're going to say
1259:11 - um step 13
1259:14 - and i'm gonna push now our commits to
1259:16 - github
1259:18 - and then we're going to say good tag
1259:21 - step 13 as well
1259:23 - and with push tags
1259:26 - all right
1259:27 - so that's for our tagging as well so if
1259:30 - i say tag now we can see all the tags
1259:32 - that we've created so far 13 of them all
1259:34 - right
1259:35 - so that's pretty much what we had to do
1259:38 - and
1259:40 - now as again is a tradition for every
1259:42 - chapter of this flood of course i
1259:44 - usually talk about what we need to do in
1259:45 - the next chapter so we can get right get
1259:46 - ready for that chapter as well in the
1259:49 - next chapter now that we have our new
1259:51 - note view
1259:52 - we are going to work with adding the
1259:54 - logic to new note view so that we can
1259:57 - actually insert new notes into our
1259:59 - database so that we can start
1260:02 - manipulating
1260:03 - those notes so next chapter is going to
1260:05 - be a bit of a heavy chapter code wise
1260:07 - there is a lot of code so
1260:10 - if you want to grab some refreshments be
1260:12 - my guest please go ahead and do that and
1260:14 - i'll see you in the next chapter hello
1260:16 - everyone and welcome to chapter 31 of
1260:18 - this flutter course in the previous
1260:20 - chapter we did some preparation work in
1260:22 - order to create our new note view
1260:24 - and we've tagged everything everything
1260:26 - is ready it's just that we created our
1260:29 - new note view as a stateful widget which
1260:31 - has pretty much no logic it had a simple
1260:33 - scaffold with an app bar and a simple
1260:35 - text displayed on the screen so
1260:38 - in this chapter
1260:39 - we are going to
1260:41 - make sure that the user is not only able
1260:43 - to go to the new note view
1260:45 - or sorry the new note view but also he
1260:48 - or she is able to create an actual note
1260:50 - and modify its text
1260:53 - and then be able to go back to
1260:55 - the main user interface so
1260:58 - we have quite a lot of work to do these
1260:59 - chapters as i mentioned in the previous
1261:01 - chapter at the end of the previous
1261:02 - chapter this chapter is kind of quite
1261:04 - code heavy so
1261:06 - uh but i'm gonna make sure to take you
1261:08 - through all the code that we're gonna
1261:10 - write step by step so you don't miss
1261:12 - anything okay
1261:13 - um before we get started we need to fix
1261:16 - something in our um notes view and that
1261:19 - is to ensure that we're listening to
1261:21 - both the active state of our all nodes
1261:24 - stream plus the waiting and be i mean
1261:28 - without us having to actually without me
1261:29 - having to explain that
1261:32 - in abstract terms let me bring up the
1261:34 - code and have a look at what we've done
1261:36 - um and how we can make it better
1261:39 - so
1261:40 - let me change the screen layout
1261:42 - so you see the code better let's go to
1261:45 - our notes view in here and you can see
1261:47 - at
1261:48 - in in the actual body of our notes we
1261:50 - have the future builder where we get or
1261:53 - create a user with an email address
1261:55 - and which you'll soon actually see why
1261:57 - we're doing this and also we have this
1262:00 - this part which says switch connection
1262:01 - state waiting and then in here says
1262:04 - waiting for all notes the plan for us is
1262:06 - to in the future soon actually in the
1262:09 - near future to display all the notes
1262:11 - that the user has created in this user
1262:13 - interface however right now we're only
1262:15 - listening for the connection state
1262:17 - waiting
1262:18 - and if you look at the document
1262:20 - documentation for waiting it says
1262:21 - connected to an asynchronous computation
1262:23 - i'm waiting interaction however if you
1262:25 - look at the active it says connected to
1262:27 - an active asynchronous computation that
1262:30 - ha and that stream has returned at least
1262:32 - one value so
1262:34 - now we have if you look at our stream is
1262:36 - a stream of all notes so this all notes
1262:38 - can either be empty in the beginning or
1262:40 - it could contain some notes let's go
1262:42 - with the stream being empty
1262:45 - when the stream is empty meaning that
1262:46 - the user hasn't created any notes yet
1262:48 - that have been populated in a note
1262:50 - service then the connection state of
1262:52 - that stream will be waiting because dart
1262:54 - is now waiting for that stream to return
1262:57 - the first value so that's great and
1263:00 - we're saying okay if that's the case
1263:01 - then return this but as soon as the
1263:03 - stream contains one value or as soon as
1263:06 - the stream actually returns one value
1263:08 - then its connection state is going to be
1263:10 - active and what we've done is just we
1263:12 - waited for waiting state but as soon as
1263:14 - it goes to active then we're showing a
1263:16 - circular progress indicator and that's
1263:18 - not the not not the right logic so
1263:21 - we need to fix that so let's go to our
1263:23 - notes view and right after this waiting
1263:26 - we're also going to
1263:27 - say
1263:28 - case connection states
1263:32 - dot active all right so this
1263:35 - writing two cases right after each other
1263:37 - it's an implicit fall through as i like
1263:40 - to call it some language is called a
1263:41 - follow-through for instance swift
1263:43 - meaning that a case has no logic and is
1263:46 - literally falling through to the next
1263:49 - case so you don't have any break
1263:50 - statements here in here okay
1263:53 - so this is a follow through implicit
1263:55 - fall through and
1263:57 - meaning that in both waiting and active
1263:59 - states then we're showing this text and
1264:01 - if you command s then you're not going
1264:02 - to see any difference in the running of
1264:05 - your application it's just that we fixed
1264:07 - a broken logic
1264:09 - all right
1264:11 - all right now to the exciting parts and
1264:14 - i'm gonna bring new notes view to
1264:17 - here just gonna reorganize it you don't
1264:18 - have to do that but you need to now go
1264:20 - to your
1264:22 - new node view dart file because this is
1264:24 - where we're gonna work on for pretty
1264:26 - much the majority of this chapter now
1264:29 - okay
1264:30 - so what we're going to do in this new
1264:31 - note view upon coming to the screen we
1264:34 - are actually going to create a new note
1264:36 - for you okay and we're going to keep
1264:39 - hold of that new note and creating a new
1264:42 - node if you remember from our node
1264:43 - service if you go our
1264:45 - utilities we have crowd here and we have
1264:47 - node service and then we have a lot of
1264:49 - functions in here at least let's see if
1264:51 - we can find the create node view sorry
1264:54 - the create node function here you can
1264:56 - see it's a future so we cannot
1264:59 - immediately get get a result from this
1265:01 - create new node so the goal for our new
1265:05 - node view here is to use future builder
1265:09 - inside the body of this function
1265:11 - so inside the body of this function
1265:13 - we're going to say as soon as this
1265:15 - new node view state has been created
1265:18 - then it also needs to create a new node
1265:20 - in the database however remember with
1265:23 - flutter we have hot reload meaning that
1265:25 - as you're on that view and you're
1265:28 - editing your text and blah blah you may
1265:30 - change your code a little bit and then
1265:32 - press command s
1265:33 - pressing command s is just going to call
1265:35 - your build function again so if you then
1265:38 - inside your build functions um scaffold
1265:42 - body and you have a future builder which
1265:44 - in turn creates a new note that function
1265:46 - is gonna go gonna get called again
1265:48 - meaning that every time you do hot
1265:50 - reload while you're on that view a new
1265:52 - note is going to be created
1265:54 - and for that we as the caption indicates
1265:57 - we need to keep hold of a variable
1265:59 - called notes so that we don't recreate
1266:02 - it every time the build function gets
1266:04 - called alright so let's go ahead and do
1266:07 - that so
1266:08 - in inside the state of your
1266:11 - new notes view
1266:12 - let's go and define and say database
1266:16 - notes
1266:18 - and we're just going to say notes like
1266:19 - that okay
1266:21 - also we just make it optional because it
1266:23 - has no value to start with
1266:27 - okay and what also what we also need is
1266:31 - to keep hold of our note service um and
1266:35 - as you saw in the previous chapters we
1266:36 - created node server as a singleton but
1266:38 - also you'd be really good if you didn't
1266:39 - have to call this a factory uh function
1266:43 - for the singleton over and over again
1266:44 - whenever we're working with node servers
1266:46 - so we're gonna also keep hold of our
1266:47 - node service as a late final variable
1266:50 - here
1266:51 - so let's just say late final and we're
1266:53 - going to say this is endnote service
1266:56 - now first like this all right
1267:00 - and
1267:00 - um you haven't seen maybe the ui of the
1267:03 - application but while we're working on
1267:06 - variables to keep hold of we also need
1267:08 - to keep hold of a text editing
1267:10 - controller now the way the ui of this
1267:13 - view is going to work here is that
1267:15 - instead of this text in here we're going
1267:17 - to create a text field which will
1267:20 - vertically increase the size as the user
1267:22 - keeps typing their
1267:24 - information or their notes in that field
1267:27 - so
1267:27 - what we're going to do is to keep track
1267:30 - of the text that the user enters and
1267:32 - when the user is entering new text we
1267:34 - will automatically sync that information
1267:36 - with our database and in the future when
1267:39 - we go to firebase we're going to sync
1267:41 - that information with firebase
1267:44 - so we need a text editing controller to
1267:47 - keep track of the text changes all right
1267:50 - so
1267:51 - um
1267:52 - let me then bring this
1267:54 - caption in here and let's then go ahead
1267:57 - and do as the caption says let's say
1267:59 - late final and text
1268:02 - i think
1268:03 - controller these documentation sometimes
1268:05 - are just excessive i believe
1268:08 - and we call it text controller okay
1268:13 - all right um that was great
1268:16 - so what we need to do now um is to
1268:19 - facilitate our uh i mean we haven't
1268:21 - really initialized any of these but
1268:23 - we're going to take care of that soon so
1268:25 - where we haven't forgotten about that
1268:27 - but what we need now as i mentioned in
1268:28 - the beginning of this chapter when we
1268:30 - come to this screen we're going to
1268:31 - create a new note and we need to have a
1268:34 - function for it as the caption in the
1268:36 - case it's going to be called create new
1268:37 - note and it's an asynchronous function
1268:38 - and we'll see soon why
1268:41 - so let's go ahead and say future
1268:44 - at database node
1268:46 - because it creates a node with our
1268:48 - node service
1268:50 - and we're going to call it create new
1268:52 - node and it's an asynchronous function
1268:54 - so
1268:55 - in this function what we're going to do
1268:57 - first is just to see have we created
1268:59 - this note before inside this node
1269:02 - variable if we have created this node
1269:04 - before then we don't have to create it
1269:05 - again we just return but if we haven't
1269:08 - created it then we go to the node
1269:09 - service and say create the node
1269:11 - and then get that node back to us all
1269:13 - right
1269:16 - so let's go ahead and do that let's just
1269:18 - say final existing node
1269:20 - is equal to this note
1269:24 - and then we say um
1269:26 - then in here we say if existing note
1269:29 - is not null
1269:31 - then we just return it
1269:33 - this thing notes all right
1269:36 - so that's the return statement that
1269:38 - means we already have a note and if we
1269:40 - don't then we're going to create a new
1269:42 - note but remember when we create a new
1269:44 - note our um creates new note function on
1269:49 - the notes service if you look here
1269:53 - create note it requires an owner so now
1269:55 - all of a sudden we have to have an owner
1269:57 - okay
1269:58 - and again remember the notes view upon
1270:02 - going to the main ui of the application
1270:04 - the notes view creates a new user in the
1270:08 - database meaning that you've logged in
1270:10 - with firebase then you go to the notes
1270:11 - view notes you took care of creating
1270:13 - that user all we have to do here is just
1270:16 - to retrieve that user so we can actually
1270:18 - count with that user already existing
1270:21 - inside the database all right
1270:24 - so let's just then say final current
1270:26 - user
1270:28 - is equal to um
1270:30 - our auth service
1270:33 - firebase and then we're gonna say
1270:34 - current user
1270:36 - and we're just gonna
1270:38 - explicitly um unwrap it meaning that
1270:41 - we're expecting a user to be there if
1270:44 - you've ended up somehow in this new note
1270:46 - view you may be thinking but why that's
1270:48 - unsafe well
1270:50 - it is unsafe it is it is going to crash
1270:52 - the application if the current user
1270:54 - doesn't exist however
1270:56 - you should never end up in this
1271:00 - new node view if you don't have a
1271:01 - current user so ending up on this screen
1271:04 - and not having a current user is worth
1271:06 - the crash because you want your
1271:08 - application to crash if you're if what
1271:11 - you expect from your applications user
1271:13 - interface and logic has not been met by
1271:16 - the previous screen so you're now
1271:18 - creating an expectation and crashing the
1271:20 - application at this point is actually a
1271:22 - good thing in my eyes because if the
1271:25 - current user doesn't exist you should
1271:26 - never end up in this view if you've
1271:28 - ended up in this view and you have no
1271:30 - current user something is seriously
1271:31 - wrong so it's completely safe i would
1271:33 - say to explicitly unwrap the current
1271:36 - user in here okay
1271:38 - and we're gonna
1271:39 - extract the email from the current user
1271:42 - so we're going to say current user.email
1271:44 - and we're going to unwrap that as well
1271:46 - because remember email was an optional
1271:47 - field but again since we know that
1271:50 - our authentication right now is going to
1271:51 - take care of the email
1271:53 - because all our users register with an
1271:55 - email addresses and the password then we
1271:58 - can be sure that the email address
1271:59 - exists all right
1272:02 - so let's go ahead and get that owner
1272:04 - from the database so we're going to say
1272:06 - the owner is equal to our
1272:10 - off our notes service
1272:14 - so we're gonna say await notes service
1272:17 - and then we're gonna get the user
1272:19 - with that email
1272:21 - and then we're gonna just return our
1272:24 - note service create node so we're going
1272:26 - to create a new node in here okay
1272:29 - so let's say note service creates notes
1272:33 - with that owner and
1272:35 - you see this
1272:36 - returns um
1272:39 - a future of database note which is
1272:41 - pretty much what we need to return in
1272:42 - here so let's just return a wait on that
1272:44 - all right
1272:48 - all right fantastic that was for the
1272:50 - creation of the new notes and in here
1272:53 - you can see that we're not setting this
1272:55 - um
1272:56 - new notes that we just created
1272:58 - to this note
1273:00 - variable in there
1273:02 - we're going to actually take care of
1273:03 - that a little bit
1273:04 - later so you don't have to worry about
1273:07 - that
1273:10 - all right that's for the creation of our
1273:13 - notes
1273:15 - now what we need to do is
1273:19 - when this view is disposed of meaning
1273:22 - that for instance the user presses the
1273:23 - back button on this view
1273:26 - we need to ensure that the current node
1273:29 - in the database gets deleted if
1273:33 - there is no text entered for for that
1273:36 - node so
1273:37 - the reason for that is let's say that
1273:39 - the user is on the main interface uh of
1273:42 - the application right here the user then
1273:44 - presses the plus button and then says
1273:46 - hmm i actually didn't want to do that so
1273:48 - they press the back button
1273:50 - if we allow the user to do that and
1273:53 - press press the plus button we create a
1273:55 - new empty node and go back then the view
1273:58 - may just be full of empty nodes so it
1274:00 - will just be like empty cells that the
1274:01 - user is not even able to see because
1274:04 - later as we'll see in the next chapters
1274:06 - we're going to populate this list with
1274:08 - the actual contents of your notes
1274:10 - because our notes don't have titles so
1274:12 - the actual text we're going to display
1274:14 - is the note itself in here inside
1274:16 - various various cells
1274:18 - so what we're going to do is saying that
1274:21 - if you go and create a new node and you
1274:23 - don't enter any text meaning that the
1274:25 - text is empty work upon you going out of
1274:27 - this screen
1274:29 - out of the new note screen we're going
1274:30 - to delete that note if it's empty okay
1274:33 - so it just makes sense
1274:36 - so let's go ahead and create and find
1274:38 - that function
1274:40 - so i'm going to
1274:42 - bring that
1274:47 - here and let's just say void delete note
1274:50 - if text is empty all right
1274:54 - and then
1274:56 - we go in here now we have to have a look
1274:58 - at our notes
1275:01 - and and let's just say we get we get the
1275:03 - note so we say in here final note
1275:08 - note that should be populated inside of
1275:10 - our state and then we say if the
1275:14 - text controller's
1275:17 - text is empty
1275:19 - it's empty and the node is not null
1275:23 - then we go to our node service here
1275:26 - and then we ask it to delete the nodes
1275:30 - right there okay and then we say use
1275:32 - notes id like that
1275:36 - alright so
1275:39 - yeah that should that should be good to
1275:40 - go so that's the deletion of the note
1275:43 - from the database if the text inside our
1275:45 - text editing controller is empty
1275:50 - all right so that was for deleting the
1275:53 - note if it's empty how about actually
1275:55 - saving the notes if it's
1275:58 - if there actually is text in it
1276:00 - and what we're gonna do in our as you'll
1276:03 - see soon inside this view where the user
1276:05 - can edit their notes or add new text to
1276:07 - the notes we're not going to have any
1276:09 - type of save button in modern mobile
1276:12 - applications if you're not a software
1276:13 - development from before you may not
1276:15 - notice but if you're a designer you
1276:16 - probably already noticed that in most
1276:19 - note-taking applications on mobile
1276:21 - devices at least there is no save button
1276:23 - all your contents will automatically be
1276:25 - saved so that's actually a good design
1276:28 - decision usually in most places you
1276:29 - don't need a save button usually in
1276:31 - mobile applications sorry especially in
1276:33 - mobile applications
1276:35 - so we're not going to have a save button
1276:37 - so we in order to facilitate not having
1276:40 - a save button we have to have a
1276:41 - functionality that automatically saves
1276:42 - the current
1276:44 - the current node for instance if the
1276:46 - user then goes out of this view so it
1276:48 - will automatically be saved okay
1276:50 - so let's go ahead and create a function
1276:52 - in here as the as the name indicates
1276:55 - and it's called save node if text not
1276:57 - empty
1276:58 - and i'm gonna bring the uh function
1277:01 - signature from my node so i don't have
1277:02 - to type it manually so you will need to
1277:05 - unfortunately type this manually
1277:07 - unfortunately unfortunately i don't know
1277:08 - but you will need to type in manually
1277:10 - save notes if text not empty
1277:13 - and what we're going to do in here is
1277:15 - very similar to our the code that we
1277:18 - wrote for delete node if text empty so
1277:20 - first we're going to get the node
1277:24 - is node and then we get the text
1277:27 - in our text controllers text
1277:30 - and then in here
1277:31 - um
1277:32 - we're gonna say
1277:34 - um if the note is not null if note is
1277:37 - not normal
1277:38 - and
1277:40 - um our text is not empty then we're
1277:43 - gonna await
1277:44 - our note service
1277:48 - update notes
1277:51 - functionality here
1277:52 - and that's exactly what we're doing here
1277:54 - so it's very simple we're just saying
1277:56 - that if there is text which is is not
1277:59 - empty and we have a note then just
1278:03 - update that note in the database so very
1278:06 - very simple
1278:08 - all right two very important functions
1278:10 - now we have to put these functions in
1278:12 - use as you can see we're getting a
1278:14 - warning in here from the analyzer saying
1278:16 - that these are two private functions
1278:18 - which are not referenced and that's for
1278:20 - a good reason because we're going to
1278:21 - reference them inside the disposal of
1278:23 - our new node view state
1278:26 - when this new note view basically is
1278:28 - being killed by the system for instance
1278:31 - when the user presses the back button
1278:32 - okay
1278:34 - so let's go into the dispose function
1278:36 - and we have to take care of uh
1278:39 - three things in here
1278:42 - so
1278:43 - let's go and
1278:45 - say that we have
1278:48 - a dispose function in here and that's
1278:50 - going to be overwritten by default sorry
1278:51 - i'll bring it up here and i'll write it
1278:53 - from the beginning so you see this pose
1278:55 - okay and it does overwriting for us and
1278:58 - what we're going to do is first going to
1278:59 - say delete the notes if text is empty
1279:02 - then what we're going to do is we're
1279:04 - going to say otherwise save the notes if
1279:06 - text is not empty
1279:07 - and then we're going to get rid of the
1279:09 - text controllers and call the dispose on
1279:12 - it so as a good citizen of the dart land
1279:14 - when you create a new text editing
1279:15 - controller which we're soon going to do
1279:17 - we also need to make sure that we
1279:18 - dispose of it upon this pose all right
1279:23 - so um
1279:25 - so that was a lot of code and i'm gonna
1279:27 - also have a look here
1279:29 - i can see i haven't actually provided
1279:31 - any
1279:32 - captions for us taking care of the init
1279:36 - so um let's take care of
1279:42 - so i basically what i'm doing right now
1279:44 - because i just noticed that i haven't
1279:45 - provided a caption for the init function
1279:48 - well we're gonna do it right now um
1279:51 - because that's a very very important uh
1279:54 - basically function that we need to
1279:56 - program
1279:58 - so uh i apologize for that as well i'm
1280:01 - gonna bring it here and then show you
1280:03 - the caption so you see what i'm doing
1280:06 - so we have this pose but we don't have
1280:08 - init state yet and i'm going to put init
1280:11 - state in here so
1280:13 - uh let's see or do we have any state
1280:15 - already
1280:18 - i don't see that so
1280:22 - and i can see that the visual studio
1280:24 - code isn't really helping me with that
1280:25 - so i'm just going to say overwrite void
1280:28 - init state
1280:29 - like that
1280:32 - and then we have to call super in its
1280:34 - states okay so you may have to type that
1280:36 - by hand as well individual studio code
1280:38 - was being a little bit angry at me
1280:40 - maybe because i just forgot to write the
1280:42 - caption for internet state
1280:44 - and then in here what we need to do is
1280:45 - just to ensure that we're creating both
1280:47 - an instance of node service and also our
1280:49 - text editing controller okay so i'm just
1280:52 - going to say node service
1280:55 - and that is equal to node service and
1280:58 - that's just a singleton so it's not
1281:00 - going to create really a new instance if
1281:02 - it already existed from before
1281:04 - and our text controller is going to be a
1281:06 - new instance of text editing
1281:08 - editing controller just like that
1281:12 - all right
1281:13 - so i'm going to save this and then i'm
1281:14 - going to do a hot restart um and
1281:17 - scrcpy is a little bit angry these days
1281:20 - with me when i do hot restart and i
1281:21 - don't really know why
1281:23 - but i have learned to live with it so
1281:25 - i'm just going to say scr cpy
1281:27 - and then i'm going to run the
1281:30 - application without debugging and
1281:32 - bringing it bring it right there
1281:35 - okay
1281:36 - while that is doing its job we need to
1281:38 - take care of
1281:40 - some
1281:41 - other functionality
1281:44 - you see um
1281:45 - when the user is entering text in the
1281:48 - main ui of the application so when he or
1281:50 - she is entering the text typing on a
1281:52 - keyboard we need to make sure that we're
1281:54 - constantly updating
1281:57 - our notes in the database
1281:59 - so
1282:00 - we're not gonna leave the updating uh
1282:03 - for instance while
1282:05 - when the user presses the back button so
1282:07 - we're constantly gonna do that as the
1282:08 - user is typing
1282:10 - um in the on the screen so
1282:14 - for that we need some listeners so as
1282:17 - the caption indicate as a caption at the
1282:19 - bottom of the screen in any case we need
1282:20 - a text controller
1282:22 - listener
1282:23 - and
1282:24 - all this text controller listener is
1282:26 - going to do is it's going to be a body
1282:28 - of function it's going to be a function
1282:29 - that takes the current node if it exists
1282:32 - then it's going to take the current text
1282:34 - editing controllers text and update that
1282:37 - notes in the database all right so
1282:40 - let's go and create that function so
1282:42 - void and we're going to say text
1282:44 - controller listener
1282:47 - and remember this function
1282:49 - is not yet being called it's it's for us
1282:52 - then to hook to the text editing
1282:54 - controller as a listener so we are soon
1282:56 - gonna write another function that
1282:58 - says hey text editing controller
1283:00 - whenever your text changes call this
1283:02 - function all right so don't worry about
1283:04 - that it's not being called yet
1283:07 - so in here we're basically going to get
1283:09 - the note um i'm going to get rid of this
1283:12 - as well i'm going to say final
1283:14 - um
1283:15 - notes is this note and then we're going
1283:17 - to say if note is null
1283:19 - meaning that we don't have the note then
1283:20 - we just return we can't work with null
1283:23 - nodes
1283:25 - and then we're going to say get the text
1283:28 - which is from our text controller
1283:31 - like that and then we're just going to
1283:33 - await on our note service updates notes
1283:36 - with that text and then comma at the end
1283:38 - to get the formatting working
1283:42 - so that's easy that's very simple
1283:43 - doesn't require so much
1283:45 - explanation perhaps it's just a simple
1283:47 - update note all
1283:48 - right perfect
1283:51 - so
1283:52 - as i mentioned now that we have this
1283:54 - text controller listener we also need to
1283:57 - have a function that is called setup
1283:58 - text controller listener which first
1284:01 - removes this listener from our text
1284:04 - editing controller if it has already
1284:06 - been added and then it adds it again all
1284:08 - right so let's go ahead and i'm just
1284:10 - going to copy that function name so i
1284:12 - don't have to write it again
1284:15 - um and then in here we go to our text
1284:17 - editing controller which we call text
1284:19 - controller and we say remove listener
1284:23 - and that listener at the moment for us
1284:25 - is called text controller listener okay
1284:27 - so
1284:28 - and then after removing it we're going
1284:30 - to add it
1284:31 - so right here
1284:33 - i'm going to add listener and
1284:36 - just add that listener back in case this
1284:39 - function is called multiple times all
1284:41 - right
1284:43 - so now we're going gonna get to the
1284:46 - juicy part of this chapter which is
1284:49 - because you see we've already added a
1284:50 - lot of coding here but no one's really
1284:53 - taking advantage of these so or
1284:56 - actually we can't say that because the
1284:58 - idiots sorry the disposes for instance
1285:00 - taking advantage of save node if not
1285:02 - empty and it's taking advantage of
1285:03 - delete note if text is empty but we're
1285:05 - not taking advantage of this create new
1285:07 - node and we're not taking advantage of
1285:09 - the setup text controller
1285:11 - listener so that's what we're going to
1285:13 - do in the body of our um
1285:16 - of our
1285:17 - uh widget
1285:19 - at the moment the body it just says
1285:20 - context write your new node in here but
1285:24 - what we're going to do is we're going to
1285:25 - replace that with our
1285:29 - future builder
1285:31 - what is this future builder actually
1285:32 - going to do remember when you press the
1285:34 - plus button on the main ui of the
1285:36 - application no one is creating a new
1285:38 - note for you you need to do that
1285:39 - yourself in this new note view as its
1285:42 - name indicates so let's go and replace
1285:45 - the body of this function of this
1285:47 - parameter with the future builder
1285:50 - remember the future builder has to have
1285:52 - two
1285:53 - variables one is the future itself and
1285:56 - the other one is going to be its builder
1285:58 - function so
1285:59 - for the future we need to call the
1286:03 - create new node which returns a future
1286:06 - remember it actually returns
1286:08 - the database note and we've already
1286:11 - coded this function okay
1286:14 - so that's the future that is going to be
1286:16 - called by the future builder
1286:19 - then we're going to write the builder
1286:22 - and i'm going to get help from visual
1286:23 - studio code to complete this and
1286:25 - remember in your builder you have to
1286:26 - return a widget
1286:28 - so
1286:29 - what we're gonna do is since this is a
1286:31 - future we need to look for its done
1286:34 - state it's not gonna be where we don't
1286:36 - have to look for active and waiting we
1286:39 - just have to look for done
1286:41 - or else we're going to show a progress
1286:42 - indicator okay so let's just say switch
1286:46 - snapshot state connection state
1286:49 - and help from visual studio code to add
1286:52 - these missing case clauses for me so
1286:55 - um
1286:56 - non-waiting so none of these are
1286:58 - important except for done
1287:00 - right
1287:02 - so we're going to leave it like that and
1287:04 - then in the case of uh
1287:06 - default so we're just going to say
1287:07 - default oops
1287:10 - return cons circular progress indicator
1287:13 - so for now we're saying that
1287:15 - when this create new node is finished so
1287:17 - a new node has been created in the
1287:18 - database we come to done but we're not
1287:20 - returning anything and that's the reason
1287:22 - you're seeing this little error here but
1287:24 - if the connection state is not done for
1287:26 - instance if it's waiting for the create
1287:28 - node to happen then we're going to show
1287:30 - a little circular progress indicator to
1287:32 - the user and remember this is going to
1287:33 - happen so fast that you're not even
1287:35 - going to see this however i'm completely
1287:37 - aware that the circular progress
1287:40 - indicator may not be the previous
1287:41 - solution but what we're going to do here
1287:43 - is we're not going to spend so much time
1287:45 - on predefining this code since it's
1287:47 - gonna probably be displayed to the user
1287:49 - on a modern hardware on a modern
1287:51 - telephone just for a few milliseconds so
1287:54 - it's probably not worth predefining this
1287:56 - code so much right now at least okay as
1287:58 - we're going on in this course but if you
1288:00 - have unlimited amount of time and you
1288:02 - and you really are attention and you
1288:04 - have a lot of attention to details then
1288:07 - you may want to fix this up a little bit
1288:09 - and maybe put it in some sort of center
1288:11 - or maybe change the color etc etc
1288:14 - but we're not gonna do that right now
1288:17 - okay
1288:18 - remember
1288:19 - our future builder at the moment is just
1288:21 - creating a future builder and it's and
1288:23 - it's understood that it is a database
1288:26 - note so if we go upon
1288:28 - the don connection state and say
1288:30 - snapchat
1288:32 - snapshot data and though it says object
1288:35 - well we already know that this snapshot
1288:37 - data is of type
1288:39 - database node as it was the future
1288:41 - itself so we're just going to say final
1288:44 - actually no we're going to assign that
1288:46 - to our nodes variable remember we have
1288:48 - this node variable up here
1288:51 - and pretty much all those functions are
1288:52 - relying on that node variable to be
1288:54 - there and that's what we're doing we're
1288:56 - creating a future builder that creates
1288:58 - the node and then we assign it to our
1288:59 - nodes variable okay
1289:01 - so we're gonna then say snapshot
1289:04 - data
1289:05 - adds
1289:06 - database nodes
1289:08 - so that's how we
1289:10 - get our nodes from our snapshot
1289:15 - right after doing this we're going to
1289:17 - call our setup
1289:18 - text controller listener because this is
1289:21 - it's at this point that we want to start
1289:24 - listening for
1289:25 - user text changes on our main ui
1289:30 - all right
1289:31 - and right at this point we've done what
1289:34 - we had to do except for actually return
1289:36 - and returning a text
1289:38 - field to the user using which he or he
1289:41 - can
1289:42 - edit the text on the ui so let's let's
1289:45 - go ahead and do that so remove the break
1289:46 - statement in here because we don't need
1289:48 - it anymore we're just going to say
1289:49 - return
1289:50 - add text field i believe
1289:54 - we're going to assign our text
1289:56 - our the controller parameter we're going
1289:58 - to assign a value of our text controller
1290:01 - in here so that's how a text field can
1290:04 - send messages to an object called a text
1290:07 - editing controller and say hey my text
1290:09 - has changed
1290:10 - that is our proxy to a text field in
1290:13 - flutter okay so that's setting up that
1290:17 - and what we need to also do is to allow
1290:19 - the user to enter multiple lines of text
1290:22 - in this text field because remember text
1290:23 - fields usually in flutter are like one
1290:25 - line so for instance you're writing an
1290:27 - email address or you're writing your
1290:29 - password so they're not like multi-line
1290:32 - text fields by default unless you make
1290:34 - them multi-line so that's what we're
1290:37 - going to do now so we're going to say
1290:39 - our keyboard type
1290:40 - you can see it's of type text input type
1290:43 - so then say text input type
1290:45 - alt-line all right so that's going to
1290:47 - allow you to have a little enter key at
1290:50 - the bottom uh right hand side of your
1290:52 - keyboard if you're left to right on like
1290:54 - english language or if you're right to
1290:55 - left language like arabic then that
1290:57 - little enter key is going to be at the
1290:58 - bottom left so then in here
1291:01 - you will get that
1291:03 - keyboard as you'll soon see actually and
1291:05 - you'll get that key on your keyboard to
1291:08 - go to the next line
1291:10 - now
1291:10 - in flutter as it is also in swift when
1291:13 - you're doing ios development there is a
1291:15 - weird habit of
1291:17 - creating text fields that are multi-line
1291:20 - with strange parameters and
1291:23 - unfortunately it has leaked to flutter
1291:24 - as well in that
1291:26 - um
1291:27 - you you don't have like a parameter in
1291:29 - text field that says multiline so
1291:33 - if you want to create a text field that
1291:34 - is multi-line and it kind of like
1291:37 - expands as you enter more text into it
1291:40 - then unfortunately you have to call and
1291:42 - you have to assign null to the max
1291:45 - line's parameter
1291:47 - there are some discussions on github
1291:49 - about why that's the case but there's a
1291:50 - good reason behind it okay
1291:53 - um
1291:54 - and what we're then gonna do is if we if
1291:56 - we do like this and i press command s
1291:59 - and we go here
1292:02 - and we press the plus button in here
1292:05 - okay you'll see there's a text field in
1292:06 - here that's great okay however it's not
1292:10 - so obvious the user
1292:11 - what what am i supposed to do what is
1292:13 - this line here am i gonna tap somewhere
1292:15 - here it's not so obvious so what we're
1292:18 - gonna do is to add something called a
1292:20 - hint to this text field if you're a
1292:22 - designer or a developer from before you
1292:24 - probably already know what a hint is but
1292:26 - if you don't know what a hint is a hint
1292:28 - is little
1292:29 - um as this name indicates a little text
1292:31 - that usually gets displayed to the user
1292:33 - telling telling her or him uh
1292:36 - what is expected
1292:38 - to be entered in this uh field so
1292:42 - let's go and add the hint and that is
1292:44 - through a property on our text field
1292:46 - called decoration
1292:48 - and that's uh
1292:49 - an input decoration
1292:52 - inside our input decoration we're going
1292:53 - to add a parameter called hint text and
1292:56 - here we're just going to say start
1292:57 - typing your notes
1292:59 - like this all right
1293:01 - so command s
1293:02 - and
1293:03 - a comma here to prefi the code a little
1293:07 - bit
1293:08 - but there we go now we have hints in
1293:10 - here and as i bring up as i tap on this
1293:14 - text field you can see i can start
1293:15 - typing in here and press this little
1293:17 - button that i was talking about for
1293:19 - multi-line and as i start typing more
1293:21 - and more then
1293:22 - the text field is gonna increase in size
1293:26 - all right
1293:27 - so
1293:28 - that is that is really what we have to
1293:31 - do in this chapter i hope i didn't scare
1293:33 - you by saying in the beginning of this
1293:34 - chapter that this chapter is gonna be
1293:35 - kind of code heavy but
1293:38 - i mean there were there was quite a lot
1293:40 - of code but hopefully you could stick
1293:41 - with me throughout the chapter and get
1293:43 - it to this point
1293:45 - as is the tradition in all the other
1293:48 - chapters we worked on
1293:50 - we're not gonna
1293:51 - lose we don't want to lose the work that
1293:54 - we're doing on our code so we need to
1293:56 - make sure that we commit and also we
1293:59 - tag our code
1294:01 - okay so let me change the screen layout
1294:04 - a little bit
1294:06 - and we've tagged the previous chapter as
1294:08 - step 13 so as the caption indicates here
1294:11 - we're going to tag and commit this code
1294:13 - as step 14 so
1294:15 - i'm going to say git status
1294:18 - two files change and then i'm gonna add
1294:20 - them all to the staging environment and
1294:22 - then i'm gonna commit them
1294:24 - as step 14
1294:26 - and push my changes to github
1294:29 - and then i'm gonna tag our code as step
1294:32 - 14 as well and then push our tags
1294:37 - okay
1294:38 - um so
1294:39 - that was that for tagging um now again
1294:42 - as is tradition for other chapters as
1294:44 - well at the end of every chapter we're
1294:45 - going to talk about what we are going to
1294:47 - discuss in the chapter that follows
1294:51 - so we are now actually creating notes it
1294:54 - may not be immediately visible to you
1294:56 - but if you if you for instance have
1294:57 - created some notes then this screen
1295:00 - should be able to render those notes
1295:02 - because the new note view is doing
1295:04 - everything necessary to not only create
1295:06 - the note and let's see where it is here
1295:08 - create the new note
1295:10 - but it also is updating that note for us
1295:12 - so here you can see update note so those
1295:16 - notes are in the database it's just that
1295:18 - the main ui of the application which is
1295:19 - this node c the dark is not able to
1295:22 - render them all it's doing is just
1295:23 - saying waiting for all nodes so
1295:25 - it's not so exciting but just know that
1295:28 - you are getting there and we are getting
1295:30 - there it's just there are a few steps
1295:32 - left to handle that and uh that's
1295:35 - exactly what we're gonna do in the next
1295:37 - chapter so get some tea and coffee if
1295:40 - you want to and i'll see you there
1295:42 - hello and welcome to chapter 32 of the
1295:45 - slotzer course in the previous chapters
1295:47 - we've been talking quite a lot about our
1295:49 - node service and creating stream
1295:51 - controller in order to populate the
1295:53 - stream control with the nodes and we
1295:55 - also have a buffer locally called
1295:57 - underscore nodes in our node service and
1295:59 - so we're kind of like working with our
1296:01 - notes in a really good and organic way
1296:04 - and we also work with the new node view
1296:06 - dark file where we created a stateful
1296:09 - widget that had a text editing
1296:10 - controller and i also allowed the user
1296:12 - to enter some text
1296:14 - we manage even to save that text as a
1296:16 - new note into the database so we've done
1296:19 - quite a lot however what wasn't so much
1296:22 - fun was that it was a little bit of an
1296:23 - anti-climax in that we we are able to
1296:26 - create notes but we're not able to
1296:27 - actually display them so we're
1296:29 - populating the database with new notes
1296:31 - but no one is able to show them on the
1296:33 - screen and that's what we're going to
1296:35 - take care of in this chapter
1296:38 - so let me bring the code that we've
1296:40 - written so far to the screen here
1296:44 - and um
1296:46 - i'm going to clear this get status just
1296:48 - to make sure everything's working fine
1296:49 - yeah
1296:50 - the visual studio code i'm going to
1296:52 - bring scrcpy to the right hand side
1296:55 - and
1296:57 - we have to now talk about a little
1296:59 - problem that we have with our nodes
1297:01 - service you see if you look at the code
1297:03 - here i'm going to increase the size so
1297:05 - you see better
1297:06 - so if you have a look at our
1297:09 - note service
1297:10 - and we have this uh shared instance that
1297:13 - we've created here okay so whenever
1297:15 - somebody says note service parenthesis
1297:17 - then they're actually not creating any
1297:18 - instance they're not creating a new
1297:20 - instance of node service but they're
1297:22 - going through this factory initializer
1297:24 - which in turn calls this shared
1297:27 - static final which in turn calls this
1297:30 - internal or private constructor that
1297:33 - means we've created a singleton so
1297:35 - creating a new node service over and
1297:37 - over again is not gonna um create a new
1297:40 - instance
1297:41 - he's just gonna get the same shared
1297:42 - instance and then whoever then starts
1297:45 - talk
1297:45 - reading or you see all notes in here
1297:48 - properly all notes is delegating its
1297:50 - responsibility to the node stream
1297:52 - controller or stream however our node
1297:55 - stream controller is a broadcast stream
1297:57 - controller and what that means is that a
1297:59 - stream controller that
1298:02 - doesn't really hold on to its current
1298:05 - value for new listeners so let's say you
1298:07 - have a stream controller that is sitting
1298:09 - here and you start listening to events
1298:12 - uh to that stream controller from one
1298:13 - place and then an event comes into the
1298:16 - stream controller and stream controller
1298:17 - says oh um i have one listener right
1298:20 - here i'm gonna delegate this information
1298:22 - to that's uh that listener
1298:24 - all looks fine however however after the
1298:27 - propagation of this event into the
1298:29 - stream controller the stream controller
1298:31 - is not going to hold on to this value
1298:34 - when a new listener comes in from
1298:36 - another side so
1298:37 - any new listener to your broadcast
1298:39 - stream controller is not going to be
1298:41 - informed of the current information
1298:43 - which is populated in that stream
1298:45 - controller so if you're familiar with
1298:47 - for instance uh reactive programming
1298:49 - with rx you may know this as a published
1298:52 - subject and the same is true if you're
1298:54 - for instance versus using rx java or rx
1298:56 - scotland
1298:58 - rx swift even if you're doing like um
1299:01 - combined programming with a swift ui you
1299:04 - will know these as like published
1299:05 - subjects so
1299:07 - a stream controller that is broadcast is
1299:09 - not gonna hold on in to its current uh
1299:11 - value for new listeners we need to we
1299:14 - need to remedy that and the way to do
1299:16 - that is just to
1299:18 - move the initialization of node stream
1299:21 - controller to our
1299:24 - initializer right here as we'll soon see
1299:26 - so i'm going to do a little bit of a
1299:28 - shuffling of
1299:29 - screen sizes in here
1299:32 - all right so as the caption indicates
1299:34 - what we need to do and we need to make
1299:35 - this notes stream controller
1299:38 - which is let's see where it is it's
1299:40 - right here we need to make it a late
1299:42 - final so grab the data type from where
1299:45 - it is and just say late final put the
1299:47 - data type in here and then remove the
1299:50 - equal all right so now it is our
1299:52 - responsibility to ensure that this node
1299:54 - stream controller is actually
1299:55 - initialized upon constructor upon
1299:58 - constructing a new instance of our node
1299:59 - service okay
1300:02 - so let's go ahead and do that inside
1300:04 - shared instance which is right here so
1300:06 - what we need to do now is to say node
1300:08 - stream controller is a stream controller
1300:11 - list of
1300:13 - database nodes and then we do the exact
1300:15 - same thing as we did before using
1300:17 - broadcast however what we're going to do
1300:19 - in here is to
1300:21 - use a property inside the broadcast
1300:23 - stream listener called on listen so this
1300:26 - unless and uh
1300:28 - callback is going to get called whenever
1300:30 - a new listener subscribes to
1300:33 - our note stream controller
1300:35 - note stream controllers stream so
1300:39 - upon this happening we need to ensure
1300:41 - that our node stream controllers stream
1300:44 - is populated with all the values that
1300:46 - we've currently read from the database
1300:48 - so let's go ahead and do that
1300:52 - so we're just going to go ahead and say
1300:54 - notes
1300:55 - stream controller sync
1300:57 - add notes just like that all right so
1301:00 - this ensures anyone who starts listening
1301:03 - to our
1301:04 - to this property all notes which in turn
1301:06 - uses the no stream controller if it's a
1301:08 - new subscriber then it's gonna the
1301:10 - unlisted um callback is gonna get called
1301:13 - and then we're gonna populate our stream
1301:15 - controllers a stream with those notes
1301:17 - that we've already read from the
1301:19 - database
1301:22 - okay
1301:22 - let's now move to the next note before
1301:25 - we can actually get on with the rest of
1301:27 - this chapter as the caption indicates as
1301:29 - we shouldn't close the db upon hot
1301:31 - reload after opening db we shouldn't
1301:32 - close it otherwise upon every reload it
1301:34 - gets closed
1301:36 - so the problem that i'm referring to is
1301:38 - in inside our notes view and it is right
1301:41 - here inside our dispose so upon doing
1301:44 - hot reload what we're doing is that
1301:46 - we're saying node service close which in
1301:48 - turn is going to actually close the
1301:50 - database but remember node service is
1301:53 - and is was and is supposed to be a
1301:56 - singleton where upon creation and upon
1301:59 - doing an open one time it should keep
1302:02 - its state so
1302:03 - we shouldn't play with closing of the
1302:06 - database inside any of our widgets
1302:08 - because that is going to interfere with
1302:10 - the internals and how the node service
1302:13 - is actually supposed to work so what
1302:16 - we're going to do as you can see since
1302:18 - this pose function in here the
1302:19 - overwriting overwriting of the dispose
1302:21 - function the only thing it was actually
1302:23 - doing was to close the node services
1302:25 - database we're just going to remove this
1302:27 - function for now because we have nothing
1302:28 - else to dispose of at the moment in our
1302:32 - notes view
1302:36 - all right um
1302:38 - so what we need to do is actually get to
1302:40 - the meat of this section which i'm so
1302:43 - excited about for this chapter
1302:45 - and that is to start working with
1302:48 - the list view
1302:50 - and what we need to do is to make sure
1302:53 - that we have a list that we can
1302:57 - we can grab the data that comes from our
1303:00 - stream here stream builder you can see
1303:03 - it reads all the notes and right now
1303:05 - we're just saying waiting for all nodes
1303:08 - so we're going to change that and
1303:10 - instead we're actually going to start
1303:12 - using something called a list view now
1303:15 - list view in flutter is an amazing
1303:18 - widget which i can actually show you
1303:19 - here so if you just type list view and
1303:21 - then command and click
1303:24 - control click on linux and windows you
1303:26 - can see it's a box scroll view extends
1303:28 - box scroll view which in turn is a
1303:29 - scroll view which in turn is a stateless
1303:31 - widget so
1303:33 - a list view has uh some function some
1303:36 - really great functionality uh that it
1303:38 - exposes using is builder we can see here
1303:40 - it has a builder function and i believe
1303:43 - it's a static function here
1303:45 - or it's actually constructor great okay
1303:47 - so it has a builder and inside your
1303:50 - builder you will be able to pass two
1303:53 - important parameters to this list view
1303:55 - so we're gonna say
1303:57 - we return a list view instead of that
1303:59 - little text that we had which right now
1304:01 - says waiting for all notes
1304:02 - in here we're gonna say we have two
1304:05 - parameters first we are gonna tell it
1304:07 - how many items it has to render on the
1304:10 - screen so we're going to say item count
1304:12 - all right
1304:14 - and for the item count we need to
1304:17 - actually listen for this snapshots data
1304:20 - so remember the stream builder at the
1304:22 - moment is listening for all notes
1304:25 - and so that means the data that comes
1304:27 - from snapshot
1304:29 - is actually going to be
1304:31 - your um
1304:34 - is going to be the all the notes that
1304:36 - we've read from the database so what we
1304:39 - need to do now is just to ensure that
1304:40 - upon waiting um in here so
1304:44 - i'm gonna actually remove this
1304:47 - and i'm gonna say if
1304:49 - snapshot has data so that's a property
1304:52 - on your snapshot that exposes whether
1304:54 - the snapshot has actually pro can
1304:56 - actually provide you with some data and
1304:58 - i'm going to put an else in here and
1305:01 - upon else we're also going to say return
1305:03 - con circular progress indicator okay
1305:07 - and if the
1305:08 - snapshot has any data then let's grab
1305:11 - that data so i'm just going to say final
1305:13 - all notes is snapshot that's data
1305:17 - as a list of database notes
1305:21 - all right
1305:23 - and what we could do we could just say
1305:24 - return const
1305:26 - text
1305:28 - got all the notes something like that
1305:31 - and we could actually print these notes
1305:33 - to the screen if you want to it's we
1305:35 - could say print notes
1305:37 - and i'm going to bring the
1305:40 - debug console up
1305:42 - then i'm going to clear the
1305:44 - logs and change the screen layout
1305:48 - so you see it better and i'm just gonna
1305:50 - do command s
1305:52 - alright and i can see at the moment it's
1305:54 - just saying your notes so meaning that
1305:56 - we don't actually have any notes so if i
1306:00 - go in here then
1306:01 - you can see all of a sudden we got a new
1306:04 - note populated into the database just
1306:07 - because i went here and i said i'm
1306:08 - printing some notes so
1306:10 - so i'm gonna say hello
1306:12 - okay
1306:13 - see as i'm changing this our snapshot is
1306:18 - actually getting updated with new
1306:19 - information and it's constantly printing
1306:21 - and it's the note id is the same and you
1306:24 - can see his text is actually changing
1306:26 - and if i go out then you can see well
1306:29 - it's just at the moment says got all the
1306:31 - notes meaning that you have some notes
1306:33 - so if you're seeing a circular progress
1306:36 - indicator instead of like a text at the
1306:38 - moment that we're saying all the notes
1306:39 - it's probably because you were like me
1306:41 - and you didn't have any notes in the
1306:43 - database all right
1306:46 - okay now we have all the notes so how do
1306:49 - we then render these so what we need to
1306:51 - do in here we're going to say return
1306:53 - list view i'm going to change the screen
1306:55 - layout
1306:57 - let's say list view builder
1306:59 - and you remember i mentioned before we
1307:01 - need to populate this listview with two
1307:04 - important parameters one is the item
1307:07 - count and at the moment the item count
1307:09 - is all notes count links
1307:13 - and then we have our item builder get
1307:15 - some help from your editor to complete
1307:17 - this you get a a
1307:19 - build context as the first parameter of
1307:21 - type context and then you get an index
1307:23 - okay
1307:25 - now inside your item builder your job is
1307:29 - if you look at the
1307:31 - at the
1307:32 - signature of item builder it says it's a
1307:34 - function
1307:35 - that takes two parameters it build
1307:36 - context and an integer for the index and
1307:39 - it has to return a widget you see here
1307:42 - so you could return anything in here you
1307:44 - could just say return text item
1307:46 - something like that
1307:47 - okay
1307:49 - it's not gonna look so pretty though
1307:51 - and actually i can see maybe did we lose
1307:53 - our item maybe in here
1307:56 - it is possible that there is something
1307:58 - wrong with our note 2 that it's like
1307:59 - deleting the notes it could be so i'm
1308:02 - just gonna do a
1308:04 - hot reload here and my scr cpy may
1308:07 - actually die no but uh it's it worked
1308:10 - without a problem so we have an item so
1308:12 - if that's if that's what you're also
1308:13 - seeing maybe you could do a hot reload
1308:15 - because we've changed our nodes service
1308:18 - so it could be the problem that our uh
1308:20 - we just needed to do a hot reload for
1308:23 - this unlisten to actually get called all
1308:25 - right so that's what we're seeing at the
1308:27 - moment so i can see item in here and i'm
1308:29 - gonna press the plus button so and i'm
1308:31 - gonna say hello world in here
1308:33 - and i'm gonna go out and all of a sudden
1308:35 - you see two items appearing in here okay
1308:37 - but this is not so pretty because
1308:39 - displaying text on the screen
1308:42 - is not so nice and you won't have uh
1308:45 - you won't be able to easily add
1308:48 - interactions to these items because what
1308:50 - we want
1308:52 - ideally is for these items to appear on
1308:54 - the list and then they have like their
1308:57 - own sizing so they have a good height so
1308:59 - that they are separated a little bit
1309:01 - from each other and as you'll see in the
1309:03 - next chapter we're going to work with um
1309:05 - deleting these items so we want the
1309:08 - ability for the user to see some sort of
1309:09 - an icon next to each item using which he
1309:12 - or she can click on that icon and delete
1309:14 - the item so text in itself is not going
1309:17 - to be able to provide us with all that
1309:20 - functionality that we need so
1309:23 - what we need is a little bit more
1309:24 - sophisticated widget and it is called
1309:27 - list tile so let's do that let's just
1309:29 - say we return at least tile
1309:32 - okay and our list tile is gonna have a
1309:35 - um a title so that's the only thing at
1309:38 - the moment we're gonna provide it with
1309:40 - and you can see it's a widget
1309:42 - and for the widget of this list and for
1309:44 - the title of this list style we're going
1309:45 - to use text um
1309:47 - right there okay and i'm going to put
1309:49 - some commas in there
1309:52 - so for the text what we're going to say
1309:54 - then is
1309:55 - the text in itself is
1309:57 - we want to grab the text that is entered
1310:00 - in that note so you see we have all the
1310:03 - notes but we don't have the current note
1310:06 - so the current note that we're actually
1310:08 - reading its index is going to be
1310:09 - provided to us using this item builders
1310:11 - index so let's go and say final um notes
1310:16 - is all nodes at that index so that's the
1310:19 - current node that we're returning a list
1310:22 - tile for okay
1310:24 - its text is gonna be the note text as
1310:27 - you can see here
1310:30 - uh i can see i've written tile here but
1310:32 - it should be title
1310:34 - and in here we have to have a semicolon
1310:36 - all right so if i do command s in here
1310:39 - you can see now we have very
1310:42 - i mean a lot nicer and prettier versions
1310:45 - of those texts and you can see that
1310:46 - they're right here it says hello and
1310:48 - hello world and those are the texts that
1310:50 - we entered you can actually test that
1310:51 - and say my new my new notes is entered
1310:56 - here
1310:57 - and by pressing the back button you'll
1310:59 - see that your note is appearing on the
1311:01 - screen all right
1311:04 - but what we want to do here is if you
1311:06 - enter a lot of text in your
1311:10 - in your notes so if i go and say here
1311:14 - is a very
1311:15 - long text that i've entered and i don't
1311:19 - want it all to be displayed in one tile
1311:23 - and then nodes view so we have now a
1311:26 - node that is quite large
1311:28 - but this is in it in itself is going to
1311:31 - break a little bit our layout you see
1311:34 - in our notes list we don't want to
1311:36 - render the entire note we somehow want
1311:38 - to cap
1311:39 - the amount of information that we're
1311:40 - displaying to a size that is reasonable
1311:43 - and
1311:44 - since our notes don't have titles we
1311:47 - could infer the content of the note by
1311:50 - simply rendering just one line of text
1311:53 - and the user should be able to then say
1311:55 - oh that's what i've written kind of in
1311:57 - my notes and as you'll see in the latest
1311:59 - later chapters we are going to allow the
1312:01 - user to also click on or tap on these
1312:04 - existing notes in order to go and see
1312:06 - more information about them so
1312:08 - it's not the end of the world if you
1312:09 - don't display like the entire note to
1312:11 - the user and as you'll see when users
1312:13 - start to enter more and more information
1312:15 - in their notes it's actually not desired
1312:17 - uh desirable to
1312:19 - render the entire note because imagine a
1312:21 - note is two pages long or you're gonna
1312:23 - have like two very small notes and then
1312:25 - two pages of long of one note it's it's
1312:29 - not feasible so actually it is feasible
1312:31 - but it's not a good user interface
1312:34 - so i'm going to put a comma here
1312:36 - and i'm just going to use a property in
1312:39 - our text called max lines and i'm just
1312:42 - going to say one
1312:44 - and so as you'll see here
1312:47 - then what we're going to do is to make
1312:49 - sure that the user kind of understands
1312:51 - that there is more information in here
1312:54 - than what we are rendering so we want to
1312:56 - put like ellipses at the end of the text
1312:59 - that don't have enough
1313:01 - space to render themselves fully so
1313:03 - we're going to say soft wrap
1313:06 - and as you can see the information is
1313:07 - whether the text should break at soft
1313:09 - line breaks so make sure that it's true
1313:12 - and then we're going to say overflow
1313:15 - and we're going to say text overflow
1313:17 - ellipses
1313:19 - like that
1313:20 - and now you can see
1313:22 - it says here's a very long text blah
1313:23 - blah blah and then dot dot so this is a
1313:25 - good indication then to all users to
1313:27 - know that well there's more information
1313:30 - to be rendered but there's not enough
1313:32 - space for that information to be
1313:34 - rendered on the screen right now
1313:37 - all right so i think i mean we've looked
1313:40 - at how that all works we've actually
1313:42 - demoed it so we don't have to do a
1313:44 - separate demo for this we've been
1313:45 - looking at it as we've been developing
1313:47 - and the application and that's one of
1313:49 - the beauties of flutter
1313:51 - so
1313:52 - we don't have to do anything about this
1313:55 - demo right now
1313:57 - and
1313:58 - you will probably be surprised that this
1314:00 - is all we have to do right now for the
1314:02 - notes view there's not much more to work
1314:04 - on we've
1314:05 - written
1314:06 - we were able to at the moment create new
1314:09 - notes and we're able to display those
1314:10 - notes and one at a time inside this list
1314:13 - view builder so you'll learn how to use
1314:15 - the list view builder as well
1314:18 - and what we can do as is a tradition
1314:21 - we're gonna go and commit and tag our
1314:23 - work so
1314:25 - i'm gonna do some reshuffling on the
1314:26 - screen
1314:27 - so you see what i'm doing a little bit
1314:29 - better
1314:30 - and i'm gonna go to
1314:32 - my built-in terminal here and we're
1314:34 - gonna have a look at the status
1314:37 - can see there are two files changed so
1314:39 - let's do git
1314:41 - add all
1314:42 - and let's commit this as step 15 and
1314:45 - before committing it you can see your
1314:48 - git lock from before the last commit was
1314:50 - step 14
1314:51 - so and you can also look at all the tags
1314:53 - and we have up to tag 14.
1314:57 - so let's go ahead and say git commit
1315:00 - and we do step 15.
1315:02 - now i'm going to push that commit to
1315:04 - github or if you're using bitbucket or
1315:06 - any other provider that's fine too
1315:09 - and i'm going to tag this as step
1315:11 - 15 right
1315:13 - and then we're going to push our tags
1315:17 - great that part is now done so we've
1315:20 - done what we promised to do in this
1315:22 - chapter
1315:24 - the next thing that we have to talk
1315:26 - about as a tradition in all the other
1315:28 - chapters is at the end of every chapter
1315:30 - we'll talk about what we're going to
1315:31 - talk about in the next chapter and you
1315:34 - can see that we are able to create notes
1315:37 - uh we're not able yet to update notes
1315:40 - we're going to get there soon but we
1315:42 - also need to allow the user to delete
1315:44 - notes so
1315:46 - that's exactly actually what we're gonna
1315:48 - take care of in the next chapter and the
1315:49 - next chapter is not gonna be a huge
1315:51 - chapter either just like this one so
1315:53 - it's gonna go very smooth but we're
1315:55 - gonna do some quite heavy refactoring on
1315:57 - our project as you'll soon see so
1316:00 - grab some refreshments if you want and
1316:02 - i'll see you in the next chapter
1316:05 - hello everyone and welcome to chapter 33
1316:07 - of this flutter course
1316:08 - in the previous chapters we've been
1316:10 - talking about how to create new notes
1316:13 - and how also to display those notes on
1316:16 - the screen
1316:17 - um and now it would make sense for any
1316:19 - user of our application to be able to
1316:21 - delete the notes that they've created
1316:23 - already
1316:24 - and we are not right now giving that
1316:27 - functionality to the user and that's
1316:28 - exactly what we're gonna work on in this
1316:31 - chapter
1316:32 - and just a heads up we're gonna work
1316:33 - quite a bit with refactoring so things
1316:35 - are gonna get a little bit uncomfortable
1316:37 - where the code isn't gonna compile but
1316:39 - we're gonna fix that soon
1316:41 - and right after breaking it so we're
1316:43 - going to work a little bit about on our
1316:46 - dialogues as well
1316:48 - you see we have a few dialogues at the
1316:50 - moment that appear on the screen and for
1316:52 - instance will we display
1316:54 - an error to the screen
1316:56 - or to the user where we for instance say
1316:58 - oh you couldn't log in or oh your
1317:00 - password was incorrect or we couldn't
1317:02 - register this user because it's a a weak
1317:05 - password entered
1317:07 - so that's like our error dialogues and
1317:09 - we also have a dialogue that we display
1317:11 - to the user when he or she's trying to
1317:13 - log out of the application so we have
1317:15 - two dialogues at the moment
1317:17 - and in this chapter what we're going to
1317:19 - do is we're going to consolidate how we
1317:22 - also display our dialogues to the user
1317:24 - as part of delete
1317:27 - functionality because you see the delete
1317:29 - part as well the way we're going to do
1317:30 - it is we're going to let me actually
1317:32 - bring the
1317:33 - scrcpy to the screen so
1317:36 - how we're going to do it is that we're
1317:37 - going to put a little delete icon next
1317:39 - to every item on the list and we're
1317:40 - going to allow the user to tap on those
1317:42 - icons in order to display a dialogue
1317:45 - now this is going to be the third
1317:47 - dialogue and um a colleague of mine that
1317:49 - i work with which i really admire his
1317:51 - way of working he mentions that he makes
1317:54 - things reusable when
1317:56 - he gets to the third time of doing the
1317:58 - same thing again so now we've written
1318:01 - two dialogues to this point and we also
1318:04 - now need a third dialogue and that's the
1318:06 - point that maybe we should actually
1318:08 - consolidate all our dialogue displaying
1318:10 - to one
1318:11 - function and then from other functions
1318:13 - we're just gonna reuse that okay
1318:16 - so that's what we're gonna do in this
1318:18 - chapter
1318:21 - so let's have a look at the code a
1318:23 - little bit i'm gonna um
1318:24 - i'm gonna bring
1318:26 - the screen to a little bit
1318:28 - um
1318:30 - larger display so here
1318:33 - so these this is our application the way
1318:35 - we've listed left it at the moment
1318:37 - so like that visual studio code and we
1318:40 - have a cr cpy there as well okay
1318:43 - so let's then have a look at our as a
1318:45 - caption in case we're going to have a
1318:46 - look at
1318:47 - our error dialog so let's go ahead in
1318:51 - our
1318:54 - let's see what we have constant services
1318:56 - crowd utilities we have and we have a
1318:58 - function here called show error dialog
1319:00 - which in turn says show dialog and then
1319:03 - it says alert dialogue okay
1319:05 - then if you have a look at how this is
1319:08 - constructed the only thing it's doing is
1319:10 - saying like hey i have um hey i have a
1319:14 - title then i have just one action with a
1319:17 - button
1319:19 - and also and that action doesn't return
1319:21 - any value and also
1319:24 - we i have some text to display all right
1319:26 - great now let's go to our notes view if
1319:30 - you look at our notes view at the end of
1319:32 - notes view we have this
1319:34 - logout dialog
1319:35 - what does this do it's the same thing it
1319:37 - has show dialog it has an alert dialog
1319:40 - inside it it has a title and some text
1319:43 - but it has two actions and these actions
1319:45 - they do different things so one action
1319:48 - does uh
1319:49 - if it sends a value of false the other
1319:51 - one sends the value of true so
1319:53 - every dialogue that appears to the
1319:54 - screen so let's say this one for
1319:56 - instance
1319:57 - our logout dialog that's the one we're
1319:59 - looking at right now
1320:00 - the cancel button sends a false value
1320:03 - and the log out button sends a true
1320:05 - value so
1320:07 - the dialogs are all very similar they
1320:08 - have a title they have some contents and
1320:11 - they have some actions that the user can
1320:14 - take on those dialogues and these
1320:16 - actions then have their own values and
1320:18 - that's what we're going to do in our
1320:20 - application right now is that we're
1320:22 - going to consolidate all these into one
1320:24 - generic function that is going to kind
1320:26 - of allow us to customize it to our needs
1320:29 - all right
1320:31 - so
1320:32 - let's have a look at how we can achieve
1320:35 - this so as the caption indicates here
1320:37 - we're first going to cut things from the
1320:39 - source and that's like the strategy that
1320:40 - i use a lot in software development so
1320:42 - if i'm gonna disrupt things and i'm
1320:44 - gonna like change the way things work
1320:47 - i'm not gonna be scared and i'm really
1320:49 - not scared of
1320:50 - making things break and i in my opinion
1320:54 - you may think differently but in my
1320:56 - opinion it's really good to cut things
1320:57 - from the source break the code and then
1320:59 - start fixing things one at a time
1321:01 - instead of trying to make sure nothing
1321:03 - breaks while you're refactoring the code
1321:05 - so that's what we're going to do here as
1321:07 - the caption indicates we're going to go
1321:08 - to short air dialog
1321:10 - let's see if you can find it i like to
1321:12 - use command p in visual studio code i'm
1321:14 - going to say the show error dialog in
1321:16 - here
1321:17 - and what we're going to do is just we're
1321:18 - going to remove all this code that is
1321:21 - there okay
1321:22 - so that's that part
1321:25 - and what we're also going to do is um as
1321:28 - the cache indicates remove the show log
1321:30 - out the dialog from notes view since
1321:32 - we're going to have a generic one so go
1321:34 - into your notes view in here
1321:36 - and
1321:38 - remove this show log out dialog all
1321:40 - right
1321:41 - we're gonna get errors that's okay and
1321:44 - you know this code that we removed also
1321:46 - here show error dialog is used quite a
1321:48 - lot so
1321:49 - by removing it if i like search for show
1321:51 - air dollar you can see we're actually
1321:52 - using in seven places so all of those
1321:55 - places are now gonna have an error
1321:57 - that's okay fine we're gonna fix that
1321:59 - soon so don't worry about that
1322:03 - all right so what we need to do in here
1322:06 - is before we fix all of that we're gonna
1322:08 - start basically
1322:11 - creating our notes list view all right
1322:14 - so
1322:16 - at the moment if you look at our notes
1322:18 - view what we have is
1322:20 - this beauty in here which is doing quite
1322:23 - a lot of work as you can see it's it has
1322:25 - a future builder inside the body of the
1322:27 - notes view and it has a stream builder
1322:29 - and a lot of code in here it would be
1322:32 - really great if you could separate this
1322:33 - code into its own place and we could
1322:36 - call this widget like a notes list view
1322:38 - and that's exactly what we're going to
1322:40 - do in this chapter so let's go ahead
1322:43 - in our views inside notes
1322:46 - in here
1322:48 - in your
1322:49 - views inside notes let's create a new
1322:51 - file and we're going to call it notes
1322:55 - list view dot parts okay
1322:58 - like that
1322:59 - and in in notes list view what we're
1323:02 - going to do is going to say the notes
1323:03 - list view is a stateless widget so we
1323:05 - create a stl which is a stateless widget
1323:08 - and we're going to call it notes list
1323:10 - view
1323:11 - as we've seen it before we need to
1323:12 - import material so i'm going to do that
1323:14 - right now so all those errors are going
1323:15 - to go away
1323:17 - now
1323:18 - what we need to do is we need to
1323:20 - actually pass
1323:22 - a a list of notes to this notes list
1323:25 - view so that it can render them because
1323:28 - you see all the logic for retrieving the
1323:30 - notes can stay still in the notes view
1323:33 - but all notes list view is interested in
1323:35 - is a list of notes
1323:37 - to display so let's go and expose that
1323:40 - as a parameter in our notes list view so
1323:42 - we're going to say final
1323:44 - list of database nodes
1323:47 - and you can see database node is not
1323:49 - imported right now but visual studio
1323:51 - code is going to be smart enough to
1323:53 - import that
1323:55 - so
1323:55 - if you're
1323:57 - actually yeah
1323:58 - if your editor like if you're using vim
1324:00 - or something on linux or even mac and
1324:02 - windows if you're using that you may
1324:04 - have to import these things manually so
1324:06 - um but the import statements i believe i
1324:09 - mean if you've gotten to this point in
1324:11 - the course you should be
1324:12 - uh
1324:13 - like savvy enough and you should know
1324:15 - all these things enough in order to be
1324:17 - able to solve that yourself so
1324:20 - um so i'm not going to repeat all that
1324:21 - information again just make sure that
1324:23 - your database note is in context in at
1324:26 - this point
1324:28 - so that's going to be our notes
1324:30 - and also this notes view as i mentioned
1324:32 - in the previous chapter but maybe it's
1324:34 - actually worth mentioning in this
1324:35 - chapter because it's very relevant what
1324:37 - we're going to do is
1324:39 - beside every note to the right hand side
1324:41 - as the trailing tile widget we're going
1324:45 - to display a little like a trashcan icon
1324:47 - that the user can tap on in order to
1324:50 - delete a um
1324:52 - notes
1324:54 - and what we're going to do then is to
1324:56 - make sure
1324:57 - that
1324:59 - that we can basically
1325:02 - call a little function to show a delete
1325:06 - dialog to the user so upon you pressing
1325:08 - the delete button we're going to display
1325:09 - a dialogue and the delete dialog is
1325:11 - going to be very similar to log out like
1325:13 - saying now hey hey you're
1325:14 - deleting this note are you sure
1325:16 - and
1325:17 - that dialog is going to have two buttons
1325:20 - yes or no or something like that
1325:22 - and upon pressing no we're just going to
1325:24 - dismiss the dialogue upon pressing yes
1325:25 - then we're going to delete that note
1325:27 - from the database all right
1325:30 - so what we need is you can see the notes
1325:32 - list view at the moment isn't like it
1325:35 - shouldn't have any connection with the
1325:38 - notes service it should be the notes
1325:40 - view that has that connection so this is
1325:42 - how you should also
1325:44 - like do your components in flutter in
1325:47 - that you shouldn't leak your services
1325:49 - everywhere so if the notes list view
1325:52 - could somehow delegate the deletion task
1325:54 - to the notes view that would be ideal so
1325:57 - the notes list view could display the
1325:59 - dialogue it could just say hey
1326:02 - are you sure and if the user then says
1326:04 - yes the notes list view could then
1326:06 - delegate this information back to its
1326:09 - parent and say hey do something with
1326:11 - this information okay
1326:14 - so let's then go and create a little
1326:16 - callback definition using typedef
1326:19 - excuse me
1326:21 - and we're going to call it delete note
1326:24 - callback okay and this is a void
1326:27 - function that takes a database note
1326:30 - oops a database nodes
1326:35 - i'll note like that so
1326:38 - we're saying we're defining a function
1326:42 - that we're then going to use in our
1326:44 - nodes list view which we call we which
1326:46 - we use as a callback
1326:48 - that will be called when the user
1326:50 - presses the yes on
1326:52 - this hypothetical dialogue that we're
1326:53 - assuming gonna display that user okay so
1326:55 - let's go in here and define that let's
1326:57 - just say um delete node callback and
1327:00 - we're just going to say on delete nodes
1327:04 - so this is our callback and you're now
1327:06 - getting some errors from a flutter
1327:08 - saying that these parameters aren't
1327:09 - defined so i'm going to use visual
1327:11 - studio code and to say define these
1327:13 - parameters for me
1327:16 - i'm also going to make them require
1327:17 - parameters like this
1327:23 - so that's great we have still some
1327:25 - errors in our application so
1327:28 - but we're going to continue building
1327:30 - until we can fix all these errors okay
1327:34 - all right that's fantastic so that's the
1327:37 - first part that we have to work on so
1327:40 - let's then go ahead and um take our
1327:43 - notes view the way it is right here and
1327:45 - you see we already have a list view
1327:47 - builder i'm just gonna go and grab this
1327:50 - list view
1327:51 - the way it is from there
1327:52 - and i'm i'm actually gonna cut that and
1327:55 - bring it into nodes list view inside the
1327:58 - build function alright so inside instead
1328:01 - of returning a container i'm just gonna
1328:02 - return that code that i've just pasted
1328:05 - that i just cut all right
1328:07 - it looks absolutely horrible at the
1328:09 - moment it's because i mean we have so
1328:11 - many errors
1328:12 - but i actually like that kind of stuff
1328:14 - to be honest with you some developers
1328:16 - get nervous when they have lots of
1328:18 - errors in their code and they just want
1328:19 - to patch them up as soon as they can
1328:21 - but we're gonna work just one step at a
1328:24 - time as we say in sweden we say
1328:27 - it means one step at a time
1328:29 - we're going to fix these errors and at
1328:31 - the end of this chapter everything's
1328:32 - going to work i promise you
1328:35 - so let's go in here you can see the
1328:36 - first error that we have is all notes
1328:38 - and what all notes is giving us an error
1328:41 - for is that it doesn't exist in this
1328:42 - context and that's because we have
1328:44 - something called notes all right so
1328:46 - let's go in here and say
1328:48 - now we're using notes
1328:50 - and in here we don't have all notes
1328:51 - either so we're just going to say notes
1328:53 - notes
1328:54 - and that
1328:56 - note
1328:56 - is going to be extracted from notes at
1328:58 - that index
1329:00 - and the exciting part now is that
1329:02 - we don't just use the title property of
1329:05 - our list tile anymore we're going to
1329:07 - start using something called trailing
1329:09 - and trailing is a as a property of list
1329:12 - tile that as its name indicates it's
1329:14 - going to allow you to
1329:15 - specify a widget that needs to be
1329:17 - displayed at the end or the trail of
1329:20 - every list tile
1329:21 - and this is where we're going to use an
1329:23 - icon button so
1329:25 - to display our little trash can okay so
1329:28 - let's say icon button
1329:31 - and in this icon button what we're going
1329:33 - to do then is we're going to define the
1329:35 - uncrest
1329:37 - which looks like this and it's icon then
1329:40 - it's going to be icon of icons delete i
1329:43 - believe it's called
1329:45 - let's have a look at how delete looks
1329:46 - like and you can see it's a little trash
1329:48 - can
1329:50 - fantastic and make this cons to make the
1329:52 - analyzer happy as well all right
1329:55 - so what do we do i'm pressed so what we
1329:57 - need to do on press is as i mentioned
1329:59 - before we need to take care of the
1330:00 - displaying of a dialogue that says
1330:03 - let's just call the show delete dialogue
1330:05 - okay so this show delete dialogue we're
1330:08 - going to call it and we expect it to
1330:10 - return a true or false
1330:12 - remember we haven't implemented the show
1330:15 - delete dialog that's okay
1330:17 - we can put some constraints on the
1330:20 - interface of this function yet but it
1330:23 - doesn't yet exist so let's just say that
1330:25 - this function show delete dialog takes a
1330:28 - build context and it returns true or
1330:30 - false to us so if the user says yes i
1330:32 - want to delete some item then it it
1330:35 - returns true
1330:36 - if it's if the user says no then this
1330:38 - dialog should return false to us okay
1330:41 - so let's go ahead and say final should
1330:44 - uh you should
1330:46 - delete is a weight
1330:48 - and when you're using a weight you need
1330:50 - to make your own press function async
1330:53 - then we're going to say await show
1330:54 - delete dialog we don't have that
1330:56 - function remember but that's okay
1330:59 - and when we say
1331:01 - should delete
1331:03 - okay if this is boolean then we say if
1331:05 - should delete
1331:07 - then what we're going to do is we say
1331:09 - and we call our on deletes notes with
1331:12 - the current note okay
1331:14 - so that is
1331:16 - just the implementation of this widget
1331:19 - notes list view
1331:21 - all right
1331:22 - but don't worry about these errors we're
1331:24 - gonna soon fix them so
1331:27 - and just save this file as well
1331:30 - now we need to move to the next item and
1331:33 - that's our own generic dialogue you can
1331:35 - see we're going to create a
1331:37 - generic dialogue dart
1331:39 - which is so important because pretty
1331:42 - much this show generic dialogue and the
1331:45 - variations that we're going to create on
1331:47 - it is going to fix all these errors that
1331:49 - we have in our application right now so
1331:51 - i'm actually happy to start working on
1331:52 - it i don't know about you
1331:54 - so as the caption indicates we're going
1331:56 - to create a file in lib utilities
1331:58 - dialogues generic dialogue dart so we
1332:02 - have what folders do we have in here we
1332:04 - have lib consonants enums services
1332:07 - utilities all right
1332:09 - but inside utilities we don't have at
1332:12 - the moment a
1332:14 - dialogues folder and remember that we
1332:17 - removed all the contents of this show
1332:19 - error dialog let's just delete the file
1332:22 - now we don't need that so i'm just gonna
1332:24 - delete it and move it to trash
1332:26 - so now inside utilities we have nothing
1332:29 - so let's go create this new file as the
1332:31 - caption indicates we're gonna say it's
1332:33 - gonna be inside a folder called dialogs
1332:36 - and we're going to call it generic
1332:38 - dialog.art
1332:42 - all right i'm going to get rid of the
1332:44 - sidebar and we now need to start
1332:47 - implementing our generic dialogue
1332:52 - this
1332:53 - show generic dialogue is going to be a
1332:55 - little bit complicated and um
1332:58 - and i'm saying it a little bit
1332:59 - complicated simply because it's going to
1333:01 - use generics
1333:02 - and the reason um
1333:05 - i've basically
1333:07 - decided to make it generic is as the
1333:10 - name generic indicates this
1333:13 - generic dialogue i mean the file also
1333:15 - says generic dialect so you need to kind
1333:17 - of know already what you're getting
1333:18 - yourself into
1333:20 - the reason it has to be generic is that
1333:22 - it needs to be able to produce
1333:25 - different sorts of values let's go to
1333:27 - our notes list view and you see here
1333:29 - we're going to say show delete dialog a
1333:31 - function we haven't implemented yet and
1333:33 - show delete dialogue all of a sudden
1333:35 - it's going to return true or false okay
1333:37 - that's one thing how about in the case
1333:39 - of login view so let's go to login view
1333:42 - how about this case show air dot log
1333:44 - remember show error dialog is a is also
1333:46 - a function we're soon gonna develop
1333:48 - which we have before we we killed it we
1333:51 - have to develop a new function called
1333:52 - show air dialog which in turn is gonna
1333:54 - use our generic dialog but in this case
1333:56 - it's not gonna return true or false so
1333:59 - we need to make sure our generic
1334:00 - dialogue as its name indicates is a
1334:03 - generic function that can based on what
1334:06 - you provide to it is able to return
1334:09 - those values to you
1334:11 - and what i mean by what you provide to
1334:13 - it every item
1334:16 - every option or every button that is
1334:18 - displayed in our generic dialog is gonna
1334:20 - have a value
1334:22 - we're gonna assume that all the buttons
1334:24 - that you display in any given dialog is
1334:27 - going to have
1334:28 - values of the exact same type so a
1334:31 - dialogue that shows a yes or no button
1334:34 - is going to have
1334:35 - two buttons each of which contains a
1334:37 - boolean value one true the other one
1334:40 - false or maybe you want to display 10
1334:42 - buttons and two of them have the value
1334:44 - of true and the other one had the others
1334:46 - 8 have the value of false but what i
1334:49 - mean is that the buttons inside your
1334:50 - generic dialogue are going to have the
1334:52 - same data type all right
1334:54 - so we're going to call that data type t
1334:57 - all right so
1334:58 - let's go ahead and define this um show
1335:01 - generic dialogue so we're going to say
1335:02 - that this dialogue actually returns
1335:05 - um
1335:06 - a future of t
1335:09 - and um what we're going to say we're
1335:11 - going to say show generic
1335:13 - dialogue
1335:15 - and it's
1335:18 - it's a function signature it kind of
1335:20 - looks like this
1335:21 - all right so what does it actually mean
1335:23 - t optional and that's because remember
1335:26 - on android for instance when you display
1335:27 - a dialog to the user the user can
1335:29 - actually press the hardware down button
1335:31 - in order to dismiss a dialog without
1335:33 - actually responding to it and ios is
1335:34 - actually
1335:35 - not so much like that in is when you
1335:37 - display a dialogue it's a modal that the
1335:40 - user has to reply to unless you create
1335:42 - your own dialogue or if you're
1335:45 - doing maybe something hacky on the side
1335:46 - to say that oh if the user taps outside
1335:49 - the dialogue then it should disappear
1335:50 - otherwise dialogues in ios are modal and
1335:52 - have to be responded to however in
1335:54 - android it's possible that a user
1335:56 - dismisses a dialogue without actually
1335:57 - responding to it and in this case the
1335:59 - show generic dialogue should actually
1336:00 - return nil or null depending what
1336:02 - language you're talking about if you're
1336:03 - a python developer you'd say none
1336:05 - so
1336:07 - so we're going to
1336:08 - define this saying we have a generic
1336:11 - dialog that returns some sort of a
1336:13 - optional value all right
1336:15 - and the first parameter that we need is
1336:17 - a build context so let's just say build
1336:19 - context
1336:23 - and we need a title and content so we're
1336:25 - going to say required
1336:28 - also before we do that let's also have a
1336:30 - look at this thing that says build
1336:32 - context isn't defined and that's because
1336:33 - we have an important material so let's
1336:34 - take care of that
1336:36 - and we have to have curly brackets in
1336:38 - these places because required actually
1336:41 - requires that okay
1336:43 - so
1336:44 - the next parameter that we have to
1336:45 - implement is the title and then the
1336:47 - content so both are going to be text or
1336:50 - string
1336:51 - so that's the title and now i'm going to
1336:52 - copy paste that i'm going to say content
1336:54 - in here content
1336:56 - all right now
1336:58 - it's exciting part now what we need is
1337:00 - some sort of ability and
1337:02 - some sort of way for the user to be able
1337:04 - to specify
1337:05 - like a list of um
1337:09 - a list of buttons to display the to the
1337:12 - to the user now every button if we say
1337:14 - every button by default should have for
1337:17 - instance
1337:18 - we should we're representing every
1337:19 - button as a text button that every text
1337:22 - button needs a string to display all
1337:25 - right and then it will have an unpressed
1337:27 - so what we're telling what we're saying
1337:29 - is that okay we should be able to render
1337:32 - multiple buttons and every button should
1337:34 - have a text
1337:35 - and also we set from before every button
1337:38 - should also have some sort of a value
1337:40 - all right which is t optional so we need
1337:43 - a way for the user to specify a list of
1337:45 - buttons each of which has a title of
1337:47 - type string and also every one of those
1337:50 - buttons should optionally have a value
1337:51 - so that's best described with a map of
1337:55 - string as titles and a value of t like
1337:58 - this
1337:59 - all right
1338:00 - so we're going to type def that we're
1338:02 - going to say we have a definition of a
1338:05 - and we have basically a type to finish
1338:07 - and we're going to call the dialog
1338:09 - option builder
1338:12 - and we're going to say it has it's a
1338:14 - generic
1338:15 - okay and we're going to say that is
1338:17 - equal to a function
1338:20 - that returns that value
1338:23 - so
1338:24 - let's also see the map all right
1338:28 - key expected to find all right and
1338:30 - that's probably because i've misspelled
1338:32 - that am all right so now we have an
1338:35 - option builder so we're gonna then use
1338:37 - that option builder in our function so
1338:39 - you're you'll see soon how we're going
1338:41 - to use it
1338:42 - so i'm going to say that we have a
1338:44 - dialog option builder and let's just
1338:46 - call it options builder
1338:50 - okay so we have all those bits and
1338:52 - pieces in place now what we need to do
1338:54 - is inside this function actually use the
1338:56 - build context to display a dialogue to
1338:59 - the user so before we do that let's
1339:02 - grab all the options that the caller
1339:04 - wants us to display so we're going to
1339:06 - call it options
1339:07 - is options builder
1339:09 - we call that function and now you'll see
1339:12 - options is
1339:15 - it smart enough to understand that yeah
1339:16 - it's a map of string dynamic okay it
1339:18 - doesn't understand yet what it is
1339:21 - so let's go ahead and say in here in
1339:23 - this function we return a show dialog
1339:26 - of t
1339:28 - all right
1339:30 - and in here we have two parameters that
1339:32 - we have to pass one is the context
1339:36 - the other one is the actual builder
1339:37 - function all right
1339:40 - some help from your favorite editor to
1339:42 - complete the builder function which is
1339:43 - very simple it just takes to build
1339:45 - context all right and in your builder we
1339:47 - are going to return an alert dialogue
1339:52 - this you should already know from before
1339:54 - we've worked with alert dialogues and
1339:56 - show dialogue from before so this is
1339:58 - nothing revolutionary
1340:00 - so for the title we're going to say we
1340:02 - have a text which is equal to
1340:05 - which contains the title string
1340:09 - for the content we're going to say also
1340:12 - a text
1340:14 - which includes the content
1340:16 - all right
1340:18 - and then we're gonna go into our actions
1340:21 - and this is this is the exciting part
1340:23 - for me because for the actions what we
1340:26 - need to do you see our actions are
1340:28 - defined in here every key inside this
1340:31 - options
1340:32 - is the title
1340:34 - which is defined by string of the
1340:36 - actions
1340:38 - of our dialogue so we need to start
1340:40 - mapping them so we're going to say
1340:41 - options
1340:42 - keys
1340:45 - keys and then we map them all right and
1340:47 - this let's just call this
1340:49 - a option title
1340:54 - and we're not going to use a shorthand
1340:56 - signature in here and we're just going
1340:57 - to do it like this all right
1340:59 - so now in here in the option title we're
1341:02 - actually
1341:03 - actually gonna return a text button so
1341:06 - let's let's get the value first of this
1341:09 - key so i'm just gonna say
1341:10 - um final t value is equal to
1341:14 - options
1341:15 - at the option
1341:17 - title like that
1341:20 - right and now it's saying that yeah
1341:21 - you're not using it that's fine we're
1341:23 - gonna we're gonna fix that soon
1341:27 - and this huge error that we're seeing
1341:29 - here is because you see actions it
1341:31 - requires an iterable i believe no it's
1341:33 - actually a list of widget but
1341:35 - when you do a map on your keys it's
1341:37 - going to return an iterable so to fix
1341:39 - that we're just going to go at the end
1341:41 - here and say this is to list all right
1341:45 - all right so let's now fix the rest of
1341:47 - the problems i understand i mean this is
1341:49 - quite a lot of errors and you may be a
1341:50 - little bit overwhelmed by this but
1341:52 - that's okay we're gonna fix them one at
1341:53 - a time so a semi column at the end so to
1341:56 - get rid of that huge er at the end
1341:59 - and then what we're going to do in here
1342:02 - where we get the value we're going to
1342:03 - create a text button so let's just say
1342:05 - return a text button
1342:07 - every
1342:08 - option
1342:10 - and what the text button needs as we've
1342:12 - seen before is two parameters unpressed
1342:16 - and it also needs the i believe it's
1342:20 - tiled
1342:21 - and we're going to say the child is
1342:23 - equal to text of our
1342:28 - option title
1342:30 - right
1342:31 - so i mean
1342:33 - you may be a little bit confused by all
1342:34 - of this that's okay what we're doing is
1342:37 - very simple we have like a list of
1342:39 - titles to display for every button so
1342:41 - every button has one title and that
1342:43 - title is inside this map of string and
1342:45 - the reason it's inside a map of string
1342:47 - and an optional t
1342:49 - is simply because we don't want to have
1342:51 - we don't want to manage two separate
1342:52 - lists a list of titles and a list of
1342:54 - values and then we're going to match the
1342:55 - titles with the values and map is
1342:57 - already doing that for us furthermore
1342:59 - what a map of string with a t does is
1343:01 - ensures that every string or every key
1343:04 - in this case of type string is unique so
1343:06 - you can't have two buttons with the same
1343:08 - title and different values so
1343:10 - the map is perfect for this case all
1343:12 - right and what we're doing in here for
1343:14 - the actions of our alert dialog we're
1343:16 - saying that okay
1343:18 - every key inside our map is an option
1343:21 - title is a title of a button all right
1343:24 - so we're mapping that what are we
1343:25 - mapping it to every one of those titles
1343:28 - of type string is going to be mapped to
1343:30 - a text button
1343:31 - whose child is a text of the actual
1343:34 - title which is inside this key all right
1343:37 - i understand it could be confusing but
1343:39 - please just pause the video have a look
1343:41 - at the code and i'm sure you'll
1343:43 - understand it better after we actually
1343:44 - thought about it yourself
1343:46 - the values then are going to be
1343:47 - extracted of this type
1343:50 - and what we're going to do is we're
1343:52 - going to say
1343:53 - let's see final value
1343:56 - and in here if you look at value it's
1343:58 - going to be dynamic and what we need to
1344:00 - do is just to make sure that say if
1344:02 - value is not null
1344:05 - and we're going to say navigator
1344:07 - of
1344:08 - our context
1344:09 - it was written already then i'm going to
1344:11 - say pop it with that value
1344:13 - otherwise we're just going to pop
1344:17 - off
1344:19 - just pop all right so this that is now
1344:22 - you see why we're defining the value as
1344:25 - in as an optional because you see some
1344:27 - values
1344:28 - some buttons on our dialogs may not
1344:31 - actually have any values just like we
1344:34 - have in our
1344:36 - login view if we go back in here this
1344:38 - login view is going to have an error
1344:40 - dialog and this error dialog is going to
1344:42 - use our generic dialog but this air
1344:44 - dialog is just going to have an ok
1344:45 - button it has no value the okay is just
1344:48 - an ok just dismiss the dialog and that's
1344:50 - exactly what this is going to do so as
1344:53 - you'll soon see the way we'll implement
1344:55 - our new show error dialog is going to
1344:57 - use our generic dialog however it's
1344:59 - going to place a little um option in
1345:01 - there that says ok and that ok has a
1345:04 - null value all right
1345:07 - perfect a lot of talking a lot of logic
1345:09 - but that's fine we sometimes need to do
1345:11 - this okay
1345:14 - wow um
1345:15 - we've now written our generic dialogue
1345:18 - what we need to do is we need to start
1345:20 - using it and that is inside our error
1345:22 - dialogue that we're going to implement
1345:24 - now so
1345:25 - let's go ahead and create an error
1345:27 - dialog
1345:30 - so i'm going to bring up my notes
1345:32 - and
1345:33 - let's as the caption indicates inside
1345:35 - dialogs
1345:37 - let's see where it is inside dialogues
1345:38 - we're going to create a new file called
1345:40 - error dialog here
1345:44 - now inside error dialog what we need to
1345:47 - do is we need to use our generic dialog
1345:49 - so
1345:50 - we need to have an import in here which
1345:52 - we're going to get visual studio code to
1345:53 - help us with so
1345:55 - remember error dialog is going to just
1345:57 - show an ok button it has no value so
1346:01 - it the short error dialog is going to
1346:03 - have the signature exactly as it had
1346:05 - before which is a future void so let's
1346:07 - go ahead and do that
1346:10 - and we're going to call it show error
1346:11 - dialogue
1346:13 - and the only thing i mean the two things
1346:16 - that the shower dialog needs is a build
1346:18 - context and a text so we're saying build
1346:20 - context
1346:22 - and we're also going to say a string of
1346:24 - text
1346:26 - okay and let's import material to get
1346:28 - rid of that error
1346:31 - so that's that and then in here we're
1346:34 - actually going to return an instance of
1346:36 - our show
1346:37 - err show generic dialogue
1346:40 - and i believe it now should be imported
1346:44 - is it not imported automatically in here
1346:46 - it's not yet but somehow it's finding it
1346:49 - and i can see we have a show generic
1346:51 - dialogue actually inside
1346:53 - in here so this is not the one that
1346:55 - we're actually gonna use so we're gonna
1346:57 - use the one with uh
1347:00 - like this
1347:01 - and then we're gonna say our air
1347:04 - dialogue avoid so let's import our own
1347:07 - uh
1347:08 - show gener um
1347:10 - show generic dialogue
1347:14 - so was it a show general dialogue i'm
1347:16 - actually curious general dialogue that's
1347:18 - interesting so there's a function called
1347:20 - show general dialogue
1347:22 - but that's not what we've created we've
1347:24 - called show generic dialects so be
1347:25 - careful a little bit with that because i
1347:27 - actually tripped on that right now so
1347:29 - let's go back to our error dialog and
1347:31 - say show
1347:32 - generic
1347:33 - dialog and it's going to also import
1347:35 - that form you know so that's that's the
1347:37 - correct one okay
1347:39 - so put a comma at the end to get
1347:41 - formatting also working fine
1347:44 - and now add a comma in here to get the
1347:47 - formatting finding there as well
1347:49 - now
1347:50 - the title we're going to hard code that
1347:52 - we're going to say an error
1347:54 - occurred
1347:55 - like this
1347:56 - and the content is just going to be the
1347:58 - text and our options builder now is
1348:01 - going to be i remember an options
1348:02 - builder if you go back in here
1348:05 - to our generic dialog is a function all
1348:08 - right that returns that so let's go and
1348:10 - define an inline function in here and we
1348:13 - say that oops
1348:15 - to remove this and we say it's a
1348:17 - function that returns a map
1348:19 - and the key in here is just going to be
1348:22 - okay with the value of null
1348:24 - all right see how see how generic that
1348:26 - is now so we're actually defining saying
1348:28 - that this is a show air dial again it
1348:29 - just doesn't return anything it's just a
1348:31 - void all right
1348:33 - and to make it cleaner you could
1348:34 - actually specify here that this is a
1348:36 - void
1348:38 - all right that's that part so now we've
1348:40 - worked on our error dialogue um and now
1348:43 - what we need to do in order to make our
1348:45 - code a little bit less scary with so
1348:47 - many errors at the moment that we have
1348:48 - let's go and clean up some of these
1348:50 - errors and let's go ahead and use this
1348:52 - show error dialogue everywhere okay so
1348:54 - let's go to our views and have a look at
1348:56 - the login view
1348:59 - you can see now we have show air dialog
1349:01 - and and now we have our own
1349:04 - implementation of uh show air dialog so
1349:07 - let's get help from visual studio code
1349:08 - to import our error dialog
1349:11 - and all of a sudden you see all the
1349:13 - errors in the login view and disappeared
1349:16 - you can see we're in loginview.
1349:18 - so let's save our login view
1349:21 - and we have an error in here from our
1349:24 - previous import which was show air
1349:25 - dialog dart so let's remove that as well
1349:29 - so
1349:30 - your login view should now look quite
1349:32 - clean i'm going to close that and let's
1349:35 - then i'm going to save all of these
1349:37 - things that we have in here because we
1349:39 - have so many windows so many tabs open
1349:41 - that it's kind of scary so let's then go
1349:44 - inside the register view
1349:47 - and clean up this import so let's remove
1349:49 - the old import from utilities show error
1349:51 - dialog
1349:52 - and let's go and
1349:54 - to these errors that we're getting here
1349:56 - for show air dialing and get visual
1349:57 - studio code or your favorite editor or
1350:00 - id to auto import our new function
1350:03 - called short error dialogue which
1350:05 - resides inside
1350:07 - this utilities dialogues error dialog
1350:10 - okay
1350:12 - now you remember now
1350:14 - that we also broke
1350:16 - our
1350:17 - notes view
1350:18 - here
1350:19 - which at the moment uh let's see
1350:23 - yeah we've broken notes view simply
1350:25 - because we're not returning anything in
1350:27 - here because we
1350:29 - migrated or moved all the code to the
1350:31 - notes list view
1350:33 - so what we need to do now is to go and
1350:37 - basically work on
1350:39 - our
1350:41 - show delete dialogue okay so that's not
1350:43 - the one that we we need we need to work
1350:44 - on the notes views
1350:46 - log out functionality which is here show
1350:48 - log out dialogue you see
1350:50 - so we need to create a new logout dialog
1350:53 - as well and this this log out dialog is
1350:56 - going to be very similar to how we
1350:57 - created our um error dialog so it's
1351:01 - gonna be very similar
1351:02 - okay
1351:03 - so let's i'm actually gonna i don't know
1351:06 - if it's worth copying this code i
1351:08 - usually don't like copying even if it's
1351:10 - my own code sometimes i do but in this
1351:12 - case i think it's actually better that
1351:13 - we write it by hand okay
1351:15 - so let's go ahead as the caption
1351:17 - indicates inside dialogues folder create
1351:19 - a new file called log out dialog
1351:21 - so in here i'm going to say new file log
1351:25 - out dialogue drop down
1351:28 - and in the log out dialog so i'm going
1351:31 - to go to my notes as well and log out
1351:33 - that one all right so let's go and say
1351:36 - and then we need a function called show
1351:38 - logout dialog all right as we have it
1351:41 - here okay so i'm going to just copy that
1351:43 - name so we're going to say it's a future
1351:46 - of boolean
1351:47 - and call show logout dialog
1351:50 - and the only thing it needs is a build
1351:52 - context
1351:53 - okay
1351:54 - we're going to get an error for build
1351:56 - content simply because we don't have it
1351:57 - inside our file in here
1352:00 - and you see now the only error that
1352:02 - we're getting is saying that the body
1352:04 - might complete normally
1352:05 - which means yeah it's not returning any
1352:07 - value at the moment and we're going to
1352:08 - fix us
1352:11 - so what we need in here we're actually
1352:12 - going to return our show generic dialog
1352:16 - and auto import it
1352:18 - a comma at the end and a semicolon just
1352:20 - to get the formatting right
1352:22 - the context is there and we're in this
1352:24 - case we're actually going to say that
1352:25 - show generic dialogue is going to return
1352:27 - a boolean value all right
1352:29 - so the context is there the title we
1352:32 - need to specify kind of we're just going
1352:34 - to say log out and for the content we're
1352:35 - going to say are you sure you want to
1352:38 - log out
1352:40 - the optional remember it's a function
1352:42 - we're going to make an anonymous
1352:43 - function in here and returns a map
1352:46 - and for the option of cancel we're going
1352:48 - to say false and for the option of
1352:50 - logout we're going to say true all right
1352:52 - we're getting a huge error in here
1352:54 - saying that there is a future of boolean
1352:56 - you're returning a boolean optional
1352:59 - for a function that is supposed to
1353:00 - return a future of bull again remember
1353:04 - on some platforms you're able to dismiss
1353:06 - your dialogues without actually
1353:07 - responding to any of the options
1353:10 - presented in the dialogue in those
1353:12 - platforms you actually need to guard
1353:14 - yourself against that case by returning
1353:16 - a default value so let's go in here and
1353:19 - say then
1353:20 - so if we get this value which as you can
1353:22 - see is an optional bool then we say
1353:24 - either return that or just return false
1353:27 - and that's it we can put a comma at the
1353:29 - end as well just to get the formatting
1353:31 - right okay
1353:34 - perfect um now what we need to do is now
1353:37 - that we've written our show logout
1353:38 - dialog we have to put it to use so let's
1353:40 - go into our notes view
1353:42 - and
1353:43 - get help from your favorite editor to
1353:45 - import your new logout dialog in here so
1353:48 - that error goes away
1353:52 - okay so
1353:54 - we've actually worked on that so what i
1353:56 - want to do is
1353:57 - uh
1353:58 - edit my caption a little bit and i'm
1353:59 - sorry about and i'm sorry about this
1354:01 - because this caption wasn't completely
1354:02 - right so
1354:05 - i need to fix that
1354:13 - that's fine now let's now now that we've
1354:15 - worked on the notes list view let's go
1354:17 - and bring notes list view inside notes
1354:20 - view all right so you can see here we
1354:23 - have our notes view
1354:25 - and but we also have our notes list view
1354:27 - which we have to import in here
1354:30 - i'm going to go to my notes and just to
1354:32 - make sure i have everything in place
1354:35 - all right so in this case that we have
1354:37 - all notes let's go ahead and say we
1354:39 - return an instance of our notes list
1354:42 - view and this is gonna auto import it
1354:43 - for me
1354:44 - so like that and for the notes i'm going
1354:48 - to say here are all the notes and
1354:51 - upon
1354:52 - the user wanting to delete a note i'm
1354:54 - just going to get visual studio code to
1354:55 - complete that for me you can see here
1354:59 - and we get the note that the user wants
1355:02 - to delete all right
1355:04 - then in here we're going to make this
1355:05 - function asynchronous and just a wait on
1355:08 - our node service
1355:11 - delete this
1355:12 - node with this id
1355:16 - all right i'm going to save now if you
1355:18 - look at your
1355:20 - code in here you can see we have one
1355:22 - error here in our notes list view and
1355:25 - let's go ahead and fix that and we can
1355:28 - say it says show delete dialog
1355:31 - and we haven't yet actually written the
1355:34 - delete dialogue so
1355:37 - what we need to do is need to go and fix
1355:39 - that actually so it creates a delete
1355:41 - dialogue as well
1355:44 - so let's go inside our
1355:48 - dialogues that we have here
1355:51 - in here utilities dialogs
1355:53 - so let's go and right click on it and
1355:56 - create a new file called delete dialog
1356:00 - and delete dialog is going to be very
1356:02 - very similar to the log out dialog so
1356:05 - let's just go ahead kind of maybe we
1356:07 - could use the log out dialog so copy the
1356:09 - code from log out dialog
1356:11 - and bring it into your new file called
1356:13 - delete dialog and just paste it in there
1356:15 - and we're going to call this function
1356:17 - show
1356:18 - delete dialog
1356:20 - okay
1356:21 - and it's going to create a generic
1356:23 - dialogue in here and in here we're going
1356:24 - to say delete
1356:27 - and we're just going to say are you sure
1356:28 - you want to delete
1356:30 - this item
1356:32 - the option builder is going to be cancel
1356:34 - false and then
1356:36 - we're going to have an option that just
1356:37 - says yes true all right
1356:39 - so now you see how easy it is now that
1356:41 - we have a generic dialog just we're
1356:43 - reusing it everywhere okay
1356:46 - so then let's go back to our notes list
1356:48 - view and fix this function fix the
1356:50 - calling of this function and get help
1356:52 - from visual studio code to import our
1356:53 - delete dialogue and that error also goes
1356:55 - away
1356:56 - so now i save my project and all of a
1356:59 - sudden you see we have delete icons
1357:02 - appear to our every tile
1357:05 - and
1357:06 - we should now be ready to actually put
1357:08 - this into test so i'm going to tap on
1357:10 - the hello world item here and now you
1357:13 - see it says are you sure you want to
1357:14 - delete delete this item pressing cancel
1357:16 - doesn't do anything but if i press on it
1357:18 - and say yes then the hello world note is
1357:21 - deleted and our notes view is getting
1357:24 - notified of that information from its
1357:26 - stream builder because remember
1357:29 - notes service
1357:31 - as we have it here let's go to our
1357:32 - services here
1357:34 - uh crud
1357:35 - and node service
1357:37 - upon deleting a node let's have a look
1357:39 - at the leaks node function here you see
1357:42 - what it does is that if it could delete
1357:44 - a node it actually removes it from its
1357:46 - array of nodes and it notifies the
1357:49 - stream controller
1357:51 - actually no that's the delete node
1357:53 - oh yeah basically it removes the node
1357:56 - and then puts the entire array of nodes
1357:58 - in the node stream controller okay so
1358:00 - that's how the notes view is getting
1358:03 - notified of a deletion of an item we can
1358:06 - delete another one if you want and
1358:07 - that's it
1358:09 - so well done great job for sticking with
1358:12 - me throughout this chapter this was
1358:14 - probably one of like the most
1358:16 - challenging chapters in that we
1358:18 - had a lot of errors from the beginning
1358:20 - and we had to fix them but
1358:23 - one of my goals for for this course is
1358:25 - not for you just to learn how to write
1358:27 - flutter application but actually get in
1358:29 - the mindset of a software developer so
1358:32 - and every software developer they have
1358:34 - their own preferences i included and one
1358:36 - of my preferences when i'm doing
1358:37 - refactoring is like to cut things from
1358:39 - the source as i mentioned in the
1358:40 - beginning of this chapter so that's why
1358:41 - we got so many errors in the beginning
1358:44 - but you stuck with me and we fixed all
1358:45 - those errors and now we came out of this
1358:47 - chapter actually quite victorious
1358:50 - so now we have the delete functionality
1358:53 - what we need to do now is just to go and
1358:56 - we because we've done a lot of work what
1358:58 - we need to make sure now is to
1359:00 - commit and tag our work so that we don't
1359:02 - lose this work so um i'm gonna do some
1359:05 - um
1359:06 - reorganization on the windows here so
1359:08 - you see things a little bit better
1359:11 - i'm going to increase the size okay
1359:13 - and let's see now
1359:16 - if we look at the previous tags we've
1359:18 - come to tag 15 from the previous chapter
1359:20 - and now we need to do a tag 16 okay so
1359:23 - let's go and look at the status
1359:25 - we have quite a lot of things that we've
1359:27 - modified we've deleted the show error
1359:29 - dialogue from before we've also
1359:32 - excuse me we've also added a whole new
1359:34 - folder here on under lib utilities
1359:37 - dialogues
1359:38 - so let's do get at all and let's look at
1359:40 - the status
1359:42 - a lot of things changed okay
1359:44 - and what we're going to do is we're
1359:45 - going to commit these
1359:47 - and let's just say step
1359:48 - 16
1359:50 - okay and push your changes into your
1359:53 - host git repo
1359:56 - we're also going to tag as step 16 so
1360:00 - and we're gonna push our tags
1360:03 - if you look at your tags right now you
1360:05 - have one two three four five six seven
1360:07 - blah blah blah so we have all our tags
1360:09 - up and including step 16. all right
1360:13 - so that was for committing and also
1360:14 - tagging our work
1360:16 - as it's tradition we're going to talk
1360:17 - about what we what we need to discuss in
1360:19 - the next chapter
1360:22 - you can see we have the ability to
1360:24 - create new notes and we also have the
1360:25 - ability to delete notes and also
1360:27 - something that we didn't test is this
1360:28 - thing that when we create a new note and
1360:31 - if we back out of it you see that that
1360:33 - note actually is deleted from the
1360:34 - database so that's also working so we
1360:37 - have the ability to delete notes and the
1360:38 - ability to create notes but we don't
1360:40 - have the ability to update notes and
1360:42 - that's exactly what we're going to talk
1360:43 - about in the next chapter so i'll see
1360:46 - you there
1360:47 - hello everyone and welcome to chapter 34
1360:49 - of the slaughter course in the previous
1360:51 - chapters we've been talking quite a bit
1360:53 - about how we can create
1360:55 - and notes and how we can delete them so
1360:57 - we've been working quite a bit with some
1360:59 - generic dialogues that we've also
1361:00 - developed in order to be able to handle
1361:03 - error dialogues and also the log out
1361:05 - dialogue for instance and also the
1361:06 - delete dialogue so
1361:08 - there's been quite a lot of work done on
1361:10 - that side but we haven't really talked
1361:12 - at all about how the user can tap on or
1361:15 - click on their existing notes in order
1361:17 - to be able to
1361:18 - update that for instance and update
1361:21 - that's a particular node so that's what
1361:23 - we're gonna take care of in um
1361:25 - this chapter
1361:27 - so
1361:28 - if we now start looking at the code that
1361:30 - we've written you you will see that
1361:32 - we've called
1361:34 - the view that actually creates a note um
1361:37 - the new node view
1361:39 - however
1361:40 - we're not going to go and create a whole
1361:42 - new view that looks exactly the same as
1361:44 - this new note view just so that we can
1361:47 - update existing notes so the goal of
1361:49 - this chapter is to reuse this view so
1361:51 - that we can just use the exact same view
1361:55 - but
1361:55 - when we when the user taps on a note in
1361:57 - the note list we're going to pass the
1361:59 - tapped note to this
1362:02 - existing view all right so that's what
1362:03 - we're gonna take care of in this chapter
1362:05 - let me do a little bit of a shuffling
1362:07 - around here so
1362:09 - you'll see the screen better i'm gonna
1362:10 - bring up visual studio code as usual
1362:12 - here
1362:14 - i have scrcpy who
1362:16 - is taking care of this android screen
1362:20 - and we can then have a look at the first
1362:22 - task that we have to do as you can see
1362:23 - in the cache it says we have to rename
1362:25 - the new node to your dart to create
1362:29 - update node view alright so let's take
1362:31 - care of that i'm going to close all the
1362:33 - tabs in here
1362:35 - and let's go and say command p visual
1362:37 - studio code or maybe an android studio
1362:39 - is another command that you have to
1362:42 - execute in order in order to bring up
1362:44 - the list of files i don't really know
1362:45 - the command in android studio but if
1362:48 - you're not comfortable with any of those
1362:49 - you can just go to this new note view
1362:52 - right here and we are going to rename it
1362:54 - so
1362:55 - let's just do that now so i'm just going
1362:57 - to call as a cache in the case create
1362:59 - updates note view okay
1363:02 - create updates notes view like that
1363:06 - if the updating i mean if if your editor
1363:09 - is intelligent enough and it has some
1363:11 - like um refactoring features built in
1363:14 - then
1363:15 - you don't have to do anything special
1363:16 - for
1363:18 - for this command to work but um you can
1363:21 - see in here for instance now we've
1363:22 - changed this file name to create updates
1363:25 - nodes view but we haven't really changed
1363:27 - for instance the class name so if i go
1363:30 - here this thing is still called new node
1363:32 - view all right
1363:34 - so let's go in there and perhaps change
1363:37 - that as well let me go to my notes
1363:39 - uh let's see create update note view
1363:43 - and we're going to go actually and
1363:45 - rename this new note view as well so
1363:47 - let's go ahead and do some refactoring
1363:50 - in here so i'm just going to say
1363:51 - refactor and let's see do we have any
1363:54 - refactoring features here um
1363:57 - we have rename symbol so maybe let's use
1364:00 - that and i'm going to call it create
1364:02 - update node view
1364:06 - right
1364:08 - let's see if it's successfully going to
1364:09 - be able to rename this for me so i can
1364:11 - see it renamed the class for me and it
1364:13 - also renamed the state class which is
1364:15 - exactly what i needed so if i now save
1364:18 - this we should have some problems
1364:21 - excuse me
1364:22 - but i can see visual studio code was
1364:23 - intelligent enough actually to rename
1364:26 - the main
1364:27 - dart reference to this route as well
1364:30 - remember
1364:31 - when we created this create
1364:33 - or what we call it actually before it
1364:35 - was called
1364:36 - um
1364:37 - new note view
1364:38 - that note view was a new note view was
1364:41 - actually being used inside our routes in
1364:43 - the main function of our of our
1364:45 - application inside main.dart now that
1364:48 - we've renamed that to create update note
1364:50 - view both the class name the stateful
1364:52 - widget and its state
1364:54 - then that new name should be used in
1364:57 - main.dart so if you're using vim or any
1365:00 - other
1365:01 - code editor like if you're using sublime
1365:03 - supply may not have this refactoring
1365:04 - feature that can actually go and rename
1365:07 - where you've used that symbol so you may
1365:10 - need to do that by hand so you may
1365:11 - actually get some errors in your
1365:13 - main.dart file
1365:14 - but if you get those errors don't worry
1365:16 - about it at least you know what the
1365:18 - problem is okay so you can go and fix it
1365:19 - yourself
1365:23 - all right so we've done that and now
1365:25 - what we need to do is i'm actually going
1365:27 - to press command s here and command s in
1365:29 - here just to make sure everything's
1365:30 - saved and as the caption indicates
1365:32 - remember we also have our routes inside
1365:35 - constants
1365:36 - so you can see our route is still called
1365:39 - new node route okay
1365:41 - so i'm gonna rename this now and i
1365:44 - suggest that you do the same thing too
1365:45 - let's just say rename and let's rename
1365:48 - that to as the caching indicates create
1365:50 - or update node route okay so create or
1365:54 - update snow throughout just like that
1365:57 - and as you can see again visual studio
1365:59 - code helped us quite a lot now it went
1366:01 - and updated this as well
1366:03 - you see
1366:04 - right
1366:05 - and something also happened in the notes
1366:08 - view as well i can see and that's
1366:09 - because
1366:10 - you see the where we actually
1366:12 - press the plus button in here to create
1366:15 - a new node that was also using the uh
1366:19 - previously uh
1366:20 - named
1366:21 - new node route but now it's updated to
1366:24 - create or update node routes so all i'm
1366:26 - trying to say in here you need to rename
1366:28 - that route so that it becomes create or
1366:31 - update new node route and depending on
1366:33 - your editor it may be smart enough to
1366:35 - have some refactoring features if it's
1366:36 - like visual studio code then you're good
1366:38 - to go just rename it but if it's not you
1366:40 - may have to do that by hand so just go
1366:42 - ahead and rename where you
1366:44 - refactor in your code where you're using
1366:46 - that route to use the new name okay
1366:50 - all right so
1366:52 - let's have a look at this dilemma now
1366:54 - you see
1366:55 - in our
1366:57 - notes view
1366:58 - when we create a new note we just say
1367:01 - navigator of context push name all right
1367:05 - now the goal here is when we create this
1367:09 - nodes list view we're going to allow the
1367:11 - users you see at the moment we have on
1367:13 - delete node but we're also going to have
1367:15 - a parameter called untap we're going to
1367:17 - develop that soon
1367:19 - but the dilemma here is that when you
1367:22 - then say on tap
1367:23 - we need to also go to this view into
1367:26 - this route that we have create or update
1367:28 - node route but we have to pass an
1367:31 - argument to that route an argument just
1367:34 - as it is for a parameter of a function
1367:35 - or an argument to a function is like
1367:37 - data that you pass to that
1367:40 - route and you say hey i'm initializing
1367:42 - this route but i'm passing some data to
1367:45 - it so then that route can then in turn
1367:48 - reactively sorry that ralph can then
1367:51 - react to that and go and read that
1367:52 - argument and say oh was i pass an
1367:55 - argument yes then i'm going to do this
1367:57 - was i not pass an argument then i'm
1367:58 - going to do something else in this case
1368:01 - if you pass a note to our create or
1368:03 - update note route then it's going to say
1368:05 - oh i have an existing node i'm just
1368:07 - going to populate myself and my contents
1368:09 - with that note and i'm not going to
1368:11 - create a new node remember
1368:13 - at the moment our create update note
1368:16 - view
1368:17 - we have this function set up in here
1368:18 - that says create a new node we're gonna
1368:20 - fix that soon okay but remember that
1368:24 - at the moment when you go into that view
1368:26 - by default it's creating a new node and
1368:28 - we're gonna change that so that we're
1368:30 - saying we're going to rename that and
1368:31 - saying like create or get note or
1368:34 - something like that soon you'll see um
1368:37 - but in that function then we're going to
1368:38 - say
1368:39 - where we passed an argument where we
1368:41 - pass an existing note if yes we don't
1368:44 - have to create a new node if no we have
1368:46 - to create one okay
1368:48 - so the way arguments work then is if you
1368:51 - have a look at our notes view where
1368:53 - we're using push name there is a
1368:55 - parameter in here called arguments and
1368:58 - as you can see at the moment it is just
1369:00 - an optional object meaning that well it
1369:02 - can be no or no
1369:05 - we're not we're not leveraging that at
1369:06 - the moment but we are going to soon so
1369:09 - at the call side where you're creating a
1369:12 - where you're creating a route and
1369:13 - pushing it to the to the
1369:15 - navigation stack you can pass your
1369:17 - argument using that arguments parameter
1369:19 - okay
1369:20 - and at the receiving side in this case
1369:23 - are let's see create or update node view
1369:25 - here
1369:27 - in here
1369:29 - you can read then your argument
1369:32 - let's see let's go to some place that
1369:34 - does make sense let's say in here
1369:36 - okay you can read that argument calling
1369:38 - now you don't have to type as i'm typing
1369:40 - i'm just demonstrating something to you
1369:41 - okay and we can use model uh route
1369:46 - and we say of
1369:48 - is context and then you can say settings
1369:51 - dot arguments then that's where you
1369:54 - basically get access to your arguments
1369:58 - through your modal route so now you know
1370:01 - how to pass arguments and you know also
1370:03 - how to receive them all right
1370:06 - so
1370:08 - let's go to the next point um
1370:11 - you see
1370:12 - we may need to somewhere also in the
1370:14 - future receive an argument inside our
1370:19 - any of our widgets
1370:20 - and that argument can be any type that
1370:23 - you specify for instance you can pass an
1370:25 - integer from one screen to the other or
1370:27 - you can pass a string or you can pass an
1370:29 - array or in our case you can pass a
1370:31 - database node so
1370:33 - as you could see in in this code let's
1370:35 - go in here
1370:37 - um
1370:39 - what's this optional yes settings
1370:41 - and then arguments
1370:44 - you see at the moment this guy is an
1370:46 - object so it doesn't really know what it
1370:48 - is
1370:49 - but it'd be really good if you could
1370:51 - create a function
1370:52 - somehow that allows us just to say for
1370:55 - instance context get object
1370:58 - of type t something like that so we
1371:01 - could just say
1371:03 - given a build context
1371:04 - we want to extract an argument of any
1371:08 - type from it if that argument exists
1371:10 - okay
1371:12 - and then we're going to use it in our
1371:13 - code in here and to and we get our build
1371:16 - context and then grab our notes out of
1371:18 - it so it's what we're going to do is
1371:20 - like create a generic way of extracting
1371:23 - arguments from our build context and
1371:26 - that's exactly what we're going to do
1371:27 - now okay
1371:29 - so
1371:30 - to do that we're going to create an
1371:32 - extension on build context and that
1371:34 - extension is going to be called guest
1371:35 - argument and as i've indicated in the um
1371:39 - as i've indicated here in the
1371:41 - caption at the bottom of the screen you
1371:43 - can see that we are going to create a
1371:45 - new file
1371:46 - under lib utilities generics and a file
1371:50 - call gets arguments so you can see we
1371:52 - have utilities at the moment here
1371:54 - and that utilities follow me just fold
1371:57 - everything in here so it's not so
1371:59 - scary to look at you can see utilities
1372:01 - at the moment has
1372:02 - a folder called dialogues under it but
1372:04 - what we want to create is a folder
1372:06 - called generics and then a file under
1372:08 - that called get arguments okay
1372:11 - so
1372:11 - uh let's go ahead and do that right now
1372:14 - so i'm gonna go to uh
1372:17 - utilities where where to go utilities
1372:20 - dialogues okay so i'm just gonna right
1372:21 - right click on utilities and say new
1372:23 - file and i'm gonna say generics
1372:25 - lyrics
1372:27 - and get arguments dot
1372:30 - dart
1372:32 - now in here what we need is um
1372:36 - to just start writing our extensions so
1372:38 - i'm just going to say extension
1372:41 - and
1372:42 - get argument on build context okay
1372:45 - now
1372:47 - if i typed build context visual studio
1372:50 - code was smart enough to import material
1372:52 - if you're using sublime or any other
1372:54 - text editor it may not be intelligent
1372:55 - enough to do that for you may not have
1372:57 - like the extension to work with dart and
1372:59 - flutter and
1373:00 - kind of so you may have to import
1373:02 - material yourself but remember we also
1373:05 - only need um
1373:07 - build context and modal route from
1373:10 - entire material uh packaging here so it
1373:13 - would be it would make a lot more sense
1373:15 - if you just say show
1373:16 - build context
1373:19 - and
1373:20 - modal route
1373:23 - right so we're not going to use more
1373:27 - from the material package
1373:29 - than those two
1373:32 - all right so let's go ahead and create
1373:34 - this function so we're saying
1373:36 - that we are going to optionally return a
1373:39 - value of type t that means any type that
1373:42 - you ask us to and we're going to call
1373:44 - this function get
1373:46 - argument okay
1373:49 - and get argument itself takes t all
1373:51 - right so in here what we're going to say
1373:54 - is going to say modal route is model
1373:56 - route
1373:58 - of our build context
1374:01 - or this because you see we
1374:03 - we are creating an extension on build
1374:05 - context and this identifier in here
1374:08 - refers to the current build context on
1374:11 - which the get argument function is
1374:13 - actually invoked so if you're not
1374:15 - familiar with
1374:16 - extensions i've talked about them before
1374:18 - and so it i think it was part of also
1374:21 - the dart introduction in the beginning
1374:23 - absolute beginning of this course so you
1374:25 - may want to go back to that in order to
1374:26 - understand how extensions actually work
1374:29 - okay so remember model route in here if
1374:32 - you look at it
1374:33 - it can be an optional in here you see so
1374:36 - what we need to do is to guard ourselves
1374:38 - against that so we just say if modal
1374:40 - route
1374:42 - is not null
1374:44 - and otherwise we're just going to return
1374:45 - null we're saying that if we can't get
1374:47 - the model route then we can't extract
1374:50 - any argument from it okay so let's get
1374:52 - the
1374:53 - let's get all the arguments from our
1374:55 - model route now so we're gonna say args
1374:57 - is model route settings
1374:59 - dot arguments okay and then remember
1375:02 - args is also now an object as it was
1375:06 - on the call site the call site may skip
1375:08 - over passing an argument to us and we in
1375:11 - that case we're not going to get any
1375:13 - arguments which means args is going to
1375:14 - be null in here okay
1375:16 - so let's just guard ourselves against
1375:19 - that so we say if args is not null and
1375:22 - args
1375:23 - is of this given type then we're going
1375:26 - to return rx okay uh oops
1375:29 - rx as t
1375:33 - so what we're saying in here is that if
1375:35 - we could grab any arguments from um our
1375:37 - modal route settings arguments and if
1375:40 - that argument is of the type that you
1375:42 - are asking this function to extract then
1375:45 - we're going to give it back to otherwise
1375:46 - we're just going to fall through to line
1375:48 - number 12 in here and just return and
1375:50 - null all right
1375:52 - now i'm going to save this file
1375:56 - okay
1375:56 - that was that part
1375:59 - now what we need is let me bring up the
1376:01 - caption so you see what we have to do
1376:06 - so let's now go to our
1376:08 - view which we call create actually it's
1376:11 - easy now now that we have a lot of files
1376:13 - in our project it's actually easier to
1376:15 - navigate if we just do command p in
1376:17 - visual studio code for instance to jump
1376:18 - to specific
1376:20 - files so in that file it is now called
1376:23 - create update node view so let's go
1376:25 - there
1376:27 - and as the caption indicates our creates
1376:30 - note in here let's have a look and see
1376:32 - if we can find that function
1376:34 - create new node here you see
1376:36 - so what we need to do is we just need to
1376:38 - rename that um
1376:40 - create new notes to
1376:42 - ask them captions to get create or get
1376:44 - existing notes so
1376:46 - i'm gonna do that i'm gonna say create
1376:48 - or get existing note
1376:51 - and again we just do the code smart
1376:53 - enough to rename where i'm actually
1376:56 - using that function as well you can see
1376:57 - in here okay
1377:00 - so you may otherwise if you're not using
1377:02 - visual code or if you're not using the
1377:04 - refactoring features of your favorite
1377:05 - editor you may have to rename that
1377:08 - a call site as well
1377:10 - so i don't think i have to mention this
1377:12 - again i think i've now mentioned it
1377:14 - three times so just so you know if
1377:16 - you're renaming something just make sure
1377:17 - that all the call sites are also updated
1377:19 - okay
1377:23 - all right so now that we've done that we
1377:25 - actually need to grab the existing nodes
1377:29 - if it is already there
1377:32 - okay
1377:32 - so um
1377:35 - so let's do that you can see it says in
1377:37 - create or get existing no gets note
1377:39 - argument if any all right
1377:42 - so let's then in here say if we if our
1377:46 - widgets like the widget that actually
1377:48 - called us created us
1377:50 - has passed us an argument of type
1377:52 - database note then we're going to get
1377:54 - that okay so let's just call it widget
1377:56 - note is
1377:57 - um
1377:58 - we need now a build context because
1378:00 - remember our extension was created on
1378:02 - build context however this function at
1378:04 - the moment has no build context so let's
1378:06 - go ahead and pass a build context in
1378:08 - here
1378:10 - okay
1378:11 - so let's then go into the call site and
1378:13 - pass the build context in here call
1378:15 - context which is passed to us in the
1378:17 - build function all right
1378:21 - so trusting that you've done that
1378:23 - we're now going to go and say context
1378:25 - get
1378:26 - and you see now we need our get argument
1378:28 - function in here but as i type nothing
1378:31 - appears here and that's because we don't
1378:33 - have an import so
1378:35 - i can see if i just type get the
1378:36 - argument and ask visual studio code to
1378:38 - see if it can solve that problem for me
1378:40 - it's saying that oh there is again
1378:43 - arguments.dart file which has a function
1378:45 - do you want me to import it so i'm just
1378:47 - going to say yes please
1378:49 - otherwise if you're not doing this you
1378:50 - may have to import your get
1378:52 - arguments.dart file by hand all right so
1378:55 - now i'm just saying get arguments and
1378:57 - remember get arguments function in
1378:59 - itself has no parameters so how do you
1379:02 - call this function okay how do you tell
1379:05 - it to extract a t
1379:07 - of like database node well that's very
1379:09 - easy you just put this
1379:11 - less than sign and and grade it inside
1379:13 - like that and then you type the type of
1379:16 - object that you want to extract so if we
1379:18 - just say data
1379:19 - base notes all right
1379:21 - and now that we did that remember get
1379:24 - arguments returns an optional object of
1379:27 - that type and in this case our database
1379:29 - node is then an optional database node
1379:31 - all right meaning that you either have a
1379:33 - node
1379:35 - so that the user has tapped on an
1379:36 - existing node and came here or you don't
1379:38 - meaning that a user tapped on the plus
1379:40 - button and came here okay
1379:43 - so then we say if the widget node
1379:46 - is not null meaning that we are updating
1379:48 - an existing node so that the user has
1379:50 - tapped on an existing node and ended up
1379:52 - on the screen
1379:53 - then what we're going to do we're going
1379:54 - to save that inside our node
1379:57 - private variable here
1379:59 - i think we set it up somewhere around
1380:01 - here you see
1380:02 - so we're going to say our node is the
1380:04 - widget node
1380:05 - okay
1380:07 - and in this case what we also need to do
1380:09 - we need to make sure that the text field
1380:12 - inside our on our screen
1380:15 - and
1380:16 - i can show you here so if you go here
1380:17 - this text field it should be
1380:19 - pre-populated with that existing notes
1380:22 - text and the way we can do that i mean
1380:24 - we don't have direct access to our text
1380:26 - field but what we do have is this text
1380:29 - controller which we set up in here text
1380:31 - controller okay so let's go and set that
1380:34 - text controller's text so i'm just gonna
1380:36 - say text controller the text is equal to
1380:40 - widget note
1380:42 - dot text
1380:44 - and then we're just going to return the
1380:46 - widget note so the notes that
1380:50 - we
1380:51 - could extract okay
1380:53 - otherwise uh
1380:55 - what we're doing in here we're saying
1380:57 - existing note notes so the logic
1380:59 - is going to stay the same the rest so if
1381:01 - we could extract the node from the
1381:03 - passing widget or the color widget then
1381:05 - we set that as our node set the text and
1381:08 - then just return the widget note
1381:09 - otherwise we continue exactly as we did
1381:12 - before okay
1381:14 - so let's see in here what we're also
1381:16 - doing existing note we're just returning
1381:18 - in but i can also see that upon doing a
1381:21 - creates note in here we're not setting
1381:24 - that note so what we need to do in here
1381:26 - let's just say final new note
1381:29 - okay
1381:31 - and and then we store that note we say
1381:34 - note is
1381:35 - new note
1381:37 - and then we just say return you know so
1381:39 - in here we're also saving our notes okay
1381:43 - so that's really good so we actually
1381:45 - working with an existing notes all right
1381:49 - okay
1381:50 - so i'm actually not sure how this has
1381:53 - worked before this may have been a bug
1381:55 - in the previous um sections in that we
1381:57 - didn't actually store the node in this
1381:59 - node private variable
1382:01 - so
1382:02 - maybe we had that bug from before i
1382:04 - can't be completely sure about that so
1382:06 - i'm just gonna press back in here but if
1382:09 - you had that bug as well if you were
1382:10 - like returning just on a weight of node
1382:12 - service create node and you weren't
1382:14 - saving that i'm not sure how these
1382:17 - um
1382:18 - these functions were actually working
1382:20 - because i personally
1382:22 - oh i can see that we were setting it in
1382:24 - here so we may not have to do that
1382:26 - anymore so let's then go ahead and i
1382:29 - mean this was quite smart but it wasn't
1382:30 - that good idea that the widget's build
1382:34 - function was changing like
1382:37 - a core part of this widget so let's
1382:39 - remove that now okay
1382:42 - how it was working so that's the reason
1382:44 - it was working but it shouldn't work
1382:46 - like that all right
1382:49 - okay let's move to the next section now
1382:52 - um
1382:53 - you see if we go back to
1382:56 - this part in here if i press the delete
1382:59 - button
1383:00 - do you remember this we developed this
1383:02 - in one of the previous chapters of this
1383:04 - course we made sure that we have a
1383:06 - callback and that callback was defined
1383:08 - let's go in our
1383:10 - notes list view i'm actually going to do
1383:12 - it like this notes list view
1383:15 - do you remember this callback it's
1383:17 - called delete note callback
1383:19 - it was just a function that returned
1383:21 - nothing and accepted the notes and this
1383:23 - way we could tell the notes view that
1383:25 - hey
1383:27 - the user wants to delete a note do it
1383:30 - delete that now
1383:31 - and that was being called upon the user
1383:33 - pressing the yes button remember it's
1383:35 - this
1383:36 - view that is actually showing the delete
1383:38 - dialog all right
1383:39 - but if you look at that
1383:42 - but if you look at this delete node
1383:44 - callback
1383:45 - what is it actually a call backup is a
1383:47 - callback of a note all right so it has
1383:49 - nothing really to do with delete it's
1383:52 - just called delete node callback all
1383:53 - right
1383:55 - can we utilize this also to
1383:58 - tell
1384:00 - somehow when the any of these notes is
1384:02 - tapped can we utilize the exact same
1384:04 - function to tell the notes list view
1384:07 - sorry to tell the notes view that hey
1384:11 - you the user tapped on a note well of
1384:13 - course we could do that because
1384:15 - it has no return value and it just
1384:16 - accepts a note so we have a little
1384:18 - problem with the naming of this right
1384:20 - now it's just called delete note call
1384:22 - back but it shouldn't be all right so
1384:23 - we're going to utilize that both for
1384:25 - delete and also for tapping
1384:27 - on an existing node so
1384:29 - let me bring up the caption let's rename
1384:31 - that delete node callback to just node
1384:33 - callback so i'm going to right click on
1384:35 - it i'm just going to say rename
1384:38 - rename symbol and let's just call it
1384:40 - node callback okay and now you can see
1384:42 - it's actually renamed it here for me as
1384:44 - well
1384:46 - and everything should be working the way
1384:48 - it was before so we don't have to do
1384:50 - anything special it's just called node
1384:51 - callback now all right
1384:56 - okay
1384:58 - let's move on to the next section now
1384:59 - which is very related so what we need to
1385:02 - do now is you see at the moment the
1385:04 - nodes list view it's not handling at all
1385:09 - the user tapping on any of these list
1385:11 - tiles and we're going to fix that so i'm
1385:13 - just going to go to my notes
1385:15 - and make sure that i have all the
1385:17 - information here
1385:21 - so what we need now is just to make sure
1385:23 - that the user can tap um
1385:26 - on those uh on the on tap all right
1385:29 - so sorry that the user can tap on these
1385:31 - list tiles and then um we're then going
1385:34 - to call a function just like the node
1385:37 - callback and tell our owner
1385:39 - widget that hey the user tapped on one
1385:41 - of these just do whatever you want so
1385:43 - let's go ahead and add a field here and
1385:45 - say on tap sorry note callback
1385:48 - and we'll just call it ontap
1385:51 - the constructor is not happy now saying
1385:53 - that yeah you have a final field that
1385:54 - you haven't initialized so let's just
1385:55 - add that here right after undelete and
1385:58 - i'm just going to make this required
1386:00 - parameter and a comma at the end just to
1386:03 - make sure that you get the formatting
1386:04 - right as well
1386:06 - we're not using on tap right now and if
1386:08 - you've noticed we've also broken the
1386:10 - notes here that's okay we'll get there
1386:12 - we'll fix that soon the reason we've
1386:14 - broken note2 is because we're not
1386:15 - passing on tap since it's a required
1386:17 - parameter okay we're gonna fix this
1386:20 - luckily in order to handle tabs on a
1386:23 - list tile we don't have to work with
1386:25 - gesture recognition or anything like
1386:26 - that but what we could do is just to say
1386:29 - untapped you see it's already there so
1386:31 - there is a function that has no
1386:33 - parameters
1386:36 - and what we need to do in here just to
1386:38 - call our own ontap in here and you can
1386:40 - see we have to pass a database node and
1386:42 - luckily we already have i believe a note
1386:45 - right here
1386:46 - okay so we're just gonna say untap and
1386:48 - note that's it
1386:52 - okay um so we're doing that now
1386:56 - now what we need to do is to go back to
1386:59 - our
1387:00 - notes view and handle that case you see
1387:03 - so i'm going to go back to our note 2
1387:04 - and and scroll to the part where we're
1387:06 - getting an error and we have on delete
1387:09 - um
1387:11 - but we don't have the on tap so
1387:14 - i'm going to go to my notes as well all
1387:16 - right
1387:18 - now in here right after on delete note
1387:20 - let's go and
1387:21 - add this untapped functionality in here
1387:24 - and you can see visuals helping me and
1387:25 - saying oh this function actually accepts
1387:27 - a node so if i move my mouse over it it
1387:30 - already tells me it's a database node
1387:33 - and remember that's just what the nodes
1387:34 - list view is giving us all right
1387:37 - and then here let's make this function
1387:39 - an asynchronous function the reason for
1387:41 - that is because we're going to actually
1387:44 - grab our
1387:45 - um
1387:46 - let me actually see if we have to make
1387:47 - it asynchronous i don't think it needs
1387:49 - to be async first let's just not make it
1387:50 - asynchronous i had it as asynchronous in
1387:52 - my notes and i thought that we have to
1387:54 - do that but
1387:55 - maybe there is a reason behind it i
1387:56 - don't know yet but uh let's just go
1387:58 - ahead and not add asynchronous at the
1387:59 - moment
1388:01 - so what we need to do in this case is
1388:03 - also do something very similar to what
1388:05 - we're doing in here navigator of blah
1388:07 - blah push no not that one sorry this one
1388:10 - navigator of context push name create or
1388:12 - update note route so it may actually
1388:15 - make sense to copy that code and let's
1388:18 - go to
1388:19 - in on tab and paste that i'm going to
1388:21 - put a comma here so it breaks it down
1388:24 - for me
1388:25 - and in here what we're going to do is
1388:26 - just to say arguments and we're going to
1388:28 - pass the notes there
1388:30 - okay
1388:31 - so
1388:32 - we're just saying that here's a note and
1388:34 - go to that screen and pass that argument
1388:36 - to it then when we go to
1388:38 - the um
1388:40 - create update note view
1388:42 - this function gets called create or get
1388:44 - existing node
1388:46 - which in turn
1388:47 - tries to grab that argument of type
1388:49 - database node from our context using our
1388:51 - get argument
1388:53 - generic function which then goes to the
1388:55 - modal route of that context and then
1388:57 - grabs that argument so it's like three
1388:59 - layers of extraction but that's that's
1389:01 - quite fine now at least you have a
1389:03 - generic function to grab your arguments
1389:04 - okay so i'm going to press command s
1389:07 - it might be good to do a hot reload
1389:10 - sorry hot restart
1389:11 - just because we've done quite a bit of
1389:14 - changing so i'm going to delete these
1389:15 - two nodes like that and then i'm gonna
1389:18 - press the plus button let's just in here
1389:22 - i'm gonna say my note
1389:24 - number one
1389:26 - i'm gonna go back and then i'm gonna
1389:28 - press press and i'm just gonna say my
1389:30 - note
1389:31 - number two
1389:33 - now i have my note number one and two in
1389:35 - here then i'm now gonna test that to see
1389:37 - that we can actually go and edit an
1389:39 - existing note all right so i'm gonna go
1389:41 - to my note number one and tap on it and
1389:43 - now i can see i actually went to
1389:45 - our notes and it says it still says new
1389:48 - notes
1389:50 - and maybe that's okay we could just
1389:52 - leave it like that we could update the
1389:53 - text maybe later that's that's fine
1389:56 - but at least i can see the text so i'm
1389:57 - now going to change actually this my new
1389:59 - note sorry my note 1 to my note 3 and go
1390:02 - back and i can see now i have my note 2
1390:04 - and 3. so this is a really good sign
1390:06 - because that means that updating an
1390:09 - existing note is actually working and
1390:10 - we're not creating a new note because
1390:13 - otherwise that note would have appeared
1390:14 - in this list so i'm going to go to this
1390:16 - new note 3 and then change it to
1390:18 - one as well so now you see it gets
1390:21 - updated all right
1390:23 - perfect we got updating working and it
1390:26 - was quite a breeze to be honest with you
1390:28 - if you ask me so
1390:29 - well done um
1390:32 - what we need now is to make sure we
1390:33 - don't lose our code so let's go as we
1390:36 - usually do at the end of every chapter
1390:38 - and we're gonna go commit and tag our
1390:41 - code okay i'm gonna change the screen
1390:43 - layout and i'm then going to
1390:46 - increase the size of the screen so you
1390:49 - see what i'm doing a little bit better
1390:52 - let's go to our terminal and if you look
1390:54 - at oops
1390:56 - if you look at
1390:58 - um i think it's was it command k yeah
1391:03 - let's look at our git log and you see
1391:04 - the last uh commit that we did was step
1391:07 - 16 and also your tags the last tag was
1391:10 - also step 16 okay let's go and commit
1391:12 - now
1391:13 - as
1391:14 - maybe before that let's have a look at
1391:16 - status
1391:17 - and a bit has changed modified modified
1391:19 - deleted
1391:21 - it thinks that this file was deleted
1391:23 - though it really wasn't
1391:25 - um it was just renamed so
1391:28 - um
1391:30 - that's unfortunate that it marked it as
1391:31 - deleted that's okay though but a little
1391:34 - bit unfortunate there there are ways of
1391:36 - doing that so that git actually
1391:38 - understands that you rename the file but
1391:40 - i can see that visual studio code wasn't
1391:42 - able to actually mark that as rename and
1391:44 - it also it just marked it basically was
1391:46 - marked as deleted
1391:48 - but that's okay we can live with that so
1391:49 - let's just say git add all and let's
1391:52 - just say then git commit
1391:55 - step 17
1391:56 - all right
1391:57 - and then we just say git push so we push
1391:59 - all our changes and let's do a git
1392:01 - status to make sure we didn't leave any
1392:03 - files behind and we haven't
1392:05 - so in here we're then going to say get
1392:07 - tag step 17 as well and push our tags
1392:10 - okay
1392:12 - so
1392:13 - that part is now done we've
1392:16 - done our
1392:17 - updating of
1392:19 - existing notes and that's fantastic so
1392:22 - as is tradition for every chapter in
1392:24 - this course we always talk about what we
1392:26 - when we need to work on in the coming
1392:29 - chapter
1392:30 - so
1392:31 - we have a little bit of a problem in our
1392:33 - source code at the moment and that is
1392:35 - inside our node service so i'm going to
1392:37 - get rid of this bottom bar here and go
1392:39 - to node service
1392:41 - and you can see in our node service
1392:42 - we're exposing a functionality here
1392:45 - called gets all nodes actually i don't
1392:47 - think we're using this get all notes
1392:49 - we're just using
1392:51 - all notes stream
1392:53 - and um
1392:54 - let's see where that is here all notes
1392:56 - stream and that is just reading the
1392:58 - notes stream controllers stream
1393:00 - and
1393:01 - and uh
1393:03 - that is coming from here you can see
1393:04 - from our notes
1393:06 - and that notes is
1393:09 - being populated inside let's see
1393:13 - get all nodes remove we have here
1393:17 - so you see we are at the moment reading
1393:20 - all notes and we're just exposing them
1393:23 - to the outside world but wait a minute
1393:26 - our application has the concept of users
1393:28 - so
1393:30 - so if we if we now log out of the
1393:33 - application and log back in with another
1393:35 - user then
1393:37 - that new user is going to see my notes
1393:40 - because there is nowhere inside this
1393:43 - node service that we have a concept of a
1393:45 - user like we're not actually filtering
1393:48 - these things out and exposing only
1393:50 - relevant data to the user okay so
1393:52 - we need to fix that it's very serious uh
1393:55 - it's not a bug it's actually something
1393:56 - that i've intentionally left until this
1393:58 - point because yeah we didn't have to
1393:59 - handle that it was just more fun to work
1394:01 - with the ui of the application but we
1394:03 - have to be very conscious about these
1394:05 - little things that we haven't
1394:06 - implemented and that's exactly what
1394:08 - we're gonna do and fix in the next
1394:10 - chapter so
1394:11 - i'll see you there
1394:12 - hello everyone and welcome to chapter 35
1394:15 - of the swati course
1394:16 - in the previous chapter as you saw we
1394:18 - started talking about how we can update
1394:20 - an existing node in the node list and we
1394:23 - refactored our new node view as it was
1394:26 - called before to become i believe create
1394:29 - update node view and this node view is
1394:31 - now able to
1394:32 - do two things either create a new node
1394:35 - or update an existing one so we didn't
1394:38 - create a whole new view just to be able
1394:40 - to update an existing node so that went
1394:42 - really fine
1394:44 - and however
1394:45 - as i mentioned
1394:47 - at the end of the previous chapter we
1394:49 - have a little bit of a problem with our
1394:50 - node service in that right now
1394:53 - node service doesn't really take into
1394:56 - consideration which users logged into
1394:58 - the application and hence it cannot
1395:02 - return relevant nodes for that
1395:04 - particular user so what the node service
1395:06 - at the moment is doing is just fetching
1395:07 - all the nodes from the database and
1395:09 - returning it to the current user this is
1395:11 - going to cause an issue in that when we
1395:13 - log in with one user we're going to see
1395:15 - all the nodes in the system and when we
1395:17 - log out with a user and log in with a
1395:19 - completely new user we're again going to
1395:21 - see all the notes that are stored in the
1395:23 - note server so we have to fix that in
1395:24 - this chapter
1395:26 - before we get started with that we have
1395:29 - a little bit of a problem with our
1395:32 - updating
1395:33 - and this is a bug that's been inside the
1395:34 - application for a while since we
1395:36 - basically created our cloud service and
1395:38 - we have to fix that so let's have a look
1395:40 - at what this bug actually is before i
1395:42 - can
1395:43 - before we go on so i'm going to put
1395:45 - scrcpy in here
1395:47 - and i'm going to put visual studio code
1395:49 - in here as well
1395:51 - all right so i hope you can see the
1395:52 - screen so here right now we have um
1395:55 - maybe i don't have to hope for it i
1395:56 - could just bring the screen to be a
1395:58 - little bit bigger so if you look in scr
1396:00 - cpy right now we have two my note number
1396:03 - two and that is exactly the box so let's
1396:05 - go in here and to the first one and i'm
1396:08 - just gonna say my note number one
1396:10 - oops
1396:11 - and go out and everything looks fine
1396:14 - right now it's just because we are
1396:15 - updating our local cache as well so
1396:18 - things are looking good however if you
1396:20 - do a hot restart of the application
1396:24 - and my scr cpy just died so that's okay
1396:27 - i can live with that it's a free
1396:29 - software so as your cpy and and i can
1396:31 - see now i've lost actually my debug
1396:34 - command of scrcpy as well
1396:37 - so i'm gonna restart the application
1396:40 - but what is going to happen now is as
1396:42 - you'll soon see is we have a little bit
1396:45 - of a problem with our updates note
1396:47 - functionality so you can see now that i
1396:49 - now that i restarted the application all
1396:51 - of a sudden both notes were changed to
1396:54 - my notes number one and that's not
1396:56 - that's not correct that's because
1396:57 - there's a bug inside the application so
1396:59 - how it's manifest manifesting itself is
1397:02 - that when you update a note
1397:04 - locally it looks fine but if you do a
1397:06 - hot restart excuse me then it's gonna be
1397:09 - tripping like it is tripping right now
1397:12 - and the bug is right here i don't know
1397:13 - if you can notice that
1397:15 - excuse me
1397:17 - i don't know if you can notice that but
1397:18 - we have this call to
1397:20 - the update function however we are not
1397:23 - actually telling and this is also by the
1397:25 - way this is inside node services dart
1397:28 - inside the update node function
1397:30 - in here you can see we're issuing a
1397:32 - query to sqlite and we're saying update
1397:34 - the nodes table and set the text to this
1397:37 - text all right and that's exactly what
1397:39 - sqlite is doing it's going through all
1397:41 - the rows inside the note table and
1397:44 - updating their text column with the
1397:45 - given text
1397:46 - so what we missed in there is a where
1397:49 - argument so we're not telling sqlite
1397:51 - right now
1397:52 - which row to update so it's updating all
1397:55 - the rows okay
1397:57 - so we need to fix that as a matter of
1398:00 - urgency so let's go in here and say we
1398:02 - have now
1398:03 - let's see this is our update
1398:07 - and right after the creation of this
1398:12 - dictionary we're going to say a were
1398:15 - and we're going to say the id field of
1398:17 - that column that we want to update or
1398:19 - sorry the id field of the row or note
1398:21 - that we want to update is going to be
1398:22 - equal to something and where args
1398:26 - are going to be equal to our nodes id
1398:29 - so i need you to also write this code
1398:31 - the way i've written it here so now if
1398:33 - you say my note number one and i go in
1398:35 - here and i say minor number two then
1398:37 - it's going to do the right thing so if
1398:39 - you do a hot restart then you can see
1398:41 - that the notes are actually populated
1398:42 - correctly okay
1398:45 - i'm not going to do a hot restart just
1398:46 - because i know scr cpy may crash again
1398:48 - and i have to restart the whole process
1398:50 - so
1398:51 - i don't want to waste your time with
1398:52 - that
1398:53 - and that's why i'm not gonna do a hot
1398:55 - restart but this should work okay
1398:59 - sorry again
1399:02 - okay um
1399:03 - now back to what we were working on um
1399:06 - or back to what the main goal of this
1399:09 - chapter is so
1399:10 - let's have a look at how we can fix the
1399:12 - problem with our user server with our
1399:15 - node service if you go here
1399:17 - not being able to return relevant nodes
1399:20 - except it's returning all the nodes so i
1399:22 - believe it's inside node service right
1399:24 - here oh we were there already sorry
1399:26 - about that so we have our node service
1399:28 - and you can see at the moment
1399:30 - when we say
1399:32 - here notes this is happening inside uh
1399:36 - cache all cache notes which is you can
1399:39 - see it's reading all the notes from the
1399:40 - database using get all notes putting it
1399:42 - inside putting it sorry you couldn't see
1399:44 - that cache notes is reading all the
1399:46 - notes and then putting them inside the
1399:48 - local local variable and also populating
1399:51 - the stream controller with that okay
1399:55 - but what we need to do is need is that
1399:57 - we need to make sure that the current
1400:00 - user is saved somewhere inside this note
1400:03 - service so that note service knows that
1400:05 - okay here's the current user whenever i
1400:07 - return all my notes to the call site
1400:10 - using this all nodes functionality in
1400:12 - here
1400:13 - i need to actually filter out the notes
1400:16 - inside that list to make sure only
1400:19 - relevant notes that were created by that
1400:21 - current user are returned from this
1400:24 - stream okay
1400:27 - so
1400:28 - what we need then is to kind of keep
1400:31 - hold of some sort of a current user in
1400:33 - our um
1400:35 - in our service inside this uh node
1400:38 - service so let's go ahead and do that
1400:40 - let's go actually define
1400:42 - our um database user in here
1400:46 - and we say this is optional and it's
1400:48 - equal to user
1400:49 - however we always want to make sure that
1400:52 - that user is set before you actually
1400:54 - grab
1400:55 - a list of notes okay so this is the
1400:58 - expectation of this note server so the
1401:00 - note server says that if you want to be
1401:01 - able to read all the notes
1401:03 - the way you're doing it as clean as
1401:05 - you're doing it you also make sure that
1401:07 - you've set this current user okay
1401:10 - so if that if that expectation is not
1401:13 - met we're going to throw an exception
1401:15 - and we're going to call that exception
1401:17 - user should be set before reading all
1401:19 - nodes as the caption indicates we're
1401:21 - going to go to our crowd exceptions
1401:24 - which we have from before so let's find
1401:27 - that crowd exceptions in the given
1401:29 - folder is sorry yes in the given path
1401:31 - that i've mentioned in the bottom of the
1401:32 - screen lib services cross crowd
1401:34 - exceptions
1401:35 - and we're going to define a new
1401:37 - exception called user should be set
1401:39 - before reading all notes
1401:41 - like this
1401:42 - all right so please go ahead and define
1401:45 - that as one of the exceptions in your
1401:46 - application as well under crowd
1401:48 - exceptions
1401:50 - all right
1401:52 - so
1401:53 - what we need now is a way for us to be
1401:56 - able to filter
1401:58 - all the given nodes based on the current
1402:00 - user
1402:01 - so
1402:03 - let's have a look at our all nodes at
1402:05 - the moment here you see
1402:08 - what we need is to ensure that this all
1402:10 - nodes can actually filter
1402:13 - uh the given nodes inside this stream
1402:18 - and
1402:19 - using some sort of filter functionality
1402:21 - so
1402:22 - what we have you can see a stream here
1402:24 - let's say stream a stream
1402:27 - has a function called where
1402:30 - so
1402:31 - what it does is that as you can see it
1402:32 - has um it it allows you
1402:35 - to grab the current content of that
1402:38 - stream and then you can pass a test on
1402:41 - that so you can say if this object is
1402:44 - equal to this then do that and return
1402:46 - this value otherwise return something
1402:48 - else so it's kind of like a filtering
1402:49 - mechanism on a string on a stream's
1402:51 - value however our stream includes a list
1402:55 - remember let's go back here
1402:58 - in
1402:59 - excuse me in here you can see
1403:02 - we return a stream of a list of database
1403:06 - nodes
1403:07 - so what we want is a where clause that's
1403:09 - two layers deep
1403:11 - we want to be able to
1403:13 - filter out and change the contents of
1403:16 - this stream based on the current user
1403:19 - and we need to then filter the list
1403:21 - based on the current user's id and only
1403:23 - return the database notes that are
1403:25 - relevant for that user so
1403:27 - this is a bit of a special case
1403:29 - so for that we need to create our own
1403:31 - function
1403:32 - which is a
1403:34 - manual like filter function on our
1403:39 - on our stream okay so let's go ahead and
1403:42 - do that so what we need to do in here
1403:46 - and is to create a new file as you can
1403:47 - see under lib extensions list filter so
1403:50 - i'm going to go ahead and do that let's
1403:52 - see if we already have some extensions
1403:56 - so i can see under lib right now we have
1403:58 - constants enum services utilities views
1404:00 - but we don't have any extensions so the
1404:04 - best way then to do that to create that
1404:06 - filter the dart file is just right click
1404:08 - on live and say new file
1404:10 - and then i'm going to say extensions
1404:14 - list
1404:15 - filter.
1404:16 - okay
1404:18 - so then what we're going to do in here
1404:19 - is to create an extension on our
1404:23 - on our stream
1404:25 - so let's go ahead and just say extension
1404:29 - filter
1404:31 - on stream of t
1404:34 - so
1404:35 - the reason i'm doing it like this is
1404:37 - that so we can grab hold of the contents
1404:41 - of that stream inside our extension okay
1404:43 - so
1404:45 - like if you did something like this
1404:48 - that would still work but in here what
1404:51 - we're saying is that we're extending any
1404:53 - stream that has a value of t
1404:56 - and in our filter function then we can
1404:59 - access that t as you'll soon see okay so
1405:02 - then we're going to say
1405:03 - stream
1405:05 - of a list of that object
1405:08 - and we're going to call our function
1405:10 - filter
1405:11 - and in our filter function we want to
1405:14 - grab another function that does a
1405:16 - testing of the items so let's then say
1405:19 - bool
1405:20 - um
1405:22 - function that grabs an item of that type
1405:27 - so you can see now we're basically
1405:29 - broken down the requirements of our
1405:32 - filtering
1405:33 - that is what's supposed to be two levels
1405:35 - deep is now one level leap because our
1405:37 - filter function passes t
1405:40 - which is our database node to this where
1405:44 - function okay
1405:45 - so this doesn't exist at the moment but
1405:46 - we're creating that okay
1405:48 - so in here what we're going to say then
1405:50 - is
1405:51 - what we are going to do is we need to
1405:54 - map our um
1405:56 - stream
1405:57 - and that will you can see it gives us
1405:59 - the values so in here we get the items
1406:02 - and in here then we say items where
1406:06 - we pass that word clause in here
1406:09 - and we say to list like this
1406:13 - so
1406:15 - and i can see in here actually we have a
1406:17 - filter of t but our stream needs to have
1406:19 - a list of t so then that's gonna fix the
1406:22 - problem for us so in this case we're
1406:23 - actually drilling down two levels deep
1406:25 - inside the list okay
1406:27 - so this is the function that we just
1406:29 - created so it allows us to filter a
1406:31 - stream of lists of something and then
1406:34 - our where clause is going to get that
1406:35 - something and should that something pass
1406:38 - the test then it will be included in the
1406:40 - final list so
1406:42 - look i know this is complicated stuff
1406:44 - but please pause the video think a
1406:46 - little bit about it we have a stream
1406:48 - containing a list of things
1406:51 - now we want to stream of the list of the
1406:54 - same thing as long as those things
1406:57 - any individual thing passes a specific
1407:00 - test
1407:01 - which is specified using this work loss
1407:03 - okay
1407:04 - this is difficult i know it may be some
1407:07 - it may be like so difficult for some
1407:09 - users that you'll be like i don't get
1407:10 - any of this i don't understand but
1407:12 - you will just need to practice you need
1407:14 - to just grab a hold of this code go go
1407:17 - ahead and implement this on some other
1407:20 - functionalities like a list of list of
1407:22 - things and see okay if i have a list of
1407:24 - lists of things how do i filter out that
1407:26 - thing inside and it will finally click
1407:29 - okay
1407:30 - i know it's it's a bit complicated so
1407:33 - we've done that now
1407:36 - what we need now um
1407:38 - is to set the current user in the node
1407:40 - service
1407:41 - as you can see right now we have get or
1407:44 - create user functionality in our node
1407:46 - service
1407:47 - so let's go back to our node service and
1407:50 - find that function get or create user
1407:53 - and at the moment it just takes an email
1407:55 - as the caption indicates we need a
1407:57 - parameter inside this function that also
1408:00 - says set as current user so when you get
1408:03 - or create a user
1408:05 - which we're at the moment doing i
1408:06 - believe in our notes view so let's go in
1408:09 - here
1408:11 - notes notes view in here
1408:14 - uh you see get or create a user so this
1408:17 - is like the bare bone this is the actual
1408:20 - very important part of our application
1408:22 - where a user either is retrieved from
1408:24 - the database the way he or she was or
1408:26 - it's created and it just makes sense to
1408:28 - make that user the current user at this
1408:31 - point okay so let's go in our node
1408:33 - service
1408:35 - and let's change that functionality so
1408:39 - i'm going to bring up my notes as well
1408:43 - and let's add a parameter called set as
1408:45 - current user right here going to put a
1408:48 - comma there
1408:49 - and let's just say um that this
1408:52 - parameter is a boolean set as current
1408:54 - user and we're going to set it to true
1408:57 - by default all right so i need to do the
1409:00 - same thing please
1409:02 - so after doing that when we retrieve the
1409:05 - user we're going to look at this
1409:06 - parameter we're going to say if set as
1409:08 - current user set
1409:10 - as current user then we're going to set
1409:12 - our own user to this user that we just
1409:15 - retrieved from the database
1409:17 - and also don't forget when you create
1409:19 - this user
1409:21 - and you also have to set the current
1409:23 - user if that boolean flag is true so
1409:26 - let's just say
1409:27 - set as current user here as well then
1409:29 - we're going to say user is created user
1409:33 - so what we did here is we just said
1409:36 - if we could retrieve that user from the
1409:39 - database we and this boolean parameter
1409:41 - is true then we set our own user to this
1409:44 - user
1409:45 - otherwise if we had to create that user
1409:47 - and this parameter is true then we do
1409:49 - the same thing we set this current user
1409:52 - to the created user and if you're
1409:53 - getting some errors in here saying that
1409:55 - this underscore user cannot be found
1409:56 - it's probably because you missed adding
1409:58 - this
1409:59 - a database user to your node service
1410:01 - which is something i mentioned just
1410:02 - before we moved on to creating that
1410:03 - filter function okay or sorry before we
1410:06 - created this exception
1410:09 - all right that part is now done as well
1410:12 - um
1410:13 - now what we need to do is to do the
1410:15 - actual
1410:16 - filtering and and that is something that
1410:19 - we need to do is uh you can see as a
1410:22 - cache index change all nodes stream to
1410:24 - filter for the current user
1410:27 - and that's something we need to do in
1410:28 - the all nodes
1410:30 - function or sorry the getter
1410:33 - so right here
1410:35 - what we're going to say is i'm actually
1410:37 - i think i'm going to change them
1410:41 - yeah just let's leave it like this so
1410:43 - i'm just going to say no stream
1410:44 - controller
1410:46 - and dot
1410:47 - stream and right here we can use our
1410:50 - filter function you see now visual
1410:51 - studio code is like confused like oh
1410:53 - there is no filter function on a stream
1410:55 - but remember we actually added that
1410:56 - ourselves so i'm going to get help from
1410:58 - visual studio code and say command dot
1411:00 - on mac or control dot on linux and
1411:01 - windows and visual studio code and then
1411:03 - it's gonna understand oh there is a
1411:05 - filter function that you've defined on
1411:08 - stream do you want me to import that and
1411:09 - i'm gonna say yes please
1411:11 - so now we have the
1411:12 - filter remember filter then gets a note
1411:16 - right and if i move my mouse over it now
1411:18 - you can see that says oh you have a
1411:20 - database note however our stream
1411:23 - actually contains a list of database
1411:25 - nodes and all of a sudden our filter
1411:27 - gets one note at a time so this is the
1411:29 - beauty of creating your own extensions
1411:31 - so that you can drill down inside
1411:34 - existing objects and grab what you need
1411:37 - inside your application all right
1411:40 - so in here what we need is to create a
1411:42 - function then you remember this function
1411:44 - has to return a boolean we haven't
1411:46 - returned anything from here yet that's
1411:47 - why we're getting an error
1411:49 - so at the end of this function we need
1411:51 - to return a volume so let's just say
1411:53 - final current user is this user
1411:57 - and if this current user
1411:59 - is not null which is like the condition
1412:01 - that we actually expect then we're going
1412:04 - to do some code
1412:05 - otherwise we need to throw our exception
1412:07 - user
1412:09 - should be said before okay so this is
1412:12 - our expectation from the caller if
1412:14 - you're reading all notes from this
1412:16 - interface you need to make sure that the
1412:19 - current user was set when you call this
1412:21 - function so this needs to be true okay
1412:25 - sorry this yeah you may not have seen
1412:27 - the code but
1412:28 - you could also argue that oh wait a
1412:30 - minute if this is like the expectation
1412:32 - of this interface that the current user
1412:34 - should always be said before you read
1412:36 - all notes
1412:37 - then
1412:39 - why don't you make that the default why
1412:41 - don't you just do that and remove this
1412:44 - function and always set the user as a
1412:45 - default well
1412:46 - the reason behind that is
1412:49 - the current user has to be sent only
1412:51 - when you're working with all nodes now
1412:53 - this node service should be able to work
1412:56 - like to update existing nodes or remove
1412:58 - existing nodes
1413:00 - it in those functionalities should still
1413:03 - work if the current user is not set
1413:05 - right because those functionalities are
1413:07 - pure cross functions that say update a
1413:10 - node with this id get a user with this
1413:12 - id delete a node with this id etc etc
1413:16 - they are not dependent on a current user
1413:18 - however all nodes is dependent on the
1413:21 - current user and it just makes sense to
1413:24 - have this functionality in here that
1413:25 - says set as current user that is
1413:27 - defaulted to true so if you're using all
1413:30 - nodes then it throws an exception if the
1413:32 - current user is not set okay so that's
1413:34 - my reasoning for having this as a
1413:36 - parameter and not making it the default
1413:38 - um
1413:39 - behavior of this class
1413:42 - all right so if current user was not
1413:44 - null that's like the happy path so then
1413:47 - we say we return this note
1413:50 - it's not as long as its um user id
1413:55 - is the same as
1413:57 - the
1413:58 - current user id so we say note
1414:01 - a user id should be equal to current
1414:04 - user
1414:05 - dot id okay and remember we're not
1414:07 - returning a note we're returning a
1414:09 - boolean remember our filter function it
1414:12 - has a where statement that has to return
1414:14 - a boolean so we're not returning any
1414:16 - nodes in here we're just checking is
1414:17 - this node's use ready the same as that
1414:20 - then do this okay
1414:22 - so
1414:23 - that should now be good to go so what we
1414:25 - could do i know this may actually
1414:29 - and break things now because i have some
1414:31 - problems with scr cpy but you have to
1414:34 - excuse me for that it's it's nothing
1414:35 - that i have control over but since we've
1414:37 - changed quite a lot of code uh i'm gonna
1414:40 - now close all these screens at these
1414:43 - tabs and i'm going to do a hot reload
1414:45 - but this most probably is going to crash
1414:47 - the scr cpy
1414:49 - oh it didn't great thank god for that
1414:51 - so we have our notes now how do we put
1414:54 - this into test
1414:56 - what we need to do is to log out and log
1414:58 - in so i'm going to go to console
1414:59 - firebase
1415:01 - and let's go to our application which is
1415:04 - my notes flutter project
1415:06 - we have two authenticated users
1415:09 - these two emails at the moment so right
1415:11 - now i'm logged in with one of them i
1415:13 - don't really know which one so i'm going
1415:15 - to log out here
1415:17 - so i'm then going to log in with
1415:19 - pixeltab gmail.com foobarbas
1415:23 - log in
1415:24 - and i can see those email those um
1415:27 - notes were under pixel tab so then i'm
1415:29 - going to log out again and i'm going to
1415:31 - log in with the other user
1415:34 - like this
1415:35 - toolbarbad and i'm going to then press
1415:37 - the login button and i haven't yet
1415:39 - verified my email so i will have to do
1415:42 - that so let me just see if i can take
1415:44 - care of that right now
1415:47 - i'm going to then bring my email
1415:51 - and go to
1415:53 - and see if i can find this um
1415:56 - verification email and i can't so i'm
1415:58 - just gonna send send email verification
1416:01 - and it's gonna send a new email
1416:02 - verification to me
1416:04 - all right i got the email verification
1416:08 - and it looks like this
1416:10 - so i'm just gonna click on that and i
1416:12 - can see now it says your email has been
1416:14 - verified okay
1416:16 - so
1416:17 - let me go to restart then and now that
1416:20 - i've verified my email i'm going to try
1416:22 - to log in with a user
1416:26 - as
1416:28 - oops this is register i want to go to
1416:29 - login so
1416:32 - here
1416:33 - foo barbats
1416:35 - and then log in
1416:36 - and now i can see for my user i'm not
1416:39 - seeing any notes but just to make sure
1416:41 - i'm just going to create a new user and
1416:42 - say this no sorry create a new node i'm
1416:45 - going to say this node was created
1416:47 - for van dot
1416:49 - or just put my email in here like this
1416:52 - okay
1416:53 - i'm going to go back and i can see that
1416:54 - the note is displayed here
1416:57 - then what i'm going to do is just to
1417:00 - log out of this user
1417:02 - and log in with the other user
1417:05 - just to make sure that that
1417:08 - oh that was created by the other user is
1417:09 - not displayed to this user okay
1417:13 - and now we can log in and i can only see
1417:16 - notes that were for this user so
1417:19 - congratulations that was a lot of work
1417:21 - that we did and that we did and uh the
1417:24 - application seems to be working the way
1417:26 - we've designed it so
1417:28 - that's great job
1417:30 - what we need to do now is just ensure
1417:32 - that we we won't lose our code as is a
1417:35 - tradition and so we need to commit our
1417:38 - code and also tag our code okay
1417:40 - so i'm gonna do some uh
1417:42 - shuffling around here on the screens and
1417:44 - i'm gonna increase the size of visual
1417:46 - studio code so you see it better
1417:48 - let's do git status and see what the
1417:51 - status is we've modified two files and
1417:53 - we've also added a whole new folder so
1417:55 - i'm just gonna say git add all
1417:58 - and if you look at our logs the previous
1418:00 - step was step 17
1418:02 - now we have to commit our work and tag
1418:04 - it as step 18 and if you look at our are
1418:06 - your tags as well you should have step
1418:08 - 17 here
1418:09 - let's say git commit and i'm going to
1418:11 - say step 18.
1418:14 - here i'm gonna push these changes to
1418:16 - remotes which in my case is github you
1418:18 - may be using bitbucket or some other
1418:20 - remote
1418:22 - and less than tag as step 18 as well
1418:25 - here and put your tags
1418:29 - alright so that part is done now we have
1418:32 - tagged and committed or code so if you
1418:34 - say git status you should have nothing
1418:36 - handling here to be committed all right
1418:40 - wow fantastic so
1418:42 - again as tradition is we always talk
1418:44 - about what we need to mention in the
1418:46 - next chapter what we're going to go
1418:47 - through in the next chapter at the end
1418:48 - of every chapter so
1418:50 - up until this point we've been using our
1418:52 - notes crot service and
1418:54 - that's been working really good
1418:55 - everything's been saved on the on the
1418:57 - device
1418:58 - however if you really think about it
1419:01 - you've now learned how to work with
1419:02 - crowd and that was my that was like one
1419:04 - of my intentions at the beginning of
1419:05 - this course i wanted to teach you about
1419:07 - crud because it's one of the absolute
1419:10 - most important things that any back-end
1419:12 - developer or
1419:13 - front-end developer such as flutter
1419:15 - developer has to know about
1419:17 - so i hope that you've learned that now
1419:19 - however we have a big problem here and
1419:21 - that is all our notes are saved locally
1419:23 - in a sql like database and
1419:26 - should anything go wrong for instance if
1419:28 - if the users something happens to the
1419:31 - user's telephone all that data is going
1419:33 - to disappear
1419:34 - so the user's notes may disappear and
1419:36 - you may think well
1419:38 - what's so wrong about that well if
1419:40 - you're like me
1419:42 - i use my notes like my the default notes
1419:44 - application in macintosh and also on
1419:46 - linux quite a lot so i store very very
1419:50 - important information sometimes in my
1419:52 - notes and you'd be surprised that the
1419:54 - outline for this course i actually
1419:56 - managed it all i managed all of that
1419:59 - inside the notes application on my
1420:00 - macintosh so i wrote the entire outline
1420:02 - took many many hours and i would have
1420:05 - been devastated
1420:06 - if those notes disappeared for some
1420:08 - reason or if my kids got a hold of my
1420:10 - telephone and just removed the notes and
1420:12 - there was no reason and then there was
1420:13 - no way for me to grab those notes back
1420:15 - again so
1420:17 - what we need to do now is just ensure
1420:19 - that we can store these nodes in some
1420:21 - sort of a
1420:23 - back end so that it's sitting in the
1420:24 - cloud so we don't have to manage them
1420:26 - locally and that's what we're going to
1420:28 - use firebase for and we're going to
1420:30 - start talking more and more about
1420:32 - firebase storage from
1420:34 - the beginning of next chapter so i hope
1420:36 - you enjoyed this chapter and grab your
1420:38 - refreshments coffee or tea or whatever
1420:40 - you want some chocolates and i'll see
1420:42 - you in the next chapter
1420:44 - hello and welcome to chapter 36 of this
1420:46 - flutter course in previous chapters
1420:49 - we've been working with our quad service
1420:50 - quite a lot and also we've been working
1420:52 - with firebase authentication
1420:54 - so far we've stored the user generated
1420:57 - notes inside the crotch store which
1421:00 - we're backing with a sqlite database and
1421:03 - we've
1421:03 - also made that cloud service kind of um
1421:06 - aware of the currently logged in user so
1421:09 - when
1421:10 - a user logs in he or she can only see
1421:12 - their own notes and when that user logs
1421:14 - out and another user logs and then
1421:17 - the previously created notes in the
1421:19 - database aren't exposed to the new user
1421:22 - so we've taken care of all those but we
1421:25 - still have our notes only stored in a
1421:27 - local storage
1421:29 - and from this chapter on we're going to
1421:30 - be working with actually moving away
1421:33 - from storing the user data in a local
1421:35 - database
1421:36 - and instead going towards storing that
1421:38 - inside firebase
1421:41 - now
1421:42 - when i was designing this course i was
1421:43 - thinking about how i can introduce more
1421:46 - and more concepts to to become a better
1421:48 - software developer and a flutter
1421:49 - developer and one of those absolutely
1421:51 - crucial things was crud create read
1421:54 - update and delete and um though firebase
1421:57 - is a good way of doing that but firebase
1422:00 - removes quite a lot of the logic that
1422:02 - you otherwise need to understand
1422:05 - to become a better developer so firebase
1422:07 - has abstracted away the concept of crowd
1422:09 - quite a lot and that you work with data
1422:11 - in the cloud and you don't really know
1422:13 - how that is being populated and where
1422:14 - that is being populated so
1422:17 - when i started designing the course i
1422:18 - thought maybe okay we could have a look
1422:20 - at storing data locally first to get a
1422:22 - good grip of crud
1422:24 - and then after that we now we understand
1422:27 - how crop works and how those operations
1422:29 - are performed at a low level on a
1422:30 - database level then we can move away
1422:32 - from it and go to a more abstract layer
1422:35 - so this was a choice that i met early on
1422:37 - when designing this course and it is
1422:39 - definitely not like wasted time you now
1422:42 - know how to work with sql light in your
1422:44 - applications and you will probably be
1422:46 - using sqlite more and more as you go on
1422:49 - in your flutter development um
1422:52 - career so
1422:53 - i am i hope that you understand that we
1422:55 - are
1422:56 - we still have good use of uh sqlite and
1422:59 - we've understood that but now it's time
1423:01 - that we move away from our local storage
1423:03 - and move to using um firebase instead
1423:08 - so i want to bring up the caption for
1423:10 - the next section of this chapter and
1423:11 - that's uh that we're going to talk about
1423:13 - cloud firestore so if i bring up my
1423:16 - notes and go to that url that i provided
1423:19 - right right there for you
1423:21 - and bring it up here
1423:23 - and you can see here in in here it says
1423:25 - firestore is a flexible scalable a nosql
1423:27 - cloud database to store and sync data
1423:31 - um
1423:32 - the way the way it works i mean you can
1423:34 - go actually to this link that i've
1423:35 - provided for you here and it tells you
1423:38 - about how you can actually add cloud
1423:39 - firestore to your application but i
1423:41 - believe we've already done that so if i
1423:43 - bring our um
1423:45 - application also to the screen
1423:47 - increase the size and we go to our pop
1423:49 - special
1423:51 - and we'll look at our dependencies we're
1423:52 - at the moment using firebase core
1423:53 - firebase auth and um in here also tells
1423:57 - you you have to use cloud firestore so
1423:59 - let's go in here and we can see we've
1424:01 - already dragged in cloud firestore from
1424:02 - one of the absolute absolute earliest
1424:04 - chapters in
1424:06 - this course we've already
1424:08 - added this dependency to our application
1424:10 - so you don't have to do this but if you
1424:12 - don't have cloud firestore added to your
1424:14 - application you may need to do that now
1424:17 - by following the instructions in this
1424:19 - link and if you've if you don't have it
1424:21 - it's probably because you've missed one
1424:22 - of the early chapters in this um
1424:25 - course
1424:27 - so
1424:29 - we're going to be using the cloud
1424:31 - firestore in order to store user
1424:34 - generated data and in this case our
1424:35 - nodes
1424:36 - now
1424:37 - you may be familiar with sql and nosql
1424:41 - but what
1424:42 - i mean what
1424:44 - i can explain cloud fire stories is that
1424:47 - you will have um
1424:50 - two concepts that you need to understand
1424:52 - um which are called um collections and
1424:55 - the other ones are documents so
1424:58 - whereas in traditional sql storage you
1425:01 - will have hard dependencies and every uh
1425:04 - table for instance when we design our
1425:06 - sqlite database we actually have to
1425:08 - design our tables with specific
1425:10 - layouts inside the table
1425:13 - so we have different fields we have
1425:14 - foreign keys etc so that's like a
1425:16 - typical sql relation relational database
1425:20 - but when you go to node sql for instance
1425:21 - firestore then things are more document
1425:24 - based so for those of you who are doing
1425:26 - backend development you already know
1425:27 - about that for instance so
1425:29 - um
1425:30 - if you're using sequel light then things
1425:32 - aren't document based as you would think
1425:35 - um
1425:36 - but when we go to firestore then you
1425:38 - will have like a lot more looser data
1425:41 - definition for your tables and for your
1425:44 - documents basically so one document
1425:46 - inside the same collection can contain
1425:48 - two fields and the next document can
1425:50 - contain three fields so
1425:52 - that's a lot more open
1425:54 - the way it is created with firestar
1425:57 - so for the entirety of this course from
1425:59 - this point on we're going to be
1426:00 - dependent on firestore in order to use
1426:03 - it to store user generated content which
1426:06 - are notes in our case
1426:08 - so let's now talk a little bit about
1426:11 - production versus test mode um firebase
1426:14 - as use firestore as you'll soon see it
1426:16 - has um different
1426:18 - ways
1426:19 - of allowing you as a developer to
1426:23 - interact with your database so
1426:26 - and there is a thing called a test mode
1426:27 - and another caller production mode and
1426:30 - in test mode and what it means is that
1426:32 - as you're developing your application
1426:34 - which we are for instance at the moment
1426:36 - then you may need to for instance open
1426:38 - up your database
1426:40 - um so that you can actually interact
1426:43 - with it with your from your application
1426:44 - without even authenticating a user for
1426:46 - instance so even if a user is not
1426:48 - authenticated you can actually issue
1426:50 - some commands toward firestore in order
1426:53 - to read data delete data
1426:55 - and and change data
1426:57 - so that's that's as you're developing
1426:59 - your application while you're still
1427:01 - working with your authentication but
1427:02 - remember we've already nailed down the
1427:04 - authentication so you cannot actually
1427:06 - end up in the notes view
1427:08 - or the notes list view which is embedded
1427:10 - inside notes view if you forgot about
1427:12 - that
1427:13 - you cannot end up in there if you
1427:15 - haven't authenticated and if you haven't
1427:18 - verified your email address so we know
1427:20 - that in our case we don't actually
1427:22 - really need to use the test mode of our
1427:25 - database with firestore we're kind of
1427:27 - gonna immediately switch to production
1427:29 - mode and what production mode is is for
1427:32 - instance when you develop your firestore
1427:35 - database as you'll soon see in this
1427:37 - chapter as well
1427:38 - um
1427:39 - you will be able to add some more rules
1427:41 - to the database
1427:43 - so that
1427:44 - unauthenticated access to the database
1427:46 - is going to be denied and this is the
1427:48 - kind of like model that we're going to
1427:50 - be using in the rest of the this course
1427:52 - and also almost at the end of this
1427:55 - course we're also going to add some more
1427:57 - rules to
1427:58 - our firebase uh
1428:00 - sorry firestore database so that we make
1428:02 - it even more explicit who has access to
1428:05 - what
1428:07 - just know that there is a test mode and
1428:09 - a production mode test mode is a bit
1428:10 - looser in terms of um
1428:13 - in terms of security but production mode
1428:14 - is a little bit tighter
1428:16 - in that case that it it just tries to
1428:18 - make sure that on authenticated access
1428:21 - to
1428:21 - uh for instance a document so the user
1428:24 - doesn't have access to are going to be
1428:25 - rejected
1428:29 - all right we've i've just noticed that i
1428:31 - just
1428:32 - mentioned a few things about rules and
1428:35 - you may be wondering about what these
1428:37 - rules actually are and what they
1428:38 - actually mean
1428:40 - so i've prepared the link here so i'm
1428:42 - gonna see if i can actually open it on
1428:44 - my computer as well so i can bring it to
1428:46 - the screen
1428:47 - here it is okay
1428:49 - so these are the rules that i was
1428:51 - talking about so you see
1428:53 - if you're for instance a back-end
1428:55 - developer like i am you will also be
1428:58 - very familiar with deploying your
1428:59 - application so if you're for instance
1429:01 - django developer or node.js with express
1429:03 - or whatever or flask developer then you
1429:06 - are probably used to
1429:08 - deploying your application to
1429:11 - some sort of a cloud
1429:12 - service and then
1429:14 - you will also be
1429:17 - responsible for specifying how users can
1429:21 - interact with your backend and what
1429:23 - rules are applied on what cases
1429:26 - uh firebase since it is not like this
1429:29 - traditional backend that you have to
1429:31 - deploy yourself since it is a product
1429:33 - that's already there and it's deployed
1429:36 - it needs your help in order to
1429:37 - understand its security rules so as you
1429:40 - can see this is a typical firebase
1429:42 - firestore configuration of a back-end
1429:44 - and you can see in here it says the
1429:46 - service is the firestore service and
1429:48 - match these documents at these paths and
1429:51 - also
1429:52 - only allow read and write if the user is
1429:56 - authenticated so if you're a django
1429:57 - developer you already know about like
1429:59 - requests you also get that you're in
1430:01 - django so a request user will contain
1430:04 - the currently logged in an authenticated
1430:06 - user there so that this is very similar
1430:08 - to that
1430:10 - and i'm sorry if i'm talking a little
1430:11 - bit about back-end development that's
1430:13 - just because i'm trying to like make
1430:14 - this connection for those of you who are
1430:15 - back-end developers and trying to learn
1430:17 - about firebase firestore
1430:19 - if you're not a back-end developer just
1430:21 - know that
1430:22 - these security rules are there to help
1430:25 - you
1430:28 - they're there to help you secure your
1430:31 - database because you see
1430:33 - the way we've actually generated our
1430:35 - application let's go to the source code
1430:37 - and have a look at it a little bit
1430:38 - and when we set up our uh firebase with
1430:41 - the firebase cli and firestore cli there
1430:44 - were some files that were generated for
1430:46 - us automatically and they were inside
1430:48 - this firebase option so
1430:50 - i'm going to open that for us here
1430:52 - and you can see some information in here
1430:54 - as you can see for android application
1430:56 - there is an api key app id messaging
1430:58 - sender id project id and storage bucket
1431:02 - if anybody gets hold of this information
1431:05 - as you now are going to get hold of this
1431:06 - information by watching this course
1431:09 - you will actually be able to replicate
1431:11 - this firebase options. in your own
1431:13 - application with my api key app id and
1431:16 - sender id and interact with the database
1431:20 - that i'm in control of even though you
1431:22 - personally don't have access to that
1431:24 - database
1431:25 - because that database is stored under my
1431:28 - profile
1431:29 - in
1431:30 - firebase console so
1431:32 - using this api key and app id you can
1431:34 - interact with the database and it is
1431:37 - only the security information it's only
1431:39 - the
1431:39 - um authentication information or the
1431:42 - authentication rules that i specify in
1431:45 - my firebase
1431:46 - config that will then decide who has
1431:48 - access to what
1431:50 - so don't worry also about this i'm going
1431:52 - to delete this firebase project actually
1431:55 - by the time this course is released so
1431:57 - i'm completely happy with this
1431:59 - information being public and shown to
1432:01 - you just so you see what i actually mean
1432:04 - so
1432:05 - just know that with various roles that
1432:07 - we can define on our firebase firestore
1432:10 - project we can specify who has access to
1432:13 - what and based on what rules for
1432:15 - instance if the user is authenticated or
1432:17 - if that user id is actually present in
1432:20 - that document's id field for instance so
1432:23 - something like that
1432:27 - okay um
1432:29 - now what we're gonna do is actually
1432:31 - start creating a um
1432:34 - firestore database for our project so
1432:36 - uh what i'm gonna do in here is i'm
1432:39 - going to bring up safari and i'm gonna
1432:41 - go to console firebase.com so i suggest
1432:43 - that you do the same thing
1432:45 - change the screen layout a little bit
1432:47 - here
1432:49 - so you see my screen better
1432:51 - excuse me
1432:52 - and then i'm gonna go to our minus
1432:55 - flower project so i suggest that you do
1432:57 - the same thing for your application all
1432:59 - right
1433:00 - so when we end up here then on the left
1433:02 - hand side you'll see something called
1433:04 - firestore database and i want you to
1433:05 - click there and just ensure that you've
1433:07 - selected the correct application in here
1433:09 - as well you may have quite a few just
1433:11 - like i do
1433:13 - then what we'll need to do in here and
1433:14 - it's just to say create database okay
1433:19 - and as you can see this is now the
1433:20 - screen that may look a little bit
1433:22 - scary but it's completely fine
1433:26 - and you can see there are two different
1433:28 - modes specified here as we talked about
1433:30 - production mode and then the other one
1433:31 - is test mode
1433:33 - in production mode the rules by
1433:36 - excuse me the rules by default are quite
1433:40 - um bad as you can see in here it says
1433:43 - any document inside the database is
1433:46 - unaccessible so or inaccessible
1433:48 - inaccessible
1433:49 - it says don't allow read or write
1433:52 - because the condition is just false
1433:55 - so and you can see it says all third
1433:58 - party reads and rights will be denied
1433:59 - but this is really not the
1434:02 - um
1434:03 - this is not how we are going to set up
1434:05 - our
1434:06 - firestore database we as i mentioned
1434:09 - before we are going to tighten this up
1434:10 - quite a lot in in the future but not
1434:13 - just right now so i need you go into
1434:16 - start in test mode and you'll get this
1434:18 - absolutely beautiful um
1434:21 - message saying in um the default
1434:23 - security rules for test mode allows
1434:25 - anyone with your database reference to
1434:27 - view and remember database reference i
1434:29 - mentioned that that's inside this
1434:32 - firebase options so that's the reference
1434:34 - that we're talking about okay so it may
1434:36 - sound a little bit abstract but it's
1434:38 - really not that difficult to understand
1434:40 - so
1434:41 - and it says edit and delete all your
1434:43 - database from
1434:45 - all the data in your database for the
1434:47 - next 30 days so okay
1434:50 - and you can see the rule that has been
1434:51 - set up in here says allow read write if
1434:54 - request time is less than blah blah blah
1434:56 - so it's opening up your database
1434:58 - basically for 30 days it's actually
1435:00 - quite intelligent pretty nice okay so i
1435:02 - need you to do that and remember we're
1435:04 - gonna tighten this up soon okay
1435:07 - and then you can see in here it says
1435:09 - allow basically set up a location for
1435:11 - where your data is going to be stored
1435:13 - now there may be some sort of like um
1435:17 - conflict of interest
1435:19 - between like the legal portions of your
1435:21 - business and also where you want to
1435:23 - store your data and where you actually
1435:25 - feel comfortable doing that but and gdpr
1435:29 - definitely makes this even more
1435:30 - complicated if you're living in europe
1435:33 - so
1435:34 - i mean even if you're living abroad gdpr
1435:36 - makes things complicated some websites
1435:38 - that are hosted in the us are still not
1435:40 - accessible by users in the eu
1435:43 - and this makes things a little bit
1435:45 - complicated i'm i'm basically
1435:47 - in
1435:48 - sweden right now so i i prefer to use
1435:50 - maybe a location that is
1435:52 - um
1435:53 - has something to do with europe and uh
1435:56 - i can see europe west while sweden is
1435:59 - kind of like in the middle so i'm just
1436:01 - going to use europe west right now but
1436:04 - again this isn't so so significant right
1436:06 - now it could have
1436:08 - some speed implications for application
1436:10 - depending on where the server actually
1436:12 - is so it's really good that firebase is
1436:14 - giving you the option to choose the
1436:16 - location of your firestore database
1436:18 - so you may want to read more about this
1436:21 - and you can press learn more in order to
1436:24 - read more about this but i'm just going
1436:25 - to pick europe west just because i
1436:27 - believe it it could make more sense for
1436:30 - me since i am located in sweden
1436:33 - so
1436:34 - choose a location that makes sense for
1436:35 - you and then press the enable button
1436:38 - wow that is a an absolutely horrific
1436:42 - looking loading screen
1436:45 - what that is i mean it's not even
1436:46 - centered so that's okay firebase
1436:49 - remember we're using firebase as a free
1436:51 - service so i just want to make sure that
1436:53 - everybody understands i'm very very
1436:55 - thankful for having firebase because
1436:56 - it's made life a lot easier for me
1436:59 - even though i can create my own backends
1437:00 - but i sometimes still prefer to use
1437:02 - firebase so
1437:04 - um just because it's so
1437:07 - it's so easy to use so uh thank you so
1437:10 - much any anybody who's working
1437:12 - on firebase and providing us with free
1437:15 - services
1437:16 - um so
1437:19 - so let's have a look in here um about in
1437:22 - our rules so let me increase the size of
1437:25 - the screen
1437:26 - like this and perhaps also
1437:28 - increase it like this so you see it
1437:31 - better let me see if i can
1437:33 - perhaps
1437:35 - close the section to the left a little
1437:37 - bit and
1437:38 - i probably could actually have done that
1437:39 - so i'm going to go back in here and
1437:41 - press this button to close that section
1437:43 - all right so what we need to do now is
1437:46 - to as the caption indicates we're going
1437:48 - to change the
1437:50 - the security rules in our database
1437:53 - and i change it so that
1437:57 - we allow read and write if the user is
1438:01 - authenticated
1438:03 - um so we make sure you as you can see it
1438:05 - says request off is not null so let's go
1438:09 - ahead and change that so i'm gonna
1438:11 - remove everything after request
1438:14 - dot like this and you can see it gives
1438:17 - you access to off path resource time
1438:19 - method
1438:20 - so i'm just going to say off is not null
1438:22 - okay
1438:24 - so you can actually bring it to the same
1438:26 - line as well if you want to
1438:28 - so after you've done that you can say
1438:30 - allow read write if request auth is not
1438:32 - all and that literally just means that
1438:35 - people who are authenticated with our
1438:38 - application and they have
1438:40 - and they have a valid firebase user when
1438:43 - they interact with the database are
1438:45 - allowed to read and write
1438:47 - read from and write to the database
1438:49 - however remember
1438:51 - this is database wide at the moment it
1438:53 - says any document and we still haven't
1438:56 - talked about documents so much but i'll
1438:57 - tell you soon about that but any just
1438:59 - imagine anything in your database can be
1439:02 - read from and written to if the user is
1439:05 - logged in and that's not so secure
1439:07 - because
1439:08 - that literally means that i as user one
1439:10 - and you as user two have access to each
1439:12 - other's documents okay even if the
1439:15 - application itself is like segregating
1439:17 - these two documents saying that oh
1439:19 - you're user one i'm gonna just give you
1439:21 - user ones documents but internally as a
1439:24 - firebase user
1439:26 - given our current security um
1439:29 - rules
1439:30 - you will have access to my documents
1439:32 - even if the application's limiting your
1439:34 - access just remember that okay
1439:36 - so
1439:37 - after you've done that i need you to
1439:40 - please press the publish button
1439:43 - so as you can see it says publish
1439:44 - changes can take up to a minute to take
1439:46 - effect and that's all right because
1439:48 - we're going to actually take more than a
1439:49 - minute before we jump into using these
1439:53 - new rules in our application so
1439:56 - okay now
1439:58 - let's talk about collections here
1440:01 - um
1440:02 - and i've prepared a doc and a link there
1440:05 - so let me see if i can find that
1440:08 - link here as well
1440:10 - so as you can see in here there is a
1440:12 - good documentation that will talk a
1440:14 - little bit about collections and
1440:16 - documents and you could go through this
1440:18 - um but i'm not gonna do that right now
1440:20 - but just so you know here's the link at
1440:22 - the bottom of the screen if you want to
1440:24 - do that
1440:25 - i'm going to talk about collections
1440:28 - personally so you will understand it in
1440:30 - my words so
1440:31 - at this point what we need is just to go
1440:34 - to our firebase database
1440:36 - okay and what you'll see is a screen
1440:39 - that kind of looks like this so it has
1440:42 - your project name in here and then there
1440:44 - is a button called start collection okay
1440:47 - just imagine collection as its name
1440:48 - indicates is a group of related objects
1440:52 - objects could be you could interpret
1440:54 - them as tables as you traditionally have
1440:56 - in your
1440:57 - relational databases such as sqlite um
1441:01 - so
1441:02 - a collection just imagine for instance
1441:04 - if we say what does our application do
1441:06 - our application stores nodes for
1441:10 - all its users so user a has nodes user b
1441:13 - has nodes but user c may not have nodes
1441:15 - so the only thing our application is
1441:17 - storing in
1441:18 - in database right now is notes so that
1441:22 - could be its own collection okay so we
1441:25 - just create a collection called notes
1441:27 - and in that collection we're gonna store
1441:29 - all our notes okay so
1441:32 - every user is going to have their own
1441:33 - notes
1441:35 - that's how we are going to do it in this
1441:37 - course
1441:38 - however you as a developer may just
1441:40 - think
1441:41 - i'm going to do it differently what i'm
1441:43 - going to do is i'm going to create a new
1441:45 - collection of notes for every user so
1441:48 - user a is going to have a collection
1441:50 - called user a notes
1441:51 - user b is going to have user b notes
1441:54 - or you may just
1441:56 - assign create a collection with every
1441:58 - user id so you remember we get a user
1442:01 - identifier from firebase you may decide
1442:04 - to you create a collection for every
1442:06 - user based on their user id okay that's
1442:08 - fine but if you're following along with
1442:10 - this course i strongly suggest actually
1442:12 - do it the way i'm doing especially if
1442:13 - you if you if it's the first time you're
1442:16 - doing this if it's if you've done this
1442:18 - before you may just be comfortable with
1442:20 - creating
1442:21 - another type of collection then be my
1442:23 - guest please go ahead but it might then
1442:25 - be difficult for you later on to follow
1442:27 - along with the course
1442:30 - okay so
1442:32 - those are collections
1442:34 - so let's go ahead and um
1442:37 - tap the start collection button in here
1442:40 - um as you can see in here it says okay
1442:44 - this collection is being created in the
1442:45 - root path and just give me an id and
1442:48 - here's a collection set of documents
1442:50 - that contain data
1442:52 - and in here it's storing a collection of
1442:53 - users
1442:54 - but remember we don't have to actually
1442:56 - store users in our database firebase is
1442:58 - already taking care of this i actually
1443:00 - believe this is a bad example that they
1443:02 - provided to ask people to say example
1443:04 - collection of users because this kind of
1443:06 - gives id idea to developers oh now i
1443:08 - have to store my users here but those
1443:11 - users are already stored at the firebase
1443:14 - level okay
1443:16 - so let's go and go ahead in here and
1443:18 - just say we're storing nodes okay and
1443:20 - we're just gonna say next
1443:23 - and you can see in here now we're
1443:25 - getting something called a document
1443:27 - parent path
1443:28 - notes and then it says a document id a
1443:30 - collection must contain at least one
1443:32 - document cloud firestore's unit of
1443:33 - storage documents store your data as
1443:36 - fields auto generate a document or the
1443:39 - id or customize one if needed okay
1443:42 - so
1443:44 - that that brings us to what documents
1443:46 - are
1443:47 - um
1443:48 - a document
1443:50 - you could look at it as
1443:52 - if you're if you know about uh
1443:55 - sql from before if you followed along
1443:57 - with what being and what we've been
1443:59 - creating like when we looked at db
1444:02 - browser for sql lite
1444:04 - then we had these tables like user and
1444:06 - notes
1444:08 - these uh
1444:10 - these are like the schemas of a document
1444:13 - so as you can see here and here says
1444:15 - every note
1444:17 - is created this way it has an id it has
1444:19 - a user id it has a text is synced with
1444:21 - cloud remember all those fields and it
1444:23 - has that's the schema
1444:25 - in far in the firestore world those are
1444:28 - documents so that entire notes
1444:31 - schema is one document and every field
1444:34 - in it then it can have a data type so
1444:36 - those fields you may know them as
1444:37 - columns
1444:38 - from before
1444:40 - when we created our own tables okay so
1444:42 - if we go back into db browser
1444:44 - you may not have this db browser for sql
1444:47 - light open and that's completely fine
1444:48 - we're not gonna actually work with it
1444:50 - right now you may have you may even have
1444:52 - like is toss that database in the trash
1444:55 - and that's completely fine i just want
1444:57 - to show you this um
1444:58 - that when we created this node table or
1445:01 - the node documents then we had different
1445:04 - fields remember id user id text and
1445:06 - those were the exact same things in here
1445:09 - okay
1445:11 - so if i if i go ahead and create a new
1445:14 - console firebase
1445:16 - and have a look at for instance my
1445:19 - other uh firebase projects i can see i
1445:22 - have a notes app and you can here see
1445:25 - that um the way i had designed this uh
1445:28 - in the beginning of this course is i had
1445:30 - a collection and then every collection
1445:32 - had documents in it that had text and
1445:34 - then user id okay so that's what we're
1445:37 - gonna do in here we're just gonna say a
1445:38 - field of text
1445:40 - and it's typed string and it has no
1445:42 - value okay and then we're gonna add a
1445:45 - new field in here and just call it use
1445:46 - righty
1445:48 - okay and then in here it has no value
1445:51 - either and then a document id that we're
1445:53 - just gonna auto generate okay so we just
1445:56 - pretty much just created a new note okay
1446:00 - with a random document id and it has a
1446:03 - field of text and another field called
1446:05 - user id
1446:07 - great then i need you to press the save
1446:09 - button and now you'll see here we have
1446:11 - our notes collection and inside there we
1446:13 - have a document that has these two
1446:16 - fields okay
1446:18 - so what you could do also is to delete
1446:20 - either a collection or delete a a
1446:23 - document so i'm just going to say delete
1446:25 - document and start delete and as you can
1446:28 - see now we have an empty collection
1446:30 - called nodes
1446:32 - i still find this a little bit peculiar
1446:34 - that when we create a collection
1446:36 - firebase
1446:38 - forces us to create a document inside it
1446:40 - like if i go and say start collection
1446:42 - and then press the next button in here i
1446:44 - can't actually save my empty collection
1446:47 - and it says every
1446:49 - let's see here a collection must contain
1446:51 - at least one document
1446:53 - so
1446:54 - i'm not sure if that's actually true
1446:56 - because you can see now we have a
1446:57 - collection with no document so
1447:00 - i'm not sure why that was created why
1447:01 - that uh
1447:03 - rule was set when you create a new
1447:05 - collection but just know that it's not
1447:06 - completely true so you can have a
1447:08 - collection with no documents all right
1447:12 - so now let's talk a little about
1447:15 - streams of data if you remember from our
1447:18 - application in if we go to our
1447:22 - i think it's called uh
1447:25 - node service
1447:26 - here
1447:28 - you remember that we have this stream of
1447:31 - database nodes as a stream of list of
1447:33 - database nodes and we call it all nodes
1447:37 - in our application up to this point
1447:39 - we've had to manage these streams
1447:41 - manually in that we have to like go
1447:43 - create a stream controller do this whole
1447:46 - dance of um
1447:48 - unlisten populate the stream controller
1447:50 - with the nodes
1447:52 - you'd be really really happy perhaps to
1447:54 - hear that when we go to firebase and
1447:57 - firestore we don't have to do any of
1447:59 - this because firestore
1448:02 - already has all of this built in in that
1448:05 - when you for instance read all the
1448:07 - documents inside this notes collection
1448:10 - that will actually be a stream of those
1448:13 - uh
1448:14 - data points for you so
1448:16 - no more
1448:18 - stream controller and no more streams
1448:20 - that you have to manage manually okay
1448:22 - those will be exposed to your
1448:24 - application using firestore
1448:28 - so
1448:30 - so as you saw and when i created this
1448:32 - collection to begin with i created it
1448:34 - with
1448:35 - a note document that had a text and it
1448:39 - had a user id field so
1448:41 - our goal in this chapter and going
1448:43 - forward is to make sure that every node
1448:45 - has a text and it is actually linked to
1448:47 - a firebase user using that user's user
1448:50 - id okay
1448:52 - so
1448:53 - if we go to our
1448:55 - application to our auth service so let's
1448:58 - go to off and then auth service in here
1449:00 - and remember we're using firebase auth
1449:02 - provider so let's go in there and you
1449:05 - can see that
1449:06 - when we say create user with email and
1449:08 - password for instance then this function
1449:11 - returned something called user
1449:13 - credential to us and user credential
1449:15 - actually has quite a few properties you
1449:17 - can see it has a credential and it has a
1449:19 - user inside it of type user so if you go
1449:22 - into that user you can see it has
1449:23 - different properties like display name
1449:25 - email email verified metadata phone
1449:28 - number etc but this user also has
1449:31 - something called a user's unique id
1449:33 - which we actually need in order to store
1449:38 - notes into our collect notes collection
1449:41 - so
1449:42 - and this is what i mean every document
1449:44 - that we create is for instance going to
1449:46 - be node some
1449:47 - random id or something which we haven't
1449:49 - decided yet and one of the fields let me
1449:51 - actually see if i can resize uh this
1449:53 - safari window so you see it better so
1449:56 - it's going to have a text and the text
1449:57 - is going to be generated by the user but
1449:59 - it's going to also have a field called
1450:00 - user id okay so in this user id field we
1450:03 - actually need to store that user's
1450:06 - gener
1450:07 - firebase generated id in there okay
1450:09 - and
1450:10 - now going back to
1450:12 - what we are doing with that user do you
1450:14 - remember we're not actually um exposing
1450:18 - the firebase user to our application and
1450:20 - that's a great level of abstraction
1450:22 - however we have a little bit of a
1450:24 - problem in that right now our user has
1450:26 - email and is email verified it doesn't
1450:29 - actually have a unique id so our
1450:32 - application is not going to be able to
1450:34 - associate new notes with
1450:37 - an auth user
1450:39 - it's not going to be able to associate a
1450:41 - new note with a user id okay
1450:44 - so we need to fix that so i'm just going
1450:46 - to go to my notes a little bit in here
1450:48 - and what we need is to
1450:51 - update our auth user as you can see in
1450:54 - here so in
1450:56 - auth user.dart file as i've opened in
1450:58 - here
1450:59 - and what we need is to add a new field
1451:01 - which is a required field and we need to
1451:04 - make that
1451:06 - the
1451:06 - id of that user okay
1451:10 - so let's go ahead and do that now so i'm
1451:13 - just going to go ahead and say final
1451:14 - string
1451:16 - and id so this field is not optional
1451:20 - here you see every user that comes into
1451:23 - our application should have an id and
1451:25 - that's like the expectation that we have
1451:27 - on our off users okay so i need you to
1451:30 - go ahead and add that please here of
1451:32 - user class as well
1451:34 - let's then go in here and i'm going to
1451:36 - add this um to um
1451:40 - the required fields i can see visual
1451:42 - studio code wasn't able to actually meet
1451:43 - this required parameter
1451:46 - i'm going to help visual studio code and
1451:47 - do that i'm just going to say required
1451:49 - this id and i need you to do the same
1451:51 - thing please
1451:53 - so now we have a problem in here in that
1451:55 - our auth user in here doesn't have an
1451:59 - id where we created from firebase user
1452:02 - let's go and remedy that let's just say
1452:04 - the id in here is the user uid remember
1452:08 - this uh parameter that i uh talked to
1452:11 - you about okay
1452:13 - so that is now created and let me
1452:15 - actually go to scrcpy i can see that
1452:18 - visual studio code has a little bit of
1452:19 - problem hot reloading right now so
1452:21 - that's because probably the application
1452:23 - wasn't in the foreground so that's fixed
1452:25 - now
1452:26 - talking about scr cpy it's perhaps a
1452:28 - good idea for me to bring in crcpy here
1452:31 - just to make sure that we're not
1452:32 - bringing and breaking anything okay
1452:36 - so
1452:37 - so that's one change that we have to
1452:39 - make to our auto user the other change
1452:41 - that we have to make is to make sure
1452:42 - that the email parameter of our user is
1452:45 - not optional
1452:46 - you see the way we are creating at the
1452:48 - moment are
1452:49 - um
1452:50 - our application is that we've created
1452:53 - the login process of a use email and
1452:56 - password authentication so we don't have
1452:58 - like facebook authentication or google
1453:00 - authentication we only have username and
1453:01 - password
1453:03 - sorry email and password so
1453:05 - given that condition we can be sure that
1453:08 - every authenticated user in our
1453:10 - application actually has an email
1453:11 - address okay
1453:13 - so
1453:14 - let's go ahead and just say that email
1453:17 - is not an optional field anymore and in
1453:20 - here we're going to explicitly unwrap
1453:22 - that email all right so that's another
1453:24 - change that we made to our application
1453:28 - so now that we've done that you can see
1453:32 - flutter is not so happy with those
1453:34 - changes saying that well yeah you broke
1453:36 - something and it's our tests that have
1453:39 - been broken
1453:41 - so as you can see uh we need to make
1453:43 - sure that id is actually included in our
1453:45 - tests as well
1453:47 - and since we're not actually creating a
1453:50 - specific test for that user id
1453:52 - we can just add a random id in here
1453:55 - let's just say my id okay and i'm going
1453:57 - to bring that and
1454:00 - bring it down here as well so we have an
1454:02 - id field in both cases of auth user
1454:05 - inside our tests
1454:09 - okay now
1454:10 - we have another problem as you can see
1454:12 - in the captions in our create update
1454:14 - note view
1454:15 - we are unwrapping the user's email and
1454:17 - that's what this little orange views um
1454:20 - folder is it's not red
1454:23 - meaning that
1454:25 - well yeah it's not an error but it's a
1454:27 - warning so let's go to this create
1454:29 - update note view
1454:31 - and have a look at this uh
1454:33 - field in here as you can see we're in
1454:35 - inside the get a create or get existing
1454:38 - note
1454:40 - and we are unwrapping this email but
1454:42 - right now the warning is saying what is
1454:44 - it saying the uh uh
1454:46 - asterisk will have no effect because the
1454:48 - receiver can't be not try removing the
1454:50 - asterisk operator and i need you to do
1454:52 - that please
1454:54 - we have another problem also we have
1454:56 - another warning inside the notes of you
1454:58 - and i believe we're doing something
1454:59 - similar in the notes view so let's see
1455:01 - if you can find a warning
1455:04 - [Music]
1455:05 - where is the warning
1455:08 - i actually don't oh here we have the
1455:10 - user email in here as well so i'm just
1455:12 - going to remove the asterisk after that
1455:15 - so i need you to do the same thing
1455:17 - please
1455:20 - okay
1455:21 - now we're gonna get to the juicy parts
1455:23 - of the uh cloud storage integration so
1455:26 - i'm clean i'm basically removing all the
1455:28 - file all the dart um tabs from here i'm
1455:31 - actually not deleting the files i'm
1455:32 - removing like that tab so it's a clean
1455:34 - slate
1455:36 - then what we need is to um
1455:39 - create
1455:40 - all our cloud storage exceptions you see
1455:43 - if you remember from when we worked with
1455:44 - our quad service which is a node service
1455:48 - then we also had a file under the croth
1455:51 - folder called crowd exceptions and in
1455:53 - here we define all the different things
1455:55 - that could go wrong when the user is
1455:57 - working with our node service now that
1456:00 - we're moving away from crud we need to
1456:03 - have our new exceptions defined
1456:05 - somewhere
1456:06 - and and
1456:09 - as you can see in the cache just like we
1456:10 - had the crowd exceptions we're also
1456:11 - going to have some exceptions thrown by
1456:13 - our new fire
1456:15 - firestore service which we haven't
1456:17 - developed yet but we need to define
1456:19 - those exceptions at least okay
1456:22 - so
1456:24 - what we need now is to go and create
1456:26 - that file so i need you to please create
1456:28 - a file under lib services
1456:31 - cloud and then create that file as cloud
1456:34 - storage exception so
1456:36 - i'm going to do that as well so let's
1456:38 - see i'm going to fold all the folders in
1456:39 - here
1456:41 - so we have lib services and then cloud
1456:44 - you can see we don't have cloud at the
1456:46 - moment so we do have services and we
1456:48 - have off in there and crowd so i'm gonna
1456:51 - right click on services and say new file
1456:53 - and then in here i'm just gonna say
1456:55 - cloud
1456:56 - and then slash cloud storage
1456:59 - exceptions.dart
1457:02 - okay
1457:04 - so
1457:05 - after the creation of that file
1457:08 - i'm going to remove the project explorer
1457:10 - there as well what we need then is to
1457:13 - define
1457:14 - a super class for all our cl cloud
1457:17 - exceptions
1457:19 - if you remember from the crowd
1457:20 - exceptions that we created in here
1457:22 - all those exceptions were actually of
1457:24 - type exception and that's one way of
1457:26 - doing that however
1457:28 - if you want to group your
1457:30 - exceptions under one
1457:32 - super
1457:33 - exception
1457:34 - and you could then
1457:36 - handle them quite smoothly or better
1457:39 - actually i would say
1457:40 - in
1457:41 - at the call site and so that basically
1457:44 - is going to use inheritance and then you
1457:46 - and we are going to create a new
1457:48 - exception as you can see
1457:50 - here called cloud storage exception and
1457:53 - all our cloud exceptions are going to be
1457:55 - of that type so makes grouping and
1457:57 - catching these exceptions in the future
1458:00 - a lot easier okay
1458:03 - so let's go ahead and
1458:05 - create our first exception it is called
1458:09 - i can see it's called cloud storage
1458:11 - exception
1458:12 - so let's go ahead and say clouds and
1458:14 - class cloud storage exception
1458:17 - and implements exception
1458:21 - okay
1458:23 - and we're also going to create a
1458:24 - constant constructor for it so it makes
1458:27 - creating instance of this a lot easier
1458:29 - and you could also
1458:32 - basically say that this is um an
1458:35 - immutable class meaning that this class
1458:37 - and all its subclasses need to be
1458:39 - immutable you could do that all right
1458:41 - that's fine as well but usually
1458:43 - exceptions aren't marked with this it's
1458:45 - usually data classes that are marked
1458:47 - with immutable so i'm not gonna do that
1458:49 - right now
1458:53 - okay that thing is done um
1458:57 - now so that's the parent exception we
1458:59 - should try not to throw that exception
1459:01 - as it is we have to throw subclass
1459:03 - subclasses of that exception okay
1459:06 - now
1459:07 - the first exception that we're going to
1459:09 - define is could not create node
1459:11 - exception i believe it's called yes and
1459:13 - we're going to throw this in our
1459:16 - to be written a class soon uh upon you
1459:20 - trying to create a new note if firebase
1459:23 - firestore is not able to actually create
1459:25 - that note then we're gonna throw this
1459:26 - error okay
1459:28 - so i'm gonna then define that exception
1459:31 - and you will need to type this then um i
1459:34 - just brought it from my notes
1459:38 - now also in this screen where we have
1459:41 - all the notes displayed for a given user
1459:44 - we may also not be able to retrieve all
1459:46 - the notes for that user for instance if
1459:47 - there is a network connection issue or
1459:49 - whatever whatever other issues that may
1459:51 - arise
1459:52 - so we need to have an exception for that
1459:54 - as well and that exception is called
1459:55 - could not get all nodes exception okay
1459:58 - so let's define that as well
1460:01 - and it's written just like could not get
1460:03 - all notes exceptions exception
1460:07 - the next exception that we have to
1460:09 - define is called a could not update
1460:12 - nodes so we have create node exception
1460:15 - get node exception and now we're on the
1460:17 - u part of crot so
1460:21 - you see the
1460:23 - create part is a c in crud gets is
1460:27 - r and now we're looking at you okay
1460:31 - and that is uh
1460:32 - could not update node exception so
1460:36 - so we could say
1460:38 - this is um
1460:40 - you in crud
1460:42 - and the get
1460:44 - is r in crop
1460:47 - and create a c in crud okay and so we
1460:51 - have c r u and then we have to define
1460:54 - d
1460:55 - which is for delete infrared
1460:59 - and that's exactly what we're going to
1461:00 - do now so let's go define could not
1461:02 - delete node exception all right so
1461:05 - let's then say
1461:07 - be in crop okay so now we have
1461:10 - um three four uh exceptions defined and
1461:13 - all of those exceptions are uh
1461:16 - inheriting from cloud storage exception
1461:22 - okay um
1461:25 - now that we've talked about the
1461:26 - exceptions we also have to talk about
1461:27 - the actual cloud storage service you see
1461:30 - we have our quad service at the moment
1461:32 - which we've been working quite a lot
1461:34 - with and we're very proud of it actually
1461:36 - it's a lot of code in my implementation
1461:38 - at least in here we have about
1461:42 - 360 lines of code
1461:45 - i mean it's not all code there there's
1461:47 - also spaces there's like
1461:49 - i think there are some annotations like
1461:51 - immutable etc but there's quite a lot of
1461:53 - code okay and there's a print statement
1461:55 - in here which i actually have to remove
1461:56 - okay
1461:58 - so
1461:59 - there's quite a lot of code and this is
1462:01 - working with sql lite but we also need a
1462:03 - service that works with firebase
1462:05 - firestore
1462:07 - so we need to create that service soon
1462:10 - so just know that we are going to have
1462:12 - crud in here which is going to talk with
1462:14 - sqlite
1462:15 - but we're moving actually away from it
1462:18 - so
1462:19 - let's then fix that
1462:21 - um
1462:23 - so let's go in here and have a look at
1462:25 - our constants
1462:27 - and if you look at our node servicing
1462:29 - here
1462:31 - and we have our
1462:34 - constants in here we have routes and at
1462:36 - the end of node service we have some
1462:38 - constants defined right in this class
1462:42 - or right in this dart file
1462:44 - and some people may like this but i
1462:46 - personally prefer to have my constants
1462:48 - defined in separate files even though
1462:51 - these constants are
1462:52 - very related only to this file but just
1462:56 - making them putting them in separate
1462:57 - places just makes it easier to look at
1463:00 - because these constants at the moment
1463:01 - like hidden at the bottom very bottom of
1463:04 - this file
1463:05 - so let's go ahead and define our
1463:07 - constants so let's have a look at the
1463:09 - path it's going to be in services cloud
1463:11 - and then cloud storage constants
1463:14 - on the services now we have cloud
1463:17 - and under cloud we have cloud storage
1463:18 - exceptions i think exceptions yep now we
1463:22 - have to define cloud storage constants
1463:24 - so new file cloud storage
1463:28 - constants dart
1463:31 - and
1463:32 - i'm going to go to my notes
1463:33 - [Music]
1463:35 - constants all right
1463:37 - now if you remember from our note series
1463:39 - we define like the tables and
1463:42 - excuse me
1463:44 - and we defined the tables the columns
1463:47 - and and even the format of creating new
1463:50 - tables we don't really need these all we
1463:52 - need are these two fields as you
1463:54 - remember the
1463:56 - text and also we need a field for user
1464:00 - id like this
1464:03 - so let's define these let's just say
1464:06 - owner user id so let's go in here and
1464:08 - say const
1464:11 - increase the size owner user
1464:15 - id is just user id like this and then
1464:18 - we're gonna say const text field name
1464:23 - excuse me so i need you to define these
1464:25 - two fields as well for your application
1464:28 - okay
1464:29 - so let's go back to the original font
1464:32 - size in there
1464:34 - so
1464:36 - now that we've defined that if you
1464:37 - remember from our note service we had
1464:39 - these beautiful classes in here a call
1464:41 - called a database node and a database
1464:43 - user now
1464:45 - given that we're moving away from
1464:47 - storing
1464:48 - things and notes inside the sqlite
1464:51 - database and we're moving to towards a
1464:53 - firestore um
1464:54 - databases
1464:56 - we actually don't need a database user
1464:58 - anymore
1464:59 - but we do need some sort of a class that
1465:02 - represents these documents that we're
1465:04 - going to create in here okay and
1465:07 - what we are going to call that is called
1465:09 - a cloud node
1465:11 - so let's go ahead you see here is called
1465:13 - a database node so then you kind of know
1465:15 - that it is a local database maybe you
1465:18 - could rename this local database node if
1465:19 - you want to but i'm not going to do that
1465:21 - simply because we're moving away from
1465:23 - this so what's the point of refactoring
1465:25 - it so
1465:27 - i'm going to close node service so then
1465:28 - let's go ahead and create a new file
1465:31 - called cloud note dart under services
1465:34 - lib services cloud
1465:36 - and i'm going to call it cloud
1465:38 - underscore node.dark
1465:41 - in here now what we need to do is
1465:43 - actually implement cloud nodes
1465:47 - excuse me
1465:49 - so
1465:50 - what a cloud node actually is going to
1465:53 - contain there are three properties that
1465:55 - the cloud node has to contain
1465:57 - and they're namely the
1465:59 - actual identifier of that node and i
1466:02 - apologize i actually have to put myself
1466:04 - into do not disturb so
1466:08 - so
1466:10 - there are three things a cloud node has
1466:12 - to contain
1466:14 - one is the actual like primary key of
1466:17 - that note in our database every document
1466:19 - that is generated by firebase
1466:22 - is going to have a unique id if you're
1466:24 - coming from like backend development
1466:26 - then you're already familiar with this
1466:27 - for instance django has this idea of a
1466:29 - pk which is primary key you can also
1466:32 - read it as id so everything that's
1466:34 - stored in the database has some sort of
1466:35 - a primary key
1466:37 - firestore is no different so every
1466:40 - document that is created inside a
1466:41 - firestore database is also going to have
1466:43 - a primary key okay
1466:45 - so that's the first property that our
1466:47 - cloud node is going to contain
1466:50 - the other two are very familiar because
1466:52 - you saw here in the documents we're
1466:55 - gonna have a text field and the other
1466:57 - one is like the owner user id so there
1466:59 - are three fields that we have to add to
1467:01 - our class so let's go ahead and do that
1467:03 - let's just say
1467:05 - um if i can type here
1467:08 - so class sorry i have a microphone right
1467:11 - in front of my face like it's blocking
1467:13 - my keyboard so that's sometimes that's
1467:16 - why i have to like look like this just
1467:17 - to find my keyboard
1467:20 - so let's say cloud node
1467:22 - um
1467:23 - and inside our cloud node let's define
1467:25 - these three properties so let's just say
1467:26 - final string
1467:29 - document id okay
1467:31 - and i'm going to copy the string here as
1467:34 - well and say owner user id and then
1467:36 - we're going to say text okay
1467:39 - help from visual studio code to
1467:41 - implement the constructor
1467:43 - and um in here then i'm going to say
1467:45 - this is a constant constructor okay as i
1467:48 - said you could actually go and define
1467:50 - this as immutable which i actually
1467:51 - prefer in this case to be honest with
1467:53 - you i hadn't i hadn't planned to make
1467:54 - this immutable but i think actually
1467:56 - makes sense if it's a cloud node then
1467:58 - let's just say it's immutable okay
1468:02 - so that's that's the first part and i
1468:05 - also know that we need to make these
1468:07 - required parameters so let's go ahead
1468:09 - and do that let's just say required
1468:11 - before all of these parameters okay so
1468:13 - that they're actually required named
1468:16 - parameters
1468:17 - that are not optional basically
1468:20 - okay that's that
1468:21 - if you look at how our database nodes
1468:25 - let's see if we can find database node
1468:27 - inside nodes service
1468:32 - so let's have a look at database node do
1468:34 - you remember that we had these fields
1468:36 - but we're pretty much never calling this
1468:38 - database nodes a constructor we're
1468:41 - always using this thing database node
1468:43 - from row
1468:44 - and this is basically the object you
1468:47 - just see this map is the object that
1468:49 - we're reading from our sqlite database
1468:51 - and crew and then we're internally
1468:53 - creating instances of our database node
1468:56 - from that object okay
1468:59 - so
1469:00 - this kind of map is what you will also
1469:02 - receive from
1469:05 - firestore
1469:07 - however it's going to be wrapped inside
1469:09 - something called a query document
1469:11 - snapshot so it's just a wrapper
1469:14 - around your data so
1469:17 - let's go ahead in here and and what
1469:19 - we're going to say is if you just type
1469:22 - query document snapshot then
1469:25 - visual studio code is going to import
1469:27 - this automatically for you okay so
1469:30 - then it should be imported in here so
1469:33 - that's great
1469:34 - and also we need our um
1469:37 - cloud storage constants so let's go and
1469:40 - import those as well so let's just say
1469:41 - package and my nodes and we have uh what
1469:46 - do we have
1469:47 - where is this stored inside services
1469:49 - cloud so services cloud
1469:51 - constant or sorry
1469:53 - cloud storage constants so
1469:56 - you need cloud firestore dart and then
1469:58 - your constants as well
1470:01 - let's go ahead and create kind of like a
1470:04 - constructor that we are going to call
1470:05 - from snapshot and this constructor is
1470:09 - going to allow firestore to give us a
1470:11 - snapshot of it and cloud nodes and then
1470:14 - we're going to create an instance of our
1470:15 - cloud node from that okay so let's just
1470:17 - say cloud node from
1470:21 - from snapshot
1470:23 - and parameter is going to be query
1470:26 - document snapshot that has that map that
1470:29 - we actually need
1470:32 - like this and we're going to call it
1470:33 - snapshot like that okay
1470:36 - so
1470:37 - now you can see that we're getting some
1470:39 - errors from um
1470:41 - from dart saying all final variables
1470:43 - need to be initialized and a function
1470:44 - body must be provided okay we're going
1470:46 - to fix it soon so this is this is the um
1470:50 - signature of your function then in here
1470:52 - your job now is to make sure that all
1470:54 - your fields are initialized so let's
1470:56 - let's just say if i can type again
1470:59 - document id
1471:01 - it comes from our snapshot id
1471:04 - that's a property that is stored on this
1471:06 - at the snapshot level so you can get
1471:08 - that id okay
1471:10 - and what we're going to say is that we
1471:12 - have an owner user id that we also have
1471:14 - to fill in so that comes from the
1471:17 - snapshot
1471:18 - uh snap
1471:20 - shot
1471:21 - data
1471:22 - and in there then we have to say the
1471:24 - owner
1471:26 - user id field name let's see owner user
1471:29 - id
1471:32 - under user id let's call this field name
1471:35 - so sorry about that let's go back to the
1471:36 - cloud storage constants and fix this to
1471:38 - say owner user id field name actually
1471:40 - okay
1471:43 - so we missed that but that's okay it's
1471:45 - just a naming change so
1471:47 - then we're gonna say owner user id field
1471:49 - name
1471:50 - so that's for the owner user
1471:52 - id and we're going to get the text which
1471:55 - is equal to snapshot dot
1471:58 - data
1472:00 - and text field name
1472:02 - as string
1472:05 - okay so what we have is a beautiful
1472:07 - cloud node immutable class with a
1472:09 - constant constructor and also we get
1472:12 - this snapshot um query document snapshot
1472:15 - from firestore soon and we can create
1472:17 - instances of our cloud nodes as you'll
1472:20 - soon see
1472:23 - all right now what we need um
1472:27 - is to create our new cloud firestore
1472:29 - service
1472:32 - so this is like the beginning of moving
1472:35 - away from cloud storage into firestore
1472:39 - so this is actually very exciting and a
1472:41 - little bit um
1472:43 - a little bit intimidating maybe at first
1472:45 - because well we kind of have to like
1472:47 - redo quite a lot of work
1472:49 - but given that firestore provides you
1472:52 - with pretty much all the tools that you
1472:54 - need as you'll soon see the
1472:56 - implementations of the functions that
1472:57 - we're gonna that we're gonna do are so
1473:00 - minimal because the base is there fire
1473:02 - stores already provided the base we just
1473:04 - have to hook into it and grab the data
1473:06 - write the data etc so
1473:09 - so let's close all these tabs that we
1473:11 - have at the moment
1473:12 - excuse me and let's go to this um
1473:16 - services cloud and create our new
1473:18 - firebase cloud storage dart file
1473:20 - firebase cloud storage
1473:23 - dart
1473:26 - all right so
1473:28 - i'm actually going to do that as well so
1473:30 - firebase
1473:32 - cloud storage
1473:34 - in my notes all right
1473:37 - so let's go ahead and say we have a new
1473:39 - class called firebase cloud storage
1473:43 - like that
1473:45 - at the moment it doesn't do really
1473:46 - anything but what we need to do uh is to
1473:49 - make uh make this
1473:51 - a shared instance
1473:52 - and
1473:54 - i'm gonna bring the caption for that and
1473:56 - if you remember we've already made our
1473:58 - node service
1474:00 - a
1474:03 - a singleton so let's go back to our node
1474:05 - service
1474:06 - command p on macintosh and visual studio
1474:08 - code or control p in
1474:10 - windows and linux to bring up this
1474:12 - search files by name field and i'm just
1474:15 - going to say note service
1474:17 - if you remember inside note service i
1474:19 - think
1474:20 - at the top we had this pattern
1474:23 - for creating a singleton do you remember
1474:25 - this
1474:26 - right
1474:28 - so we kind of need or sorry this part we
1474:32 - kind of need the same thing
1474:34 - not kind of actually pretty much exactly
1474:36 - the same thing except for this part
1474:39 - because this talks with a stream
1474:40 - controller so i find this pattern of
1474:43 - creating singletons in dart still quite
1474:45 - hacky i think i've mentioned this before
1474:48 - when we created the node service
1474:49 - but it's something that we have to do so
1474:51 - make sure our firebase cloud storage is
1474:53 - actually a singleton okay so i'm gonna
1474:56 - bring that code from my notes because i
1474:58 - don't think it's actually worth writing
1475:00 - this and it's not worth your time or my
1475:02 - time
1475:03 - but this is what you need to create so
1475:06 - what is happening in here is that we
1475:08 - have a private constructor
1475:10 - then we're going to create a factory
1475:12 - constructor which is the default
1475:13 - constructor of our of our class firebase
1475:16 - cloud storage right here
1475:18 - and that is going to talk with a static
1475:20 - final field which in turn calls this
1475:23 - private
1475:24 - initializer so
1475:26 - in um in other languages like swift and
1475:29 - rust it's it's a lot easier to create a
1475:33 - singleton but this is a pattern you have
1475:35 - to do so
1475:36 - first create a private constructor then
1475:38 - create a factory constructor that talks
1475:40 - with a static final which in turn talks
1475:43 - with the private constructor okay
1475:48 - okay after you've taken care of that
1475:51 - what we need to do is to grab all our
1475:54 - notes from
1475:56 - our cloud storage okay
1475:58 - so let's just go ahead after this
1476:00 - factory constructor we're gonna expose a
1476:03 - field as the note as the caption at the
1476:05 - bottom of the screen in the case call
1476:07 - notes
1476:08 - so i'm just going to say notes equal to
1476:11 - we're just going to say firebase and
1476:13 - firestore and it's going to auto import
1476:15 - it for me so this is not a strange thing
1476:17 - anymore to you as well
1476:19 - and then i'm just going to say our own
1476:21 - instance and then
1476:22 - excuse me a collection called notes
1476:26 - quotes as well
1476:27 - okay
1476:29 - so this is how you actually talk with a
1476:33 - firestore so you can see that the
1476:35 - signature of this collection is actually
1476:37 - returning use something called a
1476:39 - collection reference
1476:40 - and you will soon see how we can extract
1476:43 - our actual notes from this collection
1476:45 - all right
1476:46 - and also remember
1476:48 - this isn't gonna work if you haven't
1476:50 - actually created your notes collection
1476:51 - so if you haven't done that if you
1476:53 - forgot to do that please go ahead
1476:55 - excuse me to go ahead and do that right
1476:57 - now
1477:00 - so the first thing we need to do is to
1477:02 - create a function for creating new nodes
1477:05 - all right
1477:06 - excuse me
1477:08 - so let's go ahead um into our project
1477:12 - and create a function as the
1477:14 - caption indicates i'm going to say void
1477:17 - create new nodes in here
1477:19 - and then we're going to say we need a
1477:23 - an owner id
1477:25 - so required string owner user id i
1477:28 - believe we call it and then it's an
1477:30 - async function okay
1477:33 - and then in here since you have
1477:35 - like a stream or a read write stream uh
1477:39 - of all your notes and that's what this
1477:41 - uh
1477:43 - collection reference means it's it's not
1477:45 - only a stream that you can read from but
1477:47 - also it's a stream you can write to
1477:48 - that's why that's why it's not called a
1477:50 - stream okay
1477:51 - because the stream is like you try to
1477:53 - read only from it so
1477:55 - and in here what we're gonna do is going
1477:57 - to say notes add
1477:59 - and you can see it literally says give
1478:00 - me a map or a dictionary or however you
1478:03 - want to call it
1478:04 - an object that has keys and values
1478:07 - what do you want me to store in a
1478:09 - database and that's what nosql kind of
1478:11 - means in here is document based it's it
1478:13 - has no real structure of what you're
1478:16 - adding everything that you add in here
1478:18 - is going to be packaged into a document
1478:21 - that is going to be stored in here with
1478:23 - the fields and the values that you
1478:25 - specified in here okay
1478:27 - so let's go ahead and say we provide you
1478:29 - with a
1478:31 - with a document in here and the first
1478:34 - field is owner user id field name and
1478:37 - that's gonna auto import it from our
1478:38 - constants from before remember
1478:40 - and in here the value of this is going
1478:42 - to be the owner user id
1478:44 - and
1478:45 - the text field
1478:47 - text
1478:48 - field
1478:49 - name is just going to be an empty note
1478:52 - for now okay and remember this is an
1478:55 - async asynchronous function which
1478:57 - returns a future of a document reference
1478:59 - just like we have our collection
1479:00 - reference in here but we actually don't
1479:02 - want its results right now at least so
1479:04 - we're just gonna wait on it so don't
1479:06 - forget that weight because without doing
1479:08 - the weight this function is not actually
1479:10 - going to be invoked
1479:13 - wow okay um
1479:16 - what we need to do now then is to go to
1479:19 - the next item
1479:22 - excuse me which is
1479:24 - getting notes by user id so the
1479:26 - signature is going to be it's going to
1479:27 - return an i
1479:30 - of cloud note
1479:32 - you given a user id so
1479:34 - as we said every
1479:36 - every node we store in our database uh
1479:39 - is gonna have these two fields an owner
1479:41 - and a text field so now what we want is
1479:42 - to grab all the nodes for a specific
1479:45 - user okay
1479:46 - so let's go ahead and do that so it's
1479:49 - called
1479:50 - um get notes and it's quite a meaty
1479:53 - function actually i can see in here
1479:56 - so let's go ahead and do that right now
1480:00 - let's say future of iterable um of cloud
1480:04 - nodes and i think we have to import
1480:05 - cloud node as well so pressing this
1480:07 - button imports this for me if you're
1480:09 - getting some errors it's probably
1480:10 - because your editor hasn't been able to
1480:11 - find cloud nodes so
1480:14 - and then we're going to say get notes
1480:16 - and a required parameter in here
1480:19 - under user id okay and it's an
1480:21 - asynchronous function so like that
1480:26 - so what we're going to do then is to um
1480:30 - a weights
1480:31 - uh on our
1480:34 - on our notes in here you see we can
1480:35 - actually retrieve notes from our notes
1480:38 - collection in here by saying notes where
1480:41 - so we're gonna do a search inside the
1480:43 - notes uh
1480:45 - collection reference and that and you do
1480:47 - that using the where clause okay
1480:50 - and these things could actually increa
1480:52 - like create an exception i believe the
1480:54 - word clause could actually throw an
1480:56 - exception whether it was this one
1480:59 - it's not documenting here but i do
1481:01 - believe that it could actually create an
1481:03 - exception
1481:04 - so let's go ahead and catch this so
1481:06 - let's just say try we're gonna try and
1481:08 - then should anything happen in here
1481:11 - uh we're just gonna throw
1481:13 - and could
1481:14 - not get all nodes exception and this is
1481:17 - going to auto import that from our
1481:20 - previous code so i i shouldn't explain
1481:22 - this over and over again you know
1481:24 - already how that works okay
1481:27 - so now that we have that we have a try
1481:29 - and catch statement in there so let's
1481:31 - just say we await on the notes
1481:35 - and we say uh where clause and the word
1481:38 - clause is
1481:40 - going to say okay
1481:43 - what is the field that you want to do
1481:45 - your work search on and we want to
1481:47 - search for all notes that are for this
1481:50 - owner user id so let's just say owner
1481:52 - user id field name
1481:56 - should be equal to you see that's the
1481:57 - parameter is equal to owner user id like
1482:00 - that okay
1482:03 - waiting on it you see sorry after doing
1482:05 - a word this gives you a query but then
1482:07 - you need to actually execute this query
1482:09 - and you do that using its get function
1482:11 - and you see it returns
1482:13 - and
1482:14 - let me see gets if i move my mouse over
1482:17 - you see it returns a future of a query
1482:19 - snapshot with all the objects that
1482:21 - firestore could retrieve from the
1482:22 - database okay
1482:25 - so we have to get um
1482:27 - what we do then is to
1482:29 - do then
1482:31 - that's that's how we work with future so
1482:33 - event clause of the future allows you to
1482:35 - return it what it does is it returns the
1482:38 - value of that future to you and it
1482:40 - allows you to return either a
1482:42 - synchronous value inside the then
1482:44 - function or you could actually return
1482:46 - another future
1482:48 - those who are familiar with node.js or
1482:50 - just javascript in general
1482:52 - or even swift they're familiar with how
1482:55 - promises and how futures work so this is
1482:57 - your chance of actually returning a
1483:00 - value given this
1483:02 - future that is returned to you okay
1483:06 - so we're going to call this basically
1483:07 - value at the moment and if i move my
1483:09 - mouse over this you can see it says a
1483:11 - query snapshot of these um
1483:14 - potentially written
1483:15 - red documents
1483:17 - so in here what we're going to do is say
1483:19 - docs which is all the documents that
1483:21 - could be read
1483:24 - and we're going to map all those and you
1483:26 - can see in here
1483:27 - if i call this doc
1483:29 - if i move my mouse over it so it creates
1483:31 - document snapshot whereas this one was a
1483:34 - query snapshot this one is a query
1483:36 - document snapshot of those fields okay
1483:39 - so let's go in here and what we're going
1483:41 - to do is to say we return
1483:44 - inside this return a cloud node
1483:47 - and we have these three fields okay we
1483:49 - have the document id owner user id and
1483:51 - the text
1483:53 - so it's our chance basically to create
1483:55 - an instance of our cloud node right now
1483:59 - i'm gonna put the
1484:00 - columns here so we get the formatting a
1484:03 - little bit better
1484:04 - and what we need to do is to get the
1484:06 - document id and the way to do that is
1484:08 - this dock has an id in here you can see
1484:10 - it's a string so
1484:12 - and the other one is to dock
1484:15 - and then we have the data
1484:19 - and let's just say owner user id field
1484:21 - name
1484:23 - and
1484:24 - that's a string
1484:26 - and in here we're gonna say then a doc
1484:30 - data
1484:32 - and we say text field name
1484:35 - as a string now remember this looks very
1484:38 - familiar where have we done this before
1484:40 - yeah we've done this in cloud notes from
1484:43 - snapshot
1484:44 - and don't worry we're actually gonna use
1484:46 - that function as soon we're gonna remove
1484:48 - this return statement the way it's
1484:50 - written but let's just write it like
1484:51 - this right now okay so it's easier to
1484:53 - understand
1484:56 - wow all right um
1484:59 - i think i think that should be it
1485:03 - and so we have that
1485:05 - excuse me
1485:07 - and um
1485:11 - yeah i believe i believe this is going
1485:13 - to cover it for us right now so not much
1485:15 - more to explain about this to be honest
1485:18 - so
1485:19 - we could also put a comma here
1485:22 - to
1485:23 - make the code a little bit more readable
1485:25 - and we have the value then
1485:27 - return
1485:28 - and what we don't have to be honest with
1485:30 - you here is this return statement in
1485:32 - here
1485:34 - or actually we created this
1485:36 - like this so yeah it's an arrow function
1485:38 - so we don't have to have a special
1485:40 - return statement but if you don't like
1485:42 - this kind of an arrow function you can
1485:45 - grab your code that you've written up to
1485:47 - this point like this
1485:49 - and create
1485:50 - curly brackets in here and instead use
1485:53 - this syntax to say return
1485:56 - instead okay so
1485:58 - it kind of depends on what you prefer um
1486:02 - i don't have a preference and i could
1486:03 - use an error function the way it is so
1486:05 - i'm just going to leave it like this
1486:07 - okay
1486:09 - and remember we're at the moment
1486:10 - awaiting on this but we're not returning
1486:12 - it so let's just return so this is all
1486:15 - basically just a fancy way of us
1486:18 - excuse me communicating with firebase
1486:20 - firestore and reading documents and
1486:23 - there's so much to explain that i can't
1486:25 - go through all of these but i really
1486:27 - suggest that you play with these
1486:28 - functions yourself read the
1486:30 - documentations and see why is it that
1486:32 - i'm using where and then get
1486:35 - so uh for that you need to read all the
1486:37 - documentations
1486:39 - that come with these functions so you
1486:40 - understand them better
1486:44 - okay um
1486:46 - so that's getting notes by user id
1486:51 - now what we need is also
1486:54 - um
1486:54 - [Music]
1486:56 - what we need is
1486:58 - the ability for
1486:59 - us to be able to provide our notes list
1487:02 - in here with a stream of notes for that
1487:06 - particular user okay so
1487:08 - um as you as you know now in our note
1487:11 - service the way we have it is we are
1487:13 - exposing this stream of list of database
1487:16 - node and that's what we kind of also
1487:18 - need to do with our firebase cloud
1487:19 - storage like have a function that our
1487:21 - nodes list
1487:23 - excuse me can't subscribe to and read
1487:25 - all the available nodes for that given
1487:26 - user so let's go ahead and do that let's
1487:28 - just call it a stream iterable
1487:31 - and i have that function signature so i
1487:33 - don't think i should actually write it
1487:35 - manually but you may need to write it so
1487:38 - so that's a function signature okay
1487:40 - and in here what we're going to say is
1487:42 - that we're going to go to our notes
1487:44 - collection in here and get all the
1487:47 - available snapshots
1487:49 - let's see we have our notes and then we
1487:52 - have our snapshots
1487:54 - and we're gonna map that and
1487:57 - let's just say yep
1487:59 - gonna get our documents inside that
1488:01 - snapshot
1488:03 - and then we're gonna
1488:05 - map that
1488:07 - like that and let's just call it doc
1488:11 - and in here we're gonna create a cloud
1488:13 - note from snapshots
1488:15 - of that doc like that
1488:19 - and then in here
1488:21 - we're going to say where
1488:24 - that's our note
1488:26 - and then we're going to say the notes
1488:28 - owner user id i'm gonna actually write
1488:30 - this and then i'm gonna tell you what
1488:31 - i'm basically doing because there's
1488:33 - quite a lot of code in here and like
1488:34 - pausing to describe every little bit of
1488:37 - this code could actually make it look
1488:39 - more complicated than it is so
1488:41 - and i'm just gonna then say owner user
1488:43 - id
1488:44 - okay
1488:45 - but a
1488:47 - semicolon there wait a minute
1488:50 - this ends there and then a semicolon
1488:52 - there yeah so let's see what is
1488:54 - happening in here so this looks actually
1488:57 - quite intimidating to look at but it's a
1488:59 - very simple piece of code so
1489:02 - what we're doing in here is if you want
1489:04 - to grab a stream of data as it is
1489:08 - evolving you want to be able to
1489:09 - subscribe to all the changes happening
1489:11 - to it then you need to use something
1489:12 - called the snapshots as you can see this
1489:14 - is a stream of query snapshot whereas
1489:17 - where is a query itself okay and then
1489:20 - get
1489:21 - is a future so it just the get one
1489:24 - literally takes a snapshot at that point
1489:26 - in time and returns it to you but if you
1489:29 - want to like keep hold of
1489:31 - like if you want to be updated about all
1489:33 - the changes live as they're happening to
1489:35 - your data in the notes collection then
1489:38 - you need to subscribe to the snapshots
1489:40 - that's what we're doing okay so that's
1489:42 - that first part with snapshots so we're
1489:44 - literally saying that we want to see all
1489:45 - the changes as they're happening live
1489:47 - okay
1489:49 - then it says okay i will give you all
1489:51 - the changes that are happening live and
1489:52 - that comes inside the query snapshot
1489:54 - remember query snapshot from here
1489:57 - remember query here
1489:59 - oops inside the get
1490:01 - so
1490:02 - after this point is it's literally what
1490:04 - we did in the get notes it's saying that
1490:07 - okay here is a query snapshot and then
1490:09 - we're saying okay there are documents in
1490:11 - there and that's exactly what we're
1490:13 - doing in here there's documents in the
1490:15 - query snapshot and then we're mapping
1490:17 - every document to a cloud note all right
1490:20 - and then we're putting and where clause
1490:22 - at the end
1490:24 - that says we're only interested in notes
1490:26 - whose u owner user id is the owner user
1490:29 - id provided in here so without this word
1490:31 - clause we're literally exposing all the
1490:34 - notes um
1490:36 - to the current user for all users in the
1490:38 - system so that word clause is very
1490:40 - important okay
1490:43 - so and this work clause as you can as
1490:45 - you can see it is actually inside
1490:47 - flutter bin lip core iterable so that's
1490:51 - nothing that is it's not a function that
1490:53 - firestore has provided for us okay
1490:57 - wow that was
1490:59 - that was a lot of information
1491:03 - okay let's go ahead and talk about
1491:05 - updating you notes sorry updating
1491:08 - existing notes so as we talked about it
1491:10 - before if you have a note and you tap on
1491:12 - it the way it works in our application
1491:14 - right now is i can tap on this node and
1491:16 - go and change its text like 22 and come
1491:19 - back out and now it's changed to 22 okay
1491:22 - so we need to also expose this
1491:23 - functionality
1491:25 - excuse me
1491:27 - in inside our firebase cloud storage um
1491:30 - as well so the function is going to be
1491:32 - update node and it's going to take two
1491:34 - parameters document id and a text so
1491:36 - let's just say
1491:38 - it's going to be a future of void and
1491:39 - we're going to call it update node
1491:41 - two parameters in here which are
1491:42 - required i'm going to say required
1491:44 - string
1491:45 - and document id
1491:48 - and then required string
1491:50 - text
1491:52 - and let's make this an async function
1491:56 - all right then what we're going to do is
1491:58 - we're going to put a try and catch in
1492:00 - here in case we can't update the
1492:03 - notes and then here we're just going to
1492:05 - say throw could not update note
1492:08 - exception okay and you may actually
1492:10 - ignore this e if you want to as well so
1492:12 - you could just do like this
1492:14 - or you could just yeah i think actually
1492:16 - we can't do an empty cache catch so you
1492:18 - may do like this if you prefer but i
1492:20 - prefer to do it like this
1492:23 - all right and i can see that the
1492:24 - formatting is a little bit messed up in
1492:26 - here so i'm going to put a
1492:29 - comma in there
1492:31 - and inside the try statement in here now
1492:34 - what we need to do is to
1492:36 - go to our collections again in here and
1492:39 - let's just say we get a doc you can see
1492:42 - it says okay what is the path of that
1492:44 - doc
1492:46 - and we're going to say the document id
1492:47 - is a path
1492:49 - and then let's then go ahead and say
1492:52 - um dot update
1492:55 - and it says okay what is the actual
1492:57 - update and inside the update what we're
1492:59 - gonna do is gonna say
1493:00 - text field name
1493:02 - is this text all right
1493:05 - so this may look a little bit crypt now
1493:07 - also we have to wait on it may look a
1493:09 - little bit cryptic in the what is doc
1493:11 - dock id
1493:12 - remember inside this function in here it
1493:14 - says give me the path you see this
1493:16 - parameter path
1493:18 - and what we said is that inside the
1493:20 - notes collection every document is going
1493:23 - to have an identifier so we actually are
1493:26 - going to go with the document id which
1493:28 - we instantiated in here do you remember
1493:30 - doc id is going to go into our cloud
1493:32 - node document id so that's the path is
1493:36 - notes slash that document id so that's
1493:39 - how far firebase firestore it called and
1493:42 - basically keeps hold of its paths it's
1493:44 - the the path is in this case if i create
1493:47 - a collection you see it says oh the
1493:48 - collection is being created in the root
1493:50 - folder and it has a collection id which
1493:52 - in our case is called notes and we refer
1493:54 - to it here so we've already constructed
1493:56 - the notes path and every document inside
1493:58 - it has its own id so it's going to be
1494:00 - slash notes slash document id all right
1494:03 - so i hope and i'd explain it for you
1494:08 - let's now talk about deleting notes um
1494:12 - so
1494:13 - deleting notes actually very easy as
1494:15 - well so we don't have to do so much with
1494:17 - deleting nodes so
1494:19 - it's very similar to updating nodes and
1494:21 - we're just going to go ahead and use
1494:23 - document id for deleting notes so
1494:26 - as the caption indicates create a new
1494:28 - feature of void in here and we're going
1494:30 - to say delete node and we're going to go
1494:32 - ahead and use a required string
1494:34 - parameter called document
1494:36 - id
1494:39 - it sync and let's just do a try cache in
1494:41 - here in case we can't delete the
1494:44 - document and then we're going to say
1494:45 - throw
1494:46 - could
1494:47 - not
1494:49 - no
1494:50 - notes exception i believe it's called
1494:53 - yeah
1494:54 - inside the
1494:56 - try statement in here
1494:58 - we are going to say notes
1495:00 - doc
1495:01 - with that document id
1495:03 - all right
1495:04 - and then we're just going to say delete
1495:06 - i remember i believe this is actually
1495:08 - future void so let's just wait on it all
1495:10 - right so
1495:12 - that's really all you have to do for
1495:14 - delete so there's no magic in that it's
1495:16 - very similar to update note except that
1495:18 - it's not taking care of any like fields
1495:20 - or anything like that
1495:24 - wow huge huge chapter we've talked a lot
1495:27 - about now uh about firestore and
1495:30 - firebase storage so
1495:33 - thank you so much for for sticking with
1495:35 - me throughout this chapter and but if
1495:37 - you remember i mean if you look at what
1495:38 - we've done is not so much code it's 68
1495:41 - lines of code for me it may be less for
1495:43 - you if you haven't
1495:45 - done all these extra commas in here so
1495:47 - maybe like 60
1495:49 - but there's a lot of new concepts so
1495:52 - i thought that i had to
1495:54 - i took the liberty of maybe even over
1495:57 - explaining things
1495:58 - but i think in the beginning it's very
1495:59 - important just to understand how
1496:00 - everything works
1496:02 - um
1496:03 - okay
1496:04 - so great job we've done what we promised
1496:06 - to do in this chapter we have actually
1496:08 - tested to make sure that this is this is
1496:10 - working we're gonna do this in the next
1496:11 - chapter but as it's tradition we're
1496:14 - gonna make sure that our work is
1496:15 - committed to our uh
1496:18 - github repository or bitbucket wherever
1496:20 - you're using your uh or wherever you're
1496:23 - hosting your git project so let's go
1496:25 - ahead and do that
1496:27 - i want to change the screen um
1496:30 - layout a little bit i'm going to get rid
1496:32 - of scrcpy
1496:34 - oops
1496:35 - and i'm going to close the screen
1496:38 - make this
1496:40 - bigger in this uh view and then i'm
1496:43 - going to go to terminal okay
1496:46 - excuse me let's have a look at our
1496:48 - status there's quite a bit modified in
1496:50 - here and also we've added a whole new
1496:53 - folder so i'm just going to say git add
1496:55 - all
1496:56 - and let's have a look at our log the
1496:57 - previous commit was step 18 and let's
1496:59 - have a look at our tags i can see step
1497:02 - 18 here as well
1497:04 - let's commit now let's say let's say
1497:06 - step 19
1497:09 - excuse me again
1497:11 - and then we have
1497:13 - commits
1497:14 - and we've committed and let's push those
1497:17 - changes
1497:18 - let's also tag and say step 19 in here
1497:22 - okay
1497:23 - and let's push our tags as well
1497:28 - all right that's that
1497:30 - as again is tradition at the end of
1497:32 - every chapter we'll talk about what we
1497:33 - have to discuss in the next chapter
1497:35 - and as you can see it says uh we need to
1497:37 - start using our new service instead of
1497:39 - sqlite database so that's a little bit
1497:40 - of a
1497:41 - um like a turning point in our whole uh
1497:46 - course in that we're gonna like toss our
1497:48 - local storage and go away from that and
1497:51 - start using our firebase cloud storage
1497:54 - and so
1497:55 - uh it's it's i think the next chapter is
1497:58 - actually one of the most exciting
1497:59 - chapters
1498:00 - excuse me in this whole course so
1498:04 - grab some refreshments if you want to
1498:06 - and i'll see you there
1498:08 - hello everyone and welcome to chapter 37
1498:10 - of this flutter course as you've seen in
1498:12 - previous chapters we've started to move
1498:14 - away from our local database storage and
1498:17 - that was on sqlite and we started going
1498:19 - more and more towards using firestore
1498:21 - databases that are hosted by firebase so
1498:24 - that was a very exciting point in our um
1498:27 - in this course basically and for me as
1498:29 - well as the as your instructor to go
1498:32 - over to
1498:33 - a cloud storage rather than using local
1498:36 - uh storage and you see we used crud and
1498:39 - as i mentioned in the previous chapter i
1498:40 - really wanted to
1498:41 - introduce you to crowd because it's such
1498:43 - an important part of software
1498:44 - development that you will sooner or
1498:46 - later need to use crowd storage locally
1498:49 - on your computer on your applications so
1498:52 - um
1498:53 - that was basically done
1498:55 - on purpose so we first talked about
1498:57 - local storage and then we move away from
1498:59 - it
1499:00 - and simply because uh even firebase in
1499:03 - itself is some sort of a crud storage
1499:06 - not some sort of it is crud but it is
1499:08 - stored on the cloud and concepts of crop
1499:10 - would have been a lot bit more difficult
1499:12 - for me to explain to you had me not
1499:14 - first implemented implemented them
1499:16 - locally so
1499:18 - um
1499:19 - in the previous chapter we prepared our
1499:23 - service which we i will bring the code
1499:25 - here so we can have a look we we
1499:27 - actually called it let's see
1499:29 - it's inside our services cloud we call
1499:31 - it firebase cloud storage
1499:34 - right here and um
1499:36 - we also talked about how we can
1499:38 - basically start integrating in
1499:41 - this firebase cloud search in our
1499:42 - application and this is the chapter that
1499:43 - we're gonna
1499:44 - um
1499:46 - make those plans concrete okay
1499:49 - if you follow the chapters
1499:52 - from the beginning chronologically in
1499:54 - this course you'll know that what i like
1499:56 - to do when i try to refactor things is
1499:57 - to cut things from the source and by
1499:59 - that i mean now we want to get rid of
1500:01 - our local crud storage and what i like
1500:03 - to do as a strategy is to go to
1500:06 - uh the application and like either
1500:08 - comment out that entire piece of code
1500:10 - which has to do with our note service
1500:11 - and the crowd exceptions
1500:13 - or
1500:14 - either we cut it out completely or we
1500:16 - commented out okay
1500:18 - so let's go ahead and deal with that now
1500:21 - so i'm gonna change the screen layout a
1500:23 - little bit here and i'm then gonna go
1500:26 - into our notes service so please go to
1500:28 - the note service and select the entire
1500:30 - code in here and comment it out
1500:35 - so that's for note service and then
1500:37 - we're also going to go to our i'm going
1500:39 - to save this file and then we're going
1500:40 - to go to crowd exceptions select the
1500:42 - entire content and comment it out please
1500:46 - so that's that
1500:47 - um another thing that we need to take
1500:49 - care of is um inside our new firebase
1500:53 - cloud storage inside uh get's notes what
1500:56 - we forgot to do is where i actually
1500:58 - didn't forget to do i intentionally left
1501:00 - it like this so that we could get the
1501:02 - basic idea is as you can see here we we
1501:05 - are inside this uh get notes function as
1501:08 - the caption indicates at the bottom of
1501:10 - the screen we are returning an instance
1501:12 - of our cloud node use using its
1501:14 - constructor its default constructor
1501:16 - however if you remember from this cloud
1501:18 - node snapshot we have
1501:20 - a convenient constructor that can create
1501:23 - an instance of our cloud node using a
1501:26 - document snapshot and that's exactly
1501:28 - what we're getting in here you see query
1501:30 - document snapshot but we're not using
1501:32 - that convenient constructor and that's
1501:34 - exactly what we're going to fix
1501:36 - right now so
1501:38 - excuse me
1501:40 - let's go in here where we have the dock
1501:43 - and i'm going to change this code to go
1501:46 - from a normal function to an error
1501:49 - function and then in here i'm gonna say
1501:51 - we return a cloud node from snapshot of
1501:54 - that dock okay just like that
1501:58 - i press s to save this file command
1502:01 - sorry and you can also remove that comma
1502:03 - at the end so you either leave it like
1502:05 - this with a comma at the end so it
1502:06 - becomes multi-line or you remove the
1502:08 - comma like i do in here and it just
1502:10 - becomes one line all right
1502:14 - okay
1502:16 - that part is done
1502:19 - now what we need to do um is to
1502:23 - be inside this
1502:26 - firebase cloud storage and you can see
1502:28 - in here
1502:29 - inside the functionality uh sorry inside
1502:31 - the create new node at the moment we're
1502:33 - saying void so we're not returning the
1502:35 - node that we're actually creating and we
1502:37 - need to fix this so
1502:40 - we need to actually create the new new
1502:42 - node and return it so let's go in here
1502:44 - and i'm just going to say final
1502:46 - make the code a little bit bigger
1502:47 - final
1502:49 - document is equal to a weight
1502:52 - on this
1502:54 - and if you look at your document now
1502:56 - you can see it is a document actually
1502:59 - you may not be able to see it now you
1503:00 - can see it probably it is a document
1503:02 - reference okay so it's a reference as
1503:05 - its name indicates is not the snapshot
1503:06 - in order to get the snapshot we need to
1503:09 - just issue the get function on it
1503:12 - so let's just say final fetched note is
1503:16 - a wait
1503:18 - on this document get
1503:20 - and you'll see now fetch note is the
1503:23 - actual snapshot that will contain the
1503:25 - data of that document all right
1503:28 - so in here we will just return a cloud
1503:30 - node
1503:32 - like this
1503:34 - or
1503:35 - let's see cloud node with these
1503:37 - parameters
1503:39 - the document id is going to be the
1503:41 - fetched note
1503:43 - id
1503:44 - the owner user user id is provided to
1503:46 - our function already and the text is
1503:48 - just going to be empty like this and
1503:51 - also make sure that uh in here we don't
1503:54 - return void except we return a future of
1503:57 - cloud nodes okay
1503:59 - so
1504:00 - save your file after that and this
1504:01 - part's also done
1504:06 - okay
1504:07 - um
1504:08 - now
1504:10 - we need to make sure just i'm just gonna
1504:11 - close uh all these tabs and as the
1504:15 - caption indicates we're gonna go to our
1504:16 - create update notes view and fix that up
1504:19 - so it can
1504:20 - talk with our new service which is the
1504:23 - cloud firebase storage i think we call
1504:26 - it firebase cloud storage sorry about
1504:27 - that
1504:28 - so i'm going to press command p in
1504:31 - visual studio code on mac or control p
1504:32 - and linux and windows and then just say
1504:36 - create what's it called
1504:38 - create update node view okay
1504:42 - and here as the caption indicates we
1504:44 - need to import three things our
1504:46 - cloud node dart file
1504:49 - the cloud storage exceptions dark file
1504:51 - and the firebase cloud storage dart
1504:53 - files so those are at the moment inside
1504:55 - the um
1504:56 - let's see they're inside services cloud
1504:59 - folder
1505:01 - so i'm going to go in here i'm just
1505:02 - going to say import package my nodes and
1505:05 - then services
1505:07 - cloud
1505:09 - so we have first cloud node so let's
1505:11 - import that
1505:12 - i'm going to copy this path and then use
1505:14 - it again to import cloud storage
1505:17 - exceptions
1505:19 - like that and then we also need cloud
1505:22 - what's it called firebase cloud storage
1505:25 - like that so that's
1505:26 - you will need to also do these three
1505:28 - imports if you haven't called your
1505:30 - application my notes then this package
1505:32 - is going to be different it's going to
1505:33 - be packaged the name of your application
1505:36 - and then services etc etc okay
1505:41 - okay
1505:42 - um
1505:44 - the next thing that we have to do as you
1505:46 - can see in the captions here
1505:48 - we need to make sure that our create
1505:51 - update node views state which is right
1505:53 - here which at the moment contains our
1505:55 - node service as its node service it has
1505:57 - to move towards using the firebase cloud
1506:00 - storage
1506:01 - so i'm going to go to my notes as well
1506:03 - in here just to make sure i'm giving you
1506:04 - all the information that you need so
1506:06 - let's change our node service in here
1506:09 - and call it now firebase cloud storage
1506:12 - and that's the service okay
1506:15 - and in your init function then you need
1506:17 - to also make sure that we get the
1506:20 - singleton instance of our firebase cloud
1506:23 - storage in the init state function all
1506:25 - right
1506:26 - also remember this note now is not a
1506:29 - database note anymore but it's actually
1506:31 - a cloud node so let's call that cloud
1506:33 - node as well all right
1506:36 - and and now we can see we have an unused
1506:38 - import in here so i'm just going to
1506:40 - remove that since we don't need that
1506:42 - unused import
1506:45 - then the next thing we need to do is as
1506:46 - a caption in the case we have to go to
1506:48 - create or get existing node and we have
1506:50 - to make sure that it works with the
1506:52 - cloud storage so let's go in here
1506:55 - perfect
1506:56 - so in here
1506:58 - we're not going to return a database
1507:00 - node anymore and we're going to say it
1507:02 - returns a cloud node
1507:04 - and here we expect a parameter of type
1507:07 - cloud nodes optionally that can be
1507:09 - passed to our routes
1507:12 - and here we're not going to be working
1507:14 - with
1507:15 - you see here we were working with
1507:17 - database users before because our
1507:18 - application was actually creating new
1507:20 - users in the local database and
1507:22 - associating notes with those users
1507:25 - thankfully that now that we're going to
1507:27 - now that we're using firestore um
1507:30 - database we don't have to play with
1507:32 - users anymore because remember users are
1507:34 - already managed by firebase
1507:37 - so
1507:38 - what we can do is just remove that owner
1507:40 - completely
1507:42 - and now we await on our node service and
1507:45 - we just say create new node and then we
1507:47 - need an owner user id and remember this
1507:49 - owner user id is going to be the actual
1507:52 - current user's user id so let's just say
1507:55 - final user id is current user
1507:58 - dot id okay
1508:00 - and then in here we just say user id
1508:04 - okay and we're storing that note in here
1508:07 - as we were doing before so we didn't
1508:08 - change that code at all and then we're
1508:10 - seeing new notes also need to be
1508:13 - returned
1508:17 - so now we need to fix the creation of
1508:20 - our new node and that's something that
1508:21 - we've already done so that there
1508:22 - shouldn't be a separate point really in
1508:24 - the caption so we've already done that
1508:26 - nothing to take care of right now
1508:29 - we also need to take care of now our
1508:31 - deleting a notes you remember when we go
1508:34 - out out of the
1508:35 - node creation view if the node's text
1508:38 - was empty we actually delete that node
1508:40 - from the database okay right now and now
1508:43 - we need to go towards our node service
1508:46 - and also delete it by using the new
1508:48 - function which is called delete node
1508:50 - and let's see what it takes as a
1508:51 - parameter it takes a document id
1508:54 - and that's our node's document id okay
1509:00 - so that's for delete note and
1509:02 - now we have another function very useful
1509:04 - function that saves the notes and when
1509:06 - we go out of the screen if the if that
1509:09 - note
1509:11 - if the text for that note is not empty
1509:13 - very similar to delete node but it kind
1509:16 - of does the opposite make sure that the
1509:17 - node is present and also that the text
1509:19 - to the text editing controller is set if
1509:21 - it's not
1509:22 - not empty meaning that the text is set
1509:25 - then we update the current node so let's
1509:27 - then await on it and in here we just say
1509:30 - update node
1509:32 - those new parameters
1509:35 - the document id is going to be our notes
1509:37 - document id
1509:39 - and the text in here let's see
1509:42 - oh we have to just put a comma in there
1509:44 - and then we're good to go
1509:46 - so that's updating the save node if text
1509:50 - not empty function
1509:54 - okay
1509:55 - now we need to go to our note list view
1509:58 - and i'm going to do the same thing in my
1509:59 - notes
1510:01 - excuse me
1510:04 - and let's go ahead and do that
1510:07 - do we have any errors in here yes i can
1510:09 - see i'm getting an error for update note
1510:11 - and i don't really know what the problem
1510:13 - actually is let's see
1510:14 - document id is required okay and i can
1510:17 - see that this is something also we need
1510:18 - to update so let's go to your text
1510:21 - controller listener function as well and
1510:24 - update
1510:25 - the note there as well you can see it's
1510:27 - doing this so
1510:28 - now we now have to say update note
1510:31 - and we have a note document id and then
1510:35 - we've got text so please ensure that
1510:37 - you're you've taken care of the text
1510:39 - controller listeners functionality as
1510:42 - well
1510:44 - um
1510:46 - and i'm just making sure that that's
1510:48 - exactly what we've done in my notes as
1510:51 - well all right
1510:54 - so that that was one step back um now
1510:56 - let's go and do what the caption at the
1510:57 - bottom screen says let's go to our notes
1511:00 - list view um
1511:02 - notes list view and as you can see at
1511:03 - the moment we're working with a list of
1511:06 - database notes and we don't want to do
1511:08 - this anymore we actually want to work
1511:10 - with iterables because that's like the
1511:12 - default way that firebase actually works
1511:15 - it works with eye troubles it doesn't
1511:16 - work with lists so
1511:18 - and iterables are actually better
1511:19 - because they're like lazy lists so let's
1511:22 - change this to an iterable of a cloud
1511:25 - node like this and also we change our
1511:27 - node callback to be a cloud node
1511:31 - if i can spell and also we have to also
1511:33 - import this so i'm just going to import
1511:35 - cloud node so that error is going to go
1511:36 - away i'm going to remove this uh import
1511:38 - statement from there
1511:40 - now when you're using eye troubles you
1511:42 - can't do a subscript like we're doing in
1511:45 - here you have to say object element at
1511:49 - and then you have your index and that's
1511:51 - pretty much what we're doing in here so
1511:52 - now if you've made this change in your
1511:54 - node callback you made this change from
1511:57 - list to iterable and you change this
1511:59 - from database node to cloud node and
1512:01 - also change this function from a
1512:04 - subscript to element add then you
1512:05 - shouldn't have any errors in your notes
1512:08 - listview.dart file either
1512:13 - now we're going to go to a little bit
1512:15 - juicier changes that we have to make to
1512:18 - ensure that our application works as
1512:20 - expected with the cloud
1512:22 - storage
1512:24 - let's go to notes view
1512:27 - notes view like here and you'll see now
1512:32 - um
1512:33 - actually i can see my notes here uh
1512:36 - we have to do a few updates in here
1512:38 - because we're not going to work with
1512:39 - node service anymore since it doesn't
1512:41 - exist
1512:42 - but one bigger change that we have to
1512:45 - make
1512:46 - is as you can see in the cash offset
1512:48 - remove the future builder
1512:50 - why is that here is the future builder
1512:52 - the way it is today
1512:54 - you can see the future builders actual
1512:56 - future is to get or create a user but do
1512:59 - we really need that anymore
1513:01 - and the answer is obviously no because
1513:04 - previously we were using this feature
1513:05 - builder to create a user in our database
1513:07 - so that we can associate notes with that
1513:09 - user
1513:11 - however since now we're going towards
1513:13 - firestore and uh
1513:16 - cloud storage the users like users in
1513:19 - your application are managed by firebase
1513:21 - itself so you don't have to
1513:24 - create them in that sense when a user
1513:26 - has logged in and landed on the main
1513:28 - interface of your application that
1513:29 - firebase user already exists so you
1513:32 - don't have to do anything so we need to
1513:34 - remove this future builder so i'm just
1513:36 - going to press command dot on it and
1513:39 - sometimes visual studio code can
1513:40 - actually help with that to remove it but
1513:43 - it's not helping at the moment
1513:45 - so what i'm going to do in this case as
1513:46 - you can see i want to just grab this
1513:49 - stream builder in here
1513:50 - just grab the stream builder without the
1513:52 - return statement okay
1513:55 - and find the end of that stream builder
1513:57 - visual studio code is helping me very
1513:59 - nicely with this line in here and saying
1514:01 - this is the end of stream builder so i'm
1514:03 - literally just
1514:05 - gonna do that and cut it okay so now
1514:08 - what you should be ending up with is
1514:09 - your future builder like that looks like
1514:12 - this and then i'm gonna basically kill
1514:14 - that future builder like this okay so
1514:17 - then paste your stream builder
1514:20 - in the place that your future builder
1514:22 - was before so now your body
1514:24 - the body of your um
1514:27 - of your scaffold should just be the
1514:29 - stream builder okay so basically we just
1514:31 - got rid of the future builder all right
1514:36 - so that was that what we need to do then
1514:38 - is to make sure also in here that we're
1514:41 - not using that that we're not exposing a
1514:44 - user email you see from now on when we
1514:47 - create and notes read notes et cetera
1514:49 - we're going to use a user id the user's
1514:52 - identifier so we're not going to work
1514:54 - with our um with the email so
1514:58 - i'm also going to go to my note sorry
1514:59 - about that so um
1515:01 - as the caption at the bottom of the
1515:03 - screen indicates let's go and change
1515:05 - this to user id
1515:08 - and we're just gonna go off service
1515:10 - firebase current user and then we're
1515:12 - gonna get the id okay so that's our user
1515:15 - id
1515:18 - and the rest now is kind of history we
1515:21 - need to ensure that this
1515:23 - view now works with our
1515:26 - new node service so let's remove this
1515:28 - import from here
1515:30 - and now let's say this note service it
1515:33 - is a firebase cloud storage so we're
1515:35 - going to say firebase cloud storage
1515:37 - and in here we just add that and
1515:40 - initialize that we say firebase cloud
1515:42 - storage which is uh
1515:44 - if you remember correctly um it is now a
1515:47 - singleton so we're not creating new
1515:48 - instances basically by doing this
1515:50 - although it looks like we're doing that
1515:54 - so inside our stream builder now what
1515:56 - we're gonna do is not gonna say all
1515:58 - notes anymore like that we're going to
1516:00 - say
1516:01 - all notes
1516:02 - but we're going to pass the owner user
1516:04 - id and that owner user id remember we're
1516:06 - storing it as a getter call user id
1516:10 - and for all our notes in here remember
1516:14 - this all notes is going to give us an
1516:16 - eye trouble if i move my mouse over
1516:18 - there you can see it's an eye trouble of
1516:20 - cloud node so it's not a list anymore so
1516:22 - let's say i trouble
1516:24 - and it's a cloud node in here
1516:26 - okay
1516:29 - and
1516:30 - i can i can see it's complaining that
1516:32 - cloud node can't be found so i'm going
1516:34 - to import cloud node like that
1516:36 - upon deleting in here we also need to
1516:39 - make sure that we call the new one that
1516:41 - says delete node and in this case we
1516:43 - just say
1516:44 - node.document id
1516:46 - all right
1516:48 - so
1516:50 - so that is that seems to be working fine
1516:52 - but what we got here is a subtype of
1516:55 - type firebase cloud storage node service
1516:57 - and we're getting that in
1517:00 - where are we getting that error let's
1517:01 - see if we can find that
1517:04 - in here node 2 and that's okay and
1517:07 - that's because we probably don't have to
1517:08 - do a hot restart and doing a hot restart
1517:10 - could kill my scr cpy and i can see that
1517:12 - it did that but that's fine too i'm
1517:14 - gonna bring up scr cpy
1517:17 - like this
1517:19 - and
1517:20 - i'm gonna
1517:22 - do this and i'm gonna run the
1517:23 - application now from scratch and this is
1517:26 - simply because i mean this is a state
1517:28 - management in your application because
1517:29 - we had a node service from before and we
1517:32 - do a hot hot reload but hot reload all
1517:35 - of a sudden says oops
1517:37 - this node service that used to be node
1517:39 - service is not node service anymore it's
1517:40 - a firebase cloud storage so what should
1517:42 - i do with it so it's just
1517:44 - it's like
1517:45 - state residue that is kind of like
1517:47 - staying in your application and you
1517:49 - can't clean it until you do a hot
1517:50 - restart and when i did a hot restart i
1517:53 - have a problem with scr cpy
1517:55 - so i can't i can't do anything about
1517:58 - that problem but let's just run the
1517:59 - application from scratch and just make
1518:01 - sure everything is working as expected
1518:04 - all right now i can see that i've logged
1518:06 - into the application and i have no notes
1518:09 - all right
1518:11 - let me bring up the caption for the next
1518:14 - uh
1518:15 - topic to talk about so what we need now
1518:17 - you can see notes have disappeared and
1518:19 - this is a good sign because that kind of
1518:20 - means that we have moved away from our
1518:23 - crotch storage and now we're not reading
1518:26 - those notes that were in the crotch
1518:27 - storage anymore
1518:29 - so let's go and create some notes so i
1518:32 - want to press the plus button in here
1518:33 - and i'm just going to say note
1518:35 - number one so if i press the back button
1518:38 - in here i can see that node number one
1518:39 - is appearing here and let's go create
1518:42 - another one and let's say note number
1518:43 - two
1518:45 - great note number one and number two if
1518:47 - i press this number two and then change
1518:50 - it to note number three you can see that
1518:52 - those changes are immediately taking
1518:55 - effect okay
1518:56 - so let me log out from this user and
1518:58 - let's log in with i don't know really
1519:01 - which user i was logged in with before
1519:05 - i'll log in with this user i can see
1519:07 - that user has no notes i'm just going to
1519:09 - say
1519:09 - van dot's first note
1519:12 - go out and then say run dots
1519:16 - second note
1519:18 - and go out so now if i log out from this
1519:20 - one.user in here and if i say i want to
1519:23 - log in with another user
1519:26 - so like this
1519:28 - i can see my note one and three are
1519:30 - displayed here so i can just say note
1519:31 - number one and two
1519:33 - and if i log out from this user
1519:36 - and log in again with vanbot i should be
1519:38 - able to see van dot's
1519:41 - notes
1519:42 - through barbaz
1519:44 - great so that seems to be working now
1519:47 - what we could do i mean if you're just
1519:49 - like me and you're curious how this data
1519:51 - is actually stored in firebase we could
1519:53 - do that so let me open up a window in
1519:55 - here and say console
1519:58 - and let's go ahead into our project on
1520:02 - firebase console and let's go in
1520:07 - our database
1520:10 - and let's have a look in here as you can
1520:12 - see there are four documents two
1520:14 - documents per person per user and you
1520:16 - can see these two have the same user id
1520:19 - and that's the that's the van load user
1520:21 - you can see it it starts with a and c
1520:24 - and the other two nodes they have
1520:27 - another user id which is for pixelity av
1520:30 - remember this a and c user what we can
1520:33 - do now is actually go in here to the
1520:35 - authentication section and have a look
1520:37 - at this vendor user and you can see the
1520:39 - user ids a and c
1520:41 - and the other user actually has erd so
1520:44 - if we go back to firestore and look at
1520:46 - the two last
1520:48 - notes created by pixelity you can see
1520:50 - that their user id is erd you can see
1520:53 - here all right
1520:55 - so very well done congratulations in two
1520:58 - chapters we've been able to go away from
1520:59 - local uh crud storage to firebase huge
1521:03 - feed so well done
1521:06 - what we need to do now is i was we as we
1521:08 - usually do in other chapters is we're
1521:10 - gonna commit our work and also tag it so
1521:13 - i'm gonna do some reshuffling on the
1521:15 - screen here
1521:18 - and grab visual studio code here
1521:23 - make the size a little bit bigger kind
1521:25 - of ginormous but that's okay
1521:27 - and let's have a look at our log and we
1521:29 - can see the last step was step 19.
1521:33 - let's do a git status and there were a
1521:35 - lot of files modified nothing new
1521:38 - so i'm just going to say git add all git
1521:40 - commit
1521:42 - step 20
1521:44 - and push this
1521:47 - let's have a look at our logs we have
1521:48 - step 19 and step 20 now and if you look
1521:50 - at our tags we have up to step 19
1521:54 - up to and including step 19. so let's
1521:56 - tag this as step 20
1521:59 - and then push our tags
1522:02 - all right that's great
1522:04 - as is tradition again at the end of
1522:06 - every chapter i talk about what we have
1522:08 - to discuss in the chapter that follows
1522:11 - and um
1522:13 - we've talked quite a lot about now uh
1522:16 - allowing the user to store their own
1522:17 - notes in the application but
1522:20 - it would be a lot more fun if he allowed
1522:22 - the user to also share those notes with
1522:24 - somebody that they know about
1522:26 - somebody that they know like a friend or
1522:28 - a family member so that's what we're
1522:31 - gonna talk about in the next chapter
1522:33 - sharing notes so i'll see you there
1522:35 - hello and welcome to chapter 38 of this
1522:37 - flutter course in previous chapters
1522:40 - we've been talking quite a bit about how
1522:42 - we sync our notes with our
1522:44 - firestore database and how we can read
1522:46 - those notes back and update them
1522:49 - it'd be really fun also to be able to
1522:51 - share our notes and that's exactly what
1522:53 - we're going to take care of in this
1522:54 - chapter
1522:55 - in order to do that we need to use a
1522:57 - plugin called share plus and share plus
1523:00 - is a plugin plugin as i've
1523:03 - mentioned now so it is not a package
1523:05 - where a package extends the existing
1523:07 - capabilities of flutter into new heights
1523:11 - a plugin takes a completely new route
1523:13 - and
1523:15 - basically
1523:16 - uh goes
1523:18 - well beyond beyond what flutter
1523:19 - internally can deliver and a packet a
1523:23 - plug-in will need to be developed by
1523:25 - excuse me a developer or a set of
1523:27 - developers
1523:28 - and it needs to be written specifically
1523:30 - for
1523:31 - various platforms that that plugin wants
1523:33 - to support for instance ios android so a
1523:34 - developer has to go and write some code
1523:36 - for ios for android web etc etc in order
1523:39 - for that plugin to work on those
1523:41 - platforms
1523:42 - now here we're going to use the share
1523:44 - plus plugin and the share plus plugin is
1523:47 - developed by the flutter community so
1523:51 - what we're going to have a look at here
1523:52 - is to go into
1523:54 - pubdev
1523:56 - so i'm gonna do that right now
1524:00 - excuse me for my throat and in pub dev
1524:03 - we're gonna search for uh share plus
1524:07 - after you've done that you'll see that
1524:08 - you'll end up here and it is by a
1524:09 - verified developer called
1524:11 - fluttercommunity.dev so you can tap on
1524:13 - that and you can get some more
1524:14 - information about the developer here
1524:17 - and you can see that it supports android
1524:19 - ios linux mac os web and windows so what
1524:22 - more could you ask for
1524:24 - um so it's a free package that you can
1524:27 - use in your application and you can see
1524:29 - that all you need to do is just to let's
1524:32 - go to ins installing
1524:34 - and you see you have to say flutter pop
1524:36 - add share plus
1524:39 - and that's exactly what we're gonna do
1524:40 - now in our application so i'm gonna
1524:42 - bring our app here
1524:44 - and let's go ahead
1524:47 - excuse me again
1524:49 - in our terminal and i'm gonna rearrange
1524:52 - things a little bit here
1524:53 - okay
1524:55 - actually perhaps i could do the same
1524:56 - thing that we've done before so
1524:59 - let me increase the size of this
1525:01 - terminal so you see it better
1525:03 - so let's just do the same thing that was
1525:05 - mentioned in the documentation so
1525:07 - flutter pub ad share plus so flutter
1525:11 - op ad share plus
1525:14 - and this share plus since it's it's a
1525:17 - whole new
1525:18 - plugin that you're adding to your
1525:19 - application it's very important that you
1525:21 - basically rebuild your application
1525:23 - because otherwise it won't be available
1525:25 - all right so what you could do is to do
1525:27 - a clean and then rebuilds this is
1525:30 - cleaning is especially important
1525:33 - for ios because sometimes when you add a
1525:36 - new plug-in um since
1525:39 - flutter uses cocoa pods in order to
1525:42 - handle ios
1525:43 - dependencies then your build may not
1525:47 - actually be able to pick up on that new
1525:49 - dependency so it is important to do a
1525:50 - clean but for android it's usually not a
1525:53 - problem so i'm just gonna
1525:56 - excuse me i'm just gonna uh rebuild the
1525:58 - application and see if everything is
1526:00 - working as expected so i'm gonna stop
1526:02 - the application here
1526:04 - and i'm just gonna make sure that
1526:06 - flutter select device is using my
1526:09 - android telephone and then i'm gonna go
1526:11 - to main dart and just say
1526:15 - run run without debugging
1526:17 - and it's it says we have some errors so
1526:19 - let's see if we can fix those errors in
1526:22 - here
1526:24 - okay share plus plugin as you can as i
1526:26 - can see we already have the problem now
1526:28 - in our application so maybe that's why
1526:30 - you have to do a clean so let's go ahead
1526:33 - i'm going to go to terminal and i'm
1526:34 - going to say
1526:35 - flutter clean
1526:38 - okay
1526:40 - that's going to clean the xcode
1526:41 - workspace and hopefully it's going to
1526:42 - clean the android as well so i'm just
1526:44 - going to say flutter clean android
1526:49 - do you mean any of these did i not write
1526:51 - clean
1526:52 - i wrote clear so clean android
1526:55 - oh it's doing the same thing okay
1526:58 - so then i'm gonna do flutter
1527:01 - and let's just say pop get
1527:06 - so that's gonna rebuild all our
1527:08 - dependencies
1527:11 - so there we go now that those errors
1527:13 - have disappeared okay so you may have to
1527:16 - have flutter clean and i was trying to
1527:19 - get away without using that but i was
1527:21 - forced to eventually
1527:24 - so in main dart i'm just going to say
1527:26 - run without debugging and that's just
1527:27 - going to take its time and go to
1527:29 - scr cpy
1527:31 - and i'm just going to bring scr cpy to
1527:33 - the screen as well soon i'll just make
1527:35 - sure that i have wi-fi access on this
1527:37 - phone
1527:37 - because i play quite a lot with wi-fi
1527:40 - and hotspots on this android phone so it
1527:42 - could be that sometimes i don't actually
1527:44 - have wi-fi
1527:47 - okay so that seems to be running and
1527:50 - here is uh that android phone and i can
1527:54 - see that the flutter application is
1527:55 - trying to run great able to run this and
1527:58 - on that phone
1528:01 - so we've done that we've done the clean
1528:02 - and rebuild so that's great
1528:05 - and
1528:06 - the first thing that we're going to take
1528:08 - care of is to disallow sharing mt notes
1528:12 - you see if if you're on a note screen
1528:15 - and you haven't even for instance
1528:17 - written anything in your note you
1528:19 - shouldn't be able to share that note
1528:20 - with anybody because well it's just
1528:22 - empty text in there so let's go ahead
1528:25 - and we need to take care of that
1528:26 - scenario by having a dialogue
1528:29 - and we're going to create this dialogue
1528:31 - inside this folder
1528:34 - excuse me again i've been talking quite
1528:36 - a lot today and that's why my throat is
1528:37 - giving me some trouble
1528:40 - so let's go to lib utilities under
1528:42 - dialogues we're going to create this
1528:44 - cannot share empty node dialog okay
1528:46 - uh let me change the screen layout a
1528:49 - little bit here and
1528:52 - views we have there and we have
1528:55 - services
1528:57 - so let's see what we have constant
1528:58 - synonyms extension services
1529:00 - utilities and views but we don't have so
1529:03 - yeah we have utilities and we have
1529:05 - dialogue so we have to create a new one
1529:06 - let's just say new file and i'm going to
1529:09 - say cannot
1529:10 - share empty node dialog the dart
1529:15 - and you will remember from before that
1529:16 - we already have a
1529:19 - generic dialogue so what i'm going to do
1529:21 - is i'm going to say future
1529:23 - of void
1529:26 - so the function signature is going to
1529:28 - look like this as i'm showing you at the
1529:29 - bottom of the screen so let's say show
1529:31 - cannot share empty
1529:33 - notes dialogue it's quite a long name
1529:35 - and then it return it requires a build
1529:37 - context so build context context like
1529:40 - this
1529:42 - okay then what we're going to do in this
1529:44 - function is to return
1529:47 - our generic dialog and this is something
1529:49 - that i'm actually quite proud of that we
1529:50 - could create and we are using it so many
1529:53 - times now it's unbelievable so we
1529:55 - literally have one dialog implementation
1529:57 - in the entire application and we're just
1529:59 - reusing it and it's truly generic and
1530:01 - it's really good
1530:03 - so let's in here let's say that we
1530:05 - return our generic
1530:07 - show generic dialog
1530:10 - and it's going to also import that for
1530:12 - me it's inside utilities dialog generic
1530:14 - dialog so you may have to import that
1530:16 - yourself if your
1530:17 - editor doesn't allow you to auto import
1530:20 - so the context is already there for the
1530:22 - title we're just going to say sharing
1530:25 - for the content i'm going to say you
1530:27 - cannot share an
1530:29 - empty note okay
1530:31 - and it's options builder remember it's a
1530:33 - function that should return
1530:35 - um
1530:37 - a map and in the map we're just gonna
1530:39 - say it has one button that has literally
1530:42 - no value
1530:44 - so this is going to make it a
1530:47 - a dialogue that returns a void or a
1530:49 - future of void when we call it here
1530:53 - okay so that file is now created
1530:57 - now what we're going to do is to go and
1530:58 - add that button as you can see it says
1531:00 - in create update note view add an icon
1531:02 - button to actions of app bar so i'm
1531:04 - going to go to my notes as well and
1531:06 - create update
1531:08 - and let's go ahead and just add that
1531:11 - button and
1531:13 - there we go
1531:14 - i can see that we're using a share icon
1531:16 - so i'm going to decrease the size of
1531:18 - this of the font is is very big at the
1531:20 - moment
1531:22 - one more step i i think you can still
1531:24 - see the way it is i mean i can see in
1531:26 - the video output video it should be
1531:29 - visible still even though i've decreased
1531:30 - the size
1531:31 - so let me go here bring scr cpy i'm
1531:35 - gonna close this
1531:36 - safari window
1531:39 - let's go to create update note view and
1531:41 - we already have this button at the at
1531:43 - the top i believe
1531:45 - let's see do we have any buttons at the
1531:47 - top
1531:48 - no we actually don't so
1531:50 - in our app bar so let's go and create
1531:53 - something called actions in here and you
1531:55 - can see it's a list of widgets and in
1531:57 - here we're just going to say icon button
1531:59 - unpressed we're just going to leave it
1532:01 - empty and for its icon we're just going
1532:03 - to say const icon and
1532:06 - and we're going to use icons share
1532:12 - remove this parenthesis from there
1532:14 - and then put
1532:15 - like that okay so now now that we have
1532:18 - this icon icon button there if i press
1532:21 - on any of these existing notes then we
1532:23 - should be able to see a little share
1532:25 - button up here at the moment it doesn't
1532:27 - do anything because it's on press is
1532:29 - empty but we're going to program that
1532:32 - program that right now
1532:34 - so let's grab the current text of our
1532:37 - current node so let's just say that this
1532:39 - is equal to our text controller's text
1532:42 - and we're going to say if note
1532:44 - is not null
1532:45 - and
1532:47 - the text
1532:49 - um actually let's just check for null
1532:52 - and the text
1532:54 - or actually
1532:57 - or this text is empty then we're gonna
1533:00 - display our new dialogue that we just
1533:03 - implemented so let's just say we await
1533:05 - on show cannot
1533:07 - what's that function called the show
1533:09 - cannot uh
1533:12 - we did it inside the cannot share empty
1533:15 - notes so i'm just going to copy its name
1533:17 - and go in here and paste it
1533:19 - and
1533:21 - now i'm going to use visual studio code
1533:22 - to do the auto importing for me
1533:25 - so it needs a build context and in here
1533:28 - i'm just going to pass the context and
1533:29 - you can see it's complaining that i'm
1533:31 - using a weight inside an unpressed
1533:33 - function that isn't async so i'm just
1533:34 - gonna make this function async okay
1533:37 - otherwise what we're gonna do is we're
1533:38 - gonna use share
1533:40 - and share it is coming from share plus
1533:43 - and it can be auto imported okay so i'm
1533:45 - gonna just also import that and in here
1533:47 - i'm just gonna say share that text it's
1533:49 - really just as simple as that
1533:52 - so let's go in here and i'm gonna create
1533:55 - a new note
1533:57 - you can see it has no text i'm going to
1533:58 - press the share button and now we see
1534:00 - now we're seeing our beautiful little
1534:03 - dialogue that says you cannot share an
1534:04 - empty note fantastic and if i go out
1534:07 - that note is deleted
1534:09 - but then if i go to a note that does
1534:11 - have text for instance van dot's second
1534:13 - note or vandal's first note in in here
1534:14 - i'm going to go to van.firstnode and
1534:16 - then if i press the share button then
1534:18 - i'm going to be presented with
1534:21 - in this case android's default share
1534:24 - sheet or how you want to call it and on
1534:26 - ios you're going to be presented with
1534:28 - the default ios sharing activity so
1534:31 - this is pretty much it so we didn't have
1534:33 - to do much more than this it's literally
1534:35 - the call is share.share so you can see
1534:37 - it's so simple when you drag in a
1534:39 - plug-in especially a plug-in that is
1534:42 - from a verified developer especially
1534:44 - from flutter community or flutter team
1534:46 - or dark dev team themselves
1534:50 - all right perfect so that was for
1534:51 - sharing there's not much more to sharing
1534:54 - than that and we don't have to drag on
1534:56 - on this chapter
1534:58 - so let's go ahead as this tradition
1535:00 - we're gonna go and uh commit our work so
1535:03 - i'm gonna do some shuffling around here
1535:06 - gonna get rid of scrcpy increase the
1535:09 - size of the
1535:11 - screen
1535:12 - and the font so you see better
1535:15 - then let's go to our
1535:17 - terminal
1535:19 - and i'm gonna have a look at our git's
1535:21 - log the previous chapter we committed at
1535:24 - step 20 and we also tagged as a step 20.
1535:27 - let's just do step 21 in this case
1535:30 - so get status we have quite a lot of new
1535:33 - stuff so if i say get status in here you
1535:36 - can see a new file in here as well
1535:39 - so let's commit as
1535:41 - step 21
1535:43 - and push our commit
1535:46 - and i'm gonna go and tag it and say step
1535:49 - 21 as well
1535:51 - and then we push our tags as well okay
1535:54 - perfect so that's it so if you say git
1535:56 - status right now we shouldn't have any
1535:58 - uncommitted files
1536:00 - very well done so um
1536:03 - what we're going to do in the next
1536:05 - chapter is very very exciting we're
1536:07 - going to delve into a block and
1536:10 - if you're a
1536:12 - flutter developer from before you'll
1536:14 - know what block is maybe or maybe you've
1536:16 - heard of it and you want to learn about
1536:18 - it so that next chapter is perfect for
1536:19 - you if you're not a flutter developer
1536:21 - from before you may not know what block
1536:23 - is and i'll explain it more however
1536:27 - i'll just at the end of the chapter i'm
1536:29 - not going to go into the details of the
1536:30 - next chapter but what we have to talk
1536:32 - about is how at the moment our ui which
1536:35 - is our different views are actually
1536:38 - working directly with our services so we
1536:41 - have some services that for instance can
1536:43 - store stuff in the um
1536:45 - in the firestore database and we also
1536:47 - have some services that are like
1536:49 - for our authentication the uis upon
1536:52 - pressing the login button we're going to
1536:53 - the off service and the off service is
1536:55 - coming back with results directly to our
1536:57 - ui
1536:58 - this is working it's fine however
1537:00 - there's better way of doing this and
1537:02 - that's through
1537:03 - separating the logic of our ui
1537:06 - from our business logic ensuring that
1537:09 - our ui is doing what is best what it
1537:12 - knows best and that's drawing things on
1537:15 - the screen but when it comes to handling
1537:17 - logic and like
1537:19 - making api calls and etc the ui
1537:21 - shouldn't really know much about that
1537:23 - the ui should just convey its purpose to
1537:26 - some sort of a layer that we're going to
1537:27 - create in our application with the block
1537:29 - library and that that layer will decide
1537:31 - okay upon this button being pressed i
1537:33 - actually have to do this business logic
1537:35 - so
1537:36 - i'm very excited actually about the next
1537:38 - chapter so
1537:40 - grab some refreshments if you want to
1537:41 - and i'll see you there hello and welcome
1537:43 - to chapter 39 of this flutter course
1537:46 - uh in the previous chapter at the end of
1537:48 - the previous chapter we talked about
1537:49 - that in this chapter we're going to talk
1537:51 - about
1537:52 - the block library and
1537:55 - this is quite a hot topic for flutter
1537:57 - developers like if you're
1537:59 - a flutter developer and you've just been
1538:01 - using vanilla set state
1538:04 - in your application you may have already
1538:06 - heard about
1538:07 - block library and qubits before if
1538:10 - you're not a flutter developer from
1538:13 - before which i actually think the
1538:14 - majority of you taking this course
1538:15 - probably have not been fluttered
1538:17 - involvers from before so you may have
1538:18 - may have not heard about block
1538:20 - uh before so i'm just going to
1538:23 - start this chapter by explaining what
1538:25 - the block library is and why do we need
1538:27 - it
1538:29 - you see the way that we've created our
1538:31 - application at the moment is that we
1538:33 - have direct calls from our ui code into
1538:37 - our different services in order to
1538:38 - interact with data
1538:40 - so
1538:41 - the ui is very well aware of the
1538:44 - business logic so for instance the
1538:49 - the
1538:50 - create or get existing nodes function
1538:52 - that we have when we actually go and
1538:53 - create a new node that is already a word
1538:56 - of the fact that well if you end up in
1538:59 - here i expect a user to be present
1539:01 - inside the application so a user should
1539:03 - be logged in and that's
1539:05 - a sample
1539:06 - an example of a ui component being aware
1539:09 - of the logic the business logic of our
1539:11 - application so they're very they should
1539:13 - be very separate from each other
1539:15 - otherwise
1539:16 - but they're not at the moment
1539:19 - so what is block block is a um is a
1539:23 - library that we're going to drag into
1539:24 - our application soon as you'll also see
1539:26 - is a third-party library call i believe
1539:29 - it is created by a company called
1539:32 - very good ventures
1539:33 - vgv
1539:35 - and there are various flutter developers
1539:38 - and software engineers that are
1539:39 - constantly working in order to
1539:42 - improve the quality of the block library
1539:45 - which is a dependency that will bring
1539:46 - into our application and using the block
1539:48 - library i mean internally is using
1539:50 - streams and streams stream controllers
1539:53 - and futures the stuff that's already
1539:55 - built into flutter but it's like going
1539:57 - to a next level to make things more
1539:59 - abstract so that our application isn't
1540:01 - directly dependent on its business logic
1540:04 - with the ui inter intermixed
1540:07 - so
1540:09 - the reason we need the block library is
1540:11 - just to ensure that our ui is only
1540:14 - taking care of the presentation
1540:16 - of the ui and it's leaving the rest of
1540:19 - the stuff to a business business logic
1540:22 - layer
1540:23 - excuse me
1540:27 - so that's why we need block and we're
1540:30 - gonna use it soon in our application
1540:34 - excuse me
1540:35 - so if that is blocked then what is
1540:37 - flutter block you see block in its in
1540:40 - its internals is a very simple library
1540:44 - that works with streams and stream
1540:46 - controllers so it allows you to for
1540:48 - instance pass data from here to there
1540:50 - and have listeners that listen to
1540:52 - changes that are happening in a stream
1540:53 - so it's only working with like very low
1540:55 - level stream stuff
1540:58 - however when you come to your ui layer
1541:01 - as you remember i mentioned that block
1541:03 - allows you then to separate your
1541:04 - business logic
1541:06 - from your ui so
1541:08 - it's taking care of the business logic
1541:10 - using streams and stream controllers and
1541:11 - futures but when it comes to the ui part
1541:13 - in order to glue this business logic
1541:16 - with the ui
1541:18 - it needs to be able to work with flutter
1541:21 - so
1541:21 - the part that works with streams and
1541:23 - stream controllers using dart okay and
1541:26 - dart asynchronous components but the
1541:28 - part that it wants to glue that with
1541:30 - your ui needs to come to the flutter
1541:32 - world okay
1541:34 - and that is that library in itself is
1541:36 - called flutter block so fl block is
1541:39 - divided into two separate libraries one
1541:41 - is block which takes care of the
1541:43 - business logic etc and the other one is
1541:45 - called flutter block all right
1541:48 - but don't worry about it i'll go through
1541:50 - these with you one step at a time so
1541:52 - you'll learn these
1541:57 - excuse me
1542:00 - so
1542:01 - what we're going to do in this chapter
1542:02 - is going to have
1542:04 - it literally has nothing to do with our
1542:06 - application we've been working with the
1542:08 - notes app and in this chapter we're
1542:10 - actually going to break our application
1542:11 - a little bit by just like literally
1542:12 - replacing
1542:14 - the home page of our application with a
1542:16 - completely new application is nothing
1542:18 - scary i i promise you the changes we're
1542:20 - going to make is is probably only going
1542:22 - to be limited to the main.dark file
1542:26 - and
1542:27 - what we're going to do is to create a
1542:30 - counter application if you if you've
1542:32 - worked with flutter before and you've
1542:34 - started thinking about maybe moving over
1542:36 - to
1542:37 - block you may have actually gone to the
1542:40 - block library's documentation page and
1542:42 - you've seen a counter application in
1542:43 - there where you have a plus and a minus
1542:44 - button and you can increase and decrease
1542:46 - the value that's shown on the screen so
1542:48 - that's like the basic counter
1542:50 - application
1542:51 - but in this example i'm going to show
1542:53 - you we're going to take that example to
1542:55 - the next level and use the block library
1542:58 - and i'm going to introduce all the
1542:59 - basics of the block library to you in
1543:02 - this chapter but we're gonna take it to
1543:04 - the next level and allow the user to
1543:06 - enter some value on the screen and that
1543:08 - value will then be able to be
1543:11 - added or subtracted from the current
1543:14 - value that the application stores so
1543:16 - it's kind of like a counter application
1543:18 - where the user can actually enter the
1543:20 - value that needs to be added to the
1543:22 - previous account or it needs to be
1543:23 - subtracted from the previous account so
1543:25 - that's the difference between our
1543:28 - simple counter application and what
1543:29 - block libraries counter application in
1543:31 - its documentation
1543:34 - introduces you to
1543:36 - all right so
1543:38 - let me bring up this caption in here and
1543:41 - we're going to talk a little bit about
1543:43 - various components of a block
1543:47 - and i'm fully aware that pretty much
1543:50 - everything i'm saying in this chapter up
1543:52 - to where we get to the example is
1543:55 - all
1543:56 - very much abstract in that it is
1543:58 - literally just theory i'm like teaching
1544:01 - you theory here
1544:03 - i personally am horrible at theory like
1544:06 - i didn't excel at school when it came to
1544:08 - theory so i'm very aware that a lot of
1544:11 - you may also have the same um situation
1544:15 - or maybe in the same boat that i am that
1544:16 - are not good with theory and that's okay
1544:18 - i'll just explain these fast and then
1544:20 - we'll go to the implementation so you
1544:21 - can put that to practice so for those of
1544:23 - you who are interested in the theory of
1544:25 - it i'm going to explain different parts
1544:26 - of the block library to you now
1544:29 - so
1544:30 - here the first
1544:32 - component of the block library is a
1544:34 - class called block
1544:36 - now block really it is a container just
1544:40 - imagine a class a class that you add
1544:43 - events to it and every event that you
1544:46 - add to it can produce a state so the way
1544:50 - block works is that it it is a class
1544:53 - that begins with a state so its output
1544:57 - is always a state for instance a state
1545:00 - can be logged in a state could be logged
1545:02 - out
1545:03 - states could be
1545:04 - error screen so just imagine different
1545:07 - states of the application
1545:10 - so that's the input sorry the output the
1545:13 - input to it are your events so
1545:16 - in your block that will develop
1545:19 - you will have
1545:20 - inputs that you for instance say log in
1545:22 - with this username and password
1545:25 - register with this username or this
1545:27 - email and password register oh i forgot
1545:29 - my password and here's my email so these
1545:31 - are events that you
1545:33 - produce and give to your block and then
1545:36 - in turn your block then looks at its own
1545:38 - internals and say oh what was this state
1545:40 - before what is the current event then i
1545:42 - will produce a new state okay so that's
1545:45 - the internal of the block class
1545:51 - now when you have a block class when
1545:54 - we're gonna
1545:55 - subclass from that block class then you
1545:57 - will actually need to create an instance
1545:59 - of that block class and you will do that
1546:02 - using something called a block provider
1546:04 - so that's as its name indicates it is a
1546:06 - class that creates a um
1546:09 - it creates a block instance for you and
1546:12 - then it will allow you to do something
1546:15 - with that
1546:17 - block so
1546:18 - i'll see if i actually can
1546:22 - show you block provider
1546:24 - uh
1546:25 - perhaps we could bring up
1546:28 - a window in here and i'm just gonna
1546:32 - say so block like brarry
1546:37 - you cannot see my screen right now but i
1546:39 - promise you i will show you soon so
1546:41 - here's the uh
1546:43 - main
1546:44 - page for the block library so i'll
1546:46 - increase the font size so you can see it
1546:48 - as well
1546:51 - so let's go ahead and you can see it's
1546:53 - sponsored by very good ventures and
1546:56 - stream and
1546:57 - medo i'm not sure i i may have butchered
1547:00 - this name right now i apologize for that
1547:03 - but then if you look at
1547:05 - the various
1547:07 - parts of block then you'll see let's see
1547:09 - if i can find block provider for you
1547:12 - here
1547:14 - it could be inside the documentation so
1547:16 - i'm going to go to get started and then
1547:18 - i'm going to have a look at block
1547:20 - package block and let's see provider if
1547:23 - you can find the provider in here
1547:25 - somehow
1547:27 - block
1547:29 - uh architecture naming convention
1547:31 - getting started
1547:33 - is there is something uh inside i have a
1547:36 - little bit of a problem right now
1547:37 - actually finding block
1547:40 - provider so let's search for it block
1547:42 - provider
1547:45 - and then we end up here
1547:49 - and
1547:50 - i mean this is not the best
1547:52 - documentation right now to be honest
1547:53 - with you we don't want to look for a
1547:54 - blog provider right here but
1547:56 - as you can see it says it is a flutter
1547:58 - widget which provides a block to its
1548:00 - children so this is how you would work
1548:02 - with a block provider so it creates the
1548:05 - block instance for you and then it will
1548:08 - allow you to return a child all right so
1548:11 - kind of like a builder but not really
1548:13 - all right
1548:15 - so that's block provider and as i
1548:17 - mentioned you can always go to the block
1548:20 - library.dev
1548:22 - website in order to get more information
1548:24 - about block and read its documentation
1548:29 - so the next component you need to know
1548:31 - about is
1548:33 - block
1548:34 - listener so
1548:36 - what is a block listener as its name
1548:38 - indicates a block listener simply allows
1548:41 - you to hook into
1548:43 - a um i'll actually see if we have a
1548:46 - block listener i can see that we have a
1548:48 - blog listener in this application that
1548:50 - we're going to develop so you're going
1548:51 - to learn about it soon but a block
1548:52 - listener as its name indicates it listen
1548:54 - to changes to the states of a block
1548:57 - that's it so you can do some side
1548:58 - effects so displaying a new screen for
1549:01 - instance or displaying an error message
1549:03 - those are all side effects okay so you
1549:05 - can do that with block listener
1549:09 - now let's have a look at what a block
1549:11 - builder is uses your block state changes
1549:14 - to provide you with a widget so
1549:17 - as we have a block provider um sorry
1549:21 - we talked about block provider before it
1549:23 - gives you uh the chance basically to
1549:26 - create
1549:27 - um
1549:28 - a child now inside this child you can
1549:31 - then provide a create a block builder
1549:34 - that listens for changes inside your
1549:36 - block then it allows you to build new
1549:39 - widgets based on those changes so
1549:42 - it's very much like a future builder or
1549:44 - like a stream builder i would say and
1549:46 - we've already used stream builder so you
1549:48 - should know how they work but again this
1549:50 - is just theory so um
1549:52 - i'm gonna talk more about these as we
1549:54 - actually build our application okay
1549:58 - so
1549:59 - after all this we also have a block
1550:01 - consumer and what a block consumer is
1550:04 - that it combine as i've actually written
1550:06 - here it combines block listener and
1550:07 - block builder so a block consumer
1550:10 - listens to changes that happen inside a
1550:12 - block and then it will allow you to do
1550:15 - both a side effect and it will also
1550:16 - allow you to create a widget to display
1550:18 - to the user based on those changes all
1550:20 - right
1550:21 - and again i don't want to go too much
1550:23 - into details in uh for a theory because
1550:26 - depending on how you learn new things
1550:29 - theory may not be your strongest point
1550:30 - just like it is not for me so it could
1550:33 - be a waste of time for you
1550:38 - so let's go ahead and start adding our
1550:41 - dependencies in our project so i'm going
1550:43 - to bring our
1550:45 - notes application to the screen
1550:49 - resize it a little bit so we have place
1550:51 - for scr cpy as well
1550:54 - and we have scr cpy right here as i can
1550:57 - see and this is our application
1550:59 - okay
1551:00 - and the application is running currently
1551:02 - so
1551:04 - then what we're going to do is going to
1551:05 - go ahead and say flutter pop add block
1551:08 - and then flutter pop add flutter block
1551:10 - so
1551:11 - let's go ahead and increase the size in
1551:14 - here then i'm going to go to terminal
1551:17 - say flutter pop add walk
1551:21 - so that's going to do its work
1551:26 - and it added one dependency i'm just
1551:27 - going to say flutter hub at flutter
1551:30 - block
1551:34 - all right
1551:35 - and this is a package so it's not really
1551:38 - a plugin and i don't believe it's a
1551:40 - plugin i think it's a package so it
1551:43 - could be sufficient for us just to stop
1551:45 - our application in here and just say
1551:47 - flutter
1551:48 - clean
1551:50 - that cleans the application that we're
1551:52 - going to say fire pub get
1551:56 - this could be sufficient so
1551:58 - that's gonna do its work
1552:02 - and then we're gonna go
1552:05 - then we're gonna go to our main dart
1552:07 - file and just say run run without
1552:10 - debugging and that's gonna just do the
1552:11 - greater build if you're running on
1552:13 - android or it's gonna use xcode build in
1552:16 - order to build your ios application so
1552:22 - and i'm just gonna let that do its thing
1552:24 - now so
1552:25 - let's just wait
1552:28 - okay now the build is done and i can see
1552:30 - the application running on the screen
1552:32 - without a problem so
1552:34 - what we need to do as the next step is
1552:36 - to do something dramatic and that is to
1552:38 - comment out our home page because we're
1552:40 - gonna replace our home page with another
1552:42 - home page which is gonna use block so it
1552:45 - may sound scary but it's not that scary
1552:47 - i promise you
1552:48 - so let's go into your main dart in here
1552:51 - select home page as it stands right
1552:53 - there and just comment it out
1552:55 - and we're going to create a new stateful
1552:58 - widget again and we call it home page so
1553:01 - stf and home page the reason this is a
1553:05 - stateful widget is because we need a
1553:08 - text editing controller as i mentioned
1553:10 - how we're going to do this example right
1553:12 - now to learn block is to create an
1553:14 - application that gives you a text field
1553:16 - that you can enter a number into we
1553:19 - start with the value of zero
1553:21 - in our block so the block holds on to a
1553:24 - number and then when you and then we
1553:26 - will create two events one an increment
1553:29 - event and a decrement event and
1553:33 - so when we then
1553:34 - give the increment event to our block
1553:36 - then we want to grab the current value
1553:38 - inside the text field so if we start
1553:40 - with zero and then i type five in this
1553:42 - text field and i press increment button
1553:45 - then i want five to be
1553:47 - added to the current state which is 0.
1553:51 - so the result will be 5. the next time i
1553:53 - will type 10 then press decrement so
1553:56 - decrement will be 10 and then it will be
1553:58 - 5 minus 10 so we end up with minus -5
1554:02 - so that's the ui that we're going to
1554:03 - create
1554:04 - and for that we need this home page and
1554:06 - the reason it's stateful is because we
1554:08 - need to grab that text from our text
1554:10 - editing controller okay so
1554:14 - so
1554:15 - that's our new home page and if i now
1554:17 - press command s in here our screen is
1554:19 - going to be black because well this this
1554:21 - is a home page with no
1554:23 - information no scaffold nothing all
1554:25 - right
1554:28 - so and now let's talk about this
1554:30 - absolute beauty that we're going to call
1554:32 - counter state you see
1554:35 - as i mentioned every block has two very
1554:38 - important properties one is its state
1554:42 - and the other one is an event an event
1554:44 - goes in the block and state is something
1554:47 - that comes out the block and so the
1554:49 - state as its name indicates describes
1554:51 - the state of your block
1554:54 - so
1554:56 - if you think about it what we expect
1554:58 - from our block is
1555:00 - a simple integer okay so we could either
1555:02 - say our block's output is integer or we
1555:05 - could define a state that wraps around
1555:07 - that integer so that's exactly what
1555:09 - we're gonna do right now
1555:12 - so let's go ahead and say we have an
1555:14 - abstract
1555:16 - class
1555:17 - and we call it counter state
1555:20 - and then here we have a final integer
1555:22 - called value and then we're gonna create
1555:24 - an initializer here like that
1555:28 - and that's our counter
1555:30 - you could also mark this as immutable if
1555:33 - you want to all right so let's do that
1555:35 - and let me also change the screen layout
1555:37 - a little bit here so you see the code
1555:39 - better so that's like the basic state of
1555:42 - our block okay we're not actually gonna
1555:45 - use the state as it is we're gonna
1555:48 - create two sub states for this as you
1555:50 - will soon see
1555:54 - now
1555:55 - since we're going to create a text field
1555:57 - in the middle kind of like this screen
1555:59 - and the user is able then to enter
1556:02 - pretty much any text in this text field
1556:03 - let's just assume so just normal text
1556:05 - not even integer so the user just say
1556:07 - hello world and then presses the plus
1556:09 - button what should we do in that case
1556:11 - plus button plot plus thing like adding
1556:15 - hello world to the previous value of
1556:17 - five means nothing so we're gonna divide
1556:20 - our state into a valid state and an
1556:22 - invalid state and then present this to
1556:24 - the user in two different ways so let's
1556:26 - go ahead and create a class called
1556:30 - as i've mentioned there counter stayed
1556:32 - valid
1556:34 - so i'm going to actually grab that code
1556:36 - so we don't have to type it ourselves as
1556:39 - you'll soon see
1556:40 - here we have a counter state valid
1556:42 - extends our counter state which is this
1556:45 - one and we have a constant constructor
1556:47 - that says okay give me a value a valid
1556:50 - value and then i'm going to call my
1556:52 - super class with that value
1556:55 - all right so that's a valid state
1556:58 - now let's then create a an invalid state
1557:02 - so let's say class
1557:05 - i'm going to bring the correct caption
1557:07 - as well
1557:08 - invalid state
1557:10 - let's say counter state invalid number
1557:14 - extends counter state
1557:17 - in this case we want this state to
1557:20 - actually include some sort of um
1557:23 - the value that actually made our state
1557:25 - invalid so i'm just going to say that
1557:27 - value is a string and we're going to
1557:29 - call it invalid value here okay
1557:31 - and i'm going to say const and let's
1557:33 - just bring a create an initializer here
1557:37 - a few required parameters in here and
1557:40 - we're just uh
1557:42 - like this so in this case we're going to
1557:44 - create two required parameters one is
1557:46 - the invalid value that caused the error
1557:48 - or cause the state of our block to be
1557:50 - invalid and the other one is going to be
1557:53 - a required of the required parameter of
1557:56 - the previous value so
1557:58 - because we may actually need the
1558:00 - previous value uh
1558:02 - or something or maybe like the ui needs
1558:04 - to display that to the user so if this
1558:06 - is the output of our block the state
1558:08 - remember is the output maybe then the ui
1558:11 - actually upon me trying to plus hello
1558:14 - world with five he may want to use this
1558:16 - previous value to populate that text
1558:18 - field or populate the ui again and say
1558:20 - hello
1558:22 - um
1558:23 - this value that you entered is invalid
1558:25 - but the previous value was this so i'm
1558:27 - just going to show that okay so that's
1558:28 - why we need previous value and here
1558:30 - we're getting an error because we're not
1558:31 - calling super
1558:33 - let's call super with the previous value
1558:40 - okay that's our counter state invalid
1558:42 - number okay so we've created
1558:44 - our two states that uh come from counter
1558:48 - states immutable abstract class
1558:51 - okay
1558:52 - let's go ahead then and create our
1558:55 - counter event
1558:56 - and remember counter event is very
1558:58 - similar to state so first we actually
1559:00 - have to define an event
1559:03 - and let's go ahead and define that event
1559:05 - like this
1559:06 - and you can see it's an abstract class
1559:08 - called counter event and it just
1559:09 - contains a value so it just says the
1559:11 - string that comes from the ui can just
1559:13 - go directly into the counter oven that's
1559:15 - it
1559:16 - and let's make this actually immutable
1559:18 - as well
1559:22 - and what we're gonna do is to create an
1559:25 - event for increment
1559:28 - so let's go and say class increment
1559:30 - value
1559:32 - um
1559:34 - or increment event
1559:36 - extends counter event
1559:38 - okay
1559:39 - and in here we're just going to say
1559:41 - const create a constant
1559:43 - constructor for it and we just grab a
1559:46 - value in here so a string value and it
1559:48 - should just go to the super that's it
1559:51 - and what we need to do is just to grab
1559:53 - this event as well and create a
1559:56 - decrement event
1559:58 - so
1560:00 - let's call this decrement here
1560:03 - like so and again remember the event is
1560:07 - something that we need to trigger and
1560:09 - send to the block from the ui all right
1560:11 - so we're gonna pack these increment
1560:14 - event and decrement event with with the
1560:16 - string that the user has entered in the
1560:17 - ui and then send it to the block as
1560:20 - you'll soon see
1560:23 - so let's go ahead now and do the main
1560:25 - part of this application which is our
1560:28 - block and the way to do that is to
1560:30 - create a class if i can spell class
1560:33 - and say canner block extends
1560:36 - block and you'll see it'll now auto
1560:38 - import it for me because we hadn't
1560:40 - imported block from before
1560:42 - and now let's see if block is imported
1560:44 - somewhere here and that's the package
1560:46 - block block if your editor doesn't allow
1560:48 - you to auto import you will have to do
1560:49 - that by hand
1560:51 - excuse me
1560:53 - so the way to create a block is first
1560:55 - you define the state of that block like
1560:58 - what type of state does it have sorry
1561:00 - events first we start with the counter
1561:03 - event and then the counter state okay so
1561:06 - if you look at the definition of block
1561:08 - class itself you can see the two
1561:09 - parameters are or the two generic types
1561:12 - are the event and the state
1561:14 - so that's here we're saying our events
1561:15 - are of type counter event and our states
1561:17 - are of type counter state
1561:21 - so that's that then let's go ahead and
1561:24 - say we have a counter block
1561:26 - that's the constructor
1561:27 - and what it does is it has to call super
1561:30 - you see and our super actually needs the
1561:34 - initial states so
1561:36 - every block has to have an initial state
1561:39 - and that's when you pass your super okay
1561:41 - so what we're gonna do is we're going to
1561:43 - say we start with the value a valid
1561:45 - value of 0. so we say const
1561:50 - counter
1561:51 - state valid and we start with 0 just
1561:54 - like that
1561:56 - okay
1561:58 - so that's our
1562:01 - let's see what happened there
1562:02 - seems fine to me yeah
1562:07 - okay so that's the initializer in there
1562:10 - now what we need to do is actually grab
1562:13 - these events as they come remember the
1562:15 - ui is gonna
1562:17 - uh basically pass us these events so the
1562:19 - ui is gonna say here's an increment
1562:21 - event with this value here's the
1562:23 - decrement event with this value so we
1562:25 - need to catch those how do we do that
1562:27 - there is a function called on on the
1562:30 - block itself that you can use so we're
1562:32 - going to say on increment value
1562:35 - sorry increment event
1562:36 - and then it gives you two parameters so
1562:39 - if you look at the function signature of
1562:41 - on it actually gives you you see it
1562:44 - gives you the event and an emit so let's
1562:48 - in here just write event
1562:50 - emit
1562:51 - and in here we create a new function and
1562:53 - put semicolon at the end so that's how
1562:56 - we're gonna handle the increment value
1563:00 - same we're gonna do for decrement so
1563:02 - let's just copy that and paste it in
1563:04 - here and just say decrement
1563:07 - all right so what are we doing here now
1563:11 - remember the event that comes in now is
1563:14 - an increment event because we literally
1563:15 - said on increment event so
1563:18 - we're we're then going to get that
1563:19 - integer from our events so remember our
1563:23 - increment event actually has
1563:25 - is of type counter event and then it has
1563:28 - a value of type string so we're gonna
1563:30 - try to parse that as an integer okay
1563:34 - so we're going to say final integer is
1563:37 - int tri parse
1563:39 - and we're going to say event dot value
1563:43 - like that so and try parse is a function
1563:46 - on integer that
1563:48 - will try as its name indicates it's
1563:50 - gonna try to parse a given string and
1563:52 - try to make it an integer and if it
1563:54 - can't then that integer is gonna be null
1563:58 - so let's say if
1563:59 - uh here if integer
1564:02 - is not null
1564:05 - like that
1564:06 - and then we put an else in here
1564:09 - and in the case of an else actually so
1564:12 - it means that hey you gave us something
1564:14 - that we couldn't parse as an integer
1564:16 - what do we do with it all right then
1564:18 - we're going to use our emit
1564:20 - emit is a function on its own you see
1564:23 - it's an emitter that allows you then to
1564:26 - pass a state out your block so i
1564:29 - actually scared myself with my own
1564:30 - finger so you you
1564:32 - have you got your you got your um this
1564:35 - event in now you want to create a state
1564:38 - and pass it out that's how you do it
1564:40 - with emit all right so we're gonna then
1564:43 - say in this case
1564:45 - if we got uh
1564:47 - if actually let's do integer null if we
1564:50 - got null
1564:52 - we're going to handle the error here
1564:53 - sorry about that so if we got not what
1564:55 - we're going to do is we're going to emit
1564:57 - a
1564:58 - counter state invalid number
1565:02 - and we have invalid
1565:04 - value and a previous value
1565:07 - so the invalid value was this value that
1565:11 - was passed to us in here you see event
1565:13 - value
1565:14 - so let's just say that's the event.value
1565:17 - and the next parameter is the previous
1565:19 - value and the previous value is always
1565:21 - stored inside your state
1565:24 - so let me actually do some cleanup in
1565:26 - here so you see the code better
1565:28 - a comma here so let's see what happened
1565:30 - in here you see we're emitting so we're
1565:32 - sending a state outside our block
1565:35 - so we're saying given an increment event
1565:38 - where the integer where the value
1565:41 - couldn't be parsed as an integer we're
1565:43 - emitting a new state saying that hey
1565:46 - your value which was in this event is
1565:49 - invalid
1565:50 - so that's invalid value
1565:52 - and the previous value that we had is
1565:55 - stored inside our state so your block in
1565:58 - all your on functions you have access to
1566:02 - your current state before emitting a new
1566:05 - one all right so that's the previous
1566:08 - value inside state
1566:10 - and if we could actually grab an integer
1566:13 - we're going to emit a new value a new
1566:15 - state and we're going to say counter
1566:17 - state valid
1566:20 - okay
1566:21 - and we're going to say we take the
1566:22 - current value in our state plus it this
1566:25 - integer like this
1566:28 - right
1566:29 - like that so
1566:31 - that's for increment
1566:35 - and as you'd guess
1566:37 - decrement i'm going to remove this comma
1566:39 - by the way it was annoying me a little
1566:40 - bit and decrement it's very similar to
1566:42 - increments so i'm just going to copy
1566:44 - this code and remove this decrement one
1566:47 - and paste the increment one one more
1566:48 - time and then this time i'm just going
1566:50 - to change it to decrements like this all
1566:52 - right
1566:53 - and for the big decrement the only thing
1566:56 - you have to do is just to change this
1566:57 - plus to a minus and that's it
1567:00 - all right
1567:04 - wow a lot of work a lot of work so
1567:08 - now let's go ahead to our
1567:11 - home page in here
1567:13 - now we've basically gotten the block
1567:15 - down so the block should be working as
1567:17 - uh
1567:18 - as we want it to so
1567:22 - so let's now go into this homepage that
1567:24 - we created in here and create our text
1567:26 - editing controller
1567:30 - so for that i'm just going to say
1567:32 - late final
1567:35 - text editing controller and we're
1567:38 - calling it controller as i can see here
1567:40 - let's go into init state and override
1567:44 - also the dispose function okay
1567:46 - i'm gonna bring the code so you can see
1567:48 - it
1567:50 - i'm gonna bring it up so
1567:52 - in in its state we're gonna instantiate
1567:54 - our controller so this is nothing new
1567:56 - you've already done this before many
1567:58 - times
1567:59 - and in here we're gonna dispose of that
1568:01 - control
1568:05 - uh fantastic all right that part is done
1568:08 - so what we need to do now inside our
1568:10 - build function we're gonna basically
1568:13 - we have to create um
1568:16 - our main ui so i'm gonna bring the
1568:18 - caption for that as you can see we have
1568:20 - to use block provider and block consumer
1568:23 - so in the build function right now we
1568:26 - only have a container so let's instead
1568:29 - of doing a container say okay we want to
1568:31 - create a block and we also want to just
1568:33 - like make sure everything after this
1568:36 - return statement has access to that
1568:37 - block so we need the block provider so
1568:39 - let's say block
1568:40 - provider and block provider is in a
1568:43 - flutter block package as you can see
1568:45 - here and we haven't imported that yet so
1568:47 - let's import that right now
1568:49 - in the create
1568:52 - parameter we get a context as you'll see
1568:55 - i can get visual studio code to complete
1568:56 - this for me it says i will give you
1568:58 - context and you'll give me a block back
1569:00 - so i'll say okay i'll take the context
1569:02 - and i'll create a counter block here
1569:06 - okay
1569:07 - so that's the first parameter then we're
1569:09 - getting an error here just because we
1569:10 - haven't provided a child here so if i
1569:12 - say child in here is a text
1569:16 - of hello world
1569:18 - and press command s then we see hello
1569:20 - world right there okay so in here our
1569:22 - task then is to create a scaffold so
1569:25 - let's create our scaffold just we
1569:27 - usually like we usually do
1569:29 - and for our app bar
1569:32 - let's create an app bar in here and say
1569:34 - app bar
1569:35 - title is it const
1569:38 - can't see anything because the
1569:39 - documentation is all over the place cons
1569:42 - text and i'm going to say testing
1569:47 - all right so now we have a blog provider
1569:50 - that created an instance of our counter
1569:52 - block and then we have a scaffold with a
1569:54 - beautiful app bar displayed on the
1569:55 - screen okay
1569:57 - so as the caption at the bottom screen
1570:00 - mentions for
1570:02 - uh our child the child of our block
1570:04 - provider is a scaffold but inside the
1570:06 - scaffold itself we have body
1570:09 - and for the body then we're going to
1570:11 - create a block consumer so remember a
1570:15 - block consumer is
1570:18 - it is
1570:19 - the combination of a block listener and
1570:22 - a block builder
1570:24 - we need a block consumer here is and the
1570:26 - reason for that is upon every
1570:29 - pressing of the plus or the minus
1570:31 - buttons that we're going to develop soon
1570:33 - we want to clear the text inside of our
1570:36 - text field
1570:37 - so that's a side effect so
1570:40 - by us saying that okay whenever there's
1570:42 - a new state coming out of our block we
1570:44 - want to clear something so this is a
1570:46 - signal when you want to do a side effect
1570:48 - that has nothing really to do with like
1570:50 - a business logic or such
1570:52 - then that is your listener so
1570:55 - so we're saying that we need a block
1570:56 - listener but also we want to for
1570:59 - instance be able to
1571:01 - have a builder so we want to build our
1571:03 - ui based on the current state of the
1571:05 - block
1571:06 - well that is block builder so if you
1571:08 - need a block listener anywhere in your
1571:10 - application and a block builder you need
1571:13 - to instead use block consumer if you're
1571:15 - if you need them at the same level okay
1571:17 - so block consumer combines block
1571:19 - listener and block builder so that's why
1571:22 - we're using block consumer in this
1571:27 - block consumer it's going to say okay
1571:29 - what block am i operating on so i'm just
1571:31 - going to say you're operating on counter
1571:32 - block and then it says what state am i
1571:35 - operating on and we're going to say
1571:37 - counter state
1571:39 - let's see if they're available counter
1571:44 - and you can i mean i'm not making this
1571:46 - up this stuff is present in the
1571:48 - documentation if you go to block
1571:50 - consumer as well
1571:52 - let's see in here what it says it says
1571:53 - uh extend state state streamable so
1571:57 - that's the
1571:59 - the b here b for me means the block and
1572:01 - s is the state so it's not so clear
1572:04 - because it's working with a lot of
1572:05 - generics but you can read the
1572:06 - documentation about that okay
1572:08 - so let's go in here and in here let's
1572:11 - have a look
1572:14 - and it's complaining that some named
1572:16 - parameters aren't present as you can see
1572:18 - named parameter listener is required so
1572:20 - let's go ahead and say listener
1572:22 - and i'm going to get visual studio code
1572:24 - to help me clean this up and upon any
1572:27 - new events or sorry upon any new states
1572:30 - produced by our blog i want to clear our
1572:33 - text editing controller so let's just
1572:35 - say text controller
1572:37 - uh
1572:38 - what do we call it do we call it
1572:40 - controller
1572:41 - yeah so we're going to say controller
1572:43 - clear so we're going to clear the text
1572:45 - that is displayed inside the text field
1572:47 - soon okay
1572:49 - then we need the builder function so in
1572:51 - this builder function
1572:52 - as you'll see the
1572:54 - it will give you the current state and
1572:56 - you need to return a widget back okay
1572:59 - so what we're going to do in this
1573:01 - in this is first we're going to grab
1573:04 - like um
1573:06 - to see if there's an invalid value so
1573:09 - let's just say final invalid value
1573:11 - is and we're going to say if this state
1573:14 - is a counter state
1573:16 - invalid number
1573:19 - with a question mark so we're using
1573:20 - turner here and we're going to say get
1573:22 - the states uh let me bring the code up
1573:25 - uh invalid value
1573:28 - otherwise we're gonna say
1573:31 - empty string so
1573:33 - if i then in here say invalid value as
1573:35 - you can see it's now a string okay
1573:38 - and the reason behind this to be honest
1573:40 - with you is so that we can
1573:43 - basically
1573:45 - display
1573:47 - the a little error message to the user
1573:49 - should there be an invalid value so if i
1573:52 - have if i have entered some information
1573:54 - in the text field instead of a number
1573:56 - i've entered hello world and then
1573:58 - our block produces a counter state
1574:00 - invalid number we're going to display an
1574:03 - error to user and this error is gonna
1574:05 - disappear the next time actually the
1574:07 - user enters a valid number in the text
1574:09 - field okay so we're gonna use a new
1574:11 - widget that we haven't used before
1574:12 - called visibility and this visibility is
1574:16 - gonna be based on whether there is an
1574:18 - invalid state or not so
1574:21 - you'll soon see actually how we're gonna
1574:23 - implement that so
1574:24 - let's go and as our builder's main like
1574:28 - return value create a column
1574:31 - okay and column has to have children all
1574:34 - right so
1574:35 - what we're going to do is to first
1574:37 - display a text field sorry a text in
1574:39 - here so let's just say text
1574:41 - and we're going to say current value is
1574:43 - equal to this state value
1574:46 - all right so that's going to be the
1574:48 - current value of our
1574:51 - state and if i do command s you can see
1574:53 - that it says current value is 0.
1574:59 - so that's the current value then what
1575:01 - we're going to do is to go ahead and
1575:04 - create a
1575:06 - visibility widget which in case the
1575:09 - current state is counter state invalid
1575:12 - number is going to display an error
1575:14 - message to the user so let's say we're
1575:16 - going to control the visibility of that
1575:18 - error message using the visibility
1575:19 - widget
1575:21 - like this
1575:24 - and it's childband is going to be
1575:26 - a text that says
1575:29 - invalid inputs and then we're going to
1575:31 - add the invalid value in here as you can
1575:33 - see as we've constructed that up there
1575:36 - already
1575:38 - and the visibility flag you see we have
1575:40 - to return a boolean okay so how do we
1575:42 - know that
1575:44 - we have to display
1575:48 - this widget
1575:50 - with visibility and that is if you can
1575:53 - grab hold of your state and say okay
1575:55 - this state is actually counter state
1575:57 - invalid number so let's just say state
1576:02 - is counter state invalid number just
1576:04 - like that okay so that's how we grab
1576:07 - hold of that invisibility
1576:09 - and you can see at the moment it's not
1576:11 - displayed all right even if we even if
1576:13 - we put some
1576:15 - um actually let me just
1576:17 - say is not
1576:19 - and then save it and you'll see now it
1576:21 - says invalid input so it's just
1576:22 - displayed right there okay but if you
1576:24 - say state is then it's going to
1576:26 - disappear because the current state is
1576:28 - not invalid number
1576:32 - okay that was for visibility now let's
1576:34 - go and add our text field
1576:37 - so where the user can actually enter
1576:38 - some information in the ui so let's just
1576:40 - say text field
1576:41 - as the first parameter we're going to
1576:43 - say the controller
1576:44 - is our controller
1576:46 - okay
1576:48 - and what we're going to do is we're
1576:49 - going to give it a hint text so let's
1576:51 - say decoration is a const inputs
1576:53 - decoration
1576:56 - like that i'm going to put the code a
1576:57 - little bit higher on the screen
1576:59 - so for the hint text i'm just going to
1577:01 - say
1577:02 - enter and number here
1577:04 - like this okay and also let's just
1577:07 - enforce the keyboard type
1577:10 - uh text input type
1577:13 - of a number
1577:14 - all right but also remember if you
1577:17 - oops
1577:18 - the controller has not been initialized
1577:20 - really i thought we initialized the
1577:21 - controller
1577:23 - yeah maybe you have to do a hot restart
1577:26 - there we go so now we have enter a
1577:28 - number here okay
1577:31 - great stuff now all right this is what i
1577:33 - was going to say even though we have a
1577:36 - text field here and we actually said
1577:38 - that the keyboard should be numerical
1577:39 - but i can still paste non-numerical
1577:42 - numbers in here so if i like use the
1577:43 - paste functionality in android or is so
1577:46 - that's the reason we have that invalid
1577:48 - state in case someone else someone
1577:50 - actually enters another value except for
1577:52 - a number and there are also input
1577:54 - formatters in flutter that you can use
1577:56 - in order to for instance um
1577:58 - avoid users entering non-valid values in
1578:02 - your text fields but that's a whole
1578:03 - other subject that we're not going to
1578:05 - discuss in this chapter so
1578:08 - then what we're going to do is we're
1578:09 - going to have two text buttons for
1578:11 - increment and decrement so let's after
1578:14 - this text field create a row so
1578:17 - a row is like the opposite of a column
1578:19 - whereas a column displays those
1578:21 - components vertically one after one
1578:23 - after each other a row creates its
1578:24 - components horizontally from left to
1578:26 - right and left speaking languages and
1578:28 - right to left
1578:29 - right
1578:30 - speaking right side speaking language i
1578:32 - believe
1578:33 - i think actually row changes it's uh
1578:36 - it should at least change is uh
1578:40 - how it arranges components based on the
1578:42 - language but i'm not quite sure about
1578:43 - that
1578:45 - so let's say row it has children
1578:49 - and it's two text buttons okay
1578:53 - that have unpressed at the moment empty
1578:56 - and um
1578:57 - it's a child it just says cons text just
1579:01 - minus like this okay so that's first
1579:04 - that's the first button
1579:06 - and then for the next one i'm just gonna
1579:09 - copy this text button and i'm gonna
1579:11 - paste it right here and in here i'm just
1579:14 - going to say plus
1579:17 - all right so in here when the minus
1579:20 - button is tapped i want to convey this
1579:22 - information to our block so i want to
1579:25 - say grab the controllers text and make
1579:29 - sure that you send this increment
1579:32 - where is it here
1579:33 - increment event to the block so we kind
1579:36 - of need to grab hold of our block
1579:39 - how do we do that the way to do that is
1579:41 - using a convenient function that
1579:44 - the good people at good
1579:47 - very good ventures have created on
1579:48 - context and it's called read
1579:51 - and in here you can actually say i want
1579:53 - to read my counter block like this okay
1579:57 - so this gives you access to your block
1580:00 - that has been created by the block
1580:02 - provider
1580:04 - so let's go ahead and in here let's say
1580:06 - after we read that we want to add a new
1580:08 - event to it like this and we want to add
1580:11 - an increment event that has the value of
1580:14 - our
1580:15 - controller.txt
1580:16 - like this all right so
1580:18 - this is how you send events to your
1580:20 - block and the same thing since we're
1580:23 - actually sorry about that this should be
1580:24 - decrement so let's just say decrement
1580:28 - like that and we copy the same code and
1580:30 - we bring it to our increment function as
1580:33 - unpressed button here and instead of
1580:35 - decrement then we're going to say
1580:36 - increment
1580:39 - right
1580:41 - perfect okay so let's see now let's test
1580:44 - this application so at the moment we
1580:45 - have current value zero now if i press
1580:48 - the plus button as you can see it says
1580:50 - invalid input
1580:51 - all right but if i say 2
1580:54 - and press the plus button you can see
1580:56 - the value of 2 is entered there if i say
1580:58 - hello world here
1581:01 - i press minus and it says oh invalid
1581:03 - input hello world is invalid and as you
1581:06 - can see it clears this text and that's
1581:07 - because of this listener here
1581:10 - uh this listener because a block
1581:12 - consumer is also block listener remember
1581:14 - so it's a combination of a block
1581:15 - listener and a block uh
1581:17 - builder
1581:18 - so that's the clear working and the part
1581:21 - that is handling this invalid input is
1581:24 - this thing so visibility if the current
1581:27 - state is an invalid number then this is
1581:30 - becoming visible but if the current
1581:31 - state is not an invalid number so let's
1581:33 - say three four plus two
1581:35 - it's going to be three six then the
1581:37 - current state is actually not an invalid
1581:39 - number is uh
1581:41 - the current state should be
1581:44 - valid it should be counter state valid
1581:46 - so then the visibility is hiding that
1581:49 - error message so
1581:51 - so that is pretty much it i mean um
1581:54 - huge congratulations if you could stick
1581:56 - with me throughout this chapter it was
1581:57 - very heavy i understand it was a very
1581:59 - heavy and very like technical chapter
1582:02 - talking a lot about business logic but
1582:04 - believe me if you didn't understand like
1582:07 - most of the things i talked about you
1582:08 - just need to practice
1582:10 - i'm no genius nobody who knows how to
1582:13 - work with block or stuff like this is a
1582:15 - genius everybody has practice put it
1582:18 - into practice done their own
1582:19 - applications done this test just go and
1582:21 - create this counter application that i
1582:23 - just created try not to look at
1582:25 - the code that i've written or rewritten
1582:27 - in this just try to
1582:29 - remember the stuff from your memory and
1582:31 - after exercise and practice and practice
1582:34 - and practice and you will get it and you
1582:36 - will get the idea of what a state is
1582:38 - you'll get the idea of what events are
1582:40 - what block is and read documentations
1582:42 - and you'll get this eventually i promise
1582:44 - you that
1582:47 - as is tradition we're gonna now uh since
1582:49 - we're done with what we prom promised in
1582:52 - this chapter we're gonna go and commit
1582:54 - our code
1582:55 - so let me change the screen layout a
1582:58 - little bit and go to uh
1583:00 - terminal and increase the size get rid
1583:04 - of the crcpy
1583:06 - and let's have a look at our log
1583:09 - last
1583:10 - chapter we committed step 21 so let's
1583:13 - see git status
1583:14 - and there were just a few things changed
1583:16 - so let's add everything and just say git
1583:18 - commit step 22
1583:21 - and let's push our chase
1583:24 - and then i'm just going to say git
1583:26 - commits sorry it's
1583:28 - a tag to see our last tag and i can see
1583:31 - it was 21.
1583:32 - so let's tag this as step 22
1583:35 - and say git push tags
1583:40 - there we go so now step 22 is also
1583:43 - tagged and ready
1583:47 - so
1583:48 - what is to come this is also a tradition
1583:50 - we have at the end of every chapter
1583:51 - we'll talk about what we're what we need
1583:52 - to discuss in the next chapter and what
1583:54 - we need to discuss in the next chapter
1583:55 - is and we will convert our auth process
1583:58 - to using block so
1584:00 - we've now talked we've act we actually
1584:02 - got our auth
1584:04 - logic inside our application and that
1584:06 - was our auth service i don't know if you
1584:07 - remember from before
1584:09 - but we need to convert this auth service
1584:11 - to block
1584:12 - and uh so in that way we're actually
1584:15 - putting our knowledge about block into
1584:17 - use and combining it with what we've
1584:20 - already developed to make our
1584:21 - application better and our logic not so
1584:24 - spread around everywhere in the ui so
1584:27 - if you want grab some refreshments tea
1584:28 - or coffee and i'll see you in the next
1584:30 - chapter hello everyone and welcome to
1584:32 - chapter 40 of this letter course in
1584:34 - previous chapters we've been talking
1584:36 - about um
1584:38 - our aus process and also storing um
1584:41 - users notes into a firestore database
1584:45 - and in the previous chapter we also
1584:48 - talked about block so um i'm very aware
1584:51 - that block could be an intimidating um
1584:55 - topic for some developers and that
1584:57 - getting started with block could just
1585:00 - be conceived as like an extra step that
1585:02 - you
1585:03 - think you don't need
1585:05 - however i can assure you when you get
1585:07 - more into professional software
1585:08 - development
1585:10 - and which is which may not be your goal
1585:12 - i completely am aware of that but when
1585:14 - you get more and more to professional
1585:16 - software development you'll understand
1585:17 - that you need to separate
1585:20 - various layers of your product and that
1585:23 - the um the presentation layer where
1585:25 - you're taking care of for instance
1585:27 - displaying stuff on the on the screen to
1585:29 - the user shouldn't really have to talk
1585:31 - with your authentication directly um or
1585:35 - for instance your authentication layer
1585:37 - doesn't necessarily have to depend at
1585:38 - all on other parts of the application so
1585:42 - block is gonna allow you to
1585:44 - in a very clean and concise way to
1585:46 - separate the various uh layers of your
1585:49 - application into their own concern
1585:51 - layers so and the services are going to
1585:54 - be only concerned with services and then
1585:56 - your ui is going to be only concerned
1585:57 - with ui and so on so and so forth so
1586:01 - um it could be beneficial if you could
1586:03 - actually before starting with this
1586:05 - chapter to go to the previous chapter
1586:07 - and maybe watch it again or maybe even
1586:09 - practice yourself with block
1586:12 - um i understand i know for sure that the
1586:15 - block libraries website as we looked at
1586:18 - in the previous chapter they have quite
1586:20 - a lot of examples and i highly suggest
1586:22 - that you go through some of those
1586:24 - examples at least and develop and
1586:26 - implement those examples also yourself
1586:28 - to get a bet to get a better hang of
1586:31 - what a block actually means and how
1586:33 - you're supposed to use it so
1586:35 - if you've taken care of that and you
1586:37 - understand like the basics of block
1586:40 - then we're we're we should be good to go
1586:42 - for this chapter
1586:44 - so let me bring up the caption for what
1586:47 - we're actually going to do in this
1586:48 - chapter you see the way we have our
1586:51 - application at the moment is that we
1586:52 - have our
1586:54 - authentication service and our
1586:56 - authentication service let me just bring
1586:57 - that to the screen here
1586:59 - and let's have a quick look at it so if
1587:01 - i go to our
1587:02 - auth service you'll see that we have
1587:04 - quite a few
1587:05 - function functions in here we have
1587:07 - create user
1587:08 - and we have uh we are exposing the
1587:11 - current user we have login logouts and
1587:13 - email verification and initialize
1587:16 - now this is all good however we are it's
1587:19 - very raw the way it is in that the ui is
1587:22 - literally making calls to
1587:24 - our auth service which in case which in
1587:26 - turn is making calls to
1587:28 - a provider which is our for instance um
1587:32 - firebase provider author provider so if
1587:34 - you go in here you'll see firebase auth
1587:36 - provider and that is talking directly
1587:38 - with firebase so
1587:40 - in a way you could say that the ui is
1587:42 - talking pretty much directly with
1587:44 - firebase it's just going through some
1587:45 - functions to get to firebase but that's
1587:47 - what pretty much it's doing so
1587:50 - what we want to do in this chapter is to
1587:52 - try to
1587:53 - make sure that our authentication is
1587:55 - behind a layer of block meaning that all
1587:58 - the logic that has anything to do with
1588:00 - authentication is hidden behind a layer
1588:03 - which we're going to call off block
1588:06 - so that's going to be our off block so
1588:08 - it's like the and as you remember from
1588:09 - the previous chapter every block has two
1588:12 - parameters one is what is
1588:15 - what comes inside the block so what's
1588:17 - entered and what is the output
1588:21 - the input to your block are your events
1588:24 - so you pass for instance your ui upon
1588:27 - pressing a button then you
1588:28 - you pass an event a packaged event that
1588:31 - we call our auth event you're gonna pack
1588:34 - package that up with any parameters that
1588:36 - that particular event is required it is
1588:39 - required from you you take that event
1588:42 - and you give it to your auth lock then
1588:44 - your off block is then gonna have some
1588:46 - time to process you remember
1588:48 - we have these on function functions on
1588:51 - your uh off on your blocks when we
1588:54 - talked about the counter block we had on
1588:56 - increment event on the command event etc
1588:59 - so these are the events that come in so
1589:01 - we're going to package those events up
1589:03 - from our ui and pass them to our off
1589:06 - block then our off block is going to
1589:08 - have some time for itself to process
1589:10 - those events and based on those events
1589:12 - that it has
1589:14 - it has received and based on its current
1589:16 - state it's gonna either output the same
1589:19 - state or it's gonna output a new state
1589:22 - so
1589:22 - events come in and states go out and the
1589:25 - off block sits in the middle so event
1589:28 - off block and estate and these are three
1589:32 - components that we're going to develop
1589:33 - in this chapter
1589:36 - so
1589:37 - let's go ahead and
1589:39 - take care of our state and remember
1589:42 - again state as its name indicates is the
1589:44 - state of authentication either you're
1589:46 - logged in or you're logged out okay and
1589:49 - you could also be logged out with an
1589:51 - error remember so you're either logged
1589:53 - in or logged out
1589:55 - with an error so
1589:57 - we're going to start looking at these
1589:59 - off states so what we need to first do
1590:02 - is to create a file as the caption
1590:04 - indicates
1590:05 - under lip services auth block off state
1590:08 - so
1590:10 - let me do some reshuffling on the screen
1590:12 - here
1590:13 - maybe decrease the font size a little
1590:15 - bit because it's just ginormous the way
1590:17 - it is right now so maybe this font is a
1590:19 - little bit better
1590:22 - i'm going to put visual studio studio
1590:23 - code in there
1590:25 - to the left and then i'm gonna bring scr
1590:27 - cpy to the right
1590:30 - okay so i'm gonna close all these tabs
1590:32 - that i have right here how we left the
1590:34 - application in the previous chapter and
1590:36 - let's go ahead inside lib let's let's
1590:38 - see actually what we have in here we
1590:40 - have lib and we have services
1590:42 - and under services we already have auth
1590:45 - but we don't have a folder called block
1590:47 - at the moment we have auth provider etc
1590:49 - etc
1590:50 - so let's go in off and just create a new
1590:52 - file in here and say block
1590:54 - slash auth state state like this dot
1590:57 - dart
1590:58 - okay
1590:59 - so that's our off state
1591:03 - now if you remember from the previous
1591:05 - chapter when we talked about
1591:07 - the counter block
1591:08 - um
1591:10 - usually states are immutable and that
1591:13 - they're also they're like at the generic
1591:16 - states that every other state in your
1591:19 - block
1591:21 - inherits from
1591:22 - is usually an abstract immutable class
1591:25 - meaning that it is a class pretty much
1591:27 - almost with no logic at all it may have
1591:30 - a constant constructor but
1591:32 - in and on itself it does nothing so it
1591:35 - just is dictating that hey every state
1591:39 - that comes out of this off block is of
1591:41 - this type okay so
1591:43 - let's go ahead and create our off state
1591:46 - so maybe i should actually increase the
1591:48 - size of that font
1591:50 - so we're going to start by writing um
1591:54 - our
1591:56 - states as you can see so we're going to
1591:57 - code that in auth state.dart file
1592:00 - so i'm going to go ahead and just say
1592:02 - abstract class auth state okay
1592:06 - and let's just create a constant
1592:08 - constructor for it as well in case one
1592:10 - of our states needs to also have a
1592:11 - constant constructor so this is this is
1592:13 - a pattern that you may have already been
1592:15 - used to
1592:16 - by creating abstract classes and if you
1592:18 - have like sub classes that conform to
1592:20 - your abstract classes and those
1592:22 - subclasses actually want to have
1592:23 - constant constructors then you need to
1592:25 - have a constant constructor in your
1592:27 - abstract class as well so that those
1592:29 - subclasses can actually call that const
1592:31 - constructor in the abstract class
1592:33 - otherwise you won't be able to have
1592:36 - constant constructors for your
1592:38 - subclasses so for instance if i say
1592:40 - abstract
1592:41 - class blah
1592:43 - extends off state and if i say const
1592:47 - blah like this you can see it says a
1592:49 - constant constructor can't call a
1592:50 - non-constant superconstructor and that
1592:53 - is the reason that i usually create a
1592:54 - cons constructor for my
1592:56 - um
1592:58 - classes for states and for um the events
1593:02 - okay
1593:05 - okay now we have our abstract class off
1593:07 - state now let's go and make it immutable
1593:10 - and for that we need to import material
1593:12 - or actually it is foundation let's
1593:14 - import from foundation in that case and
1593:16 - we could just say show immutable
1593:19 - can we do it like that yeah that works
1593:21 - as well okay
1593:23 - so that's that we have a generic off
1593:26 - state so um actually i don't mean
1593:29 - generic in terms of like a dart generics
1593:31 - which i just mean an abstract class that
1593:33 - every other off state can conform to
1593:37 - okay so we have basically a
1593:41 - low i mean we have quite a few states so
1593:43 - i'm just going to start doing and doing
1593:45 - and creating those off states one at a
1593:47 - time so
1593:48 - while you're authenticating for instance
1593:50 - while you're
1593:52 - let's say that you are
1593:54 - you've just opened the application and
1593:56 - then we need to basically tell our
1593:57 - authentication um provider which is
1594:00 - firebase to initialize itself while it's
1594:02 - doing that then our auth state is in the
1594:05 - state of loading or initializing
1594:08 - whatever you want to call it but we kind
1594:09 - of need have to have a state that
1594:11 - indicates to the application that hey
1594:13 - something is happening with the auth
1594:15 - process and it is in the in the process
1594:17 - of loading so let's go ahead and define
1594:19 - that so let's just say off state loading
1594:22 - extends off state just like that okay
1594:26 - and this could also have a const
1594:28 - constructor so let's just say like that
1594:31 - okay so
1594:32 - that's the state of loading and we can
1594:35 - actually use the state of loading and i
1594:37 - believe we're actually going to use it
1594:39 - while the user for instance is has just
1594:42 - opened the application and the
1594:43 - applications is initializing
1594:45 - and we can also use it for instance when
1594:48 - you tap the login button in order to log
1594:50 - into the application and we're
1594:52 - communicating with firebase and that is
1594:54 - also a state of loading okay
1594:58 - so you will see soon now these states
1595:01 - are very important how the ui then
1595:02 - reacts to various events that are or
1595:05 - various states that are happening in our
1595:07 - off
1595:08 - block
1595:11 - so let's say that
1595:12 - we have the loading state let's just
1595:14 - define a a logged in state so when the
1595:17 - user has already logged into our
1595:19 - application then that is its own
1595:20 - separate state so let's go ahead and say
1595:23 - off state logged in
1595:25 - and it extends the off state
1595:28 - and now
1595:29 - this is important to see okay when
1595:32 - you're logged into the application what
1595:34 - does the application actually need from
1595:36 - us well the only thing the application
1595:39 - needs from us when you have logged in
1595:41 - with the user is the current user at the
1595:43 - moment we are going to our auth provider
1595:46 - and or our auth service and grabbing the
1595:48 - current user but if we're gonna move
1595:50 - over to block and like blockifying our
1595:52 - entire auth process then it makes more
1595:55 - sense for us to grab the current user
1595:58 - that has logged into the application
1596:00 - from the current state of our auth block
1596:04 - it's it's i mean to me it's really
1596:05 - beautiful because
1596:07 - it makes sure that we can separate
1596:10 - the auth service and the auth provider
1596:12 - from the ui by putting a block in the
1596:14 - middle
1596:15 - so
1596:16 - i mean the name kind of
1596:18 - it may sound like you're blocking the ui
1596:20 - but that's not how block is written as
1596:22 - bloc it's not block so
1596:25 - but that's that's what we need to do so
1596:27 - let's just say we have the final off
1596:29 - user and it's going to auto import it
1596:31 - for me if you're using vim if you're on
1596:33 - linux and or if you're using subline
1596:35 - that it's not able to auto import things
1596:37 - then you'll need to auto you need to
1596:38 - import off user yourself okay
1596:41 - so let's say that a state of logged in
1596:44 - or always carries with itself the
1596:45 - currently logged in user okay so we're
1596:48 - just going to say user and i'm going to
1596:50 - create a constant constructor then for
1596:52 - this class as well which in turn is
1596:54 - going to cause
1596:55 - automatically for us on off state okay
1596:58 - so that's our state of logged in
1597:02 - now let's say that we're going to define
1597:04 - also
1597:05 - a logged out state and but also we want
1597:08 - to um
1597:10 - we
1597:11 - actually before we go to log out maybe
1597:13 - we have to talk about talk about login
1597:16 - when you're trying to log in a user in
1597:18 - our application today if we go to our
1597:21 - login view you'll see that upon pressing
1597:23 - the button to log in then we're doing a
1597:26 - try a weight of auth service firebase
1597:28 - login so we're literally going towards
1597:29 - firebase directly and then if anything
1597:32 - goes wrong then we're doing like a user
1597:34 - not found off exception wrong password
1597:37 - off exception so we're handling our
1597:39 - exceptions in this way and the way that
1597:41 - we need to do this now with uh fire with
1597:44 - block is that we need to produce a state
1597:47 - you see the ui needs to only talk with
1597:50 - that block so it says hey block here's
1597:52 - an event go log in
1597:55 - and then it says and then a blog is
1597:56 - going to do some processing and then
1597:58 - maybe it says oh incorrect user
1598:00 - incorrect email
1598:02 - or password is wrong or whatever so that
1598:06 - needs to be its own state so
1598:09 - at the point where
1598:10 - an exception has occurred during login
1598:13 - that is a state login failure we're
1598:16 - going to call it login failure so the ui
1598:18 - is then going to react to that
1598:20 - particular state in order to display for
1598:22 - instance an error message to the user
1598:25 - like we are doing today so
1598:26 - let's go ahead and say class
1598:29 - off state log in
1598:32 - failure
1598:34 - and we're going to extend our off state
1598:36 - in here and what we're going to do is
1598:38 - that upon
1598:39 - a login failure we need to carry with
1598:42 - that state the actual exception that
1598:44 - caused the failure so let's just in here
1598:46 - say exception exception just like we're
1598:49 - doing we're carrying the user with us
1598:51 - when you log in we carry the exception
1598:53 - with us as well if you couldn't log in
1598:55 - okay so that's how you should think as
1598:58 - well so your state should carry with
1599:01 - them all the information the ui or the
1599:03 - consumer of that blog requires in order
1599:07 - to be able to
1599:08 - fulfill
1599:10 - its requirements
1599:11 - so in this case upon not being able to
1599:14 - log in
1599:15 - the ui is going to require the actual
1599:17 - exception that occurred so that it can
1599:19 - switch on it or do some if statements
1599:21 - and see what kind of exception it was
1599:23 - and display the correct correct
1599:25 - message to the user
1599:28 - so let's go ahead and then define that
1599:30 - and since we've expected an exception in
1599:32 - here i'm going to create a constant
1599:34 - constructor here as well
1599:37 - like that
1599:38 - oh actually we got a warning here it
1599:39 - says prefer declaring cons constructors
1599:41 - on immutable classes that's actually
1599:43 - beautiful yes sorry constant fantastic
1599:47 - okay so that's our login failure
1599:51 - then what we need is you remember also i
1599:53 - mean at the moment since we have our
1599:55 - counter block uh in here and the counter
1599:57 - application that we did in the previous
1599:59 - chapter i can't show you the ui of the
1600:01 - application but if you can recall what
1600:03 - we also had is if you try to log in with
1600:06 - a user and that user's email is not
1600:08 - verified when they were actually gonna
1600:11 - what we are what we were doing is that
1600:12 - we were sending the the user to the
1600:14 - needs verification view or something
1600:16 - that we call it let's say let's see very
1600:19 - verify email view right so we sent the
1600:22 - user to this view and we need to also
1600:24 - we need to also produce that state so
1600:27 - upon user pressing the login button and
1600:30 - if our off block realizes that hey this
1600:33 - user does exist but here she hasn't
1600:35 - verified their email address then we're
1600:38 - gonna produce a state telling you ui
1600:40 - that hey this user needs to verify their
1600:43 - information so
1600:44 - let's go ahead and implement that so
1600:47 - we're going to say class
1600:49 - auth state needs verification
1600:52 - extends off state okay
1600:56 - and then here we're just gonna grab this
1600:57 - as a cons constructor like this all
1601:00 - right
1601:02 - so that's that
1601:04 - and also after doing that so now we have
1601:06 - login and login failure we have needs
1601:09 - verification and we have the loading
1601:12 - state if we're in the middle of for
1601:14 - instance making an api call that could
1601:15 - take some time
1601:16 - the other state that we need is also
1601:18 - logged out if you're in the log out
1601:20 - state then we need to produce that so
1601:22 - let's just say class off state um
1601:26 - why is everything yellow
1601:28 - class
1601:29 - state logged out
1601:31 - okay
1601:32 - and this is going to extend offset as
1601:34 - well
1601:36 - let's then make a constant constructor
1601:38 - for this like this great all right
1601:42 - so log out when you're logged out you're
1601:44 - logged out there's nothing that the
1601:45 - logged out state actually has to carry
1601:47 - with itself it doesn't have to carry the
1601:48 - currently logged in user or anything or
1601:51 - even the current user in firebase even
1601:53 - if even if you have anonymous users the
1601:55 - logged out state for our application
1601:57 - doesn't have to carry with itself
1601:58 - anything okay
1602:00 - and last but not least we also have to
1602:02 - define our logout errors and so upon
1602:06 - logging out you could also
1602:08 - encounter some errors like if if
1602:11 - a firebase for some reason is trying to
1602:12 - make an api call and that api call
1602:14 - doesn't succeed then it is going to give
1602:16 - us an error so let's just define that as
1602:19 - well let's just say class you see we
1602:21 - have that already for login failure
1602:24 - let's go and actually copy that and
1602:26 - paste it here
1602:28 - and here instead of login i'm just going
1602:30 - to say log out failure and copy that
1602:32 - name and put it in the consonant
1602:34 - constructor as well
1602:37 - great so we have one two
1602:39 - three
1602:40 - four five and six
1602:42 - um
1602:44 - off states so that looks actually really
1602:46 - good
1602:47 - so our auth states are now defined okay
1602:49 - and
1602:50 - please save this file as well
1602:54 - now
1602:55 - we need to define the inputs you see the
1602:58 - states have been the output of our off
1603:01 - block which we're going to write soon
1603:03 - the off block we haven't written it yet
1603:05 - but these have been the outputs now what
1603:07 - are the inputs imagine in our off inputs
1603:11 - we have to think about what the ui what
1603:13 - the ui is actually going to call so
1603:16 - the ui is going to send packages of data
1603:19 - to this off block and these packages of
1603:21 - data are the events so we need to make
1603:23 - sure that the events
1603:25 - can contain with them the data that the
1603:28 - ui can package and send to our off block
1603:31 - for instance during logging in what
1603:33 - event is it okay it's let's just say off
1603:36 - event login what should it contain well
1603:38 - it should be the email and password
1603:40 - something like that okay upon log out
1603:43 - okay that's a log out event what should
1603:46 - it contain
1603:47 - no it's nothing it's just a log out
1603:48 - event it shouldn't even provide the
1603:50 - email and password it should log out the
1603:52 - currently logged in user from the
1603:54 - application
1603:55 - so we need to think about events and
1603:58 - their consumers and also the states and
1604:01 - their consumers so you have to pack
1604:03 - enough information both into your states
1604:06 - and into your events
1604:08 - so that the consumer of your blog can
1604:11 - actually both receive enough information
1604:14 - and be able to pack enough information
1604:16 - to send to your auth
1604:18 - let's start to your block
1604:21 - okay now what we need to do is just go
1604:24 - and define our auth event right here in
1604:27 - lib services auth block off state
1604:30 - we have written our off state so i'm
1604:32 - just going to close that file and let's
1604:34 - go in the same folder called blocking
1604:36 - here you see lib services auth block
1604:39 - we're going to create a new file called
1604:41 - auth event so right click new file off
1604:44 - event
1604:46 - and marked
1604:49 - all right and now we have our off event
1604:52 - and we need to do something very similar
1604:53 - to what we did with off state in that we
1604:56 - need to define
1604:57 - a um
1604:59 - a super class an abstract class that
1605:03 - basically
1605:04 - engulfs all other um auth event so every
1605:08 - auth event in our application is going
1605:09 - to be of this type so let's say
1605:12 - immutable and we don't have access to it
1605:14 - yet so let's just um
1605:17 - let me just write it for now let's just
1605:19 - abstract
1605:20 - class of events
1605:23 - and a constant constructor which you now
1605:26 - know
1605:27 - why we're creating
1605:29 - an immutable comes from foundation we've
1605:31 - already done this so import immutable
1605:34 - okay
1605:36 - uh
1605:39 - oh
1605:40 - use show
1605:42 - sorry i programming quite a lot of
1605:43 - languages python and rust and swift and
1605:46 - you name it javascript so it's sometimes
1605:49 - a little bit messy in my head about
1605:50 - imports
1605:52 - so um
1605:53 - there are quite a lot of different ways
1605:55 - of important things in different
1605:56 - languages so i sometimes mix them up
1605:59 - and so now we have our aus event
1606:02 - which is an immutable abstract class so
1606:05 - now what we need from the ui is upon it
1606:08 - wanting to initialize our auth you see
1606:11 - at the moment let's see actually what we
1606:13 - have in our
1606:14 - main dart file this is just us having a
1606:17 - look
1606:18 - and you can see here
1606:20 - and that's that's the counter block but
1606:23 - how we had it before is if you remember
1606:25 - in our home page we had upon the entire
1606:29 - home page being loaded we were saying
1606:31 - auth service firebase initialize so this
1606:33 - is a signal from the ui that needs to
1606:36 - now go to our auth block and say hey
1606:39 - initialize yourself so
1606:41 - let's define that signal or event
1606:45 - let's say auth event initialize
1606:48 - extends off event
1606:50 - [Music]
1606:52 - and it has no parameters it's as you saw
1606:55 - in main darts it's literally just a
1606:57 - function being called so we're going to
1606:59 - represent it with an event that has no
1607:01 - parameters but it has a constant
1607:04 - okay
1607:06 - that's that's that okay we have now our
1607:08 - auth event initialize
1607:11 - what we also need is an auth event for
1607:14 - logging in and as i mentioned it's very
1607:16 - simple it's just with an email and
1607:18 - password so let's just go ahead and say
1607:19 - off
1607:21 - of event login something like this
1607:25 - or log in with a capital i extends off
1607:29 - event
1607:30 - and we need we need two parameters to be
1607:33 - passed in here let's just say final
1607:35 - string email
1607:36 - and we also need a password so let's
1607:39 - just type that here
1607:40 - password and now we have the email and
1607:43 - password we're just going to create a
1607:45 - constructor here and make it constant
1607:47 - just like that okay
1607:50 - so now we have our login event
1607:54 - and so login event should carry with
1607:56 - itself every piece of information that
1607:58 - the auth block will need in the future
1608:01 - in order to log in that user into the
1608:04 - into our provider which in this case is
1608:06 - firebase okay
1608:08 - so after defining login we also need to
1608:10 - define log out now if you have a look at
1608:12 - our um
1608:14 - there are so many files in here so views
1608:17 - and we have notes and then we have
1608:20 - excuse me we have notes view if you have
1608:22 - a look at notes view if you have a look
1608:24 - at this and log out what it's doing as
1608:27 - you can see it's a weight of service
1608:29 - firebase log out so
1608:32 - so this is a clear event with no
1608:35 - parameters it's just telling the off
1608:37 - block then or in this case the off
1608:39 - service that hey you need to log out no
1608:41 - parameters log out the current user okay
1608:44 - so let's go and define that as well in
1608:45 - here so let's just say class
1608:47 - of
1608:48 - event log out extends off event
1608:53 - and it has no parameters as i mentioned
1608:55 - so let's create a constant constructor
1608:57 - for it which in turn is going to call
1608:59 - the constant constructor of the abstract
1609:01 - class called auth event
1609:05 - all right fantastic those were the only
1609:08 - events that we had to define initialize
1609:10 - login and log out so these are the
1609:12 - inputs to the block and then we had our
1609:14 - auth states which are the output our
1609:19 - outputs of our off block which we're
1609:20 - gonna write
1609:22 - uh right now actually
1609:25 - so we have the events and the states the
1609:27 - only thing that's missing is the
1609:29 - uh auth block itself so let's go ahead
1609:31 - inside this block folder create an off
1609:35 - block file so off block
1609:38 - oops block um
1609:40 - dart
1609:42 - so
1609:44 - now we need to actually write our auth
1609:47 - block and this is for me at least this
1609:49 - is like the most uh
1609:51 - this is the most fun
1609:53 - um
1609:54 - so
1609:55 - because we're going to put together
1609:58 - three pieces of uh two pieces of
1610:00 - information the states and the events
1610:02 - and now we're creating the actual login
1610:04 - the logic of our authentication block so
1610:06 - this is
1610:07 - very exciting so let's say class
1610:10 - off block like this extend block now
1610:13 - it's going to complain saying that well
1610:14 - it doesn't exist yet
1610:16 - so let's go ahead and import that import
1610:19 - that as you can see here now remember
1610:21 - block if you go into source code it has
1610:23 - two parameters there's two generic data
1610:26 - types in here event and state
1610:28 - our events are called off event and it's
1610:31 - going to auto import that and then we
1610:33 - have to say auth state
1610:35 - like this which also is going to be auto
1610:38 - imported
1610:39 - so
1610:40 - just like our off service if we go back
1610:43 - to our off service in here you'll see
1610:45 - that our auth service at the moment is
1610:47 - taking in as a parameter a provider so
1610:50 - we're going to do the exact same thing
1610:52 - in our auth block it's going to say
1610:54 - give us a provider to work with is it a
1610:56 - firebase provider or what is it
1610:59 - so
1611:00 - but we're not gonna directly go and say
1611:02 - give us a firebase provider we're gonna
1611:03 - say give us an auth provider remember
1611:05 - that we had an abstract class called
1611:07 - auth provider
1611:08 - here
1611:09 - which pretty much defines
1611:11 - the uh
1611:12 - the logic or defines the interface for
1611:16 - every auth provider whether it's a
1611:18 - firebase auth provider gmail auto
1611:19 - provider facebook whatever
1611:21 - that's how the interface should look
1611:23 - like okay so what we need to do is to
1611:25 - create a um
1611:27 - a constructor and in here what we're
1611:29 - going to say is to give us an auth
1611:31 - provider so
1611:32 - we expect an auth provider auto import
1611:35 - okay so if you're getting errors here
1611:36 - it's because you have an imported off
1611:38 - provider the way visual studio code just
1611:40 - imported it for me right now
1611:42 - and let's say that we get
1611:44 - that we call the provider in our
1611:46 - constructor and if you remember
1611:48 - correctly from the previous chapter we
1611:50 - need to also make sure that auth block
1611:52 - always has an initial
1611:54 - initial state so
1611:56 - that's what block as a super class
1611:59 - requires so let's see you see that's the
1612:01 - constructor
1612:03 - of the block libraries block class that
1612:06 - says it should have an initial state so
1612:10 - our initial initial state is going to be
1612:12 - in the k in the state of loading so
1612:14 - let's say off state loading
1612:17 - like that
1612:18 - and we create a constant
1612:22 - okay so and i can see right now that i'm
1612:24 - not using scr cpy so much so i'm just
1612:27 - gonna minimize or
1612:30 - yeah i'm just moving it to another
1612:32 - screen
1612:33 - so we don't get bothered by it and that
1612:35 - enables me then to increase the size of
1612:37 - visual studio code in width so it's a
1612:40 - little bit easier to read
1612:42 - so i'm gonna go create a constant here
1612:45 - and then we're gonna create our curly
1612:47 - brackets in order to go to the actual
1612:49 - initializer or the constructor of this
1612:51 - auth block okay
1612:54 - all right now your job in here inside
1612:57 - the auth block is to actually handle
1613:00 - various events and then based on those
1613:03 - events produce a state
1613:06 - what is the first event remember this
1613:08 - event initialize so if the user tells us
1613:11 - to initialize our uh
1613:14 - auth block what should we do well we
1613:16 - should go to that provider and actually
1613:18 - tell it to initialize okay
1613:21 - so let's go ahead and do that so i'm
1613:22 - just going to say on off event
1613:25 - initialize
1613:27 - and remember every on function you see
1613:31 - it takes the
1613:33 - the event let's see actually yeah it's
1613:36 - the event and then an emitter it's not
1613:39 - so clear from this i mean
1613:41 - from looking at this
1613:44 - it's quite generic it's i would say it's
1613:46 - too generic but uh
1613:49 - but that's that's the way it is so we
1613:51 - take the event that came in so in case
1613:54 - you need to extract some data from your
1613:56 - initialize
1613:58 - in this case initialize is an empty
1614:00 - class so it has no data but it when we
1614:03 - actually start loading for instance and
1614:05 - we start handling the login event we do
1614:09 - need the events to actually come in so
1614:11 - that we can extract this email and
1614:13 - password okay but in the case of event
1614:16 - initialize the event is pretty much
1614:18 - useless so we could literally ignore it
1614:20 - by just doing something like this okay
1614:22 - but we're gonna take it in anyways
1614:25 - so now that we have that event we the
1614:28 - second parameter in here is called emit
1614:31 - and emits then allows you to um
1614:35 - actually emit and send states from your
1614:38 - off block out to whoever is watching
1614:42 - the stage changes in your off block
1614:44 - which is going to be our ui okay so emit
1614:47 - is your way out is your communication
1614:49 - channel to the outside world
1614:51 - so let's make this function asynchronous
1614:53 - because we are actually
1614:55 - gonna call our provider and call some
1614:57 - asynchronous functionality on it so
1615:00 - let's go ahead and see if we can do that
1615:03 - so the first thing that we need to do in
1615:05 - here is to call our provider and say
1615:07 - initialize okay
1615:09 - and initialize you can see is it returns
1615:11 - a future of void so i'm just gonna wait
1615:14 - on it all right so then what we're gonna
1615:16 - do is to say okay after doing that we're
1615:19 - gonna say
1615:20 - final user is provider current user and
1615:23 - that is an optional off user if you
1615:26 - remember from its function signal or
1615:28 - from its getter signature you see
1615:30 - now if the auth user
1615:34 - is
1615:34 - null after doing an initialize then we
1615:37 - know that the state should be logged out
1615:40 - it means we initialize the provider but
1615:42 - there is no user you are logged out okay
1615:44 - so let's just say if user is null
1615:48 - then we're going to emit a new state and
1615:51 - we're going to say auth state logged out
1615:54 - like this
1615:55 - as a constant okay
1616:00 - however if there is a user so
1616:03 - so now we have a user we're sure that
1616:05 - we're not coming into this block here
1616:07 - that says auth user is null if there is
1616:10 - a user but that user is not email
1616:12 - verified then we're going to produce
1616:14 - another
1616:15 - state so let's say if
1616:18 - else if uh
1616:20 - user
1616:21 - is email verified not so it's not email
1616:24 - verified then we're gonna emit
1616:26 - um a const off state
1616:29 - uh needs verification
1616:31 - okay so that makes sense as well
1616:34 - otherwise we're going to say where our
1616:35 - state is bought state logged in and
1616:39 - remember the logged in state actually
1616:42 - needs your user okay
1616:45 - so
1616:46 - um that is actually working quite well
1616:49 - right now
1616:51 - and now it says user
1616:55 - that shouldn't really happen because the
1616:57 - user actually isn't null
1617:00 - so we have already checked the user so
1617:02 - we could put let's see what is it
1617:04 - actually complaining about
1617:07 - user value of type null can't be
1617:09 - assigned to a parameter of auth user in
1617:12 - a cons constructor try using a subtype
1617:15 - or removing the keyword const and
1617:18 - i mean i understand this part to be
1617:20 - honest with you and that's correct
1617:21 - that's a mistake that i've made in here
1617:22 - and that's because i said a constant
1617:24 - constructor is being called with a user
1617:26 - which is a variable so you should also
1617:28 - know that we can't do that all right
1617:31 - because user in itself is not const
1617:33 - hence we can't call a const constructor
1617:36 - on a on a state that uses a variable
1617:38 - user okay
1617:40 - great
1617:41 - now we've handled the initialize events
1617:44 - all right
1617:46 - what we need to do is to handle the
1617:47 - login event so let's go ahead after this
1617:50 - i'm just going to put a comment in here
1617:52 - and just say
1617:53 - initialize just to make things a little
1617:55 - bit separate from each other and then
1617:57 - log in
1617:59 - i'm going to bring the code up so you
1618:00 - see it sorry about that it was a little
1618:02 - bit hidden when i wrote this comment so
1618:03 - now you can see how it looks like
1618:06 - then we're going to handle login events
1618:09 - so remember again an event is something
1618:12 - that the ui is going to send us and that
1618:14 - event if you remember it has a username
1618:16 - sorry an email and a password then we're
1618:18 - going to unpack that email and password
1618:20 - provided to give it to our provider and
1618:23 - provide it to our provider give it to
1618:25 - the provider and then react to the
1618:27 - various results that come back from the
1618:29 - provider okay
1618:31 - so
1618:33 - so we're gonna say then on off event
1618:36 - login oops yeah login and we're going to
1618:39 - say event and then emit
1618:41 - and we're going to say this is an async
1618:43 - function and it goes in here all right
1618:46 - so okay
1618:48 - now this is the beauty of a blog using
1618:50 - emit you can let your consumers know
1618:53 - what you're up to
1618:55 - let's say someone says login what is the
1618:57 - first thing that we're up to yeah we are
1618:59 - loading we are in the state of loading
1619:01 - because we are going to start loading
1619:02 - and make api calls and that's exactly
1619:05 - why we have these off states in here
1619:08 - remember we have the auth state of
1619:10 - loading so let's change our state as
1619:12 - soon as you tell us to log in we're
1619:14 - going to say oh now we're loading okay
1619:16 - because we don't have a state that says
1619:19 - logging in
1619:21 - but we have a general state that says
1619:23 - loading
1619:24 - if you want to you could remove this
1619:26 - loading state
1619:27 - and just say
1619:29 - i have a class for instance auth state
1619:32 - logging in that's also acceptable but
1619:35 - then you have to have a
1619:38 - um
1619:39 - something something in
1619:41 - uh state for everything like even if
1619:43 - you're logging out you should say off
1619:45 - state uh logging out
1619:48 - uh so then you have to have a loading
1619:50 - state for pretty much all the states
1619:52 - that do something asynchronous
1619:54 - and that's why we haven't done that we
1619:55 - have a generic or a general loading
1619:58 - state that indicates to the outside
1620:00 - world that hey
1620:02 - you are doing something okay
1620:06 - don't worry about all these saved
1620:07 - operations that have been in this off
1620:09 - state file i pretty much i mean i didn't
1620:11 - change anything in this file okay so it
1620:14 - is how we left it when we finished off
1620:16 - stage
1620:17 - all right so let's in here then emit a
1620:20 - an auth state loading
1620:23 - just like that
1620:25 - and upon logging in what we need to do
1620:27 - is just to grab the email so we're just
1620:29 - going to say email is equal to the event
1620:30 - email and password is equal to the event
1620:34 - password okay
1620:35 - and then we're gonna
1620:37 - do a try and catch
1620:39 - like this
1620:41 - and tell our provider
1620:43 - so we're gonna say await provider um
1620:47 - i believe we have let's see what the
1620:48 - problem in here avoid
1620:50 - okay that's fine
1620:52 - let's then create a user so let's say
1620:55 - final user is equal to provider dot
1620:57 - we have a login function on our provider
1621:01 - excuse me
1621:02 - and here we're literally passing email
1621:04 - and password to that function okay and
1621:07 - remember login function at the provider
1621:10 - level it could
1621:12 - throw an exception but that's fine
1621:14 - because we have a catch in here so if we
1621:16 - go to the login function in our auth
1621:18 - provider let's see if we can find
1621:20 - firebase auth provider
1621:22 - inside the login function let's see if
1621:24 - we can find out here we have various
1621:26 - exceptions that are going to be thrown
1621:28 - user not found wrong password generic
1621:31 - auth exception so if any of those
1621:33 - exceptions happen we're going to come
1621:34 - into this catch block all right
1621:38 - so now that we have a user
1621:39 - if nothing happens if no exceptions
1621:41 - happen then we're going to emit and
1621:44 - we're going to say const or actually we
1621:46 - can't do a const because a user is a
1621:49 - variable so we're going to say auth
1621:51 - state
1621:52 - logged in
1621:53 - and it's just going to say give us a
1621:55 - user and that's the user
1621:57 - should any exception happen we're going
1621:59 - to emit a login failure and we're going
1622:02 - to say emit
1622:04 - auth state
1622:06 - oops
1622:07 - log
1622:10 - what's it failure login failure i can
1622:12 - see yeah
1622:14 - and in here we literally pass the
1622:15 - exception there
1622:19 - can't be assigned and then so we
1622:21 - probably just have to see i can i mean i
1622:22 - understand this exception as well it's
1622:24 - because exceptions in dart maybe this is
1622:27 - a little bit of a
1622:29 - side talk but exceptions in dart can be
1622:32 - anything i mean i posted something on
1622:34 - linkedin on twitter a while ago saying
1622:36 - that well you can even throw
1622:39 - an enum value as an exception and that's
1622:42 - why in
1622:43 - dart exceptions are of type object and
1622:46 - in this case i believe they're even
1622:48 - object optional object no it's actually
1622:50 - an object so here the error is that
1622:53 - you're saying that off state login
1622:54 - failure that needs an exception but
1622:57 - you're passing it an object so let's say
1622:59 - on exception
1623:02 - if an exception happens then
1623:04 - uh
1623:07 - and that's because we know that our
1623:09 - login function is not act let's have a
1623:11 - look at the login function and see if it
1623:12 - can throw anything other than an
1623:15 - exception and we see now that it has a
1623:17 - general catch
1623:19 - block which throws a generic auth
1623:21 - exception which in turn is an exception
1623:23 - so in our application right now as it is
1623:25 - we're not throwing anything that is not
1623:27 - an exception so every exception is
1623:29 - coming from the exception class
1623:33 - all right
1623:34 - fantastic now we have our login um
1623:38 - event in place and we're emitting the
1623:40 - correct states logged in or login
1623:43 - failure now we have to handle log out so
1623:46 - let me bring the code up and we're going
1623:48 - to say log out and this is very similar
1623:50 - to login a little bit less code so let's
1623:52 - just say on
1623:54 - again we're going to handle inputs okay
1623:56 - so off
1623:58 - event log out so if someone tells us to
1624:02 - log out
1624:03 - like this then we're gonna say okay we
1624:06 - take the state oh so much documentation
1624:08 - everywhere um
1624:10 - sorry the event
1624:12 - and then the emit and then we make this
1624:14 - function asynchronous like that
1624:17 - and the first thing that we have to do
1624:18 - again
1624:19 - since in log out we're going to call the
1624:22 - logout on our provider which is an
1624:24 - asynchronous function we need to tell
1624:26 - the ui about that we need to tell the ui
1624:29 - that upon you requesting
1624:31 - log out from the off block you have to
1624:34 - do some loading what better way of
1624:36 - indicating that to the output to the
1624:38 - outside world by actually changing our
1624:41 - state using emit so we're going to say
1624:43 - off state loading okay so that's us
1624:47 - indicating to the outside world that
1624:48 - we're doing something
1624:52 - all right so uh let's then do a try and
1624:55 - catch in here
1624:57 - cat on exception
1625:00 - catch e
1625:02 - like this
1625:03 - if an exception occurs then we're going
1625:05 - to say emit
1625:08 - off states failure we had a log out
1625:11 - failure and that expected an exception
1625:13 - so i'm just going to put the e in there
1625:17 - we could also put this image in try it
1625:19 - doesn't matter because this doesn't
1625:20 - really throw an exception it can never
1625:22 - throw an exception
1625:23 - but we're going to put it in try catch
1625:25 - because i believe just it's a little bit
1625:26 - cleaner it's it's like a transaction
1625:30 - so what we're gonna do is to say await
1625:32 - our provider
1625:34 - and log out in here all right and should
1625:37 - the logout actually go through then
1625:38 - we're going to go to the next line which
1625:40 - is line 40 for me maybe another line
1625:42 - number for you
1625:44 - and then in this case we're just going
1625:45 - to emit a const of off state
1625:50 - log out
1625:51 - fantastic all right
1625:53 - so
1625:54 - that was it really i mean it was just a
1625:56 - lot of talk a lot of creation of like uh
1626:01 - classes
1626:03 - but um we've now gotten there so now we
1626:05 - have an off block and then we have our
1626:07 - auth event and off state so now that we
1626:09 - have those i'm going to close those tabs
1626:11 - after you've saved them so make sure
1626:13 - that those files are also saved
1626:16 - then what we're going to do is just to
1626:17 - get rid of that ugly counter block that
1626:20 - we created in the previous chapter which
1626:21 - kind of is like
1626:23 - dirtying down our main user interface so
1626:25 - let's go to main dart
1626:27 - and let's grab this
1626:29 - home page the way we have here let's see
1626:33 - so let's go in this new home page that
1626:36 - we created for our counter block and
1626:37 - just completely remove that everything
1626:40 - that is related to that counter block
1626:41 - okay
1626:43 - and then let's go ahead and bring back
1626:45 - our normal home page like
1626:48 - that right fantastic uh
1626:51 - we have flutter block and block in there
1626:53 - and that is causing a little a
1626:56 - little bit of a problem but that's okay
1626:57 - too
1626:59 - so what we need to do now is to actually
1627:02 - go
1627:03 - and
1627:04 - let me bring up the next
1627:07 - captioning here as you can see now we
1627:09 - need to use block provider and block
1627:11 - builder and we're going to do that in
1627:13 - our main dart file so
1627:15 - i hope you haven't
1627:17 - jumped over the previous chapter because
1627:19 - i talked a lot about in the previous
1627:21 - chapter about block providers block
1627:22 - builders block listeners block consumers
1627:24 - and what they are how they're different
1627:26 - from each other and there's a lot of
1627:27 - information and material available
1627:29 - online that you can read also
1627:31 - about all these things online but if
1627:33 - you've skimmed over that chapter and
1627:35 - didn't understand really how things
1627:37 - worked what we need in here just think
1627:39 - of it that our main application needs to
1627:41 - offlock the auth block is responsible
1627:44 - now from this point on to handle
1627:46 - everything related to authentication
1627:49 - it is
1627:50 - not the ui part remember the ui part is
1627:52 - completely separate that's the goal of
1627:55 - block in its core to separate business
1627:58 - logic from presentation logic so your
1628:00 - presentation logic everything related to
1628:02 - the ui for instance displaying dialogues
1628:04 - displaying exceptions handling etc etc
1628:06 - etc that's all in the ui has nothing to
1628:09 - do with all of what but the off block is
1628:12 - going to be responsible for actually
1628:13 - initializing the authentication process
1628:15 - and also with with firebase and also
1628:17 - allowing us to log in and log out et
1628:19 - cetera
1628:20 - we need the auth block so how do we get
1628:22 - off block in our main application since
1628:25 - the entire application is dependent on
1628:28 - the auth block even when you're in the
1628:30 - main ui of the application you should
1628:32 - still be able to for instance log out
1628:34 - then we could literally say that oh
1628:37 - everything inside our application in the
1628:39 - main function is gonna be dependent on
1628:42 - that off block so what we're gonna do is
1628:45 - in our home page
1628:47 - let's see in here here we're right now
1628:50 - saying we have a home const homepage you
1628:52 - see actually let me command s this and
1628:55 - bring uh scrcpy bag back here
1628:58 - so now we see our notes
1629:00 - back so home page is fixed now
1629:04 - so what we are going to do in here we're
1629:06 - going to instead of a const homepage
1629:08 - we're going to replace this with an auth
1629:10 - provider okay
1629:11 - now
1629:12 - we could do this as you can see we have
1629:15 - um do we have sorry with a block
1629:18 - provider
1629:19 - i have the block extension in visual
1629:22 - studio code which then gives me the
1629:24 - ability to wrap things with various
1629:27 - block
1629:28 - components and flutter block components
1629:31 - and you can go to extensions and install
1629:34 - the block libraries
1629:37 - extension for visual studio code
1629:40 - if you're if you're using another uh
1629:42 - development environment if you're for
1629:44 - instance using sublime you may not have
1629:47 - that ability so
1629:51 - what you'll need to do is to write this
1629:53 - by hand so i'm gonna take advantage of
1629:56 - wrapping this homepage with a block
1629:58 - provider meaning that
1630:00 - my home page now let's see here
1630:03 - let's say this is a const as well
1630:06 - is a
1630:08 - home page before its creation is
1630:11 - dependent on the creation of a block
1630:13 - okay
1630:14 - so let's go in here and say the block
1630:16 - provider is also using our off block
1630:20 - which i believe now visual studio code
1630:22 - is going to auto import you may need to
1630:24 - import that by hand if you are not using
1630:26 - visual studio code or an or text editor
1630:29 - or an id that has this feature
1630:32 - now in the create
1630:34 - parameter of our block provider we
1630:36 - actually have to create the uh block
1630:39 - that we promised we're going to create
1630:40 - and you can see that being created here
1630:44 - so
1630:44 - and i can now see directly in here it's
1630:48 - creating a const provider
1630:51 - but we can't have that simply because
1630:53 - our auth block if we go back to our off
1630:55 - block in here i believe that our
1630:57 - constructor is not a
1630:59 - constant so if you put const in there
1631:02 - you can see that it's not allowing us to
1631:04 - do that simply because
1631:06 - block itself as a library as a class
1631:09 - here it has no constant constructor so
1631:12 - we can't have a constant provider so
1631:14 - let's remove that const from there okay
1631:16 - now in here we have to say it should
1631:18 - create offlock
1631:20 - and if you remember offblock
1631:22 - requires an auth provider so let's go in
1631:25 - here and say firebase
1631:27 - off
1631:29 - fire and that's going to be auto
1631:31 - imported as well
1631:33 - perfect now we have
1631:35 - our
1631:36 - block provider that's fantastic so
1631:41 - now what we need to do is to have a look
1631:43 - in here and see what else we have to
1631:45 - change in
1631:47 - our main functionality
1631:49 - well
1631:52 - what we have at the moment i mean we
1631:54 - have
1631:55 - of course we have this functionality
1631:56 - here to create the
1631:58 - auth block for us in the main function
1632:01 - but we're not actually really using that
1632:03 - in inside here we're using future
1632:06 - builder okay
1632:08 - so what we need to do is instead of
1632:10 - using future builder let's use our um
1632:13 - what we're going to do is we're going to
1632:15 - use block provider
1632:18 - i'm sorry block builder and block
1632:20 - builder is kind of like future builder
1632:22 - but it's going to use but it's going to
1632:23 - use our
1632:25 - block
1632:27 - which is defined here now this may seem
1632:29 - all very complicated to begin with and
1632:32 - what you need to understand is that
1632:33 - there is a lot of magic happening behind
1632:35 - the scenes in block in that when you
1632:37 - create a block provider in here and then
1632:40 - it gets a context and then it goes here
1632:42 - to create the block what's happening
1632:44 - internally in block is that that context
1632:47 - itself is gonna get injected with your
1632:50 - off block so when you create the auth
1632:53 - login here this context from this point
1632:56 - on inside the entire application is
1632:58 - going to be
1632:59 - it's going to be populated with an auth
1633:01 - block that you can read from okay and
1633:04 - i'll show you now how
1633:07 - so in the build function of your
1633:09 - homepage what you need to do in here
1633:11 - we're going to say
1633:13 - see we have this future we have the
1633:15 - switch
1633:17 - of the snapshot
1633:19 - and that's all fine
1633:20 - so
1633:21 - let's just then go ahead actually what
1633:23 - we need to do to be honest with you is
1633:25 - to um
1633:26 - we're not going to use so much of this
1633:28 - code so it's perhaps makes more sense
1633:30 - just to shift it down a little bit to
1633:32 - make room for our
1633:34 - block provider okay
1633:36 - so in uh sorry a block builder
1633:40 - so our block builder has a builder
1633:43 - function but we also are going to get
1633:44 - hold off our um
1633:47 - actual block in here in the block
1633:49 - builder as you'll soon see
1633:50 - when you come to your home page what the
1633:52 - first thing that we need to do is to
1633:54 - tell our os block to initialize itself
1633:56 - do you remember our auth block has this
1633:59 - um event handling for initialize so
1634:01 - somehow in this build function we need
1634:03 - to tell our author like hey
1634:06 - initialize yourself so how do we get
1634:08 - hold of that
1634:09 - i talked about this how do we hold off
1634:12 - how do we get hold of the off block in
1634:14 - here since we don't have access to it
1634:16 - here but i just mentioned that
1634:18 - when you create an auth provider sorry a
1634:20 - blog provider that blog provider is
1634:22 - going to inject your off block into the
1634:24 - context so the the auth block is hidden
1634:28 - somewhere in this context and the way to
1634:30 - read that is you just say context dot
1634:34 - read and then there's a you see there's
1634:36 - a
1634:37 - function in here and if you go into this
1634:39 - read function you see it actually comes
1634:40 - from a provider here
1634:43 - so
1634:44 - flutter provider provider dart okay
1634:48 - so in context read let's just say that
1634:50 - we're looking for auth walk
1634:54 - and what we're going to tell it to is to
1634:56 - tell it to initialize but if you put dot
1634:59 - in here you see there is no function
1635:00 - called initialize or anything and that's
1635:02 - because the way you communicate with an
1635:04 - auth block as we saw in um or the way
1635:07 - that you communicate with a block
1635:09 - generally is that you send it messages
1635:12 - using its add function so add is your
1635:14 - way of communicating with your block or
1635:17 - your blocks about various events that
1635:20 - you're sending okay so in this in here
1635:22 - we're going to say add and then we're
1635:25 - going to say auth
1635:26 - event
1635:29 - okay
1635:30 - if you're getting an error about this
1635:31 - auth event initialize not being in
1635:33 - context it's probably because you don't
1635:35 - have an auto import for this uh file in
1635:38 - here which i had so
1635:42 - we have now we are sending initialize
1635:44 - events um to our auth block
1635:48 - now that that is done we need to do our
1635:50 - block builder so in this builder
1635:53 - function let me go here and get help
1635:54 - from visual studio code to complete that
1635:57 - and you can see now i get a context and
1636:00 - a state so
1636:02 - so let's go ahead and handle various
1636:04 - states that could happen during this
1636:06 - period during the initialization period
1636:09 - okay so let's say
1636:10 - if the state is off state logged in so
1636:14 - if we are actually logged in then we're
1636:17 - gonna return const notes view like that
1636:20 - so that is this view all
1636:22 - right else if state is auth
1636:27 - state needs verification
1636:30 - then let's see what we were doing we
1636:32 - were returning this verify email view so
1636:35 - let's go ahead and do that here as well
1636:40 - now if
1636:41 - excuse me if the state is logged out
1636:45 - excuse me again
1636:46 - it's off
1636:48 - it's logged out
1636:50 - then let's see how we were handling that
1636:52 - before
1636:57 - um if we were logged out we were going
1637:00 - to the login view like like here
1637:03 - so if we were logged out then we should
1637:05 - send the user to the login view
1637:09 - otherwise
1637:11 - if it's not those states
1637:13 - so
1637:14 - what can we do let's say that in the
1637:16 - future you're going to add some more
1637:18 - states that this
1637:20 - block block builder right now is not
1637:23 - able to handle
1637:24 - so
1637:25 - um what you want is still an application
1637:28 - that is in working condition you
1637:30 - shouldn't crash or anything so
1637:32 - let's just in this case return a
1637:33 - scaffold
1637:36 - and make it constant
1637:39 - and let's in the body of our scaffold
1637:42 - create a circular progress indicator
1637:45 - just like that all right so it looks
1637:48 - like that also you could mark your block
1637:51 - builder as well to say that it
1637:53 - has the off block
1637:56 - and also it has off states you remember
1637:59 - block builder has these parameters in
1638:01 - you see
1638:03 - the builder and sorry the block itself
1638:05 - and the state that's why i've marked
1638:07 - them like this okay and now as you can
1638:09 - see state is not an uh it's not just a
1638:12 - normal object anymore it's an off state
1638:14 - before writing that state was just an
1638:17 - object but now i've marked it as off
1638:19 - state and you can see it's become an off
1638:21 - state here as well
1638:24 - great stuff now let's get rid of the
1638:26 - future builder that we have from before
1638:28 - so i'm going to remove all that code
1638:31 - excuse me
1638:32 - and now you can see we have our off
1638:36 - our block builder here and a block
1638:38 - provider up there
1638:40 - so that's all we have to do um now it's
1638:43 - great actually we're getting this issue
1638:45 - um and you can see it's i love these
1638:48 - errors i mean a lot of developers are
1638:50 - scared of stuff like this but it's so
1638:53 - important to actually read what's inside
1638:55 - this what is what it's telling us is
1638:56 - this happens because you use the build
1638:58 - context that does not include the
1638:59 - provider of your choice and that's
1639:01 - because of this you see
1639:02 - is this thing context read auth block so
1639:07 - so what flutter is saying that hey
1639:09 - you're expecting me to extract an off
1639:11 - block from the context but it's not
1639:13 - there okay why is it not there it's
1639:15 - simply because the main function i've
1639:18 - mentioned this quite a few times in the
1639:20 - course but i believe it's so important
1639:22 - that i want to mention it again the main
1639:24 - function does not get called during hot
1639:28 - reloads and i just did a hot reload by
1639:30 - doing command s so
1639:32 - there is no block inside the context
1639:36 - because the block is actually created by
1639:38 - the block provider which is inside the
1639:40 - main function so if i want this auth
1639:43 - block to be injected in the build
1639:44 - context then i have to do a hot restart
1639:47 - so
1639:48 - now the application is working as it
1639:50 - should all right
1639:52 - excuse me
1639:54 - so we've now taken care of our main dart
1639:57 - file removed the stuff that we have for
1640:00 - the counter application which we created
1640:02 - with auth with which we created with
1640:04 - block and now we've moved to using our
1640:06 - first two components from block which is
1640:09 - block provider and also block builder we
1640:12 - have a few unused imports so let's just
1640:14 - remove those
1640:16 - okay just to make sure that this file is
1640:19 - quite clean
1640:21 - the part is that it's done now what we
1640:23 - need to do is to use as you can see in
1640:26 - the caption we need to use our off block
1640:28 - in the login view and the only thing we
1640:31 - really need to do is upon pressing the
1640:32 - login button we need to send the off
1640:35 - event login to our auth block
1640:38 - that's very very simple so let's go
1640:41 - ahead and take care of that this is just
1640:44 - easy from
1640:46 - go to login view as the caption
1640:47 - indicates and where we're calling this
1640:50 - login functionality here
1640:53 - as you can see we're saying
1640:55 - um
1640:56 - we're taking the email and
1640:59 - password and we're just yeah calling a
1641:01 - login so
1641:04 - let's see we also have is email verified
1641:07 - so we're not gonna take care of that at
1641:09 - this point
1641:11 - so we're not gonna really
1641:13 - uh take care of email verified so in
1641:15 - this in this try statement here verify
1641:18 - email route
1641:20 - we will fix that soon so let's just
1641:22 - remove this
1641:24 - try everything in the try block
1641:26 - and what we need to do in here we need
1641:28 - to read our block our auth block and
1641:31 - then convey an event to it okay how do
1641:34 - we read the the a block and that is
1641:37 - using context dot read or what was it
1641:41 - called read i believe actually yeah but
1641:44 - remember autoblock
1641:47 - and three function is not available
1641:50 - until you import your
1641:52 - provider and i can see in here says
1641:54 - package provider src but in the
1641:58 - in our main file we didn't actually
1642:00 - import provider so we've imported our
1642:03 - flutter block so let's go ahead and do
1642:05 - that as well in here so inside login
1642:08 - view dart please import your flutter
1642:10 - block so now all of a sudden we're going
1642:12 - to have access to the read function okay
1642:16 - so in there what we what we're going to
1642:18 - do is just to add an event to
1642:20 - our
1642:21 - let's see if we can get access oh for
1642:23 - that we need probably to import block as
1642:26 - well so
1642:27 - package
1642:28 - excuse me block
1642:31 - and then
1642:33 - okay
1642:34 - let's see if then all of a sudden we're
1642:36 - gonna get the add functionality in here
1642:38 - context read oh sorry about that it's
1642:40 - because this is a function i need to
1642:42 - call the function so add and i may then
1642:45 - get away by removing block from here i
1642:48 - apologize for that we didn't really need
1642:49 - to import um
1642:51 - block library as such
1642:55 - okay i understand this is a little bit
1642:57 - jumpy that's okay though so all we're
1642:58 - doing is that we removed everything in
1643:00 - the try uh block and we're removing
1643:03 - we're replacing that using context read
1643:05 - we're reading our off block from the
1643:07 - build context and now we want to tell it
1643:09 - to
1643:10 - log in so you remember we had a l off
1643:14 - event login
1643:16 - so let's go ahead and do that and as you
1643:18 - can see it's going to auto import it for
1643:20 - us
1643:20 - so i mean here we have the email and
1643:22 - password fantastic
1643:26 - so that's that
1643:28 - all right so that's gonna send that
1643:30 - event and then we have the rest of the
1643:32 - exemptions now remember
1643:35 - i understand you may think oh
1643:37 - exceptions though how are we handling
1643:39 - them well
1643:41 - we are not
1643:43 - at the moment our exception handling is
1643:45 - completely broken by going towards using
1643:47 - auth block everything is broken
1643:50 - as far as exceptions go because um
1643:53 - you can see the way our auth block
1643:56 - actually throws exceptions is by
1643:58 - emitting them inside states so you see
1644:00 - it says a state login failure and then
1644:02 - there's an exception in it so we're not
1644:04 - handling those at the moment so you're
1644:06 - right exceptions are completely broken
1644:08 - for the entirety of this chapter and
1644:11 - that's okay because we're gonna fix them
1644:13 - exactly right after this chapter
1644:15 - so now you know what's coming in the
1644:16 - next chapter as well
1644:19 - all right that's that's for uh our
1644:22 - login so
1644:24 - i don't think we need to do more to be
1644:25 - honest inside our login so let's go into
1644:28 - our imports and just clean up the
1644:29 - imports as well
1644:32 - great stuff so that's for login um
1644:35 - what we also have to do now is the
1644:37 - caption indicates we have to go to our
1644:39 - notes view
1644:40 - um and
1644:42 - make sure that we can log out using our
1644:44 - auth block as well so let's go to notes
1644:47 - view here
1644:48 - and right now what we're doing is saying
1644:50 - we're awaiting on the auth service
1644:52 - firebase logout so we're not going to do
1644:54 - that anymore
1644:56 - so we're just going to use our off block
1644:58 - in order to log out
1645:01 - so
1645:02 - in here let's remove that and just say
1645:05 - that we're saying to where we want to
1645:07 - grab the auth block first okay so let's
1645:10 - say context and then we're gonna
1645:13 - read our um
1645:15 - autoblock
1645:16 - like this and if he asks visual studio
1645:18 - code it's gonna it wants to import um
1645:22 - oh yeah it wants to import auth block so
1645:24 - let's grab off block to bring it in
1645:28 - it also doesn't know where read comes
1645:30 - from so
1645:31 - um
1645:34 - so what we need to do now is to
1645:36 - import uh the block library in here so
1645:39 - i'm just gonna
1645:42 - copy that code from my notes
1645:44 - so importing flutter block and then
1645:47 - flatter block guard and here i'm
1645:48 - actually drilling down inside flutter
1645:50 - block and just seeing that i'm
1645:51 - interested in read context okay and read
1645:55 - context is as you can see in the code is
1645:58 - that is the function
1646:00 - reading here oh my god there's so much
1646:01 - documentation here you see
1646:05 - all right so that gives us the read
1646:07 - functionality that we can use in here so
1646:09 - that's the function all right after
1646:11 - grabbing our off block now we have to
1646:13 - convey the message of logging out in
1646:15 - here so we're going to add an event to
1646:17 - it and then we're going to say we add
1646:19 - the event of off event log out just like
1646:23 - that and this is a constant constructor
1646:25 - as well so let's just send it send it
1646:27 - through
1646:29 - and after doing that we don't really
1646:31 - have to do so much more so
1646:34 - um
1646:35 - and we're also not in this case we're
1646:37 - not actually gonna go to to the login
1646:40 - view so
1646:42 - what is gonna happen in here i'm
1646:43 - actually gonna remove that and we're
1646:45 - gonna start testing a little bit so
1646:46 - you'll see how things work okay
1646:49 - so
1646:50 - um i'm gonna do a hot restart in here
1646:53 - and see if everything's working as it
1646:55 - should so yeah what i'm going to do then
1646:57 - let's test log out okay
1646:59 - so in here i'm just going to say this
1647:01 - log out and it says
1647:02 - log out or cancel i'll say cancel so
1647:05 - that's working as it should
1647:06 - and i say log out and then log out and
1647:09 - all of a sudden we came to the login
1647:10 - view but hey wait a minute what happened
1647:12 - we removed this code this code that was
1647:15 - here
1647:16 - why is why are we going to the login
1647:18 - view without that code so this may look
1647:21 - magical but what is happening is that
1647:23 - since the entire application is now
1647:25 - using off
1647:27 - our auth block an auth block upon it
1647:30 - receiving the log out event let's go to
1647:32 - the off block
1647:33 - so you get reminded of the log out event
1647:35 - but what it is saying is that it first
1647:37 - goes to the loading state and then if it
1647:40 - could lock the user out and it actually
1647:42 - says that i'm logged out now remember in
1647:45 - the main function here we are actually
1647:48 - listening to various events that come
1647:49 - from our off blog and when the events
1647:52 - that comes in is logged out we are
1647:54 - showing the login view so it is the main
1647:57 - uh
1647:58 - is the home page that is doing this work
1648:00 - so it's
1648:01 - it is to me it is absolutely beautiful
1648:04 - because
1648:05 - we are like removing
1648:07 - uh logic from our code and one step at a
1648:10 - time
1648:12 - so inside our
1648:14 - login as well uh so what we need to
1648:16 - let's go to the login view
1648:20 - here
1648:21 - uh let's have a look in here at login
1648:24 - you see after login we're not telling
1648:28 - the application that you have to go to
1648:31 - a screen x or screen y
1648:33 - and so we can actually test this so i'm
1648:35 - going to say my email address here and
1648:38 - foo bar bath and then log in
1648:41 - see it comes to the main screen how did
1648:43 - that do that and that's again because of
1648:45 - the main dart you see it first said um
1648:49 - if it's in the state of
1648:51 - loading let's see are we handling
1648:53 - loading somewhere no we're not using
1648:54 - that um but if if it actually becomes uh
1648:58 - logged in then it says display the notes
1649:00 - view so that's how these screens are now
1649:03 - being shuffled
1649:04 - and displayed to the user without us
1649:06 - having to do
1649:08 - push routes or push name routes so
1649:12 - fantastic very well done we've taken
1649:14 - care of everything that we said we're
1649:15 - going to take care of in this chapter so
1649:17 - and what we usually do at the end of
1649:19 - every chapter is now that you're
1649:20 - familiar with everything you've come so
1649:22 - far almost 40 40 chapters in this course
1649:25 - so you should know that we need to tag
1649:27 - our work so that we don't lose them
1649:30 - so
1649:31 - let's go ahead and have a look at
1649:35 - if i can bring terminal up in here and
1649:38 - we see bit log you can see the last
1649:40 - commit was step 22 so let's say git
1649:43 - commit get status first actually
1649:46 - a whole new folder was added so we're
1649:48 - going to say git at all
1649:50 - and let me increase the size of the
1649:52 - screen as well
1649:54 - so we're going to say git commit and um
1649:57 - step 23 okay
1650:00 - and push these changes
1650:04 - and we have a look at our logs get to
1650:06 - step 22 and step 23 and there is nothing
1650:09 - to commit at this point
1650:11 - so let's also tag our work and we say
1650:14 - step 23
1650:16 - and get push tags okay
1650:19 - fantastic so if you look at our tags now
1650:21 - we have
1650:22 - 20
1650:24 - 21 22-23 okay
1650:28 - fantastic as this tradition at the end
1650:30 - of every chapter we talk about what
1650:31 - we're going to discuss in the chapter
1650:33 - that is coming and um
1650:35 - as i mentioned just briefly
1650:38 - as a little note while i was talking
1650:40 - about exception handling
1650:42 - we've now broken our exception handling
1650:44 - in that
1650:45 - you see when we send an ad
1650:49 - signal to our block our auth block um
1650:53 - that in itself is not gonna produce an
1650:56 - exception
1650:57 - but right now we're treating that add
1651:00 - function and we're putting it inside a
1651:02 - try block and then there's on exception
1651:05 - blah blah after that so none of those
1651:06 - exception handling uh
1651:08 - catches are gonna be caught
1651:11 - so uh we're gonna handle that and fix
1651:14 - that in the next chapter so grab some
1651:15 - refreshments and i'll see you there
1651:18 - hello everyone and welcome to chapter 41
1651:20 - of this philosophy course
1651:21 - in previous chapters we've been talking
1651:23 - quite a bit about uh block and
1651:26 - um i suggested that everybody who's
1651:28 - taking this course to have a look at
1651:30 - block on their own time as well and to
1651:32 - read the documentation because
1651:34 - um i understand that block could be
1651:36 - something intimidating for especially
1651:38 - for those who haven't done for us this
1651:39 - reactive programming before
1651:41 - however it allows us to create a good
1651:43 - separation
1651:45 - and between our ui and our business
1651:47 - logic as that's the point of using block
1651:50 - in a flutter application for instance
1651:52 - so in this chapter we're going to build
1651:54 - up on top of what we've already done but
1651:56 - we're
1651:57 - from this chapter onwards we're going to
1651:59 - spend a little bit of time to clean the
1652:01 - logic up i mean even though things may
1652:04 - be working the way they are right now
1652:05 - but
1652:07 - and there is like a saying in software
1652:09 - development which i
1652:10 - usually strongly disagree with that
1652:12 - people say if it's not broken don't fix
1652:15 - it however we've seen over and over
1652:17 - again that things that work don't
1652:20 - necessarily continue to work or things
1652:22 - that do work right now aren't
1652:24 - necessarily working to the best of their
1652:26 - abilities
1652:27 - so
1652:28 - in order to make things uh a little bit
1652:30 - better in our source code we're going to
1652:31 - spend a little bit of time to make the
1652:33 - logic more thorough and we have to
1652:37 - think it more through um we've gotten
1652:40 - started with block but we are not really
1652:42 - there yet so in this chapter as you can
1652:44 - see in the captions we're gonna handle
1652:46 - off block exceptions during login so
1652:49 - there's gonna be
1652:50 - um quite a bit of um
1652:52 - moving around between different files
1652:55 - and we're gonna like basically clean
1652:57 - things up so we have to jump around
1652:59 - between files and i'm going to do my
1653:01 - best to explain
1653:02 - when i move between files as well and
1653:04 - like what we're adding what we're
1653:06 - removing and
1653:07 - what we're modifying so i hope you can
1653:09 - um
1653:10 - you can also follow along
1653:14 - all right so the first thing that we're
1653:16 - going to do as you can see in the
1653:17 - caption here is to remove our off state
1653:20 - login failure
1653:21 - so what we're going to do is um first of
1653:24 - all i'm going to bring the code to the
1653:27 - to the main screen here so you see it as
1653:29 - well and i'm going to
1653:31 - perhaps not even bring up scrcpy because
1653:34 - i don't really think we need scr cpy
1653:36 - right now
1653:38 - so if we look at our um
1653:42 - auth
1653:43 - state
1653:44 - the way it is right now i don't even
1653:46 - know which file i opened
1653:47 - um if i say command p off state so let's
1653:50 - go to the off state dart file okay
1653:53 - and as you can see in here if i if i
1653:55 - make the size a little bit bigger
1653:58 - you can see that we have for instance at
1654:00 - the moment
1654:01 - um
1654:03 - a off state login failure and then there
1654:05 - is an exception in there and also we for
1654:08 - instance have off state logged in so it
1654:10 - seems like this is kind of like a
1654:11 - pattern that we're following so we have
1654:13 - off state logged in and then auth state
1654:16 - login failure with an exception and then
1654:18 - we have off state logged out and then a
1654:21 - log out failure
1654:23 - however we're going to clean this up a
1654:25 - little bit here and make sure that
1654:28 - we don't have just like except
1654:31 - like
1654:32 - too many um
1654:34 - off states that we have to handle in our
1654:36 - application okay
1654:38 - so what we need to do is to go into our
1654:41 - logged out in here and add an exception
1654:45 - so
1654:46 - the point of this is that if you for
1654:48 - instance um
1654:50 - are logged out at the moment in the
1654:52 - application
1654:54 - then there may also be an exception and
1654:56 - you you you probably are asking like how
1654:58 - can a state of logout have an exception
1655:01 - well
1655:02 - what we're going to do is that when you
1655:04 - try to log into the application let's
1655:06 - let's say you're a complete new user and
1655:08 - you haven't logged into the application
1655:10 - before okay you download the application
1655:12 - what you what is your state your state
1655:14 - is logged out
1655:16 - now let's say that you make up an email
1655:18 - and a password and then you write that
1655:20 - in the login screen and then you press
1655:22 - the login button there are no users
1655:24 - let's say in the system with that with
1655:26 - those information that you provided
1655:28 - then we're going to give you an
1655:29 - exception we're going to give you an
1655:31 - error saying that well you couldn't log
1655:33 - in
1655:34 - what is your state at that point well
1655:36 - you're still logged out okay but now
1655:39 - you're logged out and then the screen
1655:41 - also has to display some exceptions so
1655:43 - that's why we're going to build a build
1655:45 - exception right into the auth state
1655:48 - logged out okay
1655:50 - so let's go in here and just create an
1655:53 - optional exception in here like that and
1655:56 - just call it exception okay and i'm
1655:58 - going to get help from visual studio
1655:59 - code to add that parameter into the
1656:02 - initializer
1656:03 - and let me do some reshuffling on the
1656:05 - screen as well so you see it better and
1656:08 - perhaps decrease the size of the font as
1656:10 - well okay
1656:13 - so that was the first thing that we had
1656:14 - to do and you can see here
1656:17 - that i've written we don't really need
1656:19 - auth state loading in auth events login
1656:22 - so
1656:24 - what we're going to do is to go in
1656:26 - our off block so let me just save this
1656:28 - file and let's go to off block
1656:32 - and in here we have this logged out with
1656:35 - an exception and we're going to assume
1656:36 - fix that actually let's see in here
1656:39 - yep let's just say
1656:41 - logged out at the moment and let's pass
1656:44 - a null exception in here as well
1656:47 - so i'm going to go to my notes as well
1656:49 - to auth block to ensure that i have all
1656:52 - the necessary information to pass
1656:54 - through to you
1656:55 - so let's go in here and also fix that so
1656:57 - now we're in our off block dart file and
1656:59 - we fixed the error that was caused by us
1657:01 - adding an optional parameter
1657:04 - um to our off state um logged out all
1657:08 - right so we fixed that now
1657:11 - then the next step as the caption
1657:12 - indicates is we're going to remove the
1657:14 - emitting of off state loading
1657:17 - from auth event login so
1657:20 - let's go ahead and do that so we're
1657:22 - going to go ahead and remove this image
1657:25 - from there okay so we're not gonna
1657:27 - display any kind of like a login screen
1657:29 - or anything
1657:32 - okay so
1657:33 - um
1657:34 - as you can see in here we're now gonna
1657:36 - start using block listener
1657:39 - um i've talked about block listener
1657:41 - block provider block builder block
1657:44 - consumer before but for those of you who
1657:46 - are not aware of what a block listener
1657:49 - is a block listener as its name
1657:50 - indicates and it's only going to listen
1657:53 - to changes in the state of a block for
1657:56 - instance our off block and it is going
1657:58 - to allow you to
1657:59 - issue some side effects so
1658:02 - a side effect is for instance displaying
1658:04 - of a new screen or displaying a dialogue
1658:07 - or removing a dialogue or removing a
1658:09 - screen
1658:10 - from your navigation stack these are
1658:12 - side effects okay
1658:13 - so they don't necessarily
1658:16 - create a new widget
1658:18 - to be for instance uh to replace the
1658:22 - current widget that's on the screen
1658:24 - instead they can create something that
1658:26 - is on the side as its name indicates so
1658:29 - listener is perfect for that so the
1658:31 - listener property
1658:32 - or the listener parameter of a block
1658:34 - listener doesn't return a widget except
1658:37 - it's just a void block so it allows you
1658:39 - to do something with the incoming state
1658:41 - okay
1658:42 - so what we're gonna do now is we're
1658:44 - gonna start using
1658:46 - block listener in our login view for
1658:48 - this chapter
1658:50 - in order to basically handle our
1658:53 - exceptions because if you have a look at
1658:55 - our
1658:56 - login view right now you can see that we
1658:59 - have this
1659:00 - text button which reads login
1659:04 - and in there we're sending an
1659:07 - event of login to our auth block
1659:09 - but we're also handling exceptions in
1659:12 - this way and as we mentioned before
1659:14 - these exceptions are never going to
1659:16 - happen in this flow because
1659:18 - adding a new event to your
1659:21 - block or any block doesn't necessarily
1659:24 - have to throw an exception the way it
1659:27 - works for us if we go back to our auth
1659:29 - block and have a
1659:31 - look at our login you can see that if
1659:35 - there is an exception what we're going
1659:37 - to do and what we're doing at the moment
1659:39 - is like we're saying off state login
1659:41 - failure
1659:44 - and what we're what we also need to do
1659:46 - actually is to clean this up because
1659:48 - login failure shouldn't really be there
1659:51 - so i'm going to go to my notes as well
1659:53 - and make sure that that yeah that seems
1659:55 - to be completely removed so let's go to
1659:58 - our off state actually and as part of
1660:00 - what we did in here
1660:02 - logged out that we added the exception
1660:04 - let's go and remove this login failure
1660:07 - completely okay so now i'm in off state
1660:10 - dark file and
1660:12 - i removed off state
1660:15 - where was it um
1660:17 - off state login failure because as i
1660:20 - mentioned a login failure is now
1660:22 - expressed by the auth state logged out
1660:25 - all right so
1660:27 - you're either logged in or logged out
1660:29 - that's how i'm thinking and if you're
1660:31 - logged out there may be an exception
1660:33 - which was
1660:35 - therefore for instance caused during the
1660:37 - login process so now that we've removed
1660:39 - that state auth state login failure in
1660:42 - here we're going to replace that in our
1660:45 - osblog dart file we're going to replace
1660:47 - that by auth state
1660:51 - and
1660:52 - log out and then an exception in here
1660:56 - okay
1660:57 - so that's that
1661:00 - so now we're talking about uh auth
1661:02 - listeners so let's go ahead and try to
1661:06 - fix this up so in our login view
1661:09 - so i'm just going to go into my notes as
1661:11 - well
1661:13 - so if you have a look at our login view
1661:16 - right now we have a text button at the
1661:18 - bottom of the screen
1661:20 - which looks like this this is a text
1661:22 - button and it has an on press with an
1661:24 - async okay so that is the actual login
1661:27 - button all right and this login button
1661:31 - is the one then for now that is going to
1661:33 - take care of the exception handling
1661:34 - using our
1661:38 - block listener so as you can see in the
1661:40 - cache it says our login view won't be
1661:41 - rebuilt since the state is the same but
1661:44 - with an exception
1661:46 - so this is very important to actually
1661:48 - understand so let's have a look again at
1661:50 - our auth state in here and auth state
1661:53 - logged out
1661:55 - so
1661:55 - even if we put an a block listener and
1662:00 - wrap this button this text button here
1662:02 - with a block listener
1662:04 - and
1662:05 - you see once the application launches in
1662:08 - our off block you can see that
1662:10 - first we are logged out okay so when the
1662:13 - application launches there is no user
1662:15 - then the state is logged out and then
1662:17 - when you press the login button with
1662:18 - invalid credentials for instance
1662:20 - then the state is still going to be
1662:22 - logged out but with an exception
1662:24 - however this
1662:26 - button won't be able to render or do
1662:30 - anything with those exceptions because
1662:32 - from our off blocks perspective it is
1662:35 - the same state one within without an
1662:38 - exception and the other one
1662:40 - with an exception right
1662:42 - so it is the same state or it is the
1662:45 - same state class at least
1662:47 - so
1662:48 - we we are actually going to fix that um
1662:51 - but for now we're just going to go ahead
1662:54 - and do some cleanup in here
1662:57 - so let's go ahead and as the caption
1663:00 - indicates we're gonna handle some
1663:02 - exceptions in our text button in here
1663:05 - so let's go and wrap our text button um
1663:09 - with a block listener okay so i'm gonna
1663:12 - do command dots on this
1663:14 - and then i'm gonna say wrap with block
1663:16 - listener and as i've mentioned this
1663:19 - previously i have this these wrap with
1663:22 - block etc because i have an extension in
1663:25 - visual studio code call call block that
1663:27 - is from felix angelov i hope that i'm
1663:30 - pronouncing pronouncing his name right
1663:32 - from um very good ventures who are the
1663:34 - people who are basically sponsoring
1663:36 - block library
1663:39 - so
1663:41 - that is the reason i see all those wrap
1663:43 - with block etc in visual studio code if
1663:45 - you don't have that you may have to do
1663:47 - this part by hand like to create a block
1663:49 - listener in here but i'm just gonna take
1663:51 - advantage of having that extension in
1663:52 - visual studio code and just say wrap
1663:54 - with block listener okay
1663:57 - and here you can see it says okay what
1663:59 - type of a block is it and i'm gonna just
1664:01 - say it is the off block
1664:04 - and it says what state does it have then
1664:06 - i'm gonna say off state
1664:09 - all right and then here it says okay do
1664:11 - whatever you want to do now
1664:14 - so
1664:15 - um
1664:16 - that was the wrapping of our text button
1664:19 - with a block listener so that's that's
1664:21 - just that just went smoothly
1664:24 - now what we have to do is as you can see
1664:26 - in the caption is to handle three
1664:28 - separate exceptions that might happen
1664:30 - during login let's go back let's take a
1664:32 - trip back to our
1664:34 - firebase auth provider
1664:36 - um so firebase author provider dart file
1664:39 - and have a look at our login
1664:41 - code as you can see in here
1664:43 - and you can see that there could be
1664:45 - three exceptions that might happen that
1664:47 - are called firebase auth exception user
1664:50 - not found wrong password etc
1664:53 - so we need to handle these off
1664:56 - exceptions so user not found wrong
1664:58 - password and generic auth exception okay
1665:00 - so let's go in here and just say that
1665:03 - okay if state is um off
1665:08 - state logged out like that
1665:12 - so
1665:13 - remember inside logged out we could have
1665:15 - an exception an optional exception and
1665:17 - that's exactly what we're gonna handle
1665:19 - right now
1665:21 - so let's say if
1665:22 - that was you see we said now if state is
1665:25 - logged out so now in this code block in
1665:27 - here dart is going to understand that
1665:29 - okay anywhere in here state is
1665:33 - auth state logged out so you have access
1665:36 - to exception right here okay
1665:38 - so then we're going to say if states
1665:40 - exception is
1665:42 - user not found off exception
1665:47 - and we're gonna display a weight
1665:49 - show
1665:50 - uh
1665:51 - error dialog so let's make this a
1665:53 - listener also async and then we're gonna
1665:56 - say show error dialog
1665:59 - and which we've coded before remember
1666:01 - this uses the generic dialog so i'm
1666:03 - going to go back here to login view dart
1666:07 - and for the text we're just going to say
1666:08 - user not found okay
1666:11 - then we have to also handle wrong
1666:13 - password off exception so else if state
1666:16 - exception is wrong password off
1666:19 - exception then copy the text here and
1666:21 - then in here we're just going to say
1666:22 - wrong credentials
1666:26 - and remember in anything that has to do
1666:28 - with username and password it's quite
1666:30 - important that you don't tell the user
1666:33 - which part of their credentials actually
1666:36 - incorrect because if
1666:39 - i mean if there is a hacker who's trying
1666:40 - to get into the system and just using
1666:42 - the ui then if you tell them wrong
1666:45 - password they'd be like ah so i got the
1666:47 - email right it's just a password that's
1666:49 - incorrect so
1666:50 - try not to tell a user even if it's for
1666:53 - good reasons like if it even if you even
1666:56 - if you think well i have no hackers in
1666:58 - my application
1666:59 - it is still better just to say wrong
1667:02 - credentials because the user themselves
1667:04 - probably already know that their email
1667:06 - is correct or incorrect so they're first
1667:08 - going to check their email so if the
1667:10 - email is correct then they are going to
1667:11 - know that the password is incorrect and
1667:13 - as you'll see
1667:14 - we're going to later allow the user to
1667:15 - reset their password so
1667:18 - so just say wrong credentials in my
1667:20 - opinion at least so
1667:22 - and then else if state
1667:25 - exception is generic auth exception
1667:29 - then we're going to display a dialogue
1667:30 - and in here we're just going to say
1667:32 - authentication
1667:33 - error
1667:34 - okay
1667:38 - so that's that part done so now we've
1667:40 - handled those auth exceptions in our
1667:44 - login view for our text button that says
1667:47 - login
1667:48 - all right
1667:51 - so now that we have that what we need to
1667:52 - do is to remove the uh exception
1667:55 - handling from the button itself so at
1667:58 - the moment we have a huge try statement
1668:02 - not a huge actually we have quite a long
1668:05 - try catch statements here that we have
1668:07 - we're catching three exceptions which
1668:09 - are now actually being caught here with
1668:12 - our
1668:13 - block listener so let's go and not
1668:16 - actually do that so i want you to grab
1668:18 - this complex read
1668:19 - and where we actually pass the event of
1668:22 - log into our block and remove this
1668:24 - entire try and catch block and just do
1668:27 - the context read at auth event login so
1668:30 - your unpressed
1668:32 - event or sorry on your on press
1668:34 - parameter of your text button should
1668:36 - look very simple just like this email
1668:38 - password and then you pass that event to
1668:41 - your auth block
1668:45 - all right so now that that has happened
1668:48 - let's actually check this out and see if
1668:52 - everything works and remember this is
1668:54 - like the beginning of us moving towards
1668:56 - a better approach of handling our
1668:59 - authentication and
1669:00 - routing with blocks so things aren't
1669:02 - going to be smooth actually we have a
1669:05 - lot of problems we have to fix but this
1669:07 - is just like the beginning so i'm going
1669:09 - to bring scr cpy in here and let's just
1669:12 - test this so
1669:15 - i'm going to do a hot
1669:16 - restart
1669:18 - and
1669:19 - now i'm on the login screen so okay i'm
1669:22 - then gonna go ahead in here and like put
1669:24 - my email address
1669:26 - and then i'm gonna put some inquiry
1669:28 - credentials in here okay and i'm just
1669:29 - gonna press the login button and now you
1669:32 - can see that our block listener is
1669:34 - taking care of that so it's saying oh
1669:36 - you're logged out and then it's wrong
1669:39 - credentials okay so i'm gonna press ok
1669:42 - then i'm gonna just put an email address
1669:44 - here that doesn't exist and then press
1669:46 - the login button and now you can see
1669:48 - user not found okay and to be honest
1669:50 - with you if you wanna if you wanna do
1669:52 - what i actually said before that it's
1669:53 - better to
1669:55 - not tell the user whether it's their
1669:57 - user that is wrong or password you may
1670:00 - want to actually wrap both the state
1670:03 - exception of user not found and wrong
1670:05 - password and just display the same
1670:07 - message so you could do that by saying
1670:10 - war in here so or
1670:12 - that
1670:14 - right
1670:15 - so
1670:16 - and then you can just display the same
1670:18 - message and then you could just remove
1670:20 - this statement from there so that could
1670:22 - also work i'm just gonna leave it like
1670:23 - this but just so you know it is actually
1670:26 - better to do that approach which i just
1670:28 - showed you momentarily
1670:30 - all right so it seems like our block
1670:32 - listener is working fine in the login
1670:34 - view so this was just the beginning and
1670:36 - we have a lot to fix so we're going to
1670:37 - fix those things in the coming chapters
1670:40 - okay
1670:41 - now that the code seems to be working
1670:43 - for login view let's just go ahead and
1670:46 - do what we usually do and commit our
1670:48 - work so that we don't lose the the code
1670:52 - if anything happens so
1670:54 - i'm gonna minimize scr cpy
1670:57 - make visual studio code a little bit
1670:59 - bigger in here and
1671:01 - increase the size quite dramatically
1671:03 - let's have a look at our status
1671:06 - we've modified three files so let's just
1671:08 - say it's a git commit
1671:12 - and in here
1671:14 - let's actually let's do it at all and
1671:16 - then we just do a normal commenting here
1671:19 - that's step 24 okay
1671:22 - now that it's done let's just push our
1671:23 - changes to the remote and then let's
1671:26 - just also gets get status nothing to
1671:29 - command so everything was committed
1671:30 - successfully and then let's just tag as
1671:32 - step 24 i believe right
1671:36 - so that's our tag and then we push our
1671:38 - tags
1671:40 - and let's have a look at our tags to
1671:42 - this point 23 we have where's 24 and
1671:46 - there is 24 so we have everything tagged
1671:48 - successfully
1671:50 - great so um as you can see and as is
1671:54 - tradition we always talk about at the
1671:56 - end of every chapter we talk about what
1671:57 - we need to discuss in the chapter that's
1671:59 - uh to come
1672:00 - and um
1672:02 - so you can see our routing and dialog
1672:04 - handling isn't isn't block based at the
1672:06 - moment we still have quite a lot of
1672:08 - places in our application that we're
1672:10 - seeing for instance navigator of context
1672:12 - push name and removed until or we're
1672:14 - doing push names so
1672:16 - so we've handled some bits and pieces of
1672:18 - our application and we're using block
1672:19 - but for instance we aren't handling
1672:21 - stuff in the register view or the verify
1672:23 - email view stuff like that so
1672:25 - we have a lot of work to do and the next
1672:27 - chapter is actually going to be a heavy
1672:28 - one but it's going to be such a key
1672:30 - chapter in this entire course
1672:32 - that if you could just stick with me
1672:34 - throughout the next chapter then you're
1672:36 - gonna see your applications architecture
1672:38 - actually become more and more robust so
1672:41 - grab some refreshments if you want to
1672:43 - and i'll see you in the next chapter
1672:45 - hello everyone and welcome to chapter 42
1672:47 - of this letter course
1672:49 - in previous chapters we've talked quite
1672:50 - a bit about cleaning up our application
1672:53 - logic and our authentication logic we've
1672:55 - come a good bit forward with that and
1672:59 - we've
1673:00 - um we clean up quite a bit of stuff in
1673:03 - the login view and now we're using block
1673:05 - listener in the login view if you follow
1673:07 - all the chapters chronologically up to
1673:09 - up to that including the previous
1673:10 - chapter
1673:11 - so you should already know about block
1673:13 - block listener block consumer block
1673:14 - provider um
1673:17 - and block builder of course
1673:19 - but we have quite a bit left and i'm
1673:22 - actually proud to say that this chapter
1673:24 - and maybe the next one or two chapters
1673:27 - are gonna be like the
1673:29 - glues that bring the application to a
1673:32 - lot more tighter point where it will be
1673:35 - ready for releasing to the app store and
1673:37 - the play store so if you stick with me
1673:39 - throughout these few chapters that are
1673:41 - left
1673:41 - we are going to basically create a lot
1673:44 - more cleaner product that is not only
1673:46 - usable by the end user but it's also
1673:49 - but it's also architecturally sound so
1673:53 - you're going to be proud of actually
1673:54 - releasing this application or maybe even
1673:56 - showing this code to your friends and
1673:59 - colleagues so
1674:00 - as a caption in the case in this chapter
1674:02 - we're going to talk about moving to
1674:03 - block for routing and dialogues because
1674:06 - right now you know routing what we have
1674:08 - in our application is kind of like a
1674:11 - hybrid in the main dart file and i mean
1674:14 - we don't have to talk about uh
1674:17 - so like abstract concept concepts we can
1674:19 - actually look at our main dart files so
1674:21 - if you look here what we've done in the
1674:22 - main dart file we're actually creating a
1674:24 - block builder and depending on the
1674:26 - states that are being output by our
1674:29 - block we're displaying the correct view
1674:31 - so this in itself is quite fine so
1674:33 - there's nothing wrong with this but
1674:35 - we're also mixing this up with custom
1674:38 - places in our application where we're
1674:40 - saying for instance context of
1674:42 - um let's see actually with navigator off
1674:47 - and you can see we're doing actually
1674:48 - that's fine but you can see in our login
1674:50 - view when you press the not registered
1674:52 - yet register here button in order to do
1674:54 - the registration of the user then we're
1674:56 - doing a navigator of push blah blah blah
1674:58 - so there's quite a few bits and pieces
1675:01 - left still in our application that we're
1675:03 - either directly talking with our auth
1675:05 - service which we shouldn't be doing we
1675:06 - should be talking to the off block
1675:09 - or and we're talking with navigator of
1675:12 - something to do push name so
1675:15 - in this chapter we're going to clean
1675:16 - these things up and make make basically
1675:19 - our auth block and
1675:20 - the consumption of our off block a lot
1675:23 - tighter all right using block and
1675:25 - listeners block builders and um
1675:29 - we're all also going to use block
1675:30 - consumers i believe so
1675:32 - let's go ahead and do that
1675:36 - so
1675:37 - this is i mean
1675:38 - as the caption indicates i mean i've
1675:40 - already talked about this maybe i should
1675:41 - have displayed this caption a few
1675:43 - seconds ago
1675:44 - but we've already talked about this we
1675:45 - should basically tighten up how we're
1675:47 - working with our um
1675:49 - routing and our
1675:52 - how we work with off service
1675:56 - and you can see in here we need a few
1675:58 - more auth events in order to be able to
1676:00 - achieve this so let's go ahead and open
1676:02 - our um
1676:05 - i need to probably do some reshuffling
1676:07 - on the screen here so you see the code
1676:09 - better so i'll do what i usually do here
1676:12 - and then let's go to our off event
1676:15 - in here
1676:16 - so these are the events that we have at
1676:17 - the moment we have log out login and
1676:20 - then we have an initialize but we also
1676:22 - have quite a few other ui events that
1676:25 - the application is doing in order to for
1676:27 - instance interact with authentication
1676:29 - such as
1676:31 - um sending a verification email all
1676:33 - right so when you're in the verify email
1676:35 - view and the user presses send the
1676:37 - verification email again then that is at
1676:39 - the moment talking with our auth service
1676:41 - directly and we shouldn't be doing that
1676:42 - we should be asking our off blog to do
1676:44 - that or when you for instance um
1676:48 - ask the in in our verify email view so
1676:51 - if you go here you can see that we had
1676:53 - this
1676:54 - um log out button or the restart button
1676:57 - so let's go ahead and i'm going to bring
1677:00 - scrcpy in here and let's
1677:03 - actually to be able to show to verify
1677:05 - email we have to have a user who hasn't
1677:06 - been verified but if you remember from
1677:08 - before if you've created a user just
1677:10 - recently
1677:11 - or just just now for instance and that
1677:14 - user hasn't verified their credentials
1677:16 - then they're gonna always be moved into
1677:18 - this verify email view in which they
1677:20 - have to for instance say that yeah um i
1677:23 - am i did they had the ability to send a
1677:26 - verification email to their email again
1677:28 - or restart the whole process meaning to
1677:30 - log out and just go to the registered
1677:32 - login viewing and so
1677:34 - that is at the moment happening directly
1677:35 - you can see it's off service directly to
1677:38 - the auth service and we should be doing
1677:39 - that and then there is a navigator of
1677:41 - push name then removed until which we
1677:42 - shouldn't be doing either
1677:44 - so in order to tighten these things up
1677:46 - we need a few more events in our auth
1677:49 - event dart file and that's what we're
1677:50 - going to do right now
1677:53 - so let's go to our auth event file and
1677:56 - i'm gonna do the same thing in my notes
1677:59 - so um the first
1678:01 - new event that we're gonna create in
1678:03 - here as you can see it's called auth
1678:05 - event send email verification all right
1678:08 - so let's go ahead and do that i'm going
1678:10 - to get rid of this bottom view in here
1678:12 - and also the project structure
1678:15 - so i've already written that in my notes
1678:17 - so i'm just going to bring it here to
1678:20 - the to visual studio code so i don't
1678:21 - have to write it manually but the event
1678:23 - name should be called off event send
1678:25 - email verification the goal is for our
1678:29 - verify email view to send this event to
1678:32 - our off block in order to request a new
1678:34 - verification email to be sent to the
1678:36 - currently logged in user okay
1678:41 - we also need a register event so the
1678:44 - goal is that inside register view so
1678:46 - let's go have a look at the register
1678:48 - view right now and you can see when the
1678:50 - user presses the register button at the
1678:52 - moment we're saying uh firebase create
1678:54 - user so we're going directly to firebase
1678:57 - auth service
1678:58 - and we're saying create user and then
1679:00 - immediately we're saying send email
1679:02 - verification so we shouldn't be doing
1679:03 - any of these so these three things that
1679:05 - we're doing here are pretty much wrong
1679:07 - from the architecture perspective so we
1679:10 - shouldn't be talking with these services
1679:11 - directly we should clean this up okay
1679:14 - in order to achieve that we need to go
1679:15 - back to our auth event and create a new
1679:18 - oz event called register
1679:21 - so i'm going to bring that at the bottom
1679:23 - of login here so let me go ahead and
1679:26 - create a new
1679:29 - off event we call it class of event
1679:31 - register
1679:33 - and of course we're going to extend our
1679:35 - auth event
1679:36 - and for register we need two parameters
1679:39 - if we go back to the register view you
1679:40 - see upon registering we're always
1679:42 - sending the email and the password so
1679:44 - let's go ahead and do the same thing in
1679:45 - here so we say final string email and
1679:47 - i'm going to copy this and i'm going to
1679:49 - say just password and get help from
1679:51 - visual studio code to create this
1679:53 - constant constructor okay you may want
1679:56 - to make these required name fields using
1679:59 - these but i'm not going to do that so
1680:01 - i'm just going to leave it like this
1680:02 - with email and password okay
1680:06 - so that's our off event register
1680:09 - excuse me
1680:12 - so the other thing that we need
1680:15 - an event called should register so um
1680:19 - basically that means for instance if you
1680:21 - um haven't really registered a user yet
1680:25 - then we need to
1680:26 - send this event i'm actually gonna have
1680:28 - a look in my login view
1680:31 - and that is if you for instance go to a
1680:35 - login view in here
1680:37 - and then you have a look at this button
1680:39 - that we have in here not registered yet
1680:41 - register here that is basically the
1680:43 - event that we're going to implement
1680:44 - right now so we're going to tell the off
1680:46 - block that hey you should register user
1680:49 - okay and then off block is then going to
1680:51 - change its state to a state that the
1680:54 - application is going to understand and
1680:55 - automatically send the user to the
1680:57 - register view okay so
1680:59 - that's the use case
1681:02 - so um let's go ahead i'm gonna just
1681:04 - check my notes as well let's go ahead
1681:07 - and develop this should register and
1681:09 - i've already done that in my notes so
1681:11 - i'm gonna bring it at the bottom of off
1681:13 - event register but you will need to
1681:15 - write this yourself so it looks like
1681:17 - auth event should register extends off
1681:19 - event and it just has a constant
1681:20 - constructor so it's very simple okay
1681:25 - so that was for our auth um event should
1681:28 - register
1681:31 - so
1681:32 - at the moment if we go now as you can
1681:34 - see it in caption we need also and now
1681:35 - we've done the auth events like this
1681:38 - stuff that we had to create in order to
1681:40 - be able to handle various
1681:42 - um events that come from the ui but we
1681:43 - also need to fix up our states so let's
1681:46 - go to our off state and have a refresher
1681:49 - in here you can see we have the state
1681:50 - loading
1681:51 - logged in needs verification logged out
1681:55 - and log out failure but we're going to
1681:57 - clean this up a little bit and make sure
1681:58 - that we have every state that our
1682:00 - application requires in order to be able
1682:02 - to for instance display dialogs or do
1682:05 - routing okay
1682:08 - so
1682:09 - in at the moment in our off state what
1682:13 - we need to do is to create you see we
1682:15 - have this loading state and what we're
1682:17 - going to do is to actually remove the
1682:19 - loading state and we're going to create
1682:22 - an auth state called on initialized all
1682:25 - right so
1682:27 - um
1682:28 - let's go ahead and actually remove this
1682:30 - off states loading and create a class in
1682:33 - here say auth state
1682:35 - on initialized because when you land in
1682:38 - the application
1682:40 - for the first time you may actually want
1682:42 - to for instance
1682:43 - display some sort of loading screen or
1682:45 - whatever and we're going to indicate
1682:47 - that the application hasn't really
1682:49 - initialized firebase or its
1682:50 - authentication system using this off
1682:53 - state uninitialized it's just this is a
1682:55 - cleaner way of indicating to the two
1682:59 - the call side which is ui that hey we
1683:01 - haven't yet been initialized so you need
1683:03 - to call the initialize function on our
1683:05 - off block okay or sorry you have to send
1683:07 - the auth event of
1683:10 - uh initialize auth event okay so let's
1683:12 - go to off state so
1683:14 - just to recap i removed off state
1683:16 - loading
1683:18 - and now we're going to put in our off
1683:21 - state uninitialized so we're going to
1683:23 - say uninitialize extends off state
1683:27 - and let's just create a constant
1683:29 - constructor for it as well like that
1683:32 - okay
1683:36 - so the other thing that we have to
1683:37 - implement as well is to
1683:40 - obviously we've talked about login like
1683:42 - here login logged out and then log out
1683:45 - failure etc
1683:48 - and and now we actually have to start
1683:51 - talking about what happens when the user
1683:53 - presses the register button when the
1683:55 - user presses the register button we also
1683:57 - have to handle
1683:58 - the case that yeah we are registering at
1684:01 - the moment so it's a process that's
1684:03 - ongoing but we also have to talk about
1684:05 - what happens if the registration
1684:07 - fails so we're in the process of
1684:09 - registering either it goes fine and then
1684:12 - we say you're registered or we say
1684:14 - registry registration failed so let's go
1684:17 - ahead and create
1684:18 - a um a state in here right after
1684:21 - uninitialized let's just say class
1684:23 - of state
1684:25 - what are we calling it registering
1684:28 - extends off state okay and let's just in
1684:31 - here
1684:32 - as we're doing in here for instance in
1684:34 - the state of logged out let's just copy
1684:36 - this
1684:37 - exception and bring it into off state
1684:39 - registering
1684:41 - and then let's create a constant
1684:42 - constructor here for our off state
1684:44 - registering and i'm just going to say
1684:46 - constant here okay so now we have
1684:48 - registering like that
1684:51 - so now we have registering logged in
1684:54 - and we also actually need to remove off
1684:56 - state logged out failure
1684:59 - because we well
1685:01 - excuse me
1685:02 - we have logged out with an exception
1685:08 - um so let's go ahead and do that right
1685:10 - now let's just remove off state log
1685:13 - log out failure as well
1685:15 - all right so
1685:16 - excuse me again
1685:19 - so that's for off state registering
1685:23 - so
1685:25 - as you can see in the caption it says
1685:26 - loading of the logged out state we need
1685:28 - login screen to have a loading dialog so
1685:31 - we need is loading in the auth state
1685:34 - logged out so let's have a look at
1685:36 - our logged out here
1685:39 - and
1685:40 - previously we had this loading state as
1685:43 - a separate state so it was off state
1685:46 - loading and we were gonna generically
1685:47 - use it everywhere but now what we're
1685:49 - gonna do is to build this loading state
1685:51 - into
1685:52 - or to build this loading flag into
1685:55 - existing states themselves so
1685:58 - let's then go ahead and say well
1686:00 - when you press the login button what
1686:02 - we're going to do first is just to say
1686:05 - um actually wait let's go one step back
1686:07 - let's say you just landed in the
1686:09 - application but you already have a user
1686:10 - which you haven't logged them before
1686:12 - okay so your state is logged out and the
1686:15 - exception is null
1686:17 - and we're going to add a flag in here
1686:19 - and say final bool is loading
1686:23 - and let's add that is loading to this
1686:25 - parameter in here and make both of these
1686:27 - required parameters okay like this
1686:30 - and put a
1686:31 - comma there as well like this boom so
1686:35 - when you land in the application
1686:36 - exception your state is logged out there
1686:39 - is no exception so exceptions null and
1686:41 - is loading is false because we're not
1686:42 - loading anything then you write your
1686:45 - credentials and you press the login
1686:46 - button then what happens state is still
1686:49 - logged out exception is null but loading
1686:52 - is true
1686:53 - then let's just say that you entered the
1686:55 - incorrect credentials then what we're
1686:56 - going to do in our block auth block is
1686:58 - going to say ooh you're off state logged
1687:00 - out there is an exception and is loading
1687:02 - is false
1687:05 - and then you'd be like okay now i
1687:07 - entered the inquiry credentials then
1687:08 - you're gonna correct those and then
1687:10 - press the login button again now what
1687:12 - are we gonna say we're gonna say okay
1687:14 - all state logged out exception is
1687:16 - nothing and then is loading is true
1687:18 - and if then
1687:20 - we can log you in that we're gonna
1687:21 - produce another state for you so you see
1687:24 - this is how we're using states to convey
1687:26 - the
1687:27 - cur like the correct state of the
1687:29 - application to the consumer which is the
1687:31 - ui okay
1687:33 - so and this is not like you may think oh
1687:36 - how does he know that this is the right
1687:37 - right way of doing things well
1687:40 - there is no rights and wrong in here it
1687:43 - is just how you
1687:45 - reason about your application
1687:47 - and when i say there is no right and
1687:49 - wrong
1687:50 - what i mean is that some things are more
1687:52 - right than the others and some things
1687:53 - are more wrong than the others but
1687:56 - what you need to find is like the sweet
1687:58 - spot in here which is
1688:00 - which is exactly
1688:02 - good for your application and at the
1688:04 - same time is not incorrect okay and that
1688:07 - is the definition of write for your
1688:09 - application and in this case this is the
1688:12 - definition of right for this application
1688:14 - so you just need to find a sweet spot
1688:16 - for your application okay
1688:20 - so
1688:21 - now let's have a look in here a little
1688:23 - and talk a little about a little bit
1688:25 - about equality um
1688:27 - and
1688:28 - what i mean by equality in here is that
1688:30 - you see what i talked about is three
1688:33 - different logged out states logged out
1688:35 - with exception null is loading false
1688:38 - logged out with exceptional is loading
1688:40 - true and then logged out with an
1688:42 - exception and is loading false for
1688:44 - instance
1688:45 - so you're producing three different
1688:47 - types of states all of the same class
1688:50 - so how will
1688:52 - how will uh your application understand
1688:55 - that these are actually different states
1688:57 - so
1688:58 - you kind of need to differentiate
1689:00 - between various states of your off state
1689:03 - logged out so you kind of need to tell
1689:05 - your application that hey
1689:06 - although the previous state was also off
1689:09 - state logged out and the correct like
1689:11 - the one that i'm producing right now is
1689:13 - also off state logged out but these two
1689:16 - states could actually be different from
1689:18 - each other and in what they contain so
1689:20 - you need to kind of create like an
1689:22 - equality
1689:23 - and
1689:24 - logic into your states to tell the
1689:27 - application hey this
1689:28 - although it's the same is like a new
1689:30 - instance of the same state class but
1689:33 - internally is not the same thing and for
1689:35 - that we have to implement equality all
1689:38 - right
1689:39 - now there is a good package that allows
1689:41 - you to do this in order to implement
1689:43 - equality in your applications and in
1689:45 - your dart code and it is called
1689:47 - equitable so let's go ahead and import
1689:50 - that and don't be intimidated by all
1689:52 - these logs in here it's just because we
1689:54 - have a lot of problems that we're fixing
1689:55 - at the moment so let's go ahead and um
1689:58 - i'm gonna change the screen layout a
1690:01 - little bit
1690:02 - increase the size
1690:04 - and let's just go ahead and say flutter
1690:07 - pop add equitable
1690:12 - stuff like that and you can read more
1690:14 - about that so i'm just going to bring up
1690:15 - my
1690:16 - safari in here and let's just say
1690:20 - flutter
1690:21 - or just pop dev
1690:23 - and let's just say equatable
1690:26 - excuse me
1690:28 - and you can see it is actually developed
1690:30 - by flutter community dev in here okay so
1690:33 - it's a verified developer in here and
1690:35 - you can also actually follow flutter
1690:38 - community dev on twitter as well to get
1690:39 - some updates about their packages okay
1690:42 - so we're now importing that into our
1690:44 - application and we should now be able to
1690:47 - use that so i'm going to get rid of this
1690:49 - bottom bar
1690:51 - and change the screen layout again
1690:53 - decrease the font size
1690:56 - okay so in here now let's go and import
1690:59 - equitable so i'm gonna just import that
1691:03 - i've already imported that in my notes
1691:04 - so i'm just gonna paste that in here you
1691:05 - import equitable like this package
1691:07 - equitable slash equitable dart okay
1691:10 - so what we need here is we're already
1691:13 - extending an existing class so what you
1691:16 - can do is you can bring in equality in
1691:18 - your classes using a mix and so we're
1691:21 - going to say mixing e quotable
1691:24 - mix in just like
1691:26 - that sorry with okay
1691:30 - so now that we're doing with that mixing
1691:32 - now we have to implement a few
1691:34 - functionalities in here as you can see
1691:35 - visual studio code helps me it says
1691:36 - create one missing override okay
1691:40 - so i do that override in here
1691:43 - and it says okay now we have to override
1691:46 - this property and you can see in here
1691:48 - what you need to return is a list of
1691:50 - properties that have to be taken into
1691:52 - account when the equitable package can
1691:55 - basically calculate
1691:57 - equality in your class and in here what
1691:59 - we're going to say is that we have two
1692:00 - properties in here called exception
1692:02 - and we also have is loading so take
1692:05 - these two properties into account when
1692:08 - computing equality in the instances of
1692:10 - auth state logged out
1692:15 - all right
1692:16 - very well done so that's that's what
1692:18 - we've done in here so we've made our off
1692:21 - state logged out class equitable and the
1692:23 - reason again for that is that we need to
1692:25 - produce various
1692:28 - various um mutations of this off state
1692:31 - logged out
1692:33 - and those different
1692:35 - mutations with various exceptions and is
1692:38 - loading need to be distinguishable from
1692:40 - each other okay and that's why we're
1692:41 - using the equitable package in here
1692:45 - so um
1692:47 - this thing we've already talked about
1692:48 - and we don't need the off state logout
1692:50 - failure so we we've removed that already
1692:53 - as part of the cleanup that we were
1692:55 - doing earlier but if you forgot to do
1692:57 - that please just look at the caption at
1692:58 - the bottom of the screen just to make
1693:00 - and just make sure go you go to
1693:01 - offstate.file and remove your off state
1693:04 - logout failure and the reason behind
1693:06 - that since i explained before is that
1693:07 - now logout failure is actually built in
1693:09 - and baked into off state logged out
1693:12 - class inside an exception all right
1693:17 - wow
1693:18 - all right let's go to the next section
1693:21 - now
1693:23 - well
1693:24 - you see at the moment we have no loading
1693:26 - screens in our application so
1693:29 - when something happens when we're doing
1693:31 - an api call for instance or we're um
1693:34 - going to our off provider and say login
1693:37 - or send an email verification we have no
1693:39 - loading screen inside the application
1693:42 - so there is nothing that indicates to
1693:44 - the user that something is actually
1693:45 - happening and we're gonna go fix that up
1693:47 - soon so as you'll see we're going to
1693:49 - create a new dialog which does some
1693:51 - loading for the user and then using that
1693:54 - dialog users going to understand that
1693:55 - okay something is happening i just have
1693:57 - to wait for it okay
1693:58 - but the user experience that we have
1694:00 - right now is kind of sub-optimal in that
1694:03 - the user presses the login screen and
1694:04 - dependent on their
1694:06 - sorry the user presses the login button
1694:07 - and depending on their internet
1694:09 - connectivity and the speed of their
1694:11 - internet internet connection that
1694:13 - operation could take
1694:14 - anywhere between a few milliseconds to a
1694:16 - few seconds so
1694:18 - if you're making a user wait a few
1694:20 - seconds based on their internet
1694:22 - connection speed then you have to kind
1694:24 - of display to them that you're doing
1694:25 - something
1694:26 - well the the usual i mean way that you
1694:29 - could do that is to display some sort of
1694:31 - a small loading indicator for instance
1694:33 - on ios
1694:34 - natively you have a little loading
1694:37 - indicator that sits on on the status bar
1694:40 - that just moves a little bit and it's
1694:43 - very tiny i would dare to say it's less
1694:45 - than
1694:46 - 20 pixels wide and 20 pixels in height
1694:48 - kind of it could even be like 17 pixels
1694:51 - width on height it's very little so it's
1694:53 - a subtle indication that something is
1694:55 - happening
1694:56 - but that's usually i mean i find that
1694:58 - quite annoying because when something is
1695:00 - loading you kind of need to
1695:02 - block the user from trying to press the
1695:04 - same button thousands of times so
1695:07 - if you display that little loading
1695:08 - indicator on the top on the status bar
1695:11 - then what you also have to do you have
1695:12 - to add some extra logic to your
1695:14 - application to block for instance the
1695:16 - current register button or the loading
1695:18 - button and you usually don't want to do
1695:20 - that but because that's just extra logic
1695:22 - what would make more sense is upon a
1695:24 - user pressing the login button or the
1695:26 - register button you want to display like
1695:27 - a blocking screen
1695:29 - that tells them that hey i'm doing
1695:31 - something okay so don't do anything else
1695:34 - while this screen is is visible on your
1695:37 - mobile display so let's go ahead and do
1695:39 - that
1695:41 - so we're going to code a loading screen
1695:43 - as you can see in the caption says we're
1695:45 - going to do it in lib utilities
1695:47 - dialogues loading dialog so let's go
1695:49 - ahead and do that
1695:50 - and bring up my notes as well
1695:55 - i'm going to close all these files just
1695:57 - to make sure we've also saved them
1695:59 - because if you close a file in visual
1696:01 - studio code at least which we haven't
1696:02 - saved before visual studio is going to
1696:04 - display your dialogue saying are you
1696:05 - sure you want to close this file without
1696:06 - saving it so it's usually good practice
1696:08 - to close your existing files before you
1696:11 - move into doing something new
1696:13 - so that you at least are sure that
1696:15 - you've saved those changes okay
1696:18 - um now let's i mean we have some errors
1696:20 - don't worry about that so
1696:22 - you should now be comfortable with
1696:24 - having errors in your application
1696:25 - because you know at the end of every
1696:27 - chapter we're going to tighten things up
1696:28 - and fix things okay so let's go to lib
1696:31 - utilities dialog
1696:33 - lib utilities
1696:35 - dialogues and we're going to create a
1696:37 - new file in here as the caption
1696:38 - indicates called loading dialog dart
1696:42 - and you see this loading dialog what we
1696:44 - also have to have in this loading dialog
1696:46 - is
1696:47 - to allow
1696:48 - to allow the caller to display this
1696:50 - dialog but also to allow the caller to
1696:53 - dismiss this dialog so it's very
1696:55 - important to be able to dismiss a
1696:57 - dialogue when the application actually
1696:58 - needs for that dialog to disappear so
1697:01 - what we're going to do first is to bring
1697:04 - a create a type f in here and we're
1697:06 - gonna call it closed dialog let me just
1697:08 - increase the size of that font as well
1697:11 - and we're gonna make sure that it's
1697:13 - equal to a void function in here okay so
1697:16 - what we're to do in here we have we're
1697:19 - going to create a function that displays
1697:20 - a loading dialog but it also returns
1697:23 - back a function that the caller can call
1697:26 - to dismiss it so it may be a little bit
1697:28 - of a shift in how you think about
1697:31 - programming if it's the first time
1697:33 - you're doing something like this but i
1697:34 - promise you it will make a lot more
1697:36 - sense as we develop it so let's say that
1697:39 - we have a function that returns a close
1697:41 - dialogue um and we call it show loading
1697:44 - dialog okay
1697:46 - and it has two
1697:47 - required parameters so let's put curly
1697:49 - brackets in here
1697:51 - and then let's just say we have
1697:54 - required build context
1697:57 - and we call it build context
1698:01 - or let's just call it context and then
1698:03 - we have a text to display so required
1698:05 - string text okay
1698:07 - excuse me
1698:11 - so and now you can see you get this
1698:12 - required build context
1698:14 - try changing its name and i'm going to
1698:15 - get help from facial studio code to
1698:17 - import let's say material
1698:19 - okay
1698:21 - now we have just one error saying that
1698:23 - you're not returning anything in here
1698:25 - so the first thing we're going to do is
1698:26 - we're actually going to define our
1698:28 - dialog how is this loading dialog going
1698:30 - to look like so it's the only thing it's
1698:32 - going to do is just to have a little
1698:33 - loading indicator a bit of spacing and
1698:36 - text that is going to be
1698:39 - using the text widget to render this
1698:41 - string so let's first define our
1698:43 - dialogue so i'm just going to say final
1698:44 - dialog is equal to alert dialogue
1698:46 - like this
1698:48 - and
1698:50 - let's just go to the next line semicolon
1698:52 - all right
1698:54 - and then we have to define the content
1698:55 - for it as you can see content should be
1698:57 - a widget so the widget we're developing
1698:59 - is a column because we want like a
1699:00 - vertical list of widgets the loading
1699:02 - screen a little bit of a size box
1699:04 - spacing and a text widget so you can
1699:06 - render that with column easily
1699:09 - and remember column what what column
1699:11 - wants to usually do is to grab as much
1699:13 - space as it needs so it could be like
1699:16 - the entire screen long we don't want
1699:18 - that what we want for the column to take
1699:20 - as little space as it needs to render
1699:23 - its content correctly so we're going to
1699:24 - say main access size oops
1699:27 - exercise it should be of type main
1699:29 - access size and we're going to say main
1699:31 - exercise of minimum all right
1699:35 - and its children
1699:36 - are going to be an array of two constant
1699:41 - widgets
1699:42 - of a circular progress indicator like
1699:45 - that
1699:46 - and then we're going to say a constant
1699:48 - of
1699:50 - size box we haven't used size boxes
1699:52 - before but size box is really good for
1699:56 - um creating spacing so
1699:59 - as you can see in here it's just an
1700:00 - empty space with a height of 10.
1700:03 - and then what we're going to do in here
1700:05 - we're just going to say display also a
1700:07 - text that
1700:08 - renders this particular text parameter
1700:11 - in here so like that
1700:14 - now we're we have a little problem here
1700:17 - with how this thing is rendered and you
1700:19 - can see they're in the same line and
1700:20 - that's why it kind of looks strange
1700:23 - let's put a comma in here and then save
1700:25 - the file to get the
1700:27 - formatting correct and let's put a comma
1700:30 - in here as well
1700:31 - like that
1700:32 - okay so now it's working as it should or
1700:35 - at least it's formatting as it should so
1700:38 - then what we're going to do in here
1700:40 - we're going to just say
1700:42 - we want to display that dialogue so
1700:43 - let's say show
1700:44 - oops
1700:46 - show a
1700:48 - show dialog okay
1700:50 - and let's go in here and the context of
1700:53 - this dialog and i'm going to bring it
1700:54 - here so you see it the context is the
1700:56 - context that we are providing to this
1700:59 - function
1701:00 - and a barrier or dismissable and i'm
1701:03 - going to show you the documentation for
1701:04 - very dismissible and let's see if we can
1701:06 - actually find that
1701:08 - oh
1701:09 - it's not helping me with that but that's
1701:10 - okay um
1701:12 - what barrier dismissable allows you to
1701:14 - do is to say that if the user taps
1701:17 - outside this dialogue either allow the
1701:20 - dismissal of this dialogue or don't and
1701:22 - we don't want the user to be able to tap
1701:24 - outside this dialog in order to dismiss
1701:27 - it because a loading screen should be
1701:28 - dismissed when we want it to be
1701:29 - dismissed not when the user wants it to
1701:31 - be dismissed and also
1701:33 - for those who are ux designers who are
1701:35 - watching this course he may be actually
1701:36 - tempted also to for instance
1701:39 - um provide a cancel i actually think
1701:42 - having a cancel button in most loading
1701:44 - screens is a good idea
1701:46 - because sometimes
1701:48 - for whatever reason an application may
1701:50 - not be able to handle for instance
1701:51 - different errors and exceptions that
1701:52 - could occur while making an api call and
1701:55 - i personally have been in this situation
1701:57 - where a dialogue was displayed to the
1701:59 - user and it was just never dismissed
1702:00 - because something went wrong the
1702:02 - application wasn't able to handle it so
1702:04 - i personally as a user had to go and
1702:05 - force kill the application and restart
1702:07 - the entire process in order to get
1702:09 - things working so if you want to have a
1702:11 - cancel button in here it's fine but um
1702:13 - i'm not doing that right now it's just
1702:15 - for the sake of simplicity so that we
1702:16 - can move on with this code as um as fast
1702:19 - as accuracy as fast and accurate as
1702:21 - possible
1702:22 - so now you know what barrier dismissible
1702:24 - false does
1702:25 - and for the builder function that's what
1702:27 - this um error is here we have to just
1702:30 - say okay we get a context
1702:32 - and but in here what we do is just do we
1702:36 - remove we we return the dialogue in here
1702:38 - okay so now we're saying show this
1702:40 - dialogue
1702:41 - and and then we're just going to say
1702:45 - the return value see we still have this
1702:46 - problem with the return value that we're
1702:48 - not returning a closed dialogue and what
1702:49 - this close dialogue is just going to be
1702:51 - is we are going to return a function
1702:53 - from our function so when the user then
1702:55 - calls that function we're going to pop
1702:57 - this dialog it's it's beautiful
1703:01 - so let's just say we return a function
1703:02 - an error function
1703:04 - upon calling which we are going to say
1703:06 - navigator of this context and we're just
1703:09 - going to say pop okay so that's how you
1703:12 - return a function that can be acted upon
1703:15 - and invoked by others
1703:18 - so now we save this and you can see we
1703:19 - don't have any errors i'm going to just
1703:23 - resize this a little bit make the font a
1703:25 - little bit smaller so you see the code
1703:27 - in its entirety
1703:31 - so
1703:33 - now let's talk about loading and
1703:35 - exception handling during the login
1703:36 - process so
1703:38 - let's go to our login view
1703:41 - and you see here we have already some
1703:44 - exception handling and we also have this
1703:46 - off block but we also have this text
1703:47 - button that is doing like manual
1703:49 - navigation it says push name and remove
1703:52 - until and we need to clean these things
1703:55 - up okay
1703:58 - so let's go inside our
1704:02 - login view and so
1704:04 - i'm going to also do it in my notes
1704:08 - and
1704:09 - let's have a look at how we've done
1704:11 - things you can see in here we have a
1704:12 - block listener at the moment that is
1704:14 - wrapping
1704:16 - itself around this text button so we're
1704:19 - not gonna do that we're gonna have the
1704:20 - text button exactly the way it is and so
1704:23 - meaning that we're gonna remove this
1704:24 - block listener from here okay
1704:26 - so what we could do is as the caption
1704:29 - indicates we're just gonna go here to
1704:31 - the scaffold and just say okay we have a
1704:33 - new block listener and remember this
1704:36 - should be the off block itself so i'm
1704:38 - gonna say off block and this should be
1704:40 - the off state like this so then inside
1704:43 - the listener what we need to do is to
1704:45 - bring
1704:46 - what we had already
1704:49 - um
1704:51 - inside
1704:52 - our
1704:54 - text button in here so we have the
1704:56 - exception handling okay
1704:58 - excuse me so as the caption indicates
1705:01 - we're going to do this exception
1705:02 - handling now inside our new block
1705:04 - listener on top so remove all the code
1705:06 - from your block listener for your text
1705:08 - button all the exception handling just
1705:10 - cut it
1705:12 - and bring it please up into this block
1705:14 - listener which is at the top level all
1705:16 - right and make this an async listener so
1705:19 - that you can await on your show or
1705:21 - dialogue okay so that's the first step
1705:23 - however we still have this empty block
1705:25 - listener in here so i'm gonna remove
1705:27 - that now so all of a sudden you see now
1705:30 - we have the text button in here
1705:33 - all right that was fantastic
1705:36 - so then what we need to do is to
1705:39 - start handling our
1705:41 - loading
1705:43 - screen basically so that is going to be
1705:46 - a bit of code so but don't be scared of
1705:48 - that we're going to handle that soon
1705:52 - so in order to be able to
1705:54 - display our loading screen we also have
1705:57 - to kind of like keep hold off this
1705:59 - um
1706:01 - close handle what do i mean by that
1706:03 - let's go back to our loading dialog you
1706:06 - see every time we call this function
1706:08 - this is going to give us a function back
1706:09 - so that we can close the
1706:12 - the dialog we have to keep hold of this
1706:14 - so that when the states change inside
1706:16 - our login view we're going to look at
1706:18 - that previous handle and be like oh we
1706:20 - have a loading screen
1706:22 - displayed to the user we have to first
1706:23 - dismiss it okay so let's go where we're
1706:27 - keeping hold of our email and password
1706:29 - in here and keep hold of a
1706:31 - close dialogue and it's going to auto
1706:34 - import that you see so if you don't have
1706:36 - auto import you may have to import this
1706:39 - file yourself
1706:41 - so let's say it's an optional and we
1706:43 - call it close
1706:44 - dialogue handle
1706:46 - okay
1706:47 - so we keep hold of that we haven't
1706:49 - assigned to it yet but we're gonna do
1706:51 - that soon
1706:54 - so let's stand in here in the state of
1706:57 - logged out and right here just add some
1706:59 - space
1707:01 - and what we're gonna do we're gonna say
1707:03 - um do we already have a closed dialog
1707:05 - handle so let's say close
1707:07 - and dialog
1707:09 - is
1707:10 - close dialog hana
1707:13 - and what we're going to do now is we're
1707:15 - going to have a look at our states and
1707:17 - also if we have a closed dialog handle
1707:20 - and we're going to display correct
1707:22 - behavior basically
1707:25 - so what we're going to do is we're going
1707:26 - to say if
1707:28 - state is loading if we're not loading at
1707:31 - the moment meaning that maybe we were
1707:33 - loading before
1707:35 - then our goal in here is that saying
1707:37 - that if we are not loading and
1707:40 - excuse me close dialogue is not null
1707:43 - and sorry
1707:45 - and
1707:46 - so
1707:47 - in this case what this conveys to us
1707:49 - saying it says that we're not loading
1707:51 - now but we were loading before
1707:54 - and that the bot part is coming from
1707:56 - here what we need to do in here then is
1707:58 - just to close that dialog so let's just
1708:00 - say close dialog we call that function
1708:03 - you see and then we say
1708:05 - close dialogue handle
1708:08 - is null
1708:09 - so we're just cleaning that up now okay
1708:14 - and then we're seeing now
1708:15 - if
1708:16 - what we have to have so what we've
1708:17 - handled right now is closing the dial up
1708:19 - but we also have the hell of showing it
1708:20 - all so we're now going to say if the
1708:22 - state is loading
1708:24 - and we don't have a closed dial sorry we
1708:27 - don't have a loading dialog yet on the
1708:29 - screen then we have to show it so
1708:32 - excuse me so let's say if state is
1708:34 - loading
1708:35 - and
1708:36 - close dialog
1708:38 - is null
1708:40 - then we have to show the dialogue so
1708:42 - let's just say close dialog handle is
1708:44 - equal to show loading dialog we pass the
1708:48 - context
1708:49 - let's do some formatting in here and
1708:51 - let's just say loading
1708:53 - just like that okay
1708:55 - and we leave the rest of this stuff in
1708:57 - the code exactly as it is
1709:02 - the next thing that we need to do now is
1709:04 - to
1709:04 - as you can see in the caption on the
1709:07 - screen we have to hook the register
1709:08 - button to our auth block when register
1709:10 - button is tap send the auth event should
1709:12 - register to the block
1709:16 - and what we're going to do then is go to
1709:18 - and find this button in here at the
1709:20 - bottom of the loading via sorry login
1709:22 - view.dart file
1709:24 - and upon pressing it let's just make
1709:26 - this and
1709:28 - yeah i don't think it really has to be
1709:30 - any asynchronous code at all so let's
1709:32 - just in here let's say that we
1709:35 - grab our off block so let's say context
1709:39 - read
1709:40 - and we are looking for off blog in our
1709:42 - context and then we're gonna send it an
1709:44 - event
1709:45 - and we're gonna send const auth event
1709:48 - should
1709:49 - should register just like that okay
1709:52 - so and i believe add event is not async
1709:56 - or anything it's just a void so this
1709:57 - function doesn't have to be async so if
1709:59 - you had it as async you can just safely
1710:01 - remove that
1710:03 - i'm just gonna save this file as well
1710:07 - all right a lot of work we've we're kind
1710:10 - of now
1710:11 - almost done with uh our login view
1710:15 - so what i'm gonna do is i'm gonna close
1710:17 - all these files that are on the screen
1710:18 - right now and we're gonna start moving
1710:21 - towards
1710:22 - also blockifying our register view so
1710:26 - let's go as the caption says let's go to
1710:28 - register view
1710:31 - and
1710:32 - having a look here
1710:34 - at the moment we don't have
1710:36 - and i can see in here in the previous
1710:38 - chapters we've been working with
1710:39 - cleaning up the login view so
1710:41 - blockifying the login but we didn't do
1710:43 - the same thing in register view and
1710:44 - that's fine we're going to take care of
1710:45 - that and i can see that by just looking
1710:48 - at our try and catch statements in here
1710:50 - you see these things shouldn't be
1710:52 - in the text button so
1710:54 - as like but one thing at a time as the
1710:56 - caption of the yeah as i capture the
1710:58 - bottom screen indicates we're going to
1710:59 - wrap the scaffold inside a block
1711:01 - listener so it's going to be very
1711:03 - similar to how we did it for our
1711:06 - login view
1711:08 - command dot and grab
1711:10 - a wrap with block listener here and i'm
1711:12 - just going to say
1711:14 - this is going to be the off
1711:16 - block and it's going to auto import it
1711:19 - for me so very important if you're
1711:20 - getting errors for the auth block not
1711:22 - being found in this context it's
1711:23 - probably because you haven't imported
1711:25 - off block so and in here we're going to
1711:27 - say off state
1711:28 - and that's going to also import it as
1711:30 - well and block listener is not available
1711:32 - in this context either because we don't
1711:34 - have a flutter block so that's also
1711:36 - going to be all too important so that's
1711:37 - three
1711:39 - so that's the three um auto imports and
1711:42 - they're all available i believe so
1711:45 - that's
1711:46 - auth block auth state
1711:49 - and flutter block so
1711:51 - you could actually bring it next to each
1711:53 - other if you want to so you know which
1711:55 - ones to import it's these three
1711:59 - wow okay um so what we need to do that
1712:02 - that was the first thing that we had to
1712:04 - handle
1712:06 - so
1712:07 - we also as i said now we have to go and
1712:09 - start handling
1712:11 - exceptions so
1712:12 - this is very similar to how we did and
1712:15 - did it in the login views so we kind of
1712:17 - need to get rid of these
1712:19 - so now what we need to do inside this
1712:22 - listener of our block listener we have
1712:24 - to handle the exceptions that we are at
1712:26 - the moment handling here at the bottom
1712:28 - so this should be very similar process
1712:30 - to how we were doing things in the login
1712:32 - view from if you remember so if we oops
1712:34 - if i go to our login view you can see we
1712:36 - have this uh
1712:38 - block listener and then we're doing this
1712:40 - kind of pattern in there so we're going
1712:42 - to do something very similar to that
1712:43 - except we're going to do it in register
1712:45 - view okay so
1712:46 - inside register view the state is
1712:49 - i mean all the exceptions all the
1712:51 - problems that could arise are going to
1712:53 - be inside the um registering state so
1712:57 - we're just gonna first make sure that
1712:58 - we're in that state okay so let's say
1713:01 - state is
1713:02 - off state registering
1713:06 - and we're gonna say if state exception
1713:09 - is weak password auth exception
1713:12 - then
1713:13 - let's make this listener asynchronous so
1713:15 - we can do an await on our show dialog
1713:18 - so we we say await
1713:20 - and show error dialog
1713:23 - and the text is just going to be weak
1713:25 - password okay
1713:27 - and then we're going to do another else
1713:30 - an else statement with another if and we
1713:32 - say if state exception
1713:35 - it's email already in use auth exception
1713:39 - and then here we're gonna display
1713:40 - another dialog then that says for
1713:42 - instance email is already in use okay
1713:46 - and um
1713:48 - so let's then go to another else
1713:50 - statement so i'm going to just copy this
1713:51 - i'm a little bit lazy and i'm just going
1713:54 - to say generic auth exception and then
1713:56 - we're going to say
1713:58 - failed to register so these are the
1714:00 - various exceptions that can occur
1714:02 - while you're registering for a user okay
1714:07 - and you can see in here we have three
1714:10 - uh exceptions we're handling weak
1714:11 - password email already in use and then
1714:13 - we also have invalid email auth
1714:15 - exception so maybe we could actually
1714:17 - handle that as well so let's just go
1714:19 - ahead and add another else statement in
1714:21 - here and just say invalid
1714:23 - uh invalid email auth exception so we
1714:26 - just say
1714:27 - invalid email okay
1714:30 - so now we've handled those four
1714:31 - exceptions all right
1714:35 - so
1714:37 - what we need now is to make sure as you
1714:40 - can see in the caption that in register
1714:41 - view the register button to send the
1714:43 - auth event called auth event register so
1714:46 - let's find that register button that
1714:47 - we're talking about here
1714:49 - and that is this text button you can see
1714:51 - it says register okay
1714:54 - so what we need to do is perhaps to
1714:56 - clean this code up at the moment there's
1714:58 - just so much information in here that we
1715:01 - don't really have to do so go to your
1715:03 - register button please in the register
1715:04 - view and just pretty much just nuke this
1715:07 - entire try and all these cad statements
1715:10 - the way they are
1715:12 - so now we have a clean slate so now we
1715:14 - have just email and password and let's
1715:17 - grab the auth block in here and ask the
1715:19 - auth block to do the registration okay
1715:21 - so i'm just going to say context
1715:25 - and let's just say we grab the
1715:28 - off block in here
1715:30 - okay
1715:32 - as a function
1715:34 - context if i can spell
1715:36 - and then i'm just going to say add in
1715:40 - auth
1715:41 - events of register
1715:44 - here
1715:46 - with email and password just like that
1715:48 - okay
1715:50 - so your code should kind of look like
1715:51 - this and put a comma in here to make it
1715:53 - a little bit cleaner so just like that
1715:55 - all right
1715:59 - okay that was for register
1716:02 - now we have also a
1716:05 - login button in here which right now
1716:07 - inside our register view do you remember
1716:09 - if you end up in the registry view and
1716:11 - incorrectly so you just tap on some
1716:13 - button and enter them in the registry
1716:14 - and be like oh i'm in the wrong place i
1716:16 - want to log in actually instance so we
1716:17 - have this already registered login here
1716:20 - button and at the moment that's doing
1716:22 - custom navigator or push name and remove
1716:24 - until and it shouldn't be doing that so
1716:26 - let's go ahead and fix that up so let's
1716:28 - go in here and remove that code and just
1716:30 - say context read auth block
1716:33 - and we're going to basically add an
1716:35 - event in here of con of type const auth
1716:39 - event
1716:40 - log out just like that okay so that then
1716:44 - is going to send the user to the login
1716:46 - screen all right
1716:50 - all right let's move now to the next
1716:53 - point as you can see it says send
1716:54 - verification button and verify email
1716:56 - view dart
1716:57 - it should send an auth event and when
1717:00 - you press it it should send the auth
1717:01 - event send the email verification to the
1717:04 - blog so i'm going to go into my notes as
1717:06 - well as well
1717:09 - and just find that button and now let's
1717:11 - go in our code in here
1717:14 - let's go to verify email view
1717:16 - and have a look at that button that
1717:18 - we're talking about which is right here
1717:20 - and at the moment as you can see it's
1717:22 - doing all service firebase and email
1717:23 - verification but we shouldn't be doing
1717:25 - that
1717:26 - um we should ask our block to do that so
1717:28 - let's just go ahead
1717:30 - and
1717:31 - first of all remove that code inside the
1717:33 - buttons unpressed and then this button
1717:35 - doesn't have to be async anymore
1717:37 - and what we're going to say is just
1717:38 - going to say context and read
1717:41 - and but we don't have read remember
1717:43 - because we don't have we haven't
1717:45 - imported auth
1717:47 - we haven't imported block or flutter
1717:49 - block into this file yet but we're going
1717:51 - to fix that soon so first of all just
1717:52 - say read the off block and that's going
1717:55 - to also import off block for us so
1717:57 - that's the first part and now you have
1718:00 - this error let's get visual studio code
1718:02 - to import
1718:03 - the same provider but i actually want
1718:05 - flutter block so
1718:08 - let's go ahead and import that ourselves
1718:10 - so let's say package flutter block and
1718:13 - flutter block dart
1718:15 - now it's fine alright so let's in here
1718:17 - and then add an event we say const off
1718:20 - event
1718:22 - send email verification just like that
1718:25 - all right so
1718:27 - it's done now
1718:31 - so the next thing we have to do is you
1718:34 - can see inside this restart button at
1718:36 - the bottom of the screen at the moment
1718:38 - it's doing quite a lot of work
1718:40 - it is basically first logging out from
1718:42 - our auth service and then it's doing
1718:44 - navigation so this button is like all
1718:46 - over the place it's taking care of
1718:48 - authentication it's taking care of i
1718:50 - mean i'm actually very i'm laughing here
1718:53 - because i'm kind of laughing at the
1718:55 - progress that we've made so far and that
1718:56 - we've
1718:57 - gone from very very raw programming to
1719:00 - now very elegant
1719:02 - handling of exceptions alien handling of
1719:05 - routing etc so it is actually really fun
1719:08 - to be here to be honest with you
1719:10 - so in here let's remove that code and
1719:12 - kind of grab this thing that we have up
1719:14 - here in our send email verification
1719:16 - button and bring it down here instead of
1719:17 - sending the off event send email
1719:19 - verification we're gonna send alt event
1719:21 - log out
1719:24 - like this
1719:25 - excuse me all right so that part is done
1719:30 - so
1719:31 - what we need now let's go in now let's
1719:34 - close this file and go to our off block
1719:36 - so we have quite a bit of work now to do
1719:38 - in our off block as you can see it's
1719:40 - just all over the place so
1719:42 - i want to do the same thing in my notes
1719:44 - as well so off block
1719:45 - the first thing that we need to do is
1719:47 - make sure that we are not using this off
1719:49 - state loading because we don't have that
1719:50 - anymore what we have is off states on in
1719:53 - each light so please take care of that
1719:55 - as a first name
1719:59 - so
1720:00 - we also have now an auth event send
1720:04 - email verification and we haven't
1720:06 - handled that yet so let's go on top of
1720:09 - this initialize i'm just gonna send say
1720:11 - send email verification okay and let's
1720:14 - create a new on to handle auth events
1720:17 - and email verification because we
1720:18 - haven't handled that so we have event
1720:20 - animation here and
1720:23 - let's just go and say this is an async
1720:24 - function and then open it and then a
1720:27 - semicolon at the end to get the format
1720:29 - uh formatting working
1720:32 - the only thing we have to do in the auth
1720:34 - event send email verification to
1720:35 - actually call and tell the provider that
1720:38 - hey um we're gonna basically send an
1720:40 - email verification all right so let's
1720:42 - just let's just say a wait provider
1720:45 - and email verification and then what
1720:47 - we're gonna do we're gonna emit the
1720:48 - exact same um state
1720:51 - so by coming into by sending this event
1720:55 - we are just going to do some work and
1720:56 - emit the exact same state that you're in
1720:58 - so we're not actually changing the state
1721:01 - of the application because remember when
1721:02 - you're in the verify email view and then
1721:05 - you press the button to actually send a
1721:07 - new verification email what happens on
1721:10 - the screen nothing we're not like doing
1721:12 - anything it's just we're sending the
1721:13 - email verification that's all so we're
1721:15 - not sending you to a new screen or
1721:17 - anything like that so that's why we're
1721:19 - emitting the exact same state as we had
1721:20 - before
1721:24 - all right now we have to actually handle
1721:27 - a
1721:29 - our auth event register
1721:32 - so let's go ahead and do that so that is
1721:35 - completely new so let's just say on
1721:37 - off event register
1721:40 - and we say we have the events and the
1721:42 - emails and an asynchronous function just
1721:45 - like that all right
1721:50 - so
1721:50 - when we have the auth event register if
1721:52 - you remember from before this authentic
1721:55 - include the email and password in itself
1721:57 - excuse me
1721:59 - so we can grab those and that
1722:01 - information right now just say email is
1722:03 - advanced.email and let's just say final
1722:06 - password
1722:08 - is events.password oops
1722:11 - all right so then we're going to put
1722:13 - this into a try and catch block so we're
1722:16 - going to say try on exception
1722:19 - catch e
1722:21 - when an exception happens we're just
1722:22 - going to emit our
1722:25 - off state registering
1722:27 - with that e um
1722:31 - so
1722:32 - we talked about this before but just to
1722:34 - refresh when you're during the process
1722:36 - of register we actually can emit a new
1722:39 - state in here just called registering
1722:42 - and then it can it can contain an
1722:44 - exception all right so that's what we're
1722:46 - emitting in here saying that you're in
1722:47 - the process of registering but something
1722:49 - bad happened which is an exception all
1722:50 - right
1722:53 - so in here then let's just say await
1722:55 - provider and we're going to create a new
1722:58 - user with the email and password they
1722:59 - just fit right in so that's really great
1723:03 - and then if you remember from the
1723:05 - registration process that we had before
1723:07 - so um
1723:09 - in our register view during registration
1723:11 - here
1723:12 - upon doing a registration we didn't just
1723:14 - register the user with the provider but
1723:16 - we also send an email verification just
1723:18 - to make sure that the user doesn't have
1723:20 - to go and send an email verification and
1723:22 - manually so we're going to do the same
1723:24 - thing in our off block okay
1723:26 - so let's also wait on the provider
1723:30 - and we say send email verification just
1723:32 - like that all right
1723:34 - um and then after doing that since you
1723:37 - registered a new user well what is the
1723:39 - states if you remember from our
1723:41 - off states
1723:42 - off state
1723:43 - we have this needs verification we know
1723:46 - that when we register and use a new user
1723:48 - that user is always going to need
1723:50 - verification right so let's go in here
1723:52 - and just emits that state so
1723:55 - uh auth state needs verification just
1723:58 - like that and that's an empty state so
1723:59 - it doesn't have any parameters and such
1724:01 - all right
1724:05 - all right um
1724:07 - then we have to handle our auth event
1724:10 - initialize so let's have a look in here
1724:12 - and see how the code look looks like so
1724:15 - in here what we need to do at the moment
1724:17 - we have logged out but you can see we're
1724:20 - not providing that is a loading
1724:22 - parameter and we're not providing
1724:24 - exceptions so i'm just actually going to
1724:25 - click clean this and write it by hand
1724:28 - manually
1724:29 - so in the emit let's just emit a const
1724:32 - off
1724:33 - state
1724:35 - uh
1724:36 - logged out
1724:38 - all right
1724:39 - so
1724:40 - when you initialize the application from
1724:42 - the beginning when the application
1724:43 - actually runs we're just gonna say by
1724:46 - default you're logged out all right
1724:48 - so let's go ahead and do that if the
1724:50 - user is null of course
1724:52 - so in the exception we don't have any
1724:54 - exceptions and we're not loading
1724:56 - anything as such so that's like the
1724:57 - default state so that's it comma in
1725:00 - there and a comma here just to get the
1725:01 - formatting working
1725:05 - all right so
1725:07 - that seems to be fine but
1725:09 - we also have the initialize in here
1725:11 - sounds good logged out
1725:13 - it's email verified and that so
1725:16 - yeah that looks that looks fine to me
1725:21 - okay now let's have a look at logging in
1725:24 - as you can see we have to take care of
1725:26 - our login and logic a little bit and
1725:27 - make sure that we're loading so when you
1725:30 - say i want to log in we're going to say
1725:33 - okay you want to log in that means
1725:34 - you're logged out but you're logged out
1725:37 - and there's a loading screen okay that's
1725:39 - why we created that loading dialog which
1725:41 - we're going to put into you so
1725:44 - so upon the user asking to log in let's
1725:46 - just say okay we're going to emit our
1725:49 - const off
1725:50 - state
1725:52 - log out
1725:53 - and there is no exception and the
1725:55 - loading flag is actually true
1725:58 - so like that and right there and just
1726:01 - like okay
1726:04 - so
1726:04 - that's the loading part
1726:07 - and let's have a look at how we're doing
1726:09 - things in here so we have our login
1726:14 - um
1726:15 - and we also as you can see in here so
1726:17 - that that was that part we've taken care
1726:19 - of and now what we have to do is to
1726:20 - disable disable the loading screen if
1726:23 - email is not verified so
1726:26 - um at the moment we have this user in
1726:28 - here you can see final user okay and
1726:31 - then we're just saying
1726:32 - state now is all of a sudden
1726:34 - logged in but that is not complete
1726:36 - because we're not checking whether the
1726:38 - users
1726:39 - verified their email address or not so
1726:41 - let's go ahead
1726:44 - and say as the caption indicates if
1726:46 - email not verified then disable the
1726:48 - loading screen by sending a new logged
1726:50 - out okay before sending the needs
1726:52 - verification so let's take care of that
1726:55 - so we say if um user is email verified
1726:59 - not
1727:01 - and we emit
1727:02 - a constant of auth state logged out
1727:06 - like that
1727:08 - and we say well no exception and we're
1727:11 - not loading all right
1727:14 - so that disables essentially the loading
1727:17 - screen okay by saying it's loading false
1727:20 - remember here we sent is loading true
1727:22 - now we're sending is loading false
1727:26 - and then right after
1727:28 - when the email is not verified we
1727:30 - actually say
1727:31 - then emit a const of off
1727:34 - state needs verification just like that
1727:37 - all right
1727:39 - otherwise if the user's email is
1727:41 - verified then we're gonna say we're
1727:43 - gonna first disable
1727:45 - let me bring up the correct caption so
1727:47 - we have to do the exact same thing in
1727:49 - here we're gonna disable basically the
1727:51 - loading screen
1727:53 - like that
1727:55 - and then we're going to send
1727:57 - this login
1727:59 - states right here
1728:01 - okay
1728:05 - all right and also in our exception
1728:07 - handling we we don't use this uh um yet
1728:10 - we're gonna use off state logged out but
1728:12 - we're gonna clean this up so inside emit
1728:15 - we're gonna say auth state logged out
1728:18 - and then there is an exception and we
1728:21 - are not loading
1728:22 - okay so
1728:24 - please place that inside the exception
1728:26 - handling of your
1728:28 - um
1728:29 - auth event login
1728:33 - okay
1728:34 - a lot of code a lot of code
1728:36 - um
1728:37 - now as you can see the caption that says
1728:39 - fix fix up auth state logged out
1728:42 - we have to emit the auth state logged
1728:44 - out and fix up exception handler as well
1728:47 - so
1728:48 - let's find out our auth event logged out
1728:51 - and we have a lot of errors in here
1728:52 - right now as you can see
1728:54 - so it would actually be better
1728:57 - if we kind of like
1728:58 - nuked this code in here and wrote it
1729:01 - from scratch so i'm just going to say
1729:02 - try
1729:03 - and then we'll say on exception
1729:05 - catch e
1729:07 - so that's it
1729:09 - and then when there's an exception
1729:10 - during logged out logging out what we're
1729:12 - going to just say we're going to say
1729:14 - well you are logged out but an exception
1729:17 - happened all right so let's just say um
1729:20 - we immediate
1729:22 - hans
1729:23 - no actually off
1729:25 - state logged out
1729:28 - there is an exception and we're not
1729:29 - loading okay so that's what you need to
1729:32 - also place inside your
1729:34 - code so that's for the emit
1729:37 - now for trying
1729:39 - what do we actually have to do we have
1729:40 - to tell our provider
1729:42 - to log out oops
1729:44 - not login log out
1729:48 - all right
1729:49 - and then we also have to emit the new
1729:50 - states that we're going to say you're
1729:52 - logged out and then there is no
1729:54 - exception so i'm just going to grab this
1729:56 - code from there and place it in here and
1729:58 - say there is no exception like that
1730:00 - okay
1730:01 - and it says well this can now be a cons
1730:03 - so i'm gonna make it a const just like
1730:06 - that
1730:09 - so
1730:10 - the next thing that we have to do is to
1730:12 - clean up our routing because you see the
1730:14 - more and more we're blockifying the
1730:16 - entire process inside our application
1730:18 - the less we need different different
1730:20 - screens to actually do routing manually
1730:23 - because routing is going to be handled
1730:25 - by our block listeners and things like
1730:28 - that okay
1730:29 - so let's go ahead and as the caption
1730:32 - indicates in our routes dart file we're
1730:35 - gonna remove all routes except for
1730:37 - create or update node route so let's
1730:39 - open routes
1730:41 - actually before we do that i'm going to
1730:42 - close all the files in here just to make
1730:44 - sure everything's saved then go to route
1730:46 - start
1730:48 - and remove everything except for
1730:51 - that last route
1730:56 - all right
1730:58 - excuse me let's now go now that we've
1731:00 - done that we have to go to our main dart
1731:02 - file
1731:04 - excuse me again
1731:06 - and we're gonna clean up our routing in
1731:08 - here as you can see we have those four
1731:10 - routes now that we've removed let's just
1731:12 - remove them from main dark file as well
1731:14 - and save your file please
1731:18 - so what we need also is as the caption
1731:20 - captioning case we should show the
1731:22 - register view if auth state is
1731:24 - registering okay
1731:26 - so in main dart show register view if
1731:29 - off state is registering so i'm gonna
1731:31 - bring up my notes as well in here
1731:34 - so let's go ahead and see what we have
1731:36 - we have auth state logged out what we
1731:38 - have what we also have to have in here
1731:39 - we have to create another else statement
1731:41 - and say if state is off
1731:45 - of state registering
1731:48 - and open your curly brackets um
1731:52 - on curly bracket missing and in here we
1731:54 - just say return cons register view okay
1731:57 - just like that
1732:01 - all right that was a lot of work that
1732:03 - we've done and now if you then look at
1732:05 - your files in here you shouldn't you
1732:07 - basically shouldn't have any errors okay
1732:10 - so before testing this all because there
1732:12 - were just so much stuff that we've done
1732:14 - and we've also changed our main function
1732:16 - it just makes sense to do a hot restart
1732:19 - okay
1732:20 - so i did a hot restart let me just
1732:23 - resize my visual studio code so we see
1732:26 - our trusty
1732:28 - scrcpy in here
1732:30 - so
1732:31 - now this is the login view uh if you
1732:33 - look at our login view dart file uh if
1732:37 - you have a look at what we did when the
1732:39 - login button is tapped we're literally
1732:41 - telling
1732:43 - our
1732:44 - auth block to do this thing in here log
1732:47 - in all right so we're sending a new
1732:49 - event to it so if something happens to
1732:52 - that and things don't work as well then
1732:55 - it says user not found wrong credentials
1732:57 - authentication error then we should
1732:59 - probably
1733:00 - actually get an error displayed on the
1733:02 - screen so let's test this and you can
1733:03 - see it says authentication error so
1733:06 - that's in here okay so that's that seems
1733:09 - to be working very well
1733:11 - and it would be really good if you could
1733:12 - actually test this um
1733:15 - our loading dialogue and see if it works
1733:18 - so i'm gonna write
1733:20 - foobar bads in here and say login
1733:23 - we saw that loading so that was our
1733:25 - loading dialog that was this logic right
1733:27 - here so it's it's really cool actually
1733:30 - how it's working let's go in here and
1733:32 - say log out and log out and then we come
1733:35 - to the login screen so this is all
1733:37 - working so well
1733:40 - and you could and if you want to see
1733:41 - your loading screen a little bit more
1733:43 - and like if you're in the process of
1733:44 - debugging it you could always go to your
1733:47 - um
1733:48 - office block in here
1733:50 - and inside when you're asked to log in
1733:54 - you could actually a wait so you could
1733:56 - just do like this
1733:58 - a weight future delayed and you could
1734:01 - say duration and you could say seconds
1734:04 - three something like this okay
1734:06 - so this is gonna await like it's just
1734:08 - gonna wait three seconds before it
1734:10 - continues so let me just save that and
1734:12 - enter some information in here say
1734:15 - google okay it's our gmail
1734:18 - and then say
1734:19 - login
1734:20 - oops that didn't work so well
1734:24 - i don't know why that didn't work so
1734:25 - well even though this is an async
1734:27 - function could this need hot restarting
1734:29 - maybe
1734:30 - maybe
1734:32 - let me do
1734:33 - log out in here and enter foo barba
1734:36 - sorry
1734:37 - avant np gmail.com foo barbas and then
1734:41 - login there we go now it's waiting more
1734:44 - than three seconds kind of then it goes
1734:46 - to the application so i would say that
1734:48 - is working very well so we can now
1734:50 - remove this weight in here okay
1734:53 - and maybe do a hot restart as well
1734:57 - wow
1734:58 - that that was a lot of work we did but
1735:02 - that's what you do with software
1735:03 - development sometimes you break things
1735:05 - to make them better you have to break
1735:07 - sometimes the code that you have in
1735:09 - order to build up something better we
1735:10 - didn't really break things but we
1735:13 - what we kind of did
1735:14 - we basically removed a lot of old old
1735:17 - code in order to make it and work better
1735:20 - with block and
1735:22 - i'm in this course my goal is to make
1735:24 - you a software developer using flutter
1735:27 - i'm not just going to show you the right
1735:28 - thing to do from the beginning we're
1735:30 - going to gradually make things better a
1735:32 - software developer also is not going to
1735:34 - be depending on their experience they're
1735:35 - not going to do the exact right thing
1735:37 - from point one or point zero
1735:40 - they're they're gonna make experiments
1735:42 - they're gonna google a lot of things
1735:43 - look at stack overflow find the right
1735:45 - way to do things get inspiration maybe
1735:47 - from like another product that's kind of
1735:49 - doing something similar and develop
1735:51 - things one step at a time make it better
1735:53 - so that's the reason we're in chapter 40
1735:55 - something right now and
1735:57 - we've just gotten to this point
1735:59 - otherwise we would have done this from
1736:00 - chapter zero for chapter one so
1736:02 - thank you for sticking uh
1736:04 - through us sticking around throughout
1736:06 - this chapter and coming to this point
1736:08 - that we are right now so as this
1736:09 - tradition we're gonna now commit our
1736:11 - code and tag it so let me do some
1736:13 - reshuffling of the screen go to terminal
1736:15 - in here
1736:16 - minimize scr cpy
1736:19 - make the screen bigger
1736:22 - and like that and i'm gonna shuffle the
1736:24 - screen as well so you see things better
1736:27 - so let's go ahead and have a look at our
1736:30 - git status ginormous amount of things
1736:32 - we've done everything is modified and
1736:34 - there's a new file added so let's say
1736:36 - git add all
1736:38 - and let's get commit
1736:40 - as step 25
1736:42 - because if you have a look at our logs
1736:44 - the previous chapter was step 24 so now
1736:46 - we're at step 25.
1736:48 - so let's then push our changes now that
1736:50 - we've committed
1736:52 - and then we're going to say git tag
1736:54 - and we're going to say step
1736:56 - 25 as well so and then we're going to
1736:58 - push our tags as well
1737:01 - if you look at our tags now we have step
1737:02 - 24 and then somewhere in here we should
1737:04 - have step 25 as well as you can see here
1737:07 - great so
1737:08 - congratulations for getting through this
1737:10 - chapter was one of the jumpiest chapters
1737:12 - i would say in this entire course and
1737:14 - that we moved so much from file to file
1737:16 - so if you made it through then
1737:17 - congratulations
1737:19 - um
1737:21 - so what we need to work on in the next
1737:23 - chapter is our broken loading screen i
1737:25 - know it's a little bit of an anti-climax
1737:27 - in that we just work on our loading
1737:30 - screen so we should be kind of proud
1737:32 - however there is a problem with this
1737:34 - loading screen and that is because we're
1737:36 - using
1737:36 - navigator of context and then we're
1737:39 - popping remember popping inside
1737:43 - executing pop invoking the pop function
1737:45 - on your navigator and actually i can
1737:48 - show you the code
1737:50 - without going into too much details so
1737:52 - let's have a look at our uh loading
1737:54 - dialogue
1737:56 - see at the bottom of this loading
1737:57 - dialogue we're doing navigator off pop
1738:00 - this doesn't necessarily pop this dialog
1738:02 - it pops the current view on the
1738:05 - navigator so even if our dialog is not
1738:08 - displayed on the screen saying navigator
1738:10 - of is gonna confuse the navigation stack
1738:13 - in flutter so we're gonna have a look at
1738:16 - that and fixing that actually in the
1738:17 - next chapter so grab some tea coffee
1738:20 - chocolate whatever you want to and i'll
1738:22 - see you in the next chapter hello and
1738:23 - welcome to chapter 43 of this flutter
1738:25 - course
1738:27 - we are now very very close to actually
1738:29 - being able to release our application to
1738:30 - the app store there are just a few
1738:33 - things left sorry app store and play
1738:35 - store and we have a few things left um
1738:39 - to do before we can actually do that and
1738:42 - um one of the most important things we
1738:43 - need to take care of are loading screens
1738:45 - in our application and
1738:47 - if you remember from what we've done so
1738:49 - far we've been working with block we've
1738:51 - been working with our auth service and
1738:53 - we've created an auth block
1738:55 - and we also have loading state in some
1738:58 - of our off states
1739:01 - actually i can't call it loading state
1739:02 - we have loading property on some of our
1739:05 - off states so when our off block returns
1739:08 - a state depending on which state it is
1739:11 - then we can actually see whether it has
1739:12 - it is loading property or not
1739:15 - and we've been working with loading
1739:17 - dialogue so far and there are just
1739:20 - simple dialogues that we're displaying
1739:21 - on the screen with a column with a
1739:23 - circular progress indicator and we also
1739:26 - have
1739:27 - a size box just to separate the loading
1739:30 - indicator from a text that we're
1739:31 - displaying on the screen
1739:34 - this has been working okay so far but as
1739:36 - i mentioned in at the end of the
1739:37 - previous chapter we have a bit of a
1739:39 - problem in that
1739:41 - if you remember from the code actually i
1739:42 - can bring it on the screen so you can
1739:44 - have a look here let's go to our loading
1739:46 - dialog
1739:47 - loading dialog at the end of this if you
1739:50 - remember we return a function
1739:52 - and which in turn upon calling which we
1739:55 - pop our navigation navigator
1739:59 - however as you can see there is no
1740:01 - transaction in here meaning that the
1740:02 - navigator can't necessarily know that
1740:05 - what it is popping at the moment is in
1740:07 - fact our loading dialogue
1740:09 - and this problem is actually quite big
1740:11 - in that you could for instance have a
1740:13 - loading dialog on the screen and then
1740:15 - while that loading dialog is being
1740:16 - displayed you could display another
1740:18 - screen and push that screen in your
1740:20 - navigation stack and then if you then
1740:22 - try to dismiss your loading dialogue
1740:24 - what you will dismiss in fact is the
1740:26 - second screen that you displayed in the
1740:28 - stack so
1740:29 - this process is not transaction based in
1740:31 - that you're playing literally with the
1740:34 - navigate in navigation stack in flutter
1740:36 - and that's not such a wise thing to do
1740:39 - so what we want to do in this chapter is
1740:41 - to clean up our loading screens in the
1740:43 - application and make sure that they are
1740:46 - using overlays instead of
1740:49 - normal dialogs
1740:51 - so now i named overlays and it is a good
1740:54 - time then to explain what overlays are
1740:56 - and why they're good especially for
1740:58 - loading screens um as you know
1741:02 - normal screens that you display on on
1741:04 - the
1741:04 - mobile telephone for instance or on the
1741:06 - web or
1741:08 - on a desktop with flutter there it
1741:10 - basically placed inside a navigation
1741:12 - stack so the navigation stack is there
1741:14 - to keep track of which screen is
1741:16 - displayed and then which screens you can
1741:18 - remove from that stack
1741:19 - and so they have a hierarchy however if
1741:22 - you want to display something on top of
1741:24 - the navigation stack independent of the
1741:27 - navigation stack and the various changes
1741:30 - that could happen to the navigation
1741:31 - stack you could use and you probably
1741:33 - actually should use overlays either
1741:36 - directly or using other material
1741:38 - components that are provided by flutter
1741:39 - that in turn use overlays so
1741:42 - overlays as their name indicates they
1741:44 - have they have the ability to place
1741:46 - themselves over other content that is
1741:48 - currently displayed on the screen so
1741:50 - there and that makes them the perfect
1741:52 - candidate for loading screens for
1741:53 - instance because loading screens are
1741:55 - usually displayed on top of the current
1741:57 - content that the user is looking at so
1741:59 - in this chapter we're going to focus on
1742:01 - using overlays to improve the state of
1742:04 - our loading screens in the application
1742:06 - so
1742:08 - um
1742:09 - now before we actually get started
1742:10 - writing the uh our loading screen
1742:13 - um what we need to talk about is a
1742:15 - controller uh as its name indicates a
1742:17 - controller is an object usually that you
1742:20 - can pass from
1742:22 - a
1742:23 - a function to another
1742:25 - and using this controller usually an
1742:27 - object that receives that controller is
1742:29 - able to control either the contents or
1742:31 - the behavior of the object that
1742:34 - is being displayed on the screen for
1742:36 - instance
1742:37 - so imagine a scenario where you have a
1742:39 - loading screen
1742:41 - already appearing on the mobile device
1742:43 - and you're telling the user wait while
1742:45 - i'm logging you in now imagine that you
1742:48 - want to kick off another process while
1742:49 - that is ongoing and you want to display
1742:52 - a loading screen again to the user while
1742:54 - the previous loading screen is already
1742:55 - displayed on the screen
1742:57 - so
1742:58 - a typical way of doing that would be for
1743:00 - instance to dismiss the first loading
1743:01 - screen
1743:02 - show a new loading screen with the new
1743:04 - content and when you get rid of the
1743:06 - second loading screen then you can
1743:08 - display the first loading screen again
1743:10 - as that process is ongoing however this
1743:12 - is quite a bit of a
1743:14 - it is quite a bit of a race in that you
1743:16 - have to know the previous context what
1743:18 - loading screen was displayed before what
1743:20 - loading screen you're displaying now
1743:22 - if there was a
1743:24 - loading screen before you have to
1743:25 - display it again so it's not so scalable
1743:27 - in that you will personally then be
1743:29 - responsible for keeping track of the
1743:30 - state of your loading screen so what
1743:32 - we're going to do in this chapter is to
1743:34 - create a loading screen that is a that
1743:36 - is able to be controlled and its text
1743:38 - and contents is going to be controlled
1743:40 - using a controller object
1743:42 - so
1743:43 - upon creating that loading screen we're
1743:45 - then gonna get a loading screen
1743:47 - controller
1743:49 - and this loading controller is gonna
1743:51 - allow us to one dismiss the current
1743:53 - loading screen that is displayed on the
1743:54 - screen if any and then secondly it's
1743:57 - going to allow us to update the contents
1743:59 - of the loading screen
1744:01 - so without further ado we could actually
1744:03 - start by having a look at creating this
1744:06 - loading controller and or loading screen
1744:08 - controller and then we're going to use
1744:10 - this loading screen controller where we
1744:12 - create our loading screen so as usual
1744:14 - i'm going to do some reshuffling on the
1744:16 - screen so
1744:18 - let me make the code bigger here and
1744:20 - then the font a little smaller
1744:22 - and let's then actually here i i'm
1744:26 - pretty sure that we don't need scr cpy
1744:28 - because um
1744:30 - we're not gonna have a look at how that
1744:32 - loading screen looks which looks like
1744:34 - right now we're gonna write quite a bit
1744:35 - of code and then we're gonna put it into
1744:37 - you so
1744:38 - i'm gonna make visual studio code full
1744:40 - screen in here
1744:41 - and i'm going to get rid of this bottom
1744:44 - bar here
1744:46 - okay so as the caption indicates what
1744:49 - we're going to do now is to go ahead and
1744:51 - create our loading screen controller
1744:53 - under lib helpers
1744:55 - loading loading screen controller and
1744:58 - let's go in here and have a look at lib
1745:00 - and we can see we have lib utility
1745:02 - service access you know constant views
1745:04 - but we don't have helpers so i'm gonna
1745:06 - right click on live and just say new
1745:07 - file and then i'm going to say helpers
1745:10 - and so that you can also see it here
1745:12 - helpers
1745:13 - and loading and then loading screen
1745:16 - controller
1745:18 - so that's going to create the
1745:19 - intermediate
1745:20 - folders for us as well so you can see
1745:22 - now we're under lip helpers loading
1745:24 - loading screen controller okay
1745:27 - so what we need here as i mentioned
1745:28 - before is the ability for us to be able
1745:31 - to control two things to close the
1745:33 - loading screen and also update its
1745:35 - contents so let's go ahead and define
1745:38 - these type def so let's just say type f
1745:41 - and we're going to call it close loading
1745:43 - screen and this is just a
1745:46 - boolean
1745:47 - function
1745:48 - that indicates whether the loading
1745:50 - screen could actually be closed or not
1745:52 - okay so it's just a function definition
1745:54 - for now there is no implementation of
1745:56 - that function yet
1745:58 - so let's also go and create a type f
1746:03 - and we're going to say update
1746:05 - loading screen
1746:07 - and this is a void function and actually
1746:09 - a bool function which will also indicate
1746:11 - whether the text could be updated and we
1746:14 - just say text so what we're saying in
1746:15 - here we will have two functions that
1746:17 - will conform to this
1746:19 - interface basically soon as you'll soon
1746:21 - see okay
1746:22 - excuse me
1746:24 - let's then go ahead and create a class
1746:26 - and we call it loading screen
1746:28 - indicator or sorry controller
1746:31 - and let's mark this as immutable as well
1746:33 - and for this we need material so
1746:36 - um actually foundation would do as well
1746:37 - so let's just go in foundation and in
1746:40 - here i'm actually going to say show
1746:42 - immutable just like that so we just need
1746:44 - the immutable part of the foundation
1746:47 - um package in here
1746:50 - okay so that's the definition of our
1746:52 - loading screen controller so what it
1746:54 - does is that it basically it takes in a
1746:57 - closed loading screen as a parameter and
1747:00 - we say
1747:01 - um close
1747:02 - and we also say final update loading
1747:05 - screen
1747:06 - updates just like that and i'm going to
1747:08 - get help from visual studio code to
1747:09 - complete this as a constant constructor
1747:12 - and i'm going to make these parameters
1747:14 - also required so these things we've
1747:17 - talked about so much before so that's
1747:19 - why i'm kind of jumping over them as
1747:21 - fast as possible hot reload is not
1747:24 - working so well right now it's just
1747:25 - because the application on scrcpy is not
1747:28 - on the screen and that's why hot reload
1747:30 - isn't working so well so i'm going to
1747:32 - just jump to the application and now hot
1747:34 - reload works and then i'm going to put
1747:36 - scr cpy on another screen so it doesn't
1747:39 - bother us so much
1747:41 - okay so that's our controller so
1747:44 - we're then gonna work on creating a
1747:45 - function that can display the loading
1747:47 - screen and that function itself is gonna
1747:49 - return a loading screen controller to
1747:51 - you so that's the beauty of that
1747:53 - function using the controller then you
1747:55 - can close the loading screen or update
1747:57 - it so you can see that these two are
1747:59 - basically functions that the call side
1748:01 - can accept and call in order to close
1748:05 - and update the loading screen
1748:07 - respectively
1748:10 - all right that was the loading screen
1748:12 - controller what we need to do now is to
1748:14 - work on the loading screen itself so
1748:18 - um let's go ahead as the caption
1748:20 - indicates we're gonna go to lib helpers
1748:23 - loading in this folder
1748:25 - and we're going to create a new file
1748:27 - inside loading and let's just call it
1748:29 - that loading screen
1748:33 - start
1748:35 - and inside loading screen we're just
1748:37 - going to create a loading screen
1748:39 - class okay
1748:41 - and we're going to make our loading
1748:42 - screen
1748:43 - a singleton and since we've done
1748:45 - singleton twice before i'm just going to
1748:47 - basically paste the pattern in here so
1748:49 - we don't have to write this
1748:51 - boring code again but this is a pattern
1748:54 - that we've done so far twice as i
1748:56 - mentioned before so you should basically
1748:58 - know how it works so we have a private
1749:01 - constructor then we have a factory
1749:02 - constructor which is public which in
1749:04 - turn uses a static final
1749:08 - variable which in turn calls the private
1749:10 - initializer so
1749:12 - it's just a bit of a we could actually
1749:14 - do it like this in so this is in order
1749:17 - basically so when someone calls our
1749:19 - loading screen constructor factory
1749:20 - constructor from outside in turn calls
1749:22 - this and this in turn calls this so it's
1749:25 - a it's a layer base it's three layers
1749:30 - okay so what we're going to do in here
1749:31 - we're also going to keep pulling up our
1749:33 - loading screen controller and so let's
1749:36 - go ahead and send loading screen
1749:37 - controller as you can see it's going to
1749:38 - also import it for me so i'm just going
1749:40 - to say loading screen controller and
1749:41 - let's just say it's optional
1749:43 - because we might not actually have it
1749:46 - and um then what we're gonna do in here
1749:49 - we're gonna have a function called show
1749:51 - as i can see
1749:53 - and um
1749:54 - then we're gonna have a few more
1749:56 - functions there that are gonna allow us
1749:58 - to control basically our loading screen
1750:01 - and i wonder which one is actually best
1750:04 - to
1750:05 - um
1750:05 - best to
1750:07 - work with first
1750:09 - it could be that we should be working
1750:11 - for instance with the
1750:13 - show overlay function so let's go ahead
1750:15 - and do that so let's say that we are
1750:17 - going to have a function on our loading
1750:19 - screen um class and we're calling it
1750:22 - show overlay so and this show overlay is
1750:25 - then in turn going to return an instance
1750:28 - of loading screen controller so let's go
1750:30 - ahead and start writing that so loading
1750:31 - screen controller
1750:33 - and we say show overlay
1750:36 - and this function has a two required
1750:38 - parameters so i'm going to put curly
1750:40 - bracket in here a curly bracket in here
1750:43 - and let's just say we need a build
1750:44 - context so build contacts and
1750:47 - it's going to auto import from material
1750:49 - so that's great build context
1750:52 - and require parameter build context and
1750:54 - i'm just going to call it context and
1750:55 - then upon you wanting to show an overlay
1750:57 - you also have to specify its text so
1751:00 - because
1751:01 - what we're saying in here is that an
1751:03 - overlay can't be displayed without an
1751:05 - actual text in it okay and remember
1751:07 - we're using the word overlay but in this
1751:09 - case our loading screen is going to have
1751:11 - a custom overlay with some material
1751:13 - components like a column and button etc
1751:16 - etc okay so show overlay in this case
1751:18 - means show the loading screen with this
1751:20 - text okay
1751:23 - so we call it that and then let's go
1751:25 - ahead and basically say this is a string
1751:27 - of text just like that okay
1751:30 - and
1751:32 - perfect so that's fine so now what we're
1751:34 - going to create now is um we're going to
1751:37 - create a stream controller
1751:39 - that
1751:40 - will then
1751:41 - new strings that are provided by this
1751:45 - controller remember we created this
1751:46 - thing so if someone updates the loading
1751:48 - screen text we're going to put those
1751:50 - strings inside a stream controller so
1751:52 - let's go ahead and create a final
1751:55 - if i can spell
1751:57 - so we'll say this is a stream controller
1752:00 - control controller of string okay
1752:04 - we just create that and it can't find
1752:06 - stream controller so i'm just going to
1752:08 - say import lib dart async so that's
1752:11 - another import um right here which you
1752:14 - might have to do by hand if you don't
1752:16 - have visual studio code or if you're not
1752:18 - using for instance a text editor or id
1752:20 - that can also import things for you
1752:22 - stream controller is available in dart
1752:24 - async
1752:26 - so then the first thing we're going to
1752:27 - do is to add the current text
1752:30 - into
1752:32 - our stream controller so this text
1752:34 - parameter that was provided to us we're
1752:36 - going to put it inside the stream
1752:37 - controller okay
1752:39 - so
1752:40 - what we need to do is basically
1752:43 - use a new function that we haven't used
1752:45 - before which is called overlay of
1752:47 - context so
1752:48 - if i look at if you look at the return
1752:50 - of this it will return something called
1752:52 - an overlay state and it says the state
1752:55 - from the closest instance of this class
1752:57 - that encloses the given context so we
1753:00 - need this state in order to be able to
1753:03 - display our overlay so let's just grab
1753:05 - this overlay of context and put it
1753:08 - inside a state
1753:09 - like this
1753:11 - and then what we're going to do is
1753:13 - since overlays are kind of displayed on
1753:15 - top of everything else that's on the
1753:17 - screen they don't have intrinsic sizes
1753:19 - as such so if you're using with if
1753:21 - you're using for instance material
1753:22 - components such as
1753:24 - various widgets inside your flutter
1753:26 - application if you create different
1753:27 - containers buttons they have some sort
1753:29 - of intrinsic size in them however with
1753:32 - overlays you kind of have to grab like
1753:35 - the
1753:35 - state of the current screen and what
1753:38 - components are displayed on and
1753:39 - available with the available height
1753:41 - so we need
1753:43 - some sort of a size
1753:45 - to basically base our overlay on top of
1753:48 - so let's go ahead and grab our render
1753:50 - box
1753:52 - and i'm going to say using this context
1753:54 - and we're going to get find render
1753:56 - object
1753:59 - like this as a renderer box okay so
1754:03 - there's lots of documentation available
1754:04 - about what render box is but it is kind
1754:07 - of like low level and i'm not gonna go
1754:09 - into so much details about that but
1754:11 - let's go actually have a look a little
1754:13 - bit here as you can see it's a render
1754:15 - object and it is quite low level as i
1754:17 - mentioned inside rendering box and what
1754:20 - it will do it will allow you to
1754:21 - basically extract the available
1754:24 - size that our overlay can
1754:26 - have on the screen so let's go ahead and
1754:29 - create a final size in here and say
1754:31 - render box
1754:33 - about size okay so that's that
1754:36 - then what we need to do we actually need
1754:38 - to now create our overlay so our overlay
1754:42 - and you may think oh this is the overlay
1754:44 - because we call it overlay here well
1754:46 - it's not really because the overlay is
1754:47 - like the over um
1754:49 - in in this context that's overlay of
1754:52 - is the state of the
1754:55 - parent overlay uh context so
1754:57 - uh what you are going to create in your
1755:00 - application is actually called overlay
1755:02 - entry so um but when when we say we're
1755:06 - going to create an overlay what we
1755:07 - actually mean is an overlay entry okay
1755:11 - so let's go ahead and create an overlay
1755:13 - entry in here so we're gonna say final
1755:15 - overlay is overlay entry just like that
1755:18 - and then we have a builder function
1755:21 - now i'm gonna get visual studio code to
1755:22 - complete this it needs a context all
1755:24 - right so let's go in here now
1755:27 - overlays they don't have a parent like a
1755:29 - scaffold or anything so if you don't
1755:32 - wrap your
1755:33 - like this component that you return from
1755:35 - your builder which should be a widget
1755:37 - let's go in here you can see it's a
1755:38 - widget if you don't wrap this inside
1755:40 - some sort of a material component such
1755:42 - as scaffold or material itself your
1755:46 - overlay is going to have horrible
1755:47 - styling because it's not going to have
1755:49 - any default system styling so excuse me
1755:52 - what we're going to do in here we're
1755:53 - going to return a material component
1755:56 - and material is going to allow you if
1755:58 - you look here
1756:00 - as a documentation of material it says
1756:02 - creates a
1756:03 - piece of letter
1756:04 - i mean okay um but what it basically
1756:07 - means it is actually let's have a look
1756:08 - at this code maybe that makes more sense
1756:10 - so
1756:11 - uh is a stateful widget so it will
1756:14 - create a stateful widget for you which
1756:16 - has some default styling so you can put
1756:18 - your components in there and they'll be
1756:19 - style according to the system skin okay
1756:22 - so let's say that we are going to give
1756:25 - the material which is going to cover the
1756:27 - entire screen this material component
1756:29 - that we're returning here is going to
1756:30 - cover the entire screen remember so
1756:32 - let's first paint the entire screen with
1756:34 - kind of like a dark color as you know
1756:36 - when you display like errors or
1756:39 - dialogues to the screen to the user
1756:41 - usually what they do is like they paint
1756:42 - the background the entire background
1756:44 - kind of like a dark color so then they
1756:46 - can display their dialogue in the middle
1756:48 - of the screen and kind of give it kind
1756:49 - of
1756:50 - like um
1756:52 - some sort of a
1756:54 - elevation so it kind of it pops out of
1756:56 - the screen a little bit so what we're
1756:58 - going to do in here we're going to say
1756:59 - color the color of our material uh
1757:01 - staple widget in here is colors black
1757:05 - with alpha of 150 okay
1757:08 - and then the child of our material then
1757:11 - it's gonna be a center okay so that's
1757:14 - what we're gonna create here so
1757:16 - let's then go in here and what we're
1757:18 - going to do is the child of this is
1757:20 - going to be container so i'm just going
1757:22 - to create a container here and then put
1757:24 - a semicolon there and it's happy now
1757:28 - so then our content container is gonna
1757:30 - place some constraints off on our
1757:33 - overlay so it's gonna say for instance
1757:35 - that its max width and height should be
1757:37 - a certain value so we haven't used this
1757:39 - before but we're gonna now use something
1757:41 - called constraints in here and you can
1757:42 - see the value of constraints is of type
1757:45 - box constraints so let's say constraints
1757:47 - and then we say box constraints okay so
1757:50 - we're going to start with max width
1757:53 - so then we're going to say size width
1757:55 - multiplied by zero at that eight and
1757:59 - what we're basically saying here saying
1758:01 - that this
1758:02 - this dialogue that we're displaying to
1758:03 - the user is going to consume at most
1758:06 - eighty percent of the available widths
1758:08 - on the screen so this is our way of
1758:10 - creating some margins to the right and
1758:12 - left for those of you who are web
1758:13 - developers and are like know about
1758:15 - margin um
1758:17 - and even if you're a web even if you're
1758:19 - a designer you'll probably know already
1758:20 - about margin so what we're saying is
1758:22 - that this container needs to wrap itself
1758:25 - around its contents but if the contents
1758:27 - grow it's gonna go at most eighty
1758:30 - percent
1758:31 - of the available width and this width is
1758:33 - coming from our render box okay
1758:36 - so that's that and we're gonna do the
1758:38 - same thing with max height so we're
1758:40 - going to say size height multiplied 0.8
1758:44 - and then we're going to give it a min
1758:46 - width of size with multiply 0.5 so we're
1758:49 - going to say at least it should it
1758:52 - should grab um half of the screen width
1758:55 - okay
1758:57 - then let's give it some decoration so
1758:58 - we're going to say this is box
1759:00 - decoration so let's go in here
1759:02 - and so this is just to give it some um
1759:05 - border so uh usually dialogues or in
1759:08 - this case an overlay that we're
1759:09 - displaying to use or they have some sort
1759:10 - of a border so it creates this kind of
1759:13 - like a beautiful elevation so if this is
1759:16 - the dark background in here which we
1759:18 - created with black of alpha 150 then we
1759:21 - have an arc basically overlaying here or
1759:25 - overlay um we call it here as you can
1759:26 - see overlay entry then the overlay entry
1759:29 - will be placed here but it will have
1759:30 - some border around it to
1759:32 - separate it from the background okay so
1759:34 - this is just a technique to separate our
1759:35 - overlay from the background
1759:38 - so we're going to say the border is
1759:40 - color white
1759:42 - our sorry color is white and then we're
1759:45 - going to say it has a border radius
1759:47 - f and border radius
1759:50 - all these documentations on the screen
1759:52 - are just driving me crazy and border
1759:54 - radius.circular and let's just give it a
1759:57 - circle value of 10 in here okay
1760:02 - sometimes documentation is just
1760:04 - in the way
1760:07 - so let's stand in here as you can see
1760:08 - now we have an empty container we should
1760:10 - never do that so let's go in here and
1760:12 - just create a child for it so the child
1760:14 - in here is going to be a padding
1760:17 - so um or maybe we could just say single
1760:19 - child scroll view for now
1760:22 - and then i'm gonna embed the single
1760:24 - child scroll view inside padding that's
1760:27 - that's my preferred way of doing this so
1760:28 - just like that and let's just give it
1760:30 - padding of 16 for now okay
1760:32 - so the reason that the child of this
1760:34 - padding that we created here is a single
1760:36 - child scroll view is as you remember we
1760:38 - said the max height of our overlay entry
1760:41 - is 80 of the available height on the
1760:44 - screen
1760:45 - that's all great and
1760:47 - but what if
1760:49 - your just your application display on a
1760:51 - very small screen and
1760:53 - then you're displaying a lot of text
1760:55 - well if you don't put your contents in
1760:58 - the entire contents of your material
1761:01 - widget inside a single child scroll view
1761:03 - then your content is going to be
1761:05 - basically chopped so the users are not
1761:07 - going to see the content in its entirety
1761:10 - and what single chat scroll view does is
1761:12 - that it tries to not scroll its contents
1761:15 - if the content has enough space to be
1761:17 - displayed on the container but if the
1761:19 - contents overflows the container's
1761:22 - height for instance then it's going to
1761:24 - allow the user to scroll on that
1761:27 - container so it it works perfectly trust
1761:29 - me
1761:31 - so let's go in here and then go and
1761:34 - inside the single chart scroll view
1761:35 - create a child and in here we're going
1761:37 - to have a column
1761:39 - and our main axis size is going to be
1761:42 - main axis
1761:44 - main axis size of minimum because
1761:47 - remember if you don't give a main
1761:48 - exercise a minimum pure column your
1761:50 - column is going to grab as much space as
1761:52 - it can so it's just going to expand as
1761:54 - much as it can and if you say main
1761:56 - exercise is minimum it's just gonna
1761:58 - basically try to
1762:00 - hug its contents as much as it can
1762:05 - and then we're gonna say main access
1762:07 - alignment is main access alignment of
1762:10 - center so it's also going to place its
1762:14 - contents vertically in the center okay
1762:19 - then what we're going to do in here in
1762:21 - column children so let's go in here and
1762:23 - say children then let's create a size
1762:25 - box um and give it a height of 10 so
1762:29 - we're creating some top margin from
1762:32 - um from top of the column so this is
1762:35 - saying that we have a column we're going
1762:36 - to put some stuff in it but give it 10
1762:39 - points of
1762:40 - emptiness on top so it just creates a
1762:42 - little bit of a margin okay and look i
1762:44 - fully understand that this is a lot of
1762:46 - abstract stuff it would be a lot nicer
1762:48 - if you could actually see this on the
1762:50 - screen
1762:51 - but sometimes when you're programming
1762:52 - especially in flutter since it's so
1762:54 - declarative then you have to kind of use
1762:55 - your imagination on how this thing is
1762:58 - actually going to look like on the
1762:59 - screen
1763:00 - so
1763:01 - you could do a lot of experiments and
1763:04 - test this for your for yourself and just
1763:06 - maybe just even do this don't do
1763:08 - anything more than this just use a size
1763:10 - block on the size box on the screen and
1763:11 - just display it overlay and see how it
1763:13 - looks like that also works okay
1763:16 - and right after this let's go and create
1763:19 - a
1763:20 - our const of circular progress indicator
1763:23 - so that's going to be a little indicator
1763:25 - that sits there and displays that
1763:27 - something is loading
1763:29 - and then we're going to give it another
1763:31 - size box with a height of maybe this
1763:33 - time actually 20 and so this creates a
1763:35 - little bit more spacing
1763:37 - and then what we're doing in here we
1763:39 - want to create a text
1763:41 - and but that text could change because
1763:44 - that text is placed inside the stream
1763:45 - controller so we're not going to use a
1763:47 - stream builder so let's say stream
1763:50 - builder
1763:51 - like this
1763:52 - and our stream
1763:54 - itself is this text
1763:56 - um
1763:57 - right
1763:59 - that we created up
1764:00 - there so what we need to do basically is
1764:03 - to grab the stream from the stream
1764:05 - controller and use it inside our stream
1764:07 - builder and then i'm going to help from
1764:09 - visual studio coding here and say that
1764:12 - the builder function should be like
1764:15 - and if you remember we could use a
1764:17 - really handy
1764:20 - getter on our snapshot that says has
1764:22 - data so let's say return or sorry um you
1764:25 - say if snapshot has data then we're
1764:28 - going to return a text in here okay
1764:31 - and the text basically is it's the text
1764:34 - of the text widget is going to be the
1764:36 - snapshots data as string we know that it
1764:40 - is a string
1764:41 - and also we are going to give it a text
1764:43 - alignment of text align in the center
1764:45 - okay
1764:47 - so that's that part and let's put a
1764:50 - comma in there as well
1764:51 - and also we're we're getting this error
1764:53 - right now because we're not returning a
1764:55 - widget in all the available paths inside
1764:58 - this builder and we have to put an else
1764:59 - statement in here
1765:01 - and otherwise we just can return a
1765:03 - container as you can see in here okay so
1765:07 - since we have to return something we
1765:09 - could just return an empty container for
1765:11 - now
1765:12 - i mean you could also solve this in
1765:14 - another way for instance say okay if the
1765:16 - snapshot has data i'm going to return a
1765:19 - text like this or otherwise i'm going to
1765:21 - return a text
1765:24 - like an empty text like this
1765:26 - you could also try to do that but right
1765:28 - now we're just leaving it as returning a
1765:30 - container okay
1765:34 - so
1765:35 - that's that part
1765:36 - now we created our
1765:39 - up until this point so if i
1765:41 - do this and
1765:43 - fold this that we created in here which
1765:45 - is our overlay we've just created the
1765:47 - overlay that doesn't mean that we're
1765:49 - displaying it so the way to display an
1765:51 - overlay is to use that overlay of which
1765:53 - created an overlay state and say insert
1765:57 - overlay okay so this actually adds our
1766:00 - overlay to the entire overlay state that
1766:03 - flutter manages on the screen so
1766:07 - so now we've done that so what we need
1766:09 - to do then upon upon this happening we
1766:12 - need to
1766:13 - take our return statement and that's why
1766:16 - we're seeing a red
1766:18 - basically loading screen dart file here
1766:20 - in visual studio code depending
1766:21 - depending on your editor or id that
1766:24 - you're using you may or may not see this
1766:25 - screen as having an error but if you
1766:27 - scroll up in here it basically tells you
1766:29 - that well you're not returning what you
1766:31 - said you should return so let's go in
1766:33 - here and create an instance of loading
1766:35 - screen
1766:36 - um controller
1766:38 - okay
1766:39 - and we have to take care of the close
1766:41 - and we have to also take care of the
1766:43 - update but let's take care of closed
1766:45 - first so it's an empty function
1766:48 - and the only thing it should do is to
1766:50 - have a look at our stream controller and
1766:51 - close that
1766:53 - and then we have we go to our overlay
1766:55 - that we just created and basically
1766:57 - remove it from the screen
1767:00 - and also we just say yeah we returned
1767:03 - through from this okay and now we're
1767:05 - getting an error in here saying update
1767:07 - it's not provided so let's go ahead and
1767:08 - create update as well and if you
1767:10 - remember from update uh what it does it
1767:13 - actually takes the string as a parameter
1767:15 - in itself so
1767:16 - in here the only thing we have to do is
1767:18 - to add that to our stream controller so
1767:20 - i just noticed that you can't see the
1767:22 - code sorry about that so
1767:23 - let's add that and just return true and
1767:26 - to be honest with you you could just say
1767:27 - well let's just not return any value in
1767:30 - here you could do that as well but i
1767:32 - created these
1767:33 - um function signatures so that you can
1767:35 - also indicate an error to the call site
1767:38 - so
1767:39 - you may try to get rid of these
1767:42 - yeah let's go ahead and do that if you
1767:44 - want to but i'm just going to leave it
1767:45 - like this in case we want to extend this
1767:47 - functionality in the future so that we
1767:49 - can return false if things go wrong okay
1767:54 - all right that was the uh let's say that
1767:56 - was our show overlay function so that's
1768:00 - perfect so
1768:02 - let's then go ahead and create a
1768:04 - function in here that we're going to
1768:06 - call also height now we have show let's
1768:08 - go create hide okay
1768:11 - so let's just say void hide like this
1768:14 - and what we're gonna do in here we're
1768:16 - gonna take our controller like this and
1768:18 - if it's there we're just gonna say close
1768:20 - okay remember close the way it was
1768:22 - implemented it
1768:24 - closes the stream controller for text
1768:25 - and it also removes the overlay and
1768:27 - returns true so that's gonna if there is
1768:29 - a controller available on the screen
1768:31 - then it's gonna return that okay sorry
1768:33 - it's gonna close that
1768:36 - so um and also we're just gonna say
1768:39 - controller is null
1768:40 - all right
1768:42 - so and the point for us is that to show
1768:45 - to use this function internally remember
1768:47 - this this function is going to return
1768:49 - this loading screen controller which
1768:51 - we are soon going to place inside this
1768:54 - controller variable at the moment
1768:56 - control variable is always basically
1768:58 - null all right
1769:01 - all right that's great stuff so now
1769:03 - we've taken our taking care of hide so
1769:05 - now that we have hide let's go and
1769:07 - create show so we say show and then we
1769:11 - need two parameters in here
1769:13 - two required parameters so let's say
1769:15 - required build context build context
1769:18 - context
1769:19 - and then we say required string text
1769:22 - okay so anybody calling this function
1769:24 - has to provide these two parameters and
1769:25 - they're very familiar because they are
1769:27 - the parameters needed by show overlay
1769:29 - okay
1769:31 - so let's go in here and we say if we
1769:33 - have a controller um if we can actually
1769:37 - use this controller's update function in
1769:39 - here so like this
1769:41 - and we pass the text in here or false
1769:44 - so now you probably are like starting to
1769:47 - see why i'm returning true from this
1769:49 - function and that's because well if you
1769:51 - don't have a controller then you can't
1769:53 - update it okay
1769:55 - so this basically
1769:58 - what it does it makes the
1770:00 - code you have to write shorter because
1770:01 - otherwise you'd have to do like this if
1770:03 - controller
1770:04 - not null
1770:05 - then you would have to update but in
1770:08 - here we're just saying either update the
1770:09 - controller's text
1770:11 - or
1770:12 - else like this okay so
1770:15 - if we could update the controller's x we
1770:17 - just return because that means well we
1770:19 - already have a controller on the screen
1770:20 - a an overlay controller so we could
1770:23 - update its text so show should just
1770:26 - return right after that it shouldn't
1770:27 - display a new um overlay otherwise we
1770:30 - create and we basically create a new
1770:32 - overlay using this show overlay and
1770:34 - assign it to our controller
1770:37 - our property on top so we say this is
1770:39 - equal to show orally
1770:41 - with that context and text
1770:45 - all right fantastic so that's pretty
1770:46 - much all we have to do and for our
1770:50 - loading screen.dart file so we could
1770:52 - just save this and i'm just going to
1770:54 - save this file as well and close it
1770:58 - so let's talk a little bit about our um
1771:02 - off
1771:03 - state
1771:04 - and if you remember from our off state
1771:07 - and for instance here we have off state
1771:09 - logged out and that has a has is loading
1771:11 - um property in here but if you look at
1771:14 - for instance needs verification or
1771:15 - logged in etc etc
1771:18 - they don't have is loading so
1771:21 - what if we added is loading to a higher
1771:24 - level here to our off state so any off
1771:28 - state in our application could
1771:30 - potentially be in the loading state as
1771:32 - well so that means registering could be
1771:35 - loading logging could be loading whoever
1771:38 - wants to could have loading
1771:41 - and that's exactly what we're gonna do
1771:43 - now so i'm going to go to my notes as
1771:44 - well so off state
1771:47 - let's go ahead and add these
1771:49 - parameters that we have at the bottom of
1771:51 - the screen to our off state okay so i'm
1771:53 - going to say final um
1771:55 - bool is loading
1771:58 - and also let's say final string
1772:01 - loading text something like this
1772:05 - and then let's just
1772:07 - undefine class build sorry about that i
1772:09 - just programmed so many different
1772:10 - languages um at final and they're so so
1772:14 - different every language is kind of like
1772:15 - they have their own data types and
1772:17 - typescript has their own lowercase data
1772:19 - types uppercase etc
1772:21 - it's just a mishmash of various
1772:23 - different types i just wish we could get
1772:25 - along and have like one standard for all
1772:27 - data types at least the primary data
1772:29 - types in our applications
1772:31 - but that's just wishful thinking maybe i
1772:33 - digress let's go ahead and add these
1772:35 - parameters to our off state
1772:38 - and let's go ahead and do this make
1772:40 - these required parameters so we say it's
1772:42 - it should uh this should be provided is
1772:45 - loading but the loading text doesn't
1772:47 - need to be provided we'll always have a
1772:49 - default we'll say please wait a moment
1772:52 - like this
1772:54 - uh and we should close this have i not
1772:57 - closed this
1772:58 - so like that okay
1773:00 - so that's adding these two parameters to
1773:03 - our um auth state and loading text
1773:06 - always has a default string okay
1773:11 - so let's go ahead to auth state
1773:13 - uninitialized and add is loading in here
1773:16 - so let's say required
1773:18 - bool is loading so now that we've done
1773:20 - that we should actually you see now what
1773:23 - we're getting in here is saying that
1773:24 - wait you're not calling your super
1773:26 - because it's a super has this is loading
1773:28 - parameter in here that you need to
1773:30 - provide because it's required but you're
1773:31 - not doing that so let's go ahead and
1773:33 - actually add that parameter to our cells
1773:35 - as well and say is loading
1773:37 - and what we're doing here which is
1773:38 - called super and we say is loading is is
1773:42 - loading as is provided to us okay
1773:46 - so that's for uninitialized
1773:49 - um now let's go to registering and do
1773:51 - the same thing in in there so we're
1773:54 - going to say for registering we actually
1773:56 - have exception required so let's make
1773:59 - this required and also make
1774:02 - is loading required so it is loading
1774:05 - like that
1774:06 - okay and let's call super is loading is
1774:09 - is loading like this
1774:12 - all right perfect
1774:15 - that's also done and for
1774:17 - registering let's go to
1774:19 - auth states logged in at the moment
1774:22 - we're getting taking the user
1774:24 - and you see i'm making these parameters
1774:26 - required because
1774:28 - if you don't make them required as soon
1774:29 - as you go to two parameters three
1774:31 - parameters for creating a cons for
1774:33 - constructing
1774:34 - an object using this initializer then
1774:36 - things start to get messy because
1774:37 - they're not named parameters otherwise
1774:39 - so passing three unnamed parameters to
1774:42 - an initializer to me is just it's just a
1774:44 - little bit difficult to understand so
1774:47 - that's why we're making them required
1774:48 - okay
1774:50 - so let's go in here and make this also
1774:52 - required
1774:53 - name parameter required if i can spell
1774:56 - and this user
1774:58 - and then i'm gonna say required uh bool
1775:01 - is
1775:03 - uh required bull is loading all right
1775:07 - like that and then let's call super is
1775:09 - loading with is loading all right
1775:12 - so that's for off state logged in
1775:17 - now we need to also think about off
1775:19 - state needs a verification and we're
1775:22 - just gonna take is loading in there as
1775:24 - well
1775:25 - so let's go ahead and say needs
1775:27 - verification also has a required
1775:29 - parameter
1775:31 - bool is loading and we're gonna do the
1775:33 - same thing super is loading it is
1775:34 - loading so all we're doing is that we're
1775:36 - making sure that every state has and is
1775:39 - loading and that is loading is passed to
1775:42 - the super class called off state all
1775:44 - right
1775:46 - and then we need to take care of also
1775:48 - our off state logged out so
1775:51 - and
1775:52 - you see at the moment we have a little
1775:53 - problem in here and it says don't
1775:55 - overwrite fields thank you dart and that
1775:57 - means basically it's loading is already
1775:59 - implemented on the super class so we
1776:01 - could just safely remove it from here
1776:03 - okay and then we say bool
1776:05 - is loading and actually required bull
1776:08 - actually like that
1776:10 - and also we take in a string of um our
1776:14 - loading text like this
1776:18 - um so
1776:20 - now that that is like that we're just
1776:22 - gonna call super and say is loading is
1776:23 - equal to is loading and then loading
1776:25 - text is loading text just like that okay
1776:29 - and then put a comma at the end of this
1776:33 - perfect all right so that is basically
1776:35 - saying that we may want to customize the
1776:37 - off state logged out loading text
1776:40 - because we're taking it in and then
1776:41 - passing it up to the super whereas the
1776:44 - others are not allowing us at the moment
1776:46 - to customize their
1776:47 - loading text so that's why we have
1776:49 - string loading text only for off state
1776:51 - locked out and not for the other classes
1776:53 - all right
1776:56 - um
1776:57 - okay
1776:58 - so that's that so we've already
1777:00 - basically taken care of this caption as
1777:01 - well so we've added loading text to our
1777:03 - auth state logged out okay
1777:08 - so now we need to save this file and
1777:10 - just go back to our off block in here
1777:14 - and you can see now we have a little bit
1777:16 - of a problem in here so let me also go
1777:18 - to my notes so i can bring up my notes
1777:21 - off block
1777:22 - so we have our
1777:24 - um
1777:25 - auth state uninitialized in here and
1777:27 - what we need to do is say when the
1777:29 - application opens when you the
1777:32 - absolute initial state of the
1777:33 - application should be in the loading
1777:35 - state so we should say it's loading true
1777:37 - okay
1777:39 - so that's that part we taking care of
1777:41 - that
1777:43 - so i need to what we need to do now is
1777:45 - to take care of as you say update off
1777:47 - state logged out in off block so
1777:50 - let's go and find
1777:52 - logged out
1777:55 - and we can have a look in here let's see
1777:57 - if we have logged out anywhere yes and
1778:00 - it says add is loading true to off state
1778:02 - logged out while loading
1778:05 - so um i'm gonna have a look here and see
1778:08 - if we can actually find that so that's
1778:10 - for instance um
1778:12 - here
1778:14 - and that's fine and then what we're
1778:15 - gonna do in here we're gonna say loading
1778:17 - text
1778:19 - and let's say please wait while i log
1778:22 - you in something like this okay
1778:25 - that's off state logged out that's the
1778:27 - first thing that we have to do and let's
1778:30 - see where else we're using off state
1778:32 - logged out and sorry
1778:34 - here
1778:36 - yes and that's fine that's fine
1778:40 - so maybe that was the only place that we
1778:42 - actually had to update our log state uh
1778:45 - off state logged out
1778:48 - i don't think we have anywhere else that
1778:50 - off state logged out has to be set to
1778:53 - true except for when we're actually
1778:55 - logging you in so
1778:57 - and i believe that we've done that now
1778:59 - so off state logged out is there with is
1779:02 - loading true there so that's that's the
1779:04 - only thing we have to do okay
1779:07 - the next thing that we have to do is to
1779:09 - add is loading to other states in off
1779:12 - block so let's start from where we're
1779:15 - getting all these errors so we have
1779:18 - excuse me off event initialize so i'm
1779:20 - going to find that in my notes in here
1779:23 - and in these cases when we're emitting
1779:26 - auth state needs verification we should
1779:28 - just say is loading false because you
1779:30 - see
1779:31 - when we actually end up in this state
1779:33 - we're not loading anything we've already
1779:34 - done the work that we were supposed to
1779:36 - do so
1779:37 - and that's sufficient basically in here
1779:41 - so here we have the user so now this is
1779:43 - a required parameter named parameter so
1779:45 - it has its user and then we're going to
1779:46 - say it's loading
1779:48 - and in here we're going to say false as
1779:50 - well so command here to make the code
1779:52 - look a little bit better
1779:54 - and let's then go ahead in here which is
1779:57 - our off event login
1780:01 - and we have
1780:02 - this problem at the end which is off
1780:04 - state needs verification
1780:07 - and when we've emitted this off state
1780:09 - needs verification is loading is also
1780:11 - false so pretty much is loading is false
1780:12 - almost everywhere
1780:14 - except for when we're actually loading
1780:16 - something
1780:18 - which is for instance uh let's see
1780:21 - here
1780:22 - when we're actually logging in for
1780:23 - instance okay so when we have the user
1780:26 - in here we say user is a required
1780:27 - parameter and is loading is false as
1780:29 - well
1780:30 - coma to make it work also
1780:33 - and just looking up and down this file i
1780:36 - can see we also have a problem off event
1780:38 - register so let's go to auth event
1780:40 - register
1780:41 - excuse me and let's just say auth needs
1780:44 - verification is loading is false as well
1780:47 - and in here we have an exception name
1780:49 - parameter i believe and they require
1780:51 - parameter and then we say is loading is
1780:53 - false as well so just a comma in there
1780:55 - to get the formatting working
1780:57 - and that is working as it should so we
1781:00 - shouldn't have any errors basically in
1781:01 - our offline at this point all right
1781:04 - so then i'm gonna close that file
1781:08 - so
1781:08 - what we need to do as the captioning
1781:10 - case we need to go to our login view and
1781:12 - remove everything that has anything to
1781:13 - do with
1781:14 - loading so let's go to a login view
1781:18 - and in here
1781:21 - uh login
1781:23 - view
1781:24 - and at the moment you can see we have
1781:25 - this closed dialog close dialog handle
1781:28 - all that stuff so we shouldn't do any of
1781:30 - that so now you see the point of what
1781:32 - we've done is for our application to be
1781:35 - able to handle
1781:36 - the loading dialog just in one place
1781:40 - loading dialogue should be handled in
1781:42 - one place in the entire application
1781:45 - that's what we're trying to do we
1781:46 - shouldn't have loading states and
1781:48 - loading like handling loading and or any
1781:51 - dialogues and that has anything to do
1781:54 - with loading in various views inside our
1781:56 - application so that's what we're trying
1781:57 - to get to okay so let's first go to this
1781:59 - close dialogue handle and remove that
1782:01 - because we're not going to need that
1782:02 - anymore and then let's go in here and
1782:04 - remove all this code inside your login
1782:06 - view dot dart file that has anything to
1782:08 - do with loading so now you should just
1782:10 - have exception handling all right
1782:14 - oh now let's go to um
1782:16 - our main dart file and
1782:20 - here have a look at what we have you can
1782:23 - see at the moment we have a block
1782:25 - builder inside the main widget of home
1782:28 - page in in our build function we have a
1782:30 - block builder but what we want is to
1782:32 - issue some side effects
1782:34 - when the state
1782:36 - changes to something that has a loading
1782:38 - in it okay so you see this state at the
1782:40 - moment is off state but inside there
1782:42 - this state could have is loading set to
1782:44 - true so how do we handle that remember
1782:47 - block builder is not supposed to have
1782:49 - any side effects that's the job of the
1782:52 - block listener
1782:54 - however we need the block builder we
1782:56 - actually need to return something in
1782:58 - here we need to return
1783:00 - different views depending on the current
1783:01 - state but we also need a block listener
1783:04 - so how do we do this how do we fix this
1783:06 - well the the solution is using a block
1783:09 - consumer
1783:10 - so a block consumer i've mentioned this
1783:12 - before the block consumer
1783:14 - builds on top of a block builder and a
1783:16 - block listener so it allows you to do
1783:18 - both things at the same time so if you
1783:20 - ever end up in a situation or
1783:22 - application where you want a builder a
1783:23 - blog builder and you want a blog
1783:25 - listener block listener at the same time
1783:28 - there is where you need a blog consumer
1783:31 - okay
1783:32 - so let's go in here and say that in our
1783:35 - main file i'm going to go to my notes as
1783:37 - well
1783:38 - and i'm just going to say
1783:40 - excuse me in here
1783:42 - we don't have a block builder
1783:46 - instead we have a block
1783:48 - consumer
1783:50 - and now we have listener in here and
1783:52 - let's grab hold of this so
1783:55 - what we're going to do in here is say if
1783:57 - state is loading
1784:01 - then what we're going to say is we're
1784:02 - going to say loading screen and it also
1784:05 - imported for me okay and then we're
1784:07 - gonna say show
1784:09 - okay we have the context already and
1784:12 - then we either take the state's loading
1784:14 - text or we say please wait in a moment
1784:18 - so if the state's loading text is not
1784:21 - available we just use a default one in
1784:23 - here
1784:24 - so if the state is not loading we just
1784:26 - say loading screen
1784:29 - dot height all right so that's that so
1784:32 - now that we've done this this is pretty
1784:33 - much like the last building block that
1784:35 - we have to build inside this um inside
1784:37 - this application for now so i'm just
1784:38 - going to close this main dart file and
1784:41 - resize the screen let's go ahead and
1784:43 - bring up scrcpy
1784:45 - and if i dare i'm gonna hot restart the
1784:48 - application entirely because we've done
1784:50 - so much new work
1784:52 - and let's go ahead in uh just for
1784:55 - experiment i'm gonna go into
1784:59 - what is it loading okay i'm just gonna
1785:00 - go into our
1785:02 - provider
1785:04 - in firebase auth provider inside this
1785:07 - login
1785:08 - if you remember from before
1785:11 - it user
1785:12 - login in here
1785:14 - like this we could basically have a
1785:17 - little bit of a delay so because
1785:20 - otherwise we may not actually see the
1785:22 - our little uh overlay so i'm just gonna
1785:24 - first not do that and try to log in
1785:26 - normally so fubar bass
1785:29 - you saw did you see our little overlay
1785:31 - there so i'm going to log out now and
1785:33 - see if we can see it
1785:34 - what we didn't
1785:35 - but if i try to now put a little bit of
1785:38 - a delay in here so i'm just going to say
1785:40 - await
1785:41 - um
1785:42 - future
1785:43 - delayed the rate const duration
1785:47 - seconds three
1785:49 - and just hot restart the application
1785:53 - and then i'm going to say
1785:55 - my normal credentials foo bar
1785:57 - and press the login button and this is
1785:59 - our overlay
1786:01 - right and it has the ability for you to
1786:04 - actually update its text as it's
1786:06 - displayed on the screen so
1786:08 - then yes everything is actually working
1786:10 - as it should so now we have an overlay
1786:12 - we don't have our loading dialog anymore
1786:15 - so you could safely basically go and say
1786:17 - well i want to get a complete rid of
1786:19 - the loading dialog so i'm going to leave
1786:21 - that up to you
1786:22 - as now that we did we don't need the
1786:25 - loading dialogue so what we achieved in
1786:26 - this chapter is actually huge because we
1786:29 - now have a loading um screen that is
1786:32 - independent of the entire application
1786:34 - and it's in just one place that's the
1786:37 - goal we don't have many different places
1786:39 - in our application that are handling the
1786:41 - loading dialogue okay
1786:43 - so let's go ahead and make sure we're
1786:45 - not going to lose our code our precious
1786:48 - code that we've written so far so i'm
1786:50 - gonna rid of i'm gonna get rid of scr
1786:52 - cpy increase the size of the screen
1786:54 - and let's go as we usually do and commit
1786:57 - and tag our code so if you look at our
1787:00 - logs the previous commit was step 25
1787:02 - let's
1787:03 - add
1787:04 - everything and say git commit
1787:07 - step
1787:08 - 26
1787:10 - i'm going to push these changes and
1787:12 - let's just say git tag
1787:14 - step 26 as well
1787:17 - and then get push
1787:19 - tags if i can spell
1787:22 - but if you look at our logs now so we
1787:24 - have step 26 in here and if i scroll a
1787:26 - little bit step 25 is before it and all
1787:30 - the tags are also available in here you
1787:32 - can see 25 and 26 available right there
1787:35 - all right so we've done what we promised
1787:38 - to do at the beginning of this chapter
1787:40 - and we created a great overlay that we
1787:41 - can reuse in the in the application and
1787:44 - just show and hide only in one place
1787:47 - so what we need to do now is the very
1787:50 - exciting stuff in that we're getting
1787:52 - really close to being complete with our
1787:54 - application so we have login register
1787:56 - verification
1787:58 - email verification we have loading in
1788:00 - screens we have sharing deleting it's
1788:03 - just we have pretty much everything for
1788:04 - application but
1788:06 - we still have some little bits and
1788:08 - pieces left to make the application more
1788:10 - useful because remember when you create
1788:12 - your application and send it to apple
1788:14 - and google for review there's actually
1788:16 - going to be real people who sit there
1788:19 - and interact with your application to
1788:20 - see if they can make sense of it so we
1788:22 - need to clean the ui up so that it's a
1788:25 - little bit more user friendly and that's
1788:27 - exactly what we're going to take care of
1788:29 - in the next chapter so i'll see you
1788:31 - there hello everyone and welcome to
1788:33 - chapter 44 of the swata course in
1788:35 - previous chapters we've been basically
1788:38 - working quite a lot with block and we've
1788:41 - been making sure that our applications
1788:42 - loading screen is working so we have one
1788:45 - place in the entire application that
1788:46 - we're taking care of the loading screens
1788:48 - and we also have wrapped our whole
1788:51 - authentication process inside a block
1788:54 - and we're very now close to being able
1788:56 - to release our application to the app
1788:58 - store apple's app store and google's
1789:00 - play store
1789:01 - so
1789:02 - this is usually what we do as software
1789:04 - developers
1789:05 - just before releasing our product or we
1789:08 - basically go and clean it up as we say
1789:10 - so we put some final touches to it so
1789:13 - even if you're a designer you usually do
1789:16 - that probably like if you're working
1789:17 - with figma or you're working with sketch
1789:20 - you first are like designing your
1789:22 - product and then before you present it
1789:24 - to the product owner or the developers
1789:26 - you probably put some final touches to
1789:28 - it so um that's what we're gonna do in
1789:31 - this chapter and we have um a few things
1789:34 - also left to do which have nothing
1789:36 - really to do with the final touches to
1789:38 - the ui it's mainly to do with the
1789:40 - products functionality and we'll talk
1789:43 - about that first
1789:44 - so if you think about it what we have at
1789:47 - the moment is um
1789:49 - an application that a user can register
1789:51 - they can't send an email verification
1789:53 - they can log in and they can go into the
1789:55 - list of notes that they have they can
1789:57 - create notes delete notes and edit and
1789:59 - share notes however we haven't really
1790:02 - exposed a functionality for a user to be
1790:04 - able to reset their password so
1790:06 - imagine a process imagine an application
1790:09 - where you've created it created a user
1790:12 - in the application and you forgot your
1790:14 - password and there's absolutely no way
1790:15 - for you to get back into the product or
1790:18 - the software and because you just don't
1790:20 - know your password so you
1790:22 - may then have to personally contact the
1790:24 - application developer and say could you
1790:25 - reset my password so it's a very very
1790:28 - difficult process to do manually and you
1790:30 - shouldn't really do that so what we're
1790:32 - going to do
1790:34 - we're going to do in this chapter is not
1790:35 - only to do final ui touches but also
1790:37 - we're going to create a password reset
1790:39 - functionality into our application
1790:44 - so let's get started with that i'm going
1790:45 - to do some screen reshuffling in here as
1790:48 - you can see in the cache we're going to
1790:49 - go delete all users in firebase console
1790:51 - and also all their data
1790:53 - so
1790:54 - i'm going to bring up console
1790:56 - firebase.com and i'm going to bring it
1790:58 - to the main screen in here
1791:01 - let's find our application i believe
1791:03 - it's this one and i'm then gonna go in
1791:05 - here
1791:06 - to a firebase date the firestore
1791:08 - database and let's start by
1791:12 - going in here and deleting
1791:15 - these documents so let's say delete
1791:17 - document and we have four documents so
1791:20 - it's nothing
1791:21 - so difficult to do
1791:23 - just one at a time we delete these
1791:24 - documents okay here here
1791:28 - and those are our documents gone so you
1791:30 - could just keep your collection i think
1791:31 - it's best because our application at the
1791:32 - moment is assuming that there is a node
1791:34 - collection available
1791:36 - if you remember from our node service
1791:39 - so that's that part we deleted the data
1791:41 - but we haven't really deleted the user
1791:43 - so let's go off to authentication
1791:45 - section of your
1791:47 - firebase
1791:49 - and in here i'm just gonna say delete
1791:51 - account
1791:52 - and let's just delete this account as
1791:54 - well so now we're basically starting off
1791:57 - fresh so no users and no data in the
1792:00 - entire
1792:01 - and back end all right
1792:04 - so that's that part let's do that i'm
1792:06 - going to then bring up our source coding
1792:07 - here
1792:09 - let's see
1792:10 - so here
1792:12 - we have our
1792:14 - my notes application as we've called it
1792:17 - so that's visual studio code i'm going
1792:19 - to resize it a little bit and then i'm
1792:21 - going to bring up scrcpy as well which
1792:23 - has our app running at the moment and
1792:25 - the application thinks at the moment
1792:27 - that we're logged in
1792:28 - because it hasn't really communicated
1792:30 - with the back end yet so i'm gonna just
1792:32 - do a hot restart in here and this is
1792:34 - this is the problem that you'll
1792:37 - sometimes actually notice in the in your
1792:40 - application in that
1792:41 - firebase isn't gonna immediately
1792:43 - understand that this user doesn't exist
1792:45 - on the back end anymore so if you delete
1792:48 - a user from your firebase backend it
1792:49 - doesn't necessarily mean that it's
1792:51 - immediately going to be reflected to the
1792:53 - application so let's see what happens in
1792:55 - here if i then log out with this user
1792:58 - like this and then try to log in with a
1793:01 - user that used to exist in the
1793:03 - application but i just deleted it foo
1793:04 - barbado
1793:06 - and let's see what happens in here and
1793:07 - now you can see we see we say user not
1793:09 - found okay we're gonna clean up that
1793:11 - message as well soon in this chapter
1793:14 - so good we have a clean slate now so we
1793:16 - have no users and no data in the
1793:18 - application
1793:19 - um
1793:20 - so what we need to do now is to start by
1793:23 - defining our events and states for
1793:26 - forgotten password okay so if user says
1793:28 - hey i forgot my password we have to have
1793:31 - an event
1793:32 - so that we can send that event
1793:34 - to our um
1793:36 - off block
1793:38 - so you can see in here we have to go to
1793:40 - auth event dark file and add an auth
1793:42 - event for god password okay
1793:45 - so let's go ahead and do that so i'm
1793:47 - going to open off event dark file
1793:50 - and perhaps
1793:52 - over log out in here we're just going to
1793:54 - say class i'm going to increase the size
1793:56 - in here as well obviously better
1793:58 - class um off as we've said in the notes
1794:01 - here off event forgot password extends
1794:05 - off
1794:06 - event okay just like that
1794:09 - and in here we need to grab the user's
1794:12 - email so we say email
1794:14 - like that and i'm gonna create a
1794:15 - constructor for this as well just like
1794:18 - that
1794:19 - and let's just make this
1794:21 - or here with curly brackets okay
1794:26 - all right so it's a name parameter now
1794:27 - um and we just said auth event forgot
1794:29 - password
1794:32 - fantastic so that's that part um then we
1794:35 - also need to go and define a state
1794:37 - because when a user presses a button for
1794:40 - instance saying i forgot my password
1794:42 - then our off block is going to produce
1794:44 - that state and say hey application that
1794:47 - your state right now is forgot password
1794:49 - and then in the main dart file as you'll
1794:51 - soon see we will go and edit and add
1794:53 - that state to our state handling as you
1794:55 - can see in your main dart file
1794:58 - the moment we have all these states but
1795:00 - we're going to add a new state that says
1795:02 - else if state is off state forgot
1795:05 - password then display a forgot password
1795:07 - view which we're also gonna develop soon
1795:11 - so
1795:12 - as the caption indicates let's go and
1795:14 - let's go to the file off state dart file
1795:18 - and i'm going to do that in my notes as
1795:20 - well after registering it really doesn't
1795:23 - matter where you place that code i'm
1795:24 - just going to place it here after
1795:26 - registering
1795:28 - and just say off state forgot password
1795:34 - and off state
1795:39 - um
1795:40 - and then we have to also take care of
1795:42 - this so
1795:44 - what should the state actually indicate
1795:47 - to the application
1795:48 - let's say that when you're in the forgot
1795:51 - password view which we're soon gonna
1795:53 - develop
1795:54 - um there could be two things that you
1795:56 - wanna convey to the user in that screen
1795:59 - either the user has just landed so there
1796:02 - are actually three three states that
1796:04 - that screen can have
1796:06 - either the user has just landed on that
1796:08 - screen meaning that there is no errors
1796:10 - nothing we haven't done anything so it's
1796:12 - just a clean slate so that's the default
1796:15 - state
1796:16 - of off state forgot password so nothing
1796:18 - okay
1796:20 - however what if the user has actually
1796:23 - pressed the
1796:24 - um
1796:25 - send reminder email because you see the
1796:27 - way we're going to handle for a password
1796:29 - is we're going to actually ask firebase
1796:31 - and say firebase this user forgot their
1796:33 - password with this email send a reminder
1796:35 - email to them or send some kind of like
1796:37 - an email to them that they can't
1796:38 - actually reset their password
1796:41 - so upon user pressing that button to
1796:44 - send a reminder email to their email
1796:47 - address
1796:48 - um a few things can happen
1796:50 - actually two things that we're going to
1796:52 - handle one is that well
1796:55 - we tried to send an email but it didn't
1796:57 - succeed so kind of an exception so
1797:00 - that's the second state remember no
1797:01 - state
1797:03 - second state is there's an exception and
1797:05 - there's a third state that there was no
1797:07 - exception but we've actually sent the
1797:09 - email so three things we have to handle
1797:11 - okay
1797:13 - so the default state with no values is
1797:15 - state number one nothing has happened
1797:18 - state number two would be actually
1797:19 - having an optional accept exception here
1797:25 - and the third state is um
1797:27 - bull
1797:28 - has sent email like this okay
1797:33 - so let me go ahead and create a
1797:35 - constructor for these i'm not gonna
1797:36 - explain this again because we've talked
1797:38 - about this quite a lot and i'm gonna
1797:39 - make these required parameters okay just
1797:42 - like that
1797:43 - and put a semicolon at the end
1797:46 - and in here we're just gonna call em
1797:49 - we're gonna call super but remember from
1797:51 - super off states has a constructor here
1797:54 - that has to provide is loading okay so
1797:57 - in in this case let's just actually take
1798:00 - a bull is loading as well as a parameter
1798:03 - in here
1798:05 - and then we're gonna pass is loading to
1798:07 - our super as well just like that
1798:10 - all right
1798:12 - so
1798:13 - when we're actually working with this
1798:15 - auth state for that password we can
1798:16 - actually give it is loading parameter
1798:18 - and that's going to get delegated back
1798:20 - to off state so our main dart file is
1798:23 - going to be able to display a loading
1798:25 - screen if is loading is true if you
1798:27 - remember from
1798:29 - main dart file we have this beautiful
1798:31 - block consumer with the listener that
1798:33 - that looks at any off state and as long
1798:35 - as this auth states is loading parameter
1798:37 - is true or that auth states is loading
1798:40 - variable or property is true then it
1798:43 - shows the loading screen
1798:46 - all right perfect so now we've taken
1798:47 - care of off state so we didn't make any
1798:49 - changes in main dart file yet okay
1798:54 - all right what we need to do is now go
1798:55 - to our um auth provider dart file and
1798:59 - define an interface function for sending
1799:02 - a reminder email so
1799:04 - i'm gonna go and do that right now auth
1799:07 - provider
1799:09 - i'm gonna do it here as well off
1799:11 - provider
1799:13 - okay
1799:14 - so let's go ahead and define a function
1799:16 - that every auth provider including our
1799:18 - firebase auth provider has to conform to
1799:20 - okay so let's say this is a future
1799:24 - point and we call it send password
1799:26 - reset like that and we have a required
1799:29 - string parameter to email just like that
1799:32 - so this is now defined
1799:34 - after defining this you'll understand
1799:35 - now soon that we have a few errors
1799:37 - because auth service conforms to auth
1799:39 - provider
1799:41 - and so does firebase auth provider but
1799:43 - we're gonna fix these soon okay
1799:46 - so as the caption indicates let's go to
1799:48 - firebase auth provider in here and
1799:51 - actually implement that so i'm gonna go
1799:53 - to firebase
1799:56 - off
1799:57 - provider in my notes
1799:59 - and i'm also going to go here on the
1800:02 - screen and say um firebase
1800:04 - off provider and you'll see an error in
1800:07 - here in visual studio code you can
1800:08 - actually get help from visual studio
1800:10 - code to complete that missing overwrite
1800:12 - for us you can see create one missing
1800:14 - override and this is basically saying
1800:15 - that you're conforming to auth provider
1800:17 - but you're not actually overwriting all
1800:19 - the functions that boss provider wants
1800:21 - you to override okay so if you're
1800:23 - working with vim or if you're working
1800:25 - with sublime that doesn't for instance
1800:27 - have dart's um
1800:30 - plugin then you may have to override
1800:32 - that function yourself but the signature
1800:34 - of that function is very easy you can
1800:36 - just go to auth provider and grab this
1800:37 - function and just put a
1800:39 - override before it okay so that's
1800:41 - completely fine as well but since i'm
1800:44 - working with and this is asking me to
1800:46 - save this file but there's pretty much
1800:47 - nothing that i did in this file already
1800:49 - okay
1800:50 - so since i have visual studio code i can
1800:52 - ask it to create the missing override
1800:53 - for me and it's gonna probably create it
1800:55 - right at the bottom in here okay so
1800:57 - that's fine
1800:59 - so let's put this whole thing into a
1801:02 - catch block so i'm just gonna say catch
1801:05 - like this
1801:06 - all right and then if anything happens
1801:09 - during this process of sending a
1801:11 - password reset email to the user we're
1801:14 - just gonna throw
1801:15 - a generic auth exception in here okay so
1801:21 - then um and also if you're wondering
1801:23 - about this syntax this is just like you
1801:25 - ignoring an incoming variable in swift
1801:28 - and in rust and some other languages
1801:31 - like python you could also do something
1801:32 - like this that you ignore an incoming
1801:35 - variable using underscore but in dart
1801:38 - it's not really you ignoring ignoring
1801:40 - the variable it's you naming the
1801:42 - variable
1801:43 - underscore but i try to sometimes use
1801:46 - this just to indicate that hey i don't
1801:48 - care about this variable okay but just
1801:50 - know that internally you're not ignoring
1801:53 - it you're just naming it underscore okay
1801:56 - so let's go in here and and now ask our
1801:59 - provider so um so we just say await
1802:02 - since we're in firebase auth provider we
1802:04 - can actually say wait firebase off
1802:07 - oh and we have to mark this function as
1802:09 - async otherwise we can't use a weight
1802:12 - and then instance and then there's a
1802:14 - function called send password reset
1802:16 - email and it it says to which email and
1802:18 - we're gonna say to this email okay
1802:22 - all right so that's our catch in there
1802:24 - but we also have to have another catch
1802:27 - that is that catches firebase off
1802:29 - exception as we're doing in many other
1802:31 - places so let's have a look
1802:33 - um here for instance okay so let's go
1802:36 - before this catch and say on firebase
1802:38 - off exception
1802:40 - catch e something like that
1802:44 - and then curly brackets and curly
1802:46 - brackets close so i'm going to bring
1802:48 - this code up so we see better
1802:51 - so there are two things that we have to
1802:53 - handle two codes that we have to handle
1802:55 - as you can see we're handling a few
1802:57 - codes in here for instance user not
1802:58 - found wrong password and these things
1803:01 - are basically
1803:02 - i haven't really found the correct
1803:04 - documentation for these things like
1803:05 - where firebase has documented that these
1803:08 - errors are going to happen with these
1803:10 - codes it's mainly that i found them out
1803:12 - through experience just like trying
1803:14 - different things and seeing that things
1803:16 - fail and upon failing i caught their
1803:18 - error code and now i know which error
1803:20 - codes i had to actually have to handle
1803:22 - but if you search on google i'm pretty
1803:23 - sure you're gonna find some good
1803:24 - documentation about a firebase and the
1803:26 - google team are great at documenting
1803:28 - things so
1803:30 - so one error that we have to handle is
1803:32 - called firebase auth invalid email and
1803:34 - the other one call is called firebase
1803:36 - off user not found so let's first
1803:39 - grab the um error code so i'm just going
1803:41 - to say switch e code in here because
1803:44 - remember
1803:45 - any firebase auth exception that comes
1803:47 - from firebase has a code of type string
1803:49 - as you can see here and that's that
1803:50 - string that we're interested in so let's
1803:53 - handle firebase auth invalid email for
1803:56 - now okay
1803:58 - and then in this case we're just going
1803:59 - to say throw um invalid email off
1804:02 - exception oops
1804:05 - we already have this defined from before
1804:07 - okay
1804:08 - in our off exceptions here dark file you
1804:11 - see
1804:12 - and the other case that we have to
1804:14 - handle is called
1804:15 - firebase auth user not found so it's a
1804:18 - user it's like anyone asking for a
1804:22 - reminder email for their password and
1804:23 - that user just doesn't exist in the
1804:25 - database so then we have to handle that
1804:27 - case as well it's called user not found
1804:29 - just like that okay and then we're gonna
1804:31 - throw
1804:32 - a user not found off exception
1804:36 - in any other case of firebase
1804:38 - authexception we're just going to throw
1804:40 - generic off exception just like that
1804:42 - okay
1804:43 - and we're going to save this file
1804:48 - fantastic so we fixed firebase auth
1804:50 - provider but if you look at your project
1804:52 - explorer you still have a problem in
1804:53 - auth service because if you remember
1804:55 - auth service also implements auth
1804:58 - provider but it delegates all its
1804:59 - responsibility to its auth provider
1805:02 - so let's go into our auth service and
1805:06 - implement the send password reset
1805:08 - functionality so i'm just going to go in
1805:10 - here
1805:11 - and get a visual studio code to complete
1805:13 - this with command dot on mac or control
1805:15 - dot and linux and windows and just say
1805:17 - create one missing override okay and in
1805:20 - here i'm making this an arrow function
1805:23 - because i believe every other function
1805:25 - we've done in here is an error function
1805:27 - since
1805:27 - all these functions inside all servers
1805:29 - as i've stated before
1805:31 - basically delegate their functionality
1805:33 - to the provider
1805:35 - which is given to it inside its
1805:38 - constructor
1805:39 - so let's go ahead and create an error
1805:40 - function and in here just delegate this
1805:42 - to the provider and we just say provider
1805:44 - send
1805:45 - email
1805:46 - verification and in here we just say um
1805:50 - send password resets actually called
1805:52 - sorry provider send password reset to
1805:55 - email to email just like that
1806:00 - all right and let's just save this file
1806:02 - then um
1806:03 - [Music]
1806:04 - so
1806:04 - what we need to do now
1806:06 - is to actually handle our auth event for
1806:09 - god password in the off box so
1806:12 - i understand there's lots of like
1806:13 - jargons that are flying around here so
1806:15 - you may just be a bit confused about
1806:17 - okay what are we actually doing so what
1806:18 - we need to do now is you see
1806:21 - soon what we're going to do is to create
1806:23 - a little button in here
1806:24 - and
1806:25 - say forgot password so when the user
1806:28 - lands in the login screen they may be
1806:30 - like okay this is my email but i
1806:32 - actually forgot my password so they have
1806:33 - to have a forgot password button
1806:35 - somewhere here
1806:36 - upon them pressing that button
1806:38 - in the login view we're gonna send this
1806:41 - event to our off block so if you
1806:43 - remember from our off event so i'm going
1806:45 - to go back here you don't have to go
1806:47 - here if you go to our off events you can
1806:50 - see we have an auth event forgot
1806:52 - password so the goal is for our user
1806:55 - and for
1806:56 - for our user interface to send this
1806:58 - events to the auth block and then off
1807:00 - block is going to calculate its state
1807:03 - based on that okay
1807:06 - so let's go now into our auth block file
1807:10 - here as you can see
1807:12 - and i'm going to do that here
1807:14 - in my code as well and we're going to go
1807:17 - and implement
1807:18 - um
1807:19 - this functionality here forgot password
1807:23 - like this and let's go and say on off
1807:27 - event
1807:28 - forgot password just like that and you
1807:30 - now should be
1807:32 - quite used to this syntax emit
1807:35 - and this is going to be asynchronous
1807:36 - function and just uh curly brackets just
1807:39 - like that so this is like the bare bones
1807:41 - of handling
1807:43 - an event in your block
1807:46 - okay now we're handling off event for a
1807:48 - god password so what we're gonna do in
1807:50 - here is we're just gonna say
1807:52 - uh by default we're emitting
1807:55 - a constant
1807:57 - off state for a god password
1808:00 - exception is null has sent email is
1808:02 - false
1808:04 - and it's loading is false so what we're
1808:06 - basically saying in here is saying by
1808:08 - the user pressing the forgot password
1808:10 - button what we're doing is saying
1808:13 - yeah go to the forgot password screen
1808:15 - that's all that's all we're saying okay
1808:17 - because then our main dart file is gonna
1808:20 - handle this it's gonna say okay if this
1808:21 - date is forgot password i'm just gonna
1808:23 - go to the forgot password screen okay
1808:27 - so then what we're gonna do is we're
1808:28 - gonna extract the user's email from this
1808:31 - event if there is an email in there it
1808:33 - means that the user was in the fargot
1808:37 - password screen and actually press the
1808:39 - button to send a forgot password email
1808:43 - to themselves okay so
1808:45 - if that's not the case then we know that
1808:47 - all the user did is just to go to that
1808:49 - screen so there is no email to handle so
1808:52 - let's just say final and if i can spell
1808:55 - oops
1808:56 - final email is event email and we say if
1808:59 - email is null then we just return
1809:01 - meaning that yeah the user it seems like
1809:03 - the user just wanted to go to the forgot
1809:05 - password screen okay
1809:09 - so that's that's that now
1809:11 - if that is not the case so let's just
1809:13 - put a comment in here user just wants to
1809:16 - go to forgot password
1809:18 - screen
1809:20 - and if we end up in here in line 21 for
1809:22 - me user wants to actually send a forgot
1809:27 - password email okay and in this case
1809:30 - let's just emit the exact same state as
1809:33 - we did before but in this case we're
1809:35 - saying loading okay remember
1809:37 - our main dart file is going to catch all
1809:40 - the states that have loading and
1809:41 - actually display our loading screen or
1809:43 - the loading um overlay okay so that's
1809:46 - that part
1809:48 - but then what we're gonna do is let's
1809:49 - just go in here
1809:51 - and we have to actually say in here do a
1809:53 - try catching here so we say cat on
1809:56 - exception
1809:57 - catch
1809:59 - like that
1810:01 - and since we're in our off block we have
1810:03 - access to our provider so let's say we
1810:05 - wait for the provider to send a password
1810:08 - reset to the email just like that okay
1810:12 - and then we have to enable two variables
1810:15 - in here we just say boolean did send
1810:19 - password or set bits and email
1810:23 - and just like that
1810:25 - and we also have an optional exception
1810:27 - like this so the goal is we have a try
1810:30 - and catch block in here and in the try
1810:32 - we just say yeah this email was sent
1810:34 - successfully
1810:36 - because yeah if you don't end up in the
1810:37 - catch block meaning that there's there
1810:39 - was no error
1810:40 - then the email was actually sent
1810:42 - successfully and we will also say the
1810:44 - exception is basically null so we don't
1810:47 - have to
1810:48 - worry about any of those uh
1810:50 - functionalities um
1810:52 - after this point but remember we are
1810:55 - basically saving these two variables in
1810:57 - here so that after the try and catch
1811:00 - block we can actually emit an aust state
1811:03 - for a password with those variables so
1811:06 - this thing is going to go in here in oh
1811:08 - the documentation it's going to go in
1811:10 - here
1811:11 - and this thing is going to go in here
1811:14 - okay and it's loading is going to be
1811:16 - false so that's why we're basically
1811:18 - storing them in here so in the positive
1811:20 - case in the happy path as we call it
1811:22 - we're going to say did send email is
1811:24 - true
1811:25 - and we're gonna say exception is no okay
1811:28 - and in this case that's an email it's
1811:30 - gonna be false and exception is gonna be
1811:33 - e all right so we store those
1811:36 - and let's just then copy this state from
1811:38 - above and let's just paste it in here
1811:42 - so in this case we say hey the exception
1811:44 - is the exception if any
1811:46 - um
1811:48 - invalid oh yeah it can't be constant if
1811:50 - it's a variable so um let me bring it
1811:52 - here again so you can see exception is
1811:54 - the exception like that
1811:57 - it has sent email is going to be it send
1812:00 - email
1812:01 - and um
1812:03 - is loading is false so that's it now we
1812:06 - are emitting that state to the
1812:08 - application
1812:11 - all right so
1812:12 - after all of this you see if and now
1812:15 - that we've handled that event and the
1812:17 - state in our offload we also have to
1812:18 - display some sort of a dialogue to the
1812:20 - user so if you're on the reset password
1812:23 - um screen and you enter you've entered
1812:25 - your email and you say hey send me a
1812:28 - reset um password email
1812:31 - after you've done that we're then going
1812:32 - to display a little dialogue to you and
1812:34 - say hey okay we did that we've sent any
1812:36 - error
1812:37 - an email to you go check your email so
1812:40 - we basically need a dialogue and if you
1812:41 - remember we have a generic dialogue
1812:43 - already so we're just going to reuse
1812:45 - that okay so let's go ahead as the
1812:47 - caption at the bottom of the screen in
1812:49 - the case go and create a file under lib
1812:51 - utilities dialogues called password
1812:53 - reset email sends dialog
1812:56 - so um let's let's go ahead and do that
1812:59 - under i'm gonna close this file as well
1813:02 - have a look at what we have in here and
1813:05 - we have utilities
1813:06 - excuse me dialogs
1813:09 - i'm going to create a new file in here
1813:10 - and just going to call it password
1813:12 - reset
1813:14 - and email send dialogue dot dart okay
1813:18 - and so that's the file and we're just
1813:20 - gonna say this is a future void um
1813:23 - show
1813:24 - password
1813:26 - uh reset sent dialogue all right so it's
1813:29 - a function that just needs a build
1813:31 - context
1813:33 - and we're going to get an error here
1813:34 - simply because um i believe
1813:37 - oh visual studio code imported build
1813:38 - context for me automatically that was
1813:40 - fantastic okay
1813:42 - so we're just gonna return show generic
1813:45 - dialogue okay and you can see this is
1813:48 - also gonna be auto imported we've
1813:49 - already had this function from before
1813:52 - so let me put a comma here and a
1813:54 - semicolon at the end just to get the um
1813:58 - dart formatter to format my code and i'm
1814:00 - just going to in here say this is a
1814:01 - generic void function okay
1814:04 - and for title we're just going to say
1814:05 - password reset like that with a capital
1814:08 - r and the content is also string we can
1814:11 - say we have now sent
1814:13 - you a password
1814:15 - a reset
1814:17 - link
1814:18 - so like this please check your
1814:20 - email for more information
1814:23 - something like that okay and you can
1814:24 - change the string if you want
1814:26 - and for the options it's an error
1814:28 - function that has to return a map and it
1814:31 - has only one button with the value of
1814:33 - null and that's it okay
1814:38 - all right so that's our show password
1814:40 - reset sends dialog um
1814:43 - now what we have to do we also have to
1814:44 - develop the actual view for password
1814:47 - reset so
1814:48 - as the caption at the bottom of the
1814:50 - screen indicates we're gonna go to lib
1814:52 - views
1814:53 - and we're gonna go here you see lib
1814:56 - views and under views we're gonna create
1814:58 - a view called forgot password view so
1815:00 - let me go ahead and do that forgot
1815:01 - password view dot dart okay
1815:05 - and i'm gonna go into my notes as well i
1815:08 - forgot the password view okay
1815:11 - but we're gonna create a stateful widget
1815:13 - in here so that's actually quite a bit
1815:15 - of code that we have to we have to write
1815:16 - but we're gonna take care of that so
1815:18 - it's not a problem so let's go to forgot
1815:20 - password view and the first thing i'm
1815:22 - going to do is to create a stateful
1815:24 - widget with stf in visual studio code
1815:26 - i'm just going to call forgot password
1815:28 - view just like that
1815:31 - and since we need a text field on the
1815:33 - screen and so that the user can enter
1815:36 - their uh email address just like we're
1815:38 - doing in the login view let's go ahead
1815:40 - and create a text editing controller but
1815:43 - before all of that we also have to
1815:44 - import materials so that we get rid of
1815:46 - all these errors that are on the screen
1815:47 - right now so let's go in here and just
1815:50 - create a text editing controller so late
1815:52 - final
1815:53 - text editing controller and let's just
1815:56 - call it controller
1815:57 - and you remember this pattern from
1815:59 - before so i don't have to explain it
1816:00 - again so we go into init state
1816:02 - inside in its state we create the
1816:04 - controller so we say it's a text editing
1816:05 - controller oops
1816:07 - text editing controller
1816:10 - and
1816:11 - in dispose we just dispose of it
1816:13 - basically so controller dot displays
1816:15 - okay so that's
1816:16 - just a boilerplate there's nothing
1816:18 - magical happening in here we're just
1816:20 - preparing that view okay
1816:23 - so what we need to do also in here we're
1816:25 - going to create inside this build
1816:27 - function we're going to return a block
1816:30 - listener because
1816:32 - based on the various states of auth
1816:34 - state forgot password so let's go to
1816:37 - auth state
1816:38 - or god password here based on various
1816:41 - states of this we may have to show or
1816:44 - hide different things for instance
1816:46 - if um
1816:48 - if we know that the has sent email
1816:51 - boolean flag is true then we're gonna
1816:54 - basically clear the text fields value
1816:56 - using the controller's clear function
1816:59 - and we're also going to display that
1817:02 - dialogue that we just wrote
1817:04 - has sent email
1817:06 - blah blah
1817:07 - dialogue
1817:09 - it was a long name
1817:10 - it was let's see in our dialogues
1817:14 - uh where is it in our dialogues if i can
1817:17 - find it it should be under utilities
1817:19 - dialogues and then we we should be
1817:21 - called a password recent email sends
1817:22 - dialogue okay
1817:24 - so we're going to display that
1817:26 - and that is why we need a listener so
1817:29 - inside this build in here what we're
1817:32 - going to do is just going to say we
1817:33 - return um a block listener and this
1817:36 - needs to be auto imported as you can see
1817:39 - and this block listener actually listens
1817:41 - for off block which also needs to be
1817:44 - auto imported so there's lots of imports
1817:46 - and if you don't have a good text editor
1817:48 - like visual studio code unfortunately
1817:50 - you'll have to import all these by hand
1817:52 - and that's just a huge time waste direct
1817:55 - oxy so
1817:56 - i don't usually give advice but um
1817:59 - my advice here at least because i think
1818:02 - it's so important is to get yourself a
1818:05 - good text editor because it makes
1818:06 - development a lot easier if you have
1818:09 - like visual studio code
1818:11 - so we have off block and then the second
1818:13 - and generic parameter is off state which
1818:16 - also needs to be auto imported so
1818:17 - there's if you look at the top of the
1818:18 - file there's quite a few um imports
1818:21 - already that i didn't have to do
1818:22 - manually and so we have a listener let's
1818:25 - get help from visual studio to complete
1818:27 - the listener and we also have a little
1818:30 - um let's see we have a child in our
1818:32 - block listener that we can return so in
1818:34 - here for now let's just say we return a
1818:36 - scaffold as a constant all right so
1818:39 - but we can now work on our listener
1818:41 - first
1818:43 - so inside the listener the only thing
1818:45 - we're the only state that we're
1818:47 - interested in because this is going to
1818:48 - return any off state to us as they
1818:50 - change we're only interested in
1818:53 - um if state if i can spell
1818:56 - is off state forgot password so that's
1818:59 - the only state we're interested in
1819:01 - and then we say if state has sent email
1819:04 - then we're going to control go to
1819:05 - controller and say clear
1819:08 - and then we're gonna await on and
1819:10 - displaying the dialogue so async and
1819:12 - then we're gonna say await
1819:16 - and i forgot the name of our huge file
1819:18 - in here again utilities dialogs and
1819:21 - password reset email so i'm going to
1819:22 - grab this the name of this function at
1819:24 - least okay
1819:26 - so i grab the name of that function
1819:27 - paste it in here and get visual studio
1819:29 - code to auto import it for me okay
1819:32 - and in here the only thing we have to do
1819:34 - is just to pass the context in there so
1819:36 - if the email was sent the password reset
1819:38 - was sent and we're going to say clear
1819:40 - the text on the screen on the controller
1819:42 - and then show the dialog telling the
1819:44 - user hey we sent an email to you
1819:46 - okay however if there's
1819:49 - um exception
1819:51 - like this
1819:53 - then what we're gonna do is to display
1819:55 - an error to the user so we're just gonna
1819:57 - say await
1819:58 - show error dialog
1820:01 - and i think that also got auto imported
1820:04 - again
1820:04 - you see
1820:06 - so then we're going to say error dialog
1820:07 - with that context and then we're going
1820:08 - to say we could not process
1820:13 - your request
1820:14 - please make sure that you are a
1820:17 - registered user or something like that
1820:22 - um and we can say
1820:25 - please make sure that you're a
1820:26 - registered user
1820:28 - or if not and
1820:30 - a user
1820:32 - um
1820:33 - or or if not register a user now by
1820:37 - going back one step okay
1820:41 - so this is just some text i mean you
1820:42 - don't have to write this text it's just
1820:43 - basically saying that if you're in the
1820:45 - forgot password
1820:46 - screen and you're saying that hey i
1820:47 - forgot my password it's my email if we
1820:49 - can't find that email if there's an
1820:51 - exception for instance
1820:52 - then
1820:53 - um we're gonna display this message and
1820:55 - say hey you may not be a registered user
1820:58 - do you want to go back and
1821:00 - register yourself
1821:02 - so
1821:03 - and remember in here you could be you
1821:05 - could try to be more fine-grained
1821:06 - because remember our exceptions in here
1821:08 - off state exception in the case of auth
1821:10 - state forgot password
1821:12 - if you go to our off block um
1821:15 - off block
1821:17 - in this case remember the exceptions
1821:19 - come from the send password reset so
1821:21 - this send password reset if you go to
1821:23 - our
1821:24 - firebase auth provider
1821:26 - send password reset oh my god where did
1821:28 - i end up um
1821:30 - no
1821:31 - firebase auth provider
1821:34 - in this case those exceptions could be
1821:36 - invalid email or user not found so you
1821:38 - could actually try to be clean and in
1821:41 - your auth sorry in your forgot password
1821:43 - view and actually check what kind of
1821:45 - exception that is so i actually think
1821:47 - it's it's better if you do that i'm not
1821:49 - going to do that in for the sake of just
1821:51 - saving some time but you may decide to
1821:53 - go ahead and do that and i encourage you
1821:55 - actually excuse me
1821:57 - to do something like that if you want to
1822:03 - so
1822:04 - what we need to do now um
1822:07 - is we've done the listener so that's
1822:09 - really good but in the child we actually
1822:11 - have to create um
1822:13 - we have to create a um proper scaffold
1822:16 - so
1822:18 - let's go ahead and remove the consonant
1822:20 - in here because at the end we're not
1822:21 - going to end up with a constant scaffold
1822:22 - it's very rare that you'd end up with a
1822:24 - constant scaffold
1822:26 - and in the app bar
1822:27 - i'm just going to say we have an app bar
1822:29 - in here
1822:30 - and it has a title and the title is just
1822:33 - going to be constant text and we're just
1822:36 - gonna say forgot password
1822:39 - okay
1822:41 - some commas in there to get the
1822:42 - formatting
1822:44 - correctly and in the body we're gonna
1822:46 - create a column
1822:49 - this is what i usually like to do create
1822:50 - a column and then i'm going to wrap it
1822:52 - in some padding like this and let's just
1822:54 - say padding of 16 as well okay
1822:58 - so
1823:00 - then
1823:01 - that's that's basically our
1823:03 - main focus in here so we need to work on
1823:05 - a little column in your forgot password
1823:08 - view
1823:10 - so now we have that as the first child
1823:12 - of the column we're going to add a
1823:14 - little const of text in here
1823:16 - and to tell the user actually what they
1823:18 - should do in this screen so let's just
1823:20 - say
1823:20 - and i'm going to grab the text that i
1823:22 - had prepared from before
1823:25 - and paste it in here so i don't have to
1823:27 - actually write this thing again so uh
1823:30 - let's see why is it complaining
1823:34 - what is the actual error um too many
1823:37 - positional arguments okay i've messed up
1823:39 - something in here
1823:40 - right of course because in the column i
1823:42 - added actually didn't say children
1823:44 - so let me remove this
1823:47 - children inside the children first i'm
1823:49 - going to put this text okay so if you
1823:52 - have the same problem like me it's
1823:53 - because you place the text right inside
1823:56 - the column and that's not okay we have
1823:57 - to put it inside children property of
1823:59 - the column okay
1824:01 - and we're going to create a text field
1824:03 - right after this where the user can
1824:04 - actually enter their email address so
1824:06 - let's say text um text field
1824:11 - and in here let's see yeah
1824:14 - but we don't have a comma at the end of
1824:15 - this either so i'm going to put a comma
1824:17 - in here okay text field so the screen
1824:19 - looks a little bit scary right now it's
1824:20 - just because it thinks that it has to be
1824:22 - a constant but it's not a constant so
1824:25 - these little warnings are gonna soon
1824:27 - disappear okay
1824:28 - so let's say keyboard type and it's a
1824:31 - text input type so i'm gonna say text
1824:33 - input type
1824:35 - email address okay
1824:38 - autocorrect on email fields always has
1824:41 - to be false okay you don't want
1824:43 - autocorrect on email fields it's very
1824:44 - annoying
1824:45 - and we autofocus as well so that when
1824:47 - the user ends up on that screen the
1824:49 - textville is automatically focused on
1824:53 - and then we put a controller and after
1824:55 - this the problem with the constants is
1824:56 - gonna go away
1824:58 - so that's fantastic um and then let's
1825:01 - just go and create a little decoration
1825:03 - with a hint so we just say const
1825:06 - input decoration
1825:08 - and we're going to say hint text is
1825:11 - your email address like this okay
1825:16 - so that's that part now we've created
1825:18 - the text field
1825:19 - after this we actually need to have a
1825:21 - text button we actually need two of them
1825:24 - so i'm going to say text button
1825:25 - [Music]
1825:27 - like this
1825:28 - and inside the text button on the first
1825:30 - one it's going to it's going to be the
1825:32 - actual cta call to action meaning that
1825:34 - when the users enter their email address
1825:36 - then they're going to press this button
1825:37 - and this upon pressing this button we're
1825:39 - going to send
1825:40 - the email to them okay so let's say i'm
1825:43 - pressed and this is an empty function
1825:46 - just like this for now and its child is
1825:48 - just going to be const of text
1825:50 - and we're gonna send send me password
1825:53 - reset link
1825:55 - like this
1825:57 - so that's the first i'm gonna copy this
1825:59 - text button actually and paste it again
1826:02 - right after that and in here we're just
1826:04 - gonna say
1826:05 - back to
1826:06 - login the login page and in here we
1826:09 - actually have this functionality from
1826:11 - before in our auth blog so let's just go
1826:14 - inside this and say context read or off
1826:17 - block from the context and then we're
1826:18 - gonna add an event in here and say off
1826:21 - event login so
1826:24 - actually sorry log out
1826:28 - so this is gonna send the user to the
1826:30 - login page okay so that's the second
1826:32 - button handle already
1826:34 - and in the first button let's just grab
1826:36 - the user's email so let's just say email
1826:39 - is controller
1826:41 - text
1826:42 - and
1826:43 - in here we're then going to tell the off
1826:45 - block that it has to send a password
1826:47 - reset to this email so we're just going
1826:48 - to say context dot read off block from
1826:51 - the context and we're going to add and
1826:53 - we're going to say off
1826:55 - event
1826:57 - forgot password
1827:00 - and the email is email just like that
1827:03 - all right
1827:06 - well that's it
1827:08 - actually in this case maybe
1827:10 - yeah it's cleaner not to have a comma in
1827:12 - there because if i put a comma then it
1827:14 - formats a code like this but without
1827:15 - having formats like this which to me in
1827:17 - my opinion is a little bit cleaner okay
1827:20 - so i think now we've implemented that so
1827:22 - this screen should be ready our forgot
1827:25 - password view
1827:27 - so as a caption now at the bottom of the
1827:28 - screen in the case we need to go and
1827:31 - look for the off state for god password
1827:33 - and return for god password view in main
1827:36 - dark file
1827:37 - so i'm gonna go to main dark file um
1827:40 - [Music]
1827:41 - so let's let me close this and close
1827:44 - this and let's go to main dart file and
1827:46 - we are handling already quite a lot of
1827:48 - states and right after here login view
1827:51 - excuse me
1827:52 - let's then say
1827:54 - else if state is off state for a god
1827:57 - password just like that
1827:59 - curly brackets
1828:01 - and in here then we're going to say
1828:03 - return
1828:04 - const forgot password view and this is
1828:07 - going to be also imported as well okay
1828:09 - so that's it
1828:12 - oh um
1828:14 - that's that's that part uh our forgot
1828:17 - password
1828:20 - and what we also need to do is to make
1828:22 - sure
1828:23 - inside our login view so let's go into
1828:26 - our login view now
1828:29 - we need to have a little button in here
1828:31 - that allows the user to go to the
1828:34 - foreground password view so we're gonna
1828:36 - add that in here so i'm just gonna
1828:38 - create another text button so copy the
1828:40 - text button that you have at the bottom
1828:42 - and paste it in between in here okay and
1828:45 - in this text right now we're just going
1828:46 - to say i forgot my password like this
1828:49 - and in here let's just send off event
1828:51 - for that password
1828:55 - okay
1828:55 - so now if i press the command s button
1828:58 - to hot reload you can see i forgot my
1829:00 - password displayed here and we press it
1829:02 - and at the moment actually nothing is
1829:04 - happening it's probably because we
1829:06 - changed our main dart file and we
1829:08 - haven't done hot reload so sorry hot
1829:11 - restart so i do a hot restart now and i
1829:13 - say i forgot my password you can see we
1829:15 - end up in this screen that we just
1829:16 - developed and then you have the avail
1829:18 - ability to send a
1829:21 - um reminder email and if you say back to
1829:24 - login page then logout is sent and you
1829:27 - end up in here okay
1829:29 - so that is working now
1829:31 - um
1829:32 - now what we need to do also in a login
1829:34 - view dart in here so let's go to login
1829:36 - view dart
1829:38 - and have a look at how we're handling
1829:40 - this user not found at the moment and we
1829:43 - have just user not found but if you
1829:45 - think about it there is going to be
1829:47 - people from both apple and google who
1829:50 - will test your application when you send
1829:52 - it to app store and
1829:54 - uh google play store so just saying user
1829:56 - not found is a little bit
1829:58 - it's i don't want to say it's wrong but
1830:00 - it's just not fully
1830:03 - encompassing what could what the problem
1830:06 - could actually be
1830:07 - so
1830:08 - saying user not found is like the bare
1830:10 - minimum of what we could convey to our
1830:12 - user so let's just make that better by
1830:14 - having a little bit better
1830:16 - text in here so i'm just going to write
1830:18 - this text that i had from before so we
1830:20 - it's better just to say cannot find a
1830:22 - user with the entered credentials okay
1830:24 - just a little bit better message
1830:28 - as now that we're we've basically done
1830:30 - the forgot password where we're going
1830:32 - into the cleanup state so we're adding
1830:34 - some final ui touches to our application
1830:36 - to make it look better so as the caption
1830:38 - indicates let's go into login view and
1830:40 - add a padding in here you see we just
1830:42 - have a column and it kind of looks like
1830:44 - edge to edge it's not so professional so
1830:47 - let's just add a padding in here i'm
1830:49 - just going to say wrap with padding
1830:51 - and we're just going to say padding of
1830:53 - 16 in here okay so it looks a little bit
1830:55 - nicer in my opinion at least looks
1830:57 - cleaner okay even if you're doing
1830:59 - website development you're
1831:00 - inherited um
1831:02 - for instance elements on the screen they
1831:05 - have like your user agent has some
1831:07 - padding already or margins built in to
1831:09 - inherited widgets it's our inherited
1831:11 - element so
1831:12 - um unless you go and change your css so
1831:15 - this is kind of us adding that um
1831:17 - padding in our elements in the flutter
1831:20 - application so
1831:22 - the next thing that we need to do in
1831:23 - here you can see in the login page at
1831:25 - the moment it's just on the top says
1831:26 - login and enter your email blah blah but
1831:29 - it doesn't actually give the user any
1831:30 - instructions you see here in the i
1831:32 - forgot my password we're giving the user
1831:33 - some instructions on what he or she has
1831:35 - to do but in the login page we're not so
1831:38 - let's go ahead and remedy that and just
1831:40 - add a text on top of the screen i'm
1831:42 - going to paste that text from what i had
1831:44 - before inside the children of this
1831:46 - column and we're just saying please log
1831:48 - into your account blah blah
1831:50 - and you'll see now that appear here just
1831:53 - makes it look a little bit nicer in my
1831:54 - opinion
1831:57 - and
1831:58 - we've already now fixed this and going
1832:01 - from the login view to our
1832:03 - forgot password we've already added that
1832:06 - in here as you can see so this element
1832:08 - at the bottom of the screen this caption
1832:09 - is already addressed we don't have to do
1832:10 - anything special about that
1832:13 - now let's go to
1832:15 - register view as you can see our
1832:17 - have you broken the register view not
1832:20 - registered yet i can see that that
1832:22 - button at the moment isn't working so
1832:24 - let's see what we've broken
1832:26 - event should register okay
1832:29 - and inside our off block
1832:32 - event should register i can see we
1832:34 - haven't even handled off event should
1832:36 - register so
1832:37 - that's
1832:38 - we need to definitely do that right now
1832:40 - so let's go to off block and
1832:44 - um
1832:45 - have a look at handling our um
1832:49 - i'm gonna remove this caption right now
1832:51 - because that's not what we're working on
1832:52 - right now so let's go to our off block
1832:55 - i'm going to maybe actually add that so
1832:58 - um
1833:00 - as a caption
1833:02 - so that it is clear
1833:04 - what we're working on right now okay so
1833:06 - let's go to our auth block and say on
1833:09 - this event
1833:12 - and let's just say event and emit
1833:14 - just like that
1833:16 - and what we're doing in here is to say
1833:19 - we're now emitting
1833:22 - constant off state registering
1833:25 - okay and there is no exception and there
1833:27 - is no loading so false just like that
1833:29 - okay and a comma here to get the
1833:31 - formatting working so now let's press
1833:34 - hot restart because remember you're
1833:35 - changing your auth block which is being
1833:37 - provided in your in to your entire
1833:39 - application in the main dart file so
1833:42 - main dart here
1833:44 - so you can see in here it's the
1833:47 - block provider that is basically
1833:49 - creating the off block so if you change
1833:51 - anything in your off block you may
1833:53 - actually have to do a hot restart okay
1833:54 - for those changes to take effect for app
1833:57 - for entire applications so not
1833:58 - registered yet pressing it goes to the
1834:00 - register view okay
1834:02 - so as the next point that we have to
1834:04 - handle here is to add some padding to
1834:06 - our register view
1834:08 - as you can see in here our register view
1834:10 - at the moment looks like this we have
1834:12 - the register button and already
1834:13 - registered button buttons right here but
1834:16 - we don't have any padding around our
1834:17 - register view so let's go ahead and take
1834:19 - care of that so i'm going to go to
1834:20 - register view here
1834:22 - and
1834:23 - let's go ahead then and wrap this column
1834:26 - that is
1834:27 - at the moment in here and just say wrap
1834:29 - it with padding as the caption at the
1834:31 - bottom of the screen says we're going to
1834:32 - add a padding of 16. so
1834:34 - you can see now we have some padding in
1834:36 - there and soon just like in the login
1834:39 - view we're going to add some text to the
1834:40 - top of the register view so what we need
1834:42 - to do is just to ensure that deleting
1834:44 - that their text inside this column is
1834:46 - actually pat it's and it's basically
1834:49 - sticking to the left side of the column
1834:50 - because by default all the components
1834:52 - that you place inside your column are
1834:54 - vertically aligned and no sorry they're
1834:57 - horizontally aligned in the main axis of
1835:00 - your
1835:01 - of your um
1835:03 - column so if you that's what i mean like
1835:06 - if the column what i mean is that the
1835:07 - column is expanding to the entire
1835:10 - space uh real state and then all the
1835:12 - components that you're placing inside
1835:14 - your column they're horizontally aligned
1835:16 - in inside the column so
1835:19 - that's actually a better way of probably
1835:20 - saying it so and what we need to do in
1835:22 - here let's just go and say uh inside the
1835:24 - column as you can see in the caption at
1835:26 - the bottom screen we're going to say
1835:27 - cross axis alignment
1835:29 - we're going to say cross axis alignment
1835:31 - start if i save this and go back to the
1835:33 - register viewer you're seeing this in
1835:35 - here basically like that and what we're
1835:37 - going to do then is to um
1835:40 - is to add a title to our column so i've
1835:43 - already added that before so let me
1835:46 - bring that up
1835:49 - so uh
1835:50 - i'm going to add a little title to the
1835:53 - first item inside the register view so
1835:55 - it looks like this but we also now that
1835:57 - we've done that i mean we want our text
1835:59 - field to be left aligned that's why we
1836:01 - added this cross access alignment but
1836:02 - we've kind of messed up the alignment of
1836:04 - our buttons in here so we need to kind
1836:06 - of wrap them inside centers so
1836:09 - what we could do is to inside you see we
1836:11 - have two elements in here but we don't
1836:14 - want to wrap both of them in their own
1836:16 - centers so what we could do is just to
1836:18 - say wrap um this
1836:20 - text button inside a column
1836:22 - then we put the other text button also
1836:24 - inside the column right here
1836:27 - and then we will wrap this column
1836:31 - inside a center so wrap this column then
1836:34 - inside a center just like that
1836:37 - so if you go back to our register view
1836:38 - now we have a nice little layout
1836:40 - displayed there
1836:43 - so we've taken care of that we've taken
1836:45 - care of the title of our application
1836:47 - and what we also need to do is to make
1836:49 - sure when we come to the register view
1836:51 - um
1836:52 - that we are auto focusing on our uh text
1836:56 - field in here
1836:58 - so let's go inside the effects if the
1837:00 - first text field and um
1837:03 - and right after auto correcting here
1837:05 - we're gonna say um
1837:07 - autofocus
1837:09 - true so when i press save in here and i
1837:11 - go to the register screen you can see
1837:13 - that the keyboard pops up automatically
1837:14 - auto focusing on the first email field
1837:17 - right there
1837:20 - okay now we also have a little problem
1837:23 - in here and that is
1837:25 - that we haven't
1837:27 - fixed our tests as you can see in here
1837:29 - implement send password reset and mock
1837:31 - auth provider
1837:33 - and throw i can see there's a spelling
1837:35 - error in the caption i'm going to fix
1837:37 - that right away um
1837:40 - like that
1837:42 - i apologize for that um
1837:44 - and that is here so let's go and fix our
1837:47 - test so i want you to please go to us
1837:50 - testing here and you'll see that we have
1837:52 - an error here telling us in mock auth
1837:54 - provider saying that we haven't
1837:56 - implemented the last function that we
1837:58 - just added to our off provider called
1838:00 - send password reset
1838:01 - so let's go in here and just ask it to
1838:04 - oops ask it to
1838:06 - create that missing override
1838:09 - and what we're going to do for this
1838:11 - exercise at the moment is just we're
1838:13 - gonna leave this as it is on implemented
1838:15 - error and i actually encourage you to go
1838:18 - and do an implementation for the send
1838:20 - password reset you may for instance do
1838:22 - some
1838:23 - mock and password reset do some future
1838:26 - uh delayed a weight on it and change
1838:28 - some states in your provider if you want
1838:30 - to you're more welcome to do that so you
1838:32 - could just take this as an exercise but
1838:34 - we're just going to leave it like this
1838:36 - for now but i highly encourage you to
1838:38 - actually write some tests for this as
1838:40 - well
1838:41 - so we've now done quite a lot of work
1838:43 - we've done quite a lot of reshuffling
1838:45 - things around what we could do is just
1838:47 - to have a look at the entire app and see
1838:49 - how it kind of looks like so i'm gonna
1838:51 - do a hot restart
1838:53 - and we end up in here you can see our
1838:55 - login screen works fine
1838:57 - and if we try to log in with a user that
1839:00 - doesn't exist in the application anymore
1839:03 - so i could just type any password and
1839:05 - say login and we get our updated screen
1839:07 - that says cannot find a user
1839:09 - then i can actually go and register that
1839:11 - user the text field is autofocus that we
1839:13 - fixed so foobar
1839:16 - who barbaz
1839:17 - register this user
1839:19 - and we can see that we get this verify
1839:21 - email we sent you an email verification
1839:23 - we also have to clean this view up soon
1839:26 - because i believe that this is not a
1839:29 - part of this a particular chapter at the
1839:31 - moment that we clean this up but we're
1839:33 - gonna we're gonna clean it up soon
1839:36 - um so the verification email should have
1839:39 - been sent now so if i go to my mail
1839:42 - application i'll just see if i can
1839:44 - somehow bring it up so
1839:46 - i can see
1839:48 - that
1839:50 - have i received any email from firebase
1839:54 - yes and that email is available here i
1839:56 - can bring it to the screen
1839:58 - as you can see there is a link on it so
1840:01 - i'm gonna tap this link and this will
1840:03 - then verify my user
1840:05 - if we then go to our
1840:08 - firebase so if i say console firebase if
1840:10 - we go to the console of our application
1840:12 - now we should see that user generated
1840:14 - here inside authentication
1840:17 - so that user is right here and is
1840:18 - verified user so we can just press the
1840:21 - restart button and log in with that user
1840:23 - so if i say
1840:25 - foo bar bas
1840:27 - log in and we see our dialog and there
1840:29 - are no notes so i'm just going to create
1840:30 - my first note in here
1840:33 - and it's sitting there thinking
1840:36 - and then i'm gonna say hello world all
1840:39 - right that's my first note gonna go out
1840:41 - let's go to the console again and to our
1840:44 - application and have a look at
1840:47 - our fire firestore database and make
1840:49 - sure that that note was actually created
1840:52 - and i can see that was actually created
1840:54 - here hello world with that user id nvic
1840:57 - if i go to authentication i can see nvic
1840:59 - is actually
1841:01 - and indeed that user so
1841:03 - it seems to be working we have quite a
1841:05 - bit of work still left we have worked
1841:07 - with the
1841:09 - with some margins we have worked with
1841:11 - icons app name etc before we can submit
1841:13 - it and these are things that we're going
1841:14 - to take care of in the coming chapters
1841:16 - but we've got we've come basically a
1841:18 - good bit forward
1841:19 - so we're almost there but not really
1841:21 - really there so
1841:23 - but no worries we're going to fix those
1841:24 - soon and let me do some screen
1841:27 - reshuffling in here and let's have a
1841:29 - look at the committing of our work which
1841:32 - is something that we usually do at the
1841:33 - end of every chapter so
1841:35 - i'm going to minimize scr cpy increase
1841:37 - the size of visual studio code so you
1841:39 - see my screen better let's go in here to
1841:42 - the terminal and have a look at this
1841:45 - shell in here and say git status
1841:49 - and and yes we have
1841:51 - a few files that are on track which are
1841:53 - new which is our forgot password view
1841:55 - which is new and password reset email
1841:57 - sent dialog which is new
1841:59 - and quite a lot of files that have been
1842:01 - updated in here so let's just say git
1842:04 - add all
1842:05 - and also git commit step 27 all right
1842:08 - hit status
1842:10 - and we have to push our changes also
1842:14 - so after we've done that let's also tag
1842:16 - as is tradition at the end of every
1842:18 - chapter we're going to tag this
1842:20 - and push our tags
1842:23 - and after doing that we can say git
1842:24 - status as you can see there's nothing to
1842:27 - commit in here and nothing to push
1842:29 - again as a tradition at the end of every
1842:31 - chapter we talk about what we need to
1842:33 - discuss in the coming chapter
1842:35 - so this is the exciting part at the
1842:36 - moment we've been working a lot with the
1842:38 - application code itself but we haven't
1842:40 - really done anything to make it ready
1842:43 - really for release the app store and the
1842:45 - play store google play store and there
1842:48 - are a lot of things that we have to do
1842:50 - such as screenshots we have to prepare
1842:52 - for
1842:52 - each respective store and we also have
1842:54 - to prepare the app icon the app name etc
1842:57 - so
1842:57 - lots of work to do and that's the kind
1842:59 - of thing that we're going to take care
1843:00 - of in the next chapter so i'll see you
1843:02 - there hello and welcome to chapter 45 of
1843:05 - the slatter course in previous chapters
1843:07 - we've been talking quite a bit about our
1843:09 - authentication and authentication block
1843:11 - and then in the previous chapter we made
1843:13 - our application a little bit more ready
1843:14 - for releasing in the app store and
1843:16 - google play store but we still have
1843:18 - quite a bit left and these are like some
1843:20 - of the final touches that we're gonna
1843:22 - put on our application before we can
1843:24 - release it in their respective app
1843:26 - stores
1843:27 - um so what we're gonna do specifically
1843:29 - in this chapter as you can see in the
1843:30 - caption at the bottom of the screen
1843:31 - we're gonna take care of our app icons
1843:33 - and the app name and i'm gonna take you
1843:34 - through the process which works very
1843:37 - well and has always worked for me so i'm
1843:40 - going to show you how to grab
1843:41 - free icons bring them into your
1843:43 - application and also be able to kind of
1843:46 - like automate that process you don't
1843:48 - have to generate the icons by hand
1843:51 - so to begin with we have to talk about
1843:53 - what app icons are so so far we've been
1843:55 - just kind of like running our
1843:57 - application and just looking at what is
1843:59 - inside the app itself we haven't really
1844:01 - have we haven't had the time to actually
1844:03 - look what's the application
1844:06 - how the application is represented from
1844:08 - the user's
1844:09 - perspective on the operating system so
1844:12 - if i bring up scr cpy in the middle of
1844:15 - the screen
1844:16 - and then i bring this application and
1844:18 - the um
1844:20 - all the apps up in this android phone
1844:21 - for instance this you can see is our
1844:23 - application right here so if i change
1844:26 - the screen and
1844:29 - a little bit here so you see better so
1844:30 - you can see our
1844:32 - notes application is right here and it
1844:34 - has a default icon so every application
1844:36 - on both android and ios and pretty much
1844:39 - in every operating system has its own
1844:40 - icon so flutter allows you or flutter
1844:44 - provides a default icon for all the
1844:46 - applications that you create with
1844:47 - flutter create so you have a default
1844:50 - icon that is displayed for your
1844:51 - application but
1844:52 - this is just a default flutter icon as
1844:54 - i'm mentioning so we need to have our
1844:56 - own icon that the operating system can
1844:59 - display to the user
1845:00 - in order to represent our application
1845:02 - amongst all the other applications that
1845:04 - are installed on that target operating
1845:06 - system
1845:08 - so that's for the icons and then what we
1845:10 - have to talk about is what splash
1845:12 - screens are so splash screen is this
1845:14 - little screen that the operating system
1845:16 - displays on the screen and as soon as
1845:19 - you open an application so i'm wondering
1845:22 - if there's any application for instance
1845:23 - here that i can
1845:24 - open up in order for us to see a splash
1845:27 - screen so let's for instance go here to
1845:28 - the clock application and as i saw here
1845:32 - let me just bring it up again so if i
1845:34 - kill the clock application
1845:37 - by going here and then i go to the clock
1845:40 - application again you can see that there
1845:41 - is a black screen just
1845:43 - displays instantaneously and then just
1845:45 - disappears that is the splash screen and
1845:47 - or in this case you could actually see
1845:49 - it's the lack of its flat screen because
1845:50 - there's no splash screen apparently for
1845:52 - the clock application and let's go to
1845:54 - calculator
1845:55 - and this application opens up so fast it
1845:57 - probably doesn't even have a splash
1845:58 - screen but what essentially his flash
1846:00 - screen is is a screen as its name
1846:02 - indicate that gets displayed to the user
1846:04 - just very fast while flutter is
1846:08 - loading its binary to display to the to
1846:11 - um the user so there are two stages for
1846:15 - flutter to actually show a splash screen
1846:17 - one is when the application binary is
1846:19 - being loaded by the operating system and
1846:21 - then there is another stage when the
1846:23 - flutter engine is being loaded to be
1846:26 - basically kicking off your applications
1846:28 - process basically but i'm not going to
1846:30 - go into too much details about that but
1846:32 - just know that splashbearing is a screen
1846:33 - that the operating system displays the
1846:34 - user while it's loading the application
1846:37 - so if for instance your application is
1846:39 - being loaded or is being displayed for
1846:42 - the first time on an android telephone
1846:44 - version that has very old hardware
1846:47 - because there are thousands and
1846:48 - thousands of android devices out there
1846:50 - then the operating system may actually
1846:51 - take a lot of time in order to load your
1846:54 - binary and that time it will and during
1846:57 - that time it will display a splash
1846:59 - screen so we're going to fix both the
1847:01 - app icon and a splash screen soon
1847:05 - so let's now talk about where you can
1847:06 - actually find some icons so if you're a
1847:08 - designer and if you're comfortable with
1847:10 - figma or sketch for instance then you
1847:11 - can go and design your own app icon
1847:13 - you're more welcome to do that i can i
1847:16 - feel free with figma i'm not a sketch
1847:19 - user but i can design my like icons in
1847:21 - figma but that's not what we're going to
1847:22 - do in this chapter we're actually going
1847:24 - to go to this website as i'm showing you
1847:26 - here stockio.com and grab some free
1847:28 - icons so
1847:30 - if i minimize scrcpy here and bring up a
1847:32 - safari window let's just say
1847:35 - stock io.com you can't see that right
1847:38 - now i'll bring it to the screen
1847:41 - like that and you can see you can hear
1847:43 - go to for instance icons and then
1847:45 - there's a search functionality where you
1847:47 - can search for the type of icons that
1847:49 - you're interested in these icons are not
1847:51 - really free sometimes they're actually
1847:54 - they need to be paid for however you can
1847:56 - also find um cheap or even free icons
1848:00 - that you can use in your application but
1848:02 - it's very important that you attribute
1848:04 - the author work the way they ask you to
1848:06 - do that and i'll talk about that soon
1848:09 - so for our application we're actually
1848:11 - going to grab this particular icon so
1848:14 - it's called stock io we're going to go
1848:15 - to free icon
1848:17 - in here
1848:18 - and say sticky
1848:20 - note file icon okay so that's the icon
1848:23 - we are going to use for our application
1848:25 - and and you can go ahead and do the same
1848:27 - thing i mean it's not that the app store
1848:29 - is gonna like google play store and apps
1848:32 - are not gonna set us like they're not
1848:33 - gonna stop you from releasing your
1848:35 - application just because your icon
1848:38 - is the same icon as someone else's app
1848:40 - so they're not gonna
1848:42 - basically check that really unless your
1848:44 - icon represents a very well-known app
1848:46 - for instance if you
1848:47 - add the facebook icon to your
1848:49 - application then the people who are
1848:50 - reviewing your application are going to
1848:51 - know that immediately and recognize it
1848:53 - and then they're going to flag it and
1848:54 - perhaps reject your application but this
1848:57 - is such a generic icon that i don't
1848:58 - think anybody is going to basically
1849:01 - have anything to say about it if someone
1849:04 - else has used this already in one of the
1849:06 - hundreds and thousands of applications
1849:08 - that are available in in those
1849:10 - respective stores so what we need to do
1849:12 - here go and say free download as an svg
1849:16 - so i just did that so let's go in here
1849:19 - and
1849:20 - have a look at that
1849:22 - excuse me
1849:24 - so i'm going to bring it up here and you
1849:25 - can see it's an svg and that's been
1849:28 - downloaded on my computer right now so
1849:31 - i'm gonna um
1849:32 - basically talk now a little bit about
1849:34 - attribution
1849:36 - so as you can see here in the
1849:38 - information that is provided here on the
1849:40 - screen i'm going to increase the size so
1849:42 - you see it better it says free for
1849:44 - personal and commercial use that's that
1849:46 - means even if your application is free
1849:48 - or paid for
1849:50 - in this in this flutter course we're
1849:52 - going to release our application as a
1849:53 - free application of course but if even
1849:54 - if it's for a commercial use you're
1849:56 - allowed to use this icon but it says
1849:58 - with attribution to stock io.com so
1850:02 - what we should do if we're a good
1850:04 - citizens of the internet land then when
1850:07 - you basically upload your application to
1850:09 - the app store and google play store as
1850:11 - i'll show you later we will actually
1850:13 - write a little sentence and attribute
1850:15 - the um stock io.com website and even
1850:19 - maybe say icon is provided by
1850:22 - stockion.com and even place the entire
1850:24 - url of that
1850:26 - icon um
1850:28 - inside our application description when
1850:30 - we submit it to the respective app store
1850:32 - so be very careful about this because
1850:34 - there are actually artists that are
1850:36 - creating these icons for you so
1850:39 - even if you
1850:40 - see that it's free you may be attempted
1850:42 - to just say yeah i forget about i'm just
1850:44 - gonna put it there i'm not gonna
1850:45 - attribute the author but if you think
1850:46 - about it it's just one line of text that
1850:49 - you're going to write in your
1850:50 - application description it's worth it
1850:51 - because someone has actually sat there
1850:54 - spent quite a lot of time designing this
1850:55 - icon so it's just
1850:57 - good
1850:57 - karma to make sure that we follow these
1851:00 - attributions apps that are provided in
1851:02 - the website where you download your
1851:03 - icons okay
1851:05 - so now we have this svg icon so if i
1851:08 - bring my finder here so we just have one
1851:10 - file in here but as you'll soon see when
1851:13 - we submit our application to app store
1851:14 - and play store google play store we have
1851:16 - to provide various icon sizes all right
1851:19 - so and
1851:20 - it's not that you have to provide the
1851:22 - various icon sizes to the app store but
1851:24 - when you build your application you
1851:26 - actually have to provide these different
1851:28 - icon sizes to the operating system for
1851:30 - instance if the user is loading your
1851:33 - application on a very old iphone without
1851:35 - a retina display which i highly doubt
1851:38 - now nowadays almost all ios devices have
1851:40 - a retina display
1851:42 - then that user with that phone that
1851:44 - phone particularly cannot display very
1851:47 - high resolution images so it needs to
1851:49 - grab a particular
1851:51 - app icon resolution however if you run
1851:53 - your
1851:54 - app for instance on an iphone
1851:56 - 13 pro max then that device can actually
1852:00 - display a high resolution image so
1852:02 - using this svg file we have to create
1852:05 - and slice it up so that we have various
1852:08 - icon sizes to provide for various
1852:10 - operating systems and device
1852:11 - configurations
1852:12 - so that's what we're going to do but
1852:14 - we're not going to do that by hand we're
1852:16 - going to use a tool in here called app
1852:18 - icon dot co so let's go in app icon dot
1852:21 - co
1852:22 - and this is a great free tool that you
1852:24 - can use and you can just basically
1852:28 - drag your svg file in this
1852:31 - target and it will generate your icons
1852:34 - for you so let's go ahead and do that
1852:36 - i'm going to drag this svg in here just
1852:39 - like this
1852:40 - all right and you can see that i can
1852:43 - generate the icons for the destinations
1852:46 - that i'm interested in our application
1852:47 - doesn't support watch os at the moment
1852:49 - and we're not a mac os application so at
1852:52 - the moment we're just saying iphone and
1852:53 - ipad and for android okay
1852:57 - so let's just generate these icons and
1852:59 - if i go in here i can see that there was
1853:01 - a zip file generated in here so let's
1853:03 - just unzip this file and have a look at
1853:05 - it and you see that there's a folder
1853:07 - called app icons so
1853:10 - it has android app store assets etc in
1853:13 - here okay
1853:16 - so now that we have these icons
1853:18 - generated here as a caption indicates we
1853:19 - have to add them to our application so
1853:21 - how do we do that do we go ahead and
1853:22 - like
1853:23 - add these by hand no but there is
1853:26 - actually better way of doing this so
1853:27 - i'll explain it to you right now
1853:30 - there is a package called flutter
1853:32 - launcher icons that can take care of
1853:35 - this for you so instead of you having to
1853:37 - place these icons manually inside your
1853:39 - application binary or inside your
1853:41 - application source code for instance
1853:42 - visual studio code or android studio it
1853:44 - can do that for you so let's go to pub
1853:47 - dev
1853:48 - i'm getting rid of this dialog here as
1853:50 - well and let's search for flutter
1853:53 - launcher icons okay
1853:56 - and we found it right here and you can
1853:58 - see that it is provided by the flutter
1853:59 - community right there and there is
1854:02 - information on how you should actually
1854:04 - configure this and we'll get there soon
1854:07 - so
1854:08 - uh
1854:09 - but what we first need to do
1854:12 - uh is to
1854:13 - bring this into
1854:15 - our application so this uh
1854:19 - plugin
1854:20 - so
1854:21 - let's go to installing in here and
1854:23 - you'll see here that it says
1854:26 - dart pub and with flutter we want to do
1854:28 - this basically father pub at flutter
1854:30 - launcher icons okay so let's go ahead in
1854:33 - our application so i'm going to bring
1854:35 - our application in here and
1854:37 - let's go to terminal so let me bring
1854:39 - this up a little bit
1854:40 - and let's just paste that command in
1854:42 - here um boof
1854:46 - all right so that is just going to add
1854:47 - flutter launcher icons to our
1854:49 - application
1854:52 - and so that's the adding of it so if you
1854:54 - go to pop spec yaml now and have a look
1854:57 - at our yaml file you can see that
1854:58 - there's this flutter launcher icons
1855:00 - added right here okay then what we need
1855:02 - to do is to create some sort of a
1855:03 - configuration file for this plugin and
1855:05 - to understand how it should generate our
1855:08 - icons for us you can see if we go back
1855:10 - in here
1855:11 - you can see that there's some
1855:12 - information about that if you read the
1855:14 - readme file it actually asks you
1855:16 - actually to generate a file called
1855:18 - flutter launcher icons yaml and that's
1855:20 - exactly what we're going to do in here
1855:22 - so let's go to the root folder of our
1855:24 - application so if i
1855:26 - collapse every
1855:27 - folder in here so make sure that you're
1855:29 - in the root folder of your application
1855:31 - and then i'm just gonna say new file
1855:35 - and let's just add flutter launcher
1855:37 - icons okay
1855:38 - and in here they basically say add this
1855:41 - assets icon etc etc so
1855:44 - let me just bring this
1855:47 - here copy this information as it is
1855:50 - stated there and place it there but we
1855:52 - also have to add a new um
1855:55 - and basically key in here called remove
1855:58 - alpha ios and we have to set this to
1856:01 - true and this is a key that i don't know
1856:04 - if it's actually documented so let's
1856:06 - have a look at the documentation in here
1856:09 - let's see version scores change log
1856:11 - installing
1856:13 - it's not really documented unfortunately
1856:16 - but there may be inside the git
1856:18 - repository for this application like
1856:20 - there may be some good documentation to
1856:22 - be honest with you change log
1856:24 - examples um
1856:26 - flavors could there be anything in there
1856:29 - production
1856:30 - no unfortunately but i will just explain
1856:33 - what this key basically does what it
1856:35 - does is an ios
1856:37 - as an operating system it doesn't allow
1856:39 - alpha channel transparency channel on
1856:42 - its icons on its app icons so
1856:45 - what you need to do is to get rid of
1856:46 - that so when we generate our icons we're
1856:49 - going to tell this plugin that hey when
1856:50 - you're generating the ios icons remove
1856:53 - the alpha channel and for you designers
1856:55 - out there you already know what alpha
1856:56 - channel is okay
1856:58 - so it's just a transparency layer
1857:01 - all right so what we need to do now is
1857:02 - to grab our icon the downloaded icon and
1857:05 - place it inside assets icon icon.png
1857:09 - okay so as you can see in here let's see
1857:11 - if you have an assets folder and we
1857:13 - don't so let's go ahead and say new file
1857:16 - oops a new folder
1857:18 - and i'm going to say assets
1857:20 - and then we're gonna call it icon okay
1857:23 - just like that
1857:24 - and let's go then and bring that app
1857:27 - store png file that is right here and
1857:30 - just place it inside the folder that we
1857:32 - just created so it's a huge file okay
1857:34 - and that's okay
1857:35 - so now that we've done that and you'll
1857:37 - be wondering okay where why is it under
1857:39 - assets icon and that's because in this
1857:42 - launcher configuration we said that that
1857:44 - icon should be there you see icon png so
1857:47 - what we need to do now is just to rename
1857:49 - this file to icon.png
1857:52 - just to make sure that this
1857:55 - package can find it under assets icon
1857:57 - icon ph png as it's specified here okay
1858:02 - so in order to then generate your icons
1858:04 - you just have to run this for
1858:06 - this command right here so i'm gonna i'm
1858:08 - gonna go to terminal
1858:10 - let's see uh terminal is actually right
1858:12 - here it's ginormous
1858:14 - um let's go here terminals and i'm then
1858:17 - going to clean the terminal get rid of
1858:19 - the left hand side bar i'm going to say
1858:22 - flutter pump run flutter launcher icons
1858:25 - and main just like that
1858:30 - that is going to basically do its job
1858:31 - have a look at um the configuration and
1858:34 - then it's going to generate our icons
1858:36 - for us
1858:38 - so in order to test this we actually
1858:40 - need to make a clean build and this is a
1858:42 - little bit of a pain in the neck and
1858:44 - that's completely okay it's just because
1858:45 - we change something dramatic in our
1858:47 - application and then we need to just
1858:49 - make sure that we stop the running of
1858:51 - our application so i can see now this
1858:52 - particular application at the moment
1858:54 - isn't running in scrcpy so that's really
1858:56 - good
1858:57 - as you can note here this is the icon of
1859:00 - our application right now without us
1859:02 - having launched it again
1859:03 - so let's just do as the caption
1859:06 - indicates we're gonna do flutter clean
1859:11 - and after cleaning is done we're just
1859:13 - going to say flutter
1859:14 - pop get in order to grab all our
1859:17 - dependencies again
1859:19 - and i can see that you can't actually
1859:21 - see what i typed there but that's what i
1859:23 - typed flutter pup get as you can see
1859:26 - here
1859:27 - and it grabbed all the dependencies
1859:28 - again and what i'm going to do is just
1859:30 - going to go to main dart file in here
1859:33 - and
1859:34 - just run the application but before
1859:37 - doing that i'm just going to also make
1859:38 - sure that flutter select device has
1859:40 - selected the correct device which is my
1859:42 - android app and which is my android
1859:44 - phone and just gonna say run without
1859:46 - debugging
1859:48 - it could actually help if you removed
1859:50 - your application as well
1859:52 - so just to make sure that that
1859:54 - application is completely deleted from
1859:56 - the phone so it's completely gone now
1859:59 - and really all we have to do is just
1860:01 - right now wait for this gradle task to
1860:04 - complete its work so i'm just gonna let
1860:06 - it do its work and um
1860:09 - let's just wait for it
1860:11 - all right
1860:12 - now you can see that our application is
1860:14 - running on uh scr cpy which is an actual
1860:17 - real phone in here so if i now go back
1860:20 - here and bring up all the apps installed
1860:22 - on this device you can see we have this
1860:24 - application running right there my notes
1860:27 - and it has this little icon here and
1860:29 - this is another application that i've
1860:31 - had from before so i can just uninstall
1860:32 - that safely and we just go to our
1860:35 - application in here you can see it is as
1860:37 - we left it last time but the important
1860:39 - thing is that there is a new icon
1860:42 - basically provided here
1860:44 - so
1860:45 - that's really good now we've tested that
1860:47 - on android so the testing of android is
1860:49 - actually done so you don't need this
1860:51 - caption at the bottom of the screen i
1860:52 - should have brought up brought it up a
1860:53 - little bit earlier and what we need to
1860:55 - do is just to run our application on ios
1860:57 - as well so i'm going to stop the the
1861:00 - execution of the application on android
1861:02 - and i'm just going to say flutter select
1861:04 - device and iphone 13 pro which is a
1861:07 - simulator and then i'm just gonna say
1861:09 - run and this is also gonna perhaps take
1861:12 - some time because usually i run my
1861:14 - applications on the android telephone as
1861:17 - you've seen with scrcpy i usually don't
1861:19 - run with an ios simulator or a device
1861:22 - when i'm developing with flutter
1861:25 - and but it is always good practice to do
1861:28 - that so now it's doing the xcode build
1861:30 - and let's just wait for it to finish
1861:34 - okay and now we can see that our
1861:36 - application is also running on ios so
1861:38 - what we can do in here is just to send
1861:40 - the app to the background and then you
1861:42 - can see that we have our my notes
1861:45 - application right here and the icon that
1861:48 - we basically created for our app so that
1861:50 - seems to be working as well
1861:53 - what we need to talk about now is our
1861:55 - app name and as you can see in the
1861:57 - caption at the bottom of the screen
1861:58 - since we need to update the app name
1861:59 - it's not so nice as it is now and right
1862:02 - now it's just saying my notes with a
1862:04 - lowercase and and capital m and all in
1862:07 - one word so it's not as it should be so
1862:10 - let's go ahead and fix this and the way
1862:11 - to do that is that you have to do it in
1862:13 - two places one for ios and one for
1862:15 - android so we're going to take care of
1862:16 - ios first so in visual studio code i'm
1862:19 - going to jump into a file called info
1862:21 - key list and this is the info p list is
1862:23 - like basically an ios applications and
1862:26 - kind of configuration place which you
1862:28 - can configure a few things for
1862:30 - application like permissions etc and if
1862:33 - you go to this uh file ios runner slash
1862:36 - info p list so let's go in there and
1862:38 - then there is a key in here called core
1862:40 - foundation bundle name so
1862:42 - let's see if you can find a bundle name
1862:45 - cf bundle name at the moment it says my
1862:47 - notes in here so we need to fix this
1862:49 - just to call it basically my notes like
1862:53 - this
1862:54 - okay
1862:55 - and let's see if there's any other place
1862:57 - in here we can also see that there is a
1862:58 - bundle display name which we may also
1863:01 - have to fix so let's just call it my
1863:05 - this
1863:06 - and to be honest with you we don't maybe
1863:08 - actually have to change the bundle name
1863:10 - i would say maybe changing the bundle
1863:12 - name is not so good so
1863:14 - let's not do the bundle name actually
1863:16 - i'm going to change the caption and just
1863:18 - call it changing the bundle display name
1863:21 - because i would say a bundle name and
1863:23 - bundle display name are two completely
1863:25 - different things the bundle name is like
1863:26 - the binary name of the application and
1863:28 - the bundled display name is what the
1863:29 - user sees on the screen so let's not do
1863:32 - the bundle name and let's just change
1863:34 - the bundle display name in here and just
1863:36 - call it my notes okay
1863:38 - so after doing that we could try to
1863:41 - stop the application in here and then
1863:43 - run it again
1863:44 - um
1863:45 - it may take effect it depends kind of on
1863:49 - how flutter is gonna trigger these
1863:51 - changes with xcode build and how xcode
1863:55 - build is going to interpret our changes
1863:57 - sometimes
1863:58 - it might actually be necessary for you
1864:00 - to do another clean
1864:02 - and then run the application again on
1864:04 - that target platform so that's just a
1864:06 - bit unfortunate when you change like
1864:08 - huge changes when you make you changes
1864:11 - to the applications structure
1864:13 - and i could see now that my notes was
1864:15 - actually taking the fed effect right now
1864:17 - so we don't have to do any flutter clean
1864:19 - so that's really good
1864:21 - then what we need to do also is to
1864:24 - update the app name on android and we do
1864:26 - that by going to android app src main
1864:29 - and we could just do that right now so
1864:32 - let's go to android manifest xml
1864:35 - and you can see here is android app src
1864:38 - main i'm going to go in there and then
1864:40 - i'm going to find this
1864:41 - key in here android label and just
1864:43 - change it to my notes all right
1864:45 - so let's just do that and then i'm going
1864:48 - to go here just to a flutter select
1864:50 - device run it on my android phone then
1864:52 - i'm just going to stop the ios execution
1864:55 - and just go to run run without debugging
1864:57 - so that you can try to run the
1865:00 - application on this android phone so if
1865:03 - everything works as expected then we
1865:06 - should have our mynotes application
1865:08 - right here with the correct uh
1865:11 - icon and then we should also have the
1865:13 - correct label alright so let's just send
1865:16 - this to the background
1865:17 - let's go in here and have a look at our
1865:19 - application you can see now it says my
1865:20 - notes the right icon and also um yeah
1865:24 - the application is running as it should
1865:26 - and if you go back to our ios
1865:28 - application then we can see the name is
1865:30 - also correct and the right icon
1865:33 - so we could actually say that we've
1865:36 - already tested things on ios they seem
1865:38 - to be working so if i bring up the
1865:39 - simulator the app is working as it
1865:41 - should
1865:41 - and
1865:42 - we don't have any crashes the icon is
1865:44 - correct and the label is correct and on
1865:47 - android if we bring up scrcpy again you
1865:50 - can see that the
1865:52 - icon is correct and also the name of the
1865:54 - application is correct
1865:57 - so
1865:58 - we've done what we said that we're going
1865:59 - to do in this chapter we talked about
1866:01 - icons and we also talked about what
1866:03 - splash screens are in preparation for
1866:06 - the next chapter and it's usually the um
1866:08 - what we do in the and at the end of
1866:10 - every chapter we talk about what we need
1866:11 - to discuss in the chapter that's coming
1866:14 - so what we need to do in the chapter
1866:15 - that is coming is to prepare ourselves
1866:18 - for creating splash screens you now know
1866:21 - what splash screens are but in the next
1866:23 - chapter we're gonna go and create them
1866:25 - and
1866:26 - we're gonna add them to our application
1866:29 - so grab some refreshments if you want to
1866:31 - do
1866:32 - and
1866:33 - i'll see you in the next chapter hello
1866:34 - and welcome to chapter 46 of the
1866:36 - slaughter course um if you follow the
1866:39 - chapters up to this point
1866:40 - chronologically you'll know that we've
1866:42 - done a lot of preparation and we're
1866:44 - actually about to start preparing our
1866:46 - app to be submitted to the app store and
1866:49 - google play store but before doing that
1866:51 - now that we fixed our icons and
1866:53 - our application name for both android
1866:56 - and ios we need to fix something called
1866:58 - a splash screen so
1867:00 - and we talked briefly about splash
1867:02 - screens and what they actually mean in
1867:04 - the mobile world for instance in both
1867:06 - android os and ios and ipad os for that
1867:09 - matter but for those of you who missed
1867:11 - the previous chapter
1867:13 - a splash screen is a screen that is
1867:15 - displayed to the user when they open
1867:17 - your application from a cold
1867:19 - boots basically meaning that your
1867:21 - application hasn't been running for
1867:22 - instance in the background in that
1867:24 - operating system and while the
1867:26 - application binary is being loaded to
1867:28 - the screen and the experience is being
1867:30 - loaded to the screen
1867:31 - um then the host operating system in
1867:34 - this case android and ios will have to
1867:36 - display something to the user while
1867:38 - they're waiting for the experience to be
1867:40 - loaded
1867:41 - so in native applications for instance
1867:43 - if you're creating a native
1867:45 - application with um
1867:47 - coupling for ios sorry kotlin for
1867:50 - android and swift or swift ui for ios
1867:52 - then um in that case there is there is
1867:55 - only one stage of loading for
1867:57 - application in that
1867:58 - you submit your binary to apple and then
1868:01 - or
1868:01 - um to google play store and then the
1868:04 - host operating system just loads your
1868:06 - binary and then that um your main user
1868:09 - interface is displayed to the user so
1868:10 - it's just one stage
1868:12 - in flutter however there are two stages
1868:14 - of loading your application one is
1868:17 - the your application binary in itself
1868:19 - being loaded and the second stage is for
1868:22 - the flutter experience to actually be
1868:24 - loaded inside your application since
1868:25 - flutter is its own sdk basically
1868:28 - so what we're going to do is we're going
1868:30 - to create a splash screen that gets
1868:31 - displayed to the user while our
1868:32 - application binary is being presented to
1868:34 - the user
1868:36 - so let's have a little look at a the
1868:39 - official documentation for splash
1868:41 - screens
1868:42 - and i'm going to bring the
1868:44 - screen up here and increase the size
1868:46 - perhaps a little bit so like this
1868:51 - so you see here
1868:52 - as it is explaining here first and you
1868:55 - have your
1868:56 - android for instance operating system in
1868:58 - here and you tap on your application
1869:00 - icon and then it goes through a series
1869:02 - of steps in order to land on your
1869:04 - application's um
1869:06 - main interface and here there's a great
1869:08 - documentation basically for splash
1869:10 - screens which i recommend everybody
1869:13 - who wants to submit their application to
1869:14 - ios app store and google play so to read
1869:17 - this thoroughly because there's great
1869:19 - pieces of information here even if you
1869:21 - are just following for instance my
1869:23 - advice in this chapter but it is still a
1869:25 - good practice
1869:27 - to go ahead and read about this
1869:32 - so um
1869:33 - before we actually go and start
1869:36 - designing our splash screen
1869:39 - i also have to mention something that
1869:41 - [Applause]
1869:43 - this chapter is quite i mean you need in
1869:45 - order for you to be able to go through
1869:46 - the chapter you will unfortunately need
1869:48 - to have a macintosh so because we're
1869:50 - actually going to play a little bit with
1869:52 - our
1869:53 - um ios splash screen and for that you
1869:55 - need to have xcode but i'll talk soon
1869:56 - about that as you'll see
1869:59 - so how do we go about creating a splash
1870:03 - screen so
1870:04 - i mean there are so many different ways
1870:06 - of doing this and
1870:08 - if if you're a developer from before you
1870:10 - probably are not so comfortable you're
1870:12 - not this kind of like a unicorn
1870:13 - developer you might not be
1870:15 - a so-called unicorn developer as a
1870:17 - developer who's also comfortable with
1870:19 - designing
1870:21 - or you might you might only be a
1870:22 - designer and you've started this course
1870:24 - and you've come to this point so you may
1870:26 - actually be comfortable with a tool like
1870:28 - figma
1870:30 - so um
1870:32 - depending on your background you may or
1870:34 - may not be comfortable with designing so
1870:37 - i've basically taken the liberty of
1870:39 - using a design tool a free design tool
1870:41 - called figma
1870:43 - and for this chapter which you can
1870:44 - access freely with for instance a google
1870:46 - account or an apple
1870:48 - apple id
1870:49 - or you could just create a normal free
1870:51 - account on figma.com
1870:55 - but i don't make the assumption that you
1870:57 - know anything about designing and for
1870:59 - that what we're going to do is we're
1871:01 - going to create a very very very simple
1871:04 - splash screen in figma
1871:06 - assuming that the person is watching
1871:07 - this course has no information about
1871:10 - figma or designing previously okay
1871:16 - so
1871:17 - let's have a look um
1871:20 - now that we talked about figma let's
1871:22 - have a look
1871:24 - at storyboard on ios
1871:27 - so um what we can do in here is to bring
1871:30 - our application to the screen so i'll
1871:33 - bring up our
1871:34 - app in here increase the size a little
1871:36 - bit so you see it better
1871:39 - and what we can do is to bring up
1871:41 - terminal in here so get rid of a little
1871:43 - bit of distraction in here so
1871:45 - let's see
1871:47 - so if you say good status we have a lot
1871:50 - of stuff that we've done but we haven't
1871:53 - committed them so that's fine let those
1871:55 - be there we're going to commit them soon
1871:57 - okay
1871:58 - so in your application what i need you
1872:00 - to do is to
1872:03 - have a look at
1872:05 - your ios application so there is
1872:09 - something in the ios application
1872:11 - generated by the flutter
1872:13 - template when we created our our
1872:15 - template from the absolute beginning of
1872:17 - this course
1872:18 - and there is a file a specific file
1872:21 - called a launch i believe it's called
1872:23 - launch screen dot storyboard if you're
1872:26 - not comfortable with ios development
1872:28 - like native ios development from before
1872:30 - i can just explain you that a storyboard
1872:32 - file is
1872:34 - a file that apple designated for um
1872:38 - developers to be able to visually design
1872:40 - their application and then write the
1872:41 - code for it later and apple's decided
1872:44 - that for specifically the launch screen
1872:46 - for instance that gets displayed to the
1872:47 - user there should be a a dedicated um
1872:52 - storyboard file for that so
1872:54 - we're gonna go ahead and launch xcode
1872:59 - on this macintosh in order to manipulate
1873:02 - that storyboard file but before we do
1873:05 - that i'm just going to go ahead and open
1873:08 - the root folder of our application
1873:11 - then i'm going to go and let me also
1873:13 - change the screen layout a little bit so
1873:15 - you see
1873:16 - things better
1873:18 - then inside this ios folder so in the
1873:21 - root folder of your application go to
1873:22 - ios and then you can see two files in
1873:24 - here runner xcode proj and runner xc
1873:27 - workspace and dependent on your settings
1873:30 - on your macintosh you may or may not be
1873:32 - able to see
1873:33 - the
1873:34 - extensions of these files i i've i've
1873:37 - done so in my macintosh that i can
1873:39 - always see
1873:41 - file extensions because it's important
1873:43 - for me so if you're not seeing the
1873:44 - extensions you just have to trust on the
1873:46 - icon so one of these files has this
1873:49 - bluish icon which says project here and
1873:52 - the other one is a workspace i need you
1873:54 - to basically double click
1873:56 - on this workspace in order to open it
1873:59 - okay
1874:00 - so let's go ahead and open this
1874:02 - workspace inside xcode
1874:05 - and let's then go have a look at this
1874:08 - launch screen inside this runner folder
1874:12 - so
1874:12 - if i collapse everything inside you will
1874:15 - see that you have your runner and which
1874:17 - is the flutter templates created
1874:19 - workspace
1874:21 - inside there we have another runner and
1874:24 - in that runner folder then you'll have
1874:26 - this launch screen
1874:28 - so
1874:29 - we can then have a look at this launch
1874:31 - screen and see how it is created
1874:34 - and you can literally
1874:36 - click in here
1874:37 - in order to expand the contents of this
1874:40 - view controller to have a look at the
1874:41 - internals of this launch screen and a
1874:43 - good trick is if you want to expand you
1874:46 - can see here you have to expand this and
1874:48 - then you have to expand this and expand
1874:49 - this
1874:50 - if you don't want to expand one step at
1874:53 - a time you can always hold down the
1874:54 - option key or the alt key and then click
1874:57 - on this little arrow and that expands
1874:59 - the entire chain for you and if you want
1875:01 - to collapse the entire chain you can
1875:03 - press down alt and then click and then
1875:05 - collapses the entire change so
1875:08 - let's let's expand the entire chain and
1875:10 - then in here you'll see that there is a
1875:12 - view and then a launch image image view
1875:16 - which at the moment is pointing to a
1875:17 - file called launch image which doesn't
1875:20 - exist because if you go to our assets in
1875:22 - here you'll see that launch image is
1875:23 - just empty at the moment okay so there
1875:25 - is no launch image meaning there is no
1875:28 - splash screen okay
1875:30 - so
1875:31 - we're gonna manipulate this file a
1875:33 - little bit as you'll soon see so let me
1875:35 - just
1875:36 - keep xcode running okay
1875:41 - so that was the basics of that launch
1875:42 - screen storyboard and
1875:46 - as you see at the caption on on the
1875:48 - caption at the bottom of the screen this
1875:50 - is an unfortunate unfortunate thing that
1875:53 - um
1875:54 - that apple
1875:55 - isn't as open in my eyes at least as
1875:58 - many other companies like microsoft and
1876:00 - google
1876:01 - in that if you want to for instance do
1876:04 - native ios development and have xcode in
1876:06 - order to open your project and run your
1876:09 - project for instance then you'll have to
1876:11 - have a macintosh because xcode isn't
1876:13 - available on other platforms and it's
1876:16 - very unfortunate i mean
1876:18 - it's it's nothing to really be proud of
1876:21 - i would say i'm a native ios developer
1876:24 - and i'm actually ashamed of the fact
1876:25 - that xcode the tool that i use on a
1876:27 - daily basis is only available on a
1876:29 - macintosh because i might personally for
1876:31 - instance
1876:32 - like to write my code ios code on ubuntu
1876:35 - or fedora
1876:37 - or some of you may actually prefer
1876:38 - windows but let's not go there let's
1876:40 - just say that you'll unfortunately need
1876:42 - macintosh in order to be able to
1876:43 - manipulate that
1876:45 - um launch screen as storyboard file and
1876:48 - for those of you who don't have a
1876:50 - macintosh you'll need to contact perhaps
1876:53 - somebody in your network who does have
1876:55 - access to a macintosh and ask them to
1876:58 - manipulate the storyboard file for you
1877:01 - and add your icons as you'll soon see
1877:03 - how and then send that storyboard file
1877:06 - back to you
1877:07 - so
1877:08 - that's an
1877:10 - unfortunate problem
1877:14 - um
1877:15 - so what we need to do is to actually get
1877:17 - to the
1877:19 - roots of what we need to work on in this
1877:22 - chapter and that is creating a splash
1877:24 - screen okay so as i mentioned in the
1877:26 - beginning of this chapter i'm gonna rely
1877:28 - on a free tool called figma
1877:31 - so let's go ahead let me see if i can do
1877:34 - some re
1877:35 - reshuffling on this screen
1877:39 - and close a tab in here i'm gonna bring
1877:42 - up my browser
1877:44 - gonna minimize our application and bring
1877:48 - up my browser right here so i need you
1877:51 - to please visit a website called
1877:52 - figma.com
1877:55 - and in figma.com then you will have the
1877:58 - ability to create your design files all
1878:02 - right
1878:03 - so i'm not gonna show you actually how
1878:05 - to register for figma because that is
1878:06 - very easy so you can just perhaps if i
1878:10 - for instance go to and bring up a
1878:12 - completely new
1878:13 - tab in here and say figma.com where i'm
1878:16 - not logged in you can just say sign up
1878:18 - and as you'll soon see here you can
1878:21 - continue with google or use an email
1878:23 - address of your choice in order to sign
1878:26 - up
1878:27 - for figma and as i mentioned figma is
1878:30 - free until to a certain point
1878:32 - and you can you can for instance um
1878:36 - work with your uh
1878:38 - normal design files in figma without
1878:40 - having to think about actually
1878:43 - paying for a subscription but if you
1878:45 - want to do advanced work for instance if
1878:47 - you want to do a lot of sharing of your
1878:48 - work with other team members etc then
1878:51 - you will need to
1878:53 - pay for figma
1878:54 - so
1878:55 - after you've registered your account in
1878:57 - figma what i need you to do please is
1878:59 - just to go and click on new design file
1879:02 - okay so i'm going to increase the size
1879:04 - in here and just say new design file
1879:08 - all right so it's created a new design
1879:11 - file here for us and as you'll see as
1879:14 - you'll see in the bottom of the screen
1879:16 - in here um i wonder if i actually have
1879:19 - to bring my face to the right because
1879:21 - i'm blocked by that
1879:23 - so i hadn't noticed that so um
1879:27 - so what you'll need to do is to create a
1879:29 - container here on figma
1879:32 - maybe this is a better screen um
1879:35 - yeah set up maybe this is better okay so
1879:38 - what we need to do in here is to create
1879:40 - a container that is at
1879:42 - 1284 by
1879:44 - 2778 and i didn't i didn't like make up
1879:48 - this number
1879:49 - this is the size of a screen for an
1879:52 - iphone 13 pro max so
1879:56 - if you're not a designer you may not
1879:57 - notice but when you're designing things
1879:59 - you always have to create like your
1880:00 - design so that it it scales to various
1880:03 - sizes this was not a problem back in
1880:05 - 2007 or 2008 when we only had one iphone
1880:08 - and just a handful of android devices
1880:10 - but nowadays you have to kind of like
1880:11 - create a template in for instance figma
1880:14 - and then ensure that it is scalable for
1880:16 - different sizes but we're not going to
1880:18 - focus on that right now all we're going
1880:20 - to do is just to create one
1880:23 - splash screen and then inside our ios
1880:26 - app and android app we're just going to
1880:28 - make sure that it scales okay so let's
1880:30 - just target one device at the moment and
1880:32 - in here i need you to go in here and
1880:35 - actually here sorry about that and
1880:36 - create a rectangle
1880:39 - after creating a rectangle we're going
1880:40 - to go in here and set the width to what
1880:42 - i've
1880:43 - specified down there 18284
1880:46 - i can see my keyboard and the height is
1880:48 - going to be 2778
1880:51 - okay so it's a huge rectangle
1880:54 - as you can see here okay so
1880:57 - that's our rectangle and what we need to
1880:59 - do is to kind of give this a background
1881:02 - color now as you've seen so far and if
1881:05 - you follow the chapters chronologically
1881:07 - for this course you'll know that i
1881:09 - basically use a very very
1881:13 - soft theme in visual studio code for
1881:16 - uh coding and i absolutely love this
1881:18 - it's the preference you may like a light
1881:21 - team i like a dark team such as tokyo
1881:23 - night and tokyo night is a visual studio
1881:26 - code theme that is open source and you
1881:29 - can actually grab its
1881:30 - colors from
1881:32 - github so what i'm going to do in here
1881:34 - is just to make sure that the background
1881:36 - color of our splash screens actually
1881:38 - painted with that color okay so let's go
1881:42 - and search for tokyo night
1881:45 - in github and you'll end up in this
1881:48 - website github.com and kia tokyo night
1881:51 - vs code theme so if you don't have this
1881:54 - link and if you couldn't be bothered
1881:55 - writing this name you could just google
1881:58 - and so i'm just gonna go to google and
1881:59 - say tokyo night theme okay and you'll
1882:03 - end up with the github link so you can
1882:05 - just click on it all right so i'm gonna
1882:07 - go down here in this um theme and i'm
1882:11 - going to grab this beautiful editor
1882:14 - background storm
1882:16 - color from here okay
1882:19 - um actually either we could use storm or
1882:22 - night i'm gonna choose storm and just
1882:24 - see how it looks like so grab this code
1882:27 - please
1882:28 - the rgb code for uh tokyo knight and
1882:31 - let's go to figma into our rectangle and
1882:34 - just paste it in fill
1882:36 - so that created a nice little background
1882:38 - color for us okay so we could just live
1882:40 - with this at the moment
1882:43 - then what we need to do is i like to
1882:45 - basically create some sort of a gradient
1882:48 - in this background color so it's not so
1882:50 - bland as it is right now so what i'm
1882:52 - gonna do is just to go to effects in
1882:54 - here and then say that we have actually
1882:57 - no not effects it's probably in fill
1883:00 - let's go and fill press the plus button
1883:02 - and in here just click on this little uh
1883:06 - space right there
1883:09 - and let's just say that um
1883:12 - you know what actually i would really
1883:13 - like to change the screen layout a
1883:15 - little bit so you see my figma screen
1883:16 - better so i'm gonna hide this caption
1883:20 - and let's see
1883:22 - and see if i can change the caption
1883:24 - length
1883:27 - like this
1883:29 - so that it is smaller
1883:31 - and hence i can change the screen layout
1883:34 - with my screen with my face still
1883:36 - visible so i think this is a little bit
1883:37 - better okay after doing this fill so we
1883:39 - added a fill effect in here using this
1883:41 - plus icon
1883:42 - and go and tap on this um little icon
1883:46 - next to fill you see here clicking on it
1883:48 - you can then say that you want for
1883:50 - instance a
1883:53 - linear should we create a radial maybe
1883:56 - or a linear gradient let's see
1883:59 - let's create a linear gradient okay
1884:01 - then this as you can see is a gradient
1884:04 - that at the moment is going from black
1884:06 - to
1884:08 - transparent with zero percent in here so
1884:10 - let's make this black point as well
1884:13 - transparent
1884:14 - like this
1884:15 - zero and we're gonna in both these cases
1884:18 - set the background color as the starting
1884:21 - point and the ending point so click on
1884:23 - the starting point change this color to
1884:25 - our um
1884:27 - tokenite background color and here as
1884:29 - well so that's that okay then in the
1884:31 - middle somewhere we're gonna create a
1884:33 - point and give it a hundred percent uh
1884:36 - transparency and let's see how it looks
1884:39 - like so
1884:41 - in here can we not have three points
1884:43 - yeah figma just went a little bit
1884:45 - ballistic on us but that's okay
1884:47 - so in here we have that color in here we
1884:49 - have that color
1884:52 - so so the start and the end have to be
1884:54 - transparent with that color that we've
1884:56 - chosen and let's go in in the middle and
1884:59 - just kind of change the color to red and
1885:01 - you can see that it gets created here
1885:02 - without a problem
1885:03 - and then what we're going to do for the
1885:05 - middle we're going to go and create
1885:08 - grab this particular color here as you
1885:10 - can see it's kind of like a light very
1885:12 - soft light blue starts with 7d so it's
1885:15 - 7dcff
1885:17 - and i'm going to go back to the figma
1885:18 - design and in here
1885:20 - change the middle color to that
1885:23 - just like this okay so it kind of
1885:25 - creates a nice little effect for us in
1885:27 - the middle kind of a
1885:30 - nice
1885:31 - gradient okay
1885:32 - so after doing that let's go to our
1885:34 - downloads and grab our icon so i'm going
1885:37 - to go here to
1885:38 - downloads and if you remember we had
1885:41 - this
1885:42 - sticky note svg file and figma is great
1885:45 - with stuff like this so let's just grab
1885:46 - svg right in the
1885:48 - middle okay and that's our sticky note
1885:51 - right here okay
1885:53 - so let's see what we can actually do
1885:55 - should we use the svg or should we use
1885:57 - maybe our app icons
1885:59 - it's probably better to use actually the
1886:00 - app icon so revert this change please so
1886:03 - let's not use this svg let's go to our
1886:06 - app icons that we extracted in the
1886:08 - previous chapter and let's grab a
1886:10 - rasterize png which is this app store
1886:12 - icon and bring it right here okay so it
1886:15 - actually is a nice size i'm going to use
1886:17 - these built-in layout guides in figma as
1886:19 - you can see it tells me where the center
1886:21 - is so i'm just going to place our icon
1886:22 - right there and as you can see it
1886:24 - actually blends really well with that
1886:25 - background linear gradient that we
1886:27 - created so it's a it's a subtle effect
1886:30 - so you can see that the linear gradient
1886:33 - is a little bit visible
1886:35 - and if you disable that linear gradient
1886:37 - with this icon it's
1886:39 - it's very bland so without that linear
1886:42 - gradient it's our splash screen doesn't
1886:44 - look so well so you can also play a
1886:46 - little bit with the transparency of the
1886:48 - entire thing like 100 and i feel like um
1886:52 - this is just
1886:53 - crazy so maybe 20 was actually pretty
1886:56 - good
1886:57 - i don't know where i went
1886:58 - so here let's go back here and say 20
1887:01 - okay
1887:02 - as it was so now we have a really good
1887:05 - um
1887:06 - base for our splash screen so what we
1887:08 - need to do now in order to download this
1887:11 - splash screen you need to select those
1887:13 - two layers so on my macintosh i'm just
1887:15 - going to hold down the shift key and
1887:17 - click on this icon for instance and then
1887:20 - click on the next one in order to select
1887:22 - both where i think you could actually
1887:24 - no you can't select like that so you
1887:25 - need to basically hold down the shift
1887:27 - key and select both layers
1887:29 - then press
1887:31 - command g on a macintosh or ctrl g on
1887:33 - linux and windows in order to group
1887:35 - these two layers together okay so now
1887:38 - it's a group and i'm just going to call
1887:39 - it
1887:40 - splash screens just like that it doesn't
1887:43 - have to be called like that splash
1887:44 - screen but i just call it so okay
1887:48 - so what we need to do is to grab this
1887:50 - splash screen in three flavors so
1887:52 - normal like um in normal ios development
1887:55 - you have to support three different
1887:58 - resolutions for your assets usually
1888:02 - some developers are
1888:04 - not as bothered with
1888:06 - supporting older devices
1888:09 - so they only support for instance the
1888:10 - resolution of 2x and 3x
1888:13 - and if this doesn't make sense to you i
1888:16 - will just explain what this actually
1888:17 - means
1888:18 - um
1888:20 - modern devices
1888:22 - on ios at least they're called at their
1888:24 - screen and they're called retina devices
1888:26 - and it's just a term created by apple um
1888:30 - many many years back
1888:32 - and where they said basically they
1888:34 - doubled the amount of pixels that a
1888:35 - device can display on the screen but
1888:37 - they held the aspect ratio as it was so
1888:40 - if in a little square in an old device
1888:43 - the device could display four pixels
1888:46 - then the new devices could display eight
1888:48 - pixels so they doubled the amount of
1888:50 - pixels per square feet
1888:52 - i don't know how you want to say it and
1888:54 - they call it retina and then they added
1888:57 - they said every
1888:58 - every developer needs to provide an
1889:00 - image for the old devices and we call it
1889:03 - 1x
1889:04 - as in
1889:05 - scale to 1
1889:07 - and the new devices will have 2x
1889:10 - then newer iphone devices came out they
1889:12 - had more modern retina displays and even
1889:14 - more pixels packed into the same
1889:17 - space so they said now those devices are
1889:19 - able to display eight times more pixels
1889:22 - than the original ones so
1889:24 - it's basically gonna be um one x two x
1889:27 - and three x
1889:29 - so um i think it's eight times more
1889:32 - is that i don't know
1889:34 - so it's 1x2x and 3x that we have to
1889:36 - support so let's go in here
1889:38 - um
1889:39 - let me see if i can shuffle things
1889:41 - around so you see better um maybe like
1889:44 - this so let's go in here in figma at the
1889:47 - bottom of the screen you see this export
1889:48 - button so i'm going to press that export
1889:50 - so i'm going to press that export button
1889:52 - actually three times as you can see in
1889:54 - here so we have the first one is a png
1889:57 - make sure that they're all png files and
1890:00 - the first one has no suffix second one
1890:02 - has two x and the third one has three x
1890:04 - that's exactly what we need okay
1890:06 - so
1890:07 - after doing that what we're gonna do is
1890:09 - to say export splash screen just like
1890:12 - that
1890:13 - and that's gonna do its processing so it
1890:15 - may actually take some time depending on
1890:17 - our internet connection as well and then
1890:19 - we downloaded this zip file so our work
1890:22 - in this file is basically done and this
1890:25 - is the contents of that zip file as you
1890:26 - can see splash screen png and they're
1890:29 - all the same but their sizes are quite
1890:31 - different you can see the first one is
1890:32 - 604 kilobytes the second one is 1.4
1890:35 - megabytes and the third one is 2.5
1890:38 - megabytes okay
1890:40 - so after doing that let's now remove
1890:44 - safari or your web browser from from the
1890:46 - screen
1890:48 - and we need to basically go into our
1890:50 - source code now so i'm going to keep
1890:52 - this window here do some reshuffling on
1890:55 - the screen
1890:56 - and then i'm gonna bring our
1890:58 - let's see i'm gonna bring our uh
1891:01 - application to the to the screen like
1891:03 - this
1891:05 - okay and actually we don't need the
1891:08 - application sorry about that we kind of
1891:11 - need xcode in here so let me bring up
1891:13 - xcode
1891:16 - but let's bring xcode to the screen and
1891:18 - what we need now is to go to our assets
1891:20 - in here run our assets and we have our
1891:22 - launch image right there so what we need
1891:25 - to do is to grab these images one at a
1891:28 - time and bring them in here okay so and
1891:30 - they can be called splash screen that's
1891:32 - not a problem xcode will do the mapping
1891:34 - for us so as long as this thing in here
1891:36 - is called launch image then we're
1891:38 - good to go
1891:40 - so as a caption any case we're now going
1891:42 - to go and bring these images in here so
1891:44 - we have three images you can see in here
1891:46 - and we have three placeholders in here
1891:48 - that we have to drag and drop our images
1891:50 - into so let's begin by splash screen png
1891:52 - and bring it to 1x
1891:54 - let's bring our splash screen 2x into 2x
1891:58 - and 3x into 3x okay
1892:01 - and just like that
1892:03 - so
1892:04 - that part is now done but we're not
1892:06 - really done designing this splash screen
1892:08 - as such for the ios app so
1892:11 - let's go to the launch screen storyboard
1892:13 - file in here as you'll see it doesn't
1892:15 - look so well
1892:16 - so
1892:17 - we need to find this launch image that
1892:20 - is displayed in here and you can see at
1892:22 - the moment its constraints are like
1892:25 - very very wrong so it just thinks that
1892:27 - if you go into this tab it thinks that
1892:29 - this image is one two eight four by two
1892:31 - seven seven eight
1892:33 - but we don't want that okay we want this
1892:35 - image to be as big as the screen but we
1892:38 - also want it to
1892:41 - fix the aspect ratio of the image so
1892:43 - that it always fills the entire contents
1892:45 - of the screen even if that means the
1892:47 - image goes a little bit outside the
1892:49 - outside the boundaries of the screen
1892:50 - okay so that the launch screen looks
1892:53 - great on all ios devices
1892:56 - so what you need to do here is just a
1892:59 - little bit of a work on ios side so you
1893:01 - need to go in and select your launch
1893:03 - image in this tab in here which is your
1893:06 - dimensions the size inspector as as it
1893:08 - is called in xcode go and say that the x
1893:12 - is zero and y is also zero so that kind
1893:15 - of like make sure that your image starts
1893:17 - right there then let's just zoom out a
1893:20 - little bit and go manually and drag this
1893:22 - a little bit so that it fits the screen
1893:25 - so i'm going to drag this point let's
1893:26 - see if i can do that with my trackpad or
1893:29 - maybe i should use my
1893:30 - mouse and it's it's like playing a
1893:33 - little bit with me just because this
1893:35 - launch image at the moment has some
1893:36 - constraints so let's go and actually
1893:40 - remove these constraints so i'm going to
1893:41 - remove this horizontal constraint by
1893:43 - pressing the backspace button on it or
1893:45 - if you're on windows and linux you have
1893:46 - to press the delete button on your
1893:47 - keyboard so now i've removed those
1893:49 - constraints so i should be able to
1893:51 - freely size this hopefully let's see
1893:54 - and it's not letting me size this but
1893:55 - that's okay so what i'm going to do is
1893:57 - i'm going to have a look at this view
1893:59 - and see its size i can see that view is
1894:01 - 896 then i'm gonna go to my launch image
1894:03 - and say okay your height is also 896. so
1894:07 - that's going to ensure that the height
1894:09 - of my launch image is the exact same
1894:11 - height as the view then i'm going to
1894:12 - have a look at the views with is four
1894:15 - one four and i'm gonna go to the launch
1894:16 - image and say you're also four
1894:19 - four one four okay
1894:21 - so now the image container actually
1894:23 - looks good however this launch image it
1894:26 - now has hard-coded values hard-coded
1894:29 - width and hard-coded height
1894:31 - it's x and y and y are quite fine but
1894:34 - what we need to do is to create some
1894:36 - constraints for it and constraints are
1894:38 - literally i mean we're not going to go
1894:39 - into native ios development at this
1894:41 - moment so you need to kind of have some
1894:42 - knowledge about this yourself and if you
1894:44 - don't i'm just going to tell you just
1894:45 - quickly how we create these constraints
1894:48 - so what we need to do is to click on our
1894:51 - launch image and then drag
1894:54 - and hold down the control button on your
1894:57 - keyboard okay
1894:58 - so
1894:59 - click
1895:00 - hold down control and drag from launch
1895:03 - image into the view
1895:05 - like that
1895:06 - then this menu appears on the screen and
1895:09 - then hold down the shift key on your
1895:12 - computer on your macintosh and say you
1895:14 - want an equal width
1895:16 - equal height
1895:18 - and also you want to see leading space
1895:21 - and you want to say
1895:24 - what else do we want
1895:26 - yeah
1895:28 - that's fine for now i would say i mean
1895:30 - ideally what we want is for this screen
1895:33 - to be in the center as well so maybe we
1895:35 - could just say center horizontal and
1895:37 - center vertical so check these four
1895:39 - items as you're holding down the shift
1895:41 - button and then you can let go of the
1895:43 - shift button and then just click here
1895:46 - anywhere on the screen to dismiss of
1895:47 - that
1895:48 - so now you can see xcode is also happy
1895:50 - with the constraints that we created
1895:52 - then what we need to do is just to tell
1895:54 - this image to scale
1895:56 - according to its width and height so
1895:58 - let's go into this tab which is called
1896:00 - let's see what this tab is actually
1896:02 - called
1896:03 - attribute inspector and inside this
1896:06 - scaling here actually
1896:08 - it's not scale really i believe it
1896:11 - should be content mode in here and let's
1896:14 - just say it is aspect fit okay
1896:17 - so it keeps the aspect ratio of the
1896:20 - original image but it also ensures that
1896:22 - it's like yeah it's fitting on the
1896:24 - screen for now okay
1896:27 - so let's leave it like this
1896:31 - all right so let's then go ahead and
1896:34 - actually see if this looks okay so what
1896:37 - we could do is to write in xcode let's
1896:40 - just say yeah
1896:42 - let's run on ios 13 pro which i believe
1896:45 - is the simulator and that i have already
1896:48 - in here
1896:50 - and from
1896:51 - from xcode itself we can press the run
1896:54 - button to have a look at how this
1896:56 - actually looks like and while this build
1896:59 - process is going you can also go to your
1897:01 - simulator here and say file
1897:03 - and open simulator and i'm just going to
1897:05 - choose another simulator as well such as
1897:08 - iphone 8 plus okay it is just good idea
1897:12 - usually to test your splash screen and
1897:14 - the functionality of your application on
1897:16 - as many devices and simulator as you can
1897:19 - i mean i actually prefer to test on real
1897:22 - devices but right now
1897:24 - it is quite
1897:26 - difficult for me to bring so many test
1897:28 - devices on the screen so i'm just going
1897:29 - to use a simulator to test the splash
1897:31 - screen okay
1897:33 - so now what we're doing is just to
1897:35 - compile our application for iphone 13
1897:38 - pro which is a simulator we've been
1897:40 - using so far when it came to for
1897:42 - instance um
1897:43 - testing our application so let's move
1897:46 - this to the background because this is
1897:48 - not really our application this is our
1897:50 - application so let's bring it here
1897:53 - and let's
1897:55 - just give some time to xcode to do
1897:58 - the work that it needs in order to build
1898:00 - our application for this simulator and
1898:03 - also install it and run it so that we
1898:05 - can have a look a little bit at
1898:07 - the splash screen so i'm just going to
1898:08 - be
1898:09 - waiting until that process is done
1898:13 - all right now our application is running
1898:16 - on a simulator called iphone 13 pro so
1898:20 - what we need to do is to actually kill
1898:22 - the running of the application because
1898:24 - after the application is launched we're
1898:26 - not going to see the launch screen even
1898:28 - if you for instance send the application
1898:30 - to the background with command shift h
1898:32 - that sends the application to home and
1898:34 - bring it back up there is no launch
1898:36 - screen remember launch screen for an
1898:38 - application is only displayed when the
1898:40 - application is completely dead and it's
1898:42 - cold booting so in order to send in
1898:45 - order to basically kill the application
1898:47 - what you could do is either press the
1898:49 - stop button here on xcode which
1898:50 - basically kills the debug
1898:52 - process and
1898:54 - and also kills the application so now
1898:57 - you can actually click on the
1898:59 - application in your home screen and
1899:01 - bring it to the foreground and as you
1899:03 - saw that was the little splash screen
1899:05 - that we saw on the screen so i'm gonna
1899:06 - kill the app and bring it back up again
1899:08 - and that's our splash screen so seems to
1899:11 - be actually looking fine on iphone 13
1899:13 - pro let's now change the target in here
1899:16 - and change it to our iphone 8 plus
1899:19 - which is the other simulator that i
1899:21 - brought up here
1899:23 - and the reasoning for that is that
1899:24 - iphone 8 plus is still a major player in
1899:27 - the market a lot of people have iphone 8
1899:30 - plus and the screen is fabulous it is a
1899:32 - great phone that people are still using
1899:34 - so and the huge difference between
1899:37 - iphone 8 plus and iphone 13 pro is that
1899:40 - iphone 8 plus has no notch so it doesn't
1899:43 - have um the notch that you can see in
1899:46 - here on an iphone 13 pro so and it has a
1899:48 - home button so that's a little bit of a
1899:51 - thing that we have to think about that
1899:53 - you need to test your application on
1899:54 - multiple devices and now i'm going to
1899:56 - kill the application oops i don't
1899:58 - actually know what i did so
1900:00 - let's go in here and i'm going to kill
1900:02 - the debug process on iphone 8 plus as
1900:04 - well and run it again and let me just
1900:07 - delete this old app from here so we so
1900:09 - we don't get confused and
1900:11 - if you run the application did you just
1900:13 - see it momentarily that the application
1900:15 - that the splash screen doesn't look so
1900:17 - good it's not doing so well so if i run
1900:20 - it again with do you see the spacing on
1900:23 - the right and left if you pause the
1900:25 - video you will see it
1900:27 - that is because we have a little bit of
1900:28 - problem with our aspect ratio in here
1900:31 - because you remember in this launch emit
1900:33 - launch image we said aspect fit what we
1900:35 - need to do is just to say aspect fill
1900:37 - and aspect fill what it does it tries to
1900:40 - keep it it doesn't try it keeps the
1900:42 - aspect ratio but it always makes sure
1900:44 - that the image is that is at least as
1900:46 - big as its container so having done that
1900:49 - let's run the application again on
1900:51 - iphone 8 plus
1900:52 - with that change in mind and let's see
1900:55 - how the application looks like
1901:00 - now it looked a lot better so there was
1901:01 - no empty space to the right and left i'm
1901:04 - gonna kill the application like this
1901:06 - send it up bring it up
1901:09 - and let's see oh it's because my debug
1901:11 - debug process i just killed my debug
1901:13 - process so let's kill it again
1901:16 - like this let's see
1901:18 - if i c if i can manage to do that kill
1901:20 - the application
1901:21 - and open it
1901:22 - and now i can see that this splash
1901:24 - screen is actually looking good on
1901:26 - iphone 8 plus as well
1901:29 - great now that things are working fine
1901:31 - on ios we need to focus on android so
1901:35 - let me bring up the caption for the next
1901:38 - section that we're going to talk about
1901:40 - we're going to talk about android slash
1901:41 - screens here i'll also try to open this
1901:44 - url
1901:46 - so let me bring it here
1901:47 - so you'll see that there is official
1901:49 - documentation about creating splash
1901:51 - screens for android as well on
1901:52 - developerandroid.com
1901:54 - guide topics ui splash
1901:56 - slash um
1901:59 - splash dash screen
1902:01 - and
1902:02 - um here there is a lot of information
1902:04 - that you can have a look at and like
1902:05 - even animations as you can see in here
1902:07 - what splash screens mean to android
1902:09 - applications and that you can even
1902:11 - animate them etc etc so i suggest that
1902:14 - you actually read the documentation for
1902:16 - splash screens on android to get a
1902:18 - better understanding of the differences
1902:20 - between ios splash screens and android
1902:23 - splash screens it's always good to know
1902:25 - i like the underlying implementation and
1902:27 - how it actually works under the hood
1902:29 - if you're a flutter developer you don't
1902:31 - necessarily have to only focus on
1902:33 - flutter but you since you're deploying
1902:35 - your application compatible with for
1902:37 - instance mac os linux windows and
1902:41 - android it's always good to know in my
1902:43 - opinion
1902:44 - how it works under the hood so
1902:48 - if you want to have a look at this
1902:49 - please go ahead and read the
1902:50 - documentation on how it works and now
1902:53 - let's go to this a little beauty
1902:57 - of a link which is on stack overflow
1902:59 - which which is one of my favorite
1903:00 - websites to find
1903:01 - um
1903:02 - solutions that i can't even think of the
1903:05 - answers to sorry the problems that i
1903:07 - can't find the answers to so let's go
1903:09 - ahead and have a look at this url in
1903:11 - here which will explain to you the
1903:13 - different resolutions that we have to
1903:16 - provide for our splash screen for an
1903:18 - android device and you saw it from our
1903:20 - figma design in here
1903:23 - it's gonna load now
1903:25 - excuse me um
1903:27 - so here you saw that when we exported
1903:29 - our
1903:31 - oh this sticky note shouldn't be there i
1903:33 - don't know why it was added there so i'm
1903:35 - just going to remove it and i hope that
1903:37 - we actually didn't create our
1903:39 - splash screen with that in we could
1903:41 - double check that by bringing up xcode
1903:43 - and have it looking have a look at our
1903:45 - assets
1903:46 - and just have a look at these images
1903:48 - showing finder
1903:50 - excuse me i'm going to bring it up and i
1903:52 - can see that little sticky note wasn't
1903:53 - in our splash screen so that's really
1903:55 - good it was just probably a mistake
1903:57 - from my side so
1903:59 - that's great so as you saw for ios we
1904:02 - exported these assets in here three two
1904:05 - one x
1904:07 - with these suffixes so two x four two x
1904:10 - three x for three x and nothing for the
1904:12 - normal um
1904:14 - splash screen on one x devices but on
1904:17 - android there's a lot more that we have
1904:19 - to export so i'll open that url in here
1904:21 - that you can you'll also see and you'll
1904:24 - see that these are the various um
1904:27 - resolutions that we have to export for
1904:28 - our splice screen on android we're not
1904:31 - in our application supporting ldb ldpi
1904:35 - in here so we'll we're going to go and
1904:36 - export mdpi hdpi xhdpi and etc etc so
1904:42 - let's go ahead now in your figma design
1904:44 - right there select your splash screen
1904:46 - from the left hand side and go go ahead
1904:48 - please and remove all these exports
1904:52 - that we've created earlier okay so what
1904:54 - we need to do now is to make sure that
1904:56 - we're conforming to these sizes for mdpi
1904:58 - for instance and we're going to
1905:00 - basically select the splash screen and
1905:02 - say export
1905:04 - and let's in here see
1905:06 - that okay these are the sizes so 1x
1905:10 - let's just say we don't want any suffix
1905:12 - and i've already prepared something like
1905:14 - that before so let me just show you how
1905:16 - it should look like
1905:18 - and i'm going to select this splash here
1905:20 - and you can see this is pretty much how
1905:22 - you should create it so one x and we say
1905:25 - mdpi as it was displayed in here mdpi
1905:28 - you see and then we say one and a half x
1905:30 - is hdpi and xhdpi etc etc okay so let's
1905:34 - go ahead and do something similar in our
1905:36 - splash screen in here so one x and as
1905:39 - you could as you could see in the one
1905:40 - that i preferred here one x was mdpi so
1905:43 - let's go ahead and say a suffix is mdpi
1905:46 - like that
1905:47 - i'll create another export in here and
1905:50 - we're in this case we need hdpi which is
1905:53 - one and a half x so let's select this
1905:56 - and say one and a half x and we say hdpi
1905:59 - like that
1906:01 - and then we go for the next one which is
1906:03 - xhdpi so let's go and press the
1906:06 - plus button in here and say 2x is a x
1906:09 - hdpi
1906:11 - and then we go to the next level which
1906:13 - is xxhdpi
1906:15 - so
1906:16 - let's press the plus button and say
1906:19 - uh and this needs to be
1906:21 - x x hdpi okay
1906:23 - so we're gonna say xx hdpi
1906:26 - and last but not least we have triplex
1906:29 - hdpi which is
1906:31 - four x the resolution so let's say xxx
1906:34 - a plus button triplex hdpi
1906:37 - and in here this should be 4x okay so
1906:40 - now oops i didn't want to create this
1906:42 - drop shadow so
1906:43 - that's how yours should also look like
1906:45 - with all these uh various resolutions in
1906:48 - here
1906:49 - okay
1906:51 - so now what i need you to do please is
1906:53 - just to go ahead so make sure that your
1906:54 - slash screen is selected on the left
1906:56 - hand side and then just go and export
1906:58 - all of these so let's just press the
1907:00 - export button
1907:02 - so that's going to take its time and
1907:04 - calculate basically all these different
1907:06 - resolutions prepare the pngs for us and
1907:07 - it's going to pack them into beautiful
1907:09 - zip file and then
1907:10 - it's going to download that packed file
1907:12 - for us so depending on your connection
1907:14 - speed this could take some time and the
1907:16 - result i can see is an untitled 2 zip
1907:18 - file uh
1907:20 - of about 10 megabytes so there we go
1907:24 - so let me
1907:26 - double click on this file in order to
1907:28 - unpack it and i'm going to open the
1907:30 - folder here for you so you can also see
1907:32 - as you can see splash screen
1907:34 - it's all there so they're all looking
1907:35 - very similar to each other but they have
1907:37 - very different sizes as you can see
1907:38 - though so the xxx hdpi has the size of
1907:41 - almost four megabytes whereas the mdpi
1907:45 - is only 600 kilobytes so
1907:48 - now we got our images perfect so what we
1907:50 - need to do is um
1907:52 - we're going to basically
1907:54 - call them splash screens and then place
1907:56 - them inside various
1907:58 - um
1907:59 - mipmaps folder in our android
1908:02 - application so let me bring up visual
1908:04 - studio code in here let me see where
1908:06 - i've placed my visual studio code right
1908:08 - there okay
1908:09 - and if you then ex
1908:12 - go into exploration a little bit here
1908:14 - you can see we have an ios folder so let
1908:16 - me just make the size a little bit
1908:17 - bigger
1908:18 - excuse me
1908:19 - and we have an android folder in here so
1908:21 - if you go to android and then app src
1908:24 - main and then res and you'll see that
1908:27 - you have these mipmap folders hdpi mdpi
1908:30 - and all those one two three four five
1908:32 - folders that we need for our five assets
1908:35 - in here okay so let's go ahead and
1908:37 - actually name this file in here and let
1908:40 - me close this little folder that i have
1908:42 - at the bottom of the screen as well so
1908:44 - okay so um we start with mdpi in here
1908:47 - let's just call it splash okay slash png
1908:50 - and i'm just gonna go to this mdpi
1908:53 - folder here and i can see i have a
1908:54 - launcher icon an ic launcher so let's
1908:57 - just drag this into mip map mdpi if i
1909:02 - can
1909:03 - and mid map mdpi there it is so the mdp
1909:06 - i want is done
1909:08 - now
1909:09 - i'm going to delete it from here so now
1909:10 - we have hdpi then i'm going to call it
1909:12 - splash again remember it's hdpi so i'm
1909:16 - going to drag and drop it into the hdpi
1909:18 - folder so it's called png there as well
1909:21 - then i'm going to delete it from here
1909:22 - then we have the xhdpi so i'm going to
1909:25 - call it splash again
1909:27 - and remember xhdpi so let's go and drag
1909:30 - it there great then delete it from here
1909:33 - then we have
1909:34 - xxhdpi so call it splash again
1909:37 - and bring it into xx folder in here
1909:40 - and i can see it's right there splash
1909:42 - okay
1909:43 - and last but not least we have the
1909:45 - triple x hdpi and we're going to call it
1909:48 - slash again and then let's go in here
1909:50 - and bring it right there
1909:52 - great so now you should actually see one
1909:56 - two
1909:57 - three
1909:59 - four
1910:00 - and five images that we have exported
1910:04 - and placed inside our android folder so
1910:06 - then i can delete the last one safely
1910:10 - so now that we've done that we need to
1910:13 - actually tell our android application to
1910:15 - use those splash screens so what we need
1910:17 - to do is to look for android window
1910:19 - background inside our application i'm
1910:21 - going to close all these open tabs and
1910:23 - i'm going to search for android window
1910:25 - background just like that okay
1910:28 - so you'll find four of them but only two
1910:30 - of them are actually interesting for us
1910:33 - so what we need to do is actually i'm
1910:35 - going to go to my styles as well here so
1910:38 - as you can see here is using a drawable
1910:39 - but we're not using a drawable a
1910:41 - drawable is something that for instance
1910:42 - if you look for launch background let's
1910:44 - go in here you see these um
1910:48 - fine launch background actually is there
1910:49 - a drawable called launch oh we don't
1910:51 - have it right now okay anyways so i'm
1910:53 - gonna search for um
1910:56 - android window background as it was our
1910:59 - mission
1911:00 - so let's go in here and find that window
1911:02 - background and here as you can see it
1911:03 - says drawable launch background and this
1911:05 - file is android app src main res values
1911:08 - styles xml so that's the first one okay
1911:11 - that's this drawable so i need you in
1911:13 - here to change this to mipmap
1911:15 - and in here just say splash which is the
1911:17 - name of our file that we created okay so
1911:20 - that's the first um occurrence of this
1911:22 - android window background and then we're
1911:24 - going to go in here as well which is in
1911:26 - android app src main res values knight
1911:29 - styles xml and call this mipmap
1911:33 - like that
1911:34 - and in here we also say splash perfect
1911:37 - so we've changed those
1911:40 - so what we need to do now is to actually
1911:42 - test our changes on android as well so
1911:44 - i'm going to close all those tabs as you
1911:46 - saw and let's just go to main dart file
1911:49 - just to have a dart file open
1911:51 - and then i'm going to stop the running
1911:53 - of this application because i don't
1911:54 - really know i think it's actually
1911:55 - running the application on um the iphone
1911:58 - simulator and then i'm going to say
1912:00 - command shift p on a macintosh or ctrl
1912:02 - shift p in windows and linux if you're
1912:03 - on visual studio code and then say
1912:05 - flutter select device as you can see in
1912:07 - here and then i'm going to choose my
1912:09 - android phone okay and as you know from
1912:12 - the previous
1912:13 - chapters i actually prefer to run my
1912:15 - applications real phones and then run
1912:17 - and then run without debugging
1912:19 - and this is gonna
1912:20 - basically kick start our gradle build
1912:23 - processing here and while that is
1912:25 - ongoing i'll go and bring um scr cpy to
1912:30 - the screen so here it is and
1912:32 - i can see
1912:34 - nothing actually what happened to our
1912:36 - build
1912:38 - i think our build somehow crashed so
1912:40 - let's go and build again and see what
1912:42 - happens
1912:44 - debug console and
1912:47 - okay i can see it says there is a
1912:49 - problem and let's see another expected
1912:51 - caller reference bot got raw string mid
1912:54 - map splash okay so let's have a look at
1912:58 - what we actually did with this mid map
1913:01 - splash i can see i've actually written
1913:03 - incorrectly i've written me map so that
1913:06 - could that could explain it it's a
1913:07 - mid-map so if you've done the same
1913:09 - mistake as me in one place please just
1913:10 - correct this so it's mipmap
1913:13 - all right so
1913:15 - fine okay fair enough and let's now try
1913:18 - to run the application again and see if
1913:21 - it can compile this time
1913:23 - so it says
1913:25 - it got a raw string again and it's now
1913:27 - did i really type it in correctly did i
1913:30 - write mimi map
1913:31 - this is unbelievable um if i've actually
1913:34 - done that so
1913:37 - so no i i think i've actually written it
1913:39 - in two places incorrectly so
1913:41 - map
1913:43 - all right
1913:45 - it would be very comical if i made a
1913:47 - mistake again while trying to fix my
1913:49 - previous mistakes
1913:51 - so let's see now if the android build is
1913:53 - gonna go through successfully so i'll
1913:55 - just wait here until that task is done
1914:01 - okay it's built successfully i was just
1914:03 - gonna go grab some coffee so
1914:08 - and it's connecting now so that actually
1914:10 - went really fast i would say gradle
1914:12 - builds in here are surprisingly fast
1914:14 - when running with flutter for instance
1914:16 - compared to the ios xcode build system
1914:19 - so i'm going to bring up scrcpy in here
1914:21 - and i can see the application running
1914:23 - without a problem but we didn't actually
1914:24 - see our splash screen so
1914:27 - what i'm going to do is i'm going to
1914:28 - stop the
1914:29 - processing here which kills the
1914:31 - application and then i'm gonna find our
1914:33 - application here and then open it and
1914:35 - then i can see our beautiful splash
1914:38 - screen on the screen when the
1914:39 - application starts so that's also
1914:41 - working as expected no problems at all
1914:44 - and remember we've done quite a lot of
1914:46 - work now we've done like icons from the
1914:48 - previous chapters and we've also worked
1914:49 - on our splash screen so
1914:51 - there's lots that we've done but we
1914:53 - haven't really committed any of these
1914:54 - because the work wasn't complete
1914:56 - however
1914:58 - now that we have um
1915:00 - both icons and splash screens on both
1915:02 - ios and android i think it's time that
1915:04 - we do as we usually do at the end of
1915:06 - every chapter is to commit our work and
1915:08 - make sure that we're not going to lose
1915:09 - it
1915:10 - so i'm going to do some reshuffling on
1915:12 - the screen right here and i'm going to
1915:14 - increase the size here as well so i'm
1915:16 - going to go to terminal then like this
1915:19 - and let's then have a look at the status
1915:23 - and you can see that we've done a lot of
1915:25 - work so
1915:26 - there are many files that have been
1915:28 - changed as you can see in here modified
1915:30 - modified
1915:32 - a tremendous amount of work so
1915:34 - let's just say get at all and then let's
1915:36 - commit all this work as
1915:40 - is it step 28 yes step 28 okay
1915:43 - so if you look at our logs so we have
1915:45 - step 27 and then we have step 28 as well
1915:48 - so i'm gonna push all these changes and
1915:50 - this push is actually quite a big push
1915:52 - because we have a lot of resources that
1915:55 - we're pushing to github so or wherever
1915:58 - you're hosting your git repository it
1916:00 - could be bitbucket or somewhere else but
1916:02 - depending on your connection and the
1916:04 - ability of your host to receive these
1916:06 - files this operation could actually take
1916:08 - some time so and after we've done that
1916:11 - let's also tag our work at step 28
1916:14 - like that and push our tags
1916:18 - all right so if i say now git tag we
1916:20 - should have 26
1916:22 - 27 and 28 line up right there so perfect
1916:26 - and we should have no status right now
1916:29 - awesome
1916:30 - as it's tradition after our tagging and
1916:32 - committing everything at the end of
1916:34 - every chapter we'll talk about what we
1916:35 - need to discuss in the chapter that is
1916:36 - to come and
1916:38 - um
1916:39 - i can't believe we're actually getting
1916:41 - to this point in this course it is such
1916:43 - a huge moment both both for me and i
1916:46 - hope it is for you as well because we
1916:48 - are actually going to submit our ios
1916:50 - application to the app store
1916:52 - so without further ado if you want to
1916:55 - get some refreshments please do and i'll
1916:57 - see you in the next chapter
1916:58 - hello and welcome to chapter 47 of the
1917:01 - slatter course
1917:02 - uh we've been waiting for this moment
1917:04 - for a very long time now at least i have
1917:05 - so that we have been developing our
1917:08 - application using block we've been doing
1917:09 - a lot of work with widgets we've
1917:11 - prepared splash screens icons etc etc
1917:14 - we've even got our hands dirty with
1917:15 - figma a task that maybe many of you
1917:18 - hadn't done before so
1917:20 - what is left now well we're gonna send
1917:22 - our application to the ios app store and
1917:25 - it gives me really a lot of pressure
1917:28 - pleasure to actually announce that that
1917:29 - we're gonna do this so
1917:31 - what do we need to do in order to be
1917:33 - able to interact with the app store and
1917:36 - also
1917:36 - in order to be able to create your
1917:38 - application of course you you're going
1917:40 - to need to have a macintosh and that is
1917:43 - as i've mentioned an unfortunate fact
1917:45 - when you're dealing with ios development
1917:46 - but if you don't have a macintosh you
1917:48 - can always contact a friend or maybe you
1917:51 - use a service on the internet that can
1917:53 - for instance take your source code and
1917:55 - build your application for you i don't
1917:56 - know if those services exist however
1917:58 - let's just accept the fact the
1918:00 - unfortunate fact that you'll need to
1918:02 - have a macintosh in order to build your
1918:03 - application and send it to the ios app
1918:06 - store
1918:07 - so
1918:08 - what do we actually need you see when
1918:10 - you create your application for um for
1918:13 - apple you need to bundle it up inside a
1918:16 - file which is pretty much just a zip
1918:17 - file but its extension is called ipa
1918:21 - and this zip file in essence contains
1918:23 - your entire application bundle all the
1918:26 - resources and all the
1918:27 - signed binaries from your side and then
1918:29 - you'll just need to submit it to apple
1918:32 - and
1918:34 - then this submission is going to go to
1918:36 - something called app store connect and
1918:38 - um
1918:39 - we're going to now talk about app store
1918:41 - connect actually and what that is so you
1918:44 - see
1918:45 - when when you're developing your flutter
1918:46 - application for instance and you're
1918:48 - talking with firebase then inside of
1918:49 - your code you're talking with the
1918:51 - firebase sdk but on the backend side of
1918:54 - firebase then there's an entire console
1918:56 - so there's in the console.firebase
1918:58 - google.com i think it's called
1919:00 - or if you just google it and say
1919:02 - firebase console you'll get to that
1919:04 - point and
1919:05 - app store connect
1919:06 - is
1919:07 - the firebase console for ios developers
1919:10 - so it is where you basically manage your
1919:13 - applications
1919:14 - the reviews that are submitted to your
1919:16 - applications you can respond to those
1919:19 - reviews so it's like the back end
1919:21 - um
1919:22 - is kind of like a front end for app
1919:25 - store's back-end
1919:26 - you could say so it's your portal
1919:28 - basically to to the app store as a
1919:31 - developer
1919:32 - and google also has something similar
1919:34 - which is the google developer console
1919:37 - excuse
1919:38 - me so what we need to do now in order to
1919:42 - be able to continue we need to actually
1919:43 - create our applications on the app store
1919:47 - connect so what i'm going to do in here
1919:49 - is i'm going to bring up app store
1919:51 - connect and i've already logged in with
1919:52 - my developer account
1919:54 - and let's go in here as you can see
1919:56 - these are some of the apps that i'd
1919:58 - submitted to apple previously
1920:00 - if i can increase the size of this let's
1920:02 - see if it works yep
1920:04 - all right
1920:05 - so what we need to do is in order to be
1920:08 - able to submit our application if we
1920:10 - haven't done that before for this
1920:11 - particular application which we haven't
1920:13 - we need to create an application here on
1920:15 - app store connect okay so please go to
1920:17 - appstoreconnect.apple.com
1920:19 - and then you'll be presented with a
1920:21 - screen that asks you okay what do you
1920:22 - want to do with app store connect and it
1920:23 - kind of looks like this my apps app
1920:25 - analytics etc etc
1920:28 - and this is actually
1920:30 - i'm assuming that you have admin access
1920:32 - to app store connect because apps are
1920:34 - connect like many other
1920:35 - frontends it has
1920:37 - permission it's like permission based so
1920:39 - if you're for instance working with a
1920:40 - company and that company has invited you
1920:43 - to their own app store connect account
1920:45 - and depending on the permissions that
1920:47 - they set for you you may or may not have
1920:49 - access to either one or all the apps so
1920:53 - it is also app-based the permission so
1920:55 - like and i can invite you to my app
1920:58 - store connect and only give you access
1921:00 - for instance to this application and
1921:02 - only give you a very limited access or
1921:05 - admin access okay
1921:07 - so if you don't have access to this app
1921:09 - sections because you're invited as
1921:11 - um as a user to someone else's app store
1921:13 - connect account and they haven't given
1921:15 - you the access to access their
1921:17 - application so you need to ask them for
1921:20 - permission basically to increase the
1921:22 - permission level for you
1921:24 - so let's go ahead and press this plus
1921:25 - button and this is in here we're going
1921:27 - to say new app and in here it's going to
1921:29 - ask you okay what kind of app is it it's
1921:31 - an ios app it's not a mac os like we
1921:34 - haven't really worked on a native mac os
1921:36 - application although
1921:39 - users
1921:40 - now with
1921:41 - m1 processors on macintosh with
1921:44 - macintosh which are arm based they can
1921:46 - actually install ios applications as
1921:48 - you'll soon see so this application that
1921:50 - we're developing flutter we didn't
1921:52 - actually create a macintosh target for
1921:54 - it but even though it's an ios
1921:56 - application you can still install it
1921:58 - with test flight or later when it's
1922:00 - actually released on the ios app store
1922:02 - you can install it with the mac app
1922:04 - store on your macintosh so it's
1922:06 - absolutely lovely
1922:07 - okay so here one you need to do in the
1922:09 - name field
1922:11 - you need to find a unique name in the
1922:13 - entire app store there are millions of
1922:16 - applications on the i'm actually making
1922:18 - up this statistic i don't know if it's
1922:19 - like hundreds of thousands of
1922:20 - applications or millions but let's just
1922:23 - let's just say millions because easier
1922:24 - to say
1922:26 - all these applications are in the app
1922:27 - store you have to find a unique name for
1922:29 - your application and remember you can't
1922:31 - use reserved words so if you look in
1922:35 - here
1922:36 - if i cancel this if you look in here
1922:38 - this is not an accepted application name
1922:41 - so i just i've prepared this in here
1922:43 - just to demonstrate it for you that
1922:45 - if you use for instance a name like
1922:47 - firebase things like that
1922:50 - probably apple is going to reject your
1922:51 - application and definitely google is not
1922:54 - even going to allow you to go to the
1922:56 - google play store with a name
1922:59 - with a part of your application name
1923:00 - being a reserved word like a product
1923:02 - such as firebase so
1923:04 - you have to find a unique name that is
1923:06 - not reserved so let's just say ios and
1923:08 - what should we call this i mean in our
1923:10 - application we call it now my notes
1923:13 - i'm pretty sure if you say my notes that
1923:15 - name is already taken
1923:18 - so let's say
1923:19 - my
1923:20 - awesome notes something like that
1923:24 - as you can see it says it is the name
1923:26 - that will appear in the app store okay
1923:28 - my awesome notes
1923:29 - and in here in this box the primary
1923:31 - language we're going to choose english
1923:33 - and we're going to choose us because we
1923:35 - didn't really focus on
1923:37 - separating
1923:39 - our language like how we actually
1923:40 - interact with the user with our strings
1923:42 - in the application to make sure that
1923:43 - it's like british english or us english
1923:45 - so let's just go with the international
1923:47 - us english in here
1923:49 - and in this box you're going to be asked
1923:51 - to actually choose your bundle
1923:52 - identifier and app store connect has
1923:55 - then after you log in with app store
1923:56 - connect it's going to hook into the
1923:58 - developer account for this user that you
1924:01 - logged in with and it's going to pull
1924:02 - all your bundle identifiers into the app
1924:05 - store connect so you don't have to type
1924:07 - it by hand so let's go find our my notes
1924:09 - application as you can see in here it's
1924:11 - as epic salty my notes and for you it
1924:13 - may be something else okay
1924:15 - so i chose that and then sku is a unique
1924:18 - id for your app that is not visible on
1924:20 - the app store so this is mainly for you
1924:22 - sku is kind of like
1924:23 - it kind of comes from like um
1924:27 - old school when you had a normal
1924:29 - physical store and your products had
1924:31 - kind of like an identifier so this is an
1924:33 - identifier for you it may appear some
1924:36 - places like when you're extracting some
1924:38 - reports from apple to see okay how many
1924:40 - unique users do i have how many unique
1924:42 - installs do i have etc
1924:44 - so this sku is mainly for you it's an
1924:46 - identifier so you could just go with
1924:48 - something that makes sense to you and in
1924:49 - here i'm just gonna say zero one zero
1924:51 - one zero one
1924:53 - or
1924:54 - this and then one one one one
1924:57 - just making things up okay
1924:59 - and user access in here you can say you
1925:01 - you can limit which user see this app in
1925:03 - the app store connect if you select full
1925:05 - access all your users will have access
1925:07 - to the app so this is like you limiting
1925:10 - who can in your app store connect
1925:12 - account who can have access to this
1925:14 - application and since i don't have any
1925:16 - guest users in my private company's
1925:18 - account i'm just gonna go with full
1925:20 - access but if you're working with like
1925:22 - if you're if you're the account owner
1925:24 - and then you have some other people
1925:25 - invited to app store connect that don't
1925:27 - want that shouldn't get access to this
1925:29 - account you could just go in here and
1925:31 - basically say limit the access to this
1925:33 - application to these accounts but i'm
1925:35 - just going to go with full access okay
1925:37 - i'm going to say create and in here is
1925:39 - the place that you may actually get a
1925:40 - problem with the name of the application
1925:42 - so let's just try it out and see if my
1925:44 - awesome notes is some name that somebody
1925:46 - else has taken and we'll get to know
1925:48 - that soon
1925:50 - and from from the looks of it it seems
1925:52 - like that my awesome notes was such a
1925:54 - lame name that nobody has taken so
1925:57 - so that's great for us so um now we've
1926:00 - created the application and um
1926:03 - that part is basically done
1926:06 - so as you can see in here the first
1926:07 - thing that you have to enter in this
1926:09 - screen let me actually increase the size
1926:12 - and let me change the screen layout a
1926:15 - little bit here okay
1926:17 - so the first thing that we see on the
1926:18 - screen here is that uh there's a version
1926:21 - information and also there's app
1926:22 - previews and screenshots and this is the
1926:24 - place that we're gonna upload our
1926:25 - screenshots to the app store
1926:27 - as you can see at the bottom of the
1926:28 - screen it's very important that you take
1926:30 - your screenshots first on an iphone 13
1926:33 - pro max because that is
1926:35 - the iphone with a six and a half inch
1926:38 - display and you may be tempted to just
1926:40 - try to take your screenshots on an
1926:41 - iphone 13 pro but if you do that then
1926:44 - you'll understand after uploading them
1926:45 - you'll get an error from app store
1926:47 - connect saying that the resolution isn't
1926:49 - according to what is expected so what we
1926:52 - need to do here is to go to our iphone
1926:54 - um simulator so and i have quite a few
1926:57 - of them here
1926:58 - so this is our iphone 13 pro
1927:01 - this is our iphone 8 plus
1927:04 - and also we have our iphone 13 pro max
1927:08 - so now our responsibility is to actually
1927:10 - take the screenshots on this simulator
1927:12 - however you'll notice that we have a
1927:14 - little problem in here
1927:16 - well problem problem but for taking
1927:18 - screenshots this is a little bit of a
1927:20 - problem in that we have this debug
1927:21 - manner here that i am that flutter
1927:23 - creates by default so if i zoom in a
1927:25 - little bit here you'll see that it's
1927:27 - it's just saying debug right here and we
1927:28 - need to make sure that we remove that
1927:30 - before taking our screenshots so what
1927:32 - i'm going to do is i'm going to go back
1927:34 - to our source code so
1927:36 - let's go in here
1927:38 - and you can see at the moment the
1927:39 - application's running on iphone 8 plus
1927:42 - which is the simulator to the left hand
1927:44 - side so in order to remove that debug
1927:46 - banner what you'll have to do is to go
1927:48 - to your main um dart file as you can see
1927:52 - and go to the main function where you've
1927:53 - created the material application right
1927:55 - after the title or even before you can
1927:57 - just say banner which is debug show
1927:59 - check mode banner and set that parameter
1928:01 - to false and then i'm just going to do a
1928:03 - hot reload actually hot restart we have
1928:05 - to do so
1928:07 - oh i'm not even running it so let's just
1928:09 - go flutter select device 8 plus and then
1928:12 - i'm going to say run without debugging
1928:15 - so you need to ensure that you remove
1928:17 - that um debug show checked mode banner
1928:20 - and i started not remove it you have to
1928:21 - remove the banner by setting this
1928:23 - parameter to false and now it's going to
1928:26 - basically run the application on iphone
1928:28 - 8 plus and it's going to show us the
1928:31 - results so this debug banner is going to
1928:32 - go away
1928:33 - after doing that when we see that it's
1928:35 - working on iphone 8 plus for instance
1928:37 - then we're going to do the same thing do
1928:38 - a flutter select device and run the
1928:40 - application on iphone 13 pro max so
1928:43 - this process depending on your machine
1928:45 - depending on your settings etc it could
1928:47 - take a while so i'll just wait here and
1928:50 - do this
1928:52 - now it's running okay that's eight plus
1928:54 - that's great so now that's done now i'm
1928:56 - going to close this and stop the debug
1928:57 - process and say flutter select device
1928:59 - and choose iphone 13 from max
1929:02 - and do the same thing run without
1929:04 - debugging okay
1929:06 - and then
1929:08 - again depending on the machine that
1929:10 - you're running this command on this
1929:11 - process could take anywhere between a
1929:12 - few seconds to maybe even a minute or
1929:14 - even maybe more
1929:16 - so
1929:18 - i'm just gonna wait here for this
1929:20 - process to go through and um
1929:23 - while that is actually happening you'll
1929:25 - also need to know that you need to take
1929:26 - your screenshots on iphone 13 pro max
1929:29 - and iphone 8 plus in order to be able to
1929:31 - cover all the required screenshots for
1929:33 - app store connect so since we don't need
1929:35 - iphone 13 pro i'm just going to minimize
1929:37 - it right now into the taskbar and here
1929:39 - is iphone 13 pro max
1929:41 - so let's go ahead in here and take some
1929:43 - screenshots so i'm going to minimize
1929:44 - iphone 8 plus as well so we have this in
1929:47 - focus so what i'm going to do in here is
1929:49 - i'm going to go to this login field and
1929:51 - at the moment as you can see i can type
1929:53 - in this field because this is a
1929:54 - simulator but i don't see the keyboard
1929:57 - but in real life when users actually
1929:59 - download your application and run it on
1930:00 - their iphones they're gonna see a
1930:02 - keyboard so it is a lot more realistic
1930:04 - if we bring the software keyboard as
1930:07 - well on the screen so to do that on your
1930:09 - macintosh we'll just have to do command
1930:11 - k for keyboard and that will just bring
1930:13 - up the keyboard just like this so
1930:15 - what i'm going to do since i don't like
1930:17 - this carrot that at the moment is
1930:18 - blinking right there what
1930:20 - i'm going to do is just wait until that
1930:22 - carrot appears and just take a
1930:24 - screenshot of this iphone 13 pro max
1930:26 - simulator and the way to take a
1930:28 - screenshot on a macintosh on an iphone
1930:30 - simulator is to press command s as in
1930:33 - screenshot or save okay
1930:36 - so i'm just going to wait for this care
1930:37 - to go away
1930:38 - and sorry about that i'll just go also
1930:40 - here in desktop and remove everything
1930:43 - that was created already
1930:45 - so
1930:46 - here's the simulator and here's the
1930:47 - desktop then i'll wait for the care
1930:49 - and it went away i took a screenshot so
1930:52 - let's go ahead and do the same thing in
1930:54 - forgot password screen for instance
1930:56 - and i'm just going to wait for care to
1930:58 - go away took a screenshot
1931:01 - then let's go back to the login screen
1931:02 - and then to the register
1931:04 - and right here as the care disappears
1931:06 - i'm going to take a screenshot as well
1931:08 - so this is going to be our third
1931:09 - screenshot okay so we have a screenshot
1931:10 - of the login screen the register screen
1931:12 - and
1931:13 - the verify
1931:15 - or was it verified
1931:17 - i forgot my password sorry okay so now
1931:20 - i'm going to log in with a user that
1931:22 - already exists in the application so
1931:24 - that we can take a screenshot of the
1931:26 - main interface of the application as
1931:27 - well so i'm going to take a screenshot
1931:28 - of this with command s on my macintosh
1931:30 - and maybe for the fifth screenshot we're
1931:32 - also gonna take one from where you're in
1931:35 - the screen and editing your notes with
1931:37 - the keyboard up as well okay gonna wait
1931:39 - for the chara to go away and i just took
1931:41 - a screenshot right there as well so now
1931:43 - you should end up with five screenshots
1931:45 - for your application so if you have a
1931:46 - look at them they should kind of look
1931:47 - like this this this this this and ensure
1931:51 - that also you don't have that debug
1931:52 - manner by removing the debug show check
1931:55 - mode banner and after doing that if
1931:57 - you're already running a debug session
1931:58 - on your simulator for instance you have
1932:00 - to do a hot restart remember hot reload
1932:02 - is not going to take it's not going to
1932:04 - take the code in your main function into
1932:06 - effect all right so now we have five
1932:08 - screenshots in here so i'm going to go
1932:09 - back to app store connect and let's then
1932:12 - tap here or click here and view all
1932:14 - sizes in media manager okay
1932:16 - and let's go to choose file in here and
1932:18 - then choose all these screenshots and
1932:19 - i'm just gonna say upload
1932:21 - all right so now in here you have
1932:23 - basically the chance to reorder these
1932:25 - screenshots so i think i'm gonna put
1932:28 - maybe the login screen first then i'm
1932:30 - gonna go to the register and then forgot
1932:33 - password and i'm gonna then put the main
1932:35 - interface of the application
1932:37 - here and then the actual new node screen
1932:40 - okay so you can see at the moment when
1932:42 - uploading the six and a half inch
1932:44 - display screenshots the five and five
1932:46 - and eight inch display screen is also
1932:48 - using the six and a half
1932:50 - inch display screenshots so they're the
1932:52 - same screenshots so you don't have to
1932:54 - upload them again however then you have
1932:56 - this five and a half inch display and
1932:59 - which you also have to upload your
1933:01 - screenshots for and that is what we need
1933:04 - the iphone 8 plus for so
1933:08 - we i'm just going to minimize this and
1933:10 - then i'm going to bring up iphone 8 plus
1933:13 - to the screen
1933:15 - and we're going to do the exact same
1933:16 - process here so bring up the keyboard as
1933:19 - the carrot goes away take a screenshot
1933:21 - of login
1933:23 - sorry i'm going to go to
1933:24 - forgot password screen
1933:26 - carrot goes away take a screenshot then
1933:29 - i'm going to go to a register screen
1933:30 - carrot goes away screenshot and in the
1933:33 - login screen i'm going to log in with a
1933:36 - user that already exists in the system
1933:38 - if i can spell
1933:40 - and now
1933:41 - it's just
1933:43 - beach balling on me so
1933:45 - um
1933:46 - at oh
1933:47 - it's my keyboard by the way i can't see
1933:49 - the keyboard so i can see it's been
1933:50 - switched to unfortunately swedish so i'm
1933:52 - just gonna switch to
1933:55 - english here english
1933:57 - and
1933:59 - it's not helping me really so let's see
1934:02 - if it can switch to english
1934:05 - please
1934:06 - english
1934:07 - for some reason it's still showing the
1934:09 - swedish stuff in here and i don't really
1934:11 - know why so i'm just going to say
1934:13 - gmail.com and foo barbados okay
1934:17 - he's i mean
1934:18 - an iphone simulator is also software so
1934:20 - it could be buggy okay so then i'm gonna
1934:22 - take
1934:23 - let's see what screenshots we've taken
1934:25 - so three screenshots so far and let's go
1934:27 - to the main ui of the application take
1934:28 - another one with command s as i've
1934:30 - mentioned before and let's go here as
1934:32 - well into
1934:34 - oh is this screenshot gonna go away
1934:37 - soon hopefully
1934:39 - go away please
1934:42 - it's not gonna go away
1934:44 - please go away okay i think iphone 8
1934:47 - plus is having some problems so what i'm
1934:48 - gonna do is i'm just going to close it
1934:50 - and then say open simulator and let's go
1934:52 - to 8 plus and i can see after i close
1934:54 - the 8 plus simulator it actually saved
1934:56 - the screenshot so that's great all we
1934:58 - have to do is just to go back to our
1934:59 - application and right here in the screen
1935:02 - as the keyboard is displayed on the
1935:04 - screen after the carrot has disappeared
1935:06 - i'm going to take a screenshot
1935:07 - i'm not sure if i actually
1935:09 - did it at the right time without the
1935:10 - carrot on the screen so let's have a
1935:12 - look
1935:14 - please go away okay
1935:17 - so this is the screenshot so now we have
1935:19 - five screenshots on iphone 8 plus as
1935:21 - well so i'm gonna basically delete these
1935:23 - screenshots that we took from the iphone
1935:25 - 13 pro max right there and let's go to
1935:27 - the five and a half inch display section
1935:29 - here in app store connect and say choose
1935:31 - file and i'm then going to choose all
1935:33 - those screenshots that we took from
1935:35 - iphone 8 plus and reorder them so let's
1935:38 - say log in first then we have register
1935:41 - forgot password and then main interface
1935:43 - of the application and then new nodes
1935:45 - and this is exactly in line with what
1935:47 - we've done in here so it's just a good
1935:49 - idea usually to make sure that your
1935:51 - screenshots are lined up in the same
1935:53 - order for different devices okay so now
1935:55 - you can see all those
1935:57 - three other screens screen types are
1935:59 - using the iphone 8
1936:02 - plus i think simulators screenshots so
1936:05 - okay
1936:06 - yes iphone 8 plus so now we've uploaded
1936:08 - those so as you can see more screenshots
1936:10 - are already there now so iphone 8 plus
1936:12 - is also uploaded and we're done
1936:16 - so what we need to do now is to bring up
1936:18 - the ipad pro 12 inch simulator as well
1936:22 - so i'm going to go here to this
1936:23 - simulator and say file open simulator
1936:26 - and then say ipad pro
1936:29 - as you can see we have to bring ipad pro
1936:31 - 12 inch so i'm just gonna click on it
1936:34 - like that
1936:35 - let's go to um visual studio code and
1936:38 - say select device and then i'm gonna
1936:40 - choose that ipad pro as it is there and
1936:43 - then i'm going to stop the debug process
1936:45 - on the iphone 13 pro max and then say
1936:48 - run it on the ipad pro
1936:52 - and if you're lucky then this process is
1936:54 - actually going to go quite fast because
1936:56 - the application binary has already been
1936:58 - compiled and it should pretty much be
1937:00 - the same application
1937:02 - running on an ipad pro 12
1937:04 - 0.9 inches so
1937:06 - again depending on your machine this
1937:08 - process could take anywhere between a
1937:09 - few seconds to a few minutes even
1937:12 - and
1937:13 - let's see here so let's go in here and
1937:16 - you can see the first section in app
1937:18 - store connect for ipad is asking you to
1937:20 - upload
1937:21 - for ipad pro third gen which doesn't
1937:24 - necessarily have to be third gen any
1937:26 - ipad pro of 12 and a nine inch display
1937:28 - is going to suffice
1937:30 - so here's our application it this screen
1937:33 - is obviously ginormous so i'm gonna go
1937:35 - here bring up the keyboard and
1937:38 - take a screenshot and then go to forgot
1937:41 - my password take a screenshot then go to
1937:43 - back to login and in the register screen
1937:45 - take a screenshot all where the carrot
1937:48 - has disappeared let's just double check
1937:50 - this and i'm going to remove the iphone
1937:52 - 8 plus screenshot so now we have three
1937:53 - on the ipad pro no carrot no carrot no
1937:56 - carrot and let's go now to the login
1937:58 - screen and i'm going to log in with an
1938:00 - existing user in here okay foo barbat
1938:04 - login and now you can see the main
1938:06 - interface of the application let's take
1938:07 - a screenshot of it and then go to the
1938:09 - first note bring the keyboard up like
1938:12 - this and without the carrot take a
1938:15 - screenshot i actually think i
1938:17 - i um captured the carrot unfortunately
1938:19 - in this last screenshot and i can see a
1938:21 - little bit of glimpse of it there so i'm
1938:23 - gonna delete that and
1938:25 - i think i did it actually again to take
1938:28 - a screenshot basically
1938:30 - of the same screen with the carrot
1938:33 - so let's see
1938:34 - if the ipad's going to help us soon
1938:36 - where's the screenshot there
1938:38 - i can see the carrot again a little bit
1938:40 - so this is a tough one now all right i
1938:43 - think i got it this time
1938:45 - so let's just wait for the screenshot to
1938:47 - appear here
1938:48 - okay
1938:49 - and there is no carrot so that's great
1938:51 - so now we have basically our screenshots
1938:53 - for ipad
1938:54 - 12 and a nine inch display let's go in
1938:57 - here and say choose file and i'm gonna
1938:59 - select all the screenshots for that ipad
1939:02 - and put them in order so i'm just going
1939:04 - to say the login screen first then
1939:06 - register then forgot password the main
1939:08 - interface of the application and then
1939:10 - the note screen okay so as you can see
1939:13 - the 11 inch display is using the 12 and
1939:15 - a 9 inch display so that's really great
1939:18 - however the ipad pro here the second gen
1939:21 - to 12.9 inch display um is
1939:25 - is i mean these it's not using this 12
1939:28 - and a 9 inch display of this ipad so
1939:31 - what could we do here can we go in here
1939:33 - and say choose file and upload the same
1939:35 - screenshots again and it seems like we
1939:37 - can so that's not a problem let's just
1939:39 - reuse the same because it's the same
1939:41 - screen size so it's a bit strange that i
1939:44 - app store connect is not automatically
1939:46 - using this 12 inch
1939:48 - ipad screenshots for also this 12 and a
1939:51 - 9 inch display even though they're the
1939:53 - same so i'm going to bring login to the
1939:54 - left then i'm going to bring register
1939:56 - here for god password like that and then
1939:59 - the notes and then the new note so now
1940:01 - you can see all your screens are now set
1940:03 - all the snap all this screenshots are
1940:05 - set for both iphone and ipad
1940:08 - so after uploading all our screenshots
1940:11 - then we can actually go and set the
1940:13 - basic information
1940:15 - of our application so
1940:18 - so let's go in here inside our app
1940:21 - information
1940:22 - okay
1940:23 - and you can see here there is a note and
1940:26 - that is called
1940:28 - sorry there's a name inside the app
1940:30 - information section then we have the
1940:32 - name of our application okay and then
1940:33 - the subtitle as you can see it says the
1940:35 - subtitle will be reviewed before it's
1940:36 - made available on the app store
1940:37 - unfortunately it doesn't tell you so
1940:39 - much information but every application
1940:40 - can have a short subtitle up to 30k up
1940:43 - to and including 30 characters so when
1940:45 - people search for my awesome notes for
1940:48 - instance in app store then they can
1940:49 - actually see both the name of the
1940:51 - application and a short subtitle so
1940:53 - let's say store
1940:56 - and store
1940:58 - your notes securely with an asterisk at
1941:01 - the end okay
1941:02 - so that's already set i can see so um
1941:07 - and then we could then after making
1941:09 - these changes
1941:10 - the app store connect expects you to
1941:12 - press the save button so that's also
1941:14 - good now we've set that
1941:16 - so let's go here in this section and go
1941:18 - to content rights and then set up
1941:21 - content rights information click on it
1941:23 - so it says apps that continue or access
1941:25 - third-party content must have all the
1941:27 - necessary rights to that content or be
1941:29 - otherwise permitted to use it under the
1941:30 - laws of each app store country or region
1941:33 - so we don't have third-party content
1941:35 - like we're not actually displaying any
1941:36 - videos that's coming from a third party
1941:38 - service so here we can just say no it
1941:40 - doesn't contain show or access third
1941:41 - party content
1941:43 - and after pressing the down button we
1941:44 - can also press the save button just to
1941:46 - ensure that everything is as saved
1941:49 - so what we need to do in here also um
1941:52 - let's see here
1941:54 - a privacy we also have and then we have
1941:56 - set age rating across all platforms so
1941:59 - let's go ahead and do that and say as
1942:01 - you can see here it says select the
1942:02 - level of frequency for each content
1942:04 - description that best describes your
1942:05 - application so we don't have any
1942:07 - violence so we say no realistic violence
1942:09 - none
1942:11 - uh prolonged graphic or sadistic
1942:14 - realistic violence i don't even wanna i
1942:16 - don't even to say say these things out
1942:18 - loud to be honest with you but what you
1942:19 - have to do is just to say none to all of
1942:21 - these because we don't have any like
1942:23 - medical information alcohol related
1942:25 - stuff so let's just say none to all of
1942:28 - these
1942:29 - and uh
1942:31 - contests and we don't have that either
1942:33 - so let's just say next does your app
1942:35 - contain unrestricted web access it
1942:36 - doesn't does your app contain instance
1942:38 - of gambling no and then we're saying
1942:41 - next and you can say our
1942:43 - age
1942:44 - rate rating result is that people of age
1942:47 - four plus can use the application and
1942:49 - here
1942:50 - make sure that your app is not made for
1942:52 - kids because remember applications that
1942:53 - are made for kids that have to actually
1942:55 - conform to specific standards in order
1942:57 - to make sure that eight kids of age four
1942:59 - plus are actually safe in the
1943:01 - application so
1943:03 - um what we could do let's see in here if
1943:05 - your app rates 12 plus or lower and you
1943:07 - believe it contents may not be suitable
1943:09 - for children under 17 you can manually
1943:11 - set the age rating to 17 plus so i'm not
1943:14 - sure about this to be honest with you
1943:15 - but i'm just going to leave it blank at
1943:17 - the moment and press the down button
1943:18 - okay and then we can press the save
1943:20 - button right here
1943:22 - so the next thing that we need to talk
1943:24 - about now is something called a support
1943:26 - url and support url is actually very
1943:28 - important and that actually appears i
1943:31 - believe in app
1943:33 - let's see
1943:34 - is it in
1943:38 - app information i believe
1943:40 - i think it is somewhere around here
1943:44 - ratings and reviews app privacy
1943:47 - pricing and availability
1943:50 - we haven't really come there yet but i
1943:52 - believe we have to submit that anyway
1943:54 - somewhere and it is here as you can see
1943:56 - so support url is actually very very
1943:58 - important as you can see marketing url
1944:00 - is not
1944:01 - optional sorry marketing url is optional
1944:03 - support url isn't a support url it's
1944:05 - basically a url
1944:06 - that needs to be hosted on your website
1944:09 - that users of your application if they
1944:11 - have any problem with it then they can
1944:12 - go to the support url and get some more
1944:14 - information about that okay
1944:16 - so i have previously created a support
1944:18 - url for one of my other applications in
1944:20 - my website so let's just say pixel sc
1944:23 - and then we're going to say support
1944:27 - chords library text okay and as you can
1944:29 - see here it's a little text document and
1944:32 - says if you have any questions about
1944:33 - this app you can drop us a line at
1944:34 - support pixel
1944:36 - dot
1944:37 - so you need to just ensure that you have
1944:40 - a support document that you can um
1944:44 - place in a website and then you can send
1944:47 - your users to that okay so
1944:50 - let's now go ahead and create a support
1944:52 - document so what i'm going to do in here
1944:54 - i'm just going to bring up literally
1944:55 - text edit on my macintosh you can bring
1944:57 - your um favorite hex editor um um
1945:01 - actually my tech favorite text editor is
1945:03 - visual studio code but in this case it's
1945:04 - just a simple text document so i'm just
1945:06 - going to use um normal text edit on
1945:09 - macintosh even if you're linux for
1945:11 - instance you can just use vim and create
1945:13 - or vi you can create a simple document
1945:16 - and let's i'm just going to basically
1945:18 - copy this and paste it in here and i say
1945:21 - contact support and thank you for using
1945:23 - my awesome
1945:26 - notes
1945:27 - because that's the name of our
1945:28 - application right it is my awesome notes
1945:31 - so i'm going to save this document and
1945:33 - i'm just going to say in here let's call
1945:35 - it
1945:37 - my awesome
1945:39 - notes txt and i'm going to save it on
1945:41 - desktop save all right
1945:44 - did it not save it
1945:46 - it is a little bit strange that it
1945:47 - didn't save it so
1945:49 - let me go back to this text now it saved
1945:51 - it
1945:52 - yeah it is right here okay so this is a
1945:54 - document now text file simple and i'm
1945:57 - going to go to my website control panel
1945:59 - as you can see here there's a support
1946:01 - folder
1946:02 - so i'm going to go into the support
1946:03 - folder and as you can see i already have
1946:05 - four text files in this pixelity se
1946:07 - website and i'm just going to
1946:10 - hopefully be able to drag a file in
1946:12 - there or maybe even upload so i'm going
1946:14 - to drag this file boom
1946:17 - and i can see it has uploaded now
1946:20 - and
1946:21 - seems to be it to be honest
1946:23 - so let me just go back and see i'm my
1946:25 - awesomenotes text file right there and
1946:28 - i'm then going to go in here and see
1946:29 - it's actually uploaded my
1946:31 - awesome notes
1946:34 - txt
1946:35 - and i can actually see it is uploaded
1946:37 - and it's there so
1946:39 - if you don't have a website which you
1946:41 - should if you're developing applications
1946:43 - for ios and android or even if you're
1946:46 - developing any applications and putting
1946:47 - it out for customers you should have
1946:49 - your own website and they're like very
1946:51 - cheap ways of grabbing
1946:53 - a website with cheap hosting i don't
1946:55 - want to go and like
1946:57 - sponsor various services and i'm even
1946:59 - not even gonna name what i'm using but
1947:02 - you can google that or
1947:04 - just search online for a cheap hosting
1947:06 - and creating a website of your own okay
1947:09 - but since this is the outside that's
1947:11 - outside the scope of this course i'm not
1947:12 - going to talk so much about that okay so
1947:15 - now we have this my awesome notes and
1947:17 - what we need to do
1947:19 - is to go ahead and add this support url
1947:22 - so i'm going to copy it here and go to
1947:23 - app store connect and in the support url
1947:25 - i'm just gonna save it there i'm gonna
1947:27 - press the save button okay
1947:30 - so
1947:31 - that's that and we also need to make
1947:33 - sure that we add some other information
1947:35 - in here promotional text description and
1947:37 - also keywords and etc okay so
1947:40 - these things are very important and we
1947:42 - need to make sure that we fill these out
1947:44 - so um let's see actually here okay
1947:48 - so in the promotional text let's just
1947:50 - enter in some information here as you
1947:51 - can see this commercial text lets you
1947:52 - inform your app store visitors of any
1947:54 - current app features without requiring
1947:56 - an updated submission okay so let's just
1947:58 - say
1947:59 - use
1948:00 - my awesome notes
1948:03 - in order to securely
1948:06 - store your notes in the cloud
1948:08 - all right and description and this app
1948:11 - sim this free app allows you
1948:14 - to
1948:15 - store your notes securely on the cloud
1948:18 - and
1948:19 - um
1948:20 - and that's it i mean they're very
1948:21 - similar to each other but that's okay
1948:23 - too
1948:24 - and for the keywords in here you have to
1948:26 - enter i think up to
1948:28 - it doesn't really say how many yes 100
1948:30 - characters you have and you have to like
1948:31 - comma separate your keywords in here so
1948:33 - i'm just going to say and notes and
1948:36 - secure
1948:38 - wow
1948:39 - and make sure you don't have to actually
1948:40 - have um
1948:43 - let's see boom
1948:45 - i don't think you have to have space
1948:46 - between them and i'm just going to leave
1948:47 - it like a notes secure cloud okay these
1948:50 - are my keywords so
1948:52 - i'm going to save this and remember
1948:53 - we're in here in the ios prepare for
1948:55 - submission section
1948:56 - so that's also done
1948:58 - and our app version is right there
1949:00 - copyright we can just say 2022 pixelity
1949:04 - uh
1949:05 - a b
1949:06 - all rights
1949:09 - reserved
1949:11 - okay these are just big words don't
1949:12 - worry about it
1949:14 - and um
1949:16 - and that is pretty much it so
1949:19 - um
1949:21 - i don't think we need to do so much more
1949:23 - to be honest with you in here
1949:25 - and uh we don't even have to have the
1949:27 - signing required for now
1949:29 - and
1949:30 - let's see and also need to go to contact
1949:32 - information in here so let's say
1949:34 - vandal
1949:35 - and my
1949:37 - last name
1949:38 - and then i'm going to enter some
1949:42 - fake phone number right now
1949:46 - something like that and here's my
1949:49 - support at pixelity
1949:52 - and like that
1949:53 - no signing required
1949:55 - and here where we have the version
1949:57 - release as you can see it says this app
1949:58 - version can be automatically released
1950:00 - right after it has been approved so
1950:01 - there you have a few
1950:03 - abilities to
1950:05 - how you want to actually release your
1950:06 - application so after you send your
1950:07 - binary to apple you can choose for apple
1950:09 - to either automatically release this
1950:11 - version
1950:12 - to all your users in the app store or
1950:14 - you can say manually release this
1950:16 - version meaning that after your
1950:17 - application has been
1950:18 - accepted by apple and approved by apple
1950:20 - you can go manually press the release
1950:22 - button wherever whenever it suits you
1950:24 - best
1950:25 - or you can say automatically release
1950:27 - this version after app review no earlier
1950:29 - now so you can set a date for it but
1950:31 - we're gonna say manually release this
1950:32 - version okay
1950:34 - and after all of this i'm just gonna
1950:35 - save this information right there and
1950:38 - let's now go to app privacy so this is
1950:42 - also very important to remember to do
1950:45 - because
1950:47 - i don't think
1950:49 - um
1950:50 - that we have actually
1950:52 - yeah i actually believe here now that
1950:55 - i can see that i've prepared some
1950:57 - information about this in the upcoming
1950:59 - chapter so
1951:00 - we're going to take care of privacy
1951:03 - policy in the next chapter so but know
1951:06 - that it exists right there and we have
1951:07 - to fix it soon
1951:09 - so then what we need to do is to
1951:11 - actually make a build for apple because
1951:13 - this is like the most important part and
1951:16 - and you need to make sure that you
1951:18 - followed like the first chapters of this
1951:20 - course where i talked about preparing
1951:22 - our application for ios there is a
1951:25 - chapter in the beginning of this course
1951:27 - where we actually talk about creating
1951:28 - our certificates and profiles and all of
1951:31 - that for
1951:32 - for ios distribution so i'm assuming
1951:34 - you've already gone through that so we
1951:36 - don't have to take care of that now all
1951:38 - right so let's go now to our application
1951:41 - in xcode let's see if i can bring up
1951:42 - xcode
1951:45 - it is somewhere around here
1951:47 - so there is our application and i'm just
1951:49 - going to go into runner and have a look
1951:52 - at signing and capabilities and release
1951:54 - and i can see that there is absolutely
1951:56 - no problem with this production
1951:58 - certificate and profile so what we need
1952:00 - to do in here to make a release for app
1952:02 - store is just to have a look at our
1952:04 - runner and here change the target to for
1952:06 - instance any ios device
1952:09 - and then we go to product and then we
1952:11 - say archive so
1952:13 - this archiving is then in turn gonna
1952:16 - create an ipa file for us and as i
1952:19 - mentioned in the beginning of this
1952:20 - chapter and this is the ipa file that
1952:22 - we're going to submit to apple
1952:24 - and
1952:25 - xcode is going to help you a lot with
1952:27 - that
1952:28 - i'm not sure if i'm a fan of that to be
1952:31 - honest with you i think xcode hides a
1952:33 - lot of details and usually i'm used to
1952:34 - like doing things in the command line
1952:36 - and doing things simply from visual
1952:38 - studio code for instance
1952:39 - but it is still a good thing that xcode
1952:41 - is going to help you submit your
1952:42 - application because
1952:44 - in the previous versions of xcode like
1952:47 - many many years ago xcode couldn't do
1952:48 - this so you had a separate application
1952:50 - to actually upload your ipa files to app
1952:54 - and that in itself was also quite
1952:57 - a
1952:59 - i wouldn't say a negative body was
1953:00 - something that you have to go through
1953:02 - so
1953:03 - it is a plus and a minus that xcode is
1953:05 - going to take care of all of these in my
1953:07 - opinion at least so
1953:09 - i'm just going to wait here for xcode to
1953:12 - do its
1953:13 - work and it is very possible that if
1953:16 - this is the first time that you're
1953:17 - archiving your application with the
1953:19 - certificates
1953:21 - that you
1953:22 - basically created in the beginning of
1953:23 - this course it's very possible that
1953:26 - when the time comes for xcode to
1953:28 - actually sign your binary and all its
1953:31 - other related libraries
1953:33 - it's possible that your macintosh is
1953:35 - going to ask you
1953:37 - for the password to this certificate and
1953:40 - actually it's going to ask you for the
1953:41 - password to the keychain
1953:44 - in which on your computer this
1953:46 - certificate is stored so this is usually
1953:49 - the login keychain so if i go to
1953:51 - keychain access in here you'll see that
1953:54 - i have my login keychain and i have
1953:56 - certificates in here as you can see
1953:58 - distribution so
1954:00 - this is the sort that i'm at the moment
1954:01 - using for duplication and um after
1954:04 - assigning this as you can see it's
1954:06 - archiving right hasn't really signed
1954:08 - things it's very possible that my
1954:10 - macintosh is going to ask me for the
1954:12 - password to that keychain so
1954:15 - it's very close now to
1954:17 - finishing the archiving process so
1954:20 - excuse me
1954:22 - so let's see basically how it goes after
1954:24 - after doing that after actually creating
1954:26 - our application ipa file we're going to
1954:28 - submit it to apple and that app is going
1954:31 - to be displayed then first inside here
1954:35 - in the build section of your
1954:37 - applications
1954:39 - store connect
1954:41 - view
1954:43 - so let's see if we get this password for
1954:45 - signing as i've mentioned here
1954:48 - at the bottom of the screen so 4660
1954:52 - or 70 files out of 5039 files to
1954:57 - compile and
1954:59 - creating our binary so it's very very
1955:01 - close let's just see if it can succeed
1955:04 - in doing that
1955:06 - and i can hear my macintosh um
1955:09 - and fans going full speed right now and
1955:11 - that's usually something you don't hear
1955:13 - on the latest uh
1955:15 - max or macbook pros because they're
1955:18 - usually so silent like the fan almost
1955:20 - never kicks in
1955:21 - but this is apparently such a heavy
1955:23 - process for this macintosh to perform
1955:26 - the faster googling full speed so
1955:30 - let's see if it succeeds
1955:32 - all right and here is where we're seeing
1955:34 - that dialogue that i was talking about
1955:36 - as you can see it says code sign wants
1955:37 - to sign using your van.hawa nippor in
1955:40 - your keychain to allow this enter the
1955:42 - login keychains password so it has
1955:44 - nothing to do with your certificate it's
1955:45 - just actually has everything to do with
1955:47 - your certificate but the password itself
1955:49 - is the login keychains password so
1955:51 - it's usually your computer's password so
1955:53 - i'm just going to enter that
1955:56 - and then i'm going to say always allow
1955:57 - all right so
1956:00 - after doing that hopefully xcode is not
1956:03 - going to bother me with this password
1956:04 - again however i know in some older
1956:06 - versions of xcode
1956:08 - it doesn't really understand when you
1956:10 - say always allow so when it comes to
1956:12 - signing your application you may have to
1956:13 - enter your
1956:14 - password up to like 20 times depending
1956:17 - on how many libraries your application
1956:18 - depends on so
1956:20 - i remember this vividly when i was
1956:21 - working at a company and a tester i was
1956:24 - telling that tester how to
1956:26 - compile an archive an application for
1956:27 - ios and we both thought that he's
1956:29 - entering his password for his
1956:31 - certificate incorrectly so and here now
1956:34 - we got
1956:35 - module shareplus not found and
1956:38 - what could that be because shareplus is
1956:41 - basically something that we're using in
1956:44 - our application
1956:45 - as
1956:46 - and it's continuing to archive even
1956:48 - though it it says that something's
1956:50 - failed so all right so now we got an
1956:52 - issue here with pods runner framework
1956:55 - and this could seem i mean i'm actually
1956:56 - quite glad that we're getting these
1956:57 - errors and that could some and be
1956:59 - because we haven't done a proper pod
1957:01 - install so what i'm gonna do is go to
1957:04 - visual studio code here and in the
1957:06 - terminal then let me actually change the
1957:08 - screen layout a little bit so you see
1957:09 - what i'm doing
1957:10 - so i'm gonna bring this up so you see
1957:12 - better what i'm doing and i'm going to
1957:13 - go to the ios folder
1957:16 - here
1957:18 - okay and then in here you could just say
1957:20 - pod d integrate
1957:22 - basically pod the integrate it's going
1957:24 - to remove all your ios dependencies from
1957:26 - your workspace and then you could just
1957:28 - say pawn install okay
1957:29 - and this is gonna reinstall all your
1957:31 - dependencies from scratch so
1957:33 - let's see and i can see share plus is
1957:35 - actually installed now so it's
1957:37 - generating the pods project
1957:39 - and
1957:40 - great so that seems to be fine so let's
1957:43 - go in here and see if we can
1957:45 - uh do a clean so i'm gonna go to debug
1957:49 - sra product clean build folder and let's
1957:52 - see if we can make a fresh build and
1957:54 - this could actually take some time
1957:56 - because now we've really
1957:58 - uh cleaned the build art artifact so
1958:01 - it's gonna basically start the archiving
1958:03 - process from absolute beginning so
1958:05 - i'm just gonna be quiet for a while and
1958:07 - let us do its work and let's see if the
1958:09 - archiving process succeeds
1958:12 - okay so here's the result of actually
1958:14 - archiving our application again and
1958:16 - we're seeing the exact same problem now
1958:19 - after doing a podly integrate and also
1958:21 - doing a completely new pod install so
1958:24 - we're seeing the exact same problem with
1958:26 - share plus say module share plus not
1958:28 - found and this could be a problem with
1958:31 - how we've done for instance our
1958:33 - um
1958:35 - pub get
1958:36 - and to be honest with you i could cut
1958:38 - this out of this whole video but i'm so
1958:40 - so glad that we're seeing these problems
1958:42 - because
1958:44 - archiving an ios application and simply
1958:48 - it's
1958:48 - not always going to go fine even just
1958:50 - doing the same thing for android it's
1958:52 - not always going to go fine and
1958:54 - if i cut this out of this video you you
1958:56 - will be thinking that everything is
1958:57 - going fine for me but things are not
1958:58 - working for you and then you'll start
1959:00 - blaming yourself but i really want to
1959:02 - keep these stuff in this course so you
1959:05 - see that well a person like me trying to
1959:07 - tell you how to do things also needs to
1959:09 - understand himself how and why these
1959:12 - things are going wrong so
1959:14 - in my guess in this case since we've
1959:16 - already done a pod install it would be
1959:18 - to actually go and clear the
1959:20 - build folder for our entire flutter
1959:22 - application and also do a
1959:24 - flutter pop get from scratch so
1959:27 - let's go ahead in our flutter
1959:29 - application in here and at the bottom
1959:31 - i'm just going to say fluffer clean
1959:34 - and that's going to clean the artifacts
1959:35 - for ios and android
1959:37 - okay
1959:38 - and then you're going to get a lot of
1959:40 - errors in your application because then
1959:41 - it doesn't understand anything so we
1959:44 - then say flutter pop get
1959:47 - all right
1959:49 - so that's gonna do its work and get all
1959:51 - your dependencies from scratch basically
1959:53 - and install them in your application
1959:55 - all right then what i'm gonna do in here
1959:58 - is to
1959:59 - yeah we could just leave it like that
1960:01 - now and go back to our xcode and then
1960:04 - try to archive the application from
1960:06 - scratch let's see let's see if this time
1960:09 - it goes a little bit better and
1960:11 - hopefully it shouldn't take so much time
1960:14 - this time but you never know with xcode
1960:16 - and
1960:18 - with ios development it has its own
1960:20 - antiques so let's just wait and see
1960:22 - after doing a pop get if this process is
1960:24 - going to go through or not so after
1960:27 - xcode has compiled the application again
1960:29 - i could see the same problems as as we
1960:31 - had before so meaning that our pod the
1960:34 - integrate and flutter clean really
1960:35 - didn't have so much effect on the
1960:38 - application itself now since i've been
1960:40 - doing ios development for a very long
1960:42 - time i still have some tools in my in my
1960:44 - belt that i can drag out and use
1960:47 - and one of the first things i would use
1960:49 - as a software engineer and an ios
1960:51 - developer is just to first have a look
1960:53 - at
1960:54 - our deployment ios version and here
1960:56 - we're supporting ios 9 and it's very
1960:59 - well possible that this
1961:01 - sharing capability that is built into
1961:03 - the plugin that we're dragging into our
1961:05 - application isn't compatible with this
1961:07 - ios version so first i'm going to bump
1961:08 - this to ios 13
1961:10 - at the moment at the their ios 13 14 and
1961:13 - 50 are very popular so there are the
1961:15 - latest versions of ios at the time of
1961:17 - recording this um course so first i'm
1961:19 - going to do that
1961:21 - the next thing that i'm going to do is
1961:23 - to from our project in here so i'm
1961:26 - having a look here as you can see i'm in
1961:29 - the ios folder of this notes project so
1961:32 - let's go in there
1961:34 - then the first thing i'm going to do is
1961:36 - to perhaps remove the um i wonder if i
1961:39 - should actually remove the pod file as
1961:41 - well
1961:43 - maybe let's just remove the podfile.lock
1961:46 - and remove also all the pots from the
1961:49 - project okay so then i'm gonna do
1961:51 - fluster clean in here
1961:55 - that removed really all the pots from
1961:58 - the project
1961:59 - and then after undoing that i'm going to
1962:03 - have actually a look at our pot file to
1962:06 - have a look at all our ios dependencies
1962:09 - and see how they look like so i'm going
1962:10 - to stop the execution of the program and
1962:13 - then i'm going to open a file called pod
1962:15 - file and this is where all your ios
1962:16 - dependencies basically are stored as you
1962:18 - can see the platform is ios 13. so it
1962:21 - was strange that our deployment target
1962:23 - was ios 9 so this could be a potential
1962:26 - source of problem
1962:27 - and after doing that then we have our
1962:30 - pod file and yeah this this looks fine
1962:32 - as it is so
1962:34 - um let's then go after into the terminal
1962:38 - and after flats are clean let's just say
1962:40 - flop
1962:41 - flutter pop get
1962:43 - which is going to redrag
1962:45 - our dependencies into our flutter
1962:48 - project and ios project for instance
1962:50 - then and we can then go back i'm
1962:53 - actually going to kill xcode and open
1962:55 - the ios folder and open the
1963:00 - project workspace again and i can see
1963:03 - here at the moment the pods aren't
1963:04 - really installed so let's go and do the
1963:07 - installation of pods ourselves so i'm
1963:09 - going to say pod install this is going
1963:11 - to install all the dependencies and
1963:13 - let's have a look in here and say what
1963:15 - it is talking about
1963:17 - cloud fire support as far as store using
1963:19 - firebase is defining okay those all look
1963:21 - fine here says coco pods didn't see the
1963:23 - base configuration of your project
1963:24 - because your project already has a
1963:25 - custom config set in order for cocoapods
1963:28 - integration to work at all please either
1963:30 - set the base configuration of the target
1963:31 - runner to target support files blah blah
1963:33 - blah or include the target support files
1963:37 - in your build configuration so this
1963:39 - could actually be very important as we
1963:41 - can see in here so maybe
1963:43 - there was a problem in setting up our
1963:46 - project with flutter create when we said
1963:48 - we created our application to begin with
1963:50 - but let's just keep this in mind and try
1963:53 - to
1963:56 - go in here and open our workspace one
1963:59 - more time and now i can see all the pods
1964:01 - are in here
1964:02 - development pods okay
1964:05 - share plus is right there pod okay
1964:09 - and the pod spec what is the pod spec
1964:10 - says it actually says the platform
1964:12 - should be ios 8 so it supports ios 8 so
1964:14 - that's not a problem so what i'm going
1964:16 - to do now is after doing all these
1964:18 - things i'm going to basically try to
1964:20 - build this project again so i'm going to
1964:22 - do a clean here clean build folder with
1964:24 - command shift k so blink basically clean
1964:28 - your build folder and
1964:30 - all while all of this is going on
1964:33 - editor functionality that's that's fine
1964:35 - so i'm going to basically start doing a
1964:38 - um
1964:39 - product and archive again and then i'll
1964:42 - see you on the other side either this
1964:44 - succeeds or fails and if it fails we're
1964:46 - gonna fix it so let's have a look
1964:48 - okay now i can see
1964:50 - after doing all the gymnastics that i
1964:52 - just had to do
1964:54 - then our application has finally
1964:56 - compiled without a problem and to be
1964:59 - honest with you this is one of the
1965:00 - things that i believe many courses are
1965:02 - missing in that
1965:04 - when you go through distributing your
1965:06 - application you actually go through a
1965:08 - lot it's not just that you press a
1965:09 - button and submit your application and
1965:11 - you're done well usually if everything
1965:13 - is set up correctly then that is the
1965:16 - case however you have to set up
1965:18 - everything correctly
1965:19 - so what happened in here is that we have
1965:21 - to issue a few things what i did
1965:25 - just to name them step by step is that i
1965:28 - first bumped the
1965:30 - deployment target of our application
1965:32 - from 9 to 13. so you can find that by
1965:35 - clicking on your workspace in xcode then
1965:37 - clicking on your runner target general
1965:40 - tab in here and then the deployment
1965:42 - information i bumped it to ios 13 so
1965:44 - that's the first thing that i that i did
1965:47 - however i don't think that that
1965:48 - necessarily had anything to do with
1965:50 - fixing this problem
1965:52 - the other thing that we did from
1965:54 - terminal was to clean
1965:56 - all our pots and i did that by saying
1965:58 - rmrf pods
1966:00 - now we issued that command from the ios
1966:03 - folder if i open this ios folder you'll
1966:06 - see that there is a folder in here
1966:07 - called pods what are pods pods are
1966:10 - basically your applications dependencies
1966:12 - for ios that's how flutter manages your
1966:15 - ios application dependencies so all
1966:18 - these libraries for instance like
1966:19 - firebase and this sharing library that
1966:22 - we just dragged in they're using
1966:25 - basically they are dependencies that
1966:27 - flutter manages using cocoapods which is
1966:30 - a third-party software and you have to
1966:32 - have cocoapods installed on your
1966:34 - computer in order to even be able to
1966:36 - interact with pods so there's lots of
1966:38 - information on the internet on how to
1966:40 - install cocoapods but it's usually
1966:42 - pseudo jam install cocoapods and i think
1966:44 - maybe you can even use homebrew to
1966:46 - install cocoapods but i usually use
1966:49 - sudo jam
1966:50 - or jam in this case but you need sudo
1966:53 - usually to install cocoapods so
1966:55 - so what we did we removed the pots
1966:57 - folder we removed the podfile lock which
1966:59 - for you who are like comfortable with
1967:01 - backing the web development with npm
1967:03 - this is this is like your package lock
1967:05 - file and if you're not comfortable with
1967:07 - back-end development basically a pod
1967:08 - file lock is a file that stores
1967:11 - information about all your dependencies
1967:14 - which are currently installed
1967:17 - whereas the pod file stores information
1967:19 - about which dependencies you need and
1967:22 - pod file log stores information about
1967:24 - the ones that are integrated right now
1967:27 - into your application so we remove that
1967:30 - just to ensure that on the next pod
1967:32 - install
1967:33 - all our dependencies will be freshly
1967:35 - installed and regardless of what is
1967:37 - inside the pod file lock so
1967:40 - there were a few steps that we had to
1967:41 - take but finally we manage oh also we
1967:44 - don't forget flutter clean we also
1967:46 - issued flutter clean so
1967:47 - after all these steps we finally managed
1967:50 - to build our application and as you saw
1967:52 - in this screen we came to this archive
1967:54 - section so
1967:56 - i want to have a look a little bit here
1967:58 - at my notes
1968:00 - to see
1968:01 - um
1968:03 - so yeah we've done the password signing
1968:05 - etc etc and now we basically
1968:07 - um
1968:09 - basically created this
1968:11 - ipa file in here so one you need to do
1968:13 - in here then you press the distribute
1968:15 - app button and say app store connect and
1968:17 - say send send
1968:19 - and this is going to do some analysis on
1968:20 - that binary for you
1968:23 - and it's this is going to connect to app
1968:25 - store connect
1968:27 - and some of you in here may immediately
1968:29 - get an error saying that well i don't
1968:30 - know how to connect and that's because
1968:32 - you haven't entered your
1968:34 - um
1968:35 - profile information in xcode if you go
1968:37 - to xcode preferences there is a section
1968:39 - called accounts and you need to ensure
1968:41 - that you basically add your app apple id
1968:44 - with your account in xcode for any of
1968:46 - that
1968:47 - for the distribution to actually work at
1968:49 - all so i'm going to say app store
1968:51 - connect here and next upload to app
1968:53 - store connect next
1968:56 - so let's go in there
1969:03 - okay
1969:05 - and it says okay upload your app symbols
1969:07 - manage version and build number i don't
1969:08 - really like that so we're gonna take
1969:10 - that off so we're not gonna use that
1969:12 - okay
1969:13 - and let me just make the screen a little
1969:14 - bit bigger and press next in here and
1969:17 - here you have to select your uh profile
1969:20 - and seems fine
1969:22 - press the next button in there and this
1969:24 - is going to contact app store connect
1969:26 - and depending on your application size
1969:29 - this could actually take quite a long
1969:31 - time for some of the applications that
1969:33 - i'm working on
1969:35 - not personally but for various companies
1969:38 - even with my thousand thousand download
1969:40 - upload um
1969:41 - [Music]
1969:43 - internet connection this process could
1969:45 - take a long time so let's see how long
1969:48 - it takes because you see during the
1969:49 - upload process it's not just uploading
1969:51 - your binary it's actually contacting
1969:53 - apple and
1969:54 - even validating a lot of your assets
1969:56 - like your images it's valuing your icons
1969:58 - it's valid validating even if you have
1970:01 - other resources in your application and
1970:03 - i believe it even checks like if you're
1970:05 - making any
1970:06 - api calls which you shouldn't be making
1970:08 - and i'm not talking about network api
1970:10 - calls but i'm actually talking about ios
1970:12 - sdk api calls for instance if you've
1970:14 - hidden some work in your application
1970:16 - which is making uh calls to some um
1970:20 - private apis at the ios sdk level so
1970:24 - now we're just gonna let it do its thing
1970:26 - and upload
1970:28 - and um we'll just wait until it's done
1970:31 - okay well the upload process seems to
1970:34 - have gone
1970:35 - actually a lot better this time and um
1970:39 - and i actually have to really confess to
1970:42 - something in here in that
1970:44 - the upload process for me took a very
1970:46 - very very long time i'm talking about
1970:49 - upwards of 30 minutes even though i'm on
1970:51 - a thousand thousand
1970:53 - um fiber optic
1970:55 - download the upload speed um for my
1970:58 - internet connection this still took a
1971:00 - long time and this could either be a
1971:02 - temporary bug a glitch on apple on
1971:05 - apple's app store connect website or it
1971:07 - could just be something that well from
1971:09 - now on things are gonna take a long time
1971:11 - you never know what apple so
1971:13 - that's unfortunate but at the moment
1971:15 - it's gone through and i can see that um
1971:18 - you will get this message telling you
1971:19 - that your app was uploaded successfully
1971:22 - okay
1971:23 - now let's talk about a um
1971:26 - a push notification email that you'll
1971:28 - receive from apple that will look like
1971:31 - this after submitting your application
1971:33 - you will probably receive an email from
1971:35 - apple that looks kind of like this
1971:37 - and in here as you'll see it says we i i
1971:40 - want more issues with recent delivery of
1971:41 - your application my awesome notes your
1971:43 - delivery was successful but you
1971:44 - mentioned you may wish to correct the
1971:45 - following issues in your next lorry
1971:47 - missing push notification entitlements
1971:49 - and
1971:50 - this may be a bit
1971:52 - troubling for some developers but this
1971:54 - is simply because we're at the moment
1971:55 - using firebase in our application on
1971:57 - firebase is
1971:58 - able to handle push notifications so
1972:00 - that you can send a push notification
1972:02 - from firebase console to your
1972:04 - users however our application isn't
1972:07 - taking advantage of push notifications
1972:09 - at the moment so
1972:11 - you can just disregard this email and
1972:13 - just
1972:14 - don't try to even fix anything because
1972:16 - all this email is saying is that we've
1972:18 - analyzed your binary it looks like you
1972:21 - are accessing some push notification
1972:22 - apis however you forgot to enable push
1972:25 - notifications for applications so and
1972:27 - this is simply because when you bundle
1972:29 - your application and send it to apple as
1972:31 - an ipa
1972:33 - which is something you probably didn't
1972:34 - actually look at but if you go to visual
1972:36 - studio code sorry if you go to xcode in
1972:39 - this archive browser right click on your
1972:41 - runner
1972:42 - and here and say show in finder you'll
1972:45 - see this xcode archive file and say show
1972:48 - package contents and in here you'll
1972:50 - probably see some products and
1972:51 - applications run our app so this whole
1972:53 - thing is like your ipa file that apple
1972:56 - has received now in this runner
1972:59 - application there is information about
1973:01 - what kind of like libraries it has
1973:02 - included in itself and you can actually
1973:04 - right click on run or app and say show
1973:06 - package contents and in here you'll see
1973:08 - all the frameworks that your application
1973:10 - ships with and you can see
1973:12 - firebase etc etc so
1973:14 - one of these frameworks
1973:16 - most probably one of the firebase
1973:18 - frameworks is internally using it has it
1973:21 - is using some apis related to push
1973:23 - notifications but that doesn't
1973:24 - necessarily mean that it is active and
1973:26 - it's actively being used
1973:29 - so that's just an email that apple tells
1973:31 - you that hey you may have forgotten to
1973:33 - do something but you can just disregard
1973:35 - from this email and say no i didn't
1973:36 - forget anything because we don't have
1973:38 - push notifications in our application
1973:40 - okay
1973:41 - so that's that email and
1973:44 - um
1973:46 - so that seems to be fine and after that
1973:48 - email you'll probably also receive an
1973:49 - email that looks like this telling you
1973:51 - that hey your application with this sku
1973:54 - has now been submitted and has completed
1973:56 - processing and this this email literally
1973:59 - means that after
1974:01 - this application's finished processing
1974:02 - you're able to install it on your ios or
1974:05 - mac device and you can test it as you'll
1974:08 - see in the next chapter but
1974:10 - as
1974:11 - we usually do in every chapter at the
1974:13 - end of every chapter we commit to what
1974:15 - we've done and we make sure that we
1974:16 - commit and tag those changes so
1974:19 - let me do some reshuffling on the screen
1974:21 - here
1974:22 - and let's go to and i'm going to close
1974:24 - xcode here like that go to our
1974:26 - application my notes to terminal and
1974:30 - let's just see git status
1974:32 - a few things change so i'm going to go
1974:34 - cd
1974:35 - get status in the main folder of our
1974:37 - application my notes because i was in
1974:39 - the ios folder so i just did cd dot dot
1974:43 - like this so now i'm in the main folder
1974:44 - grid status shows this and i'm just
1974:46 - going to say git add all right and let's
1974:48 - just have a look at our logs the last
1974:51 - commit was step 28 so let's just think
1974:53 - it's commit
1974:55 - step 29 as a caption at the bottom
1974:57 - screen indicates and we just push our
1974:59 - changes
1975:01 - after that is now let's just tag our
1975:03 - changes as well and say step 29
1975:05 - and hit push
1975:07 - tags just like that
1975:10 - all right so that is now working as
1975:14 - expected so
1975:15 - what uh we usually at the end of it at
1975:17 - the end of every chapter is that we talk
1975:19 - about what we when we are going to
1975:20 - discuss in the following chapter and
1975:22 - what we need to do in the next chapter
1975:24 - is actually release our ios application
1975:27 - we've sent it now to apple and apple has
1975:29 - finally finished processing that and
1975:32 - build meaning that it's ready now to be
1975:34 - actually submitted to apple and that's
1975:37 - what we're going to do in the next
1975:38 - chapter to submit the app
1975:40 - for release to the app store so i'll see
1975:43 - you there hello everyone and welcome to
1975:45 - chapter 48 of this flutter course in
1975:47 - previous chapters we've been working
1975:49 - with
1975:50 - creating an ipa file and sending it to
1975:51 - apple and in this chapter we're going to
1975:54 - make sure that we're releasing that ipa
1975:57 - file meaning that we're going to tell
1975:58 - apple that hey we're ready with this ipa
1976:01 - file and we want you to
1976:02 - um review
1976:04 - this file for us and the review process
1976:06 - for apple and and google are a little
1976:09 - bit different in that for instance with
1976:11 - apple sometimes uh there's an actual
1976:13 - user looking at your application and
1976:15 - sometimes if you for instance request a
1976:17 - um a fast review from apple they may not
1976:20 - even look at it and they may just say
1976:21 - okay it just works it's it doesn't crash
1976:24 - and then they it just goes through
1976:26 - um and for google it could also be a
1976:29 - completely different process but
1976:30 - we're right now in this chapter we're
1976:32 - going to focus on how ios app app
1976:34 - submission basically works okay
1976:37 - so
1976:38 - when you send an ipa file like we've
1976:41 - done to apple it will be available in a
1976:44 - place called test flight so let me bring
1976:46 - our web browser to the screen and let's
1976:50 - go and see if we can if you can actually
1976:54 - bring the
1976:56 - views as we had before so let's see app
1976:59 - store connect and i've restarted my
1977:01 - computer since last time so i may have
1977:03 - to basically
1977:06 - log in again and thank god i didn't
1977:08 - actually have to restart the whole
1977:10 - process and actually grab my security
1977:12 - key in here so
1977:14 - it just allowed me to log in so let's go
1977:15 - to my awesome apps in app store connect
1977:17 - and then you'll see a tab up here called
1977:19 - test flight
1977:20 - and test flight as you'll see now our
1977:22 - build then is available in here
1977:25 - and it's ready to be tested basically
1977:28 - so
1977:30 - what we need to also do is to go in here
1977:32 - in the missing compliance and then tap
1977:34 - on this manage and it says does your app
1977:36 - use encryption select yes
1977:38 - and and it says export logs require that
1977:39 - products containing encryption must be
1977:41 - uh properly authorized so in here we
1977:44 - could just say yes
1977:46 - and it says export compliance does your
1977:48 - app
1977:49 - qualify for any of the exams provided in
1977:51 - the category make sure that your app
1977:52 - meets the criteria actually we could go
1977:54 - previous and just say no in here because
1977:55 - we're not directly using um
1977:58 - if you it is your responsibility to
1978:00 - comply with export regulation and you
1978:01 - should revisit this question if your
1978:03 - encryption exists i'll just say blah
1978:05 - blah blah okay
1978:06 - now okay and then we say start internal
1978:09 - testing okay so now that compliance
1978:11 - error is going to go away
1978:13 - so now that we've done that you'll see
1978:15 - that here in app store connect there is
1978:17 - a section called test flight and in here
1978:19 - you have the ability to
1978:21 - for instance invite third-party testers
1978:24 - to your um
1978:25 - to test your application and you are
1978:28 - also allowed to
1978:30 - give access to your application to users
1978:34 - who you've invited to app store connect
1978:36 - so it is very very important to
1978:38 - understand the difference one is
1978:39 - internal testing and the other one is
1978:41 - like if you want to submit your
1978:43 - application to be tested by third
1978:45 - parties like someone who doesn't work
1978:46 - for your company for instance so in this
1978:48 - case we're just going to use internal
1978:50 - testing in this chapter but just know
1978:52 - that test flight
1978:53 - is on ios and mac os an application that
1978:57 - you can actually download on those
1978:58 - operating systems
1979:00 - and you can use test flight in order to
1979:02 - test your own ios applications or mac
1979:05 - applications before
1979:07 - you submit them to app store okay
1979:11 - so that's where test flight
1979:14 - now that we're talking all about all
1979:15 - these let's just also make sure that we
1979:18 - know we have a little bit of a security
1979:20 - problem
1979:21 - um we haven't really talked about it so
1979:23 - much yet but i i built this um with uh
1979:27 - uh in swedish you say midfield and that
1979:30 - is like intentionally intentionally i
1979:32 - built this into this course so you'll
1979:35 - see how the resubmission process also
1979:37 - works so
1979:38 - if if we bring our code let's let's
1979:41 - bring our mynotes code in here
1979:43 - and have a look at our
1979:45 - um i believe was one of our services
1979:48 - notes service
1979:50 - oops
1979:51 - no service is completely oh because that
1979:53 - was the crowd service so
1979:55 - let's have a look at the service and
1979:57 - cloud note and we have
1979:59 - crowd cloud storage cloud firebase cloud
1980:03 - storage it's called okay i'd forgotten
1980:05 - the name and we had this little all
1980:07 - field in here you see
1980:10 - so what this all field at the moment is
1980:12 - doing is saying that go get all the
1980:16 - notes in
1980:17 - all the notes in the notes collection
1980:20 - so that's doing that and then from all
1980:23 - the notes remember all the notes not
1980:25 - only your notes
1980:27 - it's taking and creating a cloud note
1980:30 - and then it's filtering them out by who
1980:33 - you are that is a huge security problem
1980:37 - because
1980:38 - by doing this subscription and getting
1980:40 - this stream you're pretty much reading
1980:41 - everyone else's notes as well what we
1980:44 - want soon we're gonna fix that don't
1980:46 - worry about it what we want is to not
1980:48 - even allow any user to read someone
1980:51 - else's notes okay and then we're going
1980:53 - to change this
1980:54 - implementation of all notes and resubmit
1980:57 - our application to apple
1980:58 - so
1980:59 - i didn't want us to submit an app to
1981:01 - apple and then to google and then have
1981:03 - to resubmit it in both platforms because
1981:05 - as i said planned this so i just wanted
1981:06 - us to submit something only to one
1981:08 - platform and then draw it back and then
1981:10 - send it again but don't worry about this
1981:12 - yet i'm just giving you some preparation
1981:14 - of what's to come
1981:16 - so
1981:18 - what we need to do now first is to as
1981:20 - the caption at the bottom of the screen
1981:21 - in the case we need to install test
1981:23 - flight for both ios and you also have to
1981:25 - install it for um
1981:28 - your mac on on the mac you can just go
1981:30 - to app store on your macintosh so app
1981:33 - store app and then search for test
1981:36 - flight okay
1981:38 - after
1981:39 - search for test flight you can install
1981:41 - it with this install button i have it
1981:42 - installed already on my computer so i
1981:44 - don't see a install button in here i can
1981:46 - just open it
1981:48 - and after you've done that um for your
1981:50 - macintosh you'll also need to install it
1981:54 - for your um
1981:55 - ios device and here
1981:58 - i actually have my iphone my little
1982:01 - iphone 13 pro max here
1982:03 - and i have i'm
1982:06 - mirroring that iphone here on the screen
1982:08 - as you can see so what you can see on
1982:09 - the screen is actually my iphone right
1982:11 - here okay
1982:12 - and test flight is an application which
1982:15 - is available right here so this is the
1982:17 - test flight application on ios so at the
1982:19 - moment you can see that i don't have
1982:20 - access to my nodes application but we're
1982:23 - going to fix that soon or my awesome
1982:26 - notes as we call it okay
1982:28 - so let's go ahead in here and have a
1982:30 - look at the next thing we need to talk
1982:32 - about and that's adding a user to to
1982:34 - test light so how do i get access to um
1982:38 - to
1982:39 - this build that we've submitted so that
1982:41 - i can test it with test flight well the
1982:44 - user that i've used for testing in here
1982:47 - and i know that user it's
1982:48 - pixelity.sweden
1982:50 - gmail.com so what i'm going to do now is
1982:53 - to invite that user to test this build
1982:56 - so let's go to internal testing and
1982:58 - press the plus button and in here i'm
1983:00 - just going to say my users okay
1983:03 - and then press the create button
1983:05 - and in here you'll see a plus button
1983:07 - tester 0 and i'm just going to say plus
1983:10 - and in here i'm just going to use a
1983:12 - pixel to switch so i'm just going to say
1983:14 - add in here
1983:15 - okay and it says one tester has been
1983:17 - added to this group and that's pretty
1983:20 - much it so i don't have to do anything
1983:22 - extra there
1983:23 - so what i'm gonna do then is going to
1983:25 - wait for um an email to be sent by app
1983:29 - store connect to my user and it's just
1983:31 - been sent i'm gonna open it so you can
1983:33 - also see it how it looks like here's the
1983:35 - email that i just received so app store
1983:37 - connect is telling me that hey you've
1983:39 - now been invited to and test this
1983:41 - application and you can just go ahead
1983:43 - and do it so i'm just gonna tap on view
1983:45 - in test flight and this is just gonna
1983:47 - work because i already have um
1983:50 - basically a test light installed on my
1983:53 - macintosh so let me just tap on that and
1983:55 - i can see test flight open on a separate
1983:57 - screen i'll bring it to the screen here
1983:59 - and i can accept in basically installing
1984:05 - this application so as the bottom
1984:08 - as the bottom captioning indicates we've
1984:09 - already looked at the email
1984:11 - it looked like this and now we're going
1984:14 - to install this application which is a
1984:16 - flutter application
1984:18 - but we're installing it on a macintosh
1984:20 - and that's just great so let's just
1984:22 - accept this and you can see now i can
1984:24 - either say install or done so i'm just
1984:26 - gonna say done so you see it so this is
1984:28 - our application here and i'm just gonna
1984:30 - press the install button and this is
1984:32 - just gonna go to app store connect and
1984:34 - grab that binary and bring it down
1984:38 - so and i can just press the open button
1984:41 - and if everything goes well this is our
1984:44 - flutter application running on this
1984:47 - macintosh
1984:48 - but it is an ios app we didn't actually
1984:51 - compile this to be running on a
1984:52 - macintosh so everything is just working
1984:54 - as it should i can even log in here
1984:58 - right like that
1985:01 - and then in here it's a foo bar bass
1985:04 - log in
1985:05 - and i can see my note so it's working as
1985:08 - expected so i'm just going to close the
1985:09 - app now all right
1985:12 - so
1985:13 - what we need to do now is to submit this
1985:15 - build we've looked at it it seems to be
1985:17 - working fine so i'm just going to close
1985:18 - test flight here and close this email
1985:20 - let's then go to app store connect and
1985:22 - let's go to this app store section in
1985:24 - here and in this ios app section here
1985:27 - 1.0 prepare for submission let's scroll
1985:29 - down to the place that says build and we
1985:32 - need to then say select a build before
1985:34 - you submit your app okay now
1985:36 - remember uh
1985:38 - if you don't see this blue button in
1985:40 - here that's because you've probably just
1985:42 - submitted your bill to apple
1985:45 - apple usually takes up to 30 minutes or
1985:46 - sometimes even more to validate your
1985:49 - build so they may not have even appeared
1985:51 - in here especially if it's the first
1985:53 - build that you're
1985:54 - sending to apple it may take a while for
1985:56 - them to process it so you may not see
1985:59 - this button simply because there is no
1986:01 - valid build yet but you can test you can
1986:04 - check the status of your builds by just
1986:06 - going to this test flight section and
1986:08 - just having a look at the version that
1986:10 - you've submitted and if there is if that
1986:13 - build is still processing it will just
1986:15 - say uh paranthesis processing and the
1986:17 - icon will just be a little bit grayed
1986:19 - out okay so don't worry it's not there's
1986:21 - nothing wrong you just have to wait a
1986:23 - little bit
1986:24 - so in here i'm just going to say select
1986:26 - a bill before you submit your app and
1986:27 - then say one that build that i'd
1986:29 - submitted all right so and then i'm just
1986:32 - gonna press the save button
1986:35 - so that's for the
1986:37 - build so age rating in app store connect
1986:40 - go to app information and fill in age
1986:42 - rating and i believe we've already done
1986:44 - this so if if you've not done that
1986:46 - before please go ahead and take care of
1986:48 - that but i explained this in one of the
1986:49 - previous chapters so you may have to go
1986:51 - and edit your age rating if you want to
1986:53 - but if you have followed the chapters
1986:56 - chronologically you should have done
1986:57 - this
1986:58 - by this point
1987:00 - okay
1987:02 - we also need to take care of our app
1987:04 - privacy so we need to go to app privacy
1987:06 - as the caption at the bottom of the
1987:07 - screen indicates and here we have to get
1987:10 - started by
1987:11 - filling out
1987:12 - our app privacy and
1987:14 - as you can see in here if you have an
1987:16 - application that collects a lot of data
1987:19 - you i don't want to scare you but you
1987:20 - may kind of be in trouble because you
1987:22 - will have to inform apple about all
1987:25 - those things what you're collecting from
1987:27 - the user okay
1987:29 - so let's let's in here let's say do you
1987:31 - or third party partners collect data
1987:34 - from this app then we should say yes in
1987:36 - here right because we are collecting
1987:38 - data and that is
1987:40 - the user's for instance email address
1987:43 - password and notes so let's just say yes
1987:47 - in here's a data types that meet all of
1987:49 - the following criteria are optional to
1987:51 - disclosure the data is not used for
1987:53 - tracking
1987:54 - we're not using it for tracking the data
1987:56 - is not used for third party we're not
1987:58 - doing that collection of data occurs
1988:00 - only in infrequent cases okay so we
1988:03 - pretty much are not
1988:04 - doing any of those tracking stuff that
1988:06 - they're saying here so
1988:08 - let's go in here and say data collection
1988:10 - yeah we're collecting your email address
1988:11 - and
1988:13 - that's it
1988:14 - we're not collecting any financial
1988:16 - information location
1988:18 - contacts user content
1988:21 - photos audio gameplay none of that
1988:24 - any other user generated contents yes
1988:27 - browsing history no search history no
1988:30 - user ids
1988:32 - screen name handle account id
1988:35 - yes we are
1988:37 - device id we're not
1988:39 - um
1988:40 - diagnosis crash data we're not doing
1988:42 - that at the moment
1988:43 - and other data so yeah this seems fine
1988:46 - so for now we can just say identifier to
1988:47 - user id we also said other user content
1988:50 - because we're collecting the users
1988:51 - generated notes and we're also
1988:54 - collecting their email address so let's
1988:55 - just say saving here
1988:57 - okay and it says additional setup
1988:58 - required so let's go ahead and fix those
1989:02 - now in email address let's go set up
1989:04 - email address so i'm going to click
1989:05 - there and are we using it for third
1989:07 - party no
1989:08 - developer advertising no analytics no
1989:12 - product personalization
1989:14 - customizing what the user sees such as a
1989:16 - list of recommended products for no
1989:19 - app functionality yes that's what we're
1989:22 - doing so press next
1989:24 - and are the email addresses collected
1989:25 - from this app linked to the user's
1989:27 - identity
1989:28 - link to the yes email address collector
1989:32 - link to the user's identity
1989:35 - are there i mean this is this is a
1989:36 - little bit of a legal question so i'm
1989:38 - not best
1989:39 - um
1989:40 - placed here to
1989:42 - answer this but i mean an email isn't
1989:45 - necessarily connected to someone's
1989:47 - identity as a person because i can just
1989:49 - go create like a private email and no
1989:51 - one knows about so i'm just gonna answer
1989:53 - no
1989:54 - tracking email address
1989:57 - okay next
1989:59 - um
1990:01 - okay
1990:02 - doesn't seem like okay do you or
1990:04 - third-party partners use email addresses
1990:05 - for tracking purposes nope okay
1990:09 - and saved okay so
1990:11 - the email address stuff is saved now
1990:14 - let's go to other user content which is
1990:15 - the user generated notes okay so
1990:18 - indicate how other user content
1990:20 - collected from this app is being used
1990:23 - um advertising no analytics no
1990:25 - customization no and app functionality
1990:28 - of course
1990:29 - so let's then go and say is user content
1990:31 - collected from the sub link to the
1990:32 - user's identity
1990:34 - they're used they're linked to the
1990:36 - user's email and since we said email is
1990:39 - not linked to the user's identity i'm
1990:40 - just gonna reason to say no in here
1990:44 - do you or third-party partners use other
1990:46 - user content for tracking purposes nope
1990:50 - okay so that part is done as well then
1990:52 - let's go to identifiers for user id so
1990:54 - i'm just going to click there
1990:56 - and remember user id in here is that uid
1990:59 - that firebase creates okay remember that
1991:02 - so we're using that for app
1991:03 - functionality okay
1991:06 - are the user ids collected from this app
1991:08 - linked to the user's identity
1991:10 - user id
1991:12 - user identity
1991:15 - i would say yes it is quite obvious so
1991:17 - let's just say yes
1991:19 - do you or third party partners use user
1991:21 - ids for tracking purposes nope
1991:24 - nope
1991:26 - all right so saved and that's that now
1991:28 - you've gone through the privacy policy
1991:30 - and this is like that
1991:32 - basically what happens is
1991:34 - apple will
1991:35 - display this to users when they try to
1991:39 - download your application this is very
1991:41 - important that you fill in to the best
1991:43 - of your knowledge and ability this is
1991:45 - not the place that you go and fake
1991:48 - anything and say try to hide the
1991:50 - information that you're collecting from
1991:51 - the users it is in the in your best
1991:54 - interest in your product's best interest
1991:55 - and in your company's best interest to
1991:58 - make sure that you fill these in as best
1992:02 - as you can okay usually in bigger
1992:05 - companies you'd want to probably um
1992:07 - consult with a lawyer or somebody who's
1992:10 - um good at making sure you're not
1992:12 - missing anything so in a big company you
1992:14 - usually don't do this on your own but
1992:16 - since we're now assuming that you're a
1992:18 - simple like a single entity even if
1992:20 - you're behind an organization like me
1992:22 - but you're a single entity and trying to
1992:24 - do this to the best of your ability okay
1992:28 - so now what we need to do is also fill
1992:30 - in this um
1992:33 - let's see here privacy policy so
1992:36 - what this is as you can see in here a
1992:38 - url that links to the privacy policy
1992:40 - privacy policy is required for all apps
1992:43 - and as you can see at the bottom of the
1992:44 - screen i've actually included a little
1992:46 - privacy policy for my own website and
1992:48 - i've included that let's see
1992:52 - if i can log in in here
1992:55 - let's see if i can do it on a separate
1992:57 - window so you don't have to be bothered
1992:58 - by that
1993:03 - because i've actually included that um
1993:08 - you know what i will actually do it on a
1993:10 - separate screen so you don't have to be
1993:12 - bothered by that and um
1993:16 - so
1993:17 - i will go to
1993:21 - i'll go to my hosting website and i'll
1993:23 - take care of that and then i'll bring it
1993:24 - to the screen so you can actually see it
1993:27 - so
1993:29 - let's see if i can go to my hosting in
1993:31 - here and then go to my
1993:35 - hosting
1993:37 - basically
1993:39 - well all my file files are residing
1993:42 - excuse me
1993:43 - and i'll bring it in here so let's have
1993:46 - a look at this url that i provided at
1993:48 - the bottom of the screen you can see
1993:49 - pixel dsc privacy policy so i'm going to
1993:51 - go to
1993:52 - dub dub up there and i have a look at
1993:54 - this text file which is right there
1993:56 - privacy policy so if i type pixelity
1993:58 - excuse me privacy policy you see that
1994:01 - there is a generic privacy policy that
1994:04 - i've placed in my website
1994:06 - and you will need to do the same thing
1994:08 - so you'll need to basically grab a
1994:09 - privacy policy from somewhere and look
1994:12 - at that privacy policy and make sure
1994:14 - that it works for you so what i did is i
1994:17 - found a website
1994:18 - and i'm not just going to go advertising
1994:20 - here but you can find free privacy
1994:22 - policy written by a very good and smart
1994:25 - people and you can have a look at those
1994:28 - adjust them to make sure that they make
1994:30 - sense for you and your company and for
1994:32 - instance in here i've just taken a
1994:34 - generic privacy policy
1994:36 - let's see if i can find it here
1994:38 - so i put my company name in there and i
1994:40 - just ensure that it makes sense for my
1994:43 - company and i've just basically put it
1994:45 - inside that url that you can see at the
1994:47 - bottom of the screen so i'm going to go
1994:48 - in here at privacy and app store connect
1994:50 - and say privacy policy edit and in the
1994:53 - privacy policy url i'm just going to say
1994:54 - https pixelity
1994:57 - dot se and then i'm just going to say
1994:59 - privacy
1995:01 - policy.txt but for you this should be
1995:03 - something else okay and i'm just going
1995:05 - to copy that open it and make sure that
1995:07 - it exists and then i'm going to press
1995:09 - the save button okay
1995:12 - so after we've done that we also need to
1995:14 - make sure that we've taken care of our
1995:17 - categories the categories to which our
1995:20 - application belongs so let's go to app
1995:22 - information at the bottom of the screen
1995:24 - indicates i'm going here in the category
1995:26 - and the primary category we're going to
1995:27 - say our app belongs to productivity and
1995:30 - then it belongs to utilities okay
1995:33 - here utilities all right then i'm gonna
1995:36 - save this information
1995:39 - okay then what we need to also do before
1995:41 - we submit our app for review is that
1995:44 - just remember this application is going
1995:46 - to be reviewed by an actual human so
1995:50 - this person is literally going to get
1995:52 - this information in the queue of their
1995:54 - work they're going to say oh an
1995:55 - application called my awesome notes
1995:57 - needs to be reviewed
1995:59 - and then they're going to say okay
1996:00 - they're going to have some control panel
1996:01 - on their screen i don't know really how
1996:03 - it's formed on apple's site but they're
1996:06 - going to then download this application
1996:07 - on various devices automatically perhaps
1996:10 - and then they're gonna open the app and
1996:12 - then like how am i supposed to use this
1996:14 - app so
1996:15 - it is in your best interest to ensure
1996:17 - that you provide all information
1996:19 - possible to that person so that they can
1996:22 - review your application so what you need
1996:24 - to do then is to go inside app
1996:27 - here prepare for submission in here app
1996:28 - review information and then under notes
1996:31 - just tell that person
1996:33 - what your how your application works and
1996:36 - how they need to register so in here
1996:38 - what we're going to say is um
1996:40 - you you will need
1996:42 - a valid email address
1996:44 - in order
1996:46 - to register
1996:47 - please follow these
1996:49 - steps to register now i'm gonna say um
1996:51 - open the register view and register
1996:55 - with the email
1996:58 - and password of your choosing
1997:02 - you're choosing
1997:04 - wait for a confirmation email
1997:09 - wait for a confirmation email from
1997:12 - to be to be sent to your email address
1997:16 - and in the confirmation
1997:20 - click
1997:21 - on the link to confirm your email
1997:24 - address
1997:25 - okay and then step three is go back
1997:29 - to the app and in the login screen
1997:33 - log
1997:34 - in with
1997:37 - your email and password
1997:40 - and that's it so
1997:43 - we've done that now so i'm gonna
1997:44 - actually then provide a valid phone
1997:46 - number in here and since i don't want to
1997:48 - really share my like phone number
1997:50 - everywhere on the internet i'm just
1997:52 - going to
1997:53 - go on to a separate screen here and
1997:55 - write my valid phone number in here
1997:58 - um
1998:00 - but that's my phone number great and
1998:03 - let's then
1998:05 - go here and then i'm going to press save
1998:07 - button as well
1998:08 - and then bring the screen here perfect
1998:11 - so now i've saved that information
1998:13 - including my phone number and everything
1998:15 - should be ready at this point
1998:17 - so what you need to do then is to
1998:20 - go and grab some popcorn while you're
1998:22 - doing this hopefully and then you'll
1998:23 - just need to say submit for review
1998:26 - and
1998:27 - it says the items below need to be okay
1998:29 - we haven't really done the price pricing
1998:31 - and then it saw it says an admin must
1998:33 - provide information about the app's
1998:35 - privacy practices in app privacy section
1998:37 - it seems like we missed some stuff so
1998:39 - let's go to pricing and availability and
1998:42 - fix that this application is going to be
1998:44 - free so i'm just going to say it doesn't
1998:45 - cost anything and save that so that's
1998:47 - for pricing
1998:49 - and let's go to app privacy and see if
1998:51 - we've actually missed anything doesn't
1998:52 - seem like it but what we've forgotten is
1998:54 - to actually press the publish button so
1998:56 - let's just publish that
1998:58 - okay then we go back in here and then we
1999:00 - say submit
1999:03 - that's great so now your application is
1999:07 - submitted to app store and a reviewer
1999:09 - from the app store connecting is going
1999:11 - to have a look at your application so
1999:13 - that they can
1999:15 - confirm that it works according to the
1999:18 - information that you've provided and i
1999:20 - can see that i actually got an email
1999:22 - from apple that looks like this and it
1999:24 - says the status of your application has
1999:26 - changed to waiting for review so it's
1999:28 - not a waiting game so
1999:30 - um but before before we actually do all
1999:32 - of this we
1999:34 - whether apple has had the time to review
1999:37 - our application and
1999:39 - accept it
1999:40 - or they found some bugs in it and
1999:42 - rejected our application
1999:45 - whichever case we need to draw back this
1999:48 - build and i will show you how in the
1999:50 - upcoming chapters because we have the
1999:52 - security bug that i told you about so
1999:54 - for now we can just be happy that we've
1999:56 - gone through this chapter we've done
1999:57 - quite a lot of work
1999:59 - and um
2000:01 - pat yourself on the back just great job
2000:04 - and grab some uh
2000:06 - maybe a tea or coffee
2000:08 - and we can get start to actually get
2000:10 - ready for the next chapter and i'll tell
2000:12 - you actually what we need to talk about
2000:14 - in the next chapter and that is this
2000:16 - little um
2000:18 - problem that we had in the all notes and
2000:21 - we need to fix this before we can go
2000:24 - live with android as well so
2000:26 - now you know what's coming in the
2000:28 - upcoming chapters and um
2000:30 - i'll see you there hello everyone and
2000:32 - welcome to chapter 49 of this flutter
2000:34 - course in previous chapters we've
2000:37 - submitted our application to um
2000:40 - app store connect and
2000:41 - we also briefly talked about the fact
2000:43 - that we have a little bit of a security
2000:45 - problem in our firebase firestore
2000:47 - database
2000:49 - so let's have a look at what the actual
2000:51 - problem is so i explained this briefly
2000:54 - in the previous chapters but i'll do it
2000:55 - again in here so let's have a look
2000:57 - um so if this is our code i'm going to
2001:00 - increase the size so we'll see it better
2001:02 - and you'll see that when we are working
2001:04 - with displaying all the notes on the
2001:06 - screen for a user so for instance user a
2001:09 - has signed into the application
2001:11 - and inside our
2001:13 - notes view
2001:14 - if you go there we'll see that we're
2001:16 - subscribing to all nodes in here in our
2001:18 - stream builder so we're saying we're
2001:20 - basically building our entire list view
2001:23 - which is here now it's list view and
2001:25 - we're building it on top of the data
2001:27 - that comes from this all nodes function
2001:30 - which is at the moment inside our
2001:32 - firebase cloud storage okay
2001:34 - however if you look at this code you'll
2001:37 - see that what it is doing is referring
2001:39 - to this node's private um
2001:41 - or this node's local variable and which
2001:44 - is right here and this notes at the
2001:46 - moment is
2001:48 - pointing to the notes collection
2001:50 - and what it does it literally takes all
2001:54 - the notes from the notes collection so
2001:57 - this look this essentially means any
2001:59 - user logged into our application is
2002:02 - truly retrieving all the nodes in the
2002:04 - entire database
2002:06 - although
2002:07 - at the end of that code what we're doing
2002:09 - is saying we're okay after we retrieve
2002:11 - all the nodes from the database
2002:14 - then we're mapping them here to cloud
2002:16 - nodes so we can consume them locally
2002:19 - and
2002:20 - right at the end we're saying hey but
2002:22 - we're only interested in notes that are
2002:25 - for discard user
2002:26 - but
2002:27 - even though the current login user is
2002:29 - not going to see all the notes in the
2002:31 - database but the current user is reading
2002:34 - all the notes in the database and if you
2002:36 - perform a man in the middle attack for
2002:38 - instance if you're using charles proxy
2002:40 - on a computer and then you're
2002:43 - using your phone and you're using for
2002:45 - instance let's say you have charles
2002:46 - proxy on your computer and then you're
2002:49 - sharing your wi-fi connection from an
2002:51 - ethernet connection through wi-fi with
2002:53 - an iphone that is running your
2002:55 - application if i don't sit in the middle
2002:57 - with charles proxy and look at all the
2002:58 - traffic that's going from your flutter
2003:00 - application to firebase then i can
2003:02 - actually see you requesting information
2003:05 - about all those notes and then those
2003:07 - notes coming back to the application so
2003:09 - a man in the middle attack could
2003:11 - potentially then expose all data in our
2003:15 - database or in the notes collection at
2003:17 - least so we need to
2003:18 - we need to fix this so
2003:20 - what we're going to do is by is to start
2003:23 - by removing our application from app
2003:26 - store connect if you remember in the
2003:28 - previous chapters we sent our
2003:30 - application to apple for review and what
2003:33 - i've done in here i've developer
2003:35 - rejected this application essentially so
2003:38 - let me have a look and see if i can
2003:40 - increase the size of the screen so we
2003:42 - submitted our application to app store
2003:44 - connect for review from the apple um
2003:46 - team review team but right before it
2003:49 - actually went to review i refreshed the
2003:51 - screen in here and you didn't see this
2003:53 - but i said remove this application from
2003:55 - review if you remove your own
2003:57 - application from review basically it
2003:59 - will become this it will go to the state
2004:01 - developer rejected so this is basically
2004:04 - informing you that hey it's not apple
2004:06 - basically rejecting your application it
2004:08 - is you yourself who's done this so
2004:11 - so i can show you an example how
2004:13 - that
2004:14 - confirmation email from apple will look
2004:16 - like so i'll open it in a separate
2004:18 - screen
2004:20 - and it kind of looks like this i'll
2004:22 - bring it to this main screen so you see
2004:24 - it as well okay
2004:25 - all right
2004:26 - so there we go so then i received an
2004:29 - email from apple that said that status
2004:30 - of your app has changed to developer
2004:32 - rejected app name blah blah okay so
2004:36 - this is the email that you'll receive so
2004:38 - i need you to basically reject your
2004:39 - application
2004:41 - the version one zero that you sent to
2004:43 - apple because we have security problems
2004:45 - with that application okay and again
2004:47 - i've mentioned this in the previous
2004:48 - chapters i did this in on purpose so
2004:50 - that we can understand like someone
2004:52 - because this is the kind of stuff that
2004:53 - you're going to go through as a software
2004:55 - developer sometimes you're going to
2004:56 - submit something to apple or google and
2004:58 - then you understand you made a mistake
2005:00 - so how do you how do you fix that and i
2005:03 - really wanted this to be a part of this
2005:05 - um
2005:07 - course so you understand how you reject
2005:09 - your application how you fix the problem
2005:10 - and how you resubmit the application
2005:12 - okay but i didn't want to do it for both
2005:14 - ios and android because it just gets
2005:16 - boring if you have to submit first go
2005:18 - through the entire submission from two
2005:20 - platforms and then to submit again so
2005:21 - that's why we first submitted for ios
2005:23 - and then we're gonna fix it and then
2005:25 - once that's fixed we're also gonna
2005:26 - submit for android okay
2005:28 - so after rejecting your application you
2005:31 - also need to basically remove your build
2005:33 - from this at 1.0 so i i believe i've
2005:36 - already done that oh no i haven't so
2005:38 - it's actually good i haven't done that
2005:39 - so let's go ahead and here in 1.0 and
2005:41 - just remove this build okay so we say we
2005:44 - don't want to submit anything and then
2005:45 - press save okay
2005:49 - all right um and also as you can see at
2005:52 - the bottom of the screen we're going to
2005:53 - update this 1.0 version now to 1.1 so
2005:58 - let's go and see if he can find that
2005:59 - information so right now
2006:01 - i also saw that i got an email from
2006:04 - apple and here says okay now it's
2006:06 - prepared for submission meaning that
2006:07 - it's not developed or rejected anymore
2006:09 - and let's just bump this version in here
2006:12 - to 1.1
2006:14 - 0.0 okay and then i'm going to save it
2006:17 - well and here i mean this is kind of
2006:19 - like a it depends on your taste if you
2006:22 - want to resubmit 1.0 you're more than
2006:24 - welcome to do that but it's usually
2006:27 - if you change something in your code
2006:29 - then it is usual for you to go and
2006:32 - update this um
2006:34 - minor version and it's called so because
2006:36 - this first version is the major version
2006:38 - so if there's a huge future in the
2006:39 - application and this is the
2006:41 - minor version and here is a patch i mean
2006:44 - you could argue that we could i
2006:46 - essentially maybe change our application
2006:48 - version to one zero one because this is
2006:50 - a patch but i just choose to do one one
2006:53 - zero okay
2006:56 - so let's go ahead and i'm assuming that
2006:58 - you're doing the same thing because
2006:59 - there's some information i'm gonna
2007:00 - provide to you a little bit later in
2007:01 - this chapter that relies on you having
2007:03 - actually changed your app version to one
2007:05 - one zero okay
2007:07 - so that's that part is done what we need
2007:10 - to do now is to go as a caption in case
2007:12 - we're gonna go clean
2007:13 - all the notes and users in our firestore
2007:16 - database so let's go ahead and see if we
2007:19 - can get that to work so
2007:21 - my notes flutter project so that's in
2007:23 - your
2007:24 - firebase console and i'm going to go
2007:27 - first to authentication to users there's
2007:29 - just one user in here i'm just going to
2007:30 - delete that account okay then i'm going
2007:32 - to go to firestore database and there's
2007:35 - probably two notes in the notes
2007:36 - collection and i'm going to delete them
2007:38 - as well so delete documents there and
2007:41 - then delete this document as well okay
2007:43 - so we have a clean slate no users and no
2007:45 - notes in the database
2007:48 - so you may be wondering well if we have
2007:51 - security problems with our database
2007:52 - shouldn't firebase be intelligent enough
2007:54 - to know that and firebase is actually
2007:56 - intelligent enough to know that and
2007:58 - sometimes you will receive emails from i
2008:00 - mean depending on the security holes in
2008:02 - your database you will receive emails
2008:04 - from at firebase telling you that hey
2008:06 - there is something wrong with your
2008:08 - security rules and i've prepared some
2008:10 - email that that kind of indicates that i
2008:13 - just wanted to show you how that kind of
2008:14 - email looks like
2008:16 - so you can see if you have security
2008:17 - issues with your fire firebase and
2008:20 - firestore database you may receive
2008:21 - something like this you see it says
2008:23 - we've detected the following issues with
2008:24 - your security rules any user can read
2008:26 - your entire database so
2008:28 - it kind of looks like this okay so just
2008:31 - know that if you receive an email like
2008:33 - that then you know at least the reason
2008:34 - for it okay
2008:37 - and if you're wondering more about like
2008:39 - security rules and
2008:41 - how you have to configure them although
2008:43 - i'm going to tell you how we're going to
2008:44 - configure our security rules in this
2008:46 - chapter but if you're wondering how to
2008:47 - do that on your own and you're curious
2008:49 - about reading more about it i've
2008:51 - prepared a little link here so let me
2008:53 - see if i can actually bring it
2008:55 - to the screen
2008:57 - by opening
2008:59 - a link and it kind of looks like this so
2009:01 - you see firebase google.com docs first
2009:03 - our security rules
2009:04 - and conditions so
2009:06 - and so you can read about this and i did
2009:08 - that and i got a lot of inspiration from
2009:11 - how to
2009:12 - fix our security uh problem in our
2009:15 - firestore database so i strongly suggest
2009:17 - that you actually read this
2009:18 - documentation you don't have to do it
2009:20 - right now but please just at least um
2009:22 - bookmark this page so you can come back
2009:24 - to it later
2009:27 - okay so now to the point let's go and
2009:30 - fix our security issue in our firestore
2009:32 - database okay so i've also prepared here
2009:35 - how we have to actually do it and you
2009:37 - can see the let me actually bring up our
2009:39 - security rules so go to firestore
2009:41 - database tab in your firebase console
2009:44 - and then go to rules okay let's have a
2009:46 - look at all roles at the moment and how
2009:48 - they're set up so the way it's set up at
2009:50 - the moment you can see it says match any
2009:52 - database and any documents okay and
2009:54 - that's what we're doing here as well and
2009:56 - it says match any document in there so
2009:58 - at the moment we're allowing read and
2010:00 - write access only if you're
2010:02 - authenticated so okay so let's just for
2010:05 - now say we are allowing create
2010:08 - if you're authenticated so we say you
2010:11 - should be able to create a node as long
2010:13 - as you're authenticated so let's say
2010:15 - create and you can see we get some help
2010:17 - from firebase as well in here okay
2010:19 - so that's that so creation and then we
2010:21 - say allow
2010:23 - read write and update
2010:27 - okay and this is the rules that we're
2010:29 - going to write in here you can see read
2010:30 - update actually read update and delete
2010:33 - so
2010:34 - so read updates and delete and the way
2010:38 - we have to set it up is of course as you
2010:40 - can see in here what i preferred is we
2010:42 - first need to make sure anyone tries to
2010:44 - read from our database or update the
2010:47 - database or delete the document should
2010:49 - be authenticated so
2010:51 - let's go in here and say okay if
2010:53 - authenticated
2010:54 - we'll bring that code up here okay
2010:56 - but we're also going to add some more
2010:58 - information to it and the information
2011:01 - should like look like this you can see
2011:03 - in this document in here
2011:05 - you may be like okay but how do i know
2011:09 - because okay before i actually say that
2011:11 - what we want is for the currently
2011:14 - authenticated user id
2011:16 - to only be able to access his or her
2011:19 - documents that have the same user id
2011:23 - remember in our code we have this user
2011:25 - id field let me bring it up here
2011:28 - so if you go to our storage here we have
2011:31 - these constants and we have this user id
2011:33 - field so every node that we store in our
2011:36 - firestore database has a user id field
2011:39 - so what we want in here is to basically
2011:42 - grab the user id from the request so if
2011:45 - you say in here request you'll see we
2011:47 - have off path resource so let's go off
2011:50 - and then you'll see there's something
2011:52 - called a uid and that is the user id
2011:54 - okay so if we have a look how we have to
2011:57 - actually do that so we're saying user
2011:59 - request rtu id should be equal to
2012:01 - resource data user id and this resource
2012:04 - is the current resource that the user is
2012:07 - trying to access okay and if you read
2012:09 - the documentation that i provided to you
2012:11 - earlier you'll you would know this so
2012:13 - let's go in here and say okay the
2012:14 - request auth uid should be equal to
2012:17 - resource
2012:18 - beta dot user id because that's the
2012:21 - field that we provided um as you saw in
2012:24 - the code here so let's then um
2012:27 - yeah i think this is good to go so we
2012:29 - could then publish these changes and it
2012:31 - says publish changes can take up to a
2012:33 - minute to propagate and that's
2012:34 - completely fine because we're actually
2012:36 - going to take some time in order to
2012:38 - update
2012:39 - our code as well okay so that's our
2012:43 - security rule so let's just make sure
2012:45 - that they look like this and i'm gonna
2012:46 - actually bring it to two lines so you
2012:48 - can see it in its entirety
2012:50 - um if you need to get some um
2012:53 - inspiration from this you can also build
2012:55 - on top of this tomorrow so you can add
2012:57 - more security to this so you're more
2012:59 - welcome to
2013:01 - um
2013:03 - then what we need to do is
2013:05 - start cleaning up our code on the dart
2013:07 - site so on the dart side so
2013:10 - let's have a look at this code that
2013:11 - we've written in here i'm going to
2013:12 - change the screen layout a little bit so
2013:14 - you see it better
2013:15 - so let's go to this function gets notes
2013:19 - and you may have noticed it but gets
2013:20 - notes at the moment we're not using this
2013:22 - function at the moment so we're only
2013:25 - using all nodes so let's go ahead and
2013:28 - just remove this gets notes from
2013:29 - firebase cloud storage okay
2013:31 - just like that
2013:34 - i'm running the application at the
2013:35 - moment so let's just command s and i can
2013:38 - see there's no problems because no one
2013:39 - is actually using get notes and there's
2013:42 - no
2013:43 - errors in our code you can see there's
2013:44 - no files or folders that are marked as
2013:46 - red so
2013:48 - um so that's that one that was one of
2013:50 - the things that we have to do just to
2013:51 - remove the get nodes
2013:52 - and then what we need to do in here is
2013:54 - to ensure that our when we're actually
2013:57 - saying all notes that we are filtering
2014:00 - the snapshots before we actually read
2014:04 - them so let's just go in here and say
2014:05 - notes and before snapshots f like this
2014:09 - i'm gonna say where
2014:11 - and you can see it says okay which field
2014:13 - are you looking for then we say owner
2014:15 - user id
2014:16 - field name
2014:18 - and that should actually be is equal to
2014:21 - and we have the owner
2014:23 - it's ready right
2014:26 - so that's that one and then after that
2014:28 - we say snapshot and snapshots map
2014:32 - and
2014:34 - that's also fine actually so
2014:37 - in to be honest with you we could clean
2014:38 - this code up as well so let's just say
2014:40 - in here
2014:41 - and we take this and we say this is our
2014:43 - notes
2014:45 - excuse me
2014:46 - the final notes is equal to that
2014:50 - for all notes
2014:53 - and we could just return it
2014:56 - all right so now we have this and you
2014:59 - could basically argue saying that okay
2015:01 - we have a where clause in here so we
2015:04 - don't have to have this word clause in
2015:06 - here and i would actually say yeah that
2015:08 - does make sense because yeah why would
2015:11 - we have two word clauses so let's just
2015:13 - remove that word clause and put the
2015:14 - semicolon in here
2015:16 - okay so we filter before we read all the
2015:19 - snapshots all right we're getting an
2015:21 - error in here let me see what the
2015:22 - problem could be because there's a map
2015:24 - all right
2015:25 - so your code basically should look like
2015:27 - this right now
2015:29 - and what we can do now is to actually
2015:31 - put this to test to make sure
2015:33 - everything's working as expected so i'm
2015:35 - gonna bring our ios simulator in here
2015:37 - which the application is running on
2015:38 - already gonna do a hot restart and let's
2015:41 - just register a user so i'm just gonna
2015:43 - say
2015:44 - van.np
2015:46 - gmail.com foo barbeaus and please don't
2015:48 - use this uh password say register and
2015:51 - then it says verify email okay
2015:53 - and let me go ahead and bring up my
2015:56 - mails
2015:58 - and have a look at my email and see if a
2016:01 - verification email has been sent to me
2016:05 - and we've sent an email verification
2016:08 - please open it to verify your account
2016:10 - and i hope i actually entered my email
2016:12 - correctly because i haven't yet received
2016:14 - a verification email
2016:16 - so perhaps i could open up gmail in a
2016:20 - separate tab because i'm using gmail at
2016:22 - the moment for that particular user
2016:26 - and see if that email has appeared in my
2016:28 - gmail inbox
2016:30 - okay
2016:32 - i'm gonna switch users
2016:34 - all right let's see
2016:36 - and this is i'm doing this on a separate
2016:37 - screen so that's why you're not seeing
2016:39 - any of this happening
2016:41 - um i can't see really any email at the
2016:44 - moment so um let me go ahead in our
2016:47 - firebase console in here so
2016:49 - um let's go here
2016:51 - and let's go then to authentication and
2016:54 - i can see that there is a user here and
2016:57 - that is actually correct but i don't see
2017:00 - any verification email being sent to me
2017:03 - so let's go ahead and have a look at our
2017:06 - register view
2017:07 - and let's have a look at the button
2017:09 - implementation if we actually forgot to
2017:11 - do something so when we pass this
2017:14 - register event you can see auth event
2017:16 - register then we have to go to our off
2017:18 - block
2017:19 - and have a look at how we've implemented
2017:21 - implemented that i can see that we say
2017:23 - create user and then we're awaiting on
2017:25 - the provider send email verification so
2017:28 - it seems to be working fine however i
2017:31 - still haven't received any verification
2017:33 - email and that's why i'm just going to
2017:34 - say send email verification here on this
2017:36 - screen
2017:37 - and by pressing that i'm just going to
2017:39 - refresh my emails and now i can see i
2017:41 - received a verification email i'm going
2017:43 - to bring it here tap on the link and i
2017:46 - can see that i saw this um i can see
2017:49 - that
2017:50 - your email has been verified was
2017:51 - displayed to me so
2017:54 - that's great let's go ahead now and um
2017:57 - go to the application and i'm going to
2017:59 - restart here go to the login page and
2018:01 - i'm going to log in with that user
2018:04 - fu
2018:05 - barbaz
2018:06 - log in with the user and no problems i
2018:08 - can log into the application press the
2018:10 - plus button and i'm going to say my
2018:12 - first note
2018:13 - okay
2018:14 - that's saved and then i'm going to save
2018:16 - my second note
2018:19 - all right and that is also saved then
2018:21 - i'm going to log out
2018:22 - and try to log back in with another user
2018:25 - so let's register a new user because
2018:27 - remember we deleted all our users from
2018:30 - firestore database so who are about
2018:32 - again please don't use this password
2018:34 - and i'm going to have a look at my
2018:36 - emails then
2018:38 - and i can actually see a new
2018:40 - verification email was sent to me so
2018:42 - that's perfect i'm going to bring it
2018:43 - here
2018:46 - if i can open that email it looks like
2018:48 - this i'm going to verify my user great
2018:51 - then i'm going to restart the process
2018:52 - and try to log in with that user
2018:55 - okay
2018:56 - through barbaz
2018:58 - log in with the user and i can't see van
2019:01 - dot's
2019:02 - notes so i'm going to say another first
2019:05 - note
2019:08 - another first note
2019:10 - and
2019:11 - create a new note say another second
2019:14 - note all right so after these two users
2019:16 - have created their own two individual
2019:19 - notes let's go ahead in our database
2019:21 - refresh the users we can see there are
2019:23 - two users in here one starting with pg
2019:26 - which is this pixelity and then there's
2019:27 - a 9v which is the other user okay
2019:31 - let's go to our database and see how
2019:32 - many nodes we have and we can see we
2019:34 - have four nodes
2019:35 - 9v
2019:36 - 9v which is for default.user and then we
2019:40 - have two
2019:41 - um documents created by
2019:44 - the pixelity email which start with the
2019:46 - user id of pg as you can see in here and
2019:49 - they they have full access to their own
2019:52 - documents so now this user you can
2019:55 - actually go and delete this document for
2019:57 - instance another first note so he can go
2019:59 - and say okay i want to delete this note
2020:01 - so boom
2020:02 - and you can see it just immediately got
2020:04 - deleted from firebase as well so
2020:07 - they have full access to their own notes
2020:09 - but they have absolutely no access to
2020:11 - anybody else's notes alright so that's
2020:14 - working fantastically
2020:16 - if that's even a word fantastically
2020:18 - so the next thing we need to do now that
2020:20 - we fix this is to go ahead and update
2020:22 - the build number in our pop spec yaml
2020:25 - file so now i'll show you this let's go
2020:27 - to visual studio code to our code right
2020:29 - here and then say pop spec
2020:31 - um
2020:33 - camel and you'll see on top of this file
2020:35 - somewhere around here we have this
2020:36 - version at the moment is one zero zero
2020:38 - plus one but what we want to do in here
2020:40 - is just is to say it's one one zero plus
2020:43 - one so we're updating our build number
2020:45 - in here as well okay
2020:48 - so after doing that since it's such a
2020:51 - big change you could perhaps look at
2020:54 - your terminal and see and do a git
2020:56 - status and you can see by updating that
2021:00 - build number in here um
2021:02 - it didn't immediately update the build
2021:05 - number for our application because had
2021:07 - it done that it should have also been
2021:09 - updated for our ios application in the
2021:12 - info plist file so that unfortunately
2021:14 - wasn't updated and because of this it's
2021:16 - probably a good idea to issue flutter
2021:18 - clean so i'm going to bring the
2021:20 - code like that let's just say flutter
2021:22 - clean
2021:23 - okay
2021:26 - that's gonna do its work
2021:29 - and let's say flutter
2021:30 - pop get
2021:34 - that
2021:36 - and
2021:39 - all right that's doing is we're going to
2021:40 - say git status let's have a look at our
2021:42 - status and there's still nothing changed
2021:44 - so let's just say flutter run ios
2021:49 - and see if that's gonna listen okay
2021:51 - flutter run because that's our default
2021:53 - target at the moment is an ios simulator
2021:55 - so maybe flutter rom will just accept
2021:58 - multiple devices found
2022:01 - all right
2022:02 - show us the list of devices please
2022:08 - perhaps
2022:10 - it's having oh now it found it please
2022:12 - choose one okay i want to choose the
2022:14 - iphone 13 pro so i'm gonna choose um
2022:17 - iphone 13 pro number two in here okay
2022:20 - so now it's gonna build the project with
2022:23 - xcode build and in my experience these
2022:25 - days
2022:26 - xcode build has been
2022:28 - it's just horribly slow so
2022:30 - i'm basically gonna stay quiet now let
2022:33 - it do its work and when it's done we
2022:35 - will continue with the video
2022:38 - all right as i suspected this process
2022:41 - actually took a very long time and i
2022:43 - think we could actually see in here that
2022:45 - the xcode build took 164
2022:49 - seconds
2022:50 - it is well i'm not going to go into that
2022:52 - it's a long time um so let's have a look
2022:55 - now if the version was actually updated
2022:57 - correctly so i'm going to go another
2022:59 - into another shell in here and let's say
2023:01 - git status and i still don't see any
2023:04 - info plist files have been getting
2023:06 - changed on the ios side so i'm just
2023:08 - gonna be curious here and then go to the
2023:10 - ios file in here and have a look at the
2023:12 - xcode workspace
2023:14 - and let's have a look at the version in
2023:16 - here well the version does seem to have
2023:18 - been updated so it's 1 1 0 that's
2023:20 - exactly what we specified in our pop
2023:22 - spec yaml so that's you making sure that
2023:26 - this file is updated and if you don't
2023:28 - have xcode so if you're for instance
2023:29 - running on
2023:31 - linux
2023:32 - ubuntu or something and you want to
2023:33 - still check whether the version number
2023:35 - was updated for the ios application you
2023:37 - can always do that by opening up this
2023:39 - file info plist inside ios runner
2023:43 - and then you can have i believe you
2023:44 - could have a look at
2023:46 - your flutter build number in here and
2023:49 - let's see if flutter build number is set
2023:51 - somewhere
2023:53 - that one that one
2023:55 - i don't actually see the flutter build
2023:57 - number being set anywhere
2023:59 - so if we search for one one zero
2024:01 - actually let's search for one one zero
2024:03 - in the entire application and the only
2024:05 - thing i can see in here are like some of
2024:07 - our pop specs
2024:09 - and
2024:10 - one one zero in here so
2024:13 - unfortunately that's not gonna work so
2024:16 - i don't really know the magic behind how
2024:18 - the flutter team has actually injected
2024:19 - that 110 into
2024:22 - it's probably some sort of a build
2024:23 - variable so if you want to get into
2024:26 - details about that perhaps we could just
2024:28 - open xcode
2024:29 - and have a look at that application
2024:31 - let's go in here into build settings and
2024:34 - have a look at the version
2024:36 - um and see if there's any one one zero
2024:39 - in here flutter build name exactly so
2024:42 - that's that's how they're injecting it
2024:43 - they have a user defined variable called
2024:45 - slots are built and flutter build the
2024:47 - name is then being injected for our info
2024:50 - p list so
2024:51 - if you go here you can see oh this is
2024:53 - flutter build number so yeah but anyway
2024:56 - it's this this must be a variable that
2024:58 - the flutter team has injected into the
2025:00 - xcode build somehow all right
2025:02 - but bringing up xcode could confirm that
2025:05 - the version number is set to 110
2025:06 - correctly so that's all we needed to do
2025:09 - then the next step for this chapter for
2025:12 - us is to
2025:13 - make a build and send it to apple this
2025:15 - time so
2025:16 - not this time we did it the previous
2025:17 - time as well we sent it to apple so what
2025:19 - i'm going to do is i need to bring up
2025:21 - xcode again i shouldn't have closed it
2025:23 - maybe let's go in here and while we're
2025:26 - in there we could just go and say we're
2025:28 - building for any ios device and then i'm
2025:30 - just going to say product archive as
2025:32 - we've done in the previous chapters as
2025:34 - well
2025:35 - so let it do its work
2025:38 - okay now our build has been um created
2025:42 - by xcode and in here it's very important
2025:44 - that you actually check that the version
2025:45 - number in here
2025:47 - corresponds to the version number that
2025:48 - you've created in app store connect and
2025:51 - just a reminder in app store connect if
2025:53 - you go back there you can see that the
2025:55 - version that we prepared is 110 and
2025:57 - that's why i said in the beginning of
2025:58 - this chapter it's actually important for
2026:00 - you to follow the same versioning that
2026:02 - i'm doing in in the current chapter so
2026:04 - let's say 110 and i'm going to say
2026:06 - distribute to apple or distribute app
2026:09 - upload
2026:10 - and let's go in here
2026:16 - analyzing app version fetching app store
2026:19 - configuration
2026:20 - and i'm going to uncheck manage version
2026:22 - and build number because i want flutter
2026:24 - to be able to do that and then i'm going
2026:26 - to choose the production profile that
2026:29 - we've created for application press the
2026:31 - next button in here as well
2026:35 - and then depending on your network
2026:37 - connection and your and different
2026:39 - configurations that you have for your
2026:40 - network this process could actually take
2026:42 - a very very long time
2026:45 - previously when i tried this even even
2026:47 - though i'm on a fiber optic net network
2026:49 - connection
2026:50 - with a thousand upload a thousand
2026:52 - download it still took about 30 minutes
2026:55 - for a simple application to be sent to
2026:57 - apple and it was literally stuck in this
2026:59 - requesting app information for more than
2027:01 - 20 minutes so
2027:03 - that's an unfortunate fact that we just
2027:05 - have to accept and let it do its work
2027:07 - and
2027:08 - i will see you then once it's
2027:11 - finally sent the application to apple
2027:14 - all right so now i can see that our
2027:15 - application has been submitted to apple
2027:17 - and i have to confess that this time it
2027:18 - took only about a minute for this
2027:20 - process to go through so that was very
2027:22 - fast much much faster than the previous
2027:24 - chapters we'd have to submit our
2027:26 - application which took upwards of 30
2027:28 - minutes for me
2027:30 - so now that it's done after you've done
2027:32 - this you will receive an email from
2027:33 - apple that kind of looks like this if i
2027:35 - can bring it to the screen
2027:37 - it will look like this and it will tell
2027:39 - you that
2027:40 - the following build has completed
2027:42 - processing only after this email has
2027:45 - been sent you can go to app store
2027:46 - connect and
2027:48 - go and we also have to fix our missing
2027:50 - compliance so let's just say manage and
2027:52 - say
2027:53 - use encryption no
2027:54 - start internal testing after you've done
2027:57 - that you need to go to the app store
2028:00 - how do you say tab
2028:02 - and in that tab let's just select a new
2028:04 - bill and it's our 110 build and i'm
2028:07 - going to say done in there okay after
2028:09 - you've done that you can press the save
2028:11 - button and then you can submit your
2028:13 - application
2028:14 - fresh to apple so that
2028:17 - then in turn concludes the submission of
2028:19 - our app to app store and um if there's
2028:23 - any complications with this application
2028:24 - like if apple for some reason can't
2028:26 - register a user or something they're
2028:27 - going to send you an email telling you
2028:29 - about that so
2028:31 - then you need to go through that process
2028:33 - and help the app store
2028:35 - review team in order to get started with
2028:37 - your application but if you remember
2028:38 - from the previous chapters we've
2028:40 - actually left some information in there
2028:42 - like review information
2028:44 - and told the review team how to register
2028:48 - for a
2028:50 - user in our application so that
2028:51 - information should be sufficient for
2028:52 - them to understand how to use the app
2028:55 - fantastic we're done with the origin
2028:57 - with the submission of our ios app to
2029:00 - app store so as usual since we've now
2029:03 - changed our code let's go into
2029:05 - visual studio code and
2029:07 - i'm going to close all these tabs
2029:09 - because it's just extremely populated on
2029:11 - my screen
2029:13 - get rid of the explorer and go to
2029:17 - my terminal in here and have a look at
2029:19 - art status and i can see there's only
2029:21 - two files changed so i'm going to add
2029:23 - them and let's commit as step 30 as you
2029:26 - can see at the bottom of the screen okay
2029:28 - so if you look at our logs we have step
2029:30 - 29 and then we have step 30 so i'm going
2029:32 - to say git push
2029:34 - that's going to push our commit
2029:36 - and less than a tag v so step 30 and
2029:40 - let's just say get push tags so
2029:43 - that is done now and our tag of 30 is
2029:46 - also sent to a github
2029:49 - what we need to do now as usual is
2029:51 - tradition where we talk about what we
2029:52 - need to discuss in the upcoming chapters
2029:55 - and in the next chapter we're going to
2029:57 - talk about sending our app also to
2030:00 - google play store we've done it for ios
2030:02 - we have to do the same process for
2030:03 - google play store so get some
2030:05 - refreshments if you want to and i'll see
2030:06 - you in the next chapter hello everyone
2030:08 - and welcome to chapter 50 of the slotted
2030:10 - course in previous chapters we've been
2030:11 - working quite a lot with submitting our
2030:13 - application for the ios app store using
2030:16 - app store connect and in this chapter
2030:18 - we're going to focus on doing the same
2030:19 - thing but for
2030:21 - google and play store so whereas you
2030:23 - have app store and at the back of app
2030:25 - store you have the
2030:27 - um app store connect which allows you as
2030:29 - a developer to go and interact with the
2030:31 - your product that's going to be
2030:32 - submitted to the app store google has
2030:34 - something similar for your product for
2030:37 - your android app in this case our
2030:38 - flutter application to be available in
2030:40 - the google play store
2030:42 - which is where users download your
2030:43 - applications you you as a developer will
2030:46 - have to go to the google play console so
2030:50 - we're going to take care of that and for
2030:52 - that we're going to create something
2030:53 - called an app bundle where whereas if
2030:56 - you remember when we created our ios
2030:58 - application we went to xcode and archive
2031:00 - our application and that created
2031:01 - something called an xc archive file and
2031:03 - that was kind of like a zip file
2031:05 - and all your files were all your
2031:07 - binaries at least all your like linked
2031:09 - libraries all your pods the application
2031:12 - itself binary was signed with your
2031:15 - production certificate and profile an
2031:18 - app bundle for
2031:19 - your um android devices as well is a
2031:22 - signed bundle so it is the equivalent of
2031:25 - your um xc archive kind of and we're
2031:28 - going to take care of that as well soon
2031:30 - in this chapter
2031:32 - and we have a um
2031:34 - i mean there's something that i i
2031:36 - actually prefer this but i didn't want
2031:37 - to mention it before because we were so
2031:39 - close to actually raising our ios
2031:41 - application we have to make just some
2031:43 - small adjustments to our code as well as
2031:44 - you'll soon see when we
2031:46 - start for instance working with
2031:49 - taking screenshots of our android of our
2031:52 - flutter app running on various android
2031:53 - devices and that's um a scrolling issue
2031:57 - that we have generally on our
2031:59 - screens where we display the keyboard
2032:01 - those screens are
2032:03 - um
2032:04 - login view and i believe there's
2032:06 - register view
2032:08 - and where else do we display a keyword i
2032:11 - believe we also
2032:13 - log in register for a got password view
2032:15 - because we asked the user for
2032:17 - her email address there as well and also
2032:19 - one year for instance um
2032:21 - actually we don't have the problem on
2032:23 - the edit notes view so that's not a
2032:25 - problem so
2032:26 - we have this problem in verify email
2032:28 - view login view register view and forgot
2032:30 - password view
2032:32 - so um
2032:33 - actually verify email view you could
2032:35 - argue that yeah it's it's not a problem
2032:37 - but
2032:37 - so the issue that we have at the moment
2032:39 - is that imagine that your application
2032:41 - application is being run on a very small
2032:43 - screen
2032:44 - and um
2032:46 - and then the user for instance has a
2032:48 - very very small screen and then they're
2032:49 - on the login view and then we displayed
2032:51 - the keyboard where at where for instance
2032:53 - they tap on the email field and they try
2032:56 - to write their email and then the
2032:57 - keyboard pops up blocking like half the
2032:59 - screen and depending on the size of the
2033:01 - screen the rest of the half that is
2033:03 - remaining might not actually be able to
2033:05 - display the entire contents of your
2033:07 - view
2033:08 - so
2033:09 - this is a little problem and we have to
2033:11 - fix it but it is so simple to fix and
2033:13 - you may then decide to say well the ios
2033:16 - application we've done already is sent
2033:17 - to apple it's um it's already accepted
2033:20 - and i'm going to release it and you
2033:21 - could definitely do that so it's
2033:22 - actually good practice if you want to
2033:24 - release your is application as is just
2033:26 - go ahead and do that and then you can do
2033:28 - a patch later and release another
2033:30 - application to fix that issue
2033:33 - and i think the more you release
2033:34 - applications the better because then you
2033:37 - learn the process of updating things and
2033:40 - sending release notes etc it's just good
2033:42 - practice to do that quite
2033:44 - often so let's go ahead now and talk a
2033:47 - little bit about the documentation for
2033:52 - creating an app bundle so i'll bring it
2033:54 - up
2033:55 - here
2033:56 - and it's as you can see at the bottom of
2033:58 - the screen it's in distribute console
2034:00 - and um
2034:03 - there's a lot of documentation here that
2034:04 - you can go and read more about it so i
2034:07 - thought just to um explain like the
2034:10 - google play console in here a little bit
2034:12 - to you so that you can sign in here
2034:14 - and then you can read more about all
2034:16 - these topics so i think it's just a good
2034:18 - url for you to um
2034:21 - bookmark if you want to be able to
2034:22 - release your application in the future
2034:24 - as well with google and play store
2034:26 - otherwise if you're like me and you
2034:28 - sometimes just want to jump into things
2034:30 - you could start by
2034:32 - um logging into google play console so
2034:37 - let me bring you to the next url as you
2034:39 - can see the url is played at google.com
2034:42 - console about so i'm just gonna say um
2034:45 - play.google.com slash console slash
2034:50 - out
2034:51 - if i can spell
2034:53 - and that's our google play console okay
2034:55 - and i'm just going to log in here with
2034:58 - my
2034:59 - a user account and i have this user
2035:02 - account here which i can log in with
2035:04 - let's see if i can log in successfully
2035:05 - with that
2035:07 - all right and then it says choose
2035:09 - developer again and if you haven't done
2035:13 - this before you may have to go and
2035:15 - create a developer account first but i
2035:18 - but
2035:18 - in the beginning of this chapter we
2035:20 - talked quite a lot about creating a
2035:21 - developer account both for ios and
2035:24 - android so i'm assuming you've already
2035:25 - done that but if you haven't you can go
2035:27 - and create a developer account it is
2035:29 - free you don't have to pay for anything
2035:31 - so just go ahead and create your
2035:32 - developer account
2035:35 - so now here i'm going to choose my
2035:36 - developer account and just go in here
2035:38 - okay so here's my google
2035:41 - play console as you can see in here this
2035:43 - is the console url for me at least and
2035:47 - what we need to do in here is to go
2035:49 - ahead and create an app so
2035:53 - let's go ahead as you can see at the
2035:55 - bottom of the screen let's go ahead and
2035:56 - tap on create app in here and now in
2035:59 - here it's asking us for some information
2036:04 - um and also i just saw that i have a
2036:07 - little um
2036:09 - ipo in my
2036:12 - action so i'll bring the right caption
2036:13 - up in here and you'll see that we have
2036:15 - to go through these steps in order to
2036:17 - create our application all right so i'm
2036:20 - gonna go in here and let's just say my
2036:22 - awesome
2036:25 - notes
2036:26 - the default language let's just leave it
2036:28 - as english us and and it asks you is it
2036:30 - an app or a game then we're gonna say
2036:32 - it's an application and it's a free
2036:34 - application
2036:36 - and and and we're going to say it it
2036:38 - meets the developer policies and accept
2036:41 - us export laws okay and then we create
2036:44 - the application this may take some
2036:46 - time okay so
2036:50 - what we need to do now is to go through
2036:52 - um
2036:53 - app access in here so i'm going to bring
2036:56 - up the caption
2036:58 - so we need to go through let's see if
2037:01 - you can actually find the provided
2037:02 - information about your app and as you
2037:04 - can see it's right here provide
2037:05 - information about your app and set up
2037:07 - your store listening okay so i'm gonna
2037:10 - have a look at that and these are the
2037:11 - things you have to go through and we're
2037:12 - actually gonna go through this together
2037:14 - to in order to be able to create a
2037:17 - listing for your application so it's a
2037:18 - good check checklist basically um and
2037:22 - i have to say i mean i'm more used to
2037:25 - the app store connect interface it's a
2037:27 - little bit like less cluttered i find
2037:29 - google play console a little bit more
2037:31 - cluttered to be honest with you and
2037:32 - things are just
2037:34 - there are so much in your face but once
2037:36 - you get used to it i think you'll
2037:37 - understand the purpose and
2037:40 - and then you'll just as as long as you
2037:42 - know where to find things so in the
2037:44 - dashboard and for your application just
2037:46 - scroll down to set up your app provide
2037:48 - information here about your app instead
2037:50 - of your store listing and let's go to
2037:52 - app access and set that up okay
2037:55 - and then here is asking us okay is there
2037:57 - any restricted content that we're going
2037:59 - to say
2038:00 - all functionalities available without
2038:02 - special access press the save button
2038:05 - and you can see for instance i saved it
2038:07 - and now i have to manually go back to
2038:09 - the dashboard it could have just saved
2038:11 - it and sent me back but no it doesn't do
2038:13 - that so app access is now crossed out as
2038:16 - you can see all right
2038:18 - let's go to the ad section so for the
2038:20 - ads we're gonna say no my app does not
2038:22 - contain ads okay press the save button
2038:25 - and then dashboard button
2038:27 - so that's for ads
2038:29 - and let's go ahead and take care of
2038:33 - content rating and this is kind of like
2038:34 - what we have to do for app store connect
2038:36 - as well in order to for instance say our
2038:38 - application doesn't contain violence it
2038:39 - doesn't contain
2038:41 - mature content etc so let's go to
2038:43 - content rating and say start
2038:45 - questionnaire
2038:47 - and let's just fill in our email address
2038:49 - so in here i'm just gonna
2038:51 - provide if i can spell support
2038:55 - at a pixelity
2038:58 - i have some problems right now
2039:00 - uh
2039:02 - support at pixelity
2039:04 - ab.sc and i believe yeah that's my
2039:06 - website so um
2039:09 - so i think that's that's the email i've
2039:11 - been using in app store connect as well
2039:13 - so uh let me also
2039:15 - just double check that in my notes so
2039:17 - i'm gonna bring this into a separate
2039:18 - website just i'm gonna check this in my
2039:20 - website um
2039:23 - and i think the
2039:25 - it is actually so i'm not using this
2039:27 - anymore so let's just pick some of the
2039:28 - appointments and here you just have to
2039:30 - enter your own email so don't enter my
2039:33 - email here so this is in case they need
2039:35 - as you can see if in case they need to
2039:36 - contact you so the category of our
2039:38 - application we say all other app types
2039:41 - because it's not a game or social or a
2039:42 - communication application so next
2039:45 - does the app contain any rating
2039:47 - ratings relevant content downloaded as
2039:49 - part of the app package
2039:51 - code or assets
2039:53 - no
2039:54 - and user accountant does the app
2039:56 - natively allow users to interact or
2039:58 - exchange content with other users
2040:00 - through the voice communication text no
2040:03 - then let's say
2040:05 - online content does the app feature
2040:07 - promote content that isn't part of the
2040:08 - initial app download but can be accessed
2040:10 - from the app no
2040:13 - promotion or sale of age restricted
2040:15 - products no miscellaneous does the app
2040:18 - share the user's current and precise
2040:19 - physical location nope
2040:21 - um does the app allow users to purchase
2040:24 - purchase digital goods no is the app a
2040:26 - web browser or search engine
2040:28 - no
2040:29 - is he a primarily a news or educational
2040:32 - product no okay so we save this
2040:35 - and we go to the next page summary and
2040:37 - you can see it says rating of 30 in
2040:40 - brazil all ages peggy 3
2040:43 - everyone can use this application rate
2040:45 - it for three plus
2040:46 - not sure to be honest with you with that
2040:48 - three plus
2040:49 - um
2040:50 - and then we could just say
2040:53 - submit all right
2040:56 - so
2040:57 - that part is done
2040:59 - seems like it and then we can we can
2041:01 - just go to our dashboard
2041:03 - okay and then let's go and take out our
2041:06 - target audience
2041:08 - and we say in here we choose 13
2041:13 - to 15 16 to 17 18 and over can also use
2041:16 - our application okay and this is kind of
2041:18 - like something you may decide on your
2041:20 - own whether like you you must add a
2041:22 - privacy policy target audience inclusion
2041:24 - or under 13 and that's why we're not
2041:25 - like targeting anybody under 13. and to
2041:28 - basically you may say oh my app's only
2041:30 - suitable for 18 and plus and that's
2041:31 - that's that's completely up to you and
2041:33 - you're more than welcome to do that but
2041:35 - i think our app is suitable even for 13
2041:37 - or even maybe less a 13 is quite a
2041:40 - basically like the sweet spot i would
2041:42 - say yeah because if you go lower than
2041:44 - that then you'll have to provide like
2041:46 - your privacy policy for those specific
2041:48 - targets so
2041:50 - we're not gonna do that
2041:51 - and then we're gonna press the next
2041:53 - button and let's have a look in here
2041:55 - what's asking us to do appeal to
2041:58 - children could your store listing
2041:59 - unintentionally
2042:01 - appear to children and we say yes
2042:04 - because
2042:05 - um we may not want this app to be
2042:07 - appearing for children but it may appear
2042:10 - nonetheless so let's just say yes there
2042:12 - and in here you can see the target group
2042:15 - is 13 to 18. so that's great now we
2042:18 - saved it and let's go back to our
2042:19 - dashboard and you can see here a target
2042:22 - audience is also
2042:24 - done
2042:27 - so let's go to the new section in here
2042:29 - news app is our app and news app and we
2042:31 - say no
2042:33 - all right and then we save and go back
2042:35 - and you can see that the news app stuff
2042:37 - is done
2042:38 - so let's now have a look at this covet
2042:40 - 19 contact application and we say um
2042:44 - my app is not a publicly available code
2042:46 - with 19 contact tracing or status app so
2042:49 - save it and we say go back to dashboard
2042:52 - so that part of the application process
2042:54 - is also done
2042:55 - now we have to fill in the data safety
2042:58 - stuff so let's go through all of these
2042:59 - and
2043:00 - and this might take some time but that's
2043:02 - okay does your app collector share any
2043:04 - of the required user data types required
2043:06 - does your app collect or share any of
2043:08 - the required collect
2043:11 - required
2043:12 - user data types what do they mean
2043:16 - by required
2043:18 - personal information yeah we will
2043:19 - collect email addresses so yes of course
2043:22 - so let's just say yes
2043:24 - and
2043:25 - let's remove that is all of the user
2043:27 - data collected about your app encrypted
2043:29 - in transit yes and that's because we're
2043:31 - using firebase and that's using https so
2043:33 - that's encrypt in transit do you provide
2043:35 - a way for users to request that their
2043:37 - data is deleted no we don't do that and
2043:39 - i actually believe that it will be
2043:41 - really good if you did that
2043:43 - so if you are curious about this and if
2043:45 - you want to allow the user for instance
2043:47 - to be able to do that you could you
2043:49 - could check that out and see how you can
2043:50 - request
2043:51 - their data to be deleted you can create
2043:53 - a separate view for that for instance
2043:56 - and from there you can you can basically
2043:59 - make an api call to firebase and delete
2044:01 - this user so you could do that if you
2044:03 - want to okay and i may actually provide
2044:05 - a chapter
2044:06 - for that i don't know but at the moment
2044:08 - we say no
2044:10 - data types okay and let's have a look in
2044:12 - here this may take
2044:15 - a quite a long time so let's have a look
2044:17 - um
2044:18 - data types you must select any user data
2044:20 - that's are collected okay we're not
2044:22 - doing um location
2044:24 - personal information and we're
2044:26 - collecting email
2044:29 - personal identifier that relates to an
2044:31 - identifiable person for example an
2044:32 - account id account number or account
2044:35 - name yeah personal identifiers yeah
2044:37 - definitely
2044:38 - um
2044:39 - and other personal info we're not
2044:41 - collecting so we only have a user id and
2044:43 - an email address and that's it
2044:45 - and we're not even asking for their
2044:46 - names so
2044:47 - financial info no health no
2044:50 - messages
2044:52 - let's see what messages uh entails in
2044:54 - here where is it
2044:57 - where do you go here messages
2044:59 - emails no
2045:01 - photos and videos audio files files and
2045:03 - documents
2045:05 - um files and docs
2045:07 - a user's files or documents or any
2045:09 - information about a user's files or
2045:10 - documents for example file names yes
2045:13 - because we're storing actually their
2045:15 - files their notes so app activity no
2045:18 - contacts calendar no web browsing no
2045:20 - app info and performance no device or
2045:22 - other identifiers no so let's just then
2045:24 - press next there
2045:27 - and
2045:28 - not started so let's have a look at
2045:31 - start this email
2045:33 - process in here and we say select all
2045:36 - that apply is this data collected shared
2045:38 - or both it's only collected okay
2045:41 - and data collected in this way must
2045:44 - still be disclosed but will not be shown
2045:47 - to users on your store listing
2045:49 - is this data processed
2045:51 - ephemerally process family means that
2045:53 - the data is only stored in memory and is
2045:55 - retained for no longer than necessary so
2045:58 - no it is it is not stored only in the
2046:00 - memory so
2046:01 - and we say is this data required for
2046:03 - your application and in this case i
2046:05 - believe that we're talking about email
2046:06 - address and yes this data is required so
2046:08 - i'm just going to say yes it's required
2046:10 - why is the user data collected it's for
2046:13 - app functionality okay
2046:15 - so um
2046:17 - use for the setup and management of user
2046:19 - accounts actually yeah account
2046:21 - management so let's just say account
2046:23 - management so
2046:24 - um
2046:25 - and then press the save button so now
2046:27 - we've submitted the email address and
2046:29 - while we're why we're using that so
2046:31 - let's go to personal identifiers now and
2046:33 - start that process so we say we are only
2046:35 - collecting that
2046:36 - and because it's a user id and we're not
2046:39 - processing it ephemerally i think that's
2046:41 - how it's pronounced
2046:43 - and we say the data collection is
2046:44 - required and we say um it is used for
2046:48 - app functionality okay because we're
2046:50 - using the user identifier remember when
2046:52 - we store their notes so it's more for
2046:54 - app functionality than it is for
2046:55 - registration
2046:57 - so that's why we do that and that is
2046:59 - completed now so let's go to files and
2047:01 - docs and have a look at this process
2047:03 - files and docs and say
2047:04 - it is only collected but it is not
2047:06 - shared remember we are not sharing the
2047:09 - user's data even though we added that
2047:11 - sharing sheet for the user to share
2047:13 - their own information with someone else
2047:14 - but then that is their choice it is not
2047:17 - something that we are doing okay
2047:19 - is it then is this data processed
2047:21 - ephemerally then we say no and again i
2047:23 - don't know if that's the correct
2047:24 - pronunciation
2047:26 - and then is this data required for your
2047:28 - app and remember we're talking about
2047:30 - files and docs users can choose
2047:32 - whether this data is collected okay
2047:35 - because it is not something that we
2047:37 - force them to do okay
2047:39 - and why is this data
2047:42 - collected then we say it is for
2047:46 - advertising personalization
2047:48 - should i recommend it no account
2047:50 - management no so it is app functionality
2047:52 - we would say and we save it and that's
2047:55 - it so after you've done that we can just
2047:57 - go to the next screen and have a look at
2047:59 - this how it looks like you can actually
2048:00 - read about all the information that you
2048:02 - entered in here so
2048:04 - um and in here you can see at the bottom
2048:06 - of the screen says provide a link to
2048:07 - your privacy policy and and i have
2048:10 - already a privacy policy so i've um i
2048:13 - believe i have it in privacy policy text
2048:15 - so i'm gonna copy that and go to
2048:19 - privacy policy in here actually leave
2048:21 - and discard stay
2048:23 - um
2048:24 - so we may have to actually provide that
2048:25 - privacy policy i haven't yet done that
2048:28 - but we will have to do that
2048:30 - and
2048:31 - on the privacy policy page so yes we
2048:34 - need to we need to actually do that so
2048:36 - let's go ahead to um
2048:38 - i actually don't want let's save this as
2048:40 - draft and go here
2048:42 - and then enter the privacy policy in
2048:44 - here and i'm just going to say https
2048:46 - let's just make sure it's https yes and
2048:48 - save that okay then i'm going to go back
2048:50 - to the dashboard in here where we were
2048:52 - for data safety we were at the end of
2048:55 - this so let's go to uh next um
2048:59 - next next next at the bottom of this now
2049:02 - we have our privacy policy so now we can
2049:05 - save this and let's see if there's
2049:06 - anything that we have to do in order to
2049:08 - actually submit it so
2049:10 - it doesn't seem like it so it is
2049:12 - saved successfully so if we go back to
2049:15 - the dashboard and then have a look at
2049:17 - our data safety now we should be able to
2049:18 - see that it is crossed out so
2049:21 - that's fantastic
2049:23 - so um data safety is done and now we
2049:27 - have to have a look at this app category
2049:30 - and provide contact details okay
2049:32 - so let's go in here to app category and
2049:34 - we say it is an app and it's category
2049:37 - let's just say utilities if they're if
2049:40 - one exists in here
2049:42 - um let's just say it is a
2049:45 - what should we say
2049:46 - communication education events food
2049:49 - house library blah blah medical news
2049:52 - personalization productivity perhaps
2049:54 - okay and then tags let's just say
2049:57 - um oh this is
2049:58 - horrendous okay
2050:00 - um let's just say a note
2050:04 - notebook yeah let's just keep that okay
2050:07 - and you can choose more tags if you want
2050:09 - to
2050:10 - and
2050:11 - after that is done
2050:12 - let's see store listing contact details
2050:15 - and email address i'm just going to say
2050:16 - support app
2050:18 - pixelity.se phone number and i'm going
2050:20 - to enter some phone number in here
2050:24 - okay just a fake phone number for now
2050:26 - and https pixelity.se
2050:29 - external marketing
2050:31 - and
2050:32 - you may choose to advertise your
2050:34 - application outside of google play if
2050:35 - you want to and that's okay perhaps and
2050:39 - um before i save this i'm going to bring
2050:41 - the screen to another screen and
2050:43 - actually enter my real phone number okay
2050:45 - so i'm going to do that here let's see
2050:47 - if i can manage to do that
2050:50 - it doesn't really seem to like the fact
2050:53 - that i dragged it to another screen now
2050:56 - it likes it okay
2050:58 - so let me see
2051:00 - um uh
2051:02 - it really doesn't like that i'm dragging
2051:04 - it to my ipad so i'm gonna bring it to
2051:07 - my macintosh
2051:10 - yes and so all i'm doing here is just to
2051:13 - enter that information so let me bring
2051:15 - it up again
2051:16 - and then let's see if you can press the
2051:18 - save button okay so all i did is just
2051:20 - move the screen to another
2051:22 - physical screen enter my real phone
2051:24 - number and that was it
2051:26 - so
2051:27 - oops
2051:28 - stay safe your changes couldn't be saved
2051:31 - why not let me go and see if i
2051:35 - enter a valid oh i entered my phone
2051:38 - number incorrectly so i'm just gonna
2051:39 - save it
2051:40 - and scroll to the top of the screen
2051:43 - bring it back up
2051:44 - and then let's go to all apps okay
2051:47 - oops i want to go back to my app here
2051:51 - so in here we're done with the select
2051:54 - app category so that's fantastic
2051:57 - now it's the juicy part we have to set
2052:00 - up our store listing so um
2052:03 - this is also actually going to be quite
2052:05 - a an important part of the setup process
2052:09 - so this may actually take some time but
2052:11 - that's okay and we're gonna take care of
2052:13 - that in due time so now we have to look
2052:15 - at setting up our store listening and
2052:17 - the store listening um is one of the
2052:19 - absolute core components or and the core
2052:21 - things we have to do in order to be able
2052:23 - to release our applications so let's go
2052:25 - to set up your store listing in here and
2052:28 - let's put a short description and say
2052:30 - store
2052:31 - your notes securely
2052:33 - okay and a full description with this
2052:36 - application
2052:37 - and you can store your notes in the
2052:40 - cloud okay so and also i strongly
2052:43 - suggest that you write some proper
2052:45 - description for these things and it is
2052:48 - also very important if you remember that
2052:49 - we used an icon for our application and
2052:52 - that icon we
2052:54 - brought it from stock io so if you go in
2052:57 - here stock io and we use the sticky note
2053:01 - icon so it is important that in your
2053:04 - store description in both ios and
2053:06 - android you just say
2053:08 - um app icon provided by and just give
2053:12 - some attribution to that okay so it's
2053:14 - very very important that you read these
2053:16 - things and also give attributions where
2053:18 - attributions are due
2053:20 - so now we come to the application icon
2053:23 - section and you can see in here that
2053:25 - says the application icon should be five
2053:27 - twelve by five twelve and we don't have
2053:29 - that unfortunately at the moment what we
2053:31 - have is a thousand twenty four by
2053:33 - thousand twenty four so if we go back to
2053:35 - our downloads for instance in here
2053:36 - you'll see that we downloaded our app
2053:39 - icons in one of the earlier chapters and
2053:40 - we have this app store image in here
2053:42 - which i believe is thousand twenty four
2053:44 - thousand twenty four at the moment so
2053:46 - what i'm gonna do is i'm gonna duplicate
2053:47 - this file command d on my macintosh on
2053:49 - windows and linux you may have to do
2053:51 - something else and if you have for
2053:52 - instance paint and paint
2053:56 - plus plus it's called paint.net or
2053:57 - something on windows you can also resize
2054:00 - your image but all you need to do is
2054:01 - just in your host operating system you
2054:03 - need to make sure that this image is
2054:04 - 512512 so on the mac i'm just going to
2054:06 - click on here
2054:07 - it open on a separate screen and then
2054:09 - i'm going to go to tools and say adjust
2054:11 - size and i'm just going to say it is 5
2054:13 - 12 5 12 okay
2054:14 - these are the guidelines so in here i'm
2054:17 - just going to drop that file right there
2054:20 - okay
2054:23 - okay so that's for your application icon
2054:26 - that's 5 12 5 12.
2054:28 - now we also need a it's a required feel
2054:31 - as you can see it is marked with an
2054:32 - asterisk in here and it's a future
2054:34 - graphing and future graphic is something
2054:36 - that a google play store can sometimes
2054:38 - use in for instance if your application
2054:40 - is featured on play store um
2054:43 - and they are going to use this image in
2054:44 - order to to basically um
2054:47 - do an advertisement for applications so
2054:49 - there are
2054:50 - guidelines for this and it should be you
2054:52 - can see it should be 1024x500
2054:54 - and since we don't have that we are
2054:56 - going to use our application icon in
2054:59 - order to create that future image so
2055:01 - what i think we should do is just to
2055:02 - open figma perhaps
2055:04 - and after our figma document is open
2055:06 - what we can do in here is to go and
2055:09 - create a little rectangle which was
2055:12 - 1024x500 i believe the guidelines were
2055:14 - telling us to create it by so 1024 by
2055:17 - 500 so i'm going to select this
2055:18 - rectangle and i say its width is 1024 by
2055:22 - and then height is 500 and what i like
2055:24 - to do is to go my trusty color palette
2055:26 - which is from a tokyo night
2055:29 - let's go to tokyo knight in here in
2055:31 - github as we've seen in previous
2055:32 - chapters i'm going to go scroll down a
2055:34 - little bit here and say that i have i
2055:36 - want the editor background color so it's
2055:38 - 2428 3b and then i'm going to copy that
2055:41 - close the tab come here to figma and
2055:44 - change the fill color of this layer to
2055:46 - that so we're going to use this as our
2055:48 - background and what i'm going to do is
2055:51 - i'm going to go to our downloads folder
2055:53 - and grab that app icon png
2055:56 - 1024024 which we've downloaded in one of
2055:58 - the previous chapters so i'm gonna bring
2056:00 - it in here
2056:01 - then it is huge i'm gonna hold down the
2056:03 - shift key and then resize this
2056:05 - proportionally so kind of reset it to
2056:07 - something like this okay so i'm gonna
2056:08 - place it in the middle now i'm gonna
2056:10 - change the name of this to bg change the
2056:13 - name of this to icon by double clicking
2056:15 - on it and then i'm gonna create a text
2056:17 - field in here and save my awesome
2056:20 - notes
2056:21 - and let's
2056:22 - bring these into three separate lines
2056:25 - like that and let's also make sure that
2056:27 - the fill color of this is white also
2056:30 - ensure as you can see like mine
2056:32 - it is right aligned then i'm gonna place
2056:34 - it somewhere here okay in the middle as
2056:37 - well and perhaps we could even increase
2056:39 - the size of the font so let's see what
2056:42 - we have here we have about 200 let's say
2056:44 - 120 and it is a little bit bigger a
2056:47 - little bit bolder in your face kind of
2056:49 - stuff so and this is our text so this is
2056:51 - our text what i'm going to do in here
2056:53 - then is i'm going to
2056:55 - um
2056:56 - basically take these like bg icon and
2056:59 - text and then duplicate this bg in here
2057:01 - because this is going to be our mask i'm
2057:03 - going to grab grab it and bring it at
2057:05 - the bottom then i'm going to right click
2057:06 - it and say use as mask and now it has
2057:09 - its own group then i'm going to grab all
2057:11 - of these three layers and then drag them
2057:13 - here and now you can see that that mask
2057:15 - is basically masking off this entire
2057:17 - content so it's masking off our icon as
2057:21 - well so it looks pretty good to me it's
2057:23 - kind of proportional it's nice so then
2057:25 - you can click on this
2057:27 - and then in figma go to the bottom so if
2057:30 - i change the
2057:32 - um in here so you can see better perhaps
2057:35 - then scroll so make sure your mask group
2057:38 - is selected then go to export and then
2057:41 - we're gonna export it as one x and then
2057:43 - that is exported now so now we have our
2057:46 - image looking like this and it is
2057:49 - 1024x500 so we can go to uh
2057:52 - our play console google play console and
2057:55 - right where we have to uh throw this
2057:57 - feature graphic i'm going to go to
2057:59 - downloads and the image that we just
2058:01 - downloaded which is right here i'm gonna
2058:03 - just drop it in there
2058:07 - so then that is working fine as well and
2058:09 - then i'm gonna
2058:10 - save my changes and something is wrong
2058:12 - with our changes some languages have
2058:15 - errors okay
2058:16 - that's probably because we haven't
2058:18 - really uploaded any screenshots yet and
2058:19 - we're gonna take care of that soon so it
2058:22 - is a little bit um
2058:23 - strange that it doesn't let me just let
2058:25 - me save my changes as a draft i have to
2058:27 - save this entire screen and since i
2058:30 - haven't entered some of the information
2058:31 - in the screen which is required it's not
2058:33 - allowing me to actually save it so but
2058:35 - we're gonna take care of that soon so um
2058:38 - what we need to do in here is to ensure
2058:39 - that we're first running our latest
2058:41 - application on the correct phone as well
2058:44 - so
2058:45 - let's see in here i'm going to bring our
2058:46 - source code in here and then i'm going
2058:49 - to say select the device and then i'm
2058:50 - going to choose my android phone all
2058:53 - right so
2058:55 - that's that then i'm going to actually
2058:57 - grab my android phone let's see if i can
2058:59 - do it without causing too much problem
2059:01 - here on the screen like that
2059:04 - and authenticated
2059:07 - great
2059:08 - make sure it is connected to wi-fi as
2059:10 - well
2059:11 - fantastic so
2059:13 - my android phone is now set up
2059:16 - and let's then go ahead in our source
2059:19 - code let me change some
2059:21 - screen layout in here
2059:23 - in our source code then i'm going to go
2059:25 - to main dark file if i can spell
2059:30 - dart file and in here in our terminal
2059:34 - i have two terminals so one i usually
2059:36 - dedicate here to um
2059:39 - scr cpy so i'm just going to say scr cpy
2059:42 - and that's going to bring up the android
2059:43 - phone up right there and since we've
2059:45 - selected that we can now just say run
2059:47 - without debugging so the goal in here is
2059:49 - to run the application on this
2059:51 - particular android phone
2059:53 - and have sdrcpy take screenshots for us
2059:56 - as you'll soon see so there's a really
2059:59 - good command called adb and adb is like
2060:02 - the low level and low level android
2060:04 - debugger
2060:06 - and by using adb you can actually
2060:08 - communicate with your
2060:10 - you know for instance your emulators
2060:13 - android emulators and your android
2060:14 - phones
2060:16 - as we have here so
2060:18 - if you don't have adb you will actually
2060:20 - have to install it so if i say which adb
2060:23 - on my computer you can see that it says
2060:25 - it's homebrew bin adb basically telling
2060:28 - you that i've installed adb using
2060:30 - homebrew
2060:31 - if you haven't a if you don't have adb
2060:33 - on your computer you may need to install
2060:36 - it if if what you're also doing is
2060:38 - following along with the steps that i'm
2060:40 - providing you meaning that you're taking
2060:42 - trying to take a screenshot with
2060:44 - from an actual device that is connected
2060:46 - to your computer okay so i can see now
2060:48 - that our application is running in scr
2060:50 - cpy looking like this so what we could
2060:53 - do is to issue the command as you saw so
2060:56 - let's just go ahead and say
2060:57 - um adb exec
2061:00 - exec out screen cap key and then we save
2061:04 - it into for instance file1.png
2061:08 - and if i have a look in visual studio
2061:10 - code you'll soon see now there is a file
2061:13 - stored here file1png and that is that
2061:15 - file with the screenshot of our
2061:17 - application
2061:18 - and then we can go to another screen for
2061:21 - instance the i forgot my password screen
2061:24 - in here
2061:25 - and we could also send our keyboard down
2061:29 - kind of look like this and then we can
2061:31 - issue another one
2061:32 - file to png so that's stored as well
2061:35 - let's go to the registration screen and
2061:38 - send the keyboard down and then let's
2061:40 - say file three png and also sending the
2061:43 - keyboard down or up or leaving it up it
2061:45 - is it is a it is a taste thing it is
2061:48 - completely up to you how you want to do
2061:49 - it okay so in here i'm going to go here
2061:52 - vandal mp
2061:54 - and actually log in with a real user
2061:58 - and go to the main screen of the
2062:00 - application i'm gonna take file for png
2062:04 - and then i'm going to go to one of my
2062:06 - notes in here with the keyboard up
2062:07 - perhaps in this case and then say file
2062:09 - five png okay
2062:11 - and then i'm gonna say open so i'll see
2062:14 - all my png files in here then i'm going
2062:16 - to take those files and bring them to
2062:19 - desktop so they're not polluting the
2062:21 - workspace here in visual studio code
2062:24 - let's go back in here and you can see
2062:26 - that you can just drop drop
2062:29 - two phone or tablet screenshots in there
2062:31 - so
2062:32 - let's go ahead to my desktop folder
2062:34 - where i stored all those screenshots and
2062:36 - just drop all those images in here okay
2062:40 - and i can see them populated here i'm
2062:42 - gonna grab the login screen and see if
2062:46 - it can actually bring it first and
2062:47 - unfortunately here it's not allowing me
2062:48 - to drop things at the right order so
2062:51 - unfortunately i have to delete them and
2062:53 - like drop them at the right order so
2062:54 - file one first
2062:58 - and then i have to upload file too so it
2063:00 - is a little bit um strange that it
2063:02 - doesn't let me re
2063:04 - rearrange these images
2063:06 - but perhaps there is a functionality for
2063:08 - that that i don't know about
2063:11 - so let's then say file four
2063:14 - and then we have to upload file five as
2063:17 - well okay
2063:19 - so that's there as well
2063:21 - um
2063:22 - okay
2063:23 - so that's that then what we need to take
2063:25 - care of now is to create a five inch
2063:27 - tablet and since i don't have a five
2063:30 - inch tablet here sitting around as a
2063:32 - physical device then we have to go and
2063:34 - create one so if we look at um here
2063:38 - visual studio code and go to flutter
2063:39 - select device you'll see that there are
2063:42 - various um
2063:44 - basic um
2063:45 - tablets that i've created with
2063:48 - my device manager with
2063:50 - android studio so if you have android
2063:52 - studio you can always open it and
2063:55 - android studio um
2063:56 - oh
2063:58 - oh it did open it anyway so it's right
2064:00 - here you can always go i believe into um
2064:04 - avd manager which is the virtual device
2064:07 - manager and then create your virtual
2064:08 - device as you can see you need to create
2064:10 - a file is this seven inch and a 10.1
2064:13 - inch tablet because we're going to take
2064:15 - screenshots with these so what i'm going
2064:18 - to do actually is to launch both of
2064:20 - these tablets so that they're ready to
2064:22 - go when we need them so that's the first
2064:25 - tablet and i'm actually going to
2064:28 - turn it around so it is in the portrait
2064:31 - mode so that's that one and then i'm
2064:33 - also going to ask
2064:35 - avd manager here to run a second tablet
2064:38 - in here and that was extremely fast i
2064:41 - saw i don't even know how it did that
2064:44 - how could it run this tablet so fast a
2064:46 - little bit scary to be honest so
2064:49 - now that's sitting there um
2064:51 - let's see if it's gonna do its work
2064:53 - correctly though i can see the seven
2064:56 - inch tablet is not doing so well let's
2064:58 - see if i can close it and i'm gonna say
2065:00 - yes close so perhaps i should have i'm
2065:03 - going to shut this one down
2065:06 - and don't know if we're going to
2065:08 - actually be better off first running the
2065:11 - 7-inch tablet and see if that is
2065:13 - successful
2065:15 - maybe something happened in the
2065:16 - processing of the 10 inch as well as the
2065:19 - 7 inch i don't really know
2065:21 - it is completely up to
2065:23 - the device manager here
2065:26 - and i can see that this device isn't
2065:28 - really doing so well so i press the
2065:30 - power button on it here and i can see
2065:32 - now it is running so i'm going to press
2065:34 - the home button
2065:35 - and um orientation isn't really working
2065:38 - so well here
2065:40 - so i can see that
2065:42 - now maybe it's working a little bit
2065:44 - better so let's just leave it at that so
2065:45 - that's the seven inch display and it is
2065:48 - up and running then what i'm going to do
2065:50 - and the flutter daemon has terminated
2065:52 - that's completely fine reload it
2065:55 - then what we're going to do is to say
2065:57 - select device in here
2066:00 - flutter select the vibe and that's
2066:03 - probably because the flutter demon
2066:04 - actually crashed on us here so i'm gonna
2066:07 - try one more time and if it doesn't work
2066:09 - then i'm going to quit visual studio
2066:11 - code so
2066:12 - let me start visual studio code and
2066:15 - fresh
2066:17 - okay now that visual studio started
2066:19 - fresh let's just try again and say
2066:20 - flutter select device and this time i'm
2066:22 - going to choose a 7-inch
2066:24 - android tablet then i'm going to say run
2066:27 - without debugging so let's see if we're
2066:29 - going to have any success running this
2066:31 - application in this tablet
2066:33 - and if gradle build
2066:35 - is working well for us today then it's
2066:38 - going to allow us to do lse performing
2066:40 - stream install failed to install
2066:42 - launching application and sdk g phone 64
2066:45 - rm64 so there could be some problem with
2066:47 - this android tablet in here so i'm going
2066:50 - to close that
2066:51 - and i'm going to go back to android
2066:54 - studio if i can't find it somewhere here
2066:57 - let's see android
2067:00 - studio
2067:02 - okay it's running now
2067:05 - and let's go in here then i'm going to
2067:07 - go to avd manager
2067:09 - and let's have a look if we can close
2067:12 - these and kill these two tablets
2067:15 - completely like that like that
2067:18 - and while i'm at it i'm also going to
2067:20 - kill this one so i don't have any use
2067:22 - for that so i'm going to create a new
2067:23 - virtual device then i'm going to say
2067:25 - excuse me a tablet that is nexus 7 and 7
2067:29 - inch display
2067:31 - something like this
2067:33 - that is fine and it's thousand 200 by
2067:35 - nineteen twenty so what is required here
2067:38 - from us it says
2067:39 - uh
2067:40 - seven inch tablet screenshots okay
2067:43 - that's fantastic so it doesn't have
2067:45 - specific size requirements and then i'm
2067:46 - gonna press next on s
2067:49 - is absolutely fine
2067:51 - that is fine as well on portrait and
2067:54 - then i'm going to say finish
2067:55 - then let's see if he can run this
2067:57 - emulator on this computer
2068:01 - and if everything goes fine we're going
2068:02 - to see the welcome screen here i can see
2068:04 - google's logo so that's a great sign
2068:06 - always and i'm going to keep the screen
2068:08 - here just in case
2068:10 - and while that is doing its work we're
2068:13 - going to go back to
2068:14 - flutter and i can see the emulator is up
2068:17 - now and i'm going to say select device
2068:19 - and i'm going to choose it here let's
2068:21 - then say run run without debugging and
2068:23 - see hopefully this time we have better
2068:26 - luck in running that application in the
2068:28 - given emulator so let's see
2068:31 - wow that went really fast actually it
2068:34 - went surprisingly fast so now it's
2068:36 - running in there and i can see our
2068:38 - application running in the emulator so
2068:40 - what we need to do in here is to
2068:42 - actually take some screenshots so um
2068:46 - when we need all you see here actually
2068:48 - we all have to provide 7-inch tablet
2068:50 - screenshots and we also have to fix the
2068:53 - 10-inch tablet screenshot but what i
2068:54 - want to mention is
2068:56 - depending on the size of the screen at
2068:58 - the moment you can see everything is
2069:00 - working fine there's not a problem you
2069:02 - can go to register screen i also forgot
2069:04 - my password and all of these are working
2069:06 - quite fine however
2069:07 - we have a scrolling problem
2069:11 - and i can see in here that the seven
2069:13 - inch display i've mentioned at the
2069:14 - bottom of the screen that the seven inch
2069:16 - display could actually block the view
2069:18 - and that could be for instance because
2069:21 - um now in in this case is not actually
2069:23 - blocking the view but if you had a
2069:25 - smaller screen it could block the view
2069:27 - in that this screen as you can see is
2069:28 - not scrollable so if you had a smaller
2069:31 - screen then this keyboard could pop on
2069:33 - top of the content that you have in here
2069:36 - blocking the content so what we need to
2069:38 - do before we start taking some
2069:40 - screenshots from our android um tablet
2069:42 - let's go and fix these things up
2069:44 - let's first go to our verify email view
2069:46 - in our application oops i press the
2069:48 - launch button again by mistake sorry
2069:50 - about that i'm going to stop this
2069:52 - let's go to and verify email view and
2069:56 - you'll see in the code that the verify
2069:59 - email view state at the moment's return
2070:00 - is scaffold and it has a column in order
2070:02 - for this column to be vertically
2070:04 - scrollable all you have to do is just
2070:06 - wrap it with a widget and just say
2070:08 - single child
2070:10 - world view as the notes indicate at the
2070:12 - bottom of the screen okay so that's the
2070:14 - scrolling down for that let's now go to
2070:17 - the login view so login view and wrap
2070:20 - the entire content in here in this
2070:22 - column and let's say wrap it with
2070:26 - a widget okay and i'm going to say
2070:28 - single child
2070:30 - scroll view just like that okay
2070:34 - and i changed the screen layout a little
2070:35 - bit so you see the code better let's
2070:38 - then go to our register view as well so
2070:40 - register view and on top of the screen
2070:43 - we have the scaffold and a column so
2070:46 - let's also in this column say wrap it
2070:48 - with a widget of single child scroll
2070:50 - view alright and last but not least
2070:53 - we're gonna go to our forgot password
2070:56 - view and have a look at how we're
2070:58 - creating the screen we have a scaffold
2071:00 - padding column just like a standard
2071:02 - we've done in other places as well wrap
2071:04 - with widget in a single child
2071:07 - scroll view all right so that's that now
2071:10 - that we've done that we're actually
2071:11 - ready to launch this application again
2071:13 - so select device to nexus and then i'm
2071:15 - going to say run without debugging all
2071:17 - right so what we need to do now is to
2071:20 - use adb again the low level debugger for
2071:22 - android but this time we want to take
2071:24 - screenshots of an emulator as you saw in
2071:27 - the previous uh
2071:28 - section when we talked about taking
2071:30 - screenshots of an actual android phone
2071:32 - running in scr cpy we had to use adb as
2071:36 - well but we didn't have to tell it that
2071:38 - it is an emulator as you can see at the
2071:40 - bottom of the screen now if you specify
2071:43 - an e flag to adb then that indicates the
2071:47 - adb that you want to take a screenshot
2071:48 - of an emulator okay so
2071:51 - here's that device running
2071:53 - excuse me our application
2071:56 - and what we need to do now is to go to
2071:58 - command line and let me just do some
2072:00 - reshuffling on the screen
2072:03 - and this is our
2072:05 - scrcpy and i'm gonna just do some screen
2072:08 - shuffling here so get rid of this
2072:11 - let's go to terminal
2072:13 - okay so
2072:15 - let's issue the command as you can see
2072:17 - at the bottom of the screen so
2072:19 - i'm gonna do like this
2072:21 - and uh like that so
2072:24 - adb exit out but before that i'm just
2072:27 - gonna say dash e and screen cap
2072:31 - e and then let's say file
2072:34 - one png all right so
2072:36 - and if i now go to the project structure
2072:38 - i can see there is a file called file
2072:40 - one png and it is a screenshot from our
2072:42 - emulator okay so i'm gonna re
2072:45 - do the same thing i'm gonna go to forgot
2072:47 - my password screen and um let's get up
2072:51 - and get rid of the keyboard in here and
2072:52 - let's remove that space that i just
2072:54 - entered and then take the second
2072:56 - screenshot as file to png
2072:59 - and then let's go to the login page and
2073:01 - the register page get rid of this
2073:03 - keyboard
2073:05 - file free png okay so now that we have
2073:08 - that oops i'm going to
2073:10 - i press the back button i'm going to
2073:12 - log into our application with my email
2073:15 - address and our
2073:18 - horrible password of foo barb ads now
2073:20 - we're in the application let's take a
2073:22 - fourth screenshot called file for png
2073:25 - and in here while this is up with the
2073:28 - keyboard perhaps as well
2073:30 - let's see
2073:31 - and then take screen shot 5 or file 5
2073:35 - png so now we have 5 screenshots from
2073:37 - our 7 inch display as well
2073:39 - let's
2073:40 - excuse me let's go and collect those
2073:42 - screenshots file one two five and then
2073:45 - i'm gonna delete the ones on desktop and
2073:47 - just cut and paste the ones from
2073:50 - our application then let's go to
2073:53 - um
2073:54 - our google play console in here in the
2073:57 - seven inch display i'm gonna drop these
2073:59 - one by one so
2074:00 - drop the file one in here
2074:04 - and then let's drop file two right after
2074:06 - that and then we can say file three four
2074:08 - and five
2074:09 - so i uh so that you know how um i'm
2074:13 - thinking about the ordering of the
2074:15 - screenshots okay
2074:18 - so that's file four and then we have
2074:20 - file five right there and what we need
2074:23 - to do is we need to basically do the
2074:25 - same thing for as
2074:27 - a 10 inch display as you can see here it
2074:29 - says 10 inch tablet screenshot so let's
2074:32 - go again
2074:34 - now we can close this emulator that is
2074:36 - right there then we can go back to
2074:38 - android studio so if i can find android
2074:41 - studio here
2074:42 - okay let's go to avd manager and in here
2074:46 - we're going to create a new virtual
2074:47 - device in this case it's going gonna say
2074:49 - tablet and in a nexus 10
2074:52 - is a 10 inch display i'm going to press
2074:54 - next and then sdk s that's fine as well
2074:57 - and just run it ooh landscape not sure
2075:00 - about that but
2075:02 - that's that may be fine but you know
2075:04 - what i'm actually going to delete it and
2075:06 - create a new one because we had some
2075:07 - problem before with the landscape mode
2075:10 - so i'm going to say nexus 10 again next
2075:13 - next portrait and then finish okay so
2075:15 - hopefully this starts it in the portrait
2075:17 - mode so then i'm gonna press the play
2075:19 - button right there and unfortunately it
2075:22 - started in the landscape mode but that's
2075:23 - okay hopefully we're gonna be able to
2075:25 - rotate it around
2075:27 - and i can see now it is running
2075:29 - hopefully uh so like that
2075:33 - and we should see now the home screen
2075:36 - let's see if we can rotate this uh
2075:39 - and unfortunately it doesn't actually
2075:42 - rotate so i want to see if there's any
2075:44 - properties in here that allows us to
2075:46 - change the display
2075:48 - from landscape to portrait so
2075:52 - snapshots recording settings enabled
2075:55 - light proxy advanced
2075:57 - show window frame
2075:59 - nope nothing in there that allows us to
2076:02 - change this device from
2076:04 - um
2076:05 - directional pad no it doesn't change the
2076:08 - display from
2076:10 - landscape to portrait and i am now
2076:12 - basically trying anything i can so even
2076:15 - if i go to chrome in here for instance
2076:17 - and say no thanks and then if i rotate
2076:20 - this i can see that it's unfortunately
2076:22 - not rotating the actual application so
2076:25 - we might then have to
2076:27 - take a screenshot in landscape mode so
2076:31 - let's see if if you can actually do that
2076:33 - so if there's anybody out there who
2076:34 - knows how to fix this issue i'd be
2076:36 - grateful to also know
2076:38 - because at the moment even doing the
2076:40 - command right and left it's not
2076:42 - listening to my commands it's not
2076:44 - basically rotating so how about this
2076:46 - icon
2076:48 - um well that didn't help so so much to
2076:51 - be honest with you so
2076:52 - um
2076:54 - it didn't really i mean i can go here
2076:57 - and then here oh now it's portrait okay
2076:59 - i did something so i just clicked on a
2077:01 - little icon on the top left after
2077:02 - rotating so it rotated to portrait so
2077:05 - that was just pure luck
2077:07 - let's go to visual studio code and say
2077:09 - command shift p on a macintosh or ctrl
2077:11 - shift p in linux and windows and save
2077:13 - flash or select device choose our 10
2077:15 - inch display
2077:16 - then i'm going to say run run without
2077:19 - debugging and if
2077:20 - everything is working correctly and
2077:22 - gradle's working in our favor then then
2077:24 - the gradle task is going to go by really
2077:27 - fast and i'm very grateful actually for
2077:29 - that to be honest
2077:30 - so gradle is working a lot better now
2077:32 - than xcode build process so here's our
2077:35 - application and displayed on a 10 inch
2077:38 - display and let's go ahead and start
2077:40 - taking some screenshots so i'm going to
2077:42 - go to terminal here and then start
2077:44 - taking screenshots of
2077:46 - file one in the login view then let's go
2077:49 - to forgot password and say
2077:51 - file two i'm gonna get rid of the
2077:53 - keyboard and take the screenshot without
2077:55 - the keyboard i'm gonna go here to the
2077:57 - register view get rid of the
2077:59 - keyboard and then say file three so
2078:03 - that's that let's not log in with a user
2078:06 - um like this and say foobar baz
2078:10 - log in with that user oh wrong
2078:11 - credentials okay
2078:13 - uh foo barbaz
2078:16 - login
2078:18 - and after logging in we're going to take
2078:19 - another screenshot which is our
2078:21 - screenshot 4 and then we're going to
2078:23 - take another screenshot with the
2078:24 - keyboard and for our um
2078:27 - file 5. all right so
2078:30 - that is also that then i'm going to open
2078:33 - the current folder i can see five
2078:34 - screenshots in here go to my desktop get
2078:36 - rid of the old ones and paste the new
2078:38 - ones in there
2078:40 - okay now that we have those we can clean
2078:43 - and remove this
2078:44 - emulator we don't have it and i'm also
2078:47 - going to close avd i can see it's
2078:49 - already closed so let's go back to
2078:51 - um our play store in here
2078:55 - so and play store um
2078:57 - console so i'm gonna upload
2079:00 - this new um png file file one then file
2079:04 - two for the ten inch tablet so all of
2079:06 - these five screenshots are for the ten
2079:08 - inch tablet
2079:10 - three
2079:11 - and then we're gonna go to four here
2079:14 - and then last but not least we're gonna
2079:17 - upload screenshot five and then right
2079:19 - after the upload is done i'm just going
2079:21 - to delete all those files to keep my
2079:22 - desktop clean so after doing that let's
2079:25 - just then save this and now you can see
2079:26 - it says your changes have been saved
2079:29 - fantastic
2079:31 - so now that is done and
2079:34 - we need to create a release app so if i
2079:37 - just bring my notes up a little bit here
2079:40 - fantastic so
2079:42 - what we need to do we need to have a
2079:44 - look at a little url here as you can see
2079:46 - at the bottom of the screen it's called
2079:47 - docslatter dev deployment android it is
2079:50 - a very important document and here i
2079:53 - strongly suggest anybody who's trying to
2079:55 - create a release application to go
2079:57 - through this it has information for
2079:59 - windows and macintosh and linux users
2080:01 - and these commands are absolutely um
2080:05 - full of value so
2080:07 - you may have to google these otherwise
2080:09 - around but this document has really put
2080:11 - all of that together in the same place
2080:15 - so as you can see in here the first
2080:17 - thing that we need to do is to create a
2080:19 - signing key for our application
2080:21 - and you need to follow these um
2080:25 - commands in here that have been created
2080:26 - for you so you can see and if i bring a
2080:30 - terminal up so if i say
2080:32 - terminal and i'll bring it up here and
2080:34 - if i go to this folder dot android on my
2080:37 - computer like this and i already have
2080:40 - some keys as you can see in here so i
2080:42 - have some keys already set up but in
2080:44 - order for us to actually
2080:46 - um
2080:47 - be able to follow along with this
2080:50 - and guide we need to go and create these
2080:53 - keys for us as well okay so what i'm
2080:56 - going to do is i'm going to do
2080:59 - let's see if i can bring up the command
2081:01 - for you as you can see at the bottom of
2081:03 - the screen so i'm going to actually copy
2081:05 - that command that i provided for you at
2081:06 - the bottom of the screen okay
2081:09 - so and i'm going to go to terminal and
2081:11 - um let's just go to desktop for instance
2081:14 - and then i'm going to issue that command
2081:16 - exactly as you can see at the bottom of
2081:18 - the screen so let's see what happens in
2081:20 - here now it says enter a key store
2081:22 - password so this is a password that you
2081:24 - need to then provide inside a property
2081:26 - file i'll tell you soon about it so
2081:28 - remember this password up until this
2081:31 - point for this course we've been using
2081:32 - foobar baz as a password is an
2081:34 - absolutely horrible password so please
2081:36 - don't use that but since we've used it
2081:38 - consistently in this course and since
2081:40 - the password in this sense has no
2081:42 - meaning for this course i'm just going
2081:44 - to say foo bar pass but please don't use
2081:46 - a password as weak as that so
2081:48 - let's say foo barbaz
2081:50 - and let's see what it said java as a
2081:53 - keystore was tampered with or password
2081:55 - was incorrect so
2081:56 - um it this could perhaps be because i'm
2081:59 - actually trying to create an upload key
2082:01 - store like this and i already have one
2082:04 - from before so what i'm going to do is
2082:06 - to actually delete this file so i'm
2082:08 - going to say remove that file okay
2082:10 - upload keystore like that and i'm going
2082:13 - to issue this command again and i'm
2082:15 - going to say foo bar house
2082:18 - and fubarba so if you if you've already
2082:20 - had a key store from before then you
2082:22 - could just use it but i'm assuming that
2082:24 - you didn't have one however when i did
2082:27 - issue this command i already had one so
2082:30 - chances are you didn't have a keystore
2082:32 - from before you didn't you didn't have
2082:33 - to delete it but in my case i actually
2082:35 - have to delete it first and then issue
2082:37 - the command that you can see in the
2082:39 - caption at the bottom of the screen so
2082:41 - what is your first and last name i'm
2082:42 - just going to save and i have andy poor
2082:44 - okay
2082:45 - and your organization unit i'm just
2082:47 - going to say development
2082:50 - and then name of your organization is
2082:52 - pixelity a b okay city or locality okay
2082:55 - i can just say stockholm okay
2082:58 - and state or okay stockholm again let's
2083:01 - see uh two letter country code i'm gonna
2083:03 - say s e and it is saying is it correct
2083:07 - then i'm gonna press the enter button
2083:09 - uh i've already entered all of that
2083:11 - maybe i made a mistake in here so let's
2083:13 - just say what was the question
2083:17 - correct no do i have to type yes i'm
2083:20 - just going to say yes so
2083:22 - you have to provide yes at the end of
2083:24 - that and then what is the same return if
2083:26 - same as keystore password yes just enter
2083:29 - okay so now it's created a key store
2083:32 - for us in here you can see in the
2083:34 - android folder upload keystore jks okay
2083:38 - so that's very very important
2083:40 - now that that has been created what we
2083:43 - need to do is to have if you had
2083:44 - followed this you can see that what we
2083:46 - need to do now is to go to our flutter
2083:48 - project in here you see it says go to
2083:51 - your flutter project
2083:52 - and
2083:53 - and go to the android folder and create
2083:55 - a file called key dot properties okay so
2083:58 - let's go ahead and create that so i'm
2084:01 - going to open visual studio code in here
2084:04 - and then i'm going to go to cd
2084:06 - and let's see where we are at the moment
2084:08 - we're in the
2084:10 - root folder of our project standard
2084:12 - project i'm gonna go to the android
2084:14 - folder as it was suggested there and
2084:16 - then i'm gonna create a new file as it
2084:18 - was called here key dot properties okay
2084:20 - so key dot properties like this and then
2084:23 - i'm gonna
2084:24 - paste that content that was mentioned
2084:26 - here as you can see
2084:28 - like that
2084:30 - so maybe the entire content so i'm just
2084:32 - gonna paste it in here okay so it says
2084:34 - password for previous step from previous
2084:37 - step and we just said fubar bass
2084:40 - like that and the key password as well
2084:42 - and again that is foo bar bass the key
2084:45 - alias we're going to leave it as upload
2084:46 - and in here we're going to say the file
2084:49 - was stored in let's see if you can get
2084:52 - the entire path for this so it's right
2084:54 - here so i'm going to copy that path path
2084:57 - sorry and then i'm going to delete this
2085:01 - information in here and then paste it
2085:03 - right there okay
2085:05 - so that should be good to go so i'm just
2085:08 - gonna double check in my notes as well
2085:10 - that that is how we've done it before as
2085:12 - well and that seems to be completely
2085:14 - fine so
2085:16 - then after doing that with an empty line
2085:18 - at the end i'm going to close this file
2085:20 - and save its contents right there so now
2085:23 - if you go to the main folder of your
2085:24 - application and say git status then you
2085:26 - should see that you
2085:28 - have only these things basically
2085:31 - committing to your project because your
2085:33 - key properties are not going to be
2085:35 - committed okay
2085:36 - so
2085:37 - and that's that's why i'm mentioning
2085:39 - here that you always need to make sure
2085:41 - that that particular file is not going
2085:43 - to be committed with your project into
2085:45 - github so you could always go to your
2085:48 - git ignore file and actually add that
2085:50 - particular file to your ignore so let's
2085:52 - just say veeam git ignore
2085:55 - not get ignore and in here we're just
2085:57 - going to add a new file and say any
2086:00 - key.properties file should not be
2086:02 - committed and then we do a good status
2086:04 - again that our get ignore is changed if
2086:06 - you're paranoid like me you will do it
2086:09 - like i did all right
2086:12 - so after doing that what we need to do
2086:14 - is to in fact create basically
2086:17 - um
2086:19 - sorry we have to update our build gradle
2086:21 - for signing and
2086:23 - i provide a link which i'm going to go
2086:25 - to myself and let's see um
2086:30 - if i can find that
2086:31 - link myself
2086:33 - configure signing in gradle and that is
2086:35 - right here uh here
2086:38 - and it is telling us exactly what to do
2086:40 - it says add the keystore information
2086:42 - from your properties file before the
2086:44 - android block you see this android block
2086:46 - in here so what we need to do is to go
2086:49 - to this file in our project android app
2086:52 - build gradle so visual studio code
2086:55 - let's go to um build.gradle in android
2087:00 - app all right so we're there and what
2087:02 - did it say that we have to find this
2087:04 - section android you see
2087:06 - so let's find the android block right
2087:08 - there it's just one so right there then
2087:11 - let's copy this text as it is mentioned
2087:13 - there and paste it right before android
2087:16 - okay boom and i'm going to bring it one
2087:18 - step
2087:19 - back as well so it is
2087:21 - um
2087:22 - basically formatted correctly okay so
2087:24 - that's that part and it says then load
2087:27 - the key.properties file into the
2087:28 - keystore properties object and that's
2087:30 - what this guy is doing okay then what we
2087:32 - need to do it says find the build types
2087:35 - block so let's go and find that you can
2087:37 - see the release we're gonna basically
2087:39 - edit that as well so i'm gonna go to my
2087:41 - notes as well build gradle uh sorry
2087:44 - about that just to ensure that i'm
2087:45 - following all the steps correctly
2087:48 - and in here it says release to do add
2087:50 - your own signing config for the release
2087:52 - build signing with the debug key for now
2087:54 - so flutter run release works and it says
2087:56 - then replace that with this so you just
2087:59 - have to grab this information here and
2088:02 - just completely replace this build types
2088:04 - with that thing that was provided i'm
2088:06 - gonna fix the uh indentation a little
2088:09 - bit as well so here the key alias
2088:12 - password are being read from the correct
2088:14 - place and then the release is signed
2088:17 - with the release key in here
2088:19 - and that is it really so you don't have
2088:22 - to do so much more and what we're gonna
2088:24 - do now is to as you can see at the
2088:26 - bottom of the screen we're gonna do some
2088:27 - cleaning up of the um of the build
2088:30 - artifact so in your project you need to
2088:32 - now go to terminal here as you can see
2088:35 - for on my screen so i'm just going to go
2088:37 - and say flutter clean
2088:40 - okay
2088:42 - so like that
2088:46 - all right
2088:48 - and we're then going to say flutter
2088:51 - pub
2088:53 - get
2088:54 - all right
2088:59 - and after doing that we're actually
2089:01 - going to
2089:02 - um create our app bundle so after doing
2089:05 - flutter pop get then you have to issue
2089:07 - flutter build app bundle
2089:09 - so by issuing this command you can see
2089:12 - now it is going to start building your
2089:14 - application with griddle using all those
2089:16 - properties that you've specified in
2089:17 - those various files so there was a lot
2089:19 - of work that we have to do but
2089:21 - thankfully it's been documented so well
2089:24 - that it makes the whole process so much
2089:26 - easier had it not been for all those
2089:28 - documentation bits and pieces it would
2089:30 - have been such a difficult process to go
2089:33 - through so let's just wait for this
2089:34 - build gradle process to now do its work
2089:38 - and all right now you can see that the
2089:40 - process has gone through it has created
2089:41 - our little app bundle which is this aab
2089:44 - file
2089:46 - and what we need to do is to be able to
2089:48 - then upload this app bundle to google
2089:50 - play store so let's go back to our play
2089:54 - store and here i'm going to close this
2089:55 - close figma
2089:56 - and let's now go back to our dashboard
2090:00 - in here
2090:01 - and you can see my awesome notes and
2090:04 - let's see what we have
2090:05 - going on in here and what we need to do
2090:08 - is to go to our production in here and
2090:11 - and then create a new release okay so
2090:15 - press the create new new release in
2090:17 - there and you can see now it asks you to
2090:19 - upload your app bundle so what i'm going
2090:21 - to do is to go back to visual studio
2090:23 - code and see where this file is located
2090:25 - so i'm going to open that folder and i
2090:29 - can see the aab here and i'm going to
2090:31 - then drag it in here and place it there
2090:34 - okay
2090:38 - so
2090:39 - after this upload is done it may take
2090:41 - some time i can see it's 25 megabytes
2090:43 - although i'm at a thousand thousand line
2090:45 - um fiber optic network in here it's
2090:47 - taking like a while to upload i don't
2090:49 - know really why
2090:50 - but in the release name as you can see
2090:52 - it says that well this is not something
2090:54 - um that we actually share with anybody
2090:56 - so let's just say um first we call it
2090:59 - first version okay so and in here for
2091:03 - your release notes you will basically
2091:05 - copy from a previous release well we
2091:07 - don't have that listen here just say um
2091:10 - the first
2091:12 - version of our app okay
2091:15 - and then we can save this information
2091:18 - all right so
2091:19 - excuse me
2091:21 - so now we have that um we have the first
2091:25 - version in there okay
2091:27 - and
2091:30 - that should be it so let's just go to
2091:32 - the review release in here and we have
2091:33 - one error that's probably because we
2091:34 - haven't provided the countries
2091:36 - and add at least one country or region
2091:39 - and that's fine we're gonna we're gonna
2091:40 - add that so let's go and see
2091:44 - overview where we have to add these
2091:46 - countries if we can't figure it out
2091:48 - somehow
2091:49 - let's click in there android okay
2091:54 - that is fine
2091:56 - and um
2091:58 - we need to go to under production and
2092:01 - all the countries or release as you can
2092:02 - see in google play a console under
2092:04 - production so i believe we're already
2092:07 - under production so if i click under
2092:09 - production now we can see countries and
2092:11 - regions so let's go in there and say add
2092:13 - countries and regions and i believe we
2092:15 - could in here
2092:16 - hopefully select all countries
2092:19 - if you
2092:20 - sell such good make sure your price for
2092:22 - the countries well can we not sell oh
2092:24 - yeah i i saw that
2092:26 - if i click here i can select all the
2092:28 - countries so let's do that and say add
2092:30 - countries and regions and then press the
2092:32 - add button fantastic
2092:34 - then we're gonna go to our releases
2092:38 - and uh
2092:39 - here
2092:40 - we have this release so let's go to the
2092:42 - release dashboard
2092:44 - okay that's fine and then i'm gonna
2092:46 - press the edit release
2092:48 - and i'm gonna press the review release
2092:50 - now that we've selected all those
2092:51 - countries we have one warning the app
2092:53 - bundle contains native code and if
2092:54 - you've not uploaded debug symbols okay
2092:56 - and these debug symbols is something
2092:57 - that i actually encourage you to go read
2092:59 - about because these are gonna allow you
2093:01 - to see when whenever and if there is any
2093:05 - crashes in your application occurring
2093:07 - anywhere
2093:08 - where your users are using your
2093:09 - application so
2093:11 - i would really suggest that you do this
2093:13 - and upload your d box symbols although
2093:15 - that's something that i believe is
2093:16 - outside the scope of this course but it
2093:18 - should be quite straightforward for you
2093:20 - to figure it out and there's link in
2093:21 - here that you can read more about it
2093:24 - so now we can start the rollout to
2093:26 - production and then say rollout
2093:29 - and you'll see now this is going to go
2093:31 - in review and
2093:33 - and google uh cons like at the play
2093:35 - console could take some while some time
2093:38 - to rel to review the first version of
2093:40 - our application some people said it
2093:42 - takes upwards of a week and for me it's
2093:44 - some sometimes actually taking about
2093:46 - eight nine days so
2093:48 - depending on what you've done like that
2093:50 - your track record from before if you
2093:51 - release any applications from before you
2093:53 - may actually be able to be placed
2093:56 - somewhere first in the queue or maybe
2093:58 - last i don't know i don't know their
2094:00 - processes so
2094:01 - um and that that was really in that was
2094:03 - like the releasing of our android
2094:05 - application and we went through quite a
2094:06 - lot even figma design in the middle of
2094:08 - everything so congratulations for going
2094:10 - through this together with me
2094:12 - since we've changed some code let's go
2094:14 - ahead and
2094:16 - um actually commits all our changes so
2094:18 - i'm going to say good status
2094:21 - and make sure that your
2094:23 - properties file the key properties file
2094:25 - is not added so let's just say git add
2094:28 - all
2094:28 - and then i'm going to say git commit
2094:31 - step
2094:32 - 31
2094:34 - and if you have a look at our logs we
2094:36 - have step 30 and 31 so let's push those
2094:38 - changes to our remote and then i'm going
2094:41 - to say get a tag also step 31
2094:45 - okay
2094:46 - and get push tags
2094:49 - so
2094:51 - that was it now you've released your
2094:52 - application for ios and android and um
2094:56 - this this could perhaps be the last
2094:59 - thing that you will um learn about in
2095:02 - this course right now as it is if you're
2095:05 - one of the early adopters of this course
2095:07 - but i'm planning on putting out a lot
2095:10 - more videos that i'm going to append to
2095:12 - this course with a lot more material so
2095:15 - stay tuned and i may actually see you in
2095:18 - the next chapter hello everyone and
2095:20 - welcome to this chapter in the previous
2095:22 - chapters as you've been following along
2095:24 - with this
2095:25 - course you know that we've created our
2095:27 - application and we've also released it
2095:29 - to the app store
2095:30 - for ios and also google's play store
2095:32 - using a play store console
2095:35 - and now you will
2095:37 - i mean any application or any software
2095:39 - is not something that you will do and
2095:41 - it's just finished every application has
2095:43 - to live on and there will be you will
2095:45 - add new functionalities to it and then
2095:47 - um you kind of have to keep it alive
2095:50 - just as i will keep this course live
2095:52 - you'll also have to keep your
2095:53 - application alive so one of the things
2095:55 - that you might want to add to your
2095:56 - application is localization
2095:59 - now um
2096:01 - if you don't know
2096:02 - i mean if you haven't done software
2096:03 - development before you may not know what
2096:05 - localization is but
2096:07 - localization in um short form is the
2096:10 - process of you making your application
2096:12 - more accessible to other people in
2096:15 - different countries
2096:16 - than the one for instance that um
2096:19 - you live in so
2096:21 - up until this point we've been creating
2096:22 - our application with a user interface
2096:24 - that is mainly in english
2096:27 - but you may not be even from england you
2096:29 - may not be from australia or us you may
2096:31 - just speak the language english
2096:34 - and um for instance i live in sweden so
2096:37 - the application that we have developed
2096:39 - right now isn't really accessible to
2096:41 - everyone in sweden
2096:43 - even though most people in sweden speak
2096:45 - very fluent english however it's not
2096:47 - their mother tongue so
2096:50 - localization is um the process of making
2096:53 - your application more accessible to
2096:54 - those people who don't speak the
2096:56 - language that you've designed for your
2096:57 - user interface
2096:59 - and it's not just
2097:01 - about the language and the text that
2097:04 - you're using it also entails a lot of
2097:06 - other and also
2097:07 - includes many other things for instance
2097:09 - how you
2097:10 - present
2097:12 - currency and values in your application
2097:14 - now we don't have like a shopping basket
2097:16 - or anything we don't have an e-commerce
2097:18 - application and that we've developed so
2097:20 - far so there's nothing for the user to
2097:22 - purchase in the application but
2097:24 - um
2097:26 - if you were developing an application
2097:27 - where the user could for instance buy
2097:29 - things then
2097:30 - your shopping basket would need to for
2097:32 - instance present
2097:33 - the amount um for um like the product
2097:37 - prices in
2097:38 - in that person's
2097:41 - currency so if you're for instance
2097:43 - presenting the ui to a person in sweden
2097:46 - that person doesn't expect to see for
2097:48 - instance prices in dollars they would
2097:49 - expect to see prices in the swedish
2097:51 - crown
2097:52 - and um or if for instance you're doing
2097:54 - this application for someone in
2097:56 - england you'd probably want to do
2097:59 - with gbp which is the great
2098:01 - british pound i think or just pound
2098:04 - so
2098:05 - localization is a lot more than just
2098:08 - changing the text of our application but
2098:10 - since our application doesn't have any
2098:12 - of those things we're not presenting any
2098:14 - dates for instance at the moment we're
2098:16 - not presenting
2098:17 - any currencies or values like that then
2098:19 - for us it in it basically means only
2098:22 - changing the text of our application
2098:26 - so what we're going to do in this
2098:27 - chapter is going to
2098:29 - localize our application
2098:31 - and
2098:32 - we're going to do it in two languages so
2098:34 - for english which we've already done so
2098:36 - far which is the text that we've
2098:37 - provided for the user interface of the
2098:39 - application to this point and we're also
2098:41 - going to do it in swedish now you don't
2098:43 - have to know swedish in order to be able
2098:44 - to go through this chapter i'm going to
2098:46 - help you with that and there's a github
2098:48 - repository for this project that you can
2098:49 - just copy and paste
2098:51 - the swedish text for instance
2098:54 - you don't have to even write swedish at
2098:56 - all you don't even have to follow along
2098:57 - writing the exact text that i'm writing
2098:59 - for instance in swedish you can just put
2099:00 - some gibberish in there because
2099:03 - all you have to do really is just to
2099:04 - understand the concepts of what
2099:05 - localization entails for your
2099:07 - application how you can do it with
2099:08 - flutter and then when it comes to
2099:10 - actually localizing your own
2099:11 - applications then you can for instance
2099:13 - choose um bangladeshi or if you want to
2099:16 - choose any language in india for
2099:17 - instance or um or do if in pakistan or
2099:21 - whatever um
2099:23 - language you choose to basically go for
2099:26 - so you don't have to really know swedish
2099:27 - that's what i'm that's what i'm saying
2099:29 - but
2099:29 - um also as you can see at the bottom of
2099:32 - the screen localization could also be
2099:33 - for languages that are not traditionally
2099:35 - left right like farsi or
2099:37 - um arabic so those languages are written
2099:40 - right to left so
2099:41 - there will need to be some special
2099:43 - considerations made into um
2099:45 - code for you if you're trying to support
2099:47 - right to left languages like for c
2099:50 - and um
2099:51 - so for instance a name of a person
2099:54 - um
2099:55 - you may want to be able for instance if
2099:57 - you're presenting a list of famous
2099:59 - people
2100:00 - that for instance the user can read
2100:02 - about those names may not have to
2100:04 - necessarily be
2100:06 - um presented in arabic names like
2100:09 - they're like their spelling doesn't
2100:11 - necessarily have to be arabic it could
2100:12 - be english but
2100:14 - for instance an age of a person like if
2100:15 - you were saying bill gates you could
2100:17 - write the name in english even though
2100:19 - the language of user user interface is
2100:21 - arabic but the age of that person if
2100:23 - you're presenting then it might need to
2100:25 - be translated in like um numerical
2100:28 - values that are under understood by
2100:30 - whoever speaks that language
2100:33 - so um
2100:34 - what i'm trying to say is that if you're
2100:36 - trying to support right-to-left
2100:37 - languages you may have to take into
2100:39 - consideration those points that i just
2100:41 - mentioned but in this chapter we're not
2100:43 - going to do that we're just going to
2100:44 - cover english and swedish and those both
2100:46 - languages are left to right
2100:50 - now let's have a look at
2100:51 - the documentation because the
2100:53 - documentation for localization of a
2100:55 - fluster application is very thorough
2100:58 - and i highly suggest that after watching
2101:01 - this chapter and learning about it
2101:03 - from my perspective i think it is very
2101:05 - very important that you actually have a
2101:07 - look at the um
2101:10 - the official become documentation i'll
2101:11 - try to open with a tab in here so um
2101:15 - i'll bring it to the screen so you'll
2101:18 - see
2101:19 - so i'll get rid of that
2101:21 - and i'll bring up
2101:23 - the
2101:24 - screen a little bit like this sorry i
2101:26 - have to do some rearrangement so you see
2101:28 - the screen better so as you can see here
2101:31 - it's an official documentation for
2101:34 - accessibility localization and
2101:35 - international internationalization
2101:38 - and
2101:39 - um
2101:40 - you'll see some terms sometimes for
2101:42 - instance and during internationalization
2101:44 - and localization you'll see some terms
2101:47 - such as i 18 n
2101:50 - and sometimes you'll also see l 10 n and
2101:54 - you'll be wondering like what are these
2101:56 - things what does it even mean l 10 n
2101:59 - and the reason for like what i 18n
2102:03 - actually means it is
2102:05 - internationalization
2102:07 - um and if you look at it
2102:09 - internationalizes
2102:12 - if i write it
2102:13 - the asian like this
2102:16 - and then if you take 1 2 3 4 5 6 7 8 9
2102:20 - 10
2102:21 - one two three four five six seven eight
2102:24 - so 18 total number of characters between
2102:26 - i and n
2102:28 - so it is known then to write i 18 n just
2102:32 - to refer to internationalization
2102:35 - and the same thing is true for
2102:37 - localization because let's let's bring
2102:39 - up for instance visual studio code
2102:41 - maybe we can actually see in visual
2102:43 - studio code a little bit better
2102:45 - um if i bring it up here
2102:47 - and i
2102:48 - increase the size of the font
2102:52 - and if i write enter
2102:54 - nationalized international
2102:57 - international non-lineation
2103:00 - okay and then write localization so that
2103:03 - was one two three four five six seven
2103:05 - eight nine ten one two three four five
2103:08 - six seven eight so it's 18 total and if
2103:12 - we look at localization between l and n
2103:14 - if you count it one two three four five
2103:16 - six seven eight nine ten characters so
2103:20 - a lot of people refer to these things as
2103:22 - i18n and l10n i18n basically means
2103:26 - internationalization and l10n means
2103:28 - localization so now you know the reason
2103:30 - for that it's just it's just programmers
2103:32 - being lazy and trying to like shorten
2103:34 - everything as much as they can so now if
2103:37 - you see these two terms then you know
2103:39 - what they refer to
2103:41 - okay so what i was saying basically in
2103:43 - the beginning is to please after
2103:45 - watching this video go ahead and read
2103:48 - the official documentation because it is
2103:50 - very important it's very thorough it
2103:52 - talks about things that we don't even
2103:53 - talk about in this chapter
2103:55 - so um i
2103:57 - highly recommend that you read this
2103:58 - documentation as well
2104:01 - okay
2104:02 - so that was that and now what we need to
2104:04 - do is to basically get started by adding
2104:07 - um internationalization localization
2104:09 - support to our flutter application so
2104:12 - i'm gonna bring bring a visual studio
2104:13 - code in here and maybe decrease the size
2104:16 - a little bit
2104:18 - i'm gonna change the screen layout all
2104:20 - right so
2104:22 - um this is how we've left our
2104:23 - application to this point so what we
2104:25 - need to do is i'm just gonna close all
2104:26 - the tabs and then i'm going to press
2104:28 - command and command p in visual studio
2104:30 - to open a file for instance
2104:33 - and then we're going to look at our pop
2104:35 - spec yaml file so
2104:37 - if you go there and what we need to do
2104:39 - is to add flutter localizations to our
2104:42 - pop special
2104:44 - let's have a look in here and you can
2104:45 - see and you may be actually wondering
2104:47 - why i'm
2104:49 - what am i even talking about what is
2104:50 - flutter um
2104:52 - localizations and i didn't make that up
2104:55 - it is basically documented right here
2104:57 - let's have a look at it
2104:59 - as you can see it says the first thing
2105:00 - that we need to do is to go to our pop
2105:02 - spec yaml file and add flutter
2105:04 - localizations now
2105:07 - what this basically does for our
2105:08 - application is that it allows
2105:12 - our application to be
2105:15 - localized and it also adds uh like
2105:18 - auto-generated code for our application
2105:20 - as you'll soon see so
2105:22 - it is a little bit difficult to explain
2105:23 - exactly what it does before you've seen
2105:25 - the results so what we need to do for
2105:27 - now is just to find the dependencies
2105:29 - section of our pop specky ammo here and
2105:32 - i found it here and what we need to do
2105:34 - in as you can see it says you just need
2105:37 - to add flutter localizations and i'm
2105:38 - going to do that right after flutter
2105:40 - okay and a column
2105:43 - and then we're going to say sdk flutter
2105:46 - all right so that's that and this
2105:49 - application at the moment is not running
2105:50 - so what i'm gonna do is just to say
2105:52 - um select device and then i'm going to
2105:55 - use my android phone okay as you follow
2105:59 - along with the with the course you know
2106:00 - that i
2106:02 - prefer personally to have
2106:04 - real devices running so right now i have
2106:07 - um scr cpy i think somewhere let's see
2106:10 - if we can bring it up actually let's go
2106:12 - to terminal
2106:13 - scr cpy
2106:16 - so this is
2106:17 - my android telephone
2106:19 - and then on the side i also have an
2106:21 - actual iphone running here so
2106:23 - basically there are two devices and that
2106:26 - have our app installed um so an iphone
2106:29 - and an android and we're going to work
2106:30 - with both of them
2106:32 - um
2106:33 - so um what we're gonna do is to run our
2106:36 - application uh on the android phone for
2106:38 - instance i'm gonna say command shift p
2106:40 - on uh when
2106:42 - on mac and then ctrl shift b on a linux
2106:44 - machine or windows and then say select
2106:47 - device and i'm going to select this
2106:49 - android phone then i'm going to go to
2106:51 - the main dart file and then just say run
2106:53 - without debugging so let that do its job
2106:57 - i'm going to decrease the font a little
2106:59 - bit because it's just humongous at the
2107:00 - moment so after doing that after adding
2107:04 - the pop specky ammo in here we also need
2107:07 - to make sure that we follow the
2107:10 - as you can see in here it says yeah you
2107:11 - have to do these things and we're going
2107:12 - to take care of that
2107:14 - but what we're also going to do is to
2107:16 - add this internationalization package to
2107:18 - our application so let me remove that
2107:20 - screen from there make sure that our
2107:22 - android application is running and this
2107:24 - is the state i've left the application
2107:26 - i'm logged in at the moment so what i'm
2107:28 - going to do is just to log out
2107:31 - all right so that up until this point
2107:32 - the only thing we did really was to add
2107:34 - flutter localization sdk true sorry sdk
2107:37 - flutter here then what we need to do is
2107:40 - to add the internationalization package
2107:42 - to our application okay so let's go and
2107:46 - i'm going to open a new terminal in here
2107:48 - in visual studio code and change the
2107:51 - layout a little bit so you see it better
2107:52 - as well like this
2107:54 - and let's just go ahead and say flutter
2107:56 - pop add intel okay
2107:58 - and you can read more about this intel
2108:01 - package on popdev so if we for instance
2108:04 - go to create a new tab in here and i
2108:06 - bring it here and we just say puff.dev
2108:09 - and let me increase the size
2108:11 - to a little bit more ginormous size
2108:14 - and let's just say intl okay and you can
2108:17 - see here's the intl package
2108:20 - and it is from darkdev so it is actually
2108:22 - an official package that you can include
2108:24 - in your application and there's
2108:25 - documentations about how to use it okay
2108:29 - so you can also see how you can for
2108:30 - instance um handle date formatting in
2108:33 - different languages all right so now
2108:35 - we've added that and if i bring this
2108:38 - screen like this so you can see the
2108:39 - results of adding that package to our
2108:41 - application and i can see
2108:43 - it says got dependencies all right so
2108:46 - that was the result of saying flutter
2108:48 - pop at intel
2108:51 - fantastic the other thing that we need
2108:53 - to do is to
2108:54 - go under flutter here
2108:57 - in our pop spec if i change the screen
2108:59 - layout a little bit more
2109:01 - um we need to go as you can see at the
2109:03 - bottom of the screen we need to add a
2109:04 - generate true under the flutter section
2109:07 - and it is right here so this generates
2109:10 - true that we add just like this it is um
2109:14 - it is
2109:15 - very very important basically for how
2109:17 - code generation is gonna work
2109:20 - so i'm gonna basically have a look here
2109:23 - generate and add space here okay so if
2109:26 - you add this generate true in here it
2109:28 - allows the localization packages and
2109:31 - like the localization code that is
2109:33 - running in your application to generate
2109:35 - to auto generate
2109:38 - code for you what i mean by that is as
2109:41 - you'll soon see
2109:44 - flutter internally uses a
2109:47 - file called a file type called marb
2109:53 - and these arb files are kind of like key
2109:56 - value
2109:57 - files and very i mean kind of like json
2110:00 - and in the keys um you specify some
2110:03 - names for instance you say login screen
2110:06 - title
2110:07 - and the value would then be the actual
2110:09 - value you've translated in that specific
2110:12 - language
2110:12 - and you will have multiple of these arb
2110:14 - files
2110:16 - and i think actually i'm going to
2110:18 - explain it rb more soon but it stands
2110:21 - for application resource bundle
2110:23 - but just know that
2110:25 - i mean i don't want to go too much into
2110:26 - details about arb files right now
2110:28 - because there's a section coming up
2110:29 - where i'll explain that but what you
2110:31 - need to know right now is that this
2110:33 - generate true flag under your flutter
2110:35 - section in pop special allows
2110:38 - the auto generated code to basically
2110:41 - hook itself into your project and when
2110:44 - you add new keys and values to your arb
2110:46 - files as you'll soon see how
2110:49 - then up then the code generation will
2110:51 - kick in every time you do a hot restart
2110:53 - or you run your application fresh and it
2110:56 - will go through your arb files and it
2110:58 - will generate the keys
2110:59 - in
2111:00 - inside like a dart
2111:02 - um source code for you
2111:04 - and this dart source code will be
2111:06 - something that you can literally import
2111:08 - into your application and like use the
2111:10 - keys you added to the json as just like
2111:12 - dart code inside your application
2111:14 - so this is a lot of talking just like
2111:16 - abstract talking but you will soon see
2111:18 - exactly how these things work so don't
2111:20 - worry about that
2111:23 - so what we need to do now is after we've
2111:25 - done all this work we need to basically
2111:27 - add support for localization into our
2111:30 - ios application as you can see at the
2111:32 - bottom of the screen in the caption now
2111:34 - android works just automatically in that
2111:38 - when we start adding localization to our
2111:40 - application new languages the android
2111:42 - app just completely understands then
2111:43 - okay here's a new language i can handle
2111:46 - that and i will just refresh my
2111:48 - ui in order to display all the values
2111:50 - that you entered but ios is a little bit
2111:52 - more old-fashioned you have to help it
2111:54 - understand that this application
2111:56 - actually supports various languages
2111:58 - so and i'm actually glad to say that you
2112:00 - don't have to have xcode in order to go
2112:02 - through this particular
2112:04 - section of this chapter
2112:06 - but we need to as you can see at the
2112:07 - bottom of the screen we have to go to
2112:08 - our info plist file and update a special
2112:12 - section or create a special section
2112:14 - called core foundation bundle
2112:15 - localizations okay so let's go ahead and
2112:19 - actually take care of that right now so
2112:21 - i'm gonna also bring up my notes to
2112:23 - ensure that i'm telling you all
2112:24 - everything that i plan to tell you
2112:27 - see if i can find that section
2112:30 - all right
2112:31 - so what i'm going to do in here i'm
2112:32 - going to close that file i'm also going
2112:34 - to close the main dar file and then i'm
2112:36 - going to press command p in visual
2112:38 - studio code and i'm going to look for a
2112:40 - file called info.plist it should be
2112:42 - under the ios folder slash runner and in
2112:46 - there there's an info p list and if
2112:48 - you're curious exactly where that is you
2112:50 - will be able to for instance go to
2112:52 - terminal and i'm gonna clean the
2112:54 - terminal and i'm just gonna say open you
2112:56 - can see this is the folder where
2112:58 - this entire course source code is based
2113:01 - if i say open
2113:03 - okay so we're gonna open as you can see
2113:05 - in here
2113:06 - so
2113:07 - this is the source code where we we are
2113:09 - at the moment and there is a folder
2113:10 - called ios and in there there's a a
2113:12 - folder called runner and in there
2113:14 - there's a file called info plist so
2113:16 - that's where
2113:18 - that's the file that we have to open
2113:19 - right now okay
2113:21 - so i'm going to say command p again and
2113:22 - then info plist let's open that and
2113:24 - these are like key values as you can see
2113:26 - it's it's a strange like p list kind of
2113:29 - like an xml format kind of thing
2113:32 - but you will need to look for cf bundle
2113:34 - localizations in here um
2113:36 - and if you don't have cf bundle
2113:38 - localizations then you'll have to create
2113:40 - it just like in here so as soon as you
2113:42 - see this dict which is dictionary let's
2113:45 - go ahead and create a new key so let's
2113:46 - just say key and we're going to say core
2113:48 - foundation bundle localizations
2113:51 - okay
2113:53 - and then we end the key right there
2113:56 - and what you have to do this the value
2113:58 - of this key is not just a string but
2113:59 - it's actually an array an array meaning
2114:02 - that is a list
2114:04 - of things it's a list of languages or
2114:06 - localizations that your application
2114:08 - supports so
2114:09 - as you see all the other things in here
2114:12 - there they have like these keys and then
2114:14 - values but for us we have to do
2114:16 - something like this you see there's a
2114:17 - key which is cf um
2114:19 - bundle localization and localizations
2114:22 - and we have to then create an array so
2114:23 - let's go up here right after this say
2114:25 - array
2114:26 - and then we close the array just like
2114:28 - that you see this is how they were doing
2114:30 - it here as well
2114:32 - and then we need to add two strings in
2114:33 - here so one string and we close that
2114:36 - string
2114:37 - and another one okay so because we're
2114:39 - supporting english and swedish so every
2114:41 - string in your arraylist is gonna then
2114:44 - um
2114:45 - indicate the language code that your
2114:47 - application supports okay so first we're
2114:49 - gonna support english and then we're
2114:51 - gonna sweet and support swedish and
2114:53 - swedish language code is suv because in
2114:55 - sweden
2114:56 - and sweden itself we don't call the
2114:59 - country sweden we call it sevaria
2115:02 - and that's what that's where sv comes
2115:05 - from but you can also google this and
2115:07 - you can like look for localization
2115:10 - country codes and you will get to a list
2115:13 - on wikipedia or something that tells you
2115:15 - exactly what you have to use for
2115:16 - instance if you want to write um
2115:19 - a special language in india or pakistan
2115:22 - like urdu or whatever you'll have to
2115:24 - find the correct language code for that
2115:27 - so but you can google that easily so um
2115:30 - i'm not gonna present all those
2115:32 - languages code language codes in this
2115:35 - chapter but i'm just giving you the
2115:36 - tools necessary to find out on your own
2115:40 - okay and that is it really that's all we
2115:42 - have to do for the ios app so we've
2115:44 - added the cf bundle localizations in
2115:46 - here and we're good to go for the info p
2115:49 - list
2115:51 - then what we need to do in here is we
2115:53 - need to go into our root folder of our
2115:56 - application and then we need to add a
2115:58 - file as you can see on the bottom of the
2115:59 - screen called l10n and as i told you
2116:02 - this l10n is a
2116:04 - it means a localization that's the 10
2116:07 - thing meaning that there's 10 letters
2116:08 - between l and n in localization so let's
2116:11 - go ahead in here and i'm just going to
2116:13 - right click on this folder in here and
2116:16 - actually here
2116:18 - and then let's add a new file and call
2116:20 - it lpn yamo all right
2116:22 - and
2116:23 - in here then we have to write some stuff
2116:25 - and i'll bring the official
2116:27 - documentation because it is very very
2116:29 - helpful in this case so let's go and
2116:31 - have a look at the documentation what we
2116:32 - have to enter in this ltn file
2116:35 - let's see if we can find it somewhere
2116:37 - and it is an arb file so l10n
2116:41 - and it looks like this so this is this
2116:43 - is like the contents that we kind of
2116:45 - need to place in our l10 file
2116:49 - so as you can see it says
2116:51 - arb directory and it's called lib el
2116:53 - tenen all right and we'll soon have a
2116:55 - look at what this actually means
2116:58 - excuse me
2117:00 - and then we have something called a
2117:02 - template arb file and then something
2117:04 - called an output localization file okay
2117:07 - so um i'm going to explain to you what
2117:09 - this what these all actually mean
2117:12 - so
2117:13 - what
2117:14 - what this arb directory means is it is
2117:17 - an indication for you you're telling um
2117:20 - flutters auto generated localization
2117:22 - engine
2117:23 - where to find your
2117:25 - files where to find your localizations
2117:27 - you see
2117:28 - when you create localizations for a new
2117:30 - language then you have to create a an
2117:32 - arb file so and you're basically telling
2117:35 - dart in this case or flutter in this
2117:36 - case that these arb files i'm going to
2117:39 - create are going to reside under this
2117:41 - folder so if you look at visual studio
2117:43 - code here we have now a folder from all
2117:46 - when we created basically our project
2117:48 - which was called lib as you can see in
2117:50 - here okay
2117:52 - so
2117:53 - in this lib then we're going to create a
2117:56 - folder as it's indicated in here called
2117:59 - l10n well you don't actually have to
2118:01 - call it altenent and that's why you have
2118:03 - this configuration so you could call it
2118:06 - something else you could call it
2118:08 - localization if you want to or my
2118:11 - strings whatever you want to it's just
2118:13 - an indication to flutter and the
2118:15 - localization engine where you're
2118:17 - replacing those files okay
2118:19 - so that's that so that's you're telling
2118:21 - dart where it f it where to find your
2118:24 - localization information then in here
2118:26 - the template arv file is a file in that
2118:29 - directory that you're
2118:31 - basically choosing as the main language
2118:34 - of the application so if for instance it
2118:36 - can't find a key for swedish in the
2118:38 - swedish file arb file it's going to fall
2118:40 - back to the english one and this is like
2118:42 - setting the ground for or setting the
2118:46 - foundation for how you're localizing
2118:48 - your application
2118:49 - you can think of it as the default
2118:51 - language that your application supports
2118:53 - in our case that language is going to be
2118:55 - english so we're going to leave this
2118:56 - file name as it is indicated here
2119:00 - the other thing output localization file
2119:02 - it is a file for that auto generation to
2119:06 - basically create for you so as you'll
2119:09 - soon see auto generation is very special
2119:12 - i mean it's very magic
2119:14 - so um but you have some control over it
2119:18 - and this is like one of those things
2119:19 - that you can control you can actually
2119:20 - control where that auto generated dart
2119:22 - code is going to be generated and in
2119:25 - like what file name
2119:27 - it is a little bit abstract so i'm not
2119:28 - going to go too much into it and you'll
2119:30 - soon see how we can configure this and
2119:32 - what this actually means so what we need
2119:34 - to do in this internationalization
2119:36 - documentation let's just copy this
2119:38 - content
2119:39 - and i'm going to then go in this l10 and
2119:42 - yaml file that we created and just paste
2119:44 - it there okay
2119:46 - what we need to do in here we're going
2119:48 - to leave the arb directory directory as
2119:51 - lib l10 because that kind of makes sense
2119:53 - okay
2119:55 - uh but in here app instead of app ian
2119:58 - i'm just going to say intel yeah it's
2120:00 - just for me it makes more sense to
2120:03 - use
2120:04 - the intl underscore en as the default
2120:07 - file so we're going to create intl en
2120:10 - and then intl
2120:12 - sv for swedish okay and then we're just
2120:15 - going to leave this as it is so i'm just
2120:17 - going to save this file right there and
2120:19 - then what we can do
2120:21 - is just to do a hot restart
2120:24 - now remember hot restarting is something
2120:26 - in internationalization it's very
2120:27 - important flutter because hot reload
2120:30 - won't trigger auto generation of your
2120:32 - internationalization code meaning that
2120:34 - if you have some
2120:36 - if you've added some new strings for
2120:38 - instance to your arb files as we'll talk
2120:40 - about it soon those things won't be auto
2120:43 - injected and generated into your code
2120:46 - until you do a hot restart hot reload
2120:49 - won't cut it so you have to either do a
2120:50 - hot restart or just completely stop the
2120:52 - application and build it from scratch
2120:54 - and that's a huge overhead so you may
2120:57 - not want to do that but a hot restart is
2120:59 - necessary for that okay
2121:02 - so let's have a look now at um
2121:05 - what
2121:06 - arb files are as i mentioned before now
2121:09 - arb files are application resource
2121:11 - bundles and they're pretty much json
2121:14 - files they are key values in there and
2121:16 - your keys are basically how a handle for
2121:20 - your application to then reach into your
2121:22 - localization and grab for instance a
2121:24 - string and the values of those keys are
2121:26 - the actual strings that will be
2121:28 - displayed in your user interface
2121:30 - they are more than just key values
2121:32 - because you can actually put logic in
2121:34 - your arb files in that for instance as
2121:36 - you soon see
2121:38 - inside this screen let me bring it up in
2121:40 - scr cpy and if you log in with a valid
2121:43 - user in here
2121:45 - and we have foobarbas as our
2121:48 - password i think
2121:50 - um in this screen at the moment on the
2121:51 - top of the screen we're seeing your
2121:52 - notes but what we're going to do in this
2121:54 - chapter just to demonstrate how arp
2121:56 - files work we're gonna say if you have
2121:59 - one note
2122:00 - it's just gonna write no
2122:02 - you have one note something like that or
2122:05 - one note
2122:06 - if you have more than one note then it's
2122:08 - gonna say for instance if you have three
2122:09 - notes it's gonna say three notes
2122:13 - or if you have zero notes no notes at
2122:16 - all it's gonna say
2122:17 - you have no notes so
2122:20 - for the same title
2122:22 - which is the title on top of the screen
2122:23 - we can actually put logic into the arb
2122:26 - file to say hey
2122:28 - this isn't a title however i wanted to
2122:31 - say this
2122:32 - if this particular count is zero i
2122:36 - wanted to say you have no notes
2122:38 - if the account is one i want it to say
2122:40 - you have one note or if the count is
2122:43 - more than one i wanted to say you have
2122:45 - x
2122:46 - amount of notes and that x is the actual
2122:48 - number that we will provide to it
2122:51 - so rb files are more than just json they
2122:53 - can actually have logic in them and they
2122:55 - stand as you can see at the bottom of
2122:57 - the screen they stand for application
2122:59 - resource bundle
2123:02 - all right and now what we need to do is
2123:05 - to actually go and create these um files
2123:09 - so let's go into this lib folder
2123:12 - and let's go and create our the folder
2123:15 - that we mentioned in this l10 and you
2123:17 - see we said that under lib we're gonna
2123:19 - have a folder called l10n and under that
2123:22 - l10n we're gonna have a file called intl
2123:25 - en arb okay so let's go ahead and see if
2123:28 - we can get that to work so in lib let's
2123:30 - go and say new file and then i'm going
2123:33 - to say l10n slash
2123:36 - intl en arb
2123:39 - and you can see that it creates the
2123:40 - folder as well lib l10n and intl enarb
2123:45 - and that is the file that we said we're
2123:46 - going to create here
2123:48 - let's then go ahead and say new file
2123:50 - intl and then we're going to say sv arv
2123:54 - okay
2123:56 - and as i mentioned before these are very
2123:58 - simple jsons to begin with so we can
2124:01 - just create a json for instance here and
2124:03 - in the english one first
2124:04 - so like this and in here i'm just going
2124:06 - to say my title
2124:08 - and then a value of my title goes here
2124:12 - okay and let's just copy and paste this
2124:15 - in the swedish one as well just for now
2124:17 - okay
2124:18 - so and i'm just going to do a hot
2124:20 - restart
2124:22 - all right so what this all did since
2124:25 - we've added our auto generation
2124:28 - in our pop speaking ammo if you remember
2124:30 - from before we added this generate true
2124:32 - inside here now what you should be able
2124:35 - to do is to have a look at the structure
2124:38 - of your project and now all of a sudden
2124:39 - you should be able to see a folder
2124:40 - called dot dart tool and if you drill
2124:43 - down in there you should be able to see
2124:44 - something called a flutter gen and if
2124:46 - you drill down in there you'll see gen
2124:48 - l10n and in there you'll see now three
2124:51 - files app localizations app localization
2124:55 - sv and applicalizations en now
2124:58 - what is this app localizations well if
2125:01 - you remember from our um
2125:04 - l10n we actually told the generation to
2125:08 - generate generated code to be named app
2125:10 - localizations and that's
2125:12 - basically it that's that file we said
2125:15 - that it needs to be called that so we
2125:17 - can open that and you'll see now there's
2125:19 - some information in here and
2125:22 - there is a locale name for instance and
2125:24 - then there are some delegate stuff and
2125:26 - i'll explain all these but what you'll
2125:28 - see here now is something called my
2125:30 - title and is a string and this is
2125:33 - exactly what we wrote in this my title
2125:36 - my title goes here
2125:38 - and you can see then if you go to the
2125:41 - english one
2125:42 - your string is there my title goes here
2125:45 - and the swedish one is also saying my
2125:47 - title goes here so it's not so it's not
2125:50 - so impressive since we actually chose to
2125:52 - have the exact same string in the
2125:54 - english and the swedish version so what
2125:56 - we could do is to go to the english one
2125:59 - in this
2126:00 - intel en arb and put eng at the end of
2126:03 - it and go to the swedish one and say
2126:06 - swe like in sweden
2126:09 - okay and then i now get a a save on this
2126:12 - file and then if you go in here you'll
2126:15 - see nothing has changed and that's what
2126:17 - i meant hot
2126:18 - reload doesn't cut it you have to do a
2126:21 - hot restart and if you do a hot restart
2126:23 - then this code should basically get
2126:26 - updated let's go ahead and see if it did
2126:29 - you can see here's the english one oops
2126:32 - i didn't mean to change it and here's
2126:33 - the swedish one so
2126:35 - now you know what those things actually
2126:38 - stand for
2126:40 - and
2126:41 - we now have a really good ground to
2126:45 - stand on because we've created our
2126:48 - localization yaml a configuration file
2126:51 - we have our english and swedish
2126:54 - localization files right here in lib
2126:56 - if you have a look here lib
2126:58 - ltn and under those we have intel en and
2127:02 - intel sv which means intel
2127:05 - internationalization english and
2127:06 - international nationalization swedish
2127:09 - now all we really have to do is to
2127:12 - basically go ahead now and start
2127:15 - populating these um
2127:17 - strings in our application and um kind
2127:21 - of
2127:22 - sorry populating them in the in these
2127:24 - arb files and then where in our
2127:26 - application we have
2127:27 - text hard-coded then we're going to
2127:30 - switch to using these
2127:33 - strings which are in our l10n
2127:35 - file
2127:37 - and in order for our application to
2127:40 - actually understand what
2127:42 - we have localized in inside our arb
2127:46 - files we have to actually tell the
2127:48 - application which locales we support
2127:50 - and in order to
2127:53 - mention sorry in order to explain that
2127:55 - we have to go back to the main dart file
2127:57 - so
2127:57 - let's go to main dart file and have a
2127:59 - look at how we've created our
2128:01 - application and you can see we have this
2128:03 - code right here that at the moment says
2128:05 - run app and then we're creating a
2128:07 - material application
2128:10 - and there are two important properties
2128:12 - in the creation of material app which we
2128:14 - haven't used so far because in the
2128:16 - previous chapters we haven't done any
2128:18 - localization of the application so far
2128:21 - so these two properties are namely
2128:23 - localizations delegate and supported
2128:25 - locales so
2128:27 - let me bring up the caption for this
2128:29 - section um the way flutter localization
2128:33 - communicates with the ios app and
2128:34 - android app or for instance a web
2128:37 - application or desktop whatever you're
2128:39 - running flatter on it needs to tell the
2128:42 - underlying operating system what locales
2128:44 - and it's supporting
2128:47 - so basically that's telling your
2128:48 - material application which languages
2128:51 - your application is built to work with
2128:54 - so that's the locale so you could say
2128:56 - swedish english persian and arabic or
2129:00 - what have you so those are the locales
2129:02 - but you also have the concept of
2129:05 - localization of your widgets
2129:07 - you see at the moment we've created some
2129:09 - strings and and also we're then gonna
2129:12 - soon go and place those strings on our
2129:14 - ui but also flutter itself has
2129:17 - localization support for various
2129:18 - languages there are so many languages
2129:20 - that flutter at the moment supports and
2129:22 - it can internally also localize its own
2129:25 - widgets for instance if you bring up a
2129:27 - date picker for instance in your flutter
2129:30 - application for user to select the date
2129:31 - that day picker itself can have
2129:33 - localization based on the system's
2129:36 - language or your application's language
2129:37 - so if you've chosen arabic career
2129:39 - applications language versus at the os
2129:42 - level
2129:43 - then and if you bring up a date picker
2129:45 - then that date picker is going to be
2129:46 - localized for that language by default
2129:49 - by the flutter team so
2129:51 - you need to tell material app both about
2129:53 - the locales that your application
2129:55 - supports also how it should localize for
2129:59 - instance internal widgets and also your
2130:01 - custom widgets so
2130:03 - what we need to do is to actually go and
2130:05 - add these two properties here
2130:08 - and what we want to do is to refer to
2130:11 - this app localization file so if you go
2130:13 - to dart tools and you can see there's
2130:15 - this app localizations right here
2130:17 - and you can see there is a pop speaking
2130:19 - ammo and and then this is basically a
2130:22 - package so it is a package that was
2130:24 - created for you you haven't done
2130:26 - anything it's just generated for you so
2130:28 - how do we go ahead and import this in
2130:31 - our application and that is by going to
2130:33 - the top of your main file for instance
2130:35 - and say import and then you say package
2130:38 - and then in here we just say flutter
2130:39 - underscore gen
2130:41 - and this is like the generated code for
2130:42 - you and then gen l10n and in there
2130:45 - you'll see that there is
2130:46 - applicabilization's dark files so i need
2130:48 - you to please go ahead and import this
2130:50 - file into your
2130:52 - main dart file
2130:54 - after having done that we need to go to
2130:56 - the material app and right before we do
2130:58 - anything else we're first going to say
2131:01 - supported locales this is a property and
2131:04 - that allows us to tell flutter which
2131:06 - lookouts our application supports
2131:08 - now you may be wondering okay what data
2131:11 - type this is this is actually a list as
2131:13 - you can see it's an iterable of locale
2131:15 - and some people go and incorrectly
2131:16 - create a custom list of accounts and
2131:19 - then put that in here but you don't have
2131:21 - to do that and i actually suggest that
2131:22 - you don't do that even if you can
2131:24 - because if you go inside this
2131:26 - applicalization start file you see that
2131:28 - something down here
2131:30 - it is created for you calls supported
2131:32 - locales
2131:33 - so it is already understanding what
2131:35 - locales your application supports based
2131:37 - on the arb files that you've provided to
2131:39 - um flutter gen so
2131:42 - please don't go and create the same list
2131:45 - in your main dart file in here what
2131:47 - you'll need to do is just to say
2131:48 - applicalizations
2131:51 - and then you just say supported locales
2131:52 - okay so this goes and uses your arb
2131:56 - files as like a guide let's see lib
2131:59 - ltn and ar b fast it just knows that
2132:01 - you're supporting english and swedish at
2132:03 - this point okay
2132:04 - so that's the first thing that we have
2132:05 - to do the other thing that we have to do
2132:07 - in here is just to say
2132:10 - it's called localizations delegates as
2132:12 - you can see it says the delegates for
2132:14 - this apps localizations widget
2132:16 - and this is basically
2132:18 - a way for you to tell flutter that hey i
2132:20 - support for instance swedish and english
2132:22 - please localize your own widgets as well
2132:24 - so in here you don't have to create
2132:25 - custom delegates because those are also
2132:28 - provided inside your applicalizations so
2132:30 - if you go in there you'll see
2132:32 - something in here
2132:35 - localizations delegates all right so
2132:38 - what we need to do now is just to say
2132:39 - applicalizations
2132:43 - localize
2132:44 - app localizations
2132:47 - and then localizations delegates so then
2132:50 - that is provided and i'm going to do a
2132:52 - hot restart just because we've changed
2132:54 - the main function in our application and
2132:56 - those changes aren't going to take
2132:58 - effect until you do a hot restart okay
2133:01 - and what we can do now is to go ahead
2133:03 - and test these changes
2133:05 - and um
2133:07 - what would be really great is actually
2133:09 - if you could extract that little title
2133:10 - that we've written in our intel en arb
2133:14 - and and put it somewhere on some sort of
2133:16 - widget just to see that it is working in
2133:18 - english and in swedish so what i'm going
2133:19 - to do is i'm going to bring scr cpy on
2133:21 - the screen
2133:22 - right here at the moment you can see
2133:24 - we're on the login page so let's go to
2133:26 - the login page and you don't have to do
2133:29 - this so i'm just going to do this myself
2133:32 - just to demonstrate something and while
2133:34 - we're in the login page let's also clean
2133:36 - up these two unused imports okay and
2133:39 - let's go ahead into our code here to the
2133:42 - login and you can see there's a cons
2133:44 - text login but in here we want to use
2133:46 - that title and again you don't have to
2133:49 - do this and i actually suggest you don't
2133:50 - do it it's just for me demonstrating to
2133:52 - you that hey it's working as expected
2133:54 - okay so just follow along and look at
2133:57 - this part without having to do it
2133:58 - yourself so what we need to do in here
2134:00 - let's go and import the same
2134:02 - localization so i'm just going to say
2134:03 - import
2134:04 - package
2134:06 - and then we had flutter lock
2134:09 - what was it called let's go to main dart
2134:11 - file and and exactly copy and paste that
2134:13 - flutter gen okay and i'm gonna bring it
2134:15 - into login view dot dart
2134:17 - i'm gonna paste it there so we also have
2134:19 - access to our localizations and the way
2134:21 - to grab your localizations is with this
2134:24 - code so if i write this for instance
2134:26 - just in here i'm going to remove
2134:27 - actually let cons be there i just want
2134:29 - you to see why we have to remove const
2134:31 - in the future so for us to be able to
2134:33 - grab this string which is my title in
2134:36 - our login view we have to say app
2134:38 - localizations
2134:40 - of
2134:41 - context and then we can say my title and
2134:44 - then we have to explicitly on wrapless
2134:47 - okay so this is how you grab a
2134:50 - localization out of your um supported
2134:52 - localizations basically the stuff that
2134:54 - you placed in your
2134:56 - arv files okay
2134:58 - so now we have my title and in here as
2135:01 - you can see
2135:02 - it says hey a value of type null can't
2135:05 - be assigned so
2135:06 - basically this is an issue with having
2135:09 - constant here because in in the previous
2135:11 - i mean up until this point the way we've
2135:13 - created our app bar was that we said
2135:14 - that is a constant string it's a
2135:16 - constant text that says login but now
2135:19 - that all of a sudden we're saying we're
2135:20 - retrieving this text from our
2135:22 - applicalizations these properties
2135:24 - unfortunately are not
2135:26 - defined as
2135:28 - constants so if you go in here you can
2135:30 - see it's just a string getter and that's
2135:31 - the reason you can't have cons in here
2135:33 - so i'm just going to remove that cons
2135:34 - it's going to be very happy and the
2135:36 - reason we have this exclamation mark in
2135:38 - here is that the app localization is off
2135:40 - function and you can see it returns an
2135:42 - optional application it is a bit
2135:44 - unfortunate i don't really like the
2135:46 - syntax that everywhere we have to go on
2135:48 - applications of context and
2135:50 - a
2135:51 - um
2135:52 - an exclamation mark in here and we're
2135:55 - actually going to fix that soon right
2135:57 - after this demonstration and because
2135:59 - this is
2136:00 - as you'll see soon it is soon gonna get
2136:02 - quite annoying to have to always say
2136:04 - applicalizations of context exclamation
2136:06 - mark dot and then the name of your
2136:08 - property but so hang on we'll fix that
2136:10 - soon so now we have the login in here
2136:13 - and i'm going to do a hot restart
2136:15 - and let's see what we get i'm going to
2136:17 - bring scrcpy and now you can see i see
2136:20 - my title goes here swedish all right
2136:23 - and that's the title that we put in the
2136:25 - intel
2136:26 - um
2136:28 - swedish you see right here okay
2136:31 - so we have that english one let me bring
2136:33 - the swedish one next to the english one
2136:35 - as well like that
2136:37 - so we have the english one and the
2136:38 - swedish one here and you can see at the
2136:40 - moment we're seeing the swedish one and
2136:41 - the way to actually change the language
2136:43 - of your um phone on android is a little
2136:46 - bit different from ios so here i'm just
2136:47 - going to go to
2136:49 - install nina and that's settings and in
2136:52 - here i believe it is somewhere
2136:56 - it's in system i believe
2136:58 - and then spirowak which means language
2137:00 - and then i'm going to go to language and
2137:01 - at the moment spirowak here is swedish
2137:04 - i'm just going to bring english on top
2137:07 - and you can see now english is on top so
2137:09 - let's go back to our application and see
2137:11 - if its title is going to change and now
2137:13 - all of a sudden you see that it's
2137:14 - displaying the english title so it's
2137:17 - working very very well on android i'm
2137:20 - gonna get rid of the scr cpy on the
2137:23 - screen and bring up
2137:25 - a an ios
2137:27 - device which i've created with um
2137:30 - so it's an iphone 12 pro that is sitting
2137:33 - on my desk right here and i have
2137:35 - quicktime which is mirroring that iphone
2137:38 - screen here so let's go ahead and in
2137:41 - here stop the process on android and
2137:43 - then command shift b on macintosh to
2137:45 - select the device or control should be
2137:46 - on windows and linux and say select
2137:48 - device and then i'm going to choose that
2137:50 - iphone 12 pro and i'm going to go to the
2137:53 - main dart file because that's how we
2137:55 - should run the application because if
2137:56 - you try to run the application when
2137:58 - you're on this file it's just going to
2137:59 - give you an error telling you hey i
2138:01 - don't know how to run an arb file so
2138:04 - that's the reason you always have to go
2138:05 - to a dart file
2138:08 - in your application so that visual
2138:10 - studio code at least knows how to run
2138:11 - your application
2138:13 - so
2138:14 - now let's bring up um
2138:17 - our um
2138:19 - quicktime here and let's wait basically
2138:22 - for this running xcode build process to
2138:24 - finish
2138:25 - and as i've mentioned before sometimes
2138:27 - xcode can actually be
2138:29 - much slower than building with gradle so
2138:32 - that is quite annoying um so i'm just
2138:34 - gonna wait here until this process is
2138:37 - done let's see how long it takes
2138:39 - oh it's installing that so i don't
2138:41 - actually have to do anything so
2138:43 - installing and launching it says at the
2138:45 - moment
2138:46 - so let's get ready
2138:48 - let's see how long that takes and i can
2138:50 - see now that it's going to install the
2138:52 - application right here we should see
2138:53 - some sort of progress
2138:55 - on my notes
2139:02 - right there okay
2139:03 - now it is launching the application and
2139:06 - we can see that at the moment the user
2139:07 - and face is english and um so i'm gonna
2139:12 - close this widget
2139:13 - and then bring visual studio code here
2139:15 - as well all right fantastic so um
2139:18 - unfortunately mirroring
2139:20 - an iphone a real iphone on your computer
2139:23 - screen with quicktime isn't going to
2139:25 - allow you to interact with that iphone
2139:27 - at all and scr cpy is very special in
2139:30 - that it connects with adb and at the low
2139:33 - level it allows you to interact with the
2139:34 - screen
2139:35 - however the same thing isn't true when
2139:37 - you're mirroring an iphone screen so
2139:38 - right now i have to go and interact with
2139:41 - this phone by hand so
2139:43 - i'm going to grab this phone
2139:46 - and it is right here i don't know if the
2139:49 - cable is long enough for me to show you
2139:52 - so here is the phone right there
2139:55 - and i'm going to then go to system
2139:58 - settings right here
2139:59 - and i'm then going to go to general
2140:03 - and um
2140:04 - and then let's go to language and region
2140:07 - and in there i'm going to choose swedish
2140:10 - right here and
2140:11 - the the thing that is a bit
2140:13 - disappointing in ios is that the
2140:15 - language that you choose for your system
2140:17 - is for the entire system and when you do
2140:18 - that it's going to kill all the running
2140:21 - applications because ios applications
2140:24 - don't have the possibility to change
2140:25 - their language on the fly that's
2140:27 - something
2140:28 - like android does very very well in that
2140:31 - you can change the language of the
2140:32 - entire system and nothing has to restart
2140:34 - the applications keep running you could
2140:36 - even see when we changed the language
2140:38 - the um like here we couldn't we didn't
2140:42 - basically see the application
2140:43 - terminate or anything so
2140:46 - what we need to do now is to ensure that
2140:49 - we don't change the entire system's
2140:51 - language instead i'm going to show you a
2140:53 - way that you can choose to do in ios
2140:56 - that changes only your applications
2140:58 - language so let's go back in here and
2141:00 - let's go and find our application which
2141:02 - is called my notes i believe somewhere
2141:05 - and let's see if you can find it and
2141:07 - it's right there my notes and now you
2141:09 - can see that there's a menu at the
2141:10 - bottom of the screen that says language
2141:12 - and then i'm going to tap on that and
2141:13 - then i'm going to choose swedish and the
2141:16 - reason that you're seeing these two
2141:17 - options in here because the change we
2141:18 - made in our info p list so if i say main
2141:22 - sorry info p list
2141:23 - we can see that we said english and
2141:25 - swedish in this order and that's why
2141:27 - they are displayed here also in that
2141:29 - order so i'm going to then choose
2141:31 - swedish and as soon as i do this you'll
2141:33 - see up here that our application will
2141:35 - terminate because ios can't handle that
2141:38 - so
2141:39 - and there we go the application's
2141:41 - completely terminated now
2141:42 - but that's okay so i'm gonna go back
2141:44 - here and then open the application on
2141:46 - ios oh now we have to debug it as well
2141:48 - okay because we're in debug mode so
2141:50 - let's go ahead and main dark file and
2141:51 - then run the application again
2141:54 - and you can see it says in ios 14 plus
2141:56 - debug mode flatter apps can only be
2141:58 - launched from flutter tooling ids with
2141:59 - flutter plugins or from xcode
2142:02 - so this is a little bit unfortunate as
2142:04 - well um
2142:06 - because then you have to basically run
2142:08 - your
2142:09 - build
2142:10 - over and over again just while you're
2142:12 - testing and this is another
2142:14 - i would say it's one of the shortcomings
2142:16 - of running applications on ios as well
2142:19 - like there are so many things i feel
2142:20 - like android is ahead of ios
2142:23 - that it's just android is a little bit
2142:24 - more developer friendly i would say
2142:27 - the tooling
2142:28 - the whole operating system is a little
2142:31 - bit more friendly so let's see
2142:33 - um i can see now at the bottom of the
2142:35 - screen it says installing and launching
2142:38 - so let's have a look here now our user
2142:40 - interface should be in swedish
2142:44 - if everything goes well of course
2142:47 - and
2142:48 - if things are going well then on ios we
2142:50 - don't have to do this process over and
2142:52 - over again so it's just just to make
2142:54 - sure that it's working for the first
2142:56 - time as you can see now after changing
2142:58 - our applications into language to
2143:00 - swedish now we can see the swedish title
2143:02 - being displayed on top all right
2143:04 - so i'm going to close the widget
2143:05 - inspector right there
2143:07 - and i'm going to stop this process and
2143:09 - i'm going to get rid of this and now we
2143:12 - should be focusing only then on
2143:14 - deploying on android because it's just
2143:16 - so much easier
2143:18 - so let's go and do a flaster select and
2143:20 - then i'm going to say i'm choosing to
2143:22 - run my application on my android device
2143:25 - then i'm gonna put away my iphone
2143:28 - great
2143:29 - so that is that and and the thing that
2143:32 - we need to talk about now is at the
2143:34 - optionality of this app localizations so
2143:37 - if you go back to our login view you saw
2143:40 - that
2143:40 - applicalizations of context is an
2143:43 - optional value because this function
2143:44 - returns an optional app localizations
2143:47 - and there is a way to make this better
2143:48 - it's one of my favorite ways it's like
2143:50 - the shortest extension that we can write
2143:53 - in our flutter career progress
2143:56 - but it's one of the most powerful as
2143:58 - you'll soon see
2143:59 - in order not to have to repeat this code
2144:02 - what we could do is to create an
2144:04 - extension on build context that grabs
2144:07 - its applicalizations and returns it as a
2144:09 - non-optional value so here we have
2144:12 - applicalizations being returned by
2144:14 - passing the context in but what we are
2144:17 - going to do is to grab the applications
2144:19 - from the context itself all right
2144:23 - so let's have a look at um
2144:25 - how we can actually do that in order in
2144:28 - order to get started let's leave this
2144:30 - code as it is right there we don't have
2144:31 - to do anything special but what we're
2144:33 - going to do is to go as you can see at
2144:35 - the bottom of the screen we have to go
2144:36 - and create a new file under lib
2144:38 - extensions and then we're going to
2144:40 - create a new folder as well called build
2144:42 - context lock dot dart and lock as in
2144:45 - localization in this file we're going to
2144:47 - create our extension on build contacts
2144:49 - that allows us to
2144:51 - return our localizations to the caller
2144:54 - all right
2144:56 - so let's go ahead and do that
2144:58 - i'm going to go to lib in here and then
2145:00 - we have um as the bottom at the bottom
2145:03 - of the screen says extensions we already
2145:04 - have the extensions folder but we only
2145:07 - have list folder in there with a filter
2145:09 - file so in extensions i'm just going to
2145:11 - right click and say new file then let's
2145:14 - go ahead and create build context slash
2145:17 - lock dart okay
2145:19 - and in here what we're going to do is to
2145:21 - say
2145:22 - um import
2145:24 - our flutter
2145:26 - sorry package
2145:28 - after gen as we did in the other places
2145:30 - and then gen l10n applicalization starts
2145:34 - okay
2145:36 - so that's the first import and in here
2145:39 - we don't we only need a few symbols or
2145:42 - actually one symbol which is the
2145:43 - applicalizations but we'll talk about
2145:44 - that soon so let's go ahead and say
2145:47 - extension um and we're gonna say
2145:49 - localization on build context as you'll
2145:52 - see it says i have to also import this
2145:54 - because it is in material so i'm gonna
2145:55 - say go ahead and import it
2145:57 - and i really don't like as if as you
2146:00 - follow along with this course i don't
2146:01 - like to import everything in material
2146:03 - like if i only need build context i only
2146:06 - need build context so i'm not going to
2146:08 - import everything so let's just go ahead
2146:09 - and say show build context
2146:11 - and that only brings build context in
2146:14 - this
2146:15 - context
2146:16 - so
2146:18 - what we need to do in here we're going
2146:19 - to create basically a getter which
2146:21 - returns app localizations
2146:26 - applocalizations we're going to say this
2146:28 - is a getter and it's called lock
2146:30 - and what it does is is returns
2146:32 - applicalizations
2146:34 - of
2146:35 - this
2146:36 - and it puts a
2146:38 - an exclamation mark at the end of it so
2146:41 - and also you'll see that we've imported
2146:42 - applications as a whole but we only need
2146:45 - app localizations from that file so i'm
2146:47 - just gonna say show this okay
2146:50 - so that's that file now it's created and
2146:53 - and while this all is going on i'm gonna
2146:55 - select that and also i'm gonna say run
2146:59 - because it is always good to have the
2147:01 - application running as we're doing hot
2147:03 - restarts and hot reload so we can see
2147:04 - the results on the screen so with this
2147:06 - extension now you're soon gonna be able
2147:08 - to say build context
2147:10 - dot
2147:11 - and then you can get your localizations
2147:14 - so let's go back now to this login view
2147:16 - what we wrote here as you can see is
2147:19 - this syntax at the moment but what you
2147:21 - can replace the syntax with is if we
2147:24 - remove this and we just say context
2147:26 - which is our build context and then you
2147:28 - say dot lock and you'll see here it says
2147:30 - oh i don't know what lock is and that's
2147:32 - correct it doesn't know what lock is
2147:34 - because we haven't imported that
2147:35 - extension
2147:36 - sorry about that i'll just close the
2147:37 - switches inspector
2147:39 - so it doesn't know what that is so i'm
2147:41 - just going to say command dot and it's
2147:43 - going to auto import it for me great and
2147:45 - now we can just say my title
2147:48 - i mean tell me this isn't better this is
2147:50 - for me 100 times better like if you
2147:52 - compare this with what we had before
2147:55 - which was this i mean come on
2147:57 - it's a lot shorter a lot more is the
2147:59 - same and i personally think it is it is
2148:02 - a better code so
2148:05 - let me go back all right so let's leave
2148:07 - this here for now okay just my title
2148:09 - let's leave it there and let's go to our
2148:12 - android application which is scrcpy in
2148:14 - here and we can see that it's displaying
2148:15 - the correct title so if i do a hot
2148:17 - restart as well it's still going to work
2148:19 - and display the string from our
2148:22 - um
2148:24 - from our arb file
2148:27 - now that we've done this
2148:29 - we actually have to talk about
2148:31 - all right how are we going to go about
2148:34 - localizing things
2148:36 - well this is the important part you see
2148:39 - localizing is in a lot of places quite a
2148:42 - boring work in that you have to
2148:44 - literally go for instance if if you're i
2148:46 - mean it is boring if you're doing it the
2148:48 - way we are doing it in this chapter and
2148:50 - that you have to go and collect all
2148:52 - these strings
2148:53 - excuse me and then you have to go and
2148:55 - place them in your arb files and then
2148:57 - you have to also place them in the
2148:59 - swedish arab file and then you have to
2149:00 - do the translation
2149:02 - etc so you have to create keys for all
2149:04 - of these so
2149:05 - this is quite a boring work and it is
2149:08 - not something that we're gonna do in
2149:09 - this chapter because i've already
2149:11 - prepared all those for you so you don't
2149:13 - have to go and write them by your by
2149:15 - yourself so
2149:16 - what i'm going to do here is i'm going
2149:18 - to literally go and bring all those
2149:20 - strings that i've prepared for you
2149:22 - and let me see if i can find them
2149:25 - somewhere
2149:26 - in the en rb
2149:28 - okay i found them right here
2149:30 - and what i'm going to do then is i'm
2149:32 - going to just bring all those strings
2149:35 - and place them
2149:37 - in our intel en
2149:40 - arabi file so here you see at the moment
2149:42 - we have my title and i'm just going to
2149:45 - leave my title in there because we're
2149:47 - using it right now but we're going to
2149:49 - have to delete it soon
2149:51 - and i'm going to paste all these strings
2149:54 - that i've prepared for us okay so there
2149:56 - we go all of those are here now and
2149:59 - there is a github repository for this uh
2150:02 - for this
2150:03 - uh course of course and you can go after
2150:06 - this
2150:06 - chapter is done you can go to that
2150:08 - github repository and retrieve all these
2150:10 - strings so you don't have to type them
2150:11 - by hand either so
2150:13 - it is nothing n nothing at all special
2150:16 - going on about this as you can see we
2150:18 - have just a logout button that says log
2150:20 - out we have versus a cancel button we
2150:23 - have the verify email which is something
2150:26 - that we're using in the verify email
2150:27 - screen for instance we have the register
2150:29 - button we have the restart button let's
2150:31 - see where the restart is used
2150:33 - it is i believe
2150:35 - oh restart i believe it is inside the
2150:38 - verify email screen so if i created for
2150:40 - instance um
2150:42 - if i say pixel to a b gmail foo bar
2150:44 - about and i say
2150:46 - um oh sorry to register screen so let's
2150:49 - say pixelity
2150:51 - gmail.com foo barbaz i'm gonna register
2150:54 - this user and then we're gonna go into
2150:56 - this screen at the moment it says
2150:58 - restart and that's this key restart okay
2151:00 - so i literally gone to through all our
2151:03 - screens all our dialogues as well and
2151:06 - collected all those strings and placed
2151:08 - them here in this
2151:09 - international internationalization enarb
2151:12 - file and i've also done the same thing
2151:14 - for swedish so i'm going to go and bring
2151:16 - those files i'm sorry bring those keys
2151:18 - in here so i've done the translation to
2151:21 - swedish and i'm not my mother tongue
2151:23 - isn't swedish so but i've lived in
2151:25 - sweden for a long time so um i can't
2151:28 - speak swedish a little bit
2151:30 - actually enough i can speak enough and
2151:32 - i'm gonna paste those string in strings
2151:34 - in here as you can see they're
2151:35 - completely in swedish okay so what i've
2151:38 - done is literally we have the english
2151:39 - ones you can see here and we have the
2151:41 - swedish ones so it's the same keys but
2151:44 - different values
2151:45 - and again don't worry i understand if
2151:47 - you're watching this course you're like
2151:48 - oh but how am i going to get all these
2151:50 - just please go to the github repository
2151:52 - and you can extract these values you
2151:54 - don't have to type them by hand
2151:56 - and
2151:57 - you should be good to go
2151:59 - so now we have these in order for our
2152:02 - localizations to be generated in these
2152:04 - dark tool files let's go to
2152:06 - flutter jan and have a look at this gen
2152:08 - 10 l
2152:09 - gen l10n you can see those strings
2152:12 - aren't here at the moment because only
2152:15 - my title should be here somewhere let's
2152:18 - see if you can find it
2152:20 - let's see en
2152:22 - locale should reload my title you see
2152:25 - nothing else is in here but if we
2152:28 - do a hot restart all those strings
2152:30 - should get generated and then we should
2152:32 - have them all here you can see login
2152:34 - verify email all these are provided
2152:36 - right here okay
2152:37 - so
2152:38 - that's that part so now we have all our
2152:40 - strings and we should just be able to do
2152:43 - the coding part which is the fun part so
2152:45 - let's go ahead and take care of that i'm
2152:47 - going to close all these files that are
2152:49 - there at the moment so we have a clean
2152:51 - slate to work with
2152:54 - the first thing that we're going to do
2152:55 - is to localize our um what is it called
2152:59 - cannot share empty note dialogue so
2153:01 - let's go ahead in there and then i'm
2153:03 - going to say command shift p and go to
2153:05 - cannot share empty now dialog
2153:08 - if you remember if you're if the user is
2153:09 - trying to share a dial sharing note that
2153:12 - is its contents is empty
2153:14 - so sharing in this case we have a key
2153:17 - for it so we're just going to say
2153:19 - context.lock
2153:21 - and remember
2153:23 - this lock is an extension that we've
2153:24 - created we don't have access to it
2153:26 - unless we import it so i'm just going to
2153:28 - say command dot in visual studio code
2153:29 - and it's going to also import that file
2153:31 - for me
2153:32 - just right here as you can see
2153:34 - and now we have access to all our
2153:35 - strings okay so in here we're just going
2153:37 - to say sharing
2153:38 - which is a key i've created remember all
2153:41 - these keys are in the arb file
2153:43 - and you cannot share an empty note so
2153:45 - we're going to say context.log
2153:49 - cannot share empty node prompt
2153:51 - which is a key again i've called an okay
2153:53 - we also have
2153:55 - okay
2153:56 - right
2153:58 - okay
2153:59 - so and now we've localized our show
2154:02 - cannot share empty notes dialog
2154:04 - fantastic
2154:07 - so let's go ahead and
2154:09 - localize our delete dialogue so i'm
2154:11 - going to say command shift p visual
2154:12 - studio code on mac or control should be
2154:14 - usually code for windows and linux and
2154:16 - this and let's say delete dialog
2154:19 - in here we have this um
2154:22 - little uh title in here so let's just
2154:25 - say um context dot lock and remember
2154:28 - we're in a new file we don't have access
2154:29 - to log let's auto import it
2154:31 - and in here i'm just gonna say delete
2154:34 - that
2154:35 - and prompt we're going to say context
2154:38 - unlock and delete nodes prompt
2154:41 - cancel context dot log cancel
2154:44 - and here context.lock and was it okay or
2154:47 - it's yes so let's just say yes all right
2154:50 - so that's the localization of this file
2154:52 - as well i'm going to say command command
2154:55 - s or just hot restart the whole thing
2154:57 - maybe it's better and i can see a crcy
2154:59 - crashed unfortunately and that's the
2155:01 - problem i've had with this cr cpy for a
2155:03 - long time that's okay it's an open
2155:05 - source software i'm just gonna say
2155:06 - select device
2155:08 - and this and i'm gonna run the
2155:10 - application so we have it running in the
2155:11 - background
2155:13 - fantastic
2155:15 - so uh that's the delete dialog now i
2155:17 - have to capture at the bottom of the
2155:18 - screen in case we have to go and
2155:20 - localize pretty much everything in our
2155:22 - application up to this point and now the
2155:24 - next step is to localize the error
2155:26 - dialog so let's say error dialog
2155:29 - and in here let's just you can see it
2155:31 - says an error occurred and we've called
2155:34 - a generic error prompt in our arb file
2155:37 - if you look here
2155:38 - generic error progresses and error
2155:41 - occurred okay
2155:42 - so let's go ahead and use that here so
2155:45 - i'm just going to say context.lock
2155:48 - auto import i don't have to explain that
2155:50 - anymore and then we say generic error
2155:52 - prompt
2155:54 - we have an ok as well so context lock
2155:56 - okay
2155:58 - so that's done as well
2156:01 - then we have to go and localize our log
2156:04 - out dialog so let's go to log out dialog
2156:06 - and here log out
2156:09 - dialog
2156:10 - and we're going to do the same thing in
2156:12 - here so let's just go ahead and say that
2156:14 - we're going to use the log out button in
2156:16 - here and you see we have log out in a
2156:19 - few places like if you remember in the
2156:20 - main application interface when you're
2156:23 - logged in with an actual user i'm going
2156:25 - to bring in crcpy so you know what i'm
2156:27 - talking about
2156:29 - if you look at this screen if i say
2156:31 - restart and if i log in with a user and
2156:34 - i say van.mp gmail.com
2156:37 - fubar
2156:38 - as
2156:40 - when you log in with an actual user then
2156:42 - you have this little log out in here and
2156:44 - it says log out and at the same time
2156:46 - when you tap on it then there's this
2156:47 - dialog that says logout so we have a
2156:50 - choice in here either you go and define
2156:52 - two log out strings with different keys
2156:54 - in your arb file or you just define one
2156:57 - and that's exactly what i've done so
2156:59 - we're in here i'm just going to say
2157:01 - context.lock that's how to import
2157:04 - and in here we're just going to say log
2157:06 - out button okay
2157:08 - and it says log out button i understand
2157:11 - it's the title of a dialogue and we're
2157:12 - calling the log out button you may just
2157:14 - go ahead and call this key log out if
2157:16 - you want to i'll just call the log that
2157:18 - logout button remember these are just
2157:20 - keys you can change them easily okay
2157:24 - now that's that's for our title and then
2157:28 - for the content we're going to say
2157:29 - context log
2157:31 - log out and dialog prompt and we have a
2157:34 - cancel button here so let's say let's
2157:36 - just say context log cancel
2157:39 - and again we have another log out button
2157:41 - you can see here so log out here log out
2157:43 - here and then log out in here so there
2157:45 - are three places using the same thing or
2157:48 - same string context
2157:50 - log and then we're going to say log out
2157:52 - button all right
2157:56 - so that's great so that's that part as
2157:58 - well i'm just gonna do command s to hot
2158:00 - reload
2158:03 - the next thing that we have to do at the
2158:04 - bottom of the screen in the case in the
2158:05 - caption we have to go and localize our
2158:08 - password reset dialogue so i'm going to
2158:10 - remove log out dialog here and close the
2158:12 - tab and let's go to password reset
2158:15 - email sends dialog
2158:17 - and in here we have this password reset
2158:20 - and i'm going to go to my notes as well
2158:22 - so let's go in here for the title and
2158:25 - say context
2158:27 - block auto import
2158:29 - and we're going to call it password
2158:31 - reset it's one of the keys i define and
2158:33 - in here we're going to say context lock
2158:35 - password reset dialog prompt okay
2158:38 - and we have an ok button so you now by
2158:40 - this point that we have an ok key as
2158:42 - well in our
2158:44 - in our arb file
2158:46 - so now we've done basically we're done
2158:49 - uh localizing the show password recent
2158:51 - dialogue uh uh show password reset sends
2158:54 - dialogue
2158:57 - okay the next uh dialog is um
2159:00 - forgot password so let's go to
2159:03 - that screen
2159:04 - that sorry this is not a dialogue this
2159:06 - is actually a view so we're going to go
2159:08 - to forgot password view
2159:11 - here i mean when it comes to views our
2159:13 - job is a little bit more difficult
2159:14 - because up until this point we've pretty
2159:16 - much everywhere
2159:18 - used constants like if you look at this
2159:20 - is a constant string here's a constant
2159:22 - text
2159:23 - here is constant so everywhere that
2159:26 - we're going to localize our strings and
2159:28 - we were using const before we have to
2159:31 - remove that cons now because our
2159:33 - localized properties inside arv funds
2159:35 - are unfortunately not defined as const
2159:38 - and i don't really know the reasoning
2159:40 - behind that simply maybe because there
2159:42 - are
2159:43 - getters and maybe getters can't be
2159:45 - constant or there are some
2159:47 - other problems with the generation maybe
2159:51 - that um the flutter team decided that
2159:53 - well these can't be constants but that's
2159:55 - something that's the truth that we have
2159:56 - to live with at the moment so
2159:59 - let's go ahead and find all our strings
2160:01 - and we're going to start localizing them
2160:03 - one at a time before i got password view
2160:06 - so here in this show error dialog and
2160:09 - i've called this key forgot password
2160:11 - view generic error so let's remove this
2160:13 - string and just say
2160:15 - context lock
2160:17 - let's auto import log
2160:19 - and we say forgot password
2160:25 - view generic error and i'm going to put
2160:27 - a comma at the end so it's formatted
2160:29 - nicely so let's go to this forgot
2160:31 - password title itself so i'm gonna
2160:33 - remove the const remember i just
2160:35 - explained that so we're gonna say
2160:36 - context log and we're gonna say forgot
2160:38 - password that's the key i've defined
2160:41 - and you can also see its description
2160:43 - here and you can see it says forgot
2160:45 - password okay
2160:47 - in english this message translates to
2160:49 - forgot password okay
2160:51 - so this thing i've called it forgot
2160:54 - password view prompt so let's remove the
2160:56 - const remove the string itself and we're
2160:59 - going to say
2161:01 - context log forgot password prompt
2161:05 - forgot password view prompt and put a
2161:07 - comma at the end and let's have a look
2161:09 - at the documentation for this as you can
2161:10 - see it says if you forgot your password
2161:12 - simply enter your email and we'll send
2161:13 - you a password recent link okay
2161:15 - so that's one thing and then in your
2161:17 - email address um
2161:19 - it says input decoration your email
2161:21 - address because that's a forgot password
2161:23 - screen let's go here and have a look at
2161:24 - it see how it looks like
2161:26 - here i forgot my password so here's that
2161:29 - little input decoration
2161:31 - so
2161:32 - i can see i've called it email text
2161:34 - field placeholder so let's remove this
2161:37 - const and in here we're going to say
2161:38 - context log email placeholder text field
2161:42 - okay
2161:43 - let's go ahead and have a look at this
2161:45 - one so let's remove the const it says
2161:47 - send me password recent link and i can
2161:50 - see that i've called that
2161:53 - forgot password view send me link so
2161:57 - context log for god password forgot
2162:01 - send me link here and put a comma at the
2162:04 - end so the dart formatter
2162:06 - gets busy with formatting the code and
2162:08 - in here back to login view
2162:11 - i can see that i've called it forgot
2162:13 - password view back to login so
2162:15 - context
2162:17 - here
2162:19 - context lock forgot
2162:21 - back okay so and this is this is a
2162:23 - technique that you can also use like if
2162:25 - you want to get like a property like
2162:26 - this that's quite long name and you want
2162:28 - to get the name immediately right you
2162:30 - could just write a few keywords of that
2162:33 - name for instance i know that for god
2162:35 - and back are quite unique names so if i
2162:37 - say forgot back it it's gonna show me
2162:39 - that so
2162:41 - it has this like partial search kind of
2162:43 - in its intelligence which is very very
2162:45 - useful
2162:47 - the next thing that we have to do is to
2162:49 - go ahead and localize our login view so
2162:51 - i'm going to close the screen forgot
2162:53 - password view and go to login view
2162:55 - login view right here and we're going to
2162:57 - start at the bottom at the top of the
2162:59 - screen and
2163:00 - we'll remove this unused import right
2163:02 - there in login view
2163:04 - and let's go ahead and start by uh
2163:07 - localizing our dialogs so the first one
2163:09 - is cannot find a user with the entered
2163:11 - credentials and i've called it cannot
2163:13 - find user
2163:14 - or login view cannot find user so i'm
2163:16 - just going to say context.log let's auto
2163:18 - import log
2163:22 - or it was already imported okay that's
2163:24 - great and let's just say it is called
2163:27 - login error cannot find user cannot find
2163:30 - user okay
2163:31 - the next one i'm going to put some
2163:33 - commas in here get dark formatter to do
2163:35 - its job correctly and i'm going to press
2163:36 - command s to save the file and that's
2163:38 - going to format the file for me for
2163:40 - wrong credentials i've called it login
2163:42 - error wrong credentials so context log
2163:46 - and wrong credentials
2163:48 - next one is authentication error and we
2163:50 - just call it login error author so
2163:52 - context lock author okay so that's that
2163:56 - one as well now at the top of the login
2163:59 - login view we have this little text that
2164:01 - says please log in your account in order
2164:02 - to interact with and create notes
2164:04 - and this one i can see
2164:07 - i've just called
2164:08 - a login view prompt but i wonder what
2164:11 - happened to our title as you can see we
2164:14 - have this my title now that we're in the
2164:16 - login view it is a good time to actually
2164:18 - go and get rid of that okay so i'm going
2164:20 - to open um
2164:22 - intel
2164:23 - e and arb
2164:25 - and i'm going to kill this basically my
2164:27 - title and i suggest that you also go to
2164:30 - the swedish file which is intel sv and
2164:33 - kill this title as well okay so we've
2164:35 - removed that and i'm gonna get rid of
2164:37 - that then i'm gonna
2164:39 - hot restart so that the code generation
2164:41 - kicks in and as you can see in here my
2164:43 - title isn't valid anymore and in this i
2164:46 - mean this title is called now login if
2164:49 - you can look at the documentation in
2164:50 - here you can see in english it just says
2164:52 - login fantastic
2164:54 - so let's remove this constant here from
2164:56 - the prompt as well and we're just going
2164:59 - to say context lock and let's just say
2165:02 - login prompt so i'm going to do a prompt
2165:04 - okay
2165:06 - so for the enter email um
2165:09 - text field placeholder here enter your
2165:11 - email here we're gonna remove the const
2165:14 - and let's just say context lock
2165:16 - and we're gonna say email placeholder
2165:19 - okay
2165:20 - and we also have an enter your password
2165:22 - here placeholder so let's remove the
2165:24 - cons in here i'm just gonna say context
2165:26 - lock
2165:27 - password
2165:30 - placeholder okay password field password
2165:33 - text field placeholder that's the full
2165:35 - name
2165:36 - and we have this uh login in here so
2165:40 - what we need to do is just to change
2165:42 - this text as well so let's remove the
2165:44 - content here i'm just gonna say context
2165:46 - dot walk
2165:49 - login
2165:50 - and i forgot my password so i'm going to
2165:53 - say context lock and i believe it's
2165:56 - called forgot password
2165:59 - login view forgot password okay
2166:02 - it's not a constant anymore and put a
2166:04 - comma here it's just good practice to
2166:06 - put comma at the end of your parameters
2166:07 - even if it's just one argument that
2166:10 - you're passing to a function i mean my
2166:12 - reason this is a little bit of a side
2166:13 - though but my reasoning is that any time
2166:15 - in the future anybody anybody wants to
2166:17 - add new parameters to this text widget
2166:20 - then they will have to go and put that
2166:22 - comma in there but if you as a
2166:23 - programmer who wrote this code in the
2166:25 - beginning you put the comma in there
2166:27 - you're kind of like acknowledging the
2166:28 - fact that hey i appreciate your time you
2166:30 - may be wanting to add now you may be
2166:33 - wanting to add new parameters to this
2166:34 - and i've already prepared this for you
2166:36 - so if you don't do this if i want to as
2166:39 - a programmer add new parameters in here
2166:41 - i have to go and say oh well okay comma
2166:43 - commandments go here blah blah
2166:45 - but if you'd added that already i'll
2166:46 - just say enter and then write my
2166:48 - parameters
2166:53 - okay great so what we can do now is to
2166:56 - scroll forward here and localize the
2166:59 - rest of these properties and it can't i
2167:01 - can just see here that we have one
2167:02 - property left here which at the moment
2167:04 - says not registered yet registered here
2167:07 - so let's go ahead and remove the const
2167:09 - as we usually do then and say contacts
2167:11 - lock
2167:12 - and i can see it's called not registered
2167:15 - so let's use that and a comma here so we
2167:17 - prepared for the next programmer so to
2167:19 - say
2167:20 - and we could just say now that we have
2167:23 - successfully localized our login view at
2167:25 - the moment so we could just close this
2167:27 - tab
2167:29 - the next step is to localize our
2167:31 - register view so the register view also
2167:34 - has quite a few things that we have to
2167:36 - localize so let's go ahead and go to
2167:38 - register view
2167:40 - and while we're here i mean this is what
2167:42 - i'm again i
2167:44 - when i started this course i wanted you
2167:45 - to become a software engineer even if
2167:47 - you were like
2167:48 - a designer a ux or whatever or project
2167:51 - manager and you have to put yourself and
2167:53 - your yourself in the shoes of a software
2167:55 - developer software developer you're
2167:57 - always in like time constraint usually
2168:00 - our time concern to deliver but at the
2168:02 - same time
2168:03 - when you stumble upon something that is
2168:05 - quickly fixed please do it on
2168:08 - right there uh at that point because if
2168:10 - you leave these things they're gonna
2168:11 - pile up
2168:12 - and many small things that could be
2168:15 - corrected on the fly if you just leave
2168:17 - them they're gonna become a big pile and
2168:19 - then you're not gonna be able to have
2168:21 - enough time to fix them all so while
2168:23 - we're here we have two unused imports
2168:25 - let's just remove them because that's
2168:26 - just good practice not to have unused
2168:28 - imports
2168:30 - now let's go to our register view here
2168:32 - we can see there's quite a lot of errors
2168:33 - there are four errors so the first thing
2168:35 - i'm gonna do is to put commas at the end
2168:37 - of these
2168:39 - right there and i'm going to press
2168:40 - command s on macintosh or control s on
2168:43 - windows linux and that's going to do the
2168:44 - formatting
2168:46 - the first one is called weak password so
2168:48 - let's just say context
2168:50 - lock and also import this
2168:53 - and this message is register error weak
2168:55 - password so weak password
2168:58 - like that
2169:00 - the next one is called context log and
2169:02 - it's called an email already in use okay
2169:07 - fail to register i've called register
2169:10 - error
2169:11 - generic
2169:12 - so context lock
2169:15 - generic
2169:16 - here it's register error generic and
2169:19 - this invalid email is called context
2169:22 - lock and register invalid email okay
2169:26 - so those are our errors we didn't have
2169:27 - to change anything with constant because
2169:29 - these messages weren't constant when
2169:30 - they were passed into this
2169:32 - constructor
2169:34 - then we have to fix this register's
2169:37 - title and it's just called a register so
2169:39 - i'm going to remove the con const
2169:42 - i'm going to say context log register
2169:44 - here
2169:45 - and then we have enter your email and
2169:47 - password to see your notes and i've
2169:49 - called that the register view prompt
2169:52 - so context lock register view prompt
2169:57 - we have this input declaration again
2169:58 - we've done this before with the email
2170:00 - and password so it's nothing surprising
2170:03 - so let's just say context
2170:05 - block email placeholder and this one is
2170:08 - a password placeholder so let's remove
2170:10 - the const
2170:11 - a context lock password
2170:15 - placeholder all right so that's that
2170:18 - then we have the register button that we
2170:21 - also have to
2170:22 - localize and let's remove the constant
2170:25 - here and just say context
2170:27 - lock register
2170:29 - and already registered is called already
2170:31 - registered so let's remove the constant
2170:34 - const as well
2170:35 - and we say context lock already
2170:38 - registered
2170:39 - all right and a comma at the end as well
2170:41 - and we could do the same thing in here
2170:43 - with a comma at the end just to do the
2170:44 - formatting right okay
2170:46 - so this seems to be ready we've now
2170:48 - localized the register view
2170:51 - and the next step is to localize the
2170:53 - verify email view so i'm going to close
2170:55 - this file and let's go ahead to verify
2170:58 - email view
2171:00 - and again we have two unused imports
2171:01 - let's remove those and let's go ahead to
2171:04 - verify email in here and we've just
2171:07 - called it verify email so i'm removing
2171:08 - removing const saying context of lock
2171:12 - and
2171:14 - let's say verify email okay and this is
2171:17 - one thing that i've also fixed and you
2171:18 - could see that in how we've developed
2171:21 - the application so far we have two
2171:23 - texts on top of the verify email view
2171:25 - and they kind of look like this if i
2171:27 - bring it up
2171:28 - let's go to
2171:30 - try to log in with a user who hasn't
2171:31 - verified
2171:33 - his email
2171:36 - and you can see we end up here we've
2171:38 - sent you an email verification please
2171:39 - open it to verify your account
2171:41 - and this is like there are two text
2171:43 - fields but what i've done is i've made
2171:45 - it one text prompt so let's just remove
2171:48 - the second text field and the way i've
2171:51 - created this it's um if we go to our
2171:54 - intel en rb and if you look at the
2171:58 - verify
2171:59 - prompt you can see i've written we've
2172:01 - sent you an email verification please
2172:03 - open on your
2172:04 - open it to verify your account and then
2172:06 - the rest of the string it just follows
2172:08 - along so it's just one paragraph
2172:11 - and so that's why we're removing the
2172:12 - second text in here
2172:15 - so and we're gonna remove this const i'm
2172:17 - gonna remove the text
2172:19 - and
2172:20 - then we're going to say context lock
2172:23 - verify prompt
2172:25 - okay and a comma
2172:28 - we have this a little text button in
2172:30 - here that says send email verification
2172:32 - and this looks like this
2172:35 - let's change that as well and here we're
2172:37 - gonna say context
2172:40 - lock
2172:41 - and it is called verify
2172:44 - send email verification put a comma here
2172:47 - okay
2172:48 - and for the restart button we have a
2172:50 - restart text so we're just going to say
2172:51 - context log restart
2172:54 - and a comma at the end all right
2172:57 - so that's the localization of this
2172:59 - screen as well so we could say we're
2173:01 - pretty much done with the verify email
2173:04 - localization as well
2173:06 - and while we're here to be honest with
2173:08 - you we could also clean up a little bit
2173:09 - here in this verify email while we're
2173:12 - basically cleaning up the view itself
2173:15 - you can see that this text doesn't have
2173:16 - any padding what we could do is to in
2173:19 - this whole column actually
2173:21 - maybe pad this text so we're going to
2173:23 - say this text is padded wrap it with a
2173:26 - padding okay and we could just say
2173:27 - padding of 16. so
2173:29 - you can see now it is a little bit
2173:31 - cleaner it's just a very little uh
2173:33 - effort to make the the ui look a lot
2173:36 - cleaner okay
2173:37 - so we're done with that screen and what
2173:40 - we need to do um we need to actually
2173:42 - localize the create update node view so
2173:44 - let's go ahead to create update note
2173:46 - view
2173:47 - another unused import let's remove that
2173:50 - and let's have a look at what exactly we
2173:53 - have to
2173:54 - localize in here it's probably the the
2173:56 - views title so if we scroll down to
2173:58 - where we're displaying the new note so
2174:00 - if i log in with the user who has
2174:02 - verified his email address
2174:04 - this user
2174:06 - our baz
2174:07 - horrible password please don't use that
2174:09 - password at the moment you can see in
2174:11 - here
2174:12 - we're basically saying um sorry
2174:15 - new note here
2174:17 - we're saying new note and that's this
2174:19 - thing so let's just change that and say
2174:21 - context
2174:23 - dot lock auto import disk oops how to
2174:26 - import this and then we're just going to
2174:28 - say note
2174:30 - okay
2174:31 - and you can see in the documentation it
2174:33 - says it just in the english one says
2174:35 - note so here we're not saying new notes
2174:37 - and the reason behind that is that up
2174:39 - until this point our application is
2174:40 - being say new notes but what happens if
2174:43 - you tap on an existing note
2174:45 - it still says new note so that's the
2174:47 - reason i've decided to basically change
2174:48 - this text just to say note
2174:51 - and put a comma in here to prepare for
2174:52 - the next person as well
2174:54 - and what we're going to do and is also
2174:56 - to change this text decoration and which
2174:58 - is here it says start typing your note
2175:01 - okay so remove the const
2175:04 - and then in here we call it start typing
2175:06 - your note so context log start typing
2175:10 - your note
2175:11 - all right great
2175:12 - so we're going to save that as well
2175:15 - and we're done with that so
2175:17 - now we're going to go to localizing our
2175:20 - notes view and this is i would say this
2175:22 - is like the most exciting localization
2175:24 - part because
2175:25 - we need to do some more coding it's not
2175:28 - as easy so
2175:30 - for just two just to because remember in
2175:33 - the beginning of this chapter i
2175:34 - mentioned that arb files are more than
2175:37 - just normal json in that they can have
2175:39 - logic in them and at the moment if we go
2175:41 - back to our
2175:44 - let's see if i bring scr cpy here at the
2175:46 - moment you can see it just says your
2175:48 - notes
2175:49 - and i wanted to kind of demonstrate how
2175:51 - arb files can be quite dynamic and can
2175:53 - have logic in them and i thought okay
2175:55 - how do i demonstrate that to you and
2175:57 - what i decided to do is
2175:59 - um
2176:00 - that
2176:01 - if you
2176:02 - land in this page and you have no notes
2176:04 - like in this case at the moment it says
2176:06 - your notes but what we're gonna do is to
2176:08 - say okay we have some some key in our
2176:12 - localization file that is called your
2176:14 - notes okay or sorry it's called notes
2176:17 - title
2176:18 - is a key but this key is going to have
2176:20 - some value that has actual logic in it
2176:22 - and this logic has to do with the plural
2176:25 - pluralization of this key if you have no
2176:28 - notes
2176:29 - in english we're going to say no notes
2176:32 - yet
2176:33 - if you have one note it's just gonna say
2176:37 - one note
2176:38 - and if you have
2176:40 - other number of notes such as two three
2176:43 - four then it's going to say
2176:45 - x
2176:46 - notes for instance x being three notes
2176:49 - four notes so it's just gonna say four
2176:51 - notes
2176:52 - so no notes yet one note or x notes
2176:56 - so it has pluralization built into it
2176:59 - and how we have to do that is to use
2177:02 - something in arb called placeholders and
2177:04 - i'll show you how to do that right now
2177:07 - so let's go ahead first into our
2177:11 - intel en
2177:13 - and at the bottom of the screen here
2177:14 - what we're going to do is to first
2177:16 - create our key so that's the most
2177:17 - important one okay so we're going to
2177:18 - call it notes title
2177:20 - and in here we know that we're going to
2177:21 - have some value and let's see we have
2177:23 - also a semi sorry a colon there okay
2177:27 - so we have notes title how do we put our
2177:30 - logic in here
2177:33 - we just know that
2177:34 - we need to have some sort of a
2177:38 - account you see
2177:40 - your localization arb file doesn't know
2177:42 - anything about the count because it's
2177:44 - the application that knows how many
2177:46 - nodes are available in the in the fire
2177:48 - store database so
2177:50 - somehow we need to pass this count to
2177:52 - our application
2177:54 - sorry to our arb file and you do that
2177:56 - with parameterization so you go ahead
2177:59 - and create curly brackets in here and
2178:01 - you would say okay hey i want to have a
2178:03 - parameter called count this count needs
2178:06 - to be passed to this
2178:08 - um
2178:09 - notes title in order for it to be able
2178:12 - to calculate exactly what it has to
2178:13 - return so it's just you
2178:15 - saying that hey application if you want
2178:18 - to get the notes title localized string
2178:20 - you have to pass a parameter to me call
2178:22 - count okay
2178:24 - now what we're going to do is to go and
2178:26 - call and basically and create discount
2178:29 - as a parameter so what you have to do is
2178:31 - to go to the next line and just say adds
2178:33 - notes title this is how you tell arb
2178:36 - that hey
2178:38 - this notes title key has some extra
2178:40 - logic in it okay
2178:43 - then there is a key in here called
2178:45 - placeholders
2178:46 - so you have to write placeholders okay
2178:49 - and in here basically you say
2178:51 - placeholders and then every key is the
2178:55 - name of the parameter itself so account
2178:57 - all right and then you basically start
2179:00 - that and then what you have to do is you
2179:02 - have to define two keys in here one is a
2179:03 - type
2179:04 - and the oops
2179:06 - type and then the other one is an
2179:09 - example
2179:11 - like this so let's have a look at how
2179:14 - this actually looks like
2179:16 - so
2179:16 - basically what we're telling and
2179:19 - arb is that or dart in this case we're
2179:21 - saying that hey this notes title key in
2179:24 - our arab has a parameter called count
2179:27 - and in in here we're saying hey
2179:31 - these are the placeholders the name it's
2179:32 - count and it's type now you have to
2179:34 - define a type you have to actually tell
2179:35 - dart that hey
2179:36 - what data type is this using is it a
2179:38 - string is it's an integer is it a
2179:40 - boolean what is it so in here you just
2179:42 - say it's an integer and then as you'll
2179:44 - see soon the code generation then has a
2179:46 - look at this and says okay i expect you
2179:49 - to send an integer and it's going to
2179:51 - create a function called node's title
2179:53 - with account a parameter of type integer
2179:56 - so this is very important it's the data
2179:58 - type of that count parameter okay
2180:01 - and an example is just for you to know
2180:03 - okay how is this going to be used so an
2180:05 - example is for instance three nodes okay
2180:07 - so we're just going to say here's an
2180:08 - example of how the result of this thing
2180:10 - can look like
2180:12 - right
2180:13 - so what we need to do now is to tell
2180:16 - this um erb and dart code generator here
2180:20 - that this count actually has a logic
2180:23 - about it being plural so it has
2180:25 - pluralization logic and the way to do
2180:27 - that is you put a comma here and you say
2180:29 - plural and a comma after that because
2180:31 - then you have to specify the logic for
2180:33 - that pluralization so
2180:35 - and look
2180:36 - as a side note i completely understand
2180:38 - that this is so weird i mean it is a
2180:41 - strange syntax i don't feel comfortable
2180:43 - with it i sometimes use i sometimes look
2180:46 - at the documentation just to be a
2180:47 - reminder of this
2180:49 - logic but the way i look at it is that
2180:50 - it's the best thing we have let's not
2180:52 - hate on it let's just use it let's
2180:54 - understand that it has power there are
2180:57 - reasons for it being the way it is and
2181:00 - even though we are not 100
2181:02 - like
2181:03 - in
2181:04 - in we weren't involved in the reasoning
2181:06 - of this we don't even know what the
2181:07 - reasoning is but this is what the format
2181:08 - is and this is what we have to basically
2181:10 - go with
2181:12 - so the way to create this is for you to
2181:16 - uh
2181:17 - have your logic in here so we're going
2181:19 - to say equal to zero
2181:22 - and let's just do it like this and then
2181:25 - we're gonna say equal to one and then
2181:27 - we're gonna say other
2181:30 - okay
2181:32 - so this is how you create it so you're
2181:33 - saying that if the value of this count
2181:36 - is zero
2181:37 - then we are going to do something here
2181:40 - if the value of that count is one we're
2181:42 - gonna do something here and if it's
2181:44 - anything else denoted by other we're
2181:46 - gonna do something in here so let's say
2181:49 - when it's equal to zero we're gonna say
2181:50 - no
2181:52 - notes yet okay so that's the string
2181:54 - we're gonna display if the count is zero
2181:57 - if it's equal to one we're just going to
2181:58 - say one note
2182:01 - and then the important thing is if we
2182:03 - end up in this situation if it's other
2182:05 - then we want to say in this case we
2182:07 - actually want to get the count so if you
2182:09 - pass the value of three we want to say
2182:11 - three notes so the way to get that count
2182:14 - is with another curly bracket pair and
2182:16 - you say count and then you say notes
2182:18 - okay
2182:20 - so that's how you create these things so
2182:22 - um and i think we're actually missing a
2182:25 - curly bracket and that is
2182:28 - the the curly bracket at the end yes
2182:31 - this curly bracket which belongs to like
2182:33 - if we
2182:34 - if you look here
2182:37 - if i remove these
2182:40 - the other has two curly brackets
2182:42 - and
2182:43 - it's two curly brackets and here
2182:47 - other one curly bracket there one curly
2182:49 - bracket here one ends here and one ends
2182:52 - here so this last curly bracket here is
2182:55 - for the curly bracket that started here
2182:57 - so again i i don't know what to say this
2183:00 - is the format the way it is we just have
2183:02 - to live with it okay so we've created
2183:04 - the notes title and what we're going to
2183:06 - do is to go ahead and do the same thing
2183:08 - but for swedish and i've already
2183:10 - prepared that so i'm just going to go
2183:12 - ahead and grab that string from the
2183:14 - swedish one that i've
2183:16 - already made so we don't have to type
2183:18 - all that again
2183:20 - so let me go and grab that and bring it
2183:22 - into
2183:23 - l10n
2183:25 - sv which is for swedish and then bring
2183:27 - it at the bottom of the screen
2183:29 - and paste it right there and with a
2183:32 - comma at the end of that line so you can
2183:34 - see plural and it says no notes yet
2183:37 - for one it says one note and for other
2183:40 - it just says
2183:42 - x
2183:43 - notes all right
2183:45 - so i'm gonna save this i'm gonna save
2183:47 - this and i'm gonna do a hot restart
2183:48 - let's just hope that scr cpy doesn't
2183:50 - crash and it didn't
2183:52 - so what we're gonna do now is i was as
2183:55 - it was planned we're gonna go to our
2183:57 - notes view
2183:58 - and i'm gonna go to my notes as well
2184:00 - here let's go to notes view
2184:03 - and have a look at our title in here
2184:05 - and you see we at the moment we're
2184:07 - seeing your notes but what we really
2184:09 - want is to be able to display the number
2184:11 - of notes that are
2184:14 - inside our um
2184:17 - inside the nodes provider so if we have
2184:20 - a look at how we're reading the num and
2184:21 - the notes you can see we're using the
2184:23 - note service and then we're saying all
2184:24 - nodes and this is a stream
2184:27 - of an i triple of cloud nodes so we kind
2184:30 - of wanted stream builder we want a
2184:32 - stream builder to create our title our
2184:34 - app bar and we're going to exactly do
2184:36 - the same thing so we're going to have a
2184:38 - stream builder that creates our app bar
2184:40 - okay
2184:41 - but
2184:42 - or actually it's going to create the
2184:43 - text but how do we get the count of
2184:46 - the notes and the way to do that is with
2184:49 - a little handy extension that i'm going
2184:50 - to show you how to create so
2184:53 - let's go in here in our notes view and
2184:56 - we're going to say extension and we're
2184:58 - going to say count
2185:00 - and we want to create it on a stream so
2185:02 - we're going to say any stream has to be
2185:04 - able to like any stream that has an
2185:06 - iterable in it
2185:08 - that its values are iterable
2185:10 - we want to create a
2185:12 - property called length for instance that
2185:15 - it gets the length so
2185:17 - let's go in here and say okay this
2185:19 - stream has some value but we want that
2185:22 - value to be
2185:23 - iterable
2185:24 - okay so here we're basically saying that
2185:27 - we're extending any stream that contains
2185:30 - uh i troubles as its value is gonna have
2185:33 - this extension
2185:35 - then we're gonna say okay the value of
2185:37 - this is gonna be an hint
2185:38 - and we're going to call it get links
2185:41 - okay
2185:43 - and what this is basically going to do
2185:45 - is to
2185:46 - say it maps the stream's values so let's
2185:49 - say event
2185:51 - and in here we just say it returns the
2185:53 - event's length so i understand this may
2185:55 - be a little bit cryptic for you to
2185:57 - understand but um
2185:59 - you have to know that every stream
2186:02 - is a generic function like if you sorry
2186:04 - it's a generic class you can see it's
2186:06 - abstract class it's it has a parameter
2186:08 - called t which is it's generic type so
2186:12 - what we're saying here we're saying that
2186:13 - okay we're creating an extension on any
2186:15 - stream whose parameters or whose types
2186:18 - are and i treble and iterable has a
2186:21 - length
2186:22 - and that means that we can then extend
2186:24 - and extend any stream that has an i
2186:26 - treble and then we return its property
2186:28 - called get length okay
2186:30 - so what we need to do now is to go ahead
2186:33 - and inside the app bar in here
2186:37 - we have a const text when we need to
2186:39 - remove this const first actually let's
2186:41 - keep it and i'm gonna
2186:44 - see if we can wrap this with a stream
2186:46 - builder now okay so in here what we're
2186:48 - gonna do is we're saying here's a stream
2186:50 - builder and we don't yet know what it is
2186:53 - it's stream is
2186:55 - note service
2186:57 - like this and we have all notes
2187:01 - and the owner user id is our user id
2187:03 - okay as exactly as we have it here
2187:08 - okay but here the stream we don't
2187:10 - actually want the notes we want the
2187:11 - length of notes so let's just say get
2187:13 - length
2187:14 - where is it here get length okay
2187:18 - and now we know that snapshot can then
2187:21 - return that uh value for us so
2187:24 - if i press command s in here let's put a
2187:26 - comma here as well
2187:29 - you can see nothing has changed it just
2187:31 - says your notes because we're still
2187:32 - seeing your notes in here okay but what
2187:34 - we want is to grab the data out of our
2187:36 - snapshot and this snapshot is an async
2187:39 - snapshot
2187:40 - of an integer
2187:42 - let's see undefined class it's called
2187:44 - async snapshots yeah just like that all
2187:47 - right
2187:49 - so you either could tell a stream
2187:50 - builder of int
2187:52 - and then your snapshot i believe
2187:54 - automatically will be
2187:56 - as facing snatch out of it or you could
2187:59 - just say stream builder normal stream
2188:00 - builder and an async snapshot of it so
2188:02 - you could type it in two different ways
2188:04 - and i've just chosen to do it this way
2188:06 - all right
2188:07 - what we need to do in here is to see as
2188:09 - soon as snapshot has data then we grab
2188:12 - that data which means it has the length
2188:14 - built into it okay
2188:17 - so we're going to say if snapshot has
2188:19 - data which means it has length
2188:22 - otherwise we're just going to return
2188:24 - const of text nothing meaning that well
2188:26 - well we don't have anything to display
2188:29 - at the top of the screen if this
2188:30 - snapshot has no text all right
2188:32 - and then in here we're going to say it's
2188:34 - going to say final note count
2188:36 - is snapchat date
2188:39 - okay
2188:40 - or zero because it just says yeah i may
2188:42 - not have data
2188:44 - just strange because you're actually
2188:45 - saying has data but these two properties
2188:47 - are kind of like
2188:48 - they're different from you i mean
2188:50 - they're not different but they're
2188:51 - separated from each other just because
2188:53 - you're checking something has data
2188:54 - doesn't mean necessarily that the next
2188:56 - line should understand that it has data
2188:58 - the data type
2189:00 - of this data property is still final t
2189:03 - so you can't change that okay and that's
2189:04 - why we have this um elvis sign kind of
2189:07 - here
2189:08 - or a question mark question mark just to
2189:10 - say if this doesn't have any value just
2189:12 - use zero okay
2189:13 - now that we have node count we have to
2189:15 - get that context
2189:17 - block
2189:18 - and we oh we don't have log let's import
2189:21 - that
2189:23 - and remember the key that we used intel
2189:26 - me and it's called notes title let's say
2189:28 - notes title and now all of a sudden you
2189:30 - can see it is a function that takes in
2189:33 - an integer hello that's the count
2189:36 - integer that we built into our arb and
2189:38 - it returns a string you can see here
2189:40 - that's perfect because then we can pass
2189:42 - the note count in here
2189:43 - okay
2189:44 - and this will be our text
2189:49 - and then we could just say
2189:51 - return
2189:52 - a text widget with that text in it just
2189:55 - like this
2189:56 - all right
2189:57 - and then we can save this and as you can
2189:59 - see now as soon as i hit command s it
2190:00 - says no notes yet
2190:03 - if i say and if i press the plus button
2190:05 - here you can see i can type something in
2190:07 - here and i go back it says onenote
2190:10 - if i create another one
2190:12 - on top of the screen it says two notes
2190:14 - and that's it pretty much that's the
2190:16 - logic that we built into it so now it
2190:17 - says onenote delete that note and it
2190:19 - says no notes yet perfect so that logic
2190:22 - seems to be working fine for us
2190:24 - so that's that part and we also have
2190:26 - another string at the bottom of this
2190:27 - screen which says log out
2190:30 - and we have to change this as well so
2190:33 - we have to say context
2190:36 - log out button
2190:39 - and this error is because we it says
2190:42 - invalid constant but you're like oh but
2190:44 - this is not a constant well the problem
2190:46 - is a little bit higher up in that when
2190:48 - we created this array of pop-up menu
2190:50 - items we said that is a constant so
2190:52 - let's remove that okay
2190:54 - so that's fantastic and that is i mean
2190:57 - now we're pretty much done
2190:59 - in the entire application we don't have
2191:01 - anything any string that is hard coded
2191:03 - and if you look at our problems
2191:05 - section there are no problems to fix for
2191:07 - instance no unused imports so we've
2191:09 - taken care of those as well and just to
2191:11 - test this what we could do is just to go
2191:13 - to the settings screen here and i'm
2191:14 - going to bring swedish up
2191:16 - and let's go back to our application
2191:18 - here and have a look and it says no
2191:20 - notes yet i'm going to press the plus
2191:22 - button and i'm going to write some
2191:24 - string
2191:24 - go back here it says one note
2191:27 - create a new one and it says two notes
2191:30 - delete this one and all the you see all
2191:33 - the dialogues are now in swedish yes
2191:35 - delete this note
2191:37 - yes let's try to log out now and it says
2191:39 - log look at it
2191:41 - and it says look go to add a second by
2191:43 - the way look at it are you sure you want
2191:44 - to log out yes log out and you can see
2191:46 - all our strings here basically are also
2191:49 - um
2191:50 - everything in this screen is also
2191:52 - localized so that's fantastic
2191:55 - we basically did what we
2191:57 - were supposed to do and what we promised
2191:58 - to do and that is great congratulations
2192:02 - if you then and do what we usually do at
2192:04 - the end of every chapter we
2192:06 - commit our work so i'm gonna have a look
2192:08 - at this and let's have a look at our
2192:10 - good status
2192:11 - and have a look at our git log as well
2192:13 - i'm gonna change the screen layout a
2192:15 - little bit sorry about that so you see
2192:17 - the code better
2192:18 - remove scr cpy make this full screen
2192:22 - okay i'm gonna
2192:24 - make this a lot larger so you see better
2192:28 - and have a look at git log again and you
2192:30 - can see the last one we did git step
2192:32 - sorry step 31 so let's just say git add
2192:38 - all hit commits
2192:40 - that 32
2192:42 - okay
2192:43 - and get status
2192:45 - great and then we're also going to get
2192:46 - push our changes
2192:49 - and let's tag it as well get tagged
2192:53 - step 32
2192:55 - and if you look at our tag
2192:58 - all our tags we can see 20 blah blah
2193:01 - let's see if we have 31 30 31 and 32
2193:03 - great and then we have to push our tags
2193:06 - as well
2193:08 - fantastic so
2193:10 - um
2193:11 - what we've done so far is i mean we've
2193:13 - done a lot of work and in this chapter
2193:15 - even more we've localized our
2193:17 - application we looked at how
2193:18 - localization works how code generation
2193:20 - for localization works and also we had a
2193:22 - look at some
2193:23 - important extensions that you can create
2193:24 - in order to make your localizations even
2193:26 - work better for flutter and we also had
2193:30 - a look at adding some logic to our arb
2193:32 - file with pluralization so
2193:34 - congratulations for going through this
2193:36 - chapter i believe personally that is
2193:37 - very important to localize your
2193:38 - applications you're going to reach a lot
2193:40 - more users if you localize your
2193:42 - applications correctly for your
2193:44 - for like your target markets
2193:47 - and um it should help your users also
2193:49 - feel more connected to your application
2193:51 - so
2193:52 - um with that said i may actually then
2193:55 - see you in the next chapter
2193:58 - hello everyone i can't say welcome to
2194:00 - this chapter now because this is not
2194:02 - really a chapter on its own rather it is
2194:04 - the outro to this course and i don't
2194:07 - know it's a kind of a bittersweet moment
2194:08 - because uh i've had so much fun putting
2194:11 - this course together for you and now i
2194:13 - have to say goodbye and
2194:15 - um
2194:16 - i don't want to get emotional but it is
2194:18 - kind of sad uh as it is a great moment
2194:22 - of
2194:23 - appreciation for you having gone through
2194:25 - this course and also i want to really
2194:27 - extend like
2194:29 - and
2194:30 - congratulate you for having gone through
2194:32 - this course and having learned as
2194:35 - as you've learned because it's it's not
2194:37 - an easy thing to do to go through such a
2194:40 - lengthy course but as i mentioned in the
2194:42 - beginning of this um
2194:44 - course if you remember in the
2194:46 - introduction i mentioned that um
2194:49 - a lot of videos basically jump over
2194:51 - quite a lot of information and i didn't
2194:53 - want to do that in this course and
2194:54 - that's why this course has become
2194:57 - as
2194:58 - lengthy and long as it has
2195:02 - so
2195:03 - we've gone through a lot we've talked
2195:05 - not only about
2195:07 - flutter development but we've also
2195:09 - got our hands dirty with some
2195:11 - native ios and not really development
2195:13 - but all actually going to xcode and
2195:15 - fiddling around with some properties in
2195:17 - info plus an excel project we've also
2195:19 - had to open android studio to create our
2195:22 - virtual devices we've worked with
2195:26 - figma and design tool we work with app
2195:28 - store connect and google play store
2195:31 - console so
2195:33 - we've gone through a lot so and i want
2195:36 - to congratulate you for sticking
2195:38 - throughout all this with me and
2195:41 - um hopefully you've also learned a lot
2195:45 - now while designing this course i also
2195:47 - knew that it has to be a living material
2195:49 - it can't just be something that i drop
2195:51 - out on the internet so i'm very much
2195:53 - planning to keep everything up to date
2195:55 - but there's lots and lots that i've
2195:58 - already planned
2196:00 - more to be added to this course so
2196:02 - i can't really go into details about
2196:04 - what they are i haven't finalized them
2196:06 - but just as i did with this course i
2196:08 - need to plan them correctly write all my
2196:10 - scripts to know what i'm going to talk
2196:12 - about and plan even the code that i need
2196:14 - to write to tell you all about so
2196:17 - just know that there's a lot more to
2196:19 - come
2196:21 - and
2196:22 - you can just subscribe to my youtube
2196:24 - channel if you want to keep up to date
2196:27 - talking about up to date um
2196:29 - things are moving all the time we've
2196:31 - been working with firebase for instance
2196:33 - and firebase in itself is a moving
2196:35 - product so it's an update like ever
2196:38 - it's just always updating so new
2196:41 - versions come out new versions of
2196:42 - flutter might come up come out and new
2196:44 - versions of dart might come out so even
2196:46 - figma for instance that we've been using
2196:48 - a lot the interface might change
2196:49 - erratically so
2196:51 - since i put so much effort into creating
2196:53 - this course i don't want it to die and
2196:56 - i'm not going to let it die so it's
2196:58 - always going to be updating every now
2197:00 - and then i will be putting
2197:02 - and not only updated content out like
2197:04 - maybe i need to replace some old content
2197:06 - with some new but i'm also planning on
2197:08 - adding more to it so
2197:11 - let's just say that this course is gonna
2197:13 - hopefully always be up to date
2197:16 - as i mentioned in the introduction of
2197:18 - this course i have zero dollars
2197:21 - in a budget for
2197:23 - marketing this course and marketing is
2197:25 - probably the wrong word because i don't
2197:28 - actually earn any money by having this
2197:30 - course the only thing i earn is joy of
2197:32 - having
2197:33 - um like people like you going through
2197:35 - this course and telling me on social
2197:37 - media perhaps about oh hey i did this
2197:39 - course and i learned this and this and
2197:41 - this and i've released my first
2197:42 - application so
2197:43 - since i have um no budget for that i
2197:46 - would really appreciate it if you could
2197:47 - spread the word about it and tell like
2197:49 - if someone asked okay i need a course
2197:51 - for learning flutter
2197:53 - uh it would be lovely and i would really
2197:55 - appreciate it if you could just tell
2197:56 - them about this course
2197:59 - and um i've mentioned this also in the
2198:01 - introduction but i would really
2198:02 - appreciate it if you could follow me on
2198:05 - social media twitter at van.np and also
2198:08 - on linkedin because i produce quite a
2198:10 - lot of content
2198:12 - and as infographics for instance also
2198:14 - adds videos related to flutter
2198:16 - javascript python django react native
2198:19 - swift you name it so even typescript now
2198:22 - these days so
2198:24 - uh i would really appreciate it if you
2198:25 - could follow me on social media
2198:28 - and uh i've been told in some places
2198:31 - that um by some some of you that
2198:34 - maybe some people can actually support
2198:36 - me and if you want to do that this is
2198:38 - the way to do it just going to
2198:40 - buy me a
2198:41 - coffee.com but remember it is completely
2198:45 - optional it's only if you can afford it
2198:49 - so with all that said i don't want to
2198:51 - drag on this outro i just want to say
2198:54 - again a huge congratulations to you for
2198:57 - going through this course with me and
2198:59 - spending your life during these so many
2199:02 - hours together with me and i've had a
2199:05 - blast recording all these videos and uh
2199:08 - i'm sure this is not a good buy but
2199:11 - rather an official end basically to this
2199:14 - course and keep an eye out for more
2199:16 - content and i'm sure we'll talk to each
2199:19 - other on social media