00:00 - learn how to create a fully functional
00:02 - Reddit clone with react Firebase nexjs
00:05 - and chakra UI Shadi originally created
00:08 - this as a playlist and he has combined
00:10 - everything into one course for our
00:12 - channel here are a few of the things
00:14 - people have said about the course
00:16 - get ready for what may be the best and
00:19 - most comprehensive Reddit clone course
00:21 - anywhere what is up everyone my name is
00:24 - Shady and today we're going to be
00:25 - building a Reddit clone with nexjs
00:28 - Firebase v9 recoil which is a state
00:30 - management library for react that I love
00:32 - and Shopper UI which is an amazing react
00:35 - UI Library that's going to help us out a
00:37 - lot with our CSS I'm going to do a demo
00:39 - in about 30 seconds of what it is
00:41 - exactly that we're going to be building
00:42 - and I'm super excited about this project
00:43 - because we are going to get to cover so
00:45 - many things in depth and we're going to
00:47 - build a ton of full stack features front
00:49 - to back that are going to really allow
00:51 - us to explore all the technologies that
00:53 - we're using for this build so on the
00:55 - front end with Nexus and react we want
00:56 - to look at things like server-side
00:57 - rendering using the nexjs router for
01:00 - client-side routing building our own
01:01 - custom react hooks using pretty much all
01:03 - of the hooks that react has to offer and
01:05 - overall just front-end architecture with
01:07 - react and then more on the back end with
01:08 - Firebase we're going to get you covered
01:10 - pretty much the entire Firebase v9
01:12 - landscape everything from authentication
01:14 - to the firestore database we're going to
01:16 - look at how to to use real-time data to
01:18 - implement real-time features with the
01:19 - cloud firestore database we're going to
01:21 - look at Cloud functions Firebase storage
01:23 - we're going to store images security
01:25 - rules database transactions and batch
01:27 - rights which if you don't know what that
01:28 - is don't worry I'll explain it when we
01:30 - get to it and overall modeling data with
01:32 - a nosql database which is what cloud
01:34 - firestore is and this entire thing is
01:37 - going to be written in typescript as
01:38 - well which I think is super worth it for
01:40 - you to learn and it's going to make your
01:42 - code a lot more robust as we're going to
01:44 - see so there is lots to learn here my
01:46 - aim with this project was to include
01:47 - enough things and go in depth into
01:49 - enough things for you to actually take
01:51 - all the stuff and apply it into your own
01:52 - project so you can build pretty much
01:53 - whatever you want with react next year
01:55 - as Firebase or whatever all right so
01:57 - here is exactly what we're going to
01:59 - build for those of you that are familiar
02:01 - with redis you can tell that this looks
02:03 - pretty much exactly the same as the real
02:05 - product I spent a lot of time trying to
02:07 - make it look pretty much identical and
02:09 - so pretty much everything from the
02:10 - layout of all of the pages to the drop
02:12 - down menus to the font sizes and
02:15 - everything everything is designed to
02:16 - look and feel exactly like the real
02:19 - product and I'm super excited to show
02:21 - you how to build this so here is the
02:22 - home page as you can see we have this
02:24 - feed that's showing a bunch of posts
02:26 - from a bunch of different communities
02:27 - this user that I have logged in right
02:29 - now for the demo has not joined any
02:31 - communities yet so it's just post from a
02:32 - bunch of random communities and then on
02:34 - the right hand side we have some other
02:36 - UI elements and we have like things of
02:38 - community recommendations so right now
02:40 - it's showing the top communities which
02:42 - are just ranked by a number of members
02:44 - within those communities and this design
02:45 - is completely responsive as well so it
02:48 - works beautifully on mobile so you're
02:50 - going to learn a lot about responsive
02:51 - design and just overall how to build up
02:54 - pretty much any UI you would like in
02:56 - both desktop and mobile I'm just going
02:58 - to log out because I want to log back in
03:00 - in a second so if I wanted to join one
03:03 - of these communities I would of course
03:04 - have to be signed in and this modal is
03:07 - accessible through the navbar as well so
03:10 - let's talk about authentication we're
03:11 - going to cover the entire authentication
03:14 - flow offered by Firebase v9 we're going
03:16 - to learn how to authenticate users with
03:18 - third-party oauth providers like Google
03:20 - and any other ones you might wish like
03:21 - Twitter Facebook GitHub anything you'd
03:23 - like anything that's offered by Firebase
03:25 - and also looking at how to sign in and
03:27 - sign up with email or password or also
03:29 - going to look at password resetting as
03:31 - well so the entire authentication flow
03:33 - is going to be covered for you so you
03:35 - can apply it in your own projects all
03:36 - right cool so I'm just going to sign
03:37 - back in to that user account that I
03:40 - created for myself so now that I'm
03:42 - signed in I can actually join any
03:44 - communities that I may find interesting
03:46 - so I can join as many as I would like
03:48 - and then they would show up actually
03:49 - inside of this little drop down here
03:51 - which represents my communities and I
03:53 - can access them directly from here I
03:54 - want to talk about this Korea Community
03:56 - thing in a little bit and this drop down
03:58 - is the exact same as Reddit has it
04:01 - and then I can also leave communities
04:03 - right from within the side panel if I
04:05 - didn't actually want to join them and
04:06 - then I can actually view the communities
04:07 - directly from here as well so let's go
04:09 - into Tesla Motors and I can view all of
04:12 - the posts inside of this community I can
04:14 - see the number of members in here when
04:16 - it was created and all of this stuff
04:18 - related to the community and I can
04:20 - actually join and leave the community
04:22 - right from inside of here as well which
04:24 - is pretty cool and I'm going to touch on
04:26 - the creation of posts in just a short
04:28 - while
04:30 - all right so looking more closely at the
04:32 - post now I can see the vote status so
04:34 - how many upvotes or downloads this thing
04:36 - has how many comments it has the user
04:38 - who created this post when it was posted
04:40 - what community is posted in I can like
04:42 - this post or upload it I can download it
04:44 - I'm going to upload this one and then we
04:47 - can also view posts in a single page
04:49 - view all right so this post is from Elon
04:51 - Musk and he somehow has found a time
04:54 - between Tesla and SpaceX to pick up
04:56 - baking and he's posted about it here and
04:58 - they look pretty unreal to be honest and
05:01 - then I can scroll down to the comment
05:03 - section and I can see all of the
05:04 - comments on this post who commented on
05:06 - it when it was commented and I can also
05:08 - leave a comment myself so let's leave a
05:10 - comment for Elon because he is clearly
05:12 - really good at baking I'm gonna say hey
05:14 - Elon nice
05:16 - cupcakes
05:18 - smiley face click comment and I can
05:21 - leave a comment their form and I can
05:22 - delete it and do whatever I want with it
05:24 - alright cool let's now talk about the
05:26 - actual creation of posts because that's
05:28 - probably the most critical part of
05:30 - reddit's functionality so let's just go
05:32 - into a random Community we can go into
05:34 - Tesla and we can just go into create
05:37 - post and we can just create a post
05:38 - that's called my first post in all caps
05:41 - and if you will say
05:43 - hey everyone this is my first post with
05:47 - a bunch of exclamation points to show
05:49 - how excited we are and then we can
05:51 - actually post an image along with it as
05:53 - well so let's just select this one here
05:56 - and this has absolutely nothing to do
05:58 - with Tesla but maybe I'm on the Tesla
06:01 - engineering team and I'm working on the
06:03 - latest full self-driving software so
06:05 - then I can go back to the text inputs of
06:07 - the post and I can click post and then
06:09 - it will take me back to the Tesla
06:12 - Community page where I can actually see
06:14 - my post which is pretty cool
06:16 - and I can view it in that same single
06:17 - page view as well and there are no
06:19 - comments yet
06:20 - uh so I'm gonna give myself an upvote
06:22 - because why not and I can actually
06:24 - delete the post as well so let's delete
06:26 - this because it's not really related to
06:28 - Tesla and I'm actually just going to
06:30 - rejoin this community because I did
06:32 - leave before so yeah on Reddit you don't
06:34 - actually have to join a community to
06:36 - post in it so I built ours the exact
06:38 - same way all right cool so let's go talk
06:40 - about how we can actually create our own
06:42 - communities now so if I go to the drop
06:44 - down menu uh we saw this before we can
06:47 - see that our communities are in here but
06:49 - then I said that there was an option to
06:50 - create our own communities so if I click
06:52 - on this this model pops up that will ask
06:54 - us for the name of our community and
06:55 - also the community types of public
06:57 - restricted or private this is the exact
06:59 - same flow as Reddit so let's create a
07:01 - community called chatties
07:04 - community
07:06 - Credit Community it will be created and
07:09 - we are automatically joined into that
07:11 - Community because we created it so that
07:12 - kind of makes sense and we're also added
07:14 - as a moderator of that Community uh so
07:16 - which basically just means we're an
07:18 - admin so now inside of this community I
07:20 - can pretty much do everything the same
07:21 - as I can in other communities and create
07:23 - posts comment on posts Etc and I can
07:27 - also change the image of this community
07:30 - because I am an admin so let's let's
07:32 - test that out let's see what that looks
07:33 - like so click on this Google logo
07:35 - because it has this nice circular shape
07:37 - to it which fits the shape of this so if
07:39 - I click save changes that image is
07:40 - actually going to be uploaded to our
07:43 - cloud firestore storage database and
07:47 - that's going to update our community
07:48 - image which is super cool all right cool
07:51 - so let's actually get into the build now
07:53 - obviously we cannot build every single
07:55 - feature that Reddit has because this
07:57 - tutorial would be insanely long so I
07:58 - want to focus a lot on the core
08:00 - functionality of Reddit if there are any
08:02 - specific features of Reddit that you
08:03 - would like to see please let me know in
08:05 - the comments and I can potentially cover
08:07 - that in a future video as I mentioned
08:08 - before we're going to cover a lot of
08:10 - Concepts there is so much to learn I'm
08:12 - super excited to build this with you and
08:13 - I'm going to be building it completely
08:15 - from scratch so if you have any concerns
08:17 - at any point throughout the video just
08:18 - leave a comment with like the timestamp
08:20 - and I will 100 reply to the comments
08:23 - other than that I think we are good to
08:24 - go I hope you really enjoy this tutorial
08:25 - let's get going all right everybody
08:27 - Welcome to the tutorial we're going to
08:30 - get going with the build now so on the
08:32 - left I just have a terminal open to the
08:34 - folder that I'm going to place our new
08:36 - project in feel free to place it yours
08:38 - wherever you would like and once you
08:40 - have my code open on the left once we
08:41 - create the new project in just a second
08:44 - and during the early stages of this
08:46 - build and especially for this first part
08:48 - our Pace might be a tad bit slower than
08:51 - for most of the projects since we are
08:52 - going to come across a lot of new things
08:54 - for the very first time such as working
08:56 - with chakra recoil and also typescript
08:59 - and I want to make sure that you all
09:01 - have a really strong fundamental
09:02 - understanding of all of these tools so
09:04 - that the entire build makes complete
09:06 - sense and you can get as much out of it
09:08 - as possible so I will spend a bit more
09:11 - time explaining things in more detail
09:12 - the first time around but do know that
09:15 - after getting our first few reps in with
09:17 - each of these things the pace will be
09:18 - quite a bit faster in future Parts okay
09:20 - so what we're going to do is start off
09:22 - by just creating a brand new Next genius
09:24 - application we're going to Google create
09:26 - next app and go to the next shift docs
09:28 - and grab this command here which is the
09:31 - command for creating a brand new texture
09:34 - project with this TS flag
09:36 - so I'm going to paste this in my
09:38 - terminal and I'm also going to add the
09:39 - folder name that I'm going to place this
09:41 - project into and I'm just going to let
09:44 - that install and once it's done I will
09:46 - open it up in vs code
09:48 - it may take a few seconds for you
09:49 - perfect now once that's done what we can
09:51 - do is just CD into that directory and
09:55 - then I'm just going to open it up in vs
09:57 - code
09:57 - and I'm going to spin up the development
09:59 - server so we can see the newly created
10:02 - app that we just made
10:03 - so get this set up on the left
10:06 - and let's now run the development server
10:09 - by just running npm run Dev
10:13 - that's going to spin our app up on
10:15 - localhost 3000 so let's go to that
10:19 - and here is our brand new app I'll open
10:22 - up the console as well I just put it on
10:24 - the bottom so we can see any errors in
10:25 - our console logs that we may add in the
10:27 - future cool so this is a Bare Bones
10:30 - next.js project the files that we're
10:32 - going to be interested in right now are
10:34 - going to be this app.tsx and
10:37 - index.tsx so app.tsx essentially
10:40 - represents our entire application and
10:43 - every page and every component that we
10:45 - create is going to be a child of this
10:47 - component and index.tsx is everything
10:49 - that's being rendered on the screen here
10:51 - it represents our index route or home
10:54 - page and the way client-side routing
10:55 - Works in xjs is that every file added
10:58 - inside of this Pages folder is going to
11:00 - be added to our routes so for example if
11:03 - I have a file named blog.tsx I would be
11:06 - able to go to a route localhost 3000
11:08 - slash blog and we can create nested
11:10 - routes as well with folders and this
11:12 - will make a lot more sense when we start
11:14 - building out some of our Pages all right
11:16 - so we're not going to need any of this
11:17 - so I'm just going to remove this entire
11:20 - div here and I'm going to just add an
11:22 - empty div that says hello and we can see
11:26 - that on the right
11:27 - so now let's go install chakra UI and
11:30 - get it set up with our app so I'm going
11:32 - to go just search for our chakra UI and
11:34 - if I just go to the very first thing
11:36 - chocolatey.com and go to get started
11:39 - they have a bunch of choices for
11:41 - Frameworks that you can use so we're
11:42 - just going to click on next.js because
11:43 - that's what we're using and there are a
11:45 - few packages that we're going to need to
11:47 - install so the chakra and a few
11:48 - dependencies that they have so I'm just
11:50 - going to copy this command here come
11:52 - over to our terminal
11:54 - throw that in there and I'm also going
11:56 - to at the same time install Firebase as
11:59 - well as recoil because these sort of
12:01 - represent our core packages that we're
12:02 - going to be using so let's go ahead and
12:04 - install these it might take a few
12:06 - seconds for you awesome so when that's
12:08 - done what we can do is come over to our
12:10 - app.tsx and we're going to need to wrap
12:13 - our application in what's called a
12:15 - chakra provider if you just scroll down
12:18 - a bit on this installation page you can
12:20 - see that that's exactly what they're
12:21 - doing here so this is pretty much
12:22 - exactly the same thing that we're going
12:24 - to do so we're going to come over here
12:25 - and I'm going to take this component
12:28 - and wrap it in that chakra provider
12:31 - which should just automatically import
12:33 - for me if it does not just import it
12:35 - from Chakra UI react and just paste the
12:38 - component in there and this just ensures
12:39 - that we have access to chakra throughout
12:41 - our entire application all right so one
12:43 - quick note is something that you might
12:45 - notice depending on the time that you
12:47 - watch this is that you might see this
12:49 - error in your console and this is
12:51 - basically just saying that chakra UI has
12:52 - not yet released updates to be
12:54 - completely up to date with react 18
12:56 - react 18 was just released I think a few
12:59 - weeks ago it's super brand new and so
13:01 - depending on when you watch this you may
13:03 - or may not see this I did do some
13:05 - research on this and I found that there
13:06 - is an open issue in the shock or UI
13:08 - GitHub and there's a whole conversation
13:10 - thread in here regarding this but
13:12 - basically one of the core maintainers
13:14 - said that they are working on a solution
13:15 - to react 18 however it will take a few
13:18 - days and this was just posted four days
13:20 - ago so again depending on when you watch
13:22 - this you may or may not see this if you
13:24 - do see it do not worry it can just be
13:26 - ignored it's not a huge deal I just want
13:28 - you briefly mention it in case you were
13:30 - concerned alright so what I'm going to
13:31 - do is just make some brief adjustments
13:33 - to our folder structure here in the root
13:35 - of our project I'm just going to create
13:37 - a folder called source and I'm going to
13:39 - put Pages as well as Styles into that
13:43 - Source folder
13:45 - and this is a common practice to do it's
13:47 - just a preference of mine I prefer to
13:49 - keep everything that we're going to
13:50 - write inside of a folder called Source
13:52 - it just makes sense to me and this is a
13:54 - common practice A lot of people do this
13:56 - and nexjs even has an entire page on
13:58 - their docs explaining how to use a
14:00 - source folder it will break initially
14:03 - but all we need to do is just recompile
14:05 - our development server
14:07 - and next.js knows to look for that
14:09 - Source folder and it will just rebuild
14:11 - itself to work with that folder all
14:14 - right perfect so now we are ready to
14:16 - create our chakra UI theme and pass that
14:18 - to our shortcut provider as a prop and
14:21 - since chakra is going to be handling all
14:23 - of our styling for this build we
14:25 - actually don't even need this Styles
14:27 - folder so we can just completely delete
14:28 - it
14:30 - and our app should function exactly the
14:33 - same we we are not going to have any
14:34 - Styles provided by CSS everything's
14:36 - going to be handled by chakra all right
14:38 - so let's create our chakra theme so I'm
14:40 - just going to go to the chakra UI theme
14:42 - docs if you go to customize theme here
14:45 - we're basically going to do exactly this
14:47 - create a theme which is just represented
14:49 - by a JavaScript object with the help of
14:51 - this extend theme Hook from Chakra UI
14:54 - and we're going to pass it as a prop to
14:57 - our provider and we are going to have
14:59 - access to all of these Styles throughout
15:01 - our app so themes basically contain
15:04 - styles that are going to be present
15:05 - throughout our entire application like
15:07 - brand colors and fonts and also styling
15:09 - for common components like buttons and
15:12 - this just ensures that your app looks
15:13 - nice and consistent from a UI and
15:15 - styling perspective okay so inside of
15:19 - our source folder I'm going to create a
15:21 - new folder called chakra and inside of
15:24 - that folder I'm going to create a file
15:26 - called theme dot typescript now I'm
15:29 - going to come over here and copy this
15:32 - from the chakra docs and I'm also going
15:35 - to add an export
15:36 - to the theme variable here because
15:38 - you're going to need to import it in
15:40 - app.tsx so let's go and do that
15:46 - so import
15:47 - ant theme
15:49 - from Chakra theme and then let's pass
15:52 - that theme
15:54 - to our chakra provider
15:56 - just exactly what they're doing over
15:57 - here
15:58 - okay so let's go to our theme and inside
16:01 - of here I'm going to make our main color
16:03 - the actual Reddit orange and that's
16:05 - going to be represented by brand 100 so
16:08 - every time we want to access the Reddit
16:11 - color throughout our app which is going
16:12 - to be a decent amount we can just access
16:14 - it by using brand.100 and that will make
16:17 - more sense once we start using it it's
16:18 - very very simple though so the actual
16:20 - hex code for the real Reddit orange is
16:25 - ff3c00 so that is the actual hex code
16:29 - for the Reddit brand color all right I'm
16:32 - inside of this theme we're going to also
16:34 - add the font that we're going to be
16:35 - using and our entire body is going to be
16:38 - using the font Open Sands with a
16:41 - fallback of sans serif and what we need
16:43 - to do in order to use open Sans is to
16:45 - actually install it chakra makes that
16:47 - extremely easy if you just search for
16:49 - shocker UI fonts
16:52 - you can go to using fonts and the
16:54 - example in their docs actually uses open
16:57 - sense so that is perfect and they use a
16:59 - package called font source so let's just
17:01 - grab that and go to our app and install
17:05 - it so once that's done all we need to do
17:06 - is import it into our theme file just
17:08 - like they're doing over here so we're
17:10 - going to come over here and we're going
17:12 - to do import at font source
17:15 - and open sand and we should see our app
17:19 - change to that font it might not be
17:20 - noticeable right now and this font is
17:22 - extremely close to the real readathon
17:24 - and we're just going to actually import
17:25 - a few different weights of this font so
17:28 - that we have light regular and heavy so
17:30 - that we can bold things so I'm going to
17:32 - have
17:33 - 300. CSS I think that they have to use
17:35 - the CSS extension yep and we are going
17:39 - to also grab 400 and 700.
17:45 - all right once that is done you'll
17:47 - notice that if you go to reddit.com
17:51 - they have the sort of gray background
17:53 - throughout the entire app it's present
17:55 - everywhere so what we're going to do is
17:57 - add that as well and the way to do that
17:59 - in our app is to change the global
18:01 - styling of our entire body so the way to
18:03 - do that we're going to pass in a key
18:05 - called Styles and inside of here we're
18:07 - going to pass a key called global
18:10 - and we're going to give this a callback
18:11 - function which is going to contain the
18:15 - key body which is going to have BG for
18:17 - background and we're going to say gray
18:21 - 200 perfect and if you're wondering what
18:23 - this gray.200 thing is if you just go to
18:26 - shocker UI
18:27 - theme
18:29 - inside of the default theme you can see
18:30 - all of the colors that they have
18:32 - available there are so many of them
18:34 - there's a lot of really nice colors in
18:35 - here and uh yeah this this library is
18:38 - honestly amazing you're going to see as
18:40 - we get more and more into the build why
18:42 - I love chakra so much and why I probably
18:44 - never use anything else and it makes it
18:46 - styling and making things look really
18:47 - good super easy all right so one last
18:49 - thing that we're going to just add in
18:51 - here that we're going to come back to in
18:52 - a bit is this key called components and
18:55 - a component is basically any UI
18:57 - component offered by chakra so for
18:59 - example buttons and inputs and Etc
19:01 - everything that's in here you can add
19:03 - Global styling tubes but it appears very
19:05 - consistent throughout your app so for
19:07 - example a button we can add styles for
19:10 - the button that single time and just
19:11 - reuse them throughout our app and we can
19:13 - even create variants and stuff for our
19:15 - buttons and we're going to see this when
19:16 - we create our nav bar buttons here you
19:18 - can see that there's an outline variant
19:20 - and a filled variant we're going to
19:22 - create those in a bit but how that would
19:24 - look would you be basically just pass in
19:25 - the button component and I will come
19:27 - back to this very shortly when we get to
19:28 - the buttons in the nav bar I think we
19:31 - can now start actually working on the
19:33 - layout of the page so we're going to do
19:35 - is create a nexjs layout
19:39 - and if you go to the layout Docs
19:42 - basically we're going to create the
19:43 - exact same thing as this and this
19:45 - represents the literal layout of our
19:47 - entire app and we can put components in
19:49 - here that we want present on every
19:51 - single page like the navbar without this
19:53 - layout component we would have to add
19:55 - the nav bar to every single one of our
19:57 - Pages that's just how nexjs works and we
19:59 - are going to wrap our entire application
20:01 - in this layout component and that is
20:03 - where the children prop is going to come
20:04 - from all right so I just took a little
20:06 - break and I also briefly added a remote
20:08 - GitHub repository to my projects so that
20:11 - I can put it in the description for you
20:13 - guys so if you do need to reference the
20:14 - code at all it is available on GitHub
20:16 - link is in the description all right so
20:18 - now let's actually build this layer
20:20 - component and get into building the nav
20:22 - bar and actually get into the fun UI
20:24 - stuff so I'm going to create a folder
20:27 - inside of source called components and
20:29 - this is where all of our react
20:30 - components are going to go and inside of
20:32 - components I'm going to create a folder
20:34 - called the layout because we're going to
20:35 - have several different layout components
20:38 - that we created throughout our project
20:40 - now and then inside of layout I'm going
20:42 - to create a file called layout.dsx
20:46 - and before we actually create a command
20:49 - I just briefly want to mention this
20:51 - react typescript snippet vs code
20:54 - extension I highly recommend you to
20:56 - download this it's going to be really
20:58 - useful I'm going to use it a lot and
20:59 - basically we can use little keyboards
21:01 - shortcuts to create skeleton typescript
21:04 - react components and it just makes
21:07 - developing a lot faster so you don't
21:09 - have to write all of this out from
21:10 - scratch and we get all the typescript
21:11 - stuff here just hand it to us out of the
21:14 - box so when we work in typescript with
21:16 - react we create types for each component
21:19 - and these types specify what prompts
21:21 - need to be passed to this component and
21:23 - this ensures that we're passing
21:24 - everything that this component needs to
21:26 - prevent bugs and crashes and this is
21:28 - something that JavaScript does not do so
21:30 - typescript basically just points out
21:32 - these errors to us before we even
21:33 - compile the app to make sure that
21:35 - everything works smoothly and react FC
21:37 - is just the type of a functional
21:39 - component and this just indicates that
21:41 - that is what we are returning out of
21:42 - this function and if this looks foreign
21:44 - to you because your new typescript you
21:46 - do not worry we're going to use this a
21:48 - Time throughout this build and you're
21:49 - going to know it like second major once
21:52 - we're done but yeah highly recommend
21:53 - this extension if you do not have it
21:55 - okay so we're not actually going to need
21:58 - props inside of our layout we're not
22:01 - going to take anything so when we don't
22:02 - need props we can just get rid of it
22:03 - like that and this just basically
22:04 - indicates that we're returning a react
22:07 - functional component that's what we're
22:09 - returning out of this layout function
22:10 - and we're going to do this a lot so we
22:13 - can get rid of this div and instead
22:15 - we're going to return just a react
22:17 - fragment it's going to be very similar
22:18 - to what you see on the right and we're
22:21 - going to take in our children argument
22:24 - which basically represents our entire
22:26 - application in this case and we're going
22:28 - to have a navbar component which we're
22:30 - going to create in just a second and
22:32 - then we're going to put our children
22:33 - inside of our main tag and we're not
22:38 - going to have a footer for this
22:39 - application if you want to create one
22:40 - feel free to do that okay so now let's
22:43 - create a another folder inside of our
22:46 - component folder called navbar because
22:49 - we're going to have a bunch of
22:50 - components inside of our navbar it's
22:52 - going to have a ton of children and
22:53 - inside of navbar let's create our room
22:55 - navbar file I'm going to call it navbar
22:59 - dot TSX now in react it is common
23:02 - practice to name the root file of a
23:05 - folder just index.tsx for this project
23:09 - I'm not going to do that just because it
23:10 - would kind of get confusing if you're
23:12 - looking at my tabs you would just see a
23:13 - bunch of files named index index index
23:15 - index and just to avoid that I'm just
23:18 - going to name the root files the name of
23:21 - their folder I just want to make a quick
23:23 - note on that not a huge deal or anything
23:25 - okay so what I'm going to do is use that
23:27 - snippet again to create our skeleton
23:29 - component and I'm going to remove the
23:32 - props type because we're not going to
23:33 - take in any props to our navbar and I'm
23:37 - going to change this text briefly to
23:39 - just app bar and now that we actually
23:41 - have a navbar defined let's go back to
23:44 - our layout component and just quickly
23:45 - re-enable this and a quick keyboard
23:48 - shortcut if you have a component in your
23:50 - file that has not yet been imported you
23:52 - can go to this thing and press command
23:54 - period and this will pop up a little
23:56 - menu and you can automatically import it
23:58 - on Windows I think it would be control
24:00 - period cool so now if we go to our
24:02 - application file
24:04 - and we import that
24:08 - their component and we wrap
24:12 - our application in that component we
24:16 - should then see that navbar actually
24:18 - being displayed there which is pretty
24:20 - cool so we are completely done with this
24:22 - layer file we can just close it we are
24:24 - not going to touch it again for the rest
24:26 - of this build so we can actually start
24:28 - building out navbar now and this is
24:29 - where we're going to get into the
24:31 - nitty-gritty of chakra UI all right so
24:33 - we can get rid of this div here and
24:34 - we're actually going to build a
24:35 - meaningful navbar and we're going to use
24:38 - this UI component called Flex from
24:40 - Chakra now what Flex is is it's
24:42 - essentially just a div with CSS flexbox
24:45 - already applied to it out of the box and
24:48 - we're going to use this a lot throughout
24:49 - our application so it's super handy and
24:52 - um chakra UI saves us a lot of time
24:54 - writing out flexbox Styles over and over
24:57 - again so let's say I wrote the text in
24:59 - that bar in here you'll see that it
25:00 - appears exactly the same as when it was
25:02 - just a regular div however now the div
25:04 - has CSS Flex blocks applied to it which
25:07 - we're going to need once we start adding
25:09 - more components so now let's talk about
25:11 - styling shock our UI component so the
25:14 - way to do that is we can pass any CSS
25:16 - argument as a prop to any of our chakra
25:19 - UI components so for example let's say I
25:21 - wanted to add a background color of
25:23 - white to our nav bar I can simply do
25:25 - that by just typing BG so let's say I do
25:28 - VG is equal to White and I want to add a
25:30 - border of one pixel solid red
25:33 - that's how easy it is to style things
25:35 - all right cool so now that we actually
25:36 - know how to apply styles to our shortcut
25:39 - UI components let's move forward so I'm
25:42 - going to give this nav bar a height of
25:44 - 44 pixels and a and padding six pixels
25:48 - in 12 pixels if you have not seen this
25:49 - notation for padding before this when
25:52 - you give it two arguments this basically
25:53 - means top bottom right left
25:56 - and what I'm going to do now is create
25:59 - the component for the logos and our
26:02 - logos are going to be
26:05 - um in the top left cool okay so I'm
26:07 - going to actually create these logos now
26:09 - and it's going to consist of two images
26:11 - the reason there is two is because I
26:14 - could not find a single SVG file online
26:16 - that had both this Reddit text and this
26:19 - icon in a single file I was able to find
26:21 - both of them separately though and the
26:22 - way to use external assets and image
26:24 - assets like that is in our public folder
26:26 - we can create a another folder called
26:28 - images and it does actually need to be
26:31 - inside of the public folder that is
26:34 - required by next.js what I'm going to do
26:36 - is I'm going to paste in a bunch of
26:39 - image files and pngs and svgs that we're
26:41 - going to use throughout this build
26:42 - there's only about six of them and I'm
26:44 - just going to paste them in here for you
26:46 - I would recommend just go to the link on
26:48 - GitHub and grab these assets so you
26:49 - don't have to go online and find them
26:51 - and these are just SVG icons that I
26:53 - found online and they all work very well
26:55 - what that's going to look like the way
26:56 - we're going to use these is we're going
26:58 - to have two images and these are chakra
27:00 - UI images not next images
27:02 - and the first one is going to be we're
27:05 - going to go into that images folder I
27:07 - just created and I call this thing
27:09 - Reddit face dot SVG let's go back to our
27:12 - app so that showed up there and the
27:14 - second one is going to be
27:17 - images
27:18 - Reddit text.svg
27:21 - perfect and let's give these let's give
27:24 - this one a height of 30 pixels
27:28 - and this one a height of 46 pixels now
27:33 - you can see that they are a little bit
27:34 - misaligned there and that is where
27:36 - flexbox is going to start to come in
27:38 - handy so if I go to this logo container
27:41 - and uh I give it the Align
27:43 - prop which is short for Align items and
27:46 - I do Center it will Center those items
27:48 - for me cool and we're actually going to
27:50 - add a media query to this second image
27:54 - text or the logo text because you'll see
27:56 - on the real Reddit when we get to a
27:58 - certain screen size like on mobile that
28:00 - Reddit text is not actually visible it's
28:01 - not until we get to the medium screen
28:03 - size is that it's actually visible so
28:05 - I'm going to show you how to write a
28:06 - media query in Chakra so we're pretty
28:08 - much covering all these chakra
28:09 - fundamentals so that everything makes
28:11 - sense throughout the entire app so once
28:13 - we cover this stuff once it'll just go a
28:15 - lot quicker when we get to it again so
28:16 - basically we're going to add a media
28:18 - query to the display CSS property and
28:21 - the way media queries work in Chakra is
28:23 - we apply them to single CSS properties
28:26 - rather than writing a single media query
28:28 - with a bunch of CSS properties like you
28:30 - would in raw CSS we're going to do it
28:32 - property by property and that may sound
28:35 - a little bit like it's more work at
28:36 - first but it's actually not and it's
28:38 - actually really clean and easy we're not
28:39 - going to write that many media queries
28:40 - it's actually quite simple so for our
28:43 - display for our text we're going to make
28:47 - base to be none and base represents
28:50 - Mobile screen sizes because chakra is a
28:52 - mobile first UI Library so mobile
28:54 - screens we do not want this thing to be
28:56 - displayed and then at medium sized
28:58 - screens and up we're going to make it
29:00 - unset and unset is basically just the
29:02 - opposite of display none at Mobile
29:05 - screen sizes it is not visible and once
29:07 - we get to medium it is then visible
29:10 - because we apply it unset and we're
29:11 - going to write a quite a few mini
29:13 - particularly for the navbar it is pretty
29:16 - responsive as you'll see there's a lot
29:18 - going on here in terms of responsiveness
29:19 - so the nav bar is going to have quite a
29:21 - bit of media phrase so we're doing it
29:22 - really good at this cool so I'm going to
29:24 - add the other components that we're
29:26 - going to create in just a second I'm
29:28 - going to comment them out but we're
29:29 - basically going to have the directory
29:32 - which is a drop down menu item a search
29:34 - input and write content cool and write
29:39 - content is basically represented by if I
29:42 - log in quickly it's going to contain
29:44 - those authentication buttons that we are
29:45 - looking at but it's also going to
29:46 - contain all of these icons and stuff and
29:48 - this drop down menu
29:50 - there's a lot going on on the right hand
29:52 - side on the nav bar so I wanted to give
29:54 - it its own parent component hence the
29:57 - write content component all right so now
29:59 - let's start working on our search input
30:01 - so I'm going to go to our app and I'm
30:04 - going to inside of the navbar folder I'm
30:07 - going to create another component called
30:09 - search input
30:12 - dot TSX and I'm going to use our snippet
30:14 - once again and we are eventually going
30:16 - to take in a user here as a prop once we
30:19 - get to authentication I'm going to leave
30:21 - this empty for now all right so let's
30:23 - start developing this component so I'm
30:24 - going to get rid of this div I'm going
30:26 - to instead use our
30:29 - famous Flex component and we're going to
30:31 - use this so many times all right so I'm
30:34 - going to leave The Styling for this
30:36 - blank right now we're going to come back
30:37 - and add some stuff later once we have
30:39 - some more of this input built and the
30:43 - first component we're going to add in
30:44 - here is called an input group so if you
30:47 - want to go to the chakra UI input Docs
30:51 - foreign
30:53 - we're basically going to have a
30:55 - something similar to this here we're
30:57 - going to have an input with an icon and
30:59 - chakra makes that super easy they have I
31:02 - believe what's called at elements inside
31:04 - the input so this is exactly what we're
31:06 - going to do so I'm just going to copy
31:09 - this input group here and I'm going to
31:12 - paste it over here and again I'm going
31:15 - to use that Auto Import thing that I
31:16 - used before command period And this is
31:18 - this is amazing watch this so I before I
31:20 - showed you how to do it with a single
31:22 - component but now look I can do it with
31:24 - add all missing Imports
31:27 - and that is just unreal so you'll notice
31:29 - that these did not import and you may be
31:32 - wondering why and that is because they
31:35 - are coming from a different library that
31:38 - we're going to have to install which is
31:40 - chakra UI icons so what we're going to
31:43 - do is it's going to go to the browser
31:45 - and I'm going to search chakra UI icons
31:50 - I'm going to go into here
31:53 - and I'm literally just going to copy the
31:55 - installation command and paste it
32:00 - in our project and install that there
32:02 - cool so now that we have that installed
32:04 - I can back go back and try that Auto
32:06 - Import thing and it should pick it up
32:08 - now because we have installed the
32:10 - library okay and we
32:12 - we do not need this second input group
32:16 - sorry I did not mean to copy the second
32:17 - one we will get rid of that and when we
32:20 - save that I have Auto formatting on
32:21 - that's why everything moves when I see
32:23 - the file if you do not I recommend you
32:26 - to install prettier and turn on Save on
32:29 - format
32:30 - um you can do that by going into your vs
32:31 - code settings just do a quick Google
32:33 - search on how to do that it's it's
32:34 - pretty simple and it's very very handy
32:36 - cool so uh we actually will not be in
32:39 - this app file for a little bit so I'm
32:41 - just going to close that and now that we
32:42 - have a search input defined I'm going to
32:44 - come back here and re-enable this
32:47 - I'm just going to comment that out I'm
32:49 - gonna go up here I'm gonna
32:51 - comment those out and I'm going to
32:53 - import it
32:54 - from search input I'm going to save this
32:58 - and for some reason we are not seeing
33:01 - anything
33:02 - you need to refresh oh there we go okay
33:04 - so we can see that something is there
33:05 - but it looks kind of not great it does
33:08 - not look anything like the Reddit thing
33:10 - so let's do some work on that all right
33:13 - first off the icon is completely wrong
33:16 - um so let's make it the proper icon
33:18 - we're going to make it the
33:20 - search icon
33:22 - from Chakra UI
33:24 - icons and another keyword shortcut
33:27 - that's really really cool is if you do
33:29 - command shift p it'll open up the
33:32 - command line in vs code and we have a
33:34 - bunch of settings that we can count
33:35 - these code to do and you can search for
33:37 - organized Imports mine's at the top
33:39 - because I used it recently but if you
33:41 - just search for organizing ports and you
33:42 - press enter it's going to automatically
33:44 - get rid of all of the unused Imports and
33:46 - sort them alphabetically I like to have
33:48 - react at the top so now we have the
33:49 - search icon there and phone number is
33:51 - definitely not what we want to put in
33:52 - there I believe on Reddit it says
33:54 - search Reddit
33:56 - and now we're going to add a bunch of
33:59 - styles to our input and change the color
34:02 - and we're going to make it look
34:03 - identical to Reddit so let's go over
34:06 - here we don't want the type equals
34:08 - telephone here so let's add
34:11 - a font size of
34:13 - 10 points and let's change the color of
34:16 - the placeholder and the way to access
34:17 - pseudo classes in Chakra is to do it
34:20 - with a underscore because placeholder
34:23 - we're accessing The Styling of it it's
34:25 - actually a pseudo class if you were to
34:27 - write it in regular CSS so to do that
34:29 - read it so we do need to include the
34:31 - underscore so we're going to give the
34:33 - placeholder text a color of gray 500 and
34:36 - we're going to add the hover pseudo
34:38 - class
34:39 - and we're going to make it uncover we're
34:41 - going to make the background white we're
34:42 - going to make the Border
34:44 - one pixel solid and we're going to make
34:47 - the Border color
34:50 - blue 500. cool so now you can see uh
34:54 - it's looking a bit more like Reddit
34:56 - whereas Reddit and the length of it and
34:58 - everything is going to be handled in a
35:00 - bit now let's do another pseudo class
35:03 - called Focus
35:06 - and we're going to make the outline
35:09 - none the order again one pixel solid and
35:14 - the Border color not work labs border
35:17 - color not border collapse for the second
35:19 - time
35:20 - watercolor blue 500 and we're going to
35:24 - give it a height of
35:26 - 34
35:27 - 34 pixels
35:29 - and a background of gray 50. cool I'm
35:35 - going to make this a bit darker
35:37 - to match more of the color of the text
35:39 - all right now let's go back up to our
35:41 - parent Flex container and we're going to
35:42 - add some properties here now we're going
35:44 - to say Flex grow is equal to one and
35:46 - that means it's just going to basically
35:47 - take up the remaining width of its
35:50 - parent container and a lot of these
35:52 - Styles will make a lot more sense once
35:53 - we actually have all of the navbar
35:55 - components in place but essentially
35:57 - flexgro means uh basically just take up
35:59 - the remaining room available we're gonna
36:01 - add another property margin right and in
36:03 - Chakra UI you can just say hamr I'm
36:05 - going to say two and that is just I
36:07 - think pixels that are going to say a
36:08 - line is going to be equal to Center cool
36:11 - so now you can see that we actually have
36:12 - an average and the styles are exactly
36:14 - the same as Reddit this icon you can see
36:16 - is a little bit misaligned and when I
36:18 - was doing the build I wasn't able to use
36:20 - flexbox on the input it was being kind
36:22 - of weird so I'm going to do is just add
36:24 - a bottom margin of one
36:27 - and that should make it look a bit more
36:29 - centered that's pretty much it for the
36:31 - search input for right now we're going
36:33 - to come back to this in a bit once we
36:35 - have the user because some of the
36:36 - styling is going to change but um yeah
36:38 - pretty simple component all right you
36:40 - guys you're now going to start working
36:41 - on the right content of the navbar and
36:45 - write content is basically the parent of
36:48 - everything going on over here we have
36:50 - the authentication buttons and this drop
36:52 - down menu and then all of those icons
36:54 - that we saw when we were logged in that
36:56 - is going to be a child of right content
37:00 - all right I just wanted to mention that
37:02 - When developing this application I tried
37:04 - my very best to keep the components as
37:06 - clean and as modular as possible and I
37:08 - avoided writing extremely long
37:10 - components because it can be really easy
37:11 - to do that in react and I wanted to get
37:13 - as close to a production react
37:15 - application as possible to show you guys
37:17 - how to write really clean and extendable
37:20 - react applications so you kind of see
37:22 - how it is done in the industry and
37:24 - hopefully this will help you out with
37:25 - your job search if your goal is to land
37:27 - a developer job all right so inside of
37:29 - our navbar folder I'm going to create a
37:31 - folder called Write content inside of
37:34 - right content I'm going to create the
37:36 - root write content file write content
37:39 - dot CSX I'm going to use our snippet and
37:42 - we are going to take in a user in this
37:44 - component as well like the search bar
37:46 - but we don't have a user yet so I'm just
37:48 - going to comment that out and we will
37:49 - come back to that in a bit and we're
37:51 - going to return a react fragment and
37:54 - this react fragment is going to have a
37:56 - component called authmodal which we're
37:58 - going to create shortly that is going to
38:00 - be the modal that pops up when you click
38:02 - one of these buttons that's what that's
38:04 - going to be
38:05 - um but we're going to get to that
38:06 - shortly and I'm going to create a flex
38:08 - component here and inside of flex we're
38:11 - going to have a component called auth
38:13 - buttons which we want to create right
38:15 - now and just before we do that I'm going
38:17 - to give this the properties of justify
38:20 - to be Center justify is short for
38:23 - justify content I'm going to give a line
38:26 - to the center align items to be centered
38:29 - so this is basically how we Center a div
38:30 - this is the CSS equivalent of display
38:33 - Flex justify content is equal to Center
38:35 - and align items is equal to Center for
38:38 - those of you who might be wondering so
38:39 - let's go create the auth buttons
38:41 - component and the auth buttons are going
38:44 - to be the login and sign up buttons that
38:46 - we see over here on reddit.com
38:49 - so let's go into write content and
38:51 - create a
38:52 - file called off buttons dot TSX
38:57 - again with the snippet and we're not
39:00 - going to take any props into these
39:02 - component so I can just get rid of this
39:05 - and we're going to again return a react
39:08 - fragment and we're actually going to
39:09 - start using
39:11 - button component from Chakra UI so I'm
39:14 - going to add a button called login
39:18 - and another one with the text sign DOT
39:21 - sign in sorry sine thousand cool and
39:24 - let's go back to our right content
39:27 - and enable this and do our Auto Import
39:31 - all right so that's not
39:34 - oh it's because we're not actually even
39:36 - rendering this right now so let's go
39:38 - let's go back to navbar and re-enable
39:40 - this we're going to put directory up
39:42 - here to comment this out and let's put
39:44 - our import right content okay so you can
39:48 - see those buttons popped up on the right
39:49 - however they look absolutely nothing
39:51 - like the Reddit buttons so we have some
39:53 - work to do all right so since buttons
39:55 - are going to appear in our application
39:57 - several times and we want to apply
39:58 - consistent styling to them we're going
40:00 - to go back to our chakra theme and just
40:02 - quickly create the global styling for
40:05 - our buttons so that we don't have to
40:06 - repeat a bunch of component styling
40:08 - every single time we create a button so
40:11 - inside of our chakra folder I'm going to
40:13 - create another file called button.ts
40:15 - This is how you would style your
40:18 - components globally so that you have
40:20 - consistent styling for all of your
40:21 - components all right so let's see how we
40:23 - can create Global component styling for
40:25 - our button so I'm going to import
40:27 - something from
40:30 - from at Chakra UI
40:33 - not icons theme I'm going to import the
40:36 - type component style config
40:40 - and this is a typescript things that we
40:42 - get out of completion when we're
40:44 - creating our button we're going to
40:45 - create a button of type component style
40:49 - config
40:50 - so another keyboard shortcut that's
40:52 - super handy in the typescript is if you
40:53 - press Ctrl spacebar you will see a list
40:56 - of all of the properties that this
41:00 - particular type or interface is
41:02 - expecting and this is really a first
41:04 - glance at the power of typescript if you
41:06 - have not used typescript before you're
41:07 - going to be amazed when we write some
41:09 - more advanced type script at how robust
41:12 - and readable and Bug proof it makes the
41:14 - code so I'm going to create this thing
41:16 - called base style so let's do the Border
41:18 - radius and look at this Auto completion
41:19 - this is all thanks to typescript without
41:21 - this type we would actually not have
41:24 - this Auto completion right it would have
41:26 - no idea like what this thing is so it
41:29 - typescript at its finest okay let's
41:31 - bring that type back
41:35 - okay and inside a base style we're going
41:37 - to give a border radius of 60 pixels and
41:41 - I'm going to show you how to just apply
41:42 - like a global color let's just make it
41:44 - like let's make it our brand 100 color
41:46 - the red color we created
41:48 - and now in order to actually use this in
41:49 - our chakra theme what we need to do is
41:51 - go into our theme.ts file and remember
41:53 - how when I was creating this theme I
41:55 - mentioned that we're going to add the
41:56 - button in here eventually so that's what
41:59 - we're going to do now we're going to
42:00 - import
42:01 - back button
42:03 - from that button file
42:07 - and then we're going to enable it here
42:09 - and then you should see that those
42:11 - global Styles have been applied to our
42:13 - button so if you go back to our button
42:14 - if you say add a border of 2 pixel
42:17 - solid red you'll see that those are
42:19 - applied to every single button we create
42:21 - so this is global now so what we want to
42:24 - do is because our buttons have slightly
42:26 - varied Styles we want to put everything
42:27 - that applies to all of them inside of
42:30 - this file and then anything that is
42:32 - specific we will just add the same way
42:33 - we have been adding other shortcut UI
42:35 - Styles so I'm just going to paste in the
42:37 - remaining styles for our Global buttons
42:39 - because I just don't want to spend a
42:40 - bunch of time writing out a bunch of CSS
42:42 - once you kind of understand this the
42:45 - rest will make total sense so I'm going
42:47 - to go and just grab that from my other
42:51 - code base and paste it in here so this
42:54 - looks like a lot but it's actually not
42:56 - we just have some base styling being
42:57 - applied to all of our buttons and then
42:59 - we have sizes which basically just
43:00 - indicate any styling we want to apply to
43:03 - this component at certain screen sizes
43:04 - the most important thing to pay
43:06 - attention to in here is the variance we
43:07 - have our solid variant which has a blue
43:10 - background and then we just have our
43:11 - outline variant which is a white
43:13 - background with a blue border which
43:15 - looks like this red button here
43:17 - okay so we're going to close this
43:18 - because we're not really going to need
43:19 - it anymore and our login button actually
43:21 - is going to have the variant outline and
43:24 - look at this typescript gives us this
43:26 - nice Auto completion we can see all of
43:27 - the options so I click outline you can
43:29 - see on the right that that's actually
43:31 - being applied now and like I said before
43:33 - all of these styles that are specific to
43:35 - these buttons only we're going to write
43:37 - the same way we've been writing other
43:38 - chakra UI Styles so for example the
43:40 - height not every button is going to have
43:42 - the same height so I'd not put it in the
43:43 - global Styles I'm going to add it to
43:45 - each button specifically so this button
43:47 - is going to have a hit of 20 pixels and
43:49 - we're going to see some more media Crews
43:51 - here we're going to have on display
43:55 - at mobile screens we're not going to
43:57 - want to see this thing
43:59 - and small we're going to make it display
44:01 - is equal to flex
44:03 - the width we're also going to have a
44:04 - media query on
44:06 - base Mobile sizes is going to be 70
44:09 - pixels and at medium screen sizes it's
44:11 - going to be 110 pixels margin right
44:16 - of two and then I'm going to add a on
44:18 - click function which I'm just going to
44:20 - leave empty for now because it's not
44:22 - going to do anything but we are going to
44:24 - have on clicks on both of these buttons
44:25 - that are going to trigger that modal at
44:27 - f1g prompt us to log in and I'm going to
44:30 - basically do a lot of the similar stuff
44:32 - to the sign up button so I'm going to
44:34 - make the variant of this solid but by
44:36 - default it is solid so I don't really
44:37 - have to specify that I'm going to make
44:39 - the height of this equal to
44:41 - 28 pixels and I'm going to go grab all
44:44 - of these things from this button because
44:46 - it's going to apply to this button as
44:48 - well so now we can see that those
44:50 - buttons are looking pretty good on the
44:52 - right and we can look at the
44:54 - responsiveness here they disappear on
44:56 - mobile and they get slightly smaller at
44:59 - smaller screen sizes and this behavior
45:01 - is identical to Reddit all right you
45:03 - guys we are now ready to start working
45:05 - on that model that I previously
45:07 - mentioned before the authentication
45:08 - model that's actually going to pop up
45:10 - when we click one of these buttons
45:12 - that's going to allow us to create user
45:14 - accounts and log users in so we're going
45:16 - to get a first glance at building a
45:18 - modal as well as we're going to start
45:20 - implementing recoil and we're going to
45:22 - see how to work with global State using
45:25 - recoil so super exciting stuff so what
45:27 - I'm going to do is inside of components
45:28 - I'm going to create another folder
45:30 - called Model because we're going to have
45:32 - a few different models throughout the
45:34 - app I think there's two of them there's
45:35 - the authentication model and then the
45:37 - creation of community modal so we're
45:39 - going to have a folder that houses all
45:40 - of those components and inside of modal
45:42 - I'm going to create another folder
45:44 - called auth to house all of the
45:45 - authentication modal components and
45:48 - inside of here I'm going to create a
45:50 - component called authmodel.tsx which
45:53 - represents the sort of root component of
45:56 - the authentication model so I'm going to
45:58 - use our snippet and our authentication
46:01 - model is actually not going to take in
46:02 - any props
46:03 - so we'll get rid of this
46:07 - and what we're going to do now is we're
46:08 - just going to get rid of this div and
46:09 - right now I'm just going to return a
46:10 - fragment that's completely empty I will
46:13 - go back over here and implement this
46:15 - Auto Import
46:17 - and let's go grab the model component
46:20 - from Chakra UI so if you go to if you
46:24 - just Google chakra UI modal
46:27 - modal dialogue we're just going to grab
46:29 - a sort of basic modal that's basically
46:31 - like this so what I'm going to do is
46:34 - we're not going to use this use
46:35 - disclosure hook but I'll grab the disc
46:37 - for now we're going to sort of write our
46:38 - own custom implementation of um opening
46:42 - and closing the modal and I'm going to
46:43 - go use the import all add all missing
46:46 - Imports
46:47 - okay so I'm going to get rid of this
46:49 - lorem thing that's just like text and
46:51 - I'm just going to write here is the
46:53 - modal body cool now if I go to our
46:56 - application now we should see this
46:58 - button and if I click this we should
47:00 - actually have a functioning modal now
47:01 - which is pretty cool that's how easy it
47:03 - is to implement modos with these UI
47:05 - libraries however this is not the
47:07 - behavior we want we wanted these buttons
47:09 - to trigger that so we don't want this
47:10 - button to be actually inside of the
47:12 - modal itself because these buttons live
47:15 - in our auth buttons component these both
47:18 - of these unclick functions are going to
47:19 - trigger the opening of that modal so we
47:21 - need to modify just the opening and
47:22 - closing of the logic a bit here and
47:25 - that's what we're going to do now all
47:26 - right so this is where we're actually
47:27 - going to start working with recoil and
47:29 - Global State the reason we need to
47:31 - implement Global State here is because
47:33 - with the opening and closing of this
47:36 - modal does not actually live inside the
47:38 - model itself it is being triggered by
47:40 - other components and this calls for
47:42 - moving our state upward and we're
47:45 - actually going to see as we build this
47:46 - application that the the authentication
47:48 - model is going to be opened by a series
47:50 - of components like when you try to vote
47:52 - on a post that you're and you're not
47:53 - logged in it will just open the modal if
47:55 - you try to join a community and you're
47:57 - not looking it'll open the model so
47:59 - we're going to need that opening and
48:01 - closing of modal State logic everywhere
48:03 - in our application hence the need to
48:06 - apply a recoil here so on that thought
48:08 - let's go back to our app.tsx file and we
48:13 - are now going to wrap our entire
48:15 - application in The Recoil provider and
48:18 - this is going to be the last time we
48:20 - touch app.tsx so all we need to do is
48:22 - just come over here
48:24 - and import this component called recoil
48:27 - root and that should just automatically
48:28 - import from recoil
48:30 - and we are just going to wrap
48:33 - the app in the root now we have access
48:35 - to global State everywhere in our app it
48:37 - is that easy with recoil and I'm going
48:39 - to show you now how to write a atom in
48:42 - Recoil and an atom is similar to I guess
48:45 - if you've worked with Redux before it
48:47 - represents almost like a slice of state
48:49 - and then we have just have access to
48:51 - these atoms everywhere in our app recoil
48:54 - is a lot simpler than Redux and it's so
48:56 - much quicker to get set up and going so
48:58 - that's why I'm super pumped to be using
48:59 - it and I'm super pumped to show you all
49:01 - right so what we're going to do now is
49:02 - inside of our source folder we're going
49:06 - to create a another folder called atoms
49:08 - this is the convention we create a
49:10 - folder called atoms and inside of our
49:12 - atoms folder we're going to create all
49:14 - of the pieces of global state that we're
49:16 - going to be using so for example I'm
49:18 - going to create a file in here called
49:20 - auth modal
49:22 - atom.ts and I highly recommend you to
49:25 - check out The Recoil docs and just go
49:28 - through sort of the home page of its
49:30 - explanation of atoms and I'm going to
49:32 - try my best to explain everything that's
49:34 - sort of outlined here but if you want
49:35 - further clarification just feel free to
49:37 - go to The Recoil documentation it is
49:39 - really great and recoil for your
49:41 - information is created by Facebook as
49:44 - well I think it is fantastic and I hope
49:46 - you do as well so inside of our
49:48 - Automotive file I'm going to import Adam
49:51 - from recoil just like this this is going
49:54 - to be our first glance at writing our
49:55 - own typescript we're going to create an
49:58 - interface called auth modal State and
50:01 - this interface is going to represent the
50:02 - properties that our auth modal atom is
50:06 - going to have this is purely a
50:07 - typescript thing you do not have to do
50:09 - this with JavaScript but you will
50:10 - shortly see why this is so handy and the
50:13 - power of using types and interfaces with
50:15 - typescript so our auth modal is going to
50:17 - have two properties it's going to have
50:18 - an open property which is going to
50:20 - represent whether it's open or not and
50:21 - that's going to be true or false a
50:22 - Boolean and it's also going to have a
50:24 - view and we're going to have basically
50:26 - three views for our auth model we're
50:28 - going to have a login view or a sign or
50:32 - a sign up view or a reset password view
50:37 - those are the three views that are
50:39 - possible inside of our modal and it is a
50:42 - vertical line that you see here
50:43 - essentially means or it is called the
50:46 - pipe operator in typescript and it
50:48 - basically just means that we can have
50:49 - this thing or this thing or this thing
50:52 - and also the reason that we didn't just
50:54 - make this up type string
50:56 - which would also work too we decided to
50:58 - be a bit more specific than just simply
51:00 - saying string because we know that our
51:03 - modal is only going to have a predefined
51:05 - set of strings and this is a common
51:07 - typescript thing and again if this makes
51:10 - no sense to you we're going to write so
51:11 - much typescript and interfaces and
51:13 - you're going to see this so much that
51:13 - it's going to make a lot more sense as
51:15 - we get some more repetition with it it
51:17 - is a little bit weird at first but just
51:19 - try to accept it right now and as we
51:21 - build it will make more and more sense I
51:23 - promise we need this to be part of our
51:25 - odd model state so that we so that the
51:27 - model knows which component to render
51:30 - because we're going to create components
51:31 - for logging in signing up and resetting
51:33 - password and this will make more sense
51:35 - once we actually start building out the
51:37 - modal component itself so I'm going to
51:39 - create another variable called the
51:40 - default modal State this is going to be
51:43 - of type auth modal State and so now this
51:46 - thing it knows what parameters to expect
51:48 - because we specify that up here and so
51:51 - this is again the beauty of typescript
51:52 - so our default State we're going to
51:54 - initialize our state as false because we
51:56 - don't want it just to be open as soon as
51:58 - the application spins up our view is
52:00 - going to be default to log in and look
52:02 - at this it's again beautiful typescript
52:04 - because we specified the three possible
52:06 - views up here so we're going to use
52:07 - login here so now we're actually going
52:09 - to create the atom itself so we're going
52:11 - to say export const
52:13 - modal State it's going to be equal to an
52:16 - atom and this atom is going to be of
52:19 - type of modal state
52:23 - and the key
52:25 - is the it's going to be auth model State
52:27 - and the key is a parameter required by
52:30 - recoil and it's basically just a unique
52:31 - identifier for this specific atom and
52:34 - this does need to be unique for all your
52:36 - atoms this is just so you don't have
52:37 - conflicting State and the default value
52:39 - is going to be default modal statement
52:42 - and this default value this represents
52:44 - our initial value of State for this
52:47 - particular atom and this is extremely
52:49 - similar to the U State hook where you
52:51 - just pass it a default initial value as
52:53 - an argument and also one thing to note
52:56 - here with typescript is because I
52:57 - specified that this atom is of type of
52:59 - modal state if I were to give this thing
53:02 - anything other than that type for
53:04 - example a number this is going to
53:06 - complain and it's going to say that type
53:08 - number is not assignable to type osmodal
53:10 - stage so we are seeing more and more
53:12 - evidence of why typescript makes your
53:14 - code so much more bug free over a
53:18 - JavaScript you would not get this type
53:20 - validation with JavaScript and you
53:22 - wouldn't realize that this is an error
53:24 - until you're after education breaks and
53:26 - crashes whereas in typescript it tells
53:28 - you right away so that's why we're able
53:31 - to use default model State because we
53:34 - told it that this atom is of type of
53:35 - modal State and we are passing it a
53:37 - default value of the same type it's
53:40 - expecting and that's why it is happy
53:42 - right now awesome so now we're going to
53:44 - see how to actually use this Global
53:46 - state that we just defined inside of our
53:48 - off model
53:50 - so let's go to our auth model so we're
53:52 - going to get rid of this use disclosure
53:53 - hook provided by chakra and we're
53:55 - instead going to do something extremely
53:57 - similar to Native react state but
54:00 - instead of using the use statehook we're
54:02 - going to use a hook called the use
54:03 - recoil state so we're going to say const
54:05 - modal state
54:07 - and set modal state is going to be equal
54:10 - to use recoil State and then we just
54:14 - need to pass it that auth modal State
54:16 - atom that we created over here that's
54:19 - all we need to do and this is and this
54:21 - is how easy it is to get recoil set up
54:24 - and this is literally all you need to do
54:25 - to set up Global state so we basically
54:28 - have our state value and then our
54:31 - setting State function same exact thing
54:33 - as you state with react however it is
54:35 - global which is amazing and a lot
54:37 - simpler than react so now for this modal
54:40 - it is no longer going to use that is
54:41 - open variable that we got rid of before
54:43 - it is now going to be modal State when I
54:46 - go into this it knows what properties
54:48 - are defined on that thing thanks to our
54:50 - interface so modal state DOT open and
54:53 - we're going to remove this on closed
54:55 - function we're instead going to define a
54:58 - function called cons to handle close and
55:00 - this function is going to use the set
55:02 - modal State function and we're going to
55:04 - take the previous state value and spread
55:06 - it because we only want to modify a
55:09 - single part of that piece of state and
55:10 - that piece is going to be open and we're
55:12 - going to set it to false now we're going
55:15 - to get rid of this button and then
55:17 - inside of our modal on close this
55:19 - navigation can be handle closed and
55:22 - we're not actually going to even have a
55:23 - modal footer so I'm just going to get
55:25 - rid of this okay so if we go back to our
55:29 - model we'll see that this actually
55:30 - doesn't do anything the model is not
55:32 - appearing because we have not told these
55:34 - buttons to trigger the model to be open
55:37 - so this is the reason why we needed this
55:39 - to be Global because now in our auth
55:42 - buttons component we can call that set
55:44 - authmodal State function that is going
55:46 - to modify that specific atom and set it
55:49 - to be open which the modal is listening
55:52 - to and so multiple components are able
55:54 - to read and write from the same atom and
55:56 - Trigger Global State updates and so
55:59 - that's we're going to do right here so
56:00 - I'm going to enable these on click
56:02 - things right here and inside of auth
56:05 - buttons at the very top I'm going to
56:07 - grab that set off modal State function
56:11 - and there's another hook provided by
56:13 - recoil called the use set recoil State
56:15 - and we're using this because inside of
56:17 - this component we only need access to
56:19 - the setting State function for this
56:22 - particular atom we do not need the value
56:25 - of that state we don't care inside of
56:27 - our buttons If the model is open or what
56:29 - view it's in right
56:30 - um if I go back to authmodal we did need
56:33 - the value because we needed to tell this
56:35 - model to be open or closed and that's
56:37 - why we use just the generic use recall
56:40 - State whereas over here we're only going
56:42 - to use set recoil State and there's a
56:43 - similar how to use only the value and
56:46 - it's I think just use use recoil value
56:48 - we're going to be seeing this a lot by
56:50 - the end of this you're going to
56:51 - understand this completely so now in our
56:54 - on click function for logging in we want
56:56 - to call that set off modal State and
56:58 - what we want to do is we want to set the
57:00 - openness of it to be true and we also
57:04 - want to set the view to be login
57:07 - right and we're going to do the exact
57:09 - same thing
57:11 - down here except we're just going to
57:13 - make this sign up so this is basically
57:16 - just when we click login it's going to
57:18 - open the modal and it's also going to
57:20 - show the login View and when we click
57:22 - sign up it's going to open the model
57:24 - annotation with the sign up view so
57:25 - let's see if this works so now if I
57:27 - click on login we can see that the modal
57:30 - is actually being opened by both of
57:32 - these buttons The View thing we have not
57:33 - created the components for those yet so
57:35 - don't worry but now we can actually see
57:36 - how these components are modifying the
57:39 - openness of this modal and that's super
57:42 - cool we have just experienced Global
57:43 - State we now know how to modify any
57:46 - application state from any component
57:48 - using recoil all right you guys so with
57:49 - the recoil setup and with the modal
57:52 - structure put in place we are now at a
57:54 - good place to actually start building
57:55 - out the structure of this model and
57:57 - create the login with Google button and
58:00 - the inputs that the user can put their
58:02 - username and password to sign in or sign
58:04 - up so let's get going on that all right
58:07 - so the first thing we're going to do is
58:08 - make the modal title change depending
58:11 - what modal view we're in and that comes
58:14 - from the value of modal State Dot View
58:16 - so if I'm in the login view I want to
58:18 - say login and if I'm signing up I want
58:20 - to sign up and that's super easy to do
58:22 - so all we need to do is make this text
58:25 - Dynamic using JavaScript so inside of
58:27 - our header we can say modal state
58:30 - dot view is equal to login if this is
58:34 - true
58:35 - then let's show the text log in and this
58:38 - is if you have not seen this before just
58:40 - the react way of saying that show this
58:42 - text if this is true this is basically
58:43 - an if statement in react you do the
58:45 - exact same thing for our view if it's
58:49 - equal to sign up
58:52 - and we can say sign up okay so now
58:56 - you'll see that this has changed to
58:57 - login because our default view was
58:59 - logged in if I click sign up it's sign
59:01 - up so it's pretty cool we can see that
59:03 - the second piece of state of our modal
59:04 - is now in action which is that view and
59:07 - we're going to add the third one which
59:09 - was reset password
59:18 - so we can see that being built
59:19 - dynamically okay
59:21 - now we're going to work on the body so
59:23 - we can get rid of this text here and our
59:27 - body is going to have some CSS
59:30 - properties so we're going to say display
59:32 - flex and we have to manually specify
59:34 - this because this is not the flex
59:36 - component so by default it does not have
59:38 - this so we just have to manually type it
59:40 - in deflects Direction
59:43 - is going to be column
59:46 - we're going to say align items is going
59:48 - to be equal to Center and justify
59:50 - content
59:54 - I don't know why I'm not getting auto
59:55 - complete it's going to also be equal to
59:57 - Center
59:59 - this is basically centering everything
60:00 - inside of this container inside of our
60:03 - mortal body we're going to have the flex
60:05 - component
60:06 - we're going to make the direction of
60:08 - this
60:09 - column the Align is going to be Center
60:13 - and the justify
60:16 - is also going to be equal to Center
60:18 - we're going to make the width of this
60:20 - equal to
60:21 - 70 percent
60:24 - awesome let's scroll up a bit you can
60:26 - see and I'll put a border on this just
60:28 - to make it clear on
60:30 - the right what we are looking at it has
60:32 - nothing in it right now so it just looks
60:33 - like a line
60:35 - now what's actually going to go in here
60:36 - this is going to be our oauth buttons so
60:39 - the sign in with Google button and it's
60:41 - also going to consist of those inputs to
60:44 - put in your email and password and if
60:46 - you look at the Reddit modal you can see
60:48 - that we have the this is what's going to
60:50 - be represented by our oauth buttons and
60:52 - then we're going to have these inputs as
60:53 - well so basically we're going to have a
60:55 - component called oauth buttons which
60:57 - we're going to create very soon and
60:59 - we're also going to have a component
61:00 - called auth inputs which is going to be
61:02 - those text inputs and we're also going
61:05 - to have a component called reset
61:06 - password which we will create at the
61:08 - very end we'll do this after we have
61:10 - Firebase setup and everything and we're
61:12 - actually able to create users this will
61:13 - be the very last step of Firebase
61:15 - authentication so we won't revisit this
61:17 - for a little bit okay cool and that is
61:18 - pretty much it we just have to go and
61:20 - create these components and our model
61:21 - will be completely done
61:25 - okay so inside of our auth modal folder
61:28 - I'm going to create another file called
61:31 - auth inputs
61:35 - and I'm going to use our snippet so in
61:37 - this component we are going to take in
61:39 - some props eventually but for now we're
61:40 - not going to take anything so I'm just
61:41 - going to leave it blank for now and I'm
61:43 - going to return
61:45 - our famous Flex component
61:48 - import that the flex direction is going
61:51 - to be column
61:52 - we're going to say a line is equal to
61:55 - Center and our width
61:57 - is going to be a hundred percent of our
62:00 - parent we're going to give this a margin
62:02 - top four okay and now we're going to
62:04 - create more child components and this
62:06 - one's going to be our login component
62:08 - as well as our sign
62:11 - up component and we also don't want to
62:14 - show both of these at the same time
62:15 - right we only want to show the login
62:17 - component when our model view is log in
62:19 - and we only want to show this when our
62:20 - modal view is signed up so what we can
62:23 - do is grab that modal State value and
62:26 - we're going to use that use recoil value
62:30 - hook that I mentioned earlier because in
62:32 - this file we only care about the value
62:33 - of that state we do not care about
62:35 - setting that state so now in here we can
62:38 - control which one we're seeing by
62:39 - tapping in to that modal State Dot View
62:42 - if the motorstate.view is equal to login
62:44 - then show
62:48 - our login component
62:50 - and if this is equal to sign up
62:54 - then show our
62:57 - sign up component which we have not
62:59 - created and that is it for this
63:01 - component and the reason we are keeping
63:02 - this component so small is because if we
63:04 - put everything from login and sign up in
63:06 - here it would be a super giant mess and
63:09 - we're going to keep it this way and it
63:10 - keeps it very clean and readable so that
63:12 - if someone else were to read this they
63:13 - would know exactly what's going on and
63:15 - it's common practice in industry and it
63:17 - makes refactoring the code a lot easier
63:19 - and it makes the component overall more
63:21 - extendable in the future all right so
63:23 - what we're going to do now is I'm going
63:24 - to comment these out and we're actually
63:26 - going to go create the login component
63:28 - now so inside of our modal auth folder
63:30 - I'm going to create another component
63:32 - called the login.tsx use our snippet all
63:35 - right and this component is going to be
63:36 - our first component that is going to
63:38 - take in user inputs in the form of a
63:42 - form so we're going to have two inputs
63:45 - that we're going to create here and
63:46 - one's going to be for the email and Y is
63:48 - going to be for the password and we're
63:49 - going to need to create some state in
63:51 - order for our user to be able to type
63:52 - these values in and for us to submit it
63:54 - to Firebase all right so to do that
63:56 - we're going to use the use statehawk and
63:59 - I'm going to create a state variable
64:00 - called login form and the setter
64:03 - function is going to be called set login
64:04 - form and we're going to be say we're
64:06 - going to say use State and the initial
64:08 - value of our login form is going to have
64:10 - an email that is going to be empty and a
64:12 - password
64:13 - that is going to be empty as well okay
64:16 - so now we can actually build the two
64:17 - inputs that are going to use and update
64:20 - that form state so inside of our form
64:22 - let's create a input and that is going
64:25 - to come from Chakra UI we're going to
64:28 - create two of them just like this okay
64:30 - and what I'm going to do is I'm going to
64:31 - go back to our auth inputs component and
64:33 - just enable that login component so that
64:36 - we can actually see what we're building
64:37 - on the right since we have something
64:39 - defined now we should be able to do that
64:40 - and in order to see anything I just need
64:42 - to go back to authmodal because that is
64:44 - the parent of auth inputs and enable
64:47 - auth inputs
64:48 - and that should automatically import
64:50 - just make sure it's imported at the top
64:52 - okay so nothing's showing let me try to
64:55 - refreshing the page
65:00 - oh there are inputs now the reason I
65:02 - have to refresh sometimes is because I
65:03 - take breaks between recording sessions
65:05 - and I think the development server just
65:07 - like goes to sleep so the hot reloading
65:08 - kind of is uh disabled for a quick
65:10 - second there until I refresh okay so
65:12 - let's go back to our login form and
65:14 - we're going to give some properties to
65:16 - our input so this one is going to have a
65:18 - name of email and we're going to give it
65:20 - a placeholder of email as well
65:24 - and it's also going to have a type and
65:26 - the type is going to be email and we're
65:29 - going to give a margin bottom of 2 so
65:31 - there's some space between these two
65:32 - things and we're also going to pass an
65:34 - on change function which we're going to
65:35 - create in just a second save that with
65:38 - auto formats and we're going to do
65:40 - basically the exact same thing to this
65:42 - one down here so I'm going to say name
65:43 - is equal to password
65:46 - the placeholder is going to be the
65:48 - password
65:49 - our type is going to be password
65:54 - and that's so that we get these uh if I
65:56 - save that that's so that we get these
65:58 - secretive Dots here and our on change is
66:01 - going to be just an empty function for
66:03 - now and so we're going to come up here
66:05 - and Define two functions and those two
66:07 - functions are going to be that on change
66:09 - function and the submit function for
66:11 - when we actually submit this form so
66:13 - let's also create the button that we're
66:14 - going to use to submit this form and
66:16 - we're going to import a button from
66:17 - sharper UI and this is going to say log
66:20 - in all right so now we have pretty much
66:23 - everything in place we have two inputs
66:25 - and we have a login button to submit our
66:26 - form and in order to make this so this
66:29 - button actually triggers a submittal of
66:31 - the form you have to say type equals
66:32 - submit and since this is wrapped in a
66:34 - form it knows to call the onsubmit
66:36 - function that we're going to create in a
66:38 - second when this button is clicked so
66:40 - what we're going to do is create that on
66:42 - submit function
66:43 - it's going to be empty for now and we're
66:45 - also going to create the on change
66:46 - function for our inputs which are going
66:49 - to be triggered every time a user types
66:51 - into the input it's going to update our
66:53 - state
66:55 - so now let's come down here and I'm
66:57 - going to change both of these two things
66:58 - to be on change so they're both going to
67:01 - call the same on change function and I'm
67:04 - going to show you how you can have
67:05 - multiple inputs use a single on change
67:08 - function in your forms rather than
67:10 - having to create separate stage for the
67:12 - email and the password you can just have
67:13 - a single state in our case login form
67:15 - and a single on change Handler will
67:18 - handle those updates and before we do
67:20 - that I'm just going to quickly add the
67:21 - on submit to the on
67:23 - submit perfect so our on change function
67:27 - implicitly takes in an event this event
67:30 - is a change event that is emitted by
67:33 - these inputs so every time the inputs
67:35 - change it emits an event and it is going
67:36 - to be captured by this function so the
67:39 - type of this event we can say is react
67:42 - dot change event and the type of HTML
67:46 - element that's emitting this event is an
67:49 - HTML input element and this is all
67:51 - purely typescript the reason we do this
67:53 - is so that when we're using our event
67:55 - inside of our function we have Auto
67:57 - completion and we can see all the
67:59 - properties on our event so petstrip at
68:01 - its finest once again so enter on change
68:03 - function we are going to update form
68:06 - state so we're going to say set login
68:08 - form and we're going to take the
68:09 - previous value of state and we're going
68:11 - to spread it because we only want to
68:13 - update a single piece of our form State
68:15 - and that piece depends on which input is
68:17 - emitting this event and how do we know
68:19 - that well luckily on our event we have
68:22 - event.target
68:25 - dot name
68:27 - and where's that name coming from that's
68:28 - because we gave these inputs a name so
68:30 - every time this is a particular input e
68:32 - makes an event that event contains the
68:34 - name of the Target that he made at the
68:36 - event and so that's how we're able to
68:38 - know which piece of state to actually
68:39 - set so we can say event.target dot value
68:43 - and that's just going to be the value
68:44 - that is inside of the input so now if I
68:47 - go to my browser I'm going to go to my
68:49 - react Chrome extension if you do not
68:50 - have the react Chrome extension I highly
68:52 - highly highly recommend you to get it it
68:54 - is extremely useful and it's much more
68:56 - accurate in debugging react applications
68:58 - than doing console logs so highly
69:01 - recommend that and I'm just going to use
69:03 - the react selector to inspect our login
69:05 - form and you can see that it has a piece
69:07 - of state with our form that has email
69:09 - and password and so thanks to our on
69:10 - change function that we just wrote when
69:12 - I type into here you can see that state
69:14 - is updating in the reaction extension
69:17 - and same with the password and it knows
69:20 - which input specifically we're typing
69:22 - into all right so now that that's
69:24 - handled let's actually style this form
69:27 - because right now it looks like garbage
69:28 - okay
69:30 - okay so what we're going to do is on our
69:32 - button let's add a width of a hundred
69:36 - percent and a height of 36 pixels
69:41 - and on our button I'm also going to add
69:43 - a margin top of 2 and a margin bottom of
69:47 - 2 to give it some space around it and
69:49 - now let's add all of the styling to our
69:51 - input to make it look as closely as
69:53 - possible to these Reddit inputs and also
69:56 - our model is going to vary slightly in
69:59 - how it looks just because I didn't like
70:00 - this massive white space on the Reddit
70:02 - form so ours is just going to be more of
70:05 - uh this without the white space and
70:07 - there's going to be little things that
70:08 - very like I'm not going to add like this
70:09 - text I don't think that's very useful
70:11 - but everything else is going to be very
70:13 - much similar let's go back to our app
70:15 - and I'm just going to go quickly Center
70:16 - this text because it is supposed to be
70:18 - over here so I'm just going to go
70:19 - quickly back to the authmodal to our
70:22 - header I'm just going to say text align
70:24 - is going to be equal to Center and
70:26 - that's going to Center that for us and
70:28 - I'm also just going to get rid of this
70:30 - red border all right I'm also just going
70:32 - to quickly add some bottom padding to
70:34 - our modal body just to give it some more
70:36 - room at the bottom there and let's go
70:38 - back to our login and get going on these
70:40 - inputs okay so the first thing I'm going
70:42 - to do is add the required property to
70:44 - both of these inputs
70:49 - just so that we're not able to submit
70:50 - our form if one of these things is empty
70:52 - so let's go down here and I'm going to
70:54 - add a font size of 10 point make it a
70:58 - bit smaller than it is right now and I'm
71:00 - going to style the placeholder by using
71:02 - the placeholder sudo class and I'm going
71:03 - to make the color of this gray 500
71:07 - and I'm going to add some upper styling
71:09 - as well you're going to make the
71:10 - background white the Border one pixel
71:13 - solid
71:14 - and the Border color is going to be
71:19 - blue 500. Perfect all right and let's
71:22 - also add some Focus styling for when
71:24 - this thing is clicked on and in focus
71:26 - we want to make the outline none and the
71:29 - three remaining things are going to be
71:31 - the exact same as these so I'm just
71:33 - going to copy these and paste them down
71:35 - here and we are going to make the
71:37 - background color gray 50 which is a
71:39 - really light gray so the exact same
71:41 - styles are going to apply to our
71:43 - password input so I'm just going to grab
71:44 - all of these we started at font size
71:46 - come down here paste them down here and
71:48 - I think we're just also missing the
71:50 - margin on our password input so I'll
71:53 - throw that in there as well to get more
71:54 - spacing between that and the button
71:56 - alright so this is looking really good
71:58 - you can see that we have hover styling
72:00 - Focus styling it's all extremely similar
72:02 - to Reddit so I'm really happy with how
72:05 - this turned out all right so now the
72:07 - only thing we need to add to login is
72:09 - that text at the bottom that says new to
72:12 - Reddit sign up and that's going to
72:13 - switch to view to actually be the sign
72:14 - up view so let's go quickly and do that
72:16 - that'll be that won't take very long at
72:18 - all
72:19 - all right so beneath our login button
72:21 - I'm going to create a flex container and
72:23 - this Flex container is going to have the
72:25 - property font size nine point so all the
72:28 - fonts inside of here are going to be
72:29 - size 9 and we're going to make Justified
72:31 - content equal to Center and inside of
72:35 - here we're going to have text and text
72:37 - is pretty much just a P tag with zero
72:39 - margin that is a chakra component and
72:40 - this is going to say new here and also a
72:43 - quick keyword shortcut
72:45 - um if you want to duplicate lines which
72:47 - is something we do a lot you can press
72:49 - option shift and then the up or down
72:52 - arrows depending on which direction you
72:53 - want it to show up in so for example if
72:54 - I want the same line to show up beneath
72:56 - it I can do option shift down arrow and
72:59 - I'll duplicate the line below it which
73:00 - is super handy all right so this one is
73:03 - going to say in all caps sign up and
73:06 - that's
73:07 - and that looks like this so we're just
73:09 - going to add some margin right
73:13 - up one to our new here text and then
73:16 - we're also going to give this
73:18 - a color of blue 500 and we're going to
73:22 - make it a little bit heavier if we find
73:23 - we're going to say fond grid is going to
73:25 - be equal to 700 we're going to make the
73:27 - cursor
73:29 - equal to pointer so that when we hover
73:31 - over it it has the pointer of cursor
73:33 - because it's something that we can click
73:34 - on and when we click on this thing all
73:36 - we need to do is modify our auth model
73:39 - State and change the view from login to
73:42 - sign up which is something we've already
73:44 - kind of seen how to do so what I'm going
73:45 - to do is go up to our component and I'm
73:48 - going to grab the set odd model State
73:51 - function using that set use set recoil
73:54 - State hook that we saw before pass it
73:57 - our auth mortal State atom and we only
73:59 - need the setting about model State we
74:01 - don't care about the Automotive State
74:03 - itself and we come down here and on this
74:05 - sign up text which is the thing we're
74:07 - going to click to toggle that view I'm
74:08 - going to add an on click function here
74:11 - I should save this for their Auto
74:13 - formats so we can see it
74:15 - and this is going to call that set auth
74:17 - model State function it's going to take
74:19 - the previous state and we're only going
74:21 - to modify the view we're going to change
74:23 - the view to sign up so now if we click
74:27 - on that text let's move that blue
74:29 - Highlight if we click on that text it
74:30 - actually modifies the view and we'll add
74:32 - the reverse in the sign up component
74:34 - we'll make it so we go back to login
74:36 - just like you would see in any regular
74:38 - authentication form
74:41 - perfect so that's super easy with recoil
74:44 - all right so the structure of this
74:46 - component is pretty much done all that
74:48 - we need to add in here is the Firebase
74:50 - logic which is going to be handled by
74:53 - this on submit function the modal is
74:56 - getting very close to being done we just
74:57 - need to create our signup component
74:59 - which is going to be very very similar
75:01 - to this component it's the pretty much
75:03 - the exact same thing it just has a third
75:05 - input to confirm the password and then
75:08 - all we need to do is create the oauth
75:10 - button or the login with Google button
75:12 - that will not take very long at all
75:13 - because it's just a single button and
75:15 - then we will be ready to hook up our
75:17 - application to a Firebase backend and
75:19 - start creating users with Firebase
75:22 - authentication so we're getting super
75:23 - close to that we're just a few minutes
75:25 - away all right so let's go quickly build
75:27 - that signup component so inside of our
75:30 - auth folder the same place where login
75:31 - is I'm just going to create another file
75:33 - called
75:34 - signup.tsx instead of here then use our
75:37 - snippet I'm going to get rid of the type
75:39 - because we are not going to take any
75:41 - props into this component and we are
75:44 - going to go and copy pretty much
75:46 - everything from login into here because
75:49 - it's essentially the exact same thing
75:51 - with just a few minor changes so let's
75:53 - grab everything inside of here
75:55 - up to this bracket copy that and bring
75:58 - it over here so just paste that in there
76:01 - and we're going to get a bunch of angry
76:03 - stuff because we have not imported
76:05 - anything so let's go to this input and
76:09 - try doing this add all missing Imports
76:11 - thing with command period and see if
76:13 - that solves all that stuff so it does um
76:15 - what is going on here
76:17 - oh I think text for some reason with
76:20 - chakra it just like doesn't Auto Import
76:21 - for some reason it's kind of weird all
76:23 - the other ones do but we sometimes have
76:24 - to go manually import text from Chakra
76:26 - no idea why but that is just how it
76:29 - works okay so
76:31 - um that is not showing I'm just gonna
76:32 - quickly do oh it's not showing because
76:36 - um if I go to auth inputs we are not
76:38 - even rendering it right now so let's go
76:40 - and do that inside of auth input the
76:43 - same way we did log in okay so now if I
76:46 - open up sign up I should see these two
76:48 - inputs it's the exact same component as
76:51 - login so there is no difference so let's
76:53 - make those minor modifications to that
76:55 - now
76:56 - okay so our signup form is going to have
76:58 - pretty much the exact same state as our
77:00 - login form except it's going to be I'm
77:03 - just going to call it sign up form and
77:06 - set
77:07 - sign up form and in addition to having
77:10 - an email and password it's going to have
77:12 - a confirm password thing
77:15 - as a third argument we just need to
77:18 - change this to set sign up form and the
77:21 - odd change is going to behave the exact
77:23 - same way even with our third input you
77:25 - could technically have 100 inputs if you
77:27 - want which could be handled bias on
77:28 - change as long as they have that name
77:30 - you are good to go and let's come down
77:34 - here and graph this input and duplicate
77:38 - it underneath and yeah you know how much
77:40 - would you know you can duplicate single
77:41 - lines
77:42 - with that keyboard shortcut option shift
77:45 - down arrow or up Arrow you can also do
77:47 - that with multiple lines as well so
77:50 - good to know that's basically what I
77:52 - just did with that input so we now have
77:55 - the third input there we're just going
77:56 - to change the properties of this so the
77:58 - name of this is going to be confirm
78:00 - password
78:02 - the placeholder is going to be confirmed
78:05 - password
78:08 - the type is still going to be password
78:09 - and everything else is going to be the
78:11 - same down here we're going to change
78:13 - this to sign up because this is the sign
78:17 - up form not the login form and our text
78:20 - at the bottom is going to change it a
78:22 - little bit as well I forget exactly what
78:24 - it says on Reddit new to Reddit sign up
78:26 - in the sign up form it says already a
78:29 - redditor log in so let's type that in
78:32 - here
78:34 - already uh redditor
78:38 - if you are a redditor already let's log
78:41 - in
78:42 - with a space
78:44 - cool and we're going to change the view
78:46 - we are in the signup view we want to
78:48 - modify the view to be log in
78:51 - awesome I think we're pretty much done
78:53 - this component now that's how easy it
78:55 - was to create this signup component it's
78:57 - literally the exact same thing just with
78:59 - a slightly different form and the text
79:01 - changes that is all all right so the
79:03 - only thing left to put inside of our
79:05 - signup component is going to be that
79:06 - Firebase logic which we are so close to
79:08 - all we need to do is go and create that
79:11 - oauth buttons component with our login
79:13 - with Google button so let's go and do
79:14 - that now it's going to be very short
79:16 - it's a very simple component so let's go
79:19 - into our auth folder and create another
79:21 - component called oauth buttons dot TSX
79:25 - even though for this tutorial we're only
79:26 - going to be able to log in with Google
79:28 - you could in the same component at as
79:30 - many third-party oauth provider buttons
79:32 - as you would want to log in with GitHub
79:34 - Twitter Facebook I'm only going to use
79:36 - Google but if this is where you would
79:38 - add any button for a third-party oauth
79:41 - provider hence the name a lot and
79:42 - buttons all right so I'm going to use
79:44 - our snippet and I'm going to get rid of
79:46 - our prop type because we do not need it
79:48 - and we can get rid of it here as well
79:50 - and inside of this component we you're
79:52 - going to return
79:53 - our chakra Flex component and also a
79:58 - button from Chakra and this button is
80:01 - going to say continue with Google all
80:04 - right and let's go make it so we can
80:05 - actually see this component show up on
80:07 - our browser so inside of authmodal we
80:09 - can now go enable this component because
80:12 - it exists let's import it
80:14 - cool and so now we actually have a
80:16 - button that says continue with Google
80:17 - that is pretty hyped okay so let's go
80:20 - back to our oauth buttons component
80:23 - where did it go here and just to
80:24 - illustrate what I was saying earlier
80:26 - about being able to add any other
80:27 - provider you'd want in here I'm just
80:29 - going to say some other provider so you
80:31 - know that this is where you would put
80:33 - those buttons okay and this Flex we're
80:35 - just going to give a direction of column
80:37 - and that should fix that and also going
80:39 - to give a width of 100
80:42 - and a margin bottom
80:45 - of four
80:47 - Perfect all right and this Google button
80:49 - does not look anything like a login with
80:51 - Google button so let's make that happen
80:53 - so inside of our uh Google button we're
80:58 - going to just remove this text for a sec
80:59 - and we are going to add an image from
81:02 - Chakra and the source of that image is
81:05 - going to be that is going to be one of
81:08 - those images that I had you guys insert
81:11 - into the project earlier or is it now
81:13 - it's in the public images it is the
81:15 - Google logo dot PNG so that is the
81:19 - reason why this is in the project it is
81:20 - for this button so if I say Images slash
81:24 - Google logo dot PNG
81:28 - you can see that show off on the button
81:30 - there it looks really big so let's give
81:32 - it a height of 20 pixels awesome and
81:36 - that's our text back in there continue
81:37 - with Google and I'm not sure if you
81:39 - remember but if we go back and look at
81:41 - this button.ts file in our chakra for
81:43 - our Global button styling uh I had this
81:46 - variant called oauth that I created for
81:49 - all of the lock buttons that you could
81:51 - potentially create and so we are going
81:52 - to use this for our Google button but if
81:54 - you add any more third-party oauth
81:55 - provider buttons then you can use the
81:57 - same variant as well so let's go over
81:59 - here and let's add that variant to be oh
82:03 - I
82:04 - cool cool cool and let's just add a
82:07 - bottom margin of two and this button
82:10 - here on the bottom I'm also going to
82:12 - give it a variant of glauth so that it
82:15 - looks the same and what I'm going to do
82:17 - is just add a bit of red margin to our
82:20 - Google logo so there's some space there
82:22 - and our login model is really the only
82:24 - component we're going to build that
82:26 - varies at all from the original red
82:28 - design just because I didn't really like
82:30 - this white space but our model is still
82:32 - super super clean okay so all that's
82:34 - missing now is just that text in between
82:36 - the oauth buttons and these inputs that
82:39 - says or so it's like log in with this or
82:41 - this where that's going to be is inside
82:44 - of our auth model root
82:46 - and that's going to go right in here so
82:49 - I'm just going to add text that says or
82:52 - and because text doesn't want to seem to
82:55 - automatically import from shortcut for
82:57 - some reason we just have to go manually
82:58 - add it to our Imports
83:00 - up top and we can make the color of this
83:05 - gray uh 400 and let's make the font
83:09 - weight
83:11 - 700. let's actually change this to 500.
83:15 - and you will notice that you see the a
83:17 - lot buttons in both the login and the
83:19 - signup View and the reason we do that is
83:21 - because when you're logging in with
83:22 - Google it doesn't matter if you're a new
83:24 - or a returning user logging in is the
83:27 - exact same thing and we structure our
83:29 - components that way so we have the oauth
83:30 - buttons here and that lives as a sibling
83:33 - as often puts and auth inputs is the
83:35 - parent of login and sign up so they will
83:39 - appear in both of those views all right
83:42 - so we are now done the UI structure of
83:45 - our modal other than the resetting of
83:47 - the password which we're going to do
83:49 - after we set up Firebase and we're able
83:51 - to create users if we are now ready to
83:52 - move into Firebase and start creating
83:54 - users we left off last time just
83:56 - finishing power login and signup forms
83:58 - and we are now ready to start working on
84:00 - implementing Firebase getting it all set
84:02 - up uh just one note I wanted to mention
84:04 - that I did create a Discord server after
84:06 - creating last video because I thought
84:08 - it'd be useful for people to get help in
84:10 - so if you are wanting direct access to
84:13 - me and you want to sort of ask on-demand
84:15 - questions on on the project or really
84:17 - anything feel free to join that server I
84:20 - would love to see you in there the link
84:21 - is in the description let's get back to
84:23 - work all right so what we're going to do
84:25 - is go to
84:28 - firebase.google.com and this is where
84:31 - we're going to create our Firebase
84:32 - project and get some configuration
84:34 - variables to connect our app to Firebase
84:37 - if this is your first time to the
84:39 - console it may ask you to log in so just
84:40 - log in with your Gmail account or create
84:43 - a new Gmail account and then we're going
84:44 - to do is go to the console I'm just
84:47 - going to click add project and the name
84:50 - I'm going to get this project is just
84:52 - Reddit clone tutorial feel free to name
84:55 - use whatever you'd like and then you're
84:56 - going to be asked if you want to enable
84:57 - Google analytics for this project
84:59 - because it is a demo I'm just going to
85:00 - disable this
85:02 - and then we're going to click create
85:03 - project and this may take a few minutes
85:06 - so once this is all done let's click
85:08 - continue and it'll take us to our
85:10 - project so we're creating a web app so
85:12 - we're going to click on web and then
85:14 - we're going to give this a nickname I'm
85:16 - just going to give it the same name as
85:17 - our project name and then I'm going to
85:19 - click Register App perfect now once
85:22 - that's done it's going to ask you to
85:23 - install Firebase but we already did that
85:25 - when we installed chakra if you did not
85:27 - install Firebase now would be the time
85:28 - to do that so go ahead and do that if
85:30 - you do not we're going to basically do
85:32 - exactly this in our app and that is how
85:34 - easy it is to connect Firebase to our
85:37 - app so what we're going to do is I'm
85:38 - going to come over to our repo and I'm
85:40 - just going to close some folders to
85:42 - clean this up a bit so it's a bit more
85:43 - visible and inside of source I'm going
85:46 - to create a new folder called Firebase
85:49 - and then inside of Firebase I'm going to
85:51 - create a file called Client app Dot
85:55 - typescript
85:56 - and this is where we're going to put our
85:58 - initialize app you will have your own
85:59 - unique configuration variables do not
86:02 - put the ones that are displayed in this
86:03 - video because it will not work all right
86:05 - so what I'm going to do is just quickly
86:07 - copy this over
86:10 - all right so now we're going to do is
86:11 - just in the root of our project I'm just
86:14 - going to create a new file called Dot
86:17 - env.local and this is where we're going
86:20 - to put all of our environment variables
86:21 - for our Firebase project so what I'm
86:23 - going to do is on the repo I believe
86:25 - there should be a DOT env.example file
86:28 - that looks something like this and this
86:30 - basically just contains all of the keys
86:33 - that we're going to put in our end file
86:35 - if you don't want to manually type all
86:36 - this out because it's kind of annoying
86:37 - to do that feel free to go to the repo
86:39 - on GitHub and grab these keys I'm going
86:42 - to paste these in here and now we're
86:43 - going to copy these variables over to
86:46 - put them into here all right so once
86:48 - that is done all we need to do now is
86:49 - just go back to our client app file and
86:51 - remove these hard-coded strings and just
86:53 - access our environment variables so what
86:55 - I'm going to do is just temporarily move
86:57 - this down here for a second just so I
86:59 - can copy the things over the first one
87:02 - is going to be process.env dot that
87:04 - thing and we're going to do this for all
87:06 - of them so once that's done and all
87:08 - these names match the variables inside
87:09 - of your EMB file we can close this
87:11 - because we're not going to use it ever
87:12 - again for this build all right so now
87:14 - our app is set up to connect to our
87:16 - Firebase project that we created and
87:19 - we're going to access it through this
87:21 - app instance that we created here we're
87:23 - going to make a few changes down here
87:24 - though because uh we're using max.js and
87:27 - we need to handle the case of server
87:29 - side rendering which introduces some
87:31 - complications with creating the app but
87:32 - it's just a few lines of code and I'll
87:34 - explain them as we go so I'm just going
87:36 - to remove these comments at the top and
87:38 - what we're going to do is in addition to
87:40 - this initialize app function we're also
87:42 - going to grab a function called get app
87:44 - as well as get apps and we're also going
87:47 - to import a function from Firebase auth
87:50 - and that function is going to be get
87:52 - auth
87:54 - foreign
87:56 - we're also going to import a function
87:59 - from Firebase
88:02 - firestore and that is going to allow us
88:04 - to actually access our database when we
88:07 - uh when we create it soon
88:09 - and that is going to be the function get
88:11 - firestore all right and the last thing
88:14 - we're going to import is going to be
88:15 - from Firebase storage and that function
88:18 - is going to be get storage and this is
88:20 - going to be used when we get into the
88:22 - creation of posts and users can upload
88:24 - images we're going to store those images
88:26 - in Firebase storage and Firebase storage
88:28 - is it is different than firestore
88:30 - database storage is used to store files
88:33 - and media things like video and photos
88:36 - whereas the database just stores
88:38 - JavaScript object Json type data all
88:41 - right now down here what we're going to
88:42 - do is we're going to initialize Firebase
88:44 - and I'm just going to add a comment for
88:46 - clarity that's going to say for server
88:49 - side rendering
88:51 - okay so since our application is going
88:53 - to use server side rendering in some
88:55 - areas we need to avoid attempting to
88:57 - initialize an app on both the next JS
89:00 - server as well as on the client side
89:02 - because the way next.js works when you
89:04 - use server-side rendering is that it
89:05 - renders the app on the server and then
89:07 - that is sent to the client and then
89:09 - client-side rendering will occur and we
89:11 - will get an error if we try to call this
89:14 - initialize app function both on the
89:16 - server and the client and that will make
89:18 - a bit more sense once I write this
89:19 - function out so basically how this is
89:21 - going to look is we're going to write it
89:22 - as a ternary operator and this is going
89:25 - to call that function get apps and this
89:26 - is going to get all the apps that we
89:29 - have created with our Firebase config
89:31 - object above and it's going to say if
89:33 - this app does not exist meaning that
89:35 - there is no length then we're going to
89:38 - initialize it
89:40 - however if it does exist we're going to
89:43 - go get that out and whatever the result
89:44 - of this ternary operator is is going to
89:47 - be stored in our app instance and then
89:49 - we will have access to it on the client
89:51 - side when we need it
89:52 - I hope that makes sense so now we're
89:54 - going to actually create our firestore
89:56 - instance and this is basically how we're
89:58 - going to access our firestore database
90:00 - we're going to pass it our app and then
90:02 - we're going to create our auth instance
90:04 - which is how we're going to use Firebase
90:05 - authentication also going to pass our
90:07 - app and we will while we're here create
90:09 - our storage instance same thing pass it
90:12 - our app and now we just need to export
90:14 - all of these things
90:16 - so we have access to them throughout our
90:19 - application we can just simply import
90:20 - them in any other client-side file and
90:22 - we can use their functionalities so we
90:24 - are completely done with this file we
90:26 - have created all of the necessary
90:27 - variables and we are now ready to
90:29 - actually start using these things in our
90:31 - app to start creating users and data and
90:33 - images and whatever so we can close this
90:35 - client app file and move forward all
90:37 - right so now that our app is actually
90:39 - able to communicate with our Firebase
90:41 - project we can now Implement
90:43 - authentication and actually start
90:44 - creating users so for authentication we
90:47 - are going to use this Library called
90:48 - react Firebase Hooks and these are hooks
90:50 - that are developed specifically for
90:52 - usage of Firebase inside of react and
90:55 - they enable us to leverage all of the
90:57 - amazing powers of a Firebase with just a
91:00 - few simple Hooks and a few lines of code
91:01 - and they're honestly unreal so if you
91:04 - just search for this package on npm and
91:06 - then you click on their GitHub
91:07 - repository link this is where all of
91:09 - their documentation is and if you come
91:11 - to the bottom here you can see they have
91:13 - documentation for all of their available
91:14 - hooks so we're going to Focus right now
91:17 - on these authentication Hooks and if you
91:19 - come into here you will see that they
91:21 - have hooks for essentially every single
91:24 - authentication method so we're going to
91:26 - be using you sign in with Google you
91:27 - sign in with email and password and use
91:29 - create email or password but once you
91:31 - know how to use one of these you can use
91:32 - them all and you can Implement these in
91:34 - just a few lines of code so we're going
91:36 - to start off with use create user with
91:38 - email and password kind of a mouthful
91:41 - and they have really good examples for
91:43 - each one of their Hooks and they look
91:45 - long but they're honestly very very
91:47 - straightforward and maybe I'll zoom in a
91:49 - bit hopefully you can see that so what
91:51 - I'm going to do is just come over here
91:53 - and grab the installation from npm and
91:56 - come to our project and paste that in
91:58 - there
92:00 - perfect once that's done I will just
92:03 - come back to this documentation here and
92:05 - I'm just going to grab this and paste it
92:08 - in our code base because we're going to
92:09 - have it written the exact same way so
92:12 - when we use any of the authentication
92:13 - hooks from that Library we need to pass
92:15 - it our Firebase auth instance which is
92:17 - what we created in that client app file
92:20 - right here and that is basically how we
92:22 - link our specific app to the hooks so
92:25 - we're going to need to import both of
92:27 - these so I'm going to try to Auto Import
92:28 - this
92:31 - um okay for some reason it's not wanting
92:33 - to Auto Import which I don't understand
92:35 - but sometimes that happens import from
92:38 - react
92:40 - Firebase hooks slash odd
92:44 - use create user with email and password
92:46 - and underneath that I'm going to import
92:49 - our clock instance from
92:52 - it's going to be all the way up in
92:53 - Firebase
92:56 - Client app
92:59 - grab that auth object and now it should
93:01 - be happy so this hook returns to us four
93:04 - different variables the first one is the
93:06 - actual function that's going to be used
93:07 - to create the users we're going to pass
93:09 - this our email and password then once
93:12 - this successfully completes it returns
93:14 - to us a user and then there is loading
93:16 - and error state which helps track the
93:18 - progress of this function so if this
93:21 - thing is in progress this will be true
93:22 - if it errors out then this will happen
93:25 - and we can use these two things to
93:27 - modify our UI to make it clear to the
93:29 - user what is going on so this is where
93:32 - we're actually going to call that
93:33 - function so I'm going to type out create
93:35 - user with email and password and the
93:36 - arguments we're going to pass are going
93:38 - to be our signup form dot email and our
93:41 - signup form dot password so let's
93:43 - quickly add form validation to check
93:45 - that a valid email hasn't entered and
93:47 - that the password that the user enters
93:48 - in the password and confirm password
93:50 - Fields match and actually
93:53 - um because we put the type of email on
93:56 - this input HTML by default should handle
94:00 - the case of an event on email and is
94:02 - once you check that the email actually
94:03 - contains the at sign which is what we're
94:06 - going to consider a valid email I think
94:08 - there's some libraries that exist that
94:09 - will check that it's like a valid domain
94:11 - and stuff but for the purpose of this
94:12 - tutorial I think that's simply checking
94:14 - for the ad signed is completely fine so
94:17 - the only thing we need to handle them is
94:19 - if those passwords match so we're going
94:21 - to say if signupform dot password is not
94:24 - equal to signupform dot confirm password
94:27 - let's set an error and how are we going
94:30 - to set that error well we're going to
94:32 - need to create another state variable so
94:34 - we're going to create a state variable
94:35 - called form error we can't use the
94:37 - keyword error because this is being
94:39 - taken by that there
94:42 - actually what we're going to do is
94:43 - change the name of this to user
94:46 - error it doesn't have to be specifically
94:48 - error because the hook is just going to
94:50 - return four parameters it doesn't care
94:53 - what the name is the fourth one though
94:54 - is going to be the error so I'm just
94:56 - going to give it a name of user error
94:57 - that way up here I can use the more
95:01 - general term error I'm going to say set
95:04 - error
95:05 - up here
95:06 - and this is going to be use State and
95:09 - we're going to set it as an empty string
95:10 - to start off
95:12 - and then we can come and actually remove
95:15 - this comment here and actually set error
95:17 - to be passwords do not match
95:21 - and I'm just going to return out of the
95:23 - function because we do not want to
95:24 - proceed with this if they and if their
95:27 - passwords do not match all right and
95:29 - let's open up our modal and what I'm
95:31 - going to quickly do is just add that
95:32 - error text here if it exists so I'm
95:34 - going to add some text in here that's
95:35 - going to say here is here
95:38 - just so we can see what it looks like
95:39 - and I'm going to make the text align to
95:42 - be Center and the color
95:45 - red because red means error usually and
95:49 - then I'm going to change the font size
95:50 - to just be a bit smaller
95:52 - 10. perfect and we do not want to
95:56 - actually say here's the error let's
95:58 - actually put in here our form
96:00 - not former we actually need to be there
96:02 - perfect and then uh to make this even a
96:05 - bit cleaner I'm going to say error and
96:08 - depth text and basically that's just
96:09 - saying don't display this text unless
96:11 - this exists so now let's try to submit
96:13 - our form
96:15 - and you can see that those required
96:17 - things on our inputs are doing their job
96:19 - they're making sure that text actually
96:21 - exists and I believe that if I enter a
96:24 - thing that does not have the at 10 in it
96:26 - it should give us that that thing yeah
96:27 - so it's saying uh it's saying it's not a
96:29 - valid email address so this this
96:31 - component handles that for us which is
96:33 - super nice but let's make sure if we do
96:35 - enter a value email like shady shady.com
96:38 - and I enter passwords that do not match
96:40 - do we get that error and yes we do now
96:44 - you'll notice that when I submitted that
96:45 - the page refreshed and that is what
96:48 - happens by default on form submittal uh
96:52 - in order to prevent that we need to take
96:54 - the submit event and call the method
96:57 - prevent default so what we're going to
96:59 - need to do is take in the event as an
97:00 - argument the same way is kind of what we
97:02 - did down here how the function
97:04 - implicitly took in an event and then
97:06 - we'll have access to all of the methods
97:08 - on that event so I'm going to create
97:11 - that argument here and the type of this
97:14 - is going to be react dot form event
97:16 - because it is a form event it's no
97:18 - longer a change event and the type of
97:21 - HTML element that is producing this
97:23 - event is the HTML form element and now
97:26 - since we have that typescript type there
97:28 - we get intellisense with all of the
97:31 - methods that exist for that specific
97:32 - event and I can call event dot prevent
97:35 - default and now if I try that again
97:37 - it's about email
97:41 - passwords that do not match sign up
97:43 - passwords do not match perfect and what
97:46 - I'm going to do also is that when the
97:47 - form is submitted I'm going to check if
97:49 - there is an error and if there is then
97:51 - I'm going to set it to an empty string
97:53 - because we kind of want to reset the
97:55 - error every time we try to submit the
97:57 - form and you could add some other stuff
97:59 - as well to make sure that the password
98:01 - length is like six characters and
98:03 - doesn't contain these characters and
98:04 - contains blah blah blah but uh again
98:06 - that's kind of not necessary for this
98:09 - project but feel free to add whatever
98:11 - you'd like in terms of validation all
98:14 - right and one last thing that we're
98:15 - going to quickly do before trying to
98:16 - submit a user is I'm just going to use
98:18 - this loading State quickly on our button
98:20 - and I can't remember if I explained this
98:23 - when we were creating the button but a
98:26 - beautiful thing with chakra UI is that
98:28 - with their buttons and I think with all
98:30 - of their components we can add an is
98:31 - loading prop to the component and we can
98:34 - pass it a Boolean which will show a
98:37 - loading state if Boolean is true so for
98:39 - example if I say true it will show
98:41 - orthologic state so in this case our
98:43 - Boolean is going to be that loading
98:45 - Boolean provided by that hook because
98:48 - the status of this is going to be
98:49 - toggling from true and false depending
98:51 - on what the hook is up to
98:53 - so let's give this a go and see what
98:56 - happens so I'm going to go over to our
98:58 - Firebase project and go to
98:59 - authentication because that's where our
99:01 - users are going to show up if they are
99:03 - successful and actually I'll just click
99:05 - get started here because I didn't do
99:07 - that before all right so okay so I'm
99:09 - glad I checked this before because what
99:11 - we need to do is actually enable the
99:13 - specific authentication methods that
99:15 - we're going to be using so in this case
99:16 - email and password and then later in
99:18 - just a few minutes we're going to do
99:19 - Google so let's click on email and
99:21 - password and let's click enable and then
99:24 - mobile save that and that Firebase is
99:26 - actually going to allow us to create
99:28 - users with email and password so let's
99:30 - go ahead and give that a spin and if it
99:31 - works we should see that user show up
99:33 - inside of our users column here so let's
99:36 - go back to our app we will refresh to
99:39 - sort of reset everything let's open up
99:41 - our modal and let's enter Shady
99:44 - shady.com I'm going to make the password
99:46 - chatty
99:48 - and let's see what happens we can see
99:50 - that loading State you see how it
99:52 - toggled there that was the hook changing
99:54 - status uh we don't get anything on the
99:56 - UI because we haven't done anything if
99:58 - it worked I'm assuming it did let's go
100:00 - check our Firebase authentication so I
100:02 - will need to refresh
100:05 - and look at that we do have a user in
100:08 - there with the email shabby chatty and
100:10 - that is how easy it is to create users
100:12 - with these Hooks and Google securely
100:15 - stores these users and encrypts our
100:18 - passwords so we don't have to worry
100:19 - about any of that on our own we can just
100:21 - focus on actually the fun parts of our
100:23 - app so thank you to anyone who has
100:26 - contributed to these amazing libraries
100:28 - all right you guys now I briefly want to
100:30 - show you how to do error handling with
100:33 - Firebase in the rare event that an error
100:35 - occurs I know it's not the most exciting
100:38 - thing error handling is never that fun
100:40 - but it is really good to know how to do
100:41 - it to make your app more robust so let's
100:44 - quickly do that so the first error that
100:46 - you might think of is what happens if we
100:49 - try to sign up a user that already
100:51 - exists in the case of shady here we
100:54 - already have a user that has been
100:56 - authenticated with shady.com what
100:59 - happens if you try to sign up again
101:01 - uh let's take a look
101:04 - we get some sort of error here and if we
101:07 - look more closely at it we can figure
101:09 - out maybe what's going on
101:12 - okay so let's
101:13 - bring that open I'm going to zoom in uh
101:16 - it might be a bit small for you wow this
101:18 - is painful to get this thing to expand
101:21 - why won't this expand
101:23 - I look like a tool right now trying to
101:26 - get this thing open
101:27 - okay what I'm going to do okay this is
101:29 - all we really need to see we can see
101:31 - that we got a 400 error which means bad
101:33 - request so Firebase just said that you
101:35 - tried to create a new user but a user
101:37 - with that email already has been created
101:39 - so we somehow need to just update our UI
101:41 - to indicate that to the user so the way
101:44 - we're going to do that is actually
101:45 - through this user error variable given
101:48 - to us by the hook so the way I'm going
101:49 - to illustrate what this error actually
101:51 - looks like is if I come down here to
101:54 - where we're actually rendering the error
101:55 - which was right here I'm going to what
101:57 - I'm going to do is just add an or
101:59 - statement that says or user error and an
102:02 - error in this case is
102:04 - the error we are setting with that state
102:06 - variable uh if there's a contained valid
102:08 - password and user error is going to be
102:10 - the actual error returned from Firebase
102:13 - authentication so what we're going to do
102:15 - is we're going to say okay if error or
102:17 - user error let's show some text that
102:19 - shows that error I can also add an or
102:21 - statement here and I'm going to type
102:23 - user error and I'll notice that it has a
102:24 - property called message and this is the
102:26 - thing we want to access on the error
102:27 - okay so uh let's try to log in with
102:30 - shadyashady.com
102:34 - and see what happens so we successfully
102:36 - show the error on the UI Firebase error
102:39 - off email already in use but that's kind
102:41 - of like weird to show to the user maybe
102:42 - we want to show like more meaningful
102:44 - text and I want to show you how to do
102:46 - that with Firebase if you are totally
102:48 - fine with this then like feel free to
102:51 - leave it I just want to show you how to
102:52 - potentially display a more meaningful
102:54 - message so inside of Firebase I'm going
102:57 - to create a new file called errors
103:01 - Dot TS and in here we're going to put
103:04 - pretty much all the Firebase errors
103:05 - we're going to come across which is not
103:07 - going to be that many there's only like
103:09 - a few but basically what we're going to
103:10 - do is create an object
103:12 - called Firebase errors and that's going
103:16 - to contain
103:18 - these these messages as keys
103:21 - we're going to take this key and map it
103:24 - to a more useful error message so for
103:27 - example if the Firebase error is that
103:30 - hot email already in use thing we can
103:33 - return a text that says a user with that
103:36 - email already exists that's much more
103:39 - meaningful to the user and now what
103:40 - we're going to do is inside of that
103:42 - signup form I'm just going to go and
103:44 - import those Firebase errors I'm going
103:47 - to copy this line down here because it's
103:49 - going to come from slash Firebase errors
103:52 - then we're going to grab that Firebase
103:54 - errors object
103:56 - and then what we're going to do is where
103:58 - we were rendering this user error
104:00 - message that is now going to be a key of
104:04 - the object Firebase errors and this is
104:07 - how we can actually access that more
104:08 - meaningful error message right because
104:10 - and I'll address this uh red underline
104:12 - in a second but if we just go back to
104:14 - errors we can see that if we try to
104:15 - access the object at that error.message
104:17 - it's going to give us this in return
104:20 - which is a very useful message okay so
104:22 - I'm just going to briefly attempt to
104:24 - address what is going on here it's kind
104:26 - of a weird texture thing and we need to
104:27 - be more specific of what type it is that
104:30 - we're trying to use to index that
104:33 - particular object basically all we're
104:35 - going to do is take the user Dot message
104:38 - and Typecast it to a valid index of that
104:43 - object and all type casting is is just
104:45 - taking a variable and changing its type
104:47 - to a new type so the way to Typecast in
104:50 - typescript is to take that variable and
104:53 - then write the word as and then write
104:55 - the new type this is kind of confusing
104:57 - because there's key of and type of here
104:59 - and if this does not really make sense
105:00 - to you right now do not worry we're
105:02 - going to see this a few times throughout
105:03 - the project so just kind of accept this
105:05 - for now I really really dislike telling
105:07 - people to just accept things when I'm
105:09 - teaching but in this case I just don't
105:11 - think this is something to get caught up
105:13 - on and this will become a lot more clear
105:14 - when we start defining our own types and
105:16 - interfaces with like posts and
105:17 - communities and stuff so now we can do
105:19 - is we see that we're getting a more
105:21 - meaningful message there which is great
105:23 - let's try to trigger the other one yeah
105:25 - passwords do not match but the styling
105:27 - changes but I think there's just
105:29 - something going on with the logic here
105:30 - okay so the formatting kind of messed up
105:33 - my logic here
105:35 - and
105:38 - so I'm going to remove these brackets
105:39 - and I think to prevent that from
105:41 - reformatting improperly I just need to
105:43 - add brackets around that so this is a
105:46 - single Boolean here okay and now we can
105:49 - see that we are getting the proper error
105:51 - there awesome and if I just try one more
105:52 - time
105:54 - we can see that we get the other error
105:56 - so now errors are handling both of our
105:57 - cases which is great all right and one
105:59 - thing I actually decided that I want to
106:01 - do to make this a bit more readable
106:03 - because this is kind of confusing I'm
106:04 - just going to get rid of this outer
106:06 - logic here and I'm going to just
106:07 - simplify it to
106:08 - this and this is just going to do the
106:11 - exact same thing as it was before it
106:13 - just is a bit more readable okay so that
106:16 - is enough about errors I've had it with
106:17 - errors for now let's go do something
106:19 - more exciting all right so now that we
106:21 - have been able to successfully create
106:23 - users with email and password via back
106:26 - use create user with email and password
106:27 - hook let's go now Implement oauth and
106:30 - log our users in with Google using the
106:34 - similar hook uh use assignment with
106:36 - Google and now that we've been able to
106:38 - use one of these hooks we can use them
106:39 - all they're all so similar in terms of
106:42 - functionality and that is what I love
106:43 - about this Library so we're going to go
106:46 - to our oauth buttons which if you recall
106:49 - is a section here and we are going to
106:51 - implement the pretty much same structure
106:53 - in this file so at the top we're going
106:55 - to import
106:59 - from react Firebase hooks off this time
107:02 - though we're going to grab that use
107:05 - sign in with Google function and again
107:08 - we're going to need to import our
107:10 - Firebase auth instance from The Client
107:12 - app file Firebase slash Client app grab
107:17 - off
107:18 - and inside of this file we're going to
107:21 - do pretty much the exact same thing as
107:23 - we did in the other file we're going to
107:25 - call that hook and say use sign in with
107:27 - Google and we're going to path it pass
107:29 - it our auth object and before arguments
107:32 - this time are going to be sign in with
107:33 - Google
107:35 - user loading and error
107:39 - awesome
107:41 - so a very similar structure as before
107:43 - and now all we need to do is add an on
107:45 - click event handler to our button and
107:49 - that will be it I'm going to add the is
107:50 - loading property to our button and then
107:54 - I'm going to add that on click
107:56 - and we're going to give it a callback
107:58 - function and all this is going to do is
108:00 - call sign in with Google that is it
108:05 - let's also actually quickly add some
108:08 - text from Chakra that is going to
108:11 - display that error if it exists we will
108:14 - say error and error if it exists
108:19 - awesome so what is going to happen when
108:21 - we click on this button let's find out
108:24 - so if I click sign in with Google this
108:27 - pop-up is going to pop up
108:28 - and we get some error what is going on
108:31 - here I think the reason that this failed
108:33 - is because we hadn't we have not yet
108:36 - implemented Google authentication in our
108:39 - app and this is something I always
108:40 - forget to do if we come over to sign in
108:43 - method we need to click on add new
108:45 - provider remember we added email and
108:46 - password and let's click on Google and
108:49 - let's click enable
108:51 - and
108:53 - I'm just going to select the email
108:54 - address that I have that I am currently
108:56 - logged in as we can ignore the stuff
108:58 - down here this is for reusing an
109:00 - existing client ID from an already
109:02 - existing Google project and we will
109:04 - click on Save
109:07 - perfect okay so now Google is
109:10 - successfully enabled in our project we
109:12 - should be able to refresh our app and
109:14 - try again but actually let's fix this
109:16 - first this is a react error and
109:18 - basically what's happening is error is
109:20 - an object and we cannot render an object
109:21 - in the Dom we need to render only text
109:24 - so I'm going to just do error Dot
109:27 - message
109:29 - so let's try this again let's refresh
109:33 - all right
109:34 - um what is this
109:38 - um I honestly don't know what's going on
109:39 - here at render element
109:45 - hmm he's gonna have to do this error
109:48 - let's do localhost 3000
109:52 - okay I'm gonna just try re-compiling the
109:55 - development server sometimes I'm not
109:57 - sure why there's Sometimes some errors
109:59 - with like hot reloading and um just
110:02 - simply re-compiling the server can fix
110:05 - it and that seemed to do it also this
110:08 - error right here you might see in here
110:09 - is saying that there's a duplicate atom
110:11 - key auth modal State
110:13 - um this also has to do with the hot
110:15 - reloading it says that um if it is it is
110:19 - safe to ignore this if it occurred
110:20 - because of a hot module of replacement
110:21 - and that is why it's occurring in this
110:23 - case basically it just thinks that
110:24 - there's uh two of the same atoms but
110:27 - there is not so just kind of ignore this
110:29 - for now so we can probably re-enable
110:30 - this
110:32 - and let's go to sign up click sign in
110:36 - with Google
110:37 - this should pop up over here and if your
110:39 - Gmail account isn't showing up by
110:41 - default there like mine is just click on
110:43 - the use another account and it might ask
110:44 - you to enter your email and password and
110:46 - authenticate that way and I'm going to
110:48 - click Shad Mary gmail.com
110:51 - and we should be authenticated now again
110:54 - we're going to do some stuff on the UI
110:55 - that's going to handle the successful
110:58 - case but let's go look at our
110:59 - authentication users and you can see
111:01 - that I am in there and it says that I
111:03 - have used the Google provider so that's
111:05 - pretty cool and this is it this is it
111:07 - guys for this entire file a lot buttons
111:09 - this is how easy it is to sign in with
111:12 - Google and if you want to add more
111:13 - providers and more buttons like apple
111:15 - Facebook whatever you want you know how
111:17 - to do it now with a single line of code
111:20 - so pretty cool if you ask me and the
111:22 - nice thing about continuing with Google
111:24 - or any oauth provider is that it handles
111:27 - both the case of a new user and a
111:29 - returning user with authenticating with
111:31 - email and password we have to handle the
111:33 - signing up case as well as the logging
111:35 - in case so now let's go Implement our
111:37 - login method so that users who did sign
111:39 - up with email and password can log in
111:41 - with those credentials the login logic
111:44 - is going to be very very similar to the
111:46 - sign up logic we're going to have this
111:48 - on submit function and we're going to
111:49 - bring in that use sign in with email and
111:54 - password I'm going to copy this over
111:58 - bring it into our app
112:00 - the only thing that's going to be
112:01 - different here is we're going to pass it
112:03 - the email and password in the login form
112:06 - so let's go to the top and grab those
112:08 - two imports from react
112:11 - Firebase hooks slash auth we're going to
112:13 - grab sign in with email and password and
112:17 - we're also going to grab
112:20 - our Firebase auth instance from
112:24 - Firebase Client app
112:27 - grab off and that will be happy there
112:29 - again same thing with the four arguments
112:32 - except this time we have sign in with
112:33 - email and password so inside of our on
112:35 - submit function we're going to take in
112:37 - the exact same event as we had in our
112:40 - sign up form and I'm just going to go
112:41 - copy and paste that over the react form
112:43 - event I'm going to grab this entire
112:45 - thing right here
112:47 - bring it into login
112:50 - inside of this function I'm going to
112:51 - call event dot prevent default to
112:53 - prevent that refresh of page on
112:55 - submittal and all we're going to do
112:57 - inside of this function is call sign in
113:00 - within our password and pass it the
113:03 - login form whoops the login form
113:07 - dot email and login form dot password
113:10 - and this function is going to go check
113:12 - if a user with that email exists and if
113:15 - the password is correct and in our login
113:18 - form we actually do not need to create
113:19 - another error State variable like we did
113:22 - in sign up and sign up we had to check
113:24 - to make sure that the password is
113:25 - matched and in this case we do not need
113:27 - to do that and our HTML input element is
113:30 - going to verify that the email is valid
113:33 - so we do not need our own custom errors
113:35 - here the only error that could exist in
113:37 - the login form is going to come from
113:39 - Firebase so we're just going to be okay
113:40 - with using a single error object here
113:42 - all right and let's go down and add the
113:45 - error text that could possibly occur I'm
113:47 - going to open up our app here so it's
113:49 - going to appear over here very similarly
113:51 - to sign up just about the button here so
113:54 - we're going to have some text so inside
113:56 - of our text we're going to access that
113:58 - Firebase errors object and I'm just
113:59 - going to automatically import it here
114:00 - and inside of here we're going to need
114:03 - to index it the exact same way we did in
114:05 - sign up using that complicated
114:07 - typescript indexing stuff so we're going
114:10 - to say error Dot message
114:13 - as key of type of
114:16 - Firebase errors that should compile
114:21 - nicely and actually I can't remember if
114:23 - I added the login errors to this object
114:25 - let's go look I think I might have but
114:27 - then I deleted it yeah okay so I think I
114:29 - added these
114:30 - um at some point during sign up but then
114:33 - I removed them because I wanted to wait
114:34 - until I got to this point of the
114:36 - tutorial I I can't remember if
114:38 - if I showed you that I put these in here
114:40 - these are coming from my existing
114:43 - repository you can grab them off of
114:44 - GitHub so Firebase has two types of
114:47 - Errors for logging in the first one is
114:51 - if the user is not found meaning that a
114:52 - user with an email does not exist and
114:54 - the second one is if the wrong password
114:56 - has been entered for an existing email
114:58 - you're technically not supposed to tell
115:00 - the user which one it is because it
115:03 - could be a malicious user you're
115:04 - supposed to be kind of vague
115:06 - um what I did here was for both of those
115:09 - types of Errors we're going to just show
115:10 - the same error invalid email or password
115:13 - so that we can cancel that off and we
115:15 - can test this out by trying to log in
115:17 - with an unexisting email so for example
115:20 - I know that the email Doug at doug.com
115:25 - is not a user so if I enter a password
115:27 - and I try to submit I do get an error
115:30 - invalid email or password I do need to
115:32 - style it here quickly so I'm just going
115:34 - to do the text align
115:36 - is equal to Center and the color is
115:39 - going to be red
115:41 - perfect and font size is going to be 10
115:45 - 10 points 10 point yeah just like that
115:47 - perfect and also uh before I forget I'm
115:51 - just going to add the is a loading state
115:52 - to our button because I noticed it
115:55 - didn't
115:56 - um it didn't work there we did get the
115:58 - correct error there though which is
116:00 - perfect let's try logging in with Shady
116:02 - shady.com now we're going to get the
116:05 - other error because I'm going to enter
116:07 - the wrong password the password for this
116:08 - is Shady I'm going to enter giant string
116:11 - we should get the same error so now we
116:13 - know both errors are working let me try
116:16 - if I log in as
116:18 - Shady but I put the correct password
116:20 - what happens cool we didn't get an error
116:23 - we haven't done these stuff to handle
116:26 - what happens when you successfully
116:27 - logged in yet but we now know that error
116:29 - handling is working and now it looks
116:32 - like we can actually log in to existing
116:34 - accounts so this is perfect we can
116:35 - create users with email and password we
116:37 - can log those users in and we can also
116:40 - log in with Google so we've covered all
116:42 - of these sign in sign up methods of
116:44 - Firebase authentication and now we just
116:46 - need to actually do something useful
116:48 - with that user once they have logged in
116:50 - to tell them that they have logged in so
116:52 - let's handle that next all right you
116:54 - guys so now that we are able to
116:55 - successfully log users in let's look at
116:58 - how we can actually obtain the logged in
117:00 - user and do something useful with it so
117:02 - if we go take a look at those
117:04 - authentication hooks from react Firebase
117:06 - hooks we can see that the very first one
117:08 - is called use auth State and this is
117:11 - actually how we're going to obtain the
117:12 - currently logged in user and so this
117:15 - hook looks like this it's implemented
117:17 - like it is here and it returns three
117:19 - arguments the user loading and error so
117:23 - it's initialized as null and once a user
117:26 - is authenticated we will then actually
117:28 - have access to it through this same
117:31 - object here so let's go take a look at
117:34 - how that's going to work when we log in
117:36 - first thing we're going to need to do is
117:38 - close the modal right because once you
117:40 - log in you're kind of done with the
117:42 - modal so let's go look at how we're
117:43 - going to do that what we're going to do
117:44 - is inside of the file auth model we're
117:48 - going to call that hook use odd state so
117:51 - I'm going to write it like this use auth
117:53 - State and I'm going to import it from
117:55 - react Firebase Hooks and we are going to
117:57 - need to pass it our auth instance again
117:59 - from Firebase client tab so import both
118:01 - of those things and then we're going to
118:03 - grab those three arguments so the user
118:05 - loading and error
118:07 - perfect so again this is going to be
118:10 - null initially and this will be true
118:12 - because it's going to go check if there
118:14 - isn't currently authenticated user uh
118:16 - and then once this is done loading we're
118:18 - either going to have a user or not
118:19 - depending on if they're authenticated so
118:21 - how are we going to actually close the
118:23 - model if there is a valid user well what
118:26 - we can do is we can bring in the use
118:28 - effect hook which is a hook that runs
118:30 - when the component mounts as well as
118:32 - when any of the dependencies change and
118:34 - we can add a dependency
118:36 - of user and so basically what's going to
118:38 - happen is this code is going to trigger
118:40 - every single time the user object
118:43 - changes and what we want to do if the
118:45 - user changes from null to a valid user
118:49 - if you look up here we have a function
118:51 - that closes the modal so if the user
118:53 - object is not null we can just simply
118:55 - call that function
118:57 - and now Watch What Happens the model
118:58 - just closed once they refresh because
119:00 - there is a valid user because I logged
119:02 - in already you need to wait we're going
119:04 - to need a way to sign out
119:06 - um but yeah this is essentially how we
119:08 - can actually close the modal
119:10 - and let's actually just add a console
119:12 - log of what the user actually looks like
119:14 - so we can see
119:16 - ourselves you can see that it's being
119:18 - logged in the console it is a valid user
119:21 - it has the email
119:23 - shady.com and all this other data that's
119:26 - not really relevant so even though we
119:28 - have a user that is logged in we are
119:30 - still showing the login and sign up
119:32 - buttons it'd probably be more useful to
119:33 - show something else because on Reddit
119:35 - that's when all those icons appear and
119:37 - that's when you actually have the option
119:38 - to log out so let's go to the parent of
119:41 - those buttons so what is rendering auth
119:44 - buttons I believe it is write content
119:46 - okay so inside of here you're basically
119:48 - going to check if there is a user and if
119:51 - there is a user so we're going to add a
119:53 - ternary operator here we're going to say
119:55 - if there is a user
119:57 - we're going to show some component
120:00 - that says there is a user
120:03 - um and if there's not we're going to
120:05 - want to show the authentication buttons
120:07 - right because you need to because the
120:08 - user does not exist so where is this
120:10 - user going to come from
120:13 - well what I'm going to do is I'm going
120:15 - to go to our nav bar and I'm going to
120:17 - again use that use odd State hook
120:20 - because we can use it wherever we want
120:22 - it's a hook that we have access to
120:23 - throughout our entire application so we
120:25 - can get access to our currently logged
120:28 - in user wherever we want right so that's
120:30 - what makes this hook so useful if you
120:32 - want to say use auth State again we're
120:33 - going to need to import those two things
120:35 - uh I'll use auth State and or auth
120:38 - object grab the user loading
120:41 - and error
120:42 - now we're going to pass our user to
120:44 - multiple components that's why I'm using
120:46 - it in the nav bar because I'm going to
120:48 - pass it to our search input and our
120:49 - right content you could technically call
120:51 - this Hook from both with inside of
120:53 - search input and with inside of the
120:54 - right content but since we're going to
120:57 - pass it to both I feel like it's better
120:59 - to just call the hook once and then pass
121:00 - it as a prop to these two things so
121:02 - we're going to pass our user to the
121:04 - right content component so let's add it
121:06 - as a prop user is equal to user and
121:09 - we're going to see this red underline
121:10 - here and that is because we need to go
121:12 - into our write content component and
121:14 - actually Define an interface for our
121:16 - prompt and that is a typescript thing so
121:19 - that's where we're actually going to use
121:20 - this I don't know if you remember I said
121:21 - we're eventually going to take in a user
121:22 - so if I if I comment that back in what I
121:25 - need to do now is because this component
121:28 - is a functional component that takes
121:31 - input of type right content props how
121:34 - I'm going to actually get that value
121:35 - into my component is if I open it up
121:38 - here and say user and basically just
121:40 - destructuring the props I could also
121:42 - write it like this if I wanted to and
121:45 - then I would just access props
121:48 - dot user but I prefer to write it in a
121:51 - destructured method I think it's just a
121:52 - bit cleaner okay so let's save this
121:54 - let's go back to here and we'll notice
121:55 - that that redundant line is gone because
121:57 - because typescript knows this component
121:59 - is expecting a prop called user so we
122:01 - can save this and check that out we now
122:03 - know that there is a user because we
122:05 - pass it in and we added that term every
122:07 - operator uh we're going to make we're
122:08 - going to make this its own component
122:10 - eventually but right now let's just add
122:12 - a button that will log the user out just
122:14 - so we can test this functionality that
122:16 - I'm talking about so let's just add
122:17 - let's just make this a button from
122:20 - Chakra and it's going to say log out
122:24 - and on click I'm going to call
122:28 - the sign out method
122:31 - from Firebase and if you go to your Auto
122:34 - Imports you're going to import this from
122:36 - Firebase slash auth and this is how easy
122:39 - it's going to be to sign out why is this
122:42 - oh I think we also need to pass in our
122:45 - auth object to this thing from Client
122:47 - app
122:48 - okay now we have a button that's going
122:50 - to hopefully log us out so let's click
122:52 - on that and you'll see that that is
122:54 - going to sign us out it's going to clear
122:56 - that auth state so that when so that now
122:59 - user is going to be null if I sign back
123:01 - in
123:04 - as uh Shady shady.com
123:07 - with the password Shetty and again the
123:10 - model closes and we can see that it is
123:13 - detecting that user and we're going to
123:15 - change this logout button to an actual
123:17 - like drop down menu if you go to
123:18 - reddit.com you'll see that it's your
123:20 - logged in there's a drop down menu and
123:22 - that's what we're going to add shortly
123:24 - and we're going to be able to log out by
123:25 - actually adding the logout option there
123:27 - we go that is uh that is literally how
123:29 - we access the user we're going to use
123:31 - this hook a lot because we're going to
123:33 - need access to our user in a lot of
123:34 - places and this hook makes that super
123:36 - easy and what's nice about this use auth
123:38 - Hook is that it persists the user login
123:40 - on refresh as well as if the user were
123:42 - to come back to your website in a few
123:44 - days if I refresh the page here for
123:46 - example
123:47 - we can see that initially for a brief
123:49 - second there it uh there was a null user
123:52 - and you can see that in the logs here so
123:53 - state is initially null but then it goes
123:55 - and context the Firebase servers and it
123:57 - finds that oh there actually is someone
123:58 - authenticated so we will be logged into
124:01 - our application automatically all right
124:03 - so the only part of the authentication
124:04 - flow that we have left to cover is
124:06 - resetting of the password and what
124:08 - that's going to look like is this so I
124:10 - just spun up the localhost on my
124:12 - completed project and just to show you
124:14 - what it's going to look like and what
124:16 - I've actually decided to do for this
124:18 - section of the tutorial is just make the
124:20 - minor architectural changes to our model
124:23 - to actually show this component and then
124:26 - I'm just going to paste in my already
124:28 - written reset password component and I
124:30 - will explain the critical parts of it
124:33 - pretty much the exact same thing as what
124:34 - we've already seen so I just didn't
124:35 - think it was worth covering the entire
124:37 - thing and then what you can do is just
124:38 - grab the code for this component off of
124:40 - my GitHub and paste it into your
124:42 - component all right so we're just going
124:43 - to quickly add some text beneath this
124:46 - login button that allows you user to go
124:48 - to the reset password form if they did
124:50 - forget their password so I'm just going
124:52 - to again grab that from my other repo
124:55 - and paste it into our login component
124:57 - and I will explain everything it's just
125:00 - very very similar to what we've already
125:01 - seen paste that in there it's a very
125:03 - small section we added to login and
125:05 - basically this is just some text beneath
125:06 - the login button there and on click
125:08 - we're going to do same thing that we're
125:09 - doing here except with the reset
125:11 - password view so I'll paste that in
125:13 - there and I'm going to make this reset
125:15 - password and thanks to typescript we did
125:17 - autocomplete perfect okay so now let's
125:20 - go to our modal because we need to make
125:22 - some changes to this logic in here and
125:24 - actually render our reset password
125:26 - component all right so what I'm going to
125:28 - do is I'm just going to come up here and
125:29 - write some JavaScript that's going to
125:30 - allow us to conditionally display these
125:32 - form components and what that's going to
125:34 - look like is it's going to say
125:35 - modelstate.view
125:37 - is if this is equal to login or the
125:40 - motostate.view
125:42 - is equal to sign up let's show something
125:46 - and if none of those are true then let's
125:49 - show something else and that's something
125:50 - else is going to be this reset password
125:52 - like right because our model only has
125:53 - three views if we're not logging in or
125:55 - signing up we are going to be resetting
125:57 - our password
126:01 - and I'm going to move all of this up
126:04 - here and then I think I just need to
126:06 - wrap this in a fragment because we
126:09 - because it needs a parent component of
126:11 - some kind and we have not yet created
126:13 - reset password so let's go and do that
126:15 - inside of our auth folder I'm going to
126:18 - create that component reset
126:20 - password
126:23 - all right and this is where I'm going to
126:24 - paste in my already written component
126:26 - from my completed project and explain
126:28 - the important parts a lot of it is just
126:30 - styling a UI component so I just didn't
126:32 - think it was worth the time to do that
126:33 - hey guys I am just editing this part of
126:36 - the video and I noticed that I did not
126:37 - mention to install react icons as you
126:40 - see online for there this is the main
126:42 - package we're going to be using for
126:43 - icons so just install this with the
126:45 - command here and this should work
126:47 - smoothly and let's make sure we can
126:49 - actually successfully see this so I'm
126:50 - going to click on my Auto Import and add
126:53 - that import click save and if I just go
126:56 - to my UI reset password we do see that
126:59 - form in there now so the most important
127:01 - part is right here we're using that use
127:03 - send password reset email Hook from
127:05 - react Firebase Hooks and we're again
127:07 - passing it that auth object that we
127:09 - created and then we're just calling that
127:10 - function when we actually click on that
127:12 - reset password button and we're just
127:14 - passing it the email that the user
127:15 - enters and this is going to actually
127:18 - send an email to that email and once
127:21 - that successfully sends it's going to
127:22 - set success to be true and the success
127:24 - State variable basically just is
127:26 - something that so that on the UI we can
127:28 - say oh go and like the email was
127:30 - successfully sent go and check your
127:31 - email and in order to demo this I do
127:33 - need access to an email that is real and
127:35 - that I actually have access to and I'm
127:37 - signed in so in order to do that I'm
127:38 - just going to go and delete my shadmare
127:40 - hey gmail.com because I authenticated
127:42 - with Google there and in order to show
127:44 - this password resetting process I need
127:47 - to create an account with my Shad Mary
127:49 - email by using email and password
127:51 - authentication not a lot shout out is
127:54 - not a real email all right so now that
127:56 - there is no account with Chad Mary
127:57 - gmail.com I'm going to go and create one
128:00 - with email and password authentication
128:01 - and make the password chatty
128:04 - and I'm going to create that account now
128:07 - I'm going to log out and then I'm going
128:09 - to try to log in but oh I already forgot
128:11 - my password so I better reset it so I
128:14 - click reset and if I enter Shadowmere
128:16 - gmail.com click reset password this is
128:18 - its functionality so it's going to say
128:20 - check your email I'm going to go to my
128:22 - email and I'm just going to show you how
128:24 - this works so that if you get this going
128:26 - on your app you know how it should
128:27 - option and this is what the email
128:28 - actually looks like zoom in a bit it
128:31 - sends me a link from our Firebase app if
128:33 - I click on this link
128:34 - it brings me into a form and it's saying
128:36 - reset your password so if I reset my
128:38 - password to say Shady Mary my full name
128:40 - I click enter it says password change
128:42 - and Firebase handles all the heavy
128:44 - lifting of changing your password and
128:46 - now if you go back to the app I should
128:48 - be able to log in with that new password
128:50 - so I'm going to try logging in with my
128:51 - old password to show you that it's
128:53 - already updated Shady did not work but
128:55 - if I use my new password chatty Mary it
128:58 - works
128:59 - so my password has been reset I'm going
129:02 - to leave it there for password resetting
129:03 - again it's super similar to the other
129:05 - processes in terms of using the hooks
129:07 - and building up the UI component and I
129:09 - really do want to and I'm sure you do
129:11 - too want to move on to more interesting
129:12 - things all right everybody now that we
129:14 - have completed our authentication
129:16 - workflow and we are able to access the
129:20 - currently logged in user let's make
129:22 - those changes to our navbar to reflect
129:24 - what it's supposed to look like when a
129:25 - user is actually logged in which is how
129:27 - it looks right here in the completed
129:29 - project here so if I log out this is
129:32 - sort of what we currently have and then
129:33 - when we log in
129:36 - we will make it up here as this so we're
129:38 - going to have this drop down menu we're
129:40 - going to have these icons and then this
129:42 - other dropping menu over here which is
129:44 - pretty much identical to Reddit so let's
129:46 - get going on that
129:47 - all right so if we recall
129:49 - inside of the nav bar we're already
129:51 - grabbing that user and so now we can
129:54 - conditionally display things if that
129:56 - user exists so let's start off with
129:57 - write content so write content just as a
130:00 - reminder represents sort of all this
130:01 - stuff over here as well as those
130:03 - authentication buttons log in and sign
130:05 - up so if I go into write content
130:08 - we are going to replace this logout
130:10 - button with a component called icons
130:13 - which is going to be the parent of all
130:14 - of those icons and then down here we're
130:16 - going to have that menu which we're
130:18 - going to bring in from Chakra it's going
130:19 - to be a drop down menu just like we saw
130:21 - over here
130:22 - okay so let's get going on those icons
130:26 - it's pretty straightforward we're going
130:27 - to just import a bunch of icons from
130:29 - react icons also one last thing the type
130:32 - of this I just want to change to user
130:34 - which is the actual proper type and we
130:35 - can import that from Firebase auth and
130:38 - that way we will get autocomplete
130:39 - intellisense when we're trying to access
130:41 - our user and you'll notice that we now
130:43 - have some compiler issue with typescript
130:45 - because this is saying that it says that
130:48 - type user null undefined is not
130:50 - assignable to type user so we indicated
130:52 - that we're passing a user in here
130:53 - because we said that here but it's
130:55 - saying that this could be undefined and
130:57 - it also could be null and so this type
131:00 - of user null undefined is not assignable
131:02 - to the type we gave it so we basically
131:04 - just need to go adjust for that and the
131:06 - way to do that in typescript is for
131:07 - undefined we can just make it optional
131:09 - with a question mark and for null we can
131:11 - use the pipe operator to say this is
131:13 - either going to be a user or null so
131:15 - this whole thing says user
131:18 - or null or undefined indicated by its
131:21 - optional and now this thing is happy
131:24 - okay so let's go into our write content
131:27 - directory and create our icons component
131:29 - icons dot TSX use our snippet and what
131:32 - I'm going to do is paste in all of the
131:34 - icon Imports because there's about six
131:35 - of them I think these are all the icons
131:37 - that we're going to put in there these
131:40 - are all from react icons so we are not
131:42 - going to take in any props to this
131:44 - component so we can remove these
131:47 - and inside of here we're going to
131:48 - basically just return a giant Flex box
131:51 - and this flexbox is going to have two
131:54 - children the first one is going to be
131:56 - another flexbox and then the second one
131:58 - is going to be a react fragment I'm
132:00 - going to explain why we're using a flex
132:01 - here and just a fragment here in just a
132:03 - second so now that we actually have
132:04 - icons here which I'm just going to put
132:05 - some icons text so we can see it let's
132:07 - go to our right content and change the
132:09 - logic here so we're going to replace
132:11 - this logout button with our new icons
132:14 - component
132:16 - import that and so basically this is
132:18 - just saying that if a user is logged in
132:20 - show those icons and if they are not
132:21 - show the login and sign up button
132:23 - perfect so let's go into icons and
132:25 - actually start building that out so the
132:27 - reason I am using a flexbox here and
132:29 - just a fragment here is because if you
132:31 - look at our demo which is based off the
132:33 - real Reddit you can see that the left
132:36 - container of icons
132:38 - right here disappear uh or are not
132:41 - visible on Mobile screen sizes they
132:42 - don't appear until medium screen sizes
132:44 - and so basically we need a flex box here
132:46 - or we need some sort of component to be
132:48 - able to toggle that display whereas
132:49 - these ones are always visible so it
132:51 - doesn't really matter so that's why we
132:52 - need to have a flexbox here and the way
132:55 - to do that is by just adding a media
132:56 - query on the display and that big screen
132:59 - sensor is going to make it none and then
133:01 - at medium screen sizes we're just going
133:02 - to make the display Flex which is going
133:04 - to make it visible
133:06 - so let's actually start building out
133:07 - these icons and this is going to have
133:09 - some other properties as well we're
133:10 - going to make a line to be Center and
133:12 - we're going to make the border right to
133:15 - be one pixel solid and the Border color
133:21 - is going to be Gray 200. all right so
133:24 - each icon individually is going to be
133:26 - its own Flex box with the icon component
133:29 - from Chakra inside of it and the way
133:31 - we're going to use these icons from
133:33 - react icons is by passing in a prop as
133:36 - to our chakra icon component and inside
133:39 - of as we're going to give it one of
133:41 - these icons so this first one is going
133:43 - to be our BS Arrow
133:45 - I don't know why I'm not getting
133:46 - autocomplete Circle and each of these
133:49 - icons is going to have a margin right
133:51 - 1.5 a margin left of 1.5 a padding of
133:57 - one
133:58 - a cursor
133:59 - equal to pointer because they are
134:01 - clickable in order radius of 4 and then
134:05 - when we hover them we're going to add
134:07 - some hover styling and we're going to
134:09 - make the background Gray 200. and this
134:13 - is what that hover effect looks like the
134:14 - reason we applied this Flex container to
134:16 - our icon is so that we can apply this
134:18 - hover effect as well as the Border
134:20 - radius and the display Flex ensures that
134:22 - it is centered in the container perfect
134:24 - so once we've done one icon we can do
134:26 - them all they're all very very pretty
134:28 - much the same so we can just take this
134:29 - and duplicate it we'll start with the
134:31 - three left ones and this one is going to
134:34 - be our i o filter Circle icon which is
134:37 - supposed to represent like creating a
134:39 - poll on Reddit and then this third one
134:41 - is going to be our uh video cam IO video
134:45 - cam outline and now one downside to
134:47 - react icons is they don't have
134:48 - standardized sizes they're not all the
134:49 - same size so sometimes you have to play
134:51 - around with the font sizes to make them
134:53 - appear the same so uh for this first one
134:55 - we're going to give it a font size
134:58 - of 20 and these other two we're going to
135:01 - give a font size of 22.
135:06 - 22 and the way to add multiple cursors
135:09 - is to basically just do
135:10 - um option click you can add as many as
135:12 - you want and type in multiple places
135:14 - which is super cool and now we can work
135:15 - on the right side icons
135:18 - so similar thing these are always going
135:20 - to be visible which is why again they're
135:22 - just in a fragment and I'm going to grab
135:24 - one of these
135:26 - paste it in there
135:28 - and this first one is going to be our
135:30 - chat
135:31 - icon our chat dots and we are going to
135:34 - duplicate this again three times or
135:36 - twice I guess and then the second one is
135:40 - going to be our notifications
135:41 - notifications and the third one is going
135:44 - to be add icon grad for like creating a
135:47 - post perfect and we're going to make the
135:49 - font size of these last three to be 20
135:54 - just because they do appear a bit larger
135:57 - and the way to select duplicate
135:59 - instances of something in this case a
136:01 - repeated 20 is to do um you highlight
136:04 - the first one and then you press command
136:05 - B and that'll highlight all of the next
136:08 - occurrences of that thing I have a I
136:11 - have a video on my top five vs code
136:13 - shortcuts do check that out I think
136:15 - everything I've mentioned so far is in
136:16 - that video so
136:17 - um yeah maybe you go stop and watch that
136:19 - by now and that'll help you with this
136:21 - project and uh just to show you the
136:23 - responsiveness in Mobile screen sizes
136:25 - those left icons are not visible also
136:28 - we're going to make this plus icon not
136:30 - visible at small screen sizes as well so
136:33 - we're going to again add the media query
136:35 - on our display and we're going to say
136:36 - base none and then add medium between
136:39 - sizes we won't make it Flex so that's
136:41 - only the chat and the notification one
136:44 - are visible in Mobile which is the same
136:46 - as Reddit awesome so we are completely
136:49 - done with icons now we can close this we
136:51 - are not going to look at them again and
136:52 - we can start working on that little
136:54 - directory menu in the top right corner
136:56 - here
136:57 - all right so let's create our new menu
136:59 - component so inside I've read content
137:01 - I'm going to create a component called
137:03 - usermenu.tsx and I'm going to use our
137:06 - snippet
137:07 - and what I'm going to do is come over to
137:09 - the chakra docs if you just search for
137:11 - chakra menu and you come to this page
137:13 - here
137:15 - we're basically just going to grab the
137:17 - code for this component here and modify
137:19 - it to look how we need it to look so I'm
137:21 - going to grab this and that's what we're
137:23 - going to return inside of our component
137:25 - here
137:26 - and then we can just automatically
137:27 - import everything command period add all
137:30 - missing Imports perfect so basically the
137:33 - menu button represents the actual thing
137:35 - that you see that is going to trigger
137:37 - the menu opening and then there is a
137:39 - menu item for each thing that you see
137:41 - inside of the menu okay so let's make
137:43 - some modifications to make it look like
137:45 - this our menu button is going to have
137:47 - that little Reddit icon with the Chevron
137:49 - down thing and then when we're logged
137:51 - out it's going to appear as just that
137:52 - regular sort of Avatar icon and that's
137:54 - the same behavior as Reddit they have
137:55 - this Reddit icon with the Chevron and
137:58 - then if you log out they have just this
138:00 - Avatar looking thing and I tried to find
138:02 - Icons that were most similar to the real
138:04 - Reddit but of course sometimes you can't
138:06 - find the exact ones you have to sort of
138:08 - just use something that's similar okay
138:09 - so let's actually implement this let's
138:11 - go comment this in and import that and
138:15 - actually named it user menu
138:18 - and let's go to our app and we can see
138:21 - that we have this drop-in menu now so
138:22 - let's come back and make those
138:23 - modifications so since our menu button
138:26 - does change depending if a user is
138:28 - logged in let's go actually pass our
138:30 - user to our user menu so that we can
138:31 - make those um adjustments when we do
138:34 - need to make them so we're going to say
138:35 - user is equal to user and then we're
138:37 - just going to forward that as a prop
138:41 - to our component and we can do the exact
138:43 - same thing as we did before with making
138:45 - it null undefined for user okay so now
138:49 - we have access to the user and we can do
138:51 - some conditional rendering so I'm going
138:52 - to grab the user from our props and I'm
138:56 - going to remove this actions text and
138:57 - replace it with a ternary operator
138:58 - that's going to say if there is a user
139:00 - meaning we are logged in show something
139:02 - and if there is not a user show with
139:04 - something else and that's something else
139:05 - for right now this is going to be a div
139:07 - that says no user and if we are logged
139:11 - in
139:12 - let's show user
139:15 - perfect so we are currently logged in so
139:17 - we can see that it says user so we can
139:19 - remove this as button thing we can also
139:21 - remove this right icon
139:23 - let's work on now what this did is going
139:25 - to be if we do have a user so if a user
139:28 - exists we're going to add a fragment
139:30 - here and then we're going to have an
139:32 - icon
139:34 - and I'm just going to paste in all of
139:36 - the icons that we're going to use here
139:37 - which are just going to be three
139:39 - different icons
139:41 - and then this icon is going to be
139:45 - the fa Reddit Square
139:47 - and then let's make some minor CSS
139:49 - adjustments to it we'll say font size is
139:51 - going to be 24.
139:54 - we're given a margin right of one and
139:57 - then we're going to write the color gray
139:59 - 300 and we're actually going to wrap
140:02 - this fragment in a flex box there's
140:04 - going to be two Flex boxes actually but
140:06 - for now we'll just use one and then I
140:07 - just need to import that from Shopper UI
140:10 - awesome and that just centers the icon
140:12 - without the flexbox you'll notice that
140:13 - the icon kind of is not centered there
140:16 - so that is why we have a flexbox there
140:18 - and then we can also add that this is
140:20 - where we can move that Chevron down icon
140:22 - in there and we're also going to add
140:24 - another Flex box so there's going to be
140:26 - two
140:27 - which might seem a bit unclear right now
140:29 - but it will make sense in a bit as we
140:31 - build this up and then we're going to
140:32 - make both of the Align on these
140:34 - to be Center
140:38 - just like that and that centered that
140:40 - Chevron there cool so now this opens up
140:43 - the menu we just need to style it a bit
140:45 - now let's come up to our menu button and
140:47 - add just a few Styles we're going to
140:49 - make the cursor pointer our padding is
140:52 - going to be
140:53 - your pixel is six pixels and then our
140:56 - border radius is going to be four four
140:58 - is going to be sort of our standard
140:59 - order it is for everything in our app
141:01 - and we're going to give it hover State
141:03 - styling of an outline of one pixel solid
141:07 - and our outline color is going to be
141:10 - Gray 200.
141:14 - awesome and that looks like this
141:17 - nice which is very very much the same as
141:20 - Reddit awesome so let's come back here
141:22 - and let's just quickly replace this
141:24 - because it's going to be super easy
141:25 - we're going to have an icon and that
141:27 - icon is going to be vs C account that's
141:31 - one of the icons we imported from react
141:33 - icons and this one have a font size of
141:36 - 24 color
141:38 - of grade 400 and a margin right of one
141:43 - now let's actually build out the proper
141:45 - menu items here so right now we have as
141:48 - a bunch of random ones that would come
141:49 - with the default component so let's just
141:51 - get rid of all of these keep one of them
141:53 - and then inside of our first one this is
141:54 - what we're going to have so our menu
141:56 - items are going to look like this we're
141:57 - going to have a flex box and then inside
141:59 - of the flexbox there's we're going to
142:01 - have an icon and this first one is going
142:03 - to be an icon called CG profile
142:06 - and I guess I did not import that and
142:09 - that is coming from react icons it's c g
142:11 - so let's go quickly do that
142:15 - c g profile here
142:19 - awesome
142:21 - and then we're going to have the text
142:22 - profile
142:24 - perfect so let's go back to our app and
142:26 - see what that looks like
142:27 - okay so that is there but it looks kind
142:29 - of terrible so let's fix that up okay so
142:31 - the Align on this is going to be Center
142:34 - and then our icon is going to have a
142:36 - font size of 20 and a margin right of
142:40 - two
142:41 - perfect that's looking a bit better and
142:44 - then let's come up to our menu item make
142:45 - our font size equal to 10 point
142:49 - our font weight
142:51 - equal to 700
142:53 - and our hover state is going to be have
142:56 - a background of blue
142:58 - 500
143:01 - and the text color is going to be white
143:03 - so this is what that looks like let me
143:06 - hover over it it has that blue and it
143:08 - makes the icon and the text white
143:10 - perfect now our second one is going to
143:12 - be pretty much the exact same thing we
143:14 - can copy this paste it down here except
143:17 - this is going to be actually log out say
143:19 - log out and we just need to import one
143:21 - more icon from react icon so I've got to
143:24 - import these last two it's going to be
143:26 - react icons
143:28 - slash MD and it's going to be MD outline
143:31 - login
143:33 - perfect now let's go change it there MD
143:35 - outline login
143:37 - and that looks like this and you'll
143:39 - notice on Reddit
143:41 - that they have this divider I don't know
143:43 - if you can see it there it's a very
143:43 - subtle Gray Line Between all of these
143:45 - and the logout one so let's quickly add
143:48 - that chakra makes that super easy with
143:50 - their component menu divider make sure
143:54 - that's imported and now we have that
143:55 - nice divider there okay and all we need
143:57 - to do now is add our Firebase logout
143:59 - function to our logout menu item the
144:01 - exact same way we're doing it before
144:02 - with that logo button so we can just add
144:04 - an unclick to that menu item and this on
144:07 - click is going to call our sign out
144:09 - method from Firebase auth make sure it
144:10 - Imports and then we're going to pass
144:12 - this our auth object from Client app
144:15 - so now if I actually click on this thing
144:17 - I should be able to log out and we'll
144:18 - see the display has changed there and
144:20 - then if I log back in as
144:23 - chattahoo we can see that the navbar
144:25 - updates and we are now signed in and I
144:28 - think we have to make some minor changes
144:29 - to our flexbox up here I think I might
144:32 - have done something wrong
144:34 - um so we just need to move these Flex
144:36 - containers outside of our ternary
144:38 - operator so this might be kind of weird
144:41 - to change I'm going to move these
144:43 - outside like this
144:44 - move these two up top
144:48 - and we can move this icon out here
144:52 - between those two flexbox containers my
144:55 - apology for that that is kind of
144:56 - confusing to restructure but basically
144:59 - we just have to move the two Flex boxes
145:01 - outside so that this was centered and we
145:03 - get that Chevron there and then we can
145:05 - log in
145:08 - and then it appears the same way we have
145:10 - the Chevron icon in both the logged in
145:13 - and logged out state so something else
145:14 - we have to do in here is the contents of
145:17 - the menu changes when we are logged out
145:19 - when we're logged out we should just
145:21 - only see the option to sign in if you go
145:23 - to our demo if I log out
145:26 - we just have this thing log in and sign
145:28 - up and on Reddit they have a menu with a
145:30 - bunch of more options but these are
145:31 - features we're not going to build so
145:33 - we're just going to have the login sign
145:34 - up thing which is just going to open the
145:36 - model so it's going to be very very easy
145:37 - to add so let's go back to our app so
145:40 - basically our menu list content is just
145:42 - going to change depending on if there is
145:44 - a user so right inside of our menu list
145:46 - we can add another Turner operator
145:48 - that's going to check for the existence
145:49 - of the user and then our first thing we
145:52 - can have is a fragment our second thing
145:54 - can be a fragment as well our first
145:56 - fragment if there is a user is going to
145:58 - be everything we've already written all
146:00 - these menu items up here
146:03 - just like that and if we're logged out
146:05 - we just need to show a menu item that
146:08 - prompts the user to log in
146:12 - we want this to say login slash sign up
146:16 - just like that and so then we just need
146:18 - to make this actually open that login
146:19 - signup model the way to do that is we
146:21 - can import our recall State Setter
146:23 - function on set auth modal state is
146:26 - equal to use it's set recoil State pass
146:29 - our auth model State atom come down here
146:32 - and do what we've already done a few
146:34 - times now on this menu item we do not
146:37 - want to sign out we want to add it on
146:39 - click
146:40 - that is going to call that set off modal
146:43 - State and the state we want to set it to
146:45 - is going to be open
146:46 - true and our view is going to be log in
146:51 - by default so now if they actually click
146:53 - on this login signup thing it opens the
146:55 - model which is exactly what happens on
146:57 - reddit.com and we can sign in directly
146:59 - from here
147:00 - and that seems to be working completely
147:02 - fine and also you'll notice on larger
147:05 - screen sizes that this text appears with
147:07 - our username and the karma so let's
147:10 - quickly add that all right so for that
147:12 - Karma text I'm just going to paste it in
147:15 - here from my other repo because it's
147:16 - only about 10 lines and then I can just
147:18 - explain what's going on so I'll paste it
147:20 - right here beneath our Reddit icon and
147:23 - what that looks like is like this you
147:25 - can see that my name is there as well as
147:27 - the user Karma and that little orange
147:29 - icon thing so basically this is just a
147:31 - flexbox with some additional styling
147:33 - applied to it the most important part is
147:34 - here and the reason we have both of
147:36 - these is because if a user authenticates
147:38 - with Google they will have a property on
147:40 - their user object called display name
147:42 - which is coming from their Google
147:43 - account and then if they authenticate
147:44 - with email and password they will only
147:46 - have an email they will not have a
147:48 - display name so basically this just
147:49 - checks for the existence of the display
147:51 - name and if it does not exist it will
147:53 - show this so what's happening here is
147:55 - that when we split a string at a certain
147:57 - character it's going to give us an array
148:00 - and by accessing the first index of that
148:02 - array we're taking all of the text to
148:04 - the left of the at sign in the email
148:06 - which in my case is shad merhi and so
148:09 - one of these two things are acting as
148:10 - the user's username and you'll also
148:12 - notice down here that I have hard-coded
148:15 - the karma of the user and I'm going to
148:17 - show you in a bit how to add custom
148:19 - properties to this user object and that
148:22 - is what's going to lead us into our
148:23 - discussion of cloud functions because
148:25 - right now with Firebase we cannot add
148:28 - additional properties and this is
148:30 - something that is written in the
148:31 - Firebase docs they do not allow you to
148:34 - modify this particular object if you
148:36 - want to add custom properties things
148:38 - like Karma or username or anything that
148:40 - is not on this base user object we do
148:44 - need to store it in another database
148:45 - table and then we can make those
148:46 - modifications but we will see more of
148:49 - this when we get into Cloud functions
148:50 - and it'll make a lot more sense then
148:52 - alright so we are now completely done
148:53 - with this user drop down menu component
148:55 - it is fully functional for both logged
148:58 - in and logged out users and we can now
148:59 - work on this community drop down menu
149:01 - and start to get into more of the
149:03 - community-based logic of the app all
149:05 - right you guys we are so close to being
149:07 - done at this nav bar all we have to do
149:09 - is add this community drop down menu and
149:11 - make it a little bit responsive and it's
149:13 - going to be extremely similar to our
149:15 - user menu that we've already created so
149:17 - let's go ahead and do that all right so
149:19 - I'm actually just going to copy
149:20 - everything from inside of this file user
149:22 - menu and then I'm going to come to my
149:24 - directory and inside of my nav bar I'm
149:26 - going to create a new directory called
149:28 - directory because we're going to have a
149:30 - few child components inside of here and
149:32 - inside of here I'm going to make a new
149:34 - file called directory which is going to
149:36 - be sort of the root of the directory I
149:39 - feel like I said directory about eight
149:40 - times now directory.tsx
149:44 - use our snippet actually we don't even
149:46 - need the snippet I'm just going to paste
149:48 - in everything that we have and then I
149:49 - will save that and the parent of this
149:53 - directory was navbar we defined it here
149:57 - before but we just never used it and now
149:59 - I'm actually going to import it from
150:01 - that directory import directory from
150:04 - directory I called it directory because
150:05 - it's kind of a community directory a
150:08 - sort of the naming behind it you can see
150:09 - that in our app we have this icon thing
150:12 - and then there is a drop-in menu but it
150:13 - does not look like we need it to look
150:15 - like ours it needs to look like this
150:16 - with the icon as well as the different
150:19 - content okay so let's come back to here
150:21 - and let's get working on that so inside
150:24 - of directory we can get rid of all of
150:26 - the user-based stuff because we're not
150:28 - even going to show this component at all
150:29 - unless a user is logged in we're going
150:31 - to get rid of all of this this entire
150:34 - ternary operator let's get rid of that
150:36 - so that we have an empty menu list
150:38 - perfect and then also can get rid of
150:40 - this user ternary operator as well
150:43 - so now we just have the foundations laid
150:46 - out for our component
150:47 - just so we don't have to write it
150:49 - completely from scratch and we're not
150:50 - going to need this and we are actually
150:52 - not going to take in any proxy here
150:54 - there is no conditional rendering at all
150:56 - no problems
150:59 - and then we can clean up all the Imports
151:01 - because there is a ton of not used stuff
151:03 - in here so we can just use that organize
151:04 - Imports command from vs code reminder if
151:07 - you forgot how to do that command shift
151:09 - p and then search for organize Imports
151:11 - and you can do that
151:13 - perfect so now we have this very simple
151:15 - drop down that is empty so let's work on
151:17 - our menu button and we basically just
151:18 - have these two Flex boxes to Center
151:21 - everything that we're going to put
151:22 - inside of here and make it all look nice
151:24 - and aligned so I'm just going to quickly
151:26 - import this home icon into here and I'm
151:28 - going to be from react icons it's going
151:31 - to be from react icons slash TI
151:37 - and this is going to be the ti Home and
151:40 - these subdirectories in case you're
151:42 - wondering I can't remember if I
151:43 - explained this if you go to react
151:45 - icons.com and if you just go into the
151:47 - documentation here
151:49 - um basically if you search for anything
151:50 - like home they have a huge library of
151:53 - icons and whenever you click on one
151:55 - let's say you like this one the first
151:56 - two letters are r i and that would mean
151:58 - that it would come from the subdirectory
151:59 - r i uh in case you were wondering I
152:02 - can't remember if I explained that I
152:03 - apologize if I did not all right so
152:04 - inside of this inner Flex box you want
152:07 - to add that icon
152:09 - all right so we're going to say icon as
152:12 - TI home
152:14 - and then underneath that we're going to
152:16 - add some text
152:18 - oh it's actually an import from Chakra
152:21 - and we are going to put home here for
152:23 - now and when we actually start getting
152:25 - into the creation of communities we will
152:27 - toggle this to show the current
152:28 - community that we're on but in order to
152:30 - do that we need to know which Community
152:32 - pager on and we have not yet created
152:34 - Community Pages yet so for now we're
152:36 - just going to hard code home and this
152:38 - icon we're going to add a font size of
152:40 - 24 and a margin right at Mobile screen
152:44 - sizes it's going to be one and at medium
152:47 - screen sizes it's going to be two and
152:49 - this is the kind of just finicky stuff
152:50 - that really really makes the design
152:52 - replicate Reddit and make everything fit
152:54 - in there nicely and this text also needs
152:56 - a media query on it because you'll
152:58 - notice that on certain screen sizes it
153:00 - is not displayed because there is just
153:01 - no room for it so what we need to do to
153:03 - solve that is to create another flexbox
153:05 - and then actually put the text inside of
153:08 - there and add a midi query on it similar
153:10 - to what we've done already we're going
153:12 - to make at base screen sizes it's going
153:13 - to be none and at large screen sizes
153:15 - it's going to be flex and let's make the
153:17 - font weight of this
153:19 - 600 and you'll notice here that if I'm
153:22 - hovering over this button there is not
153:25 - any space between it and the search bar
153:27 - so what we need to do is just add some
153:29 - additional margin to that menu button so
153:32 - what that's going to look like is the
153:34 - left one or the right one is always just
153:35 - going to be two then on the left we're
153:38 - going to also change this with screen
153:39 - size and we're going to make it at base
153:41 - screen sizes it's going to be 0 and the
153:43 - medium screen size is it's going to be
153:44 - two and these media queries just help it
153:47 - look really good on all screen sizes to
153:48 - make sure that not everything is
153:49 - squished I'm just going to make the font
153:51 - size of this
153:53 - to be equal to 10 point
153:56 - and that shrinks it down there nicely
153:57 - and that looks good and then we also
153:59 - just need to adjust the width of this
154:00 - container because you'll notice that in
154:02 - this demo it gets larger so in order to
154:05 - achieve that we need to come into this
154:07 - outer Flex box here and say justify is
154:11 - going to be equal to space between
154:13 - that's going to make sure there is the
154:14 - maximum amount of space between every
154:17 - child of this component and the two
154:19 - children in our case are this flexbox as
154:22 - well as this Chevron down icon so it's
154:24 - going to maximize the space between
154:26 - these two things here and then to add
154:29 - that responsive width I'm just going to
154:31 - add a media query on the width at Bay
154:33 - screen sizes it's going to be Auto so
154:35 - it's just going to take up as much space
154:36 - as it needs and then on the large screen
154:38 - sizes we're going to cap this at 200
154:41 - pixels and this is what that looks like
154:44 - so you can see it grows and it looks
154:46 - great on all screen sizes if you go on
154:48 - reddit.com and you play around with the
154:50 - responsive myths it's the same thing all
154:53 - right and the most exciting part of this
154:55 - entire Dropout menu is what's inside of
154:57 - the menu list and the menu list is going
154:59 - to be the communities component and this
155:02 - is where we're going to start to get
155:03 - into the very very exciting Reddit
155:05 - functionality where we can actually
155:06 - create communities and join communities
155:08 - and that logic is going to happen inside
155:11 - of here and that is coming up very very
155:13 - shortly so for now I'll leave a blank
155:16 - component and I'll just put the text
155:17 - communities in there so we can get
155:19 - excited about communities one last thing
155:21 - to make the behavior of the snapbar
155:23 - pretty much exactly the same as Reddit
155:25 - is to just modify the width of the
155:28 - search bar if a user is logged in you'll
155:30 - notice if I go to the demo the width of
155:32 - the search bar just sort of takes up all
155:34 - of the space that it can that is
155:36 - available for it and if I log out it is
155:39 - capped at a certain size you'll see that
155:41 - it stops growing and it's very simple to
155:43 - do it similarly I think a few lines so
155:46 - all we need to do is come over to our
155:47 - nav bar and just pass the user to our
155:50 - search input exactly like we're doing
155:51 - below
155:53 - come to our search input
155:55 - and I mentioned that we're going to take
155:57 - in a user here long long ago so let's
156:00 - actually take that in now it is going to
156:02 - be a type user wrap it from our props
156:05 - through destructuring all we're going to
156:07 - do in here is add a single line to this
156:10 - flexbox a Max width property and we are
156:14 - going to say if there is a user
156:16 - the max width is Auto and if there is
156:19 - not the user cap the width at 600 pixels
156:22 - so we're getting an error here it's user
156:23 - that is not defined and that's because
156:25 - we just need to add that same type to
156:29 - our prop type and that should solve that
156:31 - never mind it does not at all oh a user
156:35 - uh let's just passed in the user object
156:37 - user was not defined and we only want to
156:40 - show this directory if the user is
156:42 - logged in okay so if I log out we can
156:46 - see that the directory is not even
156:47 - displayed you'll notice that if we start
156:49 - playing around with the responsiveness
156:51 - when we're not logged in it gets really
156:52 - really janky so we just need to add a
156:54 - few properties to these Flex containers
156:56 - here on this outer one I'm just going to
156:58 - add Justified content or Justify for
157:01 - short on medium screen sizes we want
157:03 - this to be space between and that is
157:06 - going to make an even amount of space
157:07 - between all of its child components and
157:10 - then on this one here on this inner
157:11 - content we want the width to be
157:14 - responsive as well we're going to give
157:16 - it a 4 40 pixels at Mobile screen sizes
157:18 - and then on medium screen sizes and up
157:21 - we're going to give it auto width and
157:23 - then our margin right is going to have a
157:26 - base margin of zero and at medium screen
157:30 - sizes it's going to be 2. and now we
157:32 - should see a complete responsiveness
157:34 - with our navbar and we can see that that
157:37 - search bar container
157:39 - is capped at that width and that looks
157:41 - really good all right so we are
157:42 - completely done with the nav bar the
157:44 - only thing that's going to change is
157:46 - that we're the only thing that's going
157:47 - to change is that when the only thing
157:50 - that's going to change is that this icon
157:52 - is going to be dynamic depending on what
157:54 - community that we're in it's going to
157:55 - display the actual Community icon and
157:58 - we're going to do that logic using a
157:59 - custom react hook that we're going to
158:01 - build once we are able to create
158:02 - communities so let's now create the
158:05 - model to actually create communities
158:07 - that we can access through this drop
158:09 - down menu so if I go to the completed
158:10 - project and I open this up here when we
158:13 - click this we want this to pop up and
158:15 - we'll actually be able to create a
158:16 - community so that is our next goal let's
158:18 - get going on that all right you guys
158:20 - let's build this model I'm honestly just
158:22 - super pumped about how this looks it
158:24 - just looks so clean I love it all right
158:26 - so let's go back to our app and start
158:28 - building this thing so we saw that
158:30 - inside of directory we already defined
158:32 - where this model is going to be so let's
158:34 - actually bring that back in and go and
158:37 - create that component
158:40 - save that and let this error out and
158:43 - this component is going to go inside of
158:45 - this directory directory maybe the word
158:48 - directory was a confusing name I
158:50 - honestly did not even think of that when
158:51 - I was building it
158:52 - how confusing that would be so let's
158:55 - drop our snippet in here and save that
158:58 - and let's come back here and import it
159:02 - I'm just going to refresh here
159:04 - okay so we have our component have a
159:06 - good coding which doesn't really make
159:08 - sense not sure who made this snippet but
159:11 - it doesn't make sense whatever it's
159:12 - still a useful tool so inside of here
159:15 - there's going to be a bunch of stuff but
159:17 - for now this is the structure that we're
159:18 - going to create we're going to have a
159:21 - fragment and this fragment is going to
159:22 - have a component called create Community
159:25 - modal so since this thing is a modal
159:28 - we're going to put it along with any of
159:29 - its children inside of the moral
159:31 - directory and we're going to give it its
159:33 - own folder called create community
159:36 - inside of this create Community we're
159:37 - going to create another file and this is
159:39 - going to be the root of the create
159:41 - Community model so we're going to call
159:42 - it create community modal.tsx
159:45 - inside of here we're going to use our
159:47 - snippet and I'm just going to come down
159:49 - here and I will put in community
159:55 - Perfect all right now let's come back to
159:57 - here and just import that
160:01 - and we should see it in there now this
160:03 - is actually going to be a menu item that
160:05 - is going to open an actual model and
160:07 - we're going to need a menu item from
160:10 - Chakra
160:11 - and the reason we're using a menu item
160:13 - is because the parent of communities is
160:16 - a menu itself and so that's why we're
160:18 - using a menu item all right so inside of
160:20 - this menu item we're going to have a
160:22 - flexbox and this is where we're actually
160:24 - going to put that text create community
160:27 - but we have an import effects yet so
160:28 - let's do that save that and also inside
160:31 - of this Flex box we're going to have our
160:34 - icon
160:36 - and our icon is going to be the same
160:38 - icon that we're using in the nav bar
160:40 - here it's going to be the add icon and
160:42 - that icon is coming from
160:46 - react icons slash g a it's right GR
160:52 - and this is the gr ad icon just like
160:55 - that and then inside of here we're going
160:57 - to say icon as
160:59 - PR ad
161:01 - awesome and what does that look like
161:03 - perfect so now we're going to Center
161:05 - this I'm going to say align Center that
161:08 - will Center that there and we're just
161:09 - going to adjust the size of this text
161:11 - and this icon
161:13 - so our icon font size
161:15 - is going to be 20. I'm going to give a
161:18 - margin right of 2.
161:22 - just so there's space between there okay
161:23 - and on our menu item we're going to give
161:25 - us some Styles as well we're going to
161:27 - give this a width of 100
161:29 - a font size of 10 point and then on
161:33 - Hover
161:35 - we're going to give it a background of
161:37 - gray 100 and we can also add the on
161:40 - click
161:41 - because this is the thing we're going to
161:42 - click on when we're actually going to
161:44 - want to open the modal so because we
161:46 - need access to the open state of the
161:49 - model in this component as well as
161:51 - inside of the model because the model
161:53 - needs to know if it's open we are going
161:55 - to Define that state in this component
161:57 - so we're going to say open
161:59 - set open and it's going to be used State
162:01 - and we're going to say false starting
162:03 - off we don't want to be open initially
162:05 - and then this on click is just going to
162:07 - call that set open and set it equal to
162:09 - true
162:10 - and then we can just pass open as a prop
162:13 - to the create Community modal so let's
162:15 - go to create Community modal and this is
162:17 - going to take a prop in that is a
162:19 - Boolean
162:20 - and then we can destructure that here
162:24 - awesome so now I'm going to go to the
162:26 - chakra documentation and grab that model
162:29 - once again similar to what we did before
162:31 - with the authentication modal and I'm
162:33 - going to grab this one here because it
162:36 - has a footer which we're going to need
162:37 - if you look at the demo one we have a
162:39 - footer there so I'm going to grab the
162:41 - one with the footer
162:43 - I'm going to grab the entire return
162:44 - statement
162:46 - and that is what just like that and then
162:50 - I'm going to Auto Import all of this
162:52 - stuff at all missing Imports
162:54 - and we're not going to need this button
162:56 - because the thing that opens our model
162:58 - was this menu item out here so we can
163:01 - get rid of that button completely
163:03 - and so we passed open as a prop to this
163:06 - community just a second ago so that is
163:07 - what I'm going to say here I'm going to
163:09 - say is open is going to be that open
163:11 - Boolean there and I'm going to actually
163:13 - add another prop that we're going to
163:14 - take in called handle close and this
163:17 - handle closed function we're going to
163:19 - pass it as a proper over here handle
163:21 - close and all of this function is going
163:24 - to do is just going to be a callback
163:26 - that calls set open and sets it equal to
163:28 - false
163:29 - and the type definition of this function
163:31 - is just going to look like this it's
163:32 - just a callback function that does not
163:34 - return anything and when a function does
163:36 - not return anything we can just say void
163:38 - and then we're just saying that the type
163:40 - of this function is an arrow function
163:41 - that takes in no arguments and returns
163:43 - void that's all this means and in the
163:46 - future we will see some more interesting
163:47 - type definitions for functions all right
163:50 - and then we can accept that prop here by
163:52 - destructuring it and then and then on
163:54 - close we can call handle close let's get
163:57 - rid of this lorem thing because all that
163:59 - is is just text here is the modal body
164:02 - I'm going to write
164:04 - and then here we can also just call
164:06 - handle close
164:09 - perfect so let's go see what that looks
164:11 - like
164:11 - we have an error what is going on here I
164:15 - don't see oh something down here
164:18 - I think we're just missing that bracket
164:20 - there there we go okay so let's see what
164:22 - this looks like so I open up this thing
164:24 - I click create community and Bam we have
164:26 - our modal I can close it
164:28 - nice and so now all we have to do is
164:30 - just build the inside of this model and
164:32 - these buttons are going to look slightly
164:33 - different but for now I'm just going to
164:35 - make this say create community
164:38 - because it's kind of cool because that's
164:39 - actually the button we're going to click
164:41 - on the create the community so it's
164:42 - exciting it's going to look like this
164:44 - all right so now we're going to start
164:46 - building out this modal this component
164:48 - is going to contain a lot of interesting
164:50 - things it's going to have all of the
164:52 - logic necessary to create a community so
164:55 - it's going to be interacting with our
164:56 - firestore database and it's going to be
164:58 - our first Glimpse at creating firestore
165:00 - documents we're also going to get to see
165:02 - database transactions and batch rights
165:04 - for the first time so it's going to be
165:06 - very interesting and do not worry if you
165:07 - do not know what those are I will
165:09 - explain them when we get to them but
165:11 - before we do anything that has to do
165:12 - with firestore we actually need a
165:14 - component to interact with so let's
165:16 - build out the UI for this model I just
165:18 - want to close the directory on the left
165:20 - so that we have a bit more room because
165:21 - this component is a bit long and let's
165:23 - start off with this header so the header
165:25 - is going to say create a community
165:29 - just like that and we're going to add
165:31 - some styling to here so we're going to
165:32 - make the display Flex the flex Direction
165:38 - is going to be column we're going to
165:40 - make the font size just a bit smaller
165:42 - we're going to make this 15 and we're
165:44 - going to give it some padding of three
165:48 - just like that so underneath the header
165:50 - we're going to have a box component and
165:52 - a box is just a div and we don't need
165:54 - flexbox here so that's why we're just
165:56 - using a generic box and we're going to
165:58 - put everything except the footer inside
166:01 - of this box so we're basically just
166:02 - giving an extra container to our model
166:04 - body so that we can apply some
166:06 - additional styles to it and we're going
166:08 - to give a padding left of three
166:10 - and a padding right of three and we had
166:14 - to wrap the body inside of this extra
166:16 - box just so that we can apply this
166:19 - additional padding here I was playing
166:20 - around with trying to do it on the body
166:21 - and it was just kind of weird and so to
166:23 - get it to look exactly like Reddit I
166:25 - just added this additional box here and
166:27 - that seemed to work great and our modal
166:28 - body we're going to add some properties
166:30 - as well we're going to make the display
166:32 - Flex
166:34 - and we're going to make the flex
166:35 - Direction
166:37 - column
166:40 - and we're going to give it some padding
166:41 - and that padding is going to be 10
166:43 - pixels so top bottom 10 pixels and right
166:45 - left zero pixels and I'll add a border
166:47 - here just so you can have an idea of
166:49 - what it is that we're looking at there
166:51 - okay and inside here we're going to have
166:52 - some text from Chakra X is going to be
166:55 - name and this text is going to have a
166:56 - font weight of 600
167:00 - and a font size of 15.
167:03 - and underneath this text we're going to
167:04 - have another text and this text is going
167:06 - to say community names
167:08 - including
167:10 - capitalization cannot be changed this is
167:13 - just something it says on Reddit there
167:14 - must be some rule they have and our font
167:16 - size of this is going to be 11 and our
167:18 - color is going to be
167:20 - Gray 500. awesome all right underneath
167:24 - this we're going to have another text
167:26 - and this text that we're about to add is
167:29 - this part here it's the subtle bit of
167:31 - text this R forward slash inside of the
167:33 - input and styling this was honestly
167:35 - quite tricky I had to inspect the real
167:38 - Reddit styles for a while to figure out
167:40 - how they actually did this because it's
167:41 - kind of weird there's just a bit more to
167:42 - it than meets the eye but I ended up
167:44 - figuring it out so let's proceed all
167:46 - right so this text is going to be the r
167:48 - forward slash let's go back to our app
167:50 - so we have the R4 slash and underneath
167:52 - this is where we're going to have the
167:55 - actual input for the community name
167:57 - and this input is going to be the actual
167:59 - input that the user puts the community
168:01 - name in that they're creating so let's
168:03 - go create some state so that they can do
168:05 - that I'm going to call it Community name
168:07 - and set community name
168:09 - and it's going to be initialized as an
168:11 - empty string
168:13 - now on our input we're going to have
168:15 - that be the value so our value is going
168:17 - to be that Community name variable
168:21 - and we're going to use a size of small
168:23 - and I'm actually going to remove that
168:25 - order red because it also applies to the
168:27 - input it looks really bad so let's
168:29 - remove that and um
168:31 - here we're going to give this a padding
168:33 - left of 22 pixels and then this has to
168:37 - tie into that weird R forward slash
168:39 - thing which I'll explain in a second
168:41 - we're going to add an on change function
168:43 - here which for right now we're going to
168:44 - make an empty callback function and now
168:47 - let's actually position that bar to be
168:49 - properly positioned inside of the input
168:51 - as it appears here so this is the reason
168:53 - we added this padding left to that input
168:55 - there we need to use it relative and
168:57 - absolute positioning so what we're going
169:00 - to do is we're going to make the
169:01 - position
169:03 - of this input relative
169:05 - and then we're going to make the
169:06 - position
169:08 - of this text also relative
169:11 - and this allows us to basically
169:12 - customize the position of this
169:15 - particular component and what I mean by
169:17 - that is we can specify like how many
169:18 - pixels it is from the top of its parent
169:20 - container in our case it's 28 pixels and
169:23 - from the left it is 10 pixels and the
169:26 - width of this is going to be 20 pixels
169:29 - so kind of weird this is literally
169:32 - exactly what Reddit is doing this is the
169:34 - same method they use so blame them if
169:37 - you think that this is weird and then
169:39 - also the color of this is going to be
169:41 - grade 400 it's a bit lighter don't need
169:44 - these brackets
169:46 - awesome so that's looking pretty good
169:47 - all right and then underneath this input
169:50 - there is a text that indicates how many
169:52 - characters we have remaining so if you
169:55 - want to say some number characters
169:57 - remaining and that number we're going to
170:00 - need another state variable I think what
170:03 - is the default I forget default is 21.
170:06 - it's going to say 21 characters
170:09 - remaining but we need to make this
170:10 - actually a dynamic value so let's go up
170:13 - to the top and let's create that
170:14 - character's remaining state so Char's
170:17 - remaining set chars
170:20 - the meaning is equal to use State and
170:22 - we're going to initialize it as 21 and
170:25 - while we're here actually let's create
170:26 - that handle change function
170:30 - that our input is going to use because
170:32 - it's inside of this function that we're
170:33 - going to recalculate
170:36 - how many chars we have left in the name
170:40 - so then we can come back down to here
170:42 - and place that on our input so it's
170:44 - going to say
170:46 - uh not on change handle change
170:49 - perfect
170:50 - and inside of this handle change
170:51 - function it's going to implicitly take
170:53 - in an event like we saw with our other
170:55 - inputs in our login and signup forms is
170:58 - going to be a react.change event and the
171:00 - type of element that is outputting this
171:01 - event is an HTML input element okay so
171:04 - we need to do a few things inside of
171:06 - this function so the first thing we need
171:07 - to do is actually update the community
171:09 - name state by using the
171:12 - event.target.value that's the current
171:13 - value inside of the input that the user
171:15 - has typed and then the way we're going
171:17 - to recalculate how many characters we
171:19 - have remaining is like this we're going
171:21 - to say set charge remaining and we're
171:24 - going to take the total amount they have
171:25 - available which is 21 and subtract the
171:29 - length of the string that they have
171:31 - currently entered and that's going to be
171:32 - the characters remaining also we do not
171:35 - want to set community name if they are
171:37 - over that limit so we can do that by
171:39 - adding a check here that says if
171:42 - event.target.value dot length is greater
171:45 - than 21 and just return do you not want
171:49 - to do any of this we we just want to
171:51 - exit the function so this is a guard
171:53 - against going over that limit so what
171:55 - does this look like now when we type in
171:57 - here hello there that's not updating
171:59 - it's because uh I forgot to change this
172:03 - to charge remaining
172:05 - okay so now if I type in there hello
172:08 - there how are you we can see that it
172:10 - doesn't let us go past that limit so
172:13 - we're only allowed 21 characters cool
172:15 - and let's modify this to be red when
172:18 - they have hit their character limit and
172:20 - so the color of this is going to change
172:21 - depending on the value of characters
172:23 - remaining so we can check does charge
172:26 - remaining
172:28 - equals zero
172:29 - if it does let's make the color of this
172:31 - red and otherwise let's make this gray
172:34 - 500. so you can see it's gray and if I
172:38 - hit that limit it turns red which is
172:40 - perfect very very intuitive and we're
172:42 - also just going to make this a tad bit
172:44 - smaller so we'll make this font size
172:46 - equal to 9.
172:48 - just like that okay that is super clean
172:50 - I love this UI so much okay now
172:54 - underneath this text we're going to add
172:56 - another box component and in this box
172:58 - this is where we're going to have that
172:59 - Community type selection list just like
173:02 - this
173:03 - so the first thing we're going to put in
173:05 - here is going to be text and that's
173:07 - going to say community type and we're
173:10 - going to write the fine weight a little
173:12 - heavy and the font size is going to be
173:15 - 15. nice and let's add some margin top
173:19 - and bottom to this box container so that
173:21 - there are some space between it and the
173:24 - character input so let's do some margin
173:27 - top of four and the margin bottom
173:30 - also four so now everything's laid out
173:33 - pretty good all right and now this is
173:34 - where we're actually going to put that
173:36 - checkbox component
173:38 - and the checkbox is going to be a
173:40 - component again from Chakra
173:42 - that's going to be wrapped in this stack
173:45 - component and what stack is is it's
173:46 - basically just a flex box that is going
173:49 - to automatically handle the spacing
173:51 - between all of its children for us so we
173:53 - can capacitate a problem called spacing
173:55 - and I think the default is two and it
173:57 - basically just spaces everything kind of
173:59 - evenly between it like that just like
174:01 - that they come in handy when you have
174:03 - you know stacks of things that are space
174:06 - evenly and in this case that's what we
174:07 - have with our checkbox all right so
174:09 - inside of our stack we're going to have
174:10 - three checkbox components from Chakra so
174:14 - we can just duplicate this and the first
174:16 - one is going to be a public Community
174:17 - type
174:18 - the second one is going to be restricted
174:23 - and the third one is going to be private
174:26 - those are the three Community types you
174:27 - can have on Reddit okay except we're
174:29 - only allowed to have one of these right
174:30 - you can only make one but there's a
174:33 - problem we can currently select multiple
174:35 - so we need to implement some logic that
174:37 - will only allow us to select one of
174:39 - these so the way we're going to do that
174:40 - is we're going to declare another state
174:42 - variable that is going to be called
174:44 - Community type I'm going to call set
174:46 - community type and it's going to be use
174:48 - State and the default is going to be
174:50 - public and these checkbox elements also
174:53 - emit an event just like any other input
174:55 - does and we can use that event to
174:57 - actually know which Community type we
174:59 - have selected so if you recall from our
175:01 - login and signup forms we had it built
175:03 - that on change function that basically
175:05 - took in an event and it used the name of
175:07 - the event Target to update State and
175:11 - we're going to do pretty much the exact
175:13 - same thing here with those check boxes
175:14 - so I'm going to create a function called
175:16 - on community
175:18 - type change
175:21 - and this is going to take in an event
175:22 - and that the event is going to be a
175:24 - react dot change event and still the
175:27 - type of it is an input element because a
175:29 - checkbox is just an input element that's
175:31 - all it is
175:32 - and inside of here we're going to we can
175:34 - set community type to be the
175:36 - event.target dot name but we did not add
175:40 - yet names to our checkboxes so the name
175:43 - of this we're going to make public
175:45 - because we need these for the event to
175:47 - actually know which thing was clicked on
175:48 - the name of this is going to be just
175:50 - restricted
175:53 - and the name of this is going to be you
175:56 - guessed it private and checkbox input
175:59 - elements have this property called is
176:02 - checked and is checked is a Boolean that
176:05 - represents whether or not this thing is
176:07 - checked but since this is a Boolean I
176:09 - can add some logic to actually toggle
176:10 - that check state so in our case we only
176:13 - want this public checkbox to appear as
176:16 - checked if Community type is equal to
176:21 - public
176:23 - and then the ones down here we only want
176:25 - this one to be checked
176:27 - it's a community type is restricted
176:31 - and we only want this one to be checked
176:35 - if the community type is private
176:38 - so now only this one's checked but we
176:40 - have not added the on change function to
176:42 - our inputs yet so let's do that now so
176:45 - we're going to say on change
176:47 - we're just going to call that on
176:49 - checkbox or on community type change and
176:52 - I'm going to place this on both of these
176:55 - other check boxes so now when I actually
176:57 - select one of them that state is
176:59 - toggling and we're only allowed to
177:01 - select one of them perfect that's
177:02 - exactly what we need all right so we
177:04 - need to style this input text slightly
177:06 - different so in order to do that I'm
177:08 - going to create a text element
177:11 - put the public text in there and we're
177:13 - going to give this a font size of 10
177:17 - point and a margin right of one and the
177:21 - reason we have a margin right is because
177:22 - we're going to put another thing of text
177:24 - that explains basically what a public
177:26 - Community is so a public Community has
177:28 - the description anyone can view post and
177:33 - comment to this community
177:36 - and in order to make these two things
177:38 - appear properly we need to add them in a
177:41 - you need to wrap them in a flexbox
177:43 - like this
177:45 - import Flex from Chakra and make a line
177:49 - equal to Center
177:52 - now they are aligned properly but we
177:54 - need to change the size of this so let's
177:55 - come to this description text here and
177:57 - I'm going to make the font size
177:59 - eight
178:00 - and the color is going to be gray 500
178:03 - padding top of one awesome and that
178:07 - looks really really good so we can do
178:09 - the exact same thing with those other
178:10 - two so I'm just going to copy this Flex
178:13 - box here
178:14 - paste it here you can just do
178:17 - restricted and the description for a
178:21 - restricted community is anyone can view
178:24 - this community
178:27 - but only approve users
178:31 - can post same thing down here I'm going
178:34 - to paste that for private changes to
178:36 - private
178:38 - any description for private communities
178:40 - is only
178:42 - approved users can view and submit to
178:46 - this community
178:49 - now the only thing missing from each of
178:52 - these checkboxes is an icon just like
178:54 - this here so we're going to quickly
178:55 - impart those three icons
178:57 - and those icons are going to again come
179:00 - from react icons and these are those
179:03 - three here so we have one coming from
179:05 - the hi sub library and two of them are
179:09 - coming from the BS Library okay so we're
179:11 - going to need our icon component from
179:12 - shortcut UI and our public one is going
179:15 - to be vs fill percent fill I hate when
179:18 - you don't get autocomplete and the color
179:22 - is going to be gray 500 and we're going
179:25 - to give it a margin write of two just
179:28 - there's some space there let's copy this
179:29 - icon component and come down to
179:32 - restricted and our icon for restricted
179:35 - is going to be BS fill I I fill fill I
179:40 - and then private is going to be hi
179:44 - logged close
179:46 - nice all right so this is looking a
179:47 - little bit weird we are seeing some
179:49 - overflow and the text is a bit too long
179:51 - and luckily for us chakra has multiple
179:53 - model sizes and all we need to do is
179:55 - just pass a prop
179:57 - with a string with the size you would
179:58 - like and we can just specify a large and
180:00 - that widens it a bit all right awesome
180:02 - and the last thing we have to do for
180:04 - this modal UI is just finish up the
180:06 - footer let's come down here so we're
180:08 - going to give our footer a background of
180:10 - Ray 100 and a border radius zero pixels
180:14 - zero pixels 10 pixels 10 pixels and if
180:17 - you have not seen this four input
180:18 - notation before for Border radius
180:20 - basically just each one of these
180:22 - corresponds to a specific corner so the
180:24 - first one is this then this one then
180:26 - this one and then this one so it goes in
180:28 - a clockwise rotation okay so this first
180:31 - button is going to say cancel instead of
180:34 - close we can get rid of this color
180:36 - scheme thing here we're going to make
180:37 - the variant of this outline
180:41 - and we're going to give it a height of
180:43 - 30 pixels just like that and then our
180:46 - create Community button is also going to
180:48 - have a height of 30 pixels and we can
180:52 - just get rid of this variant because by
180:53 - default it's going to have that solid
180:55 - fill variant and we're going to add it
180:57 - on a click here which is going to be the
180:59 - on click responsible for actually
181:00 - calling the create Community function
181:02 - when we have that created but for now we
181:04 - will leave this empty and we are now
181:06 - done building out the UI for this model
181:08 - it's looking super super good this was a
181:11 - longer component that did take a while
181:12 - to build I hope all of that makes sense
181:14 - and we can now get into more of the back
181:16 - end logic of actually creating
181:18 - communities and we're going to start
181:20 - creating Community documents in our
181:22 - database and in doing that we're going
181:24 - to get to see database transactions and
181:26 - batch writes and it's all going to be
181:28 - super exciting we're going to learn a
181:30 - ton about Firebase all right so the
181:32 - first thing we're going to do is inside
181:33 - of our create Community modal we're
181:35 - going to create the function that's
181:37 - actually going to be responsible for
181:39 - contacting our firestore database and
181:41 - actually creating the community so let's
181:43 - create that now we're going to call it
181:45 - handle create community
181:47 - and this function is going to need to be
181:49 - asynchronous because we are going to be
181:51 - communicating with our database which
181:52 - our asynchronous operations so just use
181:55 - the async keyword there so there are a
181:57 - few things we're going to do in this
181:57 - function the first one we're going to do
181:59 - is validate the community name I'm going
182:01 - to make sure that this name is valid
182:04 - that it is between 3 and 21 characters
182:06 - which is a requirement of Reddit and
182:08 - that the community name is not already
182:09 - taken by someone else because on Reddit
182:11 - Community names are unique so only one
182:14 - Community with a specific name can exist
182:16 - so we need to check for that the second
182:18 - thing we're going to do is actually if
182:20 - it is a valid Community name we will
182:22 - actually create the community
182:25 - document in firestore
182:28 - perfect now before we can actually
182:30 - communicate with our five star database
182:32 - we do need to create it so let's go back
182:34 - to our firestore sorry Firebase console
182:37 - and all we need to do is just go to
182:39 - Cloud firestore you can access it from
182:41 - this giant card here or you can uh
182:43 - access it from the firestore database
182:45 - tab on the left here and just go into
182:46 - that and all we need to do is just click
182:49 - create database and this model is going
182:51 - to pop up asking you if you'd like it to
182:53 - be in production mode or test mode and
182:56 - in production mode this just says rights
182:58 - are not allowed you have to write your
183:00 - own Custom Security rules for production
183:02 - which we are going to do later for now
183:03 - we're going to use test mode which is
183:05 - basically just going to allow read
183:06 - writes by anyone at any time which is
183:08 - perfect for development so let's click
183:10 - that and then it's going to ask you to
183:12 - set a location just use whichever one
183:13 - appears for you first I think it's a
183:15 - region based so depending on where you
183:17 - are in the world it'll give you the
183:18 - optimal one so you can just click enable
183:20 - now it's just going to actually create
183:22 - those resources on the Google servers
183:24 - all right so perfect here is our empty
183:26 - database on the left we're basically
183:28 - just going to have a column of all our
183:30 - collection names so communities for
183:31 - example is going to be a collection post
183:34 - is going to be a collection comments is
183:36 - going to be a collection and then when
183:37 - you click on one of those things and go
183:39 - inside of it it'll show you all of the
183:41 - documents inside of that collection and
183:43 - a document is basically just a
183:45 - JavaScript object inside of a collection
183:48 - at the top here there is a section
183:49 - called rules and this is what we briefly
183:52 - saw in that model this basically just
183:53 - allows you to lock certain parts of your
183:55 - application and allow only certain users
183:58 - or user types to read or create certain
184:00 - documents or delete certain documents
184:02 - and we are going to write our security
184:03 - rules later once we have posts and
184:05 - comments being created by the users and
184:07 - then we have indexes which is basically
184:09 - not really important for now it allows
184:11 - Firebase to efficiently query your data
184:13 - we will add some indexes to our database
184:16 - in a little bit but it's super easy it
184:18 - was just a single click of a button it
184:20 - will add like so nothing to really worry
184:23 - about here and the usage just indicates
184:25 - the activity going on in your database
184:27 - in terms of read writes and deletes so
184:29 - you can kind of monitor what is going on
184:30 - in your database and how heavy the load
184:33 - is for now we're only going to be really
184:34 - concerned with data that's just a little
184:35 - brief introduction to the cloud
184:37 - firestore console so once we create the
184:39 - community collection which when we call
184:40 - this function for the very first time
184:42 - that collection will be created we will
184:44 - see it in here and we'll also see the
184:45 - document of any community that we create
184:47 - inside of my collection as well and the
184:49 - way in our app we're going to access our
184:51 - firestore database is going back to the
184:54 - client app file that we saw earlier it's
184:55 - going to be through that firestore
184:58 - object right this fire this get the
185:00 - firestore is basically going to give us
185:02 - access to our database so we're going to
185:04 - be importing this in any file that we're
185:06 - trying to read write trying to do
185:08 - anything with our database
185:10 - okay so let's start off with this
185:14 - function so since we're doing some
185:15 - Community name validation we do need to
185:17 - add a error state to indicate to the
185:19 - user if something goes wrong so we just
185:21 - need to create error and set error and
185:24 - that's going to be equal to use State
185:25 - and it's just going to be a error
185:26 - message string that we're going to
185:27 - initialize as a false and once we have
185:30 - created that error let's just go quickly
185:32 - add the piece of text that's actually
185:33 - going to show that error if it does
185:35 - happen that's just going to be
185:36 - underneath this character's remaining
185:38 - text we're going to add a text here with
185:41 - that error actually inside of it so just
185:44 - do error
185:45 - and The Styling we're going to apply to
185:46 - it is just going to be the font size of
185:49 - nine point
185:51 - and a color of red and then just some
185:53 - top padding of one awesome let's go back
185:57 - up here and let's come back to our app
185:58 - over here so to make sure that the
186:00 - actual name String is valid we need to
186:02 - check that it does not contain any
186:04 - special characters and then we're just
186:05 - going to make sure that it is at least
186:07 - three characters because we're already
186:08 - validating that it's 21 characters with
186:10 - our character count so we need to check
186:11 - for a length of at least three so
186:13 - basically we can check for special
186:15 - characters inside of our string using
186:17 - reject now I found this Solution on
186:20 - stack Overflow for this I will link this
186:22 - in the description but basically we're
186:23 - going to use rejects to make sure that
186:26 - nothing inside of this particular array
186:28 - is going to be inside of our community
186:30 - name so all we need to do is just copy
186:32 - this really weird looking thing over to
186:35 - our file I'm just going to change this
186:37 - to a constant variable and all we need
186:40 - to do to test that our name does not
186:41 - contain any of those things is to just
186:44 - say format DOT test and then pass in our
186:48 - community name this is basically just
186:50 - going to do a quick check on all those
186:51 - characters and then we have to also add
186:54 - or if Community name dot length is less
186:57 - than three
186:59 - we're going to set an error saying that
187:03 - Community names
187:06 - must be between 3 and 21 characters and
187:10 - also we'll ADD and can only contain
187:14 - letters numbers or underscores
187:19 - and this really ugly looking reject
187:21 - expression basically just checks for
187:23 - valid string characters and also if you
187:26 - do get this error we just want to return
187:27 - out of this function because we do not
187:29 - want to actually proceed with the
187:30 - creation all right so let's come back to
187:32 - our app
187:33 - all right so inside of here we're
187:35 - actually going to now create our
187:37 - community we need to basically check
187:40 - that name is not taken
187:44 - and then if valid name create a
187:47 - community
187:48 - so the way we're going to check if a
187:49 - community exists is to create what's
187:51 - called a document reference this
187:53 - document reference is basically just a
187:55 - reference to a specific document in our
187:57 - firestore database and the way to create
187:59 - a document reference I'm going to say
188:01 - cons Community dot ref is equal to Doc
188:04 - now this doc function is coming from
188:06 - Firebase firestore so make sure that's
188:09 - imported and then we're going to pass it
188:10 - our firestore
188:13 - object that I was talking about just a
188:15 - few minutes ago from our client app
188:16 - that's how it's going to connect to our
188:18 - actual database and now this doc
188:20 - function as a second argument we need to
188:22 - know which collection we're actually
188:23 - looking at like a document in what
188:25 - collection and so the second argument is
188:26 - going to be that collection name and
188:28 - that collection name right now is
188:30 - communities and there's a third argument
188:32 - we need to know the ID of that document
188:35 - and in this case the ID is going to be
188:38 - the community name
188:39 - because names on Reddit are unique we
188:42 - can use the name as the ID so just to
188:44 - read over this one more time for clarity
188:46 - so this is basically just a document
188:47 - reference to the communities collection
188:49 - and it's referencing the document with
188:52 - the ID Community name however this is
188:54 - not the document itself this is just a
188:57 - reference and this is basically just how
188:58 - it works in Firebase we have document
189:01 - and collection references and then we
189:02 - have the documents and collections
189:03 - themselves and then we can use those
189:05 - references to actually read and write
189:06 - from those two things respectively and
189:08 - this will become a lot more clear once
189:09 - you start working with them a lot more
189:11 - and we always just pass our firestore
189:13 - object as a first argument this is
189:15 - basically just a requirement by any of
189:16 - the firestore functions provided to us
189:18 - because they need to know which database
189:20 - they're actually looking at so now we
189:21 - can actually go and try to get that
189:23 - document with this document reference
189:25 - from our firestore database and the way
189:27 - we're going to do that is we're going to
189:29 - say cons community
189:31 - doc this is going to be the actual
189:33 - document this was just a reference to
189:35 - the document this is going to be the
189:37 - actual document we're going to get and
189:39 - the way to do that is going to use a
189:40 - function called get doc provided Again
189:43 - by firestore and all we need to get this
189:45 - function is a document reference so that
189:46 - it knows which document to get and that
189:48 - is going to be our reference just
189:50 - defined above which is community.graph
189:52 - perfect and we are going to see this so
189:55 - much we're going to be working with this
189:56 - get Doc and Doc all these functions
189:58 - we're going to see a ton we're going to
190:00 - be doing a ton of document references so
190:02 - this is the first look at it so if it is
190:04 - kind of weird do not worry it will
190:05 - become very very clear and with
190:07 - repetition it becomes very intuitive so
190:10 - now we can check does this document
190:12 - actually exist like is if we go and grab
190:14 - this document is there anything there
190:16 - well lucky for us Firebase has a method
190:19 - on their documents called exists and
190:22 - this is going to be false if it does not
190:23 - exist and true if it does so they were
190:25 - saying if this document does exist
190:27 - meaning that this community with this
190:29 - name has already been created we need to
190:31 - alert the user and we're going to say
190:32 - set error
190:33 - sorry name is already taken try another
190:37 - and actually the exaction on Reddit is
190:40 - going to be the string sorry R forward
190:43 - slash name Community name
190:47 - is taken please or I'm not even please
190:50 - they don't even say please
190:52 - how could they not say please try
190:55 - another and the way to do this is just
190:57 - with the attempted literal the back pick
190:58 - notation in JavaScript awesome and then
191:01 - we can return out of this function
191:02 - because we do not want to proceed after
191:04 - that if we get to here line 75 we have a
191:08 - valid name
191:09 - we have a unique name of a community
191:11 - that has not been created yet so now we
191:13 - can actually create the community and
191:16 - the way to do that with a single line we
191:18 - can just say await set Dock and set dock
191:21 - is a function provided by Firebase that
191:23 - will either update the existing document
191:25 - or create a new one and what we need to
191:27 - pass this function is a reference to our
191:30 - document so we can say community dot
191:32 - graph and then we're just going to pass
191:33 - a JavaScript object which is going to
191:36 - represent the data inside of that actual
191:38 - document like the actual content of the
191:40 - document and our community documents to
191:42 - start off are going to have a Creator ID
191:45 - which is going to be the currently
191:46 - signed in user's ID because we ourselves
191:48 - are creating the document
191:50 - we're going to pass a creative at
191:52 - timestamp to know when this thing was
191:54 - actually created we're going to have a
191:57 - number of members so we know how many
192:00 - members are in this community and then
192:01 - we're going to have the Privacy type and
192:04 - our checklist is going to indicate that
192:05 - are we public private or restricted and
192:07 - we could put infinitely many things
192:09 - right I'm sure Reddit has a ton of stuff
192:11 - stored on their community in their
192:13 - database but for now this is going to
192:15 - work perfectly for us so we actually do
192:17 - need the Creator ID and to do that we
192:19 - need our user so let's call that use off
192:22 - State hook we can import it up here we
192:24 - can say const user is going to be equal
192:26 - to use auth state to make sure that
192:28 - imports from react Firebase Hooks and
192:30 - then pass it our auth object from our
192:32 - client app file
192:33 - awesome now we can come down here and we
192:36 - can say Creator ID is going to be our
192:39 - user.uid
192:42 - the created at value
192:44 - we're going to call the function called
192:46 - server timestamp and this is basically
192:48 - just going to create a timestamp of the
192:50 - current time and the server timestamp is
192:52 - a function that is coming from Firebase
192:54 - firestore so make sure that that Imports
192:56 - up top here
192:57 - our number of members
193:00 - is going to be initialized as one
193:02 - because when this community is created
193:03 - we are going to be the only member and
193:06 - the Privacy type
193:08 - is going to be our community type which
193:10 - is coming from our checklist and get rid
193:12 - of these comments and we just need a
193:14 - comma here so now we have actually valid
193:18 - code to create this document so let's
193:20 - test this out and see what happens and
193:22 - before we do that actually I'm going to
193:24 - also create some loading scene up here
193:26 - so that we can indicate to our user that
193:28 - the creation is in a process so loading
193:31 - set loading is equal to use state
193:34 - and we're going to initialize it as
193:36 - false when this form is submitted
193:38 - meaning that they click on the create
193:39 - Community button after this validation
193:41 - has been done and it's going to actually
193:42 - start going to talk to our firestore
193:44 - database I'm going to set load loading
193:47 - to be true and then when this
193:48 - successfully completes I'm going to be
193:50 - set loading
193:52 - false and actually what I'm going to do
193:55 - is wrap all of this asynchronous code in
193:57 - a try catch block to improve our area
193:59 - handling I'm going to create a try catch
194:02 - block and the way to do that in a
194:05 - shortcut is to just check the word try
194:06 - and this little menu will pop up and
194:08 - just click on this try catch thing and
194:10 - what we're going to do is put all the
194:11 - stuff that we want to try
194:14 - inside of our try block and then inside
194:18 - of our catch block meaning that an error
194:19 - actually occurred console log of the
194:21 - error so usually in my catch blocks I
194:23 - like to indicate what function actually
194:25 - produce the error so handle create
194:27 - Community error
194:28 - and then I can just log at the actual
194:30 - error and under here we're going to set
194:33 - error to be error
194:35 - Dot message
194:37 - we just need to give this a type of any
194:40 - and actually what we're going to do is
194:41 - up here instead of setting the error up
194:43 - here what we're going to do is we're
194:45 - going to throw an error and then that
194:47 - error is going to be caught by our catch
194:50 - block and then we will set that error
194:51 - down here it's going to do basically the
194:53 - exact same thing to change that is
194:54 - basically just copy this string here
194:57 - copy that we can get rid of this line
194:59 - and just say Throw new error and this
195:02 - thing just takes an argument that is a
195:04 - string and that is going to be the
195:06 - error.message that we received down here
195:08 - so same functionality and we don't need
195:11 - this return thing anymore actually
195:12 - because if we throw this error it's
195:14 - going to be caught by this catch block
195:15 - none of this is actually going to be
195:18 - executed anyway
195:19 - I'm gonna get rid of these comments just
195:22 - for to create a bit of room and then I'm
195:24 - just going to add a comment down here
195:25 - just for you guys so if you're reviewing
195:27 - this code later check if Community
195:30 - exists in due
195:32 - okay awesome so this looks pretty good I
195:35 - don't see anything wrong with this so
195:36 - let's try to actually call our function
195:37 - we have loading stage and everything
195:39 - which is nice let's come down here and
195:42 - when we actually click on that create
195:45 - Community we now have a function to call
195:47 - which is going to be handle create
195:50 - community and let's pass our is loading
195:52 - prop and let's make that our loading
195:54 - State variable
195:57 - perfect now let's see if this works so
196:00 - let's go to our database we can see that
196:01 - it is empty let's come over here and
196:04 - let's actually try to create something
196:05 - so I'm going to create a community
196:07 - called chatty
196:09 - chatty's community
196:11 - let's click create community and see
196:13 - what happens okay so something happened
196:16 - let's go see if it's in our database so
196:18 - let me refresh
196:21 - and boom check that out we have it has
196:24 - created a communities collection as well
196:26 - as a document with the ID chattis
196:29 - community and this is the data we're
196:30 - storing in that document so hopefully
196:32 - this gives you a visual idea of what our
196:34 - database is going to look like it's
196:36 - basically just Collections and then
196:37 - documents so we obviously have created a
196:38 - community let's go check our error
196:39 - handling so let's say I try to create
196:41 - this community again what's going to
196:43 - happen
196:44 - so check that out our error was caught
196:47 - down here handle create Community error
196:49 - and we displayed that to the user sorry
196:52 - this community name is taken try another
196:54 - how nice is that so let's create another
196:56 - one uh called new new
196:59 - and click create community
197:02 - that should have been created I'm going
197:03 - to also make it so that the error that I
197:07 - on submit I'm just going to check if an
197:09 - error does exist let's just set the
197:11 - error to the empty to that sort of a
197:14 - fresh submittal so this should have been
197:16 - created so I'm going to create a new one
197:17 - saying random random string
197:20 - and I'm going to click create Community
197:21 - awesome so let's go to our database and
197:24 - we can see that these have been added to
197:26 - our database and the data is actually
197:27 - real time which is really cool so watch
197:30 - this
197:32 - do hey dude and I create it watch on the
197:36 - left
197:37 - it appears there that is so cool and
197:39 - we're going to see how sick real-time
197:41 - data is this is so useful for like chat
197:43 - applications and stuff but this is cool
197:45 - it's super super cool I love firestore
197:47 - so now we can actually create
197:49 - communities all right you guys so now
197:51 - that we can successfully create
197:52 - communities the next logical thing we
197:55 - need to start thinking about is people
197:57 - actually joining these communities
197:59 - because without people inside of a
198:01 - community it's not really a community so
198:03 - this is going to lead into a really
198:05 - interesting conversation about modeling
198:08 - data with a nosql database and it's
198:11 - going to hopefully provide a really
198:12 - interesting learning opportunity for us
198:14 - to compare how we would model this type
198:16 - of data in a SQL versus nosql database
198:20 - I'm going to do some comparisons here so
198:22 - I just want to kind of think about like
198:23 - what actually happens when a user joins
198:26 - a community like from a data standpoint
198:28 - because there are two things we need to
198:29 - know from a community standpoint we need
198:31 - to know how many users are inside of a
198:33 - community and from a user standpoint we
198:36 - need to know which can communities a
198:38 - user is in so that I can go to my
198:40 - communities right our drop down menu in
198:43 - the demo does that these are all the
198:45 - communities that I am in and our entire
198:47 - feed and all of the posts that we see is
198:49 - built off of what communities that we're
198:51 - in and from a community standpoint I
198:52 - need to know how many members are inside
198:55 - of this community and let's think about
198:56 - the relationship between a user and a
198:58 - community
198:59 - a user can be a part of many communities
199:02 - and a community can have many users
199:06 - so therefore we have what is called a
199:08 - many-to-many relationship now this isn't
199:10 - a course on uh database relationships
199:13 - but I do want to cover this a little bit
199:14 - because it's really important to
199:16 - understand this before we move forward
199:18 - if it's your first time using like a
199:19 - nosql database really good opportunity
199:21 - for learning I think so what I've done
199:23 - is I have created this diagram here
199:25 - which I'm just going to expand this over
199:27 - a little bit
199:29 - and basically this is how we would model
199:31 - this type of data in a SQL environment
199:33 - in order to model this type of
199:34 - relationship which is many to many we
199:36 - would need what's called a join table
199:38 - and this is a join table here right
199:39 - again a user can have many communities I
199:42 - can join as many communities as I want
199:43 - and a community can have infinitely many
199:46 - users uh so to model the many to many we
199:48 - would need a join table however in nosql
199:52 - we have a lot more freedom and we can
199:54 - store data completely differently pretty
199:57 - much however we want this does make our
199:59 - lives easier it gives us more freedom
200:00 - but it also introduces complications
200:03 - because you can run into scalability
200:05 - issues really fast if you don't think
200:08 - through how to best model your data in a
200:10 - nosql database now this again this is
200:12 - not like a course on like SQL versus no
200:14 - SQL but I do want to sort of compare a
200:17 - few methods here so I just wanted to
200:18 - show this diagram to give you a visual
200:19 - representation of how this relationship
200:22 - would be modeled in SQL let's look at
200:25 - how we might do this in a nosql database
200:28 - which fires store is all right so what
200:30 - I've done is I've created this temp.js
200:32 - file to kind of show how this freedom in
200:35 - a nosql environment allows us to develop
200:38 - many solutions to the same problem and
200:40 - we can model our data in many different
200:43 - ways normalization is not required and
200:45 - we can therefore have this nested
200:48 - structure here we can have arrays of
200:50 - strings we can have arrays of arrays of
200:52 - arrays of strings of objects of strings
200:54 - we can do like whatever we want with our
200:57 - data which is really great it can
200:59 - simplify our lives a lot but it does
201:01 - come with some cost because if we don't
201:03 - do it carefully we could run into some
201:06 - major issues down the line especially
201:08 - when scalability comes into play so what
201:11 - I've done here is I've just sort of
201:12 - created three different solutions here
201:13 - that we're going to go through quickly
201:15 - to sort of illustrate the thought
201:16 - process when designing data with a nosql
201:18 - database the number one thing that I
201:21 - learned when modeling data with a nosql
201:23 - database something I saw on stack
201:24 - Overflow was someone said when you're
201:26 - modeling data with a nosql database the
201:28 - number one thing think about is how your
201:30 - data is actually appearing on the screen
201:32 - like when you look at a certain
201:33 - component what data is in there and it
201:36 - really helps you efficiently kind of
201:37 - think about where to have this sort of
201:40 - nested structure and where to group
201:41 - things together on your document and
201:43 - this is sort of something that just
201:44 - takes practice and you just have to like
201:46 - kind of honestly practice developing
201:47 - nosql databases for different sorts of
201:50 - features in order to really understand
201:51 - how to develop the optimal structure now
201:55 - as we go through these examples let's
201:57 - keep in mind the relationship we need we
201:58 - need to know how many users are in a
202:01 - community and we need to know what
202:03 - communities a user is in so let's look
202:05 - at this example these represent a
202:06 - community document and a user document
202:08 - okay so what we could do is we could
202:11 - store an array of all of the users that
202:13 - belong to a certain Community right
202:15 - every time I join a community I can add
202:17 - that user's ID to this array so now we
202:19 - know how many users are in a community
202:20 - and these comments just kind of
202:22 - represent other data that would be
202:23 - stored on the community document but
202:24 - let's think about scalability on Reddit
202:26 - communities can have you know millions
202:28 - of users you know infinitely many users
202:30 - there are some communities with 20
202:32 - million plus users I'm pretty sure right
202:33 - like that's a lot and in Firebase our
202:35 - documents can only be one megabyte in
202:38 - size which is about 40 000 Fields now
202:41 - we're obviously over that 30 000 limit
202:43 - here we're sort of in the 11 million
202:45 - area and this is totally realistic for
202:47 - Reddit right and I know that our little
202:49 - demo app is not going to have 11 million
202:51 - users or 30 million users but it's
202:53 - really good to think about these things
202:54 - and just kind of think about it how it
202:56 - would be in the real world because it
202:58 - helps you become a better engineer this
203:00 - is not great because this array can get
203:02 - infinitely long and it definitely puts
203:03 - us over our limit so from a user's
203:05 - perspective we could store all of the
203:07 - community IDs that I am in on a
203:10 - community's array inside of the user's
203:12 - document for example like the Tesla ID
203:14 - the baking ID and this is totally fine I
203:16 - don't see any CL ability issues here
203:18 - because you know a user is probably only
203:20 - going to join like I don't know 20 to 50
203:22 - communities like 50s even a lot I think
203:24 - I don't know so I think this type of
203:25 - approach is fine we're restoring you
203:27 - know the communities on the user but
203:29 - this is definitely not
203:30 - um and so I think this this could work
203:32 - for some or some variation of this could
203:34 - work but we would have to sort of tweak
203:36 - the community logic a bit let's talk
203:37 - about option two so option two is
203:39 - essentially just
203:41 - the SQL approach right this is option
203:43 - two and what we do here is basically
203:45 - create a collection in our database uh
203:47 - that would sort of mimic this sort of
203:49 - SQL like join table over here but having
203:51 - this sqlite structure calls for SQL like
203:54 - queries which would be like join
203:56 - statements and you know just querying
203:58 - multiple tables and Firebase does not
204:00 - support join statements therefore we
204:03 - would have to make multiple queries and
204:05 - one of the main benefits of nosql is
204:07 - that we can actually use this NASA
204:09 - structure to our advantage to prevent
204:11 - that we can prevent making multiple
204:13 - queries we can prevent join statements
204:14 - and really simplify Our Lives if we just
204:16 - do the nested thing properly so that's
204:18 - why we're going to avoid having this SQL
204:20 - like structure for this case
204:22 - now let's talk about option three and
204:24 - this is the solution that we're actually
204:26 - going to go with the user document in
204:28 - this case is quite similar to case one
204:31 - where we had just an array of community
204:34 - data on stored on the user and so we
204:36 - know what communities the user is in
204:39 - however in this case we're not storing
204:41 - just the ID we're storing an array of
204:44 - objects and those objects can contain
204:47 - sort of snippet-like data of that
204:49 - Community hence the name Community
204:50 - Snippets now why is this useful well a
204:53 - this is useful because what I mentioned
204:55 - already we know all of the communities
204:56 - that a user is in and B this is useful
204:58 - because what if in some of our
205:00 - components we need more than just the
205:02 - community ID itself but we don't want
205:04 - the entire Community document we want
205:06 - somewhere in between let me explain this
205:08 - with an example let's come to our demo
205:10 - and if we look at this drop down menu
205:12 - here we can see that we have this list
205:14 - of communities that I'm in
205:16 - but we really only have the name and the
205:19 - profile picture we don't have all of the
205:21 - data associated with all these
205:23 - communities right and we don't really
205:25 - need it like when Shady lands on
205:27 - reddit.com I don't really care about all
205:30 - of the data in Tesla all of the data in
205:31 - NBA all of data and music I don't care
205:34 - about that when I'm on this page I just
205:36 - care about the names of the communities
205:38 - that I make and the profile picture so
205:39 - in this list component the name itself
205:42 - which is also the ID is not enough but
205:45 - the entire Community is too much when I
205:47 - click on one of these things then I care
205:50 - about all that data then I need to know
205:52 - how many members in the community then I
205:54 - need to know be created at and all this
205:55 - other potential data that could exist
205:57 - right Reddit probably has tons of data
205:59 - stored on their Community documents in
206:01 - their database
206:02 - this design is perfect for what we need
206:06 - because it allows us to store just the
206:08 - minimum amount of data we need for each
206:10 - Community to display it but we're not
206:12 - over fetching data we're not getting
206:14 - data about each community that we don't
206:16 - really need and this is really good from
206:17 - a front-end scalability perspective
206:19 - we're not overloading our front end with
206:21 - a bunch of unnecessary data we're just
206:23 - grabbing Snippets to present it in a
206:26 - meaningful way in this case all we need
206:28 - are two things to name the profile
206:30 - picture so as for the community for a
206:32 - community all we need to know is the
206:33 - number of members inside of a community
206:35 - I don't need to know every user that's
206:37 - in the community because on reddit.com
206:38 - you can't really go into the list of all
206:42 - of the members in that Community I don't
206:43 - need that for Reddit maybe I would for
206:45 - another app but for Reddit all I need is
206:46 - a number of members right if I go to a
206:48 - community page all that they're
206:49 - displaying here is the number of members
206:51 - so in terms of like the relationship
206:53 - between users and communities I only
206:56 - care about this and then all we need to
206:57 - do is every time a user leads or joins a
207:00 - community we just have to update this
207:01 - number if this was clickable if I could
207:03 - click on this and view a giant list of
207:04 - all of the users in the community maybe
207:06 - that would call for a join table like
207:09 - this we are going to go with this
207:10 - solution here it seems to satisfy all of
207:13 - our needs it models the many-to-many
207:15 - relationship okay that was a lot on SQL
207:18 - versus no SQL I hope that did clarify
207:21 - things and I hope it was insightful to
207:22 - kind of see different examples of ways
207:24 - we could solve this problem if you've
207:26 - got absolutely none of that I apologize
207:28 - and as I always say if this does not
207:30 - make sense at first glance just give it
207:32 - time like kind of absorb into your brain
207:35 - and as we develop it into the app it
207:37 - should become more clear and this
207:39 - document structure will also get us into
207:41 - using database transactions which we are
207:43 - going to see next all right you guys now
207:46 - that we have to solved the problem of
207:47 - users joining communities we can now
207:49 - actually Implement that data structure
207:52 - in to our app so as you recall from our
207:54 - discussion about notes SQL we do need to
207:56 - create a sub collection on our user
207:59 - document called Community Snippets and
208:01 - store these little pieces of data in
208:03 - there every time I join or leave a
208:04 - community so that is what we're going to
208:06 - do now but we have a small problem let's
208:10 - go to our fire story database for a sec
208:12 - so if you look at this we actually do
208:14 - not have a collection called users which
208:16 - is weird right like we have the ability
208:18 - to log users in but we don't have them
208:22 - in our database it's kind of weird isn't
208:24 - it yeah it is weird so the way Firebase
208:26 - works is their authentication is
208:29 - completely separate from their firestore
208:31 - database they're not linked at all it is
208:34 - meant to be an authentication solution
208:36 - only so in order to add custom things to
208:39 - our users like I was mentioning before
208:41 - with the karma score and usernames and
208:43 - anything that's custom and in this case
208:44 - the community snippet subcollection we
208:46 - need to store these users in our
208:48 - firestore database we somehow need to
208:50 - get them in here and this is where we're
208:52 - going to talk about cloud documents
208:53 - which should not take very long at all
208:55 - it's just going to be a few minutes so
208:56 - what we're going to do from a high level
208:57 - is just Implement functions into our app
209:00 - and we're just going to write a single
209:02 - function version that is going to be
209:03 - listening to our authentication Service
209:05 - and then every time an authenticated
209:07 - user is created is going to just
209:09 - automatically store that user in our
209:12 - firestore database and then once the
209:13 - user's collection is in here it'll
209:15 - appear the same exact way these are but
209:17 - then we can actually add custom things
209:19 - to it so let's go ahead and do that very
209:20 - quickly it shouldn't take any more than
209:21 - five to ten minutes so once you go into
209:23 - the function section of the console you
209:25 - might see something slightly different
209:26 - than this I already clicked like the get
209:28 - started button if you're there for the
209:29 - first time you might look a little bit
209:30 - different than this I can't remember
209:31 - what exactly what it looks like but
209:33 - basically what this is saying to me is
209:34 - that I need to upgrade my project so to
209:37 - use cloud functions we need to upgrade
209:39 - our project from a free project to a
209:41 - pay-as-you-go project but do not worry
209:42 - you are not going to be charged a single
209:45 - Cent In order to be charged anything for
209:47 - Firebase your app has to have like
209:49 - millions and millions of users and
209:51 - millions and millions of reads and
209:52 - rights to your database you're not going
209:54 - to be charged a single Cent to sign up
209:56 - for a billing plan it will ask you to
209:58 - enter a credit card but if for some
209:59 - reason you do not want to proceed with
210:01 - Cloud functions or whatever reason I'm
210:03 - going to also right after this do
210:04 - another workaround solution without
210:06 - cloud functions to achieve this same
210:07 - functionality of getting our user into
210:09 - our database however I would recommend
210:10 - you if you're able to use cloud
210:12 - functions as it is the recommended
210:14 - method by Firebase and the community for
210:16 - this type of user authentication flow
210:17 - totally up to you so I'm going to
210:19 - quickly walk through the Cloud firestore
210:20 - solution and then right after this I'll
210:21 - just do like a quick five minute chapter
210:23 - on doing the same exact thing without
210:24 - cloud functions so depending on what you
210:26 - want to do watch accordingly okay so to
210:29 - proceed with Cloud functions let's click
210:31 - on upgrade project or whatever is there
210:33 - for you just click on it and it'll sort
210:34 - of take you down a similar path so if
210:36 - it's your first time seeing this it's
210:37 - probably going to ask you to create like
210:38 - a Google Cloud account or something and
210:40 - that's where you're going to like
210:41 - actually put in like your billing
210:42 - information like your credit card and I
210:43 - already have my account created so it's
210:45 - just asking me to set a billing budget
210:47 - I'm just going to put one dollar not
210:48 - even going to be charged a dollar and
210:50 - this is basically saying you will be
210:51 - charged as you go don't worry no charges
210:53 - will occur I promise but I'm sure click
210:55 - purchase and now it says you
210:56 - successfully upgraded okay so once
210:58 - you've upgraded your project to a pay as
211:00 - you go plan you can just click get
211:01 - started and we're going to install a few
211:03 - packages okay so let's click on this and
211:06 - let's go to our project terminal and
211:11 - just install that the dollar sign always
211:14 - gets me okay so something I just noticed
211:16 - that some of you may come across as well
211:17 - is when I try to run this command here
211:20 - on the right it gave me an error that I
211:22 - do not have permissions so I just need
211:24 - to change the command to use sudo so I
211:27 - just added sudo in front of the entire
211:28 - command cool so once we have the
211:30 - Firebase CLI you can just click continue
211:33 - and now we're just going to run a few
211:36 - commands inside of our project to
211:38 - initialize Cloud functions and then
211:39 - deploy our functions so after we
211:40 - initialize our project we will then
211:42 - deploy them so that they are actually
211:43 - deployed on the cloud and we can use
211:45 - them all right so let's do Firebase init
211:48 - okay so right now we just want to set up
211:49 - functions so we just highlight the
211:51 - functions option and press the space bar
211:53 - and then we just press enter and it's
211:55 - going to ask us which project we would
211:57 - like to use use an existing project
211:58 - because we have created a project on our
212:00 - console and the one I want to link up is
212:02 - Reddit clone tutorial I believe and it's
212:05 - saying what language would you like to
212:06 - use to write Cloud functions we are all
212:09 - about typescript do you want to use
212:10 - eslint and I'm going to say no do you
212:12 - want to install dependencies with npm
212:14 - now because I'm just going to say yes so
212:16 - I'm going to click finish over here our
212:17 - app should have functions and it's
212:19 - waiting for us to deploy so if we come
212:21 - over to our directory you will see that
212:22 - in the root of our project we have been
212:24 - given it three new things we have this
212:25 - firebase.json file we have this Firebase
212:28 - RC file and then we have this functions
212:31 - directory now this is where we're going
212:33 - to be writing all of our Cloud functions
212:35 - in this index.ts file this functions
212:37 - directory is your serverless backend
212:38 - it's being run on the Google servers and
212:40 - it may require different packages than
212:42 - your front end you'll notice that if you
212:43 - go to your package.json file it has
212:44 - these two dependencies Firebase
212:46 - functions which makes sense and it also
212:47 - has this fire service admin package
212:49 - installed and it's through this admin
212:51 - package that we're going to be able to
212:52 - actually interact with our database
212:53 - let's go see how we can do that so here
212:55 - we are inside of index.ts and I'm just
212:57 - going to get rid of all of these
212:58 - comments and at the very top here I'm
213:00 - just going to say import Star as admin
213:02 - from Firebase admin and on this admin
213:06 - instance let's call this method called
213:07 - initialize app which is basically just
213:09 - going to boot up our app on the server
213:11 - and then we just need to create a
213:12 - database instance so that we can
213:13 - actually write to our database all right
213:16 - and underneath here we're actually going
213:17 - to write our function so we're going to
213:19 - say export cons and our function name is
213:21 - going to be called create
213:22 - user document
213:24 - we're going to use our functions
213:26 - instance and tap into our auth service
213:29 - and then we're going to say dot user
213:31 - because the user is the part of the auth
213:32 - service we're interested in and then
213:34 - we're going to say dot on create
213:36 - and then we're going to give this a
213:38 - callback function that is going to
213:39 - trigger every time a user is created and
213:41 - this callback function is going to be
213:42 - asynchronous and it's going to take in a
213:44 - user as an argument I'm going to save
213:46 - this set of format inside of this
213:48 - function we are going to say DB dot
213:50 - collection
213:51 - ml collection that we want to write to
213:53 - is users and we want to set a document
213:57 - by saying dot doc the ID of the document
213:59 - we're going to create is going to be
214:00 - user dot uid the ID of the user and then
214:04 - we're going to set these documents to be
214:07 - json.parse and then inside json.parse
214:09 - we're going to say json.stringify and
214:12 - then the user and this is kind of a
214:14 - weird workaround that you have to do if
214:15 - you do not do this you will get a
214:17 - serialization error and this just seems
214:19 - to be the solution among the community
214:20 - that is our entire function it is just a
214:22 - few lines and now we are ready to deploy
214:25 - this function and actually store users
214:27 - in our database so let's go back to our
214:28 - terminal and there is a command that
214:31 - we're going to run that is going to
214:32 - deploy only functions because right now
214:34 - we're only interested in deploying
214:35 - functions so I'm going to copy this over
214:37 - and paste this in my terminal
214:39 - now this may take several minutes to run
214:41 - the first time you run it it usually
214:42 - does speed up uh after the first time
214:44 - but I think the first time it sort of
214:46 - has to go and actually provision the
214:47 - resources on the Google servers so just
214:49 - give it a few minutes okay so once yours
214:51 - has successfully deployed go back to
214:53 - your console and you should now see that
214:54 - function inside of this dashboard here
214:57 - and you can see what the trigger is to
214:58 - actually determine that function so it's
215:00 - pretty cool and the logs are a good
215:01 - place to look if the function ever fails
215:03 - or there's some sort of bug uh the log
215:05 - usually have details on what might be
215:06 - going on so now let's actually go try
215:08 - this out and try to create a user and
215:10 - see if it gets stored in our database so
215:13 - I'm going to go to my app
215:15 - and log out let's click sign up now
215:18 - let's create a new user called Shady
215:20 - that's shady
215:22 - .com password is going to be Shady
215:25 - actually and before we do this let's go
215:27 - to our firestore database and we can
215:30 - clearly see we do not have any users in
215:32 - here so let's see if it is created let's
215:34 - go to here
215:36 - and click sign up let's go to here it
215:39 - sometimes takes a second as well it
215:40 - might take like somewhere between like
215:41 - five to ten seconds so refresh
215:45 - and there is no user which is odd okay
215:49 - let's go to functions
215:52 - let's check the logs
215:55 - um
215:56 - okay so this was at 9 24 so we're just
216:00 - now pretty much
216:01 - function execution executed finish with
216:04 - status error oh okay it did not work
216:09 - um entry.2 adjacent is not a function
216:12 - okay I don't even know if you can see
216:13 - this sorry this is really really small
216:15 - um I'm getting it to Json error which is
216:17 - really weird I think it has to do
216:18 - something to do with this I don't know
216:20 - why because I have this written the
216:21 - exact same way in my demo all right so I
216:23 - did some research on this and I'm
216:25 - honestly not sure what is going on I
216:27 - have no idea why I'm getting an error
216:29 - and why it's not successfully writing to
216:30 - the database it definitely has to do
216:32 - with this because I tested out just
216:34 - writing a plain JavaScript object to a
216:35 - database and it did work so this
216:37 - function is being triggered and we can
216:38 - obviously see it's being triggered from
216:40 - the logs um so I don't have no idea why
216:43 - this is happening I did the exact same
216:45 - thing just a few weeks ago when I built
216:46 - the demo so no clue what's going on and
216:49 - I don't want to spend too too much time
216:51 - on this because it's not extremely
216:52 - critical so for those of you that are
216:54 - experiencing the air as well I'm just
216:55 - going to do a quick workaround solution
216:57 - if you're not having the error that is
216:58 - amazing I hope you're not having the air
217:00 - but if you are this is a potential
217:02 - workaround so what we can do is we can
217:03 - just create a new JavaScript object and
217:06 - we can store basically just the most
217:07 - important parts from this user object it
217:09 - as a new object and if you look at kind
217:12 - of one might be on this user object
217:13 - there's a lot of stuff going on here and
217:15 - a lot of it is kind of nested we don't
217:17 - really need all this data especially for
217:18 - our application so I'm just going to
217:20 - store the most important things which
217:21 - are like the uid the email and like the
217:24 - photo URL and then maybe the provider
217:26 - data so that we know it's authenticated
217:27 - with Google or something just the most
217:29 - important things
217:30 - so like four things so I'm just going to
217:32 - take this user and I'm going to say uid
217:34 - is going to be user.uid email is going
217:38 - to be user dot email
217:42 - display name is going to be user dot
217:45 - display name and this is only going to
217:47 - exist for all auth users and provider
217:49 - data is going to be user dot
217:51 - providerdata okay and then instead of
217:54 - this
217:56 - json.parts.json.stringify thing I'm just
217:57 - going to pass in new user and this
218:00 - should work so if you did have to
218:02 - implement this change we will have to
218:04 - redeploy so let's go ahead and do that
218:07 - and once this is done we will check back
218:10 - in
218:11 - all right so I'm going to try this again
218:13 - so I'm going to go back to my app I'm
218:14 - going to log out and then do this whole
218:16 - thing again I'm going to create a user
218:18 - called lol.com I love law.com it's one
218:22 - of my favorite websites just kidding I
218:23 - have absolutely no idea what's
218:25 - outlaw.com sorry if there's something
218:26 - not good uh okay and then let's go to
218:30 - our database and see if this actually
218:31 - works okay so it's saying that it's
218:34 - successfully completed sorry if this is
218:36 - super small but basically it says that
218:37 - it finished with a status of okay so
218:39 - let's go to our database and yeah look
218:41 - at that so the user stable has been
218:43 - created and that data that we indicated
218:45 - has been stored in there now if yours
218:47 - worked with our initial solution with
218:48 - the json.parse thing there'd be a lot
218:50 - more stuff in here but this is really
218:52 - all we need and it's on this document
218:54 - where we're going to create that sub
218:55 - collection Community Snippets so now I'm
218:57 - going to implement the solution for
218:59 - getting our users into our database
219:01 - without using Cloud functions for those
219:02 - of you who chose not to do them and it's
219:05 - actually very very straightforward it's
219:06 - only a few lines of code okay so let's
219:08 - start off with our signup component and
219:10 - so basically what we're going to do is
219:11 - in the signup component once a user has
219:14 - been successfully created with this
219:16 - create user with email and password
219:17 - function we're just going to put it into
219:19 - our database that's it so this function
219:21 - itself does not return the newly created
219:24 - user but we can access it as the second
219:27 - parameter from the hook up here remember
219:29 - these four arguments and it's called the
219:31 - user cred because this is not the use
219:32 - user object itself it is like the user
219:34 - credentials but the user object itself
219:36 - is on this object here which we will see
219:39 - in just a second okay so I'm going to
219:41 - create a function called create user
219:42 - document and it's going to be an
219:44 - asynchronous function that takes in a
219:46 - user which is a type user from Firebase
219:48 - okay so the way we're going to write
219:50 - this user to our database is with a
219:53 - function from Firebase called add doc
219:55 - now we basically just need to tell this
219:56 - function what collection we are writing
219:58 - to so we can create a collection
220:00 - reference using the collection function
220:02 - from firestore and then we can pass this
220:04 - function our firestore object from
220:06 - Client app and then the collection that
220:08 - we want to write to is users and then as
220:10 - a second argument we're going to pass
220:12 - the actual data that is going to be
220:14 - written into this document and in that
220:16 - case it is user now all we need to do is
220:19 - just call this function so what we can
220:21 - do is we can create a use effect and
220:23 - this use effect can have the dependency
220:25 - user cred so that every time user cred
220:27 - changes it will run this function and if
220:30 - user cred
220:32 - is a non-null value meaning that the
220:34 - user was successfully created we want to
220:36 - do something with it and that something
220:38 - is right it through a database so we can
220:40 - call our function create user document
220:42 - and we can pass the user object and the
220:44 - user object is going to be user cred dot
220:47 - user and that's what I meant before when
220:48 - I said you can access the user on this
220:50 - user cred object so when we do that this
220:53 - should work exactly the same as our
220:54 - Cloud function so let's go test it out
220:56 - hey guys really important announcement I
220:58 - have to make as I am editing this video
220:59 - here please change this user that the
221:01 - arrow is pointing to and wrap it in
221:03 - json.parts json.stringify Firebase will
221:06 - not like it if you do not it will error
221:08 - out and it will not work the solution
221:09 - shown in the video does work for the
221:11 - first attempt but it eventually does
221:12 - fail so I did have to refactor this part
221:15 - of the code so please implement this I
221:16 - do apologize for this confusion so right
221:19 - now I only have a user called
221:20 - lolatlaw.com so let's go create a new
221:22 - one sign up let's sign up as dude at
221:25 - dude.com
221:27 - password chatty sign up okay let's go
221:31 - check our database users we can see that
221:33 - dude.com is in there perfect so it did
221:36 - it did its job so we just needed these
221:38 - two additions to use effect and the
221:39 - create user document now we can do
221:41 - pretty much the exact same thing in our
221:43 - oauth bones so okay so we can pretty
221:45 - much do the exact same thing in here I'm
221:47 - just going to rename this user cred
221:50 - and I'm going to create a function
221:52 - called create user document same name as
221:54 - the other one it's going to be async
221:56 - it's going to take in a user
221:58 - now inside of this function the only
222:00 - difference between this and the sign up
222:02 - is that in this function we're going to
222:04 - call set dock the other function was
222:06 - calling add doc so we need to call set
222:08 - doc because when you're authenticating
222:10 - with Google we don't know if you're
222:12 - logging in or signing up we don't know
222:13 - if you're new or if you've already been
222:15 - here before the set doc function does
222:18 - that functionality it's either going to
222:19 - create a new document if it does not
222:21 - exist or it's going to update the
222:22 - already existing document so it can
222:24 - handle both the login and signup case
222:26 - for Google perfectly okay so what we
222:27 - need to do is create a document
222:29 - reference to that potentially existing
222:32 - document or the new document and the way
222:34 - we can do that is we can say cons
222:35 - user.craft is going to be equal to Doc
222:38 - pass in our Firestar object The
222:40 - Collection we're interested in is users
222:42 - and the ID of this new or existing
222:44 - document is going to be user.uid
222:47 - and all we need to do is just say await
222:49 - set dock pass in our user doc graph and
222:52 - then just give it the data that we want
222:53 - to set the doc to be which is user
222:56 - and we use this same set doc function
222:57 - when we were creating our communities
222:59 - and we can have pretty much the exact
223:00 - same use effect in this function
223:05 - give the dependency of user cred
223:08 - check for a non-null value of user cred
223:11 - and if it is not null we can pass it to
223:13 - our create user document function
223:16 - user cred dot user save this and let's
223:20 - give this a go hey guys we need to do
223:21 - the exact same thing here so please wrap
223:23 - your user in the exact same thing we did
223:25 - just a few seconds ago thanks so I went
223:27 - to my authentication thing and I have no
223:30 - Google auth user right now so let's go
223:32 - try to create a thing for my Shady
223:34 - gmail.com account because that's the
223:36 - only Google account I have let's sign up
223:37 - continue with Google
223:39 - so it's going to authenticate and if I
223:42 - go to my database now
223:44 - firestore I should see a third user and
223:48 - yes I do Shadowmere gmail.com it says
223:50 - the provider id is google.com so perfect
223:52 - now we can write users to the database
223:55 - whether or not you use cloud functions
223:57 - or not and we can proceed with the
223:59 - community functionality all right you
224:00 - guys now that we have users in our
224:02 - database and we're able to actually add
224:03 - custom properties to those users let's
224:06 - move forward with our community logic
224:08 - and actually build in this community
224:09 - snippet functionality so now we are
224:11 - ready to introduce what is called a
224:13 - database transaction and a transaction
224:15 - by definition is a set of read or write
224:19 - operations on one or more documents and
224:22 - transactions are really useful because
224:23 - they represent an All or Nothing
224:25 - operation so what that means is is if
224:27 - you have a set of database operations
224:29 - that you are doing like updating several
224:31 - documents at once it is very useful to
224:34 - have all of these things succeed or none
224:36 - of them if one of them fails let's fail
224:38 - them all because they're sort of
224:39 - dependent on each other so in our case
224:41 - when a user creates a community we are
224:43 - doing two very important things the
224:44 - first thing we're doing is we're
224:45 - actually creating the community itself
224:47 - in the community's collection and the
224:49 - second thing we're doing is we're going
224:50 - to add that Community to the users
224:52 - Community Snippets right we are
224:54 - automatically joining that user to the
224:56 - community if they create it and we
224:58 - either want both of these database
224:59 - operations to succeed or none of them so
225:01 - we do not want to create the community
225:03 - if the community is not successfully
225:05 - added to the user's Community Snippets
225:07 - and we definitely do not want to add the
225:09 - community to the users Community
225:11 - Snippets if the community fails to be
225:13 - created and so that's why transactions
225:15 - are extremely useful here transactions
225:17 - are very similar to batch rights and we
225:19 - are going to see batch rights very
225:20 - shortly there's just a slight difference
225:22 - between the two but I will talk about
225:23 - that more when we get to it okay so
225:25 - let's go to our app okay so here is how
225:28 - we Implement a transaction in Firebase
225:30 - so we are going to use an asynchronous
225:32 - option and that function is called run
225:34 - transaction and this is coming from
225:35 - firestore so import that the first
225:37 - argument to this run transaction
225:39 - function is our firestore object as
225:41 - usual and the second argument is going
225:43 - to be a callback function and this
225:44 - callback function is going to be
225:46 - asynchronous
225:47 - and it's going to give us this
225:50 - transaction object that we're going to
225:52 - use to actually make rights to our
225:53 - database so what we're going to do is
225:54 - we're going to add this first check into
225:56 - our transaction checking if the
225:58 - community exists in our database rather
225:59 - than calling this get doc function we
226:01 - are going to change this to
226:04 - transaction dot get
226:07 - pretty much the same thing we're just
226:09 - making it part of the transaction now
226:10 - the next thing we want to do is we want
226:12 - to create the community so let's move
226:13 - this up here and we are going to
226:17 - change this from set dock to transaction
226:19 - dot set transaction set operations are
226:23 - not asynchronous themselves because the
226:25 - entire transaction is asynchronous we
226:27 - don't need to put the away keyword in
226:28 - front of our transaction sets we do need
226:30 - them in front of our gets though and the
226:31 - next thing we want to do is create the
226:34 - community snippet on that user
226:37 - we're going to say transaction dot set
226:40 - so what we're going to do is write a new
226:43 - document to the community Snippets
226:45 - subcollection which lives on the user
226:48 - document so we're going to use the doc
226:50 - function from Firebase we're going to
226:51 - pass it our firestore object and the
226:53 - second argument to this doc function is
226:55 - going to be the path to the document
226:57 - we're about to create and paths are
227:00 - absolute paths and they start at the
227:01 - root of our database so if we go to our
227:03 - database this is the root and then we
227:05 - just have to sort of jump into each
227:07 - column here that's sort of like how you
227:10 - can think of a path we're going into
227:11 - here then into here then into the new
227:13 - thing so the path in this case is going
227:14 - to be users because we're going into the
227:16 - user's collection
227:17 - the ID of the user document we're
227:19 - interested in is user.uid
227:23 - and we are writing to a sub collection
227:26 - and the sub collection name is community
227:31 - Snippets so this is the first time we've
227:33 - seen this path notation and the way I
227:35 - want you to think about this is
227:36 - collection document collection document
227:40 - collection document and you can go as
227:41 - deep as you want in our case we're going
227:43 - into the users collection the currently
227:45 - users document and then that current
227:48 - user's sub collection called Community
227:50 - Snippets collection document collection
227:52 - the third argument of this doc function
227:54 - needs to be the ID of the document that
227:57 - we're creating which in our case is
227:58 - community name because their names serve
228:01 - as IDs and now let's hop out of our doc
228:03 - function and as a second argument to the
228:05 - set function we need to just pass in the
228:07 - actual data that we want to store in
228:10 - this document and this and the data in
228:12 - this case is our community snippet the
228:14 - community snippet has a community ID
228:16 - which is just Community name
228:19 - and then we're going to add another
228:20 - property called is moderator and the is
228:23 - moderator key means am I a moderator of
228:25 - this community and we are setting it to
228:26 - be true here because if I created the
228:28 - community I'm automatically being set as
228:30 - a moderator and I'm going to be given
228:31 - different permissions than other users
228:33 - who are not moderators and that is it
228:35 - that is our entire transaction so if one
228:37 - of these things fail all of them are
228:39 - going to fail which is really good and
228:40 - it maintains a high level of data
228:42 - Integrity all right so let's actually
228:44 - see this in action and see if it works
228:46 - what we should see happen is the new
228:48 - community should show up here in
228:49 - communities and then if I go to the
228:51 - users collection and go to the actual
228:53 - user that created the community we
228:54 - should see a sub collection inside of
228:57 - that document which should have the
228:59 - newly created Community snippet on it
229:01 - and hopefully this will clarify this
229:02 - sort of path structure once we sort of
229:04 - have a visual representation of what it
229:06 - looks like all right so I'm going to use
229:07 - a user that I know exists so let's use
229:10 - lol.com let's go to our app and honestly
229:13 - do not know who I am logged in as right
229:15 - now so I'm just going to log out
229:17 - actually I could have just checked the
229:18 - username
229:19 - wow uh whatever okay so let's login and
229:23 - let's use lol.com
229:26 - and let's go to here create Community
229:29 - let's create a community called laws and
229:32 - new group I have no idea that's a
229:35 - terrible name okay create Community all
229:38 - right no errors that we see so let's go
229:40 - to our database and let's go to
229:43 - communities so we see Law's new group
229:46 - which is perfect that's awesome let's go
229:48 - to our law user
229:51 - okay so we're at law.com and now we can
229:54 - see that there is a sub collection on
229:56 - law.com document called Community
229:58 - Snippets with an ID of Law's new group
230:01 - and the community ideas in here is
230:03 - moderators true and now you can kind of
230:04 - see that path structure that I'm talking
230:06 - about so users user ID and then
230:08 - Community Snippets and then the ID of
230:11 - that Community snippet and then the
230:12 - actual document at that field and later
230:14 - when we add profile pictures to our
230:16 - communities this is where that URL is
230:18 - going to be stored as well all right so
230:19 - now we know what communities that law
230:22 - that law.com is in which is super cool
230:24 - star transaction is working successfully
230:26 - all right you guys now that we are
230:28 - successfully able to create communities
230:29 - and store those Community snippets on
230:32 - the user so we know what communities
230:34 - each user is in let's now create the
230:36 - Community page itself and this is going
230:38 - to be our first look at server side
230:39 - rendering with nexgis so inside of our
230:43 - Pages directory we need to create a
230:45 - folder structure that reflects the
230:46 - Community page rep and if you go to
230:48 - Reddit their page route is reddit.com r
230:51 - slash Community name I don't know if you
230:53 - can see this it's super small but it's
230:55 - our slash Community name in this case
230:57 - it's comp side but this can change right
230:59 - there's infinitely many communities so
231:01 - our folder structure needs to be very
231:02 - similar and remember that the folder
231:04 - structure in your pages folder
231:06 - represents your client-side routes and
231:08 - our clients head route in this case is r
231:10 - slash Community name so inside of pages
231:13 - we need to create a folder called r
231:16 - and then inside of R we need to create
231:18 - another folder called Community name but
231:20 - this community name is going to be a
231:23 - dynamic route because the route changes
231:25 - it could be computer science it could be
231:27 - reading it could be baking it could be
231:29 - Tesla so it is dynamic and the way to do
231:31 - Dynamic routes in an xjs is to put these
231:35 - square brackets around it and then
231:36 - inside of these square brackets we
231:37 - actually put the name of the dynamic
231:40 - variable and in this case the dynamic
231:41 - variable is community ID so we're going
231:44 - to say community ID and then inside of
231:46 - this folder we can create a file called
231:48 - index.tsx so we can access this index
231:51 - route by going to localhost 3000 slash R
231:54 - sum Community name and so just to really
231:57 - illustrate this client-side routing
231:58 - concept while we're here let's create
232:00 - another file called submit
232:02 - dot TSX because that's going to be the
232:04 - page that we actually create posts on so
232:06 - if I go to our demo we have our r slash
232:08 - baking route this is the home page of
232:09 - the community then if I click on this I
232:11 - go to the submit page which is our slash
232:14 - baking slash submit index is the home
232:16 - page submit is the submit page all right
232:18 - so let's go back to our app so let's
232:20 - start with the index page so we're going
232:22 - to start off by using our snippet as
232:23 - usual and I'm just going to rename these
232:25 - props to be Community page props
232:28 - rename this one as well Community page
232:30 - props just like that and then I'm going
232:32 - to rename the component itself to just
232:34 - be Community page
232:36 - and Community page and I'm going to put
232:40 - the text in here
232:41 - Community page
232:44 - so now if I go to localhost 3000 r slash
232:49 - hey dude or something it's going to take
232:52 - me to this page that should say
232:54 - Community page so we actually on this
232:56 - page now and soon we're going to see how
232:58 - to actually grab this from the URL and
232:59 - do something meaningful with it so for
233:01 - this page we are going to use server
233:04 - side rendering and to do that we're
233:05 - going to use a function from next.js
233:07 - called get server-side props get server
233:09 - side props is called on the next.js
233:11 - server and then data is fetched from our
233:13 - database in this function and then pass
233:15 - to the component and then the component
233:17 - is rendered on the server and then pass
233:19 - to the client and then the client
233:20 - renders the component that's sort of the
233:22 - path so when the user actually makes a
233:23 - request to a web page all this stuff
233:25 - happens behind the scenes on the server
233:26 - and so I would basically just think of
233:28 - this as the web page being pre-built
233:30 - before it's actually shown to the user
233:31 - and this whole process just makes it
233:33 - appear as if the data on the web page is
233:34 - just sort of magically there when the
233:36 - user first sees it whereas in
233:37 - client-side data fetching we would show
233:39 - the component first then go get the data
233:41 - and then use that data to update our
233:43 - component and the user would you see
233:45 - some sort of loader as the data is being
233:46 - fetched so server-side rendering
233:48 - basically just removes this loading
233:49 - State and reddit.com uses a mix of both
233:52 - server-side rendering and client-side
233:53 - rendering so we are going to do the
233:54 - exact same thing so the data that we're
233:56 - going to server-side render on our
233:57 - community page is going to be the
233:58 - community data so that we can sort of
234:00 - pre-render the page with all of the
234:02 - community data in it and then show it to
234:03 - the user all we need to do is export the
234:06 - function get server-side props from this
234:08 - file and next.js will automatically know
234:09 - to servers had run to this page so what
234:11 - that looks like is this we say export
234:13 - async function
234:15 - get server side props
234:17 - and we're going to take in this context
234:19 - variable which is going to be of type
234:21 - get server side props context and this
234:24 - is how we're actually going to access
234:25 - the page router so that we can use the
234:28 - community ID
234:30 - and I'm just going to close my directory
234:32 - on the left so that I have a bit more
234:33 - room inside of this function we're going
234:34 - to get the community data and pass it to
234:38 - our client component so we're going to
234:40 - have a track touch block inside of our
234:42 - try block we're going to actually try to
234:43 - get the community document and the way
234:44 - we're going to do that it's going to say
234:45 - cons Community dot graph is going to be
234:48 - equal to Doc from Firebase we've seen
234:51 - this kind of stuff already
234:52 - firestore import all of these things
234:54 - communities is the collection we're
234:56 - interested in and the documents we want
234:58 - to get is the community ID page that
235:00 - we're on and that page is coming from
235:02 - the router right I went to our slash hey
235:04 - dude so I want to get the community data
235:06 - for hey dude so we can access this
235:08 - parameter from the router by saying
235:10 - context
235:11 - dot query
235:13 - dot Community ID and the name Community
235:17 - ID is coming from the name we gave it
235:19 - right this Dynamic route right here so
235:21 - whatever name we give this Dynamic route
235:23 - is the exact same name we're going to
235:25 - use to access it from our router in this
235:27 - case Community ID and so technically the
235:30 - URL parameter can be of type string or
235:32 - it can be a string of arrays or it can
235:34 - be undefined in our case it's always
235:35 - going to be a string so what I'm going
235:37 - to do is Typecast this to just a string
235:39 - and that should solve that compiler
235:41 - error
235:42 - okay so now let's get the actual
235:43 - Community document which is going to be
235:45 - cons community
235:47 - dot I'm going to say await get Doc and
235:51 - the doc you want to get is
235:52 - community.graph
235:54 - awesome and so the way next.js is going
235:56 - to pass this data to our client type
235:58 - component which in this case is
236:00 - Community page all we need to do is
236:02 - return an object and inside of this
236:03 - object we just need to return props and
236:06 - this props object is what next.js is
236:08 - going to pass to our client so inside of
236:10 - our props I want to pass Community data
236:13 - and our community data is going to be
236:15 - the actual data inside of this community
236:16 - doc we just got which is going to be
236:18 - Community Doc and then we have to call a
236:20 - function called The Dot data and that is
236:22 - a Firebase thing this is how we extract
236:24 - the data from this actual document
236:26 - object
236:28 - and then our catch block I'm just going
236:29 - to log the error I'm just going to say
236:31 - get server side props error and and
236:34 - next.js allows you to create custom
236:36 - Pages if errors occur inside of get
236:39 - server-side props but I'm not going to
236:40 - do that for this tutorial because I feel
236:42 - like our time is better spent elsewhere
236:44 - so I'm going to add uh could add error
236:47 - page here
236:48 - so this props object is being passed to
236:50 - our component up here so what I'm going
236:51 - to do is destructure the props and grab
236:54 - that Community data
236:56 - but we do need to include that on our
236:59 - community page props type
237:01 - and our community data
237:03 - is going to be of type community and we
237:06 - have not created this type yet so let's
237:08 - go quickly create this community type
237:09 - and we're going to do that in our atoms
237:12 - folder because we are going to add some
237:13 - Global Community State shortly so let's
237:15 - go quickly set up the skeleton for that
237:17 - so inside of our atoms I'm going to
237:19 - create a folder called communities
237:21 - atom
237:23 - so we're going to eventually Define an
237:25 - atom in here
237:26 - that is going to contain a global
237:28 - Community State that we need throughout
237:29 - our application but for now let's
237:31 - actually just Define that missing
237:32 - Community type that we have over here
237:34 - because that's really all we need at the
237:36 - moment so I'm going to create an
237:37 - interface
237:39 - pop community
237:41 - so if you recall our communities have an
237:43 - ID which is a type string a Creator ID
237:45 - which is also a string number of members
237:51 - which is a number
237:53 - privacy type
237:56 - and the type of this is going to be one
237:58 - of three strings which is either going
238:00 - to be public
238:01 - or
238:02 - restricted
238:05 - or private
238:08 - we also want to have a created at field
238:09 - which is going to be of type time stamp
238:11 - and this is coming from Firebase slash
238:13 - firestore and I'm actually going to make
238:16 - this optional by adding the question
238:17 - mark here and I'm going to talk about
238:19 - why that is later and finally we're
238:21 - going to have an image URL and I'm going
238:23 - to make this optional right now because
238:25 - when we initially build the Community
238:26 - page we are not going to have it I will
238:27 - come back later to add this but for now
238:29 - let's make it optional so that
238:30 - typescript does not get mad at us so now
238:32 - we actually have an interface defined
238:33 - for our community so let's come back
238:35 - over here and we can import that to
238:37 - import it from our community's atom file
238:39 - and this file should be happy now okay
238:41 - so I'm going to close the directories if
238:42 - I have Smart room and inside of here I'm
238:45 - going to render
238:46 - just so we can see the data coming in
238:48 - community data dot ID I'm going to add
238:51 - welcome to community data.id perfect
238:54 - okay so after refreshing the page you
238:56 - are very likely to get this Json
238:58 - serialization error from next.js so
239:00 - basically what's happening is next.js is
239:02 - not able to successfully serialize our
239:05 - community doc data in order to pass it
239:07 - from an xjs server to our client and
239:10 - this typically happens when you use
239:11 - timestamps and we are using a timestamp
239:13 - for our created at parameter in our
239:16 - community so basically next you ask is
239:18 - just freaking out because it doesn't
239:19 - really know how to serialize that data
239:22 - type so I did some research on this and
239:24 - the solution I found was to use a
239:25 - library called safe.json stringify and
239:28 - this basically just streamifies our data
239:30 - to a form that next.js can actually read
239:32 - and serialize so that's what we're going
239:34 - to do so we just need to install a
239:35 - package called save Json stringify so
239:37 - I'm going to go run npmi save Json
239:39 - stringify
239:41 - so let's install that and then at the
239:43 - top I'm just going to import it so I'm
239:44 - just going to say save Json stringify
239:47 - from Save Json stringify and it might
239:50 - complain that we need to install the
239:52 - types for this file oftentimes when
239:53 - you're using typescript and you install
239:55 - a library it'll tell you that you need
239:56 - to install the types for that Library as
239:58 - well in order for it to work and it
240:00 - usually gives you the command in this
240:01 - little pop-up window so let's go and
240:03 - grab that and paste it in here and just
240:05 - install the types
240:08 - okay so this should make that go away
240:10 - and not make it all happy Perfect all
240:11 - right so to actually use this function
240:13 - let's come down here and change the
240:14 - value of our community data and the
240:16 - value you want to change it to is going
240:18 - to be json.parse and we want to parse
240:21 - the stringified version of the data that
240:23 - we want to send and we're going to do
240:25 - that using the adjacent stringify
240:26 - function and we want to pass an object
240:28 - and this object is going to represent
240:30 - our community data and on that object we
240:32 - want the ID of the community so we can
240:34 - say community doc dot ID and then we
240:36 - want all of the data in the community
240:38 - document so we can just spread Community
240:39 - doc
240:41 - dot Beta And this is a function.data and
240:43 - so basically all we did is we just
240:45 - created an object that represents our
240:46 - community so the ID of the document is
240:48 - not included in the dot data function so
240:52 - in order to retrieve the actual ID of
240:53 - the document we can just manually
240:55 - declare it here by saying ID is the
240:57 - community doc.ed all right so now that
240:58 - we're using save Json stringify this
241:00 - should solve our serialization error so
241:02 - I think I need to run my development
241:03 - server so let's do that
241:06 - and you might have to recompile yours as
241:08 - well if yours was running while you did
241:10 - all those installations okay so now
241:12 - let's come over here and refresh let's
241:13 - go to localhost
241:16 - okay that seems to be working let's go
241:19 - to slash r slash hey dude and the actual
241:22 - name of the community in the database is
241:24 - with a lowercase dude so make sure that
241:26 - matches so it says welcome to hey dude
241:29 - and we had welcome to community data.ib
241:31 - so this ID thing is being shown here
241:34 - community dayback.id and you can log the
241:37 - data if you'd like just so you can see
241:39 - what it looks like data so if I log this
241:42 - this thing we're looking at here is this
241:44 - object so it has the ID and then we just
241:46 - took all the other data and spread it so
241:48 - we have all of the data of the community
241:50 - and this is that timestamp thing that
241:52 - next.js was having serializing no clue
241:55 - why some weird conflict with the types
241:57 - so that is why we have to use Save Json
241:59 - stringify all right so what we're going
242:00 - to do now is just handle the case of if
242:02 - a community dock for the visited URL is
242:06 - not found so if a user basically goes to
242:08 - a URL through our community that does
242:09 - not exist we should just display them
242:11 - some kind of meaningful messages like
242:13 - this community does not exist because on
242:14 - Reddit if you do that if you go to
242:16 - reddit.com and you do R some random
242:19 - Community like this that obviously does
242:21 - not exist Reddit shows you this page
242:22 - it's like sorry there aren't any
242:24 - communities with that name so yeah we're
242:25 - going to do that quickly it's just a
242:27 - single simple component and it just
242:28 - makes the app slightly more robust and
242:30 - realistic so we're gonna come down here
242:31 - and this is going to be very minor
242:33 - changes so all we need to do is
242:34 - basically check if this thing actually
242:36 - found something and if it did not we're
242:38 - just going to pass in an empty string as
242:40 - a prop for Community data and then our
242:42 - component up here we're going to check
242:44 - if this community data is an empty
242:46 - string we will show a component that
242:48 - said exactly what Reddit said sorry
242:49 - there aren't any communities with
242:50 - anything so basically all we're going to
242:51 - do is inside of our client-side
242:53 - component we're just going to say if no
242:55 - Community data because we do not have a
242:57 - community in our database with this name
242:59 - we just want to return out of our
243:01 - component early and we're just going to
243:02 - say div does not exist and I'm going to
243:05 - add a more meaningful component in just
243:08 - a sec in just a second here but just to
243:10 - get the overall flow set up let's do
243:11 - this for now so down here we're going to
243:13 - do is just change the value of our
243:15 - community data by adding a simple
243:17 - ternary operator to check for the
243:18 - existence of that Community Dock and if
243:20 - it does not exist we will pass an empty
243:22 - string so we can say community doc dot
243:24 - exists which is a function conveniently
243:26 - provided by Firebase
243:29 - if it does exist past what we're already
243:32 - passing and if it does not exist let's
243:34 - just pass an empty string so if it's an
243:35 - empty string meaning we went to a
243:37 - community page that does not exist this
243:39 - is going to happen because an empty
243:40 - string is a false value so if I want to
243:42 - return this div and not the div for an
243:45 - actual community so let's try this out
243:47 - so in our database I know that there is
243:49 - no Community called dogs right there's
243:52 - only these five so let's try to go to
243:53 - dogs
243:55 - so r slash dogs
243:58 - let's see what happens
244:00 - okay yeah so I think Community does not
244:02 - exist which is great so all we need to
244:04 - do is just create a very simple
244:05 - component to replace that dominate
244:07 - component that we have in there right
244:08 - now so inside of components I'm going to
244:10 - create a new folder called community and
244:13 - there's going to be a lot of stuff in
244:14 - here but our first one is going to be
244:16 - that not found component so we should
244:17 - say not found dot TSX and I'm just going
244:20 - to paste the component from My Demo
244:23 - project because it's very simple uh it's
244:25 - just it's just only like 20 lines so
244:26 - this is exactly what it looks like so
244:28 - now if I go back to my index page and I
244:31 - import that component so rather than
244:33 - showing this temporary div I'm going to
244:36 - return not found which doesn't seem to
244:40 - want to import automatically so I'm
244:41 - going to try yeah okay so add imports
244:43 - from components Community not found save
244:46 - that so now we have a more meaningful
244:48 - component that is displayed if they go
244:49 - to a non-existing community okay so now
244:52 - that this is out of the way we can move
244:53 - to the actual ideal case of when there
244:56 - is a community that does exist for that
244:58 - URL which is probably going to be most
244:59 - of the time right just an edge case but
245:02 - it is good to think about these things I
245:03 - recommend to just avoid going completely
245:05 - happy path when you're developing your
245:06 - apps because if you don't cover your
245:08 - bases sometimes this can be catastrophic
245:10 - in production or something it could
245:11 - break something so it's always good to
245:12 - just think about these rare cases that
245:14 - might happen all right so let's go to a
245:16 - community page that actually exists
245:17 - let's go to a new new
245:20 - so r slash new new
245:23 - cool
245:25 - and just go to one that exists for you I
245:27 - don't know if you made this exact one
245:28 - just one that exists okay so if you go
245:30 - to an actual Community page in our demo
245:32 - we can see that we have this header
245:34 - component and then we have basically
245:35 - this feed and then some components on
245:37 - the right hand side here so we're going
245:39 - to start off with this header and it's
245:40 - in the header that they can actually
245:41 - join and leave this community so let's
245:43 - go make that now so inside of our
245:45 - community directory let's create a new
245:47 - file called header.tsx
245:51 - and I'm going to use our snippet so our
245:53 - header is going to take in that
245:55 - Community data since we are showing the
245:57 - name so this is going to be of type
245:58 - community and we can import this again
246:02 - from our community's atom file and then
246:04 - we can just destructure the props in
246:06 - here Community data so let's build out
246:08 - the actual component there is going to
246:10 - be some logic that we're going to add
246:11 - inside of this component for the actual
246:13 - joining and leaving of communities but
246:15 - for now let's return the component
246:16 - itself this is going to be a flexbox
246:19 - from Chakra
246:20 - import that and we're going to give this
246:23 - a direction of column a width of 100 and
246:28 - a height of 146 pixels and I'm just
246:32 - going to add the text header so that we
246:34 - actually have something to show and I'm
246:35 - going to come back to come back to this
246:38 - index file and rather than it should
246:40 - show Welcome to community data I'm going
246:42 - to actually
246:43 - return just a fragment and inside this
246:47 - fragment we want to put that header that
246:49 - we just created
246:51 - awesome so we can actually see the
246:53 - header there let's go make this thing
246:54 - look actually proper why is this red oh
246:57 - yeah and so we need to actually pass the
246:59 - community data in there so let's do that
247:00 - Community data which is going to be
247:02 - equal to
247:03 - Community there
247:06 - let's go back into here and continue
247:08 - building now inside of our header the
247:09 - first thing we're going to add is a box
247:11 - component and this box component is
247:13 - going to represent the upper half of the
247:15 - header that is sort of that blue
247:16 - Highlight thing here so let's go create
247:18 - that so that's going to look like this
247:20 - the height is going to be 50 of the
247:23 - header height
247:25 - and the background color is going to be
247:26 - blue 400 and we can actually just make
247:29 - this self-closing since nothing is going
247:31 - to be inside of it underneath here we're
247:33 - going to have another Flex box this is
247:35 - going to have justify equal to Center
247:37 - we're going to give it a white
247:39 - background
247:40 - and we can just say flexgro
247:43 - is equal to one which basically just
247:45 - means to take out the remaining space
247:46 - available in this component which is 50
247:48 - because you made this height fifty
247:50 - percent now inside of here we're going
247:52 - to have another Flex box this is where
247:54 - our icon is actually going to go and
247:55 - we're going to give this a width of 95
247:57 - percent
247:58 - and a Max width
248:00 - of 860 pixels and I will explain why
248:03 - this is in a second I'll add a border to
248:05 - this too just so we can kind of see what
248:06 - it is that we're creating over there one
248:08 - pixel solid red all right so inside of
248:10 - here this is what is going to be our
248:12 - image URL for now since we don't have
248:13 - image URLs which we want to add later
248:15 - we're just going to use the Reddit icon
248:17 - which will basically just act as the
248:18 - default Community image
248:20 - so we're going to create that icon
248:22 - inside of here so we're going to say
248:23 - icon from shortcut UI react and the icon
248:26 - we're going to use is going to be that
248:28 - same icon we've used before which is
248:29 - going to be fa Reddit and we're going to
248:31 - import that from react icons f a slash
248:34 - fa just like that the CSS for this icon
248:37 - is going to contain relative positioning
248:39 - and the reason that is is because if we
248:40 - look at the demo you can see that
248:42 - there's a bit of an overlap here this
248:43 - icon kind of overlaps with this blue
248:45 - part so to do that we can use relative
248:48 - positioning and kind of customize where
248:49 - that thing is going to sit
248:51 - so we're going to make this thing a bit
248:52 - bigger we're going to make it 64 which
248:54 - is about the same size as it is on
248:56 - Reddit and the position is going to be
248:58 - relative and because now we have
249:00 - relative positioning we can kind of
249:01 - customize where this thing sits so we
249:03 - can give it a top parameter and we're
249:06 - going to give this minus three so this
249:07 - basically just means it's going to be
249:08 - minus three units away from the top of
249:12 - its parent and its parent is this thing
249:13 - with the red border and the minus thing
249:15 - moves it upward right if we were to make
249:18 - this 3 it would move it downward three
249:20 - units away from the top negative means
249:24 - three units kind of above the top and
249:25 - the color of this is going to be blue
249:28 - 500.
249:30 - and we're going to say border of 4 pixel
249:33 - solid white and a border radius of 50
249:37 - and this border and this border radius
249:40 - are the sort of outline around the icon
249:42 - so you can see that there is the ever so
249:44 - slightest Gap in between that so I think
249:46 - a potentially better solution to what
249:48 - I'm doing here would be to have a just a
249:50 - circular icon that is slightly larger
249:51 - than this Reddit icon sit outside of it
249:54 - and that way you wouldn't have this
249:54 - little Gap here I'm not too worried
249:56 - about that it's not a huge deal so I'm
249:58 - just going to leave it for now I think
249:59 - this works pretty good okay and actually
250:00 - while we're here I'm going to add the
250:02 - logic to show you what it's going to
250:03 - look like when we actually do have an
250:04 - image URL for our community so inside of
250:07 - here I'm just going to add a ternary
250:08 - operator so I'm going to add curly
250:09 - brackets and I'm going to say community
250:11 - data dot image URL if this thing exists
250:14 - let's show
250:16 - that image and if it does not let's show
250:19 - this icon so this icon is acting as a
250:21 - fallback to the image outside of here
250:24 - we're going to say image and this is
250:25 - coming from Chakra UI react
250:29 - so if we save that the icon still being
250:31 - displayed because this does not exist
250:34 - and we will come back and actually do
250:36 - something with this when we do have
250:38 - image URLs for our images like we do for
250:40 - this baking one here
250:42 - so underneath our Turner operator let's
250:44 - add two more Flex boxes so an outer one
250:47 - and an inner one the reason for all
250:49 - these Flex boxes will make sense as the
250:51 - visual Parts start appearing so many
250:53 - Flex boxes on the inner one we're going
250:55 - to give a direction of column
250:57 - and emergent right of six
251:01 - and it's out of here this is where we're
251:03 - going to actually display the community
251:04 - name and as always text does not want to
251:07 - Auto Import from Chakra so I'm just
251:09 - going to kind of manually add it myself
251:12 - and inside of here we can say community
251:14 - data dot ID which is the community name
251:18 - so that's showing up there okay so let's
251:20 - make this heavy so I'm going to say font
251:22 - weight is going to be 800. let's make it
251:25 - a little larger as well so I'm going to
251:26 - say font size is going to be equal to 16
251:29 - point
251:31 - perfect underneath here I'm going to add
251:33 - another text so I'm just going to copy
251:34 - this downward this is going to be
251:36 - slightly lighter so 600 it's going to be
251:38 - slightly smaller so we're going to
251:39 - change this to 10 and this is when you
251:41 - say R forward slash Community ID the
251:44 - exact same appearance on Reddit and the
251:46 - color of this is going to be
251:49 - Gray 400. awesome that's looking really
251:53 - good and now this outer Flex box is
251:55 - going to have a padding of 10 pixels 16
251:57 - pixels just like that awesome
252:00 - now let's actually add the button that
252:02 - the user can click to join and leave the
252:04 - community so that is going to be a
252:06 - sibling of this flexbox here
252:09 - so just underneath that I'm actually
252:11 - going to create that button so I'm going
252:13 - to import that from Chakra so the text
252:15 - inside this button is going to change
252:17 - depending if the user is in this
252:18 - community already if they are not in the
252:20 - community the button is going to prompt
252:21 - them to join so it's going to say join
252:23 - and if they are in the community it is
252:26 - going to say joined so this is where our
252:28 - community Snippets are going to become
252:29 - useful and remember earlier how I said
252:31 - we are going to add some Global
252:33 - Community State to our communities atom
252:35 - our community Snippets are going to be
252:37 - part of that Global state right now we
252:39 - do not have it so for now I'm just going
252:41 - to create a variable called is joined
252:43 - and I'm going to set it equal to false
252:45 - but this is going to eventually read
252:47 - from our community Snippets
252:49 - check if this current Community is
252:52 - inside of our community snippet so
252:55 - that's something we're going to cover
252:56 - very shortly and it's going to tie into
252:58 - our Global Community State with our
253:00 - communities atom but for now we'll just
253:01 - leave it false we're saying that they're
253:03 - not in the community but at least now we
253:04 - have a variable to toggle this text so
253:07 - inside of this ternary operator we can
253:08 - use that is joined variable and we can
253:10 - say is joined
253:12 - if they're joined show the text joined
253:14 - if they are not joined show the text
253:16 - join
253:17 - awesome now let's style this button a
253:19 - bit the variant is also going to change
253:22 - depending on if they're in the community
253:23 - or not so we can say is joined again if
253:27 - they are joined we're going to give it a
253:28 - variant of outline and if they are not
253:30 - we're going to give it a variant of
253:31 - solid in addition to all of this let's
253:33 - add a height
253:35 - of 30 pixels let's give it some right
253:38 - padding of six some left padding of a
253:41 - six and we're going to give it an on
253:42 - click as well which right now is going
253:45 - to be empty but this is going to be a
253:47 - function called on join that is actually
253:49 - going to join them or remove them from
253:52 - that community so we're going to save
253:53 - that so the reason I added that Max
253:55 - width to this thing that currently has a
253:57 - red border is to prevent this thing from
254:00 - kind of infinitely stretching across the
254:02 - screen uh because if they aren't a large
254:04 - device size it would look kind of weird
254:05 - if it was just spread across this entire
254:07 - header so we sort of keep it compact
254:09 - like this and our feed and the
254:11 - supporting components over here are
254:13 - going to sort of have the same Max width
254:15 - and this matches exactly how red it has
254:17 - it and it just prevents all these
254:19 - components from being like across the
254:20 - entire screen so we just give it a Max
254:21 - width to make it look good on all screen
254:24 - sizes
254:25 - let's remove that border now that that
254:28 - makes sense all right and now we have an
254:30 - actual visual representation of what our
254:31 - header is going to look like minus this
254:33 - image URL thing which we're going to add
254:35 - but this is looking really good and so
254:37 - all we have left to do in this component
254:38 - is to just implement this actual joining
254:40 - logic but first let's go work on the
254:42 - actual page content of the Community
254:45 - page all right now let's actually talk
254:47 - about the content of this page beneath
254:50 - the header so to start the section off I
254:52 - want to go to our demo and I just want
254:53 - to point out how pretty much every
254:55 - single page on reddit.com has the exact
254:58 - same layout let's open this up a bit to
255:00 - make this more clear but we pretty much
255:02 - just have this parent component and
255:04 - inside of that we have this left hand
255:05 - side with kind of the feed and this
255:07 - right hand side with these other
255:08 - components and left hand side kind of
255:11 - takes up I don't know about 60 to 70
255:13 - percent of that width and the right hand
255:15 - side takes up about 30 and this is the
255:17 - same across every single page so this is
255:19 - the home page if I go to a community
255:21 - page same thing right just different
255:23 - components but the overall like
255:24 - government learning layout is the exact
255:27 - same let's even look at the submit page
255:28 - so pretty much the exact same thing
255:30 - we've kind of seen a similar situation
255:31 - before right remember how I was like oh
255:33 - we need the nav bar on all of our pages
255:35 - and to solve that problem we use a
255:37 - layout component and we just wrapped our
255:39 - app in our layout component and put our
255:40 - navbar in there well we can do the exact
255:42 - same thing elsewhere right it doesn't
255:44 - just apply to the global level of our
255:46 - app and we can do that with the content
255:48 - of our Pages because again we have this
255:50 - left hand content and this right hand
255:52 - content with this repeated overall
255:54 - layout across every single page and so
255:57 - what we're going to do is just create a
255:58 - simple page layout component and then
256:00 - wrap all of our pages in that component
256:03 - and it's just going to automatically
256:04 - handle all of the styling for us right
256:06 - like the widths and the responsiveness
256:07 - and all that stuff and we don't have to
256:09 - repeatedly write the same CSS so let's
256:12 - quickly do that in our apps let's come
256:13 - back to here so inside of our components
256:17 - folder and inside of layout I'm going to
256:19 - create another component called page
256:21 - content because it sort of represents
256:23 - the layout of our content for all of our
256:26 - Pages I'm going to use our classic
256:28 - snippet I'm going to open up the demo
256:30 - just so we have a visual guide of what
256:32 - we're doing so we can model this entire
256:34 - layout with just a few Flex boxes so I'm
256:36 - going to return pretty much the entire
256:39 - structure of this page content what
256:41 - that's going to look like is we're going
256:42 - to use the flexbox from Chakra so this
256:44 - is going to be the outermost parent
256:46 - container then inside of that we're
256:48 - going to have the actual sort of content
256:50 - container then inside of here we're
256:52 - going to have the left hand side content
256:54 - and the right hand side content and we
256:56 - can represent each of those which is
256:58 - their own flexbox component just like
257:00 - this the outermost one is this kind of
257:02 - like gray area like the container of
257:04 - kind of everything the next one this one
257:06 - here is going to be the parent container
257:09 - of both the left hand side and the right
257:10 - hand side and then the two innermost
257:12 - ones represent the left hand side and
257:13 - the right hand side respectively so a
257:15 - total of four containers that's it
257:17 - that's that represents this entire page
257:19 - layout and it's going to represent our
257:20 - page though for every one of our Pages
257:22 - now we need to apply some additional
257:23 - styling to these things to just make
257:25 - them respond wanted to give them the
257:26 - proper width but overall this is it this
257:28 - represents like every single page layout
257:31 - so for clarity I'm just going to add a
257:33 - comment above this first flex box that
257:35 - says left hand side and for the second
257:37 - one right hand side okay so now let's
257:40 - actually talk about what's going to go
257:41 - inside of both of these left hand side
257:43 - and right hand side Flex component well
257:46 - just like every other layout component
257:47 - this is going to take in a prop called
257:51 - children
257:51 - and if you recall if we go back to our
257:53 - original layout component where we had
257:55 - our navbar children basically just
257:57 - represented our entire application
257:59 - because we wrapped our entire app in
258:01 - this layer component so children is just
258:04 - a bunch of react components right and in
258:06 - this case in layout.tsx this was our
258:08 - entire app children's might look a
258:10 - little bit different in here because
258:11 - we're going to pass in two children we
258:13 - can pass in as many children as we want
258:15 - but we're going to pass in two children
258:17 - because we need one for the left hand
258:19 - side and one for the right hand side so
258:21 - our first child is going to be the stuff
258:22 - that goes inside of our left hand side
258:23 - Flex component and the second child is
258:26 - going to be the stuff that goes inside
258:27 - the right hand side flexbox component
258:29 - and so this is kind of a weird concept
258:31 - at first but bear with me so if we come
258:33 - over to our index.tsx file underneath
258:36 - our header is where we want to apply the
258:37 - soil component right we have our header
258:39 - and then we have this left hand side and
258:41 - right hand side layout that we want to
258:43 - do so underneath here is where we're
258:45 - going to actually put this so we're
258:46 - going to say page content bring that in
258:48 - from the other file and this is where
258:50 - we're going to need to Define our
258:51 - children that we're taking in for this
258:53 - page content layout just like in
258:55 - layout.tsx the original one children
258:57 - represented our entire app right if we
258:59 - go look at app.tsx we can see that this
259:02 - component was the only child of this
259:05 - original layout this one here
259:07 - so in this case we want two children
259:10 - because we again left hand side right
259:11 - hand side so let's come back to our
259:13 - index and what we're going to do is
259:15 - instead of passing a single child like
259:17 - we were doing in our app.tsx file we're
259:20 - going to pass two children and we're
259:22 - going to represent both of those two
259:23 - children with react fragments just like
259:25 - this and we are totally allowed to do
259:27 - this we are taking complete advantage of
259:28 - how react actually works from like a Dom
259:31 - perspective so this first fragment is
259:33 - going to be child one and the second
259:35 - fragment is going to be child two but if
259:36 - it's more clear you can just think of
259:38 - these as divs right that's really all
259:39 - they are in this case all we need them
259:40 - to be are fragments and we're just
259:42 - putting them there to create this left
259:43 - hand side right hand side structure so
259:45 - again child one on the left child two on
259:48 - the right so inside of child one for now
259:50 - I'm just going to put a div that says
259:52 - left hand side
259:54 - and I'm going to do the exact same thing
259:56 - on the right hand side so we have this
259:58 - again child one child two I'm repeating
260:01 - myself because this is kind of an
260:02 - abstract concept that I hope it makes
260:04 - sense okay so now inside of our page
260:08 - content file here children is no longer
260:10 - just a single component it is going to
260:12 - be an array of two components right in
260:15 - layout it was just one thing
260:18 - in this file we have two because we have
260:20 - two fragments that we're passing here
260:21 - what that means is that this children
260:23 - thing is going to be an array of both of
260:26 - those fragments so if I log this here is
260:28 - children
260:30 - let's look at what this looks like so
260:32 - let's go back to our app and let's look
260:33 - in the console here so see it says here
260:36 - is children let me zoom in a bit zoom in
260:38 - a bit
260:39 - open this up and we can see all that is
260:41 - in here is just two react fragments
260:43 - right react fragment react fragment and
260:45 - we could add three if we wanted to we
260:46 - could add 100 if we wanted to but
260:48 - there's two because we had two fragments
260:50 - and that's all that these are so now
260:52 - what we can do is take each of these two
260:55 - children and put them inside of our Flex
260:57 - containers here so our left hand side
260:59 - is basically going to be children at
261:02 - index 0 the first element and the right
261:05 - hand side is going to be everything
261:06 - inside of children
261:08 - at index one to fix these typescript
261:10 - compiler errors we can just do what we
261:12 - did before we just have to make this 0
261:14 - and 1 valid indexes of the children
261:16 - array so what we can do is we can
261:18 - Typecast it to be that so we can say as
261:20 - key of type of children
261:24 - okay and we're getting an error over
261:26 - here that's saying that children is
261:28 - possibly null or undefined so to fix
261:30 - that what we can do is we can just add a
261:32 - simple check and this just checks to
261:34 - make sure that children actually exist
261:36 - and is a valid value it is not null or
261:37 - undefined only then let's render this
261:41 - and we can do the exact same thing down
261:43 - here so I'm just going to copy this
261:45 - entire thing
261:48 - and then just change this to a one
261:51 - just like that perfect so now you can
261:53 - see left hand side and right hand side
261:55 - actually showed up on the screen here
261:56 - and so we of course have to apply a few
261:58 - additional styling here to these Flex
262:00 - boxes to make them have the widths and
262:02 - the responsiveness that we desire but
262:04 - this is sort of the idea and I think
262:06 - this is really cool this is like uh this
262:08 - is a really cool way to take advantage
262:09 - of how react actually works and create
262:12 - custom page layouts this children thing
262:14 - is a little bit weird at first but just
262:16 - give it time and I think it'll become a
262:17 - lot more clear when we actually start
262:18 - building out real left hand side and
262:20 - right-hand side components like the feed
262:21 - and the about component and everything
262:23 - but basically the idea is that we can
262:26 - put whatever we want in here right I can
262:27 - put another div it's like hello
262:30 - and 10 more divs whatever it doesn't
262:33 - even matter we can put as many
262:34 - components as we want in our left hand
262:36 - side and as many as we want in our right
262:38 - hand side so depending on what page file
262:40 - we're working in the actual components
262:42 - that go inside of both these two
262:43 - fragments will be different but they're
262:45 - always just going to be the same
262:47 - structure because we only have two
262:49 - governing children I hope that makes
262:51 - sense that I tried my best to explain it
262:53 - in the clearest way possible but if that
262:55 - doesn't make sense hopefully it does as
262:56 - we build more of these and let's go to
262:58 - our page content and apply the simple
263:02 - styles that we need and responsiveness
263:03 - to these flexbox containers and
263:05 - hopefully it'll become more clear then
263:06 - so I'm going to add borders to all of
263:08 - these to make it more clear
263:10 - what we're actually looking at so I'm
263:11 - going to do one pixel solid red on the
263:14 - outermost
263:15 - I'll do one pixel solid green on the
263:18 - actual content container
263:20 - and I'll add one pixel solid
263:23 - blue on our left hand side content and
263:26 - then I will do one pixel solid orange on
263:28 - our right hand side okay now it's not
263:30 - very clear now because they're all sort
263:32 - of blob together but let's keep going
263:33 - with this so on our outermost container
263:35 - we want to give this a justify Center we
263:37 - kind of want to Center everything and
263:39 - we're going to give it a padding of 16
263:41 - pixels on the top and bottom and zero
263:43 - pixels on the right and left okay now
263:45 - our content container
263:47 - we're going to give this a width of 95
263:49 - justify is going to be Center as well
263:52 - because you kind of want to Center the
263:53 - content and we're going to give this a
263:55 - Max width of 860 pixels and if you
264:00 - recall this is the same Max width that
264:02 - we gave that component in our header and
264:03 - this is so that they match up evenly and
264:05 - it looks really flush so we're done with
264:07 - these two let's come down to our left
264:08 - hand side so our left hand side
264:11 - we want to make all of the content
264:13 - inside of it Direction column and we
264:14 - want to give this a width
264:16 - and this width is going to be responsive
264:18 - at Mobile screen sizes we're going to
264:20 - make the width 100 percent because the
264:22 - right hand side is not going to be
264:23 - visible on Mobile screen sizes so this
264:25 - thing can take up the entire width and
264:27 - then on medium screen sizes we're going
264:28 - to give it a width of 65 when it starts
264:30 - to share the screen with the right hand
264:32 - side okay things are becoming a bit more
264:34 - clear and then we're going to make our
264:35 - margin right responsive as well so our
264:37 - base screen sizes 0 and that Medium
264:39 - screen size is we want to give it six
264:41 - let's come down to our right hand side
264:42 - we can make the direction of this column
264:45 - as well and we're going to make the
264:47 - display responsive so at base on mobile
264:49 - we are not going to have this thing
264:51 - visible and then our medium screen sizes
264:53 - and up we're going to make it display
264:54 - Flex
264:55 - okay and we're going to give it Flex
264:57 - grow is equal to one just to make it
264:59 - take out the remaining width okay so now
265:01 - hopefully this is becoming more clear
265:02 - and you can actually see this structure
265:04 - with your own eyes and kind of see how
265:06 - it works and see how that Max width
265:08 - matches up with that header component so
265:09 - it's nice and flush that's why we did
265:11 - that
265:12 - this is looking really clean and then on
265:14 - mobile we don't have the right hand side
265:15 - component we only have the left
265:17 - and so now what we've done is we have
265:19 - created a reusable page content layout
265:22 - component and we can reuse this on every
265:24 - one of our pages and wrap the content in
265:26 - this layout component and it's going to
265:27 - have the exact same look and feel and we
265:30 - can have completely different components
265:31 - inside of our left hand side and right
265:33 - hand side due to these two children
265:35 - fragments we created so where we left
265:37 - off last time was we created this really
265:40 - useful page content layout component
265:42 - that we can reuse on all of our pages to
265:45 - create this left hand side right hand
265:47 - side layout that Reddit has and we made
265:49 - it responsive so that we only have to
265:51 - write these Styles once and we use that
265:53 - on our community page here and we also
265:55 - created our header component inside of
265:57 - our community page which shows the
265:59 - community name eventually the image of
266:01 - that community and we have this join
266:03 - leave button here that we created
266:04 - however right now this button does not
266:07 - do anything it's just an empty function
266:09 - and it doesn't actually do what it's
266:10 - supposed to so what this button is
266:12 - supposed to do is join this user to the
266:14 - community if they are not in it and
266:16 - remove them from the community if they
266:18 - are in it but in order to know which one
266:20 - of those two things to do we do need to
266:22 - know if they're already in the community
266:23 - therefore we need access to the user's
266:26 - Community Snippets which we created so
266:28 - even though we are successfully storing
266:30 - the community snippet data in our
266:31 - database meaning that we do know which
266:34 - communities this user is in we currently
266:36 - do not have this community snippet data
266:38 - on our front end so our front end
266:40 - actually has no idea if I'm in this
266:42 - community or not only our database does
266:44 - it so what we need to do is actually go
266:46 - and get those Community Snippets from
266:48 - our database so that we know if the user
266:50 - is actually currently in this community
266:51 - and we also need access to this data
266:54 - inside of our drop-down menu so that we
266:56 - know our own communities so clearly we
266:58 - can see that multiple components in our
267:00 - app need access to this community
267:02 - snippet data our header does so that we
267:05 - can either join or leave our drop down
267:07 - money does so that we know what
267:08 - communities we're actually in and if we
267:09 - go to our home page this top communities
267:11 - component does as well it knows which
267:13 - one of these we're actually in so we
267:15 - need this data across multiple
267:16 - components so therefore we are going to
267:18 - put this community snippet data into a
267:22 - recoil atom so that we have access to it
267:24 - globally and last time if you remember I
267:26 - briefly created this file called
267:28 - communities atom.ts I only Define the
267:30 - interface for a community last time we
267:32 - didn't actually create the item so we're
267:34 - going to do that now so just like our
267:36 - auth modal atom we can Define some
267:37 - interfaces in here that are going to
267:39 - help make our code more robust and
267:41 - prevent errors so what I'm going to do
267:43 - is create a typescript interface to
267:45 - actually model our community state so we
267:47 - know exactly what's supposed to be in it
267:49 - inside of our community State we're
267:51 - going to store those Snippets in an
267:53 - array called my Snippets so we're going
267:56 - to go and get the users Community
267:57 - Snippets from the database and store
267:59 - them in this array and that way we will
268:01 - have access to them throughout all of
268:02 - these components that I refer to just a
268:04 - second ago and we can actually make this
268:05 - better by specifying what type the
268:08 - things inside of this array actually are
268:09 - rather than just saying that they can be
268:11 - anything we can tell it okay well this
268:13 - is going to be an array of strings or
268:14 - it's going to be an array of booleans we
268:16 - can specify what's going be inside of
268:18 - this array and each thing inside of this
268:20 - array is going to be a community snippet
268:23 - so what I'm going to do is I'm going to
268:24 - create an interface that represents what
268:26 - a community snippet actually looks like
268:29 - now if you recall from our create
268:30 - Community model our community snippet is
268:32 - going to have a community ID and it is
268:35 - moderator key which is going to be
268:36 - present only if we created this
268:39 - community so what I can do is come back
268:41 - here and I can say okay well our
268:42 - community snippet is going to have a
268:44 - community ID of type string it's going
268:46 - to have an optional is a moderator key
268:48 - optional because it's only going to be
268:50 - there if we created the community
268:51 - ourselves and we're going to put the
268:53 - image URL as well and I'm going to make
268:55 - this optional to start off because we
268:57 - are not going to implement this
268:58 - initially and I do not want typescript
269:00 - to get mad at me I'm just going to make
269:01 - it optional for now so now we can come
269:03 - down here and say okay well we know that
269:05 - everything inside of this array is going
269:06 - to be of type Community snippet and
269:08 - we're going to see how useful this is
269:11 - when we actually start working and
269:12 - building these components that are
269:13 - accessing this data and in a little bit
269:15 - we are going to come back here and add
269:17 - another property to our community State
269:19 - called visited communities which is
269:21 - going to act as sort of a cache of all
269:23 - of the communities we visited so we
269:24 - don't have to refetch that data but
269:26 - we're going to come back to that in a
269:27 - bit basically we just want to store any
269:28 - data that is Global and Community
269:30 - related in this community State atom
269:33 - that we're going to create for now we're
269:34 - only going to have the my Snippets data
269:36 - inside of our community state so now
269:38 - let's actually create The Recoil atom
269:40 - for our community state so I'm going to
269:42 - say export const Community state is
269:44 - going to be equal to a recoil atom
269:47 - and the type of that Community state is
269:49 - going to be the Community State
269:51 - interface that we just defined up top so
269:54 - our key is going to be communities
269:57 - State and this is the unique identifier
270:00 - that is required by recoil and we also
270:02 - need to give it a default value and the
270:04 - value of our state needs to be of type
270:07 - Community State we cannot just give it
270:09 - anything like if we give it a string
270:11 - it's going to complain and say well
270:12 - string is not assignable to type
270:14 - Community State because that's what
270:16 - we're telling it the type of the value
270:18 - is so we can actually create a variable
270:19 - that represents the default Community
270:21 - State
270:22 - I'm going to say default Community State
270:24 - and this is going to be of type
270:25 - Community State so that the types
270:27 - actually match and inside of here we're
270:29 - going to have my Snippets and we're
270:30 - going to initialize this as an empty
270:32 - array so it's going to start off as
270:33 - empty then we're going to go get that
270:35 - data from our database and then store it
270:36 - inside this array and down here to make
270:39 - typescript happy again we can say
270:41 - default Community State so now the types
270:43 - match and we are good to go all right
270:46 - you guys now that we have defined our
270:48 - community State atom we are able to
270:50 - access our community State data globally
270:52 - and we can grab the snippet data
270:54 - wherever we need it and we saw that the
270:56 - main components that we're going to need
270:57 - it are is in this top communities
270:59 - component our drop down menu and then as
271:02 - well as in the headers of our community
271:04 - pages so we have clearly established
271:06 - that this community snippet data
271:08 - definitely needs to be Global let's take
271:10 - this one step further if we look at this
271:12 - top communities component we can see
271:13 - that we can join and Lead communities
271:15 - from within here so we're calling some
271:17 - sort of function that is responsible for
271:19 - joining and leaving whatever one we
271:20 - click on and we also have that same
271:23 - exact functionality inside of our header
271:25 - component in a specific Community page
271:28 - so not only is our community snippet
271:30 - data required by both of these
271:31 - components the functionality for
271:33 - actually joining and leaving a community
271:34 - is shared by them as well so in react
271:37 - when we have this sort of scenario where
271:39 - we need data as well as certain
271:40 - functionality shared across Global
271:43 - components we can create what is called
271:45 - a custom hook and in the custom hook we
271:47 - can put State and logic that is repeated
271:49 - across our app and we can use this
271:51 - custom hook in any component that
271:53 - requires this repeated functionality in
271:55 - the same exact way as we would use a
271:57 - native react hook like you state or use
271:58 - effect so let me explain this with a
272:00 - diagram so I created this diagram here
272:02 - of what it is that we're going to create
272:03 - so we're going to create a custom hook
272:06 - that is called the use Community data so
272:08 - basically this diagram represents the
272:09 - data flow of this custom hook and so
272:12 - this Hook is going to contain any
272:14 - Community related data or functions that
272:17 - we need across multiple components so
272:19 - we've already established that we
272:20 - clearly need Community State across
272:22 - multiple components right we need those
272:24 - Snippets and the community state
272:26 - contains those Snippets so we can put
272:29 - our community state in this hook we also
272:31 - need the functionality of joining and
272:33 - leading communities across two different
272:35 - components and those two components in
272:37 - this case are header as well as the top
272:39 - communities component and then inside of
272:41 - these components all we need to do is
272:42 - just grab the specific pieces of this
272:44 - global data that we need by using the
272:46 - exact same hook and this is really good
272:48 - architecture because it keeps our code
272:50 - dry it prevents us from writing the same
272:52 - functionality multiple times and it just
272:54 - makes the code overall better quality
272:56 - that way we don't have to define the
272:58 - same functions over and over in all the
273:00 - places that we needed we just have to do
273:02 - it one single time and I've created this
273:03 - diagram to model what our situation
273:06 - looks like to hopefully make it more
273:07 - clear as to why we are using a custom
273:09 - hook but the main takeaway here is to
273:12 - just understand that in react when you
273:13 - have repeated logic or repeated data
273:15 - that is required in multiple places you
273:17 - can extract all that stuff put it into a
273:19 - single place which is a hook and then
273:21 - call that hook from wherever this stuff
273:23 - is needed I do hope that makes sense and
273:24 - it will become more clear as we actually
273:26 - write the code for this so let's
273:28 - actually go and Implement that diagram
273:29 - in code and then we can refer back to it
273:31 - once we have done that to solidify this
273:34 - entire concept okay so let's actually
273:35 - create this custom hook so inside of our
273:38 - source folder I want to create another
273:39 - folder called hooks
273:41 - and then I'm going to create a file
273:43 - inside of here called use community
273:46 - data and if you've never written a
273:49 - custom hook before it does have to start
273:51 - with the word use just like all the
273:52 - other hooks use State use effect it is a
273:54 - requirement by react okay so let's begin
273:57 - writing out this skeleton for this
273:58 - custom hook to hopefully solidify that
274:00 - diagram if it was not clear from the
274:02 - beginning so this Hook is not going to
274:04 - take in any props so we can just remove
274:06 - that so this is where our recoil
274:08 - Community state is going to live so
274:10 - we're going to say Kant community
274:13 - State value
274:15 - set Community State value
274:19 - is equal to use recoil state
274:23 - and remember that this recoil hook
274:25 - requires us to pass the atom that we
274:27 - want to get from recoil and the atom
274:29 - that we're pulling from is our community
274:31 - State atom which makes sure that imports
274:33 - from atom slash Community data now our
274:36 - custom Hook is not going to return any
274:38 - HTML like any other component it is
274:40 - going to return an object that contains
274:43 - data and functions and the stuff that we
274:45 - put in this object that we're returning
274:47 - is what's going to be accessible by the
274:49 - other components that actually use this
274:50 - hook so we have definitely established
274:52 - that we want Community State value
274:54 - available across many components so
274:55 - let's put that inside of this object so
274:57 - let's define the functions that are
274:58 - going to be shared across components so
275:00 - one of those functions if you recall
275:01 - needs to actually join the user to the
275:03 - community let's put that in here let's
275:05 - create a function called join community
275:07 - and we will leave it empty for now and
275:09 - we also need leave community
275:13 - so now I can also add these functions
275:15 - to this object so that they're
275:17 - accessible
275:18 - by the components that call this hook
275:20 - and since this Hook is not returning a
275:22 - functional component we're going to
275:24 - remove this return type here okay so now
275:26 - let's talk about how to actually call
275:27 - this hook and get access to this stuff
275:29 - in the components that need it so let's
275:31 - go to our header and let's import our
275:33 - new custom hook import
275:35 - use Community data from go up to
275:39 - directories hooks use Community data
275:42 - awesome now inside of our component the
275:44 - way we're actually going to call our
275:45 - Hook is pretty much the exact same way
275:46 - we recall any other reactor you would
275:48 - say const I'm going to leave it empty
275:50 - just for a second I'm going to say this
275:52 - is equal to use Community data
275:55 - okay well now we can grab any of those
275:58 - three things that we were returning out
276:00 - of our hook remember we had Community
276:01 - State value joint Community lead
276:03 - Community well now we can grab that from
276:05 - inside of here so let's grab Community
276:06 - State value
276:08 - now we have access to that recoil state
276:10 - in our header component and we can also
276:12 - grab those two functions join and leave
276:14 - Community okay so let's go back to our
276:15 - hook now I'm going to create a function
276:17 - that is going to decide which of these
276:19 - two functions to call and this will
276:21 - become clear why in just a second so
276:22 - bear with me so I'm going to say cons on
276:24 - join or leave community
276:28 - all right now this function is going to
276:30 - take in two arguments the first one is
276:32 - going to be the actual data of the
276:33 - community that we are trying to join or
276:35 - leave and this is going to be of type
276:36 - Community which we will need to import
276:38 - from that same community's atom file and
276:40 - the second argument is going to be a
276:42 - variable called is joined and this is
276:43 - going to be a Boolean representing if we
276:46 - are joined into this community or not
276:47 - okay and I'm just going to close my
276:49 - directory so I have more room and so
276:51 - inside of this function the first thing
276:52 - we're actually going to check is is the
276:54 - user signed in
276:56 - and if they're not signed in we want to
276:58 - open up the auth modal and prompt them
277:00 - to sign in because you can only join or
277:02 - lead communities if you are signed in
277:04 - and since our auth model state is global
277:06 - we can totally do that here and this is
277:08 - another reason why I made that State
277:10 - Global so hopefully that's more clear
277:11 - now if it wasn't before and we will
277:12 - implement this in just a few minutes but
277:14 - let's just get it working for a signed
277:15 - in user first so if they are signed in
277:17 - the next thing you want to do is check
277:18 - are they joined into this community if
277:21 - they are and they click on that button
277:23 - that means they must be leaving the
277:24 - community so we're going to call our
277:26 - leave Community function and we're going
277:27 - to pass in the ID of this particular
277:30 - community so down here we just need to
277:32 - indicate in our lead Community
277:33 - declaration that we are accepting the
277:35 - community
277:37 - ID and the type of that is a string okay
277:40 - perfect and if you do that we can just
277:41 - return out of this function because we
277:43 - do not want to proceed so if you make it
277:44 - past that that means the user is going
277:46 - to be joining the community so we're
277:48 - going to call our function join
277:49 - community and we're going to pass all of
277:50 - our community data to this function
277:52 - because we're going to need more than
277:53 - just the ID inside of it so I'm going to
277:55 - go down here and add that to the
277:57 - Declaration and that is going to be
277:58 - F-Type community so now down here rather
278:01 - than having to return both of these two
278:02 - functions separately we can just return
278:04 - the single one on join or leave
278:06 - community and this is the function that
278:07 - our header and top communities component
278:09 - is going to call so now let's go to our
278:11 - header pull that function in from our
278:13 - hook so on joinery community and then
278:16 - down here is where we actually want to
278:18 - call it on this button here so we can
278:19 - say
278:20 - on join or leave community and we want
278:23 - to pass in that Community data and also
278:26 - our is joined variable that we have
278:28 - already defined if you remember R is
278:30 - joined thing we just declare it as false
278:32 - because we did not have access to our
278:34 - community's state value yet but now that
278:35 - we do let's make this proper let's
278:37 - actually read from our community
278:38 - Snippets so since my Snippets is an
278:40 - array that represents the communities
278:42 - that the user is currently in we can
278:44 - search through this array and try to
278:46 - find a snippet where the ID matches the
278:48 - ID of community data which in this case
278:50 - is the data for the community chatties
278:52 - group if we can find one that means that
278:54 - this user has indeed joined this
278:56 - community and if we cannot then they
278:58 - have not joined so what that looks like
278:59 - is this we can say Community State value
279:02 - dot my Snippets dot find
279:06 - and defined function is a higher order
279:08 - array method that we can use to Loop
279:10 - through an array to see if a specific
279:12 - item matches some condition and the
279:14 - condition that we're looking for in this
279:15 - case is if item dot Community ID is
279:18 - equal to this community data.id
279:21 - if the find function does find a snippet
279:24 - that matches which in this case would be
279:26 - a snippet with an ID of Shady's group
279:28 - it's going to return that snippet if it
279:31 - does not find it it's going to return
279:33 - undefined and you can see down here that
279:35 - this function is not happy because is
279:36 - joined is supposed to be a Boolean but
279:39 - right now it's either going to be a
279:40 - snippet or undefined and the way to fix
279:42 - that is we can just add a double bang
279:44 - operator in front of this entire thing
279:46 - and that is just going to booleanize it
279:48 - to make it true or false it's going to
279:49 - behave the exact same way but now it's
279:51 - just a Boolean okay so now that is Happy
279:52 - okay so now all we need to do is go and
279:54 - fetch the user's Community Snippets from
279:57 - the database and store them inside of
279:59 - this my Snippets array so let's do that
280:01 - and we're going to put that logic inside
280:02 - of our hook here
280:04 - okay so let's create a function called
280:06 - get my Snippets and this is going to be
280:08 - asynchronous because we need to
280:10 - communicate with our database which is
280:11 - asynchronous and inside of here I'm
280:13 - going to create a try catch block to
280:16 - help us with our error handling so if
280:18 - there's an error I'm going to say get my
280:19 - Snippets error and log the error and I'm
280:22 - also going to come up here and create
280:24 - some loading and error state so I'm
280:25 - going to say loading set loading is
280:28 - equal to use state
280:31 - false and error and set error is going
280:35 - to be initialized as an empty string as
280:38 - usual perfect okay so just before our
280:40 - try block and once you set loading to be
280:42 - true as we are waiting for our Snippets
280:45 - to come back from the database and
280:47 - inside of here we're actually going to
280:49 - go get this user Snippets
280:51 - so because we are getting the Snippets
280:54 - for the currently logged in user we need
280:56 - access to that currently logged in user
280:57 - so let's come up here and grab that from
281:00 - the hook we've seen before use auth
281:03 - state
281:04 - pass it our auth object from Client app
281:06 - as usual and now let's come down here
281:09 - now let's actually communicate with our
281:10 - firestore database and grab all of the
281:13 - documents inside of this community
281:15 - snippet collection for this current user
281:17 - so how we're going to do that is we're
281:19 - going to say const snippet Docs it's
281:22 - going to be equal to a weight get docs
281:25 - again coming from firestore and inside
281:27 - of this function we need to pass it a
281:29 - collection reference so that it knows
281:31 - which collection to get all these
281:33 - documents from and that collection is
281:35 - going to be a collection object from
281:36 - firestore and we need to pass this our
281:38 - firestore object so the path to the
281:41 - collection that we want to get all of
281:43 - these documents from is going to be
281:44 - users then outside of the users we want
281:48 - to go into this currently logged in
281:49 - users user ID document then on that
281:52 - particular user we want to grab
281:53 - everything from the community Snippets
281:55 - subcollection
281:57 - so that is the path to that collection
282:01 - let's save this firestore is going to
282:02 - return an array of objects of all the
282:04 - documents inside of that collection and
282:06 - what we want to do is take those
282:09 - documents and extract all of the data
282:10 - from each one and then store it in my
282:13 - Snippets inside of Community State value
282:14 - and we can do that using the set
282:16 - Community State value function what
282:18 - we're going to do is we're going to
282:19 - create a new variable called cons
282:20 - Snippets and we're going to take those
282:23 - snippet docs return from Firebase until
282:25 - you'll notice that there is a property
282:26 - called the docs provided by firestore
282:28 - and this is going to allow us to iterate
282:30 - through these docs and convert them into
282:33 - JavaScript objects to store into state
282:35 - so we can say dot docs and then dot map
282:39 - and then for each dock we want to
282:41 - basically create a JavaScript object and
282:44 - extract all of the data out of that
282:48 - document so this is how we do that so
282:50 - again we are looping through all of
282:52 - those docs returned by Firebase and then
282:54 - mapping them or converting them into
282:56 - objects with all of the data extracted
282:59 - from each document so to clarify this
283:01 - let's just log Snippets
283:04 - to see what they actually look like
283:06 - okay so let's go to our console and
283:09 - let's just refresh this page
283:14 - so I was trying to figure out why it
283:16 - wasn't showing up in the console and uh
283:17 - it's because I'm not even calling the
283:19 - function so uh that's probably why so
283:21 - what we do is actually call the function
283:23 - so we are going to call this function as
283:25 - soon as the application loads and the
283:27 - Dom mounts and the way to do that is
283:28 - like we would in any other component
283:30 - with the use effect we can use the same
283:32 - exact methods in our hook as we would in
283:34 - a regular component
283:36 - and inside of this use effect all we
283:38 - need to do is call that get my Snippets
283:42 - function
283:43 - if there's something we need to watch
283:44 - out for here and that is that since we
283:47 - are getting Snippets for a specific user
283:49 - we don't really want to call this
283:51 - function until we have an actual user ID
283:53 - returned from this use off State hook if
283:56 - you proceed like this there's going to
283:58 - be a data race and this could
283:59 - potentially be called before the user
284:02 - actually comes in from that hook which
284:04 - would result in this being undefined and
284:05 - we just don't want to do that it's kind
284:07 - of not a good idea so a way to protect
284:09 - against that is to just add a dependency
284:11 - inside of this use effect of the user
284:13 - that way this Hook is going to trigger
284:15 - every time user changes and then what we
284:17 - can do is at the very top of our use
284:19 - effect we can just prevent this function
284:21 - from being called if there is no user so
284:24 - we can just say if there's no user then
284:26 - return out of this function because
284:27 - there is no user to get Snippets for
284:29 - this is a very common thing to do in
284:31 - react if your functions that you're
284:33 - calling from inside of your use effect
284:35 - depend on this thing being valid so
284:38 - we're basically saying oh okay like the
284:40 - user is undefined get out of this
284:42 - function don't don't proceed and then if
284:44 - the user does become defined and say
284:46 - they log in use author to finally loads
284:47 - the data from the auth service then it's
284:49 - going to pass this and then we will call
284:51 - get my Snippets which will ensure that
284:53 - we are getting uh valid snippet
284:55 - documents okay so now we can see that in
284:57 - our console we actually are getting
284:59 - those Snippets so if I expand this here
285:01 - we can see that this is coming directly
285:03 - from the database and these are the
285:05 - Snippets for this particularly logged in
285:07 - user which is my Shad Mary at gmail.com
285:09 - right in our database there is shatties
285:12 - group is moderator true and that is what
285:14 - we are seeing on the front end here so
285:16 - this is just currently an array of one
285:18 - Community snippet because Shady shadmary
285:21 - gmail.com is only in my community right
285:23 - now Shady's group if I was in 10 there
285:25 - would be 10 okay so now all we have to
285:27 - do is take these Snippets and put them
285:28 - into our
285:30 - communitystatevalue.my Snippets and then
285:32 - we will actually have a valid way to
285:35 - check if I'm in this community or not so
285:37 - let's do that and we're going to see
285:39 - that this button is actually going to
285:41 - show us whether or not we're in here
285:43 - okay so let's go back to here and let's
285:46 - put that these Snippets inside of state
285:48 - so we're going to do is we're going to
285:49 - call that set Community State value
285:50 - because that's the state that we're
285:51 - updating and then take the previous
285:52 - state and spread it because the only
285:55 - thing we're modifying is my Snippets
285:57 - thanks to typescript we have this nice
285:58 - intellisense here
286:00 - and what we're doing is we're just going
286:01 - to set my Snippets to be sippets so we
286:04 - are going to get a typescript compiler
286:06 - error here and this is due to some
286:07 - discrepancies between the types with
286:09 - call signatures so the way to solve this
286:11 - would be to just Typecast the Snippets
286:13 - to be an array of community Snippets and
286:16 - we have an interface to find four
286:18 - Community Snippets in this file we just
286:19 - need to import it into that other file
286:21 - so I'm just going to export it out of
286:22 - here and now inside of use Community
286:24 - data we can just Typecast these Snippets
286:27 - to be an array of community snippet just
286:29 - make sure you import that from your
286:32 - other file so this is happy now and so
286:34 - just a quick fun typescript fact another
286:36 - way you could write an array of a
286:38 - certain type is to write it like this
286:39 - you could say array and then put that
286:41 - type in there like this this is the
286:43 - exact same thing I personally prefer
286:45 - this way it's totally up to you though
286:47 - okay so now check that out now that is
286:50 - joined variable is detecting that we are
286:53 - indeed in this community because that
286:56 - find function found that snippet of
286:59 - Shady's group inside of my Snippets so
287:03 - if I went to a different Community page
287:04 - for one that I was not in this would not
287:06 - happen and let me see if I can
287:08 - demonstrate that so I'm going to log out
287:10 - of my Chad Mary account and I'm going to
287:12 - log in as someone uh I think I have an
287:16 - account wall.com that still exists and
287:18 - I'll sign in give me a chatty
287:20 - yeah I did okay okay so you can see that
287:23 - I logged in as lol.com and lawatlaw.com
287:27 - is not in this community so is joined is
287:30 - false pretty cool it's actually working
287:31 - if I log out of this community
287:33 - and signed back in as shadmare hey
287:36 - gmail.com
287:39 - check that out it detects that I'm in
287:41 - this community automatically and the
287:43 - reason it was able to do that without me
287:45 - even doing anything is due to this use
287:47 - effect right because we wrote this use
287:48 - effect that is going to trigger every
287:50 - time the user changes so what happened
287:52 - was I was logged in as lawat law.com I
287:55 - then logged out of law.com and the user
287:58 - went from the law the law that law.com
288:01 - object to null and so then this
288:05 - triggered again but it did not make it
288:06 - past this because null is a falsy value
288:09 - then I logged back in as Shad Mary
288:11 - gmail.com then the user went from null
288:13 - to the shadmare he user object which is
288:16 - a truthy value so it made it past this
288:18 - it called get my Snippets it then went
288:20 - and got the snippet docs for Shad
288:24 - Marie's user ID and that is how that
288:28 - happened so I think this is pretty cool
288:29 - and now we're actually able to detect uh
288:33 - whether or not I'm in this community and
288:34 - so now all you have to do is just write
288:36 - the logic inside of these to joining and
288:38 - leaving Community functions and we'll be
288:40 - and we will be able to actually click
288:41 - this button and remove ourselves or add
288:43 - ourselves now let's just come down to
288:45 - the bottom of our try catch Block in our
288:47 - get my Snippets function and just add
288:49 - set loading to be false when that
288:52 - fetching is complete and we actually
288:54 - want to display this loading State
288:55 - inside of this button here in our header
288:57 - so what we can do is actually add the
288:59 - loading state to the return object of
289:01 - our hook just like this and then inside
289:03 - of our head component we can just grab
289:06 - that value from our hook and then we can
289:09 - use it down here on our button I can add
289:11 - is loading state
289:14 - and set it equal to loading from the
289:16 - hook so you saw that temporarily change
289:19 - there so direct your eyes to here and
289:21 - watch what happens when I refresh the
289:22 - page
289:26 - perfect so we can see that the loading
289:28 - state is working and once that my user
289:30 - has been grabbed from the auth service
289:31 - it then fetches my Snippets and we are
289:34 - in business and also one thing you'll
289:36 - notice here is that if I log out nothing
289:39 - happens but we should clear that and
289:41 - this is super easy with recoil because
289:43 - they have a hook that is called the use
289:45 - reset recoil State and this will
289:47 - basically just clear the atom that we
289:49 - give this hook and a single line of code
289:50 - we can do this so let's go over to our
289:52 - user list component that we haven't been
289:54 - into for a hundred years I think we are
289:56 - logging out right here right here okay
289:59 - so what I'm going to do is I'm going to
290:01 - grab this sign out function I'm going to
290:03 - copy it come up here and create another
290:05 - function called log out which is going
290:08 - to be asynchronous
290:09 - I'm going to put that sign art function
290:12 - here and await it and when that
290:14 - successfully completes you're just going
290:16 - to clear our community state
290:19 - which makes sense because now that the
290:21 - user has logged out we don't really want
290:22 - any Community data related to this user
290:25 - in our state anymore so then all we need
290:27 - to do is up here call that use reset
290:29 - recall stay Hook and the way we call
290:30 - that is we can create a variable so we
290:32 - can say reset Community State it's going
290:34 - to be equal to use reset recall State
290:37 - and then just pass this the Community
290:38 - State atom that we are interested in
290:40 - resetting and then come down here and
290:43 - call that function reset Community state
290:45 - that is it and then we just have to come
290:47 - down here and change the on click in
290:49 - this log out button to be our new log
290:52 - out function just like that so now when
290:54 - I actually log out it should clear and
290:56 - we should see this go back to the button
290:59 - that says join so let's see
291:01 - perfect so let's try that again so if I
291:04 - log in
291:05 - shed Mary gmail.com
291:08 - cool log out
291:11 - nice so I'm going to close this file
291:13 - because we are never going to see it
291:14 - again I don't think Vibe user menu now
291:17 - let's actually write the functions for
291:18 - joining and leaving our community and I
291:20 - don't know what it is about these
291:21 - functions I just find them super
291:22 - satisfying to write they just flow and
291:25 - they're just cool I don't know maybe I'm
291:27 - weird but let's see if you feel the same
291:30 - way so inside of our use Community data
291:33 - we did Define these functions here now
291:34 - this is where we're going to get into
291:36 - batch rights with Firebase so let's
291:38 - search up Firebase transactions and if
291:40 - you remember I was mentioning how batch
291:42 - rides and transactions are very very
291:44 - similar and just we have a bit of a
291:45 - reference let's open up our create
291:47 - Community model because we actually
291:48 - wrote Our transaction here and let's
291:49 - talk about just the slight difference
291:51 - between these two things so basically
291:52 - transactions and batch rides represent
291:54 - the same thing in the sense of doing a
291:57 - group of actions with our database and
291:59 - we only want all of them to succeed or
292:01 - none of them to succeed so if one of
292:02 - them fails fail them all that applies to
292:04 - both transactions and Bash rights in the
292:07 - case of transactions though you can do
292:09 - read and write operations whereas batch
292:11 - writes are only right operations that is
292:14 - the only difference very minor so the
292:16 - only reason we use a transaction in this
292:18 - create Community modal was because we
292:20 - were doing a read first we were just
292:22 - simply reading from the database to see
292:24 - if the community exists when we're
292:26 - joining or leading a community we only
292:28 - need to perform right operations like
292:29 - deleting and updating documents so we
292:31 - can just use batch rates that only
292:33 - succeed all together let's go back to
292:36 - our hook and let's write some batch
292:38 - writes so inside of both of these
292:40 - functions there are two database updates
292:41 - that we need to make that we are going
292:42 - to group together into a batch so the
292:45 - first action inside of our batch is
292:47 - going to be creating a new community
292:49 - snippet for this user right if the
292:51 - user's joining this community we need to
292:53 - take this community and create a snippet
292:55 - and then add it to that user's Community
292:57 - Snippets that is the first thing and the
292:59 - second right operation we want to do in
293:01 - this batch is going to be updating
293:04 - the number
293:06 - of members
293:08 - on this community right because if the
293:11 - user is joining the community we need to
293:12 - go in to that Community document and add
293:15 - one to this value number of members so
293:17 - these two actions are going to represent
293:19 - our batch rate
293:22 - so after this batch write successfully
293:23 - completes and our back end has been
293:25 - updated to reflect this user's joining
293:27 - of the community we just need to update
293:29 - our client data which is our recoil
293:31 - state to actually update our UI and
293:33 - reflect this change to the user so we
293:35 - can just write update recoil state which
293:37 - in this case is our community
293:39 - state DOT my Snippets right we're just
293:42 - going to Simply add this new snippet to
293:44 - communitystate.my Snippets so these are
293:47 - the three things that we have to do in
293:48 - this function and the lead Community
293:49 - function is just going to be the exact
293:51 - opposite of this so the first thing in
293:53 - the background I just want to simply be
293:54 - deleting
293:57 - the community snippet
293:59 - from user and then we are also going to
294:02 - update the number of members by
294:04 - subtracting one up here it would have
294:07 - just been one and then we will also
294:09 - update our client to remove that
294:11 - Community snippet from our Reflow state
294:13 - so now that we've kind of defined what
294:14 - these functions are going to be doing
294:15 - let's actually write this logic out so
294:18 - let's start with the joining of
294:19 - community so I'm going to create a try
294:20 - block inside of here and as usual I'm
294:23 - going to log and error if it occurs join
294:26 - Community error
294:27 - error and then we can just set error to
294:31 - be error Dot message
294:33 - perfect and just to make typescript
294:35 - happy let's make this type any and I
294:38 - think actually down here we forgot to
294:39 - set error as well in our get community
294:42 - Snippets function so let's just quickly
294:44 - do that set error
294:46 - to be error Dot message
294:49 - so now let's work on the ideal case so
294:51 - here is how we're going to do a batch
294:53 - write in firestore so we're going to
294:55 - create a variable called batch and we're
294:57 - going to use the function from a
294:58 - pressure called Write batch and we're
295:00 - going to pass this our firestore objects
295:03 - on Client app as usual and so now on
295:05 - this batch object is where we're
295:06 - actually going to perform these
295:07 - operations so let's create a new
295:09 - variable called new snippet and this is
295:12 - going to be of type Community snippet
295:13 - which I think we're already importing
295:15 - we're going to give this a community ID
295:17 - of community data dot ID and we're going
295:20 - to set the image URL to be the community
295:23 - data dot image URL and if it does not
295:25 - exist we're just going to make it an
295:27 - empty string and again these are not
295:28 - going to be this for now but we will
295:30 - just add it here because why not so this
295:32 - represents our new snippet and so we are
295:33 - not a moderator of this community
295:34 - because we are just joining so the is
295:36 - moderator key is not going to be added
295:38 - here so now to actually write this
295:40 - snippet to the database we can use our
295:42 - batch variable defined on line 68 and we
295:45 - can say batch.set and this is going to
295:47 - look exactly the same as the the set
295:49 - dock function that we've used before so
295:51 - we need to pass in a document reference
295:53 - for the document that we actually want
295:54 - to set so we can say Doc and then we can
295:57 - pass this function our firestore object
295:58 - from Client app so the path to the
296:01 - collection that we are writing this new
296:03 - document to is going to be users slash
296:05 - user.uid
296:08 - slash Community Snippets so this is the
296:11 - community snippet subcollection that
296:13 - lives on that particular user's document
296:15 - and then as a third argument to the doc
296:17 - function we give the ID of this newly
296:20 - created document which is going to be
296:21 - Community data dot ID and then the data
296:24 - that we actually want to put inside of
296:25 - this document is going to be that new
296:28 - snippet object
296:29 - just like this so the second thing we
296:31 - need to do in our batch is update the
296:34 - number of members on this community
296:36 - document so because here we are updating
296:38 - an existing document not creating a new
296:40 - one we can use batch dot update and this
296:43 - update function is also going to take a
296:45 - document reference
296:46 - and this particular document lives
296:49 - inside of the collection called
296:50 - communities and the ID of this document
296:53 - is community data dot ID
296:57 - and as a second argument to the update
296:58 - function we're going to pass in an
297:00 - object that is going to contain the
297:03 - updates that we want to make to this
297:04 - document and the field that we want to
297:06 - update is number of members and what we
297:09 - are doing to this field is increasing it
297:11 - by one and firestore has a function
297:14 - called increment
297:15 - and then we can pass in the value that
297:17 - we want to increment this field by which
297:19 - in this case is just one and that is it
297:21 - for our batch rights however just
297:22 - writing these batches out does
297:24 - absolutely nothing in order to actually
297:26 - make them execute and update our
297:28 - database we need to call the function
297:29 - batch dot commit and that is actually
297:32 - going to execute these batch writes and
297:35 - this is an asynchronous function so we
297:37 - need to put the await keyword in front
297:38 - of it so do make sure that you have the
297:40 - async keyword on your joining Community
297:42 - function declaration up here okay so
297:44 - after these batch writes successfully
297:46 - complete without any errors and our
297:48 - database is all nicely updated we can
297:50 - now update our recoil State on our
297:52 - client to reflect this change and we're
297:54 - basically just going to add this new
297:57 - snippet up here to the existing my
297:59 - Snippets rate so we can do that by
298:01 - calling set Community State value taking
298:03 - the previous value of State
298:06 - spreading it and the value we're going
298:09 - to be updating is going to be my
298:10 - Snippets and what we want to do is like
298:13 - I said before append this new snippet to
298:16 - the end of the existing my Snippets
298:18 - array so we can take the previous value
298:20 - of my Snippets and spread it so take
298:23 - what's already there and then just add
298:25 - this new one to the end of that array
298:28 - perfect and that is it for this function
298:31 - all we need to do down here at the end
298:33 - of our catch block is just set loading
298:34 - to be false just like that awesome and
298:37 - I'm just going to quickly move this
298:39 - comment down here so that it is
298:41 - alongside what it's actually describing
298:43 - so now let's work on the lead Community
298:45 - function so let's come down here and
298:47 - create a try catch block just like
298:49 - before we can log and error leave
298:51 - Community error
298:54 - error.message
298:56 - make the type of error any
298:58 - so in our try block we can create a
299:00 - batch variable again using that right
299:02 - batch function from firestore
299:05 - and the first thing we want to do with
299:07 - this batch is delete the snippet off of
299:10 - this user so we can do that by saying
299:11 - batch dot delete we can pass in the
299:14 - document reference for the document that
299:16 - we actually want to delete so the path
299:17 - to the collection that this document
299:19 - lives in is going to be the exact same
299:21 - path is up here so the currently signed
299:23 - in users Community Snippets sub
299:25 - collection is the collection we are
299:27 - accessing and as a third argument the ID
299:30 - of the actual Community snippet document
299:32 - is going to be Community ID which we are
299:35 - passing to the function up here okay
299:37 - second batch rate we need to do is
299:39 - update
299:40 - our number of members again and this is
299:42 - going to look pretty much exactly the
299:44 - same as this update here with just a few
299:46 - differences so I'm just going to copy
299:47 - this one from join Community bring it
299:49 - down here
299:50 - and the only changes we need to make are
299:52 - the ID of the document that we are
299:55 - updating is going to be Community ID and
299:58 - instead of incrementing this value we
300:00 - are going to decrement this value by one
300:03 - since we are leaving the community
300:04 - firestore does not have a decrement
300:07 - function so we can just make this number
300:08 - negative so it's going to add a negative
300:10 - 1 to it and it will work exactly as we
300:13 - desire so now let's actually execute
300:15 - these batch writes by saying await batch
300:18 - dot commit
300:20 - okay so I'm just going to move this
300:22 - update comment down here and now once
300:25 - our database has successfully updated
300:27 - without any errors we now want to update
300:30 - our recall State and we can again do
300:31 - that with the set Community State value
300:33 - function take the previous value
300:37 - spread it
300:38 - the filter updating is again my Snippets
300:40 - however this time we are going to be
300:42 - removing a snippet from the current my
300:45 - Snippets array not adding it and we can
300:47 - do that by using the filter function
300:49 - given to us by JavaScript which is
300:51 - another higher order array function so
300:53 - we can take the previous value of my
300:55 - Snippets and call the dot filter
300:57 - function on it and this is going to Loop
301:00 - through and it's going to remove items
301:02 - that do not meet a certain condition and
301:06 - the filter condition that we're going to
301:07 - apply here is we're going to check that
301:09 - the item's community ID does not equal
301:11 - to the community ID that we are removing
301:14 - okay and that is it for this function we
301:18 - just need to set loading to be false
301:21 - down here and also we can set error in
301:24 - the catch block of here to the error Dot
301:26 - message just like that all right so
301:29 - these functions are done they look good
301:31 - to me let's give them a go so let's go
301:35 - to my users document so Chad Mary and we
301:38 - can see that I'm currently inside of the
301:40 - community chatty's group because I
301:42 - created it so let's go to our app so it
301:44 - says yeah I am joined into this
301:45 - community so when I click on this it
301:47 - should remove me
301:48 - okay so it works on the UI let's see if
301:51 - the database updated yeah you can see
301:52 - that that document no longer exists and
301:55 - this is actually in real time so if I
301:57 - bring this over here we can visualize
301:58 - this a bit better so let me join now
302:01 - and we can see that in real time that
302:03 - added that document to that sub
302:05 - collection so leave the community
302:08 - join the community
302:10 - awesome that is super cool let's go to
302:12 - another community that I did not create
302:14 - new new new
302:18 - and let's try joining this one
302:21 - so join
302:22 - awesome it's added in there
302:24 - leave
302:26 - perfect now let's check the number of
302:28 - members functionality
302:30 - so we can see communities go to new new
302:33 - we said there are two members in there
302:35 - right now so if I join this it updates
302:38 - to three if I leave it decrements to two
302:41 - and these are our batch rights in action
302:44 - so they are clearly working which is
302:46 - amazing so let's put this back over here
302:48 - okay so we can now join and leave
302:50 - communities it updates the number of
302:52 - members and this is a huge piece of
302:55 - functionality of our app this is like a
302:57 - critical piece of Reddit and we have
303:00 - successfully implemented this and that
303:02 - is super cool so all we need to do now
303:04 - is just open that auth model if the user
303:06 - tries to click on this if they are not
303:08 - logged in so let's log out
303:11 - and let's come up here and actually
303:13 - implement this I did have some comments
303:15 - up here we already have the user from
303:18 - our US state hook so all we need to do
303:19 - is add a simple check at the top of this
303:22 - honor join the community function for a
303:24 - valid user so you can say if there is no
303:27 - user
303:28 - then let's open the modal
303:30 - so to open the model we can grab our set
303:33 - off modal State function from recoil so
303:35 - we can say cons set auth modal State and
303:38 - we can use the use set recoil State hook
303:40 - pass in our auth model State atom and
303:44 - then come down here and call that
303:46 - function set authmodal State and the
303:48 - state we want it to be is open true and
303:51 - we can set the view to be the default
303:52 - view of log n and then we can return out
303:55 - of this function because we do not want
303:56 - to proceed with joining or leaving so
303:59 - now since I'm now logged in if I click
304:01 - on this Boom the model opens and it's
304:03 - going to ask me to log in and that is
304:06 - why I love having the auth modal State
304:08 - Global in recoil so that we can protect
304:10 - certain features against unauthenticated
304:12 - users and that is so cool so if I did
304:15 - want to join this community I would have
304:16 - to log in
304:18 - and then it would allow me to join
304:21 - so we are done writing all of the
304:23 - functions for joining and leading
304:25 - communities and the best part about this
304:27 - hook and these functions is that we can
304:28 - reuse this logic in any component that
304:32 - requires it in our case it's going to be
304:33 - top communities but we could add more
304:36 - components to this app in the future
304:37 - that would need the same functionality
304:39 - and we could just reuse this hook and I
304:41 - think that is so cool really clean
304:43 - architecture and I'm super excited about
304:45 - it okay so now we're done with the whole
304:47 - joining and leading a community thing
304:48 - let's actually start working on creating
304:50 - posts in the communities which is
304:52 - probably the most exciting part of this
304:54 - entire project so on Reddit how it works
304:57 - is that inside of community there's this
304:59 - component here that has an input in it
305:01 - and then when the user clicks on it it
305:03 - brings them to the URL R Community name
305:06 - submit where the actual post form is and
305:09 - then they can create the post from
305:10 - within here so this thing is basically
305:12 - acting as a link to the submit page so
305:15 - let's work on that now and then we can
305:17 - actually get rid of these really ugly
305:19 - borders here and start putting in some
305:21 - nice looking
305:22 - all right so inside of components
305:26 - and inside of our community directory
305:28 - I'm going to create a new file called
305:30 - create
305:31 - post link
305:33 - .tfx
305:35 - and this is what is acting as this input
305:37 - linky type thing here so inside of here
305:40 - I'm going to use our snippet
305:42 - and we are not going to take in any
305:44 - props to this components we can get rid
305:45 - of that and the actual HTML for this
305:47 - component is relatively easy and basic
305:49 - it's just a flexbox with a few icons
305:50 - inside of it and then some additional
305:52 - styling applied so now that we actually
305:54 - have a valid left hand side component
305:57 - defined let's just go back to our index
305:59 - page for our community quickly and get
306:01 - rid of this dummy left hand side div and
306:04 - actually use that real component create
306:07 - post link
306:08 - and we can see that show up here in our
306:11 - left hand side fragment okay so let's
306:13 - come back here I'm just going to close
306:15 - my directory so that's my room so what I
306:17 - decided to do for this component is to
306:19 - just paste in the code from my existing
306:21 - project it is a lot of what we have seen
306:23 - already and I do want to get to the post
306:26 - functionality because it's a lot more
306:27 - exciting this component is pretty much
306:29 - just acting as a link to the actual
306:31 - creation of post thing so I figured our
306:33 - time would be better spent doing that
306:35 - but I will explain the important parts
306:37 - so I'm just going to paste that in here
306:39 - and it's only about 70 lines it's not
306:40 - super long there's only one important
306:42 - function that would X over and it's a
306:43 - pretty short one and I will put the link
306:45 - to this component file in the
306:47 - description so you can access it
306:48 - directly all this thing is is just a few
306:51 - icons and an input acting as a link to
306:54 - the submit page the only function I want
306:57 - to go over is this on click function
306:59 - here which is being called when you
307:01 - click on this input so basically all
307:03 - this function is doing is redirecting
307:05 - the user to the submit page of this
307:07 - community which lives at this URL R
307:10 - Community ID submit which we saw on our
307:13 - demo the way we are doing that is with
307:16 - the next JS router and we can access
307:18 - that router from this hook use router
307:20 - which is coming from next slash router
307:23 - and the router does have this push
307:24 - method on it where we can just pass in
307:26 - string URLs and we can redirect the user
307:29 - to wherever we would like and we're just
307:31 - grabbing that Community ID from the URL
307:34 - from router.query so we're just
307:36 - stripping this particular piece of the
307:38 - URL and just as a reminder it is called
307:41 - Community ID because we gave it that
307:44 - name in this Dynamic route down here
307:48 - and just before this we are just doing a
307:50 - quick check to see if you are logged in
307:52 - before we redirect you to that page
307:54 - because the only one authenticated users
307:56 - to go to the submit page and so if I
307:58 - click on this we'll notice that the
308:00 - router works it takes us to the actual
308:02 - submit URL if you recall we did Define
308:04 - this page a while ago uh the submit.tsx
308:08 - file there's nothing in here so that is
308:10 - what this error is from so we're going
308:11 - to just quickly come up with a component
308:13 - here there's not going to be any props
308:16 - so we can just get rid of this and then
308:18 - I'm just going to rename this component
308:20 - to be uh submit post page just like that
308:25 - and I'll just make the text temporarily
308:27 - submit page and we're going to work on
308:29 - this page next we are going to be using
308:31 - the router in the future parts of the
308:33 - build so I wanted to cover how it
308:34 - actually works so I hope that makes
308:36 - sense and now we can actually start
308:37 - working on the submit page and build out
308:40 - the form for users to start creating
308:42 - posts all right you guys let's start
308:44 - working on the submit page this is
308:46 - probably one of the most exciting parts
308:48 - of the entire build because we're going
308:50 - to get into the actual post creation
308:51 - logic okay so let's go to our demo here
308:54 - and this is what we're going to be
308:56 - creating so we have a post form and then
308:59 - we have our about component here which
309:01 - we're going to create after we get the
309:02 - post functionality working to handle the
309:04 - overall layout of this page we can reuse
309:06 - our page content layout component that
309:09 - we created because we can again see that
309:11 - we have this left hand side right hand
309:13 - side layout here so let's come to our
309:15 - submit page and let's actually use that
309:18 - page content component and as you recall
309:20 - all we need to do here is just give this
309:22 - thing two fragments one for the left and
309:24 - one for the right and it will handle all
309:26 - of the layout styling and responsiveness
309:28 - for us so inside of our left content on
309:31 - this page this is where we are going to
309:33 - actually have this new post form right
309:36 - that's going to be one of the components
309:37 - inside of the left and then inside of
309:39 - the right here we're going to have our
309:41 - about component which are going to
309:43 - create after in addition to the new post
309:46 - form we do have this Ted block here that
309:48 - to post so let's create that so in this
309:51 - left fragment we can do we can move this
309:54 - down and above here is where we're going
309:56 - to actually create this title we're
309:57 - going to use a box component as its
310:00 - parent container and we can import this
310:01 - from Chakra and we are not using a
310:03 - flexbox because we do not need Flex
310:05 - styling here so we're just using an
310:07 - ordinary box and inside of here we're
310:09 - going to have the text create a post
310:12 - and let's come back to our app so we can
310:13 - see what we're doing here and actually
310:15 - I'm going to remove these really ugly
310:18 - looking borders because I don't know
310:20 - about you but I am definitely done
310:21 - looking at those
310:22 - foreign
310:24 - so we can close this and now we can see
310:27 - that we have that title there so let's
310:29 - just apply some simple styles to our box
310:31 - component here so we're going to give it
310:33 - a padding of 14 pixels on the top and
310:36 - bottom zero pixels left and right
310:38 - I'm going to give it a border bottom of
310:40 - one pixel solid and the Border color is
310:44 - going to just be white
310:46 - all right and that is that we are done
310:48 - with this okay and now we can actually
310:50 - start creating this new post form so
310:52 - let's go into our components folder and
310:55 - we're going to create a new folder in
310:56 - here called posts because we're going to
310:59 - create a series of post-related
311:01 - components our first of those components
311:03 - is going to be this new post form
311:06 - Newport farm.tsx
311:09 - and let's use our snippet so we are
311:11 - going to take in some props here in a
311:13 - bit and I'm trying to leave this blank
311:14 - for now let's come back to our submit
311:16 - file and actually import this and use
311:19 - the real component itself all right so
311:22 - we are going to build our form to be
311:24 - nice and modular clean components so
311:26 - that it's very easy to read and
311:28 - extendable so we basically just have
311:30 - this stateful nav bar here and then for
311:32 - each nav item we have an Associated
311:34 - component for example for post we have
311:36 - these text inputs for images and video
311:38 - we have this uploading component and
311:41 - we're not going to work on these
311:42 - features here because if I were to build
311:44 - on this tutorial would be massively long
311:46 - plus these two are a lot more
311:47 - interesting but feel free to add these
311:50 - to your project these would be great
311:51 - exercises after building these other two
311:53 - you're going to have a really strong
311:55 - understanding of how this form actually
311:57 - works and it would be a really good
311:58 - exercise to build these on top of it so
312:00 - let's come back to our app and let's
312:01 - actually start building out the
312:03 - structure of this component so the
312:05 - outermost container of our form is going
312:07 - to be a flexbox let's import this from
312:08 - Chakra and this is going to have a
312:11 - direction of column
312:14 - we're going to give it a background of
312:16 - white
312:17 - a border radius
312:19 - of 4 and a margin top of two now the
312:23 - first component inside of this Flex box
312:25 - is going to be another effects box and
312:28 - this is going to represent our nav bar
312:31 - nav bar has five items in it it has post
312:34 - images and video and these other three
312:36 - so we're going to do is we're going to
312:38 - create a static array outside of our
312:40 - component that is going to be an array
312:42 - of tab items and each tab item is going
312:44 - to have a piece of text and an icon and
312:47 - this is kind of the typical way to
312:49 - create multi-tab navigation so we're
312:51 - going to create this outside of the
312:53 - functional component because it is a
312:55 - static variable it is not really react
312:57 - related so we can put it outside so we
312:59 - can create the array called form tabs
313:01 - and this is going to be an array of
313:03 - objects and each object is going to have
313:06 - a title
313:07 - and an icon so for example the first one
313:10 - is going to be post and for the icons
313:12 - I'm just going to grab the imports from
313:14 - my project and paste them in here so
313:17 - make sure you have these imported as
313:19 - well the icon for post
313:21 - is going to be IO document text
313:25 - second nav item is images
313:30 - and video the icon for this is going to
313:33 - be i o image outline
313:36 - the third nav item
313:39 - has the text link and the icon for This
313:41 - is BS link 45 degree
313:45 - the fourth one is poll and the icon is
313:48 - bi Pole
313:50 - and the very last one is talk
313:54 - and this one has BS mic
313:57 - perfect now down here we are going to
314:00 - actually map through these tab items and
314:04 - for each one
314:06 - they're going to return some sort of
314:08 - HTML and then HTML is going to be its
314:12 - own component called tab item and we're
314:15 - going to define the tab item component
314:16 - in another file for each tab item
314:19 - component we're going to be passing a
314:21 - single tab item from our array as a prop
314:23 - so we actually want to create a type
314:25 - for our tab items so we're going to say
314:28 - export type tab item
314:30 - as we saw a tab item has a title of type
314:33 - string and the icon has kind of a weird
314:35 - type it is type of the chakra icon
314:40 - dot arguments if you recall when we
314:42 - create icons it has this as prop here
314:45 - and it accepts a type of Icon and so
314:48 - this is actually what the type of these
314:49 - icons are perfect so let's actually
314:51 - create that component inside of posts
314:53 - we're going to create tab item dot TSX
314:56 - use our snippet
314:58 - and this is going to accept a prop and
315:01 - that prop is going to be of type tab
315:02 - item and why doesn't that want to import
315:07 - tab item
315:09 - there we go and we can grab that from
315:12 - our prop tier all right so now if I take
315:14 - that item
315:16 - and I just return the title let's come
315:18 - back over here and rather than just
315:20 - returning this fragment let's return
315:22 - our newly created tab item and this
315:24 - thing is expecting a prop of type tab
315:27 - item so we can pass in the item let's
315:30 - come back to our app over here and we
315:31 - can see that we are getting the titles
315:33 - of those tab items but they look
315:35 - terrible so we have some work to do on
315:37 - the CSS but at least you're getting
315:39 - submitted in there now something else
315:40 - you'll notice about this navbar that is
315:42 - really important is that we need to know
315:44 - which one we are currently clicked on
315:46 - because the Styles change and it also
315:48 - changes which components we're actually
315:50 - seeing in the form so we're going to
315:52 - need some form of state to actually
315:54 - track which tab item is currently
315:56 - selected so I'm going to create a state
315:57 - variable called select a tab
316:00 - and the setter function is going to be
316:01 - set selected Tab and this is just going
316:04 - to be local state so we can just use the
316:06 - use statehub and the default one we just
316:07 - want to be this post one here which is
316:09 - going to be form item tabs at index 0.
316:12 - that is the initial value of state so we
316:14 - can say form tabs at index 0 and we're
316:17 - actually just going to use the text for
316:19 - our selected State and I'm just going to
316:21 - close our nav on the side so we have
316:23 - more room so now we actually have a way
316:25 - of detecting which one is selected
316:27 - because when we iterate through them we
316:29 - can pass in a prop called selected which
316:31 - is going to be a Boolean which
316:32 - represents if this particular tab item
316:34 - is the currently selected one that
316:36 - Boolean is going to be the result of the
316:38 - statement that this particular item's
316:39 - title is equal to the currently selected
316:42 - tab State so if the current one we're
316:43 - iterating through is the one that's
316:45 - selected then this is going to be true
316:47 - so only one of these is going to have
316:49 - selected being true at a single time
316:51 - because we can only have one selected
316:53 - tab item so inside of tab item we now
316:55 - need to accept that as a prop so we can
316:57 - say selected Boolean
317:00 - grab that from here and we're going to
317:02 - use that to apply that conditional
317:04 - styling cool let's come back to our app
317:06 - here and let's start working on the
317:08 - structure of our nav items so basically
317:11 - each nav item is going to be represented
317:13 - by a flexbox and inside of the flexbox
317:15 - we're going to have another flexbox
317:16 - which is going to be the parent
317:18 - container of the icon and each tab item
317:21 - is going to have the icon of the item
317:24 - that's being passed dot icon and
317:26 - underneath this you're just going to
317:27 - have some text
317:29 - and that text is just going to be item
317:32 - dot title perfect so now we're actually
317:34 - seeing those icons show up there okay
317:36 - and this icon container we're going to
317:37 - give it an align items of Center and a
317:41 - height of 20 pixels and a margin right
317:43 - of two and this text here we're going to
317:46 - give a font size of 10 points so it's
317:50 - going to be a little bit smaller there
317:51 - let's actually work on this parent
317:53 - container now which is where all of this
317:55 - conditional styling is going to go using
317:57 - the selected State all right so on this
317:59 - outermost container we're going to say
318:00 - justify Center and align
318:03 - Center so that we're centering
318:05 - everything inside of the nav item we're
318:07 - going to give it a flex grow of one so
318:10 - that they all take up an even amount of
318:12 - space
318:13 - we're going to apply a padding of 14
318:15 - pixels top and bottom zero pixels left
318:17 - and right and we want to make the cursor
318:21 - pointer
318:22 - because this thing is clickable okay and
318:24 - our hover styling is going to just have
318:27 - a background of gray 50. as you can see
318:31 - now when I hover over these things we're
318:32 - starting to get some Dynamic stuff going
318:34 - on here let's actually use the selected
318:36 - state to apply this conditional styling
318:39 - so the color of the text is going to
318:41 - change depending on if you're selected
318:42 - or not if we are selected the color is
318:45 - going to be blue 500 and if you're not
318:47 - it's going to be gray 500 the Border
318:50 - width is also going to change if we are
318:52 - selected and we're going to give four
318:54 - parameters to the Border width here one
318:56 - for the top right bottom and left so
318:58 - it's going to be 0 pixels one pixel 2
319:01 - pixel
319:02 - zero pixels if we are selected and if
319:05 - you are not selected you're going to
319:06 - have 0 pixels one pixel 1 pixel 0 pixel
319:10 - the next style is going to be border
319:12 - bottom color
319:14 - and our border bottom color is going to
319:16 - change depending on if we are selected
319:18 - if we are selected we are going to have
319:20 - a border bottom of blue 500 if we are
319:23 - not it's going to be gray 200 okay we're
319:25 - starting to see some stuff up here on
319:27 - the UI there the border right color is
319:30 - going to be gray 200. okay and that is
319:33 - all of the CSS we're going to add here
319:35 - the very last thing we need to add to
319:37 - this flexbox is just a non-click
319:39 - function and that on click function
319:41 - needs to toggle the selected state so
319:45 - that we're actually selecting the one
319:47 - that we click on in order to do that we
319:49 - need access to the set selected function
319:52 - defined up here so you're going to pass
319:54 - that as a prop as well so as a third
319:57 - prop to each tab item we're going to
319:58 - pass the function set selected tab
320:00 - and it's going to be equal to set
320:02 - selected Tab and then inside of tab item
320:05 - you just have to add that to our tab
320:06 - item props so we can say set selected
320:10 - tab so this function is going to take in
320:13 - an argument of type string because we
320:14 - are sending it a title of the particular
320:17 - tab item that we clicked on and it's
320:19 - going to return void so now we just need
320:21 - to set this as a prop here
320:24 - and then down here add that as an on
320:26 - click function so we can say set
320:29 - selected Tab and pass in our item dot
320:32 - title
320:33 - okay so now if I click on these things
320:35 - you can see that we're actually toggling
320:38 - the state and the conditional stylings
320:40 - are being applied and actually one thing
320:43 - I did miss in these Styles here is just
320:45 - the font weight and we're going to make
320:46 - this 700 so that makes it look nice and
320:49 - bold okay so we are completely done with
320:51 - this tab item component we are going to
320:53 - close this and come back into our new
320:55 - post form alright guys let's continue on
320:57 - with our post form I'm going to collapse
320:59 - these form tabs so they are not in our
321:01 - way and actually we can make the type of
321:03 - this I don't know why I didn't do this
321:05 - before let's make the type of that an
321:07 - array of tab items all right so inside
321:09 - of our component here I'm going to
321:10 - define the three sort of core functions
321:13 - that are going to be used and that
321:15 - really make up our post form so the
321:17 - first one is going to be the one
321:18 - actually responsible for creating a post
321:21 - so I'm going to call it handle create
321:22 - post and it's going to be asynchronous
321:24 - the second one is going to be on select
321:27 - image and this is going to be the
321:28 - function that actually handles what
321:30 - happens when a user selects a particular
321:33 - image from their operating system and
321:35 - puts it into our post form and then the
321:37 - third one is going to be on text change
321:39 - which is going to be pretty much the
321:41 - exact same as those on change functions
321:43 - that we created in our login form and
321:45 - sign up form that just handle what
321:47 - happens when a user types into a text
321:49 - field okay so these are the three
321:51 - functions that are going to govern this
321:54 - entire component and this is the one
321:57 - that actually is going to create the
321:58 - post and send it to Firebase but in
322:00 - order to send a post to our database
322:01 - we're going to need some content in that
322:03 - post which is where these two functions
322:05 - come into play all right at the very top
322:08 - here I'm also going to create some state
322:10 - for our text input and the two inputs
322:13 - that a post contains is a title and a
322:16 - body all right so I'm going to call this
322:18 - text inputs and set text inputs
322:23 - and then we're going to set this equal
322:24 - to use State and inside of here like I
322:26 - just said we're going to have a title
322:28 - we're going to initialize as an empty
322:29 - string and a post body which is also
322:32 - going to be empty and then under here
322:34 - I'm going to define the state that is
322:36 - going to represent the actual selected
322:38 - file for the image that the user
322:40 - selected so we can create a state
322:41 - variable called selected file and then
322:44 - set selected
322:45 - file
322:47 - and this is going to be used state
322:49 - and the type of this selected file is
322:52 - going to be of type string it's going to
322:53 - represent the actual name of the file or
322:55 - the thing that we would use as the
322:57 - source of the image and we're going to
322:58 - Define some more State variables in a
323:00 - bit but these are the core ones required
323:02 - for creating a post and these are the
323:03 - functions that we're going to use so the
323:05 - next component that we're going to
323:06 - create is going to be our text inputs
323:10 - like these inputs over here so let's
323:12 - come back to our app and start building
323:14 - this all right so underneath our navbar
323:16 - Flex container we're going to create
323:17 - another Flex container which is going to
323:19 - represent the container of all the other
323:21 - components displayed in the form so our
323:23 - first component inside of here is going
323:25 - to be those text inputs so I'm going to
323:27 - call this text inputs and I'll comment
323:28 - that out okay and let's go create this
323:30 - text inputs component so inside of our
323:32 - posts folder here I'm going to create
323:34 - another folder called post form and
323:37 - inside of that folder I'm going to
323:38 - create text inputs
323:41 - dot TSX and use our snippet and this is
323:45 - going to take in some props but we will
323:46 - Define that after we have built out the
323:48 - HTML for it
323:49 - so the text inputs are going to be a
323:52 - stack component from Chakra and just as
323:54 - a reminder stack is just a flexbox with
323:57 - the direction of column and then handles
323:59 - the spacing for us and we're going to
324:01 - space out our inputs with a value of
324:03 - three and we're going to make the width
324:05 - of this 100 so that it takes up the
324:07 - entire container and essentially all
324:09 - that's going to be in here are going to
324:11 - be two text inputs and then the button
324:13 - to actually create the post so one of
324:14 - those inputs is going to be an actual
324:16 - input from Chakra and the second input
324:19 - for the text body is going to be a text
324:22 - area component from Chakra so it's a
324:25 - little bit larger than just a regular
324:26 - input and then underneath that we're
324:28 - going to have a container for our button
324:31 - so we can just put that in here for now
324:33 - just like this and this button is going
324:34 - to say post that's the button they're
324:36 - actually going to click on to create a
324:38 - post and we just need to import Flex
324:40 - from Chakra here now that we have
324:41 - something defined let's come back to our
324:43 - new post form and bring this thing in
324:50 - import from text inputs
324:53 - and we have the new form displayed there
324:55 - it doesn't look very good but we will
324:57 - make that a lot better right now and
324:59 - we're going to give this Flex container
325:00 - here a padding of four just to make it
325:04 - look nice and clean there now let's go
325:05 - in here and work on the styling of these
325:07 - inputs and they pretty much have the
325:09 - exact same style length we just need to
325:10 - write out the Styles once and then we
325:11 - can just paste them for the other one
325:12 - all right so the name of this input is
325:15 - going to be title because it's the title
325:17 - of our post the value is going to be
325:19 - coming from our props from that text
325:22 - input state that I created but we'll
325:24 - come back to that our on change is also
325:27 - going to be coming from our props so I
325:29 - will also come back to that our font
325:30 - size is going to be 10 point
325:34 - our border radius is going to be what we
325:35 - always use for and then our placeholder
325:39 - for this is going to be the text title
325:42 - all right and I'm just going to comment
325:43 - these out for now because it was
325:46 - complaining there okay and let's apply
325:47 - our pseudo class styling so our
325:49 - placeholder we're going to give a color
325:51 - of gray 500 we're going to apply Focus
325:54 - styling so when the user actually clicks
325:55 - on this thing what does it look like
325:57 - we're going to give it an outline of
325:58 - none a background of white
326:01 - a border of one pixel solid and a border
326:04 - color of black
326:07 - nice so if I click on that we can see
326:10 - that that is what it looks like that
326:11 - looks super clean nice and that is it
326:14 - for our styling so I'm just going to
326:15 - copy these and paste them down on our
326:17 - text area because we're doing the exact
326:19 - same styling down here
326:21 - let's just change the placeholder of
326:24 - this to be
326:25 - I forgot what the placeholder is
326:27 - actually what is it text optional
326:29 - and that is indeed what it does say on
326:31 - Reddit because I think you only need a
326:33 - title which is kind of weird in my
326:34 - opinion and the last thing is that we
326:36 - just need a name here and that is going
326:38 - to be body and just as a reminder these
326:40 - names are required because we need them
326:42 - inside of our on change function in
326:44 - order for that function to know which
326:46 - part of the state to update okay and
326:48 - actually one last thing I've got to this
326:50 - text area is just a simple height of 100
326:53 - pixels just make it a little taller than
326:55 - it is by default all right now let's
326:57 - come down to our button and on Reddit
326:59 - the button is sort of over here so we
327:01 - can do that with our Flex container and
327:03 - we can just give it a property of
327:04 - justify and we can say flex and then
327:07 - I'll move it over there and on our
327:09 - button we're going to give this a height
327:11 - of 34 pixels heading of 0 pixels 30
327:15 - pixels we're going to add some disabled
327:17 - State here because we're going to
327:19 - disable the button if the user has not
327:21 - put a post title and then on click when
327:24 - the user actually wants to post this
327:27 - post what is going to happen this is was
327:29 - going to call our create post function
327:33 - okay and I guess it will not allow us to
327:34 - just have this empty so I'll just say
327:36 - disable false for now
327:38 - perfect and that is it for the layout of
327:41 - this form so all we need to do now is
327:42 - just add the on change function to these
327:44 - two inputs so that we actually have some
327:47 - text being put into our new post so
327:49 - let's come up here and let's define the
327:51 - props that we're actually going to take
327:52 - in to this component so the first prop
327:55 - is actually going to be our text input
327:57 - State and this is going to be an object
327:58 - with two parameters and the first one is
328:01 - going to be the title type string body
328:03 - is also going to be string so this is
328:05 - how we can Define types for objects in
328:07 - the typescript I don't think we've seen
328:09 - this before so our on change function
328:11 - for our inputs is going to take in an
328:13 - event
328:14 - and the event is going to be of type of
328:16 - react.change event and the element
328:17 - producing this change event is going to
328:19 - be an HTML input element or an html text
328:23 - area element and this function is just
328:25 - going to return absolutely nothing so we
328:27 - can just say that it returns void it's
328:29 - also going to take in the very critical
328:31 - function and I'll create post because
328:33 - that's what our button is going to
328:34 - actually call and we're going to declare
328:37 - this as a callback function that returns
328:38 - nothing and then we are going to also
328:40 - take in a Boolean for our loading State
328:43 - okay let's come down here and actually
328:45 - destructure those props so we can say
328:46 - text inputs on a change handle create
328:50 - post and loading
328:52 - just like that all right then on our
328:54 - inputs here we can use the on change so
328:56 - on change is equal to on change same
328:59 - thing down here for our text area the
329:03 - value of this title is going to be text
329:06 - inputs
329:07 - dot title and the value of our text area
329:11 - is going to be
329:14 - it's a text area sorry text inputs dot
329:16 - body
329:18 - perfect and this is not happy I think
329:20 - because we are not passing in any props
329:23 - from our parent yet that is why this is
329:25 - complaining okay so let's actually pass
329:27 - those in all right so our text input
329:29 - prop is going to be equal to the text
329:31 - input State variable handle create post
329:33 - is going to be equal to handle create
329:35 - post on change is going to be equal to
329:38 - our on text change function save that so
329:41 - it formats and the last thing we're
329:43 - going to take in is our loading state
329:45 - which we have not defined yet so I'm
329:47 - just going to say false
329:49 - we will Define this when we actually
329:50 - build out this handle create post
329:52 - function okay so we actually have our
329:55 - form being displayed now and now let's
329:56 - toggle the visibility of this component
329:59 - using our selected tab State okay so we
330:01 - only want to show this component if our
330:03 - selected tab state is equal to post
330:08 - so only show this if we are currently on
330:10 - the post tab so if I come here we're not
330:12 - going to show it we're going to show the
330:13 - image upload component and this is
330:15 - really cool this is how you can create
330:16 - sort of multi-tab components using state
330:20 - so let's work on this on text Gene
330:22 - function because it is something we have
330:23 - seen before I'm going to copy the input
330:26 - type from our text inputs file paste it
330:28 - in here
330:29 - okay save that to a formats in this
330:31 - function I'm going to de-structure all
330:34 - of the values that we need off of our
330:35 - event so the way we can do that is we
330:37 - can strip the Target off of it and then
330:39 - instead of the target we can destructure
330:41 - the name and the value
330:44 - perfect so now we have the name of the
330:47 - inputs that produce this event and we
330:49 - actually have the value that the user
330:50 - has created by typing into the input now
330:52 - we just need to update our state by
330:53 - saying set text inputs
330:55 - take the previous value of State
330:58 - spread it and then only update the field
331:01 - that produces event and that is going to
331:03 - be at field name and we want to set it
331:06 - to a value all right so now if I come to
331:08 - my react extension here and I inspect
331:12 - this form
331:13 - let's open this up a bit so text inputs
331:16 - we can see that we have this form State
331:18 - here body title there empty if I start
331:20 - typing in here
331:22 - that is changing so down here hey this
331:25 - is a nice post perfect so our state is
331:28 - working for our text inputs and we might
331:30 - as well Define that loading state that
331:33 - we are going to need in just a little
331:34 - bit so we'll say set loading is equal to
331:36 - use State we will initialize it as false
331:40 - come down here pass that to our text
331:43 - inputs component and then we will come
331:46 - into here and use that properly for our
331:49 - button our button is going to have
331:51 - loading state that is going to be equal
331:53 - to that loading crop
331:55 - and then now that we have our text
331:57 - inputs we could say disable this button
331:59 - if there is no title inside of our text
332:03 - inputs and then our on click is going to
332:05 - be handle create post okay so we are
332:09 - completely done with this component so
332:10 - we can close this and now we can start
332:12 - working on the image uploading component
332:13 - which I think is really exciting I love
332:15 - working on image functionality so if we
332:17 - come over to our demo here and we come
332:19 - over to that tab we can see that it's a
332:21 - relatively simple component we just have
332:22 - a box and this button on the inside that
332:24 - says upload and if I click on this it
332:26 - just opens up our file system and I can
332:28 - select an image and it will display a
332:30 - preview of the image and then we can
332:32 - either just go back to the post for the
332:34 - text inputs or we can just remove this
332:36 - image to select a new one same exact
332:38 - flow as Reddit all right so let's start
332:40 - building this out let's come back to our
332:41 - app here this component is going to be a
332:44 - sibling of our text inputs component
332:46 - here so let's come into our directory
332:48 - and create inside of post form a new
332:51 - component called image upload.tsx
332:56 - famous old snippet so we are going to
332:58 - take in some props I will leave the
333:00 - blank for now though let's get the
333:01 - actual structure of this component built
333:03 - out and then we can worry about the
333:04 - props so I'm going to close my directory
333:06 - so as usual we're going to use a flexbox
333:08 - for our outermost container here and we
333:10 - want to Center everything inside of this
333:13 - container so we're going to give it a
333:14 - justify equal to Center and a line equal
333:17 - to Center as well and we're going to
333:19 - make the width 100 so that it takes up
333:22 - the entire width and I'm going to put
333:24 - the text image uploaded here and then
333:26 - let's go back to our new post form and I
333:29 - think I'm getting a react key error here
333:32 - yeah react key and the reason that is is
333:34 - because I am forgetting to pass a unique
333:37 - key to our tab item components here this
333:39 - is just a requirement of react when you
333:41 - do map through an array and return a
333:43 - component we do need to pass each
333:45 - component a unique key and that should
333:47 - make that uh that error go away in the
333:49 - future all right so let's come down here
333:50 - beneath our text inputs and we can use
333:52 - our selected tab State again except this
333:54 - time we want to check if the selected
333:56 - tab is equal to images and video
333:58 - and if it is we want to show our new
334:01 - image upload component
334:04 - just like that so now if we come over
334:06 - here we should see that there let's come
334:08 - back into here and build the rest of
334:10 - this out all right so let's handle the
334:11 - case where there is no image selected
334:14 - yet we are going to bring in an image as
334:16 - a prop and we will do some conditional
334:18 - rendering to display that image if it
334:19 - exists but let's get that upload button
334:21 - working okay so inside of this flexbox
334:23 - we're going to have another flexbox and
334:25 - this is actually where our button is
334:27 - going to go so let's import a button
334:28 - from Chakra
334:30 - and this is going to say upload and on
334:32 - this button container flexbox we're also
334:34 - going to make the justify equal to
334:36 - Center and align Center as well we're
334:39 - going to give us a padding of 20 so that
334:41 - it gives it a nice height of the
334:43 - container there and we're going to give
334:44 - this a border of one pixel dashed it's a
334:49 - dashed order and the Border color is
334:51 - going to be gray 200 and then let's make
334:54 - the width of this container equal to 100
334:57 - so that it spans the entire thing and
334:59 - then we can just add a border radius
335:01 - of four so it's nice and rounded there
335:04 - awesome that looks super clean our
335:06 - button is going to be the outline
335:07 - variant variant is equal to outline and
335:11 - we want to give it a height of 28
335:14 - pixels
335:16 - and we will have an on click on this
335:18 - thing in just a second as well so let's
335:19 - create that here as just an empty
335:21 - function so what needs to happen when
335:23 - the user actually clicks on this button
335:25 - is it does need to open up the file
335:27 - system like I was showing before and it
335:28 - needs to prompt the user to actually
335:30 - select a file so in order to do that we
335:32 - cannot just use a regular button we need
335:34 - to also use an input element and make
335:37 - the type of that input element file and
335:39 - that way it is automatically going to
335:41 - know to open up the file system for the
335:44 - user to select the file so that's going
335:45 - to look like this we're going to have an
335:47 - input
335:49 - and that input is going to be of type
335:51 - file so if I save this we automatically
335:54 - get this button that says choose file
335:56 - and no file chosen so you can see that
335:57 - if I choose a file here and I select
336:00 - this image you can see that it displays
336:02 - the file name here but we don't want to
336:03 - show this input it's kind of ugly and we
336:06 - already have a button that we want to
336:07 - actually do that same functionality and
336:09 - so what we can do is actually hide this
336:11 - input and then have this button click on
336:15 - this input sort of behind the scenes
336:16 - it's kind of cool and the way we can do
336:18 - that is by using the use ref Hook from
336:20 - react okay so let's come to the top of
336:22 - our component and let's create a new
336:24 - variable called selected file ref and
336:26 - this is where we're actually going to
336:27 - bring in the use ref Hook from react so
336:30 - you can store any value inside of the
336:32 - selected file ref however it is
336:33 - typically used to store HTML elements in
336:36 - it so that we can manipulate and
336:37 - interact with these HTML elements in
336:39 - certain use cases it's a kind of lesser
336:41 - used hook I don't use it super often but
336:43 - it does come in handy for situations
336:45 - like this so what we can do is we come
336:47 - down to our input here and we can make
336:49 - the value of these input ref to that
336:52 - selected file graph and this is going to
336:55 - complain and it's going to say that the
336:57 - types do not match up so we can come up
336:59 - here and we can fix that we can make the
337:01 - type of this ref HTML input element
337:03 - because that is the value we're storing
337:05 - in this graph and then we can initialize
337:07 - it as a null and that should make this
337:09 - happy and very conveniently the input
337:12 - element has a property called hidden we
337:14 - can just pass that as a prop and it'll
337:16 - just make it disappear but it's still
337:17 - there it's just not being displayed so
337:19 - the reason that this is going to be
337:20 - helpful in our case is that because we
337:22 - are storing this input inside of a file
337:24 - ref here we can interact with this input
337:27 - using this ref variable and this will
337:29 - make more sense as I actually write out
337:30 - this function here so in this on click
337:33 - what we want to do is implicitly click
337:36 - on that input which will actually open
337:38 - up the file system
337:39 - so the way we can do that is we can pass
337:42 - in this callback here and this callback
337:43 - is going to interact with that selected
337:46 - file ref dot current and Dot current is
337:49 - just the current value of this ref then
337:51 - we want to actually click on that HTML
337:54 - element here and just to rewind a second
337:57 - there we can see all of the available
337:59 - methods on an HTML element and we can
338:02 - interact with it without actually kind
338:04 - of interacting with it so it's pretty
338:06 - cool and they do come in handy sometimes
338:09 - so here we want to use click okay so now
338:12 - when I click on this button the button
338:14 - is going to go click I'm using
338:16 - quotations with my hands right now on
338:18 - this input element which is kind of cool
338:20 - so check this out so if I click on this
338:23 - that opens up the file system and that
338:26 - is super cool we are we are implicitly
338:28 - clicking on this input so now that we
338:30 - actually have an input to accept a file
338:32 - from the user what do we actually do
338:35 - with that file when it has been selected
338:37 - and how do we do something useful with
338:38 - it which in our case is throwing it in
338:40 - state and then displaying a preview of
338:41 - that image on the screen for the user so
338:43 - in the same way that text inputs have an
338:45 - on change function that triggers every
338:47 - single time the user actually types a
338:49 - key file inputs also have a non-change
338:52 - function but this one triggers once a
338:54 - file has been selected and also with
338:56 - text inputs we grab the value that the
338:58 - user has typed using the event that the
339:01 - input generates and in this case it's
339:03 - the exact same thing we can grab the
339:04 - file that the user selects from the
339:07 - event that triggers from the file input
339:09 - and this is where that on select image
339:12 - function is going to come into play this
339:14 - is the function that we're going to pass
339:16 - to this input on change function so
339:20 - we're going to say on change is equal to
339:22 - our on select image we haven't passed
339:24 - this as a prop yet but this is the idea
339:26 - so when the user selects a file that on
339:28 - select image function is going to be
339:30 - triggered and we're going to take that
339:32 - file from the change event and do some
339:34 - processing with it and sort in state so
339:36 - that is the idea so let's just leave
339:38 - this blank for now I'm just going to
339:39 - leave this as a empty function here for
339:41 - now and let's go back to our new post
339:43 - form so inside of this function we are
339:45 - still going to take in an event and this
339:47 - event is still going to have the same
339:49 - type as the text input change event and
339:52 - we're going to say that the thing that
339:54 - generates this event is of type HTML and
339:56 - development same exact thing as the text
339:58 - change all right and let's just take a
340:00 - closer look at this event for a second
340:01 - here so typically what we're used to is
340:04 - grabbing the value off of this event
340:06 - from text inputs but the target as we
340:09 - can see also has a property called files
340:11 - so this is how we're actually going to
340:13 - access the file that the user has
340:14 - selected so I'm just going to remove
340:16 - this for a sec so what we need to do is
340:18 - actually read the data from this file
340:20 - and kind of process it and convert it to
340:22 - a form that is going to be useful to us
340:24 - and the way we're going to do that is
340:26 - we're going to create a variable called
340:28 - reader and this reader is going to be a
340:30 - new file reader and this is a class
340:32 - provided by JavaScript and it is used in
340:35 - cases like this for file uploading and
340:37 - to actually read the data from files so
340:39 - the first thing we're going to do is
340:40 - check that there is an actual valid file
340:43 - that we can read data from and the way
340:45 - we're going to do that is by again
340:46 - accessing the event.target.files but the
340:49 - value of this is actually going to be an
340:51 - array because the input is actually
340:53 - built to accept multiple files in our
340:55 - case we're only uploading one so this is
340:57 - only going to be an array of one element
340:59 - but you could upload many if you would
341:01 - like so what we want to do is grab the
341:03 - value at the first index of this array
341:05 - and we're just going to do some optional
341:06 - chaining here to avoid accessing an
341:08 - undefined array and inside of this if
341:10 - statement is where we're actually going
341:12 - to read the data from that file using
341:14 - our reader so we're going to do is we're
341:16 - going to say reader dot read as data URL
341:20 - and we're going to pass this function
341:22 - the actual file that the user uploaded
341:25 - just like this and we do not need
341:27 - optional chaining here because this if
341:28 - statement already checks that this is a
341:30 - valid value so typescript knows that if
341:32 - we make it inside of this if statement
341:33 - this is a valid value so once the reader
341:36 - has finished processing this file and
341:38 - this method completes we want to take
341:40 - that result and actually sort in state
341:42 - because that is going to be the actual
341:43 - image that we can display on the screen
341:45 - and that we're going to store in our
341:46 - database on our post
341:48 - so the reader has an event listener
341:50 - called on load and this is going to
341:52 - trigger once this read as data method
341:55 - completes and we can create a callback
341:57 - function that is going to be executed
341:59 - when this event happens so this on load
342:01 - event is going to emit what is called a
342:03 - reader event and we can take that meter
342:05 - event and actually extract the result of
342:07 - the loaded file and store it in state so
342:10 - inside of this function we're going to
342:11 - say if reader event dot Target dot
342:15 - result so we're saying is there a valid
342:17 - result if there is let's set our
342:19 - selected file to be that selected result
342:23 - event.target.result
342:26 - and as we can see typescript is not
342:28 - happy here and it is saying that type
342:30 - string or array buffer is not assignable
342:32 - to type string or undefined and the
342:35 - reason this is happening is like I was
342:36 - saying before how the input is built to
342:39 - accept multiple inputs so the result
342:41 - could technically be a single file or an
342:44 - array of files and in our case we are
342:46 - just going to only ever have one so I'm
342:48 - just going to Typecast this three string
342:49 - and that should satisfy typescript and
342:52 - that is it for this function here so
342:54 - what we can do now is pass this function
342:56 - as a prop to our image upload component
342:58 - but first let's go into our image upload
343:00 - component and just kind of Define all of
343:01 - the props that we're going to accept in
343:03 - here so the first prop that we're going
343:04 - to select is going to be the actual
343:06 - selected file and it's going to be of
343:08 - type string as we just saw and we want
343:11 - to make this optional because the user
343:13 - may or may not select the file so it's
343:15 - not always going to be defined so the
343:16 - second prop is going to be that on
343:18 - select image function and we saw that it
343:20 - took in an event of type
343:22 - react.changevent
343:24 - change event and this takes in an
343:27 - argument of type HTML input element and
343:29 - it does not return anything so void the
343:31 - third prop is going to be our set
343:33 - selected tab function and that is
343:35 - because after user uploads an image we
343:37 - show them that back to post button that
343:39 - returns them to the post tab so we need
343:41 - to be able to toggle the tab State in
343:43 - here as well so this takes in a value of
343:45 - type string and does not return anything
343:46 - and as a last prop we are going to
343:49 - accept set selected file and that is so
343:51 - that the user can clear select a file
343:53 - state and select a new one if they
343:55 - choose and this is going to accept a
343:57 - value of type string and we do not
344:00 - return anything so void so that's it for
344:02 - our props so let's actually come down
344:04 - here in the component and destructure
344:06 - those so selected file on select image
344:08 - set selected Tab and set selected file
344:13 - perfect now we actually need to pass
344:15 - these props into our component so let's
344:17 - come over here so our first one is going
344:19 - to be the selected file this is going to
344:21 - be selected file we're going to do on
344:23 - select on select image
344:26 - is going to be equal to on select image
344:31 - third one is going to be set selected
344:32 - tab
344:34 - this is equal to set selected tab last
344:36 - one set selected file
344:40 - perfect just like that and look at how
344:42 - clean this component is it just is
344:44 - satisfying to look at it's so modular
344:46 - okay let's go into our image upload
344:47 - component here and for our on change on
344:50 - that file input let's actually pass it
344:52 - that on select image function let's see
344:55 - what happens to our state here when we
344:57 - actually select a file so new post form
345:01 - so this is our state here we can see
345:03 - that for the file state there is nothing
345:05 - there it is undefined so what happens
345:07 - when I actually select a file
345:12 - okay so there was a little bit of delay
345:14 - there as it was loading the data you can
345:16 - see that it's storing
345:18 - this ginormous
345:21 - piece of data in our file state and so
345:25 - this is what we can actually pass to an
345:27 - HTML image to render that image on the
345:29 - screen so just to show you that very
345:30 - quickly if I create an image component
345:33 - here and I pass in the source
345:36 - and the source is going to be selected
345:37 - file
345:39 - let's see what happens we can actually
345:41 - see that the image is being displayed
345:42 - there so it is actually taking this
345:44 - ginormous thing and and is able to
345:48 - interpret it as that image and now all
345:50 - we have to do is just make some styling
345:51 - improvements to this component and then
345:53 - we will be able to work on that handle
345:56 - create post function so inside of our
345:58 - image upload component we basically just
346:00 - want to check for the existence of the
346:02 - selected file meaning that the user has
346:04 - indeed selected a file and if it exists
346:07 - let's just display that image and if it
346:09 - does not we will want to display this
346:11 - upload button here so it's going to be
346:13 - quite simple all we need to do is just
346:15 - add a ternary operator
346:17 - inside of here and we're going to say if
346:21 - there is a valid selected file let's
346:23 - show we're going to show the image which
346:25 - is going to be in Phoenix right in here
346:26 - otherwise let's just show this thing
346:29 - that we have already created which is
346:30 - going to be this flexbox here just have
346:33 - to adjust this a little bit
346:35 - just like that so now inside of this
346:38 - fragment we're actually going to put
346:40 - that image in here and those buttons
346:42 - that allow the user to clear the image
346:44 - State and then go back to the post tab
346:47 - the first component is going to be an
346:49 - image from Chakra
346:51 - and the source of that image is going to
346:53 - be the selected file itself
346:56 - just like that and I'm going to upload
346:58 - an image here so that we can actually
347:00 - see what we're doing perfect so we have
347:02 - the image selected there and on this
347:04 - image we're going to set a Max width of
347:07 - 400 pixels and a Max height of also 400
347:12 - pixels because we don't want the image
347:14 - to be too too large if the user uploads
347:16 - a super big one and underneath this
347:18 - image here we're going to add a stack
347:20 - component from Chakra and this is where
347:23 - those two buttons are going to go so
347:25 - we're going to make the direction of
347:26 - this row because stack is by default
347:28 - column Direction and the default spacing
347:30 - for a stack is 2 which is going to work
347:32 - here so we don't really need to modify
347:34 - the spacing and our stack is just going
347:36 - to have two buttons inside of it so just
347:38 - like this and our first button is going
347:40 - to say back to post and the second
347:42 - button is going to say
347:45 - remove as in remove that image from
347:48 - state so that they can select a new one
347:50 - all right so let's style these buttons
347:52 - so the height of this first button is
347:54 - going to be 28 pixels and on click we
347:59 - want to call
348:01 - that set selected
348:04 - tab function that we passed in as a prop
348:06 - and we want to pass this the post title
348:09 - so that it actually takes us back to the
348:10 - post tab so if I click on this now it
348:12 - will take us back here perfect and let's
348:14 - just make sure that we have a
348:16 - directional column on this outermost
348:17 - Flex container
348:19 - there we go and on our stack here we're
348:22 - going to add some margin top and this is
348:25 - going to be 4 so that it kind of adds
348:27 - some space between the image and the
348:28 - buttons the second button is going to be
348:30 - our outline variant
348:33 - also going to have a height of 28 pixels
348:36 - and then on click for this one all we
348:39 - need to do is empty out that selected
348:42 - file state so we can say set selected
348:45 - I don't know why I'm not getting
348:46 - autocomplete set selected file to be an
348:50 - empty string just like that
348:52 - okay awesome this looks great so now if
348:54 - I click remove
348:56 - the file is removed from State and the
348:58 - user can select a different one and then
349:01 - once they select an image and they like
349:03 - it they can go back to the post and this
349:05 - back to post button is kind of
349:06 - unnecessary because they can just you
349:08 - know technically go back to here but uh
349:10 - just for improved user experience I
349:12 - think that's why Reddit put it here to
349:13 - make it more intuitive like oh okay I'm
349:14 - gonna go back to the post because that
349:16 - is actually where I can post this post
349:18 - awesome so we are completely done with
349:21 - this image uploading component we can
349:22 - close it and start to work on the actual
349:25 - Logic for creating this post and sending
349:27 - it to the database because we can take
349:28 - in text inputs we can take in an image
349:31 - we are ready to actually store these
349:33 - things in the database all right you
349:35 - guys let's start writing out this handle
349:37 - create post function so let's talk about
349:40 - the series of steps that is going to
349:41 - happen inside of this function so the
349:44 - first thing that is going to happen is
349:45 - that we're going to construct our new
349:48 - post object
349:51 - and we're going to make this of type
349:53 - post and we have not created this type
349:56 - yet but we will do that in just a few
349:57 - minutes the second thing that we're
349:59 - going to do is actually store the post
350:01 - in our database in our posts collection
350:04 - the third thing that we're going to do
350:05 - is check and see if the user has decided
350:08 - to include an image with their post
350:10 - which will mean that there will be a
350:12 - truthy value for this selected file and
350:14 - so what we'll do if they have selected a
350:16 - file is actually take this image and go
350:18 - and store it in our Firebase storage
350:20 - which is actually separate from our
350:22 - database storage and database are two
350:23 - separate things and if you recall from
350:25 - our client app file we did Define this
350:28 - storage instance here but we have not
350:30 - yet used it so this is going to be the
350:32 - first look at that we're going to
350:33 - actually see how to store media content
350:35 - okay so if there is a file we will go
350:37 - and store in storage and this is going
350:39 - to be done using some Firebase functions
350:41 - and one of those functions is going to
350:43 - be this get download URL function so
350:45 - this function is actually going to
350:46 - conveniently return a URL to that image
350:50 - and that is the thing that we want to
350:52 - store on our post document in our
350:54 - database and you might be wondering well
350:55 - didn't we already store the post in the
350:57 - database why did we do this image
351:00 - uploading after creating the post if we
351:03 - need this image URL on our post and that
351:06 - is a very good question the reason is is
351:08 - that we want to ensure that a post has
351:10 - successfully been created and stored in
351:12 - our database before actually uploading
351:14 - that Associated image into our storage
351:16 - because if we did it in the reverse
351:18 - order and we uploaded the image first
351:20 - there is a chance that there could be
351:22 - some sort of error in actually creating
351:24 - the post itself and if that does happen
351:26 - we just now have this kind of random
351:28 - image in our storage with no post that
351:30 - it belongs to so this is why we kind of
351:32 - create the post first once it has been
351:34 - successfully created then update it with
351:37 - this image URL so the third step then
351:39 - would be to update the postdoc by adding
351:42 - the image URL and the very very last
351:44 - thing I'm going to do is just simply
351:46 - redirect the user back to the
351:49 - Community page
351:51 - I'm back on the Community page there is
351:54 - going to be a component called posts
351:56 - which we are going to create very
351:57 - shortly and that component is going to
351:59 - be responsible for actually going to the
352:01 - database getting all of the posts in the
352:03 - current community and then actually
352:04 - storing them in state and then actually
352:06 - rendering them and so that is how we're
352:08 - going to see our newly created post
352:10 - let's tackle step one of this function
352:12 - and that is actually creating our new
352:14 - post object that we are going to store
352:16 - in our database and as I mentioned in
352:19 - this comment this is going to be of type
352:20 - post but we do not have that yet so we
352:23 - do need to Define it and while we are
352:25 - doing that we are also going to create
352:26 - our post atom for our recoil State
352:29 - because we're going to need it across
352:31 - multiple pages so let's go into our
352:33 - atoms folder and inside of here I'm
352:35 - going to create a new file called post
352:37 - atom.ts
352:39 - so let's go ahead and import Adam from
352:42 - recoil
352:43 - and here we're going to Define our type
352:45 - for our post and what I'm going to do is
352:48 - actually open up our demo here so we can
352:49 - actually see all of the data that is
352:51 - displayed on the post and that is going
352:53 - to help us create the type for this post
352:55 - okay so the most important thing is it's
352:57 - going to have an ID of type string it is
352:59 - going to also have a community ID so
353:01 - that we know what community it belongs
353:02 - to also type string we're going to store
353:05 - the Creator ID so the user who actually
353:07 - created this post and we are also going
353:09 - to store the creators display name
353:13 - is going to have a title of type string
353:16 - it's going to have a body a type string
353:19 - lots of strings and we're also going to
353:21 - sort the number of comments that this
353:24 - post has because we can see that down
353:26 - here we are displaying that data here so
353:28 - we do need to include it on our post and
353:30 - that is going to be a number we are
353:32 - going to store the vote status so the
353:34 - number of uploads are down both this
353:36 - thing has and that is going to be a
353:37 - number it is going to have a optional
353:39 - image URL because they are not mandatory
353:42 - for creating posts and lastly we're
353:44 - going to add the created add timestamp
353:47 - and this is going to be up type
353:48 - timestamp from Firebase so make sure
353:50 - that import that top there okay and
353:51 - actually one last thing I forgot up here
353:53 - is the community image URL and this is
353:56 - going to be optional as well because we
353:58 - have not yet built this in and we're
353:59 - including this because you can see on
354:01 - each post that we do have that little
354:03 - image for the community that that post
354:06 - is a part of so that should be it for
354:09 - our post type now let's create a
354:11 - typescript interface to actually model
354:12 - what our actual what post date is going
354:15 - to look like so the first parameter in
354:16 - here is going to be selected post and
354:19 - this is going to be used when we
354:20 - actually do single page view of posts so
354:22 - when a user clicks on a post it's going
354:24 - to store that post in its selected post
354:26 - the second parameter is going to be all
354:28 - of the posts that are part of our
354:30 - community so when we go to Community
354:31 - page we are going to store all of those
354:33 - posts in this stage here and it's also
354:35 - going to start the posts that appear on
354:37 - our home page we're going to come back
354:38 - here and add a parameter called post
354:40 - votes and we're going to add this in
354:42 - when we build in the voting
354:43 - functionality and as usual we need our
354:45 - default State value so I'm going to call
354:47 - this default Post State and this is
354:50 - going to be up type post date
354:52 - and we're going to initialize
354:55 - selected post to the null
354:58 - and posts are going to be an empty array
355:01 - and now all we have to do is create the
355:03 - actual post date recoil atom so post
355:05 - date is equal to atom inside of here
355:08 - we're going to give this a key of Post
355:11 - State and our default value is going to
355:13 - be default host date and then we can
355:16 - pass in the type of the state by passing
355:19 - that in here
355:20 - so this atom is of type post date okay
355:23 - perfect this is all we need for now
355:24 - we're going to come back in a bit and
355:25 - add this voting functionality but for
355:28 - now we have everything that we need so
355:29 - now we can actually import this type
355:31 - from that file if it's going to pick it
355:34 - up there we go
355:35 - since our posts are going to contain
355:37 - actual user data we do need access to
355:40 - the currently login user so what I'm
355:42 - going to do is actually come back to our
355:44 - submit page and grab the user in here
355:46 - and pass it as a prop to run your post
355:48 - form and the reason I'm doing it up here
355:50 - is because we're going to use it in here
355:51 - for some other reasons as well so we're
355:53 - going to say cons user is equal to use
355:55 - auth State pass it our auth object and
355:58 - then in our new post form we are going
356:00 - to pass that as a prop
356:02 - user is equal to a user awesome then
356:06 - inside of new post form we can declare
356:08 - that prop up here
356:09 - so we can say user and it's going to be
356:11 - of type user from Firebase auth and if
356:13 - you remember we also need to include the
356:15 - type of null because it is initialized
356:17 - as null as well as undefined so we can
356:19 - make this optional and this should
356:21 - satisfy typescript over here and we also
356:23 - saw that our post needs the community ID
356:26 - that is being created in so we're going
356:28 - to need to grab that somehow as well and
356:30 - we're going to get that from the router
356:32 - using the use router hook like we saw
356:34 - already so let's come up to the top here
356:36 - and grab the router so Contour router is
356:39 - equal to use router from next router and
356:42 - now inside of our handle create post
356:44 - function we can destructure the
356:46 - router.query object and grab that
356:48 - Community ID from it and let's just
356:51 - accept our user as a prop here and now
356:54 - we actually have all of the data
356:55 - necessary to actually create a valid
356:58 - post and tie it to all the proper
357:01 - entities like the user and the community
357:02 - all right let's actually populate this
357:04 - new post object now so we're going to
357:06 - store our community ID in there that we
357:08 - just grabbed off the router our creator
357:10 - ID is going to be our user.uid our
357:14 - creator display name is going to be the
357:16 - same thing we did in our drop down menu
357:18 - over here when we did that splitting of
357:20 - the email to kind of grab this display
357:23 - name type thing so that's going to be
357:25 - user dot email dot split
357:29 - we want to split at the at sign in the
357:32 - email and then grab the first index of
357:35 - that split array the typescript compiler
357:37 - is not happy here and this is basically
357:39 - having to do with the way we declared
357:42 - our user type up here so I'm just going
357:44 - to change the type of this a bit to make
357:46 - our lives a bit easier with typescript
357:48 - so what I'm going to do is always
357:50 - declare this user as type user and we're
357:53 - going to be able to safely do this
357:55 - because we're going to come back to our
357:56 - submit file and wrap this in a condition
357:59 - and not even show this component until
358:03 - there is a truthy valid user from this
358:05 - hook so that is how we're actually
358:07 - safely able to pass this user as a valid
358:10 - user we are still getting some here
358:12 - though so we can remove this optional
358:14 - chaining and then since we do know that
358:16 - there is going to be a valid user
358:19 - because we are not even showing this
358:21 - component unless there is I'm just going
358:23 - to add the bang operator here and this
358:25 - bang operator in typescript is our way
358:28 - of telling the typescript compiler that
358:30 - we know for sure that this is going to
358:32 - be a valid value so it is safe to
358:34 - proceed and then this error up here has
358:36 - to do with the router being a string or
358:39 - an array of strings or undefined but
358:40 - since in our case we are only going to
358:42 - have a single non-array string and we
358:44 - are going to assume it is not undefined
358:46 - I'm going to change the value of this
358:48 - and just Typecast the community ID from
358:50 - the router to be up type string to
358:52 - satisfy the typescript compiler this is
358:54 - actually better I prefer to have this
358:55 - always as a user and then just kind of
358:57 - protect against even showing that
358:59 - component uh without even having a valid
359:02 - user so I think that's just a bit more
359:04 - safe sorry that was a bit of a
359:05 - typescript tangent that we had to go on
359:07 - there but it was a grid lesson now the
359:09 - next part of our post is going to be our
359:11 - title and this is going to be from text
359:13 - inputs dot title our body is going to be
359:17 - text inputs.body and we can initialize
359:20 - the number of comments to be zero
359:22 - because all new posts have zero comments
359:25 - and the vote status is also going to be
359:27 - zero all we're missing is our created at
359:29 - timestamp and to do that we can call
359:31 - that server timestamp function from
359:33 - firestore and this is basically
359:35 - complaining because as the server
359:37 - timestamp function is only available on
359:39 - the actual firestore servers we don't
359:41 - really have access to it on the client
359:42 - so that is why typescript is kind of
359:44 - freaking out here and we could
359:46 - technically create our own custom type
359:48 - to match what is created on the
359:50 - firestore server and put all these
359:52 - fields on it but we can also just as a
359:54 - simpler solution just Typecast this to a
359:56 - timestamp from firestore so do make sure
359:58 - that Imports up top here
360:00 - all right let's actually move to step
360:02 - two of this function which is going to
360:04 - be actually storing this in our database
360:06 - and this is where we're actually going
360:07 - to start writing some asynchronous code
360:09 - so I'm going to create a try catch block
360:10 - to help us with our error handling so if
360:12 - an error occurs we were going to log
360:14 - candle create post error log the error
360:21 - and then make this of type any
360:24 - and actually I just want to see the
360:25 - message of this error
360:27 - okay so inside of our try block we're
360:29 - going to create the reference to our
360:31 - newly created post document so it's
360:33 - going to be called post doc ref and this
360:35 - is going to be the result of our add doc
360:38 - function from firestore and we need to
360:40 - tell it what collection we want to write
360:42 - our new document to so we can pass in
360:44 - the collection function this is going to
360:45 - take in our firestore object from our
360:47 - client app file and the name of the
360:49 - collection that we want to write to is
360:51 - posts now as a second argument we can
360:54 - just pass in the data that we want to
360:56 - write into this document which is going
360:58 - to be new post okay now let's get into
361:00 - this image processing stuff so let's
361:02 - bring this up here so we have some good
361:04 - comments so let's check if there is a
361:07 - selected file so we can say if there is
361:08 - a selected file we want to create an
361:10 - image ref which is going to be a
361:12 - reference to the image in our Firebase
361:14 - storage so we can use this function
361:15 - called ref from Firebase and this is the
361:18 - function that's actually going to
361:19 - connect to our storage instance so we
361:21 - can pass it our storage from client up
361:23 - and the path at which we want to store
361:26 - this image is going to be post slash
361:31 - postdoc ref dot ID and this is actually
361:35 - how we're tying this image to this
361:37 - specific post we're actually putting the
361:39 - ID into the storage path and then slash
361:42 - image
361:43 - image source and kind of this posts
361:45 - image but this is just a reference we
361:47 - actually need to upload this image and
361:49 - the way we're going to do that is by
361:50 - using the upload string function from
361:53 - Firebase storage we're going to pass it
361:55 - our image ref and we're going to pass it
361:58 - the actual thing we are uploading which
361:59 - is our selected file and so we're
362:01 - uploading our selected file inside of
362:03 - our image ref and as a third argument we
362:05 - need to pass the format of this file and
362:07 - our reader returned a formatting type of
362:10 - data URL because we said read as data
362:12 - URL so that is what the format is for
362:14 - that and then once that is finished
362:16 - uploading we need to actually get that
362:18 - download URL which is going to be the
362:20 - actual URL that we can use to view this
362:22 - image which is kind of what I was
362:24 - referring to up here so let's move these
362:26 - comments down so check first selected
362:27 - file store in storage and then we want
362:30 - to get the download URL and then update
362:33 - our post so we can create a new variable
362:35 - called download URL and this is going to
362:38 - call that function
362:40 - get download URL which is from Firebase
362:42 - storage and the thing we want to get the
362:44 - download URL for is our image ref
362:48 - now that we actually have a valid image
362:50 - URL let's update our post document so we
362:53 - can say await update doc pass in the
362:57 - document ref that we want to update and
362:59 - the update that we want to make is to
363:01 - the field image URL and that value is
363:04 - going to be download URL
363:07 - awesome now let's just add our loading
363:10 - State up here so set loading true and
363:12 - then at the bottom of the try catch we
363:14 - can set loading to be false and now what
363:16 - we need to do is just redirect the user
363:18 - back to where they came from which is
363:20 - the community home page so you can call
363:21 - this function router dot back and that
363:25 - handles that for us I'm just going to
363:26 - comment this out for now though so we
363:27 - can actually kind of analyze the post
363:28 - creation a bit more while staying on
363:31 - this page all right I think we are done
363:33 - writing out this function let's actually
363:35 - give it a spin and see if we can create
363:37 - a post and store this image in our
363:40 - storage all right before we do that we
363:42 - do need to go in to our firestore
363:44 - project here in our console and go into
363:46 - storage and just change the permissions
363:49 - a bit because if you go into the rules
363:50 - by default the storage is completely
363:53 - locked it's saying allowed read write if
363:56 - false and false is always false so it is
363:58 - never going to allow you to do this so
364:00 - I'm just going to change this to True
364:01 - which is going to allow us to always do
364:03 - it in all circumstances which is fine
364:05 - for development we are going to come
364:06 - back and write some rules in a little
364:09 - bit so let's go see if we can actually
364:11 - upload these things we should see a new
364:13 - folder in here and we also should see a
364:16 - new collection here called post so let's
364:18 - come to our form let's create first post
364:22 - here is the first post
364:26 - the exclamation points and let's upload
364:28 - an image as well and this image is going
364:30 - to be our classic demo image and then
364:33 - back to the post and let's give it a go
364:38 - oh what they doing what they're doing
364:40 - okay so it was loading for a while and
364:43 - we did not see an error here so let's go
364:45 - see what happens okay our database let's
364:48 - refresh this
364:51 - we can see that yes there is a post
364:52 - collection very nice new post document
364:55 - in here awesome and look at this the
364:58 - image URL is probably the most exciting
365:00 - thing of all this
365:01 - um but yeah all that data was stored in
365:03 - there so this image URL is actually the
365:05 - thing we can literally type into our
365:07 - browser and in a new tab and like it
365:10 - will take us to this image that is so
365:12 - cool and that is how we're actually
365:13 - going to display our images on our posts
365:15 - in our communities very cool and we can
365:17 - go see the actual image
365:20 - inside of our storage here if you come
365:22 - to storage
365:23 - we can see that there has been a new
365:25 - folder created called posts because that
365:27 - is what we gave as our first path
365:29 - segment here inside a post we're going
365:31 - to see a folder for that specific post
365:34 - and then we have stored a file called
365:36 - image in here and if we click on this we
365:38 - can see that it gives us a little
365:39 - preview and very nice this is so cool
365:42 - this makes posts so much more exciting
365:44 - because images are just fun and they
365:46 - make it look really cool and just for
365:48 - good measure let's try creating a post
365:50 - without an image so we would redirect
365:53 - after a successful post so we would be
365:55 - already back on the Community page right
365:56 - now so the post form would be clear but
365:59 - since we kind of commented out the
366:00 - router here we just have to kind of
366:02 - manually clear the form I'm just going
366:04 - to create a new title called
366:07 - second post and here is the second post
366:11 - and we do not have an image so let's
366:13 - give this a go
366:14 - much faster this time because there's no
366:16 - image uploading come to our firestore
366:18 - database posts
366:20 - you can see that there has been another
366:22 - post created but this time there is no
366:24 - image URL which is good so it can handle
366:25 - both cases just like Reddit awesome so
366:28 - now we can actually create posts which
366:30 - is another ginormous piece of
366:32 - functionality solved and now all we have
366:35 - to do is go back to the Community page
366:37 - call the database get those posts and
366:39 - then actually view them on the screen in
366:41 - the feed okay guys one last thing I
366:43 - actually do want to add here as well is
366:44 - just a quick error component and it's
366:47 - going to make our app just a little bit
366:49 - more robust so underneath our loading
366:51 - State here I'm just going to create the
366:52 - error State and it's just going to be a
366:54 - Boolean so we're going to say use State
366:56 - false and we're just going to use a
366:58 - Boolean here because we can just put the
367:00 - string in ourselves in the error message
367:01 - so inside of our catch block
367:04 - in the handle create post function we
367:06 - just need to set error to be true if an
367:08 - error does occur and we're going to come
367:10 - to the very bottom of our component here
367:12 - between these two outermost Flex boxes
367:14 - and we're going to check if there is an
367:16 - error and if there is an error we are
367:17 - going to display some component and that
367:19 - component is going to be an alert
367:21 - component from Chakra UI so chakra makes
367:24 - it super easy to place these really nice
367:27 - looking alerts here so it's going to
367:28 - come to the alert docs and grab this one
367:31 - here then we can just paste it in here
367:34 - like this add all of the missing Imports
367:37 - okay and we can save this and see what
367:39 - this looks like
367:40 - and we will just make this true so we
367:42 - can see it okay so that looks kind of
367:45 - not good so we're just going to get rid
367:46 - of this close button we don't really
367:48 - need that we don't really need this
367:49 - description and I'm going to make this
367:51 - regular text from Chakra and this is
367:54 - going to just say error
367:57 - creating post
367:59 - perfect so that looks pretty good and
368:01 - that is all we have to do so let's
368:03 - change this back to error and yeah now
368:05 - we are covered for errors for creating a
368:07 - post so now we are going to go back to
368:10 - the Community page so let's go to that
368:12 - index Community ID page and we're going
368:14 - to create our second left hand side
368:16 - component which is going to be the
368:18 - actual post component and that is the
368:20 - component we're ever going to actually
368:21 - go and grab all of the posts from the
368:23 - database and then display them on our
368:26 - feed for that community and then once we
368:28 - can actually view posts in the
368:29 - communities we will then work on this
368:31 - drop-in menu here so that we can
368:32 - actually more easily navigate through
368:34 - communities because right now we kind of
368:35 - have to go into the URL manually and go
368:38 - to one that exists so let's create the
368:41 - actual file for that component and
368:42 - that's going to go inside of our post
368:43 - folder here so inside our post I'm going
368:46 - to create the component posts.tsx
368:51 - so this is sort of the root of the post
368:53 - folder then we're going to use our
368:55 - snippet this component is going to take
368:56 - in a few props and the first one is
368:59 - going to be the actual Community data
369:00 - from its parent which is the index page
369:03 - of the community and this is going to be
369:04 - up type community so let's import this
369:06 - from our communities atom and then we're
369:08 - also going to take in the user ID and
369:11 - this is going to need to be optional
369:13 - because this is not always going to be
369:14 - defined because the user does not
369:16 - necessarily have to be authenticated to
369:18 - view the posts
369:21 - okay let's change this text to posts and
369:25 - then come back to our index page here
369:26 - and actually bring this in from that
369:29 - file just like that and then we can pass
369:31 - in our community data as a prop just
369:34 - like this
369:36 - perfect so now we actually have our post
369:38 - there okay and you know what actually
369:40 - I'm going to actually not take in this
369:43 - user ID as a prop and I'm probably going
369:44 - to call the use auth State hook here but
369:47 - we will worry about that in a bit so
369:49 - basically uh what's going to happen here
369:51 - is once this component renders we need
369:53 - to go actually fetch the post from the
369:55 - database store those posts in state and
369:58 - then map through them and then display
370:00 - each one and we're going to create a
370:01 - separate component for each individual
370:03 - post it's going to be called a post item
370:05 - but for now we can write sort of the
370:07 - governing logic of this component so the
370:09 - main function in here is going to be
370:11 - called get posts and it's going to be
370:13 - asynchronous because it's going to be
370:14 - asynchronously talking to our database
370:16 - and then we're just going to have a user
370:18 - effect in here as we're going to run as
370:20 - soon as this component actually mounts
370:21 - and this is where we're actually going
370:23 - to go and fetch those posts so right
370:25 - inside of this as soon as the component
370:27 - mounts we just want to call get post and
370:30 - we are going to create a custom hook for
370:33 - our post as well because we are going to
370:35 - be sharing a lot of post logic between
370:38 - pages and components like voting on
370:39 - posts and deleting posts Etc and
370:42 - actually just sharing Post State so we
370:44 - are going to create a hook called use
370:45 - posts let's get our posts first and then
370:48 - we will worry about starting the mistake
370:49 - and this custom Hub stuff that I'm
370:51 - talking about all right so inside of our
370:53 - get post function we do want to create a
370:54 - try catch block to make error handling
370:57 - much smoother and then up top here we're
370:59 - going to create some extra States you're
371:01 - going to have our loading State as usual
371:03 - set loading is equal to use State and
371:06 - this is going to be equal to false
371:08 - initially so in our error block let's
371:10 - just create a log of a get post error
371:13 - and you will log the error Dot message
371:17 - and let's make this type any and what we
371:20 - want to do in here is literally just get
371:22 - posts for this community that is it and
371:24 - this is going to be our first look at an
371:26 - actual like database query with Firebase
371:28 - if you go take a look at our post
371:30 - collection here I know there's only two
371:31 - of them and they both have the same
371:33 - Community ID so perhaps not the best
371:36 - example here but picture a hundred Post
371:38 - in here all from different communities
371:40 - the only one to get the post documents
371:42 - that have a community ID that matches
371:44 - the community that we're currently in by
371:46 - the way we can grab that from our
371:48 - destruction props here and we're going
371:50 - to use the query function from firestore
371:52 - to do this so let's come inside of our
371:54 - try block here and let's create a new
371:56 - variable here called post query and
371:58 - we're going to bring in our query
372:00 - function from firestore the first and
372:02 - only mandatory argument of this function
372:05 - is going to be a collection that we
372:06 - actually want to query so let's create
372:08 - our collection reference using that
372:10 - collection firestore function and as
372:12 - usual we need to pass this our firestore
372:14 - object from Client app and the
372:17 - collection saying that we are querying
372:18 - is posts so you can see that is happy
372:20 - with just that it will just go get
372:22 - literally everything in this collection
372:24 - but we don't want everything in this
372:25 - collection so we need to pass in some
372:27 - query specifications here and the first
372:29 - one is going to be a where Clause so we
372:31 - need to import where from firestore and
372:33 - we want all of the posts where Community
372:35 - ID is equal to the community data's ID
372:37 - so the parameter that we're actually
372:39 - interested in is going to be Community
372:41 - ID
372:42 - so the second argument is going to be
372:44 - our operation clause and in our case we
372:47 - want to check if the community ID is
372:49 - equal to some value but there's all
372:51 - sorts of operations you can do in here
372:53 - but we want to use the equals we want to
372:55 - graph all of the documents in post where
372:57 - Community ID is equal to community data
373:00 - dot ID that is the exact set of
373:04 - documents that we want and we also want
373:06 - to just order these documents by a
373:08 - certain field as well and that field is
373:09 - going to be our created at field and the
373:12 - order that we want them in is a
373:13 - descending so that they are reverse
373:15 - chronological okay so now that we
373:16 - actually have a valid query built we can
373:18 - pass that query to our get docs function
373:21 - to get all those documents so we can say
373:24 - postdocs is equal to await get docs and
373:27 - all we need to pass this is our post
373:28 - query
373:30 - okay now we want to actually extract all
373:33 - of the data from each of those postdocs
373:35 - and store them in a JavaScript object
373:37 - that we can actually store in our recoil
373:39 - State we did something very similar with
373:40 - our Snippets so it's going to look very
373:42 - much the same so we're going to say
373:43 - posts is equal to post docs dot docs
373:47 - which is an array of all of the actual
373:48 - firestore document objects we want to
373:51 - map through all of these and extract the
373:54 - data and return an actual JavaScript
373:56 - object with each one's ID so we can say
373:59 - doc.id and then spread all of the data
374:02 - inside of that document and this is what
374:04 - we're going to actually store in our
374:07 - post State here so let's log what this
374:10 - looks like so we can see if we are
374:11 - getting some data
374:15 - posts okay so our use effect is working
374:18 - the component is rendering so we should
374:20 - be seeing this data in our console and
374:22 - we are getting an error nice okay so
374:26 - this is where we are going to actually
374:27 - create our first database index if you
374:30 - remember when I sort of did the intro on
374:32 - the cloud firestore I briefly said that
374:35 - indexes are a way for firestore to
374:37 - actually efficiently query your data in
374:39 - order to perform queries we actually do
374:41 - need and index on that document but it's
374:44 - extremely easy and firestore handles all
374:47 - of the heavy lifting all we have to do
374:49 - is literally click on this link
374:51 - and all you have to do is literally
374:53 - click create index
374:56 - and it's going to have a status of
374:57 - building for a few minutes it takes a
374:59 - few minutes for it to Cloud fire starts
375:00 - to actually do this indexing so give
375:03 - this a minute and when it is done we
375:04 - will come back all right you guys we are
375:07 - now back and this index has a status of
375:09 - enabled so we should be able to safely
375:11 - make queries okay so let's refresh this
375:13 - Community page and see if we can now
375:16 - successfully see these posts in the
375:17 - console
375:18 - okay yeah you can see them here let's
375:21 - take a look at them so we are getting
375:22 - the data on the front end here which is
375:24 - super cool and so these represent all of
375:26 - the posts inside of this current
375:28 - Community Chinese group and now we
375:30 - actually have this data on the front end
375:31 - so we can store this in our post date
375:33 - which is going to lead into US creating
375:35 - this new use post hug that I mentioned
375:37 - which is going to manage our post date
375:39 - for us so inside of our hooks directory
375:42 - here let's come create another one
375:43 - called use posts dot TSX I love custom
375:48 - hooks like when I was first learning
375:50 - react I kind of didn't really understand
375:51 - the point of them
375:53 - um
375:54 - and I was like I just didn't feel like I
375:56 - had enough knowledge to actually build
375:58 - custom hooks I just didn't understand
375:59 - them enough but now I'm actually really
376:01 - really seeing the um the benefit of them
376:03 - just to kind of extract repeated logic
376:05 - that's why I want to give you guys
376:06 - experience building something with this
376:08 - project so you can learn how to actually
376:10 - know when to use a custom mug okay So
376:13 - eventually in this hook we're going to
376:14 - have about six or seven State variables
376:16 - the only one we need right now is our
376:18 - post date Atom from recoil so we can
376:21 - bring that in using our reuse recoil
376:23 - State hook we can say Post State value
376:26 - and set post date value
376:29 - is equal to use recoil state
376:33 - and we want to pass in our post State
376:36 - Atom from atoms slash post atom I'm
376:39 - going to close my directory actually so
376:40 - as far room and if you recall in custom
376:42 - hooks we do not want to return HTML we
376:45 - want to return some data and functions
376:47 - so we're going to wrap all of that stuff
376:48 - in an object and what's going to go in
376:50 - there for now is going to be that post
376:52 - State value as well as our set postate
376:54 - value and while we're in here I'm going
376:56 - to create the actual function
376:57 - declarations for the ones that are going
376:59 - to be coming so that you can kind of
377:00 - maybe understand why we're creating this
377:02 - hook in the first place so the first
377:03 - function that's going to be in here is
377:04 - going to be the onboard function
377:08 - that's going to be used when we actually
377:10 - vote on post another one is going to be
377:11 - on select posts when we actually click
377:14 - on a post and go into single page view
377:16 - and then another one is going to be cons
377:19 - on delete post
377:21 - this is going to be asynchronous
377:24 - okay and the entire reason we created
377:26 - this custom Hook is because we are going
377:28 - to need this data and this functionality
377:30 - across multiple pages and components so
377:32 - hopefully that provides some
377:33 - clarification if you were confused let's
377:35 - come back to our post component and we
377:37 - can bring in that data now from our use
377:39 - post Hook by calling it just like this
377:41 - and the data we want to bring in for
377:43 - this component right now is our post
377:45 - State value as well as set to post a
377:47 - value
377:48 - just like this so let's store these
377:51 - posts in our recoil State and we can do
377:53 - that with our set Post State value
377:54 - function and we can take the previous
377:56 - value of post date
377:59 - and spread it because we only want to
378:01 - update a single field and that field is
378:03 - going to be posts and our updated value
378:05 - post is going to be the above posts and
378:08 - we're going to Typecast them to an array
378:10 - of posts and we can import this type
378:12 - from our atom file just like this
378:16 - so now we're actually going to have
378:17 - access to our posts via this post date
378:19 - value all right you guys now that our
378:21 - posts are inside of our recoil atom we
378:24 - can now create our post item component
378:27 - and actually start displaying these
378:28 - posts on the UI so inside of our post
378:31 - folder I'm going to create another
378:33 - component called post
378:35 - item.tsx and use our snippet all right
378:39 - you guys I'm going to start by declaring
378:40 - all of the props that are going to take
378:42 - in to this component because I think it
378:44 - will help make the building out of the
378:46 - HTML a lot more clear and intuitive all
378:48 - right so the very first prop and the
378:50 - most important prop that this thing is
378:51 - going to accept is going to be the post
378:54 - itself so let's bring that in and make
378:56 - sure you import the type from our post
378:58 - atom file the second prop I'm going to
379:00 - take in is going to be called a user is
379:02 - Creator and this is going to be a
379:03 - Boolean which represents if the
379:06 - currently signed in user actually
379:07 - created this post and is the owner
379:09 - because if they are we're going to allow
379:11 - them to do certain things like delete it
379:12 - the next problem we're going to take in
379:14 - is going to be the current user's vote
379:16 - value on this post have they voted on
379:19 - this post and if they have was it an
379:22 - upvote or a downvote and we're making
379:24 - this optional here because it's only
379:25 - going to exist if this particular user
379:28 - has actually voted on this particular
379:29 - post and we are also going to take in
379:31 - the functions from our use postage hook
379:34 - because our parent which is post is
379:36 - going to grab those functions from the
379:37 - hook and then pass them to this
379:39 - component and I'm going to just declare
379:40 - their types as empty callback functions
379:43 - for now you're going to come back to
379:44 - these and specify the type definitions
379:46 - once we actually are passing them in but
379:48 - for right now we are not so I'm just
379:50 - going to declare them as empty
379:53 - so we have our on delete post and we're
379:55 - just going to have our on select post
379:59 - just like this okay you can come down
380:02 - here to our component and actually
380:03 - destructure our props to grab them
380:06 - use their vote value on vote on delete
380:09 - post and then on select post awesome I'm
380:13 - just going to close my directory so we
380:15 - have some more room there now what I'm
380:16 - going to do is paste in all of the icon
380:18 - imports from react icons for this
380:20 - component because there there's quite a
380:21 - few and this is going to be the icons
380:23 - that we are seeing for like the voting
380:24 - the uploading the downloading and all of
380:26 - these like messaging and sharing and
380:27 - saving icons there are quite a few icons
380:30 - in this component so I'm just going to
380:31 - import those from my repo I will put a
380:34 - link to the uh this component in the
380:37 - description so you can directly access
380:38 - it but uh these are them here lines
380:40 - three to thirteen okay with all of our
380:42 - props passed let's come down here and
380:44 - actually start building out the UI for
380:47 - this component here so the outermost
380:48 - container of our post is going to be a
380:51 - flexbox from Chakra and this is going to
380:53 - have a border of one pixel solid and a
380:58 - background of white and just so we can
381:00 - see actually what we're doing here as
381:01 - we're creating it I'm going to render
381:03 - the post dot title text here and then
381:06 - come back to to our post parent here and
381:08 - inside this div I'm going to just remove
381:10 - this actually and create a fragment and
381:13 - then inside of this fragment I'm going
381:15 - to map through all of the posts and
381:18 - return for each one a post item let's do
381:21 - postatevalue dot post dot map and then
381:25 - we want to take each post item inside of
381:27 - that array and create a post item
381:30 - component for each one
381:33 - and this is complaining because we are
381:34 - not passing at the required props so
381:36 - let's pass in all of the required props
381:38 - and we will need to bring in those on
381:39 - vote and on delete functions from our
381:41 - use post hook and I believe I did not
381:43 - actually put that inside of the return
381:45 - object here so inside of here I'm just
381:46 - going to add on vote on select post and
381:49 - on delete post so that we can actually
381:51 - access them from our hook so let's go
381:54 - back to posts
381:55 - and inside of here let's grab on vote on
381:59 - delete post and on select post awesome
382:02 - now down here we have everything we need
382:04 - to satisfy typescript here so post is
382:06 - going to be equal to the current item we
382:08 - are iterating through the next one for
382:10 - user is Creator we need to check does
382:12 - the current user's ID match the Creator
382:16 - ID on the post item so we're going to
382:18 - need to actually bring in our user here
382:20 - and if you remember I kind of mentioned
382:21 - that before with this use offset hook so
382:23 - we're going to bring them in
382:26 - cons user is equal to use off State auth
382:30 - now we can check okay well does this
382:33 - user's uid equal to this post items
382:37 - Creator ID
382:40 - and so this is going to be a Boolean
382:41 - again that represents whether or not the
382:43 - currently login user is the owner of
382:45 - this post user vote value is going to
382:48 - tie in to that voting functionality
382:50 - which we do not currently have so I'm
382:52 - just going to hard code this as
382:53 - undefined because that is what the value
382:56 - is actually going to be if they have not
382:57 - devoted on the post so we're going to
382:58 - sort of mimic that
383:01 - the next prop is going to be our ongoing
383:02 - function on vote is equal to on vote
383:07 - on a select post is going to be equal to
383:09 - on select post
383:12 - and lastly on delete post is equal to on
383:15 - delete post
383:16 - and this is complaining here
383:19 - type void is understandable to type oh
383:21 - okay so for are on select post function
383:24 - we do need to specify that it is
383:26 - returning a void the reason we don't put
383:28 - the other ones is because we declared
383:30 - them as asynchronous and when you have
383:33 - an asynchronous function you don't
383:34 - necessarily need to specify the return
383:36 - type
383:38 - okay so that is happy now and we
383:41 - actually are seeing data show up on our
383:42 - screen here so our post item component
383:43 - is working I'm actually going to change
383:45 - this fragment to be a stack from Chakra
383:47 - so that it nicely spaces them out for us
383:50 - by default and we don't have to apply
383:51 - any extra margin on the post items this
383:53 - stack will handle that for us so let's
383:55 - come back to our post item and continue
383:56 - on with the styling okay so on this
383:59 - outermost Flex container we're going to
384:00 - add a border color of gray 300 as well
384:05 - as a border radius of four all right and
384:08 - let's apply some hover styling with our
384:10 - hover pseudo class we can say hover the
384:12 - Border color we want to be gray 500. all
384:17 - right and we want to apply a cursor of a
384:19 - pointer because they are clickable items
384:21 - and then we can add our on click
384:23 - function here which is going to call
384:25 - that on select post which currently does
384:27 - nothing but we will put it here anyway
384:28 - okay so let's go take a look at a post
384:30 - item inside of our demo here to kind of
384:31 - look at the overall structure of this
384:33 - thing so this entire thing is
384:35 - represented by this Flex box that we
384:37 - just created here and inside
384:38 - we can see that there is a left hand
384:40 - side column this kind of gray background
384:41 - thing with the voting buttons in here
384:43 - and then on the right hand side we
384:45 - actually have a majority of the post
384:47 - content so from a high level we really
384:49 - only have three major containers here
384:51 - and I just wanted to show you that so
384:52 - that writing of the HTML is a bit more
384:54 - intuitive
384:55 - so our first child of this Flex box is
384:57 - going to be another flexbox which is
384:59 - going to represent that gray voting
385:00 - column so you're going to make the
385:02 - direction of this column and we're going
385:04 - to make the Align equal to Center so
385:06 - it's nice and centered and we want to
385:08 - give this a background of gray 100. you
385:11 - want to apply some padding of two and
385:14 - the width of 40 pixels
385:18 - okay so we can kind of see that show up
385:19 - on the UI over there then lastly we want
385:21 - border radius of 4. okay so then inside
385:24 - of here we're essentially going to have
385:25 - two icons the upload and the download
385:27 - icon and the actual text for the vote
385:31 - status on this post so we can create our
385:32 - first icon here so icon make sure that
385:34 - comes in from Chakra and the icon we
385:36 - want to display here is actually going
385:37 - to be conditional as well depending on
385:39 - if the user has uploaded or downloaded
385:41 - this post okay so we can use that user
385:43 - vote value and we can check does it
385:46 - equal to one meaning that they have
385:47 - upvoted this post if it does we want to
385:50 - show sort of a filled orange icon right
385:52 - like if you go to the demo here if I
385:54 - click on this you can see that it does
385:56 - change to a more filled icon so if they
385:58 - have indeed uploaded this post we want
385:59 - to show Arrow up Circle sharp I don't
386:03 - know why I'm not getting autocomplete
386:04 - that's kind of annoying to type that
386:06 - entire thing out okay and if they have
386:08 - not voted on this post we want to just
386:10 - show Arrow up Circle outline
386:13 - and the color of this icon is also going
386:16 - to change depending on if the user has
386:18 - upvoted this post so if the user vote
386:20 - value is equal to one you're going to
386:22 - make the color of the icon that orange
386:24 - Reddit color brand 100 if they have not
386:26 - we want it to be gray 400. all right
386:28 - we're going to make this a bit bigger so
386:30 - we're going to say font size is going to
386:31 - be 22 and then when the user actually
386:33 - clicks on this icon we want to call our
386:35 - on vote function underneath here is
386:37 - going to be just a piece of text that
386:39 - shows the vote status of this post so we
386:41 - can say post dot vote status
386:44 - and these words have not been voted on
386:46 - so it is currently zero and all we want
386:48 - to do to this text to just make it
386:50 - slightly smaller so we'll say uh nine
386:52 - point okay now underneath this we're
386:54 - going to have another icon which is
386:55 - going to be our downvote icon so I'm
386:57 - just going to copy the output one and
386:59 - come up here for the downvote we want to
387:00 - check does the user vote value
387:02 - equal negative one meaning that the user
387:04 - has downloaded this post if they have we
387:07 - want to show IO arrow down Circle sharp
387:11 - okay the autocomplete isn't now working
387:13 - which is super nice and if they have not
387:15 - downloaded this thing we wanted to show
387:17 - IO Circle that line if I just change
387:19 - this to like true just so we can see
387:21 - that we can see that that thing is sort
387:23 - of filled in now and we haven't applied
387:25 - the color yet but I just wanted to show
387:26 - how the icon actually changes depending
387:28 - on what the user row value is all right
387:29 - our color again we're going to check how
387:31 - they downloaded this thing if they have
387:33 - we want it to be this hex code 4379ff
387:37 - [Music]
387:38 - which is the color I found that most
387:41 - closely resembles the download color on
387:43 - Reddit
387:44 - then we just want gray 400 if they have
387:46 - not voted if they have not downloaded
387:47 - and actually on both of these I'm just
387:49 - going to add the cursor
387:51 - of pointer
387:53 - I forgot that on the f01
387:56 - okay awesome this is looking pretty good
387:58 - let's keep going all right so we are
388:01 - done with the left hand side boating
388:02 - container so let's just get rid of this
388:04 - title here and we're going to start
388:06 - working on the right hand side of this
388:07 - component which is going to be most of
388:09 - the other post content bringing it is a
388:11 - direction of column as well as a width
388:14 - of 100 and then inside of here we're
388:17 - going to add another stack and this is
388:19 - just going to again evenly space
388:21 - everything that's going to go inside of
388:22 - here we're going to give this a spacing
388:24 - of one and then padding of 10 pixels so
388:29 - inside of this vertical stack we're
388:31 - going to actually have a horizontal
388:33 - stack and this is going to contain that
388:36 - text that says posted by and then the
388:37 - username that posted this and then the
388:38 - community icon if it exists so we want
388:41 - to make the direction of this row and we
388:44 - want to make these spacing
388:46 - equal to 0.6 and we want a line to be
388:50 - Center so everything is centered
388:52 - vertically and then we want to make the
388:54 - font size of everything in here nine
388:56 - point okay so the first item inside of
388:59 - this horizontal stack is actually going
389:01 - to be the community icon here
389:03 - however we can see that this only is
389:06 - there when we're on the home page of
389:08 - Reddit if we actually go into a
389:10 - community
389:11 - that icon is no longer there because
389:13 - they all belong to the same Community we
389:14 - don't really need to uniquely identify
389:16 - it like that so we're going to add a
389:18 - condition here in this stack that's
389:19 - going to basically check if we are on
389:21 - the home page or not we're going to come
389:23 - back to this one we actually fill out
389:24 - the home page it's a very simple
389:25 - addition uh but I'm going to put a
389:27 - comment in here for now we are going to
389:30 - do a check if you're on the home page
389:31 - and if we are we want to actually
389:33 - display the icon of the community that
389:37 - this post is part of but for now we are
389:39 - sort of building the in community
389:40 - version of this so there is no icon the
389:43 - next component then would just be simply
389:44 - the text so this is where the actual
389:46 - posted by username is going to go and if
389:50 - you remember we stored the author's user
389:52 - display text on the post you can say
389:55 - post dot Creator display name so let's
389:57 - come back to our app so we can see what
389:59 - we're doing here and you can see that my
390:00 - username is actually showing up there
390:01 - because I created both of these posts
390:02 - and in addition to this we're actually
390:04 - going to say when this was posted like
390:06 - posted by Shad merhi 10 days ago or two
390:09 - minutes ago we want to show the actual
390:11 - time that it was posted right and in
390:14 - order to do that you're going to use a
390:15 - library called moment so just go to npm
390:19 - moment and we can basically pass this a
390:21 - date of any kind and it will basically
390:23 - format it in a very nice human readable
390:25 - way very popular Library you can see it
390:27 - has 17 million weekly downloads so very
390:30 - heavily used and it's going to make our
390:33 - app display very accurate and human
390:34 - readable at times for our users to see
390:37 - so we're going to install that
390:40 - okay then once that's done the text we
390:42 - want to display next to the username
390:45 - we're going to need some JavaScript
390:46 - because we're going to call a function
390:47 - from that library and that function is
390:49 - going to be called moment so we're going
390:51 - to import moment from moment so the
390:53 - argument to this thing is going to be a
390:54 - date so we're going to say new date and
390:57 - the date that we want to pass it is
390:59 - going to be our posts dot created at
391:03 - dot seconds because if you recall the
391:06 - type of this is actually a timestamp and
391:08 - the timestamp is not at eight but the
391:11 - timestamp does contain the seconds
391:13 - parameter on it that can be used to
391:15 - create a date
391:16 - okay then we need to actually multiply
391:18 - the seconds by a thousand here and then
391:21 - we can actually call a function on this
391:22 - called from now and that is going to
391:24 - format the date as in like x amount of
391:27 - time from now so 18 hours ago so very
391:30 - cool I think this is awesome I love
391:31 - moment okay so typescript is not happy
391:33 - here and you can see that it's saying
391:35 - that the object is possibly undefined
391:37 - and by object it's referring to the
391:39 - created act parameter on the post the
391:42 - reason it is complaining about that is
391:44 - because if you recall in our post atom I
391:47 - actually made the created that thing
391:48 - optional which means it could be
391:49 - undefined and I actually realize that we
391:51 - do not need to do this it is always
391:53 - going to be there so I'm just going to
391:54 - remove that question mark save this and
391:56 - that should make this happy and so my
391:59 - apologies about that I initially thought
392:00 - that it was going to be an optional
392:02 - parameter okay so we are done with this
392:04 - inner horizontal stack so let's come
392:06 - outside of that but still inside of our
392:08 - vertical stack here and we want to
392:10 - actually put the post title in here now
392:12 - we are ready for the Post title awesome
392:15 - inside of a text component we're going
392:17 - to actually use post dot title
392:20 - okay we're going to make the font size
392:23 - of this equal to 12 point
392:25 - and the font weight we're going to make
392:27 - it heavy we're going to get 600.
392:31 - whoops font weight
392:34 - all right so underneath this title text
392:36 - is we're actually going to display our
392:38 - post image okay so let's write a
392:39 - condition to check that it exists so we
392:41 - will say
392:42 - post.imageurl if this does exist let's
392:45 - show some component and that component
392:48 - is going to be an image and the
392:50 - container of our image is going to be a
392:52 - flex container
392:53 - okay and we're going to make the justify
392:55 - of this equal to Center as well as the
392:58 - Align here and then we're going to give
393:00 - this a padding of two and inside of here
393:02 - we're actually going to have our post
393:05 - image so bring an image from Chakra and
393:07 - our source for this image is going to be
393:10 - the post.image URL awesome so if I save
393:13 - this we can see that the post is
393:15 - actually there how cool is that we want
393:16 - to set a Max height on this image to
393:18 - prevent it from taking up too much room
393:20 - if it's a very large image so we'll set
393:22 - a Max height of 460 pixels and we're
393:25 - just going to add an ALT key which is
393:27 - typically used for images and we're just
393:28 - going to say post image just some
393:30 - alternate text if the image for some
393:32 - reason is not available and actually I
393:34 - forgot a really important piece just
393:36 - above the image here we do want to add
393:38 - our post body that's also another really
393:41 - important thing post dot body
393:43 - just like that
393:45 - and we're going to change the size of
393:47 - this as well to be a font size of 10.
393:51 - perfect so this is looking more and more
393:53 - like Reddit by the second okay so now we
393:57 - are done with this vertical stack here
393:58 - we can come outside of that still inside
394:00 - of our Flex column here though and we're
394:02 - going to put in the container for kind
394:05 - of the post footer there where we have
394:07 - all those icons and user actions where
394:09 - they can share the post delete the post
394:11 - Etc and comment on the post so let's
394:13 - come down here okay so the container for
394:15 - this is going to have a margin left of
394:17 - one it's going to have a margin bottom
394:19 - of 0.5 and it's going to have a color
394:24 - Gray 50. and we're going to give this a
394:27 - font weight of 600 so everything inside
394:30 - of here is going to have the font weight
394:31 - of 600. okay so and then essentially we
394:33 - just have a series of basically icons
394:36 - with a company text we have icon text
394:38 - icon text right each each little thing
394:40 - has an icon and a piece of text so each
394:42 - icon is going to have its own Flex
394:44 - container so we can create our first one
394:46 - by saying icon and this icon container
394:48 - we're going to give it an align of
394:51 - Center a padding of 10 uh sorry a
394:55 - padding of 8 pixels top bottom 10 pixels
394:57 - left right and a border radius
395:00 - of four
395:02 - okay and on Hover we want the background
395:04 - color to be gray 200
395:07 - and then lastly just make our cursor
395:09 - pointer
395:13 - perfect just like that so if I hover
395:15 - over this thing we can see that it has
395:17 - that sort of gray background there okay
395:20 - so this first icon is going to be the
395:21 - comment icon which is going to be BS
395:23 - chat and we're going to give this a
395:25 - margin write of two and right next to
395:28 - the comment icon we actually want to
395:30 - display the number of comments that this
395:32 - post has so we're going to say post DOT
395:34 - number of comments
395:37 - and then we can give this a font size of
395:39 - nine point
395:41 - there we go okay and actually I decided
395:44 - to remove this font weight of 600 here
395:46 - you can leave it if you choose I just
395:47 - think it looks a bit cleaner if the text
395:49 - is a bit lighter okay perfect so now
395:51 - what I'm going to do is just copy this
395:54 - and clone it downward uh for the other
395:57 - icons and the second icon is going to be
396:00 - our i o Arrow redo outline which is sort
396:03 - of the share icon so inside of the text
396:06 - here we want to say share then the last
396:08 - icon down here is going to be the save
396:09 - icon so we're going to say I O bookmark
396:12 - outline and we want to display the text
396:14 - save
396:17 - awesome how good is this looking this is
396:19 - so cool and I love how the number of
396:21 - comments is actually Dynamic so every
396:23 - time a comp is created this is actually
396:24 - an accurate number and actually we are
396:27 - missing one icon here and the icon is
396:29 - going to be the delete icon but we only
396:31 - want to show this if the user is the
396:35 - creator we do not want to give anyone
396:37 - the option to delete any post only if
396:39 - you're the owner of this post you can
396:41 - see this button here and this icon is
396:43 - going to be
396:45 - the AI outline delete and it's going to
396:48 - say delete okay and the on click for the
396:51 - container of this delete icon is going
396:53 - to be the on delete
396:56 - okay so we are completely done building
396:57 - out the UI for the Post item component
397:00 - and the only thing that's going to
397:01 - change actually is this home page check
397:03 - that I was talked to before where uh if
397:05 - we see them on the home page it just
397:06 - displays the community icon but that's
397:08 - very minor okay perfect so now that we
397:11 - can actually create posts and view them
397:13 - on our page let's go try creating one in
397:16 - the submit page and then actually have
397:18 - it redirect us back to this page and see
397:20 - what happens and I just want to make
397:21 - sure that we actually did implement the
397:24 - router we did not okay so I'm just going
397:25 - to uncomment this so that when we do
397:27 - create a post successfully it is going
397:29 - to Route us back to the page and
397:31 - actually we really only want to do this
397:33 - when the post has been successfully
397:35 - created if an error occurs we don't
397:37 - really want to reroute the user only in
397:39 - the successful case so I'm going to move
397:40 - this up into the try block of the try
397:43 - catch okay so let's actually go try
397:46 - creating a post and seeing what happens
397:48 - so so let's create the title of I love
397:50 - chakra UI and the text is going to be
397:52 - uis made easy with chakra awesome let's
397:57 - go add an image here
397:59 - okay and the only other image I have
398:01 - here is
398:02 - um is this image of me I'm using for the
398:04 - thumbnail here so let's let's use this
398:06 - one and we'll come back to the place I'm
398:07 - actually going to change this to am I
398:10 - good at photoshopping
398:12 - and then the the description is going to
398:15 - be null okay I'm going to tell myself no
398:18 - so I'm going to click post
398:21 - and let's see what happens so we are
398:22 - redirected back to the page and then it
398:26 - fetches the post from the database and
398:28 - we can see it as soon as we post it how
398:30 - cool is that I think that's really cool
398:32 - okay and one last thing I'm going to
398:33 - very quickly add is going to be our post
398:36 - loader component which displays those
398:37 - sort of skeleton components when the
398:39 - posts are being loaded from the database
398:41 - so inside of our uh post folder here I'm
398:45 - going to create a new file called post
398:46 - loader dot TSX
398:50 - and I'm going to use our snippet here
398:52 - and chakra makes doing something like
398:54 - this so easy they have this component
398:56 - called skeleton so let's go see what
398:58 - this looks like chakra skeleton and you
399:00 - can basically create any shape you want
399:02 - of this like skeleton loader component
399:04 - and so you can kind of build it out to
399:06 - look exactly like your component and I
399:08 - think these are cool I think these
399:09 - really really really improve user
399:11 - experience like when I'm on a website
399:12 - like Airbnb or something and I see these
399:14 - loaders it honestly just makes the app
399:16 - feel better rather than just like seeing
399:18 - nothing or something like spinner
399:19 - Spinners are good too but I really like
399:22 - these skeleton components I think
399:23 - they're fun
399:24 - okay so what I'm going to do is I'm just
399:25 - going to paste in my loader from my
399:28 - completed project just because it's only
399:29 - like 15 lines and it's just basically
399:32 - something that's really easy to copy and
399:34 - paste so I'm going to put this in here
399:36 - like this
399:37 - add all missing Imports
399:40 - and I will put the link for this in the
399:41 - description so you can just quickly grab
399:43 - it but very simple component and all we
399:45 - need to do to use this component is come
399:47 - back to our posts component I'm going to
399:49 - close my directory here and inside of
399:51 - the return statement of our post.tsx
399:53 - file I'm going to create a outermost
399:55 - fragment and wrap everything in the
399:57 - fragment and the reason I'm doing that
399:59 - is so I can add some JavaScript in here
400:01 - what I want to add in here is check if
400:03 - loading is true and if loading is true I
400:07 - want to show our post loader
400:11 - and for some reason it's not importing
400:13 - there we go
400:15 - okay and if you are not loading then
400:18 - let's show the actual post content so
400:21 - we'll move the stack inside of here just
400:23 - like this
400:25 - okay so now if we come back and if I
400:28 - just make this true for a sec we can see
400:29 - what this looks like so you can see that
400:31 - created these components using the
400:33 - skeletons from Chakra to make this
400:35 - really nice looking loader and honestly
400:37 - I just I just get so fired up about
400:38 - these loaders I just think they look so
400:39 - cool and they really do improve the user
400:41 - experience so anyway we can actually
400:43 - check if loading is true using the real
400:44 - loading
400:46 - so now if I save this and I reload
400:51 - I actually don't know if we're setting
400:52 - loading to be true I don't think we are
400:54 - no we're not okay so inside of our Drive
400:56 - lock here I'm just going to set loading
400:58 - to be true and then at the very end just
401:00 - set loading should be false
401:03 - awesome so you saw for a second there
401:04 - that it actually was loading let's do
401:07 - this again
401:10 - cool so I think that's amazing all right
401:13 - and we just need to add a key to our
401:15 - post item here to prevent that console
401:18 - error we are seeing on the right hand
401:19 - side over here so I'm just going to make
401:21 - the key the unique ID of this post and
401:24 - also we can actually improve our image
401:26 - loading State because if you see there
401:27 - if I just refresh it loads the post but
401:30 - then for another second after the image
401:32 - is still kind of loading and that can be
401:34 - improved with just a simple additional
401:36 - State variable inside of our post item
401:38 - so let's quickly add that it's just
401:40 - going to be a few lines so up top here
401:42 - we can create a state variable
401:43 - so basically for each post item we can
401:46 - add a state called loading image and set
401:48 - loading image
401:49 - and we can initialize it as true because
401:52 - initially the image is going to be
401:53 - loading and for folks that don't have
401:55 - images this doesn't even matter it's
401:56 - just kind of a redundant State variable
401:58 - but if you come down here to the
402:01 - container of our image and inside of
402:03 - this container we can add a condition to
402:06 - check to see if loading image is true
402:08 - and if it is we want to show one of our
402:11 - skeleton components
402:13 - so we can say skeleton and we want to
402:15 - make the height of this 20 sorry 200
402:18 - pixels the width 100 percent and the
402:21 - Border radius 4. and this is basically
402:23 - just going to mimic the shape of an
402:25 - image if the image is kind of loading
402:27 - and this is not the same loading as
402:29 - loading from the database this is like
402:30 - the posts have been loaded from the
402:32 - database but the image is just sort of
402:33 - in the process of still rendering and
402:35 - this will make sense when we see it in
402:36 - the app here okay so if we save that we
402:38 - can see that there is a sort of loader
402:39 - beside the image here but we don't want
402:41 - to display that all the time obviously
402:42 - that looks kind of weird so on our image
402:44 - component there is a property called on
402:47 - load and this is going to trigger when
402:48 - this image has actually successfully
402:50 - loaded so we can call our set
402:52 - loading image function and just set it
402:55 - equal to false just like this okay and
402:58 - since the updating of state is
402:59 - asynchronous we can hide this image to
403:02 - actually prevent the image from being
403:04 - shown at all until that state variable
403:05 - has updated as well so that there's no
403:07 - sort of flash of both of these two
403:10 - things appearing
403:11 - okay so if we save this and then if we
403:13 - refresh
403:16 - this is how it behaves
403:19 - awesome so it's just a bit cleaner and
403:21 - it kind of signifies to the user that
403:23 - there is something being loaded into the
403:25 - image awesome guys so that is it for our
403:29 - post item component other than those few
403:30 - minor things with the whole home page
403:32 - icon thing and now we can create posts
403:34 - in communities and actually view them
403:35 - the next step is going to be to actually
403:37 - implement the voting functionality and
403:38 - the commenting functionality so we are
403:40 - making solid progress I'll bet you guys
403:43 - so we're going to start off with
403:44 - handling the deletion of post
403:45 - functionality because now that we can
403:47 - create them it would be nice if we could
403:49 - delete them as well and it's not an
403:50 - overly complicated function so we might
403:52 - as well just get it out of the way now
403:53 - all right so I am inside of this post
403:55 - item component here and just underneath
403:58 - this loading State here I'm going to
403:59 - create a new function called handle
404:01 - delete and this is going to be an
404:03 - asynchronous function
404:04 - okay so we're creating this function but
404:06 - we also have this on delete post
404:08 - function that we saw that we defined in
404:10 - our use post hook here so you might be
404:12 - wondering why do we have two delete
404:13 - functions and that's a really good
404:15 - question this function is actually going
404:17 - to call this onto the post function and
404:19 - the on delete post function is going to
404:20 - be responsible for actually updating our
404:22 - database and uh and state but the handle
404:25 - delete function is going to handle the
404:27 - error handling for us inside of this
404:28 - component and a few other things event
404:30 - propagation but I don't want to get too
404:31 - deep into that until we get to it okay
404:34 - so inside of our handle delete function
404:36 - I'm going to create a try catch block
404:37 - and at the top of our try block let's
404:39 - create a variable called success and
404:42 - this variable is going to represent a
404:44 - successful response from the on delete
404:46 - post function so basically we click on a
404:49 - post that we want to delete that post is
404:51 - sent to the on delete post function the
404:53 - undelete post function is going to reach
404:55 - out to our firestore database and delete
404:57 - that document when that is successful is
404:59 - once you return to this function a
405:01 - success message and then we will know
405:03 - inside of this function that the post
405:04 - has successfully been deleted so we're
405:07 - getting some errors here and the reason
405:08 - that is is because our prop type for
405:10 - this function is currently this and type
405:12 - script is saying well this function that
405:14 - you declared up here definitely does not
405:16 - match what is going on down here so we
405:18 - do need to fix that okay so to fix our
405:20 - type declaration here we're going to
405:22 - change this to a function that accepts
405:24 - an argument of type post and this
405:26 - function is going to return a promise of
405:29 - type Boolean and it's returning a
405:31 - promise because the on delete post
405:32 - function is asynchronous because it's
405:34 - asynchronously communicating with our
405:37 - database and then JavaScript
405:38 - asynchronous functions can only return a
405:40 - promise so our on delete post function
405:42 - is going to attempt to delete the
405:43 - document from our firestore database and
405:45 - if it's exceeds it's going to return
405:46 - true and if it fails it's going to
405:48 - return false and that is what the
405:50 - success variable represents I hope that
405:51 - makes sense and that should make more
405:53 - sense when we actually write out this
405:54 - onto the host function which is coming
405:55 - very soon and this helps us with our
405:57 - error handling because we can say if
405:59 - there is no success if the undelete post
406:01 - function was not successful then we want
406:03 - to throw a new error error and say that
406:06 - we failed to delete the post then now
406:10 - here we can set
406:12 - our error state which we can create
406:14 - right now so you can say class error set
406:17 - error is equal to U State we can set it
406:20 - equal to false then down here we can
406:22 - actually call it's a set error and set
406:24 - it equal to error Dot message
406:27 - and the message in this case is just
406:29 - going to be this failed to delete post
406:32 - string here that we're throwing in the
406:33 - error here okay so if we make it past
406:35 - this if statement we can just throw a
406:37 - log in here saying that the post was
406:39 - successfully
406:41 - delete it and there are a few more minor
406:44 - things that we're going to add to this
406:46 - function when we create these single
406:47 - page postview in a little bit but I will
406:49 - come back to that when we get to it and
406:51 - then what we want to do is add this
406:52 - function to the on click of our on
406:55 - delete here we want to add the function
406:56 - handle delete
406:58 - so let's come back up here and now let's
407:00 - actually go work on this on delete post
407:02 - function in our use post hook so we just
407:04 - saw a few minutes ago that this function
407:06 - is going to need to take in an argument
407:07 - of type post so we can add that in here
407:10 - and that is also going to need to return
407:11 - a Boolean promise and in typescript we
407:14 - specify the return type after these
407:16 - parentheses here with a colon and then
407:18 - we can just type the return type and in
407:19 - this case that is going to be a promise
407:21 - of type Boolean and just one more time
407:23 - for clarity because of this function is
407:25 - asynchronous we have to wrap the return
407:27 - type in a promise so you can see that we
407:30 - have a compiler error on our return type
407:32 - there and this is basically just
407:33 - typescript saying while you're telling
407:34 - me that this function is supposed to
407:36 - return a promise of type Boolean but
407:38 - you're not returning anything so to make
407:39 - this go away all you have to do is just
407:40 - return a value of that type so this
407:43 - function is going to do a total of three
407:45 - things the first thing it's going to do
407:46 - is it's going to check if post that
407:49 - we're trying to delete has an image
407:50 - attached to it and if it does it's going
407:52 - to delete it from our Firebase storage
407:54 - bucket then it's going to actually
407:55 - delete the post document itself in our
407:58 - firestore database and that is just
408:00 - going to update our recoil state so that
408:02 - we do not see the deleted post on our UI
408:04 - okay so let's create a try catch block
408:06 - here and I'm just going to write out
408:07 - some comments to outline what I just
408:09 - said so the first thing is check
408:11 - if there's an image and if there is
408:13 - delete it from our Firebase storage
408:16 - the second thing is just going to be
408:17 - delete the post document
408:20 - from firestore and the third thing is
408:22 - just going to be update recoil state
408:24 - then at the end of all of these things
408:26 - successfully completing we will return
408:27 - true and if an error occurs we want to
408:30 - return false and so if it fails and it
408:33 - returns false then the value of success
408:35 - over here will be false and we will
408:36 - throw an error over here and be able to
408:38 - actually update our component to display
408:39 - that error to the user okay so let's
408:41 - actually build this out so the first
408:43 - thing is you want to check for the
408:45 - existence of an image URL on this post
408:47 - because only posts with images are going
408:49 - to have an image URL if there is a post
408:51 - image if you're going to create an image
408:53 - reference to that image inside of our
408:56 - storage and we can do that with our ref
408:57 - function from Firebase and we just have
408:59 - to pass this our storage instance from
409:01 - Client app
409:03 - and inside of here we just need to
409:04 - specify the path to this image and if
409:07 - you remember from when we actually
409:08 - uploaded the images the path is going to
409:10 - be post slash
409:13 - post dot ID
409:17 - slash image to actually delete this
409:20 - image from our storage we can call a
409:22 - function called delete object and this
409:23 - is going to be from again Firebase
409:25 - storage and then we can just pass it our
409:27 - image ref perfect and that is all we
409:29 - need to do to delete it from our storage
409:31 - all right so next let's delete the post
409:33 - from our firestore database so let's
409:35 - create a reference to the document that
409:37 - we're actually going to delete so we can
409:38 - say post doc graph and we can use our
409:40 - doc function from Firebase firestore and
409:42 - we can pass this our firestore instance
409:44 - from Client app
409:46 - The Collection that we are deleting from
409:47 - is posts and the ID of the document that
409:50 - we're deleting is going to be post dot
409:52 - ID
409:53 - just like this okay so typescript is
409:55 - complaining here because the ID is an
409:57 - optional parameter on our post type but
410:00 - because we know for sure that if we're
410:01 - deleting a post this ID is going to
410:03 - exist I'm just going to add the bang
410:05 - operator here to tell typescript that it
410:07 - is safe to proceed in using this value
410:09 - all right now to actually delete this
410:10 - document from our database we can call
410:12 - the function delete doc from Firebase
410:14 - and pass it the document reference we're
410:17 - trying to delete perfect so now let's
410:19 - just update our recall State and we're
410:21 - going to use our set posted value
410:22 - function up here so we can call that
410:24 - down here and say set Post State value
410:26 - take the previous value of State
410:28 - spread it because you're only updating a
410:30 - single value and that value is going to
410:33 - be posts and the updated value of posts
410:36 - you basically just want to remove this
410:38 - post that we're deleting from the
410:39 - current value of posts so we can say
410:44 - prev.posts.filter and filter is going to
410:46 - iterate through all of the items inside
410:48 - of posts and the condition that we want
410:50 - to filter on is that item dot ID does
410:54 - not equal to post dot ID
410:57 - okay so let's check to make sure that
410:59 - everything is in place so if I go to my
411:00 - post item we can see that we are calling
411:04 - this um handle delete function when I
411:06 - click on this delete button here and
411:09 - that is going to call this which is
411:10 - going to call on delete post which is
411:12 - going to do all that stuff we just wrote
411:15 - so theoretically this should work so
411:18 - let's give this a go and we're going to
411:20 - add some loading state in a second here
411:21 - but let's see and let's go talk about
411:23 - what should actually happen on the back
411:26 - end when we do click on delete before we
411:28 - do it so we know that it happens on both
411:30 - the front end and the back end
411:32 - if I go to storage
411:35 - and I go to posts and I think it's going
411:38 - to be this one because it's second okay
411:39 - so yeah let me delete this post this
411:42 - image should be deleted from our storage
411:43 - bucket here so let's try doing this
411:45 - let's delete
411:48 - okay so it worked on the front end and
411:50 - we're saying that post was successfully
411:51 - deleted but let's go check out our
411:53 - storage
411:54 - okay so let's try it refreshing here so
411:56 - let's go into posts
411:58 - okay yeah so it was deleted which is
412:00 - perfect the only one thing for now is
412:02 - that other post okay so it did work uh
412:05 - let's go to our database
412:07 - continue to posts
412:08 - and I don't even remember I think it had
412:10 - to do with Photoshop yeah okay so it was
412:12 - deleted perfect so we can actually
412:14 - delete post now which is super cool okay
412:16 - and let's quickly add some loading state
412:18 - for our deleting so we can actually
412:19 - indicate to the user that the deletion
412:21 - is in progress so I'm going to create a
412:22 - state variable called
412:24 - um called loading delete
412:26 - set loading delete
412:28 - is equal to use State and we're going to
412:30 - initialize this as false then at the
412:32 - very top of our kind of delete function
412:34 - here I'm going to set it equal to true
412:37 - and at the very bottom just want to set
412:38 - it to false set loading false
412:41 - once everything has successfully
412:43 - returned now all we need to do to
412:45 - actually update the UI with our loading
412:47 - state is you can come down here and we
412:49 - can toggle the display of this icon and
412:52 - this delete text here this sort of
412:53 - garbage can text over here all right so
412:56 - let's just cut these out for a second
412:57 - and let's create a ternary operator that
413:00 - is going to see if loading delete is
413:02 - true if it is we're going to show a
413:05 - spinner and if it is not we're going to
413:07 - show the icon in text let's say delete
413:09 - what the garbage can I'm just going to
413:11 - wrap these in a fragment here
413:14 - just like this
413:17 - okay and type here we're going to use
413:19 - our spinner component from Chakra UI
413:21 - react and we're going to make the size
413:23 - of this equal to
413:25 - small
413:26 - awesome so if I just make this true so
413:28 - we can see what this looks like
413:31 - that is what that looks like so it's
413:32 - super clean it only appears inside of
413:34 - that button there so let's see what this
413:36 - looks like when we actually delete
413:37 - something so I'm going to say loading
413:38 - delete
413:41 - all right now let's delete this post and
413:43 - see what happens
413:46 - beautiful I love Spinners and skeletons
413:49 - and loading state is just nice
413:52 - all right the very last thing I'm going
413:53 - to add is just displaying an error
413:55 - message if the deletion fails so I'm
413:58 - just going to create a new post quickly
413:59 - I'm going to call it here is a post here
414:02 - is a post body let's post this
414:07 - okay so let's go back to our new post
414:09 - form and I'm just going to grab the
414:11 - exact same UI component using the chakra
414:13 - UI alert let's go back to here and I'm
414:16 - going to paste this inside of this
414:18 - column Flex container here so just right
414:21 - in here say that okay that looks pretty
414:24 - good now we just have to change this
414:25 - text in here to B our error State
414:27 - variable just like that and then change
414:30 - this from True to error
414:32 - okay awesome so now if our post fails to
414:35 - delete for any reason inside of here
414:36 - then we will return false to our handle
414:40 - delete function and then the error will
414:42 - be set and you'll see that there was an
414:43 - error deleting the post awesome and that
414:46 - is it for deleting posts all right you
414:49 - guys so the next thing we're going to
414:50 - work on is the about Community component
414:52 - that is going to go on the right hand
414:54 - side here and that'll be sort of the
414:55 - last thing we need to do to wrap up the
414:58 - Community page so if we go back to the
415:00 - demo I just have a quick look at this
415:02 - component did I go into a community here
415:04 - this is the about Community component
415:06 - here and it's responsible for actually
415:07 - rendering the data of the current
415:09 - community that we're in we can see that
415:10 - it's going to appear on three of our
415:13 - Pages the first one is the actual home
415:15 - of the Community page r slash baking the
415:18 - second one would be in our submit page
415:20 - baking slash submit and the third one
415:23 - would be in a single page view if I
415:25 - actually click on this post here uh it
415:27 - is appearing in here as well in this r
415:30 - slash baking slash comment slash post ID
415:32 - and we've seen this before right when we
415:34 - need data across multiple Pages or
415:36 - multiple components that live far away
415:38 - from each other in the react component
415:40 - tree we can do that by putting our data
415:42 - into our Global recall state so we can
415:44 - access it from any
415:45 - so as of right now if we just look at
415:48 - the home Community page the community
415:49 - index page we only have access to this
415:53 - community data in this page only we
415:56 - currently do not have access to it in
415:57 - our submit page and we also don't have
415:59 - access to it in a single page view
416:01 - because we have not even created this
416:02 - page basically right now we only have
416:04 - access to it in this home page of the
416:06 - community and so what we're going to do
416:08 - is take this community data and just
416:10 - throw it into our recoil state in our
416:12 - communities atom and then all we have to
416:14 - do is drop this component into the right
416:16 - hand side fragment on all three of these
416:19 - Pages passive the community data from
416:21 - our recall State and then it will just
416:22 - have everything it needs to render
416:24 - successfully and if this isn't super
416:25 - clear right now just wait until we get
416:27 - into it and it should become more clear
416:28 - so I want to start off by going back to
416:30 - our communities atom file here and if
416:33 - you remember this was a while ago but if
416:34 - you remember I created a comment here
416:37 - that was called visited communities and
416:39 - I'm actually going to change this to a
416:42 - key called current community and this is
416:45 - going to wrap present the current
416:47 - community that we are in so if I click
416:49 - on baking baking is going to be stored
416:51 - here if I click on Tesla Tesla is going
416:53 - to be stored here and that way when we
416:55 - want to access that data from any one of
416:58 - those three pages that I just mentioned
416:59 - we can just grab it from our community
417:01 - state DOT current Community okay so as I
417:03 - just mentioned the value that is going
417:05 - to go in here is going to be an actual
417:07 - Community it's the type of it we can use
417:08 - our community interface and I'm going to
417:10 - make this optional because the user is
417:12 - not always in a community so it doesn't
417:14 - necessarily have to be defined so let's
417:16 - Trace back to the actual index page of
417:18 - this community and look again at how we
417:20 - actually fetch that data so if you
417:22 - remember we are server side rendering
417:24 - this page with get server side props and
417:26 - on the next.js server we fetch the data
417:28 - for the community and we've passed that
417:30 - as a prop to this component as this
417:33 - community data variable up here and that
417:35 - is what we have been using in our header
417:37 - and our post Etc but as we were just
417:39 - discussing we do not have access to this
417:42 - community data on those other two pages
417:44 - that we needed so all we're going to to
417:46 - do is just take this prop Community data
417:48 - and throw it into the current Community
417:50 - value inside of our community's atom and
417:52 - we want to do that as soon as this
417:54 - component renders and if you recall
417:56 - whenever we want to do something after
417:58 - the component renders we want to use our
418:00 - use effect hook so let's bring that in
418:03 - and create an empty callback function
418:04 - here okay so inside of this user Factor
418:07 - we just want to do one thing we just
418:08 - want to take this community data and
418:10 - throw it into our current Community
418:12 - inside of our community State value and
418:14 - we can do that by bringing in our set
418:16 - Community State value functions using
418:18 - recall so we can say const set Community
418:21 - State value
418:23 - is equal to use set recoil State and
418:26 - pass it our community State atom make
418:29 - sure all of those things import then
418:31 - down here inside of our use effect all
418:32 - we want to do is say set Community State
418:35 - value we want to spread the previous
418:37 - value because you're only updating a
418:38 - single value the value of your updating
418:41 - is going to be current community and we
418:43 - want to populate current Community with
418:45 - the Canadian data all right so let's
418:47 - come back to our app here and we
418:49 - definitely already know that we have
418:50 - access to community data on the home
418:52 - page of our community but let's go check
418:54 - our submit page and see if we have it
418:56 - there so let's go to submit and if this
419:00 - recoil setting worked we should have
419:01 - access to this data over here all we
419:03 - need to do is read that value current
419:06 - Community from Community State value so
419:08 - I can just say community
419:10 - State value
419:12 - is equal to use recoil value and again
419:16 - pass it our community State atom just
419:18 - like this and let's just take a quick
419:21 - peek at the console log of the value
419:23 - here
419:26 - no autocomplete very nice okay so this
419:30 - is the log here it's from our submit
419:32 - page if I just open this out let me let
419:33 - me expand the console here if I open
419:35 - this up we can see that the current
419:36 - Community has been populated with
419:39 - Shady's group and all of that data and
419:41 - so now we actually have access to the
419:42 - data required by the about Community
419:45 - component so we can just reuse this
419:47 - component across all of these pages and
419:49 - just posit this data as a prop all right
419:51 - so now that we have solved the data
419:52 - problems surrounding this component
419:54 - let's actually go build out the UI for
419:55 - it let's go back to our app over here
419:57 - and go to our shines group page and then
420:01 - I'm just going to go to the index page
420:03 - of our community and that about
420:04 - component is just going to go right in
420:06 - here all right so let's go create the
420:09 - file for our about component so inside
420:11 - of community
420:13 - I'm going to create a new file called
420:16 - about.tsx
420:18 - use our snippet and so the first prop
420:20 - that this component is going to take in
420:22 - is going to be the current Community
420:24 - data so we can call that Community data
420:27 - and it is going to be of type community
420:31 - we can make sure that imports from our
420:33 - atom file save that and then come down
420:36 - here and restructure it in the props
420:38 - Community data
420:40 - okay so I'm just going to close my
420:41 - directory here and Shrink my console a
420:44 - bit because it's a little large and
420:45 - let's just change the text here to be
420:47 - about
420:49 - and then inside of our index page I'm
420:52 - just going to actually bring the real
420:55 - component in about
420:58 - just like that and we can see that show
420:59 - up here on our right hand side so now we
421:01 - just have to pass in the required
421:03 - Community data prop so we can just copy
421:05 - the thing from post here because it's
421:06 - going to be the exact same and in this
421:08 - case we can pass the community data
421:10 - variable that we're getting from our
421:11 - server side rendering function but on
421:13 - the other Pages we're going to need to
421:15 - grab it from State the other pages are
421:17 - not going to be calling get server-side
421:19 - props because that would result in
421:20 - making the same query multiple times so
421:23 - if we just put this data in state once
421:26 - then they can all share this data and
421:28 - only a single query has to be made now
421:31 - there is the case of when the user
421:32 - refreshes either the submit page or the
421:35 - single page post view page meaning that
421:37 - they are not starting off on the home
421:38 - Bridge of the community in those cases
421:40 - we would have to go fetch the data and
421:42 - actually make this query from those
421:43 - pages since this home page is
421:45 - responsible for getting that data on the
421:46 - next JS server and putting it in stage
421:48 - four of those other pages to use but we
421:50 - will handle that case after it just is a
421:51 - simple workaround for now we're just
421:53 - going to focus on the user flow of the
421:55 - user starting in the community page and
421:56 - then going to those other Pages which
421:58 - assumes that that Community data is
422:00 - always going to be available by the time
422:01 - those users go to either the submit page
422:03 - or the single page postview page or we
422:05 - will handle the refreshing of those
422:06 - other two pages in a bit alright so now
422:08 - that we're actually passing that data to
422:10 - our component let's go back to that
422:13 - let's just take a quick look at the
422:14 - about component so that we can kind of
422:15 - see the overall layout of it okay so
422:17 - essentially it has this overall parent
422:19 - container here and then there is this
422:21 - header component in the top and then
422:23 - this other content component in the
422:26 - bottom so really there's only three main
422:28 - containers here so let's come over here
422:29 - and let's model that out so our first
422:32 - outer container is going to be a box
422:34 - component from Chakra and I want to make
422:36 - the position of this sticky because when
422:40 - we scroll down the Community page we
422:41 - want this to actually stick to the top
422:43 - just like that we don't want it to go
422:44 - above the screen and we can do that with
422:47 - sticky positioning and then we can
422:48 - actually specify the sticky position of
422:51 - this component and we're going to want
422:52 - it 14 pixels from the top
422:54 - and then the blue header component that
422:56 - says about Community is just going to be
422:58 - a flex box and then the white background
423:00 - container is also going to be a flexbox
423:02 - so pretty much our entire component is
423:04 - just a box with two Flex boxes in it and
423:06 - of course there will be other stuff
423:07 - inside of it but this is the main
423:09 - structure all right so let's come back
423:10 - to our app so we can actually see what
423:12 - we're doing and let's work on this
423:13 - header component so we're going to give
423:15 - this a justify of space between and an
423:19 - align of Center
423:21 - we want our background color to be blue
423:23 - 400 we're going to make the text color
423:26 - white
423:27 - we're going to give this a padding of
423:29 - three and we're going to give this a
423:31 - border radius of 4 pixels four pixels
423:35 - zero pixels zero pixels and that is top
423:37 - left top right bottom right bottom left
423:41 - so we can see something showing up over
423:42 - there okay now inside of here we're
423:44 - going to have the text that actually
423:46 - says about community
423:50 - okay and as always text does not like to
423:53 - Auto Import from a chakra so let's do
423:56 - that ourselves and we're going to shrink
423:58 - this a little bit so let's make the font
424:00 - size equal to 10 point
424:03 - just like that and let's make the font
424:05 - weight equal to
424:08 - 700. all right and then we're going to
424:10 - have an icon here I'm just going to
424:12 - paste in the icon import that we're
424:14 - going to use for this
424:15 - so this is it here the high outline dot
424:17 - circle thing and I'm just going to add
424:19 - that to our icon down here by saying as
424:22 - and it's going to be equal to high
424:23 - outline dots horizontal
424:26 - all right there we go so those are those
424:28 - three dots over there okay and that is
424:30 - it for this header component here let's
424:32 - work on the actual body so this Flex
424:35 - container is going to have a direction
424:36 - of column
424:39 - and we're going to give it a padding of
424:41 - three a background of white and lastly
424:44 - we're going to give it a border radius
424:45 - that is the complete opposite of the
424:47 - header component so it's going to be 0
424:49 - pixels zero pixels four pixels four
424:51 - pixels just like that inside of this
424:53 - Flex block you're going to have a stack
424:55 - component here and the stack is just
424:57 - going to handle the spacing between this
424:59 - component here with the members and the
425:00 - number of online as well as this thing
425:03 - down here with the created at date and
425:04 - this create post button let's come back
425:06 - to our app here all right so inside of
425:08 - our stack the first component is going
425:09 - to be a flex container which is going to
425:11 - represent the container of the number of
425:13 - members and the number of online people
425:15 - and we're going to give that a width of
425:18 - 100 percent
425:19 - a padding of Two and a font size of 10
425:23 - point and inside of here we're going to
425:25 - have a flex container for each of those
425:27 - two metrics and we're going to give both
425:29 - of them
425:30 - a direction of column as well as a flex
425:34 - row of one so that they take up exactly
425:37 - half of the width each and this will
425:39 - become more clear when the visuals start
425:41 - showing up on the screen here so in the
425:42 - first one we are going to display the
425:44 - text
425:45 - and that text is going to have the
425:47 - community data DOT number of members
425:51 - okay and on this number we want to call
425:53 - a JavaScript function called two local
425:55 - or low Locale I'm honestly not sure have
425:58 - the best way to say that and that is
426:00 - basically just going to convert it to a
426:01 - nice number with commas in it and stuff
426:04 - if we do not have that two local string
426:07 - function it's just going to be this
426:08 - ginormous number without the nice comma
426:10 - formatting so make sure you call that so
426:12 - that when your community has millions of
426:14 - members in it it looks very good okay
426:16 - and then right underneath here we're
426:18 - going to have another piece of text that
426:19 - says members
426:21 - just like that so three members I'm just
426:23 - gonna go back up here to the first flex
426:26 - container inside of the stack and make
426:27 - the font weight a little bit heavier and
426:29 - I'm just going to make it 700. there we
426:31 - go that looks a lot better all right so
426:33 - in the second Flex container here we are
426:35 - going to have two pieces of text so the
426:37 - first piece of text is going to be the
426:39 - actual number of people online and we're
426:41 - not building this feature because it's
426:42 - not super critical so I'm just going to
426:44 - hard code this to one and the text below
426:46 - it is just going to say on line okay so
426:49 - we are done with this first flex child
426:51 - of our stack container here so
426:54 - underneath that but still inside of our
426:56 - stack we're going to add a divider
426:57 - component from Chakra this is going to
426:59 - be that nice Gray Line and then
427:01 - underneath here we're going to have
427:03 - another Flex box for the created update
427:05 - and the create post button all right so
427:08 - on this Flex container we are going to
427:10 - vertically align everything by making
427:11 - the line equal to Center we're going to
427:14 - give this a width of 100 percent
427:18 - padding of One Fund rate of 500 500 and
427:23 - a font size of 10 points
427:27 - okay and inside of here we're going to
427:29 - have the birthday cake icon to represent
427:31 - when this community was actually born so
427:34 - we're going to bring in an icon so I'm
427:35 - going to copy that important over here
427:38 - and paste it under the other one react
427:40 - icon slash RI then I'm going to add that
427:43 - to this icon here as RI cakelake alright
427:46 - so let's make this icon a little bit
427:48 - bigger and I'm going to give it a font
427:50 - size of 18 and I'm going to make the
427:52 - margin right 2. now right next to the
427:55 - icon we want to have some text and this
427:57 - is going to be the text that actually
427:58 - says when this thing was created at so
428:01 - we're going to have the text created and
428:03 - in order to format the date nicely we
428:05 - can use the same moment library that we
428:07 - use for our post here but we're going to
428:09 - use a slightly different function we
428:10 - need some JavaScript so I'm going to
428:12 - wrap this in curly brackets I'm going to
428:14 - call in moment from moment so make sure
428:17 - that Imports
428:18 - and as you recall we need to pass this a
428:20 - date and the date that we're going to
428:21 - pass is going to be Community data dot
428:24 - created at we're going to do the exact
428:26 - same thing we did with the other
428:27 - timestamp we're going to grab these
428:29 - seconds from here multiplied by a
428:31 - thousand and this is complaining saying
428:33 - that created at might be undefined so
428:35 - what we're going to do is just prevent
428:37 - this text from being shown at all if
428:39 - there is no Community data dot created
428:40 - at so we can say community data dot
428:43 - created at and this text so now
428:45 - typescript is going to be happy because
428:47 - it knows that if we get to this point
428:49 - over here it is going to be defined so
428:51 - we can actually get rid of this optional
428:52 - chain in here and we need to call a
428:54 - function on this moment date here so at
428:57 - the end of it we can call the dot format
428:59 - function and the format we want is going
429:01 - to be month month space Day Day comma
429:05 - year year four of those just like that
429:08 - and that is what that looks like I love
429:11 - this moment Library it's so customizable
429:13 - and it just formatted for you exactly
429:15 - however you want it's pretty cool thank
429:16 - you moment for helping us get closer to
429:19 - the Reddit appearance all right now
429:20 - underneath this Flex container but still
429:22 - in our stack we're going to create our
429:24 - create post button and this is actually
429:26 - going to be a link from next link that
429:28 - is going to Route us to the submit page
429:31 - of this community and the link component
429:33 - from next allows us to perform
429:35 - client-side routing by clicking on a
429:37 - certain component so whatever we put
429:39 - inside of this link is going to Route us
429:42 - to the page that we specified and the
429:44 - element that we want to click on to take
429:46 - us to the submit page is going to be a
429:48 - button let's import that from Chakra and
429:51 - the button is going to say create post
429:53 - and we're going to give this a margin
429:55 - top of three and a height of 30 pixels
430:00 - and the reason this is unhappy is
430:02 - because we are not passing it the href
430:04 - prop and the href prop represents the
430:06 - actual client-side route that we want
430:08 - this thing to take us to you want to
430:09 - take us to forward slash R forward slash
430:12 - and then we're going to need to grab the
430:14 - community ID from the router which in
430:16 - this case is chatty's group but we don't
430:18 - have the router in this file yet so
430:19 - let's come up to the top of our
430:20 - component and bring that in with the use
430:23 - router hook so we can say const router
430:24 - is equal to use router then down here in
430:28 - our link we can access that we can say
430:30 - router.query dot Community ID
430:34 - then we want to go to this community's
430:36 - submit page at slash submit just like
430:40 - this so now if I click on this create
430:41 - post button it takes me to the submit
430:43 - page for Shady's group how cool is that
430:45 - okay and now what we're going to do is
430:47 - add the functionality to update the
430:49 - community image if you are the moderator
430:52 - creator of this community so if you go
430:55 - to our demo and I just go into a
430:56 - community that I created and I'm
430:58 - moderating socialize Community I can see
431:00 - that I have this little admin section
431:02 - here and I can change the image and that
431:04 - will actually show in the community icon
431:06 - up here so that is what we're going to
431:08 - do now the process for doing this is
431:09 - going to be pretty much identical to
431:11 - what we saw in the new post form when we
431:14 - were uploading an image using this on
431:15 - select image function and using the file
431:17 - reader so it should be pretty much the
431:19 - exact same so what I'm going to do is
431:20 - actually create a custom hook and
431:22 - extract that logic into it and it's only
431:24 - going to be about a 30 line hook it's
431:25 - pretty small and then we can just reuse
431:27 - it in both of these components here so
431:28 - it's going to be a lot cleaner just so
431:30 - we don't have to rewrite the same
431:31 - functions all right so inside of our
431:33 - Direct directory here inside of hooks
431:35 - I'm going to create a new file called
431:37 - use select file dot TSX
431:41 - use our snippet get rid of the props
431:46 - as well as the return type
431:48 - okay and inside of here this is we're
431:50 - actually going to have that on select
431:52 - image function and we're going to manage
431:54 - the selected file state from within here
431:55 - so let's go back to our new post form
431:58 - I'm going to close my directory as well
432:00 - and I'm going to actually copy this
432:02 - image
432:03 - over into this hook here
432:06 - just like this and I'm also going to
432:08 - grab that state selected file
432:12 - so let's put this at the top of our hook
432:16 - okay let's make sure we import use state
432:19 - from react and then at the bottom here
432:21 - we're going to return an object and that
432:24 - object is going to contain our selected
432:26 - file our set selected file as well as
432:29 - that function on select image and
432:31 - actually I'm going to rename this to on
432:34 - select file to sort of match the name of
432:37 - our hook here and that is it for our
432:38 - hook now we can reuse this function and
432:41 - state in both of these components for
432:43 - our image uploading all right so let's
432:45 - go back to our new post form and just
432:46 - refactor this to use that hook it's very
432:49 - very simple to do that so we can get rid
432:51 - of this selected file state here and we
432:53 - can get rid of this on select image
432:55 - function here I'll just leave it
432:56 - commented out for now I'll delete it
432:57 - once we actually have the hook
432:59 - implemented and just underneath this
433:01 - comment that outstate here I'm going to
433:03 - call that hook by saying const is equal
433:05 - to use select file
433:08 - then what I'm going to grab is selected
433:10 - file set selected file as well as on
433:13 - select file so those three things that
433:16 - we were returning from our hook then
433:18 - down here
433:19 - all we need to do is just change the
433:21 - name of this so I'm going to say on
433:22 - select image is going to be named on
433:24 - select file inside of image upload it
433:27 - will still be called on select image but
433:29 - we're passing it the on select file
433:30 - function from our hook as that value now
433:32 - we're done that is all we have to do to
433:34 - refactor this component to use discuss
433:36 - hook so now I can just delete this on
433:38 - select image function here delete this
433:41 - state where it is it yeah right here
433:43 - delete that and now our Hook is going to
433:46 - handle all that logic for us and we can
433:49 - test this out by actually creating a
433:50 - post so let's do this let's create a new
433:52 - post called testing hook testing out the
433:55 - hook we made and let's upload an image
434:00 - to make it that classic demo image we
434:02 - can see that the state is still
434:03 - functioning as we expect back to the
434:06 - post if I post it
434:12 - awesome so it functions exactly the same
434:14 - but the logic has now been extracted
434:17 - into this use select file hook and we
434:19 - can reuse this exact same Hook when
434:21 - we're doing our image uploading for our
434:23 - about Community thing over here so very
434:25 - clean reusable code
434:28 - okay so we can close the new push form
434:29 - because we are done with that we don't
434:31 - need it and we can start implementing
434:32 - this in our about component here all
434:35 - right so let's actually create the UI so
434:36 - the user can input an image here so
434:39 - underneath the create post link but
434:41 - still within our stack we're going to
434:43 - create a new section here but we only
434:44 - want to display the section two
434:46 - moderators of this community and in
434:48 - order to do that we need to check if the
434:50 - current user's ID matches the ID of the
434:54 - creator of this community so we're going
434:56 - to need to grab the user from our use
434:58 - off State hook so we can say const user
435:00 - is equal to use odd State pass it our
435:03 - auth object from Client app and down
435:05 - here the condition we want to check here
435:07 - is that user.uid is equal to the
435:10 - community
435:11 - data.creator ID
435:13 - if that is the case we want to show some
435:16 - sort of fragment with admin options here
435:19 - so inside of this fragment I'm going to
435:21 - start off with having a divider from
435:23 - Chakra okay then underneath the divider
435:25 - I'm going to create another stack
435:28 - and the stack is going to have a spacing
435:31 - of one as well as a font size of just 10
435:35 - point here inside of the stack we are
435:37 - going to have the text that actually
435:39 - says admin
435:40 - and we're going to make the font weight
435:42 - of this 600
435:45 - underneath the admin text we're going to
435:46 - create another Flex container which is
435:48 - going to actually have the upload image
435:50 - button and this is going to have an
435:52 - align of Center
435:54 - and a justify
435:56 - of space between
436:00 - all right inside of this Flex container
436:02 - we're going to have text and the text is
436:04 - going to say change image this is going
436:06 - to be the thing that the user actually
436:08 - clicks on to upload an image it's
436:10 - similar to the upload button from our
436:13 - new post form and if you remember from
436:15 - our new post form this thing has to
436:17 - actually implicitly sort of behind the
436:19 - scenes click on an actual file input
436:22 - that we're going to create in a second
436:23 - in order to prompt the user to upload an
436:25 - image from their computer so we're going
436:27 - to need to create another ref up here
436:29 - similarly to what we did with the new
436:31 - post form so I'm going to I'm going to
436:32 - create a ref called const selected file
436:35 - ref and this is going to be equal to use
436:37 - ref and again it's going to be of type
436:40 - string and it's going to be initialized
436:41 - as null all right and we're going to
436:44 - attach this to an actual file input in
436:46 - just a second but for now what we can do
436:48 - is change the appearance of this text so
436:50 - this text is going to have a color of
436:52 - blue 500.
436:55 - there's going to be cursor
436:57 - pointer
436:59 - okay and on Hover we want to make the
437:01 - text decoration
437:03 - underline
437:07 - awesome so this kind of looks like that
437:09 - and then r on click this is where we're
437:11 - actually going to click on that selected
437:14 - file graph I'm just going to leave it
437:15 - blank for now until we create that input
437:17 - and attach the ref to it and this is
437:18 - going to be the exact same thing we saw
437:20 - already under this text we are going to
437:22 - check for the existence of a community
437:24 - image if it exists we will display it if
437:26 - it is not we will just display the
437:28 - classic Reddit icon there sort of as a
437:30 - default but the community image can
437:32 - exist in two ways it can either be
437:34 - inside the community data dot image URL
437:37 - or if the user is adding a new file
437:39 - there is going to be an image inside of
437:41 - our selected file state which we're
437:43 - going to bring in from our hook so let's
437:45 - do that right now so at the top of our
437:47 - about component let's call the hook
437:50 - use a file sorry use select file and
437:54 - from in here we can grab selected file
437:56 - set selected file as well as on select
438:00 - file perfect so now down here this is
438:03 - defined and then if this is the case if
438:05 - we have either of these two things we
438:08 - actually want to show an image from
438:10 - Chakra
438:11 - so inside of our source of this image we
438:13 - want to show one of these two things and
438:16 - I'm going to add the statement we want
438:17 - to show the selected file or Community
438:20 - data
438:22 - dot image URL and this is basically
438:24 - going to first check for the existence
438:26 - of a selected file if it does not exist
438:28 - it will show the community image URL the
438:31 - reason I'm putting the selected file
438:33 - first is because the selected file sort
438:35 - of takes priority over a potential
438:38 - existing image URL because they're
438:39 - updating it right they want to see a
438:40 - preview of the updated image that
438:42 - they're uploading so that is why we are
438:44 - checking for the existence of this first
438:45 - and if it does not exist it will go and
438:48 - render this okay and we're just going to
438:50 - apply a few minor styling to this image
438:52 - so we're going to say border radius is
438:54 - going to be equal to full and our box
438:56 - size
438:57 - is going to be equal to 40 pixels
439:01 - okay and then we're going to give this a
439:03 - alt of community image and this is not
439:08 - happy because we do not have anything
439:09 - for the falseness of our ternary
439:12 - operator and if we do not have either of
439:15 - those two things what we want to display
439:17 - is our classic Reddit icon so I'm just
439:20 - going to paste that over from my
439:22 - completed project just like this and
439:24 - we're going to need to import this icon
439:25 - as well f a Reddit and that is coming
439:28 - from react icons F A let's throw that up
439:30 - here with the other icons
439:32 - so now if I save this we can see that we
439:35 - have no image for the community yet so
439:37 - it's just displaying this icon but if I
439:39 - click on an image to upload it oh I
439:41 - haven't created the file input yet
439:43 - um so let's do that now that's pretty
439:45 - pretty critical so underneath this Flex
439:48 - container here but still inside of our
439:50 - stack we're going to add another
439:52 - condition to check for the existence of
439:54 - a selected file and if there is a
439:57 - selected file meaning that the user is
439:59 - attempting to upload a new image we want
440:02 - to show the text save changes so it's
440:06 - like okay you've selected a file you
440:07 - want to upload for this community image
440:09 - click on this to save these changes and
440:11 - actually upload this file and I'm
440:13 - actually going to quickly add some
440:14 - loading State for the uploading so we
440:16 - can see that the uploading is in
440:17 - progress and I'm going to come up here
440:18 - and create a new state variable called
440:20 - uploading image set uploading image and
440:24 - this is going to be equal to use State
440:26 - and initialize it as false then down
440:29 - here I'm going to cut this out for just
440:31 - a second and I'm going to add a ternary
440:33 - operator inside of here that's going to
440:35 - check if the image is in progress of
440:37 - uploading so if it is we want to display
440:39 - a spinner
440:42 - okay and if it is not we want to display
440:45 - that text just like this
440:48 - and when we actually upload an image we
440:50 - will see what this looks like and then
440:52 - on this text we are going to give it a
440:53 - cursor of pointer and then we're just
440:56 - going to add an on a click to the save
440:57 - changes text which is going to call a
440:59 - function that is going to actually go
441:01 - upload this image to our Firebase
441:02 - storage and update our community
441:03 - document with that image URL so we can
441:06 - actually create just the definition of
441:08 - that right now so just coming to the top
441:09 - here I'm just going to create a function
441:12 - called on update image and we're going
441:14 - to make this an asynchronous function
441:16 - and just leave it empty for now but then
441:19 - we can add that to the on click of this
441:21 - to save changes text here on update
441:24 - image
441:26 - perfect now the only missing piece is
441:29 - that file input and I'm going to paste
441:31 - that over because it's the exact same as
441:33 - the other one just throw it under here
441:35 - and just change this to on select file
441:39 - okay and this is complaining
441:41 - um oh I think I put the wrong type on
441:45 - this here okay yeah so this is supposed
441:46 - to be HTML input element my apologies
441:49 - the string type was for the selected
441:52 - file state itself make sure that the
441:55 - selected file ref is a ref of type HTML
441:58 - input element my apologies for that then
442:00 - we can just pass it a initial value of
442:02 - null and that should satisfy that ref
442:05 - texture error down here okay perfect now
442:07 - all I have to do is write this on update
442:09 - image function
442:10 - so let's come back up here and start
442:12 - writing this out so this function is
442:14 - going to be very similar and actually a
442:16 - lot simpler than our handle create post
442:18 - function all we have to do is take this
442:20 - file upload it to our storage and then
442:22 - update our community Dock and then we
442:24 - just have to update our recoil state to
442:26 - use that new image URL so that the fun
442:29 - end actually updates with that new image
442:31 - so let's create a try catch block here
442:33 - at the very top here I'm just going to
442:34 - add a guard that says if there is no
442:36 - selected file let's just return so that
442:38 - we don't try to do anything or upload
442:40 - anything if there is a not a file
442:42 - through upload then in our log here
442:44 - let's just log on update image error
442:49 - and log the error and then also under
442:51 - here I'm just going to set uploading
442:54 - image to be true
442:56 - so the first thing we're going to do is
442:57 - take the file that the user is trying to
442:59 - upload and upload it to our storage
443:01 - bucket so we can create an image ref
443:04 - and we can use our ref function from
443:06 - Firebase storage and we can pass this
443:08 - our storage instance from Client app and
443:11 - the path to this image inside of our
443:14 - storage we are going to store it at
443:16 - communities
443:17 - slash Community data dot ID
443:22 - slash image so pretty much the exact
443:25 - same path as the post image just for
443:27 - communities now all right now to
443:28 - actually upload this thing to our
443:30 - storage we can use the same function
443:31 - upload string from Firebase storage pass
443:35 - it our image ref pass the file that
443:38 - we're actually going to upload inside of
443:39 - this image ref and then also the format
443:42 - of the file which is going to be data
443:44 - URL and as a reminder this is coming
443:46 - from the format we told our file reader
443:48 - to format this image in after it's
443:50 - successfully uploaded we can get the
443:52 - download URL for that image
443:54 - so download URL is equal to a weight get
443:57 - download URL
443:59 - and this is a function from Firebase
444:00 - storage and then pass it our image ref
444:04 - now all we need to do is update our
444:07 - community document in firestore so we
444:08 - can say await update doc
444:11 - the first argument is going to be our
444:13 - document reference to our community doc
444:15 - so we're going to say Doc pass it our
444:17 - firestore instance from Client app The
444:20 - Collection we're interested in is
444:21 - communities
444:22 - and the ID of the document we are
444:24 - updating is community data.id and as a
444:27 - second argument to our update.function
444:29 - we pass it an object with the updates we
444:32 - want to make to this document in that
444:33 - case and in this case we want to update
444:34 - our image URL on our community documents
444:37 - to be download URL
444:40 - just like this now we just need to
444:42 - update our recoil state to actually show
444:44 - this new image on our front end and so
444:46 - in order to update our community State
444:48 - value we're going to need to bring our
444:50 - set Community State value function in
444:52 - from recoil so you can come up here and
444:54 - grab that from recoil saying set
444:56 - Community State value is equal to use
444:59 - set recoil State pass it our communities
445:02 - atom
445:04 - from our atom file then down here after
445:07 - all of this successful uploading we can
445:09 - call set Community State value to take
445:11 - the previous value of the state spread
445:13 - it okay and now we want to update the
445:16 - image URL of our current Community State
445:18 - so the field we're updating on our
445:20 - community state is going to be current
445:22 - community and we want to change the
445:24 - image URL of our current community so we
445:26 - can spread the previous value of current
445:29 - Community those are only changing a
445:30 - single field on a current community and
445:33 - that field is image URL and we want to
445:35 - update this to be download URL just like
445:38 - this if you satisfy the currently
445:40 - freaking out typescript I'm going to
445:42 - type cast this updated current Community
445:44 - object to be a community one last thing
445:46 - we're missing is just the set loading
445:49 - set uploading image to false at the very
445:51 - bottom here all right so let's give this
445:53 - a go and see what happens so if I go to
445:55 - our Firebase storage we should after
445:58 - uploading an image see a new folder in
446:00 - here called communities and then we can
446:01 - go in there and we should be able to see
446:03 - the new image and also in our firestore
446:05 - database if I go to that Community
446:08 - document for status Community we should
446:10 - see actually with Chinese group I think
446:12 - it was called we should see a new field
446:15 - on here called image URL so let's give
446:17 - this a go and see what happens so I'm
446:19 - going to change the image okay it's not
446:22 - even opening the thing which is not good
446:24 - oh I think I've got to add okay yeah so
446:27 - I forgot to add the on click for this
446:29 - change image text to actually click on
446:32 - that input which is pretty important so
446:34 - let's make this callback actually click
446:36 - on this thing so we can say selected
446:38 - file
446:40 - ref.current dot click
446:42 - just like this okay now this should work
446:45 - so let's click on this
446:47 - and just choose this Google logo because
446:49 - it's nice and round
446:50 - you can see it show up here so now we
446:52 - actually have a selected file in state
446:54 - so it's showing the same changes text
446:56 - here and now when I click on Save
446:57 - changes we can see the loading State
446:59 - happens and now we should have uploaded
447:03 - that to our storage so let's go find out
447:05 - and we're going to make the change in a
447:06 - second to actually make this update here
447:08 - well let's go see if the image first
447:09 - successfully uploaded okay yeah so
447:11 - Shadow's group now has an image URL
447:13 - which is perfect and if I go to storage
447:16 - the image should be there because the
447:17 - successful storage upload is sort of a
447:19 - prerequisite for that image URL yes or
447:22 - Shadows group
447:23 - image and you can see that it is the
447:25 - Google logo there perfect super cool so
447:28 - now let's figure out how to actually get
447:30 - it to display in here and actually if I
447:32 - refresh this page it should show up in
447:34 - the header there
447:35 - let's see
447:37 - okay so it's not but let's go fix this
447:40 - so inside of our header
447:42 - so what we're going to do inside of here
447:43 - is instead of using the community data's
447:45 - image URL we are going to use our
447:47 - community's state value dot current
447:49 - Community Dot imageurl and the reason
447:52 - there is no image is because there is no
447:54 - Source on this image so the source of
447:55 - this is going to be that exact thing
447:57 - Community State value
448:00 - no autocomplete very nice dot current
448:03 - Community dot image URL so now we can
448:05 - see we have this ginormous image here so
448:07 - I'm just going to add some additional
448:09 - stylings to make that better and I'm
448:12 - trying to copy over the settings from my
448:13 - completed project
448:15 - um feel free to do that as well so this
448:17 - is going to look like this
448:20 - and that is going to actually control
448:21 - the size of that image and make it
448:24 - appear really nice like this and the
448:26 - reason we're using the image URL from
448:28 - our current Community State and not from
448:29 - Community data is because in our about
448:32 - component inside of our on update image
448:34 - function we are updating our current
448:36 - Community state with the latest image
448:37 - URL so the community data variable
448:39 - inside of our header is not going to
448:41 - have that updated image unless we
448:43 - refresh the page and it's getting it
448:45 - from the database but to show the
448:47 - updates without refreshing we would have
448:49 - to use the latest value which is going
448:50 - to be stored in our community State
448:52 - value dot current community so now let's
448:54 - try this again if I change the image and
448:57 - I change it to this thing of me because
448:59 - that's the only other image I have if I
449:01 - save changes we should see this update
449:03 - immediately without having to refresh
449:05 - the page once it's done uploading so
449:07 - like to save changes
449:10 - perfect and without refreshing the image
449:13 - updates inside of our header that is
449:15 - super cool and now we can actually
449:16 - change the image of our community if we
449:19 - are the moderator
449:21 - so technically inside of our header
449:23 - component here you could remove the
449:25 - community data altogether and just
449:27 - simply access Community State value dot
449:29 - current Community because they are
449:30 - pretty much the same thing because on
449:32 - our index page of our community we took
449:34 - that data and we stored it in current
449:36 - Community State however the component
449:38 - renders slightly faster when we use
449:40 - Community data because that data is
449:42 - coming directly from the server and it
449:43 - is rendered on the server rather than
449:45 - having to wait for the state to be
449:46 - populated by that Community data on the
449:49 - client side which actually happens
449:50 - completely after the component Mount
449:52 - because we put it in a use effect
449:54 - causing a bit of a delay because the
449:56 - component actually has to re-render once
449:58 - the state has been updated which causes
450:00 - this sort of glitch on the UI for the
450:02 - case of the image though if we want that
450:04 - functionality for this header image to
450:06 - update without having to refresh the
450:07 - page then we do have to use the
450:10 - communitystatevalue.com community to
450:12 - make it dynamic because we actually
450:13 - update that state on our client side
450:14 - when we change the community image but
450:16 - for the other field I'm just going to
450:17 - leave it as Community data but I just
450:19 - wanted to touch on that in case you were
450:20 - wondering okay and one other thing that
450:22 - I noticed that I want to change is
450:24 - inside of our about component here I
450:26 - realize that I'm using router.query dot
450:28 - Community ID and I honestly have no idea
450:30 - why I did that because we have access to
450:32 - that same exact thing on community data
450:35 - dot ID so we do not actually need the
450:37 - router at all some of you probably
450:39 - noticed that so my apologies for that we
450:42 - do not actually need the router in this
450:44 - file so we can just get rid of it
450:45 - completely and this create posting we'll
450:47 - do the exact same thing
450:49 - so we are completely done with this
450:51 - about Community component and we're
450:52 - going to move on to the voting
450:54 - functionality and I think the voting
450:55 - functionality was probably the most fun
450:57 - feature to build in this app because it
451:00 - contains some really interesting logic
451:01 - and I'm pretty excited to build it here
451:03 - and show you guys how to do it okay so
451:05 - in our use post hook if you remember
451:07 - from a while ago we actually defined
451:09 - this function on vote but it is
451:11 - currently empty and now we are going to
451:13 - write this thing out and get into the
451:15 - nitty-gritty of the voting functionality
451:17 - all right so before we get into actually
451:19 - writing the code I just want to briefly
451:20 - touch on how we are going to be modeling
451:22 - the data for our voting functionality so
451:25 - we're going to do something kind of
451:26 - along the lines of what we did for the
451:28 - community Snippets because if you look
451:30 - back at the community Snippets we had
451:31 - this sub collection on the user so we
451:34 - knew what communities the user was in
451:35 - and then on the community documents we
451:38 - had this field called number of members
451:40 - and so when a user would join a
451:42 - community we would add a document to the
451:45 - user's Community Snippets sub collection
451:47 - and then we would go also update the
451:49 - number of members of the community we're
451:51 - going to do something similar here
451:52 - because if you look at our posts we have
451:54 - a field on the post called the vote
451:56 - status which needs to be updated every
451:58 - time a user votes on this particular
452:00 - post and on our users we are going to
452:02 - create another sub collection called
452:04 - post votes and the post vote
452:06 - subcollection is going to allow us to
452:08 - know which posts the user has voted on
452:11 - and in which communities and then we can
452:13 - add documents remove documents or edit
452:15 - documents in this collection depending
452:16 - on what the user is doing doing and how
452:18 - they're voting and then all we need to
452:20 - do is just go and actually update the
452:21 - associated post with the new vote status
452:24 - depending on what vote the user has
452:26 - placed so you're going to be dealing
452:28 - with batch rights again because you're
452:29 - going to be updating two documents post
452:31 - votes as well as the post and we only
452:33 - want both of these things to succeed or
452:36 - none of them at all so we're going to be
452:37 - using a batch write for this logic okay
452:40 - so let's talk about this on vote
452:41 - function now so I'm going to come over
452:42 - to our demo and just go to the home page
452:44 - here and when a user tries to vote on a
452:47 - post there are three really important
452:50 - things that we need to think about the
452:52 - first thing is well what is the value of
452:54 - this vote is it a nut Vote or a down
452:56 - vote probably important to know the
452:58 - second thing is has this user voted on
453:01 - this post before
453:03 - and the third thing and this sort of
453:05 - ties into the second is if this user has
453:08 - voted on this post before are they
453:10 - changing their vote to be the opposite
453:12 - or are they removing their vote
453:13 - altogether all right so this post for
453:15 - example I have not voted on this post so
453:17 - I can upvote it or I can download it so
453:19 - let's upload it okay and now if I want
453:20 - to vote on this post well I have voted
453:22 - on this post already so there are really
453:24 - only two options here I can remove my
453:26 - existing Vote or I can change my vote
453:28 - from an upvote to a down vote and so
453:30 - this type of logic is important when
453:32 - we're writing out our function because
453:33 - it dictates how we change this value you
453:36 - can see that if I go from an up vote to
453:38 - a down vote it changes by two and if I
453:40 - go from a downward to knock out it
453:42 - increases by two and if I remove an
453:44 - existing upvote it goes down by one and
453:46 - if I remove an existing down vote it
453:49 - goes up by one so this is the logic
453:51 - that's sort of going to drive the
453:52 - structure of this on-road function over
453:54 - here okay so for now this function is
453:56 - going to take in three important
453:57 - arguments the first one is going to be
453:59 - the post that the user is trying to vote
454:01 - on that is going to be a type post
454:03 - second one is going to be the actual
454:05 - vote value which is going to be a number
454:07 - and the third one is going to be the
454:08 - community ID in which this post is in
454:11 - that's going to be a string so we can
454:13 - write out this logic with just a few
454:15 - simple if else statements so we can say
454:17 - if this is a new vote
454:19 - do something otherwise do something else
454:22 - and this else statement represents an
454:25 - existing vote meaning that they have a
454:27 - voted on the post before and they're
454:30 - making a modification to that vote and
454:32 - sorry ignore this undefined error I'm
454:33 - just trying to explain the concept here
454:35 - but inside of this else statement there
454:37 - are two things that can happen the first
454:39 - thing is the user could be removing
454:41 - their vote and this would just basically
454:43 - be like going from an upvote to neutral
454:46 - or down
454:48 - to neutral
454:49 - that is what I mean by removing the vote
454:51 - the second thing that can happen though
454:53 - is that there are flipping
454:55 - their mode and this would look like
454:57 - going from Up
454:58 - to down or down
455:01 - to up and both of these scenarios can be
455:04 - handled by another if else statements we
455:06 - can say if removing vote
455:10 - then do something otherwise they must be
455:13 - flipping their vote so do this other
455:15 - thing
455:17 - so in the case of a new vote the first
455:19 - thing we want to do is either add or
455:21 - subtract one to or from the post dot
455:26 - vote status that is going to be the
455:28 - first thing in our batch rate the second
455:30 - part of our batch is going to be
455:31 - creating a new postal document on the
455:34 - user's postcode subcollection so in the
455:36 - case of removing an existing vote we are
455:38 - again going to be adding or subtracting
455:40 - one from the post dot vote status
455:43 - whether or not we're adding or
455:44 - subtracting depends on the voting
455:46 - direction that we are moving in the
455:48 - second thing in the past is going to be
455:49 - deleting the post vote document
455:52 - and in the case of flipping a vote we
455:55 - are again going to be adding and
455:56 - subtracting from the vote status but in
455:58 - this case it is going to be 2 because
456:00 - we're flipping it so we need to add or
456:01 - subtract 2. and this is the part that
456:03 - tripped me up the most when I was
456:05 - working on this logic here uh it's kind
456:08 - of weird at first at least for me it was
456:09 - uh the second thing in the batch is
456:11 - going to be updating the existing post
456:14 - vote document in the database so this is
456:17 - a high level overview of this function
456:19 - and I just wanted to spend a few minutes
456:21 - to walk through this because I think
456:22 - that will help when we're actually
456:23 - writing out the code rather than just
456:25 - diving right into it and being like Oh
456:26 - yeah here this is how it works I think
456:28 - this is much better for you to grasp so
456:30 - um if I'm wrong I'm sorry but that is my
456:34 - assumption so now we can actually start
456:36 - working on writing out the code all
456:37 - right you guys so the first thing we
456:38 - need to do is go back to our post State
456:40 - atom and actually create a spot where we
456:43 - can store all of the postcodes from the
456:45 - database so if we go back to our post
456:47 - atom file here you may have remembered
456:49 - that I briefly mentioned the post vote
456:51 - section here on our post date and so now
456:53 - we're actually going to implement that
456:55 - here okay so we can re-enable this and
456:56 - I'm actually going to create a
456:58 - typescript type for our post votes so
457:00 - we're going to need this in other files
457:02 - so I'm going to write export and I'm
457:03 - going to say type host vote and on our
457:06 - post vote we're going to have an ID of
457:08 - type string we're going to have a post
457:10 - ID which is going to be the ID of the
457:11 - post that this book belongs to and we're
457:13 - also going to have the community ID
457:16 - of the community that this post is in
457:18 - and then of course we need the value of
457:20 - the votes I'm going to create a new
457:21 - parameter called load value and this is
457:23 - going to be a number and it's going to
457:25 - be a 1 for not vote and a minus one for
457:27 - a download okay then down here on our
457:30 - postage we can declare this as an array
457:32 - of post photos just like this and then
457:34 - on our default State we can just
457:36 - initialize post votes as an empty array
457:38 - and now typescript is all happy and we
457:39 - are set up and we have a place to store
457:41 - our post votes that we can actually use
457:43 - them so let's go back to our use post
457:45 - hook and start working on this function
457:46 - okay so inside of this function I'm
457:48 - going to create a try catch block as
457:50 - usual and I'm going to move all of this
457:52 - logic inside of our try block because
457:54 - it's all of these stuff that we want to
457:55 - attempt to do and then I'm going to fix
457:57 - this spacing here and then if there is
457:59 - an error we will log in the error so
458:01 - let's say on vote
458:03 - error and then log the error so we're
458:05 - going to protect our voting feature
458:07 - against users who are not authenticated
458:09 - so at the very top of our function we're
458:11 - going to check for a user and if there
458:14 - is not an authenticated user we are
458:16 - going to open the authentication model
458:18 - but we will add that at the very end
458:20 - because it's very simple so at the very
458:22 - top of our try block we are going to
458:23 - destructure the vote status from our
458:26 - host that we're voting on so I'm going
458:28 - to grab the vote status key here just
458:31 - like this because you're going to use it
458:32 - throughout all of this logic so the way
458:35 - we can tell if the user has voted on
458:37 - this post before or not is we can search
458:39 - through the user post votes array in our
458:41 - post item State here that we just added
458:43 - and see if there's a vote with the post
458:45 - ID that matches this post if there is
458:48 - not an existing vote we are in the case
458:50 - of a new vote if there is an existing
458:53 - vote then we are in the case of the
458:54 - existing vote okay so let's actually
458:56 - create this so we can say const existing
458:58 - vote this is going to be equal to post
459:01 - State value dot post votes dot find we
459:05 - want to search through this array for a
459:08 - specific vote and the very next thing
459:09 - we're going to do after writing out this
459:11 - function is actually go and fetch those
459:13 - post votes from the database and
459:15 - populate this array with them but for
459:16 - now just assume that this array is
459:18 - populated with the user's post votes and
459:20 - so we can iterate through every single
459:21 - vote and we can check is there a vote
459:23 - with the post ID that is equal to this
459:26 - particular post's ID and so the find
459:28 - function is either going to return to us
459:30 - the existing Vote or it's going to
459:32 - return undefined and then we can change
459:34 - this to if there is no existing vote
459:36 - which is equivalent to saying that it is
459:38 - a new vote and also above all of these
459:40 - if else statements I'm going to create
459:42 - our batch instance using our right batch
459:44 - function from firestore pass it our
459:46 - firestore instance from Client app the
459:49 - next variable I'm going to create is
459:51 - going to be a copy of the post argument
459:53 - just like this I'm going to create an
459:55 - object and just spread the post inside
459:57 - of it and I'll explain why I'm doing
459:58 - this in just a second here underneath
460:00 - here I'm going to create updated post
460:02 - which is going to be a copy of our post
460:05 - State value dot posts array and then
460:09 - finally I'm going to create a updated
460:10 - post votes array which is going to be a
460:12 - copy of Hope statevalue dot post votes
460:16 - okay and so the reason we're creating
460:18 - these copies of these particular State
460:20 - variables is because these three things
460:23 - post posts and post votes are all going
460:26 - to need to be modified depending on what
460:29 - piece of the logic that we enter here
460:30 - and so basically we create copies of the
460:33 - current value of State modify these
460:35 - copies throughout these if else
460:37 - statements and then at the very end we
460:39 - can take those modified values and use
460:41 - them to update our state
460:44 - and this creating copies of state and
460:47 - mutating the copies rather than the
460:49 - state itself is very common in react and
460:52 - it ensures you avoid mutating State
460:55 - directly because we definitely don't
460:56 - want to do that because it can have
460:57 - unwanted side effects and so this
460:59 - pattern of creating copies of State
461:01 - modifying those copies and then updating
461:04 - state with that modified copy is a very
461:06 - common thing to do in react and the last
461:08 - variable I'm going to create up here is
461:10 - going to be called vote change and I'm
461:12 - going to initialize it to be the value
461:14 - of a vote and this vote change variable
461:15 - represents the amount that we are either
461:18 - going to add or subtract to our post
461:20 - documents vote status and again it's
461:23 - going to be modified throughout this
461:25 - logic here depending on what is
461:27 - triggered within the logic and then at
461:29 - the very end we will write that update
461:31 - to our post document in the database so
461:33 - it starts off as the value of vote and
461:35 - depending on what logic is triggered
461:37 - it's going to be modified and then we're
461:39 - going to apply that change at the very
461:40 - end and if all of this is a massive blur
461:43 - and you're just like what is going on
461:45 - don't worry once we actually start
461:47 - writing this out it will become a lot
461:48 - more clear this function is probably the
461:50 - most like difficult to wrap your head
461:51 - around in the entire build
461:53 - um just give it some time let it absorb
461:55 - and it should make sense with time all
461:57 - right so let's start off with the case
461:59 - where there is no existing vote that is
462:01 - found meaning that this is a new vote so
462:03 - I'm just going to put that comment here
462:04 - and the first thing we're going to do
462:05 - inside this if statement is create a
462:07 - document reference to this new post vote
462:09 - doc that we're going to store in our
462:11 - database so you can create a variable
462:13 - called post vote ref
462:15 - and it's going to be a document
462:16 - reference so we can use our doc function
462:17 - for firestore and inside of here we want
462:19 - to create a collection reference to the
462:21 - collection that this document is going
462:22 - to be in and so we can pass this our
462:24 - firestore instance the collection that
462:27 - we're going to write this document into
462:28 - is going to be users and now we just
462:30 - need to provide a path to this user's
462:32 - post votes subcollection so we're going
462:34 - to need our user object from our use off
462:37 - State hook so let's bring it in up here
462:39 - we can say cons user is equal to use
462:41 - auth state
462:42 - pass out our hot instance okay now down
462:45 - here this path is going to be user.uid
462:49 - slash post votes
462:52 - so we are writing a document to the
462:54 - user's post subcollection so you can
462:56 - save that and now we can actually create
462:58 - the new vote object that is going to be
463:00 - stored in this document as well as on
463:03 - our front-end state so we can call this
463:04 - new vote this is going to be of type
463:06 - post vote
463:09 - and the ID is going to be our postvote
463:11 - ref.id the post ID is going to be the
463:14 - click on posts ID so post.id and we can
463:18 - add the bang operator here to tell
463:19 - typescript that we know that this is
463:21 - going to be a defined value inside of
463:22 - this function we can add the community
463:24 - ID and then the vote value of this vote
463:27 - is going to be the vote argument pass
463:29 - the function so it's either going to be
463:31 - 1 or -1
463:34 - and now we can add the document creation
463:36 - operation to our batch so we can say
463:38 - batch.set and the document we want to
463:40 - set is post vote ref and the data we
463:43 - want to store in the document is new
463:45 - vote
463:46 - and if you recall in order to make the
463:48 - batch actually perform these operations
463:50 - we do need to call the function
463:51 - batch.commit but we are actually going
463:54 - to call this at the very end of all of
463:56 - this logic because depending on which if
463:58 - else statements are triggered in here
463:59 - the batch is going to contain different
464:01 - operations so you're going to let it be
464:03 - modified throughout this logic and then
464:05 - at the very end we're going to commit
464:06 - all of the tasks that it has been
464:08 - assigned now let's actually update the
464:10 - post vote status so we're going to
464:12 - modify this updated post object because
464:14 - if you remember it's just a copy of post
464:16 - and it's this updated post that we want
464:18 - to make the updates to so we can say
464:20 - updated post
464:22 - dot vote status and we want to update
464:24 - this value to be the current vote status
464:26 - which we grabbed off of the post from up
464:29 - here so this represents the current vote
464:31 - status and we want to add the value of
464:33 - vote to it so either going to be adding
464:34 - 1 or adding minus one depending on if
464:36 - the upvote or downvote okay and we also
464:39 - want to add this new vote to our post
464:41 - vote state so we can take our updated
464:43 - post votes
464:45 - and we basically want to append this new
464:47 - vote to it so we can set this equal to
464:49 - an array and inside of this array we
464:51 - want to take all of the existing
464:53 - postcodes so we can spread the value of
464:55 - itself and then just add a new vote to
464:58 - the end of it and make sure when you
464:59 - declare updated post votes up here that
465:02 - you use the let keyword here I believe I
465:04 - initially had this as const but you will
465:05 - get an error down here if you try to
465:07 - reassign it if you use the const keyword
465:09 - here make sure you do use let to allow
465:11 - you to resign this variable here okay
465:13 - and if it is a new vote the value of
465:15 - vote change is going to remain the value
465:18 - of vote so either 1 or -1 we do not need
465:20 - to modify it inside of this if statement
465:23 - because we're going to use this vote
465:24 - change value in updating our post
465:27 - document in our database which we're
465:28 - going to add to our batch operations at
465:31 - the very end of all of this if else
465:33 - statements so we do need to make sure
465:35 - we're updating this accordingly but in
465:37 - the case of a new vote we do not need to
465:38 - modify it it's just it's just going to
465:40 - remain the value of vote okay let's talk
465:42 - about the case of an existing vote so in
465:45 - the case of an existing vote whether
465:46 - we're removing or flipping the vote we
465:48 - are going to be doing some sort of batch
465:50 - right involving the post vote document
465:52 - in our database so we can still create a
465:55 - reference to that so we can say post
465:56 - vote ref however this is going to be a
465:58 - reference to an already existing
466:00 - post-work document before we were
466:02 - creating a reference to a newly created
466:04 - document that doesn't exist yet whereas
466:06 - this one does exist so we can pass this
466:08 - our firestore instance the collection
466:10 - that we're interested in is still users
466:12 - and the path to this existing post hope
466:14 - document is going to be on the user.uid
466:17 - document slash post votes slash existing
466:22 - vote.id
466:24 - all right let's handle the case of the
466:26 - user removing their existing vote so we
466:29 - can tell if a user is removing their
466:31 - vote if the vote that they're trying to
466:33 - make matches the value of the already
466:36 - existing vote okay so as an example let
466:38 - me upload this post here so I just
466:40 - created a new post vote with a vote
466:42 - value of one because it was an upvote so
466:45 - if I click on this out vote again and
466:46 - send a value of 1 to our function that
466:49 - is going to be equal to the already
466:50 - existing vote value which is one so
466:53 - that's how we can tell if the user is
466:54 - removing their vote
466:58 - okay we can say if the existing vote dot
467:02 - vote value is equal to the vote that
467:04 - they're trying to place that means
467:06 - they're removing their existing vote
467:07 - okay so now we want to add or subtract
467:10 - one to or from the postpone status so
467:12 - let's do that we can say a biddedpost
467:14 - DOT vote status is equal to the current
467:17 - vote status
467:18 - but this time we want to subtract vote
467:21 - because we want to go in the negative
467:24 - Direction so let me upload this post if
467:26 - I upvote it again I do not want it to go
467:29 - to 210 I actually want it to go down to
467:31 - 208 right so we want to go in the
467:33 - opposite direction
467:35 - on the flip side if I download this if I
467:38 - download it again I do not want it to go
467:39 - to 206 I'm removing my downloads this
467:42 - actually should go back up to 208. so
467:45 - we're going in the negative Direction so
467:46 - that is why we are subtracting the value
467:48 - of both here and now we want to update
467:50 - our post vote state but now we want to
467:52 - remove the existing vote from our post
467:54 - votes so you can set the SQL to
467:56 - updatedpost votes dot filter
467:59 - and our filter condition is going to be
468:01 - that the vote ID does not equal to the
468:03 - existing vote.id so this is going to
468:06 - remove the existing vote from the post
468:08 - votes array and we're storing that
468:10 - filtered version inside of updated
468:11 - postcodes which are going to use later
468:13 - to update state so now we want to delete
468:15 - the post vote document so we can add
468:17 - that delete operation to our batch by
468:19 - saying batch dot delete and the
468:21 - documented delete is post vote ref
468:24 - and also in the case of removing the
468:26 - vote we want to negate the value of vote
468:29 - change here so we're just going to
468:30 - multiply it so we're going to say vote
468:31 - change times equals negative 1. and
468:35 - we're just going to negate it and if you
468:37 - don't understand the complete purpose of
468:38 - this vote change variable yet don't
468:40 - worry it will make a lot more sense when
468:41 - we actually get down to writing the
468:43 - batch update for updating the post
468:45 - documents vote status now let's talk
468:47 - about the case of the user flipping
468:49 - their vote in this case we're going to
468:51 - be adding or subtracting 2 from the post
468:54 - vote status so if I upvote this post
468:56 - here if I flip my upvote to a downvote
468:59 - it should not go back down to 208 it
469:01 - should go down to 207 so it's decreasing
469:03 - by two and on the flip side if I go from
469:06 - a downvote to an upvote it increases by
469:09 - two so to update our post vote status we
469:11 - can take our updated post dot vote
469:14 - status and we want to update this to be
469:16 - the current vote status and we want to
469:18 - add 2 times the value of the vote that
469:22 - the user is trying to make so if I
469:24 - download this vote is going to be
469:26 - negative 1 but I want to subtract 2 from
469:29 - 209 so I want to do 2 times negative 1
469:31 - which is negative 2. so I want to do 209
469:34 - minus 2 which is going to be 207 in the
469:38 - opposite direction it'd be 207 plus 2
469:42 - times 1. so 209. I find this kind of
469:44 - confusing at first I don't know about
469:45 - you uh but yeah I don't know it was kind
469:47 - of weird to wrap my head around the
469:48 - first time I was doing it okay and now
469:50 - we want to update our post votes array
469:51 - but this time we're not adding 1 like in
469:54 - the case of a new vote and we're not
469:55 - removing one like in the case of
469:57 - removing the vote we are editing one and
470:00 - so in order to edit one we need the
470:02 - index of this vote inside of the post
470:04 - votes array and JavaScript has a very
470:06 - handy array function called find index
470:08 - where we can find the index of a
470:10 - particular item in an array and then we
470:12 - can use that to update the value at that
470:14 - index so I'm going to create a variable
470:15 - called vote index so I want to call the
470:18 - function find index on the post notes
470:20 - array so I can say post date value
470:23 - dot postvotes dot find index
470:27 - and this is going to iterate through all
470:29 - of the votes and we want to find the one
470:30 - where the vote ID is equal to the
470:32 - existing book ID so we are finding the
470:35 - existing vote so now we know the index
470:37 - at which this existing vote sits inside
470:40 - of this postbooks array so now we can
470:42 - actually update that value of post
470:43 - floats array to be the updated vote so
470:45 - we can say updated post votes
470:47 - at vote index
470:49 - and we want to set this equal to a new
470:52 - vote and that new vote is going to be
470:54 - everything inside of existing vote but
470:56 - with a updated vote value of the vote
470:59 - that the user is trying to place and now
471:02 - all we have to do is add our post update
471:04 - operation to our batch rights so we can
471:06 - say batch dot update and the document we
471:10 - want to update is post for ref and the
471:12 - update we want to make is to the vote
471:14 - value field and we want to update the
471:16 - value to be vote
471:18 - okay so now at the end of all of these
471:21 - if else statements we want to actually
471:23 - update our post document in our database
471:25 - so now we can create a reference to our
471:28 - post document so that we can add the
471:30 - update statement to our batch operations
471:32 - so you can say post wrap is equal to Doc
471:35 - pass in our firestore instance we want
471:37 - to access the post collection and the ID
471:39 - of this document is post.id and again we
471:43 - can have the bang operator here to tell
471:44 - texture that we know that this is going
471:46 - to be a valid value and now we want to
471:49 - add the post update operation to our
471:51 - batch so we can say bash shut update we
471:53 - want to update the post wrap and the
471:56 - update that we want to make is to the
471:58 - vote status field and this is where that
472:01 - vote change value is going to come in we
472:04 - want to do update vote status to be the
472:07 - current value of vote status plus vote
472:10 - change so the value of vote change is
472:12 - going to be different depending on which
472:14 - if else statement we triggered in here
472:16 - it could be -2 it could be plus two
472:18 - could be one it could be minus one
472:20 - depending on where we ended up in those
472:22 - statements it was modified and now at
472:24 - this point we have all of the batch
472:26 - operations set up so we can actually
472:28 - execute them by saying await batch dot
472:31 - commit and this is going to write those
472:33 - updates to our database so now all we
472:36 - have to do is update our front-end
472:38 - recoil State and we're going to do that
472:40 - using these copies up here that we
472:43 - created because the copies were modified
472:45 - and updated throughout all this logic
472:46 - and now we can take those values and
472:48 - actually store them in state and our
472:50 - state will contain all of the updates
472:52 - necessary so we can call our set post
472:54 - date value function take the previous
472:56 - value of state and we're going to update
472:58 - a few values here we're going to update
473:00 - our post array and the updated value of
473:02 - this is going to be updated posts
473:06 - and we also want to update our post
473:08 - votes and our updated value of this is
473:10 - going to be updated host votes
473:13 - awesome so now I hope the idea of making
473:16 - these copies and then modifying the
473:18 - copies and then using those copies to
473:20 - update State at the very end makes more
473:23 - sense now that we've kind of written out
473:24 - this logic okay so this is completely
473:26 - fine and we are updating State except we
473:28 - are missing one thing
473:30 - this updated post array has not yet been
473:32 - updated to contain this newly updated
473:36 - post so if you remember we created this
473:38 - variable called updated post which just
473:40 - represents the post that we're voting on
473:42 - and depending on what type of vote the
473:44 - user placed we updated that post vote
473:46 - status right we added one to it added
473:48 - two to it subtracted to it whatever we
473:50 - updated the vote status but we did not
473:52 - take that newly updated post and store
473:55 - it inside of the updated post array so
473:58 - updated post does not yet contain the
474:01 - newly updated and modified host with the
474:04 - new vote status okay so in order to
474:06 - update the single post element inside of
474:09 - the updated post array we are going to
474:11 - need access to that post index pretty
474:14 - much the exact same thing we had to do
474:16 - with our vote here we needed the vote
474:18 - index to update that vote inside of post
474:20 - vote we need the post index so that we
474:23 - can update the value at that index so we
474:26 - can find the host index very similarly
474:28 - to how we found the vote index above we
474:30 - it's a post index is going to be equal
474:32 - to post statevalue dot posts dot find
474:35 - index
474:37 - okay and then we want to iterate through
474:38 - all of the post items and find the one
474:41 - where the ID is equal to the post that
474:43 - we're voting on ID so post dot ID just
474:47 - like this so now we can use this index
474:49 - to actually update our updated post so
474:51 - we can say updated posts at post index
474:54 - is going to be equal to updated host
474:57 - just like that and now updated post
475:00 - contains the post with the latest vote
475:02 - status value so I think we are all done
475:05 - with the logic of our on vote function
475:07 - the last thing we need to do is just go
475:09 - back to our post component and if you
475:11 - remember we had this prop that we
475:13 - defined here user vote value and we just
475:15 - temporarily passed it as undefined
475:17 - because we had not built the voting
475:18 - logic yet so now we can actually make
475:20 - this the correct value and also we're
475:22 - getting a typescript compiler error here
475:24 - for on-vote thing I think we just have
475:25 - to fix the um the type declaration for
475:28 - our function but we will do that in a
475:30 - second Let's ignore that for now okay so
475:31 - now that we actually have an existing
475:33 - post votes array we can basically search
475:35 - through that array and and see if there
475:38 - is a vote with the post ID of this item
475:41 - that we're currently iterating through
475:42 - is ID so that would look something like
475:44 - this so we could say post date value
475:47 - dot post about dot find so we can
475:51 - iterate through all of the votes and see
475:52 - if there's one with a post ID that
475:54 - matches this particular post items ID
475:57 - so then if the find function does end up
475:59 - finding a vote we can grab that vote
476:01 - vote value and if it does not find it
476:04 - then user vote value will just be
476:05 - undefined and it will behave as if the
476:07 - user has not voted on the post which is
476:08 - exactly what we want now we can just
476:10 - quickly fix this on vote compiler error
476:12 - so I just have to go into our post item
476:14 - and yeah change this to be the proper
476:16 - function declaration type so if you just
476:18 - go to our use post I'm just going to
476:19 - copy these argument types here and bring
476:23 - them over to our post item
476:25 - paste them in there and then this
476:27 - function is going to return void okay
476:30 - now that should satisfy X group over
476:32 - here and what's going on in here okay
476:35 - now now we just have to change the
476:37 - actual way these on remote functions are
476:38 - being called so I'm just going to change
476:40 - it to a callback function that calls on
476:42 - vote and we need to pass it three
476:44 - arguments and the first one is the
476:45 - actual post the second one is the actual
476:47 - vote value so for an upvote it is going
476:49 - to be one and the third one is going to
476:51 - be the community ID which is going to be
476:53 - post doc Community ID
476:55 - perfect we can just copy this
476:57 - and paste it on our downvote one here
476:59 - but we want to change the value of our
477:02 - vote down here to be negative one our on
477:05 - vote function I think is complete we
477:07 - have successfully passed the user vote
477:09 - value to the post item component so that
477:12 - we can tell if we have voted on this
477:14 - post and what that value is so I think
477:16 - we are ready to give this a go so let me
477:18 - try this out and see what happens if I
477:20 - click on this
477:21 - you can see that we are seeing those
477:23 - changes and what happens if I flip my
477:25 - vote
477:26 - perfect if I remove my vote
477:29 - awesome so it seems to be working let's
477:31 - go back to the back end and see what
477:34 - should be happening over there so I'm
477:35 - going to come over here and split screen
477:37 - this with our app okay so what we want
477:41 - to see is inside of users if I vote on a
477:45 - post I should see
477:47 - um the post vote subcollection appear so
477:49 - I'm going to find the Shad Mary one here
477:51 - so let's go back to our app so if I vote
477:54 - on this
477:55 - and then I just refresh this on the
477:57 - first time when that collection is
477:58 - created you have to refresh because the
478:00 - collection doesn't exist but after that
478:02 - it is in real time so yeah you can see
478:03 - that there is a post votes collection
478:05 - here
478:06 - um and it has the post ID of that post
478:08 - it has the vote value and then if I flip
478:10 - this vote
478:11 - you can see that that is being updated
478:13 - if I remove the vote it's deleted how
478:16 - cool is that I think that's so cool
478:17 - awesome okay and the other thing that
478:19 - should be changing is if I go look at
478:21 - the post
478:23 - we should see the vote status has been
478:26 - updated so that's the other thing that
478:28 - is in our batch right remember so if I
478:30 - downvote this it updates to negative one
478:32 - a vote goes back to one if I remove the
478:34 - vote zero awesome so our batch rights
478:37 - are working we are able to actually vote
478:39 - on posts and the vote status of the post
478:42 - document is updating as well how cool is
478:45 - that
478:46 - let's put this back over here all right
478:48 - you guys so the last thing we need to
478:49 - add here is just a quick function that
478:51 - is going to actually initialize the
478:53 - value of this post votes array by going
478:56 - to the database and getting this user's
478:58 - post votes for the current community and
479:00 - I briefly mentioned before that we were
479:02 - going to do that because right now the
479:04 - post quotes is just an empty array and
479:06 - so if I were to vote on a post the array
479:09 - is populated but then if I refresh this
479:11 - page we can see that that vote is not
479:13 - going to be persisted because we do not
479:16 - go and get those user votes from the
479:17 - database so the one persists because the
479:19 - post document was updated but in terms
479:21 - of our post votes we have not retrieved
479:23 - them yet so we actually can't see that
479:25 - we have indeed voted on this post so to
479:27 - fix that we just need to add a function
479:29 - that is going to be called as soon as we
479:31 - land on a community page to actually go
479:33 - and get all of our votes to the posts in
479:35 - this community so it's pretty simple and
479:37 - we are going to add that inside of our
479:39 - use post hook here so at the bottom I'm
479:41 - going to create this function called get
479:42 - community post votes and it's going to
479:45 - be asynchronous and it's going to take
479:47 - in a community ID which is of type
479:50 - string and it is going to go and
479:53 - actually fetch all of this user's post
479:56 - votes for the current community that
479:57 - they are currently in hence the name get
480:00 - community post vote and it should be
480:02 - plural books and votes with an ads so we
480:04 - can just write a simple query for our
480:06 - post votes collection and then store
480:07 - those documents inside of our post votes
480:09 - array in our recoil state so let's write
480:11 - that out so we can say const post votes
480:14 - query is equal to query so bringing the
480:17 - query function from firestore and the
480:19 - first argument is going to be the
480:20 - collection that we want to query so we
480:22 - can pass in our collection function
480:23 - which is going to take in our firestore
480:25 - instance the collection we are querying
480:27 - is users and the path to the postcode
480:30 - subcollection is going to be user.uib
480:33 - slash post votes so the second argument
480:36 - to our query is going to be a where
480:38 - Clause because we only want to find the
480:41 - post votes where the post votes
480:43 - Community ID matches the community ID
480:46 - that we're interested in so in this case
480:48 - chatty's Group whatever Community we're
480:50 - in we only want the post votes for that
480:52 - community so the field we're interested
480:54 - in on our coursework documents is
480:56 - community ID and we want to check if the
481:00 - community ID is equal to this community
481:02 - ID that is being passed in as an
481:05 - argument just like this
481:07 - okay so now we can pass this query to
481:10 - our get docs function to actually go and
481:12 - get this set of documents from our
481:14 - database you can say post vote
481:17 - stocks is equal to a weight get Docs and
481:21 - we can pass in our post votes query
481:23 - and this is going to return to us an
481:25 - array of firestore documents and we want
481:27 - to extract all of the data out of each
481:29 - of those documents so we can create a
481:30 - new array called post votes and we can
481:33 - take our post docs and map through all
481:36 - of them so we can say
481:37 - postcodeocs.docs dot map and for each
481:40 - one of those documents we want to return
481:42 - a new JavaScript object with the ID
481:46 - as well as the extracted data from that
481:50 - document just like this
481:52 - and now we can store this post votes
481:56 - array in our recoil postcode state so
481:59 - you can say set Post State value take
482:01 - the previous value
482:03 - spread it and the only field we want to
482:05 - update here is post votes and the value
482:08 - in this case is going to be post Focus
482:12 - and to satisfy the 10th trip compiler
482:14 - here we can just headcast this to be an
482:16 - array of post votes so make sure that
482:18 - that type imports from our post item
482:21 - file so that is it for this function
482:23 - here but we have not yet called it so we
482:26 - want to call this function as soon as
482:27 - the user lands on any given Community
482:29 - page and so to do that we can create a
482:31 - use effect make sure that imports from
482:33 - react
482:34 - and inside of our use effect we can call
482:36 - our get community post votes function
482:38 - and then we can pass in the community ID
482:41 - so we can get the community ID from our
482:43 - communities atom inside of the current
482:46 - community so if you come up to the top
482:48 - here
482:48 - of our hook we can use our recoil hook
482:51 - to grab the value of the current
482:53 - community so I'm going to create a
482:55 - variable called current community
482:57 - and I'm going to use the hook use recoil
483:00 - value
483:01 - and I'm going to pass to meet
483:03 - communities
483:04 - atom Community State atom and I want to
483:08 - access the current Community just like
483:10 - this
483:11 - now down here
483:14 - I can pass this as an argument to that
483:16 - function so I can say current Community
483:18 - dot ID
483:20 - just like this
483:21 - now typescript is complaining and we're
483:23 - going to fix that by adding a guard
483:25 - above this function to prevent calling
483:27 - this function at all if there is no
483:29 - current Community because it doesn't
483:30 - make sense to get community post votes
483:32 - if there is not a current community so
483:34 - what we can do is add a dependency here
483:36 - of the current community and so every
483:39 - time the current Community changes this
483:41 - is going to trigger and we want to make
483:42 - sure there is a defined Community before
483:44 - calling this function so we can just add
483:46 - an if statement here to return out of
483:48 - this function if there is no current
483:50 - Community dot ID
483:54 - and that will make Tech strip happy down
483:56 - here now there is one more dependency we
483:58 - need to add here because if we look at
483:59 - our community post votes it depends on a
484:02 - valid user ID as well we do not want to
484:04 - call this function if the user has not
484:06 - been logged in or if the user has not
484:08 - yet been loaded from our auth service so
484:10 - we can add a dependency here of the user
484:12 - and in our if statement here we can add
484:15 - if there is no user or no Community ID
484:18 - return and do not call this function
484:20 - because well this function is pretty
484:22 - useless without either of those two
484:25 - things okay so now if I actually refresh
484:27 - this page my post votes are going to be
484:30 - fetched from the database as soon as
484:32 - this component loads and then they are
484:34 - stored in the post vote state so that I
484:36 - can see which post I have voted on on
484:38 - refresh so if I download this post and
484:41 - then I were to refresh
484:44 - we should see that vote as soon as the
484:46 - page refreshes which we do awesome and
484:49 - so now every time we go into a different
484:51 - Community this use effect is going to
484:53 - trigger because the value of current
484:55 - Community is going to change to the new
484:56 - community and it's going to go get the
484:58 - post votes for that new community so
485:01 - that is how this logic Works cool and
485:03 - just for fun just we can see more
485:04 - exciting values other than 1 minus one
485:07 - and zero I'm going to go through this
485:08 - post here and just modify this to like
485:11 - 450 462 and come back here and save it
485:16 - so that we can actually see this value
485:18 - modify it's a little bit more exciting
485:21 - so now if I download this it goes down
485:22 - to 460. if I go back up 462 and I move
485:25 - that vote 461 downvote remove the
485:29 - downvote very cool the logic seems to be
485:31 - working I love it I think this voting
485:33 - functionality is super cool it is
485:36 - another extremely important pillar of
485:38 - the Reddit functionality without voting
485:40 - Reddit would not be Reddit so so we have
485:43 - successfully implemented voting
485:44 - functionality and we have written out
485:46 - probably the most complicated function
485:48 - of this build so congratulations for
485:50 - making it to here I hope that I was able
485:52 - to explain that in the most clear way
485:54 - possible if anything is unclear please
485:57 - ask in the Discord I would love to help
485:59 - you or just comment down below but I
486:01 - hope it makes sense and now we can move
486:03 - on to other things so now we can
486:05 - actually protect this feature against
486:08 - unauthenticated users by adding a simple
486:10 - check at the top here to see if they are
486:12 - logged in and if they are not we can
486:13 - open the modal and this is exactly what
486:15 - we've done with other features like
486:16 - trying to a community it's the exact
486:18 - same thing but there's another
486:19 - interesting thing related to this that
486:20 - we need to take care of so watch what
486:22 - happens when I log out
486:24 - so I logged out but my votes are still
486:27 - there and that doesn't really make sense
486:28 - our community Snippets were cleared
486:30 - because it no longer knows that we're in
486:32 - this community because there is no user
486:33 - signed in but our votes are still there
486:36 - so we definitely want to clear those out
486:38 - of state when the user logs out so the
486:40 - way we can do that is by just adding
486:42 - another simple use effect to listen to
486:45 - changes in our user object so let's
486:47 - create that so we can say use effect
486:50 - and we can add a dependency here of user
486:52 - so this is going to trigger every time
486:54 - the user object changes and if on one of
486:57 - those changes there is no user
486:59 - we want to clear the post vote state so
487:02 - we can say set or state value take the
487:05 - previous value and we want to update
487:07 - this state
487:09 - to have empty post votes so we can set
487:11 - post votes equal to an empty array just
487:14 - like this
487:15 - okay so you saw that they cleared there
487:16 - so I'm just going to add a comment here
487:18 - for clarity clear user post votes
487:21 - all right so now what happens when we
487:23 - log back in let's see if it actually
487:25 - goes and fetches our post once for us
487:28 - okay so it does not it's weird right
487:30 - because we have voted on these posts
487:32 - it's not picking that up it's not
487:33 - fetching them it fetched our Snippets
487:35 - because it knows we're joined into here
487:36 - but it's not getting our vote okay so it
487:39 - fetched our Snippets because it knows
487:40 - that we're in this community but it did
487:42 - not go and fetch our vote and the reason
487:44 - that is is because on this use effect
487:46 - here we have a dependency of current
487:48 - Community but we are not getting to this
487:50 - get community postcards function because
487:52 - we are not getting past this if
487:53 - statement and the reason that is is
487:55 - because if you remember when we logged
487:57 - out we reset our entire Community State
488:00 - atom meaning that current Community is
488:03 - currently null therefore there is no
488:06 - current Community dot ID so this if
488:08 - statement is protecting against running
488:11 - this function so you just need to
488:12 - slightly refactor the log out flow here
488:15 - because on the logout we only want to
488:17 - clear the community Snippets we don't
488:19 - really want to reset the entire
488:20 - Community State atom so if we go back to
488:22 - this user menu here this is where we did
488:24 - that on logout we just called this reset
488:27 - Community State function and completely
488:28 - cleared that Adam so I'm just going to
488:31 - comment this out here and what we're
488:33 - going to do instead is go into our use
488:35 - Community data hook and basically do
488:37 - something similar to what we're doing
488:38 - with the post votes here we're going to
488:41 - add it use effect with a listener on our
488:43 - user and then if there is no user we're
488:45 - just going to clear these Snippets only
488:47 - not the entire Community State itself so
488:50 - let's go and do that so inside of our
488:52 - use Community data hook we already have
488:54 - a use effect that is listening to
488:55 - changes in the user and then if there is
488:57 - indeed a valid user it will go get the
489:00 - Snippets for that user so all we need to
489:02 - do is just refactor this if statement
489:03 - very slightly so instead of returning
489:05 - what I'm going to do is inside of this
489:07 - if there is no user we want to set our
489:09 - community State value to be the previous
489:12 - value
489:15 - but with empty my Snippets basically the
489:18 - exact same thing we're doing with our
489:20 - post votes over here clearing them out
489:22 - if there is no user and then at the end
489:24 - of this we can return just like this so
489:27 - now when the user logs out we are only
489:29 - clearing these Snippets we are not
489:31 - clearing the current Community State so
489:33 - then when we log back in it will
489:35 - actually go get our post votes so let's
489:37 - see if this works so I'm going to log
489:39 - out
489:39 - and I'm just going to refresh to reset
489:42 - everything
489:45 - so if I log back in it should know that
489:47 - we have joined this community and it
489:48 - also should pick up the votes on these
489:50 - posts here so let's try this so let's
489:52 - log in
489:56 - perfect so it works it went and got our
489:58 - Snippets and it also got our votes now
490:00 - let's see if when we log out it clears
490:02 - those things
490:04 - perfect so all we're doing in these use
490:06 - effects here is just clearing all of the
490:09 - user specific data inside of our post
490:11 - date as well as VAR as well as our
490:13 - community state so the post votes as
490:15 - well as these Snippets should be cleared
490:17 - when there is no user perfect so I'm
490:19 - just going to go back to the user menu
490:20 - delete this and we actually do not need
490:23 - this reset Community State value
490:25 - function can close our user menu so now
490:28 - all we have to do is just add a simple
490:30 - check at the top here if the user is
490:32 - attempting to vote on a post and they
490:34 - are not locked in we want to prompt them
490:36 - to log in so we can say if there is no
490:39 - user.uid then we want to open the modal
490:42 - and in order to do that we're going to
490:43 - grab our set Automotive State function
490:46 - from recoil so we can say set off model
490:48 - state is equal to use set recoil and
490:51 - pass in our auth Moto State atom so make
490:53 - sure that Imports and then inside the
490:55 - safe statement here we just want to call
490:57 - that set off Motor State function and we
490:59 - want the state to be open
491:01 - as well as the view to be logged in and
491:05 - then we can return because we do not
491:06 - want to proceed so now if I try to vote
491:09 - on a post and I'm not logged in it is
491:10 - going to ask me to log in so now we can
491:13 - log in
491:15 - and once I log in it'll go and actually
491:17 - fetch that data for us which is super
491:19 - cool and then I can change my votes if I
491:21 - would like to awesome guys so we have
491:24 - successfully implemented the voting
491:25 - functionality into our app and we have
491:27 - written out probably the most
491:29 - complicated function of this entire
491:32 - build so congratulations for making it
491:34 - here I really hope that I was able to
491:35 - explain all of that in the most clear
491:37 - way possible but if anything is unclear
491:40 - please do ask in the Discord I would
491:42 - love to help you or just leave a comment
491:44 - down below and I'll also answer that but
491:45 - I do hope that it makes sense and that
491:47 - was a long Sprint we had to do to
491:50 - implement voting functionality but we
491:52 - are done and it is an essential part of
491:53 - Reddit without voting Reddit would not
491:56 - be Reddit so I am glad we have
491:58 - implemented it and we can now move on to
492:00 - other things all right you guys so the
492:01 - next thing we're going to work on is the
492:03 - single post page so if we go to our demo
492:06 - here we want to build the functionality
492:07 - so that we can click on posts like this
492:10 - and then it takes us to a page that is
492:12 - specific to that post and this is where
492:14 - we can see all of the comment comments
492:16 - on this post as well as comment
492:18 - ourselves and if you look at the URL up
492:20 - here it is at the route r slash baking
492:23 - slash comments slash post ID so this is
492:26 - the route we need to build and that is
492:28 - what we're going to do now so let's come
492:30 - back to our app here and if we just take
492:31 - a quick look at our post atom you may
492:34 - have remembered that we actually did
492:35 - Define the state for the selected post
492:38 - so selected post represents the single
492:40 - post that we are currently viewing so
492:42 - when I click on a post we are going to
492:43 - store that post inside of selected post
492:46 - and then when we're on this page here
492:48 - that is where we're going to read data
492:50 - from and also in our use post hook we
492:53 - did Define that function right here it
492:55 - is currently empty this is the function
492:57 - that is going to be called when we click
492:58 - on a post and all it is going to do is
493:00 - just take that post and put it into that
493:02 - selected post date it's a very simple
493:03 - four to five line function okay so the
493:06 - first thing we're going to do is
493:07 - actually create the page route for this
493:09 - page so again the route for this page is
493:11 - going to be r slash Community ID slash
493:14 - comments slash post ID so inside of our
493:18 - community ID folder we need to create
493:19 - another folder called comments and
493:22 - inside of our comments folder we can
493:23 - create our Dynamic post ID route so we
493:26 - can use our square brackets and inside
493:27 - here we can put PID dot TSX square
493:30 - brackets because again it is a dynamic
493:32 - route the post ID can change depending
493:34 - on what we click on okay then inside of
493:36 - here we can use our snippet and we can
493:38 - get rid of these props here
493:41 - and I'm going to rename this component
493:43 - to be host page just like this and we're
493:47 - not going to have any props we can get
493:48 - rid of that and that is good to go and
493:50 - then we can just add the text post page
493:52 - here so now if I go to this route here
493:55 - if I just go to R shatters Group slash
493:57 - comment slash some random posted it
494:00 - could be anything
494:01 - we should see this post-page text here
494:04 - and we do awesome now if we go back and
494:07 - look at the demo we can see again that
494:09 - it has the same layout as every other
494:11 - page so we can again use our page
494:13 - content layout component with our posts
494:16 - and comments in the left hand side and
494:17 - the about component in the right hand
494:19 - side once again the page content layout
494:21 - saves our lives and we do not have to
494:23 - write any more Styles we can just drop
494:25 - components in and it is easy peasy Plug
494:27 - and Play Let's go back to our app here
494:29 - and this is what we're going to do we
494:31 - can get rid of this div and we can
494:32 - return that page content layer component
494:36 - to make sure that imports from that file
494:38 - there then we can have our two left hand
494:41 - side right hand side fragments here okay
494:43 - and on the left this is where we're
494:44 - going to have the selected post as well
494:47 - as the comments for that selected post
494:50 - okay and then on the right hand side
494:52 - we're just going to have our about
494:54 - component
494:55 - and our selected post is going to be a
494:58 - component we have already created which
494:59 - is just post item and we're just going
495:01 - to pass it the selected post as the post
495:03 - prop so the first thing we're going to
495:04 - do is work on the post item for the
495:07 - selected post so we can reuse our
495:09 - prosthetic component like I was just
495:10 - mentioning so make sure that Imports and
495:13 - if you remember from our posts component
495:15 - which is the place for that map through
495:17 - all of the community posts and returns a
495:19 - post item we pass this a bunch of
495:21 - functions that come from our use post
495:23 - hook so again in this PID page we are
495:26 - going to need to bring in those
495:27 - functions from our so at the top here we
495:30 - can call our hook we can say use posts
495:33 - make sure all of this Imports and the
495:35 - values we're going to get from this hook
495:37 - are going to be posted value set post
495:39 - date value on delete post as well as on
495:43 - vote and we do not need the on select
495:45 - post function in this page here because
495:48 - we don't really need to select a post if
495:50 - we are already in the single page view
495:52 - so we are not going to pass the select
495:54 - post function to our post item component
495:56 - on this page like we were on the
495:58 - Community page so we do not need this
495:59 - from the hook now down here we can start
496:01 - passing in some of these props so the
496:03 - first thing we need to pass is a post
496:05 - and that post is going to be our
496:07 - selected post from our post date so you
496:09 - can say hostate value
496:11 - no autocomplete dot selected post and
496:15 - ignore these compiler errors for now we
496:16 - are going to deal with that our second
496:18 - prop is going to be our on vote function
496:19 - so on vote is equal to on vote on delete
496:23 - this is equal to on delete post save
496:27 - this so it reformats our user vote value
496:30 - is going to be the exact same we can do
496:32 - our host date value dot postvotes dot
496:35 - find and we want to iterate through all
496:37 - these items and look for a vote with the
496:40 - post ID that matches the postatevalue
496:42 - dot selectedpost dot ID perfect and then
496:47 - if there is one we can grab the vote
496:49 - value just like that
496:51 - okay the user is Creator we are going to
496:54 - check if the user's ID matches the
496:57 - selected post Creator ID so we are going
496:59 - to need to bring our user in up here
497:01 - from our use off State hook so current
497:03 - user is equal to use off State passes
497:05 - our auth object from Client app
497:08 - now our user is Creator prop is going to
497:10 - be the Boolean that the user's ID is
497:13 - equal to the posted value dot selected
497:15 - post dot Creator ID that is how we will
497:19 - know if this user is the owner of this
497:21 - post and typescript is currently
497:23 - complaining because the selected post is
497:25 - initialized as null and to prevent this
497:27 - we can wrap this component in the
497:30 - condition that we only want to show it
497:31 - if there is actually a valid truthy
497:35 - selected post so we can save this and
497:37 - it's still complaining because on select
497:40 - post is missing okay so we want to go to
497:43 - our post item and we want to make the on
497:45 - select post function an optional prop
497:47 - because again this is only going to be
497:49 - passed to the post item on the Community
497:52 - page not in the single post page and
497:54 - that should satisfy the typescript
497:56 - compiler on this page awesome so now we
497:59 - have a happy component we currently do
498:01 - not have a selected post because we have
498:03 - not done anything inside of our on
498:05 - select post function but when we do it
498:08 - will show that post so let's go do that
498:10 - now let's go to our use post hook and
498:12 - actually work on this function it's a
498:14 - very simple function so this function is
498:15 - going to take in an argument which is
498:17 - going to be the post we are clicking on
498:19 - and it's going to be of type post and
498:21 - all we want to do inside of here is take
498:23 - that post and put it into the selected
498:25 - Post State so we can say set post date
498:28 - value
498:29 - and the only value we want to update in
498:31 - our state in this function is going to
498:33 - be selected post and we want to set it
498:35 - equal to the past and post and when the
498:37 - user clicks on the post we actually want
498:39 - to take them to that page so we can use
498:42 - our router to do that so we can bring in
498:44 - our router up top so we can say cons
498:46 - router is equal to use router from next
498:48 - router then down here inside of our on
498:51 - select post function we can use the
498:53 - router to direct the user to that path
498:55 - so we can say router.push and the route
498:57 - we want to take them to is forward slash
498:59 - R forward slash then the community ID
499:02 - which can be accessed on post dot
499:05 - Community ID then slash comments slash
499:10 - post dot ID and that is how we can take
499:15 - them to that route and I think we added
499:18 - this to the on click of the post item if
499:20 - I remember correctly so I'm just going
499:22 - to close some of these files here
499:24 - um if you go to our post item I think we
499:26 - did add this to the on click okay yeah
499:29 - we did we're gonna need the changes a
499:30 - bit though because we need to pass in
499:32 - some arguments so what we're going to do
499:33 - is change this on click to a callback
499:35 - that is going to call our on select post
499:38 - and as an argument we just needs to pass
499:40 - in that post typescript is unhappy about
499:43 - two things here so let's take a look at
499:45 - these so the first one is it saying that
499:46 - expected zero arguments but got one and
499:49 - that is because our type definition for
499:51 - our on select post function in our props
499:53 - does not say that we are taking in an
499:55 - argument so we can change that to be
499:57 - exactly like this
499:59 - and we should be good down there for
500:01 - that first compiler error the second
500:03 - compiler error is that it is saying that
500:05 - we cannot invoke an object which is
500:07 - possibly undefined just a few seconds
500:09 - ago we made the on select post function
500:11 - an optional prop meaning that if it is
500:14 - not passed the value for it is going to
500:16 - be undefined and typescript is basically
500:18 - saying well this can be undefined
500:19 - sometimes but you're trying to call an
500:21 - undefined instance so that is not
500:23 - allowed that's really bad and the way we
500:25 - can fix this is to basically just add
500:26 - some simple logic here to make sure that
500:28 - it is passed as a prop and that it is a
500:30 - defined function before calling it and
500:32 - we can do that similarly to how we do it
500:34 - with react components we can say on
500:36 - select post
500:38 - and on select post so we are so on click
500:42 - we are first going to check for a truthy
500:44 - valid value of on select posts if it
500:47 - exists then we will call this function
500:49 - here and so now when I go back to the
500:52 - Community page
500:54 - chatty's group
500:55 - I should be able to click on a post and
500:58 - take me to that post page so if I click
501:01 - on this it does indeed do that so we are
501:03 - on this page this is the ID of this
501:06 - particular post and I can go back and I
501:08 - should be able to click on another one
501:10 - perfect so it's functioning exactly how
501:12 - we want it and now this post is inside
501:14 - of the selected Post State here because
501:18 - our on select post function did that all
501:20 - right the next thing we're going to do
501:21 - is apply some very slight modifications
501:23 - to the style of this component if we are
501:26 - indeed on the single post page if you
501:29 - look at this demo here if I click on
501:31 - this post
501:32 - you can see that it's styled differently
501:34 - we don't have the great background
501:35 - number here the Border radiuses are
501:37 - slightly different there is no mouse
501:38 - hover because it's not really clickable
501:40 - so it is very very minor things that we
501:42 - have to go and modify inside of our post
501:45 - item component over here so let's do
501:46 - that quickly so inside of our post item
501:48 - the way we can tell whether or not we
501:50 - are on the single post page versus the
501:53 - Community page is if the on select post
501:56 - proc is passed because remember that we
501:59 - are only passing the on select post
502:01 - function as a prop to our post item
502:03 - component on the Community page we are
502:06 - not passing it on the PID page because
502:09 - we do not need to select the post any
502:11 - further than we have already selected it
502:12 - so that is how we can tell inside of our
502:14 - post item if we are on the single post
502:16 - page or the Community page if this is
502:18 - defined we are on the Community page if
502:21 - it is undefined we are in the single
502:24 - post page and that is how we are going
502:25 - to conditionally modify the styles of
502:27 - this component all right so applying
502:29 - this logic we can create a new variable
502:31 - called single
502:32 - post page
502:34 - which is going to be a Boolean that
502:36 - represents if we are on the single post
502:38 - page so this is going to be true if on
502:41 - select post is undefined okay so if
502:43 - there is no select post then it is true
502:45 - that we are on the single post page so
502:47 - that is how we can detect which page we
502:49 - are on and so the purpose of this
502:51 - variable is that we can use it inside of
502:53 - our Styles here to just conditionally
502:54 - apply certain Styles and there's only
502:56 - about four or five things you have to
502:58 - change here so it's pretty minor the
502:59 - first thing is going to be our border
503:00 - color so now we can get rid of this gray
503:02 - 300 and instead we're going to use a
503:04 - ternary operator to check the truthiness
503:07 - of our single post page variable so you
503:09 - can say single post page if this is true
503:11 - we want the Border color to be white and
503:15 - if it is false we want the Border color
503:16 - to be Gray 300. perfect the next thing
503:20 - is going to be our border radius so if
503:22 - we are in the single post page view
503:24 - then we want the order rate is to be
503:25 - four pixels four pixels zero pixels zero
503:29 - pixels and if you are not we just want
503:31 - it to be four pixels and as for our
503:33 - hover styling we do not want to apply a
503:35 - border color if we are hovering in the
503:37 - single post page so you can say single
503:39 - post page if we are we do not want the
503:43 - hoverboard color if we are not we do
503:46 - want it and we want to be Gray 500. so
503:49 - now if I hover we're not seeing that
503:51 - there and we can do the exact same thing
503:53 - to our cursor so for our cursor we can
503:55 - say single post page if that is true we
503:58 - do not want a cursor so we're going to
503:59 - use the keyword on set if it is false we
504:02 - want pointer
504:04 - perfect so now we do not have that
504:07 - cursor on this page now there are just
504:09 - two more things we have to change and
504:10 - they're both on this loading container
504:12 - here so for our background if we are on
504:15 - the single post page we want a
504:18 - background of none and if we are not we
504:20 - want a background of gray 100 okay now
504:22 - you say live background disappear which
504:24 - is perfect and the very last thing is
504:25 - the Border radius so you can have the
504:27 - ternary operator once again if it is
504:29 - true we do not want a border radius and
504:31 - if it is false we want the important
504:33 - radius of 3 pixels zero pixels zero
504:36 - pixels three pixels all right and that
504:38 - is it for our styling modifications okay
504:41 - so what we need to do now is make two
504:43 - very very small tweaks to our on vote
504:46 - function because currently it will not
504:48 - work on this page if I try to vote on
504:50 - this post the voting works I'm able to
504:52 - actually place a vote but you can see
504:54 - that the vote status of the post is not
504:57 - working and so we do have to fix that
504:59 - all we need to do inside of our envelope
505:01 - function is check for the existence of a
505:04 - selected post because that means we are
505:06 - voting on these elected posts from the
505:07 - single post page and if there is a
505:09 - selected post we just want to update it
505:11 - to be that updated post it's very very
505:14 - simple it's a single if statement
505:15 - awesome so what we can do is come down
505:17 - here and just underneath this first set
505:20 - post a value function we can write an if
505:22 - statement to say if post a value
505:26 - dot selected posts if there is a
505:28 - selected post we want to call our set
505:30 - post date value function and update our
505:32 - selected post to contain that latest
505:35 - vote status which is going to be on the
505:37 - updated post object here so we can
505:39 - spread the previous value and update
505:41 - select a post to be updated post just
505:44 - like that so now if I click on this you
505:48 - can see that the vote status is indeed
505:50 - updating and our voting functionality
505:51 - does work okay now there's one more
505:53 - thing we have to change in this function
505:54 - and I'm going to show you what it is so
505:56 - if we go back to the Community page our
505:59 - slash chatties group we are going to see
506:00 - something very interesting when I try to
506:02 - vote when I click on the vote here
506:04 - you can see that it takes us to the
506:07 - Community page it does place the vote
506:08 - but it's still uh reroutes us to that
506:11 - page and we don't want to do that right
506:12 - we don't want to reroute the user if
506:15 - they are trying to get more on the post
506:16 - you only want to do that if they kind of
506:17 - click on the main body of the post here
506:19 - and so this can be solved by what is
506:21 - called event propagation so basically
506:23 - What's Happening Here is that these
506:24 - icons here have on click functions
506:26 - attached to them which is our on-boat
506:27 - function but our post item also has a
506:29 - non-click function and since the vote
506:32 - icons are children of the post item it's
506:35 - triggering both and we do not want to do
506:37 - that and we can stop this Behavior with
506:39 - what is called event propagation all we
506:41 - need to do to fix this is just accept
506:43 - the click event as an argument to our
506:45 - ongoing function and then call it
506:47 - function on that event called stop
506:48 - propagation and that will prevent the
506:51 - event from traveling upwards to the
506:52 - parent which in this case is our post
506:54 - item all right so let's add that as our
506:57 - first argument here so it's going to be
506:59 - called event and the type of this is
507:01 - going to be a react.mouse event because
507:04 - it is a click
507:05 - and the type of element that is
507:07 - generating this mouse event is going to
507:09 - be an SVG element because our our upvote
507:12 - downward icons are svgs and then as a
507:14 - second argument here we can pass the
507:16 - mouse event type and we can save this
507:19 - and we're actually going to copy this
507:21 - and we need to update our type
507:24 - declaration for this function inside of
507:27 - our post item here so we can just add
507:28 - this as that first argument save this
507:31 - hit and then we can come down to the on
507:33 - click functions here and all we need to
507:35 - do is in both of these cases I'm going
507:37 - to add the event
507:39 - as a first argument to this function
507:42 - here
507:43 - okay so let's go back to our ongoed
507:45 - function and at the very top the very
507:46 - first thing we're going to do is say
507:48 - event dot stop propagation
507:51 - now if I place a vote
507:54 - we are not being redirected because that
507:57 - event is stopped that in its tracks it
507:59 - is not traveling upwards and triggering
508:00 - the on click of the post item perfect
508:02 - but if I still click on the other parts
508:03 - of the post item it still takes us there
508:05 - which is great and now I can vote from
508:07 - it here very very cool voting Works in
508:10 - both pages and we also need to add our
508:12 - event.stoppropagation function to our
508:15 - delete function because right now if we
508:17 - were to click on delete it would do the
508:19 - exact same thing as the voting was
508:20 - before and it would actually take us to
508:21 - the single post page view which we do
508:23 - not want so I'm going to copy this event
508:25 - type from here because it's going to be
508:27 - the exact same in our delete function
508:29 - then inside of our post item since we're
508:31 - handling the delete in here I'm going to
508:33 - paste that event in here and we just
508:35 - have to change this from an SVG element
508:36 - to an HTML div element because that is
508:39 - the type of the component that's
508:41 - generating this event this time and the
508:42 - very first thing we want to do in this
508:43 - function is the exact same stop
508:45 - propagation function as it are on vote
508:47 - and also if I delete a post from the
508:50 - single post page view I wanted to take
508:52 - us back to the community page and so we
508:55 - already have this variable to detect if
508:57 - we are on the single post page so we
508:59 - just can add a quick few lines here to
509:01 - rewrap the user back to the Community
509:02 - page if they are indeed deleting the
509:04 - post from the single post page so we can
509:07 - bring in our router to do that we can
509:08 - say cons router is equal to use router
509:11 - then we want to do after the post is
509:13 - successfully deleted is checked are we
509:15 - on the single post page view
509:18 - if we are then let's push the user back
509:22 - to the Community page so we can do that
509:24 - by doing router.push forward slash R
509:26 - forward slash
509:29 - benypost.unity ID so now if I delete the
509:32 - post from the single post page view it
509:34 - should
509:35 - take me back to this page and the post
509:38 - should be gone so now I can delete them
509:39 - from both the pages so let's create a
509:41 - new one just to test this out I don't
509:42 - want to delete that other one because it
509:43 - has the image in there hey dude blah
509:45 - blah random post this okay so now if I
509:49 - delete this I can delete it from both
509:50 - Pages just like the voting functionality
509:52 - so perfect so let's come back to our
509:54 - post ID page here and I want to show you
509:55 - something interesting what happens if I
509:58 - refresh this page
510:00 - what do you think is going to happen
510:01 - let's find out
510:07 - okay so nothing is there so the reason
510:09 - this is happening is because our
510:11 - selected post state is actually
510:12 - currently null and why is this happening
510:15 - let's backtrack to the logic of how
510:17 - selected posts actually got to be not
510:19 - null in the first place
510:21 - if we go back to our post component
510:22 - which is again on the Community page we
510:26 - sent this on select post function to the
510:28 - post item component and then when we
510:30 - clicked on a specific item within this
510:33 - list
510:34 - it took that post and it put it in the
510:37 - selected Post State so right now our PID
510:41 - page only works if we're coming from the
510:43 - community page so if I click on this
510:45 - post yeah it works fine I can go back if
510:47 - I click on this it works fine but if I
510:49 - refresh this page our app is not yet
510:52 - built to get the selected post which is
510:55 - required if we are not coming directly
510:57 - from the community page we want to build
510:59 - it so that we can visit this link
511:00 - directly and view that post without
511:02 - having to come from the community page
511:04 - because that's probably a very common
511:06 - occurrence on Reddit there's probably a
511:08 - lot of times where people share the
511:09 - links to certain posts and then that
511:11 - person who received the link clicks on
511:13 - it and they're visiting reddit.com to
511:15 - only view that post they don't want to
511:16 - go to the Community page and then go to
511:18 - the Post page you know what I mean and
511:19 - as of right now we could not share this
511:21 - link with anyone because it would come
511:22 - to this link and be like oh well
511:23 - nothing's here cool so we just need to
511:25 - make a simple addition to account for
511:26 - this all we need to do is on our post ID
511:28 - page when a user visits this page we can
511:31 - check if there is a selected post inside
511:34 - of the post date value and if there is
511:36 - not meaning that they are visiting this
511:38 - page directly and not coming from the
511:40 - community page we can go and grab it
511:42 - ourselves from the database and then put
511:43 - it into the selected Post State directly
511:45 - from here and on this page we have
511:47 - everything we need to do that in the URL
511:49 - we have the post ID so we can query our
511:52 - database to grab that post and then put
511:54 - it into State and it'll function exactly
511:57 - as it was before all right so what we
511:59 - can do is create a function called Fetch
512:01 - post and this is going to be responsible
512:03 - for fetching a single post from the
512:04 - database and we are only going to call
512:06 - this sometimes and we're going to see
512:08 - what that sometimes is so let's get
512:10 - taken a post ID of type string
512:12 - and we're going to leave it empty for
512:14 - just a second and we want to check if we
512:17 - need to call this function as soon as
512:18 - this page loads and to do that we can
512:21 - use a use effect because this is going
512:22 - to run as soon as the component amounts
512:24 - to the dot and I'm just going to leave
512:25 - the dependencies MP for now so inside of
512:27 - this use effect we want to check a
512:29 - condition that will tell us whether or
512:30 - not we need to call our fetch post
512:32 - function and that condition is going to
512:35 - be if there is a valid post ID in the
512:38 - URL and there is no selected post that
512:42 - means we need to call this function
512:44 - fetch post and actually go and get this
512:46 - post because it means the user has
512:48 - refreshed the page or they are visiting
512:49 - our website for the first time on this
512:51 - link so we can grab the post ID from the
512:54 - URL using our next router so we can
512:56 - bring that in up here we can say const
512:58 - router is equal to use router
513:01 - and on this page we know that there is a
513:03 - parameter called PID inside of the
513:06 - router query and it's called PID because
513:08 - that is what we call as our Dynamic
513:09 - route in our square brackets so we can
513:11 - grab that value from our router.query
513:13 - object just like this
513:16 - PID
513:18 - now we can write the logic for that
513:19 - condition that I just said a few seconds
513:21 - ago so if there is a PID
513:24 - and there is no selected post inside of
513:27 - post date value
513:29 - then we want to call our fetch post
513:31 - function and pass it the PID as an
513:35 - argument and again typescript is
513:37 - freaking out here because the query
513:39 - parameter can technically be an array of
513:41 - strings or a string in our case it's
513:43 - always just going to be one host ID so
513:45 - we're going to type pass it to a string
513:47 - now because the logic inside of our used
513:49 - effect does depend on the router.query
513:52 - as well as the post date value selected
513:55 - post we do need to add those as
513:56 - dependencies in this use effect here so
513:58 - we can say router dot query as the first
514:01 - one and then post datevalue.selected
514:03 - post as the second one
514:06 - and that is it for this use effect all
514:08 - we have to do now is just write this
514:09 - function which is very simple it's just
514:10 - a single query to get this post from the
514:12 - database we can as usual create a try
514:14 - catch block and log the error if it
514:16 - occurs
514:17 - fetch
514:19 - post error
514:21 - log of the error and inside of our try
514:24 - block we want to actually attempt to go
514:25 - and get this pose document from our
514:28 - database so we can create a reference to
514:30 - that document so we can say post doc ref
514:32 - is equal to Doc
514:35 - tested our firestore instance from
514:37 - Client app the collection we are getting
514:39 - this document from is posts and the ID
514:41 - of this document is going to be the post
514:44 - ID argument of this function and then we
514:46 - can actually get this document from our
514:48 - database and we can create a new
514:49 - variable called postdoc and we can use
514:51 - await get doc
514:53 - and pass it our postdoc ref just like
514:56 - this okay and now we can take this
514:58 - result and update our selected post date
515:00 - to contain the data from this document
515:03 - so you can take our previous value of
515:05 - postage
515:07 - and we can update our selected post and
515:09 - the value our selected post is going to
515:11 - be a post object with an ID that is
515:14 - postdoc dot ID and all of the data from
515:18 - the postdocs data so we can spread
515:20 - postdoc dot data just like this and then
515:24 - to satisfy typescript we can Typecast
515:26 - this as a type host
515:29 - awesome and so I saved it and you can
515:31 - see that it did go get that post for us
515:33 - so now if I refresh this page it
515:36 - actually gets the post for us which is
515:38 - amazing we do not have to come from the
515:40 - community page and we are going to face
515:42 - this exact same refresh problem with our
515:45 - community data as well because that data
515:47 - is originally coming from the community
515:50 - page let's go take a look at that
515:51 - Community page just as a reminder
515:54 - so this page is server side rendered if
515:57 - you recall we are calling the get server
515:59 - side props function and we are getting
516:01 - the community data from the database and
516:03 - then we are passing that to this uh
516:05 - Community page here so then we take this
516:06 - community data put it into our current
516:08 - Community State right here as soon as
516:10 - this page renders and then we can access
516:11 - this stage from the other pages that
516:14 - need it like the submit page as well as
516:16 - the single post page that we're going to
516:18 - see so if I were to go to the single
516:20 - post page and we are going to display
516:21 - the about component on the right here if
516:23 - you remember right now the current
516:26 - Community data is populated with the
516:28 - strategies group data but if I refresh
516:31 - this page it is not going to be there
516:33 - because again the home Community page is
516:36 - responsible for completing that initial
516:38 - population so we can only access it if
516:40 - we come to this post page or the submit
516:43 - page after the Community page so if you
516:46 - visit these Pages directly it is not
516:47 - going to be there so we have the exact
516:49 - same problem that we had with our single
516:51 - post and we can do something extremely
516:53 - similar to what we did here where we
516:54 - just attack for a community ID in the
516:57 - URL and then we go okay there's a
516:59 - community ID in the URL but there's no
517:01 - current community in state that must
517:03 - mean we didn't come directly from the
517:05 - community page so we should go get the
517:07 - community data and put it in state
517:09 - directly from where we're trying to
517:10 - access it and let me further illustrate
517:12 - this by actually bringing in the about
517:14 - component here so I can show you how
517:15 - it's going to be there initially but not
517:18 - when we refresh the page similar to our
517:20 - post item in this page
517:22 - so we can bring in the Bell component
517:24 - and this requires the community data as
517:26 - a prop so we can grab that state from
517:29 - our use Community data hook up here
517:31 - use Community data make sure that
517:35 - Imports and the only value you want to
517:37 - grab from that hook in this component is
517:38 - going to be Community State value then
517:40 - down here we can pass the Community
517:42 - State value dot current Community as a
517:45 - prop okay and typescript is complaining
517:47 - because the current Community is
517:48 - initialized as null but we're telling
517:50 - the about component that we are always
517:52 - passing valid truthy Community data so
517:54 - what I'm going to do is add a condition
517:56 - here to say we don't want to show the
517:58 - above component unless we actually have
518:00 - Community State value dot current
518:03 - community so if I save this you can see
518:06 - that this component does appear over
518:08 - here because we actually do have current
518:09 - Community State right now because we
518:10 - came from our community page but watch
518:12 - what happens when I refresh this same
518:14 - thing is going to happen and it's not
518:15 - going to be there
518:18 - so it's not and you also notice that my
518:20 - post vote data is gone as well I have
518:22 - uploaded this post but after refreshing
518:24 - that data is gone and the reason our
518:26 - votes aren't there is because if you go
518:28 - to our use post hook we had that use
518:31 - effect that gets our votes in a certain
518:34 - Community only if there is a valid
518:38 - current community in state and as of
518:40 - right now that only occurs if we come
518:43 - directly from the community page
518:46 - so inside of our youth Community data
518:48 - hook we are going to do the exact same
518:50 - thing that we are doing here however we
518:52 - are going to be looking for a current
518:54 - Community as well as the community ID
518:56 - from the router.query in that case so
518:58 - let's go over to our use Community data
519:00 - hook so we're going to create that
519:01 - function called get community data and
519:04 - this is going to be asynchronous
519:06 - I'm just like our fetch post function we
519:09 - are only going to call this sometimes
519:11 - and that sometimes is when we are going
519:12 - directly to the single post page or
519:14 - directly to the submit page we do not
519:16 - need to call this function if we do
519:18 - indeed come from the community page
519:19 - because the community data will already
519:21 - be in state so underneath here let's
519:23 - create a use effect
519:25 - and I'm going to leave the dependencies
519:27 - empty for now
519:29 - and I don't know if we have our router
519:31 - imported in here yet we do not okay so
519:33 - at the very top here but we need our
519:36 - user I'm going to grab our router so
519:37 - cons router is equal to use router from
519:40 - next router and inside of this use
519:42 - effect
519:43 - we can grab the community ID parameter
519:47 - from our router.query so you can say
519:49 - router.query and we want to destructure
519:52 - the community ID which in this case is
519:54 - going to be Shadow's group now we can
519:56 - write the exact same if statement as we
519:57 - did before with the post we can say if
519:59 - there is a community ID
520:02 - and there is not a community State value
520:06 - dot current community
520:08 - we want to call that get community data
520:11 - function and we can pass in our
520:13 - community ID as an argument just like
520:15 - this and then up here we just need to
520:17 - accept that
520:20 - like that as an argument and then down
520:22 - here this is a similar router type error
520:24 - we had before we can just type cast that
520:25 - Community ID to a string and then up
520:28 - here we just have to write a simple
520:29 - query to go and actually get the data
520:31 - for this community all right so let's
520:33 - create a try block
520:35 - um first things first log the error
520:39 - good old error handling
520:42 - then inside of our try block we can
520:43 - create a reference to that Community
520:45 - document
520:47 - is equal to Doc firestore the collection
520:51 - we are interested in querying is the
520:53 - communities collection and the ID of the
520:56 - document we want is community ID now
520:58 - let's actually get that document from
521:00 - our database by calling our get doc
521:01 - function and we can call this community
521:04 - Doc is equal to a weight get doc pass in
521:09 - the document you want to get which is
521:10 - community.graph and now all we need to
521:12 - do is just put the data from this
521:14 - community dock inside of our current
521:16 - Community State so you can call set
521:18 - Community State value
521:20 - and when we want to update the current
521:23 - Community to be a community object with
521:25 - the ID of community.id and all of the
521:29 - data inside of that document so we can
521:32 - spread the community doc dot data and we
521:35 - can tell typescript that that this is
521:37 - going to be of type community
521:39 - okay and that is it for this function
521:41 - now all we have to do is just come down
521:43 - here and add those two dependencies to
521:45 - our use effect dependency array first
521:48 - one router.query and Community State
521:50 - value
521:51 - dot current community
521:53 - just like this
521:55 - so now if I save you saw that the
521:57 - community data is now in state so that
521:59 - about Community component appears and it
522:02 - went and got our post votes for this
522:04 - community because again if we go back to
522:06 - look at this use effect here this is
522:08 - listening to changes in the current
522:09 - community of state and it's like oh now
522:12 - there's actually a current Community
522:13 - there I should go get the votes for this
522:15 - community
522:16 - and so then it did and amazing so now I
522:18 - should be able to refresh this page
522:20 - without coming directly from the
522:21 - community page and it should just go and
522:23 - get that data for us perfect so that is
522:25 - great and that improves our user
522:27 - experience significantly and it makes
522:28 - our product realistic so now what I'm
522:30 - going to do is I think I forgot to put
522:31 - the about component on the submit page
522:33 - actually
522:35 - um yeah I did so let's go to our submit
522:37 - page here yeah I totally forgot to put
522:39 - that in there and so we are grabbing our
522:41 - community State value from recoil but
522:43 - I'm going to change this to get the
522:45 - Community State value from our use
522:46 - Community data hook so that it actually
522:48 - triggers this use effects here because
522:50 - the use effect is only going to trigger
522:52 - from that component if the component
522:55 - calls that hook so let's comment this
522:57 - out and we want to get the same value
522:58 - from our use Community data hook so make
523:01 - sure that Imports
523:03 - and we want to only grab the Community
523:04 - State value so if I save this this
523:06 - component is actually going to call that
523:08 - hook now which is going to trigger that
523:10 - use effect which should have populated
523:12 - the current Community State so if I look
523:13 - at this log over here so you can see
523:15 - that it did go and get the community
523:16 - data so now if I bring in our about
523:19 - component here
523:21 - drop it into our right hand side
523:22 - fragment and then as our community data
523:25 - product we can pass in Community State
523:27 - value
523:29 - dot current community
523:31 - and then same thing as our PID page we
523:35 - can add a guard here to only show this
523:36 - component if we do have a truthy
523:39 - community State value in state so if I
523:42 - save this now that component appears on
523:44 - the right hand side and I should be able
523:46 - to refresh this page
523:48 - and the same exact thing should happen
523:51 - perfect that is amazing we no longer
523:55 - have to come from the community page to
523:57 - see this data here and that is perfect
524:01 - so if I go into here
524:05 - if I sent the link to somebody now now
524:07 - they can actually see the post and see
524:08 - the community data and everything see
524:10 - the boats and whatever so awesome now
524:13 - our app is so much more versatile and
524:15 - realistic and Link sharing is possible
524:17 - so I'm glad we covered that because it
524:19 - is very very important and we can now
524:21 - move on all right you guys you are now
524:22 - going to move on to building the
524:24 - commenting on post functionality which I
524:27 - think is a super exciting feature and
524:28 - it's really fun to build and it's pretty
524:30 - much the exact same thing as creating a
524:31 - post but it's actually easier because we
524:32 - don't have images to deal with the first
524:34 - thing I want to talk about is how we are
524:35 - going to model this data in our database
524:37 - because that's always a good place to
524:38 - start so let's go to our database and
524:40 - let's briefly talk about the way we are
524:42 - going to structure our comments
524:43 - collection so really we're faced with
524:45 - two different options for storing the
524:47 - comments in our database we can either
524:49 - create a top level comments collection
524:51 - at the same level as these ones here
524:53 - communities posting users or we could
524:56 - create a comment sub collection on the
524:58 - post document and either one of these
525:01 - are fine in different circumstances but
525:03 - in our circumstance we need to think
525:04 - about how we're actually actually
525:05 - querying the comment data because again
525:08 - how the data is displayed on the screen
525:09 - what your queries are going to look like
525:11 - should really Drive how you model your
525:13 - data and in our case we are going to
525:16 - store our comments as a top level
525:18 - collection here along with the post
525:19 - communities and users rather than a sub
525:22 - collection on the posts and here is why
525:25 - if we go to the real reddit.com and we
525:28 - go to our profile page it's just a
525:30 - random Reddit account that I made for
525:32 - the purpose of this demo you can see
525:34 - that there is a section on our profile
525:36 - page called comments so on this page it
525:39 - would display a complete history of all
525:41 - of the comments you have made on Reddit
525:43 - which means that there are sections of
525:45 - the app that require access to comment
525:48 - data outside of just the post now we are
525:52 - not going to build this profile page but
525:54 - I did want to model our data to best
525:56 - reflect Reddit in case you did want to
525:59 - build this functionality on top of this
526:01 - project if we wanted all of the comments
526:04 - that we ourselves have
526:06 - think about how much harder that query
526:07 - would be if the comments were stored as
526:10 - a sub collection on the posts we would
526:13 - have to query every single post and then
526:16 - go into all of those posts and see if
526:19 - there's a comment that we have made like
526:21 - where the comment has an author ID that
526:23 - matches our user ID that's really
526:25 - inefficient and doesn't really seem
526:27 - necessary and so that's why I decided to
526:30 - store the comments as a top level
526:32 - collection up here because we can query
526:34 - The Collection directly then right we
526:36 - can just go let's go find all the
526:37 - comments where the author ID matches my
526:41 - user ID and for the posts it's just as
526:43 - easy to find all of the comments with a
526:46 - certain post ID so it's sort of The Best
526:48 - of Both Worlds here it simplifies our
526:50 - lives significantly if we just have the
526:52 - comments up here as a top level
526:54 - collection so I just wanted to discuss
526:56 - these two ways of modeling the data
526:58 - because again with nosql we have all of
527:00 - this freedom and my first thought
527:02 - actually was to put a sub collection on
527:04 - the post right because it's so it makes
527:05 - so much sense it's like oh I only really
527:07 - need to see the comments of a post if I
527:09 - already know the post therefore I'm
527:10 - going to sort of a sub collection but
527:11 - then I was like oh well on reddit.com
527:13 - there's this whole comments section of
527:15 - your profile and so making that query
527:18 - with the sub collection pattern would be
527:20 - very very challenging which is what led
527:23 - me to decide to store the comments up
527:25 - here as a sibling a post rather than as
527:27 - a child of posts just wanted to clarify
527:29 - that because I don't want to just be
527:30 - like oh we're modeling the data this way
527:32 - except it I wanted to provide some food
527:35 - for it to Hut so I hope that is helpful
527:37 - and now we can actually build the
527:38 - functionality into our app okay so let's
527:40 - go back to our app and it's going to be
527:42 - on this PID page that we're going to
527:44 - build in the comments functionality so
527:46 - let's go into here and the comments is
527:49 - going to be as I have indicated here a
527:51 - sibling of the post item inside of the
527:55 - left hand side fragment here so let's
527:57 - actually build the real comments
527:59 - component so inside of our directory
528:00 - here and inside of the posts folder I'm
528:03 - going to create a another folder inside
528:05 - of here call
528:06 - because the comments are a child of a
528:09 - post and so then inside of here I'm
528:11 - going to create the main root file of
528:13 - this folder which is going to be
528:15 - comments.tsx I'm going to use our
528:17 - snippet txed and then I'm going to just
528:21 - put the text in here here are the
528:23 - comments
528:24 - awesome
528:26 - I'm going to close my directory come
528:27 - back to our PID page and actually import
528:30 - the real comments component here
528:34 - comments
528:36 - just like this and so now we should see
528:38 - that show up right there and just uh
528:40 - again to look at our demo let's go look
528:41 - at what we're actually creating here so
528:43 - I'll click on this post
528:47 - and this is it we just have an input and
528:50 - the actual comments themselves let's
528:51 - start off with the props that we're
528:53 - going to accept in our comment component
528:55 - here so the first prop we're going to
528:57 - take in is going to be our user object
528:59 - so this is going to be object User make
529:00 - sure this type imports from Firebase
529:02 - auth our second prop is going to be our
529:04 - selected post which is going to be of
529:06 - type post make sure that Imports as well
529:09 - and then the third one is going to be
529:10 - the community ID because we are going to
529:13 - store this on all of our new comments
529:15 - then we can destructure them from the
529:17 - props down here so user select a post as
529:20 - well as Community ID just like this all
529:22 - right and let's go back to our app so we
529:24 - can see where we are building and let's
529:25 - briefly Define the functions that are
529:27 - going to be in this component to provide
529:29 - some clarity as we are building this out
529:31 - all right so the first function in here
529:33 - is going to be the function that
529:34 - actually creates our comments so this is
529:36 - going to be called oncreate comment and
529:37 - it is going to be asynchronous because
529:39 - it is going to talk to our database and
529:40 - it's going to take in an argument that
529:42 - is called comment text and that is going
529:45 - to be a string
529:47 - and we're going to leave it empty for
529:48 - now our second function is going to be
529:50 - responsible for deleting a comment this
529:52 - is also going to be asynchronous and
529:54 - this is going to take in a comment but
529:56 - this is going to be of type comment
529:58 - which we have not created yet which
530:00 - we're going to do in a second but for
530:02 - now I'm just going to make it any so
530:04 - that typescript doesn't kill us and our
530:06 - third function is going to be
530:07 - responsible for fetching all of the
530:09 - comments for this post so I'm going to
530:11 - call this get post comments
530:14 - asynchronous
530:16 - and empty for now and the very last
530:19 - thing I'm going to create is going to be
530:21 - a use effect because we want to do
530:22 - something as soon as this component
530:24 - mounts and that thing we want to do is
530:28 - get the post comments for this post that
530:31 - we're currently looking at and we only
530:32 - want to run this once so I'm going to
530:34 - leave the dependency array empty so
530:36 - essentially as soon as this component
530:37 - maps to the Dom it's going to go fetch
530:39 - the comments from the database and then
530:41 - put them in stage so that we can
530:42 - actually see them on the screen so that
530:44 - is pretty much the skeleton of this
530:46 - component and now we just have to fill
530:48 - all of these things out let's build out
530:51 - the actual container for our comments
530:54 - component so we can get rid of that div
530:56 - there and our outermost component is
530:59 - going to be a box from Chakra and we're
531:01 - going to give this box a background of
531:03 - white and a border radius
531:06 - of zero pixels zero pixels four pixels
531:10 - four pixels and then in here I'm just
531:12 - going to say here are comments that we
531:14 - can see something show up on the screen
531:15 - and you'll notice that these border
531:17 - radius inputs are just sort of the
531:19 - complete opposite of the Border radius
531:20 - inputs for the Post item and it's to
531:23 - make it appear as though it is a single
531:25 - component there they sort of look like
531:26 - one if you go to the demo they look like
531:28 - kind of a it looks like one massive
531:29 - thing uh and we are doing that by having
531:32 - the Border radiuses sort of mirror each
531:34 - other so to speak and we're also going
531:36 - to give this a padding of two all right
531:38 - we can get rid of this text and inside
531:40 - of here we're going to have a flex box
531:42 - so import that from Chakra and inside of
531:44 - this text box is where our comment input
531:46 - component is going to go which we are
531:48 - going to create in just a second here
531:49 - but let's style out this flexbox first
531:52 - we're going to give this a Direction
531:54 - of column
531:56 - padding left of 10 heading right before
532:02 - and a margin bottom
532:03 - of six let me give this a font size of
532:07 - 10 point
532:10 - and a width of 100 percent perfect and
532:14 - actually before we create our comment
532:16 - input let's create the state that we're
532:19 - going to have in this component here so
532:20 - the first piece of State we're going to
532:21 - create is going to be for our actual
532:23 - comment input and is going to represent
532:25 - the actual comment text that the user is
532:27 - entering when they're creating a new
532:29 - comment so we're going to call this
532:30 - comment text
532:32 - accept comment text and we're going to
532:35 - initialize this to be an empty string
532:37 - our second piece of state is going to be
532:39 - all of our comments for this post that
532:42 - come from the database and so we are
532:44 - going to initialize this to be an empty
532:46 - array
532:47 - okay and we're going to have two loading
532:49 - States here one for fetching our
532:51 - comments and one for creating a comment
532:53 - we want to keep them separate because
532:54 - there are two separate things so our
532:56 - first one is going to be called Fetch
532:58 - loading
532:59 - set fetch loading and it's going to be
533:02 - equal to use State initialize it as
533:04 - false the second loading state is going
533:06 - to be called create loading and set
533:08 - create loading
533:10 - and also false
533:13 - okay so that's going to be it for now
533:14 - now let's create the component for our
533:16 - actual comment input so inside of our
533:18 - comments folder I'm going to create
533:19 - another file called comment
533:23 - dot TSX
533:25 - and use our snippet
533:27 - and let's define the props that this is
533:29 - going to take so the first prop is going
533:31 - to be that common text State component
533:33 - that we declared before second one is
533:35 - going to be the set comment text
533:37 - function and this is going to take into
533:39 - the value of type string and it's going
533:41 - to return void the third one is going to
533:44 - be our user which is going to be a type
533:46 - user the third one is going to be our
533:48 - loading state for creating a comment
533:50 - because you're going to need that one in
533:51 - here to display a loading State when the
533:53 - user presses create comment
533:55 - so we're going to have this be Boolean
533:57 - here and the last one is going to be our
533:59 - on create comment function because that
534:01 - is the function that you're going to
534:02 - call when they click on the create
534:04 - comment button and this is going to take
534:06 - in a piece of comment text and it's
534:09 - going to return nothing now down here we
534:11 - can destructure all of these comment
534:13 - text set comment text user
534:17 - loading and oncreate comment just like
534:20 - that now for this component what I'm
534:22 - going to do for the sake of time is just
534:24 - paste in all of the HTML for it because
534:26 - it's pretty much just a input with a
534:28 - bunch of fancy styling and a button so I
534:31 - figured it's not worth going through a
534:33 - bunch of CSS so I thought it'd be better
534:35 - to focus more on the actual commenting
534:37 - and creating comments functionality I
534:39 - will put a link directly to this
534:40 - component on my GitHub down below so you
534:42 - can grab it as well so I'm just going to
534:44 - drop this in here and add all of the
534:47 - missing Imports command period
534:50 - I love that keyboard shortcut
534:53 - and text as always does not like to Auto
534:56 - Import so I'm going to
534:59 - throw that in here manually
535:01 - perfect
535:03 - so this is all styled and all of those
535:04 - functions that we passed in are hooked
535:06 - up to it properly it's just an input
535:07 - with a button and then with an on click
535:09 - that calls our on-create common function
535:11 - so nothing super fancy that you're
535:13 - missing here just a bunch of fancy CSS
535:14 - that I thought was not worth going
535:16 - through because you've already seen so
535:18 - much of this already it's more fun to
535:19 - actually work on the creation of
535:21 - comments in my opinion so let's go back
535:23 - to our comments component and import
535:25 - that actual comment input
535:27 - from that file
535:29 - and now we can pass it the required
535:31 - props so the first one is going to be
535:33 - our common text which is going to be
535:35 - equal to our common text State variable
535:38 - the second one is going to be set
535:40 - comment text
535:42 - I do not like when I don't get
535:43 - autocomplete but sometimes you just
535:46 - can't have everything you want okay the
535:49 - third one is going to be the user
535:52 - so we are going to pass in the user
535:54 - which I believe we still have to get oh
535:56 - no it's coming as a problem okay and
535:58 - then we can pass in our create loading
536:02 - State create loading just save this so
536:05 - that formats and then the last one is
536:06 - going to be our on create comment
536:09 - function
536:10 - on create comment
536:13 - okay so I saved this and as you can see
536:15 - here we are displaying this component
536:18 - here that's asking the user to log in or
536:20 - sign up and this is just part of the
536:22 - comment input component that basically
536:24 - just checks if the user exists or if it
536:25 - does not and if it does not it just asks
536:27 - them to log in or sign up and the reason
536:29 - that it is saying we are unauthenticated
536:31 - even though we are logged in is because
536:33 - we are not yet receiving a user as a
536:37 - prop to this comments component so let's
536:40 - fix that so that we can actually see the
536:42 - real component fun fact this is the
536:44 - exact same auth buttons component that
536:46 - was used in our nav bar this is why I
536:49 - love react and the reusability of
536:51 - components is so cool okay so let's
536:53 - actually pass the user in to our
536:56 - component here
536:57 - user is equal to user okay and we are
537:00 - also meeting the selected post which is
537:02 - going to be our hostate value dot
537:05 - selected post
537:07 - and we also want to pass in our
537:08 - community ID which we could get from the
537:11 - router but we can also get access to it
537:13 - from postdatevalue dot selected post dot
537:16 - Community ID okay so typescript is not
537:19 - happy with the misalignment of types
537:22 - here so what I'm going to do for the
537:23 - user is I'm going to Typecast this to be
537:26 - of type user and for the community ID
537:28 - I'm also going to Typecast this to a
537:30 - string however for the selected post
537:32 - what I'm going to do is just come into
537:34 - our comments component here and change
537:36 - the type of our selected policy since
537:38 - our selected post is initialized as null
537:40 - in our post date atom I'm going to use
537:42 - the pipe operator and add null as
537:45 - another type for this prop here so if I
537:47 - save this and go back this should now be
537:49 - happy and we should be good to go and
537:51 - now we can actually see our new fancy
537:54 - input component here which is super cool
537:56 - our button is even hooked up to our on
537:59 - create comment function although it's
538:01 - empty but it is hooked up once you start
538:03 - once we build out the logic here it will
538:05 - work all right let's start right out the
538:08 - on create comment function and actually
538:09 - starts storing some comments in the
538:11 - database so when we create a comment
538:13 - there are two things we need to do the
538:16 - first thing is of course creating a
538:18 - common document in the database the
538:20 - second thing is we need to update the
538:21 - posts number of comments because if we
538:24 - go back to our database here you might
538:25 - remember that we store a field on our
538:28 - post documents called number of comments
538:30 - and the reason we do that is because if
538:31 - we go to our demo here we do store that
538:34 - information you can see it here and it
538:36 - is also displayed on all of the post
538:37 - items here so 328 and 4 and 458 so that
538:42 - is the data coming from the number of
538:45 - comments field on that post document so
538:48 - we need to update that as well every
538:49 - single time we create a comment so
538:51 - Update hosts
538:53 - update post number of comments
538:56 - all right and for both of these
538:58 - operations it makes sense to either have
538:59 - both of them succeed or none of them
539:01 - succeed so for that reason we are going
539:04 - to use batch rights once again because
539:06 - they are amazing and why not they help
539:08 - keep our data super clean with a high
539:10 - level of integrity and then once our
539:12 - batch write successfully completes we
539:14 - can update our client
539:16 - recoil state
539:18 - to show the new comment as well as the
539:21 - new number of comments
539:23 - and then they hit and then in the
539:25 - awesome
539:28 - okay and then okay
539:30 - all right so
539:32 - okay
539:34 - perfect and then in our delete function
539:35 - we're going to do pretty much very
539:37 - similar things we are going to delete
539:40 - the comment document we are also going
539:42 - to update the host number of comments
539:44 - but this is going to be the minus one up
539:46 - here was plus one and then we are going
539:49 - to also update The Recoil State as well
539:51 - to reflective changes so let's work on
539:54 - the creation of comments so let's create
539:56 - a try catch block as usual
540:00 - and we will log the air
540:02 - on create comment
540:06 - error all right then at the top of our
540:08 - try block we can create our batch
540:10 - instance using our right batch function
540:12 - from firestore pass it our firestore
540:14 - instance
540:15 - and let's work on this first thing of
540:17 - creating a comments document our new
540:20 - comment object is going to be of type
540:23 - comment which we have not created yet so
540:25 - let's do that now and for now we're just
540:26 - going to put it at the top of this file
540:28 - but we are going to move it to the
540:29 - comment item component once we actually
540:31 - create that component very shortly so
540:33 - you can say export type comment
540:36 - so our comments are going to have an ID
540:38 - which is a type string a Creator ID so
540:41 - we know the user that created this the
540:44 - Creator display text so we can display
540:46 - that on the UI
540:48 - Community ID that belongs to this post
540:51 - that we're commenting on the ID of the
540:53 - post that this comment belongs to
540:56 - the title of the post
540:59 - and as well as the comment text itself
541:01 - and the last thing is going to be our
541:03 - created at timestamp which you want to
541:04 - be up type timestamp make sure that
541:06 - imports from Firebase firestore and that
541:10 - is it so now down here when we're
541:13 - creating a comment I'm actually going to
541:14 - create a reference to this new comment
541:16 - document so that we can use the ID on
541:18 - our new object here
541:20 - so you can say const comment dot ref is
541:24 - equal to Doc from firestore and we can
541:27 - pass this a collection reference of the
541:29 - collection we want to sort this document
541:31 - in
541:32 - and that collection is going to be our
541:34 - comments collection just like this and
541:37 - now we can populate our new comment
541:38 - object
541:39 - so we can pass this an ID a
541:42 - comment.ref.id the Creator ID
541:46 - of user.uid a Creator display text which
541:52 - if you remember was our users email and
541:54 - then we split the email at the at time
541:57 - and then we grab the first element in
542:00 - that split array and we're actually
542:02 - going to add the bang operator here
542:04 - because we know that the user is going
542:05 - to be defined at this point because only
542:07 - authenticated users can create comments
542:09 - we can add in our community ID the post
542:12 - ID is going to be the selected post dot
542:15 - ID and we are going to again add the
542:17 - bang operator here because we know that
542:19 - at this point we are going to have a
542:21 - selected post the post title is going to
542:24 - be our selected post dot title
542:26 - again can add the bank operator and our
542:29 - text is actually going to be our state
542:31 - variable which is going to be comment
542:33 - text and we actually don't need to
542:35 - accept this as an argument to this
542:38 - function here we can just use it
542:39 - directly from State I don't know why I
542:40 - initially passed that as an argument it
542:42 - doesn't really matter but we don't
542:44 - really need to so I'm just going to use
542:45 - the state variable all right and for our
542:46 - created ad we are going to use our
542:48 - server timestamp function and we're
542:50 - going to Typecast this to a timestamp to
542:53 - avoid the type conflict between the
542:55 - server types and the client types just
542:58 - like this
542:59 - okay then we can actually add the
543:01 - creation of this document to our batch
543:03 - operations so the document we want to
543:05 - create is going to be our comment doc
543:07 - ref and the data we want to store in
543:09 - that document is going to be our new
543:10 - comment now let's update our post
543:14 - documents number of comments field
543:17 - so let's move that comment down here
543:20 - so let's create a reference for the Post
543:22 - document that we are updating so we can
543:23 - say postdoc ref is equal to Doc
543:27 - passes our firestore instance the
543:29 - collection that this document in is
543:31 - posts and the ID of this document is
543:34 - selected post dot ID and to fix this
543:37 - compiler error here we can do one of two
543:39 - things we can either add the bang
543:40 - operator like we were doing up here
543:42 - or we can Typecast this to be a string
543:45 - either is fine but we do know at this
543:48 - point that we are going to have a valid
543:49 - selected post to be consistent with
543:51 - above I'm going to add the bang operator
543:52 - here to tell typescript that it is safe
543:54 - to proceed then we can add the update to
543:57 - our batch operations the document we are
543:59 - updating is postdoc ref and the update
544:01 - we want to make is to the number of
544:03 - comments field on this post and we want
544:06 - to increase this value by one so we can
544:08 - call our increment function from
544:10 - firestore and give it the value one just
544:13 - like this now we can actually write
544:15 - those operations to the database we can
544:16 - say await batch dot commit and then
544:20 - after our database documents have been
544:21 - successfully created and updated we can
544:24 - update our client recoil state so the
544:26 - first thing we want to do is set our
544:27 - common text to be empty so we can clear
544:30 - the input and the other piece of State
544:32 - we have to update is our comments array
544:34 - we want to add this new comment to the
544:37 - top of that array so that it shows the
544:40 - updated list on the UI so we can call
544:43 - our set comments function
544:45 - and we want to take the previous value
544:46 - of this array and update it to be a new
544:49 - array with the new comment at the top
544:52 - and all of the previously existing ones
544:55 - behind it
544:57 - and this is complaining because type
545:00 - never
545:02 - okay yeah so I think when we yeah we
545:04 - have to specify the type of this comment
545:06 - State here and since we have our common
545:08 - type defined
545:10 - we can indicate to react that this is
545:13 - going to be an array of comments and
545:15 - that should satisfy this array down here
545:18 - perfect okay so typescript is happy I
545:21 - can save this
545:22 - and I think all we are missing is our
545:24 - loading State actually so at the top of
545:26 - our try block we can set create loading
545:29 - to be true
545:30 - and then at the bottom
545:32 - we can set create loading to be false
545:35 - just like that okay so let's actually
545:37 - test out this function because our
545:38 - button is actually hooked up to it so um
545:41 - we should be able to create a comment
545:42 - let's go to our database and what should
545:44 - happen is we should see a new collection
545:47 - appear in here called comments with a
545:50 - new comment but we should also see that
545:52 - this post this one we're looking at
545:53 - right here should have an updated number
545:55 - of comments with a value of one so let's
545:58 - try this out and see what happens so I'm
546:00 - going to do hey nice post dude
546:04 - click comment
546:06 - okay it um
546:09 - it didn't even load like the loading
546:12 - State didn't trigger are we sure we have
546:13 - that hooked up
546:15 - comment input
546:17 - on create comment
546:20 - comment text okay
546:23 - um what is happening here I'm not sure
546:28 - is our reacts
546:30 - did anything get created in the database
546:35 - no okay nothing I created
546:38 - um I'm gonna just try maybe refreshing
546:40 - this maybe my hot module
546:43 - thing was being weird Okay so let's try
546:46 - leaving another comment hey dude nice
546:50 - post
546:52 - okay so that seemed to work though I
546:53 - don't know what it was happening for
546:55 - um okay so if I go to the database now
546:58 - we can see that the yes the um the
547:00 - number of comments on the post was
547:02 - updated and I just have to refresh the
547:04 - database because the comments collection
547:05 - is being created for the first time and
547:07 - yes it was created and we can see that
547:09 - brand new comment in there which is
547:11 - super cool so obviously our batch rate
547:12 - worked because it created the comment
547:14 - and our post number of comments was
547:16 - updated so let's create another comment
547:17 - second one
547:20 - comment
547:22 - this was updated to two and that second
547:25 - comment should be in there second one
547:29 - nice
547:30 - all right so now we are able to
547:32 - successfully create comments so let's go
547:35 - back to our app and there is actually
547:36 - one more piece of recoil state that we
547:38 - have to update here and that is going to
547:40 - be the selected posts number of comments
547:43 - here we did that on our post document in
547:45 - the database but we do want to do it in
547:46 - the client as well so that those changes
547:48 - are reflected on the UI right away so in
547:50 - order to update our selected post we are
547:52 - going to need our set post date function
547:55 - from recoil so we can bring that in up
547:56 - here we can say set Post State
547:59 - and we only need to set post it here we
548:02 - don't really need to read from it so we
548:03 - can use our use set recoil safe hook and
548:06 - pass in our post date atom
548:08 - then down here after adding the new
548:11 - comment to the comments array we can
548:13 - call our set post date function
548:15 - take our previous value and the value
548:18 - that we want to update here is selected
548:20 - post and we only want to update one
548:23 - field on the selected post and that
548:25 - field is going to be the number of
548:27 - Commons so we can spread the previous
548:29 - value of selected post preview.selected
548:31 - post and we just want to update the
548:33 - number of comments to be incremented by
548:36 - one and the way we can do that is we can
548:38 - just say preview.selected post
548:40 - DOT number of comments
548:43 - plus one and we can tell a typescript
548:46 - that this new post object is indeed of
548:49 - type post and then we can add the bang
548:51 - operator here to tell Cat script that we
548:53 - know that there is going to be a
548:54 - selected post at this point so now if I
548:56 - were to go make a comment
548:58 - on this post I should see this number
549:01 - here update without refreshing the page
549:03 - okay dude this is cool this is cool so
549:07 - if I comment
549:10 - you can see that that change to a three
549:12 - immediately which is super cool awesome
549:13 - so now all we have to do is create our
549:15 - comment item component so that we can
549:17 - actually see the comments of this post
549:19 - underneath here alright so let's work on
549:21 - the comment item component here so
549:24 - inside of our directory here inside of
549:26 - the comments folder I'm going to create
549:27 - a new file called comment item dot TSX
549:31 - and this is going to represent an
549:33 - individual comment item similar to a
549:35 - post item so let's use our snippet in
549:37 - here close our directory and I mentioned
549:39 - before that we were going to move this
549:41 - comment type over to this comment item
549:45 - file once we have created it so that's
549:47 - what I'm going to do now and the reason
549:49 - I'm doing this is just because I feel
549:51 - like it just makes sense to store the
549:52 - individual comment type inside of the
549:54 - individual comment item component just
549:56 - the preference of mind though it doesn't
549:58 - really matter where you store it to be
549:59 - honest so let's import this timestamp
550:01 - from firestore
550:03 - save this and now we just need to go
550:04 - back to our comments and actually import
550:06 - this comment type from that file we just
550:08 - created
550:09 - so let's do import
550:11 - from comment item
550:16 - and we want to import the comment type
550:18 - there and now this should be happy down
550:20 - here we can save this and go back and
550:22 - I'm actually going to move this above
550:23 - the comment item props I feel like if
550:25 - you have multiple types inside of your
550:27 - react components the component props
550:29 - type should be at the bottom kind of
550:31 - closest to the component just a
550:33 - preference honestly that's uh just what
550:36 - I do it doesn't really matter but up to
550:38 - you all right so the first prop that
550:40 - this thing is going to take in is going
550:42 - to be the actual comment itself so we
550:44 - can declare this as a type of comment
550:46 - our second prop is going to be our on
550:48 - delete comment function because we're
550:49 - going to be able to call that directly
550:50 - from within the comment item component
550:52 - this is going to take in a comment
550:54 - argument which is of type comment and
550:56 - it's going to return void our third prop
550:59 - is going to be a Boolean that represents
551:01 - if we are in the process of deleting
551:03 - this comment so I'm going to call it
551:04 - loading delete and I'll explain more
551:06 - about this in a bit once we have the
551:07 - component actually built out and the
551:09 - fourth one is going to be the user ID so
551:11 - that we can know if the current user is
551:13 - the creator of this comments that we can
551:15 - display the option to delete it to them
551:17 - if they are all right let's come down
551:18 - here and destructure our props comment
551:21 - on delete comment loading delete and
551:24 - user ID all right so let's go to our
551:27 - demo and look at what a comment item
551:29 - actually looks like
551:30 - so we have the icon here we have the
551:33 - username we have the time that the
551:34 - comment was posted we have the text
551:37 - itself and then we have the option to
551:40 - edit and delete it and we're only going
551:41 - to build the delete functionality we're
551:43 - not going to build the edit
551:44 - functionality but you can see here that
551:45 - as a creator of this comment I have the
551:47 - option to edit and delete it whereas
551:49 - these ones I'm not the Creator so I
551:50 - cannot see those icons so that is the
551:52 - reason why we are passing in the user ID
551:54 - here as a prop all right so let's go
551:56 - back to our app so let's get rid of this
551:57 - div here and we can start off by
552:00 - creating the outermost container which
552:02 - is going to be just a flexbox from
552:04 - Chakra now the first component in here
552:06 - is going to be the actual Reddit icon
552:07 - that we saw in the demo so this is going
552:09 - to be contained within a box component
552:11 - so bring that in from Chakra and we're
552:14 - going to have a icon
552:16 - and this icon is going to be our fa
552:18 - Reddit icon and I'm just going to import
552:20 - all of the icons here that we are going
552:23 - to be using
552:24 - um so I'm going to paste in these
552:26 - Imports at the top here
552:28 - and these look like this there's only
552:30 - three of them
552:32 - perfect okay so then the first one is
552:33 - going to be that fa Reddit
552:36 - and right next to our icon container
552:39 - we're going to create a stack here and
552:41 - this is going to contain all of the
552:43 - actual content of the comment I'm going
552:45 - to give this a spacing of one the first
552:48 - thing inside of here is going to be
552:49 - another stack but this is going to be a
552:51 - row stack and this is going to contain
552:53 - the username as well as the created add
552:55 - timestamp so we can declare the
552:57 - direction of this to be row and we want
553:00 - to make the Align Center so everything's
553:02 - vertically aligned and we're going to
553:03 - make everything inside of here font size
553:05 - of eight point
553:07 - and we're going to have two pieces of
553:09 - text in here one is going to be the
553:11 - username and one is going to be the
553:14 - timestamp so let's bring in text from
553:15 - Chakra because as usual we do not get
553:18 - that Auto Import for some reason don't
553:21 - know why I mentioned that every single
553:23 - time and you're probably like yo we get
553:24 - it we we get the text is not Auto Import
553:26 - we get it okay so then the first one is
553:30 - going to be our comment
553:32 - dot Creator display text which is sort
553:35 - of our like little username thing and
553:36 - then our second one is going to be that
553:38 - timestamp and we are going to use moment
553:41 - once again so that we can get a nice
553:43 - formatted time stamp 10 minutes ago or
553:45 - four months ago or whatever so Our
553:47 - Moment function takes in a new date
553:49 - object and the date we're going to pass
553:51 - is going to be our comment dot created
553:54 - at dot seconds because the type of this
553:57 - is a timestamp and that has the seconds
553:59 - parameter attached to it and we're going
554:01 - to need to multiply this by a thousand
554:02 - and then we can call the Dot from now
554:06 - method from a moment to declare this as
554:09 - that nice four minutes ago or eight
554:11 - months ago type of text okay so
554:13 - typescript is not happy because created
554:15 - ad could possibly be undefined and what
554:17 - I'm going to do is actually remove the
554:19 - question mark here and make this not
554:22 - optional because it's always going to be
554:23 - there
554:24 - um so I'm just going to save this and we
554:26 - don't need optional chain here at this
554:28 - point so now that we have just a little
554:30 - bit of this built out let's go back to
554:31 - our comments and actually
554:33 - iterate through our comments and create
554:35 - the comment items for the existing
554:37 - comments so that we can actually see
554:38 - what we're doing when we're building up
554:39 - this comment item okay so underneath
554:41 - this Flex container here I'm going to
554:43 - create a stack
554:45 - and this stack we want to give a spacing
554:47 - of six and this is going to space out
554:49 - all of our comments very nicely and
554:51 - within me stack this is where we want to
554:53 - actually display all of our comment
554:54 - items so we want to take our comments
554:56 - array and map through all of them and
554:59 - take each one and create a new comment
555:03 - item
555:05 - okay and the props you need to pass into
555:07 - this comment item is the comment itself
555:10 - comment is equal to comment our on
555:12 - delete comment function
555:14 - on delete comment our loading delete
555:18 - which for now is just going to be false
555:20 - but we're going to come back to this as
555:21 - well as the user ID which is going to be
555:24 - the current user.uid
555:27 - perfect we can save this and now we can
555:30 - see that we have something here we have
555:34 - not fetched all of the comments from the
555:36 - database yet so only the ones we have
555:37 - created on the front and are going to be
555:40 - here because you have not fetched them
555:42 - and I did create that one a few minutes
555:44 - ago that's why there's one here like so
555:45 - if I create another one now shaded it
555:47 - should show up right immediately and
555:49 - state here okay so we're getting an
555:51 - invalid date here and this has to do
555:53 - with our created at timestamp and we're
555:56 - going to fix that
555:58 - um should I do that now or after the
556:00 - Styles okay let's do the date now
556:02 - actually so the reason that this invalid
556:04 - date thing is happening is because of
556:07 - this server timestamp function here if
556:10 - you remember from a while ago I
556:11 - mentioned that the server timestamp
556:13 - function is actually only callable on
556:15 - the Firebase servers so we tell Firebase
556:18 - that we want our created at field to be
556:21 - a server timestamp so that when this
556:22 - object does reach the Firebase servers
556:25 - Firebase will call this function you
556:28 - know create that typeset for us but on
556:29 - our client we actually cannot call this
556:32 - function and since we want to put this
556:34 - comment into our client state right away
556:36 - without having to go fetch from the
556:38 - database we do need to actually sort of
556:41 - manually create our own timestamp here
556:43 - with our own seconds field on it with
556:47 - our posts we did not have to do that
556:49 - because we created a post using the
556:51 - server timestamp function and then we
556:53 - went back to the Community page and all
556:55 - the posts were fetched from the database
556:56 - after the server timestamp was
556:58 - successfully created on the Firebase
557:00 - servers but in this case we are taking
557:02 - this thing and immediately inserting it
557:05 - into client state so that it shows up on
557:06 - the screen immediately there is no
557:08 - fetching after creating a comment my
557:11 - point in saying that is we do need to
557:12 - manually create our own timestamp on the
557:14 - client so that we can see a valid date
557:17 - here okay so what we can do to fix this
557:18 - is after adding this new comment right
557:21 - operation to our batch we can take this
557:23 - new comment object and modify the
557:25 - created at field so that it works on our
557:27 - and set this equal to our own little
557:29 - client version of a timestamp and our
557:33 - timestamp needs to contain a seconds
557:34 - field on it here and the value we want
557:36 - to set to our seconds you can use our
557:38 - date object from JavaScript and copy.now
557:41 - Method on it and then we want to divide
557:43 - this by 1000 and then we can tell
557:46 - typescript that this is a timestamp
557:49 - because it's sort of our own little
557:50 - custom version of a timestamp so that it
557:53 - works on our client so now I can save
557:55 - this
557:56 - and if I were to create a comment now we
557:58 - should see a valid date will this work
558:01 - date
558:03 - comment
558:05 - perfect so you can see now that we're
558:06 - seeing a few seconds ago and so moment
558:09 - is able to actually read that as a valid
558:11 - date because the seconds thing actually
558:13 - exists on the create that thing now
558:14 - awesome I hope that makes sense it's
558:16 - kind of confusing and it's kind of weird
558:17 - with this whole server timestamp thing
558:19 - but um this is a way around it so that
558:21 - we can directly insert this thing into
558:23 - our client State all right let's go back
558:25 - to our comment item and actually
558:26 - continue building out the UI and fix up
558:28 - these styles of It Go on our creator
558:29 - display text we are going to change the
558:31 - font weight of this to be heavy 700 and
558:34 - then for our date we are going to change
558:36 - the color to be Gray 600.
558:41 - and let's actually change the style of
558:42 - this icon up here as well we're going to
558:44 - make the font size equal to 30 to make
558:47 - it much larger and then we can make the
558:49 - color of it gray
558:50 - 300.
558:53 - very nice that looks very good all right
558:55 - now underneath this inner stack here
558:57 - we're going to actually show the common
558:59 - text itself which is probably the most
559:01 - exciting part of the comment so inside
559:04 - of this text you want to say comment dot
559:06 - text and we can style this to have a
559:09 - font size of Cam point to make it
559:11 - slightly smaller there we go we can see
559:13 - the actual comment there and then
559:15 - underneath here we're going to create a
559:17 - another stack which is going to contain
559:20 - all of the user actions that is on a
559:23 - comment so like these icons the edit
559:25 - delete buttons it's going to be a row
559:27 - stack so that's all spaced nicely okay
559:29 - so let's make the direction
559:31 - of this is equal to rho and we're going
559:34 - to vertically align our items again so
559:35 - we can say Center for our align we want
559:38 - to make everything inside of here cursor
559:40 - pointer because they're all sort of
559:41 - clickable actions and we're going to
559:43 - make the color of everything inside of
559:44 - here gray 500. now the first two things
559:47 - inside of the stack are going to be the
559:49 - upvote and download icons that we see on
559:52 - the comments
559:53 - so the first one is going to be the i o
559:55 - Arrow up Circle outline and the second
559:58 - one is going to be the down one so we
560:01 - can paste this in here and just change
560:03 - this to i o arrow down
560:05 - perfect looks very good then underneath
560:08 - here we want to show the edit and delete
560:10 - option but only if the user ID is equal
560:14 - to the comments Creator ID only if I'm
560:17 - the owner of this comment do I want to
560:20 - see these options here and we can create
560:23 - a fragment from within here and we're
560:25 - going to have two pieces of text
560:27 - and one is going to say edit
560:30 - and the other is going to say delete and
560:33 - we're only again building the delete
560:34 - functionality but this is where you
560:36 - would click the edit functionality if
560:38 - you decide to build that so on both of
560:40 - these I'm going to add some common
560:42 - styling and The Styling for these is
560:44 - going to be font size of nine point and
560:48 - hover styling of a color of blue
560:54 - 500 just like this and then on the
560:57 - delete since we actually have this
560:59 - functionality built in we're going to
561:01 - add the on click function and this is
561:04 - going to call
561:06 - our on delete comment function and we're
561:08 - going to pass in the comment product
561:09 - just like this
561:11 - so now we actually have this hooked up
561:13 - to our delete function so when we build
561:15 - it it'll actually work okay and one
561:17 - thing up here next to our created at
561:20 - text is we're going to actually also add
561:23 - a loader for when the user does delete
561:25 - this comment we're going to just clean
561:27 - up display a little spinner here
561:28 - indicating that the delete is in
561:30 - progress and that's sort of where this
561:31 - loading delete Boolean is going to come
561:33 - into play so right here I'm going to add
561:34 - that in and I'm going to say if loading
561:36 - delete is true we want to show this
561:39 - spinner so bring in the center from
561:42 - Chakra and we're just going to make the
561:43 - size of this small
561:45 - cool so if I make this true just we can
561:48 - see what this looks like that is what
561:49 - that looks like it looks really cool and
561:51 - it just tells the user that the deletion
561:53 - is in progress awesome and I think I
561:55 - forgot you had padding on the stack
561:57 - container of all of these comments
561:59 - because it looks like they're not
562:00 - positioned properly so here on this
562:02 - stack here I'm going to add a padding of
562:05 - two
562:07 - there we go that looks much better and
562:09 - while we are here actually I'm going to
562:10 - use this fetch loading parameter to
562:13 - display a skeleton loader for our
562:15 - comments because that makes it look so
562:17 - much better so inside of this stack here
562:19 - I'm going to create a ternary operator
562:21 - that is going to see if fetch loading is
562:24 - true if it is true
562:27 - we are going to display our loader and
562:29 - if it is not we're going to display our
562:32 - comments
562:33 - so I'm just going to paste in the loader
562:36 - from the component because it's just a
562:39 - bunch of skeleton components here
562:41 - and let's add these missing Imports
562:45 - cool and I have this like hard-coded012
562:48 - array just so that it creates three of
562:49 - these box skeleton components here so if
562:52 - the fetch is complete meaning that we
562:54 - are in the fussiness of this ternary
562:56 - operator we want to display to the user
562:58 - that there are no comments if the
563:00 - comments array is empty after they have
563:02 - been fetched so inside of here I'm going
563:04 - to create another fragment and in this
563:06 - fragment I'm going to add the condition
563:09 - to check if the comments dot length is
563:13 - equal to zero and if it is we are going
563:16 - to display this component that says no
563:19 - comments yet and I'm just going to paste
563:21 - that in it's just a flexbox with some
563:23 - text in it so that is what this looks
563:25 - like and if we do have comments in our
563:28 - array we want to show them so then I can
563:30 - create another fragment over here and
563:33 - inside of here we want to actually put
563:35 - in this comments.map function
563:39 - just like that so I can save that and
563:41 - now I need to just import text from
563:43 - Chakra
563:46 - save this so now if I refresh this page
563:49 - because we have not created our effect
563:51 - comments function yet we should see this
563:54 - thing here that says yeah no comments
563:56 - yet even though there are comments but
563:57 - again we haven't created our fetch
563:59 - function yet to create our initial value
564:00 - of comments so pretending that there are
564:02 - no comments this is what that would look
564:04 - like okay so let's write out this get
564:07 - post comments function so that we can
564:08 - see the initial state of this post
564:11 - comments when this component loads right
564:14 - now we can see that there are five so
564:16 - once we write this out the initial value
564:18 - of our array should contain those
564:19 - comments after they have been fetched
564:21 - and all we need to do inside of here is
564:22 - query our comment collection to find all
564:25 - of the comments with the post ID of the
564:27 - selected posts ID so we can create a try
564:29 - block and inside of here let's log the
564:32 - error get post comment then inside of
564:35 - our try block I'm going to create an
564:36 - object called comments query that we're
564:38 - going to pass to our get docs function
564:40 - to perform the query so we can create
564:42 - this using our query function from
564:44 - firestore the first argument to our
564:46 - query function is going to be collection
564:48 - reference to the collection we are
564:50 - querying we can pass this at our
564:51 - firestore instance and the collection we
564:53 - are carrying is comments the second
564:56 - argument is going to be our where clause
564:58 - which set of documents do we want to get
565:00 - from the comments collection we want to
565:03 - get all of the comments where the post
565:06 - ID of the comment is equal to the
565:09 - currently selected posts ID so selected
565:11 - post dot ID let's save this so that it
565:14 - formats then as the third argument to
565:17 - our query we can tell Firebase how we
565:20 - want these ordered by so we can pass in
565:22 - our order by function make sure that
565:23 - imports from firestore and we want to
565:25 - order by the created at field in
565:28 - descending order so if they come in with
565:30 - the latest comments at the top now we
565:32 - can actually fetch this set of documents
565:34 - from our database so let's create a new
565:36 - object called comment Docs and we can
565:39 - call our get docs function and pass in
565:42 - our Comics query
565:45 - then after we get all of these documents
565:47 - back from firestore we want to extract
565:50 - all of the data out of them and store
565:52 - them in state so we can create our new
565:53 - comments array and we can map through
565:56 - our comment docs dot Docs
565:59 - so comment docs.map and we can take each
566:02 - document and extract the data out of it
566:04 - and create a new JavaScript object with
566:07 - the ID of dot dot ID and then we can
566:10 - spread all of the data inside of that
566:13 - document
566:14 - so we can save this now all we have to
566:16 - do is put this in our common state you
566:18 - can say set comments
566:20 - and throw in our comments result from
566:22 - firestore and we can tell typescript
566:24 - that this is going to be an array of
566:26 - comments so we can indicate that like
566:29 - this and actually what I'm going to do
566:31 - is initialize our fetch loading to be
566:34 - true so as soon as this component
566:36 - renders we can indicate to the user that
566:38 - the fetch is in progress because that is
566:40 - sort of exactly what is happening so if
566:42 - you save this this is what those loaders
566:44 - look like I think they look so cool I
566:46 - don't know why I love these these
566:47 - skeleton loaders so much I don't know if
566:49 - everyone gets as excited about those as
566:51 - I do but they just look so good to me
566:53 - and then once this fetch has been
566:56 - complete
566:58 - um get post comments at the very end of
567:00 - our try catch we can set our fetch
567:02 - loading to be false
567:05 - perfect
567:07 - okay so we are getting an error here and
567:09 - I believe it is because yes we do need
567:12 - an index on our comments collection this
567:14 - is what we had to do with our posts as
567:16 - well if you remember in order to perform
567:18 - queries on our collection uh we do need
567:21 - an index on that collection so what we
567:23 - can do is just click on this link and do
567:24 - the exact same thing as we did last time
567:26 - this will open up the console and let's
567:28 - create the index on our comments
567:30 - collection by just clicking create index
567:32 - and this will take a few minutes I think
567:34 - last time it took about four to five
567:35 - minutes so come back when this is done
567:37 - okay we are back and the index has been
567:40 - successfully created with a status of
567:42 - enabled so now if I go back to the app
567:44 - and I refresh this page here
567:47 - we should
567:51 - see those comments which we are not
567:54 - cool okay there's another error here uh
567:57 - function where called with in valid data
568:01 - unsupported field value
568:03 - undefined okay all right so I think
568:05 - what's Happening Here is it is trying to
568:08 - uh make this query here but our selected
568:10 - post ID is undefined on the first render
568:14 - of this component because we do need to
568:16 - go fetchup from the database and
568:17 - actually populate state so there is a
568:18 - moment where the selected post is null
568:20 - and the ID is undefined so to prevent
568:23 - this what we can do is actually add a
568:25 - dependency in this use effect here and
568:28 - only call the get post comments function
568:30 - when we do indeed have the selected post
568:32 - successfully fashioned the database and
568:34 - in state okay so we can add a dependency
568:36 - here of selected post then as we've seen
568:39 - before we can protect against running
568:41 - this function by simply checking for the
568:43 - truthiness of the selected post and if
568:45 - there is no selected post we can just
568:47 - return out of the use effect and not
568:49 - call our function so let's save this and
568:51 - that should work and it seems to have
568:53 - worked but let's try refreshing the page
568:54 - and make sure that that actually does
568:56 - work
568:58 - perfect so it does work that looks
569:01 - amazing I love it and we should be okay
569:03 - I'm just gonna say we should be able to
569:05 - delete them but we have not written out
569:06 - that function yet I'm getting ahead of
569:08 - myself here uh on this error in the
569:10 - console is saying that we do not have a
569:13 - key prop in our comments item so yes
569:16 - when we do map through uh the items here
569:19 - we want to add a key as required by
569:21 - react and the key we can just make the
569:23 - comment dot ID
569:26 - if I refresh so we get rid of that ugly
569:28 - error in the console
569:29 - we can see all of the nice loading State
569:31 - boom and to make this even actually a
569:33 - bit cleaner we can hide our input
569:35 - completely until the comments have been
569:37 - fetched as well just so we don't see uh
569:40 - the input as the only thing on the
569:42 - screen while they're being fetched so we
569:43 - can add a condition here to only show
569:45 - the common input if we are not in the
569:48 - process of fetching these comments so
569:50 - now if I refresh
569:54 - awesome that looks just a little bit
569:56 - better but it makes a big Improvement in
569:58 - my opinion so that looks amazing all we
570:00 - have to do now is write out the delete
570:01 - function which is pretty much just the
570:03 - complete opposite of the create function
570:05 - so not super difficult there and then we
570:07 - will be able to delete comments create
570:09 - comments and we will be done with the
570:11 - comment functionality and we are even
570:13 - closer to the finished product all right
570:17 - you guys all we have left to do to
570:18 - complete our commenting functionality is
570:21 - to write out the on delete comment
570:22 - function and if you remember we outline
570:24 - the steps that we are going to do inside
570:26 - this function and they are pretty much
570:27 - just the mirror actions of the oncreate
570:30 - comment function so nothing crazy here
570:33 - and we just have to undo the creation of
570:36 - one so underneath these comments I'm
570:37 - going to create a try catch block
570:40 - and I'm going to remove that return
570:41 - statement there
570:43 - and we can start off by logging the
570:45 - error on delete comment
570:49 - okay and let's move these comments into
570:52 - our try block and let's start off with
570:53 - deleting our comment document so we're
570:56 - going to need to create our batch
570:57 - instance because we are going to be
570:58 - working with batch operations so we can
571:01 - bring in our right batch function and
571:03 - test this our firestore instance okay
571:05 - let's create a reference to the document
571:08 - that we're going to be deleting so we
571:09 - can say comment doc ref is equal to Doc
571:13 - passes our fires for instance the
571:15 - collection we are deleting from is
571:17 - comments and the ID of the document we
571:19 - are we are deleting is comment dot ID
571:22 - and we can actually change the type of
571:24 - this to a comment now because we have
571:27 - that type defined
571:29 - then we can add the delete operation to
571:31 - our batch batch.delete and we are
571:34 - deleting the comment document okay
571:37 - second thing in our batch is going to be
571:38 - updating the number of post comments on
571:41 - the post document so we can create a
571:43 - document reference to that post so post
571:46 - doc graph is equal to Doc as in our
571:48 - firestore instance posts collection and
571:51 - the ID of the post we are updating is
571:54 - going to be our selected post dot ID and
571:57 - we can have the bang operator here and
571:59 - then we can add the update operation to
572:00 - our batch exact same as what we did in
572:03 - the creation of posts and we are
572:04 - updating our postdoc ref and the update
572:06 - we want to make is to the number of
572:09 - comments field and we want to increment
572:12 - this by negative one decrease it by one
572:15 - so that is it for our batch operations
572:17 - now we can actually write these to the
572:19 - database so we can say awaitbatch dot
572:22 - commit
572:23 - and then when those have successfully
572:24 - completed we just need to update our
572:26 - client state so let's do that all right
572:28 - so just like in the creation of a
572:30 - comment we updated the number of
572:32 - comments on the selected post by one so
572:35 - now we're just going to decrease it by
572:37 - one so we can do that by calling our set
572:39 - Post State function take the previous
572:41 - value
572:42 - and we want to update the selected post
572:45 - and the field we want to update on the
572:47 - selected post
572:49 - is number of comments and we want to
572:51 - take the previous value of the number of
572:54 - comments
572:56 - and subtract 1 from it and we can add
572:59 - the bang operator here and then we can
573:00 - tell type script that this is an object
573:03 - of type post now what we need to do is
573:06 - just remove that comment from our
573:08 - comments array so we can filter our
573:10 - comments so we can say set comments
573:13 - take the previous value of this array
573:15 - and turn it into a filtered version by
573:17 - calling preview.filter take each
573:19 - previous comment item and check to make
573:21 - sure that its ID does not equal to the
573:25 - ID of the comment that we are deleting
573:27 - to save this so the very last thing we
573:30 - are going to do is Implement our loading
573:32 - state for deleting and if you remember
573:33 - we just temporarily passed in a value of
573:37 - um where is it here
573:38 - a value of false but we're actually
573:40 - going to implement this now now if you
573:42 - remember what the Spinners look like on
573:43 - these things we had individual voting
573:45 - States for each individual comment item
573:47 - so we knew which one was in the process
573:49 - of being deleted and so there are two
573:51 - ways to do this and if you remember from
573:53 - deleting a post if you go back to our
573:55 - use post hook here
573:57 - um on our delete post function what we
574:00 - did was we had this function return a
574:03 - promise and we called this function from
574:06 - with inside of our post item
574:08 - like this we created another function
574:10 - called handle delete that is local to
574:12 - the post item and that function called
574:14 - our on delete post function which
574:16 - returned a promise and this allowed us
574:18 - to do independent error handling and
574:19 - loading handling in each individual post
574:22 - item and in this case we're going to do
574:24 - a little bit of a different approach
574:25 - just so I can show you another method to
574:26 - do this inside of our comments function
574:29 - here rather than having loading State
574:32 - declared in each individual comment item
574:35 - we are going to have a single delete
574:38 - loading state so we are going to create
574:39 - a single state variable for our deletion
574:43 - so rather than using a Boolean like the
574:45 - other one so just true or false sort of
574:46 - this binary method here we are going to
574:49 - instead have this be a string State
574:51 - variable and when I click on a
574:52 - particular comment to delete it it is
574:54 - going to set the delete loading ID to be
574:57 - that comments ID that way when we're
575:00 - mapping through our comment items here
575:02 - we can use that logic to send a Boolean
575:05 - to the specific comment item and it will
575:08 - have hobby true or false of whether or
575:10 - not this is the one that is being
575:11 - deleted it's very very similar to having
575:13 - selected state if you remember like in
575:15 - our in our new post form nav we were
575:17 - able to determine which one was
575:18 - currently clicked on very similar here
575:21 - um very similar idea so hopefully this
575:23 - will make more sense once we write it
575:25 - out if it if you're kind of confused so
575:27 - we're going to call this uh loading
575:29 - delete ID and set loading delete ID
575:34 - and as I mentioned we are going to
575:36 - declare this as a string not a Boolean
575:39 - and an empty string is falsy so we're
575:42 - pretty much initializing it as false and
575:44 - inside of our and delete comment
575:45 - function at the very top we want to set
575:48 - loading delete ID to be the ID of the
575:50 - comment that we are trying to delete and
575:52 - at the bottom down here we can set it
575:55 - equal to an empty string which is again
575:57 - falsi then down here to actually pass
576:00 - this prop to this component and to have
576:03 - it know whether or not it's being
576:04 - deleted we can say does the loading
576:07 - delete ID equal to this particular
576:10 - comment that we're iterating through is
576:11 - ID just like this okay so let's try this
576:15 - out so let me try clicking delete
576:18 - and you saw that only that one had the
576:21 - spinner there and that is thanks to this
576:23 - loading delete State we store the ID of
576:26 - this particular post so watch up here
576:29 - so that's pretty cool I think that's
576:30 - cool the other option to do it like I
576:32 - said before was with how we did it with
576:33 - the post where we would create another
576:35 - function inside of our comment item
576:37 - which would call our on delete function
576:39 - inside of here and then this function
576:42 - would return a promise when it is
576:43 - successfully deleted and then inside of
576:46 - the component we would know locally
576:47 - whether or not it was successful and we
576:49 - could show the loading State and blah
576:50 - blah blah but in this case we sort of
576:52 - are having a single state variable that
576:55 - is acting as the loading state of all of
576:57 - them so hopefully you find those two
576:59 - methods sort of interesting and yeah
577:01 - just a few a different way to handle
577:02 - loading States but yeah so now we can
577:04 - delete comments and create them so here
577:06 - is a new comment you can post this
577:09 - and then if I don't like it delete it
577:11 - very cool if you go to our database and
577:14 - check this out in real time if I create
577:16 - a new comment hey there do nice post if
577:20 - I post this watch on the left
577:22 - the document appears instantly and if I
577:25 - go to the posts
577:26 - there's four comments
577:28 - which matches our client State here
577:30 - perfect I create a new one nice
577:33 - that updates to five if I delete this
577:36 - four
577:37 - three the loading State works the batch
577:39 - rights are working and that wraps up our
577:42 - commenting functionality all right you
577:44 - guys so now that we have built all of
577:46 - this amazing Community functionality we
577:48 - have been able to create communities we
577:49 - have been able to create posts within
577:52 - communities comment on those posts
577:54 - delete the posts and the comments vote
577:55 - on those posts change the profile image
577:58 - of communities we have done all this
577:59 - amazing stuff the next logical step
578:01 - would be to actually be able to navigate
578:03 - between these communities that we are in
578:05 - using our drop down directory menu up
578:08 - here long long ago I mentioned that we
578:10 - were going to cover this kind of more
578:12 - towards the end because it is a simple
578:13 - component and we're already doing the
578:15 - heavy lifting for it we're already
578:16 - fetching our community Snippets you just
578:18 - have to build out the UI of this
578:20 - component so from within here we are
578:22 - able to create Community successfully
578:23 - with our create Community model the only
578:25 - thing that is missing is the actual list
578:27 - of communities that we are in if we go
578:29 - to our demo here to look at what I'm
578:30 - talking about let me expand this a bit
578:32 - so we can we can see that we are going
578:34 - to build out the menu items here for
578:36 - each of the communities that we are in
578:37 - and have a moderating section for the
578:39 - ones that we ourselves have created as
578:41 - well as our option to create the
578:43 - community and this is going to at the
578:45 - top in the menu show which Community we
578:47 - are currently in in our app right now
578:49 - it's just by default home and there's
578:51 - nothing else going on me it's just sort
578:53 - of hard-coded the home in there and it
578:55 - doesn't matter what community we're in
578:56 - it just always says home now we want to
578:58 - build this component to actually know
578:59 - what community that it is currently in
579:01 - and display that as well as the profile
579:03 - picture and allow us to navigate between
579:06 - these communities and in building this
579:08 - component we are going to build another
579:09 - custom react hook and have it manage the
579:12 - global recoil state for our directory
579:15 - and the reason we are making this Global
579:16 - using recoil and having a hook manage
579:19 - the state for us is because we are also
579:21 - going to build the functionality to be
579:23 - able to open the directory from the
579:25 - create post link on the home page here
579:27 - if they click on the create post link
579:29 - and they're not in a community we open
579:31 - this menu to allow them to choose which
579:33 - Community they want to build the post in
579:35 - I know on Reddit that you don't have to
579:37 - necessarily Post in a community but it
579:39 - seems like posting in communities is
579:40 - much more popular than just posting in
579:42 - not a community so I've decided to build
579:45 - the functionality to only be able to
579:47 - post in communities it is going to
579:48 - prompt them to choose which Community
579:50 - they would like you post it and then I
579:51 - can go directly to that so for that
579:53 - reason because we have this component
579:54 - that is far away from this component in
579:57 - the react componentry we are going to
579:59 - manage the state of this menu from
580:02 - recoil and using a custom hook so that
580:04 - both components can toggle and read from
580:07 - that state okay so I just did some quick
580:09 - Version Control here to get us all set
580:12 - up to develop this new feature and I'm
580:13 - just going to remove all of these files
580:16 - because we do not need them anymore and
580:18 - I'm going to go back into the directory
580:22 - file from way way back that we haven't
580:24 - touched in a while and if you remember
580:26 - we created just the skeleton of our
580:30 - communities component which if I open it
580:32 - up I believe that is where our create
580:34 - Community model is right now so that is
580:36 - how we are actually able to open up this
580:38 - model and create a community so
580:40 - essentially all we need to add in this
580:42 - component is just the actual list of our
580:44 - community Snippets and create a menu
580:46 - list item for each one so what we're
580:48 - going to do is start off by pulling in
580:50 - that
580:50 - from our recall State Community State
580:52 - value so we can declare that up here in
580:55 - a variable called my Snippets and we can
580:57 - use our use recoil value hook and we can
581:00 - pass this our community State atom
581:02 - Community State and we only want to grab
581:04 - my Snippets from Community State we
581:07 - don't really care about anything else in
581:08 - this component okay so underneath our
581:10 - community modal here let's add in a box
581:13 - component from Chakra and this is going
581:15 - to be a container of all of the list
581:17 - items so the first component inside of
581:19 - this box is going to be a piece of text
581:21 - and that text is going to say in all
581:23 - caps my communities
581:26 - so let's open this up so we can see what
581:28 - we're doing here okay on this outermost
581:30 - container we're going to add some
581:32 - satellite here so we're going to give
581:33 - this a margin top of three as well as
581:36 - eight margin bottom of four on this in
581:39 - my communities text we're going to give
581:41 - this a padding left of three and some
581:45 - bottom margin of one you're also going
581:47 - to make it quite small and make the font
581:50 - size seven point
581:52 - and the font weight is going to be 500.
581:56 - and we're also going to make it gray
581:57 - gray 500 just like this
582:00 - so underneath our create Community menu
582:02 - item we are going to actually Loop
582:04 - through our community Snippets and for
582:06 - each one we are going to create a menu
582:08 - list item with a community name in it so
582:10 - we can take our Snippets and map through
582:12 - them and for each snippet we want to
582:15 - actually build out some piece of HTML
582:17 - and that piece of HTML is going to be
582:19 - its own component called menu list item
582:21 - but for now let's just make an empty div
582:23 - with the Snippets
582:25 - dot Community ID so we can see something
582:27 - showing up on the screen there so now we
582:29 - can actually see the list of my Snippets
582:32 - okay so now let's actually build out the
582:33 - menu list item component and this is
582:35 - going to lead us into building out the
582:37 - recoil atom for a directory state so
582:40 - inside of our directory folder here I'm
582:42 - going to create a new file called menu
582:44 - list
582:45 - item.tsx we can use our snippet so the
582:48 - first prop that we're going to take into
582:50 - this component is going to be called
582:51 - display text
582:52 - and this is going to be Hub type string
582:54 - and it's actually what's going to be
582:55 - displayed in the menu item here
582:59 - um in the in the list here the r slash
583:00 - Community ID
583:02 - the second prop we're going to take in
583:03 - is going to be the link to that
583:06 - community so when the user clicks on it
583:07 - they can actually go inside of that
583:09 - community
583:10 - the third problem we're going to take in
583:11 - is going to be an icon and this is going
583:13 - to be of type icon type so make sure
583:16 - this imports from react icons our fourth
583:19 - prop is going to be an icon color and
583:21 - this is going to help us differentiate
583:22 - between the moderator list and the
583:24 - regular Community list and this is going
583:26 - to be a type string and the fifth prop
583:28 - is going to be the image URL which is
583:30 - going to be the profile picture of the
583:32 - image and this is going to be actually
583:33 - optional because not all communities
583:35 - have to have an image URL so sometimes
583:37 - it's going to be undefined so down here
583:39 - we can destructure these
583:40 - display text link
583:43 - icon icon color and image URL
583:47 - and the HTML for this component is
583:49 - relatively straightforward it's only
583:50 - about 10 to 20 lines so each menu list
583:52 - item is going to actually be a menu item
583:55 - component from Chakra so menu item make
583:58 - sure that imports from Chakra and we are
584:00 - going to apply some styling to these we
584:01 - are going to give all of these a width
584:03 - of 100 percent
584:05 - a font size of 10 point
584:09 - some hover styling
584:11 - which is going to have a background of
584:13 - gray 100 and we are also going to have
584:15 - an on click function that is going to
584:17 - Route us to this community but for now
584:19 - we're just going to leave it as an empty
584:21 - callback we will come back to this when
584:22 - we build out our custom hook for our
584:24 - directory then inside of this menu item
584:27 - we want to have a flex container
584:30 - on our Flex we're going to make the
584:32 - vertical alignment center
584:35 - inside of here we're going to add a
584:36 - condition to check for the existence of
584:39 - an image URL because if the image URL
584:41 - exists we want to display that and if it
584:43 - does not we're just going to display our
584:44 - famous Reddit icon so if there is an
584:47 - image URL we are going to have an image
584:49 - component from Chakra
584:51 - the source of our image component is
584:53 - going to be our image URL we are going
584:56 - to give this a border radius of full to
584:58 - make it round and we're going to give it
585:00 - a box size of 18 pixels and we're going
585:03 - to give it a margin right of 2. to add
585:04 - some space between this and the text
585:06 - that is coming up if there is no image
585:08 - we're just going to display an icon
585:11 - and the icon is going to be the icon
585:13 - prop that we are going to pass in we are
585:15 - going to give this a font size of 20 and
585:19 - some margin right of 2 and we're going
585:21 - to give this a color equal to the icon
585:24 - color prop then underneath this ternary
585:26 - operator is where we're actually going
585:27 - to show the display text
585:30 - so let's go back to our app so we can
585:31 - see what we're doing here and let's
585:33 - actually bring this component in so we
585:37 - can get rid of this div here and we are
585:39 - going to render our menu list item
585:42 - component that we just created we can
585:44 - pass this a key of this snippet dot
585:48 - Community ID because that's a unique
585:49 - identifier the icon we're going to pass
585:52 - in is going to be fa Reddit
585:55 - our display text is going to be a string
585:59 - and we're going to use a template
586:00 - literal here and it's going to be r
586:02 - slash then snippet
586:06 - dot Community ID so it's like r slash
586:08 - Chinese group or r slash baking
586:10 - okay let's save that so formats we're
586:12 - going to pass in a link string so that
586:15 - our next JS router can take us to this
586:18 - link and the link is going to be forward
586:20 - slash R make sure to include the forward
586:22 - slash before the r here so that our
586:24 - router knows you place it after the
586:26 - domain name it says forward slash R
586:27 - forward slash then it's going to be our
586:30 - snippet dot Community ID and that is
586:33 - that and so this is what we're going to
586:34 - pass to our router our icon color
586:37 - is going to be blue 500
586:39 - and our image URL is going to be snippet
586:43 - dot image URL and so the reason we have
586:45 - a prop for our icon color as well as our
586:47 - icon is because we are going to reuse
586:49 - our menu list item component up here in
586:52 - a little bit when we display the list of
586:54 - communities that we are moderating
586:55 - because they're going to vary slightly
586:56 - and so that's why they're capacitance
586:58 - props and not used directly in the menu
587:00 - list item okay so let's let's save this
587:02 - okay so I think the reason that it's not
587:04 - showing the image URL here is because we
587:07 - added the functionality of uploading
587:09 - Community images after we had created
587:11 - this community and after the community
587:13 - snippet was inserted into my users
587:16 - Community Snippets array and so I think
587:18 - the community snippet does not have the
587:20 - image URL right now okay and this is
587:22 - because we built that functionality
587:23 - afterwards so all we would have to do to
587:25 - fix this is to just go back to the
587:27 - Community page and then join and leave
587:29 - the community and that should put a new
587:32 - snippet with the imagery on it so if I
587:35 - leave the community
587:37 - that should have been deleted from the
587:39 - database yeah I'm not in that Community
587:41 - anymore if I rejoin it should have
587:43 - created a new one yeah with the image
587:45 - URL so now if I open up the directory
587:47 - the image isn't there okay so now let's
587:49 - quickly build out the moderating section
587:51 - of this list because it's extremely
587:53 - similar to this we just have to apply a
587:54 - filter we go to our demo it pretty much
587:57 - just have the moderating section and
587:58 - then the my community section and the
588:00 - ones you are moderating also do appear
588:02 - in the my communities list that's how it
588:04 - appears on Reddit so that is how I made
588:05 - it so then inside of our directory here
588:07 - the component for our moderating section
588:09 - is going to be very very similar to this
588:12 - I'm just going to grab that entire box
588:14 - and paste it up above here like this but
588:16 - we can get rid of the create Community
588:18 - menu item
588:19 - and this is going to say instead of my
588:21 - communities it's going to say moderating
588:23 - okay so if I save this now we have a
588:26 - duplicate list so we need to apply a
588:28 - filter here to this Snippets rate so
588:31 - before we map through it we want to
588:33 - actually
588:33 - filter these to only be the ones that we
588:38 - are moderating and to do that filtering
588:40 - we can look at each snippet in this
588:42 - array and see if the is moderator key
588:45 - exists and is true and then once that
588:47 - filter is done we can then map through
588:49 - those results okay so I save this and we
588:51 - can see that there are no communities
588:52 - that I'm currently moderating okay so
588:54 - the user I'm currently logged in as is
588:56 - clearly the creator of this community
588:58 - because I can change the image right
588:59 - only only creators and admins of this
589:01 - community can do that however it is not
589:03 - showing up in my moderating section of
589:05 - the list even though I clearly am the
589:07 - creator of this community so it should
589:08 - definitely be in here I should
589:09 - definitely be a moderator and the reason
589:11 - that is is because what we have to do
589:12 - just a few minutes ago with having to
589:13 - leave and then rejoin the community to
589:15 - allow that new image URL functionality
589:18 - to be included in the snippet So
589:20 - currently it's built so that even if you
589:21 - create a community and you're added as a
589:23 - moderator if you leave that community
589:25 - that you created and then rejoin you're
589:27 - not automatically added back as a
589:30 - moderator and we can actually add that
589:32 - functionality because I do think it
589:33 - makes sense now that I think about it
589:34 - too if you leave a community that you
589:36 - created and then rejoin maybe you should
589:38 - be added back as a moderator so we can
589:39 - do to fix that is go to our use
589:41 - Community data hook and go back to our
589:43 - on join Community function so inside of
589:46 - our join Community function all we have
589:48 - to do is on this new snippet that we're
589:50 - creating we can add that is moderator
589:52 - key here and we can just check like does
589:55 - this user's ID equal the community data
589:59 - dot Creator ID that's all we have to add
590:01 - so I think now that we've added this
590:03 - code we should be able to leave this
590:06 - community
590:07 - and then rejoin and now it should end up
590:10 - in my moderating section yeah because if
590:12 - I go to the database now
590:14 - um and go back to community Snippets I
590:16 - should be a moderator right because I I
590:18 - rejoined a community that I am the
590:20 - creator of and so now it's showing up in
590:22 - here successfully which is perfect but
590:24 - I'm kind of glad we discovered this
590:25 - because
590:27 - um I think it does make sense to just be
590:28 - automatically added back as a moderator
590:30 - and also if I change the community image
590:32 - here
590:33 - to be say this Google logo
590:36 - if I save those
590:37 - take that change now if I were to
590:40 - refresh this page the community snippet
590:43 - should have that updated image because
590:45 - the community snippet and the community
590:47 - are pointing to the same image URL and
590:50 - so when I update the community image the
590:52 - community snippet is also going to be
590:54 - updated as well so that is super cool
590:56 - okay so now we're going to start working
590:57 - on the actual recoil atom that
590:59 - represents the state of our directory
591:01 - menu so the openness of it as well as
591:04 - the currently selected directory menu
591:06 - and then we can build out our custom how
591:08 - to manage that state so that we can
591:09 - toggle the openness from the create post
591:12 - link on the home page okay so inside of
591:14 - our directory here uh I forgot how
591:17 - confusing it is to have the directory
591:19 - component called the directory and we
591:21 - have a file directory it's kind of
591:23 - confusing inside of our folders inside
591:25 - of atoms let's create a new file called
591:29 - directory menu Adam dot TS
591:34 - okay so we can import Adam from recoil
591:37 - so just like all of our other atoms we
591:39 - can create a typescript interface to
591:40 - model what this state is going to look
591:42 - like so for our directory menu State we
591:44 - can create an interface called directory
591:46 - menu state
591:48 - and there's only going to be two things
591:50 - in here the first one is going to be is
591:52 - open is this thing open or not similar
591:54 - to our modals and the second thing is
591:56 - going to be the selected menu item so
591:58 - what is currently selected in this drop
592:01 - down menu and right now I'm going to
592:03 - make this up type any but we're going to
592:04 - actually come up here and create a type
592:06 - for our selected menu item and this is
592:09 - going to tie into the props that we are
592:11 - passing to our menu list item here so
592:13 - bear with me if that doesn't make sense
592:15 - I'm just going to close the left hand
592:17 - side directory and let's create the type
592:21 - for our directory menu so directory menu
592:24 - item so our directory menu item type is
592:27 - going to have the same properties that
592:29 - we are passing as propped to our menu
592:31 - list item here because for each menu
592:32 - list item we're pretty much creating a
592:35 - directory menu item and so they're going
592:37 - to have the same properties so this is
592:38 - going to have display text
592:40 - type string a link of type string an
592:44 - icon of Icon type make sure that imports
592:47 - from react icons
592:48 - icon color which is a string as well as
592:51 - an optional image URL
592:54 - and also I think I forgot in the
592:56 - communities component the icon color we
592:58 - want to pass to our menu list item in
593:00 - the moderating section it is not
593:02 - supposed to be blue 500 it is supposed
593:04 - to be brand 100 which is that Reddit
593:07 - orange so um in the directory menu item
593:09 - if this did not have an image the icon
593:12 - would be orange which would sort of
593:14 - indicate that we are a moderator of that
593:15 - community and that's sort of how we
593:16 - differentiate them there that's not
593:18 - super important though that's just a
593:19 - very small detail okay back to our
593:21 - directory menu item here now we can
593:23 - declare this selected menu item as type
593:26 - directory menu item and we can also
593:28 - create a variable to represent our
593:30 - default menu item and our default menu
593:32 - item is just our home page right it's a
593:34 - home text with the sort of home icon
593:36 - that's sort of our default when we're
593:38 - not in a community so we can say export
593:40 - const default menu item
593:43 - and we're exporting it because we're
593:45 - going to need it in our custom hook
593:47 - and this is going to be up type
593:48 - directory menu item
593:51 - and our display text for this is going
593:53 - to be home
593:55 - our link is just going to be the index
593:58 - route the icon is going to be an icon
594:01 - called Ti home so make sure this imports
594:03 - from react icons TI and the icon color
594:07 - is going to be black so this is sort of
594:10 - why we have those props for Icon and
594:13 - icon color because they're not always
594:15 - the same and so I wanted to make a sort
594:17 - of a generalized solution where we could
594:19 - really have any icon or any icon color
594:21 - and so that's why they're being passed
594:23 - as prompts then what we can do is as you
594:25 - as usual create a variable to represent
594:27 - our default state for this atom so we
594:30 - can say export const default menu State
594:33 - and this is going to be of type
594:35 - directory menu state
594:37 - and we want the is open parameter to be
594:40 - false because we want it to be closed
594:42 - and when the user opens the application
594:43 - and our selected menu item is going to
594:45 - be our default menu item and so to start
594:47 - off as the home item and then it'll
594:49 - change depending on what community they
594:51 - are in if they navigate to a community
594:52 - all right now we are ready to actually
594:53 - create The Recoil atom so we can say
594:55 - export const directory menu state is
594:59 - equal to atom
595:01 - and this is going to be up type
595:03 - directory menu state
595:05 - then inside of here our default key can
595:08 - just be directory menu State and the
595:11 - default initial value of state is going
595:13 - to be our default menu state
595:15 - just like this awesome and that is it
595:17 - for this file this is all that
595:20 - represents our directory menu so this is
595:22 - like the most important part here that
595:24 - we have just two pieces of State
595:25 - representing our directory menu we have
595:27 - whether it is open or not as well as the
595:29 - currently selected menu item which is
595:31 - just one of those Community list items
595:33 - okay so this is how we're going to use
595:35 - this is open parameter from our
595:37 - directory menu state so if you go back
595:38 - to our directory so Shocker's menu
595:40 - component allows us to pass in a prop
595:43 - called is open
595:45 - so for example if I pass this as false
595:47 - it's never going to let me open this
595:49 - thing so the reason this is useful is
595:51 - because we can pass in the value of our
595:55 - is open state from our recoil atom to
595:58 - our directory menu here and that is how
596:00 - we are going to be able to actually
596:01 - toggle the openness of this menu from
596:04 - other components and this should become
596:05 - even more clear when we build out the
596:07 - custom hook so let's start working on
596:09 - that so let's go into our hooks folder
596:13 - and let's create a new Hub called use
596:16 - directory
596:17 - dot TSX
596:19 - okay use our snippet here
596:21 - and we are not going to be taking in any
596:23 - props we can get rid of this
596:26 - okay and we are just going to return for
596:29 - now an empty object and then we can get
596:31 - rid of the return type
596:33 - react.xc so just like our other custom
596:35 - hooks this Hook is going to manage our
596:37 - recoil state of our directory menu and
596:40 - we can access this state from any other
596:42 - component just by calling this hook so
596:44 - we can pull in our directory state by
596:46 - saying directory State set directory
596:49 - state is equal to use recoil
596:52 - State and we want to pass in our
596:55 - directory menu State atom so make sure
596:58 - that Imports all right so before we
596:59 - actually build the rest of this out I
597:01 - want to show you how this is going to be
597:02 - used inside of our directory to provide
597:04 - some clarity so the first thing we're
597:06 - going to return from our Hook is going
597:07 - to be the actual value of our directory
597:09 - state which if you remember has two
597:11 - pieces is it open and the currently
597:13 - selected menu item so inside of our
597:16 - directory here now we can pull in that
597:18 - state from our custom hook
597:21 - so we can say const is equal to use
597:23 - directory
597:25 - and it does not want to import
597:28 - there we go okay and now we can actually
597:30 - pull in that directory State and so the
597:33 - value we want to pass to our is open
597:36 - prop of our shotgun menu is going to be
597:38 - our directorystate DOT is open
597:41 - so hopefully this is starting to make
597:43 - more sense now so I'm getting an error
597:45 - here use directory oh I think I have to
597:47 - save this okay that's probably why yeah
597:49 - okay okay so now it's false so so we're
597:52 - not we're not actually able to toggle
597:54 - the state of that yet but we're going to
597:56 - work on that but now we can control
597:58 - whether or not this menu is open using a
598:01 - recoil atom so let's go back to our hook
598:02 - here all right so let's create these
598:04 - sort of skeleton outline of this
598:06 - component here it's a pretty simple hook
598:07 - it's not super long at all so the first
598:09 - function is going to be called toggle
598:11 - menu open and this is going to be
598:13 - actually responsible for changing the
598:15 - open state of our directory menu and
598:17 - this is the function we're going to be
598:18 - able to call from anywhere in our app to
598:21 - actually open up our directory so we can
598:23 - create this as a function and inside of
598:25 - here all we want to do is call set
598:26 - directory state
598:28 - and toggle the value of the is open
598:31 - parameter to be the opposite of what it
598:33 - currently is so I want to update the is
598:35 - open property of our directory menu
598:37 - State and I want to change it to be the
598:39 - value that is that is opposite to the
598:42 - current value that's sort of what
598:43 - toggling is on off on off so if it's off
598:46 - I'm going to turn it on and if it's on
598:48 - I'm going to turn it off
598:50 - so now if I save this and I return this
598:53 - from a hook
598:54 - just like that then I go back to the
598:57 - directory component and I pull that
598:59 - toggle function in toggle menu open and
599:02 - then I pass this to the on click of our
599:05 - menu button here which is our like this
599:08 - thing here in our in our nav bar if I
599:10 - pass this to the other click so if I say
599:12 - on click is equal to toggle menu open
599:16 - now I should actually be able to open up
599:18 - the menu so how cool is that and this is
599:21 - the same function we are going to call
599:23 - from The Post Line from the home page
599:26 - and the Community page is just going to
599:27 - take us to the submit page but on the
599:29 - home page it's going to call that toggle
599:31 - menu open function which is going to
599:33 - open up this menu so now at a global
599:35 - level we can toggle the openness of this
599:38 - menu thanks to our recoil atom and this
599:40 - hook let's go back and continue building
599:42 - up this hook the other function that
599:44 - we're going to have in here is going to
599:46 - be the function that is triggered when
599:48 - the user actually clicks on a menu item
599:50 - in the directory so we're going to call
599:52 - that on select menu item
599:55 - and this is going to take in a menu item
599:58 - and it is going to be archetype
599:59 - directory menu item which we if you
600:01 - remember exported from our recoil item
600:04 - file
600:06 - so we're going to take this and we want
600:08 - to update our directory state
600:10 - to have this passed in menu item
600:14 - as the selected menu item so we can
600:17 - update selected menu item to be the menu
600:19 - item that was clicked on so when I click
600:21 - on Tesla motors for example that menu
600:24 - item is going to be sent to this
600:25 - function and then our directory state is
600:28 - going to be updated with the Tesla
600:30 - Motors menu item and probably the most
600:32 - important thing is when the user clicks
600:33 - on a menu item we actually want to take
600:36 - them to that route right like they're
600:38 - going they're clicking on it to go there
600:40 - not just for fun so we need to bring in
600:42 - our router from next router so router is
600:45 - equal to use router and after we set
600:48 - State we can call
600:50 - router.push and we can tell the router
600:53 - to take us to the menu items link
600:57 - so hopefully this is all starting to
600:58 - piece together now let's actually go see
601:00 - how we're going to use this on select
601:02 - menu item from within our menu so if we
601:04 - go back to our menu list item component
601:07 - which again represents a single item in
601:10 - our in our list here so when we click on
601:12 - one of these menu items we actually want
601:14 - to call that on select menu item
601:16 - function and set that state to be the
601:19 - one we clicked on so at the top we can
601:21 - pull that function in from our hook use
601:24 - directory and we can bring in toggle
601:26 - sorry not toggle menu item on select
601:28 - menu item and in this on click function
601:30 - here we actually want to change this to
601:33 - call that on select menu item function
601:35 - so inside this function here we can
601:37 - package up all of the props that are
601:39 - passed to this component into an object
601:41 - that is of type directory menu item
601:44 - because that is the type of the argument
601:46 - that is required by our on select menu
601:48 - item function and so that is why we are
601:50 - passing in all these props and that is
601:52 - why our directory menu item type has the
601:54 - exact same properties of the process we
601:57 - are passing in to this component here so
601:59 - we want to pass this an object and again
602:00 - this object is up type directory menu
602:02 - item which has property display text
602:05 - link icon icon color and image URL
602:10 - optional so now if I actually click on a
602:12 - different Community new new we should
602:15 - actually be taken to that Community page
602:17 - so let's click on it
602:19 - okay so the community updated and the
602:24 - data updated but the image is still
602:26 - showing okay I think on the um Community
602:28 - index page here yeah so we need to I
602:31 - initially declare this as an empty
602:33 - dependency array in this use effect here
602:35 - we need to add a dependency of community
602:38 - data and so this is so that every time
602:41 - we actually change communities and
602:42 - Community data changes we update our
602:44 - current Community State to be that
602:47 - latest community of data before without
602:48 - the dependency it was just running a
602:50 - single time we want to run this every
602:52 - single time the user navigates to a new
602:54 - community and Community data changes so
602:56 - if I save this now now that should
602:58 - update all right so the header updated
602:59 - but you'll notice that the post did not
603:01 - we're still seeing the posts from
603:03 - Shady's group and the reason that is is
603:05 - we have to go do the exact same thing in
603:07 - our get posts function use effect in our
603:10 - post component we need to add a
603:12 - dependency of community data so we go to
603:15 - our post component here yes we created
603:17 - this use effect and it's currently only
603:19 - built to run once because there's an
603:21 - empty dependency array and we want to
603:23 - call this function get posts every
603:25 - single time the community changes
603:27 - because you want to get the post for the
603:28 - community that the user is currently in
603:30 - so we can add a dependency here of
603:32 - community data which is being passed as
603:34 - a prop to this component and so now if I
603:37 - save this it should fetch the post from
603:39 - this community which currently there are
603:42 - none so let's create one just for fun
603:43 - inside new new blah blah blah blah blah
603:46 - blah random text okay post
603:50 - cool so now I'm in new new and I see
603:52 - this post I just made if I go back to
603:54 - Shady's group it should like resetch all
603:56 - of that data so now all that data
603:58 - updates the community data updates the
604:00 - header updates and everything so go back
604:02 - to new new the data updates so perfect
604:05 - so all we had to do was just add
604:06 - dependencies in our use effects to make
604:08 - them trigger every time we switch
604:10 - communities okay and also you'll notice
604:12 - that when I switch communities when I
604:13 - click on one of these menu items the
604:15 - menu just stays open right it'd probably
604:17 - be nice if it just closes once I click
604:19 - on a menu item that kind of makes sense
604:21 - so all we have to do to do that is if we
604:23 - go to our use directory hook here so
604:24 - right after we push the link to our
604:27 - router we can call our toggle menu open
604:29 - function to close the menu so we can say
604:31 - if the directory state
604:34 - dot is open then we want to close it we
604:37 - can call toggle menu open just like that
604:40 - and so now when I click on a menu item
604:42 - it should close it
604:44 - very nice that is beautiful okay so what
604:47 - we want to do now is actually change it
604:49 - so that the display text of the
604:51 - community as well as that icon are
604:53 - displaying in our menu here because
604:54 - right now it's always just home because
604:56 - I think we have home hard coded
604:58 - um in the menu button so if you go to
605:01 - our directory here
605:02 - thing yeah so we just have home here we
605:05 - need to change the icon as well as the
605:07 - text to be dynamic and pull from our
605:09 - state which we're already grabbing from
605:11 - our hook here okay so inside of here
605:13 - let's change this home text to actually
605:15 - be the currently selected menu items
605:17 - display text so we can say directory
605:19 - state
605:21 - dot selected menu item dot display text
605:24 - so now if I save this we should see
605:27 - Shady's group in the thing that awesome
605:29 - so now it's actually the community we're
605:31 - currently in so if I go to new new
605:33 - updates now we need to change the icon
605:36 - so what I'm going to do is above this
605:37 - icon I'm going to add a ternary operator
605:39 - to check for the existence of the
605:44 - selected menu items image URL and if the
605:46 - image URL exists we want to display that
605:48 - instead of the icon and if it doesn't
605:50 - exist we will display the icon okay so
605:52 - let's check for the existence of the
605:54 - directory state DOT selected menu item
605:56 - dot image URL if this exists let's show
606:00 - an image from Chakra with the source of
606:03 - the image being the image URL from the
606:05 - selected menu item and if it does not
606:06 - exist we are just going to show the icon
606:09 - and the icon we want to pass in the as
606:12 - prop as the directory state DOT and
606:16 - selected menu item dot icon just like
606:18 - that and we want to make the color of
606:21 - this icon the icon color from the
606:23 - directory state so you can see directory
606:25 - state DOT selected menu item dot icon
606:27 - color Okay so let's save this so that a
606:29 - format okay so now we can see the icon
606:31 - of this community is actually in this
606:33 - component here so let's make it so we
606:35 - can see the image if it exists so we're
606:36 - going to make the source of this image
606:38 - equal to the directory state
606:41 - no autocomplete dot selected menu item
606:44 - dot image URL okay and we're going to
606:47 - make the Border radius full so that it
606:50 - is circular
606:51 - and we want to make this a box size of
606:54 - 24 pixels
606:56 - and we can give this some margin right
606:58 - up to you
606:59 - so now if I go to a community that
607:01 - actually has an image URL like Chinese
607:03 - group it should show there
607:05 - which it does perfect that is so cool
607:08 - and if I expand this out
607:10 - we can see that it says our Chinese
607:12 - Viewpoint actually has the icon or the
607:15 - image for that community so that is
607:17 - super cool all right so we are very very
607:19 - close to being done our custom look
607:20 - there's just one more thing we have to
607:22 - add and this has to do with what I'm
607:24 - about to show you so right now our
607:26 - directory menu is showing properly it's
607:29 - currently Shady's group and it has our
607:30 - image URL which is perfect but what
607:32 - happens if I refresh
607:35 - and we're starting off on the schizer
607:37 - page you can see that it's initialized
607:39 - as the home icon and that is if you
607:43 - remember the default value of our
607:46 - directory menu we have the default menu
607:48 - item which is our home so right now it
607:50 - is not built to know what community it's
607:52 - in if you're starting off on that
607:54 - Community page right it has to do with
607:55 - again that refreshing thing so the
607:57 - initial state of this needs to be
607:59 - toggled if we're starting off on the
608:03 - Community page because right now we're
608:04 - only updating that state if we actually
608:06 - click on something right but we it
608:09 - doesn't know how to update by itself
608:10 - based on the value of current community
608:12 - so that's what we have to do so let's go
608:15 - into our use directory hook and we can
608:17 - handle this very similar to how we
608:18 - handled the refreshing problem for the
608:21 - community data as well as the single
608:24 - post page view so we can create a use
608:26 - effect that is essentially going to
608:28 - listen to the current Community value
608:31 - and based on what that is it is going to
608:35 - you update the selected menu item by
608:38 - itself without having to click on one
608:40 - explicitly so we're going to have this
608:42 - user effect have a dependency of the
608:45 - Community State values current Community
608:47 - because we already solved the refreshing
608:49 - problem for the community data so the
608:51 - community data is being fetched on
608:54 - refresh and so current Community state
608:56 - is being updated so if we listen for
608:58 - updates to the current Community State
609:00 - we will also be able to update our
609:03 - directory menu item to be that current
609:04 - communities item so we have this like
609:06 - really nice data flow triggering thing
609:09 - like where the community updates and
609:10 - then that triggers another thing and
609:11 - it's just a nice data flow so at the top
609:14 - here we're going to need to bring in our
609:15 - community State value so we can create a
609:17 - variable called Community State value
609:19 - and we can use our hook use recoil value
609:23 - and we want to pass in our community
609:25 - State atom then as a dependency on this
609:28 - use effect we want to listen to changes
609:31 - in the community State values current
609:33 - community so now every time current
609:35 - Community updates we are going to
609:37 - trigger this use effect so I'm just
609:39 - going to destructure the Community State
609:41 - value and grab the current Community
609:44 - from it like this current Community okay
609:46 - so now we can check for a truthy value
609:48 - of their current community and if there
609:51 - is 1 we want to update our directory
609:54 - states to be that Community as a menu
609:56 - item and this is extremely useful for
609:59 - the refresh case because we're basically
610:00 - telling this component how to update
610:02 - itself without needing to explicitly
610:05 - click on one of those menu items because
610:06 - this use effect is going to listen to
610:08 - changes in the value of current
610:10 - Community which is updated by our used
610:11 - Community data hook so you can say if
610:14 - current community
610:16 - we can call our set directory State
610:18 - function take the previous value and we
610:21 - want to update our selected menu item
610:24 - and we want to set the selected menu
610:26 - item to be an object of type directory
610:28 - menu item so we need this to have all of
610:30 - the properties that is required by that
610:33 - state here which are all of these things
610:35 - here directory menu item our display
610:37 - text
610:38 - we can make R forward slash
610:41 - then we can take the ID of the current
610:43 - community so we can say commute current
610:45 - Community
610:45 - dot ID
610:48 - the link
610:49 - we can set to be forward slash R forward
610:53 - slash
610:54 - current community
610:56 - dot ID
610:57 - okay
610:58 - typescript is freaking out right now
611:00 - this looks all these red underlines the
611:03 - next one is going to be our image URL
611:04 - which is going to be the current
611:05 - Community Dot imageurl and then we just
611:08 - want to pass in a fallback icon in case
611:11 - the image URL does not exist then it's
611:14 - just going to show our fa Reddit Icon by
611:16 - default and the default color of that is
611:19 - just going to be blue 500.
611:22 - just like this perfect so now typescript
611:25 - is happy thank God all those red
611:26 - underliners are gone
611:28 - okay so now if I save this this updated
611:30 - okay so now if I refresh the menu item
611:34 - should no longer be home by default it
611:37 - should update to be Chinese Group which
611:39 - it did the image URL is there and you
611:41 - can see that
611:42 - perfect
611:44 - that is so cool so I can go into here I
611:47 - can refresh this and it's no longer just
611:49 - going to be the home value because it's
611:51 - picking up that there is a current
611:52 - community in state here and then it's
611:55 - updating our directory menu item to to
611:57 - be that current community and as well as
611:59 - its image URL Chinese group can refresh
612:06 - awesome that is amazing
612:08 - and then what we want to quickly do is
612:10 - make it so that if they click on the the
612:12 - logo here it just takes them to the home
612:14 - page that's pretty much how every
612:15 - website works if you click on the logo
612:16 - it just takes you home so let's go back
612:18 - to our navbar component here okay and on
612:20 - our logos here this flexbox represents
612:23 - our logos if you remember from way back
612:25 - from like part one we can add it on
612:27 - click here to these logos
612:30 - and we can call that select menu item
612:31 - function from our hook so we can bring
612:33 - that in up here we can say cons is equal
612:35 - to eu's directory
612:38 - and we can bring in our on select menu
612:40 - item function and then our on click for
612:43 - the logos in call
612:45 - are on select menu item function and
612:47 - pass in the default menu item which if
612:50 - you remember is just the home value it's
612:52 - the home tax with the home icon I'm
612:54 - actually going to make the cursor equal
612:56 - to pointer now
612:58 - because it's clickable
613:00 - so now I have to click on this it just
613:02 - takes them home and the menu item
613:04 - updates to just be the home icon as well
613:06 - as the home text and then go back size
613:09 - group it updates that is amazing so the
613:13 - very last thing we have to do related to
613:15 - our directory here is just go back to
613:17 - our create post component and actually
613:19 - have it open up the directory if there
613:21 - is no current Community meaning that
613:23 - they are on the home page so if we go
613:25 - back to our create post link component
613:27 - here we already have created this on
613:28 - click function that routes the user to
613:31 - the community submit page so if I click
613:33 - on this I go to the submit page of
613:35 - Shady's group we just want to add a
613:36 - condition to check if there is no
613:38 - Community ID let's open up the directory
613:41 - because if there is no Community ID that
613:43 - means that they're on the home page all
613:45 - you have to do is after grabbing the
613:46 - community ID off of the router we can
613:49 - check is there even a community ID if
613:51 - there is
613:53 - then we want to call router.push and
613:55 - take them to the submit page and if
613:57 - there is not a community ID we want to
614:00 - open our directory menu
614:02 - okay so in order to do that we need to
614:05 - bring in our toggle menu function from
614:07 - our hook so you can say const is equal
614:09 - to use directory
614:12 - bring in our toggle menu item function
614:15 - then down here we can call toggle menu
614:18 - open and we actually want to return out
614:20 - of this function if this if statement is
614:22 - triggered because we don't want to open
614:24 - the menu as well so if I save this now
614:26 - so if there is a community ID which
614:28 - right now there currently is a create
614:31 - post link is going to take me to the
614:32 - submit page but when I'm on the home
614:34 - page which we have not created yet when
614:36 - we add the create post link to our home
614:38 - page it's actually going to open up the
614:41 - menu and so that is how we're actually
614:43 - going to open up our directory menu from
614:45 - the home page and the home page is
614:47 - extremely simple to make because all
614:48 - we're going to do is just drop in
614:50 - components that we have already created
614:51 - and it's just going to magically work
614:53 - all right you guys so as I just
614:54 - mentioned we are going to be working on
614:56 - the home page of our app here because we
614:59 - have already covered all of the
615:00 - community based functionality and all we
615:02 - need to do now is work on the index page
615:04 - of the app and we basically just have a
615:06 - post feed very similar to the
615:08 - communities and then these right hand
615:09 - side supporting components here like the
615:11 - top communities and then these other
615:12 - sort of simple components here all right
615:14 - so since on the home page we are not in
615:16 - any particular Community we just need to
615:18 - write a few functions to actually build
615:20 - out the posts that will be inside of the
615:23 - user's feed because when we go into a
615:25 - community that query is very simple we
615:26 - just go find all the posts with the
615:29 - community ID that we are currently in
615:30 - but on the home feed we sort of need to
615:32 - write some different logic to actually
615:34 - determine what we're going to show to
615:36 - the user and we want to do this for both
615:38 - logged in users and users that are not
615:41 - logged in meaning that they're sort of
615:43 - visiting the site for the first time so
615:44 - if I log out you'll see that the feed
615:46 - changes and it's slightly different and
615:49 - then if I were to log back in it builds
615:51 - a feed that is specific to this
615:54 - particular user so we just have to write
615:56 - two functions one to build the feed for
615:58 - a logged in user and one to build the
615:59 - feed for a non-logged in user and our
616:01 - functions are going to be a very
616:03 - simplified versions of What Reddit
616:04 - probably does to build up the user's
616:07 - feed they probably have very very
616:08 - Advanced backend functions that use
616:11 - machine learning and everything to
616:12 - actually determine what to show to the
616:14 - user in our case we're going to be
616:16 - writing some simple functions so we're
616:17 - not going to get into any sort of
616:18 - machine learning or anything so our
616:20 - functions that build out our feed are
616:22 - going to be much simpler than what
616:24 - Reddit probably uses and our home page
616:26 - just like every other page we've seen
616:27 - follows the same exact layout pattern
616:30 - with the left hand side or right hand
616:32 - side so we can again use our page
616:34 - content layout component and then just
616:36 - drop the components in there and it'll
616:37 - style it all very nicely just like the
616:39 - other Pages all right so let's actually
616:41 - go to our app and go to our own home
616:44 - page here which should be just
616:45 - completely blank because we have not
616:47 - written really anything inside of here
616:49 - and the file we're going to be working
616:50 - in here is this going to be our index
616:52 - page so if we go into Pages it's the
616:54 - root of the entire app this is where all
616:56 - of the initial next.js page stuff went
616:59 - we have not touched this file since way
617:01 - back in part one when we sort of just
617:03 - deleted everything inside of it so now
617:05 - we're going to actually fill this thing
617:06 - up and put some meaningful content in
617:08 - here all right so I'm going to close my
617:10 - directory here and let's start with the
617:12 - actual HTML layout on this component so
617:15 - as I just mentioned we are again going
617:16 - to be able to use our page content
617:18 - layout component that we have created
617:20 - and we can just create the two empty
617:22 - fragments in here all right so in the
617:24 - first fragment we are going to have our
617:26 - actual Post Feed and then in this
617:28 - left-hand type container we are going to
617:30 - have our our recommendations
617:32 - and those other two very simple
617:34 - components
617:35 - um in the right hand side here
617:37 - all right so that's sort of the skeleton
617:39 - for our HTML let's work on the skeleton
617:41 - of the functional part of this component
617:43 - so the first function we're going to
617:45 - have is going to be called build user
617:48 - home feed and this is going to be
617:49 - responsible for building out the feed
617:52 - for an authenticated user that is logged
617:54 - in second function we're going to have
617:56 - is going to be called build no user home
617:58 - feed and pretty self-explanatory this is
618:02 - going to be for users who are not logged
618:04 - in and our third function is going to be
618:05 - called get user post votes
618:08 - and this is only going to be called four
618:11 - authenticated users and if you remember
618:13 - the way we got our votes when we were
618:15 - inside of a community was that we got
618:17 - all the votes for posts within that
618:19 - Community but since on the home page we
618:21 - are not in a community we're going to
618:22 - get the votes that may possibly exist
618:24 - for the posts that do end up showing up
618:27 - in our feed depending on what this
618:29 - ability user home feed function ends up
618:31 - putting into our post date and this
618:33 - function is a very minor detail on the
618:35 - home page because if you think about the
618:36 - home page of really any application like
618:38 - Reddit or Twitter or Facebook when you
618:40 - refresh your homepage you're typically
618:42 - seeing content you haven't seen before
618:44 - it's new so you probably would not have
618:45 - voted on it but there is a chance
618:48 - especially in our demo we don't have a
618:49 - ton of user generated data like on
618:51 - Facebook and Twitter so it just makes
618:52 - sense to have this function here to sort
618:54 - of just cover the basis to make it
618:56 - actually make sense in case a post is in
618:58 - the feed that we have previously voted
618:59 - on so that is sort of how this is going
619:01 - to work but we'll cover a lot more on
619:02 - that when we get to it so don't worry
619:04 - about this for now and beneath these
619:05 - functions there's going to be a few use
619:07 - effects that we're going to have to
619:09 - to actually sort of manage the logic and
619:12 - the data flow and govern how these
619:14 - functions are actually called depending
619:15 - on if there's a user logged in and
619:16 - depending on other state in our
619:18 - application so the most important thing
619:19 - on our home page is whether or not we
619:21 - actually have a user logged in that
619:23 - really drives how our feed is built and
619:25 - what functions we need to call here so
619:27 - the first thing I'm going to bring in is
619:28 - going to be our user object from our use
619:30 - off State function I'm going to pass
619:32 - this our auth instance from Client app
619:34 - and we're also going to bring in the
619:36 - loading parameter returned from our use
619:39 - off State hook which we're going to call
619:40 - loading user and this is going to help
619:43 - us in our use effect logic to know which
619:46 - one of these functions to call and this
619:48 - will become more clear let me actually
619:49 - start writing them out all right so now
619:50 - that we actually have our user object
619:52 - let's write out our use effects and see
619:54 - how they are going to interact with the
619:57 - user object and the loading user
619:58 - parameter to actually determine what
620:00 - functions we're going to call
620:02 - so our first use effect is going to have
620:04 - the dependencies of user as well as
620:06 - loading user
620:08 - all right so inside of this user fact we
620:10 - basically want to know if the user is
620:13 - logged in or not and if the auth service
620:15 - has attempted to try to get the
620:19 - authenticated user because there is a
620:20 - delay there as soon as we boot up our
620:22 - application there might be an
620:24 - authenticated user that was logged in
620:25 - previously from like a previous session
620:27 - or the user might be logging back in or
620:29 - sign up but the auth service has to go
620:31 - and actually get that from the Firebase
620:33 - servers and while it is attempting to
620:35 - fetch the authenticated user the user is
620:38 - null and that is the purpose of this
620:41 - loading user state it starts off as true
620:43 - and then it goes in attempts to fetch a
620:45 - user and then when it comes back either
620:47 - with or without a user it's going to set
620:49 - loading user to be false it's like oh
620:51 - okay I tried to go get it and there
620:52 - either is one or there isn't one um and
620:54 - if there is one this will be a truthy
620:56 - value and if there is not one this will
620:58 - be a falsy value so if we just wrote an
621:00 - if statement like this like saying if
621:02 - there's no user then build the no user
621:05 - home feed that actually would not work
621:08 - because like I said before when the
621:10 - application is initialized and the
621:12 - person actually navigates to our website
621:14 - this is always going to be undefined or
621:16 - null or some policy value at first while
621:19 - they use off State hook attempts to
621:21 - fetch that user from our auth service so
621:24 - at first we're always not going to have
621:26 - a user but that doesn't mean there isn't
621:28 - going to be one that is returned from
621:31 - the use off State hook and so that's why
621:33 - this wouldn't work because we can't just
621:35 - assume that no user initially means that
621:37 - we should build the no user home feed we
621:40 - need to know that the service actually
621:42 - attempted to fetch the user and then if
621:44 - it did attempt to fetch one and there
621:46 - still isn't one then we want to build
621:48 - the no user home feed so I hope that
621:50 - makes sense so what we can do to
621:52 - actually implement this is to say if
621:54 - there is no user and we are no longer
621:58 - attempting to fetch the user then build
622:01 - a no user home feed that means that the
622:03 - auth service tried to get the
622:05 - authenticated user and there was not one
622:08 - and we should build our feed for a
622:10 - non-authenticated user so there is
622:12 - another use effect that we are going to
622:14 - write in a bit that is going to tell us
622:16 - if we need to call the ability to
622:17 - Homeview function as well as the get
622:19 - user post votes function but we are
622:21 - going to work on the no user home feed
622:23 - first and then we will Circle back to
622:25 - the actual user home feed alright so
622:27 - let's start writing out the logic for
622:29 - our no user home feed so what I'm going
622:31 - to do is at the very top here just below
622:33 - our user here I'm going to create some
622:35 - loading state so that we can actually
622:36 - use our post loader again very similar
622:38 - to how we use it inside of the Community
622:40 - page and once you set it equal to false
622:43 - to start off and inside of our build no
622:45 - use your home feed function I'm going to
622:46 - create a try catch block and the very
622:49 - first thing we're going to do at the top
622:50 - is set loading to be true and then at
622:52 - the end we can set loading to be false
622:55 - just like this and we can log our error
622:58 - build no user home feed
623:02 - error
623:05 - so our very simple no user home feed
623:07 - algorithm is just going to be simply
623:09 - grabbing the 10 most popular posts in
623:13 - our database and a really good feature
623:15 - to add in your app would be pagination
623:16 - so that you could you know load 10
623:18 - initially and then if the user keeps
623:19 - scrolling it would load another 10 so
623:21 - that it keeps your front end nice and
623:23 - light so you'll notice fetch all of the
623:25 - potion database you can start off with
623:26 - 10. pagination is really good for
623:28 - front-end optimization and it just
623:30 - ensures you're not fetching too much
623:31 - data in our case we're just going to
623:33 - create a simple query that grabs the 10
623:35 - most popular posts in our database and
623:38 - the way we can do that is by querying
623:39 - our post collection and ordering them by
623:42 - the vote status so to do this we can
623:44 - create our post query object which is
623:46 - going to be created using the query
623:48 - function from firestore
623:49 - the first argument this requires is a
623:51 - collection reference to the collection
623:53 - we are querying so import collection
623:54 - from firestore pass it our firestore
623:57 - instance from Client app the collection
623:58 - we are querying is posts so after our
624:01 - collection reference we can pass in some
624:03 - query specifications to tell firestore
624:05 - what exactly we want from this
624:08 - collection reference so we want to grab
624:09 - documents from our post collection but
624:11 - we want to order them by the vote status
624:13 - so we can bring in our order by function
624:15 - from firestore and the key that we're
624:18 - ordering by is vote status that's the
624:20 - name of the field on our posts and we
624:22 - can pass in a second argument of
624:24 - descending because we want the highest
624:26 - rated at the top
624:27 - okay and as a third argument we can pass
624:29 - in another query specification and in
624:32 - our case we're going to pass in a limit
624:33 - so you can bring in the limit function
624:35 - for firestore and you can pass it 10
624:37 - just like this so This query is going to
624:39 - get 10 posts from the post collection
624:42 - that are ordered by vote status in
624:45 - descending order so that the highest
624:46 - rated is at the top so now we can
624:48 - actually get these documents from
624:49 - firestore by passing our post query to
624:52 - our get docs function so we can say post
624:54 - docs is equal to a weight get Docs
624:58 - and in order to use the await keyword we
625:01 - do need to make this function
625:02 - asynchronous so let's do that
625:04 - and then we pass in our post query to
625:07 - this function here and as usual we can
625:09 - create another array called posts and
625:11 - extract all of the data from each of the
625:14 - post documents inside of post docs so
625:16 - you can say postdocs dot Docs
625:19 - .map take each one and turn it into an
625:24 - object with an ID of dot ID
625:28 - dot ID and spread all of the data inside
625:31 - of the document to extract it all out
625:34 - now in order to put these posts into our
625:36 - post State we are going to need to grab
625:39 - our set Post State function from recoil
625:42 - so we can grab that value from our use
625:44 - post custom hook because we're going to
625:46 - grab a bunch of other stuff from this
625:47 - hook as well so we might as well grab
625:49 - the state from here too so for now we
625:50 - can grab our set Post State value
625:52 - function returned by our hook come down
625:54 - here and take the post array that we
625:57 - just created and call set post date
625:59 - value and we want to update this to
626:02 - contain those posts and we can tell
626:05 - typescript that this is going to be an
626:07 - array of posts we can say posts is going
626:09 - to be equal to posts as an array of
626:12 - posts so make sure the post type imports
626:14 - from post atom that is a lot of same
626:17 - posts kind of a tongue twister after a
626:19 - while so now we have successfully
626:21 - retrieved posts from the database and
626:23 - put them into our post State now all we
626:25 - need to do is actually show them here in
626:28 - our feed so we're going to do something
626:30 - extremely similar to what we did in our
626:31 - posts component if we go back to this
626:34 - component here all we did was take our
626:36 - post date and map through them and for
626:37 - each one create a post item and we're
626:40 - going to do the exact same thing here
626:41 - it's actually going to look exactly the
626:43 - same as this even with the post loader
626:45 - so let's go back to our index page
626:47 - and we can remove this comment
626:51 - and inside of our left fragment here we
626:53 - can put the same ternary operator that
626:55 - we had in that post component so we can
626:57 - say are we loading the post right now so
626:59 - if loading is true we want to show our
627:02 - post loader which we can import
627:04 - and if it is false and we are not
627:07 - loading we want to map through all of
627:09 - those posts inside of post date and
627:11 - return a post item for each one okay so
627:13 - we're actually going to need our post
627:15 - State value from our hook as well so
627:17 - let's come back up here and just grab
627:19 - that
627:20 - Post State value and we can come down
627:23 - here and we actually are going to wrap
627:25 - all of our posts in a stack to space
627:27 - them out nicely so import stack from
627:29 - Chakra and inside of our stack we are
627:32 - going to say postatevalue dot post dot
627:36 - map
627:37 - take each post
627:39 - and for each one we want to create a
627:41 - post item component just like this and
627:45 - actually if you remember from our last
627:46 - part we also want our create post link
627:48 - on the home page as well which is what
627:50 - triggers the opening of our directory so
627:53 - let's put this at the top of our
627:55 - fragment here above our stack so you can
627:57 - say create post link
627:59 - and if we save this we should see the
628:02 - create post link unless we get an error
628:03 - we're not seeing post because post item
628:05 - thing is broken and we're not even
628:06 - calling that function yet but we can see
628:08 - the create post link which is perfect so
628:10 - our post item component if you remember
628:12 - requires all those functions like on
628:14 - vote and on delete and on select so
628:16 - let's go back up to our use post hook
628:18 - and grab all of those so we're going to
628:20 - grab on select post on delete post and
628:23 - on vote okay so let's come back to our
628:26 - post item and pass all these in as props
628:28 - so our first prop can be a key which is
628:30 - going to be our post dot ID
628:33 - second one can be the post itself post
628:36 - is equal to post third one can be our on
628:39 - select course function
628:40 - on select post is equal to on select
628:42 - post that's on delete post
628:46 - we can pass on vote
628:49 - on vote we can pass in our user vote
628:53 - value and if you remember this is where
628:55 - we're going to check if a vote for this
628:59 - particular post exists in the user post
629:01 - post state so you can say Post State
629:02 - value
629:03 - dot posts of votes dot find
629:07 - and we want to iterate through all of
629:09 - these votes and see if one has a post ID
629:11 - that is equal to this current post or
629:14 - iterating theories ID just like this
629:17 - okay let's scroll down here and if we
629:20 - can find a vote then we just want to
629:22 - grab the vote value from that vote okay
629:24 - we're going to pass another prop called
629:25 - the user is Creator to know if we are
629:28 - the author of this post so we can say
629:30 - does the user ID
629:32 - equal to this post Creator ID
629:36 - and the last prop we are going to add is
629:39 - going to be a Boolean called home page
629:41 - to tell this component whether or not we
629:43 - are currently on the home page and this
629:46 - is from a while ago but let's go back to
629:47 - our post item and if you remember I
629:50 - briefly touched on that here I had this
629:53 - comment saying home page check and that
629:55 - is so that we can display the community
629:57 - name and the image URL here if we're on
629:59 - the home page because if we're inside of
630:01 - the community we do not show that
630:02 - because we don't really need to because
630:04 - we're inside that community so we don't
630:05 - need to display what community it is but
630:07 - on the home page we do want to show that
630:09 - so that the user can actually click on
630:10 - it and see what community it's in so
630:12 - inside of our post item here we can come
630:15 - to the top and on our post item props
630:17 - type we can add an optional Boolean prop
630:20 - here that is going to be passed if we
630:23 - are indeed on the home page so then we
630:25 - come down to our component here and grab
630:27 - that from the props from the structuring
630:29 - then on our index page we should now
630:32 - actually be able to pass this in just
630:34 - like this and just by simply passing it
630:35 - in it is going to be true perfect and
630:38 - this is actually it for our entire left
630:41 - hand side fragment so I can save this
630:43 - and all I need to do now let's go back
630:44 - to our app here is just have it actually
630:46 - call this function so if I log out let's
630:49 - see what happens
630:51 - it actually called the function and it
630:52 - went and got those 10 posts from the
630:55 - database now our database only has one
630:57 - post
630:59 - um so it's going to get up to 10. yeah
631:01 - there's only one post
631:03 - but it would get 10 if there were 10.
631:05 - and like I said before after we finished
631:06 - the no user case we're going to write
631:08 - out the logic to actually build the feed
631:10 - for what happens when I log in and there
631:12 - actually is a user but now this is
631:14 - pretty cool because you can actually see
631:15 - some posts on our feed and they appear
631:17 - exactly the same as they do in a
631:19 - community it's just a more generic feed
631:21 - so now let's go into our post item
631:23 - component and quickly write out that new
631:25 - Logic for checking if we are on the home
631:28 - page and display the community image URL
631:30 - and the link to that Community if we are
631:33 - indeed on the home page so just
631:34 - underneath this comment here we can add
631:36 - some logic to check if we are on the
631:38 - home page so we can say home page and
631:41 - then write the double Ampersand sign to
631:43 - say if we are on the home page we want
631:45 - you to display this additional
631:46 - information that we're going to right
631:48 - here so I'm going to create a fragment
631:49 - inside of here so now if I just put a
631:52 - given here that says home page just to
631:53 - test this out
631:55 - if I save this we should see that here
631:58 - so let's get rid of this div and inside
632:00 - of here we're going to add a ternary
632:02 - operator to check for the existence of
632:04 - the community image URL and if it exists
632:06 - we're going to display it and if it does
632:08 - not we're going to show our generic
632:09 - Reddit icon this is our classic image
632:12 - icon turnaround operator so you can say
632:14 - does the Post contain an image URL
632:18 - if it does let's show that image so we
632:20 - can use our image component from Chakra
632:22 - and if we do not have an image let's
632:23 - show our classic Reddit icon simple icon
632:27 - and then we can say as
632:29 - fa Reddit icon so this icon we're going
632:33 - to give a font size of a 18 point
632:37 - and a margin right of one as well as a
632:40 - color of blue 500. okay so on our image
632:44 - component we want to make the source
632:46 - equal to that post dot Community image
632:48 - URL and we actually have not added this
632:51 - parameter to our post yet in our new
632:53 - post form but we're going to go do that
632:55 - in just a second it's a single line
632:56 - addition
632:57 - we want to make the Border radius of
632:59 - this equal to full to make it round and
633:02 - we want the box size to be equal to 18
633:06 - pixels and we're going to give this a
633:08 - margin write of two just like this so
633:11 - underneath this ternary operator here
633:13 - now we're going to actually add the link
633:15 - to that community so you can bring in
633:18 - our link component from next link and we
633:21 - want to give this an href value
633:23 - of the page that we want to go to when
633:25 - we click on this thing and that is going
633:27 - to be our forward slash
633:29 - then we want to pass the post dot
633:31 - Community ID
633:33 - okay inside of our link we're going to
633:35 - have some text we can add some curly
633:37 - brackets because the text you want to
633:39 - display inside of here is going to be R
633:41 - forward slash then the postdoc Community
633:44 - ID
633:46 - okay so if I save this now we can
633:48 - actually see that link in there let's
633:50 - add some styling here so we're going to
633:51 - make the font weight of this text
633:54 - heavier so we're going to make it 7 and
633:56 - we're also going to give it some hover
633:57 - styling to make it appear as if it's a
634:00 - link because it is and links usually
634:02 - have a underline text decoration so you
634:04 - can say text decoration and we can give
634:06 - this an underline value here just like
634:08 - that and to create some space between
634:10 - this link as well as the posted by
634:13 - username text rather than just adding
634:16 - some margin we're going to add this
634:17 - little dot icon here because that's how
634:20 - Reddit has it and it looks really nice
634:21 - okay so just underneath this link here
634:23 - we can create another icon but this icon
634:26 - is going to be the value BS dot so make
634:30 - sure that Imports and we're going to
634:32 - give this a color of gray 500 and a font
634:36 - size of eight so it's very small and
634:38 - very subtle but it does get some spacing
634:41 - there and I think it looks really good
634:42 - so now I can actually click on this link
634:44 - and it'll take us to this community so
634:46 - let's watch
634:47 - so it took us to the community but just
634:49 - for a second there it actually took us
634:51 - to the single post page view so if I go
634:53 - back
634:54 - the first route that it went to was the
634:56 - single post page view and then it went
634:58 - to the Community page and this again has
635:00 - to do with event propagation because we
635:02 - haven't on click on the post item here
635:04 - that takes us to the single post page we
635:07 - do need to do some event propagation to
635:09 - prevent us from triggering that when we
635:11 - click on the link inside of the post
635:13 - item so what we can do is just add a
635:15 - simple on click to our text here
635:17 - and we can just simply take the click
635:20 - event that is generated and call the
635:21 - events.stop propagation function on it
635:24 - and so now if I were to save that if I
635:26 - click on this link now it will take us
635:28 - directly to the Community page it is not
635:30 - going to first go to the single post
635:32 - page view and then the Community page so
635:34 - now if I go back
635:35 - the previous route is the home page not
635:38 - the single post page and now we just
635:40 - need to go back and quickly add the
635:42 - community image URL to our new post
635:44 - documents if it exists because chatty's
635:47 - group if I go into here does have a
635:49 - custom Community image and we need that
635:51 - to be inserted onto the post as well and
635:54 - we are currently not doing that very
635:56 - simple to fix we can just go to our new
635:58 - post form file so in order to insert
636:00 - this on this new post object we do need
636:02 - access to that value so what we're going
636:05 - to do is add the community image URL as
636:07 - a prop to our new post form so if we go
636:11 - back to where this new post form is
636:12 - actually rendered it is on the submit
636:15 - page
636:16 - we can see that the new post form is
636:18 - here and we have the Community State
636:20 - value inside of this file so what we're
636:21 - going to do is pass this as a prop to
636:23 - our new post form so you can say
636:25 - community image URL and this is going to
636:28 - be equal to Community State value
636:31 - dot current Community dot image if URL
636:34 - just like that then inside of our new
636:36 - post form we have to actually add that
636:39 - to our prop type here okay so underneath
636:41 - our user we can add Community image URL
636:44 - and we're going to make this optional
636:45 - because if it does not exist on the
636:49 - current Community the value of it is
636:51 - going to be undefined so we need to tell
636:52 - typescript that it's going to be either
636:54 - undefined or a string okay so now we can
636:56 - grab that from our restructured props
636:58 - here Community image URL and on our new
637:01 - post object
637:02 - underneath the community ID we can add
637:05 - Community image URL and we want to make
637:07 - it the value of community image URL or
637:10 - if it does not exist and it is undefined
637:13 - we're going to pass an empty string and
637:15 - the reason we're doing that is because
637:17 - Firebase will not like it if we pass a
637:20 - value of undefined here we need to pass
637:23 - in a empty string instead they're both
637:25 - policy values but Firebase just wouldn't
637:27 - like the value of undefined it is happy
637:29 - though with an empty string so the value
637:31 - of community image URL is going to be
637:33 - this variable if it exists and if it is
637:36 - not we're passing an empty string so now
637:37 - if I were to save this and inside of
637:40 - Chinese group create a new post oh I
637:43 - have to log in let's log back in
637:45 - as Shah merhi
637:48 - oh forget my password okay so if I go to
637:52 - create post and I call it uh Community
637:55 - image feature and I can say newest
637:58 - feature
638:00 - okay and if I post this
638:04 - and go back to the home page we should
638:07 - see the community image URL in this post
638:10 - because it was inserted this post
638:13 - however does not contain it because this
638:16 - feature we did not have when we created
638:19 - this post and actually if I go into
638:20 - Shady's group and I change the image to
638:23 - something else like the Google logo here
638:25 - and I save that
638:29 - if I went back to the home page and were
638:31 - to refresh
638:33 - the posts should have the latest
638:36 - Community image that would have to log
638:37 - out to see that because our feed is only
638:39 - Built for logged out users and you can
638:41 - see that the Google image is indeed
638:43 - there so you can close this new post
638:45 - form we can close the submit page and we
638:48 - can come back to our index page here now
638:50 - let's start working on the actual Logic
638:52 - for building out the user feed for our
638:55 - authenticated users okay so for users
638:57 - that are logged in we are going to show
638:59 - them posts from the communities that
639:00 - they have actually joined and we know
639:02 - all of the users communities thanks to
639:03 - our community snippet State inside of
639:06 - Community State value so what we can do
639:08 - is build some sort of query that is
639:10 - going to grab a set of posts from the
639:12 - various communities that the user is in
639:14 - so the main thing that this function
639:16 - needs to accomplish is to get posts from
639:18 - the users communities
639:21 - okay so let's create a try catch block
639:23 - and log the error if it occurs build
639:26 - user home feed error
639:29 - okay then at the very top here we're
639:31 - going to set our loading state to be
639:32 - true and at the very bottom set loading
639:35 - state to be false
639:37 - okay
639:39 - so the way we can write our query such
639:41 - that it fetches posts from multiple
639:43 - communities rather than just one is we
639:45 - can create an array of the users
639:47 - Community IDs using the community
639:49 - Snippets and we can write a where clause
639:51 - in our query to find post documents with
639:55 - the community ID that is inside of that
639:57 - array so since we are going to be
639:59 - fetching posts from specific communities
640:01 - we do want to make sure that the user
640:03 - has indeed joined some communities so we
640:05 - can write an if statement to check for
640:07 - the length of the community Snippets
640:09 - array so we can say if Community State
640:10 - value dot my Snippets dot length meaning
640:14 - that there are indeed communities that
640:16 - this user has joined then we are going
640:18 - to get posts from the user's communities
640:20 - and if the user has not joined any
640:21 - communities meaning that they're like a
640:23 - new user or they just haven't joined
640:24 - anything yet we're just going to call
640:26 - our build no user home feed function
640:28 - because that's going to build them a
640:29 - nice generic feed so we're going to need
640:31 - to create an array of the user Community
640:34 - IDs because it's going to be required by
640:36 - the query we're going to write and we
640:38 - can do that using their Community
640:40 - Snippets so we can create this array and
640:42 - we can call it my community IDs
640:46 - and what we want to do is basically
640:47 - extract the ID from all of the users
640:50 - Snippets so we can take the Community
640:53 - State value dot my Snippets and map
640:56 - through them and for each snippet we
640:59 - want to sort of convert it into just the
641:02 - community ID so we're basically just
641:04 - converting the full snippet object to
641:06 - just a single string that is the snippet
641:09 - dot Community ID so my community IDs is
641:11 - just going to be an array of all of the
641:12 - extracted Community IDs from all of the
641:15 - Snippets and we're going to use this in
641:16 - our post query which we can create right
641:18 - now so we're going to say cons post
641:20 - query
641:21 - and we can use our query function again
641:23 - first argument is going to be our
641:24 - collection which is going to take our
641:26 - firestore instance collection name is
641:28 - post so the second argument to our query
641:32 - function is going to be our where clause
641:34 - and this is where we're going to
641:35 - actually use that Community ID array so
641:38 - we want to get posts where the community
641:41 - ID of the post is in
641:45 - the my community IDs array
641:49 - and this is how we can write that using
641:52 - this where function repair server so
641:53 - this is going to find all of the posts
641:55 - where the post Community ID is inside of
641:58 - the my community's ID array that we just
642:00 - created and we're also going to set a
642:02 - limit on this so that we don't
642:03 - fetchulate hundreds of posts if they
642:05 - exist so we're going to set a limit of
642:06 - 10. and again this is a very simple
642:08 - query to build out the user home feed a
642:11 - really good thing you could build on top
642:12 - of this app would be to make the actual
642:14 - feed functions a lot more sophisticated
642:16 - this works though for the purpose of
642:18 - this demo then we can actually fetch
642:20 - these documents from firestore so we can
642:21 - say cons post docs is equal to a weight
642:24 - get docs and pass it our post query then
642:28 - we can create our post array and map
642:30 - through all of the postdocs dot Docs
642:34 - take each document and convert it into
642:37 - an object with the ID of doc.id and with
642:40 - the data inside of the document okay
642:43 - then we can just call our set post date
642:45 - value function and actually put these
642:47 - posts inside of our post state so we
642:50 - want to update posts to be posts as an
642:54 - array of posts very similar to what we
642:56 - did in the no user home feed function
642:58 - okay so just to reiterate we are
643:00 - checking if the user is inside of any
643:03 - communities if they are we're going to
643:05 - go get some posts that are inside of
643:07 - those communities and if they are not in
643:09 - any communities we're just going to call
643:10 - the no use at home feed function that's
643:12 - going to build them the generic feed
643:13 - that is not specific to any Community
643:15 - okay so now that this function has been
643:17 - written we do need a way to call it and
643:20 - the way we're going to do that is going
643:22 - to be with another use effect that is
643:24 - going to run some logic and check if it
643:26 - is appropriate to call that function
643:28 - very similar to what we did with our
643:30 - build in the user home feed function
643:31 - down here so we can create another use
643:33 - effect here
643:35 - okay so just like this use effect down
643:37 - here that is listening to some
643:38 - application State and then waiting to
643:40 - read those values to see if they match
643:42 - some condition that it makes it
643:43 - appropriate to call they build no user
643:46 - home feed function we're going to do
643:47 - something extremely similar inside of
643:49 - here as well we want to basically know
643:51 - when we should call our build user home
643:54 - feed function now if we look at this
643:56 - function we can see that it is fetching
643:59 - data based on the values inside of
644:02 - Community State value dot my Snippets
644:04 - meaning that this function and the posts
644:07 - that we want to retrieve in this
644:08 - function depend on this state here
644:11 - Community State value dot my snippet so
644:13 - we don't really want to call this
644:15 - function until we have fetch those
644:18 - Snippets from the database so that is
644:19 - what we're going to do down here in this
644:22 - use effect we're going to check and see
644:23 - has our application attempted to fetch
644:25 - the user Snippets from the database if
644:27 - it has then let's go call that function
644:30 - so as a result this use effect is going
644:32 - to have a dependency of Community State
644:34 - value
644:35 - dot my Snippets because we want to
644:37 - listen for changes in this value here
644:40 - because it's initialized as an empty
644:41 - array and then our app goes and gets
644:42 - them from the database and then it puts
644:44 - that data inside of the states we want
644:45 - to know when these updates occur but
644:47 - there's a slight problem here we saw
644:49 - that in our function build use your home
644:51 - feed that we check for a length of the
644:54 - array and if there is a length meaning
644:56 - that the user is inside of communities
644:57 - we go and get posts for those
644:59 - communities and if they are not in any
645:01 - communities meaning that that array is
645:03 - empty we just build them the generic
645:05 - feed but we need a way to know that our
645:08 - app has attempted to try and fetch the
645:11 - Snippets because it's just simply
645:13 - checking for the length of the snippet
645:15 - so if you were to say something like if
645:17 - Community State value dot my Snippets
645:20 - dot length and then in this case we
645:22 - would call build user home feed this
645:24 - doesn't actually work because what if
645:27 - the user has not joined any communities
645:29 - like the database could attempt to go
645:31 - get those Community Snippets but there
645:33 - could be none because it's like a new
645:34 - user or they just haven't joined
645:35 - anything yet meaning that this would be
645:37 - false meaning that this would not get
645:40 - called so simply just checking the
645:42 - length of the community Snippets is not
645:44 - enough information to know whether or
645:47 - not we should call this function we need
645:48 - some other piece of State similar to how
645:50 - down here just checking the truthiness
645:52 - of the user was not enough we needed to
645:54 - look at this loading state to see has
645:56 - our use offstate hook attempted to fetch
645:59 - the user and the solution to this is
646:01 - basically creating something similar to
646:03 - this loading user State on our community
646:05 - State value so all we need to do is add
646:08 - some sort of parameter to our community
646:10 - State value that is going to change once
646:13 - our application has indeed tried to
646:15 - fetch the sentence from the database
646:17 - only after it has tried to fetch these
646:19 - from database and put them into 8 we
646:21 - will call this build user home feed
646:22 - function and in this use effect here we
646:24 - actually do not need to worry about
646:26 - checking for the existence of a user and
646:28 - the reason is because if you go to our
646:30 - use Community data hook the use effect
646:33 - that's responsible for fetching the
646:34 - Snippets in the first place already
646:36 - depends on the user and it's only going
646:38 - to go and get the Snippets for that user
646:41 - if the user exists meaning that this use
646:45 - effect over here inside of our index
646:46 - page implicitly depends on the user so
646:49 - we don't have to explicitly Define it
646:51 - here because the way we're going to
646:52 - write this use effect is going to make
646:54 - it impossible for it to even trigger
646:56 - before this one has actually finished
646:59 - so all we need to do is go into our
647:01 - communities atom here and add some piece
647:03 - of state that's going to tell us if we
647:05 - have attempted to fetch the community
647:07 - Snippets in the first place so all we
647:09 - need to do is on our community State
647:10 - interface here we can add a parameter
647:13 - called Snippets fetched which is going
647:16 - to be a Boolean that is going to be
647:18 - initialized as false because as soon as
647:20 - the application loads we have not fetch
647:22 - the Snippets and once the Snippets have
647:24 - been fetched for the first time this is
647:26 - going to be set equal to true and then
647:28 - that is the variable we can listen to
647:29 - inside of our index Patron have the
647:31 - Snippets be fetched oh okay they have
647:33 - let's go build up the user home feedback
647:35 - let's go back to our communities Adam
647:36 - and inside of our default Community
647:38 - State if you're going to initialize this
647:39 - value to be false now back in our index
647:42 - page over here we are going to change
647:43 - this dependency from my Snippets to be
647:46 - that Snippets fetched Boolean parameter
647:49 - and then in this user effect we're going
647:51 - to say if my community State DOT
647:54 - Snippets fetched is true then go build
647:56 - out the user home feed because then it
647:58 - is appropriate to do that and then
648:00 - inside of our abilities your home feed
648:01 - function it would make sense to check
648:02 - for the length of that array to see if
648:05 - the user has joined any communities or
648:07 - not so the only thing missing now is to
648:09 - actually set this thing equal to True
648:10 - inside of our fetch Civic function so
648:14 - inside of use Community data
648:16 - inside of the getmycipits function
648:19 - right up here as soon as we fetch these
648:22 - Snippets from the database for the first
648:23 - time we can just update the value of
648:26 - Snippets fetched to be true okay so the
648:29 - data flow is like this the user is going
648:32 - to log in which is going to trigger the
648:34 - get my Snippets function to happen to
648:37 - get my Snippets function is going to
648:39 - fetch the Snippets from the database and
648:41 - it is going to put them in state and
648:42 - it's going to set the Snippets fetch
648:44 - parameter to be true them inside of our
648:47 - news effect over here on our index page
648:49 - this use effect is listening to changes
648:52 - on that Snippets fetch thing when this
648:54 - is changed to true this user's effect is
648:56 - going to trigger this if statement is
648:57 - going to be triggered because it is true
648:59 - and then as you're going to call the
649:01 - build user home feed function and build
649:03 - out the appropriate user home feed okay
649:05 - so I hope that makes sense and this is a
649:06 - very common thing in react to have your
649:08 - user effects so listen to certain pieces
649:10 - of state and wait for that data to come
649:12 - in before triggering other things and
649:14 - it's sort of this nice data flow logic
649:16 - and I just make sure all of the data
649:18 - that your functions depend on actually
649:20 - exists or at least has been attempted to
649:22 - have been fetched so now when I actually
649:24 - log in it should go and fetch the
649:27 - Snippets for shadmarehand email.com
649:29 - which should trigger this build user
649:32 - home feed function and a new feed should
649:33 - be built so let's test it out
649:36 - so sign in
649:38 - okay nothing happened okay my Snippets
649:41 - are not even being fetched
649:46 - okay so there's definitely a user
649:48 - because I'm logged in
649:51 - oh okay you think that okay so I think
649:53 - what's happening currently is that if
649:55 - you go to a used Community data hook
649:56 - this use effect that is um down here
650:00 - that is supposed to call get my Snippets
650:02 - which is listening to the user object is
650:04 - actually not even happening because
650:05 - we're currently not calling this Hook
650:07 - from our index page we need to call this
650:10 - hook in order to trigger these use
650:12 - effects here uh so the way we can do
650:14 - that is instead of pulling in Community
650:16 - State value using the use recoil value
650:19 - hook we can actually grab it from our
650:21 - use Community data hook so we use
650:24 - Community data
650:25 - import that
650:28 - and we can grab Community State value
650:30 - and it's going to return the exact same
650:32 - value that recoil did because this Hook
650:34 - is after all just grabbing from recoil
650:36 - but we are now going to actually trigger
650:39 - the hook to call those use effects that
650:42 - we needed to so now if I save this
650:45 - okay so it did rebuild the feed there's
650:46 - only two posts in our entire database
650:48 - and there's only one Community I'm going
650:50 - to need to create some more posts in
650:51 - different communities that I'm not in to
650:53 - test this out but if I log out it should
650:57 - yeah it rebuilds the feed for a
650:59 - non-authenticated user and also when the
651:02 - user logs out and there is no user
651:04 - anymore we want to actually reset the
651:07 - value of that Snippets fashion Boolean
651:09 - and we can do that inside of this use
651:11 - effect here as well because we're
651:13 - already kind of doing that when there is
651:14 - no user we clear the my snippet State
651:16 - because it is specific to a particular
651:18 - user so if the user logs out we just MP
651:20 - that array we can do the same thing with
651:22 - these Snippets fetch thing here and this
651:24 - ensures that if a user does happen to
651:25 - log out and the feed is rebuilt for a
651:27 - non-authenticated user and then they do
651:29 - decide to log back in it will trigger
651:32 - another update to rebuild the feed for
651:34 - that user again so if I save this if I
651:38 - log out it rebuilds the non-user feed
651:41 - and if I log back in as chatty
651:45 - it builds a feed for shady okay and both
651:47 - of the user and non-user feeds look
651:49 - exactly the same right now because our
651:51 - database only has two posts in them and
651:53 - so to actually differentiate the two
651:55 - feeds here let's go back into that uh
651:58 - new new new community or go into some
651:59 - other community that you have created
652:01 - and I want to create a post in here
652:04 - uh new new blah blah blah blah blah blah
652:07 - I'm going to post this inside of here
652:10 - okay then what I'm going to do is come
652:13 - to my home page
652:14 - so okay we can see that this is in my
652:16 - home feed because I I am in new new so
652:20 - let's log out
652:21 - so I see the same feed right let's log
652:23 - back in and I should see the same feed
652:25 - just in a different order
652:27 - shot man cool okay but now what I'm
652:30 - going to do is go into new new and leave
652:33 - this community and after I go back home
652:35 - I can see that the post is no longer in
652:38 - my feed because I am no longer in new
652:40 - new if I log out though it rebuilds the
652:43 - feed and that post is in my feed so now
652:45 - we can actually see a difference between
652:47 - a user and a non-user feed if I log back
652:50 - in
652:52 - foreign
652:55 - with only posts from the communities
652:57 - that I am in and I actually realize
652:58 - there is some missing logic inside of
653:00 - our create Community model that I forgot
653:02 - to add after we actually created the
653:04 - Community page because we want to
653:06 - actually create the community and then
653:07 - be re-routed to that Community page and
653:10 - currently it's not doing that it's just
653:12 - creating the community and it just stays
653:13 - with the model open and so to fix that
653:15 - all we have to do is go back to our
653:17 - create Community model which we haven't
653:19 - seen in a long time so inside of our
653:21 - handle create Community function and so
653:24 - after our transaction runs and our
653:25 - community is successfully created we
653:27 - want to Route the user to that page and
653:30 - we can do that using our router from xjs
653:32 - so let's come up to the top here and
653:34 - just unloading seed here let's bring
653:36 - that in the cons to router is equal to
653:37 - use router okay
653:40 - than underneath our transactions inside
653:42 - of our try block we can call router dot
653:45 - push
653:46 - and we want to push this user to the
653:48 - route of our forward slash and then
653:51 - Community name and that is the name that
653:54 - they entered inside of the input in the
653:57 - modal and we actually want to close the
653:59 - community modal and we can do that with
654:01 - our already existing handle close
654:02 - function okay and one more simple thing
654:04 - we can do is just close our community
654:06 - directory here and we can do that with
654:08 - our already existing toggle menu open
654:10 - function from our use directory hook so
654:12 - just underneath our router we can call
654:14 - that hook use directory and we want to
654:17 - bring in the toggle menu open function
654:20 - then just after the handle close
654:22 - function we can call toggle menu open
654:25 - okay so now if I create a community and
654:27 - it is successfully created it should
654:29 - close the modal it should close the
654:31 - directory and it should route me to that
654:33 - new Community page so let's give this go
654:36 - let's do create community and let's call
654:38 - this Tesla Motors
654:40 - create community
654:43 - perfect okay so Tesla Motors was created
654:45 - it brought me to the Tesla Motors page
654:47 - and the directory closed and now I can
654:49 - see Tesco Motors inside of my community
654:51 - Snippets and that is exactly what we
654:53 - wanted to do okay so let's go back to
654:55 - our home page and we can close our
654:57 - create Community model okay so let's go
654:59 - back to our index page here and we are
655:01 - now done with the build no user home
655:02 - feed function as well as the build the
655:04 - user home feed function and the last
655:06 - thing we need to do is just write this
655:07 - simple function to get the post votes
655:09 - for the posts that end up appearing in
655:12 - our feed and because post votes depend
655:14 - on a user being logged in this is only
655:16 - going to run if the user is indeed
655:18 - logged in so we're going to create a
655:20 - third user fact that's going to run some
655:22 - logic to check whether or not we should
655:24 - run our get user post Source function
655:26 - okay so there are two important pieces
655:28 - of state that we need to listen to
655:29 - before we know if we should run our get
655:32 - user postcodes function and the first
655:33 - one is going to be our user and our
655:35 - second one is going to be our post
655:36 - datevalue dot posts because we want to
655:39 - wait until there are actually posts in
655:42 - that array before we go and try to get
655:44 - votes for posts so we need both the user
655:47 - as well as actual posts in the feed to
655:50 - exist before it actually makes sense to
655:52 - even call to get user post function okay
655:54 - so then inside of here we can just write
655:56 - a single if statement to say if user and
655:59 - postdatevalue Dot posts dot length then
656:03 - call the get user post votes function
656:05 - because we have both of the things
656:06 - required by that function hit then for
656:09 - this function here we need to make this
656:10 - asynchronous because it's going to be
656:12 - fetch any data from the database and we
656:14 - can create a try catch block and log the
656:16 - error if it occurs get user post votes
656:20 - error
656:21 - and so what we want to do is query our
656:24 - users post votes sub collection and try
656:27 - to find the votes with a post ID that
656:31 - matches any of the possible posts inside
656:34 - of post date value and so to do this we
656:37 - can write a similar query like we wrote
656:39 - up here in our post query in this one we
656:41 - are finding all of the posts with a
656:44 - community ID that is inside of this my
656:46 - community IDs array down here we're
656:49 - going to be finding all of the votes
656:50 - with a post ID that is inside of a post
656:54 - ID array that we're going to create so
656:56 - let's create that array and we'll call
656:57 - it post IDs and this is going to be
656:59 - equal to postatevalue dot posts and
657:02 - we're going to map each of these posts
657:04 - into just a post ID string so now post
657:08 - IDs is just going to be an array of
657:10 - string IDs then we can build out our
657:12 - post votes query we can say post about
657:14 - query and it's going to be equal to
657:16 - query the collection we want to query
657:19 - passes our firestore instance
657:21 - and the path to the collection that
657:24 - we're querying is going to be users
657:26 - slash
657:27 - user.uid slash postcodes
657:31 - you can save this so it formats then as
657:34 - the second argument to the query
657:35 - function we can pass in that where
657:37 - function and in this case we want to say
657:39 - where the votes post ID is in
657:44 - the post IDs array that we just created
657:48 - then we can actually fetch these
657:50 - documents from the database so we can
657:51 - say post about docs is equal to a weight
657:54 - get docs and pass in our post votes
657:57 - query
657:57 - then we can create our post votes array
657:59 - and extract all of the data out of all
658:02 - of these docs so you can say
658:03 - postmodocs.docs.map
658:07 - and map each document into a object with
658:11 - the ID of that ID as well as all of the
658:14 - data inside of Doc dot data and now we
658:17 - just need to put these votes inside of
658:18 - our post votes state so we can say set
658:20 - Post State value
658:22 - and update our
658:26 - post votes to be post votes and we can
658:30 - tell typescript this is going to be an
658:32 - array of post votes so import that type
658:35 - from your post atom file and indicate
658:38 - that it's an array of postcodes so let's
658:40 - come back to our app here so now we can
658:42 - see that the votes for these potential
658:43 - posts in the fee here are actually being
658:45 - fetched because it's indicating that I
658:46 - have voted on this post without calling
658:48 - this function uh so if I comment this
658:50 - out here in our use effect and we don't
658:51 - call it you can see that the votes are
658:53 - not being fetched uh if I call it back
658:56 - in they are and kind of like what we
658:58 - were talking about before with building
658:59 - up the feed if there was enough data
659:02 - being generated by the users most of the
659:04 - time the content you're seeing in your
659:05 - feed is brand new and you have never
659:07 - seen it before and you have likely not
659:09 - voted on it and in our case since we
659:11 - just don't have a lot of data in our
659:13 - demo here we just have to build this to
659:16 - make it make sense because uh naturally
659:18 - due to the lack of data some of the
659:20 - posts that are showing up in our feed
659:21 - here are posts that we have seen and
659:24 - have voted on but just because there is
659:25 - not enough data and to prevent duplicate
659:27 - post votes from showing up in our postal
659:30 - state to say on the home page we don't
659:31 - fetch a bunch of votes for the posts and
659:34 - then if we go into a community it's
659:35 - going to fetch the post votes for that
659:37 - community there could be some overlap
659:39 - there and to prevent that we can inside
659:41 - of this third use effect here that's
659:43 - calling our get user post votes we can
659:45 - create what is called a cleanup function
659:46 - so in react when you return a callback
659:49 - function inside of a use effect this
659:51 - function runs when this particular
659:53 - component Dismounts so in this case our
659:55 - component is our index page so inside of
659:58 - this use effect here we can return a
660:00 - callback function which will be
660:01 - triggered when we navigate away from the
660:03 - index page hit end in react this is what
660:05 - is known as a cleanup function because
660:07 - we typically use them to clean up our
660:08 - data and remove any sort of like stale
660:10 - data from our state so inside of here
660:12 - all we want to do is just clear our post
660:15 - mode so if the user navigates to a
660:16 - community page the post votes are sort
660:18 - of started off on a new Clean Slate so
660:21 - you can say set post date value and
660:23 - simply just set our post votes to be an
660:27 - empty array just like that and this is
660:29 - typically what cleanup functions look
660:31 - like so that is it for the entire
660:34 - functional part of this component we
660:36 - have written out all of the required
660:37 - functions all we need to do now is just
660:39 - create those right hand side components
660:41 - alright guys we are now going to start
660:43 - working on the top communities component
660:45 - here on the right hand side of our home
660:47 - page and it's relatively straightforward
660:49 - component all we are going to do is
660:51 - fetch the top five communities rated by
660:54 - number of members and then we will
660:56 - display them to the user here and give
660:57 - them the functionality to join and leave
660:59 - these communities from right within here
661:01 - now on reddit.com every time you visit
661:03 - the website you see a different list of
661:05 - five communities here sometimes it's
661:06 - like top sports communities sometimes
661:09 - it's top pet communities or something
661:10 - it's always changing and they have again
661:13 - Advanced algorithms that are
661:14 - recommending you certain communities
661:16 - based on your interests and your user
661:18 - actions our simplified version of that
661:20 - is to always display the top communities
661:22 - and grab the top five communities rated
661:24 - by the number of members parameters
661:26 - stored on the community document so
661:29 - let's go back to our app and create this
661:31 - okay so let's go into our files here and
661:33 - inside of our community
661:37 - folder which is up here I'm going to
661:39 - create a new file called recommendations
661:42 - dot TSX
661:44 - okay I'm going to close my directory so
661:45 - we have some more room and I'm going to
661:47 - use the snippet and we are not going to
661:50 - take in any props to this component so
661:51 - we can remove that
661:54 - so it's a pretty simple component all
661:55 - we're going to have is a single function
661:57 - that is going to be responsible for
661:58 - fetching those top five communities so
662:00 - we're going to call this get community
662:03 - recommendations
662:06 - and it is going to be an asynchronous
662:08 - function
662:09 - and we can create a try catch block
662:11 - inside of here as usual and log the
662:14 - error if it exists I'm going to paste
662:17 - the function name in here because it is
662:18 - difficult for me to type
662:21 - also inside of this component we are
662:22 - going to add a single use effect that we
662:24 - are going to give an empty dependency
662:26 - array so that it only runs a single time
662:28 - after the component mounts to the Dom
662:30 - and when the component maps to the Dom
662:32 - we want to just call that get community
662:33 - recommendations function okay and at the
662:36 - top of this component here I'm going to
662:37 - create two pieces of state and the first
662:40 - one is going to be the actual
662:41 - communities array where we are going to
662:42 - store the top Community documents from
662:45 - the database so we can say communities
662:47 - and set communities
662:50 - is equal to eu's State and we can
662:52 - initialize this as an empty array and we
662:55 - can indicate the type of items inside of
662:57 - this array by importing our communities
662:59 - type from our community atom file and
663:02 - indicate that it is an array of
663:03 - community items and I'm also going to
663:05 - create some loading State inside of here
663:07 - so we can display a nice skeleton loader
663:09 - to the user which is going to be a
663:11 - simple skeleton and we're going to
663:13 - initialize loading as false and also
663:15 - inside of this component we are going to
663:16 - need our use Community data hook so we
663:19 - can call that in here and what we're
663:21 - going to need is the Community State
663:22 - value as well as the on join or leave
663:25 - Community function because we are
663:26 - allowing the user to join or leave
663:28 - communities from right within its
663:30 - component so we need that function in
663:31 - here all right so let's build out this
663:33 - function so at the top here I'm going to
663:34 - set loading state to be true and at the
663:37 - very bottom we can set loading to be
663:39 - false okay then inside of our try block
663:42 - we can just build a simple query that is
663:44 - going to grab the top five communities
663:46 - ordered by the number of members
663:48 - parameter so we can say cons Community
663:51 - query is equal to query import the
663:54 - queries function from firestore create a
663:56 - collection reference to the collection
663:57 - we want to query past collection our
664:00 - firestore instance and the name of the
664:02 - collection is going to be communities
664:04 - and as a second argument we can pass in
664:06 - our order by function
664:08 - and we want to indicate that we want to
664:10 - order by the number of members key and
664:14 - we want them in descending order so that
664:16 - the most popular is at the top and then
664:19 - we can also just pass in a limit of 5
664:21 - because we are only displaying the top
664:23 - five okay so let's actually grab these
664:25 - documents from the database so we can
664:26 - say cons Community docs is equal to a
664:29 - weight get docs as in our communities
664:31 - query
664:33 - and then extract all of the data from
664:35 - each of these documents you can create
664:37 - their communities array and say
664:39 - community docs dot Docs
664:42 - dot math
664:44 - and map each document into a JavaScript
664:47 - object with the ID of a DOT ID I thought
664:49 - this so many times to be done this 100
664:51 - times doc.id and the data from inside of
664:55 - the document so
664:57 - spread.data
664:59 - just like this okay and then what we can
665:01 - do is just set our communities array
665:03 - state to be the value of this
665:05 - community's array that we just created
665:06 - here so we can say set communities
665:09 - to be communities and we can indicate to
665:12 - typescript that this is going to be
665:13 - indeed an array of community just like
665:16 - this and this community state in this
665:17 - component is local here because we don't
665:19 - really need it at a global level so it
665:21 - makes sense to just have it local to the
665:23 - component because that's really all
665:24 - where we need it awesome and that is it
665:26 - for this function and all that is left
665:27 - is to build out the actual HTML of this
665:30 - component here okay and if we look at
665:31 - our demo here there is an image at the
665:34 - top of this component here and this is
665:36 - an external image that we are getting
665:38 - from this images folder inside of our
665:41 - public folder here and I think very back
665:43 - in the early stages of this project I
665:45 - had or I recommended you guys to grab
665:47 - all of these images off of my GitHub and
665:49 - put them in here but if you did not grab
665:51 - all of them uh the one we're going to be
665:52 - needing here is reccoms Art and we're
665:55 - also going to be needing this one down
665:57 - here this kind of like spaceship one and
665:59 - I think that is
666:01 - um Reddit personal home so these are the
666:04 - two we are going to need retcoms art and
666:06 - write a personal home so please ensure
666:07 - that you grab those off my GitHub and
666:09 - put them inside of your images folder in
666:11 - your public folder okay so I'm going to
666:12 - close this close the directory let's go
666:15 - back to our app here and let's get rid
666:17 - of this div
666:18 - and the overall container is going to be
666:21 - a flex container and inside of this Flex
666:23 - container we're going to have two more
666:25 - children Flex containers one for the
666:28 - sort of header part which is that top
666:30 - communities image thing I was just
666:31 - talking about and then the other Flex is
666:32 - going to be the container of all of the
666:34 - communities here okay so let's go back
666:36 - here and let's add the styles for the
666:39 - outermost Flex container okay so this is
666:41 - going to have a direction of column
666:44 - we're going to give it a background of
666:46 - white a border radius
666:49 - of four we're going to add a border on
666:52 - Pixel solid and the Border color
666:56 - of gray 300. now let's work on this
666:59 - header component here this first flex
667:01 - child okay so the header component is
667:03 - going to have an align value of flex end
667:08 - because we want the text to appear at
667:10 - the bottom of the um of the container
667:13 - okay we're going to make the text color
667:14 - white
667:16 - we're going to give this padding of six
667:18 - pixels top bottom 10 pixels left and
667:20 - right we're going to make the height 70
667:23 - pixels the Border radius is going to
667:26 - take four inputs and it's going to be 4
667:28 - pixels 4 pixels 0 pixels zero pixels
667:31 - save this so it formats a little bit
667:32 - nicer I'm going to give this a font
667:34 - weight of 700 okay and this is where
667:37 - we're going to place our image in here
667:38 - so we're going to say the background
667:39 - image and we are going to use that image
667:42 - I was just talking about in the images
667:44 - folder and we can access it via the URL
667:46 - function through CSS and inside of here
667:49 - we can pass in the path to that image so
667:52 - it's slash Images slash Rec comms
667:56 - art
667:57 - dot PNG
668:00 - just like this okay and then we're going
668:02 - to add a background size that is going
668:06 - to be equal to cover so that the image
668:07 - fits the entire container and then all
668:09 - that's going to be inside of our header
668:11 - here is going to be the text top
668:13 - communities just like this okay now
668:15 - let's go back to our index page and
668:17 - actually bring this in so we can see
668:19 - what we're doing so where this comment
668:21 - is in our right hand side fragment let's
668:23 - bring that in so we can say
668:25 - recommendations
668:30 - perfect and I think you just have to
668:32 - refresh because my hot reload thing is
668:35 - uh kind of frozen or something
668:38 - okay so we're not seeing that image for
668:41 - some reason oh I'm missing images here
668:43 - this is images there we go and to make
668:46 - it so that we can actually see that top
668:48 - communities text a little bit better
668:51 - um I'm going to place the the sort of
668:53 - like black overlay filtery blurry type
668:56 - thing over the image just so it makes
668:58 - that white text Pop a little bit more
668:59 - okay so what we're going to do is add a
669:01 - background gradient here
669:03 - um and this is kind of a long string
669:05 - here so I'm just going to paste this in
669:07 - from my demo
669:09 - and it's basically just a linear
669:11 - gradient basically just that sort of
669:13 - black overlay uh with some like light
669:16 - opacity so that it's sort of see-through
669:17 - and it just sort of makes the white text
669:19 - Pop a little bit more okay and that is
669:20 - it for this top communities header
669:22 - component here okay so let's move on to
669:23 - the actual communities list part of this
669:25 - component here so we're going to give
669:27 - this a direction of column as well
669:29 - column and inside of here we are going
669:32 - to also add a skeleton loader so I'm
669:35 - going to add the turnaround operator
669:36 - loading if we are loading we are going
669:38 - to display a skeleton component that I'm
669:41 - going to paste in from my project here
669:42 - it's about 15 lines or something it's
669:44 - just like a stack
669:46 - just like this and I'm going to add all
669:48 - of these missing Imports
669:50 - okay and if we are not loading we
669:53 - actually want to display those top
669:55 - communities okay so inside of here I'm
669:57 - going to create a react fragment so that
669:58 - we can add some JavaScript we want to
670:00 - iterate through all of the communities
670:03 - so we can say communities.map and for
670:06 - each one we're going to return one of
670:08 - those list items and in each of these
670:10 - list items we need to know if this user
670:12 - has joined this community or not because
670:14 - we need to toggle the display of this
670:15 - button to make it say joined or join and
670:18 - to make it blue or white and so to do
670:20 - that for each one on each map iteration
670:22 - inside of communities.map we can create
670:24 - an is join variable and do the exact
670:27 - same thing we did in our community
670:28 - header to determine if the user is in
670:30 - this community so we can just say
670:31 - Community State value dot my Snippets
670:35 - and try to find a snippet in here with
670:39 - the community ID that matches this
670:41 - particular item's ID okay so we can take
670:43 - each snippet and check if it's Community
670:46 - ID is equal to the item dot ID an item
670:51 - is the current community that we are
670:53 - iterating through here okay and then I'm
670:55 - just going to booleanize this and add
670:57 - the double bang operator here and then
670:59 - underneath here is where we can actually
671:00 - return the HTML for the community item
671:03 - list component here okay so let's go
671:05 - back to our app here all right so the
671:07 - outermost container of this component
671:09 - here is going to be a next link because
671:11 - you're going to make these clickable and
671:13 - direct the user to that Community if the
671:15 - user does click on it okay so we can
671:16 - bring in our link component from next
671:18 - link and to satisfy reacts requirements
671:20 - when I'm mapping through a list of items
671:22 - we need to pass this a key so we can
671:24 - give this a key of item dot ID and the
671:27 - href prop of our link is going to be the
671:31 - string that is forward slash R forward
671:34 - slash then item dot ID so that's like
671:37 - the community ID and inside of the link
671:40 - we're going to have a flex container
671:42 - here in this container is going to have
671:44 - an align of Center so everything is
671:46 - vertically centered we're going to give
671:48 - this a font size of 10.8 order bottom
671:51 - property of one pixel solid and a border
671:54 - of color of gray 200
671:58 - and we want to give this padding of 10
672:00 - pixels top bottom 12 pixels right left
672:02 - okay so we can save this okay then
672:04 - inside of here we're going to have
672:06 - another Flex container
672:08 - and we're going to give this one a width
672:10 - of 80 percent
672:14 - and also an align of Center
672:17 - inside of here we're going to have
672:18 - another Flex container that is going to
672:19 - contain the actual uh number here with
672:22 - the one two three four five okay and
672:24 - where we can get that number from is by
672:26 - in the map function we can take
672:27 - advantage of the fact that JavaScript
672:29 - also gives us access to the index of the
672:32 - current item we are iterating through
672:33 - and so down here inside of this Flex
672:36 - container we can add some text and that
672:39 - text is going to be the index plus one
672:42 - because we did not multiplicate 0 1 2 3
672:45 - 4 we participate one two three four five
672:47 - and we need two important text from
672:49 - Chakra which it does not Auto Import
672:52 - good old text okay so if I save this
672:55 - okay let's go back to our app here uh we
672:57 - can see the one two three four five
672:58 - thing there and the flex container of
673:00 - this text you're going to give a width
673:02 - of 15 here now as a sibling to this Flex
673:06 - container with a width of 15 we're going
673:09 - to create another Flex container and
673:10 - this is going to be the parent of the
673:12 - community name as well as the image or
673:14 - the icon if there is no image okay so
673:16 - we're going to give this an align of
673:19 - Center as well as a width of 80 percent
673:23 - then inside of here we can add our
673:25 - famous image URL ternary operator we
673:28 - want to check if the item has an image
673:30 - URL and if it does we want to display
673:32 - that image and if it does not we're
673:34 - going to display our famous Reddit icon
673:36 - so let's do the image here so let's
673:38 - bring an image from Chakra
673:41 - and we want to pass a source value that
673:46 - is going to be equal to item dot image
673:48 - URL
673:49 - you want to make the Border radius equal
673:51 - to full to make it round as well as a
673:54 - box size of 28 pixels and we can give
673:58 - this some margin right of two to add
674:02 - some space between the image and the
674:04 - community name okay and if there is no
674:06 - image URL we want to display an icon and
674:08 - that icon is going to be our fa Reddit
674:11 - icon
674:13 - to make sure that imports from react
674:15 - icon F A if you want to make this a bit
674:17 - bigger so we can give it a font size of
674:19 - 30 and a color of brand 100 our good old
674:23 - Reddit Orange
674:24 - brand 100 and a margin right of two
674:30 - perfect okay so we can see those showing
674:31 - up over there now underneath this
674:33 - turnery operator here I'm going to
674:34 - create a span element where we're going
674:36 - to display the actual Community ID okay
674:39 - and the reason I'm creating a span is
674:41 - because we need to apply some CSS to the
674:43 - text name so that if it's super long it
674:46 - has like the triple ellipses like the
674:48 - dot dot dot and so the text doesn't
674:49 - overflow because that's how they do it
674:51 - on Reddit and that styling wasn't
674:53 - working on like the flex container
674:55 - component from Chakra so I'm just using
674:57 - a span and it seemed to work on there so
674:59 - for this we just need to add some inline
675:01 - styling and The Styling is going to be
675:03 - white space which is going to be no wrap
675:07 - and we're going to add overflow which is
675:10 - going to be hidden
675:11 - and you're going to give text overflow
675:13 - to the ellipses just like this so if the
675:17 - community name is super long it's just
675:19 - going to show the triple dots which
675:21 - looks pretty nice
675:22 - let's go back to our app here and inside
675:24 - of here all we need to do is display the
675:27 - text that is going to be R forward slash
675:30 - then item dot ID which is the community
675:33 - name so if I save this now we can see
675:36 - those names drop here so yeah you can
675:37 - see the triple ellipties here for this
675:39 - one with the longer name now all we are
675:41 - missing for each of these list items is
675:42 - just the button that the user can
675:43 - actually click to join or leave the
675:45 - community so two Flex containers down
675:47 - from the span component we just created
675:49 - I'm going to create a box which is going
675:51 - to wrap our button component and inside
675:53 - of here we're going to add our button
675:57 - can I scroll up a bit okay so we can
675:59 - give this button a height of 22 pixels a
676:03 - font size of eight point then we can add
676:06 - the variant property and we can make
676:07 - this Dynamic depending on if the user is
676:11 - or isn't joined in this community so we
676:13 - can use our is joined Boolean then we
676:15 - just create it up top and we can say if
676:17 - they are joined we want the variant to
676:19 - be outlined and if they are not we want
676:21 - it to be solid and whoops I did not mean
676:24 - to make this button self-closing we do
676:26 - need a closing tag in here and the text
676:28 - we want to display inside of our button
676:30 - is also going to be dynamic depending on
676:32 - that is joined parameter so we can
676:33 - create another ternary operator if they
676:35 - are joined we want to display the text
676:36 - joined if they are not we want to
676:39 - display join awesome so we can see that
676:41 - showing up over here and then we just
676:42 - need to add the on click to this button
676:45 - to actually call our join or leave
676:47 - Community function and inside of here
676:48 - I'm going to take the click event that
676:49 - is generated and create a function that
676:52 - I'm going to call
676:53 - event.stoppropagation so that we do not
676:54 - trigger the next JS link when we try to
676:57 - click on this button okay then right
676:58 - after that we can call our on joinery
677:00 - community function and pass in our item
677:03 - because that is up type Community as
677:05 - well as the is joined Boolean parameter
677:07 - because that is what that function
677:08 - requires
677:10 - perfect so now this should be clickable
677:12 - and I should be able to leave and join
677:14 - these communities right from inside of
677:16 - this component so how cool is that okay
677:18 - so one very subtle thing you'll notice
677:20 - is that the logo and the text kind of
677:22 - move over very slightly depending on the
677:25 - size of this button because there's only
677:26 - so much room in this container and so
677:28 - when this button is a little bit larger
677:30 - the text and the logo move over and we
677:33 - don't want that to happen because it
677:35 - looks kind of weird and we want it to be
677:36 - in the exact same spot all the time so
677:39 - the way we can fix this is on our box
677:40 - component here we can add absolute
677:43 - positioning so we can say position
677:45 - is equal to Absolute and we can position
677:47 - these buttons to be 10 pixels from the
677:50 - right of the parent container so if I
677:52 - save this it's going to look kind of
677:53 - weird we just need to go up to this Flex
677:56 - container that is the first child of our
677:58 - next.js link and add a position of
678:02 - relative now that absolute position
678:04 - button knows it is positioned relative
678:06 - to its parent which is this Flex
678:09 - container here awesome so now when this
678:11 - button grows it's not going to change
678:13 - the position of that text because it's
678:15 - using absolute positioning it is no
678:17 - longer technically taking up any space
678:20 - in that container even though it appears
678:22 - that way and so the very last thing we
678:24 - need to add to our recommendations
678:26 - component is just the view all button at
678:28 - the very bottom there so let's quickly
678:29 - do that so below all of our list items
678:32 - here in the communities.map function uh
678:35 - just underneath there but inside of this
678:37 - fragment here we want to add a box
678:39 - component and this box is going to
678:41 - contain that button that says View
678:45 - so we save this then on this box we want
678:48 - to give it some padding and the padding
678:49 - is going to be 10 pixels top bottom 20
678:51 - pixels left and right and then for our
678:53 - button here we're going to give this a
678:55 - height
678:56 - of 30 pixels and a width of 100
679:01 - percent and this button isn't going to
679:03 - do anything it is for decoration only
679:05 - but this would be a cool feature for you
679:06 - to add to maybe take you to some
679:08 - Community recommendation or Community
679:09 - Discovery page where users could see a
679:12 - more extensive list of communities that
679:14 - they could potentially join awesome so
679:15 - we are now completely done our top
679:17 - communities component and we can just
679:19 - add in those other two decorative
679:21 - components on the right hand side here
679:22 - so let's go and do that okay and I'm
679:25 - just going to paste in the code for both
679:27 - of these components because they're very
679:28 - simple they're only about 20 lines each
679:30 - and they don't really have any
679:32 - functionality they're just for
679:33 - decoration only so inside of our
679:35 - community folder I'm going to create a
679:37 - another file called premium
679:39 - dot TSX and this is going to be this
679:42 - component here that is recommending you
679:44 - to try red premium okay and I'm just
679:46 - going to paste in the code for this
679:48 - component here it is here I will put the
679:50 - links to these components in the
679:51 - description so you do have immediate
679:53 - access and you just throw them into your
679:54 - project and then the other component I'm
679:57 - going to create is going to be called
679:58 - personal
680:00 - home.tsx and that is going to be this
680:03 - one here paste this one in it says
680:05 - slightly longer but nothing super crazy
680:06 - it's only 45 lines and again this uses
680:10 - that uh Reddit personal home image from
680:13 - the images folder so do make sure that
680:15 - you do have this to make sure it works
680:17 - on your end and that is it for these
680:18 - decorative components so we can close
680:20 - both of these and I can close my
680:22 - directory here and inside of our index
680:23 - page we can come back and bring both of
680:26 - those in so just underneath
680:27 - recommendations we can bring in our
680:29 - premium component
680:30 - and underneath that we can bring in the
680:33 - personal home component so if I see this
680:36 - and go back to the app so you can see
680:38 - these showing up here but they are not
680:39 - spaced out very good here so what I'm
680:41 - going to do is actually change the
680:42 - fragment to be a stack
680:45 - and then we can add in some spacing here
680:48 - and this spacing is going to be five
680:50 - awesome so they're spaced out much
680:52 - better now and this looks really really
680:54 - good and actually a really good exercise
680:56 - for you to do on this personal home
680:58 - component here would be to actually make
681:01 - those buttons do something functional
681:03 - for example the create post button you
681:05 - could trigger the opening of this
681:07 - directory up here maybe scroll the user
681:09 - to the top of the page and open that up
681:10 - and then for the create Community button
681:11 - you can open up the create Community
681:13 - model so I will leave that up to you if
681:14 - you decide to do that all right you guys
681:17 - it is now time for deployment we are now
681:19 - ready to actually get our application
681:21 - into production and I've decided that
681:24 - we're going to be using Purcell for our
681:26 - deployment for those of you that don't
681:27 - know versel is the company that created
681:29 - an xjs and they making deploying next
681:31 - apps extremely easy all you have to do
681:33 - is just with a click of a button we can
681:35 - connect the git repository that our
681:38 - project is hosted on to a Purcell
681:40 - project and every time we make changes
681:42 - to the master or main branch of the
681:44 - project it will automatically deploy
681:46 - those changes and we can track the build
681:48 - and everything on resell it's super easy
681:50 - and we're going to see that in just a
681:51 - few minutes all right so for deployment
681:53 - if you have not done so yet you are
681:54 - going to need to create a GitHub
681:56 - repository for your project here and put
681:58 - all of your code on GitHub because like
682:00 - I mentioned we are going to connect this
682:02 - repository to our newly created Versa
682:05 - project that we're going to create right
682:07 - now all right so before you move forward
682:08 - with versel make sure you do have a
682:10 - repository created on GitHub and all of
682:12 - your code is on there and they actually
682:14 - do have changes that I need to commit
682:16 - here
682:17 - um for our new index page that I need to
682:19 - push to my main branch before we do this
682:21 - as well okay so I'm just going to commit
682:22 - this and I'm going to say complete index
682:25 - page
682:26 - I will push this to GitHub
682:30 - perfect okay so now all of my latest
682:32 - code should be on GitHub uh yeah so I'm
682:35 - saying just right now it received that
682:37 - commit so we should be good to go with
682:39 - the deployment so this is what I'm going
682:40 - to do I'm going to go to versel.com
682:45 - okay and I already have some projects
682:47 - created here this is the this is the
682:48 - demo over here so what you're going to
682:50 - want to do is create an account if you
682:51 - do not have one and once you are logged
682:54 - in you'll see some like sort of
682:55 - dashboard where all of your projects are
682:56 - and there will be some sort of button
682:57 - where you can create a new project and
683:00 - this is where we're actually going to
683:01 - connect our repository with a single
683:03 - click of a button you can connect any
683:04 - one under GitHub repositories and get it
683:07 - ready for deployment so versal makes it
683:09 - extremely easy to deploy maxjs apps
683:12 - okay so this is the project here Reddit
683:14 - clone tutorial this was the repo we were
683:16 - just looking at and uh so I'm going to
683:18 - click on import
683:20 - and it's going to ask you for a project
683:21 - name I usually just leave it the same as
683:23 - the repo name and then the framework
683:26 - preset so we're using xjs and then I
683:28 - usually and then the root directory we
683:30 - can just leave as this index route here
683:31 - and then there's some things in here
683:32 - like the build and output settings we're
683:34 - not going to touch this and then there
683:36 - are environment variables which we are
683:37 - going to need to add because if you
683:39 - recall if you go to our DOT EnV local
683:41 - file we have all of these environment
683:43 - variables for our application to connect
683:45 - to our Firebase project so in order for
683:48 - our production application to connect to
683:50 - our Firebase project we are going to
683:51 - need to add all of these environment
683:53 - variables into our production
683:54 - environment and this is where we're
683:56 - going to do that and these can of course
683:58 - be modified and you can add more ones
684:00 - and remove ones and edit ones after you
684:02 - do deploy the project so don't worry if
684:04 - you forget some of them or some of them
684:06 - are wrong or anything you can always
684:07 - change this after your initial
684:08 - deployment and we may have to deploy it
684:10 - a few times because it might fail the
684:11 - first few times it usually happens the
684:13 - build will fail and it'll you have to go
684:15 - find something in your code refush to
684:16 - GitHub to trigger a new build and then
684:19 - usually after a few times
684:20 - work so we're going to walk through that
684:23 - process together okay so what we're
684:25 - going to do is add all of these
684:26 - environment variables to our next.js
684:28 - project so what we're going to do is
684:30 - copy all of these names here and place
684:31 - them inside of the name part of the
684:33 - environment variable and then place the
684:34 - value inside of the value so let's do
684:37 - the first one here so next public
684:39 - Firebase API key I'm going to paste this
684:41 - in here
684:42 - and as the value
684:45 - I'm going to grab the value
684:47 - paste it in and just click add perfect
684:49 - so once all six of these Firebase
684:51 - environment variables have been added go
684:53 - ahead and click on deploy and we can see
684:56 - what is going to happen so what's going
684:58 - to happen here is the deployment is
685:00 - going to be queued and it's going to
685:01 - start building the application to
685:03 - attempt to take all of your code packed
685:06 - it together into a production bundle and
685:08 - then deploy that production bundle and
685:10 - again as I mentioned this might fail the
685:12 - first few times due to some sort of you
685:14 - know any sort of typescript errors or
685:16 - compiler errors really anything can
685:18 - trigger a build error so we are going to
685:20 - see that and we'll walk through any
685:22 - debugging that might need to happen Okay
685:25 - so we can go back to our like home page
685:27 - here while it's building and we'll see
685:28 - our new project here and we can just go
685:30 - into this uh this is kind of the actual
685:33 - dashboard of this project and we can
685:35 - track everything there's there's we can
685:37 - see the build logs in case something
685:38 - does fail there's the deployments you
685:40 - have in here and so we can see there
685:41 - already was an error in the build so
685:44 - let's go take a look at that so we can
685:46 - go to view build logs so it says yeah
685:49 - build failed so now we can take a look
685:51 - at these logs here and see what errors
685:53 - it came across okay so cannot find
685:56 - module Firebase functions or
685:58 - corresponding type decorations okay and
686:00 - it tells you like what file this is in
686:01 - and everything so it makes it super
686:02 - convenient to debug so if we go to our
686:05 - functions file in here it's saying that
686:08 - it cannot find the module of Firebase
686:10 - functions
686:12 - or the corresponding type declarations
686:14 - okay if you don't think I've come across
686:15 - this one before when I deployed the
686:18 - initial project I don't think I came
686:22 - across this but let's see here
686:25 - Firebase functions okay so for some
686:28 - reason I do not have Firebase functions
686:30 - installed I thought it would have
686:32 - installed when I enabled Cloud functions
686:34 - but I'm not sure exactly what happened I
686:37 - don't remember having to manually
686:38 - install it in our demo but that's okay
686:39 - okay so I'm just going to
686:42 - Firebase functions
686:46 - maybe I did maybe I did have to manually
686:48 - install this okay so I'm just going to
686:50 - manually install this in our in our
686:52 - project here npmi Firebase functions
686:57 - foreign
686:58 - so having failed deployments is super
687:00 - common
687:02 - um and it happens a lot so don't be
687:04 - alarmed if your project fails to build
687:06 - it is very very common and oftentimes
687:08 - you have to try several times to get it
687:11 - to work there's always stuff you miss
687:13 - and things that just
687:15 - um make it fail unexpectedly okay so
687:18 - let's go back to versatile here and so
687:20 - that was the first error that it came
687:21 - across so basically how versell works is
687:23 - every time you push changes to the main
687:25 - branch or the master branch of your
687:27 - project it automatically once you
687:29 - trigger a rebuild and so all we have to
687:32 - do here is push this new code that we
687:34 - just have which is the installation of
687:36 - Firebase function through our main
687:37 - branch so let's Commit This you can say
687:39 - install Firebase functions and if I
687:43 - actually push this to my main branch
687:47 - okay so now the code is on GitHub if I
687:50 - go back to the MicroCell home here we
687:53 - can see that it says just now via GitHub
687:54 - and it's that commit is already there
687:56 - and it will have triggered a new build
687:59 - so the building is again in progress so
688:01 - let's go view build logs and see what
688:04 - happens this time okay so it failed
688:06 - again so let's take a look at what
688:08 - happened this time here
688:11 - okay
688:13 - um here's a few errors here
688:16 - okay so the first one is
688:19 - react hook use effect is called
688:21 - conditionally react hooks must be called
688:23 - okay so let's go to our index page for
688:26 - our community
688:28 - okay so the reason this is saying that
688:30 - this use effect is called conditionally
688:31 - uh it's talking about this one here and
688:34 - that is because it is below this if
688:36 - statement here so if this triggers
688:38 - um this is actually not going to run and
688:40 - that's not allowed in in react to Your
688:42 - Hooks need to run the exact same amount
688:44 - of times every single render it they
688:47 - can't be conditionally called so to fix
688:49 - this all we have to do is move this down
688:52 - here below to the very bottom and then
688:54 - if we save that that should solve this
688:57 - one here
688:58 - okay so the next one is saying that
689:02 - um quotation single quote cannot be or
689:05 - sorry can be escaped with
689:08 - okay so instead of our reset password
689:11 - it's saying online 33 it tells you the
689:14 - line everything which is super nice
689:16 - okay so I think it has to do with this
689:19 - text here this um
689:22 - this apostrophe inside of the wheel send
689:24 - you a reset link so like all we have to
689:27 - do to fix this is we could we could
689:28 - change this to like we will or I think
689:30 - we could wrap this in a template literal
689:33 - string like this to make it JavaScript
689:36 - and that should solve that we will see I
689:39 - think that should work
689:41 - um and then this one down here is it
689:43 - saying do not pass children as props
689:46 - instead Nest the children between okay
689:49 - so go to our search input
689:52 - um it's talking about line 16.
689:56 - okay so I think that's this one here
689:58 - okay so rather than I guess passing this
690:00 - um search icon as a children prop to the
690:03 - input left element uh what we can do to
690:05 - do basically the exact same thing is
690:07 - remove the self-closing tag on this
690:09 - input left element here and create an
690:12 - actual closing tag and then we can take
690:14 - this search icon
690:16 - component and place it inside of here
690:19 - like this delete the child and this
690:21 - should do exactly the same thing because
690:23 - now this is acting as the child or
690:25 - children of the input left element okay
690:28 - so now if we go back to our app yeah it
690:30 - does appear the exact same however now
690:32 - it's more like it's proper for reaction
690:33 - so I guess chakra has to update their
690:35 - documentation to reflect that as well
690:37 - because I think we just grab this off of
690:38 - chakra but okay so let's go back to
690:40 - versaille here and I think that was it
690:43 - so here we have the Escape one children
690:46 - as props and the use effect okay so I
690:49 - think that's it so what I'm going to do
690:50 - is commit these changes uh we can say
690:52 - fix build errors
690:55 - and push those to GitHub
690:59 - some of you by the way might be using
691:00 - your terminal to push these changes to
691:02 - GitHub I'm just using the GitHub Source
691:04 - control in the left here I just find it
691:05 - super easy cool okay so this should
691:07 - trigger a rebuild so let's go to so
691:10 - let's refresh this this project here
691:15 - um okay so fixed build errors it's there
691:17 - and it is buildings so let's go ahead
691:20 - and view the build logs see how far it
691:22 - makes it this time okay so it looked
691:24 - like my build succeeded we can see the
691:26 - check mark here so it's pretty quick it
691:27 - only took just over a minute uh one
691:29 - minute and 22 seconds so now we can
691:32 - actually visit this and this is the real
691:34 - app here this is it in production it's
691:37 - deployed at this uh versel domain sort
691:40 - of given to you and you can connect a
691:42 - custom domain to your project through
691:44 - Versa there should be a domains section
691:47 - inside of the project where is that
691:52 - um I need to go to oh yeah view domains
691:55 - so say you wanted to put like Reddit
691:57 - projectproject.com or something any sort
691:59 - of domain you would add that in here and
692:00 - resell would connect that for you to
692:03 - your production build so in our case I'm
692:06 - just going to leave it as the assigned
692:08 - one buy or sell but this is pretty cool
692:09 - we have a securely deployed application
692:12 - that is now officially on the internet
692:15 - and it's connected to our Firebase
692:17 - project so this is this is in production
692:18 - so that's super cool it's officially
692:20 - deployed and we can log in and
692:23 - everything so I'm going to log in as my
692:25 - Shad Mary user
692:28 - and very cool we are now able to
692:32 - actually use this application in
692:33 - production this is actually on the
692:35 - internet we are on the internet comment
692:40 - very very cool
692:42 - you can delete everything the app should
692:44 - function exactly as it was in
692:46 - development awesome
692:48 - all right you guys so the very last
692:50 - thing that we are going to cover here is
692:52 - going to be Firebase security rules
692:54 - because now that our application is in
692:56 - production we want to add some security
692:58 - rules to our database to only allow
693:00 - certain types of users or authenticated
693:02 - users to access certain resources in our
693:04 - database such as posts comments so the
693:07 - way we can Implement security rules is
693:09 - we can go to our Firebase project here
693:10 - and inside of the firestore database tab
693:12 - we can navigate to the rules section
693:15 - which we have briefly seen before and we
693:17 - actually want to write out some rules
693:19 - for our specific documents in our
693:21 - database okay and security rules are
693:23 - really important because even though our
693:25 - front end if we go to our app okay so
693:27 - only the owners of posts can like see
693:30 - the front-end action icons here like
693:32 - deleting the icon
693:33 - Etc or only admins can change the
693:35 - community image of the community but
693:38 - technically you can still make a request
693:40 - to the back end using the command line
693:43 - like using making a curl request or
693:44 - something and the request to your app
693:46 - and to your database may not necess
693:48 - necessarily be coming directly from your
693:51 - actual front-end application and it
693:52 - might be coming from some other source
693:54 - like a curl command and so for that
693:55 - reason it is important to protect your
693:58 - database and all of the data inside of
694:00 - your security rules against these types
694:01 - of potentially malicious requests made
694:04 - from outside of your application so now
694:06 - your front end and your back end will
694:08 - both be nice and secure okay so I'm just
694:10 - going to expand this out a bit so we can
694:12 - we can see this here so essentially this
694:14 - is the default security rules that you
694:16 - are given for a new Firebase project and
694:18 - so right now there's only one rule that
694:19 - exists it's basically allowing every
694:21 - single type of action on our database
694:23 - which is perfect for development because
694:24 - we need to test out all of the features
694:25 - so basically this thing here the
694:27 - document equals and then the double star
694:28 - thing is just a wild card that is the
694:31 - path to every single document in our
694:35 - database so it's the post the users and
694:37 - everything in here every possible path
694:39 - that is what this document thing
694:41 - represents it's basically just saying
694:43 - allow read and write in all cases that's
694:45 - essentially what this means and so we
694:46 - can write paths to our specific
694:48 - resources like our posts and comments to
694:50 - only allow read and write on updates and
694:52 - deletions to each type of resource okay
694:55 - awesome so let's remove this here and
694:57 - let's write out our first security Rule
694:59 - and once you write the first one the
695:01 - rest should be pretty intuitive so you
695:03 - can delete this here and the first one
695:05 - is going to be our users collection so
695:08 - to do that we can use the match keyword
695:10 - here and we want to write the path to
695:13 - the particular resource we are creating
695:15 - the security rule for in this case is
695:16 - going to be our users collection and the
695:19 - second part of the path is going to be
695:21 - our user ID so this curly bracket
695:24 - notation here just indicates that this
695:26 - is a dynamic path and that we are
695:28 - referring to essentially any document
695:30 - inside of the user's collection with any
695:33 - particular ID and on any specific user
695:35 - document we have those two sub
695:37 - collections Community Snippets as well
695:39 - as post votes and for both of those
695:41 - they're going to have the same security
695:43 - rules and so to indicate that we want to
695:45 - refer to all of these sub-collections on
695:48 - any particular user document we can use
695:51 - the wildcard parameter rest of path and
695:54 - set it equal to the double star and this
695:56 - was similar to the double star we saw
695:58 - before and this is basically just saying
695:59 - that at any path inside of any
696:02 - particular user documents or any
696:03 - subcollection and any document inside of
696:05 - any of those subcollections that is what
696:07 - this is referring to here so we can
696:09 - create specific rules for those and in
696:11 - this case this is going to be the
696:12 - community snippet sub collection as well
696:13 - as the post vote subcollection and any
696:15 - document inside of either of those okay
696:17 - so then we can open up some curly
696:18 - brackets here and this is where we're
696:20 - actually going to write the permissions
696:21 - okay so for these particular resources
696:23 - we're going to say allow read and write
696:26 - and then we can add a colon here and
696:29 - then basically we just want to write
696:30 - some sort of if statement I just want to
696:32 - say allow this if some condition is true
696:34 - so in our case we want to only allow
696:37 - reading and writing to these particular
696:40 - paths
696:41 - if the request dot auth instance
696:46 - is not null which means that the user is
696:49 - logged in because we can access that
696:51 - current user via this dot auth instance
696:54 - because it's connected to our
696:54 - authentication Service okay and we also
696:57 - want to add the condition that the user
696:59 - ID which is coming from this path here
697:03 - so whatever we name this in the wildcard
697:06 - path we can use as a variable inside of
697:09 - this logic here so if I name this user
697:10 - ID LOL down here this would be user ID
697:13 - lull it's basically the same as a
697:15 - dynamic type index.js whatever we name
697:16 - the dynamic path we have access to that
697:19 - variable name inside of the logic here
697:21 - changes back to user ID
697:27 - okay so we want to see that the user ID
697:29 - is equal to the
697:31 - requests.auth instance dot uid so we're
697:34 - saying okay so the user must be logged
697:36 - in so the request.auth instance is not
697:39 - null and the user ID of the
697:41 - authenticated user matches the user ID
697:44 - of the actual user document that they're
697:46 - trying to write to so only Chad Mary can
697:49 - write to the Shad Mary user document
697:51 - Chad mayor he cannot write to the Ben
697:53 - document or whoever document awesome and
697:56 - so that is it for our users collection
697:59 - so we can come down here and start
698:01 - working on the other ones to get so the
698:03 - next one we're going to do is our posts
698:05 - so we're going to say match slash posts
698:07 - and we are going to again use our Wild
698:09 - Card post ID variable here and for our
698:12 - posts we are going to make them
698:14 - completely public because all of our
698:16 - communities are public on reddit.com
698:18 - there are private communities and stuff
698:20 - which would require more advanced
698:22 - security rules but in our case we are
698:24 - making all of our communities public so
698:26 - all of the post data is available to me
698:28 - to anyone for reading so we can just
698:31 - simply say allow read and we do not need
698:32 - to specify a rule which means that this
698:35 - is going to be readable under all
698:37 - circumstances but we want to add a
698:39 - condition for writing a post so for
698:41 - actually creating a post and storing one
698:43 - in the database we want to add some
698:44 - condition for that and in this case we
698:47 - only want to allow the creation of posts
698:50 - if the post Creator ID matches the ID of
698:54 - the authenticated user because we don't
698:56 - want Shady creating posts on behalf of
698:59 - Ben or Ben creating post on behalf of
699:01 - Chatty so we want to make sure that it
699:02 - is shoddy creating a post for shoddy's
699:05 - user so to do that we can say request
699:08 - dot resource and request.resource is how
699:11 - we can access the actual document object
699:13 - that we are trying to write to the
699:15 - database okay and then we can access the
699:17 - data of that resource and our data if
699:20 - you remember has a parameter called
699:22 - Creator ID on it because if you go to
699:24 - our new post form here this is going to
699:28 - be the
699:30 - request.resource.data object and so on
699:32 - here we have access to the Creator ID so
699:35 - we want to check that the resources
699:36 - Creator ID is equal to the auth
699:39 - instances user ID and the next rule that
699:43 - we want to add for our posts is for the
699:45 - deletion of posts because you only want
699:47 - Shady to be able to delete Shady's post
699:49 - we don't want Ben to be able to delete
699:51 - Chinese posts so what we can do is we
699:53 - can add a rule for deleting so we can
699:54 - say allow delete and we only want to
699:57 - allow the deletion of posts if the user
700:00 - making the request so request dot auth
700:02 - dot uid is equal to the Creator ID e of
700:07 - the post resource that they're trying to
700:09 - delete and the way we can access this
700:11 - resource is we can say resource
700:14 - dot data dot Creator ID so in the case
700:19 - of creating a post when we are actually
700:21 - like writing a document to the database
700:23 - and we are passing data with a request
700:25 - we access that data through
700:28 - request.resource.data in this case we're
700:30 - accessing a resource that is already
700:31 - inside of our database so it's not
700:33 - coming from a request so we can access
700:34 - that just through that resource object
700:36 - here I'm just going to change the order
700:37 - of this first one here to match the
700:40 - bottom one it doesn't really matter but
700:41 - just a preference of mind so let's say
700:45 - like that and the very last crud
700:48 - operation we could add a rule for would
700:50 - be for updating the post and in our case
700:52 - our application is not built to allow
700:54 - editing of posts but if you decide to
700:56 - build that in this project or a future
700:58 - project this is how you would write a
701:00 - rule specific to updating this resource
701:02 - so now we can work on our comments
701:05 - so you can say match comments use our
701:07 - comment ID wildcard variable
701:10 - and the rules for this are going to be
701:12 - the exact same as the posts they're
701:15 - going to be publicly readable but only
701:17 - the owners can create and delete these
701:19 - resources and the very last type of
701:21 - resource in our database are the
701:23 - community documents so we can say slash
701:26 - communities
701:27 - and use our community ID wildcard cool
701:32 - and so for communities all authenticated
701:34 - users can create communities so we can
701:37 - just say allow read they are publicly
701:38 - readable but for writing we just want to
701:41 - make sure that the user is authenticated
701:43 - so we can say request.auth does not
701:46 - equal no
701:48 - just like that I'm just missing an if
701:50 - statement here
701:51 - awesome so now if I publish these rules
701:55 - it will actually be published to the
701:57 - Firebase servers where our application
701:59 - is currently deployed and they might
702:01 - take a minute to property to upload
702:03 - servers but now if I go back to the
702:04 - application these should be in effect
702:07 - and depending on the functionality and
702:09 - the types of features and security you
702:11 - have built into your app you can add
702:13 - more security rules and you can have
702:14 - more advanced user-based authentication
702:17 - but in our case this is exactly what we
702:19 - need for our application perfect and
702:22 - that is it for our security roles and
702:24 - now our database is nice and secure and
702:26 - only the appropriate users can access
702:29 - the data that is available to them all
702:31 - right you guys so believe it or not that
702:33 - is the end of the entire Reddit build I
702:37 - cannot believe we made it here it has
702:38 - been a wild Journey congratulations if
702:40 - you have made it to the end here I hope
702:42 - you have learned an insane amount we
702:44 - have covered so many things here and my
702:47 - entire goal with this project was to
702:49 - cover enough stuff in detail to give you
702:51 - the tools necessary to create anything
702:52 - you would want with these Technologies
702:54 - so I hope you have gained that from this
702:56 - and I really hope that you feel that
702:58 - your skills have been upgraded in
702:59 - following this tutorial and if you have
703:01 - enjoyed this content please like And
703:02 - subscribe it really does help out my
703:04 - channel and I'm going to be creating
703:05 - more and more tutorials in the future
703:07 - this is just the beginning and also
703:08 - please join our Discord it is a growing
703:10 - community and it is not only for this
703:12 - project just joining there uh to chat
703:14 - really about anything it could be about
703:15 - this project it could be about your own
703:17 - projects and it could just be this
703:18 - ongoing thing and chat about really any
703:20 - future project all right so thank you
703:22 - guys once again so much for watching I
703:24 - really really appreciate it it has been
703:26 - a crazy journey I hope you have learned
703:28 - a lot so thank you guys so much once
703:30 - again and I will see you next time