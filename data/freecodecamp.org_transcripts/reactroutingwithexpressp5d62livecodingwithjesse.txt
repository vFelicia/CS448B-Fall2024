00:00 - okay
00:04 - hey everybody
00:05 - welcome to live coding with jesse i'm
00:08 - jesse
00:09 - and this is cordelia can you say hi
00:15 - thank you wave say hi hi
00:20 - and
00:21 - are we gonna do some coding
00:23 - yeah
00:24 - all right
00:28 - yeah so um
00:31 - a little update on a few things
00:35 - so if you um
00:38 - follow me on twitter you're seeing some
00:41 - of the tweets that i was um
00:44 - putting out there were about my
00:45 - streaming setup at home
00:48 - so i uh
00:50 - i did everything i i got an old pc that
00:53 - i used to use for um
00:56 - for development but
00:58 - i haven't used in years
01:00 - got it up spent
01:02 - a really long time updating it
01:05 - uh because it evidently it takes forever
01:08 - to run updates if you haven't updated it
01:10 - in years
01:11 - uh so
01:12 - updated it all uh got everything set up
01:15 - on my
01:17 - macbook which is what i normally use and
01:19 - the pc and then it turns out that
01:22 - i was trying to use something a plug-in
01:25 - called ndi
01:26 - for obs which is my streaming software
01:30 - and it doesn't work with
01:32 - a lot of amd processors and i happen to
01:35 - have one of the processors that it
01:37 - doesn't work with so
01:39 - didn't get it to work so if today's
01:41 - stream is a little bit slow
01:44 - i apologize i i worked
01:47 - i worked hard on trying to fix that so
01:50 - i'm not sure what the next step is in
01:52 - terms of a solution
01:54 - i'd love to be able to use my
01:57 - uh my
01:59 - webcam that's much better than the
02:00 - built-in camera but my macbook can't
02:03 - handle it
02:04 - uh so
02:05 - i'll have to come up with something else
02:07 - i mean
02:09 - maybe if i just get a really cheap uh
02:12 - windows machine
02:14 - uh that has an intel processor
02:17 - i could offload a lot of the streaming
02:20 - stuff onto that i don't know we'll see
02:25 - but
02:26 - for today we're going to work on our
02:29 - our routing
02:32 - so
02:34 - let me get this up on the other screen
02:39 - and then i'll switch over to that
02:45 - all right
02:47 - so
02:48 - this is our on the left is our server.js
02:52 - file
02:52 - and this is where we have our custom
02:54 - router so i've gone over this before on
02:56 - the stream if anyone really wants me to
02:59 - go into it in more detail let me know we
03:02 - can do that in the question and answer
03:04 - portion of the stream
03:06 - which will come at the end
03:08 - and
03:09 - otherwise i'm just going to kind of
03:11 - briefly
03:12 - explain what we're doing
03:15 - and then on the right we have
03:18 - our
03:20 - our data for our main menu that that's
03:23 - in that side drawer
03:25 - and we have
03:26 - it it looks a little bit different than
03:28 - normal links so in order to
03:31 - have our client-side routing work
03:34 - we need to add in some extra information
03:37 - so that's why we have
03:40 - you know this not only this link url but
03:42 - then an as url
03:43 - [Music]
03:44 - so we need to tell
03:46 - if i could deal yet
03:52 - so uh
03:53 - yeah cordelia
03:57 - sadly she won't be joining us for the
03:59 - rest of the stream her mom
04:01 - figured out that she had snuck down here
04:03 - so
04:06 - um
04:08 - she was doing pretty good though she
04:10 - wasn't
04:11 - trying to press the keys i don't know
04:13 - maybe she could have stayed
04:18 - uh but anyway that's why we're gonna
04:20 - have to have to add in a little bit more
04:22 - information
04:24 - so basically what we need to do is tell
04:27 - our router
04:32 - exactly what information we need and
04:35 - what component it needs to render
04:38 - so normally if you go straight to the
04:42 - site like you type in a url all of it is
04:44 - handled by this router here but if you
04:47 - try to do client-side routing
04:51 - uh
04:52 - obviously
04:53 - like it bypasses our server-side routing
04:56 - right so
04:57 - we need to handle that over here as well
05:01 - so it's
05:03 - a little bit of extra work but i think
05:05 - it's
05:06 - it's what we have to do to make sure
05:09 - that all the urls from the old site work
05:13 - on the new site as well
05:16 - okay
05:18 - let's get to it
05:20 - seems like we have a lot
05:22 - fewer viewers than normal i'm wondering
05:25 - what um
05:27 - [Music]
05:29 - i wonder did anybody get a notification
05:33 - i didn't get a notification from the
05:35 - stream
05:37 - saying that it was gonna start
05:39 - maybe maybe that's the problem
05:41 - uh
05:42 - so
05:44 - usually when that happens and a
05:45 - notification doesn't go out then we
05:48 - a lot of people don't know so i did
05:50 - throw something on twitter and on
05:51 - instagram but
05:53 - uh i don't think i can manually make a
05:56 - notification go out so
06:00 - i'm just gonna get started i was kind of
06:02 - waiting a little bit see if we get
06:04 - you know our normal amount of viewers
06:05 - but
06:06 - i'm just going to get started with this
06:10 - so
06:12 - i will have a pomodoro timer and
06:16 - i'm just going to let it go on my other
06:17 - screen here
06:22 - and then
06:25 - let's jump right into
06:27 - what i was working on before i started
06:29 - the stream
06:32 - and that is i'm just going through
06:36 - let's shrink this down a bit we really
06:38 - won't use this
06:40 - at all uh maybe at the end we'll be able
06:43 - to get commit
06:45 - uh but i'm going through
06:47 - our
06:48 - data
06:50 - all our links for that side uh
06:52 - navigation menu
06:55 - and
06:57 - oh phoenix mentioned it's it's uh past
07:00 - 1am in india you know what phoenix i
07:02 - totally forgot about that you're right
07:04 - uh i i do have a um
07:08 - a decent amount of viewers uh who are
07:12 - nearly on the other side of the world
07:14 - from
07:14 - me and it is really late uh for them so
07:18 - that that probably explains
07:21 - uh
07:22 - why we don't have
07:23 - at least why we
07:25 - part of why we don't have as many
07:26 - viewers as normal
07:28 - um
07:29 - let's see
07:35 - just trying to find where i left off at
07:38 - okay so it looks like
07:41 - we have minor programming or minor
07:43 - programs works that link works
07:46 - our academic advising
07:48 - uh i'm having trouble finding this data
07:50 - so i may not have transferred this data
07:53 - yet so we're just going to skip that for
07:54 - now
07:55 - and i've already made a note to check
07:57 - that out
07:59 - so
08:01 - student academic support services
08:06 - uh let's see if we have
08:09 - if we have anything so all of our if you
08:12 - want to check out the server.js file the
08:14 - link
08:15 - uh to the repos in the description to
08:17 - the video so you can check that out and
08:19 - just go you know write to server.js this
08:21 - is all right on the master branch
08:23 - uh but all of
08:26 - you know the actual logic is down here
08:30 - but up top here we have
08:32 - a large array
08:35 - that
08:39 - it gets searched through
08:43 - to determine
08:45 - based on the url
08:47 - what needs to be rendered what data do
08:49 - we need to get
08:50 - from wordpress
08:52 - and what components need to be rendered
08:54 - so that's what all this data is here
08:59 - so let me
09:01 - i guess i should just do a search
09:04 - because this is getting quite large
09:07 - and i want to see this
09:11 - i believe
09:12 - the url would be s-a-s-s
09:16 - and what i've been doing
09:18 - and let me pull some of this over
09:22 - some of the stuff i've been working on
09:23 - on this this other screen
09:27 - what i've been doing is searching
09:33 - just to be sure
09:36 - so
09:37 - uh in this instance
09:44 - let me check back here
09:48 - okay so i believe we're in academics in
09:51 - undergraduate we have these sub menus
09:54 - uh which we ended up taking in in
09:58 - on this is the current site like the
10:00 - main site for the university that i work
10:02 - for
10:03 - as it is now so instead of having these
10:05 - menus here we move them
10:08 - to be a part of our side navigation
10:10 - which is nice because then you can get
10:11 - to them from any other page on the site
10:16 - it saves you having to load another page
10:21 - uh but this is what we're trying to get
10:23 - to the student academic support services
10:26 - so we need a route
10:29 - so that people can get to this page on
10:32 - the new site
10:39 - so
10:40 - let's see
10:43 - we have our url they need to be able to
10:45 - get to this url but also oops
10:48 - accidentally clicked on it
10:54 - actually it looks like there are sub
10:55 - pages as well
10:57 - good to know
11:00 - lots of sub pages
11:10 - okay so we have to be aware of those sub
11:11 - pages
11:14 - and what we'll do first
11:17 - is let me pull over another
11:20 - page here
11:26 - and
11:31 - let me get over i was just cleaning up
11:33 - some data so
11:38 - let's see if we have anything here
11:42 - and there are
11:44 - only about 20 entries here
11:46 - so it can just scan through quickly
12:01 - and it looks like we may not have
12:08 - we may not even have this data yet
12:11 - which is okay
12:13 - uh if that's the case
12:14 - we can
12:18 - grab that data later on and just make a
12:20 - note of it
12:24 - but we can still create a route
12:27 - we just won't be able to test the route
12:28 - right now
12:40 - so what i'll do is make note of this url
12:43 - in this route and then on my other
12:45 - screen i have a to-do list so i'm just
12:47 - going to pop this into the to-do list
13:03 - wow in my to-do list thing
13:06 - seems to take up quite a bit of uh
13:16 - quite a bit of computing power
13:19 - i can hear my um
13:22 - i can hear my laptop
13:23 - running a lot more loudly so i'm just
13:25 - going to close that down
13:28 - and
13:31 - let's make a route for this
13:35 - so that we have it
13:36 - even though we can't
13:38 - test it
13:39 - so whenever someone types in
13:41 - sass
13:46 - we need to direct them somewhere
14:05 - so let's just let's grab something
14:09 - so that we don't have to type it all out
14:11 - we're going to copy and paste so what
14:13 - we're going to do this first part is and
14:15 - this is how we set up our router not
14:17 - every custom router has to work like
14:19 - this but
14:20 - in the context of what we've done
14:24 - we're going to say if somebody happens
14:25 - to type in sass
14:28 - and i believe i've already set this up
14:30 - so that uh the case does not matter so
14:34 - this is case insensitive
14:37 - um
14:38 - so if someone types this in what we want
14:41 - to do is
14:42 - have the component that gets rendered be
14:45 - the page component
14:48 - and then we don't have a post type yet
14:51 - but we're going to anticipate creating a
14:54 - new post type for this
14:57 - so this would be
14:59 - i don't even remember what that was
15:01 - student academic support services
15:05 - so for now i'm going to anticipate we
15:07 - will create that post type because
15:10 - it looks like they're
15:13 - at
15:14 - maybe four
15:16 - at least four um
15:18 - sub pages that i can see so that may be
15:22 - a good candidate to be its own post type
15:24 - of its own section
15:27 - so
15:29 - we're going to create that at some point
15:32 - maybe not in the stream today we'll see
15:36 - uh i mean i suppose maybe we could
15:39 - let me know what you all think
15:41 - if you'd like to
15:43 - go through the steps of creating that or
15:45 - not
15:47 - and then
15:49 - for the id
15:52 - we'll stick with the default being main
15:55 - so what we'll do is the main page
16:00 - will give it the slug of main
16:02 - in wordpress
16:05 - so we'll save that
16:09 - and
16:11 - now we'll move on right because we don't
16:13 - have that data so there's not really
16:15 - anything else we can do about that uh
16:17 - although what we can do is is
16:19 - i guess we can change this here so it's
16:21 - going to be
16:25 - page type
16:31 - and id
16:33 - is going to be
16:37 - main
16:40 - there we go
16:44 - uh now writing center is another one of
16:46 - those where
16:47 - i don't know that the data has has come
16:50 - over yet
16:51 - we can double check though
16:54 - actually there's a link to it here
16:56 - so i'm just going to go here
16:58 - regardless of whether or not we have the
16:59 - data transferred it still needs to be
17:01 - added to the
17:02 - router john hanson said so now you're
17:05 - using sas for your styling
17:08 - um
17:09 - i would prefer to use sas for the
17:11 - styling actually
17:13 - i just never took the time to set it up
17:15 - oh worlds asked do you use express with
17:17 - wordpress uh so the express is a
17:20 - separate part of it
17:23 - so our express
17:25 - code which is i mean express for those
17:27 - of you who aren't sure what's what's
17:29 - happening here
17:31 - we're using javascript on the server
17:34 - okay using something called node.js
17:36 - which allows you to use javascript
17:38 - server side
17:39 - there is a a library or plug-in wherever
17:42 - you want to call it that works with
17:44 - node.js called express
17:46 - it's very common
17:48 - it may be the most common
17:50 - uh plugin that people use
17:53 - or library that people use with node
17:56 - and
17:58 - it helps like any javascript library it
18:00 - helps to simplify things makes it easier
18:03 - uh to work with it so we're using that
18:06 - uh in our server.js file to help us out
18:10 - to create a custom routing solution for
18:13 - our react site
18:16 - where wordpress comes in is we have a
18:18 - separate wordpress installation that
18:20 - lives elsewhere on a totally different
18:21 - server
18:22 - and we have graphql running on that
18:26 - server which means we can use apollo
18:30 - which which is another library that we
18:32 - work with
18:33 - to make graphql queries
18:37 - to our wordpress installation and get
18:40 - data back so
18:43 - express does work with wordpress but
18:46 - intellect indirectly right
18:48 - through intermediaries here so
18:51 - we don't directly have you know express
18:54 - on a wordpress server or anything like
18:56 - that
19:01 - okay so we have the writing center page
19:05 - and
19:06 - let's see
19:11 - it looks like there are no sub pages for
19:12 - the writing center so this would
19:14 - probably be a better candidate
19:18 - to
19:23 - yeah this would be a better candidate
19:27 - to reside
19:29 - elsewhere
19:35 - i'm meaning like it doesn't need its own
19:38 - post type
19:39 - it can reside inside of another post
19:41 - type
19:43 - and i'll show you you know what i mean
19:45 - so
19:46 - on the side here this might be hard to
19:48 - see let me increase the font size a bit
19:51 - so on the side here all different post
19:54 - types
19:56 - so
19:59 - probably that student academic services
20:03 - student academic support services
20:06 - that's probably where this writing
20:08 - center should live
20:09 - in there
20:11 - but i really would like to show you what
20:13 - happens when we have real data and we
20:14 - make a route so let's add into the
20:17 - academics pages because it i mean it
20:20 - makes sense there
20:21 - uh at least for now we can always move
20:23 - it later but in the academics pages
20:25 - let's add manually another post type so
20:29 - i'm not going to bother trying to go to
20:31 - the database and pull the data in
20:33 - we're just gonna do copy and paste just
20:36 - to get this working
20:37 - so we're gonna add a new page
20:40 - and let's call this
20:45 - writing
20:46 - center
20:48 - and we're going to paste
20:51 - this in
20:56 - let's paste this in here
20:59 - there we go and then we we keep our
21:01 - formatting when i originally pasted it i
21:03 - went into this text thing
21:05 - and uh you see we had no formatting no
21:08 - tags if you taste paste it into the
21:10 - visual tab in wordpress uh it pulls over
21:13 - a lot of the formatting
21:16 - so
21:19 - let's see
21:24 - i wonder if the uh
21:27 - all right yeah so the notification
21:29 - finally went out that the stream was
21:31 - happening so the viewer account just
21:34 - jumped up so hello everyone if uh for
21:36 - those of you just joining us which is
21:38 - most of you uh we're doing some routing
21:40 - uh we're working with our router so i'm
21:42 - just putting in some data so we can
21:44 - create a route
21:46 - and then actually navigate to it and see
21:48 - the data there
21:50 - so i will need to
21:52 - do something about you know these these
21:55 - links i need to add the links in
21:56 - somewhere so i'm not going to worry
21:58 - about that right now
22:01 - but for now let's add a slug and we'll
22:04 - just call this
22:06 - writing
22:08 - writing center
22:09 - so
22:10 - i did put the title yep writing center
22:12 - so let's publish this
22:15 - so it'll be available now
22:21 - great okay now let's go back to our
22:25 - a router here
22:26 - so if we take
22:30 - let's go
22:32 - yeah let's go here
22:35 - and copy and paste this because we won't
22:37 - need to change much so this is already
22:40 - set up to work with the same post type
22:42 - so let's grab this
22:45 - and change it to writing center
22:51 - alright and i'll take a second to
22:53 - explain this
22:57 - so what's going to happen now
23:02 - is
23:03 - i don't know why they didn't auto format
23:06 - what's going to happen now is if
23:08 - somebody types in a url
23:10 - that when the site launches it'll be
23:12 - franciscan.edu
23:14 - writing center
23:18 - then
23:19 - our router is going
23:21 - search
23:22 - through this array
23:24 - find writing center
23:26 - and then now it's gonna know okay we
23:28 - need to
23:29 - render the component called page
23:34 - it is the post type of academic pages so
23:38 - we're going to need to make a graphql
23:40 - call to search through academic pages
23:44 - and then within there we would want to
23:46 - search for the academic page with a slug
23:50 - of writing center
23:52 - so that's what each of these mean
23:55 - so
23:58 - when we say here that this has this
24:02 - this default
24:04 - i'm not going to get in too deep into
24:05 - that right now but in our router we have
24:09 - uh several like options for
24:12 - some kind of odd routes that we've had
24:14 - to deal with
24:15 - uh but for right now this is just you
24:18 - know pretty simple
24:20 - so now that i've saved that we should be
24:22 - able to navigate directly to
24:25 - that here we go we should be able to
24:28 - navigate on localhost
24:35 - writing
24:36 - center
24:39 - since i'm running this locally
24:43 - let's make sure i am running this
24:47 - okay i am
24:49 - running this
24:57 - make sure i saved it
25:05 - okay
25:06 - and let's try it again
25:12 - localhost refused to connect
25:15 - all right let's just try to get to local
25:16 - hook no it didn't
25:21 - ah let's see
25:26 - all right well localhost is not working
25:31 - what happened let's restart the server
25:34 - then
25:35 - because it should be working
25:40 - um
25:42 - let's give it a old
25:46 - click
25:47 - let's see if we can
25:56 - oh it's just not giving us an error
25:57 - immediately
25:59 - i guess that's good
26:06 - all right
26:07 - okay it's it looks like it's supposed
26:10 - it's building the page
26:17 - okay in about five minutes i'm going to
26:19 - go to the live chat and answer your
26:20 - questions if you if you're asking some
26:22 - questions just you know hang in there
26:29 - wow this is really odd oh wow that was
26:33 - taking a really long time
26:36 - uh so
26:37 - at the beginning of the stream uh most
26:39 - of you weren't there but beginning in
26:41 - the stream i was explaining that uh i
26:44 - did have a plan to
26:46 - increase the streaming performance
26:48 - uh and it failed because i don't have
26:50 - the right processor on the pc i was
26:52 - trying to stream from
26:54 - so anyway
26:55 - uh i need to
26:57 - come up with a different plan so for now
26:59 - my computer is very sluggish when i'm
27:01 - running the stream and i can't use my
27:03 - better webcam
27:07 - okay so now let's try to go to
27:13 - writing center
27:14 - to verify that the route that we just
27:17 - made works
27:28 - this may end up being a shorter stream
27:30 - uh if if our
27:33 - if this is running so slowly
27:36 - uh
27:38 - there we are awesome okay so
27:40 - we have our writing center
27:43 - information that we just created this in
27:46 - wordpress and now it's being pulled in
27:49 - through graphql and apollo into our
27:52 - react site
27:54 - and so now we have it we have writing
27:56 - center
27:58 - but
27:59 - we have a problem
28:02 - so that was wonderful if we navigated
28:04 - directly to it but what if i
28:08 - um
28:10 - what if i go over here
28:12 - in my side menu and i go down here to
28:15 - academics
28:17 - into i believe undergraduate and then i
28:20 - want to click on writing center
28:23 - right now
28:24 - [Music]
28:25 - it takes me to to
28:28 - the wrong url anyway but then also
28:31 - i i can't get
28:34 - uh the info i want so
28:36 - let's let's check that out so here right
28:39 - now
28:40 - we are going to the wrong place so let's
28:42 - change our url
28:46 - to writing center
28:48 - but that's not enough
28:52 - since this is going to be when we click
28:54 - on that that's going to be a client-side
28:57 - uh route so it's not ever going to hit
29:00 - the server
29:02 - and load from the server there's going
29:03 - to be no page refresh so everything
29:05 - we've done here basically
29:08 - it's not going to apply
29:09 - so we need to mimic what we've done here
29:13 - over here
29:14 - in our data for this
29:18 - and so
29:20 - we're going to take
29:23 - pretty much exactly what here oops
29:25 - academic pages are right
29:27 - and we're going to say what id do we
29:29 - want
29:30 - and that id translates into
29:33 - what slug
29:35 - do we need to search for in wordpress
29:38 - under the type the post type of academic
29:41 - pages so let's go
29:43 - writing
29:45 - center
29:48 - and we're going to save that
29:52 - and i'm going to give it a second
29:55 - since it was so slow earlier
30:06 - yeah all right
30:10 - so let's go back in here
30:13 - and let's click
30:16 - here in undergraduate and now let's
30:18 - check out our writing center link
30:24 - and it worked this time actually let me
30:26 - navigate somewhere else because
30:29 - we were already on that page so it
30:30 - really wasn't impressive nothing
30:32 - actually
30:32 - changed
30:40 - whoops
30:54 - and
30:55 - writing center
30:58 - there we are and it went right there
31:01 - um so
31:03 - very quick
31:06 - client-side routing
31:08 - and i don't know i don't think it's set
31:10 - up when we when we serve this locally
31:13 - but in a production environment
31:16 - a lot of this information would be
31:18 - cached so
31:20 - uh we're we're gonna by doing it like
31:22 - this
31:24 - instead of just allowing it to fall back
31:27 - uh and do a page refresh on the server
31:29 - we're gonna see significant speed
31:31 - increases
31:33 - so
31:33 - running locally you don't really see it
31:36 - that much but
31:37 - it's it's going to be worth the effort
31:40 - in terms of user experience and
31:43 - performance
31:45 - okay and my timer just went up
31:48 - uh my pomodoro timer so i'm gonna now go
31:52 - to the chat
31:54 - and try to answer as many of your
31:56 - questions as i can
31:59 - and i'm
32:00 - i may or may not do
32:02 - another pomodoro session
32:06 - i uh i'd like to do more but it's just
32:09 - the
32:11 - my computer's running so slow it's it's
32:14 - just kind of painful to wait
32:16 - uh to see if these things are working
32:21 - okay
32:23 - uh renato says hey jesse uh sorry don't
32:26 - want to bother your work uh don't worry
32:28 - about that
32:29 - questions are always welcome says just
32:32 - wanted to ask are you using a mic to
32:34 - stream i'm thinking streaming coding
32:36 - myself also is a laptop okay
32:39 - um
32:40 - yeah so
32:42 - i'm streaming from a laptop right now
32:44 - from the macbook pro
32:46 - uh i'm using the built-in microphone
32:49 - so it works when i stream from my office
32:52 - though
32:53 - i get a much better you know quality
32:56 - stream
32:57 - and from my office i'm currently using
33:00 - an external microphone that plugs in by
33:02 - usb
33:03 - and i'm also using a usb webcam the
33:08 - razer
33:09 - keo webcam
33:11 - so i've
33:13 - my streams from my office are
33:16 - so much better uh right now than what i
33:19 - can do from a laptop so
33:21 - it is possible to stream from a laptop
33:23 - but
33:26 - unless you had a really really good
33:28 - laptop you're probably not going to get
33:31 - a great quality
33:33 - in your stream both in terms of video
33:35 - quality and you know like whether you
33:38 - can get 1080p or 720 or whatever
33:41 - and in terms of just the
33:44 - what your machine can handle
33:46 - my machine obviously is slowed down
33:49 - significantly when i'm not streaming
33:52 - everything just runs super quickly
33:56 - i never have any lag
33:58 - as soon as i start streaming
34:00 - everything slows down to a crawl
34:03 - so that's just something to
34:04 - you know keep in mind
34:07 - i'm i'm sure it does really depend on
34:09 - how powerful your laptop is
34:18 - uh vargo says what software do you use
34:22 - uh obs
34:32 - okay renato is talking about sorry
34:34 - without the camera yeah you can stream
34:37 - uh if you don't include the camera i you
34:40 - should get uh be able to get away with
34:42 - having a little bit less in terms of you
34:45 - know ram on your machine uh
34:49 - it it
34:51 - there's definitely a difference in like
34:53 - how much cpu gets used
34:59 - if you have obs it'll show you the
35:00 - percentage of the cpu that gets used
35:04 - so
35:05 - depending on what you're doing
35:07 - and if you have that camera there it
35:09 - does use more
35:11 - right now i'm just using the built-in
35:12 - camera
35:14 - uh it seems that an external like usb
35:18 - camera uses even more cpu
35:22 - at least that's just been my experience
35:43 - and then just said oh cool this is for a
35:45 - legit uni yeah for sure
35:47 - all the projects we do here are real
35:50 - projects that are
35:51 - that are either live right now and we're
35:53 - improving or are going to go live this
35:56 - particular project is scheduled to be
35:58 - live on june 4th
36:01 - this is coming soon
36:04 - uh phoenix says so jesse is a laptop
36:06 - with eight gigabytes of ram uh four
36:09 - gigabyte nvidia gtx uh 1050 with i7
36:13 - processor good enough machine or do i
36:16 - need something more i i think that you
36:19 - should be able to get away with it with
36:22 - with that machine you know what let's
36:23 - bring up the um
36:28 - uh the specs for this machine now
36:31 - and uh just to to compare
36:34 - so right now
36:36 - uh that's probably too small for you all
36:37 - to see but
36:39 - uh oh so i'll read it off as well uh
36:42 - this is the macbook pro retina the 13
36:44 - inch early 2015 model so it has a 2.7
36:48 - gigahertz intel core i5 so if you had
36:51 - the i7
36:53 - you know you're already doing better
36:54 - than i'm doing right now and it has the
36:56 - eight gigabytes of memory so
36:58 - i would say
37:00 - uh yeah definitely
37:03 - uh
37:04 - you you should be able to stream with a
37:06 - laptop
37:08 - as you described it's gonna be better
37:10 - than what i have right now
37:13 - uh and right now it's not ideal but it
37:16 - is possible for me to stream from uh
37:18 - this laptop
37:34 - uh julia says
37:36 - react me
37:38 - i'm not
37:42 - i'm not sure what that question is julia
37:44 - if you could uh explain a little bit
37:46 - more i'd be happy to give you an answer
37:50 - uh john says will the caching of the
37:53 - many pages from the wordpress server
37:56 - uh be using uh prefetch or something
37:59 - else uh yeah so a lot of that will be
38:03 - using prefetch
38:05 - so whatever links
38:07 - and i can kind of show this
38:09 - this this actually might be uh really
38:12 - appropriate to show right now
38:14 - is
38:15 - you know
38:16 - where this data is going into in terms
38:19 - of like what component is using this
38:20 - data
38:21 - and that's where that prefetching is
38:23 - going to happen too so let's check it
38:24 - out
38:26 - we need to go to
38:29 - our
38:33 - drawer let's see
38:34 - our components and
38:37 - let's go to our drawer item
38:39 - so each
38:41 - item in the drawer
38:45 - is a
38:46 - has a link so we're bringing in link
38:50 - from next link so this comes with next
38:52 - js which is what we're using
38:55 - uh
38:56 - with react
38:59 - next js has some really nice things in
39:01 - there
39:02 - um it does come with some routing with
39:05 - routing right out of the box we're not
39:06 - really utilizing that
39:08 - uh since we did a custom routing but it
39:11 - has server-side rendering setup
39:14 - by default which is amazing
39:18 - so it saves us time from having to try
39:20 - to do that on our own
39:21 - and one of the things that it does have
39:23 - is this link component and you can put
39:25 - prefetch on that
39:29 - and so
39:30 - for our prefetching what we have now set
39:33 - is for all these links over here
39:37 - it's
39:40 - if
39:42 - uh item as url so if this as url is
39:46 - there
39:48 - then
39:49 - it prefetches if we
39:52 - do not put this piece of data in there
39:54 - it doesn't prefetch
39:58 - so all of these will be pre-fetched
40:04 - and we also have some logic here to with
40:07 - our turn areas to determine what should
40:10 - the href be
40:11 - this is because uh mixed in with these
40:14 - internal links we do have some external
40:15 - links which we want to be treated
40:17 - differently
40:18 - so that's why we need to do this
40:25 - so you can see
40:27 - our href
40:31 - may end up being our link url or our as
40:34 - url
40:35 - depending on
40:37 - whether or not this as url is present
40:46 - um and if so
40:48 - i guess i didn't really explain the
40:50 - prefetching so what it what this does
40:52 - here what next just does here is it
40:54 - when your page loads
40:56 - it's going to look at all the links
40:59 - that have that prefetch attribute
41:02 - and it is going to get the data
41:05 - to load those pages in the background
41:07 - using a service worker
41:09 - a service worker is a javascript file
41:13 - that just kind of sits in the background
41:15 - in the browser
41:18 - and it can do things that won't block
41:20 - the rendering
41:21 - of the the page
41:23 - so in this case what it's doing is
41:27 - it's grabbing the data
41:30 - it's loading that data and just saving
41:32 - it and waiting
41:34 - so that if a user clicks on one of those
41:36 - links that we've pre-fetched
41:39 - the data is already ready
41:41 - and it just increases those load times
41:42 - so they're pretty much instantaneous
41:45 - because that data is already there
41:47 - and
41:48 - like i said because it doesn't block
41:51 - uh any of of the rendering
41:55 - you know the user doesn't even know
41:57 - there's no like performance issues with
42:00 - all this stuff loading in the background
42:02 - so
42:04 - really cool useful
42:06 - uh
42:07 - we've done this before on a site that we
42:09 - launched and
42:12 - in google analytics when we checked our
42:15 - load times for a lot of the interior
42:16 - pages the load time was zero zero
42:20 - seconds
42:21 - uh because
42:23 - we had already pre-fetched it so
42:24 - everything was ready there was literally
42:27 - nothing to load
42:28 - so really cool
42:30 - uh
42:31 - when when this works out so we're gonna
42:33 - have i've already i already have a test
42:36 - version of this that is live
42:38 - um and it just has um you know one of
42:41 - those now
42:42 - uh urls so that now.sh
42:46 - and it has a bunch of strings so i'm
42:48 - gonna get a a more normal looking url
42:50 - set up for that
42:52 - i'll use that as an alias so then you
42:54 - all
42:55 - i'll put that in the description to the
42:57 - video so you all can check it out
42:58 - whenever you want
43:00 - uh test it
43:01 - and then you'll be able to really see
43:03 - the speed
43:06 - that this site has
43:08 - when we use that pre-fetching
43:14 - see
43:15 - goku asks uh which database we're using
43:18 - so we're using a mysql database that's
43:21 - connected to a wordpress installation
43:25 - and that's the new database
43:27 - currently for the the old version of the
43:30 - site that's still running right now it's
43:32 - a sql server database
43:34 - so i've been migrating all the data from
43:37 - there and putting it into the my sequel
43:39 - database so normally with wordpress you
43:41 - use my sql or you can use mariadb
43:45 - default for wordpress is my sql
43:53 - goku will ask which back end framework
43:56 - is better
43:57 - um
43:59 - so if you're i guess if you're talking
44:01 - about back end
44:03 - uh i it depends on what language you're
44:05 - using so
44:08 - with
44:09 - react or i'm sorry with node so with
44:12 - javascript as your back end language
44:14 - then
44:15 - express seems to be
44:18 - you know the one that that everybody is
44:19 - using
44:20 - uh it's not the only one
44:23 - but i don't have any experience with any
44:25 - other
44:30 - excuse me sorry i don't have experience
44:32 - with other backend frameworks for that
44:35 - if you're talking about you know
44:36 - different languages
44:39 - there's there's a lot of different
44:41 - options uh so i don't know exactly
44:43 - what's better uh look for php what do
44:45 - people use
44:47 - larval is that that the php framework
44:50 - that's pretty popular
44:52 - um
44:53 - i don't remember what the python one is
44:55 - called
44:56 - i never use it so i don't really
44:58 - remember
44:59 - but
45:02 - mainly when we work with node we're
45:05 - almost always using express maybe always
45:07 - i i actually i can't recall a time when
45:10 - i've
45:12 - except for like very simple things i
45:14 - can't really recall it's him that i
45:15 - haven't used express with with node
45:21 - uh
45:22 - miss
45:24 - mistate says watching this for the first
45:27 - time can you briefly tell what you are
45:29 - doing
45:30 - um okay yeah so
45:34 - right now i was working on uh using
45:37 - node.js
45:38 - to do some custom routing so like
45:40 - basically when you're
45:42 - uh when you try to browse to a certain
45:47 - page on the website
45:49 - right a request gets sent to the server
45:51 - so we're using node to
45:53 - take that request
45:55 - break it down and say okay what data do
45:58 - i need to send back to the user
46:00 - right so we were just kind of making
46:02 - those routes we're coding in
46:05 - what needs to be done
46:08 - the goal is to make sure that the routes
46:10 - for this new website match up exactly
46:13 - with the routes that are currently exist
46:15 - on the old website it's a little bit
46:17 - tricky because there's not like a
46:19 - unified system that really makes sense
46:22 - so we keep having to
46:24 - adapt our router for all these different
46:26 - exceptions
46:27 - so
46:28 - if you check out the server.js file
46:32 - in the project
46:33 - it is quite large
46:36 - and the reason being that we we need to
46:38 - be able to adapt to all these different
46:40 - scenarios
46:43 - so that's like very very short
46:45 - explanation of what we're doing
46:50 - big daddy says hello world hello
46:54 - john says thanks i'd forgotten um you
46:57 - use next js here doing the pre-fetching
47:00 - by hand uh coding in javascript is a lot
47:02 - harder oh yeah for sure i'm
47:05 - i don't even want to attempt to try to
47:07 - do the pre-fetching by hand um nikki
47:10 - says hey everyone just reformatted pc
47:13 - how do i open a specific video in chrome
47:17 - again without the window dressing like
47:19 - url bar navigation icons and bookmarks
47:25 - um
47:33 - you mean like a youtube video
47:36 - so should be a little icon uh in the
47:39 - bottom right hand corner to be able to
47:40 - do that
47:43 - john hanson says if you could i know
47:45 - it's almost impossible now but to start
47:47 - all over would a blockchain database be
47:50 - easier to maintain and build on
47:53 - uh i wouldn't do blockchain for this
47:56 - uh the reason being
48:00 - for blockchain a lot of things that you
48:02 - do with blockchain
48:05 - um
48:07 - require is it has a cost right so like
48:10 - uh if you're doing like ethereum it has
48:12 - like a they call it a gas cost
48:14 - so like if i build it on the ethereum
48:17 - blockchain
48:18 - then
48:19 - certain interactions would cost the user
48:23 - ether to be able to do now on a site
48:26 - like this i'm
48:27 - i'm not sure i haven't even
48:30 - considered building just a regular
48:32 - website that wouldn't really have a lot
48:34 - of user interactions on uh blockchain
48:38 - so
48:40 - i hadn't really thought about it but
48:43 - that's a definitely a big consideration
48:45 - though is uh will this so number one
48:49 - consideration is how much is this going
48:50 - to cost users uh but number two is speed
48:54 - uh blockchain
48:56 - apps right now are
48:58 - almost always slower
49:01 - than their equivalents that are
49:03 - non-blockchain
49:05 - uh and the reason being like
49:08 - the calculations uh
49:12 - that need to be done on all the
49:13 - different nodes in the chain you have to
49:15 - verify transactions
49:18 - are
49:19 - by design hard they're very difficult to
49:22 - do so it takes a while so anyway
49:25 - uh
49:26 - yeah if we're going to do anything with
49:28 - blockchain
49:30 - then
49:31 - that has to be considered so there needs
49:33 - to be a really good reason of why do we
49:35 - need this to be decentralized on on the
49:37 - blockchain
49:39 - um you know what's the value to a user
49:41 - of this being decentralized so in
49:44 - with this type of website right now i
49:48 - don't really see that there would be any
49:49 - value added
49:51 - by doing things
49:53 - on a blockchain
50:03 - uh fortune auto says are the routes
50:05 - programmed and configured on the node
50:07 - side or client side with react router so
50:10 - we're not running react router
50:14 - uh but
50:17 - let's see how we do it so all the routes
50:19 - are configured on the server side
50:22 - um
50:25 - but
50:26 - we do have client-side routing happening
50:28 - as well okay and a lot of that's taken
50:31 - care of with next but what we need to do
50:34 - is tell
50:36 - our components what to render so
50:38 - we we do have to give some extra
50:41 - information to get that client-side
50:42 - routing working because we still need to
50:45 - grab data from
50:47 - uh
50:48 - from wordpress using graphql so graphql
50:52 - needs to know
50:53 - what post type do we need to get and it
50:55 - needs to know what is the slug what is
50:58 - the id for that post
51:00 - so even if we're going to do client-side
51:02 - routing
51:04 - we still need
51:06 - to supply that data
51:09 - so that data is supplied on the server
51:11 - side it's supplied to the router via the
51:14 - url
51:15 - and then
51:16 - we have
51:17 - an array
51:19 - that has key value pairs of the url
51:22 - being the key
51:23 - and then we specify okay what other data
51:26 - needs to be given to the router uh and
51:30 - used to do our graphql query
51:34 - uh on that's on the server side on the
51:35 - client side you know we have you know
51:39 - this on the left hand side is basically
51:42 - with our link components we pass in what
51:45 - data we need in addition to the normal
51:48 - url
51:57 - oh nikki said basically i used to watch
51:59 - these streams almost full screen video
52:01 - left chat right with the window options
52:03 - the video is so small also shows
52:05 - description video etc
52:17 - i'm not exactly sure what uh how to get
52:19 - it
52:20 - like full screen with the chat and
52:22 - everything like uh
52:24 - like you want nikki
52:30 - dragon hunter says where's the beard
52:33 - i shaved off the beard starting to get
52:35 - warmer out so i shaved it also my wife
52:38 - hates my beard so
52:40 - the problem now is when it gets a little
52:42 - bit of stubble like i have today uh
52:44 - my uh
52:46 - my three-year-old
52:48 - he complains that my my chin hurts him
52:50 - so when he's trying to cuddle with me my
52:52 - chin hurts so i probably should save the
52:55 - stubble off for
52:56 - uh
52:58 - he's gonna be so sad
53:02 - uh john says isn't the better part of
53:04 - blockchain is that it keeps integrity of
53:06 - information over time for university
53:08 - that may be somewhat important
53:10 - um yeah for sure so
53:13 - as i was explaining everything with the
53:14 - blockchain it did occur to me that
53:17 - you know potentially
53:21 - it might not be a bad idea to look into
53:24 - blockchain
53:26 - you know for data
53:28 - right uh
53:29 - you have this persistent immutable
53:32 - storage
53:33 - um
53:34 - that's
53:35 - untouchable you know by any regulatory
53:38 - agencies or anything like that so
53:41 - there's there's definitely an advantage
53:43 - i wouldn't
53:45 - i wouldn't want to
53:47 - let's say run a website straight from
53:49 - that data
53:53 - but to use it in some other
53:54 - capacity um
53:56 - yeah maybe maybe there'd be some value
53:58 - to that
54:01 - i guess i need to look into that more
54:03 - and think more about it but i mean i
54:04 - think you do have a good point there
54:08 - dragon hunter says looks very young
54:10 - without the beard yeah i i do end up
54:13 - looking a lot younger uh without my
54:15 - beard
54:18 - but uh especially because there are gray
54:20 - hairs in my beard but i don't have any
54:22 - gray uh on my head yet so
54:26 - definitely look
54:28 - look a lot older with a beard
54:31 - okay
54:33 - hmm
54:37 - let's uh
54:46 - i think i'm gonna end the stream here
54:49 - uh unless there's any other questions
54:51 - that are going to come in in the next
54:52 - minute or so
54:54 - um
54:55 - so i mean the stream's been going on for
54:57 - about an hour
54:58 - i don't really want to have to fight
55:00 - with this really slow machine i'll be
55:02 - back in the office tomorrow
55:04 - so be able to do a nice quality stream
55:08 - tomorrow and then
55:10 - uh i'll just i i really need to see
55:15 - i need to check out some prices to see
55:18 - if um
55:22 - if there's a reasonably priced
55:24 - pc that
55:26 - has an intel processor so that i can do
55:29 - the streaming like i was going to
55:32 - uh
55:33 - yeah i really hate to buy another
55:34 - computer just for that but
55:39 - that may end up being the only option uh
55:41 - that i have i certainly can't add ram to
55:44 - a macbook that
55:46 - they don't make it so that that can work
55:48 - um
55:50 - so i don't know maybe there's uh
55:55 - yeah unless there's some other option
55:56 - that i've never heard of
55:58 - then
55:59 - maybe that might be the best way to do
56:01 - it
56:10 - let's see
56:13 - uh
56:14 - this mistake says
56:17 - i'm not sure to pronounce that too
56:19 - so let me know if this is the wrong
56:20 - pronunciation but uh anyway they say
56:22 - where are you streaming from i mean
56:24 - which place right now i'm streaming from
56:25 - home uh so
56:28 - stream quality is not nearly as good as
56:30 - it it will be tomorrow when i stream
56:32 - from my office
56:34 - dragon just says assemble one from used
56:36 - parts
56:38 - yeah i i could try it i've done that
56:40 - before it is really fun it definitely
56:42 - takes a lot longer though
56:45 - uh so i just i kind of want to just get
56:47 - this going fast you know what i do have
56:49 - one other computer that's older and
56:53 - slower
56:54 - that but it still might be
56:57 - it might work
57:00 - i guess it's worth a shot before i buy
57:01 - another one
57:03 - i'd hate to use it though
57:06 - it's just um
57:07 - my kids use it
57:09 - it's like one of those all-in-one touch
57:11 - screens it was like one of the first
57:12 - all-in-one touch screens you could buy
57:15 - um
57:17 - i'll have to see what kind of processor
57:19 - that has
57:21 - it may not even be worth it it may just
57:22 - be too old though
57:24 - oh miss state says which country uh i'm
57:26 - from the united states i'm streaming
57:28 - from the from the us
57:38 - okay all right well
57:41 - thank you all for
57:43 - joining me uh sorry about the late
57:45 - notification
57:46 - uh i don't really have control over that
57:48 - but it does seem like if i schedule the
57:51 - stream earlier uh that doesn't happen as
57:53 - much
57:56 - also sorry about this the sluggishness
57:58 - of the machine
58:00 - i'm still working on that i'm definitely
58:02 - gonna try to find some solution to get a
58:04 - better stream quality i will be back in
58:06 - the office tomorrow so hopefully we'll
58:09 - have a nicer stream uh better quality
58:12 - and
58:14 - until then
58:16 - have a wonderful day