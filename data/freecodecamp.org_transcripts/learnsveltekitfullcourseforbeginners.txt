00:00 - learn everything you need to know about
00:01 - spelt kit and Tailwind CSS by building a
00:04 - beginner-friendly and awesome looking
00:06 - landing page spelt kit is an advanced
00:09 - web development framework that has been
00:11 - constructed on the fundamental concepts
00:14 - of spelt and Vite this web development
00:17 - tutorial from James MacArthur will help
00:18 - you build skills as a front-end
00:20 - developer welcome my friends to today's
00:22 - video where we're going to be learning
00:24 - spel kit by building the ultimate
00:26 - landing page not only are we going to be
00:28 - using spel kit but we're also going to
00:30 - be using Tailwind CSS and in building
00:33 - this landing page we will learn
00:35 - everything about componentry State and
00:37 - spel kit Global stores responsive web
00:39 - design props styling and so much more
00:43 - here's a quick demo of the project we
00:44 - have our home landing page some call to
00:47 - actions little reviews functional links
00:49 - we can click on them and it takes us
00:51 - down to a nice feature display where
00:53 - we've got all the different functions
00:55 - and pain points that our app solves
00:57 - we've got some user reviews some
00:59 - Interactive activity some frequently
01:01 - asked questions and at the bottom a
01:03 - conversion section and finally a neat
01:05 - and tidy little footer and as you would
01:07 - expect it looks great on a mobile device
01:09 - too we can scroll through everything is
01:11 - nice and responsive we've got a neat
01:13 - little menu we can click on the menu
01:15 - sections come through to them so on and
01:17 - so forth this felt kick course is
01:19 - totally beginner friendly however if you
01:21 - do have a bit of experience with HTML
01:23 - and CSS that will help if not there's a
01:25 - link in the description that will be of
01:27 - use to you and hopefully by the end of
01:29 - the video you'll be an absolute spel kit
01:31 - Pro you'll be whipping out applications
01:33 - landing pages web applications you name
01:35 - it on the Fly and you can add it to your
01:37 - resume happy days thank you guys so much
01:39 - for watching don't forget to smash the
01:41 - like And subscribe buttons and without
01:42 - further Ado let's get started and it is
01:45 - now time to dive into the code to
01:49 - initialize our excellent project today
01:51 - we are going to start off inside of the
01:53 - Tailwind documentation uh to initialize
01:56 - a spel kit project now this web page and
01:59 - all other links will be linked in the
02:00 - description down below and that includes
02:03 - the GitHub repository for this code as
02:05 - well if you want to
02:07 - compare anyway so we're going to open up
02:10 - this site and run this command just here
02:13 - so inside of our terminal we're going to
02:15 - be in the directory of our choice you
02:17 - could do this in a vs code terminal as
02:20 - well and we're just going to go mpm
02:22 - create spelt at
02:26 - latest and then we're going to give our
02:28 - uh app a name so it's going to be gy app
02:32 - landing
02:33 - page we're just going to hit yes to
02:36 - install the correct packages and we're
02:38 - going to be initializing a skeleton
02:41 - project we're not going to have any type
02:43 - check and we're going to use es linting
02:46 - and with that all done we can go ahead
02:47 - and open up a visual studio code window
02:50 - hit open and just navigate to the
02:53 - directory and open that up inside of our
02:55 - Visual Studio code editor we'll know
02:57 - that we're in the right place if we can
02:59 - see the name of our application just up
03:01 - there and inside of our spelit
03:03 - application we would expect to see a
03:05 - source directory a static directory and
03:08 - then just a few extra Files The Source
03:10 - directory is where all the magic is
03:12 - going to happen however before we dive
03:15 - into that we just have to finish
03:16 - configuring our project and we can
03:19 - quickly do that by coming back into the
03:22 - documentation So within our vs code
03:25 - we're going to open up a new terminal
03:27 - that should already be in the correct
03:29 - directory
03:30 - and we're just going to go ahead and
03:32 - copy and paste these commands in
03:36 - verbatim so that's one done now we'll
03:38 - install the next one paste that just
03:41 - there that's going to create a
03:43 - configuration file now we're just going
03:46 - to copy this content straight across
03:48 - into our uh spel kit. config.js just uh
03:53 - replace it completely keep scrolling
03:55 - we're going to copy this content into
03:57 - our Tailwind do config file and finally
04:03 - we're going to copy some Tailwind
04:05 - directives into a file that we're going
04:08 - to create inside of the source directory
04:11 - and that's going to be an app.css file
04:13 - and we can just go ahead and paste those
04:15 - directives in right there finally the
04:18 - last thing to do is to create a plus
04:21 - layout dosf inside of this route
04:25 - directory so we're going to create plus
04:28 - layout dosf
04:30 - and just paste this uh script tag in
04:33 - here as well as the slot tag now if we
04:36 - quickly take a look at the source
04:38 - directory where as I said before this is
04:39 - where the magic happens we're going to
04:42 - first see a lib directory we're not
04:44 - really going to be touching that for
04:46 - this tutorial we have a routes directory
04:49 - and this is a critical directory this is
04:50 - how the multi-page application
04:52 - functionality of spel Kit works so
04:55 - essentially you can create sub folders
04:57 - within the routes and these will
04:58 - correspond to the page routes in your
05:01 - web application there's some reserved
05:03 - keyword or file spout file names uh
05:07 - namely the plus lout and the plus page
05:11 - the plus page is the uh file that will
05:13 - be rendered at a particular folder route
05:17 - uh on the page so just in here we can
05:19 - see welcome to spel Kit this is the uh
05:22 - content and the plus layout for the
05:25 - equivalent level or you know it's
05:27 - actually inherited from any parent uh
05:28 - routes as well if it doesn't exist at a
05:31 - current route is going to wrap our
05:33 - entire application so a is a wrapper
05:36 - where the plus page gets rendered via
05:40 - this slot content as if it was a parent
05:44 - tag and the children contents was just
05:46 - within here now that might appear a
05:48 - little bit confusing but we'll see how
05:50 - that works a bit more
05:53 - momentarily after that we have our
05:55 - app.css that's just a standard CSS file
05:59 - which we we had imported into our layout
06:02 - and finally we have the app. HTML which
06:05 - is
06:06 - the uh you know this is the standard
06:08 - HTML document and this is where all of
06:11 - our spel kit project gets rendered
06:13 - essentially in this div right
06:16 - here now we're not really going to be
06:18 - working too much in these files just
06:20 - occasionally and maybe a bit at the
06:22 - beginning but by majority it will be in
06:24 - the layout and Page
06:27 - files while we're over here we're going
06:29 - to create a new folder called components
06:32 - and this is going to have all of our
06:35 - component alal kit component Tre that we
06:37 - will then render within our page dosel
06:43 - file now that that's all done we can go
06:45 - ahead and boot up our project by typing
06:47 - in npm run develop uh or just run Dev
06:51 - that's going to start our project on a
06:54 - local host uh that we can then open up
06:57 - in our browser and we have our project
07:00 - right
07:02 - here if we go ahead and type class text
07:06 - green 400 we would expect that to change
07:09 - the color of the text as it has indeed
07:11 - and we can confirm that Tailwind is
07:14 - indeed working within our
07:15 - project now to continue configuring our
07:19 - project we're first going to come over
07:20 - to Google fonts this is once again
07:23 - Linked In the description down below and
07:26 - we're going to be having two fonts for
07:28 - our project one of which is going to be
07:30 - open Sands and so we're just going to
07:33 - scroll down and select pretty much every
07:36 - single font family that uh or font
07:40 - weight and style there is so that's just
07:42 - going to be all the italic and
07:43 - non-italic sized
07:46 - fonts right up to the very boldest of
07:49 - them and then we're just going to also
07:52 - look up
07:54 - Poppins which is going to be the font
07:56 - for our headers and stuff and we're
07:58 - going to do the exact same same thing
08:00 - select all the different uh
08:04 - versions that they have takes a takes a
08:07 - minute or
08:10 - so and once you've selected them all the
08:13 - way up to the uh bold ones then we can
08:17 - select this button in the top right hand
08:19 - corner and if we scroll down a little
08:21 - bit you will see a link tag show up just
08:24 - above my head there we can see that it's
08:27 - the link and at the bottom there'll be a
08:29 - cop
08:31 - button we're going to hit copy and come
08:33 - back over to our document and in the
08:36 - app. HTML file inside of the head tags
08:40 - which we have just here these contain
08:43 - the meta information about our document
08:45 - and we're going to paste in those link
08:48 - tags so that we can see them right there
08:50 - there's three of
08:51 - them
08:53 - uh now while we're doing that we're also
08:56 - going to look up the font awesome uh CDN
09:00 - package it's 6.0 CDN once again Linked
09:03 - In the description down below and we're
09:05 - just going to copy the link tag for this
09:07 - top version right here and we're going
09:10 - to paste it directly underneath the
09:13 - other link
09:15 - tag this is going to allow us to use
09:17 - their funky icon set which is going to
09:19 - be absolutely brilliant and the last
09:22 - thing we're going to do inside of our
09:24 - app. HTML is add a class to the body and
09:29 - that's just going to be
09:31 - relative uh background of white or a BG
09:34 - of white we're going to give it a text
09:35 - of slate 800 so just not a little bit
09:38 - lighter than black and then we're going
09:40 - to set the default text size to small
09:43 - we're on a small screen it's going to uh
09:46 - increase to a base size so that's going
09:50 - to be our first breakpoint we're also
09:52 - going to give it a display of flex a
09:53 - flex direction of column so that's a
09:55 - flex call and finally A Min height of
09:58 - screen
10:00 - underneath that we're just going to
10:02 - create a secondary div and this is going
10:04 - to have a class of inset Z opacity 5 so
10:09 - it's barely visible absolute uh a zed
10:13 - index of -1 we use the square
10:16 - parentheses to enter a custom value and
10:18 - finally a BG grid which is going to be a
10:21 - custom class that we will Define
10:24 - momentarily we can go ahead and save
10:26 - that and we can see our application
10:28 - hasn't really changed all that much but
10:31 - it is uh here for us after that what
10:33 - we're going to do is come into the
10:35 - app.css
10:37 - file now throughout the course of the
10:39 - tutorial We'll add a few custom CSS
10:42 - styles to this to begin we're just going
10:44 - to start off selecting the HTML tags
10:47 - which is the wrapper for the entire
10:49 - document and we're just going to give it
10:51 - a scroll behavior of smooth for some
10:53 - smooth scrolling we're going to use the
10:56 - asterisk to select every single element
10:58 - and we're going to give it a font family
11:00 - of open Sans and a backup of sand serif
11:04 - and then finally after that we're going
11:06 - to select the H1 H2 and H3 tags in
11:10 - addition to a custom class that we're
11:12 - going to Define called Poppins and we're
11:14 - just going to give that a font family of
11:17 - Poppins and a backup of sans
11:21 - serif and uh two more things to go we're
11:24 - quickly just going to select the span
11:26 - give that a font family of inherit
11:29 - and also a font weight of
11:32 - inherit uh we'll see why that happens
11:34 - shortly and the last thing we'll do for
11:37 - the minute is Define that background
11:39 - grid style uh and that's just going to
11:42 - have a background size of 40 pixels by
11:46 - 40 pixels and it's going to have a
11:49 - background image that's a linear
11:52 - gradient to the right of gray one pixel
11:57 - through to trans parent one pixel and so
12:01 - that's going to be the horizontal line
12:03 - and then after that we're just going to
12:04 - comma and include a second linear
12:06 - gradient which is going to say to uh
12:09 - bottom let me see if I can scroll that
12:11 - down a bit to bottom so this is going to
12:14 - be the vertical
12:15 - one and that's also going to be gray one
12:18 - pixel uh and
12:20 - transparent 1
12:22 - pixel so if we save that we can see the
12:25 - Light Grid background show up in our
12:27 - document which is pretty nifty
12:29 - that's going to look super cool and we
12:31 - can also see that our fonts have changed
12:34 - and updated with that done we're going
12:36 - to come over to our layout. spelt file
12:39 - now in here what we're going to do is
12:41 - actually start off by taking a look at
12:43 - how our document is going to be
12:44 - structured a successful landing page
12:46 - relies on telling a good story uh to
12:49 - sell a user on a product and for us
12:52 - that's going to be in the order of first
12:54 - a header at the bottom we'll have a
12:57 - footer and and then we're going to have
12:59 - a hero section which just looks cash
13:01 - money we'll have a product
13:04 - description section after that we'll
13:07 - have some user reviews so that you know
13:10 - now the user has been excited about the
13:12 - product they've seen uh what it's about
13:14 - they've seen that other people like it
13:16 - and then finally we're going to have a
13:18 - frequently asked questions uh cuz Often
13:20 - by that point people have questions and
13:22 - lastly a
13:23 - conversion so this is going to be the
13:26 - general structure of our page
13:29 - we can just leave that there for now
13:31 - with that done we can uh come into the
13:33 - components folder and we can actually go
13:35 - ahead and create all these components so
13:38 - we can start off by creating a header
13:40 - dos felt uh we can create the
13:44 - footer dos felt we can have a hero dots
13:50 - felt then we can have a
13:53 - product description well we'll actually
13:56 - just call it uh product do do
13:59 - felt then we can have a reviews
14:05 - dosf uh a
14:08 - FAQs dos
14:10 - spelt and finally I think the
14:15 - conversion
14:17 - dosf so that should be uh pretty nifty
14:21 - if we come back over to our spelt uh our
14:24 - plus layout. spelt the first component
14:27 - we're going to render out is the footer
14:29 - and that's going to go just underneath
14:31 - the
14:32 - slot uh and we can see that we just need
14:34 - to import that component from the
14:36 - appropriate directory there's also just
14:39 - going to be one last component that
14:40 - we're going to make called the section
14:43 - wrapper do and this is just going to be
14:46 - a section so we can actually Define the
14:48 - section that has some certain Styles uh
14:53 - specifically the class
14:57 - of and this is going to be a dynamic
15:00 - class so we're going to wrap it in curly
15:02 - parentheses and this is just going to
15:04 - have a minimum height of the screen a
15:06 - display of flex a flex direction of
15:08 - column and a padding X of
15:12 - four we're going to add some Dynamic
15:14 - styles to that a bit later after that
15:17 - we're going to have a div that has a
15:18 - class of flex Flex call Flex one so that
15:21 - it occupies as much space as it can and
15:24 - a maximum width of 1,400 pixels uh an MX
15:29 - of Auto and a width of full we can open
15:32 - that up and then finally we're just
15:33 - going to render out the slot which if we
15:36 - recall from earlier is the child content
15:39 - that gets uh wrapped between the opening
15:42 - and closing section wraid
15:45 - tags what that will allow us to do is
15:48 - come over to all of these uh primary
15:50 - components and we can call the section
15:53 - wrapper just like that and have it uh
15:57 - consistently wrap out different sections
15:59 - so that they're all styled the same the
16:03 - first one that we're going to style is
16:05 - the hero section so we can come over to
16:07 - our page and get rid of everything
16:09 - default in there and we can whip up a
16:12 - main section which is just going to have
16:14 - a class of flex and flex column and in
16:17 - here we can start off with our
16:21 - first uh component which is the Harrow
16:24 - we can open up the herrow component just
16:27 - there and close it this can be a self
16:29 - closing
16:31 - component and nothing is currently
16:34 - showing up however if we come back over
16:35 - to the uh hero component we can now see
16:39 - that we have that show up just there now
16:42 - the first thing that we're going to have
16:43 - inside of our hero component is actually
16:45 - the header the header is going to show
16:48 - up at the top of the page uh keeping in
16:50 - mind that we have to import that file or
16:53 - that component with that imported we can
16:55 - actually start off styling our header
16:57 - this one's going to be pretty
16:59 - straightforward for the most part we're
17:01 - just going to start off with a script
17:04 - tag uh and underneath this we're going
17:06 - to open up a header tag this is going to
17:09 - have a class of flex Flex
17:13 - Co relative Zed index of 20 and within
17:18 - that we're going to open up a div this
17:20 - is going to have a class of Max with
17:22 - 1400 pixels that's going to be our
17:24 - maximum width for most of our elements
17:27 - we'll give it an MX Auto a width of full
17:30 - display of flex uh the default is flex
17:33 - row so we don't have to add Flex calls
17:35 - in this one we're going to give it an
17:37 - item Center which is a line item Center
17:40 - and justify
17:43 - between uh and also we're just going to
17:44 - give it a padding of four but a padding
17:47 - y of six so it's a little bit bigger
17:51 - inside of this element we're going to
17:53 - first have uh an anchor tag this is
17:56 - going to have an href back home and this
17:58 - this is going to
17:59 - contain uh an H1 tag that is going to be
18:02 - the name of our application so in this
18:06 - case it's going to be swy Molly however
18:09 - we're also just going to wrap the Molly
18:12 - tag inside of a span because then we can
18:15 - go ahead and give this a text Indigo
18:19 - 400 and on the H1 itself we can give a
18:22 - class of
18:24 - font uh semi
18:27 - bold we open up our page we can see
18:29 - swally Molly comes up in the top left
18:31 - hand corner and the Molly is the
18:34 - secondary color which is just as we
18:35 - would like it after the anchor tag we're
18:37 - going to have a button uh this button is
18:40 - going to be for our menu icon which is
18:44 - going to display on a smaller screen so
18:46 - we can come over to font awesome icons
18:48 - once again Link in the description down
18:50 - below and just look up
18:54 - menu and here we can see we get a three
18:56 - bar icon uh we can go ahead and copy
18:59 - this code snippet and just paste it
19:01 - right on in the button if we come back
19:04 - to our page we can indeed see that show
19:07 - up in this corner so that is perfect and
19:09 - we're just going to give this a sneaky
19:11 - class of
19:14 - uh medium hidden otherwise it's going to
19:18 - be grid and place items Center and this
19:22 - is essentially going to default to the
19:26 - grid display how however on a medium
19:29 - break point and above we're going to
19:30 - hide the element so we can see that just
19:32 - disappears up there however should I
19:34 - drop the page size it's going to show up
19:37 - now we're going to inverse this Behavior
19:40 - inside of a nav element so this is going
19:42 - to only display when the uh hamburger
19:46 - icon disappears so this can have a class
19:49 - of hidden by default until we hit that
19:52 - medium breakpoint and then we can give
19:54 - it a display of flex item Center a gap
19:57 - of four and on a large screen uh
20:00 - breakpoint we can give it a gap of six
20:02 - so it gets even
20:04 - bigger inside of here we're going to
20:06 - have uh some anchor tags this one the
20:10 - first one can be uh
20:13 - product after that we can have a
20:16 - secondary one that says uh reviews and
20:21 - then finally we could have an anchor tag
20:23 - that just says
20:25 - FAQ and then at the bottom of this we're
20:27 - going to have a button and this is going
20:29 - to have a class of special button which
20:32 - is a class we have yet to Define and in
20:35 - here we're going to have a paragraph
20:37 - that just says start free today so there
20:40 - we can see all that show up which is all
20:42 - well and good and then if we go on a
20:45 - screen that's too small it uh swaps over
20:47 - to the hamburger icon now for each of
20:51 - these I'm going to select all of them at
20:53 - the same time and just give them all the
20:56 - same class and that's just going to to
20:58 - be a duration of 200 uh and on Hover
21:02 - we're going to say text Indigo 400 and
21:04 - give it a cursor of pointer and we can
21:07 - go ahead and save that and so now when I
21:11 - uh hover over these elements we can see
21:13 - it changes color as you would
21:16 - expect the other thing I'm just going to
21:18 - do is add an hre on each of them that's
21:21 - just going to make the link functional
21:23 - and we're going to uh have it scroll us
21:26 - to a section with the ID of product for
21:29 - the first
21:30 - one for the second one it's going to be
21:32 - href uh pound
21:35 - reviews and finally it's going to be
21:38 - href pound
21:40 - FAQs inside of our section wrapper
21:43 - component we're going to apply these IDs
21:46 - dynamically and we can do that by
21:48 - initializing a script tag and having the
21:50 - section wrapper receive some props now
21:54 - the way that we receive props is we say
21:56 - export let uh and then the name of the
21:59 - prop so in this case it's going to be uh
22:02 - ID and we can go ahead and just say ID
22:05 - is equal to a dynamic ID just like that
22:10 - and additionally we can come into the
22:12 - component itself and we can there within
22:15 - pass in that ID so this one for the
22:18 - herrow is going to have an ID of uh
22:21 - actually it's not going to have one but
22:22 - the product for example when we create
22:26 - our section wrapper
22:28 - just like that making sure to import it
22:30 - we can then add the ID of our product
22:34 - that's going to be passed down and uh
22:37 - consequently used for that
22:40 - section now as you may remember inside
22:42 - of our header section we had a button
22:44 - down the bottom that had a special class
22:47 - now this is a class that we're going to
22:49 - Define inside of our app. CSS
22:53 - file we're going to do that by saying
22:56 - button uh and we're also going to define
22:58 - a class called button so this is going
23:00 - to select all buttons or anything that
23:02 - we give the class button to and in here
23:05 - we're just going to say border
23:08 - radius of 8 pixels border is going to be
23:12 - 1 pixel solid
23:14 - transparent we're going to give it a
23:16 - padding of 0.6 em uh vertically and 1.2
23:20 - em horizontally we'll give it a font
23:25 - size of 1 m a font weight of
23:31 - 500 uh a font family of
23:34 - inherit a background color of white a
23:39 - cursor
23:41 - pointer and finally a transition we're
23:44 - going to set the transition on the uh
23:49 - border
23:50 - color to 0.2
23:54 - seconds now underneath that we're going
23:56 - to add a button hover effect and that's
23:59 - just going to set the Border color to uh
24:02 - a hex code which is #
24:05 - 646
24:07 - cfff underneath that we're going to set
24:09 - a button Focus event and a button Focus
24:14 - visible and that's also going to uh have
24:19 - a an outline of four pixels auto- web
24:26 - kit D Focus d ring-c color and so those
24:30 - are just some button Styles uh and now
24:32 - we can Define the special button this is
24:36 - going to have a border color of # uh 646
24:42 - CF and we're also going to uh create
24:45 - another one called special button dark
24:48 - and that's instead going to have the
24:49 - background be the uh hex code that we've
24:53 - been using so that's 646
24:55 - CF and we're instead going to get give
24:57 - the color to white and now if we come
25:01 - back into our application we can just
25:03 - see that's uh styled our button up here
25:06 - for us so that's coming along nicely uh
25:09 - but there's just one more thing we have
25:10 - to add in here and that is a DOT special
25:14 - button uh hover event and that's just
25:16 - going to set the Border color to a dark
25:19 - blue or just a regular
25:22 - blue uh and so we can just see that show
25:25 - up uh there it just gets slightly darker
25:29 - so with that done that's our header we
25:31 - can now come into our application and
25:33 - start stying the rest of our hero
25:35 - section and to do that I'm going to
25:37 - replace this ASD stuff with a div that
25:41 - has a class of flex Flex call Gap of 10
25:46 - a flex of one uh we're going to give it
25:48 - an items Center ad justify Center a
25:53 - padding bottom of 10 until the medium
25:55 - break point where we're going to give a
25:56 - padding bottom of 14 that's just going
25:59 - to Center absolutely everything and in
26:02 - here we're going to have an H2 tag this
26:04 - is going to have a class of text 5 extra
26:08 - large until we get to the small
26:09 - breakpoint then it's going to be text 6
26:12 - XL
26:14 - medium text 7 XL I'm sure you're
26:17 - starting to get the idea finally a large
26:19 - of text 8 extra
26:23 - large we're also going to give it a Max
26:25 - width of 1,00 pixels an MX of Auto and a
26:29 - width of
26:30 - full uh and lastly a text of Center
26:34 - inside of here we're going to have a
26:36 - Spam that has a class of text Indigo 400
26:41 - that's just going to contain the first
26:42 - word which is gy after that we can carry
26:46 - on the sentence uh that just says
26:49 - training then we're going to have a
26:51 - secondary span this one's going to have
26:53 - a class of text slate 600 so it's going
26:57 - to be light lighter than normal and
26:59 - we're also going to give it a class of
27:00 - line through so that it looks like it's
27:02 - being crusted out and this is going to
27:04 - say is hard and then after that we can
27:06 - have a break point uh and we can finish
27:09 - off and continue saying just got and
27:13 - then finally have that span again that's
27:15 - a text Indigo 400 and
27:20 - easier so with that all done we can see
27:22 - we get uh this styling just here one
27:25 - thing I forgot on the h Two element is
27:28 - to give it a font of semi
27:32 - bold now the line through didn't show up
27:35 - and that's because I spelled it
27:36 - incorrectly through and now we can see
27:39 - uh Gym training is hard just got easier
27:42 - it's pretty nifty little sentence
27:45 - because it shows what we do and it shows
27:47 - the common sentiment underneath that we
27:49 - can have a paragraph This is going to
27:51 - have a class of text extra large small
27:54 - text
27:56 - 2XL medium text 3 XL uh likewise with
28:00 - the one above a text Center and a
28:02 - maximum width that's slightly shy of the
28:05 - above one th000 pixels an MX Auto and a
28:09 - width of full inside here we're just
28:11 - going to say less thinking and more
28:15 - doing we're the trainer in your
28:20 - pocket full of and then we're going to
28:23 - have a span this is going to have a
28:24 - class of italic and then we're going to
28:27 - have
28:28 - personalized workouts exercise
28:32 - explanations
28:34 - analytics uh and then after the spam
28:36 - we're going to finish the sentence that
28:37 - says and much much more full stop we can
28:42 - see that show up just there that is all
28:45 - well and good and then under that we're
28:47 - going to have a call to action button uh
28:51 - that's going to be a component that we
28:52 - can create so that's going to be ctas do
28:55 - spelt and with that created we can go go
28:57 - ahead and render that just here
29:00 - ctas just like that obviously nothing
29:02 - shows up because it doesn't yet exist
29:05 - but if we come into the component it's
29:07 - pretty straightforward and we're going
29:09 - to have a script tag that we're going to
29:11 - modify a bit later it's going to have
29:13 - some Dynamic styling but for now we're
29:15 - just going to have a div that has a
29:16 - class of flex item Center and a gap of
29:19 - four and inside of here we're going to
29:21 - have our
29:23 - button this is going to have a class
29:26 - once again it's Dynamics so we wrap it
29:28 - in the curly parentheses and that's
29:30 - going to be special button uh we'll add
29:33 - more to that later inside of here we're
29:36 - going to have a paragraph that just says
29:39 - uh contact
29:42 - us and this is going to have a class of
29:44 - text base small text large medium text
29:49 - extra large uh and then we can go ahead
29:52 - and duplicate this button except the
29:55 - second one is going to be special button
29:57 - dark which is the darker button we
29:59 - defined and this is just going to say
30:03 - get started uh and then we're going to
30:05 - have the HTML right arrow which is an
30:09 - Amber sand and then r a r r
30:14 - r and that's going to give us our two
30:16 - little buttons just here which is pretty
30:19 - nifty now for the last part of the
30:22 - section we've got the review part so
30:24 - that's just going to be a div with a
30:26 - class of flex item Center justify Center
30:31 - a gap of Two and a text size of Bas in
30:35 - here we're going to have a paragraph
30:37 - that says 4.6 this is just going to be
30:39 - the example rating underneath that we're
30:42 - going to have a uh some mapping we're
30:47 - going to map out some content and we do
30:49 - that in spel kit by uh using the curly
30:52 - parentheses and then using an each Loop
30:55 - essentially so it's for each it item in
30:57 - an array in here we have to pass in an
31:00 - array so we're just going to create one
31:02 - on the Fly it's got five elements and
31:05 - we're just going to call each or refer
31:07 - to each element as index as it gets
31:10 - rendered and in here we're going to have
31:12 - a repeated unit so this is going to be a
31:15 - div that gets repeated for each element
31:18 - in the
31:19 - array and this is going to have a class
31:21 - of grid Place items Center and relative
31:26 - and in here we're going to have a font
31:28 - awesome icon this is going to have a
31:29 - class of fa solid fa a star and an
31:34 - opacity of
31:36 - zero uh we'll see why in just a second
31:39 - and then after that uh icon we're going
31:41 - to have a div this is going to be a
31:44 - pretty clever div so it's going to have
31:45 - a class it's a dynamic class so we use
31:48 - the curly parentheses to wrap our
31:51 - string and in here we're going to give
31:53 - it a position of
31:55 - absolute uh top of Zer a left of zero a
32:01 - display of grid and place items Center
32:05 - and then we're going to have a space at
32:07 - the end of the string and then use the
32:09 - uh plus to append a conditional style so
32:14 - we're going to say if the index is equal
32:16 - to four uh I.E it's the last element in
32:19 - the array then we are going to have the
32:22 - turnery operator or the question mark uh
32:25 - and if the if the index equals 4
32:28 - evaluates to true we're going to say
32:30 - width of
32:33 - 60% uh and an overflow of headen and if
32:37 - it is not true so we separate the true
32:39 - and the not true statements using the
32:41 - semicolon we're just going to have an
32:43 - empty string so if we go ahead and save
32:47 - that that's not showing up for us and
32:49 - that's because I haven't put anything
32:51 - within this div cuz I'm a muppet so
32:53 - inside of the div we're just going to
32:55 - have the icon this is going to be the
32:57 - class of fa solid fa Star as above and
33:01 - we're just going to give this one a text
33:03 - of Amber
33:04 - 400 so now if we go ahead and save that
33:07 - we can see we get these stars showing up
33:09 - that looks excellent and you can see
33:12 - well actually you can't see let me just
33:13 - move this over it cuts off that last
33:16 - star at 60% uh which is the
33:19 - 4.6 so that's why we did all of
33:24 - that and then after that div uh we're
33:27 - just going
33:28 - to after the each sorry we're going to
33:31 - have a paragraph that just says 500 plus
33:34 - so that's just going to imply that over
33:35 - 500 people have rated the application
33:37 - 4.6 on average and yeah that's pretty
33:40 - much our landing page if we uh look at
33:43 - it on a mobile device so let's right
33:46 - click and
33:48 - inspect we can hit mobile and we can see
33:50 - that it uh pretty much looks uh just as
33:53 - you'd
33:54 - expect uh looks pretty nifty if I say so
33:58 - myself now obviously we have to come
34:01 - back to this nav menu but we will do
34:03 - that shortly but first we're actually
34:05 - going to move on to the next section
34:08 - which is our product dots felt so thus
34:11 - far inside of our product dots felt we
34:13 - have our section wrapper and that has an
34:15 - ID of product now if we inspect this
34:19 - page we would uh expect to actually see
34:24 - that section show up so if we just come
34:26 - in here
34:28 - here well actually the first thing we
34:30 - have to do is come back into our page
34:32 - and actually render it out so inside of
34:35 - here we can render Out product doel
34:38 - making sure to import it and now if we
34:41 - come back to our page we can indeed see
34:44 - here we have our main then we have our
34:46 - first section and we have our second
34:48 - section and we do indeed have the IDE of
34:51 - project uh project so that's
34:54 - perfect we can go ahead and close that
34:56 - again now inside of product we're going
34:58 - to have some product cards but we're
35:01 - also going to have some information so
35:03 - up here I'm going to say let uh
35:07 - product features equal to an array we'll
35:12 - fill that out
35:13 - momentarily uh but first we're going to
35:16 - enter this down onto a new line and in
35:20 - here we're going to create a div that
35:21 - has a class of flex Flex Co a gap of 10
35:25 - until the small break point then we're
35:27 - going to have a gap of
35:28 - 14 uh and then on a medium break point
35:31 - we're going to have a gap of 24 we'll
35:33 - give it a flex of one item Center ad
35:38 - justify Center and a padding bottom of
35:42 - 10 uh until the medium break point then
35:44 - we'll make it 14 inside of here we're
35:47 - going to have a div that has a class of
35:48 - flex Flex column a gap of two and this
35:53 - is going to contain a paragraph tag with
35:56 - a class of opacity 60% or just 60 a text
36:00 - size of Base until we get to the small
36:02 - screen that'll be a text large and on a
36:04 - medium screen a text uh extra large and
36:08 - text
36:09 - Center this is going to say start your
36:13 - lifetime then we'll have a span that has
36:15 - a class of text Indigo
36:18 - 400 uh gym
36:21 - streak and then after that we can have
36:24 - today so if we come back we can see that
36:26 - show up right there uh and underneath
36:29 - this paragraph tag we can have an H3 and
36:33 - this is going to have a class of text 4
36:37 - XL until the small screen then text 5
36:39 - extra large uh medium text 6 extra you
36:43 - get the idea a Max width of 1,000 pixels
36:47 - using the square brackets for the uh
36:49 - custom value an MX of Auto and a Max uh
36:53 - sorry and a width of full a font semi
36:57 - bold and a text of
37:00 - center now this one is going to say
37:03 - features for
37:04 - everyone uh and once again we can see
37:06 - that show up there so that's kind of how
37:08 - we're moving onto the second page and
37:10 - then underneath this div we can create a
37:13 - new div that has a class of grid grid
37:17 - calls one that just means it's a
37:19 - singular column until we get to a medium
37:22 - screen then we're going to see grid
37:24 - calls uh two
37:27 - we'll give it a gap of 10 until the
37:29 - medium then we'll go for a gap of 14 and
37:32 - then on a large we'll go for a gap of 20
37:35 - width full Max width 1100 pixels
37:39 - actually I might not do the max width
37:41 - for the second let's just see how it
37:42 - looks but we will give it a relative and
37:45 - a text size of base and now in here what
37:48 - we're going to do is we're going to have
37:50 - each uh product features as uh product
37:54 - feature we'll just do the singular
37:56 - version
37:57 - and this is once again going to uh map
38:00 - over each product feature and have the
38:02 - card for
38:04 - it now we'll close that each block and
38:08 - for this we're actually going to define
38:10 - a component called the product card.
38:14 - spelt and in here we're going to open up
38:16 - a script tag and we're going to say
38:18 - export let index just so we know what
38:22 - the index is and in here we're going to
38:25 - create a div that has a class of Flex
38:27 - Flex call a gap of eight until a medium
38:30 - screen then we're going to have a gap of
38:31 - 10 uh and the other thing I'm actually
38:34 - going to do is copy this div right here
38:38 - and paste it inside this component
38:39 - because it's actually meant to uh wrap
38:42 - that bottom one so I'm also going to
38:44 - paste the closing tag on the other side
38:47 - so I'm just moving that whole div into
38:49 - this component the other thing we're
38:51 - going to export let is the product
38:55 - features uh what it's actually just a
38:57 - singular product feature and we'll see
38:58 - how that will work in a minute now the
39:01 - first thing we're going to have inside
39:02 - of here is an H4 tag this is going to
39:05 - have a class of text 2 XL until
39:10 - a small screen then it's going to be a
39:12 - text 3 XL medium text 4 XL a Max width
39:17 - of 1,000
39:18 - pixels uh a width of full font medium
39:24 - and a relative positioning we're going
39:26 - to use some pseudo effects here so we're
39:28 - going to say after and give it an
39:30 - absolute position after top of full
39:33 - after lift of zero after width of 1/5 of
39:38 - the parent element after a height of 1.5
39:43 - after a margin top of one after
39:46 - background slate 900 and after
39:50 - PR uh well actually sorry that's the
39:52 - last one is just a general PR of 10 so
39:55 - padding right
39:57 - of 10 inside of this H4 we're going to
40:00 - render out the slot uh text uh and we'll
40:05 - see how that works
40:07 - shortly after that what we're going to
40:09 - do is uh have a paragraph and this is
40:14 - going to say product feature and we're
40:17 - going to access the description and then
40:19 - underneath uh this div right here well
40:23 - actually sorry still within it uh we're
40:26 - going to have a secondary div and this
40:28 - is going to have a class of flex Flex
40:30 - column and a gap of three uh and in here
40:33 - we're going to have a new each and this
40:35 - is going to be product feature. featur
40:39 - list as list
40:41 - item uh so we're just mapping over all
40:44 - of the feature list we'll see where this
40:46 - gets created shortly and in here we're
40:48 - going to have a div that has a class of
40:50 - flex a gap of two and an items
40:54 - Center and then we're going to have a
40:56 - div that has a class of grid Place items
40:59 - Center a padding X of 1.5 text size of
41:03 - extra small until the small screen then
41:05 - it's going to be a text of small it's
41:07 - going to have an aspect of square which
41:10 - means that the height will match the
41:12 - width we're going to give it a rounded
41:14 - of full so it'll be circular a border of
41:18 - uh 1.5 pixels so that's a custom amount
41:20 - so we use these uh square brackets a
41:23 - background of white a border solid and a
41:25 - border of green
41:28 - 300 we're doing all of that so that
41:30 - inside we can have an icon so that's
41:32 - going to have a class of fa solid fa
41:36 - bolt and a text of green
41:40 - 400 uh underneath this div just here we
41:42 - can have a paragraph that has the list
41:45 - item uh now obviously that's not going
41:47 - to show up for the second but if we come
41:50 - back into our product feature we can go
41:53 - ahead and render out the product card
41:56 - ensuring that we do in fact have the
41:57 - opening and closing uh product card
42:00 - features in here we're going to pass in
42:04 - the product feature equals
42:08 - product feature so we'll pass that down
42:10 - as a prop we're also going to pass down
42:12 - the index uh which we can just access by
42:15 - adding a comma here and just access that
42:19 - index now you'll see just here we have
42:21 - the shorthand for passing props that's
42:24 - uh absolutely fine that works too
42:26 - and in here we're going to have an if
42:29 - statement uh so we're going to say pound
42:33 - if and in here we're going to add a
42:36 - semicolon and an else if and then we're
42:39 - going to have another else block and
42:41 - we'll see what we do with that in a
42:44 - second well actually we can just add it
42:46 - now this one's going to be uh if index
42:49 - is equal to Zer else if index is equal
42:52 - to 1 and then else so we just need three
42:55 - conditions cuz we're going to have have
42:56 - three product
42:57 - features now for our product features
43:00 - we're going to come to this array and
43:02 - create uh three
43:04 - objects now the object template is going
43:07 - to have a let's see what we access so
43:10 - here we're going to have the feature
43:12 - list and a description and an image so
43:16 - we're actually just going to have
43:17 - feature list that's an array description
43:21 - is just going to be a text description
43:24 - and then we're going to have an image
43:25 - URL
43:26 - that we uh use for the feature list uh
43:30 - once again you'll want to copy this
43:32 - straight
43:33 - from the GitHub
43:37 - code uh I'm just going to copy in the
43:39 - three features here so here we can see
43:41 - them uh well it's a list of four I guess
43:44 - you could say and I'm just going to
43:46 - format them all simultaneously so
43:48 - there's my first feature
43:50 - list uh as for the description for the
43:52 - first one it is just here I'm going to
43:55 - paste it across
43:57 - and then finally for the image URL we'll
43:59 - come back to that
44:01 - momentarily now we can just duplicate
44:03 - this three times cuz we've got three of
44:05 - them for the second one I'll just copy
44:09 - in the the new features so here they are
44:13 - just here quickly format them so that
44:16 - they are all strings in the
44:19 - array that's the second one we'll swap
44:22 - out the description happy days and then
44:25 - lucky last this one just down
44:29 - here so here's the
44:33 - description and this one actually has
44:37 - five features uh actually this one is
44:41 - not meant to be there and so we can just
44:44 - go ahead and select all of these we can
44:48 - have
44:49 - the quotation then the comma and just
44:52 - have that like there so there are our
44:55 - three featurist
44:58 - now back down here when we have the
44:59 - product card uh for the first
45:04 - statement I'm going to have some text so
45:08 - this is going to get rendered as the
45:09 - slot inside of the uh card just here and
45:11 - the reason I've done it like this is so
45:13 - that I can actually give it some neat
45:15 - formatting so this first one's going to
45:18 - say experience a
45:20 - beginner
45:22 - exercise uh and then we're going to have
45:24 - the span with a class of text and
45:27 - 400 and a font of
45:29 - medium with the word master and then we
45:32 - can just have
45:33 - class for the second one we are going to
45:36 - have uh lay the foundations
45:42 - for uh and then same again span class
45:46 - text Indigo 400
45:50 - font
45:52 - medium uh routine and after that we're
45:55 - going to have have a break and then and
45:58 - consistency and then finally for the
46:00 - last one we're going to say workouts
46:02 - specific to your uh then span class text
46:07 - Indigo 400 font medium and then that can
46:13 - just say environment and uh then we're
46:17 - going to have a secondary span so we can
46:18 - just copy that first one environment and
46:24 - expertise and that's just going to check
46:26 - the index and render out the appropriate
46:28 - one as the slot
46:30 - component so there we can see it
46:32 - actually showing up it looks pretty
46:34 - decent obviously we're missing the
46:36 - images uh but that will happen in a
46:39 - second but on the whole that looks
46:41 - pretty good I might actually just get
46:42 - rid of this little break right here I
46:44 - don't think that we need
46:46 - it uh but we should include the
46:50 - space so that's looking pretty nifty for
46:53 - the images we're going to come over to
46:54 - the static file and we're going to
46:56 - create a new folder called
46:59 - assets uh and I'm going to go ahead and
47:02 - copy the images straight in and once
47:05 - again you can find these images in the
47:07 - GitHub which is linked in the
47:09 - description down below so I'm just going
47:10 - to copy them across we have the three
47:12 - images and so now in our little list for
47:15 - the first one we can just say assets SL
47:20 - uh let's say selection.png
47:23 - the second one will
47:27 - be assets SL
47:31 - uh
47:33 - training.png and the last one can be
47:35 - assets.
47:36 - gooal assets do/
47:41 - go.png now we're not actually rendering
47:44 - out the image and the product card yet
47:45 - so we have to come back to the product
47:47 - card component and after this each just
47:50 - here we're going to create a div that
47:51 - has a class of flex item Center and a
47:55 - and that should actually be fine uh and
47:57 - in here we're just going to have a
47:59 - button that has a class of uh special
48:02 - button
48:03 - dark we're going to give it an mL of
48:07 - Auto actually I li I think that's meant
48:09 - to be an MR of Auto so margin rate of
48:12 - Auto a font of semi bold and inside of
48:16 - this button we're going to have a
48:17 - paragraph that just says try free today
48:21 - and then we have the Ampersand right
48:23 - arrow so we can see that button show up
48:25 - for each of them uh we're also just
48:28 - going
48:30 - to come up to this div right here this
48:33 - top one or the second top one I guess
48:35 - and we're just going to select that
48:39 - class and make it Dynamic so we're going
48:41 - to say plus
48:43 - index remainder 2 is equal to 1 so that
48:48 - means that it's an odd value if it's odd
48:50 - we're just going to set the order to
48:52 - two uh and that should set it to the
48:55 - other side when we add in the image
48:58 - div so on so the second to bottom div
49:01 - we're going to come on here and we're
49:02 - going to create a new div this one's uh
49:04 - pretty nifty cuz it's going to create an
49:07 - application looking feel so this one's
49:10 - going to have a flex Flex Co drop
49:16 - shadow overflow of
49:19 - headen a rounded bottom of large and a
49:24 - medium uh actually this is the this is
49:27 - the one right here so this is just going
49:29 - to wrap this one in parenthesis and just
49:31 - uh add this check down here so we're
49:35 - going to copy that check just out of the
49:37 - top
49:38 - one uh and instead paste it into this
49:41 - div just here and we're actually going
49:43 - to say if the order is equal
49:47 - to yeah if it's odd then the order is
49:49 - one that's absolutely fine so now we can
49:52 - go ahead and create that div we're also
49:54 - just going to have to create this drop
49:56 - shadow uh class so we're going to come
49:58 - back into our app.css and use the period
50:02 - and then the class selector and then in
50:04 - here we're just going to have a filter
50:06 - it's going to have a drop shadow and
50:09 - it's going to be minus 10.89 23 pixels
50:12 - uh then a
50:13 - 14.52 3 pixels and then a
50:18 - 35.0
50:20 - 973 pixels and then an rgba of 29
50:25 - 140 comma
50:27 - 242 and then a 0.2 so with that done we
50:30 - can come back into our product card here
50:33 - we have uh this div right here inside of
50:36 - it we're going to create a div which is
50:38 - going to like pretend to be the the
50:40 - action bar at the top and that's just
50:42 - going to have a class of rounded top
50:45 - extra large a height of eight until we
50:48 - get on a small screen we're going to
50:49 - have a height of 10 a background of
50:52 - white an opacity of of 60 a padding X of
50:58 - three and then we're going to say Flex
50:59 - items Center and a gap of two and in
51:03 - here we're once again going to use the
51:04 - each we're going to create an array that
51:06 - just has three indexes and we can just
51:09 - call this I and in here we're going to
51:12 - have a div that has a class of rounded
51:14 - full it's just going to be a circle so
51:16 - we're going to say aspect square a width
51:19 - of 2.5 until we get to small screen then
51:21 - it's going to be a width of three and
51:23 - it's going to have a background of
51:24 - indigo uh 300 this can just be a
51:27 - self-closing div if we look that creates
51:30 - this little bar up here that just looks
51:32 - pretty nifty and then underneath this
51:34 - div we can have a secondary div that has
51:36 - a class of flex Flex call a background
51:39 - of white a gap of four and a flex of one
51:43 - and this can have an image that has a
51:45 - source of uh a dynamic source so we use
51:49 - the curly braces this is going to be
51:51 - product feature. image
51:53 - URL uh I can and it can have an ALT
51:56 - equal to uh product image just like that
52:01 - uh and we can go ahead and close that
52:03 - image and so now the image shows up in
52:06 - our application next to each one looks
52:09 - like the order is not swapping so
52:11 - something is being a little bit
52:12 - mischievous with the order and so
52:14 - perhaps what we uh just quickly try
52:17 - doing is uh it's cuz I've got the two
52:20 - pluses I think is the problem um and I'm
52:22 - actually just going to try try pasting
52:25 - it back up on our
52:28 - original div just up
52:31 - here and instead set the order to
52:35 - two uh and that looks like it's worked
52:37 - for us so now we can just see we have
52:38 - like an
52:40 - alternating uh product description so
52:42 - here we have the first one uh then it
52:45 - swaps over to the other way around and
52:47 - then finally it swaps back on top of
52:50 - this uh div that has the information I
52:52 - might just add a padding top of
52:55 - uh eight and then on a small we'll just
52:57 - add a padding top of 10 and what that's
53:01 - going to do is just push it down so it
53:02 - looks like the uh this just sits
53:05 - slightly higher than the
53:07 - rest which is pretty cool and obviously
53:09 - if we come down to uh this screen size
53:13 - it looks pretty good the one thing I'm
53:15 - just going to do is make this a medium
53:18 - screen and above only effect because we
53:21 - don't really want swapping on a mobile
53:22 - layout but otherwise that looks uh super
53:25 - cool that looks very
53:27 - clean so we can kind of just scroll
53:30 - through all of them uh which is really
53:32 - nice and we've got all the
53:35 - images so with that done it's time to
53:38 - move on to the next section uh and that
53:41 - is going to be the reviews section so as
53:44 - always we're going to have our section
53:46 - wrapper open that up and in here we're
53:49 - going to have a div of class Flex Flex
53:51 - call Gap of 10 small gap of 14 medium
53:55 - gap of
53:57 - 24 a padding y of 20 a flex one item
54:02 - Center and a justify Center inside of
54:05 - here we're going to have another div
54:07 - that has a class of flex Flex call and a
54:11 - gap of
54:12 - two uh and up the top we can have our
54:15 - paragraph similar to the last one this
54:17 - is going to have a class of opacity 60
54:20 - text base uh until the small screen then
54:23 - it's going to be text
54:26 - large and then on a medium screen we're
54:28 - going for a text extra large and a text
54:30 - Center and in here we can say
54:33 - Don't just take our word for it and then
54:38 - underneath that we can have uh the
54:41 - H3 this has a class of text 4 XL small
54:45 - text 5 extra large medium text 6 extra
54:48 - large a Max width of 1,000 pixels and MX
54:53 - of Auto a width of full and a font semi
54:56 - bold and a text Center and in here we
55:00 - can say see what uh then have the span
55:03 - the classic span with a class of text
55:06 - Indigo 400 and then we can just say
55:09 - others and then we can finish it off by
55:11 - saying have to
55:14 - say and I believe that should be exactly
55:17 - the same as what we did in uh this
55:19 - component just here it is indeed perfect
55:22 - so if we keep scrolling uh we see
55:24 - nothing thing in this because we have to
55:26 - bring in the component just in here
55:29 - reviews import that and you can really
55:32 - start to appreciate how tidy uh the main
55:35 - component is looking at the
55:38 - moment so here we have it don't just
55:40 - take out word for it see what others
55:41 - have to say now in this component the
55:44 - other thing I'm going to need in this
55:45 - reviews component is uh some actual
55:48 - reviews so I had Google bard generate a
55:51 - whole bunch of them and I'm just going
55:53 - to copy them in here I'm going to say
55:55 - reviews list is equal
55:59 - to uh and I would just go ahead and once
56:01 - again copy these straight
56:04 - from the GitHub so here's all the
56:07 - reviews they have uh name review and
56:11 - then some features the other thing we're
56:13 - just going to have to Define up the top
56:15 - at uh just up here is we're going to say
56:17 - let limb equal equal to True uh we'll
56:20 - see what that is for in a second but
56:22 - that's just a variable that we need to
56:23 - Define um or essentially some State I
56:26 - guess now coming back down inside of our
56:29 - uh list underneath the H3 and the div
56:31 - here we're going to create a new div
56:34 - this is going to have a class of flex
56:35 - Flex col until a medium screen then
56:38 - we're going to have a flex of row a gap
56:41 - of eight a width of fit and an MX of
56:44 - Auto and here we're going to have a div
56:46 - with a class of flex Flex coal we're
56:48 - going to match the gap of
56:50 - eight and we're going to have an
56:52 - each uh that just says each and then
56:55 - we're going to have a conditional
56:58 - statement so it's going to say check if
57:00 - limit is true if we are limiting then
57:03 - we're just going to say reviews list.
57:05 - slice between 0 and four so we're going
57:08 - to take the first four elements
57:11 - otherwise we're just going to take the
57:12 - whole list and we're just going to say
57:16 - uh as review
57:19 - item and inside of here we're just going
57:23 - to create a new new file it's going to
57:25 - be review card.
57:28 - spelt and the review card is going to
57:31 - have a little bit going on inside so
57:34 - we're going to have a script it's going
57:36 - to have uh
57:39 - export let and we're going to need to
57:42 - import the review item so we can just uh
57:45 - import export let the review item just
57:48 - here and this is going to have a div
57:50 - with a class of flex it's actually going
57:53 - to be dynamic so first we're just going
57:54 - to wrap it in the curly braces it's
57:57 - going to be Flex uh Flex Co a gap of two
58:01 - a wi full a Max width of 500 pixels
58:06 - custom amount so the um Square
58:09 - parentheses and then an MX of Auto and a
58:11 - position of relative now as for the part
58:15 - that we're going to add on which is the
58:16 - conditional ensuring that we have that
58:18 - little space at the end of our string
58:20 - this one's going to be slightly
58:21 - complicated so the first conditional is
58:23 - we're going to check if left
58:25 - exists uh so we're going to need to
58:27 - export
58:29 - let
58:31 - left and left just checks if it's on the
58:34 - left hand side of the two columns if
58:36 - that's true we're then going to check if
58:38 - the index remainder 2 is equal to one
58:42 - which means that it's
58:44 - odd and if that is true then we're going
58:46 - to add the class of headen until a
58:49 - medium screen then we're going to give
58:50 - it a display of flex an opacity of zero
58:54 - a pointer events none and a
58:57 - Max uh height of 40
59:01 - pixels so it's a custom amount so we use
59:03 - the square
59:05 - parentheses uh and finally an overflow
59:07 - of
59:09 - headen if not we're going to have uh an
59:12 - empty string just there and then if not
59:16 - to the bigger condition we're then going
59:18 - to check if the uh
59:21 - index remainder 2 equals to
59:25 - zero if it does we're going to give it
59:28 - the class of headen medium
59:32 - flex opacity Z pointer events none a Max
59:39 - height of 40 pixels uh and an overflow
59:43 - of hidden and we'll see what this does
59:45 - more in a second and then we're just
59:47 - going to have otherwise nothing uh so
59:49 - that's a pretty complicated little class
59:51 - we're also going to just need to import
59:53 - uh export
59:55 - let the index
59:58 - value uh but that's going to be the
59:59 - class just there inside of
60:03 - this div we can have a new div this has
60:07 - a class of flex and a position of
60:09 - relative that's pretty easy and then we
60:11 - have another div inside of here this one
60:13 - has a dynamic class as well so we use
60:15 - the curly parentheses this one's going
60:17 - to have a position of absolute rounded
60:20 - full a background of white an aspect of
60:25 - Square uh it's going to be hidden until
60:28 - we get to a medium display then it's
60:30 - going to be a grid we're going to place
60:32 - items center it's going to have a height
60:35 - of four and a top of
60:39 - zero uh and then what we're going to add
60:41 - is a plus and then we're just going to
60:43 - check if the index remainder 2 is equal
60:46 - to Zer and if it is we can give it a
60:49 - right positioning of zero uh a negative
60:53 - margin rate of 8 a translate X of half
60:57 - and otherwise we can give it a lift of
61:00 - zero a minus m l of 8 and a translate X
61:05 - half but this one needs to be a negative
61:07 - translate X half so it goes in the other
61:10 - direction inside of here we can uh go
61:14 - ahead and add another div this is just
61:17 - going to have a class of rounded full a
61:20 - background of slight 950 an aspect
61:25 - of square a BG slate 950 and a height of
61:29 - two and this is going to create a small
61:32 - circle in the middle basically after
61:34 - that div uh but within the flex relative
61:38 - div we're going to have a another div
61:41 - and this is going to have a class of
61:44 - flex and items of Center and a gap of
61:47 - two and this one is just going to have
61:50 - an icon with a class of fa solid fa user
61:54 - and then we can go ahead and close that
61:57 - icon and after that we're going to have
61:58 - an H3 this one has a class of text large
62:02 - a small
62:04 - text on the small breakpoint a text of
62:07 - extra large and the medium a text of two
62:09 - extra
62:11 - large inside of here we can just render
62:14 - out the review
62:18 - item do
62:21 - name uh which is one of the parameters
62:24 - and then after these two divs we can
62:26 - have a second div this has a class of
62:28 - height of 1.5 pixels a BG of slight 950
62:33 - a width of 1/4 a margin right of Auto a
62:37 - margin bottom of four and a margin top
62:39 - of two that one doesn't contain anything
62:41 - but after that we can have a class of
62:44 - another div with a class of flex item
62:47 - Center uh Flex wrap a gap of two a text
62:50 - extra small until we get to the small
62:53 - screen then it's going to be a text of
62:54 - small and a margin bottom of four and in
62:57 - here we're just going to use the each
62:58 - block to uh map over the review item do
63:04 - features is that what it's called review
63:06 - item. features let's just check yet is
63:08 - features
63:09 - perfect uh and we can just say keyword
63:13 - and inside of here we can have a div
63:14 - that has a class of padding one but a
63:17 - padding y of
63:19 - 0.5 a rounded medium we're going to give
63:22 - it a border border solid border Indigo
63:26 - 400 a background of indigo 50 and a text
63:30 - of indigo 400 and in here we can just
63:33 - have a paragraph that contains the
63:38 - keyword so if we save that nothing is
63:40 - still showing up we could actually go
63:43 - ahead and just uh import the review
63:47 - card uh and we can go ahead and paste or
63:51 - pass down the review item prop
63:55 - just like that and then that can be a
63:57 - self- closing tag if we just come back
63:59 - into the review card real quick we'll
64:02 - just finish that up underneath this one
64:05 - we just have a paragraph and this has
64:07 - the review
64:08 - item dot review which is going to be the
64:12 - actual review so that's this element
64:15 - done and now what we're going to do is
64:17 - inside of this thing here we're going to
64:22 - uh duplicate this so we've got two
64:25 - instances of them in the middle we're
64:27 - going to create a div that has a class
64:29 - of width Uh custom width of one pixel a
64:33 - background of
64:35 - slate 950 and a hidden until we get to a
64:38 - medium then it's going to have a display
64:40 - of
64:40 - flex uh and in this top one what we're
64:43 - going to do is we're just going to pass
64:45 - down left equals to true and we're also
64:49 - going to pass down the index into all of
64:52 - them so for both the these ones just
64:55 - here we're going to take the index and
64:58 - make sure that that gets passed down but
65:00 - only the first lot of review cards
65:02 - actually has the left equals
65:05 - true and that's going to create this
65:07 - effect so this uh one just here is the
65:10 - line in the
65:11 - middle uh the reason we do two lots is
65:14 - so that on a small screen we can have
65:17 - them one at a time and they both they
65:20 - all don't get
65:21 - displayed however on the big screen it
65:23 - just splits them into two
65:25 - columns uh we have the little benefits
65:28 - that they experience and then at the
65:31 - very bottom of this element we're going
65:33 - to have a button just here this is going
65:36 - to have an onclick event of uh it's
65:40 - going to set limb equal to not limb so
65:44 - it's just going to inverse that
65:45 - parameter and this is going to have a
65:47 - class equal
65:49 - to special button and inside of this
65:53 - button we're going to have a
65:56 - paragraph tag so there's our paragraph
65:59 - it's going to have an a conditional so
66:02 - we're going to check if limb is true if
66:04 - it is we're going to say show more
66:06 - otherwise we're going to show
66:10 - less just like that and so now at the
66:13 - bottom we get this little button that if
66:15 - we click show more it just shows more
66:17 - reviews and if we hit show it just
66:19 - removes
66:21 - them so that looks pretty nifty finally
66:24 - after the button we're going to have
66:26 - another
66:27 - div this is going to have a class of
66:30 - flex Flex Co and a gap of 10 uh at the
66:34 - top we're going to have a paragraph that
66:35 - has a class of MX auto text large small
66:39 - text extra large medium text 2 XL and a
66:43 - font of semi bold and in here we're just
66:46 - going to say trusted by
66:49 - 1349
66:53 - swales and then underneath this we're
66:55 - going back to the header and we're just
66:57 - going to copy this uh well actually why
67:00 - don't we just create a component for it
67:02 - at this point stars
67:05 - doel where stars. is just going to have
67:09 - the uh review component that has all of
67:12 - the cool stuff so we can just go ahead
67:14 - and copy that
67:17 - into uh stars. that actually shouldn't
67:20 - be a component so I'm just going to
67:22 - delete that sorry it shouldn't be a
67:24 - folder it should be a file Stars dosf
67:27 - we're going to paste that in there and
67:29 - then we can render
67:31 - that inside of our hero section as well
67:35 - as at the bottom of our reviews just
67:37 - underneath the paragraph right
67:40 - here stars make sure that's imported up
67:43 - the top and now we have trusted by the
67:45 - swallers and the number of reviews down
67:47 - the bottom looking good uh now with that
67:50 - section done we move on to the next one
67:53 - the next one is frequently asked
67:55 - questions this one's pretty
67:58 - straightforward uh as always the first
68:00 - thing we do is come into our page. spelt
68:02 - and just render it out fa aqs and then
68:05 - what we can do is come into reviews for
68:07 - example and just
68:09 - copy uh this first stuff right here so
68:13 - just everything until the H3 pretty much
68:16 - and we can come into FAQs and just paste
68:19 - that in ensuring that we import the
68:21 - section wrapper and then we can just go
68:24 - ahead and close
68:28 - everything uh so just so that's going to
68:32 - import that and then we can just change
68:34 - the text so the text here is going to
68:36 - say for all your questions
68:40 - qualms and queries and then the big text
68:44 - is just going to replace all of this and
68:47 - it's just going to say frequently asked
68:50 - questions and then under the uh div
68:54 - right here we're just going to create
68:55 - another div this has a class of flex
68:57 - Flex
68:59 - call a gap of eight until we get to a
69:02 - small than a gap of 10 a medium a gap of
69:04 - 14 and a width of full and in here we're
69:07 - going to have another each block uh and
69:10 - this is just going
69:12 - to take the fax as an individual
69:16 - FAQ we're actually going to need the
69:20 - FAQs up here that's just going to be a
69:22 - list
69:24 - uh I'm going to go ahead and once again
69:25 - copy in the frequently asked questions
69:28 - these are just randomly generated by
69:31 - Google b as well you can copy them from
69:36 - the GitHub but it's just a question and
69:38 - an answer basically and inside of here
69:41 - what we can do is have a div this has a
69:42 - class of flex a flex call a gap of two
69:46 - text left uh a Max width of 800 pixels
69:51 - custom amount a width of full an AMX of
69:54 - Auto in a position of
69:57 - relative just underneath this div we're
69:59 - going to have another one this has a
70:01 - class of absolute a top of zero a lift
70:04 - of zero a width of a third a height of
70:09 - one pixel a background of slate 950 and
70:12 - a
70:13 - minus translate X of 4 we're going to
70:18 - duplicate this element except this one
70:20 - is going to uh have a height of 2/3 so
70:25 - we can go ahead and swap the width for a
70:27 - height change the one to a two and then
70:29 - just have a width of uh 1 pixel and a
70:33 - minus Translate Y four that's just going
70:37 - to create a neat little effect
70:39 - underneath this div we can have an
70:43 - H4 this can have a class of text large
70:46 - until small than a text extra large
70:48 - medium text 2 XL and a padding top of
70:52 - two and in here we can just take the
70:56 - FAQ do question and then under that we
71:00 - can uh have the a paragraph that has a
71:03 - class of padding left of two and this
71:06 - can just have FAQ doans the answer is
71:09 - actually just a ANS so that's going to
71:12 - change that uh and it looks like I'm
71:15 - missing a padding so inside of here
71:17 - we're just going to have a padding of
71:21 - four
71:22 - uh and a padding X of
71:27 - six and that's just going
71:29 - to give us this uh frequently asked
71:32 - questions display with this neat little
71:34 - Top Hand border effect and once again if
71:36 - we come onto a mobile device that's
71:39 - still pretty look that's still looking
71:41 - pretty nifty just down on the side so
71:44 - with that element done we don't have far
71:46 - to go the next one is going to be our
71:49 - conversion now this one's just going to
71:51 - have a custom section so it's going to
71:52 - have a class of padding y 14 until we
71:56 - get to a medium then it's going to have
71:57 - a padding y of 20 a flex Flex column a
72:00 - gap of 8 uh a background of hash 18 1
72:08 - b34 uh close that square parenthesis cuz
72:11 - that's the custom amount a text of white
72:14 - text Center item Center and justify
72:17 - Center lots of centers and here we can
72:20 - have an H4 this is going to have a class
72:22 - of text extra large small text 2XL
72:26 - medium text 3XL and a font of Poppins
72:31 - this is going to say reach your Fitness
72:34 - then we'll have a span with a class
72:36 - of uh Poppins and font bold uh and this
72:41 - can just say goals and
72:44 - aspirations underneath that H4 we can
72:46 - have a secondary paragraph This also has
72:49 - a class of Poppins a text base until a
72:52 - small than a text uh large and a medium
72:56 - text extra large and this is just going
72:59 - to have a special
73:02 - star Unicode uh that you can get in the
73:05 - GitHub and then we're just going to say
73:08 - unlimited time on free plan and then
73:12 - we're just going to have another one of
73:13 - those
73:15 - Stars finally under there we're going to
73:17 - have the call to action so we'll just
73:18 - import that up the
73:21 - top uh and we're going to pass in a dark
73:23 - equals true parameter which if we come
73:27 - into our call to actions we have to
73:30 - export let dark we uh prepared to have
73:34 - this
73:35 - earlier and what we're going to do is
73:38 - we're just going to add a custom styling
73:41 - to this top button right here so we can
73:43 - just wrap special
73:45 - button in the curly parentheses and then
73:48 - add on a dark check if that's true if it
73:52 - is we have a background
73:54 - of #
73:56 - 18 1
73:59 - b34 and otherwise we don't change
74:03 - anything so that's going to be the
74:07 - conversion now we just have to add that
74:09 - in here so we can add in conversion uh
74:12 - and obviously we have to save this
74:14 - component and that's just going to bring
74:16 - up this little conversion element right
74:18 - here where we've got our call to
74:20 - actions and then finally underneath
74:23 - that we can have our footer component
74:26 - this one's relatively straightforward
74:28 - and is going to get rendered out inside
74:29 - of the uh layout do felt which it
74:31 - already is and this one's just going to
74:34 - have a footer that's going to have a
74:36 - class of padding y 16 small padding y of
74:40 - 20 medium padding y of 24 a px of four
74:45 - until we get to a medium then we're
74:46 - going to have a px of 8 in here we'll
74:49 - have a div that has a class of Max with
74:52 - 1200 pixels custom amount Square braces
74:55 - you know the deal an MX of order a width
74:58 - of full display of grid grid
75:02 - calls one until we hit a small screen
75:06 - then we're going to go grid calls 2 on a
75:09 - medium we'll go grid calls
75:12 - 5 we'll have a gap of eight and a text
75:16 - size of
75:18 - base and here we're going to have
75:19 - another division this will have a class
75:21 - of flex Flex col
75:23 - a gap of four and on a medium screen
75:25 - we'll say col span 2 uh this is going to
75:29 - have an H1 with a class of font semi
75:33 - bold this is going to be the name once
75:35 - again so we can just go ahead and copy
75:38 - that from the header uh swally moolly
75:41 - just like we have
75:42 - here paste that bad boy in there and
75:45 - then underneath the that we're going to
75:48 - have a copyright symbol
75:51 - 2023 uh and then we're just going to say
75:54 - swally Molly as if it's the business
75:56 - name
75:58 - LTD uh All Rights Reserved now after
76:04 - that division we're going to have
76:05 - another one that's going to have a div
76:06 - of class Flex Flex call a gap of
76:10 - four uh up the top here we're going to
76:12 - have a paragraph with a class of font
76:15 - bold Poppins text base until a small
76:19 - then it's going to be a text large this
76:21 - one's going to say support
76:24 - and then underneath that we're going to
76:25 - have an anchor tag that has an
76:28 - hre uh a target of underscore blank uh
76:32 - and it's going to have a class of cursor
76:35 - pointer hover text Indigo 400 in a
76:39 - duration of 200 and in here we're just
76:42 - going to say contact
76:45 - us pretty straightforward and that's
76:48 - just going to have a link to whatever
76:49 - contact us section is appropriate for
76:51 - you uh with that one done we're just
76:54 - going to copy this entire div after that
76:57 - we're going to have another one this
76:58 - one's going to say
77:00 - research
77:02 - uh and then we'll just say read the
77:06 - science behind the training or whatever
77:08 - it is uh we'll have another
77:11 - one underneath that that's going to say
77:14 - follow us oh there's a spelling mistake
77:16 - just there research this one's going to
77:19 - say follow us uh and in here we say
77:25 - Instagram uh and just above that we
77:27 - could add in an icon this is going to
77:29 - have a class of fa Brands if a
77:34 - instagr and a padding right of two we
77:37 - can go ahead and close that that should
77:39 - bring up the Instagram link you just
77:41 - want to add in the Instagram link right
77:42 - there and then we can just duplicate
77:44 - this anchor tag a couple of times so you
77:46 - could have a
77:48 - YouTube uh you just want to swap out the
77:51 - brand icon we could have a
77:56 - Facebook uh and once again swap out the
77:58 - Facebook uh and lastly you could do a
78:06 - Twitter and now if we save that we uh
78:08 - get this neat little footer down the
78:11 - bottom which looks pretty cash money if
78:12 - I do say so myself it's got all our
78:14 - links uh read the science and it looks
78:17 - like I've spelled Indigo wrong on pretty
78:20 - much every single one of them uh because
78:23 - ideally if we hovered over it we would
78:25 - want it to change color to the
78:30 - Indigo so now if we hover over it we can
78:33 - see that it does in fact turn Indigo and
78:35 - if we jump down to the mobile device
78:39 - screen
78:41 - uh it works perfectly well too and looks
78:44 - nice and neat so that's cash money so
78:46 - we're almost there now there's just a
78:48 - few more things we have to change the
78:50 - first thing is uh in our section
78:52 - wrappers for a lot of them we haven't
78:54 - yet added
78:56 - the uh ID like we were supposed to so up
79:00 - here we have an IDE of project and
79:04 - reviews uh let's actually just go
79:08 - to the header so where we have our nav
79:10 - links reviews is going to take us to
79:13 - reviews and FAQs is going to take us to
79:15 - FAQs so on each of them we're just going
79:17 - to come up to the section wrapper and
79:19 - add in the
79:21 - ID equal to
79:25 - reviews uh copy that whole thing
79:28 - likewise in the faq's we can add that to
79:32 - the section wrapper
79:35 - faq's and what we would expect to do is
79:37 - when we hit reviews it slowly Scrolls us
79:40 - down to the
79:42 - reviews uh the product one is not
79:46 - working header product let's just check
79:50 - product project that's my issue
79:53 - so that Scrolls us down to the product
79:55 - which is pretty nifty our FAQs takes us
79:58 - down to the FAQs the next thing we just
80:01 - want to work on is the uh menu currently
80:03 - that does absolutely nothing which is
80:06 - not so hot flash uh but actually first
80:09 - we're going to come into the layout real
80:10 - quick and just do some pretty clever
80:12 - stuff in here so the first thing we're
80:15 - going to do is underneath the photo
80:17 - we're going to have a
80:18 - spelt uh tag that checks for the window
80:22 - and it's going to bind scroll
80:26 - y equal to a variable called Y and it's
80:29 - also going to bind outer height now we
80:33 - have to make sure that we uh self close
80:35 - this component just here and up inside
80:37 - of the script we can go and initialize y
80:41 - uh we can by default create a reactive
80:44 - statement that sets letter outer height
80:46 - equal to Zer and what we're going to do
80:49 - from within here is create a function
80:52 - that's just just uh
80:55 - reroute uh taking an href and we'll see
80:58 - what that does in a
81:00 - minute uh the other thing we're going to
81:02 - do is create a store now stor is for
81:05 - Global state it works absolutely
81:08 - brilliantly inside of our spel kit we're
81:11 - just going to create a new folder it's
81:12 - going to be store in here we're going to
81:14 - create a file called
81:18 - index.js and the way that you create a
81:20 - global store in spell kid is we're going
81:22 - to to import writable from the uh spelt
81:27 - store we're going to lowercase writable
81:29 - and then we're just going to say export
81:32 - const open
81:34 - model is equal to writable and we're
81:37 - going to initialize it as false so this
81:39 - is essentially our Global State
81:42 - literally so easy inside of our script
81:46 - we're going to import open model from
81:51 - do/
81:53 - dot dot SL store just like so and now
81:57 - what we can do is uh just above the slot
82:01 - right here we can have a variable that
82:03 - says F uh and we check the reactive
82:06 - value of the store store state by using
82:10 - the dollar sign and then we just have
82:13 - open
82:14 - model we can close that and this is
82:17 - going to be our menu page that's just
82:19 - going to lay over our entire page should
82:22 - we need need it inside of here we're
82:24 - going to have a div that has a class of
82:26 - fixed a top of zero a left of zero a
82:30 - width screen height screen a border
82:34 - bottom a background of white a zed of 50
82:39 - Flex a flex column a gap of
82:43 - eight a padding of five but a padding X
82:46 - of
82:48 - eight inside of that we're going to have
82:50 - a div that has a class of flex item
82:52 - Center
82:54 - justify
82:55 - uh between and that's going to have a
82:59 - gap of four a border
83:02 - bottom uh and a padding bottom of
83:05 - two this is going to have our classic um
83:09 - header logo so we're just going to copy
83:11 - that H1 and come back into the plus
83:14 - layout. P paste that in there and then
83:18 - we're going to have a button that has a
83:21 - class of
83:25 - outline none border none and in here
83:28 - we're just going to use the close icon
83:30 - so that's going to be an icon with a
83:31 - class of f a solid F ax Mark and a text
83:35 - too extra
83:37 - large uh
83:40 - So currently nothing happens because our
83:43 - model doesn't open if we come into the
83:46 - header element just
83:48 - here uh we can create a function that
83:52 - opens our model so we can
83:54 - import our open
83:57 - model from
84:00 - do/ store and now on this button right
84:04 - here we can say on click uh we can just
84:08 - create a function it gets the reactive
84:10 - value of the open model and it just sets
84:13 - it equal to
84:15 - true so what we would expect to see is
84:17 - when we click that it it basically opens
84:20 - our model uh looks like the close isn't
84:24 - currently working let's go and
84:25 - investigate that uh open
84:28 - modal and that's cuz we haven't assigned
84:31 - it so on the X Mark we just want to do
84:32 - the opposite on click it's going to set
84:37 - the reactive value of the open model
84:39 - equal to false so now we have a working
84:44 - menu system which is uh super convenient
84:46 - the other thing we want to do is just uh
84:49 - on a medium or large lar screen we want
84:53 - to set hidden on this element
84:56 - because uh if we have it open for
84:58 - example we want it to then close on the
85:01 - bigger screen so after the button and
85:04 - the div we're going to create a new div
85:06 - that has a class of flex a flex Co and a
85:09 - gap of four and here we're going to have
85:12 - a button with a class of Border nonone
85:15 - outline none a padding of
85:18 - two uh it's going to have a group a
85:21 - duration of 200 a cursor of pointer and
85:25 - a text of
85:27 - left uh this one is going to contain a
85:30 - paragraph that just
85:32 - says product and this one's going to
85:34 - have a class of duration 200 and when
85:38 - the group gets hovered we're going to
85:40 - give it a padding lift of
85:43 - two uh what we're going to do in here is
85:45 - add an on sign I mean sorry an on click
85:48 - and that's just going to be the uh
85:52 - what's the function we defined up here
85:54 - reroute it's going to pass in the
85:58 - href and we can just pass in the hre
86:01 - being
86:02 - product uh and now we can go ahead and
86:04 - duplicate this button maybe three times
86:07 - so the second one is
86:10 - reviews uh reviews and lastly we can
86:14 - have FAQs and
86:17 - FAQs underneath that we're just going to
86:20 - render out the call to action
86:22 - so just make sure that that's imported
86:24 - up the top and now we can kind of see
86:26 - this uh showing up just here the other
86:29 - thing we want to do is increase some of
86:31 - these font sizes and just give uh this
86:34 - element here a flex of one that should
86:38 - push these to the bottom and we're also
86:40 - going to wrap the call two actions
86:42 - inside of a div that has a class of flex
86:45 - Flex
86:46 - call uh items Center justify Center just
86:51 - so so that these elements are always
86:54 - centered here you can kind of just see
86:55 - that
86:57 - there well you can't on a medium screen
86:59 - but yeah they're just centered in the
87:00 - middle and then in each of these uh
87:03 - elements right here we can go ahead and
87:06 - give it a class of Poppins text 3XL and
87:12 - a font semi Bold and the other thing I'm
87:15 - actually going to do is come in here and
87:17 - just have an icon that has a class of if
87:21 - a solid if a shevron dasr and a text XL
87:27 - and a padding left of
87:29 - four uh and that can just be a self
87:31 - closing icon and so now we get a little
87:35 - menu uh that looks pretty
87:38 - decent open it up and if we uh close it
87:42 - it doesn't currently do anything and
87:44 - that's cuz this function doesn't do
87:45 - anything uh and in the function we're
87:48 - simply going to set the open model value
87:50 - to false and we're going to say
87:54 - window.location.href
87:56 - is equal to the hre that we
87:59 - receive uh so now if I click it it
88:02 - Scrolls us down to the appropriate
88:05 - section now the last thing we need to do
88:07 - is obviously this menu goes away when we
88:10 - scroll uh it looks nice on the first
88:13 - page however we've got a sneaky solution
88:15 - that looks even cooler for the rest of
88:19 - our application underneath this open
88:21 - motor right here we're going to have one
88:23 - more if block uh this is just going to
88:26 - say
88:27 - if Y is greater than outer height so
88:31 - outer height is a variable that we
88:33 - defined
88:34 - earlier uh just
88:36 - here and essentially how outer height is
88:39 - going to work is that's just going to
88:40 - say if we've scrolled more than the
88:41 - original page height so if we've left
88:44 - the header section behind then we're
88:46 - going to have a div that has a class of
88:48 - background white fixed top of zero left
88:53 - of zero a width of full Flex Flex coal a
88:57 - zed of 20 a padding X of four and we're
89:00 - going to give it a class called fade
89:02 - in and in here we're going to Rend out
89:05 - the header element now we quickly just
89:07 - have to create the class fade
89:11 - in it's uh pretty straightforward we
89:13 - just say fade in and this is going to
89:16 - have an animation uh called fade in it's
89:20 - going to be 300 milliseconds we'll give
89:22 - it an ease in and we'll say forwards so
89:25 - that it sticks around and in here we can
89:27 - just create a key frames event called
89:30 - fade in and that's just going to say
89:33 - from uh and here we're going to give it
89:35 - an opacity zero and we're going to say
89:37 - two and that's going to have an opacity
89:38 - of one and so now as we scroll down our
89:41 - page our thing goes away until we should
89:46 - be
89:48 - hitting the uh page I obviously haven't
89:51 - saved this
89:53 - there you go you see it show up so no
89:54 - header and then as we scroll it shows up
89:57 - and we always have our menu there to
89:59 - take us wherever we need to go we've got
90:02 - our fa FAQs we've got our contact
90:04 - Section down the
90:07 - bottom honestly it looks super Nifty
90:10 - super neat great for conversion we can
90:13 - see all the reviews we can show more
90:15 - looks really nice and tidy in the middle
90:17 - of our page and as we go on a bigger
90:19 - screen we can see that uh we split the
90:22 - reviews into two sides our nav links
90:24 - work up the top that's absolutely
90:26 - perfect that routes us back to the
90:30 - homepage and you should be able to make
90:33 - absolute bank with this layout and just
90:36 - like that we have our absolutely filthy
90:40 - web application and with that done it is
90:42 - finally dep time to deploy our
90:46 - application for that we're going to come
90:48 - over to netlify now you will need to log
90:51 - in and or create an account if you don't
90:53 - already have one now the other thing
90:55 - you'll just want to do is make sure that
90:56 - this code is uploaded to your GitHub to
90:59 - deploy it because we're going to deploy
91:00 - it through GitHub and we can do that by
91:03 - hitting add new site and we're going to
91:05 - import an existing project now you're
91:08 - going to want to hit deploy with GitHub
91:11 - that will open up a GitHub authorization
91:14 - window and then you'll be able to search
91:16 - through your repositories right here if
91:19 - you don't yet have one you can go ahead
91:21 - and configure the uh nfy app on GitHub
91:25 - and that will allow you to add that
91:26 - repository to have it deployed now that
91:29 - I have configured it so that it is
91:30 - visible I can go ahead and search for
91:32 - the gym landing page it should
91:35 - automatically detect what type of
91:36 - project it is and we can go ahead and
91:39 - hit deploy that's going to do its best
91:43 - attempt at deploying our project we can
91:45 - see that the deploy is in progress while
91:47 - that's deploying we can just come into
91:49 - the domain management right here and we
91:51 - can go ahead and edit the site name and
91:54 - this can be swy
91:58 - moly uh we could probably just make it
92:00 - one word and we can hit save on that and
92:03 - that's just going to mean that the URL
92:05 - we can share with everyone is swy molly.
92:08 - nafi. apppp if we come back we can see
92:10 - that it is fully deployed so I should be
92:12 - able to paste that in up here and just
92:15 - like that we can see that our uh project
92:18 - is
92:19 - undeniably live it looks absolutely
92:21 - brilliant
92:22 - and it's going to convert all the
92:24 - features and functionalities work
92:27 - perfectly and congratulations you now
92:29 - have an awesome learning page that you
92:31 - can use for absolutely anything and add
92:33 - to your portfolio and with that my
92:35 - friends that is the whole tutorial thank
92:37 - you guys so much for watching if you've
92:39 - enjoyed the video smash the like And
92:41 - subscribe buttons I appreciate that
92:43 - support and finally go make some changes
92:45 - to it customize it personalize it add
92:48 - your own flare change the product that's
92:50 - being advertised and share it in the
92:52 - Discord I would love to see what you
92:53 - guys come up with thank you so much for
92:55 - watching and I'll catch you guys in the
92:56 - next one peace learning to code if so be
92:59 - sure to check out the small James web
93:01 - development road map link is in the
93:03 - description down below or dive straight
93:05 - in with these
93:10 - videos