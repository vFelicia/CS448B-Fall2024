00:00 - hey guys and welcome to react beach
00:02 - resort project where we'll display hotel
00:04 - rooms and set up functionality so the
00:06 - user can filter them as well
00:08 - during this project we'll use react
00:10 - router for our routing react context api
00:13 - for our state management content full
00:16 - headless cms for our data management and
00:18 - netlify to host our application so
00:22 - what in the world we will build well
00:24 - first and foremost i do want to let you
00:26 - know that project will be responsive and
00:29 - since i don't want to jump back and
00:31 - forth for every section that i'm showing
00:32 - you i might as well tell you that right
00:34 - away and for the navbar on a smaller
00:37 - screen size we're going to have a toggle
00:39 - button so this is how the nav bar will
00:41 - be displayed in smaller screen size but
00:43 - then once we go to the bigger one we
00:46 - will gonna have our traditional navbar
00:48 - right after the navbar on the home page
00:50 - there will going to be a hero component
00:53 - that we're gonna have a background image
00:55 - and in the middle of the hero component
00:58 - we're going to have a banner that has a
01:00 - link to route to our rooms page since
01:03 - we're not done with the homepage we will
01:05 - then head over back and then we're going
01:07 - to have services where we're going to
01:09 - use react icons to display the services
01:12 - that the hotel provides after that we're
01:14 - going to have future rooms so imagine
01:16 - you're going to have data for all the
01:18 - rooms in the hotel but some rooms hotel
01:21 - would want a display as featured so
01:23 - these were going to be a featured rooms
01:26 - now in both pages whether that will
01:27 - going to be featured rooms or all rooms
01:30 - together
01:31 - we will going to use the room component
01:32 - to display that one specific room and as
01:35 - you notice in the room component there
01:37 - will be price for the room as well as
01:39 - the name for the room and as i'm
01:41 - hovering over the card we're gonna have
01:43 - an option of clicking and then we're
01:45 - gonna navigate to a single room page
01:48 - where we're gonna have information just
01:50 - about that specific room page whether
01:53 - that will be let's say our family deluxe
01:55 - room or it will be single deluxe again
01:58 - i'm heading over there this will be a
02:00 - unique picture about that specific room
02:03 - as well as rest of the information that
02:06 - would tell us more about this specific
02:07 - room since we are using the react router
02:10 - i also want to let you know that if
02:12 - let's say we're going to be
02:14 - trying to navigate to a page that
02:15 - doesn't exist we are going to create a
02:17 - custom 404 page where it says okay so
02:20 - page not found and obviously we have
02:22 - either option of clicking return home or
02:25 - we can navigate through a navbar now
02:28 - once we're done with the homepage notice
02:30 - these are the sections we're creating
02:32 - now let's head over here to a rooms page
02:35 - where we're going to have all the rooms
02:37 - that currently hotel provides as well as
02:40 - since we have multiple rooms the user
02:43 - will also going to have an option of
02:44 - filtering them out so let's say i'm not
02:46 - interested in all the rooms i would just
02:48 - be interested in the family rooms this
02:51 - displays me all the family rooms that
02:54 - hotel provides and like i already
02:55 - previously said we still have an access
02:58 - to a single room page where we're
03:01 - navigating to that specific room then
03:03 - once we look at the family rooms this is
03:06 - what we're interested we also have an
03:08 - option of filtering even more let's say
03:10 - judging by the price and if i'm going to
03:12 - go below
03:13 - the price that i'm looking for notice it
03:16 - says unfortunately no rooms match your
03:18 - search parameters now what does that
03:20 - mean if we're gonna have no rooms to
03:22 - display that would match the search
03:24 - parameter this is gonna be our error
03:26 - message we can filter our rooms even
03:28 - more let's say i could look for family
03:31 - rooms that only providing the breakfast
03:33 - as well as the pets are allowed
03:36 - now in this case this particular room
03:38 - allows
03:39 - pets as well as provides free breakfast
03:41 - however i can check maybe for the rooms
03:43 - that only allow pets all right now this
03:46 - is just going to give me the rooms allow
03:48 - pets but if i would want breakfast then
03:51 - obviously i'm going to be heading over
03:52 - back to that one room within the family
03:55 - room tab then i can also say you know
03:57 - what i would be interested in let's say
04:00 - staying four people so let's see which
04:02 - rooms allow to have four people and then
04:05 - this one obviously doesn't allow four
04:07 - people that's the reason why it's not
04:09 - showing you now hopefully this gives you
04:11 - an idea what we're going to be building
04:13 - and why don't we talk about where we're
04:15 - going to store our data now first and
04:17 - foremost
04:18 - initially we were going to have all
04:20 - local data that i'm going to provide so
04:22 - even if you don't want to work with
04:23 - contentful or netfly which by the way
04:26 - we're going to use both of them free
04:27 - tier so you'll not have to pay anything
04:30 - but let's in say that you just don't
04:32 - want to work with content folder or
04:33 - netlify
04:34 - you'll be able to finish your whole
04:37 - project just with the local data that
04:39 - i'm going to provide in the setup files
04:41 - now later on once we're done with the
04:43 - project we were going to take a look at
04:45 - how we can set up the contentful which
04:47 - is a headless cms or also something
04:50 - called boyf which means bring your own
04:52 - front end and what's really cool about
04:55 - contentful that regardless of the
04:57 - application that you're building whether
04:59 - that would be with vanilla js whether
05:01 - with the gatsby project with our react
05:03 - project which would be our case we can
05:06 - set up our data and then using the cdn
05:08 - we're going to be able to consume our
05:10 - data what's really cool about connectful
05:13 - that once we're done with our
05:14 - application once we're going to set up
05:16 - all our data within the contentful
05:19 - it will be possible for us
05:21 - just to add changes within the control
05:24 - and we'll not have to store our project
05:26 - locally our machine just to change
05:28 - something delete data edit the data and
05:31 - so on and so forth last but not least
05:33 - like i said we're going to use free tier
05:35 - netify to host our amazing application
05:37 - so the whole world can see it as far as
05:40 - setup files go they will be located on
05:42 - my github account so you can search for
05:45 - setup files react beach resort or just
05:48 - follow the link that i will leave in
05:50 - description i also want to let you know
05:52 - that if you like project-based courses
05:55 - be sure to check out my udemy courses
05:57 - where we cover topics like react
05:59 - javascript gatsby and styled components
06:02 - just to name a few in the description of
06:05 - the video you'll find 10 dollar course
06:07 - coupons before we tackle the project i
06:10 - do want to mention two things
06:12 - first as far as styling is concerned we
06:14 - will use one main css file available in
06:18 - the setup files and since it is react
06:20 - project we will cover css very briefly
06:23 - only when i find it useful or for
06:26 - understanding our whole setup
06:28 - second while developing application only
06:31 - one react hook will be used use context
06:34 - hook and only because we will look at
06:36 - multiple options of consuming context
06:39 - api
06:40 - all right assuming that you installed
06:42 - these setup files i think we can kick it
06:44 - off and start working on our application
06:47 - and the first thing that i would like to
06:48 - do is bootstrap the react application
06:51 - using the create react app now i'm gonna
06:54 - go with npx route but obviously you can
06:56 - install this globally or assuming that
06:59 - you already have this globally you can
07:01 - just run create react app and then
07:04 - whatever the name of your project will
07:06 - be now i'm going to call my resort so
07:08 - what i'm going to do right now i'm going
07:10 - to navigate to desktop
07:11 - once in the desktop like i said i'm
07:13 - going to run npx
07:15 - then we're gonna go with create react
07:17 - app so
07:18 - now i would need to just come up with a
07:20 - name and i'm gonna go with resort
07:23 - while i'm right now bootstrapping the
07:26 - react application i would wanna show you
07:28 - what you're going to have within the
07:29 - setup files so here you're going to have
07:32 - three files as well as the images folder
07:35 - and this is going to be used for
07:36 - redirect so i'm going to show you what's
07:39 - happening in the next video then app.css
07:41 - will be the main css file for the whole
07:44 - application
07:45 - data will be the local data that we're
07:47 - going to be using while we're developing
07:49 - the application prior to when we are
07:52 - hooking up actually everything with the
07:54 - contentful so this is very important
07:56 - otherwise it's going to be very hard for
07:58 - you to code along and then last but not
08:00 - least we have the images again which we
08:03 - will use while we're developing this
08:05 - locally as well as later on once you're
08:07 - setting up the contentful this might be
08:10 - useful where basically as you're
08:12 - creating more and more items you can
08:14 - just grab here the images that we're all
08:16 - going to be using okay now also you'll
08:18 - notice there's a gif one for the loading
08:21 - so there's going to be a case where we
08:22 - would want to set up the component as
08:25 - let's say some kind of page part loads
08:28 - so this is we're all going to be using
08:29 - the gifs all right now once you have all
08:32 - this installed then obviously what's
08:34 - next is happening is that the
08:36 - application currently is being
08:38 - bootstrapped so we can see that we have
08:40 - a bunch of dependencies that are being
08:42 - installed with create react app and once
08:45 - that will be finished
08:47 - in fact before we run npm start and we
08:51 - actually start the development server i
08:54 - would want to install these two
08:56 - dependencies because we're going to use
08:58 - them right away so i didn't see the
08:59 - point of starting the dev server and
09:01 - then in fact stopping it install these
09:04 - two dependencies now one of them will be
09:06 - react icons and the second one will be
09:08 - react router dom which we'll use for our
09:11 - routing so in this case i would want to
09:14 - navigate to my resort folder so since
09:17 - the name is quite simple i can just say
09:19 - cd resort and then let's run npm install
09:23 - i'm gonna go with the react icons first
09:26 - and then once they will be installed now
09:28 - we're gonna go with react router down
09:31 - and then after that i would want to open
09:33 - up right away my text editor as always i
09:36 - have a few options i can do it directly
09:38 - here from the terminal where i can just
09:40 - type code dot or i can just go with drag
09:44 - and drop now this would be my first
09:46 - application or i'm sorry not application
09:48 - the dependency and then i'm going to go
09:50 - with npm
09:52 - install again or we can just write i
09:55 - react
09:56 - router
09:57 - dom
09:58 - and we can just go with dash dash save
10:01 - as well just in case okay now once we
10:04 - install both of these dependencies like
10:06 - i said i would want to open up my text
10:07 - editor
10:09 - and in this case this will be visual
10:10 - studio code
10:12 - we'll drag and drop and we're going to
10:14 - get our folder i can might as well
10:16 - minimize this we will not gonna need
10:18 - that
10:19 - and let's open side by side
10:22 - window so that way we can have two
10:24 - browser windows one is gonna be the
10:26 - small one
10:27 - where we're gonna see everything that
10:29 - we're doing as we're developing the
10:31 - application and the second one will
10:33 - going to be the bigger browser window
10:34 - where we let's say want to say how the
10:37 - grid works okay now in this case i will
10:39 - going to open up the terminal the
10:41 - integrated terminal in the visual studio
10:43 - code by the way if you don't know where
10:45 - it is this would be the new terminal and
10:47 - i am using the shortcut here of course
10:50 - and then why don't we run the dev server
10:52 - so npm
10:54 - start we all going to start the local
10:56 - dev server which will serve our project
11:00 - on localhost 3000. now like i said this
11:03 - would be the finished project that we're
11:05 - going to be striving to achieve and then
11:07 - i would want to set by side by side with
11:09 - localhost 3000 where this will be the
11:12 - project that we're currently working on
11:14 - okay now this will be the setup and
11:17 - assuming that you followed all the steps
11:19 - and everything was successful i think we
11:22 - can move on to our next phase of our
11:23 - application first things first i would
11:26 - want to do a bit of a spring cleaning
11:28 - because obviously this comes with a
11:30 - bunch of things that we don't want and
11:32 - we can start simply by app.css now you
11:35 - have two choices either you can import
11:37 - right away my file that you have in
11:40 - setup files meaning you can just replace
11:42 - it by drag and dropping or you can clean
11:45 - out here and just copy and paste the
11:47 - content of the setup file css file this
11:50 - is really up to you in my case i'm just
11:52 - going to delete this
11:54 - and we're going to create a new one
11:56 - later on when we're going to grab my app
11:58 - css from the setup files
12:01 - then i'm going to head over obviously to
12:02 - the app.js and for the time being we're
12:05 - just going to comment this out because
12:06 - otherwise our application obviously
12:09 - we're gonna break
12:10 - then we can head over maybe to index.js
12:13 - and i would want to comment out
12:15 - index.css
12:16 - because like i already said three times
12:18 - probably our main css file will be just
12:22 - one so we don't need the second one with
12:24 - the index css
12:25 - then we don't need the logo svg
12:28 - so we can just delete this sucker as
12:30 - well
12:31 - so let's say logo svg you go
12:34 - bye-bye
12:35 - then what we have well again we have app
12:38 - js breaking so why don't we do very
12:41 - simply by deleting everything that we
12:43 - have currently in the div
12:44 - and we can just have i don't know maybe
12:47 - a react fragment in this case
12:49 - and we can just say okay within the rack
12:51 - fragment we're going to place a hello
12:53 - from app just for the time being
12:56 - hello from app now let's save that and
12:59 - there should be no errors i'm apart from
13:02 - the fact that i'm trying to import the
13:04 - logo of course
13:05 - so i can delete that and yes everything
13:08 - is working correctly we do have our
13:10 - hello from map
13:11 - then uh we will gonna head over to the
13:14 - public one and within the index html i
13:17 - would just want to create a new title
13:19 - because at the moment i have react app
13:22 - and i'm going to call my one resort
13:26 - resort recording recording all right now
13:30 - let's say that this is going to show me
13:32 - two things where i have beach resort
13:33 - that will be my finished one and then i
13:36 - have a resort recording now
13:39 - as far as the setup files are concerned
13:41 - why don't we go over to the setup folder
13:43 - and we're gonna go one by one so here we
13:46 - have the redirects and like i said i
13:48 - will gonna talk about redirects in this
13:50 - video and in fact i'm gonna do that
13:53 - right now so what happens is since we're
13:55 - using the react router dom
13:58 - they don't play very nicely right out of
14:01 - the box with a netlify where we will
14:04 - going to be hosting our application
14:05 - eventually and what happens is that the
14:08 - fix is very simple
14:09 - you need to actually get this redirect
14:12 - file so if you want more information
14:15 - again you can head over to the google
14:16 - you just type react router down and
14:18 - pretty much this is going to be the
14:20 - first blog that comes up and like i said
14:23 - we just need to grab that file and that
14:25 - file needs to be in the public folder
14:28 - and that way whenever we're going to be
14:30 - redirected or any kind of routing that
14:33 - we're going to do in metal file will in
14:35 - fact work exactly the same like it would
14:37 - work locally with just a react rotor
14:40 - dump so i'm going to grab this redirects
14:42 - i would want to copy this guy and then
14:45 - we're gonna head over to the public and
14:47 - just copy and paste it right here like i
14:50 - said if you want more information if
14:52 - you're gonna head over to the blog
14:54 - you can just read what is actually
14:55 - happening and what would be the case
14:58 - scenario why we wouldn't want to use
14:59 - that and notice we have the redirects
15:02 - now that is obviously the file name and
15:04 - then we have our index html now
15:06 - technically this would come up only
15:08 - later once we deploy it on nutify but i
15:10 - think that we can just get it out of the
15:12 - way because maybe eventually i might
15:14 - forget
15:15 - now next one up we do have our app css
15:18 - like i said this is going to be our main
15:20 - css file so i will gonna right now copy
15:23 - this
15:23 - and we're gonna head over back to folder
15:26 - of the source
15:28 - and just copy and paste it somewhere in
15:30 - the source now it is important that you
15:33 - actually use the same structure as i am
15:36 - where the files are at because i do have
15:39 - already some paths here so let's say
15:41 - when i'm setting up the hero backgrounds
15:43 - or something like that i am already
15:46 - having some kind of paths so it's
15:48 - important if you change the path notice
15:50 - i'm actually looking for the images
15:51 - folder layer now and then if you're
15:54 - going to place this file somewhere else
15:56 - obviously it's not going to make sense
15:58 - so
15:59 - that's why i'm suggesting either you
16:01 - follow the folder structure exactly
16:04 - by the letter or if you are actually
16:07 - creating your own folder structure then
16:09 - obviously just keep in mind that
16:10 - whatever we're going to be having some
16:12 - kind of path you'll need to fix it all
16:15 - right now this will be my app css now i
16:17 - can head over back to app.js
16:19 - and in fact comment this out so now
16:22 - we're not going to break or we shouldn't
16:23 - break at least and the moment i do that
16:26 - i do have a beautiful error and the
16:29 - reason for that is like i was just
16:31 - talking about that i cannot find the
16:33 - path because i'm looking for the image
16:35 - and i cannot get the image now i will
16:37 - gonna return back to app.css we will
16:39 - talk about a little bit more
16:41 - but right now what i would want is get
16:43 - these images so i would want to get this
16:45 - images folder and again somewhere within
16:48 - the source so make sure that this is
16:50 - still within the source we're just going
16:52 - to copy and paste that and this is going
16:54 - to be our images folder then images are
16:56 - quite self-explanatory these are going
16:59 - to be the images that we're going to be
17:00 - using locally and later on you can use
17:02 - the same images if you're setting up the
17:05 - data on contentful
17:07 - and then why don't we also grab this
17:10 - data one
17:11 - and why don't we talk about the data and
17:13 - what's happening here now i'm gonna
17:15 - discuss this data file later on
17:19 - in more detail once it's going to make a
17:21 - little bit more sense but as you notice
17:23 - right now there's our bunch of imports
17:26 - here on top where again we are just
17:28 - getting the images so it is crucial that
17:31 - again your data is sitting within source
17:33 - because if you're placing it somewhere
17:35 - else this path will not going to make
17:37 - sense but like i said we're going to
17:39 - talk about this data.js later on when
17:41 - it's going to make sense because at the
17:43 - moment we are not working with the data
17:46 - so we might as well just skip that so
17:48 - this will be our setup files and last
17:50 - but not least i would want to talk about
17:53 - a little bit about css so the way i was
17:56 - setting up css first and foremost you
17:58 - notice that i have a bunch of variables
18:00 - here so i'm using the css variables i
18:02 - did set them up in a root and then all
18:05 - throughout the document you're going to
18:07 - notice that i'm just actually accessing
18:09 - these variables because i find it easier
18:12 - now there's also one more thing that i
18:13 - would want to let you know that my main
18:15 - goal was as i'm working to create as
18:18 - little class names as possible
18:21 - so even though normally i would work
18:22 - with style components or even if i just
18:25 - work with css i prefer
18:27 - naming everything with the classes in my
18:30 - case i didn't want to over populate the
18:32 - jsx that's the reason why we're going to
18:34 - see a bunch of these nav links and then
18:36 - you have let's say whatever the element
18:38 - that i'm choosing this is not my
18:40 - preferred way but since again i'm doing
18:42 - the recording and i didn't want to over
18:44 - populate the gsx that is the reason why
18:47 - my css was structured this way you're
18:50 - also going to notice that here on the
18:51 - top
18:52 - we have a bunch of globals whether this
18:54 - is going to be the body where whatever
18:56 - heading wants then a few classes that
18:58 - we're going to use all throughout the
19:00 - document
19:01 - and then everything will be in a
19:04 - following string where basically you're
19:06 - going to have a comment so this would be
19:08 - the section that we're going to be
19:10 - working on let's say navbar and all the
19:12 - css
19:14 - that has to do anything with the navbar
19:16 - will be here then we have end of navbar
19:18 - then obviously we're going to cover hero
19:20 - and so on and so forth so if you ever
19:23 - need to find something remember that
19:25 - you're just going to have to look for
19:27 - the name of the section that we're
19:28 - working on or if let's say you want to
19:31 - find a specific class you can also use
19:34 - always find and let's say we're going to
19:36 - be working on a hero i can type here
19:38 - okay so these are going to be the
19:39 - classes that we're going to be working
19:41 - with a hero now last i also would want
19:43 - to mention that i am purposely repeating
19:47 - myself now what do i mean by that you
19:49 - will notice that for each and every
19:50 - section i will gonna set up the media
19:53 - queries and bunch of them i could set up
19:56 - in one place and just use the grouping
19:58 - now again i did this purposely so
20:01 - whenever you're working on this
20:03 - particular section you can see all the
20:05 - css that was done now again this
20:08 - wouldn't make sense normally you just
20:10 - group everything together especially as
20:12 - far as the media
20:13 - queries are concerned because let's say
20:15 - if you're repeating the same rule it
20:17 - doesn't make sense but in my case again
20:20 - i wanted you to show
20:22 - rule by rule that is applied for each
20:25 - and every section that we're working so
20:27 - this would be the setup this is the
20:29 - folder structure that we're going to be
20:31 - using well obviously we're going to
20:32 - create more folders and more components
20:35 - but this is how we connect right now our
20:38 - application with the setup files that
20:41 - were provided our next tags will be
20:43 - creating pages that we will use all
20:46 - throughout the project so as i'm looking
20:48 - at my finished project i have few pages
20:50 - i have the home page
20:52 - then we're gonna have the room page
20:54 - where all the rooms will be displayed as
20:56 - well as single room page where there
20:59 - will be information about single room
21:01 - and also we would want to set up the 404
21:03 - page so let's say we're going to a page
21:06 - that doesn't exist we were going to be
21:08 - brought to a 404 where we have an option
21:11 - of returning home okay
21:13 - now what do we need is we we're going to
21:16 - head over to the source within source
21:18 - there will be new folder
21:19 - and quite self-explanatory we're just
21:21 - going to call this pages within the
21:23 - pages there will be four components
21:26 - most of them will be actually functional
21:28 - components only one the single room page
21:32 - should be class-based component you can
21:34 - obviously do it later on however you'd
21:36 - like but you might as well do it right
21:38 - now so let's start with the first one uh
21:41 - this will be home js
21:43 - and like i said the home js will be
21:44 - functional component and in this case i
21:47 - am using right away the extension that i
21:49 - have which will be the es6 7 react
21:53 - snippets and this allows me to not to
21:56 - type the whole spiel where i'm importing
21:58 - a react and all that i can just say
22:01 - r a
22:02 - c
22:03 - and or fc sorry and this creates a
22:06 - functional component
22:08 - in this case though this will be an
22:09 - arrow function now you can also do it
22:12 - rfc this is just going to be creating as
22:14 - a function this is really up to you
22:16 - however you'd like
22:18 - all right now in here let's just write
22:20 - hello from
22:22 - home page because this way we're going
22:24 - to know which component we have actually
22:26 - rendered in the app.js because starting
22:29 - from next video
22:30 - we all gonna set up the react router dom
22:33 - for the routing
22:34 - then the next one will be rooms so again
22:37 - new file
22:38 - let's call this rooms.js
22:40 - again let's create a functional
22:42 - component
22:43 - rfc or rf ac
22:45 - and then let's just say that hello
22:48 - hello from and we're going to say rooms
22:52 - page okay
22:54 - then we do have another one which is
22:56 - going to be single room page so we can
22:58 - just call this single
23:01 - room js again same old deal
23:04 - however in this case like i said let's
23:06 - create a class-based component
23:08 - so in that case i'm going to type rcc
23:11 - and we can just say hello from
23:13 - single room page now last but not least
23:17 - there will be an error page
23:19 - let's call this error
23:21 - js
23:22 - and again this is going to be the
23:24 - functional component
23:25 - and why don't we say hello from
23:28 - error page
23:30 - error page
23:32 - and when we save them i might as well
23:35 - can close all the tabs
23:36 - and then what we would want is within
23:39 - the app.js i would want to import them
23:42 - one by one we're just going to import
23:43 - them so i'm going to say first and
23:45 - foremost import and why don't we
23:47 - actually close the sidebar so import now
23:50 - i'm just going to be looking for the
23:51 - home and that will going to be in the
23:52 - pages folder so since this is the same
23:55 - folder of course that's the only thing i
23:57 - need to do and then i'm not looking for
24:00 - the images in fact i'm looking for the
24:01 - pages
24:02 - and then we're gonna go with home i will
24:05 - gonna save that we can just copy and
24:07 - paste that four times since we know that
24:09 - we have four of them and let's just
24:11 - change the naming the second one was
24:13 - rooms
24:14 - then we had what was the naming here i
24:17 - think the second one wasn't the rooms
24:20 - obviously that was single room
24:22 - and we also need to change the name of
24:24 - the import
24:25 - single room and last but not least we
24:27 - have the error
24:29 - so let's write error page
24:31 - as well as import from the error
24:33 - all right
24:35 - and when we do that
24:37 - why don't we render everything out just
24:38 - so we can see how everything would look
24:40 - like if we wouldn't use the react order
24:43 - dump so in that case we're just gonna go
24:45 - with home
24:46 - and then again like i said copy and
24:48 - paste it like we did already previously
24:50 - and let's just change the naming in this
24:53 - case we're gonna say rooms
24:55 - then we have a single room
24:58 - single room and the last one
25:01 - will be no
25:03 - other than the error page
25:05 - and once we say that we have four pages
25:08 - now it's a far cry from our final
25:10 - application
25:12 - but at least we have started doing
25:14 - something so why don't we take a look at
25:17 - how we can work nicely with react router
25:20 - dom
25:21 - setting up all our pages was nice and
25:23 - easy however we would probably want to
25:26 - give our user an option to navigate to a
25:28 - different pages because at the moment if
25:30 - we're just going to keep on filling in
25:32 - all the components that we created we're
25:34 - just going to have one giant page that
25:37 - will not make sense in the long run
25:40 - now there's many ways how we can do that
25:42 - however probably the most popular would
25:44 - be reactor or dump and as always if you
25:47 - want more information we can just go to
25:49 - react
25:51 - router
25:52 - and we're going to be looking for the
25:53 - package name of dom and then since this
25:57 - is created by react training all the
26:00 - documentation will be in fact in this
26:02 - website where we have reacttraining.com
26:05 - and then step by step first we would
26:08 - need to install it which we already did
26:11 - and then we would want to import few
26:13 - things and we would want to start with
26:15 - the browser router which will serve as
26:18 - the router
26:19 - then route we are going to point to a
26:22 - specific route where each component will
26:24 - be rendered and last one will be link
26:27 - which will be pointing to that specific
26:29 - url okay now we also gonna use the
26:32 - switch and we're gonna talk about it
26:34 - once we get there but these would be the
26:36 - basics that we would need to get from
26:38 - react router down as far as the browser
26:41 - router we would want to use the browser
26:44 - router to wrap our whole react
26:47 - element tree or react componentry so we
26:50 - have few options we can do this in the
26:53 - app.js however just so we don't clog up
26:56 - the app.js we can also do it in the
26:59 - index.js so this is exactly what i'm
27:02 - going to do is i'm going to import
27:04 - i'm going to say import then i'm going
27:06 - to say browser
27:08 - router and usually what happens you use
27:11 - the alias like you notice here they use
27:13 - browser router and then you just call
27:15 - this as router so you give it an alias
27:18 - and we're gonna go from react router
27:20 - down since we already have installed the
27:23 - package and what you would want to do
27:25 - right now is just wrap your app
27:27 - component that you have that's being
27:28 - rendered in the browser or i'm sorry in
27:32 - a router so this is going to serve as a
27:35 - parent container right now or parent
27:38 - component and then we're just going to
27:40 - lift this guy up the app and we're going
27:42 - to save it and now we're going to have
27:44 - access to a browser router now i did
27:47 - mess up here because obviously this is
27:49 - not how you write this so let's write it
27:51 - correctly and then we have the import
27:54 - and we have successfully set up our
27:56 - router once we have the router we might
27:59 - as well can start using it and like i
28:01 - said we would need two more things
28:04 - now the first one will be a
28:06 - route
28:07 - so notice we have a route component and
28:10 - then later on we're also going to use
28:12 - the switch
28:13 - and i'm going to talk about the switch
28:14 - once we start using it but i will gonna
28:16 - import this right away so we're gonna be
28:18 - looking for route
28:20 - then we have the switch
28:22 - and then again this will be from react
28:25 - router dom and the syntax is very simple
28:28 - so let's imagine we have these
28:30 - components that we already created as
28:32 - pages
28:33 - and then notice we have the link
28:36 - component which will be pointing to that
28:38 - route whether this is going to be
28:40 - forward slash or this is going to be
28:41 - forward slash about
28:43 - and what happens with a route component
28:46 - it has this path prop
28:49 - that just shows where we're going to be
28:52 - actually navigating
28:54 - and then what component will be rendered
28:57 - so if the path is forward slash this
28:59 - component will be rendered then if we
29:01 - have the about then the other component
29:03 - will be rendered
29:05 - and in our case this is very simple in
29:07 - fact we again need to set up the route
29:10 - and i'm going to say okay so if there is
29:13 - a prop and the name is passed in fact
29:16 - not to let me go back path and i'm going
29:18 - to say if the route is the home page
29:21 - which would be the forward slash what
29:23 - component i would like to actually show
29:26 - well this is quite simple component
29:29 - and then we're going to go with our home
29:30 - one
29:31 - i'm going to say okay so home component
29:34 - will be displayed
29:35 - then i would need to get rid of rest of
29:38 - them and we're just going to copy and
29:40 - paste them and set up four paths now the
29:43 - last one we're not going to use the path
29:45 - but we're not going to talk about it
29:46 - right now so why don't we get rid of the
29:49 - fourth one all together and we're going
29:51 - to talk about a little bit more once we
29:53 - actually are covering the error page so
29:55 - if the path is forward slash if the home
29:57 - page we would want to render then
30:00 - obviously we're going to be looking for
30:01 - the home component
30:02 - then we would want to set up the rooms
30:05 - path so if we're navigating to the rooms
30:08 - then we would want to show rooms and
30:11 - last but not least we also would want to
30:13 - show the single room so for the time
30:15 - being i'm gonna write like this
30:18 - single room but we will gonna change
30:19 - this a little bit later
30:21 - so let's write this a single
30:24 - room and now let's notice what happens i
30:27 - do have my home page awesome because
30:30 - currently we are sitting on the homepage
30:32 - however the problem will be if i want to
30:35 - navigate to a rooms because i'm going to
30:37 - write forward slash
30:39 - then we have the rooms
30:41 - and check this out i still have my home
30:44 - even though i'm also rendering the rooms
30:47 - and the reason for that is because
30:50 - with react router dom
30:52 - it will match the first one
30:55 - now in our case what we would want is
30:58 - match the exact one and for that we do
31:01 - need to add
31:02 - this prop and the name here is exact and
31:07 - that way only
31:08 - if the path matches exactly which would
31:11 - be the forward slash then we're going to
31:13 - be rendering the homepage because what
31:15 - you need to understand is if you're
31:17 - looking at the rooms the way it's
31:19 - written right now we have forward slash
31:20 - and then rooms it also matches the
31:23 - forward slash
31:25 - the one that we have just for the home
31:26 - one so what i'm gonna do is right now is
31:28 - i'm just gonna grab these guys
31:30 - and i'm just going to copy and paste
31:32 - them so we're going to add this exact
31:35 - one to all our writes so one two and
31:38 - three
31:38 - we're all going to have this exact route
31:41 - once i do that and by the way i didn't
31:43 - set up for the last one
31:45 - then if i'm going to be on a home page
31:47 - only the home page will be rendered if
31:50 - i'm going to be on room page only the
31:52 - rooms page will be rendered we also have
31:54 - an option of single page
31:57 - or single room right so we can write
31:58 - single room and this will be our single
32:02 - room however
32:04 - there is an issue currently because
32:06 - what's going to happen is that
32:08 - the single room we're going to use for
32:10 - each and every room however we will
32:11 - going to be displaying different
32:13 - information so if we have single economy
32:15 - room this will have information about
32:18 - that single economy room if i would want
32:20 - let's say some kind of presidential room
32:22 - i would want information about that
32:24 - presidential room and at the moment the
32:27 - way our setup is currently
32:29 - we are not doing that we're just
32:31 - rendering this one single room
32:34 - and in order to fix that we would need
32:36 - to use the route parameters so how we
32:39 - can do that well we need to come up with
32:41 - a path so in my case i will going to say
32:44 - this this is rooms even though remember
32:46 - you could just say leave the forward
32:48 - slash and then do the route parameters
32:51 - but in order to set up the route
32:52 - parameters you need to set up the colon
32:55 - and then
32:56 - need to come up with whatever variable
32:58 - name you would want now in my case i'm
33:00 - going to call this slug
33:02 - but you can call this uncle bobby it
33:04 - doesn't really matter now the key here
33:06 - is going to be
33:07 - later on when we're going to be working
33:09 - within this single room component
33:12 - we're going to check it out how we can
33:14 - access
33:15 - this slug here how we can access that
33:18 - variable and then pull the information
33:20 - about that one specific page so that's
33:22 - the reason when i'm going to be clicking
33:24 - on a single room page i'm going to be
33:26 - getting a unique information about that
33:29 - single room page all right now let's
33:32 - test it out
33:33 - let's test it out our slug so in this
33:35 - case i can say localhost this will be my
33:38 - homepage
33:39 - then if we're going to do let's say
33:42 - rooms
33:44 - let's type rooms this will be the room
33:45 - page and then if i'm going to do the
33:48 - forward slash and this is going to be my
33:50 - path where i'm going to be accessing the
33:52 - single room and we were going to set
33:54 - this up with the naming where if you're
33:56 - looking at the final project notice that
33:58 - this would be double basic this is going
34:00 - to be our slug but just to show you that
34:02 - doesn't matter how we name the variable
34:05 - this is just the accessing i could type
34:07 - let's say one here now what this is
34:09 - going to do is this is going to say okay
34:11 - so i cannot find this particular rooms
34:14 - now the reason for that because i didn't
34:16 - save it now let's save that and notice
34:19 - now i have rooms
34:20 - then i have one which will be that one
34:23 - specific room and obviously this will be
34:25 - hello from single room now instead of
34:28 - one i could just write slug and again
34:30 - this will gonna lead to a single room
34:32 - page now last but not least i do want to
34:35 - set up some kind of error page because
34:37 - at the moment if i delete everything
34:39 - that i have in the url and let's just
34:42 - say forward slash hello check this out i
34:45 - have this blank page because none of
34:48 - these ones matched here so i had a bunch
34:51 - of routes but none of them in fact match
34:54 - and what we can do here is we can set up
34:56 - the switch component so we can place
34:58 - everything within the switch that is
35:00 - giving
35:01 - with a react router
35:03 - now let's place this all the way in the
35:06 - bottom
35:06 - and then once within the switch
35:08 - statement we can set up again route
35:11 - component in this case we don't need to
35:14 - show the path we can just say okay so
35:16 - we're going to be rendering the
35:18 - component the name of the component will
35:20 - be in our case error
35:22 - error
35:24 - and now let's check it out
35:25 - when there will be no match for whatever
35:29 - url we currently have
35:31 - we will be rendering this error page all
35:33 - right now this will be our setup from
35:36 - the reactor or dom and then next we can
35:38 - start working on our navbar once we have
35:41 - successfully set up our react router
35:44 - with the url parameters as well as the
35:47 - error page just as a side note i want to
35:50 - let you know that if you want to get
35:52 - more information about what is happening
35:54 - with react router dom just explore their
35:57 - documentation where in this case they do
36:00 - talk about the url parameters basically
36:03 - what they are and how to work with them
36:05 - as well as we have our no match and the
36:08 - reason for that why we're placing in the
36:10 - switch because the switch will render
36:13 - the first child route that matches and
36:15 - the route with no path will always match
36:18 - now just to show you how this is going
36:20 - to work so let's say i will going to get
36:22 - rid of the switch so i'm going to select
36:24 - them both and in fact delete them now i
36:27 - can leave them as a fragment notice
36:29 - right now my error one will be showing
36:32 - up on each and every route so even if
36:34 - i'm going to go to a let's say rooms
36:36 - then i'm still going to have this arrow
36:39 - so one of the things that we can do
36:41 - is we can use the switch statement here
36:44 - like so and then what happens is that if
36:48 - the route will obviously not gonna match
36:50 - we will gonna be rendering this error
36:52 - component all right now the nav bar as
36:56 - i'm looking at our finished project
36:58 - notice that navbar will be on each and
37:00 - every room
37:01 - even the error one so even if i'm gonna
37:05 - say hello and i'm gonna have a trouble
37:07 - finding this page i will gonna still
37:10 - have my navbar so one of the most
37:12 - important things that we need to
37:13 - remember that navbar will be placed
37:15 - around the switch statement because we
37:18 - are going to use the nav bar for the
37:19 - navigation in order to do that i will
37:22 - going to create a new folder
37:24 - now i'm going to call my folder
37:25 - components
37:27 - and then within the components we're
37:29 - going to be placing a bunch of
37:31 - components and then the first one will
37:33 - be navbar
37:35 - js and why don't we do it very simply
37:38 - where i will gonna place a class-based
37:41 - component because i do want to set up
37:44 - here the toggling and why don't we write
37:46 - just hello from
37:49 - bar let's save that and then within the
37:52 - app.js i would want to import so
37:55 - somewhere here maybe in the bottom
37:57 - last import import then we're looking
38:00 - for navbar this will be in our
38:02 - components so
38:03 - not there but
38:05 - dot forward slash
38:07 - components and then we're looking for
38:09 - the navbar and on top of the switch
38:13 - we will gonna render our navbar let's
38:15 - save that and we do have our hello from
38:18 - network which is really really good
38:21 - because then for each and every page we
38:22 - will gonna have the navbar once i go to
38:25 - homepage i'm still gonna have navbar and
38:27 - so on and so forth our done in or sorry
38:30 - i work in the app.js is pretty much done
38:34 - and next we'll just going to be working
38:36 - whether the pages or whether this is
38:38 - going to be components first and
38:39 - foremost i would want to show you how we
38:42 - can work with react icons because if
38:44 - you're noticing on a smaller screen
38:47 - we all gonna have a very very nice icon
38:50 - and let me make this smaller notice this
38:52 - guy so this is gonna be the react icons
38:54 - now in fact that is a phantasm icon but
38:57 - what i really liked about react icons
38:59 - the package is the fact that they are
39:01 - rendering this as an svg and it just
39:04 - gives you more nice features all right
39:07 - now first and foremost let me make this
39:08 - bigger
39:09 - then i will gonna keep this open just
39:12 - again to show you where we're going to
39:14 - be working with the links because this
39:15 - is what we're going to be setting up but
39:17 - i will going to open a new one i'm going
39:19 - to say react
39:21 - uh react and let's call this icons and
39:24 - then this is going to lead you to react
39:26 - icons netlify.com
39:28 - and then notice how we should work with
39:30 - them so first and foremost we would need
39:32 - to install them which we did then we
39:35 - have few
39:36 - libraries that we can choose from
39:38 - whether you want to do font awesome
39:40 - ionic material design
39:43 - and then the way you would import this
39:45 - would be the name of the icon which you
39:47 - would like to import and then the
39:49 - library where you want to import from so
39:51 - in our case we're going to use fantasm
39:53 - so we just need to add this forward
39:54 - slash fa and then if you want to render
39:58 - that icon the only thing you need to do
40:00 - is just name it okay now if you want to
40:03 - check it out what kind of icons they
40:05 - have here you go
40:06 - knock yourself out again icon name and
40:09 - then from the font item obviously you
40:12 - can just follow along what would gonna
40:13 - be my naming for the icon so you don't
40:16 - need to actually go ahead and search for
40:19 - that because you'll see in a second
40:21 - which icon i actually picked now first
40:25 - and foremost uh what kind of other
40:27 - imports i would want
40:29 - well i would want to set up some kind of
40:32 - uh logo as well because if you're
40:35 - looking at it in again the final project
40:37 - we're noticing here the logo so why
40:40 - don't we start with a logo
40:42 - and we're going to do this from the
40:44 - images import
40:46 - then i'm going to name this logo and now
40:47 - we just need to navigate to a images
40:50 - folder and we do need to add from
40:53 - and let's see so we have right now
40:55 - images
40:56 - and then within the images the name of
40:58 - the logo will give me logo
41:02 - svg now this is going to be the logo
41:04 - that we're going to be using second i
41:06 - would want to get my icon so i'm going
41:09 - to say fa
41:10 - then the name is align
41:13 - and right and then like i said this will
41:15 - be from react
41:17 - icons and then forward slash and fa now
41:20 - last i would want to get and this is not
41:23 - what i would want these are the setup
41:25 - files but what i would want is to head
41:28 - over to a not react icons but react
41:30 - router and then remember we talked about
41:33 - the link component now link component is
41:37 - going to be the thing that we're going
41:38 - to use in the navbar because we're going
41:40 - to use the link component then to prop
41:43 - this will be actually directing our user
41:46 - to a specific url okay now
41:49 - let's import it
41:51 - import and let's name this link
41:53 - from react router down and get used to
41:56 - this import we will do this all
41:59 - throughout our application because we'll
42:01 - have a bunch of buttons that we're going
42:03 - to be
42:04 - directing the user to some other route
42:06 - all right now we do have the link
42:08 - everything is awesome and like i said i
42:11 - would first want to set up right away
42:14 - the state because i will do a bit of a
42:17 - toggling
42:18 - if i'm just going to make this smaller
42:19 - just to show you how this is going to
42:21 - look like if we're going to go to the
42:22 - smaller screen
42:23 - notice this is going to be our navbar
42:26 - and then we click it again and now
42:28 - navbar disappears i'm doing this with a
42:31 - state and with handle toggle as well as
42:34 - there is a little bit of css but
42:36 - obviously i'm going to show you what
42:37 - kind of css is involved however i do
42:40 - want to let you know that in order to
42:42 - see everything that we're going to be
42:43 - doing within the navbar you will gonna
42:46 - have to head over to app css
42:48 - now let's find where is the nav bar
42:51 - let's look for the nav bar and then
42:54 - within the nav bar links
42:56 - you have here the height 0 and overflow
42:59 - hidden so if you're not going to comment
43:01 - this out unfortunately you're not going
43:03 - to be able to see what is happening so
43:05 - you do need to make sure that you
43:06 - comment this out and that way everything
43:08 - that we're going to be writing within
43:10 - our js you will be able to see okay
43:14 - enough of me apping why don't we set up
43:16 - the state like i said we're going to set
43:17 - up the state
43:19 - then we're going to use this or is open
43:22 - then we're going to set this equal to
43:24 - false so by default navbar will not
43:26 - going to be open and we already know
43:28 - that we can create a handle toggle which
43:31 - will be our method obviously we can name
43:33 - this however we would like
43:34 - and what this is going to do is use this
43:37 - dot
43:38 - set state and we're just going to make
43:40 - sure that if the is open is let's say
43:43 - false we would want to set it equal to
43:46 - true if it's true then it's false and so
43:48 - on and so forth and the way we do that
43:50 - is we use this that's the state
43:52 - then we have this property there by the
43:55 - name of is open and we're all going to
43:57 - set it up to opposite so i'm going to
43:59 - say exclamation mark this dot stat state
44:02 - and is open so this way as we're going
44:06 - to be clicking on it this is going to be
44:07 - toggling in between the false and true
44:10 - then within the render this is where the
44:13 - real fun starts so first and foremost
44:16 - let me delete div
44:17 - and i'm going to say that this instead
44:19 - will be nav
44:21 - i do want to add right away the class of
44:23 - navbar
44:24 - class name bar and if you did everything
44:27 - correctly obviously there's going to be
44:28 - already some css that's being applied
44:31 - within the nav bar we're going to set up
44:33 - the nav center
44:35 - this will be the div
44:37 - then after that we would want to go with
44:39 - nav
44:41 - header div
44:42 - and then last but not least i would want
44:45 - to start setting up my logo but i will
44:48 - gonna wrap this in a link so the way we
44:50 - use this link component that we got from
44:53 - react router down we just need to write
44:55 - link
44:56 - then to prop so we're all going to be
44:58 - directing the user in our case if i
45:01 - click on my logo i would want to go back
45:04 - to the homepage so let's close it out
45:06 - and then within the link why don't we
45:08 - place that logo so for that i'm going to
45:10 - use source i did already import the logo
45:14 - from images and i can just place it
45:17 - within the source so i can say logo
45:19 - and we can also add maybe alternative
45:22 - and for alternative we can write i don't
45:24 - know beach
45:26 - beach resort something like this
45:29 - resort and we also obviously need to
45:32 - close out the image
45:34 - so forward slash and this will going to
45:36 - be our logo
45:37 - like i said there's going to be multiple
45:39 - things happening first and foremost you
45:41 - notice that there's the background here
45:43 - there's also a logo and everything is
45:46 - working nicely all right
45:47 - then i would want to work on my button
45:50 - which like i said will be our toggling
45:51 - button on the smaller screens and in
45:54 - order to do that we will gonna set up
45:56 - the button component or button element
45:59 - first and foremost
46:00 - then we might as well add type
46:03 - will be button
46:05 - button and then why don't we add a class
46:08 - name
46:09 - of our nav btn
46:11 - so nav btn and then within the button i
46:16 - would want to render
46:18 - my icon here the fa align right now like
46:22 - i already previously showed you from
46:23 - their docs the only thing i would want
46:27 - is to access obviously this icon so i
46:29 - would just need to add a name of this
46:32 - icon and then i will gonna add right
46:34 - away class name because i did add a bit
46:36 - of styling here
46:38 - so nav icon
46:40 - let's close that out let's say that and
46:43 - sure enough we have our icon but we
46:46 - still haven't set up the handle toggle
46:48 - when i'm clicking on this button so the
46:51 - way we're going to do that
46:53 - is we're going to set up on click then
46:56 - this will be equal to a obviously
46:59 - function
47:00 - and the name of the function will be
47:01 - this dot handle toggle since we have
47:04 - access to it in this class
47:07 - last but not least i would want to set
47:10 - up the ul or unordered list
47:13 - which will render in fact all our links
47:16 - now i need to be careful here that i
47:18 - would still want to place this within
47:20 - nav center but i don't want to place it
47:23 - within the nav header so make sure that
47:25 - you are outside the nav header and we're
47:28 - going to set up the on our list
47:30 - then for on our list this is going to be
47:32 - the kicker where the class name will not
47:35 - going to be a simple class name in fact
47:37 - we were going to use the value
47:40 - from the state where we have this dot
47:42 - open i would want to write it first and
47:45 - then once we're going to set up
47:46 - everything here within the navbar i'll
47:49 - head over back to css and show you what
47:51 - is actually happening but the way we're
47:52 - going to do that is this dot
47:54 - state is open since obviously that is
47:57 - the property we're looking for and i'm
47:58 - just going to check if the property is
48:01 - true so if this is open
48:03 - then this class name should be two of
48:06 - them then there's going to be links for
48:08 - my
48:09 - unordered list
48:10 - as well as we're going to be looking for
48:12 - the show nav class however if it is
48:15 - going to be false then we're only going
48:17 - to be rendering one class or adding one
48:20 - class to this on order links which will
48:22 - be nav links and then within the onward
48:25 - list i'm just gonna go with list item
48:29 - and for that particular list item we're
48:32 - gonna place a link
48:33 - and then there's gonna be two prop again
48:36 - this will be again directing the user
48:38 - back home
48:39 - so we're gonna write that the name in
48:41 - this link will be home let's copy and
48:43 - paste that one more time
48:46 - and then the second one will be rooms
48:48 - and that's it that's the only thing we
48:49 - need to do as far as the navigation is
48:52 - concerned
48:53 - because we don't have a bunch of links
48:54 - here so let's write rooms and check this
48:58 - out and currently what i have here i can
49:00 - click on it all day long and not much is
49:03 - happening only this small move but we're
49:06 - gonna fix this a little bit later on the
49:08 - reason for that is of course because we
49:10 - commented it out
49:11 - but i do have my links now as a side
49:14 - note normally if you're setting the
49:17 - links
49:18 - it's probably wiser to set it up in a
49:21 - different place and then just rendering
49:24 - it as a list well what do i mean by that
49:27 - well let's imagine again i keep going
49:29 - back to my github where i don't want to
49:30 - go but let's imagine you're going to
49:32 - have a bunch of links
49:34 - and those links will be displayed all
49:35 - over the page let's say you have the
49:37 - sidebar you also have maybe links
49:39 - displayed in the footer and what you
49:42 - don't want to do is just hard coding all
49:44 - over the place because let's say you
49:46 - want to change something so probably a
49:48 - better way would be setting up some kind
49:50 - of constants folder or data folder where
49:53 - you have access to these links so set
49:55 - them up as some kind of array and render
49:58 - them now in my case there wasn't bunch
50:00 - of links and i was just rendering them
50:02 - in one place so i thought this might be
50:04 - a bit of an overkill but normally if
50:07 - you're rendering in multiple places and
50:09 - you have way more links it makes more
50:11 - sense to set up this as some kind of
50:14 - array array of let's say objects and
50:16 - then you're just rendering this and that
50:19 - way you have the information one place
50:21 - so if you change this information then
50:24 - all the changes are being affected all
50:26 - throughout your project again in my case
50:28 - it just didn't make sense now the second
50:31 - one will be this app css because what
50:33 - you notice in the nav links we have by
50:36 - default height of zero and overflow
50:40 - hidden so if i'm gonna comment this out
50:42 - you'll see how actually this is going to
50:44 - work i will going to set this up so at
50:47 - the moment by default they should be
50:50 - hidden but probably because i already
50:51 - clicked on them this is the reason why
50:53 - it's not happening so let me refresh
50:55 - notice now my links are gone because by
50:57 - default height is zero and overflow is
50:59 - hidden and then there is the show now of
51:02 - class that adds this height of 100
51:06 - or i'm sorry 100 pixels that's the
51:08 - reason why we click on it now this class
51:11 - of show nav is being added to my on our
51:13 - list and now my links are being shown
51:17 - that's the whole magic here behind this
51:19 - navbar js and as you notice here we are
51:22 - just checking the value in a state is
51:24 - this open
51:25 - then add these two classes here the nav
51:28 - links as well as shown up and if it's
51:31 - false which by default this is false
51:33 - then we just want to work with a nav
51:35 - links okay
51:37 - this is the only thing that we should be
51:39 - interested within our navbar.js
51:42 - and now we are ready to move on to our
51:44 - next component which in fact will be a
51:47 - hero component as you're looking at a
51:49 - final project you probably noticed that
51:51 - for each and every page that we have
51:53 - there's going to be this massive hero
51:55 - background image and that is going to be
51:57 - the component that we were going to
51:59 - create and the way we're going to create
52:01 - that is that we are going to be able to
52:03 - reuse it
52:04 - now there's still going to be a problem
52:07 - just doing it with a regular css route
52:10 - so when we're going to get to a single
52:12 - page in fact we're going to do it two
52:14 - ways first we're going to set it up
52:16 - normally like we're going to do it right
52:18 - now with the css but we're also going to
52:21 - explore the styled components way where
52:23 - we can make it even more dynamic okay
52:26 - now what i would like to do right now is
52:28 - head over back to the components we're
52:30 - going to create a new file and i'm going
52:32 - to call this hero js
52:34 - this will be a functional component so
52:37 - rfc and let's close the sidebar and now
52:41 - let's decide what we would want to do so
52:43 - this is going to be my component
52:45 - then there's going to be two props
52:47 - children because i would still want to
52:50 - render this banner with a button and all
52:53 - that within inside that's the reason why
52:56 - i want to access the children and the
52:57 - second one will be a hero now this is
53:00 - the prop that i'm creating myself which
53:02 - i'm going to add to this header that i'm
53:05 - going to be rendering the reason for
53:07 - this hero class is because i want to add
53:09 - it as a class name so i'm going to set
53:12 - up the class name
53:13 - and i'm going to say hero so each and
53:15 - every time i'm going to be rendering
53:16 - this hero component i'll have an option
53:19 - of changing the class name and then i'm
53:22 - going to show you obviously in the css
53:23 - how we're going to be doing that but in
53:25 - general i'm going to say okay so this
53:27 - will be equal to my prop so instead of
53:29 - passing this as a string i need to say
53:32 - hero and then we also would need to
53:35 - render the children so i'm going to say
53:37 - header
53:38 - and then we're going to say i don't know
53:40 - children
53:41 - so let's write children that is the prop
53:43 - obviously that we're accessing
53:45 - so let's go with children and this is
53:47 - our component we're almost done we're
53:50 - still going to have a look at how we can
53:52 - set up default prompts and why would
53:54 - that make sense but why don't we test
53:56 - this out so i'm going to say okay there
53:58 - will be a hero component and first and
54:00 - foremost i would want to try this out in
54:02 - my home page so we're going to head over
54:04 - to the homepage we will going to import
54:06 - this i'm going to say hero from
54:10 - and let's say components of course
54:13 - then within the components we do have
54:15 - the hero
54:16 - and why don't we render it first and
54:19 - foremost let's get rid of this div
54:22 - and then let's just say that this will
54:24 - be my hero
54:25 - uh hero component
54:28 - like so
54:30 - and i do need to add the class name here
54:32 - because this is what i'm expecting in my
54:35 - hero
54:36 - because i have my hero prop and then
54:39 - this hero prep will be passed down into
54:42 - attribute of the class name and then
54:44 - this is what's going to make the whole
54:46 - change so in this case i'm going to say
54:48 - hero and i already did set up within the
54:51 - app css
54:52 - hero class
54:54 - now let me show you how we can find that
54:56 - instead of looking for the nav bar
54:58 - we're going to look for the hero and
55:00 - then check this out i have two classes i
55:03 - have one for default hero and the second
55:06 - one would be for room zero so this is
55:08 - what i'm talking about when i say that
55:10 - we're gonna reuse it so we're gonna have
55:12 - this hero prop
55:14 - but in this case i would want to pass
55:16 - default hero and since this will be
55:20 - accessing the class that i had the
55:22 - default hero class since that is the
55:24 - whole setup in the hero check this out
55:27 - now i do have this massive image in my
55:30 - homepage however i would want to set up
55:34 - some kind of default props for this hero
55:36 - component because the issue right now is
55:38 - that yes i am expecting this hero prop
55:42 - but what about let's say i forgot to add
55:44 - the prop now it would be annoying if the
55:47 - only thing would be rendering is pretty
55:48 - much nothing here because this is just
55:50 - going to be empty component so what we
55:52 - can do here is we can use the hero now
55:55 - that obviously is the name of our
55:57 - component
55:58 - then we go with default props and i'm
56:01 - just going to set up right away that the
56:03 - hero prop
56:05 - will by default be default hero which
56:09 - is in fact the class name that i had
56:12 - within the css now what's going to
56:15 - happen is if on a different page let's
56:18 - say the rooms page i would want to
56:20 - render different image obviously i'm
56:22 - going to be passing the class name that
56:24 - i'm going to create for the rooms
56:27 - however if i'm not going to pass
56:29 - anything altogether
56:30 - like let's say for
56:32 - the error page if you're going to go to
56:34 - the error page notice this again we're
56:36 - going to be rendering the same thing
56:38 - like we had before is because i have the
56:41 - default props so let's test it out i do
56:44 - have my hero prop i already have the
56:46 - default prop so that way within home i
56:49 - actually don't need to add any kind of
56:51 - class name here this is happening by
56:53 - default and why don't we head over back
56:55 - to the rooms again we're going to do the
56:57 - same thing
56:58 - we're going to import hero
57:01 - from and then we're going to be looking
57:03 - for the components
57:05 - as well as we're going to be looking for
57:06 - the hero and why don't we get rid of all
57:09 - this
57:10 - and for the time being let's just say
57:12 - hero however in this case i would want
57:15 - to pass the information and if you
57:17 - remember within the css what was the
57:19 - other class name that i created
57:21 - and that was room zero and again just to
57:24 - repeat the reason why i didn't create a
57:27 - separate class for the single room is
57:29 - because we're going to do a little bit
57:30 - differently because there is a bit of
57:32 - issue here if you want to customize this
57:35 - even more so there's limitations to
57:37 - doing this with acss but in this case
57:40 - i'm going to call this a rooms
57:42 - hero which in fact will overwrite the
57:45 - default ones that we did set up so in
57:48 - this case if we're going to head over to
57:50 - the rooms page i will going to have a
57:52 - different image now all the magic is
57:54 - obviously happening here within the css
57:57 - because i do have these two classes what
57:59 - i'm saying here is the min height will
58:01 - be 100 view heights then i'm just
58:03 - getting rid of the height of the navbar
58:06 - i'm also setting up the background now
58:09 - for the default one i'm just looking for
58:10 - a default image from the images then i'm
58:13 - making sure that it's in the center and
58:15 - here i'm just adding the flexbox so the
58:17 - banner that we're going to be adding
58:19 - later on will always always be placed in
58:22 - the center and for the room zero i'm
58:25 - using all the properties with the values
58:27 - but i'm just overriding them i'm saying
58:29 - you know what i don't want 100 view
58:30 - heights so i don't 100
58:32 - of the viewport in fact i want only 60
58:35 - and then i also would want to change a
58:38 - image now last but not least like i said
58:40 - we still would want to set it up the
58:42 - error page so why don't we head over
58:45 - back to the error and in this case again
58:47 - this will be very simply we're going to
58:49 - say that we're not going to be getting
58:51 - any kind of specific class for that
58:53 - particular hero component
58:55 - where we're going to write hero from
58:58 - and then let's say what from well we can
59:01 - go to components again hero and why
59:04 - don't we render this dude
59:06 - why don't we say hero without any kind
59:08 - of classes or anything like that now
59:11 - let's save that and in this case if i'm
59:13 - gonna navigate in my browser to let's
59:17 - say again hello
59:19 - how we're going to be brought to my
59:20 - error page and which i'll going to be
59:23 - able to set up later on in next video
59:26 - the banner component which will have
59:29 - this button so then we're going to be
59:30 - able to navigate back to a homepage
59:34 - we have our hero component good good and
59:36 - next one up we have the banner and i can
59:40 - tell you right away that we could set up
59:42 - everything within hero
59:44 - so where i do have the background then
59:47 - within the banner obviously we're going
59:48 - to be placing all this information
59:50 - whether that would be title subtitle
59:52 - this underline and then as a child we
59:56 - will be able to place something else now
59:58 - in my case i'm going to be placing each
60:00 - and every page we're going to have some
60:01 - kind of link and like i said you could
60:04 - set this up everything in one component
60:06 - now the reason why i split this up
60:09 - because my idea was like this to show
60:11 - you that you can always reuse them
60:14 - however you would like
60:15 - let's say in your case you wouldn't want
60:18 - to use
60:19 - all of it together you wouldn't have
60:21 - some kind of place in your project where
60:23 - you only want the background or you
60:25 - would only want the banner or you would
60:27 - want to place different children than
60:29 - just let's say button so that way if you
60:32 - make them smaller the only annoying part
60:34 - is the fact that if you want to use all
60:36 - three of them together for each and
60:38 - every page we're obviously going to have
60:40 - to do the import within home we're going
60:42 - to have to not only import the hero but
60:44 - also the banner and also the link and so
60:46 - on and so forth so you could technically
60:48 - set this up as one big component the
60:50 - reason why i splitting this up because i
60:53 - find it a little bit more customizable
60:55 - where if i want just to grab a hero
60:58 - component i can just add it as an image
61:00 - that's it i don't have to actually get
61:02 - rid of the banner or anything like that
61:04 - all right that is just a side note then
61:07 - after the hero
61:09 - i would want to create a component
61:11 - and the component will be banner.js
61:15 - within the banner js again this will be
61:17 - functional component
61:19 - then let's close the sidebar and we will
61:21 - gonna pass three props so
61:24 - there's gonna be option four title and
61:26 - subtitle and title would be this guy
61:30 - then subtitle would be here and then
61:32 - also we're gonna be rendering the
61:34 - children and just as a side note for
61:37 - anybody who is interested what is the
61:39 - children that is basically within the
61:42 - component so if i'm saying here that i
61:44 - would want to render children whatever
61:46 - i'm going to place within this component
61:49 - we're also going to be rendered
61:50 - otherwise if you're not going to use
61:51 - these children then whatever you're
61:53 - going to place within that component in
61:56 - fact will not be rendered so we have
61:58 - hero then we have banner
62:00 - like i said we have three props again
62:02 - we're going to use the children because
62:04 - i would want optionally to add this
62:06 - button now you don't have to there's
62:08 - going to be cases we're not going to be
62:10 - adding the button but in most cases we
62:12 - will going to add this link and for that
62:14 - we're going to say children so we're
62:15 - going to render children then title
62:18 - and then subtitle and what we would want
62:21 - to render well there's going to be a div
62:23 - i already did set up the class name the
62:25 - class name will be banner and then we
62:29 - will have a heading 1. now heading 1
62:31 - will be rendering the title then we will
62:34 - have a div
62:36 - so simple div
62:38 - as well as after that there's going to
62:39 - be a paragraph and paragraph we'll be
62:43 - using to actually render the subtitle
62:46 - that we have and last but not least i
62:49 - will going to place the children and
62:50 - what you need to remember that depending
62:53 - of where you're going to place these
62:54 - children this is where they're all going
62:56 - to be rendered so the reason why this
62:57 - button is all the way in the bottom
62:59 - because i just set it up i said whatever
63:01 - i'm going to be passing as children will
63:03 - be placed in the bottom so if you're
63:05 - going to place them here let's say above
63:07 - the title they will be rendered above
63:09 - the title we did set up the banner now
63:12 - just to show you the classes that i'm
63:13 - using for the banner this will be right
63:16 - after hero like i said so if you're
63:18 - following along next section up we have
63:20 - the banner here are the comments again
63:22 - display online some backgrounds some
63:25 - colors some paddings text alignments and
63:28 - so on and so forth
63:29 - then within the banner we are pretty
63:32 - much done we don't need anything and now
63:35 - again this would be the part if some of
63:36 - you are annoyed by the imports where we
63:39 - would want to import this of course i
63:41 - will gonna right away import link just
63:43 - so we can set it up everything together
63:45 - with the children so i'm going to say
63:47 - import then i'm looking for the banner
63:48 - from
63:49 - and i would need to say from where well
63:52 - this is obviously from the components
63:55 - and the name will be banner and like i
63:57 - said if i want to render the children i
63:59 - would need to place this within the hero
64:02 - and the kicker here that within the hero
64:05 - we already set up our flexbox remember
64:07 - when we were saying that if there's
64:09 - going to be child it basically will be
64:11 - placed in the center display flex align
64:13 - item center and justify content center
64:16 - so this is exactly what we're going to
64:17 - do right now we're going to say
64:19 - that we would want to render
64:21 - banner
64:22 - the props are optional as far as the
64:24 - title and the subtitle is concerned so
64:29 - for the title i have luxurious rooms
64:33 - so let's write title and i'm going to
64:35 - try to not
64:38 - misspell it and this is why i'm not
64:39 - going to repeat that because usually
64:41 - when i talk and type my
64:43 - spelling is even more terrible so
64:45 - hopefully this is luxurious written
64:48 - correctly and then for the subtitle
64:51 - let's write deluxe
64:53 - deluxe
64:55 - rooms
64:56 - starting
64:57 - i don't know
64:59 - at 299.
65:01 - so dollar sign 299.
65:04 - let's
65:05 - actually not close the manner but let's
65:08 - just close the opening tag and now i
65:10 - would want to get my link so what i'm
65:12 - going to say here import
65:14 - then we're going to be importing link
65:16 - from what well we can use it react
65:19 - router down
65:20 - let's import that and then like i said
65:23 - within the banner this is where we're
65:25 - rendering the children we're going to
65:27 - say a link now this will link back to a
65:30 - rooms when i say back obviously in the
65:33 - case of the homepage this will be
65:35 - rendering or this we're going to be
65:36 - navigating to the rooms
65:38 - and then we can also add right away
65:40 - class name class name will be button
65:42 - primary now where's the button primary
65:44 - in app css again the fastest way
65:47 - probably will be btn and this is going
65:50 - to set up the class that i'm adding so
65:52 - notice this is the css we're adding and
65:54 - by the way this is going to be something
65:56 - we're going to reuse all throughout the
65:57 - project
65:58 - then within the link what we would want
66:00 - to render well let's write
66:02 - our rooms
66:04 - let's set this up
66:06 - and bummer i don't see it here and the
66:09 - reason for that is obviously because i'm
66:11 - looking at a hello which is our error
66:14 - page but if i'm going to head over back
66:16 - to the home and this is going to be my
66:18 - banner and if we're going to click on a
66:19 - link notice now we're going to be
66:21 - navigating to the rooms i also would
66:24 - want to set up the same way like we did
66:26 - in home i also want to do a banner or
66:30 - i'm sorry not banner the error page so
66:32 - let's close the home i think we can
66:34 - close the css i don't think we need it
66:36 - anymore and for the error what we're
66:39 - gonna do
66:40 - well i think it's gonna be a bunch of
66:42 - the same things where again we have
66:45 - already hero imported
66:47 - i do need to have my banner so import
66:51 - banner from and that components
66:54 - banner and i also would want the same
66:57 - thing with a link so import
66:59 - and then i need to have it as a name
67:02 - import link
67:04 - then where well this is coming
67:06 - from the reactor dom
67:09 - and then again within the hero
67:11 - there's going to be a banner within a
67:15 - banner there are going to be a link
67:18 - so let's write
67:19 - banner
67:20 - then let's write title
67:23 - title will be 404
67:25 - subtitle let's write page not found page
67:29 - not found let's close this banner for
67:33 - now and then within the banner again
67:35 - let's actually
67:37 - uh set up the link now in this case this
67:39 - will be directing us back to the home
67:41 - page so link component that we just got
67:44 - from react router 2
67:46 - then home page
67:47 - class name in this case again we're
67:49 - using btn primary
67:51 - primary and by the way i can close it
67:53 - here
67:54 - and then within the link we would want
67:56 - to render return home
67:58 - so let's go up a little bit to return
68:02 - return
68:04 - home let's save that
68:06 - and now if i'm gonna navigate
68:08 - on my current recording to some kind of
68:11 - hello page
68:12 - this is what's going to be rendered and
68:15 - check this out so i have 404 page not
68:17 - found and then now we can navigate back
68:20 - home let me double check with a finished
68:23 - project what's happening with the rooms
68:26 - and within the rooms i do have this
68:28 - banner still with just a title so not
68:31 - subtitle as well as the link so this is
68:33 - exactly what we need to do within the
68:35 - rooms
68:36 - let's check out the rooms let's copy and
68:38 - paste it in this case we will can
68:40 - obviously rename that we are not looking
68:43 - for the banner we're i'm sorry for the
68:45 - hero we're looking for the banner
68:47 - and let's close that and again we'll
68:49 - need to do the same thing import link
68:53 - from and react router down
68:56 - from react router dom react
69:00 - router down and same old spiel here
69:04 - we're going to be looking for the banner
69:06 - hero within the banner and then banner
69:09 - and again i already said it once but i'm
69:11 - going to repeat it twice if you don't
69:13 - like
69:14 - to be this way where you have bunch of
69:18 - small components you can obviously
69:20 - combine it into one
69:22 - if this is really what you want now in
69:24 - my case i just thought that i'm going to
69:26 - show you how we would do it if we have a
69:28 - bunch of small components the same way
69:30 - you can just set up one component for
69:32 - the banner the title will be just our
69:34 - rooms
69:35 - title our rooms and we'll have no
69:38 - subtitle so since we have no default or
69:40 - no nothing then nothing will be rendered
69:43 - and then in this case where we're
69:44 - navigating back home so again link to
69:48 - and why don't we set up again forward
69:50 - slash
69:51 - and two and obviously we need to write
69:53 - something within that link
69:55 - and in that case we're gonna write our
69:58 - return
69:59 - home and we also would want to add that
70:02 - class name with a button
70:04 - so class name btn
70:06 - primary
70:08 - let's save that
70:09 - and this is going to be my rooms also so
70:11 - once we navigate to the rooms i will
70:13 - gonna have this massive banner and i can
70:15 - navigate back home
70:17 - then next one up we don't have search
70:20 - rooms that in fact will be the last
70:22 - component that we're going to be working
70:23 - on
70:24 - but we do have our home
70:26 - and within the home we have these
70:28 - services so that will be our next
70:31 - component we're gonna create excellent
70:33 - we did set up everything that we wanted
70:35 - with a hero as well as the banner
70:38 - next one up we have services that will
70:41 - be rendered only in the home page and
70:44 - within the services we're also going to
70:46 - create one component that we will reuse
70:49 - later on which will be titled for the
70:51 - sections so notice how we have services
70:54 - titled and featured rooms so on and so
70:56 - forth that way we're gonna create both
70:59 - of these components right now okay now
71:01 - let me open up the sidebar i would want
71:04 - to close everything that i have
71:05 - currently open
71:06 - i don't need it and then within the
71:08 - components let's create two of them so
71:11 - first one will be services js
71:14 - which will be a class-based component
71:17 - so let's type rcc this is our gonna be
71:20 - our component let's write uh hello from
71:24 - hello from services
71:27 - and then we can right away import the
71:29 - component that we currently don't have
71:32 - which will be title so from and then
71:35 - that title component will be in the same
71:37 - folder so within the components so let's
71:39 - just write title and we obviously don't
71:42 - need to have the extension
71:44 - then
71:44 - once we have the services why don't we
71:47 - create the actual title component
71:49 - so title.js this will be a functional
71:52 - component and we will gonna be
71:55 - expecting one prop
71:56 - the name will be title
71:59 - that will be rendered once we're
72:01 - actually working with this component the
72:04 - class name for this particular component
72:07 - that i have set up in css is section
72:10 - title within the div the title will be
72:13 - displayed within the heading 4
72:16 - like so so let's say that we're going to
72:18 - be rendering this title prop and right
72:21 - after that there will going to be a div
72:22 - which will be the underline
72:24 - let's save this title first and foremost
72:27 - we can also save the services but what i
72:31 - would like to do right now is get rid of
72:33 - everything that i had currently so hello
72:35 - from services
72:36 - and let's just say that i was going to
72:38 - be rendering my title component
72:40 - and the name i guess will be what well i
72:43 - think it just went with services so i
72:45 - can say title prop you'll be equal to
72:49 - services
72:50 - let's close out this particular
72:52 - component
72:53 - and then like i said we would want to
72:55 - render this only in home page
72:57 - so what we're going to do right now is
72:58 - we're going to head over to the home
73:00 - and then right after the link by the way
73:03 - we can close the sidebar import and then
73:06 - not the title but actually
73:08 - services that we were going to render in
73:10 - a second so from and then we're heading
73:13 - over to components
73:15 - and then within the components there
73:16 - will going to be a services component
73:19 - and right after the hero we would want
73:22 - to render services now the issue right
73:24 - now is going to be that we will try to
73:27 - render to adjacent component so
73:30 - the issue would be fixed by adding a
73:33 - react fragment so either i can write
73:35 - react fragment or not create factory
73:39 - i could just type react fragment or the
73:42 - shortcut shortcut would be
73:44 - just angle brackets as well as the
73:47 - closing angle brackets
73:49 - let's close out the
73:50 - fragment and now let's render our
73:53 - services now we don't need to pass
73:55 - anything here the services will be a
73:58 - component on its own so i'm going to
74:00 - write services
74:02 - and services should be rendered now at
74:05 - the moment we only we're going to have a
74:06 - title and by the way we do need to
74:08 - navigate back to the home page and yep
74:11 - this is going to be my title again if
74:13 - you're interested in the css
74:15 - just head over to the app css
74:18 - i believe it was actually globally let
74:20 - me check
74:21 - title
74:22 - and then sectional tile is right after
74:25 - the banner so align it in the center
74:27 - added some font size letter spacings the
74:30 - color the main color that i'm using
74:32 - as well as this underline okay that is
74:36 - as far as the app css is concerned
74:38 - and why don't we head over back to
74:40 - services and obviously there's a bunch
74:42 - of other things that we would need to
74:44 - add here in the services first and
74:46 - foremost we would want to display a
74:48 - bunch of these icons so i have four
74:50 - icons and we already have the react
74:52 - icons working
74:53 - so it will be very simply where we're
74:55 - going to say import
74:57 - now there is four icons that we're
74:59 - looking at
75:00 - so
75:01 - tail
75:02 - then fa hiking
75:05 - hiking and then fa
75:08 - shuttle man
75:10 - shuttle van and last one will be beer
75:13 - now all of them will be from and then
75:16 - again react
75:17 - icons forward slash fantastic icons
75:21 - and once we have these imports i would
75:23 - want to set up the state again so
75:25 - technically we could set this up
75:28 - globally in a context api which we're
75:30 - going to take a look at later but i just
75:33 - thought that since these are kind of
75:35 - dumb components anyway meaning we're
75:37 - just rendering the icons we might as
75:39 - well can do it locally here within the
75:40 - services
75:42 - component so let's set up state state
75:44 - will be object within the object we're
75:47 - going to set up one array
75:50 - services that will be my array and each
75:52 - and every item within this array will be
75:56 - an object now we're going to have few
75:58 - properties here the first one will be
76:00 - the icon so i'm going to go with a
76:02 - cocktail one first
76:04 - then title let's write that this would
76:07 - be free
76:09 - free cocktails
76:11 - cocktails and then i would want some
76:14 - info
76:15 - and for that i'm just going to get some
76:16 - laura mipsum and let's say i'm going to
76:19 - go with 10 words so let's say lorem 10
76:22 - and i'm just going to grab this text
76:25 - so within the icon i'm going to write
76:27 - info
76:28 - and that property will be equal to this
76:30 - text now like i said i would want four
76:32 - of them so what we would need is copy
76:35 - and paste it four times or three times
76:37 - so we would have four
76:39 - i'm just gonna add some commas so we
76:41 - don't have any issues
76:43 - and then we obviously need to change
76:45 - these values where this is not going to
76:47 - be hiking anymore
76:49 - where i could just select them three
76:50 - right now and let's just write hiking
76:54 - that will going to be my second one
76:56 - then let's select next to
76:59 - and let's write fa shuttle van
77:02 - and last one will be very simply beer
77:06 - if a beer
77:08 - okay we also need to change some texts
77:10 - here this obviously is not going to be
77:13 - um
77:14 - three cocktails we can write endless
77:17 - hiking
77:19 - like so
77:20 - then we don't need a
77:23 - free cocktails
77:24 - we would probably need free shuttle
77:28 - and that last one will be strongest beer
77:32 - strongest
77:33 - strongest beer
77:36 - let's save that and
77:38 - after that we would want to obviously
77:40 - render that so what i'm gonna do right
77:42 - now is get rid of this div we're going
77:44 - to go with the section section we're
77:46 - going to have some class name now the
77:47 - class name is important when i say sum
77:49 - of course
77:50 - services that is the class that i'm
77:52 - using for the styling
77:54 - then within the services the first one
77:57 - will be title
77:58 - that will be rendered first and after
78:01 - that we're going to have one more div
78:03 - with the class of services
78:06 - services center now within this div i
78:10 - would want to render this list there's a
78:12 - few options i can obviously do this
78:14 - above the return get my array or i can
78:17 - just do it straight in the jsx which is
78:20 - going to be this case so i'm going to
78:21 - say this dot state
78:23 - map and no you know what first of all i
78:26 - need to access that array so i'm going
78:27 - to say services since services is an
78:29 - array i can use the map method and then
78:32 - each and every item within this array
78:34 - i'm going to pass it as an argument in
78:36 - my callback function so i'm going to say
78:38 - you particular item i would want to do
78:40 - something with you and as far as
78:44 - uh the mapping is concerned we might as
78:47 - well you know what do the index because
78:49 - we're going to have to add key
78:50 - so why don't we say item which will
78:53 - refer to each and every item in the list
78:55 - as well as the index and now we would
78:57 - want to set up some kind of return where
78:59 - we had a simple array and now we would
79:02 - want to wrap this in the jsx now the way
79:05 - this is going to work i'm going to say
79:07 - all right so there will going to be
79:08 - article for each and every item in array
79:12 - now the key prop we need to use every
79:14 - time we're rendering the list and since
79:16 - the key prop needs to be unique i will
79:19 - going to use the index
79:20 - and in this case it doesn't matter
79:22 - because it's not going to be changing
79:23 - normally if it's something like a list
79:26 - that's changing let's say within the
79:28 - rooms you should never never do that but
79:30 - since again this is just a dumb
79:33 - uh components list where we just have
79:34 - the icons i think we can just cheat a
79:37 - little bit and i had index for the key
79:39 - as well as i would want to add a class
79:42 - name and the class name is service so
79:44 - this is what i added in the css now what
79:47 - will be within the article
79:49 - well first there's going to be a span
79:51 - and we're going to be accessing actually
79:53 - i item icon
79:55 - so each and every item in a list we're
79:58 - going to have the icon
79:59 - that is obviously the property that i
80:01 - have like so
80:02 - then let's copy and paste the span
80:04 - two more times but you know what i
80:06 - actually didn't want span my apologies
80:09 - we're gonna have in fact heading six uh
80:11 - this will be item title item
80:14 - title
80:16 - and then last one will be info now info
80:18 - will be in a paragraph
80:20 - so we might as well go to paragraph tags
80:23 - and then let's add
80:25 - item info idem
80:29 - info and let's save that
80:31 - and voila we're gonna have
80:34 - all the
80:35 - icons here as well as the text
80:38 - now it looks like i did mess up a little
80:40 - bit
80:41 - because at the moment for the free first
80:43 - one i don't have three cocktails
80:45 - so i have everything written here
80:48 - with a camel case but then rest of them
80:51 - i didn't so probably
80:53 - i would want to add here a little bit of
80:56 - css now let's head over back to app css
80:58 - first and foremost i'm going to show you
81:00 - where we're obviously getting it so we
81:02 - have services then services center this
81:05 - is for styling where all throughout the
81:08 - project i'm using grid and i'm using
81:11 - this grid template columns where
81:13 - basically you can set up the repeat
81:15 - function then with the repeat function
81:17 - we can have either autofit or autofill
81:20 - so with autofill this is going to make
81:22 - sure that the columns fill out the whole
81:24 - screen with autofill if there would be
81:27 - extra space it would add a empty column
81:30 - which by the way we're going to use
81:31 - later on within the
81:33 - rooms section where we are actually
81:36 - doing the filtering and then we're using
81:38 - the min max where the first value is the
81:40 - minimum of the
81:41 - actual column so minimum would be 255
81:45 - pixels and then second one is one
81:47 - fraction now this says what would be the
81:50 - max and within the grid this just means
81:53 - one
81:54 - value from the screen size so let's say
81:57 - one fraction
81:59 - would be one part of the screen okay now
82:02 - when in reality means that this is going
82:04 - to span as much as it can until it is
82:08 - actually able to fit two columns in one
82:10 - line so that would be the shortcut and
82:13 - then for letter spacing i'm obviously
82:15 - working with heading six
82:17 - so here i can just add text transform
82:20 - uppercase
82:22 - like so
82:24 - and we can save that and notice now i'm
82:26 - having everything uppercase but probably
82:28 - capitalize would be better
82:31 - capitalize and now all my texts are
82:33 - capitalized and if you want to do a
82:36 - little bit more info on one fraction
82:38 - let's say that would be one unit of the
82:41 - screen so if you have
82:43 - let's say
82:45 - the screen size so one fraction would be
82:47 - one unit so if you have one fraction one
82:49 - fraction that will be a two column
82:52 - layout so what we're saying here is that
82:55 - as i'm going to be increasing the screen
82:57 - size check this out it's going to get
82:59 - bigger bigger bigger bigger now the
83:01 - moment it will be able to place
83:03 - both of these with the minimum size of
83:06 - 255 then we'll have a two column layout
83:09 - okay since this is a react project house
83:12 - level i'm not going to focus too much on
83:13 - css but i just wanted to tell you that
83:16 - all throughout the project this is
83:18 - probably going to be
83:19 - most used and
83:22 - useful
83:23 - property as well as the value okay we
83:26 - have our services set up let's check it
83:28 - out in our recording
83:30 - i'll head over home and yep we have the
83:32 - services so next one up what do we have
83:36 - in the final project we already have the
83:38 - featured rooms so first why don't we
83:41 - talk about what we have in our data why
83:44 - the data is structured in a particular
83:46 - way and then we're going to start
83:48 - working on setting up the context
83:50 - because in fact i want to
83:52 - access the rooms data using the context
83:55 - api
83:56 - before we start working on our next
83:58 - section and even before we start working
84:01 - on setting up the context api
84:03 - let's look at the data that we got from
84:05 - the setup files and let me explain
84:08 - why i was setting up this data this way
84:11 - well first and foremost let me tell you
84:12 - why we in fact are including this data
84:15 - so my ideas was very simple later on at
84:18 - the very end we will check it out how we
84:20 - can set up everything externally within
84:23 - the contentful now
84:26 - i apologize if some of you actually
84:28 - pronounce this contentful
84:30 - i already have used to i guess saying
84:32 - contentful so if some of you are annoyed
84:35 - by that again my apologies but either
84:37 - contentful or contentful and in order to
84:41 - do that i did want to set up the data
84:43 - where we can finish the whole project
84:45 - just by using the local data because
84:47 - what i've noticed from the courses and
84:49 - from tutorials a lot of times people
84:51 - have actually issue of connecting now
84:54 - that is not the reason why because the
84:56 - service is bad because usually there's
84:58 - some kind of bug or something like that
85:00 - somebody misspells the name or something
85:02 - like that and what happens is that let's
85:04 - say if that would happen in the very
85:06 - very beginning person gets frustrated
85:09 - and just moves on to a different project
85:11 - so my idea was very simple where i did
85:13 - want to create a local data
85:15 - that we can
85:17 - use all throughout the project build the
85:19 - whole project so you shouldn't have no
85:21 - issues of accessing it using it
85:24 - i don't know modifying it and so on and
85:26 - so forth and at the very very end i'm
85:29 - going to show you how we can actually
85:31 - set up this data in the contentful and
85:34 - then get this data to our application
85:37 - and obviously we're just going to flip
85:39 - it there's going to be one place within
85:41 - the context api where we're getting our
85:44 - local data and then what we're going to
85:46 - do is we're just going to change few
85:47 - lines of code and our whole application
85:50 - is still going to work so that's the
85:51 - main idea now that leads me to a second
85:54 - point of as you're looking here like i
85:56 - said first and foremost these are just
85:58 - the images that we're using so each and
86:00 - every room obviously has bunch of
86:02 - information about it you can think of it
86:04 - as a big object that has images it has
86:08 - all kinds of information about it and
86:11 - these are all the local images so what i
86:13 - did here
86:14 - is just reference them and then i added
86:17 - to
86:18 - all those objects now each of them has
86:20 - obviously a separate image but you
86:22 - understand the idea so there's a room
86:24 - object and that roon object has
86:26 - particular image let's say image number
86:28 - one image number two and so on and so
86:30 - forth then
86:32 - as you're looking at it you might be
86:35 - a little bit questioning my sanity you
86:38 - would be like okay first of all okay i
86:40 - see that this is an array this is an
86:41 - export default that's all good
86:44 - but what is this all about
86:46 - why this dude couldn't just do id
86:48 - equals to one and then rest of it be
86:51 - name slug
86:52 - why is there a system
86:54 - then this is an object then we have an
86:56 - id then we also have the same thing with
86:58 - the fields
86:59 - and don't make me even get started on
87:02 - the images where i have the images array
87:05 - then each and every item is an object
87:07 - and then the actual image is within the
87:10 - fields within the file and within the
87:13 - url
87:14 - all right now let me explain what's
87:16 - happening first and foremost each and
87:18 - every item we're going to have these
87:20 - keys when we have the id
87:22 - or you have the name slog type
87:25 - price size and you can obviously see all
87:27 - them as you're looking at the final
87:29 - project as well as as you're looking to
87:31 - a single page where we go and look at
87:35 - information about each and every single
87:36 - page we have price size and yada yada
87:40 - now the reason why we're adding so much
87:42 - information because i would want to have
87:44 - a nicer filtering where we have more
87:46 - options to filter it trust me i could
87:48 - just set this up with one type and that
87:50 - would be fine but i just find it a
87:52 - little bit more interesting where we
87:54 - have multiple things that we can
87:56 - actually sort it through
87:58 - now let me tell you the most important
88:00 - thing
88:01 - why
88:02 - there is a specific structure to this
88:04 - well it's very simple like i said at the
88:06 - very end i would want to flip it
88:09 - where we are using all the time the
88:11 - local data and at the very end we're
88:13 - going to connect to the content full and
88:15 - we're going to use the external data now
88:17 - what i don't want to do is set up the
88:19 - whole application and then be like okay
88:21 - so now we're going to rebuild everything
88:23 - just because the data is coming back
88:24 - like this so the short answer is that
88:27 - when we're all going to be accessing our
88:29 - data from contentful
88:32 - this is going to be their structure now
88:34 - obviously they were going to have more
88:36 - information
88:37 - so
88:38 - the structure will going to be the same
88:39 - but as you're going to be looking at a
88:41 - systems property there's going to be a
88:43 - bunch of things so the only thing that
88:45 - we're looking for is the id but there's
88:47 - going to be other things if you want you
88:49 - can obviously access them
88:51 - but that way when we are actually
88:53 - accessing the information from the
88:55 - content pool nothing will gonna break
88:58 - now understand in the beginning you
88:59 - would be like okay so we could have set
89:01 - this up much more easier
89:02 - but i just find it more
89:06 - better if we do it this way
89:08 - where we have our original setup already
89:11 - like we were going to be getting the
89:12 - information eventually
89:14 - from the external source and yes of
89:17 - course we are going to have to do some
89:19 - kind of formatting where as we're
89:22 - working
89:23 - with our application as we're accessing
89:25 - this data obviously this is not going to
89:27 - make sense so within the context api
89:30 - we're all going to set up the function
89:32 - that we're going to format where
89:34 - basically we're going to get one object
89:35 - just with these properties id name slug
89:39 - breakfast blah blah blah and then as
89:42 - well as extras and images will going to
89:44 - be just a simple array with a images
89:47 - property here and we're going to be able
89:49 - to access them because it would be the
89:51 - pain each and every time as you're
89:53 - working with an application if let's say
89:55 - you want to access this image this is
89:56 - not going to make sense but you would
89:58 - have to do this regardless
90:00 - so even though you would be getting this
90:02 - externally you would still have to do
90:03 - some kind of formatting so i think it's
90:05 - much more better if my original data is
90:09 - going to be exact same structure as the
90:11 - data we're going to be letting on and
90:13 - right from the scratch we were going to
90:15 - set up a function that we're going to
90:17 - format
90:19 - our code are basically our data and then
90:22 - we're just going to get back the data
90:24 - that we would normally work with once we
90:26 - talked about the data why it was
90:28 - structured why it was created in the
90:30 - first place now let's talk about how we
90:33 - were going to be distributing our data
90:35 - as we're looking at our application it
90:38 - would be very easy to set this up
90:40 - locally for each and every component so
90:43 - let's imagine we have these featured
90:45 - rooms and by the way i can tell you
90:47 - right away that the way i'm accessing
90:49 - the feature rooms is that on each and
90:51 - every object
90:52 - we will going to add the featured
90:54 - property where for most of them this is
90:57 - going to be false and the rooms that i
90:59 - would like to show will be equal to true
91:02 - and we could set this up like i said
91:04 - where we're always going to have this
91:05 - featured rooms component
91:07 - then we just access the array data that
91:10 - we had separately filter it out and show
91:12 - it however what i wanted to do is create
91:16 - one place
91:17 - where we're going to be storing all the
91:19 - information our data that we will
91:21 - eventually we're going to get from
91:23 - contentful and currently we're going to
91:25 - get from our data file and then we'll
91:27 - just going to take a look at how we can
91:29 - distribute it around our application and
91:32 - you could definitely do it with the
91:34 - redux but what we're going to do is
91:36 - we're going to check it out the react
91:38 - context api and again there's many
91:41 - resources you can find but i just find
91:43 - this one to be most straightforward
91:45 - obviously we're going to do the coding
91:47 - but just to give you an idea
91:48 - we will first going to create a
91:51 - context object
91:52 - now once we create a context object then
91:55 - we have an option of passing some kind
91:57 - of default value or in our case we're
91:59 - just going to say that we don't want
92:00 - anything
92:01 - then we have access to two components
92:04 - one of them will going to be provider
92:07 - notice provider react component
92:09 - that allows
92:11 - consuming
92:12 - to subscribe to the context changes
92:15 - meaning this component will gonna allow
92:18 - the access to our context
92:21 - all throughout our application
92:22 - our react component three and then we
92:25 - have a consumer where the consumer will
92:29 - be in fact subscribing for that now
92:31 - obviously we're going to get to that
92:33 - one thing i would want to point out that
92:35 - this value property or prop is very
92:37 - important because this is where we're
92:39 - going to be placing pretty much all our
92:40 - application we are going to do this in a
92:43 - few steps where first of all we're just
92:45 - going to set up the context
92:47 - then we're going to start accessing the
92:48 - data from our array and last we're going
92:51 - to do that formatting like i was talking
92:53 - to you okay now first and foremost let's
92:55 - do a simple access and by the way i will
92:58 - gonna be returning here because we will
93:01 - look at few ways how we can access it
93:03 - because as we're working with the other
93:05 - component with a consumer component that
93:08 - also comes with a context object we have
93:11 - multiple options we can use the
93:15 - actual context where we're using context
93:17 - type we also can use the render tabs
93:20 - that is also an option notice this would
93:22 - also want to be one of the syntaxes we
93:25 - also have an option of actually using
93:27 - higher order components
93:29 - also something we're going to look at as
93:31 - well as using one of the use hooks or
93:35 - name of the hook would be used context
93:37 - but
93:37 - that basically be one of the hooks okay
93:40 - all right now let's start working on our
93:44 - setup first and foremost i would want to
93:46 - create a context however in this case i
93:48 - will not to place it within the pages or
93:51 - the images or components in fact i'll do
93:54 - it directly in the source so i'm going
93:56 - to say new file
93:57 - and we're going to call this context js
94:01 - now you can obviously name it with
94:02 - capital letter doesn't really matter
94:05 - next one up we would want to create a
94:08 - class-based component now at the moment
94:11 - it will not get a matter but i'm going
94:13 - to show you in a second why
94:15 - actually i'm doing this the name
94:16 - currently is context and that's not what
94:18 - i would want so instead i'm just going
94:20 - to say that this will be called the room
94:23 - provider and now i would want to set up
94:26 - my context api and the way i would do
94:29 - that i would need to come up with some
94:30 - kind of name so const and i'm going to
94:33 - call this a room
94:35 - context and this will be equal to
94:38 - react and then we have that method
94:40 - available where the method would be
94:42 - create context and i'm not going to pass
94:45 - any kind of default value so now i do
94:47 - have my context and if you remember
94:50 - now i had access to two components so
94:53 - the first one was a provider
94:57 - and the second one was a consumer
95:00 - so the provider was
95:02 - in fact responsible
95:04 - for allowing all the components in the
95:07 - component tree to access it now
95:09 - obviously we do need to wrap that
95:11 - component tree with that room context
95:14 - provider and then the consumer was used
95:17 - to access that information
95:19 - now i could technically do something
95:21 - like this where i say room
95:24 - context i do need to add obviously my
95:27 - value so context and by the way let me
95:30 - spell this correctly context i'm going
95:32 - to call this provider and then i need to
95:34 - use the value however
95:36 - the reason why i created the class
95:39 - because what we were going to do is we
95:40 - were going to set up the state here and
95:43 - then we're going to place all our
95:44 - information in state create methods
95:47 - that actually operate with these state
95:50 - values and then we're going to pass it
95:52 - down to the value because this will give
95:55 - us way more flexibility now the kicker
95:58 - here is that not only we can pass like
96:00 - let's say a simple string of hello in
96:03 - fact we can pass the whole object so
96:06 - that is the case where we're going to be
96:08 - working with a state so how this is
96:10 - going to look like i do have my room
96:12 - provider
96:13 - so instead of wrapping my whole
96:15 - component tree with the room context
96:17 - provider and then value i was going to
96:20 - set it up here within
96:22 - this room provider so within that
96:25 - specific class so
96:27 - let's slide that we're going to be
96:28 - looking for the context
96:30 - then the name is provider and at the
96:32 - moment i'm just going to set this equal
96:34 - to a simple hello okay now nothing fancy
96:37 - here now let me make sure that i do
96:40 - close it so i have room context then i
96:42 - need to go with a provider but i
96:45 - definitely
96:46 - 100 sure need to make sure that children
96:50 - are being rendered and this actually
96:52 - made me
96:53 - mess a bit so let me close it properly
96:56 - and then once i have this room context
96:59 - provider that i actually accessing from
97:02 - my room contest but since i'm going to
97:04 - be wrapping
97:06 - my whole component tree i do need to
97:09 - make sure that i'm accessing the
97:10 - children now the children in the
97:12 - class-based component are this dot
97:15 - perhaps and the name
97:17 - is self-explanatory children so this
97:20 - would be the provider
97:22 - then we also do need to create a
97:24 - consumer because we would want to access
97:27 - the data now the most simplest way would
97:29 - be const room
97:32 - consumer again name however you would
97:34 - like
97:35 - consumer and then we need to use the
97:38 - room
97:39 - obviously context since that is the
97:41 - context we created and then set this
97:43 - equal to a consumer now last but not
97:46 - least i would want to export them and at
97:48 - the moment by default this is exporting
97:50 - room provider and that's not what i
97:52 - would want so what i'm going to say is
97:54 - that they're just going to be a simple
97:55 - class and nanowires is going to export
97:58 - it like so where we have the export
98:01 - then i'm going to say that i would want
98:02 - to export room
98:04 - provider now that is obviously the class
98:07 - that we just created
98:09 - second i'm going to export room
98:12 - consumer
98:14 - and last but not least
98:16 - there's going to be a case where we
98:17 - would want to use the whole context so
98:20 - that's why we're going to actually
98:22 - export as well room context and
98:24 - obviously we're going to go one by one
98:27 - where some cases we would want to access
98:29 - room context in some cases we would want
98:31 - to access room consumer now once we have
98:34 - exported all this
98:36 - then what we can do
98:37 - well i could technically go back to
98:39 - app.js and just wrap my whole component
98:42 - tree but since i already have the react
98:45 - router done
98:47 - it would make more sense if we're gonna
98:50 - head over back to the index and in fact
98:52 - wrap everything the router the app
98:56 - in my provider okay now in this case i
98:59 - do need to say import then i'm going to
99:02 - be looking for the name export since
99:03 - obviously we named them and the name was
99:06 - the room provider
99:09 - and then this will be from the context
99:10 - which is in the same
99:12 - actually directory so let's access the
99:15 - context and now let's wrap it let's say
99:18 - room provider
99:20 - will going to wrap around the router as
99:23 - well as the app so i can select these
99:25 - suckers here
99:27 - get them out and copy and paste it and
99:29 - now i do have my provider at the moment
99:32 - nothing magical happened i understand
99:34 - this might be a bit of a bummer where
99:36 - you're like okay this i mean what is
99:38 - happening here we did all this work and
99:41 - nothing magically happened yes that is
99:43 - true but just to give you an idea what
99:45 - would you normally do so let's say that
99:47 - you have multiple
99:49 - components that would want to use some
99:51 - kind of data well eventually you would
99:54 - want to lift your state now what do i
99:56 - mean by that well let's say that we have
99:58 - a route with the rooms then i also have
100:01 - the home and then as you're noticing my
100:04 - services are featured rooms that we're
100:07 - going to create later on
100:08 - will be within the home so what you
100:10 - normally do you would set up the state
100:12 - somewhere here and then you start
100:14 - passing down you would be like okay so
100:16 - i'm going to pass these functions as
100:18 - well as the
100:19 - properties that i have on the state down
100:21 - to rooms component or the home component
100:24 - and what's happening that as you're
100:25 - doing that
100:26 - you're passing you're doing basically a
100:28 - prop drilling where you're passing those
100:31 - props down unnecessarily because the
100:35 - component that's going to be using is
100:36 - just sitting pretty much wrapped in
100:39 - three other components but you do need
100:41 - to pass it through so if i start with an
100:43 - app i'm going to have to pass the home
100:44 - home is going to pass down to featured
100:48 - rooms and then so on and so forth so
100:50 - what context allows us to do
100:53 - is avoid that step
100:55 - where even though
100:57 - the section
100:58 - that i'm going to be using
101:00 - my data
101:02 - will be in fact within home
101:04 - i don't need to pass anything within a
101:06 - home
101:06 - so we will gonna avoid that step now
101:09 - what do i mean by that so let's say we
101:11 - have the home and like i said we will
101:13 - have to create a featured rooms section
101:16 - we're all going to be looking for at a
101:18 - featured rooms then normally what would
101:21 - you well you would pass it to a home
101:23 - then from the home you're going to find
101:25 - wherever yours component and then pass
101:27 - it down but i'm going to show you in a
101:29 - second how we can actually omit that
101:32 - step so within the components let's
101:34 - create featured
101:36 - rooms and at the moment we're just going
101:37 - to be rendering obviously that one silly
101:39 - thing that we had
101:41 - remember when we passed basically what
101:43 - within the context we had a simple hello
101:46 - so first we're going to access that and
101:49 - then of course later on we're going to
101:50 - set up everything properly where we will
101:54 - going to access
101:55 - whatever we have currently in the state
101:58 - okay
101:58 - now let's head over to the featured
102:00 - rooms this will be a functional
102:03 - component or i'm sorry no class based
102:05 - component so let's say and first of all
102:07 - i do need to name this properly
102:09 - so
102:10 - let's rename
102:12 - js
102:14 - that's the first thing that i would want
102:16 - then class-based component
102:18 - voila here you come
102:20 - and then hello from
102:23 - featured
102:25 - rooms
102:26 - right let's save that then what i would
102:29 - like to do is head over to the home
102:31 - imported so right after services
102:34 - import
102:36 - featured
102:38 - rooms and let's say that this is housely
102:40 - in the same or no it's not in the same
102:43 - folder it's actually in components
102:44 - folder then within the components folder
102:47 - we had featured rooms folder
102:49 - let's save this and then right after
102:52 - services let's check it out what do we
102:54 - have so we'll have a featured rooms
102:58 - and we're rendering them now at the
103:00 - moment again i just have one silly hello
103:02 - from featured rooms again nothing
103:04 - magical happened yet but let me show you
103:07 - where the real magic comes in where
103:10 - again we have multiple ways how we can
103:13 - access it whether that's going to be
103:15 - render props whether that's going to be
103:16 - hooks
103:17 - but the first one we're going to look at
103:20 - is where we set up the static
103:23 - name here is important where we have
103:25 - context type and we set this equal to
103:28 - the context that we just created
103:31 - now how this is going to work well this
103:34 - is going to work where we do have the
103:36 - name of course for the context that we
103:38 - created and we're going to set the
103:40 - sequel to now there is one
103:43 - easy mess up that i did
103:45 - where i would probably want to actually
103:48 - create this like this where this is
103:50 - going to be my value and now i'm going
103:52 - to have my hello
103:53 - then within the featured rooms like i
103:56 - said first and foremost we would want to
103:58 - import this we would want to import my
104:00 - whole context not just the consumer but
104:03 - the room context
104:05 - the way we're going to do that import
104:07 - then we're going to be looking for room
104:10 - context from
104:12 - and now we're going to go up the tree
104:14 - we're not the tree actually directory
104:17 - then we're going to be looking for
104:18 - components or no not components sorry
104:21 - context is actually in the same one or
104:25 - where it is let's figure out so we have
104:27 - context right here i don't know i'm
104:29 - staring at it but for some reason i
104:31 - cannot see it and then like i said we
104:33 - would need to follow these steps
104:35 - where first and foremost we're going to
104:37 - set up the static context type and this
104:40 - will be equal to our context
104:42 - all right now
104:44 - let's write that let's say static
104:47 - then proper naming was what context type
104:51 - context type is equal and now we're
104:55 - setting this equal to a room context so
104:57 - that's the first step
104:59 - now the next step is i would want to
105:01 - access this value so in this case i'm
105:03 - just going to say const
105:06 - and we're going to set this equal to a
105:07 - simple value now if i want to access
105:10 - this i need to use this dot context
105:14 - so this dot context and why don't we
105:17 - right away do a console log so i'm just
105:20 - going to say first of all
105:22 - value
105:23 - and why don't we do also here
105:26 - where we're
105:28 - showing what we have so i can just add a
105:30 - curly braces where i want to access the
105:33 - javascript and the moment i save it
105:36 - check this out now i know that it's hard
105:38 - to see but here in the bottom i do have
105:41 - my hello and in fact if i'm going to
105:43 - head over to my project my recording and
105:46 - if we're going to do inspect you're also
105:48 - going to notice in the console where i
105:50 - have the hello
105:51 - now this is magic because we
105:55 - actually went around
105:57 - the home page we went around whatever
106:00 - other component would be there so we
106:02 - didn't have to set up anything in the
106:04 - app.js pass it down and then in fact
106:06 - access it we directly access it using
106:10 - the context api
106:12 - now if i'm going to change that
106:15 - and if i'm going to say i don't know
106:16 - hello world
106:18 - now check this out
106:20 - now what i'm going to have here is hello
106:22 - world so whatever values we're going to
106:24 - be placing there we're going to be
106:26 - accessing of course of course the string
106:29 - is the most basic one that we can use
106:32 - like i said why don't we check it out
106:33 - would we have an object because let's
106:35 - say that i'm going to have like some i
106:37 - don't know
106:39 - greeting
106:40 - then within the greeting i'm going to
106:42 - say hello
106:43 - and let's also use name
106:45 - and then we're going to set up john now
106:47 - in this case i don't want to pass here
106:49 - the string instead i want to pass the
106:52 - object and then we have a few options we
106:54 - could access properties one by one
106:57 - so i could set up in my new object let's
107:00 - say a property by the name of greeting
107:02 - and the value is going to be coming from
107:05 - my state object so let's write this dot
107:08 - state and whatever property name so
107:11 - again since i'm looking for a greeting i
107:12 - could just type here greeting or i could
107:15 - use a javascript object spread operator
107:18 - where instead what i'm going to do is
107:21 - i'm going to select
107:22 - object whose properties i would like to
107:24 - copy so in my case that is going to be
107:26 - state
107:27 - and then i'm just going to type here dot
107:31 - this dot and state so in this case we
107:34 - are going to copy and paste all the
107:36 - properties that we have within the state
107:39 - object now currently we have two of them
107:41 - but of course i could add 10 000 of them
107:44 - and all of them are going to be copied
107:46 - now at the moment obviously there's
107:48 - going to be big fat error now the reason
107:50 - for that error is because within the
107:53 - featured rooms i'm right away saying
107:55 - okay so get me the whole value now that
107:57 - is not what i want since right now i
107:59 - have the object there
108:00 - so let me delete that
108:02 - let me re-render
108:04 - and check this out so what we have here
108:07 - is
108:07 - greeting hello and name of john that way
108:12 - instead of just working with the whole
108:13 - value i could say that instead of
108:16 - creating some kind of variable we can
108:18 - right away do a destructuring from the
108:21 - object that we're getting back again we
108:24 - got our own context
108:25 - it's important that you pass here not
108:27 - the consumer but
108:28 - your whole context
108:30 - set the equal to the context type and
108:32 - then you're going to have access to that
108:34 - context using this dot context and then
108:37 - like i said we would want to destructure
108:39 - what i'm going to say name
108:41 - and greeting
108:43 - and we can use maybe here name name john
108:46 - from
108:48 - uh hello and by the way we can probably
108:50 - change this hello as well
108:52 - let's say greeting
108:54 - now let's check it out and what do you
108:56 - see here well i have hello john
108:58 - from featured rooms so hopefully you
109:00 - understand the basics of the context api
109:04 - where most of the work that we're going
109:06 - to do be in fact within this context.js
109:09 - we're starting from next video we will
109:11 - going to get our rooms and we're gonna
109:14 - set up them in a state and then we're
109:16 - gonna pass them exactly the same way
109:19 - down
109:19 - and our whole work is gonna start where
109:21 - we're gonna create a bunch of functions
109:23 - here that we're gonna work with state
109:25 - and so on and so forth but these would
109:27 - be the bare bones of how we can start
109:29 - working with a context api that creates
109:33 - provider and consumer we wrap the
109:36 - provider
109:38 - within our component tree or component
109:41 - tree gets wrapped
109:42 - with a provider and then we have
109:44 - multiple ways how we can access it so we
109:47 - looked at the way
109:48 - how we do it within the class-based
109:50 - component now this is important you're
109:52 - not going to be able to do it in a
109:54 - functional component this is the reason
109:56 - why we're gonna check it out other
109:57 - options as well but this probably would
110:00 - be the most simplest one in class based
110:02 - because the render props is a little bit
110:05 - i mean just takes a little bit of
110:07 - wrapping your mind around it but static
110:10 - context type get the context that you
110:12 - have and then you have access to
110:14 - whatever you have currently in your
110:16 - context
110:17 - once we understand the general idea
110:19 - behind the context api why don't we
110:22 - tailor it to our application
110:24 - so we're gonna do our setup i will gonna
110:26 - get rid of this greeting
110:28 - as well as name because at the moment
110:30 - we're gonna do a later setup anyway and
110:33 - i'm just gonna get rid of it just
110:35 - remember that we were gonna have to use
110:37 - this that context in order to access it
110:39 - then we're gonna head over back to a
110:41 - context.js and as a side note if you are
110:45 - really just passing one string you could
110:48 - do something like this however it
110:50 - doesn't really make sense that if you're
110:51 - going with all this setup just to pass
110:54 - down one string okay so in most cases
110:57 - this is exactly what you're going to see
110:59 - but then remember that if you're passing
111:01 - here the object you do need to have a
111:04 - two sets of curly braces otherwise this
111:06 - is not going to work
111:07 - that's the reason why it's probably more
111:09 - useful to place that string within the
111:12 - curly braces so then at least you
111:13 - understand
111:14 - how would be the general setup all right
111:17 - now i also want to add different values
111:20 - in state
111:21 - but before i do that why don't we import
111:24 - all the items that we have in the data
111:26 - and like i said i do have it as a
111:28 - default export so if we're going to
111:30 - check out the data
111:32 - all the way on top you'll notice that
111:35 - export default and that means that we
111:37 - could name this however we would like
111:40 - but i will gonna name these items again
111:42 - the reason why i'm naming these items
111:44 - when we're gonna be accessing the
111:47 - contentful it will going to be
111:49 - placed on the property by the name of
111:52 - items that's the only reason so let's do
111:55 - from
111:56 - now this will be exactly in the same
111:58 - folder so we're just accessing the data
112:01 - and then before we do anything i would
112:03 - want to change some values within the
112:04 - state so there's going to be rooms
112:06 - property which will stall all our
112:09 - information about our rooms then we're
112:12 - going to have sorted rooms now the
112:14 - reason for that is
112:16 - when we're going to be filtering our
112:19 - rooms
112:20 - this is the array that will going to be
112:22 - rendered but then if we would want to
112:24 - get let's say information about all the
112:26 - rooms that's when we're going to be
112:28 - rendering our original rooms array okay
112:32 - now after that we have featured rooms
112:35 - featured rooms will be in home these
112:37 - three rooms and at the moment again this
112:40 - will be set to featured
112:42 - rooms and then we're going to set up
112:44 - here a empty array now last one here
112:47 - we're going to be loading and by the way
112:50 - when we start setting up the filtering
112:53 - there are going to be more properties in
112:54 - a state but i just don't want to
112:56 - overwhelm you so why don't we start with
112:57 - the first four which allow us to
113:00 - complete a big part of our application
113:02 - and then once we get to filtering and
113:04 - sorting that's we're going to set up
113:06 - more properties here so let's set
113:08 - uploading to true
113:10 - now as we're getting locally data as
113:14 - we're getting this data locally of
113:16 - course this is an overkill because we'll
113:18 - have instant access to our data but like
113:22 - i said our general goal is to set up
113:25 - everything where we were going to be
113:27 - getting this using
113:29 - the external data so eventually at the
113:31 - very end we're going to have the
113:33 - function let's call this get data and
113:36 - we're going to run that function when
113:38 - the component will get amount and what
113:41 - we are going to do right now is
113:42 - obviously we're just going to access the
113:44 - these items directly from our data but
113:47 - there's a reason why i'm not setting up
113:48 - directly in a state so again i want to
113:52 - show you how we would do it later on
113:54 - anyway when we're accessing the external
113:57 - data and currently we're going to do it
113:59 - with our local data however what i would
114:02 - like to do is once the component mounts
114:05 - then we're going to make sure that
114:07 - loading is in fact now at the moment
114:10 - you're not able to see that but once you
114:12 - refresh the page again because this is
114:14 - getting instant access
114:16 - once actually you would have let's say
114:19 - some kind of slower internet connection
114:21 - you would be able to see the gif that
114:23 - we're going to be placing later on okay
114:25 - now we do have this get data that we for
114:28 - sure are not going to do anything right
114:29 - now
114:30 - but i would want to set up the lifecycle
114:33 - method so when this component mounts so
114:36 - component didn't mount
114:38 - then i would want to update these values
114:40 - in a state and that's when we're going
114:42 - to update this whether this is going to
114:44 - be true or false so first and foremost
114:46 - why don't we set up component did mount
114:49 - then within the component and mount
114:52 - there is going to be a let
114:54 - rooms so that will be my variable and
114:56 - i'm going to set this equal to this dot
114:58 - and function that we haven't created now
115:00 - this function is again format data and
115:04 - then we're going to set this equal to a
115:07 - items and again
115:09 - once we're going to get external data i
115:11 - know i keep on repeating this book but
115:13 - this will going to make much more sense
115:15 - later on as we're getting this external
115:17 - data
115:18 - currently this
115:19 - function
115:20 - will just gonna work as a formatter so
115:24 - we're gonna be getting all the items
115:25 - here so we're passing them down into
115:27 - this function and what i would like to
115:29 - do is eventually just to get a normal
115:32 - object where my data structure is not
115:34 - like this okay because this is going to
115:36 - be much more easier for us to work with
115:38 - so
115:39 - obviously you understand that next thing
115:42 - we would need to set up this function so
115:44 - i'm going to say format data now this
115:46 - format data as a parameter is just going
115:49 - to get some kind of i mean you can write
115:52 - array but i'm just going to call this
115:53 - items but
115:54 - of course understand that this is the
115:56 - argument where we're actually passing
115:58 - our data that we got from the items and
116:00 - this is just the parameter that i'm
116:02 - writing here okay
116:04 - now what i'm saying here is let
116:06 - and first and foremost i would want to
116:09 - loop through my items that i have loop
116:12 - through the data that i got here so
116:14 - first and foremost i'm going to say temp
116:16 - items
116:17 - temp items this will be equal to
116:20 - items map so i'm iterating over my array
116:24 - and each and every item here i'm going
116:27 - to call this that this will going to be
116:29 - my item now there's going to be a quite
116:31 - a bit of destructuring so for sure i'm
116:34 - going to create a curly braces and the
116:36 - return is going to be here at the very
116:38 - bottom now first and foremost i would
116:40 - want to access this id
116:42 - so each and every item we're going to
116:44 - have the system property and then this
116:46 - id property on it okay now the way i can
116:49 - do that i can just say okay let id
116:51 - is equal to item so each and every
116:54 - object we're gonna have systems property
116:56 - will gonna have the id property in there
116:59 - now that's first one
117:00 - then i would want to get those images
117:02 - because like i said accessing these
117:04 - images this way we have images array and
117:06 - then one object second object third
117:08 - object
117:09 - doesn't really make sense so you can say
117:12 - let images is equal
117:14 - now item will gonna have what
117:17 - well the image is in fact sitting within
117:19 - these fields so we have the fields then
117:23 - within the fields we have the images so
117:26 - this is the reason why we type fields
117:27 - then we type also images and then i need
117:30 - to map over those images because again
117:32 - each and every item there was in fact an
117:35 - object so
117:36 - what i can say is each and every item
117:40 - you will gonna have what well i could
117:42 - just return what i had in there right so
117:45 - each and every item has fields file url
117:48 - but what i'm interested is only this url
117:50 - so what i can say as i'm
117:53 - mapping or looping
117:54 - over this images array just return me
117:58 - image
118:00 - fields
118:02 - file
118:03 - and url and that's it now our array in
118:06 - fact which is going to be simple array
118:09 - with all these values
118:11 - then i would want to create a new room
118:14 - object so i'm going to say room this is
118:16 - just going to be simple object however
118:18 - to access all the properties that are
118:20 - within each and every item fields
118:22 - property i'm going to use
118:24 - dot dot and item fields and again if you
118:29 - remember this is javascript object
118:31 - spread operator where within each and
118:34 - every item we do have the fields
118:36 - property now the fields property is
118:39 - already object itself with more
118:41 - properties so what i'm doing here is i
118:43 - am creating a new object and i'm just
118:46 - going to copy the
118:48 - properties from the fields object and
118:51 - then after that once we have copied all
118:53 - the properties we have two options if
118:56 - that actual property is already within
118:59 - the object if we're going to come up
119:01 - with the new value we're going to
119:03 - override that property now if that
119:05 - property is not within that object well
119:08 - we're just going to add that property to
119:10 - our new object so in our case we would
119:14 - like to add two properties one by the
119:16 - name of the id and the other one by the
119:19 - name of images now what happens though
119:21 - images is already there within the
119:24 - fields remember images was already there
119:27 - now the problem was that images had this
119:30 - nested structure however in our case we
119:32 - already have flattened out that
119:34 - structure so what i could do here is i'm
119:36 - going to say there's going to be an
119:37 - images property now since that property
119:40 - is already there essentially we are
119:42 - overriding this and i could just say
119:44 - images like so where i set this equal to
119:47 - my variable but please remember that of
119:49 - course we're using es6
119:51 - so i could just write here images that's
119:54 - it that would be exactly the same like
119:56 - we just wrote previously and then after
119:58 - that like i said i would like to add the
120:00 - id property now since the id property is
120:03 - not within the fields as you notice
120:05 - scroll up and down you're not going to
120:07 - notice this id property because it is
120:09 - sitting within the systems
120:11 - that's when we are creating a new
120:13 - property in our room object so this is
120:17 - our room and what i would like to do
120:19 - right now
120:20 - is just return
120:22 - now room and what happens well i'm
120:25 - getting back this temp items correct so
120:28 - i'm looping over my array i did all this
120:30 - destructuring and reformatting now the
120:33 - last thing from this function i would
120:36 - want to return
120:37 - temp
120:38 - items and then next one up since we are
120:41 - obviously calling this function so i'm
120:43 - saying this dot format data then i'm
120:46 - passing the array that we got from the
120:48 - local data and i would want first of all
120:51 - console.log just to show you what is
120:53 - happening with a rooms okay and then
120:56 - after that i'm gonna kind of give you a
120:59 - brief idea of what actually happens okay
121:03 - later on when we're gonna get this data
121:06 - so i'm all gonna head over to a
121:09 - recording and now check this out i have
121:11 - an object which i'm constantly logging
121:13 - with 13 items and now notice what we're
121:16 - actually rendering now this
121:18 - makes much more sense right so this is
121:20 - more cleaner where each and every item
121:23 - is just an object now it has the
121:25 - breakfast capacity
121:27 - all these values and check it out the
121:29 - images again this is not a nested object
121:31 - anymore we access everything here
121:35 - that we wanted which in fact is just
121:37 - that url and just to give you again i'm
121:40 - going to repeat this probably already
121:42 - for the fifth time but
121:44 - we were going to have this get data
121:47 - now once we're going to get
121:48 - get data or once we're going to run get
121:50 - data we're going to get our data
121:53 - then we're going to run this this format
121:55 - data
121:56 - in the actual first function of by the
121:59 - name of git data and then we're just
122:01 - going to run this this dot
122:03 - get data again this will be at the very
122:05 - very end but i'm just explaining why
122:07 - we're going through these actually steps
122:10 - because what i would want to do is run
122:12 - this one where in fact it mounts again
122:14 - it would be much more easier to for me
122:16 - to say okay items pass in the rooms but
122:19 - we would have to do all this extra work
122:21 - at the end of the day now the only
122:23 - difference is where we're calling this
122:24 - format data and the way this is going to
122:26 - work we're going to say okay so we got
122:28 - the rooms awesome
122:29 - and now i want to work a little bit more
122:32 - with the information that i have because
122:34 - notice not only i'm looking for the
122:36 - rooms i would want featured rooms as
122:38 - well as i would want to probably set
122:40 - this loading to false
122:41 - because what i'm going to do is later on
122:43 - we're going to pass this value down and
122:45 - the component is going to check
122:47 - are we still loading the information if
122:49 - we are loading then i'm going to show
122:50 - the spinner
122:51 - if the information is there then i'm
122:53 - going to display the items okay
122:55 - now the way this is going to work first
122:56 - and foremost let's get to featured rooms
122:58 - and now we're already working with our
123:00 - normal object and when i say normal of
123:02 - course what i'm saying is this is just
123:04 - going to be simply to access so that way
123:06 - i can say featured
123:08 - rooms is equal to rooms since obviously
123:11 - we have access to it and then filter it
123:14 - out whatever you have for the featured
123:16 - rooms so like i said there's going to be
123:19 - property with the value featured and
123:21 - we're just checking whether it's true or
123:22 - false so i'm going to say each and every
123:24 - room
123:25 - if you have
123:26 - room featured if your property is in
123:30 - fact
123:31 - equal to true
123:33 - you'll be added to this featured rooms
123:36 - array
123:37 - and then we also might as well just do
123:40 - the this dot set state so let's write
123:42 - this dot
123:44 - set state
123:45 - and now we would want to change the
123:47 - values and the values we want to change
123:49 - is for the rooms
123:51 - is also for the sorter rooms feature
123:54 - rooms and loading
123:56 - now
123:57 - at the moment at the very beginning
123:59 - sorted rooms
124:01 - will have all the information the same
124:03 - like you would normally get the data so
124:06 - since we would want to display initially
124:08 - all the rooms they were going to be
124:10 - exactly the same as we start filtering
124:12 - you'll see why we're using the rooms
124:15 - but what i would like to do right now is
124:16 - this that's the state again we can use
124:18 - the s6 where i don't need to say rooms
124:21 - is equal to rooms since i obviously
124:23 - named it exactly the same
124:25 - then i'm looking for featured rooms
124:27 - which also is named the same
124:29 - then the sorted ones is not exactly the
124:31 - same name so i do need to write
124:33 - that sorted rooms will be equal to my
124:36 - rooms that i just got and last but not
124:38 - least we'll be loading
124:40 - off a false again
124:43 - not going to make much sense currently
124:45 - this loading falls because we're getting
124:48 - our data locally but once we're going to
124:50 - be setting up
124:51 - getting the external data it does matter
124:54 - that we in fact use this loading flag
124:57 - where if the data is still loading we're
124:59 - not trying to render something okay that
125:02 - would be our initial setup and now check
125:05 - this out we do have all this access in
125:07 - the state so just to show you and we're
125:10 - going to do it in the next video the
125:12 - actual
125:12 - proper
125:14 - rendering but at the moment just to show
125:16 - you that we in fact have the featured
125:18 - rooms i can just say that i would want
125:20 - to access this so i can just call this
125:22 - as a variable const and i'm going to
125:25 - call this featured room so i'm accessing
125:27 - that value from the featured rooms but
125:29 - i'm right away going to give it an alias
125:32 - or i'm just going to rename it i'm going
125:33 - to say that this will be equal to rooms
125:36 - and i'm getting this from where where
125:38 - i'm getting this from
125:39 - context and now let's check it out
125:42 - where if i'm going to do console log
125:45 - let's cancel log and whether we all
125:47 - gonna get rooms and let's see what we're
125:50 - gonna have and whoa i have an empty
125:52 - array okay
125:54 - let's go back to context and figure out
125:56 - what went wrong
125:57 - let's scroll up and i can see that
126:00 - notice here i didn't use featured
126:04 - should be featured not feature
126:06 - now let's save that again and voila we
126:09 - have our array with three featured rooms
126:12 - so now we can use this information in
126:14 - fact to display them before we start
126:17 - working on a logic how we're gonna be
126:19 - rendering all the featured rooms we will
126:21 - gonna use two components one by the name
126:24 - of loading and the second one by the
126:27 - name of room and as a side note like i
126:30 - said both of these components we will
126:32 - gonna reuse in different parts of the
126:35 - application as well let's say for
126:37 - example room
126:38 - is gonna be rendered also when we are
126:40 - rendering all the rooms not just for the
126:42 - featured one so what's going to happen
126:44 - right now is we're just going to set up
126:46 - the bare bones for rooms application
126:49 - where there's just going to be one text
126:51 - then i'm going to render the
126:53 - rooms that are in the feature rooms and
126:55 - then we're going to work in the actual
126:57 - rooms component
126:58 - all together okay now for the moment i
127:01 - just want to create the bare bones for
127:03 - uh rooms component and set up the
127:05 - loading component first and foremost
127:07 - let's call this loading
127:10 - js
127:11 - and for that this will be a just a basic
127:14 - functional component
127:16 - rfc
127:17 - than what we would want to pass nothing
127:20 - as a prop but we would want to have a
127:23 - div
127:24 - by the name and we're going to give this
127:26 - a loading that is something that i
127:29 - already set up within my css
127:31 - we might as well have a heading 4.
127:34 - let's write rooms data
127:37 - loading dot dot dot and then i would
127:40 - want to import one of my
127:42 - gifs
127:43 - you can go with uh
127:46 - gears if you want because i have two of
127:48 - them basically i have gears and i have
127:51 - the other one was the arrow i think i'm
127:53 - going to go with the arrow so if we're
127:55 - going to head over to the source if
127:56 - you'll notice the images within the gif
127:59 - i don't know whether you can see that
128:00 - but basically i have one of them which
128:03 - is an arrow
128:04 - and the second one which is a gear so
128:06 - this is really up to you which one you
128:08 - would like i think i'm going to go with
128:10 - the narrow
128:11 - so
128:12 - i would want to import that so i'm going
128:13 - to say import i'm going to name this
128:15 - loading
128:16 - gif
128:17 - like so and then from and now we're
128:20 - obviously looking for my images
128:22 - so i'm going to say not data
128:24 - we're going to go for the components no
128:27 - not components images
128:29 - then gif and then we're working with the
128:32 - name is
128:33 - loading
128:34 - and arrow arrow and then the extension
128:39 - is gif
128:40 - and then right after the heading 4 we're
128:43 - going to have the image then for the
128:44 - image we're going to use loading
128:47 - loading
128:49 - and we're going to call this gif
128:51 - then full alternative i don't know we
128:52 - can just skip this i don't think this is
128:54 - going to be
128:56 - doing a bunch of bad things if we're
128:58 - just going to skip alt altogether
129:00 - then i would want to import that in my
129:02 - featured rooms so import
129:05 - um let's call this loading of course
129:08 - loading
129:09 - from and that
129:11 - and we have obviously the loading
129:13 - component and instead of just looking
129:16 - for the rooms right after the
129:19 - ending text
129:20 - and just say loading and let's check it
129:22 - out whether our gif is going to be
129:24 - working let's save that and all the way
129:27 - in the bottom notice this is going to be
129:29 - my loading gif if you're interested
129:31 - again in the css
129:33 - same old spiel the difference would be
129:35 - that this class will be in my globals
129:38 - because like i said i will going to
129:39 - reuse it one more time so
129:41 - only thing i did is text capitalize line
129:44 - center and margin top ones three that's
129:47 - all what happened here
129:49 - close the app css and like i said i
129:51 - would want to create a room which at the
129:53 - moment we're just gonna have some dumb
129:55 - text like hello from room
129:56 - but then
129:58 - starting from not next video next video
130:00 - we're going to set up the functionality
130:01 - in future rooms but then one after that
130:04 - we're going to actually work on the
130:06 - rooms component and at the moment this
130:08 - will be a simple functional component
130:11 - rfc
130:12 - we're going to call this room and let's
130:14 - just go hello from
130:16 - room
130:17 - let's save that as well we can close at
130:20 - the moment
130:21 - then we can close loading we don't need
130:24 - it anymore as well as for the time being
130:26 - context is also not needed
130:28 - let's close the sidebar right after the
130:30 - loading
130:32 - why don't we get the rooms
130:34 - let's call this room or not room say
130:37 - room
130:38 - from and we're gonna go with uh
130:41 - obviously my component by the name of
130:44 - room just so i can see that everything
130:46 - is being rendered properly and let's say
130:48 - right before loading i would go with a
130:51 - room component
130:52 - that i currently have
130:54 - let's save that and i do see my little
130:57 - hello from room
130:59 - right after the feature room so i know
131:01 - that i successfully created both of
131:03 - these components well one of them
131:05 - completely and the other one just has
131:06 - the bare bones and now i can start
131:08 - working with displaying
131:11 - all the featured rooms that i have in my
131:13 - application we're all going to start
131:15 - working on our logic just in a second
131:17 - but i did i
131:20 - forgot that i do need the featured rooms
131:22 - title meaning i do need to import the
131:25 - title component so let's do that we'll
131:28 - say import
131:29 - and we're looking for title component
131:31 - from and then where it is it should be
131:34 - in the same directory so let's just
131:36 - write title and let's save that okay
131:40 - that would be the first step then after
131:42 - that remember when we were working with
131:44 - a context i was telling you that we were
131:46 - going to use the loading again at the
131:48 - moment local data doesn't make much
131:50 - sense later on we're going to be getting
131:52 - our data externally we're all going to
131:54 - make a whole lot of sense so not only i
131:57 - would want to get featured rooms that i
131:59 - would want to rename it as rooms but
132:01 - also i would want to get loading i'm
132:03 - going to say get this property from the
132:05 - context okay now once i have that i
132:07 - don't care about console logging anymore
132:10 - i would want to loop through my rooms
132:12 - and in fact set up right away the jsx so
132:15 - i'm going to say rooms and again we can
132:17 - do it multiple ways we can do it right
132:19 - in the jsx or we can just do it
132:21 - separately outside and as always with
132:24 - all my projects
132:25 - i'm striving to kind of show you
132:27 - multiple ways this is what i was talking
132:29 - about where we're going to have a
132:31 - multiple options of how we can work with
132:33 - context now you can pick and choose
132:35 - which one you like of course i would
132:37 - rather probably with class based
132:38 - components stick to this one instead of
132:40 - using render props but i want to show
132:42 - you multiple options just in case you're
132:44 - like hey you know what maybe the other
132:46 - one makes sense so previously we did our
132:48 - rendering within the jsx just remember
132:50 - we can do it outside as well so we can
132:52 - say rooms map so i'm gonna be again
132:55 - looping over my featured rooms array
132:57 - each and every room will going to be an
132:59 - object of course there which i'm passing
133:01 - here as an argument in my callback
133:03 - function and what i would like to return
133:06 - is not
133:08 - just a simple room but i'm going to wrap
133:11 - that room in a room component that we
133:13 - just created i do need to have the key
133:16 - since there is going to be list and each
133:18 - and every room remember had the id
133:20 - that's something that we didn't change
133:22 - the only difference is we don't need to
133:23 - use the system anymore to access it and
133:26 - then we were going to say that we're
133:27 - also going to pass a room prop with
133:31 - all information about that specific room
133:33 - okay so we're passing it down
133:35 - then i'm gonna close this out i would
133:38 - want right away to get rid of this room
133:40 - because usually what happens i render
133:42 - the list and then there's an error
133:44 - because there's just one simple one and
133:47 - we also would want to restructure this a
133:49 - little bit so what i'm going to say here
133:51 - is this will be
133:52 - section instead of div
133:54 - first and foremost and let's type here
133:56 - section as well
133:58 - then the section we're gonna have a
134:00 - class now the class name is again
134:02 - important because it adds all the
134:03 - styling
134:04 - featured
134:06 - rooms like so
134:08 - then we're gonna have our title like i
134:09 - said title
134:11 - and the title is expecting a title prop
134:14 - title prop will be featured
134:17 - rooms
134:18 - that is the text that i would like to
134:20 - display here
134:21 - then after the title
134:23 - i'm going to set up another div which
134:26 - we're going to have class name of
134:27 - featured room center again this is
134:29 - for the whole layout with the grid so
134:31 - this is important so div
134:33 - so class name
134:35 - or i can just go with
134:37 - featured
134:39 - featured
134:40 - rooms and we're gonna go with the center
134:44 - like so
134:45 - featured room center and then within
134:47 - this div
134:48 - i would like to get my ternary operator
134:52 - where i'm gonna check if the loading is
134:55 - in fact in my context true
134:58 - then i wanna show this spinner
135:00 - and the moment i'm gonna get my data
135:02 - obviously loading will be false and then
135:04 - we're gonna be displaying all the rooms
135:06 - okay so that way again we're not
135:07 - rendering an empty array which would be
135:10 - the case if the loading is true because
135:12 - only featured rooms will gonna have some
135:15 - kind of information once we're done with
135:17 - loading once we're done with getting
135:19 - that data
135:20 - and in this case what i would like to
135:22 - say is that loading so i'm going to
135:23 - check the property that i'm getting from
135:25 - the context
135:26 - if you are true if the data is still
135:29 - loading then we're going to be
135:30 - displaying this loading component that
135:33 - we created in the last video and if the
135:36 - data is there
135:37 - then just do everything that we did here
135:40 - where
135:41 - get me this rooms and just render it
135:44 - here all right now let's save that of
135:47 - course at the moment we should have
135:49 - already some kind of rooms and at this
135:51 - point saying all constant oh yeah so
135:54 - that is the issue i should use let here
135:57 - because the moment i use const i wasn't
135:59 - able to do it and what i have here well
136:02 - at the moment i do have two loadings
136:04 - because i didn't delete this guy
136:06 - so let me get rid of that one but i do
136:09 - have my three rooms because obviously
136:11 - once i run the component did mount
136:14 - then loading is set to false but let's
136:17 - imagine that we're waiting a long time
136:19 - and i'll do that by just passing through
136:22 - then if we're just loading then the user
136:25 - is going to know at least that okay so
136:27 - we are getting that information
136:29 - sometimes again
136:31 - probably you could say well i don't need
136:33 - this flag i really don't care this is
136:35 - really up to you but if you are doing
136:38 - some kind of data fetching i think it
136:40 - makes a little bit more sense if you
136:42 - have some kind of flag where you are
136:44 - rendering only when you get that data
136:47 - awesome we have ourselves featured rooms
136:50 - the only problem is that this is
136:52 - currently a far cry of how our
136:55 - application would look eventually so i
136:59 - think we can start working on a room
137:00 - component because this is where we're
137:02 - going to be displaying all the
137:03 - information about that particular room
137:06 - whether that would be the price whether
137:07 - that's going to be image and naming as
137:10 - well as we're going to set up this link
137:12 - where once we click on a link we will be
137:15 - directed to a specific single room page
137:18 - where there's just going to be
137:20 - information about this room obviously
137:22 - we're going to work on this component
137:24 - after this after we finish with the room
137:27 - but in general this is the idea we're
137:29 - all going to have our featured rooms and
137:32 - then each and every room will be
137:33 - displayed as a component and by the way
137:36 - like i said before
137:37 - this component the room component we
137:39 - will also going to reuse in our rooms
137:42 - page so we're not gonna have to do
137:44 - double the work
137:46 - but in fact we're gonna do just once
137:48 - we're gonna build our own component and
137:50 - then we can display it all over the page
137:52 - okay
137:53 - now after i have rambled on and on about
137:57 - the actual room component why don't we
137:59 - start building it we already have the
138:01 - file room js
138:03 - and here i would want to start firstly
138:04 - by importing the link now link will be
138:07 - imported obviously from the react
138:09 - rotterdam and the reason is very simple
138:11 - because i showed you that i would want
138:12 - to link it to a specific single room
138:16 - page so link from and then we go from
138:19 - react router dom of course
138:21 - that is our import and why don't we
138:24 - start working on what we're going to
138:25 - display within the room now i know that
138:27 - within the featured rooms what am i
138:29 - doing well i'm passing the prop by the
138:32 - name of room and then i'm assigning
138:34 - everything that i'm getting for each and
138:36 - every room so
138:38 - in the room component
138:40 - i'm going to destructure first of all
138:42 - the prop that i'm getting first and
138:44 - foremost
138:45 - and then i would destructure a little
138:47 - bit more where if you want to check it
138:49 - out what kind of rooms are we going to
138:51 - be getting or what kind of information
138:53 - we as always can do a simple console log
138:56 - or you can use the reactos this is
138:58 - really up to you i'm going to use the
138:59 - console.log this time where i should
139:02 - have three objects printed out on screen
139:04 - because obviously i have three featured
139:06 - rooms so let's head over to our
139:08 - recording
139:10 - let's see what we're gonna have and i
139:11 - should have in the console three objects
139:14 - so console and sure enough this is gonna
139:16 - be three object and what i'm interested
139:18 - is a few properties so first of all i
139:21 - would want the images more specifically
139:23 - the first one because that's going to be
139:25 - the one that's displayed now again this
139:27 - is really up to you this is an array
139:29 - with four images and the reason why we
139:31 - have multiple images because later on
139:33 - we're going to have a single room page
139:35 - we're going to be displaying a couple of
139:37 - those images and that was the reasoning
139:39 - there and then what i would like to
139:42 - display as the main image would be the
139:43 - first one
139:44 - then i also would want to get the name
139:47 - the slug that will be displayed in my
139:50 - url
139:51 - and then what else what else uh i think
139:54 - i will gonna go with uh price
139:56 - so price is right here so these are the
139:58 - things we're looking for each and every
140:01 - object and again the same thing we're
140:02 - going to work within the room page so
140:05 - what we can do here is const we already
140:07 - know how we can destructure
140:09 - using the s6 so i'm looking for name
140:11 - properties slug property
140:13 - images property which will bring me an
140:16 - array
140:17 - and price property here and in this case
140:19 - i can just say that i'm going to be
140:21 - looking for the room
140:23 - to be destructured so room prop and now
140:26 - we're destructuring and now let's start
140:28 - working on our return
140:30 - first and foremost this will not gonna
140:32 - be a div
140:33 - but instead we're gonna go with an
140:34 - article and i will gonna add a class
140:37 - name now the class name will be room
140:39 - again and this is something that we did
140:41 - already in the css
140:43 - so
140:44 - i will gonna get rid of this random text
140:46 - hello from room
140:48 - and first and foremost i would want the
140:50 - image container
140:51 - where i will gonna have my image as well
140:54 - as the
140:55 - actual link that will gonna link to a
140:58 - page to a different page so let's start
141:01 - with the div image container that will
141:04 - be the class and then let's start by
141:06 - placing an image so for the source i
141:09 - will use this images array and i'm going
141:12 - to get the first one i'm going to say
141:14 - images
141:15 - and then we're just going to say 0 since
141:17 - this is an array and we'll have access
141:20 - to that particular image now after that
141:22 - we have an
141:23 - alternative one so let's write single
141:26 - room
141:27 - and then let's save that and let's see
141:29 - what's going to happen and what you
141:31 - should see is these three images for
141:33 - each of the featured rooms now there's
141:35 - one thing that i definitely want to do
141:37 - right away which would be setting up
141:39 - some kind of default image because
141:41 - here's the case
141:42 - well let's imagine
141:44 - that i'm going to head over back to the
141:45 - data and i know that i should have this
141:48 - presidential room which by the way was
141:50 - going to be all the way in the bottom
141:52 - and the reason for that because i know
141:53 - that this is definitely featured so i
141:55 - don't want to look for feature that way
141:57 - and let's say that we comment this out
141:59 - let's say there's some kind of error
142:00 - where you're not getting this image from
142:02 - your data so let's do that and what
142:05 - you'll notice is that the single room in
142:08 - this case is missing
142:09 - so i cannot see it that way and this is
142:12 - not what i'm looking for and by the way
142:13 - i was actually very very lucky because
142:16 - this was also featured i didn't get the
142:18 - presidential so let me again
142:20 - show this room and then scroll a little
142:22 - bit more down where i'm gonna have my
142:24 - presidential so now i'm gonna comment
142:26 - this out and check this out i don't see
142:29 - the room right now i don't see the image
142:31 - because obviously i'm not getting it and
142:33 - what we can always do is set up some
142:35 - kind of default
142:36 - where if i'm going to head over back to
142:38 - the room js
142:39 - let me close the sidebar here i will
142:41 - going to import some kind of image any
142:44 - kind of image from the images and again
142:46 - this is really up to you you can
142:47 - obviously check what kind of image
142:49 - you're importing i'm just showing you
142:50 - how we can set up the default image so
142:53 - i'm going to call this default image and
142:55 - then we're looking for the images folder
142:58 - then within images folder we're not
142:59 - going to be looking for gif
143:01 - again random image that i'm just picking
143:03 - normally you would obviously research
143:05 - what kind of image you would want and
143:07 - here we can use the or operator so i can
143:09 - say get me the zero images or one images
143:12 - or whatever images you would want from
143:14 - that array however if it's not there if
143:17 - it's not
143:18 - at all in the array what we can do is we
143:21 - can just say just show me default image
143:23 - so that way you don't have these
143:25 - surprises where
143:27 - let's say you have your application and
143:29 - it doesn't make sense
143:30 - where you should have some kind of image
143:32 - but you don't so i think this is a
143:34 - better
143:35 - better look where we have at least some
143:38 - kind of image now i will gonna head over
143:40 - back to that and of course show the
143:42 - presidential there's no reason for us
143:44 - not to show it but this is going to be
143:46 - nice fallback where just in case we
143:49 - don't have that particular image let's
143:51 - close the data
143:53 - now next one up after the image i would
143:55 - want to show the price
143:57 - so still within this image of container
144:00 - this is important we will gonna go with
144:02 - div by the class name of price
144:05 - top and again this is important to keep
144:07 - these class names that's the reason why
144:09 - everything is going to be displayed this
144:10 - way
144:11 - and i would want to access the price so
144:13 - i'm going to say first of all dollar
144:15 - sign
144:16 - then we're going to be looking for the
144:18 - price
144:19 - like so and we're going to also display
144:21 - a paragraph by the name of per
144:24 - knight let's save that and check this
144:27 - out we have nicely priced displayed for
144:30 - each and every room and then last but
144:32 - not least
144:33 - still within this image container again
144:35 - this is important but not within this
144:37 - div of course
144:38 - let's work on our link so the link that
144:42 - will gonna guide us to that single page
144:44 - so how this is gonna work well first of
144:46 - all i'm gonna say link two
144:47 - and now here's the question so where are
144:50 - we linking well if we're gonna head over
144:52 - back to app.js notice what we had for
144:55 - the single room and i do need to close
144:56 - the sidebar right now just so you can
144:58 - see it a little bit better
144:59 - where the path for the single room was
145:01 - what
145:02 - well we had the path of course
145:05 - then we were heading over to rooms and
145:07 - then we had our url parameter
145:10 - where i'm just passing the name by the
145:12 - slug but of course again we can name
145:14 - this however we would like what's more
145:16 - important is what kind of information
145:18 - we're going to be setting up here so
145:20 - what i'm going to do right now i'm going
145:21 - to say okay so first of all i'm gonna
145:23 - have to create a curly braces because i
145:26 - will gonna have to use the variable and
145:28 - the variable by the way will be slug and
145:30 - then we're gonna set up obviously the
145:33 - template literal and we're gonna write
145:35 - rooms so first of all we would want to
145:37 - navigate to rooms
145:39 - and then within the rooms we're going to
145:41 - access
145:42 - each and every room that we have
145:44 - selected so this slug will going to
145:47 - allow us to do that now currently of
145:49 - course it will not do it it will just
145:52 - gonna show the url that's it we will
145:54 - gonna have to set up the single page in
145:56 - the next video so in the next video
145:57 - we'll see how we're accessing this
145:59 - information because what's really cool
146:01 - about react router dom
146:03 - or react router as a short one
146:07 - then we can access this so there's a
146:09 - reason why i'm setting up this slug
146:11 - because each and every room will gonna
146:13 - have a unique slug we could do the id
146:16 - but then we're gonna have to have some
146:17 - kind of number here and what i would
146:19 - want is to have a text that's the reason
146:22 - why i'm adding here the slug now this
146:24 - will gonna navigate to that single page
146:27 - but again nothing has been set up yet
146:29 - and then let's add a few class names
146:31 - here that will going to add the styling
146:33 - so first of all i'm gonna use again
146:35 - button primary
146:36 - and we're also gonna call this a room
146:39 - link that was just used to actually
146:41 - place it correctly and then let's add
146:43 - some kind of name of course features
146:46 - like so and then as i'm hovering i
146:49 - should see this link and if you're gonna
146:51 - check it out notice right now i'm
146:53 - heading over to rooms and double deluxe
146:56 - now what's happening of course like i
146:57 - said already probably three times we
147:00 - haven't done anything here within a
147:01 - single room page because we haven't set
147:04 - up any kind of logic where we're going
147:06 - to fetch this information from our
147:08 - context api and we're going to get that
147:10 - information about each and every room
147:12 - specific room and that will be displayed
147:15 - meaning if i'm going to head over to
147:18 - finished project you'll notice that of
147:20 - course if i'm clicking this is not just
147:22 - going to be single room but actually
147:24 - specific information about each and
147:26 - every room all right so this is going to
147:28 - be dynamic eventually currently at the
147:30 - moment this is just going to show this
147:32 - dumb text if i'm going to navigate back
147:34 - of course this is going to be the same
147:36 - however you will notice that the url is
147:38 - changing so we are going to a different
147:40 - url
147:41 - however at the moment we're just showing
147:43 - our single room page that we didn't do
147:45 - anything with it okay
147:47 - then
147:48 - still
147:49 - within the actual article but outside
147:51 - this div i would want to set up here the
147:54 - paragraph and i'm gonna add some class
147:56 - names here i'm gonna add class name of
147:59 - room
148:01 - info
148:02 - and then let's use the name here
148:05 - let's use the name and again we're gonna
148:07 - have to obviously navigate back and what
148:10 - you're gonna see is double deluxe
148:12 - family deluxe and pretty much each and
148:15 - every name of the room now last thing
148:18 - that i would want to do with the room is
148:19 - set up the prop types because we are
148:21 - passing the name the slug the images and
148:24 - it would be nice to have some kind of
148:26 - mechanism where we're at least checking
148:28 - whether the prop has been passed and the
148:31 - way we can do that in react or one of
148:33 - the ways how we can do that we can use
148:34 - obviously prop types
148:36 - so let's write prop types from and then
148:39 - we're importing this obviously from the
148:41 - prop types
148:43 - so name is prop types like so now once
148:47 - this is imported all the way in the
148:49 - bottom we are going to set up our prop
148:51 - types and the way i'm going to write
148:53 - that this is going to be the name of the
148:54 - component
148:56 - then we're going for the prop
148:59 - types
149:00 - like so but we do need to use the camel
149:03 - case here in this case
149:04 - prop types and this will be equal to an
149:07 - object now the kicker here is that a
149:10 - room itself is an object remember these
149:12 - are not just single properties so what
149:15 - happens yes the room has specific props
149:19 - but the room component has only one prop
149:21 - and that one prop in fact is an object
149:24 - so what we would need to do here is use
149:26 - uh
149:27 - shape from the prop tips so how this is
149:29 - going to work i'm going to say okay so
149:31 - there is one prop
149:32 - within my room component by the name of
149:34 - room
149:35 - then we're going to say that we would
149:36 - want to check
149:38 - whether this object has particular
149:40 - properties there and in order to do that
149:42 - we're going to have to use shape
149:45 - then within the shape we're going to set
149:46 - up the object and now we're going to go
149:48 - one by one and basically check our
149:50 - properties now first one was the name
149:52 - then here we're going to write prop
149:54 - types and we need to make sure that this
149:57 - is a string and we also need to add is
149:59 - required so that way if the string by
150:03 - the name
150:05 - of name will not be there then obviously
150:07 - we're going to have a warning in a
150:09 - console and i'm just going to copy and
150:10 - paste that i have four of them
150:13 - now next dude will be slug here which
150:17 - also will be string and also will be
150:19 - required of course
150:20 - then images is an array so in this case
150:23 - we're going to do a little bit
150:24 - differently i'm going to say okay images
150:26 - array then prop types will not be string
150:28 - of course because it is an array and we
150:31 - need to use array off and then we need
150:34 - to specifically say well array of what
150:36 - well and what we would want is to be
150:38 - array of strings so that way i can write
150:41 - prop types
150:42 - and we just say string so just make sure
150:45 - that this is an array of strings in fact
150:47 - and then last one is a price which
150:49 - obviously should be number
150:51 - so we can just write price
150:53 - and then instead of string we can just
150:55 - write number
150:57 - now let's save that and now we're
150:59 - setting up the prop types so this should
151:02 - be good
151:03 - as well as everything else is being
151:05 - rendered now our next challenge
151:07 - obviously is going to be working with
151:09 - the single room page but before we do
151:10 - that why don't we head over back to our
151:12 - recording
151:13 - just so we can see what we have done so
151:15 - far i will gonna close the console i
151:17 - don't think we need it and yes we do
151:20 - have our awesome featured rooms
151:22 - so
151:23 - now let's head over to the single room
151:26 - page and work on the single room page
151:30 - before we set up this single room page i
151:32 - would want to set up the function within
151:35 - the context that we will use within a
151:37 - single room page now the reason for that
151:40 - is because single room page will be
151:42 - quite big component so in fact i think
151:45 - we're going to do multiple videos on
151:47 - that particular component so why don't
151:49 - we split up even more where we're going
151:51 - to set up the functionality in the very
151:54 - beginning and that way it's going to be
151:56 - easier later on so first and foremost
151:58 - we're going to head over back to
151:59 - context.js we do have our component
152:02 - mount we have formatting the data and
152:04 - right after that why don't we set up a
152:06 - function that we're going to call get
152:09 - room now this get room function we all
152:12 - going to accept one argument by the name
152:14 - of the slug and here the only thing that
152:17 - we're going to do
152:18 - is in fact we're going to filter it and
152:20 - you can probably already see what is
152:22 - happening
152:23 - so there will going to be a way for us
152:25 - within the single room
152:27 - let me open this component
152:29 - where we will have access to the slug
152:32 - that we're passing from the room
152:35 - component remember we were using the
152:37 - link and we were passing the slug so
152:40 - there's going to be a way for us to
152:41 - access that slug and there's also going
152:44 - to be a way for us obviously to access
152:47 - the context and we already looked at one
152:49 - way and by the way we're going to repeat
152:50 - the same way using the context however
152:54 - later on like i still promised i
152:56 - remember that we're all going to have to
152:58 - look at multiple ways how we can do that
153:00 - but again since single room will be
153:03 - quite big the way we're going to access
153:05 - the context will be the same way like we
153:08 - did before where we use the context type
153:10 - because i just don't want to put too
153:12 - much information in the single room
153:13 - because this is already quite big
153:16 - then like i said we get the slug okay
153:18 - that's first and foremost and now i
153:21 - would like to filter it and get that
153:23 - specific room that has that slug that
153:25 - will be passed using the link so the way
153:28 - we're going to do that we're going to
153:29 - say let and i'm going to call it stamp
153:31 - rooms and temp rooms is going to be
153:34 - equal to our rooms property in the state
153:38 - however i wouldn't want to assign it in
153:40 - fact i would just like to copy the
153:42 - values that i have in my rooms array and
153:45 - the way we do that is by using the
153:47 - spread operator so again i'm saying
153:50 - there's going to be an array and now
153:52 - just like to spread out the values that
153:54 - i have already within this dot
153:57 - state
153:58 - rooms all right now once we have these
154:01 - particular values once we have array now
154:03 - i would like to use the find method to
154:06 - get the room that matches the slack that
154:08 - we're going to pass into our function
154:11 - and the way we do that is by setting up
154:13 - another variable
154:14 - then we're going to say temp rooms that
154:17 - is of course already our array we're
154:19 - going to use a find method and then
154:22 - within the find method we're passing in
154:24 - the callback function and within the
154:26 - parameter of our callback function we
154:28 - can access each and every item in our
154:31 - array now since it is a parameter we can
154:33 - call this however we would like so i'm
154:36 - going to call my room and in fact i'm
154:38 - going to use the arrow function and then
154:40 - what i would like to say is you know
154:42 - what get me the room that slug matches
154:45 - whatever we're passing into a get room
154:49 - function so let's write rooms log
154:53 - is equal to a slog let's save that now
154:56 - we have our function and lastly what i
154:58 - would like to do is return the rule okay
155:01 - now if you're wondering what would be
155:03 - the difference let's say between the
155:05 - filter and the find so define is going
155:07 - to find the first match and also find is
155:10 - going to be an object where within a
155:12 - filter you would need to essentially
155:15 - actually get it out from the array
155:17 - because filter is going to return the
155:19 - array so in my case since i'm just
155:21 - looking for one item i'm fine with just
155:24 - being an object and then once we get to
155:26 - the object then we're just returning
155:28 - back from our function
155:30 - now lastly i would want to make this
155:33 - available in my context so once we have
155:37 - spread out our this that state correct
155:40 - within the value what i could also do is
155:43 - add more properties now in this case the
155:46 - way we add the properties is by coming
155:49 - up with a name of the property so i'm
155:51 - going to say get room and i'm going to
155:53 - set this equal to a this dot
155:55 - get room function and this is how we can
155:59 - make this get room function available
156:01 - within the context and this particular
156:03 - function is going to help us to get
156:05 - specific room once we open up a single
156:09 - room page
156:10 - that was nice and easy we do have our
156:12 - functionality awesome now we're gonna
156:15 - head over to a single room and first and
156:18 - foremost we're gonna do quite a few
156:20 - imports now i'm obviously going to
156:22 - explain to them uh to you once we get to
156:25 - that particular import once we start
156:26 - using it while we're doing it most of
156:28 - them will be uh straightforward but
156:31 - let's say some of them i'm not going to
156:32 - spend too much time right now you'll see
156:35 - it as we're creating this component
156:37 - while we're using it and of course i'm
156:38 - going to return and then show you how we
156:40 - did that so first and foremost i would
156:42 - want to get some image so i'm going to
156:44 - say default bcg
156:46 - and then from and then we're looking for
156:48 - images again you can pick whatever image
156:50 - you like i'm gonna go with room one jpeg
156:54 - that would be number one then i do want
156:56 - the hero because we will gonna be
156:59 - displaying a massive hero and at the
157:01 - moment this will be a very basic one but
157:04 - like i said later on we're going to
157:05 - check it out how we can do that using
157:07 - the style component
157:08 - now this will be my hero so let's call
157:11 - this hero and then this will be from
157:14 - components of course
157:16 - components and the name i believe was
157:18 - euro
157:20 - then we do have the binary
157:22 - banner will be used display name so
157:25 - banner from and again same thing
157:29 - banner from the components
157:31 - then we will have a link which will link
157:34 - away from a different page let's say
157:37 - rooms because notice again we have the
157:39 - banner and we're going to have this link
157:41 - back to all the rooms page
157:43 - so again we're going to look for the
157:44 - room or link
157:46 - from and react router dom
157:49 - react router down
157:51 - and last but not least we will gonna
157:53 - have to get a context because within the
157:55 - context there's gonna be a few things
157:57 - first and foremost we will gonna have
157:59 - access to all the rooms that we had
158:01 - because we would want specific one and
158:03 - second one we want the function that we
158:05 - just created in the last video so let's
158:07 - go with room
158:09 - context and like i said we will use
158:11 - again context type that we already
158:13 - covered since this is a class-based
158:16 - component we already know that probably
158:18 - the simplest way would be using the
158:21 - context type now for the context type i
158:23 - do need to have my whole context the
158:25 - room context and that's the reason why
158:28 - we're importing here from the context
158:31 - later on we're going to have a
158:32 - functional components where we're going
158:34 - to check it out the other way is how we
158:36 - can access the context like i've already
158:39 - previously mentioned the reason why i'm
158:40 - not doing it here is because this will
158:42 - be quite a big component and i don't
158:45 - want to confuse you more than i already
158:47 - have
158:48 - all right now first and foremost i do
158:50 - want to show you how we can access
158:53 - the parameter the url parameter that we
158:56 - passed here by the name of this log and
158:59 - in fact this is very simple
159:01 - now we have a few options how we can do
159:03 - that in the class-based component and by
159:05 - the way we can also do this in a
159:06 - functional of course i'm just going to
159:08 - show it with the class-based one where
159:10 - remember when we were working with the
159:11 - classes or class-based components we had
159:14 - an option of creating a constructor
159:16 - where we had the props
159:18 - and we also had super
159:20 - by the name of the props and now we can
159:23 - do something here whether it bind
159:24 - functions or set up the state as well as
159:27 - we had a life cycle method
159:29 - when the lifecycle method was well one
159:32 - of them at least was component
159:34 - did mount and now let's notice something
159:37 - interesting
159:38 - so what's going to happen is that i can
159:40 - in fact access here something that react
159:44 - router
159:45 - is giving me and how we can do that well
159:48 - first of all let's look at console
159:51 - console
159:52 - log
159:53 - and let's type this dot props and by the
159:57 - way i can tell you right away that this
159:58 - is going to happen exactly the same in
160:01 - the component in month i will gonna tell
160:04 - you in a second why i'm showing you the
160:05 - component didn't mount but for this time
160:08 - being let's just save this and once
160:10 - we're going to head over again to our
160:12 - recording
160:13 - we'll notice something interesting but
160:15 - by the way before we do that let me just
160:17 - uh elaborate that
160:19 - nowhere in our application we're passing
160:21 - this directly to a single room because
160:24 - notice this obviously is just a link so
160:26 - it's really interesting it's not like i
160:29 - went back to app.js and passed somehow
160:31 - here the prop
160:33 - the prop is being passed by react router
160:36 - just remember that that is kind of
160:38 - important
160:38 - now if i'm going to do again inspect
160:41 - check this out
160:43 - what's going to be in the console now
160:44 - currently there's nothing there right so
160:46 - currently our console is just a bunch of
160:48 - complaints that we're not using some
160:50 - kind of
160:51 - variable that we set up but check this
160:53 - out i'm going to click on features
160:55 - and i'm seeing this prop and i
160:57 - definitely didn't pass this prop myself
161:00 - now what's really cool that this is a
161:02 - react router and it gives us what well
161:06 - it gives us access to bunch of things
161:08 - now what we are interested is notice we
161:10 - have an object and we have history
161:12 - location match
161:14 - what we would want in this case is get
161:17 - this particular slug because remember
161:19 - this is what we set up the function for
161:21 - where we will gonna pass that slot and
161:23 - by the way this slug
161:25 - will be specific
161:27 - for each and every item that we're
161:29 - passing so we're gonna have a match
161:32 - then within the match we're gonna have a
161:35 - params and what do you see within this
161:38 - params object i see the name the name is
161:41 - double deluxe so just to show you that
161:43 - this obviously would be unique remember
161:46 - this was double deluxe
161:47 - let's head over back and let's go with
161:49 - let's say prudential just so we know for
161:51 - sure that this would be different now
161:53 - again there's going to be another object
161:55 - again we're going to look in the same
161:56 - place we're going to look for the match
161:59 - and then what do you see within the
162:01 - match params i see the slug by the name
162:04 - of presidential room
162:06 - so react router gives us a very very
162:09 - nifty way how we can access in fact this
162:13 - parameter so this is exactly what i'm
162:15 - going to do
162:16 - and the reason why i'm showing you a
162:17 - component did not
162:18 - because in our case i'm accessing this
162:21 - specific room here from obviously my
162:24 - function from the context
162:27 - now there's going to be cases where
162:28 - you're going to be setting up a
162:31 - different kind of api call where
162:33 - remember eventually we're going to set
162:35 - up everything using contentful so in our
162:37 - case we could say that we were going to
162:39 - get all our information from the
162:42 - contentful and we're going to store it
162:43 - here in context but then there's going
162:45 - to be cases let's say you want to make a
162:47 - single call because obviously what you
162:49 - need to understand is that this would be
162:51 - a single call so what do you do well you
162:53 - would set up some kind of api call where
162:55 - you're just getting the specific room
162:57 - about that specific one page now in our
163:00 - case we are already doing this just by
163:02 - accessing the contacts but this is not
163:04 - always going to be the case there's
163:06 - going to be a case where you
163:07 - specifically need to make the api call
163:09 - now the reason why i'm showing you this
163:11 - that you most likely were going to do it
163:13 - with component mount and that again is
163:16 - where you can access this console.log
163:18 - this problem now i'm not going to
163:19 - console.log this right now i'm just
163:20 - showing you that this obviously works
163:22 - and i'm just going to comment this out
163:24 - for now just for your understanding and
163:26 - yes you could technically just pass it
163:29 - here grab the information from the state
163:31 - you can do it let's say you're going to
163:32 - access that slug and then you're going
163:34 - to make your api call but i'm just
163:36 - letting you know that you still have
163:38 - access to this component that mount to
163:40 - the props
163:41 - to any props but more specifically in
163:43 - our case what we want is access to the
163:46 - props that react router dom is providing
163:49 - now after we have rambled on about the
163:52 - props so we're going to comment out just
163:54 - so you can have it for your reference
163:56 - and what i would like to do right now is
163:58 - set up this dot and state now within the
164:01 - state i will have a few properties that
164:03 - we will going to reuse all throughout
164:04 - the project so first of all i'm going to
164:06 - set up the property by the name of this
164:08 - log now this will be equal to this dot
164:11 - props like i said bunch of objects match
164:14 - params that was the path and then last
164:16 - one will be slug and again remember this
164:18 - is unique for each and every time we're
164:21 - going to be opening up the single room
164:22 - page this will be unique because we're
164:24 - getting this for each and every room
164:26 - this is obviously different and then i
164:28 - also would want to set up the default
164:30 - bcg which will be
164:32 - exactly the same name that i had here
164:34 - default bcg again this will make sense a
164:37 - little bit later this is just to be a
164:39 - image so we're going to get there all
164:41 - right now
164:43 - last
164:44 - i would want to access my context
164:47 - so we can do outside the constructor we
164:49 - can say static
164:52 - static context type will be equal to
164:55 - room
164:56 - context now we already knew that
164:59 - so what we can do is we can save that
165:02 - and now let's notice something
165:03 - interesting
165:04 - once we successfully get our context
165:08 - from the room context why don't we eat
165:10 - this structure and more specifically why
165:12 - don't we destructure the function that
165:15 - we had by the name of guestroom so in
165:17 - order to do that i'm going to say get
165:19 - room that obviously will going to be
165:21 - coming from this dot
165:23 - context that's number one and then i
165:25 - would want to run that function and i
165:28 - would want to run that function and
165:29 - remember we had to pass in this log so
165:32 - the way we're going to do that we're
165:33 - going to say const and we're going to
165:34 - assign it by the name of room
165:37 - i'm going to say room and then we're
165:39 - going to go with this dot and then we're
165:42 - going to say of course
165:43 - first we need get room
165:45 - let's go with get room and then this dot
165:48 - state and slug and now i would want to
165:51 - console log the room to show you the
165:53 - issues that we're going to be having and
165:55 - then we're going to decide how we're
165:57 - going to fix them so first and foremost
165:59 - we have
166:00 - console
166:02 - log
166:03 - so we're looking for the room
166:05 - and now let's check it out when we go to
166:08 - the console notice we have undefined
166:11 - first and then we are only getting the
166:14 - room
166:14 - now what's even worse is let's say that
166:17 - not only we are navigating to single
166:19 - room from when we click on the room
166:22 - component we can also obviously navigate
166:24 - here in the url
166:26 - so not only if i'm going to be going for
166:28 - presidential but let's say i'm just
166:30 - going to type one check this out now i'm
166:32 - going to have two undefined so we would
166:35 - need to figure out a way how we would
166:37 - catch this undefined
166:39 - then render
166:40 - something first if the room is undefined
166:43 - and then only when the room is defined
166:46 - eventually then we would want to render
166:48 - information about that single room
166:51 - knowing the issue is the first step
166:53 - next we would want to fix it of course
166:55 - but before we do that let's just see how
166:58 - our application will perform
167:00 - if we try to access this room when it's
167:03 - undefined now we know that we cannot
167:05 - access object in general but we can
167:08 - access the property and i already know
167:10 - that there will be the property by the
167:12 - name of or name yeah by the name of name
167:15 - and of course at the moment there will
167:17 - be a big fat error because it says well
167:19 - i cannot read that properly now we could
167:21 - technically just again refresh and let's
167:24 - see how this is going to work if we go
167:26 - directly from our featured rooms page so
167:29 - once we click it over here everything is
167:31 - awesome we are accessing this double
167:34 - deluxe all this is fine however the
167:36 - issue will be once we refresh then of
167:38 - course we're gonna get there the same
167:41 - way if we're gonna try to access some
167:43 - kind of room that doesn't exist again
167:46 - we're gonna have a same error because
167:48 - the room will be undefined so how we can
167:52 - fix that well we could set up the if
167:54 - statement where we check whether room is
167:57 - undefined that means that either it's
167:59 - still loading or there was an error and
168:02 - then we render something so one part of
168:06 - our application and then once the room
168:08 - is actually defined
168:10 - then we're gonna destructure it and show
168:12 - the information about that specific room
168:14 - very simple so why don't we do the if
168:17 - statement and we're just going to say if
168:19 - room
168:20 - is undefined then we would want to
168:22 - render something now that something will
168:25 - be a narrative
168:27 - so i'm going to say return
168:29 - then we're going to go with error
168:31 - and not console.log error but in fact
168:34 - we're going to go with error div
168:37 - error div
168:39 - and then obviously this is the class
168:40 - that we're just accessing from the css
168:43 - as well as we would want to maybe place
168:45 - some heading three
168:47 - no such room
168:50 - could be found now please understand
168:52 - that if you're doing some kind of apa
168:54 - call api call from the component didn't
168:58 - mount then you're probably going to
169:00 - write like loading or something like
169:02 - that now the reason why i'm mentioning
169:03 - that because people sometimes do a
169:06 - different setup by using the code that i
169:09 - have and then they write in the comments
169:10 - that well you know what it didn't work
169:12 - well yeah it didn't work because you're
169:14 - doing a different thing in my case i
169:17 - don't have an option of loading i have
169:20 - only option of if that room is not in my
169:23 - context then there's no way i'm going to
169:25 - be able to find that room now if you're
169:27 - just waiting for your component to mount
169:30 - then probably if it's even better set up
169:32 - the flag within the state where once you
169:35 - actually get that specific room get
169:37 - fetch that information then in fact you
169:40 - render in my case again there is only an
169:41 - option of either that room is in my
169:45 - context or not and that's it so in that
169:48 - case i'm going to write no such room
169:50 - could be found
169:51 - then we have three dots
169:53 - and then why don't we set up the link
169:55 - right away so the user can navigate away
169:57 - from the page so link two
170:00 - then we're gonna do i don't know rooms
170:03 - and then let's write class name
170:06 - will be
170:06 - btn primary
170:09 - like so and within the link why don't we
170:11 - write uh i don't know
170:13 - back to rooms and let's see what we're
170:16 - gonna happen
170:17 - then in our application we notice that
170:19 - there is no such room
170:21 - all right then if i'm just gonna type
170:23 - and write deluxe i will gonna get this
170:26 - deluxe because initially yes it will be
170:28 - undefined but then we're gonna get that
170:31 - information about that specific page so
170:33 - not only are we gonna have an error if
170:36 - that room is not in my context so once
170:38 - we're gonna type that no such room could
170:40 - be found and then we have an option of
170:43 - actually navigating back to the rooms
170:45 - that will be the first thing now we
170:47 - would want to set up here our actual div
170:51 - that will be rendered if everything is
170:53 - successful so if the room is uh defined
170:56 - first and foremost we would want to
170:58 - destructure it so first of all i'm going
170:59 - to be looking for that name property
171:02 - then we're going to write for
171:03 - description
171:04 - so comma description
171:08 - then we also have capacity
171:10 - as well as size and again these are just
171:12 - properties that i have on my room so
171:14 - price
171:16 - extras uh what else we have breakfast
171:21 - breakfast
171:22 - as well as we're gonna have pets and
171:25 - images and all that
171:27 - will be in the room so images
171:31 - and that will be in my specific room
171:33 - object
171:34 - and why don't we actually change also
171:36 - what we're going to be returning so this
171:39 - will not just be a simple div we're also
171:41 - going to use a hero
171:42 - and for the time being we will going to
171:44 - use our hero class
171:46 - however in next video we were going to
171:48 - look at styled components and how they
171:51 - improve our application so we're going
171:53 - to set up the basic setup and i'll show
171:54 - you the
171:55 - pitfall of this kind of setup so rooms
171:59 - hero that is the class that i already
172:01 - used before
172:02 - for my rooms now within the hero we are
172:05 - going to go with the banner and for the
172:07 - banner title in this case
172:09 - we are going to set up the name that is
172:11 - for the room so that way i can say that
172:14 - i'm sorry not two but title
172:17 - and then why don't we set up right away
172:19 - the template strings
172:21 - and we're just gonna go with a dollar
172:24 - sign i will gonna be looking for the
172:26 - name of the room and i'm going to say
172:28 - that this will be the name of my room
172:30 - then within the banner i also want to
172:32 - place a link
172:34 - now the navigation will offer user to
172:37 - let's say navigate rooms
172:40 - why don't we also add right away class
172:42 - name
172:43 - i don't know um button primary of course
172:45 - button
172:48 - primary like so
172:50 - and then within the link we're gonna
172:52 - write i don't know back to rooms again
172:53 - back to
172:55 - rooms
172:56 - let's save that and we'll see what will
172:59 - happen and again in this case since the
173:02 - slug
173:03 - doesn't match any rooms that we have we
173:05 - have no rooms can be found if i'm going
173:07 - to change this one to deluxe of course i
173:11 - will gonna get this nice hero component
173:14 - with our banner and then this will be
173:16 - the name of my room however
173:19 - there is another issue
173:21 - now this issue is very simple where each
173:24 - and every time we're going to be
173:25 - rendering that specific page the image
173:28 - will not going to change
173:29 - now why it's not going to change because
173:31 - we're just using a simple class
173:34 - where i have the room's hero class and
173:35 - remember we had the case for the app css
173:39 - and then within the app css we did have
173:41 - somewhere hero
173:43 - and i think it will be easier to find it
173:45 - using find
173:47 - so why don't we type hero and sure
173:50 - enough we have our two classes and you
173:52 - might be tempted to say okay of course i
173:54 - understand yes at the moment because
173:57 - we're rendering room zero we're just
173:59 - accessing that one image so maybe we
174:02 - could set up a bunch of classes here and
174:04 - each and every class will be targeting
174:06 - that specific image and then each and
174:09 - every time we're going to be going to
174:10 - that page we of course will going to
174:13 - render a different image but again
174:15 - please remember we will going to be
174:17 - getting this data from where we're all
174:19 - going to be getting from contentful
174:22 - and that way it's going to be impossible
174:24 - because those images will not be stored
174:26 - locally in our application or on machine
174:30 - in fact they're all going to be stored
174:31 - in contentful and we're just going to
174:33 - access them dynamically so even though
174:36 - you would want maybe manually to add
174:38 - whatever classes you have you're not
174:40 - going to be able to access the images
174:42 - that's number one
174:43 - number two
174:45 - you probably are going to be wasting a
174:47 - lot of your time because every time what
174:48 - you're going to change something about
174:50 - your data
174:51 - you're going to run back over to your
174:53 - css and add the class so there has to be
174:55 - a better solution
174:57 - and that better solution will be styled
174:59 - components
175:00 - which allow us to insert this data
175:03 - dynamically so this is what we're going
175:05 - to do in the next video and this is what
175:07 - i'm saying where this component is going
175:09 - to be quite big as you noticed first we
175:12 - dealt with an issue of actually
175:14 - accessing the slug
175:16 - now we fix the error and now we're going
175:19 - to fix this hero we're all going to have
175:22 - the styled components hero that we'll
175:25 - access for each and every page
175:27 - dynamically the image we would want so
175:30 - the image will be changer that big
175:32 - background image and then we're gonna
175:34 - run the rest of the
175:35 - information regarding that single room
175:38 - okay we know our next task is to create
175:42 - the hero component to be dynamic now the
175:46 - first things first why don't we take a
175:48 - look at what are styled components
175:50 - because this is exactly what we're gonna
175:51 - do now i'll tell you right away that i'm
175:53 - gonna be skipping over them a lot
175:56 - because i already have a separate course
175:58 - on styled components so i'm not going to
176:01 - go through each and every detail what is
176:03 - happening with style components so we're
176:05 - going to look at the general idea and
176:06 - we're going to customize it for our
176:08 - example if you want to learn more about
176:10 - style components check out my course on
176:13 - udemy and you're going to know
176:15 - everything that there is to know about
176:16 - style components now first of all what
176:19 - is the idea well the idea with styled
176:21 - components is the fact that we can
176:23 - attach styles to the component
176:26 - and it will be right away rendered now
176:28 - there's a bunch of advantage with styled
176:31 - components and the simple fact that your
176:33 - css will not going to be colliding where
176:36 - each and every style component we're
176:37 - going to have unique class also we have
176:40 - access to variables because in fact what
176:42 - we're doing here we are writing
176:44 - javascript now like i said this is just
176:46 - going to be brief over you so first and
176:48 - foremost if you ever want to find out
176:50 - anything about style components this
176:52 - will be installedcomponents.com
176:55 - then if we head over to documentation we
176:58 - notice also the api reference and what
177:01 - they're telling you is that first and
177:02 - foremost
177:04 - the default export will be styled
177:06 - then once we import styled from styled
177:09 - components
177:10 - then we can start using that style by
177:13 - writing whatever the component name
177:14 - would be and usually the uh simplest
177:17 - example would be some kind of button and
177:19 - then we use the styled which would be
177:21 - the default export that we have and then
177:24 - the name of the component now in this
177:26 - case it could be another style component
177:28 - this could be html element this could be
177:30 - really anything you would want in fact
177:32 - this could also be a react component and
177:35 - what happens here once we have these
177:37 - backticks which are template literals
177:40 - then we can just write whatever css we
177:42 - would want but what's really cool about
177:45 - this that since these are template
177:47 - literals we in fact can use javascript
177:50 - in here and what we're all going to do
177:51 - here we dynamically we're going to
177:53 - access our image and place it within our
177:56 - background all right now
177:59 - what do we need to do first well we
178:00 - would probably want to get the styled
178:03 - components
178:04 - and first and foremost if we head over
178:06 - to the basics we just see this is the
178:08 - install we would need to create i will
178:10 - gonna head over back to my project i
178:12 - will gonna clear everything and that's
178:14 - not what i would want i'm gonna clear
178:16 - everything in my integrated terminal we
178:18 - will gonna install style components
178:20 - right away
178:21 - and we will gonna create a new component
178:24 - now first of all we're just gonna test
178:25 - it with the button
178:26 - but i know eventually this will be
178:28 - styled
178:30 - hero so that will be our other
178:33 - component the hero component only this
178:35 - one will be using styled components and
178:37 - then again let's head over back to the
178:39 - api
178:40 - like i said i will i'm going to be
178:41 - skipping over a bunch of stuff and
178:44 - remember we needed to import style from
178:46 - stealth components
178:48 - so import
178:49 - styled from style components and notice
178:52 - something interesting how we don't need
178:53 - to import react now there's going to be
178:55 - cases where you're obviously going to
178:57 - combine them where style components will
178:59 - be used together with react component
179:01 - but in this case this is just a styled
179:03 - component however it will perform uh a
179:06 - lot like a react component so let's do
179:09 - npm start now this is going to start up
179:12 - obviously our dev server i can close the
179:14 - integrated thermal i don't need that
179:16 - from and then we're looking for styled
179:18 - components because we installed them
179:20 - people
179:21 - then
179:22 - next one up why don't we create our
179:24 - simple button
179:25 - and by the way i will gonna render this
179:28 - somewhere why don't we head over maybe
179:30 - home and let's grab the styled component
179:33 - just so we can take a look first and
179:35 - foremost how this is gonna work
179:37 - so import now this will be styled
179:40 - component however i do need to make sure
179:42 - that i'm exporting something because at
179:44 - the moment i'm not importing or
179:46 - exporting anything apart from the style
179:48 - so in this case i we're going to set up
179:49 - const
179:51 - why don't we call this whatever we would
179:53 - like but we're just going to call this
179:55 - simple
179:57 - button then we need to write styled and
180:00 - again what kind of html element in this
180:02 - case we would want and i'm going to go
180:04 - with button and here let's add i don't
180:06 - know color
180:08 - red and background
180:11 - green something like this
180:13 - background green and we do need to of
180:16 - course so we're going to say export
180:20 - export
180:22 - we can do either named or default export
180:24 - so in this case if we're just going to
180:26 - say default
180:27 - simple button
180:29 - will be exported so far so good then
180:32 - next one up we would need a home js and
180:35 - we can name it again whatever we would
180:36 - like so in my case i'm just going to
180:38 - name this button
180:39 - from and then we're going to access
180:40 - components and styled hero
180:44 - all right now somewhere all the way in
180:46 - the bottom right after featured rooms
180:49 - why don't we look at the button that we
180:51 - just created with style components and
180:54 - at the moment we don't see anything now
180:55 - the reason for that because obviously we
180:57 - have the button remember we created the
181:00 - actual button so we would need to create
181:02 - some kind of text
181:03 - so whether that would be i don't know
181:05 - hello or whatever so we're going to
181:07 - create hero or hello and all the way in
181:10 - the bottom i could see the little button
181:13 - here notice i obviously can click it
181:16 - this is an actual button but nothing is
181:18 - happening now what's really cool here is
181:20 - that
181:21 - like i said this is javascript at the
181:23 - end of the day so i could pass some kind
181:26 - of variable i could set up i don't know
181:28 - const
181:29 - red and this would be some kind of red
181:31 - color now i do need to use obviously
181:34 - the quotation marks here
181:36 - and i'm just going to say all right so
181:38 - this will be a string
181:39 - by the name of hashtag whatever we can
181:42 - use maybe orange color f15025
181:47 - and then for the color why don't we
181:49 - change this why don't we say that all
181:51 - right so we would want to access the
181:53 - variable instead now this variable
181:55 - obviously is not going to be red i don't
181:56 - know why i'm writing red this will be
181:58 - orange color
181:59 - and also we can write orange and you
182:02 - know what in order to
182:04 - actually make this button more visible
182:06 - why don't we add a massive font size
182:09 - like i don't know
182:10 - three rems let's test it out
182:13 - and then notice check it out we do have
182:16 - right now the color
182:19 - however the color is not being displayed
182:21 - properly because i actually gave a wrong
182:23 - hashtag value i should add here f as
182:26 - well but in this case i do have it here
182:29 - the color is not red anymore in fact
182:31 - this is orange because we are accessing
182:33 - this dynamically
182:35 - using the variable so now let's think
182:37 - about it we have a style component we
182:40 - can access some values dynamically and
182:44 - what we are trying to do is
182:46 - get this image in our styled component
182:49 - so whenever we are rendering this hero
182:52 - the big massive component
182:54 - i would want to place here the image so
182:57 - hopefully the bells are already ringing
183:00 - in your head
183:01 - because this is exactly what we're gonna
183:03 - do now
183:04 - how this is gonna work well first and
183:06 - foremost why don't we get the default
183:08 - image now you don't have to do it this
183:10 - way but i just always find it useful if
183:12 - we have some kind of default image so
183:14 - i'm going to say default image from and
183:18 - again we're going to be looking for the
183:19 - images
183:20 - then within the images they're obviously
183:23 - going to be some kind of default image
183:24 - and i'm just going to go with room jpeg
183:27 - like so
183:28 - then obviously i'm going to change this
183:30 - around i don't care about the button
183:31 - anymore what i would like to do instead
183:34 - is get my default
183:37 - hero and the way this is going to work
183:40 - i'm going to name this differently i'm
183:41 - going to say const
183:43 - styled hero
183:45 - will be equal to styled now in this case
183:48 - i don't want to render the html button
183:50 - i would want to render html header now
183:54 - that is going to be the name of my
183:56 - html element of course
183:58 - and then what we would want for the
184:00 - header well we can actually already
184:03 - check what we already had previously so
184:05 - that will be in the app css and what are
184:08 - the styles that we're adding
184:10 - well i am adding the min height here i
184:13 - am adding the background as well as we
184:16 - would obviously want to display flex
184:18 - align item center and justify content so
184:21 - we can just grab whatever we had over in
184:23 - the css there's no point of rewriting
184:26 - this because our main goal is to look at
184:28 - how we can name this dynamic i don't
184:30 - care about min height being hundred view
184:32 - heights i can just go with 60 view
184:35 - heights here
184:36 - then display flex will stay the same
184:38 - align items justify content all that
184:40 - will stay the same
184:42 - what i care about is this
184:44 - this is what i'm really interested about
184:46 - and we already saw how we can use one
184:48 - variable
184:49 - so first of all before we mess up
184:51 - anything
184:52 - let's just write that we are exporting
184:54 - default styled hero
184:57 - like so
184:58 - and then let's change this value here
185:01 - around let's say that i would want to
185:03 - access this image
185:05 - dynamically by again i need to use the
185:09 - dollar sign since i am within the
185:12 - template literals and let's say that i'm
185:14 - checking for
185:16 - default
185:17 - img now this is obviously the variable
185:21 - name that i have here so hopefully
185:23 - everything was correct
185:25 - let's save that and let's see what we're
185:27 - going to have in the bottom
185:28 - wow i have my massive image and i can
185:31 - even go back in my recording we can go
185:33 - back home
185:34 - and for some reason this is not showing
185:36 - right now and yes it is showing right
185:39 - now what do you see here this will be
185:41 - our massive image okay but at the moment
185:44 - it's the same thing again i'm getting
185:46 - this data so each and every time this
185:48 - will be rendered exactly the same
185:51 - because all i'm doing here is rendering
185:53 - the image
185:54 - now what's even more cool about style
185:56 - components that we can pass the props so
186:00 - what will happen at the moment i'm just
186:02 - going to show you obviously this in a
186:03 - home page because this is where we're
186:05 - rendering and by the way i named this
186:07 - button but the way this will work
186:09 - eventually is that there will be some
186:12 - kind of prop and we can name this
186:13 - however we would like
186:15 - but i'm just going to name this image
186:17 - and then we dynamically will going to
186:19 - access the images
186:22 - that we had here from the room all right
186:24 - now let me show you how this is going to
186:25 - work first and foremost i don't think i
186:28 - care about the button anymore
186:30 - i can just get rid of it it will be on
186:32 - my way i can also delete the import i
186:35 - will gonna fix the style hero and the
186:38 - way we access props in the styled
186:41 - components is a little bit different so
186:43 - this way if we're just taxing the
186:44 - variable it's very simple i can just say
186:46 - okay so give me whatever variable i
186:49 - would want but if i'm going to be
186:50 - accessing the props that are being added
186:53 - to this style hero the syntax would be
186:56 - following where it what it will not be
186:59 - just a simple dollar sign
187:01 - i will gonna have to again access
187:03 - something dynamically but in this case
187:06 - i'm passing here the function and this
187:08 - function grabs one argument which will
187:11 - be the props now the props obviously
187:13 - will be the ones that are added here on
187:15 - the style component by the name of style
187:18 - hero in this case
187:19 - and then i'm just going to be looking
187:21 - for either i can return it or we can
187:25 - even do a ternary operator again the
187:27 - simple way would be something like this
187:29 - where i say
187:31 - props image now again this will be the
187:33 - name of my current prop that i'm using
187:36 - and just to show you how obviously this
187:38 - will work is i will gonna save it
187:40 - currently we will gonna head over back
187:42 - to the single room and right after the
187:45 - room context why don't we import this
187:47 - i'm gonna say styled
187:50 - component like so
187:53 - and you know what no styled hero why i'm
187:55 - calling the stone component and then
187:58 - from and then obviously i need to head
188:00 - over to my components and somewhere
188:03 - within the components of course i will
188:05 - have my styled component
188:08 - so it's or styled hero i don't know why
188:10 - i keep calling this styled
188:12 - uh component well it is styled component
188:15 - i guess but the name of it is styled
188:17 - hero
188:18 - now we will head over
188:20 - to a return
188:22 - if the room is actually defined and
188:25 - we're going to change this around so
188:27 - we're not going to be looking for the
188:28 - simple hero
188:30 - in fact we're going to change this
188:31 - around
188:33 - then we will use styled component
188:37 - styled or again styled here or not
188:39 - styled component
188:41 - the prop name will be image
188:44 - so the prop name again i use the name
188:46 - here image you can use whatever name you
188:48 - would want but i'm just going to say
188:50 - image and that image
188:52 - will be equal to anything that i would
188:54 - want from that images array now this is
188:57 - really up to you how you would not want
188:59 - to do it but in my case i'm just going
189:01 - to go with images and since i know that
189:03 - this is an array i can just go with a0
189:08 - now let's check it out what we're going
189:10 - to have here let me first of all save
189:12 - home
189:13 - and then let's test it out in our
189:15 - application
189:16 - i click on it and what do you see as an
189:18 - image well i see that this is going to
189:20 - be my double deluxe room again if we're
189:23 - going to head over to the prudential
189:25 - now this will be a presidential room
189:28 - there is one more thing that i would
189:29 - want to show you with this styled
189:31 - component and the simple fact that
189:34 - if you would want
189:35 - the default one you can either do it
189:38 - here let's say set up some kind of
189:40 - default if again you're not able to
189:43 - access that image within the images or
189:45 - we can do it here that's the reason why
189:48 - i did set up this interstate so this is
189:50 - really up to you i'm going to add
189:52 - an overkill right now because i'm going
189:54 - to add in both ways the default one so
189:56 - i'm going to say show me images 0 or
190:00 - and that way i'm just going to say this
190:02 - dot
190:03 - state and default image again you don't
190:06 - have to do this this is definitely an
190:07 - overkill but just to show you that we
190:09 - can add these default images in both
190:12 - cases where i can say okay if it's not
190:14 - there then just render this guy and also
190:17 - we can do the same thing here where not
190:19 - only we're looking for the props but i
190:21 - could set up here a ternary operator not
190:24 - that ternary operator will be basically
190:26 - like this i'm gonna check if
190:30 - i'm passing any kind of prop
190:32 - and if no image prop is being passed i
190:36 - can obviously say like this i can say
190:38 - all right so
190:39 - props images if it's there and if it's
190:42 - not there then just render whatever
190:44 - default i have now where is my default
190:46 - well this will be this guy so i can just
190:49 - say ternary operator
190:51 - if
190:51 - the image prop is passed obviously
190:53 - render that image prop
190:55 - and then if it's not passed then just
190:58 - render this
190:59 - img okay
191:01 - that's basically a protection
191:04 - if
191:05 - let's say you forgot to add that kind of
191:07 - prop and this is how we can set up our
191:11 - single room page to be dynamic where
191:13 - each and every time we're going to be
191:15 - trying to render something and i can go
191:16 - back to my final application where for
191:19 - each and every room we in fact will be
191:22 - accessing
191:23 - image from that room okay instead of
191:25 - rendering the same old image all the
191:27 - time
191:28 - we have our styled hero component
191:31 - awesome and now what's left to do is
191:34 - just pretty much fill out the rest of
191:36 - the information about our single room so
191:38 - in this case i will gonna navigate to
191:40 - the single room obviously this is gonna
191:42 - show me the background image for that
191:46 - double deluxe room but we already have
191:49 - our awesome styled hero where each and
191:52 - every time this will gonna be rendering
191:53 - different images and like i said
191:56 - it's pretty much the easiest part where
191:57 - we would want to set up rest of the
191:59 - information about that one specific room
192:02 - i would want to render everything after
192:04 - this styled hero so in this case since
192:06 - we cannot do two adjacent things in the
192:09 - gsx i will gonna also set up the react
192:13 - fragment
192:14 - so opening and closing will be react
192:16 - fragment and then rest of the
192:17 - information will gonna go here where
192:19 - we're gonna be filling out
192:21 - using all the values that we're getting
192:23 - from that one specific room
192:25 - first and foremost we're gonna start
192:27 - with the section
192:29 - now within that section there will be a
192:31 - class that we have in the css
192:33 - by the name of single room now this
192:36 - should get me obviously my jsx right now
192:39 - i'm just waiting on my emmett here it
192:42 - goes
192:42 - then within the section we are going to
192:45 - start very simply by showing all the
192:47 - images so if you're looking at at my
192:50 - finished page you see that we have all
192:53 - the images now this is really up to you
192:56 - if you want to render all the images
192:58 - that we have in the array basically
193:01 - including also this background one you
193:03 - just need to obviously do it the images
193:06 - map because obviously we're accessing
193:08 - the images and then all of them will be
193:11 - rendered but we're also going to check
193:12 - it out how we can do a little bit of the
193:15 - structuring again with javascript and
193:17 - render only three of them so the easy
193:19 - way would be like this where we have a
193:21 - bunch of images and by the way i would
193:23 - want to place this in another div
193:26 - single room images again this will be
193:29 - just for the styling
193:31 - and this is just gonna give me class
193:33 - name that i don't want
193:34 - but again we're gonna have to get my jsx
193:37 - and then within this images this
193:39 - will be where we're gonna render our
193:41 - images
193:42 - so i'm going to start with images then
193:44 - we used a map method and then since
193:47 - there's going to be a few of them i
193:49 - would want item so each and every index
193:52 - or each and every image in that array
193:55 - and also we're going to add right away
193:56 - index just because we're going to be
193:58 - rendering the list and what i would like
194:00 - to return is just a image with a key
194:04 - and then the key will be indexed of
194:06 - course and then source will be the item
194:09 - so source attribute form my html image
194:14 - will be coming from each and every image
194:16 - from my array and i'm going to call this
194:18 - item and then alternative we can just
194:21 - say that the name the name of that
194:24 - particular room which obviously we still
194:26 - have access to so let's do this this
194:29 - will be our first setup and at the
194:31 - moment this will be complaining because
194:33 - i should obviously have the return as
194:35 - well
194:36 - now this should do better and now we
194:39 - have all of these images again we can
194:40 - head over
194:42 - back to our recording check it out
194:44 - single room and i have these four images
194:47 - and like i said if you instead would
194:49 - want only the three images so this
194:52 - background one maybe you don't want to
194:53 - display
194:54 - we would just do a bit of the
194:56 - structuring here and in this case
194:58 - instead of object destructuring we're
195:00 - going to do array destructuring where i
195:03 - do have my images array correct so i
195:07 - could just write all right const and now
195:09 - get me out the images out of that images
195:12 - array and i could set it up this way
195:15 - where i have the main image that is
195:17 - going to be my first image and i could
195:19 - just say let's say image number one
195:21 - image number two and so on and so forth
195:24 - and set this equal to a images array so
195:27 - now what we're doing is we're just
195:29 - grabbing the items out of the array so
195:31 - that is going to be my first one then
195:33 - second one and third one and so on and
195:35 - so forth now the thing is that i would
195:38 - like to get another array with the rest
195:41 - of the images so essentially i don't
195:43 - want to keep the count of how many
195:45 - images i have in my array because in
195:47 - this case i'm getting the second image
195:49 - then third and so on and so forth but of
195:52 - course there's cases where i don't know
195:54 - how many extra images i'm going to have
195:56 - whether that is going to be 5 or whether
195:58 - that is going to be 50. so a better way
196:00 - would be this way where i'm getting the
196:03 - main image correct so i am the
196:04 - structuring array and i'm getting my
196:06 - first item but then for the rest of the
196:09 - items i'm using the rest operator where
196:12 - i'm just going to say dot dot and then
196:14 - whatever the name of my array so in my
196:17 - case i'm going to say default img but
196:20 - you can call this however you would like
196:22 - so again we are doing the array
196:24 - destructuring and then in order to get
196:27 - rest of the items apart from the first
196:29 - one i'm just using a rest operator so in
196:32 - this case i'm going to rewrite my
196:34 - background as well but you don't have to
196:36 - do it so i'm going to say okay
196:39 - get me main img that of course is the
196:43 - item number one and then instead of
196:46 - looping over all the images
196:48 - what i'm gonna do
196:50 - is i'm just gonna say default
196:52 - img and then just to double check
196:56 - let's just cancel log
196:58 - just so we can see that for sure default
197:01 - img are going to be next images or rest
197:04 - of the images in the array now let me
197:08 - head over back to my bigger browser
197:10 - window we can maybe refresh our dev
197:12 - server first of all i can right away see
197:14 - that still my style hero works excellent
197:18 - so we're still accessing our main image
197:20 - but then notice how rest of the images
197:22 - don't have anymore that main image so we
197:25 - got rid of that successfully and
197:27 - essentially we're rendering out the rest
197:29 - of the list
197:30 - and if i'm going to click on inspect
197:33 - within console we're also going to
197:35 - notice that we have the array of three
197:38 - images so essentially we have rest of
197:40 - the images so that's how we can do array
197:43 - destructuring using the rest operator in
197:47 - order to get rest of the images without
197:50 - the main image that is displayed in the
197:53 - background well we are done with images
197:56 - this will be our div so make sure that
197:58 - right outside this div there's going to
198:00 - be another div
198:01 - now this div will be called single
198:04 - room
198:06 - info
198:08 - and what i would like to access is
198:10 - obviously right now
198:12 - my jsx
198:14 - and then we're going to start with
198:15 - article
198:17 - now the article class will be
198:18 - description
198:20 - and let's go with that let's get
198:22 - description
198:24 - and within the description we're gonna
198:26 - have few things
198:27 - first and foremost there will be a
198:29 - heading three
198:31 - and within the heading three we're just
198:33 - gonna write details
198:36 - details
198:37 - then next one up will be the paragraph
198:41 - so let me navigate to the end of the
198:43 - line create a new line
198:45 - and i'm going to be going for the
198:46 - paragraph
198:48 - and within the paragraph like i said we
198:50 - were going to be placing
198:52 - a description
198:54 - like so
198:56 - description and again what we're
198:58 - accessing right now
199:00 - is all the properties that we currently
199:03 - have description hopefully this is
199:06 - written correctly
199:07 - description let's save that and let's
199:09 - see what's going to happen sure enough
199:11 - what i have next is my details as my
199:13 - description
199:15 - also still within this single room i
199:17 - would want to create another article
199:20 - article
199:22 - then for the article class will be info
199:26 - info
199:27 - and then within this info there's going
199:29 - to be a few things there's going to be a
199:30 - heading 3 first and foremost
199:34 - and we will going to be targeting info
199:37 - and then also we would want to work with
199:39 - the price
199:40 - so let's say that we have a heading 6.
199:44 - so for the heading six we're going to
199:45 - have a price
199:47 - and for the price we're going to do
199:48 - simply a dollar sign
199:50 - and then we're going to go with actual
199:52 - price
199:53 - so i'm going to write price let's save
199:56 - and let's see sure enough what i have
199:57 - here is info with a price after that we
200:00 - would want to render size
200:03 - so let's grab this guy
200:05 - we're going to have the size
200:07 - this should obviously give me another
200:10 - thing but at the moment i don't see it
200:12 - so why don't we grab the size prop
200:15 - from our object and right after we
200:18 - change the size prop i also would want
200:20 - to add square footage
200:22 - so square foot
200:25 - like so
200:26 - and then i have
200:28 - pets and capacity and breakfast now just
200:32 - to show you where this is going to be
200:33 - located
200:35 - when we're all going to head over to our
200:37 - page we will going to have the max
200:39 - capacity and in this case i would want
200:42 - to do some kind of conditional rendering
200:44 - because let's say the room has max
200:46 - capacity of one it's not going to make
200:48 - sense one people so we would want to say
200:51 - if it's less than two then that would be
200:53 - our sleep person
200:54 - and then it will be
200:56 - two three whatever four people if it's
200:59 - plural now if it's going to be singular
201:01 - then we would want to render one person
201:03 - and also pets and breakfast will be
201:05 - conditional some rooms will have pets
201:08 - allowed some we won't so we're going to
201:10 - do a little bit of conditional rendering
201:12 - as well first and foremost let's start
201:14 - with capacity
201:15 - let's get heading 6
201:18 - and for the heading 6 we would want to
201:21 - render
201:22 - obviously like i said capacity
201:25 - and for the capacity let's write max
201:27 - capacity
201:29 - and then we'll just going to be like i
201:30 - said doing a conditional rendering where
201:33 - we'll use a ternary operator so in this
201:36 - case i will gonna check what is the
201:38 - value for the capacity if it's bigger
201:40 - than one
201:41 - then we're going to use a template
201:43 - literal where i'm just saying okay so
201:45 - they're all going to be a capacity
201:47 - obviously rendered but it will be people
201:50 - so if it's more than one so if the
201:52 - capacity is more than one then we'll
201:54 - render people if not then the capacity
201:57 - will be
201:59 - capacity will be person
202:01 - and in this case we do need to have
202:04 - again
202:04 - template literals
202:07 - person
202:09 - now that should do it but we do need to
202:11 - add here a question mark
202:13 - for our ternary operator and now
202:15 - everything is working and we have a max
202:18 - capacity of two people all right now
202:21 - after that we do have pets and breakfast
202:24 - and there's few ways how we can also
202:26 - check the same thing
202:28 - so i will gonna say all right i would
202:30 - want the heading six
202:32 - but in this case i will going to be
202:33 - checking for the pets prop
202:36 - and then again we're going to do a
202:37 - conditional rendering
202:39 - so we're going to close out this curly
202:41 - brace
202:42 - and we're going to return
202:44 - if the pets are allowed if that property
202:47 - is true
202:48 - on that particular room i'm going to
202:50 - write that's allowed if it's not true
202:53 - then i'm going to say no
202:55 - pets
202:57 - allowed
202:58 - okay
202:59 - that's going to be our setup and last
203:02 - one will be breakfast and as you can see
203:04 - in this case pets are allowed and for
203:07 - the breakfast it's going to be even
203:08 - simpler where we're going to use the and
203:10 - operator
203:11 - we're all going to check if the
203:13 - breakfast property is true that means
203:15 - the breakfast is for free
203:18 - breakfast
203:20 - then we use and operator
203:22 - and we say free breakfast
203:25 - breakfast
203:27 - included and
203:29 - obviously if this property on that
203:31 - particular room will be false then we're
203:34 - just not going to render that string
203:36 - that's all
203:37 - now right after this section there's
203:39 - going to be one last thing
203:41 - where i would want to render the rooms
203:44 - or i'm sorry the extras that the room
203:46 - has so right after this section
203:49 - i'm going to write section with a class
203:51 - name
203:53 - like so class or why i'm typing class
203:55 - name i just need to type
203:57 - our room
204:00 - extras
204:01 - okay so this is going to be a room
204:04 - extras and then within this section
204:07 - we'll just going to head over to a
204:08 - heading 6
204:10 - and then we're going to write extras
204:13 - and then last but not least i would want
204:15 - to loop over this extras array
204:18 - and the way we're going to render we're
204:20 - just going to attach a class for that on
204:23 - our list
204:24 - so i'm going to say this on our list
204:25 - we're going to have a class of
204:28 - extras
204:30 - extras and then within this on our list
204:32 - why don't we do extras so obviously
204:34 - we're accessing right now the variable
204:36 - map again method
204:38 - then we're going to use item and index
204:39 - since these things will not change then
204:42 - what is going to be rendered
204:43 - and we would want to return each and
204:45 - every list item
204:47 - with that item that is in that array so
204:50 - let's write list item
204:52 - key
204:54 - and we're gonna obviously access the
204:56 - index because this should be unique
204:59 - and then within the list item
205:02 - let's close it out first of all and then
205:04 - within the list item we would want to
205:06 - return that specific item
205:08 - so let's write item
205:10 - and then here we're going to add
205:12 - over here this dash
205:14 - and let's see
205:15 - we should have extras and if we're going
205:17 - to check it out our recording
205:20 - yep these are going to be the extras
205:22 - that we are rendering if we're going to
205:25 - go back home
205:26 - again the presidential obviously going
205:28 - to have a different price
205:30 - different square footage
205:32 - capacity is going to be bigger pets
205:33 - allowed free breakfast because in this
205:36 - case the breakfast property is true
205:38 - and of course extras i added exactly the
205:41 - same i'm going to be going and running
205:43 - around and changing these extras for
205:44 - each and every room but this should just
205:46 - give you an idea how we can create
205:49 - whatever arrays or whatever we would
205:51 - want and then render them
205:53 - awesome we did complete single room page
205:57 - now what are we doing next well let's
205:59 - check it out so this would be the double
206:01 - missing room
206:03 - yada
206:04 - and then these are going to be the rooms
206:06 - so what we would need well rooms will be
206:09 - our last component but obviously when i
206:11 - say the last component what i really
206:13 - mean is that within the room page there
206:16 - will be in fact two components one of
206:18 - them will be for the searching and the
206:21 - second one will be displaying all the
206:24 - rooms that are being searched for so
206:26 - let's say we're going to be searching
206:27 - for rooms that are less than 205 and
206:31 - obviously these are going to be three
206:32 - rooms if you want to search less so on
206:35 - and so forth we're going to be
206:36 - displaying the rooms
206:37 - in order to make this simple because i
206:40 - still want to show you how we can render
206:42 - the context within the functional
206:45 - component and there's actually two ways
206:47 - what we're going to do is we're going to
206:49 - set up one container component that will
206:52 - going to hold both of these values okay
206:54 - now it's also a little bit easier
206:56 - because i think this is going to
206:57 - structure our code better and the plan
207:00 - will be very simple we're going to head
207:02 - over back to our components
207:04 - and then within components we're going
207:05 - to create three new files so the first
207:08 - one will be rooms
207:10 - container that's we're going to be that
207:12 - parent container for both of them and
207:14 - for now like i said we're all going to
207:15 - create this as a functional component
207:18 - so let's make sure that this is
207:19 - functional
207:20 - let's actually access it and the moment
207:23 - we're going to do that of course we
207:24 - again are using
207:26 - what we're using while we're using the
207:28 - es6 snippets of course so let's head
207:30 - over back
207:32 - and that's not what i wanted let's head
207:34 - over here
207:35 - and yeah let's actually get those
207:37 - snippets
207:38 - for some reason again my vs code is like
207:40 - slowing down on me
207:42 - and let's fix that yep now i have my
207:45 - functional component
207:46 - and then within the functional component
207:48 - let's just write hello
207:51 - from
207:52 - rooms
207:54 - container and we might as well can right
207:57 - away import both of the things we're
207:59 - going to be creating so first one will
208:01 - be rooms filter so i can just call this
208:04 - the rooms filter from
208:06 - then this will be in the same directory
208:08 - so at the moment we cannot access it but
208:10 - i'm going to call this rooms
208:12 - filter.js then we're going to copy and
208:15 - paste that and the second one will be in
208:17 - fact uh the actual room list so that
208:21 - will be where we're going to be
208:22 - displaying the rooms that are we are
208:23 - filtering so room list
208:26 - and room list and why don't we right
208:28 - away render them again there's going to
208:30 - be an error if you're going to save the
208:32 - file but eventually they will be there
208:35 - so rooms filter
208:37 - let's copy and paste that and we're
208:39 - going to call this
208:41 - room list
208:42 - once we have this set up like i said we
208:46 - would need to create these two
208:47 - components so first one will be room
208:50 - list js where again this will be
208:53 - functional component
208:55 - and we are just going to grab all the
208:56 - rooms that we're going to have
208:58 - and that way let's just call this hello
209:02 - from
209:03 - room
209:05 - list like so
209:07 - and then what else we have that room
209:10 - uh filter yeah
209:12 - new file room
209:15 - filter.js and again let's call this
209:17 - functional component
209:18 - room filter
209:20 - and just hello
209:22 - hello from room filter
209:25 - then let's save them one by one room
209:27 - list room container i will gonna live
209:30 - these tabs open because obviously we're
209:33 - going to be doing a bunch of work here i
209:35 - can close the single room i will going
209:37 - to leave the contacts open because we
209:39 - will going to do a little bit of work
209:41 - there we don't need the room
209:43 - and what else do we have i don't think
209:45 - we need featured rooms anymore either
209:47 - all right now
209:49 - we would want to navigate to the room
209:51 - page just so we can see what is
209:52 - happening
209:53 - so at the moment nothing is happening
209:55 - because we do need to have our container
209:58 - so again let me open up the sidebar
210:00 - we will gonna head over to the rooms
210:02 - page
210:03 - and let's say import
210:05 - our rooms container i believe that was
210:08 - the name right so rooms container
210:11 - and then we all gonna say
210:13 - that from
210:15 - and that
210:17 - so components and then within the
210:19 - components we had a rooms component
210:22 - now be careful as you're saving of
210:24 - course your files notice how there is an
210:26 - issue where basically i'm one place i'm
210:29 - saying a room list and then a room
210:31 - filter
210:32 - and then the next one is let's say rooms
210:34 - so again this is singular and plural
210:36 - issue
210:37 - where that's the reason why sometimes
210:39 - there's an issue okay now in this case
210:41 - it says cannot find rooms filter
210:44 - which is weird so let's head over to
210:48 - filter this should be in the same thing
210:51 - so
210:52 - actually don't understand why we can't
210:53 - access it it's in actually the same
210:56 - directory so it says cannot resolve
210:59 - rooms filters and using components
211:03 - interesting why we can't get rooms
211:06 - filter oh because it's room yeah you see
211:08 - this is the issue sometimes when you go
211:10 - with the room and rooms and that's you
211:12 - know that's why sometimes i just told
211:14 - you to be careful in fact i made a
211:16 - mistake myself okay now this will be
211:19 - rooms and at the moment we're not
211:20 - rendering anything
211:22 - so let's head over back to rooms
211:25 - and again we would need to create of
211:26 - course the fragment because otherwise
211:29 - this is not going to work and we're
211:30 - going to have
211:31 - to have no
211:33 - adjacent jsx
211:35 - so this will be my fragment
211:37 - and then let's render room container or
211:41 - rooms container or you know what this is
211:43 - getting really really annoying what i'm
211:45 - going to do right now is i'm just going
211:46 - to rename it so by mistake i in fact
211:49 - called it rooms and it should be
211:51 - probably a room container because
211:53 - otherwise this is just really really
211:55 - getting annoying so let's say this will
211:58 - be rooms
211:59 - as well as within the actual rooms
212:02 - we're going to get a room
212:04 - and this will be from room so let's save
212:06 - that and at the moment this is again
212:08 - complaining is not defined
212:11 - because we have rooms container and now
212:13 - let's say that and yes finally
212:15 - everything is successful
212:17 - where we have hello from rooms
212:20 - and then we have two of the components
212:22 - one is filter and one is
212:24 - the room list
212:26 - now my first thing
212:28 - is that i would like to show you
212:30 - how
212:31 - we can obviously work with the context
212:34 - as far as the functional components are
212:36 - concerned because at the moment
212:38 - we want to access the context because
212:41 - there's some things we would want to
212:42 - pass it down to a room filter as well as
212:45 - the room list so we'd want to grab the
212:47 - rooms the sorter rooms
212:49 - as well as the loading because we will
212:53 - gonna have to check loading here however
212:55 - that one obviously we're not gonna pass
212:56 - it down that one we just wanna check it
212:58 - ourselves but also there will be a
213:02 - method
213:03 - and that's what we're going to be
213:04 - looking for okay
213:06 - now what we want to do first is head
213:09 - over back to the context
213:11 - and notice what happened so the first
213:13 - time we had we had this context correct
213:17 - where we had this dot context and we
213:20 - were able to access it because we were
213:22 - working with a static type and then this
213:25 - was equal to the my context and we set
213:28 - the sequel to a this dot context and
213:30 - then we got the value
213:32 - if this is a functional component we
213:34 - cannot do that
213:35 - now instead what we are looking for is
213:37 - for the consumer that we created all the
213:40 - way in the beginning
213:41 - and the way we can access that is in
213:44 - fact using the render props
213:46 - where the return
213:48 - in between the component will not going
213:50 - to be just a simple some kind of value
213:52 - but in fact this will be a function
213:55 - now this function takes an argument
213:57 - of our object that we placed
214:00 - now just to show you where this is
214:03 - in the context remember all the way in
214:04 - the bottom we had our value that was
214:07 - equal to a state
214:10 - so
214:11 - here
214:12 - we can access that value but i think
214:14 - it's going to be easier a little bit to
214:15 - show you how this works but the general
214:17 - idea is like this so
214:20 - rooms container
214:21 - first and foremost now we do need the
214:23 - consumer remember we imported in fact or
214:26 - exported three things room provider room
214:28 - consumer and room context and all the
214:30 - time we have been using this guy the
214:32 - context one now we in fact need this
214:34 - consumer so let's head over to the
214:37 - container
214:38 - we're gonna import we're gonna call this
214:40 - or by the way this is a name import so
214:43 - we need to call it
214:44 - like it is
214:45 - room and this was consumer
214:50 - then this will be from the context so
214:52 - again we need to access the
214:54 - context of course and then once we have
214:57 - accessed the context i also would want
215:00 - to right away get the loading component
215:03 - so i'm going to say all right import
215:06 - loading
215:07 - and that will be my loading component
215:10 - loading component
215:12 - and now like i said
215:14 - what happens is that i will have to use
215:17 - this room consumer to access my context
215:20 - so the way this is going to work is
215:22 - going to be very interesting especially
215:24 - if you're doing this the first time so
215:25 - we have our component room consumer and
215:28 - like i said in order to access this
215:29 - information
215:31 - we need to run the function here okay
215:33 - and this is something called render
215:34 - props
215:35 - now within the function the only
215:37 - argument here is going to be this value
215:39 - the value that we are in fact
215:42 - passing
215:43 - in our context this is exactly what
215:46 - we're accessing so what we can do is
215:49 - since this is the function i obviously
215:51 - will gonna have to do some kind of
215:53 - return however in this case why don't we
215:55 - set it up
215:56 - where we have right now our divs oh so
215:59 - this would be my return
216:00 - let's place that that is our return but
216:03 - since this is a function we can start in
216:06 - fact destructuring it we can actually
216:08 - start looking at what values are we
216:10 - getting so again this would be the same
216:11 - thing as we would set up in the class
216:14 - this dot context type and then accessing
216:17 - by this that context so why don't we
216:19 - check it out const
216:21 - and again maybe we can just value uh
216:24 - maybe we can just console.log just so
216:26 - you believe me that this is actually
216:28 - happening
216:29 - let's write value and i understand that
216:32 - in the beginning
216:33 - this kind of syntax
216:35 - might be throwing you off a bit because
216:38 - again we're just not accessing simply
216:41 - the
216:42 - variable that we're getting from the
216:44 - actual context in fact we do need to run
216:47 - this function and that's the reason why
216:49 - of course if
216:50 - you have the class this is probably much
216:53 - simpler and also in the rooms filter we
216:57 - will check it out how we can use it
216:59 - as a hook where we can do
217:02 - a lot
217:03 - like we're doing within the class just
217:06 - by using the hook again that will be
217:08 - in the rooms filter component so far
217:11 - we're dealing with this render problem
217:13 - because i want to show you a couple ways
217:14 - how we can do that now in this case i
217:16 - will gonna head over to my recording i'm
217:18 - gonna go to rooms and if everything is
217:20 - correct i should have
217:23 - my value object and of course i do
217:26 - and now check it out so everything that
217:28 - we had in the state we have access to
217:30 - and we already know how to the structure
217:33 - in fact i think we're experts already
217:35 - and that's it let's just start grabbing
217:37 - the values so i'm going to be looking
217:38 - for loading
217:40 - i will going to be looking for
217:42 - sorted
217:44 - rooms as well as the rooms and this will
217:48 - be from the value now my plan is to pass
217:51 - the sorted rooms down to a room list
217:54 - and then the rooms into rooms filter
217:58 - please remember that whenever we're
217:59 - going to be working with rooms filter we
218:01 - also we're going to grab some more
218:02 - functions that we haven't set up yet in
218:04 - context and we could technically set
218:06 - them up right now and pass it down to
218:08 - rooms filter however since i want to
218:10 - show you how you can use use context
218:13 - which we'll do in rooms filter this is
218:15 - why we're going to be doing
218:16 - grabbing a little bit of information
218:18 - from the context
218:20 - in our container and then a little bit
218:22 - draw more from filter and understand
218:24 - that you can do it either way i could
218:26 - grab everything within a rooms filter or
218:28 - i can just pass it down
218:30 - like here within the room container the
218:33 - only the reason why i'm doing this
218:34 - because i want to show you multiple ways
218:36 - how to do that okay and in fact in the
218:38 - next video
218:39 - we're going to check it out how we can
218:41 - do this with a higher order component
218:43 - again it's kind of important whenever
218:44 - you're going to be working with context
218:46 - to kind of know these ways how we can do
218:48 - that so in this case i could say sorted
218:51 - and i'm just going to say that this will
218:53 - be rooms so i will gonna set this up and
218:56 - you know what in here i'm actually gonna
218:58 - pass the rooms so the sorted rooms will
219:01 - be passed into rooms list
219:03 - but i will gonna call this prop exactly
219:05 - the same
219:06 - so i'm going to say yes there will be a
219:08 - rooms prop so each of them we're going
219:10 - to get rooms prop
219:11 - but
219:12 - the difference would be one we'll get
219:14 - sort of rooms and the other one we're
219:16 - going to get the rooms and you'll see
219:18 - when we start filtering why in fact we
219:20 - are doing that but i also would like to
219:23 - check the loading because let's not
219:26 - forget
219:26 - eventually when we're getting our data
219:30 - from
219:31 - the external api we need to make sure
219:34 - that the actual data is there and that
219:37 - would still require checking it within
219:39 - the room page all right now in this case
219:42 - it's very simple i'm going to say if
219:44 - loading
219:46 - if loading is true
219:48 - then i would want to display or return
219:51 - in fact the loading component
219:54 - loading component and then if it will be
219:57 - false which obviously can be our case
220:00 - because this is done locally
220:02 - then of course we're just going to be
220:03 - rendering and passing down these props
220:06 - into rooms filter and rooms list now
220:09 - let's test it out just so we know that
220:11 - loading is for sure working again i'm
220:13 - going to head over back to set state
220:16 - and i'm just going to say that or you
220:18 - know what i could have just done it like
220:19 - i could have commented out and now i
220:21 - should have a massive loading because
220:23 - obviously we didn't change it from two
220:25 - to false so we know that that is working
220:29 - and why don't we check it out what would
220:31 - be another way how to write this because
220:33 - like i said you might be thrown off a
220:36 - bit from this
220:38 - component where we are pretty much using
220:40 - this render props where we are using the
220:43 - consumer
220:44 - and then we're passing it this way where
220:47 - we're using the function now this is not
220:49 - unique to context you'll see in fact
220:52 - uh all over the react that somebody
220:54 - might use this kind of pattern
220:56 - especially before hooks of course now
220:58 - that there's hooks there's probably less
221:00 - use of this case but you will gonna see
221:02 - this so just remember this is a function
221:06 - the argument is whatever we have
221:09 - currently in the context and then you
221:11 - just need to access it and make sure
221:13 - that you're obviously returning that
221:15 - this is a function but you can do all
221:17 - kinds of functionality right here on top
221:20 - don't do it in return that is against
221:22 - the rules of jsx but you can definitely
221:25 - definitely do it here on the top all
221:27 - right
221:28 - now while we're still in a subject of
221:30 - course
221:31 - why don't we cover how we can do this
221:34 - with a higher order component
221:37 - however what i would like to do right
221:39 - now
221:40 - is in fact first of all set it up and
221:42 - the way we're gonna set it up will be
221:44 - within the context
221:46 - now let's go somewhere here
221:48 - let's create that component
221:51 - let's say that you don't like this kind
221:52 - of syntax you're like i cannot stand the
221:55 - fact that i do need to pass
221:57 - the function
221:58 - and then i need to access this value
222:01 - so let's say that you decide to go a
222:03 - higher order uh component rod now how
222:06 - this is going to work i'm going to say
222:08 - export i'm going to call this function
222:11 - we can just say with
222:13 - our room
222:14 - consumer it doesn't really matter how
222:16 - you call it
222:17 - and then within this function first and
222:19 - foremost i'm going to pass in the
222:21 - component
222:23 - so there will be going to be a component
222:25 - that i'm going to pass
222:26 - within this function but we need to
222:28 - remember that in this case this will be
222:30 - a room container
222:31 - but understand that you can do it
222:33 - obviously with any component where you
222:35 - want to hook up the context now once i
222:38 - pass it within the function what's
222:40 - interesting about this function it will
222:42 - return another function that's what they
222:44 - call it higher order components where
222:47 - basically they return another component
222:50 - okay
222:51 - now let's call this return then we're
222:53 - going to write function and of course
222:55 - you can do this with an arrow function
222:57 - but i just find it a little bit
223:00 - more understandable if we write it the
223:02 - es5 way where we're writing the
223:04 - functions because otherwise if you just
223:06 - have a bunch of arrows there i think
223:08 - that
223:09 - i mean some people might get confused
223:12 - let's call this consumer
223:14 - wrapper again we can call this however
223:16 - we would want and what's important about
223:19 - this function is that we're all going to
223:21 - be grabbing props now i understand that
223:24 - you probably will be asking well what
223:26 - props are you talking about
223:28 - we will run this
223:30 - function with consumer within this room
223:33 - container and of course in our case we
223:37 - did not pass anything as a props
223:40 - but let's say if we're going to be
223:42 - running this with rooms filter notice we
223:44 - are passing some kind of props so what
223:46 - we would want to do is if we're creating
223:48 - this higher order component we do want
223:51 - to pass those props into the component
223:54 - that will be returned okay now last
223:57 - thing from this function what are we
223:59 - going to be returning finally
224:01 - okay we have our first function we have
224:03 - our second function the one that's
224:06 - grabbing the props and also we are doing
224:08 - the return so what
224:11 - on earth are we going to be returning
224:13 - here well this is finally where we're
224:15 - going to be returning a consumer so i'm
224:18 - going to call this a room consumer
224:21 - and remember we still need to follow the
224:23 - rules
224:24 - because it still will return the value
224:27 - because remember we had this setup where
224:30 - room consumer is returning this function
224:33 - now in this case though
224:34 - we will gonna return already right away
224:37 - the component
224:39 - that will be passed in so the way we're
224:41 - gonna do that is gonna be like this
224:43 - component
224:44 - then we're going to access the props so
224:46 - dot dot
224:48 - and props
224:49 - that component might or might not have
224:53 - let's make sure that i'm typing actually
224:55 - correctly because i would want to access
224:57 - this particular component as well as i
225:00 - would want to right away set up context
225:03 - and the context will be equal to the
225:05 - value the prop of the context obviously
225:08 - is not mandatory you can call this
225:10 - however you would want the most
225:11 - important thing is that you are
225:13 - accessing this value here so this way
225:16 - you're kind of skipping where instead of
225:18 - running through your whole application
225:20 - and each and every time using a room
225:22 - consumer what in fact you will do
225:25 - you're just going to grab this higher
225:27 - order component and you will wrap your
225:30 - component within this higher order
225:32 - component and your component will be
225:34 - returned right away with the props that
225:38 - component has which in our case we
225:39 - didn't but like i said again for the
225:41 - room filter let's say you will gonna
225:43 - have
225:44 - as well as context prop or any kind of
225:46 - prop how you'd like to name it that is
225:48 - equal to this value so how this is gonna
225:50 - work
225:52 - we already are exporting and now i'd
225:54 - want to go back to the room container
225:57 - and you know what i know this might be a
225:59 - little bit redundant
226:01 - but i'm going to select everything
226:03 - i will going to comment this out just so
226:05 - you can have it for your reference and
226:08 - we're basically going to retype
226:09 - everything from the scratch now this is
226:11 - not going to take like ages or anything
226:13 - like that this will be quite uh fast
226:16 - because again everything is already
226:18 - there now some things we might as well
226:20 - copy and paste it like let's say imports
226:23 - these are obviously going to be mostly
226:25 - the same
226:27 - so let's copy and paste that
226:30 - and we're going to select them all this
226:32 - will be my loading now the difference is
226:35 - of course i don't want room consumer
226:37 - i want with room consumer that was the
226:40 - higher order component that we created
226:43 - then i also would want to create
226:45 - obviously here function
226:48 - then room consumer i'm going to name
226:50 - this
226:51 - like so
226:52 - and then within the props i will going
226:55 - to be able to access to the context now
226:58 - one thing that we do need to do is as
227:01 - we're going to be exporting this we need
227:03 - to wrap
227:05 - the
227:05 - room consumer the one that we currently
227:08 - have or you know what let's call this
227:09 - room container sorry
227:11 - room container we would want to wrap it
227:14 - in the with room consumer so let's write
227:17 - it here
227:18 - export
227:19 - default just so we can name it however
227:21 - we would want and then we have this room
227:23 - consumer and we pass in the room
227:27 - container and that's the reason why
227:28 - we're going to have access to this
227:30 - context okay let's rent the room
227:33 - container now we have successfully
227:35 - wrapped
227:36 - the container
227:38 - in the
227:39 - with room consumer so how a higher order
227:41 - component and now we're going to have
227:44 - access to this context just like we
227:46 - normally would with the props and again
227:48 - here's the question what do you find
227:50 - more easier just setting up this room
227:52 - consumer with the value or if you have
227:55 - to use it all over the page you maybe
227:58 - would want to go with higher order
228:00 - component but there's the last thing
228:02 - that actually is again very easy one
228:04 - which we're going to check it out in
228:05 - rooms filter
228:07 - where you can just use the hooks again
228:09 - this is really up to you now let me
228:11 - quickly finish this we're going to say
228:13 - again loading
228:15 - loading
228:17 - sorted rooms
228:19 - and then rooms we're obviously passing
228:22 - this will be coming in this case from
228:24 - the context of course
228:25 - then we can also do right away for
228:27 - loading and then of course this all will
228:30 - be exactly the same so we can just copy
228:33 - and paste that
228:34 - okay a little bit of copying pasting not
228:36 - too much
228:38 - okay so we got if
228:40 - then in this case this obviously is
228:42 - working really well now the only
228:44 - difference is that i do need to add here
228:47 - obviously the closing tag and this
228:49 - should fix everything that i had
228:51 - on the errors hopefully it will
228:54 - so in this case i am accessing if
228:57 - and for some reason i'm not getting back
228:59 - to return
229:00 - and that's why sometimes the issue with
229:02 - copying pasting i guess
229:04 - let's delete that let's save it and yes
229:06 - it is working everything is working
229:08 - correct again this is really up to you
229:10 - however you would like to do in the
229:12 - rooms filter
229:14 - we'll check it out the
229:16 - hook that we can again
229:19 - use to access the context within the
229:22 - functional component again if you would
229:24 - have some kind of class-based component
229:27 - it's obviously just using the static
229:29 - type
229:30 - we have successfully finished with a
229:32 - room container so by the way we can get
229:34 - rid of this guy we don't need it here
229:37 - and if you really don't want to have
229:40 - this div here of course you can just
229:42 - delete it and this will become react
229:44 - fragment and next on our list will not
229:47 - be rooms filter in fact it will be a
229:51 - rooms list now the reason for that is
229:54 - because this will be a more
229:56 - straightforward where we just want to
229:58 - render all the rooms that we're going to
230:00 - be filtering and the only thing that i
230:02 - would want to show you at the very end
230:04 - is the difference in css a little bit
230:06 - and pretty much it because we were going
230:08 - to grab the room container or i'm sorry
230:10 - room component that we already created
230:13 - and we'll just going to render the list
230:15 - that we're getting okay
230:16 - now i can close the room container i
230:19 - will not need it anymore
230:21 - then where is my buddy where is my room
230:24 - list here it is
230:26 - and first of all like i said let's
230:28 - import the room component from
230:30 - this will be in the same
230:32 - folder of course or directory then i am
230:36 - getting as a props i'm passing here
230:38 - rooms so i'm grabbing this rooms prop
230:42 - and then i obviously would want to
230:44 - render them
230:45 - now one thing that i would want to set
230:48 - it up is if there are no rooms because
230:51 - we will going to be filtering and
230:52 - there's going to be case that rooms
230:55 - array that we're going to be getting as
230:57 - a prop will be in fact empty so that way
231:00 - i would want to render that
231:02 - unfortunately no rooms match your search
231:04 - parameter now you don't have to do it
231:06 - but i think this is just going to be a
231:07 - little bit better user experience
231:10 - now the way we're going to do it is
231:11 - going to be very simple i'm just going
231:13 - to check if the rooms
231:15 - room's length
231:17 - is in fact equal to zero
231:20 - then i'll gonna render one thing so i'm
231:22 - gonna say return
231:23 - and then in that case we're gonna go
231:25 - with a div by the name of
231:28 - empty
231:29 - search and again this is already set it
231:31 - up in our css and let's just write this
231:35 - long text
231:37 - and hopefully
231:38 - i will try to
231:41 - not mess it up
231:42 - as far as
231:45 - the spelling is concerned no rooms
231:47 - matched
231:49 - your
231:51 - search
231:53 - search parameters
231:55 - like so and then let's do another return
231:58 - which in fact will be normal return
232:02 - obviously since the array in most cases
232:04 - will gonna have some kind of items in
232:07 - this case i will gonna use section here
232:10 - so let's use a section with a class of
232:13 - room
232:14 - list
232:15 - like this and this is obviously not
232:17 - giving me what i would want so
232:19 - let's write section
232:22 - and then let's add right away class name
232:24 - and we're going to call this a room list
232:26 - or you know what no rooms
232:29 - rooms list
232:30 - and we're going to have the section now
232:33 - within this section there's going to be
232:34 - a room list center so simple there with
232:36 - the room
232:38 - list
232:40 - center and then within this div
232:42 - we would want to map our array so let's
232:45 - call rooms again the prop we're getting
232:48 - map method
232:50 - item each and every room
232:52 - as an argument and then we would want to
232:54 - return that room wrapped in our room
232:57 - component that we already had the key
232:59 - here will be the same item
233:02 - item id
233:04 - and then room
233:05 - will pass as an item so the room prop
233:09 - that we're expecting in the room
233:11 - component we're just going to pass each
233:13 - and every object that we have and that's
233:15 - it that will be our massive
233:18 - and interesting room component
233:20 - and the moment we render it notice
233:22 - obviously we are getting a bunch of
233:24 - bunch of rooms
233:26 - now there's one thing that's missing and
233:28 - that is again this s
233:30 - so i apologize there's rooms and room
233:33 - and this is what's missing that's the
233:34 - reason why it's rendered this way the
233:36 - moment i'm going to save it obviously
233:38 - right now the rendering will be better
233:41 - we can check it out in the context
233:44 - let's say
233:46 - i will going to say sorted rooms will
233:48 - just gonna be an empty array because
233:50 - remember we're passing the sordid rooms
233:53 - the rooms itself will be passed in a
233:54 - filter so again if i'm gonna comment
233:57 - this out notice we should have the text
233:59 - unfortunately no rooms matched your
234:01 - whatever parameters and we're going to
234:03 - get that text if our array that we're
234:06 - going to be getting from the context
234:08 - will be empty now the last thing that i
234:10 - would want to show you
234:12 - as far as css is concerned and again
234:15 - we're going to do finding because we
234:16 - have rooms list
234:19 - now notice how for
234:21 - rest of the grid i was using autofit
234:24 - when i did my function with repeat and
234:27 - then i used min max where minimum column
234:29 - width should be like this and then
234:31 - maximum is going to be one fraction
234:34 - that would be part of the screen
234:36 - and
234:37 - in the rest of them i used autofit and
234:39 - in this case i used autofill now if you
234:41 - want to see the difference is that with
234:43 - autofill
234:45 - if there will be extra room
234:48 - within let's say your layout it will
234:51 - gonna enter this one empty one so
234:54 - there's gonna be this one empty column
234:57 - however with auto fit this is just going
235:01 - to make sure that you have three columns
235:04 - so they all going to be spanning all
235:05 - across so if with auto fill if there's
235:08 - going to be extra room for that column
235:10 - the same with a rest of your columns it
235:12 - will be inserted so in this case i think
235:15 - it looks a little bit better because
235:16 - let's imagine that if we have one
235:17 - component it would be just spanning all
235:20 - across the page because it would take up
235:22 - all the space that would be the effect
235:24 - with auto
235:26 - fit now with autofill it just says okay
235:29 - you have room for one column but if you
235:31 - have more i'm just going to be creating
235:33 - the empty spaces okay that's the only
235:36 - thing that i would want to show you as
235:37 - far as the css concerned
235:40 - that i find of course important and once
235:42 - we're done with a room list then we're
235:45 - going to start working on the room
235:47 - filter
235:48 - all right guys i think we're ready to
235:50 - our most important component which we
235:52 - will use for the filtering before we do
235:55 - anything within the search filter or
235:58 - room filter component i would want to
236:00 - make some changes in our context and the
236:03 - reason is very simple if you have done
236:05 - any kind of work with react or
236:07 - especially with react forms you know
236:09 - that there's a option for using the
236:12 - controlled inputs now what does that
236:14 - mean that there is a value in the state
236:17 - that is in fact reflecting whatever you
236:20 - have right now and then you also have
236:22 - the onchange handler which makes sure
236:26 - that every time we're going to making
236:27 - change it is also affected in state and
236:31 - this is exactly what we would want to do
236:33 - here as well so we will going to have to
236:35 - set up some values in the context state
236:38 - then later on we will can also set up a
236:41 - function the handle change function as
236:44 - well as we are going to pass them down
236:46 - into a filter component and we'll attach
236:50 - them to each and every component
236:52 - obviously not all the values from the
236:54 - state but that particular value just so
236:56 - we can control the input okay first and
236:59 - first and why don't we head over to
237:01 - context
237:03 - then within the context like i said we
237:05 - would want to add more values after the
237:07 - loading i would want to add type
237:10 - and these will be the default values or
237:13 - basically i'm saying type by default
237:15 - will be all if you're wondering this is
237:17 - obviously our first select box now i'm
237:20 - not gonna go one by one because you'll
237:22 - see obviously what is happening meaning
237:24 - i'm not gonna scroll over to the page
237:27 - just to show you where we're gonna be
237:28 - using it
237:29 - because my first
237:31 - uh deal is to actually render them so
237:34 - capacity
237:35 - one that will be the default price by
237:38 - default will be zero
237:41 - then min price
237:43 - will be also zero
237:45 - also i would want max price
237:48 - that also will be zero
237:51 - then mean size
237:53 - again you guessed it zero
237:56 - max size
237:58 - you guessed it zero
238:00 - and then we have breakfast
238:03 - which uh will be by default false
238:06 - as well as last one pets by default
238:09 - also will be false so we have set up the
238:12 - values in a state
238:13 - before we start working on our handle
238:16 - change
238:17 - i would also want to make few changes
238:19 - here
238:20 - notice how we're using this that state
238:22 - where we're changing the values in state
238:25 - so as far as the price and the size is
238:28 - concerned i would want to set up the max
238:31 - ones
238:32 - not as zero but whatever max i will be
238:36 - getting from my data so what does that
238:38 - mean well you see by default once you're
238:40 - gonna refresh it notice my max price
238:42 - will be all the way up to 600 as well as
238:46 - my max size will be right here so those
238:49 - are the two values that i don't want
238:50 - zero but i want specifically from the
238:52 - data so i don't want to guess what is
238:54 - the max price for the room in fact i
238:57 - would want to calculate that from the
238:58 - data that i'm going to be getting the
239:00 - way we can do that i'm just going to set
239:02 - up the variable
239:03 - max price now we're going to use math
239:07 - max
239:08 - but we know that we would need to pass
239:10 - it as a values not as an array so in
239:12 - this case we can use the spread operator
239:15 - and i can just use rooms now again rooms
239:18 - will be the data that we're getting back
239:20 - right here
239:21 - and then we're going to write map
239:23 - then of course item so return me the
239:26 - price for each and every item so what
239:30 - will happen
239:31 - is that we will going to be returning
239:33 - the array because we're using map then
239:35 - we right away going to use the spread
239:37 - and this way we're going to know our max
239:39 - price again we can cancel log it but i
239:42 - think we can skip it this way and the
239:44 - same way i would want to set up with a
239:46 - size
239:47 - so we're gonna copy and paste that now i
239:49 - will gonna rename this
239:51 - this will not be max price it will be
239:53 - max size and i will be looking not for
239:56 - the price
239:57 - but also for the size
239:59 - and the way we're gonna do that right
240:01 - now in a state
240:03 - is first of all the price we're gonna
240:05 - set it equal to max price because again
240:07 - right away you see that my price is all
240:09 - the way on the end that is my max price
240:12 - and we're just going to say all right
240:13 - max price then we already have in a
240:16 - state the max price property so we just
240:20 - need to write max and not there
240:22 - but we need to write it within this.max
240:26 - price so that will be equal of course to
240:28 - the max price and last one will be max
240:31 - size
240:32 - that also will be equal to the variable
240:34 - that we just created let's save that
240:37 - and then we need to set up two functions
240:40 - at least some kind of structures a
240:42 - minimal structure for them
240:44 - where right after the get room
240:46 - i will gonna say handle change
240:49 - that will be the name of my function
240:51 - and i'm just going to say that this
240:53 - function will be expecting an event
240:56 - and you know what for the time being why
240:58 - don't we cancel log the event target
241:01 - type name and value and the way this is
241:03 - going to work just like in regular
241:05 - javascript we have access to the name
241:07 - object then within the event object we
241:09 - have the target
241:11 - uh that we're clicking or
241:13 - that is actually being changed not maybe
241:15 - we're clicking on it
241:17 - but then we also have option of
241:19 - accessing the value from the target or
241:22 - from the event the name
241:24 - as well as the type so the way we're
241:26 - going to do that we're going to be const
241:29 - let's just go with first of all i don't
241:31 - know maybe type
241:33 - and that will be event
241:35 - target
241:36 - type and then we're going to copy and
241:39 - paste that and these values are just
241:41 - going to change to name
241:44 - name like so
241:46 - that will be my variable and then we are
241:49 - looking for not type but we are in fact
241:51 - going to be looking for the value
241:53 - so then dot target value and just so we
241:57 - can see everything that's happening in
241:59 - fact we're going to do a simple log of
242:01 - type
242:03 - name
242:04 - and value okay
242:06 - and then eventually we're going to call
242:09 - another method
242:10 - once we're done changing the values
242:12 - because what we're going to do with this
242:13 - function is in fact we're going to grab
242:16 - everything that controlled inputs were
242:18 - going to give us and we're going to fix
242:21 - the values in a state because notice we
242:23 - have a bunch of properties so what we're
242:25 - going to do is we're going to access
242:26 - those properties and change it from
242:29 - within this handle change function and
242:31 - then once we run the function after that
242:33 - we're going to run another function
242:36 - which we'll call
242:38 - filter rooms
242:40 - filter rooms that
242:42 - will not look for any arguments
242:46 - it will just grab the values from the
242:48 - state
242:49 - and filter rooms and at the moment we
242:51 - can just say hello doesn't really matter
242:54 - i'm not going to call it anyway okay
242:56 - now what we would want to do though is
242:59 - in the state we have get room but i also
243:02 - would want to pass
243:04 - not both of them not filter rooms but
243:07 - just handle change
243:09 - so i can write handle change will be
243:11 - equal to
243:12 - this dot handle change and once we make
243:15 - these changes
243:16 - in the context we are ready to head over
243:19 - to a room filter
243:22 - and start working with our data
243:25 - once we have our general setup in the
243:28 - context.js i think this is the great
243:30 - time to head over to room filter
243:33 - where we're going to do most of our work
243:35 - well it's going to still head over once
243:37 - in a while to context.js because we will
243:39 - going to have to add more functionality
243:42 - than just a simple console log
243:44 - but most of the work will be done here
243:46 - and first and foremost we're going to
243:47 - have to do some imports now i'm going to
243:49 - be importing right now use context which
243:52 - is a latest way how we can actually
243:55 - access context and this one is using the
243:58 - hooks so i'm going to say from and this
244:00 - will be from react and again this will
244:02 - be used because this is a functional
244:04 - component and of course we cannot use
244:07 - the static type here that is the reason
244:09 - why now we also would want right away a
244:12 - room context remember that was something
244:14 - that we used when we were not using the
244:17 - higher order component or the render
244:20 - props because we used actual room
244:22 - consumer now this is
244:24 - a whole context so hold the whole object
244:27 - that we're creating again we're
244:28 - importing that
244:29 - and then this will be from the context
244:31 - of course
244:32 - so from the context and last but not
244:34 - least we do have the title
244:36 - so i don't know whether you remember but
244:38 - all the way in the beginning we created
244:40 - this title component and that's what i
244:42 - will be right now importing
244:45 - let's grab it this is my title
244:49 - and first you probably are wondering
244:51 - well how we can access the context well
244:53 - very easy the only thing we need to do
244:55 - is set up some kind of variable which in
244:58 - my case will be context and we can use
245:00 - use context
245:03 - room context and if we want to double
245:06 - check what we're going to get
245:08 - let's just go with the context
245:10 - and let's check it out of course inspect
245:13 - not here but here
245:15 - and voila people we have our object so
245:18 - we don't need to use render props if we
245:20 - don't want to we don't need to use
245:22 - hieram component
245:24 - but we can use right away the hooks and
245:27 - in this case the use context of
245:29 - obviously it is
245:31 - very good to know them the higher order
245:33 - component than the render props because
245:35 - like i said this is not unique
245:37 - just to a context api you'll see those
245:40 - patterns as well
245:42 - but probably i think you will going to
245:44 - be sticking with use context because
245:46 - this is as straightforward as it gets
245:49 - just get that context api
245:51 - set this up equal to some kind of
245:53 - variable and you're good to go all right
245:56 - now what we would want to destructure
245:58 - from this particular variable well all
246:01 - the things pretty much that we have in
246:03 - the state and when i say all the things
246:05 - of course not all the properties but a
246:07 - bunch of them now let's start by handle
246:09 - change that was the function that we
246:11 - needed then i'll need a type and again
246:14 - only thing i'm going to be doing is
246:16 - listing basically a bunch of these
246:18 - properties all right so type capacity
246:20 - price because these will be used as my
246:24 - value
246:25 - on the inputs that's why i'm going to
246:28 - have the controlled input
246:30 - capacity
246:32 - capacity then let's do price
246:35 - we can also do i don't know min price
246:39 - mean price then also max price
246:43 - and i know this might be a little bit
246:45 - annoying but i need do need to type them
246:47 - out
246:48 - mean size
246:50 - max size
246:53 - breakfast
246:55 - breakfast and pets
246:58 - now this will be of course equal and
247:00 - we're gonna set it equal to context
247:03 - context let's save that okay now we have
247:06 - access to the variables awesome
247:08 - and why do we
247:11 - start working right now on what we're
247:13 - going to be returning now in this case
247:15 - obviously i have the div
247:17 - but instead i would want section
247:20 - section and now we're going to add some
247:22 - class name here so i'm going to say
247:24 - class name
247:27 - class name
247:28 - will be
247:29 - filter container
247:32 - filter container and in the first video
247:35 - we're just gonna pretty much set up the
247:37 - first one let's first input the select
247:40 - box
247:41 - because
247:42 - there's gonna be
247:43 - quite a big setup
247:45 - meaning we're gonna have to set up the
247:47 - input box and then we're gonna have to
247:49 - do a little bit of
247:51 - context where we're just working with
247:53 - handle change as well as we're gonna
247:55 - have to get unique values so why don't
247:57 - we start slow
247:59 - where we're just focusing on one input
248:01 - and then you'll see that it gets faster
248:03 - but the first one will include bunch of
248:06 - boilerplate that we're gonna have to do
248:08 - okay now within the filter container
248:12 - we're gonna have a room
248:14 - by the title of search
248:18 - rooms let's render that dude
248:21 - and let's see what we're gonna get
248:23 - that is obviously my title awesome
248:25 - search rooms
248:26 - and now i'm gonna be working with a form
248:29 - for the form there will be no action
248:32 - but i will gonna add class name
248:34 - now the class name will be form
248:39 - filter form sorry
248:41 - filter form
248:43 - and then within the form i will right
248:45 - away going to set up
248:46 - some kind of
248:48 - comments because it will going to be
248:49 - easier
248:50 - now that way i'm going to comment the
248:52 - line
248:53 - and we're going to say select
248:56 - type and let's write
248:59 - end of select type and the select type
249:02 - otherwise it's just going to get messed
249:03 - up at least in my opinion these comments
249:06 - kind of
249:07 - show me where i'm starting with this
249:09 - select input and where i'm ending
249:12 - then there's going to be div with a
249:14 - class of form
249:17 - group
249:18 - now within this div i would want first
249:20 - of all a label
249:23 - now label will be for the id of type
249:27 - and then we're going to write a room
249:30 - type
249:30 - after the label we'll have our select
249:34 - box for the select box we do have a name
249:37 - and we do need to use this
249:39 - name input now what is the reason for
249:41 - that because we will going to be
249:43 - grabbing that value
249:45 - right here when we're going to be
249:47 - working with our handle change so that
249:49 - is important that that name in fact
249:52 - matches so in this case i type type and
249:55 - the reason for that because
249:57 - of course here within the state i also
250:00 - have the type and you'll see why that is
250:02 - important just make sure that you
250:04 - actually type this type the id is just
250:07 - for the label so i'm going to say type
250:09 - and then we do want a value
250:12 - so i'm going to say value and the value
250:14 - will be the type that i'm getting
250:17 - back from the context state so this is
250:19 - how we're creating a controlled input
250:22 - then we also would want some class name
250:24 - for styling
250:26 - i'm going to say form control that i
250:28 - added
250:29 - for the styling and last but not least
250:32 - we would want that handle change so
250:34 - on change we're going to set this equal
250:37 - the function that we're getting from the
250:39 - context
250:40 - and the moment i save it
250:42 - notice this will be my input so far so
250:45 - good now what is missing though
250:48 - as you're looking at it what is in fact
250:50 - missing here
250:51 - well we're missing the values that we're
250:53 - getting from the state and the way
250:55 - obviously this data is going to work if
250:57 - i'm going to head over back to the data
250:59 - js
251:00 - for each and every
251:03 - room
251:04 - there will be type of room now the thing
251:06 - is though that i just want
251:09 - don't want all the rooms that i have
251:12 - because types are obviously going to be
251:13 - repeating let's say if you're scrolling
251:16 - up a little bit
251:17 - you'll notice that let's say type is
251:20 - single
251:21 - then i scroll over to the next
251:24 - uh
251:25 - room it's also going to be single so
251:27 - what happens is that i only want unique
251:29 - values if i'm looking at my finished
251:32 - project check this out
251:34 - i do have here
251:36 - only the unique values not repeated
251:39 - otherwise i'm going to have for each and
251:40 - every room i type so the more rooms i'm
251:42 - going to add it the more types they're
251:44 - going to be even though they were going
251:45 - to be repeating so we need to be careful
251:47 - there's few ways how we can do it we
251:49 - could technically set this up like this
251:51 - where if i'm going to head over to room
251:53 - filter
251:54 - then within the select
251:56 - i could be like okay so i'm going to
251:59 - grab the select and now i'm just going
252:00 - to manually add these types so first and
252:04 - foremost we would do let's say
252:06 - option we're going to set some value i'm
252:09 - going to say this i don't know single
252:12 - and then val and then the actual input
252:14 - would be single we could do it this way
252:17 - the problem though with this way is
252:19 - again you don't want to do anything
252:20 - manually you want to check the data
252:24 - that you're having and by the way where
252:26 - are we having the data
252:27 - remember when we were using the room
252:29 - filter
252:30 - let me show you
252:32 - we had rooms container
252:34 - and what we passed into rooms filter we
252:37 - passed everything from the context so
252:39 - all the rooms from the context and this
252:40 - is what i was talking to you that i just
252:42 - wanted to show you how we can pass the
252:44 - information we could technically get
252:46 - this from the context the same way so
252:48 - this is a bit of an overkill where i
252:50 - could get that information directly but
252:53 - i just wanted to show you how we have
252:55 - many ways how we can pass the context
252:57 - all right so what i'm would be
252:59 - interested
253:00 - is getting these rooms
253:02 - that are being passed
253:04 - and what i would like to do is instead
253:06 - of
253:07 - doing this manually where i'm like okay
253:09 - let me head over to my data and just
253:11 - find out what kind of types i have i
253:14 - would want to set up some kind of
253:15 - function
253:16 - that will return only the unique values
253:20 - how is this going to work
253:21 - well it's very easy
253:23 - first
253:24 - we will gonna have to set up some kind
253:27 - of function
253:28 - that will only only repeat or return
253:32 - unique values now we're gonna do this
253:34 - above
253:35 - where i'm gonna say get all unique
253:37 - values
253:39 - get all unique
253:42 - values and then why don't we set up the
253:45 - function
253:46 - const get
253:49 - unique
253:50 - and we're going to be passing two things
253:52 - the array of items so whatever items
253:55 - we're going to be passing but of course
253:57 - in our case that will be the rooms array
254:00 - and then the second one well what kind
254:02 - of unique values are you looking for
254:04 - whether you're looking for a unique type
254:06 - whether you're going to be looking for
254:08 - let's say unique capacity and so on and
254:10 - so forth in our case in fact there's
254:12 - going to be only two there's going to be
254:13 - this guess the capacity as well as the
254:16 - room type because the rest of them are
254:17 - obviously different inputs
254:19 - now in this case i will going to say
254:21 - value
254:22 - and then since this is a function i
254:24 - would want to return something so i
254:27 - would want to filter this out
254:28 - if you're struggling with what i'm about
254:30 - to write please head over to my channel
254:33 - you're going to head over and you're
254:35 - gonna see that there's a playlist
254:38 - for javascript challenges and one of the
254:40 - challenges in fact is looking for unique
254:43 - values because i'm not gonna spend
254:46 - too much time here this is very
254:48 - straightforward javascript and again if
254:50 - you need more information please head
254:52 - over there that is one of the solutions
254:54 - that we used so what i would want from
254:56 - this function to return is in fact an
254:58 - array
255:00 - but i will gonna spread it out right
255:01 - away and i'm gonna use new set
255:04 - now the key here with the new set data
255:06 - structure is the fact that set only
255:09 - accepts unique values so within a set i
255:12 - can just map over whatever items i'm
255:15 - going to be getting which again by the
255:16 - way will be rooms since we're going to
255:18 - pass rooms right here and then what i
255:20 - would like to return
255:22 - will be
255:23 - item
255:25 - and that item value
255:27 - so item
255:30 - value and what's happening here again
255:33 - we're using the dynamic properties this
255:36 - will be a string so i'm going to pass in
255:38 - the string
255:39 - it will going to check
255:41 - what kind of value you have for the type
255:44 - and if that value will not be in a set
255:47 - it will be included if it's in a set by
255:49 - default set will not gonna include so
255:51 - this is how we're gonna get all the
255:53 - unique values now let's test it out this
255:55 - function and we're just gonna pretty
255:57 - much say like this we're gonna say types
256:01 - types we'll use our get unique function
256:06 - then we obviously need to pass two
256:07 - things the array that we're going to be
256:08 - checking as well as what we're going to
256:10 - be checking for so i'm going to say
256:13 - type now i do want to add
256:16 - type of all
256:17 - because that's something that i'm
256:18 - interested because that's also going to
256:20 - be one of the options okay where i would
256:22 - want to get
256:23 - all the rooms with let's say all the
256:25 - types
256:26 - now why don't we add here maybe comment
256:29 - get
256:30 - and let's do it properly
256:33 - get unique
256:36 - uh get unique types
256:38 - then why don't we add all again comment
256:41 - add
256:43 - all
256:44 - and why don't we say okay so we had our
256:46 - array because obviously we're getting
256:48 - back an array and we can just use again
256:51 - spread operator where i can say i would
256:53 - want to add all and whatever you had
256:56 - already in the types
256:58 - whatever you had original types and this
257:00 - will be my types and what we can do
257:02 - right now is head over to my
257:05 - select
257:06 - and instead of working here with these
257:09 - values we could display the jsx or we
257:12 - can work on this jsx right here where
257:15 - again we're going to create some comment
257:17 - map to
257:18 - jsx
257:20 - then types will be in this case already
257:23 - jsx let's write types map
257:26 - and again we're just going to wrap this
257:28 - in the option that's it
257:30 - now for the map we would want two things
257:33 - item and index
257:35 - then we have the function of course
257:38 - and what this is going to return well
257:41 - we're going to say we would want to
257:42 - return
257:44 - option
257:46 - and we would want to wrap option
257:48 - actually
257:49 - option
257:51 - for the option value will be the item
257:54 - that we're passing
257:56 - so each and every item that will be in
257:58 - this types array and last but not least
258:00 - we have a key
258:02 - that will be index
258:04 - and let's close it out however still
258:06 - within the option
258:08 - we all going to place our item now
258:10 - lastly
258:11 - within the select box we're just going
258:13 - to say that we would want to access
258:15 - types and what you see here is okay so
258:18 - item is not defined room filter seven
258:21 - okay let's check it out item item of
258:25 - course because i'm using the items here
258:28 - that's the reason
258:30 - let's say that and what do you see here
258:33 - on the right hand side
258:34 - as far as i can tell
258:36 - if i'm going to open up i will have only
258:38 - the unique values whether that's going
258:40 - to be single double family on
258:43 - presidential again if you need help with
258:46 - this check it out one of the actual
258:48 - challenges is getting the unique value i
258:51 - went over already what we were doing and
258:54 - then next is just getting these values
258:56 - using that function and the reason why i
258:58 - created the function is because we were
259:00 - gonna like i said reuse it for the
259:02 - second one for the capacity as well so
259:04 - we might as well not do the double of
259:06 - work
259:07 - then i'm just adding here this all that
259:10 - would be for all the properties
259:12 - and last but not least
259:14 - i would want to work with uh actual jsx
259:18 - so that's the reason why i'm getting jsx
259:20 - and last but not least i'm saying okay
259:22 - so set the value for the type so now
259:25 - what's gonna happen
259:26 - if i'm gonna head over to the bigger
259:28 - screen so we can see remember we were
259:30 - doing the console logging
259:32 - so we can clear the console for now
259:36 - and then we can head over to rooms
259:39 - of course we're already here
259:41 - and if we're just going to click on it
259:42 - let's say single this is going to tell
259:45 - me what that i'm selecting
259:48 - one
259:49 - that is obviously the type that i'm
259:52 - having
259:53 - then i do have this
259:55 - type
259:56 - as well as the single now the type is
259:59 - let's check it out what do we have here
260:02 - otherwise it might be a little bit
260:04 - confusing and you know what why don't we
260:05 - add here the actual explanations
260:08 - what we had within handle change
260:11 - now uh
260:13 - and you know what
260:14 - we can do it probably with template
260:16 - literals it's going to be easier this
260:18 - is and let's set like this this is type
260:23 - this is
260:26 - name
260:28 - and this is going to be the value so
260:32 - this is
260:35 - value
260:36 - let's set this up
260:38 - why don't we add maybe this is
260:41 - value
260:44 - and that way you'll see exactly what is
260:46 - happening so name
260:48 - i know a little bit annoying in the
260:50 - beginning but i just want you to
260:51 - understand because this is important
260:54 - what we are in fact getting back so this
260:56 - is
260:57 - type
260:59 - and now let's console.log everything
261:01 - that we're going to have
261:02 - where we're going to have this is type
261:04 - so the type will be select one
261:07 - then the name will be type and by the
261:10 - way name will be the one that we are in
261:12 - fact
261:13 - changing in our state and the value will
261:16 - be family we also can notice something
261:18 - very interesting where all the time our
261:21 - value goes back to all and the reason
261:23 - for that is very simple because we do
261:26 - have value set up on a select box and
261:29 - we're getting it from the type and at
261:31 - the moment we're just working with the
261:32 - handle change where we're getting the
261:34 - type the name and the value however what
261:37 - we're not doing we're not changing
261:39 - anything in a state so if i'm going to
261:41 - head over let's say and in the type
261:44 - we're going to type single notice of
261:46 - course i'm going to be getting right now
261:47 - in the single because this is the
261:49 - controlled input where everything we're
261:51 - going to be coming from the state so
261:53 - that's exactly what i would want to do
261:55 - next
261:56 - where now that we have this information
261:59 - so we have whatever change are we
262:02 - creating i will gonna head over to a
262:05 - context and we're gonna set up a little
262:08 - bit better handle change where instead
262:10 - of all of this console logging we're
262:13 - gonna decide what we would want well as
262:16 - i'm looking at the state right now
262:18 - check this out
262:19 - i have
262:21 - type
262:22 - then i have the capacity price and
262:25 - all of that
262:26 - and this is equal to some kind of value
262:29 - and if you notice when we were working
262:32 - with console logging
262:34 - name
262:35 - was
262:36 - actually equal to whatever we had with
262:38 - the state
262:39 - and then the value is whatever we
262:41 - selected
262:43 - so how this is going to work
262:44 - well i would want to first of all decide
262:48 - whether i'm going to have the checkbox
262:50 - or this is going to be something else
262:52 - because with the checkbox in fact we're
262:54 - not going to be looking for the value we
262:57 - were going to be looking for the check
262:59 - so first and foremost we're going to say
263:01 - like this we're going to say that there
263:04 - is going to be a target
263:05 - now target will going to be very general
263:08 - where we have event
263:10 - target
263:11 - then after that
263:12 - i would want to set up the value again
263:15 - by the way i can just delete this guy
263:17 - because this will be an if statement
263:19 - where i'm going to say const value so
263:22 - again this is because we have the
263:23 - checkbox if you wouldn't have the
263:25 - checkbox you wouldn't have to do that
263:27 - then event
263:29 - type and i'm going to check if the type
263:32 - is equal to the checkbox
263:34 - then instead of target value
263:37 - we'll have a target checked
263:39 - so in fact we're going to say okay if
263:41 - there is checkbox
263:43 - then use target
263:46 - check
263:47 - and then and by the way this is not what
263:50 - i wanted
263:51 - dot checked and then if it's not a
263:53 - checkbox we're just gonna use like we
263:55 - did before
263:56 - target value that's number one
263:59 - and name will stay the same so there
264:01 - will be target name
264:03 - as well as the target value and now it's
264:06 - really interesting the way we can do
264:07 - that within the this dot set state is
264:10 - the fact that i can again use the
264:13 - dynamic variables in my object so
264:17 - instead of saying okay so once i get
264:19 - these values this is just going to be
264:21 - for the type what i would want to do is
264:24 - for all my inputs every time i'm going
264:26 - to be changing i'll be dynamically
264:29 - checking
264:30 - what is my name and then the way we can
264:33 - do that is very simple i'm going to say
264:35 - whatever name property i'm getting back
264:37 - just check that value in a state and set
264:40 - this equal to whatever value we have
264:43 - currently from our input okay now name
264:47 - and we're going to set the value the
264:49 - last thing that i would want to do is
264:51 - run this this dot
264:53 - filter rooms because depending on
264:56 - whatever we're going to do with our
264:58 - input we're also going to be changing
265:01 - these values so once
265:03 - this runs once we run this that state as
265:06 - a callback function we're going to run
265:08 - this filter rooms so we're going to
265:09 - change this value in a state and then
265:12 - depending on that we're going to filter
265:14 - our sorter rooms remember that was
265:16 - something that we're going to be passing
265:18 - down into the room list the sorted rooms
265:21 - let's change that
265:23 - and now let's check it out
265:25 - i will gonna have access to it and now
265:27 - in this case i will gonna call single
265:29 - now this calls me hello and the reason
265:32 - why it calls hello because we already
265:34 - have here
265:36 - the filter rooms and obviously with
265:39 - filter rooms we have console log hello
265:42 - all right now i do think that it will be
265:44 - a little bit more beneficial if we're
265:47 - gonna head over to react tools
265:49 - then we have the room provider and now
265:52 - let's check it out what we're gonna have
265:53 - for the type as you're looking at it
265:56 - what is the type right now i believe
265:58 - this is single so if i'm gonna head over
266:00 - here to family
266:01 - what i'm gonna have i'm gonna have the
266:03 - family the same i'm gonna have within my
266:05 - input family now if i'm gonna go back to
266:08 - all
266:09 - this of course will be all and so on and
266:11 - so forth and this is exactly what we're
266:13 - gonna do later on with the rest of the
266:15 - inputs where we're going to have access
266:18 - to a value in a state
266:20 - because this is an object and we can
266:22 - access the properties dynamically by
266:24 - passing in the value and then we'll just
266:27 - going to set it equal to whatever value
266:28 - we're getting from the input and i
266:30 - understand that probably the most
266:32 - confusing is this part as far as the
266:35 - handle change is concerned because again
266:38 - we're not doing it one by one we're not
266:39 - saying type will be equal to value no
266:42 - we're saying whatever i'm getting back
266:44 - doesn't matter whether it's type whether
266:46 - that's capacity whether that's money it
266:48 - doesn't really matter as long as you
266:50 - name them exactly like you have in the
266:52 - state you should have no issues all
266:54 - right
266:55 - now we also would want to
266:58 - set up the filter rooms and like i said
267:01 - the first one will be the longest one
267:03 - and once we already set up everything
267:05 - this is where it's going to go faster
267:07 - okay
267:08 - now in the filter rooms first and
267:10 - foremost i would want to get
267:13 - rooms
267:14 - from my state
267:16 - not sorted rooms sorted rooms will be
267:19 - passing down the rooms the original
267:22 - value that we have because the changes
267:25 - we're going to be making to the sorter
267:26 - rooms but if we want to ever want to go
267:28 - back to original values this is why we
267:31 - would want to access rooms so again
267:33 - we're going to have to do a little bit
267:34 - of destructuring where we have rooms
267:36 - then we'll have type
267:38 - then we have capacity
267:41 - then we're gonna have price so again
267:43 - we're just gonna be checking these
267:44 - values
267:46 - mean size
267:48 - uh max
267:50 - size and what else we have we have
267:52 - breakfast
267:54 - and we have pets now where is this
267:56 - coming from
267:58 - very simply it's coming from this dot
268:00 - state again very important to understand
268:03 - and this is a callback function
268:05 - because this dot state is asynchronous
268:08 - so we need to make sure that we only run
268:11 - this when the state is actually changed
268:13 - okay
268:14 - all right we have successfully
268:17 - destructured our state values and again
268:19 - please remember rooms
268:21 - not sorted rooms sorted rooms will be
268:23 - the ones that we're going to be changing
268:25 - then we're going to set up some
268:26 - temporary variable we're going to say
268:28 - let temp
268:30 - rooms is equal and now why don't we do
268:32 - the spread operator
268:34 - where what i'm getting back from the
268:36 - state
268:37 - we'll use the spread operator now we're
268:39 - going to have an array and why don't we
268:41 - set up our first if statement
268:44 - where i'm going to say if
268:46 - type
268:47 - and now i'm talking about this specific
268:49 - type
268:50 - is not equal to all
268:53 - is not please remember this is again
268:55 - important if it's not equal to all i
268:58 - would want to filter my temp rooms so
269:01 - the way i'm going to write is temp rooms
269:03 - is equal
269:04 - to temp rooms filter
269:07 - and then we can say
269:09 - return me
269:10 - only the rooms
269:12 - that match the current type because what
269:15 - we were going to do right here is just
269:17 - like i showed you
269:18 - we changed the
269:19 - values for the type
269:21 - one of them was single then we had all
269:23 - and whatever so what i'm saying here is
269:26 - unless this is all
269:28 - in that case we're just going to have
269:31 - our original value we're not going to
269:32 - change anything if
269:34 - the value for the type is anything but
269:37 - all then i do want to filter it then i
269:40 - do want to return only the rooms that in
269:43 - fact are matching the room type that i'm
269:46 - passing so return me only the rooms that
269:49 - has the same type that we're getting
269:52 - right now
269:53 - from the state and obviously when i'm
269:55 - talking about the type i'm talking about
269:56 - the value
269:57 - now last thing that i would want to do
270:00 - within this filter rooms is again set
270:03 - another this that set state and in this
270:06 - case like i said
270:07 - what's important we got the rooms we got
270:09 - the original value and i would want to
270:12 - change not the actual rooms
270:14 - but the sorted rooms that we are
270:16 - accessing later on in my list so in this
270:20 - case i'm going to write temp
270:22 - rooms
270:23 - so set this equal in a state the sorted
270:25 - rooms
270:26 - to the temp rooms okay
270:29 - now let's save that
270:31 - and at the moment again this is roms i
270:34 - can see already there's some kind of
270:36 - temp
270:37 - uh
270:38 - not the temp there's already some kind
270:39 - of bug not some kind of bug i can see
270:42 - that i'm accessing roms
270:44 - not rooms let's do that
270:46 - now once we save that it complains about
270:49 - uh
270:50 - 81
270:51 - and then of course this is not temp
270:53 - items this is temp rooms
270:55 - yep bug scrolled in
270:57 - now let's test it out we're gonna head
270:59 - over to my recording we can maybe make
271:02 - this big smaller
271:03 - now notice i do want to still show you
271:06 - what's happening here
271:07 - so let's click on double and voila
271:11 - our type is double so we changed it and
271:14 - what kind of rooms we have
271:16 - we have only the rooms that have the
271:18 - type of double that's it that's the only
271:20 - thing we need to do and as long as we're
271:22 - going to be changing that value
271:24 - that's when we're going to be displaying
271:26 - only those rooms now if i'm going to
271:28 - click on all
271:30 - notice
271:31 - now i'm going to be getting again the
271:32 - full value because i have type of all
271:35 - and i'm going to grab all the original
271:37 - rooms that's the reason why when we
271:40 - passed down to room list we are using
271:42 - the sorted list the
271:44 - sorted rooms but if we would want let's
271:47 - say again use the type all i'm going to
271:49 - get back all the rooms so that's how we
271:51 - can do the filtering this was our first
271:54 - filter so like i said the second ones
271:56 - and third ones and the fourth ones
271:58 - should be already much faster because we
272:00 - have all our structure i know the first
272:03 - one was a doozy but once we have all our
272:06 - structure i think it will gonna go
272:09 - faster and the next one will be in fact
272:12 - the guests
272:13 - so i'm gonna be checking
272:15 - how many people are max for each and
272:17 - every room and again we're gonna do a
272:20 - bunch of the same things so in this case
272:22 - i can and i will gonna copy and paste it
272:25 - and we're just gonna be changing here
272:27 - the values because i don't see the point
272:28 - of retyping all the divs and everything
272:31 - now this will be guests
272:33 - and i'm not going to call this type
272:35 - and just say okay so there will be
272:37 - guests and that's all there will be no
272:38 - type
272:39 - then i will gonna leave the form group
272:42 - so form group will stay
272:44 - type will not be my label in fact this
272:48 - will be named capacity
272:51 - we're just gonna write here guest
272:54 - that's all
272:56 - guests then for select naming again will
272:59 - not be type as well as the id so both of
273:02 - these will gonna become capacity
273:05 - uh value obviously again we're not
273:08 - accessing the type
273:09 - so we're accessing the variable by the
273:12 - name of capacity handle change will not
273:16 - change because we're going to use the
273:17 - still the same function that's the
273:19 - reason why we spent so much time on a
273:21 - proper setup
273:23 - and then for the types i would need to
273:25 - do
273:26 - very similar like we did already
273:28 - previously so
273:31 - what we're going to do right here is
273:32 - we're going to say
273:34 - that first and foremost we're not going
273:36 - to be getting the types we're going to
273:38 - be getting the people so i'm going to
273:40 - say let
273:41 - people and again we can name this
273:43 - however we would like
273:45 - this is just the naming that i came up
273:46 - with now we're going to be checking for
273:48 - unique that is obviously the function
273:50 - that we set up i'm still going to be
273:52 - running through the rooms array
273:55 - then we're going to be looking for
273:56 - capacity so for each and every room what
274:00 - would be the unique capacity
274:02 - as well as we might as well can right
274:04 - away set up everything with ajsx in this
274:08 - case we don't need to add anything so
274:10 - i'm not going to have to use the spread
274:12 - and i'll add all the all string
274:15 - and then why don't we do this why don't
274:17 - we say people
274:19 - map
274:20 - there will be item
274:22 - and the index again because this is an
274:25 - array
274:26 - like already previously
274:28 - then let's just do a return and again we
274:30 - are returning an option
274:33 - so we're saying option
274:34 - key will be item id
274:37 - or you know what no let's just do
274:39 - index here because obviously this was
274:41 - just going to be an array with numbers
274:43 - whether that's one two or three or four
274:46 - and then what else we would want for the
274:48 - option well we would want value of
274:50 - course
274:51 - the value will be actual item within
274:54 - this array that's being returned
274:56 - and then last but not least we would
274:58 - want to display whatever we got in there
275:01 - so item
275:02 - now within the second select box we're
275:05 - not going to be looking for the types in
275:08 - fact we'll be looking for people
275:11 - let's test this out
275:13 - sure enough now we do have our guests
275:16 - everything is working fine we should be
275:18 - also able to change the values in a
275:21 - state right away because our handle
275:23 - change is already working i will gonna
275:25 - head over to the bigger screen because i
275:27 - do want to show you the react devtools
275:30 - let's do inspect let's have a react open
275:34 - and then i don't have a select box
275:36 - that's not what i want
275:38 - type will be all
275:40 - but what we're going to be focusing on
275:42 - is of course the capacity i want you to
275:46 - keep track of something and that is
275:49 - what type of value this is not what
275:52 - value this is but what type of value
275:55 - because as you're looking at notice that
275:56 - this right now is a number however check
275:59 - this out
276:00 - once i save it notice these quotation
276:02 - marks so what's happening right now this
276:04 - is in fact string now this is simply
276:06 - because when we are getting back the
276:09 - value from the select box this will be
276:11 - automatically as a string so we're going
276:13 - to have to do
276:15 - a little bit of parsing we're all going
276:16 - to turn it back into a
276:19 - number that's the reason why we're going
276:22 - to do that within our function
276:24 - all right now we're going to head over
276:26 - back to the context we have our filter
276:28 - rooms we did our first filter remember
276:32 - we got our temp rooms so we were
276:34 - filtering already but now what i'm gonna
276:37 - do is
276:38 - right after i got my rooms and
276:40 - everything by the way i'm gonna start
276:42 - adding comments because there's gonna be
276:44 - a bunch of values that are repeating so
276:46 - in this case i
276:48 - probably think that
276:49 - adding comments would make a little bit
276:51 - more sense
276:52 - let's say
276:54 - all the rooms
276:55 - then after that why don't we do a
276:58 - transform values
277:00 - values and what we're saying here is
277:02 - obviously we already changed the value
277:04 - in a state so now we're getting back the
277:06 - capacity but capacity will be string
277:09 - so what i can do right now is i can say
277:11 - okay whatever capacity i had and that's
277:14 - the reason why i use let here because
277:16 - i'm going to be overwriting them i'm
277:18 - going to say capacity will be in fact
277:21 - used with parse integer which will make
277:24 - sure that instead of string we're going
277:26 - to be getting
277:27 - the
277:28 - number of course
277:30 - now
277:31 - this is going to transform the values
277:33 - and now i would want to write the
277:34 - commented
277:36 - filter
277:37 - by type
277:39 - and then now we're going to be filtering
277:41 - by capacity
277:43 - filter by capacity
277:46 - whenever we're talking about this kind
277:48 - of filter
277:49 - again it will be a lot
277:52 - similar like we already had before and
277:55 - the way we're going to write that is
277:57 - just going to be if
277:58 - capacity
278:00 - is not
278:01 - equal to 1
278:03 - is not equal to 1 like so then we would
278:07 - want to filter it again and the way
278:09 - we're going to filter it we're going to
278:11 - say temp
278:12 - rooms again like we had before is equal
278:15 - to temp
278:17 - rooms
278:18 - filter
278:20 - and then what i would want to pass is
278:22 - room
278:23 - if the capacity property on the room so
278:27 - room capacity is in fact bigger
278:31 - or equal to a capacity
278:34 - now if it's going to be one
278:36 - then again we're not going to touch it
278:38 - we're pretty much we're going to have
278:40 - our original array
278:42 - but if we're going to make sure that
278:44 - capacity let's say is bigger if we're
278:47 - getting a bigger value for capacity
278:49 - let's say 2
278:50 - then return me only the rooms
278:53 - that will have this capacity property
278:56 - bigger or equal to two all right now
279:00 - let's head over back again we have all
279:02 - our rooms
279:03 - check this out if i'm gonna let's say
279:05 - three
279:06 - then my value changes in a state and
279:08 - what do i see i see only the rooms that
279:12 - have the capacity of three
279:14 - that's how we can filter by capacity
279:17 - next one up we have filtering by price
279:19 - but i do want to
279:21 - close the console just so you can see
279:22 - that obviously both of them would work
279:24 - together so if i'm going to go let's say
279:26 - for
279:27 - all then in this case this will not show
279:30 - anything and that's the reason why i
279:32 - said to you the more data you're going
279:34 - to have the more interesting this will
279:36 - be by filtering of course if i'm saying
279:39 - that i'm just looking for a room type by
279:41 - the name of double and then i'm
279:43 - expecting that this will have a guest of
279:45 - three unfortunately within those
279:48 - particular rooms we cannot have three
279:50 - guests however within the family room we
279:52 - can check it out okay so all the family
279:55 - rooms as far as i can tell have right
279:58 - now right now the
280:00 - guest minimum of three meaning we can't
280:02 - stay three people if you would want to
280:05 - but we also can obviously do that in
280:07 - prudential that's the reason why it
280:09 - shows all the rooms which in our case is
280:11 - just one
280:12 - that you can stay with the request if
280:14 - i'm going to go back to all then this
280:16 - will show me all the family ones and i
280:19 - can stay
280:20 - at least three people can stay there
280:22 - now within the
280:24 - single and double there is a max and the
280:27 - max for the single let's say would be
280:29 - one and four double this will be two
280:31 - however if i'm going to go let's say
280:33 - with two
280:34 - then this again will gonna show me
280:36 - all the rooms that i would want
280:38 - let's say in this case all the double
280:40 - rooms
280:41 - that two people can stay in and all of
280:44 - them can stay
280:45 - in all the double rooms all right now we
280:48 - do see that both of them can be used
280:50 - together
280:51 - so that is working
280:53 - now next one up we all gonna have the
280:55 - price
280:56 - and the more filters we're going to add
280:58 - it the more of course again
281:01 - it will depend of how much data you have
281:04 - because for 13 rooms and if we have six
281:07 - filters understand that it's kind of
281:09 - hard to combine them where we can check
281:12 - by all of them all at the same time now
281:15 - we can always check them obviously one
281:16 - by one because we're just returning all
281:18 - the rooms
281:19 - but the more filters you're going to
281:21 - have the more it will going to make
281:22 - sense to have way more data that way
281:26 - this will be interesting otherwise of
281:28 - course for all the double rooms there's
281:30 - only two people that can stay for all
281:32 - the single rooms one and so on and so
281:34 - forth okay now as far as the money is
281:38 - concerned as far as we're working with
281:39 - the price
281:40 - why don't we grab here or you know what
281:42 - we're going to create a new one because
281:44 - in this case we will going to create a
281:47 - input with the type of range
281:49 - so it's not like we can really
281:51 - repeat everything within a select
281:53 - let's write the room
281:56 - price copy and paste that
281:58 - let's say
281:59 - end of room price
282:01 - end of room price and then here we're
282:04 - going to write again first a div
282:06 - with a class of
282:08 - form group
282:09 - within the form group
282:11 - we're going to have some label
282:13 - then i will going to go with price for
282:16 - my label and we're just going to write
282:18 - room price and we can also access
282:22 - the current price that we're going to
282:24 - have because what we need to remember is
282:26 - that we're all going to be changing this
282:27 - notice how the price will be changing
282:29 - and we'll be displaying whatever price
282:31 - we have currently whatever value we have
282:34 - in the state
282:35 - that's the reason why we're going to
282:36 - access price here after the label we're
282:39 - going to work with an inputs
282:42 - so i'm going to say that there will be
282:43 - input now this will not be
282:46 - simple text
282:47 - in fact we're going to have range and
282:49 - now name again
282:51 - is important because it needs to match
282:53 - whatever we're going to have in state so
282:54 - this will be price
282:56 - and for the range we have min max that's
282:59 - the reason why we set up mean price
283:01 - and max price values that's the reason
283:03 - why we're getting them out of the state
283:06 - so max
283:08 - attribute will be equal to the max
283:11 - price
283:12 - and then we'll have an id now id again
283:14 - will be used
283:16 - with a label let's just write price
283:20 - and we also need of course the value
283:23 - value will be the price that we are
283:26 - getting currently from
283:28 - the state
283:29 - on change
283:31 - will work with a handle change like we
283:34 - already did before
283:36 - handle
283:37 - change and then last but not least we
283:40 - have the class name
283:42 - class name and the class name will be
283:44 - simply um what we have we have form
283:48 - control
283:49 - form control let's check it out
283:54 - control and not control x in fact this
283:56 - will be control once we say that yep
283:59 - this of course is the room price but i
284:01 - can change that oh no actually
284:02 - everything is working already yeah right
284:04 - because we already have the handle
284:06 - change now as i'm going to be scrolling
284:08 - i'm not filtering anything but you
284:10 - notice how the value is changing and
284:12 - that's the reason why i have 600 if
284:15 - you'll notice in all my rooms the max
284:18 - value
284:19 - will be 600 and that's something that we
284:21 - didn't by the way we already had the
284:23 - filter here but the reason for that is
284:25 - because my presidential is 600 if some
284:29 - room would be let's say
284:30 - thousand and thousand dollars would be
284:32 - shown
284:33 - and remember we did that in the context
284:36 - in the very beginning when we were
284:37 - getting our data
284:39 - now once we have the room price all this
284:43 - is done
284:44 - what we need is filtering because at the
284:46 - moment again
284:48 - we are just getting the type as well as
284:51 - the capacity again as we're looking at
284:54 - our state
284:56 - what you'll notice is that
284:59 - from the range again the same thing
285:02 - happens like we did before
285:03 - where the value will be changing in
285:05 - state all that is going to be happening
285:07 - but
285:08 - notice the max price is 600
285:10 - the moment i touch it the price is 577
285:15 - and as you can see here quotation marks
285:17 - that means that this is a string and
285:19 - again something that whenever you're
285:21 - working with the range the return that
285:23 - you're going to get back
285:24 - will be in fact a string so what we need
285:27 - to do is again the same thing like we
285:29 - did with capacity
285:30 - then in this case we're just going to
285:32 - change this around
285:34 - where we're going to have not capacity
285:36 - but we're going to write price so the
285:38 - price that we are getting
285:40 - from the state first and foremost
285:43 - and now let's do a little bit of
285:45 - filtering where again after the filter
285:48 - by capacity you know what i'm going to
285:50 - add here change
285:53 - state just so i can see
285:56 - where i'm actually changing the state
285:58 - and we're going to set up another filter
286:00 - now this filter be filter
286:04 - filter by price
286:07 - and then what we're going to do over
286:08 - here we're going to say if
286:10 - and in this case we can just go with no
286:13 - if statement because what we need to
286:15 - understand that if
286:17 - in general we're going to be changing
286:18 - the price then we would just want to
286:21 - display all the rooms that are being
286:23 - obviously rendered right now in that
286:25 - case we can skip the if statement we can
286:28 - say temp
286:30 - rooms equals to
286:32 - temp rooms
286:35 - like so and we're gonna run with filter
286:40 - now within the filter we're gonna have
286:41 - what well we're gonna have not temp
286:43 - rooms
286:44 - but we're gonna have temp
286:46 - and temp room instead of temp rooms
286:49 - and then filter and what are we saying
286:51 - here we're going to say room if
286:54 - your price
286:56 - is less
286:57 - than the price that we currently have in
286:59 - the range then that room will be
287:01 - displayed
287:02 - so let's write room
287:04 - price if your price is less
287:08 - than price then obviously our rooms will
287:11 - be rendered okay let's save that
287:14 - and if we're going to go to the bigger
287:15 - screen again i'm going to close this one
287:17 - right now
287:18 - and if you're going to notice something
287:19 - that
287:20 - if i'm changing the price
287:22 - also
287:23 - the rooms that have the price
287:27 - less
287:28 - than what we currently have in the range
287:30 - only those rooms will be rendered i'm
287:32 - going to go up to let's say 431 the last
287:36 - room will be 400
287:38 - and then i have 280 and that's how we
287:41 - can filter according to a price that
287:44 - we're setting here in our range
287:47 - now that we are experts already how we
287:49 - can work with the filtering
287:50 - why don't we complete our application as
287:54 - far as our search rooms component is
287:56 - concerned because in this case we will
287:58 - gonna set up filter according to the
288:01 - size
288:01 - as well as we are going to create these
288:03 - check boxes and set up the functionality
288:06 - okay now we have the end of room that is
288:09 - not what we want right now we would want
288:12 - the size and i'm going to say end of
288:14 - size
288:15 - and off size
288:17 - as well as we will going to have a div
288:20 - by the name of form
288:22 - group
288:23 - within this form group we will going to
288:24 - have label a label will be for the size
288:28 - in this case
288:29 - and then we're going to call this room
288:32 - size after the label
288:34 - i would want to set up div
288:36 - now within this div and we're going to
288:39 - call this size
288:40 - inputs and not input but in fact inputs
288:44 - and then within this div we're all going
288:46 - to place these two inputs one will be
288:48 - for the small size and the other one
288:50 - will be for the big size uh input type
288:53 - will be number
288:55 - we're gonna head over with a number and
288:58 - then as far as name is concerned we're
289:00 - gonna say min
289:02 - size
289:02 - id in this case we'll just gonna be a
289:05 - size
289:06 - of course because this is what we have
289:08 - labeled for
289:10 - size then our value will be from the
289:13 - state
289:14 - mean
289:15 - size
289:17 - and then what else we would want well we
289:19 - also could use on change
289:21 - that will be equal to our handle
289:24 - change and last one will be class name
289:27 - class name will be of course for styling
289:30 - self explanatory
289:32 - size input size
289:35 - input so size hyphen input all right
289:39 - that is my input and what i would want
289:41 - right now is copy and paste this guy
289:43 - copy and paste that and the second one
289:45 - will just have different values where
289:47 - instead of min size will change
289:50 - everywhere to the max size
289:52 - now that obviously is in two places
289:55 - so value
289:57 - as well as the naming will be
289:59 - max size instead
290:01 - that should do it that will be my room
290:03 - size min and max and again remember the
290:05 - filtering that we did
290:07 - all the way in the very very beginning
290:09 - when we did have component did mount we
290:12 - checked for the max size and we set this
290:14 - up in a state so that is exactly why we
290:16 - have this value of thousand again if one
290:20 - room would have a bigger size bigger
290:22 - square footage obviously that will be
290:25 - rendered and then last but not least i
290:27 - would want to show these check boxes
290:29 - so in this case let's write extras and i
290:32 - just want to complete here everything
290:34 - within our component and then we're
290:36 - going to set up the context there's no
290:38 - point for us to jump back and forth
290:40 - because we already should have the
290:42 - general idea
290:43 - and of extras
290:45 - now in this one
290:46 - again we're going to start with the div
290:49 - form
290:50 - group within the div
290:53 - we're going to have a
290:54 - two other divs
290:56 - one of them will be where both of them
290:58 - in fact will be single extra
291:01 - single
291:03 - extra within this div what i would want
291:05 - is input by the type of
291:09 - checkbox
291:10 - name will be breakfast and again this
291:13 - needs to match whatever state values we
291:15 - have
291:16 - uh for the id i don't think we need
291:18 - anything
291:19 - just delete it because there's not going
291:21 - to be a label or you know what no
291:24 - my apologies there will be a label so
291:27 - why don't we write here break
291:29 - first
291:30 - like so and right after the input we're
291:34 - gonna write our label and i didn't
291:36 - notice that it was right after it and
291:38 - why don't we write uh breakfast since
291:40 - that is the div and let's just write
291:43 - breakfast
291:44 - here as well
291:46 - okay we have our setup for the input we
291:48 - do need to have obviously the value
291:51 - however the value in this case will not
291:54 - going to be
291:55 - value attribute by itself but because we
291:58 - are working with a checkbox we need to
292:01 - set the sql as checked now for the check
292:04 - we will going to be checking what is the
292:06 - value that we're getting back from the
292:08 - breakfast property in state all right
292:12 - and we also have the on change
292:14 - that will be applied later on
292:16 - so i'm going to say unchange
292:18 - and they'll change let's save that this
292:21 - will be my breakfast and just to show
292:23 - you that this is working if i'm gonna
292:25 - head over back to a
292:27 - state and i'm gonna set this equal to
292:29 - true notice the checkbox will be checked
292:32 - okay
292:33 - let's do that let's say
292:36 - false
292:37 - back to false and last but not least i
292:40 - would want one more div exactly the same
292:42 - just the value will not be breakfast it
292:44 - will be pets
292:46 - now in this case i will gonna select
292:48 - bunch of them
292:50 - because i would want to pretty much
292:52 - change them all together so i have one
292:54 - breakfast second breakfast
292:57 - this guy's a breakfast
292:59 - this guy is a breakfast and this guy's a
293:01 - breakfast we're going to delete them all
293:04 - i'm just going to write pets
293:06 - that should be the value that i'm
293:07 - getting back from the state so pets pets
293:10 - and pets this should do it
293:13 - once we have this kind of setup
293:16 - then
293:18 - we have
293:19 - context of course
293:20 - and we can do all our changes in the
293:22 - context
293:23 - first one we are going to be looking at
293:26 - is not going to be filtering by price
293:28 - but in fact we're going to filter by
293:30 - size the way this is going to work we're
293:33 - going to say and this is change state so
293:35 - let's leave that but again we don't need
293:37 - to even use the if statement
293:40 - and just say temp
293:42 - rooms
293:43 - and temp rooms is obviously the array
293:45 - we'll have and we're always going to
293:47 - filter it and we're going to say filter
293:48 - by and in this case we're going to say
293:51 - room
293:52 - and now i'm going to be checking we want
293:54 - to make sure that we are only returning
293:57 - the room
293:58 - which size is in fact
294:01 - bigger than minimum size that we're
294:04 - going to have over here and smaller than
294:06 - maximum the way we write that we can
294:08 - just say
294:09 - room size
294:11 - is
294:12 - bigger and by the way i need to write
294:14 - bigger here
294:15 - i need to say
294:17 - bigger
294:18 - than a min size
294:20 - and then also i need to use the and
294:23 - operator so i'm saying and
294:25 - room size is
294:28 - less than the mac size
294:30 - so min and max okay
294:33 - this is going to filter depending on the
294:36 - room size and we also have two more
294:38 - filters
294:39 - and those ones will be the breakfast and
294:42 - the pets
294:43 - why don't we add here that
294:45 - filter
294:46 - by size
294:48 - and filter let's say
294:51 - filter by breakfast
294:55 - breakfast
294:56 - and then copy and paste that and this
294:59 - will be pets
295:01 - pets and again very simple filter where
295:04 - i'm going to say if
295:06 - breakfast is true
295:08 - so in fact if we click on it
295:11 - then we were going to be checking
295:13 - basically
295:14 - temp rooms again
295:16 - temp rooms is equal to
295:18 - temp rooms
295:19 - filter and then return me a room
295:22 - that room breakfast
295:25 - is in fact equal to true
295:28 - okay and very
295:30 - similar way
295:32 - where we have filtered by pets
295:34 - you can just copy and paste that
295:36 - filter by pets and instead of breakfast
295:39 - of course we're just gonna have to
295:40 - change it here
295:42 - we're gonna say we are selecting both of
295:44 - them
295:45 - and we would just want to select pets
295:49 - whether the pets is true then of course
295:51 - we're gonna be returning only the rooms
295:54 - that allow pets uh one thing that i
295:57 - wanna mention is the fact that the
295:59 - reason why the checkbox
296:01 - it doesn't use the value attribute it
296:04 - just uses the checked attribute that's
296:06 - the reason why we checked the type and
296:08 - if the type was checkbox then we know
296:11 - that we're targeting the checked
296:13 - attribute
296:14 - instead of the value attribute we're
296:16 - almost ready to take our baby out for
296:19 - spin
296:20 - but i am noticing that there is a bug
296:22 - because in this case i set this equal to
296:24 - target so i went with event not target
296:27 - this is equal to target and instead of
296:29 - what i'm not checking is i should be
296:31 - checking
296:32 - target
296:34 - type
296:35 - not the event type right
296:37 - now let's set this up we're gonna head
296:39 - over to our document and in this case
296:42 - why don't we start checking which rooms
296:43 - have the breakfast and which don't so if
296:45 - i click on it i'm being shown that these
296:48 - four rooms have the breakfast if we
296:50 - click on it again now we see all the
296:52 - rooms
296:53 - same thing we can do with the pets these
296:55 - rooms allow pets however these rooms can
296:58 - have pets and the breakfast if you're
297:00 - gonna get rid of the pets now you're
297:02 - gonna have only breakfast so what we can
297:04 - see is that all the rooms that offer
297:06 - breakfast also offer pets however
297:09 - there's rooms that don't offer breakfast
297:11 - but do offer free pets and of course we
297:14 - can combine it with all the rest of the
297:16 - filters that we already had the same
297:18 - goes with size i could go to let's say
297:21 - zero square footage in this case this is
297:24 - not going to work but let's say
297:25 - these rooms are at least
297:27 - 500 square footage
297:29 - and i can obviously add it to the price
297:31 - and so on and so forth this is how we
297:33 - can set up all the filtering in our
297:36 - application
297:37 - awesome guys we have a fully functional
297:40 - project however there is one thing that
297:43 - is bugging me and that one thing is very
297:46 - simple
297:47 - currently we are using our local data
297:50 - and while that not be a big issue and
297:53 - overall it was really good when we were
297:55 - setting up the application because if we
297:57 - needed to do any kind of changes we
297:59 - could just do it in our data js the
298:02 - problem will be later on when we're
298:03 - hosting this application let's say on
298:05 - netlife because if we're using the local
298:07 - data that means two things first of all
298:10 - we always will gonna have to have access
298:13 - to this project on our machine honestly
298:15 - if we would want to make some kind of
298:17 - changes and let's say if we would want
298:19 - to add one more room
298:20 - we would need to get that image we would
298:22 - need to import this image in a file set
298:24 - up the object as well as what that means
298:27 - is that most likely you'll be the one
298:30 - who needs to add these changes and for
298:32 - the simple reason let's imagine scenario
298:34 - where person is not aware of what is a
298:38 - javascript object or something like that
298:40 - and they're struggling with this kind of
298:42 - setup so wouldn't it be nicer if there
298:46 - would be a external resource
298:48 - where we can set up our data separately
298:51 - from our project in order to set up the
298:53 - data we're going to have a nice
298:55 - graphical interface
298:57 - so even
298:58 - somebody who doesn't know anything about
299:00 - our project would be able to do it and
299:02 - we could access that data
299:04 - using the cdn and not only that we could
299:07 - access the data
299:09 - even though we would have different type
299:11 - of application let's say currently we're
299:13 - obviously using the react application
299:15 - well we could do the same with gatsby we
299:17 - could do the same with venandle.js
299:20 - and that external platform
299:22 - will be by the name of contentful and i
299:26 - already named all the nice features
299:28 - about contentful but why don't i repeat
299:31 - well contentful is a content
299:34 - infrastructure and what that means is
299:36 - that we can have a nice graphical
299:39 - interface to set up our application and
299:42 - then we can consume our application
299:44 - regardless whether we have react
299:46 - application gatsby application vanilla
299:49 - js application just to name a few and
299:52 - counterfall is something called headless
299:54 - cms or boyf which would translate to
299:57 - bring your own front end and this is
300:00 - exactly what i mentioned before
300:02 - where regardless of the type of
300:04 - application we're going to have we will
300:06 - be able to consume our data without
300:09 - changing the data
300:11 - obviously
300:12 - contentful has
300:13 - a paid versions and all that but we will
300:16 - going to use a free one and the free one
300:18 - just requires for the email nothing more
300:22 - so i would encourage you to sign up you
300:24 - get like 5 000 records two spaces and
300:27 - all that so i don't think there is no
300:30 - reason why you shouldn't try it out and
300:32 - set it up for this application now next
300:35 - one up i will gonna log in again
300:37 - hopefully you're gonna sign up for the
300:38 - free version and you're gonna be able to
300:41 - follow along now once we click on login
300:44 - i will gonna be directed to a space and
300:47 - this is something you won't gonna see
300:49 - because most likely in the beginning
300:50 - you're just gonna have to sign up for
300:52 - the example space so you'll be met by
300:55 - this type of screen now in this video i
300:57 - would like to do a brief overview what
301:00 - you should expect from the interface and
301:03 - next we're going to be setting up the
301:04 - content model as well as the content so
301:07 - as you're looking at it there's really
301:09 - four things that are really important
301:11 - especially in the beginning
301:12 - as you're working with contentful so
301:15 - first of all would be the space again
301:17 - most likely you'll gonna have the
301:19 - example space but if you would want to
301:21 - create a new space and you can think of
301:23 - it as a database as a project you can
301:26 - just click here on creating a new space
301:28 - as you're using the free ones you can
301:31 - see that i'm using one of two and that
301:33 - means that the moment i'm going to
301:35 - create a second one that would exceed
301:38 - what i can use with obviously the free
301:40 - one or that would pretty much limit to
301:43 - two environments now i'm going to open
301:45 - this up and i'm going to call this
301:46 - example just like you probably will
301:48 - going to have in the very very beginning
301:50 - so i'm going to say proceed then we're
301:52 - going to create a new space and before
301:54 - we start talking about content model or
301:56 - content i would want to show you that if
301:59 - you have that example space or in
302:01 - general you have a space and you do want
302:03 - to delete it you will need to head over
302:05 - to general settings and notice then it
302:07 - says remove space and all its contents
302:09 - and then you just need to say okay so
302:11 - this is going to be the example one or
302:14 - whatever space you have and if you would
302:15 - want to remove it
302:17 - you just need to type
302:19 - example obviously the name of it and i
302:21 - went all caps here
302:22 - an example and we're going to remove the
302:25 - space then again i'm going to go back to
302:28 - the space that i already had depending
302:30 - on what you have you can either create a
302:32 - new one or you can keep on working on
302:34 - the example one that let's say you
302:36 - didn't delete
302:37 - then we have a space home and what's
302:40 - really nice over here is the
302:42 - documentation for how we're going to be
302:44 - consuming the data we were going to use
302:46 - the sdk which means software development
302:50 - kit but you can obviously access this
302:52 - also with api we're not going to do that
302:54 - right now because we still would need to
302:57 - have a look how we can set up the data
302:59 - then next one up we have the content
303:01 - model and notice we have beach room or
303:04 - beach resort room obviously this for you
303:06 - should be empty
303:08 - because if you just set up the data but
303:11 - for me i already set up the data that
303:13 - we're going to be consuming with this
303:15 - application again what content model
303:17 - would be if we're going to head over
303:19 - back
303:20 - that would be the structure
303:22 - for your inputs so let's say in our case
303:25 - this is obviously a room so content
303:27 - model would be structure for that room
303:30 - input and you can think of it again as
303:33 - an object you can think of it as any
303:35 - kind of structure that would give you
303:37 - availability later on to add that
303:40 - particular data notice i have few
303:43 - content models here for multiple courses
303:46 - and tutorials let's say i have coffee
303:48 - item comfy house products and so on and
303:50 - so forth and what you're noticing here
303:53 - these would be the fields so this would
303:55 - describe
303:56 - what kind of content i'm actually going
303:59 - to be adding all right
304:01 - now once we have the content model then
304:03 - after that we have the content so once i
304:05 - have set up the blueprint of how my data
304:08 - will be structured
304:10 - then i only need to work as a factory
304:12 - and just keep adding any kind of data i
304:15 - would like so if i'm going to go over to
304:17 - my beach resort room you'll notice that
304:20 - i you have or i have 13 entries and this
304:23 - will pretty much be each and every room
304:26 - all right now last but not least
304:28 - as far as the general interface we would
304:31 - be interested again in the settings and
304:34 - setting up the api keys so why we're
304:36 - interested in that because in order to
304:38 - consume that data we will gonna have to
304:40 - use these api keys we can head over to
304:43 - api keys again for you you most likely
304:46 - will just gonna have one example one but
304:48 - i already set it up a multiple ones for
304:51 - my different tutorials and projects and
304:53 - the way you can just add a new api key
304:56 - very simply just click over here we're
304:58 - adding new api key you can name it
305:00 - however you'd like you can have
305:02 - description but yeah what you'll be
305:04 - interested is this data one will be the
305:07 - access token and the second one will be
305:09 - space id now once we have the general
305:12 - idea how the contentful
305:15 - interface works next one up we're going
305:17 - to be setting up the content model as
305:20 - well as the content for our data
305:22 - once we have the general understanding
305:24 - how we can work with contentful
305:26 - interface next one up we would want to
305:29 - set up the structure
305:31 - for the data that we're going to be
305:32 - creating
305:33 - i already have the structure i already
305:35 - have beach room resort as well as i have
305:38 - all the data here now i do want to show
305:41 - you how to do it from the scratch and
305:43 - this is the reason why i'm going to set
305:44 - up the example one however in the next
305:47 - video when we're going to be adding the
305:48 - data i will going to keep on adding to
305:50 - the data to a content model that i
305:53 - already have because there's no point
305:54 - for me to create two of them and just
305:56 - keep adding to the new one all right but
305:59 - i do want to show you how to do
306:00 - everything from scratch so first things
306:02 - first we would need to go with add
306:04 - content type and the name here is
306:07 - important because this will be used as
306:09 - api identifier so you will going to need
306:13 - to access it later on because by default
306:15 - you are going to be getting all your
306:16 - data and most likely you would want to
306:19 - limit of what kind of data you would
306:21 - like to consume so in my case i will
306:23 - gonna call this beach
306:25 - beach uh resort
306:28 - room and you can call this however you
306:30 - would like i will gonna go with example
306:32 - because
306:33 - by the next video i'm gonna delete it
306:34 - anyway so i'm gonna write a create a new
306:37 - one and notice this is the id that we're
306:39 - going to be using
306:41 - like it says here use this id to
306:42 - retrieve everything related to this
306:45 - content type via api all right so this
306:48 - is something that you would need to
306:49 - remember regarding of what kind of
306:52 - naming you have and the next one up is
306:54 - very very simple where we just start
306:57 - adding the fields we would like so i'm
306:59 - going to go with the first one and the
307:00 - first one will be name as you can see
307:02 - these would be the type of fields we can
307:04 - have whether we have the rich text text
307:07 - number
307:08 - and i'm not going to name them all of
307:09 - them you can obviously see them as
307:11 - you're working with contentful now we're
307:13 - going to go with the text this will be
307:15 - the first one for the name and here we
307:17 - have two options we can go with the
307:18 - short one or the long one so for
307:21 - description we're gonna go with the long
307:22 - one but for the simple name field i'm
307:25 - just gonna go here and i'm gonna say
307:27 - that i would like to create
307:29 - and the moment we created we have two
307:31 - options we could have configured in a
307:33 - previous screen or we can do it here now
307:35 - what do i mean by configuration well a
307:38 - lot of times what i see especially in
307:40 - the courses and tutorials where
307:42 - people forget to add that particular
307:44 - field so let's say they do set up here
307:47 - your content model but later on when
307:49 - they're adding the content they like
307:51 - skip some kind of field and then when
307:53 - they're trying to access it they write
307:55 - me hey john listen there's something
307:57 - wrong with application i cannot access
307:59 - that particular field well the problem
308:01 - is that most cases the
308:04 - student or whoever is watching the
308:06 - project just skips adding that field so
308:09 - in order to avoid that we can just go
308:12 - with required field so that way we're
308:14 - making sure that we're not going to be
308:16 - able to save
308:17 - this particular content as we're adding
308:20 - that content into this content model if
308:23 - we skip that field now this is really up
308:25 - to you if you're 100 confident that
308:27 - you'll not be that person then obviously
308:30 - you can skip this but in general i
308:32 - always prefer to do it myself because
308:34 - that way i am not skipping something all
308:36 - right now first one was the name then
308:38 - after that we have the slug and again
308:40 - we're going to go with simple text
308:42 - i'm going to go in slug we're going to
308:44 - create and in general i'm going to go to
308:46 - validations in required field now i'm
308:48 - also going to show you how we can do it
308:50 - right away as we're saving next field up
308:52 - will be price and for that we're going
308:54 - to go with integer in this case we have
308:56 - a decimal so if you're going to go with
308:58 - the rooms let's say that have decimal
309:00 - price obviously go with decimal i'm
309:01 - going to go with integer and i'm just
309:03 - going to call this price
309:05 - all right now i'm going to create it and
309:07 - in this case notice we also have create
309:09 - and configure and that way we right away
309:11 - go to validations and we can just say
309:13 - required and obviously you have other
309:16 - options but again we're going to be
309:17 - skipping in this tutorial then we have
309:20 - the type right after the price
309:23 - we're going to go with the type
309:24 - type will be again short text so we're
309:27 - going to go with type short text create
309:29 - configure validations
309:31 - required field and next one up we do
309:34 - have the size for the size again we're
309:37 - going to go with integer so number
309:40 - integer
309:41 - this will be size of the room so what
309:43 - would be the square footage validations
309:46 - required field
309:47 - all right then we do have the capacity
309:51 - so what would be the max people of how
309:53 - many can stay in a room again we're
309:55 - going to go with integer
309:57 - so let's call this size create configure
310:00 - and in this case it's complaining that
310:02 - it's already there well because the name
310:05 - obviously isn't uh size its capacity
310:08 - my bad capacity create and configure
310:11 - foundations required field all right we
310:14 - have that
310:15 - then we have two of them pets and
310:17 - breakfast that will be boolean
310:19 - so we just go with let's say boolean
310:21 - here and we have pets whether pets are
310:24 - allowed
310:25 - again we set up the validations
310:28 - all right next one up we have breakfast
310:30 - again we're gonna go with boolean
310:33 - breakfast create and configure and in
310:36 - this case again we are going with the
310:38 - required field
310:40 - after that we're looking whether the
310:41 - room is featured
310:43 - so whether the room shows up on homepage
310:45 - this is where we're setting up that
310:47 - featured room and in this case again
310:49 - we'll go with that field again we're
310:51 - going to go with boolean
310:53 - featured and i will going to be skipping
310:54 - over here because this is as
310:56 - straightforward as it gets
310:58 - again we're going to go with a required
311:00 - field
311:00 - and then we have the description extras
311:04 - and images and just to show that
311:06 - obviously you don't have to always have
311:08 - everything required
311:09 - i will not gonna create them as required
311:12 - fields but again remember if you want
311:14 - them as required fields make sure that
311:17 - you click on configuration let's go with
311:20 - a description and for description we
311:22 - will going to go with long text because
311:24 - technically we could fit everything that
311:26 - we have here of course i don't think we
311:28 - have 255 but i will gonna go with long
311:31 - text now in this case how we're going to
311:33 - call this description
311:36 - like so create and again in this case
311:38 - i'm not going to be requiring that field
311:40 - extras will be what we can see in a
311:42 - single home page
311:44 - notice if we're going to be navigating
311:45 - here
311:46 - these were going to be my extras and for
311:49 - extras we're going to use something new
311:50 - that we haven't seen yet and that is a
311:53 - json object
311:54 - so what we're going to say is the json
311:56 - object this is what we're going to use
311:58 - for
311:59 - extras create and configure if you want
312:02 - to have required or i'm just going to go
312:04 - with required and then last one will be
312:07 - images
312:08 - now for the images notice that we are
312:10 - obviously using multiple of them because
312:12 - for the single page it's not just one
312:15 - image in fact this is many files so this
312:17 - is the
312:18 - difference if you just want one image
312:20 - you go with one file if you want
312:22 - multiple images you just say that
312:24 - images and this will be many files okay
312:28 - now once we create it i will gonna save
312:30 - it again remember this is where we're
312:32 - gonna be able to find the id obviously
312:34 - i'm gonna come back to this i'm just
312:36 - giving you a heads up and then once we
312:38 - save it in the next video i would like
312:40 - to start adding the content because our
312:43 - content model is there so we have the
312:45 - blueprint of what kind of data we would
312:48 - like to add and if we would want to add
312:51 - the data again we're heading over to the
312:53 - content and then we have option
312:55 - basically decide where you would want to
312:57 - add the entry if i would want to add to
313:00 - beach resort room which i will do i
313:02 - would add it here if you want to add to
313:04 - example or the one that you created
313:06 - obviously you would need to click on
313:08 - that in your case most likely just
313:10 - because you just started this will be
313:12 - the only option
313:13 - the content model that we just created
313:15 - but in general once you're gonna have
313:17 - multiple this is where you will need to
313:19 - use this drop down and decide where you
313:22 - would want to add the content once we
313:24 - have successfully set up the content
313:26 - model now this would be a great time to
313:28 - start adding the content before we do
313:30 - that i will gonna delete my example
313:32 - because like i said previously i will
313:34 - gonna be adding my content to previously
313:37 - already created content model and in
313:40 - order to delete that particular content
313:42 - model we just need to head over there
313:44 - click on deleting
313:46 - then i will gonna select the name here
313:48 - since i'm lazy to type it out and sure
313:51 - enough we can just delete it and the
313:53 - content model is gone
313:54 - then we're gonna head over to the
313:56 - content and like i said we would need to
313:58 - decide
313:59 - to where we would want to add it to
314:01 - which content model well in our case i
314:04 - will gonna go with beach resort room and
314:07 - we're just gonna click on adding the
314:08 - entry again the same would go here we we
314:11 - can click anywhere we would want but we
314:13 - have the suggested one already alright
314:16 - now in this case once we click on it we
314:19 - are adding the entry and then we just
314:21 - need to decide what would be the name
314:23 - since i'm going for all the rooms i'm
314:26 - going with single then double then let's
314:29 - say family in this case just because
314:31 - these will be examples i'm just going to
314:33 - name them triple
314:35 - and we're going to start with economy
314:38 - and then we also would need to add a
314:39 - slug in your case as always you can come
314:42 - up with whatever names you would want
314:44 - then for the type this will be
314:46 - triple price let's say will be 500 bucks
314:50 - size will be 1200 uh square footage
314:54 - then capacity we're obviously going to
314:56 - say that max
314:58 - three people can stay there uh no pets
315:00 - allowed no breakfast no free breakfast
315:03 - it will not be featured and again just
315:05 - because i want to save a little bit of
315:07 - time i'm just going to grab the
315:10 - description that i had already
315:11 - previously we're going to copy and paste
315:13 - that then next one up we have the extras
315:16 - and for the next again i already have
315:19 - this array set up like this for the json
315:21 - one so i'm just going to copy and paste
315:23 - it in your case if you want to create it
315:25 - from scratch this is really up to you
315:28 - then we have the image and we have
315:31 - multiple ways how we can add images the
315:33 - first one the most easiest one would be
315:35 - from your local machine so i'm just
315:37 - going to click on it this is going to
315:38 - select everything that i have i will
315:41 - going to head over to a desktop
315:43 - then i already added them to the images
315:46 - and most likely you're gonna have these
315:48 - images as well
315:49 - and we're gonna start by room 13. so
315:52 - we're going to open that all right this
315:54 - will be our first image and then always
315:57 - always remember to click on publishing
315:59 - otherwise again this is the part where
316:02 - sometimes uh somebody who's watching
316:04 - tutorial or course skips and then you'll
316:06 - have no access to that image this would
316:09 - be our first and only image currently
316:12 - but remember we set it up that we will
316:14 - have multiple images and what we can do
316:16 - here the other option would be link
316:19 - existing assets and in this case i'm
316:22 - having all the images that i already
316:24 - have in the contentful in your case
316:26 - again probably you'll just gonna have
316:28 - this one image so what i'm gonna do is
316:30 - i'm gonna find
316:32 - where i have those linked images and
316:34 - remember when i had a single room for
316:37 - all the rooms i had these three images
316:39 - that were basically describing that one
316:41 - particular room and the way you can do
316:43 - that is since again you're linking your
316:45 - assets you can just say okay show me
316:47 - this one this one and this one so these
316:50 - three will be added and the way i did it
316:52 - is i added for all the rooms now once we
316:55 - have this set up the only thing we need
316:57 - to do is click on adding and then we
316:59 - have a few options we can click here
317:02 - where we're going back to
317:04 - all the content that we have or i can
317:06 - just add a new one here again multiple
317:09 - ways how we can
317:11 - create a new content and in this case
317:13 - i'm back in the content screen where i
317:16 - could search for different type of
317:18 - contents so this is going to give me
317:20 - coffee item again coffee product or i'm
317:22 - gonna go back to beach room sort this
317:25 - will show me all the entries that i have
317:27 - and then if i would want to add new
317:29 - entry obviously i just click here and
317:31 - again if you want you can add it to
317:33 - different content types but since we're
317:35 - working right now with beach rooms it
317:37 - will only gonna make sense if we keep on
317:39 - adding the content all right now let's
317:42 - go with content
317:44 - not content sorry triple
317:46 - and let's call this basic
317:49 - then again we're gonna do the same thing
317:51 - so lots of repetition here
317:53 - triple basic
317:54 - type will be triple
317:57 - then uh price let's go with i don't know
318:00 - six hundred dollars again i'm just free
318:03 - riding right now here um i don't know 30
318:06 - or 3 000 square feet
318:08 - capacity still will be three people no
318:11 - pets
318:12 - no breakfast or you know what let's give
318:14 - it a breakfast here but no pets it will
318:17 - not be featured and say mulch peel here
318:20 - we're gonna go with description
318:23 - i'm just gonna make sure that we copy
318:24 - everything correctly
318:27 - then copy and paste json the same deal
318:30 - we had our extras
318:32 - okay so just a little bit of data input
318:36 - here
318:36 - then last one will be images and again
318:39 - in this case i will gonna show you that
318:42 - we are not limited to adding from the
318:44 - computer or from the assets we already
318:46 - have we can obviously also do the web
318:49 - search so let's say here you would look
318:51 - for i don't know hotel so this is just
318:54 - gonna give you all the images that you
318:56 - can add for the hotel i will not gonna
318:58 - go with this route i will still going to
319:00 - continue adding from my device but just
319:03 - to let you know this is also your option
319:05 - i'm going to go with room 14
319:08 - this will be my image
319:10 - all right as always let's make sure that
319:12 - we remember to click on publishing
319:15 - then we're going to head over back and
319:17 - like i said we would want to add these
319:19 - new assets and by the way this is not
319:21 - what i wanted to do this is going to
319:23 - give me the draft where i can just
319:24 - delete it so in this case i can say all
319:27 - right i don't want this asset and last
319:30 - one i would want is link existing assets
319:34 - or the way we would do that of course
319:36 - again we're going to find for the images
319:39 - that will be added to all my rooms okay
319:42 - now this will be added again we can just
319:44 - get rid of that guy because we don't
319:46 - need it and then we just click on
319:48 - publish so this will be the second one
319:50 - and i'll show the third one which will
319:52 - be the last one because again you
319:54 - probably don't want to watch me do the
319:56 - data entry so it doesn't really make
319:59 - sense to do more in three now last one
320:01 - i'll show you that we can do it from the
320:03 - actions tab right here so we don't have
320:05 - to go back
320:07 - just click here create now this will
320:10 - gonna create a new m tree and then i'm
320:13 - gonna check it out what was the naming
320:15 - that i used so i used single standard
320:18 - okay so this will be my last one so i'm
320:21 - gonna go with single
320:23 - or you know what not triple uh triple
320:26 - standard
320:28 - standard room this will be standard of
320:31 - course the slug will be the same just
320:33 - with a hyphen
320:35 - like so type will be still triple
320:38 - price i don't know we can go with maybe
320:41 - 200
320:42 - again we're just free writing here
320:44 - uh size i don't know maybe go with 400
320:48 - capacity still three
320:50 - and why don't we add for this one the
320:53 - pets are allowed as well as the
320:55 - breakfast but it will still not be
320:57 - featured and last but not least i would
320:59 - want to head over and again add the
321:02 - description
321:04 - like we did before so let's check it out
321:07 - this will be my description
321:08 - maybe let's get rid of all the quotation
321:11 - marks here
321:12 - like so
321:14 - and we have also obviously our json data
321:17 - for
321:18 - extras so let's select that
321:22 - this will be added here and then let's
321:25 - add also the images like we already did
321:27 - before
321:28 - where we're going to click on that
321:30 - then we're going to head over to room
321:32 - 15.
321:33 - this will add our image okay so far so
321:36 - good you can obviously right away
321:37 - publish it and let's link our existing
321:40 - assets which by this time if you have
321:42 - been coding along you should have at
321:45 - least some images already there so you
321:47 - can click on existing assets then we're
321:50 - going to find them i'm going to say this
321:52 - guy this guy and this guy
321:54 - will be added and of course i'm just
321:56 - going to publish that
321:58 - then the moment i do that
322:00 - once we're were gonna head over back to
322:02 - all my data
322:04 - i should be able to see that i have 16
322:07 - where previously i had 13. once you have
322:10 - added whatever rooms you would like
322:12 - obviously in your case if you're trying
322:14 - to access it it would make more sense
322:17 - the more rooms you're going to have
322:19 - because like i said the moment you start
322:20 - filtering it it makes sense that you
322:23 - have more data otherwise if you have
322:25 - three rooms the filtering is also going
322:27 - to be kind of boring once you have added
322:29 - the data next one we're gonna look at
322:32 - how we can access this data from our
322:35 - application all right guys we
322:37 - successfully set up our data structure
322:39 - as well as we added the data so now this
322:42 - would be the time where we start in fact
322:44 - consuming our data and the fastest way
322:47 - of doing it would be using the sdk and
322:50 - for that we will gonna have to install
322:52 - one more package by the name of you
322:54 - guessed it contentful or contentful
322:56 - doesn't really matter however you would
322:58 - want to pronounce it i will going to
323:00 - stop the dev server i'm going to clear
323:02 - the console right now and we're going to
323:03 - copy and paste it here the npm install
323:06 - contentful or contentful and let me just
323:09 - copy and paste that and sure enough this
323:12 - will be installing right now while this
323:14 - is being installed why don't we right
323:16 - away
323:17 - check it out the documentation and what
323:19 - we're really interested
323:21 - is creating the client
323:23 - as well as running the method of getting
323:26 - entries again there's a bunch of things
323:27 - that you can do here and if you would
323:29 - want to get a single entry obviously
323:32 - check it out the get entry but what we
323:34 - will be interested
323:35 - is getting entries now as we're
323:38 - scrolling down
323:39 - you're all going to notice that first
323:40 - and foremost we do need to install it
323:42 - they also let you know that if for
323:45 - example you're working with simple
323:47 - vanilla javascript application you can
323:49 - do something like this where you are
323:51 - using the cdn but it will not be our
323:54 - case of course because we do have the
323:57 - content full installed and then we just
324:00 - need to require it of course and then
324:02 - run this method create client
324:05 - and we need to pass here the object with
324:07 - two parameters one would be space and
324:10 - the second one will be access token now
324:12 - i'll show you in a second again where we
324:14 - do need to get this information but i
324:16 - think this will be our first step
324:18 - so why don't we clear the console we can
324:21 - start the dev server
324:22 - obviously these will be two first steps
324:25 - then i can close it and we can create a
324:28 - new file so within the source i could
324:31 - say you know what i would want a new
324:33 - file
324:34 - and i'm going to call this file let's
324:36 - say
324:37 - contentful
324:39 - contentful and we're going to say js and
324:43 - instead of using
324:45 - the syntax that they give us here which
324:47 - by the way we can do it you can just
324:49 - copy and paste it why don't we set up
324:51 - the es6 way what i'm going to say import
324:54 - now in this case i will need to use the
324:57 - named import and the method name will be
325:00 - create client this will be from
325:03 - contentful and then right away we're
325:05 - going to use the export default we're
325:07 - going to say export default and we're
325:10 - going to run this method or the function
325:13 - but we're going to pass in obviously our
325:15 - own parameters so the first one will be
325:17 - space and the second one will be access
325:20 - token where can we get this information
325:22 - remember in the very very beginning i
325:25 - showed you that here we have the api
325:27 - keys under the settings we head over to
325:30 - api keys and we just need to create one
325:32 - now i can name this however i would like
325:34 - this could be store 4 or whatever i'm
325:37 - just going to say resort
325:39 - rooms or something like this
325:42 - then let's copy this guy let's say that
325:44 - this will be my space
325:46 - and we're going to set this equal and as
325:48 - a side note in the next video before we
325:51 - deploy this on a netlify we will going
325:54 - to create our environment variables okay
325:56 - so if you are right now committing this
325:58 - to the github please don't because you
326:00 - probably don't want to share this
326:01 - information
326:02 - then i'm going to get also my
326:05 - access token
326:07 - and the same would go here for the
326:08 - property on the object access token and
326:12 - this will be equal to my string
326:14 - now let's save that we have successfully
326:17 - exported right away this function
326:20 - so now our next step will be heading
326:23 - over to the context
326:24 - then right after the items i would want
326:26 - to import since this is a default export
326:28 - anyway i can name this however i would
326:30 - want i will name this client and this
326:33 - will be coming from my local content
326:35 - file so the same folder all right now
326:39 - once i have that i will gonna use client
326:42 - and then if you're looking at it in
326:44 - their example they give you this get
326:46 - entry
326:47 - where we are looking for specific
326:49 - entries and this is what i was saying
326:51 - where
326:52 - these two probably will be your most
326:54 - used ones where either you're getting
326:57 - all the entries or you're getting
326:59 - specific one now you have other options
327:01 - here but these will probably be your
327:04 - most used ones instead of getting the
327:06 - entry which we will not do i'm gonna
327:08 - head over to the get entries and right
327:10 - away notice what happens so they give
327:12 - you an idea what you should do and this
327:15 - is exactly how we're gonna test it out
327:16 - first by running client which in our
327:19 - case obviously would be whatever we
327:21 - would name it because that was a default
327:24 - export the click client or create client
327:27 - and then we're just going to run get
327:28 - entries this will return a promise
327:31 - and then we're going to consume the
327:33 - promise with dot then and then we're
327:36 - just going to be looking for response
327:38 - and the reason for that because i want
327:39 - to show you
327:40 - what would be the pitfall
327:43 - if we are not filtering actually our
327:45 - entries okay let's copy this in our case
327:48 - i already named this client so we're
327:50 - going to have to
327:51 - adjust it a little bit where it will not
327:53 - gonna be client
327:55 - but let's say all the way on the top of
327:57 - our file i'm just gonna run it now first
328:00 - and foremost i do wanna check whether my
328:02 - dev server is running before i start
328:05 - checking out the console yes everything
328:07 - is correct and then we'll gonna head
328:09 - over back to my recording and let's see
328:12 - what happens if i open up the console
328:15 - okay now in this case
328:17 - nothing is happening but at the moment i
328:20 - do have my array and what do you see
328:23 - right now when i see array of 64
328:26 - and the problem is the fact that i'm
328:29 - getting
328:30 - all the data
328:31 - that i have right now so everything that
328:33 - i have and by the way i'm going to save
328:34 - the changes here so it's working but all
328:38 - my entries are here not just my 16
328:40 - the ones that i was looking for where i
328:42 - said that i would want the beach
328:45 - resort room as you can see right now i
328:47 - can't filter it out but if i'm looking
328:49 - at all my data in fact the value will be
328:52 - 64.
328:53 - so
328:54 - what i'm saying is if you're going to
328:56 - have multiple content types
328:58 - for let's say each and every project you
329:00 - probably would want to filter it out you
329:02 - can obviously do this in your file i
329:05 - could go back and be like okay whatever
329:07 - data i'm getting back i would want to
329:09 - filter it somehow out but you can also
329:11 - do it right away as you're making the
329:14 - request and in order to understand more
329:16 - information about this what we were
329:18 - going to do
329:19 - as we are getting the entries we were
329:22 - going to head over to rest api reference
329:25 - and this will going to give us more
329:26 - details
329:28 - now
329:28 - as we're looking at it notice what
329:30 - they're saying if you want to query
329:32 - entries we would need to use
329:35 - either content id or content type now in
329:39 - our case we're going to go with content
329:41 - type and if you're going to click on
329:43 - querying the entries check this out so
329:46 - they tell you okay
329:47 - what would be the content type and then
329:49 - within the content type we are passing
329:52 - in the id
329:53 - now your next question probably will be
329:56 - well where are we looking for that id
329:58 - and remember in the very very beginning
330:00 - when we were setting this up
330:02 - i was like a chicken and i was
330:05 - reminding you all the time you need to
330:07 - remember this id you need to remember
330:08 - this id and when i say remember
330:10 - obviously i don't mean that you need to
330:12 - remember the id for each and every
330:15 - content model that you have but you
330:17 - should know where to find it so if
330:19 - you're going to go to that particular
330:20 - content model this is the id
330:23 - that you'll have to use in order to
330:25 - filter your data
330:27 - depending on your particular content
330:29 - model
330:30 - so what we can do over here is again
330:32 - we're just testing it out right now
330:33 - don't worry about it but we do need to
330:36 - write content
330:38 - like so then underscore
330:40 - type and then let's pass in that beach
330:43 - room sort because that was obviously the
330:45 - name of my content type if you have a
330:48 - different name please add a different
330:49 - name than one that's matching and voila
330:52 - in our case we have the 16 items that i
330:55 - was looking for so once i have this
330:57 - information of course
330:59 - we would need to
331:01 - restructure a little bit of our
331:02 - application because the moment the only
331:04 - thing that i'm doing is console logging
331:06 - and that is obviously not the extent
331:09 - that i would like to do so remember in
331:11 - the very very beginning i said to you
331:13 - they're all going to be this function
331:15 - by the name of get data that will be
331:18 - responsible for getting the data from
331:20 - the continental and instead
331:23 - of doing everything in the component did
331:25 - mount where we again used our method the
331:28 - one that we created ourselves with
331:30 - format data instead we were going to
331:33 - move all this functionality into this
331:35 - this dot get data and then we're just
331:38 - going to run this
331:39 - function okay now let's list it up first
331:42 - of all let's build it we're going to
331:43 - name this
331:44 - surprisingly get data
331:47 - then this will be a sync because i do
331:50 - want to use a sync weight because this
331:52 - is just a little bit
331:54 - more straightforward syntax
331:56 - as we're dealing with asynchronous code
331:59 - so let's write it here async await and
332:02 - you know what why don't we right away at
332:04 - it within a try catch because that way
332:06 - we're all going to be able to find more
332:07 - errors if there are any and the first
332:10 - thing
332:11 - why don't we console log the error
332:13 - just in case there is one and then
332:15 - within the try what would we want to set
332:18 - up
332:19 - well we're all going to be waiting for
332:21 - response and since we are using a single
332:23 - weight i can just say okay let
332:26 - response and this will be equal to
332:29 - a weight
332:31 - because i am using a sink weight and
332:33 - then i have the client and in this case
332:36 - i am using again get entries so either
332:39 - you can copy and paste it whatever we
332:41 - had here on top where we had the entries
332:44 - and then you would want to add this
332:46 - content type now we will gonna add one
332:48 - more thing for the order but that will
332:50 - be in a second so you know what since
332:52 - i'll have to delete it anyway i will
332:54 - gonna get rid of this guy i will gonna
332:57 - delete that then
332:58 - and we're just going to set this await
333:00 - equal to whatever response we're going
333:02 - to be getting so now we're getting back
333:04 - this in this response variable all right
333:08 - now okay so far so good we got our
333:10 - response back
333:11 - now what well we have all this
333:13 - functionality
333:15 - and remember again i was repeating this
333:17 - over and over again when i said
333:20 - we are creating this function correct
333:23 - but then within the function at the
333:24 - moment we were passing all the time i
333:26 - keep repeating local data local data
333:28 - local data and then once we're going to
333:30 - get external data we will going to flip
333:33 - it around
333:34 - where all this data that we were using
333:36 - all the time locally
333:38 - we all just going to use externally and
333:41 - we are
333:42 - not going to change any functionality
333:44 - below that all right so how this is
333:46 - going to work well i am using right now
333:48 - my response i'm getting my response so
333:51 - it's very easy in fact i can
333:54 - take everything that i had already
333:56 - before
333:57 - here we can just actually cut it out
334:00 - because again i don't see the point of
334:01 - rewriting anything
334:03 - we can
334:04 - uncomment this so we will
334:07 - run this that data
334:09 - however after the response
334:11 - once i copy and paste that the
334:13 - difference would be that i'm not adding
334:16 - here the items then in fact we will
334:19 - gonna
334:20 - pass within our function response items
334:23 - so the way this all works is i'm getting
334:26 - back my response from the contentful and
334:29 - on the response object there will be
334:32 - items
334:33 - now if i open up my response check this
334:36 - out what happened here when we were
334:38 - console logging remember we were console
334:40 - logging response data items
334:42 - this is the array that we already had
334:45 - locally meaning like i said we had less
334:48 - fields we obviously didn't have in a
334:50 - system object so many options we didn't
334:53 - have as well some maybe extra stuff that
334:55 - they had within the fields property but
334:58 - in general the setup was exactly the
335:01 - same and again if you want to double
335:03 - check that you can notice that whenever
335:05 - you're going to be dealing with
335:07 - get entries this is exactly what's going
335:09 - to happen you will going to have your
335:11 - response object and then within the
335:13 - results pawn subject the property name
335:16 - will be items and the way we structured
335:19 - our data locally is a simple difference
335:23 - that
335:24 - as i'm getting this data right now
335:25 - externally i don't pass items i pass
335:29 - response items of course you could set
335:31 - this up differently but the main idea is
335:34 - very simple here that now the data will
335:38 - be
335:38 - from contentful it will be external data
335:42 - and the difference pretty much is just
335:44 - the fact that we are getting it from the
335:46 - control i'm specifically saying what
335:48 - kind of data i'm looking for and then
335:51 - from the response i'm just using the
335:53 - items and everything else here yes will
335:56 - stay the same now what i would like to
335:59 - do right now is comment out the items
336:01 - just for sure that you know that i'm not
336:03 - using the local data
336:05 - we will gonna save that
336:07 - and voila people if everything is
336:10 - correct and i can by the way close the
336:12 - console check this out i already can see
336:14 - that i have featured rooms
336:16 - so this is working really well
336:18 - and then i have rooms all together so i
336:21 - have all my 16 rooms check this out so i
336:23 - have four rows with four columns each
336:27 - now i know that i successfully got the
336:29 - data because if you remember
336:31 - locally i had only 13 items and now
336:34 - we're working with 16 items and again we
336:36 - didn't have to change any kind of
336:37 - functionality or anything like that
336:39 - that's the reason why we went through
336:41 - the pain in the beginning
336:43 - when
336:44 - we structured our data exactly
336:47 - like they would the only difference
336:48 - obviously is that we are getting back
336:50 - the object and we placed everything
336:52 - already in this items so that was our
336:55 - items array but this way we don't need
336:57 - to recreate anything i don't need to
337:00 - refactor anything because it already
337:03 - matches the format that we're getting
337:04 - back and again we can do all the
337:06 - filtering and everything and i'm not
337:08 - going to bore you right now however
337:10 - there is one thing that you probably
337:11 - noticed where you're like
337:13 - okay so i get single standard
337:15 - then right away i have triple standard
337:18 - then i have double economy and again
337:21 - we could actually set up some kind of
337:23 - filtering right now here i could say
337:25 - okay whatever items i got filter
337:27 - depending on that and only then update
337:30 - rooms you could do it
337:32 - but since this is a case where i would
337:35 - want to show you that we can also do it
337:37 - from the contentful why don't we head
337:39 - over again to documentation
337:41 - and be rockstars and find out how we can
337:44 - do that
337:45 - so if i'm gonna go again back to
337:48 - api reference
337:49 - we all gonna scroll down
337:51 - we eventually will to hit the order or
337:55 - let's say reverse order now let's test
337:57 - it out we would say let's say order and
338:00 - there we're going to give you an example
338:01 - here pretty much where we can order it
338:04 - depending on a date and again in this
338:07 - case i just want to
338:08 - speed this up
338:10 - so i'm just going to grab this
338:11 - information order
338:13 - we're all going to head over back and
338:15 - the next one
338:16 - will be depending on order now they do
338:19 - warn you right away that
338:21 - you do need to right away set up a
338:24 - specific content type so notice they're
338:26 - saying you must set the content type
338:28 - otherwise obviously you're going to be
338:30 - pretty much working with all of the data
338:33 - that you're getting back now in this
338:34 - case why don't we set this up so in this
338:37 - case i'm using the order now let's save
338:40 - that
338:41 - and
338:42 - yep what happens here is that i have
338:44 - single economy which was first then
338:46 - single basic single standard single
338:48 - deluxe and so on and so forth let's
338:51 - imagine that you don't believe me you're
338:53 - like okay
338:54 - i don't believe that this is actually
338:56 - working maybe he's just saying that that
338:58 - was how the order came in okay just to
339:00 - prove my point
339:02 - we still have the comma i will going to
339:03 - comment this out right now and why don't
339:06 - we set up instead we can use the order
339:08 - property again that's what we need to do
339:11 - and then what is the property that we
339:13 - would want to order in well why don't we
339:15 - try it out the price and again if you
339:17 - want to find out what property you
339:20 - should order by
339:21 - you just need to go back again to your
339:23 - local data and remember each and every
339:25 - object has all the same properties so
339:27 - what do you have within the fields we
339:29 - have name we have slog type price so why
339:32 - don't we order them by price okay why
339:35 - don't we start very simply by ordering
339:37 - them by price
339:39 - as we're heading over again back to
339:41 - context.js
339:43 - now where is the price it is in the
339:44 - fields property and then we're looking
339:48 - for the price let's save that
339:51 - and yeah
339:52 - now everything is grouped by the price
339:54 - again we have 100.50 to 200 250 again
339:59 - 250 and i can go on and on and on now
340:02 - last one why don't we check it out how
340:04 - we can do the reverse order because
340:06 - again this is something that they
340:08 - suggest in the documentation where the
340:10 - next one would be reverse order and the
340:12 - only thing we would need to do again is
340:14 - use the order property and then flip the
340:18 - sign
340:19 - where this would be
340:21 - a
340:22 - negative sign or subtraction sign
340:24 - now let's test it out
340:26 - like i keep saying all the time let's do
340:29 - the negative one and now i should start
340:32 - with 600 or whatever was my max yep it
340:36 - was 600 and then obviously we're going
340:38 - reverse order
340:40 - as i said before all the things that we
340:43 - could do manually of course ourselves
340:45 - but what i'm trying to show is that
340:47 - contentful gives you nice options where
340:50 - you can already get your data structured
340:54 - the way you would like
340:56 - we successfully have pulled data from
340:58 - the contentful and now we're ready to
341:01 - deploy our application online well
341:03 - there's many awesome platforms that we
341:05 - could use in our case we're going to use
341:06 - netlify because it's an awesome
341:08 - hassle-free service and even free
341:11 - account allows you to do a bunch of
341:13 - things in order to get the free account
341:15 - the only thing you would need to do is
341:17 - sign up with your email and they will
341:19 - not gonna hassle you you're not gonna
341:21 - have to leave your credit card or
341:22 - anything like that and you're going to
341:24 - be good to go assuming that you already
341:26 - have signed up for the account i'm just
341:29 - going to log in and in your case
341:31 - probably if you just sign up for the
341:33 - service this screen will be empty in my
341:35 - case i have a bunch of projects for the
341:37 - tutorials on the project there's two
341:40 - ways how we can do it we can do a single
341:42 - drag and drop or in fact we can use the
341:45 - continuous deployment using the github
341:47 - this is the option we're gonna choose so
341:50 - for that you're also gonna need to have
341:52 - a github account however assuming that
341:54 - you're watching a react tutorial it's
341:56 - safe to say that you probably already
341:58 - have one so i'm just gonna be kind of
342:00 - skipping a lot of things because i do
342:03 - find it very very basic first and
342:06 - foremost we're gonna have to create a
342:07 - new repository i'm gonna name one i
342:10 - don't know
342:12 - react
342:13 - beach
342:14 - resort
342:16 - and let's say recording
342:19 - and then what i would like to have is
342:21 - the
342:22 - external url and in my case it's saying
342:25 - okay you can have it and the reason why
342:28 - i would want the remote url because this
342:30 - is going to let my git know where to
342:33 - push the application that we have built
342:35 - then we're going to head over back to my
342:37 - document and before we
342:40 - actually set up the git i would like to
342:42 - change these variables to the
342:44 - environment variables because i wouldn't
342:46 - want to push them up to the github now
342:49 - in order to do that we're going to first
342:50 - create a new file we're going to call
342:52 - this dot env
342:54 - development like so once we have this
342:57 - file i would also right away want to add
343:00 - this to git ignore so this way the file
343:03 - will be ignored when we're going to be
343:05 - pushing this up to the github
343:07 - and let's call this not git ignore but
343:09 - in fact env
343:11 - development just make sure that you add
343:14 - this dot in front of it and once we have
343:17 - the
343:18 - development file within
343:20 - the file we're going to create the
343:21 - environment variables
343:23 - now in that case we can change how we're
343:26 - accessing them so instead of just
343:28 - placing the string here so the rest of
343:30 - the world can see our secret variables
343:32 - we're going to set them up in the
343:34 - environment variable file and the way we
343:37 - work it with create react app the naming
343:40 - would be react
343:42 - underscore app and then whatever name of
343:45 - your variable so in my case i will going
343:47 - to call this api
343:50 - and let's call this space i'm going to
343:51 - set this equal to whatever string i had
343:54 - first and foremost and the second will
343:56 - be this access token
343:58 - so let's grab this value as well by the
344:00 - way we can probably cut this out and
344:03 - we'll just go with naming react
344:06 - app
344:07 - access
344:09 - token and then let's copy and paste that
344:12 - once i have these two values what's
344:14 - going to happen is my application will
344:17 - break even though we were going to be
344:19 - accessing them now let me show you how
344:21 - this is going to work first and foremost
344:23 - if you would want to access these
344:24 - environment variables we go with
344:25 - process.env
344:27 - and then whatever name we had so in my
344:30 - case this was
344:31 - react app api space
344:34 - so let's copy and paste that and the
344:36 - second one will be exactly the same but
344:39 - of course the variable name should be
344:41 - matching whatever i had for the access
344:43 - token
344:44 - so let's delete that
344:46 - and we're gonna go with the react app
344:48 - that is again the important part and
344:50 - let's call this access
344:52 - token once i'm going to save it my
344:54 - application will going to break and the
344:55 - reason why it will break because every
344:57 - time we're creating these environment
345:00 - variables we do need to restart the
345:02 - server so let's stop the server
345:05 - clear the integrated terminal
345:07 - and let's run npm start just double
345:09 - check that everything is working because
345:11 - obviously it doesn't make sense pushing
345:14 - this up to the netlify if you already
345:16 - have some errors locally thankfully
345:18 - everything is working so everything is
345:20 - awesome and now again i'm going to have
345:22 - to clear the integrated terminal as well
345:25 - as stop the server and my first thing
345:27 - would be setting this up as a git
345:30 - repository so we're going to initialize
345:32 - the git
345:33 - get in it now once we do that the next
345:36 - one would be adding all the styles or
345:39 - not i'm sorry not all the styles all the
345:41 - files so in order to do that of course
345:44 - we're going to say git add and we're
345:46 - going to add all of them
345:47 - then after that why don't we do the
345:49 - commit so git commit and what would be
345:52 - the message i don't know
345:53 - react
345:55 - beach
345:57 - beach application
345:59 - something like this
346:00 - at this moment we're committing and now
346:03 - we would need this remote url so in this
346:06 - case i'm going to copy and paste this
346:07 - line
346:08 - clear the console probably first now
346:12 - this will gonna create my remote url and
346:15 - last but not least i would want to push
346:17 - it up to my
346:18 - github repository so let's go back
346:21 - get push
346:23 - u
346:24 - and origin will be master in our case
346:27 - hopefully everything is working
346:28 - hopefully we didn't push up the
346:30 - environment development file because
346:32 - otherwise everything that we did is kind
346:34 - of useless anyway
346:36 - uh let's refresh the browser let's see
346:39 - okay this will be my project awesome and
346:42 - now we're going to have to head over
346:43 - back to indentify and we're gonna have
346:45 - to click on this tab where we have new
346:47 - site from git and of course in this case
346:50 - i would need to choose my provider in my
346:52 - case i will gonna choose the github and
346:55 - then why don't we find right away the
346:57 - file that i had or not file the
346:59 - repository
347:00 - and it was the react beach resort
347:03 - recording however before we do anything
347:06 - before we click on deploying the site we
347:09 - would want to check out the advanced one
347:11 - and add the same variables that we had
347:14 - before otherwise basically you're going
347:15 - to deploy the site it will going to
347:17 - break and then you're going to have to
347:18 - add them anyway so you might as well
347:20 - skip that step and the way we're going
347:22 - to do that we do need to copy and paste
347:24 - these values so number one
347:27 - and number two would be the value of
347:29 - course
347:30 - so this will be my space one
347:33 - and then after that i would want another
347:34 - one the access token
347:36 - so let's go with this guy
347:38 - copy and paste
347:40 - and the same i'm going to do it over
347:42 - here
347:43 - copy and paste
347:45 - once we have that let's deploy the site
347:47 - now notify we're going to start building
347:49 - the site and while the build process is
347:52 - happening we're just going to go to the
347:54 - site settings and we're going to change
347:55 - the name and again why don't we change
347:57 - the to react
347:59 - beach
348:01 - resort
348:03 - recording
348:05 - yeah i should do it let's save that and
348:08 - it says the name is already taken
348:11 - okay unfortunately that is the case why
348:13 - don't we say youtube as well
348:16 - i think this should work
348:17 - and yes it is working we change
348:19 - successfully
348:21 - site name let's look at the deploy
348:23 - currently we can even check it out how
348:25 - the build process is happening
348:27 - and as you can see right now this is
348:29 - being built and if there will going to
348:32 - be some errors you will be able to see
348:34 - them now i do need to warn you that it
348:36 - is kind of hard to work off the netlife
348:41 - errors as you're getting them in most
348:43 - cases you do need to troubleshoot and
348:46 - that is not as easy as it seems but
348:49 - anyway you can see if there's some kind
348:51 - of error and let's say there would be an
348:53 - access token error or something like
348:54 - that it might show up here okay now
348:57 - let's head over to the github we can
348:59 - might as well close that the site is
349:01 - still being built but no it's already
349:04 - live awesome
349:05 - let's
349:06 - head over back to a site we're going to
349:09 - click on here and of course this will be
349:11 - my site and check this out i do have my
349:14 - rooms awesome and if you remember we
349:17 - were using the order and the order was
349:20 - reversed so in this case everything
349:22 - comes with a higher price first
349:25 - then we do have the rooms
349:27 - so we have the rooms we obviously can
349:28 - have an option of filtering it
349:31 - we can also have the error page where if
349:34 - i'm not going to be able to find the
349:35 - page let's say we're going to go with
349:37 - hello notice remember we had our 404
349:40 - page not found and this is where that
349:43 - file remember we copy and paste in the
349:46 - public dose redirect so if you're not
349:48 - going to copy and paste that if you're
349:49 - not going to use that simple line of
349:51 - code then it will going to be directing
349:53 - you basically to your
349:56 - default netlify error page as well as
350:00 - when you're going to be refreshing the
350:01 - single page if you're going to click on
350:03 - here and if you're going to be
350:04 - refreshing the single page it will not
350:06 - work in our case notice nothing breaks
350:08 - and this is why it's important to
350:10 - include those redirects we do have all
350:12 - the pages everything is working and just
350:15 - to show you that we are actually
350:16 - connected nicely with contentful
350:19 - let me show you one last thing if we're
350:22 - going to head over let's say to con in
350:23 - full and just because this is an easiest
350:26 - option i will going to delete one of the
350:28 - rooms that we have just so you can see
350:30 - that this is working and the room that i
350:33 - will gonna delete will be presidential
350:35 - because that way we for sure know that
350:37 - this would be something unique so first
350:40 - and foremost we're gonna have to go with
350:41 - then publish
350:42 - okay so we're gonna unpublish it then it
350:45 - shows that this is a draft already
350:47 - now it's not published and then why
350:49 - don't we delete it so we're gonna go
350:51 - with deletion
350:52 - and the moment we do that if i'm gonna
350:54 - head over back to my project notice this
350:57 - was previously the first one the moment
350:59 - we're going to refresh what do you see
351:01 - here i don't see any more presidential
351:03 - and if you're going to look at all the
351:05 - rooms we notice that we have one list so
351:07 - now we know that everything has been
351:09 - nicely connected to contentful and what
351:11 - that means is that now your project
351:14 - doesn't have to be in your local machine
351:16 - you don't have to add all the changes in
351:18 - fact you can work with your project data
351:21 - exclusively on contentful hopefully you
351:23 - guys enjoy the project and hopefully
351:26 - i'll see you on my next project