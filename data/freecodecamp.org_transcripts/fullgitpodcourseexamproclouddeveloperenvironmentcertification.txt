00:00 - hey this is andrew brown your cloud
00:02 - instructor exam pro bringing you another
00:04 - complete study course and this time it's
00:06 - the exampro cloud developer environment
00:08 - certification made available to you here
00:10 - on freecodecamp so this course is
00:12 - designed to help you pass and achieve
00:14 - example issued certification and the way
00:17 - we're going to do that is by going
00:18 - through a lecture content doing follow
00:20 - alongs within our own account uh doing a
00:23 - practice exam so that we're preparing
00:25 - for the day of the exam and also
00:27 - utilizing cheat sheets so that you can
00:29 - cram some last minute information so
00:31 - that you're able to pass that exam and
00:34 - improve on your resume and on your
00:35 - linkedin you've got that cloud developer
00:37 - knowledge so you can get that cloud job
00:39 - or that promotion so i'm andrew brown i
00:43 - was previously the cto of multiple
00:44 - edtech companies with 15 years industry
00:46 - experience five years specializing in
00:48 - cloud i'm an awesome community hero and
00:50 - i've published many many free courses
00:53 - just like this one and if you ever want
00:55 - to buy me drink i love coconut water i
00:57 - want to take this moment to thank
00:58 - viewers like you because it's you that
01:00 - make these free courses possible and the
01:02 - best way you can support more free
01:04 - courses like this one is to buy the
01:06 - additional study material so that is the
01:09 - link there at the exp cd01 where you can
01:12 - get study notes flash cards quizlets
01:14 - downloadable lecture slides downloadable
01:15 - cheat sheets prax exams you can ask
01:18 - questions get learning support and it's
01:20 - all free to sign up yeah just to even
01:22 - get your prax exam cheat sheets so it
01:24 - requires no credit card there's no trial
01:26 - limit so there's no reason not to sign
01:28 - up um and if there are updates to this
01:30 - course look in the in the youtube
01:32 - comments to see when there is an update
01:34 - and this is where we would see things
01:36 - like corrections additions modifications
01:39 - to ensure that you're using the latest
01:40 - version of this course and if you want
01:43 - to keep up to date on upcoming courses
01:44 - the best way to find out is to follow me
01:46 - on twitter and share with me what you
01:49 - passed and what you'd like to see next
01:51 - so there you go let's get to it
01:57 - journey asking the most important
01:59 - question first which is what is the
02:01 - cloud developer environment
02:02 - certification so the cloud developer
02:04 - environment or cde is a practical cloud
02:07 - certification center round of the open
02:09 - source developer tool get pod and here
02:12 - we're going to learn about the benefits
02:13 - of cloud developer environments over
02:15 - traditional tools practical knowledge
02:17 - utilizing a cde for the purpose of
02:19 - application or cloud development
02:21 - team-based collaborative uh features for
02:24 - utilizing cds because that is the main
02:26 - benefit of cdes advanced cde techniques
02:29 - like custom containers pre-builds and
02:31 - more the course code for this course is
02:34 - exp cde 01 and the reason that is
02:37 - important to know is because that's how
02:39 - you know what version of the exam you're
02:42 - taking so you always want to make sure
02:43 - that you double check to make sure that
02:45 - you are using the latest
02:47 - course there and so exp is the
02:49 - certification authority in this case it
02:51 - is exam pro cde is the name identifier
02:54 - standing for cloud developer environment
02:56 - and one is the version of the exam we
02:59 - also like to call this exam the get pod
03:01 - essential certification or the git pod
03:03 - course because it's so focused on git
03:06 - pod but there's a reason why this uh
03:08 - that is and we'll explain here in a
03:09 - moment so who's the certification for
03:11 - well consider the cloud developer
03:13 - environment certification if you are new
03:14 - to programming or scripting because if
03:17 - you are working in the cloud you're
03:18 - going to have to have an environment to
03:20 - code and the best environment is in the
03:22 - cloud at least in my opinion here
03:24 - if you are a web application developer
03:27 - role or you're transitioning into a
03:28 - cloud developer role
03:30 - it's a very good idea to adopt cloud
03:33 - developer environments or if you're a
03:34 - director of engineering or staff
03:36 - engineer and you're looking to adopt cd
03:38 - cdes to optimize the jillian and
03:41 - productivity of your development team
03:42 - because that is the main benefit of
03:44 - adopting it is that you're going to get
03:46 - increased productivity so before we look
03:49 - at the roadmap we always do a roadmap to
03:50 - show you where should you go after the
03:52 - certification
03:53 - but i need to break this down into three
03:55 - types of certifications because this is
03:57 - an exam pro certification and so we have
03:59 - three types fundamental certifications
04:01 - that's where we have a cloud concept
04:04 - that is best taught with a large focus
04:06 - on cloud agnostic knowledge so example
04:08 - of that would be the cloud programming
04:10 - certification we have technology
04:12 - specific certifications like
04:14 - a cloud concept that is best taught by
04:16 - using a single technology in greater
04:17 - detail and in this case that is what the
04:20 - get pod certification is it's it's just
04:22 - that you know we want to teach cloud
04:24 - developer environments but it just makes
04:26 - sense to use a single tool for that then
04:29 - there are our role-based certifications
04:31 - so this is where
04:32 - you have done a bunch of fundamental and
04:35 - technology-specific certifications and
04:37 - then you are requiring to submit a
04:39 - project to earn that role so an example
04:41 - would be the exam pro's cloud developer
04:43 - certification so let's take a look at
04:45 - our roadmap and see where we can go
04:48 - with the git pod certification so the
04:50 - idea is we have that fundamental
04:51 - knowledge that technical specific
04:53 - knowledge and then the idea is that
04:54 - we're trying to show that proof of
04:57 - combined knowledge to earn that
04:59 - role-based certification so this is all
05:01 - based for a cloud developer or modern
05:05 - application developer there's overlaps
05:06 - with other cloud rules like cloud
05:08 - engineers but let's take a look at the
05:09 - cloud developer specific path here so
05:12 - the idea is that you would start with
05:14 - the cloud developer environment because
05:15 - if you're going to be doing programming
05:17 - or development you're going to need an
05:18 - environment so it makes sense to know
05:21 - inside and out a cloud developer
05:22 - environment from there you would need to
05:25 - know a variety of different programming
05:27 - languages in the context of cloud
05:28 - programmings working with sdks apis cli
05:31 - things like that so that is the natural
05:33 - path after the cde
05:36 - from there we would look at application
05:37 - integration so leveraging uh a host of
05:41 - cloud services and integrating them into
05:43 - your uh traditional or your modern
05:47 - application and then cloud deployment
05:49 - because that seems to be something that
05:50 - is very important for cloud developers
05:52 - is having not just the ability to
05:54 - develop applications but to deploy and
05:57 - it's not just deploying applications but
05:58 - deploying uh integrated services as well
06:01 - from there it's really good to
06:03 - fundamentally understand virtualization
06:05 - which is not a topic that
06:06 - uh it kind of gets overlooked with the
06:08 - cloud developers so that's where
06:10 - application developers so that's why
06:12 - i think we include it here from there
06:15 - there is linux specific information
06:16 - there's windows specific information and
06:18 - for virtualization a natural path there
06:20 - is containers and then serverless so to
06:22 - me this is the scope of fundamental and
06:24 - tech specific knowledge that
06:26 - you should acquire to be a cloud
06:28 - developer and then once you have this
06:30 - knowledge you need to prove it some way
06:32 - and so that's where we have this idea
06:34 - behind having a cloud project to show
06:36 - all the knowledge and practice so you
06:38 - might be looking at saying wow that's a
06:40 - lot of certifications well the great
06:41 - thing though is that these
06:42 - certifications are smaller in scope
06:45 - and so instead of taking a big big exam
06:48 - like how aws azure or gcp has you do
06:51 - these are more focused so that you're
06:52 - having a bunch of smaller wins and
06:54 - you're getting better coverage um so you
06:57 - can think of it like a movie versus
06:59 - watching a high production long running
07:02 - or like a
07:03 - high production tv series it's just a
07:05 - different approach to um
07:07 - study okay so how long does it take to
07:10 - pass for the cloud developer environment
07:11 - so uh we have the beginner side and so
07:14 - here i say 24 hours the idea is that if
07:17 - you've never programmed before if you've
07:19 - never held a web developer role it's
07:20 - going to be on the greater side here 24
07:23 - hours if you're experienced that means
07:24 - you have practical working experience
07:26 - with web apps
07:27 - you have
07:28 - held a web developer engineering role
07:30 - we're looking at 14 hours and so in
07:33 - between here this is where i say the
07:34 - average hour is 20 hours now this could
07:37 - be a lot faster if you just watch the
07:39 - videos on two times it's up to you right
07:41 - so like there is 14 hours of content
07:43 - it's mostly because
07:44 - of the the lecture or the lab content so
07:47 - there's a lot of hands-on
07:49 - but you know if you watch it uh on two
07:51 - times then you know you're done in seven
07:52 - hours if you're experienced so just
07:54 - understand that you know it looks like a
07:56 - lot of hours but it's not as bad as it
07:57 - looks um it's 50 lecture lab content 50
08:01 - practice exams
08:03 - and then the recommendation here is to
08:04 - study one to two hours for
08:06 - 10 days
08:08 - okay what does it take to pass the exam
08:10 - well the idea is you're going to be
08:11 - watching lecture video memorizing key
08:13 - information you're going to be doing
08:14 - hands-on labs and there's a lot of it
08:16 - so follow along with your own account so
08:18 - you'll have to get a free gitpod account
08:21 - and any other things that go along with
08:23 - it and we make sure that we always make
08:24 - sure things are free for you
08:26 - so you can learn at the the lowest cost
08:28 - or at no cost
08:30 - and you'll have to do practice exams to
08:32 - simulate the real exam the great thing
08:33 - is on exam pro we have a full free
08:36 - practice exam for you no credit card
08:37 - required uh to get it so it's at exp
08:40 - cd01
08:42 - and that's where you're going to go grab
08:44 - that
08:45 - in terms of the content of the actual
08:47 - exam it's broken up into five domains
08:50 - and each domain has its own way which
08:51 - determines how many questions in our
08:53 - domain that will show up so we'll take a
08:55 - look at the domains the first domain is
08:57 - cloud developer environment concepts
08:58 - which is seven percent uh get pod
09:00 - integrations which is five percent
09:02 - thirty uh uh domain three which is good
09:05 - pod configurations is 35 percent get pod
09:07 - workflows is 35 percent and 18 for get
09:11 - pot io enterprise get pod oss so you
09:14 - know when we engineered this course we
09:16 - didn't just make it for people that are
09:17 - going to apply
09:18 - uh um uh
09:21 - apply it for their work but just also
09:23 - for that executive level that needs to
09:25 - understand how to adopt it for their
09:26 - team so that's what this category here
09:28 - is for is understanding the ecosystem
09:30 - for adoption
09:32 - um and you know a lot of it comes down
09:34 - to just knowing how to work with it as a
09:36 - team and knowing how to configure your
09:38 - environment to be productive in real
09:40 - world use cases so
09:42 - where do you take the exam well the exam
09:44 - is taken online from the convenience of
09:45 - your own home and this and the exam is
09:48 - delivered via the teacher's seat anchor
09:50 - system so teacher seat anchor is an
09:52 - online secure exam system to deliver
09:54 - certification exams similar to pearson
09:56 - vue or psi online and ensures exam
09:59 - credibility via their ai assisted
10:01 - proctor so a proctor is a supervisor or
10:03 - person who monitors students during an
10:06 - examination so that way we make sure
10:08 - that you're not cheating uh and that you
10:10 - definitely have obtained the skills
10:12 - yourself there um to schedule exam uh
10:14 - what you'd have to do is actually sign
10:16 - up for example so you keep seeing this
10:17 - thing up here you do have to go there to
10:19 - do the exam
10:20 - but once you sign up you can go uh into
10:24 - the course and click on the schedule
10:26 - button and from there you can schedule
10:28 - your exam it'll have all the information
10:31 - there for the grading exam you have to
10:33 - score at least an 80 percent we say
10:35 - around 80 percent because this uses
10:36 - scaled scoring skilled scoring just
10:38 - means that we use a point system and so
10:40 - the idea is that you know tomorrow we
10:42 - decide to make it out of 2000 points
10:44 - it's still going to be based on the
10:45 - percentage of 80 percent so when you go
10:48 - for the exam make sure you're trying to
10:49 - aim for 85 percent on your practice
10:51 - exams to make sure that you are
10:52 - comfortable uh with the exam when you go
10:55 - sit it for the response types um
10:58 - first of all first off we have 55
10:59 - questions
11:00 - so all questions are scored there are no
11:02 - unscored questions and there are no
11:03 - funny questions so you know uh it
11:06 - shouldn't be too difficult you can
11:08 - afford to get about 10 questions wrong
11:10 - there is no penalty for wrong questions
11:12 - and the format of the questions are
11:13 - going to be multiple choice and multiple
11:15 - answer the duration of the exam is 1.5
11:17 - hours so you get about 1.5 minutes per
11:19 - question the exam time is 90 minutes the
11:21 - seat time is 120 minutes and somebody
11:23 - say the seat time we're referring to the
11:24 - amount of time you should allocate for
11:26 - the exam this includes time to review
11:28 - the instructions show online proctor to
11:30 - your workspace read and accept the nda
11:32 - complete the exam provide feedback at
11:34 - the end and this exam is going to be
11:36 - valid for 36 months so that's three
11:38 - years before recertification
11:41 - so hopefully that gives you an idea of
11:43 - what you are jumping into here
11:46 - again the exam is not intended to be
11:48 - difficult it's very practical if you
11:50 - follow the content here it will be
11:52 - pretty easy for you to do
11:55 - but yeah there you go
11:56 - [Music]
12:00 - hey this is andrew brown and we are
12:02 - looking at the question of what is cloud
12:03 - native and now this is not a as
12:06 - straightforward as you imagine because
12:07 - there are a few different definitions
12:08 - here so we're going to have to go
12:10 - through a few little iterations here to
12:11 - just kind of conceptually understand
12:13 - what it is but cloud native at least the
12:15 - way i describe it is an architectural
12:17 - approach that emphasizes application
12:19 - workloads that are portable modular and
12:21 - isolate between different cloud
12:23 - deployment models and cloud service
12:25 - providers so that is what my definition
12:28 - of it is but if you talk to cloud
12:30 - service providers and we say cloud
12:31 - service providers we're talking about
12:32 - aws azure gcp
12:35 - they describe it as a term meaning
12:36 - everything built on their platform so
12:39 - you know if you were not to use
12:40 - on-premise and only to ever use aws they
12:43 - would call that cloud native
12:46 - but i would actually better describe
12:47 - that as being cloud first so sometimes
12:50 - cloud native and cloud first mean the
12:51 - same thing depending on who you're
12:53 - talking to then there's some models out
12:55 - there that say that certain components
12:57 - go into cloud native so modern design
13:00 - automation micro services containers and
13:03 - a bunch of backing services and then
13:05 - other ones describe cloud native as
13:07 - being four principles so micro services
13:09 - containerization continuous delivery
13:12 - which you could say is automation and
13:13 - devops which could mean anything because
13:15 - devops has so much stuff involved but
13:17 - you can just see that there are a few
13:19 - different things there i'm hoping that
13:20 - we lean towards my definition because i
13:22 - feel like that is a more comfortable one
13:24 - there but if it does feel confusing
13:26 - don't worry about it
13:27 - it's not just clearly defined it's just
13:29 - kind of like serverless where it's hard
13:30 - to pin down but in the context of git
13:32 - pod and cloud developer environments
13:34 - cloud native means we'll be utilizing
13:36 - microservice architecture modern
13:39 - application architecture so think
13:40 - function as a service such as containers
13:42 - and kubernetes okay so hopefully that
13:45 - and when i say that it's just the fact
13:46 - that when you have cloud developer
13:48 - environments they're going to be better
13:50 - drivers or enablers for
13:53 - modern architectures okay
13:55 - [Music]
13:59 - hey this is andrew brown and we are
14:01 - taking a look at two very similar but
14:03 - also distinct roles or technical roles
14:05 - that strongly benefit from cloud
14:07 - developer environments or cdes and so
14:10 - that is a cloud developer or a modern
14:13 - application engineer and uh you know cds
14:17 - can be used by any kind of role that's
14:18 - working in the cloud but these two in
14:21 - particular uh strongly benefit because
14:23 - they're writing a lot more uh
14:25 - programming code okay and also
14:28 - interacting with cloud workloads but
14:30 - let's talk about how they are
14:32 - similar and also how they are different
14:34 - so for both these roles they take a
14:36 - cloud first approach meaning that
14:38 - generally they're starting um you know
14:40 - on a cloud service provider
14:43 - you know in the case of modern
14:44 - application engineer you can still be
14:45 - doing that on premise but generally uh
14:48 - speaking they're going to be focused on
14:50 - using a cloud service provider first
14:53 - in terms of like how the role is focused
14:55 - for a cloud developer they're focused on
14:58 - building out the product and the product
14:59 - features whereas a modern application
15:02 - engineer is architecture focused so
15:04 - they're more interested in how to make
15:06 - the underlying resources work and scale
15:08 - and things like that
15:10 - the cloud developer is specifically
15:11 - going to focus on application
15:13 - integration with cloud services so
15:14 - that's what makes it different from a
15:16 - regular developer is that interaction or
15:18 - the interconnections with other cloud
15:20 - services which enables you to basically
15:22 - build microservices and for a modern
15:25 - application
15:27 - engineer they're architecting cloud
15:30 - native workloads so that might be
15:32 - setting up like a kubernetes cluster
15:35 - writing infrastructure as code
15:38 - setting up automation and things like
15:40 - that uh and then you know just some
15:42 - other things like things that you would
15:45 - see that a cloud developer would do that
15:46 - a modern application engineer does would
15:48 - be things like deployment by knowing
15:50 - some infrastructure as a code not a
15:52 - priority for them but it's just
15:53 - something they definitely know whereas
15:55 - the modern application engineer has
15:57 - things like automation scaling and
15:59 - operations so just to reiterate here uh
16:02 - it's like if you're taking a cloud-first
16:04 - approach to building web applications
16:05 - using cloud-native workloads or
16:07 - cloud-based tooling that sounds like a
16:09 - cloud developer and the focus is less
16:11 - about the architecture and life cycles
16:12 - and scaling and more about it being a
16:14 - productive developer using cloud and
16:17 - then on the other side of it we're
16:18 - looking at the modern application
16:20 - engineer
16:21 - it's about thinking about how to
16:22 - architect
16:23 - applications using serverless containers
16:25 - microservices there's a larger focus on
16:28 - the underlying architecture lifestyle
16:30 - life cycles and scaling not so much
16:32 - about building out the web application
16:34 - and it's less product focus so you know
16:37 - i just want you to know these two things
16:38 - because if you are entering cloud these
16:41 - are the titles you should be trying to
16:42 - cling on to if you really are invested
16:44 - as a programmer okay
16:46 - [Music]
16:50 - hey this is andrew brown and we are
16:52 - taking a look at code editors versus
16:54 - integrated development environments and
16:56 - the reason why is because git pod
16:58 - supports both and these usually look
17:00 - very similar but they are also
17:02 - dissimilar in a lot of ways and it's
17:04 - good to understand
17:05 - the trade-offs of using one over the
17:07 - other so let's talk about a code editor
17:09 - so a code editor is for writing computer
17:10 - code and they will generally support
17:12 - many programming languages with things
17:14 - like syntax highlighting in recent years
17:16 - code editors will include a community
17:17 - marketplace for extensions that allows
17:19 - you to add a variety of features to
17:21 - customize your code editor for specific
17:23 - workflows so the thing is back in the
17:26 - day when we had code editors they were
17:27 - very simple and the only way you'd have
17:30 - like really rich functionality was via
17:32 - an ide because it had everything there
17:34 - for you but now things have changed and
17:36 - things are a lot more modular and
17:38 - flexible but notable creditors would be
17:40 - things like visual studio code sublime
17:42 - vim notepad plus plus textmate things
17:44 - like that then we look at integrated
17:46 - development environments so an ide is a
17:48 - suite of tightly integrated programming
17:50 - tools
17:51 - under a single unified gui so an ide are
17:55 - generally more powerful than code
17:56 - editors and are specialized for a
17:58 - specific language or framework or you
17:59 - could say they are very opinionated for
18:02 - a specific framework or workload so they
18:05 - will include things like a terminal code
18:06 - editor debugger compiler deployment file
18:09 - management and all sorts of tooling
18:11 - notable ids here would be jetbrains
18:13 - eclipse xcode android studio visual
18:15 - studio and in a lot of cases sometimes
18:17 - it's the only way you can really develop
18:19 - stuff it's really hard to develop mac os
18:21 - applications without xcode
18:22 - it's possible but a lot of times you
18:24 - know
18:25 - the technology is so
18:28 - well designed for that use case you end
18:29 - up using ides
18:31 - but i do need to note that modern code
18:32 - editors can be modified through a
18:34 - collection of extensions to work nearly
18:35 - the same as ide so that line is becoming
18:38 - a little bit blurred
18:39 - but let's just look at the uh overall
18:41 - comparison so code editors are
18:43 - multi-purpose modular light portable and
18:46 - generally across platform when i say
18:47 - they're portable like them which is a
18:49 - code editor can be something that's used
18:51 - in the browser
18:52 - as a desktop app or even in the terminal
18:55 - but then you have things like ides uh
18:57 - these are special uh so
18:59 - in contrast they are specialized
19:00 - monolithic heavy designed to be used as
19:03 - mostly desktop apps because they need a
19:05 - full gui and may not be cross-platform
19:08 - but we say as a desktop app um you know
19:10 - that's starting to change because like
19:12 - jetbrains is now able to use jetbrains
19:14 - projector to run in the browser so you
19:16 - know these things are starting to meet
19:17 - in the middle but it's still good to
19:19 - know the difference between these terms
19:21 - but most people these days are using
19:23 - code editors okay
19:25 - [Music]
19:29 - hey this is andrew brown and we are
19:31 - taking a look at the seven benefits of
19:33 - cloud developer environments so i just
19:35 - want to know this isn't like an industry
19:36 - standard but these are the things that i
19:38 - thought that were the most important
19:40 - things to highlight about them so if you
19:42 - are talking to someone trying to
19:44 - understand why to adopt a cde into in
19:47 - terms of your company workflow these are
19:48 - the seven things you should be telling
19:50 - them the first is context so you can
19:52 - start a runtime system runtime system is
19:54 - just a developer environment on the
19:56 - context of your workload so pull
19:58 - requests uh maybe based around an issue
20:01 - a testing environment or a sandbox or q
20:03 - a then there's mobility so easily move
20:06 - to different workstations so whether
20:07 - you're on mac to windows to linux um all
20:10 - you need is a browser you can use
20:12 - multiple kinds of version control
20:14 - systems so maybe you're on github today
20:17 - tomorrow you might want to use gitlab or
20:19 - bitbucket things like that works with
20:21 - different kinds of editors so maybe you
20:22 - like visual studio code but you'd rather
20:25 - use jetbrains so you have the ability to
20:26 - move between them or you know maybe you
20:28 - are on a laptop a chromebook or even a
20:31 - tablet so you know there's a lot of
20:33 - mobility you get there then we talk
20:35 - about agility so quickly start up
20:37 - developer environments no time spent
20:39 - configuring your environment uh and so
20:41 - that's a pretty clear one it's just the
20:42 - fact that uh you've already put in the
20:44 - work for the configuration either other
20:46 - team member has or you have and the idea
20:48 - is that it's going to spin up and start
20:50 - that up right away then you have
20:52 - disposability or they're being
20:54 - disposable so always start from a clean
20:56 - point discard long live credentials at
20:59 - the end of a work session
21:01 - what's really important to understand
21:02 - here is just like or like a use case is
21:04 - the fact that a lot of times you'll
21:06 - install like uh
21:08 - libraries and if you're working with
21:09 - multiple projects you might install
21:11 - different libraries they break other
21:12 - libraries but here that's not a problem
21:13 - because everything is in the scope of
21:15 - that single project and you're disposing
21:17 - things at the end always then you have
21:19 - reproducibilities or or being
21:21 - reproducible so you can go back through
21:23 - your get history and launch the exact
21:25 - state of a developer environment with
21:27 - the required environment configuration
21:29 - because as you are
21:30 - changing your code you're also changing
21:32 - like the uh configuration to set up that
21:35 - environment and you'll have that history
21:37 - there in your commits
21:39 - then you have a
21:40 - progression or being progressive so with
21:43 - progressive versioning always start uh
21:46 - you always start with an environment
21:48 - with the latest stuff and that's poorly
21:49 - worded there but the idea that i'm
21:51 - trying to say there is like with git pod
21:53 - you can have pre-builds and so every
21:55 - change might discover breaking changes
21:57 - because it will run the code every
21:58 - single time and so as you encounter it
22:02 - you can address and then upgrade those
22:05 - to the latest version
22:06 - right so that's the idea of always
22:08 - staying on the latest then you have
22:09 - collaboration so we were talking about
22:11 - real-time collaboration here um so being
22:14 - able to share the state of a developer
22:15 - environment so hopefully you know that
22:17 - is pretty clear about those seven things
22:19 - context mobility agility disposability
22:22 - reproducibility
22:24 - being progressive or progressive
22:25 - versioning and being collaborative so
22:27 - there you go
22:28 - [Music]
22:32 - hey this is andrew brown and we are
22:34 - asking a very important question uh in
22:36 - this course which is what is get pod so
22:39 - gitpod is a company specializing in
22:41 - cloud developer environments via the
22:43 - gitpod open source software or the
22:45 - gitpod.o which is the platform so it can
22:48 - be a little bit confusing at first
22:49 - because it's like is it the product this
22:51 - is the company name or it's whatever but
22:53 - we'll just go through here to make sure
22:54 - it's crystal clear so get pod oss open
22:57 - source software which is located on
23:00 - github
23:01 - is a developer environment as code if
23:03 - you're wondering what i mean by that
23:05 - it's that it's an open source kubernetes
23:07 - application for ready to code developer
23:10 - environments that spin up fresh
23:12 - automated dev environments for each task
23:14 - in the cloud in seconds and enables you
23:16 - to describe your dev environment as code
23:19 - and instantly start remote cloud or
23:21 - cloud developer
23:22 - environments directly from your browser
23:25 - or your desktop id or even tablets if
23:27 - you want which i have yet to try but i'm
23:29 - sure it does work
23:31 - as long as you have a browser you can do
23:33 - it
23:34 - and so the idea is we have getpod.io
23:36 - and this i call it a developer
23:39 - environment as a service
23:41 - which is not something you need to
23:42 - really remember but it's basically a
23:44 - software as a service so it is a
23:46 - cloud-based fully managed offering of
23:47 - the open source software with a free and
23:50 - paid tier uh and so hopefully that is a
23:53 - distinction that it's a company that's
23:55 - an open source software it's also a
23:58 - cloud platform okay
24:00 - [Music]
24:04 - all right so i just wanted to get you
24:06 - some exposure to git pod so if you went
24:08 - to www.getpodio
24:11 - this is the main website um here so you
24:13 - can read all about it if you like but we
24:15 - do of course cover everything that is in
24:17 - here then there is the actual open
24:19 - source git pod uh and so this is where
24:22 - they have a variety of different
24:23 - repositories uh so you can start reading
24:26 - here and again we cover this within the
24:27 - course but they have a lot of
24:28 - repositories here and then there's the
24:30 - actual platform itself which is git pod
24:32 - io
24:33 - if we click into here there's no app
24:35 - it's just the naked domain uh here you
24:37 - can see i've been launching workspaces
24:38 - which we'll get into but you know again
24:40 - just to get you a little bit exposure uh
24:43 - to that gitpod ecosystem okay
24:46 - [Music]
24:50 - hey this is andrew brown and we are
24:52 - taking a look at getpod versus other
24:53 - providers i think it's important to know
24:55 - the options that are out there and maybe
24:57 - to understand why i chose to do a git
25:00 - pod course as opposed to making it an
25:01 - agnostic course um but let's go through
25:04 - it so the first is git pod code spaces
25:05 - formerly known as visual studio online
25:07 - if you try to find visual studio online
25:09 - anywhere you just can't find it
25:10 - it'll let me have like a marketing page
25:12 - but always link back to github code
25:13 - spaces so maybe both projects existed at
25:16 - one point maybe visual studio online was
25:18 - always github code spaces and was
25:20 - rebranded we really don't know but all
25:22 - there is is github code spaces so github
25:24 - code spaces is proprietary online code
25:26 - editor specifically for github so
25:29 - understand that it's proprietary not
25:30 - open source so um you know if you are
25:32 - locked in there you're not going to take
25:34 - that code editor into uh deployed on
25:36 - your own infrastructure so just
25:38 - understand that is one thing uh key
25:40 - differences you pay based on computing
25:42 - instant size so i believe that it's
25:44 - metered billing so uh i mean that's nice
25:46 - if that's how you like your compute to
25:48 - be like i use this many hours i pay for
25:50 - this many hours but you do have to
25:52 - choose or right size your instance so
25:55 - that
25:55 - uh could be good if like let's say you
25:58 - need something that's more powerful than
25:59 - git pod provides but git pod like has a
26:02 - really beefy instance and at a cost that
26:05 - like it's just really really cheap so
26:07 - you know even though you know metered
26:08 - billing and uh being able to choose your
26:11 - size sounds good uh you know this is one
26:13 - of those rare cases where i prefer get
26:14 - pod because i just don't have to think
26:16 - about it it's like totally serverless it
26:17 - doesn't currently have pre-builds right
26:19 - now so you can have longer wait times um
26:22 - i would imagine they would probably end
26:23 - up adding this at some point so uh you
26:25 - know even though i say there's not
26:27 - pre-builds right now uh you know it
26:29 - seems like github code spaces would add
26:31 - that and a very huge key difference is
26:33 - that it runs on a virtual machine so
26:35 - when you are launching um a git pod it's
26:38 - using docker right as a way of launching
26:40 - its containers and so
26:42 - um i mean
26:44 - like i'm finding containers to be a lot
26:46 - more flexible first i thought virtual
26:47 - machines would be better because maybe
26:48 - you need to install docker on a virtual
26:50 - machine or or images but you can run
26:52 - docker within docker so it doesn't
26:53 - matter um and it's just a lot easier to
26:56 - package like docker files for that kind
26:58 - of stuff so i kind of feel like git pod
27:00 - has the advantage there because it's
27:01 - using containers okay um and the use
27:04 - case here is only if you're using github
27:06 - so if you're using git lab or code
27:08 - commit or something else uh you know
27:10 - you're not gonna be using github code
27:11 - spaces so you have to understand that
27:13 - your workflow is gonna be very tied to
27:14 - github and this might cause friction for
27:16 - larger companies that like are using
27:18 - elazi and jira and they have everything
27:21 - in bitbucket which is very popular so
27:23 - you know just has to work
27:25 - fit your workflow github of course is
27:26 - the most popular version control system
27:28 - out there and then visual studio code is
27:30 - the most popular code editor so you know
27:32 - for most people it's going to meet their
27:34 - use cases but you know uh
27:37 - i i just i still lean towards get pod
27:38 - here uh then we have aws cloud nine so
27:41 - this is an online code editor service
27:42 - within aws
27:44 - um
27:45 - i liked it i liked it for years i still
27:47 - use it for a lot of use cases
27:48 - it runs on a virtual machine you can
27:50 - only choose very particular types of
27:52 - amis to run it on but i mean i guess
27:54 - it's no different with um git pods
27:56 - because git pod runs on debian ubuntu
27:58 - like a debian like instance and so i
28:00 - guess cloud9 technically has more
28:02 - flexibility of what the virtual machine
28:04 - is but when you're dealing with
28:05 - containers you can have whatever you
28:07 - kind of whatever you want i guess not
28:09 - because in git pod you can only run
28:11 - debian or ubuntu instances but um yeah i
28:15 - guess there's more flexibility here with
28:16 - cloud9
28:17 - you pay for the online virtual machine
28:19 - cost it has a free tier um
28:22 - these case here is if you need a simple
28:24 - persistent developer environment with
28:25 - simple collaboration features you want
28:27 - to take advantage of built-in enable
28:28 - support within cloud nine for service
28:30 - development
28:31 - um it is easier to use than visual
28:34 - studio code so for beginners especially
28:36 - when you do aws stuff i'm showing them
28:38 - cloud nine but like if you're serious
28:40 - about your development you're probably
28:41 - gonna wanna use something like visual
28:42 - studio code and then that's where you're
28:44 - going to be using git pod or code spaces
28:47 - and things like that
28:48 - then we have the google cloud cloud
28:50 - shell editor this is an online coder
28:51 - part of the google cloud shell the key
28:53 - difference is it's free uh and it's free
28:56 - to up to a certain point there's no team
28:58 - collaboration features at least that i i
29:00 - saw
29:01 - and this is intended for experimentation
29:03 - or rapid prototyping with gcp services i
29:05 - wouldn't really consider it for
29:06 - application development in a team
29:08 - environment uh there's probably possible
29:10 - limitations on performance of the
29:11 - runtime environment i couldn't find
29:13 - details about it and it has limited
29:15 - hours per month i thought it was
29:16 - like free 100 hours i might say this
29:19 - somewhere else in the course saying like
29:20 - google cloud shell gives you unlimited
29:22 - hours but it's not true i found it was
29:24 - like limited to 50 hours a month but
29:26 - it's still really good um and it's
29:28 - running visual studio code alongside
29:30 - their shell so when you're in google
29:33 - it makes things a lot easier and so you
29:35 - know when i'm doing
29:37 - google cloud workload stuff i will be
29:39 - using that thing but when i want
29:40 - something that's persisted like a
29:42 - project i'm not going to be doing it in
29:44 - the cloud shell editor i'm going to be
29:45 - putting in a repository and launching up
29:47 - git pod but a really great way to learn
29:50 - google cloud because a lot of the
29:53 - uh the console you'll click through
29:55 - it'll say open in cloud shell and then
29:57 - open the editor so you will come across
29:59 - it but what i want to do is show you all
30:00 - these three editors uh for real just so
30:02 - you can see where they are if they
30:04 - interest you but hopefully that gives
30:05 - you an idea how they compare against
30:08 - skip pod right again gitpod runs on
30:10 - containers uh it's serverless billing
30:12 - right um you know things like that uh
30:15 - and it's it's using debian ubuntu okay
30:18 - hey this is andrew brown and i'm in my
30:20 - aws account here at the aws management
30:22 - console and i just want to quickly show
30:24 - you what cloud 9 looks like not so much
30:26 - that you need to go do this but just so
30:28 - that you can see what else is out there
30:30 - so what i'm going to do is go to the top
30:32 - here and type in cloud9
30:34 - and we'll go over here
30:36 - and we'll give it a moment here i am in
30:39 - the root account so usually it doesn't
30:40 - like you creating um environments here
30:42 - which is totally fine
30:44 - i have a couple old uh
30:46 - ones here that refuse to delete but i'll
30:47 - create a new environment we'll just say
30:49 - cloud nine get pod test
30:52 - kind of weird writing get pod in there
30:53 - but i just want to show you that you
30:54 - choose the instance size or type so you
30:56 - can choose t2 micro small large other
30:59 - instance type and you can go pretty big
31:01 - here so that might be the advantage that
31:03 - cloud9 gives you is that you can go like
31:04 - super super big if you need to
31:07 - um
31:08 - and you know this is not the only kind
31:10 - of environment that aws has so like they
31:12 - also have in sage maker um
31:14 - because you can think of it as a code
31:16 - editor right like you have sage maker
31:18 - studio which will run a jupiter lab but
31:20 - that's really for ml we're talking just
31:22 - about like general cloud development
31:23 - here so that's the thing is like if you
31:25 - really do need to do like
31:27 - um you know
31:29 - ml stuff you probably shouldn't be using
31:30 - a cloud developer environment you should
31:32 - be using something like sagemaker studio
31:34 - or whatever the integrated
31:37 - cloud services that are used by the
31:39 - cloud service providers but anyway i'm
31:41 - going to just choose a t3 micro notice
31:43 - we have amazon list two amazon likes the
31:44 - old one which is not recommended to use
31:46 - anymore ubuntu
31:48 - um and so those are our options i think
31:50 - at one point you could just attach
31:52 - whatever
31:53 - any kind of
31:55 - machine you want but then it wouldn't be
31:56 - managed when shut down automatically
31:58 - notice we have a 30 minute um
32:01 - turn off after 30 minutes but you can
32:03 - change it here to whatever you like
32:04 - we'll go ahead and hit next we'll create
32:07 - that environment and we're going to wait
32:08 - for that to spin up because i just want
32:09 - to show you what it looks like
32:12 - it's generally really fast but i'll see
32:13 - you back here in a moment okay all right
32:14 - so after waiting a little while here it
32:16 - has finally launched uh usually it
32:18 - doesn't look like this i think there's
32:19 - just a slight little problem with the um
32:22 - editor or display it usually looks
32:23 - really nice here but it's just telling
32:25 - you here how to get started with um
32:28 - cloud9 so this is based off of
32:32 - i want to say like adam but maybe not i
32:34 - think it may be oh sorry the ace editor
32:36 - so we'd like up ace editor
32:38 - i think that's what it's based off of
32:40 - yeah so it was called ace and then uh
32:43 - ace turned it into cloud9 uh ide it's
32:47 - not really an id it's a cloud editor um
32:49 - and then cloud9 was acquired by aws and
32:52 - so aws integrated with a lot of their
32:54 - services so when you go over to lambda
32:56 - you're using cloud9 but it's a lot
32:58 - simpler like they don't really have
33:00 - extensions per se so
33:02 - you can like explore aws resources
33:04 - through here they have some source
33:06 - control which um i believe is kind of
33:08 - new i remember seeing this here before
33:10 - but it's very dead simple there are no
33:13 - extensions
33:14 - uh you know so like whatever you want
33:16 - it's like uh test.ruby
33:18 - we'll open that up here and just type in
33:20 - like um
33:21 - [Music]
33:22 - puts hello get pod
33:26 - okay we'll save that down below ls and
33:29 - i'll just run it here ruby test.rb so
33:31 - it's really darn simple collaboration is
33:34 - kind of nice i really like it um get pod
33:36 - at least at the time of shooting this um
33:39 - their features are not as transparent as
33:41 - they need to be um but i know that
33:43 - they're working hard to make that better
33:45 - um but like here you can like invite
33:47 - people you can see them you can see
33:48 - where their cursor is so that's kind of
33:50 - nice
33:51 - they have a debugger
33:52 - which is fine and there are like
33:54 - serverless integrations but you know
33:56 - nothing super complicated um but yeah if
33:59 - you want to shut it down we could just
34:00 - close the tab or i'll just go back out
34:03 - we'll go back to the dashboard here
34:05 - and i'll just close up this tab and i'll
34:07 - go ahead and delete that environment
34:09 - so nothing super complicated that is
34:13 - cloud9 now over to gcp so we'll go over
34:16 - here and theirs is up here in the active
34:19 - act or cloud shell here so if you click
34:21 - it uh generally you have to activate
34:23 - cloud shell so what it's going to do is
34:25 - spin up i think a virtual machine
34:26 - underneath so we just have to wait uh a
34:29 - while here and once we're there oh that
34:31 - was fast
34:32 - that was super super fast some like if
34:34 - it's the first time you ever did it it's
34:35 - really slow but like
34:37 - because i think they're like making the
34:38 - back like the storage for you but uh
34:41 - it's super fast but if you click here in
34:43 - the uh open editor it's gonna look just
34:45 - like
34:46 - um vs code because it is vs code
34:50 - right so here it is
34:51 - i don't know if there's any kind of
34:53 - limitations in terms of the stuff that
34:54 - you can install i actually never looked
34:56 - at that for extensions
34:58 - can you install extensions that's a good
34:59 - question
35:01 - so we have uh cloud code
35:03 - apis
35:05 - uh secrets manager kubernetes cluster so
35:08 - i don't see the ability to install
35:09 - extensions
35:11 - so it might be just uh what you see is
35:13 - what you get here i'm going to go ahead
35:15 - and just create myself a new file here
35:17 - so just say test.rb
35:19 - okay so nothing super complicated you
35:21 - know you know what uh visual studio code
35:23 - is but uh that's that one there if you
35:25 - want to close it we just hit the x there
35:27 - all right and we'll take a look at uh
35:29 - github code spaces all right i'm back
35:31 - and so i just want to show you github
35:33 - code spaces or at least attempt to do it
35:35 - um and so the thing with github code
35:37 - spaces is that if you've ever tried to
35:39 - find it like under the buttons here and
35:40 - you don't see displayed the reason why
35:43 - is that it's part of i believe the
35:45 - team's plan so you know if you are just
35:47 - a regular user and you're looking to
35:49 - utilize it that's not possible now could
35:51 - you just go ahead and create an
35:52 - organization and then be able to do it i
35:54 - guess we could go find out so what i'll
35:56 - do here is go over
35:58 - uh to my settings and we'll look for
36:02 - organizations
36:03 - and i'm going to create a new
36:05 - organization and notice here we can see
36:07 - some options so in the free here
36:09 - unlimited public private repositories
36:11 - 2000 automation minutes a month 500
36:13 - megabytes issues and projects
36:16 - so i don't think that it's here
36:20 - um is it in here i'm just trying to see
36:23 - here so we have
36:25 - protected branches multiple reviewers
36:27 - code owners
36:30 - and that is the tricky part is just
36:32 - trying to find the functionality so what
36:35 - i'm going to do if we scroll down here
36:37 - we might be able to see it so code
36:38 - spaces
36:39 - ah okay so in the free tier it's not
36:41 - available and then the team plan that's
36:43 - where it's going to start at up to 32
36:45 - cores starting at uh 18 cents per hour
36:48 - i'm very certain that i have a paid
36:50 - teams plan somewhere so i just need to
36:53 - go find it okay
36:55 - so what i'll do is i'll come back here
36:57 - in a moment and see if i can find it but
36:58 - just understand that you got to be
37:00 - paying and then you can pay additional
37:02 - to use uh get uh hub code spaces so i'll
37:05 - be back here in a moment okay
37:07 - all right so i'm in uh my other account
37:10 - here where i definitely have a team's
37:11 - organization but i don't think it's paid
37:13 - it used to be paid i think we moved off
37:15 - of it because they made a free tier and
37:17 - so now we don't have code spaces so uh
37:20 - you know i think it's just gonna be a
37:21 - bit too hard for me to show this and all
37:23 - it would really show is that once you
37:24 - launch it that you
37:26 - have
37:27 - this kind of editor and that you can
37:29 - choose the different size there um but
37:31 - uh you know hopefully that gives you an
37:33 - idea of like the friction it it it
37:35 - causes to get started with um code
37:37 - spaces
37:38 - but you know if you really want to know
37:40 - more you can just read up on it here
37:42 - okay but yeah there you go
37:47 - [Music]
37:52 - hey this is andrew brown and we were
37:53 - talking about context-based developer
37:55 - workflows because this is something that
37:57 - you've probably already been doing but
37:59 - it's just cloud developer environments
38:00 - make it a lot easier to do so what is
38:03 - context in the scope of a developer
38:05 - workload well as a developer you need to
38:07 - quickly switch contacts based on the
38:09 - scope of the work you are currently
38:10 - performing and this could be things like
38:12 - reviewing pull requests
38:14 - developing features manually performing
38:16 - quality insurance so q a replicating a
38:18 - version of production
39:06 - hey this is andrew brown and we are
39:08 - taking a look at context-based developer
39:09 - workflows if you've never heard of it
39:12 - it's okay you've actually probably been
39:13 - using it this entire time
39:15 - but this became a lot more important
39:16 - once we started using modern
39:18 - architecture so let's talk about what is
39:19 - the context in the scope of a developer
39:22 - workload well as a developer you need to
39:24 - quickly switch context based on the
39:25 - scope of the work you are currently
39:27 - performing this could be something like
39:29 - reviewing a pull request deploy or
39:31 - developing features manually performing
39:33 - quality insurance of q a replicating a
39:36 - version of production for debugging
39:38 - creating a temporary environment to test
39:40 - the hypothesis so the idea is the
39:42 - context is what do you need to do review
39:44 - code develop feature q a all sorts of
39:47 - options there and those environments all
39:50 - need to be specialized for that context
39:52 - so developers have always been using
39:54 - context-based developer workflows though
39:56 - cloud developer environments cdes makes
39:59 - that much easier to do and specifically
40:01 - for microservice or modern architectures
40:04 - which have many more iso repositories
40:06 - this is a big struggle for a lot of
40:07 - people that are doing microservices is
40:09 - just managing all the repositories
40:11 - whether they have one big monolith or
40:13 - not but again cloud developer
40:15 - environments make it so much easier to
40:16 - jump into those projects so cloud
40:18 - developer environments become part of
40:20 - the workflow developers can quickly and
40:22 - safely switch contacts so i just kind of
40:25 - want to add an additional illustration
40:27 - about you know if you're using uh cloud
40:29 - developer environments first versus
40:31 - using local
40:32 - developer environments how that might
40:33 - change uh the responsibility or the
40:37 - accessibility
40:38 - of your code so
40:40 - here you know the old way we would do it
40:42 - is we would launch i'm going to get my
40:43 - pen tool out here we would launch a
40:44 - local developer environment we'd write
40:46 - our code and then we would create the
40:48 - repository locally and then push okay i
40:50 - know there's a spelling mistake there so
40:51 - just ignore that um but now you know
40:54 - with um cloud developer environments we
40:57 - create the empty repository first in
40:59 - github so it already is there then we
41:01 - launch our cloud developer environment
41:03 - and then we write code and from there we
41:05 - can actively commit our code and so the
41:08 - great thing about that is that when we
41:10 - take that approach like let's look at
41:11 - the old way if we were doing the old way
41:14 - some people will end up writing all this
41:15 - code and they just never push it to a
41:17 - repository remote repository they might
41:19 - have created a local repository but it's
41:21 - never made it online and so that means
41:23 - that there's a longer time before code
41:25 - can be collaborative or they have an
41:27 - opportunity where they might or an
41:28 - opportunity but there might be the
41:29 - misfortune that they lose that code and
41:32 - i can't tell you how many times that has
41:33 - happened or it's the weekend you want to
41:35 - pass that code off to somebody else but
41:37 - like oh it's on my machine i never
41:38 - pushed it
41:39 - but if you're using cloud developer
41:41 - environments
41:42 - it's already in a online repository that
41:44 - is the starting point and that is the
41:46 - kind of behavior change that you have
41:47 - when you use cloud developer
41:48 - environments so there's a higher chance
41:50 - of collaboration and less chance of loss
41:52 - of code and that just makes it again
41:55 - easier to do this context-based
41:56 - developer workflows and one context
41:59 - would be like starting a new project but
42:01 - there you go
42:02 - [Music]
42:06 - hey this is andrew brown and we are
42:08 - taking a look at visual studio code also
42:10 - known as vs code which is a free source
42:13 - code editor made by microsoft for
42:15 - windows linux and mac os if you're
42:17 - confused why it says source code editor
42:19 - that's just the language that microsoft
42:20 - uses but you can just say code editor
42:23 - and visual studio code should not be
42:25 - confused with visual studio which came
42:27 - before vs code and vs studio
42:32 - is an ide an integrated developer
42:34 - environment that's for doing more
42:35 - low-level stuff
42:37 - but anyway visual studio code has 14
42:40 - million developers out of 24 million
42:42 - developers worldwide who use vs code
42:45 - making it the most popular source code
42:47 - editor today and if you wanted to do the
42:49 - math on that that's 58 percent market
42:52 - share so at least half of all developers
42:55 - are using vs code and the reason we're
42:57 - talking about vs code is because that is
42:59 - the primary editor that you will see
43:02 - when you launch up a git pod workspace
43:04 - so vs code is very popular due to being
43:07 - free powerful works on all hardware lots
43:10 - of courses orgs schools use vs code
43:13 - because it's available for everybody so
43:15 - there you go
43:17 - [Music]
43:21 - hey this is andrew brown and we are
43:22 - looking at the concept of docker so
43:24 - docker is a set of platform as a service
43:26 - products that use os level
43:28 - virtualization to deliver software in
43:30 - packages called containers so the reason
43:32 - we're talking about uh docker is because
43:35 - that is what uh getpod is using to run
43:38 - their environments and you'll hear
43:40 - kubernetes as well
43:41 - but that's something that you don't
43:42 - necessarily have to touch
43:44 - but docker containers is something that
43:46 - you might
43:47 - encounter okay
43:49 - so docker was the earliest popularized
43:51 - open source container platform so when
43:52 - people think of containers they
43:54 - generally think of docker and we said
43:57 - it's platform as a service product so
43:58 - there's more
43:59 - than one thing just called docker so we
44:01 - have the docker cli so these are cli
44:03 - commands to download upload build run
44:05 - and debug containers we have a docker
44:07 - file so a configuration following how to
44:09 - provision a container docker compose
44:12 - this is a tool and configuration file
44:13 - when working with multiple containers
44:15 - and that's something you may encounter
44:17 - with some like quick start templates and
44:19 - things like that docker swarm an
44:21 - orchestration tool for managing deployed
44:23 - multi-container architectures that is
44:25 - not something that you have to worry
44:26 - about um then you have docker hub a
44:28 - public online repository for containers
44:31 - published by the community for download
44:32 - so this is going to be a place where you
44:34 - source containers and we definitely
44:36 - source things from docker hub using git
44:38 - pod and then there's the concept of oci
44:40 - the open container initiative because i
44:43 - saw this term and it just pops up
44:44 - everywhere you're wondering like what is
44:46 - oci compliant what does that mean so
44:49 - open container initiative is an open
44:50 - governance structure for creating open
44:52 - industry standards around container
44:54 - formats and runtime so docker
44:56 - established the oci and it is now
44:58 - maintained by the linux foundation and
45:00 - so docker has been losing favor with
45:02 - developers due to the handling of
45:03 - introducing a paid open source model and
45:05 - alternatives like podman are growing but
45:07 - that doesn't mean don't use docker that
45:09 - just means like at scale you know some
45:11 - companies like larger companies are
45:14 - looking at alternatives but these
45:16 - alternatives are oci compliant right
45:18 - like pod men and things like that but i
45:20 - just wanted to point that out because
45:22 - you know docker can be a bit contentious
45:24 - in the open source space but it still is
45:26 - really good and solid and that is what
45:28 - git pod is using okay
45:33 - [Music]
45:34 - hey this is andrew brown and we are
45:36 - taking a look at version control systems
45:38 - also known as vcs so these systems are
45:40 - designed to track changes or revisions
45:42 - to your code and the most popular vcs is
45:46 - git so vcs can also refer to manage
45:48 - cloud services that host vcs so this is
45:51 - why this term is a bit confusing because
45:53 - really it means git but a lot of times
45:54 - we are talking about git providers and
45:57 - so get pod integrates with the following
45:59 - git providers the first is github so
46:01 - this is owned by microsoft it's the most
46:03 - popular vcs offering due to its ease of
46:05 - use and being around the longest github
46:07 - is primarily where open source projects
46:09 - are hosted and offer rich
46:10 - functionalities such as issue tracking
46:12 - automation pipelines and a host of other
46:14 - features before github everybody would
46:17 - put their stuff on sourceforge um but
46:19 - sourceforge was very slow i think it was
46:21 - svn based and it had a lot of ads and so
46:24 - when github came out it was extremely
46:25 - popular because you could put repos
46:27 - there for free and had really strong
46:29 - collaboration tools then came along git
46:31 - lab so this was an emerging competitor
46:33 - to github and at the time had unique
46:35 - features such as ci cd pipeline improved
46:37 - security measures i still think it's
46:39 - easier to get a lot of things set up in
46:41 - gitlab it takes care of that stuff for
46:43 - you
46:43 - but github has caught up with a lot of
46:45 - stuff like github actions and and things
46:47 - like that so they're pretty much on par
46:49 - now then there's also bitbucket this is
46:51 - owned by elazian and it was originally
46:54 - only used for mercurial so mercurial was
46:56 - a competitor to get but git became so
46:59 - popular that bitbucket added git and
47:00 - then mercurial became so uh unpopular
47:03 - not that it's bad but just wasn't as
47:06 - popular as get that they stopped
47:08 - supporting mercurial so
47:10 - bitbucket has tight integration with
47:12 - atlatian's industry standard agile
47:14 - project management software called jira
47:16 - and so if you ever end up working for a
47:18 - large organization they're very likely
47:20 - to be using jira and because they're
47:22 - using jira they're very likely to be
47:24 - using bitbucket because there's tight
47:26 - integrations between it it's just so
47:27 - much easier so those are um you know the
47:30 - git providers
47:32 - [Music]
47:36 - hey this is andrew brown and we are
47:38 - taking a look at version control system
47:40 - permissions and to understand that we
47:42 - need to know what oauth 2.0 is so walk
47:45 - 2.0 is an industry standard protocol for
47:47 - authorization and the idea here is oauth
47:50 - doesn't share password data but instead
47:52 - uses authorization tokens to prove an
47:54 - identity between consumers and service
47:57 - providers so oauth is about granting
48:00 - access to functionality as opposed to
48:02 - something like open id which is about
48:04 - providing who you are but the only thing
48:06 - i really want you to know is that it
48:08 - uses oauth and that's where these fine
48:10 - grain permissions are going to get set
48:12 - and that's how it works for uh get pod
48:14 - because you connect your uh your your
48:16 - version control system and then you you
48:19 - as the user are going to decide uh what
48:21 - you want to set there so within your get
48:24 - providers you can see they're connected
48:25 - so there is my username there are my
48:27 - permissions and if you expand it you'll
48:29 - see all the options there and it's going
48:31 - to vary based on the provider so the
48:33 - idea here is that for github we have
48:35 - user email read user public repo repo
48:38 - read org and workflow um so just
48:41 - understand that that's going to be
48:43 - slightly different for all the providers
48:44 - and the key thing to remember is the
48:47 - fact that get pod is not responsible for
48:50 - these permissions it's on the get
48:52 - provider and the user okay
48:55 - [Music]
48:59 - hey this is andrew brown and we are
49:00 - taking a look at the git pod editor
49:02 - support so get pod is designed to be a
49:04 - provider agnostic cloud developer
49:06 - environment and one way we see that is
49:08 - the fact that it supports integrations
49:10 - for a bunch of different git providers
49:13 - but another way that it's agnostic is by
49:15 - having support for more than one editor
49:17 - and so gitpod currently supports three
49:19 - types of editors so we have vs code
49:21 - browser so a editor within the browser
49:24 - and this is the default experience
49:26 - desktop vs code so opening a workspace
49:29 - in local vs code so a desktop
49:31 - application and jetbrain so a paid ide
49:34 - that extends
49:35 - the eclipse ide so if you ever use
49:38 - eclipse you kind of have an idea what
49:40 - jetbrains is there so what we'll do is
49:42 - investigate all these three types here
49:44 - but the key thing to remember is that
49:45 - kit pod supports uh multiple types of
49:47 - editors and i think they'll just keep on
49:49 - expanding that because that is their
49:50 - goal okay
49:51 - [Music]
49:56 - hey this is andrew brown and we are
49:57 - taking a look at jetbrains and before we
49:59 - can talk about that we need to know what
50:01 - is eclipse so eclipse is a free and open
50:03 - source id created by ibm originally
50:05 - intended for java through open source
50:07 - projects have expanded to a variety of
50:09 - languages so i think ibm authored it and
50:12 - it's been managed by an open source
50:14 - group now i remember using jetbrains
50:16 - back in like 2001 specifically for java
50:19 - so it's very interesting to see that
50:21 - it's been around for so long and it's
50:23 - still super powerful but then there came
50:25 - along jetbrains and jetbrains is a
50:26 - company specializing in creating paid id
50:29 - so it's proprietary or an extension of
50:32 - eclipse and so they just make the uh the
50:34 - eclipse experience way way way better so
50:37 - they use the same code base at least at
50:39 - one point they did but they have grant
50:42 - greatly expanded that feature set around
50:43 - specific programming languages just
50:45 - brains is easier
50:47 - more productive more convenient to use
50:48 - in eclipse just brains was formerly
50:50 - known as intellij
50:52 - and if intellij sounds familiar it's
50:54 - because it kind of sounds like
50:55 - intellisense which is this whole kind of
50:57 - auto completion thing so
51:00 - notice here as they're typing and
51:01 - there's this auto completion thing that
51:02 - was something i think that was invented
51:04 - by microsoft originally or at least they
51:06 - branded the idea of intellisense but
51:08 - this was a a big selling point where
51:10 - you'd be able to type and it would auto
51:12 - complete you could click through stuff
51:14 - now we're seeing that kind of everywhere
51:15 - like code editors have support for that
51:16 - through uh extensions but one at one
51:19 - point that was a big deal okay so
51:21 - jetbrains has a variety of ids
51:23 - specialized for different languages or
51:24 - frameworks so let's just go through the
51:26 - list we have phpstorm uh which is for
51:28 - php golang for uh go land for go the go
51:32 - language uh intellij idea or idea which
51:36 - is for java data grip which is for sql
51:38 - or databases in general pi chart for
51:41 - python ruby mine for ruby web storm for
51:43 - javascript c line for c and c plus plus
51:46 - writer for net and this isn't the full
51:48 - list i know they have something for
51:51 - developing ios applications and
51:54 - something for data science other things
51:55 - like that
51:56 - but the reason i'm listing these ones
51:58 - out for you is because these are all uh
52:01 - in the scope of what
52:03 - gitpod is trying to have support for now
52:06 - what's interesting is a thing called
52:07 - jetbrains projector and this is a tool
52:09 - that allows you to run jetbrains id
52:11 - within a browser i don't particularly
52:13 - know if getpod is using that and that's
52:15 - how you integrate with it because i just
52:18 - haven't uh given jetbrains with vs code
52:20 - a go
52:22 - but i just want to say gitpod allows you
52:23 - to integrate with jetbrains to use it as
52:25 - your gitpod workspace editor there's an
52:27 - asterisk there because at the time of
52:29 - right now it's in beta and some of these
52:32 - are coming soon so these are all on the
52:34 - roadmap and so i just want you to be
52:36 - knowing about this because probably in
52:38 - the future these will be available to
52:40 - you okay
52:41 - [Music]
52:45 - hey this is andrew brown and i was
52:46 - saying that there is uh support for get
52:49 - pod to use your desktop version of vs
52:52 - code so you can open git pod workspace
52:54 - in your local vs code if you open up
52:56 - either file or go to the get pod
52:59 - command palette you should see an option
53:00 - that says open a vs code there's also
53:02 - this option says open in vs code
53:04 - insiders and insiders is just the vs
53:07 - code unstable release version so it's
53:09 - like the latest version but you might
53:11 - not want to be using it unless you're
53:13 - like they'd like to have the latest
53:14 - features but you don't mind if there's
53:16 - bugs or things like that so some vs code
53:18 - extensions do not work in the browser so
53:20 - opening in local vs code may give you a
53:23 - better developer experience um and you
53:25 - know you know some people prefer desktop
53:27 - apps so that could be a reason there but
53:29 - i ran into an edge case with my
53:32 - co-founder where uh they use ubuntu and
53:35 - they could not use the vs code vim
53:37 - extension the browsers uh
53:39 - specifically on their linux laptop right
53:42 - so in this case they had to launch in
53:45 - local vs code and then they were able to
53:47 - use it so it was interesting to see that
53:48 - edge case but it seems like you know a
53:51 - lot of support on mac or windows so
53:53 - there that could just happen okay and
53:56 - also when i was using this on my windows
53:59 - machine where i'm using windows
54:00 - subsystem linux
54:02 - it actually prompted me to install a
54:04 - bunch of things like
54:06 - docker and kubernetes and things like
54:08 - that whereas on my mac it didn't ask for
54:10 - any of these things so it's possible
54:11 - that you have to have docker and salt
54:12 - which would make sense because um it is
54:15 - running containers so there would have
54:17 - to be some way for it to do it uh and
54:19 - one thing i noticed is that you cannot
54:20 - open a shared running workspace that has
54:22 - been shared with you so only the owner
54:24 - can open that workspace locally
54:27 - so that's just a thing there and i think
54:29 - i repeated a couple times in the course
54:30 - okay
54:31 - [Music]
54:35 - hey this is andrew brown and we are
54:37 - taking a look at the get pod browser
54:39 - extension and this provides a
54:40 - convenience button within the version
54:42 - control hosting provider and this button
54:45 - prepends the gitpod url prefix to the
54:48 - current url and this getpod browser
54:51 - extension is available for firefox
54:53 - chrome microsoft edge and brave and so
54:56 - it's important that you remember that
54:57 - because i will ask you on the exam which
54:59 - browsers it's for so just to kind of
55:01 - show you what that convenience button
55:02 - looks like in the different providers
55:04 - here is github and there is the button
55:06 - here is bitbucket and there is the
55:07 - button here is gitlab and there is the
55:09 - button so nothing super complicated here
55:12 - but it's a lot easier than having to
55:13 - remember to type in the gitpod url so
55:16 - it'll definitely save you some time okay
55:21 - [Music]
55:22 - hey this is andrew brown and we're
55:24 - taking a look at get pod browser
55:26 - bookmarklet so what is a browser
55:27 - bookmarklet well it is a browser
55:29 - bookmark but instead of pointing to a
55:31 - url it executes arbitrary javascript
55:33 - code and so the idea is that transform
55:35 - is a bookmark into kind of a smart
55:38 - bookmark so you'd have this javascript
55:40 - code which we'd get from the gitpod
55:41 - website you'd place it in the url
55:44 - box when you make your bookmark and then
55:45 - when you click that button it would work
55:47 - just like pressing that get pod button
55:49 - assuming you were on a particular page
55:52 - like a git lab or github page so the get
55:55 - pod browser bookmarklet when clicked
55:57 - will open in the current github gitlab
56:00 - bitbucket just what i just said there a
56:02 - moment ago and the reason for it is that
56:04 - it acts as an alternative to the browser
56:06 - extension for when the browser extension
56:08 - is not present for specific web browsers
56:10 - so i didn't test it but i assume that
56:12 - it's not for safari because safari is
56:14 - not a chromium-based browser probably
56:17 - opera as well would be in that category
56:20 - there could be cases where you have
56:21 - computer workstations that does not uh
56:24 - allow the installation of browser
56:25 - extensions because you know some
56:27 - organizations they have a bunch of
56:28 - computers and every time you shut them
56:31 - down they always boot up a fresh image
56:33 - so you lose your extensions or they just
56:36 - they don't allow you to install
56:37 - extensions uh as a as a security measure
56:40 - so that you know people are installing
56:42 - malware in their browser or it could be
56:44 - that developers are extending the launch
56:46 - behavior for more intelligent action so
56:47 - you could probably take that javascript
56:49 - code and add some extra stuff in there
56:51 - maybe you want to um put in some
56:53 - environment variables and so that gives
56:55 - you a bit more flexibility over the get
56:57 - pod button but there you go
56:59 - hey this is andrew brown and what we're
57:01 - going to do here is look at git lab
57:02 - integration so what i'm going to do is
57:04 - create myself a new git lab account so
57:07 - in the top right corner we save get free
57:09 - trial i kind of swore these to have a
57:10 - free account here so i'm going to do is
57:11 - double check here and yes they do have
57:14 - one so i'm going to say free
57:15 - and here we have two options where we
57:17 - have gitlab sas or get lab self managed
57:19 - so sas is the one we want that's going
57:21 - to be just like when you utilize github
57:23 - so we'll go here and click sign up for
57:25 - free and i'm just going to fill in my
57:27 - name so we got andrew
57:29 - brown and we'll just say
57:30 - exam pro co
57:33 - andrew exam pro co and then we need a
57:35 - password so i'm going to generate out a
57:38 - password
57:39 - here paste that in
57:41 - and before we proceed here i'm just
57:42 - going to save this in my password
57:44 - manager to save myself some trouble
57:47 - so just give me a second here so
57:49 - gitlab.com
57:50 - exam pro co
57:52 - i'm going to put that password in there
57:55 - okay and hopefully it will take it i am
57:57 - definitely not a robot at least i don't
57:59 - think i am you notice there's a bunch of
58:01 - options down here but i'm going to just
58:02 - keep it simple by using email we're
58:04 - going to go ahead and hit register so
58:06 - now it wants me to confirm my email so
58:09 - i'm just going to open a new tab off
58:11 - screen here i'm going to make my way
58:13 - over to my email
58:15 - i'm going to try to do this as quick as
58:16 - i can here
58:18 - and so i have a confirmation email here
58:21 - from git lab
58:23 - okay so here it is and i'm going to go
58:25 - ahead and get uh click confirm your
58:27 - account and so here it is confirming my
58:29 - account
58:30 - and we will just expand that here and so
58:32 - here says your email address has been
58:34 - successfully confirmed please sign in
58:36 - and so what i'll do is grab my password
58:39 - here so i'm going to copy my password in
58:40 - here paste it on in sign in
58:43 - and it's going to ask me some
58:44 - information i'm just going to say
58:46 - continue
58:47 - cool you'll be using this for the time
58:49 - being it'll just be me okay because it
58:51 - looks like i guess there's some few
58:52 - different options here
58:54 - um i don't need to opt anything uh would
58:55 - you like to create a project join a
58:57 - project we'll just say create new
58:58 - project
59:00 - and i guess we need an organization name
59:03 - so this is really just for
59:07 - git pods i'm just going to say exam pro
59:10 - exam pro co
59:13 - and we're going to write git pod because
59:14 - i'm going to be doing a bunch of repos
59:16 - here and i figured we could do that the
59:17 - group
59:18 - and any public projects can be viewed
59:20 - without any authentication so we'll say
59:22 - create group because we'll make it
59:23 - public facing
59:24 - and so now we have an opportunity to
59:26 - create a project this is quite the
59:28 - lengthy setup but i'm going to make this
59:29 - public here and what we're going to say
59:31 - here is
59:33 - get pod hello world
59:36 - as an example here
59:38 - and i'm going to go ahead and create
59:40 - this
59:45 - and we'll just give it a moment to set
59:46 - up okay
59:48 - and so it's all set up so we'll say okay
59:50 - let's go
59:54 - and so now that is there the next thing
59:56 - i want to do here is connect uh to get
59:59 - pod so what i'm looking for here
60:02 - um is a button for the github project i
60:06 - mean i guess this is the project here so
60:07 - this is not necessarily repos
60:10 - so
60:11 - just give me a moment here and i'll
60:12 - think about what i need to do okay all
60:14 - right so i'm back and i was just kind of
60:16 - looking around at what there is to do
60:18 - here so what i want to go do is create a
60:20 - new repository
60:22 - and so we'll click that there
60:25 - and then from here
60:26 - we have an option over here repositories
60:28 - on the left hand side so
60:31 - um
60:32 - let's go over here and click on
60:33 - repository
60:35 - and so now i'm over here and you can see
60:37 - there's initial commit
60:39 - by a fellow here
60:41 - i assume he works at git pod
60:43 - so senior product uh a designer for
60:45 - growth at gitlab um there and so here we
60:48 - can see that repository it's been
60:49 - unusual that it's like a commit on the
60:52 - behalf of somebody else but that's
60:53 - totally fine but the great thing is we
60:55 - have our get pod button you will not
60:56 - have this unless you have that stuff
60:58 - installed i also noticed like web ide
61:00 - here never looked at that so i'm just
61:02 - kind of curious what's going to open up
61:04 - here
61:05 - i'm just curious because it's like you
61:06 - know there's git pods so i was wondering
61:08 - if git lab had their own offering
61:11 - so i can go here and it's pretty
61:13 - simplistic so it's not really like a
61:15 - full
61:16 - full-blown developer environment i was
61:18 - just really curious but what we'll do is
61:20 - go back over to our hello world project
61:22 - i'm just going to go back here because
61:24 - maybe there was two here
61:25 - so let me click into gitlab is that the
61:27 - one we were looking at yeah so that was
61:29 - the one that we saw here
61:31 - and then here is the public one that i
61:33 - made it's a little bit confusing again i
61:35 - don't use git lab on a day-to-day basis
61:37 - so i'm just kind of learning uh just
61:39 - like you are here but i guess if we
61:40 - click the
61:42 - icon at the top we can start seeing the
61:43 - projects more clearly and so this is the
61:45 - one that i created that i care about
61:46 - this is new i don't know what this uh
61:48 - this is i guess this is created by
61:49 - default for you
61:51 - and so we'll go over to
61:54 - uh repository
61:56 - it's not really showing me a lot of
61:57 - information because usually like github
61:59 - will set something up for you so what
62:00 - i'm going to do is just add a new file
62:02 - so let's just say add a readme file
62:06 - okay and we'll just say hello world
62:09 - we'll go ahead and commit that
62:12 - and we'll just say commit
62:14 - and so now what i'm hoping is if we go
62:16 - back to
62:18 - our project here we'll get something
62:19 - that looks a little bit more normal
62:21 - okay yeah and so there we go so just we
62:23 - had to get that initial file on there
62:24 - and so now we have that opportunity to
62:27 - uh use git pod of course you'll need the
62:28 - browser extension for that installed if
62:30 - you don't we're going to just do it the
62:32 - old-fashioned way so i'm going to go up
62:33 - here in the top type in http colon slash
62:36 - get pod uh dot io forward slash pound
62:41 - okay and that will open up that
62:42 - environment for us
62:44 - notice that i don't have a get pod
62:46 - account here as of yet so what i'm going
62:49 - to do here is say continue with gitlab
62:52 - just because that's what we're using
62:53 - right now and here it's going to allow
62:56 - us to authorize so we're going to say
62:57 - authorize
63:01 - and we'll just give it a moment to check
63:02 - out that repository but essentially when
63:04 - we did that when we authorized that that
63:06 - should have created a new account for us
63:09 - and so here is um our project here which
63:13 - is all great
63:14 - and so essentially what you'd want to do
63:16 - is um kind of set up your environment so
63:18 - i really don't like the look of this
63:19 - it's kind of hard on my eyes so i'm
63:20 - going to go down to the bottom left
63:21 - corner we're going to go to color theme
63:24 - and i'm going to just switch to
63:25 - something that is dark so we'll say
63:28 - um
63:29 - actually i like monokai quite a bit so
63:31 - i'm going to go to that um like in terms
63:33 - of the editor or the coloring there and
63:35 - so we have this open
63:37 - um and if we just want to kind of set up
63:40 - a new file here i'm just going to go get
63:41 - pod
63:43 - yaml
63:44 - okay
63:46 - and we'll just set up something
63:48 - initially so we have tasks
63:52 - and i'm assuming that's how we do it
63:53 - just trying to do for memory so we have
63:55 - name we're going to say hello world
63:58 - okay and then from there we'll just hit
64:00 - space base
64:01 - and it's the command that we want and
64:03 - i'm just going to say echo
64:05 - actually we don't have to put double
64:06 - quotations there we'll say echo
64:08 - hello world and i don't think we need
64:10 - exclamations
64:12 - exclamations here i'm having a bit of
64:14 - trouble because i keep on thinking this
64:15 - is a vim keyboard so one thing i want to
64:17 - go do is go install
64:19 - um the vim
64:21 - the vim hotkey here so we'll go vim
64:24 - uh vimvs code
64:27 - it's this one that i want to install so
64:28 - we'll say install here
64:31 - okay and we'll go back and so now that
64:33 - works as normal as i would expect it to
64:36 - and so i believe that this is uh correct
64:38 - with the exception that we just should
64:39 - have a colon here and what i want to do
64:42 - is just go ahead
64:43 - and commit this so we'll go back here
64:45 - and i'll just say uh hello world
64:48 - commit
64:49 - okay
64:50 - and we will add that file and we will
64:53 - hit commit
64:54 - we'll sync those changes we'll say ok
64:57 - and so now if we go back to our original
64:59 - tab here and we just give this a refresh
65:02 - we should now see in our repository
65:05 - this new commit but what i want to find
65:07 - out is will this change uh take effect
65:10 - so
65:10 - you know we can just close this tab i
65:12 - just want to show you like if you have
65:14 - uh get pod gamble open and you're always
65:16 - trying to figure out how to make your
65:17 - way back
65:18 - um and by the way i might just bump up
65:20 - the font here i don't know if this is
65:21 - going to work let's just see if i can do
65:22 - that
65:24 - um here
65:26 - it's not really bumping so sorry
65:27 - everything's going to be really small
65:28 - what we can do is go down to the command
65:30 - palette here and if we want to get back
65:32 - to this repository quickly we can just
65:34 - go to open context and that's always
65:36 - going to bring us back here to the
65:38 - project or repository in git lab
65:41 - but what i'm really interested in is
65:42 - actually going over to getpodio because
65:44 - whether or not you notice you actually
65:46 - created an account so if we were to go
65:48 - over to the dashboard so it opens opens
65:51 - and up us up to the getpod.io
65:54 - and so now you can see we have a new
65:56 - account if i go over here and we go to
65:58 - settings
65:59 - you can see that for integrations i have
66:02 - git lab and this is where our
66:03 - permissions live so we go here
66:05 - and
66:06 - if we want to change these we can go
66:07 - ahead and just change those things but
66:09 - the goal is we're going to hook up
66:10 - github and bitbocket just so that we can
66:13 - see what they all look like
66:15 - but just to kind of complete what we're
66:16 - doing with this project here what i'm
66:18 - going to do is i'm just going to go
66:20 - ahead just close this tab here and close
66:21 - that out and i'm going to go back here
66:24 - and i'm just going to go and type this
66:25 - in again
66:27 - okay so let's say https colon four slash
66:30 - support slash getpod.io
66:35 - pound
66:37 - and from there it says invalid git pod
66:39 - yaml should be an object so
66:42 - clearly i've made a mistake so we'll say
66:43 - continue with the default configuration
66:45 - actually that's the first time i've made
66:47 - a mistake with a github configuration
66:49 - file and i think it's just because i
66:50 - created from scratch normally i go out
66:52 - and i find a reference but that's not
66:53 - what i did here so if this is a problem
66:56 - what i'm going to do is just cut that
66:57 - out and we're going to open up a new
66:59 - terminal and i'm just going to delete
67:01 - this file here
67:02 - okay
67:03 - and instead we're going to just do
67:05 - gp init to initialize a new file so i'm
67:08 - not exactly sure what i did wrong there
67:10 - i'm just going to paste that back in
67:12 - because it looks correct to me
67:17 - oh it's because i did that okay
67:19 - so that's what i really wanted to do but
67:21 - i'm just going to go ahead and do that
67:23 - we'll get rid of these ports
67:26 - and we'll just say okay let's
67:28 - fix this get pod
67:32 - yaml file okay
67:34 - we'll sync those changes we'll say okay
67:39 - all right and so from there what we can
67:41 - do is go back to our project so i click
67:44 - back on the git pod yaml down below open
67:46 - in the dashboard
67:48 - oops uh you know what i want to go to
67:50 - open in the context here
67:53 - and then we'll close our old tab and
67:56 - again we're just going to go and type it
67:58 - in here i will start using the get pod
68:00 - button here but i just kind of want to
68:02 - keep doing this so you kind of see what
68:04 - it is that we're typing so that you know
68:06 - it just becomes kind of muscle memory
68:08 - for you okay
68:12 - so what i'm expecting this time is for
68:14 - our command to work and if that's great
68:16 - what we'll do is proceed onto github and
68:18 - bitbucket and get that all connected
68:20 - into a single account
68:27 - okay so it's just loading up here
68:29 - and our echo works so this is all in
68:32 - good shape okay so
68:34 - uh this is good so i'm just gonna go
68:36 - back to our context i'm just going to
68:38 - close back out the old one and so that's
68:40 - pretty much it that we need to know for
68:42 - git lab again it's not super complicated
68:44 - but let's take a look at how we do it
68:46 - for github and bitbucketnext okay
68:51 - [Music]
68:57 - hey this is andrew brown and we are on
68:58 - bitbucket so we'll go ahead and create
69:00 - ourselves a new account here because
69:02 - it's good to learn all three providers
69:04 - because there's a high chance that
69:05 - you'll end up using one of each at some
69:07 - point so here it's suggested we want to
69:09 - add jira i'm good i'm just going to hit
69:11 - next and i probably already have a
69:14 - bitbucket account because i have jira
69:16 - not necessarily a separate bitbucket
69:17 - account here but we'll see what happens
69:19 - if we try to sign up so it says i
69:21 - already have an account which is totally
69:22 - fine i'm going to log in here it's not
69:24 - like a lot that you're missing here in
69:25 - terms of the setup process
69:28 - you know all these things are the same
69:29 - right you sign up they send a
69:30 - confirmation email here it's going to
69:32 - ask me for
69:33 - a
69:34 - a username so i'm going to say exam pro
69:36 - co
69:37 - and we'll see if it takes that and it
69:39 - does so we're all good here and we're
69:41 - going to come in here and see what we
69:42 - have so before you drop in a bit bucket
69:44 - tell us some stuff i want to skip this i
69:46 - don't care about any of that kind of
69:47 - stuff
69:49 - and let's see if i have any repositories
69:50 - in here
69:51 - and i have one for delithium.js as a to
69:53 - do again that's coming from
69:55 - jira
69:56 - but we don't actually have any
69:58 - repositories so let's go ahead and set
70:00 - up a new one here
70:02 - and so
70:03 - what we'll do is create a new project so
70:06 - the project name is going to be called
70:10 - getpodhello world
70:12 - and
70:14 - oh this again this maybe exam pro co
70:17 - get pod and then the repository will be
70:19 - uh get pod hello world
70:22 - and we can make it public or private it
70:24 - doesn't matter i'm gonna leave this one
70:25 - private in this case
70:27 - do we want to read me sounds great what
70:28 - do you want the main branch to be called
70:30 - we'll call it main include a git ignore
70:33 - file sure why not and we'll go ahead and
70:35 - create this repository
70:41 - so we are here and notice in the top
70:42 - right corner there is our get pod button
70:45 - and again i'm not going to click it for
70:46 - the time being i just want to keep doing
70:48 - this at the top here so that again it
70:49 - becomes muscle memory for you to know uh
70:52 - what to type just so it's uh there but
70:55 - uh what we can do is go to the top here
70:57 - and type in https colon forward slash
70:59 - forward slash get pod dot io
71:02 - forward slash pound and hit enter
71:05 - it says authorize with bitbucket.org so
71:08 - it already knows that we're logged in
71:09 - with our github
71:10 - account this is something to be careful
71:12 - with because you want to make sure
71:13 - they're all connected to the same
71:14 - account
71:15 - or you'll end up with multiple accounts
71:16 - which might be annoying so i'm going to
71:18 - say authorize with bitbucket.org here
71:20 - it's going to ask me a bunch of options
71:22 - i'm fine with all this we're going to
71:23 - say grant access
71:25 - okay
71:26 - and we'll give it a moment to start this
71:28 - environment so you can see that public
71:30 - repos private repos the process is very
71:32 - similar sometimes you just have to grant
71:34 - access to be able to do things
71:39 - and we'll just wait here for this
71:40 - environment to set up
71:44 - there we go and so here it is same
71:47 - experience everything's the same and i
71:49 - think i learned my lesson from last time
71:51 - and so when i opened up this terminal
71:53 - i'm just going to
71:55 - create a git pod file there and while
71:56 - i'm here what i'm going to do is i'm
71:58 - just going to bump up my font because it
71:59 - might be a little bit hard for you to
72:01 - see
72:01 - and so i'm just going to bump this up to
72:03 - like 22
72:05 - okay while i'm here i'm going to change
72:06 - this to 2. okay
72:10 - and what we'll do is just go ahead and
72:11 - close that and so now i'll type in get
72:14 - gp init
72:16 - all right and so we'll get that down
72:18 - here this is still really small that's
72:20 - kind of bothering me so i'm going to go
72:21 - down below
72:22 - go to settings
72:24 - and
72:26 - i'm looking for terminal editor font
72:29 - size we have text editor
72:32 - font size
72:38 - terminal maybe
72:41 - there we go
72:43 - that's a lot better okay and so
72:45 - uh from here we can just do the same
72:48 - thing so i'll go ahead and delete this
72:49 - out
72:50 - we'll change this over to
72:52 - hello
72:55 - world and then down below this will be
72:57 - hello world here as well
73:03 - and as per usual go to the left-hand
73:05 - side here and i'm going to just go ahead
73:06 - and add that file and say uh add
73:10 - a knit
73:11 - uh git pod file
73:14 - and we will commit that to our repos
73:16 - repo save the changes
73:18 - and as it's going we'll go down below
73:20 - again clicking on this get pod button
73:22 - here and we'll open the context to see
73:25 - uh that commit there and so there it is
73:28 - there
73:29 - and again there's really no easy way to
73:30 - like like to completely terminate a
73:33 - workspace and reopen it you can stop a
73:36 - workspace so down below we have the
73:37 - command palette here but also in the top
73:39 - left corner you can go here and we have
73:41 - similar commands i'm probably going to
73:42 - keep going up here now because this is a
73:44 - lot shorter but if you stop it that's
73:46 - not sufficient enough because we want to
73:47 - terminate and start a new one in order
73:49 - to iterate on this gitpod yaml file so
73:51 - what i'll do is i'll go ahead and close
73:53 - this tab out and i'm going to go to the
73:55 - top here again type it in so it's
73:58 - http colon s
74:00 - colon colon get pod dot io colon colon
74:03 - forward slash forward slash what am i
74:05 - talking about and we'll hit enter here
74:08 - and so you know again it should just
74:09 - work as per usual so we'll just give it
74:12 - a moment there to spin up and just make
74:14 - sure that is working correctly
74:19 - and there it is so there you go that's
74:20 - working fine oh it says command not
74:22 - found so clearly i've made a mistake if
74:25 - i go back here um i think it's because
74:27 - i'm using single quotes instead of
74:29 - double quotes
74:31 - okay but that doesn't really matter per
74:33 - se but i'll go ahead and fix that so
74:35 - change quotes
74:37 - from single to double okay
74:40 - but what i want to do is go ahead and
74:43 - check um the dashboard here so we'll go
74:45 - there
74:46 - and from here i'm going to go to my
74:48 - settings
74:49 - and we'll take a look here again at
74:51 - integrations
74:52 - and we'll just see like
74:55 - there are clearly different um settings
74:57 - or permissions
74:59 - uh per one here okay so just understand
75:01 - that it's not one to one across them
75:03 - it's going to be really dependent on the
75:04 - get provider
75:06 - so yeah i guess that's
75:07 - two out of three and so the next video
75:09 - we'll go look at github okay
75:11 - [Music]
75:15 - all right so now we're on the github
75:17 - website to sign up for our last get
75:19 - provider that is currently supported uh
75:22 - with gitpod and so in the top right
75:23 - corner i'm going to go to sign in
75:25 - because i already have an account and i
75:27 - do have one with the android exam pro
75:30 - co but interestingly enough i never use
75:33 - this account because i have an older one
75:35 - but that is totally fine so what i'm
75:37 - going to do is just go ahead and grab
75:38 - the password for this
75:40 - and we're just going to go paste that in
75:41 - there
75:42 - whoops we'll try that one more time here
75:49 - okay i must have grabbed the wrong
75:51 - password that's totally fine we'll sign
75:53 - in
75:54 - oh it's not giving me anything today
75:56 - we'll try this one more time
76:03 - there we go okay so it was a bit tricky
76:06 - but i'm in there and you can see i
76:07 - already have a follower even though i
76:09 - don't know why they're following me but
76:11 - that's totally cool and apparently i
76:13 - have a very simple example over here
76:16 - python docs hello world so not a lot
76:18 - going on in this account which is
76:20 - totally fine so what i want to do is
76:22 - create myself a new repository and by
76:24 - the way if you're creating an account
76:25 - for the first time it'll probably ask
76:26 - you a bunch of extra things to ask you
76:28 - know so
76:30 - you know whatever whatever is going to
76:31 - be there that's fine and i guess my
76:33 - username is exam pro hyphen dev so
76:35 - that's probably what i called it when i
76:36 - first created this account and so we're
76:38 - just going to say git pod
76:40 - um
76:40 - hello
76:42 - world
76:44 - as per usual let's make this one private
76:47 - and we'll go ahead and add a git number
76:49 - file
76:50 - and we'll say readme file down below
76:53 - and
76:53 - it's private so i shouldn't have to
76:55 - choose a license but we can go here and
76:58 - just choose none
77:00 - oh it really wants me to choose one here
77:04 - oh for ignore okay so like ruby
77:08 - ah we'll just ignore it we don't need
77:09 - one that's fine
77:11 - we're not doing anything serious here
77:13 - and so now that we have it open again i
77:15 - know that button's there but we'll come
77:16 - to it soon enough so i'm just going to
77:18 - type in https forward slash forward
77:20 - slash get pod
77:22 - io forward slash pound enter
77:26 - and here it says something went wrong
77:28 - and it just means that you have yet to
77:29 - connect that account so we'll go ahead
77:31 - and say authorize probably not the best
77:33 - wording but that's just what it is and
77:35 - you'll notice that github has like the
77:37 - most robust um permissions out of all
77:39 - the three you can drop down here and
77:41 - have a lot of options so i'm going to
77:42 - say authorize get pod i o
77:44 - okay it's going to say repository not
77:47 - found it might be private so please
77:49 - authorize get pod access so again uh
77:52 - nope it's not a bug it's just you got to
77:53 - go ahead and hit grant access
77:55 - and so it says okay what kind of
77:57 - accesses do you want to give it we'll
77:58 - say authorize goodpodio
78:04 - and so what we'll do here is just open
78:07 - up the dashboards on the top left corner
78:08 - we're going to say open dashboard
78:11 - and we'll make our way over to settings
78:13 - i just want to show you again the
78:15 - integration so this is what it looks
78:17 - like
78:18 - for github
78:20 - this is what it looks like
78:21 - for
78:23 - bitbucket this is what it looks like for
78:25 - gitlab so you can just see it's slightly
78:26 - different for each one
78:29 - and same routine here i'm curious to see
78:31 - if it's preserved my font size and it
78:33 - totally did i think this is all
78:35 - happening with sync settings so down
78:37 - below see where it says settings sync is
78:38 - on so this is on by default and that's
78:40 - what's
78:41 - causing all these settings to remain
78:43 - available if we turned it off i think
78:45 - it'd probably end up resetting i feel no
78:47 - reason to turn off settings links to
78:49 - show that so we'll just leave it as is
78:51 - but what i'm going to do again is open
78:53 - up a new terminal so in the top left
78:54 - corner we're going to go terminal new
78:56 - terminal
78:57 - and we'll go ahead and type in
79:00 - get pod so gp and type in init i'll open
79:03 - up that new file there and we'll just go
79:04 - ahead and delete that out as per usual
79:08 - and we'll say hello world
79:12 - and it's interesting this has single
79:14 - quotes so it should have worked for the
79:15 - other one i'm surprised it didn't work
79:17 - and it was double quotes
79:19 - but we'll try with single quotes again
79:22 - we'll go back over here we'll add that
79:24 - file we'll say uh add a net getpod.yaml
79:28 - file
79:30 - okay
79:31 - and we will hit changes sync the changes
79:34 - we'll say okay open the context so here
79:37 - we'll say open context
79:39 - and so there is that getpodganimal file
79:41 - updated
79:43 - so that's pretty straightforward for
79:45 - integrations
79:47 - and so i think the next thing i would
79:48 - like to do
79:50 - is to show you how to install the
79:53 - bookmark extension
79:54 - and how to use the bookmarklet so i'm
79:57 - not going to close all this stuff i'll
79:58 - close this tab here we don't need that
80:00 - and
80:01 - from here i'm just going to
80:04 - go to my chrome extensions
80:10 - okay so we'll say chrome extensions
80:13 - and i'm just going to uninstall it so
80:15 - here i have git pod i'm just going to
80:16 - remove it okay
80:18 - and we'll go back here and so now we
80:20 - don't have that button
80:23 - whoops uh let's refresh that one more
80:25 - time
80:26 - yep so that button is gone
80:28 - and so i'll show you how to install the
80:30 - extension next okay
80:35 - hey this is andrew brown and welcome
80:37 - back to another follow along here and in
80:39 - this case what we're going to do is set
80:40 - up the browser extension so what i'm
80:42 - going to do is make a new tab here we're
80:43 - going to go get pod i o now you just
80:45 - type in browser extension
80:49 - and so from here we'll go to this page
80:50 - here it's under the documentation under
80:52 - here
80:53 - and so if we scroll on down we can see
80:55 - that we have support for chrome and
80:57 - firefox and we probably should try out
80:58 - another browser but we'll just do this
81:00 - for chrome for the time being
81:02 - and i'm just going to go ahead and add
81:03 - to chrome
81:05 - we'll say add extension
81:08 - okay and so already in the top here it
81:10 - seems like it's uh turned on
81:13 - up here
81:14 - and so if you want to know where that is
81:16 - we type in chrome forward slash sports
81:17 - extensions and here is where you can see
81:20 - it go to details i don't think there's
81:21 - anything interesting here but you can
81:22 - see there is some white listed stuff
81:24 - here sometimes extensions have
81:26 - additional options down below but uh
81:29 - nothing uh super exciting here so we'll
81:32 - just go ahead and close that and so now
81:34 - what we have is this nice button oh
81:36 - sorry i got a refresh wrong button sorry
81:38 - and so again we can hit the get pod
81:41 - button and so that's just going to save
81:42 - us the trouble of having to type in git
81:44 - pod io i don't know if you saw it but
81:46 - i'll close it again but watch here very
81:48 - close i'm going to click it and notice
81:49 - it has that extension in the front there
81:51 - so there's a workspace already running
81:53 - so that's fine we'll just say okay let's
81:55 - take that one we don't need to spin up
81:56 - another one
81:58 - and so
81:59 - um
82:00 - you know here's that environment notice
82:02 - it's saying
82:03 - bash hello world cannot be found
82:05 - and i'm not sure why we're getting that
82:06 - there must be something wrong here
82:09 - it has the single quotes oh because this
82:11 - is not name
82:13 - okay
82:14 - that's our problem so i kept on having
82:16 - that init there and it was actually
82:17 - trying to run it as a command so that
82:19 - makes sense we'll say fix init commit or
82:22 - fix uh name of
82:26 - task there
82:27 - and we'll commit that
82:30 - and so now i can just close that tab out
82:33 - and from there i can just hit the button
82:34 - again and that's a lot nicer because you
82:36 - know every time you type it in at the
82:37 - top it overrides that page where if you
82:39 - click that button opens in a new tab
82:41 - and that is a lot nicer
82:44 - oh and by the way i didn't want to open
82:46 - a running workspace i want to hit that
82:47 - button and create a new workspace
82:50 - okay because we want to see if that git
82:53 - pod yaml uh will work this time around
82:59 - so we'll give it a moment here and we
83:01 - can see there it is it's still saying
83:03 - that did not commit that file
83:05 - still says init
83:08 - okay we'll save that maybe i did not
83:09 - commit it
83:12 - fix
83:14 - name of task
83:16 - add that again
83:17 - we will save that we'll sync those
83:19 - changes we'll go ahead and close that
83:20 - tab we'll hit the button again
83:23 - and now we have two of those
83:24 - environments so you can only run so many
83:26 - environments in parallel and for the
83:28 - free tier which i believe that we are on
83:31 - we're going to hit that limit very soon
83:33 - if we keep doing that but again those
83:35 - environments will shut down after three
83:36 - minutes if you want them to shut down
83:38 - right away
83:39 - um
83:40 - you can go into your workspace and
83:42 - terminate them i don't think there's an
83:43 - option to terminate from here there's
83:45 - only the option to stop
83:47 - right which i think they should have a
83:49 - terminate button but um you know that
83:50 - might be something in the future
83:52 - and so here it's did is this not
83:55 - updating
83:56 - am i crazy did i did i not launch a new
83:58 - one so i'm going to go here and refresh
84:00 - this page
84:03 - it's still saying that okay
84:05 - what am i doing wrong here
84:08 - so we go here
84:11 - name
84:13 - save
84:16 - right
84:17 - we go over here on the right hand side
84:19 - we're going to add it
84:20 - i'm going to see what's been changed
84:23 - init to name right and we'll just say
84:25 - fixed name task
84:28 - and i want to
84:30 - commit
84:32 - i'm going to go back here
84:34 - refresh
84:43 - and
84:48 - there are no stage changes commit if
84:49 - this happens because usually there's a
84:51 - sync button i press it right away
84:53 - so i'm just going to do git status here
84:58 - get pushed maybe
85:00 - okay there we go so usually you hit that
85:02 - sync button i'm so used to clicking it
85:03 - so fast but just make sure that you push
85:05 - it and then we'll go back here give this
85:07 - a refresh
85:09 - okay i must have not been pressing that
85:10 - sync button if i go back to that video i
85:12 - never knew what that that prompt was i
85:14 - assumed it was like push or pull but if
85:16 - that doesn't work for you just do the
85:17 - push there and now i'm very confident if
85:19 - we open this up it's going to have the
85:21 - behavior that we want
85:30 - okay so we'll just give it a moment here
85:33 - and there we go okay so just be be uh
85:37 - be wary of that i'm just going to want
85:38 - to see if that actually prompts let me
85:39 - say hello world again
85:42 - we're going to add that and just say
85:43 - minor change
85:46 - and we'll save that yeah sync changes so
85:48 - you really have to press that so this
85:49 - action will pull and push and pull
85:51 - requests two bits from origin so say
85:53 - okay
85:54 - and so that's probably what i wasn't
85:56 - doing
85:57 - um but yeah so we saw it for chrome now
85:58 - let's go take a look at firefox i'll be
86:00 - back here in a second all right so i've
86:02 - opened up firefox which is a different
86:04 - kind of browser and what i'm going to do
86:05 - is go ahead and sign into my github here
86:08 - so what we'll do is just
86:11 - type in
86:12 - the username here is exam pro dev and
86:15 - then i'll just put the password in there
86:16 - we'll sign in
86:17 - and i do not need that saved there so
86:20 - we'll go into here and so notice we
86:22 - don't have that button so on the gitpod
86:23 - website we go to docs and on the
86:26 - left-hand side we are looking for
86:28 - configure
86:30 - or maybe it's getting started
86:33 - oh integration sorry and then under here
86:35 - we'll go to browser extension
86:37 - and from there we'll click firefox and
86:39 - we'll add that extension
86:42 - we'll say add
86:44 - and so now that extension is available
86:47 - so we'll say ok
86:49 - so let's go ahead and close that tab i'm
86:50 - not sure what happens if we click here
86:52 - so firefox prevented the site from
86:53 - opening a pop-up we'll say options and
86:55 - say allow pop-ups for gitpodio
86:58 - and so it brings you to the login page
87:00 - which is nice
87:02 - but what i'm going to do is just close
87:04 - out these tabs here and our button now
87:07 - up here so we'll go ahead and hit click
87:08 - get pod
87:09 - and so we have the option so how do you
87:11 - want to log in we're going to say github
87:16 - and we'll just see what this looks like
87:18 - i'm not going to be doing everything in
87:19 - chrome but i just want to show you
87:21 - uh you know that experience okay
87:28 - so
87:30 - there we go so we have hello world which
87:32 - is uh very good same experience right
87:35 - it's not going to be anything different
87:37 - um you know it's just a different
87:38 - browser
87:40 - um
87:41 - and so you know i just want to point out
87:42 - that uh this will work in other ones as
87:44 - well so maybe we'll take a look at
87:46 - microsoft edge next okay
87:48 - all right so now i have microsoft edge
87:50 - installed this is the um i don't know if
87:52 - it's still the default browser but it's
87:54 - the browser made by microsoft and it's a
87:56 - chromium based browser so this extension
87:58 - work with anything like chrome
88:00 - microsoft edge braving it's
88:02 - chromium-based and so what we'll do is
88:03 - go ahead and sign into our github
88:05 - account
88:06 - so we'll go here and we'll just type in
88:08 - exam prodev
88:11 - because we just want to see if the
88:12 - experience is slightly different and
88:14 - then from here we'll just type in get
88:15 - pod i o
88:18 - and from there we'll go to docs
88:21 - and we'll go to integrations
88:23 - and since we know that it's a chromium
88:25 - chromium browser i'm assuming that if we
88:27 - go here it should work
88:30 - so it says you can now add extensions
88:31 - from the the chrome web store to
88:33 - microsoft edge which sounds really great
88:35 - and so i go down below here and i'm just
88:37 - looking for
88:40 - a place to add i don't see a button here
88:42 - so allow extensions from other stores
88:45 - microsoft does not verify extensions
88:46 - installed from third-party stores to get
88:49 - um extensions verified go to microsoft
88:52 - edge add-ons so let's go check out the
88:53 - add-ons because this is the chrome store
88:56 - and i'm sure it will work from here but
88:57 - i'm just curious if it's in here
88:59 - because it seems like if this is the
89:01 - official way maybe we should go here and
89:02 - see there
89:04 - so let's say git pod
89:06 - dot io
89:08 - and so i don't see it in here and so if
89:11 - git pod if you're watching maybe you
89:12 - might want to get this in here and i'm
89:14 - assuming this is um
89:16 - extensions because i see grammarly in
89:18 - here okay but let's go ahead and just
89:20 - say allow extensions from other stores
89:23 - so it's permitted and so now we can say
89:25 - add to chrome we're technically not
89:26 - using chrome we're using microsoft edge
89:29 - and so now we have that button there
89:31 - notice that we actually get a button
89:33 - whereas in chrome we don't if we do that
89:34 - brings us just like how firefox does
89:37 - and so what i want to do here let's see
89:39 - if it's the same thing chrome
89:41 - uh extensions does that work ah it's
89:44 - edge extensions which is fine so here
89:46 - you can see it we turn on and off look
89:48 - at the details very similar but we'll go
89:51 - back over here and i want to go to get
89:54 - pod hello world and we'll click on get
89:56 - pod
89:58 - and we'll have to log in with github
90:00 - same story you know
90:02 - and sure we'll launch the existing
90:04 - workspace no reason to launch a new one
90:06 - this one will launch really fast because
90:07 - of it
90:09 - and it's the same experience so yeah i
90:12 - mean we could look at brave as well but
90:13 - i think the process is going to be the
90:15 - same
90:16 - brave is just another browser that we
90:18 - can utilize okay but uh there you go
90:21 - okay i decided to do brave just for fun
90:23 - and so here i have the brave browser
90:25 - open and we're gonna make our way over
90:26 - to github
90:27 - and just see what we can do here and see
90:29 - if the process is any different i'm sure
90:31 - it's the same it'll be super unexciting
90:33 - but let's do it anyway okay
90:35 - so we'll say exam pro dev we'll go ahead
90:37 - and paste that on in there
90:39 - and so from here we can go to our
90:41 - repository
90:43 - oh and we need the extension right so
90:44 - we'll type in git pod io
90:47 - and from here we'll go to whoops docs
90:51 - integrations
90:54 - browser extension and we will click
90:57 - chrome because it's a chrome based one i
90:59 - don't know if like brave has like brave
91:01 - add-ons
91:03 - like their own extension store maybe
91:06 - um
91:08 - we'll go to extensions here
91:12 - so maybe go to the web store here and it
91:14 - just goes to google chrome so that tells
91:16 - us that you know they don't have their
91:18 - own store like microsoft does here or
91:21 - add-on place you know we'll just say add
91:23 - to brave we'll say add extension
91:27 - there it is
91:28 - looks the same
91:30 - we'll go ahead and see if that button
91:32 - exists there we'll refresh
91:34 - we'll hit get pod here we'll say github
91:36 - again
91:40 - we'll continue with the same workspace
91:41 - so it just runs a bit faster
91:47 - and there we go so we've launched it in
91:50 - chrome
91:51 - within
91:52 - firefox edge and brave
91:55 - i don't have safari on this computer but
91:58 - can we do safari on windows safari
92:00 - windows
92:02 - right
92:06 - i think there is one so if there is
92:07 - we'll give it a try but i mean we pretty
92:09 - much exhausted all the browsers here so
92:11 - you know if there's safari and i can
92:12 - install it here i'll in the next video
92:14 - will be seeing if we can install with
92:15 - safari okay
92:16 - [Music]
92:21 - okay i'm back and
92:22 - i was thinking about using safari but we
92:24 - can't install it on windows anymore
92:27 - and it'd be too hard to record on my uh
92:29 - my mac computer so what i'm going to do
92:32 - is just use opera instead and opera has
92:34 - been a browser for a very long time i'm
92:37 - not sure what they've been doing with it
92:39 - but i have a strong feeling that we will
92:40 - not be able to install
92:42 - the chrome the chromium extension on
92:44 - opera unless it actually is using chrome
92:46 - underneath but let's go find out so the
92:48 - first thing is
92:50 - let's just go to get pod io
92:53 - okay and
92:55 - we'll first see if it it we install that
92:57 - chrome extension and then we'll go log
92:58 - into our github as per usual so we'll go
93:00 - to docs we'll go to integrations
93:04 - and from here we'll go to
93:06 - extension
93:07 - and i think that it won't work here so
93:09 - we go to chrome
93:12 - oh
93:14 - is
93:15 - is opera
93:16 - is opera a chromium browser let's go ad
93:19 - extension see i didn't think it was
93:21 - based off of chrome
93:23 - well that messes up my whole example and
93:26 - git pod you're going to have to say that
93:27 - it works with
93:29 - wells and other chromium browsers so i
93:31 - guess they kind of
93:33 - got all those edge cases i was hoping to
93:34 - find one that's not chromium-based and
93:37 - so now i really think that i really do
93:39 - have to try it on safari to find out if
93:42 - there is a use case there so i guess if
93:44 - we go over to
93:45 - our github now
93:48 - i'm so disappointed that that that that
93:51 - actually worked okay
93:52 - um but we'll just type in exam pro
93:56 - dev
93:58 - we'll put the password in there
94:00 - and we'll go see that there's a button
94:02 - yeah the button's there great so what
94:04 - browser
94:06 - browser that is not chromium-based
94:12 - uh windows
94:14 - is there anything
94:19 - see i don't know anymore like what's
94:21 - pale moon best browsers that are not
94:23 - based on chromium
94:25 - pale moon web browser
94:28 - never heard of this
94:30 - really
94:32 - film is an open source
94:34 - browser
94:36 - 2021
94:37 - let's give it a try so what i'll do is
94:39 - i'll just be back here in a moment and
94:42 - we'll take a look at pale moon okay
94:44 - because i just want to see a browser
94:45 - that's not chromium okay
94:48 - all right so unfortunately github does
94:50 - not work with palemoon and neither does
94:52 - gitpod and so unfortunately we can't use
94:55 - this cool new browser but we'll have to
94:57 - do is go back to opera and pretend that
94:59 - this extension never worked and that we
95:01 - have a reason to use the bookmarklet um
95:04 - and so what we'll do is just bookmark
95:06 - this here in the top right click here
95:07 - edit say launch and get pod and then
95:10 - we'll have to put that javascript here
95:12 - so we'll type in get pod bookmarklet
95:17 - all right and from here we have some
95:20 - javascript we'll go ahead and copy that
95:22 - make our way back here right click edit
95:24 - if it seems like i'm going fast it's
95:26 - because i've shot this video like four
95:27 - times
95:28 - and so i'm just hoping that it works
95:30 - smoothly this time around but so we have
95:32 - our button we'll go ahead and click the
95:34 - get pod it might prompt us if we need to
95:36 - authorize so just give it access if you
95:39 - do and as that launches i'm going to go
95:41 - ahead and copy this code so we can just
95:42 - take a look at it
95:44 - and so here we are i'm going to make a
95:46 - new file here but you can see that it
95:47 - worked no problem right um
95:50 - but i just kind of want to show you the
95:52 - javascript
95:54 - because it's really really simple
95:56 - like you know it's just looking or you
95:58 - get lab github get bucket and then open
96:01 - this thing and so if we wanted to extend
96:03 - this this is just javascript you can do
96:04 - whatever you want with it so if we want
96:06 - to do something fun like get pod and
96:08 - vars
96:10 - we can actually embed environment
96:12 - variables into our url so down below
96:14 - here we kind of have the syntax here for
96:16 - doing that
96:17 - okay
96:19 - and so
96:20 - i pretty much how that knows how that
96:22 - works so we would just type in something
96:23 - like
96:24 - my env equals production
96:27 - or maybe development
96:29 - that'd make more sense
96:31 - we'd have a four slash because that's
96:32 - how it works
96:33 - and we go ahead and save that and then
96:35 - we would go ahead and copy that just
96:38 - make sure that's saved i'm going to
96:39 - close that environment close this one
96:41 - we're going to right click edit
96:43 - and just paste in the new contents i'm
96:45 - going to make sure that that is there so
96:46 - i don't have to triple check and so
96:49 - we'll hit save and now if we launch get
96:51 - pod that environment variable should get
96:53 - passed along so it's just like a kind of
96:55 - cool way to modify it there's probably
96:58 - more interesting things that we could do
96:59 - so you could technically maybe write
97:01 - your own contexts if you wanted to
97:04 - but of course git pod only supports
97:06 - particular context so let's see if our
97:08 - environment variable shows up here so
97:09 - we'll just type in grep
97:11 - my env grep is just a way of searching
97:15 - okay and there it is we can type in echo
97:17 - and type in my env
97:19 - and there it is so there you go that is
97:21 - the bookmarklet for when you cannot
97:24 - install chrome extensions whether your
97:26 - browser does not support it or whether
97:28 - your admins have locked down your
97:30 - browser because it's a workstation or
97:32 - what have you but there you go
97:34 - [Music]
97:38 - hey this is andrew brown and we are
97:39 - taking a look at git pod configuration
97:42 - files and so this allows you to
97:43 - configure a workspace and so we say
97:45 - workspace we're saying configure a
97:47 - developer environment
97:48 - when at first launch
97:50 - so the gitpod configuration file is a
97:52 - yaml file that must be named period
97:56 - gitpodperiod.yaml so the period or dot
97:58 - that's in the front there tells linux
98:00 - that it's a hidden or secret file and
98:02 - that's not so important but what's
98:03 - important is that you remember to have
98:05 - that dot or period in the front and it
98:08 - needs to be present at the root of your
98:10 - git repository you can only have a
98:12 - single gitpod yaml file so you can't
98:15 - make a bunch of folders and then
98:17 - put a bunch in there thinking you're
98:18 - going to customize all those folders
98:19 - it's just a single one and so here's an
98:22 - example of a
98:23 - gitpod configuration file we're going to
98:25 - see a lot of different kinds throughout
98:26 - this course but this is a very simple
98:28 - one where it's installing dependencies
98:30 - using yarn for javascript it's opening
98:32 - up port 8000 and then it's going to
98:34 - allow us to view the website inline in
98:38 - the code editor so the following can be
98:40 - defined in the gitpod configuration file
98:42 - and so we're going to go look at a quick
98:43 - list of the configuration options and
98:45 - then we'll deep dive in upcoming videos
98:48 - on all these options so the first is
98:50 - checkout location so where gitpod checks
98:52 - out the project's code which will
98:54 - default to workspace git config so
98:57 - defining a workspace git configuration
98:59 - github dot pre builds configure the
99:01 - gitpod github app specifically for
99:02 - continuous pre-built and you can do
99:04 - pre-builds with get lab and bitbucket
99:06 - it's just that github has some
99:08 - additional options here we have image so
99:10 - define custom docker image this defaults
99:13 - to git pod forward slash workspace full
99:15 - we have ports so define ports exposed
99:17 - for public access tasks so define a list
99:20 - of terminal windows to be open and
99:22 - associated scripts to be run when
99:24 - launching a new workspace vs
99:26 - code.extensions a specified list of vs
99:28 - code extensions to install when
99:29 - launching a new workspace workspace
99:31 - location so which path gitpod considers
99:34 - the project's workspace default
99:35 - directory and this will default to
99:38 - workspace i could really use a comma
99:40 - oops
99:41 - i could really use a comma right here
99:43 - but yeah those are the settings and we
99:44 - will look at them in greater detail okay
99:47 - [Music]
99:51 - hey this is andrew brown and we're
99:53 - looking at how do we actually initialize
99:55 - a get pod configuration file so to
99:57 - initialize a git pod configuration file
99:58 - there are two approaches the first is
100:00 - very simple create a dot get pod yaml
100:03 - file from scratch and just start filling
100:04 - it in that's the way i generally do it
100:06 - but they do have this convenience
100:09 - cli command called gp init and this will
100:11 - generate a
100:13 - sample.gitpod.yaml file so this is what
100:14 - it looks like
100:16 - i don't find this particularly useful
100:18 - but you know if you find this easier to
100:20 - do than right-clicking and creating a
100:21 - file it's up to you but i just wanted to
100:23 - know that both options were available
100:25 - but in either case you need to commit
100:27 - this dot
100:28 - gitpod.yaml to your codebase because um
100:31 - you know it's not going to stick around
100:32 - if you don't and we'll learn that as we
100:34 - look at the iterative workflow okay
100:36 - [Music]
100:40 - hey this is andrew brown and what we're
100:42 - going to do in this follow along is look
100:44 - at how to initialize a github
100:45 - configuration file of course we have
100:47 - done this in a previous follow along but
100:49 - let's just do it again for good measure
100:51 - to make sure that we know how to do it
100:53 - so i'm going to go ahead and create a
100:54 - new repository i'm going to say git pod
100:57 - and i'm going to call this uh
101:00 - init so this will be to
101:03 - initialize
101:05 - a get pod configuration file
101:10 - and then from here we can make it public
101:11 - or private doesn't matter i'm going to
101:13 - make it
101:14 - private
101:15 - and we'll go ahead and add a readme file
101:17 - and we'll create that repository
101:21 - so here is our repository and i have the
101:24 - chrome extension installed so i'll go
101:26 - ahead and hit the get pod button
101:35 - all right and so our workspace has
101:36 - started now so what i'm going to do is
101:38 - i'm going to open up terminals i'll go
101:40 - file up here the hamburger menu
101:42 - i always say file but it's actually
101:44 - hamburger menu terminal new terminal and
101:46 - we'll give it a moment here to load and
101:48 - so we'll just type in gp init and so the
101:50 - gpinit command is used for setting up an
101:52 - initial gitpod file and that's all there
101:55 - really is to it again you can of course
101:56 - just right click and create that file
101:58 - you want and the key thing to remember
101:59 - is that you need that period in front of
102:01 - the git pod there for it to work
102:03 - um but you know we can go ahead and just
102:05 - save this file and commit it
102:08 - just say commit
102:10 - initialize
102:11 - a git pod yaml file and that's all there
102:14 - really is to it okay
102:17 - so we'll just say okay
102:19 - and we'll go back here and just refresh
102:22 - here
102:23 - and we could launch this again just to
102:25 - see the results here but you know not
102:28 - much to here to see but just remember
102:29 - that's gp init
102:31 - [Music]
102:36 - so when you're developing your gitpod
102:38 - configuration file it is standard
102:40 - practice to keep terminating and
102:41 - launching new workspaces until you get
102:43 - your ideal configuration so let's kind
102:46 - of visualize what that workflow looks
102:48 - like so the idea is you're going to have
102:49 - this git pod yaml file you're going to
102:52 - either be creating it or modifying it
102:54 - and once you're happy with its current
102:55 - state you're going to go and commit that
102:57 - to your git repository once that is
103:00 - committed you're going to terminate the
103:02 - current workspace so that could just be
103:04 - uh
103:05 - telling it to
103:07 - delete or just closing out the tab and
103:09 - then you're going to launch a new
103:11 - workspace and you're going to observe
103:14 - the start task did it do what it was
103:16 - supposed to do we need to tweak it and
103:18 - if it is uh requires more tweaking we're
103:21 - going to go back and modify our git pod
103:23 - yaml file again and go through this
103:25 - entire process until we're happy with it
103:28 - and then we can just start using our
103:30 - developer environment as expected but
103:32 - what i really want you to know and this
103:34 - is what created a lot of confusion for
103:37 - me initially is that stopping and
103:38 - starting an existing workspace will not
103:41 - produce the desired results since the
103:43 - before and init commands for a star task
103:45 - will not be performed so uh there is an
103:48 - execution order there's three things
103:50 - it's um before init
103:53 - and command and so the only way to
103:57 - really make sure that your start tasks
104:00 - like to be able to debug them or or to
104:02 - develop on them is to always
104:05 - terminate and launch a new workspace
104:07 - okay
104:08 - [Music]
104:12 - hey this is andrew brown and in this
104:14 - follow along we're going to learn about
104:16 - how the iterative workflow works when
104:18 - you are
104:19 - trying to update your gitlab
104:20 - configuration file many times to get to
104:23 - the state that you want it to be in uh
104:25 - because there is some confusion between
104:27 - starting and stopping and terminating
104:28 - and i want to make that very clear so
104:30 - what we're going to do is create a new
104:31 - repository here we're going to call it
104:32 - get pod iterative
104:36 - workflow
104:37 - and i'm going to make it private for fun
104:39 - we're going to call it a readme file of
104:41 - course you can make it public but
104:42 - you know doesn't really matter i'm not
104:44 - going to launch gitpod right away i'm
104:46 - just going to go ahead and add a file
104:47 - just to save us a bit of time because
104:49 - you know there is the stopping and
104:50 - starting of those workspaces it takes
104:52 - time and i just want to set up one with
104:55 - uh tasks and we're going to just have a
104:57 - task
104:58 - for um
105:00 - each state so we're gonna we're gonna
105:01 - need it's before
105:04 - a knit
105:05 - and command and i'm just gonna do an
105:07 - echo in each of these ones
105:10 - okay so we'll do this
105:12 - init
105:14 - echo before
105:17 - all right so we have our three this
105:18 - should all be fine we'll go ahead and
105:20 - commit this file and now what i can do
105:22 - is start up this environment and i'll
105:24 - see you back here in a moment okay all
105:26 - right so after a short little wait there
105:28 - our environment has launched and notice
105:30 - that it's ran before a knit command so
105:32 - what is going to happen
105:33 - if we um stop this environment so over
105:37 - here we can do stop workspace
105:39 - and what we'll do is we'll see what runs
105:41 - here so just give it a second sometimes
105:43 - it takes a moment to kick in for
105:45 - it to stop so just wait
105:52 - and it looks like it's starting to do
105:53 - something
105:54 - there we go so it's going to stop
105:56 - sometimes when i stop it might say
105:59 - superficially like oh this workspace is
106:01 - gone so just don't worry about the
106:03 - getpod errors they're not always 100
106:05 - accurate and they don't always happen
106:07 - but you know just have confidence of
106:09 - what you are doing
106:10 - so this is going to stop and once this
106:12 - is fully stopped
106:13 - um and that doesn't usually take that
106:15 - long we're going to start it up so i'll
106:16 - just wait here a moment so i can show
106:18 - you that i'll press the start button
106:19 - again so here we go and we'll go ahead
106:21 - and open this workspace again and i'll
106:22 - see you back here in a moment when the
106:24 - environment has started up again okay
106:26 - all right so after a short little wait
106:27 - here it has launched again and notice
106:29 - that it's running the before and command
106:32 - so if we go back into here we have
106:34 - before init command so anytime you
106:36 - launch
106:37 - a a regular workspace it's always going
106:39 - to run
106:40 - uh before a net command for the first
106:42 - time but any restarts it's always going
106:43 - to run before and command and you're
106:45 - going to get used to this because when
106:46 - we start looking at the execution order
106:47 - steps between pre-builds and without
106:50 - pre-builds you're going to start to see
106:51 - this pattern
106:53 - but what i want to do now is just to
106:54 - completely terminate the environment and
106:57 - so you know if you want to terminate you
106:58 - can stop this current one if you're
107:00 - worried about lots of parallel
107:02 - environments running but what i normally
107:04 - do is i just go ahead and close the tab
107:06 - and in three minutes that environment
107:07 - will shut down on its own um i don't
107:10 - know if gitpod really has an option for
107:13 - um terminating it terminate yeah i think
107:15 - you always have to stop at first so if i
107:16 - go here
107:18 - i can i can delete it okay so if i want
107:21 - to i can delete it here but again this
107:23 - is nothing i ever think about i just um
107:26 - close the tab and it goes away which is
107:28 - really nice but what we'll do is we'll
107:29 - launch a new environment so we'll just
107:31 - click the get pod button
107:32 - and see it thinks that this one's still
107:34 - running we're gonna ignore it hit the
107:35 - new workspace button okay
107:38 - and sometimes i forget what i'm doing
107:40 - and i might relaunch an existing
107:41 - workspace so you just have to be uh
107:44 - considerate and think about you know
107:46 - maybe i did this maybe i did that okay
107:49 - and so i'll see you back here when this
107:51 - is started okay
107:52 - all right welcome back so you can see in
107:54 - the case that we terminate it it runs
107:57 - before init command all right and so
107:59 - this again is really important because
108:01 - if you are trying to develop this and
108:03 - you're doing multiple iterations you
108:04 - really want to know that in it's not
108:05 - going to run every single time so you
108:07 - really always always always want to
108:11 - just close the tab and then launch a new
108:13 - workspace okay and so you know hopefully
108:15 - that's clear and saves you some trouble
108:17 - so there you go
108:20 - [Music]
108:24 - so the most important part to a git pod
108:27 - configuration file in my opinion are the
108:29 - start tasks because these define a list
108:31 - of terminal windows to be open and
108:33 - associate scripts to be run when
108:35 - launching a new workspace so here is an
108:38 - example
108:39 - of um and this is actually my marketing
108:41 - website uh
108:43 - of a kit pocket configuration file and
108:45 - so what's happening here is we have
108:47 - three tasks defined we have one called
108:50 - html so that's going to be running or
108:52 - building out html files we have this
108:54 - next one here for generating out
108:55 - javascript and css and then it's going
108:58 - to continuously watch
109:00 - uh
109:01 - for changes and then we have a
109:04 - task that will serve the website so we
109:06 - can view it and then down below here
109:08 - we're opening up port 3000 and then
109:10 - we're going to
109:11 - open it in the browser so when you have
109:14 - that and uh
109:16 - you start up your workspace you're going
109:18 - to see these three tabs and notice that
109:19 - the names match so we have html
109:22 - js for css and serve and over here you
109:26 - can see that it is a running
109:29 - http server over here so a start task
109:32 - has the following properties you have a
109:33 - name so the name
109:35 - that will appear within the terminal as
109:36 - we can see there
109:38 - the before command so a command that
109:39 - will run once at the launch of a new
109:41 - workspace
109:42 - the init command a command to run once
109:45 - at the launch of new workspace expects
109:46 - to terminate and i ran out of room here
109:48 - but this one expects to terminate as
109:50 - well but we will repeat that multiple
109:52 - times in this course then we have the
109:54 - command command which is confusing to
109:56 - say when you say that out loud but
109:58 - that's what it's called and that runs at
110:00 - the launch of a new or existing
110:02 - workspace and can be continuously
110:04 - running so an example of here we have
110:06 - that hp server it of course continuously
110:09 - runs and then the npn run watch that is
110:10 - something that continuously runs then
110:12 - you have env so this allows you to set
110:15 - environment variables scoped for the
110:16 - task and we have the open mode so how
110:19 - the terminal windows should be opened
110:20 - whether it's going to be
110:22 - tab after tab before split right
110:25 - split left okay
110:26 - [Music]
110:30 - hey this is andrew brown we are taking a
110:32 - look at execution or steps for tasks and
110:35 - so a task has three possible steps in
110:37 - its execution order uh and you could say
110:40 - steps so you could say command i'm going
110:41 - to call them steps because there is a um
110:44 - a step called command and then i'm going
110:45 - to be saying command command that gets
110:47 - confusing but we have before init and
110:49 - command and so let's just kind of talk
110:51 - about their application so for before
110:53 - you're applying light configuration of
110:55 - the environment before init or command
110:56 - step runs and that will make sense when
110:58 - we start seeing like how these run with
111:01 - pre-builds or no pre-builds then we have
111:03 - a knit so for heavy configuration
111:04 - environments so compiling resources
111:06 - installing packages
111:08 - and then commands so starting
111:09 - continuously running servers like a
111:11 - database or web server
111:13 - if that doesn't make sense don't worry
111:15 - because we're going to look at these in
111:17 - a few different ways and i was very hard
111:19 - to kind of describe what these three
111:21 - boxes are
111:22 - but you know i think we'll just go
111:23 - through that iterative process and we
111:25 - will understand uh gen absolutely before
111:28 - the end of this course what goes in
111:29 - before a knit and command so there is no
111:32 - guarantee of the order of the execution
111:34 - for start tasks and so when i say that i
111:37 - don't mean that
111:39 - like there's a guarantee that i'll go
111:40 - before a knit or command but when you
111:41 - have a collection of those
111:43 - like more than one task there's no
111:45 - guarantee of that okay so you can uh
111:48 - have terminals depend on the completion
111:49 - of other commands via the sync await and
111:52 - sync done and we will definitely look at
111:54 - that in the course here uh there is a
111:56 - guarantee of the execution order as uh
111:58 - for before a net command for a task so
112:01 - for the individual execution of
112:03 - this
112:04 - we just saw that will always be the same
112:06 - okay so the execution order varies uh in
112:09 - the case of when launching a new
112:11 - workspace without pre-builds and then
112:12 - when launching a new workspace with
112:14 - pre-builds and we will look at those
112:17 - right now okay
112:18 - [Music]
112:22 - hey this is andrew brown and what i want
112:24 - to do in this follow along is just to
112:25 - kind of look at a practical example of
112:27 - execution doorstep so you can kind of
112:29 - understand the context of when you put
112:31 - something in the before the init and the
112:34 - command and it's not like a perfect
112:36 - science
112:37 - and i think you just kind of have to
112:39 - figure your way through it and look at a
112:40 - lot of examples but i'm just trying to
112:42 - think of one where i know somebody is
112:44 - using
112:45 - um git pod in a more complex use case
112:47 - and one would be something like forum so
112:50 - i definitely know forum has a git pod
112:51 - gamble file i think i was saying to them
112:53 - earlier this week it was not working
112:55 - properly but they may have fixed it
112:56 - since then but we're not interested
112:58 - really whether or not it uh like the
113:01 - application works but more so the fact
113:03 - that how are they using it like those
113:05 - execution order steps so notice they
113:07 - have a docket.yaml file in a
113:10 - gitpoddocker file if you don't know what
113:12 - form is form is this platform that
113:14 - allows you to host your own
113:17 - um
113:18 - form essentially if you ever heard of
113:19 - like dev.t.o like this here
113:22 - this is what this is so the great thing
113:24 - is we can go ahead and hit our git pod
113:26 - button and we'll just wait for this to
113:28 - spin up and then once it's there we'll
113:29 - see if it actually is working as
113:31 - expected if it doesn't it's fine but
113:33 - what we're really interested in is
113:34 - expecting that git pod yaml file okay
113:37 - all right so after waiting a little
113:38 - while here the environment has spun up
113:40 - and so what we'll do is just take a look
113:43 - at what is going on there's a lot of
113:44 - things popping up asking me to do stuff
113:46 - and so here we can see that we have two
113:49 - tabs on the right hand side so we have
113:51 - form server bash open site gp
113:54 - so what we'll do is go on the left hand
113:57 - side here and take a look at the get pod
114:00 - yaml file as soon as i can find it here
114:03 - um
114:06 - and if i can't find it that way we can
114:07 - just hit control p i believe and just
114:09 - type in dot git pod yaml
114:13 - okay this is not specific to git pod but
114:16 - this is how vs code opens files anywhere
114:18 - so instead of me having to look through
114:20 - all these things i can just do that so
114:21 - that is the file that i'm interested in
114:23 - so we'll do is open it up and so here we
114:25 - can see that they are specifying a
114:27 - custom image which is totally fine it's
114:30 - not going to make this too confusing
114:31 - they have a lot of ports open so 3000 30
114:34 - 35 5432 that's for postgres i'm not sure
114:37 - what this is for this is for the the
114:40 - ruby on rails web server this is for
114:41 - redis just because i know these port
114:43 - numbers i just don't know what this
114:44 - one's for so we'll go here and we have
114:46 - some tasks and the first thing they have
114:49 - for this task is the form server
114:52 - and they have a before and a knit and
114:53 - command and so in there before what
114:55 - they've decided to do is start up the
114:58 - redis server uh then they are doing an
115:00 - await ports they're waiting for 5432 to
115:03 - happen and then they're doing sleep i'm
115:05 - not sure what the sleep is for
115:07 - okay and so that means that um
115:10 - until port is open then proceed forward
115:12 - which is fine
115:14 - and i'm not i'm not sure what a single
115:17 - ampersand means unless i just remove
115:19 - that by accident i don't think i did so
115:21 - that kind of interested in what that
115:22 - does
115:23 - um again assuming that you know i didn't
115:25 - just introduce that mistake which i
115:27 - don't think i did and then we have this
115:29 - git pod init sh so they're running
115:31 - initialization script so this could have
115:33 - a bunch of stuff in it let's just take a
115:35 - look there
115:36 - get pod
115:38 - init sh
115:41 - so here
115:43 - they are copying environment variable
115:45 - installing a couple gems running been
115:48 - set up and that's kind of nice where
115:49 - it's like okay maybe you have a lot that
115:51 - you want to run here so you just
115:52 - abstract it out into there and then here
115:54 - they run the bin startup command
115:57 - okay and then down below they have open
115:59 - site so it looks like they just do this
116:01 - to force uh get pod to open it up and
116:04 - this is kind of nice um i didn't know
116:05 - you could do this so i think when i did
116:07 - the follow along i had something a lot
116:08 - more complicated so i'm gonna have to go
116:10 - back and
116:11 - borrow that because that is definitely a
116:12 - lot easier all right so this one really
116:15 - just opens up the site and this one is
116:16 - doing this now what's interesting is
116:18 - that they started the redis server here
116:19 - because what they could have done is
116:21 - they could have just made a separate
116:22 - task here called redis server
116:24 - right and from here
116:27 - what they could have done is done this
116:29 - on the
116:31 - um
116:32 - like command step
116:34 - right and so
116:35 - that's what i would have done i would
116:36 - have said redis server and then if i had
116:39 - a ruby on rail server i would have done
116:40 - ruby on rails
116:42 - okay
116:44 - but that's not what they did so they
116:45 - decided to put in the before command and
116:47 - that's totally valid so that's just me
116:48 - trying to say like
116:50 - it's not a perfect science you have to
116:51 - decide if you want to put something in
116:53 - the before or if you want to make it a
116:55 - separate tab for me i prefer to break it
116:57 - all up into separate tabs and before is
116:59 - really designed for um
117:01 - you know like if you had to change ruby
117:03 - versions or things like that at least
117:04 - that's what i think it's for
117:06 - but just understand that you know it's
117:08 - gonna vary for that kind of stuff
117:10 - and so you know hopefully that gives you
117:12 - kind of an idea for execution or steps
117:14 - we're going to iterate on this quite a
117:15 - few times so we'll get it by the end of
117:17 - this course okay
117:18 - and by the way we are done here so we
117:20 - can just go ahead and close that tab i'm
117:22 - just going to go back to my homepage
117:23 - there and we are done
117:25 - [Music]
117:29 - so let's take a look at the execution
117:31 - order steps when launching a new
117:32 - workspace without pre-builds and what's
117:34 - important here is that all steps will
117:36 - run within the current workspace so
117:38 - we've got before init and command so
117:40 - let's talk about what we're going to use
117:42 - these commands for so before
117:44 - is great when we want to customize the
117:46 - terminal install global dependencies and
117:48 - we expect the commands to terminate so
117:51 - an example here
117:52 - for the before would be something like
117:54 - rvm or nvm so you're switching to the
117:58 - ruby
117:59 - ruby version that you want to use or the
118:01 - javascript version that you want to use
118:02 - so that's kind of an example there
118:05 - and so for net we are downloading and
118:07 - installing dependencies compiling source
118:09 - code running your test suite and again
118:12 - we expect our commands to terminate so
118:15 - examples here would be bundle stall yarn
118:18 - install rake db create so what's
118:20 - happening here is we are installing ruby
118:22 - dependencies javascript dependencies
118:24 - creating our database for a ruby on
118:26 - rails application possibly
118:28 - um and then we have our command so
118:30 - the idea here is you're going to start
118:32 - your continuous continuous running
118:34 - servers you're going to run your build
118:36 - scripts to build assets and this last
118:38 - command can be continuously running so
118:41 - here we are starting a rails server so
118:44 - hopefully that gives you an idea what's
118:45 - going on here but the reason why
118:49 - these ones have to terminate is because
118:51 - of pre-builds because
118:52 - these will get pushed onto pre-builds
118:54 - and you know you can't have something
118:55 - continuously running or the pre-build
118:57 - will never end but we'll talk about that
118:59 - in the next slide okay
119:03 - [Music]
119:05 - so now let's take a look at the
119:06 - execution order steps when we are
119:07 - launching a new workspace with
119:09 - pre-builds enabled so not all steps are
119:11 - executed in the new environment so on
119:14 - the left-hand side it's going to look a
119:15 - little bit different we're going to have
119:17 - our pre-build environment which is only
119:19 - going to run the before and init then
119:21 - we're going to have the new workspace
119:22 - that's going to run the before and
119:24 - command and so the idea behind having
119:27 - this pre-built environment at where it's
119:29 - running the before knit commands it's
119:31 - going to
119:32 - create a snapshot that will be then used
119:35 - later on when we launch our new
119:36 - workspace environment to reduce our boot
119:39 - time
119:40 - so looking at our previous script there
119:42 - we would do the before here so changing
119:44 - our ruby version and then here we would
119:46 - install our dependencies create our
119:48 - database
119:49 - um and then down below in this new
119:51 - workspace this is when you start a new
119:53 - workspace with a pre-build it's going to
119:55 - run the before and command so just
119:57 - describing what we're doing with the new
119:58 - workspace here the developer saves time
120:00 - because they don't have to wait for the
120:02 - length of the inits compile independent
120:04 - libraries so that's just me redescribing
120:06 - what i just said here after talking
120:08 - about the reduced boot time so here we
120:10 - would do the before again and then we'd
120:13 - run our command
120:15 - so it's really important to think about
120:17 - the fact that these are isolate
120:18 - environments because
120:20 - as you develop your git pod
120:21 - configuration files you're going to have
120:23 - to realize that
120:24 - you know stuff is not going to carry
120:26 - over to the next uh workspace so if you
120:29 - do this rake db crate and it populates a
120:31 - bunch of data
120:33 - and you need that in your uh workspace
120:35 - it might not be there
120:36 - okay
120:37 - so or like if you cd into
120:40 - if you cd into a particular directory
120:43 - right
120:45 - um and you think that you're going to be
120:46 - seated in that directory when you're
120:47 - over here you might not be there so
120:49 - that's something that you'll have to
120:50 - play around with it's not too bad you
120:52 - start to get uh get the idea but i i had
120:55 - a script that i was using that was uh
120:58 - before pre-build and it worked fine and
120:59 - then when i moved to pre-build i had to
121:01 - take in consideration that these are
121:03 - isolate environments here and not
121:04 - everything carries over okay so there
121:06 - you go
121:08 - [Music]
121:12 - hey this is andrew brown and we are
121:14 - talking about gitpod configuration files
121:16 - and specifically how to write multi-line
121:19 - tasks so if you want to perform a series
121:21 - of commands within a task step there are
121:24 - several options available of course you
121:26 - can do it as one line and the way you
121:28 - would do with one line is you'd have to
121:30 - use double ampersand i bet you could
121:32 - also probably use a a semicolon but
121:36 - double ampersand is probably going to be
121:37 - recommended if you're not familiar with
121:40 - double ampersand the idea is that if
121:42 - this command fails then it's not going
121:44 - to run the next command okay but if you
121:46 - wanted the next command to run
121:48 - i suppose you'd have to use a semicolon
121:50 - to denote the next line okay so if you
121:54 - want to do multi-line what we can do is
121:56 - use this
121:57 - closing angle bracket and then followed
122:00 - by the next lines you're going to have
122:01 - to have double ampersand the reason why
122:04 - is that when you use this uh closing
122:06 - angle bracket it's going to take all
122:09 - these lines and it's going to remove all
122:10 - the new lines and treat it as a single
122:12 - line so it's pretty much like writing
122:14 - this but multi-line okay
122:16 - and then we have this other one where we
122:18 - use a pipe and the pipe will
122:22 - add a new line so these will be
122:24 - sequentially um
122:27 - these will run sequentially in order and
122:29 - generally in this case you probably
122:30 - wouldn't use double ampersand because
122:33 - it's not going to play well with that
122:34 - new line and if you're wondering about
122:36 - this like
122:38 - angle bracket and pipe and you might
122:40 - think that it is actually get pod
122:43 - configuration file specific but it's
122:44 - actually just yaml's multi-line syntax
122:47 - so if you investigate on how yaml
122:49 - multi-line works that tells you what you
122:52 - can do here and there's actually more
122:54 - you can do
122:55 - um but you know i'm not going to show it
122:57 - to you here because it's just start we
122:59 - start again the weeds and it's not use
123:00 - cases that are useful but just
123:02 - understand that if you learn a bit more
123:03 - about yaml you'll learn uh how you'll
123:05 - have more flexibility with the git pod
123:07 - configuration file okay
123:12 - [Music]
123:14 - this is andrew brown and this follow
123:15 - along i want to show you about
123:16 - multi-line strings uh within git pods so
123:19 - when you are creating tasks you can make
123:21 - your life a little bit easier so i'm
123:23 - going to do is go ahead and create a new
123:24 - repo here and we're going to call it git
123:26 - pod multi-line and i will go ahead and
123:29 - make this a private repository
123:32 - and so from here we will go ahead and
123:34 - launch a new git pod and so i have this
123:36 - tab open here called yaml
123:38 - hyphen multi-line info because i want
123:40 - you to understand that this multi-line
123:41 - syntax is not specific to git pod but it
123:44 - is part of
123:47 - it is part of yaml which is the language
123:49 - we use and so here on the left hand side
123:52 - we have an example where it says replace
123:53 - new lines with spaces keep new lines so
123:56 - this is the difference between
123:58 - the
123:59 - closing angled bracket and using a pipe
124:02 - okay
124:03 - so you know when we have a pipe it says
124:05 - keep new lines so every new line that
124:07 - you use will stay there replace new
124:10 - lines with spaces meaning that it'll be
124:11 - treated as one block of text so let's go
124:14 - take a look and it looks like our
124:16 - environment is ready i'm going to go
124:17 - ahead and open up a new terminal as per
124:20 - usual and we're going to run the get pod
124:23 - knit command to initialize a new project
124:26 - so
124:27 - um there of course are a few ways we can
124:29 - do this so the first is the fact that we
124:31 - can just have and we're going to keep
124:33 - playing with echoes because echoes are
124:34 - easy
124:35 - but we could say like hello and then
124:38 - ampersand ampersand world
124:41 - so this is a linux thing the double
124:43 - ampersand and what it means is it says
124:45 - oh nice it actually shows up here so get
124:47 - puck config a shell came in oh you know
124:49 - what it's actually auto completing this
124:51 - but double ampersand is a way of
124:54 - um
124:55 - running more than one command at a time
124:57 - so it'll say okay i'm going to run this
124:59 - command and as long as it doesn't fail
125:00 - as long as it doesn't exit go run the
125:03 - next command
125:04 - okay so that would be that one there
125:08 - and there's also uh the case of um and
125:11 - you know what i'm going to do these all
125:12 - under commands because i just want to
125:13 - make sure this runs every single time
125:15 - what i'm going to do is put command here
125:18 - for this one i'm going to do another one
125:20 - here where we're going to try to do a
125:21 - semicolon so this uh this is something
125:24 - you can do in again this is not specific
125:26 - to git pod or yaml but like when you're
125:28 - writing bash scripts
125:30 - you just send a semicolon to say this is
125:32 - a the next command we want to run
125:35 - all right
125:36 - so we have this one where it should run
125:38 - both
125:39 - this one where it should run both and
125:41 - the next one should succeed and then
125:43 - here we will purposely introduce an
125:45 - error so maybe if i just do
125:47 - x like that which is not a real command
125:50 - it should fail and not run the second
125:51 - one
125:52 - all right and so this is multi
125:55 - um these are multiple examples let's do
125:57 - one with a script so maybe we can load a
125:59 - script so we'll just say um
126:03 - hello world
126:05 - okay so this might be another way that
126:06 - we could do uh mult multi-line kind of
126:09 - scripting here so we'll just say hello
126:11 - world
126:13 - as a file we'll say sh for a bash script
126:16 - and then we'll do echo hello
126:20 - world i don't know that will print out
126:21 - to the screen but we'll see what happens
126:23 - there i'm sure it will still work
126:26 - and we'll just say sh we'll have to make
126:28 - that executable down below so i'm going
126:30 - to type in chamod u plus x
126:33 - hello world if you're wondering like
126:35 - what does that mean it means make this
126:36 - executable so that we can run it like
126:38 - that
126:39 - and so
126:40 - we have semicolon double ampersand
126:43 - double ampersand with a a purposeful
126:45 - error and then we also can do
126:48 - uh this way so that is the um angled
126:51 - bracket and so we are going to want to
126:56 - uh do hello here
126:58 - and then ampersand ampersand world
127:00 - because if we don't do that
127:03 - if we don't put the double ampersand
127:04 - when we're doing the double angle
127:05 - bracket what's going to happen is this
127:07 - is going to translate
127:09 - into this right and that would cause an
127:11 - error because it would think there's no
127:13 - you can't have a second and third
127:15 - argument think it's called echo and
127:16 - these are arguments to echo that
127:18 - wouldn't work so that's where we need a
127:19 - double ampersand whereas if we do this
127:23 - okay
127:24 - we can do that and this is going to be
127:25 - the equivalent of basically doing this
127:27 - up here where it's like this is a line
127:29 - and that is a line of execution
127:31 - so i think this is everything that
127:33 - should work i'm not sure what kind of
127:35 - problems we're going to run into but i'm
127:36 - going to just close out the rest here
127:38 - and we'll go ahead and commit this to
127:40 - our repository here and the great thing
127:43 - is because these are all commands
127:45 - uh we can start this over and maybe it
127:47 - might be smart to give these names
127:49 - so i'm just going to go here and say
127:50 - name this will say semi semicolon
127:54 - okay we'll go to the next one here and
127:56 - this one's going to be
127:59 - double ampersand
128:02 - we'll go to the next one here
128:05 - and we'll say
128:06 - double maybe just double amp because
128:08 - it's getting too long here double amp
128:10 - fail
128:11 - i wonder if we could just do this
128:13 - you know
128:14 - i don't see why i can't be named that
128:15 - that might just be easier
128:17 - okay and this would just be double
128:18 - ampersand and then we'll do semicolon
128:20 - here and then this one will be um
128:25 - bash script
128:29 - and you know i didn't do a shebang here
128:31 - i don't know if that's going to cause a
128:32 - problem i'm going to put a shebang in
128:33 - there just in case i'm going to say
128:34 - where is um
128:37 - sh or bash
128:38 - okay a shebang just means tell the
128:40 - script to run a particular way a shebang
128:43 - is the um
128:45 - is this thing so say run in the context
128:47 - of that so i'm just doing that just in
128:48 - case and so we will name it that
128:55 - and then here we will do this multi-line
129:00 - so you can say multi-line multi-command
129:02 - is what we're learning here and so these
129:03 - are all the variants that should be
129:05 - possible here
129:07 - and i'm hoping they all work the first
129:09 - time around here because that would be
129:10 - really nice but this is our file right
129:12 - so these are all the different kinds of
129:13 - cases you could do
129:15 - and so we'll go back over here and we're
129:17 - just going to go ahead and whoops add
129:19 - these two files so we'll add that
129:22 - and i want to stage that as well we'll
129:24 - just say
129:25 - commit
129:26 - multiline
129:31 - we'll go ahead and add that there
129:33 - all right and so now that's all
129:35 - committed and in order for this to
129:38 - execute we can terminate this
129:40 - environment or just stop and start it
129:42 - since we know how it works so we know
129:43 - command will run again so that's what
129:45 - i'm going to do i'm going to
129:46 - stop this environment
129:49 - and then we'll let that shut down and
129:50 - then we'll start it back up and
129:51 - hopefully they all just work first try
129:54 - i'm writing quite a bit so i'm not sure
129:55 - if i'm making any mistakes there
130:07 - okay so we're ready to go here it says i
130:09 - didn't uh commit a change maybe i didn't
130:11 - so if it doesn't run that's fine but i
130:14 - think that it will because the file is
130:15 - in there
130:33 - okay so looking here it looks like it
130:36 - didn't execute those so i guess the
130:37 - problem here is we're really going to
130:39 - just have to um make sure these are
130:41 - committed so let's say git push here
130:43 - okay and then we will stop it again
130:51 - see i'm surprised that i would have
130:52 - thought that it would have executed
130:55 - even if it wasn't committed if it was
130:57 - just lingering changes but we'll see
130:59 - here we'll open it again we'll see if
131:00 - that's the case
131:09 - all right and
131:11 - did it work
131:14 - so it didn't do
131:16 - anything new
131:18 - so i'm kind of surprised
131:21 - i'm just double checking to see i don't
131:22 - have any syntax mistakes so i'm really
131:25 - surprised that stopping start didn't
131:26 - work in this case
131:28 - maybe it's because none of these uh
131:29 - these are initialized so probably if we
131:32 - had
131:33 - completely terminated and started it
131:35 - again and maybe start and stop it would
131:37 - do it again so i think that's what i'm
131:39 - going to do i'm going to just
131:41 - um because the thing is is that when you
131:44 - stop and start it's it's redoing the
131:46 - state right so if those if those
131:47 - terminals don't exist it probably
131:49 - doesn't have anything to launch into i
131:51 - think that's just an edge case that um
131:52 - until now because i'm trying this now i
131:55 - didn't realize which is totally fine so
131:56 - we'll go ahead and close this tab we're
131:58 - going to just refresh here as a sanity
132:00 - check to make sure that stuff is in
132:01 - there we're going to go launch get pod
132:03 - again okay
132:10 - and this is the reason why it's not
132:12 - working unparsable get pod configuration
132:14 - yaml cannot be read block mapping entry
132:16 - a multi-line key may not be an implicit
132:19 - key so the problem is
132:22 - the problem is i have invalid yaml so if
132:25 - that's the case i need to have a way of
132:27 - validating my yaml so maybe we'll say
132:29 - like validate yaml
132:32 - vs code maybe there's like a plug-in
132:38 - so there's this um i kind of feel like
132:41 - this would already have it but let's go
132:42 - take a look and see if we can find it
132:44 - here
132:45 - like do we already have yaml installed
132:47 - because this is already installed see
132:48 - it's already installed
132:50 - and so i'm not sure
132:55 - there probably is like a validate right
132:58 - enable or disable this feature validate
133:00 - it seems like it should be validating it
133:04 - and
133:05 - i already forgot what the error was
133:09 - so let me just take a look here
133:12 - i wonder if it's just the indentation
133:14 - here
133:17 - okay i'm just going to carefully look at
133:18 - this here
133:20 - for this we don't really need the name
133:21 - well i probably have the names i don't
133:22 - know these are messing it up so
133:26 - sometimes using single sometimes using
133:27 - doubles
133:31 - i'm just going to do this here
133:36 - and so i think it was that indentation
133:37 - so what we'll do is we'll recommit this
133:39 - file here
133:42 - all right so
133:43 - fix get pod gamble file and that could
133:46 - have been the reason why it wasn't doing
133:47 - that but i still think that um those
133:49 - terminals aren't going to launch unless
133:50 - you um
133:52 - already have stuff open there so while
133:53 - that's going i'm just going to read here
133:54 - a little bit okay
133:56 - so here's validation detect whether the
133:57 - entire file valid is is is valid
134:01 - so like see here they have like hotkeys
134:03 - so that you know if you're making a
134:05 - mistake but like
134:07 - there's nothing there that was telling
134:08 - me that it was valid or not so
134:10 - yeah there's something going on there
134:12 - but uh oh maybe we'll just um we got to
134:15 - stop this workspace so what we'll do
134:17 - now this is saved we'll go back here
134:19 - we'll give this a refresh we'll make
134:21 - sure that our git pod yaml has been
134:22 - updated with the indentation we're going
134:24 - to launch this again we're going to see
134:25 - what error we get if we get any error at
134:28 - all
134:36 - so looks like we don't have any trouble
134:37 - this time so great so let's go take a
134:39 - look and see what our results are
134:43 - so the first one is our first task here
134:45 - where we're using the semicolon
134:47 - and it is saying here um hello world so
134:51 - we can use a semicolon works just as we
134:53 - expected it to then we have the double
134:55 - ampersand so again double ampersand
134:57 - means if this one fails the rest will
134:58 - not complete so that worked as well then
135:01 - we go here we'll notice that it failed
135:03 - on the first one and then it didn't
135:05 - continue on to the second one so that is
135:07 - really good that's what we expect
135:10 - and i guess like if we did the semicolon
135:11 - one i really didn't show that there i
135:13 - should have done this
135:15 - like fail
135:17 - and maybe we'll rerun it just so we can
135:19 - view that afterwards then we have the
135:20 - bash script so it's using the bash
135:22 - script that is over here so that is
135:24 - another way we could do it
135:25 - then we have the multi-line this way so
135:27 - that was valid so that worked out fine
135:30 - and then we have uh this one here so i
135:32 - just want to show you that if you take
135:33 - these two out this is going to fail
135:36 - okay so i'll just write fail and maybe
135:38 - we can just add it in as an extra one
135:39 - whoops
135:41 - so what we could do is go here
135:45 - i just want to show you if you do this
135:47 - one this one will definitely fail okay
135:51 - if we take that out like that
135:59 - it should and we'll go back up to our
136:01 - semicolon one and this one should fail
136:03 - as well so
136:06 - we will give that a go one more time and
136:09 - um
136:10 - i'm going to terminate just just in case
136:12 - so we'll just say
136:14 - update gitpod yaml file with more
136:16 - examples
136:18 - of multi-line
136:21 - i don't care if it's over the length
136:22 - it's fine for me we'll sync those
136:24 - changes very important to sync
136:27 - we'll give it a moment to sync great
136:29 - we're going to close it again and we'll
136:31 - just look at those edge cases there just
136:32 - one more time okay
136:44 - and so it's just launching up here
136:47 - all right so we have a few edge cases so
136:49 - let's go this one
136:51 - so this one said hello x command not
136:53 - found but notice that it executed world
136:55 - so it didn't stop on the first one so
136:56 - you go here look it stops on the first
136:58 - one but with a semicolon it won't so
137:00 - that's a consideration for you and then
137:02 - we did the multi bash one and it we have
137:05 - hello echo world so it didn't um
137:08 - it didn't crash but it treated like this
137:11 - was the entire string so you can kind of
137:12 - see you kind of got a wonky result so
137:15 - hopefully that shows you how multi-line
137:16 - works and there's obviously a lot of uh
137:19 - options for you there and we'll just
137:21 - close that off and we're done multi-line
137:23 - [Music]
137:28 - so let's talk about awaiting tasks
137:30 - within git pod configuration files so
137:32 - get tasks all executed in parallel so by
137:34 - default there is no guarantee
137:37 - of the order of execution of the overall
137:39 - tasks okay but there are a couple of
137:42 - ways we can force a guarantee of the
137:45 - execution order and the first way is
137:48 - when we want to wait for command and so
137:51 - get pod has a cli and they have two
137:54 - commands called sync await and sync done
137:56 - so here we have an example
137:59 - again it's a ruby on rails app um and so
138:02 - if we look through here let's just try
138:03 - to find where we see synco wait so
138:05 - we have this rails app that is starting
138:08 - up and then we have webpack and it says
138:10 - sync await for bundle okay
138:13 - so it's waiting for this command up here
138:15 - to finish because if bundle install is
138:17 - not done we should not run
138:19 - um this command here right and the same
138:22 - thing for redis and for sidekick until
138:24 - this command up here runs should it
138:27 - proceed
138:28 - but the way it knows that it's done is
138:30 - that you run this
138:32 - sync done over here okay so
138:35 - just erasing all that stuff because i
138:36 - know it gets kind of messy but the idea
138:38 - is the idea is going to stop and it's
138:41 - not going to proceed until this has been
138:43 - triggered okay and that goes for all the
138:45 - tasks and so that's a way that we can
138:47 - force
138:48 - the order of these tests now there's
138:51 - another way and this is where we want to
138:52 - wait for a port so this is where we use
138:54 - a weight port and it doesn't have like a
138:58 - a weight or like done port or thing like
139:00 - that but the idea is that let's say we
139:03 - have end-to-end testing that we want to
139:04 - implement and we want to run those tests
139:06 - but it has to have a running server on
139:08 - port 3000 so the idea is that it's not
139:11 - going to run npm run tests until there's
139:14 - something running on that port and so
139:16 - when you start up npm run dev it's going
139:19 - to ask you hey do you want to
139:22 - open this port you're going to open that
139:23 - port it's going to see that it's running
139:25 - and then it's going to run your tests
139:27 - and so those are our two options there
139:28 - okay
139:30 - [Music]
139:34 - hey this is andrew brown and in this
139:35 - video we are going to take a look at um
139:39 - uh things where we can await for things
139:41 - okay so what we'll do is create a new a
139:44 - repository i'm going to call this one
139:45 - get pod await since we can await a port
139:48 - or wait a command and so down below we
139:51 - will go to private and we will choose
139:52 - your readme and we'll create this
139:54 - repository
139:55 - and we'll go ahead and launch this uh
139:58 - workspace we might pull up the
140:00 - documentation here so like a waiting
140:01 - command
140:02 - get pod here
140:04 - and so if we go over here
140:06 - i'm not sure if it'll show up under here
140:08 - because that's where these commands show
140:09 - up like a white port and things like
140:10 - that
140:11 - so here we have gp await port 3000
140:13 - things like that
140:15 - so
140:16 - i'm not sure if they show an example
140:17 - here
140:18 - but we definitely saw one earlier when
140:20 - we were looking at form so if we just
140:22 - want to go back to form for a second
140:25 - which um had an example of a command i
140:28 - believe or maybe it was a port
140:31 - i don't think it had command a
140:33 - which is not a big deal um i have an
140:35 - example within the the course here so we
140:37 - can down below this has a gp await port
140:40 - so not necessarily the other one but
140:42 - let's go over here and so something we
140:45 - can do we'll just go and open up our
140:47 - terminal as per usual we're going to
140:49 - type in gpinet to initialize a new task
140:52 - so we don't make any mistakes here
140:54 - and so
140:56 - what i'm thinking here is
140:58 - let's do a weight command and
141:02 - what is it called a weight
141:07 - uh sync await
141:08 - and sync done that's what we want to do
141:11 - apparently they have a real world
141:12 - example so let's take a look here
141:13 - actually i want to do a ruby on rails
141:15 - application
141:16 - so here's an example where they have a
141:18 - ruby on rails application and they're
141:20 - kind of waiting for that those kind of
141:21 - steps i don't know if they have like a
141:23 - quick start for this um probably would
141:24 - have been good if there was like a get
141:26 - pod example here but uh what we'll do is
141:28 - we'll just kind of make up our own
141:29 - example from this all right so what we
141:31 - want to do and i think ruby's installed
141:33 - here if i type in ruby v it is great so
141:36 - with ruby you have a thing called gem
141:38 - files
141:39 - okay and that's just a way of doing uh
141:41 - versioning
141:43 - and gem files are done via bundler so
141:45 - bundle generate gem file
141:48 - i'm not sure what the command is i
141:50 - usually just write it by hand and copy
141:51 - out code but i wanted just this kind of
141:53 - information
141:54 - so that's all actually all i wanted for
141:56 - the file i thought maybe like a
141:58 - generation command allow
142:00 - and so here what we can do is install
142:02 - some gems
142:03 - uh very popular gem would be something
142:05 - like pry that's for like debugging
142:07 - we don't necessarily need to use it for
142:08 - anything it's just the fact that it's
142:09 - going to be here we're also going to
142:11 - need a now we don't need a docket ignore
142:13 - file it's totally fine so what i'm going
142:15 - to do is do a bundle install here oops
142:19 - bundle install and that's going to
142:21 - install our dependencies here then we're
142:23 - going to get a gem file so we can commit
142:25 - that to our repository
142:27 - but the idea is that
142:28 - i want something
142:31 - to wait on the gem file first
142:34 - so
142:36 - and i wish i kind of had an idea of some
142:38 - kind of
142:39 - gem that would have been useful for this
142:41 - case but
142:43 - actually you know what would be useful
142:44 - it would be sinatra so instead of doing
142:46 - pry i think we'll do sinatra
142:49 - sinatra sinatra is a micro framework for
142:52 - web applications for ruby sinatra
142:55 - it's a really great way of learning how
142:57 - to work with web servers ruby not the
142:59 - singer but the singer is fine too
143:01 - and we'll go here and so this is the
143:03 - most simplest example of a sinatra
143:06 - application so if we go over here
143:09 - and we
143:10 - paste in our sinatra application into a
143:12 - new file here so just say
143:16 - server.rb we'll just paste on that code
143:20 - and so we'll need to put sinatra in here
143:22 - instead we don't need the pry and
143:24 - there's some way to start it up on a
143:25 - different port
143:27 - i haven't done this in a while so i'm
143:28 - not sure
143:30 - um
143:30 - [Music]
143:31 - documentation i thought this would have
143:33 - been like
143:35 - different port different port
143:38 - port support sports how do we change the
143:40 - port
143:43 - okay
143:44 - sinatra ruby port change
143:50 - okay so down below here set port so you
143:52 - can't you just set the port like that
143:54 - note that this is another way to bind to
143:55 - socket so configuration is what we're
143:57 - looking for
143:59 - so
144:01 - here it is okay so here we can change
144:03 - the port
144:06 - and i'm going to set this port to
144:07 - [Music]
144:12 - stop pasting right now so we'll say set
144:15 - port 80
144:17 - 80.
144:20 - just going to double check to make sure
144:22 - that is correct
144:24 - the syntax there's a comma in between
144:30 - okay and so that is the port there
144:34 - and we have our gem installed which is
144:36 - great and so i'm gonna actually have to
144:38 - do a bundle install again because i
144:39 - actually got rid of pry
144:42 - we'll give that a moment there to
144:43 - install
144:44 - and so what i want to do with this um
144:47 - task here
144:48 - is
144:49 - i want to have one i mean like you
144:52 - wouldn't do this generally because you
144:54 - could do it all one command but i'm
144:55 - going to do one where i install the
144:56 - dependencies
144:58 - so we'll say bundle here
145:01 - and then this one will be like
145:02 - [Music]
145:05 - server run
145:11 - all right and so here what i'm going to
145:13 - do
145:15 - is init
145:16 - and i'm going to just say bundle install
145:21 - and then for this one down below
145:24 - instead of a net we're going to just do
145:26 - command
145:31 - and here we want to run sinatra so it
145:33 - has to run in the context of bundle exec
145:37 - because that's how it knows it's going
145:38 - to run
145:40 - that there and we'll do server.rb
145:43 - and so this one we want this to be open
145:45 - on port 8080
145:48 - all right
145:50 - and
145:51 - that looks fine i think i might want it
145:54 - to
145:55 - also open as well so
145:58 - let's go over here we saw this in forum
146:00 - earlier which i thought was really cool
146:01 - i didn't know that you could use it this
146:03 - way so i kind of want to give that a go
146:05 - here
146:08 - and we'll just say command
146:12 - and so the idea here is i want this to
146:17 - open this on port 8080
146:22 - um
146:25 - i'm just trying to think of there's
146:26 - anything else i need to do
146:28 - because this isn't going to this server
146:29 - is not going to go to that url so i
146:31 - might have
146:32 - to also do
146:35 - this
146:37 - which is i need like a forward slash
146:39 - here i'm not sure how would i how i
146:41 - would join that
146:45 - so i'm not sure let me see here i what
146:47 - if i could do this
146:49 - what's this do
146:51 - okay but can i do
146:53 - this
146:56 - i'm not sure if we can just do that like
146:58 - that
147:07 - so just to make our lives a little bit
147:09 - easier what i'm going to do is go over
147:10 - to the server here and just change it to
147:14 - frank says here
147:16 - because that'll just be a lot easier for
147:18 - our example
147:19 - and um so we have the port open it's in
147:22 - preview this one's going to launch it so
147:23 - just open it up
147:30 - open preview here
147:33 - and i'll just put this on the same line
147:34 - here we don't have any issues there and
147:36 - so i think this is what we want
147:38 - um but the problem is is that there's no
147:40 - guarantee that the bundle install is
147:41 - going to happen
147:42 - before the server runs and so let's just
147:45 - go even though i know this is going to
147:46 - break i want to go ahead and add all
147:48 - these files here
147:50 - okay
147:52 - just say like init file
147:56 - and i'm just going to double check to
147:57 - make sure that actually serves something
147:58 - this is going to serve text which is
148:00 - fine and so what we'll do is commit all
148:02 - that
148:03 - sync the changes
148:20 - and while we're waiting on that what
148:21 - we'll do is go ahead and close this tab
148:24 - here and we'll go ahead and relaunch and
148:26 - we'll see what happens
148:42 - all right so here we are and so let's
148:44 - just see what has happened here
148:46 - um so we go to bundle install it did the
148:48 - bundle install which worked out great
148:50 - and notice here it says bundle install
148:52 - to install is missing gems so could not
148:55 - find sinatra 2.10 stuff like that so it
148:58 - it's possible that this ran
149:00 - after this so this might have executed
149:03 - first because this is a very lightweight
149:05 - would take two seconds to run and this
149:06 - would take a little bit more time to
149:07 - install so i just wonder if we were to
149:09 - go back and execute this command would
149:11 - it work so it is working so that is
149:13 - where this sync awaits going to be very
149:15 - useful for us this didn't open up for us
149:17 - here unable to connect to the vs code
149:19 - server error in the request
149:21 - i think this is also because the port
149:22 - wasn't ready
149:24 - all right so what we're going to do here
149:26 - is we are going to go back to our gitpod
149:30 - file here
149:31 - and we're going to use this sync await
149:32 - thing
149:34 - so here um
149:37 - and we probably use port as well but um
149:40 - it's gp sync await
149:43 - so what we'll do is say gpsync await
149:48 - and for this we want this to wait for
149:50 - the bundle so i'll go here put this on a
149:52 - new line
149:56 - and we'll paste that in on there so that
149:58 - will just cause it to block
150:02 - and the way we decide that it is done is
150:04 - we would go up here to the init
150:09 - oh by the way we need to oops
150:11 - i have i put the caps key on by accident
150:14 - um
150:15 - but we will need to make this multi-line
150:17 - and then we'll have sync
150:19 - done and we'll just say bundle
150:22 - or maybe like bundle
150:24 - this would be bundle
150:27 - to be specific we should say bundle
150:28 - install so it's just waiting for this to
150:31 - finish first before it does that and so
150:33 - this should kind of resolve our issue at
150:35 - least one of our issues so we'll go back
150:37 - here we'll add this here assuming i
150:39 - wrote this all right we don't know until
150:40 - we do it so
150:41 - add sync
150:43 - await and sync done
150:46 - and we'll go ahead and save that there
150:49 - we'll go back over here
150:51 - and
150:52 - um
150:53 - we will sync those changes we'll say
150:55 - okay
151:00 - what i will do here
151:02 - now that i've synced the changes we'll
151:04 - just go ahead and close that tab and
151:05 - reopen and see what happens there
151:08 - because we do have an init there so if
151:09 - we were to stop and start we wouldn't
151:11 - get exactly what we want
151:21 - all right so it's starting back up here
151:23 - so let's go see i actually all worked
151:25 - which is great if we go over here to
151:26 - bundle all that worked and then that
151:28 - executed and this happened to work
151:31 - okay but if we keep on running this
151:32 - there's probably a chance that this
151:34 - might not
151:35 - work because
151:36 - the port isn't ready
151:39 - so i was kind of hoping that this would
151:40 - fail and i think the only way we could
151:43 - make this fail probably is if we just
151:45 - put it in a sleep here
151:47 - so what i'll do and i think sleep is for
151:50 - every single second is i'm going to just
151:51 - write sleep
151:53 - and put 10 seconds okay and so that
151:56 - should sleep long enough that we should
151:57 - see this fail
151:59 - so we'll go back here we'll add it so
152:01 - sleep a while
152:04 - and i wanted to say like hey this port
152:05 - isn't ready what what are you doing you
152:07 - know
152:09 - so go back here
152:11 - and then from there we'll go back close
152:12 - that tab we'll open that up again
152:17 - and we'll give it a moment and we'll
152:18 - spin up here in a bit
152:29 - great so
152:31 - now that we are here um let's go take a
152:33 - look and see what's happened and it
152:35 - still
152:36 - worked so it's it it's still executing
152:40 - well actually down below here it says
152:41 - unable to connect to vs code server so
152:43 - i'm wondering if it's because we have um
152:47 - uh this option here
152:50 - right so
152:52 - it's opening
152:54 - because when the port became available
152:56 - it opened
152:57 - so i'm thinking i'm just going to go
152:59 - ahead and remove this
153:03 - let me take out the on open because this
153:04 - would notify by default
153:07 - so what if we put this to ignore say
153:09 - ignore here
153:11 - again i just want to see that this
153:12 - doesn't open and then we have this here
153:14 - and then if if we take if we put in the
153:16 - port await it will work properly
153:18 - so say uh one more time
153:23 - i mean clearly this is airing out so
153:25 - that's no good but it's still open and
153:27 - that just because git pod is is smart
153:30 - so we'll go there and we'll go ahead and
153:31 - close that we're gonna reopen our git
153:33 - pod here
153:48 - and uh so that errors out which is
153:50 - totally fine that's what we kind of
153:52 - expect to happen and now it's not
153:53 - opening up the preview so now i think we
153:55 - have our opportunity
153:57 - to uh put in the um that other command
154:00 - which is the port await
154:02 - so what i'm going to do is go grab this
154:04 - command here
154:06 - and we're going to go down below
154:08 - and we're going to expand our command
154:11 - here whoops
154:16 - and so my expectation is that it's not
154:18 - going to run this command until the port
154:20 - is ready see i don't know if we need
154:21 - like a double ampersand but i'm pretty
154:23 - sure this waits until the port is open
154:25 - so i'm going to say port 8080 here
154:28 - and what we'll do here is go back
154:31 - and we'll add this here we'll say
154:33 - update get pod yaml
154:36 - and we'll save that and we'll save those
154:38 - changes
154:42 - and um what we'll do is we'll go close
154:45 - this tab again and we'll launch it one
154:47 - more time
155:04 - great and so what we're going to see
155:05 - here
155:06 - is this is a waiting till the port is
155:08 - open remember this is sleeping right and
155:10 - look now it works so we made a great
155:11 - example where we're using both a weight
155:13 - port and a white sink so there you go so
155:15 - that's that's what you'd use with those
155:17 - things and uh we're all done here so we
155:19 - can go ahead and just close your tabs
155:20 - and that's it
155:24 - [Music]
155:26 - so to understand git pod ports we need
155:28 - to take a look at computer networking
155:30 - ports
155:31 - so ports and and that's the short way of
155:33 - saying just ports acts as a separate
155:35 - channel for communication protocol so
155:37 - you have more than one program using the
155:39 - same protocol and tcp the protocol we
155:42 - use for websites and web server has 65
155:45 - 535 ports and some ports are designated
155:48 - for specific types of communication and
155:51 - others are undesignated where we can use
155:52 - them for whatever we want so for
155:54 - designated uh ports ones we absolutely
155:57 - should know is port 80 so hcp
156:00 - 443 for https 22 for ssh and the way
156:05 - these are used is the port number is
156:07 - will follow an ip address or domain name
156:10 - separated by colon so here's an ip
156:12 - address and we have port 8080 and so we
156:15 - have the ip address here and the port
156:17 - number there in a web browser you can
156:19 - write the port number in the address but
156:21 - generally you won't see it for websites
156:23 - because it just shows up by default so
156:26 - if you're doing http colon
156:28 - slash it already knows that it's port 80
156:30 - and if you're doing https colon slash it
156:32 - already knows that it's port 443 so
156:34 - that's why you don't see them there
156:36 - usually so there are many undesignated
156:39 - ports which can be used to view or serve
156:41 - web applications for the purpose of
156:43 - development uh and the popular
156:45 - development pro
156:46 - ports being 3000 3001 80 80 8000
156:51 - 8081 and so 3000 and 3001 is very
156:56 - popular to break ruby on rails why is
156:58 - there 3 000 ones just because like if
156:59 - you're using 3000 you need a second
157:00 - server you have that that's why you see
157:02 - it with 8081 or 8001 as well 80 80 8000
157:06 - are very popular in the uh
157:08 - with javascript uh web servers but these
157:11 - are the ones you normally see and
157:13 - probably what you should use because
157:14 - there's a lot of synergies with a lot of
157:16 - technology that are already defaulting
157:17 - to these ones
157:18 - so when we're talking about ports in
157:21 - common language it's common to say
157:23 - things like i'm listening on port
157:26 - you know or i'm serving on port
157:29 - what have you right so just understand
157:31 - when you're saying listening or serve
157:32 - it's pretty much the same thing
157:34 - um
157:35 - and same thing with like opening port or
157:36 - exposing port means the same thing just
157:38 - so you understand uh you know those
157:40 - there okay
157:41 - [Music]
157:45 - so now that we know what computer
157:47 - networking ports are let's take a look
157:48 - at git pod ports so in order to view
157:50 - websites or web applications in a web
157:52 - browser running a workspace tcp ports
157:55 - need to be accessible and gitpod allows
157:57 - you to open ports so you can set ports
158:00 - in your dot git pod yaml file your git
158:03 - pod configuration file and so there we
158:05 - are opening up port 8080 in that example
158:08 - uh and so then once your workspace
158:10 - launches you can go to the remote
158:11 - explorer and you remember what the
158:12 - remote explorer is because i definitely
158:14 - will ask that as an exam question but
158:16 - once um the port is uh uh open then you
158:19 - can go over the remote explorer you can
158:21 - see that there's a port there so here we
158:22 - see port 3000 it's open it's private
158:25 - there's like a button to open in the
158:26 - browser or inline in the code editor
158:30 - but if you don't define ports ahead of
158:32 - time and that's totally fine if you
158:33 - don't if you start up a service on a new
158:36 - undefined port gitpod will prompt you if
158:38 - you want to open the port and so you
158:41 - just press the button and we'll open the
158:42 - port and even after that it'll probably
158:44 - ask if you want to launch it in the
158:46 - browser um but yeah that's all there
158:48 - really is to it gitpod cannot use ports
158:51 - that are lower than uh 1024 so common
158:55 - ports like port 80 443 ssh you cannot
158:58 - open those ports and really you
159:00 - shouldn't be because this is a developer
159:02 - environment and port 80 443 or for
159:04 - serving production
159:06 - websites or web servers and i just want
159:09 - to reiterate you don't have to define
159:10 - ports ahead of time you can open new
159:12 - ports on the fly okay
159:14 - [Music]
159:18 - so let's take a look at some of the
159:20 - configuration options when we are
159:22 - defining ports so we can do a port range
159:24 - so three thousand two eight nine nine is
159:27 - nine this example here of course we can
159:29 - have a single value as we saw in the
159:31 - previous video uh we have opening
159:33 - behavior so this is where we define on
159:35 - open it has four possible values so
159:38 - notify which is the default and when it
159:40 - says show the notification it's that
159:41 - notification that says hey how how do
159:43 - you want to handle this port do you want
159:45 - to
159:46 - uh open it in a preview do you want to
159:49 - expose the port like what do you want to
159:50 - do with it so we have the open preview
159:52 - option so open the preview on the right
159:54 - open browser so open in a browser tab or
159:57 - ignore so don't do anything
159:59 - then you have port visibility and so by
160:01 - default it's going to be set as private
160:03 - and so we have private which is the
160:04 - default this only allows users with
160:06 - workspace access to access the port the
160:09 - reason i highlighted that was actually
160:10 - for my own notes because i don't know
160:12 - exactly what that means but we'll find
160:14 - out in the follow along because i want
160:15 - to know like does it mean that only i
160:18 - can use it or if we like if we have a
160:21 - team and somebody's within my team only
160:24 - team members can access it so that's
160:25 - something we'll have to explore then
160:27 - there's public so allow any everyone
160:29 - with the port url to access the port so
160:31 - there's an example of visibility so
160:33 - there you go
160:34 - [Music]
160:39 - hey this is andrew brown and we are
160:40 - taking a look at port forwarding so what
160:42 - is port forwarding or also known as port
160:44 - mapping is an application of network
160:46 - address translation a nat that redirects
160:48 - a communication request from one address
160:50 - and port number combination to another
160:53 - and that's basically the wikipedia
160:55 - description but uh to simply put
160:58 - port forwarding sends traffic from one
161:00 - port to another essentially acting as a
161:02 - port alias so using the getpodcli
161:05 - command forward port you can send
161:07 - traffic from one port to another so
161:09 - here's an example of me uh forwarding
161:11 - the port at 8080 to 80 oh sorry i said
161:15 - forwarding 80 81 to 8080 okay and so
161:19 - some programs will start on a hardcore
161:22 - coded port and will not let you change
161:24 - the port so port forwarding is a way to
161:27 - work around this issue so that's the
161:29 - major advantage of port forwarding
161:31 - [Music]
161:35 - hey this is andrew brown and welcome to
161:37 - another follow along this time we're
161:38 - going to be looking at all about git pod
161:40 - ports of course we did cover a weight
161:43 - port but we might just cover it again in
161:45 - here just because we are going more
161:46 - thorough into the
161:48 - port section of the course so i'll go
161:49 - ahead and type in git pod ports i'm
161:51 - going to add a readme it can be private
161:53 - and what we'll do is go ahead and type
161:55 - in git pod ports here
161:57 - and just pull up the documentation just
161:59 - in case we need it so we can set ports
162:01 - within a range we can set a single port
162:03 - uh things like that and then we have a
162:05 - bunch of different kinds of um
162:07 - things that can happen like the modes
162:10 - that should happen so what we're going
162:12 - to do here is launch this new git pod
162:16 - okay
162:18 - and we'll just give it a moment here but
162:19 - you know just looking over the on open
162:21 - ports you have notify so show the
162:23 - notification by default open preview
162:25 - open in the preview on the right open
162:28 - browser so open in the browser tab
162:30 - ignore don't do anything so we'll
162:32 - explore
162:34 - because this is part of ports and so i
162:36 - guess we can cover all these options
162:37 - here for fun
162:39 - and so as always we'll go up to our
162:41 - hamburger menu we're going to go over to
162:43 - terminal new terminal and we'll go ahead
162:46 - and type in gpinit
162:48 - and from here
162:50 - we're going to need some kind of server
162:51 - so i'm going to go server.b
162:53 - and we're going to go grab sinatra again
162:55 - so we'll say sinatra ruby
163:00 - and from here
163:02 - i'm going to go grab this code right on
163:05 - the page that makes it really easy
163:08 - and we'll say allow
163:10 - and then we're going to need a gem file
163:11 - so just say gem file
163:16 - and i'm just going to say like a net gem
163:18 - file
163:20 - bundler because oh there is a bundle in
163:22 - it
163:23 - generates a gem file well let's let's do
163:25 - that because i'm getting tired of um uh
163:27 - looking up the first command here
163:29 - so we'll say um bundler init
163:34 - all right and so that's where we get
163:36 - that uh that front line that we wanted
163:37 - there
163:38 - okay and this is useful too to have the
163:40 - github thing here so
163:42 - but we'll just go here and say gem
163:44 - uh sinatra sinatra
163:48 - okay we'll do a bundle install whoops
163:51 - bundle install i like doing bi it's my
163:53 - shorthand for that and so now we have a
163:55 - very simple web server i'm going to
163:57 - modify this slightly because i want it
163:59 - to take in environment variables so i'm
164:01 - going to just go here and make a double
164:04 - quotation this is interpolation in ruby
164:07 - and so i can just do env square braces
164:09 - and we'll say message
164:14 - and we'll say says
164:20 - oops
164:22 - i'm able to say port
164:24 - so say frank says
164:27 - from port
164:32 - okay and so that way we'll be able to
164:33 - pass that along and kind of set that we
164:36 - also need to set our um port here so
164:38 - we'll say
164:39 - port colon and then we'll just do env
164:41 - for passing along a environment variable
164:45 - um we should probably make this a little
164:46 - bit more flexible just say app port
164:48 - because i don't know if there's like any
164:49 - underlying port so let's just do that
164:52 - just in case
164:54 - and from there we have a simple
164:56 - application and so that should work no
164:58 - problem and the way we can test that is
165:00 - by typing bundle exec actually before
165:02 - that we have to set our ports so we'll
165:03 - just say
165:04 - port
165:05 - 8080
165:06 - and i will just put a space here or
165:09 - maybe double ampersand
165:11 - and we'll say
165:13 - uh
165:15 - ruby server
165:18 - and so that started up on port 8080 just
165:20 - double checking here to make sure that
165:21 - it's not just the default port here
165:24 - so that's starting up on port 8081
165:27 - i don't think it's oh you know what it's
165:28 - because i'm not setting app
165:30 - port like this
165:33 - okay still not taking the right port so
165:34 - i'll take out the double ampersand
165:38 - and there we go so sometimes you got to
165:39 - play with it a little bit so that is how
165:41 - we're going to be doing that so go over
165:42 - to our git pod gamle file and we don't
165:44 - know which port we want to have open as
165:46 - of yet
165:49 - well actually we might want to set them
165:50 - all there
165:51 - um so what i'm going to do is i'm going
165:53 - to go up here and we're going to do a
165:55 - bunch of different ports
165:58 - because i want one for each of the types
166:00 - of things we can open here so we have
166:03 - notify open preview open browser ignore
166:05 - i'm going to go just grab these for here
166:07 - so we can save ourselves some time we'll
166:09 - drop those in there and from here
166:12 - we'll have port
166:14 - 8000
166:16 - port 8001 port 8002
166:20 - port 8003.
166:23 - and we'll have this on notify which is
166:25 - the defaults
166:26 - we'll have this one on preview
166:30 - open preview then we'll have this one on
166:32 - open browser
166:35 - and then we'll have this one on ignore
166:39 - okay
166:41 - so there we have all the the cases there
166:44 - and then up here we're just going to
166:45 - have our ports we'll say 8000
166:48 - and our command we do need to initialize
166:51 - this stuff
166:53 - so
166:54 - what we'll do because we need to have a
166:57 - i think that's going to do bundle
166:58 - install so up here we'll just do bundle
166:59 - install
167:03 - and we'll do an init here and we did
167:05 - learn this um
167:06 - a moment ago where we had the bundle
167:09 - install and then we
167:10 - oops bundle install and then we had our
167:14 - gp
167:16 - sync await
167:17 - and we'll just say bundle install here
167:19 - because we these are all gonna have to
167:20 - wait for that stuff to be installed for
167:22 - them to work
167:23 - and we'll take out the command here and
167:26 - then we're gonna do our app port so
167:27 - we'll say app
167:28 - port equals a thousand
167:31 - bundle exec
167:35 - rubyserver.rb
167:41 - and from here we also want to wait so
167:43 - let's say gpsync
167:46 - done
167:46 - i guess this would actually be the
167:48 - weight just so that one would be the
167:49 - done
167:50 - so we go down up here or over there
167:54 - and so that's going to be on port 8000
167:56 - this one's going to be on port 8001
168:01 - this one's going to be on port 8002
168:08 - and this one's going to be on port 8003
168:12 - all right
168:13 - so we have a bunch of different uh ports
168:15 - there so that will give us a four and
168:17 - they all are going to launch in
168:18 - different ways
168:20 - so that looks pretty good hopefully i
168:22 - didn't make any mistakes because we did
168:23 - write quite a bit here
168:26 - um but that's okay so what we'll do is
168:28 - go over here
168:30 - and we'll commit all these files
168:40 - and they look like they're all committed
168:41 - so we'll say
168:42 - set up a bunch of servers
168:46 - and we'll commit that sync the changes
168:49 - we'll say okay
168:54 - and then from there what we can do is go
168:57 - ahead
168:58 - and we have a get get uh yeah there's a
169:00 - lock file there so that's great so we'll
169:01 - close that off and we'll go ahead and
169:03 - reopen that okay
169:16 - all right so there is should be a string
169:18 - uh
169:19 - so i really wish i knew how to validate
169:21 - the yaml beforehand
169:23 - so like i don't know what vs code
169:25 - extension i need there but like maybe
169:26 - there's like yaml validate
169:29 - i can see like in this linter here maybe
169:32 - i get this nice ad on the right hand
169:34 - side so i'll reopen that up and we'll
169:35 - just see if we can spot the problem
169:39 - let's say that's like my only
169:40 - frustration it's probably there is a
169:41 - tool involved and i just don't know you
169:42 - know
169:45 - so i say copy and then i'll paste this
169:47 - in here and we will then say go
169:50 - says it's valid yaml yaml so there's
169:52 - something that
169:53 - it doesn't like
169:55 - so we'll have to just closely look at
169:57 - this here so we have a net that looks
169:59 - fine we have the command here
170:02 - that looks fine
170:09 - so i'm not sure what it doesn't like
170:14 - so we'll do a sanity check and we'll
170:15 - just kind of simplify it so i'll just um
170:18 - go here and comment this out for the
170:20 - time being
170:21 - and same with here
170:25 - okay so
170:26 - oh you know you know what it is
170:29 - it's probably um this because it starts
170:31 - with a number
170:33 - so i'm just going to do this and maybe
170:34 - that will fix our problem because i
170:36 - think it's it's like equating as a
170:38 - number as opposed to a string
170:40 - and we probably just wrap it as a string
170:41 - whoops maybe not those
170:43 - but that's probably our problem so we
170:45 - will try this again
170:46 - it's good to know
170:48 - fixed names of tasks
170:53 - we'll sync those changes
170:56 - we'll say okay
171:01 - and from there what we'll do is close
171:03 - this tab we'll go back here we'll say
171:05 - get pod
171:21 - and so we'll wait here so frank is open
171:23 - up 48 000 so this looks like it's
171:25 - working correctly let's go ahead and
171:26 - close some of those tabs so here's a
171:28 - thousand here's a thousand one two three
171:31 - and so one is opened up in here
171:34 - um but like the other ones didn't open
171:36 - up so maybe you just can't have multiple
171:38 - ones it's like one or the other but like
171:40 - i would have thought that um
171:42 - if this was set
171:44 - here open browser it would just
171:46 - automatically open up a page maybe
171:48 - that's not the case
171:50 - but if we go over to the remote explorer
171:51 - here we just kind of hover over here
171:54 - it seems like we can open it in preview
171:56 - or this kind of stuff so i'm not really
171:57 - sure why that doesn't work as we think
171:59 - it does but it's not really a big deal
172:01 - and i don't even know if we ever saw
172:02 - that open as the browser uh like that
172:04 - before so
172:05 - anyway that kind of gives you an idea
172:07 - like this one probably prompted us and
172:08 - we didn't notice as we clicked through
172:09 - there just kind of showing you how you
172:11 - could set them all let's now go switch
172:13 - this to a range so instead of doing this
172:15 - we can say port 8003
172:19 - and i'm just going to switch them all
172:20 - over to open browser i just want to see
172:22 - if they actually do open here and so
172:24 - this will allow us to do a port range
172:26 - okay so that should work no problem
172:30 - open up a port range
172:35 - we'll go ahead and commit that we'll
172:36 - sync those changes we'll say okay
172:42 - and by the way like i think down below
172:44 - here it actually shows you what ports
172:46 - are open so if you click this down below
172:48 - i know it's hard like look where my
172:49 - mouse goes all the way down here you can
172:51 - uh see the open ports but they're also
172:53 - going to be down here in the road
172:55 - explorer and you can make it public or
172:57 - private and things like that over here
172:58 - these are all private right now
173:01 - um so what i'm going to do here is just
173:03 - close this tab
173:05 - relaunch this and then we're going to
173:06 - see make sure the range ports works of
173:08 - course it's going to work malicious dude
173:09 - anyway just to make sure
173:20 - so there we go we have
173:22 - a bunch do those pores open
173:25 - which are good again browser didn't open
173:27 - so
173:28 - i don't know what the point of
173:30 - this is
173:32 - like if it doesn't open right away i
173:34 - don't understand but um or it could be
173:36 - you know what it probably is oh
173:40 - so it has been this entire time we just
173:42 - have to say always allow the pop-ups and
173:45 - redirect okay
173:47 - and so now probably if we were to
173:48 - relaunch this they would all open up so
173:50 - that's what i'm going to do i'm just
173:51 - going to do this one more time
173:56 - i'm going to make a new workspace
173:57 - because we need to run the init again
173:59 - actually probably don't we probably
174:01 - could have done a start it would have
174:02 - worked because they're all commands but
174:03 - that's fine
174:09 - and so
174:10 - okay so basically because it changes the
174:12 - girl every time it keeps on blocking at
174:14 - a
174:16 - so i think like what you'd have to do is
174:17 - probably have like a wild star in here
174:21 - so let me just take a look okay
174:25 - so i think what we could do is we could
174:28 - probably
174:30 - go up
174:32 - here and say add and then do wild card
174:37 - and then do that
174:40 - should allow us to do wild card
174:43 - maybe like this
174:52 - there we go we'll hit add
174:54 - and now i'm going to do i'm going to do
174:55 - it one more time and i think we can just
174:57 - i'm going to just kill it even though i
174:58 - probably can stop stop it uh stop and
175:00 - start it again
175:02 - and i'm just going to say new workspace
175:23 - and so now they all open so that's
175:25 - probably a good thing that we did there
175:26 - for chrome and i guess i just never
175:28 - noticed that and that kind of makes
175:29 - sense now
175:30 - but anyway so that is port ranges
175:33 - um
175:35 - you know there's a few other things we
175:36 - probably can do let's just take a look
175:37 - here so we did that there's private and
175:40 - public i guess we never set that for the
175:42 - ports
175:44 - and so we could explore that as well i
175:46 - would probably have to go get another
175:48 - account set up here to show you
175:50 - um but maybe we can just will this down
175:52 - to two so i'm going to just take this
175:54 - down back to two
175:56 - and we can say
175:59 - private
176:01 - but i guess it'd be visibility
176:03 - visibility
176:05 - which would be private
176:08 - public
176:10 - and i'm just gonna get rid of that port
176:12 - there we'll see go back to port one and
176:14 - then this one will be private
176:17 - okay
176:19 - and so just looking at this here that
176:22 - should work no problem i'm gonna go
176:24 - ahead and commit that so public and
176:26 - private now
176:31 - we'll go ahead and save that we'll save
176:32 - those changes we'll say ok
176:37 - and from there we'll go ahead and close
176:40 - that
176:41 - and we will
176:42 - reopen the git pod and as that's going
176:45 - i'm going to have to open up another
176:46 - browser so i'm going to go get firefox
176:47 - here
176:50 - so just give a second for firefox to
176:52 - load
176:54 - okay not now
176:56 - nope just let me browse please and so
176:59 - i'm just going to go off screen and log
177:00 - into my github so i have more than one
177:02 - github account and i have more than one
177:04 - git pod here so
177:05 - that will just take me a moment you can
177:08 - see these ones opened here
177:10 - and i'm just going to sign in off screen
177:11 - here and i'll see you back here in a
177:12 - second okay
177:14 - all right okay so i have um firefox open
177:16 - here on another github get pod uh
177:19 - picopod account and so what i want to do
177:21 - is see what i can share so if our
177:24 - servers are running they are here they
177:26 - both are
177:27 - one is public and one is private and so
177:29 - the one that is public let's go see if
177:31 - we can bring it over here
177:33 - so i'm gonna go ahead and paste that on
177:35 - in here
177:37 - so port 8000 works fine
177:40 - and then we'll look at port 8001
177:44 - and so i can't see port 8001 and so one
177:46 - thing that's interesting is that
177:49 - if
177:50 - you have private they suggest here that
177:53 - um only allow users with workspace
177:56 - access to access this port
177:59 - okay and so
178:01 - what does that mean does that mean if
178:03 - somebody is in the same project or does
178:05 - that mean if you're just sharing it with
178:06 - them so that's something we're going to
178:07 - have to find out
178:09 - so what i'm going to do in my gitpod is
178:11 - i can actually create projects
178:14 - here
178:14 - and so i can create a new project
178:19 - i don't list i don't think this will
178:20 - allow for collaboration so i might have
178:21 - to go to this one so
178:23 - my new project here
178:27 - and then from here i need to add a
178:28 - member so i'll go here and give them the
178:31 - invitation link which is on the other
178:32 - side here
178:34 - and then they're going to have to go
178:35 - accept that
178:36 - so i'm over here now
178:39 - and
178:40 - did i accept it i didn't see like a step
178:42 - to accept let's go back and refresh
178:47 - it didn't
178:51 - oh looks like in my firefox i'm in this
178:53 - account
178:58 - you know what i think it's because i'm
178:58 - logged in the same account so what i'm
179:00 - going to do is just log out here
179:02 - because my github is another account
179:04 - here and so what i'll have to do is just
179:06 - kind of like launch any kind of
179:07 - repository here this will take two
179:09 - seconds
179:14 - and i'm just accepting the
179:16 - authentication there
179:21 - okay and so now i'm going to try to
179:22 - invite
179:23 - myself again
179:26 - so copy that
179:28 - and we're just going to paste that there
179:30 - and so i i just instantly clicked it and
179:32 - i was added so there's no like do you
179:34 - want to be a member
179:35 - uh which i think maybe they need that
179:37 - but that's fine it's not a big deal
179:40 - and so we'll go back over here
179:42 - and so now if i just refresh here
179:45 - i want to find out um is this one do we
179:47 - saw this pod running yes we do
179:49 - so if we go back over here on this other
179:50 - screen here
179:52 - this is i think the private one the 8001
179:54 - does that work
179:55 - no it does not and that's totally fine
179:56 - so what i want to do now is i just want
179:58 - to go ahead and create a new workspace
180:01 - or sorry project
180:03 - and we'll say
180:04 - um
180:06 - or did we already have a project here oh
180:07 - it's right here new project
180:10 - oh sorry this is a team i called it my
180:13 - new project i should have called this um
180:16 - my new team so i'm gonna go ahead and
180:18 - delete that team because that's just too
180:19 - confusing
180:21 - and we'll go here i'll say uh my team
180:28 - my
180:29 - i guess maybe these are unique names i
180:31 - didn't know that so my
180:33 - team exam proco
180:40 - okay there's no way that that name
180:41 - exists and so we'll go back over here
180:44 - i'm going to invite members and that
180:45 - kind of makes sense why they might have
180:46 - like the block lists which i didn't know
180:48 - about before
180:50 - and so now i'm a member of that again so
180:52 - we'll go here and we'll give this a
180:53 - refresh
180:54 - so i'm a member we'll go back over to
180:56 - projects we'll make a new project here i
180:58 - don't know why there's this
181:00 - e1777 but i want to choose
181:04 - any repository here the one i want
181:06 - actually it's not any repository i want
181:08 - this one here
181:09 - so let's go back over here and let's see
181:11 - why this isn't showing up search
181:12 - repositories we'll say git pod
181:16 - it's only showing
181:18 - oh you know i said on gitlab so we'll
181:20 - switch back
181:21 - and we'll say github
181:24 - and we'll authorize
181:28 - and we'll authorize all
181:31 - so now we can go and bring in the repo
181:35 - we want which is
181:37 - the ports repo
181:40 - and so if we go over to
181:42 - the workspaces here there are no
181:44 - workspaces so now what i want to do is
181:46 - just close this off and i want to launch
181:49 - this
181:50 - under here okay and if you do launch it
181:53 - from here i'm pretty sure it's going to
181:54 - open up in this workspace but just to be
181:55 - sure i'm going to go do it from here
181:59 - so yeah it is in the same workspace but
182:00 - i'm going to launch a new one anyway
182:01 - because i want to see again if i share
182:03 - it with this account that's a member can
182:06 - they see it
182:08 - all right
182:09 - so we'll go here and so 8001 is the one
182:12 - that is the private one and so we'll
182:13 - make a new tab here we're going to paste
182:15 - that on in there and so they still can't
182:17 - see it so just because you're a member
182:19 - doesn't necessarily mean you can see it
182:20 - so now what i'm thinking is that it has
182:22 - to do with like sharing your screen
182:25 - so what we'll do is we'll go over here
182:29 - and we'll go to the share
182:30 - and we'll say share
182:33 - and now we're going to copy that to our
182:35 - clipboard
182:36 - and we're going to go ahead
182:38 - and
182:39 - paste this on in here
182:42 - okay and so now i'm sharing so i have
182:45 - access over here i'm going to refresh
182:47 - see if i have access here
182:51 - i don't which is fine but what i will do
182:54 - is go to the left hand side here because
182:56 - these servers should be running
183:01 - remote explorer
183:02 - this one says it's private so i'm going
183:04 - to open this in the browser
183:09 - oh uh we'll say
183:12 - is preventing this to open we'll go to
183:14 - options here
183:17 - we'll say always allow whoops
183:20 - and so now it's showing up i don't know
183:21 - if there's like a difference between
183:22 - this one and that one if we go back over
183:24 - to
183:26 - the one here
183:30 - we open that in the browser
183:32 - we go back over here
183:35 - okay so there's a bit of like
183:36 - finickiness with this but you can see
183:39 - that you know if you are sharing you
183:41 - have access but just because they're a
183:42 - member of that workspace doesn't
183:44 - necessarily mean you can share that
183:44 - private one so that's just kind of one
183:46 - of those uh harder edge cases that i
183:48 - kind of want to show you
183:50 - so that you just know what's going on
183:52 - there
183:53 - so now that we've figured out how to do
183:55 - um
183:56 - a lot of stuff let's do port forwarding
183:58 - that'll be the last one here so imagine
184:00 - you have a project
184:01 - where you have a whoops
184:04 - that's saying this this doesn't exist
184:05 - oops
184:07 - go ahead here and go back here so
184:08 - imagine you have a project where you
184:11 - don't have control of the actual
184:14 - ip address and it's not showing me
184:15 - anything here i'm gonna have to relaunch
184:17 - this it's being funny
184:18 - okay
184:20 - and yes i want to just open the existing
184:22 - workspace here
184:25 - and so
184:28 - that's great and so um it could be a
184:31 - case i'm just going to stop the server
184:32 - here for a moment
184:35 - where you need to
184:38 - like we're not going to have this port
184:40 - so if we don't specify any port it's
184:41 - just going to start on port
184:43 - 8080 right so if i go bundle exec here
184:48 - and actually i think we should probably
184:49 - do this in our code
184:51 - i'm just going to make a third one here
184:52 - that's to a fixed port so i think it
184:54 - starts on 8080 so we'll go here
184:57 - and i'm just going to say default
184:59 - i'm not going to specify any port
185:05 - and then we'll go ahead and commit this
185:09 - and we'll see if we can use the port
185:10 - forwarding okay
185:12 - so sync those changes we'll say okay
185:15 - we'll wait a moment i'm going to close
185:17 - that tab we'll relaunch that
185:24 - i'm not sure why it's doing a pre-build
185:27 - because we don't have pre-builts turned
185:28 - on at least i don't remember turning
185:30 - them on
185:31 - but for fun we'll take a look here so if
185:32 - we go here to our project reports
185:38 - oh it is doing a pre-build okay
185:42 - so i guess as soon as we make a project
185:43 - it becomes a pre-built i for some reason
185:45 - i thought like prebuilds you can turn it
185:47 - on and off
185:48 - and maybe you can but i don't see the
185:49 - option there so
185:51 - um the only problem with that is that if
185:53 - it does a bundle install no it should
185:55 - still work so that should be fine
185:59 - yep so it's doing the bundle install
186:01 - that's the pre-build
186:07 - and here down below you can say don't
186:08 - wait for pre-build i didn't know you
186:09 - could do that but we'll just give it a
186:11 - moment
186:23 - i'll just see you back here when this is
186:24 - done launching okay
186:26 - okay so i'm just like sitting here
186:27 - waiting for this to finish but i think
186:28 - the thing is that it's already done
186:30 - because it exited out of here so i think
186:32 - if i just close that off and we go over
186:34 - here we can see the pre-build is ready
186:36 - and so now if i go and try to launch a
186:38 - workspace
186:39 - it should work so we'll go ahead and
186:42 - we'll just say new workspace and because
186:44 - that pre-build is there it should load
186:45 - really really fast
186:47 - um but yeah i guess i was just waiting
186:49 - there for no reason
186:51 - i will just give it a
186:54 - moment there we go so that was pretty
186:56 - fast um and so i'm expecting uh this one
187:00 - to go to the default one so if we go to
187:02 - this tab here
187:03 - we're gonna notice that it's going to
187:04 - start on it's starting
187:10 - oh you know what because these are all
187:12 - waiting for the bundle install eh
187:15 - so none of them are going to finish
187:19 - okay
187:20 - so just to make our lives a bit easier
187:22 - because this section is not about
187:24 - teaching you about how to do pre-builds
187:27 - so what i'm going to do is i'm just
187:28 - going to go ahead and delete this
187:29 - project if it's possible so we'll go
187:31 - back up to the top here i'm just going
187:33 - to go ahead and remove that project
187:36 - okay and so that way that'll just make
187:37 - our lives a lot easier so if i just
187:39 - launch this it won't do pre-built stuff
187:41 - and it will work as expected
187:47 - so we'll give it a moment there
187:57 - and so this one because it will do a
187:59 - bundle install here
188:02 - this should now
188:03 - work properly
188:08 - this task ran as a pre-build
188:12 - oh
188:13 - boy um
188:20 - so i guess the thing it's not a big deal
188:22 - i think the thing is that i just need to
188:23 - modify this file because now if i modify
188:25 - it i don't know if it will just like
188:26 - stop using pre-builds
188:28 - so what i'm going to do is just delete
188:30 - out these commands here
188:34 - and we'll go here and just say um remove
188:36 - weights
188:37 - because this will happen in the
188:38 - pre-build right so we'll say this
188:40 - assuming that it's going to do another
188:42 - pre-build even though i've deleted the
188:43 - project so there technically should be
188:44 - no pre-built now
188:46 - and so i might have to recreate the
188:47 - project which is totally fine we'll just
188:49 - work our way through here and see what
188:51 - happens okay
188:52 - so we'll close that and i'm going to go
188:54 - back here and just do git pod
188:57 - because i don't know what it's going to
188:58 - do
189:11 - and so we have bundle install missing
189:13 - gem so now it's not doing pre-builds
189:16 - okay
189:17 - so in this case that's where we want to
189:19 - revert this file back to what it was
189:22 - so i'm going to go back and write it in
189:23 - because i don't want to go back and
189:25 - create the project so i'm going to say
189:27 - sync
189:28 - done bundle install
189:32 - sync
189:34 - await
189:37 - sync await sync await and so this server
189:39 - is going to start up over here and
189:41 - that's fine i just want to have one for
189:42 - the port forward so
189:44 - port forward there's not not going to be
189:46 - anything going on here i'm just going to
189:47 - say like command
189:50 - echo
189:51 - hello
189:53 - and what we'll do is go ahead and commit
189:55 - this file so we'll just commit that
189:58 - update
190:00 - and we'll sync those changes as per
190:01 - usual
190:05 - and we'll give it a moment then we'll
190:07 - just go ahead and close that reopen this
190:08 - and get pod
190:11 - i think we'll have an easier time
190:18 - all right so it's almost open here
190:22 - and this is not even with pre-built it's
190:23 - pretty fast but again it's going to
190:25 - depend on your use case
190:26 - so um here we saw
190:30 - these two open because the ports already
190:31 - open they have the mode set up this
190:33 - server is running
190:35 - right so and this is running on port
190:37 - 8080 but imagine that you didn't want it
190:39 - on port 8080 you wanted on something and
190:41 - you know what to be honest a better
190:43 - example for this would have been port
190:44 - 80.
190:45 - so i'm just going to do this
190:47 - sorry i know i'll keep on modifying this
190:49 - but if this is an accessible port that
190:50 - doesn't make it a very good example
190:52 - let's just say open on port 80.
190:55 - and actually before that happens i'm
190:57 - just going to start it up manually to
190:58 - see what happens if it actually does
191:01 - permission denied so i'd have to go here
191:03 - and do like sudo
191:08 - um
191:11 - so we can't even start it on port 80.
191:16 - i think we'll just stick with what we
191:17 - have here so we'll go back and we'll
191:18 - just start it back up again
191:23 - okay and we'll just do port forwarding
191:25 - so if we wanted to open up on a
191:26 - different port so we'd just say
191:28 - gp
191:29 - port
191:31 - or a ford port
191:34 - want to forward port 8080 to
191:39 - 8999 maybe
191:42 - 88
191:45 - and i think it's going the wrong way so
191:51 - um port 80 is already in use okay maybe
191:54 - we'll try that again it's just confusing
191:56 - because to me it looks like
191:58 - traffic coming from here should go there
191:59 - but i guess that makes sense because if
192:00 - traffic's incoming from port 888 send it
192:03 - to 8080. okay to me the direction just
192:06 - confused me but it's actually correct
192:08 - and i'm just confused so um if that port
192:11 - is open
192:13 - let's go over to remote explorer here so
192:15 - now we see port 888 and so if we open
192:17 - that up we can see that it is forwarding
192:20 - to port 8080 so there you go that's
192:23 - pretty much all we need to know about
192:24 - ports of course there was a lot here but
192:26 - i think it was just worth making sure
192:28 - that we were very thorough
192:29 - with our investigation here so we'll
192:31 - just close off all those tabs and we'll
192:33 - see in the next video okay
192:34 - [Music]
192:38 - hey this is andrew brown and we are
192:39 - taking a look at git pod custom docker
192:42 - images so git pod supports custom docker
192:44 - images so you can configure your
192:46 - workspace exactly to your needs and this
192:48 - is really important if uh you know
192:50 - there's security reasons like you need
192:51 - to really lock down what it is that's um
192:54 - within that container or you just have
192:57 - uh wildly different use cases like maybe
192:59 - you're doing
193:00 - uh web3 development or
193:02 - machine learning and you just can't find
193:04 - a quick start template so that's where
193:06 - you have to start making your own docker
193:08 - file so git pod supports uh debian
193:12 - ubuntu based docker images but it does
193:15 - not support alpine the reason it does
193:17 - not support alpine is that images do not
193:19 - include alpine images do not include lib
193:22 - gcc or lib
193:24 - stdc plus plus which breaks visual
193:28 - studio code if you don't know what
193:29 - alpine is it's just like really really
193:31 - really small image and that's why people
193:33 - or os and that's why people really like
193:35 - alpine
193:36 - but i always found them very hard to set
193:38 - up
193:39 - debian ubuntu a very very popular
193:42 - hopefully we'll see support for things
193:44 - like uh centos and things like that
193:45 - later but this is the ubuntu logo that's
193:48 - the debian logo and there's alpine
193:49 - crossed out if that kind of helps cement
193:52 - that information but you should remember
193:53 - that it does not support alpine there
193:55 - are two ways
193:57 - to specify
193:59 - i know it says specific but should say
194:01 - specify an image okay so you can
194:04 - reference an image from a container
194:05 - repository like docker hub
194:08 - if you can specify things outside of
194:10 - docker hub i have not tried but i assume
194:12 - that they all go to docker hub so here's
194:14 - an example where we have an image and we
194:16 - say node buster we know that's going to
194:17 - go to docker hub then you can reference
194:19 - a docker file contained within the repo
194:22 - and so what you do is name a file called
194:24 - gitpod.dockerfile
194:27 - i don't know if you could just
194:28 - call it dockerfile and then reference it
194:30 - there but this is what it's always
194:31 - called so
194:33 - it's probably best practice just to
194:34 - follow along there and then here we have
194:36 - a very simple um docker file that does
194:38 - basic basically does nothing but it's
194:40 - just an example of us configuring our
194:42 - own so for git pod images uh it's
194:46 - recommended to not specify a tag or use
194:49 - latest to make sure you're you
194:50 - automatically benefit from the security
194:53 - patches and fixes uh we release we
194:56 - really mean git pod so you see i kind of
194:58 - copy paste there from the documentation
195:00 - but what they're talking about when
195:01 - they're talking about tags is that when
195:03 - you have um like this image here you can
195:06 - do like colon latest or you can put a
195:09 - version number stuff like that they're
195:10 - just saying don't specify a version
195:12 - number or a type just don't specify
195:15 - anything or type colon latest okay
195:18 - [Music]
195:22 - hey this is andrew brown and we are
195:24 - looking at the get pod workspace base
195:26 - image so gitpod workspace base base is a
195:29 - docker image that has a bunch of common
195:32 - tooling installed and so you can find it
195:34 - here on docker hub or you can get find
195:36 - it on github so those are the two paths
195:38 - there and so this thing if you start
195:40 - digging into it it really relies on
195:42 - something called build pack or build
195:44 - pack uh
195:45 - depths and the reason i went digging was
195:47 - because i just wanted to know what was
195:48 - installed on it so this is a docker
195:50 - image for a collection of common build
195:52 - dependencies used for installing various
195:54 - modules it is similar to heroku's stack
195:56 - image which includes a large number of
195:58 - development headers packages needed
196:01 - by various things so npm install gem
196:05 - install pip install curl
196:08 - wget git
196:09 - and a whole lot more
196:11 - so
196:12 - what's the purpose of the workspace base
196:15 - well it extends from build pack uh
196:18 - depths with a bunch of additional
196:20 - tooling and so we have a lot of stuff
196:21 - like zip unzip h-top uh jq which is
196:25 - great for working with json less
196:28 - locals nano
196:30 - sudo
196:31 - vim
196:32 - all sorts of useful things and so this
196:34 - is a really great base image but we're
196:37 - going to talk about the full image next
196:39 - because that is generally what we see
196:41 - a lot of people using okay
196:46 - all right so let's take a look at the
196:48 - get pod workspace full image so uh every
196:51 - workspace launches by default with a
196:52 - standard docker image called workspace
196:55 - full and so just like base there's one
196:57 - on uh docker hub and github so very
197:01 - similar and workspace full extends from
197:04 - workspace base but it's going to be
197:05 - adding some additional stuff so the
197:07 - gitpod workspace full image comes
197:08 - pre-installed with a variety of commonly
197:10 - used programming languages libraries and
197:11 - system packages but really talking about
197:14 - that coming from the base image but just
197:15 - to kind of list the languages here we
197:17 - got docker go java node.js c c plus plus
197:20 - python ruby russ php homebrew tail scale
197:24 - nginx and several more
197:26 - so when you're developing your own
197:27 - custom docker images you can either
197:29 - extend the workspace full or if you need
197:31 - something lighter the workspace base but
197:33 - we will obviously open these up uh these
197:36 - these images up to kind of look at their
197:37 - docker files and kind of figure out what
197:39 - they're doing okay
197:40 - [Music]
197:44 - hey this is andrew brown and in this
197:46 - follow along i'm going to show you how
197:47 - to set up a custom docker file if you
197:48 - notice i tried before it didn't work so
197:50 - this is going to be my maybe third
197:51 - attempt to do it so what we'll do is
197:53 - type in gitpod custom
197:55 - or gitpod custom docker file
197:59 - and from there we'll go down below
198:00 - choose private add a readme we'll go
198:03 - ahead and create that repository
198:05 - then once there we'll hit the get pod
198:07 - button so all we're going to really be
198:08 - doing is going through the basic custom
198:11 - docker file here just to go through the
198:13 - motions of it we can use hyphen base we
198:15 - can use hyphen full it's just going to
198:17 - be dependent on the use case so if you
198:19 - use get pod fold image your docker
198:21 - support built in your you get docker
198:24 - support built into your environment so
198:26 - full sounds pretty good to me so we'll
198:28 - need a file here called dot get pod
198:30 - uh docker file now does it have to be
198:33 - dot get pod you probably could specify
198:34 - dockerfile because it references it um
198:37 - via the file so i'd imagine you can name
198:39 - whatever you want but it's just good
198:40 - habit to follow what git pod has there
198:43 - so i'm going to type in gp init and from
198:45 - here we have a file i don't need any of
198:47 - that content we're going to have image
198:49 - and then i think it's like type
198:51 - or file okay so we can do file here and
198:54 - then from there we'll just do git pod
198:56 - docker file
198:58 - okay and so now the next thing we want
199:00 - to do and maybe we might want to put one
199:02 - task in there for fun tasks and we'll
199:04 - just say um command we'll just say
199:08 - echo
199:11 - hello world okay just something for fun
199:14 - and so in this docker file we're going
199:16 - to be now writing whatever format a
199:18 - dockerfile is so do from getpod forward
199:21 - slash workspace and again this could be
199:23 - base but we're going to do full because
199:24 - you get the full power docker that way
199:27 - and from there we can do run brew
199:28 - install fzf now what is f is that f i
199:31 - have no idea so i'm kind of curious
199:33 - myself so i'm just going to type that in
199:37 - command i just don't know what it is so
199:39 - this stands for
199:40 - fuzzy finder
199:42 - so f c f set f is a general purpose
199:45 - command line fuzzy finder it's an
199:47 - interactive unix filter for command line
199:49 - that can be used with any files so i
199:51 - mean that sounds really interesting um
199:55 - how it's used i don't know so i mean it
199:57 - might be just interesting to see if we
199:58 - can figure out how it works but um i
200:00 - think this is it so
200:01 - run brew install fzf if you see brew and
200:04 - you're thinking isn't that a mac thing
200:06 - well i think there's a debian or ubuntu
200:08 - like compatibility for having brew so um
200:12 - yeah i'm not really sure let's see
200:13 - ubuntu
200:15 - brew
200:18 - so homebrew on linux so i guess they
200:19 - have a linux distribution and so that's
200:21 - how we're able to do that normally i
200:23 - would be like doing yum or apk install
200:25 - app get installed for debian ubuntu but
200:27 - just to kind of clarify that i'm just
200:28 - double checking to make sure everything
200:30 - is okay there looks good to me so i'm
200:32 - going to go ahead and commit all this
200:34 - and say
200:35 - build custom
200:36 - [Music]
200:38 - docker image
200:41 - okay and hopefully all that is correct
200:42 - so we'll go ahead and commit that sync
200:44 - the changes we'll say okay
200:48 - and what we'll do is close that tab out
200:50 - we're going to double check to make sure
200:51 - those files are committed
200:53 - they look like they are good we'll hit
200:55 - get pot and hopefully we don't get any
200:57 - errors
200:58 - it's very easy to make errors at least
200:59 - for me because uh you know i'm just
201:01 - error prone
201:03 - but notice that it's building the
201:04 - workspace so there's a little bit more
201:06 - work it has to do that's building that
201:07 - image
201:09 - so this is where you might see
201:10 - pre-builds come into play where
201:13 - you know you want this to launch faster
201:15 - because you know docker files just take
201:17 - forever to build
201:19 - uh and i say forever but i mean they
201:21 - take a little bit of time right so just
201:22 - imagine if you always had this that
201:24 - really makes sense why pre-builds uh
201:27 - become so important
201:30 - but i'll see you back here when it's
201:31 - done okay
201:33 - all right so i think this is done i
201:35 - can't really tell because it says
201:36 - building image and says exit exit so
201:40 - i'm going to
201:41 - uh risk it i'm just going to close this
201:43 - tab and try it again so i'm going to go
201:46 - ahead and launch the git pod
201:48 - um
201:49 - yeah so it already has this one running
201:50 - so i'm just going to click into that so
201:51 - maybe i'll just jump into the
201:52 - environment so yeah it was ready uh just
201:54 - understand that sometimes that happens
201:56 - uh you know if if you feel like you're
201:58 - waiting too long just have the
201:59 - confidence to go okay i think i think it
202:01 - is working but for whatever reason the
202:03 - feedback loop is not working as expected
202:05 - so if this worked correctly we should
202:07 - have fzf installed so if i type f set f
202:10 - it does appear so that's great and let's
202:12 - just see how it works so i know i
202:14 - watched a short little video on it and i
202:15 - know that if you do this it's a fuzzy
202:17 - finder so you can apply it to anything
202:19 - you can pipe anything to it but like
202:21 - it's great for like going through and
202:22 - finding files this one is a little bit
202:24 - more complicated so it's not really
202:26 - showing me the one the simple one that i
202:28 - wanted to uh use here
202:31 - well let me see here just going to the
202:32 - top here um
202:37 - so
202:39 - ah like
202:40 - it's basically this so we copy this i'm
202:42 - not sure about the selected part but we
202:44 - go and we paste that in like allow and
202:46 - hit enter and
202:48 - i mean we can search our files so
202:51 - i guess it's only showing not or like
202:53 - invisible files so maybe i need to go
202:55 - find some files here
202:57 - um
202:59 - media is there stuff in there no
203:02 - just trying to find anything
203:04 - okay so here might be something that
203:06 - might work
203:07 - so i'll hit up but they're not files
203:08 - they're kind of folders eh
203:11 - okay so see i can start typing utm and
203:13 - so it's just a fuzzy finder an easier
203:15 - way to find things can be used for all
203:17 - sorts of things but that's how you build
203:18 - a docker file so just realize it is a
203:21 - bit slow
203:22 - but that's the whole idea behind
203:23 - pre-builds right
203:25 - now if we were to launch this again
203:26 - would it try to build every single time
203:28 - i think so let's go ahead and just see
203:30 - that and i don't care about seeing this
203:32 - complete i just want to see if it is
203:34 - going to build that every single time i
203:36 - believe it would right
203:40 - so we just give it a moment here
203:44 - it's pulling the container image if it
203:46 - doesn't that's great
203:48 - right
203:49 - that's what it looks like it's doing so
203:51 - it looks like if you build it once
203:54 - uh it's not gonna build it every single
203:56 - time you launch a workspace
203:58 - and then i guess my next question is is
203:59 - like i guess it would know anytime
204:01 - there's a file change i guess that you
204:03 - would have you'd have to commit it to
204:04 - the repository so that's how we would
204:06 - know
204:07 - so
204:08 - that's fine so let's say i make a single
204:10 - change here
204:13 - small change
204:15 - maybe just add another small change here
204:17 - i just want to see like will it still
204:18 - pull the image will it be smart enough
204:20 - or is it any time there's a
204:21 - change
204:28 - small change sync
204:34 - uh we'll go ahead and close that git pod
204:40 - give it a moment there and so i just
204:41 - want to see is it going to try to build
204:43 - the image
204:45 - it doesn't look like it
204:47 - so it's really seems like it's smart
204:50 - about that
204:53 - and then what we'll do once we launch it
204:54 - i'll just try to make a very minute
204:56 - change
204:57 - um i don't write docker files on a
204:59 - regular basis so
205:00 - i'm not even sure what we could install
205:03 - i mean maybe we could do wget even
205:04 - though it's already installed in that
205:05 - file
205:19 - okay yeah so i didn't rebuild it but
205:20 - what we'll do here is i'm going to do
205:22 - like run on a separate line
205:25 - i assume it must be smart enough to know
205:27 - run brew install wget again i don't care
205:29 - if this works like i don't care to see
205:32 - it all the way the end just the fact
205:33 - that it's going to start a build step
205:35 - so add wget which probably already is
205:38 - installed
205:39 - but we just need an extra line in there
205:41 - so we're just gonna do whatever
205:43 - okay good
205:44 - and we'll go back over here and
205:47 - we will hit the get pod button and so
205:50 - i'm assuming this time it will know
205:53 - yeah there we go okay so it is building
205:55 - the image so it is pretty smart there
205:57 - and i really like the fact they did it
205:58 - that way
205:59 - um
206:00 - if you're looking for those we've seen
206:02 - those works workspace full images before
206:04 - but we're like git pod workspace full
206:06 - docker hub might be something we want to
206:08 - search for so here this is where they're
206:10 - basically hosted you know so
206:13 - just understand like whatever you want
206:15 - you just take that name and that's what
206:16 - you're putting in the image if you're
206:19 - doing um
206:21 - if we're going back to here like let's
206:23 - say you already have an image hosted you
206:24 - just do that right
206:25 - you probably can put tags there as well
206:27 - but again it has to be a debian or
206:28 - ubuntu base so i'm not sure if it shows
206:31 - yeah here it is on github we've got
206:33 - images and we can go find the full one
206:35 - here and from here we can see the docker
206:37 - file and we can see this one's based off
206:38 - of the base so if you wanted to kind of
206:40 - like crawl through and that's what i was
206:42 - doing to kind of understand what's going
206:43 - on there you can go to the base and then
206:45 - open that one you can see this one's
206:47 - based on the build pack depth depth full
206:49 - call
206:50 - [Music]
206:51 - f-o-c-a-l i'm not sure what that stands
206:53 - for we can go over here
206:56 - and then from here um
207:01 - like this sometimes i don't know where
207:02 - to find the baseball but there is some
207:04 - kind of like base soccer file here that
207:05 - would tell us where that comes from or
207:06 - be written up
207:08 - so i'm just kind of looking around for
207:10 - it i'm not super good with docker i've
207:12 - been using it for years but every single
207:14 - time it just takes a lot of work here
207:15 - there are a bunch of tags underneath so
207:17 - maybe the tag shows up here it does
207:20 - so we click into that one ah and here's
207:22 - the file
207:23 - and so you can see this one's based off
207:24 - full call scm
207:26 - here it's installing all the libraries
207:28 - and you can just keep crawling back
207:30 - until you find everything to see like
207:31 - what's installed so we go to this one
207:33 - here
207:34 - and then this one's based off the curl
207:36 - one like
207:37 - it's just a little a little loopy how
207:39 - this works we'll go to the curl one and
207:42 - uh so now you can see it's ubuntu uh
207:45 - focal right so then we can go from this
207:47 - one
207:49 - so you just see that you see that it's
207:50 - ubuntu right so we go into this so that
207:52 - i guess that stands for full focal
207:55 - [Music]
207:57 - great that is not easy to say so we go
208:00 - back and we go to docker hub
208:02 - again just if you've never done this
208:03 - before right
208:05 - and so from here we might type in a full
208:08 - call if it even shows up so then it's
208:10 - here this is the latest
208:12 - and so this is from scratch
208:15 - um
208:17 - and this is add this binary or this uh
208:20 - this thing so it looks like i don't
208:21 - really know this too well but it looks
208:23 - like what it's doing is it's saying okay
208:25 - take this um
208:26 - uh
208:27 - archive which might be in the same
208:29 - directory here yeah it is take this
208:31 - archive and utilize that as the
208:34 - installation for it right
208:36 - so that must be like the way like
208:38 - setting up um ubuntu like you know
208:40 - somebody was to like have a disk or uh a
208:43 - key or download the program i think it's
208:45 - executing the program so uh you know
208:47 - hopefully that kind of tells you how
208:48 - that stuff works but yeah that is how
208:50 - you do
208:51 - custom docker files okay
208:56 - [Music]
209:00 - hey this is andrew brown and we're
209:02 - taking a look at git pod quick start
209:04 - templates so quick start templates are
209:06 - git repositories that you can use to
209:08 - launch an example environment or fork to
209:10 - get started for a variety of different
209:12 - run times so here's the search you're
209:14 - going to notice a bunch of languages a
209:16 - bunch of frameworks like ruby on rails
209:19 - things like that and so once you click
209:22 - on one of these it's you can it will try
209:24 - to
209:25 - create a fork of course but you can just
209:27 - go straight to the um
209:29 - github repository and there you'll
209:31 - generally notice that it will have like
209:33 - a git pod yaml file and a docker file
209:35 - and you can open it up and see how they
209:37 - are doing it
209:39 - but it's pretty useful
209:41 - the quick start template generally
209:42 - contains a custom docker file that may
209:44 - extend the base or full so i tried to
209:47 - like go through a bunch of these and say
209:48 - okay what is the pattern here but it
209:50 - seems like some are workspace based some
209:52 - are full some are
209:54 - um
209:55 - get pod workspace there's like another
209:57 - one
209:58 - um or some are docker compose so they're
210:00 - i guess a little bit all over the place
210:02 - okay
210:03 - [Music]
210:07 - hey this is andrew brown and this follow
210:08 - along i want to explore the quick starts
210:10 - that comes with git pods so what we'll
210:12 - do is type in quick start
210:14 - templates here and what we'll do oops we
210:17 - gotta put in get pod here because
210:18 - there's all sorts of quick starts based
210:20 - on different cloud products but we go
210:22 - here we can see we have some popular
210:24 - templates we can search for a variety of
210:26 - things so if we want ruby on rails that
210:28 - is an example maybe if we wanted uh
210:30 - larvarelle that might be an example
210:33 - maybe if we wanted django do we have
210:35 - django in here
210:37 - not yet but if we don't have django
210:39 - maybe we have flask yeah there we go so
210:41 - maybe we have flask uh maybe we got next
210:43 - yes there we go and so it might be fun
210:46 - to just kind of launch these and see
210:48 - what they look like and we maybe there's
210:51 - even a wordpress in here there we are
210:53 - okay so we got all the major frameworks
210:55 - and you know i want to emphasize that
210:56 - this is languages and frameworks and all
210:58 - sorts of things well what we're going to
211:00 - do here
211:02 - is go ahead
211:05 - and launch these so each of these have a
211:07 - template so if i go here i can just say
211:10 - git pod um
211:12 - rails template and you know what we
211:14 - don't even need to actually
211:16 - i'm not going to clone those i'm just
211:18 - going to open these up in a new tab like
211:19 - this
211:21 - and then just click on it like that
211:23 - so that's the rails one now i have to go
211:25 - back here and find all of them again so
211:26 - we'll go here
211:28 - and we'll open up that like that
211:32 - okay so we got the wordpress that one
211:34 - then we'll look at the next gs one
211:38 - all i want to do is kind of just explore
211:39 - these and just see kind of like what is
211:42 - going on with them you know
211:45 - and we said flask
211:50 - okay
211:52 - click on through that
211:55 - and larvarelle
212:00 - and so the thing is is that
212:04 - we have quite a few repos here
212:06 - i think i have one two three four five
212:10 - so we're not going to be able to open
212:11 - these all up at once because we can only
212:13 - have four in parallel but uh we don't
212:15 - need to do that all at once so that's
212:17 - fine so i'm just going to close some of
212:18 - these i'm not closing them but i'm just
212:20 - going to launch them one at a time so
212:21 - let's do larval first
212:24 - that's quite a big one so this will be
212:25 - one that we launch
212:28 - we'll go ahead and close that tab
212:35 - and while that's going we'll go ahead
212:36 - and launch the next js1 we'll just do a
212:38 - couple at a time okay
212:44 - and i'm not really sure how many
212:45 - workspaces i have running maybe we'll
212:46 - just kind of like
212:48 - optimize our time here if we go over to
212:50 - our dashboard
212:51 - and we go to workspaces none are open
212:53 - there
212:55 - we have
212:56 - two running workspaces which is fine so
212:58 - i think we can just keep going here
213:00 - we'll do the flask one and then we'll do
213:03 - the wordpress wordpress one and then
213:05 - we'll just leave rails up on on the side
213:06 - there
213:07 - and so we're just gonna wait for all
213:09 - these environments to go green i'll see
213:11 - you back here in a minute okay all right
213:13 - so after a short little wait
213:15 - our four repositories are ready so we'll
213:17 - start on the left hand side with lar
213:18 - varell if you don't know what lavarelle
213:19 - is it's a php framework that's similar
213:21 - to ruby on rails
213:23 - um and so let's just see what they have
213:25 - done here to kind of provision this so
213:27 - it doesn't hurt to go through get pod
213:29 - yaml files to kind of learn something so
213:30 - here they're loading a custom image and
213:32 - probably all of these are going to be
213:33 - loading custom images and so we're
213:35 - opening up port 8000 for the large rail
213:37 - server and then it's also starting mysql
213:39 - so it's all here in one place for you
213:43 - and so down below
213:44 - i mean both the ports are open but in
213:46 - the init step you can see that they are
213:49 - creating a database example they're
213:51 - going to copy the env file over here
213:54 - into one there then they are updating
213:57 - the environment variables with some
213:58 - default configurations over in here so
214:01 - some settings that are probably
214:02 - mandatory that you need to update
214:05 - then they're doing a composer install an
214:07 - npm install a php artisan key generate
214:10 - could any of this go into the before i
214:12 - don't know this seems pretty much
214:14 - correct to me and then you have the
214:15 - command that's starting up the 8000 on
214:18 - um for the public directory so let's go
214:21 - open up the gitpod docker file and so
214:23 - here you can see that there's just the
214:24 - thing that says workspace mysql so if we
214:28 - wanted to understand what the contents
214:29 - of that is we'd have to go look up that
214:31 - one there so maybe we will in a bit here
214:34 - so just say workspace github if we can
214:37 - find it
214:40 - sometimes i find these easy to find
214:41 - sometimes they don't
214:43 - oops
214:46 - uh like that
214:49 - so like if we go to the get pod repo
214:51 - because it might or github github
214:54 - get pod repo there might be something
214:55 - interesting for us to see there maybe
214:57 - not but we'll try anyway so we'll say
214:59 - git pod here
215:01 - and we'll go to the repos here
215:04 - and we will search for workspace
215:10 - so these are workspace images see i
215:12 - don't know if they're all in here they
215:13 - probably are so we're going to mysql
215:15 - this is probably the file that is
215:16 - launching here because i'm just curious
215:18 - how what is it what is it doing and so
215:20 - it's extending the workspace full and
215:22 - then it's just installing mysql so a lot
215:24 - of these are going to be using probably
215:25 - workspace full underneath
215:27 - okay
215:28 - then we have next.js
215:30 - so in here we'll take a look at the uh
215:35 - the gitpod.yaml file here and so
215:39 - we have a single task it says npm
215:41 - install npm run dev so very very simple
215:44 - and it's not even using um a custom
215:47 - docker file because it just uses node
215:49 - and i guess everything we want is here
215:51 - so that's really simple and nice
215:53 - then we have flask running here so if we
215:55 - go over to this one
215:57 - um
215:58 - we have one that's starting a before
216:00 - task so it's setting or it's exporting a
216:01 - couple of flask options we're doing our
216:03 - pip install we're initializing our
216:05 - database we're running it and then they
216:08 - have that extension installed for python
216:10 - for that highlighting so that's nice and
216:11 - simple
216:12 - and then the last one here well we still
216:14 - have ruby on rails we might as well open
216:16 - that up while we're waiting
216:18 - um we got to go back to our limit here
216:19 - we've reached one so we'll go ahead and
216:21 - close
216:23 - uh this one here so we'll say
216:26 - stop and we'll stop this one and we'll
216:28 - stop this one i just don't want to touch
216:30 - the wordpress and so if we go over to
216:32 - the wordpress now we didn't see a
216:34 - website because this one's a little bit
216:35 - more complex in terms of its setup there
216:38 - is a port open i don't know if this will
216:39 - work because we probably have to pop in
216:41 - the database nope here it is we can
216:43 - create a wordpress and so if we go here
216:46 - on the left hand side and go into the
216:48 - git pod yaml this one's kind of a
216:50 - curious case because it's not using a
216:52 - docker file image it has a docker
216:55 - compose and so basically you're running
216:57 - multi-containers within a container and
217:00 - so we open up docker compose we can see
217:02 - here that it's starting up mysql then
217:05 - it's starting up uh wordpress and these
217:07 - have separate images so see this one is
217:09 - using the mysql image this one's using
217:11 - the wordpress latest and so you know you
217:14 - saw with the other example with larvarel
217:17 - it just ran it as a monolith within the
217:19 - container like like a virtual machine
217:21 - would and so you have both options here
217:23 - and
217:24 - both are valid this might be really
217:26 - useful if this is actually what you use
217:27 - to deploy so this would be more like one
217:29 - to one with your production environment
217:31 - so that is kind of interesting there
217:34 - um
217:35 - let's go back i guess we didn't relaunch
217:36 - this so we'll go here and we'll just
217:38 - launch a new ruby on rails file there
217:42 - and we'll give that a moment
217:45 - but you can kind of see that's kind of
217:46 - interesting like all these files are a
217:48 - little bit different you can learn a bit
217:49 - but the great thing is like you can just
217:51 - clone these or fork these repositories
217:54 - and kind of build off of them so it's a
217:55 - really great starting point for a lot of
217:57 - different kinds of projects
218:00 - so
218:01 - yeah we'll just wait here for the ruby
218:02 - on rails thing to start and we'll look
218:04 - at this last one and we'll just wrap it
218:06 - up here for quick starts okay all right
218:08 - so after a short little wait here we
218:09 - have ruby on rails my favorite uh
218:11 - framework that's why we made time for it
218:13 - but here you can see it's loading its
218:15 - own custom image file uh it has ports
218:17 - open on 3000 5432 means meaning it's
218:20 - running postgres here we have our
218:21 - initial bundle install yarn and saw rick
218:23 - db create and then running the server
218:26 - and then we have a nice extension here
218:28 - for ruby if we open up the docker file
218:30 - we see again it's workspace postgres so
218:32 - you can imagine it's going to probably
218:34 - be similar to the mysql one if we go
218:35 - over here
218:37 - we go down to postgres and we click into
218:39 - the docker file yeah it's the same story
218:42 - um it's gonna be extending workspace
218:44 - full
218:45 - so that's pretty straightforward there
218:47 - um
218:49 - and yeah we're pretty much done here so
218:51 - yeah that's all we want to do for quick
218:52 - start so i'll just close that stuff off
218:54 - and i'll see you in the next video okay
218:57 - [Music]
219:01 - so let's take a look here at docker
219:03 - compose which is a feature of docker
219:07 - but what's interesting is you can run it
219:08 - within git pod and so the reason why
219:10 - this is interesting is because you can
219:12 - run containers within containers or
219:14 - technically docker within docker if
219:16 - you've ever seen the movie inception
219:18 - with leonardo dicaprio where he goes uh
219:21 - deep into dreams a dream within a dream
219:23 - that's what we're doing here it's kind
219:25 - of crazy
219:26 - so let's talk about what docker compose
219:28 - is so it's a tool for running
219:29 - multi-container applications on docker
219:32 - defined using the compose file format so
219:33 - we're not just running a single
219:36 - docker container running multiple
219:38 - containers at the same time so a compose
219:41 - file which is going to be named docker
219:43 - hyphen compose yaml which will sit at
219:45 - the root of your directory
219:47 - is used to define how one or more
219:49 - containers that need to be running and
219:52 - the communication between them to run
219:53 - our application and so within our gitpod
219:56 - configuration file
219:58 - we can run docker compose poll and up
220:01 - commands to get multiple containers
220:03 - running so there they are of course we
220:05 - don't see the docker compose yaml file
220:07 - here in the slide but we will see it in
220:09 - the follow along so it will make sense
220:10 - there okay
220:11 - [Music]
220:16 - so something i want you to consider is
220:18 - that you can build container images and
220:20 - virtual machine images within containers
220:23 - and so if you're looking for some open
220:25 - source tooling or things that might work
220:28 - uh within a gitpod workspace
220:31 - we have hashicorp packers so this is an
220:32 - open source tool to build golden images
220:34 - for virtual machines or docker or maybe
220:36 - build a
220:37 - which is an open source tool to build
220:39 - oci compliant images of course there are
220:42 - other
220:43 - tool tools out there so for instance
220:45 - there's dazzle which is made by get pod
220:48 - i don't know a lot about it i don't know
220:49 - if we're going to
220:50 - actually uh give it a try within the
220:53 - course but that's something that builds
220:54 - out container images with some advantage
220:56 - around layers okay
220:59 - [Music]
221:04 - all right so we're going to learn all
221:05 - about get pod environment variables so
221:07 - before we do we need to define what are
221:09 - environment variables commonly referred
221:11 - to by developers as and vars is a
221:13 - variable whose values is set outside of
221:16 - a program and it's composed of a key and
221:18 - pair so here's an example within bash
221:20 - this is generally how you do it so you'd
221:22 - write export to set the environment
221:24 - variable you have the key so
221:26 - very
221:27 - common to set it to be all uppercase
221:30 - it's just tradition so that's what we
221:31 - normally do equals followed by a string
221:34 - and if we want to print it we could do
221:36 - echo is one great way of doing that
221:38 - there and so environment variables can
221:40 - be set in four ways for your git pod
221:43 - workspace you have the git pod cli the
221:46 - gitpodio account settings environment
221:48 - variables the gitpod url and
221:51 - getpodconfiguration file per start task
221:54 - so we will jump into all those variants
221:56 - okay
221:57 - [Music]
222:01 - before we jump into the four different
222:03 - ways we can set environment variables
222:05 - let's talk about the defaults in prefix
222:07 - for uh get pod so the default
222:10 - environment variables are set by getpod
222:12 - automatically every time you launch a
222:14 - new workspace so
222:16 - there's a lot of them but two that
222:18 - really stand out are getpod workspace id
222:20 - so this is a universally unique idea
222:22 - uuid associated with the workspace and
222:25 - then the getpod workspace url the unique
222:28 - url for the workspace if you want to see
222:30 - them all we'll do this in the follow
222:32 - along you can use um the batch command
222:35 - env to print them all out and then you
222:38 - have a pipe followed by grep to say
222:39 - filter out the ones that start with get
222:41 - pod underscore because they're all going
222:43 - to start with git pod underscore and to
222:44 - talk about that prefix it's a reserve
222:47 - prefix so environment variables
222:49 - beginning with the git pod underscore
222:51 - are reserved for internal use by gitpod
222:53 - and are overwritten on every workspace
222:55 - startup so if you attempt to set
222:57 - something with your own like getpodandru
222:59 - uh it will get ignored or will not be
223:01 - accessible uh if you try to override one
223:03 - that's existing that's just not gonna
223:04 - happen okay so just be aware of that
223:08 - [Music]
223:12 - so one way we can set environment
223:14 - variables
223:15 - for git pod workspaces is within the
223:18 - gitpod yaml or the gitpod configuration
223:20 - file at a per task level so here is an
223:23 - example
223:24 - of a
223:25 - gitpod configuration file and here you
223:27 - can see we are doing env colon
223:30 - and then we're following up with a key
223:32 - and a pair and we can put as many as we
223:34 - want in there
223:35 - and so that's going to set for the next
223:37 - time the environment launches notice we
223:39 - have the dollar sign this is not get pod
223:41 - specific that is just how bash scripts
223:43 - work
223:44 - and so you can do that to access the
223:46 - value there
223:47 - okay and so the environment variables
223:49 - will be scoped only for
223:51 - that terminal so that task that spins up
223:54 - and other terminals will not have that
223:56 - environment variable set and i was i was
223:59 - very certain to test that out and we
224:00 - will look at that when we do it in the
224:02 - follow along okay
224:03 - [Music]
224:08 - so another way we can set
224:10 - environment variables for get pod is via
224:12 - the gitpod url so right after the hash
224:15 - or pound there we can just start
224:17 - specifying multiple ones there separated
224:19 - by a comma
224:20 - you probably don't want to be putting
224:22 - sensitive
224:24 - things in there because you know there's
224:26 - potential for those to be exposed like
224:28 - it was access keys and secrets but it's
224:30 - really nice to be able to do that so the
224:32 - environment variable set in the url will
224:34 - be available in all terminals within
224:36 - your workspace so like where you have
224:37 - per tassel scope for the um
224:40 - uh you know per task right whether you
224:42 - set it in the git pod yellow file this
224:43 - these are going to be everywhere okay
224:45 - [Music]
224:49 - all right so another way to set
224:51 - environment variables is setting them
224:53 - through account settings so if you go
224:54 - there you'll have account settings
224:56 - environment variables and this is ideal
224:58 - when you need to pass along variables
225:00 - that are sensitive so something could be
225:02 - sensitive it would be like interbus
225:03 - credentials so from there you can open
225:05 - up a new nvar and set its name its value
225:09 - and its scope and that's the thing
225:11 - that's interesting here is how scope
225:13 - works
225:14 - so in order to set environment variables
225:16 - for specific workspaces you need to set
225:18 - the scope
225:21 - and so if you wanted to show up for
225:22 - everything
225:24 - you could do what it says here which is
225:26 - provide a wild card for both uh wild
225:28 - card forward slash wildcard but let's
225:30 - look at some of the following patterns
225:31 - that we can set and it's going to be
225:32 - basically owner repo or an alternative
225:35 - way of saying oregon project but this is
225:38 - based on what is in github get lab
225:40 - bitbucket right so that's what you want
225:41 - to consider not to be confused and this
225:44 - did confuse me with um teams because you
225:46 - can have
225:48 - or teams and projects within um get pod
225:51 - and it's not based on that okay so for
225:53 - example we have exam pro for slash exam
225:55 - pro marketing it's going to make the end
225:58 - bar available to a repo called example
226:01 - marketing owned by exam pro right and
226:04 - actually mine on
226:05 - github is exam pro co with all capitals
226:09 - right which is like this over here i
226:11 - just wrote it lowercase for some reason
226:12 - over here then we have um and i'll just
226:15 - clear some of the drawings here but then
226:18 - we could say
226:19 - we could have a wild card on the end
226:20 - here so wild card repo so make nvars
226:22 - available to all repos owned by get pod
226:26 - i o
226:26 - um so maybe it's for across all repos
226:29 - and then you could have the
226:31 - wild card in the front as well and so
226:34 - this is really useful um it says for
226:37 - it says because i haven't used it yet
226:39 - for all forks right so you know it could
226:41 - be like get pot i o and then there's
226:42 - like andrew brown at forward slash form
226:45 - so that that stuff propagates there
226:48 - so the scope is case insensitive so when
226:51 - you enter the pattern it will be down
226:53 - case so see how i'm upper i'm entering
226:55 - this with title case here exam pro co
226:58 - um it will just down case it to exam pro
227:00 - co like all like all the letters uh down
227:03 - cased so you know you don't have to be
227:06 - too sensitive here when you're writing
227:07 - that stuff in it's just going to fix
227:09 - that for you okay
227:11 - [Music]
227:15 - hey this is andrew brown and this follow
227:16 - along we're going to look at all the
227:17 - options we have for environment
227:19 - variables because there's a lot of ways
227:20 - that we can set them so what i'm going
227:22 - to do is go ahead and create a new
227:24 - repository we'll call this one git pod
227:27 - env i'm going to go make that private as
227:29 - per usual and we'll go ahead and add a
227:31 - readme file and we're going to launch
227:33 - ourself a new environment so we'll go
227:35 - open up get pod here and while we're
227:37 - waiting i probably have some code
227:39 - already laying around from one of our
227:41 - previous
227:42 - repositories here so i think i'll go to
227:45 - the ports one here because we're going
227:46 - to probably just set up sinatra as per
227:48 - usual
227:49 - and that will be the means for which we
227:51 - pass a long port so we'll give that a
227:53 - moment to open and as that is going i'm
227:55 - going to go over to the getpodio website
227:57 - because what i want to show to you is
227:59 - under your settings over here this is
228:01 - where you're going to find environment
228:03 - variables now i probably would prefer if
228:06 - this was scoped at a per project level
228:08 - but i mean of course you can launch
228:09 - project like things that are not within
228:11 - a project so i guess it makes sense that
228:13 - it is global
228:14 - but you know maybe in the future they'll
228:15 - add it at a project um namespace there
228:18 - which is totally fine but this is where
228:20 - you're going to be able to set one place
228:22 - for environment variables another place
228:24 - will be in the url in the goodpod url
228:27 - the cli and i think there is a fourth
228:29 - option in the get podgaml file so what
228:32 - we'll do here is we'll just get set up
228:34 - and so as per usual i'll go to the
228:36 - hamburger menu and we will launch a new
228:39 - terminal and we'll wait a moment here
228:41 - type in gp init so that we have a
228:44 - get pod yaml file that we cannot mess up
228:47 - which is something that i have a bunch
228:49 - of trouble with but what we'll do is
228:50 - create a new file here called server.rb
228:54 - and we will go ahead and grab the same
228:56 - code so it is just this very simple code
229:00 - you've seen us grab it a few times from
229:01 - the sinatra website if you if you're
229:04 - looking for you just go to sinatra
229:06 - sinatra ruby right and here and i'm
229:09 - pretty much just grabbing that code okay
229:11 - so and then we're putting this port here
229:13 - with the app port again requiring
229:15 - sinatra we'll go ahead actually we'll
229:17 - type in bundle init to create our gem
229:21 - file for ruby
229:22 - and i'm just going to delete ah that can
229:24 - stay in there that's fine we'll just
229:26 - type in gem
229:27 - cinatra
229:29 - and then i'll do a bundle install so we
229:31 - install sinatra our very lightweight
229:35 - ruby web server there and so that is now
229:37 - installed and so
229:39 - i'm just thinking about this for a
229:40 - moment um
229:43 - because it's installed i'm just trying
229:44 - to think like what would be the best
229:46 - approach
229:47 - um so what i'm going to do
229:51 - is
229:52 - we'll do the get pod yaml file last
229:54 - because we can set environment variables
229:56 - in here but i think that's something
229:57 - that we can wait for but we will need to
230:00 - kind of set up this file so i'm going to
230:03 - do a
230:05 - bundle
230:07 - install and you see me do this as a
230:08 - separate task but i'm just going to make
230:10 - my life easy by just doing a bundle
230:11 - install here
230:12 - and then we'll do a bundle
230:15 - exec
230:17 - ruby server.rb
230:20 - okay
230:22 - and so there is no port number being set
230:24 - here so it's going to be whatever it is
230:26 - i'm just going to get rid of the ports
230:27 - because we'll just let it launch and
230:29 - then from there we'll just expose ports
230:31 - as we go
230:33 - but i'm just thinking here for a moment
230:36 - about what i would like to do
230:39 - let's do it from the url first so that's
230:41 - what i want to do i want to see if i can
230:42 - change the port number via the url so
230:45 - what we'll do
230:46 - is i'm just going to make sure this
230:47 - works
230:48 - okay
230:50 - just make sure that the server starts up
230:51 - it does no problem there so we'll go and
230:54 - do is uh commit these this uh these
230:56 - files here okay
231:00 - and i'm just going to say uh initial
231:03 - repo
231:04 - we'll go ahead and commit that save
231:06 - those changes we'll say okay
231:10 - so this should be everything that we
231:11 - need to get going
231:13 - so now i'm going to go ahead and just
231:14 - close that and so
231:17 - we're going to go back to example dev
231:18 - and we're going to look for that new
231:20 - repository that we just created
231:22 - env
231:23 - and so from here i mean we can click
231:25 - this link but i'm just going to right
231:27 - click and copy the link address just to
231:29 - save myself some trouble we're gonna go
231:31 - ahead here oops
231:33 - copy uh copy link address
231:36 - and again we'll paste it up in here and
231:38 - so what we'll do is set the environment
231:40 - variable up here so i'm gonna do app
231:42 - port
231:43 - equals
231:44 - um
231:47 - eight
231:49 - eight eight eight okay and we'll put a
231:51 - four slash in there and so that means
231:53 - that sinatra should start up on port
231:56 - eight eight eight eight because we are
231:57 - injecting environment variables that way
231:59 - so we'll see if that actually works
232:04 - assuming i wrote that correctly but i'm
232:06 - pretty sure i did it's not like that
232:08 - hard to do
232:11 - and we'll give it a moment here
232:13 - and it started up on port
232:16 - 888 so passing via the get get pod url
232:20 - wasn't too
232:21 - uh troublesome here
232:23 - and so another way that we can uh
232:26 - set environment variables
232:29 - i mean there's something with the the
232:31 - the get uh get
232:33 - uh pod cli here so here is control user
232:36 - defined persistent environment variables
232:37 - and i haven't really done much with this
232:39 - yet so let's see what it does
232:41 - i'm not sure we'll say help
232:45 - and we'll just go up here and see what
232:47 - it says so this command can print and
232:48 - modify the persistent environment
232:49 - variables associated with your user so
232:52 - to set the persistent environment
232:54 - variable to foo bar so we would just do
232:56 - that so we'll do gpe env
233:00 - and we'll just say
233:01 - app port equals
233:04 - 8765
233:06 - and hit enter
233:08 - and so that just sets the port number so
233:10 - i'm assuming that's all it does
233:14 - okay so we would do
233:15 - echo here
233:18 - [Music]
233:19 - because here it's saying this if i go
233:22 - here is it just because i've already set
233:24 - one so maybe it's just because it's
233:26 - already been set so it can't be
233:27 - overwritten because it's interesting
233:28 - that it's it's doing this here
233:31 - so i'm gonna try this again one more
233:32 - time
233:35 - and it's doing eight eight eight eight
233:37 - eight
233:38 - so let's go take a read up on what that
233:40 - does we'll say get port
233:42 - or um get pod
233:45 - um
233:47 - cli
233:49 - and if we go here
233:52 - we'll look at env because it just might
233:54 - be that we can't overwrite it so
233:56 - uh with gpe and v you can set an api
233:59 - endpoint environment variable that is
234:01 - accessible for the project even if you
234:02 - stop the workspace and start a new one
234:04 - to delete or unset environment variable
234:07 - uh do that so i mean it just looks like
234:09 - it sets environment variable so but the
234:12 - thing is that we sent through the getpod
234:13 - url so it might never be able to unset
234:15 - it
234:17 - so what i'm gonna do just to rule that
234:19 - out i'm just gonna open up a new
234:21 - workspace here
234:23 - and we'll try to set it and then see if
234:25 - it actually prints out
234:33 - all right so it's just starting up here
234:34 - and it's starting on port
234:36 - 8765 which is
234:38 - interesting because
234:41 - i definitely um
234:43 - did not set it so maybe what it did when
234:46 - we did that is it actually set it up
234:47 - over here so i'm just curious if we give
234:49 - this a refresh oh
234:50 - so that's what that does okay
234:53 - so that's really curious
234:56 - all right so because i thought it was
234:57 - just going to be temporary like you just
234:59 - did it within the actual workspace but i
235:01 - guess what it actually does is set it up
235:03 - in your account settings and here you
235:04 - can see that it's setting it for the
235:06 - scope so we have at port 8765. i was
235:09 - going to show you this separately but i
235:11 - guess if we did it that way we don't
235:12 - have to do that there but just make note
235:14 - that you can do
235:15 - wild cards here so if you wanted this to
235:17 - be set for all projects so maybe you
235:19 - always do port 3000 and you're always
235:21 - using app port or something like that
235:23 - you could do that or if you wanted it
235:24 - for every single fork you could do that
235:26 - so i could update that it would still
235:28 - apply
235:30 - but that's interesting i did not know
235:32 - that
235:32 - um so
235:34 - i mean
235:35 - that's great now let's take a look at
235:37 - what we would do if we set it up in the
235:38 - git pod yemel and i don't know which one
235:40 - would override so like there's one set
235:42 - in here but would get pot yaml have more
235:44 - presidents i don't know so what we'll do
235:47 - is just type in env i'm going to go here
235:48 - and do app
235:50 - port
235:51 - and we'll do
235:54 - probably colon and here i would just say
235:58 - seven seven seven seven
236:00 - uh you gotta be kind of careful because
236:01 - sometimes these are reserved ports but i
236:03 - don't think so i just again i've never
236:04 - seen someone do that so
236:06 - maybe like four three two one might be a
236:08 - better idea and so what we'll do here is
236:12 - just save this and see what happens
236:13 - let's see if it actually overrides with
236:15 - this port or sorry this environment
236:17 - variable
236:18 - so uh commit
236:20 - env within
236:22 - getpod file okay
236:25 - and we will save that
236:27 - will
236:28 - sync those changes
236:32 - and what we'll do is just close this
236:36 - and we'll go ahead and relaunch that
236:45 - and then we'll see which takes over and
236:47 - we might even go to the extreme and also
236:49 - set in the get pod url and see what
236:50 - happens so here it's starting on port
236:53 - four three two one so even though we
236:55 - have set it
236:56 - um in here it looks like the git pod
236:59 - yaml is gonna have higher priority here
237:01 - so now what i wanna do is close it out
237:04 - and we're going to then set it in the
237:06 - url and see which one it takes
237:09 - i'm going to assume it's always going to
237:10 - be the good pod url configuration file
237:13 - first
237:14 - so or environment variable sorry so
237:17 - we'll copy this address up here i'm
237:19 - going to go ahead and paste it on in
237:21 - here
237:24 - and so what i want to do is just say app
237:26 - port
237:27 - equals four four four four
237:30 - four slash
237:36 - and so i want to see if it picks up this
237:37 - one
237:39 - again i'm going to assume it's going to
237:40 - be the 4321 because the github yaml
237:43 - should be uh high priority
237:46 - that's how i would code it and so it is
237:49 - four three two one
237:50 - okay
237:52 - so now i guess the next question is is
237:54 - what happens if i remove
237:57 - this
237:58 - and we do the url is it gonna pick up
237:59 - the one from the account settings or
238:00 - just going to pick up the one from here
238:03 - so just say remove env
238:07 - sync those changes we'll say okay
238:13 - and we'll go back here and
238:16 - we will just copy the link address again
238:19 - we will paste it on in there and here
238:21 - i'm going to say app port equals 444
238:25 - forward slash
238:27 - this looks okay to me we'll hit enter
238:33 - we'll see what it picks up
238:44 - and it's eight seven six five so um
238:47 - unless i did it wrong but i don't think
238:48 - i did
238:49 - um it looks like that the priority is
238:53 - um
238:54 - git pod yaml then account settings and
238:57 - then the url
238:58 - is last in terms of priority okay
239:01 - so i mean that's pretty much all we
239:02 - really need to know about environment
239:03 - variables there are environment
239:05 - variables that are set for um i guess we
239:08 - could look at also
239:09 - the gitpod prefixes so if you type in
239:11 - env
239:12 - and you go grep
239:15 - gitpod
239:16 - you can see all the ones that are set by
239:18 - getpod there so if we just scroll up
239:20 - here for a second
239:22 - they have repo root so that's the root
239:24 - of the repository so that might be
239:25 - useful if you need to reference it an
239:27 - elix writer segment so i guess they're
239:30 - using segment which is a
239:32 - analytics tool the workspace id the
239:35 - interval which is whatever i assume it's
239:37 - how often it checks i guess that might
239:39 - be for the timeout because it says three
239:42 - zero zero zero and i know that it's like
239:45 - 30 minutes so maybe if we were to extend
239:47 - our time that would increase
239:49 - the context url so that's just where it
239:52 - was referenced to the instance id so i'm
239:54 - assuming it's the underlying container
239:56 - or something like that
239:57 - the url
239:59 - thea i think he has something to do with
240:00 - eclipse i'm not really sure
240:02 - context so we have a bunch of stuff here
240:05 - so you know
240:06 - nothing that you would really be trying
240:08 - to utilize but um you know there's a lot
240:10 - of stuff here you can see my email uh
240:12 - they get podcasts but um
240:15 - and you can't obviously override these
240:17 - so i'm not gonna go bother to show that
240:18 - but just so you know you cannot override
240:21 - those values
240:22 - um or set something with get pod
240:25 - underscore i i'm not sure let's actually
240:27 - go take a look and see if that's
240:29 - possible so what i'm going to do here
240:31 - i'm just going to make up one like
240:33 - underscore andrew and just confirm is if
240:34 - you're able to set it i like i would
240:36 - think that it's just if there's ones
240:38 - that they decide to set you can't set
240:40 - ones with those but
240:41 - i just want to see what happens so we'll
240:43 - copy this link
240:45 - and we'll just paste it up here
240:47 - i'm going to just say something like get
240:49 - pod andrew and i'm going to say equals
240:52 - brown and we'll do a forward slash it's
240:54 - my assumption that
240:56 - it will get set but it can get overrided
241:07 - and we'll give it a moment here
241:09 - and so we'll just kill the server and
241:11 - what i want to do here is just type in
241:13 - env get pod underscore
241:17 - andrew
241:20 - uh oops we gotta grab that
241:23 - okay so it seems like if you set
241:24 - something with get pot underscore it
241:25 - just gets wiped out won't even exist uh
241:28 - but yeah there you go that's environment
241:29 - variable so just close that stuff off
241:31 - and we might just want to delete that
241:33 - out there and we are good
241:36 - [Music]
241:40 - hey this is andrew brown and we are
241:42 - looking at the open mode configuration
241:44 - option when we are defining our start
241:46 - tasks so open mode allows you to
241:48 - configure how the terminal should open
241:50 - relative to the previous task so here's
241:53 - an example of me writing a git pod yaml
241:56 - file and i have a bunch of different
241:58 - tasks and they all have a variety of
242:01 - different open modes and so what you're
242:03 - looking for here and i know it's hard to
242:04 - see but it's this box over here so
242:07 - you're going to just see some
242:07 - interesting things where
242:09 - some are split and so when you click
242:11 - into this one it's showing all four of
242:12 - those and so hopefully i can show that
242:14 - better um in the follow along here but
242:17 - there are four different options we can
242:19 - set so we have tab after so opens in the
242:21 - same tab group right after the previous
242:24 - tab tab before so it opens in the same
242:26 - tab group
242:27 - left before the previous tab split right
242:29 - so splits and adds the terminal to the
242:31 - right and split left so splits then adds
242:33 - the terminal to the left okay
242:36 - [Music]
242:40 - hey this is andrew brown and we are
242:42 - taking a look at vs code extension so
242:44 - what is the vs code extension well it
242:46 - lets you install features themes
242:48 - programming languages
242:49 - uh support debuggers and other tools to
242:52 - your vs code editor to support your
242:53 - development workflow and so you know if
242:56 - i wanted to install something i'd open
242:58 - up the extensions panel or explorer and
243:00 - from there i could install something
243:01 - like vim that's something i really like
243:03 - for my keyboard there and so vs code
243:05 - extensions are added to a github
243:07 - workspace in three different ways so you
243:08 - have built-in extensions these are
243:10 - extensions installed by default by git
243:11 - pod the open vsx registry so this is a
243:15 - community marketplace for extensions
243:17 - user extension so these are extensions
243:18 - not in the open vsx registry or we're
243:22 - just saying like extensions that have
243:23 - been installed by the user okay and so
243:27 - vs code extensions are named dot v s i x
243:31 - um i assume it stands for visual studio
243:34 - integration extension i don't know if
243:36 - the i is for i could not find out but
243:38 - they are vsix
243:40 - and so it is essentially just an
243:42 - archived file so if you were to rename
243:44 - this to a dot zip you could actually
243:46 - open up the archive and view the source
243:47 - files so there you go
243:52 - [Music]
243:54 - so git pod comes pre-installed with many
243:56 - vs code extensions and you can view the
243:58 - pre-installed extensions by searching at
244:00 - sign built-in within the extensions
244:03 - panel here so just notice this icon here
244:05 - where it looks like
244:06 - four little blocks and one is broken off
244:08 - here if i type in at sign built in in
244:11 - the search at the top these are all the
244:12 - ones that are coming pre-installed and
244:13 - there's a lot as you can see here almost
244:16 - looks like
244:17 - about 80 that are installed if you count
244:19 - up the numbers there and so i just went
244:22 - through it and mostly what's interesting
244:23 - are the is the feature support that's
244:25 - installed because that's going to change
244:26 - the behavior and so here are ones that i
244:29 - thought were notable or interesting to
244:31 - show select git github get pod web grunt
244:33 - gulp image preview microsoft account
244:35 - merge conf conflict things like that but
244:38 - you know if you want to know what's
244:39 - being sold just take a look there you
244:41 - might learn something new and improve
244:44 - your uh workflow okay
244:49 - [Music]
244:50 - hey it's andrew brown and we're taking a
244:52 - look at the open vsx registry so it is a
244:54 - vendor neutral open source alternative
244:56 - to the visual studio marketplace and
244:58 - gitpod uses vs code extensions from the
245:01 - open vsx registry as opposed to the
245:04 - visual studio marketplace and so this is
245:06 - kind of a a screenshot of the home page
245:09 - of the openvsx registry which is at
245:11 - openhyphenvsx.org very simple you just
245:13 - search the name
245:15 - and you can find whatever you want the
245:16 - question is why are they using openvsx
245:19 - registry as opposed to the visual studio
245:21 - marketplace well
245:22 - this vsix files downloaded from the
245:25 - visual studio marketplace should not be
245:27 - installed
245:28 - in gitpod because microsoft prohibits
245:31 - the direct use of their marketplace by
245:33 - any non-microsoft software even though
245:36 - most extensions are actually open source
245:38 - and not developed or maintained by
245:39 - microsoft so this is kind of one of
245:41 - those weird things where you know
245:43 - microsoft is not being as open as they
245:45 - could be uh for their own self-interest
245:48 - and so the openvsx registry is there to
245:50 - ensure that
245:52 - um you know organizations that are
245:54 - investing into cloud developer
245:55 - environments aren't going to run into
245:56 - licensing issues and also to make uh the
245:59 - market uh fair and competitive so
246:03 - that's kind of really interesting and i
246:05 - looked it up like where this was hosted
246:07 - and it's actually eclipse
246:09 - that is the one that is behind this and
246:12 - eclipse has been an open source id for
246:15 - forever and so it's really great that
246:17 - they are doing this for the community
246:19 - so when you search extensions uh within
246:22 - the gitpod vs code ui extensions panel
246:25 - it will search extensions in the openvsx
246:27 - registry so if you can find it on the
246:29 - openvsx website
246:31 - then you're going to find it in here as
246:33 - well
246:34 - and for ones that you cannot find in
246:35 - here
246:36 - or
246:37 - ones that you need to install directly
246:39 - that's where you're going to be
246:40 - installing them yourselves which we'll
246:41 - talk about
246:42 - soon enough okay
246:43 - [Music]
246:48 - so when you are exploring the extensions
246:50 - panel and you're quickly looking to
246:52 - install some extensions you can right
246:55 - click on this little cog here um right
246:58 - here and what it will do is it'll open
247:00 - up a context menu it's called a context
247:02 - menu because it's opening
247:04 - a menu within the context of what you
247:06 - clicked that's it's just a general uh
247:07 - programming term and so you'll have this
247:09 - option to say add to git pod yaml so if
247:12 - you click that that will just populate
247:14 - your document for you
247:16 - which will save you the trouble of
247:18 - populating that yourself
247:20 - um but uh you just have to remember
247:22 - you'll have to commit that uh code to
247:24 - your repository for it to persist okay
247:26 - [Music]
247:30 - all right so let's talk about user
247:32 - extensions so there are two ways to
247:33 - install extensions beyond the built-in
247:35 - extensions the first is for all users
247:37 - for a project so git pod configuration
247:39 - file extension vs code.extensions is
247:42 - where we are going to set that value
247:44 - which we'll see here in a moment or
247:45 - there's the second case where you're
247:47 - only installing for the current user and
247:49 - that's we're going to be using the vs
247:50 - code settings sync feature which we'll
247:52 - see in the next video so down below here
247:55 - is an example of a gitpod configuration
247:57 - file where we're setting vs code
247:59 - extensions and so we're installing ones
248:01 - that are from the openvsx registry by
248:03 - giving them their name and then down
248:05 - below we're specifying a url of a i
248:07 - assume it has to be public-facing
248:08 - self-hosted vs code extension i think
248:10 - that this can also be a local file path
248:13 - because when you try to import a
248:16 - vs ix file um within the gitpod
248:19 - vs code interface it actually
248:22 - first looks locally so that would be
248:24 - interesting to
248:25 - uh find out but you know probably in
248:27 - practicality you're going to always have
248:29 - it uh online somewhere so anyway um for
248:33 - the extensions i just want to show you
248:34 - that if you were to open up the open vsx
248:36 - registry you can see the name there i
248:37 - know it's hard because it's orange but
248:39 - that kind of helps you understand what
248:41 - thing you are pulling in and putting
248:43 - into that file okay
248:48 - [Music]
248:49 - hey this is andrew brown and we are
248:50 - taking a look at a feature of vs code
248:53 - called settings sync so this is a
248:55 - feature to sync your configuration such
248:58 - as settings key bindings installed
249:00 - extensions across your machines so you
249:02 - are always working with your favorite
249:04 - setup and so with the desktop version of
249:07 - vs code the one you install locally not
249:09 - the one in the browser part of git pods
249:11 - you need to log in to a github or
249:14 - microsoft account to store the sync
249:15 - settings which is a json file so if you
249:18 - opened it for the first time it says
249:19 - sign in with microsoft sign in with
249:21 - github but with git pod when you turn on
249:24 - the settings syncs feature you're not
249:26 - going to be choosing an account to log
249:28 - in because you already are authenticated
249:30 - with something like github gitlab or
249:34 - a bitbucket but the settings data i
249:36 - believe will be stored on the gitpod
249:38 - servers and your configuration will
249:40 - persist across all your workspaces and
249:42 - when we say that we're talking about all
249:44 - the getpod workspaces not necessarily
249:46 - the ones on your local machine okay
249:48 - that's something else so you can set
249:51 - extensions within your dot git pod yaml
249:53 - file which we'll learn in this course
249:54 - however some extensions which are
249:56 - designed for developers personal
249:58 - preferences should not be set here and
250:00 - instead settings things should be used
250:02 - so a very good example here would be the
250:04 - vs code vim changes keyboard mode okay
250:07 - because this could greatly impact other
250:09 - developers so i use bim i really like
250:12 - vim and so i
250:13 - had applied this here and then one of
250:15 - our other developers said hey i don't
250:17 - like using vim i want to turn this off
250:18 - so it doesn't belong here and so that's
250:20 - the reason i'm bringing this up and also
250:22 - just to describe how setting syncs works
250:24 - a little bit different okay
250:26 - [Music]
250:30 - hey this is andrew brown and in this
250:31 - follow along we're going to take a look
250:33 - at
250:34 - vs code extensions or
250:37 - in the context of get pods so what i'm
250:38 - going to do is just make a new get pod
250:41 - and
250:42 - there's not really anything special
250:43 - we're going to do in this one it's going
250:44 - to be more focused around the extensions
250:46 - but we got to launch something so whoops
250:48 - did i just launch an existing
250:50 - environment i'm going to go ahead and
250:51 - just create a new
250:53 - repository so we can just play around in
250:55 - something new and so i'll just say git
250:57 - pod ext for extensions we'll make it
251:00 - private as per usual create the new
251:02 - repository
251:03 - and we'll give it a moment here and
251:05 - we'll go ahead and hit the get pod
251:06 - button so what i'm going to do is just
251:08 - go over to open vsx registry and we'll
251:11 - just take a look at what this is so you
251:13 - saw me talking about it and um
251:15 - it looks a lot cooler in dark mode but
251:17 - it's not flipping over to that right now
251:19 - so we're in light mode but this is a
251:21 - vendor neutral open source marketplace
251:23 - and basically there's the other one
251:25 - which is the vs code marketplace right
251:31 - and there's a problem because you know
251:33 - these marketplaces look really similar
251:35 - there's a problem in the sense that
251:37 - um microsoft has problematic licensing
251:40 - or rules around this thing and that's
251:42 - why this one exists
251:44 - so this isn't the problem this is more
251:46 - so the problem or at least what
251:47 - microsoft has done with this which is
251:49 - kind of unfortunate but um the great
251:51 - thing is that you know if you are
251:53 - somebody that is creating
251:54 - um vs code extensions you can just put
251:57 - them in both marketplaces but if you
251:59 - could just put them in here honestly um
252:02 - and so i believe this repository is
252:04 - managed by clips if i just try to find
252:06 - it here yeah so this service is operated
252:08 - by the eclipse foundation if you don't
252:09 - know
252:10 - clips they are kind of a big deal
252:12 - because they've been around for
252:14 - such a long time uh which is really nice
252:17 - here
252:18 - and so the source code for open vsx is
252:20 - managed by the openvsx team which is
252:23 - very cool as well and so they have this
252:25 - i don't think i've ever actually looked
252:26 - at this but let's just take a look here
252:30 - so yeah so there's that with uh eclipse
252:32 - okay
252:33 - but anyway so here are all of our um
252:37 - extensions but the great thing is is
252:38 - that if you are over here
252:40 - in the extensions panel here anything
252:43 - you search is already going to look here
252:44 - so if i look up something for
252:46 - ruby
252:48 - okay so we might have like
252:51 - this one here
252:52 - the reborn nix dot ruby
252:56 - and you go over to ruby over here
253:00 - and this one's not installed but i'm
253:02 - gonna go ahead and install it i wonder
253:04 - if it will pull up where it's from
253:08 - let me just see
253:10 - here marketplace so if we go click the
253:13 - marketplace
253:14 - yeah it takes us to openvsx this version
253:17 - of ruby extension was published by
253:18 - openvsx this user account is not
253:21 - verified from the publisher
253:22 - uh of this extension okay but anyway so
253:25 - here it is and so uh you get an idea of
253:29 - of what that is and so when you install
253:31 - these extensions gitpod is going to
253:33 - already have
253:34 - um
253:36 - they're going to have
253:38 - the sync turned on it's here in the
253:39 - wheel so
253:41 - the great thing is once you install
253:42 - something you like it's going to persist
253:44 - um to other things but if you're working
253:46 - on a ruby project you might want to just
253:48 - uh include that into your getpod.yaml
253:50 - file so what i would do
253:52 - is just create a i'd say get pod open in
253:55 - vs code
253:56 - and we would say whoops i actually want
253:58 - to do that i want to sorry open a new
254:00 - terminal
254:01 - and i'm just going to initialize a new
254:03 - file
254:05 - and within here we're going to do an
254:07 - extension i can't remember what it is so
254:09 - i'm just going to look it up so get pod
254:11 - extensions
254:13 - like the syntax for it
254:16 - and there it is so i'm just going to go
254:17 - ahead and grab that little part there
254:19 - we'll go ahead and paste it on in there
254:21 - allow
254:22 - and so we know that this extension is
254:24 - called this and it's already in the
254:27 - uh open vs code or the open registry
254:29 - there and so we can just do that i'm
254:32 - just going to double check to make sure
254:33 - that's the correct syntax notice you can
254:35 - also put that sign version on it if you
254:37 - want or you can specify a vsix file
254:39 - which maybe we'll try to do this one
254:41 - here
254:43 - but i guess to really test this we're
254:44 - going to need a secondary account where
254:46 - we don't have this already installed
254:49 - so what i'll do
254:51 - is um
254:55 - maybe i can make a snapshot for this
254:57 - because we haven't done any snapshots
254:58 - yet
254:59 - but anyway so i'll just create a new
255:00 - ruby file here we'll just say hello dot
255:03 - rb
255:04 - and we'll type in puts
255:08 - so
255:09 - hello world
255:11 - and we'll go ahead and just make sure
255:13 - that works not that it matters but we'll
255:15 - just run it for any reason
255:17 - okay so that works fine and so we kind
255:19 - of have this little basis of a
255:22 - thing using that extension so we'll go
255:24 - ahead and
255:25 - run or commit that so
255:27 - initial commit
255:30 - and then what i'm going to do here is
255:31 - i'm going to go ahead and create a
255:32 - snapshot so we'll say git pod share
255:36 - workspace snapshot now i could share
255:38 - this in real time but i figured it'd
255:39 - just be easier to take a snapshot and
255:41 - then would be our opportunity to give
255:42 - that a go
255:45 - and i have firefox still open here on
255:48 - the side here so i'll just share it with
255:49 - this account over here
255:51 - so down below it created the snapshot
255:53 - i'm going to copy that url i'm just
255:55 - going to paste it on it over here and
255:56 - see what happens
256:00 - notice that this person isn't
256:01 - technically in the same project or
256:03 - anything i could just share it with
256:04 - anybody
256:06 - and so here is that project um
256:10 - and we'll give it a moment here
256:13 - we'll have to look at snapshots in a
256:15 - little more detail when we get to that
256:16 - section but what i want to find out is
256:17 - is this extension installed here on this
256:20 - version here with firefox so now if i go
256:22 - over to ruby
256:26 - is it installed
256:28 - it is installed okay so this firefox uh
256:31 - uh one is my other
256:33 - uh my main um
256:35 - getpod account and i did not install
256:36 - this so you can tell that it came along
256:38 - there with the getpod.yaml file didn't
256:41 - like say hey we installed it other than
256:43 - the fact that we checked it but that is
256:45 - uh good to see
256:47 - i think it can be interesting if we can
256:49 - try to bring in a vsix file
256:52 - so that will be something we'll give it
256:54 - a go here so maybe what we could do
256:57 - um maybe there's like something a little
256:59 - bit more obscure that we could uh
257:01 - install
257:03 - just go back here
257:05 - i was trying to think of something that
257:07 - probably isn't installed
257:12 - like maybe this thing here
257:15 - okay don't know what it is
257:17 - but what i'll do
257:19 - yet another client cool but what i'll do
257:22 - is i'll go over to the extensions here
257:24 - and we'll just see if we have it
257:26 - installed yet
257:27 - just in case it's not good so what i
257:30 - want to do is see if i can download this
257:31 - and then reference it so we'll hit
257:33 - download
257:35 - and we're going to download that vsix
257:36 - file and i'm just curious because they
257:38 - say that you can rename these files
257:41 - right you can rename these files
257:43 - and from there if you rename them with
257:45 - zip you can open them up
257:48 - so that's what i'm going to do i'm just
257:49 - doing this off screen here by the way
257:51 - just because i have so many things here
257:53 - i'm just going to maybe expand that here
257:55 - there i'm just showing you the file i'm
257:56 - going to go here and rename this to
257:59 - zip
258:01 - okay
258:02 - we'll say yes
258:04 - and i'm just going to open it up
258:06 - and then here in winrar we can see the
258:08 - contents of this file
258:12 - and
258:14 - i'm kind of interested in its contents i
258:16 - might go ahead and actually download
258:18 - this
258:19 - into our git pod
258:21 - that's what i'm going to do
258:23 - so what i'm going to do is go back here
258:25 - and we're just going to copy the link
258:26 - address here
258:30 - and from here i'm just going to do
258:34 - curl
258:36 - maybe wget i prefer wget
258:40 - and we're just going to download that
258:41 - file within this here
258:43 - so if we go over here we can see the
258:45 - vsix file
258:47 - and so now uh what i can do is i can
258:49 - just copy this
258:51 - and then we're going to type it again
258:53 - and just change it over to zip
258:56 - and then i think i can just type unzip i
258:58 - always forget what it is but we'll try
259:00 - it and it did it just unzipped the
259:01 - contents there so
259:03 - we have this file here an xml file that
259:05 - describes something
259:08 - and then we have
259:10 - the manifest file so i guess it
259:12 - describes
259:13 - its manifest
259:15 - and then we open up the extension here
259:17 - is a bunch of stuff so it looks like you
259:18 - can set uh the icon here
259:22 - looks like it's just javascript though
259:23 - we opened up this package so
259:26 - there's like a readme about it
259:29 - i get i've never made a extension so i'm
259:31 - just kind of poking around here to see
259:32 - what there is
259:35 - so probably like this code is
259:38 - pre-compiled out so i can't imagine like
259:40 - the developer works this way so this is
259:42 - like a compiled uh version of their
259:45 - their source code so you probably
259:46 - wouldn't want to uh
259:48 - like
259:49 - um unravel this so it's not like it's
259:51 - showing all the details of it but you
259:53 - know just curious to kind of open that
259:55 - up but anyway now that we have the that
259:58 - there let's go see if we can actually
259:59 - specify now if you want to install this
260:01 - locally i'm pretty sure if we go to
260:05 - i saw it the other day here
260:08 - i thought it was up here in the top
260:09 - right corner people gotta go extensions
260:10 - ah here we go let's see consult install
260:12 - from vsix and so here we could specify a
260:16 - a path
260:18 - all right
260:19 - but i don't know if this would actually
260:21 - take this from a
260:22 - a local a local path here because they
260:25 - don't show that in the example over here
260:27 - see how it's a url so i think that we
260:29 - would have to um host that somewhere so
260:32 - to speak so what i'm going to do is i'm
260:34 - just going to go ahead and
260:36 - commit this
260:38 - all this stuff uh we'll just say git add
260:41 - all git commits
260:44 - hyphen m um
260:46 - ext code
260:48 - the only problem is repo is not public
260:50 - facing
260:52 - and if it's not public facing i'm not
260:53 - sure how it's going to pick up that
260:54 - extension
260:58 - so
261:00 - maybe what i should do
261:04 - and we can commit all this stuff i don't
261:05 - care what i'm going to do is just create
261:07 - a new repository here that's public
261:08 - facing
261:13 - get pod whoops
261:16 - get pod exe example
261:19 - and we'll make this one public
261:22 - but this time around i'm just going to
261:23 - upload a file so here we could say
261:24 - upload an existing file
261:27 - and so i'm just going to drag that file
261:29 - on in
261:36 - okay i'm just renaming it back to what
261:38 - it was so we'll go there
261:40 - and so now this file is uploaded in this
261:42 - repository
261:44 - in a public repository and so now what i
261:47 - want is just the raw version of this
261:49 - file so
261:52 - maybe we just
261:53 - yeah we grab this link here so we go
261:54 - copy link address and we go back over to
261:57 - here
261:58 - and get rid of this thing here get out
262:01 - of here it won't get out of the way i'm
262:04 - not sure how to get rid of context menus
262:05 - that are like that
262:08 - that's really annoying
262:10 - okay there we go it just closed on its
262:12 - own i didn't do anything so i'll paste
262:14 - that on in there and again i don't know
262:15 - this is going to work but i'm just going
262:16 - to try it anyway and so what we'll do is
262:19 - just
262:20 - update our commit here so
262:23 - try and install
262:26 - http yak
262:31 - okay and we'll save changes we'll say
262:33 - okay
262:36 - and i kind of lost where we are so i'm
262:38 - going to open up the context here
262:41 - and we'll close the old tab and we'll
262:42 - just hit get pod and we'll see if that
262:43 - actually installs while it's going let's
262:45 - go let's go take a look at what this
262:46 - actually is get another client quickly
262:48 - and easily send rest soap graphql or
262:51 - grpc request directly in your editor
262:57 - so i guess it's like kind of a little
262:58 - convenience thing
263:02 - yeah i've never heard of it
263:04 - sounds cool though
263:07 - um and so this has started back up and
263:10 - so what i want to know is is this
263:12 - installed so we go to our extensions
263:16 - and i think that it's installing this
263:18 - but we'll take a look here http yak
263:22 - and click that it is now installed so
263:24 - there you go that's uh that's kind of
263:26 - interesting there
263:27 - um
263:29 - another thing that we can look at is the
263:30 - built-in extension so if you type in at
263:32 - sign built in
263:33 - this is all the stuff that is um
263:35 - installed by default for you
263:37 - and so there's quite a bit quite a lot
263:39 - of interesting stuff here so you can
263:40 - just like scroll through and kind of see
263:42 - the information so you got features lots
263:44 - of themes
263:45 - and lots of supported programming
263:47 - languages but you know
263:49 - is what it is and everything's really
263:51 - snappy too with all the stuff installed
263:52 - so
263:54 - it's really great um but that's pretty
263:56 - much all i really wanted to show for
263:57 - extensions
263:59 - so we'll just close all this stuff and
264:01 - there we go
264:02 - [Music]
264:06 - hey this is andrew brown and we are
264:08 - taking a look at get pod workspaces
264:10 - which represents an ephemeral isolate
264:13 - runtime system running within a docker
264:15 - container on a kubernetes cluster so
264:18 - there's a lot going on there and so i
264:20 - just want to take an opportunity to
264:22 - describe in brief a lot of these terms
264:24 - so first of all what is a container this
264:26 - is a runtime environment that includes
264:27 - configuration for os so operating system
264:30 - memory disk and network access what is
264:32 - docker so this is an open source
264:34 - container containerization platform to
264:36 - package application or workloads
264:39 - into containers we have kubernetes so
264:42 - kubernetes is a open source container
264:44 - orchestration to coordinate and maintain
264:46 - many container images and then we have
264:49 - ephemeral which means lasting a short
264:52 - amount of time and then a runtime system
264:54 - a piece of software that provides the
264:56 - programmer a more convenient environment
264:58 - for running programs in our case the
265:00 - runtime system is intended for
265:01 - development in practicality you need to
265:03 - remember all these terms not so much
265:05 - just the fact that workspaces
265:08 - are ephemeral so they only last a short
265:10 - amount of time and they're for
265:11 - development and they use containers okay
265:13 - [Music]
265:18 - hey this is andrew brown and we're
265:20 - talking about the underlying git pod
265:21 - resource size because this is a question
265:24 - that my co-founder came to me and said
265:25 - what is the power under the hood for
265:27 - these workspaces and when i looked into
265:29 - it i discovered that gitpod does not
265:31 - allow you to choose the power of the
265:33 - underlying instance and that might sound
265:35 - like a negative but it's actually a very
265:37 - strong positive because they're
265:39 - abstracting away a decision for you so
265:42 - you can just focus on the business value
265:43 - and that is what we call a true
265:46 - serverless offering okay and so
265:49 - you could say gitpod is a serverless
265:51 - cloud developer environment
265:54 - so the underlying computing power is
265:55 - unknown but we generally know the limits
265:57 - of an individual workspace because if
265:59 - you go into the
266:01 - discourse the um the forms for git pod
266:05 - we've seen
266:07 - engineers at gitpod describe what limits
266:10 - there are
266:11 - and so the generally known limits is
266:13 - like
266:14 - v7v cpus
266:16 - 12 gigabytes of ram 30 gigabytes of disk
266:20 - and you can see there are some um
266:22 - explanations as to what that is but the
266:24 - idea is that you shouldn't really have
266:26 - to worry about it it's the idea is you
266:27 - just pay a fixed cost and whatever size
266:30 - you need is available to you
266:33 - um but you can always self-host right so
266:35 - if you do need more direct control of
266:37 - the underlying computing layer i think
266:39 - that would be an option where you would
266:41 - have to self-host but there's so much
266:42 - you can do with git pod and you don't
266:44 - have to worry about
266:46 - picking what virtual machine you need to
266:48 - launch it just works okay
266:50 - [Music]
266:55 - okay let's talk about workspace
266:56 - lifecycle or just features of a
266:59 - workspace so the first is workspace
267:00 - timeout so after a period of inactivity
267:02 - a workspace will be stopped the default
267:04 - timeout is 30 minutes timeouts can be
267:06 - extended to 60 or 180 minutes with the
267:08 - unleashed plan and there is a few
267:10 - caveats that we're missing there but
267:11 - that's okay we have a slide dedicated uh
267:14 - or video dedicated just to timeout okay
267:16 - then we have our
267:17 - ephemeral storage so this is storage
267:20 - that will be on a virtual disk available
267:22 - to the workspace when a workspace is
267:24 - stopped the data on the affir
267:27 - affair remote
267:29 - storage is persisted and saved
267:31 - so when a workspace is deleted or
267:33 - terminated the data on the storage is
267:36 - lost so only the data located in that
267:38 - for slash workspace is going to be
267:40 - persisted so
267:42 - anything out there when you stop it
267:43 - there's no guarantee that it's going to
267:45 - be there then we have garbage collection
267:47 - so git pod allows for a certain amount
267:49 - of stopped workspaces to remain for
267:51 - reuse
267:52 - and this is really useful if you ever
267:53 - have to go back a few versions there i
267:56 - don't know if it stops at 200 but i just
267:58 - know that we have a range selection of
267:59 - 50 to 200 so it's my assumption that
268:02 - there's nothing beyond 200 why you need
268:04 - more i don't know but i'm just stating
268:06 - that is there for you so gitpod will
268:08 - begin deleting workspaces beyond a
268:10 - certain number uh uh uh based off of
268:12 - days of non-use so currently it's
268:15 - hardcoded for 14 days so if you have
268:17 - like 50 or 30 workspaces and you haven't
268:20 - touched them for 14 days they're gonna
268:21 - get permanently deleted and you won't be
268:23 - able to spin them back up and i mean
268:25 - generally the idea is that you don't
268:27 - really want to be leaving workspaces
268:28 - with code lying around for that long so
268:31 - i think that's okay
268:33 - [Music]
268:37 - okay so let's talk about the underlying
268:39 - life cycle and phases for a workspace to
268:42 - distinguish from light like when i said
268:43 - workspace lifecycle earlier i meant
268:45 - let's just say like features but that's
268:46 - what the documentation called it so now
268:48 - we're actually talking about the actual
268:50 - life cycle of a workspace here so when a
268:52 - workspace is created it will go through
268:54 - a fixed life cycle separated in phases
268:56 - these phases are currently not
268:57 - observable by the end user within
268:59 - getpodio
269:00 - however i would imagine that if you are
269:02 - doing self-hosted git pod
269:05 - open source version so on a managed
269:06 - kubernetes cluster this information
269:08 - would be somewhere available in the logs
269:10 - we might discover that as we do the
269:12 - self-hosted
269:14 - follow along to see what we can see
269:15 - there but
269:17 - it's still useful to go through these
269:18 - states so we understand what's happening
269:19 - under the hood so the first is unknown
269:21 - so indicates an issue within the system
269:23 - and that it cannot determine the actual
269:25 - phase of the workspace we have preparing
269:27 - so this is where it's building the
269:28 - docker image for the workspace pending
269:30 - the workspace does not yet consume
269:31 - resources in the cluster creating the
269:33 - workspace is currently being created
269:35 - initializing the phase in which the
269:37 - workspace is executing the appropriate
269:38 - workspace initializer running so the
269:41 - workspace is able to actively perform
269:43 - work either by serving a user through
269:47 - thea or as a headless workspace
269:50 - interrupted the container should be
269:52 - running but it is temporary and
269:54 - available it should
269:55 - it should self-resolve or
269:58 - running or just running or stopping
270:00 - sorry and so stopping that's when the
270:03 - workspace is currently shutting down
270:04 - then stopped uh the workspace ended
270:06 - regularly because it was shut down so
270:08 - again uh you know we might not see this
270:10 - until we do the self-hosted section here
270:12 - but i always think it's useful to kind
270:14 - of pull this information
270:16 - up up front here so we know what's going
270:17 - on
270:18 - [Music]
270:22 - hey this is andrew brown and we are
270:23 - taking a look at workspace instance
270:25 - types so within a workspace cluster
270:27 - several types of workspace exist the
270:28 - first is regular so when a user launches
270:31 - a workspace with the visible code energy
270:34 - ui this is considered a regular
270:36 - workspace or just as we call it a
270:37 - workspace
270:38 - other types of workspaces are
270:41 - headless because there is no code editor
270:43 - ui for the user to interact with the
270:45 - first being ghost so ghost workspaces
270:47 - are placeholders in the system they are
270:49 - used to scale up nodes ahead of time and
270:51 - are replaced by regular workspaces when
270:53 - needed they are a custom implementation
270:55 - of preemptable kubernetes pods then you
270:58 - have pre-builds and you will encounter
270:59 - this in the git pod i o
271:02 - and so prebuilds are triggered
271:03 - automatically or manually performing the
271:05 - before init execution order sets within
271:08 - a get pocket fiction file task so a
271:10 - pre-build will generate a snapshot and
271:12 - upload their log output for later
271:14 - consumption i haven't figured out where
271:15 - that log output is but it says that they
271:18 - do it and then builds i had to surmise
271:20 - are when a user manually takes a
271:22 - snapshot for sharing a workspace uh
271:25 - you know via a snapshot okay so there's
271:28 - that i think it's called snapshot but
271:29 - when you open up the
271:31 - getpod
271:32 - command palette there's like an option
271:34 - to
271:35 - do that there and again these are those
271:37 - headless workspaces okay
271:39 - [Music]
271:43 - hey this is andrew brown and we are
271:44 - looking at timeouts for getpod
271:46 - workspaces and there's five things i
271:48 - want you to know so when you stop an
271:50 - instance the workspace will shut down
271:53 - instantly deleting instance will delete
271:55 - the current state of the workspace
271:56 - stopping it will persist the data okay
271:59 - then when you close a browser tab the
272:02 - workspace will shut down in three
272:03 - minutes this is really great to know
272:05 - because i i never knew when i closed the
272:07 - browser tab what would happen there but
272:08 - it reached out and said don't worry
272:10 - andrew after three minutes it will shut
272:11 - down so that's nice to know uh then
272:13 - there's the case where you might leave a
272:15 - browser tab open so by default after 30
272:18 - minutes it will turn off but if you need
272:20 - beyond 30 minutes what you can do is
272:23 - upgrade to the unleashed plan and that
272:25 - allows you to set a need new default of
272:27 - 60 minutes or you could just say one
272:29 - hour there
272:30 - and then there's a case where you can
272:31 - even have it even longer than that so
272:33 - maybe you need a timeout because you're
272:35 - doing like a long build so you can boost
272:37 - the time of the current workspace up to
272:39 - three hours when i say up to i think you
272:41 - just choose three hours uh and uh that's
272:44 - again with the unleashed plan so here's
272:46 - kind of an example where somebody has
272:47 - the default to 60 minutes and for
272:49 - whatever reason they need to extend it
272:51 - so they press that button
272:52 - and the idea behind boosting is it's
272:54 - useful when you have a computational
272:56 - task that is going to take a long period
272:58 - of time so you're going to be inactive
273:00 - maybe you need to leave for lunch and
273:02 - ensure it remains running so you're just
273:04 - like okay i'm going to press that button
273:05 - like maybe i'm going to meeting and i
273:07 - have and i just want to make sure my
273:08 - workspace doesn't shut down for whatever
273:10 - reason so it's not interrupted uh so you
273:12 - know those are the five cases that i
273:14 - want you to know okay
273:19 - hey this is andrew brown and what i want
273:21 - to show you here in get pod is a a
273:24 - feature of the unleashed plan or
273:26 - actually two features so what i'll do is
273:28 - make my way over to settings
273:30 - and go over to plans just to show you
273:32 - that i've temporarily upgraded here so
273:34 - we can show you timeout and three hour
273:37 - timeout boost now i don't think there's
273:38 - an option to choose from 30 minutes to
273:40 - one hour once you are on this plan it
273:42 - just is one hour timeout uh and it's not
273:44 - something you have to really worry about
273:45 - because you have unlimited hours at this
273:47 - time so it's not something you have to
273:49 - like try to conserve where you are
273:51 - trying to worry about this meter up here
273:54 - but let's showcase what the three hour
273:55 - timeout boost looks like so what i'll do
273:57 - is go back to my workspaces here you can
273:59 - do this with anything just launch
274:01 - whatever you can here so i'm just going
274:03 - to open something that i was recently
274:05 - working on so that was gke
274:08 - i'm not sure if this one was even
274:09 - successful i think i might have been
274:11 - making a video for it and it didn't work
274:12 - out which is totally fine but i'll just
274:14 - launch it anyway again doesn't matter
274:16 - which one you launch i just want to show
274:18 - you how do you do that timeout boost
274:21 - and i was saying like that timeout boost
274:23 - is really good if you have some long
274:24 - running tasks uh and you know that
274:26 - you're going out for lunch and you just
274:28 - want to make sure that that that thing
274:29 - keeps running so um i believe that it's
274:33 - down below here so i'm just looking for
274:35 - it if there is a boot so down below here
274:37 - see it says workout timeout 60 minutes
274:40 - click to extend and so you can do it
274:42 - here i'm not going to click it just yet
274:43 - but i just want to see if it shows up
274:44 - under the command pal so i clicked on
274:46 - the get pod logo in the bottom left
274:47 - corner it says extend work space timeout
274:51 - so what i'm going to do is click the one
274:52 - in the bottom right corner i know it's
274:53 - really hard to see but just know that
274:54 - i'm clicking it it says work timeout has
274:56 - been extended to three hours now would
274:59 - that be reflected anywhere i'm not sure
275:01 - so we'll just go to get podio we're
275:03 - gonna go look at this workspace
275:05 - and there's no reflection that we know
275:08 - that it's currently being extended so
275:10 - you just have to know
275:11 - if we go back here let me just see here
275:13 - what happens if i hover over it so it
275:15 - says 180 minutes click to extend can i
275:17 - extend it again i doubt it
275:19 - okay let's go over here again
275:21 - so yeah it just says 180 min so 180
275:23 - minutes is is three hours so the thing
275:26 - is you would just assume that you would
275:28 - keep this tab open and if you saw the
275:30 - the little yellow icon you know that
275:32 - it's still there so let's see what
275:33 - happens if we close this
275:35 - okay and then we reopen it
275:38 - i just want to see if that yellow little
275:40 - icon still stays active so that you know
275:42 - that it's still there so we're opening
275:44 - it up again here
275:47 - and yeah it's yellow so if it's yellow
275:49 - that's how you're going to know that
275:51 - it's extended to three hours um so yeah
275:54 - there you go
275:57 - [Music]
276:01 - all right let's talk about the workspace
276:03 - directory so when you launch a workspace
276:05 - the contents of your git repository will
276:07 - be copied to a directory or folder
276:09 - called forward slash workspace so here
276:11 - you can see um i have a project called
276:14 - exam pro marketing it's my marketing
276:15 - website and so i've opened i've opened
276:17 - up this git pod and you can see that
276:20 - that folder has been cloned into that
276:22 - workspace directory so when a workspace
276:24 - is stopped the contents of only
276:26 - workspace is saved so when you start the
276:28 - workspace again it's going to have that
276:30 - content still there and even in the um
276:33 - the get pod i o it'll even tell you what
276:34 - changes are there like you have 132
276:38 - files changed so you have some kind of
276:40 - indicator between different
276:42 - um stopped workspaces the difference
276:44 - there so here's an example
276:47 - of a git pod configuration file because
276:48 - we actually can change some of the
276:50 - defaults here so you can change
276:52 - what gitpod considers the workspace
276:54 - location and in some cases with legacy
276:57 - go link projects you might need to
276:58 - change the checkered location there's
277:00 - not really any reason to ever touch
277:02 - these options but it's just the fact
277:03 - that they are available to you i
277:05 - wouldn't even know outside of that
277:07 - golang project use case why you'd ever
277:09 - touch these things but they are here
277:11 - okay
277:14 - [Music]
277:15 - hey this is andrew brown and we're
277:17 - taking a look at context and get pod url
277:19 - so a context represents a state within
277:21 - your git source code and with a get pod
277:23 - url you can quickly load an environment
277:25 - for a context so here we have the git
277:28 - pod url it starts with this gitpodio
277:31 - forward slash pound and then it's
277:34 - followed by uh a url and that is what
277:37 - gitpod is going to try to figure out the
277:38 - context of when it launches
277:41 - our workspace so the first is repository
277:44 - con contacts and so this is just you
277:46 - provide a repository it's going to open
277:49 - it up for you to work in then you have
277:51 - branches
277:52 - or branch and commit contacts so this is
277:54 - really useful if you are doing feature
277:56 - branch uh workflows or that's how you do
277:59 - that kind of stuff or you just have any
278:00 - kind of branches that you have there
278:02 - when you have commit contexts that's
278:04 - when you are digging back in your old
278:05 - code maybe you are trying to revert code
278:07 - back to a previous state or there's a
278:10 - deep rooted issue and you're just trying
278:11 - to rule it out by going to a specific
278:13 - version uh there so here is a branch and
278:16 - here is a commitment message with its
278:18 - sha
278:19 - there that's the code on the end
278:21 - then you have issue context so feature
278:23 - development or bug fixing so this is
278:25 - where um you know like github
278:27 - has a project management tooling
278:30 - and you can say okay somebody opened up
278:32 - this feature this bug this whatever
278:33 - request and you can then open it
278:36 - in the context there
278:38 - then you have pull and merge request
278:40 - contacts so this would be for like code
278:42 - review before merging for deployment and
278:44 - so here we have a pull request and so
278:46 - get pod url support github get lab
278:48 - bitbuckets so if they have integration
278:50 - they're of course going to support the
278:52 - get pod url for that okay
278:54 - [Music]
278:58 - all right let's take a look here at
279:00 - share snapshot workspace so this will
279:03 - let you take a snapshot url of your
279:05 - current
279:06 - workspace at any time and share them
279:08 - with others so the way that would look
279:10 - like is you drop down file you go to get
279:12 - pod share workspace snapshot you can
279:14 - also also open it up in the command
279:16 - palette and from there
279:18 - it will start to create
279:20 - a snapshot and so i think this would
279:22 - show up as a build phase underneath in
279:25 - kubernetes we talk about those
279:27 - underlying phases somewhere in the
279:28 - course here
279:29 - and from there
279:31 - it's going to say okay it's generated
279:32 - you can go copy that url to your
279:34 - clipboard and that's what it looked like
279:35 - so notice it has the pound
279:37 - snapshot forward slash and then a big
279:39 - long uuid
279:41 - uh there and so
279:43 - that's pretty much the process not too
279:44 - complicated so anyone clicking on such a
279:47 - snapshot link will get a complete clone
279:50 - of your workspace including the state
279:52 - of the workspace and the vs code layout
279:55 - so workspaces created from snapshots are
279:57 - treated as restarts so you can configure
279:59 - them to launch differently than if you
280:01 - had created a fresh workspace from git
280:03 - unlike sharing running workspaces
280:05 - snapshots workspaces are full copies
280:07 - this means developers can do whatever
280:09 - they like with the content no access to
280:12 - your credentials or environment
280:14 - variables are shared and we will double
280:16 - check to make sure that is true um but
280:18 - yeah that's that's share snapshot
280:20 - workspace okay
280:21 - [Music]
280:26 - so the other way of sharing uh git pods
280:29 - is via the share running workspace which
280:31 - allows multiple developers to
280:33 - collaborate on a single workspace in
280:35 - real time and the flow here goes as
280:37 - follows turn on sharing for the current
280:40 - workspace copy the current link to the
280:42 - uh to the workspace share the current
280:44 - workspace with other developers so the
280:46 - idea is there'll be a share button down
280:48 - below you press it you turn it on you'll
280:50 - get this link
280:51 - and then you'll just share that with
280:53 - other developers so a shared running
280:55 - workspace cannot be opened in the
280:57 - desktop vs code unless you're the owner
280:59 - of the shared running workspace so if
281:01 - you are used to using the desktop vs
281:03 - code and somebody shares a workspace
281:04 - just understand that there are those
281:07 - limitations but i have to be
281:10 - very careful here to tell you that when
281:12 - you share a workspace you are literally
281:14 - giving access to someone else to act as
281:17 - you within your workspace they can
281:19 - access sensitive information such as
281:21 - access key secrets stored in the
281:22 - environment variables uh the commits in
281:24 - the workspace will show up as you
281:26 - instead of the guest developer they can
281:28 - share that link with other people and
281:30 - you wouldn't even know it uh it is not
281:32 - easy to tell who is currently editing in
281:34 - your current workspace so it's generally
281:36 - recommended to avoid or be very careful
281:38 - when sharing a running workspace and
281:40 - it's just that it's just the state of
281:41 - this this feature for the time being so
281:44 - getpod has made sharing available to you
281:47 - they're going to continue to develop
281:49 - this so that you have more visibility
281:50 - over time but just understand that there
281:52 - might be some limitations there so if
281:54 - this is the future just review this and
281:55 - see if it's still true
281:57 - because some of these might have been
281:58 - mitigated by the time you were watching
282:00 - this video but just in case uh be on the
282:02 - side of being wary okay
282:09 - hey this is andrew brown and we are
282:10 - taking a look at getpodcli so this
282:12 - allows you to perform a variety of
282:14 - utility commands useful for day-to-day
282:15 - use in your gitpod workspace so
282:17 - getpodcli comes pre-installed in your
282:19 - workspace and is accessible via the
282:21 - terminal so let's take a look at the
282:23 - commands that we have available to us so
282:25 - notice that it always starts with gp
282:28 - okay so that is the name of the cli but
282:31 - we have help so help about any command
282:34 - and knit so create a git pod
282:35 - configuration for this project env
282:38 - controls user defined persistent
282:40 - environment variables url prints the url
282:43 - of this workspace open opens a file in
282:46 - git pod
282:47 - preview opens a url in the ides uh
282:51 - preview
282:52 - forward port so make a port available on
282:55 - 0.0.0.0
282:57 - that is exposed to internet
282:59 - but you know i don't really understand
283:01 - what they're saying there because the
283:02 - way i've been using it is just to
283:04 - forward one port to another and we saw
283:06 - that in
283:07 - that section earlier when we're covering
283:09 - ports so maybe it has more than one
283:11 - purpose here we have a weight port so
283:13 - weights for a process to listen on a
283:15 - port sync a weight so awaits an event
283:18 - triggered using the sync done
283:21 - and then sync done notifies the
283:23 - corresponding sync await calls that this
283:25 - event has happened so a lot of these
283:28 - we've actually already encountered in
283:29 - the course so i'm not going to cover
283:30 - those again here
283:32 - but we will cover the ones that we have
283:34 - yet to
283:35 - explicitly
283:37 - talk about okay
283:39 - [Music]
283:43 - all right let's take a look at the
283:45 - get pod cli open command and this will
283:47 - open the target file in the code editor
283:49 - so the idea is you're gonna say gp open
283:52 - and then give the path to the file that
283:53 - you want to open
283:55 - and so here i'm just doing gp open gem
283:57 - file and then it opens the gem file
283:59 - there and so that's just a
284:01 - very convenient way of opening files
284:03 - okay
284:04 - [Music]
284:09 - all right let's take a quick look here
284:10 - at the gp url cli command which will
284:13 - return the gitpod workspace url so there
284:16 - i type in gpurl and then i get that
284:18 - there and i just wanted to show you that
284:20 - if you type in env and you do a grep
284:22 - getpod workspace url that's going to
284:24 - return
284:25 - uh the same value so i'm just showing
284:28 - you that it's a convenience for
284:30 - uh getting the getpod workspace url
284:32 - environment variable okay
284:34 - [Music]
284:38 - hey this is andrew brown and we are
284:40 - taking a look at the preview command for
284:42 - the getpodcli so gpreview command can be
284:45 - used to open a web url in line with the
284:48 - vs code editor so here you can see me
284:50 - using the gp preview command
284:52 - using some fancy
284:55 - bash scripting with it to open up the
284:57 - current uh machine and so you know you
285:00 - can see that it's completely in line
285:01 - within the code editor so you can use
285:04 - echo
285:06 - echoing out the gpurl and modify the url
285:08 - to include the port number and so
285:10 - originally when i was doing this and you
285:12 - can see this in the example here that i
285:14 - was doing this like weird sed thing uh
285:16 - because i didn't realize you could just
285:18 - do this down below so you could do gp
285:20 - preview and then do gp url 3000 i was
285:23 - doing like some weird stuff there
285:25 - but i found another repository that had
285:27 - a more convenience method so
285:29 - um once i discovered that i had to go
285:31 - back and reshoot this video so i just
285:33 - want you to know that that's the way you
285:34 - would do it this one down below the ones
285:37 - above here is totally acceptable as well
285:38 - but this is what you'll probably want to
285:40 - do and what i'll be showing uh in the in
285:42 - the follow alongs okay but there you go
285:44 - [Music]
285:48 - hey this is andrew brown and in this
285:50 - follow along i just want to cover some
285:51 - of the cli commands i haven't really
285:53 - been using that much like open url and
285:55 - preview
285:57 - just so that you know what to use them
285:59 - for so i'm going to go here and type in
286:00 - git pod cli and we're going to create
286:02 - ourselves a new private repository out
286:04 - of readme file and we're going to go
286:06 - ahead and get this going here
286:08 - and we are going to launch ourselves a
286:10 - new git pod here and we'll give it a
286:12 - moment
286:16 - and i really don't think if you go to
286:18 - the cli here and they really should add
286:20 - this in the documentation
286:22 - but i don't think that the preview at
286:25 - least i didn't see it had a very good
286:26 - example
286:28 - so it says gpurl8080
286:32 - oh i guess they did and i just never
286:34 - noticed
286:35 - so that's okay i'm going to go back to
286:37 - the preview you're not going to notice
286:38 - it but i'm going to reshoot the cli
286:40 - preview to show this more condensed
286:42 - example
286:43 - but what we're going to do here is
286:45 - create ourselves a new folder called
286:47 - oops i want a folder not a file a new
286:50 - folder called public
286:52 - and in that folder we're going to create
286:54 - a new file called index
286:57 - dot html and within that we're going to
286:59 - say hello world and then from there we
287:03 - are going to go and open up our terminal
287:08 - and i'm just going to
287:10 - install
287:12 - hdb server globally
287:16 - okay and then we'll just say http server
287:19 - and leave it where it wants to be and
287:21 - say port 8080
287:23 - and so it's going to ask us if we want
287:24 - to open that port i'm going to say make
287:26 - public
287:28 - and
287:29 - from there
287:31 - i didn't see it pop up
287:34 - but we'll go over to our remote explorer
287:36 - here left-hand side and just make sure
287:37 - that the website is working there it is
287:39 - so
287:40 - you know if we wanted to open up let's
287:42 - say we close this file here and we
287:43 - wanted to open that file from the cli
287:45 - i'm just going to type in clear here
287:46 - what we could do is type in gp open
287:50 - and then i could type in relative to
287:52 - where i am so public
287:54 - index html and it's going to open that
287:56 - up
287:57 - oh sorry it's gp not gh i'm thinking
288:00 - github it'll be that'll be the way we
288:02 - can open up files and that's for the
288:03 - convenient when you're trying to
288:05 - uh when you can locate things easily
288:06 - through here and you want to open them
288:08 - up
288:09 - in the top
288:10 - there and then we'll take a look at
288:13 - clear so i'm going to see if we have two
288:15 - bashes running we don't so i'm going to
288:16 - at this top one here can i rename this i
288:19 - can so we'll go here and just say like
288:21 - http server here
288:24 - and i'm just going to start up our
288:25 - server again so we'll say http server
288:28 - port 8080.
288:31 - and then down below here where we have
288:32 - our little playground i'm going to just
288:34 - type in gp
288:36 - open 8080.
288:39 - oops uh sorry i meant to say gp oops
288:42 - clear
288:43 - gp url 8080.
288:47 - and so notice what it did is that if you
288:49 - just type in url
288:51 - it's going to give you the plain jane
288:52 - url which is actually just the url up
288:55 - here if you put in 8080 it's going to
288:58 - add it over here and so then what you
288:59 - can do is take this url and you can
289:02 - paste it up into here which is great
289:04 - and so now we could use the gp preview
289:09 - which will
289:10 - open something over here so if i was to
289:12 - do something like and i don't think it
289:13 - will work in here but i'm going to just
289:14 - type in google.com
289:17 - okay for whatever reason it doesn't like
289:20 - things that are outside the scope of
289:21 - this project but just showing you an
289:23 - example of opening that window there
289:25 - what we could do is type in get
289:27 - gp preview and then do this so this is
289:30 - like a bash thing for encapsulating uh
289:33 - stuff and we just type in gpurl88
289:36 - and so now we can open it up here and so
289:39 - that would be the convenience way of
289:40 - doing that so you know that's gp open
289:43 - gp
289:44 - url and gp preview if we just want to
289:46 - look at all them that are there i think
289:49 - we've pretty much used everything the
289:50 - other one we haven't used is stop
289:52 - um so
289:55 - i guess for fun we can just do it so
289:57 - we'll just do gp stop
290:00 - and that will that should stop this
290:02 - environment so we'll give it a moment
290:03 - see what happens
290:13 - is it stopping it doesn't look like it's
290:15 - stopping
290:17 - oh it did okay so there you go so that
290:20 - is all the cli stuff uh covered okay
290:22 - [Music]
290:26 - hey this is andrew brown and we're
290:28 - taking a look at the get pod palette
290:29 - command so the github palette commands
290:31 - is a series of commands you can use
290:33 - within vs code to perform git pod
290:35 - actions and so this is in the command
290:37 - palette within vs code but if you click
290:39 - the little orange button in the bottom
290:41 - left corner you'll get all the possible
290:43 - commands let's just quickly go through
290:45 - them to see if there's anything that you
290:46 - might like to use uh during your
290:48 - workflow and through the follow alongs
290:50 - you'll see me using some of these
290:51 - because they are useful okay so the
290:54 - first is stop workspace so stops does
290:56 - not terminate but stops the current
290:57 - workspace open settings so opens account
291:00 - settings for the current uh gitpod user
291:02 - open access control so it opens git pod
291:05 - integrations page open context it opens
291:07 - the context this is really good when you
291:09 - need to go back to the repository i use
291:12 - that one quite a bit open dashboard so
291:14 - opens the gitpodio
291:16 - platform default page so it's going to
291:17 - take you to projects documentation
291:20 - follow them on twitter which doesn't
291:22 - hurt to have that in there i suppose
291:24 - open community chat so that's going to
291:26 - be on discord open community forum
291:28 - that's going to be on discourse
291:29 - report an issue that just takes you to
291:31 - github issues
291:33 - upgrade subscription this isn't going to
291:35 - upgrade your plan if you click on it
291:36 - it's just going to take you to the plans
291:37 - page so you can choose a plan so don't
291:39 - be afraid to click on that extend
291:41 - workspace timeout so only works with
291:43 - specific plans
291:45 - share workspace snapshots so this is
291:47 - when you create a snapshot and it
291:49 - returns a snapshot link for sharing
291:51 - share running workspace so turns on
291:53 - sharing i don't i generally don't do it
291:55 - from the command pal there's like a
291:56 - little share button down below
291:58 - um open in vs code so open the workspace
292:01 - in your desktop uh version of vs code so
292:04 - the desktop vs code
292:06 - or insiders and that's just the beta
292:08 - version of vs code it's just another one
292:10 - okay so that is the command palette or
292:13 - palette commands for get pod okay
292:15 - [Music]
292:19 - hey this is andrew brown and in this
292:21 - following we're going to just take a
292:22 - quick look here at the gitpod
292:25 - palette commands so if you're not
292:26 - familiar with a command palette within
292:29 - visual studio code it's a way of
292:30 - executing a lot of
292:33 - easy
292:34 - scripts i suppose you could describe it
292:36 - as so the way you would access that is
292:38 - you go to the hamburger menu here in the
292:39 - top left corner and you go to i believe
292:42 - view you'll see command palette notice
292:44 - it says control shift p so i'm going to
292:46 - type that instead and if we type that we
292:48 - have a bunch of different commands here
292:50 - that we can enter in and this is really
292:52 - dependent on what extensions you have
292:54 - installed or just uh you know the
292:56 - defaults that come with it
292:58 - i don't use visual studio code a whole
293:00 - lot so i don't even know what the most
293:01 - common ones are but i do know that there
293:03 - are git pod ones if you type in git pod
293:05 - these are the ones here and notice that
293:07 - there are a few extra things here that i
293:09 - typed in that will not appear if we just
293:11 - go click on the other area so just
293:12 - notice that you might have some
293:13 - advantage there if you just type it in
293:15 - but we click off and you open that
293:17 - hamburger menu again there are some of
293:19 - them the most commonly used ones here uh
293:21 - down below but if you want all the
293:23 - command uh palette or or get pod uh
293:27 - palette commands if you click this
293:28 - orange button down below here it'll pop
293:30 - them up okay so you know just so you
293:32 - know how to get to those
293:34 - again if you click any of these and
293:35 - you've seen us do this a bunch of times
293:37 - within the course i go to open context
293:39 - it'll open up where this repository is
293:41 - things like that but i just wanted to
293:43 - make sure you understood uh what command
293:45 - palette was and how to access all the
293:47 - get pod command palettes okay
293:49 - [Music]
293:53 - hey this is andrew brown and we are
293:54 - taking a look at teams and projects
293:56 - within gitpod io so gitpod team allows
293:59 - you to invite people to collaborate on
294:01 - your project
294:02 - and so you can create multiple teams and
294:04 - and uh one thing i notice is that if you
294:07 - try to name your team
294:09 - uh something like marketing it won't be
294:10 - permitted because getpod is utilizing
294:13 - something called the big username
294:14 - blocklist so just understand that there
294:16 - might be some limitations around the
294:17 - naming you might have to be clever
294:19 - but probably you won't run to the issue
294:21 - i just choose to choose the name
294:23 - marketing i just happen to hit that
294:25 - block list
294:26 - within a project you can have members
294:28 - and sign them roles and so you have two
294:30 - uh types of roles member and role
294:33 - and then projects has the main
294:34 - advantages of allowing you to utilize
294:36 - pre-builds and i want to point out that
294:38 - you have a personal account and you can
294:40 - think of it as a team of one and so
294:42 - within your personal account you can
294:43 - create projects and that in turn will
294:45 - allow you to use pre-build so pre-build
294:47 - is not exclusively uh for just teams
294:50 - okay just understand it's specific to
294:52 - projects
294:54 - [Music]
294:58 - so let's take a closer look at um get
295:00 - pod uh roles so within a gitpod team a
295:03 - member can be signed either the owner or
295:05 - member role but the key difference
295:07 - between an owner and a member is that a
295:09 - member cannot manage team members or
295:11 - delete the team and so this is the full
295:14 - matrix here and while i'm just getting
295:15 - my pen tool out so we have manage team
295:17 - members delete
295:18 - delete team invite team members add
295:20 - projects remove projects add project
295:22 - view branches view pre-builds trigger
295:25 - pre-builds and so at this stage of the
295:26 - product you just have those two roles i
295:29 - would imagine in the future they'll
295:30 - probably open it up so you can choose
295:32 - exactly what you want but for the time
295:34 - being that is what we have and it works
295:36 - pretty well
295:38 - [Music]
295:42 - hey this is andrew brown and we are
295:43 - taking a look at pre-build so pre-builds
295:45 - is a continuous build server that will
295:47 - run every time you push code to
295:49 - repository so here is an example of a
295:52 - bunch of pre-builds that are happening
295:54 - for a workspace and so these are
295:57 - really convenient let's talk about what
295:58 - a pre-built workspace is so prebuilds
296:00 - will execute the before internet
296:02 - commands within your
296:04 - kidpod.yaml files on a git commit and
296:07 - produce a snapshot and we saw that
296:09 - earlier in the course when we were
296:10 - looking at execution order steps where
296:12 - we have kind of a visualization there
296:14 - the snapshot can be launched uh which
296:16 - will save your development team time
296:18 - waiting for lengthy builds
296:21 - okay um the idea here is you can trigger
296:24 - pre-builds automatically so a pre-build
296:25 - will trigger on the default branch for
296:27 - pull requests and merges from the same
296:29 - repository i have yet to see options to
296:31 - allow you to kind of customize that i'm
296:33 - sure they'll do that in the future you
296:35 - can also trigger pre-builds manually so
296:37 - a pre-build can be manually triggered by
296:38 - adding the pound pre-build to a git pod
296:41 - url if that's one way you want to do it
296:43 - i also think that there's a tab in a
296:45 - project that lets you do it like
296:47 - configuration or the file itself but i
296:50 - don't think that would be a way that you
296:51 - generally do it if you wanted to do it
296:52 - you probably use the get part url uh
296:54 - prebuilts have a timeout of one hour of
296:56 - the combined time of the before init
296:58 - before failing so if you know if it
297:00 - takes too long it will just fail here
297:02 - you can see i have a failed example uh
297:04 - in that page there so they took too long
297:06 - for whatever reason get pod does not
297:08 - cache artifacts between pre-built each
297:10 - pre-built is a clean environment um
297:12 - what's interesting is that they do have
297:14 - something with dazzle which will
297:16 - actually
297:17 - cache layers and stuff like that so i
297:20 - think that you know this
297:22 - might be an option in the future that we
297:24 - might have that functionality but there
297:26 - you go that's pre-builds
297:27 - [Music]
297:32 - so with tailscale you can automatically
297:34 - and securely connect your gitpod
297:36 - workspace to other development resources
297:38 - whether in the cloud or on-prem such as
297:41 - a production database behind your
297:42 - company's firewall so the idea here is
297:45 - that you have your laptop it's going to
297:47 - connect to um tail scale and through
297:49 - tail scale you'll have a secure
297:51 - connection to git pod when you're on the
297:53 - go so let's just define some of these
297:54 - terms like vpn so a virtual private
297:57 - network or vpn extends a private network
298:00 - across a public network and enables
298:02 - users to send and receive data across
298:05 - shared or public work networks as if
298:07 - computing devices were directly
298:09 - connected to the private network then
298:11 - the question is what is wireguard so
298:13 - it's a simple yet fast and modern vpn
298:15 - that utilizes state-of-the-art
298:17 - cryptography and so then we have tail
298:19 - scale so tail scale is built on top of
298:21 - the uh the point-to-point open source
298:24 - wire guard protocol which powers an
298:26 - encrypted mesh network or tail net
298:30 - gitpod has an official partnership with
298:32 - wireguard so if you need to have
298:35 - point-to-point vpn access um then just
298:38 - so you have a secure connection this is
298:40 - what you can use okay
298:42 - [Music]
298:45 - this is andrew brown and this follow
298:47 - along we're going to learn all about
298:48 - projects and the features underneath it
298:50 - so probably cover pre-builds as well so
298:53 - what i've done is i have a one git pod
298:56 - account here and i have another one over
298:58 - here on the side i'll just pull it up
299:00 - here i had to do this one in firefox and
299:02 - in the course we might have set up a
299:04 - project before i'm just connecting here
299:07 - uh to my my gitpod account here so here
299:09 - is one i know they're both named andrew
299:11 - brown but they're on different emails
299:12 - here and so the idea is i want to create
299:14 - a project and then once i'm in a project
299:16 - we want to kind of explore the feature
299:17 - set that is there okay
299:19 - so uh from the chrome account here what
299:22 - i'm going to do is drop down the top
299:23 - here and go to new team we're going to
299:25 - name that so i'm going to name this uh
299:29 - my
299:30 - get pod
299:31 - team or maybe exam pro code team and i
299:35 - might have named that one previously in
299:36 - another video that's totally fine
299:38 - and so now that i have my team i need to
299:40 - start inviting people so we'll make our
299:41 - way over to members and from here you
299:43 - can see i have the exam pro co i'm gonna
299:45 - go ahead and invite one and grab this
299:47 - link and i'm gonna go over here to my
299:50 - other browser firefox we'll paste that
299:52 - in there
299:53 - and now i've been added so there's no
299:55 - prompt to say hey do you want to be in
299:56 - this group it's just if you uh click
299:58 - through the link you'll be added to it
300:01 - so we'll go back here and we'll just
300:02 - close and we'll give it a refresh
300:05 - okay
300:06 - give it a moment
300:09 - and so if i want to change them to a
300:12 - oh sorry a member i can i don't see why
300:14 - you'd want to switch yourself out from
300:16 - owner um i don't know what happened if
300:18 - you did that because if you had two
300:19 - members that could be disastrous but i
300:21 - don't even want to try because i just
300:22 - don't want that to get stuck
300:24 - um and so
300:26 - there's this option here remaining owner
300:27 - so i think maybe you're not allowed to
300:29 - at least remove one but again i'm not
300:31 - going to test that functionality there
300:34 - they have a filter here again owner
300:35 - remember there's only two roles there's
300:37 - not much going on there let's take a
300:38 - look at settings
300:40 - under here all we can do is delete the
300:41 - team
300:42 - i imagine the future will expand that
300:44 - and then we have workspaces
300:46 - so as we add projects here that will go
300:48 - there so let's go ahead and add our
300:49 - first new project
300:51 - and so uh here we have a
300:54 - um you actually have to select the
300:55 - context here so uh this is where you
300:58 - might select a different uh repository
300:59 - so up here it says get repository git
301:01 - lab so you can change this out to git
301:03 - lab or github i guess bitbucket is not
301:05 - an option here as of yet
301:07 - but i'm going to switch over to github
301:09 - and so now here are all of our
301:10 - repositories that we could collaborate
301:12 - on so here i might want to launch up
301:15 - hello world i might have like a hello
301:17 - world one in here so we'll select this
301:19 - one here
301:20 - and from there we can go ahead and
301:22 - create that new workspace
301:24 - all right and so here's student
301:25 - pre-built so as soon as you use
301:29 - as soon as you use
301:30 - projects uh pre-builds are going to
301:32 - happen so i don't think there's an
301:34 - option to turn pre-builds off it's just
301:35 - like if it is a project it will always
301:37 - do pre-builds
301:38 - and in that case you might run into
301:41 - some
301:42 - scenarios there or some issues there um
301:44 - but we'll we'll address those maybe in
301:46 - this follow along here um but anyway so
301:49 - uh this project has launched which is
301:51 - really great uh and that is running but
301:53 - now if we go back to get pod so we'll
301:55 - open up our hamburger menu here and go
301:58 - back to our git pod dashboard
302:01 - and we go under the workspaces we can
302:03 - see oops notice here i'm not in um
302:06 - the right project so we go here go to
302:08 - project so there it is so we can see
302:10 - that we're on main it started a few
302:11 - seconds ago it has pre-builds
302:14 - and if we go to view all
302:17 - we can just kind of look at some of the
302:19 - options here so here a pre-build was
302:21 - successful
302:23 - and we go to configuration here and so
302:25 - we have some options here so
302:26 - configuration already exists in git
302:28 - run a pre-build or open the new
302:30 - workspace to add the controls so i
302:32 - suppose you can edit this and then run
302:34 - or pre-build i've never found any reason
302:36 - to do this um but i guess it could be a
302:38 - way of like forcing a pre-build for you
302:41 - to test things
302:42 - we'll go back to our branches here and
302:44 - apparently you can do things with
302:45 - branches as well
302:47 - um so i'm not exactly sure what we would
302:50 - do here
302:52 - but um
302:53 - i guess like we could just go ahead and
302:54 - create a branch and see what happens so
302:56 - we go get check out hyphen b um
303:00 - we'll call it development here
303:03 - because i'm just trying to think like
303:04 - how that would affect workflow maybe
303:06 - staging might be a better branch it will
303:07 - say get push
303:09 - and then we'll have to push upstream
303:11 - here which is totally fine we'll say
303:13 - allow and hit enter
303:16 - okay we'll make our way back over here
303:18 - and if we give it a refresh i'm going to
303:20 - see if that registers that other branch
303:26 - okay and so i guess from here this would
303:27 - be a great opportunity for you to launch
303:30 - a new workspace so this will do
303:32 - pre-builds always the main branch will
303:33 - always do it
303:35 - and so i guess here
303:37 - we can run it manually
303:40 - so i don't know i don't know if you push
303:42 - to a branch if it will actually trigger
303:44 - it i'm not sure if that pre-build is
303:45 - running i don't see it running let's
303:47 - just give it a refresh here i i don't
303:49 - feel like i clicked it so we'll go back
303:51 - here one more time we'll say run
303:53 - pre-build
303:55 - okay so i don't see anything happening
303:57 - here
303:58 - unless it's delayed or something but
303:59 - from the documentation remember you can
304:01 - only really do it for the main branch so
304:04 - maybe that functionality is just not
304:05 - there yet but we can launch a new
304:07 - workspace for that staging environment
304:09 - that or maybe there's nothing to
304:10 - pre-build because
304:12 - it is forked off that other one so maybe
304:14 - it's based off the the main pre-build so
304:17 - what we'll do is we'll just make some
304:19 - super my new change to the code here and
304:22 - then maybe that is what we need to
304:23 - trigger it so i'll go over here and
304:25 - we'll just say hello world and we'll
304:27 - just add an extra exclamation mark here
304:30 - and what i'll do is i will go back to
304:33 - um
304:34 - we'll commit that here
304:36 - so we'll add it and say minor commit
304:40 - because i'm really curious if the
304:41 - pre-build will trigger
304:46 - and uh we will go back here
304:50 - to uh this oops i guess we'll have to go
304:52 - back to
304:54 - the dashboard and then close that tab
304:57 - and so now what i want to know is it
304:58 - going to trigger
305:00 - that pre-build because i don't think it
305:02 - will on this branch here right so we go
305:04 - over here no pre-branches or pre-builds
305:06 - what if i do run pre-build
305:09 - okay
305:10 - ah so now it's running so i think that
305:12 - was the case was the fact that i had
305:14 - forked it
305:15 - and or not forked it but i had created a
305:17 - branch but it was like there was no
305:18 - difference between the main ones so
305:19 - there was no reason for it to run a
305:21 - pre-built now will it run and pre-build
305:23 - every single time i'm not sure so again
305:26 - we will go ahead and launch
305:28 - this new workspace
305:32 - and we'll just make a test see here if
305:34 - it
305:35 - automatically runs
305:36 - because maybe once you've done one
305:38 - pre-build it will just keep triggering
305:39 - but as far as i'm aware it shouldn't i
305:42 - think it would just be it wouldn't do
305:43 - that so go back here add another
305:45 - exclamation mark whoops or net sign
305:48 - that's totally fine too it doesn't
305:49 - really matter and we're going to go
305:50 - ahead and commit that into exclamation
306:00 - and we'll say okay
306:08 - and we'll give it a moment to sync we'll
306:10 - say okay
306:12 - just making sure it syncs because it's
306:14 - doing this funny thing here so i just
306:15 - don't have confidence that it's doing
306:16 - what it's supposed to be doing
306:20 - and while we're waiting on that i'm just
306:21 - going to open up the dashboard again
306:23 - here
306:25 - and i'm also going to open up the
306:26 - context
306:27 - because i just want to see did it push
306:29 - that change right so i go over here
306:32 - and we have uh we need to go to the
306:34 - staging branch right we are in staging
306:36 - no
306:41 - so i don't know it's acting kind of
306:42 - funny here so what i'm going to do is
306:44 - just launch it again
306:47 - and that's the nice thing when these
306:48 - environments are
306:51 - temporary you can just keep launching
306:52 - new ones so i'll just launch a new one
307:01 - we'll give it a moment
307:04 - here and so um
307:08 - if we go over to
307:09 - [Music]
307:11 - our uh our code here again i'm just
307:13 - going to try one more time to change
307:15 - this
307:18 - and we will go back here we will add
307:20 - this file we'll just say minor change
307:22 - and we'll commit this
307:24 - and we'll sync the changes again
307:28 - okay and that worked no problem this
307:29 - time so i'm not sure what the issue is
307:31 - before but that's okay and so just to
307:33 - confirm back in the staging here i'm
307:34 - just going to double check to make sure
307:36 - that change has been applied remember i
307:38 - haven't told it to manually run so
307:39 - that's what i'm really interested to
307:40 - find out here so we'll go back and open
307:43 - our dashboard
307:44 - and we are going to
307:46 - wait for that to load we'll click into
307:48 - that it says ready
307:50 - a few seconds ago i'm gonna go to
307:52 - pre-builds there's only two here so i
307:54 - think again like if you want to build
307:56 - these minor ones you're always going
307:58 - like the other branches you're gonna
307:59 - have to go here
308:01 - and trigger that though it's not saying
308:03 - there's anything new
308:06 - there's no available actions
308:10 - we'll go back over to pre-builds here
308:14 - it would probably help if i had a
308:16 - different name but that's four minutes
308:17 - ago so
308:18 - um
308:21 - yeah i'm not sure
308:23 - we'll give you a refresh here
308:28 - so a few minutes ago so for whatever
308:29 - reason i can't seem to trigger
308:31 - a new pre-build so but anyway i guess
308:33 - the thought is like really the the stuff
308:35 - you're going to be focusing around is
308:36 - the main branch okay
308:38 - um so i think that's pretty much it with
308:42 - projects not super complicated but i
308:44 - think i might want to just run through
308:45 - pre-builds a bit here and just look at a
308:46 - scenario where i ran into where i was
308:48 - confused and like there wasn't an issue
308:51 - but i just wasn't uh realizing that the
308:52 - pre-build was the part that was kind of
308:54 - difficult okay so i'll just make that a
308:56 - separate video we'll just pick up here
308:58 - in a second okay
308:59 - [Music]
309:03 - all right so what i'd like to do now is
309:05 - just to kind of show you some friction
309:07 - you might run into pre-builds because
309:09 - uh you need to kind of adjust your
309:11 - script to work in a pre-built
309:12 - environment and it's not hard it's just
309:14 - thinking about pre-builds personally i
309:16 - would recommend if you can to always
309:18 - have a pre-built environment or a
309:19 - project-based environment so that when
309:20 - you engineer your git pod yaml file you
309:23 - don't have to rework it but let's see if
309:25 - we can run into that case so maybe a
309:27 - good example would be just to try to
309:29 - build out a very simple project that has
309:33 - sinatra and we've done that a few times
309:35 - so maybe we can just pull from our
309:36 - existing examples so what i'm going to
309:38 - do is just go to
309:41 - getpod.gitpod.com here and i'm just
309:43 - going to kind of look through
309:45 - some of my examples here
309:48 - um we'll go show more
309:50 - so we have google play drive init cli
309:52 - example
309:53 - website
309:55 - is this the one where we use uh sinatra
309:58 - no this looks a lot more complicated
310:00 - that's me forking the website so that's
310:01 - okay we'll just start from scratch it
310:02 - only takes like a couple seconds to do i
310:05 - just can't seem to remember because it's
310:06 - been a few days it looks it's for you it
310:08 - seems like i just i just recorded this
310:10 - but a few days since i made the sinatra
310:12 - one so what i'm going to do is create a
310:14 - a new repository here i'm just going to
310:16 - say
310:17 - pre-build
310:18 - sinatra
310:20 - sinatra pre-build example
310:24 - and i'm going to make this private
310:25 - and we're going to go ahead down below
310:28 - and
310:29 - add a readme file i'm going to create
310:31 - that repository we're going to give that
310:33 - a moment to get created we're going to
310:35 - go ahead and launch that git pod we're
310:36 - going to go to sinatra
310:39 - ruby just so that we can get a little
310:41 - bit of code here to work with and that's
310:44 - all we're going to really need so i'll
310:45 - go back here and give it a moment to
310:47 - load we're going to go ahead and make a
310:49 - new file i'm going to call this
310:50 - server.rb whoops
310:52 - server.rb
310:56 - uh
310:57 - rename
311:01 - we're going to go ahead and paste that
311:02 - on in there so we'll say allow
311:04 - and so we're requiring our sinatra we'll
311:06 - need a gem file as well actually i'm
311:07 - going to use bundler to do that so we'll
311:09 - go to new terminal and we'll say bundler
311:12 - init
311:15 - and that will give us a gem file to
311:17 - start off with i need sinatra so i'll
311:19 - copy the contents there down below we'll
311:21 - just type in jam sinatra so that's fine
311:24 - we'll do a bundle install to install
311:26 - sinatra
311:29 - and so once we have that there
311:31 - we're going to just take out the that
311:32 - part there so we don't have to worry
311:34 - about it and so now we need to create
311:36 - our gitpod file so we'll say gpinit
311:39 - that'll get us a starting script here
311:41 - port 3000 is okay for me i'm fine with
311:43 - that and so i need a few things here i'm
311:45 - just looking off screen to uh this code
311:48 - here to see
311:49 - what it is that we can do here so i
311:50 - don't have to forget um but we don't
311:52 - need a before command because we don't
311:54 - really need to change the ruby version
311:57 - uh rvm list so we are using ruby version
312:00 - 2.7.4 which is fine
312:02 - um
312:03 - but what we might want to do is to run
312:06 - something so it might do things like
312:08 - bundle install something we definitely
312:10 - want to do
312:12 - and for the command we're going to want
312:14 - to start this uh the servers up saying
312:16 - bundle exect
312:18 - ruby
312:21 - ruby
312:22 - um
312:24 - it was a
312:25 - port
312:26 - 3000 i can't remember how we set the
312:28 - sinatra ports
312:30 - build the docks here
312:32 - ports
312:34 - uh configuration settings ports port
312:37 - sports ports
312:38 - it's like set port like that eh
312:42 - so we'll just say whoops we'll go back
312:45 - to our code over here
312:49 - where's the code oh we're in hello world
312:51 - whoops
312:52 - so go back to this one up here and we'll
312:54 - go into our server file here
312:56 - and we'll just say
312:58 - set environment
313:01 - actually it's setport
313:05 - and that's where we do the 3000 right
313:07 - so
313:09 - what i'm trying to get at is that um
313:12 - let's say we want to actually set the
313:14 - we'll just say env
313:16 - and we'll just say app port here
313:20 - and as an example we might want to
313:23 - set the um
313:26 - in here the port number so we might go
313:28 - like
313:29 - export
313:30 - port app port
313:33 - 3000
313:35 - and actually i don't even know what it
313:36 - starts on by default so that's not going
313:38 - to check first just case it starts on
313:40 - that port by default server.rb here
313:44 - so this starts on port 8080. so let's
313:46 - say we want it to be on this port it's
313:48 - going to look at like export
313:51 - environment variable
313:53 - as an example here
313:56 - i always forget how to do it so i just
313:57 - double check i always feel like there's
313:58 - like a dollar sign i'm missing
314:00 - so it's export name equals whatever okay
314:03 - so we'll go back over here
314:06 - and so this would set the app port there
314:08 - and so this app down below should pick
314:10 - it up right if i just do
314:14 - server.rb
314:17 - that should
314:18 - technically work port 3000 that's
314:20 - totally fine
314:22 - so what i'm going to do now is just
314:24 - restart this app and i'm going to just
314:25 - put that there so that doesn't error out
314:27 - but i'm going to commit these
314:31 - okay
314:32 - so attempt to or sorry just initial
314:34 - commit
314:38 - okay and then we'll just sync those
314:39 - changes we'll say okay we'll give it a
314:41 - moment i'll close up some of these other
314:43 - tabs here
314:46 - and so what i'm hoping for
314:48 - and we'll open up the context here what
314:50 - i'm hoping for here is that when i
314:52 - uh launch this git pod it's just going
314:54 - to work right it's going to do the
314:55 - bundle install it's going to export the
314:57 - environment variable of course we could
314:59 - just set the environment variable in the
315:00 - task but i'm trying to stage an example
315:02 - where when you move over to pre-build
315:04 - you have to kind of consider how that's
315:05 - going to change
315:07 - so give it a moment
315:11 - and it's opening the tab it's good it's
315:13 - starting on port 3000 and it works right
315:16 - so
315:17 - this part here
315:19 - whoops
315:20 - um
315:22 - this part here worked right so what i'm
315:24 - saying is like when we move this over to
315:26 - prebuilds this init step is going to run
315:29 - but the problem is is that it's not
315:31 - going to carry over the state over to
315:32 - this one so it might install but i my
315:34 - expectation is this export option won't
315:37 - be there or another thing it might be
315:38 - like cd into the directory so one thing
315:40 - that we might do that might be a better
315:42 - example would be to make whoops to make
315:44 - a subfolder here so we might make a new
315:46 - folder here and we'll call it um
315:49 - you know application or sorry project
315:52 - here
315:54 - and from here i might take these files
315:56 - here and just move them
315:58 - into yep let's say move it's okay
316:01 - we'll take the gem file here and move it
316:02 - into this project here
316:05 - okay
316:06 - and actually i might call it app instead
316:08 - so we'll say rename app
316:11 - and so instead of doing this you might
316:13 - say like cd
316:15 - app right so we're going to cd into it
316:17 - first
316:18 - and so let's see if that works
316:20 - because again i'm just trying to stage
316:21 - that example to show you what i'm
316:23 - talking about because i remember that's
316:24 - where i ran into seating where i thought
316:25 - i would be already seated in so if we
316:27 - see the init will it do in the command i
316:29 - believe it will
316:30 - so uh small changes here
316:33 - uh put things in a folder
316:36 - and we'll go ahead and commit that we'll
316:38 - say yes
316:40 - we will sync those changes we'll say
316:42 - okay
316:45 - and
316:46 - what we'll do here is we'll wait a
316:48 - moment and i'll go back over to this
316:50 - i'll close this tab out and we'll launch
316:52 - git pod again and that should cd into
316:54 - that directory and work and then we will
316:57 - go then make it a project and see how
316:59 - that changes with the pre-builds
317:08 - all right so we're waiting here a moment
317:11 - so it's working so it definitely seeded
317:13 - in and so
317:14 - i don't know if it shows sometimes it
317:16 - shows the script of what it ran so if
317:17 - you look at the script this is what it
317:19 - did it said cd app bundle install export
317:22 - and then it did the the next thing which
317:24 - was the command so it's treated like in
317:26 - one go in the same environment so now
317:28 - what we're going to do is we're going to
317:30 - go make our way over to get podio
317:34 - and i want to make this actually a
317:35 - project so i'm going to make a new
317:36 - project here
317:38 - and then i want to choose this project
317:40 - here when it when it gets a moment here
317:41 - and we're going to choose the um
317:44 - it's on git lab again so that's fine
317:45 - we'll just change that to github
317:48 - it really likes to default to that
317:49 - gitlab which is totally fine and this is
317:52 - called sinatra
317:53 - so we'll type in sinatra here we'll
317:55 - click here
317:57 - we'll select
317:58 - uh we'll create a new workspace
318:01 - and now it's going to do the pre-build
318:02 - and so my expectation is this is going
318:04 - to fail right because
318:06 - when it goes through there it's going to
318:08 - cd
318:09 - in the one thing and the other one's
318:10 - going to start not in the cd directory
318:16 - so give it a moment here
318:28 - all right and so notice it says could
318:29 - not locate gem file or bundle okay so if
318:31 - we scroll on up
318:33 - you can see um
318:35 - we are seeing that there's stuff that it
318:37 - ran the pre-built services cd app
318:39 - bundle install export stuff this is
318:42 - stuff that happened in a separate
318:43 - environment right it didn't happen um
318:47 - i'm just trying to see if it shows it
318:48 - very clearly yeah so these are the
318:49 - pre-built logs that it ran
318:52 - right but the thing is is that um
318:55 - that was in the pre-build environment
318:57 - we'll bring back up the slides here to
318:58 - make it more clear okay so
319:00 - here
319:01 - right it ran before and init so it did
319:04 - it went cd into the app directory and it
319:06 - set the environment variable and then
319:08 - when it became over here it's starting
319:10 - from scratch so it's not in that cd
319:12 - directory
319:14 - and i don't even know the environment
319:15 - variables there let's see if that
319:16 - persisted because that might be
319:17 - interesting so i'm just going to say env
319:20 - grep and we'll say app
319:23 - port
319:25 - okay
319:26 - and it looks like it is set because it's
319:27 - saying it right there uh let's just just
319:29 - say echo app port
319:33 - uh maybe dollar sign
319:36 - it goes to show like i've been doing
319:37 - links for years i can remember this
319:38 - stuff so it's not set so the environment
319:40 - variable got set in the pre-build
319:42 - environment and it's cd into that
319:43 - directory and that's where before
319:45 - becomes very useful because it's going
319:46 - to run twice
319:48 - right so
319:49 - this is where we would take our script
319:51 - and
319:52 - um the bundle install is totally fine
319:54 - there but we'll just go and we will add
319:56 - a before step
319:59 - right
320:01 - and we will just take the cd out of here
320:03 - and the app out of here
320:05 - okay and so the idea is that that's
320:08 - going to run
320:09 - both times in each environment right so
320:11 - this should technically fix our problem
320:13 - we'll go ahead and save this file and
320:15 - we'll just say fix pre-builds
320:20 - and we'll commit that
320:22 - we'll sync those changes we'll say okay
320:25 - we'll give it a moment
320:26 - great we'll close our tab
320:28 - and i'm going to open up uh getpod again
320:33 - and so you notice the pre-build's
320:35 - happening so it showed us a screen if
320:37 - our pre-builds had already occurred we
320:38 - wouldn't see it apparently you can stop
320:40 - waiting for pre-build which i would
320:42 - never do that but there could be a case
320:43 - where you have a very very long
320:44 - pre-built you just want to get into the
320:46 - environment
320:48 - so we'll give it a moment and see if
320:49 - that fixes our issue
320:57 - apparently there's a way to trigger
320:59 - pre-builds from the url it's not
321:01 - something that i have found a
321:02 - requirement to do if you're really
321:03 - interested you could look it up
321:06 - but there's that while we're waiting
321:07 - there we might want to look at pin
321:09 - projects it's something i haven't done
321:11 - with gitpod yet
321:12 - so
321:13 - you can i guess not projects but
321:15 - workspaces
321:17 - so as far as i understand if you append
321:19 - a workspace it will remain there longer
321:22 - i believe so that is one advantage there
321:24 - is that if you have an environment that
321:25 - you want to stay you can just pin it
321:28 - okay and i don't think it will get
321:29 - deleted see unpinned workspaces that
321:31 - have been active for 14 days will
321:32 - automatically be deleted so if you have
321:34 - pain and environment and i don't know if
321:35 - you can pin multiple ones can i pin this
321:37 - one can i pin that one i have a feeling
321:40 - there's not like a pin limit so you
321:41 - could pin as much as you want i wouldn't
321:43 - probably recommend that
321:45 - but that might be something you need to
321:46 - do i haven't found a used to pinning so
321:48 - far
321:49 - here down below it says exit so i have a
321:51 - feeling that the pre-build is done
321:52 - sometimes it gets stuck on the screen so
321:54 - you can just close that out and go back
321:56 - over to your projects here
321:58 - and
321:59 - just launch it again okay if you ever
322:01 - see that it's not a big deal just
322:03 - because it's ready right so
322:06 - it's not perfect right like you just
322:08 - have to kind of like and there's no
322:09 - different than like using aws cloud
322:11 - service providers you just have to kind
322:13 - of be watching and aware and just being
322:15 - like okay i've waited too long let's see
322:16 - what we can do here and have confidence
322:19 - so we're waiting a while here for this
322:20 - to start up
322:21 - and um let's see what we have so it says
322:24 - here
322:26 - uh could not find sinatra gems so bundle
322:30 - saw to the install missing gems so
322:33 - it didn't work
322:34 - as we thought it would
322:37 - we are seeded into the correct directory
322:40 - we'll do grep um
322:41 - or we'll just maybe echo it so we'll say
322:43 - echo
322:44 - app env or app port
322:47 - so the port is set so that definitely
322:49 - fixed it
322:51 - why the install failed i don't know
322:56 - because it did run it up here as you can
322:58 - see
323:00 - and sinatra 2.1 is installed
323:04 - um
323:05 - [Music]
323:08 - let me do bundle install here
323:11 - you know it probably is
323:12 - it's my script so if you go over here
323:15 - because i changed it maybe into the cd
323:16 - directory
323:19 - because here it cds into it right but it
323:21 - would cd into that one as well so that
323:23 - shouldn't affect it
323:25 - let me just try running bundle exec here
323:27 - bundle exect
323:28 - ruby server.rb
323:33 - okay so that runs no problem
323:36 - there's nothing to change
323:37 - so i don't really trust what happened
323:39 - there so i'm just going to throw this
323:41 - environment away and launch a new one so
323:42 - we'll open up the context we'll close
323:44 - this out we're going to wait a moment
323:46 - here we're going to go ahead and launch
323:47 - a new one i'm just going to see we're
323:48 - going to make a new workspace there
323:50 - we're going to see if it works this time
323:51 - around because i'm not sure what it's
323:52 - complaining about
323:55 - but once you're used to using pre-builds
323:57 - and you have the environment working
323:58 - it's usually not a problem but sometimes
324:00 - there's a bit of friction moving from a
324:01 - non-project to another one and that's
324:03 - why i say like if you start with a
324:04 - project it's a little bit less painful
324:06 - someone says this task ran as a
324:08 - workspace pre-build could not find
324:10 - sinatra
324:11 - um things like that so
324:14 - run bundle and salt to install the
324:16 - missing gems
324:17 - so i'm just going to scroll up here and
324:19 - just see what it ran
324:24 - so again there shouldn't be
324:27 - a problem so i'll go back over here
324:32 - allow
324:35 - yeah so it's acting like the gems aren't
324:37 - installed is the gem file there
324:39 - the gem file lock is there
324:43 - hmm
324:48 - this is what i'm trying to figure out
324:49 - like
324:54 - hmm
324:59 - i'm not sure i'll be back here in a
325:00 - second okay all right so i had a little
325:02 - bit of time to think about it and you
325:03 - know what i think is happening
325:05 - is that when you install ruby gems
325:07 - they're not installing within this
325:09 - workspace directory and since anything
325:11 - outside this workspace directory gets
325:12 - blown away i think that's the reason why
325:14 - i'm having this issue now if you're
325:16 - using node node installs in the current
325:18 - directory so here like if i wanted to
325:21 - fix this problem i would just have to
325:22 - look up like okay how do i install uh
325:24 - the gems in the current directory if i
325:26 - want those to be cached and in place so
325:29 - i think like for ruby workflows it
325:30 - doesn't take too long to install gems
325:32 - but i think in this case for like ruby
325:34 - you have two options you can install
325:36 - based on the vendor so like uh bundler
325:39 - install gems in current directory or
325:42 - something like that
325:43 - so i could do this
325:47 - right and that would probably solve my
325:49 - issue
325:50 - um or
325:52 - you know i could do
325:54 - you know something else but that means
325:55 - when i run the uh
325:57 - bundle install i think i'd probably have
325:59 - to specify
326:01 - um where those gems are but you know the
326:03 - simple solution here would just be
326:05 - saying okay
326:06 - every like to this and put this here
326:08 - right
326:09 - but it really depends like if the bundle
326:10 - install takes really really long time
326:12 - then maybe i would want to
326:14 - move my gems to a vendored like
326:17 - directory like doing the path so it's
326:19 - really going to be up to you and the the
326:20 - constraints of your language but i think
326:22 - that is the reason that is happening
326:24 - there so again not a big problem i move
326:26 - that there and we're okay but yeah i
326:28 - think we're all done here and uh you
326:29 - know hopefully you understand how
326:31 - pre-builds work okay
326:33 - [Music]
326:37 - hey this is andrew brown and we are
326:39 - taking a look at get pod pricing so for
326:41 - good pod they have four
326:43 - uh possible plans available to you so we
326:45 - have the basic uh which is free personal
326:48 - at nine dollars usd per month
326:49 - professional twenty five dollars usd per
326:51 - month and unleashed at thirty nine
326:53 - dollars just d per month of course
326:55 - always make sure you double check the
326:57 - prices because they may have changed
326:59 - but you know generally they should be
327:01 - this if you go look online um they don't
327:04 - have uh the option to pay annually at
327:07 - least i did not see
327:09 - through the checkout process there but
327:10 - if you do need annual maybe just contact
327:12 - their team again i don't see anything
327:14 - describing like an annual discount i
327:16 - know some organizations care about that
327:18 - kind of stuff that's why i mention it
327:19 - but goodpod is really uh
327:21 - nice and easy to reach out to so you
327:24 - know they probably can make those kind
327:25 - of accommodations for you
327:27 - but let's take a look at what changes in
327:30 - terms of the feature set for these plans
327:32 - so no matter what plan you're using you
327:34 - get unlimited private and public
327:36 - repositories which is really nice in
327:37 - terms of the amount of workspaces you
327:39 - can run in parallel uh it's four for
327:42 - free and personal
327:43 - i don't feel like i'd ever be running
327:45 - more than one workspace at a time
327:47 - but you know maybe you have more than
327:49 - one tab open and you're toggling between
327:51 - uh maybe
327:52 - different domains
327:54 - of a microservice app so that's totally
327:55 - possible
327:57 - so that's something to consider for
327:59 - professional you have eight parallel
328:00 - workspaces unless you have 16 parallel
328:02 - workspaces
328:04 - in terms of timeout it's by default 30
328:06 - minutes between basic and professional
328:08 - and on unleash you extend it to one hour
328:12 - as the default right so every time it
328:13 - launches up it will do that
328:15 - um
328:16 - then the next thing is how many hours do
328:18 - we get per month of
328:20 - of runtime or consumption so for the
328:23 - basic you have 50 hours for personal
328:25 - it's a hundred hours a month uh and for
328:28 - professional it's unlimited hours and
328:31 - then just for the unleashed plan you
328:32 - have the option to do a three hour time
328:34 - boost so what they're saying here is
328:37 - that imagine you are
328:39 - just you're just about to go for lunch
328:41 - and you are
328:42 - running some kind of operation that you
328:43 - know is going to take a long time to run
328:45 - so you know you don't know it's going to
328:47 - finish but you have to let it run for a
328:48 - long time and so this is your
328:50 - opportunity to boost it so that your
328:52 - workspace doesn't time out after an hour
328:54 - and so that is the reason for that
328:56 - option and so that could be extremely
328:58 - useful okay
328:59 - so let's take a look at some of the
329:01 - other um
329:02 - uh plans they have that are outside
329:04 - these four here so there's the pro open
329:06 - source so this is a special plan for
329:08 - professional open source developers with
329:10 - unlimited hours on any public repository
329:13 - so you know this is just to help out
329:15 - people that are developing open source
329:16 - to help them reduce costs because it's a
329:19 - lot of work to give out uh open source
329:21 - stuff uh right so then there's a student
329:24 - plan so this is a a special plan for
329:26 - students so you provide an email
329:29 - with your
329:30 - domain of the institute educational
329:32 - institution so it'd probably have to be
329:34 - edu
329:35 - or what have you but the idea here is
329:37 - you get at least for nine dollars a
329:39 - month which is really nice then there's
329:41 - git pod for startups so this is eligible
329:43 - startups that can get unleashed plans
329:45 - for up to two years on git pods and
329:47 - there are some particular requirements
329:48 - so you do have to read into that but if
329:50 - you are startup that is a great
329:51 - opportunity for you there then there's
329:53 - get pod self hosted professional so
329:55 - these run get this runs the github
329:57 - platform on your own uh private networks
329:59 - or managed uh uh like manage kubernetes
330:03 - clusters within your own aws azure
330:05 - account what have you and this is at 35
330:07 - dollars per month starting with the 11th
330:10 - user okay
330:12 - [Music]
330:16 - so let's talk about how you can monitor
330:18 - your hourly usage so as you use git pod
330:21 - you consume in a lot of amount of hours
330:22 - based on your plan and so if you go to
330:24 - the plans page it will show you this
330:25 - remaining hours things and so here you
330:27 - can see i have 78.5 hours for the
330:30 - remainder of the month and so this is
330:31 - the way you could keep track of your
330:33 - current usage is there any way within
330:36 - the getpod workspace
330:38 - i didn't find it um but if there is i'd
330:41 - love someone to tell me but this this is
330:43 - great too so just if you want to keep on
330:45 - top of that okay
330:46 - [Music]
330:50 - all right so this follow along what i
330:51 - want to show you is where you can track
330:54 - your current usage so here i'm on git
330:56 - pods to go to getpod.io it should
330:58 - generally bring you here to projects and
331:01 - so what we can do is make our way over
331:03 - up to here in the top right corner or i
331:06 - think this goes the same place as long
331:07 - as you're in your personal account but
331:09 - if you go to the top right corner and go
331:10 - to settings and if we go to the
331:12 - left-hand side to plans uh what we'll
331:15 - see is this kind of bar meter here so it
331:17 - says open source but this is actually
331:18 - the basic plan so there's a bit of
331:20 - inconsistency with the naming here i
331:22 - believe you know if we go to
331:24 - uh maybe here if we just open this in a
331:26 - new tab
331:27 - um it doesn't show here if we go here to
331:30 - this pricing tab so this says basic
331:32 - right and so it says 50 hours and just
331:35 - going over here notice it just says open
331:36 - source so
331:37 - for whatever reason there is just that
331:39 - minor inconsistency but understand that
331:41 - is the basic plan but if you notice here
331:43 - it says upgrade your plan to get more
331:45 - hours parallel workspaces those
331:47 - remaining hours 43.6
331:50 - and so i've been using this quite a bit
331:52 - and it hasn't been running out which is
331:53 - really nice um is this present anywhere
331:56 - else no so i was looking through like
331:58 - the get pod interface or command pals
332:01 - and things like that to see if it would
332:02 - be displayed somewhere else it isn't uh
332:05 - anywhere else uh as of yet um i'm i
332:08 - could imagine that they might want to do
332:09 - that in the future but for the time
332:11 - being uh this is where you're gonna have
332:12 - to find it but honestly like again i'm
332:14 - just running this and never really
332:15 - noticed so if you are
332:17 - hitting this limit then you probably do
332:19 - want to upgrade because you're using it
332:20 - very seriously but there you go okay
332:23 - [Music]
332:28 - so git pod also offers team pricing so
332:31 - team pricing
332:33 - or a team plan is for organizations to
332:35 - pay on behalf of their team members to
332:37 - centralize billing to a single account
332:39 - so the idea is you say i need x amount
332:41 - of members
332:42 - uh for this type of plan and that will
332:45 - be for your teams and so you can also
332:47 - set the currency there's nothing else
332:50 - that is um available around team pricing
332:53 - it's just a way of centralizing your
332:54 - billing maybe in the future they'll add
332:57 - more particular things just for teams
332:59 - but for the time being this is what it
333:01 - is okay
333:02 - [Music]
333:06 - hey this is andrew brown and we're
333:07 - taking a look at self-hosted git pods so
333:10 - get pod oss or
333:12 - open source that's what the oss stands
333:14 - for allows organizations to self-host
333:16 - their own gitpod platform on their own
333:19 - private networks so getpod is built on
333:21 - top of kubernetes and the short form of
333:24 - communities is k8 so and it has
333:26 - deployment instructions for
333:28 - a various amount of managed k8 services
333:31 - so to list a few we have google
333:33 - kubernetes engine so gke
333:36 - lightweight kubernetes so k3s elastic
333:39 - kubernetes service so eks azure
333:42 - kubernetes service aks
333:44 - rancher kubernetes service rks but i
333:47 - think that it's going to work on
333:48 - anything that has kubernetes so
333:50 - um you know if digitalocean has an
333:52 - offering or walter has an offering
333:54 - or you're running your own kubernetes
333:56 - cluster you know on a virtual machine i
333:58 - imagine that you could probably do it
334:01 - for self-hosted offers um what you're
334:03 - going to get are the public and private
334:05 - repos integrations will get lab github
334:07 - and bitbucket unlimited pre-built shared
334:09 - workspaces snapshots admin dashboard so
334:12 - basically everything if there's
334:13 - something that's not in there i'm not
334:14 - sure what is not being listed but it
334:17 - seems like everything you can get podio
334:20 - self-hosted is offered in two tiers the
334:22 - open source so the first registered
334:23 - users are free and then professional
334:26 - exceeding 10 users you need to pay for
334:28 - professional plan so to upgrade to
334:30 - professional you need to obtain a
334:31 - license and one question i have and i
334:34 - have this question because this is the
334:35 - same thing with
334:37 - terraform cloud where they have
334:38 - something similar after you exceed a
334:40 - certain amount you are paying
334:42 - but the thing is do you pay for the
334:44 - first 10 users i don't know i could not
334:46 - definitively answer that question for
334:48 - you i'm going to lean on the side that
334:50 - yes when you are when you
334:52 - cross over to the 11th user you got to
334:54 - get your professional key you're going
334:55 - to be paying for 11 users which i think
334:57 - is fair because it's not like it's going
334:59 - to be super expensive and at that point
335:01 - you should be able to pay for them but i
335:03 - don't definitively know okay
335:05 - [Music]
335:09 - hey this is andrew brown and we are
335:11 - looking at get pods security so gitpod
335:13 - employs a variety of security controls
335:15 - and security best practices so let's
335:17 - take a look at this so the first is
335:19 - compliance if you're not familiar
335:20 - compliance it's basically compliance
335:22 - programs that are industry standard or
335:25 - best practices and you have like a
335:27 - third-party company that does a
335:29 - testament to say yes this company is
335:30 - meeting those requirements and then they
335:32 - get a certificate to prove it that they
335:34 - they are doing that stuff so one thing
335:37 - is get pod is sock to compliant and so
335:39 - this ensures your service providers
335:41 - securely manage your data to protect the
335:43 - interests of your organization and
335:44 - privacy of its clients so this is a
335:47 - really good thing to have it's also
335:49 - really
335:50 - expensive so you know that they're
335:51 - taking security very serious a lot of
335:54 - times you'll see the iso 2701 with this
335:57 - as well but you know this is good the
336:00 - other one they have is gdpr so
336:02 - the gdpr is guidelines for the
336:04 - collection and processing of personal
336:06 - information from individuals who live in
336:07 - the european union um so basically
336:10 - everybody is being gdpr no matter where
336:12 - they are in the world because it's the
336:14 - internet and anyone can be from uh from
336:16 - europe coming onto your website so this
336:18 - is pretty common so it's good to see
336:20 - that they just mentioned that there uh
336:21 - so we have environment isolation so get
336:23 - pod workspace or pre-builds run on a
336:25 - secured single-use container separate
336:27 - user
336:28 - uh pid mount and network namespace for
336:31 - each gitpod workspace stress test
336:33 - namespace layering implementations by
336:35 - third party company kin volkswagen
336:37 - companies specializing in kubernetes so
336:40 - i think namespace layering is very
336:42 - important because it just it is virtual
336:44 - iso isolation between clients okay
336:48 - then there's the fact that git pod is
336:50 - open source so open source allows for a
336:52 - faster security feedback loop allows git
336:54 - pod partners customers or the community
336:56 - at large to identify disclose or
336:58 - contribute fixes to critical exploits we
337:01 - have authentication and authorization so
337:03 - gitpod uses version control systems
337:06 - single sign-on and you can apply
337:08 - granular or fine-grain permissions based
337:11 - on the providers integration options so
337:13 - they're basically offloading that uh
337:15 - that concern over to get lab github
337:18 - bitbucket and you know those are very
337:20 - large companies so you know their
337:21 - practices are going to be very very good
337:24 - uh we have integra or sorry
337:26 - encryption so they have at rest
337:28 - encryption so all data including
337:30 - workspace backups and environment
337:32 - variables are using advanced encryption
337:34 - standards so
337:35 - aes256 and then we have uh in transit
337:38 - encryption so git pod uses transport
337:41 - layer security so tls so there you go
337:44 - [Music]
337:48 - hey this is andrew brown and we're
337:49 - talking about the security vulnerability
337:51 - disclosure policy so if you believe you
337:54 - have discovered a vulnerability privacy
337:56 - issue exposed data or other security
337:59 - issue relating to gitpod you can report
338:01 - it via the security vulnerability
338:02 - disclosure policy and you can read all
338:05 - about it here it's a big document if you
338:07 - want to have a fun time to read the
338:09 - policy outlines the steps for reporting
338:11 - to gitpod they pretty much say like hey
338:13 - if you do report it you can do it and
338:15 - you're not going to get in trouble
338:16 - because a lot of people are concerned
338:18 - that if they find a problem and they
338:19 - report it that they're going to get in
338:21 - trouble for doing that
338:22 - just because and so you know they kind
338:24 - of outline that and just also give you a
338:26 - lot of extra information there to report
338:29 - you need to email getpod providing as
338:31 - much detail as possible to security at
338:33 - getpod.io
338:35 - some companies will have a form
338:37 - and the language of this document
338:39 - suggests that they do have a form but it
338:41 - turns out it's just email so i imagine
338:42 - they might have a form of the future but
338:44 - it's you know email's fine too so there
338:47 - it is okay
338:52 - hey this is andrew brown and i'm just on
338:54 - the get pod website because i just
338:55 - wanted to show you here at i o forward
338:57 - slash security the kind of stuff that
338:58 - they have here so they just say like who
339:00 - is using get pod so you know it's safe
339:02 - how many uh developers
339:04 - companies are using so you understand
339:06 - the scale of it
339:07 - some of their principles uh that they
339:09 - are uh considering or they are
339:11 - implementing i should say uh so they're
339:13 - secure by design uh about their
339:15 - compliance the things that we already
339:16 - covered in the lecture content
339:19 - but the thing that i just wanted to show
339:21 - you here is the security vulnerability
339:23 - disclosure policy because there is a bit
339:25 - more there that just couldn't fit on the
339:26 - screen so there's a bunch of stuff here
339:28 - that you might want to read about the
339:30 - interesting part is like safe harbor a
339:32 - lot of people are concerned that you
339:33 - know if they report a problem that they
339:35 - might get in trouble for it but getpod
339:37 - saying uh you know if you find a
339:38 - vulnerability and you share with us
339:40 - don't worry you're not going to be uh
339:42 - getting in trouble for it uh and we just
339:44 - want to make sure that you understand
339:45 - that so that we encourage people to
339:47 - submit things as you can see here it is
339:49 - at security at getpodio if i click on
339:51 - this there wasn't a form before
339:53 - still no form it's just going to the
339:54 - same place here so maybe eventually
339:56 - they'll have a form but honestly all
339:58 - forms do just kind of give you some
339:59 - additional fields here you can just
340:01 - basically write whatever you want in
340:03 - there i guess they uh have
340:05 - thanks some contributors here like sneak
340:07 - and get lab and stuff like that but uh
340:10 - yeah that's pretty much all you really
340:11 - need to know for security okay
340:14 - [Music]
340:18 - hey this is andrew brown and we are
340:20 - taking a look at get pod support so get
340:22 - pod has a wide range of
340:24 - support options and so we're just going
340:26 - to quickly go through the list here so
340:27 - that you're aware of them nothing super
340:29 - exciting but just making sure you know
340:30 - what's there the first is documentation
340:33 - so technical documentation describing
340:35 - the various features of git pod we have
340:37 - a change log so historically release
340:39 - changes so it shows you features and bug
340:41 - fixes there's a community form which is
340:43 - just a discourse form uh with community
340:46 - and official support we have the discord
340:48 - server so this is a chat server to
340:50 - interact with community members and get
340:52 - pod employees in real time we have the
340:54 - get pod road roadmap so this is a github
340:56 - project which is basically a kanban
340:58 - board showing planned and upcoming
341:00 - features based on annual quarters there
341:02 - is a status page so this is an atlatian
341:05 - status page showing up time and service
341:08 - interruptions for the underlying
341:09 - infrastructure so like maybe the k-day
341:11 - the kubernetes customers running goodpod
341:13 - workspaces and the gitpodio platform
341:15 - that's probably what it's for
341:18 - we have git pod or is our github issues
341:21 - so open tickets for bugs or feature
341:23 - requests directly on the open source
341:24 - project
341:26 - account settings so change email
341:27 - settings notification settings nothing
341:29 - super exciting there
341:31 - obviously you can change your plans so
341:34 - that's another option as well and then
341:35 - there's the sales support form so send
341:38 - an email to gitpod's sales team about
341:39 - self-hosting educational discounts
341:42 - reselling or other gitpod does not have
341:44 - a paid tier support or direct toll-free
341:47 - number for individuals however
341:49 - enterprises may inquire about additional
341:51 - levels of support after contacting sales
341:53 - because if you're a bigger company
341:55 - they're probably going to roll out the
341:56 - red carpet for you but they just don't
341:58 - say like explicitly hey this is the tier
342:01 - that we offer and things like that okay
342:03 - [Music]
342:07 - hey this is andrew brown and we are on
342:09 - the support page here ford slash support
342:11 - because i just wanted to show you some
342:13 - of the varieties of support that you can
342:14 - utilize so the first thing is we have a
342:16 - status page here so if we go ahead and
342:18 - open that up we're going to see it's
342:19 - kind of an uptime uh here they're using
342:22 - the atlatian status page so a pretty
342:24 - common one here to just kind of show you
342:26 - uh what's going on here so if you look
342:28 - at workspaces we see operational here's
342:30 - some part partial outage um and more of
342:33 - some part of the outage here you can see
342:35 - the duration here
342:36 - um says in the u.s region so clearly
342:38 - they're operating in multiple regions
342:40 - here i've never ever ever experienced
342:42 - any kind of problems uh working with uh
342:45 - getpod but it's really nice to see they
342:46 - have the status page
342:48 - here a workspace stuck stuck in stopping
342:51 - okay so you can see that there's some
342:52 - information so that's kind of
342:53 - interesting
342:55 - um you know if we go to contact support
342:56 - i don't know if this is just email so oh
342:58 - we have a form here so you can see
343:00 - report reviews billing educational
343:02 - discount verification supposed to get
343:04 - pod looks like some of the context
343:06 - changes a little bit here so you go
343:08 - ahead and fill that in and send that
343:09 - over
343:10 - um we have the change log we just go
343:12 - ahead and open that up so this is going
343:13 - to tell you what they've been adding to
343:16 - the product so here on october 14th we
343:18 - have introducing teams and projects so
343:20 - these are basically linking to blog
343:22 - posts just talking about what has been
343:23 - released down below you can see the
343:25 - fixes and improvements so it's not just
343:27 - features but it's also bug fixes there
343:29 - if you open that up you can see that it
343:31 - is all on github so again it is an open
343:34 - source project so that's really great
343:35 - there too
343:36 - um if you go to the community forum that
343:38 - is in discourse
343:40 - now i've yet to sign up for oh sorry
343:42 - this is discord um and i do actually
343:44 - have that this is over
343:46 - [Music]
343:47 - um i'm just gonna pull it up here in a
343:49 - moment so this is over here i'm not sure
343:51 - what i'm looking at here but um you know
343:53 - here is the get pod so i'm actually
343:56 - sitting in this here as well and talking
343:58 - as i work on this course i've been
343:59 - updating the uh build in the open here
344:01 - so they're very active and this is a
344:03 - great way in real time to connect with
344:05 - um get pod employees developer advocates
344:07 - uh and get help there or get directed to
344:09 - different kind of support options um
344:12 - the
344:13 - uh the form is really good too this is
344:16 - community form this is discourse
344:19 - oh i thought i clicked this does this go
344:20 - to the right place let me click that
344:23 - oh i think i found a bug i think i found
344:26 - a bug so in this case what i'm going to
344:27 - do is just take a screenshot here
344:29 - and i think someone just has a miss link
344:31 - here so we'll go down below and we'll go
344:34 - to support i'm just going to say here
344:38 - you know i think this is supposed to
344:40 - link
344:42 - to the discourse
344:44 - but it's going to the discord
344:49 - and that's a fair that's a fair issue
344:51 - there just because like discourse and
344:52 - discord are very similar so it wasn't me
344:54 - what happens if i go here
344:57 - no see that goes to the chat so that's
344:58 - going to the wrong place
345:02 - unless i got rid of the discourse
345:04 - get paw discourse
345:10 - let me try this again
345:13 - let me try this again
345:17 - discourse form
345:19 - oh okay so i think maybe they retired it
345:23 - which is totally fine um honestly
345:26 - it doesn't say here but honestly like i
345:28 - found that like i didn't really have a
345:30 - use case for the discourse i'd rather
345:31 - just be in the discord where is real
345:33 - time
345:34 - i'm not going to go back to my course
345:36 - and update that because i'd rather just
345:37 - leave this in here just to kind of show
345:39 - that that is uh a edge case there so i
345:41 - probably what's going to happen is
345:42 - they'll end up
345:43 - um just changing that wording here to
345:45 - discord and then that confusion will be
345:47 - gone but there was a discourse at one
345:49 - point uh and i was pulling some kind of
345:51 - information from it but um you know
345:53 - honestly again i prefer just to do
345:55 - everything on discord let's go take a
345:57 - look at the getpod roadmap so this is
345:59 - just a project here
346:01 - we go over here to the top notice get
346:03 - podio roadmap if you go here you can see
346:05 - all of their
346:07 - getpod repositories did not know you
346:09 - could put a readme there that's really
346:10 - nice but down below you can see all
346:12 - these here right
346:13 - and so if we go back and go to the
346:14 - getpod product roadmap you can kind of
346:16 - see what's being worked on at the
346:18 - current moment so we are in uh q4 and so
346:22 - we see introduced project level
346:24 - environment variables team pricing jet
346:26 - brains remote development support image
346:27 - layers faster workspace startups which
346:29 - honestly they're really fast to begin
346:31 - with but if they can make them faster
346:32 - that's great and future stuff so that's
346:35 - a great way to just kind of see what is
346:37 - coming
346:38 - down the road
346:39 - in terms of git pods so that is really
346:41 - nice as well
346:42 - we saw the status page if you want to
346:44 - report a bug it's going to probably take
346:46 - us to the github yeah that goes there so
346:48 - if we open that up i think it might just
346:50 - pre-populate some text for us yeah so it
346:52 - has some nice boxes for us
346:54 - um this is not the discussion these are
346:56 - just forms so that looks really good so
346:59 - we'll go back here and um we'll go all
347:02 - the way back
347:03 - and then you get your self-hosted thing
347:04 - or your account settings not so much to
347:06 - look at the account settings as we've
347:08 - seen this quite a few times in this
347:09 - course so really they're just like
347:11 - talking about like notifications like
347:13 - what do you want to turn off which there
347:14 - aren't a lot of options there or
347:16 - managing your plan right there's not
347:18 - really support within the get pod i o
347:20 - per se you always have to reach out to
347:22 - the discord and stuff like that click on
347:24 - help this just goes back to the support
347:26 - page but that gives you an idea of the
347:28 - level of support and honestly it's a lot
347:30 - it's really great so and i said this
347:32 - also you know in the in the lecture
347:34 - content but you know if you are an
347:35 - enterprise i would imagine you just
347:37 - reach out and you know if you're if you
347:40 - are large i'm sure you'll get a direct
347:43 - phone call with git pod and they
347:45 - probably would create some kind of
347:46 - custom um support plan for you uh but
347:49 - they don't you know they just don't say
347:51 - it here on the pricing okay so i just
347:53 - talked to them i said yeah if you're if
347:54 - you are an enterprise would you do some
347:56 - kind of deal and they're like yeah of
347:57 - course we would do something you know um
347:59 - but they just don't show it as a as like
348:01 - a lot of places we'll have like a fifth
348:02 - box they like contact us okay but there
348:05 - you go all right so i just want to show
348:07 - you the support in action so it's
348:08 - actually really great that uh this uh
348:10 - this happened because i can just show
348:11 - you like i just went here into the
348:13 - discord i opened a ticket it became a
348:15 - thread i went into here you can see
348:17 - pauline said check out the announcements
348:18 - over the announcements and i i assume
348:20 - that it was rolled into it and so we go
348:22 - over to our announcements here
348:24 - and you can see that uh you know they've
348:26 - said that they've um they've they've uh
348:30 - you know
348:30 - have archived the discourse and so now
348:33 - they want to make the discord the future
348:35 - home and again i think that is the right
348:37 - place for it so i'm really happy with it
348:38 - if you're looking for the old stuff
348:40 - because there is some stuff in there
348:42 - that is good but probably by the time
348:43 - you watch this video you might not be
348:45 - interested but they did go and archive
348:47 - all the old stuff here so it is still
348:50 - accessible it's just read-only on the
348:53 - wayback machine but yeah it was a great
348:55 - opportunity to see that in action so
348:57 - there you go
348:58 - [Music]
349:02 - hey this is andrew brown and we're
349:04 - taking a look at git pod open source so
349:06 - get pod open source is a combination of
349:08 - open source projects built by get pot
349:10 - and so you know when i was looking at
349:12 - the uh github repos i just noticed that
349:14 - there's more than just one and so
349:16 - there's one called uh
349:18 - worfd
349:19 - and this is a kubernetes native
349:21 - continuous integration system we have
349:23 - leeway this is a heavily caching
349:26 - uh build system for go yarn docker
349:28 - projects dazzle this is a experimental
349:31 - docker oci image builder its goal is to
349:34 - build independent layers where a change
349:35 - to one layer does not invalidate the one
349:38 - sitting above it and then there's open
349:40 - vs code server which is a fork of
349:42 - uh the vs code
349:44 - project there and so
349:46 - you know we don't really need to know
349:48 - much about these here um but this is the
349:51 - one that we really care about because
349:52 - this is pretty much
349:54 - what powers get pod i o okay that's what
349:56 - git pod io's it's it's a um
349:59 - a managed version of this and so we're
350:01 - going to give extra attention to that
350:02 - one okay
350:03 - [Music]
350:07 - hey this is andrew brown and i just want
350:09 - to
350:10 - poke around here on the get pods
350:13 - team or organizational page that is on
350:16 - github so that's at github.com forward
350:18 - slash get pod hyphen io and it just goes
350:21 - shows to show like how much stuff
350:23 - they're doing with open source so they
350:24 - have 159 repositories that you can see
350:27 - who in their organization is there if
350:29 - you want to reach out or just kind of
350:30 - learn more about git pod
350:32 - you can even sponsor them if you want
350:33 - because again it's open source projects
350:35 - so that is an option to you
350:37 - get pod does make money on their
350:40 - platform side but you know helping in
350:42 - either way can always help out uh there
350:45 - is projects i think this is like a new
350:46 - feature of github which i don't really
350:48 - understand as of yet so here's a project
350:50 - and they have a bunch of itemized items
350:52 - like a roadmap here don't fully
350:53 - understand it but that's kind of
350:54 - interesting there when we
350:56 - go into the repositories and there is a
350:58 - lot you can see all sorts of things i
351:01 - think the reason why there's so many is
351:02 - because all of their templates live here
351:04 - so we looked at the quick start template
351:06 - so just understand that's why it's so
351:08 - large but the main one here is get pod
351:10 - here at the top so we'll open that up
351:12 - and we'll take a look at the website
351:13 - here um
351:15 - and we'll just go and take a look so
351:17 - here's git pod so git pod automates the
351:19 - provision of ready to code developer
351:21 - environment so this is going to be for
351:23 - the actual platform right so i believe
351:26 - that when you want to
351:28 - self-host this is the repository you're
351:30 - going to be using
351:31 - this is the same experience you get when
351:33 - you go to getpod.io so it will give you
351:35 - that gui and also this interface here
351:38 - this thing the underlying thing is based
351:40 - off um the open vs code server which
351:43 - we'll look at separate uh in another
351:45 - video because i actually want to show
351:46 - you how to run that on your own um but
351:49 - yeah this thing is here how you use this
351:52 - i don't know i guess we'll have to look
351:53 - that look at that if we do show the
351:55 - self-hosted git pod option i'm going
351:58 - over to the website basically anything
352:00 - that you see on the website in terms of
352:02 - the documentation you can absolutely
352:04 - contribute to so like let's say we go to
352:06 - get pod i o uh forward slash docs i
352:09 - believe
352:10 - and we go to some page like configure
352:12 - here um if you go and click edit and get
352:15 - pod
352:16 - this will launch this environment if you
352:18 - look up here you can see
352:19 - well it went too quick there but you can
352:21 - see it's loading up the website here so
352:23 - we'll just give it a moment
352:25 - okay
352:27 - and actually this might be a great
352:28 - opportunity for us to correct that uh
352:30 - discourse option right because uh they
352:33 - no longer have discourse which is
352:35 - totally fine and it's discord so maybe
352:37 - through here we can help with that
352:39 - language so we saw it on the support
352:42 - page
352:43 - and i'm just wondering how we could go
352:45 - find that so
352:46 - [Music]
352:49 - and you know i'm not that familiar with
352:50 - it but i'm good enough that i can kind
352:52 - of make my way around here
352:54 - so if i go to
352:56 - let's say
352:57 - contents
352:59 - there's probably a global way we can
353:00 - search
353:01 - so we'll go here and i'm going to go to
353:04 - find in files and we'll just type in
353:07 - discourse
353:10 - we found the discourse logo support ts
353:12 - so i feel like it is here
353:15 - okay and
353:17 - if i go over here
353:20 - oh look it's oh no it's not missing it's
353:22 - just me so this is community forum if
353:23 - you're looking for help with common
353:24 - requests connect with our community on
353:28 - discord
353:30 - okay and then so from here i'm going to
353:34 - just change that so
353:36 - use discord instead of discourse
353:41 - okay and then we're going to go ahead
353:42 - and commit that
353:45 - and we will sync those changes the thing
353:47 - is is that we can't push to main we'll
353:49 - need to have our own fork which is
353:51 - totally fine so i'm hoping it'll pro up
353:52 - prop up and say hey you need to
353:55 - have your own fork so is not accessible
353:58 - please grant necessary permission so
354:00 - let's say open access
354:03 - um
354:04 - so i guess we kind of have to make our
354:06 - own fork here i think that's what we're
354:08 - going to have to do
354:09 - so what i'm going to do here is go back
354:11 - and i'm just going to go and fork this
354:14 - uh here so where's my fork here we go
354:16 - fork
354:22 - but just kind of show you like how you
354:24 - can contribute to get pod which is kind
354:26 - of interesting so now we have the
354:28 - website ourselves and we're going to go
354:30 - ahead and just close these out and
354:32 - reopen this here
354:46 - now if you're watching this of course
354:48 - you don't have to do this um but just
354:49 - because i've would have already made the
354:51 - change but it doesn't hurt to go through
354:53 - this process to show you so again i'm
354:54 - going to go to the top left corner here
354:56 - we're going to go file um and we're
354:58 - going to say find in files or whoops
355:00 - edit
355:01 - find in files
355:03 - discourse
355:07 - we'll go to support here
355:11 - and there are a few here that still say
355:13 - discourse but we really want discord
355:15 - so we'll just switch that over to
355:16 - discord i'm going to go over here to the
355:18 - right hand side and did i save that file
355:20 - i did
355:22 - there we go so we'll just say
355:25 - change wording from discourse
355:29 - to discord
355:32 - and we'll save that
355:35 - and we will sync those changes and we'll
355:37 - say ok and before we open or like we
355:40 - submit our pull request we should
355:41 - probably open a ticket so here on the
355:43 - main one
355:44 - we'll go over to issues we'll open up a
355:46 - new tab
355:47 - and i'm just going to open a new ticket
355:49 - here and we're going to file a bug
355:50 - report i'm going to open up get pod io
355:53 - forward slash support here
355:56 - actually i want to keep that other tab
355:57 - open so just keep it there for a second
356:00 - and
356:01 - oh sorry we want to go to get pod io for
356:04 - slash
356:04 - support and i'm just going to take a
356:07 - screenshot here
356:08 - okay we'll go back over this ticket
356:11 - and
356:12 - um
356:13 - so i'll just paste that in there so
356:14 - we'll just say
356:16 - um
356:18 - gitpod is no longer using
356:22 - using um discourse so the wording
356:28 - here needs to be changed
356:30 - to discord
356:33 - all right um and sometimes they'll say
356:35 - like show the example so what we'll do
356:36 - is just go ahead and grab that link here
356:39 - paste that on in um
356:43 - it requires all the other ones here i
356:45 - don't like that they i mean this is not
356:46 - uh git pod but like they've kind of
356:48 - forced these parameters
356:50 - so say um
356:52 - github support page should say
356:55 - discord instead of
356:59 - discourse
357:03 - okay and then i'm just gonna grab
357:06 - flamingo emoji i'm gonna be like the
357:08 - worst person ever and just kind of like
357:10 - phone it in
357:12 - whole point of those boxes to make sure
357:13 - you do it right so we'll just say that
357:16 - we'll put in those
357:17 - anything else
357:19 - okay
357:20 - and we'll go ahead and submit that
357:22 - ticket because i just need an issue so
357:23 - when i submit it i can tie it to that
357:25 - right so now i have this
357:27 - pound 7113 and so what i'll do is go
357:30 - back to mine and so now it says uh you
357:32 - know your branch is up to date
357:34 - and i want to go to pull requests here
357:38 - um
357:39 - you know what i didn't make a fork
357:41 - that's what i should have done so if i
357:42 - go back over here we're going to stop
357:44 - this here i'm going to go get checkout
357:47 - hyphen b
357:49 - and we're going to say
357:51 - discourse old wording
357:56 - and then i'm just going to push it
358:02 - allow
358:04 - and this is a good habit to put the id
358:06 - name in there but i didn't do that which
358:08 - which is totally fine
358:10 - and so we'll see if it allows us to just
358:12 - push
358:16 - seems to be doing some kind of
358:17 - diagnostic i'm not exactly sure why
358:20 - not sure what that is for but what i'm
358:22 - going to do is go back and refresh here
358:23 - because i did this recently but it seems
358:25 - like there's been a few changes here and
358:27 - so i'm just not exactly familiar with it
358:29 - just yet
358:31 - so it looks like the branch was pushed
358:32 - if i go back here and give this a
358:34 - refresh
358:35 - the branch should show up um
358:37 - [Music]
358:39 - so say old and notice like that some
358:40 - people are putting the numbers in there
358:41 - so that's a good thing to do but we'll
358:43 - just say uh disc discourse old wording
358:48 - and so i want to
358:50 - uh
358:51 - merge this in so i think if i go back to
358:53 - the original git pod here
358:55 - and
358:56 - uh we make a pull requests
359:00 - let's say new poll request here
359:03 - and notice this is main and main so
359:05 - compare main
359:06 - and um i want to do it for mine so we'll
359:11 - say old
359:13 - uh compare cross forks we'll click there
359:16 - okay i could probably done it from here
359:18 - again it's just it's always a little bit
359:19 - confusing you just have to kind of be
359:21 - doing this on a regular basis if you're
359:23 - not doing open source on a regular basis
359:24 - it can get confusing so
359:26 - compare the base to here i think we want
359:28 - the one on the right hand side here so
359:30 - we'll say old
359:32 - um get pod or discourse
359:35 - oh i have to change this to my
359:36 - repository
359:38 - so oh and i'm in i'm in the wrong one
359:39 - i'm supposed to be in website
359:42 - okay so we'll go back here lots of
359:44 - mistakes on my part here but not a big
359:46 - deal because usually it'll it'll pop up
359:48 - sometimes and say hey do you want to
359:49 - make this pull request or something but
359:50 - we'll say a new pull request
359:54 - and
359:55 - it's not showing my old ones but what
359:57 - we'll do is compare across forks again
360:01 - and i'm going to say for that branch
360:03 - there discourse
360:06 - oh i'm not choosing my darn branch
360:09 - there we go okay
360:11 - let's just me creating so much trouble
360:13 - so i don't want to do it against maine
360:15 - because that's not proper you're always
360:16 - supposed to do it from a feature branch
360:18 - or whatever kind of branch you want to
360:19 - call so we'll call discourse here
360:21 - there it is
360:23 - and so now what i'll do is go ahead and
360:25 - create a pull request
360:27 - we have some text in here and so what i
360:29 - want to do is link the related issue so
360:32 - it fixes if we go back to did i open
360:34 - this in the right place
360:36 - oh i opened this to the wrong place
360:40 - oh
360:41 - sorry
360:43 - this is supposed to be
360:46 - open on the website okay
360:51 - all right that's embarrassing so now
360:52 - what i got to do
360:55 - i'm rolling my eyes if you can't see it
360:56 - but what i got to do is go back to the
360:58 - website here i can do the second take of
361:01 - this so this is the take you're going to
361:02 - get for this video
361:04 - but
361:05 - we'll go ahead and we'll open this issue
361:07 - again we'll say
361:10 - doc feedback
361:12 - okay this is a lot easier to work with
361:14 - here
361:15 - um
361:16 - so we'll type in https forward slash
361:19 - forward slash get pod i o four slash
361:21 - support
361:22 - i'm just gonna go grab that again so
361:24 - we'll say
361:26 - get pod i o forward slash supports
361:34 - okay and we'll just paste that on in
361:36 - there like that
361:38 - and we'll just say um
361:42 - uh gitpod no longer
361:45 - uses discord or sorry discourse so the
361:48 - text here
361:50 - needs to change from discourse
361:55 - to discord because that's where it does
361:57 - actually redirect to
361:59 - and uh
362:01 - change wording
362:03 - from discourse to discord
362:07 - we'll submit that
362:09 - and so there is our ticket now we have
362:11 - our issue so we'll go back to our pull
362:13 - request and we'll say this fixes that
362:15 - so we'll go over here they'll link to
362:17 - that um
362:20 - renaming
362:21 - discourse to discord
362:24 - on support page
362:26 - there are still
362:28 - other lingering cases
362:31 - but i was just showing
362:33 - this for the purpose
362:36 - of a video demonstration
362:41 - okay so we'll go ahead and create that
362:43 - pull request
362:45 - and so there i've contributed to the get
362:47 - pod open source
362:49 - um so you know hopefully that gives you
362:51 - kind of an idea of like the ecosystem
362:53 - here and why it's valuable because you
362:54 - don't have to wait on get pod you can
362:56 - start to take action or dig into things
362:58 - but uh yeah there you go
363:00 - [Music]
363:04 - hey this is andrew brown and we're
363:05 - taking a look at openvs code server so
363:08 - openvs code is a version of visual
363:09 - studio code that runs a server on remote
363:12 - machines allowing access through a
363:14 - modern
363:15 - web browser so git pod and github code
363:17 - spaces uses the same architecture at
363:20 - scale so open vs code server can be run
363:24 - on a linux machine so a virtual machine
363:26 - or on a docker
363:28 - as a container so here's an example if
363:31 - you wanted to start it on a virtual
363:32 - machine and here's an example of you
363:35 - wanting to start it on docker and
363:36 - actually uh when git pod first came out
363:39 - before they had the i o offering this is
363:41 - what i would use to try to launch uh my
363:44 - own um vs code on aws and it worked i
363:47 - just wasn't able to figure out how to
363:49 - make the space the the server turn off
363:52 - reliably where gitpodio has clearly
363:54 - solved that in a very intelligent way so
363:57 - just to clarify you have the vs code as
364:00 - open source you have open vs code server
364:02 - which is a fork that's built on top of
364:04 - the vs code open source code base then
364:06 - there's the open vs code which is used
364:09 - within git pod and other tools which
364:11 - that's where we get gitpod.io the gitpod
364:13 - platform okay
364:18 - [Music]
364:19 - hey this is andrew brown and we're
364:20 - taking a look at openvs code server and
364:23 - so this is a fork developed and
364:25 - maintained by getpodio so here you can
364:27 - see the original fork is vs code by
364:29 - microsoft and so this one was modified
364:32 - uh just to give you a bit more
364:33 - flexibility
364:35 - and the key thing is is that this is
364:37 - what gitpod is using so if you want to
364:40 - run your own uh openvs code server it's
364:43 - not too hard uh but you know if you
364:46 - really do just need an environment to
364:48 - work with your team strongly recommend
364:49 - just using the getpod
364:52 - platform itself but you know for
364:54 - whatever reason if you want to know how
364:56 - to do this i figure it doesn't hurt to
364:58 - show you how so there are two ways to
365:00 - run it via docker and linux linux is the
365:03 - easier way to get going so that's what
365:04 - i'm going to show you here today so i'm
365:06 - here in my aws account and i'm going to
365:08 - make my way over to ec2 and you can do
365:11 - this for anything whether it's azure or
365:13 - gcp or any platform as long as you can
365:15 - run a virtual machine but i'm just going
365:17 - to use aws because that's what i'm most
365:18 - comfortable with so i'm going to go
365:20 - ahead and launch a new instance here i'm
365:22 - going to choose an amazon linux 2
365:23 - instance which is generally recommended
365:26 - i'm choosing a t3 micro here but any
365:28 - size will do these small sizes work uh
365:30 - pretty great here and uh the key thing
365:33 - that i need to do here is make sure that
365:35 - i have an i am role that has permissions
365:38 - to sessions manager i'm just going to
365:39 - open this up really quickly if you're
365:41 - not familiar with this stuff here
365:44 - i just want to show you if you go ahead
365:45 - and create a role
365:48 - all i'm doing here is typing in ssm
365:51 - whoops uh maybe uh sorry create a role
365:53 - here i thought i already clicked it
365:56 - and so you'd say for ec2 you go next
366:00 - and we would go ssm here
366:02 - and in here we would want to get access
366:04 - for um
366:06 - amazon ec2 role i think this one is old
366:09 - so you have to use this one instead
366:10 - which is not a big deal i think i'm
366:12 - using that anyway so you create a role
366:14 - with that permissions and that's what we
366:15 - are attaching here
366:17 - uh as our role that's gonna allow us to
366:19 - use sessions manager so we don't have to
366:21 - use um ssh keys or things like that but
366:24 - once you have that there we'll go over
366:26 - to our security groups we're going to
366:27 - have to open port 3000 i think that's
366:29 - what it runs on default actually i think
366:31 - it's port 8000
366:33 - so we will open that up um and we'll go
366:36 - review and launch we'll say launch we
366:38 - will launch with no key pairs so proceed
366:40 - without a key pair because we do nee do
366:42 - not need one here
366:44 - and we'll give it a moment to launch so
366:46 - we'll go
366:47 - here and click on the instance itself
366:49 - and so it'll take a little bit time to
366:51 - launch they're not too long but what
366:52 - we're going to need to do is go get the
366:54 - latest uh downloads if you just open
366:56 - this up in a new tab under linux you
366:58 - scroll on down you'll notice we have arm
367:00 - 64 arm hf x64 x64 is for the i guess the
367:05 - intel chip and these are arm chips so uh
367:08 - since we launched a virtual machine
367:10 - that's uh on the x64 architecture that
367:13 - is what we're going to be using so here
367:14 - i'm just copying the link address
367:16 - because if you look at it it's a raw raw
367:18 - link directly to the tar atar is like a
367:20 - zip file or an archive
367:22 - but once this is running and usually we
367:24 - wait for the two status checks to pass
367:26 - but i'm just going to go ahead and
367:27 - connect because i think it will work
367:29 - we're just going to connect with
367:29 - sessions manager that's why we set up
367:31 - that i am role with
367:33 - ssm the
367:34 - simple systems manager access to
367:36 - sessions manager and so this is going to
367:39 - open up a black screen
367:41 - and from here i'm just going to type in
367:42 - sudo hyphen ec2
367:45 - user just because oops sudo su hyphen
367:49 - ec2 user just because it always starts
367:51 - us off as
367:52 - a different kind of user and we want to
367:54 - be the ec2 user here what we can do is
367:56 - type in wget space and we'll go ahead
367:58 - and paste that link in and hit enter
368:00 - that's going to download that tar there
368:03 - i'm just going to type in clear just to
368:04 - clear my screen to make things easier i
368:06 - know the font's a little bit small so
368:07 - i'll try to bump it up here
368:09 - um and so if we just have to untar it so
368:11 - i always forget what to type here so
368:13 - let's go ahead and copy that and we'll
368:15 - paste that in there
368:16 - and we will follow up with openvs code
368:19 - server hit enter
368:21 - and that's going to expand the archive
368:23 - so we can go cd into that directory and
368:26 - now it's just as simple as running this
368:28 - period forward slash server sh so sh is
368:30 - a bash command or bash script and so if
368:33 - we do period it's equivalent of saying
368:35 - like sh
368:36 - like if you did it like this
368:38 - but uh it's more popular to run x cable
368:40 - like that so we'll hit enter and that's
368:42 - going to start on port 8000 and here
368:44 - it's going to give us a web uri so we
368:46 - want this part of the url
368:48 - whoops i didn't mean to click it through
368:50 - there hold on here it doesn't make it
368:52 - too easy to click but if we just
368:54 - a shrinker font there go back to our
368:56 - instance we want that public ip address
368:58 - i'm going to go ahead and grab that
369:00 - paste it on in here and then i just need
369:02 - the end so just go ahead and grab that
369:04 - and try to copy it it doesn't make it
369:06 - easy to copy so you might have to open
369:08 - your browser like this and
369:10 - we'll go back over here paste that on
369:12 - there and it should hopefully work
369:14 - fingers crossed
369:17 - um
369:18 - porta 8000 cannot be reached so just
369:20 - double check make sure that is correct
369:23 - looks okay to me
369:24 - we grab the public ip address so that
369:27 - should be fine
369:29 - oh i think we stopped the server by
369:31 - accident
369:32 - okay
369:34 - i'm just seeing if it changed yeah it
369:36 - did change i'm just gonna click that
369:37 - again
369:39 - okay so we just got to be really careful
369:41 - there because i guess it's very finicky
369:44 - still running okay good
369:48 - and i just need to delete out
369:51 - this part of it here yeah we know why
369:53 - it's forbidden that's totally fine
369:59 - okay and i think it's working we'll just
370:01 - give it a moment
370:05 - there we go so here's vs code it's or
370:07 - openvs code
370:09 - uh and so you know that's a way of
370:10 - self-hosting i mean the thing is is that
370:13 - you have a lot that you need to solve if
370:15 - you do this like how are you gonna
370:16 - persist uh your data so like you don't
370:19 - lose it or how do you back it up how do
370:21 - you make it intelligent so that it knows
370:23 - to turn off when you are not uh using it
370:26 - i guess there's a lot of things here you
370:28 - also notice that it's a little bit
370:29 - different from the one that uh um get
370:31 - pod uh uh gives you so like notice it
370:34 - doesn't say get pod on the bottom or
370:35 - have the command palettes and things
370:36 - like that so this is really just being
370:39 - able to run
370:40 - the um
370:43 - open vs code server okay like if you
370:45 - needed this kind of editor here um but
370:48 - anyway you know it is something you can
370:49 - do and it's part of the get pod project
370:52 - so i just wanted to make sure
370:53 - uh that i showed you there let's go
370:55 - ahead and shut down this ec2 instance so
370:58 - we'll go ahead and just terminate that
371:00 - instance there so let's say terminate
371:03 - and
371:04 - i'm pretty confident that it's
371:05 - terminating so i'm i'm confident that is
371:07 - going to be destroyed not worried about
371:08 - it so yeah there you go open vs code
371:12 - [Music]
371:16 - hey this is andrew brown your cloud
371:18 - instructor exam pro bringing you another
371:20 - complete study course and this time it's
371:22 - the xampp pro cloud developer
371:23 - environment certification made available
371:25 - to you here on freecodecamp so this
371:28 - course is designed to help you pass and
371:29 - achieve
371:30 - example issued certification and the way
371:33 - we're going to do that is by going
371:34 - through a lecture content doing follow
371:36 - alongs within our own account
371:38 - doing a practice exam so that we're
371:40 - preparing for the day of the exam and
371:42 - also utilizing cheat sheets so that you
371:44 - can cram some last minute information so
371:47 - that you're able to pass that exam and
371:50 - improve on your resume and on your
371:51 - linkedin you've got that cloud developer
371:53 - knowledge so you can get that cloud job
371:55 - or that promotion so i am andrew brown i
371:58 - was previously the cto of multiple
372:00 - edtech companies with 15 years industry
372:02 - experience five years specializing cloud
372:04 - i'm an awesome community hero and i've
372:06 - published many many free courses uh just
372:09 - like this one and if you ever want to
372:11 - buy me drink i love coconut water i want
372:13 - to take this moment to thank viewers
372:15 - like you because it's you that make
372:16 - these free courses possible and the best
372:19 - way you can support more free courses
372:20 - like this one is to buy the additional
372:23 - study material so that is the link there
372:25 - at the exp cd01 where you can get study
372:28 - notes flash cards quizlets downloadable
372:30 - lecture slides downloadable cheat sheets
372:32 - prax exams you can ask questions get
372:34 - learning support and it's all free to
372:36 - sign up yeah just to even get your prax
372:38 - exam cheat sheets so it requires no
372:41 - credit card there's no trial limit so
372:42 - there's no reason not to sign up
372:44 - and if there are updates to this course
372:46 - look in the in the youtube comments to
372:48 - see when there is an update and this is
372:51 - where we would see things like
372:52 - corrections additions modifications to
372:55 - ensure that you're using the latest
372:56 - version of this course and if you want
372:58 - to keep up to date on upcoming courses
373:00 - the best way to find out is to follow me
373:02 - on twitter and share with me what you
373:05 - passed and what you'd like to see next
373:07 - so there you go let's get to it
373:13 - journey asking the most important
373:15 - question first which is what is the
373:17 - cloud developer environment
373:18 - certification so the cloud developer
373:20 - environment or cde is a practical cloud
373:23 - certification center round of the open
373:25 - source developer tool get pod and here
373:28 - we're going to learn about the benefits
373:29 - of cloud developer environments over
373:31 - traditional tools practical knowledge
373:33 - utilizing a cde for the purpose of
373:35 - application or cloud development
373:37 - team-based collaborative features for
373:40 - utilizing cds because that is the main
373:42 - benefit of cdes advanced cde techniques
373:45 - like custom containers pre-builds and
373:47 - more the course code for this course is
373:50 - exp cde 01 and the reason that is
373:53 - important to know is because that's how
373:55 - you know what version of the exam you're
373:58 - taking so you always want to make sure
373:59 - that you double check to make sure that
374:01 - you are using the latest
374:03 - course there and so exp is the
374:05 - certification authority in this case it
374:07 - is exam pro cde is the name identifier
374:10 - standing for cloud developer environment
374:12 - and one is the version of the exam we
374:15 - also like to call this exam the get pod
374:17 - essential certification or the git pod
374:19 - course because it's so focused on git
374:22 - pod but there's a reason why this that
374:24 - is and we'll explain here in a moment so
374:25 - who's the certification for well
374:27 - consider the cloud developer environment
374:29 - certification if you are new to
374:31 - programming or scripting because if you
374:33 - are working in the cloud you're going to
374:35 - have to have an environment to code and
374:37 - the best environment is in the cloud at
374:38 - least in my opinion here
374:40 - if you are a web application developer
374:42 - role or you're transitioning into a
374:44 - cloud developer role
374:46 - it's a very good idea to adopt cloud
374:49 - developer environments or if you're a
374:50 - director of engineering or staff
374:52 - engineer and you're looking to adopt cd
374:54 - cdes to optimize the dealing and
374:56 - productivity of your development team
374:58 - because that is the main benefit of
375:00 - adopting it is that you're going to get
375:02 - increased productivity so before we look
375:04 - at the roadmap we always do a roadmap to
375:06 - show you where should you go after the
375:08 - certification
375:09 - but i need to break this down into three
375:11 - types of certifications because this is
375:13 - an exam pro certification and so we have
375:15 - three types fundamental certifications
375:17 - that's where we have a cloud concept
375:19 - that is best taught with a large focus
375:22 - on cloud agnostic knowledge so example
375:24 - of that would be the cloud programming
375:26 - certification we have technology
375:28 - specific certifications like a cloud
375:30 - concept that is best taught by using a
375:32 - single technology in greater detail and
375:34 - in this case that is what the get pod
375:36 - certification is it's it's just that you
375:39 - know we want to teach cloud developer
375:41 - environments but it just makes sense to
375:43 - use a single tool for that then there
375:45 - are our role-based certifications so
375:47 - this is where you have done a bunch of
375:49 - fundamental and technology-specific
375:51 - certifications and then you are
375:53 - requiring to submit a project to earn
375:56 - that role so example would be the exam
375:58 - pro's cloud developer certification so
376:00 - let's take a look at our roadmap and see
376:02 - where we can go
376:04 - with the gitpod certification so the
376:06 - idea is we have that fundamental
376:07 - knowledge that technical specific
376:08 - knowledge and then the idea is that
376:10 - we're trying to
376:12 - show that proof of combined knowledge to
376:14 - earn that role-based certification so
376:17 - this is all based for a cloud developer
376:20 - or modern application developer there's
376:22 - overlaps with other cloud rules like
376:23 - cloud engineers but let's take a look at
376:25 - the cloud developer specific path here
376:27 - so the idea is that you would start with
376:29 - the cloud developer environment because
376:31 - if you're going to be doing programming
376:33 - or development you're going to need an
376:34 - environment so it makes sense to know
376:37 - inside and out a cloud developer
376:38 - environment from there you would need to
376:41 - know a variety of different programming
376:43 - languages in the context of cloud
376:44 - programmings working with sdks apis cli
376:47 - things like that so that is the natural
376:49 - path after the cde
376:52 - from there we would look at application
376:53 - integration so leveraging a host of
376:57 - cloud services and integrating them into
376:59 - your
377:00 - traditional or your modern
377:02 - application and then cloud deployment
377:05 - because that seems to be something that
377:06 - is very important uh for cloud
377:08 - developers is having not just the
377:09 - ability to develop applications but to
377:12 - deploy and it's not just deploying
377:13 - applications but deploying uh integrated
377:16 - services as well from there it's really
377:18 - good to fundamentally understand
377:20 - virtualization which is not a topic that
377:22 - uh it kind of gets overlooked with the
377:24 - cloud developers so that's where
377:26 - application developers so that's why
377:28 - i think we include it here from there
377:30 - there is linux specific information
377:32 - there's windows specific information and
377:34 - for virtualization a natural path there
377:36 - is containers and then serverless so to
377:38 - me this is the scope of fundamental and
377:40 - tech specific knowledge that
377:42 - you should acquire to be a cloud
377:44 - developer and then once you have this
377:46 - knowledge you need to prove it some way
377:48 - and so that's where we have this idea
377:50 - behind having a cloud project to show
377:52 - all the knowledge and practice so you
377:54 - might be looking at saying wow that's a
377:56 - lot of certifications well the great
377:57 - thing though is that these
377:58 - certifications are smaller in scope
378:01 - and so instead of taking a big big exam
378:03 - like how aws azure or gcp has you do
378:06 - these are more focused so that you're
378:08 - having a bunch of smaller wins and
378:10 - you're getting better coverage um so you
378:13 - can think of it like a movie versus
378:15 - watching a high production long running
378:18 - or like a
378:19 - high production tv series it's just a
378:21 - different approach to
378:23 - study okay so how long does it take to
378:25 - pass for the cloud developer environment
378:27 - so
378:28 - we have the beginner side and so here i
378:30 - say 24 hours um the idea is that if
378:33 - you've never programmed before if you've
378:34 - never held a web developer role it's
378:36 - going to be on the greater side here 24
378:39 - hours if you're experienced that means
378:40 - you have practical working experience
378:41 - with web apps
378:43 - you have um held a web developer
378:45 - engineering role we're looking at 14
378:48 - hours and so in between here this is
378:50 - where i say the average hours 20 hours
378:52 - now this could be a lot faster if you
378:55 - just watch the videos on two times it's
378:56 - up to you right so like there is 14
378:58 - hours of content it's mostly because
379:00 - of the the lecture or the lab content so
379:03 - there's a lot of hands-on
379:05 - but you know if you watch it uh on two
379:07 - times then you know you're done in seven
379:08 - hours if you're experienced so just
379:10 - understand that you know it looks like a
379:12 - lot of hours but it's not as bad as it
379:13 - looks um it's fifty percent lecture lab
379:16 - content fifty percent practice exams
379:19 - and then the recommendation here is to
379:20 - study one to two hours for
379:22 - ten days
379:24 - okay what does it take to pass the exam
379:26 - well the idea is you're going to be
379:27 - watching lecture video memorizing key
379:28 - information you're going to be doing
379:30 - hands-on labs and there's a lot of it
379:32 - so follow along with your own account so
379:34 - you'll have to get a free gitpod account
379:37 - and any other things that go along with
379:39 - it and we make sure that we always make
379:40 - sure things are free for you
379:42 - so you can learn at the the lowest cost
379:44 - or at no cost
379:46 - and you'll have to do practice exams to
379:47 - simulate the real exam the great thing
379:49 - is on exam pro we have a full free
379:51 - practice exam for you no credit card
379:53 - required uh to get it so it's at exp
379:56 - cd01
379:58 - and that's where you're going to go grab
380:00 - that
380:01 - in terms of the content of the actual
380:03 - exam it's broken up into five domains
380:06 - and each domain has its own weighting
380:07 - which determines how many questions in
380:08 - our domain that will show up so we'll
380:11 - take a look at the domains the first
380:12 - domain is cloud developer environment
380:13 - concepts which is seven percent uh get
380:16 - pod integrations which is five percent
380:18 - thirty uh uh domain three which is good
380:21 - pod configurations is 35 percent get pod
380:23 - workflows is 35 percent and 18 for git
380:27 - pod io enterprise get pod oss so you
380:30 - know when we engineered this course we
380:32 - didn't just make it for people that are
380:33 - going to apply
380:34 - uh um
380:35 - [Music]
380:37 - apply it for their work but just also
380:39 - for that executive level that needs to
380:41 - understand how to adopt it for their
380:42 - team so that's what this category here
380:44 - is for is understanding the ecosystem
380:46 - for adoption
380:47 - um and you know a lot of it comes down
380:50 - to just knowing how to work with it as a
380:52 - team and knowing how to configure your
380:54 - environment to be productive in real
380:56 - world use cases so uh where do you take
380:59 - the exam well the exam is taken online
381:01 - from the convenience of your own home
381:02 - and this and the exam is delivered via
381:04 - the teacher's seat anchor system so
381:06 - teachers see anchor is an online uh
381:09 - secure exam system to deliver
381:10 - certification exams similar to pearson
381:12 - vue or psi online and ensures exam
381:15 - credibility via their ai assisted
381:17 - proctor so a proctor is a supervisor or
381:19 - person who monitors students during an
381:21 - examination so that way we make sure
381:24 - that you're not cheating and that you
381:26 - definitely have obtained the skills
381:28 - yourself there
381:29 - to schedule exam what you'd have to do
381:31 - is actually sign up for example so you
381:32 - keep seeing this thing up here you do
381:34 - have to go there to do the exam
381:36 - but once you sign up you can go uh into
381:40 - the course and click on the schedule
381:42 - button and from there you can schedule
381:44 - your exam it'll have all the information
381:47 - there
381:47 - for the grading exam you have to score
381:49 - at least an 80 percent we say around 80
381:51 - percent because this uses scaled scoring
381:53 - skilled scoring just means that we use a
381:55 - point system and so the idea is that you
381:57 - know tomorrow we decide to make it out
381:59 - of 2000 points it's still going to be
382:00 - based on the percentage of 80 percent so
382:03 - when you go for the exam make sure
382:05 - you're trying to aim for 85 percent on
382:06 - your practice exams to make sure that
382:08 - you are comfortable uh with the exam
382:10 - when you go sit it for the response
382:12 - types um first of all first off we have
382:15 - 55 questions so all questions are scored
382:17 - there are no unscored questions and
382:19 - there are no funny questions so you know
382:22 - it shouldn't be too difficult you can
382:24 - afford to get about 10 questions wrong
382:25 - there is no penalty for wrong questions
382:28 - and the format of the questions are
382:29 - going to be multiple choice and multiple
382:31 - answer the duration of the exam is 1.5
382:33 - hours so you get about 1.5 minutes per
382:35 - question the exam time is 90 minutes the
382:37 - seat time is 120 minutes and somebody
382:39 - say the seat time we're referring to the
382:40 - amount of time you should allocate for
382:42 - the exam this includes time to review
382:44 - the instructions show online proctor to
382:46 - your workspace read and accept the nda
382:48 - complete the exam provide feedback at
382:50 - the end and this exam is going to be
382:52 - valid for 36 months so that's three
382:54 - years before re-certification
382:57 - so hopefully that gives you an idea of
382:59 - what you are jumping into here
383:02 - again the exam is not intended to be
383:04 - difficult it's very practical if you
383:06 - follow the content here it'll be pretty
383:08 - easy for you to do
383:11 - but yeah there you go
383:12 - [Music]
383:20 - hey this is andrew brown and we are
383:21 - looking at the question of what is cloud
383:23 - native and now this is not a as
383:26 - straightforward as you'd imagine because
383:27 - there are a few different definitions
383:28 - here so we're going to have to go
383:30 - through a few little iterations here to
383:31 - just kind of conceptually understand
383:33 - what it is but cloud native at least the
383:35 - way i describe it is an architectural
383:37 - approach that emphasizes application
383:39 - workloads that are portable modular and
383:41 - isolate between different cloud
383:43 - deployment models and cloud service
383:45 - providers so that is what my definition
383:48 - of it is but if you talk to cloud
383:50 - service providers and we say cloud
383:51 - service providers we're talking about
383:52 - aws azure gcp uh they describe it as a
383:56 - term meaning everything built on their
383:58 - platform so you know if you were not to
384:00 - use on-premise and only to ever use aws
384:03 - they would call that cloud native
384:06 - but i would actually better describe
384:07 - that as being cloud first so sometimes
384:09 - cloud native and cloud first mean the
384:11 - same thing depending on who you're
384:13 - talking to
384:14 - then there's uh some models out there
384:15 - that say that certain components go into
384:17 - cloud native so modern design automation
384:21 - micro services containers and a bunch of
384:24 - backing services and then other ones
384:26 - describe cloud native as being four
384:27 - principles so micro services
384:29 - containerization continuous delivery
384:32 - which you could say is automation and
384:33 - devops which could mean anything because
384:35 - devops has so much stuff involved but
384:37 - you can just see that there are a few
384:39 - different things there i'm hoping that
384:40 - we lean towards my definition because i
384:42 - feel like that is a more comfortable one
384:44 - there but if it does feel confusing
384:46 - don't worry about it
384:47 - it's not just clearly defined it's just
384:49 - kind of like serverless where it's hard
384:50 - to pin down but in the context of get
384:52 - pod and cloud developer environments
384:54 - cloud native means uh we'll be utilizing
384:56 - microservice architecture modern
384:59 - application architecture so think
385:00 - function as a service such as containers
385:02 - and kubernetes okay so hopefully that
385:05 - and when i say that it's just the fact
385:06 - that when you have cloud developer
385:08 - environments they're going to be better
385:10 - drivers or enablers for
385:13 - modern architectures okay
385:19 - hey this is andrew brown and we are
385:21 - taking a look at two very similar but
385:23 - also distinct roles or technical roles
385:25 - that strongly benefit from cloud
385:27 - developer environments or cdes and so
385:30 - that is a cloud developer or a modern
385:33 - application engineer and you know cds
385:37 - can be used by any kind of role that's
385:38 - working in the cloud but these two in
385:41 - particular strongly benefit
385:43 - because they're writing a lot more uh
385:45 - programming code okay and also
385:48 - interacting with cloud workloads but
385:50 - let's talk about how they are
385:52 - similar and also how they are different
385:53 - so for both these roles they take a
385:56 - cloud first approach meaning that
385:58 - generally they're starting um you know
386:00 - on a cloud service provider
386:03 - you know in the case of modern
386:04 - application engineer you can still be
386:05 - doing that on premise but generally
386:08 - speaking they're going to be focused on
386:10 - using a cloud service provider first
386:13 - in terms of like how the role is focused
386:15 - for cloud developer they're focused on
386:17 - building out the product and the product
386:19 - features whereas a modern application
386:22 - engineer is architecture focused so
386:24 - they're more interested in how to make
386:26 - the underlying resources work in scale
386:28 - and things like that
386:30 - the cloud developer is specifically
386:31 - going to focus on application
386:33 - integration with cloud services so
386:34 - that's what makes it different from a
386:36 - regular developer is that interaction or
386:38 - the interconnections with other cloud
386:40 - services which enables you to basically
386:42 - build microservices and for a modern
386:45 - application um uh engineer they're
386:48 - architecting cloud native workloads so
386:52 - that might be setting up like a
386:53 - kubernetes
386:54 - cluster writing infrastructure as code
386:58 - setting up automation and things like
387:00 - that
387:01 - and then you know just some other things
387:03 - like things that you would
387:05 - see that a cloud developer would do that
387:06 - a modern application engineer does would
387:08 - be things like deployment by knowing
387:10 - some infrastructure as a code not a
387:12 - priority for them but it's just
387:13 - something they definitely know whereas
387:15 - the modern application engineer has
387:17 - things like automation scaling and
387:19 - operations so just to reiterate here uh
387:22 - it's like if you're taking a cloud-first
387:24 - approach to building web applications
387:25 - using cloud-native workloads or
387:27 - cloud-based tooling that sounds like a
387:29 - cloud developer and the focus is less
387:31 - about the architecture and life cycles
387:32 - and scaling and more about a being a
387:34 - productive developer using cloud and
387:37 - then on the other side of it we're
387:38 - looking at the modern application
387:40 - engineer
387:41 - it's about thinking about how to
387:42 - architect applications using serverless
387:45 - containers microservices there's a
387:47 - larger focus on the underlying
387:48 - architecture lifestyle
387:50 - life cycles and scaling not so much
387:52 - about building out the web application
387:54 - and it's less product focus so you know
387:57 - i just want you to know these two things
387:58 - because if you are entering cloud these
388:00 - are the titles you should be trying to
388:02 - cling on to if you really are invested
388:04 - as a programmer okay
388:06 - [Music]
388:10 - hey this is andrew brown and we're
388:12 - taking a look at code editors versus
388:14 - integrated development environments and
388:16 - the reason why is because git pod
388:18 - supports both and these usually look
388:20 - very similar but they are also
388:22 - dissimilar in a lot of ways and it's
388:23 - good to understand um the trade-offs of
388:26 - using one over the other so let's talk
388:28 - about a code editor so a code editor is
388:29 - for writing computer code and they will
388:31 - generally support many programming
388:32 - languages with things like syntax
388:34 - highlighting in recent years code
388:36 - editors will include a community
388:37 - marketplace for extensions that allows
388:39 - you to add a variety of features to
388:41 - customize your code editor for specific
388:43 - workflows so the thing is back in the
388:46 - day when we had code editors they were
388:47 - very simple and the only way you'd have
388:50 - like really rich functionality was via
388:51 - an ide because it had everything there
388:54 - for you but now things have changed and
388:56 - things are a lot more modular and
388:57 - flexible but notable creditors would be
389:00 - things like visual studio code sublime
389:01 - vim notepad plus plus textmate things
389:04 - like that then we look at integrated
389:06 - development environments so an ide is a
389:08 - suite of tightly integrated programming
389:10 - tools
389:11 - under a single unified gui so an ide are
389:15 - generally more powerful than code
389:16 - editors and are specialized for a
389:18 - specific language or framework or you
389:19 - could say they are very opinionated for
389:22 - a specific framework or workload so they
389:25 - will include things like a terminal code
389:26 - editor debugger compiler deployment file
389:29 - management and all sorts of tooling
389:31 - notable ids here would be jetbrains
389:33 - eclipse xcode android studio visual
389:35 - studio and in a lot of cases sometimes
389:37 - it's the only way you can really develop
389:39 - stuff it's really hard to develop mac os
389:41 - applications without xcode
389:42 - it's possible but a lot of times you
389:44 - know the the technology is so
389:47 - well designed for that use case you end
389:49 - up using ides
389:51 - but i do need to note that modern code
389:52 - editors can be modified through a
389:54 - collection of extensions to work nearly
389:55 - the same as ide so that line is becoming
389:58 - a little bit blurred
389:59 - but let's just look at the uh overall
390:01 - comparison so code editors are
390:03 - multi-purpose modular light portable and
390:05 - generally cross-platform when i say
390:07 - they're portable like them which is a
390:09 - code editor can be something that's used
390:11 - in the browser
390:12 - as a desktop app or even in the terminal
390:15 - but then you have things like ides uh
390:17 - these are special uh so
390:19 - in contrast they are specialized
390:20 - monolithic heavy designed to be used as
390:23 - mostly desktop apps because they need a
390:25 - full gui and may not be cross-platform
390:28 - um but we say as a desktop app um you
390:30 - know that's starting to change because
390:31 - like jetbrains is now able to use
390:33 - jetbrains projector to run in the
390:35 - browser so you know these things are
390:37 - starting to meet in the middle but it's
390:38 - still good to know the difference
390:40 - between these terms but most people
390:42 - these days are using code editors okay
390:45 - [Music]
390:49 - hey this is andrew brown and we are
390:51 - taking a look at the seven benefits of
390:53 - cloud developer environments so i just
390:55 - want you know this isn't like an
390:56 - industry standard but these are the
390:58 - things that i thought that were the most
391:00 - important things to highlight about them
391:02 - so if you are talking to someone trying
391:03 - to understand why to adopt a cde into in
391:07 - terms of your company workflow these are
391:08 - the seven things you should be telling
391:10 - them the first is context so you can
391:11 - start a runtime system runtime system is
391:14 - just a developer environment on the
391:15 - context of your workload so pull
391:18 - requests uh maybe based around an issue
391:21 - a testing environment or sandbox or q a
391:24 - then there's mobility so easily move to
391:26 - different workstations so whether you're
391:27 - on mac to windows to linux
391:30 - all you need is a browser you can use
391:32 - multiple kinds of version control
391:34 - systems so maybe you're on github today
391:37 - tomorrow you might want to use gitlab or
391:39 - bitbucket things like that works with
391:41 - different kinds of editors so maybe you
391:42 - like visual studio code but you'd rather
391:44 - use jetbrains so you have the ability to
391:46 - move between them or you know maybe you
391:48 - are on a laptop a chromebook or even a
391:51 - tablet so you know there's a lot of
391:53 - mobility you get there then we talk
391:55 - about agility so quickly start up
391:57 - developer environments no time spent
391:59 - configuring your environment
392:01 - and so that's a pretty clear one it's
392:02 - just the fact that you've already put in
392:04 - the work for the configuration either
392:06 - other team member has or you have and
392:08 - the idea is that it's going to spin up
392:10 - and start that up right away then you
392:12 - have disposability or they're being
392:14 - disposable so always start from a clean
392:16 - point discard long live credentials at
392:19 - the end of a work session um what's
392:21 - really important to understand here is
392:22 - just like or like a use case is the fact
392:25 - that a lot of times you'll install like
392:27 - libraries if you're working with
392:29 - multiple projects you might install
392:30 - different libraries they break other
392:32 - libraries but here that's not a problem
392:33 - because everything is in the scope of
392:35 - that single project and you're disposing
392:37 - things at the end always then you have
392:39 - reproducibilities or or being
392:41 - reproducible so you can go back through
392:43 - your git history and launch the exact
392:45 - state of a developer environment with
392:47 - the required environment configuration
392:48 - because as you are
392:50 - changing your code you're also changing
392:52 - like the configuration to set up that
392:55 - environment and you'll have that history
392:57 - there in your commits
392:59 - then you have a
393:00 - progression or being progressive so with
393:02 - progressive versioning always start uh
393:06 - you always start with an environment
393:07 - with the latest stuff and that's poorly
393:09 - worded there but the idea that i'm
393:10 - trying to say there is like with git pod
393:13 - you can have pre-builds and so every
393:14 - change might discover breaking changes
393:17 - because it will run the code every
393:18 - single time and so as you encounter it
393:22 - you can address and then upgrade those
393:24 - to the latest version
393:26 - right so that's the idea of always
393:28 - staying on the latest then you have
393:29 - collaboration so we were talking about
393:31 - real-time collaboration here um so being
393:34 - able to share the state of a developer
393:35 - environment so hopefully you know that
393:37 - is pretty clear about those seven things
393:39 - context mobility agility disposability
393:42 - reproducibility
393:44 - being progressive or progressive
393:45 - versioning and being collaborative so
393:47 - there you go
393:48 - [Music]
393:52 - hey this is andrew brown and we are
393:54 - asking a very important question uh in
393:56 - this course which is what is gitpod so
393:59 - gitpod is a company specializing in
394:01 - cloud developer environments via the
394:03 - gitpod open source software or the
394:05 - gitpod.o which is the platform so it can
394:08 - be a little bit confusing at first
394:09 - because it's like is it the product this
394:11 - is the company name or it's whatever but
394:13 - we'll just go through here to make sure
394:14 - it's crystal clear so get pod oss open
394:17 - source software which is located on
394:19 - github
394:21 - is a developer environment as code and
394:23 - if you're wondering what i mean by that
394:25 - it's that it's an open source kubernetes
394:27 - application for ready to code developer
394:30 - environments that spin up fresh
394:32 - automated dev environments for each task
394:34 - in the cloud in seconds and enables you
394:36 - to describe your dev environment as code
394:39 - and instantly start remote cloud or
394:41 - cloud developer
394:42 - environments directly from your browser
394:44 - or your desktop id or even tablets if
394:47 - you want which i have yet to try but i'm
394:49 - sure it does work
394:51 - as long as you have a browser you can do
394:52 - it
394:53 - and so the idea is we have getpod.io
394:56 - and this i call it a developer
394:59 - environment as a service
395:01 - which is not something you need to
395:02 - really remember but it's basically a
395:04 - software as a service so it is a
395:05 - cloud-based fully managed offering of
395:07 - the open source software with a free and
395:10 - paid tier uh and so hopefully that is a
395:13 - distinction that it's a company that's
395:15 - an open source software it's also a
395:18 - cloud platform okay
395:20 - [Music]
395:24 - all right so i just wanted to get you
395:25 - some exposure to git pod so if you went
395:28 - to www.getpodio
395:30 - this is the main website here so you can
395:33 - read all about it if you like but we do
395:36 - of course cover everything that is in
395:37 - here then there is the actual open
395:39 - source git pod
395:41 - and so this is where they have a variety
395:42 - of different repositories
395:45 - so you can start reading here and again
395:46 - we cover this within the course but they
395:48 - have a lot of repositories here and then
395:50 - there's the actual platform itself which
395:51 - is getpodio
395:53 - if we click into here there's no app
395:55 - it's just the naked domain uh here you
395:57 - can see i've been launching workspaces
395:58 - which will get into but you know again
396:00 - just to get you a little bit exposure uh
396:03 - to that gitpod ecosystem okay
396:06 - [Music]
396:10 - hey this is andrew brown and we are
396:12 - taking a look at getpod versus other
396:13 - providers i think it's important to know
396:15 - the options that are out there and maybe
396:17 - to understand why i chose to do a gitpod
396:20 - course as opposed to making an agnostic
396:22 - course um but let's go through it so the
396:24 - first is gitpodcodespaces formerly known
396:26 - as visual studio online if you try to
396:27 - find visual studio online anywhere you
396:29 - just can't find it uh it'll let me have
396:31 - like a marketing page it'll always link
396:32 - back to github code spaces so maybe both
396:35 - projects existed at one point maybe
396:37 - visual studio online was always github
396:38 - code spaces and was rebranded we really
396:41 - don't know but all there is is github
396:42 - code spaces so github code spaces is
396:45 - proprietary online code editor
396:46 - specifically for github so understand
396:49 - that it's proprietary not open source so
396:51 - um you know if you are locked in there
396:53 - you're not going to take that code
396:54 - editor into deployed on your own
396:56 - infrastructure so just understand that
396:58 - is one thing uh key differences you pay
397:01 - based on computing instant size so i
397:03 - believe that it's metered billing so uh
397:05 - i mean that's nice if that's how you
397:07 - like your compute to be like i use this
397:09 - many hours i pay for this many hours but
397:11 - you do have to choose or right size your
397:14 - instance so that
397:15 - uh could be good if like let's say you
397:17 - need something that's more powerful than
397:19 - git pod provides but git pod like has a
397:22 - really beefy instance and at a cost that
397:24 - like it's just really really cheap so
397:26 - you know even though you know metered
397:28 - billing and uh being able to use your
397:30 - size sounds good uh you know this is one
397:33 - of those rare cases where i prefer get
397:34 - pod because i just don't have to think
397:35 - about it it's like totally serverless it
397:37 - doesn't currently have pre-builds right
397:39 - now so you can have longer wait times um
397:41 - i would imagine they would probably end
397:43 - up adding this at some point so uh you
397:45 - know even though i say there's not
397:47 - pre-builds right now uh you know it
397:49 - seems like github code spaces would add
397:51 - that and a very huge key difference is
397:53 - that it runs on a virtual machine so
397:55 - when you are launching um a git pod it's
397:58 - using docker right as a way of launching
398:00 - its containers and so
398:02 - um i mean
398:04 - like i'm finding containers to be a lot
398:05 - more flexible first i thought virtual
398:07 - machines would be better because maybe
398:08 - you need to install docker on a virtual
398:10 - machine or or images but you can run
398:12 - docker within docker so it doesn't
398:13 - matter um and it's just a lot easier to
398:16 - package like docker files for that kind
398:18 - of stuff so i kind of feel like git pod
398:20 - has the advantage there because it's
398:21 - using containers okay
398:23 - um and the use case here is only if
398:25 - you're using github so if you're using
398:26 - git lab or code commit or something else
398:29 - uh you know you're not gonna be using
398:31 - github code spaces so you have to
398:32 - understand that your workflow is going
398:33 - to be very tied to github and this might
398:35 - cause friction for larger companies that
398:37 - like are using elazi and jira and they
398:40 - have everything in bitbucket which is
398:42 - very popular so you know just has to
398:44 - work
398:44 - fit your workflow github of course is
398:46 - the most popular version control system
398:48 - out there and then visual studio code is
398:50 - the most popular code editor so you know
398:52 - for most people it's going to meet their
398:54 - use cases but you know uh
398:56 - i i just i still lean towards get pod
398:58 - here then we have aws cloud nine so this
399:01 - is an online code editor service within
399:02 - aws
399:03 - um
399:04 - i liked it i liked it for years i still
399:06 - use it for a lot of use cases
399:08 - it runs on a virtual machine you can
399:10 - only choose very particular types of
399:12 - amis to run it on but i mean i guess
399:14 - it's no different with um git pods
399:16 - because git pod runs on debian ubuntu
399:18 - like a debian like instance and so i
399:20 - guess cloud9 technically has more
399:22 - flexibility of what the virtual machine
399:24 - is but when you're dealing with
399:25 - containers you can have whatever you
399:27 - kind of whatever you want i guess not
399:29 - because in git pod you can only run
399:31 - debian or ubuntu instances but
399:35 - yeah i guess there's more flexibility
399:36 - here with cloud9
399:37 - you pay for the online virtual machine
399:39 - cost it has a free tier um
399:42 - these case here is if you need a simple
399:44 - persistent developer environment with
399:45 - simple collaboration features you want
399:47 - to take advantage of built-in enable
399:48 - support within cloud 9 for service
399:50 - development um it is easier to use than
399:54 - visual studio code so for beginners
399:55 - especially when you do aws stuff i'm
399:57 - showing them cloud nine but like if
399:59 - you're serious about your development
400:00 - you're probably gonna wanna use
400:01 - something like visual studio code and
400:03 - then that's where you're going to be
400:04 - using git pod or code spaces and things
400:07 - like that then we have the google cloud
400:09 - cloud shell editor this is an online
400:11 - code editor part of the google cloud
400:12 - shell the key difference is it's free uh
400:15 - and it's free to up to a certain point
400:17 - there's no team collaboration features
400:19 - at least that i i saw
400:21 - and this is intended for experimentation
400:22 - or rapid prototyping with gcp services i
400:25 - wouldn't really consider it for
400:26 - application development in a team
400:28 - environment uh there's probably possible
400:30 - limitations on performance of the
400:31 - runtime environment i couldn't find
400:33 - details about it and it has limited
400:34 - hours per month i thought it was
400:36 - like free 100 hours i might say this
400:38 - somewhere else in the course saying like
400:40 - google cloud shell gives you unlimited
400:42 - hours but it's not true i found out it
400:43 - was like limited to 50 hours a month but
400:46 - it's still really good um and it's
400:48 - running visual studio code alongside
400:50 - their shell so when you're in google
400:53 - it makes things a lot easier and so you
400:55 - know when i'm doing uh google cloud
400:57 - workload stuff i will be using that
400:59 - thing but when i want something that's
401:00 - persisted like a project i'm not going
401:03 - to be doing it in the cloud shelter i'm
401:05 - going to be putting in a repository and
401:06 - launching up git pod but a really great
401:09 - way to learn google cloud because a lot
401:11 - of the um
401:13 - uh the console you'll click through
401:15 - it'll say open in cloud shell and then
401:17 - open the editor so you will come across
401:19 - it but what i want to do is show you all
401:20 - these three editors for real just so you
401:22 - can see where they are if they interest
401:24 - you but hopefully that gives you an idea
401:26 - how they compare
401:27 - against skip pod right again git pod
401:29 - runs on containers uh it's serverless
401:31 - billing right um you know things like
401:33 - that uh and it's it's using debian
401:36 - ubuntu okay
401:38 - hey this is andrew brown and i'm in my
401:40 - aws account here at the aws management
401:42 - console and i just want to quickly show
401:43 - you what cloud9 looks like not so much
401:46 - that you need to go do this but just so
401:48 - that you can see what else is out there
401:50 - so what i'm going to do is go to the top
401:51 - here and type in cloud9
401:54 - and we'll go over here
401:56 - and we'll give it a moment here i am in
401:58 - the root account so usually it doesn't
402:00 - like you creating um environments here
402:02 - which is totally fine i have a couple
402:04 - old uh
402:06 - ones here that refuse to delete but i'll
402:07 - create an environment we'll just say
402:09 - cloud9 uh get pod test
402:12 - kind of weird writing get pod in there
402:13 - but i just want to show you that you
402:14 - choose the instance size or type so you
402:16 - can choose t2 micro small large other
402:19 - instance type and you can go pretty big
402:21 - here so that might be the advantage that
402:22 - cloud9 gives you is that you can go like
402:24 - super super big if you need to
402:27 - um
402:28 - and you know this is not the only kind
402:29 - of environment that aws has so like they
402:31 - also have in sage maker
402:34 - because you can think of it as a code
402:35 - editor right like you have sagemaker
402:37 - studio which will run a jupiter lab but
402:40 - that's really for ml we're talking just
402:42 - about like general cloud development
402:43 - here so that's the thing is like if you
402:45 - really do need to do like
402:47 - um you know uh ml stuff you probably
402:50 - shouldn't be using a cloud developer
402:51 - environment you should be using
402:52 - something like sagemaker studio or
402:54 - whatever the uh integrated um cloud
402:57 - services that are used by the cloud
402:59 - service providers but anyway i'm going
403:01 - to just choose a t3 micro notice we have
403:03 - amazon list two amazon links the old one
403:05 - which is not recommended to use anymore
403:07 - ubuntu
403:08 - um and so those are our options i think
403:10 - at one point you could just attach
403:12 - whatever
403:13 - any kind of
403:14 - uh machine you want but then it wouldn't
403:16 - be managed when shut down automatically
403:18 - notice we have a 30 minute um
403:21 - turn off after 30 minutes but you can
403:22 - change it here to whatever you like
403:24 - we'll go ahead and hit next we'll create
403:26 - that environment and we're going to wait
403:28 - for that to spin up because i just want
403:29 - to show you what it looks like
403:31 - um it's generally really fast but i'll
403:33 - see you back here in a moment okay all
403:34 - right so after waiting a little while
403:36 - here it has finally launched uh usually
403:38 - it doesn't look like this i think
403:39 - there's just a slight little problem
403:40 - with the editor or display it usually
403:43 - looks really nice here but it's just
403:45 - telling you here how to get started with
403:47 - um
403:48 - cloud9 so this is based off of
403:51 - i want to say like adam but maybe not i
403:53 - think it may be oh sorry the ace editor
403:56 - so we'd like up ace editor
403:58 - i think that's what it's based off of
404:00 - yeah so it was called ace and then uh
404:03 - ace turned it into cloud9 uh ide it's
404:07 - not really an id it's a cloud editor um
404:09 - and then cloud9 was acquired by aws and
404:12 - so aws integrated with a lot of their
404:14 - services so when you go over to lambda
404:16 - you're using cloud9 but it's a lot
404:18 - simpler like they don't really have
404:19 - extensions per se so
404:22 - you can like explore aws resources
404:24 - through here they have some uh source
404:25 - control which um i believe is kind of
404:28 - new i remember seeing this uh here
404:29 - before but it's very dead simple there
404:32 - are no extensions
404:34 - uh you know so like whatever you want
404:36 - it's like uh test.ruby
404:38 - we'll open that up here and just type in
404:40 - like um
404:42 - puts
404:44 - hello getpod
404:46 - okay we'll save that down below ls and
404:48 - i'll just run it here ruby test.rb so
404:51 - it's really darn simple collaboration is
404:54 - kind of nice i really like it um git pod
404:56 - at least
404:57 - at the time of shooting this
404:59 - their features are not as transparent as
405:01 - they need to be
405:03 - but i know that they're working hard to
405:04 - make that better but like here you can
405:06 - like invite people you can see them you
405:08 - can see where their cursor is so that's
405:09 - kind of nice um they have a debugger uh
405:12 - which is fine and there are like
405:14 - serverless integrations but you know
405:16 - nothing super complicated um but yeah if
405:19 - you want to shut it down we can just
405:20 - close the tab or i'll just go back out
405:22 - we'll go back to uh the dashboard here
405:25 - i'll just close up this tab and i'll go
405:27 - ahead and delete that environment
405:29 - so nothing super complicated that is
405:32 - cloud9 now
405:34 - over to gcp so we'll go over here and
405:37 - theirs is up here in the active act or
405:40 - cloud shell here so if you click it uh
405:42 - generally you have to activate cloud
405:43 - shell so what it's going to do is spin
405:45 - up i think a virtual machine underneath
405:47 - so we just have to wait uh a while here
405:49 - and once we're there oh that was fast
405:52 - that was super super fast some like if
405:54 - it's the first time you ever did it it's
405:55 - really slow but like
405:57 - because i think they're like making the
405:58 - back like the storage for you but
406:01 - it's super fast but if you click here
406:02 - the open editor it's going to look just
406:05 - like
406:07 - vs code because it is vs code
406:10 - right so here it is
406:11 - i don't know if there's any kind of
406:12 - limitations in terms of the stuff that
406:14 - you can install i actually never looked
406:16 - at that for extensions
406:18 - can you install extensions that's a good
406:19 - question
406:20 - so we have uh cloud code apis
406:25 - secrets manager
406:27 - kubernetes cluster so i don't see the
406:28 - ability to install extensions
406:31 - so it might be just
406:32 - what you see is what you get here i'm
406:34 - going to go ahead and just create myself
406:36 - a new file here so just say test.rb
406:39 - okay so nothing super complicated you
406:41 - know you know what
406:42 - visual studio code is but
406:44 - that's that one there if you want to
406:45 - close it we just hit the x there all
406:47 - right and we'll take a look at
406:49 - github code spaces all right i'm back
406:51 - and so i just want to show you github
406:53 - code spaces or at least attempt to do it
406:55 - and so the thing with github code spaces
406:57 - is that if you've ever tried to find it
406:59 - like under the buttons here and you
407:00 - don't see it displayed the reason why is
407:03 - that it's part of i believe the team's
407:05 - plan so you know if you are just a
407:07 - regular user and you're looking to
407:09 - utilize it that's not possible now could
407:11 - you just go ahead and create an
407:12 - organization and then be able to do it i
407:14 - guess we could go find out so what i'll
407:16 - do here is go over
407:18 - to my settings and we'll look for
407:21 - organizations
407:23 - and i'm going to create a new
407:25 - organization
407:26 - and notice here we can see some options
407:28 - so in the free here unlimited public
407:29 - private repositories 2 000 automation
407:32 - minutes a month 500 megabytes issues and
407:34 - projects um so i don't think that it's
407:39 - here
407:40 - um is it in here i'm just trying to see
407:43 - here so we have protected branches
407:46 - multiple reviewers code owners
407:50 - and that is the tricky part is just
407:52 - trying to find the functionality so what
407:55 - i'm going to do if we scroll down here
407:57 - we might be able to see it so code
407:58 - spaces
407:59 - ah okay so in the free tier it's not
408:01 - available and then the team plan that's
408:03 - where it's going to start at up to 32
408:05 - cores starting at 18 cents per hour i'm
408:08 - very certain that i have a paid teams
408:10 - plan somewhere so i just need to go find
408:13 - it okay
408:15 - so what i'll do is i'll come back here
408:17 - in a moment and see if i can find it but
408:18 - just understand that you got to be
408:20 - paying and then you can pay additional
408:22 - to use
408:23 - get
408:24 - hub code spaces so i'll be back here in
408:26 - a moment okay
408:27 - all right so i'm in uh my other account
408:30 - here where i definitely have a teams
408:31 - organization but i don't think it's paid
408:33 - it used to be paid i think we moved off
408:35 - of it because they made a free tier and
408:37 - so now we don't have code spaces so uh
408:40 - you know i think it's just going to be a
408:41 - bit too hard for me to show this and all
408:43 - it would really show is that once you
408:44 - launch it that you
408:46 - have
408:47 - this kind of editor and that you can
408:49 - choose the different size there um but
408:51 - you know hopefully that gives you an
408:53 - idea of like the friction it it it
408:55 - causes to get started with um code
408:57 - spaces uh but you know if you really
408:59 - want to know more you can just read up
409:01 - on it here okay uh but yeah there you go
409:04 - [Music]
409:12 - hey this is andrew brown and we were
409:13 - talking about context-based developer
409:15 - workflows because this is something that
409:17 - you've probably already been doing but
409:19 - it's just cloud developer environments
409:20 - make it a lot easier to do so what is
409:22 - context in the scope of a developer
409:24 - workload well as a developer you need to
409:27 - quickly switch contacts based on the
409:29 - scope of the work you are currently
409:30 - performing and this could be things like
409:32 - reviewing pull requests
409:34 - developing features manually performing
409:36 - quality insurance so q a replicating a
409:38 - version of production
410:26 - hey this is andrew brown and we are
410:27 - taking a look at context-based developer
410:29 - workflows if you've never heard of it um
410:32 - it's okay you've actually probably been
410:33 - using it this entire time
410:35 - but this became a lot more important
410:36 - once we started using modern
410:38 - architecture so let's talk about what is
410:39 - the context in the scope of a developer
410:42 - workload well as a developer you need to
410:44 - quickly switch context based on the
410:45 - scope of the work you are currently
410:46 - performing this could be something like
410:49 - reviewing a pull request deploy or
410:51 - developing features manually performing
410:53 - quality insurance of q a replicating a
410:56 - version of production for debugging
410:58 - creating a temporary environment to test
411:00 - the hypothesis so the idea is the
411:01 - context is what do you need to do
411:04 - review code develop feature q a all
411:07 - sorts of options there and those
411:09 - environments all need to be specialized
411:11 - for that context so developers have
411:13 - always been using context-based
411:15 - developer workflows though cloud
411:17 - developer environments cdes makes that
411:19 - much easier to do and specifically for
411:21 - microservice or modern architectures
411:23 - which have many more iso repositories
411:26 - this is a big struggle for a lot of
411:27 - people that are doing microservices as
411:29 - just managing all the repositories
411:31 - whether they have one big monolith or
411:33 - not but again cloud developer
411:35 - environments make it so much easier to
411:36 - jump into those projects so cloud
411:38 - developer environments become part of
411:40 - the workflow developers can quickly and
411:42 - safely switch contexts so i just kind of
411:44 - want to add an additional illustration
411:47 - about you know if you're using uh cloud
411:49 - developer environments first versus
411:51 - using local
411:52 - developer environments how that might
411:53 - change uh the responsibility or the
411:57 - accessibility of your code so
412:00 - here you know the old way we would do it
412:01 - is we would launch i'm gonna get my pen
412:03 - tool out here we would launch a local
412:04 - developer environment we'd write our
412:06 - code and then we would create the
412:08 - repository locally and then push okay i
412:10 - know there's a spelling mistake there so
412:11 - just ignore that
412:13 - but now you know with
412:15 - cloud developer environments we create
412:17 - the empty repository first in github so
412:20 - it already is there then we launch our
412:22 - cloud developer environment and then we
412:23 - write code and from there we can
412:25 - actively commit our code and so the
412:28 - great thing about that is that when we
412:29 - take that approach like let's look at
412:31 - the old way if we were doing the old way
412:33 - some people will end up writing all this
412:35 - code and they just never push it to a
412:37 - repository remote repository they might
412:38 - have created a local repository but it's
412:40 - never made it online and so that means
412:43 - that there's a longer time before code
412:45 - can be collaborative or they have an
412:47 - opportunity where they might or an
412:48 - opportunity but there might be the
412:49 - misfortune that they lose that code and
412:52 - i can i can't tell you how many times
412:53 - that has happened or it's the weekend
412:54 - you want to pass that code off to
412:56 - somebody else but like oh it's on a
412:57 - machine i never pushed it
412:59 - but if you're using cloud developer
413:01 - environments it's already in online
413:03 - repository that is the starting point
413:05 - and that is the kind of behavior change
413:07 - that you have when you use cloud
413:08 - developer environments so there's a
413:09 - higher chance of collaboration and less
413:11 - chance of loss of code and that just
413:14 - makes it again easier to do this
413:15 - context-based developer workflows and
413:18 - one context would be like starting a new
413:20 - project but there you go
413:22 - [Music]
413:26 - hey this is andrew brown and we are
413:28 - taking a look at visual studio code also
413:30 - known as vs code which is a free source
413:33 - code editor made by microsoft for
413:35 - windows linux and mac os if you're
413:37 - confused why it says source code editor
413:39 - that's just the language that microsoft
413:40 - uses but you can just say code editor
413:43 - and visual studio code should not be
413:45 - confused with visual studio which came
413:47 - before vs code and vs studio
413:51 - is an ide an integrated developer
413:53 - environment that's for doing more
413:55 - low-level stuff
413:57 - but anyway visual studio code has 14
414:00 - million developers out of 24 million
414:02 - developers worldwide
414:04 - who use vs code making it the most
414:06 - popular source code editor today and if
414:08 - you wanted to do the math on that that's
414:10 - 58 percent market share so at least half
414:13 - of all developers are using vs code and
414:16 - the reason we're talking about vs code
414:18 - is because that is the primary editor
414:21 - that you will see when you launch up a
414:23 - git pod workspace so vs code is very
414:25 - popular due to being free powerful works
414:28 - on all hardware lots of courses orgs
414:31 - schools use vs code because it's
414:33 - available for everybody so there you go
414:40 - hey this is andrew brown and we are
414:42 - looking at the concept of docker so
414:44 - docker is a set of platform as a service
414:46 - products that use os level
414:48 - virtualization to deliver software in
414:50 - packages called containers so the reason
414:52 - we're talking about uh docker is because
414:54 - that is what uh getpod is using to run
414:58 - their environments you'll hear
415:00 - kubernetes as well
415:01 - but that's something that you don't
415:02 - necessarily have to touch
415:04 - but docker containers is something that
415:06 - you might
415:07 - encounter okay
415:08 - so docker was the earliest popularized
415:10 - open source container platform so when
415:12 - people think of containers they
415:14 - generally think of docker and we said
415:16 - it's platform as a service product so
415:18 - there's more
415:19 - than one thing just called docker so we
415:21 - have the docker cli so these are cli
415:23 - commands to download upload build run
415:25 - and debug containers we have a docker
415:27 - file so a configuration following how to
415:29 - provision a container docker compose
415:31 - this is a tool and configuration file
415:33 - when working with multiple containers
415:35 - and that's something you may encounter
415:37 - uh with some like quick start templates
415:39 - and things like that docker swarm an
415:41 - orchestration tool for managing deployed
415:43 - multi-container architectures that is
415:44 - not something that you have to worry
415:46 - about um then you have docker hub a
415:48 - public online repository for containers
415:51 - published by the community for download
415:52 - so this is going to be a place where you
415:54 - source containers and we definitely
415:56 - source things from docker hub using git
415:58 - pod and then there's the concept of oci
416:00 - the open container initiative because i
416:03 - saw this term and it just pops up
416:04 - everywhere you're wondering like what is
416:06 - oci compliant what does that mean so
416:09 - open container initiative is an open
416:10 - governance structure for creating open
416:12 - industry standards around container
416:14 - formats and runtime so docker
416:16 - established the oci and it is now
416:18 - maintained by the linux foundation and
416:20 - so docker has been losing favor with
416:22 - developers due to the handling of
416:23 - introducing a paid open source model and
416:25 - alternatives like podman are growing but
416:27 - that doesn't mean don't use docker that
416:29 - just means like at scale you know some
416:31 - companies like larger companies are
416:34 - looking at alternatives but these
416:35 - alternatives are oci compliant right
416:38 - like pod men and things like that but i
416:40 - just wanted to point that out because
416:42 - you know docker can be a bit contentious
416:44 - in the open source space but it still is
416:46 - really good and solid and that is what
416:48 - git pod is using okay
416:50 - [Music]
416:54 - hey this is andrew brown and we are
416:56 - taking a look at version control systems
416:58 - also known as vcs so these systems are
417:00 - designed to track changes or revisions
417:02 - to your code and the most popular vcs is
417:05 - git so vcs can also refer to managed
417:08 - cloud services that host vcs so this is
417:10 - why this term is a bit confusing because
417:12 - really it means git but a lot of times
417:14 - we are talking about get providers and
417:17 - so get pod integrates with the following
417:19 - git providers the first is github so
417:21 - this is owned by microsoft it's the most
417:23 - popular vcs offering due to its ease of
417:25 - use and being around the longest github
417:27 - is primarily where open source projects
417:29 - are hosted and offer rich
417:30 - functionalities such as issue tracking
417:32 - automation pipelines and a host of other
417:34 - features before github everybody would
417:37 - put their stuff on sourceforge
417:39 - but sourceforge was very slow i think it
417:41 - was svn-based and it had a lot of ads
417:43 - and so when github came out it was
417:45 - extremely popular because you could put
417:47 - repos there for free and had really
417:48 - strong collaboration tools then came
417:50 - along git lab so this was an emerging
417:52 - competitor to github and at the time had
417:55 - unique features such as ci cd pipeline
417:57 - improved security measures i still think
417:58 - it's easier to get a lot of things set
418:01 - up in gitlab it takes care of that stuff
418:02 - for you
418:03 - but github has caught up with a lot of
418:05 - stuff like github actions and and things
418:07 - like that so they're pretty much on par
418:09 - now then there's also bitbucket this is
418:11 - owned by elazian and it was originally
418:14 - only used for mercurial so mercurial was
418:16 - a competitor to get but git became so
418:18 - popular that bitbucket added git and
418:20 - then mercurial became so uh unpopular
418:23 - not that it's bad but just wasn't as
418:26 - popular as get that they uh stopped
418:28 - supporting mercurial so uh bitbucket has
418:31 - tight integration with atlatian's
418:32 - industry standard agile project
418:34 - management software called jira and so
418:37 - if you ever end up working for a large
418:38 - organization they're very likely to be
418:41 - using jira and because they're using
418:43 - jira they're very likely to be using
418:44 - bitbucket because there's tight
418:46 - integrations between it it's just so
418:47 - much easier so those are um you know the
418:50 - git providers
418:52 - [Music]
418:56 - hey this is andrew brown and we are
418:58 - taking a look at version control system
419:00 - permissions and to understand that we
419:02 - need to know what oauth 2.0 is so oauth
419:05 - 2.0 is an industry standard protocol for
419:07 - authorization and the idea here is oauth
419:10 - doesn't share password data but instead
419:12 - uses authorization tokens to prove an
419:14 - identity between consumers and service
419:17 - providers so oauth is about granting
419:20 - access to functionality as opposed to
419:22 - something like open id which is about
419:24 - providing who you are but the only thing
419:26 - i really want you to know is that it
419:27 - uses oauth and that's where these fine
419:30 - grain permissions are going to get set
419:32 - and that's how it works for uh get pod
419:34 - because you connect your uh your your
419:36 - version control system and then you you
419:38 - as the user are going to decide uh what
419:41 - you want to set there so within your get
419:44 - providers you can see they're connected
419:45 - so there's my username there are my
419:47 - permissions and if you expand it you'll
419:49 - see all the options there and it's going
419:50 - to vary based on the provider so the
419:53 - idea here is that for github we have
419:55 - user email read user public repo repo
419:58 - read org and workflow
420:01 - um so just understand that that's going
420:02 - to be slightly different for all the
420:04 - providers and the key thing to remember
420:06 - is the fact that uh get pod is not
420:09 - responsible for these permissions it's
420:11 - on the get provider and the user okay
420:15 - [Music]
420:19 - hey this is andrew brown and we are
420:20 - taking a look at the git pod editor
420:22 - support so get pod is designed to be a
420:24 - provider agnostic cloud developer
420:26 - environment and one way we see that is
420:28 - the fact that it supports integrations
420:30 - for a bunch of different git providers
420:32 - but another way that it's agnostic is by
420:34 - having support for more than one editor
420:37 - and so gitpod currently supports three
420:39 - types of editors so we have vs code
420:41 - browser so a editor within the browser
420:44 - and this is the default experience
420:46 - desktop vs code so opening a workspace
420:48 - in local vs code so a desktop
420:51 - application and jetbrain so a paid ide
420:54 - that extends uh the eclipse ide so if
420:57 - you ever use eclipse you kind of have an
420:59 - idea what jetbrains is there so what
421:02 - we'll do is investigate all these three
421:03 - types here but the key thing to remember
421:05 - is that gitpod supports uh multiple
421:07 - types of editors and i think they'll
421:08 - just keep on expanding that because that
421:10 - is their goal okay
421:14 - [Music]
421:15 - hey this is andrew brown and we are
421:17 - taking a look at jetbrains and before we
421:19 - can talk about that we need to know what
421:20 - is eclipse so eclipse is a free and open
421:23 - source id created by ibm originally
421:25 - intended for java through open source
421:27 - projects have expanded to a variety of
421:29 - languages so i think ibm authored it and
421:31 - it's been managed by an open source
421:33 - group now i remember using jetbrains
421:36 - back in like 2001 specifically for java
421:39 - so it's very interesting to see that
421:40 - it's been around for so long and it's
421:43 - still super powerful but then there came
421:45 - along jetbrains and jetbrains is a
421:46 - company specializing in creating paid id
421:48 - so it's proprietary or an extension of
421:52 - eclipse and so they just make the uh the
421:54 - eclipse experience way way way better so
421:57 - they use the same code base at least at
421:59 - one point they did um but they have
422:01 - grant greatly expanded that feature set
422:03 - around specific programming languages
422:04 - this brain is easier
422:06 - more productive more convenient to use
422:08 - in eclipse just brains was formerly
422:10 - known as intellij
422:12 - and if intellij sounds familiar it's
422:14 - because it kind of sounds like
422:15 - intellisense which is this whole kind of
422:17 - auto-completion thing so
422:19 - notice here as they're typing and
422:21 - there's this auto completion thing that
422:22 - was something i think that was invented
422:24 - by microsoft originally or at least they
422:26 - uh branded the idea of intellisense but
422:28 - this was a big selling point where you'd
422:30 - be able to type and it would auto
422:32 - complete you could click through stuff
422:33 - now we're seeing that kind of everywhere
422:35 - like code editors have support for that
422:36 - through extensions but one at one point
422:39 - that was a big deal okay so jetbrains
422:41 - has a variety of ids specialized for
422:43 - different languages or frameworks so
422:45 - let's just go through the list we have
422:46 - phpstorm
422:47 - which is for php lang for uh go land for
422:51 - go the go language uh intellij idea or
422:55 - idea which is for java data grip which
422:58 - is for sql or databases in general
423:00 - pycharm for python ruby mine for ruby
423:02 - webstorm for javascript c line for c and
423:05 - c plus plus writer for net and this
423:08 - isn't the full list i know they have
423:09 - something for
423:11 - developing ios applications and
423:13 - something for data science other things
423:15 - like that
423:16 - but the reason i'm listing these ones
423:18 - out for you is because these are all uh
423:21 - in the scope of what um git pod is
423:24 - trying to have support for now what's
423:26 - interesting is a thing called jetbrains
423:28 - projector and this is a tool that allows
423:29 - you to run jetbrains id within a browser
423:32 - i don't particularly know if gitpod is
423:34 - using that and that's how you integrate
423:36 - with it because i just haven't uh given
423:39 - jetbrains with vs code a go
423:41 - but i just want to say gitpod allows you
423:43 - to integrate with jetbrains to use it as
423:45 - your gitpod workspace editor there's an
423:47 - asterisk there because at the time of
423:49 - right now it's in beta
423:51 - and some of these are coming soon so
423:53 - these are all on the roadmap and so i
423:55 - just want you to be
423:56 - knowing about this because probably in
423:58 - the future these will be available to
424:00 - you okay
424:01 - [Music]
424:05 - hey this is andrew brown and i was
424:06 - saying that there is uh support for
424:08 - gitpod to use your desktop version of vs
424:12 - code so you can open git pod workspace
424:14 - in your local vs code if you open up
424:16 - either file or go to the get pod
424:19 - command palette you should see an option
424:20 - that says open a vs code there's also
424:22 - this option says open in vs code
424:24 - insiders and insiders is just the vs
424:27 - code unstable release version so it's
424:29 - like the latest version but you might
424:31 - not want to be using it unless you're
424:33 - like they'd like to have the latest
424:34 - features but you don't mind if there's
424:36 - bugs or things like that so some vs code
424:38 - extensions do not work in the browser so
424:40 - opening in local vs code may give you a
424:42 - better developer experience um and you
424:45 - know you know some people prefer desktop
424:47 - apps so that could be a reason there but
424:49 - i ran into an edge case with my
424:51 - co-founder where they use ubuntu and
424:55 - they could not use the vs code vim
424:57 - extension the browsers uh
424:59 - specifically on their linux laptop right
425:02 - so in this case they had to launch in
425:05 - local vs code and then they were able to
425:06 - use it so it was interesting to see that
425:08 - edge case but it seems like you know a
425:11 - lot's not the support on mac or windows
425:13 - so there that could just happen okay
425:16 - and also when i was using this on my
425:18 - windows machine where i'm using windows
425:20 - subsystem linux
425:22 - it actually prompted me to install a
425:24 - bunch of things like uh docker and
425:26 - kubernetes and things like that where is
425:28 - on my mac it didn't ask for any of these
425:30 - things so it's possible that you have to
425:31 - have docker and salt which would make
425:33 - sense because um it is running
425:35 - containers so there'd have to be some
425:37 - way for it to do it uh and one thing i
425:39 - noticed is that you cannot open a shared
425:41 - running workspace that has been shared
425:43 - with you so only the owner can open that
425:45 - workspace locally
425:47 - so that's just a thing there and i think
425:48 - i repeated a couple times in the course
425:50 - okay
425:54 - [Music]
425:55 - hey this is andrew brown and we are
425:57 - taking a look at the get pod browser
425:59 - extension and this provides a
426:00 - convenience button within the version
426:02 - control hosting provider and this button
426:05 - prepends the gitpod url prefix to the
426:08 - current url and this gitpod browser
426:10 - extension is available for firefox
426:13 - chrome microsoft edge and brave and so
426:16 - it's important that you remember that
426:17 - because i will ask you on the exam which
426:19 - browsers it's for so just to kind of
426:21 - show you what that convenience button
426:22 - looks like in the different providers
426:24 - here is github and there is the button
426:25 - here is bitbucket and there is the
426:27 - button here is git lab and there is the
426:29 - button so nothing super complicated here
426:31 - but it's a lot easier than having to
426:33 - remember to type in the git pod url so
426:36 - it'll definitely save you some time okay
426:38 - [Music]
426:42 - hey this is andrew brown and we're
426:44 - taking a look at git pod browser
426:45 - bookmarklet so what is a browser
426:47 - bookmarklet well it is a browser
426:49 - bookmark but instead of pointing to a
426:50 - url it executes arbitrary javascript
426:53 - code and so the idea is that transform
426:55 - is a bookmark into kind of a smart
426:57 - bookmark so you'd have this javascript
426:59 - code which we get from the gitpod
427:01 - website you'd place it in the url
427:04 - box when you make your bookmark and then
427:05 - when you click that button it would work
427:07 - just like pressing that gitpod button
427:09 - assuming you were on a particular page
427:12 - like a gitlab or github page so the get
427:15 - pod browser bookmarklet when clicked
427:17 - will open in the current github gitlab
427:20 - bitbucket just what i just said there a
427:21 - moment ago and the reason for it is that
427:24 - it acts as an alternative to the browser
427:26 - extension for when the browser extension
427:28 - is not present for specific web browsers
427:30 - so i didn't test it but i assume that
427:32 - it's not for safari because safari is
427:34 - not a chromium-based browser probably
427:37 - opera as well would be in that category
427:40 - there could be cases where you have
427:41 - computer workstations that does not
427:44 - allow the installation of browser
427:45 - extensions because you know some
427:47 - organizations they have a bunch of
427:48 - computers and every time you shut them
427:51 - down they always boot up a fresh image
427:53 - so you lose your extensions or they just
427:56 - they don't allow you to install
427:57 - extensions uh as a as a security measure
428:00 - so that you know people are installing
428:02 - malware in their browser or it could be
428:04 - that developers are extending the launch
428:05 - behavior for more intelligent action so
428:07 - you could probably take that javascript
428:09 - code and add some extra stuff in there
428:11 - maybe you want to um put in some
428:13 - environment variables and so that gives
428:14 - you a bit more flexibility over the get
428:17 - pod button but there you go
428:19 - hey this is andrew brown and what we're
428:20 - going to do here is look at git lab
428:22 - integration so what i'm going to do is
428:24 - create myself a new gitlab account so in
428:27 - the top right corner we have get free
428:28 - trial i kind of swore they used to have
428:30 - a free account here so i'm going to do
428:31 - is double check here and yes they do
428:33 - have one so i'm going to say free
428:35 - and here we have two options where we
428:37 - have git lab sas or get lab self managed
428:39 - so sas is the one we want that's going
428:41 - to be just like when you utilize github
428:43 - so we'll go here and click sign up for
428:45 - free and i'm just going to fill in my
428:47 - name so we got andrew
428:48 - brown and we'll just say
428:50 - exam pro co
428:53 - exam pro co and then we need a password
428:56 - so i'm going to generate out a password
428:59 - uh here paste that in
429:01 - and before we proceed here i'm just
429:02 - going to save this to my password
429:04 - manager to save myself some trouble
429:06 - so just give me a second here so get
429:09 - lab.com exam pro co
429:12 - i'm gonna put that password in there
429:15 - okay and hopefully it will take it i am
429:17 - definitely not a robot at least i don't
429:19 - think i am you know there's a bunch of
429:21 - options down here but i'm going to just
429:22 - keep it simple by using email we're
429:24 - going to go ahead and hit register so
429:26 - now it wants me to confirm my email so
429:29 - i'm just going to open a new tab off
429:31 - screen here i'm going to make my way
429:33 - over to my email
429:35 - i'm going to try to do this as quick as
429:36 - i can here
429:38 - and so i have a confirmation email here
429:40 - from git lab
429:43 - okay so here it is and i'm going to go
429:45 - ahead and get click confirm your account
429:47 - and so here it's confirming my account
429:50 - and we will just expand that here and so
429:52 - here it says your email address has been
429:54 - successfully confirmed please sign in
429:56 - and so what i'll do is grab my password
429:58 - here so i'm going to copy my password in
430:00 - here paste it on in sign in
430:03 - and it's going to ask me some
430:04 - information i'm just going to say
430:05 - continue
430:07 - who will you be using this for the time
430:09 - being it'll just be me okay because it
430:11 - looks like i guess there's some few
430:12 - different options here
430:14 - i don't need to opt anything would you
430:15 - like to create a project join a project
430:17 - we'll just say create new project
430:20 - and i guess we need an organization name
430:22 - so
430:23 - this is really just for
430:27 - git pods i'm just going to say exam pro
430:30 - exam pro co
430:32 - and we're going to write git pod because
430:34 - i'm going to be doing a bunch of repos
430:36 - here and i figured we could do that the
430:37 - group
430:38 - and any public projects can be viewed
430:40 - without any authentication so we'll say
430:41 - create group because we'll make it
430:43 - public facing
430:44 - and so now we have an opportunity to
430:46 - create a project this is a quite the
430:47 - lengthy setup but i'm going to make this
430:49 - public here and what we're going to say
430:51 - here is
430:53 - uh gitpod hello world
430:56 - as an example here
430:58 - and i'm going to go ahead and create
431:00 - this
431:04 - and we'll just give it a moment to set
431:06 - up okay
431:08 - and so it's all set up so we'll say okay
431:10 - let's go
431:14 - so now that is there the next thing i
431:16 - want to do here is connect uh to gitpod
431:20 - so what i'm looking for here
431:22 - um is a button for the github project i
431:26 - mean i guess this is the project here so
431:27 - this is not necessarily repos
431:29 - so
431:31 - just give me a moment here and i'll
431:32 - think about what i need to do okay
431:34 - all right so i'm back and i was just
431:35 - kind of looking around at what there is
431:37 - to do here so what i want to go do is
431:39 - create a new repository and so we'll
431:42 - click that there
431:44 - and then from here
431:46 - we have an option over here repositories
431:48 - on the left hand side so
431:51 - um
431:52 - let's go here and click on repository
431:55 - and so now i'm over here and you can see
431:57 - there's initial commit um by a fellow
432:00 - here
432:01 - i assume he works at get pod
432:03 - so senior product uh a designer for
432:05 - growth at gitlab um there and so here we
432:08 - can see that repository it's been
432:09 - unusual that it's like a commit uh on
432:11 - the behalf of somebody else but that's
432:13 - totally fine uh but the great thing is
432:14 - we have our get pod button you will not
432:16 - have this unless you have that stuff
432:18 - installed i also noticed like web ide
432:20 - here never looked at that so i'm just
432:22 - kind of curious what's going to open up
432:23 - here
432:25 - i'm just curious because it's like you
432:26 - know there's git pods so i'm just
432:28 - wondering if git lab
432:29 - had their own offering um so i can go
432:32 - here and it's pretty simplistic so it's
432:34 - not really like a full
432:36 - full-blown developer environment i was
432:37 - just really curious but what we'll do is
432:39 - go back over to our hello world project
432:42 - i'm just gonna go back here because
432:43 - maybe there was two here
432:45 - so let me click into gitlab is that the
432:47 - one we were looking at yeah so that was
432:49 - the one that we saw here
432:51 - and then here is the public one that i
432:52 - made it's a little bit confusing again i
432:55 - don't use git lab on a day-to-day basis
432:57 - so i'm just kind of learning uh just
432:59 - like you are here but i guess if we
433:00 - click the
433:01 - icon at the top we can start seeing the
433:03 - projects more clearly and so this is the
433:05 - one that i created that i care about
433:06 - this is new i don't know what this uh
433:08 - this is i guess this is created by
433:09 - default for you
433:10 - um and so we'll go over to
433:14 - uh repository
433:16 - it's not really showing me a lot of
433:17 - information because usually like github
433:19 - will set something up for you so what
433:20 - i'm going to do is just add a new file
433:22 - so let's just say add a readme file
433:26 - okay and we'll just say hello world
433:29 - we'll go ahead and commit that
433:31 - and we'll just say commit
433:34 - and so now what i'm hoping is if we go
433:36 - back to
433:37 - um our project here we'll get something
433:39 - that looks a little bit more normal
433:41 - okay yeah and so there we go so just we
433:42 - had to get that initial file in there
433:44 - and so now we have that opportunity to
433:47 - use git pod of course you'll need the
433:48 - browser extension for that installed if
433:49 - you don't we're going to just do it the
433:52 - old-fashioned way so i'm going to go up
433:53 - here in the top type in http colon slash
433:56 - get pod uh dot io for slash pound okay
434:01 - and that will open up that environment
434:03 - for us
434:04 - notice that i don't have a getpod
434:06 - account here as of yet so what i'm going
434:09 - to do here is say continue with gitlab
434:12 - just because that's what we're using
434:13 - right now and here it's going to allow
434:15 - us to authorize so we're going to say
434:17 - authorize
434:21 - and we'll just give it a moment to check
434:22 - out that repository but essentially when
434:24 - we did that when we authorized that that
434:26 - should have created a new account for us
434:29 - and so here is um our project here which
434:33 - is all great
434:34 - and so essentially what you'd want to do
434:36 - is kind of set up your environment so i
434:38 - really don't like the look of this it's
434:39 - kind of hard on my eyes so i'm going to
434:40 - go down to the bottom left corner we're
434:42 - going to go to color theme and i'm going
434:44 - to just switch to something that is dark
434:46 - so we'll say
434:48 - um
434:49 - actually i like monica quite a bit so
434:50 - i'm going to go to that
434:52 - like in terms of the editor or the
434:54 - coloring there and so we have this open
434:57 - and if we just want to kind of set up a
435:00 - new file here i'm just going to go
435:02 - getpod.yaml
435:04 - okay
435:06 - and we'll just set up something
435:08 - initially so we have
435:10 - tasks and i'm assuming that's how we do
435:13 - it just trying to do for memory so we
435:14 - have name we're going to say hello world
435:18 - okay and then from there we'll just hit
435:20 - space base
435:21 - and it's the command that we want and
435:23 - i'm just going to say echo
435:25 - actually we don't have to put double
435:26 - quotations there we'll say echo
435:28 - hello world and i don't think we need
435:30 - exclamations
435:32 - exclamations here i'm having a bit of
435:34 - trouble because i keep on thinking this
435:35 - is a vim keyboard so one thing i want to
435:36 - go do is go install
435:39 - the vim
435:40 - the vim hotkey here so we'll go vim
435:44 - uh
435:45 - vimvs code
435:47 - it's this one that i want to install so
435:48 - we'll say install here
435:51 - okay and we'll go back and so now that
435:53 - works as normal as i would expect it to
435:56 - and so i believe that this is uh correct
435:58 - with the exception that we just should
435:59 - have a colon here and what i want to do
436:01 - is just go ahead
436:03 - and commit this so we'll go back here
436:05 - and i'll just say uh hello world commit
436:09 - okay
436:10 - and we will add that file and we will
436:12 - hit commit
436:14 - we'll sync those changes we'll say ok
436:17 - and so now if we go back to our original
436:18 - tab here and we just give this a refresh
436:21 - we should now see in a repository
436:25 - this new commit but what i want to find
436:27 - out is will this change uh take effect
436:29 - so
436:30 - you know we can just close this tab i
436:32 - just want to show you like if you have
436:34 - uh get pod gamble open and you're always
436:35 - trying to figure out how to make your
436:37 - way back
436:38 - um and by the way i might just bump up
436:39 - the font here i don't know if this is
436:40 - gonna work let's just see if i can do
436:42 - that
436:43 - um here
436:45 - it's not really bumping so sorry
436:47 - everything's gonna be really small what
436:49 - we can do is go down to the command
436:50 - palette here and if we want to get back
436:52 - to this repository quickly we can just
436:54 - go to open context and that's always
436:56 - going to bring us back here to the
436:58 - project or repository in git lab
437:01 - but what i'm really interested in is
437:02 - actually going over to getpodio because
437:04 - whether or not you notice you actually
437:06 - created an account so if we were to go
437:08 - over to the dashboard this would open
437:11 - opens and up us up to the getpod.io
437:14 - and so now you can see we have a new
437:16 - account if i go over here and we go to
437:18 - settings
437:19 - you can see that for integrations i have
437:21 - git lab and this is where our
437:23 - permissions live so we go here
437:25 - and
437:26 - if we want to change these we can go
437:27 - ahead and just change those things but
437:29 - the goal is we're going to hook up
437:30 - github and bitbocket just so that we can
437:32 - see what they all look like
437:34 - but just to kind of complete what we're
437:36 - doing with this project here what i'm
437:38 - going to do is i'm just going to go
437:39 - ahead just close this tab here and close
437:41 - that out and i'm going to go back here
437:43 - and i'm just going to go and type this
437:45 - in again
437:47 - okay so let's say https colon forward
437:49 - slash sport slash gitpod.io
437:55 - pound
437:57 - and from there it says invalid git pod
437:59 - yaml should be an object so
438:02 - clearly i've made a mistake so we'll say
438:03 - continue with the default configuration
438:05 - actually that's the first time i've made
438:07 - a mistake with a github configuration
438:08 - file and i think it's just because i
438:10 - created from scratch normally i go out
438:12 - and i find a reference but that's not
438:13 - what i did here so if this is a problem
438:15 - what i'm going to do is just cut that
438:17 - out and we're going to open up a new
438:18 - terminal
438:20 - and i'm just going to delete this file
438:21 - here
438:22 - okay
438:23 - and instead we're going to just do a gp
438:25 - init to initialize a new file so i'm not
438:29 - exactly sure what i did wrong there i'm
438:30 - just going to paste that back in
438:32 - because it looks correct to me
438:36 - oh it's because i did that okay so
438:39 - that's what i really wanted to do but
438:41 - i'm just going to go ahead and do that
438:43 - we'll get rid of these ports
438:45 - and we'll just say okay let's
438:48 - fix this get pod
438:52 - the ammo file okay
438:54 - we'll sync those changes we'll say okay
438:58 - all right and so from there what we can
439:01 - do is go back to our project so i click
439:04 - back on the git pod yaml down below
439:06 - opened in the dashboard
439:08 - oops uh you know what i want to go to
439:10 - open in the context here
439:13 - and then we'll close our old tab
439:15 - and again we're just going to go and
439:17 - type it in here i will start using the
439:19 - get pod button here but
439:21 - i just kind of want to keep doing this
439:22 - so you kind of see what it is that we're
439:24 - typing so that you know it just becomes
439:27 - kind of muscle memory for you okay
439:32 - so what i'm expecting this time is for
439:34 - our command to work and if that's great
439:36 - what we'll do is proceed onto github and
439:38 - bitbucket and get that all connected
439:40 - into a single account
439:47 - okay so it's just loading up here
439:49 - and our echo works so this is all in
439:52 - good shape okay so
439:54 - uh this is good so i'm just going to go
439:56 - back to our context i'm just going to
439:58 - close back out the old one and so that's
440:00 - pretty much it that we need to know for
440:02 - git lab again it's not super complicated
440:04 - but let's take a look at how we do it
440:06 - for github and bitbucket next okay
440:08 - [Music]
440:17 - hey this is andrew brown and we are on
440:18 - bitbucket so we'll go ahead and create
440:20 - ourselves a new account here because
440:22 - it's good to learn all three providers
440:24 - um because there's a high chance that
440:25 - you'll end up using one of each at some
440:27 - point so here it suggested we want to
440:29 - add jira i'm good i'm just going to hit
440:31 - next and i probably already have a
440:33 - bitbucket account because i have jira
440:35 - not necessarily a separate bitbucket
440:37 - account here but we'll see what happens
440:39 - if we try to sign up so it says i
440:40 - already have an account which is totally
440:42 - fine i'm going to log in here it's not
440:44 - like a lot that you're missing here in
440:45 - terms of the setup process you know all
440:48 - these things are the same right you sign
440:49 - up they send a confirmation email here
440:51 - it's going to ask me for
440:53 - a um
440:54 - a username so i'm going to say exam pro
440:56 - co
440:57 - and we'll see if it takes that and it
440:59 - does so we're all good here and we're
441:01 - going to come in here and see what we
441:02 - have so before you drop in a bit bucket
441:04 - tell us some stuff i want to skip this i
441:06 - don't care about any of that kind of
441:07 - stuff
441:08 - and let's see if i have any repositories
441:10 - in here
441:11 - and i have one for the lithium js is a
441:13 - to do again that's coming from
441:15 - jira
441:16 - but we don't actually have any
441:18 - repositories so let's go ahead and set
441:20 - up a new one here
441:22 - and so
441:23 - what we'll do is create a new project so
441:26 - the project name is going to be called
441:29 - get pod hello world
441:32 - and
441:34 - oh this again this is maybe exam pro co
441:37 - get pod and then the repository will be
441:39 - uh get pod hello world
441:42 - and we can make it public or private it
441:44 - doesn't matter i'm going to leave this
441:45 - one private in this case
441:47 - do we want to read me sounds great what
441:48 - do you want the main branch to be called
441:50 - we'll call it main include a git ignore
441:52 - file sure why not and we'll go ahead and
441:55 - create this repository
442:00 - so we are here and notice in the top
442:02 - right corner there is our get pod button
442:04 - and again i'm not going to click it for
442:06 - the time being i just want to keep doing
442:07 - this at the top here so that again it
442:09 - becomes muscle memory for you to know
442:12 - what to type just so it's
442:14 - there but what we can do is go to the
442:16 - top here and type in https colon forward
442:19 - slash forward slash get pod dot io
442:22 - forward slash pound and hit enter
442:25 - it says authorize with bitbucket.org so
442:27 - it already knows that we're logged in
442:29 - with our github account
442:31 - this is something to be careful because
442:33 - you want to make sure they're all
442:33 - connected to the same account
442:35 - or you'll end up with multiple accounts
442:36 - which might be annoying so i'm going to
442:38 - say authorize with bitbucket.org here
442:40 - it's going to ask me a bunch of options
442:42 - i'm fine with all this we're going to
442:43 - say grant access
442:45 - okay
442:46 - and we'll give it a moment to start this
442:48 - environment so you can see that public
442:50 - repos private repos the process is very
442:52 - similar sometimes you just have to grant
442:54 - access to be able to do things
442:59 - and we'll just wait here for this
443:00 - environment to set up
443:04 - there we go and so here it is same
443:06 - experience everything's the same and i
443:09 - think i learned my lesson from last time
443:11 - and so when i opened up this terminal
443:13 - i'm just going to
443:14 - create a gitpod file there and while i'm
443:16 - here what i'm going to do is i'm just
443:18 - going to bump up my font because it
443:19 - might be a little bit hard for you to
443:20 - see and so i'm just going to bump this
443:23 - up to like 22.
443:24 - okay while i'm here i'm gonna change
443:26 - this to two
443:27 - okay
443:30 - and what we'll do is just go ahead and
443:31 - close that and so now i'll type in get
443:34 - gp init
443:36 - all right and so we'll get that down
443:38 - here this is still really small that's
443:40 - kind of bothering me so i'm going to go
443:41 - down below go to settings
443:44 - and
443:45 - um i'm looking for terminal editor font
443:49 - size we have text editor
443:52 - font size
443:58 - terminal maybe
444:01 - there we go
444:03 - that's a lot better okay and so
444:05 - uh from here we can just do the same
444:07 - thing so i'll go ahead and delete this
444:09 - out
444:10 - we'll change this over to
444:12 - um hello
444:15 - world and then down below this will be
444:17 - hello world here as well
444:23 - and as per usual go to the left-hand
444:25 - side here and i'm going to just go ahead
444:26 - and add that file and say uh add
444:30 - a knit uh get pod file
444:34 - and we will commit that to our repos
444:36 - repo save the changes
444:38 - and as it's going we'll go down below
444:40 - again clicking on this get pod button
444:42 - here and we'll open the context to see
444:45 - that commit there and so there it is
444:48 - there
444:48 - and again there's really no easy way to
444:50 - like like
444:52 - to completely terminate a workspace and
444:54 - reopen it you can stop a workspace so
444:56 - down below we have the command palette
444:57 - here but also in the top left corner you
444:59 - can go here and we have similar commands
445:01 - i'm probably going to keep going up here
445:03 - now because this is a lot shorter but if
445:04 - you stop it that's not sufficient enough
445:06 - because we want to terminate and start a
445:08 - new one in order to iterate on this git
445:10 - pod yaml file so what i'll do is i'll go
445:12 - ahead and close this tab out and i'm
445:15 - going to go to the top here again type
445:16 - it in so it's
445:18 - http colon
445:19 - s
445:20 - colon colon get pod dot io colon colon
445:23 - forward slash forward slash what am i
445:24 - talking about and we'll hit enter here
445:28 - and so you know again it should just
445:29 - work as per usual so we'll just give it
445:32 - a moment there to spin up and just make
445:34 - sure that is working correctly
445:39 - and there it is so there you go that's
445:40 - working fine oh it says command not
445:42 - found so clearly i've made a mistake
445:44 - if i go back here um i think it's
445:47 - because i'm using single quotes instead
445:49 - of double quotes
445:50 - okay but that doesn't really matter per
445:53 - se but i'll go ahead and fix that so
445:55 - change quotes
445:57 - from single to double okay
446:00 - but what i want to do is go ahead and
446:03 - check
446:03 - the dashboard here so we'll go there
446:06 - and from here i'm going to go to my
446:07 - settings
446:09 - and we'll take a look here again at
446:11 - integrations
446:12 - and we'll just see like
446:15 - there are clearly different um settings
446:17 - or permissions
446:18 - uh per one here okay so just understand
446:21 - that it's not one to one across them
446:23 - it's going to be really dependent on the
446:24 - get provider
446:25 - so yeah i guess that's uh two out of
446:28 - three and so the next video we'll go
446:30 - look at github okay
446:31 - [Music]
446:35 - all right so now we're on the github
446:37 - website to sign up for our last get
446:39 - provider that is currently supported uh
446:41 - with gitpod and so in the top right
446:43 - corner i'm going to go to sign in
446:45 - because i already have an account and i
446:47 - do have one with the android exam pro
446:50 - co but interestingly enough i never use
446:52 - this account because i have an older one
446:55 - but that is totally fine so what i'm
446:57 - going to do is just go ahead and grab
446:58 - the password for this
447:00 - and we're just going to go paste that in
447:01 - there
447:02 - whoops we'll try that one more time here
447:09 - okay i must have grabbed the wrong
447:10 - password that's totally fine we'll sign
447:12 - in
447:14 - oh it's not giving me anything today
447:16 - we'll try this one more time
447:23 - there we go okay so it was a bit tricky
447:25 - but i'm in there and you can see i
447:27 - already have a follower even though i
447:29 - don't know why they're following me but
447:31 - that's totally cool and apparently i
447:33 - have a very simple example over here
447:35 - python docs hello world so not a lot
447:38 - going on in this account which is
447:39 - totally fine so what i want to do is
447:42 - create myself a new repository and by
447:44 - the way if you're creating account for
447:45 - the first time it'll probably ask you a
447:46 - bunch of extra things to ask you know so
447:49 - you know whatever whatever is going to
447:51 - be there that's fine and i guess my
447:53 - username is exam pro hyphen dev so
447:54 - that's probably what i called it when i
447:56 - first created this account and so we're
447:58 - just going to say git pod
448:00 - um
448:00 - hello uh world
448:04 - as per usual let's make this one private
448:06 - um and we'll go ahead and add a git
448:08 - number file
448:10 - and we'll say readme file down below
448:12 - and it's private so i shouldn't have to
448:15 - choose a license but we can go here and
448:18 - just choose none
448:20 - oh it really wants me to choose one here
448:24 - oh for ignore okay so like ruby
448:28 - ah we'll just ignore it we don't need
448:29 - one that's fine
448:31 - we're not doing anything serious here
448:33 - and so now that we have it open again i
448:35 - know that button's there but we'll come
448:36 - to it soon enough so i'm just going to
448:38 - type in https forward slash forward
448:40 - slash get pod
448:42 - io forward slash pound enter
448:46 - and here it says something went wrong
448:48 - and it just means that you have yet to
448:49 - connect that account so we'll go ahead
448:50 - and say authorize probably not the best
448:53 - wording but that's just what it is and
448:55 - you'll notice that github has like the
448:56 - most robust
448:58 - permissions out of all the three you can
449:00 - drop down here and have a lot of options
449:02 - i'm going to say authorize get pod i o
449:04 - okay it's going to say repository not
449:06 - found it might be private so please
449:09 - authorize get pod access so again uh
449:11 - nope it's not a bug it's just you got to
449:13 - go ahead and hit grant access
449:15 - and so it says okay what kind of
449:17 - accesses do you want to give it we'll
449:18 - say authorized goodpodio
449:24 - and so what we'll do here is just open
449:27 - up the dashboards on the top left corner
449:28 - we're going to say open dashboard
449:31 - and we'll make our way over to settings
449:33 - i just want to show you again the
449:35 - integration so this is what it looks
449:37 - like
449:38 - for github this is what it looks like
449:41 - for um
449:43 - bitbucket this is what it looks like for
449:44 - gitlab so you can just see it's slightly
449:46 - different for each one
449:48 - um and same routine here what i'm
449:51 - curious to see if if it's preserved my
449:53 - font size and it totally did i think
449:54 - this is all happening with sync settings
449:56 - so down below see where it says settings
449:58 - sync is on so this is on by default and
450:00 - that's what's
450:01 - causing all these settings to remain
450:03 - available if we turned it off i think
450:04 - it'd probably end up resetting i feel no
450:07 - reason to turn off settings links to
450:09 - show that so we'll just leave it as is
450:11 - but what i'm going to do again is open
450:13 - up a new terminal so in the top left
450:14 - corner we're going to terminal new
450:16 - terminal
450:17 - and we'll go ahead and type in uh get
450:20 - pod so gp and type in init
450:22 - i'll open up that new file there and
450:24 - we'll just go ahead and delete that out
450:25 - as per usual
450:28 - and we'll say hello world
450:32 - and it's interesting this has single
450:34 - quotes so it should have worked for the
450:35 - other one i'm surprised it didn't work
450:37 - and it was double quotes
450:39 - but we'll try with single quotes again
450:42 - we'll go back over here we'll add that
450:44 - file we'll say uh add a net gitpod.yaml
450:48 - file
450:50 - okay
450:51 - and we will hit changes sync the changes
450:54 - we'll say okay
450:55 - open the context so here we'll say open
450:58 - context
450:59 - and so there is that gitpod gamma file
451:01 - updated
451:03 - so that's pretty straightforward for
451:05 - integrations
451:06 - um and so i think the next thing i would
451:08 - like to do
451:10 - is to show you how to install the
451:12 - bookmark extension
451:14 - and how to use the bookmarklet so i'm
451:17 - not going to close all this stuff i'll
451:18 - close this tab here we don't need that
451:20 - and
451:21 - from here i'm just going to
451:24 - go to my chrome extensions
451:30 - okay so we'll say chrome extensions
451:33 - and i'm just going to uninstall it so
451:35 - here i have git plot i'm just going to
451:36 - remove it okay
451:38 - and we'll go back here and so now we
451:40 - don't have that button
451:42 - whoops uh let's refresh that one more
451:44 - time
451:46 - yep so that button is gone
451:48 - and so i'll show you how to install the
451:50 - extension next okay
451:51 - [Music]
451:55 - hey this is andrew brown and welcome
451:56 - back to another follow along here and in
451:58 - this case what we're going to do is set
452:00 - up the browser extension so what i'm
452:02 - going to do is make a new tab here we're
452:03 - going to go get pod i o i'm going to
452:05 - type in browser extension
452:09 - and so from here we'll go to this page
452:10 - here it's under the documentation under
452:12 - here
452:13 - and so if we scroll on down we can see
452:14 - that we have support for chrome and
452:17 - firefox and we probably should try out
452:18 - another browser but we'll just do this
452:20 - for chrome for the time being
452:22 - and i'm just going to go ahead and add
452:23 - to chrome
452:25 - we'll say add
452:26 - extension okay and so already in the top
452:30 - here it seems like it's uh turned on
452:33 - up here
452:34 - and so if you want to know where that is
452:35 - we type in chrome forward slash sports
452:37 - extensions and here is where you can see
452:39 - it go to details i don't think there's
452:41 - anything interesting here but you can
452:42 - see there is some white listed stuff
452:44 - here sometimes extensions have
452:46 - additional options down below but
452:49 - nothing uh super exciting here so we'll
452:51 - just go ahead and close that and so now
452:54 - what we have is this nice button oh
452:56 - sorry i got a refresh wrong button sorry
452:58 - and so again uh we can hit the get pod
453:01 - button and so that's just going to save
453:02 - us the trouble of having to type in git
453:04 - pod i o i don't know if you saw it but
453:05 - i'll close it again but watch here very
453:07 - closely and click it and notice it not
453:23 - bash hello world available be found
453:25 - and i'm not sure why we're getting that
453:26 - there must be something wrong here
453:29 - it had the single quotes oh because this
453:31 - is not name
453:32 - okay
453:34 - that's our problem so i kept on having
453:36 - that init there and it was actually
453:37 - trying to run it as a command so that
453:39 - makes sense we'll say fix init commit or
453:42 - fix
453:43 - uh name of
453:45 - task there
453:47 - and we'll commit that
453:50 - and so now i can just close that tab out
453:52 - and from there i can just hit the button
453:54 - again and that's a lot nicer because you
453:56 - know every time you type it in at the
453:57 - top it overrides that page where if you
453:59 - click that button opens in a new tab
454:01 - and that is a lot nicer
454:04 - oh and by the way i didn't want to open
454:06 - a running workspace i want to hit that
454:07 - button and create a new workspace
454:10 - okay
454:11 - because we want to see if that git pod
454:13 - yaml uh will work this time around
454:19 - so we'll give it a moment here and we
454:20 - can see there it is it's still saying
454:23 - that do not commit that file
454:25 - still says init
454:28 - okay we'll save that maybe i did not
454:29 - commit it
454:32 - fix name of task
454:35 - add that again
454:37 - we will save that we will sync those
454:39 - changes we will go ahead and close that
454:40 - tab we'll hit the button again
454:43 - and now we have two of those
454:44 - environments so you can only run so many
454:46 - environments in parallel and for the
454:48 - free tier which i believe that we are on
454:51 - we're going to hit that limit very soon
454:53 - if we keep doing that but again those
454:54 - environments will shut down after three
454:56 - minutes if you want them to shut down
454:58 - right away
454:59 - um
455:00 - you can go into your workspace and
455:02 - terminate them i don't think there's an
455:03 - option to terminate from here there's
455:05 - only the option to stop
455:07 - right which i think they should have a
455:08 - terminate button but um you know that
455:10 - might be something in the future
455:12 - and so here it's
455:14 - did is this not updating
455:16 - am i crazy did i did i not launch a new
455:18 - one so i'm going to go here and refresh
455:20 - this page
455:22 - it's still saying that okay
455:25 - what am i doing wrong here
455:27 - so we go here
455:31 - name
455:33 - save
455:35 - right
455:37 - we go over here on the right hand side
455:39 - we're going to add it
455:40 - i'm going to see what's been changed
455:43 - init to name right and we'll just say
455:45 - fixed name task
455:48 - and i want to
455:50 - commit
455:52 - i'm going to go back here
455:54 - refresh
456:03 - and
456:08 - there are no stage changes commit if
456:09 - this happens because usually there's a
456:11 - sync button i press it right away
456:13 - so i'm just going to do git status here
456:17 - um get push maybe
456:20 - okay there we go so usually you hit that
456:22 - sync button i'm so used to clicking it
456:23 - so fast but just make sure that you push
456:25 - it and then we'll go back here give this
456:27 - a refresh
456:28 - okay i must have not been pressing that
456:30 - sync button if i go back to that video i
456:32 - never knew what that that prompt was i
456:34 - assumed it was like push or pull but if
456:36 - that doesn't work for you just do the
456:37 - push there and now i'm very confident if
456:39 - we open this up it's going to have the
456:41 - behavior that we want
456:50 - okay so we'll just give it a moment here
456:53 - and there we go okay so just be
456:56 - uh
456:56 - be wary of that i'm just going to want
456:58 - to see if that actually prompts let me
456:59 - say hello world again
457:01 - we're going to add that and just say
457:03 - miner change
457:06 - and we'll save that yeah sync changes so
457:08 - you really have to press that so this
457:09 - action will pull and uh push and pull
457:11 - requests two bits from origin so say
457:13 - okay
457:14 - and so that's probably what i wasn't
457:15 - doing
457:16 - um but yeah so we saw for chrome now
457:18 - let's go take a look at firefox i'll be
457:20 - back here in a second all right so i've
457:21 - opened up firefox which is a different
457:24 - kind of browser and what i'm going to do
457:25 - is go ahead and sign into my github here
457:28 - so what we'll do is just um type in
457:32 - the username here is exam pro dev and
457:34 - then i'll just put the password in there
457:36 - we'll sign in
457:37 - and i do not need that saved there so
457:40 - we'll go into here and so notice we
457:41 - don't have that button so on the gitpod
457:43 - website we go to docs
457:45 - and on the left hand side we are looking
457:47 - for configure
457:50 - or maybe it's getting started
457:52 - oh integration sorry and then under here
457:54 - we'll go to browser extension
457:57 - and from there we'll click firefox and
457:59 - we'll add that extension
458:01 - we'll say
458:02 - add and so now that extension is
458:06 - available so we'll say okay
458:09 - so let's go ahead and close that tab i'm
458:10 - not sure what happens if we click here
458:12 - so firefox prevented the site from
458:13 - opening a pop-up we'll say options and
458:15 - say allow pop-ups for git pod podio
458:18 - and so it brings you to the login page
458:20 - which is nice
458:22 - but what i'm going to do is just close
458:24 - out these tabs here and our button now
458:26 - up here so we'll go ahead and hit click
458:28 - get pod
458:29 - and so we have the option so how do you
458:30 - want to log in we're going to say github
458:36 - and we'll just see what this looks like
458:38 - i'm not going to be doing everything in
458:39 - chrome but i just want to show you
458:41 - uh you know that experience okay
458:48 - so
458:50 - there we go so we have hello world which
458:52 - is uh very good same experience right
458:55 - it's not going to be anything different
458:56 - um you know it's just a different
458:58 - browser um
459:00 - and so you know i just want to point out
459:02 - that
459:03 - this will work in other ones as well so
459:05 - maybe we'll take a look at microsoft
459:06 - edge next okay
459:08 - all right so now i have microsoft edge
459:10 - installed this is the
459:12 - i don't know if it's still the default
459:13 - browser but it's the browser made by
459:15 - microsoft and it's a chromium-based
459:16 - browser so this extension work with
459:18 - anything like chrome
459:20 - microsoft edge brave anything it's
459:21 - chromium based um and so what we'll do
459:23 - is go ahead and sign into our github
459:25 - account
459:26 - so we'll go here and we'll just type in
459:28 - example dev
459:31 - because we just want to see if the
459:32 - experience is slightly different and
459:33 - then from here we'll just type in get
459:35 - pod io
459:38 - and from there we'll go to docs
459:41 - and we'll go to integrations
459:43 - and since we know that it's a chromium
459:45 - chromium browser i'm assuming that if we
459:47 - go here it should work
459:50 - so it says you can now add extensions
459:51 - from the the chrome web store to
459:53 - microsoft edge which sounds really great
459:55 - and so i go down below here and i'm just
459:57 - looking for
459:59 - um a place to add i don't see a button
460:02 - here so allow extensions from other
460:04 - stores
460:05 - microsoft does not verify extensions
460:06 - install from third party stores to get
460:09 - um extensions verified go to microsoft
460:11 - edge add-ons so let's go check out the
460:13 - add-ons because this is the chrome store
460:16 - and i'm sure it will work from here but
460:17 - i'm just curious if it's in here
460:19 - because it seems like if this is the
460:21 - official way maybe we should go here and
460:22 - see there so let's say git pod
460:26 - dot io
460:28 - and so i don't see it in here and so if
460:30 - git pod if you're watching maybe you
460:32 - might want to get this in here and i'm
460:33 - assuming this is um
460:35 - extensions because i see grammarly in
460:37 - here okay but let's go ahead and just
460:40 - say allow extensions from other stores
460:43 - so it's permitted and so now we can say
460:45 - add to chrome we're technically not
460:46 - using chrome we're using microsoft edge
460:49 - and so now we have that button there
460:51 - notice that we actually get a button
460:52 - whereas in chrome we don't if we do that
460:54 - brings us just like how firefox does
460:56 - and so what i want to do here let's see
460:59 - if it's the same thing chrome
461:01 - uh
461:02 - extensions does that work ah it's edge
461:05 - extensions which is fine so here you can
461:06 - see it we turn on and off look at the
461:08 - details very similar
461:11 - but we'll go back over here and i want
461:13 - to go to get pod hello world and we'll
461:15 - click on git pod
461:17 - and we'll have to log in with github
461:20 - same story you know
461:22 - and sure we'll launch the existing
461:24 - workspace no reason to launch a new one
461:25 - this one will launch really fast because
461:27 - of it
461:29 - and it's the same experience so yeah i
461:32 - mean we could look at brave as well but
461:33 - i think the process is going to be the
461:35 - same
461:36 - brave is just another browser um that we
461:38 - can utilize okay but there you go
461:41 - okay i decided to do brave just for fun
461:43 - and so here i have the brave browser
461:45 - open and we're going to make our way
461:46 - over to github
461:47 - and just see what we can do here and see
461:49 - if the process is any different i'm sure
461:51 - it's the same it'll be super unexciting
461:53 - but let's do it anyway okay
461:55 - so we'll say exam pro dev we'll go ahead
461:57 - and paste that on in there
461:59 - and so from here we can go to our
462:01 - repository
462:03 - oh and we need the extension right so
462:04 - we'll type in git pod io
462:07 - and from here we'll go to whoops docs
462:11 - integrations
462:14 - browser extension and we will click
462:17 - chrome because it's a chrome based one i
462:18 - don't know if like brave has like brave
462:21 - add-ons
462:23 - like their own extension store maybe
462:26 - um
462:27 - we'll go to extensions here
462:32 - so maybe go to the web store here and it
462:34 - just goes to google chrome so that tells
462:36 - us that you know they don't have their
462:38 - own store like microsoft does here or
462:41 - add-on place you know we'll just say add
462:43 - to brave we'll say add extension
462:47 - there it is
462:48 - looks the same
462:50 - we'll go ahead and see if that button
462:52 - exists there we'll refresh
462:54 - we'll hit get pod here we'll say github
462:56 - again
462:59 - we'll continue with the same workspace
463:01 - so it just runs a bit faster
463:07 - and there we go so we've launched it in
463:10 - chrome
463:11 - within
463:12 - firefox edge and brave
463:14 - um i don't have safari on this computer
463:16 - but
463:17 - can we do safari on windows safari
463:20 - windows
463:22 - right
463:26 - i think there is one so if there is
463:27 - we'll give it a try but i mean we pretty
463:29 - much exhausted all the browsers here so
463:30 - you know if there's safari and i can
463:32 - install it here i'll the next video will
463:34 - be seeing if we can install with safari
463:36 - okay
463:39 - [Music]
463:41 - okay i'm back and um i was thinking
463:43 - about using safari but we can't install
463:45 - it on windows anymore
463:47 - and it'd be too hard to record on my uh
463:49 - my mac computer so what i'm going to do
463:52 - is just use opera instead and opera
463:54 - has been a browser for a very long time
463:57 - i'm not sure what they've been doing
463:58 - with it but i have a strong feeling that
464:00 - we will not be able to install
464:02 - the chrome the chromium extension on
464:04 - opera unless it actually is using chrome
464:06 - underneath but let's go find out so the
464:08 - first thing is let's just go to get
464:10 - podio
464:13 - okay
464:14 - and
464:14 - we'll first see if it
464:16 - we install that chrome extension and
464:18 - then we'll go log into our github as per
464:19 - usual so we'll go to docs we'll go to
464:22 - integrations
464:23 - and from here we'll go to
464:26 - extension
464:27 - and
464:28 - i think that it won't work here so we go
464:29 - to chrome
464:32 - oh
464:34 - is
464:35 - is opera
464:36 - is opera a chromium browser let's go ad
464:39 - extension see i didn't think it was
464:40 - based off of chrome
464:43 - well that messes up my whole example and
464:46 - git pod you're going to have to say that
464:47 - it works with
464:49 - us and other chromium browsers so i
464:51 - guess they kind of
464:52 - got all those edge cases i was hoping to
464:54 - find one that's not chromium based and
464:57 - so now i really think that i really do
464:59 - have to try it on safari to find out if
465:01 - there is a use case there so i guess if
465:03 - we go over to
465:05 - our github now
465:08 - i'm so disappointed that that that that
465:11 - actually worked okay
465:12 - um but we'll just type in exam pro
465:16 - dev
465:18 - we'll put the password in there
465:20 - and we'll go see that there's a button
465:22 - yeah the button's there great
465:24 - so what browser
465:25 - browser that is not chromium-based
465:32 - uh windows
465:34 - is there anything
465:39 - see i don't know anymore like what's
465:41 - pale moon best browsers that are not
465:43 - based on chromium
465:45 - pale moon web browser
465:48 - never heard of this
465:50 - really
465:52 - film is an open source
465:54 - browser
465:56 - 2021
465:57 - let's give it a try so what i'll do is
465:59 - i'll just be back here in a moment and
466:01 - we'll take a look at pale moon okay
466:03 - because i just want to see a browser
466:05 - that's not chromium okay
466:08 - all right so unfortunately github does
466:10 - not work with pale moon and neither does
466:12 - git pod and so unfortunately we can't
466:15 - use this cool new browser but we'll have
466:17 - to do is go back to opera and pretend
466:18 - that this extension never worked and
466:21 - that we have a reason to use the
466:22 - bookmarklet um and so what we'll do is
466:25 - just bookmark this here in the top right
466:27 - click here edit
466:28 - say launch and get pod and then we'll
466:30 - have to put that javascript here so
466:32 - we'll type in git pod bookmarklet
466:37 - all right and from here we have some
466:39 - javascript we'll go ahead and copy that
466:42 - make our way back here right click edit
466:44 - if it seems like i'm going fast it's
466:46 - because i've shot this video like four
466:47 - times
466:48 - and so i'm just hoping that it works
466:50 - smoothly this time around but so we have
466:52 - our button we'll go ahead and click the
466:54 - get pod it might prompt us if we need to
466:56 - authorize so just give it access if you
466:58 - do and as that launches i'm going to go
467:00 - ahead and copy this code so we can just
467:02 - take a look at it
467:04 - and so here we are i'm going to make a
467:06 - new file here but you can see that it
467:07 - worked no problem right um but i just
467:10 - kind of want to show you the javascript
467:13 - because it's really really simple
467:16 - like you know it's just looking or you
467:18 - get lab github get bucket and then open
467:20 - this thing and so if we want to extend
467:22 - this this is just javascript you can do
467:24 - whatever you want with it so if we want
467:25 - to do something fun like get pod and
467:28 - vars
467:30 - we can actually embed environment
467:32 - variables into our url so down below
467:34 - here we kind of have the syntax here for
467:36 - doing that
467:37 - okay
467:38 - and so
467:40 - i pretty much how that knows how that
467:42 - works so we would just type in something
467:43 - like
467:44 - my env equals production
467:47 - or maybe development
467:48 - that make more sense
467:50 - we'd have a forward slash because that's
467:52 - how it works
467:53 - and we go ahead and save that and then
467:55 - we would go ahead and copy that just
467:58 - make sure that's saved i'm going to
467:59 - close that environment close this one
468:00 - we're going to right click edit
468:02 - and just paste in the new contents i'm
468:04 - going to make sure that that is there so
468:06 - i don't have to triple check and so
468:09 - we'll hit save and now if we launch
468:11 - gitpod that environment variable should
468:13 - get passed along so it's just like a
468:15 - kind of cool way to
468:16 - modify it there's probably more
468:18 - interesting things that we could do so
468:19 - you could technically maybe write your
468:21 - own contexts if you wanted to
468:24 - um but of course get pot only supports
468:26 - particular context so let's see if our
468:27 - environment variable shows up here so
468:29 - we'll just type in grep
468:31 - my env grep is just a way of searching
468:35 - okay and there it is we could type in
468:37 - echo and type in my env and there it is
468:40 - so there you go that is the bookmarklet
468:42 - for when you cannot install chrome
468:44 - extensions whether your browser does not
468:46 - support it or whether your admins have
468:49 - locked down your browser because it's a
468:51 - workstation or what have you but there
468:53 - you go
468:53 - [Music]
468:58 - hey this is andrew brown and we are
468:59 - taking a look at git pod configuration
469:01 - files and so this allows you to
469:03 - configure a workspace and so we say
469:05 - workspace we're saying configure a
469:07 - developer environment when it firsts
469:09 - launch
469:10 - so the gitpod configuration file is a
469:12 - yaml file that must be named period get
469:15 - pod period yaml so the period or dot
469:18 - that's in the front there tells linux
469:19 - that it's a hidden or secret file and
469:22 - that's not so important but what's
469:23 - important is that you remember to have
469:25 - that dot or period in the front
469:28 - and it needs to be present at the root
469:30 - of your git repository you can only have
469:32 - a single git pod yaml file so you can't
469:35 - make a bunch of folders and then uh put
469:37 - a bunch in there thinking you're going
469:38 - to customize all those folders it's just
469:40 - a single one and so here's an example of
469:43 - a
469:43 - gitpod configuration file we're going to
469:45 - see a lot of different kinds throughout
469:46 - this course but this is a very simple
469:48 - one where it's installing dependencies
469:50 - using yarn for javascript it's opening
469:52 - up port 8000 and then it's going to
469:54 - allow us to view the website inline in
469:57 - the code editor so the following can be
469:59 - defined in the gitpod configuration file
470:02 - and so we're going to go look at a quick
470:03 - list of the configuration options and
470:05 - then we'll deep dive in upcoming videos
470:08 - on all these options so the first is
470:10 - checkout location so where gitpod checks
470:12 - out the project's code which will
470:14 - default to workspace git config so
470:17 - defining a workspace git configuration
470:19 - github.prebuilds configure the gitpod
470:21 - github app specifically for continuous
470:23 - pre-built and you can do pre-builds with
470:25 - gitlab and bitbucket it's just that
470:27 - github has some additional options here
470:29 - we have image so define custom docker
470:31 - image this defaults to gitpod forward
470:33 - slash workspace full we have ports so
470:36 - define ports exposed for public access
470:38 - tasks so define a list of terminal
470:40 - windows to be open and associated
470:42 - scripts to be run when launching a new
470:44 - workspace vs code.extensions a specified
470:47 - list of vs code extensions to install
470:49 - when launching a new workspace workspace
470:51 - location so which path gitpod considers
470:53 - the project's workspace default
470:55 - directory and this will default to
470:57 - workspace i could really use a comma
470:59 - oops
471:00 - i could really use a comma right here
471:03 - but yeah those are the settings and we
471:04 - will look at them in greater detail okay
471:11 - hey this is andrew brown and we're
471:13 - looking at how do we actually initialize
471:15 - a get pod configuration file so to
471:16 - initialize a git pod configuration file
471:18 - there are two approaches the first is
471:20 - very simple create a dot get pod yaml
471:22 - file from scratch and just start filling
471:24 - it in that's the way i generally do it
471:26 - but they do have this convenience um cli
471:29 - command called gpinit and this will
471:31 - generate a
471:32 - sample.gitpod.yaml file so this is what
471:34 - it looks like um i don't find this
471:37 - particularly useful but you know if you
471:39 - find this easier to do than right
471:40 - clicking and creating a file it's up to
471:42 - you but i just wanted to know that both
471:43 - options were available but in either
471:45 - case you need to commit this dot
471:48 - gitpod.yaml to your code base because um
471:51 - you know it's not going to stick around
471:52 - if you don't and we'll learn that as we
471:54 - look at the iterative workflow okay
471:56 - [Music]
472:00 - hey this is andrew brown and what we're
472:02 - going to do in this follow along is look
472:03 - at how to initialize a gitpod
472:05 - configuration file of course we have
472:07 - done this in a previous follow along but
472:09 - let's just do it again for good measure
472:11 - to make sure that we know how to do it
472:12 - so i'm going to go ahead and create a
472:14 - new repository i'm going to say git pod
472:17 - and i'm going to call this
472:20 - init so this will be to initialize
472:25 - a
472:26 - getpodconfiguration file
472:29 - and then from here we can make it public
472:31 - or private doesn't matter i'm going to
472:32 - make it um
472:34 - private
472:35 - and we'll go ahead and add a readme file
472:37 - and we'll create that repository
472:41 - so here is a repository and i have the
472:44 - chrome extension installed so i'll go
472:46 - ahead and hit the get pod button
472:54 - all right and so our workspace has
472:56 - started now so what i'm going to do is
472:58 - i'm going to open up terminal so i'll go
473:00 - file up here the hamburger menu
473:02 - i always say file but it's actually
473:03 - hamburger menu terminal new terminal and
473:06 - we'll give it a moment here to load and
473:08 - so we'll just type in gp init and so the
473:10 - gp init command is used for setting up
473:12 - an initial get pod file and that's all
473:14 - there really is to it again you can of
473:16 - course just right click and create that
473:17 - file you want and the key thing to
473:19 - remember is that you need that period in
473:20 - front of the uh get pod there for it to
473:22 - work
473:23 - um but you know we can go ahead and just
473:25 - save this file and commit it just say
473:28 - commit
473:29 - initialize
473:31 - a git pod yaml file
473:33 - and that's all there really is to it
473:35 - okay
473:37 - so just say okay
473:39 - and we'll go back here and just refresh
473:41 - here
473:43 - and we could launch this again just to
473:45 - see the results here but you know
473:47 - there's not much to here to see but just
473:49 - remember that's gp init
473:51 - [Music]
473:56 - so when you're developing your gitpod
473:58 - configuration file it is standard
473:59 - practice to keep terminating and
474:01 - launching new workspaces until you get
474:03 - your ideal configuration so let's kind
474:06 - of visualize what that workflow looks
474:08 - like so the idea is you're going to have
474:09 - this git pod yaml file you're going to
474:11 - either be creating it or modifying it
474:14 - and once you're happy with its current
474:15 - state you're going to go and commit that
474:17 - to your git repository once that is
474:20 - committed you're going to terminate the
474:22 - current workspace so that could just be
474:24 - uh
474:25 - telling it to uh delete or just closing
474:28 - out the tab and then you're going to
474:30 - launch a new workspace and you're going
474:33 - to observe the start task did it do what
474:35 - it was supposed to do we need to tweak
474:37 - it and if it is uh requires more
474:40 - tweaking we're gonna go back and modify
474:43 - our git pod yaml file again and go
474:44 - through this entire process until we're
474:46 - happy with it and then we can just start
474:49 - using our developer environment as
474:51 - expected but what i really want to know
474:54 - and this is what created a lot of
474:56 - confusion for me initially is that
474:57 - stopping and starting an existing
474:59 - workspace will not produce the desired
475:02 - results since the before and init
475:04 - commands for a star task will not be
475:06 - performed so there's an execution order
475:09 - there's three things it's um
475:12 - before init
475:13 - and command and so the only way to
475:16 - really make sure that your start tasks
475:20 - like to be able to debug them or or to
475:22 - develop on them is to always
475:25 - terminate and launch a new workspace
475:27 - okay
475:28 - [Music]
475:32 - hey this is andrew brown and in this
475:34 - follow along we're going to learn about
475:35 - how the iterative workflow works when
475:38 - you are
475:39 - trying to update your gitlab
475:40 - configuration file many times to get to
475:42 - the state that you want it to be in uh
475:45 - because there is some confusion between
475:46 - starting and stopping and terminating
475:48 - and i want to make that very clear so
475:50 - what we're going to do is create a new
475:51 - repository here we're going to call it
475:52 - get pod iterative
475:56 - workflow
475:57 - and i'm going to make it private for fun
475:59 - we're going to call it a readme file of
476:00 - course you can make it public but
476:02 - you know doesn't really matter i'm not
476:04 - going to launch gitpod right away i'm
476:05 - just going to go ahead and add a file
476:07 - just to save us a bit of time because
476:09 - you know there is the stopping and
476:10 - starting of those workspaces it takes
476:12 - time and i just want to set up one with
476:15 - uh tasks and we're going to just have a
476:17 - task
476:18 - for um
476:20 - each state so we're gonna we're gonna
476:21 - need it's before
476:23 - a knit
476:25 - and command and i'm just gonna do an
476:27 - echo in each of these ones
476:30 - okay so we'll do this
476:32 - init
476:34 - echo
476:36 - before
476:37 - all right so we have our three this
476:38 - should all be fine we'll go ahead and
476:40 - commit this file and now what i can do
476:42 - is start up this environment and i'll
476:44 - see you back here in a moment okay
476:46 - all right so after a short little wait
476:47 - there our environment has launched and
476:49 - notice that it's ran before a knit
476:51 - command so what is going to happen
476:53 - if we um stop this environment so over
476:56 - here we can do stop workspace
476:59 - and what we'll do is we'll see what runs
477:01 - here so just give it a second sometimes
477:03 - it takes a moment to kick in for uh it
477:05 - to stop
477:06 - so just wait
477:12 - and it looks like it's starting to do
477:13 - something
477:14 - there we go so it's going to stop
477:16 - sometimes when i stop it might say
477:18 - superficially like oh this workspace is
477:20 - gone so just don't worry about the
477:23 - getpod errors they're not always 100
477:24 - percent accurate and they don't always
477:26 - happen but you know just have confidence
477:28 - of what you are doing
477:30 - so this is going to stop and once this
477:32 - is fully stopped
477:33 - um and that doesn't usually take that
477:35 - long we're going to start it up so i'll
477:36 - just wait here a moment so i can show
477:38 - you that i'll press the start button
477:39 - again so here we go and we'll go ahead
477:41 - and open this workspace again and i'll
477:42 - see you back in a moment when the
477:44 - environment has started up again okay
477:46 - all right so after a short little wait
477:47 - here it has launched again and notice
477:48 - that it's running the before and command
477:51 - so if we go back into here we have
477:53 - before init command so anytime you
477:56 - launch
477:57 - a a regular workspace it's always going
477:59 - to run
478:00 - uh before a net command for the first
478:01 - time but any restarts it's always going
478:03 - to run before and command and you're
478:05 - going to get used to this because when
478:06 - we start looking at the execution order
478:07 - steps between pre-builds
478:09 - and without pre-builds you're going to
478:11 - start to see this pattern
478:12 - but what i want to do now is just to
478:14 - completely terminate the environment and
478:16 - so you know if you want to terminate you
478:18 - can stop this current one if you're
478:20 - worried about lots of parallel
478:22 - environments running but what i normally
478:23 - do is i just go ahead and close the tab
478:25 - and in three minutes that environment
478:27 - will shut down on its own
478:29 - i don't know if gitpod really has an
478:31 - option for
478:33 - a terminating terminate i think you
478:35 - always have to stop at first so if i go
478:37 - here
478:38 - i can i can delete it okay so if i want
478:41 - to i can delete it here but again this
478:43 - is nothing i ever think about i just um
478:46 - close the tab and it goes away which is
478:47 - really nice but what we'll do is we'll
478:49 - launch a new environment so we'll just
478:50 - click the get pod button
478:52 - and see it thinks that this one's still
478:54 - running we're gonna ignore it hit the
478:55 - new workspace button okay
478:58 - and sometimes i forget what i'm doing
478:59 - and i might re-launch an existing
479:01 - workspace so you just have to
479:03 - be uh
479:04 - considerate and think about you know
479:06 - maybe i did this maybe i did that okay
479:09 - and so i'll see you back here when this
479:11 - is started okay
479:12 - all right welcome back so you can see in
479:14 - the case that we terminate it it runs
479:16 - before and it command all right and so
479:19 - this again is really important because
479:21 - if you are trying to develop this and
479:23 - you're doing multiple iterations you
479:24 - really want to know that in it's not
479:25 - going to run every single time so you
479:27 - really always always always want to
479:31 - just close the tab and then launch a new
479:33 - workspace okay and so you know hopefully
479:35 - that's clear and saves you some trouble
479:37 - so there you go
479:39 - [Music]
479:44 - so the most important part to a get pog
479:47 - configuration file in my opinion are the
479:49 - start tasks because these define a list
479:51 - of terminal windows to be open and
479:53 - associate scripts to be run when
479:55 - launching a new workspace so here is an
479:58 - example
479:59 - of and this is actually my marketing
480:01 - website uh
480:02 - of a git pocket configuration file and
480:05 - so what's happening here is we have
480:07 - three tasks defined we have one called
480:10 - html so that's going to be running or
480:12 - building out html files we have this
480:14 - next one here for generating out
480:15 - javascript and css and then it's going
480:17 - to continuously watch
480:21 - for changes and then we have a
480:24 - task that will serve the website so we
480:26 - can view it and then down below here
480:28 - we're opening up port 3000 and then
480:30 - we're going to
480:31 - open it in the browser so when you have
480:34 - that and uh
480:36 - you start up your workspace you're going
480:38 - to see these three tabs and notice that
480:39 - the names match so we have html
480:42 - js for css and serve and over here you
480:46 - can see that it is a running
480:49 - http server over here so a start task
480:51 - has the following properties you have a
480:53 - name so the name
480:55 - that will appear within the terminal as
480:56 - we can see there uh the before command
480:59 - so a command that will run once at the
481:00 - launch of a new workspace
481:02 - uh the init command a command to run
481:04 - once at the launch of new workspace
481:06 - expects to terminate and i ran out of
481:08 - room here but this one expects to
481:09 - terminate as well but we will repeat
481:11 - that multiple times in this course then
481:13 - we have the command command which is
481:16 - confusing to say when you say that out
481:17 - loud but that's what it's called and
481:19 - that runs at the launch of a new or
481:21 - existing workspace and can be
481:23 - continuously running so an example of
481:25 - here we have that hp server it of course
481:28 - continuously runs and then the npn run
481:30 - watch that is something that
481:31 - continuously runs then you have env so
481:34 - this allows you to set environment
481:35 - variables scoped for the task and we
481:37 - have the open mode so how the terminal
481:39 - window should be opened whether it's
481:41 - going to be
481:42 - tab after tab before split right
481:44 - split left okay
481:46 - [Music]
481:50 - hey this is andrew brown we are taking a
481:52 - look at executioner steps for tasks and
481:54 - so a task has three possible steps in
481:57 - its execution order uh and you could say
481:59 - steps so you could say command i'm going
482:01 - to call them steps because there is a
482:04 - a step called command and then i'm going
482:05 - to be saying command command that gets
482:06 - confusing but we have before init and
482:09 - command and so let's just kind of talk
482:10 - about their application so for before
482:13 - you're applying like configuration of
482:14 - the environment before init or command
482:16 - step runs and that will make sense when
482:18 - we start seeing like how these run with
482:20 - pre-builds or no pre-builds then we have
482:23 - a knit so for heavy configuration
482:24 - environments so compiling resources
482:26 - installing packages
482:28 - and then command so starting
482:29 - continuously running servers like a
482:31 - database or a web server
482:33 - if that doesn't make sense don't worry
482:34 - because we're going to look at these in
482:37 - a few different ways and i was very hard
482:39 - to kind of describe what these three
482:41 - boxes are
482:42 - but you know i think we'll just go
482:43 - through that iterative process and we
482:44 - will understand uh
482:47 - absolutely before the end of this course
482:49 - what goes in before a knit and command
482:51 - so there is no guarantee of the order of
482:53 - the execution uh for start tasks and so
482:56 - when i say that i don't mean that
482:58 - like there's a guarantee that it'll go
483:00 - before a knit or command but when you
483:01 - have a collection of those
483:03 - like more than one task there's no
483:05 - guarantee of that okay so you can have
483:08 - terminals depend on the completion of
483:09 - other commands via the sync await and
483:12 - sync done and we will definitely look at
483:14 - that in the course here uh there is a
483:16 - guarantee of the execution order as uh
483:18 - for before a net command for a task so
483:21 - for the individual execution of of this
483:24 - we just saw that will always be the same
483:26 - okay so the execution order varies
483:29 - in the case of when launching a new
483:30 - workspace without pre-builds and then
483:32 - when launching a new workspace with
483:34 - pre-builds and we will look at those
483:36 - right now okay
483:38 - [Music]
483:42 - hey this is andrew brown and what i want
483:44 - to do in this follow along is just to
483:45 - kind of look at a practical example of
483:47 - execution or steps so you can kind of
483:49 - understand the context of when you put
483:51 - something in the before the init and the
483:53 - command and it's not like a perfect
483:56 - science um and i think you just kind of
483:58 - have to
483:59 - figure your way through it and look at a
484:00 - lot of examples but i'm just trying to
484:02 - think of one where i know somebody is
484:04 - using
484:05 - um get pod in a more complex use case
484:07 - and one would be something like forum so
484:09 - i definitely know forum has a good pod
484:11 - gamble file i think i was saying to them
484:13 - earlier this week it was not working
484:15 - properly but they may have fixed it
484:16 - since then but we're not interested
484:18 - really whether or not it uh like the
484:21 - application works but more so the fact
484:23 - that how are they using it like those
484:25 - execution order steps so notice they
484:27 - have a docket.yaml file in a
484:30 - gitpoddocker file if you don't know what
484:32 - form is form is this platform that
484:34 - allows you to host your own
484:37 - um
484:38 - form essentially if you ever heard of
484:39 - like dev.t.o like this here um this is
484:43 - what this is so the great thing is we
484:44 - can go ahead and hit our git pod button
484:46 - and we'll just wait for this to spin up
484:48 - and then once it's there we'll see if it
484:50 - actually is working as expected if it
484:52 - doesn't it's fine but what we're really
484:54 - interested in is expecting that git pod
484:55 - yaml file okay all right so after
484:57 - waiting a little while here the
484:59 - environment has spun up and so what
485:01 - we'll do is just take a look at what is
485:03 - going on there's a lot of things popping
485:05 - up asking me to do stuff and so here we
485:07 - can see that we have two tabs on the
485:09 - right hand side so we have form server
485:11 - bash open site gp
485:14 - so what we'll do is go on the left hand
485:17 - side here and take a look at the get pod
485:20 - yaml file as soon as i can find it here
485:23 - um
485:25 - and if i can't find it that way we can
485:27 - just hit control p i believe and just
485:29 - type in dot get pod yaml
485:33 - okay this is not specific to git pod but
485:35 - this is just how vs code opens files
485:38 - anywhere so instead of me having to look
485:39 - through all these things i can just do
485:40 - that so that is the file that i'm
485:42 - interested in so we'll do is open it up
485:44 - and so here we can see that they are
485:46 - specifying a custom image which is
485:49 - totally fine it's not going to make this
485:50 - too confusing they have a lot of ports
485:52 - open so 3000 30 35 5432 that's for
485:56 - postgres i'm not sure what this is for
485:58 - this is for the ruby on rails web server
486:01 - this is for redis just because i know
486:02 - these port numbers i just don't know
486:04 - what this one's for so we'll go here and
486:06 - we have some tasks and the first thing
486:08 - they have
486:09 - for this task is the form server
486:12 - and they have a before and a knit and
486:13 - command and so in there before what
486:15 - they've decided to do is start up the
486:17 - redis server uh then they are doing an
486:20 - await port so they're waiting for 5432
486:23 - to happen and then they're doing sleep
486:25 - i'm not sure what the sleep is for
486:27 - okay and so that means that um
486:30 - until port is open then proceed forward
486:32 - which is fine
486:34 - and i'm not i'm not sure what a single
486:37 - ampersand means unless i just remove
486:39 - that by accident i don't think i did so
486:41 - i'm kind of interested in what that does
486:43 - um again assuming that you know i didn't
486:45 - just introduce that mistake which i
486:46 - don't think i did and then we have this
486:49 - get pod init sh so they're running a
486:51 - initialization script so this could have
486:53 - a bunch of stuff in it let's just take a
486:54 - look there
486:56 - get pod
486:58 - init sh
487:01 - so here
487:03 - they are copying an environment variable
487:05 - installing a couple gems running been
487:08 - set up and that's kind of nice where
487:09 - it's like okay maybe you have a lot that
487:11 - you want to run here so you just
487:12 - abstract it out into there and then here
487:14 - they run the bin startup command
487:17 - okay and then down below they have open
487:19 - site so it looks like they just do this
487:21 - to force git pod to open it up and this
487:24 - is kind of nice i didn't know you could
487:26 - do this so i think when i did the follow
487:27 - along i had something a lot more
487:28 - complicated so i'm gonna have to go back
487:30 - and
487:31 - borrow that because that is definitely a
487:32 - lot easier
487:33 - all right so this one really just opens
487:35 - up the site and this one is doing this
487:36 - now what's interesting is that they
487:38 - started the redis server here because
487:39 - what they could have done is they could
487:41 - have just made a separate task here
487:42 - called redis server
487:44 - right and from here
487:47 - what they could have done is done this
487:49 - on the
487:51 - um
487:52 - like command step
487:54 - right and so
487:55 - that's what i would have done i would
487:56 - have said redis server and then if i had
487:58 - a ruby on rail server i would have done
488:00 - ruby on rails
488:02 - okay
488:04 - but that's not what they did so they
488:05 - decided to put in the before command and
488:07 - that's totally valid so that's just me
488:08 - trying to say like it's not a perfect
488:10 - science you have to decide if you want
488:12 - to put something in the before or if you
488:14 - want to make it a separate tab for me i
488:16 - prefer to break it all up into separate
488:17 - tabs and before is really designed for
488:20 - um
488:21 - you know like if you had to change ruby
488:22 - versions or things like that at least
488:24 - that's what i think it's for um but just
488:26 - understand that you know it's gonna vary
488:28 - for that kind of stuff and so you know
488:31 - hopefully that gives you kind of an idea
488:32 - for execution or steps we're gonna
488:34 - iterate on this quite a few times so uh
488:36 - we'll get it by the end of this course
488:37 - okay
488:38 - and by the way we are done here so we
488:40 - can just go ahead and close that tab i'm
488:42 - just gonna go back to my homepage there
488:43 - and we are done
488:45 - [Music]
488:49 - so let's take a look at the execution
488:50 - order steps when launching a new
488:52 - workspace without pre-builds and what's
488:54 - important here is that all steps will
488:56 - run within the current workspace so
488:58 - we've got before a knit and command so
489:00 - let's talk about what we're going to use
489:02 - these commands for so before
489:04 - is great when we want to customize the
489:06 - terminal install global dependencies and
489:08 - we expect the commands to terminate so
489:11 - an example here for the before would be
489:13 - something like rvm or nvm so you're
489:16 - switching to the ruby
489:18 - ruby version that you want to use or the
489:21 - javascript version that you want to use
489:22 - so that's kind of an example there
489:25 - and so for net we are downloading and
489:27 - installing dependencies compiling source
489:29 - code running your test suite
489:31 - and again we expect our commands to
489:34 - terminate so examples here would be
489:36 - bundle stall yarn install rake db create
489:39 - so what's happening here is we are
489:41 - installing ruby dependencies javascript
489:43 - dependencies creating our database for a
489:45 - ruby on rails application possibly
489:48 - and then we have our command so
489:50 - the idea here is you're going to start
489:52 - your continuous continuous running
489:54 - servers you're going to run your build
489:56 - scripts to build assets and this last
489:58 - command can be continuously running so
490:01 - here we are starting a rails server so
490:04 - hopefully that gives you an idea what's
490:05 - going on here but the reason why
490:08 - uh these ones have to terminate is
490:10 - because of pre-builds because
490:12 - these will get pushed onto pre-builds
490:14 - and you know you can't have something
490:15 - continuously running or the pre-build
490:17 - will never end but we'll talk about that
490:18 - in the next slide okay
490:20 - [Music]
490:24 - so now let's take a look at the
490:25 - execution order steps when we are
490:27 - launching a new workspace with
490:29 - pre-builds enabled so not all steps are
490:31 - executed in the new environment so on
490:34 - the left hand side it's going to look a
490:35 - little bit different we're going to have
490:37 - our pre-build environment which is only
490:39 - going to run the before and init then
490:41 - we're going to have the new workspace
490:42 - that's going to run the before and
490:44 - command and so the idea behind having
490:47 - this pre-built environment at where it's
490:49 - running the before knit commands it's
490:51 - going to
490:52 - create a snapshot that will be then used
490:54 - later on when we launch our new
490:56 - workspace environment to reduce our boot
490:58 - time
491:00 - so looking at our previous script there
491:01 - we would do the before here so changing
491:04 - our ruby version and then here we would
491:06 - install our dependencies create our
491:07 - database
491:09 - and then down below in this new
491:11 - workspace this is when you start a new
491:13 - workspace with a pre-build it's going to
491:15 - run the before and command so just
491:17 - describing what we're doing with the new
491:18 - workspace here the developer saves time
491:20 - because they don't have to wait for the
491:22 - length of the inits compile independent
491:24 - libraries so that's just me redescribing
491:26 - what i just said here after talking
491:28 - about the reduced boot time so here we
491:30 - would do the before again and then we'd
491:33 - run our command
491:34 - so it's really important to think about
491:37 - the fact that these are isolate
491:38 - environments because as you develop your
491:41 - git pod configuration files you're going
491:42 - to have to realize that
491:44 - you know stuff is not going to carry
491:46 - over to the next
491:47 - workspace so if you do this rake db
491:50 - crate and it populates a bunch of data
491:52 - and you need that in your
491:54 - workspace it might not be there
491:56 - okay
491:57 - so or like if you cd into
492:00 - if you cd into a particular directory
492:03 - right
492:04 - um and you think that you're going to be
492:06 - seated in that directory when you're
492:07 - over here you might not be there so
492:09 - that's something that you'll have to
492:10 - play around with it's not too bad you
492:12 - start to get uh get the idea but i i had
492:15 - a script that i was using that was
492:17 - before pre-build and it worked fine and
492:19 - then when i moved to pre-build i had to
492:21 - take in consideration that these are
492:22 - isolate environments here and not
492:24 - everything carries over okay so there
492:26 - you go
492:27 - [Music]
492:32 - hey this is andrew brown and we are
492:33 - talking about git pod configuration
492:35 - files and specifically how to write
492:38 - multi-line tasks so if you want to
492:40 - perform a series of commands within a
492:42 - task step there are several options
492:45 - available of course you can do it as one
492:47 - line and the way you would do it with
492:49 - one line is you'd have to use double
492:51 - ampersand i bet you could also probably
492:53 - use a
492:54 - a semicolon but double ampersand is
492:57 - probably going to be recommended if
492:58 - you're not familiar with double
493:00 - ampersand the idea is that if this
493:02 - command fails then it's not going to run
493:04 - the next command okay but if you wanted
493:06 - the next command to run
493:07 - i suppose you'd have to use a semicolon
493:10 - to denote the next line okay so if you
493:14 - want to do multi-line what we can do is
493:16 - use this uh
493:17 - closing angle bracket and then followed
493:19 - by the next lines you're going to have
493:21 - to have double ampersand the reason why
493:23 - is that when you use this uh closing
493:26 - angle bracket it's going to take all
493:29 - these lines and it's going to remove all
493:30 - the new lines and treat it as a single
493:32 - line so it's pretty much like writing
493:34 - this but multi-line okay
493:36 - and then we have this other one where we
493:38 - use a pipe and the pipe will
493:42 - add a new line so these will be
493:44 - sequentially um
493:47 - these will run sequentially in order and
493:49 - generally in this case you probably
493:50 - wouldn't use double ampersand because
493:53 - it's not going to play well with that
493:54 - new line and if you're wondering about
493:56 - this like
493:57 - angle bracket and pipe and you might
494:00 - think that it is actually get pod
494:03 - configuration file specific but it's
494:04 - actually just yaml's multi-line syntax
494:07 - so if you investigate on how yaml
494:09 - multi-line works that tells you what you
494:12 - can do here and there's actually more
494:14 - you can do
494:15 - um but you know i'm not going to show it
494:17 - to you here because it's just start we
494:19 - start to get in the weeds and it's not
494:20 - use cases that are useful but just
494:22 - understand that if you learn a bit more
494:23 - about yaml you'll learn uh how you'll
494:25 - have more flexibility with the git pod
494:27 - configuration file okay
494:29 - [Music]
494:33 - hey this is andrew brown and this follow
494:35 - along i want to show you about
494:36 - multi-line strings within git pods so
494:39 - when you are creating tasks you can make
494:41 - your life a little bit easier so i'm
494:43 - going to do is go ahead and create a new
494:44 - repo here and we're going to call it get
494:46 - pod multi-line and i will go ahead and
494:49 - make this a private repository
494:51 - and so from here we will go ahead and
494:54 - launch a new git pod and so i have this
494:56 - tab open here called yaml
494:58 - hyphen multi-line info because i want
495:00 - you to understand that this multi-line
495:01 - syntax is not specific to git pod but it
495:04 - is part of um
495:07 - it is part of yaml which is the language
495:09 - we use
495:10 - and so here on the left hand side we
495:12 - have an example where it says replace
495:13 - new lines with spaces keep new lines so
495:16 - this is the difference between the
495:19 - closing angled bracket and using a pipe
495:22 - okay
495:23 - so you know when we have a pipe it says
495:25 - keep new lines so every new line that
495:27 - you use will stay there replace new
495:29 - lines with spaces meaning that it'll be
495:31 - treated as one block of text so let's go
495:34 - take a look and it looks like our
495:35 - environment is ready i'm going to go
495:37 - ahead and open up a new terminal as per
495:39 - usual and we're going to run the git pod
495:42 - init command to initialize a new project
495:46 - so
495:47 - there of course are a few ways we can do
495:49 - this so the first is the fact that we
495:51 - can just have and we're going to keep
495:53 - playing with echoes because echoes are
495:54 - easy
495:55 - but we could say like hello and then
495:58 - ampersand ampersand world
496:01 - so this is a linux thing the double
496:03 - ampersand and what it means is it says
496:05 - oh nice it actually shows up here so get
496:07 -  fig a shell came in oh you know
496:09 - what it's actually out of completing
496:10 - this but double ampersand is a way of
496:14 - um
496:15 - running more than one command at a time
496:17 - so they'll say okay i'm going to run
496:18 - this command and as long as it doesn't
496:20 - fail as long as it doesn't exit go run
496:22 - the next command
496:24 - okay so that would be that one there
496:28 - and there's also uh the case of um and
496:31 - you know what i'm going to do these all
496:32 - under commands because i just want to
496:33 - make sure this runs every single time
496:35 - what i'm going to do is put command here
496:38 - for this one i'm going to do another one
496:39 - here where we're going to try to do a
496:41 - semicolon so this uh this is something
496:44 - you can do in again this is not specific
496:46 - to git pod or yaml but like when you're
496:48 - writing bash scripts
496:50 - you can do semi semicolon to say this is
496:52 - a the next command we want to run
496:55 - all right
496:56 - so we have this one where it should run
496:58 - both
496:59 - this one where it should run both and
497:01 - the next one should succeed and then
497:03 - here we will purposely introduce an
497:05 - error so maybe if i just do uh x like
497:08 - that which is not a real command it
497:10 - should fail and not run the second one
497:12 - all right and so this is multi
497:15 - these are multiple examples let's do one
497:17 - with a script so maybe we can load a
497:19 - script so we'll just say um
497:23 - hello world
497:25 - okay so this might be another way that
497:26 - we could do mult multi-line kind of
497:29 - scripting here so we'll just say hello
497:31 - world
497:32 - as a file we'll say sh for a bash script
497:36 - and then we'll do echo hello
497:40 - world i don't know that will print out
497:41 - to the screen but we'll see what happens
497:43 - there i'm sure it will still work
497:46 - and we'll just say sh we'll have to make
497:48 - that executable down below so i'm going
497:49 - to type in chamod u plus x
497:53 - hello world if you're wondering like
497:55 - what does that mean it means make this
497:56 - executable so that we can run it like
497:58 - that
497:59 - and so
498:00 - we have semicolon double ampersand
498:03 - double ampersand with a purposeful error
498:06 - and then we also can do
498:08 - uh this way so that is the
498:11 - angled bracket and so we are going to
498:13 - want to
498:16 - do hello here
498:18 - and then ampersand ampersand world
498:20 - because if we don't do that
498:22 - if we don't put the double ampersand
498:24 - when we're doing the double angle
498:25 - bracket what's going to happen is this
498:27 - is going to translate
498:28 - into this right and that would cause an
498:31 - error because it would think there's no
498:33 - you can't have a second and third
498:35 - argument think it's calling echo and
498:36 - these are arguments to echo that
498:37 - wouldn't work so that's where we need a
498:39 - double ampersand whereas if we do this
498:42 - okay
498:44 - we can do that and this is going to be
498:45 - the equivalent of basically doing this
498:47 - up here where it's like this is a line
498:49 - and that is a line of execution
498:51 - so i think this is everything that
498:53 - should work i'm not sure what kind of
498:55 - problems we're going to run into but i'm
498:56 - going to just close out the rest here
498:58 - and we'll go ahead and commit this to
499:00 - our repository here and the great thing
499:02 - is because these are all commands
499:05 - uh we can start these over and maybe it
499:06 - might be smart to give these names
499:08 - so i'm just going to go here and say
499:10 - name this will say semi semicolon
499:14 - okay we'll go to the next one here and
499:16 - this one's going to be
499:19 - double
499:20 - ampersand we'll go to the next one here
499:24 - and we'll say
499:26 - double maybe just double amp because
499:28 - it's getting too long here double amp
499:29 - fail
499:30 - i wonder if we could just do this
499:32 - you know
499:33 - i don't see why i can't be named that
499:35 - that might just be easier
499:37 - okay and this would just be double
499:38 - ampersand and then we'll do semicolon
499:40 - here
499:41 - and then this one will be
499:45 - bash script
499:49 - and you know i didn't do a shebang here
499:51 - i don't know if that's going to cause a
499:52 - problem i'm going to put a shebang in
499:53 - there just in case i'm going to say
499:54 - where is um
499:56 - sh or bash
499:58 - okay a shebang just means tell the
500:00 - script to run a particular way shebang
500:03 - is the
500:04 - is this thing so say run in the context
500:06 - of that so i'm just doing that just in
500:08 - case
500:10 - and so we will name it that
500:15 - and then here we will do this multi-line
500:20 - so you can say multi-line multi-command
500:22 - is what we're learning here and so these
500:23 - are all the variants that should be
500:25 - possible here
500:27 - and i'm hoping they all work the first
500:29 - time around here because that would be
500:30 - really nice but this is our file right
500:32 - so these are all the different kinds of
500:33 - cases you could do
500:35 - and so we'll go back over here and we're
500:37 - just going to go ahead and oops add
500:39 - these two files so we'll add that
500:42 - and i want to stage that as well we'll
500:44 - just say
500:45 - commit multi-line
500:51 - we'll go ahead and add that there
500:53 - all right and so now that's all
500:55 - committed and in order for this to
500:58 - execute we can terminate this
500:59 - environment or just stop and start it
501:01 - since we know how it works so we know
501:03 - command will run again so that's what
501:05 - i'm going to do i'm going to
501:06 - stop this environment
501:09 - and then we'll let that shut down and
501:10 - then we'll start it back up and
501:11 - hopefully they all just work first try
501:14 - i'm writing quite a bit so i'm not sure
501:15 - if i'm making any mistakes there
501:27 - okay so we're ready to go here it says i
501:29 - didn't uh commit a change maybe i didn't
501:31 - so if it doesn't run that's fine but i
501:33 - think that it will because the file is
501:35 - in there
501:53 - okay so looking here it looks like it
501:56 - didn't execute those so i guess the
501:57 - problem here is we're really going to
501:58 - just have to um make sure these are
502:00 - committed so let's say git push here
502:03 - okay and then we will stop it again
502:11 - see i'm surprised that i would have
502:12 - thought that it would have executed
502:14 - um even if it wasn't committed if it was
502:16 - just lingering changes but we'll see
502:19 - here we'll open it again we'll see if
502:20 - that's the case
502:29 - all right and
502:31 - did it work
502:34 - so it didn't do
502:36 - anything new
502:38 - so i'm kind of surprised
502:41 - i'm just double checking to see i don't
502:42 - have any syntax mistakes so i'm really
502:44 - surprised that stopping start didn't
502:46 - work in this case
502:48 - maybe it's because none of these uh
502:49 - these are initialized so probably if we
502:52 - had
502:53 - completely terminated and started it
502:55 - again and maybe starting stop it would
502:57 - do it again so i think that's what i'm
502:59 - going to do i'm going to just
503:01 - um because the thing is that when you
503:03 - stop and start it's it's
503:05 - redoing the state right so if those if
503:07 - those terminals don't exist it probably
503:09 - doesn't have anything to launch into i
503:11 - think that's just an edge case that um
503:12 - until now because i'm trying this now i
503:15 - didn't realize which is totally fine so
503:16 - we'll go ahead and close this tab we're
503:18 - going to just refresh here as a sanity
503:20 - check to make sure that stuff is in
503:21 - there we're going to go launch get pod
503:23 - again okay
503:30 - and this is the reason why it's not
503:32 - working unparsable get pod configuration
503:34 - yaml cannot be read block mapping entry
503:36 - a multi-line key may not be an implicit
503:39 - key
503:40 - so the problem is
503:42 - the problem is i have invalid yaml so if
503:45 - that's the case i need to have a way of
503:47 - validating my gamble so maybe we'll say
503:49 - like validate yaml
503:52 - vs code maybe there's like a plug-in
503:58 - so there's this um i kind of feel like
504:01 - this would already have it but let's go
504:02 - take a look and see if we can find it
504:04 - here
504:05 - like do we already have yaml installed
504:07 - like is this already installed see it's
504:08 - already installed
504:10 - and so i'm not sure
504:15 - there probably is like a validate right
504:18 - enable or disable this feature validate
504:20 - it seems like it should be validating it
504:24 - and um i already forgot what the error
504:26 - was
504:29 - so let me just take a look here
504:32 - i wonder if it's just the indentation
504:33 - here
504:37 - okay i'm just going to carefully look at
504:38 - this here
504:40 - for this we don't really need the name
504:41 - well i probably have the names i don't
504:42 - know these are messing it up so
504:46 - sometimes i'm using single sometimes
504:47 - using doubles
504:51 - i'm just going to do this here
504:55 - and so i think it was that indentation
504:57 - so what we'll do is we'll recommit this
504:59 - file here
505:02 - all right so
505:03 - fix get pod yaml file and that could
505:05 - have been the reason why it wasn't doing
505:07 - that but i still think that um those
505:09 - terminals aren't going to launch unless
505:10 - you um already have stuff open there so
505:13 - while that's going i'm just going to
505:14 - read here a little bit okay
505:16 - so here's validation detect whether the
505:17 - entire file valid is is is valid
505:21 - so like see here they have like hotkeys
505:23 - so that you know if you're making a
505:25 - mistake but like
505:27 - there's nothing there that was telling
505:28 - me that it was valid or not so
505:30 - yeah there's something going on there
505:32 - but uh oh maybe we'll just um we got to
505:35 - stop this workspace so what we'll do
505:37 - now this is saved we'll go back here
505:39 - we'll give this a refresh we'll make
505:41 - sure that our git pod yaml has been
505:42 - updated with the indentation we're going
505:44 - to launch this again we're going to see
505:45 - what error we get if we get any error at
505:47 - all
505:56 - it looks like we don't have any trouble
505:57 - this time so great so let's go take a
505:59 - look
505:59 - and see what our results are
506:03 - so the first one is our first task here
506:04 - where we're using the semicolon
506:07 - and it is saying here um hello world so
506:11 - we can use the semicolon works just as
506:12 - we expected it to then we have the
506:14 - double ampersand so again double
506:16 - ampersand means if this one fails the
506:18 - rest will not complete so that worked as
506:20 - well then we go here
506:22 - we'll notice that it failed on the first
506:24 - one and then it didn't continue on to
506:26 - the second one so that is really good
506:27 - that's what we expect
506:30 - and i guess like if we did the semicolon
506:31 - one i really didn't show that there i
506:33 - should have done this
506:34 - like fail
506:37 - and maybe we'll rerun it just so we can
506:39 - view that afterwards then we have the
506:40 - bash script so it's using the bash
506:42 - script that is over here so that is
506:44 - another way we could do it
506:45 - then we have the multi-line this way so
506:47 - that was valid so that worked out fine
506:50 - and then we have this one here so i just
506:52 - want to show you that if you take these
506:53 - two out this is going to fail
506:56 - okay so i'll just write fail and maybe
506:58 - we can just add it in as an extra one
506:59 - whoops
507:01 - so what we could do is go here
507:05 - i just want to show you if you do this
507:07 - one this one will definitely fail okay
507:11 - if we take that out like that
507:19 - it should and we'll go back up to our
507:21 - semi-colon one and this one should fail
507:23 - as well so
507:25 - we will give that a go one more time and
507:29 - um
507:30 - i'm going to terminate just just in case
507:32 - so we'll just say
507:33 - update gitpod.yaml file with more
507:36 - examples
507:38 - of multiline
507:41 - i don't care if it's over the length
507:42 - it's fine for me we'll sync those
507:44 - changes very important to sync
507:47 - we'll give it a moment to sync great
507:49 - we're going to close it again and we'll
507:51 - just look at those edge cases there just
507:52 - one more time okay
508:04 - and so it's just launching up here
508:07 - all right so we have a few edge cases
508:09 - let's go this one
508:10 - so this one said hello x command not
508:13 - found but notice that it executed world
508:15 - so it didn't stop on the first one so
508:16 - you go here look it stops on the first
508:18 - one but with a semicolon it won't so
508:20 - that's a consideration for you and then
508:22 - we did the multi bash one and it we have
508:25 - hello echo world so it didn't um
508:28 - it didn't crash but it treated like this
508:30 - was the entire string so you can kind of
508:32 - see you kind of got a wonky result so
508:34 - hopefully that shows you how multi-line
508:36 - works and there's obviously a lot of uh
508:39 - options for you there and we'll just
508:40 - close that off and we are done
508:42 - multi-line
508:43 - [Music]
508:48 - so let's talk about awaiting tasks
508:50 - within git pod configuration file so get
508:52 - tasks all executed in parallel so by
508:54 - default there is no guarantee
508:56 - of the order of execution of the overall
508:59 - tasks okay but there are a couple of
509:01 - ways we can force a guarantee of the
509:04 - execution order and the first way is
509:08 - when we want to wait for command
509:10 - and so
509:11 - get pod has a cli and they have two
509:13 - commands called sync await and sync done
509:16 - so here we have an example
509:19 - again it's a ruby on rails app um and so
509:22 - if we look through here let's just try
509:23 - to find where we see synco weight so
509:25 - we have this rails app that is starting
509:28 - up and then we have webpack and it says
509:30 - sync await for bundle okay
509:33 - so it's waiting for this command up here
509:35 - to finish because if bundle install is
509:37 - not done we should not run
509:39 - um this command here
509:41 - right and the same thing for redis and
509:43 - for sidekick until this command up here
509:46 - runs should it proceed
509:48 - but the way it knows that it's done is
509:49 - that you run this um sync done over here
509:54 - okay so
509:55 - just erasing all that stuff because i
509:56 - know it gets kind of messy but the idea
509:58 - is the idea is gonna stop and it's not
510:01 - going to proceed until this has been
510:03 - triggered okay and that goes for all the
510:05 - tasks and so that's a way that we can
510:07 - force
510:08 - uh the order of these tests now there's
510:10 - another way and this is where we want to
510:12 - wait for a port so this is where we use
510:14 - a weight port and it doesn't have like a
510:17 - a weight or like done port or thing like
510:20 - that but the idea is that let's say we
510:23 - have end-to-end testing that we want to
510:24 - implement and we want to run those tests
510:26 - but it has to have a running server on
510:28 - port 3000 so the idea is that it's not
510:31 - going to run mp on run tests until
510:33 - there's something running on that port
510:35 - and so when you start up npm run dev
510:38 - it's going to ask you hey do you want to
510:41 - open this port you're going to open that
510:43 - port it's going to see that it's running
510:45 - and then it's going to run your tests
510:46 - and so those are our two options there
510:48 - okay
510:49 - [Music]
510:54 - hey this is andrew brown and in this
510:55 - video we are going to take a look at um
510:59 - things where we can await for things
511:01 - okay so what we'll do is create a new a
511:04 - repository i'm going to call this one
511:05 - gitpod await since we can await a port
511:08 - or wait a command and so down below we
511:10 - will go to private and we will choose
511:12 - readme and we'll create this repository
511:15 - and we'll go ahead and launch this uh
511:18 - workspace we might pull up the
511:19 - documentation here so like a waiting
511:21 - command get pod here
511:24 - and so if we go over here
511:26 - i'm not sure if it'll show up under here
511:28 - because that's where these commands show
511:29 - up like a weight port and things like
511:30 - that
511:31 - so here we have gp await port 3000
511:33 - things like that
511:35 - so i'm not sure if they showed an
511:37 - example here
511:38 - um but we definitely saw one earlier
511:40 - when we were looking at form so if we
511:42 - just want to go back to form for a
511:43 - second
511:45 - which
511:46 - had an example of a command i believe or
511:48 - maybe it was a port
511:50 - i don't think it had command a
511:53 - which is not a big deal i have an
511:55 - example within the course here so we can
511:57 - down below this has a gp await port
512:00 - so not necessarily the other one but
512:02 - let's go over here
512:04 - and so something we can do we'll just go
512:06 - and open up our terminal as per usual
512:09 - we're going to type in gpnet to
512:10 - initialize a new task so we don't make
512:12 - any mistakes here
512:14 - and so
512:16 - what i'm thinking here is
512:18 - let's do a weight command and
512:22 - what is it called a wait
512:26 - uh sync await
512:28 - and sync done that's what we want to do
512:31 - apparently they have a real world
512:32 - example so let's take a look here
512:33 - actually i want to do a ruby on rails
512:35 - application
512:36 - so here's an example where they have a
512:38 - ruby on rails application and they're
512:40 - kind of waiting for that those kind of
512:41 - steps i don't know if they have like a
512:42 - quick start for this um probably would
512:44 - have been good if there was like a get
512:45 - pod example here but what we'll do is
512:47 - we'll just kind of make up our own
512:49 - example from this all right so what we
512:51 - want to do and i think ruby's installed
512:53 - here if i type in ruby v it is great so
512:56 - with ruby you have a thing called gem
512:58 - files
512:59 - okay and that's just a way of doing uh
513:01 - versioning
513:03 - and gem files are done via bundler so
513:05 - bundle generate gem file
513:08 - i'm not sure what the command is i
513:10 - usually just write it by hand and copy
513:11 - out code but i wanted just this kind of
513:13 - information
513:14 - so that's all actually all i wanted for
513:16 - the file i thought maybe like a
513:18 - generation command allow
513:20 - and so here what we can do is install
513:22 - some gems
513:23 - uh very popular gem would be something
513:24 - like pry that's for like debugging uh
513:27 - and we don't necessarily need to use it
513:28 - for anything it's just the fact that
513:29 - it's going to be here we're also going
513:31 - to need a now we don't need a docket
513:33 - ignore file it's totally fine so what
513:35 - i'm going to do is do a bundle install
513:38 - here oops
513:39 - bundle install and that's going to
513:41 - install our dependencies here then we're
513:43 - going to get a gem file so we can commit
513:45 - that to our repository
513:47 - but the idea is that
513:48 - i want something
513:51 - to wait on the gem file first
513:54 - so
513:56 - and i wish i kind of had an idea of some
513:58 - kind of
513:59 - gem that would have been useful for this
514:01 - case but
514:02 - actually you know what would be useful
514:04 - it would be sinatra so instead of doing
514:06 - pry i think we'll do sinatra
514:09 - sinatra sinatra is a micro framework for
514:12 - um web applications for ruby sinatra
514:15 - it's a really great way of learning how
514:16 - to work with web servers ruby not the
514:19 - singer but the singer is fine too
514:21 - and we'll go here and so this is the
514:23 - most simplest example of a sinatra
514:25 - application so if we go over here
514:28 - and we
514:30 - paste in our sinatra application into a
514:32 - new file here so just say
514:35 - server.rb
514:37 - we'll just paste on that code
514:40 - and so we'll need to put sinatra in here
514:42 - instead we don't need the pry and
514:44 - there's some way to start it up on a
514:45 - different port
514:47 - i haven't done this in a while so i'm
514:48 - not sure
514:49 - um
514:50 - [Music]
514:51 - documentation i thought this would have
514:53 - been like
514:55 - different port different port
514:58 - port support sports how do we change the
515:00 - port
515:03 - okay
515:04 - sinatra
515:05 - ruby port change
515:09 - okay so down below here set port so you
515:12 - can't you just set the port like that
515:14 - note that this is another way to bind
515:15 - the socket so configuration is what
515:17 - we're looking for
515:19 - um so
515:21 - here it is okay so here we can change
515:23 - the port
515:26 - and i'm going to set this port to
515:32 - stop pasting right now so we'll say set
515:35 - port 80
515:37 - 80.
515:40 - just going to double check to make sure
515:41 - that is correct
515:44 - the syntax there's a comma in between
515:47 - okay
515:50 - okay and so that is the port there
515:54 - and we have our gem installed which is
515:56 - great and so i'm going to actually have
515:57 - to do a bundle install again because i
515:59 - actually got rid of pry
516:01 - i'll give that a moment there to install
516:04 - and so what i want to do with this
516:06 - task here
516:08 - is
516:09 - i want to have one i mean like you
516:12 - wouldn't do this generally because you
516:14 - could do it all one command but i'm
516:15 - gonna do one where i install the
516:16 - dependencies
516:17 - so we'll say bundle here
516:21 - and then this one will be like um
516:25 - server run
516:31 - all right and so here what i'm going to
516:32 - do
516:34 - is init
516:36 - and i'm going to just say bundle install
516:41 - and then for this one down below
516:44 - instead of a net we're going to just do
516:46 - command
516:50 - and here we want to run sinatra so it
516:53 - has to run in the context of bundle exec
516:56 - because that's how it knows it's going
516:58 - to run
517:00 - that there and we'll do server.rb
517:02 - and so this one we want this to be open
517:04 - on port 8080
517:08 - all right
517:09 - and
517:11 - that looks fine i think i might want it
517:14 - to
517:15 - also open
517:16 - as well so
517:17 - let's go over here we saw this in forum
517:19 - earlier which i thought was really cool
517:21 - i didn't know that you could use it this
517:23 - way so i kind of want to give that a go
517:25 - here
517:28 - and we'll just say command
517:32 - and so the idea here is i want this to
517:37 - open this on port
517:40 - 8080
517:42 - um
517:45 - i'm just trying to think if there's
517:46 - anything else i need to do because this
517:48 - isn't going to this server is not going
517:49 - to go to that url so i might have to
517:53 - also do
517:55 - this
517:57 - which is i need like a forward slash
517:59 - here i'm not sure how i would i would
518:00 - how i would join that
518:05 - so i'm not sure let me see here i wonder
518:07 - if i can do this
518:09 - what's this do
518:11 - okay but can i do
518:12 - this
518:16 - i'm not sure if we can just do that like
518:18 - that
518:27 - so just to make our lives a little bit
518:28 - easier what i'm going to do is go over
518:30 - to the server here and just change it to
518:34 - frank says here
518:36 - because that'll just be a lot easier for
518:37 - our example
518:39 - and
518:40 - so we have the port open it's in preview
518:42 - this one's going to launch it so just
518:44 - open it up
518:50 - open preview here
518:53 - and i'll just put this on the same line
518:54 - here we don't have any issues there and
518:56 - so i think this is what we want um but
518:58 - the problem is is that there's no
518:59 - guarantee that the bundle install is
519:01 - going to happen
519:02 - before the server runs and so let's just
519:04 - go even though i know this is going to
519:06 - break i want to go ahead and add all
519:08 - these files here
519:10 - okay
519:12 - and just say like init file
519:16 - and i'm just gonna double check to make
519:17 - sure that actually serves something this
519:19 - is gonna serve text which is fine and so
519:20 - what we'll do is commit all that
519:23 - sync the changes
519:40 - and while we're waiting on that what
519:41 - we'll do is go ahead and close this tab
519:43 - here and we'll go ahead and relaunch and
519:46 - we'll see what happens
520:02 - all right so here we are and so let's
520:04 - just see what has happened here
520:06 - um so we go to bundle install it did the
520:08 - bundle install which worked out great
520:10 - and notice here it says bundle install
520:12 - to install is missing gems so could not
520:15 - find sinatra 2.10 stuff like that so
520:17 - it's possible that this ran
520:20 - after this so this might have executed
520:22 - first because this is a very lightweight
520:24 - it would take two seconds to run and
520:26 - this would take a little bit more time
520:27 - to install so i just wonder if we were
520:29 - to go back and execute this command
520:30 - would it work so it is working so that
520:32 - is where this sync awaits going to be
520:34 - very useful for us this didn't open up
520:37 - for us here unable to connect to the vs
520:38 - code server error in the request
520:41 - i think this is also because the port
520:42 - wasn't ready
520:44 - all right so what we're going to do here
520:46 - is we are going to go back to our get
520:49 - pod file here
520:51 - and we're going to use this sync await
520:52 - thing
520:54 - so here
520:55 - um
520:57 - and we probably use port as well but um
521:00 - it's gp sync await
521:02 - so what we'll do is say gpsync await
521:07 - and for this we want this to wait for
521:10 - the bundle so i'll go here put this on a
521:12 - new line
521:16 - and we'll paste that in on there so that
521:18 - will just cause it to block
521:22 - and the way we decide that it is done is
521:24 - we would go up here to the init
521:28 - oh by the way we need to oops
521:31 - i have i put the caps key on by accident
521:34 - um
521:35 - but we will need to make this multi-line
521:36 - and then we'll have sync
521:39 - done and we'll just say bundle
521:41 - or
521:42 - maybe like bundle
521:44 - this would be bundle
521:47 - to be specific we should say bundle
521:48 - install so it's just waiting for this to
521:51 - finish first before it does that and so
521:53 - this should kind of resolve our issue at
521:55 - least one of our issues so we'll go back
521:57 - here we'll add this here assuming i
521:59 - wrote this all right we don't know until
522:00 - we do it so
522:01 - add sync
522:03 - await and sync done
522:06 - and we'll go ahead and save that there
522:09 - we'll go back over here
522:11 - and
522:12 - um we will sync those changes we'll say
522:15 - okay
522:19 - and what i will do here
522:22 - now that i've synced the changes we'll
522:24 - just go ahead and close that tab and
522:25 - reopen and see what happens there
522:28 - because we do have an init there so if
522:29 - we were to stop and start we wouldn't
522:31 - get exactly what we want
522:41 - all right so it's starting back up here
522:43 - so let's go see it actually all worked
522:45 - which is great but we go over here to
522:46 - bundle saw that worked and then that
522:48 - executed and this happened to work
522:51 - okay but if we keep on running this
522:52 - there's probably a chance that this
522:54 - might not
522:55 - work because
522:56 - the port isn't ready
522:58 - so i was kind of hoping that this would
523:00 - fail
523:01 - um and i think the only way we could
523:03 - make this fail probably is if we just
523:05 - put it in a sleep here
523:07 - so what i'll do and i think sleep is for
523:09 - every single second is i'm going to just
523:11 - write sleep
523:13 - and put 10 seconds okay and so that
523:16 - should sleep long enough that we should
523:17 - see this fail
523:18 - so we'll go back here we'll add it so
523:21 - sleep a while
523:24 - i wanted to say like hey this port isn't
523:25 - ready what are you doing you know
523:29 - so go back here
523:31 - and then from there we'll go back close
523:32 - that tab we'll open that up again
523:37 - and we'll give it a moment and we'll
523:38 - spin up here in a bit
523:49 - great so
523:51 - now that we are here um let's go take a
523:53 - look and see what's happened and it
523:54 - still worked
523:57 - so it's it's still executing well
524:00 - actually down below here it says unable
524:01 - to connect to vs code server so i'm
524:03 - wondering if it's because we have um
524:07 - this option here
524:10 - right so
524:12 - it's opening
524:14 - because when the port became available
524:15 - it opened
524:17 - so i'm thinking i'm just going to go
524:19 - ahead and remove this
524:23 - let me take out the on open because this
524:24 - would notify by default
524:27 - so what if we put this to ignore say
524:29 - ignore here
524:31 - again i just want to see that this
524:32 - doesn't open and then we have this here
524:34 - and then if if we take if we put in the
524:36 - portaweight it will work properly
524:38 - so say uh one more time
524:43 - i mean clearly this is airing out so
524:45 - that's no good but it's still open and
524:47 - that just because git pod is smart
524:49 - so we'll go there and we'll go ahead and
524:51 - close that we're going to reopen our git
524:53 - pod here
525:08 - and so that errors out which is totally
525:11 - fine that's what we kind of expect to
525:12 - happen and now it's not opening up the
525:14 - preview so now i think we have our
525:15 - opportunity
525:17 - to
525:18 - put in the um that other command which
525:20 - is the port await
525:22 - so what i'm going to do is go grab this
525:23 - command here
525:25 - and we're going to go down below
525:28 - and we're going to expand our command
525:31 - here whoops
525:36 - and so my expectation is that it's not
525:38 - going to run this command until the port
525:40 - is ready see i don't know if we need
525:41 - like a double ampersand but i'm pretty
525:43 - sure this waits until the port is open
525:45 - so i'm going to say port 8080 here
525:47 - and what we'll do here is go back
525:50 - and we'll add this here and we'll say
525:52 - update gitpod yaml
525:56 - and we'll save that and we'll save those
525:58 - changes
526:02 - and um what we'll do is we'll go close
526:05 - this tab again and we'll launch it one
526:06 - more time
526:23 - great and so what we're going to see
526:25 - here
526:26 - is this is a waiting till the port is
526:28 - open remember this is sleeping right and
526:29 - look now it works so we made a great
526:31 - example where we're using both a weight
526:33 - port and a weight sink so there you go
526:35 - so that's that's what you'd use with
526:37 - those things and we're all done here so
526:38 - we can go ahead and just close your tabs
526:40 - and that's it
526:41 - [Music]
526:46 - so to understand git pod ports we need
526:48 - to take a look at computer networking
526:50 - ports
526:51 - so ports and and that's the short way of
526:53 - saying just ports acts as a separate
526:55 - channel for communication protocol so
526:57 - you have more than one program using the
526:59 - same protocol and tcp the protocol we
527:02 - use for websites and web server has 65
527:05 - 535 ports and some ports are designated
527:08 - for specific types of communication and
527:10 - others are undesignated where we can use
527:12 - them for whatever we want so for
527:14 - designated uh ports ones we absolutely
527:17 - should know is port 80 so hcp
527:20 - 443 for https
527:22 - 22 for ssh and the way these are used is
527:26 - the port number is uh will follow an ip
527:28 - address or domain name separated by
527:30 - colon so here's an ip address and we
527:32 - have port 8080 and so we have the ip
527:35 - address here and the port number there
527:37 - in a web browser you can write the port
527:39 - number in the address but generally you
527:41 - won't see it for websites because it
527:44 - just shows up by default so if you're
527:46 - doing http colon
527:48 - slash it already knows that it's port 80
527:50 - and if you're doing https colon slash it
527:52 - already knows that it's port 443 so
527:54 - that's why you don't see them there
527:56 - usually so there are many undesignated
527:59 - ports which can be used to view or serve
528:01 - web applications for the purpose of
528:03 - development uh and the popular
528:05 - development proto uh ports being three
528:07 - thousand three thousand and one eighty
528:09 - eighty eight thousand eighty eighty one
528:13 - and so three thousand and three thousand
528:15 - and one is very popular to break ruby on
528:16 - rails why is there 3000 ones just
528:18 - because like if you're using 3000 you
528:20 - need a second server you have that
528:21 - that's why you see it with 8081 or 8001
528:24 - as well 8080 8000 are very popular in
528:27 - the uh
528:28 - with javascript uh web servers but these
528:31 - are the ones you normally see and
528:32 - probably what you should use because
528:34 - there's a lot of synergies with a lot of
528:35 - technology that are already defaulting
528:37 - to these ones so when we're talking
528:40 - about ports in common language it's
528:42 - common to say things like i'm listening
528:44 - on port you know or i'm serving on port
528:49 - what have you right so just understand
528:51 - when you're saying listening or serve
528:52 - it's pretty much the same thing
528:54 - um
528:55 - and same thing with like opening port or
528:56 - exposing port means the same thing just
528:58 - so you understand uh you know those
529:00 - there okay
529:01 - [Music]
529:05 - so now that we know what computer
529:07 - networking ports are let's take a look
529:08 - at git pod ports so in order to view
529:10 - websites or web applications in a web
529:12 - browser running a workspace tcp ports
529:15 - need to be accessible and goodpod allows
529:17 - you to open ports so you can uh set
529:20 - ports in your dot get pod yaml file your
529:23 - gitpod configuration file so there we
529:25 - are opening up port 8080 in that example
529:28 - uh and so then once your workspace
529:30 - launches you can go to the remote
529:31 - explorer and you remember what the
529:32 - remote explorer is because i definitely
529:34 - will ask that as an exam question but
529:36 - once
529:37 - um the port is uh uh open then you can
529:39 - go over the remote explorer you can see
529:41 - that there's a port there so here we see
529:42 - port 3000 it's open it's private there's
529:45 - like a button to open in the browser or
529:47 - inline in the code editor um but if you
529:50 - don't define ports ahead of time and
529:52 - that's totally fine if you don't if you
529:54 - start up a service on a new undefined
529:56 - port gitpod will prompt you if you want
529:58 - to open the port and so you just press
530:01 - the button and we'll open the port and
530:03 - even after that it'll probably ask if
530:04 - you want to launch it in the browser
530:06 - um but yeah that's all there really is
530:08 - to it gitpod cannot use ports that are
530:11 - lower than uh 1.024 so common ports like
530:15 - port 80 443 ssh you cannot open those
530:19 - ports and really you shouldn't be
530:20 - because this is a developer environment
530:22 - and port 80 443 or for serving
530:24 - production
530:26 - websites or web servers and i just want
530:28 - to reiterate you don't have to define
530:30 - ports ahead of time you can open new
530:32 - ports on the fly okay
530:34 - [Music]
530:38 - so let's take a look at some of the
530:40 - configuration options when we are
530:41 - defining ports so we can do a port range
530:44 - so three thousand two eight nine nine is
530:47 - uh nine this example here of course we
530:49 - can have a single value as we saw in the
530:51 - previous video
530:53 - we have opening behavior so this is
530:54 - where we define on open and has four
530:56 - possible values so notify which is the
530:59 - default and when it says show the
531:00 - notification it's that notification that
531:02 - says hey how how do you want to handle
531:04 - this port do you want to
531:06 - open it in a preview do you want to
531:08 - expose the port like what do you want to
531:10 - do with it so we have the open preview
531:12 - option so open the preview on the right
531:14 - open browser so open in a browser tab or
531:17 - ignore so don't do anything
531:19 - then you have port visibility and so by
531:21 - default it's going to be set as private
531:23 - and so we have private which is the
531:24 - default this only allows users with
531:26 - workspace access to access the port the
531:29 - reason i highlighted that was actually
531:30 - for my own notes because i don't know
531:32 - exactly what that means but we'll find
531:34 - out in the follow along because i want
531:35 - to know like does it mean that only i
531:38 - can use it or if we like if we have a
531:41 - team and somebody's within my team only
531:44 - team members can access it so that's
531:45 - something we'll have to explore then
531:47 - there's public so allow any everyone
531:49 - with the port url to access the port so
531:51 - there's an example of visibility so
531:53 - there you go
531:54 - [Music]
531:58 - hey this is andrew brown and we are
532:00 - taking a look at port forwarding so what
532:02 - is port forwarding or also known as port
532:04 - mapping is an application of network
532:05 - address translation a nat that redirects
532:08 - a communication request from one address
532:10 - and port number combination to another
532:13 - and that's basically the wikipedia
532:14 - description but uh to simply put
532:18 - port forwarding sends traffic from one
532:20 - port to another essentially acting as a
532:22 - port alias so using the getpodcli
532:25 - command forward port you can send
532:26 - traffic from one port to another so
532:28 - here's an example of me uh forwarding
532:31 - the port at 80 80 to 80 oh sorry it says
532:35 - forwarding 80 81 to 8080 okay and so
532:39 - some programs will start on a hardcore
532:42 - coded port and will not let you change
532:44 - the port so port forwarding is a way to
532:46 - work around this issue so that's the
532:48 - major advantage of port forwarding
532:50 - [Music]
532:55 - hey this is andrew brown and welcome to
532:57 - another follow along this time we're
532:58 - going to be looking at all about git pod
533:00 - ports of course we did cover a weight
533:03 - port but we might just cover it again in
533:04 - here just because we are going more
533:06 - thorough into the
533:08 - port section of the core so i'll go
533:09 - ahead and type in git pod ports i'm
533:11 - going to add a readme it could be
533:13 - private and what we'll do is go ahead
533:14 - and type in git pod ports here
533:17 - and just pull up the documentation just
533:19 - in case we need it so we can set ports
533:21 - within a range we can set a single port
533:24 - things like that and then we have a
533:25 - bunch of different kinds of um
533:27 - things that can happen like the modes
533:29 - that should happen
533:31 - so what we're going to do here is launch
533:34 - this new get pod
533:36 - okay
533:37 - and we'll just give it a moment here but
533:39 - you know just looking over the on open
533:41 - ports you have notified so show the
533:43 - notification by default open preview
533:45 - open in the preview on the right open
533:48 - browser so open in the browser tab
533:50 - ignore don't do anything so we'll
533:52 - explore um because this is part of ports
533:55 - and so i guess we can cover all these
533:57 - options here for fun
533:59 - and so as always we'll go up to our
534:01 - hamburger menu we're going to go over to
534:03 - terminal new terminal and we'll go ahead
534:05 - and type in gp init and from here
534:10 - we're going to need some kind of server
534:11 - so i'm going to go server.rb
534:13 - then we're going to go grab sinatra
534:14 - again so we'll say sinatra ruby
534:20 - and from here um i'm going to go grab
534:23 - this code right on the page that makes
534:25 - it really easy
534:28 - and we'll say allow
534:30 - and then we're going to need a gem file
534:31 - so just say gem
534:34 - file and i'm just going to say like a
534:37 - knit gem file
534:40 - bundler because oh there is a bundle in
534:41 - it
534:43 - generates a gem file well let's let's do
534:45 - that because i'm getting tired of
534:47 - looking up the first command here
534:49 - so we'll say um bundler init
534:54 - all right and so that's where we get
534:55 - that uh that front line that we wanted
534:57 - there
534:58 - okay and this is useful too to have the
535:00 - github thing here so but we'll just go
535:02 - here and say gem
535:04 - uh sinatra sinatra
535:08 - okay we'll do a bundle install whoops
535:11 - bundle install i like doing bi it's my
535:13 - shorthand for that and so now we have a
535:15 - very simple web server i'm going to
535:17 - modify this slightly because i want it
535:18 - to take in environment variables
535:21 - so i'm going to just go here and
535:24 - make a double quotation this is
535:25 - interpolation in ruby and so i can just
535:27 - do env square braces and we'll say
535:30 - message
535:34 - and we'll say says
535:40 - oops
535:42 - i'm able to say port
535:44 - so say frank says
535:46 - from port
535:52 - okay and so that way we'll be able to
535:53 - pass that along and kind of set that we
535:55 - also need to set our
535:57 - port here so we'll say
535:59 - port colon and then we'll just do env
536:01 - for passing along a environment variable
536:05 - um we should probably make this a little
536:06 - bit more flexible just say app port
536:08 - because i don't know if there's like any
536:09 - underlying port so let's just do that
536:11 - just in case
536:14 - and from there we have a simple
536:16 - application and so that should work no
536:18 - problem and the way we can test that is
536:19 - by typing bundle exec actually before
536:21 - that we have to set our port so we'll
536:23 - just say
536:24 - port
536:25 - 8080
536:26 - and i will just put a space here or
536:29 - maybe double ampersand
536:31 - and we'll say
536:33 - uh
536:35 - ruby server
536:38 - and so that started up on port 8080 just
536:40 - double checking here to make sure that
536:41 - it's not just the default port here
536:44 - so that's starting up on port 8081
536:47 - i don't think it's oh you know what it's
536:48 - because i'm not setting app
536:50 - port like this
536:52 - okay still not taking the right port so
536:54 - i'll take out the double ampersand
536:57 - and there we go so sometimes you got to
536:59 - play with it a little bit so that is how
537:00 - we're going to be doing that so go over
537:02 - to our git pod gamle file and we don't
537:04 - know which port we want to have open as
537:06 - of yet
537:09 - well actually we might want to set them
537:10 - all there
537:11 - um so what i'm going to do is i'm going
537:13 - to go up here and we're going to do a
537:15 - bunch of different ports
537:18 - because i want one for each of the types
537:20 - of things we can open here so we have
537:22 - notify open preview open browser ignore
537:25 - i'm gonna go just grab these for here so
537:27 - we can save ourselves some time
537:28 - we'll drop those in there and from here
537:32 - we'll have port
537:34 - 8000
537:36 - port 8001 port 8002
537:40 - port 8003
537:43 - and we'll have this on notify which is
537:45 - the defaults
537:46 - we'll have this one on preview
537:50 - open preview then we'll have this one on
537:52 - open browser
537:54 - and then we'll have this one on ignore
537:59 - okay
538:01 - so there we have all the the cases there
538:04 - and then up here we're just going to
538:05 - have our ports we'll say 8 000
538:08 - and our command we do need to initialize
538:11 - this stuff
538:13 - so
538:14 - what we'll do because we need to have a
538:16 - i think that's going to do bundle
538:18 - install so up here we'll just do bundle
538:19 - install
538:23 - and we'll do an init here and we did
538:24 - learn this um a moment ago where we had
538:27 - the bundle install and then we
538:30 - oops bundle install and then we had our
538:34 - gp
538:35 - sync await
538:37 - and we'll just say bundle install here
538:39 - because we these are all going to have
538:40 - to wait for that stuff to be installed
538:42 - for them to work
538:43 - and we'll take out the command here and
538:45 - then we'll do our app port so we'll say
538:47 - app
538:48 - port equals 8000
538:51 - bundle exec
538:55 - rubyserver.rb
539:01 - and from here we also want to wait so
539:03 - let's say gpsync
539:05 - done
539:06 - i guess this would actually be the wait
539:08 - so that one would be the done
539:10 - so we go down up here or over there
539:14 - and so that's going to be on port 8000
539:16 - this one's going to be on port 8001
539:21 - this one's going to be on port 8002
539:28 - and this one's going to be on port 8003
539:32 - all right
539:33 - so we have a bunch of different uh ports
539:35 - there so that'll give us a four and they
539:37 - all are going to launch in different
539:39 - ways
539:40 - so that looks pretty good hopefully i
539:41 - didn't make any mistakes because we did
539:43 - write quite a bit here
539:45 - um but i think that's okay so what we'll
539:48 - do is go over here
539:50 - and we'll commit all these files
540:00 - and they look like they're all committed
540:01 - so we'll say um set up a bunch of
540:03 - servers
540:06 - and we'll commit that sync the changes
540:09 - we'll say okay
540:14 - and then from there what we can do is go
540:16 - ahead
540:18 - and we have a get get uh yeah there's a
540:20 - lock file there so that's great so we'll
540:21 - close that off and we'll go ahead and
540:23 - reopen that okay
540:35 - all right so there is should be a string
540:37 - uh
540:38 - so i really wish i knew how to validate
540:40 - the yaml beforehand
540:43 - so like i don't know what vs code
540:45 - extension i need there but like maybe
540:46 - there's like yaml validate
540:49 - i can see like in this linter here maybe
540:52 - i get this nice ad on the right-hand
540:54 - side so i'll reopen that up and we'll
540:55 - just see if we can spot the problem
540:58 - let's say that's like my only
541:00 - frustration it's probably there is a
541:01 - tool involved and i just don't know you
541:02 - know
541:05 - so i say copy and then i'll paste this
541:07 - in here and we will then say go
541:10 - says it's valid yaml yaml so there's
541:12 - something that
541:13 - it doesn't like
541:15 - so we'll have to just closely look at
541:17 - this here so we have a net that looks
541:19 - fine we have the command here
541:22 - that looks fine
541:28 - so i'm not sure what it doesn't like
541:33 - so we'll do a sanity check and we'll
541:35 - just kind of simplify it so i'll just um
541:38 - go here and comment this out for the
541:40 - time being
541:41 - and same with here
541:45 - okay so
541:46 - oh you know you know what it is
541:49 - it's probably um this because it starts
541:51 - with a number
541:53 - so i'm just going to do this and maybe
541:54 - that will fix our problem because i
541:56 - think it's it's like equating as a
541:57 - number as opposed to a string
541:59 - and we probably just wrap it as a string
542:01 - whoops maybe not those
542:03 - but that's probably our problem so we
542:04 - will try this again
542:06 - it's good to know
542:08 - fix names of tasks
542:13 - we'll sync those changes
542:16 - we'll say okay
542:21 - and from there what we'll do is close
542:23 - this tab we'll go back here we'll say
542:24 - get pod
542:41 - and so we'll wait here so frank is open
542:43 - up 4801 so this looks like it's working
542:45 - correctly let's go ahead and close some
542:46 - of those tabs so here's a thousand
542:49 - here's a thousand one two three and so
542:52 - one is opened up in here
542:54 - um but like the other ones didn't open
542:56 - up so maybe you just can't have multiple
542:58 - ones it's like one or the other but like
543:00 - i would have thought that um
543:02 - if this was set here
543:05 - open browser it would just automatically
543:07 - open up a page maybe that's not the case
543:09 - but if we go over to the remote explorer
543:11 - here we just kind of hover over here it
543:14 - seems like we can open it in preview or
543:16 - this kind of stuff so i'm not really
543:17 - sure why that doesn't work as we think
543:18 - it does
543:20 - but it's not really a big deal and i
543:21 - don't even know if we ever saw that open
543:22 - as the browser like that before so
543:25 - anyway that kind of gives you an idea
543:27 - like this one probably prompted us and
543:28 - we didn't notice as we clicked through
543:29 - there but just kind of showing you how
543:31 - you could set them all let's now go
543:32 - switch this to a range so instead of
543:34 - doing this we can say port 8003
543:39 - and i'm just going to switch them all
543:40 - over to open browser i just want to see
543:42 - if they actually do open here and so
543:43 - this will allow us to do a port range
543:45 - okay so that should work no problem
543:50 - open up a port range
543:55 - we'll go ahead and commit that we'll
543:56 - sync those changes we'll say okay
544:02 - and by the way like i think down below
544:04 - here it actually shows you what ports
544:06 - are open so if you click this down below
544:07 - i know it's hard like look where my
544:08 - mouse goes all the way down here you can
544:11 - uh see the open ports but they're also
544:13 - going to be down here in the remote
544:14 - explorer and you can make it public or
544:17 - private and things like that over here
544:18 - these are all private right now
544:20 - um so what i'm going to do here is just
544:23 - close this tab
544:24 - relaunch this and then we're going to
544:26 - see make sure the range ports works of
544:27 - course it's going to work delicious dude
544:29 - anyway just to make sure
544:39 - and so there we go we have
544:42 - what went to those horse open
544:44 - which are good again browser didn't open
544:47 - so
544:48 - i don't know what the point of
544:50 - this is like if it doesn't open right
544:53 - away i don't understand but um or it
544:56 - could be you know what it probably is oh
545:00 - so it has been this entire time we just
545:02 - have to say always allow the pop-ups and
545:04 - redirect okay
545:07 - and so now probably if we were to
545:08 - relaunch this they would all open up so
545:10 - that's what i'm going to do i'm just
545:11 - going to do this one more time
545:15 - i'm going to make a new workspace
545:16 - because we need to run the init again
545:19 - actually probably don't we probably
545:21 - could have done a start it would have
545:22 - worked because they're all commands but
545:23 - that's fine
545:28 - and so
545:30 - okay so basically because it changes the
545:32 - url every time it keeps on blocking at a
545:35 - so i think like what you'd have to do is
545:37 - probably have like a wild star in here
545:41 - so let me just take a look okay
545:45 - so i think what we could do is we could
545:47 - probably
545:50 - go up here
545:53 - and say add and then do wild card
545:57 - and then do that
546:00 - should allow us to do wild card
546:02 - maybe like this
546:12 - there we go we'll hit hit add
546:14 - and now i'm going to do i'm going to do
546:15 - it one more time and i think we can just
546:17 - i'm going to just kill it even though i
546:18 - probably can stop stop it uh stop and
546:20 - start it again
546:21 - um and i'm just going to say new
546:23 - workspace
546:43 - and so now they all open so that's
546:45 - probably a good thing that we did there
546:46 - for chrome and i guess i just never
546:48 - noticed that and that kind of makes
546:49 - sense now
546:50 - but anyway so that is port ranges
546:53 - um
546:55 - you know there's a few other things we
546:56 - probably can do let's just take a look
546:57 - here so we did that there's private and
547:00 - public i guess we never set that for the
547:02 - ports
547:03 - um and so we could explore that as well
547:06 - i would probably have to go get another
547:08 - account set up here to show you
547:10 - um but maybe we can just will this down
547:12 - to two so i'm gonna just take this down
547:14 - back to two
547:16 - and we can say
547:19 - um private
547:21 - but i guess it'd be visibility
547:22 - visibility
547:25 - which would be private
547:28 - public
547:30 - and i'm just going to get rid of that
547:32 - port there we'll see go back to port one
547:34 - and then this one will be private
547:37 - okay
547:39 - and so just looking at this here that
547:42 - should work no problem i'm going to go
547:44 - ahead and commit that so public and
547:45 - private now
547:50 - we'll go ahead and save that we'll save
547:52 - those changes we'll say okay
547:57 - and from there we'll go ahead and close
547:59 - that
548:01 - and we will
548:02 - reopen the git pod and as that's going
548:04 - i'm gonna have to open up another
548:05 - browser so i'm gonna go get firefox here
548:10 - so just give a second for firefox to
548:12 - load
548:13 - okay not now
548:16 - nope just let me browse please and so
548:19 - i'm just going to go off screen and log
548:20 - into my github so i have more than one
548:22 - github account and i have more than one
548:24 - git pod here so
548:25 - that will just take me a moment
548:27 - you can see these ones opened here
548:30 - and i'm just going to sign in off screen
548:31 - here and i'll see you back here in a
548:32 - second okay
548:34 - all right okay so i have um uh firefox
548:36 - open here on another github get pod uh
548:39 - picapod account and so what i want to do
548:41 - is see what i can share so if our
548:44 - servers are running they are here they
548:45 - both are
548:47 - one is public and one is private and so
548:49 - the one that is public let's go see if
548:51 - we can bring it over here
548:53 - so i'm gonna go ahead and paste that on
548:55 - in here
548:57 - so port 8000 works fine
549:00 - and then we'll look at port 8001
549:04 - and so i can't see port 8001 and so one
549:06 - thing that's interesting is that
549:09 - if
549:10 - you have private they suggest here that
549:13 - um only allow users with workspace
549:16 - access to access this port
549:19 - okay and so
549:21 - what does that mean does that mean if
549:23 - somebody is in the same project or does
549:25 - that mean if you're just sharing it with
549:26 - them so that's something we're going to
549:27 - have to find out
549:28 - so what i'm going to do in my gitpod is
549:30 - i can actually create projects
549:33 - here
549:34 - and so i can create a new project
549:38 - i don't list i don't think this will
549:40 - allow for collaboration so i might have
549:41 - to go to this one so
549:42 - my new project here
549:46 - and then from here i need to add a
549:48 - member so i'll go here and give them the
549:51 - invitation link which is on the other
549:52 - side here
549:53 - and then they're going to have to go
549:54 - accept that
549:56 - so i'm over here now
549:59 - and did i accept it i didn't see like a
550:02 - step to accept let's go back here and
550:04 - refresh
550:06 - uh
550:07 - it didn't
550:11 - oh looks like in my firefox i'm in this
550:13 - account hmm
550:17 - you know what i think it's because i'm
550:18 - logged in the same account so what i'm
550:19 - going to do is just log out here
550:22 - because my github is another account
550:24 - here and so what i'll have to do is just
550:26 - kind of like launch any kind of
550:27 - repository here this will take two
550:29 - seconds
550:34 - and i'm just accepting the
550:35 - authentication there
550:41 - okay and so now i'm going to try to
550:42 - invite uh myself again
550:45 - so we'll copy that
550:48 - and we're just going to paste that there
550:50 - and so i i just instantly clicked it and
550:52 - i was added so there's no like do you
550:54 - want to be a member which i think maybe
550:56 - they need that but that's fine it's not
550:58 - a big deal
551:00 - and so we'll go back over here
551:02 - and so now if i just refresh here
551:05 - i want to find out is this one do we saw
551:07 - this pod running yes we do
551:09 - so if we go back over here in this other
551:10 - screen here
551:11 - this is i think the private one the 8001
551:13 - does that work
551:15 - no it does not and that's totally fine
551:16 - so what i want to do now is i just want
551:18 - to go ahead and create a new workspace
551:21 - or sorry project
551:22 - and we'll say um
551:26 - or did we already have a project here oh
551:27 - it's right here new project
551:30 - oh sorry this is a team i called it my
551:32 - new project i should have called this um
551:36 - my new team so let me go ahead and
551:38 - delete that team because that's just too
551:39 - confusing
551:41 - and we'll go here i'll say uh my team
551:48 - my
551:49 - i guess maybe these are unique names i
551:51 - didn't know that so my
551:53 - team exam pro co
552:00 - okay there's no way that that name
552:01 - exists and so we'll go back over here
552:03 - i'm going to invite members and that
552:05 - kind of makes sense why they might have
552:06 - like the block lists which i didn't know
552:08 - about before
552:09 - um and so now i'm a member of that again
552:11 - so we'll go here and we'll give this a
552:13 - refresh
552:14 - so i'm a member we'll go back over to
552:16 - projects we'll make a new project here i
552:18 - don't know why there's this e1777 but i
552:22 - want to choose
552:24 - any repository here the one i want
552:26 - actually it's not any repository i want
552:27 - this one here
552:29 - so let's go back over here and let's see
552:30 - why this isn't showing up search
552:32 - repositories we'll say git pod
552:36 - it's only showing
552:38 - oh you know why it's set on gitlab so
552:40 - we'll switch back
552:41 - and we'll say github
552:44 - and we'll authorize
552:48 - and we'll authorize all
552:51 - so now we can go and
552:54 - bring in the reaper we want which is
552:57 - the ports repo
553:00 - and so if we go over to
553:02 - the workspaces here there are no
553:04 - workspaces so now what i want to do is
553:06 - just close this off
553:07 - and i want to launch
553:09 - this
553:10 - under here okay and if you do launch it
553:13 - from here i'm pretty sure it's going to
553:14 - open up in this workspace but just to be
553:15 - sure i'm going to go do it from here
553:19 - so yeah it is in the same workspace but
553:20 - i'm going to launch a new one anyway
553:21 - because i want to see again if i share
553:23 - it with this account that's a member can
553:26 - they see it
553:27 - all right
553:29 - so we'll go here and so 8001 is the one
553:31 - that is the private one and so we'll
553:33 - make a new tab here we're going to paste
553:35 - that on in there and so they still can't
553:36 - see it so just because you're a member
553:39 - doesn't necessarily mean you can see it
553:40 - so now what i'm thinking is that it has
553:42 - to do with like sharing your screen
553:45 - so what we'll do is we'll go over here
553:49 - and we'll go to the share
553:50 - and we'll say share
553:53 - and now we're going to copy that to our
553:55 - clipboard
553:56 - and we're going to go ahead and
553:59 - paste this on in here
554:02 - okay
554:03 - and so now i'm sharing so i have access
554:05 - over here i'm going to refresh see if i
554:07 - have access here
554:11 - i don't which is fine but what i will do
554:14 - is go to the left-hand side here because
554:16 - these servers should be running
554:21 - remote explorer
554:22 - this one says it's private so i'm going
554:24 - to open this in the browser
554:29 - oh uh we'll say
554:32 - is preventing this to open we'll go to
554:34 - options here
554:37 - we'll say always allow
554:38 - whoops and so now it's showing up i
554:41 - don't know if there's like a difference
554:42 - between this one and that one if we go
554:43 - back over to
554:44 - [Music]
554:46 - uh the one here
554:49 - we open that in the browser
554:52 - let me go back over here
554:55 - okay so there is a bit of like
554:56 - finickiness with this but you can see
554:59 - that you know if you are sharing you
555:00 - have access but just because they're a
555:02 - member of that workspace doesn't
555:03 - necessarily mean you can share that
555:04 - private one so that's just kind of one
555:06 - of those uh harder edge cases that i
555:08 - kind of want to show you
555:10 - um so that you just know what's going on
555:12 - there
555:12 - uh so now that we've figured out how to
555:14 - do um
555:16 - a lot of stuff let's do port forwarding
555:18 - that'll be the last one here so imagine
555:20 - you have a project where you have a
555:22 - whoops
555:24 - that's saying this this doesn't exist
555:25 - oops
555:27 - go ahead here and go back here so
555:28 - imagine you have a project where you
555:30 - don't have control of the actual
555:33 - ip address and it's not showing me
555:35 - anything here i'm gonna have to relaunch
555:36 - this it's being funny
555:38 - okay
555:40 - and yes i want to just open the existing
555:42 - workspace here
555:45 - and so
555:48 - that's great and so um it could be a
555:51 - case i'm just going to stop the server
555:52 - here for a moment
555:54 - where
555:55 - you need to
555:58 - like we're not going to have this port
555:59 - so if we don't specify any port it's
556:01 - just going to start on port
556:03 - 8080 right so if i go bundle exec here
556:08 - and actually i think we should probably
556:09 - do this in our code
556:11 - i'm just going to make a third one here
556:12 - that's to a fixed port so i think it
556:14 - starts on 8080. so we'll go here
556:17 - and i'm just going to say default
556:19 - i'm not going to specify any port
556:25 - and then we'll go ahead and commit this
556:29 - and we'll see if we can use the port
556:30 - forwarding okay
556:32 - so sync those changes we'll say okay
556:35 - we'll wait a moment i'm going to go
556:36 - close that tab we'll relaunch that
556:44 - i'm not sure why it's doing a pre-build
556:47 - because we don't have pre-builds turned
556:48 - on at least i don't remember turning
556:49 - them on
556:51 - but for fun we'll take a look here so if
556:52 - we go here to our project reports
556:58 - oh it is doing a pre-build okay
557:02 - so i guess as soon as we make a project
557:03 - it becomes a pre-built i for some reason
557:05 - i thought like pre-build you can turn it
557:07 - on and off
557:08 - and maybe you can but i don't see the
557:09 - option there so
557:11 - um the only problem with that is that if
557:13 - it does a bundle install no it should
557:15 - still work so that should be fine
557:19 - yep so it's doing the bundle install
557:21 - that's the pre-build
557:27 - and here down below you can say don't
557:28 - wait for pre-build i didn't know you
557:29 - could do that but we'll just give it a
557:30 - moment
557:43 - i'll just see you back here when this is
557:44 - done launching okay
557:46 - okay so i'm just like sitting here
557:47 - waiting for this to finish but i think
557:48 - the thing is that it's already done
557:50 - because it exited out of here so i think
557:52 - if i just close that off and we go over
557:53 - here we can see the pre-build is ready
557:56 - and so now if i go and try to launch a
557:58 - workspace
557:59 - it should
558:00 - work so we'll go ahead and we'll just
558:02 - say new workspace and because that
558:04 - pre-build is there it should load really
558:06 - really fast
558:08 - but yeah i guess i was just waiting
558:09 - there for no reason
558:11 - and we'll just give it a moment
558:15 - and there we go so that was pretty fast
558:17 - um and so i'm expecting uh this one to
558:20 - go to the default one so if we go to
558:22 - this tab here
558:23 - we're going to notice that it's going to
558:24 - start on it's starting
558:30 - oh you know what because these are all
558:32 - waiting for the bundle install eh
558:35 - so none of them are going to finish
558:39 - okay
558:40 - so just to make our lives a bit easier
558:42 - because this section is not about
558:43 - teaching you about how to do pre-builds
558:46 - so what i'm going to do is i'm just
558:48 - going to go ahead and delete this
558:49 - project if it's possible so we'll go
558:51 - back up to the top here i'm just going
558:53 - to go ahead and remove that project
558:56 - okay and so that way that'll just make
558:57 - our lives a lot easier so if i just
558:58 - launch this it won't do pre-built stuff
559:01 - and it will work as expected
559:07 - so we'll give it a moment there
559:17 - and so this one because it will do a
559:19 - bundle install here
559:22 - this should now
559:23 - work properly
559:28 - this task ran as a pre-build
559:32 - oh
559:32 - boy um
559:40 - so i guess the thing it's not a big deal
559:42 - i think the thing is that i just need to
559:43 - modify this file because now if i modify
559:45 - i don't know if it'll just like stop
559:46 - using pre-builds so what i'm going to do
559:49 - is just delete out these commands here
559:54 - and we'll go here and just say
559:56 - remove weights
559:57 - because this will happen in the
559:58 - pre-build right so we'll say this
560:00 - assuming that it's going to do another
560:01 - pre-build even though i've deleted the
560:03 - project so there technically should be
560:04 - no pre-builds now
560:06 - and so i might have to recreate the
560:07 - project which is totally fine we'll just
560:09 - work our way through here and see what
560:11 - happens okay
560:12 - so we'll close that and i'm going to go
560:13 - back here and just do git pod
560:17 - because i don't know what it's going to
560:18 - do
560:31 - and so we have bundle install missing
560:33 - gem so now it's not doing pre-builds
560:35 - okay
560:37 - so in this case that's where we want to
560:39 - revert this file back to what it was
560:42 - so i'm going to go back and write it in
560:43 - because i i don't want to go back and
560:45 - create the project so i'm going to say
560:46 - um sync
560:48 - done bundle install
560:52 - sync
560:54 - awaits
560:56 - sync a weight sync await and so this
560:59 - server is going to start up over here
561:00 - and that's fine i just want to have one
561:02 - for the port forward so
561:04 - port forward there's not not going to be
561:05 - anything going on here i'm just going to
561:07 - say like command
561:10 - echo
561:11 - hello
561:13 - and what we'll do is go ahead and commit
561:15 - this file so we'll just commit that
561:18 - update
561:20 - and we'll sync those changes as per
561:21 - usual
561:25 - and we'll give it a moment then we'll
561:26 - just go ahead and close that reopen this
561:28 - and get pod
561:31 - i think we'll have an easier time
561:38 - all right so it's almost open here
561:42 - now this is not even with pre-built it's
561:43 - pretty fast but again it's going to
561:44 - really depend on your use case
561:46 - so um here we saw
561:50 - these two up because the ports already
561:51 - open they have the mode set up this
561:53 - server is running
561:55 - right so and this is running on port
561:57 - 8080 but imagine that you didn't want it
561:59 - on port 8080 you wanted on something and
562:01 - you know to be honest a better example
562:03 - for this would have been port 80.
562:05 - so i'm just going to do this
562:07 - sorry i know i'll keep on modifying this
562:09 - but if this is an accessible port that
562:10 - doesn't make it a very good example
562:12 - let's just say open on port 80.
562:15 - and actually before that happens i'm
562:17 - just going to start it up manually to
562:18 - see what happens if it actually does
562:20 - permission denied so i'd have to go here
562:23 - and do like sudo
562:28 - um
562:31 - so we can't even start it on port 80.
562:36 - i think we'll just stick with what we
562:37 - have here so we'll go back and we'll
562:38 - just start it back up again
562:43 - okay and we'll just do port forwarding
562:45 - so if we wanted to open up on a
562:46 - different ports we'd just say
562:48 - gp
562:49 - port
562:51 - or a ford port
562:54 - i want to forward port 8080 to
562:59 - 8 999 maybe
563:02 - 88
563:05 - and i think it's going the wrong way so
563:11 - um port 80 is already in use okay maybe
563:14 - we'll try that again it's just confusing
563:16 - because to me it looks like traffic
563:18 - coming from here should go there but i
563:19 - guess that makes sense because if
563:20 - traffic's incoming from port 888 send it
563:23 - to 8080 okay to me the direction just
563:26 - confused me but it's actually correct
563:27 - and i'm just confused so um if that port
563:31 - is open
563:33 - let's go over to remote explorer here so
563:35 - now we see port 888 and so if we open
563:37 - that up we can see that it is forwarding
563:40 - to port 8080. so there you go that's
563:42 - pretty much all we need to know about
563:44 - ports of course there was a lot here but
563:46 - i think it was just worth making sure
563:48 - that we were very thorough
563:49 - with our investigation here so we'll
563:51 - just close off all those tabs and we'll
563:52 - see in the next video okay
563:54 - [Music]
563:58 - hey this is andrew brown and we are
563:59 - taking a look at git pod custom docker
564:02 - images so git pod supports custom docker
564:04 - images so you can configure your
564:05 - workspace exactly to your needs and this
564:08 - is really important if uh you know
564:10 - there's security reasons like you need
564:11 - to really lock down what it is that's um
564:14 - within that container or you just have
564:17 - uh wildly different use cases like maybe
564:19 - you're doing a web 3 development or
564:22 - machine learning and you just can't find
564:24 - a quick start template so that's where
564:26 - you have to start making your own docker
564:28 - file so git pod supports uh debian
564:32 - uh ubuntu based docker images but it
564:34 - does not support alpine the reason it
564:36 - does not support alpine is that images
564:39 - do not include alpine images do not
564:41 - include lib gcc or lib stdc
564:45 - plus plus which breaks visual studio
564:48 - code if you don't know what alpine is
564:50 - it's just like really really really
564:51 - small image and that's why people or os
564:54 - and that's why people really like alpine
564:56 - but i always found them very hard to set
564:58 - up
564:59 - debbie and ubuntu uh very very popular
565:02 - hopefully we'll see support for things
565:04 - like uh centos and things like that
565:05 - later but this is the ubuntu logo that's
565:08 - the debian logo and there's alpine
565:09 - crossed out if that kind of helps cement
565:11 - that information but you should remember
565:13 - that it does not support alpine there
565:15 - are two ways
565:17 - to specify
565:18 - i know it says specific but should say
565:21 - specify an image okay so you can
565:23 - reference an image from a container
565:25 - repository like docker hub
565:28 - if you can specify things outside of
565:30 - docker hub i have not tried but i assume
565:32 - that they all go to docker hub so here's
565:34 - an example where we have an image and we
565:35 - say node buster we know that's going to
565:37 - go to dockerhub then you can reference a
565:39 - dockerfile contained within the repo and
565:42 - so what you do is name a file
565:44 - called.gitpod.dockerfile
565:47 - i don't know if you could just
565:48 - call it dockerfile and then reference it
565:50 - there but this is what it's always
565:51 - called so
565:53 - it's probably best practice just to
565:54 - follow along there and then here we have
565:56 - a very simple um docker file that does
565:58 - basic basically does nothing but it's
566:00 - just an example of us configuring our
566:02 - own so for git pod images
566:05 - it's recommended to not specify a tag or
566:08 - use latest to make sure you're you
566:10 - automatically benefit from the security
566:13 - patches and fixes uh we release we
566:15 - release meaning git pod so you can see i
566:18 - kind of copy paste there from the
566:19 - documentation
566:20 - but what they're talking about when
566:21 - they're talking about tags is that when
566:23 - you have um like
566:25 - this image here you can do like colon
566:27 - latest or you can put a version number
566:30 - stuff like that they're just saying
566:31 - don't specify a version number or a type
566:34 - just don't specify anything or type
566:36 - colon latest okay
566:38 - [Music]
566:42 - hey this is andrew brown and we are
566:44 - looking at the get pod workspace base
566:46 - image so gitpod workspace base base is a
566:49 - docker image that has a bunch of common
566:52 - tooling installed and so you can find it
566:54 - here on docker hub or you can get find
566:56 - it on github so those are the two paths
566:58 - there and so this thing if you start
567:00 - digging into it it really relies on
567:02 - something called build pack or build
567:04 - pack uh
567:05 - depths and the reason i went digging was
567:07 - because i just wanted to know what was
567:08 - installed on it so this is a docker
567:10 - image for a collection of common build
567:11 - dependencies used for installing various
567:13 - modules it is similar to heroku's stack
567:16 - image which includes a large number of
567:18 - development headers packages needed
567:21 - by various things so npm install gem
567:25 - install pip install curl
567:27 - wget get
567:29 - and a whole lot more
567:31 - so
567:32 - what's the purpose of the workspace base
567:35 - well it extends from build pack
567:38 - depths with a bunch of additional
567:39 - tooling and so we have a lot of stuff
567:41 - like zip unzip h-top uh jq which is
567:45 - great for working with json less
567:48 - locals nano
567:50 - pseudo
567:51 - vim
567:52 - all sorts of useful things and so this
567:54 - is a really great base image but we're
567:57 - going to talk about the full image next
567:58 - because that is generally what we see
568:00 - a lot of people using okay
568:02 - [Music]
568:06 - all right so let's take a look at the
568:07 - get pod workspace full image so
568:10 - every workspace launches by default with
568:12 - a standard docker image called workspace
568:15 - full and so just like base there's one
568:17 - on uh docker hub and github so very
568:20 - similar and workspace full extends from
568:24 - workspace base but it's going to be
568:25 - adding some additional stuff so the
568:27 - getpod workspace full image comes
568:28 - pre-installed with a variety of commonly
568:30 - used programming languages and libraries
568:31 - and system packages but really talking
568:33 - about that coming from the base image
568:35 - but just to kind of list the languages
568:36 - here we got docker go java node.js c c
568:39 - plus plus python ruby rust php homebrew
568:42 - tail scale
568:44 - nginx and several more
568:46 - so when you're developing your own
568:47 - custom docker images you can either
568:49 - extend the workspace full or if you need
568:51 - something lighter the workspace base but
568:53 - we will obviously open these up uh these
568:55 - these images up to kind of look at their
568:57 - docker files so kind of figure out what
568:58 - they're doing okay
569:00 - [Music]
569:04 - hey this is andrew brown and in this
569:05 - follow along i'm going to show you how
569:06 - to set up a custom docker file if you
569:08 - notice i tried before it didn't work so
569:10 - this is going to be my maybe third
569:11 - attempt to do it so what we'll do is
569:13 - type in git pod custom
569:15 - or get pod
569:17 - custom docker file
569:19 - and from there we'll go down below
569:20 - choose private add a readme we'll go
569:22 - ahead and create that repository
569:25 - then once there we'll hit the get pod
569:27 - button so all we're going to really be
569:28 - doing is going through the basic custom
569:31 - docker file here just to go through the
569:33 - motions of it we can use hyphen base we
569:35 - can use hyphen full it's just going to
569:37 - be dependent on the use case so if you
569:39 - use get pod fold image your docker
569:41 - support built in your you get docker
569:44 - support built into your environment so
569:46 - full sounds pretty good to me so we'll
569:48 - need a file here called dot get pod uh
569:51 - docker file now does it have to be dot
569:53 - get pod you probably could specify
569:54 - docker file because it references it um
569:57 - via the file so i would imagine you can
569:59 - name whatever you want but it's just
570:00 - good habit to follow what git pod has
570:02 - there so i'm going to type in gpinit and
570:05 - from here we have a file i don't need
570:06 - any of that content we're going to have
570:08 - image and then i think it's like type
570:10 - or file okay so we can do file here and
570:14 - then from there we'll just do git pod
570:16 - docker file okay and so now the next
570:19 - thing we want to do and maybe we might
570:21 - want to put one task in there for fun
570:23 - tasks and we'll just say um command
570:26 - we'll just say
570:28 - echo
570:30 - hello world okay just something for fun
570:34 - and so in this docker file we're going
570:36 - to be now writing whatever format a
570:38 - docker file is so do from get pod
570:41 - forward slash workspace and again this
570:42 - could be base but we're going to do full
570:44 - because you get the full power docker
570:46 - that way
570:46 - and from there we can do run brew
570:48 - install fzf now what is fzf i have no
570:51 - idea so i'm kind of curious myself so
570:54 - i'm just going to type that in
570:55 - [Music]
570:57 - command i just don't know what it is so
570:59 - this stands for
571:00 - fuzzy finder
571:02 - so f c f set f is a general purpose
571:05 - command line fuzzy finder it's an
571:06 - interactive unix filter for command line
571:09 - that can be used with any files so i
571:11 - mean that sounds really interesting um
571:15 - how it's used i don't know so i mean it
571:17 - might be just interesting to see if we
571:18 - can figure out how it works but um i
571:20 - think this is it so
571:21 - run brew install fzf if you see brew and
571:24 - you're thinking isn't that a mac thing
571:25 - well i think there's a debian ubuntu
571:28 - like compatibility for having brew so um
571:32 - yeah i'm not really sure let's see
571:33 - ubuntu
571:35 - brew
571:38 - so homebrew on linux so i guess they
571:39 - have a linux distribution and so that's
571:41 - how we're able to do that normally i
571:43 - would be like doing yum or apk install
571:45 - app getting solved for debbie and ubuntu
571:46 - but just to kind of clarify that i'm
571:48 - just double checking to make sure
571:49 - everything is okay there looks good to
571:51 - me so i'm going to go ahead and commit
571:53 - all this and say
571:55 - build custom
571:58 - docker image
572:00 - okay and hopefully all that is correct
572:02 - so we'll go ahead and commit that sync
572:04 - the changes we'll say okay
572:08 - and what we'll do is close that tab out
572:10 - we're going to double check to make sure
572:11 - those files are committed
572:13 - they look like they are good we'll hit
572:15 - get pot and hopefully we don't get any
572:16 - errors
572:18 - it's very easy to make errors at least
572:19 - for me because uh you know i'm just
572:21 - error-prone
572:23 - but notice that it's building the
572:24 - workspace so there's a little bit more
572:26 - work it has to do that's building that
572:27 - image
572:29 - so this is where you might see
572:30 - pre-builds come into play where
572:33 - you know you want this to launch faster
572:35 - because you know docker files just take
572:37 - forever to build
572:38 - uh and i say forever but i mean they
572:40 - take a little bit of time right so just
572:42 - imagine if you always had this that
572:44 - really makes sense why pre-builds uh
572:47 - become so important
572:50 - but i'll see you back here when it's
572:51 - done okay
572:53 - all right so i think this is done i
572:55 - can't really tell because it says
572:56 - building image and says exit exit so
573:00 - i'm going to
573:01 - uh risk it i'm just going to close this
573:03 - tab and try it again so i'm going to go
573:05 - ahead and launch the get pod
573:08 - um
573:08 - yeah so it already has this one running
573:10 - so i'm just going to click into that so
573:11 - maybe i'll just jump into the
573:12 - environment so yeah it was ready uh just
573:14 - understand that sometimes that happens
573:16 - you know if if you feel like you're
573:18 - waiting too long just have the
573:19 - confidence to go okay i think i think it
573:21 - is working but for whatever reason the
573:22 - feedback loop is not working as expected
573:25 - so if this worked correctly we should
573:27 - have fzf installed so if i type f set f
573:30 - uh it does appear so that's great and
573:32 - let's just see how it works so i know i
573:34 - watched a short little video on it and i
573:35 - know that if you do this it's a fuzzy
573:37 - finder so you can apply it to anything
573:39 - you can pipe anything to it but like
573:41 - it's great for like going through and
573:42 - finding files this one is a little bit
573:44 - more complicated so it's not really
573:46 - showing me the one the simple one that i
573:48 - wanted to
573:49 - use here
573:50 - well let me see here just going to the
573:52 - top here um
573:56 - so
573:59 - ah like
574:00 - it's basically this so we copy this i'm
574:02 - not sure about the selected part but we
574:04 - go and we paste that in like allow and
574:06 - hit enter
574:07 - and
574:08 - i mean we can search our files so
574:11 - i guess it's only showing not or like
574:13 - invisible files so maybe i need to go
574:15 - find some files here
574:17 - um
574:19 - media is there stuff in there no
574:22 - just trying to find anything
574:24 - okay so here might be something that
574:26 - might work
574:27 - so i'll hit up but they're not files
574:28 - they're kind of folders they
574:31 - okay so see i can start typing utm and
574:33 - so it's just a fuzzy finder an easier
574:35 - way to find things it can be used for
574:36 - all sorts of things but that's how you
574:38 - build a docker file so just realize it
574:40 - is a bit slow
574:42 - but that's the whole idea behind
574:43 - pre-builds right um now if we were to
574:45 - launch this again would it try to build
574:47 - every single time i think so let's go
574:49 - ahead and just see that and i don't care
574:51 - about seeing this complete i just want
574:53 - to see if it is going to build that
574:54 - every single time i believe it would
574:56 - right
575:00 - so we just give it a moment here
575:04 - it's pulling the container image if it
575:06 - doesn't that's great
575:07 - right
575:09 - that's what it looks like it's doing so
575:10 - it looks like if you build it once
575:13 - uh it's not gonna build it every single
575:15 - time you launch a workspace
575:18 - and then i guess my next question is is
575:19 - like i guess it would know anytime
575:21 - there's a file change i guess that you
575:23 - would have you'd have to commit it to
575:24 - the repository so that's how we would
575:26 - know
575:27 - so
575:27 - that's fine so let's say i make a single
575:30 - change here
575:33 - small change
575:35 - maybe just add another small change here
575:37 - i just want to see like will it still
575:38 - pull the image will it be smart enough
575:39 - or is it any time there's a
575:41 - change
575:48 - small change sync
575:54 - uh we'll go ahead and close that git pod
576:00 - give it a moment there and so i just
576:01 - want to see is it going to try to build
576:02 - the image
576:05 - it doesn't look like it
576:07 - so it's really seems like it's smart
576:09 - about that
576:13 - and then what we'll do once we launch it
576:14 - i'll just try to make a very minute
576:16 - change
576:17 - um i don't write docker files on a
576:19 - regular basis so
576:21 - i'm not even sure what we could install
576:22 - i mean maybe we could do wget even
576:24 - though it's already installed in that
576:25 - file
576:38 - okay yeah so it didn't rebuild it but
576:40 - what we'll do here is i'm going to do
576:42 - like run on a separate line
576:45 - i assume it must be smart enough to know
576:46 - run brew install wget again i don't care
576:49 - if this works like i don't i don't care
576:51 - to see it all the way the end just the
576:53 - fact that it's going to start a build
576:54 - step
576:55 - so add wget which probably already is
576:58 - installed
576:59 - but uh we just need an extra line in
577:01 - there so we're just going to do whatever
577:03 - okay good
577:04 - and we'll go back over here and
577:07 - we will hit the get pod button and so
577:10 - i'm assuming this time it will know
577:13 - yeah there we go okay so it is building
577:15 - the image so it is pretty smart there
577:16 - and i really like the fact that i did it
577:18 - that way
577:19 - um
577:19 - if you're looking for those we've seen
577:22 - those works workspace full images before
577:23 - but like get pod workspace full
577:26 - uh docker hub might be something we want
577:28 - to search for so here this is where
577:30 - they're basically hosted you know so
577:32 - just understand like whatever you want
577:35 - you just take that name and that's what
577:36 - you're putting in the image if you're
577:39 - doing um
577:41 - if we're going back to here like let's
577:42 - say you already have an image hosted you
577:44 - just do that right and you probably can
577:46 - put tags there as well but again it has
577:47 - to be a debian or ubuntu base so i'm not
577:50 - sure if it shows yeah here it is on
577:52 - github we've got images and we can go
577:54 - find the full one here and from here we
577:56 - can see the docker file and we can see
577:58 - this one's based off the base so if you
578:00 - wanted to kind of like crawl through and
578:01 - that's what i was doing to kind of
578:02 - understand what's going on there you can
578:04 - go to the base and then open that one
578:06 - you can see this one's based on the
578:07 - build pack depth depth full call
578:10 - uh
578:11 - f-o-c-a-l i'm not sure what that stands
578:13 - for we can go over here
578:16 - and then from here um
578:21 - like this sometimes i don't know where
578:22 - to find the base file but there is some
578:23 - kind of like base soccer file here that
578:25 - would tell us where that comes from or
578:26 - be written up so i'm just kind of
578:28 - looking around for it i'm not super good
578:31 - with docker i've been using it for years
578:33 - but every single time it just takes a
578:35 - lot of work here there are a bunch of
578:36 - tags underneath so maybe the tag shows
578:38 - up here it does
578:40 - so we click into that one ah and here's
578:42 - the file
578:43 - and so you can see this one's based off
578:44 - full call sem
578:46 - here it's installing all the libraries
578:48 - and you can just keep crawling back
578:50 - until you find everything to see like
578:51 - what's installed so we go to this one
578:53 - here
578:54 - and then this one's based off the curl
578:55 - one like
578:57 - it's just a little a little loopy how
578:59 - this works we'll go to the curl one
579:01 - and uh so now you can see it's ubuntu uh
579:05 - focal right so then we can go from this
579:07 - one
579:08 - so you just see that you see that it's
579:10 - ubuntu right so we go into this so that
579:12 - i guess that stands for
579:14 - focal uh
579:15 - fossa
579:17 - great that is not easy to say so we go
579:20 - back and we go to docker hub
579:22 - again just if you've never done this
579:23 - before right
579:25 - and so from here we might type in a full
579:28 - call if it even shows up so then it's
579:30 - here this is the latest
579:32 - and so this is from scratch
579:35 - um
579:36 - and this is add this binary or this uh
579:40 - this thing so it looks like i don't
579:41 - really know this too well but it looks
579:43 - like what it's doing is it's saying okay
579:45 - take this um
579:46 - uh
579:47 - archive which might be in the same
579:49 - directory here yeah it is take this
579:51 - archive and utilize that as the
579:54 - installation for it right um so that
579:56 - must be like the way like setting up um
579:59 - ubuntu like you know somebody was to
580:01 - like have a disk or
580:02 - uh a key or download the program i think
580:05 - it's the executing the program so
580:07 - you know hopefully that kind of tells
580:08 - you how that stuff works but yeah that
580:09 - is how you do
580:11 - custom docker files okay
580:16 - [Music]
580:20 - hey this is andrew brown and we're
580:22 - taking a look at git pod quick start
580:24 - templates so quick start templates are
580:26 - git repositories that you can use to
580:28 - launch an example environment or fork to
580:30 - get started for a variety of different
580:32 - run times so here's the search and
580:34 - you're going to notice a bunch of
580:35 - languages a bunch of frameworks like
580:36 - ruby on rails larvarelle
580:39 - things like that and so once you click
580:42 - on one of these it's you can it will try
580:44 - to
580:45 - create a fork of course but you can just
580:47 - go straight to the um
580:49 - github repository and there you'll
580:51 - generally notice that it will have like
580:53 - a git pod yaml file and a docker file
580:55 - and you can open it up and see how they
580:57 - are doing it um but it's pretty useful
581:01 - the quick start template generally
581:02 - contains a custom docker file that may
581:04 - extend the base or full so i tried to
581:07 - like go through a bunch of these and say
581:08 - okay what is the pattern here but it
581:10 - seems like some are workspace based some
581:12 - are full some are
581:14 - uh get pod workspace there's like
581:16 - another one um or some are docker
581:19 - compose so there i guess a little bit
581:21 - all over the place okay
581:22 - [Music]
581:27 - hey this is andrew brown and this follow
581:28 - along i want to explore the quick starts
581:30 - that comes with git pods so what we'll
581:32 - do is type in quick start
581:34 - templates here and what we'll do oops we
581:37 - got to put in get pod here because
581:38 - there's all sorts of quick starts based
581:40 - on different cloud products but if we go
581:42 - here we can see we have some popular
581:44 - templates we can search for a variety of
581:46 - things so if we want ruby on rails that
581:48 - is an example maybe if we wanted uh
581:50 - larvarelle that might be an example
581:52 - maybe if we wanted django do we have
581:55 - django in here
581:57 - not yet but if we don't have django
581:58 - maybe we have flask yeah there we go so
582:00 - maybe we have flask uh maybe we've got
582:03 - next yes there we go
582:05 - and so it might be fun to just kind of
582:07 - launch these and see what they look like
582:10 - and maybe there's even a wordpress in
582:11 - here there we are
582:13 - okay so we got all the major frameworks
582:14 - and you know i want to emphasize that
582:16 - this is languages and frameworks and all
582:18 - sorts of things but what we're going to
582:20 - do here
582:21 - um is go ahead
582:25 - and launch these so each of these have a
582:27 - template so if i go here i can just say
582:29 - get pod um
582:32 - rails template and you know what we
582:33 - don't even need to actually
582:36 - i'm not going to clone those i'm just
582:37 - going to open these up in a new tab like
582:39 - this
582:41 - and then just click on it like that
582:43 - so that's the rails one now i have to go
582:45 - back here and find all of them again so
582:46 - we'll go here
582:48 - and we'll open up that like that
582:52 - okay so we got the wordpress that one
582:54 - then we'll look at the next gs one
582:57 - all i want to do is kind of just explore
582:59 - these and just see kind of like what is
583:01 - going on with them you know
583:05 - and we said flask
583:10 - okay
583:12 - click on through that
583:14 - and larva
583:20 - and so the thing is is that um
583:23 - we have quite a few repos here
583:26 - i think i have one two three four five
583:30 - so we're not going to be able to open
583:31 - these all up at once because we can only
583:33 - have four in parallel but we don't need
583:35 - to do that all at once so that's fine so
583:37 - i'm just going to close some of these
583:38 - but not close anything but i'm just
583:39 - going to launch them one at a time so
583:41 - let's do larvae first
583:44 - that's quite a big one so this will be
583:45 - one that we launch
583:48 - we'll go ahead and close that tab
583:54 - and while that's going we'll go ahead
583:56 - and launch the next js1 we'll just do a
583:57 - couple at a time okay
584:04 - and i'm not really sure how many
584:05 - workspaces i have running maybe we'll
584:06 - just kind of like
584:07 - optimize our time here if we go over to
584:10 - our dashboard
584:11 - and we go to workspaces none are open
584:13 - there
584:15 - we have
584:16 - two running workspaces which is fine so
584:18 - i think we can just keep going here
584:20 - we'll do the flask one and then we'll do
584:23 - the wordpress wordpress one and then
584:24 - we'll just leave rails up on on the side
584:26 - there
584:27 - and so we're just gonna wait for all
584:29 - these environments to go green i'll see
584:31 - you back here in a minute okay all right
584:33 - so after a short little wait
584:35 - our four repositories are ready so we'll
584:37 - start on the left-hand side with
584:38 - larvaral if you don't know what
584:39 - lavarelle is it's a php framework that's
584:41 - similar to ruby on rails
584:42 - um and so let's just see what they have
584:45 - done here to kind of provision this so
584:47 - it doesn't hurt to go through get pod
584:48 - yaml files to kind of learn something so
584:50 - here they're loading a custom image and
584:52 - probably all of these are going to be
584:53 - loading custom images and so we're
584:55 - opening up port 8000 for the lower rail
584:57 - server and then it's also starting mysql
584:59 - so it's all here in one place for you
585:03 - and so down below um i mean both the
585:05 - ports are open but in the init step you
585:07 - can see that they are creating a
585:09 - database example they're going to copy
585:12 - the env file over here into one there
585:15 - then there are updating the environment
585:17 - variables with some default
585:19 - configurations over in here so some
585:21 - settings that are probably mandatory
585:23 - that you need to update
585:25 - then they're doing a composer install an
585:27 - npm install a php artisan key generate
585:30 - could any of this go into the before i
585:32 - don't know this seems pretty much
585:33 - correct to me and then you have the
585:35 - command that's starting up the 8000 on
585:38 - um for the public directory so let's go
585:41 - open up the get pod docker file and so
585:43 - here you can see that there's just the
585:44 - thing that says workspace mysql so if we
585:47 - wanted to understand what the contents
585:49 - of that is we'd have to go look up that
585:51 - one there so maybe we will in a bit here
585:54 - so just say workspace github if we can
585:56 - find it
585:59 - sometimes i find these easy to find
586:01 - sometimes i don't
586:03 - whoops
586:06 - like that
586:09 - so like if we go to the get pod repo
586:11 - because it might our github github uh
586:14 - get pod repo there might be something
586:15 - interesting for us to see there maybe
586:17 - not but we'll try anyway so we'll say
586:19 - git pod here
586:21 - and we'll go to the repos here
586:24 - and we will search for workspace
586:30 - so these are workspace images see i
586:32 - don't know if they're all in here they
586:33 - probably are so we're going to mysql
586:35 - this is probably the file that is
586:36 - launching here so i'm just curious how
586:38 - what is it what is it doing so it's
586:40 - extending the workspace full and then
586:42 - it's just installing mysql so a lot of
586:44 - these are going to be using probably
586:45 - workspace full underneath
586:47 - okay
586:48 - then we have next.js
586:50 - so in here we'll take a look at the uh
586:54 - the dot get pod yaml file here
586:57 - and so
586:59 - we have a single task it says mpm
587:01 - install npm run dev so very very simple
587:04 - and it's not even using um a custom
587:07 - docker file because it just uses node
587:09 - and i guess everything we want is here
587:11 - so that's really simple and nice
587:13 - then we have flask running here so if we
587:15 - go over to this one
587:17 - um
587:18 - we have one that's starting a before
587:20 - task so it's setting or it's exporting a
587:21 - couple of flask options we're doing our
587:23 - pip install we're initializing our our
587:25 - database we're running it and then they
587:28 - have that extension installed for python
587:30 - for that highlighting so that's nice and
587:31 - simple
587:32 - and then the last one here well we still
587:34 - have ruby on rails we might as well open
587:36 - that up while we're waiting
587:37 - um we got to go back to our limit here
587:39 - we've reached one so we'll go ahead and
587:41 - close
587:43 - uh this one here so we'll say
587:45 - stop
587:47 - and we'll stop this one and we'll stop
587:49 - this one i just don't want to touch the
587:50 - wordpress and so if we go over to the
587:52 - wordpress now we didn't see a website
587:54 - because this one's a little bit more
587:56 - complex in terms of its setup there is a
587:58 - port open i don't know if this will work
588:00 - because we probably have to pop in the
588:01 - database nope here it is we can uh
588:03 - create a wordpress and so if we go here
588:05 - on the left hand side
588:07 - and go into the git pod yaml this one's
588:09 - kind of a curious case because it's not
588:12 - using a docker file image it has a
588:14 - docker compose and so basically you're
588:16 - running
588:17 - multi-containers within a container and
588:20 - so we open up docker compose we can see
588:22 - here that it's starting up mysql then
588:25 - it's starting up wordpress and these
588:27 - have separate images so see this one is
588:29 - using the mysql image this one's using
588:31 - the wordpress latest and so you know you
588:34 - saw with the other example with
588:36 - larvarelle it just ran it as a monolith
588:38 - within the container like like a virtual
588:41 - machine would and so you have both
588:42 - options here and both are valid this
588:45 - might be really useful if this is
588:46 - actually what you used to deploy so this
588:48 - would be more like one-to-one with your
588:49 - production environment
588:51 - so that is kind of interesting there
588:53 - um
588:55 - let's go back i guess we didn't relaunch
588:56 - this so we'll go here and we'll just
588:58 - launch a new ruby on rails file there
589:02 - and we'll give that a moment
589:05 - but you can kind of see that's kind of
589:06 - interesting like all these files a
589:08 - little bit different you can learn a bit
589:09 - but the great thing is like you can just
589:11 - clone these or fork these repositories
589:14 - and kind of build off of them so it's a
589:15 - really great starting point for a lot of
589:17 - different kinds of projects
589:19 - so
589:21 - yeah we'll just wait here for the ruben
589:22 - rails thing to start and we'll look at
589:24 - this last one and we'll just wrap it up
589:26 - here for quick starts okay all right so
589:28 - after short little wait here we have
589:29 - ruby on rails my favorite framework
589:31 - that's why we made time for it but here
589:33 - you can see it's loading its own custom
589:35 - image file uh it has ports open on three
589:38 - thousand five four three two means
589:39 - meaning it's running postgres here we
589:41 - have our initial bundle install yarn and
589:43 - sol rick db create and then running the
589:45 - server and then we have a nice extension
589:47 - here
589:48 - for ruby if we open up the docker file
589:50 - we see again it's workspace postgres so
589:52 - you can imagine it's going to probably
589:53 - be similar to the mysql one if we go
589:55 - over here
589:57 - we go down to postgres and we click into
589:59 - the docker file yeah it's the same story
590:02 - um it's going to be extending workspace
590:04 - full
590:05 - so that's pretty straightforward there
590:07 - um
590:09 - and yeah we're pretty much done here so
590:11 - yeah that's all we want to do for quick
590:12 - start so i'll just close that stuff off
590:14 - and i'll see you in the next video okay
590:17 - [Music]
590:21 - so let's take a look here at docker
590:23 - compose which is a feature of docker uh
590:26 - but what's interesting is you can run it
590:28 - within git pod and so the reason why
590:30 - this is interesting is because you can
590:32 - run containers within containers or
590:34 - technically docker within docker if
590:36 - you've ever seen the movie inception
590:38 - with leonardo dicaprio where he goes uh
590:41 - deep into dreams a dream within a dream
590:43 - that's what we're doing here it's kind
590:45 - of crazy
590:46 - so let's talk about what docker compose
590:48 - is so it's a tool for running
590:49 - multi-container applications on docker
590:52 - defined using the compose file format so
590:53 - we're not just running a single uh uh
590:56 - docker container running multiple
590:58 - containers at the same time so a compose
591:01 - file which is going to be named docker
591:03 - hyphen compose yaml which will sit at
591:05 - the root of your directory um is used to
591:08 - define how one or more containers that
591:10 - need to be running and the communication
591:12 - between them to run our application and
591:15 - so within our gitpod configuration file
591:18 - we can run docker compose poll and up uh
591:21 - commands to get multiple containers
591:23 - running so there they are of course we
591:25 - don't see the docker compose yaml file
591:27 - here in the slide but we will see it in
591:28 - the follow along so it will make sense
591:30 - there okay
591:34 - [Music]
591:36 - so something i want you to
591:37 - consider is that you can build container
591:40 - images and virtual machine images within
591:42 - containers and so if you're looking for
591:44 - some open source tooling or things that
591:47 - might work
591:48 - within a gitpod workspace
591:50 - we have hashicorp packers so this is an
591:52 - open source tool to build golden images
591:54 - for virtual machines or docker or maybe
591:56 - buildup
591:57 - which is an open source tool to build
591:59 - oci compliant images of course there are
592:02 - other
592:03 - tool tools out there so for instance
592:05 - there's dazzle which is made by get pod
592:07 - i don't know a lot about it i don't know
592:09 - if we're going to
592:10 - actually
592:11 - give it a try within the course but
592:13 - that's something that builds out
592:14 - container images with some advantage
592:16 - around layers okay
592:19 - [Music]
592:23 - all right so we're going to learn all
592:25 - about git pod environment variables so
592:27 - before we do we need to define what are
592:29 - environment variables commonly referred
592:31 - to by developers as and vars is a
592:33 - variable whose values is set outside of
592:36 - a program and it's composed of a key and
592:38 - pair so here's an example within bash
592:40 - this is generally how you do it so you'd
592:42 - write export to set the environment
592:44 - variable you have the key so
592:46 - very common to set it to be all
592:49 - uppercase um it's just tradition so
592:51 - that's what we normally do equals
592:53 - followed by string and if we want to
592:55 - print it we could do echo is one great
592:56 - way of doing that there and so
592:58 - environment variables can be set in four
593:01 - ways for your gitpod workspace you have
593:04 - the getpodcli the gitpodio account
593:07 - settings environment variables the
593:09 - gitpod url and getpodconfigurationfile
593:12 - per start task so we will jump into all
593:15 - those variants okay
593:17 - [Music]
593:21 - before we jump into the four different
593:23 - ways we can set environment variables
593:25 - let's talk about the defaults and prefix
593:27 - for
593:28 - gitpod so
593:30 - the default environment variables are
593:31 - set by getpod automatically every time
593:33 - you launch a new workspace so
593:36 - there's a lot of them but two that
593:37 - really stand out are get pod workspace
593:40 - id so this is a universally unique idea
593:42 - uuid associated with the workspace and
593:45 - then the getpod workspace url the unique
593:47 - url for the workspace if you want to see
593:50 - them all we'll do this in the follow
593:51 - along you can use
593:54 - the bash command env to print them all
593:56 - out and then you have a pipe followed by
593:58 - grep to say filter out the ones that
594:00 - start with get pod underscore because
594:02 - they're all going to start with get pod
594:03 - underscore and to talk about that prefix
594:06 - it's a reserve prefix so environment
594:08 - variables beginning with the git pod
594:10 - underscore are reserved for internal use
594:12 - by gitpod and are overridden on every
594:14 - workspace startup so if you attempt to
594:16 - set something with your own like
594:18 - getpodandru it will get ignored or will
594:20 - not be accessible
594:22 - if you try to override one that's
594:23 - existing this is just not going to
594:24 - happen okay so just be aware of that
594:27 - [Music]
594:32 - so one way we can set environment
594:34 - variables uh for gitpod workspaces is
594:37 - within the gitpod yaml or the
594:39 - gitpodconfiguration file at a per task
594:41 - level so here is an example
594:44 - of a
594:45 - github configuration file and here you
594:47 - can see we are doing env colon
594:50 - and then we're following up with a key
594:51 - and a pair and we can put as many as we
594:53 - want in there um and so that's going to
594:56 - set for the next time the environment
594:58 - launches notice we have the dollar sign
595:00 - this is not git pod specific that is
595:01 - just how bash scripts work
595:03 - and so you can do that to access the
595:06 - value there
595:07 - okay and so the environment variables
595:09 - will be scoped only for
595:11 - that terminal so that task that spins up
595:14 - and other terminals will not have
595:16 - that environment variable set and i was
595:18 - i was very certain to test that out and
595:20 - we will look at that when we do it in
595:22 - the follow along okay
595:23 - [Music]
595:27 - so another way we can set uh environment
595:30 - variables for get pod is via the gitpod
595:32 - url so right after the hash or pound
595:35 - there we can just start specifying
595:37 - multiple ones there separated by a comma
595:40 - you probably don't want to be putting
595:42 - sensitive
595:44 - things in there because you know there's
595:45 - potential for those to be exposed like
595:48 - it was access keys and secrets but it's
595:50 - really nice to be able to do that so the
595:52 - environment variable set in the url will
595:54 - be available in all terminals within
595:55 - your workspace so like where you have
595:57 - pertaster scope for the um
596:00 - uh you know per task right whether you
596:01 - set it in the git pod yellow file this
596:03 - these are going to be everywhere okay
596:05 - [Music]
596:09 - all right so another way to set
596:11 - environment variables is setting them
596:12 - through account settings and so if you
596:14 - go there you'll have account settings
596:16 - environment variables and this is ideal
596:18 - when you need to pass along variables
596:20 - that are sensitive so something could be
596:22 - sensitive would be like in a bus
596:23 - credentials so from there you can open
596:25 - up a new end bar and set its name its
596:28 - value and its scope and that's the thing
596:31 - that's interesting here is how scope
596:33 - works
596:34 - so in order to set environment variables
596:36 - for specific workspaces you need to set
596:38 - the scope
596:41 - and so if you wanted to show up for
596:42 - everything
596:43 - you could do what it says here which is
596:45 - provide a wild card for both uh wild
596:48 - card forward slash wildcard but let's
596:49 - look at some of the following patterns
596:51 - that we can set and it's going to be
596:52 - basically owner repo or an alternative
596:55 - way of saying oregon project but this is
596:57 - based on what is in github get lab
597:00 - bitbucket right so that's what you want
597:01 - to consider not to be confused and this
597:04 - did confuse me with um teams because you
597:06 - can have or teams and projects within um
597:10 - get pod and it's not based on that okay
597:13 - so for example we have exam pro forward
597:15 - slash example marketing it's going to
597:17 - make the nvr available to a repo called
597:20 - exam pro marketing owned by exam pro
597:23 - right and actually mine on um github is
597:26 - exam pro
597:28 - co with all capitals right which is like
597:30 - this over here i just wrote it lowercase
597:31 - for some reason over here then we have
597:34 - um and i'll just clear some of the
597:36 - drawings here but then we could say
597:39 - we could have a wild card on the end
597:40 - here so wild card repo so make nvars
597:42 - available to all repos owned by get pod
597:45 - i o
597:46 - um so maybe it's for across all repos
597:49 - and then you could have
597:50 - the
597:51 - wild card in the front as well and so
597:54 - this is really useful um it says for
597:57 - it says because i haven't used it yet
597:58 - for all forks right so you know it could
598:00 - be like git pod io and then there's like
598:02 - andrew brown at forward slash form so
598:05 - that that stuff propagates there
598:08 - so the scope is case insensitive so when
598:11 - you enter the pattern it will be down
598:13 - case so see how i'm up i'm entering this
598:15 - with title case here exam pro co um it
598:18 - will just down case it to exam pro co
598:20 - like all like all the letters uh down
598:23 - cased so you know you don't have to be
598:25 - too sensitive here when you're writing
598:27 - that stuff and it's just going to fix
598:29 - that for you okay
598:31 - [Music]
598:35 - hey this is andrew brown and this follow
598:36 - along we're going to look at all the
598:37 - options we have for environment
598:39 - variables because there's a lot of ways
598:40 - that we can set them so what i'm going
598:42 - to do is go ahead and create a new
598:43 - repository we'll call this one gitpod
598:47 - env i'm going to go make that private as
598:49 - per usual and we'll go ahead and add a
598:51 - readme file and we're going to launch
598:53 - ourself a new environment so we'll go
598:55 - open up get pod here and while we're
598:56 - waiting i probably have some code
598:58 - already laying around from one of our
599:01 - previous
599:02 - repositories here so i think i'll go to
599:04 - the ports one here because we're going
599:06 - to probably just set up sinatra as per
599:08 - usual
599:09 - and that will be the means for which we
599:11 - pass a long port so we'll give that a
599:13 - moment to open and as that is going i'm
599:15 - going to go over to the getpodio website
599:17 - because what i want to show to you is
599:19 - under your settings over here this is
599:21 - where you're going to find environment
599:22 - variables now i probably would prefer if
599:25 - this was scoped at a per project level
599:27 - but i mean of course you can launch
599:29 - project like things that are not within
599:31 - a project so i guess it makes sense that
599:33 - it is global
599:34 - but you know maybe in the future they'll
599:35 - add it at a project
599:37 - name space there which is totally fine
599:39 - but this is where you're going to be
599:41 - able to set one place for environment
599:42 - variables another place will be in the
599:44 - url in the goodpod url
599:47 - the cli and i think there is a fourth
599:49 - option in the getpodgaml file so what
599:52 - we'll do here is we'll just get set up
599:54 - and so as per usual i'll go to the
599:56 - hamburger menu and we will launch a new
599:59 - terminal and we'll wait a moment here
600:01 - type in gp init so that we have a
600:04 - git pod yaml file that we cannot mess up
600:07 - which is something that i have a bunch
600:09 - of trouble with but what we'll do is
600:10 - create a new file here called server.rb
600:13 - and we will go ahead and grab the same
600:16 - code so it is just this very simple code
600:20 - you've seen us grab it a few times from
600:21 - the sinatra website if you if you're
600:23 - looking for you just go to sinatra
600:26 - sinatra ruby right and here and i'm
600:28 - pretty much just grabbing that code okay
600:31 - so and then we're putting this port here
600:33 - with the app port again requiring
600:35 - sinatra we'll go ahead actually we'll
600:37 - type in bundle init to create our gem
600:40 - file for ruby
600:42 - and i'm just going to delete uh that can
600:44 - stay in there that's fine we'll just
600:46 - type in gem
600:47 - cinatra
600:49 - and then i'll do a bundle install so we
600:51 - install sinatra our very lightweight
600:55 - ruby web server there and so that is now
600:57 - installed and so
600:59 - i'm just thinking about this for a
601:00 - moment um
601:03 - because it's installed i'm just trying
601:04 - to think like what would be the best
601:06 - approach
601:07 - um so what i'm gonna do
601:10 - is
601:12 - we'll do the get pod yaml file last
601:14 - because we can set environment variables
601:16 - in here but i think that's something
601:17 - that we can wait for but we will need to
601:20 - kind of set up this file so i'm going to
601:23 - do a
601:25 - bundle
601:27 - install and you see me do this as a
601:28 - separate task but i'm just going to make
601:29 - my life easy by just doing a bundle
601:31 - install here
601:32 - and then we'll do a bundle
601:35 - exec
601:37 - ruby server.rb
601:40 - okay
601:41 - and so there is no port number being set
601:44 - here so it's going to be whatever it is
601:46 - i'm just going to get rid of the ports
601:47 - because we'll just let it launch and
601:49 - then from there we'll just expose ports
601:51 - as we go
601:53 - but i'm just thinking here for a moment
601:56 - about what i would like to do
601:59 - let's do it from the url first so that's
602:01 - what i want to do i want to see if i can
602:02 - change the port number via the url so
602:04 - what we'll do
602:06 - is i'm just going to make sure this
602:07 - works
602:08 - okay
602:10 - just make sure that the server starts up
602:11 - it does no problem there so we'll go and
602:14 - do is uh commit these this uh these
602:16 - files here okay
602:20 - and i'm just gonna say uh initial repo
602:24 - we'll go ahead and commit that save
602:26 - those changes we'll say
602:28 - okay so this should be everything that
602:31 - we need to get going
602:33 - so now i'm going to go ahead and just
602:34 - close that and so
602:36 - we're going to go back to example dev
602:38 - and we're going to look for that new
602:40 - repository that we just created
602:42 - env
602:43 - and so from here i mean we can click
602:45 - this link but i'm just going to right
602:47 - click and copy the link address just to
602:49 - save myself some trouble we're going to
602:51 - go ahead here whoops
602:53 - copy uh copy link address
602:56 - and again we'll paste it up in here and
602:58 - so what we'll do is set the environment
603:00 - variable up here so i'm gonna do app
603:01 - port
603:03 - equals
603:04 - um
603:07 - eight
603:08 - eight eight eight okay and we'll put a
603:11 - forward slash in there and so that means
603:13 - that sinatra should start up on port 888
603:17 - because we are injecting environment
603:18 - variables that way so we'll see if that
603:20 - actually works
603:24 - assuming i wrote that correctly but i'm
603:26 - pretty sure i did it's not like that
603:28 - hard to do
603:31 - and we'll give it a moment here
603:33 - and it started up on port
603:36 - 888 so passing via the get get pod url
603:40 - wasn't too
603:41 - uh troublesome here
603:43 - and so another way that we can uh
603:46 - uh set environment variables
603:49 - i mean there's something with the the
603:51 - the get get
603:53 - uh pod cli here
603:55 - so here is control user defined
603:56 - persistent environment variables and i
603:58 - haven't really done much with this yet
603:59 - so let's see what it does
604:01 - i'm not sure we'll say help
604:05 - uh and we'll just go up here and see
604:06 - what it says so this command can print
604:08 - and modify the persistent environment
604:09 - variables associated with your user so
604:12 - to set the persistent environment
604:13 - variable to foo bar so we would just do
604:16 - that so we'll do gpe env
604:19 - and we'll just say
604:21 - app port equals
604:24 - 8765
604:26 - and hit enter
604:28 - and so that just sets the port number so
604:30 - i'm assuming that's all it does
604:33 - okay so we would do
604:35 - echo here
604:38 - hmm
604:38 - [Music]
604:39 - because here it's saying this
604:41 - if we go here is it just because i've
604:43 - already set one so maybe it's just
604:45 - because it's already been set so it
604:46 - can't be overwritten because it's
604:48 - interesting that it's it's doing this
604:49 - here
604:51 - so i'm gonna try this again one more
604:52 - time
604:55 - and it's doing eight eight eight eight
604:57 - eight
604:58 - so let's go take a read up on what that
605:00 - does we'll say get port
605:02 - or
605:03 - get pod
605:07 - cli
605:09 - and if we go here
605:12 - we'll look at env because it just might
605:14 - be that we can't overwrite it so
605:16 - uh with gpe and v you can set an api
605:19 - endpoint environment variable that is
605:20 - accessible for the project even if you
605:22 - stop the workspace and start a new one
605:24 - to delete uh or unset environment
605:26 - variable
605:27 - uh do that so i mean it just looks like
605:29 - it sets environment variable so but the
605:32 - thing is that we sent through the getpod
605:33 - url so it might never be able to unset
605:35 - it
605:36 - so what i'm going to do just to rule
605:39 - that out i'm just going to open up a new
605:40 - workspace here
605:43 - and we'll try to set it and then see if
605:45 - it actually prints out
605:52 - all right so it's just starting up here
605:54 - and it's starting on port
605:55 - 8765 which is
605:58 - interesting because
606:01 - i definitely um
606:03 - did not set it so maybe what it did when
606:06 - we did that is it actually set it up
606:07 - over here so i'm just curious if we give
606:08 - us a refresh oh
606:10 - so that's what that does okay
606:13 - so that's really curious
606:16 - all right so because i thought it was
606:17 - just going to be temporary like you just
606:19 - did it within the actual workspace but i
606:21 - guess what it actually does is set it up
606:23 - in your account settings and here you
606:24 - can see that it's setting it for the
606:26 - scope so we have at app port 8765. i was
606:29 - going to show you this separately but i
606:30 - guess if we did it that way we don't
606:32 - have to do that there but just make note
606:34 - that you can do
606:35 - wild cards here so if you wanted this to
606:37 - be set for all projects so maybe you
606:39 - always do port 3000 and you're always
606:41 - using app or something like that you
606:43 - could do that or if you wanted it for
606:44 - every single fork you could do that so i
606:46 - could update that it would still apply
606:50 - but that's interesting i did not know
606:51 - that
606:52 - um so
606:54 - i mean
606:55 - that's great now let's take a look at
606:57 - what we would do if we set it up in the
606:58 - git pod yaml and i don't know which one
607:00 - would override so like there's one set
607:02 - in here but would get pot yaml have more
607:04 - presidents i don't know so what we'll do
607:07 - is just type in env i'm going to go here
607:08 - and do app port
607:11 - and we'll do
607:13 - it's probably colon and here i would
607:15 - just say
607:18 - 7777
607:20 - you got to be kind of careful because
607:21 - sometimes these are reserved ports but i
607:23 - don't think so i just again i've never
607:24 - seen someone do that so
607:26 - maybe like four three two one might be a
607:28 - better idea
607:30 - and so what we'll do here is just save
607:32 - this and see what happens let's see if
607:34 - it actually overrides with this port or
607:36 - sorry this environment variable so
607:39 - commit
607:40 - env within
607:42 - getpod file
607:44 - okay
607:45 - and we will save that
607:47 - we'll
607:48 - sync those changes
607:52 - and what we'll do is just close this
607:56 - and we'll go ahead and relaunch that
608:05 - and then we'll see which takes over and
608:07 - we might even go to the extreme and also
608:09 - set in the get pod url and see what
608:10 - happens
608:11 - so here it's starting on port four three
608:13 - two one so even though we have set it
608:16 - um in here it looks like the git pod
608:19 - yaml is going to have higher priority
608:21 - here so now what i want to do is close
608:23 - it out
608:24 - and we're going to
608:25 - then set it in the url and see which one
608:28 - it takes
608:29 - i'm going to assume it's always going to
608:30 - be the getpod url configuration file
608:32 - first
608:34 - so or environment variable sorry so
608:37 - we'll copy this address up here i'm
608:39 - going to go ahead and paste it on in
608:41 - here
608:43 - and so what i want to do is just say app
608:46 - port
608:47 - equals four four four four
608:50 - four slash
608:56 - and so i wanna see if it picks up this
608:57 - one
608:59 - again i'm going to assume it's going to
609:00 - be the four 4321 because the get pot
609:02 - yaml should be
609:04 - high priority
609:06 - that's how i would code it and so it is
609:09 - four three two one okay
609:12 - so now i guess the next question is is
609:13 - what happens if i remove
609:17 - this
609:18 - and we do the url is it going to pick up
609:19 - the one from the account settings or
609:20 - it's going to pick up the one from here
609:22 - so we'll just say remove env
609:27 - sync those changes we'll say okay
609:33 - and we'll go back here and
609:36 - we will just copy the link address again
609:39 - we will paste it on in there and here
609:41 - i'm going to say app port equals four
609:44 - four four four forward slash
609:47 - this looks okay to me we'll hit enter
609:53 - we'll see what it picks up
610:04 - and it's eight seven six five so um
610:07 - unless i did it wrong but i don't think
610:08 - i did
610:09 - um it looks like that the priority is
610:12 - um
610:14 - git pod yaml then account settings and
610:16 - then the url
610:18 - is last in terms of priority okay
610:21 - so i mean that's pretty much all we
610:22 - really need to know about environment
610:23 - variables there are environment
610:25 - variables that are set for
610:27 - i guess we could look at also the git
610:30 - pod prefixes so if you type in env
610:32 - and you go grep
610:34 - um
610:35 - get pod
610:36 - you can see all the ones that are set by
610:38 - get pod there so if we just scroll up
610:39 - here for a second
610:42 - they have repo root so that's the root
610:44 - of the repository so that might be
610:45 - useful if you need to reference it an
610:47 - elix writer segment so i guess they're
610:50 - using segment which is a
610:52 - analytics tool the workspace id the
610:55 - interval which is whatever i assume it's
610:57 - how often it checks i guess that might
610:59 - be for the timeout because it says three
611:02 - zero zero zero and i know that it's like
611:05 - 30 minutes so maybe if we were to extend
611:07 - our time that would increase
611:09 - the context url so that's just where it
611:12 - was referenced to the instance id so i'm
611:14 - assuming it's the underlying container
611:16 - or something like that
611:17 - the url
611:18 - dia i think he has something to do with
611:20 - eclipse i'm not really sure
611:22 - context so we have a bunch of stuff here
611:24 - so you know
611:26 - nothing that you would really be trying
611:27 - to utilize but um you know there's a lot
611:30 - of stuff here you can see my email uh
611:32 - they get podcasts but um
611:34 - and you can't obviously override these
611:36 - so i'm not going to go bother to show
611:38 - that but just so you know you cannot
611:40 - override those values
611:42 - um or set something with get pod
611:45 - underscore i i'm not sure let's actually
611:47 - go take a look and see if that's
611:49 - possible so what i'm going to do here
611:51 - i'm just going to make up one like
611:52 - underscore andrew and just confirm is if
611:54 - you're able to set it i like i would
611:56 - think that it's just if there's ones
611:58 - that they decide to set you can't set
612:00 - ones with those but
612:01 - i just want to see what happens so we'll
612:03 - copy this link
612:05 - and we'll just paste it up here
612:07 - i'm going to just say something like get
612:09 - pod andrew and i'm going to say equals
612:12 - brown and it will do a forward slash
612:14 - it's my assumption that
612:16 - it will get set but it can get
612:17 - overwrited
612:27 - and we'll give it a moment here
612:29 - and so we'll just kill the server and
612:31 - what i want to do here is just type in
612:33 - env get pod underscore
612:37 - andrew
612:39 - uh oops we gotta grab that
612:43 - okay so it seems like if you set
612:44 - something with pod underscore it just
612:45 - gets wiped out won't even exist
612:47 - but yeah there you go that's environment
612:49 - variable so just close that stuff off
612:51 - and we might just want to delete that
612:53 - out there and we are good
612:58 - [Music]
613:00 - hey this is andrew brown and we are
613:02 - looking at the open mode uh
613:03 - configuration option when we are
613:05 - defining our start tasks so open mode
613:07 - allows you to configure how the terminal
613:09 - should open relative to the previous
613:12 - task so here's an example of me writing
613:15 - a git pod yaml file and i have a bunch
613:17 - of different tasks and they all have a
613:20 - variety of different open modes and so
613:22 - what you're looking for here and i know
613:24 - it's hard to see but it's this box over
613:26 - here so you're gonna just see some
613:27 - interesting things where uh some are
613:29 - split and so when you click into this
613:31 - one it's showing all four of those and
613:33 - so hopefully i can show that better um
613:35 - in the follow along here but there are
613:37 - four different options we can set so we
613:40 - have tab after so opens in the same tab
613:42 - group right after the previous tab tab
613:44 - before so it opens in the same tab group
613:46 - left before the previous tab split right
613:49 - so splits and adds the terminal to the
613:51 - right and split left so splits then adds
613:53 - the terminal to the left okay
613:56 - [Music]
614:00 - hey this is andrew brown and we are
614:02 - taking a look at vs code extension so
614:04 - what is a vs code extension well it lets
614:06 - you install features themes programming
614:08 - languages uh support debuggers and other
614:11 - tools to your vs code editor to support
614:13 - your development workflow and so you
614:16 - know if i wanted to install something
614:17 - i'd open up the extensions panel or
614:19 - explorer and from there i could install
614:21 - something like vim that's something i
614:22 - really like for my keyboard there and so
614:24 - vs code extensions are added to a git
614:26 - pod workspace in three different ways so
614:28 - you have built-in extensions these are
614:29 - extensions installed by default by get
614:31 - pod the open vsx registry so this is a
614:34 - community marketplace for extensions
614:36 - user extensions so these are extensions
614:38 - not in the open vsx registry or we're
614:41 - just saying like extensions that have
614:43 - been installed by the user okay and so
614:47 - vs code extensions are named dot v s i x
614:51 - um i assume it stands for visual studio
614:54 - integration extension i don't know if
614:56 - the eyes for i could not find out but
614:58 - they are vsix
615:00 - and so it is essentially just an
615:02 - archived file so if you were to rename
615:04 - this to a dot zip you could actually
615:05 - open up the archive and view the source
615:07 - files so there you go
615:09 - [Music]
615:14 - so gitpod comes preinstalled with many
615:16 - vs code extensions and you can view the
615:18 - pre-installed extensions by searching at
615:20 - sign built-in within the extensions
615:23 - panel here so just notice this icon here
615:25 - where it looks like uh four little
615:26 - blocks and one is broken off here if i
615:29 - type in at sign built in in the search
615:31 - at the top these are all the ones that
615:32 - are coming pre-installed and there's a
615:34 - lot as you can see here almost looks
615:36 - like
615:37 - about 80 that are installed if you count
615:39 - up the numbers there and so i just went
615:41 - through it and mostly what's interesting
615:43 - are the is the feature support that's
615:45 - installed because that's going to change
615:46 - the behavior and so here are ones that i
615:49 - thought were notable or interesting to
615:51 - show select git github get pod web grunt
615:53 - gulp image preview microsoft account
615:55 - merge conf conflict things like that but
615:57 - you know if you want to know what's
615:59 - being sold just take a look there you
616:01 - might learn something new and improve
616:03 - your workflow okay
616:05 - [Music]
616:10 - hey it's andrew brown and we're taking a
616:11 - look at the openvsx registry so it is a
616:14 - vendor neutral open source alternative
616:16 - to the visual studio marketplace and
616:18 - gitpod uses vs code extensions from the
616:20 - openvsx registry as opposed to the
616:24 - visual studio marketplace and so this is
616:26 - kind of a a screenshot of the home page
616:28 - of the openvsx registry which is at
616:31 - openhyphenvsx.org very simple you just
616:33 - search the name
616:35 - and you can find whatever you want the
616:36 - question is why are they using openvsx
616:39 - registry as opposed to the visual studio
616:41 - marketplace well vs vsix files
616:44 - downloaded from the visual studio
616:46 - marketplace should not be installed uh
616:48 - in gitpod because microsoft prohibits
616:51 - the direct use of their marketplace by
616:53 - any non-microsoft software even though
616:55 - most extensions are actually open source
616:58 - and not developed or maintained by
616:59 - microsoft so this is kind of one of
617:01 - those weird things where you know
617:03 - microsoft is not being as open as they
617:05 - could be
617:06 - for their own self-interest and so the
617:08 - openvsx registry is there to ensure that
617:12 - you know organizations that are
617:14 - investing into cloud developer
617:15 - environments are going to run into
617:16 - licensing issues and also to make uh the
617:19 - market uh fair and competitive so
617:23 - that's kind of really interesting and i
617:25 - looked it up uh like where this was
617:27 - hosted and it's actually eclipse um that
617:29 - is the one that is behind this and
617:31 - eclipse has been an open source id for
617:34 - forever and so it's really great that
617:36 - they are doing this for the community so
617:39 - when you search extensions uh within the
617:42 - gitpod vs code ui extensions panel it
617:45 - will search extensions in the open vsx
617:47 - registry so if you can find it on the
617:49 - openvsx website
617:51 - then you're going to find it in here as
617:53 - well and for ones that you cannot find
617:55 - in here
617:56 - or
617:57 - ones that you need to install directly
617:59 - that's where you're going to be
618:00 - installing them yourselves which we'll
618:01 - talk about
618:02 - soon enough okay
618:06 - [Music]
618:08 - so when you are exploring the extensions
618:10 - panel and you're quickly looking to
618:12 - install some extensions you can right
618:15 - click on this little cog here um right
618:18 - here and what it will do is it'll open
618:20 - up a context menu it's called a context
618:22 - menu because it's opening
618:24 - a menu within the context of what you
618:25 - clicked that's it's just a general uh
618:27 - programming term and so you'll have this
618:29 - option to say add to git pod yaml so if
618:32 - you click that that will just populate
618:34 - your document for you which will save
618:36 - you the trouble of populating that
618:38 - yourself
618:40 - um but you just have to remember you'll
618:42 - have to commit that
618:43 - code to your repository for it to
618:45 - persist okay
618:46 - [Music]
618:50 - all right so let's talk about user
618:52 - extensions so there are two ways to
618:53 - install extensions beyond the built-in
618:55 - extensions the first is for all users
618:57 - for a project so git pod configuration
618:59 - file extension vs code.extensions is
619:02 - where we are going to set that value
619:04 - which we'll see here in a moment or
619:05 - there's the second case where you're
619:06 - only installing it for the current user
619:08 - and that's we're going to be using the
619:10 - vs code settings sync feature which
619:12 - we'll see in the next video so down
619:14 - below here is an example of a gitpod
619:16 - configuration file where we're setting
619:18 - vs code extensions and so we're
619:20 - installing ones that are from the
619:22 - openvsx registry by giving them their
619:24 - name and then down below we're
619:25 - specifying a url of a i assume it has to
619:27 - be public-facing self-hosted vs code
619:29 - extension i think that this can also be
619:31 - a local file path because when you try
619:34 - to import a vi vs ix file um within the
619:38 - gitpod
619:39 - vs code interface it actually
619:42 - first looks locally so that would be
619:44 - interesting to
619:45 - find out but you know probably in
619:47 - practicality you're going to always have
619:49 - it
619:50 - online somewhere so
619:52 - anyway um for the extensions i just want
619:54 - to show you that if you were to open up
619:55 - the openvsx registry you can see the
619:57 - name there i know it's hard because it's
619:58 - orange but that kind of helps you
620:00 - understand what thing you are pulling in
620:02 - and putting into that file okay
620:05 - [Music]
620:09 - hey this is andrew brown and we are
620:10 - taking a look at a feature of vs code
620:13 - called settings sync so this is a
620:15 - feature to sync your configuration such
620:17 - as settings key bindings installed
620:19 - extensions across your machines so you
620:22 - are always working with your favorite
620:24 - setup and so with the desktop version of
620:27 - vs code the one you install locally not
620:29 - the one in the browser part of git pods
620:31 - you need to log in to a github or
620:33 - microsoft account to store the sync
620:35 - settings which is a json file so if you
620:38 - opened it for the first time it says
620:39 - sign in with microsoft sign in with
620:41 - github but with git pod when you turn on
620:44 - the settings things feature you're not
620:46 - going to be choosing an account to log
620:47 - in because you already are authenticated
620:50 - with something like github gitlab or
620:54 - a bitbucket but the settings data i
620:56 - believe will be stored on the gitpod
620:58 - servers and your configuration will
621:00 - persist across all your workspaces and
621:02 - when we say that we're talking about all
621:04 - the gitpod workspaces not necessarily
621:06 - the ones on your local machine okay
621:08 - that's something else so you can set uh
621:10 - extensions within your dot git pod yaml
621:13 - file which we'll learn in this course
621:14 - however some extensions which are
621:16 - designed for developers personal
621:18 - preferences should not be set here and
621:20 - instead settings things should be used
621:22 - so a very good example here would be the
621:24 - vs code vim changes keyboard mode okay
621:27 - because this could greatly impact other
621:29 - developers so i use them i really like
621:31 - vim and so i
621:33 - had applied this here and then one of
621:35 - our other developers said hey i don't
621:37 - like using vim i want to turn this off
621:38 - so it doesn't belong here and so that's
621:40 - the reason i'm bringing this up and also
621:42 - just to describe how setting syncs works
621:44 - a little bit different okay
621:46 - [Music]
621:50 - hey this is andrew brown and in this
621:51 - follow along we're going to take a look
621:53 - at um vs code extensions or
621:57 - in the context of git pods so what i'm
621:58 - going to do is just make a new get pod
622:00 - and
622:02 - there's not really anything special
622:03 - we're going to do in this one it's going
622:04 - to be more folks around the extensions
622:06 - but we got to launch something so whoops
622:08 - did i just launch an existing
622:09 - environment i'm going to go ahead and
622:11 - just create a new
622:13 - repository so we can just play around in
622:15 - something new and so i'll just say git
622:17 - pod ext for extensions we'll make it
622:20 - private as per usual create the new
622:22 - repository
622:23 - and we'll give it a moment here and
622:25 - we'll go ahead and hit the get pod
622:26 - button so what i'm going to do is just
622:28 - go over to open vsx registry and we'll
622:31 - just take a look at what this is so you
622:33 - saw me talking about it and um
622:35 - it looks a lot cooler in dark mode but
622:37 - it's not uh flipping over to that right
622:39 - now so we're in light mode but this is a
622:40 - vendor neutral open source marketplace
622:43 - and basically there's the other one
622:45 - which is the vs code marketplace right
622:51 - and there's a problem because you know
622:53 - these marketplaces look really similar
622:55 - there's a problem in the sense that
622:57 - microsoft has problematic licensing or
623:00 - rules around this thing and that's why
623:02 - this one exists
623:04 - so this isn't the problem this is more
623:05 - so the problem or at least what
623:07 - microsoft has done with this which is
623:09 - kind of unfortunate but
623:11 - the great thing is that you know if you
623:12 - are somebody that is creating
623:14 - um vs code extensions you can just put
623:17 - them in both marketplaces but if you
623:19 - could just put them in here honestly um
623:22 - and so i believe this repository is
623:23 - managed by clips if i just try to find
623:26 - it here yeah so this service is operated
623:27 - by the eclipse foundation if you don't
623:29 - know
623:30 - clips they are kind of a big deal
623:32 - because they've been around for
623:34 - such a long time
623:35 - uh which is really nice here
623:37 - and so the source code for open vsx is
623:40 - managed by the openvsx team which is
623:43 - very cool as well and so they have this
623:45 - i don't think i've ever actually looked
623:46 - at this but let's just take a look here
623:50 - so yeah so there's that with uh eclipse
623:52 - okay
623:53 - but anyway so here are all of our um
623:57 - but the great thing is is that if you
623:59 - are over here
624:00 - in the extensions panel here anything
624:02 - you search is already going to look here
624:04 - so if i look up something for
624:06 - ruby
624:08 - okay so we might have like
624:11 - this one here
624:12 - the reborn nix dot ruby
624:16 - and you go over to ruby over here
624:20 - and this one's not installed but i'm
624:22 - gonna go ahead and install it i wonder
624:24 - if it will pull up where it's from
624:28 - let me just see here
624:31 - marketplace so if we go click the
624:33 - marketplace yeah it takes us to openvsx
624:36 - this version of ruby extension was
624:37 - published by openvsx this user account
624:40 - is not verified from the publisher
624:43 - of this extension okay but anyway so
624:45 - here it is and so
624:47 - uh you get an idea of
624:49 - of what that is and so when you install
624:51 - these extensions gitpod is going to
624:53 - already have
624:54 - um
624:56 - they're going to have
624:58 - the sink turned on it's here in the
624:59 - wheel so
625:01 - the great thing is once you install
625:02 - something you like it's going to persist
625:04 - to other things but if you're working on
625:06 - a ruby project you might want to just
625:08 - include that into your getpod.yaml file
625:10 - so what i would do
625:12 - is just create a i'd say get pod open in
625:15 - vs code
625:16 - and we would say whoops i actually want
625:18 - to do that i want to sorry open a new
625:20 - terminal
625:21 - and i'm just going to initialize a new
625:23 - file
625:25 - and within here we're going to do an
625:27 - extension i can't remember what it is so
625:29 - i'm just going to look it up so get pod
625:30 - extensions
625:33 - like the syntax for it and there it is
625:36 - so i'm just going to go ahead and grab
625:37 - that little part there we'll go ahead
625:40 - and paste it on in there allow and so we
625:42 - know that this extension is called this
625:45 - and it's already in the
625:47 - open vs code or the open registry there
625:50 - and so we can just do that i'm just
625:52 - going to double check to make sure
625:52 - that's the correct syntax notice that
625:54 - you can also put that signed version on
625:56 - it if you want or you can specify a vsix
625:59 - file which maybe we'll try to do this
626:01 - one here
626:03 - but i guess to really test this we're
626:04 - going to need a secondary account where
626:06 - we don't have this already installed
626:09 - so what i'll do
626:11 - is um
626:15 - maybe i can make a snapshot for this
626:17 - because we haven't done any snapshots
626:18 - yet
626:19 - but anyway so i'll just create a new
626:20 - ruby file here we'll just say hello.rb
626:24 - and we'll type in puts
626:28 - so
626:29 - hello world
626:31 - and we'll go ahead and just make sure
626:33 - that works not that it matters but we'll
626:35 - just run it for any reason
626:37 - okay so that works fine and so we kind
626:39 - of have this little basis of a
626:41 - uh thing using that extension so we'll
626:44 - go ahead and
626:44 - run or commit that so
626:47 - initial commits
626:50 - and then what i'm going to do here is
626:51 - i'm going to go ahead and create a
626:52 - snapshot so we'll say git pod share
626:55 - workspace snapshot now i could share
626:58 - this in real time but i figured it'd
626:59 - just be easier to take a snapshot and
627:01 - then would be our opportunity to give
627:02 - that a go
627:04 - and i have firefox still open here on
627:08 - the side here so i'll just share it with
627:09 - this account over here
627:11 - so down below it created the snapshot
627:13 - i'm going to copy that url i'm just
627:15 - going to paste it on in over here and
627:16 - see what happens
627:20 - notice that this person isn't
627:21 - technically in the same project or
627:22 - anything i could just share it with
627:24 - anybody
627:26 - and so here is that project um
627:30 - and we'll give it a moment here
627:33 - we'll have to look at snapshots in a
627:34 - little more detail when we get to that
627:36 - section but what i want to find out is
627:37 - is this extension installed here on this
627:39 - version here with firefox so now if i go
627:42 - over to ruby
627:46 - is it installed
627:48 - it is installed okay so this firefox
627:51 - one is my other
627:53 - my main
627:54 - getpod account and i did not install
627:56 - this so you can tell that it came along
627:58 - there with the getpod.yaml file didn't
628:01 - like say hey we installed it other than
628:03 - the fact that we checked it but that is
628:05 - uh good to see
628:07 - i think it can be interesting if we can
628:09 - try to bring in a vsix file uh so that
628:13 - will be something we'll give it a go
628:14 - here so maybe what we could do
628:17 - um maybe there's like something a little
628:19 - bit more obscure that we could uh
628:21 - install
628:22 - just go back here
628:25 - i was trying to think of something that
628:27 - probably isn't installed
628:31 - like maybe this thing here
628:35 - okay don't know what it is
628:37 - but what i'll do
628:39 - yet another client cool but what i'll do
628:41 - is i'll go over to
628:43 - the extensions here and we'll just see
628:45 - if we have it installed yet
628:47 - just in case it's not good so what i
628:49 - want to do is see if i can download this
628:51 - and then reference it so we'll hit
628:53 - download
628:55 - and we're going to download that vsix
628:56 - file and i'm just curious because they
628:58 - say that you can rename these files
629:01 - right you can rename these files
629:03 - and from there if you rename them with
629:05 - zip you can open them up
629:08 - so that's what i'm going to do i'm just
629:09 - doing this off screen here by the way
629:11 - just because i have so many things here
629:13 - i'm just going to maybe expand that here
629:15 - there i'm just showing you the file i'm
629:16 - going to go here and rename this to
629:19 - zip
629:21 - okay
629:22 - we'll say yes
629:24 - and i'm just going to open it up
629:26 - and then here in winrar we can see the
629:28 - contents of this file
629:32 - and i'm kind of interested in its
629:35 - contents i might uh go ahead and
629:37 - actually download this
629:39 - into our git pod
629:41 - that's what i'm going to do
629:43 - so what i'm going to do is go back here
629:45 - and we're just going to copy the link
629:46 - address here
629:50 - and from here i'm just going to do
629:54 - curl
629:56 - maybe wget i prefer wget
630:00 - and we're just going to download that
630:01 - file within this here
630:03 - so if we go over here we can see the
630:04 - vsix file
630:06 - and so now uh what i can do is i can
630:09 - just copy this
630:11 - and then we're going to type it again
630:13 - and just change it over to zip
630:16 - and then i think i can just type unzip i
630:18 - always forget what it is but we'll try
630:20 - it and it did it just unzip the contents
630:22 - there so
630:23 - we have this file here an xml file that
630:25 - describes something
630:28 - and then we have the manifest file so i
630:31 - guess it describes
630:33 - its manifest
630:35 - and then we open up the extension here
630:37 - is a bunch of stuff so it looks like you
630:38 - can set uh the icon here
630:42 - it looks like it's just javascript
630:43 - though we opened up this package so
630:46 - there's like a readme about it
630:49 - i get i've never made a extension so i'm
630:51 - just kind of poking around here to see
630:52 - what there is
630:55 - so probably like this code is
630:57 - pre-compiled out so i can't imagine like
631:00 - the developer works this way so this is
631:02 - like a compiled uh version of their
631:04 - their source code so you probably
631:06 - wouldn't want to uh
631:08 - like
631:09 - um unravel this so it's not like it's
631:11 - showing
631:12 - all the details of it but you know just
631:14 - curious to kind of open that up but
631:15 - anyway now that we have the that there
631:18 - let's go see if we can actually specify
631:20 - now if you want to install this locally
631:22 - i'm pretty sure if we go to
631:25 - i saw it the other day here
631:28 - i thought it was up here in the top
631:29 - right corner people go extensions ah
631:30 - here we go so you can install from vsix
631:33 - and so here we could specify a
631:36 - a path
631:38 - all right
631:39 - but i don't know if this would actually
631:41 - take this from a
631:42 - a local a local path here because they
631:45 - don't show that in the example over here
631:47 - see how it's a url so i think that we
631:49 - would have to um host that somewhere so
631:51 - to speak so what i'm going to do is i'm
631:54 - just going to go ahead and
631:56 - commit this
631:58 - all this stuff
632:00 - we'll just say git add all get commit
632:03 - hyphen m
632:06 - ext code
632:08 - the only problem is repo is not public
632:10 - facing
632:11 - and if it's not public facing i'm not
632:13 - sure how it's going to pick up that
632:14 - extension
632:18 - so
632:20 - maybe what i should do
632:23 - and we can commit all this stuff i don't
632:25 - care what i'm going to do is just create
632:26 - a new repository here that's public
632:28 - facing
632:32 - get pod whoops
632:36 - getpod.exe example
632:39 - and we'll make this one public
632:42 - but this time around i'm just going to
632:43 - upload a file so here we could say
632:44 - upload an existing file
632:47 - and so i'm just going to drag that file
632:49 - on in
632:56 - okay i'm just renaming it back to what
632:57 - it was so we'll go there
633:00 - so now this file is uploaded in this
633:02 - repository
633:04 - in a public repository and so now what i
633:07 - want is just the raw version of this
633:09 - file so
633:11 - maybe we just
633:13 - yeah we grab this link here so we go
633:14 - copy link address and we go back over to
633:17 - here
633:18 - and get rid of this thing here get out
633:20 - of here it won't get out of the way
633:23 - i'm not sure how to get rid of context
633:25 - menus that are like that
633:28 - that's really annoying
633:30 - okay there we go it just closed on its
633:32 - own i didn't do anything so i'll paste
633:34 - that on in there and i again i don't
633:35 - know this is going to work but i'm just
633:36 - going to try it anyway
633:37 - and so what we'll do is just
633:40 - update our commit here so
633:43 - try and install
633:46 - http yak
633:50 - okay
633:51 - and we'll save changes we'll say okay
633:56 - and i kind of lost where we are so i'm
633:58 - going to open up the context here
634:00 - and we'll close the old tab and we'll
634:02 - just hit get pod and we'll see if that
634:03 - actually installs while it's going let's
634:05 - go let's go take a look at what this
634:06 - actually is get another client quickly
634:08 - and easily send rest soap graphql or
634:11 - grpc request directly in your editor
634:16 - so i guess it's like kind of a little
634:18 - convenience thing
634:22 - yeah i've never heard of it
634:24 - sounds cool though
634:27 - and so this has started back up and so
634:30 - what i want to know is is this installed
634:32 - so if we go to our extensions
634:36 - and i think that it's installing this
634:37 - but we'll take a look here http yak
634:42 - and click that it is now installed so
634:44 - there you go that's uh that's kind of
634:45 - interesting there
634:47 - um
634:49 - another thing that we can look at is the
634:50 - built-in extension so if you type in at
634:52 - sign built in
634:53 - this is all the stuff that is um
634:55 - installed by default for you
634:57 - and so there's quite a bit quite a lot
634:59 - of interesting stuff here so you can
635:00 - just like scroll through and kind of see
635:02 - the information so you got features lots
635:04 - of themes
635:05 - and lots of supported programming
635:07 - languages but you know
635:09 - is what it is and everything's really
635:10 - snappy too with all the stuff installed
635:12 - so
635:14 - it's really great um but that's pretty
635:16 - much all i really wanted to show for
635:17 - extensions
635:19 - so we'll just close all the stuff and
635:21 - there we go
635:25 - [Music]
635:26 - hey this is andrew brown and we are
635:28 - taking a look at git pod workspaces
635:29 - which represents an ephemeral isolate
635:32 - runtime system running within a docker
635:35 - container on a kubernetes cluster so
635:38 - there's a lot going on there and so i
635:40 - just want to take an opportunity to
635:42 - describe in brief a lot of these terms
635:44 - so first of all what is a container this
635:46 - is a runtime environment that includes
635:47 - configuration for os so operating system
635:50 - memory disk and network access what is
635:52 - docker so this is an open source
635:54 - container containerization platform to
635:56 - package application or workloads uh into
636:00 - containers we have kubernetes so
636:01 - kubernetes is a open source container
636:04 - orchestration to coordinate and maintain
636:06 - many container images and then we have
636:09 - ephemeral which means lasting a short
636:12 - amount of time and then a runtime system
636:14 - a piece of software that provides the
636:16 - programmer a more convenient environment
636:18 - for running programs in our case the run
636:20 - time system is intended for development
636:22 - in practicality you need to remember all
636:24 - these terms not so much just the fact
636:26 - that workspaces um are ephemeral so they
636:29 - only last a short amount of time and
636:30 - they're for development and they use
636:32 - containers okay
636:36 - [Music]
636:38 - hey this is andrew brown and we're
636:39 - talking about the underlying git pod
636:41 - resource size because this is a question
636:43 - that my co-founder came to me and said
636:45 - what is the power under the hood for
636:47 - these workspaces and when i looked into
636:49 - it i discovered that gitpod does not
636:51 - allow you to choose the power of the
636:53 - underlying instance and that might sound
636:55 - like a negative but it's actually a very
636:57 - strong positive because they're
636:58 - abstracting away a decision for you so
637:02 - you can just focus on the business value
637:03 - and that is what we call a true
637:06 - uh serverless offering okay and so um
637:09 - you could say gitpod is a serverless
637:11 - cloud developer environment
637:13 - so the underlying computing power is
637:15 - unknown but we generally know the limits
637:17 - of an individual workspace because if
637:19 - you go into the
637:21 - discourse the the forms for gitpod
637:25 - we've seen
637:27 - engineers at gitpod describe what limits
637:30 - there are
637:31 - and so the generally known limits is
637:33 - like v7vcpus
637:36 - 12 gigabytes of ram 30 gigabytes of disk
637:40 - and you can see there are some
637:42 - explanations as to what that is
637:44 - but the idea is that you shouldn't
637:45 - really have to worry about it it's the
637:47 - idea is you just pay a fixed cost and
637:50 - whatever size you need is available to
637:52 - you
637:53 - um but you can always self-host right so
637:55 - if you do need more direct control of
637:57 - the underlying computing layer i think
637:59 - that would be an option where you would
638:00 - have to self-host but there's so much
638:02 - you can do with git pod and you don't
638:04 - have to worry about uh picking what
638:07 - virtual machine you need to launch it
638:08 - just works okay
638:13 - [Music]
638:14 - okay let's talk about workspace
638:16 - lifecycle or just features of a
638:19 - workspace so the first is workspace
638:20 - timeout so after a period of inactivity
638:22 - a workspace will be stopped the default
638:24 - timeout is 30 minutes timeouts can be
638:26 - extended to 60 or 180 minutes with the
638:28 - unleashed plan and there is a few
638:30 - caveats that we're missing there but
638:31 - that's okay we have a slide dedicated uh
638:33 - or video dedicated just to timeout okay
638:36 - then we have our
638:37 - ephemeral storage so this is storage
638:40 - that will be on a virtual disk available
638:42 - to the workspace when a workspace is
638:44 - stopped the data on the affir
638:47 - affair removal storage is persisted and
638:50 - saved so when a workspace is deleted or
638:53 - terminated the data on the storage is
638:55 - lost so only the data located in that
638:58 - ford slash workspace is going to be
639:00 - persisted so
639:02 - anything out there when you stop it
639:03 - there's no guarantee that it's going to
639:05 - be there then we have garbage collection
639:07 - so get pot allows for a certain amount
639:09 - of stopped workspaces to remain for
639:11 - reuse
639:12 - and this is really useful if you ever
639:13 - have to go back a few versions there i
639:16 - don't know if it stops at 200 but i just
639:18 - know that we have a range selection of
639:19 - 50 to 200 so it's my assumption that
639:21 - there's nothing beyond 200 why you need
639:23 - more i don't know but um i'm just
639:26 - stating that number's there for you so
639:27 - get by will begin deleting workspaces
639:29 - beyond a certain number uh uh
639:31 - based off of days of non-use so
639:34 - currently it's hardcoded for 14 days so
639:37 - if you have like 50 or 30 workspaces and
639:39 - you haven't touched them for 14 days
639:41 - they're going to get permanently deleted
639:42 - and you won't be able to spin them back
639:43 - up and i mean generally the idea is that
639:46 - you don't really want to be leaving
639:48 - workspaces with code lying around for
639:50 - that long so i think that's okay
639:52 - [Music]
639:57 - okay so let's talk about the underlying
639:59 - life cycle and phases for a workspace to
640:02 - distinguish from like when i said
640:03 - workspace lifecycle earlier i meant
640:05 - let's just say like features but that's
640:06 - what the documentation called it so now
640:08 - we're actually talking about the actual
640:09 - lifecycle of a workspace here so when a
640:12 - workspace is created it will go through
640:14 - a fixed life cycle separating phases
640:16 - these phases are currently not
640:17 - observable by the end user within
640:19 - gitpodio
640:20 - however i would imagine that if you are
640:22 - doing self-hosted gitpod uh open source
640:25 - version so on a managed kubernetes
640:26 - cluster this information would be
640:28 - somewhere available in the logs uh we
640:30 - might discover that as we do the
640:32 - self-hosted
640:33 - um follow along to see what we can see
640:35 - there but um it's still useful to go
640:37 - through these states so we understand
640:39 - what's happening under the hood so the
640:40 - first is unknown so indicates an issue
640:42 - within the system and that it cannot
640:44 - determine the actual phase of the
640:45 - workspace we have preparing so this is
640:47 - where it's building the docker image for
640:48 - the workspace pending the workspace does
640:50 - not yet consume resources in the cluster
640:53 - creating the workspace is currently
640:54 - being created initializing the phase in
640:56 - which the workspace is executing the
640:58 - appropriate workspace initializer
641:00 - running so the workspace is able to
641:02 - actively perform work either by serving
641:04 - a user through
641:07 - thea or as a headless workspace
641:10 - interrupted the container should be
641:12 - running but it is temporarily
641:14 - unavailable it should sir it should self
641:16 - resolve or
641:18 - running or just running or stopping
641:20 - sorry and so stopping that's when the
641:22 - workspace is currently shutting down
641:24 - then stopped the workspace ended
641:26 - regularly because it was shut down so
641:28 - again uh you know we might not see this
641:30 - until we do the self-hosted section here
641:32 - but i always think it's useful to kind
641:34 - of pull this information uh up up front
641:36 - here so we know what's going on
641:42 - hey this is andrew brown and we are
641:43 - taking a look at workspace instance
641:45 - types so within a workspace cluster
641:47 - several types of workspace exist the
641:48 - first is regular so when a user launches
641:51 - a workspace with the visible code energy
641:53 - ui this is considered a regular
641:55 - workspace or just as we call it a
641:57 - workspace
641:58 - other types of workspaces are
642:00 - headless because there is no code editor
642:02 - ui for the user to interact with the
642:05 - first being ghost so ghost workspaces
642:07 - are placeholders in the system they are
642:09 - used to scale up nodes ahead of time and
642:11 - are replaced by regular workspaces when
642:13 - needed they are a custom implementation
642:15 - of preemptable kubernetes pods then you
642:18 - have pre-builds and you will encounter
642:19 - this in the getpodio
642:22 - and so pre-builds are triggered
642:23 - automatically or manually performing the
642:25 - before init execution order sets within
642:28 - a git pod conversion file task so a
642:30 - pre-build will generate a snapshot and
642:32 - upload their log output for later
642:34 - consumption i haven't figured out where
642:35 - that log output is but it says that they
642:37 - do it and then builds i had to surmise
642:40 - are when a user manually takes a
642:42 - snapshot for sharing a workspace uh
642:45 - you know via a snapshot okay so there's
642:48 - that i think it's called snapshot but
642:49 - when you opened up the
642:51 - get pod
642:52 - command palette there's like an option
642:54 - to
642:55 - do that there and again these are those
642:57 - headless workspaces okay
642:59 - [Music]
643:03 - hey this is andrew brown and we are
643:04 - looking at timeouts for gitpod
643:06 - workspaces and there's five things i
643:08 - want you to know so when you stop an
643:10 - instance the workspace will shut down
643:12 - instantly deleting instance will delete
643:15 - the current state of the workspace
643:16 - stopping it will persist the data okay
643:19 - then when you close a browser tab the
643:22 - workspace will shut down in three
643:23 - minutes this is really great to know
643:24 - because i i never knew when i closed the
643:27 - browser tab what would happen there but
643:28 - it reached out and said don't worry
643:30 - andrew after three minutes it will shut
643:31 - down so that's nice to know
643:33 - then there's a case where you might
643:34 - leave a browser tab open so by default
643:37 - after 30 minutes it will turn off
643:39 - but if you need beyond 30 minutes what
643:42 - you can do is upgrade to the unleashed
643:44 - plan and that allows you to set a need
643:46 - new default of 60 minutes or you could
643:48 - just say one hour there um and then
643:50 - there's a case where you can even have
643:52 - it even longer than that so maybe you
643:53 - need a timeout because you're doing like
643:55 - a long build so you can boost the time
643:58 - of the current workspace up to three
644:00 - hours when i say up to i think you just
644:01 - choose three hours uh and uh that's
644:04 - again with the unleashed plan so here's
644:06 - kind of an example where somebody has
644:07 - the default of 60 minutes and for
644:09 - whatever reason they need to extend it
644:10 - so they press that button um and the the
644:13 - idea behind boosting is it's useful when
644:15 - you have a computational task that is
644:17 - going to take a long period of time so
644:19 - you're going to be inactive maybe you
644:21 - need to leave for lunch and ensure it
644:22 - remains running so you're just like okay
644:24 - i'm going to press that button like
644:25 - maybe i'm going to a meeting and i have
644:27 - and i just want to make sure my
644:28 - workspace doesn't shut down for whatever
644:30 - reason so it's not interrupted
644:32 - so you know those are the five cases
644:33 - that i want you to know okay
644:35 - [Music]
644:39 - hey this is andrew brown and what i want
644:41 - to show you here in get pod is a a
644:44 - feature of the unleashed plan or
644:46 - actually two features so what i'll do is
644:48 - make my way over to settings
644:50 - and go over to plans just to show you
644:52 - that i've temporarily upgraded here so
644:54 - we can show you timeout and three hour
644:56 - timeout boost now i don't think there's
644:58 - an option to choose from 30 minutes to
644:59 - one hour once you are on this plan it
645:02 - just is one hour timeout uh and it's not
645:04 - something you have to really worry about
645:05 - because you have unlimited hours at this
645:07 - time so it's not something you have to
645:09 - like try to conserve where you are
645:11 - trying to worry about this meter up here
645:13 - but let's showcase what the three hour
645:15 - timeout boost looks like so what i'll do
645:17 - is go back to my workspaces here you can
645:19 - do this with anything just launch
645:21 - whatever you can here so i'm just going
645:22 - to open something that i was recently
645:25 - working on so that was gke
645:28 - i'm not sure if this one was even
645:29 - successful i think i might have been
645:30 - making a video for it and it didn't work
645:32 - out which is totally fine but i'll just
645:34 - launch it anyway again doesn't matter
645:36 - which one you launch i just want to show
645:38 - you how do you do that timeout boost
645:41 - and i was saying like that timeout boost
645:43 - is really good if you have some long
645:44 - running tasks uh and you know that
645:46 - you're going out for lunch and you just
645:48 - want to make sure that that that thing
645:49 - keeps running so um i believe that it's
645:53 - down below here so i'm just looking for
645:55 - it if there is a boost so down below
645:57 - here see it says workout timeout 60
645:59 - minutes click to extend and so you can
646:02 - do it here i'm not going to click it
646:03 - just yet but i just want to see if it
646:04 - shows up under the command pal so i
646:05 - clicked on the get pod logo in the
646:06 - bottom left corner it says extend work
646:09 - space timeout so what i'm going to do is
646:11 - click the one in the bottom right corner
646:13 - i know it's really hard to see but just
646:14 - know that i'm clicking it it says work
646:16 - timeout has been extended to three hours
646:18 - now would that be reflected anywhere i'm
646:20 - not sure so we'll just go to get podio
646:23 - we're going to go look at this workspace
646:25 - and there's no reflection that we know
646:27 - that it's currently being extended so
646:30 - you just have to know
646:31 - if we go back here let me just see here
646:33 - what happens if i hover over it so it
646:35 - says 180 minutes click to extend can i
646:37 - extend it again i doubt it
646:39 - okay let's go over here again
646:41 - so yeah it just says 180 min so 180
646:43 - minutes is is three hours so the thing
646:46 - is you would just assume that you would
646:47 - keep this tab open and if you saw the
646:50 - the little yellow icon you know that
646:52 - it's still there so let's see what
646:53 - happens if we close this
646:55 - okay and then we reopen it
646:57 - i just want to see if that yellow
646:59 - little icon still stays active so that
647:01 - you know that it's still there so we're
647:04 - opening it up again here
647:07 - and yeah it's yellow so if it's yellow
647:09 - that's how you're going to know that
647:10 - it's extended to three hours um so yeah
647:13 - there you go
647:17 - [Music]
647:21 - all right let's talk about the workspace
647:23 - directory so when you launch a workspace
647:25 - the contents of your git repository will
647:27 - be copied to a directory or folder
647:29 - called forward slash workspace so here
647:31 - you can see
647:32 - i have a project called exam pro
647:34 - marketing it's my marketing website and
647:36 - so i've opened i've opened up this git
647:38 - pod and you can see that that folder has
647:40 - been cloned into that workspace
647:42 - directory so when a workspace is stopped
647:44 - the contents of only workspace is saved
647:47 - so when you start the workspace again
647:49 - it's going to have that content still
647:51 - there and even in the um the gitpod io
647:54 - it'll even tell you what changes are
647:56 - there like you have 132 files changed so
647:59 - you have some kind of indicator between
648:01 - different
648:02 - um stop workspaces the difference there
648:05 - so here's an example
648:07 - of a gitpod configuration file because
648:08 - we actually can change some of the
648:10 - defaults here so you can change
648:12 - what gitpod considers the workspace
648:14 - location and in some cases with legacy
648:17 - go length projects you might need to
648:18 - change the checkered location there's
648:20 - not really any reason to ever touch
648:21 - these options but it's just the fact
648:23 - that they are available to you i
648:25 - wouldn't even know outside of that
648:27 - golang project use case why you never
648:29 - touch these things but they are here
648:30 - okay
648:31 - [Music]
648:35 - hey this is andrew brown and we're
648:37 - taking a look at context and gitpod url
648:39 - so a context represents a state within
648:41 - your git source code and with a get pod
648:43 - url you can quickly load an environment
648:45 - for a context so here we have the git
648:48 - pod url it starts with this gitpodio
648:51 - forward slash pound and then it's
648:53 - followed by a url and that is what
648:56 - gitpod is going to try to figure out the
648:58 - context of when it launches
649:00 - our workspace so the first is repository
649:04 - con context and so this is just you
649:06 - provide a repository it's going to open
649:09 - it up for you to work in then you have
649:11 - branches
649:12 - or branch and commit contacts so this is
649:14 - really useful if you are doing feature
649:16 - branch workflows or that's how you do
649:18 - that kind of stuff or you just have any
649:20 - kind of branches that you have there
649:22 - when you have commit contexts that's
649:23 - when you are digging back in your old
649:25 - code maybe you are trying to revert code
649:27 - back to a previous state or there's a
649:29 - deep rooted issue and you're just trying
649:31 - to rule it out by going to a specific
649:33 - version uh there so here is a branch and
649:35 - here is a commit message with its shaw
649:39 - there that's the code on the end
649:41 - then you have issue context so feature
649:42 - development or bug fixing so this is
649:45 - where um you know like github
649:47 - has a project management tooling
649:49 - and you can say okay somebody opened up
649:51 - this feature this bug this whatever
649:53 - request and you can then open it
649:56 - in the context there
649:58 - then you have pull and merge request
650:00 - contacts so this would be for like code
650:01 - review before merging for deployment so
650:04 - here we have a pull request and so get
650:06 - pod url support github get lab bit
650:08 - buckets so if they have integration
650:10 - they're of course going to support the
650:12 - get pod url for that okay
650:14 - [Music]
650:18 - all right let's take a look here at
650:20 - share snapshot workspace so this will
650:23 - let you take a snapshot url of your
650:25 - current uh workspace at any time and
650:27 - share them with others so the way that
650:29 - would look like is you drop down file
650:31 - you go to get pod share workspace
650:33 - snapshot you can also open it up in the
650:36 - command palette and from there
650:38 - it will start to create a snapshot and
650:41 - so i think this would show up as a build
650:44 - phase underneath in kubernetes we talk
650:46 - about those underlying phases somewhere
650:48 - in the course here
650:49 - and from there
650:50 - it's going to say okay it's generated
650:52 - you can go copy that url to your
650:54 - clipboard and that's what it looked like
650:55 - so notice it has the pound
650:57 - snapshot forward slash and then a big
650:59 - long uuid
651:01 - uh there and so
651:02 - that's pretty much the process not too
651:04 - complicated so anyone clicking on such a
651:07 - snapshot link will get a complete clone
651:09 - of your workspace including the state
651:12 - of the workspace and the vs code layout
651:14 - so workspaces created from snapshots are
651:17 - treated as restarts so you can configure
651:19 - them to launch differently than if you
651:20 - had created a fresh workspace from git
651:23 - unlike sharing running workspaces
651:25 - snapshots workspaces are full copies
651:27 - this means developers can do whatever
651:29 - they like with the content no access to
651:32 - your credentials or environment
651:33 - variables are shared and we will double
651:35 - check to make sure that is true um but
651:38 - yeah that's that's share snapshot
651:40 - workspace okay
651:44 - [Music]
651:45 - so the other way of sharing git pods is
651:49 - via the share running workspace which
651:51 - allows multiple developers to
651:52 - collaborate on a single workspace in
651:55 - real time and the flow here goes as
651:57 - follows turn on sharing for the current
651:59 - workspace copy the current link to the
652:02 - uh to the workspace share the current
652:04 - workspace with other developers so the
652:06 - idea is it'll be a share button down
652:07 - below you press it you turn it on you'll
652:10 - get this link
652:11 - and then you'll just share that with
652:13 - other developers so a shared running
652:15 - workspace cannot be opened in the
652:16 - desktop vs code unless you're the owner
652:19 - of the shared running workspace so if
652:21 - you are used to using the desktop vs
652:23 - code and somebody shares a workspace
652:24 - just understand that there are those
652:26 - limitations but i have to be uh very
652:30 - careful here to tell you that when you
652:32 - share a workspace you are literally
652:34 - giving access to someone else to act as
652:37 - you within your workspace they can
652:39 - access sensitive information such as
652:40 - access key secrets stored in the
652:42 - environment variables
652:44 - the commits in the workspace will show
652:45 - up as you instead of the guest developer
652:48 - they can share that link with other
652:49 - people and you wouldn't even know it
652:51 - it is not easy to tell who is currently
652:53 - editing in your current workspace so
652:55 - it's generally recommended to avoid or
652:57 - be very careful when sharing a running
652:59 - workspace and it's just that it's just
653:01 - the state of this this feature for the
653:03 - time being so getpod has made sharing
653:06 - available to you they're going to
653:07 - continue to develop this so that you
653:09 - have more visibility over time but just
653:11 - understand that there might be some
653:12 - limitations there so if this is the
653:14 - future just review this and see if it's
653:16 - still true uh because some of these
653:18 - might have been mitigated by the time
653:19 - you were watching this video but just in
653:20 - case uh be on the side of being wary
653:23 - okay
653:24 - [Music]
653:28 - hey this is andrew brown and we are
653:30 - taking a look at getpodcli so this
653:32 - allows you to perform a variety of
653:33 - utility commands useful for day-to-day
653:35 - use in your gitpod workspace so
653:37 - getpodcli comes pre-installed in your
653:39 - workspace and is accessible via the
653:41 - terminal so let's take a look at the
653:43 - commands that we have available to us so
653:45 - notice that it always starts with gp
653:47 - okay so that is the name of the cli but
653:51 - we have help so help about any command a
653:54 - net so create a git pod configuration
653:56 - for this project env controls user
653:59 - defined persistent environment variables
654:01 - url prints the url of this workspace
654:04 - open opens a file in git pod
654:07 - preview opens a url in the ides
654:10 - preview
654:12 - forward port so make a port available on
654:15 - 0.0.0.0
654:17 - so it's exposed to internet um but you
654:19 - know i don't really understand what
654:21 - they're saying there because the way
654:22 - i've been using it is just to forward
654:24 - one port to another and we saw that in
654:27 - that section earlier when we were
654:28 - covering ports so maybe it has more than
654:31 - one purpose here we have a weight port
654:33 - so waits for a process to listen on a
654:35 - port sync a weight so weights an event
654:38 - triggered using the sync done
654:41 - and then sync done notifies the
654:43 - corresponding sync await calls that this
654:45 - event has happened so a lot of these
654:47 - we've actually already encountered in
654:49 - the course so i'm not going to cover
654:50 - those again here but we will cover the
654:53 - ones that we have yet to
654:55 - explicitly
654:56 - uh uh talk about okay
655:02 - all right let's take a look at the uh
655:05 - get pod cli open command and this will
655:07 - open the target file in the code editor
655:09 - so the idea is you're gonna say gp open
655:12 - and then give the path to the file that
655:13 - you want to open
655:15 - and so here i'm just doing gp open gem
655:17 - file and then it opens the gem file
655:19 - there uh and so that's just a a very
655:21 - convenient way of opening files okay
655:24 - [Music]
655:28 - all right let's take a quick look here
655:30 - at the gp url cli command which will
655:33 - turn the gitpod workspace url so there i
655:36 - type in gpurl and then i get that there
655:38 - and i just wanted to show you that if
655:40 - you type in env and you do a grep get
655:42 - pod workspace url that's going to return
655:45 - uh the same values so i'm just showing
655:48 - you that it's a convenience for
655:50 - uh getting the getpod workspace url
655:52 - environment variable okay
655:58 - hey this is andrew brown and we are
655:59 - taking a look at the preview command for
656:02 - the getpodcli so gpreview
656:04 - command can be used to open a web url in
656:07 - line with the vs code editor so here you
656:09 - can see me using the gp preview command
656:12 - using some fancy um uh bash scripting
656:15 - with it to open up the current uh
656:18 - machine and so you know you can see that
656:20 - it's completely in line within the code
656:23 - editor so you can use echo
656:26 - echoing out the gpurl and modify the url
656:28 - to include the port number and so
656:30 - originally when i was doing this and you
656:32 - can see this in the example here that i
656:33 - was doing this like weird sed thing
656:36 - because i didn't realize you could just
656:38 - do this down below so you could do gp
656:40 - preview and then do gp url 3000. i was
656:43 - doing like some weird stuff there
656:45 - but i found another repository that had
656:47 - a more convenience method so
656:49 - um once i discovered that i had to go
656:51 - back and reshoot this video so i just
656:53 - want you to know that that's the way you
656:54 - would do it this one down below the ones
656:56 - above here is totally acceptable as well
656:58 - but this is what you'll probably want to
656:59 - do and what i'll be showing uh in the in
657:02 - the follow alongs okay but there you go
657:08 - hey this is andrew brown and in this
657:10 - follow along i just want to cover some
657:11 - of the cli commands i haven't really
657:13 - been using that much like open url and
657:15 - preview
657:16 - just so that you know what to use them
657:18 - for so i'm going to go here and type in
657:20 - git pod cli and we're going to create
657:22 - ourselves a new private repository out
657:24 - of remy file and we're going to go ahead
657:26 - and get this going here um and we are
657:29 - going to launch ourselves a new git pod
657:31 - here and we'll give it a moment
657:35 - and i really don't think if you go to
657:38 - the cli here and they really should add
657:40 - this in the documentation um but i don't
657:42 - think that the preview at least i didn't
657:45 - see it had a very good example
657:48 - so it says gpurl8080
657:52 - oh i guess they did and i just never
657:54 - noticed
657:55 - so that's okay i'm going to go back to
657:57 - the preview you're not going to notice
657:58 - it but i'm going to reshoot the cli
658:00 - preview to show this more condensed
658:02 - example
658:03 - but what we're going to do here is
658:05 - create ourselves a new folder called
658:07 - oops i want a folder not a file a new
658:10 - folder called public
658:12 - and in that folder we're going to create
658:14 - a new file called index
658:16 - dot html and within that we're going to
658:19 - say hello world
658:21 - and then from there we are going to go
658:24 - and open up our terminal
658:28 - and i'm just going to install
658:32 - http server globally
658:36 - okay and then we'll just say http server
658:39 - and leave it where it wants to be and
658:40 - say port 8080
658:43 - and so it's going to ask us if we want
658:44 - to open that port i'm going to say make
658:45 - public
658:47 - and
658:49 - from there
658:51 - i didn't see it pop up
658:54 - but we'll go over to our remote explorer
658:55 - here left-hand side just make sure that
658:57 - the website is working there it is so
659:00 - you know if we wanted to open up let's
659:02 - say we close this file here and we
659:03 - wanted to open that file from the cli
659:05 - i'm just going to type in clear here
659:06 - what we could do is type in gp open
659:10 - and then i could type in relative to
659:12 - where i am so public
659:13 - index.html and it's going to open that
659:15 - up
659:17 - oh sorry it's gp not gh i'm thinking
659:20 - github it will be that'll be the way we
659:22 - can open up files and that's for the
659:23 - convenient when you're trying to uh
659:25 - when you can locate things easily
659:26 - through here and you want to open them
659:28 - up
659:29 - in the top there
659:31 - and then we'll take a look at um clear
659:34 - so i'm going to see if we have two
659:35 - bashes running we don't so i'm going to
659:36 - at this top one here can i rename this i
659:39 - can so we'll go here and just say like
659:41 - http server here
659:43 - and i'm just going to start up our
659:45 - server again so we'll say http server
659:48 - port 8080
659:50 - and then down below here where we have
659:52 - our little playground i'm going to just
659:54 - type in gp
659:56 - open 8080.
659:59 - oops uh sorry i meant to say gp oops
660:02 - clear
660:03 - gp url 8080.
660:07 - and so notice what it did is that if you
660:08 - just type in url
660:10 - it's going to give you the plain jane
660:12 - url which is actually just the url up
660:14 - here if you put in 8080 it's going to
660:18 - add it over here and so then what you
660:19 - can do is take this url and you can
660:22 - paste it up into here which is great
660:24 - and so now we could use the gp preview
660:27 - um
660:29 - which will uh open something over here
660:31 - so if i was to do something like and i
660:33 - don't think it'll work in here but i'm
660:34 - gonna just type in google.com
660:37 - okay for whatever reason it doesn't like
660:40 - things that are outside the scope of
660:41 - this project but just showing you an
660:43 - example of opening that window there
660:45 - what we could do is type in get
660:47 - gp preview and then do this so this is
660:50 - like a bash thing for encapsulating uh
660:52 - stuff and we just type in gpurl8080
660:56 - and so now we can open it up here and so
660:58 - that would be the convenience way of
661:00 - doing that so you know that's gp open gp
661:04 - url and gp preview if we just want to
661:06 - look at all them that are there i think
661:08 - we've pretty much used everything the
661:10 - other one we haven't used is stop
661:12 - um so
661:15 - i guess for fun we can just do it so
661:17 - we'll just do gp stop
661:20 - and that will that should stop this
661:22 - environment so we'll give it a moment
661:23 - see what happens
661:32 - is it stopping uh it doesn't look like
661:34 - it's stopping
661:37 - oh it did okay so there you go so that
661:39 - is all the cli stuff uh covered okay
661:46 - hey this is andrew brown and we're
661:47 - taking a look at the get pod palette
661:49 - commands so the gitpod palette commands
661:51 - is a series of commands you can use
661:52 - within vs code to perform gitpod actions
661:55 - and so this is in the command palette
661:57 - within vs code but if you click the
661:59 - little orange button in the bottom left
662:01 - corner you'll get all the possible
662:03 - commands so let's just quickly go
662:04 - through them to see if there's anything
662:06 - that you might like to use uh during
662:08 - your workflow and through the follow
662:10 - alongs you'll see me using some of these
662:11 - because they are useful okay so the
662:14 - first is stop workspace so stops does
662:16 - not terminate but stops the current
662:17 - workspace open settings so it opens
662:19 - account settings for the current
662:21 - gitpod user open access control so it
662:24 - opens gitpod integrations page open
662:26 - context it opens the context this is
662:28 - really good when you need to go back to
662:30 - the repository i use that one quite a
662:32 - bit open dashboard so it opens the
662:34 - gitpod io
662:36 - platform default page so it's going to
662:37 - take you to projects documentation
662:40 - follow them on twitter which doesn't
662:42 - hurt to have that in there i suppose
662:44 - open community chat so that's going to
662:46 - be on discord open community forum
662:47 - that's going to be on discourse
662:49 - report an issue that just takes you to
662:51 - github issues
662:53 - upgrade subscription this isn't going to
662:54 - upgrade your plan if you click on it
662:56 - it's just going to take you to the plans
662:57 - page so you can choose a plan so don't
662:59 - be afraid to click on that
663:01 - extend workspace timeout so only works
663:03 - with specific plans
663:05 - share workspace snapshots so this is
663:07 - when you create a snapshot and it
663:08 - returns a snapshot link for sharing
663:11 - share running workspace so turns on
663:13 - sharing i don't i generally don't do
663:15 - from the command panel there's like a
663:16 - little share button down below
663:18 - um open in vs code so open the workspace
663:21 - in your desktop
663:23 - version of vs code so the desktop vs
663:25 - code
663:26 - or insiders and that's just the beta
663:28 - version of vs code it's just another one
663:30 - okay so that is the command palette or
663:33 - palette commands for git pod okay
663:39 - hey this is andrew brown and in this
663:41 - follow along we're going to just take a
663:42 - quick look here at the get pod uh
663:44 - palette commands so if you're not
663:46 - familiar with uh command palette within
663:49 - visual studio code it's a way of
663:50 - executing a lot of uh easy
663:53 - scripts i suppose you could describe it
663:55 - as so the way you would access that is
663:57 - you go to the hamburger menu here in the
663:59 - top left corner and you go to i believe
664:02 - view you'll see command palette notice
664:04 - it says ctrl shift p so i'm going to
664:06 - type that instead and if we type that we
664:08 - have a bunch of different commands here
664:10 - that we can enter in and this is really
664:12 - dependent on what extensions you have
664:13 - installed or just uh you know the
664:16 - defaults that come with it
664:18 - i don't use visual studio code a whole
664:20 - lot so i don't even know what the most
664:21 - common ones are but i do know that there
664:23 - are git pod ones if you type in git pod
664:25 - these are the ones here and notice that
664:27 - there are a few extra things here that i
664:29 - typed in that will not appear if we just
664:30 - go click on the other area so just
664:32 - notice that you might have some
664:33 - advantage there if you just type it in
664:35 - but we click off and you open that
664:37 - hamburger menu again there are some of
664:39 - them the most commonly used ones here uh
664:41 - down below but if you want all the
664:43 - command uh palette or or git pod uh
664:46 - palette commands if you click this
664:48 - orange button down below here it'll pop
664:50 - them up okay so you know just so you
664:52 - know how to get to those
664:54 - again if you click any of these and
664:55 - you've seen us do this a bunch of times
664:57 - within the course i go to open context
664:59 - it'll open up where this repository is
665:01 - things like that but i just wanted to
665:02 - make sure you understood uh what command
665:05 - palette was and how to access all the
665:07 - get pod command palettes okay
665:09 - [Music]
665:13 - hey this is andrew brown and we are
665:14 - taking a look at teams and projects
665:16 - within gitpodio so getpod team allows
665:19 - you to invite people to collaborate on
665:20 - your project
665:22 - and so you can create multiple teams and
665:24 - and uh one thing i noticed is that if
665:27 - you try to name your team
665:29 - something like marketing it won't be
665:30 - permitted because getpod is utilizing
665:32 - something called the big username
665:34 - blocklist so just understand that there
665:36 - might be some limitations around the
665:37 - naming you might have to be clever
665:39 - but probably you won't run to the issue
665:41 - i just choose to choose the name
665:43 - marketing i just happen to hit that
665:44 - block list
665:46 - within a project you can have members
665:48 - and sign them roles and so you have two
665:51 - types of roles member and role
665:53 - and then projects has the main advantage
665:55 - of allowing you to utilize pre-builds
665:56 - and i want to point out that you have a
665:58 - personal account and you can think of it
666:00 - as a team of one and so within your
666:02 - personal account you can create projects
666:04 - and that in turn will allow you to use
666:06 - pre-build so pre-build is not
666:07 - exclusively
666:09 - for just teams okay just understand it's
666:11 - specific to projects
666:14 - [Music]
666:18 - so let's take a closer look at um get
666:20 - pod
666:21 - roles so within a gitpod team a member
666:23 - can be signed either the owner or member
666:25 - role but the key difference between an
666:28 - owner and a member is that a member
666:29 - cannot manage team members or delete the
666:32 - team and so this is the full matrix here
666:35 - and while i'm just getting my pen tool
666:36 - out so we have manage team members
666:37 - delete
666:38 - delete team invite team members add
666:40 - projects remove projects add project
666:42 - view branches view pre-builds trigger
666:44 - pre-builds and so at this stage of the
666:46 - product you just have those two roles i
666:49 - would imagine in the future they'll
666:50 - probably open it up so you can choose
666:52 - exactly what you want but for the time
666:53 - being that is what we have and it works
666:56 - pretty well
666:57 - [Music]
667:02 - hey this is andrew brown and we are
667:03 - taking a look at pre-build so pre-builds
667:05 - is a continuous build server that will
667:07 - run every time you push code to
667:09 - repository so here is an example of a
667:12 - bunch of pre-builds that are happening
667:14 - for a workspace and so these are
667:17 - really convenient let's talk about what
667:18 - a pre-built workspace is so pre-builds
667:20 - will execute the before internet
667:22 - commands within your
667:24 - kidpod.yaml files on a git commit and
667:27 - produce a snapshot and we saw that
667:29 - earlier in the course when we were
667:30 - looking at execution order steps where
667:32 - we have kind of a visualization there
667:34 - the snapshot can be launched uh which
667:36 - will save your development team time
667:38 - waiting for lengthy builds
667:40 - okay
667:42 - um the idea here is you can trigger
667:43 - pre-builds automatically so a pre-build
667:45 - will trigger on the default branch for
667:47 - pull requests and merges from the same
667:48 - repository i have yet to see options to
667:50 - allow you to kind of customize that i'm
667:53 - sure they'll do that in the future you
667:55 - can also trigger pre-builds manually so
667:56 - a pre-built can be manually triggered by
667:58 - adding the pound pre-build to a git pod
668:01 - url if that's one way you want to do it
668:03 - i also think that there's a tab in a
668:05 - project that lets you do it like
668:07 - configuration or the file itself but i
668:10 - don't think that would be a way that you
668:11 - generally do if you wanted to do it you
668:12 - probably use the get part url
668:14 - prebuilts have a timeout of one hour of
668:16 - the combined time of the before init
668:18 - before failing so if you know if it
668:20 - takes too long it will just fail here
668:21 - you can see i have a failed example uh
668:24 - in that page there so they took too long
668:26 - for whatever reason get pod does not
668:28 - cache artifacts between pre-built each
668:30 - pre-built is a clean environment
668:32 - what's interesting is that they do have
668:34 - something with dazzle which will
668:36 - actually
668:37 - cache layers and stuff like that so i
668:40 - think that you know this
668:42 - might be an option in the future that we
668:44 - might have that functionality but there
668:45 - you go that's pre-builds
668:47 - [Music]
668:52 - so with tail scale you can automatically
668:54 - and securely connect your git pod
668:56 - workspace to other development resources
668:58 - whether in the cloud or on-prem such as
669:01 - a production database behind your
669:02 - company's firewall so the idea here is
669:05 - that you have your laptop it's going to
669:06 - connect to
669:08 - tail scale and through tail scale you'll
669:10 - have a secure connection to git pod when
669:12 - you're on the go so let's just define
669:14 - some of these terms like
669:15 - vpn so a virtual private network or vpn
669:18 - extends a private network across a
669:20 - public network and enables users to send
669:23 - and receive data across shared or public
669:26 - work networks as if computing devices
669:28 - were directly connected to the private
669:30 - network then the question is what is
669:32 - wireguard so it's a simple yet fast and
669:34 - modern vpn that utilizes
669:35 - state-of-the-art uh cryptography and so
669:38 - then we have tail scale so tail scale is
669:40 - built on top of the uh the point to
669:43 - point open source wire guard protocol
669:45 - which powers an encrypted mesh network
669:48 - or tail net gitpod has an official
669:51 - partnership with wireguard so if you
669:53 - need to have point-to-point vpn access
669:57 - um then just so you have a secure
669:59 - connection this is what you can use okay
670:01 - [Music]
670:05 - this is andrew brown and this follow
670:07 - along we're going to learn all about
670:08 - projects and the features underneath it
670:10 - so probably cover pre-builds as well so
670:13 - what i've done is i have a one git pod
670:16 - account here and i have another one over
670:18 - here on the side i'll just pull it up
670:20 - here i had to do this one in firefox and
670:22 - in the course we might have set up a
670:24 - project before i'm just connecting here
670:26 - uh to my my gitpod account here so here
670:29 - is one i know they're both named andrew
670:30 - brown but they're on different emails
670:32 - here and so the idea is i want to create
670:34 - a project and then once i'm in a project
670:36 - we want to kind of explore the feature
670:37 - set that is there okay
670:39 - so uh from the chrome account here what
670:42 - i'm going to do is drop down the top
670:43 - here and go to new team we're going to
670:45 - name that so i'm going to name this uh
670:48 - my
670:50 - um get pod team
670:52 - or maybe exam pro code team and i might
670:55 - have named that one previously in
670:56 - another video that's totally fine and so
670:58 - now that i have my team i need to start
671:00 - inviting people so we'll make our way
671:01 - over to members and from here you can
671:03 - see i have the exam pro co i'm gonna go
671:05 - ahead and invite one and grab this link
671:08 - and i'm gonna go over here to my other
671:10 - browser firefox we'll paste that in
671:12 - there
671:12 - and now i've been added so there's no
671:15 - prompt to say hey do you want to be in
671:16 - this group it's just if you uh click
671:18 - through the link you'll be added to it
671:20 - so we'll go back here and we'll just
671:22 - close and we'll give it a refresh
671:25 - okay
671:26 - give it a moment
671:28 - and so if i want to change them to a
671:31 - oh sorry a member i can i don't see why
671:34 - you'd want to switch yourself out from
671:36 - owner um i don't know what happened if
671:37 - you did that because if you had two
671:39 - members
671:40 - that could be disastrous but i don't
671:41 - even want to try because i just don't
671:42 - want that to get stuck
671:44 - um and so
671:46 - there's this option here remaining owner
671:47 - so i think maybe you're not allowed to
671:49 - at least remove one but again i'm not
671:51 - going to test that functionality there
671:54 - they have a filter here you can only
671:55 - remember there's only two roles there's
671:57 - not much going on there let's take a
671:58 - look at settings
672:00 - under here all we can do is delete the
672:01 - team
672:02 - i imagine the future will expand that
672:04 - and then we have workspaces um so as we
672:06 - add projects here that will go there so
672:08 - let's go ahead and add our first new
672:10 - project
672:11 - and so uh here we have a
672:14 - you actually have to select the context
672:16 - here so
672:17 - this is where you might select a
672:18 - different repository so up here it says
672:20 - git repository git lab so you can change
672:22 - this out to gitlab or github i guess
672:24 - bitbucket is not an option here as of
672:26 - yet
672:27 - but i'm going to switch over to github
672:29 - and so now here are all of our
672:30 - repositories that we could collaborate
672:32 - on so here i might want to launch up um
672:35 - hello world i might have like a hello
672:37 - world one in here so we'll select this
672:39 - one here
672:40 - and from there we can go ahead and
672:42 - create that new workspace
672:44 - all right and so here's student
672:45 - pre-built so as soon as you use
672:48 - as soon as you use
672:50 - projects
672:51 - pre-built are going to happen so i don't
672:53 - think there's an option to turn
672:54 - pre-builds off it's just like if it is a
672:56 - project it will always do pre-builds and
672:59 - in that case you might run into
673:01 - some uh scenarios there or some issues
673:03 - there
673:04 - but we'll we'll address those maybe in
673:06 - this fall along here
673:07 - but anyway so
673:09 - uh this project has launched which is
673:11 - really great
673:12 - uh and that is running but now if we go
673:14 - back to get pods so we'll open up our
673:16 - hamburger menu here and go back to our
673:18 - get pod dashboard
673:20 - and we go under the workspaces we can
673:23 - see oops notice here i'm not in um
673:26 - the right project so we go here go to
673:28 - project so there it is so we can see
673:30 - that we're on main it started a few
673:31 - seconds ago it has pre-builds
673:34 - and if we go to view all
673:37 - we can just kind of look at some of the
673:39 - options here so here a pre-build was
673:41 - successful
673:42 - and we go to configuration here and so
673:44 - we have some options here so
673:45 - configuration already exists in git
673:48 - run a pre-build or open the new
673:50 - workspace to edit the controls so i
673:52 - suppose you can edit this and then run
673:54 - or pre-build i've never found any reason
673:56 - to do this um but i guess it could be a
673:58 - way of like forcing a pre-build for you
674:00 - to test things
674:02 - we'll go back to our branches here and
674:04 - apparently you can do things with
674:05 - branches as well
674:06 - um so i'm not exactly sure what we would
674:10 - do here
674:11 - but um
674:13 - i guess like we could just go ahead and
674:14 - create a branch and see what happens so
674:15 - we go get check out hyphen b um
674:20 - we'll call it development here
674:23 - because i'm just trying to think like
674:24 - how that would affect workflow maybe
674:25 - staging might be a better branch i'll
674:27 - just say git push
674:29 - and then we'll have to push upstream
674:31 - here which is totally fine we'll say
674:32 - allow and hit
674:34 - enter okay we'll make our way back over
674:37 - here
674:38 - and if we give it a refresh i'm going to
674:40 - see if that registers that other branch
674:46 - okay and so i guess from here this would
674:47 - be a great opportunity for you to launch
674:49 - a new workspace so this will do
674:51 - pre-builds always the main branch will
674:53 - always do it
674:55 - and so i guess here
674:57 - we can run it manually
675:00 - so i don't know i don't know if you push
675:01 - to a branch if it will actually trigger
675:04 - it i'm not sure if that pre-build is
675:05 - running i don't see it running let's
675:07 - just give it a refresh here i i don't
675:09 - feel like i clicked it so we'll go back
675:10 - here one more time we'll say run
675:12 - pre-build
675:15 - okay so i don't see anything happening
675:17 - here um unless it's delayed or something
675:19 - but from the documentation remember you
675:20 - can only really do it for the main
675:23 - branch so maybe that functionality is
675:25 - just not there yet but we can launch a
675:27 - new workspace for that staging
675:28 - environment that or maybe there's
675:30 - nothing to pre-build because
675:32 - it is forked off that other one so maybe
675:34 - it's based off the the main pre-build so
675:37 - what we'll do is we'll just make some
675:39 - super minute change to the code here and
675:42 - then maybe that is what we need to
675:43 - trigger it so i'll go over here and
675:45 - we'll just say hello world and we'll
675:47 - just add an extra exclamation mark here
675:50 - and what i'll do is i will go back to
675:53 - um
675:54 - we'll commit that here
675:56 - so we'll add it and say minor
675:58 - commit because i'm really curious that
676:00 - the pre-build will trigger
676:06 - and uh we will go back here
676:10 - to uh this oops i guess we'll have to go
676:12 - back to the dashboard and then close
676:15 - that tab
676:17 - and so now what i want to know is it
676:18 - going to trigger
676:20 - that pre-built because i don't think it
676:22 - will on this branch here right so we go
676:24 - over here no pre-branches or pre-builds
676:26 - what if i do run pre-build
676:29 - okay
676:30 - ah so now it's running so i think that
676:32 - was the case was the fact that i had
676:34 - forked it
676:35 - and or not forked it but i had created a
676:37 - branch but it was like there was no
676:38 - difference between the main ones so
676:39 - there was no reason for it to run a
676:41 - pre-built
676:42 - now will it run and pre-build every
676:43 - single time i'm not sure so again we
676:46 - will go ahead and launch
676:48 - this new workspace
676:52 - and we'll just make a test see here if
676:54 - it
676:55 - automatically runs
676:56 - because maybe once you've done one
676:58 - pre-build it will just keep triggering
676:59 - but as far as i'm aware it shouldn't i
677:02 - think it would just be it wouldn't do
677:03 - that so go back here add another
677:05 - exclamation mark whoops or net sign
677:08 - that's totally fine too it doesn't
677:09 - really matter we're going to go ahead
677:10 - and commit that into exclamation
677:19 - and we'll say okay
677:28 - and we'll give it a moment to sync we'll
677:29 - say okay
677:32 - just making sure it syncs because it's
677:34 - doing this funny thing here so i just
677:35 - don't have confidence that it's doing
677:36 - what it's supposed to be doing
677:40 - and while we're waiting on that i'm just
677:41 - going to open up the dashboard again
677:42 - here
677:45 - and i'm also going to open up the
677:46 - context
677:47 - because i just want to see did it push
677:49 - that change right so i go over here and
677:52 - we have uh we need to go to the staging
677:54 - branch right we are in staging no
678:01 - so i don't know it's acting kind of
678:02 - funny here so what i'm going to do is
678:04 - just launch it again
678:07 - and that's the nice thing when these
678:08 - environments are
678:10 - temporary you can just keep launching
678:12 - new ones so i'll just launch a new one
678:21 - we'll give it a moment here
678:25 - and so um
678:28 - if we go over to
678:29 - [Music]
678:31 - our our code here again i'm just going
678:33 - to try one more time to change this
678:38 - and we will go back here we will add
678:40 - this file we'll just say miner change
678:42 - and we'll commit this
678:44 - and we'll sync the changes again
678:48 - okay and that worked no problem this
678:49 - time so i'm not sure what the issue was
678:51 - before but that's okay and so just to
678:53 - confirm back in the staging here i'm
678:54 - just going to double check to make sure
678:56 - that change has been applied remember i
678:57 - haven't told it to manually run so
678:59 - that's what i'm really interested to
679:00 - find out here so we'll go back and open
679:03 - our dashboard
679:04 - and we are going to
679:06 - wait for that to load we'll click into
679:08 - that it says ready
679:10 - a few seconds ago i'm going to go to
679:12 - pre-builds there's only two here so i
679:14 - think again like if you want to build
679:16 - these minor ones you're always going
679:18 - like the other branches you're going to
679:19 - have to go here and uh trigger that
679:22 - though it's not saying there's anything
679:24 - new
679:25 - there's no available actions
679:30 - we'll go back over to pre-builds here
679:34 - it would probably help if i had a
679:36 - different name but that's four minutes
679:37 - ago so
679:38 - um
679:41 - yeah i'm not sure
679:43 - give you a refresh here
679:48 - so a few minutes ago so for whatever
679:49 - reason i can't seem to trigger
679:51 - a new pre-build so but anyway i guess
679:53 - the thought is like really the the stuff
679:55 - you're going to be focusing around is
679:56 - the main branch okay
679:58 - um so i think that's pretty much it with
680:01 - uh projects not super complicated but i
680:03 - think i might want to just run through
680:05 - pre-builds a bit here and just look at a
680:06 - scenario where i ran into where i was
680:08 - confused and like there wasn't an issue
680:10 - but i just wasn't uh realizing that the
680:12 - pre-build was the part that was kind of
680:14 - difficult okay so i'll just make that a
680:16 - separate video and we'll just pick up
680:17 - here in a second okay
680:19 - [Music]
680:23 - all right so what i'd like to do now is
680:25 - just to kind of show you some friction
680:27 - you might run into pre-builds because
680:29 - you need to kind of adjust your script
680:31 - to work in a pre-built environment and
680:33 - it's not hard it's just thinking about
680:34 - pre-builds personally i would recommend
680:36 - if you can to always have a pre-built
680:38 - environment or project-based environment
680:40 - so that when you engineer your git pod
680:42 - yaml file you don't have to rework it
680:44 - but let's see if we can run into that
680:46 - case so maybe a good example would be
680:47 - just to try to
680:49 - build out a very simple project that has
680:53 - um sinatra and we've done that a few
680:54 - times so maybe we can just pull from our
680:56 - existing examples so what i'm going to
680:58 - do is just go to
681:01 - getpodgitpod.com here and i'm just going
681:03 - to kind of look through
681:05 - some of my examples here um we'll go
681:08 - show more
681:09 - so we have google play drive init cli
681:12 - example website
681:15 - is this the one where we use uh sinatra
681:18 - no this looks a lot more complicated
681:19 - that's me forking their website so
681:21 - that's okay we'll just start from
681:22 - scratch it only takes like a couple
681:24 - seconds to do i just can't seem to
681:25 - remember because it's been a few days it
681:27 - looks it's for you it seems like i just
681:29 - i just recorded it's been a few days
681:30 - since i've made the sinatra one so what
681:33 - i'm going to do is create a a new
681:34 - repository here i'm just going to say
681:37 - pre-build
681:38 - sinatra
681:40 - sinatra pre-build example
681:43 - and i'm going to make this private
681:45 - and we're going to go ahead down below
681:48 - and
681:49 - add a readme file i'm going to create
681:51 - that repository we're going to give that
681:52 - a moment to get created we're going to
681:55 - go ahead and launch that git pod we're
681:56 - going to go to sinatra
681:59 - ruby just so that we can get a little
682:01 - bit of code here to work with and that's
682:03 - all we're going to really need so i'll
682:05 - go back here and give it a moment to
682:07 - load we're going to go ahead and make a
682:09 - new file i'm going to call this
682:10 - server.rb whoops
682:12 - server.rb
682:16 - uh
682:17 - rename
682:20 - we're gonna go ahead and paste that on
682:22 - in there so we'll say allow and so we're
682:24 - requiring our sinatra we'll need a gem
682:26 - file as well actually i'm gonna use
682:28 - bundler to do that so we'll go to new
682:30 - terminal and we'll say bundler init
682:35 - and that will give us a gem file to
682:37 - start off with i need sinatra so i'll
682:39 - copy the contents there down below we'll
682:41 - just type in jam sinatra so that's fine
682:44 - we'll do a bundle install to install
682:46 - sinatra
682:48 - and so once we have that there um we're
682:51 - going to just take out the that part
682:53 - there so we don't have to worry about it
682:54 - and so now we need to create our gitpod
682:57 - file so we'll say gpnit they'll get us a
683:00 - starting script here port 3000 is okay
683:02 - for me i'm fine with that and so i need
683:04 - a few things here i'm just looking off
683:06 - screen to
683:07 - this code here to see
683:09 - what it is that we can do here so i
683:10 - don't have to forget
683:12 - but we don't need a before command
683:14 - because we don't really need to change
683:15 - the ruby version
683:17 - uh rvm list so we are using ruby version
683:20 - 2.7.4 which is fine
683:22 - um
683:23 - but what we might want to do is to run
683:25 - something so it might do things like
683:28 - bundle install something we definitely
683:30 - want to do
683:32 - and for the command we're going to want
683:33 - to start this uh the servers up saying
683:36 - bundle exect
683:38 - ruby
683:41 - ruby um
683:43 - it was a port
683:46 - 3000. i can't remember how we set the
683:48 - sinatra ports
683:49 - go the docs here
683:51 - ports
683:53 - uh configuration settings ports
683:56 - port sports ports
683:58 - it's like setport like that eh
684:02 - so let's just say um whoops we'll go
684:04 - back to our code over here
684:09 - where's the code oh we're in hello world
684:10 - whoops
684:12 - so go back to this one up here and we'll
684:13 - go into our server file here
684:16 - and we'll just say
684:18 - set environment
684:21 - actually it's set port
684:25 - and that's where we do the 3000 right
684:27 - so
684:29 - what i'm trying to get at is that um
684:32 - let's say we want to actually set the
684:34 - we'll just say env
684:36 - and we'll just say app port here
684:40 - and as an example we might want to
684:42 - set the
684:44 - um
684:46 - in here the port number so we might go
684:48 - like
684:48 - export
684:50 - port app port
684:53 - 3000
684:55 - and actually i don't even know what it
684:56 - starts on by default so that's not going
684:58 - to check first just case it starts on
685:00 - that port by default server.rb here
685:04 - so this starts on port 8080 so let's say
685:06 - we wanted to be on this port it's going
685:08 - to look at like export um environment
685:11 - variable
685:13 - as an example here
685:16 - i always forget how to do it so i just
685:17 - double check i always feel like there's
685:18 - like a dollar sign i'm missing
685:20 - so it's export name equals whatever okay
685:23 - so we'll go back over here
685:26 - and so this would set the app port there
685:28 - and so this app down below should pick
685:30 - it up right if i just do
685:33 - server.rb
685:37 - that should
685:38 - technically work port 3000 that's
685:40 - totally fine
685:42 - so what i'm going to do now is just
685:43 - restart this app and just put that there
685:45 - so that doesn't error out
685:47 - but i'm going to commit these
685:51 - okay so attempt to or sorry just initial
685:54 - commit
685:58 - okay and then we'll just sync those
685:59 - changes we'll say okay we'll give it a
686:01 - moment
686:02 - i'll close up some of these other tabs
686:04 - here
686:05 - and so what i'm hoping for
686:08 - and we'll open up the context here what
686:09 - i'm hoping for here is that when i
686:12 - launch this get pot it's just going to
686:13 - work right it's going to do the bundle
686:15 - install it's going to export the
686:17 - environment variable of course we could
686:19 - just set the environment variable in the
686:20 - task but i'm trying to stage an example
686:22 - where when you move over to pre-build
686:24 - you have to kind of consider how that's
686:25 - going to change
686:27 - so we'll give it a moment
686:31 - and it's opening the tab it's good it's
686:33 - starting on port 3000 and it works right
686:36 - so
686:37 - this part here
686:39 - whoops
686:40 - um
686:42 - this part here worked right so what i'm
686:44 - saying is like when we move this over to
686:46 - pre-builds this init step is going to
686:48 - run
686:49 - but the problem is is that it's not
686:50 - going to carry over the state over to
686:52 - this one so it might install but i my
686:54 - expectation is this export option won't
686:57 - be there or another thing it might be
686:58 - like cd into the directory so one thing
687:00 - that we might do that might be a better
687:02 - example would be to make whoops to make
687:04 - a subfolder here so we might make a new
687:06 - folder here and we'll call it um
687:09 - you know application or sorry project
687:12 - here
687:13 - and from here i might take uh these
687:16 - files here and just move them
687:18 - into yep let's say move it's okay
687:21 - we'll take the gem file here and move it
687:22 - into this project here
687:25 - okay
687:26 - and actually i might call it app instead
687:28 - so we'll say rename app
687:31 - and so instead of doing this you might
687:33 - say like cd
687:35 - app right so we're going to cd into it
687:37 - first
687:38 - and so let's see if that works
687:40 - because again i'm just trying to stage
687:41 - that example to show you what i'm
687:42 - talking about because i remember that's
687:44 - where i ran into seeding where i thought
687:45 - i would be already seated in so if we cd
687:47 - in the nit will it do in the command i
687:49 - believe it will
687:50 - so uh small changes here
687:53 - put things in a folder
687:56 - and we'll go ahead and commit that we'll
687:58 - say yes
688:00 - we will sync those changes we'll say
688:01 - okay
688:05 - and
688:06 - what we'll do here is we'll wait a
688:08 - moment and i'll go back over to this
688:10 - i'll close this tab out and we'll launch
688:12 - git pod again and that should cd into
688:14 - that directory and work and then we will
688:16 - go then make it a project and see how
688:18 - that changes with the pre builds
688:28 - all right so we're waiting here a moment
688:31 - so it's working so it definitely seeded
688:33 - in and so
688:34 - i don't know if it shows sometimes it
688:36 - shows the script of what it ran so if
688:37 - you look at the script this is what it
688:39 - did it said cd app bundle install export
688:42 - and then it did the the next thing which
688:44 - was the command so it's treated like in
688:46 - one go in the same environment so now
688:48 - what we're going to do is we're going to
688:50 - go make our way over to get podio
688:54 - and i want to make this actually a
688:55 - project so i'm going to make a new
688:56 - project here
688:57 - and then i want to choose this project
688:59 - here when it when it gets a moment here
689:01 - and we're going to choose the um
689:04 - it's on git lab again so that's fine
689:05 - we'll just change that to github
689:08 - it really likes to default to that
689:09 - gitlab which is totally fine and this is
689:12 - called sinatra
689:13 - so we'll type in sinatra here we'll
689:15 - click here
689:17 - we'll select
689:18 - we'll create a new workspace
689:20 - and now it's going to do the pre-build
689:22 - and so my expectation is this is going
689:24 - to fail right because
689:26 - when it goes through there it's going to
689:28 - cd
689:29 - in the one thing and the other one's
689:30 - going to start not in the cd directory
689:36 - so give it a moment here
689:48 - all right and so notice it says could
689:49 - not locate gem file or bundle okay so if
689:51 - we scroll on up
689:53 - you can see um
689:55 - we are seeing that there's stuff that
689:57 - around the pre-built so it says cd app
689:59 - bundle install export stuff this is
690:01 - stuff that happened in a separate
690:03 - environment right it didn't happen
690:05 - um
690:07 - i'm just trying to see if it shows it
690:08 - very clearly yeah so these are the
690:09 - pre-built logs that it ran
690:12 - right but the thing is is that um
690:15 - that was in the pre-build environment
690:17 - we'll bring back up the slides here to
690:18 - make it more clear okay so here
690:21 - right it ran before and init so it did
690:24 - it went seeded into the app directory
690:26 - and it set the environment variable and
690:28 - then when it became over here it's
690:30 - starting from scratch so it's not in
690:31 - that cd directory
690:34 - and i don't even know the environment
690:35 - variables there let's see if that
690:36 - persisted because that might be
690:37 - interesting so i'm just going to say env
690:40 - grep and we'll say app
690:43 - port
690:45 - okay
690:45 - and it looks like it is set because it's
690:47 - saying it right there
690:49 - let's just say echo app port
690:53 - maybe dollar sign goes to show like i've
690:56 - been doing links for years i can
690:57 - remember this stuff so it's not set so
691:00 - the environment variable got set in the
691:01 - pre-build environment and it's seeding
691:03 - that directory and that's where before
691:04 - becomes very useful because it's going
691:06 - to run twice
691:08 - right so
691:09 - um this is where we would take our
691:10 - script
691:11 - and
691:12 - um the bundle install is totally fine
691:14 - there but we'll just go and we will add
691:16 - a before step
691:18 - right
691:20 - and we will just take the cd out of here
691:23 - and the app out of here
691:25 - okay and so the idea is that that's
691:28 - going to run
691:29 - both times in each environment right so
691:31 - this should technically fix our problem
691:33 - we'll go ahead and save this file and
691:35 - we'll just say fix pre-builds
691:40 - and we'll commit that
691:42 - we will sync those changes we'll say
691:43 - okay
691:45 - we'll give it a moment
691:46 - great we'll close our tab
691:48 - and i'm going to open up
691:51 - pod again
691:53 - and so you notice the pre-build's
691:55 - happening so it showed us the screen if
691:57 - our pre-builds had already occurred we
691:58 - wouldn't see it apparently you can stop
692:00 - waiting for pre-build which i would
692:02 - never do that but there could be a case
692:03 - where you have a very very long
692:04 - pre-built you just want to get into the
692:06 - environment
692:08 - so we'll give it a moment and see if
692:09 - that fixes our issue
692:17 - apparently there's a way to trigger
692:18 - pre-builds from the url it's not
692:20 - something that i have found a
692:22 - requirement to do if you're really
692:23 - interested you could look it up
692:25 - um but there's that while we're waiting
692:27 - there we might want to look at pin
692:29 - projects it's something i haven't done
692:30 - with gitpod yet
692:32 - so
692:33 - you can i guess not projects but
692:35 - workspaces
692:37 - so as far as i understand if you have
692:39 - pinned a workspace it will remain there
692:41 - longer i believe so that is one
692:43 - advantage there is that if you have an
692:45 - environment that you want to stay you
692:47 - can just pin it okay and i don't think
692:49 - it will get deleted see unpinned
692:50 - workspaces that have been active for 14
692:52 - days will automatically be deleted so if
692:54 - you have pin an environment and i don't
692:55 - know if you can pin multiple ones can i
692:56 - pin this one can i pin that one i have a
692:59 - feeling there's not like a pin limit so
693:01 - you could pin as much as you want i
693:03 - wouldn't probably recommend that
693:05 - but that might be something you need to
693:06 - do i haven't found a used to pinning so
693:08 - far here down below it says exit so i
693:10 - have a feeling that the pre-build is
693:12 - done sometimes it gets stuck on the
693:13 - screen so you can just close that out
693:15 - and go back over to your projects here
693:18 - and um just launch it again okay if you
693:21 - ever see that it's not a big deal just
693:23 - because it's ready right so
693:25 - it's not perfect right like you just
693:27 - have to kind of like and there's no
693:29 - different than like using aws cloud
693:31 - service providers you just have to kind
693:32 - of be watching and aware and just being
693:35 - like okay i've waited too long let's see
693:36 - what we can do here and have confidence
693:38 - so we're waiting a while here for this
693:40 - to start up
693:41 - and um let's see what we have so it says
693:44 - here
693:46 - uh could not find sinatra gems so bundle
693:50 - saw to the install missing gems so
693:53 - it didn't work
693:54 - as we thought it would
693:57 - we are cd into the correct directory
693:59 - we'll do grep um
694:01 - or we'll just maybe echo it so we'll say
694:03 - echo
694:04 - app env or app port
694:07 - so the port is set so that definitely
694:09 - fixed it
694:11 - why the install failed i don't know
694:16 - because it did run it up here as you can
694:18 - see
694:19 - and sinatra 2.1 is installed
694:24 - um
694:28 - let me do bundle install here
694:30 - you know it probably is
694:32 - it's my script so if you go over here
694:34 - because i changed it maybe into the cd
694:36 - directory
694:39 - because here it cd's into it right but
694:41 - it would see into that one as well so
694:42 - that shouldn't affect it
694:45 - let me just try running bundle exec here
694:47 - bundle exect
694:48 - rubyserver.rb
694:53 - okay so that runs no problem
694:56 - there's nothing to change
694:57 - so i don't really trust what happened
694:59 - there so i'm just going to throw this
695:00 - environment away and launch a new one so
695:02 - we'll open up the context we'll close
695:04 - this out we're going to wait a moment
695:06 - here we're going to go ahead and launch
695:07 - a new one i'm just gonna see we're gonna
695:08 - make a new workspace there and we're
695:09 - gonna just see if it works this time
695:11 - around because i'm not sure what it's
695:12 - complaining about
695:15 - but once you're used to using pre-builds
695:17 - and you have the environment working
695:18 - it's usually not a problem but sometimes
695:19 - there's a bit of friction moving from a
695:21 - non-project to another one and that's
695:23 - why i say like if you start with a
695:24 - project it's a little bit less painful
695:26 - someone says this task ran as a
695:28 - workspace pre-build could not find
695:30 - sinatra
695:31 - um things like that so
695:34 - run bundle and salt to install the
695:35 - missing gems
695:37 - so i'm just going to scroll up here and
695:38 - just see what it ran
695:43 - so again there shouldn't be
695:47 - a problem so i'll go back over here
695:52 - allow
695:55 - yeah so it's acting like the gems aren't
695:57 - installed is the gem file there
695:59 - the gem file lock is there
696:03 - hmm
696:08 - this is what i'm trying to figure out
696:09 - like
696:14 - hmm
696:19 - i'm not sure i'll be back here in a
696:20 - second okay all right so i had a little
696:22 - bit of time to think about it and you
696:23 - know what i think is happening is that
696:25 - when you install ruby gems they're not
696:28 - installing within this workspace
696:29 - directory and since anything outside
696:31 - this workspace directory gets blown away
696:33 - i think that's the reason why i'm having
696:35 - this issue now if you're using node node
696:37 - installs in the current directory so
696:39 - here like if i wanted to fix this
696:41 - problem i would just have to look up
696:42 - like okay how do i install uh the gems
696:45 - in the current directory if i want those
696:47 - to be cached and in place so i think
696:49 - like for ruby workflows it doesn't take
696:51 - too long to install gems but i think in
696:53 - this case for like ruby you have two
696:55 - options you can install based on the
696:56 - vendor so like
696:58 - bundler install gems in current
697:01 - directory or something like that
697:03 - so i could do this
697:07 - right and that would probably solve my
697:09 - issue
697:10 - um or
697:11 - you know i could do
697:14 - you know something else but that means
697:15 - when i run the uh uh
697:17 - bundle of stall i think i'd probably
697:19 - have to specify
697:21 - um where those gems are but you know the
697:23 - simple solution here would just be
697:25 - saying okay
697:26 - every like to this and put this here
697:28 - right
697:29 - but it really depends like if the bundle
697:30 - install takes really really long time
697:32 - then maybe i would want to
697:33 - uh move my uh gems to a vendored like
697:37 - directory like doing the path so it's
697:38 - really going to be up to you and the the
697:40 - constraints of your language but i think
697:42 - that is the reason that is happening
697:44 - there so again not a big problem i move
697:46 - that there and we're okay but yeah i
697:47 - think we're all done here and uh you
697:49 - know hopefully you understand how uh
697:51 - pre-builds work okay
697:53 - [Music]
697:57 - hey this is andrew brown and we are
697:58 - taking a look at git pod pricing so for
698:01 - good pod they have four
698:03 - uh possible plans available to you so we
698:05 - have the basic uh which is free personal
698:08 - at nine dollars usd per month
698:09 - professional 25 usd per month and
698:12 - unleashed at 39 just deeper month of
698:14 - course uh always make sure you double
698:16 - check the prices because they may have
698:18 - changed um but you know generally they
698:20 - should be this if you go look online
698:24 - they don't have
698:25 - the option to pay annually at least they
698:27 - did not see
698:28 - through the checkout process there but
698:30 - if you do need annual maybe just contact
698:32 - their team again i don't see anything
698:34 - describing like an annual discount i
698:36 - know some organizations care about that
698:38 - kind of stuff that's why i mention it
698:39 - but good pod is really uh
698:41 - nice and easy to reach out to so you
698:44 - know they probably can make those kind
698:45 - of accommodations for you
698:47 - but let's take a look at what changes in
698:49 - terms of the feature set for these plans
698:52 - so no matter what plan you're using you
698:54 - get unlimited private and public
698:55 - repositories which is really nice in
698:57 - terms of the amount of workspaces you
698:59 - can run in parallel
699:00 - it's for for free and personal
699:03 - i don't feel like i'd ever be running
699:05 - more than one workspace at a time
699:07 - but you know maybe you have more than
699:09 - one tab open and you're toggling between
699:11 - uh maybe
699:12 - different domains
699:13 - of a microservice app so that's totally
699:15 - possible
699:17 - so that's something to consider for
699:19 - professional you have eight parallel
699:20 - workspaces unless you have 16 parallel
699:22 - workspaces
699:23 - in terms of timeout it's by default 30
699:26 - minutes between basic and professional
699:28 - and on unleash you extend it to one hour
699:31 - as the default right so every time it
699:33 - launches up it will do that
699:35 - um then the next thing is how many hours
699:38 - do we get per month of
699:40 - of runtime or consumption so for the
699:43 - basic you have 50 hours for personal
699:45 - it's 100 hours a month uh and for
699:48 - professional it's unlimited hours and
699:50 - then just for the unleashed plan you
699:52 - have the option to do a three hour time
699:54 - boost so what they're saying here is
699:57 - that imagine you are
699:59 - just you're just about to go for lunch
700:00 - and you are running some kind of
700:02 - operation that you know is going to take
700:04 - a long time to run so you know you don't
700:06 - know it's going to finish but you have
700:07 - to let it run for a long time and so
700:09 - this is your opportunity to boost it so
700:11 - that your workspace doesn't time out
700:13 - after an hour and so that is the reason
700:15 - for that option and so that could be
700:17 - extremely useful okay
700:19 - so let's take a look at some of the
700:21 - other um
700:23 - plans they have that are outside these
700:24 - four here so there's the pro open source
700:27 - so this is a special plan for
700:28 - professional open source developers with
700:30 - unlimited hours on any public repository
700:33 - so you know this is just to help out
700:35 - people that are developing open source
700:36 - to help them reduce cost because it's
700:39 - a lot of work to give out
700:41 - open source stuff uh right so then
700:43 - there's a student plan so this is a a
700:45 - special plan for students so you provide
700:47 - an email uh with your uh domain of the
700:50 - institute educational institution so it
700:53 - probably have to be dot edu
700:55 - or what have you but the idea here is
700:57 - you get unleashed for nine dollars a
700:59 - month which is really nice then there's
701:01 - git pod for startups so this is eligible
701:03 - startups that can get unleashed plans
701:05 - for up to two years on git pods and
701:07 - there are some particular requirements
701:08 - so you do have to read into that but if
701:10 - you are a startup that is a great
701:11 - opportunity for you there then there's
701:13 - get pod self hosted professional so
701:15 - these run get this runs the github
701:17 - platform on your own uh private networks
701:19 - or managed uh uh like manage kubernetes
701:22 - clusters within your own aws azure
701:24 - account what have you and this is at 35
701:27 - dollars per month starting with the 11th
701:30 - user okay
701:32 - [Music]
701:36 - so let's talk about how you can monitor
701:37 - your hourly usage so as you use gitpod
701:41 - you consume in a lot of amount of hours
701:42 - based on your plan and so if you go to
701:44 - the plans page it will show you this
701:45 - remaining hours things and so here you
701:47 - can see i have 78.5 hours for the
701:50 - remainder of the month and so this is
701:51 - the way you could keep track of your
701:53 - current usage
701:54 - is there any way within the gitpod
701:57 - workspace
701:58 - uh i didn't find it um but if there is
702:01 - i'd love someone to tell me but this
702:02 - this is great too so just if you want to
702:04 - keep on top of that okay
702:10 - all right so this follow along what i
702:11 - want to show you is where you can track
702:13 - uh your current usage so here i'm on git
702:16 - pods to go to getpod.io it should
702:18 - generally bring you here to projects and
702:21 - so what we can do is make our way over
702:23 - up to here in the top right corner or i
702:25 - think this goes the same place as long
702:27 - as you're in your personal account but
702:28 - if you go to the top right corner and go
702:30 - to settings and if we go to the left
702:32 - hand side to plans
702:35 - what we'll see is this kind of bar meter
702:36 - here so it says open source but this is
702:38 - actually the basic plan so there's a bit
702:40 - of inconsistency with the naming here i
702:41 - believe you know if we go to
702:44 - uh maybe here if we just open this in a
702:45 - new tab
702:47 - um it doesn't show it here if we go here
702:50 - to this pricing tab so this says basic
702:52 - right and so it says 50 hours and just
702:54 - going over here notice it just says open
702:56 - source so
702:57 - for whatever reason there is just that
702:59 - minor inconsistency but understand that
703:01 - is the basic plan but if you notice here
703:03 - it says upgrade your plan to get more
703:05 - hours parallel workspaces those
703:06 - remaining hours
703:08 - 43.6 and so i've been using this quite a
703:11 - bit and it hasn't been running out which
703:13 - is really nice um is this present
703:16 - anywhere else no so i was looking
703:18 - through like the get pod interface or
703:20 - command pals and things like that to see
703:21 - if it would be displayed somewhere else
703:23 - it isn't uh anywhere else uh as of yet
703:27 - um i'm i could imagine that they might
703:29 - want to do that in the future but for
703:30 - the time being uh this is where you're
703:32 - gonna have to find it but honestly like
703:34 - again i'm just running this and never
703:35 - really knows so if you are uh hitting
703:37 - this limit then you probably do want to
703:39 - upgrade because you're using it very
703:40 - seriously uh but there you go okay
703:46 - [Music]
703:47 - so gitpod also offers team pricing so
703:51 - team pricing uh or a team plan is for
703:54 - organizations to pay on behalf of their
703:56 - team members to centralize billing to a
703:58 - single account so the idea is you say i
704:00 - need x amount of members
704:02 - uh for uh this type of plan and that
704:05 - will be for your teams and so you can
704:07 - also set the currency there's nothing
704:09 - else that is um available around team
704:12 - pricing it's just a way of centralizing
704:14 - your billing maybe in the future they'll
704:16 - add more particular things just for
704:18 - teams but for the time being this is
704:20 - what it is okay
704:21 - [Music]
704:26 - hey this is andrew brown and we're
704:27 - taking a look at self-hosted git pods so
704:30 - git pod oss or
704:32 - open source that's what the oss stands
704:34 - for allows organizations to self-host
704:36 - their own gitpod platform on their own
704:39 - private networks so getpod is built on
704:41 - top of kubernetes and the short form of
704:43 - communities is k8 so and it has
704:46 - deployment instructions for
704:48 - a various amount of managed k8 services
704:51 - so to list a few we have google
704:53 - kubernetes engine so gke
704:56 - lightweight kubernetes so k3s elastic
704:59 - kubernetes service so eks
705:01 - azure kubernetes service aks
705:04 - rancher kubernetes service rks but i
705:07 - think that it's going to work on
705:08 - anything that has kubernetes so
705:10 - you know if digitalocean has an offering
705:12 - or vaulter has an offering
705:14 - or you're running your own kubernetes
705:16 - cluster you know on a virtual machine i
705:18 - imagine that you could probably do it
705:20 - for self-hosted offers
705:23 - what you're going to get are the public
705:24 - and private repos integrations will get
705:26 - lab github and bitbucket unlimited
705:28 - pre-built shared workspaces snapshots
705:30 - admin dashboard so basically everything
705:33 - if there's something that's not in there
705:34 - i'm not sure what is not being listed
705:36 - but it seems like everything you get in
705:38 - get pod i o self-hosted is offered in
705:41 - two tiers the open source so the first
705:43 - registered users are free and then
705:45 - professional exceeding 10 users you need
705:47 - to pay for professional plans so to
705:49 - upgrade to professional you need to
705:50 - obtain a license and one question i have
705:53 - and i have this question because this is
705:55 - the same thing with
705:57 - terraform cloud where they have
705:58 - something similar after you exceed a
706:00 - certain amount you are paying
706:02 - but the thing is do you pay for the
706:04 - first 10 users i don't know i could not
706:06 - definitively answer that question for
706:08 - you i'm going to lean on the side that
706:10 - yes when you are when you
706:12 - cross over to the 11th user you've got
706:13 - to get your professional key you're
706:15 - going to be paying for 11 users which i
706:17 - think is fair because it's not like it's
706:19 - going to be super expensive and at that
706:20 - point you should be able to pay for them
706:22 - but i don't definitively know okay
706:25 - [Music]
706:29 - hey this is andrew brown and we are
706:31 - looking at get pods security so gitpod
706:33 - employs a variety of security controls
706:34 - and security best practices so let's
706:36 - take a look at this so the first is
706:39 - compliance if you're not familiar
706:40 - compliance it's basically compliance
706:42 - programs that are industry standard or
706:45 - best practices and you have like a
706:47 - third-party company that does a
706:48 - testament to say yes this company is
706:50 - meeting those requirements and then they
706:52 - get a certificate to prove it that they
706:54 - they are doing that stuff so one thing
706:57 - is git pod is sock to compliant and so
706:59 - this ensures your service providers
707:01 - securely manage your data to protect the
707:03 - interests of your organization and
707:04 - privacy of its clients so this is a
707:07 - really good thing to have it's also
707:09 - really
707:09 - expensive so you know that they're
707:11 - taking security very serious a lot of
707:14 - times you'll see the iso 2701 with this
707:17 - as well but you know this is good the
707:19 - other one they have is gdpr so
707:22 - um the gdpr is guidelines for the
707:24 - collection and processing of personal
707:25 - information from individuals who live in
707:27 - the european union
707:29 - so basically everybody is being gdpr no
707:32 - matter where they are in the world
707:33 - because it's the internet and anyone can
707:35 - be from uh from europe coming onto your
707:37 - website so this is pretty common so it's
707:39 - good to see that they just mentioned
707:40 - that there
707:41 - so we have environment isolation so get
707:43 - pod workspace or prebuilds run on a
707:45 - secured single use container separate
707:47 - user
707:49 - pid
707:50 - mount and network namespace for each
707:51 - gitpod workspace stress test namespace
707:54 - layering implementations by third party
707:56 - company kin can volkswagen companies
707:58 - specializing in kubernetes so i think
708:00 - namespace layering is very important
708:02 - because it just it is virtual isos
708:04 - isolization between clients okay
708:08 - then there's the fact that gitpod is
708:09 - open source so open source allows for a
708:12 - faster security feedback loop allows
708:14 - gitpod partners customers or the
708:15 - community at large to identify disclose
708:18 - or contribute fixes to critical exploits
708:20 - we have authentication and authorization
708:22 - so getpod uses version control systems
708:25 - uh single sign-on and you can apply
708:28 - granular or fine-grain permissions based
708:31 - on the providers integration options so
708:32 - they're basically offloading that that
708:35 - concern over to get lab github
708:38 - bitbucket and you know those are very
708:40 - large companies so you know their
708:41 - practices are going to be very very good
708:44 - uh we have integra or sorry uh
708:46 - encryption so they have at rest
708:48 - encryption so all data including
708:50 - workspace backups and environment
708:51 - variables are using advanced encryption
708:54 - standards so
708:55 - aes256 and then we have uh in transit
708:58 - encryption so gitpod uses transport
709:01 - layer security so tls so there you go
709:08 - hey this is andrew brown and we're
709:09 - talking about the security vulnerability
709:11 - disclosure policy so if you believe you
709:14 - have discovered a vulnerability privacy
709:16 - issue exposed data or other security
709:19 - issue relating to gitpod you can report
709:21 - it via the security vulnerability
709:22 - disclosure policy and you can read all
709:25 - about it here it's a big document if you
709:27 - want to have a fun time to read the
709:29 - policy outlines the steps for reporting
709:31 - to gitpod they pretty much say like hey
709:33 - if you do report it you can do it and
709:35 - you're not going to get in trouble
709:36 - because a lot of people are concerned
709:37 - that if they find a problem and they
709:39 - report it that they're going to get in
709:40 - trouble for doing that um just because
709:43 - and so you know they kind of outline
709:44 - that and just also give you a lot of
709:46 - extra information there to report you
709:49 - need to email gitpod providing as much
709:51 - detail as possible to security at
709:53 - getpod.io
709:54 - uh some companies will have a form and
709:57 - the language of this document suggests
709:59 - that they do have a form but it turns
710:01 - out it's just email so i imagine they
710:02 - might have a form of the future but it's
710:05 - you know email's fine too so there it is
710:07 - okay
710:08 - [Music]
710:12 - hey this is andrew brown and i'm just on
710:14 - the get pod website because i just
710:15 - wanted to show you here at i o forward
710:16 - slash security the kind of stuff that
710:18 - they have here so they just say like who
710:20 - is using get pod so you know it's safe
710:22 - how many uh developers
710:24 - companies are using so you understand
710:25 - the scale of it
710:27 - some of their principles uh that they
710:29 - are uh considering or they are
710:31 - implementing i should say uh so they're
710:33 - secure by design uh about their
710:34 - compliance the things that we already
710:36 - covered in uh the lecture content um but
710:39 - the thing that i just wanted to show you
710:41 - here is the security vulnerability
710:43 - disclosure policy because there is a bit
710:45 - more there that just couldn't fit on the
710:46 - screen so there's a bunch of stuff here
710:48 - that you might want to read about the
710:49 - interesting part is like safe harbor a
710:51 - lot of people are concerned that you
710:53 - know if they report a problem that they
710:55 - might get in trouble for it but getpod
710:57 - saying uh you know if you find a
710:58 - vulnerability and you share with us
711:00 - don't worry you're not going to be uh
711:01 - getting in trouble for it uh and we just
711:03 - want to make sure that you understand
711:05 - that so that we encourage people to
711:06 - submit things as you can see here it is
711:08 - at security at get pod io if i click on
711:11 - this there wasn't a form before
711:13 - still no form it's just going to the
711:14 - same place here so maybe eventually
711:16 - they'll have a form but honestly all
711:18 - forms do just kind of give you some
711:19 - additional fields here uh you can just
711:21 - basically write whatever you want in
711:23 - there i guess they have uh thanks some
711:25 - contributors here like sneak and get lab
711:28 - and stuff like that but yeah that's
711:30 - pretty much all you really need to know
711:31 - for security okay
711:34 - [Music]
711:38 - hey this is andrew brown and we are
711:39 - taking a look at get pod support so git
711:42 - pod has a wide range of
711:44 - support options and so we're just going
711:46 - to quickly go through the list here so
711:47 - that you're aware of them nothing super
711:49 - exciting but just making sure you know
711:50 - what's there the first is documentation
711:53 - so technical documentation describing
711:54 - the various features of git pod we have
711:57 - a change log so historically release
711:59 - changes so it shows you features and bug
712:01 - fixes there's a community form which is
712:03 - just a discourse form
712:05 - with community and official support we
712:07 - have the discord server so this is a
712:09 - chat server to interact with community
712:11 - members and get pod employees in real
712:13 - time we have the gitpod roadmap so this
712:15 - is a github project which is basically a
712:17 - kanban board showing planned
712:19 - and upcoming features based on annual
712:21 - quarters there's a status page so this
712:23 - is an atlatian status page showing up
712:26 - time and service interruptions for the
712:28 - underlying infrastructure so like maybe
712:30 - the k-day uh the kubernetes customers
712:32 - running gitpod workspaces and the
712:34 - getpodio platform that's probably what
712:36 - it's for we have git pod or is our
712:39 - github issues so open tickets for bugs
712:42 - or feature requests directly on the open
712:44 - source project
712:45 - account settings so change email
712:47 - settings notification settings nothing
712:49 - super exciting there
712:51 - obviously you can change your plans so
712:54 - that's another option as well and then
712:55 - there's the sales support form so send
712:57 - an email to gitpod's sales team about
712:59 - self-hosting educational discounts
713:01 - reselling or other gitpod does not have
713:04 - a paid tier support or direct toll-free
713:07 - number for individuals however
713:09 - enterprises may inquire about additional
713:11 - levels of support after contacting sales
713:13 - because if you're a bigger company
713:14 - they're probably going to roll out the
713:16 - red carpet for you but they just don't
713:18 - say like explicitly hey this is the tier
713:20 - that we offer and things like that okay
713:23 - [Music]
713:27 - hey this is andrew brown and we are on
713:29 - the support page here ford slash support
713:31 - because i just wanted to show you some
713:32 - of the varieties of support that you can
713:34 - utilize so the first thing is we have a
713:36 - status page here so we go ahead and open
713:38 - that up we're going to see it's kind of
713:39 - an uptime uh here they're using the
713:42 - atlatian status page so a pretty common
713:44 - one here to just kind of show you
713:46 - what's going on here so if you look at
713:48 - workspaces we see operational here's
713:50 - some part partial outage
713:52 - and more of some partial outage here you
713:54 - can see the duration here
713:56 - um says in the u.s region so clearly
713:58 - they're operating in multiple regions
714:00 - here i've never ever ever experienced
714:02 - any kind of problems uh working with
714:05 - github but it's really nice to see they
714:06 - have this status page uh here a
714:08 - workspace stuck uh stuck in stopping
714:11 - okay so you can see that there's some
714:12 - information so that's kind of
714:13 - interesting
714:14 - um you know if you go to contact support
714:16 - i don't know if this is just email so oh
714:18 - we have a form here so you can see
714:19 - report reviews billing educational uh
714:22 - discount verification subhosted git pod
714:24 - it looks like some of the context
714:26 - changes a little bit here so you go
714:27 - ahead and fill that in and send that
714:29 - over
714:30 - um we have the change log we just go
714:32 - ahead and open that up so this is gonna
714:33 - just tell you what they've been uh
714:35 - adding to the product so here on october
714:37 - 14th we have introducing teams and
714:39 - projects so these are basically linking
714:41 - to blog posts just talking about what
714:43 - has been released down below you can see
714:45 - the fixes and improvements so it's not
714:46 - just features but it's also bug fixes
714:49 - there if you open that up you can see
714:50 - that it is all on github so again it is
714:53 - an open source project so that's really
714:55 - great there too
714:56 - if we go to the community forum that is
714:58 - in discourse um now i've yet to sign up
715:01 - for oh sorry this is discord um and i do
715:04 - actually have that this is over
715:05 - [Music]
715:07 - um i'm just gonna pull it up here in a
715:09 - moment so this is over here i'm not sure
715:11 - what i'm looking at here but um you know
715:13 - here is the get pod so i'm actually uh
715:16 - sitting in this here as well and talking
715:18 - as i work on this course i've been
715:19 - updating the uh build in the open here
715:21 - so they're very active and this is a
715:22 - great way in real time to connect with
715:25 - um get pod employees developer advocates
715:27 - and get help there or get directed to
715:29 - different kind of support options
715:31 - um
715:32 - the
715:33 - uh the form is really good too this is
715:36 - community forum this is discourse
715:39 - oh i thought i clicked this does this go
715:40 - to the right place let me click that
715:43 - oh i think i found a bug i think i found
715:45 - a bug so in this case what i'm going to
715:47 - do is just take a screenshot here
715:49 - and i think someone just has a missed
715:51 - link here so we'll go down below and
715:53 - we'll go to support i'm just gonna say
715:55 - here
715:58 - you know i think this is supposed to
716:00 - link
716:01 - to the discourse
716:04 - but it's going to the discord
716:08 - and that's a fair that's a fair uh issue
716:10 - there just because like discourse and
716:12 - discord are very similar so it wasn't me
716:14 - what happens if i go here
716:16 - no see that's goes the chat so that's
716:18 - going to the wrong place
716:22 - unless i got rid of the discourse
716:24 - get paw discourse
716:30 - let me try this again
716:33 - let me try this again
716:37 - discourse form
716:39 - oh okay so i think maybe they retired it
716:43 - which is totally fine um honestly
716:46 - it doesn't say here but honestly like i
716:48 - found that like i didn't really have a
716:49 - use case for the discourse i'd rather
716:51 - just be in the discord where is real
716:53 - time
716:54 - i'm not going to go back to my course
716:56 - and update that because i'd rather just
716:57 - leave this in here just to kind of show
716:58 - that that is
717:00 - a edge case there so i probably what's
717:02 - going to happen is it'll end up just
717:04 - changing that wording here to discord
717:06 - and then that confusion will be gone but
717:08 - there was a discourse at one point and i
717:10 - was pulling some kind of information
717:12 - from it but you know honestly again i
717:14 - prefer just to do everything on discord
717:16 - let's go take a look at the get pod road
717:18 - map so this is just a project here
717:21 - we go over here to the top notice this
717:22 - git pod io road map you go here you can
717:25 - see all of their
717:27 - getpod repositories did not know you
717:29 - could put a readme there that's really
717:30 - nice but down below you can see all
717:31 - these here right
717:33 - and so if we go back and go to the
717:34 - getpod product roadmap you can kind of
717:36 - see what's being worked on at the
717:38 - current moment so we are in uh q4 and so
717:42 - we see introduced project level
717:44 - environment variables team pricing
717:45 - jetbrains remote development support
717:47 - image layers faster workspace startups
717:49 - which honestly they're really fast to
717:50 - begin with but if they can make them
717:52 - faster that's great and future stuff so
717:54 - that's a great way to just kind of see
717:56 - what is coming
717:57 - down the road
717:59 - in terms of git pods so that is really
718:01 - nice as well
718:02 - we saw the status page if you want to
718:04 - report a bug it's going to probably take
718:06 - us to the github yeah that goes there so
718:08 - if we open that up i think it might just
718:10 - pre-populate some text for us yeah so it
718:12 - has some nice boxes for us
718:14 - um this is not the discussion these are
718:16 - just forms so that looks really good so
718:18 - we'll go back here and um we'll go all
718:21 - the way back
718:23 - and then you get to self-hosted thing or
718:24 - your account settings not so much to
718:26 - look at the account settings as we've
718:28 - seen this quite a few times in this
718:29 - course so really they're just like
718:31 - talking about like notifications like
718:32 - what do you want to turn off which there
718:34 - aren't a lot of options there or
718:36 - managing your plan right there's not
718:38 - really support within the get pod i o
718:40 - per se you always have to reach out to
718:42 - the discord and stuff like that click on
718:44 - help this just goes back to the support
718:46 - page but that gives you an idea of the
718:48 - level of support and honestly it's a lot
718:50 - it's really great so and i said this
718:52 - also you know in the in the lecture
718:54 - content but you know if you are an
718:55 - enterprise
718:56 - i would imagine you just reach out and
718:58 - you know if you're if you are large i'm
719:01 - sure you'll get a direct phone call with
719:04 - git pod and they probably would create
719:06 - some kind of custom
719:07 - support plan for you
719:09 - but they don't you know they just don't
719:10 - say it here on the pricing okay so i
719:12 - just talked to them i said yeah if
719:14 - you're if you are an enterprise would
719:15 - you do some kind of deal and they're
719:16 - like yeah of course we would do
719:18 - something you know um but they just
719:20 - don't show it as a as like a lot of
719:21 - places we'll have like a fifth box
719:22 - saying like contact us okay but there
719:25 - you go all right so i just want to show
719:26 - you the support in action so it was
719:28 - actually really great that uh this uh
719:30 - this happened because i can just show
719:31 - you like i just went here into the
719:33 - discord i opened a ticket it became a
719:35 - thread i went into here you can see
719:37 - pauline said check out the announcements
719:38 - over the announcements and i i assume
719:40 - that it was rolled into it and so we go
719:42 - over to our announcements here and you
719:44 - can see that uh you know they've said
719:46 - that they've um they've they've uh
719:49 - you know
719:50 - have archived the discourse and so now
719:53 - they want to make the discord the future
719:55 - home and again i think that is the right
719:56 - place for it so i'm really happy with it
719:58 - if you're looking for the old stuff
720:00 - because there is some stuff in there
720:02 - that is good but probably by the time
720:03 - you watch this video you might not be
720:05 - interested but they did go and archive
720:07 - all the old stuff here so it is still
720:10 - accessible it's just read only on the
720:13 - wayback machine uh but yeah it was a
720:15 - great opportunity to uh see that in
720:17 - action so there you go
720:22 - hey this is andrew brown and we're
720:23 - taking a look at git pod open source so
720:26 - get pod open source is a combination of
720:28 - open source projects built by get pod
720:30 - and so you know when i was looking at
720:31 - the uh github repos i just noticed that
720:34 - there's more than just one and so
720:36 - there's one called
720:38 - werft
720:39 - and this is a kubernetes native
720:41 - continuous integration system we have
720:43 - leeway this is a heavily caching
720:46 - build system for go yarn docker projects
720:49 - dazzle this is a experimental docker oci
720:52 - image builder its goal is to build
720:54 - independent layers where a change to one
720:56 - layer does not invalidate the one
720:58 - sitting above it and then there's open
721:00 - vs code server which is a fork of
721:02 - uh the vs code
721:04 - project there and so
721:06 - um you know we don't really need to know
721:08 - much about these here
721:10 - but this is the one that we really care
721:11 - about because this is pretty much
721:13 - what powers get pod i o okay that's what
721:16 - get pod io's it's it's a um
721:19 - a managed version of this and so we're
721:21 - gonna give extra attention to that one
721:22 - okay
721:23 - [Music]
721:27 - hey this is andrew brown and i just want
721:29 - to uh poke around here on the get pods
721:33 - um team or organizational page that is
721:35 - on github so that's at github.com
721:37 - forward slash get pod hyphen io and it
721:40 - just shows to show like how much stuff
721:42 - they're doing with open source so they
721:44 - have 159 repositories that you can see
721:47 - who in their organization is there if
721:49 - you want to reach out or just kind of
721:50 - learn more about get pod
721:52 - you can even sponsor them if you want
721:53 - because again it's open source projects
721:55 - so that is an option to you uh get pod
721:58 - does make uh money on their uh platform
722:01 - side but you know helping in either way
722:03 - can always help out uh there is projects
722:05 - i think this is like a new feature of
722:06 - github which i don't really understand
722:08 - as of yet so here's a project and they
722:10 - have a bunch of itemized items like a
722:12 - road map here don't fully understand it
722:14 - but that's kind of interesting there but
722:15 - we
722:16 - go into the repositories and there is a
722:18 - lot you can see all sorts of things i
722:21 - think the reason why there's so many is
722:22 - because all of their templates live here
722:24 - so we looked at the quick start template
722:25 - so just understand that's why it's so
722:28 - large but the main one here is get pod
722:30 - here at the top so we'll open that up
722:32 - and we'll take a look at the website
722:33 - here um
722:35 - and we'll just go and take a look so
722:37 - here's git pod so get pod automates the
722:39 - provision of ready to code developer
722:41 - environments so this is going to be for
722:43 - the actual platform right so i believe
722:46 - that when you want to uh self host this
722:49 - is the repository you're going to be
722:50 - using
722:51 - this is the same experience you get when
722:53 - you go to getpod.io so it will give you
722:55 - that gui and also this interface here
722:58 - this thing the underlying thing is based
723:00 - off um the open vs code server which
723:03 - we'll look at separate uh in another
723:05 - video because i actually want to show
723:06 - you how to run that on your own um but
723:09 - yeah this thing is here how you use this
723:12 - i don't know i guess we'll have to look
723:13 - that uh look at that if we do show the
723:15 - self hosted git pod option i'm going
723:18 - over to the website basically anything
723:20 - that you see on the website in terms of
723:22 - the documentation you can absolutely
723:24 - contribute to so like let's say we go to
723:26 - get pod i o uh forward slash docs i
723:29 - believe
723:30 - and we go to some page like configure
723:32 - here um if you go and click edit and get
723:35 - pod
723:36 - this will launch this environment if you
723:38 - look up here you can see
723:39 - oh it went too quick there but you can
723:41 - see it's loading up the website here so
723:43 - we'll just give it a moment
723:45 - okay
723:47 - and actually this might be a great
723:48 - opportunity for us to correct that
723:50 - discourse option right because
723:52 - they
723:53 - no longer have discourse which is
723:55 - totally fine and it's discord so maybe
723:57 - through here we can help with that
723:59 - language so we saw it on the support
724:01 - page
724:03 - and i'm just wondering how we could go
724:05 - find that so
724:06 - [Music]
724:09 - and you know i'm not that familiar with
724:10 - it but i'm good enough that i can kind
724:12 - of make my way around here
724:14 - so if i go to
724:16 - let's say
724:17 - contents
724:18 - there's probably a global way we can
724:20 - search
724:21 - so we'll go here and i'm going to go to
724:24 - find in files and we'll just type in
724:27 - discourse
724:30 - we found the discourse logo support ts
724:32 - so i feel like it is here
724:35 - okay and
724:36 - if i go over here
724:40 - oh look it's oh no it's not missing it's
724:41 - just me so this is community forum if
724:43 - you're looking for help with common
724:44 - requests connect with our community on
724:47 - discord
724:49 - okay
724:52 - and then so from here i'm going to just
724:54 - change that so
724:56 - use discord instead of discourse
725:01 - okay and then we're going to go ahead
725:02 - and commit that
725:05 - and we will sync those changes the thing
725:07 - is is that we can't push to main we'll
725:09 - need to have our own fork which is
725:10 - totally fine so i'm hoping it'll
725:12 - prop up and say hey you need to
725:15 - have your own fork so
725:17 - is not accessible please grant necessary
725:19 - permission so let's say open access
725:23 - um
725:24 - so i guess we kind of have to make our
725:26 - own fork here i think that's what we're
725:27 - gonna have to do
725:29 - so what i'm gonna do here is go back and
725:31 - i'm just gonna go and fork this uh
725:34 - here so where's my fork here we go fork
725:42 - but just kind of show you like how you
725:44 - can contribute to get pod which is kind
725:45 - of interesting so now we have the
725:47 - website ourselves and we are going to go
725:49 - ahead and just close these out and
725:52 - reopen this here
726:06 - now if you're watching this of course
726:07 - you don't have to do this just because i
726:10 - would have already made the change but
726:12 - it doesn't hurt to go through this
726:13 - process to show you so again i'm going
726:14 - to go to the top left corner here we're
726:16 - going to go file
726:17 - and we're going to say find in files or
726:19 - whoops edit
726:21 - find in files
726:23 - discourse
726:27 - we'll go to support here
726:30 - and there are a few here that still say
726:32 - discourse but we really want discord
726:35 - so we'll just switch that over to
726:36 - discord i'm going to go over here to the
726:38 - right hand side and did i save that file
726:40 - i did
726:42 - there we go so we'll just say
726:45 - change wording from discourse
726:49 - to discord
726:52 - and we'll save that
726:55 - and we will sync those changes and we'll
726:56 - say okay and before we open or like we
727:00 - submit our pull request we should
727:01 - probably open a ticket so here on the
727:03 - main one
727:04 - we'll go over to issues we'll open up a
727:05 - new tab
727:06 - and i'm just going to open a new ticket
727:09 - here and we're going to file a bug
727:10 - report i'm going to open up get pod io
727:13 - forward slash support here
727:16 - actually i want to keep that other tab
727:17 - open so just keep it there for a second
727:20 - and
727:21 - oh sorry we want to go to get pod io for
727:23 - slash support
727:25 - and i'm just going to take a screenshot
727:27 - here
727:28 - okay we'll go back over this ticket
727:31 - and
727:32 - um
727:33 - so i'll just paste that in there so
727:34 - we'll just say
727:36 - um
727:37 - gitpod is no longer using
727:42 - using um discourse so the wording
727:48 - here needs to be changed
727:50 - to discord
727:53 - all right um and sometimes i'll say like
727:55 - show the example so what we'll do is
727:56 - just go ahead and grab that link here
727:59 - paste that on in um
728:03 - it requires all the other ones here i
728:05 - don't like that they i mean this is not
728:06 - uh git pod but like they've kind of
728:08 - forced these parameters
728:10 - so say um
728:12 - git cloud support page should say
728:15 - discord instead of
728:19 - discourse
728:23 - okay and then i'm just gonna grab
728:26 - flamingo emoji i'm gonna be like the
728:28 - worst person ever and just kind of like
728:30 - phone it in
728:31 - the whole point of those boxes to make
728:33 - sure you do it right so we'll just say
728:34 - that
728:35 - we'll put in those
728:37 - anything else
728:39 - okay
728:40 - and we'll go ahead and submit that
728:42 - ticket because i just need an issue so
728:43 - when i submit it i can tie it to that
728:45 - right so now i have this uh pound seven
728:48 - one one three and so what i'll do is go
728:50 - back to mine and so now it says uh you
728:52 - know your branch is up to date
728:54 - and i want to go to pull requests here
728:58 - um
728:59 - you know what i didn't make a fork
729:01 - that's what i should have done so if i
729:02 - go back over here we're gonna just stop
729:04 - this here i'm gonna go get checkout
729:07 - hyphen b
729:09 - and we're gonna just say uh discourse
729:12 - old wording
729:16 - and then i'm just going to push it
729:22 - allow
729:24 - and uses a good habit to put the id name
729:26 - in there but i didn't do that which
729:28 - which is totally fine
729:30 - and so we'll see if it allows us to just
729:31 - push
729:36 - seems to be doing some kind of
729:37 - diagnostic i'm not exactly sure why not
729:40 - sure what that is for but what i'm going
729:41 - to do is go back and refresh here
729:43 - because i did this recently but it seems
729:44 - like there's been a few changes here and
729:47 - so i'm just not exactly familiar with it
729:49 - just yet
729:51 - so it looks like the branch was pushed
729:52 - if i go back here and give this a
729:54 - refresh
729:55 - the branch should show up um
729:57 - [Music]
729:59 - so say old and notice like that some
730:00 - people are putting the numbers in there
730:01 - so that's a good thing to do but we'll
730:03 - just say uh disc discourse old wording
730:08 - and so i want to
730:09 - uh
730:11 - merge this in so i think if i go back to
730:13 - the original git pod here
730:15 - and
730:16 - uh we make a pull requests
730:20 - let's say new pull request here
730:23 - and notice this is main and main so
730:25 - compare main and
730:28 - um i want to do it for mine so we'll say
730:31 - old
730:33 - uh compare cross forks we'll click there
730:36 - okay i could probably done it from here
730:38 - again it's just it's always a little bit
730:39 - confusing you just have to kind of be
730:41 - doing this on a regular basis if you're
730:43 - not doing open source a regular basis
730:44 - can get confusing so
730:46 - compare the base to here i think we want
730:48 - the one on the right hand side here so
730:49 - we'll say old
730:52 - um get pod or discourse
730:55 - oh i have to change this to my
730:56 - repository
730:58 - so oh and i'm in i'm in the wrong one
730:59 - i'm supposed to be in website
731:02 - okay so we'll go back here lots of
731:04 - mistakes on my part here but not a big
731:06 - deal because usually it'll it'll pop up
731:07 - sometimes and say hey do you want to
731:09 - make this pull request or something but
731:10 - we'll say new pull request
731:13 - and
731:15 - it's not showing my old ones but what
731:17 - we'll do is
731:18 - compare across forks again
731:20 - and i'm going to say for that branch
731:23 - there discourse
731:26 - oh i'm not choosing my darn branch
731:29 - there we go okay
731:31 - let's just me creating so much trouble
731:33 - so i don't want to do it against maine
731:35 - because that's not proper you're always
731:36 - supposed to do it from a feature branch
731:38 - or whatever kind of branch you want to
731:39 - call so we'll call discourse here
731:41 - there it is
731:43 - and so now what i'll do is go ahead and
731:44 - create a pull request
731:46 - we have some text in here and so what i
731:48 - want to do is link the related issue so
731:51 - it fixes if we go back to did i open
731:54 - this in the right place
731:56 - oh i opened this to the wrong
731:58 - place oh
732:00 - sorry
732:03 - this is supposed to be
732:06 - open on the website okay
732:11 - all right that's embarrassing so now
732:12 - what i got to do
732:14 - i'm rolling my eyes if you can't see it
732:16 - but what i got to do is go back to the
732:18 - website here
732:20 - i can do the second take of this so this
732:21 - is the take you're going to get for this
732:23 - video
732:23 - but
732:24 - we'll go ahead and we'll open this issue
732:27 - again we'll say um
732:30 - doc feedback
732:32 - okay this is a lot easier to work with
732:34 - here
732:35 - um so we'll type in https forward slash
732:38 - forward slash get pod io forward slash
732:41 - support
732:42 - i'm just gonna go grab that again so
732:44 - we'll say
732:46 - get pod i o four slash support
732:54 - okay and we'll just paste that on in
732:56 - there like that
732:58 - and we'll just say um
733:01 - uh gitpod no longer
733:05 - uses discord or sorry discourse so the
733:08 - text here needs to change from discourse
733:15 - to discord because that's where it does
733:17 - actually redirect to
733:19 - and uh
733:21 - change wording
733:23 - from discourse to discord
733:27 - we'll submit that
733:29 - and so there is our ticket now we have
733:31 - our issue so we'll go back to our pull
733:33 - request and we'll say this fixes that
733:35 - so we'll go over here they'll link to
733:37 - that
733:39 - renaming
733:41 - discourse to discord
733:44 - on support page
733:46 - there are still
733:48 - other lingering cases
733:51 - but i was just showing
733:53 - this for the purpose
733:55 - of a video demonstration
734:01 - okay so go ahead and create that pull
734:03 - request
734:05 - and so there i've contributed to the get
734:07 - pod open source um so you know hopefully
734:10 - that gives you kind of an idea of like
734:12 - the ecosystem here and why it's valuable
734:14 - because you don't have to wait on get
734:16 - pod you can start to take action or dig
734:17 - into things but uh yeah there you go
734:20 - [Music]
734:24 - hey this is andrew brown and we're
734:25 - taking a look at openvs code server so
734:27 - openvs code is a version of visual
734:29 - studio code that runs a server on remote
734:32 - machines allowing access through a
734:34 - modern
734:35 - web browser so git pod and github code
734:37 - spaces uses the same architecture at
734:40 - scale so open vs code server can be run
734:43 - on a linux machine so a virtual machine
734:46 - or on a docker
734:48 - as a container so here's an example if
734:50 - you wanted to start it on a virtual
734:52 - machine and here's an example of you
734:54 - wanting to start it on docker and
734:56 - actually uh when git pod first came out
734:58 - before they had the i o offering this is
735:00 - what i would use to try to launch
735:03 - my own
735:05 - vs code on aws and it worked i just
735:07 - wasn't able to figure out how to make
735:09 - the space the the server turn off
735:12 - reliably where getpodio has clearly
735:14 - solved that in a very intelligent way
735:16 - so just to clarify you have the vs code
735:19 - as open source you have open vs code
735:22 - server which is a fork that's built on
735:23 - top of the vs code open source code base
735:26 - then there's the open vs code which is
735:28 - used within git pod and other tools
735:30 - which that's where we get gitpod.io the
735:33 - gitpod platform okay
735:35 - [Music]
735:39 - hey this is andrew brown and we're
735:40 - taking a look at openvs code server and
735:43 - so this is a fork uh developed and
735:44 - maintained by gitpodio so here you can
735:47 - see the original fork is vs code by
735:49 - microsoft and so this one was modified
735:52 - uh just to give you a bit more
735:53 - flexibility
735:55 - and the key thing is that this is what
735:57 - gitpod is using so if you want to
736:00 - run your own uh openvs code server it's
736:03 - not too hard uh but you know if you
736:05 - really do just need an environment to
736:07 - work with your team strongly recommend
736:09 - just using the getpod
736:12 - platform itself but you know for
736:14 - whatever reason if you want to know how
736:16 - to do this i figure it doesn't hurt to
736:18 - show you how so there are two ways to
736:20 - run it via docker and linux linux is the
736:22 - easier way to get going so that's what
736:24 - i'm going to show you here today so i'm
736:26 - here in my aws account and i'm going to
736:28 - make my way over to ec2 and you can do
736:30 - this for anything whether it's azure or
736:32 - gcp or any platform as long as you can
736:35 - run a virtual machine but i'm just going
736:37 - to use a best because that's what i'm
736:38 - most comfortable with so i'm going to go
736:40 - ahead and launch a new instance here i'm
736:42 - going to choose an amazon linux 2
736:43 - instance which is generally recommended
736:45 - i'm choosing a t3 micro here but any
736:48 - size will do these small sizes work
736:50 - pretty great here and the key thing that
736:53 - i need to do here is make sure that i
736:55 - have an i am role that has permissions
736:58 - to sessions manager i'm just going to
736:59 - open this up really quickly if you're
737:01 - not familiar with this stuff here
737:03 - i just want to show you if you go ahead
737:05 - and create a role
737:08 - all i'm doing here is typing in ssm
737:11 - whoops uh maybe uh sorry create a role
737:13 - here i thought i already clicked it
737:15 - and so you'd say for ec2 you go next
737:19 - and we would go ssm here
737:22 - and in here we would want to get access
737:24 - for um
737:26 - amazon ec2 roll i think this one is old
737:29 - so you have to use this one instead
737:30 - which is not a big deal i think i'm
737:32 - using that anyway so you create a role
737:34 - with that permissions and that's what we
737:35 - are attaching here
737:37 - uh as our role and that's gonna allow us
737:39 - to do sessions managers so we don't have
737:40 - to use um ssh keys or things like that
737:44 - but once you have that there we'll go
737:46 - over to our security groups we're gonna
737:47 - have to open port 3000 i think that's
737:49 - what it runs on default actually i think
737:51 - it's port 8000
737:52 - so we will open that up um and we'll go
737:56 - review and launch we'll say launch we
737:58 - will launch with no key pairs so proceed
738:00 - without a key pair because we do nee do
738:02 - not need one here and we'll give it a
738:05 - moment to launch so we'll go here and
738:07 - click on the instance itself and so
738:09 - it'll take a little bit time to launch
738:11 - they're not too long but what we're
738:12 - going to need to do is go get the latest
738:14 - uh downloads if you just open this up in
738:16 - a new tab under linux
738:18 - you scroll on down you'll notice we have
738:20 - arm64 arm hf x64 or x64 is for the i
738:25 - guess the intel chip and these are arm
738:27 - chips so uh since we launched a virtual
738:29 - machine that's uh on the x64
738:32 - architecture that is what we're going to
738:33 - be using so here i'm just copying the
738:35 - link address because if you look at it's
738:37 - a raw raw link directly to the tar atar
738:40 - is like a zip file or an archive
738:42 - but once this is running and usually we
738:44 - wait for the two status checks to pass
738:46 - but i'm just going to go ahead and
738:47 - connect because i think it will work
738:48 - we're just going to connect with
738:49 - sessions manager that's why we set up
738:51 - that i am role with um
738:53 - ssm the
738:54 - simple systems manager access to
738:56 - sessions manager and so this is going to
738:58 - open up a black screen
739:01 - and from here i'm just going to type in
739:02 - sudo hyphen ec2
739:04 - uc2 user just because oops sudo su
739:08 - hyphen ec2 user just because it always
739:10 - starts us off as
739:12 - a different kind of user and we want to
739:13 - be the ec2 user here but what we can do
739:16 - is type in wget space and we'll go ahead
739:18 - and paste that link in and hit enter
739:20 - that's going to download that tar there
739:23 - i'm just going to type in clear just to
739:24 - clear my screen to make things easier i
739:26 - know the fonts a little bit small so
739:27 - i'll try to bump it up here
739:29 - um and so if we just have to untar it so
739:31 - i always forget what to type here so
739:33 - let's go ahead and copy that and we'll
739:35 - paste that in there
739:36 - and we will follow up with openvs code
739:38 - server hit enter
739:41 - and that's going to expand the archive
739:43 - so we can go cd into that directory and
739:46 - now it's just as simple as running this
739:47 - period forward slash server sh so sh is
739:50 - a bash command or bash script and so if
739:53 - we do period it's equivalent of saying
739:55 - like sh
739:56 - like if you did it like this
739:58 - but uh it's more popular to run an extra
740:00 - cable like that so we'll hit enter and
740:02 - that's going to start on port 8000 and
740:04 - here it's going to give us a web uri so
740:05 - we want this part of the url
740:08 - whoops i didn't mean to click it through
740:10 - there hold on here it doesn't make it
740:12 - too easy to click but if we just
740:15 - shrink our font there go back to our
740:16 - instance we want that public ip address
740:18 - i'm going to go ahead and grab that
740:20 - paste it on in here and then i just need
740:22 - the end so just go ahead and grab that
740:24 - and try to copy it it doesn't make it
740:26 - easy to copy so you might have to open
740:27 - your browser like this
740:29 - and
740:30 - we'll go back over here paste that on
740:32 - there and it should hopefully work
740:34 - fingers crossed
740:36 - um port 8000 cannot be reached so just
740:40 - double check make sure that is correct
740:42 - looks okay to me
740:44 - we grab the public ip address so that
740:47 - should be fine
740:49 - oh i think we stopped the server by
740:51 - accident
740:52 - okay
740:54 - i'm just seeing if it changed yeah it
740:55 - did change i'm just gonna click that
740:57 - again
740:59 - okay so we just got to be really careful
741:01 - there because i guess it's very finicky
741:04 - still running okay good
741:08 - and i just need to delete out
741:11 - this part of it here yeah we know why
741:13 - it's forbidden that's totally fine
741:19 - okay and i think it's working we'll just
741:20 - give it a moment
741:25 - there we go so here's vs code it's or
741:27 - openvs code
741:28 - uh and so you know that's a way of
741:30 - self-hosting i mean the thing is is that
741:33 - you have a lot that you need to solve if
741:35 - you do this like how are you going to
741:36 - persist
741:37 - uh your data so like you don't lose it
741:39 - or how do you back it up how do you make
741:41 - it intelligent so that it knows to turn
741:43 - off when you are not uh using it i guess
741:46 - there's a lot of things here you'll also
741:48 - notice that it's a little bit different
741:49 - from the one that uh um get pod uh uh
741:52 - gives you so like notice it doesn't say
741:54 - get pod on the bottom or have the
741:55 - command palettes and things like that so
741:57 - this is really just being able to run
742:00 - the um
742:02 - open vs code server okay like if you
742:05 - needed this kind of editor here um but
742:08 - anyway you know it is something you can
742:09 - do and it's part of the get pod project
742:11 - so i just wanted to make sure
742:13 - uh that i showed you there let's go
742:15 - ahead and shut down this ec2 instance so
742:18 - we'll go ahead and just terminate that
742:20 - instance there so let's say terminate
742:22 - and
742:23 - i'm pretty confident that it's
742:24 - terminating so i'm i'm confident that is
742:26 - going to be destroyed not worried about
742:28 - it so yeah there you go openvs code