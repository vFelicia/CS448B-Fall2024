00:00 - a tree data structure is a way to hold
00:02 - data that when visualized looks like a
00:04 - tree you would see in nature now this is
00:07 - actually what we visualize a tree data
00:09 - structure to look like all data points
00:11 - in the tree are called nodes the top of
00:14 - the tree is called the root node and
00:16 - from here it branches out into
00:18 - additional nodes Each of which may have
00:21 - more child nodes and so on nodes with
00:24 - branches leading to other nodes are
00:26 - referred to as the parent of the node of
00:29 - the branches that leads to the child
00:31 - Leaf nodes are nodes at the end of the
00:34 - tree that have no children also any
00:36 - children of a node are parents of their
00:38 - own sub Tree in this video we will be
00:40 - covering a specific type of tree called
00:42 - a binary search tree while the tree data
00:45 - structure can have any number of
00:46 - branches at a single node for instance
00:48 - see the C here there's fgh it has three
00:51 - branches at a single node a binary tree
00:54 - however can only have two branches for
00:56 - every node so look down here here's a
00:58 - binary tree each node node only has two
01:00 - branches also binary search trees are
01:03 - ordered each sub tree is less than or
01:06 - equal to the parent node and each right
01:08 - sub tree is greater than or equal to the
01:11 - parent node because they use the
01:13 - principle of binary search on average
01:15 - operations are able to skip about half
01:17 - of the tree so that each lookup
01:19 - insertion or deletion takes time
01:21 - proportional to the logarithm of the
01:23 - number of items stored in the tree this
01:25 - is much better than the linear time
01:27 - required to find items by key in an
01:29 - unsorted array but slower than the
01:31 - corresponding operations on a hash table
01:34 - so let's see how this works in
01:36 - JavaScript here we're going to use
01:38 - classes to create the binary search tree
01:40 - uh basically we're going to create two
01:41 - classes the node class and the BST or
01:44 - binary search tree class the node class
01:47 - represents each node in the tree and
01:49 - there's going to be three data
01:50 - properties we have the data which is
01:52 - what we're actually trying to store and
01:53 - we have this. left and this. right which
01:56 - are going to point to the left node and
01:59 - the right node so in the binary search
02:02 - tree we're going to have the Constructor
02:04 - which just creates the the root node
02:06 - which is the top of the tree which it
02:08 - starts as null and then we're going to
02:11 - have the add function so this is how we
02:13 - are going to add something to the tree
02:16 - so we're going to add the data we're
02:17 - going to get a reference to the root
02:19 - node but if this is the first node node
02:22 - will be null in that case we're just
02:24 - going to set the root node to the new no
02:28 - the new data we just put in so new node
02:31 - data so we're just going to create a
02:33 - node based on that data if it's not the
02:36 - first node we're going to have to figure
02:38 - out where to put this node in the tree
02:41 - to figure out where to place the new
02:43 - node we are going to use a recursive
02:46 - function so we're going to create this
02:48 - function which is search tree where
02:50 - we're going to pass in the node which
02:53 - starts off as the root node if the data
02:55 - we pass in is less than node. data that
02:58 - means we're going to put put the node on
03:00 - the left side of the tree so if the
03:03 - node. left side of the tree is null
03:05 - we're just going to assign node. left to
03:07 - the new node and then we'll return but
03:10 - if node. left is not null we're going to
03:13 - return search tree node. left that just
03:16 - means we're going to continue searching
03:19 - this is where the recursive nature comes
03:21 - in it's going to run the search tree
03:23 - function again and continue working down
03:25 - the tree to find where to put the node
03:28 - and you can see here
03:30 - else if if the data is more than node.
03:33 - data that means we're going to put the
03:34 - node on the right side so if node. right
03:37 - equals equals equals null then we just
03:40 - assign node. write to the new node and
03:43 - we can return else if if the node. right
03:46 - does not equal null we are going to have
03:48 - to keep searching so we're going to
03:50 - return search tree no. WR so else that
03:53 - means data is not less than no. dat data
03:56 - is not more than no. data so they must
03:59 - must be equal if they're equal we're not
04:02 - going to add the data to the tree we're
04:04 - just going to return null so this is the
04:07 - search tree function and this is how we
04:10 - initially call the search tree function
04:12 - return search tree node which starts out
04:14 - as the root node but then it can be
04:16 - called with different nodes as it's
04:19 - going recursively through the tree let's
04:21 - say you have 50 in your tree and you
04:23 - have 17 in your tree and you want to add
04:25 - 23 first it's going to see that the node
04:28 - is not null because you have things in
04:30 - your tree and then it's going to run the
04:32 - search tree function putting in the root
04:35 - node which is 50 then we'll see if data
04:37 - is less than node. data which it is
04:40 - because 23 is less than 50 we're going
04:42 - to go to the the node. left if node.
04:46 - left is null we would put it here but
04:49 - it's not because there's a 17 here
04:51 - remember we're just adding the number 23
04:53 - so else if if left node. left does not
04:56 - equal null which is true we are going to
04:58 - return the search tree node. left so we
05:02 - we are now going to run this search tree
05:04 - function but pass in the 17 so now we're
05:08 - going to see does is data less than
05:10 - node. data well now data is 23 but node.
05:14 - data is 17 so this is false now we're
05:16 - going to go down to this is data more
05:18 - than no. data yeah 23 is more than 17
05:22 - well is node do right null in this
05:24 - example we're saying that 23 isn't there
05:26 - so no. right would be null and then we
05:29 - can just set node. right to be the new
05:32 - node the next functions we're going to
05:34 - talk about are find Min and find Max so
05:37 - we're just going to be finding the
05:38 - minimum of the array and finding the
05:39 - maximum of the array if you look at this
05:41 - binary search tree right here you can
05:42 - see the minimum is all the way on the
05:44 - left side nine the max is all the way on
05:47 - the right side 76 so just using that
05:49 - knowledge makes it easy to find men and
05:51 - find Max so we're going to set the
05:53 - current node to the root node and so the
05:55 - Min is going to be all the way on the
05:56 - left so while this left does not equal
05:59 - null the current node is going to be
06:01 - current. left and then at the very end
06:04 - it's going to return current. dat so
06:07 - we're going to check this if the left
06:09 - side is not null we're going to go to
06:10 - the next one if it's not null we're
06:12 - going to go to this one if it's not null
06:14 - we're going to go to this one now the
06:16 - next is null because there's nothing to
06:17 - the left of nine so we're going to
06:19 - return current. data we're going to
06:21 - return the nine because that's the data
06:22 - on the very left side find Max is just
06:24 - the same way but the opposite we're
06:26 - going to start at current which is going
06:28 - to be this. Ro which is going to start
06:30 - the the top while current. right does
06:33 - not equal null well this does not equal
06:34 - null cuz it's 72 then we're going to go
06:37 - to the next Loop current equals current.
06:39 - right we're going to go to the next one
06:40 - but now current. right is null because
06:42 - there's nothing to the right of 76 so we
06:45 - can just return current. dat now we have
06:47 - the find function now is present is very
06:51 - similar but instead of returning the
06:53 - node we're just going to return true or
06:55 - false whether the the data is in the
06:57 - tree so we're starting at the to top the
06:59 - root note while current that means while
07:02 - there is a current node while current is
07:05 - not null we're going to do the following
07:08 - if data equals equals equals current.
07:10 - data return true that means we found it
07:13 - if we haven't found it we're going to
07:15 - see is data less than current. data now
07:17 - current equals current. left so we're
07:19 - going to start searching on the left
07:21 - side else well data must be more than
07:23 - current do data so we're going to start
07:25 - searching on the right side and we're
07:26 - going to keep searching and if we never
07:29 - find it if we never find that data
07:31 - equals equals current. data and return
07:33 - true that means it's not in the the tree
07:35 - and we can return false okay the remove
07:37 - function is a little more complicated
07:39 - than the other functions we've covered
07:41 - just like in the add function in the
07:42 - remove function there's going to be a
07:44 - recursive function so we're going to
07:46 - create this function here con remove
07:48 - node equals function where we're going
07:50 - to pass in the node and we're going to
07:53 - pass in the data which is the data what
07:55 - we're what we're trying to remove so we
07:58 - have this whole function
08:00 - here and then here's where we're going
08:02 - to call the function at the end this.
08:05 - root equals remove node and we're going
08:07 - to pass in this. root and data we're
08:10 - assigning this. root to whatever is
08:12 - returned to this function here we're
08:14 - going to pass in the root node because
08:16 - you always start with the root node and
08:17 - then the data that we're searching for
08:20 - so let's see how that works first of all
08:22 - we have to check if we have an empty
08:23 - tree if the node equals null then we
08:26 - have an empty tree and we can return
08:28 - null now we're see does data equal node.
08:31 - data so we're trying to see if we can
08:33 - find that data in the tree so if we've
08:36 - found the node with the data this is
08:40 - what we're going to do there's actually
08:41 - three different options either node has
08:44 - no children that would be just like the
08:46 - 76 if there's no children we just
08:48 - completely delete that node so if node.
08:51 - left equals null and node. right equals
08:53 - null that means there's no children just
08:55 - return null when we're returning null
08:58 - we're setting the node that had that
09:00 - data to null now we're going to check if
09:02 - the node just has one child if node has
09:06 - no left child if node. left equals null
09:09 - that would be just like this 54 here
09:11 - there's a node on the right but there's
09:12 - no node on the left if node do left
09:16 - equals null then we're just going to
09:18 - return node. right that means we're
09:21 - going to replace this node with whatever
09:23 - is on the right which is 67 so instead
09:25 - of 72 pointing to 54 that will be
09:28 - replaced with 54s node. right which is
09:31 - 67 and if there's no node on the right
09:34 - we're going to do the same thing we're
09:35 - going to just return the node that's on
09:37 - the left to be the the new node that's
09:39 - being pointed to it gets more
09:42 - complicated when the node has two
09:44 - children like such as fifth 17 if you
09:47 - want to replace node 17 you can't just
09:51 - put in 12 here because then what will
09:53 - happen to 23 you can't just put in 23
09:55 - here cuz then what will happen to 12 so
09:58 - let's look down here at the this picture
09:59 - down here is kind of small let's say
10:01 - we're trying to remove this three here
10:02 - that has the red X in here the way to
10:05 - remove this node right here would be to
10:08 - replace it with this node down here so
10:11 - if we remove three we can place we can
10:13 - replace it with four and then everything
10:16 - will be right with the binary search Tre
10:18 - so if you look at what it would become
10:20 - over here we just replace the four down
10:22 - here with the three up there but how are
10:25 - we going to get down to that four well
10:27 - first we have to go to the right sub
10:29 - node and then we have to go all the way
10:32 - down to the most left sub node after
10:34 - we've gone to the right sub node so
10:36 - let's see that we're going to create a
10:38 - temp node which is going to be node.
10:40 - right so in this case the temp if we're
10:42 - trying to delete the three the temp node
10:43 - would be node. right which would be the
10:45 - six here while no tip node. left does
10:48 - not equal null tip node equals node.
10:51 - left that means we're going to keep
10:53 - first we're going to go to the right of
10:54 - the node we're going to delete and then
10:56 - we're going to keep going to the left
10:57 - until we get to the last one one on the
10:59 - left side and this one just happens to
11:01 - before there's no more to go down
11:03 - because you just have to go down one but
11:04 - if there was more to go down it would
11:06 - just keep hopping down and until it got
11:07 - to the most left node now we're going to
11:09 - set node. data to Temp node. data so the
11:13 - node is the three up here so instead of
11:16 - the data of this node being three the
11:18 - data of the node is now four because
11:20 - temp node. data is four now we're going
11:22 - to set node. right to equal and now here
11:25 - we're going to call the remove node
11:27 - function again This Is Where It Starts
11:29 - becoming recursive and we're going to
11:31 - pass in the node the node on the right
11:35 - and the temp node data and this will
11:38 - keep running through the function and
11:40 - set up the right side of the tree
11:42 - correctly we see here we were saying if
11:45 - data equals node. data else if data is
11:49 - less than node. data that just means we
11:51 - have to go to the left side of the tree
11:53 - because it's less and here we're going
11:55 - to call we're going to say that node.
11:57 - left equals remove node and we're going
11:59 - to call this recursive function again
12:01 - and pass the node. left and the data and
12:04 - then we're going to return the node else
12:06 - that means data is more than node. data
12:08 - we're do node. write and then call this
12:11 - recursive function again and node. write
12:13 - data and we're going to return the the
12:15 - node so you can see that delete is the
12:17 - most complicated one that we've covered
12:20 - especially when one node has two Leafs
12:23 - so let's look at how you use a binary
12:25 - search tree at least this one that I've
12:26 - created so far so let's open up the
12:28 - console here I'm going to do const BST
12:31 - equals new BST I've created my binary
12:33 - search tree we're going to add four add
12:35 - 2 6 1 3 57 and then I'm going to remove
12:38 - four and then we're going to f we're
12:40 - going to console.log the Min and the max
12:43 - two times and then we're going to check
12:45 - to see if four is present and another
12:46 - thing we're going to do is I'm going to
12:48 - add in a remove 7 and we'll run that
12:52 - again you can see it first it's the
12:54 - minimum is one it's going to console.
12:56 - log Max which is seven but then we
12:59 - remove seven and now the max is going to
13:01 - be six and we're going to see is this
13:04 - present is for present false no four is
13:07 - not present because we've removed it
13:09 - this video covered all the key methods
13:11 - common to a binary search tree however
13:13 - in a future video I'll be going over a
13:15 - few other things you can do such as
13:16 - finding the tree height and traversing
13:18 - the tree through in order pre-order and
13:21 - post-order traversal if you want to play
13:23 - around with this code you can check the
13:25 - link to the code in the description
13:27 - thanks for watching my name is Bo KS
13:30 - don't forget to subscribe and remember
13:31 - use your code for good