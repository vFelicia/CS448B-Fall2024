00:06 - hello here we are yay
00:10 - i have to say i'm so embarrassed that
00:11 - you all saw my dirty desktop
00:15 - over there i usually make a folder
00:17 - called desktop and put everything in it
00:19 - before i give a talk and show off my
00:21 - desktop but
00:23 - oh well didn't get a chance to do that
00:24 - today um
00:26 - yeah the algorithms of css i'm really
00:28 - excited to give this talk at jsla
00:30 - i think this is especially a talk that's
00:33 - great for javascript developers or
00:35 - people who are um you know maybe more on
00:37 - the side of javascript than css to hear
00:39 - um but uh like
00:41 - ryan said i did this talk at css comp eu
00:43 - in berlin um last month
00:46 - in june and it was very exciting really
00:49 - fun to be in berlin and so i'm giving
00:51 - this talk a version number so 1.5.2
00:54 - is this version
00:55 - so there's some new stuff in here
00:56 - anyways um nice whiteboard so hello my
01:00 - name is laura shank and i've been in la
01:03 - for like a year and a half it's okay i'm
01:05 - from the east coast we'll see um
01:07 - this is my property on twitter rs126
01:11 - very exciting and i am a
01:14 - front-end and wordpress developer
01:17 - scratch that out for design engineer
01:20 - because i just got a job i've been
01:22 - freelancing for a while and i got a job
01:23 - and the title is design engineer and i'm
01:25 - like okay like
01:26 - the front of developer works too but
01:28 - design engineer that sounds really cool
01:30 - job titles are weird
01:32 - um okay so my a little about my
01:33 - background so css has really been um
01:37 - kind of the language that i would relate
01:39 - to most for most of my development
01:41 - career um i started coding
01:44 - like eight years ago or so in college um
01:47 - i was an art major and i started
01:50 - learning to build wordpress sites
01:52 - as a way to make money and that kind of
01:54 - turned into a career that i really love
01:56 - but css and html in particular are these
01:59 - really accessible languages that you get
02:01 - really
02:02 - uh
02:03 - immediate results from like visual
02:04 - results so anybody with a visual
02:06 - background probably takes to them really
02:07 - quickly but there's this kind of weird
02:09 - bias in the industry where it's like oh
02:11 - it's not real programming like
02:13 - not real coding so i was like oh this is
02:16 - bizarre uh but it's not but it kind of
02:18 - is so i
02:20 - kind of went on this journey to learn
02:21 - computer science mainly because i
02:24 - got a pretty major whiteboarding
02:25 - interview and i was like oh god i have
02:27 - to learn to write algorithms now wow
02:30 - this is like sort of relevant to my
02:32 - day-to-day work
02:34 - so i wanted to bridge this gap between
02:37 - css and computer science because as i
02:38 - started learning more computer science i
02:40 - was like this is so cool and fun and
02:42 - like css is kind of boring now because i
02:44 - don't have these uh
02:46 - programming challenges in the same way
02:48 - when i write css as i did when i was
02:49 - working on these algorithms
02:51 - algorithms and computer science studies
02:53 - and so throughout this process of
02:55 - connecting computer science and css css
02:58 - went from like oh god i'm writing
03:00 - instructions this is so boring to like
03:02 - whoa like css is unbelievable it is
03:05 - unbelievable what css does it's so cool
03:07 - that we don't have to do all of that and
03:09 - so i hope to in this talk um impart a
03:11 - little bit of that enthusiasm and
03:14 - encourage everybody to kind of peek
03:15 - under the hood a little bit and see what
03:16 - css is really doing
03:18 - okay so i started out my research with
03:20 - this question
03:22 - is css a programming language
03:25 - followed up with a fire emoji
03:28 - because that's definitely a hot topic or
03:30 - definitely elicits a lot of like
03:33 - like gut responses from people like yes
03:35 - no
03:36 - um
03:37 - so i asked this question on twitter and
03:40 - got a variety of responses so we have
03:44 - 42
03:45 - yes it's a programming language 50 no
03:48 - and 8 i'm not sure this was really
03:50 - interesting because the yeses were like
03:52 - yes absolutely like yes css is a
03:54 - programming language and the nodes were
03:56 - like no i don't i don't i don't list it
03:59 - in my list of languages or like no i
04:01 - don't really see it as a programming
04:02 - language kind of more opinion based and
04:04 - i was like okay let's stop like what
04:06 - what's going on here why is there this
04:08 - weird discrepancy like such a polar
04:10 - discrepancy and so i was like what is a
04:12 - programming language it turns out
04:15 - a programming language the many
04:16 - definitions i've read and i did a good
04:18 - bit of research about this it's a
04:19 - language of instructions for a computer
04:22 - it's kind of paraphrasing wikipedia and
04:24 - others but there are a few really
04:26 - pointed good blog posts about what a
04:27 - programming language is and how we
04:29 - define a programming language in the
04:30 - world of computer science it's important
04:32 - for that definition to be really broad
04:34 - because programming is really a language
04:36 - of instructions for computer and how the
04:39 - how those instructions are formatted can
04:41 - vary greatly
04:42 - so
04:43 - that uh kind of brings us to programming
04:45 - paradigms how many of you out here are
04:47 - familiar with programming paradigms
04:51 - okay a few people yeah so
04:54 - these two words in particular should
04:55 - probably be familiar-ish but a
04:57 - programming paradigm is in general a
05:00 - category or a model for how programming
05:03 - how a programming language works or how
05:06 - a program is written so they're kind of
05:08 - big picture categories or paradigms so
05:10 - not necessarily super specific um
05:13 - so imperative is kind of a very big one
05:16 - and then declarative and that's those
05:18 - are like the two umbrella
05:20 - um
05:22 - the umbrella paradigm so you can kind of
05:23 - dig in between uh dig into each of those
05:26 - more either way so imperative is how so
05:28 - when we have an imperative programming
05:30 - language we're telling a computer how to
05:32 - do something and a declarative language
05:33 - tells a computer what to do and the main
05:36 - difference there is the presence of
05:37 - control flow in an imperative language
05:40 - and no control flow in a declarative
05:41 - language so
05:43 - what control flow means is you're kind
05:45 - of controlling the execution of
05:47 - statements the execution order of
05:48 - statements so in an imperative language
05:50 - a programs read top to bottom and you
05:52 - might be jumping all around in order to
05:54 - execute
05:55 - the execution order of statements and in
05:57 - a declarative language that execution
06:00 - and those logic
06:01 - that logic is more baked into individual
06:03 - commands so you might just say like do
06:06 - this and it's doing a whole bunch of
06:07 - things but you're really just giving it
06:08 - that one instruction
06:10 - so what kind of languages fall into
06:12 - these categories
06:14 - imperative languages are what we usually
06:15 - think of so javascript ruby c plus plus
06:18 - python et cetera and declarative
06:20 - languages are often domain specific
06:24 - um sql is a domain specific declarative
06:28 - language for databases
06:30 - html okay is the domain specific
06:33 - declarative programming language and of
06:35 - course our beloved css falls under this
06:38 - category
06:40 - all right there we go
06:41 - yeah i was like oh my god yes i did it
06:44 - like it proved it like okay it's so
06:47 - instructions for a computer like okay
06:49 - got it um
06:51 - obviously they're very like
06:53 - writing python and writing css are very
06:55 - different but i think they can be um
06:57 - there's a lot of interesting things that
06:58 - come from looking them at them under the
07:00 - same lens so css further is turing
07:03 - complete css plus html
07:06 - turing complete refers to the ability to
07:08 - simulate a turing machine which is the
07:10 - ability to compute a problem of a
07:11 - certain complexity and css and html can
07:13 - do that together
07:15 - css has math there's a calc function it
07:17 - has functions and variables and so it's
07:19 - like what's going on why isn't it a
07:20 - programming language so i would ask like
07:22 - why not um yeah there's a lot of
07:24 - differences and it is this domain
07:26 - specific language and domain specific
07:28 - languages in general are a really
07:29 - different topic um but why not the web
07:32 - is declarative in a lot of ways so we
07:34 - have a lot of power in um telling a
07:36 - computer what to do instead of how to do
07:38 - it like a lot of apis are written in
07:40 - declarative fashion
07:42 - so css is a domain-specific declarative
07:45 - programming language
07:47 - 100
07:50 - okay it's a little bit of a mouthful and
07:51 - it's like well i got it i you got to
07:53 - include that declarative domain specific
07:55 - part otherwise it sounds weird
07:57 - um css developers program the layout of
08:00 - web pages
08:02 - uh more like boxes though so if we like
08:05 - dig into it it's like oh programmers of
08:06 - boxes like i like that um but then if
08:09 - you think about how a browser really
08:11 - works and it's like they kind of all
08:12 - become images
08:14 - after a while so give that a 100
08:17 - and with that in mind
08:19 - um we're going to do browser internals
08:21 - in less than five minutes
08:23 - this is a new part of the talk i'm going
08:24 - to try to
08:25 - zip through it because it's important to
08:27 - have this background and this mental
08:28 - model for how a browser works how many
08:30 - how many people have
08:31 - um taken the time to really look into
08:34 - the inner workings of a browser
08:38 - okay a few people good
08:40 - yeah this like
08:41 - really changed the way i did everything
08:43 - it's kind of funny like you can write
08:45 - web write code and build websites and
08:47 - not necessarily understand how a browser
08:49 - works that's how like abstracted our
08:50 - tools are from what they actually work
08:52 - with from the domain so to speak so okay
08:54 - here's me on the computer
08:56 - obviously
08:57 - and there's a server obviously and when
09:00 - i use a computer i'm like okay server
09:02 - like typing in the browser give me data
09:05 - and server's like okay here is data
09:08 - great okay
09:10 - bye we're done um yeah so some words
09:12 - client server um http request and that
09:16 - response from a server is given in bytes
09:19 - and those are bytes of
09:21 - html css and javascript code
09:24 - um so if we go inside the browser we
09:25 - take those bytes
09:27 - and those bytes are parsed into tokens
09:32 - and so the if you kind of picture all
09:34 - these bytes which stand for certain
09:37 - letters
09:38 - and then the parser looks and grabs
09:40 - looks for certain combinations of
09:42 - characters and then assigns meaning to
09:44 - those characters in the form of tokens
09:46 - and as it's going through those tokens
09:48 - it's saying like oh is this html is this
09:50 - css is this javascript
09:52 - and it turns those into trees so we have
09:55 - the dom beloved dom and there's also css
09:58 - om which is the tree representation of
10:01 - styles and that information is then
10:04 - taken and turned into a different tree
10:06 - which is the render tree or the style
10:08 - rule tree and this rule tree
10:11 - is essentially a list of instructions
10:14 - for laying out a browser web page i am
10:17 - totally skipping javascript fyi
10:20 - in this description of a browser
10:22 - um
10:24 - algorithms of css come on
10:27 - so
10:27 - the that render tree is kind of a
10:30 - blueprint of instructions for laying out
10:32 - a web page and laying out all these
10:33 - boxes and the layout process in a
10:35 - browser if you've ever heard of reflow
10:36 - that
10:37 - refers to triggering this layout process
10:39 - it's like a recursive process for laying
10:41 - out all of these boxes based on the
10:43 - instructions in the render tree
10:44 - then all those boxes
10:46 - are painted and so they become images so
10:48 - it's kind of like a bunch of little
10:50 - images laid out on top of each other and
10:52 - then there's the composite step where
10:54 - there's a certain set of css properties
10:56 - that are applied after paint and
10:58 - everything is kind of composited into
11:00 - one big image which is then rendered
11:02 - onto the browser
11:03 - or rather rendered onto your computer so
11:06 - rendering yay
11:07 - so css is a domain specific language to
11:10 - program like this rendering process
11:12 - that's kind of how i like to look at it
11:14 - okay
11:15 - switching gears slightly
11:18 - two algorithms
11:20 - yay
11:22 - i like drawing these little monsters
11:23 - there's a couple of them in here
11:25 - okay so algorithms another definition a
11:28 - well-defined computational procedure
11:30 - that takes input and produces output
11:33 - has anybody read well if you've read it
11:35 - in its entirety that's amazing but
11:37 - thomas coreman has this introduction to
11:39 - algorithms book that's kind of the
11:40 - canonical textbook assigned in intro
11:43 - computer science classes but i recommend
11:45 - looking it up um it's a little dense but
11:47 - it's definitely a comprehensive overview
11:50 - of algorithms
11:51 - so if we take a that definition and put
11:53 - that in a little framework we've got
11:55 - inputs and we've got outputs
11:57 - input sorting sorting's a great use for
12:00 - algorithms so we've got an unsorted list
12:03 - output is going to be a sorted list what
12:04 - happens in the middle
12:06 - well
12:07 - let's hear who can name a sorting
12:08 - algorithm
12:12 - merge sort oh whoops bubble sorts first
12:16 - what was that one
12:18 - lazy sort oh that sounds like my kind of
12:20 - sorting algorithm
12:22 - select i'm not actually lazy everyone
12:24 - but
12:25 - [Music]
12:26 - selection sort bubble sort merge sort
12:29 - quick sort okay yeah these are all
12:31 - solutions to the sorting problem cool
12:33 - let's look at an implementation of
12:35 - bubble sort
12:37 - cool
12:38 - wow bubble sort in all its glory it's
12:41 - not so if for anybody who's not familiar
12:43 - bubble sort's kind of known as like a
12:44 - really slow sorting algorithm um
12:48 - but it's a good intro intro to
12:49 - algorithms kind of thing so this is
12:50 - imperative javascript it's imperative
12:52 - code so the computer is going to read
12:55 - this program and kind of jump around
12:56 - between statements there's a for loop so
12:58 - it's going to jump back up to execute
13:00 - certain code um
13:02 - look at heart because like we like
13:03 - javascript of course so if this was
13:05 - declarative code if i wanted to do
13:06 - declarative bubble sort all of this
13:08 - would be hidden somewhere and i would
13:10 - just say like bubble sort
13:12 - basically
13:14 - okay
13:14 - um
13:16 - let's look at another framework
13:20 - wow you think that's funny huh bubble
13:21 - sort so good okay let's have another
13:24 - algorithm input uh a tall stack of boxes
13:28 - ah see where this is going output a row
13:31 - of boxes what's in the middle
13:34 - display flex perhaps
13:36 - float to left gasp
13:40 - floats still have their place my friends
13:42 - um okay let's take a look at the
13:44 - implementation of display flex
13:49 - groundbreaking
13:51 - display wow
13:54 - that's a declarative css that's so cool
13:57 - i love it okay what so what's happening
14:00 - under the hood here like what is display
14:02 - flex i'll show you a very tiny piece of
14:04 - display flex in a moment um so this is
14:07 - the difference between kind of
14:08 - declarative code and imperative code
14:10 - declarative was what you see on the top
14:11 - and there's this whole like huge backing
14:14 - of imperative code underneath so
14:16 - for css that declarative part is the
14:19 - browser or rather uh the tip of the
14:21 - iceberg
14:22 - um and then underneath we have c plus
14:25 - plus or rust code so this is the source
14:27 - code of a browser and i spent a really
14:29 - long time looking through browser source
14:31 - code it's really fun actually especially
14:33 - after i had this all this kind of
14:35 - algorithms background knowledge i was
14:36 - like this is really addicting to take
14:38 - what i know really well css and map it
14:41 - to the browser
14:42 - and what's under the hood
14:45 - okay so this is a little bit of rust
14:47 - code from the source of servo which is
14:51 - the browser engine in
14:53 - firefox quantum
14:55 - um you can read this if you want to
14:58 - flex wrap maybe is my comment i'm not
15:00 - sure if this is actually flex rap but
15:03 - this is a little tiny snippet of the
15:05 - probably thousands of lines that make up
15:06 - what flexbox does and we don't have to
15:09 - write this that's pretty awesome
15:11 - imperative rust love it firefox
15:14 - okay
15:15 - so what like so okay yeah i know i knew
15:18 - there was some kind of browser code that
15:20 - was happening under the hood of css
15:21 - obviously so this is when like when i
15:24 - learned this and started thinking about
15:26 - this as i was reading css this is when
15:28 - css went from like oh god instruction's
15:30 - boring to like whoa
15:32 - what is this doing like there's so much
15:34 - computer science all over css and when
15:37 - you start to think about it it's like oh
15:38 - this is incredible i love it
15:40 - okay let's take a look at another
15:41 - algorithm
15:43 - does anybody know what this one might be
15:47 - the cascade
15:50 - who loves the cascade
15:54 - okay a couple people cool who strongly
15:56 - dislikes the cascade
16:00 - less people cool i like it i feel like
16:02 - the cascade gets a lot of flack because
16:03 - it can be a real gotcha for
16:06 - people starting to learn css and it's
16:07 - something very unique to the domain of
16:09 - css so let's look at the cascade as an
16:12 - algorithm because that's what it is
16:14 - an algorithm that combines property
16:16 - values from different sources so that's
16:18 - from mozilla developer network this is
16:20 - also the first thing that comes up when
16:21 - you google algorithms and css
16:24 - maybe my talk will come up now but
16:27 - this is really um a little background
16:29 - too because we're going to use some
16:30 - terms here
16:32 - in css the different components like
16:35 - kind of the grammar so to speak of css
16:37 - as a language um it's very specific name
16:40 - so selector is
16:42 - what you use what you're selecting in
16:44 - order to style so that could be your
16:46 - class or it could even be like a
16:47 - suitable element um a general selector
16:50 - and then we have property and value and
16:53 - those together are called a declaration
16:55 - and then the whole thing is called a
16:57 - rule or a rule set so i think it's
16:59 - important to use these terms really
17:00 - intentionally
17:02 - and that's what everything's referred to
17:04 - as in the source of a browser and in
17:06 - spec so it helps a lot to use those
17:07 - terms
17:09 - algorithm of the cascade
17:11 - value okay input we have our array of
17:14 - values that are collected from various
17:15 - areas
17:17 - output it's a sort essentially a sorted
17:18 - array of those values or not not an
17:20 - array per se but a sorted list of those
17:22 - values so the cascade takes these um
17:26 - values from different areas so if you
17:27 - have a paragraph that has a style from
17:30 - the browser and then a style from
17:31 - various areas it's going to combine them
17:35 - and then we have some steps in there
17:37 - and the steps are
17:38 - sorting by
17:40 - importance and origin
17:42 - specificity and the order specified
17:45 - cool you get a winner um not going to go
17:47 - on too much about that because you can
17:49 - read the spec and that's like going
17:50 - through algorithm step by step it's not
17:52 - that exciting so i was like okay i want
17:54 - to look at this in the browser like
17:56 - cascade
17:58 - magic this is what i expected to find i
18:00 - was like function cascade magic and
18:02 - guess what i found
18:05 - functioning cascade i was like wow so
18:08 - this is probably not the actual like the
18:10 - real cascade it's in there's many
18:12 - definitions of the cascade throughout
18:13 - the source code but
18:16 - i was like this is a fun slide cool
18:18 - um so where do where do you see this if
18:20 - you want to kind of peek under the hood
18:21 - and take a look into a browser
18:24 - searchfox.org has the source code of
18:26 - firefox um
18:28 - and then
18:29 - chromium.org cs chromium.org it's the
18:31 - open source uh
18:34 - rendering engine called blink which is a
18:36 - fork of webkit and that is written in c
18:38 - plus plus which i found a little more
18:40 - difficult to look around and it's also a
18:41 - much older code base
18:43 - so my process here was to kind of go
18:45 - back and forth between the spec
18:47 - of something and then see if i can find
18:49 - that implementation in the source code
18:52 - which is pretty cool
18:53 - and
18:54 - let's take a look at the cascade
18:57 - in the browser so in inspector and i'll
19:00 - go through this quickly so i'm sure
19:01 - we've probably used the inspector before
19:03 - our devtools so
19:06 - here are some declarations and some rule
19:09 - sets and we can see this one value is
19:12 - kind of the winning value so that's the
19:13 - one that's not crossed out
19:16 - links are a good example of this because
19:17 - a lot of times there's several styles
19:19 - that are applying to a link then we can
19:20 - also hit computed here so the computed
19:23 - tab will show us a little different view
19:25 - that's based on all the properties so
19:27 - rather than showing you the rule sets
19:29 - you can look at the computed view to see
19:30 - different property properties and values
19:33 - and that'll show us everything that is
19:35 - sorted here so this is kind of that
19:36 - other side of the spectrum that's sorted
19:38 - list in the output
19:41 - and also notice
19:43 - um this rgb value so the value that was
19:46 - defined in the style sheet was a hex
19:48 - code and this is showing us a computed
19:50 - value of rgb so one other step in
19:53 - rendering is that all of these values
19:55 - that we write a lot of the values in css
19:57 - that we write are for our purpose so
19:59 - like percentages or viewport units
20:02 - those are for us to read and the browser
20:04 - has to ultimately turn everything into
20:06 - pixels in rgb which is kind of
20:08 - interesting
20:10 - um we can also look at this browser
20:13 - styles
20:14 - checkbox here and that will kind of show
20:15 - us that indeed every property does have
20:18 - a value so it's kind of an interesting
20:20 - concept so you can always like reset
20:21 - properties back to their original values
20:25 - um okay
20:27 - so i wanna have a little story here
20:32 - of writing css this was a beautiful
20:35 - mock-up that i got from
20:36 - an agency i was working with a little
20:38 - bit ago
20:38 - so it's like the mobile moc this is not
20:41 - this is a drawing of the mock obviously
20:43 - hopefully that was obvious but there's
20:45 - like there's this beautiful ocean on top
20:49 - and i was like okay cool like yeah we
20:51 - can split this up into two images it's
20:53 - like high-res ocean thing and then the
20:54 - bottom one will be a a little
20:56 - transparent png but it'll be a png so
20:58 - it's a little smaller
20:59 - i was like okay this sounds great so i
21:01 - started writing it started writing the
21:02 - code coding up layout
21:04 - and i was like oh my god these are
21:05 - completely different aspect ratios so
21:07 - like oops so over here it's like oh
21:09 - they're totally different like this oh
21:11 - it's not working i'm having to do some
21:13 - weird annoying positioning stuff so i
21:15 - started writing css with a hammer which
21:17 - is what kind of the default is you're
21:19 - like keep trying things you're like oh
21:20 - my god just work like
21:22 - keep trying stuff over and over and over
21:23 - again
21:24 - and eventually it'll work right um
21:28 - time via probably you'll probably figure
21:30 - it out eventually and then the next
21:31 - person that has to read it it's gonna be
21:33 - like what is going on so that's i mean
21:35 - we do this with more languages than just
21:37 - css for sure
21:38 - but i would say no i was like
21:41 - no i'm not gonna write css with a hammer
21:43 - right now i'm doing all this research
21:44 - about algorithms and like css as a
21:46 - programming language why don't i like
21:47 - break down this problem into like an
21:50 - algorithm why not so
21:52 - i thought about this framework and i was
21:54 - like what are my inputs are these couple
21:56 - images in a device and outputs are my
21:59 - programmed images my programmed boxes
22:02 - sitting together perfectly so i was like
22:03 - okay what would that look like how do
22:05 - you write an algorithm i was like well
22:07 - i'm studying this damn whiteboarding
22:09 - interview
22:10 - and
22:11 - there's like a defined process for how
22:13 - to write algorithms in a whiteboarding
22:15 - interview so first you plan out your
22:17 - algorithm then you come up with a brute
22:19 - force solution
22:20 - and then you walk through it and then
22:22 - you optimize your solution so i was like
22:24 - what would this look like if i was
22:26 - applying this process to css
22:29 - so
22:30 - i started by planning it out so think
22:32 - about how i want these boxes to respond
22:34 - at each device size
22:36 - and it's so important to like bacon
22:38 - responsive design um from the get-go
22:41 - like as soon as you start writing css be
22:43 - resizing your browser all the time um
22:46 - and then you know map it out a little
22:47 - bit so the more i've started thinking
22:48 - about css like this the more i
22:51 - like use pen and paper and map out some
22:53 - values i'm thinking about it
22:54 - algorithmically a bit more and i would
22:56 - write some uh pseudo code pseudo code
22:58 - css sure
23:01 - and this eventually can kind of become
23:02 - my styles and i change it a bunch but
23:04 - then brute force solution aka spaghetti
23:08 - yeah
23:10 - that's fine like we're allowed to write
23:11 - bad code that's okay
23:16 - so am i brute force css um smelly css
23:19 - what are some qualities of brute force
23:21 - css
23:22 - part of a system no definitely not
23:26 - magic numbers absolutely do i have a
23:28 - bunch of hard-coded pixel values for
23:30 - sure
23:31 - to do comments everywhere also
23:33 - absolutely
23:35 - does it work
23:36 - maybe a little bit cool like it's just
23:39 - your time to look play around figure out
23:41 - what you're looking for try to get to
23:42 - work
23:43 - um and my walkthrough step so it's like
23:45 - resizing the browser all the time i'm
23:47 - sure a lot of us do this and it's like
23:49 - i'm not sure if
23:51 - users do that but i do so it's gotta
23:54 - work
23:56 - um
23:56 - and then
23:57 - optimization so our optimize step which
24:00 - also includes refactoring so kind of
24:02 - over and over and over again
24:04 - wow you like that over there laughing
24:07 - okay so we take our smelly css
24:10 - and transform it into a beautiful flower
24:15 - of course that's how code optimization
24:18 - works right
24:20 - um what are some qualities of optimized
24:22 - css part of a system yes so
24:25 - um how many of you work within a design
24:28 - system or some kind of component
24:29 - architecture
24:32 - okay that's a good number of hands um i
24:35 - personally when i've done this i find it
24:36 - so hard to write to like write new css
24:39 - with that architecture in mind so my
24:42 - strategy now is kind of like write the
24:44 - crap css get it working and then be like
24:46 - okay how can i incorporate this into my
24:48 - system um what change do i need to add a
24:51 - new component or new whatever but get it
24:53 - working first then think about all this
24:54 - stuff does it use algorithms so does it
24:56 - use algorithms like flexbox grid css
24:59 - grid has a ton of amazing algorithms um
25:01 - intentional cascade so the cascade can
25:03 - be some pretty incredible like baked in
25:05 - declarative logic and especially in
25:07 - terms of browser support
25:09 - so try to embrace that to do comments
25:12 - probably some of them still but get rid
25:14 - of a lot of them
25:16 - okay
25:17 - and i'll do this slide just to kind of
25:19 - show some of my favorite optimized css
25:22 - things so custom properties plus the var
25:24 - function i would love to do another talk
25:26 - about that game changer with css custom
25:28 - properties amazing um per component grid
25:31 - layouts css grid if you haven't spent
25:33 - you know an hour something go to css
25:35 - grid garden and do the exercises it's
25:38 - amazing so fun um calc math is great
25:42 - uh flexbox yay
25:44 - transforms and positioning transforms
25:46 - are incredibly performant properties to
25:48 - animate they're great
25:49 - viewport height width um aspect ratios
25:53 - less media queries yay hearts for
25:55 - everything okay
25:56 - yellow light i want to show some couple
25:58 - algorithms here as we're finishing out
26:01 - this is the algorithm for
26:04 - my wonderful ocean
26:06 - so i'm not sure everybody can see this
26:07 - this may or may not have a pointer oh
26:09 - yay
26:10 - okay so
26:12 - setting some custom properties at the
26:14 - top so like setting up some values some
26:16 - pretty cool css grid stuff going on
26:20 - this property is going to be adjusted in
26:22 - a media query that is not present on the
26:24 - slide
26:25 - um etc
26:28 - so very intentional code that kind of
26:29 - took a while to fine-tune um this is
26:31 - some centering code here so the oldest
26:34 - trick in the book for centering is
26:36 - kind of center and then do use a
26:37 - transform to go up fifty percent
26:41 - um which is what this push value would
26:42 - be
26:44 - um another photoshop i'm gonna these
26:45 - slides will be posted later uh magic
26:48 - maybe
26:49 - okay and then my favorite algorithm
26:58 - fizzbuzz in css no problem
27:01 - absolutely okay
27:03 - cool so
27:06 - back to the
27:07 - kind of higher level thinking here of
27:09 - what we can do with algorithms in css
27:11 - and like algorithmic thinking about css
27:13 - um i think this can really help to
27:15 - smooth out that design uh design to
27:17 - development workflow
27:19 - and can be a conversation starter
27:20 - between designers so if we have our
27:22 - wonderful designer and developer here of
27:24 - course
27:25 - unfortunately this process is not all
27:26 - puppies and kittens but we can pretend
27:29 - it is here talk about algorithms
27:31 - together yay or maybe you have a
27:33 - designer slash developer
27:35 - you can talk about algorithms with
27:37 - yourself kind of help
27:39 - help smooth
27:40 - smooth things out a little bit it can be
27:41 - a nice conversation piece so inputs um
27:44 - inputs are your design so are your
27:45 - designs mock-ups sure is it on a napkin
27:48 - maybe that's cool that's an input um is
27:50 - it a little mock-up of a component also
27:52 - an input
27:54 - and the output is going to be your
27:55 - rendered code so responsible and
27:57 - responsive on all device sizes and
27:59 - what's the algorithm in there so design
28:01 - systems and component libraries like
28:03 - absolutely at a high level the
28:05 - combination of different components can
28:07 - be thought of as algorithms
28:09 - um your css so any css you write yes
28:13 - okay
28:15 - yeah
28:17 - [Music]
28:18 - this guy might be my favorite it's cute
28:20 - okay conclusion
28:22 - um
28:23 - let's try this i don't know maybe not
28:26 - write css with a hammer as much but i
28:28 - found when i started thinking about css
28:30 - as like as programming i was like okay
28:32 - i'm gonna approach these problems with
28:34 - the white board a little more like spend
28:35 - ten minutes and like
28:36 - draw out the widths and heights of
28:38 - things and
28:39 - see if you can kind of come up with a
28:41 - more thought out solution rather than
28:42 - that uh spur of the moment like just
28:46 - banging out instructions
28:48 - um
28:49 - and also look at the biggest takeaway of
28:50 - this whole process is like the code we
28:52 - write and supplies across the board
28:54 - especially in the javascript land of
28:57 - frameworks like the code rewrite is
28:59 - oftentimes kind of the tip of the
29:00 - iceberg and our
29:02 - uh kind of mission as developers i think
29:05 - is to fill in like the bottom part with
29:07 - what we're learning so kind of figure
29:08 - out learn inch by inch what makes our
29:10 - code work
29:12 - um i also had this idea for a cool uh
29:14 - really annoying app called the mindful
29:17 - css bell
29:19 - so
29:20 - it can go off like every 30 minutes and
29:21 - be like read the spec like do you
29:23 - actually know what this is doing read
29:24 - the spec this is cool
29:27 - doesn't that sound like a great app that
29:29 - definitely is up for javascript too any
29:30 - programming language
29:32 - um so at the end of the day did i bridge
29:34 - this gap between css and computer
29:36 - science
29:37 - well kind of figured out it's more like
29:40 - a
29:41 - big grassy area of little pools so
29:44 - they're all part of one thing so css c
29:46 - plus plus html javascript computer
29:49 - science is a very broad spectrum that
29:51 - this is all part of
29:53 - i also want to just mention this talk uh
29:55 - quickly by someone named felian who did
29:58 - a talk called what is programming anyway
30:00 - and she talks about her journey as a
30:03 - computer scientist she was researching
30:05 - domain specific languages and like what
30:07 - is programming and
30:09 - there's this notion of like that's not
30:10 - real programming and that's a a weird
30:13 - thing in the tech community to have
30:15 - someone who's like really excited about
30:16 - something to be turned away by their
30:18 - community
30:19 - um so i think that's just something to
30:21 - keep in mind and like maybe um like math
30:24 - and engineering aren't the only
30:26 - metaphors in ways we can talk about what
30:28 - we do so she in this talk talks about
30:30 - how programming is writing and reads is
30:32 - writing as a metaphor for writing
30:34 - programs which i think is really
30:35 - beautiful and she also draws her slides
30:38 - and i was like what so other people do
30:40 - this this is great so above all like why
30:42 - not so i don't know like css it's great
30:46 - another little monster and thank you all
30:48 - so much
30:51 - [Applause]
31:18 - you