00:00 - react is one of the most popular
00:01 - front-end javascript frameworks and this
00:03 - beginner's course is the perfect way for
00:06 - you to learn how to use react
00:08 - this course is unlike most of the other
00:10 - react courses out there today instead of
00:13 - just a single teacher we've brought
00:15 - together an all-star lineup of
00:17 - instructors to teach this course
00:19 - these three instructors are some of the
00:21 - most popular instructors on our channel
00:23 - and have received well over 10 million
00:26 - views on other tutorials
00:28 - learning from a variety of perspectives
00:30 - can help you solidify your understanding
00:32 - of key react concepts this is a
00:35 - project-based course and it focuses on
00:37 - teaching you everything you need to know
00:39 - to start creating your own react
00:41 - applications
00:42 - first gavin lawn will start from the
00:44 - absolute beginning and teach you the
00:47 - basics of react through building a
00:49 - simple single page application to keep
00:51 - track of team members
00:53 - gavin has been a software developer for
00:55 - over 20 years and he's great at passing
00:58 - down the wisdom he's learned over the
01:00 - years next you'll learn how to make a
01:02 - meals app from john smilga john is one
01:05 - of the most viewed instructors on our
01:07 - entire channel so you're definitely in
01:09 - good hands for this second project he'll
01:12 - teach you how to fetch data from an
01:14 - external api to use in this react
01:17 - application finally you'll learn how to
01:19 - create a simple stock trading app from
01:22 - sanjeev thiagarajan
01:23 - you'll use what you've learned so far
01:25 - and apply it to an application that gets
01:28 - data from an api and stores data to
01:31 - local storage
01:32 - among other things sanjeev previously
01:34 - created one of the most popular and
01:36 - comprehensive api development courses in
01:39 - the world so he is the perfect person to
01:42 - teach you more about using apis with
01:44 - react and to follow along with this
01:46 - course all you need is a web browser
01:49 - every project in this course is
01:50 - developed using the replit online ide
01:53 - replit provided a grant that made this
01:55 - course possible so we're about to get
01:57 - started but let us know in the comments
01:59 - what you think about courses with
02:00 - multiple instructors
02:02 - hi and welcome i'm gavin lon
02:05 - i've been developing software
02:06 - professionally for many years
02:08 - and i'm really excited to bring you this
02:10 - react for beginners course
02:12 - i hope you enjoy it and i hope you
02:14 - benefit from it
02:15 - i've developed a very basic spa
02:17 - application single page application
02:20 - using react that we'll create in this
02:23 - video
02:25 - while we create this application we'll
02:27 - cover basic concepts in react
02:31 - let's take a brief look at the react
02:32 - application that we are going to create
02:35 - so let's say that we are a developer in
02:37 - a software development company where a
02:40 - lot of contract developers are employed
02:43 - on a temporary basis
02:45 - and assigned to their relevant teams
02:47 - depending on the current projects being
02:49 - developed by our organization
02:52 - team members are moved between teams on
02:55 - a fairly regular basis depending on the
02:58 - current projects being developed by our
03:00 - organization
03:02 - so the team member agility as it were is
03:05 - great but keeping track of who belongs
03:08 - to what team
03:09 - can be difficult for our development
03:11 - manager at times
03:13 - the development manager has asked us to
03:15 - develop a basic spa application where he
03:18 - is able to use the application to
03:20 - allocate team members to their relevant
03:23 - teams
03:24 - and can use the application to keep
03:25 - track of the teams and team members
03:30 - on the home page you can see that at the
03:32 - top here
03:33 - we have a drop-down list that contains
03:36 - the names of the teams in our
03:38 - development department
03:40 - below the drop-down list we have a
03:42 - number of cards displayed in a tabular
03:45 - format each card represents an employee
03:49 - the cards that have a dark box shadow
03:51 - surrounding them are the team members
03:53 - that belong to the team currently
03:55 - selected in the drop down list
03:58 - you can see at the top of the page
04:00 - status is presented to the user
04:02 - displaying how many members the selected
04:05 - team currently contains
04:08 - the count of the relevance team members
04:10 - in the selected team changes dynamically
04:13 - and appropriately as the selected item
04:16 - in the drop-down list is changed
04:18 - the user is able to add a new member to
04:21 - the selected team by simply clicking on
04:23 - a card that does not have a dark box
04:26 - shadow surrounding it
04:28 - once the card is clicked a dark box
04:31 - shadow appears around the relevant card
04:33 - and this means the relevant employee
04:35 - represented by the card is now a member
04:38 - of the team selected in the drop down
04:40 - list
04:41 - as a new member is added to the team the
04:43 - count of team members displayed to the
04:45 - user and the status message at the top
04:48 - changes accordingly
04:50 - we have a navigation menu at the top of
04:52 - the page we are currently on the home
04:54 - page where we are able to add team
04:56 - members to teams and remove team members
04:59 - from teams
05:00 - the user is able to navigate by clicking
05:02 - the team's menu option in the top
05:05 - navigation bar to a page that displays
05:08 - the teams and team members in a
05:10 - collapsible list the user is able to
05:13 - click each team name represented as
05:15 - headings in the collapsible list to
05:17 - reveal the list of team members that
05:19 - belong to the relevant team
05:21 - when the user navigates back to the home
05:23 - page
05:24 - the team that was last clicked as it
05:26 - were in the teams page will be the
05:29 - selected team in the drop down list and
05:31 - the user can then add or remove team
05:33 - members from the selected team
05:36 - when the user clicks a card on the home
05:38 - page that already has a dark box shadow
05:41 - meaning that this card represents an
05:43 - employee that is part of the selected
05:45 - team this action will remove the
05:48 - employee from the selected team the
05:50 - result of this action is represented on
05:52 - the ui by removing the dark box shadow
05:55 - from the relevant card
05:57 - so the cards can be toggled whereby the
06:00 - employee that the card represents is
06:02 - added to the relevant team through a
06:05 - click action and is also removed from
06:07 - the relevant team with a click action
06:10 - we are going to develop our spa
06:12 - application using replit
06:14 - replics is a popular free collaborative
06:16 - in-browser ide where you are able to
06:19 - code in 50 plus languages without
06:22 - spending much time on setup
06:25 - so in order to create our react
06:26 - application using replit you'll need to
06:29 - sign up for a free account with replit
06:32 - it's a very simple process where you are
06:34 - able to use your google github or
06:35 - facebook account to sign up for your
06:38 - free replit account or you can simply
06:40 - provide a username email address and
06:42 - password to sign up for your free replit
06:44 - account
06:45 - for details on how to create your free
06:48 - replit account please navigate to this
06:50 - url
06:58 - so you can see here i've logged onto
07:00 - replit
07:01 - and you can see that i've created a few
07:03 - rebels here rebel stands for read eval
07:07 - print loop
07:09 - in a bit i'll take you through a way in
07:11 - which you can create a rebel through
07:13 - raplet but for more details on ways in
07:16 - which you are able to create a reply
07:18 - using replit please navigate to this url
07:26 - so before we create our repl
07:28 - let me open a repel that i created
07:30 - earlier that can be seen as the
07:32 - prototype for the react application that
07:35 - we'll create in this video the finished
07:37 - code for this application is available
07:40 - on github at this url
07:44 - so before we leap into writing code what
07:47 - is react
07:49 - react which is sometimes referred to as
07:51 - a front-end javascript framework is a
07:54 - javascript library created by facebook
07:57 - react is a tool for building ui user
08:00 - interface components
08:02 - how does react work
08:04 - very basically react creates a virtual
08:07 - dom document object model in memory
08:10 - react is very fast react finds what
08:13 - changes have been made and changes only
08:15 - what needs to be changed
08:18 - so let's create a repel for our react
08:20 - application
08:22 - to create a rebel we can click this
08:24 - create button here
08:35 - you can see in the drop down list we
08:37 - have a number of programming languages
08:39 - and developer platforms that we can
08:41 - choose from
08:44 - but we want the react js item
08:58 - in the title field we can name our repo
09:01 - whatever we choose i'm going to name my
09:03 - reple team member allocation
09:17 - then let's press the create rebel button
09:28 - great and our environment is set up for
09:30 - our ripple it's that simple
09:33 - we can now build our react js spa
09:35 - application
09:36 - let's quickly create the traditional
09:38 - hello world application
10:02 - and look at that
10:17 - when we change the output in the app.jsx
10:21 - file it is immediately reflected in the
10:23 - output of our application
10:32 - before we get started building our
10:34 - application let's remove the default css
10:36 - code in the app.css file
10:40 - this is the file where we will include
10:42 - all of our css code for layout and
10:44 - styling purposes
10:54 - we are also going to use bootstrap 5 for
10:56 - layout and styling purposes we'll look
10:58 - at how we are able to integrate
11:00 - bootstrap 5 into our application a
11:02 - little bit later
11:04 - so let's create three ui components
11:06 - using react
11:08 - these ui components are represented in
11:11 - jsx files i'll explain what jsx is in
11:15 - just a bit
11:20 - so let's create a jsx file named
11:23 - header.jsx like this
11:48 - let's create a jsx file named
11:50 - content.jsx
12:02 - and let's create a jsx file named
12:04 - footer.jsx
12:21 - let's create the code for our header
12:22 - component in this video i'm going to
12:25 - teach you the modern way of developing a
12:26 - react application
12:28 - which uses functional components rather
12:31 - than class components for more details
12:34 - on class components and functional
12:36 - components in react please navigate to
12:38 - this url
12:45 - i'll represent our functional components
12:47 - using javascript arrow functions so for
12:51 - example a javascript function can be
12:53 - represented using this syntax
12:57 - you can also represent the same function
12:59 - as an arrow function using this syntax
13:20 - if the function contains parameters the
13:23 - arrow function representation of this
13:25 - function would look like this
13:27 - for more details on arrow functions
13:30 - please navigate to this url
13:33 - all the references to links in this
13:35 - video can be found below in the
13:36 - description of this video
14:13 - so the code for the header component
14:15 - simply outputs this html code to the
14:17 - browser
14:19 - we are now able to reference the header
14:20 - component in our application
14:22 - declaratively by appropriately including
14:25 - a header element within the app.jsx file
14:30 - we first need to import the header
14:32 - component into the app.jsx component to
14:35 - do this we can include this line of code
14:37 - at the top of the app.jsx file like this
14:51 - and now we can include the relevant
14:53 - header element appropriately within our
14:56 - app jsx file
15:02 - great
15:04 - let's take a quick pause and look at the
15:06 - structure of our react application
15:09 - if we open the index.html file you can
15:13 - see that we have a div element with an
15:15 - id of root
15:17 - we also have a reference to the
15:19 - index.jsx file
15:21 - within the index.jsx file the container
15:24 - const is referencing the root element
15:27 - you can see here the render function is
15:30 - being called to render the app component
15:33 - within the root element
15:35 - so let's create the code for our content
15:38 - component to get the basic structure for
15:41 - a functional react component let's copy
15:44 - the code from the header component and
15:46 - paste it into the content.jsx file and
15:49 - appropriately change the code to suit
15:51 - our content component
16:21 - let's do the same for the footer
16:22 - component
16:49 - let's write code to import the content
16:52 - component and the footer component into
16:54 - the app component
17:20 - let's appropriately include the content
17:22 - element within our app component and
17:25 - let's also appropriately include the
17:27 - footer element within our app component
17:58 - so as mentioned earlier we are going to
18:00 - use bootstrap 5 for styling and layout
18:03 - purposes in our application
18:06 - we are easily able to install bootstrap
18:08 - 5.
18:09 - so to do this let's click the icon here
18:12 - representing packages let's search for
18:15 - bootstrap
18:23 - and this is the package that we want to
18:25 - install to install this package let's
18:28 - click the plus icon here
18:37 - great
18:40 - to have access to all the bootstrap 5
18:42 - classes within our react application we
18:45 - can include this import statement within
18:47 - the index.jsx file like this
18:51 - to double check that our bootstrap
18:52 - package has been successfully installed
18:55 - we can open the package.json file
19:05 - great
19:07 - to test that bootstrap is working as
19:09 - expected let's include a few bootstrap
19:11 - classes within our h1 element in our
19:14 - header component
19:44 - great
19:46 - notice here that i've used the class
19:47 - name property within the h1 element
19:50 - rather than the class property in a
19:52 - plain html web page you would use the
19:55 - class property for this purpose
19:57 - to reference a css class or classes
20:01 - in a react application we must use the
20:04 - class name property for this purpose
20:06 - because the class keyword is used in
20:08 - javascript class is a keyword in
20:11 - javascript and jsx is an extension of
20:14 - javascript
20:15 - that's the principal reason why react
20:18 - uses class name instead of class for
20:20 - this purpose
20:22 - so what exactly is jsx
20:25 - jsx stands for javascript xml
20:29 - jsx allows us to write html in react
20:33 - jsx makes it easier to write and add
20:36 - html in react
20:39 - it is just an xml like extension that
20:41 - allows us to write javascript that looks
20:44 - like markup
20:45 - and have it return from a component
20:49 - so within the component we have here the
20:52 - return keyword
20:54 - the code that the component returns is
20:56 - jsx code
20:58 - that represents the markup that we are
21:01 - returning from the component
21:03 - it's important to note that jsx is not
21:06 - valid javascript so browsers can't read
21:09 - it directly
21:11 - so what's known as a transpiler
21:14 - translates it to react dot create
21:17 - element calls
21:19 - transpilers
21:21 - a compiler that translates one form of
21:23 - syntax to another like babel or
21:25 - typescript compiles the jsx into
21:28 - appropriate syntax that browsers can
21:31 - understand
21:32 - let's remove these bootstrap classes
21:34 - here and start to develop the
21:36 - functionality for our application
21:40 - let's create a file named employees.jsx
22:11 - let's copy the basic code structure for
22:14 - a functional component created in our
22:16 - header component and paste the code
22:18 - within the employees.jsx file
22:46 - so let's write code to import the use
22:48 - state hook
22:50 - into our employees component
22:52 - we can do this with this line of code
22:55 - i'll explain what a hook is in react and
22:57 - the functionality made available through
23:00 - the use of the used state hook in just a
23:02 - bit
23:03 - we are using the use state hook in this
23:05 - case
23:06 - so that react can track the state
23:08 - of an array of objects that contain
23:10 - details about our employees
23:42 - so we can set a default value for our
23:44 - use state hook by passing in an
23:47 - appropriate argument to the hook here
23:51 - so we want to pass an array of employee
23:54 - objects
23:56 - to speed things up a bit
23:58 - we can copy the code for the relevant
24:00 - employee array from this location on
24:02 - github
24:31 - and appropriately paste it into our code
24:33 - here like this
24:46 - so let's look at the code that we have
24:48 - just created regarding the use state
24:51 - hook
24:52 - and let's understand the purpose of the
24:53 - use state hook
25:08 - if we navigate to this url
25:11 - the react docs describe hooks as follows
25:14 - hooks are a new addition in react 16.8
25:19 - they let you use state and other react
25:21 - features without writing a class
25:24 - you can see here in an example where the
25:26 - use state hook is used within a
25:29 - functional component
25:31 - the equivalent functionality can also be
25:33 - achieved using classes but of course the
25:35 - code is different when using class
25:37 - components
25:39 - when compared to how we write the code
25:41 - using functional components
25:43 - a hook is a special function that lets
25:45 - you hook into react features for example
25:49 - use state as a hook that lets you add
25:51 - react state to functional components
25:56 - so when would i use a hook
25:58 - if you write a function component and
26:00 - realize you need to add some state to it
26:04 - previously you had to convert it to a
26:06 - class
26:08 - now you can use a hook inside the
26:10 - existing function component
26:15 - what does calling use state do
26:17 - it declares
26:18 - a state variable our variable is called
26:21 - employees
26:23 - but we could call it anything
26:26 - this is a way to preserve some values
26:28 - between function calls use state as a
26:31 - new way to use the exact same
26:33 - capabilities that this dot state
26:36 - provides in a class
26:38 - this javascript syntax is called array
26:41 - destructuring
26:43 - it means that we are making two new
26:45 - variables employees and set employees
26:49 - where employees is set to the first
26:51 - value returned by use state and set
26:54 - employees is the second
26:57 - so basically the first item is the
27:00 - employee data
27:02 - the state of the employees data is
27:04 - maintained in this item the second item
27:06 - is a function reference
27:08 - and is used wherever we need to change
27:11 - the state of the employee's array stored
27:14 - in the first item here
27:16 - so basically the use state hook returns
27:18 - a pair of values
27:20 - the current state and a function that
27:22 - updates it
27:24 - when the state of the employees array
27:26 - changes through a call to the set
27:28 - employees method our employees component
27:31 - is re-rendered to the user's browser
27:34 - the markup jsx code that we'll write in
27:36 - a bit denotes the html code that is
27:39 - re-rendered to the browser
27:42 - so i'm going to quickly demonstrate
27:44 - writing code within the employees
27:46 - component to output a list of each of
27:48 - the employees full names to the screen
27:52 - you don't need to follow along with this
27:53 - part of the video as this is just to
27:55 - demonstrate outputting
27:57 - the relevant markup from our component
27:59 - to the user's browser
28:10 - let's write code to import the employees
28:12 - component within the app component
28:29 - let's replace the content element here
28:32 - with the employees element
28:49 - great
28:51 - so we of course don't just want to
28:53 - output a list of employee names to the
28:54 - screen
28:55 - we want to output the employee details
28:58 - within cards to provide a better ux user
29:01 - experience
29:14 - before we create the code for this let's
29:16 - upload two images that will be
29:18 - appropriately displayed in our employee
29:21 - cards
29:22 - let's first create a folder named images
29:25 - where we'll house our images that we are
29:27 - about to upload
29:29 - you are able to download the relevant
29:31 - images from this location in github
29:43 - you are then able to upload the images
29:46 - like this
30:03 - we can then drag and drop the images
30:05 - into our images folder like this
30:10 - great
30:33 - let's write the code to output the
30:35 - employee data as cards to the ui
30:39 - firstly let's import the image files
30:41 - like this into our employees component
31:23 - notice how when returning jsx code
31:26 - the markup related code must be
31:28 - contained within one element
31:31 - one element must be returned from jsx
31:34 - code
31:35 - if you wanted for example to return the
31:37 - p element
31:38 - and the image element without wrapping
31:41 - these elements in for example a div
31:43 - element
31:47 - react allows you to wrap the relevant
31:50 - elements in empty tags like this
31:57 - in our case we are going to return
31:59 - markup that is wrapped in one element
32:02 - let's write code to return the relevant
32:04 - markup from our employees component
32:08 - note that we are using semantic html
32:11 - here
32:12 - so instead of just using a div element
32:14 - here we are using a more descriptive
32:17 - main element here
32:19 - for layout purposes let's set our main
32:22 - element's class name property to the
32:24 - bootstrap container class
32:28 - for layout purposes let's nest a div
32:30 - element within the main element
32:32 - let's then nest another div element
32:34 - within the development that we have
32:36 - nested within the main element
32:38 - let's set the class name property of the
32:40 - first div development
32:42 - to a bootstrap class that denotes a new
32:44 - row in our pages layout
32:46 - let's set the class name property of the
32:48 - div element we have nested within the
32:51 - row development to a bootstrap class
32:53 - that denotes a new column
32:56 - so i'm using relevant bootstrap classes
32:59 - for these div elements appropriately for
33:01 - layout and styling purposes
33:03 - i won't go into details of these
33:05 - bootstrap classes in this video because
33:07 - i want to focus on react please navigate
33:10 - to this url for more details on the
33:13 - bootstrap grid system
33:22 - we are using javascript's map method to
33:25 - map the data for each item in our
33:28 - employees array to appropriate markup
33:30 - code that will render a card for each
33:33 - employee in the employees array
35:31 - great our cards are displayed as
35:33 - expected to the screen
35:47 - let's center the cards using these
35:49 - bootstrap classes here
36:12 - great
36:14 - i want three cards to be displayed per
36:16 - line so i'm going to use the css grid
36:19 - for this purpose
36:20 - so let's wrap the cards in a development
36:34 - let's set this development's classname
36:36 - property to a class that we'll write in
36:38 - just a bit named card dash collection
36:48 - let's open the app.css class and include
36:51 - the appropriate code for our card dash
36:53 - collection css class
37:22 - so we are setting the display property
37:24 - to grid here
37:26 - and then appropriately setting the grid
37:28 - dash template dash columns property
37:31 - so that each row of cards contains three
37:34 - cards on the ui
37:47 - excellent
37:49 - let's use an appropriate bootstrap class
37:51 - to create an appropriate amount of space
37:53 - around each of our cards
37:56 - this bootstrap class is simply
37:58 - appropriately adjusting the margin
37:59 - property of each of the cards
38:14 - great that looks much better
38:17 - we want the user's mouse pointer to turn
38:19 - into a pointing hand icon when the user
38:22 - hovers the user's mouse over a card
38:25 - we can ensure that the appropriate style
38:27 - of the user's cursor pointer is applied
38:30 - by including this code within the
38:32 - relevant div element that represents a
38:35 - card note that because this is jsx code
38:38 - and not typical html code we must set
38:42 - the style property within the relevant
38:44 - div element to an appropriate javascript
38:47 - object that represents the appropriate
38:49 - css code rather than the literal inline
38:53 - css code that we would apply if we were
38:55 - just writing html code
38:58 - in the case of javascript objects like
39:01 - this it can be confusing for react
39:03 - beginners because you have two curly
39:05 - braces one for the jsx and one for the
39:09 - javascript object notation
39:13 - one of the great things about jsx is
39:15 - that we are able to include javascript
39:17 - logic within expressions to determine
39:20 - what markup code we want to render for
39:22 - our components
39:24 - so we can use curly brackets to tell
39:27 - react as it were
39:29 - that the code within the curly brackets
39:31 - contains javascript logic
39:34 - within the javascript logic we can
39:36 - return html markup related code so let's
39:40 - write a javascript expression that uses
39:42 - a ternary operator to evaluate the
39:45 - gender property of each employee based
39:48 - on this property's value an appropriate
39:50 - image element is returned from our
39:52 - javascript logic
40:43 - great
40:45 - let's create code to output a drop down
40:47 - list containing our teams
40:50 - so for the sake of the example i'm just
40:52 - hard coding the teams
40:54 - in the real world you'd likely retrieve
40:56 - the data from a database through a call
40:58 - to for example a restful web api
41:00 - component
41:57 - great but the select list or drop-down
41:59 - list could look a lot better
42:04 - a really simple way to make our drop
42:05 - down list look better is to use these
42:08 - bootstrap classes
42:31 - great
42:32 - so whenever the user changes the
42:35 - currently selected item in the drop-down
42:37 - list
42:38 - we want this to change the state of our
42:40 - component
42:41 - so to do this we are going to once again
42:44 - use the use state hook
42:52 - so here the selected team variable will
42:55 - store whichever team is selected in the
42:57 - drop down list the second item set team
43:01 - is a function that we can use to change
43:03 - the state of the selected team variable
43:06 - when the set team function is used to
43:08 - change the state of the selected team
43:11 - variable our component will be
43:13 - re-rendered
43:14 - so when our component is first loaded
43:16 - our component is rendered
43:18 - when the user selects a new item in the
43:20 - drop-down list our component will be
43:23 - re-rendered
43:24 - this is because whenever a user selects
43:27 - a new item in the drop-down list our
43:29 - component state has changed and
43:31 - therefore a re-rendering of the
43:33 - employee's component is triggered
43:36 - we can pass in a specific team name as
43:38 - our default value to the use state hook
43:41 - let's pass in team b
43:44 - so when our component is first rendered
43:46 - team b will be the selected item in our
43:48 - drop down list
43:50 - so the next step is to set the value
43:52 - property of the select element to the
43:54 - selected team variable
43:58 - so you can see how react is now able to
44:00 - keep track of the state of our component
44:03 - and render the component appropriately
44:05 - in response to state changes
44:18 - we need to use the set t method to
44:21 - change the state of the selected team
44:23 - variable
44:25 - in order to know when to change the
44:27 - state of the selected team variable our
44:30 - component needs to know as it were when
44:32 - the selected item in the drop down list
44:34 - changes
44:35 - we can use the javascript on change
44:37 - event for this purpose
44:40 - so let's appropriately wire up the
44:42 - onchange event to a method that we'll
44:44 - write in just a bit named handle team
44:47 - selection change
44:54 - let's write the handle team selection
44:56 - change method
44:59 - so we can use the event argument that is
45:01 - passed into our handle team selection
45:03 - change method by default to get the
45:05 - value of the item selected in our
45:07 - drop-down list we can then use the set
45:09 - team method to change the state of the
45:11 - selected team variable
45:13 - this means that when the user changes
45:15 - the selected list item in the drop down
45:17 - list that this action changed the state
45:20 - of our component and our component is
45:22 - then re-rendered
45:24 - let's write codes to log the new
45:26 - selected items value to the console
45:29 - window in our browsers
45:53 - great
45:56 - you can see that we have a few warning
45:58 - messages logged to our console window
46:01 - we'll address these issues as we develop
46:03 - the application
46:04 - i'm in a bit of a bad habit of using
46:06 - class instead of class name
46:08 - when applying css classes to elements
46:11 - please note whenever i forget to use
46:13 - class name and use class ignore me and
46:16 - rather use class name to apply css
46:18 - classes to the elements in your jsx code
46:22 - so we want to add a box shadow around
46:25 - our cards when a user clicks a card on
46:27 - the ui
46:28 - meaning that the user is adding the card
46:31 - representing an employee
46:34 - to the selected team in our drop down
46:36 - list
46:39 - so if the relevant card does not already
46:42 - contain a box shadow around it a box
46:45 - shadow will be added to the relevant
46:47 - card
46:50 - so if the card already has a box shadow
46:53 - surrounding it when the user clicks this
46:55 - card the box shadow will be removed from
46:57 - the relevant card meaning
46:59 - that the employee has been removed
47:02 - from the relevant team selected in the
47:04 - drop down list
47:06 - so basically we want to write code so
47:09 - that whenever a user clicks a card that
47:11 - a box shadow effect is toggled for the
47:14 - relevant card
47:15 - so to do this let's use the on click
47:18 - javascript event and wire up an event
47:21 - handler method to this javascript event
47:24 - named handle employee card click
48:08 - we are going to call the map function on
48:10 - the employees array to return a
48:12 - transformed array where the relevant
48:15 - employee item which in this case is
48:17 - denoted by a card that has just been
48:20 - clicked on the ui within the array is
48:22 - changed in accordance with the team
48:24 - selected in the drop down list
48:27 - so for example if team a is selected in
48:30 - the drop down list the employee item
48:33 - represented by a card that has just been
48:36 - clicked on the ui will change whereby
48:39 - its team name property will be set to
48:42 - the team selected in the drop down list
48:46 - if an employee is already a member of
48:48 - the selected team
48:50 - the card representing the employee will
48:53 - have a box shadow around it
48:55 - when a card with a box shadow around it
48:57 - is clicked the relevant employee items
49:00 - team name property will be set to an
49:02 - empty string
49:03 - the box shadow will be removed from
49:05 - around the relevant card on the ui
49:08 - so the map function traverses the
49:11 - employee items in the employees array
49:14 - the ternary operator checks to see if
49:18 - the employee represented by a card on
49:21 - the ui matches the current evaluated
49:24 - item in the employee's array
49:28 - if a match is found the evaluated
49:30 - employee item's team name property is
49:33 - changed accordingly
49:35 - so basically when a card is clicked if
49:38 - the employee that the card represents is
49:40 - already a member of the team this
49:43 - functionality will cause that employee
49:45 - to be removed from that team
49:47 - if the employee however is not a member
49:50 - of that team
49:51 - that employee will be included within
49:54 - that team
49:55 - once all the employees have been
49:57 - traversed by the map function the newly
50:00 - transformed array is returned and
50:02 - assigned to the const named transformed
50:05 - employees
50:07 - our code is then using the set employees
50:09 - method
50:10 - to change the state of the employee's
50:13 - array
50:14 - this state change then triggers the
50:16 - employee's component to re-render
50:27 - so how do we reflect the change in the
50:29 - state of the employees array on the ui
50:32 - we can add a css class that contains an
50:36 - appropriate box shadow property to the
50:38 - clicked card element
50:40 - or remove the relevant css class if it
50:43 - already contains the relevant css class
50:46 - so we are essentially toggling the css
50:49 - class to create this effect the effect
50:52 - of adding and removing the box shadow
50:54 - from the relevant card
50:55 - so we can achieve this in code by
50:57 - including an appropriate ternary
50:59 - operator
51:00 - that returns the appropriate css code to
51:03 - the appropriate class name property
51:05 - within the relevant div element that
51:08 - represents a card
51:09 - so if the employee's team name property
51:12 - is equal to the team selected in the
51:14 - drop down list
51:16 - ensure that a css class named standout
51:20 - which we'll write in a bit is referenced
51:22 - in the relevant div element
51:30 - else ensure that the standout css class
51:34 - is not referenced in the relevant div
51:36 - element i.e the development that
51:38 - represents a card the card of course
51:41 - represents an employee
51:57 - so let's write the code for the standout
52:00 - css class let's open the app.css file
52:09 - let's add the standout.css class
52:18 - let's include the box shadow property
52:21 - within the standout css class and
52:24 - provide the appropriate box shadow
52:26 - settings
53:42 - excellent
54:30 - so we now want to output status
54:32 - information from the header component
54:34 - whereby when the selected item in the
54:37 - drop-down list changes a count of how
54:39 - many team members exist
54:41 - in the selected team is presented from
54:44 - within the header component
54:47 - to make it easy to communicate state to
54:49 - both the header component
54:51 - and the employee component
54:53 - we can include the state-related code
54:56 - that currently resides within the
54:58 - employees component in the app component
55:01 - which is the parent component of both
55:04 - the employees component and the header
55:07 - component
55:08 - so let's cut the state-related code
55:11 - from within the employee's component
55:13 - like this
55:39 - and appropriately paste this code within
55:42 - the app.jsx file like this
55:58 - let's cut the code that imports the use
56:01 - state hook into the employees component
56:04 - and appropriately paste this code into
56:07 - the app.jsx file
56:19 - now in order for the employees
56:21 - components to be able to effect state
56:24 - and respond to state change
56:27 - we need to pass down the state-related
56:30 - items
56:31 - to the employees component from within
56:34 - the app component
56:36 - we are able to do this in a react
56:38 - application by passing the relevant
56:40 - props
56:41 - to a child component like this
57:18 - prop drilling is an unofficial name for
57:20 - passing props to a child component from
57:23 - a parent component
57:26 - let's take a moment to understand the
57:28 - concept of props in react
57:31 - let's navigate to this url
57:34 - what are props in react
57:37 - we use props in react to pass data from
57:40 - one component to another from a parent
57:43 - component to a child component or
57:45 - components
57:47 - props
57:48 - is just a shorter way of saying
57:50 - properties they are useful when you want
57:53 - the flow of data in your app to be
57:55 - dynamic
57:57 - how to use props without destructuring
58:00 - we are going to use destructuring but
58:03 - let's first understand how to use props
58:05 - without destructuring
58:07 - to use props you have to include the
58:09 - props parameter within your function
58:12 - this is similar to passing arguments
58:14 - into your regular javascript functions
58:17 - here's an example
58:19 - so you can see here the values for the
58:21 - name prop and the tool prop
58:23 - are being passed down to the tool child
58:26 - component within the tool component
58:29 - these prop values can be read through
58:32 - the props object like this
58:35 - so we are passing in our props values
58:38 - from the app component to the employees
58:40 - component in a similar way but we are
58:42 - going to use destructuring to read the
58:45 - relevant props values from within the
58:48 - employees component
58:51 - the next step is to include these props
58:54 - within the function that denotes the
58:56 - employee's component
58:58 - so instead of the props object being
59:00 - passed to our employees component
59:03 - we are destructuring the object into its
59:05 - individual property values
59:09 - so through destructuring we don't have
59:11 - to reference within our employees
59:13 - component the relevant values with props
59:17 - dot preceding the relevant properties
59:20 - destructuring in a javascript expression
59:23 - makes it possible to unpack values from
59:26 - arrays or properties from objects into
59:29 - distinct variables
59:32 - so here we are unpacking values from
59:35 - properties of a javascript object into
59:38 - appropriate distinct variables
59:54 - great
59:55 - we can now use prop drilling to pass in
59:58 - the selected team and count of the
60:00 - number of members of the selected team
60:03 - to the header component
60:32 - we can use javascript destructuring to
60:34 - unpack the relevant props
60:37 - in the relevant object
60:39 - into appropriate variables
60:52 - let's change the header of our header
60:54 - component appropriately
61:08 - let's include code to output the count
61:10 - of team members within the selected team
61:13 - to the browser
62:03 - excellent
62:18 - let's use bootstrap to include
62:20 - appropriate layout code for our header
62:22 - component
63:02 - great
63:04 - let's write code in the app.css file
63:07 - so that text within h1 h2 h3 h4 h5 and p
63:13 - elements
63:14 - are horizontally aligned centrally
63:44 - let's include some basic code in the
63:47 - footer component with some appropriate
63:49 - layout code provided by the relevant
63:51 - bootstrap classes
64:40 - great
64:42 - local storage
64:44 - so every time the state changes for
64:46 - either the employees array or the
64:49 - selected team variable we want to save
64:51 - their values to local storage in react
64:54 - we are able to implement the use effect
64:57 - hook to track state changes for specific
65:00 - variables when a particular state change
65:03 - occurs
65:04 - code passed as a function to the use
65:07 - effect hook can run that appropriately
65:10 - saves our state to local storage
65:13 - so let's see how we can do this in code
65:17 - in the app component where we are
65:20 - importing the use state hook let's also
65:22 - provide code so that the use effect hook
65:25 - is also imported from react
65:29 - we can then pass in an arrow function as
65:32 - an argument to the use effect hook
65:35 - so the first argument denotes the code
65:37 - that we want executed when a certain
65:40 - event occurs for example the state of a
65:42 - variable changes
65:44 - the second argument denotes the event
65:46 - that must occur to trigger the function
65:48 - passed in as the first argument i.e the
65:51 - function that we want executed
65:54 - if however we passed in an empty array
65:57 - like this as the second argument
66:00 - the function passed in as the first
66:02 - argument would only execute when the
66:05 - component first loads
66:09 - in this case we want the function passed
66:11 - in as the first argument to the use
66:14 - effect hook to run when the state of the
66:16 - employees array changes
66:20 - so this is when a user clicks on the
66:22 - card and a team name for an object
66:24 - within the employees array
66:27 - changes
66:28 - ie
66:29 - when its team name property changes to
66:31 - the selected item in the teams drop down
66:33 - list
66:34 - so to do this we can pass in the
66:37 - employee's variable wrapped in square
66:39 - brackets as the second argument
66:42 - then we can appropriately call the local
66:44 - storage dot set item function to save
66:47 - the employee's array to local storage
66:59 - so when the stage changes we are
67:01 - updating the employees array in local
67:04 - storage
67:05 - we can use another use effect hook to
67:08 - save the state changes to the selected
67:10 - team variable to local storage like this
68:12 - great
68:13 - we can then use the
68:15 - localstorage.getitem function
68:17 - to get the value of the selected team
68:19 - saved to local storage
68:22 - rather than the hard-coded value we
68:24 - currently have here that is currently
68:27 - setting the state of the selected team
68:28 - variable by default
68:30 - so by default we are going to be setting
68:33 - the value of the selected team variable
68:36 - from local storage if it exists in local
68:39 - storage if it doesn't exist in local
68:41 - storage it will then be set to the
68:43 - hard-coded value i.e team b
68:46 - so if the relevant value exists in local
68:48 - storage the relevant value in local
68:50 - storage will be passed in to the use
68:53 - state hook and set the selected team
68:55 - variable by default to the appropriate
68:57 - value saved to local storage
69:00 - so we are using what's known as a short
69:03 - circuit evaluation for the javascript
69:05 - expression passed as an argument to the
69:08 - use state hook here
69:11 - what this means is that when javascript
69:14 - evaluates an or expression if the first
69:17 - operand is true javascript will short
69:21 - circuit and not even look at the second
69:24 - operand
69:27 - so we can apply the same logic for the
69:29 - employees array like this
69:44 - so the state of our application will now
69:47 - be persisted to our browser's local
69:49 - storage
70:29 - great
70:38 - one thing i forgot to do
70:40 - is to include an appropriate key
70:42 - attribute within the div element that
70:44 - represents a card that denotes an
70:46 - employee object within a list of
70:48 - employee objects
70:50 - the key attribute helps react identify
70:53 - changes within a list of elements
70:57 - so whenever you have code displaying a
70:59 - list of uniquely identifiable elements
71:02 - it is a good idea to include a key
71:04 - attribute and assign the key attribute
71:06 - to a unique identifier in this case
71:10 - the key is assigned the id
71:13 - of the relevant employee object
71:16 - just to get rid of some of the warning
71:17 - messages i'm getting in the browser
71:19 - console window i'm going to track down
71:21 - where i'm using class instead of class
71:24 - name
71:44 - great
71:47 - routing react router dom
71:51 - the next step is to create functionality
71:54 - so that we can navigate between two of
71:56 - the main components within our react
71:58 - application we have already created one
72:01 - of the main components which is the
72:03 - employees component we'll create the
72:05 - other main component in just a bit which
72:08 - will be named grouped team members
72:11 - so we want to create functionality so
72:13 - that a user through the use of a
72:15 - navigation bar positioned at the top of
72:17 - the web page can navigate between the
72:20 - employees component and the grouped team
72:23 - members component while the header and
72:25 - footer components remain rendered to the
72:28 - screen
72:30 - so we are going to create a nav
72:31 - component that will appear at the top of
72:34 - our page
72:37 - so that the user can speedily navigate
72:39 - between the two main components
72:42 - so let's start by installing the react
72:45 - router dom package
72:47 - let's click the package icon here
73:01 - let's type
73:03 - react-router-dom as search criteria here
73:12 - this is the package we want to install
73:15 - so let's click the relevant plus icon to
73:17 - install the package
73:27 - great and if we open the package.json
73:30 - file
73:41 - we can see that we have installed the
73:43 - appropriate
73:45 - react dash router dash dom package
73:50 - within the app.jsx file let's import the
73:53 - components that we need from the react
73:56 - router dom package
74:15 - let's wrap our header employees and
74:18 - footer component within the router
74:20 - element
74:35 - each component that we want to navigate
74:37 - to
74:38 - will have its own root element so let's
74:40 - create a root element for the employee's
74:42 - component
74:44 - we want only the employees component to
74:46 - render along with the header and footer
74:48 - components when the user first loads the
74:51 - application so the employee's component
74:53 - renders between the header and footer
74:55 - components when the url does not contain
74:58 - any path information
75:00 - then we must include an element property
75:02 - within the relevant root element and set
75:05 - this to our employees element like this
75:09 - then let's include a root element
75:11 - pertaining to the navigation to the
75:14 - grouped team members component let's set
75:18 - its path property to forward slash
75:20 - grouped team members this is the path to
75:23 - a component that we are going to create
75:25 - in just a bit
75:27 - this component can be seen as the other
75:29 - main component of our application
75:32 - the two main components are the
75:34 - employees component and the grouped team
75:36 - members component
75:38 - let's appropriately set the element
75:40 - property to the grouped team members
75:43 - element like this
75:44 - so basically if the browser contains the
75:47 - path to the grouped team members
75:49 - component then the header component the
75:52 - grouped team members component and the
75:54 - footer component will be rendered to the
75:56 - ui
75:57 - the employees component will not be
75:59 - rendered to the ui
76:01 - if no path is provided along with the
76:03 - url of our application i.e no particular
76:06 - path is provided to a specific component
76:10 - then the header component the employees
76:12 - component and the footer component will
76:15 - be rendered to the ui
76:18 - and the grouped team members component
76:20 - will not be rendered to the ui
76:23 - so let's create the grouped team members
76:25 - component with minimal functionality at
76:27 - this point
76:29 - we'll create the appropriate
76:30 - functionality for the grouped team
76:32 - members component once we have written
76:34 - the code for the navigation
76:36 - functionality
77:04 - let's import the grouped team members
77:06 - component into our app component
77:21 - if we type in the path
77:23 - to the grouped team members component in
77:25 - our browser you can see that this
77:27 - component is appropriately rendered to
77:29 - our ui along with the header and footer
77:31 - components great
77:34 - if we remove this path
77:36 - the header employees and footer
77:38 - components are rendered to the screen
77:40 - excellent
77:48 - let's create a file for our nav
77:51 - component named nav.jsx
77:57 - let's write codes to import the link
78:00 - component from within the react router
78:03 - dom package
78:20 - the code for the nav component will
78:21 - basically rely on bootstrap classes for
78:24 - layout and styling purposes
79:06 - so within the first unordered list item
79:09 - let's include a link element that
79:11 - navigates the user to the home page
79:13 - within the second unordered list item
79:16 - let's include a link element that
79:18 - contains the path to the grouped team
79:21 - members component
79:41 - let's import our nav component into the
79:43 - app component
79:50 - let's appropriately include the nav
79:52 - element within our app.jsx file
80:14 - we now have a navigation menu presented
80:16 - to us at the top of our page
80:22 - our navigation functionality is working
80:23 - as expected but we want the navigation
80:26 - links to be displayed next to each other
80:29 - rather than on top of each other like
80:30 - this
80:37 - oh and the problem is that this class
80:40 - should be expand rather than expanded
80:57 - great
80:58 - that looks much better
81:07 - so if the user types in an invalid path
81:10 - we can include a route to handle this
81:13 - to do this we can include a root element
81:16 - below the existing root elements here
81:18 - we can set its path property to a wild
81:21 - card character which will act as a catch
81:24 - all for urls that don't match the paths
81:27 - declared in the root elements above this
81:29 - root element
81:31 - so let's set its element property to a
81:33 - component that we'll create in just a
81:35 - bit named not found
81:38 - so let's create the not found component
82:23 - this component merely outputs a message
82:25 - to the screen stating that the requested
82:27 - page could not be found
83:31 - great
83:45 - the next step is to write the code for
83:47 - the grouped team members component let's
83:49 - open the grouped teammembers.jsx file
83:52 - let's import the use statehook
84:05 - let's include javascript destructuring
84:07 - code to destructure the props that we
84:09 - want passed into our grouped team
84:12 - members component into appropriate
84:14 - individual variables let's go to the app
84:17 - component and write code to pass in the
84:19 - relevant props to the grouped team
84:21 - members component
85:20 - let's go back to the grouped team
85:22 - members.jsx file
85:25 - as stated earlier the use state hook
85:28 - returns a pair of values
85:31 - the current state and a function that
85:33 - updates it
85:35 - the set group data function will be used
85:38 - for changing the state of the grouped
85:40 - employees array
85:41 - let's pass in a call to a function named
85:44 - group team members to the use state hook
85:48 - that will return the default value of
85:50 - the grouped employees array
85:53 - each object in the grouped employees
85:55 - array
85:56 - will contain one property that stores
85:58 - the team name a property that stores the
86:01 - employee data for employees that are
86:04 - part of the relevant team and a property
86:06 - named collapsed the collapsed property
86:09 - will store the state for a list item in
86:12 - the collapsible list
86:13 - that we are going to return from the
86:16 - grouped team members component
86:18 - when a user clicks a team in the
86:20 - collapsible list as it were the
86:22 - collapsed property for the corresponding
86:24 - object will be set to the opposite
86:27 - boolean value currently stored in the
86:29 - relevant collapsed property
86:32 - this state change will cause the
86:34 - component to re-render and the relevant
86:36 - list item will either be in a state of
86:38 - collapsed or expanded
86:40 - we'll write code in a bit to return the
86:42 - appropriate ui markup from this
86:44 - component so that this state change will
86:46 - be appropriately reflected on the ui
86:50 - so
86:51 - the collapsed property facilitates
86:53 - toggle functionality whereby a list item
86:56 - in a list of teams can be collapsed or
86:59 - expanded by clicking on the relevant
87:01 - list item when the list is expanded a
87:04 - list of the relevant teams team members
87:06 - are presented directly below the team
87:09 - list item
87:10 - when an expanded list item is
87:12 - subsequently clicked the relevant list
87:15 - item will be collapsed whereby the
87:17 - relevance team member data will be
87:19 - hidden
87:20 - we are passing a function named group
87:22 - team members to our use state hook here
87:26 - this function will return an array of
87:27 - objects that will be the default state
87:30 - stored in the grouped employees array
87:33 - so let's write the code for the group
87:35 - team members function
87:37 - this function simply returns an array of
87:39 - objects where each object stores a team
87:42 - name a list of team members and a
87:44 - boolean property named collapsed the
87:47 - collapsed property denotes whether a
87:49 - team list item displayed on the ui is in
87:52 - a collapsed or expanded state
87:55 - please note that i would not write code
87:57 - like a code i'm about to write for the
87:59 - group team members function in the real
88:01 - world and the relevant code is only
88:03 - meant to set up relevant grouped data
88:06 - for this example
88:08 - we are going to flagrantly violate the
88:10 - principle of dry don't repeat yourself
88:12 - in this code so the purpose of this
88:15 - function is to transform the list of
88:18 - employee objects stored in the employees
88:21 - array
88:22 - and group the employees into their
88:24 - appropriate teams based on the team name
88:27 - property value for each employee object
88:30 - so let's declare an empty array at the
88:33 - top of our method named teams
88:40 - let's use the javascript filter function
88:43 - to return the team members for team a
88:46 - using the filter function called on the
88:48 - employees array
88:50 - let's create the object that contains
88:52 - the team name for team a
88:58 - the employee objects representing the
89:00 - members of team a
89:02 - and then let's include a property named
89:04 - collapsed
89:05 - let's use a ternary operator to
89:07 - initialize the value of the collapsed
89:09 - property if the selected value in the
89:12 - drop down list is team a
89:14 - then we want this list item to be
89:16 - expanded and display team a's team
89:18 - members so in this case we set the
89:20 - collapsed property to false else the
89:23 - collapsed property is set to true
89:25 - meaning the list item is collapsed and
89:27 - the relevant team members for team a are
89:29 - not displayed on the ui
89:32 - let's write code to add the relevant
89:34 - object to the team's array
89:37 - let's repeat the same logic for the
89:39 - other teams
90:29 - let's write code to return the
90:30 - appropriate ui related code from our
90:33 - component
90:38 - so to do this let's map the data stored
90:41 - within the grouped employees array to
90:44 - the appropriate collapsible list of
90:46 - teams
93:14 - so to handle the event where a user
93:16 - clicks on a team list item let's wire up
93:19 - an on click event within the appropriate
93:22 - div element to a method that we'll
93:24 - create named handle team click
93:27 - let's write the handle team click event
93:29 - handler method
93:50 - in this code we are using the map
93:51 - function to traverse the items in the
93:54 - grouped employees array
93:57 - if team name matches the id
93:59 - of the clicked item
94:01 - then our code knows as it were which
94:03 - team list item was clicked and which
94:06 - items collapsed property value to
94:08 - appropriately change in the array
94:11 - so our code changes the relevant
94:13 - collapsed property to its opposite value
94:16 - of course the collapsed property is a
94:18 - boolean value either true or false
94:22 - this is to create the desired toggle
94:24 - effect for our team list presented on
94:27 - the ui
94:29 - the map function returns the transformed
94:31 - array
94:40 - we can then write code to change the
94:43 - state for the grouped employees array by
94:45 - appropriately calling the set grouped
94:48 - data function
94:50 - we can also call the set team function
94:52 - that has been passed in with the props
94:55 - from the app component to set the
94:57 - selected item in the drop-down list on
94:59 - the employee's component appropriately
95:02 - we are able to change the state for the
95:04 - employees component through the relevant
95:06 - props passed into the grouped team
95:08 - members component
95:11 - so this has facilitated dynamic
95:13 - communication if you like between the
95:15 - grouped team members component
95:17 - and the employees component
95:20 - so appropriate changes made in either of
95:22 - these components the employees component
95:24 - or the grouped team members component
95:27 - will appropriately be reflected in the
95:29 - other component
95:45 - so the collapse functionality is
95:46 - currently not working
95:53 - the reason for this is that i've used a
95:55 - class named collapsed to create the
95:57 - collapse effect in our list
96:00 - this class doesn't exist in our
96:02 - application a class that i meant to
96:04 - reference here is a bootstrap class
96:06 - named collapse
96:09 - when this class is present in the
96:11 - relevant div element a list of team
96:13 - members will not be displayed for the
96:15 - relevant team when the collapse class is
96:18 - not present within the relevant
96:19 - development the list of team members
96:22 - will be displayed directly
96:24 - below the relevant team item
97:14 - let's just quickly fix a small issue
97:16 - here where there is only one member in a
97:19 - team and we want our ui to reflect one
97:22 - team member rather than one team members
98:05 - lastly let's neaten up our code a bit by
98:07 - appropriately abstracting certain
98:09 - functionality into their own components
98:12 - so for example we can abstract this code
98:14 - within the employees component that
98:16 - renders the drop-down list to the ui
98:19 - into its own component
98:21 - so let's do this please feel free to
98:23 - reference the relevant code at this
98:25 - location on github if you get stuck at
98:28 - this point
100:53 - let's abstract the code that traverses
100:55 - the employees array into a component
100:58 - named team members
101:36 - a component named team member card is
101:39 - called from within the team members
101:40 - component
101:52 - we can include the code that resides
101:54 - within the employees component that
101:57 - renders the cards to the ui within the
102:00 - team member card component
102:02 - so let's create a component named team
102:04 - member card that renders each card
102:07 - appropriately to the ui
105:31 - the code is now much neater great
106:17 - let's include a media query within our
106:19 - app.css file
106:21 - so that on small screen sizes each card
106:24 - is presented in a new line
106:54 - so by doing this we are making our spa
106:56 - application responsive
107:06 - excellent note that i've created two
107:09 - versions of this application that can be
107:11 - found on github the version that we
107:13 - created in this video can be found at
107:15 - this location
107:16 - as an added bonus i created another
107:19 - version of our application on github
107:21 - that can be found at this location in
107:23 - this version of the application
107:26 - i have implemented code for abstracting
107:28 - the management for passing data between
107:31 - components through the use of context
107:34 - let's navigate to this url and read a
107:36 - bit about context
107:39 - context provides a way to pass data
107:41 - through the component tree without
107:43 - having to pass props down manually at
107:46 - every level so by using context we can
107:49 - avoid prop drilling
107:51 - in a typical react application data is
107:54 - passed top down parent to child via
107:57 - props
107:58 - but such usage can become cumbersome for
108:02 - certain types of props eg local
108:04 - preferences ui theme that are required
108:08 - by many components within our
108:09 - application context provides a way to
108:12 - share values like these between
108:15 - components without having to explicitly
108:17 - pass props through every level of the
108:20 - tree
108:22 - the application that we have created is
108:24 - small and fairly basic when an
108:27 - application grows
108:28 - it may be better to use context so that
108:31 - the code used to share values between
108:33 - components is neater and easier to
108:35 - maintain
108:37 - please check out this version of the
108:38 - code on github to see how i have
108:41 - implemented context for the purpose of
108:43 - sharing values between components
108:45 - without using prop drilling
108:48 - with react you can break down an
108:50 - interface into reusable components that
108:53 - allow you to build dynamic user
108:55 - interfaces react can be described as a
108:57 - mature javascript framework and it has
109:00 - an enormous community supporting it
109:02 - the performance that react provides
109:05 - makes it an excellent choice for the
109:07 - implementation of front-end user
109:09 - interactive functionality
109:11 - i highly recommend learning this
109:13 - technology
109:14 - now that you've learned the basics of
109:16 - react with gavin it's time for you to
109:18 - apply that knowledge to a more complex
109:20 - application
109:22 - john smilga is your instructor for this
109:24 - next section
109:25 - hey what's up it's john from youtube
109:27 - channel codingaddict and welcome to our
109:30 - next react project
109:31 - the meals application
109:33 - and before i showcase the app let's
109:35 - quickly discuss
109:37 - the main objectives of the project
109:39 - and essentially there are two of them
109:41 - first in this project we'll learn how to
109:44 - fetch data
109:45 - from external api
109:48 - and as a signal during the project we'll
109:50 - utilize the meal db api as our external
109:55 - data resource and our second objective
109:58 - is to get familiar with app level state
110:02 - and more specifically context api
110:04 - since it's something you simply can't
110:06 - avoid when building more complex
110:10 - applications
110:11 - if you want to take the project for test
110:13 - drive just navigate to this url
110:17 - mealsapplication.johnsmailga.repple.co
110:23 - again the url is dub dub dub
110:25 - meals application dot johns milga
110:29 - dot reply dot co and as far as the
110:33 - functionality using this application
110:34 - user can search
110:36 - for the recipes so when the application
110:40 - loads we display some default recipes
110:44 - and if the user is interested in the
110:47 - cooking instructions he or she can click
110:50 - on recipe and here we display the image
110:53 - the title cooking instructions as well
110:55 - as original
110:57 - resource effectively this is where the
111:00 - original recipe is coming from and also
111:03 - we can close the model
111:05 - now user also has a option to search
111:09 - for recipes based on a search term so
111:12 - for example if i go here and type a
111:15 - now i'm going to get all the recipes
111:17 - where in the title there's a letter a
111:21 - now also user can get some random ones
111:23 - if he or she clicks on the surprise me
111:27 - notice now we're getting the random
111:29 - recipes and also there's an option to
111:31 - add
111:32 - recipe to the favorites
111:35 - so if let's say i like this recipe i can
111:38 - add it to the favorite now we also have
111:40 - an option to remove from the favorites
111:43 - and we can also
111:45 - take a look at the favorite recipe again
111:48 - in the model
111:50 - now the favorite recipes will be
111:52 - persisted in the local storage and
111:55 - therefore
111:56 - even
111:57 - if you leave the application
111:59 - and come back later you'll still have
112:02 - the recipes that you saved in the
112:05 - favorites so it's not just going to be
112:07 - the local state but also will implement
112:11 - the local storage
112:13 - for this project i also created a readme
112:15 - file and in there you'll find useful
112:18 - external resources
112:20 - code snippets and all the steps we're
112:22 - going to take to build the application
112:25 - i like such approach since it saves you
112:27 - time on taking notes essentially all the
112:30 - important stuff is already documented
112:32 - and more importantly it allows you to
112:34 - work on a project independently
112:37 - once i'm done explaining the step
112:40 - if you feel like working on it
112:42 - independently
112:43 - just pause the video and try to solve
112:46 - the challenge on your own
112:47 - and resume it once you're ready to see
112:50 - my solution
112:51 - lastly i will share the url basically
112:55 - where you can find the source code with
112:57 - the readme file in the following videos
113:00 - just remember that you can always find
113:02 - both urls for the complete app which we
113:06 - covered in the last video and for the
113:08 - source code in the video description
113:11 - below
113:12 - okay and we're going to start our
113:14 - journey by creating a new project in the
113:18 - replit so assuming that you've logged in
113:22 - or registered
113:24 - go to your dashboard and look for create
113:27 - button
113:28 - in there
113:29 - look for react template
113:32 - and at least i'm gonna go with default
113:35 - name but
113:36 - of course you can come up with whatever
113:38 - name you want for your application
113:40 - and once all the dependencies have been
113:42 - installed just click on run
113:45 - so we can see our project in the browser
113:48 - and then at the very end of the video
113:49 - i'll just change the title in the
113:51 - index.html and basically this is what we
113:54 - see in the browser tab
113:56 - so since i have logged in let me just
113:58 - navigate here
114:00 - to a dashboard and like i said we're
114:03 - looking for create if you want to see
114:05 - all your projects
114:06 - they're going to be down here
114:08 - so let's go for create we're looking for
114:10 - a react template and i'm going to go
114:13 - with this
114:14 - default name
114:16 - that they offer and now we want to go
114:18 - with create repel
114:22 - we'll just have to wait a little bit
114:24 - for the dependencies to be installed and
114:26 - once everything is ready to go we just
114:29 - want to go with the run so effectively
114:30 - this is going to open up our application
114:33 - in the browser tab here
114:35 - on the right hand side
114:37 - and once i can see my application
114:41 - in action
114:42 - let me just showcase that
114:44 - all the way in left hand side
114:46 - these are going to be our files
114:48 - then in the middle we'll have our code
114:51 - and in my case i'm going to keep it
114:53 - between 200 zoomed in and 250. so
114:57 - hopefully that way you can see clearly
114:59 - my code and i'll also change the size
115:03 - from time to time of the browser tab
115:05 - just so i have
115:07 - a bit more real estate here in the
115:09 - middle all the way in the bottom we have
115:11 - the console which for the most part
115:13 - we're not going to use and what's really
115:16 - cool that for our little browser window
115:19 - we also have the devtools
115:21 - so if you click on these ones notice
115:23 - here we can also
115:25 - see
115:26 - all the errors warnings and of course
115:29 - our console log and rest of the stuff
115:31 - now we also have this cool option of
115:33 - opening this one up in the new browser
115:36 - tab
115:36 - and
115:38 - as a result we get a bigger canvas so
115:41 - from time to time yes i'll switch
115:42 - actually from this small one
115:44 - to a bigger one because it's going to be
115:46 - easier to showcase the devtools and all
115:49 - that cool stuff and at the very end of
115:51 - the video i just want to change here
115:54 - what we see
115:56 - in the page so let me just go here with
115:59 - meals and app and i'll do the same thing
116:03 - in the index.html
116:05 - so let me navigate to index.html here
116:07 - where we have the title we can change
116:09 - the name so let's go with meals app let
116:13 - me save it and of course we can see the
116:15 - result in both places in the small
116:18 - browser window as well as the big one
116:22 - okay and now let's grab some assets from
116:25 - the complete
116:26 - project
116:27 - so first what i want you to do is
116:29 - navigate to this url
116:31 - and again the url is following we're
116:34 - looking for replic.com at johnsmilga
116:37 - and
116:38 - meals application now here of course it
116:41 - adds that hashtag readme because that's
116:44 - the file where i'm at but the main url
116:46 - is again replic.com johnsmilga meals
116:49 - application i want you to navigate there
116:51 - and more specifically navigate to
116:54 - app.css and then we'll talk about what
116:56 - we want to get from there
116:58 - as well as
116:59 - why i suggest copying readme so first
117:02 - let me just showcase
117:04 - the url
117:06 - so copy and paste everything that i have
117:08 - right now now just remove that readme
117:10 - now if you have a different view
117:14 - of the application again it doesn't
117:16 - change the files that you're looking for
117:18 - so navigate to the source folder you're
117:20 - looking for app css and at this point
117:23 - you have two options
117:25 - if you don't
117:26 - want to type css together
117:29 - just take the whole thing
117:30 - so just copy it and set it up in your
117:33 - project
117:34 - now if you do want to type the css and
117:37 - i'll sign up yes i'll make the css video
117:40 - separate so that way if you don't want
117:42 - to
117:42 - type the css together you can just skip
117:44 - it or if you do want to build it
117:46 - together then just grab everything
117:49 - up to the
117:50 - end of global styles which is going to
117:52 - be my case of course since we'll type
117:54 - the css together again this is a
117:57 - somewhat of a
117:58 - hot button topic because some people
118:00 - prefer typing css some don't
118:03 - so in this case you have an option if
118:05 - you want to type out the css together
118:07 - then just grab everything up to the end
118:10 - of global styles if you don't want to
118:12 - type the css then just take the whole
118:14 - thing hopefully i made myself clear and
118:18 - like i said in my case i'm going to take
118:20 - everything up to the global style since
118:22 - of course
118:24 - i will write the css for the upcoming
118:26 - components
118:28 - now i'll cover
118:30 - the global styles in a little bit more
118:33 - detail in one of the upcoming videos for
118:36 - now just take the css you want to
118:38 - get from this file navigate back to your
118:41 - application
118:43 - look for source look for app.css
118:46 - remove all the code that you have right
118:48 - now
118:49 - save it
118:50 - and you should
118:51 - see different result on the screen now
118:54 - when it comes to readme
118:57 - i just think that it's better if you
118:59 - have those steps
119:00 - in your application now you don't have
119:03 - to copy the contents i mean you don't
119:05 - even have to follow along as far as
119:08 - these steps
119:09 - but i think it makes more sense if you
119:12 - want to work on the project
119:13 - independently and therefore in my case
119:16 - i'm just going to take all the code
119:18 - that again i have in the complete
119:20 - project readme and i'll just navigate
119:22 - back to the project that we just started
119:24 - building again i'll remove all the code
119:27 - that is currently there and copy and
119:29 - paste
119:30 - and successfully we have acquired all
119:32 - the assets that we needed from the
119:34 - complete application so at this point i
119:36 - can actually close it and from now on of
119:38 - course
119:39 - we'll be doing all of our work
119:42 - in the application we just created and
119:45 - when it comes to global styles
119:48 - essentially you'll just find
119:50 - some settings for typography
119:53 - a reset
119:55 - css variables
119:57 - for example for colors
120:00 - as well as the bore radiuses
120:02 - box shadows
120:04 - and then just some general styles
120:08 - including some classes that i use
120:10 - somewhat often for example button and as
120:13 - i know this is something that i use
120:16 - not only in react projects but pretty
120:18 - much
120:19 - in every project that i make because
120:22 - in the long run it saves me a bunch of
120:24 - time
120:25 - since i have some preset values and that
120:27 - way i don't have to reinvent the wheel
120:30 - each and every time awesome we're pretty
120:32 - much done with the general info
120:34 - so now let's start coding and the first
120:37 - thing that i want to do is to set up a
120:40 - structure for our project
120:43 - and in order to do that
120:45 - i want you to create a components folder
120:48 - in the source
120:50 - and there are
120:51 - four files effectively these are going
120:53 - to be our components
120:55 - in microsoft i'm going to go with
120:56 - favorites meals modal and search all of
120:59 - them will have that jsx extension and in
121:03 - there we want to create a component and
121:05 - in my case i'll set it up as a arrow
121:07 - function
121:09 - now i want you to set up a basic return
121:12 - in my case i'm going to go with
121:13 - component name but of course you can
121:15 - type whatever you want in the return as
121:17 - long as we can see something on the
121:19 - screen now my personal favorite is shake
121:22 - and bake but of course you can for
121:24 - example go with heading one and dude
121:26 - where is my car as long as you can see
121:29 - something on the screen we are good to
121:31 - go now we do need to remember to export
121:33 - this as default
121:36 - and then in the app js we'll import all
121:38 - of them and set them up
121:41 - one by one
121:42 - so effectively
121:44 - the component is going to look something
121:46 - like this for example search one again i
121:48 - have the function i have some kind of
121:51 - basic return and i'm exporting as a
121:54 - default
121:55 - then we want to import all of them in
121:58 - app.js and set up the following
122:01 - structure so notice these are all the
122:03 - imports for our components and then
122:06 - inside of the main we want to go with
122:07 - search
122:08 - favorite
122:09 - meals and model and if you can see
122:12 - all the returns on the screen you're
122:15 - good to go
122:16 - and last thing that i will do at least
122:19 - in my case is to comment out search
122:22 - favorites and model why well because
122:25 - we'll start working in the meals
122:27 - and
122:28 - even though i do want to see
122:30 - that the component has been set up
122:32 - correctly
122:33 - so essentially
122:35 - in the beginning i do want to see some
122:37 - kind of return
122:38 - i just think it's going to be easier at
122:40 - least for me as i'm developing and
122:42 - showcasing stuff
122:44 - just to have the component that we're
122:46 - actually working in so this is how i'm
122:49 - going to set up the structure for the
122:50 - application however i'm going to do that
122:53 - in the following video
122:55 - so if you want to work on this
122:56 - independently
122:58 - then once this video ends
123:01 - just try
123:03 - to set it up yourself and if you want to
123:05 - see my solution
123:07 - i'll cover it in next video
123:09 - okay so let's get cracking
123:12 - first we need to create a components
123:14 - folder so let's go with add folder in
123:16 - the source and i'm going to go with
123:19 - components now there we want to add some
123:22 - files
123:23 - yep that's correct and of course we can
123:26 - see the list of files we need to create
123:28 - so one by one let's just set them up i
123:31 - think i'm going to set up the files
123:34 - first and then
123:36 - i'll set up one return copy and paste
123:38 - and just change some values so first let
123:41 - me add those files we're looking for
123:43 - meals
123:44 - jsx
123:46 - then we also want to set up
123:48 - a modals
123:50 - jsx
123:52 - and then lastly we have the search one
123:55 - so let's go with add file and we're
123:58 - looking for the search jsx
124:01 - so let's start i guess with the
124:03 - favorites
124:04 - where we want to go
124:05 - with our arrow function so const
124:08 - and in my case i'm going to pretty much
124:11 - name it
124:12 - same as the file so favorites here it's
124:14 - going to be my arrow function and as far
124:16 - as return i'm just going to go with
124:18 - heading 1 and i'll write
124:20 - favorites and then the component
124:23 - component and like i said we want to
124:25 - export that as default so export default
124:29 - and
124:30 - i think i actually want to
124:34 - get it in the app just right away
124:36 - so before i copy and paste anything let
124:38 - me just go to app
124:40 - just
124:41 - and we want to import that from
124:44 - components so favorites
124:46 - from
124:47 - and then we want to go with components
124:51 - and more specifically favorites file
124:55 - and then where we have the main one why
124:56 - don't we change this around and let's
124:58 - just say favorites so that's our
125:00 - component and if everything is correct
125:02 - this is what we should see on the screen
125:05 - and since i can see that that's the case
125:08 - now let me just go here and i'll copy
125:10 - these values so i'm looking for a meals
125:12 - one i'll copy and paste then i'll select
125:15 - all the instances with the command d at
125:18 - least that's
125:19 - the shortcut on a mac and then we'll
125:21 - change it around two meals we want to do
125:24 - the same thing here in the modal
125:26 - and copy and paste
125:28 - i'll just write modal
125:30 - and then the last one is going to be a
125:32 - search one so again let's select
125:34 - everything
125:36 - all the instances are favorites and
125:38 - let's go with search let's save it
125:41 - then we want to navigate back to
125:43 - app
125:44 - we want to copy and paste and
125:47 - we'll just set up a few cursors here
125:50 - so the
125:51 - second one
125:52 - is going to be meals
125:54 - then we'll be looking
125:56 - for the model i believe
125:59 - so let me type here model actually
126:01 - messed it up here a little bit
126:03 - so let me go with the forward slash and
126:05 - then lastly
126:07 - we also have the search one i believe so
126:09 - let me remove all of them
126:11 - and then let's go with search
126:13 - now as far as the structure we'll start
126:15 - with search favorites meals and model
126:19 - so let's go here search
126:22 - then we'll have
126:24 - the meals
126:26 - and also have the
126:28 - model so model
126:31 - over here
126:33 - and if you can see
126:35 - four heading ones displayed on the
126:37 - screen we're in good shape basically
126:39 - we're moving in the right direction
126:42 - and once everything is good to go then
126:44 - one by one i'll just comment them out
126:46 - like i said
126:48 - it's easier a way for me to showcase
126:50 - which component we're actually working
126:53 - in otherwise you
126:54 - might be
126:56 - confused by all of the heading ones that
126:59 - we can see on the screen now the way we
127:01 - can set up a comment in the hsx is
127:05 - actually in a following way so let me
127:08 - showcase that notice so we go with
127:10 - curly's and then inside of the curlies
127:12 - we go with forward slash and then star
127:15 - and then star and forward slash and then
127:18 - whatever we place here
127:19 - is going to be commented out again
127:21 - eventually we'll use those components
127:23 - but for now
127:25 - what i'm going to do is back in the app
127:28 - just like i said you want to set up the
127:30 - curlys here then we want to go with
127:32 - forward slash and then star
127:35 - then star forward slash and i'll copy
127:38 - and paste right away
127:40 - and i'll set up one for search
127:42 - one for favorites and one for model
127:45 - because we'll start working in the meal
127:46 - so one by one let's place them there
127:49 - so you cannot see the search anymore you
127:51 - cannot see the favorites and also you
127:54 - cannot see the model and now let me move
127:56 - this sucker down we have meals ready to
127:59 - go so now we can
128:01 - move on to our next step okay and now
128:04 - let's talk about the app level state and
128:08 - essentially it's a decision we need to
128:10 - make
128:11 - of how we're going to handle the props
128:14 - in our application because one thing we
128:16 - need to keep in mind that in react we
128:18 - can only pass the props down
128:22 - so for example in our application we're
128:24 - going to have
128:26 - favorite meals and then once we click on
128:28 - a meal we actually open up a modal
128:31 - so there's going to be a communication
128:33 - between the favorites component
128:36 - and the modal component
128:38 - and as you can see it's not like we can
128:40 - just directly pass from one to another
128:42 - one
128:43 - effectively
128:45 - we can either set up all the
128:46 - functionality here in the app.js since
128:49 - that's the root component again we can
128:51 - only pass the props down we can go with
128:55 - context api
128:57 - something that we're actually going to
128:59 - do and therefore i'm not going to go
129:01 - into more detail since
129:03 - we'll cover all of that in the upcoming
129:05 - videos and also we can go with
129:07 - third-party state management library for
129:10 - example redux or redux toolkit and then
129:14 - of course there's
129:15 - million more
129:16 - now
129:18 - honestly in this case in this particular
129:20 - application
129:21 - we actually can go with app.js approach
129:25 - since there's not that many levels that
129:27 - we need to pass
129:28 - however again we need to keep in mind
129:30 - that all the logic is going to be here
129:32 - in the app.js
129:34 - since this is a root component
129:36 - and then from the app we pass to a
129:40 - separate component
129:41 - now the problem is going to start as
129:43 - your app grows more complex and if you
129:46 - have more nested structure for example
129:48 - you have more components inside of
129:52 - these components
129:53 - then effectively becomes a pain and it's
129:56 - not an official name for that but it's
129:59 - referenced as a prop drilling where
130:02 - basically you pass the props down to one
130:04 - component then
130:07 - it has some nested components so we keep
130:09 - passing down and down and down and one
130:12 - of the solutions for that is using
130:14 - context api
130:16 - now
130:17 - once you get to really complex apps
130:20 - then it makes sense
130:22 - to use redux redux toolkit my personal
130:25 - favorite at the moment
130:27 - and some other choices that are out
130:30 - there
130:30 - so in this application i didn't see the
130:33 - point of actually using redux or redux
130:36 - toolkit
130:37 - and therefore the choice was really
130:39 - between the app.js and context api and
130:42 - even though
130:44 - in this scenario
130:46 - we can set up all the logic here in
130:49 - app.js i decided that this is going to
130:51 - be an awesome introduction
130:53 - to the context api all right and now
130:56 - let's talk about the context api
130:59 - and before we go any further let me just
131:01 - mention two things first if
131:04 - you
131:05 - don't find my explanations good enough i
131:08 - can always suggest this article by free
131:11 - code camp where they cover context api
131:14 - in a great detail
131:17 - now the second thing that i want to
131:18 - mention
131:19 - even though yes context api is an
131:22 - awesome approach
131:23 - still keep in mind
131:25 - that it has its limitations
131:28 - yes it's good enough for this project
131:30 - and it's way better than just passing
131:33 - down props
131:35 - from one component to the next one let's
131:37 - say seven levels deep however
131:40 - once your app grows
131:43 - and becomes really complex
131:46 - essentially you'll hit two roadblocks
131:48 - first
131:49 - there's less structure
131:51 - than for example tools like redux and
131:54 - redux toolkit and that becomes
131:56 - especially important
131:57 - if
131:59 - there's a team working on a project
132:01 - and the second roadblock you'll most
132:03 - likely hit
132:05 - is the fact that it's somewhat clunky to
132:10 - communicate between
132:12 - multiple contexts
132:14 - so
132:15 - when it comes to really complex
132:17 - application most likely you'll not only
132:19 - have one context api you'll have
132:22 - multiple
132:23 - and at least in my experience
132:25 - it's way easier to communicate between
132:28 - these functionalities when using the
132:30 - third party state management library
132:33 - like i keep saying redux toolkit because
132:35 - that at the moment is my favorite
132:38 - now as far as the setup for the context
132:40 - api again
132:42 - effectively it's a way for us
132:44 - to have all our logic in one place and
132:48 - instead of prop drilling where we pass
132:51 - the props from one component to the next
132:54 - one again let's say seven levels deep we
132:57 - can set up all the logic in one place
133:00 - and then that specific
133:02 - component can just cherry pick
133:06 - what data
133:07 - is necessary and if at the moment you're
133:11 - somewhat fuzzy on that don't worry once
133:12 - we set up the actual example it's going
133:15 - to become clear so first we want to
133:17 - create a context jsx file somewhere in
133:21 - our root now technically you can create
133:23 - the components and all that but i always
133:25 - prefer setting it up in the root now
133:27 - when i say root of course i'm talking
133:29 - about the source
133:31 - then we want to import react and use
133:35 - context something we're going to
133:37 - use a little bit later
133:39 - from react
133:40 - and we want to come up with a variable
133:42 - name now i always like to go with app
133:44 - context or some meaningful name that
133:47 - references the context that i'm creating
133:49 - but again shaken bake is
133:52 - also a good choice then we want to go
133:54 - with react dot and create context so we
133:58 - have this method that creates the
134:00 - context and once we invoke create
134:02 - context effectively we get back two
134:05 - things we get back the provider
134:07 - and we get back the consumer now let's
134:11 - not worry about the consumer right now
134:13 - let's just worry about how we can pass
134:15 - the data down and we do that with this
134:18 - component of provider now notice here
134:21 - though how we will set up a brand new
134:24 - component
134:25 - and i'll talk about the children
134:27 - once we actually set this one up but in
134:30 - here in the return we go with that
134:32 - provider so this is what we're getting
134:34 - back from that create context and then
134:36 - in the value prop whatever we'll pass in
134:39 - at the moment is just a low we can
134:41 - access
134:42 - pretty much anywhere in our application
134:46 - and then
134:48 - the last thing that we need to do as far
134:49 - as the provider we need to export it and
134:52 - we'll also export this app context and
134:55 - this is going to make
134:57 - sense a little bit later so in here i'm
134:58 - talking about the main item that we're
135:00 - getting back from create context
135:02 - and then we want to wrap
135:05 - our entire application
135:07 - in the app provider
135:09 - so the component
135:10 - that we're creating over here
135:13 - so we want to import that since we're
135:15 - exporting from the context and we want
135:17 - to wrap our application
135:19 - now while we're still in the index.js i
135:22 - want to mention that because of react
135:24 - strict mode
135:26 - while in development you'll notice
135:29 - multiple logs so if you're wondering hey
135:32 - why
135:33 - while i'm developing i'm getting
135:35 - quite a few console logs it's because of
135:37 - the react strict mode that's just
135:39 - basically a setup in development and
135:42 - once i've covered the general concept
135:45 - now let me set up the
135:47 - context api in our application
135:50 - okay so now let's set up the context in
135:53 - our application
135:55 - like i said i prefer setting up in the
135:57 - source
135:58 - so let me create a new file i'm going to
136:00 - go with context
136:02 - js
136:03 - and here we want to look for react
136:07 - and we also want to right away get huge
136:09 - context now we'll set this one up later
136:13 - we use contextual but we might as well
136:16 - import it right now then we want to go
136:18 - with the name in my case that is going
136:21 - to be the app
136:23 - context and that one is equal to
136:25 - react
136:27 - and then the method name is create
136:29 - context we invoke it and again we get
136:31 - back those two components
136:33 - now
136:34 - since i want to return provider
136:37 - from the component that i'm going to be
136:39 - wrapping the application i need to first
136:41 - create that component
136:43 - naming is up to you in my case i'm going
136:45 - to go with provider again this is a
136:47 - separate component that will wrap our
136:49 - application and from this component
136:52 - we're going to return app context dot
136:55 - provider
136:56 - very important distinction so in here
136:59 - we'll access children
137:01 - and
137:02 - i'll showcase that once we actually wrap
137:04 - the application because it's going to be
137:06 - easier to
137:08 - understand that way
137:10 - so let me go with return here
137:13 - return and we want to go with app
137:16 - dot context dot
137:18 - and then we're looking for provider like
137:20 - i said we get back two things the
137:22 - consumer and provider
137:24 - but with the arrival of use context we
137:26 - actually don't need to export it from
137:29 - the context.js so that's why we just
137:31 - need provider and then it has the value
137:34 - prop whatever we'll set here
137:37 - in the beginning is just going to be
137:38 - string but eventually it's going to be
137:40 - more complex data structure
137:43 - that one will be passed down to all the
137:46 - components and as a result we won't need
137:48 - to do that prop drilling now we do want
137:51 - to display the children against
137:52 - something i'm going to cover in a sec
137:55 - once we can actually access everything
137:58 - and now let's export from this file
138:00 - so for now we want to export
138:03 - the app context as well as the
138:06 - app provider both of them are named
138:09 - exports as you can see
138:11 - so let's save it if nothing breaks we're
138:14 - in good shape now let's navigate to
138:16 - index jsx we want to grab the provider
138:20 - so import app
138:22 - provider now that one is coming from and
138:25 - then of course we're looking for the
138:27 - context
138:29 - and then we want to go where we have our
138:31 - application
138:33 - and we want to basically wrap it in the
138:36 - app provider like so
138:39 - so let's wrap it
138:41 - again if everything still works if there
138:44 - are no issues
138:45 - then we are in good shape and it looks
138:49 - like i have an error and actually it's
138:52 - because of the name
138:54 - the extension should be here
138:56 - js6
138:58 - my bad
138:59 - once i fix
139:01 - the extension everything should work as
139:03 - expected let me
139:05 - restart
139:07 - and yep i can see
139:10 - the meals component
139:12 - now the reason why we want to
139:15 - grab the children pop and set it up here
139:19 - in return because this is our
139:21 - application so essentially in react
139:23 - children
139:24 - is a special prop
139:27 - and that represents pretty much
139:30 - whatever
139:31 - we have inside of the component so in
139:34 - our case what we have inside of the
139:36 - component is the app one so in the app
139:38 - provider we have app
139:41 - and in our function that is represented
139:44 - with this children again this is a
139:45 - special prop that's why you go here with
139:48 - curly braces we structure it
139:50 - we grab the children and we pass it here
139:53 - if you won't do that basically you won't
139:55 - see your application notice how nothing
139:58 - is displayed so that's why it's
140:00 - important for us to grab the special
140:03 - children prop and then pass it down
140:05 - because this is our entire application
140:08 - and once we have set up the provider now
140:11 - let's see how we can access
140:14 - the data in any of our components
140:17 - beautiful
140:18 - we were able to set up the provider
140:21 - so now let's see how we can consume the
140:23 - data
140:24 - now before we proceed i actually want to
140:28 - make some changes in the workspace
140:30 - so first i noticed since i used that
140:33 - default name
140:34 - i actually don't see the working
140:36 - application in the dashboard essentially
140:39 - it's under unnamed
140:41 - and i've said that i'll actually change
140:44 - that so let me navigate here
140:46 - and in order to do that i just need to
140:49 - click on this icon and then
140:51 - let me go with
140:53 - meals
140:55 - meals app and then let me add temp or
140:58 - you know what i'll start with temp
141:00 - i'll go temp meals app so that way i
141:02 - know that this is just temporary while
141:05 - i'm recording okay so that's done
141:08 - and then the second thing that i want to
141:10 - change
141:11 - essentially is
141:13 - the workspace
141:15 - where
141:16 - it's nice to have that browser window
141:18 - but the more code we're going to write
141:20 - it's actually more important for me
141:23 - that you can see clearly
141:25 - all the code and readme
141:27 - that i'm providing and that's why i'll
141:30 - actually
141:32 - open
141:33 - a new one the browser one and that's the
141:36 - one that i'm going to
141:38 - use to display the results so in here we
141:41 - can simply close the webview then we'll
141:44 - have the console not technically you
141:45 - don't even have to close i believe the
141:48 - webview you can just simply push it to
141:50 - the side
141:51 - and
141:52 - finally i'll
141:54 - zoom in and hopefully
141:57 - it's going to be easier to
141:59 - see the actual code
142:02 - now
142:03 - as far as the
142:04 - consuming data what do we need to do
142:07 - well once we have set up the provider we
142:09 - can go to any of our components and
142:11 - again the magic here is following
142:15 - that it's not just these components in
142:18 - the components folder
142:20 - it can be any components
142:23 - that are sitting inside of these
142:24 - components and that's truly powerful
142:27 - because again we don't have to pass
142:30 - those props
142:31 - seven levels down
142:33 - and in order to consume that data we
142:36 - need to go with used context so we need
142:38 - to go to any of the components where we
142:40 - want to consume the data
142:42 - in our case it's going to be meals since
142:44 - that's the only one that's rendered
142:46 - because i don't want to get use context
142:48 - hook from react we want to get the app
142:51 - context from the context so remember
142:53 - when we're setting up the context this
142:56 - is what we're exporting correct we're
142:58 - exporting the app provider so the
143:00 - component of that wraps and from there
143:03 - we return the app context provider and
143:06 - we also exported the entire context
143:09 - so now in the meals we want to access
143:12 - that
143:14 - entire context so let me go back to
143:15 - readme
143:17 - and not only that
143:19 - but we want to invoke the used context
143:22 - and pass in the app context so import
143:25 - both things
143:26 - passing app context into use context and
143:29 - then we'll get back what will get back
143:31 - that value so whatever we place in the
143:34 - value prop in the provider and then for
143:37 - time being i'll just cancel log it
143:40 - and we should see the hello
143:42 - in the browser devtools so let's
143:45 - navigate to the meals here
143:48 - then we want to
143:49 - go on the top and import both things so
143:52 - import then use context that is coming
143:55 - from the react and then we also want to
143:57 - get the app context so import
144:00 - app context
144:03 - and we want to go with
144:05 - from and of course we're looking for the
144:07 - context so this is going to be
144:10 - right outside of the directory the
144:12 - components one and then let's grab the
144:16 - used context invoke it and pass in the
144:19 - app context so const this is going to be
144:21 - the result we're getting back so that is
144:23 - equal to use
144:25 - context and we pass in the app context
144:29 - and now let's simply log
144:31 - and i know it's probably not a big deal
144:34 - to see the hello
144:36 - but once i show you something
144:38 - you'll see why this is so powerful
144:40 - so let me navigate to the browser i'm
144:43 - going to open up the devtools and that
144:45 - is also something why i want to use
144:47 - the big browser window because it's
144:49 - going to be easier to see
144:51 - actually our console so let me refresh
144:54 - and yep now we have the hello
144:57 - and now you're probably wondering okay
144:59 - what's the big deal well the big deal is
145:01 - that we can turn hello
145:04 - into something more meaningful so if i
145:06 - navigate back to the context
145:08 - it's a prop the value one and at the
145:11 - moment i'm just passing the string
145:13 - however we can change this around and we
145:15 - can say that it's going to be an object
145:17 - so first we need to set up the curly
145:20 - braces effectively that means okay we're
145:22 - going back to the javascript line so
145:24 - either we can set up some kind of
145:26 - expression here for example variable or
145:29 - i can just simply pass in the object and
145:31 - i can go with
145:33 - name and then john
145:35 - and also let's add a roll
145:38 - and we'll set it equal to a student
145:41 - let's say that
145:43 - and now in the meals this is what we
145:45 - should see
145:46 - so let me again refresh
145:49 - and we have name john and then a role
145:52 - student and now we can put two and two
145:54 - together if we can pass in the object
145:57 - that means that instead of the app
145:59 - provider we can set a bunch of
146:01 - functionality which effectively is
146:03 - something we're going to do so we'll set
146:05 - up some functions then we'll pass down
146:07 - we'll set up some state variables that
146:09 - will pass down and effectively
146:13 - any of the components in our application
146:16 - will be able to access it
146:19 - just by grabbing use context as well as
146:22 - the app context and again i know i've
146:24 - said this
146:25 - 10 million times already but this is
146:28 - extremely extremely powerful concept
146:30 - because it saves us a lot of mental
146:33 - energy
146:34 - because we can set up the code in one
146:36 - place and then import it in any of our
146:39 - components all right and before we
146:42 - start talking about the data fetching
146:45 - and react now let me also show you how
146:47 - we can save on one import
146:51 - in the components that are going to
146:53 - consume our data
146:54 - so if you remember the previous video we
146:56 - needed to import two things the use
146:58 - context and app context in the component
147:01 - and then passing the app context in the
147:03 - use context
147:05 - what also we can do is set up a
147:07 - custom hook now
147:09 - let me just make it very clear the
147:11 - previous
147:12 - example is not
147:14 - incorrect there's just
147:17 - a better way where we can have one line
147:19 - of code
147:20 - and in order to set up we need to create
147:23 - a custom hook which is also something
147:26 - that we can do we just need to make sure
147:28 - that the
147:29 - name of the hook starts with use
147:32 - now the name is really up to you in my
147:33 - case i'm going to go with use global
147:35 - context and as you can see we're setting
147:38 - that up in the context.js and we're
147:40 - exporting this right away so we go to
147:42 - export const
147:43 - then whatever is the name of the hook
147:46 - and now notice the functionality we
147:48 - return from this hook
147:50 - from this function what we return
147:52 - use context we invoke it and we pass it
147:55 - in the app context
147:57 - now where did we see that one before
147:59 - over here
148:00 - so we grab both of those things
148:02 - in the context.jsx and remember that
148:05 - both of them are already present we
148:08 - imported the use context and we set up
148:11 - the app context in the context.js
148:14 - and then we just go with use context app
148:16 - context and we're returning from that
148:18 - hook now as a result we can import the
148:22 - custom hook instead in any of our
148:25 - components and then invoke it again
148:28 - the setup is almost the same we're just
148:31 - saving one line of code which in the
148:33 - long run if you have let's say 100
148:35 - components
148:36 - makes a lot of sense so let's try this
148:38 - one out i'm gonna navigate back to the
148:41 - context one let's scroll up and it
148:44 - doesn't really matter where you set it
148:46 - up but i always prefer doing that right
148:48 - before the export here
148:50 - and now let's go with that custom hook
148:52 - again remember we already imported the
148:55 - used context from react so that is not a
148:57 - custom hook that's the one that comes
148:59 - with react which allows us to access the
149:02 - context
149:03 - and let's go with export
149:05 - const
149:06 - and then use global context and say not
149:10 - of course you can pass it here as well
149:12 - it's just i prefer this way and then
149:14 - it's going to be a function and then
149:16 - from this function what we simply want
149:17 - to do is go with return
149:20 - use context and then pass in the app
149:23 - context
149:24 - now let's try it out
149:26 - in the meals so let me navigate back
149:30 - and then instead of these two suckers
149:33 - we'll remove the first one and we'll
149:35 - change what we're getting from the
149:37 - context we'll simply go use
149:40 - global online context
149:43 - and now let's invoke
149:45 - so use
149:47 - global context
149:50 - context let's invoke that and again the
149:52 - result in the
149:54 - devtools should be exactly the same
149:57 - so i'm going to navigate back again i do
149:59 - need to refresh and check it out
150:02 - we still have the object with the
150:05 - properties of name and raw
150:08 - and with this in place
150:09 - we have successfully set up the
150:11 - structure to consume our data
150:14 - from the context.js and what that means
150:17 - is that we'll just have to set up the
150:18 - entire logic in the context.js and then
150:21 - each and every time
150:22 - we want to
150:24 - get
150:25 - the data again we're talking about the
150:27 - state variables or functions that we
150:29 - want to invoke we'll just use use global
150:31 - context and we'll cherry pick
150:35 - which info we want to get from the
150:38 - context jsx which again is extremely
150:41 - extremely powerful concept
150:43 - because it saves us time and mental
150:44 - energy in the long run and now let's
150:47 - talk about another
150:49 - extremely important topic
150:51 - and that is data fetching in react and
150:54 - let's start with the most pressing
150:56 - questions first
150:57 - where and how
150:59 - so essentially we can fetch data in any
151:03 - of our components
151:04 - however in our case
151:06 - since we'll pass this down
151:09 - we want to do that in the context
151:11 - but yes
151:13 - if you want to set up
151:15 - some data fetching in search component
151:17 - you can do it the same way as i'm about
151:20 - to show you in the context.js and the
151:22 - same goes for any component you
151:26 - create so hopefully that is clear
151:28 - now how we fetch data in react well we
151:31 - want to use use effect
151:34 - hook because it allows us to control
151:38 - when
151:38 - we're actually going to fetch data
151:41 - so if you remember from the previous
151:43 - videos
151:44 - use effect is a hook that runs after
151:48 - every render by default so by default it
151:51 - runs after every render however
151:54 - it also has this cool feature
151:56 - called the pen and zero
151:58 - which we pass right after the callback
152:01 - function
152:02 - so
152:02 - when it comes to use effect effectively
152:04 - we invoke the hook we pass in the
152:06 - callback function and then this callback
152:09 - function whatever code is in there is
152:10 - going to be invoked
152:12 - after
152:13 - every render
152:15 - again that is by default if we pass this
152:18 - dependency array
152:19 - and if we leave it empty then it's just
152:22 - going to run that callback function
152:25 - when the component mounts or in the
152:28 - other words when the component
152:31 - loads
152:32 - now we do need to understand that when
152:33 - it comes to context
152:36 - essentially it's only going to load once
152:39 - because it's in the root of our
152:41 - application take a look at the index one
152:44 - notice so we have this app provider
152:46 - that's the one that we're exporting from
152:48 - the context and therefore this is going
152:51 - to load
152:53 - once we open up the application again
152:56 - i'm not talking about the re-renders
152:58 - that possibly
153:00 - might
153:01 - happen after that i'm just talking about
153:03 - that initial load and that's the one
153:07 - that we actually get
153:09 - from this empty dependency array
153:12 - so when we set up
153:15 - the empty dependency array in the use
153:18 - effect essentially that means it's only
153:21 - going to run when that component in our
153:23 - case app provider
153:26 - loads or mounts
153:29 - now
153:30 - we can also pass here
153:32 - some values and then it's going to run
153:36 - every time
153:38 - the value changes but let's not worry
153:40 - about it
153:41 - i just want to make it very clear that
153:43 - when it comes to data fetching
153:45 - we for sure need to pass in that
153:47 - dependency array and i'll show you in a
153:49 - few videos
153:51 - what essentially is going to be result
153:53 - if we don't do that let's not worry
153:55 - about it right now and you can start
153:57 - simply by setting up some kind of
153:59 - console log in there
154:01 - so go to context.jsx
154:04 - import use effect
154:06 - then invoke it pass in the callback
154:08 - function set up the empty dependency all
154:11 - right and then in my case i'm just going
154:13 - to say aph data here now once that is
154:17 - done then i'll cover one more gotcha
154:19 - that we need to remember about this
154:20 - callback function and then i'll lay out
154:23 - the steps that i'm about to take in next
154:26 - video
154:27 - so first let me navigate to context.jsx
154:32 - i want to get the use effect
154:35 - and i want to
154:36 - actually invoke it as well
154:39 - so in here we want to go with use effect
154:42 - so that's the hook that's coming from
154:43 - react
154:44 - then we want to invoke it right away so
154:46 - let's say use effect
154:48 - let's set up the callback function like
154:50 - i said empty dependency array
154:53 - and then in here let's just say
154:56 - console log and
154:58 - fetch data here let's save that and now
155:02 - let me navigate to the browser
155:04 - and check it out now of course i have
155:06 - the console log here
155:08 - now
155:09 - what is the gotcha that i was
155:10 - referencing before well it's following
155:13 - when it comes to this callback function
155:17 - it cannot return a promise so you cannot
155:20 - turn this into a sync function because
155:23 - if you remember by default the moment
155:25 - you set up
155:26 - a function to be async it returns a
155:28 - promise and react is not okay with that
155:31 - so we cannot turn this into a sync
155:34 - function now why am i saying that well
155:36 - because when it comes to fetching data
155:38 - effectively we have two approaches we
155:40 - can use dot then or we can use async
155:44 - await
155:45 - so when it comes to that then if that's
155:48 - the approach that you
155:50 - prefer you can easily set up the code
155:52 - right here instead of the callback
155:54 - function you can for example go with
155:56 - fetch api so you go to fetch
155:59 - let me write here fetch then the url
156:02 - then we go here with that then and then
156:05 - you know the rest so you can definitely
156:07 - do it here now if you want to go with
156:09 - async await essentially you have two
156:11 - options
156:12 - you can set up the function here
156:15 - inside of this callback function and
156:17 - then invoke it
156:18 - or you can set up the function outside
156:22 - and then invoke it
156:24 - again
156:25 - the reason why we need to do that is
156:27 - because we cannot turn this one into a
156:29 - sync function and then call await so we
156:32 - need to set up a separate function so
156:34 - hopefully we are clear on this and now
156:36 - let me show you the challenge that i
156:39 - have for you so now that we know that
156:42 - we'll use used effect
156:44 - to fetch our data
156:47 - i want you to try fetch data now
156:50 - you can use fetch api or axios that is
156:54 - really up to you that is irrelevant
156:56 - first i'll show you the fetch api
156:58 - approach since that is built in
157:00 - and then i'll switch to axios and this
157:02 - is
157:03 - another hot button issue because every
157:06 - time in tutorial i use fetch api i get
157:08 - comments why i'm not using axios and
157:10 - then once i switch the axios i get
157:12 - people asking why we're not using fetch
157:14 - api
157:15 - look
157:16 - just pick the one that you use and
157:18 - you'll be good to go
157:20 - there are not going to be that many
157:22 - differences so pick either fetch api or
157:25 - axios just remember that with axios we
157:27 - do need to install it and this is
157:29 - something that of course i'm going to do
157:31 - in a few videos
157:32 - and you can use any url that's why i
157:34 - have here from any url in the use effect
157:37 - callback function so again you just need
157:39 - to remember that if you're using that
157:41 - then it's one approach if you're using
157:43 - async await then it's going to be
157:44 - another approach and for time being just
157:47 - log the result
157:49 - just log it you don't have to do
157:51 - anything complex just log the result try
157:54 - to set it up and in the following video
157:56 - i'll show you my solution
157:59 - and before we continue let me just
158:00 - mention that in this video i'll use
158:03 - fetch api
158:05 - and if you're not familiar with fetch
158:08 - api or you just need to
158:10 - jog your memory
158:12 - in the readme i shared a awesome
158:15 - article by free code camp
158:18 - and basically i'm going to use the
158:21 - random user api and the way it works
158:26 - this is the url
158:27 - and then
158:28 - essentially just returns a random user
158:32 - again the structure here is not
158:34 - particularly important since that's not
158:36 - what we're going to use in project i
158:38 - just ended up using this url because
158:41 - it's pretty short
158:42 - and straightforward
158:45 - and then the way i set up the logic like
158:47 - i said in the use effect i set up the
158:50 - fetch data function because again i know
158:53 - i've said this before already but we
158:55 - cannot turn the callback function into h
158:58 - sync since i want to use a weight that's
159:00 - why i created a sync function so fetch
159:03 - data a sync function and then since
159:06 - we're working with asynchronous requests
159:08 - i just set up the try catch as well just
159:11 - keep in mind that when it comes to fetch
159:13 - api
159:14 - this doesn't really
159:16 - worry about the errors unless they're
159:18 - network errors and that's one of the
159:20 - differences between the fetch api and
159:22 - axios which effectively we're going to
159:25 - use in the following videos
159:27 - so in here i went with response await
159:30 - fetch then passing the url
159:33 - and then we need to turn this into a
159:35 - json so i waited for response.json
159:38 - got back to data and then logged in and
159:41 - also just in case logged the error and
159:43 - right below where i set up the function
159:45 - i invoked it as well and once i set up
159:48 - the function
159:49 - in the app provider also showcase how we
159:52 - can
159:53 - move it outside of the callback function
159:56 - because essentially that is going to be
159:58 - our approach
160:00 - in the upcoming videos so now let me
160:02 - navigate to the context
160:06 - and then for now i just have this
160:08 - console log here let me remove it let's
160:11 - go with const fetch
160:14 - data is equal to async
160:17 - that's our function
160:19 - now fetch api is built into the browser
160:21 - so we don't need to import anything we
160:24 - want to go with try and catch let's come
160:26 - up with const
160:28 - response is equal to a weight
160:31 - fetch now let me grab the url
160:34 - and then let me set it up as a string of
160:37 - course
160:38 - now we have a weight okay that's
160:39 - beautiful then const data is equal to
160:42 - await and then response json let's
160:45 - invoke it again and now let's just log
160:48 - it so console
160:49 - console
160:51 - and then log and then let's pass in the
160:53 - data now let's do the same thing in the
160:55 - error we just want to change what we're
160:57 - logging
160:59 - over here and we have the function
161:02 - that's awesome
161:03 - but of course
161:04 - for anything to work we also need to
161:07 - invoke it
161:08 - so we go with fetch data here now again
161:10 - let me navigate to the browser and check
161:12 - it out and here i have this giant object
161:15 - again
161:16 - we're not really concerned
161:18 - what we're getting back the idea is just
161:20 - to showcase how we fetch data so that's
161:23 - the first step after that we'll set up
161:25 - the state variables and all that and now
161:29 - let me also showcase how we can move the
161:31 - functionality outside of the callback
161:34 - function so this is definitely one
161:36 - approach that you can use
161:38 - but in our case
161:40 - we're actually going to set it up
161:42 - outside and then we'll invoke it inside
161:45 - of the use effect
161:46 - effectively i just prefer this approach
161:48 - better now there are times when you want
161:50 - to do that and use effect but
161:53 - again in this case it doesn't really
161:54 - matter so let me take this outside
161:57 - so again i'm talking about the
161:59 - function the fetch data function
162:02 - um now let's see whether everything
162:04 - still works yep i still get back the
162:06 - results so we are in good shape okay and
162:09 - once we're familiar how we can fetch
162:11 - data react
162:12 - now let's take a look at the api we're
162:15 - going to use for this project
162:18 - and before i show you
162:21 - the documentation as well as the urls i
162:24 - actually have a challenge for you
162:27 - so either you can follow this link
162:29 - or just go to your search engine and
162:32 - type mealsdb
162:34 - regardless you will hit this link and
162:38 - then get familiar with docs so try to
162:40 - understand on your own
162:42 - what the api offers
162:44 - and more importantly get two urls
162:48 - get the one
162:49 - that allows us to search meal by name
162:53 - as well as the random one now here's the
162:56 - hint
162:57 - in the docs
162:58 - this part is missing
163:00 - so either you'll have to add it manually
163:03 - and you'll see why in a second
163:05 - or just take
163:07 - the url
163:09 - place it in the browser and then copy it
163:12 - so again you have two approaches i
163:15 - usually prefer the second one i just
163:17 - find it faster than typing and then in
163:20 - the context jsx
163:22 - set up two variables now in my case i'm
163:24 - going to call them all meals url and
163:27 - random meal url and assign the
163:30 - corresponding values
163:32 - so as you can see
163:34 - in here
163:35 - we're searching meals by name and this
163:37 - is going to be our all meals url at
163:39 - least in my case and then the random
163:42 - meal url
163:43 - is going to have this value again this
163:46 - is the challenge go to docs get the urls
163:50 - get familiar with documentation
163:52 - and in next video we'll do it together
163:55 - okay and as far as the api we'll use
163:58 - this one
163:59 - so i believe the official name is the
164:02 - meal db
164:04 - and effectively we just want to navigate
164:07 - to the documentation
164:09 - and as you can see they just provide a
164:12 - bunch of urls
164:14 - so some of them
164:16 - you need to be a patron and some of them
164:19 - are for free so these are the two that
164:21 - we're going to use we're going to go
164:23 - with search meal by name and we also use
164:27 - this one look up full meal or no sorry
164:30 - look up a single random meal
164:33 - got carried away over here and just to
164:35 - showcase what we're getting back let me
164:37 - just copy this one
164:39 - let me go to the browser and check it
164:41 - out so effectively we'll get back the
164:44 - object in there there's going to be an
164:45 - array by the name of meals and then each
164:49 - meal
164:50 - is essentially a object itself with
164:54 - bunch of properties now of course this
164:56 - is already a full name
164:58 - if let's say we change this around and
165:00 - just go with a
165:02 - we'll get more items so now as you can
165:04 - see we have more meals that are again
165:08 - objects in that array and then we've got
165:11 - an id we've got a image and as you can
165:15 - see
165:16 - a bunch of other stuff as well
165:18 - so that is as far as the
165:21 - search meals by the name
165:24 - now another option that we have is look
165:26 - up a single random meal and what's
165:29 - really cool that actually they send back
165:31 - that one random meal but it's still
165:34 - structured as an array and for somebody
165:36 - who built the application that is
165:38 - actually very nifty because you don't
165:40 - have to change anything as far as the
165:43 - logic on the front end so if i copy and
165:45 - paste notice i still get back that one
165:47 - meal correct but the structure is still
165:50 - the same
165:51 - and
165:52 - if you have been setting up applications
165:54 - with api and front end you know that
165:57 - it makes things easier if you don't have
165:59 - to restructure your application based on
166:02 - the urls coming from the same api now
166:05 - again there's multiple variations of
166:07 - course there's cases where it's not
166:10 - possible to always have pretty much the
166:12 - same structure but in this case this is
166:14 - super nifty
166:16 - so now we just want to take those two
166:18 - urls and set it up in the context so now
166:21 - let me navigate back to our project
166:25 - and then i'm gonna go to context.js i'll
166:28 - take a look
166:29 - um most likely i'll just do it above
166:31 - here where we have the context
166:33 - and then let's come up with those two
166:36 - variables so
166:37 - my case is going to be
166:39 - all
166:40 - meals
166:41 - url
166:43 - and then the value will be this one over
166:45 - here so that's the one where we'll pass
166:48 - in the search value and for now i'll
166:50 - just leave it as a of course eventually
166:52 - it's going to be dynamic and the second
166:54 - one will be that random one
166:56 - so let me navigate here
166:58 - and then again let's come up with that
167:00 - variable name in my case it's going to
167:02 - be random
167:03 - meal and then url and then let's pass in
167:06 - the value
167:08 - all right add up next we want to
167:09 - refactor our fetch data function where
167:12 - first we want to switch to the axios
167:15 - library and as i know if you're not
167:17 - familiar with the library or
167:19 - you just need to jog your memory here's
167:21 - an awesome article
167:23 - by free code camp and also we want to
167:26 - switch the url to the get meals by name
167:30 - one remember it was stored in the url
167:34 - variable
167:35 - and the steps are following we want to
167:37 - install axios
167:39 - so we can do it over here where we have
167:41 - the packages
167:42 - then we want to import it in the
167:44 - context.jsx
167:45 - and as far as refactoring i'm going to
167:48 - change the name
167:49 - of the function
167:50 - i will switch from fetch api to axios
167:55 - then i'll add the url parameter
167:58 - because
167:59 - we will invoke the same function
168:01 - multiple times with a different url
168:03 - eventually so we might as well do that
168:05 - right now and i'll pass in
168:09 - the all meals url so we'll switch to all
168:12 - meals url and lastly just log the
168:14 - response if you get stuck feel free to
168:18 - take a peek at my solution below so
168:21 - let's refactor our fetch data so the
168:24 - first step is going to be installing
168:26 - axios
168:28 - i'm going to navigate to this tab and
168:31 - then let's type the name of the library
168:33 - of course it is axios we want to install
168:36 - and as far as the brief intro axios
168:39 - effectively is a http library that makes
168:43 - our life easier especially as your
168:45 - project grows and you have more complex
168:49 - requests
168:50 - and we want to import that in the
168:53 - context.jsx and then i'll show you how
168:56 - basically our factor the application so
168:58 - let's start here
169:00 - by navigating to the context jsx
169:05 - and then we want to import the axios
169:09 - import axios from and then we're looking
169:12 - for the axios library and then as far as
169:15 - refactor
169:17 - let's take a look at the readme
169:19 - essentially
169:20 - we want to switch
169:22 - from the
169:24 - fetch api to the axios and i also want
169:27 - to change
169:28 - right away the name
169:30 - so instead of fetch data i'm going to go
169:32 - with fetch meals
169:34 - i'll pass in the url so instead of hard
169:37 - coding the url i'll pass it as a
169:40 - parameter and again the reason for that
169:42 - is because we'll invoke the fetch meals
169:46 - multiple times and based on the
169:48 - conditional pass in the url
169:51 - and in here we just go with a weight and
169:53 - axios so we don't need to turn this into
169:55 - a json and we just log the response now
169:58 - axios does have a kind of more complex
170:01 - response so we'll actually have to pull
170:03 - out the data but let's not worry about
170:05 - it right now we want to invoke fetch
170:07 - meals and then we want to actually pass
170:10 - in the
170:11 - all
170:12 - meals url now of course in your readme
170:15 - it's going to be already there and once
170:17 - we do that we should be in good shape
170:20 - so let's try this out in the context i
170:22 - already have the axios okay so that is
170:25 - done now let me find my fetch data
170:28 - i'm going to call this fetch
170:30 - meals
170:32 - then i'll pass in the url that's going
170:35 - to be name of my parameter
170:37 - and instead of console logging the data
170:39 - we'll take a look at the response
170:42 - and then instead of fetch we're going to
170:44 - go with axios
170:46 - and here we'll pass in the url so
170:48 - instead of hard coding this
170:51 - like we did previously
170:52 - we'll pass in the url then let's keep on
170:55 - moving and now we want to pass in the
170:57 - all meals
170:59 - url let's save it
171:02 - and let's take a look at the browser so
171:04 - in here there's a complaint that import
171:06 - from axios blah blah let's see whether
171:08 - refresh is going to help
171:11 - and nope
171:13 - that's weird maybe i was just too busy
171:15 - talking and i actually didn't install
171:17 - the library so let me double check
171:19 - i have dev dependencies okay and then
171:22 - yeah i have nothing here so let me go
171:24 - back to
171:26 - the installer and let me look for axios
171:29 - one more time that's what happens when
171:31 - you talk too much so let me install the
171:33 - package and now everything should work
171:35 - as expected
171:37 - so now let's take a look at the browser
171:40 - let me refresh
171:42 - and then if everything is correct and of
171:44 - course fetch data is not
171:46 - defined because i forgot to change the
171:48 - name my bad so let me navigate back to
171:51 - my context
171:54 - and then here of course
171:56 - i
171:57 - change the name so it should be fetch
172:00 - meals instead of
172:02 - fetch data
172:03 - let me save for the third time yep and
172:06 - now everything works
172:07 - now when it comes to actuators like i
172:09 - said the response is more complex
172:12 - so in here
172:14 - we actually get the config we've got
172:17 - data as you can see it's a giant object
172:19 - now what we're interested is this data
172:21 - property
172:23 - so
172:23 - if we are successful
172:26 - then data that we're getting back from
172:28 - the api from the server is going to be
172:30 - located in the data property
172:32 - now like we covered already before
172:35 - the way the api sends back the data
172:37 - there's a meals array so that doesn't
172:40 - change it's just going to be located
172:42 - in the data property and at this point
172:45 - we have multiple options
172:47 - either we can just destructure it or we
172:50 - can go with response and then data now
172:53 - keep in mind though
172:54 - the value is in the meals
172:57 - so still have to access that property
172:59 - but i'm just showing multiple ways how
173:01 - we can access it now i always actually
173:04 - prefer
173:04 - the the structure route where i just
173:06 - type data and now i directly access the
173:10 - data again let me say one more time and
173:12 - now we should see again that meals array
173:16 - which is an array off object and lastly
173:19 - let me just showcase how we can access
173:21 - error in the axiorys so i'm going to go
173:24 - back to my fetch meals we're looking for
173:27 - error object and more specifically we're
173:30 - looking for
173:31 - error dot response so that's where we
173:33 - can access the error and in order to
173:35 - showcase that i'm just going to go to
173:37 - the all meals one i'm just gonna type
173:39 - some gibberish here
173:41 - and then if you take a look at the
173:42 - console notice you'll have the error
173:45 - and in this case you can take a look at
173:47 - the error response as well so that
173:50 - should do it for the axios
173:53 - and now we can proceed to the next step
173:56 - okay and up next let's set up the meals
173:58 - state variable and just render something
174:01 - in the meals component now before i
174:04 - continue let me just mention that if you
174:06 - did also
174:08 - change the value in the url in the
174:10 - previous video just to see the error
174:12 - please make sure that it's back to the
174:15 - original url otherwise the functionality
174:18 - is not going to work as far as the setup
174:20 - we want to go with import use statehook
174:22 - in the context
174:24 - then we want to set up the state
174:26 - variable
174:27 - at least in my case i'm going to go with
174:28 - meals and remember that it returns an
174:31 - array with two values the meals value
174:35 - and the
174:36 - function that controls that and then we
174:38 - wanna set the state variable
174:41 - from our fetch meals function remember
174:45 - we're getting the meals from the api and
174:48 - remember the structure of the response
174:50 - and we want to use set meals
174:53 - to set our state variable equal to that
174:55 - data
174:56 - then we want to pass the meals down to
175:00 - our entire application and remember we
175:03 - do that in the value prop and we want to
175:06 - structure the meals in the meals
175:08 - component lastly we want to iterate over
175:11 - the meals
175:12 - log each meal
175:14 - and then render something on screen
175:16 - again it doesn't really matter what you
175:18 - render
175:19 - as long as we can see that we're getting
175:22 - the data we are correctly iterating over
175:25 - and
175:26 - we have something on screen we're in
175:28 - good shape as always if you get stuck
175:30 - feel free to peek at my solution below
175:32 - all right and as far as my solution i'll
175:35 - start by importing use state in my
175:38 - context jsx
175:40 - so let me add this over here
175:42 - then i'll set up that state variable by
175:44 - the name of meals and remember we get
175:46 - back the array we write away the
175:48 - structure
175:50 - this is going to be the value and this
175:51 - is the function that controls that value
175:54 - initially the value will be empty array
175:58 - and then in the fetch meals
176:00 - remember
176:01 - the array is actually in the meals
176:04 - property
176:05 - so there's a
176:06 - data object
176:07 - in there
176:08 - we have the meals property and in there
176:12 - we have the array
176:14 - so
176:14 - we run set meals this is going to set
176:17 - our meals state variable and we want to
176:19 - pass it down to the entire application
176:22 - that's why in the value
176:24 - instead of the name and
176:27 - whatever it was the role i believe we'll
176:29 - pass down the meals and then in the
176:31 - meals component we'll destructure it
176:35 - remember the setup is already in place
176:37 - we just need to change what we're
176:38 - looking for since we're passing down the
176:40 - meals instead of the name and the roll
176:43 - now of course we're looking
176:44 - for that property in the emails
176:46 - component and then lastly let's set up
176:49 - the return where i'm going to go with
176:52 - section
176:53 - now technically you don't have to add
176:55 - section we'll worry about the css in the
176:57 - following videos but i'll write away
176:59 - gold section since that's what i'm going
177:01 - to use but you can also use div of
177:03 - course
177:04 - then we'll iterate over the array
177:07 - and then for every
177:09 - item
177:10 - in my case i'm going to call it single
177:11 - meal that's going to be that object i
177:13 - want to log it i want to see the proper
177:16 - issue that we get back
177:18 - since we'll have to destructure them
177:20 - and
177:21 - at least in my case i'm going to return
177:23 - a heading 4. so if everything is correct
177:26 - i should get i believe 25 heading 4s
177:30 - on the screen so let's try this out
177:34 - first i want to go to context
177:37 - jsx
177:38 - i will look for
177:40 - use state
177:41 - then i'll set up that state variable so
177:43 - meals
177:45 - and then set meals so that's the
177:48 - function of course that controls it use
177:50 - state and i'll start with empty array
177:53 - because
177:54 - remember we'll be iterating over
177:57 - and initially if you'll set it equal to
177:59 - null then the functionality is not going
178:02 - to work because it takes time to fetch
178:03 - those meals and i'll talk about the
178:05 - loading
178:06 - and also if we get back nothing from the
178:10 - api
178:12 - what to do then so we'll cover those
178:14 - conditions but just remember that yes we
178:16 - do need to start with empty array
178:18 - then
178:19 - let's use the set meals and then pass in
178:23 - data
178:24 - and then meals that's where the emails
178:26 - are located and now i believe we can
178:28 - just
178:29 - remove the console log then instead of
178:32 - these two suckers
178:34 - we want to pass down the state variable
178:37 - let's save it and then lastly
178:39 - in the meals component
178:42 - first i want to grab it
178:44 - so instead of this context i'm going to
178:46 - destructure meals and now let's iterate
178:50 - over where first we want to go with
178:52 - section
178:54 - then inside of the section
178:56 - we'll iterate over the list so let's go
178:58 - with meals dot map
179:01 - and we pass in the callback function
179:04 - and i'll reference
179:06 - each and every item there the object as
179:09 - a single meal and what i'm returning
179:12 - from this map function well for now i'm
179:14 - just going to go with heading 4
179:16 - and single
179:17 - meal and then let's also log it since
179:20 - we'll use those values in the following
179:23 - lecture so let's go with single meal
179:25 - let's save it and like i said if
179:28 - everything is correct
179:30 - i should see a bunch of single meals on
179:32 - the screen
179:33 - and we do and also
179:36 - notice over here yes there are some
179:38 - warnings about the key prop and all that
179:40 - we'll worry about it in a second for now
179:43 - i just want to showcase that these are
179:44 - the values
179:46 - that we get back for every object and
179:50 - they should match what
179:52 - they should match this correct so this
179:54 - is also what we can see in the browser
179:57 - and if you have the same result now we
179:59 - can move on to the next step okay up
180:02 - next let's display a nice card
180:06 - for every meal that we have in the array
180:10 - and the way it's going to look like
180:12 - so i'll add right away classes for css
180:15 - but like i said
180:17 - i'll do the styling in a separate video
180:19 - so if you already copied
180:21 - these styles
180:23 - you're good to go
180:24 - if you didn't then don't worry if it
180:27 - looks somewhat ugly in the beginning
180:29 - we'll worry about the
180:32 - css
180:33 - in the following videos so first
180:36 - i want to grab the properties from the
180:38 - single meal now how do i know that those
180:41 - properties are there well because we
180:43 - logged them
180:44 - in the last video correct
180:46 - and we can also of course see them in
180:48 - the browser if we just provide the url
180:51 - and the properties that i'm interested
180:53 - are
180:54 - id meal
180:55 - which is going to be the meal id
180:58 - then i also want to get the title
181:01 - and notice how i'll pull out the
181:02 - property but i'll right away give it an
181:05 - alias just so it's easier for me
181:08 - to work with the value now do you have
181:10 - to know of course you can still use the
181:13 - property name that comes from the api
181:16 - and also i want to get the image the
181:18 - property for the image is this one
181:20 - and yes i'll give it an alias of image
181:23 - so i'll set up the section center for
181:26 - the entire section but like i said you
181:28 - can also set up a div if you want and as
181:31 - far as the return i'm going to return a
181:33 - article and then when it comes to react
181:36 - since it wants to keep the track
181:38 - of all the changes that are taking place
181:40 - we do need to provide a key prop
181:43 - which needs to be a unique value now
181:46 - technically you can get away by grabbing
181:48 - the index over here if you're familiar
181:50 - with map you know that the second
181:53 - parameter we get by default is the index
181:55 - so you can also pass it here but it's
181:58 - not suggested if
182:00 - the data is going to be changing so if
182:02 - you're going to be
182:03 - making some kind of manipulations with
182:06 - the data so therefore
182:08 - it's always suggested to have something
182:10 - unique and in our case that something
182:12 - unique is the id
182:14 - then we want to add a class name of a
182:15 - single meal and i'm not going to repeat
182:17 - the whole deal about the css
182:20 - and we want to display the image now
182:22 - with the image for now i'll just go with
182:24 - this style
182:26 - and width 200 so effectively we're
182:28 - setting up the inline styles here
182:31 - simply because otherwise those images
182:32 - are going to be massive
182:34 - so yes the css is coming up so for now
182:37 - this is just temporary
182:39 - now again if you have the entire css you
182:41 - don't need to worry about it just add
182:42 - the class name of img and then right
182:45 - after the image we have the footer where
182:47 - it will display the title and also the
182:50 - like button now the icon for the like
182:53 - button will set up in the following
182:55 - videos for now let's just right click me
182:58 - and then if everything is correct we
183:00 - should see some images some titles
183:03 - and all that cool stuff
183:06 - so let's start working on that where
183:08 - first
183:09 - navigate back to the meals here
183:12 - and
183:13 - i'm not going to switch back to the
183:14 - browser and showcase where i'm getting
183:16 - the properties again i believe i
183:18 - showcased that quite a few times so
183:20 - first i want to pull them out out of the
183:22 - single meal and yes each object has them
183:26 - then we want to go with string meal and
183:29 - yes the names are a little bit funky but
183:33 - we'll just live with that we'll just
183:34 - give it an alias and
183:36 - we'll move on and then the last one is
183:38 - the
183:38 - string meal
183:40 - and then i believe it's thumbnail and
183:42 - that is equal to a image at least that's
183:46 - my alias so i'm going to set it equal to
183:48 - single meal now we nicely destructured
183:50 - it and now let's worry about the return
183:53 - and i'll say not i forgot to add here
183:55 - the class name not class
183:58 - i'm going to go with class name that is
184:00 - equal to section
184:02 - center and then in here it's not going
184:04 - to be a heading 4 will actually go with
184:08 - a article
184:10 - and then another thing that's not giving
184:13 - me auto complete so
184:15 - let me type it here article as well
184:17 - we do want to add a class i believe here
184:20 - and the class will be
184:23 - single meal
184:24 - so class name is equal to single
184:28 - and then meal and let's also add that
184:30 - key
184:31 - prop that
184:33 - basically is looking for
184:35 - the unique value in our case that is
184:37 - going to be id
184:38 - meal and then once we have this one in
184:41 - place inside of the article we want to
184:44 - go with img
184:45 - so let's set up the image let's set up
184:48 - the source and
184:50 - insert it equal to the image to the
184:53 - alias
184:54 - that we gave to the string meal and then
184:59 - the thumbnail
185:00 - and then let's also add the class name
185:02 - right away as well and we're gonna go
185:04 - with img let's close it and then right
185:08 - below
185:09 - image we're gonna go with footer
185:12 - and then inside of the footer let's set
185:14 - up a heading five
185:16 - setting five and then in here we wanna
185:19 - display the title and right next to it
185:21 - we'll have a button
185:23 - and in here let's set up again a class
185:26 - name it's going to be a like btn and
185:29 - then for now it's going to be clicking
185:32 - but eventually we'll set up a nice icon
185:36 - as well
185:37 - and now let's see what we have as far as
185:39 - the result in the browser and of course
185:42 - as i was setting up i forgot that i need
185:44 - to add essentially inline style so let
185:46 - me go with style
185:48 - and in here i want to
185:51 - go with with and we need to remember
185:53 - that since it's javascript this needs to
185:56 - basically be a string and now let me go
185:58 - back and yep now it's more manageable
186:01 - again it's not pretty
186:03 - but at least we can see some images
186:06 - titles
186:07 - as well as the like button and with this
186:11 - in place now we can move on to the next
186:14 - step okay and now let's worry about the
186:16 - styles
186:17 - now like i already said
186:20 - i believe ten thousand times if you have
186:22 - the styles you can just skip this video
186:25 - if you don't then we'll type these
186:26 - styles together and first let's just
186:29 - start by navigating to app.css
186:32 - and i want to set up the comments so
186:33 - usually what i do is
186:35 - i set up the css in the order that i
186:38 - have my components so eventually we'll
186:40 - have the search web favorites will have
186:42 - the meals and we'll also have the model
186:45 - and therefore
186:46 - i'll do the same thing in the app css
186:49 - where essentially i want to start with
186:51 - search then it's going to be
186:53 - favorites
186:55 - and then we want to go with meals
186:59 - and lastly there's going to be a model
187:01 - so
187:02 - the search and favorites
187:04 - are coming up
187:06 - for now we'll just worry about the
187:07 - emails and we'll start by setting up
187:10 - that section center and you know what
187:12 - also i think it's going to be easier if
187:14 - i just place
187:16 - the tab over here so that way we can
187:17 - right away see what we are doing so
187:20 - start with that section center class and
187:23 - you know what
187:24 - i'll just make it here for now of course
187:26 - eventually i'll set it back to what it
187:28 - was start with section center we do want
187:31 - to add some padding here
187:32 - and i'm going to go with three rem stop
187:35 - bottom and zero left and right then we
187:38 - want to go with with and this is the
187:39 - case where i'm going to use
187:41 - my
187:42 - css variable which is i believe set to
187:45 - 90 view widths
187:47 - so essentially the
187:49 - percent of the screen
187:51 - and again the reason why i prefer this
187:53 - is variables because that way
187:54 - effectively i can just set up the value
187:57 - in one place reuse it in multiple places
188:00 - and if i ever want to change something
188:02 - well then i need to change it in one
188:03 - place then i'll also set up the max
188:06 - width so this is for the big screen
188:08 - essentially i don't want any of these
188:10 - components spanning the entire screen i
188:13 - want to set up some kind of max width
188:15 - which i believe
188:17 - again if you want to double check that
188:18 - just navigate up to the css variables i
188:21 - just don't want to do that since i know
188:23 - that some people find it annoying but i
188:25 - believe it was like 11 20 pixels or
188:27 - something along those lines again we're
188:28 - looking for the variable
188:30 - max with and now we just want to place
188:33 - it in the center so we're going to go
188:35 - here with margin 0 and then although you
188:37 - know what
188:38 - these warnings are
188:40 - a little annoying so check it out now of
188:42 - course our
188:44 - container is always going to have the
188:46 - width of
188:47 - 90 of the screen
188:49 - but it's never going to be bigger than
188:52 - the 1120 so it's always going to stay
188:55 - like this and then we'll write from the
188:57 - get go set it to display grid
188:59 - and i'll add some kind of gap and it's
189:02 - actually going to be the same
189:04 - for the rows and columns and i'm going
189:06 - to go with two rems i just always prefer
189:09 - pretty much that type of setup
189:11 - and since we're on a roll when we also
189:13 - right away
189:15 - set up
189:16 - the column layout
189:18 - for the bigger screens and we'll do that
189:20 - with the media
189:22 - query and we'll go with media screen and
189:25 - let's go with min width and i'm going to
189:27 - choose the value
189:28 - 776 pixels
189:31 - and then
189:32 - in order to speed this up a little bit
189:34 - i'll copy and paste that's going to be
189:36 - my section center and then we're looking
189:38 - for the property grid template and then
189:40 - columns we'll set it equal to one
189:42 - fraction and one fraction so once we get
189:45 - to 776
189:48 - we should have a two column layout
189:50 - and
189:51 - as you can see
189:52 - that is clearly the result and then we
189:55 - also want to add one for the bigger
189:56 - screen which most likely
189:58 - i'll showcase right away as well so in
190:00 - this case it's going to be 992
190:04 - and now we're looking for a three column
190:06 - layout now as i know i'm fully aware
190:08 - that we can
190:10 - change the syntax here to let's say
190:13 - repeat but i just think that for this
190:15 - project it's good enough if we just
190:16 - repeat those fraction values so now let
190:19 - me make it bigger and notice we have a
190:22 - three column layout and now let's worry
190:24 - about that single meal
190:26 - we are pretty much done with the
190:28 - container now we want to go with single
190:30 - meal and of course we're talking about
190:32 - that
190:33 - card
190:34 - we'll start with the background property
190:36 - and we'll use again the css variable
190:39 - with the value of white and yes pretty
190:42 - much the actual value is also the white
190:45 - color then we want to add the text color
190:48 - and this is going to be for the button
190:50 - so
190:50 - heading already should have the text
190:53 - color set in css but since i want to
190:56 - have the same color for the button i'm
190:58 - going to go here with color then var and
191:01 - then we're looking for
191:02 - text color so that's the easiest
191:04 - variable then let's add some border
191:06 - radius
191:07 - or radius
191:09 - and this one will set it equal to again
191:12 - css variable so far and then we're
191:14 - looking for border and then radius
191:18 - like so and then we'll add a little box
191:21 - shadow a transition both of them see if
191:24 - there's variables and then once we have
191:26 - already single meal we'll just change
191:28 - that box shadow so let's start here the
191:30 - box shadow and let me scroll up just so
191:33 - it's easier for you to see so we're
191:36 - looking for a box shadow property that
191:38 - one will be equal to a
191:40 - shadow
191:41 - to css variable and then we also want to
191:45 - add a transition simply because we want
191:47 - that change to happen over time and
191:50 - therefore we'll go with var and then
191:52 - transition like so and then
191:55 - let's select again that single meal and
191:58 - let's set up that hover effect so single
192:00 - meal
192:01 - and then as we're hovering
192:04 - we want to change that box shadow over
192:07 - here and once we save it we should
192:10 - notice that as we're hovering
192:13 - effectively we're getting that
192:15 - darker
192:16 - box shadow
192:17 - now one thing that i want to mention
192:19 - remember in the previous
192:22 - video we added that class of image
192:25 - now notice that this is a global class
192:28 - which adds a width of hundred percent a
192:31 - this block block as well as object fit
192:35 - so now once we have
192:36 - the structure in place as far as the
192:39 - columns and everything we can actually
192:41 - remove that inline style so now let me
192:43 - navigate back to the meals and you know
192:46 - what let me just minimize this for now
192:48 - and then remember we added this style
192:51 - and i said that it's going to be
192:52 - temporary so now once we have the
192:54 - columns of course we can set it back and
192:56 - you'll notice that of course the
192:59 - image is spanning all across and this is
193:01 - exactly what we wanted
193:03 - so now let me navigate back to app css
193:07 - make this one smaller and maybe this one
193:10 - also a little bit smaller just so we
193:12 - have a little bit more real estate
193:14 - and then we actually want to style the
193:16 - image right away so we have that global
193:18 - class yes that's awesome but we also
193:20 - want to add some additional styles and
193:23 - therefore i'm just going to go with img
193:25 - so effectively i'm targeting that
193:28 - element first i'm going to set up some
193:30 - kind of height which in my case is going
193:31 - to be 15 rem and now let's talk about
193:34 - the border radius notice here
193:37 - how we set the border radius for the
193:39 - entire card
193:41 - but we also need to set it for the image
193:43 - now i don't want the border radius
193:46 - for
193:47 - every corner i actually only want for
193:50 - the top left and top right in order to
193:53 - do that we just need to go with border
193:54 - radius and we need to add
193:57 - top and then left
193:59 - and yes you guessed it in order to set
194:01 - up the right one we just need to change
194:04 - this value around and now we should
194:06 - notice that the top
194:08 - left and top right corners
194:11 - are actually around it and then lastly
194:13 - as far as the
194:15 - image we just want to add cursor pointer
194:18 - because
194:19 - in the final application we'll be able
194:21 - to click on image and then we will
194:24 - actually display it in the model then
194:27 - let's style a heading 5 here so single
194:30 - hyphen meal and we're looking for the
194:33 - heading 5 and in here let's add a
194:35 - padding 0 margin zero because there is
194:38 - some default
194:40 - uh margin padding as far as the
194:43 - typography let's save and then let's
194:45 - worry about the footer so single
194:48 - meal
194:49 - and we're looking for the footer
194:51 - in here let's add a padding right away
194:53 - so padding is going to be one rem's 1.5
194:57 - rms then we'll display it as flex
195:00 - so display equals flex we want to align
195:03 - the items in the center
195:06 - so say align items center we want to go
195:10 - with justify content and space between
195:13 - so this effectively is just going to
195:14 - push them as far as possible from each
195:16 - other
195:18 - so let's say here's space
195:20 - between and then lastly we also want to
195:23 - go with flex wrap and wrap so if there's
195:26 - not enough space we just want to wrap it
195:28 - to the next line so flex
195:31 - wrap
195:32 - and equals to wrap and even though we
195:34 - don't have the icon we might as well
195:37 - style the button since we're working
195:39 - with the css so let's say here
195:42 - like button that was the class name and
195:44 - then we're looking for the background we
195:46 - want to go with
195:47 - transparent
195:49 - and we want to add the border also
195:51 - transparent so take this value here
195:54 - copy and paste and then after that let's
195:56 - increase the font size again for text
196:00 - it probably won't look that good but
196:02 - once we set up the icon it's going to be
196:04 - good enough we're going to go with 1.5
196:07 - rems so increase that then cursor
196:10 - pointer and again the transition so
196:12 - cursor pointer and for transition just
196:16 - so i can save a little bit on typing
196:18 - i'll just grab the value from the single
196:20 - meal and set it here and as we're
196:23 - hovering what do we want to do
196:25 - well
196:26 - let's add some transition so like button
196:29 - hover
196:30 - and then as we're hovering
196:32 - essentially
196:34 - we wanna
196:35 - change the color to red
196:36 - so color is going to be equal to a css
196:39 - variable and the value is red dark and
196:43 - also we want to transform so let's go
196:46 - transform and let's translate
196:49 - in the y direction and since i want to
196:51 - lift it up like two pixels i'll say
196:53 - negative two pixels so now check it out
196:56 - as we hover over the like button
196:58 - we actually lift the text up a little
197:01 - bit and essentially that is the css
197:05 - for
197:05 - our meals component
197:08 - and while we're still on a topic let's
197:10 - also knock out the icon
197:13 - and effectively for my project i prefer
197:15 - react icons library for a variety of
197:18 - reasons first of all it offers tons of
197:21 - options and second it's very easy to
197:24 - work with library because you get back
197:27 - the component the react component
197:29 - and as a result you can add the class
197:31 - you can style it directly and all kinds
197:34 - of cool things
197:36 - so if you want to utilize the search
197:38 - engine just look for react icons or you
197:40 - can just follow the link that i provided
197:42 - in the readme
197:44 - and once you
197:45 - get there you'll see this documentations
197:48 - page like i said uh you have tons of
197:50 - options so these are all the libraries
197:52 - that
197:53 - you
197:54 - can work with and if you want to search
197:56 - for specific icons so let's say in our
197:59 - case if we're looking for
198:01 - thumbs up icon
198:03 - just type here in the search box and i
198:06 - believe i used this one over here
198:09 - now don't quote me on that
198:12 - essentially i will showcase that in a
198:14 - second but
198:15 - i believe that's the one that i used and
198:18 - just keep in mind that
198:20 - once you choose the icon you also need
198:23 - to remember which library is it from
198:27 - because when you import
198:29 - the icon
198:30 - and as i say not the syntax is following
198:32 - where you go with the name you also need
198:34 - to provide the library
198:37 - otherwise
198:38 - essentially you'll get the error so now
198:40 - let me try it out in our application
198:42 - where first i want to go and install the
198:45 - package
198:46 - i believe the package name was a react
198:49 - icons and i should get the suggestion
198:52 - hopefully yep there is that's the
198:55 - package we want to install
198:56 - then we want to navigate of course to
198:58 - the meals that's where we are setting up
199:01 - that icon
199:02 - so meals over here and now let me grab
199:05 - right away the value so again let me
199:07 - search for it
199:09 - and that's the one that i want to use
199:10 - notice
199:11 - the name was copied
199:13 - to our clipboard and then we want to go
199:16 - with import
199:17 - get the icon from and then we're looking
199:19 - for react icons but very important you
199:22 - need to add the library in my case that
199:24 - is bootstrap and then where we have the
199:28 - like button instead of just click me i'm
199:30 - just going to go with this component and
199:32 - since i want to save a little bit of
199:33 - time on typing i'll just copy and paste
199:36 - the component
199:37 - now let's save it and take a look at the
199:40 - result in the browser
199:42 - and now check it out instead of the text
199:44 - we have a nice icon from the bootstrap
199:48 - library beautiful and once we're done
199:50 - with our meals component well almost
199:53 - done there is
199:55 - a little bit of functionality coming up
199:57 - but the
199:58 - main
199:59 - setup is done
200:01 - before we continue i also want to
200:03 - showcase why we want to use a user
200:05 - effect and feel free
200:08 - to just watch the video
200:09 - i mean you don't have to follow along
200:12 - because i will purposely set up the
200:13 - infinite loop
200:15 - just to kind of underscore the point
200:18 - that i was making previously so if i
200:21 - navigate to
200:23 - context js
200:25 - and if i decide to be a rebel and then
200:28 - instead of
200:30 - using
200:30 - the dependency array and for now leaving
200:33 - it empty basically
200:35 - invoking this callback function only
200:37 - when the initial load happens only when
200:41 - the component mounts i will actually get
200:45 - a infinite loop so let me showcase that
200:48 - let me remove that dependency array let
200:50 - me save it let's navigate to the browser
200:54 - and then more specifically we're looking
200:56 - for the network tab
200:58 - and notice over here
201:00 - notice the amount of requests
201:02 - that are we making
201:05 - so why is that happening well first let
201:08 - me go back and actually add here a
201:11 - empty array
201:13 - let's save it and then
201:15 - the reason why is that happening is
201:17 - because
201:19 - we need to remember that when it comes
201:21 - to use state every time we change the
201:25 - value of the year state we trigger
201:28 - re-render
201:29 - so now let's go step by step
201:31 - when it comes to
201:33 - our fetch functionality
201:35 - on the initial render when the component
201:38 - mounts
201:39 - we invoke use effect correct now instead
201:43 - of that use effect
201:45 - the callback function we fetch data and
201:48 - change their values for the meals
201:51 - so there is initial render
201:54 - and instead of the fetch meals we
201:58 - change the
201:59 - value for the meals
202:01 - state value
202:03 - now what happens when we change the
202:04 - value we trigger another
202:08 - render we trigger re-render
202:11 - now what happens in that next render
202:14 - well we repeat the steps
202:16 - essentially we repeat the steps
202:19 - 2 and 3 in here
202:21 - so
202:22 - since we triggered that re-render inside
202:24 - of the
202:26 - fetch data we go back to the step 2 and
202:28 - then step 3. that's why you'll have so
202:32 - many requests and eventually the browser
202:34 - will run out of those requests and
202:36 - effectively crash
202:38 - because you have infinite loop
202:41 - since we
202:42 - trigger rerender when we change the
202:44 - value of the state variable that's why
202:47 - we need to be very careful
202:50 - when we set up the use effect and
202:52 - refresh data keep in mind if you just
202:54 - have simply console log then of course
202:56 - it's not going to happen because you're
202:58 - not triggering that re-render
203:00 - but if inside of
203:03 - the fetch data or fetch meals whatever
203:05 - fetch function you have if inside of
203:07 - that function you change the state value
203:10 - which is our case of course
203:12 - then yes you need to make sure that
203:15 - there is a dependency array and if
203:17 - you're placing any values inside of it
203:19 - you need to have a clear idea
203:21 - when this callback function is going to
203:23 - be
203:24 - invoked otherwise you're risking setting
203:26 - up the infinite loop and then like i
203:28 - said eventually your browser will crash
203:31 - and the same goes if you'll invoke the
203:34 - function inside of the use effect so
203:36 - this is the question that i get quite
203:38 - often where
203:40 - students say hey but why do we need use
203:42 - effect why we can't just move fetch
203:44 - meals outside of the use effect well
203:47 - let's see you'll pretty much see the
203:49 - same result again let me save and let me
203:52 - navigate back and notice again we get
203:55 - tons and tons and tons of requests
203:57 - because we have infinite loop that's why
204:00 - you always always want to fetch data
204:03 - as of now of course things might change
204:05 - but at the moment in react you always
204:06 - always want to fetch data inside of the
204:09 - user
204:10 - and you want to make sure
204:12 - that you start at least with the empty
204:14 - dependency array and then eventually as
204:17 - you add values that you have a good
204:20 - understanding when this
204:22 - callback function
204:24 - is going to be invoked because remember
204:26 - once we start adding values over here
204:28 - we'll invoke this
204:31 - callback function and all the code
204:33 - inside of it
204:34 - once the values
204:36 - that we add there change and while we're
204:39 - still working with the meals
204:41 - let's also set up a loading check
204:44 - as well as empty meals
204:47 - effectively if we don't get any data
204:50 - back from the api
204:52 - first i guess let's start with loading
204:55 - you see when it comes to data fetching
204:58 - effectively
204:59 - it doesn't happen instantly because it
205:01 - is a synchronous operation now of course
205:04 - it happens fast meaning in the human
205:07 - time it's fast but it still
205:10 - takes a little bit time
205:11 - in the computer time and we can clearly
205:14 - see that if we navigate to a network tab
205:17 - and if we slow down the network so in my
205:21 - case i'm going to go with fast 3g and
205:24 - you'll notice that
205:25 - initially there's nothing on the screen
205:27 - we just have that empty array
205:29 - and only after time we actually display
205:33 - those meals
205:34 - now in my opinion a better setup is if
205:38 - we have some kind of loading condition
205:41 - where essentially
205:42 - we display something on the screen and
205:44 - to showcase that i'm going to navigate
205:46 - to a complete project and you'll notice
205:48 - there that we'll have this loading dot
205:50 - dot dot so effectively while we're
205:53 - getting the data
205:54 - we're just displaying to a user that hey
205:57 - we're loading it and then once we get
205:59 - the data then we display the emails
206:03 - and the steps in order to set it up are
206:06 - following first set up a
206:08 - state variable by the name of loading at
206:11 - least that's going to be my name and
206:13 - default value is going to be false now
206:16 - in the fetch meals
206:18 - the first thing you want to do is set
206:20 - loading to true
206:22 - so as we start fetching meals we set
206:25 - loading to true
206:27 - then the last thing that we want to do
206:29 - in the fetch meals is set loading to
206:31 - false so once we're done fetching data
206:34 - regardless whether we get back the data
206:36 - or there's an error we want to set
206:38 - loading to false
206:40 - and then we want to add that loading
206:42 - state variable to a value prop basically
206:45 - we want to pass it down to our
206:47 - application
206:48 - in the meals jsx we want to grab the
206:52 - loading variable and we want to set up
206:54 - the condition
206:56 - now it needs to be before our current
206:59 - return so if loading is true then we
207:02 - want to return loading dot dot
207:04 - and then
207:06 - once the loading is set back to false
207:08 - then essentially we display
207:11 - the array of meals and as far as my
207:15 - solution
207:16 - it's going to look something like this
207:17 - or like i said there's going to be a
207:19 - state variable in my case i'm going to
207:21 - call this loading and of course there's
207:24 - also going to be a set lowering function
207:27 - the initial value
207:29 - is going to be false and the notice in
207:31 - the fetch meals the first thing that i
207:33 - do will set loading to true
207:36 - so that's when we start loading the data
207:39 - and regardless whether we're successful
207:42 - or there's an error we sit loading back
207:44 - to false
207:46 - we pass down loading to the entire
207:48 - application so essentially we add it to
207:50 - a value prop and then in the meals
207:53 - i destructure it i say hey grab me
207:56 - loading
207:57 - and right before our current return
208:01 - i go
208:02 - if loading is true
208:04 - so while we're loading what we want to
208:05 - display we want to display section and
208:08 - yes we do need to add a little bit of
208:10 - style so i'm going to set it up as class
208:12 - name section in there i'll set up a
208:15 - heading 4
208:17 - with the text of loading and essentially
208:20 - that's it
208:21 - and of course after that we have our
208:23 - return
208:24 - so the idea is that while we're loading
208:27 - this is what we display
208:29 - on the screen
208:30 - so now let me set this one up or first
208:34 - in the context i want to create that
208:37 - state value and i'll purposely set it up
208:39 - before meals that's just my preference
208:41 - so const
208:42 - and then loading
208:44 - then we also want to go with set loading
208:47 - now the initial value is use state and
208:51 - we want to set it equal to
208:53 - false
208:54 - then in the fetch meals
208:56 - let me call it so set loading
208:59 - is equal to true
209:01 - now let's copy and paste
209:03 - and then at the very end of the logic
209:06 - let me just set it up here as false so
209:09 - we're done with the loading then we want
209:12 - to pass this one down
209:14 - so let's pass in the loading as well
209:17 - and then in the meals we wanted to
209:19 - structure it
209:21 - so let me navigate back
209:23 - to the meals jsx
209:26 - and before or after the meals it doesn't
209:28 - really matter i want to grab the loading
209:30 - and before i return the array of items
209:35 - before i return my cards that have
209:38 - the
209:39 - info about the meal i also want to set
209:41 - up the
209:42 - condition for loading so if i'm loading
209:45 - there's going to be a different return
209:46 - and as a result we'll have that loading
209:49 - displayed while we're fetching the data
209:53 - so near like i said there's going to be
209:54 - a section with the class name of section
209:57 - so we'll have to add a little bit of css
209:59 - as well so let's go here with return
210:02 - then section
210:03 - let's add a class name right away in
210:05 - this case the class name will be section
210:09 - and then inside of it we're going to go
210:12 - with a heading 4
210:14 - and the text of loading data
210:16 - so this is true
210:19 - this return will be displayed and then
210:22 - once this one is set to false
210:24 - then we'll render
210:25 - the array of meals
210:28 - so let's try this out
210:30 - where first i'm going to navigate to a
210:32 - browser let me refresh and if everything
210:35 - is correct we should see that loading
210:37 - displayed on the screen
210:39 - now we still do need to add css so let
210:42 - me just see whether the functionality
210:44 - works and
210:45 - if everything is correct then we'll
210:47 - proceed to css yep i can see the loading
210:50 - displayed and i'll let me navigate back
210:52 - to our application
210:54 - we want to look for app css
210:57 - and we'll have to grab some styles from
210:59 - the section center
211:01 - so that's already a modal i want to look
211:03 - for section center and before the
211:06 - section center i'll create a section
211:08 - class and we'll grab some values here
211:11 - from the section center so we want to
211:13 - take padding with
211:15 - max width as well as the margin
211:18 - and
211:18 - effectively there are two ways how you
211:20 - can set it up so you can just copy and
211:22 - paste the styles or there's another
211:24 - approach if you want to save some lines
211:26 - of code
211:28 - so if you
211:29 - are interested in the other setup we can
211:31 - also add a comma here go with
211:34 - section
211:36 - and center so now we're reusing these
211:38 - styles for both of these classes and
211:41 - then when it comes to section center
211:44 - we just add the extra styles that are
211:47 - not included over here so that's another
211:50 - way how we can set up the logic the
211:52 - result is going to be exactly the same
211:54 - where now we'll have a proper section
211:57 - and in there we'll have that loading
211:58 - condition
212:00 - so before we display
212:02 - the array of meals we'll also display
212:05 - the heading 4 with the text of
212:07 - data.loading and as i said we'll use an
212:09 - extremely
212:11 - similar setup
212:12 - for the condition
212:14 - if we get back no data from the api and
212:18 - i think at this point we can just go
212:20 - back to no throttling and up next let's
212:22 - handle the case if
212:25 - we don't get back any items from the api
212:29 - and i think the easiest way to showcase
212:31 - that is just by navigating to
212:35 - and notice at the moment we're using
212:37 - this all meals url
212:39 - and since we have a search time of a of
212:43 - course it returns
212:44 - some data but what if i type some
212:47 - gibberish over here let's say i'm going
212:48 - to go with five a's let me save it and
212:52 - then if we take a look at the meals app
212:55 - i mean don't see anything on the screen
212:57 - why well because we don't get back any
213:00 - data and the reason for that is because
213:02 - if we take a look at the
213:04 - api we can see that yes if the search
213:08 - matches some results we get back meals
213:11 - array but
213:13 - if
213:14 - the search that we type
213:16 - doesn't match any of the meals then we
213:17 - get back meals as now and if you want to
213:21 - see that just navigate to the api
213:23 - copy
213:24 - the url and just add some gibberish
213:26 - after the text they provided so if i
213:29 - just add s you'll notice that we have
213:31 - here meals no
213:33 - and we need to handle that case
213:35 - especially because eventually there will
213:37 - be a
213:38 - search input so the user will be able to
213:41 - type the search term and we want to
213:43 - display if
213:45 - the search term did not match any of the
213:48 - meals in the api
213:51 - as far as the setup
213:54 - let me find the readme here
213:56 - it's gonna go like this
213:58 - again i'll have to scroll down a little
214:00 - bit
214:02 - we want to go with fetch meals
214:04 - and
214:05 - in the case of success so in the try
214:08 - block we want to check if data meals is
214:11 - truthy basically if it's an array it's
214:14 - going to be evaluated to true in the if
214:17 - condition
214:18 - if it's equal to null then of course
214:20 - it's going to be false if it returns a
214:23 - true basically if it has some value
214:27 - only then we want to
214:29 - go with set meals and then data meals
214:32 - so at the moment we're setting pretty
214:34 - much
214:34 - our state variable regardless
214:37 - but we want to change it we want to set
214:39 - up if else condition and only if
214:42 - data meals
214:44 - returns true then we want to set the
214:47 - state meals as data meals otherwise we
214:50 - want to set it equal to an empty array
214:54 - in the state and then in the meals gsx
214:57 - we want to check
214:58 - if the length is less than one
215:01 - meaning we're checking for empty array
215:03 - and if that's the case again we want to
215:05 - return a section
215:07 - and in there i'll just type some error
215:10 - text
215:11 - now we want to place them in between the
215:13 - loading and the current return again
215:15 - this is very important because we start
215:16 - with loading
215:17 - then we want to display the error if
215:20 - it's there and then we want to return
215:22 - the
215:23 - list off cards and as far as my solution
215:26 - in the try block
215:28 - i'm going to set up if else
215:31 - in here i'll check if data means returns
215:34 - true if it's evaluated to true if that's
215:37 - the case then i'm going to go with set
215:40 - and data meals
215:41 - and if it's false then i'm going to go
215:44 - with set meals and then pass in empty
215:48 - array
215:49 - and then we don't need to pass anything
215:51 - down we're already passing down the
215:52 - meals
215:53 - in the value
215:55 - but in the meals gsx we want to add
215:57 - another condition where we're checking
216:00 - length of the meals if it's less than
216:03 - one same deal we want to return a
216:05 - section
216:06 - and in there we just want to provide
216:08 - some error code and most likely i'll
216:11 - copy this one since i'm too lazy to type
216:14 - it from the scratch but i'm going to
216:16 - worry about it once we get there so
216:18 - first let me showcase how we can also
216:22 - work with multiple files so if we click
216:24 - on this plus we can pick which file we
216:27 - want to display in my case i'm going to
216:29 - go with context and i also want to
216:31 - display
216:33 - of the emails one because that's the
216:35 - current file
216:36 - that we're working in and then back in
216:38 - the context like i said we just want to
216:40 - set up the if and else condition we're
216:43 - doing that in the try block so
216:45 - technically it's not going to be an hour
216:47 - since the api returns a status code of
216:50 - 200 which means that the request was
216:53 - successful
216:54 - it's just there's no data to return
216:58 - so in here let's go with if and then
217:00 - data meals
217:02 - if it's true then we'll set our
217:05 - state variable equal to that if not
217:08 - then we'll go with set meals
217:11 - and we'll just
217:13 - set it as a empty array
217:16 - then let's keep on moving
217:18 - and we want to go to the meals of course
217:22 - and here let's add that second condition
217:24 - we'll say if
217:26 - and then
217:27 - meals length
217:29 - is less than one what do we want to do
217:31 - well we want to basically
217:35 - return a text we just want to change the
217:37 - value over here
217:38 - so let me quickly
217:40 - run back to the
217:42 - readme and i'll grab these values so in
217:45 - here
217:46 - in the meals this is what we want to
217:48 - return so copy and paste and we are good
217:51 - to go so now let's try it out
217:53 - where i'm going to navigate to the
217:55 - application and if everything is correct
217:58 - if you didn't change the search term
218:00 - back to something that returned some
218:02 - items we should see this error message
218:05 - on the screen so now i want to navigate
218:07 - back to the
218:09 - context one
218:10 - and here let's just fix it where i'm
218:14 - going to go back to a now eventually
218:16 - this will be dynamic again that is
218:20 - going to be the case once we add the
218:22 - search input so at the moment once we
218:24 - fix yep everything is correct again we
218:26 - have an array of meals and up next let's
218:30 - work on the search component so in here
218:33 - user will be able to type the search
218:35 - term and if the term
218:38 - matches any meals in the database of
218:41 - course
218:42 - they will be rendered on the screen and
218:44 - also there's this option of clicking on
218:47 - surprise me where we fetch a random meal
218:50 - from the api and we'll start with the
218:53 - structure
218:55 - so first let's just get something on the
218:57 - screen and then we'll worry about the
218:58 - functionality so in the search component
219:01 - the search jsx import use state and use
219:06 - global context now please keep in mind
219:09 - they're not coming from the same place
219:12 - so one is coming from react and the
219:13 - second one is coming from our context
219:17 - then we want to set up a return and
219:19 - don't worry about the css yes it's not
219:22 - going to look pretty but
219:25 - we'll go with header we'll add a class
219:27 - of search container which of course
219:29 - eventually will style in the header
219:32 - there's going to be a form
219:34 - and inside of the form we'll have the
219:36 - input with form
219:39 - input class type text
219:41 - and then two buttons so right after the
219:44 - input we'll have two buttons one with
219:46 - class of btn
219:47 - and type of submit and the second one
219:50 - with the classes of ptm btn hipster and
219:55 - type btn the last thing that i actually
219:58 - forgot to mention over here
220:00 - in the app
220:02 - jsx
220:03 - we want to
220:05 - uncomment this correct
220:07 - so
220:08 - in the app.jsx
220:10 - display
220:12 - search
220:13 - component and once you're ready to see
220:16 - my solution proceed to the next video
220:19 - okay
220:20 - and i think i'm going to start actually
220:22 - with the last step
220:24 - so first
220:25 - i want to go to app.jsx and i want to
220:29 - remove that comment
220:31 - so let me just remove the code and now
220:33 - we should see
220:35 - a search component yep
220:37 - awesome then in the search let's start
220:40 - by importing both of those things the
220:43 - use state and use global context so
220:45 - first let's start with import use
220:47 - state
220:48 - and that one is equal to react so
220:51 - basically it's coming from react then
220:53 - the second one is use global
220:56 - context which is coming from our own
220:58 - context so dot or i'm sorry two dots and
221:01 - then we're setting up the context and
221:04 - then like i said as far as the return
221:06 - we're gonna go with header we'll add
221:08 - right away a class of search container
221:12 - so search
221:15 - container and then inside of it we want
221:17 - to go with the forum
221:20 - so
221:20 - as you can see this is an error it
221:22 - should be header here
221:24 - then let's set up that form component
221:26 - sorry element i guess more properly
221:29 - it's not going to have a class
221:31 - but we will have the input inside of it
221:34 - we'll set the type text
221:36 - and i'll also right away add the
221:38 - placeholder now technically you don't
221:39 - have to but i'm going to go with type
221:42 - then favorite
221:44 - and meal
221:45 - and also we want to add a class name
221:48 - and this is going to be
221:50 - form
221:51 - input let's close it and then we want to
221:54 - set up those two buttons so let's go
221:56 - here with button
221:58 - then type will be submit
222:02 - and as far as the text i'm just going to
222:03 - go here with search and also i want to
222:06 - add a class
222:08 - and it's going to be btn now copy and
222:11 - paste and i'm just going to add
222:13 - btn
222:15 - hipster
222:16 - the type will be
222:19 - good old button
222:21 - so go here with button and as far as the
222:24 - text i think we're gonna go here with
222:27 - surprise me so that should do it for the
222:30 - general structure now let me take a look
222:32 - yep and as you can see we've got a input
222:35 - with two buttons now don't worry we'll
222:37 - work on styles in the next video
222:40 - and the reason why the buttons are
222:42 - styled because
222:44 - the
222:44 - btn classes are already in the global
222:48 - css
222:49 - all right and up next let's style the
222:52 - search component since we have
222:54 - the structure in place and i guess i'm
222:57 - going to start by just changing these
222:59 - files around where first i want to open
223:01 - up a new one
223:03 - and
223:03 - this is going to be app css and then
223:06 - instead of the meals of course this will
223:08 - be a search
223:10 - since this is where we'll do all of our
223:12 - work
223:13 - so as far as the app css
223:15 - we have the mono okay that's good
223:18 - we already styled the meals we're not
223:20 - gonna work with favorites we'll work
223:22 - with search and this is the case where
223:24 - again i'll move this sucker here just so
223:27 - we can see what we're doing and let me
223:29 - close
223:31 - files for now
223:32 - and also maybe let's make this one a
223:35 - little bit smaller
223:37 - and then let's start by just styling the
223:40 - search container so let me grab the
223:43 - class here
223:44 - then i'll add some kind of height it's
223:46 - going to be 5 rems after that we want to
223:49 - go with background which will be equal
223:51 - to the state variable of white
223:54 - then we want to go with display flex
223:58 - so essentially we're setting this up as
223:59 - a flex box and we want to align all of
224:02 - them in the center so we go with align
224:05 - center and or i'm sorry align items
224:08 - line items and that will be equal to a
224:11 - center
224:12 - then we want to
224:13 - also place them
224:15 - in the center horizontally so we'll go
224:17 - with justify
224:19 - and content
224:21 - and that will be equal to a center so
224:23 - once this is saved
224:25 - we want to work with a form
224:28 - so basically now we styled the
224:31 - parent container now let's work with the
224:33 - form now it doesn't have a clash so just
224:36 - go with search
224:38 - container and look for the form element
224:42 - in here we'll add a width and you know
224:44 - what since the values will be exactly
224:47 - the same over here i'll just grab these
224:49 - two so this is going to be the width of
224:51 - container and the max width of container
224:54 - let's save this and then we'll make a
224:56 - form to be a flex parent as well so
224:59 - display flex
225:02 - and let's add a little bit of gap in
225:04 - between the items so 0.5 rms and then
225:08 - also let's go with flex wrap and then
225:10 - that one is equal to a wrap so if
225:15 - the size of the window gets smaller then
225:18 - of course we wrap it to the next line if
225:20 - you want to check it out
225:21 - just make it smaller and you'll see how
225:23 - we nicely wrap to a next line then we
225:27 - want to style the form input so let's go
225:29 - with search container then class of
225:32 - form input
225:34 - and here effectively
225:37 - we want to set up some kind of max with
225:40 - so this is not going to be bigger
225:42 - than in my case 200 pixels we also want
225:46 - to add a little bit of padding so let's
225:48 - go here with padding and then let's set
225:50 - it to
225:52 - 0.375 rms and then 0.75
225:57 - rem's left and right so top bottom and
226:00 - then left and right let's add a border
226:03 - radius
226:04 - or radius
226:06 - and then
226:07 - this will be again a state variable so
226:09 - border radius and i also want to add the
226:11 - background as well as deep border so
226:14 - let's go with background that will be
226:16 - equal again to a state variable
226:18 - with a background color so this will
226:20 - match whatever i have for the body
226:23 - whatever gray color i have for the body
226:26 - it will be the same and then lastly we
226:28 - have a border here
226:30 - where we're going to go with one pixel
226:33 - solid and now i'm looking for one of the
226:36 - gray colors so far
226:38 - iphone hyphen gray
226:40 - and 200 like so so save it
226:43 - and then let's style the button
226:46 - and the placeholder so
226:49 - i mean we can i just style the
226:51 - placeholder first
226:52 - so in here let's say font family equals
226:56 - to inherit
226:58 - so now we're essentially inheriting the
227:00 - value and also let's add a different
227:03 - color so in this case it's going to be
227:05 - equal to bar
227:06 - and i think i'm going to go with gray
227:09 - 400 so just different shade of gray and
227:12 - then lastly let's style the button so
227:15 - we're going to go with search container
227:17 - and then class of btn
227:20 - and let's add a font size a little bit
227:23 - smaller so i'm going to go with font
227:25 - size and then
227:27 - 0.75 rams let's save it
227:30 - and we're pretty much done with the css
227:33 - so now we can jump back to the logic so
227:35 - let me just add a tab in a proper place
227:38 - and we'll continue
227:40 - with the handle submit and handle change
227:44 - logic okay so at the moment we have a
227:47 - good looking search component with the
227:49 - input as well as two buttons but there's
227:51 - no functionality and first i want to add
227:54 - handle change to the input so there's
227:56 - going to be a state value that is
227:58 - persisted between the renders and also i
228:02 - want to handle submit because at the
228:03 - moment you'll notice that once we click
228:06 - on the submit effectively we
228:09 - restart the entire application because
228:11 - that is the default behavior for the
228:13 - form
228:15 - and here are the steps that i'm going to
228:17 - take first create a
228:19 - text state
228:21 - variable
228:22 - and then
228:24 - we also want to set up two functions
228:26 - handle change and handle submit in the
228:30 - handle change we want to grab the
228:33 - event.target.value
228:35 - and please remember that
228:36 - by default it gets the event as a
228:40 - parameter and then we want to set that
228:42 - to a new text value so this one will
228:45 - have the set function and of course we
228:47 - want to pass whatever we get back over
228:49 - here into that set function
228:52 - now once we're done with that we want to
228:54 - add on change to the input and set it
228:57 - equal to
228:58 - the handle change
229:00 - and then when it comes to handle submit
229:03 - again we'll get back the object as a
229:06 - parameter
229:07 - and we'll just set up event prevent
229:10 - default otherwise again we'll have that
229:12 - default behavior where every time we'll
229:15 - click on submit we'll just refresh the
229:17 - application since the default behavior
229:19 - of the form is sending a post request
229:22 - and then we want to add on submit
229:25 - to a form element and set it equal to
229:29 - handle submit
229:31 - okay and as far as my solution so i've
229:34 - got text and set text the state value
229:38 - the initial value is equal to an empty
229:40 - string
229:41 - then i created handle change passed in
229:45 - the event since that's the parameter we
229:48 - get by default settext event.target
229:51 - value and the same deal with handle
229:53 - submit where event comes as a parameter
229:56 - and here i have event prevent default
229:59 - now i forgot to mention in the previous
230:02 - video that also for the input not only
230:04 - we want to set on change
230:06 - equals to a handle change but we also
230:08 - want to pass in the value so value prop
230:11 - and that is equal to a text
230:14 - so as a result we get the controlled
230:16 - input
230:17 - where every time we'll pass something in
230:19 - input the state will be updated and then
230:23 - as a result between the renders will
230:25 - also persist the state value and when it
230:29 - comes to the form we want to go on
230:30 - submit and pass the handle submit at the
230:33 - moment we don't have more logic but it
230:35 - will prevent that default behavior
230:39 - so let's
230:40 - set this one up where first i want to of
230:42 - course navigate back to the search
230:46 - component and then let's set up that
230:49 - state value so we're going to go here
230:52 - with const that's the whole purpose why
230:54 - we grab the use state so we're going to
230:56 - go here with text
230:58 - and set
230:59 - text
231:00 - and then that one will be equal to use
231:02 - state and we pass in the empty string
231:05 - then let's set up those two functions so
231:07 - const
231:08 - and i'm looking for the handle
231:11 - change
231:13 - now i'll grab the event object
231:15 - and then as far as the functionality
231:17 - every time we'll type something in input
231:19 - we're gonna go with set text
231:22 - and we'll pass in the event dot target
231:25 - dot value
231:27 - and also let's set up the handle submit
231:28 - so const handle
231:31 - submit
231:33 - and then same deal we grab the event
231:36 - object now the deal here is to prevent
231:38 - the default servant prevent
231:41 - and then default let's invoke it and now
231:43 - we just want to set up both functions so
231:45 - let's start i guess with a handle submit
231:47 - and we have a special prop for that we
231:49 - go with on submit is equal to a
231:52 - handle
231:53 - and submit the same deal here
231:57 - but we just need to add
231:58 - a value prop as well so let's start here
232:01 - with values equal to a text so now we're
232:04 - grabbing the state value and then on
232:07 - change so every time we'll type
232:09 - something
232:10 - in the
232:11 - input we'll also update the state value
232:14 - since we have the handle change so let's
232:16 - go with on change
232:18 - is equal to a
232:21 - handle change like so let's save it and
232:23 - let's take a look at the application so
232:26 - first let's check the
232:28 - submit notice now when we're submitting
232:31 - we're not performing a default action
232:35 - so we're not sending that post request
232:37 - so that's already a good start since
232:39 - we're not refreshing the application now
232:41 - the second thing is as we're typing
232:43 - we're actually persisting value in the
232:45 - state and if you don't believe me just
232:47 - navigate to the components and then if
232:50 - we navigate to a search component notice
232:52 - the state value and essentially as i'm
232:55 - going to be
232:56 - deleting
232:57 - the gibberish from the input i'll have
233:00 - the same result as my state value okay
233:03 - and now let's set up the search logic or
233:06 - essentially we can type something in the
233:08 - input click on submit and if there are
233:13 - no meals display will display error
233:15 - remember that's the one that we set up
233:18 - in the previous videos but if
233:20 - there are some meals that are matching
233:22 - the search term we nicely display them
233:25 - so now connect the
233:27 - search
233:28 - input with the meals that we are
233:31 - fetching
233:32 - and in order to do that in the
233:33 - context.js
233:35 - first we'll need to create a new state
233:37 - variable
233:38 - in my case i'm going to call this search
233:40 - term and the default value will be empty
233:43 - string
233:44 - then we right away want to combine
233:46 - the
233:48 - all meals url with the search term
233:50 - so
233:51 - prior to this we're all the time using
233:54 - all meals url but remember this is a
233:57 - hard-coded url so now i want you to
233:59 - remove
234:00 - that hard-coded value i believe it's a
234:04 - and then when we invoke fetch meals in
234:07 - the use effect i want you to combine all
234:09 - meals url with a search term
234:12 - then we also want to add search term to
234:15 - a use effect dependency array so every
234:18 - time that value changes we fetch
234:21 - new set of meals every single time
234:24 - then we want to pass the set search term
234:27 - because once we create the
234:30 - state value we also have the function
234:33 - that controls it and we want to pass
234:35 - this one down to
234:36 - entire application now of course in our
234:39 - case we'll grab it in the
234:41 - search jsx so grab this function and
234:44 - then in the handle submit if there's any
234:47 - text
234:48 - in the input then we want to set it as a
234:51 - value
234:52 - for the search term now optionally you
234:54 - can also set text back to empty value
234:58 - but that really comes down to the
235:00 - personal preference
235:01 - as far as my solution i created set
235:05 - search term and search term so that's
235:07 - the state value and that's the function
235:09 - that controls it and then in the use
235:12 - effect
235:13 - i passed in
235:15 - the
235:16 - template literal
235:17 - and i combined all meals url with the
235:20 - search term now keep in mind again we
235:22 - need to remove that hard-coded value of
235:25 - a in the all meals url and i also added
235:29 - search term to the dependency array so
235:32 - every time we'll change the value of the
235:34 - search term we'll perform a new fetch
235:38 - request and the new value of the search
235:40 - term is going to be used then we also
235:43 - want to pass set search term
235:46 - down to entire application so we need to
235:48 - add it to a value prop and then in the
235:51 - search jsx we wanted to structure it
235:54 - we already have use global context so we
235:56 - just grab it from use global context and
235:59 - then in the handle submit i want to
236:01 - check what is the value for the text
236:04 - if it's empty
236:05 - we're not going to do anything however
236:07 - if it has some value we can just go with
236:10 - set search term and pass in the text
236:13 - like i said optionally you can set it
236:14 - back to a empty string when it comes to
236:17 - the text but
236:19 - that really comes down to the preference
236:22 - so let's start in the context.jsx first
236:24 - i guess i want to remove that hard-coded
236:26 - value here in the all meals url so
236:30 - instead of a it's just going to be an
236:32 - empty value
236:33 - then we want to go with a
236:35 - search term
236:37 - search term and then comma
236:40 - set search term set
236:42 - search term and that was equal to a use
236:46 - state and we pass in a empty string then
236:48 - let's keep on moving we're not going to
236:50 - change anything in the fetch meals
236:53 - but we do want to refactor this one so
236:56 - like i said we're going to go
236:57 - with a template literal since now we'll
236:59 - combine both values all meals url with
237:03 - the search term so first let's access
237:06 - all meals url and second let's grab that
237:10 - search term
237:11 - search
237:12 - and term then we want to pass down the
237:15 - function that controls it so let's go
237:17 - with set
237:19 - search term and now let's navigate to
237:21 - the search jsx
237:24 - first we want to grab it
237:27 - so we're going to go here with const
237:29 - we're getting back the object and we'll
237:31 - invoke use
237:32 - global context
237:34 - and let's go here with set
237:38 - search term and now let's set up that
237:40 - condition so if there's any value in the
237:43 - text
237:44 - then we want to go with set
237:47 - search term and we want to pass in the
237:49 - text and optionally like i said i'll set
237:51 - back the text to a empty value so now
237:54 - let's navigate to the application and
237:56 - see what is the result so first let me
237:59 - refresh and let's take a look at the
238:01 - network so notice here how we're
238:03 - basically fetching
238:05 - without any kind of value for search and
238:08 - what's really cool that they do return
238:10 - some default meals that is already a
238:14 - awesome start and now let's try to
238:16 - submit the form so i have here the input
238:18 - i'm typing something and now i click on
238:20 - search now i can see that we set it back
238:22 - to an empty text so
238:25 - technically our functionality works but
238:27 - we're not performing a new request so
238:29 - let me quickly take a look here at the
238:31 - app provider
238:33 - and i can see that i have the value in
238:35 - the search term so now let's see why
238:37 - we're not invoking new fetch request
238:40 - and i think i know why so back in the
238:43 - context
238:44 - i didn't add the search term so this is
238:46 - what happens if we don't add this to a
238:48 - dependency array this will only run
238:52 - the first time on the initial render now
238:55 - in this case though if we add search
238:57 - term then we're good to go
239:00 - because now every time we'll change this
239:02 - value the state value
239:04 - will perform a new request now of course
239:06 - in this case we didn't get anything back
239:08 - so now let me go here and now notice
239:10 - these are going to be all the values
239:12 - with a and then if i type a b
239:15 - these are the values that we're going to
239:17 - get back
239:18 - now
239:19 - as i'm looking at it i think i rather
239:21 - just
239:22 - leave that
239:23 - text
239:24 - the state value for the input so let me
239:27 - quickly now get back over here and okay
239:30 - so this is optional this is up to you
239:32 - and i'm just going to remove it so in
239:33 - this case
239:34 - every time we type and we search for
239:36 - something we'll actually see
239:39 - what
239:40 - we just wrote
239:42 - and we'll be able to make basically
239:44 - modifications so in this case if i go
239:46 - with ad
239:47 - check it out these are the values
239:50 - that i'm getting back and successfully
239:52 - we have set up the search functionality
239:55 - okay and up next let's work on fetch
239:58 - random meal functionality so once the
240:01 - user
240:02 - clicks on the button surprisingly
240:05 - we want to fetch the random meal and
240:07 - here's my solution so in the context jsx
240:11 - i'm going to create fetch random meal
240:14 - and there there's going to be a
240:16 - fetch meals so the same function we
240:18 - already used before
240:20 - we just passed all meals url plus the
240:23 - search term in this case i'll just pass
240:26 - in the random meal url and then i'll
240:29 - pass it down to your entire application
240:31 - effectively i'll set it up in a value
240:34 - and then in the search
240:36 - jsx i will destructure it
240:39 - and for now
240:40 - so change this around actually in the
240:42 - following video because there's gonna be
240:43 - some bugs but for now i simply wanna
240:46 - invoke it
240:47 - once we click on a button
240:49 - so i'm going to set up a on click and
240:52 - i'll pass in
240:54 - fetch random meal and as far as the
240:56 - result it's going to look something like
240:58 - this notice we have all the meals and
241:01 - then once we click
241:02 - check it out we get our random meal
241:05 - so let's set this one up we're in the
241:07 - context.js
241:10 - let me keep on scrolling
241:12 - so i have my use effect
241:14 - um
241:15 - i think i'm gonna do it before the use
241:17 - effect
241:18 - and in here we'll just create that
241:20 - function now the name is really up to
241:22 - you in my case i'm going to go with
241:23 - fetch
241:24 - random
241:26 - meal
241:26 - that's a function and inside of it let's
241:29 - just go with fetch meals and then pass
241:32 - in
241:32 - random
241:34 - meal
241:35 - and url let's save it
241:38 - let's pass it down to the application so
241:41 - fetch
241:42 - random
241:43 - meal
241:44 - let's save that and then in the search
241:48 - we wanted to structure it so fetch
241:50 - random meal
241:52 - and probably at this point just copy and
241:55 - paste
241:56 - since it's gonna be faster
241:58 - and then where i have the surprise me
242:01 - button
242:02 - i'll add on click
242:04 - and we'll pass in the fetch random meal
242:07 - and now let's try it out
242:09 - so i'm gonna go here to the application
242:12 - click and yep we're getting the random
242:14 - meal and again the cool thing
242:17 - is that
242:18 - when it comes to the api
242:20 - the structure is the same yes we're
242:22 - getting only one meal
242:25 - but since it's set up in array we don't
242:27 - need to change anything here in the
242:29 - function in the
242:31 - fetch meals function we still get back
242:34 - to data
242:35 - and in there we have meals array and now
242:37 - we just set that meals right that one
242:40 - random meal equal to our meals state
242:43 - variable and then eventually of course
242:46 - we
242:46 - display it on a screen now there are
242:49 - some bugs
242:50 - and we'll fix them in next video but the
242:54 - general structure works yes we can fetch
242:57 - random meals once we click on the
243:00 - surprise me button so our basic
243:02 - functionality works as expected however
243:05 - like i mentioned at the end of the
243:06 - previous video
243:08 - we actually have a bug in our code and i
243:12 - think it's going to be easier to
243:14 - showcase it because i actually didn't
243:17 - pay attention that in the search jsx
243:20 - i
243:21 - still have the code to basically wipe
243:24 - the value and effectively the bug is
243:26 - following search term you know the one
243:28 - that we're using
243:29 - to pass it into the all meals url
243:32 - actually has the value
243:34 - and i actually want to wipe it so let me
243:36 - showcase the bug first let's imagine the
243:39 - user comes to application and we serve
243:42 - the meals that we get back if the search
243:45 - term is empty and let's say he or she
243:49 - searches for the meals
243:52 - with the search term of d okay awesome
243:54 - and then we go with surprise me so
243:57 - technically functionality works but if i
243:59 - take a look at the developer tools more
244:01 - specifically i'm looking for components
244:03 - and then the app provider notice here
244:06 - the value of d so that value is still
244:08 - here and that might be misleading since
244:11 - if the user comes here and types d
244:13 - notice nothing is changing why well
244:15 - because
244:16 - we only fetch new meals if the value
244:19 - changes and in our case we already have
244:21 - this d
244:22 - and let me just double check the name
244:25 - so we're looking for this search term so
244:27 - that's the one that's not changing now
244:30 - how we can fix that well
244:32 - what we could do in the search jsx we
244:35 - could set up a new function
244:37 - we can create handle random mule and in
244:40 - there we'll set this one
244:42 - to empty remember that's the one that
244:44 - we're using over here
244:45 - and we'll also set the set text to be
244:48 - empty
244:49 - and lastly
244:50 - we'll
244:51 - invoke the fetcher in the mill now
244:54 - there's gonna be another bug
244:57 - but first let's fix this and then we'll
244:59 - worry about that one
245:00 - so now i want to go to search
245:03 - jsx
245:04 - and like i said first
245:06 - i want to set up that handle random
245:09 - so before the return let's create
245:11 - another function so const handle
245:14 - random meal that's my function and here
245:17 - let's invoke a few things now in order
245:19 - to speed this up i'll just copy and
245:21 - paste so we have search term that one i
245:23 - want to set equal to an empty string
245:27 - the settext also is going to set it
245:30 - equal to an empty string and now i want
245:32 - to go with fetch and i believe it was
245:34 - random meal let's invoke this but now we
245:37 - want to change this around where
245:39 - it's not going to be fetch random meal
245:41 - we'll actually look for handle
245:43 - random meal let's pause that one and now
245:47 - notice that yes we nicely wipe out all
245:50 - the values but the problem is going to
245:52 - be that
245:53 - we set up another request and let me
245:56 - showcase that so again let's start from
245:59 - the scratch
246:00 - i'll just wipe it clean then i'll type d
246:03 - okay so we search for the meals then we
246:06 - go
246:07 - with the
246:09 - run the meal and technically everything
246:11 - works but i don't see the random meal
246:13 - now why is that well if we take a look
246:15 - at the network
246:17 - we can see that we're making two
246:18 - requests right now
246:20 - we have one for random and one for
246:22 - search now why is that well let's take a
246:25 - look at our code
246:27 - what are we doing here
246:29 - we're setting the search term
246:31 - back to nothing
246:33 - now why is that important well because
246:36 - we invoke this use effect every time
246:38 - this value changes
246:40 - so we fetch the random meal
246:43 - it's over here in the function
246:45 - but we also perform another fetch meals
246:48 - with the all meals url
246:50 - and here's the fix so first
246:54 - you want to set up another use effect
246:57 - in the context.jsx so this is going to
247:00 - serve the moment application loads
247:04 - at the moment application loads we get
247:06 - all males url with empty search them
247:09 - that's going to be again only
247:11 - when the application loads that's it
247:14 - now after that we'll set up another use
247:16 - effect and this is a good side note
247:18 - where you can have as many use effects
247:20 - as you want in your application you're
247:22 - not limited to one that's why i
247:24 - purposely fixed bug this way because i
247:27 - want to showcase that yes you can have
247:29 - multiple use effects
247:30 - now in the second use effect i actually
247:33 - want to check hey
247:35 - is there a value in the search term if
247:37 - not then just return what does that mean
247:40 - well
247:41 - that means that this functionality is
247:42 - not going to run
247:44 - now why is that important because if i'm
247:46 - not going to have this
247:48 - second use effect the first one
247:51 - then initially we're not going to get
247:52 - any meals because remember this is an
247:54 - empty value however now
247:56 - we fix both issues initially we get
248:00 - all meals url and then second every time
248:03 - we change the value we still check
248:06 - what is that search term if it's empty
248:08 - then nothing so that fixes our random
248:12 - meal bug so let's try this one out where
248:15 - in the context.jsx i have my first use
248:18 - effect and
248:20 - that's awesome we'll still have to add a
248:22 - little bit of code over there for now
248:24 - what we want to do is create another one
248:27 - and you know in order to speed this up
248:29 - i'm just going to copy and paste like so
248:31 - and here let's just remove the search
248:34 - term
248:35 - and rest of the functionality stays the
248:38 - same
248:39 - i mean
248:40 - technically we can actually remove the
248:42 - search term
248:44 - there's no need
248:45 - we can just go with all
248:47 - meals url and just to reiterate the
248:51 - value for the search term is empty but
248:54 - the cool thing is that the api still
248:57 - returns the emails and then in the
248:59 - second one we want to set up the
249:00 - condition where we want to go if there
249:03 - is no
249:04 - search term
249:06 - then we want to go with return
249:08 - and otherwise we want to call this and
249:10 - lastly in the search jsx i actually want
249:14 - to remove
249:15 - this one
249:16 - i want to leave the text
249:18 - that
249:19 - currently is displayed basically i want
249:21 - to display the search term so the user
249:24 - can see
249:25 - so let me navigate back again let me
249:26 - refresh notice how on the initial load
249:29 - we still display
249:32 - nicely all the meals okay that's awesome
249:34 - then let's say we're gonna go
249:37 - for the search term of f
249:39 - so we get the meals okay beautiful but
249:41 - once we click on surprise me first of
249:44 - all we get that one meal
249:46 - second if we take a look
249:49 - at the provider we'll see that this is
249:51 - empty so that actually matches whatever
249:53 - we have in input and lastly if we take a
249:56 - look at the network now we only
249:59 - have one request now we have only the
250:02 - random one
250:04 - awesome and with this in place now we
250:06 - can move on to the next step all right
250:09 - next let's work on the modal component
250:13 - and in the complete application it's
250:15 - going to look something like this where
250:17 - we can click
250:18 - on the image
250:20 - on one of the meals that we display
250:24 - effectively in the emails component
250:26 - check it out now we have that one
250:27 - specific meal
250:29 - and also we can click on one of the
250:31 - favorites one
250:32 - um it's also going to be displayed in
250:35 - modal and for now we'll just worry about
250:38 - rendering something on the screen
250:40 - because
250:40 - as we can see
250:42 - we don't even have the component
250:45 - and first
250:47 - i want to set up a
250:49 - return in the model jsx
250:52 - and yes we'll style these classes right
250:54 - away and you'll see in a second why
250:56 - because they are effectively responsible
250:59 - for
251:00 - most of the css features
251:03 - so the dark background and then the
251:05 - white color and all that so yes we'll
251:08 - basically style them first
251:11 - then i want to set up a state
251:15 - variable in the context.jsx i'm going to
251:18 - call this show model and set show model
251:22 - and the initial value is going to be
251:24 - false
251:25 - now yes
251:26 - eventually
251:28 - we'll control this once we click
251:31 - on the image here or on the image in the
251:33 - favorites but for now i just want to
251:35 - showcase how the logic is going to work
251:38 - and we want to pass this down the show
251:40 - model one
251:42 - and then in the app jsx remember we're
251:45 - not even rendering the model yet but we
251:48 - want to right away grab the show model
251:50 - now don't worry about the favorites
251:52 - actually this is an extra which
251:53 - shouldn't be in your readme so that one
251:55 - is coming up but in here we want to grab
251:58 - show model and of course we
252:00 - first need to import the use global
252:02 - context invoke it get the show model and
252:05 - display model only only if the value is
252:08 - true and for now we'll just toggle it
252:10 - manually just so you can see
252:12 - the basic functionality so first let me
252:14 - go to a search
252:16 - and let me change this around to a modal
252:19 - and then as far as the return like i
252:21 - said i'm gonna go with few classes that
252:23 - will
252:24 - style first
252:26 - and you know what also let's grab that
252:30 - use context let me see over here
252:32 - this sucker over here since we'll use it
252:34 - in multiple places
252:36 - we might as well copy it here
252:38 - so copy and paste so use global context
252:42 - eventually
252:43 - we will actually invoke it but not for
252:45 - now
252:46 - and let's go with aside
252:48 - then let's add a class name
252:51 - last name now will be equal to modal
252:54 - overlay as a signal that's the dark
252:56 - background that you see
252:58 - in the complete application and there's
253:00 - also tiny bug over here this should be a
253:03 - side
253:04 - and then
253:05 - inside of this element we're going to go
253:07 - with div
253:09 - and then
253:10 - we'll have a class name of
253:13 - modal container
253:14 - model container so that's
253:17 - the div with the white background where
253:19 - we'll see the image and all of the data
253:23 - about the meal and for now let's just
253:24 - say here a roll container or you know
253:28 - temporarily i'll add a heading 1 and
253:30 - i'll say modal container just so we can
253:32 - see it better
253:34 - all right so let's save this
253:36 - and then
253:37 - we want to go to the context we want to
253:39 - create that state variable
253:43 - i guess i'm going to do it right after
253:45 - the search term over here so const
253:47 - we're looking for show model
253:51 - then set show model so this is the
253:54 - function that we use to call it
253:56 - programmatically and as far as the
253:58 - initial value you know it eventually it
254:00 - will be false but since i want to
254:02 - showcase
254:03 - the modal i'll set it temporarily
254:06 - equal to true let's keep on moving
254:09 - then we want to pass down the show
254:12 - show model and we want to jump back to
254:15 - app jsx
254:17 - first we want to get
254:19 - the global one and again this is going
254:22 - to be the case where i'll just copy and
254:24 - paste i don't want to type it from the
254:25 - scratch so
254:27 - model here we just need to change the
254:29 - path of course so
254:30 - app jsx import and then
254:33 - it's in the same folder so it's only one
254:36 - dot
254:37 - then we want to grab the value the show
254:41 - model here so const
254:43 - show model and then that one is equal to
254:46 - huge
254:47 - global
254:48 - context let's invoke that and then where
254:50 - we have the modal at the moment we have
254:52 - comment around
254:54 - so we want to uncomment that but we will
254:56 - right away want to set up the condition
254:58 - we want to say only if show modal is
255:00 - true
255:01 - then
255:03 - so that's the end operator then we
255:05 - display the model so let me place it
255:07 - here and now let's see what we have
255:09 - since the value
255:11 - is true
255:12 - we should
255:13 - see right away model and now let me
255:15 - switch back to the context because
255:18 - that's the file where we'll be setting
255:19 - up most of the logic let me go back over
255:22 - here
255:23 - notice i have the model container why
255:25 - well because the value is true
255:27 - if i change this around in the context
255:29 - and if i set it equal to false
255:33 - where it is where it is over here if i
255:35 - set it equal to false
255:37 - bam we cannot see the modal nothing
255:40 - so we don't display the model so that's
255:43 - the basic structure for the model where
255:46 - we have the
255:48 - boolean state
255:49 - true or false and depending on that
255:51 - value
255:52 - we display or hide the model okay and up
255:56 - next let's work on the css
255:58 - so our modal
256:00 - actually looks
256:02 - more
256:03 - like this
256:05 - than what we have right now so at the
256:07 - moment we just have a heading one and
256:10 - yes i know i've said this already twenty
256:12 - thousand times but let me repeat
256:15 - one more where if you copied
256:17 - the entire css you don't need to do
256:20 - anything you can switch to a next video
256:22 - in my case i'm going to open up a new
256:24 - file
256:25 - and
256:26 - somewhere here i'm actually looking
256:28 - for the css one and the app.css is not
256:32 - coming up in my reset ones but
256:34 - we can always search for it like so and
256:37 - then let's keep on moving
256:40 - and if i remember correctly modal was
256:42 - the last one so let's work on those two
256:45 - classes
256:46 - and let me set it side by side right
256:48 - away
256:50 - like so
256:51 - and here let's first worry about the
256:54 - modal overlay so that's that dark
256:57 - background that we have
256:59 - the class is modal over
257:01 - lay
257:02 - and here let's set up position first of
257:04 - all
257:05 - fixed
257:06 - so it's going to be taken out of the
257:08 - normal flow then we right away need to
257:10 - add the coordinates in my case i'm gonna
257:13 - go with top
257:14 - zero and left
257:17 - zero so it's going to be
257:19 - all the way on the top on the left hand
257:22 - side then i want to set it width to be
257:24 - 100 and height to be 100 so effectively
257:27 - i want to take it up all of the screen
257:30 - with
257:31 - 100
257:32 - and
257:33 - height also 100
257:36 - and then we want to go with some kind of
257:37 - background so that's where we'll set up
257:39 - that dark background bang on property
257:41 - and i'm just going to go with rgba
257:43 - because
257:44 - the opacity value is a cool one that
257:47 - allows us to control how dark it is so
257:49 - for example in your case if you want it
257:52 - lighter then just change the last value
257:54 - the opacity in my case i'm going to go
257:56 - with 0.85
258:01 - let me add here a colon so that's our
258:04 - modal
258:05 - and then effectively
258:08 - when it comes to
258:09 - the overlay i want to set it as css grid
258:14 - and place
258:15 - the items meaning
258:17 - our container in the center
258:20 - so i want my overlay to take up
258:23 - all of the screen but the items i want
258:26 - in the center that's why right after the
258:28 - background we'll set it up as display
258:31 - grid
258:32 - we'll also use the place items and
258:35 - center and as you know this is a cool
258:37 - property that allows us to combine align
258:40 - items as well as the justify content
258:44 - so instead of writing two lines of code
258:46 - you can write one then transition and i
258:49 - guess we'll have to write it here so
258:51 - transition that just can signals that
258:54 - the change is going to happen over time
258:57 - and we're going to go with var and then
259:00 - transition
259:02 - just this variable and then lastly we
259:05 - want to add the z index just in case
259:08 - there's some other elements that are
259:09 - taken out of the flow
259:11 - and we just want to place it on top of
259:13 - them so arbitrarily i'm just gonna go
259:16 - with hundred and now let's work on that
259:18 - model container and as you can see we
259:20 - already have the text technically in the
259:22 - center so
259:23 - this should give us a good idea how it's
259:26 - going to look like now let me select the
259:28 - class model container
259:30 - i'm going to go with
259:32 - width of 80 percent of the screen width
259:36 - and you know what let me add right away
259:38 - a background because it's going to be
259:40 - easier to see and we're going to go with
259:41 - the white
259:42 - so now we should see our model container
259:46 - then right after the width i'm going to
259:47 - go with max width so on a small screen
259:49 - it's always going to be 80 percent
259:52 - of the screen width now i don't want
259:55 - that model to be bigger than
259:57 - 800 pixels as far as the width now
259:59 - height always is going to be
260:03 - 80 view widths i'm sorry view height
260:06 - that's more proper so view height and
260:09 - then i know that
260:12 - the content
260:13 - is actually going to overflow
260:15 - i mean again if we take a look at this
260:17 - notice in here technically it didn't but
260:20 - if we take a look at the big mac notice
260:23 - so there is an image on the top and
260:25 - there's also
260:26 - the cooking instructions
260:28 - so now for sure that
260:30 - the content inside of it will
260:32 - overflow and that's why we need to go
260:34 - with overflow and just decide how we
260:37 - want to deal with that in my case i'm
260:38 - going to go with scroll and lastly let's
260:41 - go with that border radius just so we
260:43 - can have those nice rounded corners so
260:46 - border
260:47 - radius and we'll set it equal to var and
260:50 - then css variable
260:52 - with the value of poor radiators and
260:55 - we're pretty much good to go we have set
260:57 - our basic styles so now we can continue
261:00 - with the functionality beautiful and up
261:03 - next let's decide how we can pass the
261:05 - meal
261:07 - into the
261:08 - model so at the moment we just have a
261:10 - dummy content
261:12 - but of course
261:14 - eventually we'll have the functionality
261:16 - where once we click
261:17 - on any of the meals that we have here or
261:20 - any of the meals that we have in the
261:22 - favorite
261:23 - the data about the meal is going to be
261:26 - passed into a model and will correctly
261:29 - display and as far as the setup
261:33 - first
261:34 - i will create a selected meal and set
261:38 - selected meal
261:39 - in the context.js so again we're
261:42 - creating new state variable and initial
261:45 - value is going to be no
261:48 - then we want to set up a function
261:51 - that is going to be looking for two
261:53 - things
261:54 - the miele and also is it a favorite meal
261:58 - now we don't need to worry about this
262:00 - parameter for now
262:01 - we don't have the logic for it yet but
262:04 - eventually yes we need to keep in mind
262:06 - that we have two places where we have
262:08 - meals
262:09 - we have the favorites and also we have
262:11 - just a regular list so yes there's going
262:14 - to be a flag whether it's coming from
262:16 - favorites or is just a regular meal
262:20 - and then we want to
262:21 - look for the meal using the find method
262:25 - and we want to look where in all the
262:26 - meals
262:27 - in our state variable so if we remember
262:30 - here we have meals and then once we
262:33 - fetch those meals
262:35 - we set meals equal to whatever
262:38 - is the array we're getting back
262:41 - from the api correct
262:43 - so now we want to grab the
262:45 - meal id
262:47 - then we want to use it to get
262:49 - the meal in the array
262:51 - and we want to set it equal
262:54 - to our selected meal
262:56 - state variable and also
262:58 - we want to showcase the model
263:00 - now what was the
263:02 - function that was set show model then we
263:06 - want to make the select meal and
263:08 - selected meal available to rest of the
263:11 - application so we want to pass it into a
263:14 - value
263:15 - and then back in the meals
263:18 - we want to grab select meal so that's
263:21 - the function over here the select meal
263:23 - and then we want to invoke it
263:26 - once we click on the image so we want to
263:29 - add on click and pass in the id
263:32 - and i'll talk about why we need over
263:35 - here this arrow function again
263:37 - few things state variable the function
263:40 - we want to pass both of those values
263:42 - down so selected meal so this is what
263:45 - we're going to use in the model and
263:46 - select meal
263:48 - which we'll invoke
263:50 - in the meals so
263:52 - let's go step by step first let's create
263:55 - that state
263:56 - variable
263:58 - and in my case i'm going to call this
263:59 - selected
264:01 - meal so effectively what meal we have
264:03 - selected
264:04 - set selected
264:06 - meal now that is equal to use state
264:10 - and by default let's set it equal to no
264:13 - so by default it's not going to have any
264:16 - value but i also want to change this one
264:18 - around where it's going to be false
264:20 - so by default we're not going to display
264:23 - the model
264:24 - let's come up with that function
264:27 - and i think i'm going to do it right
264:28 - after the random one so let's create it
264:32 - const select meal
264:35 - and here the function is looking for two
264:37 - things for id meal effectively that is
264:41 - the meal id i'm just using the same
264:44 - property name as it comes from the api
264:46 - because that way it's going to be easier
264:49 - to understand at least in my opinion
264:50 - then we want to go with favorite meal
264:53 - which is a boolean value but at the
264:55 - moment we don't really care about it
264:58 - and we're going to go with let meal so
265:00 - initially it's nothing that value
265:02 - but we want to go with meal and then
265:05 - meals fine now why we're going the long
265:08 - way because there's going to be an if
265:10 - condition so for now yes there's only
265:12 - one possibility where essentially we'll
265:15 - just use this id meal and we'll get the
265:17 - meal from our array again we'll get the
265:21 - meal from our meals array
265:24 - so let's go with find method
265:26 - and
265:27 - pass in the callback function i'll
265:29 - reference each and every meal there as
265:31 - meal and i'll say get me the meal
265:34 - whose id
265:36 - matches
265:37 - the id meal basically whose property is
265:40 - exactly the same so id meal is equal to
265:43 - id meal that we're passing in and then
265:46 - let's set up two more functions first
265:48 - let's go with set
265:50 - selected meal
265:51 - so this is the meal display in a modal
265:54 - that's where we pass this value and
265:56 - second
265:57 - we want to open the model correct so set
266:00 - show model and let's set it equal to
266:03 - true
266:04 - let's save that and now we want to pass
266:06 - down two things
266:08 - we want to pass down the selected meal
266:11 - and we want to pass down the select meal
266:14 - so let's look for the value
266:17 - selected
266:19 - selected meal
266:21 - and we also want to go with select
266:24 - meal and now we want to navigate to
266:27 - bum bum bum bum
266:29 - css
266:31 - even though we will use it later
266:33 - we want to navigate to the meals we want
266:36 - to
266:36 - grab
266:38 - select
266:39 - meal
266:40 - and then let's look for the image
266:43 - now let's shall we destructure the
266:45 - idemill correct when we iterate over our
266:49 - so now we can just grab this value and
266:51 - pass it into a function now let me first
266:54 - showcase
266:56 - what is going to happen
266:58 - essentially
267:00 - if
267:00 - we don't pass in the callback function
267:03 - because this is the question that i
267:04 - pretty much get all the time as far as
267:07 - react so let's go over here and let's
267:09 - say
267:10 - select
267:11 - meal
267:13 - and let's pass in the id
267:15 - meal like so
267:17 - let me save it and you know what for
267:20 - time being
267:21 - let me just add a console log just so we
267:23 - can see that we have called this
267:24 - function
267:25 - because effectively it's going to be
267:27 - invoked right away and that's not what
267:29 - we want we want to invoke it only when
267:31 - we click on email so let me try here
267:34 - uh hello let's see let me save the
267:36 - application which you'll notice
267:39 - that first of all we'll open up the
267:40 - model right from the get go because
267:42 - that's the logic and also we'll have
267:44 - these
267:45 - 25
267:46 - meals
267:48 - now why do we have that
267:50 - well
267:51 - simply because like i keep saying
267:54 - if
267:55 - we set up the function this way we
267:58 - invoke it right away so the moment
268:01 - application loads the moment we display
268:03 - the meals we invoke it but that's not
268:05 - what we want to do we want to invoke it
268:09 - only once we have clicked on it and the
268:11 - solution for that is following where we
268:13 - want to go with a arrow function and
268:16 - then we want to set up this function as
268:18 - the return from the arrow function
268:21 - and as a result you'll notice that
268:23 - everything works as expected so we get
268:26 - our array of meals
268:28 - and only once we click on it we shut
268:31 - that selected meal again the reason why
268:33 - i'm spending so much time on this
268:34 - because this is
268:36 - probably
268:37 - top three questions i get why
268:40 - we set up this arrow function simply
268:42 - because if you don't have the arrow
268:43 - function you invoke it
268:46 - right away and that's not what you want
268:47 - to do you want to set this one up as a
268:50 - return from the arrow function so
268:52 - initially this arrow function runs
268:54 - returns this function and then we invoke
268:57 - select meal passing the id only
269:01 - only
269:02 - once we click on the image let me also
269:06 - do one more log in this case i'm going
269:08 - to go with
269:09 - id email just so we can see that we're
269:11 - passing in that value so let me go back
269:14 - to my application first of all you'll
269:16 - notice that
269:17 - we'll display
269:18 - the modal because remember we go with
269:21 - set
269:22 - show model and we set it equal to true
269:24 - so bam check it out we right away
269:27 - display them all and also
269:29 - we'll have here the id now we don't have
269:32 - a way how we can close the model so
269:34 - that's why i mean it's just going to be
269:36 - sitting there right now but lastly in
269:38 - this video i just want to showcase that
269:40 - if you go to components
269:44 - you should also see
269:46 - this one
269:47 - what is this that's the meal that we
269:49 - selected how do i know that well because
269:51 - the idea is exactly the same
269:53 - so that's the state value the selected
269:56 - meal one initially it was no and now
269:59 - it's actually equal
270:01 - to the meal
270:02 - that we selected
270:04 - all right and up next let's render the
270:06 - meal
270:07 - that we have selected
270:09 - and also let's set up the close model
270:11 - functionality
270:13 - now
270:14 - dcss will add in the following video so
270:17 - if it looks somewhat ugly during this
270:19 - video
270:21 - i mean it is what it is the most
270:23 - important thing
270:24 - uh is to get
270:26 - the data
270:28 - on the screen so i want to showcase
270:31 - which meal we have selected and i also
270:33 - want to close the model and then we'll
270:35 - worry about the styles so first in the
270:38 - context.jsx and for some reason i
270:41 - have context
270:43 - and most likely i'll have to fix it in
270:45 - multiple places but again that's my
270:47 - problem
270:48 - we want to create close model and in
270:50 - here we'll go with set show model and
270:52 - we'll set it equal to
270:54 - false now we'll pass it down to a
270:59 - application so add that
271:01 - into the value and then in the modal we
271:05 - want to grab two things
271:06 - we want to grab selected meal like i
271:09 - mentioned in the previous video
271:11 - so select meal we
271:13 - utilized it in the meals
271:16 - now selected meal
271:17 - will utilize it in a modal
271:20 - so grab both of those things close model
271:22 - and selected meal we'll destructure
271:24 - again a bunch of properties out of it so
271:27 - image
271:29 - title instructions as well as the
271:32 - original source
271:33 - and then we'll work on our return
271:36 - and all the way in the bottom there's
271:38 - going to be a button
271:39 - that allows us to close the model so
271:43 - let's start working on that one
271:46 - i guess
271:47 - first let's go to a context one
271:51 - and we want to create
271:54 - the closed model function
271:56 - so again i'm going to do it before use
271:59 - effects
272:00 - and it's really up to you where you want
272:01 - to do it so close model
272:05 - and as i said yes of course you can pass
272:06 - in set show model but
272:08 - i always prefer just setting up the
272:10 - function
272:11 - makes a bit more sense to me so set
272:14 - show
272:15 - model we want to pass in as false
272:19 - of course because we're closing the
272:21 - model let's add a comma
272:23 - close model
272:25 - and
272:26 - we're already passing rest of the stuff
272:28 - so we don't need to worry about it after
272:30 - that we want to go to a model
272:33 - and we want to invoke that use global
272:36 - context and we want to grab two things
272:38 - we want to get the selected meal again
272:41 - this is the meal that we want to display
272:43 - this is the meal that we set once we
272:45 - click on those images and second we want
272:47 - to grab close
272:49 - and modal and that is equal to use
272:52 - global context let's invoke that and
272:54 - we're good to go
272:56 - then let's destructure it
272:58 - because we actually want to display it
273:00 - and you know what let me just mess
273:02 - around a little bit let's set up a
273:04 - button here just so we can close it
273:06 - let's write closed and let's set up on
273:08 - click now in this case we don't need to
273:10 - invoke it meaning as a arrow function we
273:13 - can simply go with close model since
273:15 - this is a reference again we're not
273:17 - invoking when you're invoking that's
273:19 - when you need to set it up as an arrow
273:21 - function now we don't invoke we pass it
273:23 - as a reference and then
273:26 - you know what let me just display the
273:28 - title just so we can see that we're
273:30 - getting that exact meal and this is also
273:33 - something that i suggest doing when
273:35 - you're building the application
273:37 - try to do it step by step
273:39 - um if you'll set a bunch of logic and
273:42 - then it turns out that you have a bug
273:44 - somewhere else this is going to be very
273:46 - painful to go and pack so that's why i
273:48 - always like to do it step by step
273:51 - where
273:52 - first i just display the title see that
273:54 - i'm actually getting the correct meals
273:56 - and then i proceed to the structure of
273:58 - more properties so in here i simply want
274:00 - to go with selected meal so for time
274:02 - being i'm not going to structure it i'm
274:04 - just going to look for the entire object
274:07 - and we're going to go with dot and i
274:10 - believe the
274:11 - value is
274:13 - sdr meal and now let's try it out what
274:15 - do we have
274:17 - let me refresh just so everything is up
274:19 - to date yep that's the meal that i
274:21 - selected i can clearly see that and i
274:24 - can close the model and the next one
274:26 - next one
274:28 - and i can clearly see that my initial
274:30 - functionality works so now it's just an
274:32 - easy part
274:34 - where we wanted to structure it
274:36 - and that is coming from
274:38 - selected
274:40 - meal
274:41 - and then one by one let's grab those
274:43 - properties again we do want to get the
274:46 - image so this one is that annoying one
274:49 - thumbnail that is equal to an image now
274:52 - sdr meal equals to title in my case
274:56 - then instructions and as i say not again
274:59 - if you want to
275:01 - see all the properties that are there in
275:03 - the object either you can log it here in
275:05 - the model
275:07 - or you can simply go to developer tools
275:09 - more specifically
275:11 - to
275:12 - our components and analyze it so let's
275:15 - go here with instructions
275:18 - set it equal to text and then lastly
275:21 - source
275:22 - and effectively this is the original
275:25 - uh kind of resource
275:27 - so let's
275:29 - keep moving
275:30 - we're not gonna have the heading one
275:32 - here and actually button
275:33 - [Music]
275:35 - the button is going to be
275:36 - another div
275:38 - so for now let's just leave it the way
275:39 - it is
275:40 - so first in the container we want to set
275:43 - up a image
275:45 - so let's go with img source
275:47 - and then image and i'll say not yes i
275:49 - know that i'm not setting up the
275:51 - alternative attributes and maybe you
275:54 - know let's change it let's pass here the
275:56 - title
275:57 - and you can also do that in the meals
276:00 - my apologies i forgot when i was setting
276:01 - up the meals
276:03 - so let's go here with a class names
276:07 - and we want to set up img and modal img
276:11 - so this is the global class and this is
276:12 - the class which we're going to style
276:15 - in the following video then right after
276:17 - the image we want to set up another div
276:20 - with a class name of modal content
276:24 - modal content and we want to place that
276:26 - button inside of it
276:28 - yes it's going to be all the way on the
276:29 - bottom but
276:30 - different div
276:31 - then let's go with heading 4
276:34 - we're going to look for the title
276:37 - after that we want to go with a
276:38 - paragraph and we're just going to say
276:41 - cooking instructions and then let's set
276:43 - up another paragraph with a text
276:46 - so let's look for the text over here and
276:49 - lastly we have that original source so
276:52 - for that we're going to go with an href
276:55 - attribute we'll pass in source
276:57 - and i also want to open it up in a new
277:01 - browser tab so therefore i'm going to go
277:02 - with target and then underscore
277:05 - black again this
277:06 - is effectively a html attribute so let's
277:10 - pass here
277:12 - the value for our link
277:14 - and that is going to be original source
277:17 - and let's see how bad the css looks let
277:20 - me navigate here
277:22 - again i'm going to refresh
277:24 - so
277:25 - everything is up to date and then let me
277:27 - click on this one and there is a issue
277:30 - okay so select meal is not defined
277:35 - okay that's interesting so select meal
277:37 - is not defined modal jsx
277:39 - probably i just messed it up as far as
277:42 - the name so let me go here and yeah of
277:44 - course
277:45 - it's selected meal my bad see how easy
277:49 - it is to make
277:50 - a silly mistake let's try one more time
277:53 - and yeah i mean it looks ugly correct
277:56 - but as long as we can see all of the
277:58 - items so the image the title the cooking
278:02 - instructions as well as the original
278:04 - source we're good to go
278:06 - because we'll set up the styles in the
278:08 - following video and as far as that
278:10 - target blank check it out once we click
278:12 - on it
278:13 - we navigate to
278:15 - the original resource essentially where
278:19 - the
278:20 - recipe is coming from
278:23 - not i also noticed that in a context i
278:25 - still have that log so let me remove
278:27 - that sucker and just like that we're
278:29 - done with the functionality of
278:32 - displaying the selected meal as well as
278:35 - closing the model
278:37 - so up next let's style our model
278:42 - so it looks a bit more presentable okay
278:45 - and up next let's work on the styles
278:48 - so at the moment
278:50 - we have all the functionality but
278:53 - it definitely
278:54 - can look better
278:56 - and
278:57 - i'm going to start by navigating to the
279:00 - app css
279:02 - yep over here we're looking for the
279:06 - model which i believe was the last one
279:08 - and
279:10 - we want to style the image first then
279:12 - let me grab it here just so we can see
279:16 - right away the result and i'm going to
279:18 - start by targeting the image the modal
279:22 - img and i want to add some kind of
279:24 - height so it's always going to be 15
279:26 - rams now
279:28 - of course that is up to you you can make
279:30 - it smaller bigger
279:32 - uh that is essentially irrelevant
279:35 - then we want to add the borders for the
279:38 - image
279:39 - because at the moment we just have for
279:41 - the container
279:43 - so in my case i'm going to look for
279:44 - those properties here
279:47 - so board top left and border top right
279:50 - let's copy and paste that
279:52 - essentially it's going to be faster then
279:54 - for a modal
279:55 - content
279:57 - first let's select the class then let's
279:59 - add
280:00 - a padding one rem's top bottom and then
280:03 - 1.5
280:04 - left and right
280:06 - then for the content effectively for
280:09 - those paragraphs i want to add the great
280:11 - color
280:12 - model content and then paragraph
280:15 - and that is going to be gray 600 that's
280:17 - the value color var
280:20 - css variable gray
280:23 - and then
280:24 - we're looking for 600
280:27 - after that we want to style the link
280:31 - so this one over here the original
280:33 - source and also the close button and you
280:36 - know what i think
280:38 - i think
280:39 - there's a button missing
280:41 - and yep so it's actually btn b10 hipster
280:45 - and close model i didn't add those
280:47 - classes my apologies
280:49 - so let me navigate back so class name
280:53 - we're gonna go with btn btn
280:56 - hipster and then we'll add close
281:01 - and btn let's save that
281:05 - that should do it let me click
281:07 - yep that's the button right now
281:10 - and then back in the css
281:14 - we want to target
281:16 - the button
281:17 - you want to look for that closed model i
281:20 - believe or close btn
281:22 - the one that i basically just set
281:24 - up and
281:26 - we want to add the background color
281:28 - different
281:29 - so let's go with close btn
281:32 - and we're going to go with background
281:34 - and we're going to set it as a red
281:38 - hyphen and dark and then after that
281:40 - let's go with color
281:42 - and we're going to set it equal to a
281:44 - white one
281:45 - all right so that should do it for the
281:47 - button and then lastly let's worry about
281:49 - that link
281:50 - so that's going to be under modal
281:52 - content and link
281:54 - in here let's go with display block
281:57 - because i want to start in the new line
282:01 - i want to set some kind of color in my
282:03 - case i'm going to go with primary and
282:05 - 500
282:06 - then we want to add a little bit of
282:08 - margin in the bottom
282:10 - so my case i think i'm going to go with
282:13 - 1rms
282:15 - margin bottom equals to 1 rm
282:18 - then we have text decoration which will
282:20 - set it equal to the underline
282:24 - text
282:25 - decoration and that's equal to a
282:29 - underline let's save it
282:31 - yep looks about right and then lastly we
282:34 - just want to add a little bit of
282:35 - transition since there's going to be a
282:37 - hover effect as well
282:39 - so first let me select here let me add
282:43 - hover
282:44 - so as we're hovering we want to set the
282:47 - color
282:48 - equal to a black and then let's add that
282:50 - transition and that one will be equal to
282:53 - a css variable with the same name
282:56 - transition
282:58 - and once we set the styles we're pretty
283:00 - much done with the model and up next
283:02 - we're going to work on the favorites
283:04 - component and as far as the favorites we
283:07 - want to start in the context jsx we want
283:11 - to set up a new state variable by the
283:13 - name of favorites we also have a
283:15 - function
283:16 - set favorite and for timing is going to
283:18 - be empty array eventually we'll set up
283:21 - the local storage
283:23 - so once the application loads we'll
283:24 - check the local storage first
283:27 - but for now let's not worry about it
283:30 - we will set up two functions one is
283:32 - going to be add to favorites which again
283:34 - will look for
283:35 - id meal
283:38 - basically the email id
283:39 - then we'll use that id to find a meal in
283:42 - the meals array
283:44 - after that check
283:46 - whether it's already in the favorites
283:48 - so essentially if i have that meal and a
283:51 - favorite i don't want to add it one more
283:53 - time
283:54 - and if that's the case then we'll just
283:57 - return so nothing is going to happen
283:59 - if not
284:01 - if it's not in the favorites
284:03 - then we'll spread out the current values
284:07 - the favorites one
284:09 - and we'll add that extra meal
284:12 - so we create a new array we spread out
284:13 - the existing values and we add that
284:15 - extra meal and then we use the set
284:18 - function
284:19 - to actually
284:20 - add
284:21 - the new array as our value so we have
284:24 - the current value and this is the new
284:26 - one
284:26 - and while we're on topic right away
284:28 - let's also create a remove from
284:30 - favorites
284:32 - so this one again is going to be looking
284:34 - for id meal and we'll invoke it from the
284:37 - favorites
284:38 - same deal however in this case we right
284:40 - away look in the favorites and we just
284:41 - say
284:43 - look return only the meals
284:46 - whose id does not match the id meal that
284:49 - we're passing
284:50 - and again
284:51 - we go with updated favorites
284:54 - so now we use set favorites and again we
284:57 - pass in the updated favorites so all the
285:00 - time we just change the values in the
285:01 - array and we set that array as our new
285:05 - state variable we want to pass both of
285:08 - them down to your entire application so
285:11 - pass both of them in the value
285:13 - and for now in this video we'll just
285:15 - worry about
285:17 - adding to the favorites so we'll have to
285:19 - destructure it in the meals
285:21 - and then notice how it's exactly the
285:23 - same as select meal why because again
285:26 - we're passing in the id meal
285:29 - so hopefully you remember why we're
285:31 - setting up that arrow function so here
285:33 - we have that like button and every time
285:36 - i click on that button we'll add meal
285:39 - to the favorite
285:42 - and i guess i'm going to start by
285:43 - setting up that state variable i believe
285:46 - that's going to be actually our last one
285:48 - if i'm not mistaken so favorites
285:52 - then set favorites
285:56 - and we'll use use state then like i said
286:00 - before for now it's just going to be
286:02 - empty array let's keep on
286:04 - moving and i'll set up both of these
286:07 - functions here
286:08 - const add two
286:11 - favorites
286:13 - it's going to be a function and it's
286:15 - going to be looking for one thing and
286:17 - one thing only the meal id which i'm
286:19 - going to
286:20 - name
286:21 - id meal just because that's the name of
286:24 - the property
286:26 - so i think it's less confusing copy and
286:28 - paste and we want to go with the remove
286:31 - remove
286:32 - from favorites
286:35 - after that let's
286:37 - set up the logic so like i said first we
286:39 - want to get that meal from the meals
286:42 - state variables const
286:46 - meal and that one is equal to meals find
286:51 - and let's pass in the callback function
286:54 - i'll reference each and every meal
286:56 - as a meal parameter and i'll say if meal
286:59 - id meal matches
287:01 - the id
287:03 - so the parameter we're passing in
287:05 - if it matches
287:07 - the meal at the property then good then
287:10 - get me that
287:11 - after that we want to
287:14 - check if it's already in the favorites
287:16 - so const and then
287:18 - already
287:19 - favorite and that will be equal to
287:22 - favorites
287:24 - and we're gonna go with find
287:27 - check for meal
287:29 - and same deal
287:31 - basically if the id matches
287:34 - then this is going to be true
287:36 - so in here we can kind of cheat a little
287:38 - bit where i'm going to grab the logic
287:40 - again it's the same deal
287:42 - keep in mind that
287:43 - once we get this meal and we pass it
287:45 - into array the structure is going to be
287:47 - exactly the same that's why we can do
287:48 - that uh now let's set up the condition
287:51 - if it's true
287:52 - if already favorite evaluates to true in
287:55 - this case then i want to return why
287:57 - because like i mentioned i don't want to
287:59 - add it
288:00 - multiple times to a favorites
288:02 - i mean if it's already there then i'm
288:04 - good to go so that's why we can click
288:06 - all day long and nothing is going to
288:07 - happen that's exactly the result i'm
288:10 - looking for
288:11 - and then lastly
288:13 - if that's not the case then javascript
288:14 - is going to keep on reading the code and
288:16 - therefore we'll
288:17 - create this array update
288:20 - favorites and now will be equal to a new
288:23 - array let's spread out all the values in
288:26 - the state in the state variable let's
288:28 - add that meal
288:30 - sucker over here
288:32 - and then
288:33 - let's go with set
288:36 - favorites and let's pass in update
288:39 - favorites now eventually yes there's
288:41 - going to be a local storage but for now
288:44 - we're not gonna worry about it so we're
288:46 - gonna go with
288:47 - updated
288:49 - you know what i need to actually fix
288:50 - this updated
288:53 - and then favorites
288:56 - all right that's good so now let's set
288:58 - up the logic where we remove from the
289:01 - favorites
289:02 - and we'll do that by again creating a
289:05 - new variable updated
289:07 - and then favorites
289:09 - and we're gonna go with favorite state
289:12 - value
289:13 - and we will use the filter method
289:17 - and we'll check if the item
289:20 - id mail property
289:22 - does not match the id that we're passing
289:24 - then we'll return it into our new array
289:27 - so essentially we'll just exclude
289:29 - the item whose id matches
289:32 - and as a result we'll be able to remove
289:34 - the meals from the favorites area like
289:37 - so we click and we're good to go and
289:40 - this is going to be the case where again
289:41 - we want to pass in the callback function
289:43 - and we want to go with meal and as i
289:46 - said i need to set it up here as a param
289:49 - meal and if meal
289:52 - id meal
289:53 - does not so this is the case where we're
289:55 - looking for the items whose id
289:58 - does not match what we're passing
290:00 - then we return in that new array and now
290:02 - we want to do the same thing over here
290:04 - we want to go with set favorites and
290:06 - then passing updated
290:08 - favorites
290:09 - and then let's pass both those things
290:11 - down
290:12 - so it was add
290:14 - to
290:16 - favorites and it was also removed
290:20 - from
290:21 - favorite
290:23 - and once we have this one in place we
290:25 - just want to go to
290:27 - meals
290:29 - and then we want to structure it of
290:31 - course
290:32 - so say add
290:34 - to
290:35 - favorites and now let's keep on moving
290:38 - and we're looking for the light button
290:41 - so here we want to add again on click
290:44 - and yes i'll repeat one more time
290:46 - since we invoked a function
290:49 - basically there's no other way
290:51 - for us to get the id email we just have
290:53 - to pass it in and since we invoke it yes
290:56 - we need to set up
290:57 - the arrow function
290:59 - so let's go here
291:00 - let's say on click
291:03 - um
291:04 - set up the arrow function first
291:06 - let's see i think i have a mistake here
291:08 - and then we will
291:11 - invoke add
291:12 - to
291:13 - favorites
291:15 - and then let's pass in the id meal and
291:17 - if everything is correct
291:19 - uh we'll definitely see that in the
291:22 - components
291:23 - essentially in our developer tools but
291:25 - if you want to double check that you can
291:27 - always console.log so let me go back to
291:30 - the context let me find this one and
291:32 - i'll just log for time being and i'm
291:35 - going to pass in id
291:37 - meal
291:38 - so let's try it out i'm going to
291:40 - navigate to my application
291:43 - um i mean you can pick any
291:45 - of the meals and then just click on like
291:49 - button
291:50 - and we should see in the console some
291:52 - logs and also like i said if we check
291:54 - the dev tools
291:56 - either in the app provider
291:58 - we should see yep notice over here so
292:02 - that's the
292:04 - favorites array
292:06 - effectively every time we'll click on it
292:08 - we'll add the item so let me try here
292:11 - notice now i have three of them
292:13 - then this one is already here i guess
292:15 - that's why i don't see it and then
292:17 - notice
292:18 - every time we click on the item we add
292:21 - it to the favorites all right and now we
292:24 - just need to worry about how we can
292:26 - render it on the screen and as a quick
292:28 - sign up
292:30 - if you want to make your code more
292:31 - performant
292:33 - you can refactor meal below the return
292:37 - so essentially if you move the meal
292:38 - below the return
292:40 - now you'll see that we only search for
292:43 - the meal twice in the favorites and in
292:45 - the meals
292:46 - if we already know that is not in the
292:49 - favorites since we know that if the meal
292:51 - is in favorites we return regardless
292:54 - so if it's not in the favorites yes then
292:56 - we go to meals we get the meal and then
292:59 - we add it to the updated and you know
293:01 - the rest all right next let's worry
293:04 - about rendering the favorites
293:07 - and the first thing we want to do in the
293:08 - app
293:09 - jsx we want to grab the favorite state
293:13 - variable and we want to check the length
293:16 - and i only want to render favorites
293:19 - if the length is bigger than zero
293:21 - it's an array
293:22 - so we can always check the length and
293:24 - only if it's bigger than zero then we
293:26 - render the favorites
293:28 - and effectively the result is going to
293:29 - be following if i have no items in the
293:32 - favorites then we're not rendering the
293:34 - component all together
293:36 - and once we have that set up in place
293:39 - essentially we want to
293:41 - grab favorites select meal and remove
293:44 - from favorites
293:46 - in the favorites component so this is an
293:49 - array that we're going to render
293:51 - so if i add it here norrish that's going
293:53 - to be our component that's our array
293:56 - and then we want to grab the select meal
293:58 - because like i mentioned previously yes
294:01 - we'll be able to open up a model from
294:03 - the favorites as well now there is a
294:05 - gotcha but we'll worry about it later
294:08 - now we just want to grab this select
294:10 - meal and then we want to also grab
294:13 - remove from favorites so that's the
294:16 - remove button that we can invoke over
294:19 - here
294:20 - um for now we'll just set up the return
294:23 - where we'll have some heading 5 as well
294:25 - as we'll iterate over the items
294:29 - and then
294:30 - in the following video i'll worry about
294:32 - the css again
294:34 - the result after this video probably is
294:36 - going to be somewhat ugly
294:38 - so let's start cracking
294:41 - and
294:43 - i think i'm going to
294:45 - go to app jsx first
294:48 - and i want to grab the favorites as well
294:51 - again that's my array and i want to
294:53 - check the length and only if i have some
294:56 - items in there then i want to render the
294:59 - favorites component let me go
295:01 - favorites and as i say not keep in mind
295:03 - that every time you refresh it we'll
295:04 - start from zero from empty array simply
295:07 - because we are not we're not using the
295:10 - local storage yet so let's go here with
295:13 - favorites
295:15 - and then let's check the length right
295:16 - away
295:18 - length
295:19 - and if it's bigger than zero then we
295:21 - want to render the favorites
295:24 - so let me add the component in the
295:26 - expression and we're good to go and we
295:29 - can actually quickly test it so let me
295:32 - go to my application refresh
295:35 - and it looks like i have an error
295:39 - it says here that we cannot read the
295:41 - properties of undefined
295:44 - and i think it's because i didn't pass
295:46 - it down in the previous video my band so
295:48 - let me go here
295:49 - in the context jsx let me add the
295:53 - favorites array so we also want to pass
295:55 - that one down and now once we refresh we
295:58 - should be good to go so at the moment we
296:00 - don't see anything again it is empty
296:02 - array
296:03 - but
296:04 - once we click on the like button we
296:07 - should see the favorites component
296:08 - because now we have some kind of value
296:11 - in there and
296:13 - let me go back to my context.jsx
296:16 - i think i'll remove this one for now the
296:19 - id
296:20 - and then we want to navigate to the
296:23 - favorites
296:24 - that's the component then i guess i'm
296:26 - just going to start by again grabbing
296:28 - that use global context
296:31 - so let me look for favorites
296:33 - i mean here let's set it up since we'll
296:36 - grab a bunch of values from
296:38 - the context
296:40 - and we'll start by setting up the
296:42 - structure so const we're looking for
296:45 - favorites
296:47 - then we also want to grab the select
296:49 - meal again that is coming up for now
296:50 - we're not going to worry about it and we
296:52 - want to remove
296:53 - from favorites hopefully that one i
296:56 - added to the context.jsx so use global
296:59 - context let's invoke that and now let's
297:02 - set up the return it's going to be a
297:04 - section
297:05 - we'll add a class name of
297:08 - favorites
297:10 - last name and set up equal to my
297:13 - favorites then we want to rename the
297:15 - closing tag so this is going to be a
297:18 - section
297:19 - inside of the section let's go with div
297:22 - so
297:23 - let's set up the div
297:25 - and in here let's add a class of class
297:28 - name
297:29 - first of all and then we're gonna go
297:31 - with favorites
297:33 - and content
297:34 - then inside of the div let's go with
297:36 - heading five
297:37 - and we're gonna go with favorites
297:41 - and then let's iterate over that list
297:43 - however we'll place it in the div so
297:46 - they have class name and we're going to
297:48 - go with favorites
297:50 - and container
297:52 - and instead of div let's iterate over
297:55 - that array so favorites array then we'll
297:58 - call the map and we'll set up the
298:01 - callback function i'll reference each
298:04 - meal as an item and then as far as the
298:06 - return
298:07 - um we want to go with constant we wanted
298:10 - the structure again how do i know that
298:12 - it's there because we're passing that
298:14 - entire object
298:15 - to array so i know that the structure is
298:18 - going to be exactly the same again what
298:20 - we're looking for we want to get the
298:22 - meal and we want to get the image that's
298:24 - all
298:25 - so in this component it's not much and
298:27 - in this case i'll
298:29 - rename it to an image and that is equal
298:31 - to an item then we want to return
298:34 - and we're going to go with div we need
298:36 - to pass in the key prop and in that case
298:38 - it's going to be equal to id meal then
298:40 - we want to set up a class name here
298:44 - class name and that one will be equal to
298:46 - a favorite
298:48 - item
298:49 - item and then
298:52 - instead of this dividend by the way i
298:53 - need to add the closing one inside of
298:56 - this div we first want to display the
298:58 - image and then we want to go with the
299:00 - button that removes that item from the
299:02 - array
299:03 - so let's start with img source
299:06 - will go with image again
299:09 - that's the alias that we just set up
299:11 - then let's add a class name
299:14 - class name and that one is equal to
299:17 - a favorites
299:20 - and then
299:22 - img and also img so global image class
299:26 - and then the favorite image class
299:29 - and lastly let's set up that button
299:32 - we'll add a class name and that one will
299:35 - be equal to a remove btn so this is the
299:38 - case we're not going to add that global
299:40 - class we'll just set up a
299:43 - class 4d favorites
299:45 - and then inside of the button let's just
299:48 - type remove
299:49 - and we need to add
299:51 - the functionality correct so again we go
299:53 - with on click
299:55 - and this time i'm not going to repeat
299:57 - why we use the arrow function
300:00 - please we'll watch the previous videos
300:02 - where we initially set it up so let's go
300:04 - here we remove and then
300:07 - favorites
300:08 - so let me set up the proper name here
300:11 - remove from favorites and let's pass in
300:13 - that id meal and once we're done typing
300:17 - out the return we can take a look at the
300:19 - application again i can guarantee you
300:22 - it's going to be somewhat ugly so let me
300:24 - click here and notice that's our giant
300:26 - image and then we also have that removed
300:28 - so if we add another one then yep it's
300:31 - exactly the same thing and now if we
300:33 - click on remove we can remove from the
300:36 - favorites so our next step is going to
300:38 - be
300:39 - to set up the styles so it looks more
300:42 - presentable like this and as far as the
300:45 - css let's navigate to your app css and
300:48 - all the way
300:49 - no actually no not in the bottom
300:54 - i have model in the bottom
300:55 - we want to set it up here between the
300:57 - meals and search
300:59 - first we want to
301:01 - grab the main container
301:04 - and let me set up the files here as well
301:08 - and we're gonna go with favorites
301:11 - let's add a background and we're gonna
301:13 - go with black one now of course keep in
301:16 - mind that we're not gonna be able to see
301:18 - so
301:19 - maybe
301:21 - um you know what
301:23 - either we can add
301:25 - a favorite just so we can see something
301:27 - or we can remove that condition i think
301:29 - i'm just going to add that meal and
301:31 - we should be good to go let's add a
301:33 - color here
301:34 - that one will be equal to white one then
301:37 - we want to go with batting
301:39 - one rem's top bottom left and right is
301:42 - going to be equal to zero we'll set up
301:45 - the favorites content
301:48 - and essentially i want to set up the
301:49 - width
301:50 - similarly
301:52 - to how we did for a search
301:54 - so let's go with favorites
301:56 - and content and
301:58 - i'm going to go somewhere and find the
302:00 - values essentially this is what i'm
302:02 - looking for so with max with
302:04 - as well as the
302:06 - margin 0 which in this case i don't have
302:09 - i'll have to add it so copy and paste
302:12 - and let's add margin
302:14 - zero auto so now we're placing nicely
302:16 - the content in the center
302:18 - then we want to work with the container
302:21 - so in this case we're looking for
302:24 - favorites and container noun will be
302:28 - equal to display
302:30 - flex
302:32 - and then gap so set up a little bit of
302:35 - distance in between the items and also
302:37 - go with flex wrap equals to wrap let's
302:40 - say that
302:42 - and as a result let me refresh
302:46 - it should look better
302:48 - and
302:49 - nope it's still quite big ah because of
302:52 - the image yeah my apologies we're not
302:53 - going to see anything as of yet
302:56 - but we do want to place everything in
302:58 - the center
303:00 - and when i say everything i'm actually
303:01 - talking about the button so favorite
303:04 - item and then we want to go with text
303:06 - align and
303:08 - center save that and now let's make that
303:12 - image quite small so favorite
303:15 - hyphen img and we're going to go with
303:17 - width
303:18 - 60 pixels
303:19 - so now it's going to be small i mean it
303:21 - should be
303:22 - favorite img
303:25 - and then let's check
303:27 - we have poor radius
303:29 - or radius
303:31 - 50
303:33 - and for some reason i don't see the
303:35 - result
303:37 - let me try one more time again still
303:39 - it's massive so let me double check in
303:41 - the favorites
303:43 - so that should be favorite item
303:45 - and this is favorites mg maybe i'm
303:49 - selecting it wrong so apps yes yeah
303:51 - should be favorites img my bad so now
303:54 - notice we have
303:56 - image with border radius as well as the
303:59 - width so now it looks a little bit
304:01 - better then let's add a border and that
304:04 - one will be equal to 5 pixels solid
304:07 - and we're going to look for the css
304:09 - variable with a value of white
304:12 - and then let's also set up a cursor
304:15 - pointer since remember once we click
304:18 - eventually we'll
304:19 - add it to a model and now let's worry
304:22 - about the remove button so that one
304:25 - is the last thing we want to style
304:27 - essentially for the entire project
304:30 - so let's go with remove iphone btm
304:33 - and here we'll go with margin
304:38 - top and we'll set it equal to
304:41 - [Music]
304:42 - 0.25 rem
304:44 - then we want to go with background
304:46 - transparent we want to set the color
304:49 - equal to white
304:51 - so r and hyphen white after that we want
304:54 - to do the same thing with the border
304:57 - so let me copy this one
304:59 - let's just set the border so borders
305:01 - equal to transparent as well cursor is
305:04 - going to be equal to a pointer
305:07 - and what else what else what else we
305:09 - have transition since there's going to
305:11 - be a hover effect and also a font size
305:13 - so let's start with font size that will
305:15 - be equal to
305:17 - 0.5 rem so i'll basically make the text
305:20 - smaller and then after that we want to
305:23 - go with that transition
305:25 - so let's go with transition and the css
305:28 - variable with the same name so
305:31 - transition and let's quickly add the
305:34 - hover effect
305:35 - so we're looking for a move button and
305:38 - we want to change the color essentially
305:40 - as we're hovering so remove button hover
305:44 - and then let's just go with color
305:47 - bar and then red
305:49 - dark let's save it
305:51 - and now notice
305:53 - we have the favorites we can only see it
305:56 - if we add the meal and you know what
305:59 - i think you can place it already there
306:01 - and once we add
306:03 - to the list
306:05 - we have more meals
306:07 - if we want you can remove it as well and
306:10 - once i remove all the meals then of
306:12 - course we cannot see the component the
306:15 - favorites component okay and next let's
306:18 - refactor select meal
306:21 - see eventually i want to add the same
306:23 - logic
306:25 - to the image
306:26 - so every time we click on a favorites
306:29 - image
306:30 - we also display the meal in the model
306:32 - however we need to keep something in
306:34 - mind
306:35 - we have two arrays
306:37 - we have meals and we have the favorites
306:41 - and at the moment select meal is looking
306:44 - where
306:45 - it's looking
306:46 - in the meals
306:47 - so yes there's going to be some
306:49 - situations where
306:52 - the meal that you have in the favorites
306:55 - is also going to be displayed on the
306:56 - screen however if let's say i go with a
306:59 - random one now as you can see if you
307:01 - click on this
307:03 - meal and try to find it in meals it's
307:06 - not going to be there anymore
307:08 - so
307:09 - when
307:10 - we set up the select meal we also need
307:12 - to take an account that we'll call it in
307:15 - two places
307:16 - on the meals array and also in the
307:19 - favorites and therefore we have right
307:20 - now this favorite meal
307:23 - and effectively we just want to add the
307:25 - condition
307:26 - so we want to add the condition that if
307:29 - that is true
307:30 - so
307:31 - if we're calling it in the favorite
307:34 - meals then we simply want to look for a
307:37 - different array
307:39 - so then we want to look in the favorites
307:42 - one
307:42 - now if
307:44 - it's actually in the meals then of
307:46 - course we don't need to worry about it
307:48 - it's going to be right there in the
307:50 - meals array
307:52 - so therefore we'll set up the condition
307:53 - we'll say if every meal is true
307:57 - then we'll look in the favorites if not
307:59 - then we'll look in the meals and then in
308:01 - the favorites we already structured it
308:04 - we just need to invoke it we need to
308:05 - pass in the id meal so the meal id and
308:09 - also true because in this case we're
308:11 - calling it
308:12 - from the favorites
308:15 - i guess i'm going to start in the
308:16 - context
308:18 - and first i want to set up the logic
308:21 - i'll say if
308:22 - and then favorite meal
308:26 - you know if it's true
308:28 - then essentially
308:29 - the logic is going to be exactly the
308:31 - same the only difference is
308:32 - i'm looking in the favorites
308:35 - let's call it and we also want to place
308:38 - the second one in the else condition
308:42 - so now
308:44 - depending on the value of favorite meal
308:46 - we'll either check for the meal in the
308:48 - favorites or in the meals
308:51 - and now we just need to go to the
308:53 - favorites we already have select meal
308:55 - and we want to add the on click on the
308:58 - image now let's pass in the function
309:00 - first
309:02 - the arrow function and then we want to
309:03 - go with select
309:05 - meal
309:06 - then let's pass in the id
309:09 - so we're looking for id
309:11 - meal and second we'll pass in the true
309:14 - so yes we're calling this from the
309:16 - favorites and now let's check it out i'm
309:18 - gonna go to my application so notice
309:22 - now all the meals now i can add it to
309:24 - the favorites and even
309:26 - if my meals are right right now is
309:28 - different i can still
309:30 - display them in the model which is
309:33 - awesome
309:34 - all right and the last piece of
309:35 - functionality we want to add to this
309:36 - application
309:38 - is adding favorites to the local storage
309:41 - so at the moment everything works nice
309:43 - but the moment we refresh the
309:44 - application
309:46 - again we start from the scratch
309:49 - and instead we want to save to local
309:51 - storage every time we add item to the
309:54 - favorites
309:55 - and we can do that
309:57 - for both of them for add favorites and
309:59 - remove from favorites so when we want to
310:01 - add the item to the local storage we go
310:03 - local storage again this is built in the
310:05 - browser so we don't need to install
310:07 - anything we go with set item in my case
310:09 - i'll call it favorites and remember that
310:11 - we can only
310:12 - uh save strings so therefore we need to
310:15 - go json stringify and then updated
310:18 - favorites
310:19 - so this array over here and then once we
310:22 - want to remove
310:23 - again basically we'll overwrite
310:26 - so we'll go with local storage set items
310:28 - favorites and then we'll overwrite the
310:30 - existing value with the new updated
310:33 - favorites and then once the application
310:35 - loads we want to grab it from the local
310:38 - storage
310:39 - now there's
310:40 - various ways how we can set up the
310:42 - functionality that grabs the items from
310:44 - the local storage but in my case i went
310:46 - the long way
310:48 - since that way um
310:50 - in my opinion it's more straightforward
310:53 - now
310:53 - can you make this code shorter
310:56 - absolutely
310:57 - but
310:58 - initially i wanted to make it
311:00 - uh easy to follow so here we're looking
311:03 - for the favorites
311:05 - we try to grab the favorites from the
311:08 - local storage we go with get item now
311:10 - there are two possibilities if
311:12 - the favorites exist then this is going
311:15 - to be true and then we just need to
311:16 - parse it because remember we stringify
311:19 - it so now we need to parse it and again
311:21 - we go with local storage get item
311:23 - favorites so we parse it back into array
311:26 - and that is if
311:28 - it exists if not if this is false
311:31 - then we'll set it equal to an empty
311:33 - array we return the favorites and then
311:36 - we invoke this
311:38 - where we have used it again
311:40 - i'm fully aware that there are shorter
311:42 - ways how to write this logic but
311:44 - at least when i'm setting up the content
311:46 - i always want to start with more
311:48 - readable code i think that is more
311:50 - important than
311:51 - having less lines of code
311:53 - and i guess i'm going to go to the
311:55 - context first
311:57 - let's just add the functionality
311:59 - where we want to go with that set
312:02 - local storage
312:03 - or sorry local storage and then we're
312:06 - going to go to set
312:07 - item we're looking for favorites at
312:09 - least that's how i'm going to call it
312:11 - and we need to use json
312:14 - then stringify
312:17 - and we want to pass in the updated
312:21 - favorites
312:23 - now once that is in place
312:25 - we want to copy and paste then
312:27 - essentially we're doing the same thing
312:28 - when we remove the item
312:30 - and here it's actually
312:33 - a bug because there's a missing letter
312:36 - and then let's scroll up
312:38 - and let's set up that function
312:41 - so we want to go with that
312:43 - get favorites from local storage and i'm
312:46 - going to set it up above the app
312:48 - provider we're going to go const get
312:51 - favorites
312:54 - from local
312:57 - local storage it's going to be a
312:59 - function and right from the get go it's
313:02 - going to return the favorites
313:05 - something we're going to set up right
313:07 - here we'll go with let and
313:10 - favorites now that is equal to a local
313:13 - storage
313:15 - get
313:16 - item
313:17 - and now of course we're looking for that
313:19 - favorites
313:21 - all right
313:22 - favorite if it exists
313:24 - awesome
313:25 - we'll have one logic if
313:28 - it doesn't then of course
313:30 - we'll just return an empty array so say
313:32 - favorites is equal to an empty array
313:35 - effectively the functionality we already
313:37 - have
313:38 - but if it does exist
313:40 - then it's going to be different we're
313:41 - going to go with favorites
313:44 - then json parse so we need to parse it
313:47 - again we are saving it as a string so we
313:49 - need to parse it and then local storage
313:52 - and essentially we just want to get this
313:53 - code
313:55 - over here let's just set it up
313:58 - and the last thing we need to do is just
314:00 - invoke it so where we have the favorites
314:02 - let's go with
314:03 - get favorites from local storage let's
314:06 - invoke it so now let's take a look at
314:08 - the application
314:09 - essentially once we add the item to the
314:12 - favorites it's displayed and also it
314:15 - stays there even once we refresh the
314:19 - application
314:20 - with this in place we're done with
314:22 - application hopefully everyone enjoyed
314:24 - it and i'll see you in the next one i
314:27 - hope that project helped you gain a
314:28 - deeper understanding on how everything
314:30 - fits together and react
314:32 - in this next section you'll use what
314:34 - you've been learning and also learn
314:36 - about new react features
314:38 - sanjeev is your instructor for this next
314:41 - section
314:42 - hey everyone for this next project we're
314:44 - going to be building out a stock trading
314:46 - app where users can keep track of their
314:48 - favorite stocks they could see what is
314:49 - the current price as well as historical
314:52 - prices as well
314:53 - now for this application on the main
314:55 - page you're going to see a list of all
314:56 - of the stocks the user has decided to
314:58 - watch and it's going to list out the
315:01 - last price or the most recent price as
315:03 - well as what was the change the change
315:05 - percentage the high low open and the
315:07 - previous close so just some relevant
315:09 - information about that specific stock
315:11 - and how it's doing in addition to that a
315:13 - user can go to the input field up here
315:15 - and search for companies to add to their
315:17 - watch list so if the user wants to
315:20 - search for tesla they can just search
315:21 - for tesla and this is going to send a
315:24 - request to our api
315:26 - and it's going to result in a list of
315:28 - companies that match that specific query
315:30 - we can then pick the specific company
315:32 - that we're interested in and it's going
315:34 - to add it to the watch list so now we
315:36 - can keep track of tesla and if we want
315:38 - to we can remove any one of these so if
315:39 - we want to remove microsoft we can do
315:41 - that as well
315:42 - and the nice part about this is this
315:44 - watch list here is going to be
315:46 - remembered because we're going to store
315:48 - this information in the local storage so
315:50 - if the user navigates away from this
315:51 - page and then comes back to it it's
315:53 - going to remember all of the companies
315:55 - the user is interested in
315:57 - now when we select on one of these
315:59 - stocks it's going to take us to the
316:00 - detailed page for that stock so it's
316:02 - going to render out a nice chart that's
316:04 - going to show historical data not just
316:07 - the current price so right now you can
316:08 - see that it's selected the past 24 hours
316:10 - if we want to we can also see the past
316:12 - seven days and then if we want we can
316:14 - also see the past year and the nice part
316:16 - is it's going to color code it depending
316:18 - on if the stock improved or if it went
316:20 - down
316:21 - and then beneath that it's also going to
316:23 - include some relevant information about
316:24 - the company so things like what
316:26 - exchanges are part of when was the ipo
316:28 - date what's the website for that company
316:31 - how many shares outstanding as well as
316:33 - market cap and a few other details
316:36 - now for the technologies in this project
316:38 - we're gonna be working with a lot of
316:39 - different technologies we've got all of
316:41 - the core hooks like use state use effect
316:44 - but in addition to that we're also going
316:46 - to be making use of the context api so
316:49 - that we can pass data down to the
316:50 - various different components in our
316:52 - application we'll get a chance to work
316:54 - with local storage and in addition to
316:56 - that we'll also be making use of the
316:58 - finhub api so that we can get data about
317:00 - these stocks and for the charting
317:03 - library
317:05 - we're going to be making use of apex
317:07 - charts so in the detail page when we
317:08 - draw out that historical data we're
317:10 - going to be making use of this library
317:11 - and you'll see that this library is
317:12 - actually very easy and intuitive to use
317:16 - and so that's what i've got in store for
317:17 - you guys hopefully you guys enjoy this
317:18 - project
317:19 - and i'll see you in the next section
317:21 - while we get started in bootstrapping
317:22 - the project
317:23 - and just a quick note before we proceed
317:26 - any further because we are using a free
317:28 - account on finhub api uh you'll see that
317:31 - we won't have access to certain data
317:33 - points so when you're looking for
317:35 - companies uh and if you're searching for
317:36 - something like microsoft in this case
317:38 - you want to make sure you just see
317:39 - microsoft you don't want to see
317:40 - microsoft.sw or mi these are not
317:43 - supported with the free tier and you'll
317:45 - see that it'll actually break our
317:46 - application just because we don't have
317:47 - the specific error handling checks for
317:50 - when the user doesn't have the privilege
317:51 - to access the information so just make
317:53 - sure you don't select on these and get
317:54 - the the main
317:56 - stock symbol
317:58 - before we get started bootstrapping our
317:59 - application i want to go over how we're
318:01 - going to handle navigating between the
318:03 - different pages in our application
318:05 - and so in our application we have two
318:07 - main pages when the user navigates to
318:09 - the root path and if you aren't familiar
318:11 - with what that means if you take a look
318:12 - at a url we have http colon slash and
318:16 - then we have a domain so this is gonna
318:17 - be whatever domain name you've purchased
318:18 - for your application uh and so if you
318:20 - own google.com then this is gonna be
318:22 - google.com if you're just working in
318:23 - development mode for your react
318:24 - application it's gonna be localhost
318:26 - colon 3000. so that's a domain and then
318:28 - you have a path following that so in
318:30 - this case this is called the root path
318:31 - because it's just forward slash so
318:33 - there's no specific path after that and
318:35 - so when the user navigates to the root
318:37 - path it's going to take him to the main
318:39 - page here where we're going to have a
318:40 - list of all the different stocks that
318:41 - they're tracking
318:42 - and when they select one of these
318:44 - specific stocks it's going to take them
318:46 - to a detailed page and that detailed
318:48 - page is going to reside at this
318:49 - following url so we have the same http
318:51 - colon slash we have the domain name and
318:54 - then the path is going to be detail
318:56 - slash and then the name of the specific
318:59 - stock so if they wanted to see microsoft
319:01 - it would be msft uh inserted in for
319:04 - symbol
319:05 - and so that's how we want the routing
319:07 - working in our application
319:09 - and the way we're going to actually
319:09 - accomplish this is through client-side
319:12 - routing and we're going to make use of a
319:13 - library called react router and react
319:16 - router is actually very simple and the
319:17 - main idea behind react router is you
319:20 - tell it what are the different urls for
319:22 - the different pages that we want so
319:23 - these are going to be the two urls and
319:25 - all it's going to do is it's going to
319:27 - load a specific component for each url
319:30 - so the way we're going to structure this
319:31 - is when the user navigates to the root
319:33 - url we're going to have a react
319:35 - component and this is a regular react
319:37 - component there's no special
319:39 - componentry needed within react router
319:41 - just makes use of regular react
319:43 - components and we're going to have a
319:45 - component called stockoverviewpage.jsx
319:48 - and so when they navigate to the root
319:50 - path it's just going to load up this
319:52 - component and this component is going to
319:54 - have all of the individual components
319:56 - that make up this page so the way we're
319:58 - going to actually break this down is
319:59 - we're going to have a component for the
320:00 - auto completion and then we're going to
320:02 - have a component for the list of the
320:03 - different stocks
320:05 - and then when the user selects one of
320:06 - these specific stocks it's going to
320:09 - route them to this specific url
320:12 - and this url is going to load up a
320:15 - component called stockdetailpage.jsx
320:18 - and so this component is going to
320:19 - contain the graph as well as the
320:22 - detailed information down here and so
320:24 - that's how we're going to handle
320:25 - client-side routing within our
320:27 - application and you'll see when we get
320:28 - started coding this out it's actually
320:29 - going to be very simple
320:32 - so let's create a new application in
320:34 - replit i'm just going to select the plus
320:36 - button right here and we're going to
320:38 - scroll down and we're going to select
320:40 - react javascript and i'm just going to
320:42 - give this the name of react
320:50 - demo so our projects have been
320:52 - bootstrapped i'm just going to hit run
320:54 - so we can just make sure everything's
320:55 - working
320:58 - and we can see our application was
320:59 - successfully loaded so it looks like
321:01 - everything's working i'm just going to
321:02 - do a little cleanup we don't actually
321:03 - need this text here
321:05 - and in addition to that if we go to our
321:07 - app.css we can either delete this or
321:10 - just comment it out we'll be adding our
321:12 - own styles
321:14 - now for this project we're going to make
321:16 - use of bootstrap just for styling only
321:18 - because i don't want to spend too much
321:20 - time uh having you guys copy all of the
321:22 - css properties and things like that i'd
321:24 - rather just add in a couple of bootstrap
321:25 - properties so that we can have a nice
321:27 - finished polished looking product
321:28 - without having to spend too much time on
321:30 - css so if you go to getbootstrap.com and
321:33 - you just scroll down to include via cdn
321:36 - we want to get just the css only we're
321:38 - not going to be making use of the
321:39 - javascript so we can just copy this to
321:40 - clipboard
321:42 - and if we go back to our application and
321:45 - we can just go to our index.html
321:48 - and inside the heading we can just put
321:50 - this under the title you can just paste
321:52 - that in there
321:53 - we'll save that and then just to make
321:54 - sure that everything's working i'm going
321:56 - to
321:57 - re-add in some text or i'm going to add
321:58 - a h2 tag and just make it say hello or
322:01 - something
322:02 - we'll save that
322:04 - and we should see it in there and i'm
322:05 - just going to add some
322:07 - um classes from the bootstrap library so
322:09 - i'll do class name equals and then i'm
322:11 - just going to say empty
322:12 - dash 2 so this should add or i'll do
322:14 - mt-5 this is going to add in some margin
322:16 - to the top and so we can see it moved
322:18 - down so it looks like bootstrap was
322:20 - successfully loaded
322:21 - and after we get this set up the next
322:22 - thing that we have to do is we have to
322:24 - go to the api that we're going to make
322:25 - use of so we're going to be making use
322:27 - of the finhub stock api this is a free
322:30 - api you will have to register but it is
322:32 - completely free and if you just select
322:34 - get free api it's going to take you to a
322:36 - window where you can register and then
322:37 - once you've registered it'll then
322:39 - provide all of your api keys and so the
322:41 - one you want is this top one right here
322:43 - so you just grab this you can copy it
322:45 - and then just store it in some
322:46 - documentation so you can refer to it
322:47 - later
322:49 - now as i mentioned we're going to be
322:50 - making use of a library called react
322:52 - router so the first thing that we're
322:53 - going to do is we're going to install
322:55 - that so we can set up the routing and so
322:57 - if we select the package manager here
323:00 - and under here we want to search for
323:01 - react router and then more specifically
323:04 - we want react router dom and make sure
323:05 - you get the react router dash dom
323:07 - because there is a react router but
323:09 - that's a different package we want this
323:11 - one specifically here so we'll select
323:13 - react router dom
323:15 - and we can see that it's installing
323:17 - react router dom
323:20 - all right so we'll go back to our files
323:21 - and what i want to do is i'm going to
323:23 - create a new folder in our source
323:24 - directory
323:26 - and i'm going to call this pages so this
323:27 - is going to have the two different pages
323:29 - there's going to be the summary page as
323:30 - well as the detailed page
323:36 - and so i'll create our stock detail page
323:39 - dot jsx
323:43 - and then we'll have our stock overview
323:45 - page
323:48 - as well
323:51 - and so react router dom is going to
323:53 - actually route to one of these two uh
323:55 - components and keep in mind these are
323:56 - just plain react components
323:59 - and so i'm just gonna
324:00 - do export
324:02 - const
324:03 - stock detail page
324:12 - and for now this is just going to return
324:14 - a div
324:15 - that just says this is the stock detail
324:17 - page
324:20 - i'm going to do the same thing for my
324:22 - stock overview page
324:33 - so now that we've got our pages defined
324:34 - i'm going to go back to our app.jsx
324:37 - component and i'm going to import all of
324:39 - the things we need to get react router
324:41 - dom working
324:42 - and so there's going to be three things
324:44 - that we need
324:45 - i'm going to say import and we want
324:47 - browser router
324:51 - we also want routes with an s as well as
324:53 - route singular
324:55 - and we want to import this from react
324:57 - router dom
325:04 - and so we've got these three things i'm
325:05 - going to delete this h2 tag
325:08 - and what i want to do is i want to call
325:10 - browser router
325:14 - and within browser router i want to call
325:15 - in routes
325:22 - and then within here i want to call
325:24 - route so
325:25 - route is going to define the rules right
325:28 - and just to jog our memory
325:30 - and what we want is when the user
325:32 - navigates to the root url so that's
325:34 - going to be just a forward slash we want
325:35 - to load this component the stock
325:37 - overview and when the user navigates to
325:40 - slash detail
325:42 - and then the name of the specific stock
325:44 - so the symbol of that stock we want to
325:46 - go to stock detail page
325:49 - so how do we do that under route we have
325:51 - to provide two things the specific route
325:53 - or path that the user navigates to and
325:55 - then the component should load so for
325:57 - the first one
325:58 - we want to go to the root path so we say
326:02 - path equals
326:04 - and then the specific path so it's just
326:06 - the forward slash and that's going to
326:07 - load up the stock
326:09 - overview component so we have to import
326:11 - that in here first of all so i'll do
326:13 - import
326:15 - stock overview page
326:21 - and this is going to come from the pages
326:24 - folder
326:26 - and then we have stock overview page
326:32 - and to load that component
326:36 - we say element
326:38 - equals
326:39 - and then curly braces and then you
326:40 - provide the component that's going to be
326:42 - stock overview
326:47 - and that's all you have to do
326:50 - and so when the user navigates to this
326:52 - specific path all react router dom does
326:55 - is it loads this component onto the
326:56 - screen that's it react router is
326:58 - actually one of the simplest libraries
327:00 - and that's all it's there to do
327:02 - and we have to set up our next route
327:08 - we'll say
327:08 - route and then we'll say path equal so
327:11 - what's the path for this specific route
327:13 - well we want to do slash detail
327:15 - and then you know whatever symbol
327:19 - now i can't hard code a symbol right
327:20 - because if i say you know msft for
327:22 - microsoft then if they try to check any
327:24 - other
327:25 - company's stock it's not going to work
327:27 - it's only going to match on msft so we
327:29 - need a variable here that can be dynamic
327:31 - and it can be anything the user selects
327:34 - and the way we use variables in
327:35 - react.org is you just do
327:38 - colon
327:39 - and then the name of the variable so i'm
327:41 - going to use symbol but you can call it
327:42 - whatever you want if you want to call it
327:44 - stock you can do that but i'm going to
327:45 - use symbol and it's important to name it
327:47 - something that you can reference because
327:48 - we will need to reference that variable
327:51 - and so when the user navigates to this
327:52 - we want to load a specific element so
327:54 - we'll say element equals
327:55 - and then we just do the same thing
327:58 - and we have to import that component
327:59 - first
328:18 - and then we can just pass that into here
328:33 - and then we'll close off this tag
328:36 - and so now all the routing should be
328:38 - done
328:40 - and if we go back to our components uh
328:42 - we've got everything loaded so let's
328:43 - actually test this out so if i go to the
328:46 - root path which we're already at so the
328:48 - root path is just the forward slash we
328:50 - can see we have stock overview page
328:54 - and what i'm actually going to do is i'm
328:56 - going to open this up in a new tab
328:59 - and this will make it a little bit
329:00 - easier to handle the routing so now if i
329:02 - go to uh if we see the the root path we
329:05 - can see the stock overview component
329:06 - gets loaded and if i go to detail and
329:09 - then just put in some random text it
329:10 - doesn't matter because it's a variable
329:12 - we should see that it should load the
329:14 - stock detail page so our routing is set
329:16 - and everything's good to go and we
329:18 - really won't have to touch too much from
329:20 - the routing side of things because uh
329:21 - we've kind of got all of that said
329:23 - already
329:26 - and so i want to add one quick class so
329:28 - if we go to our app.jsx i just want to
329:30 - wrap this in a container class this is
329:32 - just part of bootstrap everything kind
329:34 - of has to be within a class called
329:36 - container it's going to help with the
329:37 - layouts
329:38 - and once we get that set what i want to
329:40 - do is i want to create a new folder
329:45 - and i'm going to call this component so
329:46 - this is going to contain all of our
329:48 - react components that are not pages
329:50 - themselves so these are just regular
329:51 - react components
329:53 - and if we take a look at the summary
329:55 - page
329:56 - you can see that we have three things we
329:57 - have a logo then we have the
329:59 - autocomplete bar and then we have the
330:01 - table with the list of all of our stocks
330:04 - so the way i'm going to
330:06 - kind of divvy this up is that i'm going
330:08 - to have two total components i'm going
330:09 - to have an autocomplete component and
330:11 - then i'm going to have the
330:13 - table component
330:16 - and so i'm just going to call this
330:18 - autocomplete.jsx and i'm going to call
330:19 - this one
330:21 - stocklist.jsx
330:25 - and so i'll create stock list
330:27 - dot jsx
330:36 - and then the other one is going to be
330:37 - autocomplete
330:44 - dot jsx
330:48 - and i'm just going to copy these
330:49 - components into there just as a baseline
331:25 - and inside our stock overview page i'm
331:27 - going to import both of those components
331:29 - so we can load them onto the screen
332:18 - and then now under this div i can just
332:20 - render out both of those components
332:34 - and we can see that in the stock
332:35 - overview page we've got all three
332:37 - components now or or two components plus
332:40 - the page
332:45 - and so
332:46 - getting started with the stocklist
332:48 - component this is where we get to have a
332:49 - little fun where we can actually finally
332:51 - start working with the finhub api and
332:53 - fetching some data but before we do that
332:55 - we want to
332:56 - store a list of all of the
332:59 - companies or the stocks a user wants to
333:01 - track and we're going to start off by
333:02 - just using the regular use state hook to
333:05 - track that and you'll see that later on
333:06 - in the project we'll actually refactor
333:08 - that and actually make use of the
333:09 - context api so that we can share this
333:12 - data amongst multiple components
333:14 - and so from the react library i'm going
333:17 - to import
333:26 - use state
333:27 - and i'll also go ahead and import use
333:29 - effect because we will have to use that
333:31 - as well
333:32 - and that's going to come from react
333:38 - and i'm going to do use state
333:41 - and then this is going to default to an
333:43 - empty array so uh when you whatever you
333:46 - pass into the use state hook this is
333:47 - going to be the default state so it's
333:49 - going to be an empty list of stocks
333:53 - and then i'll say this equals
333:56 - and then we'll say const and then we'll
334:01 - we'll call this a watch list so it's
334:02 - going to be a list of all the stocks
334:04 - that the user wants to the user wants to
334:06 - watch and then the function that we're
334:07 - going to get to modify this list will be
334:10 - called set watch list
334:16 - okay and so this variable called
334:17 - watchlist is going to return all of the
334:19 - stocks they want to watch and if we ever
334:21 - want to update it we make use of this
334:22 - function
334:24 - and actually instead of defaulting it to
334:26 - an empty array just for development
334:28 - purposes i'm going to hard code a couple
334:30 - of different stocks so that we don't
334:32 - have to manually go in add in a couple
334:35 - and then
334:36 - and then be able to fetch the data that
334:37 - would just require too much work so
334:39 - we'll add in a couple stocks at first as
334:42 - a default and then we'll clear this out
334:43 - once we're done with our project
334:45 - and for now i'll just say maybe the user
334:46 - wants the track of google
334:51 - and we'll say microsoft
334:53 - is the other one and then
334:56 - amazon
334:57 - okay
334:58 - so when the user navigates to this
335:00 - application they'll see data for these
335:02 - three stocks by default
335:05 - and i realized i actually made a mistake
335:07 - um when we actually send the requests to
335:09 - the finn hub api it expects everything
335:12 - to be capitalized so i'm going to change
335:13 - this to be gogl
335:17 - and msft and
335:22 - amzn
335:25 - yeah that actually got me for a little
335:27 - bit i forgot to capitalize it and i
335:28 - think we should actually go to the
335:29 - documentation
335:31 - so if you go back to the fin hub website
335:33 - and select documentation it's going to
335:35 - open up a new tab
335:36 - and it's going to show us how to
335:38 - actually work with the api
335:40 - and the first thing that we have to
335:41 - understand is that
335:43 - from an authentication perspective we
335:44 - have to provide the token
335:46 - as a parameter so we have to say token
335:49 - equals api key for every single request
335:51 - and that has to go
335:53 - in the url or you can add it as a header
335:55 - whichever one you prefer i'm going to go
335:56 - with the first option
335:59 - and the url that we have to send a
336:00 - request to is going to be this https
336:03 - colon slash finhub dot io slash api v1
336:07 - so all of requests will go to this base
336:09 - url and then we provide a specific path
336:11 - depending on what data we want to
336:13 - retrieve
336:14 - and if we actually go down to the
336:16 - documentation what we want to do is go
336:18 - under stock price and then get quote
336:20 - this is going to be the first
336:22 - endpoint that we're going to access so
336:24 - once again we take the root url and then
336:27 - we go to slash quote and this is going
336:30 - to give us information about a specific
336:31 - stock and it specifically gives us
336:33 - what's the current price what's the
336:34 - change percent change what's the high
336:36 - the low what was the open price as well
336:38 - as the previous close
336:40 - so it's going to give you everything we
336:41 - need for our table and all we have to do
336:43 - is just go to the slash quote endpoint
336:48 - and then we have to do a question mark
336:50 - and then here this is going to be
336:52 - the uh query parameter so everything you
336:55 - see after the question mark is going to
336:56 - be a query parameter so this is kind of
336:58 - providing the api uh specific data that
337:00 - we're looking for so we say symbol
337:03 - equals and then the name of the stock
337:04 - that we want data for
337:07 - and then we want to provide another
337:08 - query parameter and you separate the two
337:10 - with the and sign and then you have to
337:11 - provide the token so for every request
337:13 - we're going to have to add the token and
337:15 - then for the specific quote endpoint we
337:17 - have to provide the symbol so we can
337:18 - just send this as an example and then
337:20 - just update our token and that's going
337:22 - to be the request that we need to send
337:24 - in you can see that the documentation
337:25 - actually pre-fills it with my token so
337:28 - you could just copy this directly from
337:29 - your
337:30 - from your computer and it should work as
337:32 - well
337:34 - so let's work on getting this set up now
337:36 - we can fetch data using the fetch api
337:39 - that comes built in or we can make use
337:41 - of a library like axios and um
337:45 - i prefer to use axios there's no issue
337:47 - with using the standard fetch api but it
337:48 - does make it a little bit easier to work
337:50 - with you know path parameters and query
337:52 - parameters as well so i'm going to
337:54 - install axios and i've actually already
337:56 - got it installed but you can just search
337:58 - for axios
338:01 - and select the first one so this is the
338:02 - one that we want
338:04 - and you can see it's already installed
338:05 - for me so i've already done this so go
338:06 - ahead and do the same thing or if you
338:08 - want you could just do it through the
338:09 - standard method of just doing npm
338:12 - install axios whichever one you prefer
338:17 - now once we got axios installed what i'm
338:19 - going to do is i'm going to create a new
338:20 - folder
338:22 - called apis
338:25 - and this is going to contain all of the
338:26 - files for our api and within this api
338:29 - folder we're going to set up for one for
338:30 - the finnhub api i'm going to call this
338:32 - finhub.js
338:35 - and here we're going to set up axios and
338:37 - so i'm going to import axios from axios
338:44 - and then we're going to do export
338:46 - default because i'm going to export this
338:48 - instance of axios i'm going to say axios
338:50 - dot create so this create method creates
338:52 - a
338:54 - axios instance
338:55 - and here we provide some configuration
338:57 - options and the first one is going to be
338:59 - base url
339:01 - so you do base and you can see it's
339:03 - going to auto complete and you want to
339:04 - make sure that the ur and l are
339:06 - capitalized
339:07 - and here this is going to be the base
339:08 - url for the finn hub api so if we go
339:10 - back to the documentation
339:12 - the base url is going to be from v1 all
339:15 - the way to https so we'll copy that
339:21 - and paste it in here
339:24 - and make sure you don't have the forward
339:25 - slash at the end you want to delete that
339:27 - we just want it to end at v1 so by
339:29 - default when we use axios now or the
339:32 - spinhub.js api
339:34 - it's always going to
339:35 - set this as the base url and then we can
339:37 - add in whatever specific endpoint we
339:39 - want so if we want that slash quote
339:41 - endpoint
339:42 - we could basically just do a plus slash
339:45 - quote and then uh axios will combine
339:47 - them together so that you don't have to
339:49 - retype this entire url out
339:53 - and for now this is going to be all that
339:55 - we need uh we'll make a few changes for
339:57 - uh to this a little bit later
339:59 - but we can go back to our components and
340:01 - go to our stock list component
340:05 - uh we can then oops it looks like i
340:06 - accidentally deleted my use effect hook
340:09 - so now we're going to use a use effect
340:11 - hook so that we can fetch data and i'm
340:14 - going to import my axios
340:17 - so i'll do import
340:21 - binhub
340:23 - from
340:27 - dot dot slash so we're gonna go up a
340:29 - folder
340:30 - api slash
340:32 - and then
340:33 - binhub
340:38 - and so now we'll call the use effect
340:39 - hook
340:43 - and we'll pass in a function
340:46 - and right here we want to specify the
340:49 - dependency array and the dependency
340:51 - array is going to determine when this
340:52 - hook runs
340:54 - if i don't pass a dependency array
340:56 - what's going to happen is this hook is
340:58 - going to run every single time the
341:00 - component renders which would mean we
341:02 - would be fetching data every time it
341:03 - renders and that's not what we want we
341:05 - only want to fetch data when the
341:06 - component mounts so the component mounts
341:08 - we fetch the data that's all and to make
341:11 - it so that it only runs when the
341:12 - component mounts you pass in an empty
341:13 - array and that's it
341:15 - and i'm going to define a function in
341:16 - here called fetch data
341:22 - and this is going to contain all of the
341:26 - logic for fetching that specific quote
341:28 - and i'm going to wrap everything in a
341:30 - try catch block in case we get any
341:32 - errors
341:35 - and in here we can then do finhub
341:40 - dot get
341:44 - and for the url it's just going to be
341:45 - slash quote
341:48 - right because if we go back to the
341:49 - documentation right we just want to do
341:51 - quote
341:52 - and since we already specified the base
341:54 - url it's our it's automatically going to
341:55 - add that and then we want to specify the
341:57 - symbol and then our token of course
342:02 - so i'll say
342:03 - question mark
342:04 - symbol equals and then just
342:06 - we can grab microsoft
342:08 - and then we'll do and and then we'll do
342:10 - token equals and then we'll copy our
342:13 - token
342:14 - and paste it in here
342:19 - and then we will save this to a variable
342:21 - and i'll just call this response
342:23 - and remember this is a asynchronous
342:25 - action so we want to await it
342:28 - and because we're making use of a weight
342:30 - here this function has to be an async
342:32 - function
342:35 - and then down right below that i'm just
342:36 - gonna do a console.log response
342:40 - and then we'll actually call this
342:41 - fetchdata function so that we can
342:43 - actually fetch the data
342:46 - and it looks like there's a typo this
342:48 - has to be a capital h
342:53 - all right and it looks like
342:55 - it did fetch something so let's take a
342:56 - look at the data
342:58 - and if we take a look at the object this
342:59 - is uh what axios return so it shows us
343:02 - the original config which is under
343:03 - config the data is actually going to be
343:05 - the response we get back from the api so
343:08 - that's usually what we're most concerned
343:09 - with and if we go under data you can see
343:11 - we did the closing price the change
343:13 - price the high low so it looks like we
343:15 - were successfully able to get this data
343:18 - and moving forward um we'll i'll
343:19 - probably just show you everything we get
343:21 - back from the api in the console in a
343:23 - separate window just because it allows
343:24 - me to make it a little bit bigger and
343:26 - easier for you guys to read so we can
343:27 - see that the data was shown up here as
343:29 - well
343:30 - all right so that's great
343:32 - uh now we were able to fetch this data
343:34 - however i don't want to have to copy and
343:36 - paste the token into every single
343:38 - request because this isn't going to be
343:40 - the only component that has to
343:42 - get data from the api and i don't want
343:43 - to have to copy this token around all
343:45 - over the place so what we can do is
343:47 - first of all
343:49 - uh what i would prefer to do is go under
343:52 - our apis
343:53 - and here for our axios instance we can
343:55 - already pre-bake our token so i'm going
343:58 - to create a variable i'm going to call
344:00 - this token or key whatever you want to
344:03 - call it i'll call this token
344:08 - and i'm going to paste my token in there
344:12 - and what i can do is i can add in
344:13 - another property called params
344:20 - and then here i'll say
344:21 - token
344:26 - is going to be set to token
344:30 - okay and so now when we send requests i
344:33 - don't actually have to include this
344:34 - token parameter
344:36 - because it's going to come built in with
344:38 - the finhub axios instance
344:42 - and so we could see that it was actually
344:43 - able to get the data again and on top of
344:45 - that the great part about axios is that
344:47 - i can more dynamically add these query
344:49 - parameters without hard coding it into
344:51 - the url
344:52 - by removing this and i can actually just
344:55 - add in an object so i can pass in an
344:56 - object here
344:58 - and i can say params
345:02 - and then i can provide the symbol
345:04 - which is going to be set to
345:07 - microsoft
345:08 - yep and looks like it worked so now once
345:10 - again we got the data
345:12 - from the api server so this is just a
345:14 - different way of configuring axios and i
345:15 - think it's a little bit cleaner and
345:17 - easier because now we don't have to
345:18 - provide the token on every single
345:20 - request and now our request is
345:22 - pretty simple we just have to provide
345:23 - the symbol
345:26 - okay so now that we can fetch data from
345:28 - the api let's save this in some state
345:31 - variable so i'm going to call the use
345:32 - effect hook the use state hook again
345:39 - i'm just going to leave this empty
345:42 - and we're going to store this in a
345:43 - variable
345:44 - and i'll just call this stock so this is
345:46 - going to contain all of our stock data
345:47 - and then we want set stock so we want to
345:49 - manipulate that
345:51 - and so after this console.log i can just
345:53 - do a
345:56 - set
345:58 - stock
346:00 - and then we want to set it to response
346:02 - dot data
346:08 - and the reason why i said response.data
346:10 - is if you take a look at the response
346:12 - remember the response is going to
346:13 - contain the config which is the axios
346:15 - config is going to contain the headers
346:16 - request we just want the data so that's
346:18 - why i said response.data
346:22 - now one thing to keep in mind when
346:24 - fetching data with the use effect hook
346:25 - is there's a possibility that you know
346:28 - after we sent this response out
346:31 - that our component actually got
346:33 - unmounted and so what we don't want to
346:35 - do is end up calling set stock on a
346:37 - component that's already unmounted so
346:40 - how do we prevent that well it's
346:41 - actually very simple what i'm going to
346:42 - do is i'm going to define a variable and
346:44 - i'll say let and i'll just say is
346:46 - mounted this is going to be a boolean
346:48 - and i'm going to say this is set to true
346:51 - so what happens is when the component
346:52 - mounts right this is going to run when
346:53 - it mounts it's going to set mounted to
346:56 - true
346:57 - and then before we do set stock
347:01 - we just do a little check
347:03 - and i say if
347:05 - is mounted is set to true
347:08 - then we can move this up into that if
347:11 - statement
347:13 - that's all and all we have to do is then
347:15 - when the component unmounts
347:18 - we call a return to the use effect hook
347:20 - so this is uh this function that we pass
347:22 - to return is going to run whenever the
347:24 - uh the component gets unmounted so i can
347:27 - say
347:28 - when the component gets unmounted
347:30 - i would just want to set
347:33 - is mounted
347:35 - equals false
347:37 - and so that way when we get a response
347:39 - back and the component got unmounted
347:41 - this check will run and it will not pass
347:44 - and it'll just skip right over it
347:45 - because we don't want to accidentally
347:46 - call set stock on an unmounted component
347:51 - now the next thing that we want to do is
347:53 - now that we're able to fetch some data
347:56 - we want to fetch data for everything in
347:58 - our watch list
347:59 - right now we have three different items
348:01 - and there's a couple of ways of going
348:03 - about doing this
348:04 - the first thing that we can do is i can
348:06 - just take this
348:08 - and just copy it
348:12 - three times and then i can just change
348:14 - the symbol to be
348:17 - the specific
348:20 - uh stock names so we'll have google
348:22 - microsoft and then amazon
348:29 - and i could maybe create a
348:32 - array i'll just say const
348:34 - responses equals empty array
348:45 - and i'll just put a number after these
348:50 - and then we can say responses
348:53 - dot push
348:58 - now do response one
349:02 - and we can just copy this
349:05 - three times
349:08 - and just change this to be response two
349:11 - and then response three
349:13 - and then for set stock instead of
349:15 - sending response that data we could just
349:17 - send the array responses
349:22 - and so let's test that out
349:34 - okay so after i fix that little typo we
349:36 - can see that
349:38 - it printed out all of the responses and
349:39 - i've got the responses for
349:42 - uh this is going to be google the next
349:44 - one is going to be
349:45 - for microsoft and the last is going to
349:47 - be for amazon so we were able to get all
349:49 - three of these however there's a couple
349:50 - things i don't like about this right
349:52 - let's ignore the fact that i'm hard
349:54 - coding all of the different companies
349:55 - because this is going to be a dynamic
349:57 - list that should be changed by the user
349:59 - but what i don't like about this is this
350:00 - is happening sequentially so what
350:03 - happens is we send a request to get the
350:05 - information for google and then once we
350:07 - get the only once we get the information
350:10 - back from google we'll then move on to
350:11 - response 2 and get the data from
350:13 - microsoft once we get the data from
350:15 - microsoft we'll then go and get the data
350:17 - all right this is very slow because
350:18 - we're doing one at a time we're sending
350:20 - one request to the api server and in
350:22 - fact if you go to the
350:25 - chrome developer tools
350:27 - and you go to network
350:33 - and so if you take a look at how long
350:34 - these requests take we can see the first
350:36 - request where we send the request to get
350:38 - google it takes
350:39 - all of this time only once we get the
350:41 - response back
350:42 - can we then go to the second request
350:45 - and then only once we get the response
350:46 - back can we go to the third request so
350:48 - it's doing these things one at a time
350:50 - and that causes this to be a very slow
350:52 - process and if the user wants to see
350:54 - um you know the data for 20 stocks
350:56 - imagine sending each one of those
350:58 - one at a time in series i would prefer
351:01 - to be able to send all of these requests
351:03 - all at once and then the api server just
351:05 - responds them as they come in and that
351:08 - way it should basically take the time it
351:10 - takes to send one request because we're
351:11 - sending all of them
351:13 - concurrently so how do we do that in
351:15 - javascript well what i'm going to do is
351:19 - i'm going to delete all of these
351:24 - or actually instead i'm going to leave
351:26 - those
351:27 - and i'm going to show you guys
351:29 - a tool called
351:31 - promise
351:32 - dot all
351:33 - when you call promise.all you provide a
351:35 - list
351:36 - you provide a list of promises and it's
351:40 - going to
351:41 - try to resolve all of them at once so
351:43 - it's going to send a request for all
351:45 - three of these guys all at once and so i
351:47 - could just copy this config
351:50 - starting from finhub
351:57 - and paste it into here
352:06 - and then just do a comma and then the
352:08 - second one
352:20 - and then finally we'll grab the last
352:22 - response
352:32 - so now i can delete all of these
352:37 - and all we have is this promise.all
352:38 - which has three different promises
352:40 - getting sent to one for google one for
352:41 - microsoft one for amazon and i can
352:44 - delete these
352:46 - and i'll set this to be const promises
352:49 - equals promise that all
352:55 - or actually let me just change this to
352:56 - be responses
352:59 - so we don't have to change anything else
353:04 - and now if i refresh this
353:11 - and it looks like it hit the api limit
353:13 - so i'm going to give it a couple seconds
353:16 - because we have at most 60 requests
353:19 - uh per minute so i'll give it a minute
353:20 - or two and then we'll run the request
353:22 - again and we'll take a look at um how
353:24 - quickly it works now
353:26 - okay so um because of the way react
353:28 - works uh it actually
353:30 - runs that use effect hook twice it
353:32 - basically mounts the component twice so
353:34 - ignore everything from here down what we
353:37 - care about is the first three and notice
353:39 - the
353:40 - the timing of the three requests they
353:42 - all get fired off at the same time and
353:44 - they all roughly complete around the
353:45 - same time so look how much quicker that
353:47 - is versus sending one and then only
353:49 - after that's done we send the next one
353:52 - and then only when that's done we then
353:53 - send so this goes all at once and it
353:55 - basically takes the time of one request
353:57 - because we're sending it all
353:58 - concurrently
353:59 - and so that's all done because of this
354:01 - promises promise.all
354:04 - method
354:06 - so that's great however we're still hard
354:08 - coding all of the companies we don't
354:09 - want to hard code the companies
354:11 - we want to take whatever's in the watch
354:13 - list and then create these dynamically
354:17 - so how exactly do we do that
354:19 - well it's actually pretty easy
354:21 - what we're going to do is we're going to
354:22 - make use of the javascript map method
354:25 - and
354:26 - what our main goal is right we have a
354:28 - list of companies
354:29 - and for each one of these we want to
354:31 - take this string and we want to generate
354:34 - a promise so we want to send a request
354:37 - using this axios instance and we want to
354:38 - do this for each one of these three
354:41 - and so anytime you want to
354:43 - make a change to every item of an array
354:47 - uh you want to make use of the map
354:48 - method i want to show you how that works
354:49 - so here i have this uh
354:51 - this uh array right here with the the
354:53 - three stocks like we had before and
354:56 - let's say that after each stock i just
354:58 - want to add an exclamation so i want to
355:00 - end up with an array where each stock
355:02 - has an exclamation
355:04 - how do i do that
355:06 - well it's pretty easy using the map
355:07 - method i'll say
355:09 - all we have to do is i'll say map
355:12 - i'll say well we call stocks
355:15 - and then we call the map method
355:18 - and what this is going to do is this is
355:19 - going to iterate through every item
355:21 - in the
355:22 - array and so we have to pass a function
355:25 - to tell it what do we want to do and
355:27 - this function gets one argument
355:29 - uh the well actually it gets multiple
355:31 - arguments but we're going to focus on
355:32 - just one which is
355:34 - the element
355:36 - and then we have whatever we want
355:38 - the function to do so what is the
355:40 - element well as we iterate through this
355:42 - array the element
355:44 - is going to be whatever the current item
355:46 - is that we're iterating over so the
355:47 - first time this runs it's going to be an
355:50 - element is going to be set to google the
355:51 - second time this runs the element can be
355:53 - called microsoft and then the third time
355:56 - it runs it's going to be amazon in fact
355:59 - if you want to make this a better name
356:00 - we can call this stock so this
356:01 - represents one of the stocks
356:03 - and then what this function returns is
356:05 - going to be what you want to change it
356:07 - to
356:08 - so we have stock which is going to be
356:09 - set to whichever one we're iterating
356:11 - over so the first time it's going to be
356:13 - equal to google so i'm just going to put
356:15 - this in the comments so this is going to
356:16 - be equal to google
356:18 - or
356:19 - google
356:21 - and what we want to do is we want to add
356:23 - an exclamation rate we want an
356:24 - exclamation like that so all we have to
356:26 - do is just return what do we want to
356:28 - change it to so we want stock
356:33 - plus exclamation that's it
356:37 - or you could do string interpolation and
356:39 - say um
356:42 - stock
356:43 - and then exclamation
356:45 - and so when it iterates through google
356:47 - it'll add the exclamation then when it
356:49 - iterates through microsoft it'll add the
356:51 - exclamation and then when it goes
356:52 - through amazon it'll add the exclamation
356:54 - and then we could set this to a value so
356:56 - i'll say this is my modified
356:59 - stocks because the thing about the map
357:01 - method is that it returns a brand new
357:03 - array
357:04 - and if i do a console.log
357:07 - modified stocks
357:11 - save this and then do a node
357:13 - test.js
357:15 - all right you could take a look at the
357:16 - result
357:17 - it successfully added the exclamation
357:19 - afterwards
357:20 - so we get access to each item as it
357:22 - iterates through it and then whatever we
357:24 - return in the function
357:26 - is going to be
357:29 - entered into the new array
357:31 - and so we're going to do the same exact
357:33 - thing with this but instead of adding an
357:35 - exclamation point we're going to
357:37 - generate a promise or a request to our
357:39 - api by calling the same thing
357:42 - so i'm going to delete
357:45 - all of this
357:51 - instead we could just call
357:53 - our watchlist array
357:55 - i'll say watchlist dot map
357:58 - okay and once again we're going to pass
358:00 - in a function
358:01 - we get access to the stock or the
358:03 - element that we're iterating over
358:04 - and then whatever we return from this
358:06 - function should be a
358:08 - request to our api so i'll say return
358:12 - i will do finhub
358:14 - dot get
358:16 - slash quote
358:20 - and then params
358:30 - and remember we want symbol
358:36 - and we'll set that to be stock because
358:38 - stock represents the symbol that we're
358:40 - currently iterating over and we just
358:41 - pass that in there
358:43 - so now if we test this out
358:55 - and i realized i forgot to do an await
358:58 - now if we take a look at responses
359:03 - we should see that we have now
359:05 - successfully gotten
359:06 - all three of our requests and if we go
359:09 - to our network section we can see that
359:10 - all three of them gets uh got sent out
359:12 - at the same time so that's exactly what
359:14 - we want
359:16 - and so i think we've pretty much done
359:18 - everything we needed to do there if you
359:19 - want to you can set the use state uh
359:22 - hook to be uh by default just an empty
359:24 - array it doesn't really matter however
359:26 - um before we kind of wrap things up and
359:28 - move on to rendering out all of this
359:30 - information uh inside a table if we
359:33 - actually do take a look at this
359:34 - console.log right here which is uh
359:36 - printing out all of the response objects
359:38 - before we uh store it into our state
359:41 - there's something i don't like about
359:42 - this
359:43 - and if we go to our console
359:46 - and we take a look at what the output
359:47 - looks like this is what's getting stored
359:49 - in our component state and if i open up
359:51 - the first one take a look this isn't
359:54 - actually just the data that we get from
359:55 - the api this is the response object from
359:57 - axios so we get the configuration we get
360:00 - the data which definitely what we want
360:02 - we get the headers and the request and
360:04 - most of this information we don't care
360:05 - about why would the component care about
360:07 - the configs of our axios request it
360:08 - doesn't why would it care about the
360:10 - headers it doesn't what about the
360:12 - request it does it the only thing our
360:14 - component cares about
360:15 - is the data i don't want anything else
360:18 - other than just the data so for each of
360:20 - these three items
360:22 - of these three requests i want to go in
360:24 - and extract the data
360:26 - and just delete everything else because
360:27 - we don't want to store unnecessary
360:29 - information in our state
360:31 - so ultimately what i want to do is and
360:33 - i'm just going to create a new file here
360:35 - this is just for demonstration purposes
360:36 - you don't actually have to do this
360:37 - yourself i'm just going to call this
360:40 - demo.js
360:42 - what i ultimately want to do is i want
360:44 - to store in our state for each one of
360:46 - the stocks an object that looks like
360:49 - this so we have the data which is going
360:50 - to contain all of our you know stock
360:52 - data whatever it's called
360:54 - and that's going to come from
360:56 - the data object here
360:57 - and then the next thing i want to do is
361:00 - notice how inside the data it says
361:02 - nothing about what stock this data is
361:04 - for
361:04 - so that's something we have to assign
361:06 - ourselves we can't just extract it from
361:08 - here in fact the information about where
361:10 - the stock is
361:12 - is actually within the config so if we
361:14 - go to the config under params we can see
361:16 - the symbol
361:18 - so inside here we want data to come from
361:21 - data
361:22 - and then we want to whoop data to come
361:24 - from data
361:26 - i'm just going to put this in quotations
361:27 - because the autocomplete's messing it up
361:30 - and then for the symbol this is going to
361:32 - come from config.params.symbol
361:38 - so i want to store this information an
361:40 - object that looks like this so before we
361:42 - save it into our set state i'm going to
361:44 - call the map method to iterate over all
361:46 - of these things and extract
361:48 - an object that looks exactly like this
361:50 - so we are already familiar with the map
361:52 - method so we could just do that again
361:54 - and i'm going to delete this demo.js
361:57 - and we'll go to our stock list
361:59 - and right here
362:00 - before we call set stock
362:03 - i'm going to do a responses dot map
362:08 - and we'll just say this is going to be
362:09 - response
362:12 - and like i said what do we want well
362:14 - we first want to get the data which is
362:16 - going to come from
362:18 - response.data right that's going to be
362:24 - data so the response which is you know
362:26 - in this case the first response we want
362:28 - the data property which is going to
362:30 - return this
362:31 - uh object here
362:35 - and then i want to store information on
362:36 - what is the symbol
362:40 - and that's going to come from the
362:41 - response
362:43 - and i already forgot where it's coming
362:44 - from but i believe it's config
362:46 - params
362:48 - symbol so
362:50 - config
362:52 - params
362:55 - symbol
363:05 - and
363:06 - remember we want to return an object so
363:08 - right now i didn't actually put it in an
363:10 - object so let me
363:11 - create that object and then
363:14 - paste that in here
363:18 - and then we return that object
363:23 - and we'll store it inside a variable
363:25 - called data
363:29 - and then change the set stock to be data
363:37 - and we'll save that
363:38 - we'll go back to here
363:45 - and i'm actually going to print out what
363:47 - our data looks like
363:49 - just to make sure everything looks good
363:54 - and so now we can see that data has just
363:57 - the
363:58 - data that we're looking for and then
364:00 - symbol is set to google so that's
364:01 - exactly what we want now our state looks
364:03 - exactly the way it should
364:05 - so now what we can do is work on
364:07 - rendering out this information inside a
364:10 - table
364:13 - so inside our table for the headers we
364:15 - want one for the name
364:17 - of the stock we're going to have one for
364:19 - the last the change the change
364:21 - percentage the high low open and peak so
364:23 - this is all going to go inside a table
364:25 - element
364:28 - so in our return statement i'm going to
364:29 - remove stock list
364:32 - inside here we'll do a table
364:39 - and i'm going to add a couple classes
364:40 - that come from bootstrap
364:44 - is going to be table
364:45 - hover and then mt-5
364:48 - so this is just the usual styling for
364:50 - the table this uh we'll make it so that
364:52 - when we hover our over one of the stocks
364:55 - it's going to change the color so we
364:56 - know which one we're hovering over
364:58 - and then this is just going to add a
364:59 - little margin to the top
365:03 - then we want to create our
365:05 - t head right so this is going to contain
365:07 - all of those headers that we just went
365:09 - over
365:10 - and i'm going to add some inline styles
365:14 - which is nothing more than just changing
365:16 - the color
365:28 - and now we'll do tr
365:34 - we'll do th scope equals
365:41 - this is going to be the name
365:48 - and i'm just going to copy this several
365:49 - times
366:24 - all right so now if we take a look we
366:25 - can see we've got our table with the
366:27 - different headers
366:29 - now we can add the actual data
366:34 - and the way we're going to render out
366:35 - this data because remember all of our
366:36 - data right now is stored inside this uh
366:39 - stock
366:40 - state uh is once again we're going to
366:42 - use our favorite
366:44 - map method
366:45 - so i'm going to call uh
366:48 - i'm going to do a curly braces so that
366:51 - we can provide some javascript and we're
366:53 - going to map through this so we'll do
366:55 - stock.map
366:58 - stock data
367:02 - and we want to return
367:11 - and so for the the row it's going to be
367:14 - th
367:15 - and here we're going to provide
367:18 - the stock data
367:23 - dot symbol
367:26 - and for the tr i'm actually going to add
367:27 - in a class
367:29 - this is going to be table dash row
367:34 - and remember because this is react we
367:36 - have to provide a key for each element
367:38 - we return in a list i'll say key equals
367:42 - and this is going to be stock data dot
367:44 - symbol we'll use the symbol as the key
367:55 - and so for
367:58 - this right then we can do td
368:04 - uh the next one's going to be
368:05 - stock data whoops
368:10 - we want stock data dot
368:17 - data dot c
368:25 - next one is going to be stock
368:26 - stockdata.data.d
368:29 - i'm actually just going to copy this a
368:31 - few times
368:42 - next one's going to be dot dp
368:45 - and then we have h
368:49 - l
368:55 - oh
369:01 - and then pc
369:16 - and it looks like i made a little typo
369:18 - here this shouldn't be
369:20 - dot symbol in the curly braces
369:29 - all right and now if we go back to our
369:30 - website
369:32 - when i clear this let's refresh this
369:34 - just make sure there's no errors
369:36 - we could see that we now have our chart
369:38 - and it's automatically going to get
369:40 - updated depending on what is our stock
369:43 - state
369:44 - a couple of final things that i want to
369:46 - do from an aesthetic purpose for our
369:49 - stock list component is that first of
369:51 - all we should color code the change and
369:53 - change percentage value depending on if
369:55 - it um if the stock went up or if the
369:56 - stock went down so we're just basically
369:58 - checking is the change negative okay we
370:00 - want to make it red if it's positive we
370:02 - want to make it green
370:03 - in addition to that um we also want to
370:05 - add in an icon showing the direction uh
370:08 - that it moved so if the stock went down
370:09 - we want the down icon if it went up we
370:11 - want the up icon so those should kind of
370:13 - go hand in hand
370:15 - with the change value
370:17 - so just to kind of hard code something
370:19 - if we go to the
370:20 - this td right here
370:23 - this is for the
370:26 - change and the change percentage if we
370:28 - want to change the color using bootstrap
370:29 - we can do class name
370:31 - equals and then text
370:34 - dash success
370:36 - that'll give us a green color and then
370:38 - if we change the bottom one to be class
370:40 - name equals
370:44 - text dash danger that's going to be the
370:45 - red color
370:50 - so now you can see under the change
370:51 - where we have text success we can see
370:54 - it's green and then when we see text
370:56 - danger it's going to be red so we have
370:58 - to define a function that'll check the
371:00 - value
371:03 - of what direction the stock went and
371:05 - then update this specific class
371:07 - depending on
371:08 - if it was positive or negative
371:11 - and so what i'm going to do is i'm
371:12 - actually going to delete
371:15 - success
371:16 - and danger so for these two we're just
371:19 - going to have it say text dash
371:20 - text dash and then what i want react to
371:23 - do is call a function that's going to
371:25 - contain the logic for determining
371:28 - uh if the stock went up or down
371:31 - and so first of all we're going to
371:33 - provide some javascript
371:36 - and we're going to use template literals
371:53 - and here i'm going to
371:56 - pass in a function that i haven't
371:58 - defined yet
372:00 - called change color
372:04 - and what we should do is we should pass
372:05 - in the stock
372:08 - data.data.d so that's going to determine
372:11 - the direction that
372:14 - the stock went
372:19 - and i'm going to define this function
372:20 - now it's going to be called change color
372:24 - i'm just going to define it right above
372:26 - our use effect hook so it's going to be
372:28 - const change color
372:33 - and then it's going to get in some
372:34 - variable and i'll just call this change
372:41 - and we're just going to use the ternary
372:43 - operator to do a return and we'll say if
372:46 - the change was positive so that means
372:48 - the stock went up
372:50 - we're going to return the text success
372:53 - and if it was not positive so that means
372:55 - it's negative we're going to return
372:56 - danger
373:00 - okay and so now we can see that it's
373:02 - automatically updating the color
373:04 - everything was negative in this case but
373:06 - if we have a positive stock then that
373:08 - should automatically turn green i think
373:10 - our entire stock market's going down so
373:12 - everything's just red at this point
373:14 - we're gonna do the same exact thing for
373:15 - this guy right here i could just copy
373:17 - this
373:21 - and just paste it in
373:30 - and we've got these updating dynamically
373:32 - as well
373:36 - next thing that we have to do is add the
373:38 - icons and i'm going to make use of a
373:39 - library
373:41 - and so we'll go to the package here and
373:43 - and we'll install a package called react
373:45 - dash icons
373:48 - and this is the one we want right here
373:50 - so i'll add this
373:55 - so for this library if we take a look at
373:56 - the documentation we can see that it
373:58 - supports icons from several different
374:01 - um
374:01 - you know frameworks uh we since we're
374:03 - using bootstrap we might as well just
374:05 - stick to bootstrap icons
374:07 - and the way that it works is that all
374:08 - you have to do is you do import the icon
374:10 - name and then you do react dash icon bs
374:13 - for bootstrap and all we have to do is
374:15 - then find our specific icons so it's
374:18 - going to be this one right here bs fill
374:20 - carrot downfill
374:23 - and if i search for carrot
374:25 - we should also be able to find the up
374:27 - one so bs fill carrot upfill as well and
374:30 - so if you just select this it's going to
374:32 - copy it into our clipboard which is
374:33 - awesome
374:34 - and now if we go to the top of our file
374:39 - i'm going to do import
374:42 - paste that in
374:44 - from
374:45 - react dash icons
374:48 - slash bs
374:51 - and this is just a regular component now
374:53 - so i can go down here
374:57 - and after this i can just put in another
375:00 - component
375:09 - all right and now you can see that
375:11 - you can see that the component is right
375:12 - there next to it so that's all we have
375:14 - to do however we have to
375:16 - select the right icon depending on what
375:19 - direction it's going and so what we're
375:21 - going to do is we're going to set up
375:22 - another function just like this change
375:24 - color function i'm going to create a
375:26 - render icon function that's going to do
375:28 - essentially the same thing
375:31 - so here i'm going to delete this
375:34 - and in here we'll pass in
375:37 - our function render icon
375:39 - and we'll pass in the same information
375:41 - which is going to be stock data
375:43 - dot data dot d
375:49 - and then i'm going to define our
375:50 - function
375:51 - const render icon
375:55 - get access to the change again
375:59 - and we're gonna do the same thing change
376:01 - greater than zero
376:05 - we're going to return
376:08 - and actually have to import the other
376:09 - one as well
376:12 - so we want the up carrot up fill
376:25 - and if it goes down then we're going to
376:27 - return the other one
376:40 - and i can copy this
376:42 - and paste it into this one as well
376:48 - now if we take a look
376:51 - we could see that all of them have an
376:52 - icon
376:55 - so i think that's a good stopping point
376:57 - on the stock list component there's
376:58 - still a couple more features we're going
377:00 - to have to add to it but i want to take
377:01 - a break from it for now and i want to
377:03 - move on to the autocomplete component
377:05 - and just to remind you guys what this
377:06 - component does it's going to be a simple
377:08 - input field where the user can search
377:09 - for available stocks
377:12 - so if the user wants to find you know
377:13 - tesla you'll just start typing in the
377:15 - letters
377:16 - tsla
377:17 - and you'll see that it should be able to
377:19 - search through that and it's an
377:20 - autocomplete so if you actually go slow
377:22 - enough and i just type in ts it's going
377:24 - to find all of the companies that start
377:25 - with ts
377:27 - and then i can just keep adding another
377:28 - letter
377:29 - and then it's going to keep narrowing
377:30 - down the field until we get to what
377:32 - we're looking for and then from there we
377:34 - can then select the company and then
377:36 - it's going to get added to the list
377:39 - and i want you to take a look at the
377:40 - network request right the for each
377:42 - letter they type it's going to
377:44 - automatically send a request back to the
377:45 - api
377:46 - so for the headers you can see that
377:48 - uh in this case the query it just has
377:51 - the letter t
377:52 - and the next one has the s
377:54 - l
377:55 - a so we send a request for every letter
377:56 - and you know we can obviously customize
377:58 - this so we don't send it for every
377:59 - single letter the user types however i
378:01 - wanted to keep this component as simple
378:03 - as possible so let's tackle creating
378:06 - this component and so we'll go to our
378:07 - autocomplete.jsx
378:10 - and within here in this parent div i'm
378:12 - going to add in a couple of class names
378:17 - uh it's going to be the width is going
378:19 - to be set to 50
378:21 - i'm going to add some padding
378:23 - i'm going to give make it rounded
378:26 - and then the margin is going to be auto
378:27 - so it centers
378:30 - and within this div we'll now add our
378:32 - input actually before we add our input
378:34 - i'm going to add another div
378:39 - i'm going to give it a couple classes so
378:41 - it's going to be form dash floating
378:45 - and then drop-down
378:49 - and within this div we'll then add our
378:51 - input
378:54 - and for the input we're going to add
378:56 - some inline styles
379:00 - mainly just the background color
379:24 - i'm going to give this an id of search
379:28 - type is going to be text
379:34 - and i give this a class name of form
379:36 - control
379:37 - this is coming from the bootstrap
379:38 - library
379:41 - and i'll also give it a placeholder
379:47 - of search
379:55 - and if we just take a peek at what this
379:57 - looks like that's pretty much what i
379:59 - want it to look like
380:01 - and for my autocomplete
380:05 - i'm going to disable the built-in
380:07 - autocomplete
380:10 - and then under the input i'm going to
380:12 - add a label
380:16 - we'll do html4 this is going to point to
380:20 - search so this is going to match up with
380:22 - the id of this
380:26 - input field
380:30 - and the label is going to say
380:32 - search
380:35 - all right and just to double check let's
380:36 - just take a look all right everything
380:38 - looks good
380:40 - now the next thing is we want the drop
380:42 - down so how do we make the drop down
380:43 - well there's all this is going to be
380:45 - pretty easy with the bootstrap library
380:50 - for the drop down
380:51 - under the label we can create a ul so
380:54 - i mean we can really render anything in
380:56 - the drop down and then i'm just going to
380:57 - add a couple of
380:58 - items
381:00 - i'll just say
381:01 - stock one
381:09 - two and three
381:12 - and for this ul we're gonna add in
381:14 - some class names
381:17 - mainly drop down dash menu
381:21 - and that's all we really have to do so
381:22 - this is our drop down and i'm going to
381:24 - actually go back to my browser for a
381:26 - second
381:27 - okay so you'll see that right now
381:29 - there's no drop down however if i
381:31 - inspect this and go to elements we can
381:33 - inspect this
381:34 - and then go down you can see that the
381:36 - drop down is there it's just right now
381:38 - at the moment
381:39 - if we go to computed we can see that the
381:41 - display is going to be set to none
381:44 - right now the drop down menu is set to
381:46 - display none so you don't see it so it's
381:47 - still actually on there but it's just
381:49 - being hidden and that's because when you
381:51 - assign drop down dash menu from the
381:53 - bootstrap library it's automatically
381:54 - going to give it a display of none and
381:56 - if you want to show it using the
381:57 - bootstrap library we have to add in a
381:59 - class called show and so now the drop
382:01 - down actually shows so this simple class
382:05 - is what is what's going to determine if
382:06 - we show the drop down or not so this is
382:08 - something to keep in mind and make sure
382:10 - you keep that on the top of your head
382:11 - when we're implementing the logic of you
382:14 - know rendering out all of the data once
382:16 - we start searching for it
382:18 - the next thing that we have to do is we
382:20 - have to make this a controlled input and
382:23 - this is going to be like with any other
382:24 - standard input in react so i'm going to
382:27 - import the ustade hook
382:38 - and to make this work i'm going to
382:41 - create a variable called search and set
382:43 - search
382:44 - so this is going to represent whatever
382:46 - the user is trying to search and i'll do
382:48 - use date
382:49 - and default is going to be an empty
382:50 - state
382:53 - and then in my input field
382:55 - we're going to set the value of the
382:56 - input to be set to search
383:01 - and then we're going to set a on change
383:02 - parameter whenever the user types in
383:04 - something
383:05 - and i'm going to say we're going to pass
383:07 - in a function
383:10 - and we're going to say that
383:11 - set search
383:13 - set that to be the value of
383:14 - e.target.value
383:18 - okay so what we're doing here is
383:20 - i'm saying that whenever the user types
383:22 - in you know a letter it's going to
383:24 - trigger this on change which is saying
383:26 - uh get the value of that of the letter
383:29 - that we just changed or whatever is our
383:30 - input field and set that to the set
383:33 - search function so that we can update
383:35 - our state
383:36 - and then the value of our input will be
383:38 - synced to whatever
383:40 - our state is so that's how we make this
383:41 - a controlled input
383:44 - and we can see everything types out just
383:46 - fine
383:47 - and if we can actually go back to the
383:48 - browser
383:49 - type here
383:51 - and go to my redux dev tools
383:55 - extension and go to the autocomplete we
383:58 - should see that the state should match
383:59 - up with whatever's typed
384:02 - okay looks like everything's good
384:08 - and now the next thing that we want to
384:09 - do is implement the fetching data logic
384:12 - so i'm going to import the use effect
384:14 - hook
384:21 - and then we're going to call the use
384:22 - effect hook
384:26 - and we'll do the same thing that we did
384:27 - before we'll pass an error function
384:31 - and before we get started sending a
384:34 - request or implementing the logic let's
384:35 - go back to the documentation
384:37 - and take a look at what endpoint we need
384:40 - for searching
384:42 - and the one we want is under stock
384:43 - fundamentals and under symbol lookup
384:46 - so you send a get request that's going
384:48 - to be the method
384:50 - and you send it to the slash search
384:51 - endpoint and you provide one query
384:53 - parameter which is the letter q and then
384:55 - whatever text the user searches for and
384:58 - then this is what one of the results are
384:59 - going to look like so it's going to
385:00 - include the you know the type symbol
385:03 - display symbol and then the description
385:06 - and so that looks simple enough
385:09 - so once again i'll do
385:10 - we'll define a function called fetch
385:12 - data
385:25 - we'll put in our try catch block
385:32 - and then below this we'll call fetch
385:34 - data
385:42 - and let's import our api our finnhub api
386:03 - and now we can do a const response
386:05 - equals and then we'll do
386:08 - binhub.get
386:10 - the endpoint is going to be the search
386:12 - endpoint
386:14 - and then params
386:16 - well this is going to be set to
386:18 - this queue and that will be set to the
386:20 - value of whatever the user searches
386:23 - we just say search
386:28 - and this is an asynchronous operation so
386:30 - we'll do a wait
386:32 - and then i'll do a console.log
386:35 - of response
386:37 - so let's take a look at that
386:45 - and so right away even though we haven't
386:47 - typed anything it looks like it's fired
386:49 - something and if i take a look at the
386:51 - config
386:52 - and get this is going to let's see
386:54 - where's the params
386:57 - yep params right here we could see that
386:59 - we're sending it with a
387:01 - empty
387:02 - search and when it sends an empty search
387:04 - to the api it returns everything so we
387:06 - got an array with 11 000 results so
387:09 - that's obviously not something what that
387:10 - we want and so right there what i think
387:12 - we should do is um
387:14 - [Music]
387:15 - we should first run a check
387:18 - and say that only if
387:20 - search
387:23 - dot length
387:25 - is greater than zero so if there's only
387:26 - if there's at least one letter
387:28 - that the user has searched then we call
387:31 - fetch data
387:37 - okay so let's reload this
387:41 - and so these these first results are
387:43 - just from this table
387:45 - um but we can see that we didn't
387:46 - actually uh search anything it didn't
387:48 - actually try to send a request to the
387:50 - search api so let's try um sending one
387:52 - letter
387:54 - and we can see that
387:57 - it did in fact
387:59 - send a request and we could see that the
388:01 - results as a whole bunch of stocks are
388:03 - companies with the letter a in it
388:06 - let's add another letter
388:11 - and this time if we take a look at the
388:12 - config we can see that the search is a n
388:16 - and the data we know we now have 28
388:18 - results
388:22 - we do the letter e now we should see
388:24 - that we now have
388:25 - 29 results
388:31 - and let's try one more letter
388:34 - and we can see that we have 25 results
388:36 - okay so it looks like it's working
388:40 - um but one thing
388:42 - that is happening with the use effect
388:44 - hook is that right now since there's no
388:45 - dependency array it's going to run every
388:48 - single time every single time the
388:49 - component re-renders
388:52 - and we don't necessarily want that we
388:54 - only want this to run anytime the search
388:56 - changes right
388:58 - because
388:59 - why else would we want this to run it's
389:00 - all we only want to send a request
389:02 - whenever the user has changed the search
389:03 - either added a letter deleted a letter
389:05 - or made some change or pasted something
389:07 - in so what we can do is under the
389:08 - dependency array you just say search so
389:11 - now this use effect hook will only run
389:13 - when search changes
389:15 - the next thing that we have to do is we
389:17 - have to store the results someplace the
389:19 - results from the api so i'm going to use
389:20 - the use state hook again and i'm going
389:22 - to call this a results
389:35 - and down here what we're going to do is
389:37 - i'm going to set results
389:39 - to be
389:40 - results dot data
389:43 - sorry response.data
389:49 - and once again just like the previous
389:51 - component that we worked with with the
389:53 - stock list we also want to do this is
389:55 - mounted trick where we make sure that
389:57 - the component is still mounted
389:59 - and so we also have to perform the
390:02 - return operation where we set that to be
390:03 - false so i'll copy this
390:21 - and we just do a check here is mounted
390:32 - okay so let's uh let me go to my redux
390:35 - or my react dev tools again i'm going to
390:38 - go to my autocomplete component and
390:40 - we're just going to take a look at the
390:41 - state so if i type in the letter a
390:45 - we could see that the state was now
390:50 - set and it looks like the way that the
390:53 - object was set it's a it's returning a
390:54 - count and a result i just want the
390:56 - result
390:57 - i don't want the count in there as well
390:59 - so i'm going to do response.data
391:02 - dot result
391:07 - let's try this again a
391:11 - okay we've got the results that's
391:13 - exactly what i want let's see if it
391:15 - updates
391:17 - right now there's 42
391:29 - now there's 24
391:32 - perfect now let me
391:37 - change that to an a
391:39 - we get 42 again and then if i
391:42 - set it back down to zero
391:44 - what do you think is going to happen
391:45 - so after i search something notice how
391:47 - the state doesn't get cleared out
391:51 - the state still has that a search result
391:53 - so what's happening here well if we go
391:55 - back to our code
391:58 - you can see here if it says that if
392:00 - search dot length is greater than zero
392:02 - we'll fetch data and in fetch data we
392:05 - set the results however what happens if
392:07 - we have a length of zero
392:10 - a length of one and then go back down to
392:12 - zero so we delete a letter
392:14 - well at no point are we updating
392:16 - set results to be back to an empty array
392:18 - so what we have to do is just put an
392:20 - else statement here
392:22 - and just say
392:23 - set results
392:28 - to an empty array
392:33 - and so that way if i type in the letter
392:35 - a
392:38 - i'll get 42 results again
392:40 - and then when i delete it
392:42 - it's going to hit that else statement
392:43 - and then it's going to remove all the
392:44 - entries
392:53 - and i'm going to delete the unnecessary
392:55 - console.logs
393:01 - okay so we've got all the data fetching
393:03 - logic implemented now we have to just
393:05 - show the drop down
393:08 - and so how do we do that remember i
393:10 - talked about how all we have to do to
393:12 - show the drop down is add this class
393:14 - called show
393:16 - and then it's going to show this drop
393:17 - down so what i want to do is uh
393:18 - implement a function
393:20 - that's going to figure out if
393:23 - if search has or if results is not empty
393:27 - then i want to add the show class if
393:29 - results is empty then i don't want to
393:31 - show it
393:34 - so i'm going to define a function
393:37 - called um
394:00 - render drop down
394:06 - so this function is actually going to be
394:08 - responsible for rendering this ul
394:11 - so i'm actually going to
394:16 - uh comment this out for now
394:19 - that didn't work
394:27 - and i'm going to put in a little logic
394:29 - i'm going to say drop down
394:34 - class equals and then we check if search
394:38 - is a true value so if search has um you
394:41 - know any text in it
394:42 - then it's going to return true if search
394:44 - is an empty string then it's going to
394:46 - return false so if it's true and there's
394:48 - some search in there then we're going to
394:50 - return the class show because that's
394:51 - what shows the drop down if not we're
394:54 - going to return null
394:59 - and then the rest of this class is going
395:01 - to be responsible for
395:03 - returning that ul so it's going to
395:05 - render out that ul
395:11 - and for class name
395:14 - what i can do is
395:15 - add a little trickery and i can say drop
395:17 - down dash menu
395:21 - and then i pass in
395:24 - drop down class
395:26 - so it's going to add in show if we have
395:28 - some sort of search result
395:34 - and for now i'm going to hard code some
395:35 - lis again
395:47 - okay so i type in a letter
395:53 - and i realized we have to actually go
395:55 - down here
395:58 - and call that function render
396:04 - render drop down
396:08 - so if i type in a
396:10 - you can see that now since there's a
396:12 - search result it renders out the drop
396:14 - down if i delete it it goes away
396:16 - so that seems to be working
396:18 - now all that we have to do is we have to
396:20 - take the results that we have and render
396:24 - out that information
396:26 - so we'll go to our render drop down
396:28 - we'll just delete these lis
396:31 - and once again we're gonna do
396:32 - our favorite map method
396:35 - so i will say results.map
396:51 - we have our li
396:53 - let me add in a class name
396:57 - of drop down dash item
397:03 - and then what i want is we have two
397:05 - values there's going to be
397:06 - result.description
397:13 - and then result dot symbol so i want the
397:15 - company name and then followed by the
397:17 - result uh of the symbol of the company
397:22 - and i actually want that
397:24 - wrapped in parentheses
397:26 - so i'll do parentheses
397:37 - let's try this again
397:42 - all right look at that so i got the
397:43 - company name followed by the ticker
397:49 - and we can see this is a massive list
397:51 - and what i want to do is i want to
397:53 - implement some scrolling and i want to
397:55 - hard code the
397:57 - height of this
397:58 - uh of this drop down so it's not going
398:00 - all the way down like that i don't like
398:02 - the way that looks
398:03 - and to change that under the ul we're
398:05 - going to add in some inline styles
398:10 - the first thing is going to be the
398:11 - height i'm going to set this to be
398:14 - 500 pixels
398:19 - overflow y
398:20 - so this is going to set this to be
398:22 - scroll
398:26 - uh overflow
398:28 - x i want to
398:30 - i want to hide the scroll bar in the x
398:33 - direction
398:35 - and i also want to add change the cursor
398:37 - to be a pointer
398:40 - so the user is aware that he can select
398:42 - one of them
398:46 - let's try this again
398:50 - that looks much better you can see we
398:51 - can scroll through the results
398:55 - and one other thing is that since we're
398:57 - rendering out a list of items
399:00 - just like with any other list in react
399:01 - we have to provide a key so i'm going to
399:04 - set the key to be
399:06 - the symbol again so we'll say
399:08 - result
399:09 - dot
399:10 - symbol
399:14 - so now that we've set up the
399:16 - autocomplete functionality the next
399:18 - thing that we want to do is after a user
399:20 - searches for a list of companies once
399:22 - they find the company that they want to
399:23 - add to their list they should be able to
399:25 - select it and then it should show up on
399:27 - this list
399:28 - so we should set up a on click event
399:30 - handler
399:31 - so that when they click on a specific li
399:34 - it should then add it to the list of
399:36 - stocks that the user watches
399:38 - now the problem with this is that the
399:40 - list of
399:42 - stocks that a user wants to watch is
399:44 - currently in the stock list component
399:47 - under the watch list state
399:50 - so our autocomplete component does not
399:52 - have access to the state of the stock
399:55 - list component so we're in a little bit
399:56 - of a pickle
399:58 - and i've set up a powerpoint just to
400:00 - kind of quickly show what the issue is
400:02 - and how we can tackle
400:03 - the
400:05 - the issue and some of the different
400:07 - solutions that we have at hand
400:10 - in the stock summary page we have
400:12 - basically three components we have the
400:14 - stock summary page component itself
400:16 - which is responsible for rendering out
400:18 - the stock list component and the
400:19 - autocomplete component
400:22 - and the stock list component has the
400:24 - list of stocks the user wants to watch
400:26 - that he's storing in a use state hook
400:28 - and the variable's called watchlist and
400:31 - the problem with this is that
400:32 - unfortunately the autocomplete component
400:34 - does not have access to the watch list
400:38 - so when the autocomplete component wants
400:40 - to add something to the watch list at
400:41 - the moment he cannot do that so we have
400:44 - a couple of different options the
400:46 - simplest solution to this is to
400:48 - lift the state
400:50 - of this watchless state up a component
400:53 - specifically up to the stock summary
400:55 - page that is a parent component to both
400:57 - of these components
400:59 - and then what we can do is then we can
401:00 - pass that information down um as props
401:03 - to stockless and autocomplete
401:06 - and that would work just fine however
401:08 - what i want to do is i want to make use
401:10 - of the context api i think this is good
401:12 - for learning purposes and you can take a
401:13 - look at how we can create global state
401:15 - using the context api
401:18 - and the way that the context api works
401:20 - is actually very simple what's going to
401:22 - happen is we're going to create a
401:24 - component called a provider component
401:25 - and this is really fundamentally just a
401:28 - regular react component that wraps your
401:30 - entire application
401:32 - and so by wrapping your entire
401:34 - application in this provider component
401:35 - what it does is it allows individual
401:37 - components
401:40 - to access its state so we can move the
401:42 - watchlist state up to the provider
401:44 - component and then the stock list and
401:47 - the autocomplete components can then
401:49 - query the state and get access to that
401:50 - state directly
401:52 - and any other components in our
401:54 - application can access it directly
401:56 - without having to pass it down as props
401:58 - so that's what we're gonna do moving
401:59 - forward we're gonna implement a
402:02 - a context to store our watch list and
402:05 - give us functions uh that'll manipulate
402:08 - being able to add and remove items from
402:10 - our watch list
402:13 - so let's go ahead and implement our
402:14 - context i'm going to create a new folder
402:18 - in our source directory called context
402:19 - this is going to store all of our
402:20 - context we just have one for this
402:22 - project
402:24 - i'm going to call this
402:26 - watchlist
402:28 - context
402:30 - dot jsx
402:32 - and to create a context we're going to
402:34 - import create context from the react
402:37 - library so i'll do import
402:42 - create context
402:46 - from react
402:49 - and then to actually create the context
402:51 - all we have to do is export cons i'm
402:53 - exporting it because we're going to have
402:54 - to import it in another file
402:56 - and then just provide the name of your
402:57 - context so i'm going to call this watch
402:59 - list context
403:03 - and then we call create context
403:06 - and we have now successfully created a
403:07 - context
403:08 - after we create the context what we have
403:10 - to do is we now have to create that
403:11 - special provider component to wrap our
403:13 - application in that provider's component
403:16 - that provider component is responsible
403:17 - for passing data down to any components
403:20 - that's interested in receiving that data
403:23 - and to create this component it's just a
403:25 - regular react component almost 100
403:28 - identical we just do export const and
403:31 - then i'm going to call this watchlist
403:33 - context provider
403:35 - you can call this component anything you
403:37 - want but i usually just like to grab the
403:38 - name of the context and then add the
403:40 - word provider afterwards
403:44 - and then we'll pass in the props
403:50 - and then we have to
403:52 - return
403:55 - and this is the only difference
403:57 - so we're going to return
403:59 - a special component called watch list
404:02 - context
404:03 - so we're grabbing the context right
404:06 - and from there we can grab something
404:07 - called a provider component
404:10 - and that's all you got to do
404:13 - and this needs the dot provider as well
404:16 - okay and so what we can do now is we can
404:18 - take this provider component and wrap
404:20 - our entire application and our
404:21 - application can have access to any data
404:23 - they want
404:24 - and when i say any data at once it means
404:26 - what i mean is any data within this
404:28 - component
404:30 - because like i said
404:32 - this component is just a regular react
404:33 - component
404:34 - that can make use of the use date hook
404:36 - the use effect hook any other hooks that
404:38 - you want
404:40 - and so the stock list has access to the
404:42 - watch list and i want to make this watch
404:44 - list accessible to all components what
404:46 - i'm going to do is i'm actually just
404:47 - going to take this from here remove it
404:48 - from here and i'm going to move this
404:50 - exact use state hook into my context
404:53 - because remember my provider component
404:54 - is just a regular react component so i
404:57 - can just paste that in there and i can
404:58 - now manage my watch list within my
405:00 - provider
405:02 - so how do i actually pass this data down
405:05 - to my other components well inside this
405:08 - component here i have a value prop and
405:10 - here i can pass down whatever i want so
405:12 - if i want to pass down watch list i can
405:15 - and this is perfectly fine but i'm going
405:16 - to in the future pass down a few other
405:18 - pieces of information so the data that i
405:21 - want to pass down in the value prop i
405:23 - actually want it to be an object
405:26 - and this is just an example of what i
405:27 - want it to look like it should be an
405:29 - object
405:30 - obviously watchlist
405:36 - should get passed down
405:40 - and i will also have an extra function
405:42 - to add a stock to the list to the watch
405:44 - list as well as delete a stock
405:48 - from the watch list as well so that's
405:50 - what i wanted to look like so what i'm
405:51 - going to do is i'm going to remove this
405:52 - instead of just passing watch list i'm
405:54 - going to pass down an object because i
405:56 - want an object and right now i just have
405:58 - a watch list but we'll implement the
406:00 - logic for those other things in a second
406:02 - and i'll remove this
406:07 - so our
406:08 - context and our provider component are
406:11 - done we now have to take our provider
406:13 - component and wrap our entire
406:14 - application so if we go to myapp.jsx
406:19 - and it looks like it already got
406:21 - imported but
406:22 - i'll just type that in real quick for
406:24 - you so it's going to be import
406:28 - watch list context provider we want the
406:31 - provider not the context
406:33 - from
406:35 - context
406:36 - watch list context
406:41 - and now we have to take this special
406:43 - component and wrap our entire
406:45 - application
406:46 - so technically you don't actually have
406:47 - to wrap your entire application you just
406:49 - wrap it in whatever subset of components
406:51 - should have access to that provider so
406:53 - i'm just going to
406:54 - wrap my entire application just to keep
406:56 - it simple and i'm going to call my watch
407:00 - list context provider
407:08 - and i take the bottom one and then just
407:10 - move it under browser router so now if
407:12 - you actually take a look at our
407:13 - application
407:14 - our actual application is this
407:16 - and all of these components within this
407:18 - watchlist
407:19 - context provider have access to that
407:21 - value prop that we're passing down
407:26 - and i'm it's it's throwing an error and
407:27 - that's just because i'm using this use
407:30 - state hook but i never imported it so
407:31 - we'll import it
407:36 - okay so everything's done
407:38 - no errors but interestingly enough
407:40 - nothing is being rendered onto our
407:41 - screen what's happening well we know
407:44 - that we changed the watchlist context
407:46 - provider and we added in here so that's
407:48 - obviously breaking it but let's
407:49 - understand why it's breaking
407:52 - so notice how our application starting
407:54 - from browser router is now being passed
407:56 - into our watchlist context provider as a
407:58 - child prop right it's no different than
408:01 - you know if i had like a an h2
408:04 - and then i'm providing
408:05 - you know some text right some text is a
408:09 - child prop i'm passing it in between the
408:11 - tags
408:12 - so if i go to my context provider
408:15 - take a look at what we're rendering we
408:16 - get the props but we're not doing
408:18 - anything with it right we just have our
408:19 - context provider and that's it so we
408:21 - have to tell our context provider hey
408:23 - let's render all of our child props
408:26 - normally like they should be so all we
408:28 - do is just do props dot children so this
408:30 - is going to render all of the context
408:32 - between our provider tags
408:33 - okay and now if you take a look
408:36 - everything is working as it should
408:39 - if we take a look at our app it's
408:40 - working and more importantly if i go to
408:42 - my watchlist context provider in my
408:44 - react dev tools
408:46 - we can see that
408:47 - our state is being there and is working
408:50 - and we can see that
408:52 - everything looks to be good and now our
408:54 - next task is going to be how can we make
408:56 - it so our components have access to the
408:58 - state within our provider
409:02 - okay so now to make it so our stock list
409:05 - component actually grabs the watch list
409:07 - from our
409:09 - um from our context instead of storing
409:11 - this himself we're gonna actually remove
409:13 - this
409:13 - i'm gonna delete this it's gonna break
409:15 - our application that's okay
409:19 - and to retrieve
409:22 - the data being passed down in this value
409:24 - prop what we have to do is we have to
409:26 - make use of a specific hook called use
409:28 - context
409:29 - so i'm going to import use context
409:35 - and then we just say use context
409:38 - and then we have to pass in the a
409:40 - reference to the actual context
409:42 - which is watchlist context so we have to
409:45 - import that as well
409:49 - i'll say import
409:52 - watch list context remember this is the
409:53 - context not the provider
410:07 - okay and then we store this in a
410:09 - variable
410:12 - you know const value
410:14 - but that's going to return
410:17 - this entire value prop
410:24 - if you want we can just do a
410:26 - console.log a value
410:39 - and if we take a look you can see that
410:42 - we get access to an object with the
410:44 - watch list
410:45 - so that's perfect
410:46 - that's all we have to do to get access
410:48 - to anything passed down from a provider
410:50 - now we don't need access to the entire
410:52 - value we just want access to watch list
410:55 - at the moment so i'm going to
410:56 - destructure out watch list
411:00 - and now our app is going to work exactly
411:02 - as it should
411:09 - and i need to remove that console.log
411:15 - all right perfect
411:18 - so now we can actually go back into the
411:21 - autocomplete
411:23 - component and implement the logic
411:25 - for
411:26 - adding a new stock but
411:28 - what i want to do is i don't want to
411:30 - store that logic within the autocomplete
411:32 - component i want to store that in my
411:34 - context and i want the context to pass
411:36 - down a function so that the only thing
411:38 - the autocomplete
411:39 - component has to know what to do is just
411:41 - call that function
411:44 - so let's go back to our context
411:46 - and i'm going to define a couple of
411:48 - functions so the first one is going to
411:50 - be add stock how do we add a stock to
411:54 - our watch list
411:55 - so this is going to be
411:57 - function
411:59 - and this function the
412:03 - autocomplete component is going to pass
412:04 - the name or the symbol of the stock and
412:06 - all we have to do is say
412:10 - if
412:11 - or
412:12 - and all we have to do is just say set
412:15 - watch list
412:19 - and then we
412:20 - spread the current so we copy over the
412:23 - current watch list
412:24 - and then we add in the new one and the
412:26 - new stock and that's it however this is
412:28 - going to create one issue
412:30 - and that is that what happens if we try
412:32 - to add a stock that's already in this
412:34 - list right let's see google's already in
412:36 - there and then the user searches google
412:38 - and then tries to add it well now we're
412:40 - going to end up with two googles and
412:42 - that would look stupid in our
412:43 - application we don't want to have the
412:44 - same stock listed twice so we have to
412:47 - perform a check to make sure that the
412:49 - stock that's passed into this function
412:51 - doesn't already exist in the watch list
412:53 - easiest way to do that we could just do
412:55 - an if statement and just say watch list
412:58 - and then we call the index
413:00 - of and then we pass in the stock and if
413:03 - this equals equals equals negative one
413:06 - that means it's not currently in that
413:08 - list so only if it's not in the list
413:11 - will we
413:12 - add it in
413:17 - and so that's all the logic for adding a
413:19 - stock let's now implement the logic for
413:20 - deleting a stock
413:30 - and to delete
413:32 - a specific stock from a list we can call
413:34 - watchlist
413:35 - dot filter
413:41 - and this is going to iterate over the
413:42 - array and we'll get access to the
413:45 - specific element it's iterating over
413:48 - and we'll just say we want to return if
413:50 - element
413:51 - does not equal equal
413:56 - stock so that means it's going to go
413:59 - through the list
414:00 - in our current watch list and it's going
414:02 - to find all of the entries that do not
414:03 - match the stock that's passed into this
414:05 - function and if they do not match then
414:08 - we will keep it but if they do match
414:11 - we'll delete it that's all
414:16 - and then this is going to return a new
414:18 - array and so all we have to do is just
414:20 - then call set
414:22 - watchlist
414:24 - and then pass the result of that into
414:26 - set watch list
414:29 - and then we're going to pass these down
414:31 - so i'll do
414:35 - add stock and delete stock
414:42 - so now that we have the functionality
414:43 - for adding stock i'm going to go to our
414:45 - autocomplete component
414:47 - and actually it looks like i have an
414:48 - error hold on let me
414:52 - yeah i'm not sure what happened there
414:53 - but i just saved this file again and
414:55 - seems to fix the issue so it doesn't
414:57 - look like there's anything wrong but
414:58 - let's go to our autocomplete component
415:01 - and let's set up that uh use context
415:03 - hook
415:04 - i'm going to say
415:06 - const
415:09 - which i'll just say use context
415:14 - and this is going to be the watch list
415:16 - context and let's just copy the imports
415:19 - from the other one so i'm going to copy
415:21 - this
415:28 - and then we'll import use context
415:32 - and then what do we want
415:34 - we just want to destructure out the add
415:38 - stock
415:41 - and once we get that what we want to do
415:43 - is on the specific li
415:47 - for the result we're going to set up a
415:49 - on click
415:51 - event handler
415:54 - and here
416:00 - we're going to pass an anonymous
416:01 - function
416:02 - that's going to call ad stock
416:06 - and we're going to pass in the
416:07 - result.symbol
416:10 - so this is just when the user clicks on
416:12 - one of the results
416:16 - it's um
416:18 - let me find an actual stock uh when it
416:21 - clicks on this
416:22 - it's going to pass the symbol
416:24 - of that specific company to the add
416:26 - stock function that we get from the use
416:28 - context which will then go to the use
416:30 - context and then i'll add it to the list
416:34 - so i'm going to go to inet we'll search
416:37 - that
416:40 - and then we'll click on this
416:43 - okay and this thing still stays open but
416:46 - that's okay we'll fix that
416:48 - and i don't think it actually worked
416:50 - so let me actually go back to the
416:52 - website
416:54 - okay so let me try this again
417:02 - okay so it looks like there's some sort
417:03 - of issue
417:05 - let's go back to my autocomplete and
417:08 - figure out what i did wrong
417:10 - i did an on click
417:12 - we call ad stock
417:15 - and
417:16 - it looks like i figured out the issue so
417:18 - what's happening here is that when i
417:21 - select
417:22 - anet it is technically getting added to
417:24 - the watch list
417:26 - and i can actually see that by going to
417:28 - my react
417:29 - dev tools and going to my watchlist
417:31 - context provider we can see anec got
417:33 - added but the problem is is that
417:36 - once it gets added if we go to our watch
417:38 - list context
417:40 - sorry our stock list component so this
417:42 - is the component that renders out the
417:43 - table
417:44 - it runs this use effect hook
417:47 - and this use effect hook is responsible
417:48 - for getting the quotes of all of the
417:50 - items that are in the watch list
417:53 - however if you take a look at when this
417:55 - use effect hook runs it only runs
417:58 - when the component mounts so after it
417:59 - mounts it does not matter how many items
418:01 - we add to the watch list it's never
418:02 - going to run again so we want this to
418:04 - run every time watch list changes so all
418:07 - we have to do is just pass that into the
418:08 - dependency so we'll just pass in watch
418:10 - list and so now anytime watch list gets
418:12 - updated
418:14 - a stock will get added and we can see
418:16 - that it already got added in there
418:19 - so that's why it wasn't getting updated
418:21 - so i'm going to refresh this and we'll
418:22 - test this out again so i'll type in a
418:24 - net
418:28 - select it there we go it gets added in
418:30 - perfect now i do want the drop down menu
418:32 - to go away
418:33 - after i select an item
418:36 - so i'll go back to my autocomplete
418:39 - and this on click event handler
418:43 - i'm going to actually
418:46 - remove this shorthand notation i'm going
418:48 - to add in two steps so
418:51 - it'll be
418:56 - add stock again
418:58 - result dot symbol
419:00 - and then afterwards what we want to do
419:02 - is we want to clear out the search and
419:03 - when we clear out the search it'll
419:04 - automatically remove the drop down
419:06 - so i'll say search
419:08 - set search
419:11 - so we're calling that hook right here
419:13 - and we're gonna set the search for our
419:15 - input to be empty and when it's empty
419:18 - the drop down will lose or it'll get the
419:20 - uh extra it'll lose the show
419:23 - class which means it'll be hidden from
419:25 - there on out so let's try this again i'm
419:27 - going to save this
419:35 - select this and we can see the drop down
419:38 - goes away
419:41 - so the last thing that we have to
419:42 - implement from the summary page is the
419:44 - delete functionality so we're removing
419:45 - an item from the list however there's
419:48 - something i want to
419:50 - show you guys
419:51 - when it comes to
419:53 - event propagating within react and the
419:56 - only way for me to show you guys the
419:58 - issue would be to first implement the
419:59 - detail page
420:01 - so we're actually going to take a break
420:03 - from the summary page we're going to the
420:04 - last thing of removing the item we're
420:06 - going to cover that at the end of the
420:07 - project
420:09 - instead i want to move on to the detail
420:10 - page and just to kind of reiterate how
420:11 - this is supposed to work when i select
420:13 - on a stock when i select in a row take a
420:16 - look at the path right now it's the root
420:17 - path i select this it then goes to
420:19 - detail then the name of the stock and
420:21 - then it loads up the detailed page so
420:23 - let's implement that this is going to be
420:25 - done through react router and you'll see
420:26 - that it's actually pretty easy
420:28 - and we made use of the apex charts
420:31 - library to build out the charts and
420:33 - you'll see that it'll actually be dead
420:34 - simple doing that as well
420:38 - so let's go back to our app
420:42 - and let's go to our stock list component
420:46 - and let's find our
420:49 - uh our specific row so when a user
420:51 - clicks on a row we want to call an on
420:53 - click event handler
421:00 - and right now i'm just going to have
421:01 - this call a function
421:03 - and this function is going to be called
421:08 - handle
421:09 - stock
421:11 - select so let's define this function
421:27 - and what we want to do is when we select
421:29 - a specific row we want to tell react
421:32 - router which is our routing library to
421:34 - route to a url of slash detail slash
421:37 - stock name how do we do that well react
421:40 - router comes with a built-in hook
421:42 - that makes it very easy so let's import
421:44 - this hook from react router
421:49 - we'll do import
421:56 - use navigate
421:59 - from
422:01 - react dash router
422:02 - dom
422:05 - and now we'll just do a const
422:09 - navigate equals
422:11 - use
422:12 - navigate
422:14 - okay and so now if we want to go to
422:16 - another path or url we just use this
422:19 - navigate object
422:20 - so i'll say
422:22 - navigate
422:28 - and then all i have to do is just pass
422:29 - in the url that we want to for the user
422:31 - to
422:32 - so we want to go to detail
422:35 - slash and then the stock name so we have
422:38 - to get the stock name so we'll say that
422:40 - um
422:41 - the event handler has to accept it as an
422:43 - argument so we'll say um
422:45 - symbol
422:46 - so the symbol of the stock and then
422:50 - we can just do string interpolation and
422:52 - then just pass in symbol
422:55 - so now when we actually call this
422:57 - when it gets selected we have to pass in
423:01 - the symbol so where is the symbol it's
423:03 - stock
423:05 - data dot symbol
423:07 - i'm just copying what's here
423:10 - and that should be all we have to do
423:11 - actually
423:12 - so let's go
423:14 - take a look
423:17 - okay so if we take a look at the url
423:19 - right now
423:20 - we can see it's at the root url so this
423:22 - is the equivalent of just a forward
423:23 - slash
423:25 - and so i'm going to select google
423:28 - and we can see that it routes to slash
423:30 - detail google and we can see the stock
423:32 - detail page so everything is working
423:35 - exactly the way we expect it however one
423:37 - thing is
423:38 - um
423:38 - i want to be able to get the clicker
423:40 - icon instead of the regular pointer
423:42 - because i want to give the user a little
423:43 - bit more feedback
423:46 - and we can easily do that by passing an
423:48 - inline style
423:52 - and i can just say cursor is set to
423:54 - pointer
423:58 - now can see that we get a pointer
424:01 - perfect
424:03 - okay so let's go to our stock detail
424:05 - page
424:07 - now in our stock detail page the
424:10 - page has to be aware of
424:12 - the specific url because the symbol or
424:15 - the the stock that we want to see detail
424:17 - is in the url so how do we extract that
424:19 - information from the specific url like
424:21 - how do we get it
424:22 - how do we get this value from the url
424:25 - well once again we're going to make use
424:27 - of the react router library
424:32 - and we're going to use a hook
424:35 - called use params so let me import that
424:47 - so now i'll just do
424:48 - [Music]
424:50 - const
424:54 - x equals use params so this will get all
424:58 - of the parameters however we don't want
424:59 - all of them i just want the symbol
425:02 - right and that parameter
425:04 - where that comes from the name is going
425:06 - to come from our
425:07 - original route so whatever we passed
425:09 - here where it says detail and then the
425:11 - variable this parameter we can just
425:13 - extract out symbol
425:18 - so here i can destructure out symbol
425:23 - and
425:24 - let's render out stock detail page
425:28 - and then let's just
425:30 - render out the
425:31 - symbol to see if we can actually get
425:33 - that information
425:37 - so now if i select google we can see
425:40 - stock detail page google so we were able
425:41 - to get
425:42 - that parameter
425:46 - for the stock detail page what i'm going
425:48 - to do is i'm actually going to fetch the
425:50 - data within the stock detail page
425:52 - component and then i'm going to pass
425:54 - that data down to the chart component i
425:57 - want to keep the chart component as
425:59 - simple as possible i just want the chart
426:00 - component to be responsible for
426:02 - rendering out the data i don't want it
426:03 - to be responsible for fetching the data
426:05 - so i'm going to have the page actually
426:07 - fetch this information so to do that
426:09 - we're going to make use of the use
426:10 - effect hook again
426:33 - and i'll define my function for fetching
426:35 - data
426:54 - and let's import axios so i'm just going
426:57 - to copy the import from another file
427:00 - well actually i might as well just type
427:02 - it out
427:20 - now we can do a const response
427:23 - equals and then we can fetch our data
427:25 - but we have to find out what data point
427:27 - do we actually want to fetch or what
427:29 - which endpoint do we want to fetch so if
427:31 - we go under stock price
427:33 - you want to go under candles so this is
427:35 - going to return historical data
427:38 - and to get the information you send a
427:40 - request to stock
427:42 - slash candle
427:44 - and then the parameters are going to be
427:46 - first of all the symbol like you would
427:47 - expect
427:49 - then the resolution so what's the
427:50 - resolution if we go down here
427:53 - resolution is going to be what is the
427:55 - gap between each data point that we want
427:57 - to plot
427:58 - so this is um every minute so we'll get
428:00 - a data point for every single minute
428:02 - every five minutes 15 minutes 30 minutes
428:05 - 60 minutes uh one data point per day one
428:07 - per week one per month so
428:09 - if we're going to chart out um you know
428:12 - one day's worth of history we may want
428:14 - to do every five minutes or every minute
428:17 - however if we're going to chart out one
428:19 - year worth of historical data you don't
428:21 - want to do every minute that's too many
428:22 - data points i would instead prefer
428:24 - either every day or even every week
428:28 - so that's what the resolution is then
428:29 - from and to so from is going to be
428:32 - you know what is the earliest time that
428:35 - we should get a data point from and two
428:37 - should be what should be the last data
428:39 - point time stamp from
428:41 - i worded that incorrectly that should be
428:43 - the last
428:44 - time that we should grab a data point
428:46 - from so if we want um one day's worth of
428:49 - historical data the from would be the
428:51 - unix time stamp for exactly 24 hours ago
428:54 - and then the two would be the current
428:56 - time
428:57 - and then if it's a year then the from
428:59 - would be moved back a year and so on
429:02 - so let's go back here
429:04 - and i'll do a weight
429:06 - binhub.get
429:10 - and this is going to be
429:13 - stock candle
429:17 - and then params
429:20 - well we we're gonna pass in the symbol
429:23 - then we need the from
429:27 - the to and the resolution
429:30 - okay so
429:32 - how do we get this information
429:33 - well we're gonna make use of the date
429:36 - object so i'm going to go
429:40 - and say const date
429:43 - equals
429:44 - new date
429:48 - so that's going to get
429:51 - the current date and if or if i want to
429:53 - get the current timestamp i'll do
429:55 - uh const
429:57 - current time
429:59 - equals
430:01 - date dot get time
430:05 - so at that point we can take the current
430:06 - time and pass it into the two because
430:09 - that's the last data point because we
430:12 - want the the current time to however the
430:14 - api i found out and this took me a a
430:17 - quite amount of time quite a bit of time
430:18 - trying to figure this out but this get
430:21 - time returns it in milliseconds the api
430:23 - expects it in seconds so to convert this
430:26 - to seconds what we want to do is we want
430:28 - to divide it by a thousand so that's
430:30 - going to give us seconds and then we
430:32 - also want to do a math
430:33 - dot floor
430:38 - so that's just going to truncate any
430:40 - extra decimals
430:43 - and in fact i think it might actually
430:44 - help if i just kind of lab this up real
430:46 - quick so we'll say
430:48 - const date
430:50 - equals a new date
430:54 - and then if i do a const current time
430:58 - equals date dot get time
431:03 - and if we run
431:06 - node
431:07 - test.js
431:11 - and i should have console logged it
431:19 - now if i run this
431:22 - this is going to be the unix timestamp
431:23 - for the current time
431:25 - in milliseconds
431:27 - if we want to convert it to seconds
431:30 - current time seconds
431:34 - and then we do a console log
431:45 - so you can see
431:47 - that this is now being represented in
431:48 - seconds let's just move the decimal over
431:50 - three places so that's really all that's
431:52 - doing
431:53 - and if we ever want to get like if we
431:55 - want to go get the timestamp for one day
431:57 - ago how would we do that well
432:00 - we can take the
432:03 - current time in seconds
432:05 - so i'll say
432:06 - current time in seconds
432:09 - and we want to subtract
432:11 - 24 hours right that's one day so how do
432:13 - we get to 24 hours well this number is
432:16 - in seconds so we have one second how
432:19 - many seconds are in a minute we have 60
432:20 - seconds in a minute we have 60 minutes
432:23 - in an hour and we have 24 hours in a day
432:26 - and so this is going to be
432:27 - we'll call this one
432:33 - one day
432:35 - ago
432:39 - so this is going to give us the time for
432:40 - one day ago um how would we do one week
432:43 - ago well we can do
432:46 - which is going to be current time in
432:48 - seconds
432:49 - minus
432:50 - this represents one day we already know
432:52 - that
432:53 - and then we just multiply it by seven
432:55 - because a week is seven days
432:57 - and then what's a year it's going to be
433:00 - a year is just going to be 365.
433:03 - so that's all we got to do
433:04 - to get the to and from time
433:08 - so we have the current time let's get
433:09 - the time for one day ago so i'll say
433:11 - const one day
433:13 - equals current time
433:19 - minus 24
433:21 - times 60
433:22 - times 60.
433:26 - and so the from
433:28 - is going to be one day
433:31 - so from one day ago to the current time
433:34 - so the two is going to be
433:37 - current time
433:39 - and then the resolution
433:42 - we can do every
433:43 - 30 minutes
433:45 - and now let's fetch this data
433:51 - and we actually want to do this only
433:53 - when the component mounts so fetch
434:00 - data and then we'll console.log the
434:03 - response
434:13 - okay so if we take a look at the
434:14 - response something interesting is
434:16 - happening
434:17 - it says that
434:19 - data under data it says no data so i'm
434:21 - not really sure what's going on
434:23 - but as a test i'm going to change this
434:27 - to be three days ago and i want to see
434:29 - if this fixes the issue
434:34 - and now if i take a look at the data
434:36 - oh look we get some data back so for
434:38 - some reason if i do one day ago nothing
434:40 - happens but if i could do three days ago
434:43 - something happens
434:44 - and
434:45 - i actually noticed this when i was
434:46 - laughing this out and i only noticed
434:48 - this issue right before i started to
434:50 - record and that is that
434:52 - i'm recording on the weekend this is a
434:53 - saturday well technically it's sunday
434:55 - now um and the stock market's closed on
434:58 - sundays so there's no actual data points
435:00 - for one day ago because if you're on if
435:02 - it's sunday one day ago saturday you're
435:03 - not going to get any data points
435:05 - so this is something to keep in mind so
435:07 - we have to fetch data and get calculate
435:09 - the time uh depending on what is the
435:11 - current day
435:12 - so if i want to get basically just one
435:14 - day's worth of uh of data so if i want
435:17 - to get friday's data well if it's
435:19 - saturday i have to go two days back and
435:21 - if it's sunday i have to go three days
435:23 - back that's all so i have to put in a
435:24 - couple of if statements uh when
435:26 - capturing the time this is just one of
435:28 - the
435:29 - uh kind of the pain points of working
435:31 - with with this kind of data
435:33 - um i didn't even think about this issue
435:34 - when i first coded it out so
435:37 - all we have to do is do an if statement
435:39 - and i'll say if and then we grab date
435:42 - dot get day
435:45 - so this is going to return a number
435:46 - depending on what day it is and saturday
435:48 - it'll return a 6. so i'll do equals
435:50 - equals equals 6. so if this is a
435:52 - saturday
435:55 - then
435:56 - i'm going to make
435:57 - one day
435:58 - first of all is going to be a variable
436:01 - that i can change so it's going to be
436:02 - let
436:08 - if it's saturday then i'm going to do
436:10 - get two days worth
436:12 - of data so i can get friday's data
436:17 - and then i'll copy this
436:23 - and then if it's sunday which is going
436:25 - to be a zero
436:27 - then i want three days worth of data
436:32 - so now our application's smart enough to
436:33 - figure out that hey if it's saturday
436:34 - we're to have to get two days worth of
436:36 - data if it's sunday it's going to be
436:37 - three days worth of data
436:40 - and then if it's not any one of these
436:42 - days and actually this should be in if
436:44 - else
436:45 - i'll say if and let me move that
436:49 - up
436:50 - and then finally else
436:53 - one day is just going to be
436:56 - just one day so we'll remove the three
437:01 - okay so back to our application
437:06 - and now we've got some data
437:08 - so to understand what how this data
437:10 - works is pretty simple so t stands for
437:13 - timestamp
437:14 - so at this specific time this is a unix
437:17 - time and if you ever want to
437:20 - convert this pretty easily there's a lot
437:22 - of tools online like this epoc
437:24 - converter.com you just take the time
437:27 - you paste it in there
437:29 - and then it tells us hey this is uh this
437:31 - is the timestamp of that data point so
437:33 - this is august 25th at 8am
437:39 - so this is the timestamp and then these
437:41 - are the values that we saw before at
437:43 - that specific timestamp so what was the
437:45 - close what was the high what was the low
437:47 - what was the open
437:48 - and what was the
437:50 - the volume i guess
437:55 - so now that we've got this data
437:57 - let's also get
437:59 - the data for one month sorry one week
438:02 - and one year
438:04 - and i'm going to define a variable so
438:06 - i'll call this const one week
438:09 - which equals
438:10 - current time
438:12 - minus 7 times
438:16 - 24 times 60
438:18 - times 60
438:25 - and then for one year we'll just change
438:27 - this to 365
438:34 - and then we can just copy this
438:40 - and we'll change the
438:42 - from to be one week
438:46 - and the resolution to be and we'll just
438:48 - call this response
438:50 - week response day
438:57 - and the resolution can be
439:00 - you know every hour so we just need a
439:02 - data point every hour
439:06 - and then we have response year
439:11 - it's gonna be one year
439:13 - resolution can be i don't know
439:16 - you know every week that would give us
439:18 - 52 data points if you wanted every day
439:20 - you could do
439:21 - every i think it's every day what was
439:22 - the
439:24 - yeah d stands for day so it just depends
439:26 - how detailed you want it to be i'm just
439:27 - going to do one week just because
439:29 - there's no need to grab 365 data points
439:32 - for this demo
439:37 - so this is going to fire off three
439:38 - requests get all that information
439:43 - and then i can just do a console.log
439:45 - of all of these
440:05 - okay and so now we've got
440:08 - uh this is going to be
440:10 - the day
440:11 - this is going to be the year
440:13 - of the week and then this is going to be
440:14 - the year
440:15 - however if you've noticed that this is
440:17 - all happening
440:19 - in series sequentially so this one has
440:21 - to complete first then we send the
440:23 - request for this and then we send the
440:24 - request for this and we can confirm this
440:26 - by going to our network tab
440:31 - and there's a lot of networks so let me
440:32 - actually clear this
440:34 - refresh
440:37 - so notice how one
440:39 - i hated that one complete
440:41 - one
440:42 - one completes
440:44 - then the next one completes and then the
440:46 - next one completes so we don't want that
440:47 - so we're going to do the same thing that
440:49 - we did
440:50 - for
440:51 - the
440:52 - um stock list component where instead of
440:54 - fetching it one by one we do the
440:56 - promise.all method so we could just fire
440:58 - off all those requests at once
441:06 - so here i'm gonna go up here and i'm
441:08 - gonna do
441:09 - const responses
441:11 - equals await
441:13 - promise.all
441:18 - and then we provide a list
441:20 - and i can just copy
441:28 - these into there
441:51 - and then we can just do a console.log
441:54 - responses
441:59 - all right and we see all three fired at
442:01 - once
442:03 - perfect perfect perfect
442:08 - and i think something's actually
442:10 - erroring out hold on let me see if i can
442:13 - find this out so let me put this in a
442:15 - try catch block
442:22 - which we should have done anyways
443:08 - okay never mind okay all of them are in
443:09 - there that's good everything's working
443:15 - now the next thing that i want to do is
443:16 - i want to format the data because if we
443:19 - take a look at the data this is not
443:20 - exactly in the most convenient format
443:22 - because this is still the axios response
443:25 - so it's got all of the extra config
443:27 - information that i don't care about it's
443:28 - got the headers the request i don't care
443:31 - about that i want the data
443:32 - but in addition to wanting the data i
443:35 - also want to format it a little bit
443:36 - differently
443:40 - and the format that i actually need this
443:41 - in is going to be a little unusual but
443:44 - you can see right now we have a
443:45 - object
443:46 - and then for the closing value it's a
443:49 - list of all the values and then for the
443:51 - t is going to be a list with all those
443:53 - values and so the first item in here
443:55 - matches up with the first item here with
443:56 - the time step here the second one second
443:58 - one and so on and instead of doing it
444:00 - like that i need it in a specific format
444:03 - for my chart and i want the data to look
444:04 - like this
444:05 - so i'll say constant data and it should
444:08 - be
444:09 - an object
444:11 - with an x value
444:13 - of the t value of the t right that's
444:16 - going to be
444:17 - you know this here
444:20 - and then the y
444:22 - should be the closing value so what was
444:24 - the closing value at that time
444:26 - and then i want a list of these
444:30 - so it would actually be a list
444:35 - and then i would have a couple of these
444:42 - so that's that's what i want the data to
444:43 - look like so we're going to have to
444:44 - transform this data ourselves
444:50 - and let's define a use state hook so
444:52 - that we can save our data so i'll say
444:54 - const
444:58 - we'll call this chart data
445:01 - and then we have
445:03 - set chart data
445:07 - equals use state
445:23 - and i showed you what we wanted the the
445:26 - data to look like
445:29 - and i'm actually going to save that in a
445:30 - file actually don't worry about that and
445:32 - actually what i want to do is i want to
445:34 - store in our um
445:38 - in our
445:39 - in our hook in our chart data
445:41 - i want to store it like this so in our
445:44 - cons chart data it should look like this
445:47 - we should have an object
445:49 - with a property of day
445:51 - and this is going to have
445:53 - data for one day
445:56 - and then we'll have a week
445:59 - and then we'll have a year
446:02 - of data for a week
446:07 - data for year so that way our chart can
446:09 - just pick whichever one it wants and
446:11 - then the date the data for each one of
446:13 - these should be the way i showed you
446:15 - guys so that was the data equals object
446:18 - that's going to be a list
446:20 - an array
446:21 - with uh multiple objects
446:24 - with an x
446:26 - of some value
446:30 - and a t
446:32 - and a y
446:34 - of some value
446:38 - and there's going to be multiple data
446:39 - points so that's what i want the data to
446:41 - look like so this is going to go
446:43 - in the value here so hopefully this
446:45 - makes sense
446:46 - this is kind of the most confusing part
446:48 - is just manipulating the data for the
446:50 - chart but i want to get it into that
446:51 - format
446:55 - so down here after we fetch the data
447:03 - i'm going to call set chart data
447:07 - and we're going to pass in the object
447:08 - with the day property
447:11 - with the week property
447:14 - and the year property
447:18 - and we're going to call a function which
447:20 - we're going to define in a bit
447:28 - format data
447:43 - and here
447:44 - remember the responses
447:54 - for the responses the first one is going
447:55 - to be for the day the second one is for
447:57 - the week and the last ones for the year
447:59 - so i could say
448:01 - responses
448:04 - and then we want to grab
448:06 - zero
448:07 - so the first entry and then within the
448:09 - zero we want just the data right we only
448:11 - care about the data we don't care about
448:12 - the configs
448:15 - so i'll say data
448:20 - we're going to do the same thing for the
448:21 - rest of these guys
448:24 - and then this is going to be 1
448:26 - is going to be 2.
448:28 - so let's now define this uh function
448:31 - outside of our component we don't really
448:33 - need it in the component
448:38 - so it's going to receive some data
448:41 - which is going to be an array and guess
448:44 - what we're going to do we're going to do
448:47 - uh the map method so say data dot
448:51 - and so right now we're getting this data
448:52 - object right here so we want data dot
448:54 - and then we want to iterate over t
448:58 - t dot map
449:00 - and we'll get access to two things now
449:02 - you know normally when we did the map
449:04 - method we get access to just one
449:06 - which is the element that we're
449:07 - iterating over but we can actually get
449:09 - another
449:11 - value which is going to be the index of
449:13 - the item that we're iterating over so
449:15 - i'll grab the index
449:18 - and so i'll say return
449:21 - so x is going to be
449:27 - the element so that's going to be the
449:30 - specific time stamp
449:32 - right so this could be this time stamp
449:36 - but we have to multiply it by a thousand
449:39 - because
449:40 - uh the
449:42 - the api does it in seconds and
449:44 - unfortunately our chart does it in
449:45 - milliseconds so just multiply by a
449:47 - thousand
449:49 - and then we have to get the
449:50 - corresponding y value right so for the
449:52 - first item in the
449:55 - t array we want the first item for the c
449:57 - array so we just say whatever index
449:59 - we're on just grab the same one from c
450:03 - i'll say y
450:06 - data dot c index
450:14 - and that's all we have to do
450:19 - and let's refresh this
450:25 - responses is not defined let's take a
450:28 - look at where that is
450:39 - oh yeah that's silly me so we're going
450:41 - to move this into our try catch block
450:48 - now if i go into my
450:51 - react component
450:55 - extension and we go into stock detail
450:57 - page
450:58 - and we take a look at our state
451:00 - our state looks exactly the way we
451:02 - expect it to look
451:03 - so we've got one for day with x y
451:06 - we've got one for week with the x y
451:08 - coordinates and then the y
451:11 - and then the year
451:13 - perfect
451:17 - and for the dependency array um
451:20 - technically this will work the way it is
451:22 - however
451:23 - if the symbol changes we should run the
451:26 - use effect hook again so we're going to
451:28 - add this to the dependency array
451:32 - and for
451:34 - returning data uh we're going to do a
451:37 - couple things first of all let's create
451:40 - our
451:41 - chart component
451:44 - so i'm going to call this
451:48 - add file we'll call this
451:50 - stockchart
451:53 - dot jsx
451:56 - and i'll say export const
452:00 - chart
452:21 - and then in our stock detail page
452:23 - under this div
452:28 - i'm going to actually do two things so
452:30 - first of all we don't want our chart to
452:32 - render until we have
452:35 - our chart data set so if it's still
452:37 - fetching data we don't want to render
452:39 - the chart because there's nothing to
452:40 - render
452:41 - so i'm going to say
452:43 - if
452:45 - chart data
452:47 - and then i'm going to do and and
452:56 - and render out a div
452:59 - and then within our div
453:02 - i can call my stock
453:04 - chart
453:05 - component
453:07 - and we'll import our stock chart
453:08 - component
453:32 - and so what exactly is happening here
453:35 - this is a nice way of saying if chart
453:38 - data is not null then i want you to
453:40 - render out this data if it's not
453:43 - if chart data is null then it's going to
453:45 - return null and it's going to render
453:46 - nothing so it's basically just doing a
453:48 - little if statement if chart data is a
453:50 - value we'll render this out if it's not
453:52 - then nothing will get rendered out
453:57 - so let's test this out
454:04 - no errors and you can see it loads up
454:07 - there's nothing there and then stock
454:08 - chart comes up after we get chart data
454:13 - perfect
454:17 - okay so let's work on our stock chart
454:19 - component the first thing is we're going
454:22 - to receive some props and mainly it's
454:24 - going to be the chart data so i'm going
454:26 - to destructure that out and then when i
454:28 - actually call this in my stock detail
454:30 - page
454:31 - we're going to have to pass in that data
454:34 - so i'll do stock chart then
454:36 - chart data equals
454:38 - chart
454:39 - data
454:46 - and i think we should also pass down the
454:48 - symbol
454:51 - because the chart should know that as
454:52 - well so i'll pass down the symbol
454:57 - and now in our stock chart what we can
454:58 - do is
455:00 - we can destructure out the day
455:04 - week and year from the chart data
455:10 - and now it's just a matter of
455:12 - configuring the specific chart library
455:14 - so we're going to make use of a charting
455:16 - library called apex charts
455:19 - so let's go to the documentation in here
455:23 - and so all we have to do is do an npm
455:25 - install apex charts so we can go back
455:28 - and i'll go here and i'll search for
455:30 - apex charts
455:35 - and we want that first result
455:38 - and in addition to that
455:40 - if we go down to
455:42 - integrations they have react
455:44 - integrations that make it a little bit
455:46 - easier to work with the charts and so we
455:48 - have to install a second library which
455:50 - is kind of like a wrapper for the apex
455:52 - charts library to work with react so
455:54 - that we don't have to do all of the hard
455:55 - work ourselves
455:56 - so this is just called react
455:58 - apex charts
456:11 - and i will install that as well
456:19 - and if we take a look at the react
456:20 - integration all we have to do to create
456:22 - a chart is just pass in the chart
456:25 - component that comes from react apex
456:27 - charts and it requires a couple of
456:28 - things first of all it's going to be
456:30 - options so this is like the uh
456:32 - configuration for your chart like what
456:34 - color do you want it how do you want it
456:35 - to kind of operate animations things
456:37 - like that
456:38 - series is going to be the data
456:41 - that it should receive
456:43 - uh the type that's going to be the type
456:44 - of chart and then also the size of the
456:46 - chart as well so only four props that we
456:49 - need and we'll go over all of these
456:51 - props in a bit
456:53 - and let's go to chart types
456:54 - and the chart type that we're going to
456:56 - use is called an area chart so this is
456:58 - going to be what we're using and if we
457:00 - just take a look right same thing
457:03 - so we know what we're going to set the
457:04 - type to um if we take a look at what
457:06 - else do we need
457:09 - okay so
457:10 - using the chart when we pass the series
457:13 - like i said the data should look like
457:14 - this
457:16 - right the x is going to be the time
457:18 - and the y is going to be the value or
457:21 - the price of the stock and we already
457:22 - configured that ourselves so we're
457:24 - already good to go on that that's why i
457:26 - format it ahead of time the other
457:28 - properties that we need is the x-axis
457:30 - should be set to type of date time so
457:33 - that's going to give us the time so
457:34 - let's just go ahead and just start
457:35 - playing with it and then just work on
457:36 - this one option at a time
457:39 - and so i'm going to import chart
457:41 - from
457:44 - be act
457:45 - apex charts
457:55 - i'm going to render out a div
458:02 - and let's define the options for our
458:03 - chart so we'll do const options
458:13 - so first of all let's give our title our
458:15 - chart our
458:16 - title and so if the configuration for
458:19 - the title first of all it's going to be
458:20 - the text what do we want the text
458:22 - or the title of the chart
458:24 - that's going to be the name of the stock
458:25 - so we have the symbol that we can just
458:28 - pass in we have to destructure that out
458:30 - from props so the text is going to be
458:32 - set to symbol
458:39 - align so how do we want to line up the
458:41 - text so it's going to be center
458:44 - and then we're going to make it just a
458:45 - little bit bigger so we'll set style
458:57 - and we'll do font size
459:00 - 24 pixels
459:18 - uh the next thing is going to be chart
459:20 - specific configuration
459:22 - so we're going to give this chart an id
459:25 - so we'll say stock data
459:30 - and then if you want you can also
459:31 - customize the animations
459:34 - and i'm just going to set this to be
459:35 - speed of 1300
459:42 - next thing is going to be configuring
459:44 - the x-axis so we saw that in the
459:46 - documentation we have to set that to be
459:48 - date time because the x-axis is going to
459:50 - represent a time so type
459:54 - date time
460:00 - so let's try this out i think that's
460:01 - enough
460:02 - options let's set up the series
460:06 - so the series which is going to be the
460:08 - data that we passed to the chart
460:12 - is going to be an array
460:15 - and then an object for the configuration
460:16 - the reason it's array is because if you
460:18 - go back to the documentation you can
460:20 - have multiple series so multiple you
460:22 - know different types of data sets we
460:24 - just have one we just have one so that's
460:26 - why it asks for an array but we're only
460:29 - passing in one object
460:31 - and in this object
460:32 - we have to pass the name
460:35 - so this is going to be the symbol
460:39 - and then the data
460:43 - which is going to be day we're going to
460:45 - set it today for now just to take a look
460:52 - and now i'm going to add some
460:55 - style
460:56 - to this div
460:59 - to set the background color
461:23 - and we'll also give it some extra
461:25 - classes
461:27 - so
461:28 - add some margin to the top
461:30 - some padding
461:33 - shadow as well
461:35 - background is going to be white
461:38 - and i guess i didn't actually need this
461:40 - style we can actually delete that
461:47 - all right now we can pass in the chart
461:49 - component
461:56 - and so the options that's going to be
461:57 - set to that object that we created
461:59 - called options
462:06 - and the series is going to be set to
462:08 - series
462:15 - type is going to be set to area
462:19 - and width is going to be set to 100
462:21 - percent
462:41 - okay and we can take a look at our chart
462:43 - and it actually looks pretty good
462:48 - so it's able to plot the data points
462:51 - however
462:52 - right now it's not using the correct
462:57 - uh time and that's because i wanted to
462:58 - show my local time
463:00 - so wherever i'm located i'm located on
463:02 - the east coast i wanted to show the east
463:04 - coast time uh and then when you know
463:06 - when you guys are using i wanted to show
463:07 - your local time and so to do that we can
463:10 - go up to x-axis right here
463:15 - set labels
463:19 - date time
463:20 - utc
463:22 - that defaults
463:29 - okay and that's better so that's better
463:34 - now if you take a look at the the tool
463:36 - tip
463:37 - right it says 25th of august
463:40 - i wanted to be a little bit more
463:41 - detailed i wanted to include the
463:42 - specific time stamp as well in the tool
463:44 - tip
463:46 - so we can go under x-axis here
463:49 - and add a tooltip
463:52 - configuration and the format i want this
463:54 - to be for the x-axis
463:56 - is going to be format
463:59 - and then we want mmm for the month the
464:02 - day
464:03 - and then i want the hour
464:04 - and then the minute
464:13 - so now we got
464:14 - the month day and the time as well
464:18 - the next thing that we need to implement
464:20 - is we have to provide the buttons for
464:23 - the users that they can select if they
464:24 - want to see uh the past 24 hours if they
464:26 - want to see seven days or one year's
464:29 - worth of data and we should be able to
464:31 - change between these and also obviously
464:33 - the color changes depending on
464:35 - if the stock gained or if the stock went
464:38 - down
464:42 - so going back to our app we're going to
464:45 - render out a couple of buttons
464:49 - right under the chart
464:52 - so i'm going to add another div
464:59 - and we're going to add a couple buttons
465:13 - and these buttons are gonna manage
465:16 - you know which one they've selected so
465:18 - we're gonna have to use uh we have we're
465:20 - gonna have to define some state we're
465:21 - gonna use the use state hook
465:25 - and i can call this uh what about
465:30 - i don't know date format i couldn't
465:31 - think of a better name
465:33 - and then set
465:34 - date format
465:38 - use date
465:41 - and then it's going to be 24
465:44 - hours okay and so uh when the user wants
465:47 - to see one day's worth of data they're
465:48 - gonna set date format to 24 hours uh if
465:51 - they want to see um you know seven days
465:54 - we'll do seven days and if they want to
465:55 - see
465:56 - uh one year they'll say one year
466:01 - and so for these buttons we'll just set
466:02 - up a on click event handler
466:12 - and we'll say set
466:13 - date format to be
466:15 - uh the first button this is going to be
466:18 - for um one day so i'll say 24 hours
466:23 - and actually
466:25 - let me
466:28 - add the closing tag as well so now i can
466:30 - say
466:30 - 24 hours
466:55 - and i can copy this on click event
466:56 - handler
466:58 - and just paste it into the other two
467:00 - and just change this to be
467:02 - seven days
467:05 - and one year
467:13 - and then don't forget to import
467:18 - the eustate hook
467:29 - and so now we have these buttons and
467:30 - obviously we can add some style to them
467:35 - but now what we want to do is we want to
467:37 - update the data
467:39 - depending on which one is selected
467:41 - whether it's
467:42 - 24 hours one week or one year
467:45 - and i think the best way to do this is
467:46 - to define a function
467:48 - i'm going to define a function down here
467:52 - it's going to be very simple it's going
467:53 - to be called determine
467:56 - time format
468:02 - and we're just going to have a switch
468:03 - statement where we're going to switch on
468:05 - date format which is going to be the use
468:07 - date hook that we just created
468:08 - so whatever this is
468:17 - and if it's set to
468:18 - 24 hours
468:21 - we're going to return
468:23 - day
468:24 - so we're going to return the data
468:27 - from here
468:36 - and if it's seven days
468:38 - then we're going to return week
468:49 - and if it's one year we're going to
468:50 - return year
468:53 - and then we also have to provide a
468:55 - default
468:57 - and so if nothing is provided then we'll
468:58 - just return day as well
469:06 - and so now inside this series
469:09 - we can just change this to be
469:11 - determine
469:13 - time format we just run that it's going
469:15 - to return the correct data set
469:20 - so if i try seven days we could see it
469:23 - adjust one year
469:25 - and for the year we can see there's
469:27 - something goofy going on and that's
469:30 - because
469:31 - it added a lot of decimal values i think
469:33 - i remember seeing that also
469:35 - let me see if i can find that in the
469:36 - actual data set
469:46 - yeah so this data point right here so
469:48 - we're going to have to truncate it maybe
469:50 - we'll just grab you know two decimal
469:52 - points
469:53 - and so to fix this issue um what i'm
469:55 - actually going to do is if we go to the
469:56 - stock detail page where we fetch the
469:58 - data and then format the data when we
470:00 - format the value you can perform the
470:01 - truncation here so you know i said i was
470:04 - going to round to two i was going to
470:05 - keep two decimals but i think it's just
470:07 - easier just to remove the decimals so
470:09 - i'll do a math.floor
470:13 - and that's going to remove all the
470:15 - decimal points if you want to handle the
470:16 - logic for
470:18 - keeping two decimals you would just
470:19 - manipulate it right here
470:28 - yep and now we can see we just get whole
470:30 - numbers perfect
470:34 - all right so let's style these ugly
470:36 - buttons
470:37 - and on top of that let's also provide
470:39 - some feedback to the user which
470:41 - uh which one they've selected right if
470:43 - we take a look at the final app it
470:44 - highlights the one they've selected
470:49 - and to do this if we go to our stock
470:51 - chart
470:54 - we go to our button component
470:56 - for styling purposes what we want to do
470:58 - is add a couple of classes
471:01 - we want btn
471:03 - and btn-primary
471:09 - and that's going to give us this look
471:11 - and if we do btn
471:14 - outline dash primary
471:18 - right now we have the unselected look so
471:21 - that's the difference between selected
471:22 - and unselected is going to be this
471:24 - outline right here
471:25 - so how are we going to do this well i i
471:27 - think we should create another function
471:29 - to kind of handle this logic so i'm
471:31 - going to say
471:32 - render button select so this is going to
471:35 - handle all the styling as well as
471:37 - figuring out which button has been
471:39 - selected
471:40 - so all of the buttons are going to have
471:42 - the following classes
471:45 - they're going to have btn and then i'm
471:46 - also going to add a margin of 1 so they
471:48 - have a little space
471:51 - and then what i'm going to do is i'm
471:52 - going to say if button
471:56 - equals equals equals date format
472:02 - then we want to
472:04 - return classes
472:08 - plus
472:10 - btn-primary
472:12 - and i want to actually add a space here
472:14 - so what this is saying is if this button
472:17 - is um matched up with the selected
472:20 - button
472:22 - or the selected data set then we want to
472:24 - do btn primary which is going to give us
472:26 - the filled in color
472:28 - or else
472:30 - we will do the unfilled in one so we'll
472:32 - do return classes
472:37 - btn
472:39 - outline dash primary
472:49 - and so for each one of these buttons um
472:51 - i'm going to change the class name
472:54 - and we're going to just render that by
472:56 - calling render button select
472:59 - and then we're gonna pass in you know
473:00 - since this is the button for one day i'm
473:01 - gonna say 24 hours
473:07 - we'll copy this
473:10 - paste it to here
473:12 - this will be the seven days
473:15 - and this will be the one year
473:17 - and so what's really happening is um
473:19 - we're passing in one year
473:21 - so we're calling in
473:22 - uh we're calling in uh render button
473:24 - select into this button so button is
473:26 - gonna be set to one year and it says if
473:29 - one year equals equals date format
473:32 - which is
473:33 - whichever one is currently selected
473:35 - then we are going to make that the
473:37 - selected button however if they don't
473:39 - equal that then it's going to be the
473:40 - unselected button
473:42 - i think that should be everything that
473:43 - we need to do so we can see 24 is
473:45 - selected
473:46 - if i select one year one year selected
473:49 - seven days seven days perfect
473:52 - and the last thing that we got to do
473:55 - is we want the color to change
473:57 - based off of if the stock is going down
473:59 - or if it's going up so in this case it's
474:01 - going down it's red
474:04 - down red
474:06 - however it goes up that's green
474:10 - and this gets a little tricky
474:13 - but the colors
474:14 - can be specified in the options
474:18 - so here we would do colors
474:21 - and then you would provide an array and
474:23 - then here you would just provide your
474:25 - you know your hex color okay so
474:28 - uh we're going to first implement the
474:30 - logic for determining are we going down
474:33 - or are we going up
474:35 - this is where the math gets a little
474:37 - funky
474:38 - so i'll say const color this is going to
474:40 - be the color that we want
474:42 - equals
474:44 - so how do we figure out
474:47 - if the
474:49 - value is going up or down
474:53 - so
474:54 - to figure out how to do this i actually
474:55 - want to take a look at the data one more
474:57 - time
475:00 - so take a look at stock not stock chart
475:03 - chart data
475:05 - so we can better figure out what this is
475:07 - going to look like okay so this is what
475:09 - chart data looks like we can see that we
475:10 - get one for day week and year and the
475:12 - logic is going to be the same regardless
475:14 - of which data set we select
475:16 - so remember
475:18 - this is going to be the earliest uh this
475:20 - is going to be
475:21 - the
475:22 - uh first data point so if it's one year
475:24 - if we select one year this is going to
475:25 - be one year ago and then the last data
475:27 - point is going to be the current time so
475:29 - to figure out if the stock has gone up
475:31 - or down we take the current time
475:33 - the current y value
475:35 - and we subtract
475:37 - the first y value if that number is
475:39 - positive that means it went up
475:41 - if we if that number is negative then
475:43 - our stock went down simple as that and
475:46 - we have to do this for all of them
475:52 - so i'm going to define a variable
475:59 - called color
476:01 - now
476:02 - this also has to be aware of
476:05 - uh the
476:07 - the different um day week and year
476:09 - formats so
476:10 - we don't actually know which one
476:11 - selected so we have to run determine
476:15 - time format
476:19 - so that's going to return either day
476:21 - week or year depending on whichever one
476:22 - selected
476:25 - so this function will return that data
476:27 - set
476:28 - and the first thing that we want to do
476:29 - is we want to grab
476:31 - the last item in that array how do we do
476:34 - that
476:34 - well we can call that same function
476:37 - call the dot length
476:39 - and then subtract 1. so that's going to
476:40 - grab
476:41 - the last
476:43 - the last entry right so that's going to
476:45 - go all the way down
476:47 - and it's going to grab
476:50 - well this is the wrong one but that's
476:51 - because since we're typing this out
476:53 - there's going to be errors
476:56 - but that's going to grab the last entry
477:00 - and we want to subtract
477:02 - the first entry so we just run that
477:04 - determine time format
477:08 - we want to grab the first entry which is
477:11 - 0 and then we grab the y value
477:15 - and i forgot we should grab the y value
477:17 - on this one as well so hopefully that
477:18 - made sense all is doing is grabbing the
477:20 - last data point and subtracting the
477:21 - first data point and it's going to use
477:23 - this function to figure out which data
477:25 - set to work on
477:26 - so now we have color or now we have a
477:28 - boolean and we can use a ternary
477:30 - operator to say
477:33 - if it's positive if this value is
477:35 - greater than zero
477:37 - we're going to return
477:41 - this
477:43 - but if it's not greater than 0 then
477:45 - we're going to return this nasty
477:49 - red
477:54 - and then here we can change the colors
477:57 - and just pass in the color variable
478:03 - and
478:04 - i made a mistake i'm going to move this
478:09 - or actually i won't move this i'm going
478:11 - to move this determine time format
478:12 - function
478:16 - above this because it's referencing that
478:18 - so it needs to be above it
478:20 - now we can try that looks like things
478:22 - are working let's try seven days
478:26 - one year okay well they're all going
478:28 - down so let's uh
478:31 - let's go back and find
478:34 - i think what was the one we were looking
478:36 - at
478:46 - okay so that's going down it's red good
478:50 - red
478:51 - green perfect
478:55 - so now let's implement the uh delete or
478:57 - remove functionality so we should be
478:59 - able to hover over one of the rows and
479:01 - then remove it from the list
479:05 - and like i said i wanted to save this
479:06 - until we got the detail page working so
479:08 - that i can show you a little issue that
479:10 - we're going to run into
479:13 - and i was trying to figure out the best
479:14 - way to kind of implement a kind of a
479:16 - delete button or icon and i kind of got
479:18 - lazy so i just picked the simplest way
479:19 - so if we go to our stock list
479:22 - and you go down to the bottom where we
479:23 - render out
479:24 - the data
479:26 - all i'm doing is just adding a button in
479:28 - here
479:30 - i could have picked something a little
479:31 - bit classier but i was just
479:34 - the the idea is that we want to
479:35 - implement the logic that's what matters
479:37 - uh and so the logic is gonna be same
479:38 - regardless of what is the icon you use
479:40 - and where you put it
479:43 - so we're gonna put this button here this
479:46 - is going to say remove or delete
479:47 - whatever you want
479:50 - and let's give this a couple of
479:52 - classes so i'm going to say
479:54 - class name
479:55 - equals
479:57 - btn btn-danger
480:00 - btn-sm
480:03 - ml-3
480:10 - and then d-inline-block
480:15 - and then we also want to add in a
480:16 - separate class called delete dash button
480:20 - so all of these come from the
480:24 - bootstrap library except for the delete
480:25 - button we'll implement this ourselves
480:29 - and so now
480:30 - we go back
480:33 - there's a remove button however we only
480:35 - want to show this
480:37 - when the user is hovering over the
480:39 - specific row
480:41 - so how do we do that well i'm going to
480:42 - go to our app.css
480:46 - i'm going to define some rules so i'm
480:47 - going to say we're going to reference
480:48 - that delete dash button
480:51 - and i'm going to say visibility by
480:52 - default is going to be set to hidden
480:58 - and then i don't think this is going to
480:59 - do anything but i see this in my notes
481:01 - so we'll just add it anyways
481:08 - then when we hover over a row we want
481:11 - the button to show so this gets a little
481:13 - tricky
481:14 - so we want to say when
481:15 - table dash row and if you recall what
481:18 - table row is
481:19 - we got to go back to stock list
481:25 - and table
481:26 - row where is it
481:29 - here we go table row right here so
481:32 - this class that goes uh assigned to the
481:34 - specific row
481:38 - when table row is hovered
481:43 - we want to select the delete dash button
481:47 - and then here all we do is just set
481:48 - visibility to visible
481:51 - simple as that
481:54 - and now if i hover
481:58 - there you go now we got the remove
482:00 - working
482:04 - so the next thing that we have to do is
482:05 - set up the
482:07 - uh the on click event handler
482:11 - so here's our button
482:13 - i'm gonna set the on click
482:35 - so here we're going to call the well
482:36 - we're going to have to grab the delete
482:38 - stock
482:40 - from our context so we'll call it delete
482:42 - stock
482:48 - and if you forgot where that's coming
482:49 - from that's just coming from our context
482:51 - api where we have this function that
482:52 - we're passing down that handles deleting
482:54 - it from the watch list
483:02 - so we'll say delete stock
483:06 - and then we want to pass in the symbol
483:08 - which is going to be accessible through
483:09 - stock data dot symbol
483:13 - and i think that should be it so let's
483:15 - take a look
483:16 - i'm gonna try to delete microsoft
483:18 - if i hit delete
483:20 - okay well something interesting happened
483:22 - it routes me to the next page so why is
483:25 - that happening well think about this
483:28 - when i click on this delete button
483:29 - technically i am clicking on this row
483:32 - on the row that this button is assigned
483:34 - to so if i go up to this row
483:37 - well where's the row i think i scroll
483:38 - too far the row this has a handle stock
483:41 - select
483:42 - uh on click event handler and if i go to
483:45 - handle stock select that's what handles
483:47 - the navigation
483:48 - so what's happening is when i click the
483:49 - button it's also triggering triggering
483:52 - this
483:53 - on click event handler and this is the
483:55 - issue that i wanted to show you guys so
483:57 - what's happening is that
484:00 - i do technically click on the remove
484:02 - button however the event bubbles up so
484:04 - it starts bubbling up
484:07 - all of these elements up to the to the
484:09 - tr
484:10 - and then it triggers this event handler
484:12 - or this on click event handler so that's
484:14 - the problem it's due to event bubbling
484:16 - so how do we avoid this well react gives
484:19 - us
484:20 - a handy
484:21 - thing we can call so we have to first
484:22 - get access to the event so i'm going to
484:24 - pass the event into the function and we
484:26 - just say e dot stop
484:29 - propagation so this is going to prevent
484:32 - the event from bubbling up to that
484:34 - parent component
484:37 - and this is apparently an a i've been
484:39 - mispronouncing it
484:42 - so now let's go back
484:48 - let's see can i remove microsoft
484:51 - perfect and you see microsoft got
484:52 - removed can i remove google
484:54 - perfect perfect
484:57 - and that's all we had to do for handling
484:59 - the deletion of an item from that list
485:03 - the next thing i want to do is implement
485:04 - the stock data component which is going
485:06 - to give out some extra information about
485:08 - the
485:10 - company uh like what was its ipo date
485:13 - what's the you know what's its market
485:15 - cap what's its website and things like
485:17 - that
485:17 - so let's go back to our
485:19 - components and let's create a new
485:21 - component
485:24 - and it's going to be called stock data
485:40 - we'll do export const
485:44 - stock data
485:57 - now the way that stock data works is
485:59 - that it's going to fetch
486:02 - data from a new api endpoint and i
486:04 - believe it's called company profile2
486:07 - and so yeah this is the one that we want
486:09 - to use so we just send it to slashdoc
486:11 - profile2 and then you provide the symbol
486:14 - and it's going to give us all of that
486:15 - information that's all we got to do
486:18 - so let's handle fetching all the
486:21 - information
486:22 - and this component is actually going to
486:24 - accept a prop which is going to contain
486:26 - the symbol of the stock that we want to
486:28 - get information for
486:32 - so let's import the use date and use
486:34 - effect hook
486:57 - and then we'll call the use effect hook
487:04 - and let's go ahead and set the
487:05 - dependency array this is going to render
487:08 - anytime symbol changes
487:10 - anytime that prop changes
487:15 - and then we'll do const fetch data
487:25 - and let's import the api as well
487:43 - and i'm going to go a little bit faster
487:44 - for this um you guys have already seen
487:46 - this enough time so
487:48 - should already be second nature but here
487:50 - we can fetch the data and i'm going to
487:51 - do uh
487:52 - let's get the try catch block
488:12 - and so this is stock and then profile
488:15 - two
488:20 - and then the params is going to be the
488:22 - symbol only
488:39 - and if we go to our detail page
488:41 - we want to render this component out in
488:43 - the detail page
488:46 - and so i'm going to just render it right
488:47 - out
488:48 - right below the stock chart so let me
488:50 - import it
489:08 - sorry this should be stock data
489:34 - and i got some errors let's see
489:44 - and i actually already know the error so
489:47 - this should be apis
490:00 - okay and let's take a look at
490:02 - oh it doesn't look like it rendered out
490:04 - or
490:05 - no we need to i think i forgot to
490:07 - console log it
490:09 - no i logged that console logged it
490:13 - yep and i forgot the parentheses okay so
490:15 - we got that let's try this out now
490:25 - all right and so now we have all of the
490:27 - information
490:30 - about the company and so we can render
490:31 - that out now
490:33 - and that's really all this component is
490:35 - doing is just fetching a little data and
490:36 - then rendering it out but we do have to
490:38 - store this information in a use date
490:40 - hook
490:42 - so let me just do a const
490:45 - stock data
490:47 - set
490:48 - stock data
490:55 - that should be in the use effect hook
490:57 - and then right after here
490:59 - we'll say if
491:01 - is mounted
491:03 - then we want to set
491:06 - stock data to be response dot data
491:11 - and then we'll add the cleanup function
491:25 - and now it's just a matter of rendering
491:27 - rendering out um
491:29 - all of that data
491:32 - so this is now going to be changed to a
491:34 - div
491:41 - and i'm going to do that same expression
491:43 - where i say stock data if that's set and
491:45 - only if that's set will we then render
491:47 - out the rest of this
491:50 - and what we're going to render out let's
491:52 - see we'll start out with the div
492:00 - and we'll give this a couple classes
492:06 - so i'll say row border bg dash white
492:09 - rounded
492:10 - shadow dash sm p dash 4 and mt-5
492:18 - and then within here we're going to have
492:20 - some divs
492:24 - this is going to have a class name of
492:34 - col and there's going to be three of
492:37 - these
492:40 - and then within each of these there's
492:42 - going to be
492:44 - three entries
492:47 - for the individual data points so i will
492:49 - say
492:52 - and let me not copy that i think that
492:54 - might confuse you guys
492:58 - so we'll say div
493:02 - and in this div we're going to have a
493:04 - span
493:06 - with the class name of
493:09 - fw bold
493:23 - and we're gonna have three of these
493:26 - within each one of those parent divs
493:28 - under call so i'm gonna add three in
493:30 - there and three in here
493:46 - and now we can just name the property so
493:48 - this one's going to be name
493:52 - this one's going to be the country
493:58 - this one will be the ticker
494:05 - this one will be the exchange
494:09 - we have the industry
494:18 - the ipo
494:24 - market cap
494:29 - shares outstanding
494:44 - and the url
495:03 - all right so now if we check this out
495:06 - and go back to the main page and
495:12 - okay so it's got all of the
495:15 - headers but it's not
495:17 - spread out the way it should be so i
495:19 - feel like i'm missing a class or two
495:23 - okay yeah i just had a uh a minor typo
495:26 - um that got messed up with the divs but
495:28 - now it's spread out across the three
495:31 - uh the three columns that i've defined
495:33 - and now it's just a matter of passing in
495:34 - that data into each section and we
495:37 - already have the different properties so
495:39 - if we want country we just do country
495:41 - currency exchange and so on so i'm just
495:43 - going to quickly go through this we have
495:45 - the stock data stored in this variable
495:47 - and we can just access it
495:50 - through that property so we'll say
495:53 - for the name
496:02 - we'll just do stock data dot name
496:08 - and i'm going to just copy these real
496:09 - quick across each one of them and then
496:11 - we'll update it individually
496:28 - we have the name the next one is going
496:29 - to be the country
496:34 - this one will be the ticker
496:38 - this one will be the exchange
496:44 - this one will be fin
496:47 - hub
496:48 - industry
496:53 - next one will be ipo
496:59 - and we have market capitalization
497:05 - share outstanding
497:12 - and then this last one is going to be a
497:14 - url to their website so
497:16 - i'm actually going to make this a a link
497:22 - and the href
497:25 - is going to be
497:28 - stock data dot web url and then for the
497:32 - the text you can make it whatever you
497:33 - want i mean you could just do the same
497:35 - thing if you wanted to just make it
497:38 - stock data.web url
497:53 - and let's give some spacing between
497:55 - these like i did for the other ones
497:57 - and i think that should be everything
497:58 - that we need here we go so that's going
498:00 - to wrap up the stock data component
498:04 - so the next feature that we need to add
498:05 - for this project is let's say that the
498:07 - user navigates to our website the first
498:09 - time we automatically populate these
498:11 - three stocks for them
498:13 - um and then let's say they go in and
498:15 - they
498:16 - search for a specific stock
498:17 - and let's say they want mcdonald's and
498:19 - then let's say they delete one of these
498:22 - other stocks
498:25 - if they navigate from this page or
498:26 - refresh the page guess what happens
498:29 - our website doesn't remember and it goes
498:31 - back to google microsoft amazon if you
498:33 - take a look at the final product
498:35 - the final product will remember uh any
498:37 - stock that we
498:39 - it remembers our entire watchlist so if
498:40 - i grab mcdonald's
498:44 - and i delete google
498:45 - i hit refresh
498:48 - it remembers it and the way that it does
498:50 - this is if we go to the chrome developer
498:52 - tools
498:55 - and we go into application
498:58 - and you go under storage local storage
499:00 - you can see that what i have done is i
499:02 - have stored the list of stocks that the
499:05 - user wants to keep track of in storage
499:07 - in local storage so that when we
499:09 - populate the website the next time they
499:10 - visit it we could just pull this list
499:12 - and then query that data
499:14 - so this is the next feature that we're
499:16 - going to implement and you're going to
499:17 - see that it's actually going to be
499:18 - pretty quick and pretty easy
499:20 - so this is all going to be done in the
499:22 - watchlist context because that's what
499:23 - handles the watch list
499:27 - and i'm going to
499:28 - import a use effect hook
499:35 - i'm going to add a use effect here
499:49 - and i want this hook to run whenever we
499:51 - change watch list so anytime watch list
499:54 - changes
499:56 - i want to go to local storage
500:00 - and then i want to set something so i'll
500:02 - do set item and the key is going to be
500:04 - called watch list
500:07 - and the data we're going to pass it is
500:09 - going to be our watch list
500:12 - now this use effect hook is going to run
500:14 - every time this provider component
500:16 - re-renders
500:17 - we don't really want to do that we want
500:18 - it to render every single time
500:21 - the watch list gets updated so we just
500:23 - say
500:25 - we set the dependency array to be
500:26 - watchlist
500:28 - and this really is the main use case for
500:30 - use effect so anytime something changes
500:31 - in your application
500:33 - and you want to update something kind of
500:34 - outside of your application like the
500:36 - local storage or a session
500:38 - um or some other property outside of
500:40 - your application you use a use effect
500:41 - hook and this is the perfect use case so
500:43 - this is going to set it
500:48 - and i think i forgot a t wait item
500:53 - so let's test this out
500:56 - so i'm going to add in tesla
501:02 - and now if i go to my application
501:06 - tab
501:07 - and we go to local storage we can see
501:08 - google microsoft amazon tesla so now if
501:11 - i refresh
501:14 - it remember
501:16 - well
501:17 - it didn't actually remember it
501:19 - but that's because we set it in our
501:21 - local storage however it's not actually
501:24 - pulling that information from the local
501:25 - storage so where do we actually where
501:28 - and when do we pull this from the local
501:29 - storage
501:33 - well it's going to be in this u-state
501:35 - hook
501:38 - so when this u-state hook runs
501:41 - the first thing it should do is and i'm
501:42 - going to copy this for a second
501:46 - and i'm just going to paste it here make
501:48 - this a comment
501:50 - and i'm going to
501:52 - put this across multiple lines so when
501:53 - the the default state for our hook
501:56 - should be when our application first
501:57 - loads we should look into local storage
502:01 - and we should call get item
502:04 - for watchlist
502:10 - so this is going to give us a string
502:13 - and if we actually take a look at it it
502:14 - just gives us this string so we have to
502:16 - turn it into an array
502:19 - so how do we turn it into array we call
502:21 - a dot
502:22 - split method
502:24 - and we want to split it
502:26 - every time we see a comma
502:30 - and if we don't have anything in local
502:31 - storage then we're just going to
502:34 - default to this
502:38 - does that make sense
502:39 - right remember this is just a string
502:41 - when you read and write to local storage
502:43 - it's just a plain string right
502:45 - and so when we call the split method
502:46 - it's going to split it wherever there's
502:48 - a comma and it's going to add that as an
502:50 - entry into a list
502:53 - so let's try this out now
503:00 - i'm going to add tesla
503:06 - okay tesla's in there let's refresh
503:11 - and it remembers tesla let's remove
503:12 - microsoft
503:14 - does it remember that
503:17 - it does in fact remember that and keep
503:18 - in mind i have to refresh this so if i
503:21 - yeah we could see microsoft's not there
503:23 - now
503:24 - i'm going to show you a bug in our
503:25 - application
503:27 - if i go to my watch list
503:29 - and delete it
503:32 - and i hit refresh
503:39 - nothing shows up what's going on well
503:41 - let's see if there's something in the
503:42 - console
503:44 - and we can see the air says cannot read
503:46 - properties of null so what happened
503:49 - well our application loads the provider
503:51 - loads and then it runs this uh you state
503:53 - hook where it sets the default value so
503:55 - it does so it looks into local storage
503:57 - it tries to get item watch list keep in
503:59 - mind if we go to our application in here
504:02 - we can see there is no watch list so
504:04 - this returns nothing
504:07 - and if you try to uh this returns
504:09 - undefined and if you try to perform a
504:10 - dot split on an undefined that's the
504:12 - exact error that we're getting right
504:16 - cannot read properties of null reading
504:18 - split we can't we can't call split on
504:20 - null
504:21 - so how do we get around this issue very
504:24 - simple
504:25 - you just put a question mark right here
504:26 - so what this question mark does is
504:29 - it's going to check to see if this
504:31 - actually exists if it doesn't it's just
504:33 - going to return a null and it's not
504:35 - going to run this code
504:37 - i think this is called null coalescing
504:40 - i can never remember the terms but yeah
504:42 - so all this does is check to see if it
504:44 - exists if it exists perfect we'll just
504:45 - run the next code if it doesn't exist
504:48 - it's going to return null
504:49 - and if this returns null then we just
504:52 - default to this
504:55 - so let's try this
504:56 - again okay and look at that it defaulted
504:59 - to the three despite the fact that
505:02 - we had cleared the local storage and we
505:03 - can just test this out once again
505:09 - and that's perfect so it looks like it's
505:10 - working
505:11 - i'm going to remove this stack overview
505:13 - page we don't need that let's see where
505:15 - is that
505:17 - stock overview
505:27 - okay guys so that's going to wrap up
505:28 - this project we've implemented all of
505:30 - the features uh that i wanted we've
505:32 - gotten a chance to learn a lot of
505:34 - different features and functionalities
505:35 - within the react ecosystem things like
505:38 - the context api react router
505:40 - we've gotten a chance to work with
505:41 - different libraries and apis like the
505:43 - apex charge library as well as the
505:45 - finhub api and uh hopefully you guys
505:48 - enjoyed this project and i will see you
505:49 - guys in the next one
505:51 - we've reached the end of the course not
505:53 - only have you learned the basics of
505:55 - react you also coded three react
505:57 - projects
505:58 - good luck to using this knowledge to
506:00 - create your own react applications