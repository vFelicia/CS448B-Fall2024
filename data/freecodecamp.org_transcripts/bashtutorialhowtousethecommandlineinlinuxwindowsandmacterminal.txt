00:00 - Hello. I'm Briana, and in this video,
00:03 - I'm gonna go over a lot of things having to do with Bash,
00:06 - mostly the basics.
00:07 - We're going to start off really basic, like, what is Bash?
00:10 - What is that, you know--how do I even get around?
00:13 - All the way through configuration, using different types of scripts with Bash.
00:18 - So hopefully at the end, you'll feel a bit more comfortable working in the terminal,
00:21 - So starting off: as you can see, Bash is a terminal.
00:25 - It is the terminal used on Mac and Linux by default,
00:28 - so it's a little bit different than PowerShell.
00:31 - When people say terminal, it could mean a lot of different things.
00:33 - It could mean Bash.
00:35 - It could mean something like zsh shell, which is kind of similar,
00:40 - or PowerShell, but this is all about Bash.
00:42 - So we open up Bash.
00:44 - I opened up my terminal application on my Mac computer,
00:50 - and the very first thing that I want to type--
00:52 - so it's kind of intimidating if you've never been here before--
00:54 - but I want to just do "echo $0",
00:58 - so echo space dollar sign zero.
01:01 - This--I click enter, return.
01:04 - This says Bash,
01:05 - So this is just confirming that I am in Bash.
01:09 - So find your terminal, type "echo $0".
01:12 - If it says Bash, then you're in the right spot.
01:14 - Whatever I type today should work for you as well
01:16 - unless you have some different configuration setup.
01:20 - So we're here.
01:21 - We don't know what "here" is other than Bash,
01:24 - so I'm going to type pwd.
01:26 - So pwd stands for Print Working Directory.
01:29 - And that just means it's going to print out wherever I currently am.
01:33 - So currently, I'm in my computer's users directory and then githubteacher.
01:38 - So that's the user that I'm logged into right now.
01:41 - I can use pwd at any time to know where I am,
01:43 - which is pretty helpful.
01:45 - The next command I want to show is called ls.
01:49 - So ls is going to list whatever's in my current directory,
01:52 - if there's any files or other directories.
01:55 - So here, I see I've got locations, documents, library.
01:57 - What you'd expect.
01:59 - We also have ls space dash al.
02:01 - Let's see if there's any hidden files here.
02:04 - And it also gives us some more information.
02:06 - We see all these letters on the left. We'll talk about those later.
02:09 - Owner of the file, their permission level,
02:12 - and then here the dot in front of a file means it's a hidden file,
02:15 - so when I just did ls,
02:17 - I wasn't able to see those files like .trash, .atom, .bash_history, which we'll talk about soon.
02:23 - So know that ls and ls -al are there
02:26 - so that you can see what's going on in the directory that you're currently in.
02:30 - When I list my files and directories,
02:33 - I see documents, downloads, all these things.
02:36 - I want to make a new folder, a new directory called Projects,
02:39 - so I'm gonna do mkdir for make directory
02:44 - and then space and then Projects.
02:47 - I'll do a capital P here.
02:49 - So I type "mkdir Projects", hit enter.
02:52 - It tells me nothing,
02:54 - But if I do ls...
02:56 - I can see, now I have...
02:58 - a Projects directory that I didn't have before.
03:02 - So I just created an empty file, that's it...
03:05 - using mkdir.
03:08 - So I've made this directory, but I'm not currently in it.
03:11 - So, right, if I do pwd, I'm still in my githubteacher directory.
03:15 - So to change directories,
03:16 - I'll do "cd Projects".
03:19 - cd space Projects
03:22 - What you see on the left-hand side changes a little bit.
03:25 - That'll depend on what configurations,
03:27 - what, you know...
03:28 - That can look different from computer to computer,
03:30 - especially with developers that have been using Bash for a while.
03:33 - If I do pwd now...
03:37 - It's a little different.
03:39 - So before, I was just in githubteacher;
03:41 - now, I'm in githubteacher/Projects.
03:42 - So I created the directory and then changed directory into it.
03:47 - If I do ls here,
03:49 - we see nothing.
03:50 - ls -al.
03:51 - I just see these dots, which means I can go back.
03:53 - So we've changed directory into a directory,
03:56 - but, like, maybe I want to go back.
03:58 - Let's say I want to go back to being in this githubteacher directory.
04:02 - I can type--
04:03 - Come back, terminal.
04:05 - I'll type cd space dot dot.
04:07 - Now if I do pwd,
04:09 - I'm back in githubteacher.
04:11 - No big deal.
04:13 - We've created a directory.
04:15 - It's good to know how to get rid of a directory just in case.
04:17 - So if you need to delete a directory,
04:19 - you can do rmdir.
04:21 - So mkdir to create.
04:23 - "rmdir", and then I'll do Projects.
04:26 - The one I just created, I'm just going to scrap it.
04:29 - Now if I do ls--oops not ld.
04:32 - If I do ls...
04:33 - then Projects is no longer there.
04:35 - Even if I do ls -al, it's not there anymore.
04:40 - I'll go ahead and recreate that.
04:42 - "mkdir Projects" just so that we have something to--
04:46 - we're going to keep making some changes.
04:49 - But now you've seen a lot of the basics.
04:51 - We know how to navigate around.
04:53 - We know where we are with pwd.
04:55 - We can change directories with cd,
04:57 - both forwards and backwards;
04:59 - list the files in any given directory; make directories; delete directories.
05:03 - It's already a lot, right, with just a few really basic commands.
05:06 - Hopefully by now,
05:07 - you already are figuring out there's nothing to be afraid of
05:10 - when you're in the terminal.
05:13 - Let's talk a little bit about working with files.
05:15 - We've talked about directories; let's work with files.
05:17 - All files are case-sensitive with Bash.
05:21 - This is important to consider, as you might be working with something--
05:24 - another program, like, maybe you're working with Git.
05:26 - and the way Git or any program handles case sensitivity
05:31 - might be different than how Bash handles case sensitivity,
05:34 - So keep in mind: Bash is case-sensitive.
05:37 - Let's cd into that Projects--change directories into Projects.
05:41 - And I'm gonna make a new file.
05:43 - Because we do ls, we see there's nothing.
05:45 - To create a new empty file,
05:47 - I'm just going to type touch--
05:49 - I'll call it file1.md
05:51 - for markdown, the file format that I use a lot.
05:56 - Press return. Tells me nothing.
05:58 - If I do ls,
05:59 - now I see I have this file1.md.
06:02 - If I do ls -al,
06:04 - I've still got those dot files.
06:06 - We have file1.md.
06:07 - See who it's owned by,
06:08 - and the letters are a little different, but we'll get there.
06:11 - Creating a file, pretty easy.
06:13 - To delete that file, rm--
06:15 - just "rm file1.md".
06:18 - Now it's no longer there.
06:21 - Some different ways we can manipulate files.
06:23 - Let's go ahead and make this file again.
06:25 - We'll call it file2.md.
06:28 - I've created this file.
06:30 - Let's say I want to copy this file,
06:32 - so I want to make a duplicate.
06:33 - I'm going to type "cp file2.md"
06:37 - and then the name that I want the new copy to have.
06:40 - So I'm going to call this file2-copy.md.
06:44 - As soon as I do that, if I do ls,
06:46 - I see I've got these two files here.
06:50 - They're empty. They're both empty,
06:52 - but if file2 had some contents in it,
06:54 - that would now be mapped exactly to file2-copy.
06:57 - You can also rename files just really simply.
07:00 - So if I do mv...
07:02 - Let's say, I want file2-copy, this new file,
07:06 - I want that to just be called file3,
07:08 - so I'll do mv file2-copy.md--the old name--
07:11 - and then the new name.
07:13 - I'm going to call file3.
07:15 - If I do ls -al, file2-copy's now been renamed file3.
07:20 - Pretty straightforward.
07:21 - So far since we've started working with files,
07:23 - we've used touch, rm, mv, and cp.
07:27 - So touch creates a file,
07:29 - rm removes it,
07:30 - cp copies it and creates another one,
07:32 - and mv just renames it--or moves it to a different file name.
07:37 - We also have cat for concatenate.
07:43 - Concatenate.
07:44 - So this is a way to create single or multiple files.
07:47 - You can view the contents of a file;
07:49 - you can link files together,
07:51 - so view multiple files;
07:53 - redirect output in terminable files.
07:55 - There's a lot you can do with cat.
07:56 - Since these two files are empty right now,
07:59 - let's put some--let's put some things in there.
08:02 - So let's do that with VI.
08:04 - So VI is kind of a different level.
08:06 - So Bash and terminal can already be intimidating.
08:09 - VI, I would say, is another level.
08:11 - VI is always a text editor within the terminal.
08:16 - You might hear people also--VIM.
08:18 - VIM and VI are different.
08:20 - I don't use either one regularly,
08:22 - so I'm sure there are a lot of people out there
08:24 - who can go into a lot more detail than I can,
08:26 - but it's important to know a little bit about VI.
08:29 - You might end up in VI by accident,
08:32 - and it doesn't behave, necessarily, how you'd think.
08:35 - So let's--let's use it.
08:38 - To use VI, let's add some contents to file2.
08:41 - So I'm gonna type "vi file2.md".
08:44 - It's gonna open up file2 in VI.
08:47 - So already it looks very different.
08:50 - If I tried to just type anything, it might not work.
08:54 - Once you're in VI mode, to actually insert,
08:58 - you press i or j.
08:59 - So there's two modes of VI:
09:01 - there's insert and command.
09:03 - So I'm going to type i--
09:05 - I hit i on my keyboard,
09:06 - and now we can see at the bottom, it says insert.
09:08 - Now I'm able to type.
09:09 - So I'm going to say:"File 2 is the best file in the entire directory!"
09:15 - So I've made my changes.
09:17 - Now what do I want to do, right?
09:19 - How do I get out? If I press enter, it just goes down.
09:22 - Getting--I think that's like--
09:23 - "How do I get out of VI" is the most asked question on Stack Overflow.
09:29 - So here we are. How do we get out of VI?
09:32 - First, we need to get into that command mode, right?
09:34 - So I'm going to press ESC.
09:37 - We see the insert is gone at the bottom.
09:39 - I'm going to shift so it's COLON,
09:42 - And now we can see that at the bottom.
09:44 - That's putting us into command mode.
09:46 - "w" for write because I want to save these changes.
09:49 - And "q" for quit.
09:51 - I could just do q, and it wouldn't save,
09:53 - but wq will save and quit.
09:56 - Hit enter.
09:58 - So that's it. I'm out of VI.
10:00 - Let's do that again.
10:01 - Let's do it for file3, so I'm going to open "vi file3.md".
10:06 - First thing I do is...
10:08 - type i to begin insert mode.
10:11 - Start typing. "File 3 is a pretty good file too."
10:16 - Now, my instinct as somebody who uses a computer
10:19 - is to do CMD s or CTRL s to save,
10:22 - but that will not work in VI the same way it will work in other programs.
10:27 - To get out of this, I'm gonna hit ESC to get out of insert mode...
10:31 - colon wq...
10:33 - and enter. We're done.
10:36 - So we've kind of done these basics of VI.
10:39 - Just the need-to-know basics of how to get out,
10:41 - and how to get in, how to make some changes.
10:44 - Let's use that cat command.
10:47 - So you're gonna do "cat file2.md",
10:50 - and it prints out just the contents of file2
10:53 - that I just put in there.
10:54 - I can do "cat file2.md file3.md".
10:58 - So I'm doing two different files, and it prints out both...
11:02 - both of the contents. The contents for both of the files.
11:05 - So, so far, we've done a lot, right?
11:08 - We've worked with directories, how to get around.
11:10 - If I do pwd, the first thing we really talked about--
11:13 - I'm still in my Projects directory--
11:15 - ls. I still have these two files here: file2 and file3.
11:19 - Let's talk a little bit about how to configure your Bash shell.
11:23 - So what that means is right now my Bash is pretty...
11:26 - monotone.
11:28 - There's just white and black. Um...
11:30 - If you're ever--if you ever see somebody else working in a terminal,
11:34 - whether it's on a video or in person, you know,
11:36 - sitting next to somebody on an airplane,
11:38 - their terminal might not look like this.
11:40 - It probably doesn't look like this.
11:42 - I configure mine to have some different colors
11:47 - that make it easier for me to read,
11:49 - which is some, you know--the most basic, probably, way to do it.
11:51 - But you can configure your Bash terminal for a lot of different things.
11:54 - So you can include aliases so that I--
11:56 - you only have to type something small
11:58 - but actually will run a much longer script or command.
12:01 - You can configure authentication tokens
12:04 - for different services like Git and GitHub.
12:08 - Let's start out with the colors.
12:11 - So for the colors...
12:14 - The first thing we're gonna look for is this .bash_profile and .bashrc.
12:19 - So again pwd. I'm in Projects.
12:21 - I need to cd back into my main user directory.
12:24 - And I'm going to do ls -al.
12:27 - So I see I have...
12:29 - bash _history and bash_sessions,
12:31 - but since I haven't used the bashrc or bash_profile file yet,
12:37 - they are not on this user--
12:39 - They are not on this user account.
12:41 - If those files exist or not by default will depend on your operating system.
12:46 - So Linux, you probably already have those.
12:49 - Mac, you might not.That's OK.
12:51 - We're just going to create them.
12:53 - So we know how to create files:
12:55 - "touch .bashrc"
12:59 - and "touch .bash_profile".
13:05 - bash_profile is executed for login shells,
13:08 - and bashrc is executed for interactive non login shells
13:13 - meaning bash_profile is going to have those authentication tokens that we talked about;
13:18 - whereas, bashrc is gonna have more just general...
13:21 - general configurations in it.
13:23 - Okay, so I'm gonna open up that bashrc.
13:27 - I'm not gonna do it in VIM.
13:28 - I'm actually going to use my favorite text editor, which is Atom.
13:32 - And to do that, I'm gonna go to Atom...
13:37 - There is a way to configure Atom, so it's a--
13:40 - you just Atom space and the file name.
13:41 - I haven't done that yet. Let's see if it'll work just by default.
13:44 - Atom space dot. Oh, great. So Atom space...
13:48 - anything will open up that specific file.
13:50 - Dot in Bash, like I just did,
13:53 - means current directory.
13:55 - So this opened the current directory
13:57 - so everything I see on the left-hand side here
13:59 - is the same I would see in an ls -al.
14:02 - I'm going to open up this bashrc file in Atom,
14:06 - and I'm going to copy this--
14:08 - which I'll put in the video description here--
14:12 - here.
14:13 - Nope, actually, no, I'm not.
14:14 - I'm going to put that in the bash_profile.
14:16 - So what this does is...
14:18 - This is making sure that we only are sourcing the bashrc from the bash_profile.
14:24 - If Bash doesn't know where to look,
14:27 - it might not behave how you'd expect it to.
14:29 - You might get some different errors and bugs.
14:31 - So this is making sure that, um,
14:32 - the bash_profile is always looking for the bashrc
14:35 - to make sure it's taking whatever configurations are there into account also.
14:39 - So I'll save that change in my bash_profile.
14:43 - Now when I log into any machine from a console,
14:46 - this bashrc is automatically going to be called.
14:50 - Let's go ahead and configure some colors.
14:53 - Let me pull up these...
14:56 - different colors here.
15:00 - This is what I'm looking at.
15:02 - So I'll put a link to this little gist of code.
15:04 - So it's a little bit different if--
15:06 - depending on your operating system.
15:08 - Since I'm on a Mac, I'm gonna add this to the bash_profile.
15:11 - So here's this script.
15:13 - So this is going to be affecting my Git output specifically.
15:16 - So you could do that or this one here.
15:20 - This is specifically for Git.
15:24 - Copied one. I'll put that in bash_profile.
15:27 - This--this hash sign I'm putting here is comment.
15:31 - Colors for Git output.
15:34 - And I'll paste that in and save.
15:36 - And I also want to...
15:40 - So this is something I got from a friend.
15:45 - I'll save that, get rid of that,
15:46 - and then back in the bashrc, let's write colors for other text.
15:51 - Let's try this.
15:53 - Now here, let's open up terminal again.
15:57 - There we go. Okay, so...
16:00 - CLICOLOR=1 enables coloring of your terminal,
16:03 - and then the LSCOLORS specifies how to color specific items.
16:08 - Okay.
16:09 - There we go.
16:11 - So there's a lot of different ways you can...
16:14 - you know...
16:16 - customize this so that the output is much different.
16:19 - Here we do pwd. It's still black. ls- al.
16:24 - Here we see how, you know,
16:26 - certain things look different
16:28 - based on if they're a directory or if they are just a file.
16:32 - Customizing your prompt and configuring things
16:35 - goes a lot deeper than this.
16:37 - You could--what you can do is absolutely massive.
16:40 - But the most important thing to know
16:42 - is that you find those customizations in your .bashrc and your .bash_profile.
16:48 - Okay. Let's move on to something else.
16:51 - Let's talk about the internet.
16:53 - So I'm gonna type clear here.
16:56 - Clear is just a terminal--
16:58 - a shell Bash command to literally clear off everything that's on the terminal
17:03 - so that you have a fresh start. Clear. All right.
17:07 - So you can interact with the internet and other networks from Bash.
17:11 - That means, you know, whatever program you're using
17:14 - can interact with the internet.
17:16 - You'd usually want to do this to check the network connectivity or speed.
17:20 - So if I type "ping google.com",
17:24 - that tells me how fast my internet connection is really quickly.
17:28 - I'm gonna press CTRL--hold it down and then click c to exit that.
17:33 - So if you ever stuck in a mode--
17:34 - it's either VI mode, right--
17:36 - and then you would do escape colon wq
17:39 - or something like this where there's an operation running--a system task--
17:43 - then I would do CTRL + c to exit that.
17:46 - So interacting with the internet:
17:49 - a lot of different CLI tools will access the internet.
17:52 - Git is a great example of this.
17:54 - So I'd have my remote repository on github.com,
17:58 - my local repository on my computer.
18:01 - I can interact with that entirely from Bash,
18:03 - and that will be done via the Internet.
18:06 - So just remember anything that you do, um...
18:10 - in the shell, right--
18:12 - you are not automatically just on your own computer.
18:15 - Which is a great thing, but also good to know in case you might be making changes to something?
18:20 - Let's move on to: What else can you do from Bash?
18:23 - so we've done quite a bit already, right?
18:26 - We've created files. We've navigated around.
18:28 - We know how to get out of V and get--
18:30 - or get out of VI and get into VI.
18:32 - Let's talk about how to do some more advanced things,
18:35 - mostly scripts.
18:37 - So as an example,
18:39 - I would like to show you...
18:42 - this script, and we're gonna create it, we're gonna run it, we're gonna make it work.
18:47 - So this script here...
18:49 - This example is what I use before I teach class--
18:52 - that I was talking about.
18:53 - It quits certain applications; it hides my dock.
18:55 - Because I really don't want slack notifications coming up while I'm teaching a class.
19:00 - And it opens certain applications.
19:02 - So Mouspose and Moon,
19:04 - which are things I use to show my mouse and move windows around.
19:07 - Make sure those are open.
19:08 - Make sure certain browsers are open.
19:10 - And it even triggers other scripts like the teach-class script.
19:14 - One that we're going to create is really simple.
19:17 - So here we see the top line is:
19:20 - this #!/bin/bash .
19:22 - That just tells Bash that this file is actually a Bash script.
19:26 - So I'm gonna go ahead and go back to Bash here.
19:28 - I'm going to cd out of this repository,
19:30 - so I'm back in Projects.
19:32 - We can see that here.
19:34 - I'm going to--
19:35 - Let's take a look at this script.
19:37 - Okay, so it's just a good-morning world.
19:39 - So I'm going to touch good-morning.
19:40 - So I just created a file called good-morning.
19:43 - And I'm going to "vi good-morning",
19:47 - so now I'm in VI, okay?
19:50 - Next, let's insert.
19:51 - IfI type i so that we're in insert mode.
19:54 - And at the top it's that #!/bin/bash .
20:00 - Enter. Clear.
20:02 - We want to just clear the prompt, right?
20:04 - Like you could do as any standalone command.
20:06 - And echo,
20:07 - which we haven't talked about yet.
20:09 - "echo" just has the terminal--
20:11 - has Bash print out exactly what's in quotes.
20:14 - so echo "Good morning, world."
20:18 - will then have the terminal print that out.
20:21 - "echo" is a really, really useful command when you're working with shell scripts
20:26 - because frequently through your scripts you might want to know,
20:29 - you know, like a console log of kind of thing,
20:30 - you know, what's going on.
20:32 - I want to have this as feedback. This message will print out...
20:35 - at a certain time during my script.
20:38 - So that's good. Looks good.
20:40 - I hit escape colon wq
20:45 - and exit.
20:46 - Now let's see the moment of truth.
20:49 - We've created this script.
20:50 - If I just type "good-morning",
20:52 - let's see what--what we expect.
20:54 - It says "command not found".
20:56 - Let's talk a little bit about all these letters at the beginning.
21:01 - So back in the terminal here,
21:03 - if I do "ls- al" we see at the beginning of these files...
21:07 - all these drwxr, you know, slash.
21:11 - Those are impacting our ability to run that script out of the command.
21:16 - So chmod and file folder permissions.
21:20 - So this first blank indicates the file type,
21:24 - whether it's a directory with a d or just a slash--it's a regular file.
21:28 - From then, we have these three other groups:
21:31 - one for the owner, members of the group, and all other users.
21:35 - So that means any given file might have  different permissions
21:39 - for other people on the computer.
21:41 - You know, as an owner, I might be able to do something,
21:43 - but then if somebody else logged into the machine,
21:45 - they would only be able to, you know, read that file.
21:48 - They couldn't execute whatever that script was.
21:51 - So what you want to do--
21:53 - if we take a look at our newly created script, which is called good-morning,
21:57 - nowhere is it executable.
21:58 - We have r, read access; w, write access for the owner,
22:02 - so I'm allowed to make edits
22:03 - No one else can make edits even.
22:05 - But we want to have x.
22:07 - I'm not so concerned of if other users have any access to this file.
22:11 - I just want to have access right now.
22:13 - So what I'm gonna do is type:
22:15 - "chmod +x" and then the filename.
22:21 - So if I do ls- al, now I see good-morning has...
22:26 - this x next to it.
22:27 - Now it's red because it's an executable script
22:29 - Instead of just good-morning,
22:31 - we're going to do dot, you know, period slash good-morning.
22:36 - And it cleared the terminal and did "Good morning, world."
22:39 - Earlier, it wasn't working because I was just typing "good-morning",
22:42 - and remember when we're navigating throughout the terminal,
22:45 - it is relative and it matters where we are.
22:48 - So it didn't know exactly where to look for good-morning here,
22:51 - but when we do dot slash,
22:54 - meaning go back directory and look for the slash,
22:56 - then good-morning--or current directory and slash,
22:59 - then we're in good shape
23:00 - Then it knows exactly where to look.
23:02 - So obviously, this is a very simple script example,
23:05 - but that's how easy it is.
23:07 - Anything that you run in any command
23:10 - can be put inside of a shell script,
23:12 - whether it's basic shell, you know, language things
23:16 - or API calls or other programs.
23:19 - So a lot to know here.
23:21 - There's a lot to--to be done.
23:23 - And thank you.
23:24 - Hopefully you feel better about using Bash.
23:27 - Hopefully you feel like you can, um,
23:29 - not be so afraid of using your terminal.