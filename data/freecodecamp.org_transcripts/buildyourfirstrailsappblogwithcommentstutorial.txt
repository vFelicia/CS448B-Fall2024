00:00 - what's up guys i figured i'd share
00:02 - the i guess the journey of getting
00:04 - started in ruby on rails and becoming
00:07 - kind of a novice
00:08 - uh developer front end developer
00:10 - designer a lot of businesses and
00:12 - companies already are using it a lot
00:16 - started with it twitter for instance or
00:18 - github was on ruby on rails for a long
00:20 - time
00:21 - uh the same is true for
00:24 - shopify stuff like that is all written
00:26 - in ruby and ruby is a really
00:29 - approachable language for a beginner
00:31 - developer so i
00:33 - really enjoy the
00:35 - cleanliness of it i guess compared to
00:37 - something like php or javascript it's
00:40 - definitely
00:41 - almost magic how things work but they
00:43 - work really well so
00:45 - this is just an introduction to that and
00:48 - i wanted to kind of invite you on board
00:50 - follow along the next part of this will
00:53 - be kind of getting familiar with what
00:55 - you need to run ruby on rails
00:58 - on your system depending on if it's a
01:00 - mac or pc
01:01 - i'll kind of walk through at least the
01:03 - mac portion that's what i primarily
01:05 - develop on
01:09 - the biggest and probably the most
01:11 - hardest step to getting started with
01:13 - ruby on rails is actually installing it
01:16 - if you're on a mac chances are you have
01:18 - ruby already installed on your system
01:20 - but to get started on installing rails
01:24 - it's a good practice to kind of follow a
01:26 - guide um there's one that i i would say
01:30 - is probably the
01:31 - most up-to-date called install rails on
01:34 - installrails.com it's brought to you by
01:36 - the people from one month
01:38 - to start let's go ahead and just dive in
01:40 - assuming you're on a mac you can follow
01:42 - along with me if you're on a pc
01:44 - there are alternative steps to take and
01:47 - it will actually tell you which way
01:49 - to go here
01:51 - so on a mac you'll want to actually make
01:54 - sure
01:55 - your versions at least up to these
01:57 - current versions 10.6 is pretty old i'm
02:00 - using the latest macbook pro i do have
02:03 - xcode installed you don't necessarily
02:06 - need the whole
02:08 - xcode app if you want to install just
02:11 - the command line tools you can do that
02:13 - too i think i have xcode
02:17 - what was it i can't remember the actual
02:20 - key command right now but
02:22 - i have installed the easiest way to do
02:24 - it just go to the app store install
02:26 - xcode you need their command line tools
02:29 - to do a lot of things that will need
02:32 - to utilize in the coming steps going
02:35 - forward here it's talking about the
02:37 - command line and you can
02:40 - use the built-in one i like to use one
02:42 - called hyper it's add hyper dot is i
02:45 - think hyper
02:46 - [Music]
02:48 - yes
02:52 - yeah and it's based on js html and css
02:56 - i used to use item too but this one just
02:58 - kind of has been on my radar so you can
03:01 - use whichever you want and going back to
03:04 - this guide you can open your terminal
03:07 - and
03:08 - it's just kind of giving you a quick run
03:10 - through of hey this is what a terminal
03:11 - can do
03:12 - a big big thing i like to utilize is
03:14 - homebrew i actually have it installed
03:17 - if you
03:18 - want to install it you can head to
03:20 - homebrews
03:21 - page or there's a just a script you can
03:23 - run here
03:24 - if we run brew v
03:29 - i should get
03:30 - homebrew
03:31 - 1.3.4 is my current one
03:35 - there's a key command run called brew
03:37 - doctor might as well run it
03:40 - just kind of
03:41 - checks everything out make sure it's up
03:42 - to spec
03:44 - we'll run that real quick
03:47 - cool
03:48 - so
03:50 - by the way i'm working in a directory
03:51 - just on my desktop called sites um
03:54 - i just created that right before the
03:56 - screencast so nothing nothing special
03:58 - there
03:59 - get is obviously important it's a
04:01 - version control software basically you
04:04 - can
04:04 - create snapshots of your code and later
04:07 - reference them if you need to and or
04:10 - create branches that are different
04:12 - features so branches are saying hey
04:15 - clone this app and i want to do this to
04:17 - it but keep that other other screenshot
04:20 - the way it was so i think i have get
04:22 - installed but i want to i might as well
04:24 - check first so we'll do get
04:28 - i do it all right so
04:31 - 2.14.1 i think is my latest if you're
04:34 - new to git and you're just just
04:36 - installing it for the first time you do
04:37 - need to create global user parameters
04:40 - and git is not same as github so don't
04:43 - don't mis consume those
04:45 - it's actually something that stays local
04:47 - but you can add github as a remote thing
04:50 - that you can push your local stuff up to
04:52 - i'm already set up so i won't go through
04:54 - all that
04:55 - installing ruby
04:57 - you can do globally
04:59 - just like anything else but it's very
05:01 - very
05:02 - um
05:03 - i guess advised to use a ruby version
05:05 - manager and that's what actually rvm is
05:08 - in this case
05:10 - i tend to use one called r
05:13 - b and v
05:15 - i'm just saying that for short it's the
05:17 - same thing it's just kind of done
05:18 - differently so we can install the latest
05:21 - see what versions we got 2.4.2
05:24 - so let's go ahead and do that
05:26 - so if i do
05:28 - rb and
05:29 - v it's hard to remember
05:31 - install
05:34 - 2.4.2
05:39 - cool
05:39 - so we're at this moment downloading ruby
05:41 - 2.4.2
05:43 - um this takes a bit so i'll probably
05:45 - speed this part of the video up but just
05:47 - make sure you do this step
05:49 - because you don't want to use the
05:51 - system-based ruby version it's too
05:54 - outdated for rails
05:56 - 5.1.7 or whatever it is now i said
06:00 - 5.1.4 so while that downloads i'll speed
06:03 - this video up
06:05 - uh this finally installed 2.2 tour
06:07 - versions on our
06:09 - rb nv directory inside my actual user
06:12 - directory so
06:14 - we if we do rb
06:16 - i'm probably saying this wrong but
06:17 - that's just how i say it defeated
06:18 - perversions
06:20 - it should show 2 now and what we want to
06:23 - do is set that 2.42 at this point so
06:26 - what you'll type is rbnv
06:29 - global
06:30 - 2.4.2
06:34 - and then we'll do one more time i'm
06:36 - hitting the up key to bring back
06:39 - the history there rb inversions and it's
06:41 - set so we're all square on the ruby
06:43 - front
06:44 - cool
06:46 - all right next to get rails to work we
06:49 - need to actually install it so
06:51 - you can install it with the actual gem
06:54 - and ruby gems are similar to something
06:56 - like npm if you have ever used node um
07:00 - it's it's basically the same thing i
07:02 - would say node copied off of the gem
07:05 - um
07:06 - library if you
07:07 - google rubygems
07:11 - it should i think i have that url wrong
07:17 - ruby gyms
07:20 - there's a whole site dedicated to these
07:22 - and they're basically like these awesome
07:24 - plugins there's plenty of potential out
07:26 - there to go ahead and build an app of
07:28 - your wildest dreams so
07:31 - with that rails is actually one of them
07:33 - so you can you can google rails and
07:37 - you'll see it here it's 5.1.4 it's the
07:39 - latest
07:40 - if you just want to
07:42 - add this to your product you can do it
07:43 - like this it goes into this file called
07:46 - a gem file which we'll get into
07:48 - uh just just install it verbatim you can
07:50 - do it like this
07:52 - the guide here is actually
07:54 - kind of cool it's it's basically
07:55 - installing rails without some stuff we
07:58 - really don't need like documentation and
07:59 - stuff like that so i'm gonna go ahead
08:01 - and do the same
08:02 - on our installation
08:08 - just paste that into the terminal and
08:10 - hit enter
08:12 - all right as you can see 37 gems had
08:15 - installed for rails to kind of work we
08:18 - can check if rails is indeed working if
08:20 - we go to rails version
08:24 - so i have rails 5.1.4
08:28 - installed at this time
08:30 - if you run into issues definitely look
08:32 - at look into this stuff if you're
08:34 - following along and using the same in
08:35 - ruby manager
08:38 - as me there's a lot of documentation
08:40 - here definitely recommend homebrew if
08:42 - you're not using it it will make your
08:44 - life easier if you do
08:46 - uh on a mac for sure
08:48 - at this point we've got
08:50 - rails going we've got ruby installed
08:53 - and then the next step let's see
08:55 - just install code editor
08:58 - and we can create our first app
09:04 - this is going to be me walking you
09:06 - through how to create a simple blog like
09:08 - structure using ruby on rails as the i
09:11 - guess the cms and the actual
09:14 - creation edit
09:15 - and deletion of posts of a typical blog
09:19 - i'm using such things as like bulma
09:21 - which is a css framework you see all
09:23 - these styles are kind of adapted from it
09:26 - but this is the basic app we'll be
09:27 - building and as you can create posts
09:30 - read posts
09:31 - and actually comment on posts too so
09:34 - here's what a post could look like
09:36 - and this is all without any kind of user
09:38 - accounts so
09:40 - in future lessons or videos i'll be
09:42 - actually creating
09:44 - a user admin kind of
09:46 - side of this so where
09:48 - if you were an admin user you'd have say
09:50 - these controls but if you weren't you
09:52 - wouldn't see that at all so
09:55 - we'll be going deeper into that and
09:57 - future stuff so stay tuned for that but
09:59 - this is just kind of to get you started
10:01 - with rails
10:02 - and ruby and to get your um
10:05 - palette adjusted to how things work with
10:07 - with it it's a little
10:09 - i guess
10:10 - hard
10:11 - at first to understand if you're new to
10:13 - ruby and rails but it's essentially
10:17 - we're working with a mvc pattern
10:19 - on this web app
10:21 - framework
10:22 - known as ruby on rails of course
10:25 - this i have running this is what you'll
10:27 - be building it's the demo
10:29 - app which is on github and i'll share
10:31 - that in the link
10:33 - or the description etc so when we get to
10:36 - that point this will be what we make
10:39 - i'm going to
10:40 - probably do some
10:42 - copy and pasting in the sense of styling
10:45 - and maybe some html markup just because
10:47 - it's going to save you save you some
10:48 - time and the point of this series is to
10:51 - just learn ruby on rails so without
10:53 - further ado i'll go ahead and get
10:54 - started
10:55 - i have this server running our demo app
10:58 - already and it kind of looks like this
10:59 - in my terminal i'm going to control c
11:02 - out of that
11:03 - and it's called on github
11:05 - demo blog rails
11:08 - and i did kind of a
11:09 - a one pager of what we're actually doing
11:11 - here so it's a like i said it's a blog
11:13 - to demonstrate ruby on rails with posts
11:15 - and comments
11:16 - uh so the main features will be
11:18 - obviously posts and comments
11:20 - uh for the comments we'll actually do
11:25 - that
11:26 - it's gonna be create read update destroy
11:28 - or crud pattern
11:29 - for posts and then comments it'll be
11:32 - create read and destroy so if you
11:34 - alter a comment you can see it obviously
11:37 - but a user can also delete it
11:40 - but they can't edit it
11:41 - there are these things known as gems in
11:43 - ruby on rails and these act as kind of
11:45 - like a node package manager kind of
11:47 - scenario very very similar
11:50 - uh but we'll make be making use of these
11:53 - as i go through and these are basically
11:55 - out of preference for myself but also
11:58 - just stuff that
11:59 - is a time saver later on there's this
12:02 - thing known as guard that helps with
12:03 - tons of tasks behind the scenes
12:06 - if you're used to like grunt or gulp or
12:09 - something like that it kind of works
12:10 - like that but we'll use live reload for
12:13 - sas and any changes to our js or erb
12:16 - files
12:17 - otherwise known as html files in this
12:20 - case
12:21 - and then there's a better error
12:23 - errors gym
12:25 - and one called simple form which makes
12:28 - authoring forms and rails pretty darn
12:30 - easy so
12:32 - this will all be accompanied with a blog
12:34 - post so
12:35 - definitely
12:36 - you know look to that for these code
12:38 - snippets uh but also this is on github
12:40 - so
12:41 - i'm gonna back out of this project the
12:44 - demo app and actually create a new one
12:46 - we'll just call it demo blog
12:48 - so i'm gonna do rails well let me make
12:50 - sure there's not one in there yeah i'm
12:51 - gonna do rails new
12:54 - demo log
12:57 - and that should generate everything we
12:59 - need there
13:00 - and run bundle
13:02 - which will install our gems
13:05 - so with that ins installed we can go
13:07 - ahead and cd into that demo blog
13:08 - directory
13:10 - ls
13:11 - there
13:12 - so those are all the files and folders
13:13 - in our directory um
13:16 - by default git is initialized so that's
13:18 - pretty cool if you want to go ahead and
13:19 - version this definitely start now
13:22 - um everything that is ignored should be
13:24 - ignored but you can also ignore more
13:26 - files if you want to
13:28 - uh that's that's just how it comes out
13:29 - of the box
13:31 - i probably will just go ahead and do
13:33 - that just to make things
13:36 - i'll just run getting it
13:38 - and get add
13:42 - so get commit
13:46 - will commit
13:49 - cool
13:51 - all right and i'm clearing that using
13:53 - command k if you're new to the command
13:54 - line
13:56 - you can also type clear and hit enter
13:58 - and it'll do the same
14:00 - okay so first what we need to do
14:03 - is verify our apps running so we can
14:05 - just use rails
14:06 - server
14:08 - and this is a good
14:09 - practice just in case your environment's
14:11 - not set up correctly or something's off
14:14 - this is to go away and turn into this
14:17 - which is the screen you should see if
14:19 - you installed rails correctly
14:21 - all right so with rails installed we
14:23 - need to to get our our you know mindset
14:26 - around this app and how it works
14:28 - there are things we need to configure
14:30 - that make the routing work right um
14:34 - and to get to get things kicked off i'm
14:36 - going to actually generate what is known
14:37 - as a controller so i'm going to keep the
14:40 - server running
14:42 - and i'm actually going to create a new
14:43 - tab in my terminal command t and hyper i
14:46 - think it's the same in item and probably
14:48 - your default terminal app
14:50 - uh if you're on a mac of course
14:53 - so um i'm gonna
14:55 - i have an alias set up for that sites
14:56 - directory which is just my
14:59 - desktop sites cool
15:02 - you need to cd into our actual app again
15:04 - so demo blog
15:07 - and here i'm going to
15:11 - actually i'm gonna install the gems we
15:13 - want first i think that's a good
15:14 - starting point so let me open this and
15:16 - sublime
15:19 - here we go
15:22 - and i have the actual blog
15:25 - that i showed you first behind it so i'm
15:26 - going to minimize that because we might
15:28 - reference it later
15:30 - just for some quick html stuff that we
15:32 - used which you can basically just grab
15:34 - from the bulma website which i'll get
15:36 - into
15:39 - so by default it seems huge if you can
15:41 - see it uh these are the gems that
15:43 - install with rails
15:45 - most of them
15:46 - i mean you make use of sas rails of
15:48 - course puma is required
15:50 - sqlite is definitely required for your
15:52 - database
15:53 - you can make that any other type of
15:55 - database if you want we'll get into that
15:57 - in future videos
15:59 - and of course rails
16:01 - again i talked about this in a
16:03 - video a while back so definitely check
16:05 - that out
16:06 - but what we want to install are these uh
16:09 - gems that
16:11 - basically make our life easier when
16:12 - working with rails i'm gonna reference a
16:15 - file real quick
16:18 - one for sure is called better errors and
16:20 - we'll actually do that
16:24 - i mean it could be in the development
16:25 - group i guess
16:29 - but i'm going to put it here just for
16:30 - now so
16:31 - uh we'll do gem
16:34 - better heirs
16:37 - and i'm referencing a file uh what you
16:39 - should do
16:41 - isn't this and just type it in because
16:43 - it's pain
16:45 - but i'll show you what i end up doing
16:46 - most of the time
16:47 - here
16:48 - t424
16:52 - okay so we have better errors okay cool
16:54 - so that's obviously you can come in here
16:56 - and just say
16:58 - make
16:59 - errors
17:01 - better
17:02 - looking because by default in rails if
17:05 - you get an error it's this big ugly mess
17:07 - of red stuff
17:09 - red fonts red
17:12 - fills and stuff like that better errors
17:14 - this looks better it gives you a little
17:15 - more data of what's going on
17:18 - and i s that should be gem
17:20 - okay so you may wondering okay i'm never
17:23 - going to remember you know this why i'm
17:26 - never going to you know figure out where
17:28 - that's going to be so there's a site
17:30 - called rubygems
17:33 - which
17:35 - conveniently enough our gem file
17:36 - actually references
17:38 - if you look at the very top let me go to
17:40 - it here
17:43 - its source is from rubygems.org so
17:46 - definitely a good site to you know keep
17:47 - in your back pocket
17:49 - so we'll go to that site
17:51 - and as you work with rails you start to
17:53 - find gems that you kind of you're just
17:55 - your go to so don't think you can you're
17:58 - supposed to know these offhand but as
18:00 - you see in other apps
18:03 - they could just kind of come throughout
18:06 - when working with it so here is the best
18:08 - place to find the most updated region or
18:11 - version sorry
18:13 - uh
18:14 - definitely recommend doing it the gem
18:16 - file method and not install on your
18:18 - system because then you're stuck with it
18:20 - on your system and this is more of a
18:22 - gem file per project approach so your
18:25 - projects will vary based on what you're
18:27 - building
18:28 - so definitely keep that in mind
18:30 - so
18:32 - i'm just going to go ahead and paste
18:33 - that in just for safety sake
18:35 - uh the next one i want to use is called
18:37 - bulma
18:39 - so i'm going to do a search for bulma
18:45 - and
18:46 - i always look to kind of see which one
18:47 - has the most downloads
18:49 - usually that's the best candidate
18:52 - so i'm gonna copy that
18:57 - go back to our gym file edit
19:00 - we'll call it bulma
19:03 - css
19:04 - and bulma's like a lean down modern
19:07 - bootstrap kind of css framework i like
19:10 - it you don't have to use it you can use
19:12 - bootstrap you can use foundation
19:14 - whatever you want
19:16 - simple form
19:18 - is our next one so i'm going to go to
19:24 - and in most cases you're probably going
19:25 - to install these
19:27 - not all at once and have your mind made
19:29 - up already but for the sake of this
19:31 - tutorial i'm going to go ahead and
19:33 - install them all
19:36 - it's probably best to install each as
19:38 - you work
19:40 - forward instead of just all at once
19:44 - so the next ones are going to be
19:47 - guard and guard live reload
19:50 - there's some quite some configuration
19:52 - with this one uh it's kind of hard to
19:54 - understand at first but
19:56 - they do have repos that you can
19:59 - reference for the how to's
20:02 - and
20:03 - on rubygems if you go to the home page
20:05 - or the source code typically it's
20:07 - you know the best place to go
20:10 - the github repos tend to be the most
20:13 - up to date so i definitely refer to
20:15 - those
20:16 - and this is guards for example
20:19 - so
20:20 - uh we'll actually put that
20:23 - this one's kind of special we only need
20:24 - it in our development environment so
20:28 - rails has a specific group that
20:30 - classifies that as the environment here
20:33 - and we'll actually put that in there
20:38 - and you don't need to add these comments
20:40 - at all but
20:41 - uh typically uh just for
20:44 - my own you know
20:46 - sake i'll i'll copy kind of the
20:49 - one-liner that they give at rubygems.org
20:51 - and
20:52 - throw it in there
20:56 - and then
20:57 - the main reason we need guard
20:59 - is this guard live reload extension
21:03 - that's what i primarily use it for guard
21:06 - is capable of so much more so don't let
21:08 - me you know sway you in thinking that
21:10 - it's just for this
21:12 - uh guard live reload
21:14 - search for that
21:19 - there it is
21:20 - so i'm going to install that
21:32 - and i'll do the same thing with the
21:33 - description
21:39 - all right
21:40 - so we've got our
21:41 - i think all the necessary gems that i
21:43 - need for this particular project
21:45 - installed uh gems are kind of going to
21:47 - be your savior in a lot of cases as
21:49 - you'll come to find
21:52 - things like user user accounts user
21:54 - roles there are so many out there that
21:56 - are great for handling that stuff for
21:58 - you
21:59 - i definitely
22:00 - google that stuff just kind of get
22:02 - familiar with the process
22:04 - and we'll we'll definitely touch on
22:06 - those more in future videos so stay
22:07 - tuned of course
22:09 - uh next since we have those
22:12 - gems installed we need to run this thing
22:14 - called bundle which actually goes out
22:15 - and fetches that data for each
22:17 - so we're going to install everything we
22:19 - just added and you'll start to see those
22:21 - names now over here like simple form
22:24 - um let's see guard should be there yeah
22:28 - so you'll see them now it's part of a
22:30 - dependency in the project now so that's
22:32 - great when i do that i tend to kind of
22:34 - restart my server so if you do control c
22:38 - on a mac
22:39 - you can just
22:40 - kill your server and then run rail
22:42 - server again
22:43 - okay so for our some of our gems there
22:45 - is some setup required
22:47 - i'm gonna go to
22:49 - the simple form one and do that one real
22:51 - quick
22:54 - and i i'll never remember how this
22:57 - should be but if you refer to the repo
23:00 - like i said that's the best place to
23:02 - figure out how to do this setup
23:05 - it gives you kind of the idea here but
23:07 - like i said this gem isn't up to date i
23:10 - mean it would fetch the latest version
23:12 - but in your project you might need a
23:13 - specific version so that's why
23:15 - rubygyms.org is a thing
23:17 - so definitely
23:19 - use it instead of these reposts
23:22 - so we need to run this generator for
23:24 - this to work
23:27 - for this specific gem this is the simple
23:29 - form gym and i'm going to actually go to
23:31 - my other tab
23:34 - on my terminal
23:36 - i'm in that
23:38 - actually let's do it get add
23:45 - and
23:47 - jim's
23:49 - simple as that okay so i need to
23:53 - next
23:54 - run that generator which is rails
23:56 - generate simple form install
23:59 - and that's i just literally copied and
24:01 - pasted from that repo if you are using
24:04 - bootstrap or foundation it comes out of
24:06 - the box with support for those so
24:09 - up to you if you want to i'll i'm going
24:11 - to show you how to use this
24:13 - css framework called bulma
24:15 - and it is
24:16 - essentially more or less a modern take
24:19 - on bootstrap or stuff like that it's got
24:22 - really cool
24:23 - style look and feel to it so i just
24:25 - figured i'd give it a shot it's actually
24:27 - my first or more or less my first time
24:29 - using it so there's
24:30 - there might be some googling and stuff
24:32 - that i'll have to do to figure some
24:33 - stuff out in terms of class names but
24:35 - definitely check it out it's based on
24:37 - flexbox which is nice with that
24:39 - installed we can go and bypass these
24:40 - flags to install bootstrap and
24:42 - foundation we don't need those we'll run
24:45 - the generator
24:46 - to simpliform install and it should do
24:49 - its thing
24:52 - cool and it just gives you a kind of a
24:55 - feedback saying hey you can rerun this
24:57 - if you want to use bootstrap or
24:58 - foundation it's the same same thing i
25:00 - just told you so
25:01 - we we should be all set um there's no
25:04 - migrations to run or anything here
25:06 - so that's great
25:08 - next we want to configure guard and i've
25:10 - actually got
25:13 - the write-up of how to do it
25:15 - if you go to that ruby gym site and then
25:18 - go to guard live reload you can link to
25:20 - this
25:21 - it'll show you what to do we actually
25:23 - need to
25:24 - just notice i need to add this require
25:26 - false
25:27 - on that
25:28 - gem
25:30 - file
25:33 - right there
25:36 - and i'm going to actually turn on word
25:38 - wrap i actually need to run bundle one
25:41 - more time you're gonna find yourself
25:42 - doing this
25:44 - a lot
25:45 - okay and for safety
25:48 - we can we can do this again
25:51 - if you just hit the up arrow rails s
25:53 - again
25:54 - great running
25:56 - you can verify it in the browser
26:00 - we're good okay
26:02 - one thing to get guard
26:04 - live reload initialized is to create
26:07 - what is known as a guard file and that's
26:08 - part of using guard
26:11 - and
26:12 - i should reface all this and say you
26:14 - don't need to use this stuff it's just
26:16 - useful if you want your browser to
26:18 - refresh automatically when you do style
26:20 - changes or something like that
26:22 - you can configure it to do more uh based
26:24 - on whatever file types you use like haml
26:26 - slim
26:28 - js
26:29 - yml etc
26:31 - so it's pretty useful in that regard
26:33 - so one thing we need to run after that
26:35 - gem is installed and configured as shown
26:37 - here
26:39 - is guard init live reload
26:43 - and it might throw some warnings at you
26:46 - it's okay basically all it did is create
26:48 - a guard file with some specs in it
26:50 - so we'll go back to our project and
26:53 - you'll see this new file called guard
26:55 - file
26:56 - so it should be actually set up out of
26:57 - the box so that's great
26:59 - this stuff i know it looks confusing but
27:01 - it's basically just it's finding
27:03 - directories in your project and watching
27:05 - them as they change
27:07 - so there's some kind of
27:10 - what's it called
27:10 - [Music]
27:12 - i forget now but specific
27:14 - keys and file names and structure and
27:17 - stuff like that
27:18 - to watch and update your
27:21 - project as you save basically so with
27:23 - that all set up one more thing we need
27:27 - to do
27:28 - is make sure you have the actual browser
27:30 - extension installed
27:31 - if you go to livereload.com extensions
27:34 - it'll give you links to each
27:36 - i'm using chrome
27:37 - so actually install this in the web
27:40 - store i think all right so i already
27:42 - have live reload installed so no need to
27:45 - do it on my end if you don't go ahead
27:47 - and install this extension i believe
27:49 - it's available for almost all browsers
27:51 - so
27:52 - it will make your life
27:54 - awesome when you actually install and
27:56 - use it in ruby on rails so
27:58 - switch over to our terminal
28:00 - and with everything essentially okay
28:03 - we should be able to run
28:05 - bundle
28:06 - exact
28:08 - card
28:11 - and that specific command is there
28:15 - because we need our dependencies if you
28:17 - don't run it with bundle exact in front
28:19 - it won't notice that you're using
28:21 - certain dependencies so
28:23 - it's kind of a long thing to remember
28:25 - but
28:26 - guard is essentially the command line
28:29 - uh key key term that fires things off
28:32 - when you're using guard
28:33 - uh but in our case we need to run it as
28:35 - is and it'll just kind of do its thing
28:38 - so once you run it once it just sits
28:39 - there and waits for stuff to change so
28:41 - at this point we can you know make a new
28:43 - terminal window
28:45 - again
28:47 - and go back into our
28:49 - sites directory and then go back to our
28:52 - demo
28:53 - and you know go to town so at this point
28:56 - we should have everything installed
28:59 - and we can verify that by first creating
29:02 - our very first controller
29:04 - so i'm going to go ahead and do that let
29:06 - me get this out of the way
29:07 - since we're using a blog i'm going to do
29:09 - a
29:10 - posts controller so to do that we need
29:13 - to generate
29:14 - g or you can type generate here too
29:17 - um controller
29:19 - and if you're very very new to this and
29:21 - want to figure out what this stuff
29:23 - actually does you can do the flag help
29:25 - when you do generate controller and
29:27 - rails will spit out kind of what you can
29:29 - do what you can configure on the fly
29:32 - there are options to skip things if you
29:33 - don't want them to be generated like
29:35 - javascript or the assets at all
29:39 - you can use a certain template engine
29:42 - and
29:42 - not use the default erb so that's kind
29:45 - of useful
29:47 - um
29:48 - but yeah so read into that if you just
29:50 - type the flag
29:51 - help after a lot of things it will give
29:54 - you a lot of insight that it wasn't so
29:56 - you know
29:59 - i guess understandable by me at first
30:01 - but until i read that stuff it made more
30:03 - sense so
30:04 - let's just do this rails generate
30:06 - controller
30:09 - if i can spell controller and we'll
30:11 - actually call this i'm going to do
30:13 - capital
30:14 - i'm going to call it
30:15 - posts
30:17 - and it should be plural for the
30:19 - controller so
30:21 - for your models which we'll get into
30:23 - keep those singular just remember that
30:26 - uh so
30:28 - by default you can you can have what
30:31 - actions could be on this like index show
30:34 - edit
30:36 - create etc i'm going to go ahead and
30:39 - just leave them off for now because
30:40 - we'll actually type those in so i can
30:41 - show you exactly how this stuff works
30:44 - so we'll just do it the basic generation
30:46 - of posts
30:47 - and as you can see in the controllers it
30:49 - will generate this file called pulse
30:51 - post controller rb
30:53 - and
30:54 - various the view
30:56 - posts folder the test stuff helper stuff
31:00 - assets
31:01 - like i said you can flag this stuff to
31:02 - not generate i tend to just you know run
31:05 - with a flow and and just generate it and
31:08 - delete it later that's just me being
31:10 - lazy of course so
31:12 - all right so let's again open this and
31:15 - sublime
31:16 - so in our app directory we're going to
31:18 - find our new post controller and this is
31:20 - all generated by default
31:23 - so to show proof of concept i'm going to
31:25 - create one
31:26 - action called index
31:30 - and one more thing to get this to work
31:33 - is
31:34 - to create a view called index
31:38 - so you go into your views folder your
31:41 - posts folder and then create
31:43 - index.html.erb
31:47 - but for now i'll do just h1
31:52 - i think they use class
31:54 - title
31:56 - and then we could just put
31:58 - index
32:00 - log index
32:04 - so finally if if you were to visit the
32:06 - site
32:08 - okay it's still working and you can go
32:10 - to posts
32:11 - and then you'll see that
32:13 - but we actually need a route first so
32:16 - that's why we're getting errors
32:20 - and i know this bundle
32:23 - or my better airs gym isn't working so
32:26 - that's interesting
32:28 - all right guys i can't get for some
32:30 - reason this better errors gym isn't
32:31 - working for me but it should look like
32:33 - this on their repo and i it's kind of
32:36 - mind-boggling but um what i did though
32:39 - try i'd
32:41 - mistakenly added it to
32:43 - um
32:45 - the basic gem
32:47 - repo but we needed it in our development
32:48 - enviro environment so
32:51 - i put it down here for now so if it were
32:53 - to work go ahead and put it there make
32:56 - sure you do because you don't want that
32:57 - in production
32:59 - so
33:00 - anyway it's okay if we don't have it but
33:02 - that should be working it might work for
33:04 - you and it just isn't for me at this
33:06 - moment so
33:08 - okay so we're still getting this error
33:11 - that when we access the posts
33:13 - controller we made there's nothing there
33:16 - and that's because there is no routes
33:18 - set up so we actually need to set that
33:20 - up in our
33:21 - routes config file so go to the config
33:24 - folder
33:26 - routes and then we'll just do
33:29 - this thing called resources
33:33 - and then posts
33:36 - and that should be it um but to make
33:38 - things a little easier so we have to
33:40 - navigate to slash posts in the url i'm
33:43 - going to go ahead and put a root
33:44 - parameter
33:46 - and change that to index
33:50 - or
33:50 - posts
33:52 - index
33:56 - okay
33:58 - now that should do it um when you do
33:59 - update your routes file you you probably
34:01 - want to restart your server yet again
34:04 - so we'll go
34:06 - do rails s
34:07 - and go back to that
34:12 - refresh and there we go we got our blog
34:14 - index uh and that should be all set
34:20 - all right guys it took some time and got
34:22 - this stuff working so
34:24 - never fear on your end it should work um
34:26 - if everything's set up correctly of
34:28 - course but i got the better errors thing
34:29 - to working and to just prove it i went
34:31 - to a post that didn't exist so it's
34:34 - working there
34:35 - and then i noticed when i went to
34:39 - my post index i was like wondering why
34:42 - my css wasn't loading and that's because
34:44 - i was
34:45 - getting ahead of myself and the bulma
34:48 - gym requires you to import the bulma
34:50 - styles style sheet in your application
34:53 - css so i'm going to go to ruby
34:56 - gyms and go to that home page real quick
34:59 - just to show you by example
35:02 - so bulma
35:06 - and bulma rails
35:08 - and go to the homepage
35:10 - should take you to a github page
35:14 - and the main thing i forgot is when you
35:16 - import it you need to actually import it
35:18 - into the main style sheet of the project
35:20 - so i'm going to go do that and
35:22 - we're going to use sas by default
35:25 - it's going to be a css file in your
35:27 - style sheets go ahead and rename that to
35:29 - scss and you should be able to use sas
35:32 - right out of the box
35:35 - so there we go and i'm going to just
35:37 - import that bulma
35:38 - css there
35:42 - i think we have guard running
35:45 - uh we need to so bundle exact
35:51 - garden
35:54 - okay so if i save that again which it's
35:58 - not really
35:59 - i set this as
36:03 - syntax
36:07 - let's do css i guess i don't have sas
36:08 - support for some reason that's great
36:12 - uh okay so back to our blog
36:14 - watch the type
36:16 - hopefully update here
36:18 - give it a second there it goes okay
36:20 - great
36:21 - so we know
36:23 - basically verifying that our css is
36:25 - loading
36:28 - okay so now that we have our initial
36:31 - index action created and our view index
36:34 - created we know that things are working
36:36 - we've got our route set up
36:38 - in our config file if you go to config
36:42 - routes.rb and you should have these
36:44 - things in here
36:46 - so great we're ready to get rolling
36:49 - uh so what we want to do
36:52 - is kind of configure
36:55 - the actual way this is going to work so
36:58 - there are other actions we'll need to
36:59 - include on our controller
37:02 - but the main one i want to start with is
37:05 - the create action
37:07 - we need a form to create a blog post
37:09 - right so let's go ahead and do that
37:12 - and
37:12 - first to do create we actually need this
37:15 - action called new
37:18 - and then
37:19 - create
37:23 - okay
37:25 - and
37:27 - we actually need some data to work with
37:28 - here so this is where models come in and
37:31 - i'm going to actually generate one right
37:33 - now called post
37:34 - so let's go back and make a new
37:38 - uh tab
37:39 - and go to my sites again cd demo blog
37:44 - great and i'll actually do rails
37:47 - generate
37:50 - model
37:53 - and call it post capitalized
37:56 - and i'm going to give it these
37:59 - basically what i call them data types
38:01 - and it's just basically the
38:03 - things that get entered into the
38:04 - database and you can name them but you
38:06 - also have to
38:08 - tell
38:09 - the database what kind of data type it
38:11 - is so in this case for a blog post i
38:14 - want a title
38:15 - and it's going to be a string type of
38:17 - data and we also we're probably going to
38:19 - have you know content within that
38:22 - blog post so i'm going to do
38:24 - text
38:25 - so text is like a long form text so
38:28 - think of it like that
38:29 - so you can
38:31 - add as many as you want to a model like
38:33 - this but you can also pin things later
38:35 - with these things known as migrations
38:37 - which we'll get into
38:39 - let me bump up the size if you're having
38:41 - trouble there
38:42 - and
38:43 - when running this it generates our model
38:46 - so let's go and do that
38:51 - okay so you'll see it created a
38:53 - migration in itself as part of the model
38:56 - process
38:57 - so
38:58 - in this if you want to see what a
39:00 - migration looks like you can go to your
39:02 - project
39:03 - and there is this file
39:06 - call or this folder called db
39:08 - inside of it's a migration folder and
39:11 - inside of that is the migration we just
39:13 - created uh rails is pretty smart by
39:15 - default it does the time stamping so you
39:17 - don't have to worry about dates and
39:19 - stuff like that or like you know created
39:21 - at kind of stuff that's already included
39:23 - by default on pretty much any model or
39:25 - migration
39:27 - and here's those things we entered as
39:30 - tables in this sense
39:32 - at that point we can run what is known
39:34 - as
39:35 - rake db migrate or railsdb migrate
39:39 - and that will set that up in the
39:41 - database for good
39:44 - and you can roll this back
39:46 - hopefully don't have to do that in this
39:48 - video but we'll get into that later on
39:50 - if you need to so
39:52 - for good sake i'm going to end
39:58 - oops message
40:00 - add
40:01 - post model
40:06 - okay
40:08 - so at this point we can we should be
40:10 - able to interact with that model itself
40:13 - we need to
40:15 - basically add it to our controller in
40:18 - such a way that we interact with the
40:20 - model so you'll see in our app directory
40:23 - we have
40:24 - the model
40:25 - post
40:26 - created we shouldn't have to do anything
40:28 - at this point we will later when we add
40:30 - comments to this thing
40:32 - so don't worry that worry about that for
40:34 - now
40:34 - but we will interact there
40:36 - but then our main source of work right
40:39 - now comes to this
40:41 - controller the post controller so let's
40:43 - go ahead and
40:44 - we can reference this post
40:47 - by doing that and essentially we're
40:50 - calling that post model now and we can
40:53 - say hey we want a new one
40:56 - the create method utilizes the new
40:59 - route so if you are confused about
41:01 - routing
41:02 - since we added that resources
41:04 - parameter to our config file or routes
41:07 - file should say if you run rake routes
41:10 - it'll spit back all the basic crud
41:14 - actions
41:15 - for the post controller so we have post
41:18 - index which is like the index page of
41:20 - the blog
41:21 - create which would be where you would go
41:22 - to create the action that takes place
41:26 - when you create
41:27 - a blog post new is the actual path you
41:30 - take to go create
41:32 - edit of course is to edit show is to
41:34 - just view the individual blog post
41:36 - update is to edit it
41:39 - um it does kind of that you can do
41:41 - different types of updation updation is
41:43 - that a word updating
41:45 - uh and then of course you can delete it
41:47 - so
41:48 - that's kind of explaining that at any
41:50 - time
41:51 - if you run rake routes
41:52 - rails will spit back all of your routes
41:54 - in your routes file and kind of the
41:57 - uri pattern and the action
41:59 - involved so it's super super helpful
42:02 - so going back to our project
42:04 - that kind of gives you the sense of what
42:06 - these actions are and where you're going
42:07 - to be going when you create a new post
42:10 - or something of that nature when we
42:12 - create a new post we actually need to do
42:14 - post and do a similar fashion post.new
42:17 - but we need to pass in the parameters
42:19 - that we
42:20 - use to create the post
42:22 - and you could pass those in right in
42:24 - line like this but you're gonna find
42:26 - that you're gonna be reusing this in
42:27 - other actions so there's this private
42:30 - method
42:31 - you can add to your controller
42:34 - file that allows you to create
42:37 - this thing
42:38 - posts
42:39 - params
42:41 - and if this isn't making sense that's
42:43 - okay i was lost when i first started
42:45 - this but the more you do it the more it
42:47 - makes sense so
42:48 - here we're requiring
42:50 - for our model
42:52 - uh these
42:53 - specific
42:55 - records or
42:56 - tables whatever we generated in that
42:58 - migration
42:59 - and this is kind of a security feature
43:01 - of rails that only permits these things
43:03 - from being actually input to the form we
43:06 - do when we create this record
43:08 - if they aren't initialized here you
43:11 - can't actually submit data to the server
43:13 - so that's kind of a security thing
43:15 - so what we're really doing in this case
43:17 - is passing this
43:19 - function into this
43:21 - new
43:22 - creation method here
43:24 - and then we can check to see if that
43:28 - post saved
43:31 - and then if it did we'll want to
43:32 - redirect
43:34 - to
43:35 - the post itself
43:37 - else
43:38 - render the new template again
43:42 - okay so at basic form we're ready to
43:47 - create a new post in this sense so if we
43:49 - go to rails new
43:52 - we're going to get an error so because i
43:54 - don't have the template yet so it needs
43:55 - a template in our views folder
43:59 - so
44:00 - so if we go back to our views
44:02 - go to posts
44:04 - new file
44:05 - new.html
44:10 - and we could just for now just do a
44:15 - class
44:18 - title
44:29 - so that should at least load the page
44:31 - now
44:33 - great
44:34 - to create the form we need
44:37 - we are actually going to
44:40 - i'm going to copy i'm referencing
44:42 - another screen right now but i'm going
44:44 - to add some markup that we need for
44:46 - uh bulma plus our form so let me do this
44:51 - real quick might speed this up so you
44:53 - guys aren't
44:54 - bored
44:59 - before i do though this is where we're
45:01 - getting that simple form jim
45:05 - going and essentially rails has a
45:07 - built-in form builder it's just almost
45:09 - just like this but simple form kind of
45:11 - obviously simplifies the process
45:14 - so it's it's one that i i find pretty
45:17 - useful and makes more sense
45:19 - for stuff i do
45:20 - you're welcome to use the rails way
45:23 - they theirs does tons of stuff too
45:26 - so it's it's just a matter of preference
45:28 - i would say
45:33 - so i had to experiment with bulma to get
45:35 - this to work and i had to do a little
45:37 - extra code outside of simple form
45:40 - uh the whole intent of simple form is to
45:42 - eliminate i think the amount of markup
45:44 - you have to provide
45:52 - i'll walk you through this stuff in a
45:54 - second
45:55 - wrapper
45:57 - false
45:59 - label html
46:04 - class
46:06 - label
46:10 - so that's one input field and that's
46:12 - going to be for our title
46:14 - and the way this works is you reference
46:16 - the actual record here of the input and
46:18 - that rails is smart enough and simple
46:20 - form are smart enough to know what that
46:22 - means
46:23 - here we're classifying actual
46:26 - class on the input field itself and we
46:29 - need input in this case for
46:31 - bulma
46:32 - we don't want the wrapper by default
46:35 - simple form puts its own wrapper around
46:38 - the input field
46:39 - and this was causing errors with bulma
46:41 - because it had a similar class so there
46:44 - was clashing of styles and i didn't want
46:46 - that so in a simple form you can put a
46:49 - wrapper false declaration
46:51 - and that will help
46:52 - and then our label html we needed a
46:54 - class of labels so i went ahead and
46:56 - added that too so this is one field in
46:59 - the sense for a form
47:01 - i'm going to create a copy of that and
47:03 - paste it down
47:05 - and this one's going to be for content
47:10 - and we actually want this to have a
47:11 - class of text area according to bulma
47:17 - and label html we should be set there
47:19 - then the last thing we need is our
47:21 - button to submit the form of course so f
47:23 - dot button
47:26 - and then submit
47:28 - and this is built into simple form see
47:30 - that's nothing we created
47:32 - i'll just put create new post
47:35 - oops
47:38 - class
47:41 - button
47:43 - is primary
47:46 - that's part of bulma as well
47:49 - so if all works we should have our
47:52 - styles set up yeah there we go
47:55 - so that took some trial and error but i
47:57 - got it to make to basically work for us
47:59 - so that was pretty nifty at the time
48:03 - yeah and we'll we'll get into cleaning
48:05 - this up in a second in terms of making
48:07 - this look like our first app i showed
48:09 - you at the beginning but let's verify
48:11 - this works
48:15 - test post
48:17 - content
48:19 - i should get an error i think yeah so
48:21 - there's no show method right now or
48:23 - action in our controller and we actually
48:25 - need to have that so let's set that up
48:28 - so i'll go back to my post controller
48:30 - and we need to create an actual show
48:32 - action
48:35 - def show
48:38 - and
48:39 - new line
48:41 - and on the show we actually we need to
48:42 - find the post that was created so if you
48:44 - do
48:46 - post dot to find
48:49 - params
48:51 - id so we're finding by the id
48:55 - and we'll be reusing this line
48:58 - about three more times
49:00 - so at the end they'll show you a way to
49:01 - kind of make use of a before filter or
49:04 - action that allows you just to kind of
49:06 - have that set in stone you only need to
49:08 - write the code once just kind of a
49:09 - really dry
49:10 - approach
49:12 - but for now just to show you how things
49:13 - work this is what we need
49:16 - so in that sense if we head back
49:19 - we should find
49:21 - that we need now of show template
49:25 - so let's go to our post folder again
49:27 - create a new file called show.html
49:28 - show.html.erb
49:31 - and we can just i don't know what did i
49:33 - have in my markup here
49:35 - quite a bit of stuff so
49:39 - if i just do section
49:45 - i don't know if i have
49:47 - i do okay great
49:49 - container
49:53 - for now i'll just put the title and the
49:55 - content
50:00 - and rails
50:01 - if you're new to it
50:03 - this is kind of the general way it looks
50:05 - so
50:06 - you can do ruby inside these brackets
50:09 - and percent signs
50:11 - if you want to echo it out put the equal
50:14 - sign
50:16 - if you don't and you want to just
50:17 - perform some operation or set of error
50:19 - variable you can do that there you don't
50:21 - want to do too much magic inside those
50:24 - it's more more so for just displaying
50:26 - the data so keep that in mind
50:28 - so here we have reference to that post
50:31 - symbol
50:32 - and we can just target the title
50:35 - that we created
50:36 - so i'll just create a class
50:39 - i think bulma has one called content
50:45 - and i can do the same with the content
50:48 - type
50:54 - so the controller's sending this data
50:55 - through
50:57 - to the view
50:58 - if you can think of that
50:59 - so that's how we have access to this
51:01 - post property or symbol as they call
51:03 - them
51:04 - and that is shown here
51:08 - so fall goes right we should be able to
51:10 - see that data
51:11 - there it is
51:13 - so that gives itself an id if we go back
51:16 - to our posts index we'll see the index
51:19 - let's um let's clean this up a little
51:21 - bit so our index we can do this section
51:24 - as well
51:24 - let's see section
51:27 - section
51:30 - then i have container
51:35 - and that sets basically a max width and
51:37 - boundary for our project
51:40 - um i created for bulma i created these
51:43 - it looks like a cards on the front end
51:44 - so i'll go ahead go through this with
51:46 - you
51:47 - for our index we actually do need to set
51:50 - a new variable or
51:54 - symbol
51:55 - on our project where it gets all the
51:56 - posts so i actually want this to be
51:58 - plural
52:00 - instead of post
52:01 - in this case so we'll go post all
52:05 - uh and then order
52:07 - here you can just establish how it's
52:09 - displayed in the back um when you do
52:11 - loop through all the posts so
52:14 - order descending
52:16 - and notice in ruby you don't need ugly
52:18 - semicolons and all that stuff that's why
52:20 - i really like it
52:22 - it's really clean
52:24 - so going back here now we have access to
52:26 - that posts
52:27 - uh symbol
52:30 - so we'll go ahead and reference it
52:33 - and notice i'm not outputting this loop
52:35 - i'm actually creating what is a rails
52:38 - loop at this point
52:40 - but we'll do dot each do
52:42 - post
52:44 - i said rails it's a ruby loop excuse me
52:48 - and then we can loop through each post
52:50 - so
52:53 - the bulma way goes like this at least
52:55 - the style i chose
52:58 - so bear with me here
53:35 - okay so with the markup in place that
53:37 - should do it for us we need to add
53:40 - support for the post title and to do
53:42 - that go back and do post dot title
53:46 - and notice here since we're looping
53:47 - through we don't need this to write the
53:49 - symbol with the at sign in front of it
53:51 - we're using this as the variable
53:52 - throughout so
53:54 - something to keep in mind when you do
53:55 - loop through
53:56 - things
53:58 - so it's just post our content post a
54:00 - title
54:01 - and comments we will add later for now
54:04 - they'll be
54:05 - see if i can just comment that out
54:07 - comment the comment
54:10 - very much at each
54:12 - oh i did that wrong it should be posts
54:19 - boom all right so there's our first post
54:22 - great
54:23 - uh going one step further
54:26 - obviously i can't click that post right
54:27 - now and i want to click it to go to the
54:29 - actual individual post so to do that
54:32 - uh instead of just the title here
54:35 - we'll make use of that but we want to do
54:36 - a link to in rails
54:39 - which is a handy basically
54:42 - href generator
54:43 - with a ton of properties
54:45 - and then we'll actually link to the post
54:47 - itself
54:49 - and again this is one of those
54:51 - rake routes situations if you're not
54:53 - sure where to link to this is you know
54:55 - where i got that from
54:58 - so here
55:00 - now it's a link we can link to the post
55:03 - great
55:06 - all right so
55:08 - uh i think next i'm going to add
55:10 - general links to
55:12 - you know kind of navigate this blog a
55:14 - little easier so i'm going to actually
55:16 - pull up my other project
55:18 - and get the layout file open
55:21 - and the layout file is kind of the the
55:23 - global source of truth for your styles
55:25 - uh this is where all your content gets
55:27 - fed through
55:29 - this yield sign is everything we've been
55:31 - creating so far all the stuff gets fed
55:33 - into that and spit out so
55:35 - i want to actually add this
55:37 - content to
55:39 - our layout and i'll talk you through it
55:45 - and this is just kind of a time saver so
55:47 - don't think you need to learn every bit
55:49 - that i'm teaching you here
55:51 - but
55:52 - let's see
55:53 - [Music]
55:56 - so most of this is bulma and here i've
55:58 - created a section class called hero if
56:02 - you go to the bulma library there's
56:04 - a whole section on that
56:07 - let's see hero
56:09 - and there's different
56:10 - snippets you can use i use one that's
56:13 - basically
56:16 - let me find it
56:18 - i think it was this one here
56:20 - but i eliminated this bottom row of
56:22 - links because we only need really one or
56:25 - so in this project
56:26 - so let me go back and show you how that
56:29 - worked
56:30 - we have our hero section the hero head
56:33 - the navbar itself
56:35 - in it i didn't create a logo or anything
56:36 - it's just text that says demo blog and
56:39 - we're using a link to
56:41 - a function we just use in rails and
56:43 - linking to our root path
56:45 - you notice the path extension
56:48 - doesn't come when you rake routes
56:50 - but that's just kind of an understood
56:53 - path that you can pull from each route
56:56 - so we can get posts path
56:59 - or new post path or edit post path
57:02 - that's something that you just kind of
57:04 - learn as you go
57:05 - it's not so obvious sadly
57:08 - so let me go back to the project
57:11 - and we're giving it a class navbar item
57:13 - for the sake of foma
57:15 - and then we added a link on the end of
57:18 - the
57:19 - nav
57:21 - on the right side which would link to a
57:23 - new post path as again adding that path
57:26 - at the end
57:27 - and that will allow us to go to that new
57:30 - url path
57:32 - and then here i'm doing something nifty
57:34 - where you can actually
57:36 - for each of your views you can specify
57:38 - something in your layout file
57:41 - using this thing called content4
57:44 - and i'll show you how that works right
57:45 - now so essentially you can
57:48 - set the variable here but define it in
57:50 - your views so when you hit that view
57:53 - in your url path that updates based on
57:56 - whatever you set so
57:58 - to make that make more sense i'll do
58:00 - this one right
58:03 - so it'd be it's called content4
58:09 - and then i set it as page title
58:11 - in our layout file
58:13 - and this one i just want to call index
58:19 - so if we head to our index page
58:22 - you should see that
58:24 - new layout form and then our index thing
58:26 - is set or index title
58:28 - and going back to the layout
58:30 - once more it's called page title
58:33 - so on each of our views we'll actually
58:34 - need to add something of this nature so
58:36 - i'm going to go ahead and do that for
58:37 - all of you so far
58:39 - new
58:45 - create
58:46 - a new
58:48 - post if you don't add this it will air
58:50 - out so
58:51 - it will pre be pretty obvious what views
58:53 - you don't have it on
58:55 - okay so with this setup when you know
58:56 - create new posts and
58:58 - that we just set
59:01 - and then we'll actually need to do it on
59:04 - the show view as well but this
59:06 - in this case we need to actually have a
59:08 - variable set for it
59:11 - so let me copy that back
59:13 - and you don't have to use a string you
59:16 - can do
59:17 - dot title
59:19 - and it will render the same way so let's
59:21 - go back to our
59:23 - route
59:24 - go to this and the first post title
59:27 - should display there too
59:28 - we have it displaying twice
59:30 - i'll probably get rid of the one down
59:32 - below
59:41 - okay great
59:42 - now that we have that set up why don't
59:44 - we tackle how to
59:46 - say edit a post
59:51 - so let's go back to our post controller
59:53 - and to edit we need to actually have two
59:55 - actions one's called update and one is
59:57 - called edit
59:58 - edit is the view will actually render
60:00 - and update is the actual method that
60:02 - will actually take place so
60:04 - i'll go ahead and create def
60:06 - update
60:09 - and f edit
60:16 - so update we need to find our post again
60:18 - to know what to update so we'll do the
60:20 - same thing as we did for show params
60:24 - id
60:26 - you should do a server server-side check
60:27 - to say hey if the post has been updated
60:30 - let's redirect the user to
60:32 - the post itself
60:34 - so we'll do again
60:36 - post params we're pulling that in
60:42 - uh from the bottom here
60:44 - so we're doing that double verification
60:46 - check uh if the form has since updated
60:51 - and then we want to redirect the user to
60:53 - the post itself so in this case write
60:56 - that else render edit
61:01 - great
61:02 - and then for edit we actually just need
61:04 - to find the post again so post
61:07 - see how i'm repeating this i'll show you
61:10 - how
61:11 - later on
61:12 - to make this not so repetitive
61:17 - great
61:20 - uh one thing we will need to do which
61:22 - we'll get
61:23 - an error for is to
61:27 - actually let me
61:29 - add to the view first so we can i can
61:32 - show you by example so let me pull up my
61:34 - other view
61:36 - on the show page
61:39 - and kind of walk you through what i did
61:41 - there
61:42 - so this one we have the page title we
61:44 - have our section or container
61:46 - and there's this thing from bulma called
61:48 - level
61:54 - level
61:55 - oops can't spell
61:59 - so on the left side i'll do pretty much
62:01 - just follow what i have on like repo
62:03 - left side
62:08 - div class
62:10 - level left
62:19 - p class level
62:23 - item
62:28 - and then
62:29 - this it's just kind of a placeholder
62:31 - because otherwise
62:32 - the actions weren't floating to the
62:34 - right like i wanted so
62:36 - a little behind the scenes
62:38 - fibbing there
62:40 - right side
62:42 - are where the actions really will be
62:45 - so these are going to be like the edit
62:47 - and delete buttons
62:56 - so we'll do p class
63:01 - level item again
63:08 - and inside this we'll have a link to our
63:11 - actual edit
63:13 - action
63:14 - link to
63:15 - edit we'll just call it edit
63:18 - and then this will go edit post path
63:23 - notice it's all dynamic based on the
63:25 - actual model and invention
63:28 - we do need to pass the post through to
63:30 - it though so that's something that's new
63:34 - and then we can give it a class button
63:38 - okay and then
63:40 - i'll come back to the delete one but for
63:43 - now we'll add that
63:57 - so another link to
64:02 - in fact i'm going to leave this
64:07 - uh i'll just put delete for now
64:10 - it's not going to do anything though so
64:15 - i'm going to just hard code this
64:16 - but it's a to do for sure so
64:19 - button
64:20 - is danger
64:38 - because deletes a little little
64:40 - complicated on how it works because
64:41 - there's some um data
64:45 - interactivity needing to take place
64:47 - within the browser so
64:48 - we'll get to it
64:50 - nav and then i had just a
64:53 - horizontal rule
64:55 - and then we have our content class
64:58 - again
65:00 - i could have left that from before but
65:02 - we'll just do that so we need our at
65:04 - post.content
65:07 - render that
65:09 - okay
65:12 - and later we'll add a section for
65:13 - comments
65:20 - for now i'm going to leave that as is
65:27 - okay so if all goes right we should be
65:29 - able to edit this post now
65:34 - and we're missing the template so we
65:36 - actually need to create that
65:41 - so it'll be edit.html.erb
65:46 - and in our case
65:49 - i'm i'm gonna make this a little more
65:50 - dry
65:51 - and
65:52 - one thing we absolutely need for sure is
65:54 - content
65:56 - for
65:58 - and we'll pass in page title again from
66:01 - the layout
66:02 - and we'll just put edit post
66:06 - uh but i also want to
66:09 - since edit and create kind of use the
66:11 - same form we might as well make use of
66:13 - the same form
66:14 - instead of re-authoring that tire form
66:16 - again so i'm going to actually
66:19 - render what is known as a partial
66:22 - and this is how you do it in rails and i
66:24 - don't have it created yet but i can so
66:26 - in posts again in the folder views
66:29 - folder i'm going to create one
66:31 - make sure it is underscore at the
66:33 - beginning that's how rails knows what it
66:35 - is
66:36 - i'm just going to title it form erb
66:39 - html.erb
66:42 - and if i go back to my
66:44 - new file i'm going to copy and paste
66:47 - this in
66:49 - actually cut it from new
66:50 - paste it into form
66:53 - save it
66:56 - and for edit i have render form already
66:58 - i'm actually going to copy and paste
67:00 - this and put it in the new file as well
67:04 - so we have essentially
67:06 - our partial and the title for the page
67:08 - in these views
67:14 - okay so if i all goes right
67:17 - we should see our form
67:19 - and the content within it on this page
67:21 - rails is smart enough to kind of
67:23 - know that that's an edit and update kind
67:26 - of scenario so the data gets fed through
67:29 - so that's pretty nifty
67:32 - we can
67:33 - probably tweak that button to say
67:36 - let's probably get rid of this text
67:38 - actually this will probably be wrong in
67:40 - the repo but that button text needs to
67:42 - change dynamically so this needs to say
67:44 - update post yeah
67:47 - so that's rails being smart again
67:49 - so i'll just hit update and it redirects
67:51 - back to the post
67:53 - so great
67:54 - we have our editing functionality in
67:56 - place
67:57 - and to test it i could do test post
67:59 - content with and
68:01 - update
68:03 - update
68:05 - there it is and if we go back to our
68:06 - homepage
68:08 - there it is
68:09 - cool
68:11 - so the last thing to think about is okay
68:13 - this delete button we need to make sure
68:15 - that's even possible probably don't want
68:17 - to always have
68:19 - um posts on your site that you know
68:22 - you can't delete so let's get back into
68:24 - our post controller
68:27 - and we'll need one more
68:29 - action called delete or destroy in this
68:31 - case
68:36 - and we actually we need to find the post
68:38 - once more
68:42 - so we'll do find
68:43 - params
68:45 - id
68:46 - and then we can just put post.destroy
68:51 - and that's
68:52 - essentially how it gets deleted but
68:55 - we actually want to redirect the user to
68:57 - to the post path
68:59 - so in that case it would be the index
69:01 - page
69:02 - we could put root root path there too
69:05 - but i'm going to do post path
69:06 - okay so in our view here's where it gets
69:09 - a little
69:10 - complicated uh we'll go back to
69:14 - the show page and
69:17 - that to do i entered comes into full
69:20 - force now so i actually need to
69:22 - do another link too
69:26 - and make sure you get the equal sign
69:34 - okay and then we need to
69:36 - pass in the post path itself
69:38 - so there's no actual delete or destroy
69:41 - post path that's not part of our routes
69:43 - that wouldn't make sense
69:45 - so we're just getting the post path with
69:47 - the post
69:48 - id
69:49 - and then our method on it
69:52 - will be delete
69:55 - and it's typed like this
69:59 - and then you can you know
70:01 - tap into the browser functionality and
70:04 - access the confirmation window
70:07 - which is
70:11 - typed like so
70:13 - and then i want the bulma classes on
70:15 - this as well so we'll do button and then
70:18 - is danger
70:25 - okay
70:26 - so our method is the delete method on
70:30 - this posts
70:31 - we're getting its id and then we're
70:33 - confirming with the user because you
70:34 - don't want to just delete it outright
70:36 - without that kind of gateway in between
70:39 - so let's verify that that works now
70:45 - so here's our are you sure and then
70:48 - delete and now we're at our index page
70:50 - with no posts so let's create another
70:52 - one just to make sure everything's
70:53 - working
70:55 - second post
71:02 - create
71:05 - and it goes to the post cool
71:09 - third post
71:20 - great and there they are in line this is
71:22 - our root path
71:24 - this is our create path
71:26 - or new path
71:28 - and we go back to
71:31 - the show path which is getting the id of
71:33 - the post
71:34 - and we can edit the post
71:36 - and update the post
71:38 - and delete it
71:40 - so great that's
71:41 - essentially the functioning part of the
71:43 - blog so we've gotten that far
71:50 - most blogs have comment forms though so
71:52 - we want to actually add that to our view
71:54 - next and to do that we need to generate
71:57 - both a controller and a model for
71:59 - comments
72:00 - so let's go ahead and go back to
72:04 - rails on our i'll actually do git and
72:12 - finish
72:13 - um
72:20 - posts
72:22 - um i don't know posts
72:25 - this is the hardest part i swear
72:36 - okay cool
72:38 - so we need to create one more controller
72:40 - called common controller um i'm going to
72:42 - actually do rails
72:44 - generate
72:45 - controller
72:46 - and let's just call this comments
72:50 - and we'll just leave it at that
72:53 - okay
72:55 - and i'll just do the model too so rails
72:58 - let me clean this up rails generate
73:01 - model
73:02 - let me verify one second what i'd
73:05 - created
73:06 - so yeah we need a model called comment
73:09 - and its title or its
73:12 - name
73:12 - of the person commenting would be a
73:14 - string
73:15 - and the comment
73:17 - would be
73:18 - text
73:20 - i ran into the weird naming issue that
73:23 - like the comment
73:24 - thing it kind of gets confusing later on
73:27 - but i'm going to keep it as is just so
73:28 - it's
73:30 - consistent with what you guys will see
73:32 - but you might change that name to
73:34 - something different there you'll see
73:36 - what i mean
73:37 - so let's run that
73:40 - and you can verify that that migration
73:43 - is in place
73:45 - in our db folder again
73:49 - let's create comment there it is
73:52 - so we still need to run
73:56 - migration so rails db migrate after you
73:58 - run that
74:00 - you should create those tables
74:03 - there they go
74:04 - okay great now we can interact with that
74:07 - the first thing i'm going to do is go to
74:12 - our models
74:16 - and this is where relations comes into
74:18 - play a post is going to have many
74:20 - comments
74:22 - rails has tons of documentation on this
74:24 - if you want to read up on it it's really
74:26 - important to understand but it's very
74:28 - basic how it works so that's why i
74:29 - really like it so if we could do
74:31 - as many
74:32 - comments
74:36 - but a comment is going to belong to a
74:38 - post so we'll do belongs to post
74:43 - notice this one's singular
74:46 - and this one
74:47 - has many so that relationship is
74:50 - basically established just like that so
74:52 - we do have a comments controller now
74:54 - we should only really need our create
74:57 - and destroy methods on this one
75:00 - since it's going to be showing on the
75:01 - show page of our posts
75:04 - so let's do a create
75:11 - oops and destroy
75:18 - and it gets a little confusing because
75:20 - we need to have that you know
75:21 - relationship between these two models
75:23 - now so
75:24 - we need to first find our post
75:37 - we need to find it by the post id
75:40 - and that's something we haven't talked
75:41 - about yet is migrations and one thing
75:44 - that isn't quite established between
75:45 - these two models is an id
75:48 - usually there's a relationship based on
75:50 - id between them so we need to run what's
75:52 - known as a migration at this point
75:55 - and then we will do rails generate
75:58 - migration
76:00 - let's see add
76:03 - post
76:04 - id to comments so if we run this
76:09 - hopefully rails is smart enough to know
76:10 - what we're after
76:12 - but we're taking the id of the posts
76:14 - and putting a new table on the comments
76:18 - model
76:18 - uh so those ids when
76:21 - they're basically you know related to
76:23 - can have something of relation so that
76:26 - the idea is how that works
76:28 - it's kind of confusing but we'll see
76:29 - what happens
76:31 - in our migration here
76:35 - so we go to migrate and our latest one
76:38 - so it didn't actually sometimes it
76:39 - automatically does this stuff for you
76:41 - but unfortunately it didn't
76:43 - so you might need to add this yourself
76:46 - and the way it automatically does it is
76:48 - how you type it
76:49 - but we won't get into that i guess now
76:52 - so we need to add a column
76:54 - in this case to comments
76:57 - and then it's going to be post id
77:02 - and of the type integer
77:05 - so we'll close that and we need to run
77:08 - one more migration so rails db migrate
77:15 - it should add that record
77:17 - to our column so now we have yeah that
77:20 - column comments on comments which is
77:22 - post id and it's an integer
77:26 - so if all goes right we should be able
77:27 - to access this as i've typed
77:31 - and
77:32 - we also need comment to find the comment
77:35 - on the specific post
77:38 - comments
77:40 - create
77:42 - params
77:44 - comment
77:47 - and then we can permit instead of doing
77:49 - that um
77:51 - private function we can just type it in
77:52 - place like this for the strong params
77:56 - that rails needs
78:00 - and we need to close that
78:02 - and then once that's good we can
78:04 - redirect
78:06 - to post
78:08 - path
78:10 - post
78:12 - okay
78:14 - so here we're finding the posts based
78:16 - off of this variable or symbol we
78:18 - created once we have that we can get the
78:20 - comments on it
78:22 - and
78:23 - go through that comments model and then
78:25 - create
78:26 - the new
78:27 - comment on that post
78:29 - it's kind of kind of tricky kind of hard
78:31 - to understand but that's essentially
78:33 - what's happening
78:35 - so let's first verify that that works
78:37 - i'm going to go to my
78:39 - show file
78:41 - and i'm going to make that form
78:45 - so when we have an actual comment
78:48 - form here we should be able to see
78:51 - the name and the field
78:53 - to type the comment in so let's go to
78:55 - views
78:56 - layouts
78:59 - post show okay so here's i have that div
79:01 - from before or that section i should say
79:04 - i'm gonna go ahead and do a
79:06 - container i'm going to call this section
79:09 - 2.
79:10 - that's part of a spacing thing in bulma
79:18 - subtitle
79:20 - i just applied various classes here to
79:22 - kind of design this without actually
79:24 - doing custom styles
79:33 - and here we need to um
79:38 - add post
79:41 - comments
79:43 - account
79:47 - so here we're getting the posts comments
79:49 - count obviously and we can just type
79:51 - comments here
79:53 - before i go on though
79:55 - since this record
79:57 - the records that we have don't have this
79:59 - stuff associated with it it's going to
80:00 - error out if you don't
80:02 - um have some of this stuff like the post
80:06 - id
80:07 - so i'm going to go ahead and delete
80:08 - these and then we'll add fresh ones
80:11 - and i can talk about how you can do this
80:13 - without
80:14 - the interface because sometimes rails
80:16 - will throw up an error screen and you
80:17 - can't access the ui
80:19 - so i'll show you how to do that it's
80:21 - called rails console
80:24 - and you can essentially just interact
80:26 - with your database through the command
80:28 - line
80:30 - so next we want to render comments
80:34 - and post our comments
80:39 - let me make some more room
80:42 - there we go
80:45 - and that will essentially be our comment
80:47 - feed
80:48 - next is the comment form
80:51 - and i just added a horizontal rule
80:55 - h3
80:57 - with the class
80:59 - subtitle
81:01 - and is three
81:04 - just the sizing
81:05 - class you can put leave a reply
81:09 - and then we rendered an actual form
81:12 - which we still need to create
81:25 - great
81:27 - so it's going to air out obviously
81:28 - because we don't have the form
81:30 - we actually need to create a new post
81:32 - though
81:33 - so let's do
81:35 - uh i don't know i think i'm on my fourth
81:37 - post
81:38 - fourth
81:40 - post comment
81:43 - and boom missing comments form so we
81:46 - need to create that
81:48 - uh in our comments folder
81:52 - let's do a partial that's a form that
81:55 - html erb
81:58 - and then in this file it will be
82:02 - using simple form again
82:10 - and then it gets kind of tricky here
82:14 - but i'm going to grab
82:19 - make sure we close it
82:21 - so
82:22 - to make this a little easier i'm going
82:24 - to grab the content
82:26 - from within this form
82:29 - and we'll just change the parameters
82:32 - oops
82:34 - and this will be named
82:38 - and this will be comment
82:46 - okay so save
82:48 - inside the simple form 4 we need to pass
82:50 - in both the post and the post comments
82:55 - let's do post
82:58 - and at post comments
83:01 - and then this thing called build
83:04 - and this confused me too but build i
83:07 - have a definition here it says it
83:09 - returns one or more new objects of the
83:11 - collection type that have been
83:13 - instantiated with attributes and linked
83:15 - to this object through a foreign key so
83:18 - it's kind of how we have the post id on
83:20 - the comments uh we're getting that post
83:23 - reference from it
83:25 - and then you can update that form and
83:27 - get that data from that
83:29 - that thing
83:30 - it says it also only works if it's
83:33 - associated object already exists so it
83:36 - can't be nil so that's why i deleted
83:38 - those records because this stuff would
83:39 - error out otherwise
83:40 - i think that's it for the form
83:43 - let's verify that it'll pull through
83:47 - uh and then we have post path
83:53 - what am i missing here
83:56 - all right guys after quite some time
83:58 - trying to figure this out i realized
84:00 - immediately when i thought about it
84:02 - finally a big gotcha is that
84:05 - to do
84:06 - what we're doing we need to actually
84:08 - edit our routes file so comments needs
84:10 - to be within it
84:11 - and i totally forgot about that so let's
84:14 - uh let's go back to that
84:17 - and
84:19 - actually
84:20 - fast forward it and try to do some more
84:21 - code here for the destroy method to see
84:24 - if i just had something wrong i'm gonna
84:26 - delete that for now and then we'll we'll
84:27 - get it
84:28 - um
84:30 - in the next part after i get this
84:33 - crap working
84:36 - so
84:37 - let's
84:38 - fix that and then i'm gonna go into my
84:39 - rounds file
84:41 - in config
84:43 - let me close these
84:45 - the comments are nested within the
84:48 - scope of posts we actually need to
84:51 - create a block with ruby here and do end
84:56 - and then inside here we'll do resources
84:58 - for comments
85:00 - this is only for nested kind of things
85:03 - most cases you'll if you're having
85:04 - completely new routes you'll do just
85:06 - similar like we did the resources posts
85:09 - but in this case we're doing it this way
85:12 - so since we edited our routes file i'm
85:14 - going to go ahead and restart my server
85:16 - um let me clear out here
85:23 - and we have it running i'll do control c
85:26 - and then up arrow
85:28 - hit rails s again
85:33 - so now if we do
85:35 - uh actually i'll stay on that view
85:39 - and go over to
85:44 - this here and i'm going to do rake
85:45 - routes just to show you what i mean
85:49 - so since they're nested you'll notice
85:51 - how it works it goes posts and then the
85:54 - id and then comments and there's no just
85:56 - immediate comment
85:58 - route
85:59 - so when they're nested like that that's
86:00 - how that works
86:02 - pretty simple
86:04 - okay so let's go back to our code editor
86:08 - and actually have the
86:10 - demo app that i had built previously up
86:12 - just trying to troubleshoot
86:14 - and let's
86:16 - go back to our comment file
86:20 - on our app views and actually the post
86:23 - show file is what i'm after
86:25 - i have the render comments form showing
86:28 - so we should be able to at this point
86:32 - see that form up here so yes it took me
86:36 - too long to figure that out and i feel
86:38 - bad for it but anyway
86:41 - uh with our controller setup and our
86:43 - data models you know related we can now
86:46 - leave a reply um i'm gonna just put any
86:49 - reference
86:51 - this
86:53 - is my first comment
86:57 - leave it
86:59 - and we're missing a partial that is what
87:01 - the comment would spit out as so it's
87:04 - kind of like the show view of our
87:05 - comment
87:07 - that will render once that happens right
87:09 - here
87:10 - to get that we actually need to create a
87:12 - new file called comment but i'm going to
87:14 - make it a partial so underscore comments
87:16 - comments.html.erb
87:20 - and i'll reference another file i
87:22 - created from before and this one i'm
87:24 - going to use a box class
87:26 - from bulma
87:28 - and inside that will be an article
87:33 - and it's gonna have a class of media
87:40 - and we'll have a class of media content
87:45 - if you don't have emit installed
87:47 - that's how i'm doing this dot notation
87:50 - uh really recommend it on whatever code
87:53 - editor you use
87:54 - kind of a life saver
87:57 - uh so you could just do p
87:58 - and strong
88:01 - inside that we'll have the comment
88:05 - name
88:11 - and i'm gonna actually put
88:13 - colon
88:15 - and then the comment itself
88:17 - and here's where i mentioned naming
88:20 - convention before and this is why it's a
88:21 - bad one because i'm referencing the
88:24 - comment
88:25 - model with the comment data type so it's
88:28 - confusing as as hell right there so
88:32 - definitely maybe use like something
88:33 - different than me if you're following
88:35 - along but
88:37 - for
88:38 - learning purposes it's not a huge deal
88:40 - but just no naming conventions are huge
88:44 - uh and if we want to delete this uh it's
88:46 - very similar to the one we did on the
88:48 - post so i'm gonna go ahead and type this
88:49 - one out
88:50 - do a link to delete
88:52 - the only difference here is we're
88:54 - referencing that post again
88:56 - so we need this bracket notation
88:59 - and then also the comment id
89:02 - to make sure we're referencing the right
89:05 - record
89:06 - so we'll do a method of delete
89:09 - and then a class
89:11 - again
89:12 - button
89:14 - is danger
89:16 - oops danger and then we actually need
89:20 - this data
89:21 - confirmment window again this is just
89:24 - essentially hacking our browser
89:28 - and there are ways to work around this
89:29 - so you want to use a different modal
89:32 - to ask this are you sure kind of
89:34 - question
89:35 - you can do that that's something i won't
89:37 - be touching on in this video series but
89:40 - it's it's a workaround you need some
89:42 - javascript to kind of tie into the the
89:44 - whole structure but you can essentially
89:46 - like say use a bootstrap modal or even
89:48 - bulma's in this case
89:50 - to do this
89:52 - all right so with our comment
89:54 - parcel posted
89:56 - we should be able to render this comment
89:58 - now
90:00 - post that comments
90:02 - missing comment
90:04 - builder hmm
90:08 - why is that
90:10 - oh it's i think i named it comments
90:13 - yeah it should be comment
90:15 - sorry guys
90:17 - so make that uh singular
90:22 - save
90:24 - and
90:25 - kaboom
90:27 - all right so there's the comment we have
90:29 - a delete button
90:30 - um it doesn't do anything yet it does
90:33 - this data thing but it actually won't go
90:35 - back to the server and say hey actually
90:36 - delete this so we need to actually
90:38 - create that next
90:40 - but essentially hey comments are working
90:42 - so that's cool
90:44 - uh to do that delete method we'll need
90:46 - to go back to our controller
90:48 - our comments controller and we have that
90:51 - destroy method i mean
90:53 - and here again we need to access the
90:54 - post
90:55 - find it i should say
90:57 - so we do post find
91:00 - params
91:02 - and we need it by the post id since
91:05 - we're in the commons controller
91:08 - so through the comment we are finding
91:10 - the post associated with it if that
91:12 - makes sense
91:14 - and then we need to also find the
91:16 - comment to destroy
91:18 - so post.comments
91:20 - dot find
91:22 - and then the params of the specific
91:24 - comment so it's just basically the id of
91:27 - it
91:30 - and then we'll actually destroy it
91:33 - and we'll redirect the user to
91:36 - the post paths
91:39 - and this actually needs to feed that
91:40 - post symbol in so we know which one to
91:43 - go to
91:45 - and that should be it for the destroy
91:48 - so let's make sure that works
91:51 - refresh this
91:53 - delete this
91:55 - are you sure yeah
91:57 - great
91:58 - so we're still back on this post and
92:00 - it's all working
92:01 - uh you'll notice that the url has eight
92:03 - i've added and deleted records just
92:06 - trying to
92:07 - troubleshoot along the way so you might
92:09 - notice that that happens to you uh to do
92:12 - that realistically you sometimes your
92:15 - interface goes to the error screen so if
92:17 - you wanted to
92:19 - say do that from the command line which
92:20 - is probably the way you should you can
92:22 - do this thing called rails console
92:26 - and this there's a ton of documentation
92:28 - on it but you're essentially running a
92:30 - ruby command line that's embedded within
92:34 - the terminal uh in rails
92:37 - so we can access our post model if we
92:39 - want so say
92:40 - i'm just creating a variable here post
92:42 - equals post
92:44 - it'll actually ask you to do this weird
92:46 - connection thing
92:47 - so just do that and forget about what it
92:49 - does because it's crazy easy
92:52 - but clear that and then you have post
92:54 - and then just say post.all
92:57 - and you can see all the posts on your
92:59 - current model
93:01 - and here's our the one that was showing
93:02 - it's posted with an id of eight it shows
93:04 - me the title and the content
93:07 - so if you want to actually manage this
93:08 - stuff you can do post i don't know
93:12 - equals post dot find
93:16 - 8
93:17 - since that's the id there
93:19 - and it'll come back with that same one
93:22 - if we wanted to say post dot
93:26 - since we assigned it to that post we now
93:28 - just have that post handy as the
93:30 - variable here it keeps outputting
93:33 - i want to update that title
93:35 - so let's say post
93:37 - dot title
93:39 - and then we'll do an eagle sign this
93:42 - is a post updated
93:45 - from rails
93:46 - console
93:50 - then it spits it back you still need to
93:52 - save it so remember to do that so post
93:54 - dot save
93:56 - there you go
93:57 - and then if we navigate back if you want
93:59 - to just exit this you can go exit
94:03 - so if we navigate back to this post
94:06 - it updated
94:07 - so
94:08 - that's essentially a way to interact
94:10 - with your database without having to
94:11 - like do any
94:13 - uh crazy ui stuff um i think it's the
94:16 - pattern that most developers go with
94:18 - simply because it's
94:19 - straightforward and you can actually sit
94:21 - without any errors
94:22 - so you'll notice right now there's no
94:24 - user accounts or anything like that any
94:26 - user can access this blog and delete it
94:28 - and edit it that's not very secure in a
94:31 - future video i'll probably talk more
94:33 - about user accounts how to implement
94:35 - those and make sure certain users can
94:37 - only have read-only access and other
94:38 - users can have writing access and
94:41 - deleting editing all that stuff one more
94:44 - thing for i forget on the controller i
94:48 - mentioned
94:49 - how we repeated a lot of stuff
94:52 - and
94:52 - this line in particular
94:54 - we repeat here on show we repeated on
94:57 - update on edit and destroy
95:00 - we can create another private
95:02 - definition here
95:04 - so we'll call it actually
95:07 - find post
95:09 - for instance
95:12 - and essentially just keep that line in
95:16 - there so i'll just copy and paste it
95:21 - oops
95:24 - great so it's there now and we have
95:26 - access to it basically for all of these
95:29 - methods and actions
95:31 - so
95:32 - rails has this handy thing called before
95:33 - action that you can initialize before
95:36 - anything happens on your app
95:39 - so we can just define it as before
95:41 - action
95:42 - and
95:43 - grab that method
95:46 - and then on it we can only
95:49 - cue it in
95:50 - for an array of these
95:53 - actions so for instance i only need it
95:55 - on show
95:56 - update
95:57 - oops
95:58 - update
96:00 - edit
96:01 - and destroy
96:06 - so what that does is essentially means i
96:08 - don't need it now for
96:12 - let's see
96:13 - edit and show
96:15 - show can just be empty
96:17 - update oops
96:21 - update can get rid of that line
96:25 - edit i can leave it empty
96:28 - and destroy
96:31 - so that really cleans up our code it
96:33 - almost makes it look like it shouldn't
96:34 - even work but it does and that's awesome
96:38 - so we have that available to us you can
96:40 - do before actions for other things like
96:42 - authentication
96:44 - um you can even do things such as
96:47 - making sure your app is secure like when
96:50 - you do enter certain criteria
96:52 - on your model
96:54 - you can actually tell it that
96:57 - it should validate in some way based on
96:59 - the server response i'll get into more
97:01 - of that as we go on
97:03 - but that's essentially
97:05 - without any security right now we have a
97:07 - working blog with comments
97:09 - hope you guys enjoyed this if you're
97:11 - just getting into ruby on rails i am as
97:14 - well so don't consider me a pro but i've
97:16 - certainly studied up on it i've been
97:18 - building a side project on the side
97:20 - using it and i figured i'd share the
97:22 - wealth and try to teach others
97:24 - so i can better learn myself so
97:27 - more is to come i hope you enjoy this
97:29 - again and thanks for watching